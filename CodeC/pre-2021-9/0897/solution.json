["import io, sys, atexit, os\nimport math as ma\nfrom sys import exit\nfrom decimal import Decimal as dec\nfrom itertools import permutations\n\ndef li():\n    return list(map(int, input().split()))\n\ndef num():\n    return map(int, input().split())\n\ndef nu():\n    return int(input())\n\ndef solve():\n    t = nu()\n    for _ in range(t):\n        n = nu()\n        x = set()\n        y = set()\n        fl = False\n        for i in range(n):\n            (l, r) = num()\n            px = l + r\n            py = r - l\n            if px in x:\n                fl = True\n            if py in y:\n                fl = True\n            x.add(px)\n            y.add(py)\n        x = list(x)\n        y = list(y)\n        x.sort()\n        y.sort()\n        mnx = 9999999999999\n        mny = 9999999999999\n        if fl:\n            print(0)\n        else:\n            for i in range(1, len(x)):\n                mnx = min(mnx, x[i] - x[i - 1])\n            for i in range(1, len(y)):\n                mny = min(mny, y[i] - y[i - 1])\n            print(min(mny, mnx) / 2)\nsolve()", "import io, sys, atexit, os\nimport math as ma\nfrom sys import exit\nfrom decimal import Decimal as dec\nfrom itertools import permutations\n\ndef li():\n    return list(map(int, input().split()))\n\ndef num():\n    return map(int, input().split())\n\ndef nu():\n    return int(input())\n\ndef solve():\n    t = nu()\n    for _ in range(t):\n        n = nu()\n        x = set()\n        y = set()\n        fl = False\n        for i in range(n):\n            (l, r) = num()\n            px = l + r\n            py = r - l\n            if px in x:\n                fl = True\n            if py in y:\n                fl = True\n            x.add(px)\n            y.add(py)\n        x = list(x)\n        y = list(y)\n        x.sort()\n        y.sort()\n        mnx = 9999999999999\n        mny = 9999999999999\n        if fl:\n            print(0)\n        else:\n            for i in range(1, len(x)):\n                mnx = min(mnx, x[i] - x[i - 1])\n            for i in range(1, len(y)):\n                mny = min(mny, y[i] - y[i - 1])\n            print(min(mny, mnx) / 2)\nsolve()", "import io, sys, atexit, os\nimport math as ma\nfrom sys import exit\nfrom decimal import Decimal as dec\nfrom itertools import permutations\n\ndef li():\n    return list(map(int, input().split()))\n\ndef num():\n    return map(int, input().split())\n\ndef nu():\n    return int(input())\n\ndef solve():\n    t = nu()\n    for _ in range(t):\n        n = nu()\n        x = set()\n        y = set()\n        fl = False\n        for i in range(n):\n            (l, r) = num()\n            px = l + r\n            py = r - l\n            if px in x:\n                fl = True\n            if py in y:\n                fl = True\n            x.add(px)\n            y.add(py)\n        x = list(x)\n        y = list(y)\n        x.sort()\n        y.sort()\n        mnx = 9999999999999\n        mny = 9999999999999\n        if fl:\n            print(0)\n        else:\n            for i in range(1, len(x)):\n                mnx = min(mnx, x[i] - x[i - 1])\n            for i in range(1, len(y)):\n                mny = min(mny, y[i] - y[i - 1])\n            print(min(mny, mnx) / 2)\nsolve()", "import sys\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef iinput():\n    return int(input())\n\ndef rinput():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\nt = iinput()\nfor _ in range(t):\n    n = iinput()\n    p = []\n    mi = []\n    for i in range(n):\n        (x, y) = rinput()\n        p.append(x + y)\n        mi.append(x - y)\n    p.sort()\n    mi.sort()\n    m = float('inf')\n    for i in range(1, n):\n        if p[i] - p[i - 1] < m:\n            m = p[i] - p[i - 1]\n        if mi[i] - mi[i - 1] < m:\n            m = mi[i] - mi[i - 1]\n    if m % 2 == 0:\n        print(m // 2)\n    else:\n        print(m / 2)", "import io, sys, atexit, os\nimport math as ma\nfrom sys import exit\nfrom decimal import Decimal as dec\nfrom itertools import permutations\n\ndef li():\n    return list(map(int, input().split()))\n\ndef num():\n    return map(int, input().split())\n\ndef nu():\n    return int(input())\n\ndef solve():\n    t = nu()\n    for _ in range(t):\n        n = nu()\n        x = set()\n        y = set()\n        fl = False\n        for i in range(n):\n            (l, r) = num()\n            px = l + r\n            py = r - l\n            if px in x:\n                fl = True\n            if py in y:\n                fl = True\n            x.add(px)\n            y.add(py)\n        x = list(x)\n        y = list(y)\n        x.sort()\n        y.sort()\n        mnx = 9999999999999\n        mny = 9999999999999\n        if fl:\n            print(0)\n        else:\n            for i in range(1, len(x)):\n                mnx = min(mnx, x[i] - x[i - 1])\n            for i in range(1, len(y)):\n                mny = min(mny, y[i] - y[i - 1])\n            print(min(mny, mnx) / 2)\nsolve()", "import io, sys, atexit, os\nimport math as ma\nfrom sys import exit\nfrom decimal import Decimal as dec\nfrom itertools import permutations\n\ndef li():\n    return list(map(int, input().split()))\n\ndef num():\n    return map(int, input().split())\n\ndef nu():\n    return int(input())\n\ndef solve():\n    t = nu()\n    for _ in range(t):\n        n = nu()\n        x = set()\n        y = set()\n        fl = False\n        for i in range(n):\n            (l, r) = num()\n            px = l + r\n            py = r - l\n            if px in x:\n                fl = True\n            if py in y:\n                fl = True\n            x.add(px)\n            y.add(py)\n        x = list(x)\n        y = list(y)\n        x.sort()\n        y.sort()\n        mnx = 9999999999999\n        mny = 9999999999999\n        if fl:\n            print(0)\n        else:\n            for i in range(1, len(x)):\n                mnx = min(mnx, x[i] - x[i - 1])\n            for i in range(1, len(y)):\n                mny = min(mny, y[i] - y[i - 1])\n            print(min(mny, mnx) / 2)\nsolve()", "for _ in range(int(input())):\n    n = int(input())\n    plus = []\n    minus = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        plus.append(x + y)\n        minus.append(x - y)\n    (plus.sort(), minus.sort())\n    m = float('inf')\n    for i in range(1, n):\n        if plus[i] - plus[i - 1] < m:\n            m = plus[i] - plus[i - 1]\n        if minus[i] - minus[i - 1] < m:\n            m = minus[i] - minus[i - 1]\n    if m % 2 == 0:\n        print(m // 2)\n    else:\n        print(m / 2)", "from decimal import *\ngetcontext().prec = 1\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = []\n    i = 0\n    b = []\n    while i < n:\n        (x, y) = map(int, input().split())\n        a.append(x + y)\n        b.append(x - y)\n        i += 1\n    a.sort()\n    b.sort()\n    m = 1000000007\n    for i in range(1, n):\n        k = abs(a[i] - a[i - 1])\n        l = abs(b[i] - b[i - 1])\n        m = min(m, k, l)\n    print(Decimal(m / 2))", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    l1 = []\n    l2 = []\n    for j in range(N):\n        (a, b) = map(int, input().split())\n        l1.append(a - b)\n        l2.append(a + b)\n    l1.sort()\n    l2.sort()\n    m1 = 100000000000000000000000\n    for j in range(1, len(l1)):\n        if l1[j] - l1[j - 1] < m1:\n            m1 = l1[j] - l1[j - 1]\n    m2 = 1000000000000000000000\n    for j in range(1, len(l2)):\n        if l2[j] - l2[j - 1] < m2:\n            m2 = l2[j] - l2[j - 1]\n    if min(m1, m2) % 2 == 0:\n        print(min(m1, m2) // 2)\n    else:\n        print(min(m1, m2) / 2)", "import math\nfor _ in range(0, int(input())):\n    points = int(input())\n    xs = set()\n    ys = set()\n    for _ in range(points):\n        (x, y) = [int(i) for i in input().split()]\n        xs.add(x - y)\n        ys.add(x + y)\n    xmin = 1000000001\n    ymin = 1000000001\n    if len(xs) != points or len(ys) != points:\n        print(0)\n    else:\n        xs = sorted(xs)\n        ys = sorted(ys)\n        xmin = math.fabs(xs[1] - xs[0])\n        ymin = math.fabs(ys[1] - ys[0])\n        for i in range(1, len(xs) - 1):\n            if xmin > math.fabs(xs[i + 1] - xs[i]):\n                xmin = xs[i + 1] - xs[i]\n            if ymin > math.fabs(ys[i + 1] - ys[i]):\n                ymin = ys[i + 1] - ys[i]\n        print(min(xmin, ymin) / 2)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    a_set = set()\n    b_set = set()\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        a_set.add(x - y)\n        b_set.add(x + y)\n    a_set = list(a_set)\n    b_set = list(b_set)\n    if len(a_set) != n or len(b_set) != n:\n        print(0)\n    else:\n        a_set = sorted(a_set)\n        b_set = sorted(b_set)\n        a1 = a_set[1] - a_set[0]\n        b1 = b_set[1] - b_set[0]\n        for i in range(2, n):\n            a1 = min(a1, a_set[i] - a_set[i - 1])\n            b1 = min(b1, b_set[i] - b_set[i - 1])\n        print(min(a1, b1) / 2)", "import cmath\nimport math\n\ndef f(l):\n    l1 = []\n    for i in range(len(l)):\n        w = cmath.polar(l[i])\n        z = cmath.rect(w[0], w[1] - cmath.pi / 4)\n        l1.append(z)\n    l1.sort(key=lambda z: z.real)\n    for i in range(len(l1) - 1):\n        diff = abs(l1[i].real - l1[i + 1].real)\n        if diff == 0:\n            print(0)\n            return\n        if i == 0:\n            minDiffX = diff\n        else:\n            minDiffX = min(diff, minDiffX)\n    l1.sort(key=lambda x: x.imag)\n    for i in range(len(l1) - 1):\n        diff = abs(l1[i].imag - l1[i + 1].imag)\n        if diff == 0:\n            print(0)\n            return\n        if i == 0:\n            minDiffY = diff\n        else:\n            minDiffY = min(diff, minDiffY)\n    print(min(minDiffX, minDiffY) * math.sin(math.pi / 4))\nT = int(input())\nwhile T:\n    l = []\n    n = int(input())\n    while n:\n        t = input().split()\n        l.append(complex(int(t[0]), int(t[1])))\n        n -= 1\n    f(l)\n    T -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    co = []\n    suma = []\n    diff = []\n    for i in range(n):\n        (x, y) = map(int, input().strip().split())\n        co.append([x, y])\n        suma.append(x + y)\n        diff.append(x - y)\n    suma.sort()\n    diff.sort()\n    mina = 10 ** 9\n    mina = abs((suma[0] - suma[1]) / 2)\n    mina = min(mina, abs((diff[0] - diff[1]) / 2))\n    for i in range(1, n - 1):\n        mina = min(mina, abs((suma[i] - suma[i + 1]) / 2), abs((diff[i] - diff[i + 1]) / 2))\n        if mina == 0.0:\n            break\n    print(mina)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    arr = []\n    arr3 = []\n    for i in range(n):\n        (x, y) = map(int, input().strip().split(' '))\n        arr.append(y - x)\n        arr3.append(y + x)\n    arr = sorted(arr)\n    arr3 = sorted(arr3)\n    arr2 = []\n    for i in range(n - 1):\n        arr2.append((arr[i + 1] - arr[i]) / 2)\n        arr2.append((arr3[i + 1] - arr3[i]) / 2)\n    print(min(arr2))", "t = int(input())\nfor _ in range(0, t):\n    intercept1 = []\n    intercept2 = []\n    n = int(input())\n    for i in range(0, n):\n        (x, y) = map(int, input().split())\n        intercept1.append(y + x)\n        intercept2.append(y - x)\n    intercept1.sort()\n    intercept2.sort()\n    mn1 = 10 ** 10\n    mn2 = 10 ** 10\n    for i in range(1, n):\n        diff1 = intercept1[i] - intercept1[i - 1]\n        mn1 = min(mn1, diff1)\n        diff2 = intercept2[i] - intercept2[i - 1]\n        mn2 = min(mn2, diff2)\n        ans = min(mn1, mn2)\n    print(ans / 2)", "import math\nroot = math.sqrt(2)\nfor t in range(int(input())):\n    num = int(input())\n    a = []\n    for i in range(num):\n        a.append(list(map(int, input().split())))\n    b = []\n    c = []\n    for i in range(num):\n        b.append(a[i][1] - a[i][0])\n        c.append(a[i][1] + a[i][0])\n    c.sort(reverse=True)\n    b.sort(reverse=True)\n    d = []\n    e = []\n    for i in range(num - 1):\n        d.append(b[i] - b[i + 1])\n        e.append(c[i] - c[i + 1])\n    f = min(min(d), min(e))\n    f /= 2\n    print(f)", "for k in range(int(input())):\n    n = int(input())\n    arr1 = []\n    arr2 = []\n    for _ in range(n):\n        (a, b) = map(int, input().split())\n        arr1.append(a + b)\n        arr2.append(b - a)\n    arr1.sort()\n    arr2.sort()\n    l1 = []\n    l2 = []\n    for i in range(len(arr1) - 1):\n        l1.append(arr1[i + 1] - arr1[i])\n        l2.append(arr2[i + 1] - arr2[i])\n    x = min(l1)\n    y = min(l2)\n    print('{0:.6f}'.format(min(x, y) / 2))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    x = []\n    y = []\n    dx = []\n    dy = []\n    for j in range(n):\n        c = list(map(int, input().split()))\n        x.append(c[0] - c[1])\n        y.append(c[0] + c[1])\n    x.sort()\n    y.sort()\n    for j in range(1, n):\n        dx.append(x[j] - x[j - 1])\n        dy.append(y[j] - y[j - 1])\n    a = min(dx)\n    b = min(dy)\n    print('{0:.6f}'.format(min(a, b) / 2))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    (mp, mn) = ([], [])\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        mp.append(y - x)\n        mn.append(y + x)\n    dmin = abs(mp[1] - mp[0])\n    mp.sort()\n    mn.sort()\n    for i in range(n - 1):\n        dmin = min(dmin, mp[i + 1] - mp[i])\n        dmin = min(dmin, mn[i + 1] - mn[i])\n    if dmin % 2 == 0:\n        print(dmin // 2)\n    else:\n        print(dmin / 2)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    d = []\n    dl = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        d.append(y - x)\n        dl.append(y + x)\n    d = sorted(d)\n    dl = sorted(dl)\n    ans = abs(d[0] - d[1])\n    k = 0\n    while k < n - 1:\n        ans = min(ans, abs(d[k] - d[k + 1]))\n        ans = min(ans, abs(dl[k] - dl[k + 1]))\n        k += 1\n    if ans % 2 == 0:\n        print(int(ans / 2))\n    else:\n        print(ans / 2)", "T = int(input())\nfor i in range(0, T):\n    N = int(input())\n    L = []\n    for j in range(0, N):\n        (x, y) = map(int, input().split())\n        L.append((x, y))\n    arr11 = []\n    arr12 = []\n    for j in range(0, len(L)):\n        arr11.append(L[j][1] - L[j][0])\n        arr12.append(L[j][1] + L[j][0])\n    arr11 = sorted(arr11)\n    arr12 = sorted(arr12)\n    arr11 = arr11[::-1]\n    arr12 = arr12[::-1]\n    arr21 = [100000000000]\n    arr22 = [100000000000]\n    for j in range(0, len(L) - 1):\n        arr21.append(arr11[j] - arr11[j + 1])\n        arr21.append(arr12[j] - arr12[j + 1])\n    print(min(min(arr21), min(arr22)) / 2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    x_s = set()\n    y_s = set()\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        x_s.add(x - y)\n        y_s.add(x + y)\n    if len(x_s) != n or len(y_s) != n:\n        print(0)\n    else:\n        lx = sorted(list(x_s))\n        ly = sorted(list(y_s))\n        xmin = (lx[1] - lx[0]) / 2\n        ymin = (ly[1] - ly[0]) / 2\n        for i in range(n - 1):\n            if (lx[i + 1] - lx[i]) / 2 < xmin:\n                xmin = (lx[i + 1] - lx[i]) / 2\n            if (ly[i + 1] - ly[i]) / 2 < ymin:\n                ymin = (ly[i + 1] - ly[i]) / 2\n        print(min(xmin, ymin))", "import bisect\nans = []\ntest = int(input())\nfor x in range(test):\n    n = int(input())\n    line = []\n    for l in range(n):\n        on = []\n        li = input()\n        li = list(map(int, li.split(' ')))\n        on.append(-li[0] + li[1])\n        on.append(-li[0] - li[1])\n        line.append(on)\n    list1 = []\n    list2 = []\n    mini = 1\n    i = 0\n    for j in range(i + 1, n):\n        dist1 = line[i][0] - line[j][0]\n        dist2 = line[i][1] - line[j][1]\n        if dist1 == 0 or dist2 == 0:\n            mini = 0\n            break\n        else:\n            list1.append(dist1)\n            list2.append(dist2)\n    if not mini:\n        ans.append(float(mini))\n    elif n == 2:\n        mini = min(abs(list1[0]), abs(list2[0]))\n        ans.append(float(mini) / 2)\n    else:\n        list1.sort()\n        list2.sort()\n        mini = list1[1] - list1[0]\n        for i in range(1, n - 1):\n            val1 = abs(list1[i] - list1[i - 1])\n            val2 = abs(list2[i] - list2[i - 1])\n            val = min(val1, val2, abs(list1[i - 1]), abs(list2[i - 1]))\n            if val < mini:\n                mini = val\n        mini = min(abs(list1[n - 2]), abs(list2[n - 2]), mini)\n        ans.append(float(mini) / 2)\nfor x in ans:\n    if x.is_integer():\n        print(int(x))\n    else:\n        print(x)", "t = int(input())\nfor zz in range(t):\n    n = int(input())\n    lisplus = []\n    lisminus = []\n    dic = {}\n    dic2 = {}\n    lis = []\n    lines = n - 1\n    for i in range(n):\n        point = list(map(int, input().split()))\n        lisplus.append(point)\n        lisminus.append([point[0], -point[1]])\n    lisplus = sorted(lisplus, key=sum)\n    lisminus = sorted(lisminus, key=sum)\n    if lines > n:\n        print('0')\n        continue\n    else:\n        i = len(lisplus) - 1\n        j = len(lisminus) - 1\n        checki = 1\n        checkj = 1\n        ini = 0\n        inj = 0\n        distan = []\n        while i > 0:\n            c1 = sum(lisplus[i]) - sum(lisplus[i - 1])\n            c1 = c1 / 2\n            dis11 = abs(c1 - sum(lisplus[i]))\n            dis12 = abs(c1 - sum(lisplus[i - 1]))\n            distan.append(abs(c1))\n            i -= 1\n        while j > 0:\n            c2 = sum(lisminus[j]) - sum(lisminus[j - 1])\n            c2 = c2 / 2\n            dis21 = abs(c2 - sum(lisminus[j]))\n            dis22 = abs(c2 - sum(lisminus[j - 1]))\n            distan.append(abs(c2))\n            j -= 1\n        print(min(distan))", "for _ in range(int(input())):\n    n = int(input())\n    xset = set()\n    yset = set()\n    for i in range(n):\n        (c, d) = [int(i) for i in input().split()]\n        xset.add(c - d)\n        yset.add(c + d)\n    xmin = 100\n    if len(list(xset)) != n or len(list(yset)) != n:\n        print(0)\n    else:\n        xset = sorted(list(xset))\n        yset = sorted(list(yset))\n        xmin = xset[1] - xset[0]\n        ymin = yset[1] - yset[0]\n        for i in range(0, len(xset) - 1):\n            if xmin > xset[i + 1] - xset[i]:\n                xmin = xset[i + 1] - xset[i]\n            if ymin > yset[i + 1] - yset[i]:\n                ymin = yset[i + 1] - yset[i]\n        print(min(xmin, ymin) / 2)", "a = int(input())\ni = 0\nwhile i < a:\n    b = int(input())\n    p = []\n    n = []\n    j = 0\n    while j < b:\n        (x, y) = map(int, input().split(' '))\n        sub = y - x\n        add = y + x\n        p.append(sub)\n        n.append(add)\n        j = j + 1\n    n = sorted(n)\n    p = sorted(p)\n    h = len(p) - 1\n    pd = []\n    for v in range(len(p) - 1):\n        gs = abs(p[v] - p[v + 1])\n        pd.append(gs)\n    q = 0\n    while q < len(n) - 1:\n        o = q + 1\n        l = abs(n[q] - n[o])\n        pd.append(l)\n        q = q + 1\n    arnav = min(pd) / 2\n    print(arnav)\n    i = i + 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    co = []\n    suma = []\n    diff = []\n    for i in range(n):\n        (x, y) = map(int, input().strip().split())\n        co.append([x, y])\n        suma.append(x + y)\n        diff.append(x - y)\n    suma.sort()\n    diff.sort()\n    mina = 10 ** 9\n    mina = abs((suma[0] - suma[1]) / 2)\n    mina = min(mina, abs((diff[0] - diff[1]) / 2))\n    for i in range(1, n - 1):\n        mina = min(mina, abs((suma[i] - suma[i + 1]) / 2), abs((diff[i] - diff[i + 1]) / 2))\n        if mina == 0.0:\n            break\n    print(mina)", "import math\nroot2 = math.sqrt(2)\nfor t in range(int(input())):\n    num = int(input())\n    a = []\n    for i in range(num):\n        a.append(list(map(int, input().split())))\n    b = []\n    c = []\n    for i in range(num):\n        b.append(a[i][1] - a[i][0])\n        c.append(a[i][1] + a[i][0])\n    c.sort(reverse=True)\n    b.sort(reverse=True)\n    d = []\n    e = []\n    for i in range(num - 1):\n        d.append(b[i] - b[i + 1])\n        e.append(c[i] - c[i + 1])\n    f = min(min(d), min(e))\n    f = f / 2\n    print(f)", "for i in range(int(input())):\n    n = int(input())\n    points_diff = []\n    points_sum = []\n    for t in range(n):\n        (x, y) = tuple(map(int, input().split()))\n        points_diff.append(y - x)\n        points_sum.append(y + x)\n    points_diff.sort()\n    points_sum.sort()\n    f_diff = []\n    f_sum = []\n    for i in range(1, n):\n        f_diff.append(abs(points_diff[i] - points_diff[i - 1]))\n        f_sum.append(abs(points_sum[i] - points_sum[i - 1]))\n    print(min(min(f_diff), min(f_sum)) / 2)", "def printPairs(array, n):\n    if n <= 1:\n        return\n    minDiff = array[1] - array[0]\n    for i in range(2, n):\n        minDiff = min(minDiff, array[i] - array[i - 1])\n    return minDiff\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    setx = set()\n    sety = set()\n    for i in range(n):\n        (aa, bb) = [int(i) for i in input().split()]\n        sety.add(bb + aa)\n        setx.add(aa - bb)\n    if len(list(setx)) != n:\n        print(0)\n    elif len(list(sety)) != n:\n        print(0)\n    else:\n        sortedx = sorted(list(setx))\n        sortedy = sorted(list(sety))\n        xdiff = printPairs(sortedx, len(sortedx))\n        ydiff = printPairs(sortedy, len(sortedy))\n        xx = min(xdiff, ydiff)\n        print(xx / 2)", "t = int(input())\nwhile t:\n    v = int(input())\n    L1 = []\n    Lp = []\n    Ln = []\n    Lpd = []\n    Lnd = []\n    for i in range(0, v):\n        (m, n) = map(int, input().split())\n        L1.append(m)\n        L1.append(n)\n    for i in range(0, v * 2, 2):\n        x = L1[i]\n        y = L1[i + 1]\n        m = 1\n        Lp.append(y - m * x)\n        m = -1\n        Ln.append(y - m * x)\n    Ln.sort()\n    Lp.sort()\n    for k in range(0, v - 1):\n        Lpd.append(abs(Lp[k + 1] - Lp[k]))\n        Lnd.append(abs(Ln[k + 1] - Ln[k]))\n    Lpd.sort()\n    Lnd.sort()\n    if Lpd[0] == 0 or Lnd[0] == 0:\n        print(0)\n    elif Lpd[0] < Lnd[0]:\n        print(Lpd[0] / 2)\n    elif Lnd[0] < Lpd[0]:\n        print(Lnd[0] / 2)\n    else:\n        print(Lpd[0] / 2)\n    t = t - 1", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    d = []\n    d1 = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        d.append(y - x)\n        d1.append(y + x)\n    d = sorted(d)\n    d1 = sorted(d1)\n    ans = abs(d[0] - d[1])\n    k = 0\n    while k < n - 1:\n        ans = min(ans, abs(d[k] - d[k + 1]))\n        ans = min(ans, abs(d1[k] - d1[k + 1]))\n        k += 1\n    if ans % 2 == 0:\n        print(int(ans / 2))\n    else:\n        print(ans / 2)", "T = int(input())\nfor a in range(T):\n    N = int(input())\n    x = [0] * N\n    y = [0] * N\n    lsum = [0] * N\n    lsub = [0] * N\n    for l in range(N):\n        [x[l], y[l]] = (int(i) for i in input().split())\n        lsum[l] = x[l] + y[l]\n        lsub[l] = x[l] - y[l]\n    lsum.sort()\n    lsub.sort()\n    flag = 0\n    minsum = float('inf')\n    minsub = float('inf')\n    for f in range(N - 1):\n        if abs(lsum[f + 1] - lsum[f]) < minsum:\n            minsum = abs(lsum[f + 1] - lsum[f])\n            if minsum == 0:\n                flag = 1\n                break\n    for f in range(N - 1):\n        if abs(lsub[f + 1] - lsub[f]) < minsub:\n            minsub = abs(lsub[f + 1] - lsub[f])\n            if minsub == 0:\n                flag = 1\n                break\n    if flag == 1:\n        print(0)\n    else:\n        temp = min(minsub, minsum)\n        ans = temp / 2\n        print(ans)", "t = int(input())\nfor test in range(1, t + 1):\n    arrx = []\n    arry = []\n    n = int(input())\n    res = 0.0\n    for i in range(n):\n        temp = input()\n        temp2 = temp.split()\n        temp2[0] = float(temp2[0])\n        temp2[1] = float(temp2[1])\n        arrx.append(temp2)\n        arry.append(temp2)\n    arrx.sort(key=lambda x: x[1] - x[0])\n    arry.sort(key=lambda x: x[1] + x[0])\n    for i in range(int(n - 1)):\n        xmid = (arrx[i][0] + arrx[i + 1][0]) / 2\n        ymid = (arrx[i][1] + arrx[i + 1][1]) / 2\n        dist = abs(arrx[i][1] - arrx[i][0] - (ymid - xmid))\n        if i == 0:\n            res = dist\n        if dist < res:\n            res = dist\n        dist = abs(arrx[i][1] + arrx[i][0] - (ymid + xmid))\n        if dist < res:\n            res = dist\n        xmid = (arry[i][0] + arry[i + 1][0]) / 2\n        ymid = (arry[i][1] + arry[i + 1][1]) / 2\n        dist = abs(arry[i][1] - arry[i][0] - (ymid - xmid))\n        if dist < res:\n            res = dist\n        dist = abs(arry[i][1] + arry[i][0] - (ymid + xmid))\n        if dist < res:\n            res = dist\n    print(res)", "def findMinDiff(arr, n):\n    arr = sorted(arr)\n    diff = 10 ** 20\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] < diff:\n            diff = arr[i + 1] - arr[i]\n    return diff\narr = [0, 1, -1]\nn = len(arr)\ntest = int(input())\nfor i in range(test):\n    n = int(input())\n    XX = list()\n    YY = list()\n    for k in range(n):\n        (m, n1) = map(int, input().split(' '))\n        XX.append(m + n1)\n        YY.append(m - n1)\n    XX.sort()\n    YY.sort()\n    diff = 10 ** 20\n    for i in range(n - 1):\n        if XX[i + 1] - XX[i] < diff:\n            diff = XX[i + 1] - XX[i]\n    for i in range(n - 1):\n        if YY[i + 1] - YY[i] < diff:\n            diff = YY[i + 1] - YY[i]\n    print(0.5 * diff)", "from math import inf\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    subtract = []\n    add = []\n    for j in range(1, n + 1):\n        (x, y) = input().split()\n        x = int(x)\n        y = int(y)\n        subtract.append(x - y)\n        add.append(x + y)\n    subtract.sort()\n    add.sort()\n    smallForSubtract = inf\n    smallForAdd = inf\n    for k in range(0, n - 1):\n        smallForSubtract = min(smallForSubtract, abs(subtract[k + 1] - subtract[k]))\n        smallForAdd = min(smallForAdd, abs(add[k + 1] - add[k]))\n    final = min(smallForAdd, smallForSubtract) / 2\n    print(final)", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    Xtrans = []\n    Ytrans = []\n    for x in range(0, n):\n        (x, y) = map(int, input().split())\n        X = x + y\n        Y = y - x\n        Xtrans.append(X)\n        Ytrans.append(Y)\n    Xtrans.sort()\n    Ytrans.sort()\n    for x in range(0, len(Ytrans) - 1):\n        if x == 0:\n            minimumY = abs(Ytrans[x] - Ytrans[x + 1]) / 2\n        elif abs(Ytrans[x] - Ytrans[x + 1]) / 2 < minimumY:\n            minimumY = abs(Ytrans[x] - Ytrans[x + 1]) / 2\n    for x in range(0, len(Xtrans) - 1):\n        if x == 0:\n            minimumX = abs(Xtrans[x] - Xtrans[x + 1]) / 2\n        elif abs(Xtrans[x] - Xtrans[x + 1]) / 2 < minimumX:\n            minimumX = abs(Xtrans[x] - Xtrans[x + 1]) / 2\n    print(min(minimumX, minimumY))\n    t -= 1", "import math\n\ndef fun2(paramfun1, n):\n    if n <= 1:\n        return\n    fun2param = paramfun1[1] - paramfun1[0]\n    for i in range(2, n):\n        fun2param = min(fun2param, paramfun1[i] - paramfun1[i - 1])\n    for i in range(1, n):\n        if paramfun1[i] - paramfun1[i - 1] == fun2param:\n            return (paramfun1[i - 1], paramfun1[i])\n\ndef fun1(param1, param2):\n    (x, y) = param1\n    qx = 1 / 2 ** 0.5 * x - 1 / 2 ** 0.5 * y\n    qy = 1 / 2 ** 0.5 * x + 1 / 2 ** 0.5 * y\n    return (round(qx, 7), round(qy, 7))\nfor _ in range(int(input())):\n    n = int(input())\n    par1 = set()\n    par2 = set()\n    xxx = math.radians(45)\n    for i in range(n):\n        (a, b) = [int(i) for i in input().split()]\n        (a, b) = fun1((a, b), xxx)\n        par1.add(a)\n        par2.add(b)\n    if len(list(par1)) != n or len(list(par2)) != n:\n        print(0)\n    else:\n        par1 = sorted(list(par1))\n        par2 = sorted(list(par2))\n        (x1, x2) = fun2(par1, len(par1))\n        (y1, y2) = fun2(par2, len(par2))\n        if abs(x1 - x2) > abs(y1 - y2):\n            print(round(abs(y1 - y2) / 2 * math.sqrt(2), 7))\n        else:\n            print(round(abs(x1 - x2) / 2 * math.sqrt(2), 7))", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    c_pos = []\n    c_neg = []\n    for j in range(0, n):\n        m = input().split()\n        c_pos.append(int(m[1]) + int(m[0]))\n        c_neg.append(int(m[1]) - int(m[0]))\n    c_pos.sort()\n    c_neg.sort()\n    min = c_neg[1] - c_neg[0]\n    for j in range(n - 1):\n        if min > c_pos[j + 1] - c_pos[j]:\n            min = c_pos[j + 1] - c_pos[j]\n        if min > c_neg[j + 1] - c_neg[j]:\n            min = c_neg[j + 1] - c_neg[j]\n        if min == 0:\n            break\n    if min == 0:\n        print(0)\n    else:\n        print(min / 2)", "for _ in range(int(input())):\n    n = int(input())\n    sarthak = []\n    singla = []\n    for i in range(n):\n        (p, q) = map(int, input().split())\n        c1 = p - q\n        c2 = -(p + q)\n        sarthak.append(c1)\n        singla.append(c2)\n    sarthak.sort()\n    singla.sort()\n    aayu1 = []\n    singla1 = []\n    for i in range(n - 1):\n        maxi1 = abs(sarthak[i] - sarthak[i + 1])\n        maxi2 = abs(singla[i] - singla[i + 1])\n        aayu1.append(maxi1)\n        singla1.append(maxi2)\n    count = 0\n    for i in range(n - 1):\n        if aayu1[i] == 0 or singla1[i] == 0:\n            count = 1\n            break\n    if count == 1:\n        print('0')\n    else:\n        max3 = min(aayu1)\n        max4 = min(singla1)\n        if max3 < max4:\n            print(max3 / 2)\n        else:\n            print(max4 / 2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    points = []\n    for j in range(n):\n        k = input()\n        l = k.split()\n        points.append(l)\n    c1 = []\n    c2 = []\n    for p in points:\n        ad = int(p[0]) - int(p[1])\n        c1.append(ad)\n        am = int(p[0]) + int(p[1])\n        c2.append(am)\n    c1.sort()\n    c2.sort()\n    dif1 = []\n    dif2 = []\n    for i in range(len(c1) - 1):\n        dif1.append(c1[i + 1] - c1[i])\n        dif2.append(c2[i + 1] - c2[i])\n    mini1 = min(dif1)\n    mini2 = min(dif2)\n    minimum = min(mini1, mini2)\n    print(minimum / 2)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    v1 = []\n    v2 = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        c1 = a - b\n        c2 = -(a + b)\n        v1.append(c1)\n        v2.append(c2)\n    v1.sort()\n    v2.sort()\n    v3 = []\n    v4 = []\n    for i in range(n - 1):\n        maxi1 = abs(v1[i] - v1[i + 1])\n        maxi2 = abs(v2[i] - v2[i + 1])\n        v3.append(maxi1)\n        v4.append(maxi2)\n    count = 0\n    for i in range(n - 1):\n        if v3[i] == 0 or v4[i] == 0:\n            count = 1\n            break\n    if count == 1:\n        print('0')\n    else:\n        max3 = min(v3)\n        max4 = min(v4)\n        if max3 < max4:\n            print(max3 / 2)\n        else:\n            print(max4 / 2)", "l = int(input())\nfor k in range(l):\n    t = int(input())\n    c = []\n    cx = []\n    mi = []\n    count = 0\n    for i in range(t):\n        z = input()\n        z = list(map(int, z.split()))\n        cons = z[1] - z[0]\n        con = z[0] + z[1]\n        c.append(cons)\n        cx.append(con)\n    c.sort()\n    cx.sort()\n    le = len(c)\n    for j in range(le - 1):\n        if c[j] != c[j + 1] and cx[j] != cx[j + 1]:\n            mi.append(abs(c[j] - c[j + 1]))\n            mi.append(abs(cx[j] - cx[j + 1]))\n        else:\n            count += 1\n            break\n    if count == 0:\n        print(min(mi) / 2)\n    else:\n        print(0)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    pos = []\n    neg = []\n    for i in range(n):\n        (x, y) = map(int, input().split(' '))\n        pos.append(y - x)\n        neg.append(y + x)\n    pos = sorted(pos)\n    neg = sorted(neg)\n    pdiff = []\n    for p in range(len(pos) - 1):\n        k = abs(pos[p] - pos[p + 1])\n        pdiff.append(k)\n    for q in range(len(neg) - 1):\n        l = abs(neg[q] - neg[q + 1])\n        pdiff.append(l)\n    ii = min(pdiff) / 2\n    print(ii)", "t = int(input())\nfor test in range(1, t + 1):\n    arrx = []\n    arry = []\n    n = int(input())\n    res = 0.0\n    for i in range(int(n)):\n        temp = input()\n        temp2 = temp.split()\n        temp2[0] = float(temp2[0])\n        temp2[1] = float(temp2[1])\n        temp3 = temp2\n        arrx.append(temp2)\n        arry.append(temp3)\n    arrx.sort(key=lambda x: x[1] - x[0])\n    arry.sort(key=lambda x: x[1] + x[0])\n    for i in range(int(n - 1)):\n        xmid = (arrx[i][0] + arrx[i + 1][0]) / 2.0\n        ymid = (arrx[i][1] + arrx[i + 1][1]) / 2.0\n        dist = abs(arrx[i][1] - arrx[i][0] - (ymid - xmid))\n        if i == 0:\n            res = dist\n        if dist < res:\n            res = dist\n        dist = abs(arrx[i][1] + arrx[i][0] - (ymid + xmid))\n        if dist < res:\n            res = dist\n        xmid = (arry[i][0] + arry[i + 1][0]) / 2.0\n        ymid = (arry[i][1] + arry[i + 1][1]) / 2.0\n        dist = abs(arry[i][1] - arry[i][0] - (ymid - xmid))\n        if dist < res:\n            res = dist\n        dist = abs(arry[i][1] + arry[i][0] - (ymid + xmid))\n        if dist < res:\n            res = dist\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    nipun = []\n    singla = []\n    for i in range(n):\n        (p, q) = map(int, input().split())\n        c1 = p - q\n        c2 = -(p + q)\n        nipun.append(c1)\n        singla.append(c2)\n    nipun.sort()\n    singla.sort()\n    nipun1 = []\n    singla1 = []\n    for i in range(n - 1):\n        maxi1 = abs(nipun[i] - nipun[i + 1])\n        maxi2 = abs(singla[i] - singla[i + 1])\n        nipun1.append(maxi1)\n        singla1.append(maxi2)\n    count = 0\n    for i in range(n - 1):\n        if nipun1[i] == 0 or singla1[i] == 0:\n            count = 1\n            break\n    if count == 1:\n        print('0')\n    else:\n        max3 = min(nipun1)\n        max4 = min(singla1)\n        if max3 < max4:\n            print(max3 / 2)\n        else:\n            print(max4 / 2)", "T = int(input())\nfor a in range(T):\n    N = int(input())\n    res_points_1 = []\n    res_points_2 = []\n    min_dist = 10 ** 16\n    for b in range(N):\n        (x, y) = list(map(int, input().split()))\n        res_points_1.append(x - y)\n        res_points_2.append(x + y)\n    res_points_1.sort()\n    res_points_2.sort()\n    for c in range(N - 1):\n        dist_1 = res_points_1[c + 1] - res_points_1[c]\n        dist_2 = res_points_2[c + 1] - res_points_2[c]\n        min_dist = min(dist_1, dist_2, min_dist)\n    if min_dist % 2 == 0:\n        print(int(min_dist / 2))\n    else:\n        print(min_dist / 2)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    v1 = []\n    v2 = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        c1 = a - b\n        c2 = -(a + b)\n        v1.append(c1)\n        v2.append(c2)\n    v1.sort()\n    v2.sort()\n    v3 = []\n    v4 = []\n    for i in range(n - 1):\n        maxi1 = abs(v1[i] - v1[i + 1])\n        maxi2 = abs(v2[i] - v2[i + 1])\n        v3.append(maxi1)\n        v4.append(maxi2)\n    count = 0\n    for i in range(n - 1):\n        if v3[i] == 0 or v4[i] == 0:\n            count = 1\n            break\n    if count == 1:\n        print('0')\n    else:\n        max3 = min(v3)\n        max4 = min(v4)\n        if max3 < max4:\n            print(max3 / 2)\n        else:\n            print(max4 / 2)", "def mini(n, c1, c2):\n    d = c1[1] - c1[0]\n    for i in range(0, n - 1):\n        d = min(c1[i + 1] - c1[i], d)\n        d = min(c2[i + 1] - c2[i], d)\n        i += 1\n        if d == 0:\n            return 0\n    return d\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    i = 0\n    c1 = []\n    c2 = []\n    while i < n:\n        (x, y) = input().split()\n        c1.append(float(x) - float(y))\n        c2.append(float(x) + float(y))\n        i += 1\n    c1.sort()\n    c2.sort()\n    print('{0:.7f}'.format(mini(n, c1, c2) / 2))", "def findMinDiff(arr, n):\n    diff = 10 ** 20\n    pos = 0\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] < diff:\n            diff = arr[i + 1] - arr[i]\n            pos = i\n    return diff\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l1 = list()\n    l2 = list()\n    for j in range(n):\n        (x, y) = map(int, input().split())\n        l1.append(x + y)\n        l2.append(x - y)\n    l1.sort()\n    l2.sort()\n    d1 = findMinDiff(l1, n)\n    d2 = findMinDiff(l2, n)\n    df = min(d1, d2)\n    if df == 0:\n        print(0)\n    else:\n        print(abs(df) / 2)", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    islp = []\n    slp = []\n    for i in range(n):\n        (x, y) = map(int, stdin.readline().split())\n        slp.append(y - x)\n        islp.append(x + y)\n    if len(set(slp)) < n or len(set(islp)) < n:\n        print(0)\n    else:\n        islp = sorted(islp)\n        slp = sorted(slp)\n        ians = [abs(islp[0] - islp[1])]\n        ans = [abs(slp[0] - slp[1])]\n        for i in range(1, n - 1):\n            ians.append(min(abs(islp[i - 1] - islp[i]), abs(islp[i] - islp[i + 1])))\n            ans.append(min(abs(slp[i - 1] - slp[i]), abs(slp[i] - slp[i + 1])))\n        print(min(min(ians) / 2, min(ans) / 2))", "from itertools import combinations\n\ndef minans(arr, n):\n    minv = 10 ** 12\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] < minv:\n            minv = arr[i + 1] - arr[i]\n    return minv\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l1 = []\n    l2 = []\n    for j in range(n):\n        s = input().split(' ')\n        x = int(s[0])\n        y = int(s[1])\n        t1 = (x - y) / 2\n        t2 = (x + y) / 2\n        l1.append(t1)\n        l2.append(t2)\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    minv = min(minans(l1, n), minans(l2, n))\n    if minv.is_integer():\n        print(int(minv))\n    else:\n        print(minv)", "import math\ntest = int(input())\nfor i in range(test):\n    coordinates = int(input())\n    add = []\n    sub = []\n    total = []\n    for i in range(coordinates):\n        lis = list(map(int, input().split()))\n        sub.append(lis[1] - lis[0])\n        add.append(lis[1] + lis[0])\n        total.append(lis)\n    add.sort()\n    sub.sort()\n    addDiff = []\n    subDiff = []\n    for i in range(len(add) - 1):\n        addDiff.append(abs(add[i] - add[i + 1]))\n        subDiff.append(abs(sub[i] - sub[i + 1]))\n    k = min(min(addDiff), min(subDiff))\n    print(k / 2)", "from math import sqrt as sq\nfor i in range(int(input())):\n    n = int(input())\n    l = []\n    li = []\n    d = 10 ** 9 + 1\n    D = 10 ** 9 + 1\n    for k in range(n):\n        poi = list(map(int, input().split()))\n        li.append(poi[0] - poi[1])\n        l.append(poi[0] + poi[1])\n    l.sort()\n    li.sort()\n    for i in range(n - 1):\n        d1 = abs(l[i] - l[i + 1])\n        if d1 < d:\n            d = d1\n    for j in range(n - 1):\n        d2 = abs(li[j] - li[j + 1])\n        if d2 < D:\n            D = d2\n    de = min(D, d)\n    print(de / 2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    x = []\n    y = []\n    pos = []\n    neg = []\n    b = True\n    for j in range(n):\n        (a, b) = map(int, input().split(' '))\n        x.append(a)\n        y.append(b)\n        r = b + a\n        s = b - a\n        pos.append(r)\n        neg.append(s)\n    c_pos = []\n    c_neg = []\n    pos.sort()\n    neg.sort()\n    for j in range(n - 1):\n        r = pos[j + 1] - pos[j]\n        s = neg[j + 1] - neg[j]\n        c_pos.append(r)\n        c_neg.append(s)\n    c_neg.sort()\n    c_pos.sort()\n    q = min(min(c_pos), min(c_neg))\n    q = q / 2\n    print(q)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    a = []\n    b = []\n    for j in range(N):\n        (X, Y) = [int(k) for k in input().split(' ')]\n        a.append(Y - X)\n        b.append(Y + X)\n    a.sort()\n    b.sort()\n    min_a = a[1] - a[0]\n    min_b = b[1] - b[0]\n    for j in range(1, N - 1):\n        aaa = a[j + 1] - a[j]\n        bbb = b[j + 1] - b[j]\n        if aaa < min_a:\n            min_a = aaa\n        if bbb < min_b:\n            min_b = bbb\n    print(min(min_a, min_b) / 2)", "t = int(input())\nroot = 2 ** 0.5\nfor i in range(t):\n    n = int(input())\n    x = []\n    y = []\n    for j in range(n):\n        (a, b) = input().split()\n        a = int(a)\n        b = int(b)\n        r = a * 0.5 ** 0.5 + b * 0.5 ** 0.5\n        s = -a * 0.5 ** 0.5 + b * 0.5 ** 0.5\n        x.append(r)\n        y.append(s)\n    x.sort()\n    y.sort()\n    min_x = 10 ** 12\n    min_y = 10 ** 12\n    for i in range(n):\n        if i == n - 1:\n            break\n        else:\n            g = abs(x[i] - x[i + 1])\n            h = abs(y[i] - y[i + 1])\n            if g < min_x:\n                min_x = g\n            if h < min_y:\n                min_y = h\n    print(min(min_x, min_y) * 0.5 * root)", "import math\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    cordno = []\n    cordpo = []\n    no = []\n    po = []\n    for y in range(n):\n        (a, b) = map(int, input().split())\n        cordno.append([a, b, a + b])\n        cordpo.append([a, b, b - a])\n        no.append(a + b)\n        po.append(b - a)\n    cordno.sort(key=lambda x: x[2])\n    cordpo.sort(key=lambda x: x[2])\n    if len(set(no)) != n or len(set(po)) != n:\n        print(0)\n        continue\n    for y in range(n - 1):\n        c1 = float((cordno[y][0] + cordno[y + 1][0]) / 2) + float((cordno[y][1] + cordno[y + 1][1]) / 2)\n        c2 = float((cordpo[y][0] + cordpo[y + 1][0]) / 2) - float((cordpo[y][1] + cordpo[y + 1][1]) / 2)\n        if y == 0:\n            m1 = abs(float(cordno[y][0] + cordno[y][1] - c1))\n            m2 = abs(float(cordpo[y][1] - cordpo[y][0] + c2))\n        else:\n            d1 = abs(float(cordno[y][0] + cordno[y][1] - c1))\n            d2 = abs(float(cordpo[y][1] - cordpo[y][0] + c2))\n            if d1 < m1:\n                m1 = d1\n            if d2 < m2:\n                m2 = d2\n    print(min(m1, m2))", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    pts = []\n    for j in range(n):\n        pts.append([])\n        g = input()\n        g = g.split(' ')\n        x = int(g[0])\n        y = int(g[1])\n        xn = x + y\n        yn = y - x\n        pts[j].append(xn)\n        pts[j].append(yn)\n        pts[j].append(j)\n    pts.sort(key=lambda x: x[0])\n    dist = {}\n    for i in range(n - 1):\n        dist[pts[i][2]] = pts[i + 1][0] - pts[i][0]\n    dist[pts[n - 1][2]] = pts[n - 1][0] - pts[n - 2][0]\n    pts.sort(key=lambda x: x[1])\n    for i in range(n - 1):\n        diff = pts[i + 1][1] - pts[i][1]\n        if diff < dist[pts[i][2]]:\n            dist[pts[i][2]] = diff\n    diff = pts[n - 1][1] - pts[n - 2][1]\n    if diff < dist[pts[n - 1][2]]:\n        dist[pts[n - 1][2]] = diff\n    m = 1000000000\n    for i in dist:\n        if dist[i] < m:\n            m = dist[i]\n    print(m / 2)", "import math\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    cordno = []\n    cordpo = []\n    no = []\n    po = []\n    for y in range(n):\n        (a, b) = map(int, input().split())\n        cordno.append([a, b, a + b])\n        cordpo.append([a, b, b - a])\n        no.append(a + b)\n        po.append(b - a)\n    cordno.sort(key=lambda x: x[2])\n    cordpo.sort(key=lambda x: x[2])\n    if len(set(no)) != n or len(set(po)) != n:\n        print(0)\n        continue\n    for y in range(n - 1):\n        c1 = float((cordno[y][0] + cordno[y + 1][0]) / 2) + float((cordno[y][1] + cordno[y + 1][1]) / 2)\n        c2 = float((cordpo[y][0] + cordpo[y + 1][0]) / 2) - float((cordpo[y][1] + cordpo[y + 1][1]) / 2)\n        if y == 0:\n            m1 = abs(float(cordno[y][0] + cordno[y][1] - c1))\n            m2 = abs(float(cordpo[y][1] - cordpo[y][0] + c2))\n        else:\n            d1 = abs(float(cordno[y][0] + cordno[y][1] - c1))\n            d2 = abs(float(cordpo[y][1] - cordpo[y][0] + c2))\n            if d1 < m1:\n                m1 = d1\n            if d2 < m2:\n                m2 = d2\n    print(min(m1, m2))", "def findMinDiff(arr, n):\n    arr = sorted(arr)\n    diff = 10 ** 20\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] < diff:\n            diff = arr[i + 1] - arr[i]\n    return diff\nfor i in range(int(input())):\n    N = int(input())\n    a = []\n    l1 = []\n    l2 = []\n    for j in range(N):\n        (X, Y) = [int(x) for x in input().split()]\n        a.append([X, Y])\n    for k in range(N):\n        l1.append((a[k][0] + a[k][1]) / 2)\n        l2.append((a[k][0] - a[k][1]) / 2)\n    p = findMinDiff(l1, len(l1))\n    q = findMinDiff(l2, len(l2))\n    print(min(p, q))", "import math\nimport sys\nz = math.sin(math.pi / 4)\n\ndef func(arr, n):\n    arr = sorted(arr)\n    diff = sys.maxsize\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] < diff:\n            diff = arr[i + 1] - arr[i]\n    return diff\nfor i in range(int(input())):\n    n = int(input())\n    arx = []\n    ary = []\n    for j in range(n):\n        (a, b) = map(float, input().split())\n        c = (a + b) * z\n        d = (a - b) * z\n        arx.append(c)\n        ary.append(d)\n    g = func(arx, n)\n    h = func(ary, n)\n    if g < h:\n        print(g * z)\n    else:\n        print(h * z)", "from math import sqrt, atan, sin\n\ndef distance(i, j):\n    try:\n        slope = (i[1] - j[1]) / (i[0] - j[0])\n        if slope < 0:\n            return sin(atan(abs((-1 - slope) / (1 - slope)))) * sqrt((i[0] - j[0]) ** 2 + (i[1] - j[1]) ** 2) / 2\n        else:\n            return sin(atan(abs((1 - slope) / (1 + slope)))) * sqrt((i[0] - j[0]) ** 2 + (i[1] - j[1]) ** 2) / 2\n    except ZeroDivisionError:\n        return (i[1] - j[1]) / 2 ** 1.5\n\ndef key_find(x):\n    return x[2]\ntest_case = int(input())\nwhile test_case > 0:\n    n = int(input())\n    points = list()\n    for i in range(n):\n        points.append([int(i) for i in input().split()])\n    diff_x_y = list()\n    diff_y_x = list()\n    for i in range(n):\n        diff_x_y.append(tuple([points[i][0], points[i][1], points[i][0] - points[i][1]]))\n        diff_y_x.append(tuple([points[i][0], points[i][1], points[i][0] + points[i][1]]))\n    diff_x_y.sort(key=key_find)\n    diff_y_x.sort(key=key_find)\n    mini_list1 = list()\n    mini_list2 = list()\n    for i in range(n - 1):\n        mini_list1.append(tuple([diff_x_y[i][:2], diff_x_y[i + 1][:2], diff_x_y[i + 1][2] - diff_x_y[i][2]]))\n        mini_list2.append(tuple([diff_y_x[i][:2], diff_y_x[i + 1][:2], diff_y_x[i + 1][2] - diff_y_x[i][2]]))\n    first_min = min(mini_list1, key=key_find)\n    second_min = min(mini_list2, key=key_find)\n    if first_min[2] == 0 or second_min[2] == 0:\n        print(0)\n    elif first_min[2] < second_min[2]:\n        print(round(abs(distance(first_min[0][:2], first_min[1][:2])) * 2 ** 0.5, 6))\n    else:\n        print(round(abs(distance(second_min[0][:2], second_min[1][:2])) * 2 ** 0.5, 6))\n    test_case -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    c1 = []\n    cmin1 = []\n    for j in range(n):\n        (x, y) = map(int, input().split(' '))\n        c1.append(y - x)\n        cmin1.append(y + x)\n    c1.sort()\n    cmin1.sort()\n    m1 = c1[len(c1) - 1] - c1[0]\n    mmin1 = cmin1[len(cmin1) - 1] - cmin1[0]\n    for k in range(len(c1) - 1):\n        t1 = c1[k + 1] - c1[k]\n        if m1 > t1:\n            m1 = t1\n        t2 = cmin1[k + 1] - cmin1[k]\n        if mmin1 > t2:\n            mmin1 = t2\n    print(min(m1, mmin1) / 2)", "import math\ntest = eval(input())\nfor k in range(test):\n    n = eval(input())\n    (x, y) = ([], [])\n    dictfirst = {}\n    dictsecond = {}\n    varcheck1 = False\n    varcheck2 = False\n    for p in range(n):\n        points = list(map(float, input().split(' ')))\n        x.append(points[0])\n        y.append(points[1])\n    for p in range(n):\n        keyfirst = y[p] - x[p]\n        keysecond = y[p] + x[p]\n        if keyfirst in dictfirst:\n            dictfirst[keyfirst] = dictfirst[keyfirst] + 1\n            varcheck1 = True\n        else:\n            dictfirst[keyfirst] = 1\n        if keysecond in dictsecond:\n            dictsecond[keysecond] = dictsecond[keysecond] + 1\n            varcheck2 = True\n        else:\n            dictsecond[keysecond] = 1\n    if varcheck1 or varcheck2:\n        print(0)\n        continue\n    listx = []\n    listy = []\n    for r in range(n):\n        listx.append(x[r] - y[r])\n        listy.append(x[r] + y[r])\n    listx.sort()\n    listy.sort()\n    var1 = 8000000000\n    var2 = 8000000000\n    for j1 in range(1, n):\n        if listx[j1] - listx[j1 - 1] < var1:\n            var1 = listx[j1] - listx[j1 - 1]\n    for j2 in range(1, n):\n        if listy[j2] - listy[j2 - 1] < var2:\n            var2 = listy[j2] - listy[j2 - 1]\n    print(min(var1, var2) / 2)", "T = int(input())\nfor i in range(0, T):\n    N = int(input())\n    v = []\n    a = []\n    for j in range(0, N):\n        (x, y) = map(int, input().split())\n        a.append(y - x)\n        v.append(x + y)\n    a.sort()\n    v.sort()\n    diff = abs(v[0] - v[1])\n    for j in range(1, len(a)):\n        diff = min(abs(a[j] - a[j - 1]), diff, abs(v[j] - v[j - 1]))\n    print(diff / 2.0)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    xpy = []\n    xmy = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        xpy.append(x + y)\n        xmy.append(x - y)\n    xpy.sort()\n    xmy.sort()\n    mini = abs(xpy[1] - xpy[0])\n    for i in range(n - 1):\n        if xpy[i] == xpy[i + 1] or xmy[i] == xmy[i + 1]:\n            mini = 0\n            break\n        if abs(xpy[i + 1] - xpy[i]) < mini:\n            mini = abs(xpy[i + 1] - xpy[i])\n        if abs(xmy[i + 1] - xmy[i]) < mini:\n            mini = abs(xmy[i + 1] - xmy[i])\n    print(mini / 2)", "from math import sqrt, atan, sin, pow\nfrom sys import maxsize\n\nclass WTBTR:\n\n    def __init__(self, t):\n        self.t = t\n\n    @staticmethod\n    def distance(i, j):\n        try:\n            slope = (i[1] - j[1]) / (i[0] - j[0])\n            if slope == 1 or slope == -1:\n                return 0\n            elif slope < 0:\n                return sin(atan(abs((-1 - slope) / (1 - slope)))) * sqrt((i[0] - j[0]) ** 2 + (i[1] - j[1]) ** 2) / 2\n            elif slope > 0:\n                return sin(atan(abs((1 - slope) / (1 + slope)))) * sqrt((i[0] - j[0]) ** 2 + (i[1] - j[1]) ** 2) / 2\n            else:\n                return (i[0] - j[0]) / 2 ** 1.5\n        except ZeroDivisionError:\n            return (i[1] - j[1]) / 2 ** 1.5\n\n    def main(self):\n        while self.t > 0:\n            self.t -= 1\n            n = int(input())\n            c = [list(map(int, input().split())) for i in range(n)]\n            xy = [tuple([c[i][0], c[i][1], c[i][0] - c[i][1]]) for i in range(n)]\n            yx = [tuple([c[i][0], c[i][1], c[i][1] + c[i][0]]) for i in range(n)]\n            xy.sort(key=lambda x: x[2])\n            yx.sort(key=lambda x: x[2])\n            temp1 = [(xy[i][:2], xy[i + 1][:2], xy[i + 1][2] - xy[i][2]) for i in range(n - 1)]\n            temp2 = [(yx[i][:2], yx[i + 1][:2], yx[i + 1][2] - yx[i][2]) for i in range(n - 1)]\n            minimum1 = min(temp1, key=lambda x: x[2])\n            minimum2 = min(temp2, key=lambda x: x[2])\n            if minimum1[2] == 0 or minimum2[2] == 0:\n                print(0)\n            elif minimum1[2] <= minimum2[2]:\n                print(round(abs(self.distance(minimum1[0][:2], minimum1[1][:2])) * 2 ** 0.5, 6))\n            else:\n                print(round(abs(self.distance(minimum2[0][:2], minimum2[1][:2])) * 2 ** 0.5, 6))\na = WTBTR(int(input()))\na.main()", "try:\n    for i in range(int(input())):\n        a = int(input())\n        s = []\n        d = []\n        for j in range(a):\n            (x, y) = map(int, input().split())\n            s.append(x + y)\n            d.append(x - y)\n        s.sort()\n        d.sort()\n        for i in range(a - 1, 0, -1):\n            s[i] = s[i] - s[i - 1]\n            d[i] = d[i] - d[i - 1]\n        print(min(min(s[1:]), min(d[1:])) / 2)\nexcept:\n    pass", "from math import sqrt\nC = 20000000009\n\ndef dis1(a, b):\n    return abs(a + b + C)\n\ndef dis2(a, b):\n    return abs(b - a + C)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d1 = []\n    d2 = []\n    for i in range(n):\n        (a, b) = [int(x) for x in input().split()]\n        d1.append(dis1(a, b))\n        d2.append(dis2(a, b))\n    d1.sort()\n    d2.sort()\n    mn = C\n    for i in range(1, len(d1)):\n        mn = min(mn, d1[i] - d1[i - 1])\n    for i in range(1, len(d2)):\n        mn = min(mn, d2[i] - d2[i - 1])\n    mn = mn / sqrt(2)\n    mn = mn / 2\n    mn = mn * sqrt(2)\n    print('%0.8f' % mn)", "import math\nimport numpy as np\nT = int(input())\nresults = np.array([])\nfor _ in range(T):\n    N = int(input())\n    (X, Y) = (np.zeros(N), np.zeros(N))\n    for i in range(N):\n        (x, y) = (float(x) for x in input().split())\n        (X[i], Y[i]) = (x, y)\n    (c, s) = (math.cos(math.pi / 4), math.sin(math.pi / 4))\n    (x, y) = (X * c - Y * s, Y * c + X * s)\n    if np.unique(x).size != len(x) or np.unique(y).size != len(y):\n        results = np.append(results, 0)\n    else:\n        (x_sorted, y_sorted) = (sorted(x), sorted(y))\n        (x_shifted, y_shifted) = (np.roll(x_sorted, -1), np.roll(y_sorted, -1))\n        (x_delta, y_delta) = (np.absolute(np.subtract(x_sorted, x_shifted)), np.absolute(np.subtract(y_sorted, y_shifted)))\n        (x_min, y_min) = (np.min(x_delta), np.min(y_delta))\n        results = np.append(results, x_min * math.sqrt(2) / 2 if x_min < y_min else y_min * math.sqrt(2) / 2)\nfor i in range(T):\n    print(results[i])", "t = int(input())\nassert 1 <= t <= 100\nfor _ in range(t):\n    n = int(input())\n    assert 2 <= n <= 10000\n    points = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        points.append((x, y))\n    d = float('inf')\n    first = []\n    findex = [None] * n\n    second = []\n    sindex = [None] * n\n    for (i, (x, y)) in enumerate(points):\n        first.append((x + y, i))\n        second.append((x - y, i))\n    first.sort()\n    second.sort()\n    for (j, (c, i)) in enumerate(first):\n        findex[i] = j\n    for (j, (c, i)) in enumerate(second):\n        sindex[i] = j\n    for (i, (x, y)) in enumerate(points):\n        if findex[i]:\n            d = min(d, abs(x + y - first[findex[i] - 1][0]))\n        if findex[i] < n - 1:\n            d = min(d, abs(x + y - first[findex[i] + 1][0]))\n        if sindex[i]:\n            d = min(d, abs(x - y - second[sindex[i] - 1][0]))\n        if sindex[i] < n - 1:\n            d = min(d, abs(x - y - second[sindex[i] + 1][0]))\n    print(d / 2)", "def findmindist():\n    n = int(input())\n    n_copy = n\n    dist_pos = []\n    dist_neg = []\n    while n != 0:\n        (x, y) = [int(z) for z in input().split(' ')]\n        dist_pos.append(y - x)\n        dist_neg.append(y + x)\n        n -= 1\n    dist_pos.sort()\n    dist_neg.sort()\n    result = abs(dist_neg[1] - dist_neg[0])\n    for i in range(0, n_copy - 1):\n        result = min(result, min(abs(dist_pos[i + 1] - dist_pos[i]), abs(dist_neg[i + 1] - dist_neg[i])))\n    return result\nt = int(input())\nwhile t != 0:\n    print(findmindist() / 2)\n    t -= 1", "for _ in range(int(input())):\n    (positive, negative) = ([], [])\n    n = int(input())\n    point = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        point.append([x, y])\n        positive.append(y + x)\n        negative.append(y - x)\n    mini = 99999999999\n    positive.sort()\n    negative.sort()\n    for i in range(n - 1):\n        if positive[i + 1] - positive[i] < mini:\n            mini = positive[i + 1] - positive[i]\n    for i in range(n - 1):\n        if negative[i + 1] - negative[i] < mini:\n            mini = negative[i + 1] - negative[i]\n    print(mini / 2.0)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = []\n    a = []\n    b = []\n    for j in range(n):\n        X = input().split()\n        x = int(X[0])\n        y = int(X[1])\n        a.append(x + y)\n        b.append(y - x)\n        l.append([x, y])\n    a.sort()\n    b.sort()\n    j = 1\n    c = []\n    d = []\n    while j < n:\n        temp = a[j] - a[j - 1]\n        c.append(temp)\n        t2 = b[j] - b[j - 1]\n        d.append(t2)\n        j = j + 1\n    c.sort()\n    d.sort()\n    k = (c[0], d[0])\n    print(min(k) / 2)", "from math import cos, sin, pi, sqrt\nt = int(input())\nfor test in range(1, t + 1):\n    n = int(input())\n    points = []\n    for i in range(1, n + 1):\n        (x_, y_) = map(int, input().split())\n        points.append((x_, y_))\n    rotatedx = []\n    rotatedy = []\n    for i in range(0, n):\n        rx = points[i][1] * cos(pi / 4) - points[i][0] * sin(pi / 4)\n        ry = points[i][1] * sin(pi / 4) + points[i][0] * cos(pi / 4)\n        rotatedx.append(rx)\n        rotatedy.append(ry)\n    rotatedx.sort()\n    rotatedy.sort()\n    mindneg = float('inf')\n    mindpos = float('inf')\n    for i in range(0, n - 1):\n        if mindpos > abs(rotatedy[i + 1] - rotatedy[i]):\n            mindpos = rotatedy[i + 1] - rotatedy[i]\n        if mindneg > abs(rotatedx[i + 1] - rotatedx[i]):\n            mindneg = rotatedx[i + 1] - rotatedx[i]\n    print(min(mindpos * sqrt(2) / 2, mindneg * sqrt(2) / 2))", "import math\noutput = []\nfor test_case in range(int(input())):\n    n = input()\n    x = []\n    y = []\n    flag = 0\n    carr1 = []\n    carr2 = []\n    for entry in range(int(n)):\n        arr = input().split(' ')\n        x.append(int(arr[0]))\n        y.append(int(arr[1]))\n        carr1.append(int(arr[1]) - int(arr[0]))\n        carr2.append(int(arr[1]) + int(arr[0]))\n    carr1.sort()\n    carr2.sort()\n    min = math.inf\n    for i in range(len(x) - 1):\n        min_c1 = abs(carr1[i] - carr1[i + 1])\n        min_c2 = abs(carr2[i] - carr2[i + 1])\n        min_c = 0\n        if min_c1 < min_c2:\n            min_c = min_c1\n        else:\n            min_c = min_c2\n        if min_c < min:\n            min = min_c\n    if min == 0:\n        output.append(0)\n    else:\n        output.append(min / 2)\nfor o in output:\n    print(o)", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        x = []\n        y = []\n        d1 = {}\n        d2 = {}\n        for i in range(n):\n            (a, b) = list(map(int, input().split()))\n            x.append([(a + b) / 2, (b - a) / 2])\n            y.append([(b - a) / 2, (a + b) / 2])\n            d1.setdefault((a + b) / 2, 0)\n            d1[(a + b) / 2] += 1\n            d2.setdefault((b - a) / 2, 0)\n            d2[(b - a) / 2] += 1\n        x = sorted(x)\n        y = sorted(y)\n        flag = 0\n        for i in d1.values():\n            if i > 1:\n                flag = 1\n                break\n        if flag:\n            print(0)\n            continue\n        for i in d2.values():\n            if i > 1:\n                flag = 1\n                break\n        if flag:\n            print(0)\n            continue\n        ans = 0\n        ans1 = 1000000000.0\n        ans2 = 1000000000.0\n        for i in range(n - 1):\n            l1 = x[i]\n            l2 = x[i + 1]\n            if ans1 > abs(l1[0] - l2[0]):\n                ans1 = abs(l1[0] - l2[0])\n        for i in range(n - 1):\n            l1 = y[i]\n            l2 = y[i + 1]\n            if ans2 > abs(l1[0] - l2[0]):\n                ans2 = abs(l1[0] - l2[0])\n        ans = min(ans1, ans2)\n        print('%.6f' % ans)\nmain()", "res = []\n\ndef getMin(nums):\n    nums.sort()\n    diff = 1000000000\n    for i in range(len(nums) - 1):\n        diff = min(abs(nums[i + 1] - nums[i]), diff)\n    return diff\nx = int(input())\nfor _ in range(x):\n    slope1Dist = {}\n    slope2Dist = {}\n    dist1 = []\n    dist2 = []\n    zero = False\n    n = int(input())\n    for i in range(n):\n        (x, y) = map(int, input().strip().split(' '))\n        if y - x not in slope1Dist:\n            slope1Dist[y - x] = 1\n            dist1.append(y - x)\n        else:\n            zero = True\n        if y + x not in slope2Dist:\n            slope2Dist[y + x] = 1\n            dist2.append(y + x)\n        else:\n            zero = True\n    if zero:\n        res.append(0)\n    else:\n        dmin = 1000000000\n        if len(dist1) > 0:\n            dmin = min(dmin, getMin(dist1))\n        if len(dist2) > 0:\n            dmin = min(dmin, getMin(dist2))\n        res.append(dmin / 2)\nfor xx in res:\n    print(xx)", "from math import sqrt\nx = int(input())\ndist = float('inf')\nfor i in range(x):\n    y = int(input())\n    first = []\n    second = []\n    for j in range(y):\n        t = list(map(float, input().split()))\n        x = t[0]\n        y = t[1]\n        first.append((x - y) / sqrt(2))\n        second.append((x + y) / sqrt(2))\n    first.sort()\n    second.sort()\n    count = 0\n    temp1 = dist\n    temp2 = dist\n    for i in range(len(first) - 1):\n        if first[i] == first[i + 1]:\n            count += 1\n        if second[i] == second[i + 1]:\n            count += 1\n        l = abs(first[i] - first[i + 1])\n        if l < temp1:\n            temp1 = l\n        m = abs(second[i] - second[i + 1])\n        if m < temp2:\n            temp2 = m\n    res = min(temp2, temp1)\n    if count > 0:\n        print(0)\n    else:\n        print(res / 2 * sqrt(2))", "import math\nt = int(input())\nfor k in range(t):\n    n = int(input())\n    (sum, diff) = ([], [])\n    for i in range(n):\n        s = input()\n        (x1, y1) = s.split(' ')\n        x1 = int(x1)\n        y1 = int(y1)\n        sum.append(x1 + y1)\n        diff.append(x1 - y1)\n    sum.sort()\n    diff.sort()\n    min1 = math.inf\n    min2 = math.inf\n    for i in range(len(sum) - 1):\n        temp1 = abs(sum[i + 1] - sum[i])\n        if temp1 < min1:\n            min1 = temp1\n        temp2 = abs(diff[i + 1] - diff[i])\n        if temp2 < min2:\n            min2 = temp2\n    print(min(min1, min2) / 2)", "import sys\nmod = 1000000007\nget_arr = lambda : list(map(float, input().split()))\nget_int = lambda : int(input())\nget_ints = lambda : map(int, input().split())\nget_str = lambda : input()\nget_strs = lambda : input().split()\nfrom math import sqrt\n\ndef base(points):\n    p = {}\n    s = {}\n    for i in points:\n        if i[0] + i[1] in p:\n            p[i[0] + i[1]] += 1\n        else:\n            p[i[0] + i[1]] = 1\n    for i in points:\n        if i[0] - i[1] in s:\n            s[i[0] - i[1]] += 1\n        else:\n            s[i[0] - i[1]] = 1\n    for i in p:\n        if p[i] > 1:\n            return True\n    for i in s:\n        if s[i] > 1:\n            return True\n    return False\n\ndef rotate_points(points):\n    for i in range(len(points)):\n        (x, y) = (points[i][0], points[i][1])\n        points[i][0] = (x - y) / sqrt(2)\n        points[i][1] = (x + y) / sqrt(2)\nfor _ in range(get_int()):\n    n = get_int()\n    points = [get_arr() for i in range(n)]\n    if base(points):\n        print(0)\n    else:\n        rotate_points(points)\n        sort_x = sorted(points)\n        sort_y = sorted(points, key=lambda x: x[1])\n        ans = sys.maxsize\n        for i in range(1, n):\n            ans = min(ans, (sort_x[i][0] - sort_x[i - 1][0]) / 2, (sort_y[i][1] - sort_y[i - 1][1]) / 2)\n        print('%.6f' % (ans * sqrt(2)))", "def key1(arr):\n    return dis1(arr)\n\ndef key2(arr):\n    return dis2(arr)\n\ndef l1(x, y):\n    return y - x\n\ndef l2(x, y):\n    return y + x\n\ndef mini(a, b):\n    x = []\n    x1 = a[0] / 2 + b[0] / 2\n    y1 = a[1] / 2 + b[1] / 2\n    c1 = y1 + x1\n    c2 = y1 - x1\n    d11 = abs(a[0] - a[1] + c2)\n    d12 = abs(-a[0] - a[1] + c1)\n    d21 = abs(b[0] - b[1] + c2)\n    d22 = abs(-b[0] - b[1] + c1)\n    t1 = [d11, d21]\n    t2 = [d12, d22]\n    t1 = list(set(t1))\n    t2 = list(set(t2))\n    x += t1\n    x += t2\n    return min(x)\n\ndef dis1(x, y):\n    return y - x\n\ndef dis2(x, y):\n    return x + y\n\ndef merge(arr, l, m, r):\n    n1 = m - l + 1\n    n2 = r - m\n    L = [0] * n1\n    R = [0] * n2\n    for i in range(0, n1):\n        L[i] = arr[l + i]\n    for j in range(0, n2):\n        R[j] = arr[m + 1 + j]\n    i = 0\n    j = 0\n    k = l\n    while i < n1 and j < n2:\n        if dis1(L[i]) <= dis1(R[j]):\n            arr[k] = L[i]\n            i += 1\n        else:\n            arr[k] = R[j]\n            j += 1\n        k += 1\n    while i < n1:\n        arr[k] = L[i]\n        i += 1\n        k += 1\n    while j < n2:\n        arr[k] = R[j]\n        j += 1\n        k += 1\n\ndef mergeSort(arr, l, r):\n    if l < r:\n        m = (l + r) // 2\n        mergeSort(arr, l, m)\n        mergeSort(arr, m + 1, r)\n        merge(arr, l, m, r)\n\ndef merge1(arr, l, m, r):\n    n1 = m - l + 1\n    n2 = r - m\n    L = [0] * n1\n    R = [0] * n2\n    for i in range(0, n1):\n        L[i] = arr[l + i]\n    for j in range(0, n2):\n        R[j] = arr[m + 1 + j]\n    i = 0\n    j = 0\n    k = l\n    while i < n1 and j < n2:\n        if dis2(L[i]) <= dis2(R[j]):\n            arr[k] = L[i]\n            i += 1\n        else:\n            arr[k] = R[j]\n            j += 1\n        k += 1\n    while i < n1:\n        arr[k] = L[i]\n        i += 1\n        k += 1\n    while j < n2:\n        arr[k] = R[j]\n        j += 1\n        k += 1\n\ndef mergeSort1(arr, l, r):\n    if l < r:\n        m = (l + r) // 2\n        mergeSort1(arr, l, m)\n        mergeSort1(arr, m + 1, r)\n        merge1(arr, l, m, r)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    d1 = []\n    d2 = []\n    for j in range(n):\n        (x, y) = map(int, input().split())\n        d1.append(dis1(x, y))\n        d2.append(dis2(x, y))\n    d1.sort()\n    min1 = 10000000000\n    d2.sort()\n    min2 = 10000000000\n    for j in range(n - 1):\n        if abs(d1[j + 1] - d1[j]) < min1:\n            min1 = abs(d1[j + 1] - d1[j])\n    for j in range(n - 1):\n        if abs(d2[j + 1] - d2[j]) < min2:\n            min2 = abs(d2[j + 1] - d2[j])\n    ans = min(min1, min2) / 2\n    print(ans)", "import math\nfor _ in range(int(input())):\n    smartn = list()\n    smartp = list()\n    n = int(input())\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        c1 = x + y\n        c2 = x - y\n        smartn.append(c2)\n        smartp.append(c1)\n    smartp.sort()\n    smartn.sort()\n    mn = math.inf\n    for i in range(n - 1):\n        mn = min(mn, smartn[i + 1] - smartn[i])\n        mn = min(mn, smartp[i + 1] - smartp[i])\n    if mn:\n        print(mn / 2)\n    else:\n        print(mn)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    xx = []\n    yy = []\n    for j in range(n):\n        (x, y) = map(int, input().split())\n        xx.append(x - y)\n        yy.append(x + y)\n    xx.sort()\n    min1 = 100000000000\n    for j in range(n - 1):\n        if abs(xx[j + 1] - xx[j]) < min1:\n            min1 = abs(xx[j + 1] - xx[j])\n    yy.sort()\n    min2 = 100000000000\n    for j in range(n - 1):\n        if abs(yy[j + 1] - yy[j]) < min2:\n            min2 = abs(yy[j + 1] - yy[j])\n    ans = min(min2, min1) / 2\n    print(ans)", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    X = []\n    Y = []\n    xy = []\n    yx = []\n    for j in range(0, n):\n        (x, y) = map(int, input().split())\n        xy.append(y - x)\n        yx.append(x + y)\n    xy = sorted(xy)\n    yx = sorted(yx)\n    diff1 = 10 ** 20\n    diff2 = 10 ** 20\n    for k in range(n - 1):\n        if xy[k + 1] - xy[k] < diff1:\n            diff1 = abs(xy[k + 1] - xy[k])\n        if yx[k + 1] - yx[k] < diff2:\n            diff2 = abs(yx[k + 1] - yx[k])\n    print(abs(min(diff1, diff2)) / 2)", "test = int(input())\nimport math\nfor t in range(test):\n    n = int(input())\n    X = []\n    Y = []\n    for i in range(n):\n        l = list(map(int, input().split(' ')))\n        x = l[0]\n        y = l[1]\n        a = x + y\n        b = -x + y\n        X.append(a)\n        Y.append(b)\n    X.sort()\n    Y.sort()\n    min = 10000000000\n    for i in range(n - 1):\n        here = abs(X[i] - X[i + 1])\n        if here < min:\n            min = here\n    for i in range(n - 1):\n        here = abs(Y[i] - Y[i + 1])\n        if here < min:\n            min = here\n    print(min / 2)", "import io, sys, atexit, os\nimport math as ma\nfrom sys import exit\nfrom decimal import Decimal as dec\nfrom itertools import permutations\n\ndef li():\n    return list(map(int, input().split()))\n\ndef num():\n    return map(int, input().split())\n\ndef nu():\n    return int(input())\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef lcm(x, y):\n    gg = find_gcd(x, y)\n    return x * y // gg\nmm = 1000000007\nyp = 0\n\ndef solve():\n    t = nu()\n    for _ in range(t):\n        n = nu()\n        x = set()\n        y = set()\n        fl = False\n        for i in range(n):\n            (l, r) = num()\n            px = l + r\n            py = r - l\n            if px in x:\n                fl = True\n            if py in y:\n                fl = True\n            x.add(px)\n            y.add(py)\n        x = list(x)\n        y = list(y)\n        x.sort()\n        y.sort()\n        mnx = 9999999999999\n        mny = 9999999999999\n        if fl:\n            print(0)\n        else:\n            for i in range(1, len(x)):\n                mnx = min(mnx, x[i] - x[i - 1])\n            for i in range(1, len(y)):\n                mny = min(mny, y[i] - y[i - 1])\n            print(min(mny, mnx) / 2)\nsolve()", "for i in range(int(input())):\n    n = int(input())\n    plus = []\n    mins = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        plus.append(x + y)\n        mins.append(x - y)\n    plus.sort()\n    mins.sort()\n    pdi = []\n    mdi = []\n    for j in range(1, n):\n        pdi.append(plus[j] - plus[j - 1])\n        mdi.append(mins[j] - mins[j - 1])\n    pdi.sort()\n    mdi.sort()\n    print(min(pdi[0], mdi[0]) / 2)", "t = int(input())\nwhile t:\n    l1 = []\n    l2 = []\n    n = int(input())\n    for i in range(n):\n        (x, y) = [int(x) for x in input().split()]\n        l1.append(x + y)\n        l2.append(y - x)\n    l1.sort()\n    l2.sort()\n    diff = 10 ** 11\n    for i in range(n - 1):\n        if l1[i + 1] - l1[i] < diff:\n            diff = l1[i + 1] - l1[i]\n        if l2[i + 1] - l2[i] < diff:\n            diff = l2[i + 1] - l2[i]\n    print(diff / 2)\n    t -= 1", "import math\nimport operator\nroot2 = math.sqrt(2)\n\ndef sign(x, y, coeff):\n    if y + coeff * x > 0:\n        return 1\n    else:\n        return -1\n\ndef dist(x, y):\n    dist1 = abs(x + y) / root2\n    dist2 = abs(y - x) / root2\n    sign1 = sign(x, y, 1)\n    sign2 = sign(x, y, -1)\n    return [sign1 * dist1, sign2 * dist2]\nfor _ in range(int(input())):\n    min1 = 10 ** 9 + 7\n    min2 = min1\n    n = int(input())\n    l = []\n    distpos = []\n    distneg = []\n    for v in range(n):\n        (x, y) = [float(num) for num in input().split()]\n        l.append([x, y])\n        k = dist(x, y)\n        distpos.append(k[0])\n        distneg.append(k[1])\n    a1 = []\n    a2 = []\n    distpos.sort()\n    distneg.sort()\n    for j in range(n - 1):\n        if min1 > abs(distpos[j + 1] - distpos[j]):\n            min1 = abs(distpos[j + 1] - distpos[j])\n        if min2 > distneg[j + 1] - distneg[j]:\n            min2 = abs(distneg[j + 1] - distneg[j])\n    minval = min(min1, min2)\n    val = minval / 2 * root2\n    if val == 0.0:\n        print(0)\n    else:\n        print(val)", "try:\n    testcase = int(input())\n    while testcase > 0:\n        n = int(input())\n        l1 = []\n        l2 = []\n        l3 = []\n        for i in range(n):\n            (x, y) = input().split()\n            x = int(x)\n            y = int(y)\n            l1.append((x, y))\n        for i in l1:\n            dist1 = abs(i[1] + i[0])\n            if i[1] > 0 and i[0] < 0 and (i[1] < abs(i[0])):\n                l3.append(-1 * dist1)\n            elif i[1] > 0 and i[0] < 0 and (i[1] > abs(i[0])):\n                l3.append(dist1)\n            elif i[1] < 0 and i[0] > 0 and (abs(i[1]) < i[0]):\n                l3.append(dist1)\n            elif i[1] < 0 and i[0] > 0 and (abs(i[1]) > i[0]):\n                l3.append(-1 * dist1)\n            elif i[1] == 0 and i[0] > 0:\n                l3.append(dist1)\n            elif i[1] == 0 and i[0] < 0:\n                l3.append(-1 * dist1)\n            elif i[1] > 0 and i[0] == 0:\n                l3.append(dist1)\n            elif i[1] < 0 and i[0] == 0:\n                l3.append(-1 * dist1)\n            elif i[1] == 0 and i[0] == 0:\n                l3.append(0)\n            elif i[1] > 0 and i[0] > 0:\n                l3.append(dist1)\n            elif i[1] < 0 and i[0] < 0:\n                l3.append(-1 * dist1)\n            elif abs(i[0]) == abs(i[1]):\n                l3.append(dist1)\n            dist = abs(i[1] - i[0])\n            if i[1] < i[0]:\n                l2.append(-1 * dist)\n            else:\n                l2.append(dist)\n        l2 = sorted(l2)\n        l3 = sorted(l3)\n        min1 = l2[1] - l2[0]\n        for i in range(n - 1):\n            if l2[i + 1] - l2[i] < min1:\n                min1 = l2[i + 1] - l2[i]\n        min2 = l3[1] - l3[0]\n        for i in range(n - 1):\n            if l3[i + 1] - l3[i] < min2:\n                min2 = l3[i + 1] - l3[i]\n        ans = min(min1, min2)\n        print(ans / 2)\n        testcase = testcase - 1\nexcept:\n    pass", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = []\n    l = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        c.append(x - y)\n        l.append(x + y)\n    c = sorted(c)\n    l = sorted(l)\n    dis = []\n    lis = []\n    for i in range(len(c) - 1):\n        dis.append(abs(c[i] - (c[i] / 2 + c[i + 1] / 2)))\n        lis.append(abs(l[i] - (l[i] / 2 + l[i + 1] / 2)))\n    print(min(min(dis), min(lis)))", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    ls = []\n    lsm = []\n    lsp = []\n    for y in range(n):\n        ls.append(list(map(int, input().strip().split())))\n    mini = 10000000000000\n    for i in range(n):\n        lsm.append(ls[i][1] - ls[i][0])\n    for j in range(n):\n        lsp.append(ls[j][1] + ls[j][0])\n    lsm.sort()\n    lsp.sort()\n    for k in range(n - 1):\n        temp = lsm[k + 1] - lsm[k]\n        if temp < mini:\n            mini = temp\n    for l in range(n - 1):\n        tmp = lsp[l + 1] - lsp[l]\n        if tmp < mini:\n            mini = tmp\n    print(mini / 2)", "for _ in range(int(input())):\n    (positive, negative) = ([], [])\n    n = int(input())\n    point = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        point.append([x, y])\n        positive.append(y + x)\n        negative.append(y - x)\n    mini = 99999999999\n    positive.sort()\n    negative.sort()\n    for i in range(n - 1):\n        if positive[i + 1] - positive[i] < mini:\n            mini = positive[i + 1] - positive[i]\n    for i in range(n - 1):\n        if negative[i + 1] - negative[i] < mini:\n            mini = negative[i + 1] - negative[i]\n    print(mini / 2.0)", "for _ in range(int(input())):\n    (newx, newy) = ([], [])\n    n = int(input())\n    po = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        po.append([x, y])\n        newy.append(y - x)\n        newx.append(y + x)\n    min = 1000000001\n    newy.sort()\n    newx.sort()\n    for j in range(n - 1):\n        if newx[j + 1] - newx[j] < min:\n            min = newx[j + 1] - newx[j]\n    for j in range(n - 1):\n        if newy[j + 1] - newy[j] < min:\n            min = newy[j + 1] - newy[j]\n    print(min / 2.0)", "for _ in range(int(input())):\n    (x1, y1) = ([], [])\n    n = int(input())\n    p = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        p.append([x, y])\n        x1.append(y + x)\n        y1.append(y - x)\n    min = 999999999\n    x1.sort()\n    y1.sort()\n    for i in range(n - 1):\n        if x1[i + 1] - x1[i] < min:\n            min = x1[i + 1] - x1[i]\n    for i in range(n - 1):\n        if y1[i + 1] - y1[i] < min:\n            min = y1[i + 1] - y1[i]\n    print(min / 2.0)", "for _ in range(int(input())):\n    (positive, negative) = ([], [])\n    n = int(input())\n    point = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        point.append([x, y])\n        positive.append(y + x)\n        negative.append(y - x)\n    mini = 99999999999\n    positive.sort()\n    negative.sort()\n    for i in range(n - 1):\n        if positive[i + 1] - positive[i] < mini:\n            mini = positive[i + 1] - positive[i]\n    for i in range(n - 1):\n        if negative[i + 1] - negative[i] < mini:\n            mini = negative[i + 1] - negative[i]\n    print(mini / 2.0)", "t = int(input())\nfor j in range(t):\n    a = []\n    b = []\n    c = []\n    d = []\n    n = int(input())\n    for k in range(n):\n        (x, y) = map(int, input().split())\n        a.append(x + y)\n        b.append(-x + y)\n    a.sort()\n    b.sort()\n    for i in range(n - 1):\n        c.append((a[i + 1] - a[i]) / 2)\n        d.append((b[i + 1] - b[i]) / 2)\n    print(min(min(c), min(d)))", "def ret(add, sub):\n    add.sort()\n    sub.sort()\n    minadd = abs(add[0] - add[1])\n    for i in range(len(add) - 1):\n        temp = abs(add[i] - add[i + 1])\n        if temp < minadd:\n            minadd = temp\n    minsub = abs(sub[0] - sub[1])\n    for i in range(len(sub) - 1):\n        temp = abs(sub[i] - sub[i + 1])\n        if temp < minsub:\n            minsub = temp\n    return min(minadd / 2, minsub / 2)\ntestcase = int(input())\nfor i in range(testcase):\n    points = int(input())\n    add = []\n    sub = []\n    for j in range(points):\n        a = list(map(int, input().split()))\n        add.append(a[0] + a[1])\n        sub.append(a[0] - a[1])\n    print('%.6f' % ret(add, sub))"]