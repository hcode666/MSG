["n = int(input())\nc = 0\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    if (y1 - y2) * (y3 - y2) == (x2 - x1) * (x3 - x2) or (y2 - y3) * (y1 - y3) == (x3 - x2) * (x1 - x3) or (y3 - y1) * (y2 - y1) == (x1 - x3) * (x2 - x1):\n        c = c + 1\nprint(c)", "count = 0\nfor i in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = abs(x2 - x1) ** 2 + abs(y2 - y1) ** 2\n    b = abs(x3 - x2) ** 2 + abs(y3 - y2) ** 2\n    c = abs(x3 - x1) ** 2 + abs(y3 - y1) ** 2\n    if a + b == c or b + c == a or c + a == b:\n        count = count + 1\nprint(count)", "count = 0\nfor i in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = abs(x2 - x1) ** 2 + abs(y2 - y1) ** 2\n    b = abs(x3 - x2) ** 2 + abs(y3 - y2) ** 2\n    c = abs(x3 - x1) ** 2 + abs(y3 - y1) ** 2\n    if a + b == c or b + c == a or c + a == b:\n        count = count + 1\nprint(count)", "count = 0\nfor i in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = abs(x2 - x1) ** 2 + abs(y2 - y1) ** 2\n    b = abs(x3 - x2) ** 2 + abs(y3 - y2) ** 2\n    c = abs(x3 - x1) ** 2 + abs(y3 - y1) ** 2\n    if a + b == c or c + a == b or b + c == a:\n        count += 1\nprint(count)", "count = 0\nfor i in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = abs(x2 - x1) ** 2 + abs(y2 - y1) ** 2\n    b = abs(x3 - x2) ** 2 + abs(y3 - y2) ** 2\n    c = abs(x3 - x1) ** 2 + abs(y3 - y1) ** 2\n    if a + b == c or c + a == b or b + c == a:\n        count += 1\nprint(count)", "def vector(p, q):\n    return (q[0] - p[0], q[1] - p[1])\n\ndef multi(p, q):\n    return p[0] * q[0] + p[1] * q[1]\nans = 0\nfor _ in range(int(input())):\n    (a, b, c, d, e, f) = map(int, input().split())\n    (p1, p2, p3) = ((a, b), (c, d), (e, f))\n    (v1, v2, v3) = (vector(p1, p2), vector(p2, p3), vector(p3, p1))\n    if 0 in [multi(v1, v2), multi(v2, v3), multi(v3, v1)]:\n        ans += 1\nprint(ans)", "n = int(input())\ncount = 0\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = abs(x2 - x1) ** 2 + abs(y2 - y1) ** 2\n    b = abs(x3 - x2) ** 2 + abs(y3 - y2) ** 2\n    c = abs(x3 - x1) ** 2 + abs(y3 - y1) ** 2\n    if a + b == c or b + c == a or a + c == b:\n        count += 1\nprint(count)", "count = 0\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = [int(i) for i in input().split()]\n    ab = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    bc = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    ac = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    if ab == ac + bc or bc == ac + ab or ac == ab + bc:\n        count += 1\nprint(count)", "n = int(input())\ncount = 0\narr = []\nfor j in range(n):\n    (x1, y1, x2, y2, x3, y3) = [int(i) for i in input().split()]\n    ab = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    bc = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    ac = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    if ab == ac + bc or bc == ac + ab or ac == ab + bc:\n        count += 1\nprint(count)", "n = int(input())\ncount = 0\narr = []\nfor j in range(n):\n    (x1, y1, x2, y2, x3, y3) = [int(i) for i in input().split()]\n    ab = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    bc = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    ac = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    if ab == ac + bc or bc == ac + ab or ac == ab + bc:\n        count += 1\nprint(count)", "import math\n\ndef distance(p1, p2):\n    return math.sqrt(pow(p1[0] - p2[0], 2) + pow(p1[1] - p2[1], 2))\n\ndef is_right_triangle(tri, tol=1e-06):\n    lengths = []\n    lengths.append(distance(tri[0], tri[1]))\n    lengths.append(distance(tri[0], tri[2]))\n    lengths.append(distance(tri[1], tri[2]))\n    lengths.sort()\n    val1 = pow(lengths[0], 2) + pow(lengths[1], 2) - pow(lengths[-1], 2)\n    val1 = abs(val1)\n    if val1 < tol:\n        return True\n    else:\n        return False\nT = int(input())\ncount = 0\nfor var in range(0, T):\n    temp = input().split(' ')\n    for var in range(0, len(temp)):\n        temp[var] = int(temp[var])\n    arr = []\n    arr.append([temp[0], temp[1]])\n    arr.append([temp[2], temp[3]])\n    arr.append([temp[4], temp[5]])\n    if is_right_triangle(arr):\n        count += 1\nprint(count)", "n = int(input())\nans = 0\nfor _ in range(n):\n    m = list(map(int, input().split()))\n    sides = ((m[0] - m[2]) ** 2 + (m[1] - m[3]) ** 2, (m[2] - m[4]) ** 2 + (m[3] - m[5]) ** 2, (m[4] - m[0]) ** 2 + (m[5] - m[1]) ** 2)\n    sides = sorted(sides)\n    if sides[-1] == sides[0] + sides[1]:\n        ans += 1\nprint(ans)", "n = int(input())\nans = 0\nfor _ in range(n):\n    m = list(map(int, input().split()))\n    sides = ((m[0] - m[2]) ** 2 + (m[1] - m[3]) ** 2, (m[2] - m[4]) ** 2 + (m[3] - m[5]) ** 2, (m[4] - m[0]) ** 2 + (m[5] - m[1]) ** 2)\n    sides = sorted(sides)\n    if sides[-1] == sides[0] + sides[1]:\n        ans += 1\nprint(ans)", "n = int(input())\nans = 0\nfor _ in range(n):\n    m = list(map(int, input().split()))\n    sides = ((m[0] - m[2]) ** 2 + (m[1] - m[3]) ** 2, (m[2] - m[4]) ** 2 + (m[3] - m[5]) ** 2, (m[4] - m[0]) ** 2 + (m[5] - m[1]) ** 2)\n    sides = sorted(sides)\n    if sides[-1] == sides[0] + sides[1]:\n        ans += 1\nprint(ans)", "res = 0\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = pow(x2 - x1, 2) + pow(y2 - y1, 2)\n    b = pow(x3 - x2, 2) + pow(y3 - y2, 2)\n    c = pow(x1 - x3, 2) + pow(y1 - y3, 2)\n    if a == b + c or b == a + c or c == a + b:\n        res += 1\nprint(res)", "count = 0\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    X = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    Y = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    Z = (x3 - x2) ** 2 + (y2 - y3) ** 2\n    if X == Y + Z or Y == X + Z or Z == Y + X:\n        count += 1\nprint(count)", "tc = int(input())\ncount = 0\nfor _ in range(tc):\n    arr = [int(x) for x in input().split()]\n    side1 = (arr[0] - arr[2]) ** 2 + (arr[1] - arr[3]) ** 2\n    side2 = (arr[2] - arr[4]) ** 2 + (arr[3] - arr[5]) ** 2\n    side3 = (arr[4] - arr[0]) ** 2 + (arr[5] - arr[1]) ** 2\n    length = [side3, side2, side1]\n    length.sort()\n    if length[0] + length[1] == length[2]:\n        count += 1\nprint(count)", "c = 0\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    s1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    s2 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    s3 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    l = [s1, s2, s3]\n    l.sort()\n    if l[2] == l[0] + l[1]:\n        c += 1\nprint(c)", "def distance(a, b, c, d):\n    d = ((a - c) ** 2 + (b - d) ** 2) ** (1 / 2)\n    return d\nc = 0\nn = 0\nT = int(input())\nfor tc in range(T):\n    A = []\n    (p, q, r, s, t, u) = map(int, input().split(' '))\n    d1 = distance(p, q, r, s)\n    d2 = distance(p, q, t, u)\n    d3 = distance(r, s, t, u)\n    d1 = round(d1 ** 2, 2)\n    d2 = round(d2 ** 2, 2)\n    d3 = round(d3 ** 2, 2)\n    A.append(d1)\n    A.append(d2)\n    A.append(d3)\n    A.sort()\n    n += 1\n    if A[2] == A[1] + A[0]:\n        c += 1\nprint(c)", "def distance(a, b, c, d):\n    d = ((a - c) ** 2 + (b - d) ** 2) ** (1 / 2)\n    return d\nc = 0\nn = 0\nT = int(input())\nfor tc in range(T):\n    A = []\n    (p, q, r, s, t, u) = map(int, input().split(' '))\n    d1 = distance(p, q, r, s)\n    d2 = distance(p, q, t, u)\n    d3 = distance(r, s, t, u)\n    d1 = round(d1 ** 2, 2)\n    d2 = round(d2 ** 2, 2)\n    d3 = round(d3 ** 2, 2)\n    A.append(d1)\n    A.append(d2)\n    A.append(d3)\n    A.sort()\n    n += 1\n    if A[2] == A[1] + A[0]:\n        c += 1\nprint(c)", "c = 0\nfor i in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    if (y1 - y2) * (y3 - y2) == (x2 - x1) * (x3 - x2) or (y2 - y3) * (y1 - y3) == (x3 - x2) * (x1 - x3) or (y3 - y1) * (y2 - y1) == (x1 - x3) * (x2 - x1):\n        c = c + 1\nprint(c)", "n = int(input())\nvalid = 0\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    s1 = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    s2 = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    s3 = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    sq = [s1, s2, s3]\n    sq.sort()\n    if sq[2] == sq[0] + sq[1]:\n        valid += 1\nprint(valid)", "right = 0\nfor tc in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    d3 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    sides = [d1, d2, d3]\n    sides.sort()\n    if sides[0] + sides[1] == sides[2]:\n        right += 1\nprint(right)", "n = int(input())\ncount = 0\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().split()))\n    d1 = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    d2 = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    d3 = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    if d1 + d2 == d3 or d1 + d3 == d2 or d2 + d3 == d1:\n        count = count + 1\nprint(count)", "def check_right(x1, y1, x2, y2, x3, y3):\n    a = (y1 - y2) ** 2 + (x1 - x2) ** 2\n    b = (y1 - y3) ** 2 + (x1 - x3) ** 2\n    c = (y3 - y2) ** 2 + (x3 - x2) ** 2\n    if a == b + c or b == c + a or c == a + b:\n        return True\n    else:\n        return False\nc = 0\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    if check_right(x1, y1, x2, y2, x3, y3) == True:\n        c += 1\nprint(c)", "def check_right(x1, y1, x2, y2, x3, y3):\n    a = (y1 - y2) ** 2 + (x1 - x2) ** 2\n    b = (y1 - y3) ** 2 + (x1 - x3) ** 2\n    c = (y3 - y2) ** 2 + (x3 - x2) ** 2\n    if a == b + c or b == c + a or c == a + b:\n        return True\n    else:\n        return False\nc = 0\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    if check_right(x1, y1, x2, y2, x3, y3) == True:\n        c += 1\nprint(c)", "def check_right(x1, y1, x2, y2, x3, y3):\n    a = (y1 - y2) ** 2 + (x1 - x2) ** 2\n    b = (y1 - y3) ** 2 + (x1 - x3) ** 2\n    c = (y3 - y2) ** 2 + (x3 - x2) ** 2\n    if a == b + c or b == c + a or c == a + b:\n        return True\n    else:\n        return False\nc = 0\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    if check_right(x1, y1, x2, y2, x3, y3) == True:\n        c += 1\nprint(c)", "import math\nn = int(input())\nres = 0\nfor i in range(n):\n    lst = list(map(int, input().split()))\n    x = (lst[2] - lst[0]) ** 2 + (lst[3] - lst[1]) ** 2\n    y = (lst[4] - lst[2]) ** 2 + (lst[5] - lst[3]) ** 2\n    z = (lst[4] - lst[0]) ** 2 + (lst[5] - lst[1]) ** 2\n    if x + y == z or x + z == y or y + z == x:\n        res += 1\nprint(res)", "import math\nflag = 0\nn = int(input())\n\ndef find():\n    abc = 0\n    a = abs(math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2))\n    b = abs(math.sqrt((x2 - x3) ** 2 + (y2 - y3) ** 2))\n    c = abs(math.sqrt((x3 - x1) ** 2 + (y3 - y1) ** 2))\n    if b ** 2 == a ** 2 + c ** 2:\n        abc = abc + 1\nfor t in range(0, n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split(' '))\n    if (y1 - y2) * (y3 - y2) == (x2 - x1) * (x3 - x2) or (y2 - y3) * (y1 - y3) == (x3 - x2) * (x1 - x3) or (y3 - y1) * (y2 - y1) == (x1 - x3) * (x2 - x1):\n        flag += 1\nprint(flag)", "import math\nflag = 0\nn = int(input())\n\ndef find():\n    abc = 0\n    a = abs(math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2))\n    b = abs(math.sqrt((x2 - x3) ** 2 + (y2 - y3) ** 2))\n    c = abs(math.sqrt((x3 - x1) ** 2 + (y3 - y1) ** 2))\n    if b ** 2 == a ** 2 + c ** 2:\n        abc = abc + 1\nfor t in range(0, n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split(' '))\n    if (y1 - y2) * (y3 - y2) == (x2 - x1) * (x3 - x2) or (y2 - y3) * (y1 - y3) == (x3 - x2) * (x1 - x3) or (y3 - y1) * (y2 - y1) == (x1 - x3) * (x2 - x1):\n        flag += 1\nprint(flag)", "import math\nflag = 0\nn = int(input())\n\ndef find():\n    abc = 0\n    a = abs(math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2))\n    b = abs(math.sqrt((x2 - x3) ** 2 + (y2 - y3) ** 2))\n    c = abs(math.sqrt((x3 - x1) ** 2 + (y3 - y1) ** 2))\n    if b ** 2 == a ** 2 + c ** 2:\n        abc = abc + 1\nfor t in range(0, n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split(' '))\n    if (y1 - y2) * (y3 - y2) == (x2 - x1) * (x3 - x2) or (y2 - y3) * (y1 - y3) == (x3 - x2) * (x1 - x3) or (y3 - y1) * (y2 - y1) == (x1 - x3) * (x2 - x1):\n        flag += 1\nprint(flag)", "count = 0\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    P1P2 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    P2P3 = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    P1P3 = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    if P1P2 + P2P3 == P1P3 or P1P2 + P1P3 == P2P3 or P1P3 + P2P3 == P1P2:\n        count += 1\nprint(count)", "ans = 0\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    if (y1 - y2) * (y3 - y2) == (x2 - x1) * (x3 - x2) or (y2 - y3) * (y1 - y3) == (x3 - x2) * (x1 - x3) or (y3 - y1) * (y2 - y1) == (x1 - x3) * (x2 - x1):\n        ans += 1\nprint(ans)", "k = 0\nfor t in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    if (y1 - y2) * (y3 - y2) == (x2 - x1) * (x3 - x2) or (y2 - y3) * (y1 - y3) == (x3 - x2) * (x1 - x3) or (y3 - y1) * (y2 - y1) == (x1 - x3) * (x2 - x1):\n        k += 1\nprint(k)", "N = int(input())\nc = 0\nfor i in range(N):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    if (y1 - y2) * (y3 - y2) == (x2 - x1) * (x3 - x2) or (y2 - y3) * (y1 - y3) == (x3 - x2) * (x1 - x3) or (y3 - y1) * (y2 - y1) == (x1 - x3) * (x2 - x1):\n        c += 1\nprint(c)", "from math import sqrt\nn = int(input())\ncnt = 0\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)\n    b = (x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2)\n    c = (x1 - x3) * (x1 - x3) + (y1 - y3) * (y1 - y3)\n    if c == a + b or b == a + c or a == b + c:\n        cnt += 1\nprint(cnt)", "t = int(input())\ncount = 0\nfor i in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    b = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    c = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    if a == b + c or b == a + c or c == a + b:\n        count += 1\nprint(count)", "count = 0\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    b = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    c = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    if a == b + c or b == a + c or c == a + b:\n        count += 1\nprint(count)", "n = int(input())\ncount = 0\nfor _ in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    d2 = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    d3 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    if d1 == d2 + d3 or d2 == d3 + d1 or d3 == d1 + d2:\n        count += 1\nprint(count)", "n = int(input())\ncount = 0\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().split()))\n    d1 = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    d2 = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    d3 = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    if d1 + d2 == d3 or d1 + d3 == d2 or d2 + d3 == d1:\n        count = count + 1\nprint(count)", "n = int(input())\na = 0\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    x = (y2 - y1) ** 2 + (x2 - x1) ** 2\n    y = (y3 - y1) ** 2 + (x3 - x1) ** 2\n    z = (y3 - y2) ** 2 + (x3 - x2) ** 2\n    if x + y == z or x + z == y or y + z == x:\n        a += 1\nprint(a)", "def get_distance_squared(x1, y1, x2, y2):\n    return (x2 - x1) ** 2 + (y2 - y1) ** 2\nnum_cases = int(input())\nnum_right_triangles = 0\nfor _ in range(num_cases):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().split()))\n    line_12 = get_distance_squared(x1, y1, x2, y2)\n    line_23 = get_distance_squared(x2, y2, x3, y3)\n    line_31 = get_distance_squared(x3, y3, x1, y1)\n    lengths_squared = sorted([line_12, line_23, line_31])\n    if lengths_squared[2] == lengths_squared[0] + lengths_squared[1]:\n        num_right_triangles += 1\nprint(num_right_triangles)", "from math import sqrt\n\ndef get_distance(x1, y1, x2, y2):\n    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\nnum_cases = int(input())\nnum_right_triangles = 0\nfor _ in range(num_cases):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().split()))\n    line_12 = get_distance(x1, y1, x2, y2)\n    line_23 = get_distance(x2, y2, x3, y3)\n    line_31 = get_distance(x3, y3, x1, y1)\n    lengths = sorted([line_12, line_23, line_31])\n    if abs(lengths[-1] ** 2 - (lengths[0] ** 2 + lengths[1] ** 2)) < 0.01:\n        num_right_triangles += 1\nprint(num_right_triangles)", "co = 0\nfor i in range(int(input())):\n    (a, b, c, d, e, f) = map(int, input().split())\n    a_1 = (a - c) ** 2 + (b - d) ** 2\n    b_1 = (c - e) ** 2 + (d - f) ** 2\n    c_1 = (a - e) ** 2 + (b - f) ** 2\n    if a_1 == b_1 + c_1 or b_1 == c_1 + a_1 or c_1 == b_1 + a_1:\n        co += 1\nprint(co)", "co = 0\nfor i in range(int(input())):\n    (a, b, c, d, e, f) = map(int, input().split())\n    a_1 = (a - c) ** 2 + (b - d) ** 2\n    b_1 = (c - e) ** 2 + (d - f) ** 2\n    c_1 = (a - e) ** 2 + (b - f) ** 2\n    if a_1 == b_1 + c_1 or b_1 == c_1 + a_1 or c_1 == b_1 + a_1:\n        co += 1\nprint(co)", "T = int(input())\ncnt = 0\nfor i in range(T):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().split()))\n    a = int(pow(x2 - x1, 2)) + int(pow(y2 - y1, 2))\n    b = int(pow(x3 - x2, 2)) + int(pow(y3 - y2, 2))\n    c = int(pow(x3 - x1, 2)) + int(pow(y3 - y1, 2))\n    if (a > 0 and b > 0 and (c > 0)) and (c == a + b or a == b + c or b == a + c):\n        cnt += 1\nprint(cnt)", "N = int(input())\ntotal = 0\nfor _ in range(N):\n    A = list(map(int, input().split()))\n    A = A + [A[0], A[1]]\n    sides2 = []\n    for i in range(0, 5, 2):\n        a = A[i] - A[i + 2]\n        b = A[i + 1] - A[i + 3]\n        sides2.append(a * a + b * b)\n    sides2.sort()\n    if sides2[-1] == sum(sides2[:2]):\n        total += 1\nprint(total)", "T = int(input())\ncount = 0\nfor tc in range(T):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().split(' ')))\n    d1 = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    d2 = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    d3 = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    l = [d1, d2, d3]\n    l = sorted(l)\n    if l[0] + l[1] == l[2]:\n        count += 1\nprint(count)", "n = input()\ncount = 0\nfor c in range(0, int(n)):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().split()))\n    l1 = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    l2 = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    l3 = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    arr = []\n    arr.append(l1)\n    arr.append(l2)\n    arr.append(l3)\n    la = max(l1, l2, l3)\n    arr.remove(la)\n    if la == arr[0] + arr[1]:\n        count = count + 1\nprint(count)", "n = input()\ncount = 0\nfor c in range(0, int(n)):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().split()))\n    l1 = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    l2 = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    l3 = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    arr = []\n    arr.append(l1)\n    arr.append(l2)\n    arr.append(l3)\n    la = max(l1, l2, l3)\n    arr.remove(la)\n    if la == arr[0] + arr[1]:\n        count = count + 1\nprint(count)", "T = int(input())\ncount = 0\nfor tc in range(T):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().split(' ')))\n    d1 = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    d2 = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    d3 = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    l = [d1, d2, d3]\n    l = sorted(l)\n    if l[0] + l[1] == l[2]:\n        count += 1\nprint(count)", "def square(x1, y1, x2, y2):\n    return (x1 - x2) ** 2 + (y1 - y2) ** 2\nt = int(input())\ncount = 0\nfor i in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a1 = square(x1, y1, x2, y2)\n    a2 = square(x2, y2, x3, y3)\n    a3 = square(x3, y3, x1, y1)\n    if 2 * max(a1, a2, a3) == a1 + a2 + a3:\n        count += 1\nprint(count)", "vishnesh = int(input())\ns = 0\nfor i in range(vishnesh):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().split()))\n    l1 = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    l2 = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    l3 = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    arr = []\n    arr.append(l1)\n    arr.append(l2)\n    arr.append(l3)\n    la = max(l1, l2, l3)\n    arr.remove(la)\n    if la == arr[0] + arr[1]:\n        s = s + 1\nprint(s)", "import math\nt = int(input())\ncount = 0\nfor _ in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)\n    d2 = (x1 - x3) * (x1 - x3) + (y1 - y3) * (y1 - y3)\n    d3 = (x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2)\n    if d1 > d2 and d1 > d3:\n        if d1 == d2 + d3:\n            count += 1\n    elif d2 > d3 and d2 > d1:\n        if d2 == d1 + d3:\n            count += 1\n    elif d3 == d1 + d2:\n        count += 1\nprint(count)", "ans = 0\nfor _ in range(int(input())):\n    z = []\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    z.append((x1 - x2) ** 2 + (y1 - y2) ** 2)\n    z.append((x2 - x3) ** 2 + (y2 - y3) ** 2)\n    z.append((x1 - x3) ** 2 + (y1 - y3) ** 2)\n    if sum(z) == 2 * max(z):\n        ans += 1\nprint(ans)", "tests = int(input())\ncount = 0\nfor i in range(tests):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    arr = []\n    arr.append((x1 - x2) ** 2 + (y1 - y2) ** 2)\n    arr.append((x2 - x3) ** 2 + (y2 - y3) ** 2)\n    arr.append((x1 - x3) ** 2 + (y1 - y3) ** 2)\n    if sum(arr) == 2 * max(arr):\n        count += 1\nprint(count)", "ans = 0\nfor _ in range(int(input())):\n    z = []\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    z.append((x1 - x2) ** 2 + (y1 - y2) ** 2)\n    z.append((x2 - x3) ** 2 + (y2 - y3) ** 2)\n    z.append((x1 - x3) ** 2 + (y1 - y3) ** 2)\n    if sum(z) == 2 * max(z):\n        ans += 1\nprint(ans)", "import math\ncnt = 0\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    A = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    B = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    C = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    if A == B + C or B == A + C or C == B + A:\n        cnt += 1\nprint(cnt)", "n = int(input())\nans = 0\nfor i in range(n):\n    z = []\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    z.append((x1 - x2) ** 2 + (y1 - y2) ** 2)\n    z.append((x2 - x3) ** 2 + (y2 - y3) ** 2)\n    z.append((x1 - x3) ** 2 + (y1 - y3) ** 2)\n    if sum(z) == 2 * max(z):\n        ans += 1\nprint(ans)", "n = int(input())\nans = 0\nfor i in range(n):\n    z = []\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    z.append((x1 - x2) ** 2 + (y1 - y2) ** 2)\n    z.append((x2 - x3) ** 2 + (y2 - y3) ** 2)\n    z.append((x1 - x3) ** 2 + (y1 - y3) ** 2)\n    if sum(z) == 2 * max(z):\n        ans += 1\nprint(ans)", "n = int(input())\nans = 0\nfor i in range(n):\n    z = []\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    z.append((x1 - x2) ** 2 + (y1 - y2) ** 2)\n    z.append((x2 - x3) ** 2 + (y2 - y3) ** 2)\n    z.append((x1 - x3) ** 2 + (y1 - y3) ** 2)\n    if sum(z) == 2 * max(z):\n        ans += 1\nprint(ans)", "n = int(input())\nans = 0\nfor i in range(n):\n    z = []\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    z.append((x1 - x2) ** 2 + (y1 - y2) ** 2)\n    z.append((x2 - x3) ** 2 + (y2 - y3) ** 2)\n    z.append((x1 - x3) ** 2 + (y1 - y3) ** 2)\n    if sum(z) == 2 * max(z):\n        ans += 1\nprint(ans)", "n = int(input())\nans = 0\nfor i in range(n):\n    z = []\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    z.append((x1 - x2) ** 2 + (y1 - y2) ** 2)\n    z.append((x2 - x3) ** 2 + (y2 - y3) ** 2)\n    z.append((x1 - x3) ** 2 + (y1 - y3) ** 2)\n    if sum(z) == 2 * max(z):\n        ans += 1\nprint(ans)", "c = 0\nfor _ in range(int(input())):\n    (a1, a2, b1, b2, c1, c2) = map(int, input().split())\n    l = []\n    l.append((b1 - a1) ** 2 + (b2 - a2) ** 2)\n    l.append((c1 - b1) ** 2 + (c2 - b2) ** 2)\n    l.append((a1 - c1) ** 2 + (a2 - c2) ** 2)\n    if max(l) == sum(l) - max(l):\n        c += 1\nprint(c)", "t = int(input())\nv = 0\nfor i in range(t):\n    (a, b, c, d, e, f) = map(int, input().split())\n    l = []\n    g = ((c - a) ** 2 + (d - b) ** 2) ** 0.5\n    h = ((e - a) ** 2 + (f - b) ** 2) ** 0.5\n    j = ((e - c) ** 2 + (f - d) ** 2) ** 0.5\n    l.append(g)\n    l.append(h)\n    l.append(j)\n    l = sorted(l)\n    i = l[0] * l[0]\n    m = l[1] * l[1]\n    n = l[2] * l[2]\n    o = round(i + m)\n    n = round(n)\n    if o == n:\n        v = v + 1\nprint(v)", "t = int(input())\nv = 0\nfor i in range(t):\n    (a, b, c, d, e, f) = map(int, input().split())\n    l = []\n    g = ((c - a) ** 2 + (d - b) ** 2) ** 0.5\n    h = ((e - a) ** 2 + (f - b) ** 2) ** 0.5\n    j = ((e - c) ** 2 + (f - d) ** 2) ** 0.5\n    l.append(g)\n    l.append(h)\n    l.append(j)\n    l = sorted(l)\n    i = l[0] * l[0]\n    m = l[1] * l[1]\n    n = l[2] * l[2]\n    o = round(i + m)\n    n = round(n)\n    if o == n:\n        v = v + 1\nprint(v)", "t = int(input())\nv = 0\nfor i in range(t):\n    (a, b, c, d, e, f) = map(int, input().split())\n    l = []\n    g = ((c - a) ** 2 + (d - b) ** 2) ** 0.5\n    h = ((e - a) ** 2 + (f - b) ** 2) ** 0.5\n    j = ((e - c) ** 2 + (f - d) ** 2) ** 0.5\n    l.append(g)\n    l.append(h)\n    l.append(j)\n    l = sorted(l)\n    i = l[0] * l[0]\n    m = l[1] * l[1]\n    n = l[2] * l[2]\n    o = round(i + m)\n    n = round(n)\n    if o == n:\n        v = v + 1\nprint(v)", "N = int(input())\ncount = 0\nfor i in range(N):\n    l = list(map(int, input().split()))\n    A = (l[2] - l[0]) ** 2 + (l[3] - l[1]) ** 2\n    B = (l[4] - l[2]) ** 2 + (l[5] - l[3]) ** 2\n    C = (l[4] - l[0]) ** 2 + (l[5] - l[1]) ** 2\n    if A + B == C:\n        count += 1\n    elif B + C == A:\n        count += 1\n    elif C + A == B:\n        count += 1\nprint(count)", "N = int(input())\ncount = 0\nfor i in range(N):\n    l = list(map(int, input().split()))\n    A = (l[2] - l[0]) ** 2 + (l[3] - l[1]) ** 2\n    B = (l[4] - l[2]) ** 2 + (l[5] - l[3]) ** 2\n    C = (l[4] - l[0]) ** 2 + (l[5] - l[1]) ** 2\n    if A + B == C:\n        count += 1\n    elif B + C == A:\n        count += 1\n    elif C + A == B:\n        count += 1\nprint(count)", "N = int(input())\ncount = 0\nfor i in range(N):\n    l = list(map(int, input().split()))\n    A = (l[2] - l[0]) ** 2 + (l[3] - l[1]) ** 2\n    B = (l[4] - l[2]) ** 2 + (l[5] - l[3]) ** 2\n    C = (l[4] - l[0]) ** 2 + (l[5] - l[1]) ** 2\n    if A + B == C:\n        count += 1\n    elif B + C == A:\n        count += 1\n    elif C + A == B:\n        count += 1\nprint(count)", "c = 0\nfor jj in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    d3 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    if d1 + d2 == d3 or d2 + d3 == d1 or d1 + d3 == d2:\n        c += 1\nprint(c)", "t = int(input())\nc = 0\nfor _ in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    l1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    l2 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    l3 = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    l = [l1, l2, l3]\n    l.sort()\n    if l[2] == l[0] + l[1]:\n        c = c + 1\nprint(c)", "count = 0\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    l = [(x1 - x2) ** 2 + (y1 - y2) ** 2, (x2 - x3) ** 2 + (y2 - y3) ** 2, (x3 - x1) ** 2 + (y3 - y1) ** 2]\n    l.sort()\n    if l[2] == l[0] + l[1]:\n        count = count + 1\nprint(count)", "ans = 0\nn = int(input())\nfor i in range(n):\n    x = list(map(int, input().split()))\n    a = (x[0] - x[2]) * (x[0] - x[2]) + (x[1] - x[3]) * (x[1] - x[3])\n    b = (x[0] - x[4]) * (x[0] - x[4]) + (x[1] - x[5]) * (x[1] - x[5])\n    c = (x[2] - x[4]) * (x[2] - x[4]) + (x[3] - x[5]) * (x[3] - x[5])\n    if a + b == c or a + c == b or b + c == a:\n        ans += 1\nprint(ans)", "T = int(input())\nct = 0\nfor t in range(T):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = pow(x1 - x2, 2) + pow(y1 - y2, 2)\n    d2 = pow(x3 - x2, 2) + pow(y3 - y2, 2)\n    d3 = pow(x1 - x3, 2) + pow(y1 - y3, 2)\n    if d1 > d2 and d1 > d3:\n        if d1 == d2 + d3:\n            ct += 1\n    elif d2 > d1 and d2 > d3:\n        if d2 == d1 + d3:\n            ct += 1\n    elif d3 == d1 + d2:\n        ct += 1\nprint(ct)", "N = int(input())\ncount = 0\nfor i in range(N):\n    v = list(map(int, input().split()))\n    l1 = (v[2] - v[0]) ** 2 + (v[3] - v[1]) ** 2\n    l2 = (v[4] - v[2]) ** 2 + (v[5] - v[3]) ** 2\n    l3 = (v[4] - v[0]) ** 2 + (v[5] - v[1]) ** 2\n    if l1 + l2 == l3:\n        count += 1\n    elif l2 + l3 == l1:\n        count += 1\n    elif l3 + l1 == l2:\n        count += 1\nprint(count)", "N = int(input())\ncount = 0\nfor i in range(N):\n    l = list(map(int, input().split()))\n    A = (l[2] - l[0]) ** 2 + (l[3] - l[1]) ** 2\n    B = (l[4] - l[2]) ** 2 + (l[5] - l[3]) ** 2\n    C = (l[4] - l[0]) ** 2 + (l[5] - l[1]) ** 2\n    if A + B == C:\n        count += 1\n    elif B + C == A:\n        count += 1\n    elif C + A == B:\n        count += 1\nprint(count)", "t = int(input())\ncount = 0\nfor j in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    b = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    c = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    if a > b and a > c and (a == b + c):\n        count += 1\n    elif b > c and b > a and (b == c + a):\n        count += 1\n    elif c > a and c > b and (c == a + b):\n        count += 1\nprint(count)", "t = int(input())\ncount = 0\nfor j in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = (x2 - x1) ** 2 + (y2 - y1) ** 2\n    b = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    c = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    if a > b and a > c and (a == b + c):\n        count += 1\n    elif b > c and b > a and (b == c + a):\n        count += 1\n    elif c > a and c > b and (c == a + b):\n        count += 1\nprint(count)", "a = 0\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = pow(x1 - x3, 2) + pow(y1 - y3, 2)\n    d2 = pow(x3 - x2, 2) + pow(y3 - y2, 2)\n    d3 = pow(x2 - x1, 2) + pow(y2 - y1, 2)\n    if max(d1, d2, d3) == d1 + d2 + d3 - max(d1, d2, d3):\n        a += 1\nprint(a)", "n = int(input())\ncount = 0\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    part_1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    part_2 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    part_3 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    if part_1 == part_2 + part_3 or part_2 == part_1 + part_3 or part_3 == part_1 + part_2:\n        count += 1\nprint(count)", "n = int(input())\ncount = 0\nfor _ in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    d3 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    if d1 == d2 + d3 or d2 == d1 + d3 or d3 == d1 + d2:\n        count += 1\nprint(count)", "c = 0\nfor jj in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    d3 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    if d1 + d2 == d3 or d2 + d3 == d1 or d1 + d3 == d2:\n        c += 1\nprint(c)", "c = 0\nfor jj in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    d3 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    if d1 + d2 == d3 or d2 + d3 == d1 or d1 + d3 == d2:\n        c += 1\nprint(c)", "count = 0\nfor x in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a2 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    b2 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    c2 = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    if a2 == b2 + c2 or b2 == c2 + a2 or c2 == a2 + b2:\n        count += 1\nprint(count)", "count = 0\nfor item in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a2 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    b2 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    c2 = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    if a2 == b2 + c2 or b2 == c2 + a2 or c2 == a2 + b2:\n        count += 1\nprint(count)", "import numpy as np\n\ndef solve(p1, p2, p3):\n    a = np.array(p1)\n    b = np.array(p2)\n    c = np.array(p3)\n    if any([(b - a).dot(c - b) == 0, (c - b).dot(c - a) == 0, (b - a).dot(c - a) == 0]):\n        return 1\n    else:\n        return 0\n\ndef do_codechef():\n    ans = 0\n    for t in range(int(input())):\n        (x1, y1, x2, y2, x3, y3) = map(int, input().split(' '))\n        ans += solve([x1, y1], [x2, y2], [x3, y3])\n    print(ans)\ndo_codechef()\nexit()", "import numpy as np\n\ndef solve(p1, p2, p3):\n    a = np.array(p1)\n    b = np.array(p2)\n    c = np.array(p3)\n    if any([(b - a).dot(c - b) == 0, (c - b).dot(c - a) == 0, (b - a).dot(c - a) == 0]):\n        return 1\n    else:\n        return 0\n\ndef do_codechef():\n    ans = 0\n    for t in range(int(input())):\n        (x1, y1, x2, y2, x3, y3) = map(int, input().split(' '))\n        ans += solve([x1, y1], [x2, y2], [x3, y3])\n    print(ans)\ndo_codechef()\nexit()", "ry = 0\nfor i in range(int(input())):\n    (xx, yy, pp, oo, uu, rr) = map(int, input().split())\n    bro = pow(xx - pp, 2) + pow(yy - oo, 2)\n    sis = pow(uu - pp, 2) + pow(rr - oo, 2)\n    chat = pow(xx - uu, 2) + pow(yy - rr, 2)\n    rea = [bro, sis, chat]\n    rea.sort()\n    if rea[2] == rea[1] + rea[0]:\n        ry += 1\nprint(ry)", "a = 0\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = pow(x1 - x3, 2) + pow(y1 - y3, 2)\n    d2 = pow(x3 - x2, 2) + pow(y3 - y2, 2)\n    d3 = pow(x2 - x1, 2) + pow(y2 - y1, 2)\n    if max(d1, d2, d3) == d1 + d2 + d3 - max(d1, d2, d3):\n        a += 1\nprint(a)", "import numpy as np\n\ndef solve(p1, p2, p3):\n    a = np.array(p1)\n    b = np.array(p2)\n    c = np.array(p3)\n    if any([(b - a).dot(c - b) == 0, (c - b).dot(c - a) == 0, (b - a).dot(c - a) == 0]):\n        return 1\n    else:\n        return 0\n\ndef do_codechef():\n    ans = 0\n    for t in range(int(input())):\n        (x1, y1, x2, y2, x3, y3) = map(int, input().split(' '))\n        ans += solve([x1, y1], [x2, y2], [x3, y3])\n    print(ans)\ndo_codechef()\nexit()", "import numpy as np\n\ndef solve(p1, p2, p3):\n    a = np.array(p1)\n    b = np.array(p2)\n    c = np.array(p3)\n    if any([(b - a).dot(c - b) == 0, (c - b).dot(c - a) == 0, (b - a).dot(c - a) == 0]):\n        return 1\n    else:\n        return 0\n\ndef do_codechef():\n    ans = 0\n    for t in range(int(input())):\n        (x1, y1, x2, y2, x3, y3) = map(int, input().split(' '))\n        ans += solve([x1, y1], [x2, y2], [x3, y3])\n    print(ans)\ndo_codechef()\nexit()", "import numpy as np\n\ndef solve(p1, p2, p3):\n    a = np.array(p1)\n    b = np.array(p2)\n    c = np.array(p3)\n    if any([(b - a).dot(c - b) == 0, (c - b).dot(c - a) == 0, (b - a).dot(c - a) == 0]):\n        return 1\n    else:\n        return 0\n\ndef do_codechef():\n    ans = 0\n    for t in range(int(input())):\n        (x1, y1, x2, y2, x3, y3) = map(int, input().split(' '))\n        ans += solve([x1, y1], [x2, y2], [x3, y3])\n    print(ans)\ndo_codechef()\nexit()", "def get_dist(a, b, c, d):\n    return (a - c) ** 2 + (b - d) ** 2\ntest_case = int(input())\ncount = 0\nfor _ in range(test_case):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = int(get_dist(x1, y1, x2, y2))\n    b = int(get_dist(x1, y1, x3, y3))\n    c = int(get_dist(x2, y2, x3, y3))\n    if a + b == c or a + c == b or b + c == a:\n        count += 1\nprint(count)", "c = 0\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    d3 = (x3 - x1) ** 2 + (y3 - y1) ** 2\n    if d1 == d2 + d3 or d2 == d1 + d3 or d3 == d2 + d1:\n        c += 1\nprint(c)", "c = 0\nfor i in range(int(input())):\n    (X1, Y1, X2, Y2, X3, Y3) = map(int, input().split())\n    A = int(pow(X2 - X1, 2)) + int(pow(Y2 - Y1, 2))\n    B = int(pow(X3 - X2, 2)) + int(pow(Y3 - Y2, 2))\n    C = int(pow(X3 - X1, 2)) + int(pow(Y3 - Y1, 2))\n    if (A > 0 and B > 0 and (C > 0)) and (A == B + C or B == A + C or C == A + B):\n        c += 1\nprint(c)", "c = 0\nfor i in range(int(input())):\n    (X1, Y1, X2, Y2, X3, Y3) = map(int, input().split())\n    A = int(pow(X2 - X1, 2)) + int(pow(Y2 - Y1, 2))\n    B = int(pow(X3 - X2, 2)) + int(pow(Y3 - Y2, 2))\n    C = int(pow(X3 - X1, 2)) + int(pow(Y3 - Y1, 2))\n    if (A > 0 and B > 0 and (C > 0)) and (A == B + C or B == A + C or C == A + B):\n        c += 1\nprint(c)", "c = 0\nfor i in range(int(input())):\n    (X1, Y1, X2, Y2, X3, Y3) = map(int, input().split())\n    A = int(pow(X2 - X1, 2)) + int(pow(Y2 - Y1, 2))\n    B = int(pow(X3 - X2, 2)) + int(pow(Y3 - Y2, 2))\n    C = int(pow(X3 - X1, 2)) + int(pow(Y3 - Y1, 2))\n    if (A > 0 and B > 0 and (C > 0)) and (A == B + C or B == A + C or C == A + B):\n        c += 1\nprint(c)", "ans = 0\nfor _ in range(int(input())):\n    a = list(map(int, input().split()))\n    d1 = (a[0] - a[2]) * (a[0] - a[2]) + (a[1] - a[3]) * (a[1] - a[3])\n    d2 = (a[0] - a[4]) * (a[0] - a[4]) + (a[1] - a[5]) * (a[1] - a[5])\n    d3 = (a[2] - a[4]) * (a[2] - a[4]) + (a[3] - a[5]) * (a[3] - a[5])\n    if d1 + d2 == d3 or d1 + d3 == d2 or d2 + d3 == d1:\n        ans += 1\nprint(ans)"]