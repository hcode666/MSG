["N = int(input())\nmax1 = 0\nindex1 = 0\nindex2 = 0\nmin1 = 999999\nfor i in range(N):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    A1 = abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))\n    if A1 >= max1:\n        max1 = A1\n        index1 = i\n    if A1 <= min1:\n        min1 = A1\n        index2 = i\nprint(index2 + 1, index1 + 1)", "N = int(input())\nmax1 = 0\nindex1 = 0\nindex2 = 0\nmin1 = 999999999\nfor i in range(N):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    A1 = abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))\n    if A1 >= max1:\n        max1 = A1\n        index1 = i\n    if A1 <= min1:\n        min1 = A1\n        index2 = i\nprint(index2 + 1, index1 + 1)", "n = int(input())\nareas = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) * 0.5\n    areas.append(area)\nmin_index = n - areas[::-1].index(min(areas))\nmax_index = n - areas[::-1].index(max(areas))\nprint(min_index, max_index)", "n = int(input())\nareas = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) * 0.5\n    areas.append(area)\nmin_index = n - areas[::-1].index(min(areas))\nmax_index = n - areas[::-1].index(max(areas))\nprint(min_index, max_index)", "n = int(input())\ntriangles = []\nareas = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    triangles.append((x1, y1, x2, y2, x3, y3))\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = triangles[i]\n    area = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) * 0.5\n    areas.append(area)\nmin_index = n - areas[::-1].index(min(areas))\nmax_index = n - areas[::-1].index(max(areas))\nprint(min_index, max_index)", "n = int(input())\ntriangles = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    triangles.append((x1, y1, x2, y2, x3, y3))\nareas = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = triangles[i]\n    area = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) * 0.5\n    areas.append(area)\nmin_index = n - areas[::-1].index(min(areas))\nmax_index = n - areas[::-1].index(max(areas))\nprint(min_index, max_index)", "n = int(input())\nl = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) * 0.5\n    l.append(a)\nmaxi = l[0]\nmini = l[0]\n(mx, mn) = (0, 0)\nfor i in range(n):\n    if maxi <= l[i]:\n        maxi = l[i]\n        mx = i + 1\n    if mini >= l[i]:\n        mini = l[i]\n        mn = i + 1\nprint(mn, mx)", "n = int(input())\nl = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) * 0.5\n    l.append(a)\nmaxi = l[0]\nmini = l[0]\n(mx, mn) = (0, 0)\nfor i in range(n):\n    if maxi <= l[i]:\n        maxi = l[i]\n        mx = i + 1\n    if mini >= l[i]:\n        mini = l[i]\n        mn = i + 1\nprint(mn, mx)", "n = int(input())\nl = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) * 0.5\n    l.append(a)\nmaxi = l[0]\nmini = l[0]\n(mx, mn) = (0, 0)\nfor i in range(n):\n    if maxi <= l[i]:\n        maxi = l[i]\n        mx = i + 1\n    if mini >= l[i]:\n        mini = l[i]\n        mn = i + 1\nprint(mn, mx)", "n = int(input())\nl = []\nfor h in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    s1 = x1 * (y2 - y3)\n    s2 = x2 * (y3 - y1)\n    s3 = x3 * (y1 - y2)\n    a = abs(0.5 * (s1 + s2 + s3))\n    l.append(a)\nl = l[::-1]\nprint(len(l) - l.index(min(l)), len(l) - l.index(max(l)))", "def triangeArea(x1, y1, x2, y2, x3, y3):\n    return abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))\nmax_area = 0\nmax_index = 0\nmin_area = 999999999\nmin_index = 0\nfor i in range(int(input())):\n    (a, b, c, d, e, f) = map(int, input().split())\n    area = triangeArea(a, b, c, d, e, f)\n    if area >= max_area:\n        max_area = area\n        max_index = i + 1\n    if area <= min_area:\n        min_area = area\n        min_index = i + 1\nprint(min_index, max_index)", "n = int(input())\nl = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    s = abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))\n    l.append(s)\nl = l[::-1]\nprint(len(l) - l.index(min(l)), len(l) - l.index(max(l)))", "n = int(input())\nl = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    s = abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))\n    l.append(s)\nl = l[::-1]\nprint(len(l) - l.index(min(l)), len(l) - l.index(max(l)))", "n = int(input())\nl = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) * 0.5\n    l.append(a)\nmaxi = l[0]\nmini = l[0]\n(mx, mn) = (0, 0)\nfor i in range(n):\n    if maxi <= l[i]:\n        maxi = l[i]\n        mx = i + 1\n    if mini >= l[i]:\n        mini = l[i]\n        mn = i + 1\nprint(mn, mx)", "n = int(input())\nl = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) * 0.5\n    l.append(a)\nmaxi = l[0]\nmini = l[0]\n(mx, mn) = (0, 0)\nfor i in range(n):\n    if maxi <= l[i]:\n        maxi = l[i]\n        mx = i + 1\n    if mini >= l[i]:\n        mini = l[i]\n        mn = i + 1\nprint(mn, mx)", "n = int(input())\nl = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) * 0.5\n    l.append(a)\nmaxi = l[0]\nmini = l[0]\n(mx, mn) = (0, 0)\nfor i in range(n):\n    if maxi <= l[i]:\n        maxi = l[i]\n        mx = i + 1\n    if mini >= l[i]:\n        mini = l[i]\n        mn = i + 1\nprint(mn, mx)", "n = int(input())\nl = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) * 0.5\n    l.append(a)\nmaxi = l[0]\nmini = l[0]\n(mx, mn) = (0, 0)\nfor i in range(n):\n    if maxi <= l[i]:\n        maxi = l[i]\n        mx = i + 1\n    if mini >= l[i]:\n        mini = l[i]\n        mn = i + 1\nprint(mn, mx)", "import sys\nn = int(input())\narr = []\nfor n in range(n):\n    arr.append([int(i) for i in input().split()])\nmax = -sys.maxsize - 1\nmin = sys.maxsize\nans1 = 0\nans2 = 0\nfor i in range(len(arr)):\n    area = abs(arr[i][0] * (arr[i][3] - arr[i][5]) + arr[i][2] * (arr[i][5] - arr[i][1]) + arr[i][4] * (arr[i][1] - arr[i][3])) * 0.5\n    if area >= max:\n        max = area\n        ans1 = i\n    if area <= min:\n        min = area\n        ans2 = i\nprint(str(ans2 + 1) + ' ' + str(ans1 + 1))", "n = int(input())\nareas = []\nfor _ in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))\n    areas.append(area)\n(low, high) = (0, 0)\nfor i in range(1, len(areas)):\n    if areas[low] >= areas[i]:\n        low = i\n    if areas[high] <= areas[i]:\n        high = i\nprint(low + 1, high + 1)", "import numpy as np\nn = int(input())\nl = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    det = 0.5 * abs(x1 * (y2 - y3) - y1 * (x2 - x3) + x2 * y3 - y2 * x3)\n    l.append(det)\n(ma, mi) = (l[0], l[0])\n(i_ma, i_mi) = (0, 0)\nfor i in range(len(l)):\n    if l[i] >= ma:\n        i_ma = i + 1\n        ma = l[i]\n    if l[i] <= mi:\n        i_mi = i + 1\n        mi = l[i]\nprint(i_mi, i_ma)", "n = int(input())\nareas = []\nfor _ in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))\n    areas.append(area)\n(low, high) = (0, 0)\nfor i in range(1, len(areas)):\n    if areas[low] >= areas[i]:\n        low = i\n    if areas[high] <= areas[i]:\n        high = i\nprint(low + 1, high + 1)", "import numpy as np\nn = int(input())\nl = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    det = 0.5 * abs(x1 * (y2 - y3) - y1 * (x2 - x3) + x2 * y3 - y2 * x3)\n    l.append(det)\n(ma, mi) = (l[0], l[0])\n(i_ma, i_mi) = (0, 0)\nfor i in range(len(l)):\n    if l[i] >= ma:\n        i_ma = i + 1\n        ma = l[i]\n    if l[i] <= mi:\n        i_mi = i + 1\n        mi = l[i]\nprint(i_mi, i_ma)", "n = int(input())\nareas = []\nfor _ in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))\n    areas.append(area)\n(low, high) = (0, 0)\nfor i in range(1, len(areas)):\n    if areas[low] >= areas[i]:\n        low = i\n    if areas[high] <= areas[i]:\n        high = i\nprint(low + 1, high + 1)", "n = int(input())\nareas = []\nfor _ in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))\n    areas.append(area)\n(low, high) = (0, 0)\nfor i in range(1, len(areas)):\n    if areas[low] >= areas[i]:\n        low = i\n    if areas[high] <= areas[i]:\n        high = i\nprint(low + 1, high + 1)", "n = int(input())\nmx = -float('inf')\nmn = float('inf')\nmnind = 0\nmxind = 0\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = 0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))\n    area = abs(area)\n    if area <= mn:\n        mn = area\n        mnind = i + 1\n    if area >= mx:\n        mx = area\n        mxind = i + 1\nprint(mnind, mxind)", "l = []\nfor t in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split(' '))\n    d = int(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))\n    a = max(d, -d) / 2\n    l.append(a)\nl.reverse()\nr = t - l.index(max(l)) + 1\ns = t - l.index(min(l)) + 1\nprint(s, r)", "l = []\nfor t in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split(' '))\n    d = int(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))\n    a = max(d, -d) / 2\n    l.append(a)\nl.reverse()\nr = t - l.index(max(l)) + 1\ns = t - l.index(min(l)) + 1\nprint(s, r)", "n = int(input())\nmin_a = 1000000000.0\nmin_i = 1\nmax_a = -1.0\nmax_i = 1\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0\n    if area <= min_a:\n        min_a = area\n        min_i = i + 1\n    if area >= max_a:\n        max_a = area\n        max_i = i + 1\nprint(min_i, max_i)", "n = int(input())\n(areamin, areamax) = (1e+20, 0)\n(indexmin, indexmax) = (1e+20, 0)\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area_est = 0.5 * abs(x1 * (y2 - y3) - y1 * (x2 - x3) + x2 * y3 - y2 * x3)\n    if area_est >= areamax:\n        areamax = area_est\n        indexmax = i + 1\n    if area_est <= areamin:\n        areamin = area_est\n        indexmin = i + 1\nprint(indexmin, indexmax)", "import numpy as np\nn = int(input())\nl = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    det = 0.5 * abs(x1 * (y2 - y3) - y1 * (x2 - x3) + x2 * y3 - y2 * x3)\n    l.append(det)\n(ma, mi) = (l[0], l[0])\n(i_ma, i_mi) = (0, 0)\nfor i in range(len(l)):\n    if l[i] >= ma:\n        i_ma = i + 1\n        ma = l[i]\n    if l[i] <= mi:\n        i_mi = i + 1\n        mi = l[i]\nprint(i_mi, i_ma)", "def calculate_area(coordinates):\n    area = []\n    for (x1, y1, x2, y2, x3, y3) in coordinates:\n        a = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)\n        b = ((x3 - x2) ** 2 + (y3 - y2) ** 2) ** (1 / 2)\n        c = ((x3 - x1) ** 2 + (y3 - y1) ** 2) ** (1 / 2)\n        s = (a + b + c) / 2\n        ar = (s * (s - a) * (s - b) * (s - c)) ** (1 / 2)\n        area.append(ar)\n    for (i, item) in enumerate(area):\n        if item == min(area):\n            minindex = i + 1\n        if item == max(area):\n            maxindex = i + 1\n    return f'{minindex} {maxindex}'\nl = []\nfor _ in range(int(input())):\n    l.append(list(map(int, input().split())))\nprint(calculate_area(l))", "def calculate_area(coordinates):\n    area = []\n    for (x1, y1, x2, y2, x3, y3) in coordinates:\n        a = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)\n        b = ((x3 - x2) ** 2 + (y3 - y2) ** 2) ** (1 / 2)\n        c = ((x3 - x1) ** 2 + (y3 - y1) ** 2) ** (1 / 2)\n        s = (a + b + c) / 2\n        ar = (s * (s - a) * (s - b) * (s - c)) ** (1 / 2)\n        area.append(ar)\n    for (i, item) in enumerate(area):\n        if item == min(area):\n            minindex = i + 1\n        if item == max(area):\n            maxindex = i + 1\n    return f'{minindex} {maxindex}'\nl = []\nfor _ in range(int(input())):\n    l.append(list(map(int, input().split())))\nprint(calculate_area(l))", "import numpy as np\nn = int(input())\nl = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    det = 0.5 * abs(x1 * (y2 - y3) - y1 * (x2 - x3) + x2 * y3 - y2 * x3)\n    l.append(det)\n(ma, mi) = (l[0], l[0])\n(i_ma, i_mi) = (0, 0)\nfor i in range(len(l)):\n    if l[i] >= ma:\n        i_ma = i + 1\n        ma = l[i]\n    if l[i] <= mi:\n        i_mi = i + 1\n        mi = l[i]\nprint(i_mi, i_ma)", "import numpy as np\nn = int(input())\nl = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    det = 0.5 * abs(x1 * (y2 - y3) - y1 * (x2 - x3) + x2 * y3 - y2 * x3)\n    l.append(det)\n(ma, mi) = (l[0], l[0])\n(i_ma, i_mi) = (0, 0)\nfor i in range(len(l)):\n    if l[i] >= ma:\n        i_ma = i + 1\n        ma = l[i]\n    if l[i] <= mi:\n        i_mi = i + 1\n        mi = l[i]\nprint(i_mi, i_ma)", "import numpy as np\nn = int(input())\nl = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    det = 0.5 * abs(x1 * (y2 - y3) - y1 * (x2 - x3) + x2 * y3 - y2 * x3)\n    l.append(det)\n(ma, mi) = (l[0], l[0])\n(i_ma, i_mi) = (0, 0)\nfor i in range(len(l)):\n    if l[i] >= ma:\n        i_ma = i + 1\n        ma = l[i]\n    if l[i] <= mi:\n        i_mi = i + 1\n        mi = l[i]\nprint(i_mi, i_ma)", "n = int(input())\nl = []\nfor _ in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))\n    l.append(area)\nl.reverse()\nprint(n - l.index(min(l)), n - l.index(max(l)))", "T = int(input())\ntr = []\nfor tc in range(T):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().split(' ')))\n    area = abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))\n    tr.append(area)\ntr = tr[::-1]\nprint(T - tr.index(min(tr)), T - tr.index(max(tr)))", "l = []\nN = int(input())\nfor i in range(N):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    Area = 0.5 * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))\n    l.append(Area)\n(a, b) = (l[0], l[0])\n(c, d) = (0, 0)\nfor i in range(len(l)):\n    if l[i] <= a:\n        a = l[i]\n        c = i + 1\n    if l[i] >= b:\n        b = l[i]\n        d = i + 1\nprint(c, d)", "l = []\nN = int(input())\nfor i in range(N):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    Area = 0.5 * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))\n    l.append(Area)\n(a, b) = (l[0], l[0])\n(c, d) = (0, 0)\nfor i in range(len(l)):\n    if l[i] <= a:\n        a = l[i]\n        c = i + 1\n    if l[i] >= b:\n        b = l[i]\n        d = i + 1\nprint(c, d)", "n = int(input())\nans = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    line_1 = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    line_2 = ((x3 - x2) ** 2 + (y3 - y2) ** 2) ** 0.5\n    line_3 = ((x3 - x1) ** 2 + (y3 - y1) ** 2) ** 0.5\n    s = (line_1 + line_2 + line_3) / 2\n    area = (s * (s - line_1) * (s - line_2) * (s - line_3)) ** 0.5\n    ans.append(area)\n(ma, mi) = (ans[0], ans[0])\nval_min = val_max = 0\nfor i in range(len(ans)):\n    if ans[i] >= ma:\n        ma = ans[i]\n        val_max = i + 1\n    if ans[i] <= mi:\n        mi = ans[i]\n        val_min = i + 1\nprint(val_min, val_max)", "N = int(input())\nmx = 0\nmn = float('inf')\nmxi = -1\nmni = -1\nfor n in range(N):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) // 2\n    if a >= mx:\n        mx = a\n        mxi = n + 1\n    if a <= mn:\n        mn = a\n        mni = n + 1\nprint(mni, mxi)", "vishnesh = int(input())\nar = []\nfor vish in range(vishnesh):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().strip().split()))\n    l1 = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n    l2 = ((x1 - x3) ** 2 + (y1 - y3) ** 2) ** 0.5\n    l3 = ((x3 - x2) ** 2 + (y3 - y2) ** 2) ** 0.5\n    s = (l1 + l2 + l3) / 2\n    ar.append((s * (s - l1) * (s - l2) * (s - l3)) ** 0.5)\nmn = min(ar)\nmx = max(ar)\nfor i in range(vishnesh - 1, -1, -1):\n    if mn == ar[i]:\n        l = i\n        break\nfor i in range(vishnesh - 1, -1, -1):\n    if mx == ar[i]:\n        m = i\n        break\nprint(l + 1, m + 1)", "l = []\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) * 0.5\n    l.append(area)\nmi = min(l)\nma = max(l)\nmid = -1\nmad = -1\nfor i in range(len(l)):\n    if mi == l[i]:\n        mid = i + 1\n    if ma == l[i]:\n        mad = i + 1\nprint(mid, mad)", "D = []\nN = int(input())\nfor _ in range(N):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))\n    D.append(area)\nm = max(D)\nn = min(D)\nD = D[::-1]\nprint(N - D.index(n), N - D.index(m))", "D = []\nN = int(input())\nfor _ in range(N):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))\n    D.append(area)\nm = max(D)\nn = min(D)\nD = D[::-1]\nprint(N - D.index(n), N - D.index(m))", "T = int(input())\ntr = []\nfor tc in range(T):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().split(' ')))\n    area = abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))\n    tr.append(area)\ntr = tr[::-1]\nprint(T - tr.index(min(tr)), T - tr.index(max(tr)))", "T = int(input())\ntr = []\nfor tc in range(T):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().split(' ')))\n    area = abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))\n    tr.append(area)\ntr = tr[::-1]\nprint(T - tr.index(min(tr)), T - tr.index(max(tr)))", "def area(x1, y1, x2, y2, x3, y3):\n    d = x1 * (y2 - y3) - y1 * (x2 - x3) + (x2 * y3 - x3 * y2)\n    return abs(d)\nn = int(input())\nar = []\nfor i in range(n):\n    [x1, y1, x2, y2, x3, y3] = [int(j) for j in str(input()).split(' ')]\n    d = area(x1, y1, x2, y2, x3, y3)\n    ar.append(d)\nmi = min(ar)\nma = max(ar)\ni = 0\nx = -1\ny = -1\nwhile i < len(ar):\n    if ar[i] == mi:\n        if x < i:\n            x = i\n    if ar[i] == ma:\n        if y < i:\n            y = i\n    i = i + 1\nss = str(x + 1) + ' ' + str(y + 1)\nprint(ss)", "l = []\nn = int(input())\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().split()))\n    area = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))\n    area = area / 2\n    l += [area]\na = l[::-1].index(min(l))\nb = l[::-1].index(max(l))\nprint(n - a, n - b)", "l = []\nn = int(input())\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().split()))\n    area = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))\n    area = area / 2\n    l += [area]\na = l[::-1].index(min(l))\nb = l[::-1].index(max(l))\nprint(n - a, n - b)", "T = int(input())\ntr = []\nfor tc in range(T):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().split(' ')))\n    area = abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))\n    tr.append(area)\ntr = tr[::-1]\nprint(T - tr.index(min(tr)), T - tr.index(max(tr)))", "N = int(input())\nA = []\nfor i in range(N):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)\n    A.append(abs(area))\nA = A[::-1]\nprint(N - A.index(min(A)), N - A.index(max(A)))", "T = int(input())\ntr = []\nfor tc in range(T):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().split(' ')))\n    area = abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))\n    tr.append(area)\ntr = tr[::-1]\nprint(T - tr.index(min(tr)), T - tr.index(max(tr)))", "T = int(input())\ntr = []\nfor tc in range(T):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().split(' ')))\n    area = abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))\n    tr.append(area)\ntr = tr[::-1]\nprint(T - tr.index(min(tr)), T - tr.index(max(tr)))", "n = input()\nmn = 99999999\nmx = -999999\nmn_i = 0\nmx_i = 0\nfor i in range(int(n)):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    ans = abs(x1 * y2 + x2 * y3 + x3 * y1 - (x1 * y3 + x2 * y1 + x3 * y2))\n    if mx <= ans:\n        mx = ans\n        mx_i = i + 1\n    if mn >= ans:\n        mn = ans\n        mn_i = i + 1\nprint(mn_i, ' ', mx_i)", "t = int(input())\nmn = 99999999\nmx = -999999\nmn_i = 0\nmx_i = 0\nfor i in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    ans = abs(x1 * y2 + x2 * y3 + x3 * y1 - (x1 * y3 + x2 * y1 + x3 * y2))\n    if mx <= ans:\n        mx = ans\n        mx_i = i + 1\n    if mn >= ans:\n        mn = ans\n        mn_i = i + 1\nprint(mn_i, ' ', mx_i)", "triangles = int(input())\narea_arr = []\nfor i in range(triangles):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    area_arr.append(area)\narea_arr = area_arr[::-1]\nmin_index = area_arr.index(min(area_arr))\nmax_index = area_arr.index(max(area_arr))\nprint(triangles - min_index, triangles - max_index)", "n = int(input())\nl = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    z = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))\n    z = z / 2\n    l += [z]\na = l[::-1].index(min(l))\nb = l[::-1].index(max(l))\nprint(n - a, n - b)", "n = int(input())\nli = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    li.append(area)\nmax1 = max(li)\nmin1 = min(li)\nli = li[::-1]\nind1 = li.index(max1)\nind2 = li.index(min1)\nprint(n - ind2, n - ind1)", "n = int(input())\nli = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    li.append(area)\nmax1 = max(li)\nmin1 = min(li)\nli = li[::-1]\nind1 = li.index(max1)\nind2 = li.index(min1)\nprint(n - ind2, n - ind1)", "import math\n(ma, mi) = (0, math.inf)\n(a1, b1) = (0, 0)\nfor i in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    ar = abs((x1 * y2 + x2 * y3 + x3 * y1 - y1 * x2 - y2 * x3 - y3 * x1) / 2)\n    if ar >= ma:\n        ma = ar\n        a1 = i + 1\n    if ar <= mi:\n        mi = ar\n        b1 = i + 1\nprint(b1, a1)", "import math\n(ma, mi) = (0, math.inf)\n(a1, b) = (0, 0)\nfor i in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = abs((x1 * y2 + x2 * y3 + x3 * y1 - y1 * x2 - y2 * x3 - y3 * x1) / 2)\n    if a >= ma:\n        ma = a\n        a1 = i + 1\n    if a <= mi:\n        mi = a\n        b = i + 1\nprint(b, a1)", "l = []\nfor _ in range(int(input())):\n    (a1, b1, a2, b2, a3, b3) = map(int, input().split())\n    l.append(0.5 * abs(a1 * (b2 - b3) + a2 * (b3 - b1) + a3 * (b1 - b2)))\nprint(len(l) - l[::-1].index(min(l)), len(l) - l[::-1].index(max(l)))", "l = []\nfor _ in range(int(input())):\n    (a1, b1, a2, b2, a3, b3) = map(int, input().split())\n    l.append(0.5 * abs(a1 * (b2 - b3) + a2 * (b3 - b1) + a3 * (b1 - b2)))\nprint(len(l) - l[::-1].index(min(l)), len(l) - l[::-1].index(max(l)))", "l = []\nfor _ in range(int(input())):\n    (a1, b1, a2, b2, a3, b3) = map(int, input().split())\n    l.append(0.5 * abs(a1 * (b2 - b3) + a2 * (b3 - b1) + a3 * (b1 - b2)))\nprint(len(l) - l[::-1].index(min(l)), len(l) - l[::-1].index(max(l)))", "n = int(input())\n(x1, y1, x2, y2, x3, y3) = map(int, input().split())\narea = abs(x1 * y2 + x2 * y3 + x3 * y1 - x2 * y1 - x3 * y2 - x1 * y3)\nareamax = area\nareamin = area\nminimum = 1\nmaximum = 1\nfor i in range(n - 1):\n    (x4, y4, x5, y5, x6, y6) = map(int, input().split())\n    area2 = abs(x4 * y5 + x5 * y6 + x6 * y4 - x5 * y4 - x6 * y5 - x4 * y6)\n    if area2 >= areamax:\n        maximum = i + 2\n        areamax = area2\n    if area2 <= areamin:\n        minimum = i + 2\n        areamin = area2\nprint(minimum, maximum)", "l = []\nfor _ in range(int(input())):\n    (a1, b1, a2, b2, a3, b3) = map(int, input().split())\n    l.append(0.5 * abs(a1 * (b2 - b3) + a2 * (b3 - b1) + a3 * (b1 - b2)))\nprint(len(l) - l[::-1].index(min(l)), len(l) - l[::-1].index(max(l)))", "l = []\nfor _ in range(int(input())):\n    (a1, b1, a2, b2, a3, b3) = map(int, input().split())\n    l.append(0.5 * abs(a1 * (b2 - b3) + a2 * (b3 - b1) + a3 * (b1 - b2)))\nprint(len(l) - l[::-1].index(min(l)), len(l) - l[::-1].index(max(l)))", "from math import sqrt\ninf = 10 ** 9\n\ndef dist(m, n):\n    return sqrt(abs(m[0] - n[0]) ** 2 + abs(m[1] - n[1]) ** 2)\n\nclass Triangle:\n\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def area(self):\n        side_a = dist(self.a, self.b)\n        side_b = dist(self.b, self.c)\n        side_c = dist(self.a, self.c)\n        s = (side_a + side_b + side_c) / 2\n        return sqrt(s * (s - side_a) * (s - side_b) * (s - side_c))\n\ndef solve(*args):\n    (n, triangles) = args\n    (smallest, largest) = (inf, -inf)\n    ans = [0, 0]\n    for t in triangles:\n        t_area = t[0].area()\n        if t_area <= smallest:\n            smallest = t_area\n            ans[0] = t[1] + 1\n        if t_area >= largest:\n            largest = t_area\n            ans[1] = t[1] + 1\n    return ans\n\ndef do_codechef():\n    n = int(input())\n    t = list()\n    for _ in range(n):\n        a = list(map(int, input().split(' ')))\n        t.append(Triangle(*[x for x in zip(a[::2], a[1::2])]))\n    print(*solve(n, [(m, l) for (l, m) in enumerate(t)]))\ndo_codechef()\nexit()", "from math import sqrt\ninf = 10 ** 9\n\ndef dist(m, n):\n    return sqrt(abs(m[0] - n[0]) ** 2 + abs(m[1] - n[1]) ** 2)\n\nclass Triangle:\n\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def area(self):\n        side_a = dist(self.a, self.b)\n        side_b = dist(self.b, self.c)\n        side_c = dist(self.a, self.c)\n        s = (side_a + side_b + side_c) / 2\n        return sqrt(s * (s - side_a) * (s - side_b) * (s - side_c))\n\ndef solve(*args):\n    (n, triangles) = args\n    (smallest, largest) = (inf, -inf)\n    ans = [0, 0]\n    for t in triangles:\n        t_area = t[0].area()\n        if t_area <= smallest:\n            smallest = t_area\n            ans[0] = t[1] + 1\n        if t_area >= largest:\n            largest = t_area\n            ans[1] = t[1] + 1\n    return ans\n\ndef do_codechef():\n    n = int(input())\n    t = list()\n    for _ in range(n):\n        a = list(map(int, input().split(' ')))\n        t.append(Triangle(*[x for x in zip(a[::2], a[1::2])]))\n    print(*solve(n, [(m, l) for (l, m) in enumerate(t)]))\ndo_codechef()\nexit()", "from math import sqrt\ninf = 10 ** 9\n\ndef dist(m, n):\n    return sqrt(abs(m[0] - n[0]) ** 2 + abs(m[1] - n[1]) ** 2)\n\nclass Triangle:\n\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def area(self):\n        side_a = dist(self.a, self.b)\n        side_b = dist(self.b, self.c)\n        side_c = dist(self.a, self.c)\n        s = (side_a + side_b + side_c) / 2\n        return sqrt(s * (s - side_a) * (s - side_b) * (s - side_c))\n\ndef solve(*args):\n    (n, triangles) = args\n    (smallest, largest) = (inf, -inf)\n    ans = [0, 0]\n    for t in triangles:\n        t_area = t[0].area()\n        if t_area <= smallest:\n            smallest = t_area\n            ans[0] = t[1] + 1\n        if t_area >= largest:\n            largest = t_area\n            ans[1] = t[1] + 1\n    return ans\n\ndef do_codechef():\n    n = int(input())\n    t = list()\n    for _ in range(n):\n        a = list(map(int, input().split(' ')))\n        t.append(Triangle(*[x for x in zip(a[::2], a[1::2])]))\n    print(*solve(n, [(m, l) for (l, m) in enumerate(t)]))\ndo_codechef()\nexit()", "from math import sqrt\ninf = 10 ** 9\n\ndef dist(m, n):\n    return sqrt(abs(m[0] - n[0]) ** 2 + abs(m[1] - n[1]) ** 2)\n\nclass Triangle:\n\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def area(self):\n        side_a = dist(self.a, self.b)\n        side_b = dist(self.b, self.c)\n        side_c = dist(self.a, self.c)\n        s = (side_a + side_b + side_c) / 2\n        return sqrt(s * (s - side_a) * (s - side_b) * (s - side_c))\n\ndef solve(*args):\n    (n, triangles) = args\n    (smallest, largest) = (inf, -inf)\n    ans = [0, 0]\n    for t in triangles:\n        t_area = t[0].area()\n        if t_area <= smallest:\n            smallest = t_area\n            ans[0] = t[1] + 1\n        if t_area >= largest:\n            largest = t_area\n            ans[1] = t[1] + 1\n    return ans\n\ndef do_codechef():\n    n = int(input())\n    t = list()\n    for _ in range(n):\n        a = list(map(int, input().split(' ')))\n        t.append(Triangle(*[x for x in zip(a[::2], a[1::2])]))\n    print(*solve(n, [(m, l) for (l, m) in enumerate(t)]))\ndo_codechef()\nexit()", "from math import sqrt\ninf = 10 ** 9\n\ndef dist(m, n):\n    return sqrt(abs(m[0] - n[0]) ** 2 + abs(m[1] - n[1]) ** 2)\n\nclass Triangle:\n\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def area(self):\n        side_a = dist(self.a, self.b)\n        side_b = dist(self.b, self.c)\n        side_c = dist(self.a, self.c)\n        s = (side_a + side_b + side_c) / 2\n        return sqrt(s * (s - side_a) * (s - side_b) * (s - side_c))\n\ndef solve(*args):\n    (n, triangles) = args\n    (smallest, largest) = (inf, -inf)\n    ans = [0, 0]\n    for t in triangles:\n        t_area = t[0].area()\n        if t_area <= smallest:\n            smallest = t_area\n            ans[0] = t[1] + 1\n        if t_area >= largest:\n            largest = t_area\n            ans[1] = t[1] + 1\n    return ans\n\ndef do_codechef():\n    n = int(input())\n    t = list()\n    for _ in range(n):\n        a = list(map(int, input().split(' ')))\n        t.append(Triangle(*[x for x in zip(a[::2], a[1::2])]))\n    print(*solve(n, [(m, l) for (l, m) in enumerate(t)]))\ndo_codechef()\nexit()", "l = []\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    l.append(abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))))\nl = l[::-1]\nprint(len(l) - l.index(min(l)), end=' ')\nprint(len(l) - l.index(max(l)))", "l = []\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    l.append(abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))))\nl = l[::-1]\nprint(len(l) - l.index(min(l)), end=' ')\nprint(len(l) - l.index(max(l)))", "l = []\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    l.append(abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))))\nl = l[::-1]\nprint(len(l) - l.index(min(l)), end=' ')\nprint(len(l) - l.index(max(l)))", "l = []\nn = int(input())\nfor _ in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    l.append(abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) * 0.5))\nl = l[::-1]\nprint(n - l.index(min(l)), end=' ')\nprint(n - l.index(max(l)))", "l = []\nn = int(input())\nfor _ in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    l.append(abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) * 0.5))\nl = l[::-1]\nprint(n - l.index(min(l)), end=' ')\nprint(n - l.index(max(l)))", "try:\n    n = int(input())\n    result = []\n    for i in range(n):\n        co = list(map(int, input().split()))\n        (x1, y1, x2, y2, x3, y3) = (co[0], co[1], co[2], co[3], co[4], co[5])\n        a = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n        result.append(a)\n    result.reverse()\n    print(n - result.index(min(result)), n - result.index(max(result)))\nexcept:\n    pass", "try:\n    n = int(input())\n    result = []\n    for i in range(n):\n        co = list(map(int, input().split()))\n        (x1, y1, x2, y2, x3, y3) = (co[0], co[1], co[2], co[3], co[4], co[5])\n        a = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n        result.append(a)\n    result.reverse()\n    p = result.index(min(result))\n    q = result.index(max(result))\n    print(n - p, n - q)\nexcept:\n    pass", "try:\n    n = int(input())\n    y = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        z = abs(a[0] * (a[3] - a[5]) + a[2] * (a[5] - a[1]) + a[4] * (a[1] - a[3])) / 2\n        y.append(z)\n    y.reverse()\n    s = y.index(max(y))\n    t = y.index(min(y))\n    print(n - t, n - s)\nexcept:\n    pass", "mi = 10000000\nma = 0\nmni = 0\nmai = 0\nfor i in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n    b = ((x3 - x2) ** 2 + (y3 - y2) ** 2) ** 0.5\n    c = ((x1 - x3) ** 2 + (y1 - y3) ** 2) ** 0.5\n    s = (a + b + c) / 2\n    s = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if s <= mi:\n        mi = s\n        mni = i + 1\n    if s >= ma:\n        ma = s\n        mai = i + 1\nprint(mni, mai, end=' ')", "import math\nmx = 0\nmn = 10000000\nmni = 0\nmxi = 0\nn = int(input())\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = (int(o) for o in input().split())\n    d1 = math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n    d2 = math.sqrt((x2 - x3) ** 2 + (y2 - y3) ** 2)\n    d3 = math.sqrt((x3 - x1) ** 2 + (y3 - y1) ** 2)\n    s = (d1 + d2 + d3) / 2\n    a = math.sqrt(s * (s - d1) * (s - d2) * (s - d3))\n    if a >= mx:\n        mx = a\n        mxi = i\n    if a <= mn:\n        mn = a\n        mni = i\nmxi += 1\nmni += 1\nprint(mni, mxi, sep=' ')", "def area(l):\n    ar = l[0] * (l[3] - l[5]) + l[2] * (l[5] - l[1]) + l[4] * (l[1] - l[3])\n    ar = ar / 2\n    return abs(ar)\narray = []\nfor _ in range(int(input())):\n    s = input().split(' ')\n    l = [int(i) for i in s]\n    tmp = area(l)\n    array.append(tmp)\nmin_index = 0\nmax_index = 0\nfor i in range(len(array)):\n    if array[max_index] <= array[i]:\n        max_index = i\n    if array[min_index] >= array[i]:\n        min_index = i\ni1 = min_index + 1\ni2 = max_index + 1\nprint(*[i1, i2])", "(m, mm) = (0, 1000000000000000)\n(x, y) = (0, 0)\nn = int(input())\nfor i in range(n):\n    l = list(map(int, input().split()))\n    s = abs(l[0] * (l[3] - l[5]) + l[2] * (l[5] - l[1]) + l[4] * (l[1] - l[3])) / 2\n    if s >= m:\n        m = s\n        x = i + 1\n    if s <= mm:\n        mm = s\n        y = i + 1\nprint(y, x)", "ma = 0\nmi = 1000000000000000000\nmaxi = 0\nmini = 0\nfor _ in range(int(input())):\n    (a1, a2, b1, b2, c1, c2) = map(int, input().split())\n    area = abs(a1 * (b2 - c2) + b1 * (c2 - a2) + c1 * (a2 - b2)) / 2\n    if area >= ma:\n        maxi = _ + 1\n        ma = area\n    if area <= mi:\n        mini = _ + 1\n        mi = area\nprint(mini, maxi)", "import math\nans_min = math.inf\nin_min = -1\nans_max = -1\nin_max = -1\nfor i in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d_1 = math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n    d_2 = math.sqrt((x1 - x3) ** 2 + (y1 - y3) ** 2)\n    d_3 = math.sqrt((x2 - x3) ** 2 + (y2 - y3) ** 2)\n    s = (d_1 + d_2 + d_3) / 2\n    dis = math.sqrt(s * (s - d_1) * (s - d_2) * (s - d_3))\n    if dis <= ans_min:\n        ans_min = dis\n        in_min = i\n    if dis >= ans_max:\n        ans_max = dis\n        in_max = i\nin_min += 1\nin_max += 1\nprint(in_min, in_max, sep=' ')", "def area(x):\n    a1 = x[0] * (x[3] - x[5])\n    a2 = x[2] * (x[5] - x[1])\n    a3 = x[4] * (x[1] - x[3])\n    return abs(a1 + a2 + a3)\nma = 0\nmi = 10 ** 9\nt = 0\nz = 0\nfor u in range(int(input())):\n    x = [int(w) for w in input().split()]\n    a = area(x)\n    if a >= ma:\n        t = u\n        ma = a\n    if a <= mi:\n        z = u\n        mi = a\nprint(z + 1, t + 1)", "def area(x):\n    a1 = x[0] * (x[3] - x[5])\n    a2 = x[2] * (x[5] - x[1])\n    a3 = x[4] * (x[1] - x[3])\n    return abs(a1 + a2 + a3)\nma = 0\nmi = 10 ** 9\nt = 0\nz = 0\nfor u in range(int(input())):\n    x = [int(w) for w in input().split()]\n    a = area(x)\n    if a >= ma:\n        t = u\n        ma = a\n    if a <= mi:\n        z = u\n        mi = a\nprint(z + 1, t + 1)", "n = int(input())\nx = 0\ny = 99999999\nans = an = 0\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))\n    if area >= x:\n        x = area\n        ans = i + 1\n    if area <= y:\n        y = area\n        an = i + 1\nprint(an, ans)", "try:\n\n    def area():\n        n = int(input())\n        b = []\n        for i in range(n):\n            (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n            m = abs(0.5 * ((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)))\n            b.append(m)\n        p = [i for (i, j) in enumerate(b) if j == max(b)]\n        q = [i for (i, j) in enumerate(b) if j == min(b)]\n        print(q[-1] + 1, p[-1] + 1)\n    area()\nexcept:\n    pass", "max = 0\nmin = 999999999\nrealmax = 1\nrealmin = 1\nn = int(input())\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = abs(1 / 2 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))\n    if max <= area:\n        max = area\n        realmax = i + 1\n    if min >= area:\n        min = area\n        realmin = i + 1\nprint(realmin, realmax, end=' ')", "max = 0\nmin = 999999999\nrealmax = 1\nrealmin = 1\nn = int(input())\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = abs(1 / 2 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))\n    if max <= area:\n        max = area\n        realmax = i + 1\n    if min >= area:\n        min = area\n        realmin = i + 1\nprint(realmin, realmax, end=' ')", "max = 0\nmin = 999999999\nrealmax = 1\nrealmin = 1\nn = int(input())\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    area = abs(1 / 2 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))\n    if max <= area:\n        max = area\n        realmax = i + 1\n    if min >= area:\n        min = area\n        realmin = i + 1\nprint(realmin, realmax, end=' ')", "n = int(input())\nz = []\nfor i in range(n):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a = abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    z.append(a)\n(x, y) = ([], [])\ne = max(z)\nf = min(z)\nfor i in range(len(z)):\n    if z[i] == e:\n        x.append(i + 1)\n    if z[i] == f:\n        y.append(i + 1)\nprint(y[-1], x[-1])", "N = int(input())\nt = []\n(min1, max1) = (0, 0)\n(min2, max2) = (1, 1)\nfor i in range(N):\n    (x1, y1, x2, y2, x3, y3) = list(map(int, input().split()))\n    s = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n    s = abs(s)\n    t.append(s)\n    if i == 0:\n        (min1, max1) = (s, s)\n    else:\n        if s <= min1:\n            min1 = s\n            min2 = i + 1\n        if s >= max1:\n            max1 = s\n            max2 = i + 1\nprint(min2, max2)", "def area(x1, y1, x2, y2, x3, y3):\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) // 2)\nmax_i = 0\nmin_i = 0\nmx = 0\nmn = float('inf')\nfor i in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    arae = area(x1, y1, x2, y2, x3, y3)\n    if arae >= mx:\n        max_i = i + 1\n        mx = arae\n    if arae <= mn:\n        min_i = i + 1\n        mn = arae\nprint(min_i, max_i)", "n = int(input())\narea = []\n(mn, mx) = (0, 0)\n(indmn, indmx) = (1, 1)\nfor N in range(n):\n    (x1, y1, x2, y2, x3, y3) = [int(x) for x in input().split()]\n    val = x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)\n    val /= 2\n    val = abs(val)\n    area.append(val)\n    if N == 0:\n        (mn, mx) = (val, val)\n    else:\n        if val <= mn:\n            mn = val\n            indmn = N + 1\n        if val >= mx:\n            mx = val\n            indmx = N + 1\nprint(indmn, indmx)"]