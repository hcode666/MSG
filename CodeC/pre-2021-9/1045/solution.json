["def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "def pre(N, S, K):\n    j = 1\n    count1 = count0 = 0\n    if int(S[j - 1]) == 1:\n        count1 += 1\n    else:\n        count0 = 1\n    for i in range(1, N + 1):\n        while j <= N and count1 <= K and (count0 <= K):\n            j += 1\n            if j > N:\n                break\n            if int(S[j - 1]) == 1:\n                count1 += 1\n            else:\n                count0 += 1\n        far[i] = j\n        sumfar[i] = sumfar[i - 1] + far[i]\n        if int(S[i - 1]) == 1:\n            count1 -= 1\n        else:\n            count0 -= 1\n\ndef query(S, L, R):\n    k1 = L - 1\n    k2 = R + 1\n    p = 17\n    while p != 0:\n        km = (k1 + k2) // 2\n        if far[km] <= R:\n            k1 = km\n        else:\n            k2 = km\n        p -= 1\n    k = k1\n    answer = sumfar[k] - sumfar[L - 1] + (R - k) * (R + 1) - (R * (R + 1) // 2 - L * (L - 1) // 2)\n    return answer\nT = int(input(''))\nwhile T != 0:\n    T -= 1\n    A = input(' ').split()\n    N = int(A[0])\n    K = int(A[1])\n    Q = int(A[2])\n    S = input(' ')\n    far = [0] * (N + 1)\n    sumfar = [0] * (N + 1)\n    pre(N, S, K)\n    for i in range(0, Q):\n        B = input(' ').split()\n        L = int(B[0])\n        R = int(B[1])\n        print(query(S, L, R))", "for _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    s = input()\n    far = [0] * (n + 1)\n    sumfar = [0] * (n + 1)\n    (j, count0, count1) = (1, 0, 0)\n    if s[j - 1] == '1':\n        count1 += 1\n    else:\n        count0 += 1\n    for i in range(1, n + 1):\n        while j <= n and count0 <= k and (count1 <= k):\n            j += 1\n            if j > n:\n                break\n            if s[j - 1] == '1':\n                count1 += 1\n            else:\n                count0 += 1\n        far[i] = j\n        if s[i - 1] == '1':\n            count1 -= 1\n        else:\n            count0 -= 1\n    for i in range(1, n + 1):\n        sumfar[i] = sumfar[i - 1] + far[i]\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        low = l - 1\n        high = r + 1\n        while high - low > 1:\n            mid = (high + low) // 2\n            if far[mid] <= r:\n                low = mid\n            else:\n                high = mid\n        k = low\n        print(sumfar[k] - sumfar[l - 1] + (r - k) * (r + 1) - (r * (r + 1) // 2 - l * (l - 1) // 2))", "for _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    s = input()\n    far = [0] * (n + 1)\n    sumfar = [0] * (n + 1)\n    (j, count0, count1) = (1, 0, 0)\n    if s[j - 1] == '1':\n        count1 += 1\n    else:\n        count0 += 1\n    for i in range(1, n + 1):\n        while j <= n and count0 <= k and (count1 <= k):\n            j += 1\n            if j > n:\n                break\n            if s[j - 1] == '1':\n                count1 += 1\n            else:\n                count0 += 1\n        far[i] = j\n        if s[i - 1] == '1':\n            count1 -= 1\n        else:\n            count0 -= 1\n    for i in range(1, n + 1):\n        sumfar[i] = sumfar[i - 1] + far[i]\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        low = l - 1\n        high = r + 1\n        while high - low > 1:\n            mid = (high + low) // 2\n            if far[mid] <= r:\n                low = mid\n            else:\n                high = mid\n        k = low\n        print(sumfar[k] - sumfar[l - 1] + (r - k) * (r + 1) - (r * (r + 1) // 2 - l * (l - 1) // 2))", "def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "def solve(l, r):\n    (L, R) = (l, r)\n    ans = R\n    while l <= r:\n        m = l + (r - l) // 2\n        if m == 0:\n            cZero = nZero[R]\n            cOne = nOne[R]\n        else:\n            cZero = nZero[R] - nZero[m - 1]\n            cOne = nOne[R] - nOne[m - 1]\n        if cOne <= k and cZero <= k:\n            ans = m\n            r = m - 1\n        else:\n            l = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = l + (r - l) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    bString = input()\n    nZero = [0] * n\n    nOne = [0] * n\n    for i in range(n):\n        if i == 0:\n            nZero[0] = int('0' == bString[i])\n            nOne[0] = int('1' == bString[i])\n        else:\n            nZero[i] = nZero[i - 1] + int('0' == bString[i])\n            nOne[i] = nOne[i - 1] + int('1' == bString[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        index = solved(l, r)\n        val = index - l + 1\n        fa = reans[r] - reans[index] + val * (val + 1) // 2\n        print(fa)", "def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "def solve(s, e):\n    (S, E) = (s, e)\n    ans = E\n    while s <= e:\n        m = (s + e) // 2\n        if m == 0:\n            c_z = n_z[E]\n            c_o = n_o[E]\n        else:\n            c_z = n_z[E] - n_z[m - 1]\n            c_o = n_o[E] - n_o[m - 1]\n        if c_z <= k and c_o <= k:\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    return ans\n\ndef solved(l, r):\n    (L, R) = (l, r)\n    ans = L\n    while l <= r:\n        m = (l + r) // 2\n        if re[m] <= L:\n            l = m + 1\n            ans = m\n        else:\n            r = m - 1\n    return ans\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "for _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n\n    def solve(s, e):\n        (S, E) = (s, e)\n        ans = E\n        while s <= e:\n            m = (s + e) // 2\n            if m == 0:\n                c_z = n_z[E]\n                c_o = n_o[E]\n            else:\n                c_z = n_z[E] - n_z[m - 1]\n                c_o = n_o[E] - n_o[m - 1]\n            if c_z <= k and c_o <= k:\n                ans = m\n                e = m - 1\n            else:\n                s = m + 1\n        return ans\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n\n    def solved(l, r):\n        (L, R) = (l, r)\n        ans = L\n        while l <= r:\n            m = (l + r) // 2\n            if re[m] <= L:\n                l = m + 1\n                ans = m\n            else:\n                r = m - 1\n        return ans\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        fa = reans[r] - reans[ind]\n        val = ind - l + 1\n        fa += val * (val + 1) // 2\n        print(fa)", "for _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    string = input()\n    n_z = [0] * n\n    n_o = [0] * n\n    for i in range(n):\n        if i == 0:\n            n_z[0] = int('0' == string[i])\n            n_o[0] = int('1' == string[i])\n        else:\n            n_z[i] = n_z[i - 1] + int('0' == string[i])\n            n_o[i] = n_o[i - 1] + int('1' == string[i])\n\n    def solve(s, e):\n        (S, E) = (s, e)\n        ans = E\n        while s <= e:\n            m = (s + e) // 2\n            if m == 0:\n                c_z = n_z[E]\n                c_o = n_o[E]\n            else:\n                c_z = n_z[E] - n_z[m - 1]\n                c_o = n_o[E] - n_o[m - 1]\n            if c_z <= k and c_o <= k:\n                ans = m\n                e = m - 1\n            else:\n                s = m + 1\n        return ans\n    ans = [0] * n\n    re = [0] * n\n    for i in range(n):\n        temp = solve(0, i)\n        re[i] = temp\n        ans[i] = i - temp + 1\n    reans = [ans[0]]\n    for i in range(1, n):\n        temp = ans[i] + reans[i - 1]\n        reans.append(temp)\n\n    def solved(l, r):\n        (L, R) = (l, r)\n        ans = L\n        while l <= r:\n            m = (l + r) // 2\n            if max(re[m], L) == L:\n                l = m + 1\n                ans = m\n            else:\n                r = m - 1\n        return ans\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind = solved(l, r)\n        ans = reans[r] - reans[ind]\n        val = ind - l + 1\n        ans += val * (val + 1) // 2\n        print(ans)", "def check_cond(mid, H, K, tot_1, tot_0):\n    if mid != 0 and tot_0[H] - tot_0[mid - 1] <= K and (tot_1[H] - tot_1[mid - 1] <= K):\n        return True\n    if mid == 0 and tot_0[H] <= K and (tot_1[H] <= K):\n        return True\n    return False\n\ndef find_index(tot_0, tot_1, L, H, K):\n    (l, h) = (L, H)\n    ans = H\n    while l <= h:\n        mid = (l + h) // 2\n        if check_cond(mid, H, K, tot_1, tot_0):\n            ans = mid\n            h = mid - 1\n        else:\n            l = mid + 1\n    return ans\n\ndef find_ind(res, L, R):\n    (l, h) = (L, R)\n    ans = L\n    while l <= h:\n        mid = (l + h) // 2\n        if max(L, mid - res[mid] + 1) == L:\n            ans = mid\n            l = mid + 1\n        else:\n            h = mid - 1\n    return ans\nfor _ in range(int(input())):\n    (N, K, Q) = map(int, input().split())\n    S = input()\n    tot_0 = [0 for _ in range(N)]\n    tot_1 = [0 for _ in range(N)]\n    for i in range(N):\n        if i == 0:\n            if S[i] == '0':\n                tot_0[i] += 1\n            else:\n                tot_1[i] += 1\n        elif S[i] == '0':\n            tot_0[i] = tot_0[i - 1] + 1\n            tot_1[i] = tot_1[i - 1]\n        else:\n            tot_1[i] = tot_1[i - 1] + 1\n            tot_0[i] = tot_0[i - 1]\n    res = [0 for _ in range(N)]\n    res[0] = 1\n    for j in range(1, N):\n        ind = find_index(tot_0, tot_1, 0, j, K)\n        ans = j - ind + 1\n        res[j] = ans\n    re = [res[0]]\n    tot = res[0]\n    for i in range(1, N):\n        tot += res[i]\n        re.append(tot)\n    for j in range(Q):\n        (L, R) = map(int, input().split())\n        (L, R) = (L - 1, R - 1)\n        ind = find_ind(res, L, R)\n        count = (ind - L + 1) * (L + ind) // 2 - (L - 1) * (ind - L + 1)\n        count += re[R] - re[ind]\n        print(count)", "def precompute(s, n, k, far, sumfar):\n    (j, c0, c1) = (1, 0, 0)\n    if s[0] == '0':\n        c0 += 1\n    else:\n        c1 += 1\n    for i in range(1, n + 1):\n        while j <= n and c0 <= k and (c1 <= k):\n            j += 1\n            if j > n:\n                break\n            if s[j - 1] == '1':\n                c1 += 1\n            else:\n                c0 += 1\n        far[i] = j\n        if s[i - 1] == '0':\n            c0 -= 1\n        else:\n            c1 -= 1\n    for i in range(1, n + 1):\n        sumfar[i] = sumfar[i - 1] + far[i]\n\ndef answer_query(l, r):\n    k1 = l - 1\n    k2 = r + 1\n    while k2 - k1 > 1:\n        km = (k1 + k2) // 2\n        if far[km] <= r:\n            k1 = km\n        else:\n            k2 = km\n    k = k1\n    answer = sumfar[k] - sumfar[l - 1] + (r - k) * (r + 1) - (r * (r + 1) // 2 - l * (l - 1) // 2)\n    return answer\nfor i in range(int(input().strip())):\n    (n, k, q) = map(int, input().strip().split())\n    string = input().strip()\n    far = [0 for i in range(n + 1)]\n    sumfar = [0 for i in range(n + 1)]\n    precompute(string, n, k, far, sumfar)\n    for idx in range(q):\n        (l, r) = map(int, input().strip().split())\n        ans = answer_query(l, r)\n        print(ans)", "import sys\ninput = sys.stdin.readline\n\ndef print(x, end='\\n'):\n    sys.stdout.write(str(x) + end)\nt = int(input())\nfor i in range(t):\n    (n, k, q) = tuple(map(int, input().split()))\n    s = input()\n    s_ls = [0 for j in range(n)]\n    for i in range(n):\n        s_ls[i] = int(s[i])\n    far = [0 for o in range(n)]\n    sum_far = [0 for m in range(n)]\n    temp = 0\n    r = 0\n    for z in range(n):\n        while r != n:\n            if temp + s_ls[r] <= k and r - z + 1 - (temp + s_ls[r]) <= k:\n                temp = temp + s_ls[r]\n                r += 1\n            else:\n                break\n        far[z] = r - 1\n        if z != 0:\n            sum_far[z] = sum_far[z - 1] + r - 1\n        else:\n            sum_far[z] = r - 1\n        temp = temp - s_ls[z]\n    for e in range(q):\n        (l, r) = tuple(map(int, input().split()))\n        l = l - 1\n        r = r - 1\n        left = l\n        right = r\n        while left <= right:\n            mid = (left + right) // 2\n            if far[mid] > r:\n                right = mid - 1\n            else:\n                left = mid + 1\n        y = right\n        if y >= l:\n            ans = (r + 1) * (r - y)\n            ans = ans + (r - l + 1) * (-r - l) // 2\n            if l == 0:\n                ans = ans + sum_far[y] + y + 1\n            else:\n                ans = ans + sum_far[y] + y - (l - 1) - sum_far[l - 1]\n        else:\n            ans = (r - l + 1) * (-r - l) // 2 + (r + 1) * (r - l + 1)\n        print(ans)", "import sys\ninput = sys.stdin.readline\n\ndef print(x, end='\\n'):\n    sys.stdout.write(str(x) + end)\nt = int(input())\nfor i in range(t):\n    (n, k, q) = tuple(map(int, input().split()))\n    s = input()\n    s_ls = [0 for j in range(n)]\n    for i in range(n):\n        s_ls[i] = int(s[i])\n    far = [0 for o in range(n)]\n    sum_far = [0 for m in range(n)]\n    temp = 0\n    r = 0\n    for z in range(n):\n        while r != n:\n            if temp + s_ls[r] <= k and r - z + 1 - (temp + s_ls[r]) <= k:\n                temp = temp + s_ls[r]\n                r += 1\n            else:\n                break\n        far[z] = r - 1\n        if z != 0:\n            sum_far[z] = sum_far[z - 1] + r - 1\n        else:\n            sum_far[z] = r - 1\n        temp = temp - s_ls[z]\n    for e in range(q):\n        (l, r) = tuple(map(int, input().split()))\n        l = l - 1\n        r = r - 1\n        left = l\n        right = r\n        while left <= right:\n            mid = (left + right) // 2\n            if far[mid] > r:\n                right = mid - 1\n            else:\n                left = mid + 1\n        y = right\n        if y >= l:\n            ans = (r + 1) * (r - y)\n            ans = ans + (r - l + 1) * (-r - l) // 2\n            if l == 0:\n                ans = ans + sum_far[y] + y + 1\n            else:\n                ans = ans + sum_far[y] + y - (l - 1) - sum_far[l - 1]\n        else:\n            ans = (r - l + 1) * (-r - l) // 2 + (r + 1) * (r - l + 1)\n        print(ans)", "def precompute(strr, n, k, far, sumfar):\n    count = count0 = 0\n    if strr[1] == '1':\n        count += 1\n    else:\n        count0 += 1\n    j = 1\n    for i in range(1, n):\n        while j < n and count <= k and (count0 <= k):\n            j += 1\n            if j >= n:\n                break\n            if strr[j] == '1':\n                count += 1\n            else:\n                count0 += 1\n        far[i] = j\n        if strr[i] == '1':\n            count -= 1\n        else:\n            count0 -= 1\n    sumfar[1] = far[1]\n    for i in range(2, n):\n        sumfar[i] = sumfar[i - 1] + far[i]\n\ndef answerQ(strr, l, r, far, sumfar):\n    answer = 0\n    kl = l - 1\n    kr = r + 1\n    while kr - kl > 1:\n        km = (kl + kr) // 2\n        if far[km] <= r:\n            kl = km\n        else:\n            kr = km\n    k = kl\n    answer = sumfar[k] - sumfar[l - 1] + (r - k) * (r + 1) - (r * (r + 1) // 2 - l * (l - 1) // 2)\n    return answer\nfor _ in range(int(input())):\n    (n, k, q) = list(map(int, input().split()))\n    strr = input()\n    strr = '2' + strr\n    n = len(strr)\n    far = [0] * n\n    sumfar = [0] * n\n    precompute(strr, n, k, far, sumfar)\n    for _ in range(q):\n        (l, r) = list(map(int, input().split()))\n        print(answerQ(strr, l, r, far, sumfar))", "for _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    s = input()\n    cnt = [0] * 2\n    j = 0\n    L = [0] * n\n    R = [0] * n\n    for i in range(n):\n        while j < n and cnt[int(s[j])] + 1 <= k:\n            cnt[int(s[j])] += 1\n            j += 1\n        L[i] = j - 1\n        cnt[int(s[i])] -= 1\n    cnt[0] = 0\n    cnt[1] = 0\n    j = n - 1\n    for i in range(n - 1, -1, -1):\n        while j >= 0 and cnt[int(s[j])] + 1 <= k:\n            cnt[int(s[j])] += 1\n            j -= 1\n        R[i] = j + 1\n        cnt[int(s[i])] -= 1\n    add = [0] * (n + 1)\n    for i in range(n):\n        add[i + 1] = add[i] + L[i]\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        u = R[r] - 1\n        if l <= u:\n            res = add[u + 1] - add[l] + (r - u) * r\n            res -= (l + r - 2) * (r - l + 1) // 2\n        else:\n            res = (r - l + 2) * (r - l + 1) // 2\n        print(res)", "for _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    s = input()\n    far = [0] * (n + 1)\n    sumfar = [0] * (n + 1)\n    (j, count0, count1) = (1, 0, 0)\n    if s[j - 1] == '1':\n        count1 += 1\n    else:\n        count0 += 1\n    for i in range(1, n + 1):\n        while j <= n and count0 <= k and (count1 <= k):\n            j += 1\n            if j > n:\n                break\n            if s[j - 1] == '1':\n                count1 += 1\n            else:\n                count0 += 1\n        far[i] = j\n        if s[i - 1] == '1':\n            count1 -= 1\n        else:\n            count0 -= 1\n    for i in range(1, n + 1):\n        sumfar[i] = sumfar[i - 1] + far[i]\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        low = l - 1\n        high = r + 1\n        while high - low > 1:\n            mid = (high + low) // 2\n            if far[mid] <= r:\n                low = mid\n            else:\n                high = mid\n        k = low\n        print(sumfar[k] - sumfar[l - 1] + (r - k) * (r + 1) - (r * (r + 1) // 2 - l * (l - 1) // 2))", "def ans(l, r):\n    low = l - 1\n    high = r + 1\n    while high - low > 1:\n        mid = (high + low) // 2\n        if far[mid] <= r:\n            low = mid\n        else:\n            high = mid\n    k = low\n    return sumfar[k] - sumfar[l - 1] + (r - k) * (r + 1) - (r * (r + 1) // 2 - l * (l - 1) // 2)\nfor _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    s = input()\n    far = [0] * (n + 1)\n    sumfar = [0] * (n + 1)\n    j = 1\n    count0 = count1 = 0\n    if s[j - 1] == '1':\n        count1 += 1\n    else:\n        count0 += 1\n    for i in range(1, n + 1):\n        while j <= n and count0 <= k and (count1 <= k):\n            j += 1\n            if j > n:\n                break\n            if s[j - 1] == '1':\n                count1 += 1\n            else:\n                count0 += 1\n        far[i] = j\n        sumfar[i] = sumfar[i - 1] + far[i]\n        if s[i - 1] == '1':\n            count1 -= 1\n        else:\n            count0 -= 1\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        print(ans(l, r))", "for _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    s = input()\n    far = [0] * (n + 1)\n    sumfar = [0] * (n + 1)\n    (j, count0, count1) = (1, 0, 0)\n    if s[j - 1] == '1':\n        count1 += 1\n    else:\n        count0 += 1\n    for i in range(1, n + 1):\n        while j <= n and count0 <= k and (count1 <= k):\n            j += 1\n            if j > n:\n                break\n            if s[j - 1] == '1':\n                count1 += 1\n            else:\n                count0 += 1\n        far[i] = j\n        if s[i - 1] == '1':\n            count1 -= 1\n        else:\n            count0 -= 1\n    for i in range(1, n + 1):\n        sumfar[i] = sumfar[i - 1] + far[i]\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        low = l - 1\n        high = r + 1\n        while high - low > 1:\n            mid = (high + low) // 2\n            if far[mid] <= r:\n                low = mid\n            else:\n                high = mid\n        k = low\n        print(sumfar[k] - sumfar[l - 1] + (r - k) * (r + 1) - (r * (r + 1) // 2 - l * (l - 1) // 2))", "t = int(input())\nfor i in range(t):\n    (n, k, q) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input()]\n    temp = [[0 for i in range(4)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        temp[i][0] = arr[i - 1]\n    ptr = 0\n    count_0 = 0\n    count_1 = 0\n    j = 1\n    while j <= n:\n        if temp[j][0] == 0:\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 <= k and count_1 <= k:\n            ptr = j\n        else:\n            if temp[j][0] == 0:\n                count_0 -= 1\n            else:\n                count_1 -= 1\n            break\n        j += 1\n    temp[1][1] = ptr\n    j = 2\n    while j <= n:\n        if temp[j - 1][0] == 0:\n            count_0 -= 1\n        else:\n            count_1 -= 1\n        z = ptr + 1\n        while z <= n:\n            if temp[z][0] == 0:\n                count_0 += 1\n            else:\n                count_1 += 1\n            if count_0 <= k and count_1 <= k:\n                ptr = z\n            else:\n                if temp[z][0] == 0:\n                    count_0 -= 1\n                else:\n                    count_1 -= 1\n                break\n            z += 1\n        temp[j][1] = ptr\n        j += 1\n    for i in range(1, n + 1):\n        temp[i][2] = temp[i - 1][2] + temp[i][1]\n    ptr2 = n\n    for i in range(n, 0, -1):\n        while ptr2 > 0 and temp[ptr2][1] >= i:\n            ptr2 -= 1\n        temp[i][3] = ptr2\n    for i in range(q):\n        (l, r) = [int(i) for i in input().split()]\n        k = temp[r][3]\n        ans = 0\n        if k < l:\n            ans += r * (r - l + 1)\n            ans -= (r - l + 1) * (r + l) // 2\n            ans += r - l + 1\n            print(ans)\n        else:\n            ans += temp[temp[r][3]][2] - temp[l - 1][2]\n            ans -= (temp[r][3] - l + 1) * (temp[r][3] + l) // 2\n            ans += temp[r][3] - l + 1\n            ans += r * (r - temp[r][3])\n            ans -= (r - temp[r][3]) * (temp[r][3] + r + 1) // 2\n            ans += r - temp[r][3]\n            print(ans)", "def check(freq, K, i, j):\n    if i == 0:\n        if freq[j][0] <= K and freq[j][1] <= K:\n            return True\n    elif freq[j][0] - freq[i - 1][0] <= K and freq[j][1] - freq[i - 1][1] <= K:\n        return True\n    return False\n\ndef search(freq, K, low, high):\n    olow = low\n    while low < high:\n        mid = low + (high - low + 1) // 2\n        if check(freq, K, olow, mid) == True:\n            low = mid\n        else:\n            high = mid - 1\n    return low\n\ndef solve(sumfar, lastIndex, a, b):\n    low = a - 1\n    high = b + 1\n    while high - low > 1:\n        mid = low + (high - low) // 2\n        if lastIndex[mid] <= b:\n            low = mid\n        else:\n            high = mid\n    temp = b - low\n    ans = 0\n    if low >= 0:\n        ans += sumfar[low]\n        if a > 0:\n            ans -= sumfar[a - 1]\n    ans += temp * (temp + 1) // 2\n    return ans\nfor _ in range(int(input())):\n    (N, K, Q) = map(int, input().split())\n    freq = [[0, 0] for i in range(N)]\n    arr = list(input())\n    if arr[0] == '0':\n        freq[0] = [1, 0]\n    else:\n        freq[0] = [0, 1]\n    for i in range(1, N):\n        if arr[i] == '0':\n            freq[i][0] = freq[i - 1][0] + 1\n            freq[i][1] = freq[i - 1][1]\n        else:\n            freq[i][0] = freq[i - 1][0]\n            freq[i][1] = freq[i - 1][1] + 1\n    lastIndex = []\n    sumfar = []\n    lastIndex.append(search(freq, K, 0, N - 1))\n    sumfar.append(lastIndex[0] + 1)\n    for i in range(1, N):\n        lastIndex.append(search(freq, K, i, N - 1))\n        sumfar.append(sumfar[i - 1] + lastIndex[i] + 1 - i)\n    for __ in range(Q):\n        (a, b) = map(int, input().split())\n        print(solve(sumfar, lastIndex, a - 1, b - 1))", "def check(freq, K, i, j):\n    if i == 0:\n        if freq[j][0] <= K and freq[j][1] <= K:\n            return True\n    elif freq[j][0] - freq[i - 1][0] <= K and freq[j][1] - freq[i - 1][1] <= K:\n        return True\n    return False\n\ndef search(freq, K, low, high):\n    olow = low\n    while low < high:\n        mid = low + (high - low + 1) // 2\n        if check(freq, K, olow, mid) == True:\n            low = mid\n        else:\n            high = mid - 1\n    return low\n\ndef solve(sumfar, lastIndex, a, b):\n    low = a - 1\n    high = b + 1\n    while high - low > 1:\n        mid = low + (high - low) // 2\n        if lastIndex[mid] <= b:\n            low = mid\n        else:\n            high = mid\n    ans = sumfar[low] - sumfar[a - 1]\n    ans += (b - low) * (b + 1)\n    ans -= b * (b + 1) // 2\n    ans += a * (a - 1) // 2\n    return ans\nfor _ in range(int(input())):\n    (N, K, Q) = map(int, input().split())\n    freq = [[0, 0] for i in range(N)]\n    arr = list(input())\n    if arr[0] == '0':\n        freq[0] = [1, 0]\n    else:\n        freq[0] = [0, 1]\n    for i in range(1, N):\n        if arr[i] == '0':\n            freq[i][0] = freq[i - 1][0] + 1\n            freq[i][1] = freq[i - 1][1]\n        else:\n            freq[i][0] = freq[i - 1][0]\n            freq[i][1] = freq[i - 1][1] + 1\n    lastIndex = []\n    sumfar = []\n    lastIndex.append(0)\n    sumfar.append(0)\n    for i in range(1, N + 1):\n        lastIndex.append(search(freq, K, i - 1, N - 1) + 2)\n        sumfar.append(sumfar[i - 1] + lastIndex[i])\n    for __ in range(Q):\n        (a, b) = map(int, input().split())\n        print(solve(sumfar, lastIndex, a, b))", "def maximum_satisfied_index(s, ep, sp):\n    index = [0]\n    sum_ = [0]\n    sum1 = [0]\n    for j in range(n):\n        sum_.append(sum_[j] + s[j + 1])\n        if s[j + 1] == 0:\n            sum1.append(sum1[j] + 1)\n        else:\n            sum1.append(sum1[j])\n    while ep <= n:\n        if sum_[ep] - sum_[sp - 1] <= k and sum1[ep] - sum1[sp - 1] <= k:\n            index.append(ep - sp)\n            ep += 1\n        else:\n            sp += 1\n    return index\nt = int(input())\nfor i in range(t):\n    (n, k, q) = map(int, input().split())\n    s = [int(i) for i in input()]\n    s1 = s[:]\n    s.insert(0, 0)\n    s1.append(0)\n    ep = 1\n    sp = 1\n    index1 = maximum_satisfied_index(s, ep, sp)\n    index2 = maximum_satisfied_index(s1[::-1], ep, sp)\n    cumsum = [0]\n    for i in range(1, n + 1):\n        cumsum.append(cumsum[i - 1] + index1[i] + 1)\n    for ij in range(q):\n        (l, r) = map(int, input().split())\n        val = index2[n - l + 1] + 1\n        inde = l + val - 1\n        if inde >= r:\n            q = r - l + 1\n            print(int(q * (q + 1) / 2))\n        else:\n            print(int(cumsum[r] - cumsum[inde] + val * (val + 1) / 2))", "for _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    s = input()\n    far = [0] * (n + 1)\n    sumfar = [0] * (n + 1)\n    (j, count0, count1) = (1, 0, 0)\n    if s[j - 1] == '1':\n        count1 += 1\n    else:\n        count0 += 1\n    for i in range(1, n + 1):\n        while j <= n and count0 <= k and (count1 <= k):\n            j += 1\n            if j > n:\n                break\n            if s[j - 1] == '1':\n                count1 += 1\n            else:\n                count0 += 1\n        far[i] = j\n        if s[i - 1] == '1':\n            count1 -= 1\n        else:\n            count0 -= 1\n    for i in range(1, n + 1):\n        sumfar[i] = sumfar[i - 1] + far[i]\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        low = l - 1\n        high = r + 1\n        while high - low > 1:\n            mid = (high + low) // 2\n            if far[mid] <= r:\n                low = mid\n            else:\n                high = mid\n        k = low\n        print(sumfar[k] - sumfar[l - 1] + (r - k) * (r + 1) - (r * (r + 1) // 2 - l * (l - 1) // 2))", "def precompute(s, k, far, sumfar, n):\n    count1 = 0\n    count0 = 0\n    j = 1\n    if s[0] == '0':\n        count0 += 1\n    if s[0] == '1':\n        count1 += 1\n    for i in range(1, n + 1):\n        while j <= n and count0 <= k and (count1 <= k):\n            j += 1\n            if j > n:\n                break\n            if s[j - 1] == '0':\n                count0 += 1\n            if s[j - 1] == '1':\n                count1 += 1\n        far[i] = j\n        if s[i - 1] == '0':\n            count0 -= 1\n        if s[i - 1] == '1':\n            count1 -= 1\n    for k in range(1, n + 1):\n        sumfar[k] = sumfar[k - 1] + far[k]\n\ndef ans_query(l, r):\n    low = l - 1\n    high = r + 1\n    while high - low > 1:\n        k = (low + high) // 2\n        if far[k] <= r:\n            low = k\n        else:\n            high = k\n    km = low\n    answer = sumfar[km] - sumfar[l - 1] + (r - km) * (r + 1) - (r * (r + 1) // 2 - l * (l - 1) // 2)\n    return answer\nfor a in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    s = list(input())\n    far = [0 for i in range(n + 1)]\n    sumfar = [0 for i in range(n + 1)]\n    precompute(s, k, far, sumfar, n)\n    for idx in range(q):\n        (l, r) = map(int, input().split())\n        ans = ans_query(l, r)\n        print(ans)", "def precompute(s, n, k, far, sumfar):\n    (j, count0, count1) = (1, 0, 0)\n    if s[0] == '0':\n        count0 += 1\n    else:\n        count1 += 1\n    for i in range(1, n + 1):\n        while j <= n and count0 <= k and (count1 <= k):\n            j += 1\n            if j > n:\n                break\n            if s[j - 1] == '1':\n                count1 += 1\n            else:\n                count0 += 1\n        far[i] = j\n        if s[i - 1] == '0':\n            count0 -= 1\n        else:\n            count1 -= 1\n    for i in range(1, n + 1):\n        sumfar[i] = sumfar[i - 1] + far[i]\n\ndef answer_query(l, r):\n    k1 = l - 1\n    k2 = r + 1\n    while k2 - k1 > 1:\n        km = (k1 + k2) // 2\n        if far[km] <= r:\n            k1 = km\n        else:\n            k2 = km\n    k = k1\n    answer = sumfar[k] - sumfar[l - 1] + (r - k) * (r + 1) - (r * (r + 1) // 2 - l * (l - 1) // 2)\n    return answer\nfor _ in range(int(input().strip())):\n    (n, k, q) = map(int, input().strip().split())\n    string = input().strip()\n    far = [0 for i in range(n + 1)]\n    sumfar = [0 for i in range(n + 1)]\n    precompute(string, n, k, far, sumfar)\n    for idx in range(q):\n        (l, r) = map(int, input().strip().split())\n        ans = answer_query(l, r)\n        print(ans)", "for _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    s = input()\n    far = [0] * (n + 1)\n    sumfar = [0] * (n + 1)\n    (j, count0, count1) = (1, 0, 0)\n    if s[j - 1] == '1':\n        count1 += 1\n    else:\n        count0 += 1\n    for i in range(1, n + 1):\n        while j <= n and count0 <= k and (count1 <= k):\n            j += 1\n            if j > n:\n                break\n            if s[j - 1] == '1':\n                count1 += 1\n            else:\n                count0 += 1\n        far[i] = j\n        if s[i - 1] == '1':\n            count1 -= 1\n        else:\n            count0 -= 1\n    for i in range(1, n + 1):\n        sumfar[i] = sumfar[i - 1] + far[i]\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        low = l - 1\n        high = r + 1\n        while high - low > 1:\n            mid = (high + low) // 2\n            if far[mid] <= r:\n                low = mid\n            else:\n                high = mid\n        k = low\n        print(sumfar[k] - sumfar[l - 1] + (r - k) * (r + 1) - (r * (r + 1) // 2 - l * (l - 1) // 2))", "for _ in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    s = input()\n    s = [int(s[i]) for i in range(n)]\n    Count = [0, 0]\n    j = 0\n    L = [0] * n\n    R = [0] * n\n    for i in range(n):\n        while j < n and Count[s[j]] + 1 <= k:\n            Count[s[j]] += 1\n            j += 1\n        L[i] = j - 1\n        Count[s[i]] -= 1\n    Count[0] = Count[1] = 0\n    j = n - 1\n    for i in range(n - 1, -1, -1):\n        while j >= 0 and Count[s[j]] + 1 <= k:\n            Count[s[j]] += 1\n            j -= 1\n        R[i] = j + 1\n        Count[s[i]] -= 1\n    Sum = [0] * (n + 1)\n    for i in range(n):\n        Sum[i + 1] = Sum[i] + L[i]\n    for __ in range(q):\n        (li, ri) = map(int, input().split())\n        li -= 1\n        ri -= 1\n        k = R[ri] - 1\n        res = 0\n        if li <= k:\n            res += Sum[k + 1] - Sum[li] + (ri - k) * ri\n            res -= (li + ri - 2) * (ri - li + 1) // 2\n        else:\n            res += (ri - li + 2) * (ri - li + 1) // 2\n        print(res)", "def solve_query(l, r):\n    lo = l\n    hi = r\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if far[mid] < r + 1:\n            lo = mid + 1\n        else:\n            hi = mid\n    return cumfar[lo] - cumfar[l] + (r - lo + 1) * (r + 1) - (r * (r + 1) // 2 - l * (l - 1) // 2)\nt = int(input())\nfor z in range(t):\n    (n, k, q) = tuple(map(int, input().split()))\n    sr = input()\n    far = [i for i in range(n)]\n    countz = 0\n    counto = 0\n    if sr[0] == '0':\n        countz += 1\n    else:\n        counto += 1\n    j = 0\n    for i in range(n):\n        while j < n and countz <= k and (counto <= k):\n            j += 1\n            if j == n:\n                break\n            if sr[j] == '0':\n                countz += 1\n            else:\n                counto += 1\n        far[i] = j\n        if sr[i] == '0':\n            countz -= 1\n        else:\n            counto -= 1\n    cumfar = [0] * (n + 1)\n    for i in range(1, n + 1):\n        cumfar[i] = cumfar[i - 1] + far[i - 1]\n    for i in range(q):\n        (l, r) = tuple(map(int, input().split()))\n        print(int(solve_query(l - 1, r - 1)))", "raw_input = input\n\ndef precompute(s, n, k, far, sumfar):\n    (j, count0, count1) = (1, 0, 0)\n    if s[j - 1] == '1':\n        count1 += 1\n    else:\n        count0 += 1\n    for i in range(1, n + 1):\n        while j <= n and count0 <= k and (count1 <= k):\n            j += 1\n            if j > n:\n                break\n            if s[j - 1] == '1':\n                count1 += 1\n            else:\n                count0 += 1\n        far[i] = j\n        if s[i - 1] == '0':\n            count0 -= 1\n        else:\n            count1 -= 1\n    for i in range(1, n + 1):\n        sumfar[i] = sumfar[i - 1] + far[i]\n\ndef answer_query(l, r):\n    k1 = l - 1\n    k2 = r + 1\n    while k2 - k1 > 1:\n        km = (k1 + k2) // 2\n        if far[km] <= r:\n            k1 = km\n        else:\n            k2 = km\n    k = k1\n    return sumfar[k] - sumfar[l - 1] + (r - k) * (r + 1) - (r * (r + 1) // 2 - l * (l - 1) // 2)\nfor _ in range(int(raw_input())):\n    (n, k, q) = map(int, raw_input().split())\n    s = raw_input()\n    far = [0] * (n + 1)\n    sumfar = [0] * (n + 1)\n    precompute(s, n, k, far, sumfar)\n    for i in range(q):\n        (l, r) = map(int, raw_input().split())\n        print(answer_query(l, r))", "def precompute(s, n, k, far, sumfar):\n    (j, count0, count1) = (1, 0, 0)\n    if s[0] == '0':\n        count0 += 1\n    else:\n        count1 += 1\n    for i in range(1, n + 1):\n        while j <= n and count0 <= k and (count1 <= k):\n            j += 1\n            if j > n:\n                break\n            if s[j - 1] == '1':\n                count1 += 1\n            else:\n                count0 += 1\n        far[i] = j\n        if s[i - 1] == '0':\n            count0 -= 1\n        else:\n            count1 -= 1\n    for i in range(1, n + 1):\n        sumfar[i] = sumfar[i - 1] + far[i]\n\ndef answer_query(l, r):\n    k1 = l - 1\n    k2 = r + 1\n    while k2 - k1 > 1:\n        km = (k1 + k2) // 2\n        if far[km] <= r:\n            k1 = km\n        else:\n            k2 = km\n    k = k1\n    answer = sumfar[k] - sumfar[l - 1] + (r - k) * (r + 1) - (r * (r + 1) // 2 - l * (l - 1) // 2)\n    return answer\nfor _ in range(int(input().strip())):\n    (n, k, q) = map(int, input().strip().split())\n    string = input().strip()\n    far = [0 for i in range(n + 1)]\n    sumfar = [0 for i in range(n + 1)]\n    precompute(string, n, k, far, sumfar)\n    for idx in range(q):\n        (l, r) = map(int, input().strip().split())\n        ans = answer_query(l, r)\n        print(ans)", "from _bisect import *\n\ndef search1(l, r, zeroes, ones, k):\n    lo = l\n    hi = r\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        z = zeroes[mid]\n        o = ones[mid]\n        if r + 1 < len(zeroes):\n            z -= zeroes[r + 1]\n            o -= ones[r + 1]\n        if z <= k and o <= k:\n            hi = mid\n        else:\n            lo = mid + 1\n    return r - lo + 1\n\ndef search2(l, r, zeroes, ones, k):\n    lo = l\n    hi = r\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        z = zeroes[mid]\n        o = ones[mid]\n        if l > 0:\n            z -= zeroes[l - 1]\n            o -= ones[l - 1]\n        if z <= k and o <= k:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return lo - 1\n\ndef search3(r, a, key):\n    if r < 0:\n        return 0\n    lo = 0\n    hi = r\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if key >= a[mid]:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return lo\nfor T in range(int(input())):\n    (n, k, q) = map(int, input().split())\n    s = str(input())\n    zeroesEnd = [0 for x in range(n)]\n    onesEnd = [0 for x in range(n)]\n    if s[n - 1] == '1':\n        zeroesEnd[n - 1] = 0\n        onesEnd[n - 1] = 1\n    else:\n        zeroesEnd[n - 1] = 1\n        onesEnd[n - 1] = 0\n    for i in range(n - 2, -1, -1):\n        z = zeroesEnd[i + 1]\n        o = onesEnd[i + 1]\n        if s[i] == '1':\n            o += 1\n        else:\n            z += 1\n        zeroesEnd[i] = z\n        onesEnd[i] = o\n    zeroesStart = []\n    onesStart = []\n    if s[0] == '1':\n        zeroesStart.append(0)\n        onesStart.append(1)\n    else:\n        zeroesStart.append(1)\n        onesStart.append(0)\n    for i in range(1, n):\n        z = zeroesStart[i - 1]\n        o = onesStart[i - 1]\n        if s[i] == '1':\n            o += 1\n        else:\n            z += 1\n        zeroesStart.append(z)\n        onesStart.append(o)\n    contributionForIEndingAtI = [0 for x in range(n)]\n    contributionForIStartingAtI = [0 for x in range(n)]\n    contributionForIStartingAtI[n - 1] = n - 1\n    contributionForIEndingAtI[0] = 1\n    for i in range(1, n):\n        contributionForIEndingAtI[i] = contributionForIEndingAtI[i - 1] + search1(0, i, zeroesEnd, onesEnd, k)\n    for i in range(n - 2, -1, -1):\n        contributionForIStartingAtI[i] = search2(i, n - 1, zeroesStart, onesStart, k)\n    prefix = []\n    prefix.append(contributionForIStartingAtI[0] - i + 1)\n    for i in range(1, n):\n        prefix.append(prefix[i - 1] + contributionForIStartingAtI[i] - i + 1)\n    for Q in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        sum = 0\n        k = search3(l - 1, contributionForIStartingAtI, r) - 1\n        if k > -1:\n            sum += prefix[k]\n        if k + 1 <= l - 1 and l != 0:\n            x = (l - k - 1) * r + l - k - 1\n            y = (l - 1) * l // 2\n            if k != -1:\n                y -= k * (k + 1) // 2\n            x -= y\n            sum += x\n        print(contributionForIEndingAtI[r] - sum)", "t = int(input())\n\ndef precompute(n, k):\n    (count0, count1) = (0, 0)\n    if s[1] == '1':\n        count1 = 1\n    else:\n        count0 = 1\n    j = 1\n    for i in range(1, n + 1):\n        while j < n + 1 and count0 <= k and (count1 <= k):\n            j += 1\n            if j > n:\n                break\n            if s[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n        far.append(j)\n        if s[i] == '1':\n            count1 -= 1\n        else:\n            count0 -= 1\n    sumfar.append(0)\n    for i in range(1, n + 1):\n        sumfar.append(sumfar[i - 1] + far[i])\n\ndef count_substring(l, r, k):\n    left = l - 1\n    right = r + 1\n    while right - left > 1:\n        mid = int((left + right) / 2)\n        if far[mid] <= r:\n            left = mid\n        else:\n            right = mid\n    k = left\n    total_count = sumfar[k] - sumfar[l - 1] + (r - k) * (r + 1) - int(r * (r + 1) / 2) + int(l * (l - 1) / 2)\n    return total_count\nfor i in range(t):\n    (n, k, q) = map(int, input().split())\n    s = list(input().strip())\n    s.insert(0, '-1')\n    far = [0]\n    query = []\n    sumfar = []\n    precompute(n, k)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        query.append((l, r))\n    for i in range(q):\n        print(count_substring(query[i][0], query[i][1], k))", "t = int(input())\n\ndef precompute(n, k):\n    (count0, count1) = (0, 0)\n    if s[1] == '1':\n        count1 = 1\n    else:\n        count0 = 1\n    j = 1\n    for i in range(1, n + 1):\n        while j < n + 1 and count0 <= k and (count1 <= k):\n            j += 1\n            if j > n:\n                break\n            if s[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n        far.append(j)\n        if s[i] == '1':\n            count1 -= 1\n        else:\n            count0 -= 1\n    sumfar.append(0)\n    for i in range(1, n + 1):\n        sumfar.append(sumfar[i - 1] + far[i])\n\ndef count_substring(l, r, k):\n    left = l - 1\n    right = r + 1\n    while right - left > 1:\n        mid = int((left + right) / 2)\n        if far[mid] <= r:\n            left = mid\n        else:\n            right = mid\n    k = left\n    total_count = sumfar[k] - sumfar[l - 1] + (r - k) * (r + 1) - int(r * (r + 1) / 2) + int(l * (l - 1) / 2)\n    return total_count\nfor i in range(t):\n    (n, k, q) = map(int, input().split())\n    s = list(input().strip())\n    s.insert(0, '-1')\n    far = [0]\n    query = []\n    sumfar = []\n    precompute(n, k)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        query.append((l, r))\n    for i in range(q):\n        print(count_substring(query[i][0], query[i][1], k))", "t = int(input())\n\ndef precompute(n, k):\n    (count0, count1) = (0, 0)\n    if s[1] == '1':\n        count1 = 1\n    else:\n        count0 = 1\n    j = 1\n    for i in range(1, n + 1):\n        while j < n + 1 and count0 <= k and (count1 <= k):\n            j += 1\n            if j > n:\n                break\n            if s[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n        far.append(j)\n        if s[i] == '1':\n            count1 -= 1\n        else:\n            count0 -= 1\n    sumfar.append(0)\n    for i in range(1, n + 1):\n        sumfar.append(sumfar[i - 1] + far[i])\n\ndef count_substring(l, r, k):\n    left = l - 1\n    right = r + 1\n    while right - left > 1:\n        mid = int((left + right) / 2)\n        if far[mid] <= r:\n            left = mid\n        else:\n            right = mid\n    k = left\n    total_count = sumfar[k] - sumfar[l - 1] + (r - k) * (r + 1) - int(r * (r + 1) / 2) + int(l * (l - 1) / 2)\n    return total_count\nfor i in range(t):\n    (n, k, q) = map(int, input().split())\n    s = list(input().strip())\n    s.insert(0, '-1')\n    far = [0]\n    query = []\n    sumfar = []\n    precompute(n, k)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        query.append((l, r))\n    for i in range(q):\n        print(count_substring(query[i][0], query[i][1], k))", "def answer_query(L, R, far, sofar):\n    k1 = L - 1\n    k2 = R + 1\n    while k2 - k1 > 1:\n        km = (k1 + k2) // 2\n        if far[km] <= R:\n            k1 = km\n        else:\n            k2 = km\n    k = k1\n    print(sofar[k] - sofar[L - 1] + (R - k) * (R + 1) - (R * (R + 1) // 2 - L * (L - 1) // 2))\nfor t in range(int(input())):\n    ip = list(map(int, input().split()))\n    n = ip[0]\n    k = ip[1]\n    q = ip[2]\n    lp = []\n    s = '0' + input()\n    c1 = 0\n    c0 = 0\n    b = 1\n    if s[1] == '1':\n        c1 += 1\n    else:\n        c0 += 1\n    far = [0 for j in range(n + 1)]\n    sofar = [0 for k in range(n + 1)]\n    for a in range(1, n + 1):\n        while b <= n and c0 <= k and (c1 <= k):\n            b += 1\n            if b > n:\n                break\n            if s[b] == '1':\n                c1 += 1\n            else:\n                c0 += 1\n        far[a] = b\n        if s[a] == '1':\n            c1 -= 1\n        else:\n            c0 -= 1\n    for a in range(1, n + 1):\n        sofar[a] = sofar[a - 1] + far[a]\n    for i in range(q):\n        lp.append(list(map(int, input().split())))\n        answer_query(lp[i][0], lp[i][1], far, sofar)", "cases = int(input())\nfor _ in range(cases):\n    (n, k, q) = list(map(int, input().split()))\n    s = input().strip()\n    far = [0] * n\n    sumfar = [0] * (n + 1)\n    count0 = count1 = 0\n    j = -1\n    for i in range(n):\n        while j < n and count0 <= k and (count1 <= k):\n            j += 1\n            if j == n:\n                break\n            if s[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n        far[i] = j\n        if s[i] == '0':\n            count0 -= 1\n        else:\n            count1 -= 1\n    for i in range(1, n + 1):\n        sumfar[i] = sumfar[i - 1] + far[i - 1]\n    for i in range(q):\n        (l, r) = tuple(map(int, input().split()))\n        l -= 1\n        r -= 1\n        (lo, hi) = (l, r)\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if far[mid] <= r:\n                lo = mid + 1\n            else:\n                hi = mid\n        k = lo - 1\n        ans = sumfar[k + 1] - sumfar[l] + (r + 1) * (r - k) - (r * (r + 1) // 2 - l * (l - 1) // 2)\n        print(ans)", "from itertools import accumulate\nfrom bisect import bisect\nfrom sys import stdin\n_data = iter(stdin.read().split('\\n'))\ninput = lambda : next(_data)\nbuf = []\nfor _ in range(int(input())):\n    (n, k, q) = [int(x) for x in input().split()]\n    a = tuple((int(c) for c in input()))\n    p = 0\n    ct = [0] * 2\n    ub = [0] * n\n    for i in range(n):\n        while p < n and ct[a[p]] + 1 <= k:\n            ct[a[p]] += 1\n            p += 1\n        ub[i] = p\n        ct[a[i]] -= 1\n    ubs = [0]\n    ubs.extend(accumulate(ub))\n    for _ in range(q):\n        (l, r) = [int(x) for x in input().split()]\n        l -= 1\n        p = bisect(ub, r, l, r)\n        d = r - l\n        ans = 0\n        ans += ubs[p] - ubs[l]\n        ans += r * (r - p)\n        ans -= l * d\n        ans -= d * (d - 1) // 2\n        buf.append(str(ans))\nprint('\\n'.join(buf))"]