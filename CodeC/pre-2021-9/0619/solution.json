["def solve():\n    (n, k, p) = list(map(int, input().split()))\n    a = [[ind + 1, x] for (ind, x) in enumerate(list(map(int, input().split())))]\n    a.sort(key=lambda x: x[1])\n    d = {}\n    for i in range(len(a)):\n        if i == 0:\n            d[a[0][0]] = 1\n            continue\n        if a[i][1] - a[i - 1][1] <= k:\n            d[a[i][0]] = d[a[i - 1][0]]\n        else:\n            d[a[i][0]] = d[a[i - 1][0]] + 1\n    for t in range(p):\n        (x, y) = list(map(int, input().split()))\n        if d[x] == d[y]:\n            print('Yes')\n        else:\n            print('No')\nsolve()", "def solve():\n    (n, k, p) = list(map(int, input().split()))\n    a = [[ind + 1, x] for (ind, x) in enumerate(list(map(int, input().split())))]\n    a.sort(key=lambda x: x[1])\n    d = {}\n    for i in range(len(a)):\n        if i == 0:\n            d[a[0][0]] = 1\n            continue\n        if a[i][1] - a[i - 1][1] <= k:\n            d[a[i][0]] = d[a[i - 1][0]]\n        else:\n            d[a[i][0]] = d[a[i - 1][0]] + 1\n    for t in range(p):\n        (x, y) = list(map(int, input().split()))\n        if d[x] == d[y]:\n            print('Yes')\n        else:\n            print('No')\nsolve()", "(useless, K, P) = list(map(int, input().split()))\nA = [[ind + 1, x] for (ind, x) in enumerate(list(map(int, input().split())))]\nkey = {}\nA.sort(key=lambda x: x[1])\ngroup = 1\nfor i in range(len(A)):\n    if i == 0:\n        key[A[0][0]] = 1\n        continue\n    if A[i][1] - A[i - 1][1] <= K:\n        key[A[i][0]] = key[A[i - 1][0]]\n    else:\n        key[A[i][0]] = key[A[i - 1][0]] + 1\nfor i in range(P):\n    (a, b) = list(map(int, input().split()))\n    if key[a] == key[b]:\n        print('Yes')\n    else:\n        print('No')", "import sys\n(N, k, p) = [int(x) for x in sys.stdin.readline().rstrip('\\n').split()]\nfrog = [int(x) for x in sys.stdin.readline().rstrip('\\n').split()]\nfrog_ind = []\nfor i in range(0, N):\n    frog_ind.append([frog[i], i])\nfrog_ind.sort(key=lambda x: x[0])\ngroup = [0] * N\nstack = []\ngroup_id = 0\nfor elem in frog_ind:\n    if stack == []:\n        stack.append(elem[0])\n    elif abs(stack[-1] - elem[0]) <= k:\n        stack.append(elem[0])\n    else:\n        stack.clear()\n        stack.append(elem[0])\n        group_id += 1\n    group[elem[1]] = group_id\nfor _ in range(p):\n    (a, b) = [int(x) for x in sys.stdin.readline().rstrip('\\n').split()]\n    if group[a - 1] == group[b - 1]:\n        print('Yes')\n    else:\n        print('No')", "import sys\n(n, k, p) = [int(x) for x in sys.stdin.readline().rstrip('\\n').split()]\nfrog = [int(x) for x in sys.stdin.readline().rstrip('\\n').split()]\nfrog_ind = []\nfor i in range(0, n):\n    frog_ind.append([frog[i], i])\nfrog_ind.sort(key=lambda x: x[0])\ngroup = [0] * n\nstack = []\ngroup_id = 0\nfor elem in frog_ind:\n    if stack == []:\n        stack.append(elem[0])\n    elif abs(stack[-1] - elem[0]) <= k:\n        stack.append(elem[0])\n    else:\n        stack.clear()\n        stack.append(elem[0])\n        group_id += 1\n    group[elem[1]] = group_id\nfor _ in range(p):\n    (a, b) = [int(x) for x in sys.stdin.readline().rstrip('\\n').split()]\n    if group[a - 1] == group[b - 1]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = list(map(int, input().strip().split()))\narr = list(map(int, input().strip().split()))\narr = [[arr[i], i + 1] for i in range(n)]\narr = sorted(arr, key=lambda x: x[0])\nd = dict()\nfor i in range(n):\n    d[arr[i][1]] = i\nb = [0] * n\nfor i in range(1, n):\n    if arr[i][0] - arr[i - 1][0] <= k:\n        b[i] = b[i - 1] + 1\nfor _ in range(p):\n    (x, y) = list(map(int, input().strip().split()))\n    x = d[x]\n    y = d[y]\n    if y < x:\n        (x, y) = (y, x)\n    if x >= y - b[y]:\n        print('Yes')\n    else:\n        print('No')", "st = input().split()\nN = int(st[0])\nK = int(st[1])\nP = int(st[2])\nst = input().split()\nL = []\nfor x in range(N):\n    n = int(st[x])\n    L.append([n, x + 1])\nL.sort()\nH = [0 for x in range(N + 1)]\nx = L[0][0]\nf = L[0][1]\nhf = f\nH[f] = hf\nfor k in range(1, N):\n    nx = L[k][0]\n    f = L[k][1]\n    if nx - x > K:\n        hf = f\n    H[f] = hf\n    x = nx\nfor k in range(P):\n    st = input().split()\n    A = int(st[0])\n    B = int(st[1])\n    if H[A] == H[B]:\n        print('Yes')\n    else:\n        print('No')", "st = input().split()\nN = int(st[0])\nK = int(st[1])\nP = int(st[2])\nst = input().split()\nL = []\nfor x in range(N):\n    n = int(st[x])\n    L.append([n, x + 1])\nL.sort()\nH = [0 for x in range(N + 1)]\nx = L[0][0]\nf = L[0][1]\nhf = f\nH[f] = hf\nfor k in range(1, N):\n    nx = L[k][0]\n    f = L[k][1]\n    if nx - x > K:\n        hf = f\n    H[f] = hf\n    x = nx\nfor k in range(P):\n    st = input().split()\n    A = int(st[0])\n    B = int(st[1])\n    if H[A] == H[B]:\n        print('Yes')\n    else:\n        print('No')", "st = input().split()\nN = int(st[0])\nK = int(st[1])\nP = int(st[2])\nst = input().split()\nL = []\nfor x in range(N):\n    n = int(st[x])\n    L.append([n, x + 1])\nL.sort()\nH = [0 for x in range(N + 1)]\nx = L[0][0]\nf = L[0][1]\nhf = f\nH[f] = hf\nfor k in range(1, N):\n    nx = L[k][0]\n    f = L[k][1]\n    if nx - x > K:\n        hf = f\n    H[f] = hf\n    x = nx\nfor k in range(P):\n    st = input().split()\n    A = int(st[0])\n    B = int(st[1])\n    if H[A] == H[B]:\n        print('Yes')\n    else:\n        print('No')", "st = input().split()\nN = int(st[0])\nK = int(st[1])\nP = int(st[2])\nst = input().split()\nL = []\nfor x in range(N):\n    n = int(st[x])\n    L.append([n, x + 1])\nL.sort()\nH = [0 for x in range(N + 1)]\nx = L[0][0]\nf = L[0][1]\nhf = f\nH[f] = hf\nfor k in range(1, N):\n    nx = L[k][0]\n    f = L[k][1]\n    if nx - x > K:\n        hf = f\n    H[f] = hf\n    x = nx\nfor k in range(P):\n    st = input().split()\n    A = int(st[0])\n    B = int(st[1])\n    if H[A] == H[B]:\n        print('Yes')\n    else:\n        print('No')", "st = input().split()\nN = int(st[0])\nK = int(st[1])\nP = int(st[2])\nst = input().split()\nL = []\nfor x in range(N):\n    n = int(st[x])\n    L.append([n, x + 1])\nL.sort()\nH = [0 for x in range(N + 1)]\nx = L[0][0]\nf = L[0][1]\nhf = f\nH[f] = hf\nfor k in range(1, N):\n    nx = L[k][0]\n    f = L[k][1]\n    if nx - x > K:\n        hf = f\n    H[f] = hf\n    x = nx\nfor k in range(P):\n    st = input().split()\n    A = int(st[0])\n    B = int(st[1])\n    if H[A] == H[B]:\n        print('Yes')\n    else:\n        print('No')", "st = input().split()\nN = int(st[0])\nK = int(st[1])\nP = int(st[2])\nst = input().split()\nL = []\nfor x in range(N):\n    n = int(st[x])\n    L.append([n, x + 1])\nL.sort()\nH = [0 for x in range(N + 1)]\nx = L[0][0]\nf = L[0][1]\nhf = f\nH[f] = hf\nfor k in range(1, N):\n    nx = L[k][0]\n    f = L[k][1]\n    if nx - x > K:\n        hf = f\n    H[f] = hf\n    x = nx\nfor k in range(P):\n    st = input().split()\n    A = int(st[0])\n    B = int(st[1])\n    if H[A] == H[B]:\n        print('Yes')\n    else:\n        print('No')", "(N, K, P) = map(int, input().split())\nA = list(map(int, input().split()))\nS = sorted(A)\nfmap = {S[0]: 0}\nm = 0\nfor i in range(N - 1):\n    if S[i + 1] - S[i] > K:\n        m += 1\n    fmap[S[i + 1]] = m\nfor i in range(P):\n    (a, b) = map(int, input().split())\n    (a, b) = (A[a - 1], A[b - 1])\n    if fmap[a] == fmap[b]:\n        print('Yes')\n    else:\n        print('No')", "(N, K, P) = map(int, input().split())\nA = list(map(int, input().split()))\nS = sorted(A)\nfmap = {S[0]: 0}\nm = 0\nfor i in range(N - 1):\n    if S[i + 1] - S[i] > K:\n        m += 1\n    fmap[S[i + 1]] = m\nfor i in range(P):\n    (a, b) = map(int, input().split())\n    (a, b) = (A[a - 1], A[b - 1])\n    if fmap[a] == fmap[b]:\n        print('Yes')\n    else:\n        print('No')", "(N, K, P) = map(int, input().split())\nA = list(map(int, input().split()))\nS = sorted(A)\nfmap = {S[0]: 0}\nm = 0\nfor i in range(N - 1):\n    if S[i + 1] - S[i] > K:\n        m += 1\n    fmap[S[i + 1]] = m\nfor i in range(P):\n    (a, b) = map(int, input().split())\n    (a, b) = (A[a - 1], A[b - 1])\n    if fmap[a] == fmap[b]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = list(map(int, input().strip().split()))\narr = list(map(int, input().strip().split()))\narr = [[arr[i], i + 1] for i in range(n)]\narr = sorted(arr, key=lambda x: x[0])\nd = dict()\nfor i in range(n):\n    d[arr[i][1]] = i + 1\nb = [0] * (n + 1)\nfor i in range(2, n + 1):\n    if arr[i - 1][0] - arr[i - 2][0] <= k:\n        b[i] = b[i - 1] + 1\nfor _ in range(p):\n    (x, y) = list(map(int, input().strip().split()))\n    x = d[x]\n    y = d[y]\n    if y < x:\n        (x, y) = (y, x)\n    if x >= y - b[y]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = list(map(int, input().strip().split()))\narr = list(map(int, input().strip().split()))\narr = [[arr[i], i + 1] for i in range(n)]\narr = sorted(arr, key=lambda x: x[0])\nd = dict()\nfor i in range(n):\n    d[arr[i][1]] = i\nb = [0] * n\nfor i in range(1, n):\n    if arr[i][0] - arr[i - 1][0] <= k:\n        b[i] = b[i - 1] + 1\nfor _ in range(p):\n    (x, y) = list(map(int, input().strip().split()))\n    x = d[x]\n    y = d[y]\n    if y < x:\n        (x, y) = (y, x)\n    if x >= y - b[y]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = map(int, input().split())\nlist1 = list(map(int, input().split()))\nlist2 = sorted(list1.copy())\ncounts1 = {}\ncounts1[list2[0]] = 0\nl = 0\nfor i in range(1, len(list2)):\n    if list2[i] in counts1:\n        continue\n    if list2[i] - list2[i - 1] <= k:\n        counts1[list2[i]] = l\n    else:\n        l += 1\n        counts1[list2[i]] = l\nfor i in range(p):\n    (a, b) = map(int, input().split())\n    val1 = list1[a - 1]\n    val2 = list1[b - 1]\n    if counts1[val1] == counts1[val2]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = list(map(int, input().strip().split()))\narr = list(map(int, input().strip().split()))\narr = [[arr[i], i + 1] for i in range(n)]\narr = sorted(arr, key=lambda x: x[0])\nd = dict()\nfor i in range(n):\n    d[arr[i][1]] = i\nb = [0] * n\nfor i in range(1, n):\n    if arr[i][0] - arr[i - 1][0] <= k:\n        b[i] = b[i - 1] + 1\nfor _ in range(p):\n    (x, y) = list(map(int, input().strip().split()))\n    x = d[x]\n    y = d[y]\n    if y < x:\n        (x, y) = (y, x)\n    if x >= y - b[y]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = list(map(int, input().strip().split()))\narr = list(map(int, input().strip().split()))\narr = [[arr[i], i + 1] for i in range(n)]\narr = sorted(arr, key=lambda x: x[0])\nd = dict()\nfor i in range(n):\n    d[arr[i][1]] = i\nb = [0] * n\nfor i in range(1, n):\n    if arr[i][0] - arr[i - 1][0] <= k:\n        b[i] = b[i - 1] + 1\nfor _ in range(p):\n    (x, y) = list(map(int, input().strip().split()))\n    x = d[x]\n    y = d[y]\n    if y < x:\n        (x, y) = (y, x)\n    if x >= y - b[y]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = list(map(int, input().strip().split()))\narr = list(map(int, input().strip().split()))\narr = [[arr[i], i + 1] for i in range(n)]\narr = sorted(arr, key=lambda x: x[0])\nd = dict()\nfor i in range(n):\n    d[arr[i][1]] = i\nb = [0] * n\nfor i in range(1, n):\n    if arr[i][0] - arr[i - 1][0] <= k:\n        b[i] = b[i - 1] + 1\nfor _ in range(p):\n    (x, y) = list(map(int, input().strip().split()))\n    x = d[x]\n    y = d[y]\n    if y < x:\n        (x, y) = (y, x)\n    if x >= y - b[y]:\n        print('Yes')\n    else:\n        print('No')", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter\nimport math, heapq\ninput = stdin.readline\n(n, k, p) = list(map(int, input().strip().split()))\narr = list(map(int, input().strip().split()))\narr = [[arr[i], i + 1] for i in range(n)]\narr = sorted(arr, key=lambda x: x[0])\nd = dict()\nfor i in range(n):\n    d[arr[i][1]] = i\nb = [0] * n\nfor i in range(1, n):\n    if arr[i][0] - arr[i - 1][0] <= k:\n        b[i] = b[i - 1] + 1\nfor _ in range(p):\n    (x, y) = list(map(int, input().strip().split()))\n    x = d[x]\n    y = d[y]\n    if y < x:\n        (x, y) = (y, x)\n    if x >= y - b[y]:\n        print('Yes')\n    else:\n        print('No')", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter\nimport math, heapq\ninput = stdin.readline\n(n, k, p) = list(map(int, input().strip().split()))\narr = list(map(int, input().strip().split()))\narr = [[arr[i], i + 1] for i in range(n)]\narr = sorted(arr, key=lambda x: x[0])\nd = dict()\nfor i in range(n):\n    d[arr[i][1]] = i\nb = [0] * n\nfor i in range(1, n):\n    if arr[i][0] - arr[i - 1][0] <= k:\n        b[i] = b[i - 1] + 1\nfor _ in range(p):\n    (x, y) = list(map(int, input().strip().split()))\n    x = d[x]\n    y = d[y]\n    if y < x:\n        (x, y) = (y, x)\n    if x >= y - b[y]:\n        print('Yes')\n    else:\n        print('No')", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter\nimport math, heapq\ninput = stdin.readline\n(n, k, p) = list(map(int, input().strip().split()))\narr = list(map(int, input().strip().split()))\narr = [[arr[i], i + 1] for i in range(n)]\narr = sorted(arr, key=lambda x: x[0])\nd = dict()\nfor i in range(n):\n    d[arr[i][1]] = i\nb = [0] * n\nfor i in range(1, n):\n    if arr[i][0] - arr[i - 1][0] <= k:\n        b[i] = b[i - 1] + 1\nfor _ in range(p):\n    (x, y) = list(map(int, input().strip().split()))\n    x = d[x]\n    y = d[y]\n    if y < x:\n        (x, y) = (y, x)\n    if x >= y - b[y]:\n        print('Yes')\n    else:\n        print('No')", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter\nimport math, heapq\ninput = stdin.readline\n(n, k, p) = list(map(int, input().strip().split()))\narr = list(map(int, input().strip().split()))\narr = [[arr[i], i + 1] for i in range(n)]\narr = sorted(arr, key=lambda x: x[0])\nd = dict()\nfor i in range(n):\n    d[arr[i][1]] = i\nb = [0] * n\nfor i in range(1, n):\n    if arr[i][0] - arr[i - 1][0] <= k:\n        b[i] = b[i - 1] + 1\nfor _ in range(p):\n    (x, y) = list(map(int, input().strip().split()))\n    x = d[x]\n    y = d[y]\n    if y < x:\n        (x, y) = (y, x)\n    if x >= y - b[y]:\n        print('Yes')\n    else:\n        print('No')", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter\nimport math, heapq\ninput = stdin.readline\n(n, k, p) = list(map(int, input().strip().split()))\narr = list(map(int, input().strip().split()))\narr = [[arr[i], i + 1] for i in range(n)]\narr = sorted(arr, key=lambda x: x[0])\nd = dict()\nfor i in range(n):\n    d[arr[i][1]] = i\nb = [0] * n\nfor i in range(1, n):\n    if arr[i][0] - arr[i - 1][0] <= k:\n        b[i] = b[i - 1] + 1\nfor _ in range(p):\n    (x, y) = list(map(int, input().strip().split()))\n    x = d[x]\n    y = d[y]\n    if y < x:\n        (x, y) = (y, x)\n    if x >= y - b[y]:\n        print('Yes')\n    else:\n        print('No')", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter\nimport math, heapq\ninput = stdin.readline\n(n, k, p) = list(map(int, input().strip().split()))\narr = list(map(int, input().strip().split()))\narr = [[arr[i], i + 1] for i in range(n)]\narr = sorted(arr, key=lambda x: x[0])\nd = dict()\nfor i in range(n):\n    d[arr[i][1]] = i\nb = [0] * n\nfor i in range(1, n):\n    if arr[i][0] - arr[i - 1][0] <= k:\n        b[i] = b[i - 1] + 1\nfor _ in range(p):\n    (x, y) = list(map(int, input().strip().split()))\n    x = d[x]\n    y = d[y]\n    if y < x:\n        (x, y) = (y, x)\n    if x >= y - b[y]:\n        print('Yes')\n    else:\n        print('No')", "l = list(map(int, input().split()))\nn = l[0]\nk = l[1]\np = l[2]\ns = []\nfrogs = list(map(int, input().split()))\ns = [[frogs[i], i + 1] for i in range(n)]\ns.sort()\nm = [0] * (n + 1)\nx1 = s[0][0]\nw = 0\nfor i in range(len(s)):\n    x2 = s[i][0]\n    if x2 - x1 > k:\n        w = w + 1\n    m[s[i][1]] = w\n    x1 = x2\nwhile p:\n    (a, b) = map(int, input().split())\n    if m[a] == m[b]:\n        print('Yes')\n    else:\n        print('No')\n    p = p - 1", "from sys import stdin\ninput = stdin.readline\n\ndef solve():\n    (n, k, p) = map(int, input().split())\n    frogs = list(map(int, input().split()))\n    tmp = [[frogs[i], i] for i in range(n)]\n    tmp.sort()\n    which = [0] * (n + 1)\n    for i in range(n):\n        which[tmp[i][1] + 1] = i\n    cnt = [0] * (n + 1)\n    for i in range(2, n + 1):\n        cnt[i] = cnt[i - 1] + (tmp[i - 1][0] - tmp[i - 2][0] > k)\n    ans = []\n    for i in range(p):\n        (a, b) = map(int, input().split())\n        if a > b:\n            (a, b) = (b, a)\n        if cnt[which[b] + 1] - cnt[which[a] + 1]:\n            ans.append('No')\n        else:\n            ans.append('Yes')\n    print('\\n'.join(ans))\nsolve()", "from sys import stdin\ninput = stdin.readline\n\ndef solve():\n    (n, k, p) = map(int, input().split())\n    frogs = list(map(int, input().split()))\n    tmp = [[frogs[i], i] for i in range(n)]\n    tmp.sort()\n    which = [0] * (n + 1)\n    for i in range(n):\n        which[tmp[i][1] + 1] = i\n    cnt = [0] * (n + 1)\n    for i in range(2, n + 1):\n        cnt[i] = cnt[i - 1] + (tmp[i - 1][0] - tmp[i - 2][0] > k)\n    ans = []\n    for i in range(p):\n        (a, b) = map(int, input().split())\n        if a > b:\n            (a, b) = (b, a)\n        if cnt[which[b] + 1] - cnt[which[a] + 1]:\n            ans.append('No')\n        else:\n            ans.append('Yes')\n    print('\\n'.join(ans))\nsolve()", "from sys import stdin\ninput = stdin.readline\n\ndef solve():\n    (n, k, p) = map(int, input().split())\n    frogs = list(map(int, input().split()))\n    tmp = [[frogs[i], i] for i in range(n)]\n    tmp.sort()\n    which = [0] * (n + 1)\n    for i in range(n):\n        which[tmp[i][1] + 1] = i\n    cnt = [0] * (n + 1)\n    for i in range(2, n + 1):\n        cnt[i] = cnt[i - 1] + (tmp[i - 1][0] - tmp[i - 2][0] > k)\n    ans = []\n    for i in range(p):\n        (a, b) = map(int, input().split())\n        if a > b:\n            (a, b) = (b, a)\n        if cnt[which[b] + 1] - cnt[which[a] + 1]:\n            ans.append('No')\n        else:\n            ans.append('Yes')\n    print('\\n'.join(ans))\nsolve()", "from sys import stdin\ninput = stdin.readline\n\ndef solve():\n    (n, k, p) = map(int, input().split())\n    frogs = list(map(int, input().split()))\n    tmp = [[frogs[i], i] for i in range(n)]\n    tmp.sort()\n    which = [0] * (n + 1)\n    for i in range(n):\n        which[tmp[i][1] + 1] = i\n    cnt = [0] * (n + 1)\n    for i in range(2, n + 1):\n        cnt[i] = cnt[i - 1] + (tmp[i - 1][0] - tmp[i - 2][0] > k)\n    ans = []\n    for i in range(p):\n        (a, b) = map(int, input().split())\n        if a > b:\n            (a, b) = (b, a)\n        if cnt[which[b] + 1] - cnt[which[a] + 1]:\n            ans.append('No')\n        else:\n            ans.append('Yes')\n    print('\\n'.join(ans))\nsolve()", "def solve():\n    (n, k, p) = map(int, input().split())\n    frogs = list(map(int, input().split()))\n    tmp = [[frogs[i], i] for i in range(n)]\n    tmp.sort()\n    which = [0] * (n + 1)\n    for i in range(n):\n        which[tmp[i][1] + 1] = i\n    cnt = [0] * (n + 1)\n    for i in range(2, n + 1):\n        cnt[i] = cnt[i - 1] + (tmp[i - 1][0] - tmp[i - 2][0] > k)\n    ans = []\n    for i in range(p):\n        (a, b) = map(int, input().split())\n        if a > b:\n            (a, b) = (b, a)\n        if cnt[which[b] + 1] - cnt[which[a] + 1]:\n            ans.append('No')\n        else:\n            ans.append('Yes')\n    print('\\n'.join(ans))\nsolve()", "(n, k, p) = map(int, input().split())\nl = list(map(int, input().split()))\nd = {}\nd1 = {}\ndp = []\nfor i in range(len(l)):\n    d[i + 1] = l[i]\nl.sort()\nfor i in range(len(l)):\n    d1[l[i]] = i\n    dp.append(l[i])\nfor i in range(1, len(l)):\n    if l[i] - l[i - 1] <= k:\n        dp[i] = dp[i - 1]\nfor _ in range(p):\n    (x, y) = map(int, input().split())\n    a = dp[d1[max(d[x], d[y])]]\n    if a <= min(d[x], d[y]):\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = map(int, input().split())\nl = list(map(int, input().split()))\nd = {}\nd1 = {}\ndp = []\nfor i in range(len(l)):\n    d[i + 1] = l[i]\nl.sort()\nfor i in range(len(l)):\n    d1[l[i]] = i\n    dp.append(l[i])\nfor i in range(1, len(l)):\n    if l[i] - l[i - 1] <= k:\n        dp[i] = dp[i - 1]\nfor _ in range(p):\n    (x, y) = map(int, input().split())\n    a = dp[d1[max(d[x], d[y])]]\n    if a <= min(d[x], d[y]):\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = map(int, input().split())\nl = list(map(int, input().split()))\nd = {}\nd1 = {}\ndp = []\nfor i in range(len(l)):\n    d[i + 1] = l[i]\nl.sort()\nfor i in range(len(l)):\n    d1[l[i]] = i\n    dp.append(l[i])\nfor i in range(1, len(l)):\n    if l[i] - l[i - 1] <= k:\n        dp[i] = dp[i - 1]\nfor _ in range(p):\n    (x, y) = map(int, input().split())\n    a = dp[d1[max(d[x], d[y])]]\n    if a <= min(d[x], d[y]):\n        print('Yes')\n    else:\n        print('No')", "(N, K, P) = map(int, input().split())\nA = list(map(int, input().split()))\nS = sorted(A)\nfmap = {S[0]: 0}\nm = 0\nfor i in range(N - 1):\n    if S[i + 1] - S[i] > K:\n        m += 1\n    fmap[S[i + 1]] = m\nfor i in range(P):\n    (a, b) = map(int, input().split())\n    (a, b) = (A[a - 1], A[b - 1])\n    if fmap[a] == fmap[b]:\n        print('Yes')\n    else:\n        print('No')", "(N, K, P) = [int(x) for x in input().split()]\nfList = [int(x) for x in input().split()]\nsList = sorted(fList)\nfMap = {sList[0]: 0}\nm = 0\nfor i in range(N - 1):\n    if sList[i + 1] - sList[i] > K:\n        m += 1\n    fMap[sList[i + 1]] = m\nfor ii in range(P):\n    (A, B) = [int(x) for x in sorted(input().split())]\n    (A, B) = (fList[A - 1], fList[B - 1])\n    if fMap[A] == fMap[B]:\n        print('Yes')\n    else:\n        print('No')", "from collections import defaultdict\n(N, K, P) = map(int, input().split())\nA = list(map(int, input().split()))\nl = sorted(A)\nd = defaultdict(int)\nx = 0\nd[l[0]] = x\nfor i in range(1, N):\n    if l[i] - l[i - 1] <= K:\n        d[l[i]] = x\n    else:\n        x += 1\n        d[l[i]] = x\nfor i in range(P):\n    (x, y) = map(int, input().split())\n    if d[A[x - 1]] == d[A[y - 1]]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = map(int, input().split())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n    b.append((a[i], i + 1))\nb.sort(key=lambda y: y[0])\nmp = {}\ncur = 1\nmp[b[0][1]] = cur\nfor i in range(1, n):\n    if b[i][0] - b[i - 1][0] <= k:\n        mp[b[i][1]] = cur\n    else:\n        cur += 1\n        mp[b[i][1]] = cur\nfor i in range(p):\n    (u, v) = map(int, input().split())\n    if mp[u] == mp[v]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = map(int, input().split())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n    b.append((a[i], i))\nb.sort(key=lambda y: y[0])\nmp = {}\ncur = 1\nmp[b[0][1]] = cur\nfor i in range(1, n):\n    if b[i][0] - b[i - 1][0] <= k:\n        mp[b[i][1]] = cur\n    else:\n        cur += 1\n        mp[b[i][1]] = cur\nfor i in range(p):\n    (u, v) = map(int, input().split())\n    if mp[u - 1] == mp[v - 1]:\n        print('Yes')\n    else:\n        print('No')", "import heapq as hq\n[N, K, Q] = [int(p) for p in input().split()]\na = [int(p) for p in input().split()]\nb = []\nc = [1] * N\nc1 = 1\nfor i in range(N):\n    hq.heappush(b, (a[i], i))\n(x1, y1) = hq.heappop(b)\nfor i in range(N - 1):\n    (x, y) = hq.heappop(b)\n    if x - x1 > K:\n        c1 = c1 + 1\n    c[y] = c1\n    x1 = x\nfor i in range(Q):\n    [r, s] = [int(p) for p in input().split()]\n    if c[r - 1] == c[s - 1]:\n        print('Yes')\n    else:\n        print('No')", "import heapq as hq\n[N, K, Q] = [int(p) for p in input().split()]\na = [int(p) for p in input().split()]\nb = []\nc = [1] * N\nc1 = 1\nfor i in range(N):\n    hq.heappush(b, (a[i], i))\n(x1, y1) = hq.heappop(b)\nfor i in range(N - 1):\n    (x, y) = hq.heappop(b)\n    if x - x1 > K:\n        c1 = c1 + 1\n    c[y] = c1\n    x1 = x\nfor i in range(Q):\n    [r, s] = [int(p) for p in input().split()]\n    if c[r - 1] == c[s - 1]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = map(int, input().split())\narr = list(map(int, input().split()))[:n]\nsort_arr = sorted(set(arr))\nu = {sort_arr[0]: 0}\nc = 0\nfor i in range(1, len(sort_arr)):\n    if sort_arr[i - 1] + k < sort_arr[i]:\n        c += 1\n    u[sort_arr[i]] = c\nfor _ in range(0, p):\n    (i, j) = map(int, input().split())\n    a = arr[i - 1]\n    b = arr[j - 1]\n    if u[a] == u[b]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = map(int, input().split())\nx = [int(x) for x in input().split()]\nl = sorted(set(x))\nm = 0\nl1 = {l[0]: 0}\nfor i in range(1, len(l)):\n    if l[i] - l[i - 1] > k:\n        m += 1\n    l1[l[i]] = m\nfor _ in range(p):\n    (a, b) = map(int, input().split())\n    (a, b) = (x[a - 1], x[b - 1])\n    print('Yes') if l1[a] == l1[b] else print('No')", "(n, k, p) = map(int, input().split())\nx = [int(x) for x in input().split()]\nl = sorted(set(x))\nm = 0\nl1 = {l[0]: 0}\nfor i in range(1, len(l)):\n    if l[i] - l[i - 1] > k:\n        m += 1\n    l1[l[i]] = m\nfor _ in range(p):\n    (a, b) = map(int, input().split())\n    (a, b) = (x[a - 1], x[b - 1])\n    print('Yes') if l1[a] == l1[b] else print('No')", "(n, k, p) = map(int, input().split())\nx = [int(x) for x in input().split()]\nl = sorted(set(x))\nm = 0\nl1 = {l[0]: 0}\nfor i in range(1, len(l)):\n    if l[i] - l[i - 1] > k:\n        m += 1\n    l1[l[i]] = m\nfor _ in range(p):\n    (a, b) = map(int, input().split())\n    (a, b) = (x[a - 1], x[b - 1])\n    print('Yes') if l1[a] == l1[b] else print('No')", "(n, k, p) = map(int, input().split())\nb = list(map(int, input().split()))\na = b[:]\na.sort()\ndic = {}\ndp = [i + 1 for i in range(n)]\nfor i in range(1, n):\n    if a[i] - a[i - 1] <= k:\n        dp[i] = dp[i - 1]\nfor i in range(n):\n    dic[a[i]] = dp[i]\nfor _ in range(p):\n    (x, y) = map(int, input().split())\n    if dic[b[y - 1]] == dic[b[x - 1]]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = map(int, input().split())\nx = [int(x) for x in input().split()]\nl = sorted(set(x))\nm = 0\nl1 = {l[0]: 0}\nfor i in range(1, len(l)):\n    if l[i] - l[i - 1] > k:\n        m += 1\n    l1[l[i]] = m\nfor _ in range(p):\n    (a, b) = map(int, input().split())\n    (a, b) = (x[a - 1], x[b - 1])\n    print('Yes') if l1[a] == l1[b] else print('No')", "(n, k, p) = map(int, input().split())\nx = [int(x) for x in input().split()]\nl = sorted(set(x))\nm = 0\nl1 = {l[0]: 0}\nfor i in range(1, len(l)):\n    if l[i] - l[i - 1] > k:\n        m += 1\n    l1[l[i]] = m\nfor _ in range(p):\n    (a, b) = map(int, input().split())\n    (a, b) = (x[a - 1], x[b - 1])\n    print('Yes') if l1[a] == l1[b] else print('No')", "(n, k, p) = map(int, input().split())\nx = [int(x) for x in input().split()]\nl = sorted(set(x))\nm = 0\nl1 = {l[0]: 0}\nfor i in range(1, len(l)):\n    if l[i] - l[i - 1] > k:\n        m += 1\n    l1[l[i]] = m\nfor _ in range(p):\n    (a, b) = map(int, input().split())\n    (a, b) = (x[a - 1], x[b - 1])\n    print('Yes') if l1[a] == l1[b] else print('No')", "(n, k, p) = map(int, input().split())\nx = [int(x) for x in input().split()]\nl = sorted(set(x))\nm = 0\nl1 = {l[0]: 0}\nfor i in range(1, len(l)):\n    if l[i] - l[i - 1] > k:\n        m += 1\n    l1[l[i]] = m\nfor _ in range(p):\n    (a, b) = map(int, input().split())\n    (a, b) = (x[a - 1], x[b - 1])\n    print('Yes') if l1[a] == l1[b] else print('No')", "(n, k, p) = map(int, input().split())\nx = [int(x) for x in input().split()]\nl = sorted(set(x))\nm = 0\nl1 = {l[0]: 0}\nfor i in range(1, len(l)):\n    if l[i] - l[i - 1] > k:\n        m += 1\n    l1[l[i]] = m\nfor _ in range(p):\n    (a, b) = map(int, input().split())\n    (a, b) = (x[a - 1], x[b - 1])\n    print('Yes') if l1[a] == l1[b] else print('No')", "(n, k, p) = map(int, input().split())\nx = [int(x) for x in input().split()]\nl = sorted(set(x))\nm = 0\nl1 = {l[0]: 0}\nfor i in range(1, len(l)):\n    if l[i] - l[i - 1] > k:\n        m += 1\n    l1[l[i]] = m\nfor _ in range(p):\n    (a, b) = map(int, input().split())\n    (a, b) = (x[a - 1], x[b - 1])\n    print('Yes') if l1[a] == l1[b] else print('No')", "(n, k, p) = map(int, input().split())\ns = list(map(int, input().split()))\nli = []\nfor i in range(len(s)):\n    li.append([s[i], i])\nli.sort()\nsort_index = []\nfor x in li:\n    sort_index.append(x[1])\ns.sort()\nsort_index1 = []\ndp = [0] * n\nfor i in range(1, n):\n    if s[i] - s[i - 1] <= k:\n        dp[i] = dp[i - 1] + 1\n    else:\n        dp[i] = 0\ndict1 = {}\nfor i in range(0, n):\n    dict1[sort_index[i]] = i\nfor i in range(0, p):\n    (a, b) = map(int, input().split())\n    if a == b:\n        print('Yes')\n        continue\n    newa = dict1[a - 1]\n    newb = dict1[b - 1]\n    if newb > newa:\n        temp = newa\n        newa = newb\n        newb = temp\n    if dp[newa] >= newa - newb:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = map(int, input().split())\na = list(map(int, input().split()))\nb = a[:]\na.sort()\nl = {a[0]: 0}\nc = 0\nfor i in range(1, n):\n    if a[i] - a[i - 1] <= k:\n        l[a[i]] = c\n    else:\n        c += 1\n        l[a[i]] = c\nfor i in range(p):\n    (f1, f2) = map(int, input().split())\n    if l[b[f1 - 1]] == l[b[f2 - 1]]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = map(int, input().split())\nx = [int(x) for x in input().split()]\nl = sorted(set(x))\nm = 0\nl1 = {l[0]: 0}\nfor i in range(1, len(l)):\n    if l[i] - l[i - 1] > k:\n        m += 1\n    l1[l[i]] = m\nfor _ in range(p):\n    (a, b) = map(int, input().split())\n    (a, b) = (x[a - 1], x[b - 1])\n    print('Yes') if l1[a] == l1[b] else print('No')", "(N, K, P) = map(int, input().split())\nAs = list(map(int, input().split()))\nBs = [(x, i) for (i, x) in enumerate(As)]\nBs.sort()\ni2j = {}\nfor (j, (A, i)) in enumerate(Bs):\n    i2j[i] = j\nmax_reach = {}\nmax_reach[N - 1] = Bs[N - 1][0] + K\nfor j in range(N - 2, -1, -1):\n    if Bs[j + 1][0] - Bs[j][0] <= K:\n        max_reach[j] = max_reach[j + 1]\n    else:\n        max_reach[j] = Bs[j][0] + K\noutput = []\nfor _ in range(P):\n    (i1, i2) = map(int, input().split())\n    j1 = i2j[i1 - 1]\n    j2 = i2j[i2 - 1]\n    if max_reach[j1] == max_reach[j2]:\n        output.append('Yes')\n    else:\n        output.append('No')\nfor o in output:\n    print(o)", "(n, k, p) = map(int, input().split())\nf = list(map(int, input().split()))\nl = []\nfor i in range(n):\n    l.append((f[i], i + 1))\nl = sorted(l, key=lambda x: x[0])\nd = {}\nc = 1\nd[l[0][1]] = 1\nfor i in range(1, n):\n    if l[i][0] - l[i - 1][0] > k:\n        c = c + 1\n    d[l[i][1]] = c\nfor _ in range(p):\n    (f1, f2) = map(int, input().split())\n    if d[f1] == d[f2]:\n        print('Yes')\n    else:\n        print('No')", "import numpy as np\n(N, K, P) = list(map(int, input().split()))\nlist_frogs = list(map(int, input().split()))\nlist_sorted = list_frogs.copy()\nlist_sorted.sort()\nval = 0\ndict_frogs = {list_sorted[0]: val}\nfor i in range(len(list_sorted) - 1):\n    if list_sorted[i + 1] - list_sorted[i] > K:\n        val += 1\n        dict_frogs[list_sorted[i + 1]] = val\n    else:\n        dict_frogs[list_sorted[i + 1]] = val\nfor _ in range(P):\n    (A, B) = list(map(int, input().split()))\n    if dict_frogs[list_frogs[A - 1]] == dict_frogs[list_frogs[B - 1]]:\n        print('Yes')\n    else:\n        print('No')", "import numpy as np\n(N, K, P) = list(map(int, input().split()))\nlist_frogs = list(map(int, input().split()))\nlist_sorted = list_frogs.copy()\nlist_sorted.sort()\nval = 0\ndict_frogs = {list_sorted[0]: val}\nfor i in range(len(list_sorted) - 1):\n    if list_sorted[i + 1] - list_sorted[i] > K:\n        val += 1\n        dict_frogs[list_sorted[i + 1]] = val\n    else:\n        dict_frogs[list_sorted[i + 1]] = val\nfor _ in range(P):\n    (A, B) = list(map(int, input().split()))\n    if dict_frogs[list_frogs[A - 1]] == dict_frogs[list_frogs[B - 1]]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = map(int, input().split())\nA = list(map(int, input().split()))\nfrog = sorted(A)\ndis = {}\nfor i in A:\n    dis[i] = i\ndis[frog[-1]] += k\nfor i in range(n - 2, -1, -1):\n    if frog[i + 1] - frog[i] <= k:\n        dis[frog[i]] = dis[frog[i + 1]]\n    else:\n        dis[frog[i]] += k\nfor _ in range(p):\n    (i, j) = map(int, input().split())\n    if dis[A[i - 1]] == dis[A[j - 1]]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = map(int, input().split())\nA = list(map(int, input().split()))\nfrog = sorted(A)\ndis = {}\nfor i in range(n):\n    dis[A[i]] = A[i]\ndis[frog[-1]] += k\nfor i in range(n - 2, -1, -1):\n    if frog[i + 1] - frog[i] <= k:\n        dis[frog[i]] = dis[frog[i + 1]]\n    else:\n        dis[frog[i]] += k\nfor _ in range(p):\n    (i, j) = map(int, input().split())\n    (a, b) = (dis[A[i - 1]], dis[A[j - 1]])\n    if a == b:\n        print('Yes')\n    else:\n        print('No')", "(n, dis, q) = map(int, input().split())\narr = list(map(int, input().split()))\nsrt = sorted(arr)\ncurSet = 0\nDict = {srt[0]: curSet}\nfor i in range(1, len(srt)):\n    if srt[i] - srt[i - 1] > dis:\n        curSet += 1\n    Dict[srt[i]] = curSet\nfor j in range(q):\n    (a, b) = map(int, input().split())\n    (a, b) = (arr[a - 1], arr[b - 1])\n    if Dict[a] == Dict[b]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = map(int, input().split())\nc = list(map(int, input().split()))\npairs = list(enumerate(c))\npairs.sort(key=lambda x: x[1])\nd = {pairs[i][0]: i for i in range(n)}\ndp = [0] * (n + 1)\ndp[1] = 1\nfor i in range(1, n):\n    if pairs[i][1] - pairs[i - 1][1] <= k:\n        dp[i + 1] = 1\nfor i in range(1, n + 1):\n    dp[i] += dp[i - 1]\nfor i in range(p):\n    (a, b) = map(int, input().split())\n    (a, b) = (a - 1, b - 1)\n    (idx1, idx2) = (d[a], d[b])\n    mx = max(idx1, idx2) + 1\n    mn = min(idx1, idx2) + 1\n    print('Yes' if dp[mx] - dp[mn] == mx - mn else 'No')", "(n, dis, q) = map(int, input().split())\narr = list(map(int, input().split()))\nsrt = sorted(arr)\ncurSet = 0\nDict = {srt[0]: curSet}\nfor i in range(1, len(srt)):\n    if srt[i] - srt[i - 1] > dis:\n        curSet += 1\n    Dict[srt[i]] = curSet\nfor _ in range(q):\n    (a, b) = map(int, input().split())\n    (a, b) = (arr[a - 1], arr[b - 1])\n    if Dict[a] == Dict[b]:\n        print('Yes')\n    else:\n        print('No')", "def solve():\n    (n, k, p) = map(int, input().split())\n    arr = sorted(list(zip(map(int, input().split()), range(n))))\n    grp = [0 for i in range(n)]\n    grp[arr[0][1]] = 1\n    for i in range(1, n):\n        if arr[i][0] - arr[i - 1][0] <= k:\n            grp[arr[i][1]] = grp[arr[i - 1][1]]\n        else:\n            grp[arr[i][1]] = grp[arr[i - 1][1]] + 1\n    for i in range(p):\n        (src, dest) = map(int, input().split())\n        (src, dest) = (src - 1, dest - 1)\n        if grp[src] == grp[dest]:\n            print('Yes')\n        else:\n            print('No')\nsolve()", "from collections import defaultdict\n\ndef solve(P, k):\n    mp_index_value = defaultdict(int)\n    for i in range(1, len(P) + 1):\n        mp_index_value[i] = P[i - 1]\n    P.sort()\n    component = {P[0]: P[0]}\n    value = P[0]\n    for i in range(len(P) - 1):\n        if abs(P[i] - P[i + 1]) <= k:\n            component[P[i + 1]] = value\n        else:\n            value = P[i + 1]\n            component[P[i + 1]] = P[i + 1]\n    return (mp_index_value, component)\n(n, k, p) = map(int, input().split())\nP = list(map(int, input().split()))\n(indexes, component) = solve(P, k)\nfor _ in range(p):\n    (u, v) = map(int, input().split())\n    u = indexes[u]\n    v = indexes[v]\n    if component[u] == component[v]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = [int(i) for i in input().split()]\nn_sep = list(map(int, input().split()))\ncount = 0\nsep_sort = sorted(n_sep)\nhashing = {sep_sort[0]: 0}\nfor j in range(1, n):\n    if abs(sep_sort[j] - sep_sort[j - 1]) > k:\n        count += 1\n    hashing[sep_sort[j]] = count\nfor i in range(p):\n    pair = list(map(int, input().split()))\n    if hashing[n_sep[pair[1] - 1]] == hashing[n_sep[pair[0] - 1]]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = map(int, input().split())\nf = list(map(int, input().split()))\nseq = sorted(set(f))\nm = 0\nseq1 = {seq[0]: 0}\nfor i in range(1, len(seq)):\n    if seq[i] - seq[i - 1] > k:\n        m += 1\n    seq1[seq[i]] = m\nwhile p > 0:\n    (i, j) = map(int, input().split())\n    (i, j) = (f[i - 1], f[j - 1])\n    if seq1[i] == seq1[j]:\n        print('Yes')\n    else:\n        print('No')\n    p -= 1", "class union_find:\n\n    def __init__(self, N):\n        self.parent = {}\n        self.rank = []\n        for i in range(N):\n            self.parent[i] = i\n            self.rank.append(0)\n\n    def find(self, x):\n        y = x\n        while x != self.parent[x]:\n            x = self.parent[x]\n        self.parent[y] = x\n        return x\n\n    def union(self, x, y):\n        px = self.find(x)\n        py = self.find(y)\n        if px == py:\n            return\n        elif self.rank[px] > self.rank[py]:\n            self.parent[py] = px\n        elif self.rank[px] < self.rank[py]:\n            self.parent[px] = py\n        else:\n            self.parent[py] = px\n            self.rank[px] += 1\n(N, K, P) = [int(i) for i in input().split()]\nX = [int(i) for i in input().split()]\nans = []\nuf = union_find(N)\nY = []\nfor i in range(N):\n    Y.append((X[i], i))\nY.sort()\nfor i in range(N - 1):\n    if Y[i + 1][0] - Y[i][0] <= K:\n        uf.union(Y[i][1], Y[i + 1][1])\nA = []\nB = []\nfor i in range(P):\n    (a, b) = [int(i) for i in input().split()]\n    A.append(a - 1)\n    B.append(b - 1)\nfor i in range(P):\n    pa = uf.find(A[i])\n    pb = uf.find(B[i])\n    if pa == pb:\n        ans.append('Yes')\n    else:\n        ans.append('No')\nfor i in ans:\n    print(i)", "(n, k, p) = map(int, input().split())\nf = list(map(int, input().split()))\nseq = sorted(set(f))\nm = 0\nseq1 = {seq[0]: 0}\nfor i in range(1, len(seq)):\n    if seq[i] - seq[i - 1] > k:\n        m += 1\n    seq1[seq[i]] = m\nwhile p > 0:\n    (i, j) = map(int, input().split())\n    (i, j) = (f[i - 1], f[j - 1])\n    if seq1[i] == seq1[j]:\n        print('Yes')\n    else:\n        print('No')\n    p -= 1", "(n, k, p) = map(int, input().split())\nx = [int(x) for x in input().split()]\nl = sorted(set(x))\nm = 0\nl1 = {l[0]: 0}\nfor i in range(1, len(l)):\n    if l[i] - l[i - 1] > k:\n        m += 1\n    l1[l[i]] = m\nfor _ in range(p):\n    (a, b) = map(int, input().split())\n    (a, b) = (x[a - 1], x[b - 1])\n    print('Yes') if l1[a] == l1[b] else print('No')", "(n, k, p) = map(int, input().split())\na = list(map(int, input().split()))\nnewar = []\nfor i in range(n):\n    newar.append((a[i], i))\nnewar.sort(key=lambda x: x[0])\nrevmap = [0] * n\nans = [0] * n\nctr = 1\nans[0] = ctr\nfor i in range(n):\n    revmap[newar[i][1]] = i\n    if i != n - 1:\n        if newar[i + 1][0] - newar[i][0] <= k:\n            ans[i + 1] = ctr\n        else:\n            ctr += 1\n            ans[i + 1] = ctr\nfor _ in range(p):\n    (A, B) = map(int, input().split())\n    if ans[revmap[A - 1]] == ans[revmap[B - 1]]:\n        print('Yes')\n    else:\n        print('No')", "from sys import stdin, stdout\nfrom math import gcd, log2, log10, floor\nimport math\nfrom collections import defaultdict, OrderedDict\nfrom bisect import bisect_left\n(n, k, p) = [int(i) for i in input().split()]\na = list(map(int, input().split()))\nasort = a[:]\nasort.sort()\ndict = defaultdict(int)\ntheta = 1\ndict[asort[0]] = 1\nfor i in range(1, n):\n    if asort[i] - asort[i - 1] <= k:\n        dict[asort[i]] = theta\n    else:\n        theta += 1\n        dict[asort[i]] = theta\nfor i in range(p):\n    (alpha, beta) = map(int, input().split())\n    alpha -= 1\n    beta -= 1\n    if dict[a[alpha]] == dict[a[beta]]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = map(int, input().split())\nx = [int(x) for x in input().split()]\nl = sorted(set(x))\nm = 0\nl1 = {l[0]: 0}\nfor i in range(1, len(l)):\n    if l[i] - l[i - 1] > k:\n        m += 1\n    l1[l[i]] = m\nfor _ in range(p):\n    (a, b) = map(int, input().split())\n    (a, b) = (x[a - 1], x[b - 1])\n    print('Yes') if l1[a] == l1[b] else print('No')", "(n, k, p) = map(int, input().split())\nx = [int(x) for x in input().split()]\nl = sorted(set(x))\nm = 0\nl1 = {l[0]: 0}\nfor i in range(1, len(l)):\n    if l[i] - l[i - 1] > k:\n        m += 1\n    l1[l[i]] = m\nfor _ in range(p):\n    (a, b) = map(int, input().split())\n    (a, b) = (x[a - 1], x[b - 1])\n    print('Yes') if l1[a] == l1[b] else print('No')", "(n, k, p) = map(int, input().split())\nx = [int(x) for x in input().split()]\nl = sorted(set(x))\nm = 0\nl1 = {l[0]: 0}\nfor i in range(1, len(l)):\n    if l[i] - l[i - 1] > k:\n        m += 1\n    l1[l[i]] = m\nfor _ in range(p):\n    (a, b) = map(int, input().split())\n    (a, b) = (x[a - 1], x[b - 1])\n    print('Yes') if l1[a] == l1[b] else print('No')", "(n, k, p) = map(int, input().split())\nx = [int(x) for x in input().split()]\nl = sorted(set(x))\nm = 0\nl1 = {l[0]: 0}\nfor i in range(1, len(l)):\n    if l[i] - l[i - 1] > k:\n        m += 1\n    l1[l[i]] = m\nfor _ in range(p):\n    (a, b) = map(int, input().split())\n    (a, b) = (x[a - 1], x[b - 1])\n    print('Yes') if l1[a] == l1[b] else print('No')", "from bisect import *\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nt = sorted(b)\nd = []\nk = t[0]\nfor i in range(a[0] - 1):\n    if t[i + 1] - t[i] <= a[1]:\n        k = t[i + 1]\n    else:\n        d.append(k + 1)\n        k = t[i + 1]\nd.append(k + 1)\nfor i in range(a[2]):\n    c = list(map(int, input().split()))\n    if c[0] - 1 <= a[0] and c[1] <= a[0]:\n        if bisect(d, b[c[0] - 1]) == bisect(d, b[c[1] - 1]):\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')", "from bisect import *\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nt = sorted(b)\nd = []\nk = t[0]\nfor i in range(a[0] - 1):\n    if t[i + 1] - t[i] <= a[1]:\n        k = t[i + 1]\n    else:\n        d.append(k + 1)\n        k = t[i + 1]\nd.append(k + 1)\nfor i in range(a[2]):\n    c = list(map(int, input().split()))\n    if c[0] - 1 <= a[0] and c[1] <= a[0]:\n        if bisect(d, b[c[0] - 1]) == bisect(d, b[c[1] - 1]):\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')", "(n, k, p) = list(map(int, input().strip().split()))\nlist1 = list(map(int, input().strip().split()))\nlist2 = sorted(list1)\nmap1 = dict()\ncurr = list2[0]\nindex = 0\nfor i in range(1, n):\n    if list2[i] - list2[i - 1] > k:\n        for j in range(index, i):\n            map1[list2[j]] = list2[i - 1]\n        curr = list2[i]\n        index = i\nfor j in range(index, n):\n    map1[list2[j]] = list2[n - 1]\nfor _ in range(p):\n    (a, b) = list(map(int, input().strip().split()))\n    pos1 = list1[a - 1]\n    pos2 = list1[b - 1]\n    start = min(pos1, pos2)\n    end = max(pos1, pos2)\n    if map1[start] >= end:\n        print('Yes')\n    else:\n        print('No')", "def solve():\n    (n, k, p) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    new = []\n    for i in range(n):\n        new.append([arr[i], i])\n    new1 = sorted(new, key=lambda x: x[0])\n    po = 0\n    store = [0] * n\n    for i in range(1, n):\n        if new1[i][0] - new1[i - 1][0] > k:\n            po += 1\n        store[new1[i][1]] = po\n    for i in range(p):\n        (p1, p2) = list(map(int, input().split()))\n        if store[p1 - 1] == store[p2 - 1]:\n            print('Yes')\n        else:\n            print('No')\nsolve()", "(n, k, p) = map(int, input().split())\nl = list(map(int, input().split()))\nt_1 = []\nfor i in range(n):\n    t_1.append([i, l[i]])\nt_1 = sorted(t_1, key=lambda x: x[1], reverse=True)\ndis = {}\nfor i in range(n):\n    if i == 0:\n        dis[i] = t_1[i][1] + k\n        continue\n    if t_1[i - 1][1] - t_1[i][1] <= k:\n        dis[i] = dis[i - 1]\n    else:\n        dis[i] = t_1[i][1] + k\ntrans = {}\nfor i in range(n):\n    trans[t_1[i][0]] = i\nfor i in range(p):\n    (a, b) = map(int, input().split())\n    t_2 = a - 1\n    t_3 = b - 1\n    if dis[trans[t_2]] == dis[trans[t_3]]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, q) = map(int, input().split())\nb = list(map(int, input().split()))\na = sorted(b)\nans = {}\nans[a[0]] = a[0]\nstart = a[0]\nfor i in range(n - 1):\n    if a[i + 1] - a[i] <= k:\n        ans[a[i + 1]] = start\n    else:\n        start = a[i + 1]\n        ans[a[i + 1]] = start\nfor u in range(q):\n    (x, y) = map(int, input().split())\n    if ans[max(b[y - 1], b[x - 1])] <= min(b[x - 1], b[y - 1]):\n        print('Yes')\n    else:\n        print('No')", "(n, k, q) = map(int, input().split())\nb = list(map(int, input().split()))\na = sorted(b)\nans = {}\nans[a[0]] = a[0]\nstart = a[0]\nfor i in range(n - 1):\n    if a[i + 1] - a[i] <= k:\n        ans[a[i + 1]] = start\n    else:\n        start = a[i + 1]\n        ans[a[i + 1]] = start\nfor u in range(q):\n    (x, y) = map(int, input().split())\n    if ans[max(b[y - 1], b[x - 1])] <= min(b[x - 1], b[y - 1]):\n        print('Yes')\n    else:\n        print('No')", "(n, k, q) = map(int, input().split())\nb = list(map(int, input().split()))\na = sorted(b)\nans = {}\nans[a[0]] = a[0]\nstart = a[0]\nfor i in range(n - 1):\n    if a[i + 1] - a[i] <= k:\n        ans[a[i + 1]] = start\n    else:\n        start = a[i + 1]\n        ans[a[i + 1]] = start\nfor u in range(q):\n    (x, y) = map(int, input().split())\n    if ans[max(b[y - 1], b[x - 1])] <= min(b[x - 1], b[y - 1]):\n        print('Yes')\n    else:\n        print('No')", "from sys import stdin\n(n, k, p) = map(int, stdin.readline().split())\nlist1 = list(map(int, stdin.readline().split()))\nlist2 = []\nfor i in range(n):\n    list2.append((list1[i], i + 1))\nlist2.sort(reverse=True)\ndict1 = {}\ndict1[list2[0][1]] = list2[0][0] + k\nprev = list2[0]\nfor each in list2[1:]:\n    if each[0] + k < prev[0]:\n        dict1[each[1]] = each[0] + k\n        prev = each\n    else:\n        dict1[each[1]] = dict1[prev[1]]\n        prev = each\nfor j in range(p):\n    (a, b) = map(int, stdin.readline().split())\n    if dict1[a] == dict1[b]:\n        print('Yes')\n    else:\n        print('No')", "(n, k, p) = list(map(int, input().split()))\ncoor = list(map(int, input().split()))\nforw = []\nsort_coor = []\nfor (i, each) in enumerate(coor):\n    sort_coor.append((each, i))\nsort_coor.sort()\nj = n - 2\nmsg = {}\nmax1 = sort_coor[n - 1][0] + k\nmsg[sort_coor[n - 1][1]] = max1\nfor i in range(n - 1, 0, -1):\n    j = i - 1\n    if sort_coor[i][0] - sort_coor[j][0] <= k:\n        msg[sort_coor[j][1]] = max1\n    else:\n        max1 = sort_coor[j][0] + k\n        msg[sort_coor[j][1]] = max1\nfor i in range(p):\n    (a, b) = map(int, input().split())\n    if msg[b - 1] == msg[a - 1]:\n        print('Yes')\n    else:\n        print('No')", "from sys import stdin\n(n, k, p) = map(int, stdin.readline().split())\nlist1 = list(map(int, stdin.readline().split()))\nlist2 = []\nfor i in range(n):\n    list2.append((list1[i], i + 1))\nlist2.sort(reverse=True)\nprev = (-1, -1)\ndict1 = {}\nfor each in list2:\n    if prev == (-1, -1) or each[0] + k < prev[0]:\n        dict1[each[1]] = each[0] + k\n        prev = each\n    else:\n        dict1[each[1]] = dict1[prev[1]]\n        prev = each\nfor j in range(p):\n    (a, b) = map(int, stdin.readline().split())\n    if dict1[a] == dict1[b]:\n        print('Yes')\n    else:\n        print('No')"]