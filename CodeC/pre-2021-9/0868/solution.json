["import collections\nimport sys\nimport copy\nmod = 10 ** 9 + 7\n\ndef getsum(BITTree, i):\n    s = 0\n    i = i + 1\n    while i > 0:\n        s += BITTree[i]\n        i -= i & -i\n    return s\n\ndef updatebit(BITTree, n, i, v):\n    i += 1\n    while i <= n:\n        BITTree[i] += v\n        i += i & -i\n\ndef construct(arr, n):\n    BITTree = [0] * (n + 1)\n    for i in range(n):\n        updatebit(BITTree, n, i, arr[i])\n    return BITTree\n[n, m, c] = [int(i) for i in input().split()]\nuh = collections.Counter([int(i) for i in input().split()])\nlh = collections.Counter([int(i) for i in input().split()])\nl = []\nfor i in uh:\n    if i in lh:\n        l.append([i, uh[i] * lh[i]])\nl.sort()\nfreq = [i[1] for i in l]\nn = len(freq)\narr = [0] * n\nBITTree = construct(freq, n)\nfor i in range(1, c + 1):\n    if i + 1 <= n:\n        BITTreePresent = construct(arr, n)\n        for j in range(i, n):\n            updatebit(BITTreePresent, n, j, getsum(BITTree, j - 1) * freq[j] % mod)\n        print(getsum(BITTreePresent, n - 1) % mod, end=' ')\n        BITTree = BITTreePresent\n    else:\n        print(0, end=' ')", "import collections\nimport sys\nimport copy\nmod = 10 ** 9 + 7\n\ndef getsum(BITTree, i):\n    s = 0\n    i = i + 1\n    while i > 0:\n        s += BITTree[i]\n        i -= i & -i\n    return s\n\ndef updatebit(BITTree, n, i, v):\n    i += 1\n    while i <= n:\n        BITTree[i] += v\n        i += i & -i\n\ndef construct(arr, n):\n    BITTree = [0] * (n + 1)\n    for i in range(n):\n        updatebit(BITTree, n, i, arr[i])\n    return BITTree\n[n, m, c] = [int(i) for i in input().split()]\nuh = collections.Counter([int(i) for i in input().split()])\nlh = collections.Counter([int(i) for i in input().split()])\nl = []\nfor i in uh:\n    if i in lh:\n        l.append([i, uh[i] * lh[i]])\nl.sort()\nfreq = [i[1] for i in l]\nn = len(freq)\narr = [0] * n\nBITTree = construct(freq, n)\nfor i in range(1, c + 1):\n    if i + 1 <= n:\n        BITTreePresent = construct(arr, n)\n        for j in range(i, n):\n            updatebit(BITTreePresent, n, j, getsum(BITTree, j - 1) * freq[j] % mod)\n        print(getsum(BITTreePresent, n - 1) % mod, end=' ')\n        BITTree = BITTreePresent\n    else:\n        print(0, end=' ')", "import collections\nimport sys\nimport copy\nmod = 10 ** 9 + 7\n\ndef getsum(BITTree, i):\n    s = 0\n    i = i + 1\n    while i > 0:\n        s += BITTree[i]\n        i -= i & -i\n    return s\n\ndef updatebit(BITTree, n, i, v):\n    i += 1\n    while i <= n:\n        BITTree[i] += v\n        i += i & -i\n\ndef construct(arr, n):\n    BITTree = [0] * (n + 1)\n    for i in range(n):\n        updatebit(BITTree, n, i, arr[i])\n    return BITTree\n[n, m, c] = [int(i) for i in input().split()]\nuh = collections.Counter([int(i) for i in input().split()])\nlh = collections.Counter([int(i) for i in input().split()])\nl = []\nfor i in uh:\n    if i in lh:\n        l.append([i, uh[i] * lh[i]])\nl.sort()\nfreq = [i[1] for i in l]\nn = len(freq)\narr = [0] * n\nBITTree = construct(freq, n)\nfor i in range(1, c + 1):\n    if i + 1 <= n:\n        BITTreePresent = construct(arr, n)\n        for j in range(i, n):\n            updatebit(BITTreePresent, n, j, getsum(BITTree, j - 1) * freq[j] % mod)\n        print(getsum(BITTreePresent, n - 1) % mod, end=' ')\n        BITTree = BITTreePresent\n    else:\n        print(0, end=' ')", "import collections\nimport sys\nimport copy\nmod = 10 ** 9 + 7\n\ndef getsum(BITTree, i):\n    s = 0\n    i = i + 1\n    while i > 0:\n        s += BITTree[i]\n        i -= i & -i\n    return s\n\ndef updatebit(BITTree, n, i, v):\n    i += 1\n    while i <= n:\n        BITTree[i] += v\n        i += i & -i\n\ndef construct(arr, n):\n    BITTree = [0] * (n + 1)\n    for i in range(n):\n        updatebit(BITTree, n, i, arr[i])\n    return BITTree\n[n, m, c] = [int(i) for i in input().split()]\nuh = collections.Counter([int(i) for i in input().split()])\nlh = collections.Counter([int(i) for i in input().split()])\nl = []\nfor i in uh:\n    if i in lh:\n        l.append([i, uh[i] * lh[i]])\nl.sort()\nfreq = [i[1] for i in l]\nn = len(freq)\narr = [0] * n\nBITTree = construct(freq, n)\nfor i in range(1, c + 1):\n    if i + 1 <= n:\n        BITTreePresent = construct(arr, n)\n        for j in range(i, n):\n            updatebit(BITTreePresent, n, j, getsum(BITTree, j - 1) * freq[j] % mod)\n        print(getsum(BITTreePresent, n - 1) % mod, end=' ')\n        BITTree = BITTreePresent\n    else:\n        print(0, end=' ')", "import collections\nimport sys\nimport copy\nmod = 10 ** 9 + 7\n\ndef getsum(BITTree, i):\n    s = 0\n    i = i + 1\n    while i > 0:\n        s += BITTree[i]\n        i -= i & -i\n    return s\n\ndef updatebit(BITTree, n, i, v):\n    i += 1\n    while i <= n:\n        BITTree[i] += v\n        i += i & -i\n\ndef construct(arr, n):\n    BITTree = [0] * (n + 1)\n    for i in range(n):\n        updatebit(BITTree, n, i, arr[i])\n    return BITTree\n[n, m, c] = [int(i) for i in input().split()]\nuh = collections.Counter([int(i) for i in input().split()])\nlh = collections.Counter([int(i) for i in input().split()])\nl = []\nfor i in uh:\n    if i in lh:\n        l.append([i, uh[i] * lh[i]])\nl.sort()\nfreq = [i[1] for i in l]\nn = len(freq)\narr = [0] * n\nBITTree = construct(freq, n)\nfor i in range(1, c + 1):\n    if i + 1 <= n:\n        BITTreePresent = construct(arr, n)\n        for j in range(i, n):\n            updatebit(BITTreePresent, n, j, getsum(BITTree, j - 1) * freq[j] % mod)\n        print(getsum(BITTreePresent, n - 1) % mod, end=' ')\n        BITTree = BITTreePresent\n    else:\n        print(0, end=' ')", "import collections\nimport sys\nimport copy\nmod = 10 ** 9 + 7\n\ndef getsum(BITTree, i):\n    s = 0\n    i = i + 1\n    while i > 0:\n        s += BITTree[i]\n        i -= i & -i\n    return s\n\ndef updatebit(BITTree, n, i, v):\n    i += 1\n    while i <= n:\n        BITTree[i] += v\n        i += i & -i\n\ndef construct(arr, n):\n    BITTree = [0] * (n + 1)\n    for i in range(n):\n        updatebit(BITTree, n, i, arr[i])\n    return BITTree\n[n, m, c] = [int(i) for i in input().split()]\nuh = collections.Counter([int(i) for i in input().split()])\nlh = collections.Counter([int(i) for i in input().split()])\nl = []\nfor i in uh:\n    if i in lh:\n        l.append([i, uh[i] * lh[i]])\nl.sort()\nfreq = [i[1] for i in l]\nn = len(freq)\narr = [0] * n\nBITTree = construct(freq, n)\nfor i in range(1, c + 1):\n    if i + 1 <= n:\n        BITTreePresent = construct(arr, n)\n        for j in range(i, n):\n            updatebit(BITTreePresent, n, j, getsum(BITTree, j - 1) * freq[j] % mod)\n        print(getsum(BITTreePresent, n - 1) % mod, end=' ')\n        BITTree = BITTreePresent\n    else:\n        print(0, end=' ')", "import collections\nimport sys\nimport copy\nmod = 10 ** 9 + 7\n\ndef getsum(BITTree, i):\n    s = 0\n    i = i + 1\n    while i > 0:\n        s += BITTree[i]\n        i -= i & -i\n    return s\n\ndef updatebit(BITTree, n, i, v):\n    i += 1\n    while i <= n:\n        BITTree[i] += v\n        i += i & -i\n\ndef construct(arr, n):\n    BITTree = [0] * (n + 1)\n    for i in range(n):\n        updatebit(BITTree, n, i, arr[i])\n    return BITTree\n[n, m, c] = [int(i) for i in input().split()]\nuh = collections.Counter([int(i) for i in input().split()])\nlh = collections.Counter([int(i) for i in input().split()])\nl = []\nfor i in uh:\n    if i in lh:\n        l.append([i, uh[i] * lh[i]])\nl.sort()\nfreq = [i[1] for i in l]\nn = len(freq)\narr = [0] * n\nBITTree = construct(freq, n)\nfor i in range(1, c + 1):\n    if i + 1 <= n:\n        BITTreePresent = construct(arr, n)\n        for j in range(i, n):\n            updatebit(BITTreePresent, n, j, getsum(BITTree, j - 1) * freq[j] % mod)\n        print(getsum(BITTreePresent, n - 1) % mod, end=' ')\n        BITTree = BITTreePresent\n    else:\n        print(0, end=' ')", "import collections\nimport sys\nimport copy\nmod = 10 ** 9 + 7\n\ndef getsum(BITTree, i):\n    s = 0\n    i = i + 1\n    while i > 0:\n        s += BITTree[i]\n        i -= i & -i\n    return s\n\ndef updatebit(BITTree, n, i, v):\n    i += 1\n    while i <= n:\n        BITTree[i] += v\n        i += i & -i\n\ndef construct(arr, n):\n    BITTree = [0] * (n + 1)\n    for i in range(n):\n        updatebit(BITTree, n, i, arr[i])\n    return BITTree\n[n, m, c] = [int(i) for i in input().split()]\nuh = collections.Counter([int(i) for i in input().split()])\nlh = collections.Counter([int(i) for i in input().split()])\nl = []\nfor i in uh:\n    if i in lh:\n        l.append([i, uh[i] * lh[i]])\nl.sort()\nfreq = [i[1] for i in l]\nn = len(freq)\narr = [0] * n\nBITTree = construct(freq, n)\nfor i in range(1, c + 1):\n    if i + 1 <= n:\n        BITTreePresent = construct(arr, n)\n        for j in range(i, n):\n            updatebit(BITTreePresent, n, j, getsum(BITTree, j - 1) * freq[j] % mod)\n        print(getsum(BITTreePresent, n - 1) % mod, end=' ')\n        BITTree = BITTreePresent\n    else:\n        print(0, end=' ')", "import collections\nimport sys\nimport copy\nmod = 10 ** 9 + 7\n\ndef getsum(BITTree, i):\n    s = 0\n    i = i + 1\n    while i > 0:\n        s += BITTree[i]\n        i -= i & -i\n    return s\n\ndef updatebit(BITTree, n, i, v):\n    i += 1\n    while i <= n:\n        BITTree[i] += v\n        i += i & -i\n\ndef construct(arr, n):\n    BITTree = [0] * (n + 1)\n    for i in range(n):\n        updatebit(BITTree, n, i, arr[i])\n    return BITTree\n[n, m, c] = [int(i) for i in input().split()]\nuh = collections.Counter([int(i) for i in input().split()])\nlh = collections.Counter([int(i) for i in input().split()])\nl = []\nfor i in uh:\n    if i in lh:\n        l.append([i, uh[i] * lh[i]])\nl.sort()\nfreq = [i[1] for i in l]\nn = len(freq)\narr = [0] * n\nBITTree = construct(freq, n)\nfor i in range(1, c + 1):\n    if i + 1 <= n:\n        BITTreePresent = construct(arr, n)\n        for j in range(i, n):\n            updatebit(BITTreePresent, n, j, getsum(BITTree, j - 1) * freq[j] % mod)\n        print(getsum(BITTreePresent, n - 1) % mod, end=' ')\n        BITTree = BITTreePresent\n    else:\n        print(0, end=' ')", "from collections import Counter\n(n, m, c) = map(int, input().split())\nup = Counter(list(map(int, input().split())))\ndown = Counter(list(map(int, input().split())))\ndp = [[0 for _ in range(c + 1)] for _ in range(c + 1)]\nfor i in range(1, c + 1):\n    dp[0][i] = (dp[0][i - 1] + up.get(i, 0) * down.get(i, 0)) % (10 ** 9 + 7)\nfor i in range(1, c + 1):\n    for j in range(1, c + 1):\n        dp[i][j] = (dp[i][j - 1] + up.get(j, 0) * down.get(j, 0) * dp[i - 1][j - 1]) % (10 ** 9 + 7)\nfor i in range(1, c + 1):\n    print(dp[i][c], end=' ', sep='')\nprint()", "from collections import Counter\n(n, m, c) = map(int, input().split())\nup = Counter(list(map(int, input().split())))\ndown = Counter(list(map(int, input().split())))\ndp = [[0 for _ in range(c + 1)] for _ in range(c + 1)]\nfor i in range(1, c + 1):\n    dp[0][i] = (dp[0][i - 1] + up.get(i, 0) * down.get(i, 0)) % (10 ** 9 + 7)\nfor i in range(1, c + 1):\n    for j in range(1, c + 1):\n        dp[i][j] = (dp[i][j - 1] + up.get(j, 0) * down.get(j, 0) * dp[i - 1][j - 1]) % (10 ** 9 + 7)\nfor i in range(1, c + 1):\n    print(dp[i][c], sep='', end=' ')\nprint()", "from collections import Counter\n(n, m, c) = map(int, input().split())\nup = Counter(list(map(int, input().split())))\ndown = Counter(list(map(int, input().split())))\ndp = [[0 for _ in range(c + 1)] for _ in range(c + 1)]\nfor i in range(1, c + 1):\n    dp[0][i] = (dp[0][i - 1] + up.get(i, 0) * down.get(i, 0)) % (10 ** 9 + 7)\nfor i in range(1, c + 1):\n    for j in range(1, c + 1):\n        dp[i][j] = (dp[i][j - 1] + up.get(j, 0) * down.get(j, 0) * dp[i - 1][j - 1]) % (10 ** 9 + 7)\nfor i in range(1, c + 1):\n    print(dp[i][c], end=' ', sep='')\nprint()", "(n, m, c) = map(int, input().split())\nlst1 = list(map(int, input().split()))\nlst2 = list(map(int, input().split()))\nmod = 10 ** 9 + 7\nup = [0 for _ in range(c + 2)]\nlo = [0 for _ in range(c + 2)]\nfor i in range(n):\n    up[lst1[i]] += 1\nfor i in range(m):\n    lo[lst2[i]] += 1\ndp = [[0 for _ in range(1005)] for _ in range(1005)]\nfor i in range(1, c + 2):\n    dp[0][i] = (dp[0][i - 1] % mod + up[i] % mod * (lo[i] % mod) % mod) % mod\nfor i in range(1, c + 1):\n    for j in range(1, c + 1):\n        dp[i][j] = (dp[i - 1][j - 1] % mod * up[j] % mod * lo[j] % mod % mod + dp[i][j - 1] % mod) % mod\n    print(dp[i][c], end=' ')", "(n, m, c) = map(int, input().split())\nlst1 = list(map(int, input().split()))\nlst2 = list(map(int, input().split()))\nmod = 10 ** 9 + 7\nup = [0 for _ in range(c + 2)]\nlo = [0 for _ in range(c + 2)]\nfor i in range(n):\n    up[lst1[i]] += 1\nfor i in range(m):\n    lo[lst2[i]] += 1\ndp = [[0 for _ in range(1005)] for _ in range(1005)]\nfor i in range(1, c + 2):\n    dp[0][i] = (dp[0][i - 1] % mod + up[i] % mod * (lo[i] % mod) % mod) % mod\nfor i in range(1, c + 1):\n    for j in range(1, c + 1):\n        dp[i][j] = (dp[i - 1][j - 1] % mod * up[j] % mod * lo[j] % mod % mod + dp[i][j - 1] % mod) % mod\n    print(dp[i][c], end=' ')", "import sys\ninfo = list(map(int, sys.stdin.readline().split(' ')))\nlist1 = list(map(int, sys.stdin.readline().split(' ')))\nlist2 = list(map(int, sys.stdin.readline().split(' ')))\nnumbers1 = [0] * (1 + max(list1))\nnumbers2 = [0] * (1 + max(list2))\nfor i in range(len(list1)):\n    numbers1[list1[i]] = numbers1[list1[i]] + 1\nfor i in range(len(list2)):\n    numbers2[list2[i]] = numbers2[list2[i]] + 1\nif max(list1) <= max(list2):\n    a = max(list1)\n    b = max(list2)\nelse:\n    a = max(list2)\n    b = max(list1)\nif b <= info[0]:\n    b = info[0]\nnumbers3 = [0] * (b + 1)\nfor i in range(a + 1):\n    numbers3[i] = numbers1[i] * numbers2[i]\nresult = [0] * (1 + b)\nresult[0] = result[0] + numbers3[1]\nfor i in range(2, b + 1):\n    if numbers3[i] != 0:\n        old = list(result)\n        result[0] = result[0] + numbers3[i]\n        for j in range(1, i):\n            result[j] = numbers3[i] * old[j - 1] + old[j]\nfor i in range(1, info[2] + 1):\n    result[i] = result[i] % 1000000007\n    print(str(result[i]), end=' ')", "inp = list(map(int, input().split()))\nU = list(map(int, input().split()))\nmax1 = max(U)\nsum2 = 0\nsum3 = 0\nz = 1\nL = list(map(int, input().split()))\nf = list((0 for i in range(1, 100001)))\nf1 = list((0 for i in range(1, 100001)))\nfa = list((0 for i in range(1, inp[2] + 2)))\nl1 = list((0 for i in range(1, 100001)))\nu1 = list((0 for i in range(1, 100001)))\nfor i in L:\n    l1[i] += 1\nfor i in U:\n    u1[i] += 1\nfor j in range(max1, 0, -1):\n    f[j] = l1[j] * u1[j]\n    f1[j] = f[j]\n    sum2 += f[j]\nfor j in range(1, max1 + 1):\n    for i in range(1, max1 - j + 1):\n        sum2 -= f1[i]\n        f1[i] = f[i] * sum2\n        sum3 += f1[i]\n    sum2 = sum3\n    fa[z] = sum3\n    sum3 = 0\n    z += 1\nfor i in range(1, inp[2] + 1):\n    print(fa[i] % 1000000007, end=' ')", "import time\nl = [0] * 1002\nu = [0] * 1002\nr = []\n(n, m, k) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nfor i in range(n):\n    u[a[i]] += 1\na = [int(x) for x in input().split()]\nfor i in range(m):\n    l[a[i]] += 1\nj = 0\nfor i in range(1001):\n    if l[i] * u[i] != 0:\n        r.append(l[i] * u[i])\n        j += 1\nr.append(0)\nx = []\nfor i in range(k + 1):\n    sum = r[0]\n    x.append([0] * j)\n    for ii in range(j):\n        if i == 0 or ii == 0:\n            x[i][ii] = 0\n        elif i > ii:\n            x[i][ii] = 0\n        elif i == 1:\n            x[i][ii] = (x[i][ii - 1] + r[ii] * sum) % 1000000007\n            sum = (sum + r[ii]) % 1000000007\n        else:\n            x[i][ii] = (x[i - 1][ii - 1] * r[ii] + x[i][ii - 1]) % 1000000007\nfor i in range(1, k + 1):\n    print(x[i][j - 1] % 1000000007, end=' ')", "import time\nl = [0] * 1002\nu = [0] * 1002\nr = []\n(n, m, k) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nfor i in range(n):\n    u[a[i]] += 1\na = [int(x) for x in input().split()]\nfor i in range(m):\n    l[a[i]] += 1\nj = 0\nfor i in range(1001):\n    if l[i] * u[i] != 0:\n        r.append(l[i] * u[i])\n        j += 1\nr.append(0)\nx = []\nfor i in range(k + 1):\n    sum = r[0]\n    x.append([0] * (j + 1))\n    for ii in range(j + 1):\n        if i == 0 or ii == 0:\n            x[i][ii] = 0\n        elif i > ii:\n            x[i][ii] = 0\n        elif i == 1:\n            x[i][ii] = (x[i][ii - 1] + r[ii] * sum) % 1000000007\n            sum = (sum + r[ii]) % 1000000007\n        else:\n            x[i][ii] = (x[i - 1][ii - 1] * r[ii] + x[i][ii - 1]) % 1000000007\nfor i in range(1, k + 1):\n    print(x[i][j] % 1000000007, end=' ')", "mod = 10 ** 9 + 7\nMAX = 10 ** 3 + 5\n(n, m, c) = map(int, input().split())\n(h1, h2, v1, ans) = ([0] * MAX, [0] * MAX, [], [])\n(l1, l2) = ([int(i) for i in input().split()], [int(i) for i in input().split()])\nfor i in range(len(l1)):\n    h1[l1[i]] += 1\nfor i in range(len(l2)):\n    h2[l2[i]] += 1\nfor i in range(MAX):\n    if h1[i] > 0 or h2[i] > 0:\n        v1.append(h1[i] * h2[i])\nl = len(v1)\ndp = [[0 for x in range(l)] for x in range(l)]\nfor i in range(l):\n    if i == 0:\n        for j in range(i + 1, l):\n            dp[i][j] += dp[i][j - 1]\n            x = i\n            for k in range(x, j):\n                dp[i][j] += v1[k] * v1[j]\n    else:\n        for j in range(i + 1, l):\n            dp[i][j] += dp[i - 1][j - 1] * v1[j] + dp[i][j - 1]\n    ans.append(dp[i][l - 1])\nif l < c:\n    for i in range(l):\n        print(ans[i] % mod, end=' ')\n    for i in range(l, c):\n        print('0', end=' ')\nelse:\n    for i in range(c):\n        print(ans[i] % mod, end=' ')", "import math\nA = [int(x) for x in input().split()]\n(n, m, c, maxx) = (A[0], A[1], A[2], 0)\nu = [int(x) for x in input().split()]\nl = [int(x) for x in input().split()]\nU = [int(0) for x in range(1002)]\nL = [int(0) for x in range(1002)]\nfor i in range(n):\n    U[u[i]] += 1\n    if u[i] > maxx:\n        maxx = u[i]\nfor i in range(m):\n    L[l[i]] += 1\n    if l[i] > maxx:\n        maxx = l[i]\na = [int(0) for x in range(maxx + 1)]\n(a[0], k) = (0, 1)\nfor i in range(maxx + 1):\n    if U[i] * L[i] != 0:\n        a[k] = U[i] * L[i] % 1000000007\n        k += 1\nk -= 1\nb = [[int(0) for x in range(1005)] for y in range(1005)]\nfor j in range(1, k + 1):\n    b[0][j] = (b[0][j - 1] + a[j]) % 1000000007\nfor i in range(1, k):\n    for j in range(i + 1, k):\n        b[i][j] = (b[i][j - 1] + b[i - 1][j - 1] * a[j]) % 1000000007\nsum = 0\nfor i in range(k):\n    sum = 0\n    for j in range(i + 1, k):\n        sum = (sum + b[i][j] * a[j + 1]) % 1000000007\n    print(sum, end=' ')\nfor i in range(k, c):\n    print('0', end=' ')", "from itertools import chain\n(n, m, c) = map(int, input().split())\nu = list(map(int, input().split()))\nl = list(map(int, input().split()))\nupper = [0] * 1001\nlower = [0] * 1001\nrcount = []\nfor i in range(m):\n    lower[l[i]] += 1\nfor i in range(n):\n    upper[u[i]] += 1\nfor i in range(1001):\n    if upper[i] * lower[i] != 0:\n        rcount.append(upper[i] * lower[i])\nans = [1]\nfor i in rcount:\n    ans = [(p + q * i % 1000000007) % 1000000007 for (p, q) in zip(chain([0], ans), chain(ans, [0]))]\nlength = len(rcount)\na = []\nfor i in range(length - 2, -1, -1):\n    a.append(ans[i])\nlength = len(a)\nfor i in range(0, c):\n    if i > length - 1:\n        print(0, end=' ')\n    else:\n        print(a[i], end=' ')", "import sys\n(n, m, c) = map(int, input().split())\nu = []\nl = []\nuln = []\nu = map(int, sys.stdin.readline().split())\nl = map(int, sys.stdin.readline().split())\nun = [0] * c\nln = [0] * c\nuln = [0] * c\nfor i in u:\n    un[i - 1] += 1\nfor i in l:\n    ln[i - 1] += 1\nfor i in range(c):\n    uln[i] = un[i] * ln[i]\nf = {}\nf[1, 1] = uln[0]\nfor i in range(2, len(uln) + 1):\n    f[1, i] = f[1, i - 1] + uln[i - 1]\nfor j in range(2, len(uln) + 1):\n    for i in range(2, len(uln) + 1):\n        if i < j:\n            f[i, j] = f[i, j - 1] + f[i - 1, j - 1] * uln[j - 1]\n        elif i == j:\n            f[i, j] = f[i - 1, j - 1] * uln[j - 1]\n        else:\n            pass\nfor i in range(2, c + 1):\n    sys.stdout.write(str(f[i, c] % (10 ** 9 + 7)) + ' ')\nprint(0)", "import sys\ninput = sys.stdin.readline\nmodulus = 10 ** 9 + 7\n(n, m, cs) = [int(i) for i in input().split()]\nns = [int(i) for i in input().split()]\nms = [int(i) for i in input().split()]\nncs = [0] * (cs + 1)\nmcs = [0] * (cs + 1)\nfor ni in ns:\n    ncs[ni] += 1\nfor mi in ms:\n    mcs[mi] += 1\nscs = [ncs[i] * mcs[i] for i in range(cs + 1)]\nwhile 0 in scs:\n    scs.remove(0)\noutput = ''\npsums = scs.copy()\nfor c in range(1, cs + 1):\n    nsums = []\n    runningsum = 0\n    for (r, s) in zip(scs[c:], psums):\n        runningsum += s\n        runningsum %= modulus\n        nsums.append(r * runningsum % modulus)\n    output += str(sum(nsums) % modulus) + ' '\n    psums = nsums\noutput.rstrip()\nprint(output)", "s = input()\nx = s.split(' ')\nn = int(x[0])\nm = int(x[1])\nc = int(x[2])\ns = input()\nupper = s.split(' ')\ns = input()\nlower = s.split(' ')\nupper = list(map(int, upper))\nlower = list(map(int, lower))\nupper.sort()\nlower.sort()\nif lower[m - 1] > upper[n - 1]:\n    max = lower[m - 1]\nelse:\n    max = upper[n - 1]\ncombinations = [0] * max\ncumulative = [0] * max\nindexU = 0\nindexL = 0\ncU = 0\ncL = 0\ntotal = 0\nfor i in range(0, max):\n    while indexU < n and upper[indexU] == i + 1:\n        cU += 1\n        indexU += 1\n    while indexL < m and lower[indexL] == i + 1:\n        cL += 1\n        indexL += 1\n    combinations[i] = cU * cL\n    cU = 0\n    cL = 0\ncumulative[0] = combinations[0]\nfor i in range(1, max):\n    cumulative[i] = cumulative[i - 1] + combinations[i]\nmod = 1000000007\nfor i in range(1, c + 1):\n    newArray = [0] * max\n    for j in range(i, max):\n        total += cumulative[j - 1] % mod * (combinations[j] % mod) % mod\n        total = total % mod\n        newArray[j] = newArray[j - 1] % mod + cumulative[j - 1] % mod * (combinations[j] % mod) % mod\n    print(total, end=' ')\n    cumulative = newArray\n    total = 0", "def solve(N, M, C, U, L):\n    u = {}\n    l = {}\n    for i in U:\n        if i in u:\n            u[i] += 1\n        else:\n            u[i] = 1\n    for i in L:\n        if i in l:\n            l[i] += 1\n        else:\n            l[i] = 1\n    c = {}\n    for i in u:\n        if i in l:\n            c[i] = u[i] * l[i]\n    c = list(c.items())\n    c.sort()\n    c.reverse()\n    res = [[0] * len(c)]\n    for col in range(len(c) - 1, -1, -1):\n        if col == len(c) - 1:\n            res[0][col] = c[col][1]\n        else:\n            res[0][col] = res[0][col + 1] + c[col][1]\n    for row in range(1, C):\n        res.append([0] * len(c))\n        for col in range(len(c) - row - 1, -1, -1):\n            res[row][col] = c[col][1] * res[row - 1][col + 1] + res[row][col + 1]\n    res.append([0] * len(c))\n    q = []\n    for i in res[1:]:\n        q.append(str(i[0] % 1000000007))\n    return ' '.join(q)\n\ndef main(infile, outfile):\n    (N, M, C) = [int(x) for x in infile.readline().split()]\n    U = [int(x) for x in infile.readline().split()]\n    L = [int(x) for x in infile.readline().split()]\n    outfile.write(str(solve(N, M, C, U, L)) + '\\n')\nfrom sys import stdin, stdout\nmain(stdin, stdout)", "(n, m, c) = map(int, input().split())\nl = list(map(int, input().split()))\nupper = [0] * 1001\nfor i in l:\n    upper[i] += 1\nl = list(map(int, input().split()))\nlower = [0] * 1001\nfor i in l:\n    lower[i] += 1\nmod = 10 ** 9 + 7\nspheres = []\nfor i in range(1001):\n    if upper[i] != 0 and lower[i] != 0:\n        spheres.append(upper[i] * lower[i] % mod)\ntotal = len(spheres)\nsph = spheres[:]\ncumu = [0] * len(sph)\nfor k in range(1, c + 1):\n    if k >= total:\n        print(0, end=' ')\n        continue\n    cumu[k - 1] = sph[k - 1]\n    ans = 0\n    for i in range(k, total):\n        cumu[i] = (cumu[i - 1] + sph[i]) % mod\n        sph[i] = spheres[i] * cumu[i - 1] % mod\n        ans = (ans + sph[i]) % mod\n    print(ans, end=' ')", "__author__ = 'Om Kumar Sahoo'\n(n, m, c) = [int(x) for x in input().split()]\nu = [0] * (c + 1)\nl = [0] * (c + 1)\nfor x in input().split():\n    u[int(x)] += 1\nfor x in input().split():\n    l[int(x)] += 1\narr = [0] * (c + 1)\nfor i in range(1, c + 1):\n    arr[i] = u[i] * l[i]\nn = len(arr)\nans = [0] * (n + 1)\nans[0] = 1\ntr = [0, 1]\nfor i in range(n):\n    ans[i + 1] = ans[i] * arr[i] % 1000000007\n    j = 0\n    while j < i and j < c + 2:\n        ans[j + 1] = (ans[j + 1] + arr[i] * (ans[j] - arr[i] * tr[j])) % 1000000007\n        j += 1\n    tr = [0] + ans\nfor i in range(c):\n    print(ans[i + 2], end=' ')"]