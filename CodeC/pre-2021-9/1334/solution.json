["MOD = 10 ** 9 + 7\n\ndef calc_hops(N, A, directed, to_directed, calc, node):\n    if calc[node] != -1:\n        return calc[node]\n    our_a = A[node]\n    hops = 0\n    for i in directed[node]:\n        if A[i] < our_a:\n            hops += 1 + calc_hops(N, A, directed, to_directed, calc, i)\n    for i in to_directed[node]:\n        if A[i] < our_a:\n            hops += 1 + calc_hops(N, A, directed, to_directed, calc, i)\n    hops %= MOD\n    calc[node] = hops\n    return hops\nfor _ in range(int(input())):\n    N = int(input())\n    P = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    directed = [set([i]) for i in range(N)]\n    to_directed = [set([i]) for i in range(N)]\n    for i in range(N - 1):\n        if P[i] - 1 != i:\n            break\n    else:\n        print((pow(2, N, MOD) - 1 - N) % MOD)\n        continue\n    for i in range(N - 1):\n        p = P[i] - 1\n        directed[p].add(i + 1)\n        to_directed[i + 1].add(p)\n        for c in to_directed[p]:\n            directed[c].update(directed[i + 1])\n        for d in directed[i + 1]:\n            to_directed[d].update(to_directed[p])\n    calc = [-1 for i in range(N)]\n    print(sum([calc_hops(N, A, directed, to_directed, calc, i) for i in range(N)]) % MOD)", "MOD = 10 ** 9 + 7\n\ndef calc_hops(N, A, directed, to_directed, calc, node):\n    if calc[node] != -1:\n        return calc[node]\n    our_a = A[node]\n    hops = 0\n    for i in directed[node]:\n        if A[i] < our_a:\n            hops += 1 + calc_hops(N, A, directed, to_directed, calc, i)\n    for i in to_directed[node]:\n        if A[i] < our_a:\n            hops += 1 + calc_hops(N, A, directed, to_directed, calc, i)\n    hops %= MOD\n    calc[node] = hops\n    return hops\nfor _ in range(int(input())):\n    N = int(input())\n    P = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    directed = [set([i]) for i in range(N)]\n    to_directed = [set([i]) for i in range(N)]\n    for i in range(N - 1):\n        if P[i] - 1 != i:\n            break\n    else:\n        print((pow(2, N, MOD) - 1 - N) % MOD)\n        continue\n    for i in range(N - 1):\n        p = P[i] - 1\n        directed[p].add(i + 1)\n        to_directed[i + 1].add(p)\n        for c in to_directed[p]:\n            directed[c].update(directed[i + 1])\n        for d in directed[i + 1]:\n            to_directed[d].update(to_directed[p])\n    ans = 0\n    calc = [-1 for i in range(N)]\n    for i in range(N):\n        hops = calc_hops(N, A, directed, to_directed, calc, i)\n        ans += hops\n    print(ans % MOD)"]