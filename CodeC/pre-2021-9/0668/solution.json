["def compute(mag, iro, k):\n    res = 0\n    while mag and iro:\n        mc = mag.pop()\n        ic = iro.pop()\n        if mc > ic:\n            if mc - ic <= k:\n                res += 1\n            else:\n                iro.append(ic)\n        elif ic - mc <= k:\n            res += 1\n        else:\n            mag.append(mc)\n    return res\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    s = s.replace(':', '__')\n    l = len(s)\n    mag = list()\n    iro = list()\n    ans = 0\n    for i in range(l):\n        if s[i] == 'X':\n            ans += compute(mag, iro, k)\n            (mag, iro) = ([], [])\n        elif s[i] == 'I':\n            iro.append(i)\n        elif s[i] == 'M':\n            mag.append(i)\n    ans += compute(mag, iro, k)\n    print(ans)", "def compute(mag, iro, k):\n    res = 0\n    while mag and iro:\n        mc = mag.pop()\n        ic = iro.pop()\n        if mc > ic:\n            if mc - ic <= k:\n                res += 1\n            else:\n                iro.append(ic)\n        elif ic - mc <= k:\n            res += 1\n        else:\n            mag.append(mc)\n    return res\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    s = s.replace(':', '__')\n    l = len(s)\n    mag = list()\n    iro = list()\n    ans = 0\n    for i in range(l):\n        if s[i] == 'X':\n            ans += compute(mag, iro, k)\n            (mag, iro) = ([], [])\n        elif s[i] == 'I':\n            iro.append(i)\n        elif s[i] == 'M':\n            mag.append(i)\n    ans += compute(mag, iro, k)\n    print(ans)", "from collections import deque\nfor i in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    l = ''\n    k = k + 1\n    for i in range(n):\n        if s[i] == ':':\n            l += ':'\n        l += s[i]\n    m = deque()\n    I = deque()\n    n = len(l)\n    cnt = 0\n    for i in range(n):\n        if l[i] == 'X':\n            while m:\n                m.pop()\n            while I:\n                I.pop()\n        if l[i] == 'I':\n            assiI = False\n            while m:\n                ans = k - abs(m[0] - i)\n                if ans > 0:\n                    cnt += 1\n                    m.popleft()\n                    assiI = True\n                    break\n                else:\n                    m.popleft()\n            if assiI == False:\n                I.append(i)\n        if l[i] == 'M':\n            assM = False\n            while I:\n                if k - abs(I[0] - i) > 0:\n                    cnt += 1\n                    I.popleft()\n                    assM = True\n                    break\n                else:\n                    I.popleft()\n            if assM == False:\n                m.append(i)\n    print(cnt)", "t = int(input())\nfor t in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    i = 0\n    j = 0\n    a = 0\n    while i < n and j < n:\n        if s[i] == 'M':\n            if s[j] == 'I':\n                c = 0\n                if i > j:\n                    z = s[j:i]\n                    c = z.count(':')\n                else:\n                    z = s[i:j]\n                    c = z.count(':')\n                p = k + 1 - abs(i - j) - c\n                if p > 0:\n                    a += 1\n                    i += 1\n                    j += 1\n                elif i < j:\n                    i += 1\n                else:\n                    j += 1\n            elif s[j] == 'X':\n                j += 1\n                i = j\n            else:\n                j += 1\n        elif s[i] == 'X':\n            i += 1\n            j = i\n        else:\n            i += 1\n    print(a)", "t = int(input())\nfor t in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    i = 0\n    j = 0\n    a = 0\n    while i < n and j < n:\n        if s[i] == 'M':\n            if s[j] == 'I':\n                c = 0\n                if i > j:\n                    z = s[j:i]\n                    c = z.count(':')\n                else:\n                    z = s[i:j]\n                    c = z.count(':')\n                p = k + 1 - abs(i - j) - c\n                if p > 0:\n                    a += 1\n                    i += 1\n                    j += 1\n                elif i < j:\n                    i += 1\n                else:\n                    j += 1\n            elif s[j] == 'X':\n                j += 1\n                i = j\n            else:\n                j += 1\n        elif s[i] == 'X':\n            i += 1\n            j = i\n        else:\n            i += 1\n    print(a)", "t = int(input())\nfor t in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    i = 0\n    j = 0\n    a = 0\n    while i < n and j < n:\n        if s[i] == 'M':\n            if s[j] == 'I':\n                c = 0\n                if i > j:\n                    z = s[j:i]\n                    c = z.count(':')\n                else:\n                    z = s[i:j]\n                    c = z.count(':')\n                p = k + 1 - abs(i - j) - c\n                if p > 0:\n                    a += 1\n                    i += 1\n                    j += 1\n                elif i < j:\n                    i += 1\n                else:\n                    j += 1\n            elif s[j] == 'X':\n                j += 1\n                i = j\n            else:\n                j += 1\n        elif s[i] == 'X':\n            i += 1\n            j = i\n        else:\n            i += 1\n    print(a)", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter\nimport math, heapq\ninput = stdin.readline\n\ndef get_pairs(s, n):\n    start = 0\n    pairs = list()\n    for i in range(n):\n        if s[i] == 'X':\n            pairs.append([start, i])\n            start = i + 1\n    if s[n - 1] != 'X':\n        pairs.append([start, n])\n    return pairs\n\ndef get_prefixSum(s, n):\n    px = [0]\n    cnt = 0\n    for i in range(n):\n        if s[i] == ':':\n            cnt += 1\n        px.append(cnt)\n    return px\n\ndef solve(p, q):\n    mpos = [i for i in range(p, q) if s[i] == 'M']\n    np = len(mpos)\n    (res, itr) = (0, 0)\n    for i in range(p, q):\n        if s[i] == 'I':\n            power = 0\n            while True:\n                if itr == np:\n                    break\n                if mpos[itr] < i:\n                    power = k + 1 - abs(mpos[itr] - i) - (px[i + 1] - px[mpos[itr]])\n                    if power <= 0:\n                        itr += 1\n                else:\n                    power = k + 1 - abs(mpos[itr] - i) - (px[mpos[itr] + 1] - px[i])\n                    if power <= 0:\n                        break\n                if power > 0:\n                    itr += 1\n                    res += 1\n                    break\n    return res\nt = int(input().strip())\nfor _ in range(t):\n    (n, k) = list(map(int, input().strip().split()))\n    s = input().strip()\n    s = list(s)\n    pairs = get_pairs(s, n)\n    px = get_prefixSum(s, n)\n    ans = 0\n    for pair in pairs:\n        res = solve(*pair)\n        ans += res\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    c = ''\n    for j in s:\n        if j == ':':\n            c += j\n        c += j\n    ans = 0\n    m = []\n    a = []\n    x = 0\n    for z in c:\n        if z == 'I':\n            while len(m) > 0 and m[0] + k < x:\n                m.pop(0)\n            if len(m) > 0:\n                ans += 1\n                m.pop(0)\n            else:\n                a.append(x)\n        elif z == 'M':\n            while len(a) > 0 and a[0] + k < x:\n                a.pop(0)\n            if len(a) > 0:\n                ans += 1\n                a.pop(0)\n            else:\n                m.append(x)\n        elif z == 'X':\n            a.clear()\n            m.clear()\n        x += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(s) for s in input().split(' ')]\n    s = input()\n    newString = ''\n    for char in s:\n        if char == ':':\n            newString += char\n        newString += char\n    ans = 0\n    queueMag = []\n    queueIron = []\n    j = 0\n    for char in newString:\n        if char == 'I':\n            while len(queueMag) > 0 and queueMag[0] + k < j:\n                queueMag.pop(0)\n            if len(queueMag) > 0:\n                ans += 1\n                queueMag.pop(0)\n            else:\n                queueIron.append(j)\n        elif char == 'M':\n            while len(queueIron) > 0 and queueIron[0] + k < j:\n                queueIron.pop(0)\n            if len(queueIron) > 0:\n                ans += 1\n                queueIron.pop(0)\n            else:\n                queueMag.append(j)\n        elif char == 'X':\n            queueIron.clear()\n            queueMag.clear()\n        j += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(s) for s in input().split(' ')]\n    s = input()\n    newString = ''\n    for char in s:\n        if char == ':':\n            newString += char\n        newString += char\n    ans = 0\n    queueMag = []\n    queueIron = []\n    j = 0\n    for char in newString:\n        if char == 'I':\n            while len(queueMag) > 0 and queueMag[0] + k < j:\n                queueMag.pop(0)\n            if len(queueMag) > 0:\n                ans += 1\n                queueMag.pop(0)\n            else:\n                queueIron.append(j)\n        elif char == 'M':\n            while len(queueIron) > 0 and queueIron[0] + k < j:\n                queueIron.pop(0)\n            if len(queueIron) > 0:\n                ans += 1\n                queueIron.pop(0)\n            else:\n                queueMag.append(j)\n        elif char == 'X':\n            queueIron.clear()\n            queueMag.clear()\n        j += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(s) for s in input().split(' ')]\n    s = input()\n    newString = ''\n    for char in s:\n        if char == ':':\n            newString += char\n        newString += char\n    ans = 0\n    queueMag = []\n    queueIron = []\n    j = 0\n    for char in newString:\n        if char == 'I':\n            while len(queueMag) > 0 and queueMag[0] + k < j:\n                queueMag.pop(0)\n            if len(queueMag) > 0:\n                ans += 1\n                queueMag.pop(0)\n            else:\n                queueIron.append(j)\n        elif char == 'M':\n            while len(queueIron) > 0 and queueIron[0] + k < j:\n                queueIron.pop(0)\n            if len(queueIron) > 0:\n                ans += 1\n                queueIron.pop(0)\n            else:\n                queueMag.append(j)\n        elif char == 'X':\n            queueIron.clear()\n            queueMag.clear()\n        j += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(s) for s in input().split(' ')]\n    s = input()\n    newString = ''\n    for char in s:\n        if char == ':':\n            newString += char\n        newString += char\n    ans = 0\n    queueMag = []\n    queueIron = []\n    j = 0\n    for char in newString:\n        if char == 'I':\n            while len(queueMag) > 0 and queueMag[0] + k < j:\n                queueMag.pop(0)\n            if len(queueMag) > 0:\n                ans += 1\n                queueMag.pop(0)\n            else:\n                queueIron.append(j)\n        elif char == 'M':\n            while len(queueIron) > 0 and queueIron[0] + k < j:\n                queueIron.pop(0)\n            if len(queueIron) > 0:\n                ans += 1\n                queueIron.pop(0)\n            else:\n                queueMag.append(j)\n        elif char == 'X':\n            queueIron.clear()\n            queueMag.clear()\n        j += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(s) for s in input().split(' ')]\n    s = input()\n    newString = ''\n    for char in s:\n        if char == ':':\n            newString += char\n        newString += char\n    ans = 0\n    queueMag = []\n    queueIron = []\n    j = 0\n    for char in newString:\n        if char == 'I':\n            while len(queueMag) > 0 and queueMag[0] + k < j:\n                queueMag.pop(0)\n            if len(queueMag) > 0:\n                ans += 1\n                queueMag.pop(0)\n            else:\n                queueIron.append(j)\n        elif char == 'M':\n            while len(queueIron) > 0 and queueIron[0] + k < j:\n                queueIron.pop(0)\n            if len(queueIron) > 0:\n                ans += 1\n                queueIron.pop(0)\n            else:\n                queueMag.append(j)\n        elif char == 'X':\n            queueIron.clear()\n            queueMag.clear()\n        j += 1\n    print(ans)", "from collections import deque\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    string = input()\n    a = k + 1\n    ans = 0\n    l = ''\n    for i in string:\n        if i == ':':\n            l += ':'\n        l += i\n    m = deque()\n    I = deque()\n    for i in range(len(l)):\n        if l[i] == 'X':\n            while m:\n                m.pop()\n            while I:\n                I.pop()\n        elif l[i] == 'I':\n            foundM = False\n            while m:\n                if a - abs(m[0] - i) > 0:\n                    ans += 1\n                    foundM = True\n                    m.popleft()\n                    break\n                else:\n                    m.popleft()\n            if foundM == False:\n                I.append(i)\n        elif l[i] == 'M':\n            foundI = False\n            while I:\n                if a - abs(I[0] - i) > 0:\n                    ans += 1\n                    foundI = True\n                    I.popleft()\n                    break\n                else:\n                    I.popleft()\n            if foundI != True:\n                m.append(i)\n    print(ans)", "from collections import deque\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = k + 1\n    l = ''\n    ans = 0\n    for i in s:\n        if i == ':':\n            l += ':'\n        l += i\n    n = len(l)\n    m = deque()\n    I = deque()\n    for i in range(n):\n        if l[i] == 'X':\n            while m:\n                m.pop()\n            while I:\n                I.pop()\n        elif l[i] == 'I':\n            assiI = False\n            while m:\n                if a - abs(m[0] - i) > 0:\n                    ans += 1\n                    m.popleft()\n                    assiI = True\n                    break\n                else:\n                    m.popleft()\n            if assiI != True:\n                I.append(i)\n        elif l[i] == 'M':\n            assiM = False\n            while I:\n                if a - abs(I[0] - i) > 0:\n                    ans += 1\n                    I.popleft()\n                    assiM = True\n                    break\n                else:\n                    I.popleft()\n            if assiM != True:\n                m.append(i)\n    print(ans)", "from collections import deque\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = k + 1\n    l = ''\n    ans = 0\n    for i in s:\n        if i == ':':\n            l += ':'\n        l += i\n    n = len(l)\n    m = deque()\n    I = deque()\n    for i in range(n):\n        if l[i] == 'X':\n            while m:\n                m.pop()\n            while I:\n                I.pop()\n        elif l[i] == 'I':\n            assiI = False\n            while m:\n                if a - abs(m[0] - i) > 0:\n                    ans += 1\n                    m.popleft()\n                    assiI = True\n                    break\n                else:\n                    m.popleft()\n            if assiI != True:\n                I.append(i)\n        elif l[i] == 'M':\n            assiM = False\n            while I:\n                if a - abs(I[0] - i) > 0:\n                    ans += 1\n                    I.popleft()\n                    assiM = True\n                    break\n                else:\n                    I.popleft()\n            if assiM != True:\n                m.append(i)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    (i, j) = (0, 0)\n    q = 0\n    while i < n and j < n:\n        if s[i] == 'M':\n            if s[j] == 'I':\n                cnt = 0\n                if i > j:\n                    p = s[j:i]\n                    cnt = p.count(':')\n                else:\n                    p = s[i:j]\n                    cnt = p.count(':')\n                t = k + 1 - abs(i - j) - cnt\n                if t > 0:\n                    q += 1\n                    i += 1\n                    j += 1\n                elif i < j:\n                    i += 1\n                else:\n                    j += 1\n            elif s[j] == 'X':\n                j += 1\n                i = j\n            else:\n                j += 1\n        elif s[i] == 'X':\n            i += 1\n            j = i\n        else:\n            i += 1\n    print(q)", "def solve(Str, K):\n    S = ''\n    ind = -1\n    (iron, mag) = ([], [])\n    for it in Str:\n        ind += 1\n        if it == ':':\n            ind += 1\n        if it == 'I':\n            iron.append(ind)\n        elif it == 'M':\n            mag.append(ind)\n    ans = 0\n    lr = len(iron)\n    lm = len(mag)\n    (i, j) = (0, 0)\n    while i < lr and j < lm:\n        (ir, mg) = (iron[i], mag[j])\n        if abs(ir - mg) <= K:\n            ans += 1\n            i += 1\n            j += 1\n        elif ir > mg:\n            j += 1\n        else:\n            i += 1\n    return ans\nfor case in range(int(input())):\n    (n, k) = map(int, input().split())\n    st = input()\n    li = [it for it in st.split('X') if len(it) > 0]\n    ans = sum((solve(string, k) for string in li))\n    print(ans)", "t = int(input())\nfor t in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    i = 0\n    j = 0\n    a = 0\n    while i < n and j < n:\n        if s[i] == 'M':\n            if s[j] == 'I':\n                c = 0\n                if i > j:\n                    z = s[j:i]\n                    c = z.count(':')\n                else:\n                    z = s[i:j]\n                    c = z.count(':')\n                p = k + 1 - abs(i - j) - c\n                if p > 0:\n                    a += 1\n                    i += 1\n                    j += 1\n                elif i < j:\n                    i += 1\n                else:\n                    j += 1\n            elif s[j] == 'X':\n                j += 1\n                i = j\n            else:\n                j += 1\n        elif s[i] == 'X':\n            i += 1\n            j = i\n        else:\n            i += 1\n    print(a)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = ''\n    for i in s:\n        if i == ':':\n            l += ':'\n        l += i\n    magnet = []\n    iron = []\n    n = len(l)\n    ans = 0\n    for i in range(n):\n        if l[i] == 'I':\n            while magnet != [] and abs(magnet[0] - i) > k:\n                magnet.pop(0)\n            if len(magnet) > 0:\n                ans += 1\n                magnet.pop(0)\n            else:\n                iron.append(i)\n        elif l[i] == 'M':\n            while iron != [] and abs(iron[0] - i) > k:\n                iron.pop(0)\n            if len(iron) > 0:\n                ans += 1\n                iron.pop(0)\n            else:\n                magnet.append(i)\n        elif l[i] == 'X':\n            while iron != []:\n                iron.pop(0)\n            while magnet != []:\n                magnet.pop(0)\n    print(ans)", "class Node(object):\n\n    def __init__(self, data):\n        self.next = None\n        self.data = data\n\nclass Queue(object):\n\n    def __init__(self):\n        self.front = None\n        self.rear = None\n\n    def __str__(self):\n        ptr = self.front\n        s = []\n        while ptr != None:\n            s.append(str(ptr.data))\n            ptr = ptr.next\n        return '->'.join(s)\n\n    def enqueue(self, data):\n        newNode = Node(data)\n        if self.rear == None and self.front == None:\n            self.front = newNode\n            self.rear = newNode\n            return\n        self.rear.next = newNode\n        self.rear = newNode\n\n    def isEmpty(self):\n        if self.front == self.rear == None:\n            return True\n        return False\n\n    def dequeue(self):\n        if self.isEmpty():\n            return\n        temp = self.front\n        self.front = temp.next\n        if self.front == None:\n            self.rear = None\n        return temp.data\n\n    def frontElement(self):\n        return self.front.data\n\ndef findMaxNoOfMagnets(S, n, k):\n    MQ = Queue()\n    IQ = Queue()\n    L = ''\n    count = 0\n    for i in range(n):\n        if S[i] == ':':\n            L += '::'\n        else:\n            L += S[i]\n    for j in range(len(L)):\n        if L[j] == 'M':\n            while not IQ.isEmpty() and IQ.frontElement() + k < j:\n                IQ.dequeue()\n            if not IQ.isEmpty():\n                count += 1\n                IQ.dequeue()\n            else:\n                MQ.enqueue(j)\n        if L[j] == 'I':\n            while not MQ.isEmpty() and MQ.frontElement() + k < j:\n                MQ.dequeue()\n            if not MQ.isEmpty():\n                count += 1\n                MQ.dequeue()\n            else:\n                IQ.enqueue(j)\n        if L[j] == 'X':\n            while not IQ.isEmpty():\n                IQ.dequeue()\n            while not MQ.isEmpty():\n                MQ.dequeue()\n    return count\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    S = input()\n    print(findMaxNoOfMagnets(S, n, k))", "import inspect\nimport sys\nInfinity = float('inf')\nsys.setrecursionlimit(110000)\n\ndef integer_array_input():\n    return MyList(map(int, input().split()))\n\ndef string_array_input():\n    return MyList(map(String, input().split()))\n\ndef integer_input():\n    return int(input())\n\ndef float_input():\n    return float(input())\n\ndef string_input():\n    return String(input())\n\ndef test_case_count():\n    return range(integer_input())\n\ndef is_digit(character):\n    return character in '0123456789'\n\ndef is_prime(n):\n    if n <= 3:\n        return n > 1\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef sieve_of_eratosthenes(n):\n    array = [True] * (n + 1)\n    i = 2\n    while i * i <= n:\n        if array[i]:\n            for j in range(i * i, n + 1, i):\n                array[j] = False\n        i += 1\n    return [i for i in range(2, n + 1) if array[i]]\n\nclass This:\n\n    def __init__(self):\n        self.max = self.min = self.sum = self.count = None\n        self.set = set()\n        self.map = dict()\n        self.reset()\n\n    def update_if_max(self, *values):\n        self.max = max(self.max, *values)\n\n    def update_if_min(self, *values):\n        self.min = min(self.min, *values)\n\n    def reset(self):\n        self.min = Infinity\n        self.max = -Infinity\n        self.sum = 0\n        self.count = 0\n\nclass MyList(list):\n\n    @property\n    def length(self):\n        return len(self)\n\n    @property\n    def is_empty(self):\n        return not self\n\n    @property\n    def first(self):\n        return self[0]\n\n    @property\n    def last(self):\n        return self[-1]\n\n    @property\n    def is_sorted(self, key=lambda x: x):\n        for i in range(len(self) - 1):\n            if key(self[i]) > key(self[i + 1]):\n                return False\n        return True\n\n    def push(self, element):\n        return self.append(element)\n\n    def for_each(self, callback):\n        if not callable(callback):\n            raise ValueError(f'Expected a function, got {callback} instead.')\n        arg_count = len(inspect.getfullargspec(callback).args)\n        for (i, item) in enumerate(self):\n            arguments = []\n            if arg_count >= 1:\n                arguments.append(item)\n            if arg_count >= 2:\n                arguments.append(i)\n            callback(*arguments)\n\n    def map(self, callback):\n        if not callable(callback):\n            raise ValueError(f'Expected a function, got {callback} instead.')\n        return MyList(map(callback, self))\n\n    @classmethod\n    def of(cls, size, value):\n        if not isinstance(size, list):\n            raise ValueError('Expected size to be a list of dimensions.')\n        if len(size) == 0:\n            raise ValueError('Size cannot be empty.')\n        invalid_sizes_type = list(filter(lambda x: not isinstance(x, int), size))\n        if len(invalid_sizes_type) > 0:\n            raise ValueError('Sizes should be integers.')\n        invalid_sizes_value = list(filter(lambda x: x <= 0, size))\n        if len(invalid_sizes_value) > 0:\n            raise ValueError('Sizes should be positive.')\n        return MyList._of(size[::-1], value)\n\n    @classmethod\n    def _of(cls, size, value):\n        if len(size) == 1:\n            try:\n                return MyList((value() for _ in range(size[0])))\n            except TypeError:\n                return MyList((value for _ in range(size[0])))\n        else:\n            count = size.pop()\n            return MyList((MyList._of(size[:], value) for _ in range(count)))\n\n    def copy(self):\n        return MyList(list.copy(self))\n\n    def __add__(self, other):\n        return MyList(list.__add__(self, other))\n\n    def __mul__(self, other):\n        return MyList(list.__mul__(self, other))\n\nclass String(str):\n    alphabets = 'abcdefghijklmnopqrstuvwxyz'\n\n    @property\n    def length(self):\n        return len(self)\n\n    @property\n    def is_empty(self):\n        return not self\n\n    @property\n    def first(self):\n        return self[0]\n\n    @property\n    def last(self):\n        return self[-1]\n\n    @property\n    def is_sorted(self, key=lambda x: x):\n        for i in range(len(self) - 1):\n            if key(self[i]) > key(self[i + 1]):\n                return False\n        return True\n\n    @classmethod\n    def is_alphabet(cls, ch):\n        return ch in String.alphabets\n\ndef pre_process(s):\n    characters = MyList()\n    for ch in s:\n        if ch == ':':\n            characters.append('_')\n            characters.append('_')\n        else:\n            characters.append(ch)\n    return characters\n\ndef in_range(i, j, k):\n    return k + 1 - abs(i - j) > 0\n\ndef is_magnet(characters, i):\n    return characters[i] == 'M'\n\ndef is_iron(characters, i):\n    return characters[i] == 'I'\n\ndef solve(s, k):\n    this = This()\n    characters = pre_process(s)\n    (i, j) = (0, 0)\n    while i < characters.length and j < characters.length:\n        if is_magnet(characters, i):\n            if is_iron(characters, j):\n                if in_range(i, j, k):\n                    this.count += 1\n                    i += 1\n                elif j > i:\n                    i += 1\n                    j -= 1\n            j += 1\n        else:\n            i += 1\n    return this.count\n\ndef main(*args):\n    for _ in test_case_count():\n        (n, k) = integer_array_input()\n        s = string_input()\n        strings = s.split('X')\n        print(sum((solve(sub_str, k) for sub_str in strings)))\nmain()", "import inspect\nimport sys\nInfinity = float('inf')\nsys.setrecursionlimit(110000)\n\ndef integer_array_input():\n    return MyList(map(int, input().split()))\n\ndef string_array_input():\n    return MyList(map(String, input().split()))\n\ndef integer_input():\n    return int(input())\n\ndef float_input():\n    return float(input())\n\ndef string_input():\n    return String(input())\n\ndef test_case_count():\n    return range(integer_input())\n\ndef is_digit(character):\n    return character in '0123456789'\n\ndef is_prime(n):\n    if n <= 3:\n        return n > 1\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef sieve_of_eratosthenes(n):\n    array = [True] * (n + 1)\n    i = 2\n    while i * i <= n:\n        if array[i]:\n            for j in range(i * i, n + 1, i):\n                array[j] = False\n        i += 1\n    return [i for i in range(2, n + 1) if array[i]]\n\nclass This:\n\n    def __init__(self):\n        self.max = self.min = self.sum = self.count = None\n        self.set = set()\n        self.map = dict()\n        self.reset()\n\n    def update_if_max(self, *values):\n        self.max = max(self.max, *values)\n\n    def update_if_min(self, *values):\n        self.min = min(self.min, *values)\n\n    def reset(self):\n        self.min = Infinity\n        self.max = -Infinity\n        self.sum = 0\n        self.count = 0\n\nclass MyList(list):\n\n    @property\n    def length(self):\n        return len(self)\n\n    @property\n    def is_empty(self):\n        return not self\n\n    @property\n    def first(self):\n        return self[0]\n\n    @property\n    def last(self):\n        return self[-1]\n\n    @property\n    def is_sorted(self, key=lambda x: x):\n        for i in range(len(self) - 1):\n            if key(self[i]) > key(self[i + 1]):\n                return False\n        return True\n\n    def push(self, element):\n        return self.append(element)\n\n    def for_each(self, callback):\n        if not callable(callback):\n            raise ValueError(f'Expected a function, got {callback} instead.')\n        arg_count = len(inspect.getfullargspec(callback).args)\n        for (i, item) in enumerate(self):\n            arguments = []\n            if arg_count >= 1:\n                arguments.append(item)\n            if arg_count >= 2:\n                arguments.append(i)\n            callback(*arguments)\n\n    def map(self, callback):\n        if not callable(callback):\n            raise ValueError(f'Expected a function, got {callback} instead.')\n        return MyList(map(callback, self))\n\n    @classmethod\n    def of(cls, size, value):\n        if not isinstance(size, list):\n            raise ValueError('Expected size to be a list of dimensions.')\n        if len(size) == 0:\n            raise ValueError('Size cannot be empty.')\n        invalid_sizes_type = list(filter(lambda x: not isinstance(x, int), size))\n        if len(invalid_sizes_type) > 0:\n            raise ValueError('Sizes should be integers.')\n        invalid_sizes_value = list(filter(lambda x: x <= 0, size))\n        if len(invalid_sizes_value) > 0:\n            raise ValueError('Sizes should be positive.')\n        return MyList._of(size[::-1], value)\n\n    @classmethod\n    def _of(cls, size, value):\n        if len(size) == 1:\n            try:\n                return MyList((value() for _ in range(size[0])))\n            except TypeError:\n                return MyList((value for _ in range(size[0])))\n        else:\n            count = size.pop()\n            return MyList((MyList._of(size[:], value) for _ in range(count)))\n\n    def copy(self):\n        return MyList(list.copy(self))\n\n    def __add__(self, other):\n        return MyList(list.__add__(self, other))\n\n    def __mul__(self, other):\n        return MyList(list.__mul__(self, other))\n\nclass String(str):\n    alphabets = 'abcdefghijklmnopqrstuvwxyz'\n\n    @property\n    def length(self):\n        return len(self)\n\n    @property\n    def is_empty(self):\n        return not self\n\n    @property\n    def first(self):\n        return self[0]\n\n    @property\n    def last(self):\n        return self[-1]\n\n    @property\n    def is_sorted(self, key=lambda x: x):\n        for i in range(len(self) - 1):\n            if key(self[i]) > key(self[i + 1]):\n                return False\n        return True\n\n    @classmethod\n    def is_alphabet(cls, ch):\n        return ch in String.alphabets\n\ndef pre_process(s):\n    characters = MyList()\n    for ch in s:\n        if ch == ':':\n            characters.append('_')\n            characters.append('_')\n        else:\n            characters.append(ch)\n    return characters\n\ndef in_range(i, j, k):\n    return k + 1 - abs(i - j) > 0\n\ndef is_magnet(characters, i):\n    return characters[i] == 'M'\n\ndef is_iron(characters, i):\n    return characters[i] == 'I'\n\ndef solve(s, k):\n    this = This()\n    characters = pre_process(s)\n    (i, j) = (0, 0)\n    while i < characters.length and j < characters.length:\n        if is_magnet(characters, i):\n            if is_iron(characters, j):\n                if in_range(i, j, k):\n                    this.count += 1\n                    i += 1\n                elif j > i:\n                    i += 1\n                    j -= 1\n            j += 1\n        else:\n            i += 1\n    return this.count\n\ndef main(*args):\n    for _ in test_case_count():\n        (n, k) = integer_array_input()\n        s = string_input()\n        strings = s.split('X')\n        print(sum((solve(sub_str, k) for sub_str in strings)))\nmain()", "from collections import deque\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    new_s = ''\n    for obj in s:\n        if obj == ':':\n            new_s += obj\n        new_s += obj\n    qi = deque()\n    qm = deque()\n    ans = 0\n    j = 0\n    for i in new_s:\n        if i == 'I':\n            while len(qm) != 0 and qm[0] + k < j:\n                qm.popleft()\n            if len(qm) != 0:\n                ans += 1\n                qm.popleft()\n            else:\n                qi.append(j)\n        elif i == 'M':\n            while len(qi) != 0 and qi[0] + k < j:\n                qi.popleft()\n            if len(qi) != 0:\n                ans += 1\n                qi.popleft()\n            else:\n                qm.append(j)\n        elif i == 'X':\n            while len(qm) != 0:\n                qm.popleft()\n            while len(qi) != 0:\n                qi.popleft()\n        j += 1\n    print(ans)", "def fema(s, k):\n    iron = []\n    mag = []\n    sheet = 0\n    ind = -1\n    for i in s:\n        ind += 1\n        if i == ':':\n            sheet += 1\n            ind += 1\n        if i == 'I':\n            iron.append(ind)\n        if i == 'M':\n            mag.append(ind)\n    count = 0\n    (i, j) = (0, 0)\n    while i < len(iron) and j < len(mag):\n        if abs(iron[i] - mag[j]) <= k:\n            count += 1\n            i += 1\n            j += 1\n        elif iron[i] > mag[j]:\n            j += 1\n        else:\n            i += 1\n    return count\ntest = int(input())\nwhile test != 0:\n    test -= 1\n    (n, k) = map(int, input().split())\n    s = input()\n    li = [st for st in s.split('X') if len(st) > 0]\n    ans = sum((fema(st, k) for st in li))\n    print(ans)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    i = 0\n    j = 0\n    ans = 0\n    while i < n and j < n:\n        if s[i] == 'M':\n            if s[j] == 'I':\n                c = 0\n                if i > j:\n                    o = s[j:i]\n                    c = o.count(':')\n                else:\n                    o = s[i:j]\n                    c = o.count(':')\n                p = k + 1 - abs(i - j) - c\n                if p > 0:\n                    ans = ans + 1\n                    i = i + 1\n                    j = j + 1\n                elif i < j:\n                    i += 1\n                else:\n                    j += 1\n            elif s[j] == 'X':\n                j += 1\n                i = j\n            else:\n                j += 1\n        elif s[i] == 'X':\n            i += 1\n            j = i\n        else:\n            i += 1\n    print(ans)", "def solve(string, k):\n    ind = 0\n    (iron, mag) = ([], [])\n    for i in string:\n        if i == ':':\n            ind += 1\n        elif i == 'I':\n            iron.append(ind)\n        elif i == 'M':\n            mag.append(ind)\n        ind += 1\n    (i, j) = (0, 0)\n    li = len(iron)\n    lm = len(mag)\n    ans = 0\n    while i < li and j < lm:\n        if abs(iron[i] - mag[j]) <= k:\n            ans += 1\n            i += 1\n            j += 1\n        elif iron[i] > mag[j]:\n            j += 1\n        else:\n            i += 1\n    return ans\nfor _ in range(int(input())):\n    ans = 0\n    (n, k) = map(int, input().split())\n    s = input()\n    real = [i for i in s.split('X') if len(i) > 0]\n    ans += sum((solve(string, k) for string in real))\n    print(ans)", "class check:\n\n    def __init__(self, k, s):\n        self.sl = s.split('X')\n        self.k = k\n\n    def ans(self):\n        answer = 0\n        for strings in self.sl:\n            irons = []\n            magnets = []\n            sheets = 0\n            for i in range(len(strings)):\n                if strings[i] == 'I':\n                    if not magnets:\n                        irons.append(i + sheets)\n                    else:\n                        index_i = i + sheets\n                        for x in magnets:\n                            if self.k + 1 - abs(x - index_i) > 0:\n                                answer += 1\n                                magnets.remove(x)\n                                break\n                        else:\n                            irons.append(index_i)\n                elif strings[i] == 'M':\n                    if not irons:\n                        magnets.append(i + sheets)\n                    else:\n                        index_m = i + sheets\n                        for x in irons:\n                            if self.k + 1 - abs(x - index_m) > 0:\n                                answer += 1\n                                irons.remove(x)\n                                break\n                        else:\n                            magnets.append(index_m)\n                elif strings[i] == ':':\n                    sheets += 1\n        return answer\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    st = check(k, s)\n    print(st.ans())", "from collections import deque\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = str()\n    for i in range(n):\n        if s[i] == ':':\n            l += ':'\n        l += s[i]\n    fe = deque()\n    mg = deque()\n    tot = 0\n    for i in range(len(l)):\n        if l[i] == 'I':\n            while len(mg) > 0 and abs(mg[0] - i) > k:\n                mg.popleft()\n            if len(mg) > 0:\n                tot += 1\n                mg.popleft()\n            else:\n                fe.append(i)\n        elif l[i] == 'M':\n            while len(fe) > 0 and abs(fe[0] - i) > k:\n                fe.popleft()\n            if len(fe) > 0:\n                tot += 1\n                fe.popleft()\n            else:\n                mg.append(i)\n        elif l[i] == 'X':\n            while len(fe) > 0:\n                fe.popleft()\n            while len(mg) > 0:\n                mg.popleft()\n    print(tot)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = input()\n    count = 0\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if l[i] == 'M':\n            if l[j] == 'I':\n                if i < j:\n                    sij = l[i:j].count(':')\n                else:\n                    sij = l[j:i].count(':')\n                p = k + 1 - abs(i - j) - sij\n                if p > 0:\n                    count += 1\n                    i += 1\n                    j += 1\n                elif i < j:\n                    i += 1\n                else:\n                    j += 1\n            elif l[j] == 'X':\n                j += 1\n                i = j\n            else:\n                j += 1\n        elif l[i] == 'X':\n            i += 1\n            j = i\n        else:\n            i += 1\n    print(count)", "t = int(input())\nfor t in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    i = 0\n    j = 0\n    a = 0\n    while i < n and j < n:\n        if s[i] == 'M':\n            if s[j] == 'I':\n                c = 0\n                if i > j:\n                    z = s[j:i]\n                    c = z.count(':')\n                else:\n                    z = s[i:j]\n                    c = z.count(':')\n                p = k + 1 - abs(i - j) - c\n                if p > 0:\n                    a += 1\n                    i += 1\n                    j += 1\n                elif i < j:\n                    i += 1\n                else:\n                    j += 1\n            elif s[j] == 'X':\n                j += 1\n                i = j\n            else:\n                j += 1\n        elif s[i] == 'X':\n            i += 1\n            j = i\n        else:\n            i += 1\n    print(a)", "t = int(input())\nfor t in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    i = 0\n    j = 0\n    a = 0\n    while i < n and j < n:\n        if s[i] == 'M':\n            if s[j] == 'I':\n                c = 0\n                if i > j:\n                    z = s[j:i]\n                    c = z.count(':')\n                else:\n                    z = s[i:j]\n                    c = z.count(':')\n                p = k + 1 - abs(i - j) - c\n                if p > 0:\n                    a += 1\n                    i += 1\n                    j += 1\n                elif i < j:\n                    i += 1\n                else:\n                    j += 1\n            elif s[j] == 'X':\n                j += 1\n                i = j\n            else:\n                j += 1\n        elif s[i] == 'X':\n            i += 1\n            j = i\n        else:\n            i += 1\n    print(a)", "from collections import deque\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = input()\n    value = ''\n    for i in range(n):\n        if x[i] == ':':\n            value += ':'\n        value += x[i]\n    magnet = deque()\n    iron = deque()\n    answer = 0\n    for i in range(len(value)):\n        if value[i] == 'I':\n            while len(magnet) != 0 and abs(magnet[0] - i) > k:\n                magnet.popleft()\n            if len(magnet) > 0:\n                answer += 1\n                magnet.popleft()\n            else:\n                iron.append(i)\n        elif value[i] == 'M':\n            while len(iron) != 0 and abs(iron[0] - i) > k:\n                iron.popleft()\n            if len(iron) > 0:\n                answer += 1\n                iron.popleft()\n            else:\n                magnet.append(i)\n        elif value[i] == 'X':\n            while len(magnet) > 0:\n                magnet.popleft()\n            while len(iron) > 0:\n                iron.popleft()\n    print(answer)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    str_ = input()\n    str_mod = ''\n    for i in range(len(str_)):\n        if str_[i] == ':':\n            str_mod += ':'\n        str_mod += str_[i]\n    iron = []\n    mag = []\n    ans = 0\n    for i in range(len(str_mod)):\n        if str_mod[i] == 'I':\n            while len(mag) and abs(mag[0] - i) > k:\n                mag.pop(0)\n            if len(mag):\n                ans += 1\n                mag.pop(0)\n            else:\n                iron.append(i)\n        elif str_mod[i] == 'M':\n            while len(iron) and abs(iron[0] - i) > k:\n                iron.pop(0)\n            if len(iron):\n                ans += 1\n                iron.pop(0)\n            else:\n                mag.append(i)\n        elif str_mod[i] == 'X':\n            iron = []\n            mag = []\n    print(ans)", "from collections import deque as d\nfor _ in range(int(input())):\n    (n, k) = [int(j) for j in input().split()]\n    s = input()\n    l = ''\n    for i in s:\n        if i != ':':\n            l += i\n        else:\n            l += '::'\n    iron = d()\n    magnet = d()\n    ans = 0\n    for (ind, i) in enumerate(l):\n        if i == 'M':\n            while iron and abs(iron[0] - ind) > k:\n                iron.popleft()\n            if iron:\n                iron.popleft()\n                ans += 1\n            else:\n                magnet.append(ind)\n        elif i == 'I':\n            while magnet and abs(magnet[0] - ind) > k:\n                magnet.popleft()\n            if magnet:\n                magnet.popleft()\n                ans += 1\n            else:\n                iron.append(ind)\n        elif i == 'X':\n            iron = d()\n            magnet = d()\n    print(ans)", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    (n, k) = map(int, stdin.readline().rstrip().split())\n    arr = stdin.readline().rstrip()\n\n    def countMag(arr, k):\n        (iron, mag, sheets) = ([], [], [])\n        (l, temp) = (len(arr), 0)\n        for i in range(l):\n            if arr[i] == 'I':\n                iron += [i]\n            elif arr[i] == 'M':\n                mag += [i]\n            elif arr[i] == ':':\n                temp += 1\n            sheets += [temp]\n        cnt = i = j = 0\n        while i < len(iron) and j < len(mag):\n            if iron[i] > mag[j]:\n                power = k + 1 - (iron[i] - mag[j]) - (sheets[iron[i]] - sheets[mag[j]])\n            else:\n                power = k + 1 - (mag[j] - iron[i]) - (sheets[mag[j]] - sheets[iron[i]])\n            if power > 0:\n                cnt += 1\n                i += 1\n                j += 1\n            elif iron[i] > mag[j]:\n                j += 1\n            elif iron[i] < mag[j]:\n                i += 1\n        return cnt\n    result = 0\n    for ele in arr.split('X'):\n        result += countMag(ele, k)\n    print(result)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = input()\n    (count, ans) = (0, 0)\n    (I, M) = ([], [])\n    for x in arr:\n        if x == 'I':\n            I.append(count)\n            while M:\n                tmp = M.pop(0)\n                if abs(tmp - count) <= k:\n                    I.pop()\n                    ans += 1\n                    break\n        elif x == 'M':\n            M.append(count)\n            while I:\n                tmp = I.pop(0)\n                if abs(tmp - count) <= k:\n                    M.pop()\n                    ans += 1\n                    break\n        elif x == ':':\n            count += 1\n        elif x == 'X':\n            I.clear()\n            M.clear()\n        count += 1\n    print(ans)", "try:\n    t = int(input())\n    for t in range(t):\n        (n, k) = map(int, input().split())\n        s = input()\n        i = 0\n        j = 0\n        a = 0\n        while i < n and j < n:\n            if s[i] == 'M':\n                if s[j] == 'I':\n                    c = 0\n                    if i > j:\n                        z = s[j:i]\n                        c = z.count(':')\n                    else:\n                        z = s[i:j]\n                        c = z.count(':')\n                    p = k + 1 - abs(i - j) - c\n                    if p > 0:\n                        a += 1\n                        i += 1\n                        j += 1\n                    elif i < j:\n                        i += 1\n                    else:\n                        j += 1\n                elif s[j] == 'X':\n                    j += 1\n                    i = j\n                else:\n                    j += 1\n            elif s[i] == 'X':\n                i += 1\n                j = i\n            else:\n                i += 1\n        print(a)\nexcept:\n    pass", "def solve(string, k):\n    ind = 0\n    (iron, mag) = ([], [])\n    for i in string:\n        if i == ':':\n            ind += 1\n        elif i == 'I':\n            iron.append(ind)\n        elif i == 'M':\n            mag.append(ind)\n        ind += 1\n    (i, j) = (0, 0)\n    li = len(iron)\n    lm = len(mag)\n    ans = 0\n    while i < li and j < lm:\n        if abs(iron[i] - mag[j]) <= k:\n            ans += 1\n            i += 1\n            j += 1\n        elif iron[i] > mag[j]:\n            j += 1\n        else:\n            i += 1\n    return ans\nfor _ in range(int(input())):\n    ans = 0\n    (n, k) = map(int, input().split())\n    s = input()\n    real = [i for i in s.split('X') if len(i) > 0]\n    ans += sum((solve(string, k) for string in real))\n    print(ans)", "t = int(input())\nfor t in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    i = 0\n    j = 0\n    a = 0\n    while i < n and j < n:\n        if s[i] == 'M':\n            if s[j] == 'I':\n                c = 0\n                if i > j:\n                    z = s[j:i]\n                    c = z.count(':')\n                else:\n                    z = s[i:j]\n                    c = z.count(':')\n                p = k + 1 - abs(i - j) - c\n                if p > 0:\n                    a += 1\n                    i += 1\n                    j += 1\n                elif i < j:\n                    i += 1\n                else:\n                    j += 1\n            elif s[j] == 'X':\n                j += 1\n                i = j\n            else:\n                j += 1\n        elif s[i] == 'X':\n            i += 1\n            j = i\n        else:\n            i += 1\n    print(a)", "def solve(Str, K):\n    S = ''\n    ind = -1\n    (iron, mag) = ([], [])\n    for it in Str:\n        ind += 1\n        if it == ':':\n            ind += 1\n        if it == 'I':\n            iron.append(ind)\n        elif it == 'M':\n            mag.append(ind)\n    ans = 0\n    lr = len(iron)\n    lm = len(mag)\n    (i, j) = (0, 0)\n    while i < lr and j < lm:\n        (ir, mg) = (iron[i], mag[j])\n        if abs(ir - mg) <= K:\n            ans += 1\n            i += 1\n            j += 1\n        elif ir > mg:\n            j += 1\n        else:\n            i += 1\n    return ans\nfor case in range(int(input())):\n    (n, k) = map(int, input().split())\n    st = input()\n    li = [it for it in st.split('X') if len(it) > 0]\n    ans = sum((solve(string, k) for string in li))\n    print(ans)", "def check(p, k):\n    li = [pos for (pos, val) in enumerate(p) if val == 'I']\n    lm = [pos for (pos, val) in enumerate(p) if val == 'M']\n    i = 0\n    j = 0\n    count = 0\n    while i < len(li) and j < len(lm):\n        if li[i] < lm[j]:\n            power = k + 1 - abs(li[i] - lm[j]) - p[li[i]:lm[j] + 1].count(':')\n        else:\n            power = k + 1 - abs(li[i] - lm[j]) - p[lm[j]:li[i] + 1].count(':')\n        if power > 0:\n            count += 1\n            i += 1\n            j += 1\n        elif li[i] < lm[j]:\n            i += 1\n        else:\n            j += 1\n    return count\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = s.split('X')\n    ans = 0\n    for p in l:\n        ans += check(p, k)\n    print(ans)", "T = int(input())\nwhile T:\n    T -= 1\n    (N, K) = [int(i) for i in input().split()]\n    S = input()\n    mp = 0\n    cc = 0\n    ans = 0\n    conduct = 0\n    while cc < N and mp < N:\n        if S[cc] == 'X' or S[mp] == 'X':\n            cc = max(cc, mp) + 1\n            mp = cc\n            conduct = 0\n        elif S[mp] != 'M':\n            if mp >= cc and S[mp] == ':':\n                conduct += 1\n            if mp < cc and S[mp] == ':':\n                conduct -= 1\n            mp += 1\n            continue\n        elif S[cc] == '-':\n            cc += 1\n        elif S[cc] == ':':\n            conduct += -1 if mp >= cc else 1\n            cc += 1\n        elif S[cc] == 'I':\n            F = K + 1 - abs(cc - mp) - conduct\n            if F > 0:\n                ans += 1\n                cc += 1\n                mp = mp + 1\n            elif mp >= cc:\n                cc += 1\n            else:\n                mp += 1\n        else:\n            cc += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = input()\n    st = []\n    st2 = []\n    ans = 0\n    for i in range(n):\n        if arr[i] == 'I':\n            st.append(i)\n            while st2:\n                temp1 = st2[0]\n                s = 0\n                for a in range(temp1, i, 1):\n                    if arr[a] == ':':\n                        s += 1\n                p = k + 1 - abs(i - temp1) - s\n                if p > 0:\n                    ans += 1\n                    st.pop(0)\n                    st2.pop(0)\n                    break\n                else:\n                    st2.pop(0)\n        elif arr[i] == 'M':\n            st2.append(i)\n            while st:\n                temp1 = st[0]\n                s = 0\n                for a in range(temp1, i, 1):\n                    if arr[a] == ':':\n                        s += 1\n                p = k + 1 - abs(i - temp1) - s\n                if p > 0:\n                    ans += 1\n                    st.pop(0)\n                    st2.pop(0)\n                    break\n                else:\n                    st.pop(0)\n        elif arr[i] == 'X':\n            st.clear()\n            st2.clear()\n    print(ans)", "t = int(input())\nfor t in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    i = 0\n    j = 0\n    a = 0\n    while i < n and j < n:\n        if s[i] == 'M':\n            if s[j] == 'I':\n                c = 0\n                if i > j:\n                    z = s[j:i]\n                    c = z.count(':')\n                else:\n                    z = s[i:j]\n                    c = z.count(':')\n                p = k + 1 - abs(i - j) - c\n                if p > 0:\n                    a += 1\n                    i += 1\n                    j += 1\n                elif i < j:\n                    i += 1\n                else:\n                    j += 1\n            elif s[j] == 'X':\n                j += 1\n                i = j\n            else:\n                j += 1\n        elif s[i] == 'X':\n            i += 1\n            j = i\n        else:\n            i += 1\n    print(a)", "t = int(input())\nfor t in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    i = 0\n    j = 0\n    a = 0\n    while i < n and j < n:\n        if s[i] == 'M':\n            if s[j] == 'I':\n                c = 0\n                if i > j:\n                    z = s[j:i]\n                    c = z.count(':')\n                else:\n                    z = s[i:j]\n                    c = z.count(':')\n                p = k + 1 - abs(i - j) - c\n                if p > 0:\n                    a += 1\n                    i += 1\n                    j += 1\n                elif i < j:\n                    i += 1\n                else:\n                    j += 1\n            elif s[j] == 'X':\n                j += 1\n                i = j\n            else:\n                j += 1\n        elif s[i] == 'X':\n            i += 1\n            j = i\n        else:\n            i += 1\n    print(a)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    new = ''\n    ctr = 0\n    for i in s:\n        if i == ':':\n            new += i\n        new += i\n    (mag, fe) = ([], [])\n    for i in range(len(new)):\n        if new[i] == 'M':\n            while len(fe) != 0 and abs(i - fe[0]) > k:\n                fe.pop(0)\n            if len(fe) != 0:\n                ctr += 1\n                fe.pop(0)\n            else:\n                mag.append(i)\n        elif new[i] == 'I':\n            while len(mag) != 0 and abs(i - mag[0]) > k:\n                mag.pop(0)\n            if len(mag) != 0:\n                ctr += 1\n                mag.pop(0)\n            else:\n                fe.append(i)\n        elif new[i] == 'X':\n            (mag, fe) = ([], [])\n    print(ctr)", "def CountMag(string, K):\n    Iron = []\n    Mag = []\n    for i in range(len(string)):\n        if string[i] == 'I':\n            Iron.append(i)\n        if string[i] == 'M':\n            Mag.append(i)\n    count = 0\n    i = 0\n    j = 0\n    while i < len(Iron) and j < len(Mag):\n        if Iron[i] < Mag[j]:\n            Power = K + 1 - abs(Mag[j] - Iron[i]) - string[Iron[i]:Mag[j]].count(':')\n        else:\n            Power = K + 1 - abs(Mag[j] - Iron[i]) - string[Mag[j]:Iron[i]].count(':')\n        if Power > 0:\n            count += 1\n            i += 1\n            j += 1\n        elif Iron[i] > Mag[j]:\n            j += 1\n        else:\n            i += 1\n    return count\nt = int(input())\nfor _ in range(t):\n    (n, K) = map(int, input().split())\n    s = input()\n    maximum = 0\n    for i in s.split('X'):\n        maximum += CountMag(i, K)\n    print(maximum)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = input()\n    l = ''\n    for i in x:\n        if i == ':':\n            l += i\n        l += i\n    mi = []\n    ii = []\n    ans = 0\n    for i in range(len(l)):\n        if l[i] == 'M':\n            while ii != [] and abs(ii[0] - i) > k:\n                ii.pop(0)\n            if ii != []:\n                ans += 1\n                ii.pop(0)\n            else:\n                mi.append(i)\n        elif l[i] == 'I':\n            while mi != [] and abs(mi[0] - i) > k:\n                mi.pop(0)\n            if mi != []:\n                ans += 1\n                mi.pop(0)\n            else:\n                ii.append(i)\n        elif l[i] == 'X':\n            while mi != []:\n                mi.pop(0)\n            while ii != []:\n                ii.pop(0)\n    print(ans)", "t = int(input())\nfor t in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    i = 0\n    j = 0\n    a = 0\n    while i < n and j < n:\n        if s[i] == 'M':\n            if s[j] == 'I':\n                c = 0\n                if i > j:\n                    z = s[j:i]\n                    c = z.count(':')\n                else:\n                    z = s[i:j]\n                    c = z.count(':')\n                p = k + 1 - abs(i - j) - c\n                if p > 0:\n                    a += 1\n                    i += 1\n                    j += 1\n                elif i < j:\n                    i += 1\n                else:\n                    j += 1\n            elif s[j] == 'X':\n                j += 1\n                i = j\n            else:\n                j += 1\n        elif s[i] == 'X':\n            i += 1\n            j = i\n        else:\n            i += 1\n    print(a)", "import math, sys\nfrom collections import defaultdict, Counter, deque\nfrom functools import reduce\nINF = float('inf')\nMOD = int(1000000000.0) + 7\n\ndef solve():\n    (n, k) = vars()\n    s = input()\n    q_magnet = []\n    q_iron = []\n    sheets = [0 for i in range(n)]\n    ans = sh = 0\n    for i in range(n):\n        if s[i] == ':':\n            sh += 1\n        sheets[i] = sh\n    for i in range(n):\n        if s[i] == 'X':\n            q_magnet = []\n            q_iron = []\n        elif s[i] == 'M':\n            if q_iron:\n                j = q_iron.pop(0)\n                while k + 1 - (i - j) - (sheets[i] - sheets[j]) <= 0:\n                    if not q_iron:\n                        q_magnet.append(i)\n                        break\n                    j = q_iron.pop(0)\n                else:\n                    ans += 1\n            else:\n                q_magnet.append(i)\n        elif s[i] == 'I':\n            if q_magnet:\n                j = q_magnet.pop(0)\n                while k + 1 - (i - j) - (sheets[i] - sheets[j]) <= 0:\n                    if not q_magnet:\n                        q_iron.append(i)\n                        break\n                    j = q_magnet.pop(0)\n                else:\n                    ans += 1\n            else:\n                q_iron.append(i)\n    print(ans)\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef input():\n    return sys.stdin.readline().rstrip('\\n').strip()\n\ndef print(*args, sep=' ', end='\\n'):\n    first = True\n    for arg in args:\n        if not first:\n            sys.stdout.write(str(sep))\n        sys.stdout.write(str(arg))\n        first = False\n    sys.stdout.write(end)\n\ndef vars():\n    return map(int, input().split())\n\ndef array():\n    return list(map(int, input().split()))\nmain()", "import sys\nfor _ in range(int(input())):\n    m = 0\n    inp = sys.stdin.readline().rstrip()\n    if inp == '':\n        continue\n    else:\n        (n, k) = map(int, inp.split())\n    s = sys.stdin.readline().rstrip()\n    (ir, mg) = ([], [])\n    for i in range(n):\n        if s[i] == 'I':\n            ir.append(i)\n        if s[i] == 'M':\n            mg.append(i)\n        if s[i] == 'X' or i == n - 1:\n            while len(ir) != 0 and len(mg) != 0:\n                if k + 1 - abs(ir[0] - mg[0]) - s[min(ir[0], mg[0]):max(ir[0], mg[0])].count(':') > 0:\n                    m += 1\n                    ir.pop(0)\n                    mg.pop(0)\n                elif mg[0] < ir[0]:\n                    mg.pop(0)\n                else:\n                    ir.pop(0)\n            (ir, mg) = ([], [])\n    print(m)", "def get_max_magnets_helper():\n    cell_break = cells.split('X')\n    magnetpairs = 0\n    for cellformed in cell_break:\n        magnetpairs += get_max_magnets(cellformed, len(cellformed))\n    return magnetpairs\n\ndef get_max_magnets(arrangement, len_cell):\n    max_magnets = 0\n    i = 0\n    j = 0\n    for i in range(len_cell):\n        if j >= len_cell:\n            break\n        if arrangement[i] == 'M':\n            while j < len_cell:\n                if arrangement[j] == 'I':\n                    if j < i:\n                        sij = arrangement.count(':', j, i)\n                        attraction = k + 1 - (i - j) - sij\n                    else:\n                        sij = arrangement.count(':', i, j)\n                        attraction = k + 1 - (j - i) - sij\n                    if attraction > 0:\n                        max_magnets += 1\n                        j += 1\n                        break\n                    elif j > i:\n                        break\n                j += 1\n    return max_magnets\ntestcases = int(input())\nwhile testcases > 0:\n    (n, k) = map(int, input().split())\n    cells = input()\n    print(get_max_magnets_helper())\n    testcases -= 1", "def CountMag(string, K):\n    Iron = []\n    Mag = []\n    for i in range(len(string)):\n        if string[i] == 'I':\n            Iron.append(i)\n        if string[i] == 'M':\n            Mag.append(i)\n    count = 0\n    i = 0\n    j = 0\n    while i < len(Iron) and j < len(Mag):\n        if Iron[i] < Mag[j]:\n            Power = K + 1 - abs(Mag[j] - Iron[i]) - string[Iron[i]:Mag[j]].count(':')\n        else:\n            Power = K + 1 - abs(Mag[j] - Iron[i]) - string[Mag[j]:Iron[i]].count(':')\n        if Power > 0:\n            count += 1\n            i += 1\n            j += 1\n        elif Iron[i] > Mag[j]:\n            j += 1\n        else:\n            i += 1\n    return count\nt = int(input())\nfor _ in range(t):\n    (n, K) = map(int, input().split())\n    s = input()\n    maximum = 0\n    for i in s.split('X'):\n        maximum += CountMag(i, K)\n    print(maximum)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input().split('X')\n    ans = 0\n    for sub_string in s:\n        if 'M' not in sub_string:\n            continue\n        if 'I' not in sub_string:\n            continue\n        (magnet, iron) = ([], [])\n        for idx in range(len(sub_string)):\n            if sub_string[idx] == 'M':\n                magnet.append(idx)\n            elif sub_string[idx] == 'I':\n                iron.append(idx)\n        (m, i) = (0, 0)\n        while m < len(magnet) and i < len(iron):\n            p = k + 1 - abs(magnet[m] - iron[i])\n            if magnet[m] < iron[i]:\n                p -= sub_string[magnet[m]:iron[i]].count(':')\n            else:\n                p -= sub_string[iron[i]:magnet[m]].count(':')\n            if p > 0:\n                ans += 1\n                m += 1\n                i += 1\n            elif magnet[m] < iron[i]:\n                m += 1\n            else:\n                i += 1\n    print(ans)", "t = int(input())\nfor z in range(t):\n    (n, k) = map(int, input().split())\n    a = list(input())\n    if a[len(a) - 1] == None:\n        a.pop()\n    m = []\n    m1 = []\n    I = []\n    I1 = []\n    for i in range(len(a)):\n        if a[i] == 'M':\n            m1.append(i)\n        elif a[i] == 'I':\n            I1.append(i)\n        elif a[i] == 'X':\n            m.append(m1)\n            I.append(I1)\n            m1 = []\n            I1 = []\n    m.append(m1)\n    I.append(I1)\n    c = 0\n    for i in range(len(I)):\n        for j in range(len(I[i])):\n            for q in range(len(m[i])):\n                if m[i][q] != -1 and (I[i][j] - m[i][q]) ** 2 < (k + 1) ** 2:\n                    c1 = 0\n                    s3 = min(I[i][j], m[i][q])\n                    s4 = max(I[i][j], m[i][q])\n                    for l in range(s3, s4):\n                        if a[l] == ':':\n                            c1 += 1\n                    if (I[i][j] - m[i][q]) ** 2 < (k + 1 - c1) ** 2:\n                        c += 1\n                        m[i][q] = -1\n                        break\n                    r = 1000\n        if i == len(I) - 1:\n            print(c)", "t = int(input())\nfor z in range(t):\n    (n, k) = map(int, input().split())\n    a = list(input())\n    if a[len(a) - 1] == None:\n        a.pop()\n    m = []\n    m1 = []\n    I = []\n    I1 = []\n    for i in range(len(a)):\n        if a[i] == 'M':\n            m1.append(i)\n        elif a[i] == 'I':\n            I1.append(i)\n        elif a[i] == 'X':\n            m.append(m1)\n            I.append(I1)\n            m1 = []\n            I1 = []\n    m.append(m1)\n    I.append(I1)\n    c = 0\n    for i in range(len(I)):\n        for j in range(len(I[i])):\n            for q in range(len(m[i])):\n                if m[i][q] != -1 and (I[i][j] - m[i][q]) ** 2 < (k + 1) ** 2:\n                    c1 = 0\n                    x = max(I[i][j], m[i][q])\n                    y = min(I[i][j], m[i][q])\n                    for l in range(y + 1, x):\n                        if a[l] == ':':\n                            c1 += 1\n                    if (I[i][j] - m[i][q]) ** 2 < (k + 1 - c1) ** 2:\n                        c += 1\n                        m[i][q] = -1\n                        break\n                    r = 1000\n        if i == len(I) - 1:\n            print(c)", "t = int(input())\nfor z in range(t):\n    (n, k) = map(int, input().split())\n    a = list(input())\n    if a[len(a) - 1] == None:\n        a.pop()\n    m = []\n    m1 = []\n    I = []\n    I1 = []\n    for i in range(len(a)):\n        if a[i] == 'M':\n            m1.append(i)\n        elif a[i] == 'I':\n            I1.append(i)\n        elif a[i] == 'X':\n            m.append(m1)\n            I.append(I1)\n            m1 = []\n            I1 = []\n    m.append(m1)\n    I.append(I1)\n    c = 0\n    for i in range(len(I)):\n        for j in range(len(I[i])):\n            for q in range(len(m[i])):\n                if m[i][q] != -1 and (I[i][j] - m[i][q]) ** 2 < (k + 1) ** 2:\n                    c1 = 0\n                    x = max(I[i][j], m[i][q])\n                    y = min(I[i][j], m[i][q])\n                    for l in range(y + 1, x):\n                        if a[l] == ':':\n                            c1 += 1\n                    if (I[i][j] - m[i][q]) ** 2 < (k + 1 - c1) ** 2:\n                        c += 1\n                        m[i][q] = -1\n                        break\n        if i == len(I) - 1:\n            print(c)", "t = int(input())\nfor z in range(t):\n    (n, k) = map(int, input().split())\n    a = list(input())\n    if a[len(a) - 1] == None:\n        a.pop()\n    m = []\n    m1 = []\n    I = []\n    I1 = []\n    for i in range(len(a)):\n        if a[i] == 'M':\n            m1.append(i)\n        elif a[i] == 'I':\n            I1.append(i)\n        elif a[i] == 'X':\n            m.append(m1)\n            I.append(I1)\n            m1 = []\n            I1 = []\n    m.append(m1)\n    I.append(I1)\n    c = 0\n    for i in range(len(I)):\n        for j in range(len(I[i])):\n            for q in range(len(m[i])):\n                if m[i][q] != -1 and (I[i][j] - m[i][q]) ** 2 < (k + 1) ** 2:\n                    c1 = 0\n                    x = max(I[i][j], m[i][q])\n                    y = min(I[i][j], m[i][q])\n                    for l in range(y + 1, x):\n                        if a[l] == ':':\n                            c1 += 1\n                    if (I[i][j] - m[i][q]) ** 2 < (k + 1 - c1) ** 2:\n                        c += 1\n                        m[i][q] = -1\n                        break\n        if i == len(I) - 1:\n            print(c)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = input()\n    ans = 0\n    (i, j) = (0, 0)\n    while i < n and j < n:\n        if a[i] != 'I':\n            i += 1\n        if a[j] != 'M':\n            j += 1\n        if i >= len(a) or j >= len(a):\n            break\n        c = 0\n        flag = 0\n        if a[i] == 'I' and a[j] == 'M':\n            if i < j:\n                mini = i\n                maxi = j\n            else:\n                maxi = i\n                mini = j\n            for fe in range(mini, maxi):\n                if a[fe] == ':':\n                    c += 1\n                elif a[fe] == 'X':\n                    i = fe\n                    j = fe\n                    flag = 1\n                    break\n            if flag == 0:\n                p = k + 1 - abs(i - j) - c\n            if p > 0 and flag == 0:\n                ans += 1\n                i += 1\n                j += 1\n            if p <= 0:\n                if j < i:\n                    j += 1\n                else:\n                    i += 1\n    print(ans)", "n = int(input())\nfor i in range(n):\n    (p, q) = map(int, input().split(' '))\n    s = list(map(str, input().split('X')))\n    count = 0\n    for (k, f) in enumerate(s):\n        subcount = []\n        MagnetsVal = [a for (a, char) in enumerate(f) if char == 'M']\n        IronVal = [b for (b, char) in enumerate(f) if char == 'I']\n        if f.count(':') == 0:\n            for (m, a) in enumerate(MagnetsVal):\n                j = 0\n                while j < len(IronVal):\n                    if q + 1 - abs(IronVal[j] - a) > 0:\n                        IronVal.remove(IronVal[j])\n                        if a not in subcount:\n                            subcount.append(a)\n                        break\n                    elif a > IronVal[j]:\n                        IronVal.remove(IronVal[j])\n                    elif IronVal[j] > a:\n                        break\n                    else:\n                        j = j + 1\n            count = count + len(subcount)\n        else:\n            for (m, a) in enumerate(MagnetsVal):\n                j = 0\n                while j < len(IronVal):\n                    shcount = 0\n                    if IronVal[j] > a:\n                        shcount = f[a:IronVal[j]].count(':')\n                    else:\n                        shcount = f[IronVal[j]:a].count(':')\n                    if q + 1 - abs(IronVal[j] - a) - shcount > 0:\n                        IronVal.remove(IronVal[j])\n                        if a not in subcount:\n                            subcount.append(a)\n                        break\n                    elif a > IronVal[j]:\n                        IronVal.remove(IronVal[j])\n                    elif IronVal[j] > a:\n                        break\n                    else:\n                        j = j + 1\n            count = count + len(subcount)\n    print(count)", "try:\n    for i in range(int(input())):\n        (n, k) = map(int, input().split())\n        s = input()\n        i = 0\n        j = 0\n        ans = 0\n        while i < n and j < n:\n            if s[i] == 'M':\n                if s[j] == 'I':\n                    if i < j:\n                        c = s[i:j].count(':')\n                    else:\n                        c = s[j:i].count(':')\n                    p = k + 1 - abs(i - j) - c\n                    if p > 0:\n                        i += 1\n                        j += 1\n                        ans += 1\n                    elif j < i:\n                        j += 1\n                    else:\n                        i += 1\n                elif s[j] == 'X':\n                    j += 1\n                    i = j\n                else:\n                    j += 1\n            elif s[i] == 'X':\n                i += 1\n                j = i\n            else:\n                i += 1\n        print(ans)\nexcept:\n    pass", "t = int(input().strip())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input().strip()\n    k += 1\n    last_magnet = 0\n    last_iron = 0\n    count = 0\n    while last_magnet < n and last_iron < n:\n        if s[last_magnet] == 'M':\n            if s[last_iron] == 'I':\n                sheet = 0\n                if last_iron < last_magnet:\n                    section = s[last_iron:last_magnet]\n                    sheet = section.count(':')\n                else:\n                    section = s[last_magnet:last_iron]\n                    sheet = section.count(':')\n                if k - abs(last_magnet - last_iron) - sheet > 0:\n                    count += 1\n                    last_magnet += 1\n                    last_iron += 1\n                elif last_magnet < last_iron:\n                    last_magnet += 1\n                else:\n                    last_iron += 1\n            elif s[last_iron] == 'X':\n                last_iron += 1\n                last_magnet = last_iron\n            else:\n                last_iron += 1\n        elif s[last_magnet] == 'X':\n            last_magnet += 1\n            last_iron = last_magnet\n        else:\n            last_magnet += 1\n    print(count)", "t = int(input())\nfor t in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    i = 0\n    j = 0\n    a = 0\n    while i < n and j < n:\n        if s[i] == 'M':\n            if s[j] == 'I':\n                c = 0\n                if i > j:\n                    z = s[j:i]\n                    c = z.count(':')\n                else:\n                    z = s[i:j]\n                    c = z.count(':')\n                p = k + 1 - abs(i - j) - c\n                if p > 0:\n                    a += 1\n                    i += 1\n                    j += 1\n                elif i < j:\n                    i += 1\n                else:\n                    j += 1\n            elif s[j] == 'X':\n                j += 1\n                i = j\n            else:\n                j += 1\n        elif s[i] == 'X':\n            i += 1\n            j = i\n        else:\n            i += 1\n    print(a)", "def CountMag(string, K):\n    Iron = []\n    Mag = []\n    for i in range(len(string)):\n        if string[i] == 'I':\n            Iron.append(i)\n        if string[i] == 'M':\n            Mag.append(i)\n    count = 0\n    i = 0\n    j = 0\n    while i < len(Iron) and j < len(Mag):\n        if Iron[i] < Mag[j]:\n            Power = K + 1 - abs(Mag[j] - Iron[i]) - string[Iron[i]:Mag[j]].count(':')\n        else:\n            Power = K + 1 - abs(Mag[j] - Iron[i]) - string[Mag[j]:Iron[i]].count(':')\n        if Power > 0:\n            count += 1\n            i += 1\n            j += 1\n        elif Iron[i] > Mag[j]:\n            j += 1\n        else:\n            i += 1\n    return count\nt = int(input())\nfor _ in range(t):\n    (n, K) = map(int, input().split())\n    s = input()\n    maximum = 0\n    for i in s.split('X'):\n        maximum += CountMag(i, K)\n    print(maximum)", "test = int(input())\nfor t in range(test):\n    (n, k) = map(int, input().split())\n    s = input()\n    (c, ans) = (0, 0)\n    magnets = []\n    iron = []\n    prefix_cnt = [None] * n\n    for i in range(n):\n        if s[i] == 'M':\n            magnets.append(i)\n        elif s[i] == 'I':\n            iron.append(i)\n        elif s[i] == ':':\n            c += 1\n        prefix_cnt[i] = c\n    (i, m) = (0, 0)\n    while i < len(iron) and m < len(magnets):\n        gr = max(magnets[m], iron[i])\n        mi = min(magnets[m], iron[i])\n        if 'X' not in s[mi:gr]:\n            p = k + 1 - (gr - mi) - (prefix_cnt[gr] - prefix_cnt[mi])\n            if p > 0:\n                ans += 1\n                magnets.pop(m)\n                iron.pop(i)\n            elif iron[i] == gr:\n                m += 1\n            else:\n                i += 1\n        elif iron[i] == gr:\n            m += 1\n        else:\n            i += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = input()\n    ans = 0\n    (i, j) = (0, 0)\n    while i < n and j < n:\n        if a[i] != 'I':\n            i += 1\n        if a[j] != 'M':\n            j += 1\n        if i >= len(a) or j >= len(a):\n            break\n        c = 0\n        flag = 0\n        if a[i] == 'I' and a[j] == 'M':\n            if i < j:\n                mini = i\n                maxi = j\n            else:\n                maxi = i\n                mini = j\n            for fe in range(mini, maxi):\n                if a[fe] == ':':\n                    c += 1\n                elif a[fe] == 'X':\n                    i = fe\n                    j = fe\n                    flag = 1\n                    break\n            if flag == 0:\n                p = k + 1 - abs(i - j) - c\n            if p > 0 and flag == 0:\n                ans += 1\n                i += 1\n                j += 1\n            if p <= 0:\n                if j < i:\n                    j += 1\n                else:\n                    i += 1\n    print(ans)", "test = int(input())\nfor t in range(test):\n    (n, k) = map(int, input().split())\n    s = input()\n    (c, ans) = (0, 0)\n    magnets = []\n    iron = []\n    prefix_cnt = [None] * n\n    for i in range(n):\n        if s[i] == 'M':\n            magnets.append(i)\n        elif s[i] == 'I':\n            iron.append(i)\n        elif s[i] == ':':\n            c += 1\n        prefix_cnt[i] = c\n    (i, m) = (0, 0)\n    while i < len(iron) and m < len(magnets):\n        gr = max(magnets[m], iron[i])\n        mi = min(magnets[m], iron[i])\n        if 'X' not in s[mi:gr]:\n            p = k + 1 - (gr - mi) - (prefix_cnt[gr] - prefix_cnt[mi])\n            if p > 0:\n                ans += 1\n                magnets.pop(m)\n                iron.pop(i)\n            elif iron[i] == gr:\n                m += 1\n            else:\n                i += 1\n        elif iron[i] == gr:\n            m += 1\n        else:\n            i += 1\n    print(ans)", "import math\ntry:\n\n    def check(magnet, iron, conducting, k):\n        i = len(magnet) - 1\n        res = 0\n        j = 0\n        n = min(len(magnet), len(iron))\n        mag = 0\n        ir = 0\n        while iron and magnet and (mag < len(magnet)) and (ir < len(iron)):\n            power = k + 1 - abs(magnet[mag] - iron[ir]) - abs(conducting[magnet[mag]] - conducting[iron[ir]])\n            if power > 0:\n                mag += 1\n                ir += 1\n                res += 1\n            elif magnet[mag] > iron[ir]:\n                ir += 1\n            else:\n                mag += 1\n        return res\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split(' '))\n        s = input()\n        magnet = []\n        iron = []\n        conducting = []\n        conduct = 0\n        q = 0\n        for (i, val) in enumerate(s):\n            if val == 'M':\n                magnet.append(i)\n                conducting.append(conduct)\n            elif val == 'I':\n                iron.append(i)\n                conducting.append(conduct)\n            elif val == ':':\n                conduct += 1\n                conducting.append(conduct)\n            elif val == '_':\n                conducting.append(conduct)\n            elif val == 'X':\n                conducting.append(-1)\n                if iron and magnet:\n                    q += check(magnet, iron, conducting, k)\n                magnet = []\n                iron = []\n                conduct = 0\n        q += check(magnet, iron, conducting, k)\n        print(q)\nexcept:\n    pass", "def pos(i):\n    if i < 0:\n        return -i\n    else:\n        return i\nT = int(input())\nfor i in range(T):\n    (n, k) = map(int, input().split())\n    s = input()\n    z = 0\n    ksd = 0\n    se = 0\n    h = []\n    for j in range(n):\n        if s[j] == 'I':\n            if z == 0:\n                h.append(j)\n                z = 1\n            elif z == 2:\n                cdv = ksd\n                for jlk in h:\n                    if k + 1 - pos(jlk - j) - s[jlk + 1:j].count(':') > 0:\n                        h.remove(jlk)\n                        ksd = ksd + 1\n                        break\n                if cdv == ksd:\n                    z = 1\n                    h.clear()\n                    h.append(j)\n            else:\n                h.append(j)\n        elif s[j] == 'M':\n            if z == 0:\n                h.append(j)\n                z = 2\n            elif z == 1:\n                cdv = ksd\n                for jlk in h:\n                    if k + 1 - pos(jlk - j) - s[jlk + 1:j].count(':') > 0:\n                        h.remove(jlk)\n                        ksd = ksd + 1\n                        break\n                if cdv == ksd:\n                    z = 2\n                    h.clear()\n                    h.append(j)\n            else:\n                h.append(j)\n        elif s[j] == 'X':\n            z = 0\n            h.clear()\n    print(ksd)", "def pos(i):\n    if i < 0:\n        return -i\n    else:\n        return i\nT = int(input())\nfor i in range(T):\n    (n, k) = map(int, input().split())\n    s = input()\n    z = 0\n    ksd = 0\n    se = 0\n    h = []\n    for j in range(n):\n        if s[j] == 'I':\n            if z == 0:\n                h.append(j)\n                z = 1\n            elif z == 2:\n                cdv = ksd\n                for jlk in h:\n                    if k + 1 - pos(jlk - j) - s[jlk + 1:j].count(':') > 0:\n                        h.remove(jlk)\n                        ksd = ksd + 1\n                        break\n                if cdv == ksd:\n                    z = 1\n                    h.clear()\n                    h.append(j)\n            else:\n                h.append(j)\n        elif s[j] == 'M':\n            if z == 0:\n                h.append(j)\n                z = 2\n            elif z == 1:\n                cdv = ksd\n                for jlk in h:\n                    if k + 1 - pos(jlk - j) - s[jlk + 1:j].count(':') > 0:\n                        h.remove(jlk)\n                        ksd = ksd + 1\n                        break\n                if cdv == ksd:\n                    z = 2\n                    h.clear()\n                    h.append(j)\n            else:\n                h.append(j)\n        elif s[j] == 'X':\n            z = 0\n            h.clear()\n    print(ksd)", "from collections import defaultdict\n\ndef find():\n    d = defaultdict(int)\n    ans = 0\n    c = 0\n    for i in m:\n        for j in r[c:]:\n            if k - abs(j - i) - abs(sh[j] - sh[i]) > 0 and d[j] == 0:\n                d[j] = 1\n                ans = ans + 1\n                break\n    return ans\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    k = k + 1\n    s = input()\n    m = []\n    total = 0\n    r = []\n    sh = [0] * n\n    for i in range(n):\n        temp = sh[i - 1]\n        if s[i] == 'M':\n            m.append(i)\n        if s[i] == ':':\n            temp = temp + 1\n        if s[i] == 'I':\n            r.append(i)\n        sh[i] = temp\n        if s[i] == 'X':\n            total = total + find()\n            m = []\n            r = []\n    total = total + find()\n    print(total)", "testcases = int(input())\nfor test in range(testcases):\n    (lst_name, answer) = ([], 0)\n    (N, power) = map(int, input().split())\n    strii = input()\n    for i in strii.split('X'):\n        lst_name.append(i)\n    for om in lst_name:\n        (count_i, count_m, count_) = (0, 0, 0)\n        (Irons, Magnets) = ([], [])\n        dictionary = {i: 0 for i in range(len(om))}\n        if len(om):\n            if om[0] != ':':\n                dictionary[-1] = 0\n        for i in range(len(om)):\n            if om[i] == '_':\n                count_ += 1\n            if om[i] == 'I':\n                count_i += 1\n                Irons.append(i)\n            if om[i] == 'M':\n                count_m += 1\n                Magnets.append(i)\n            if om[i] == ':':\n                dictionary[i] = i - (count_i + count_m + count_) + 1\n            else:\n                dictionary[i] = dictionary[i - 1]\n        for i in Irons:\n            checker = 0\n            for j in Magnets:\n                if j > i:\n                    sheet_count = dictionary[j] - dictionary[i]\n                else:\n                    sheet_count = dictionary[i] - dictionary[j]\n                if abs(i - j) > power:\n                    continue\n                if checker == 1:\n                    break\n                if power + 1 - abs(i - j) - sheet_count > 0:\n                    checker = 1\n                    answer += 1\n                    Magnets.remove(j)\n                    break\n    print(answer)", "import sys\ntry:\n    t = int(sys.stdin.readline().rstrip())\nexcept:\n    t = 1\nfor _ in range(t):\n    m = 0\n    inp = sys.stdin.readline().rstrip()\n    if inp == '':\n        continue\n    else:\n        (n, k) = map(int, inp.split())\n    s = sys.stdin.readline().rstrip()\n    (ir, mg) = ([], [])\n    for i in range(n):\n        if s[i] == 'I':\n            ir.append(i)\n        if s[i] == 'M':\n            mg.append(i)\n        if s[i] == 'X' or i == n - 1:\n            while len(ir) != 0 and len(mg) != 0:\n                if k + 1 - abs(ir[0] - mg[0]) - s[min(ir[0], mg[0]):max(ir[0], mg[0])].count(':') > 0:\n                    m += 1\n                    ir.pop(0)\n                    mg.pop(0)\n                elif mg[0] < ir[0]:\n                    mg.pop(0)\n                else:\n                    ir.pop(0)\n            (ir, mg) = ([], [])\n    print(m)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    (i, j) = (0, 0)\n    q = 0\n    while i < n and j < n:\n        if s[i] == 'M':\n            if s[j] == 'I':\n                cnt = 0\n                if i > j:\n                    p = s[j:i]\n                    cnt = p.count(':')\n                else:\n                    p = s[i:j]\n                    cnt = p.count(':')\n                t = k + 1 - abs(i - j) - cnt\n                if t > 0:\n                    q += 1\n                    i += 1\n                    j += 1\n                elif i < j:\n                    i += 1\n                else:\n                    j += 1\n            elif s[j] == 'X':\n                j += 1\n                i = j\n            else:\n                j += 1\n        elif s[i] == 'X':\n            i += 1\n            j = i\n        else:\n            i += 1\n    print(q)", "import sys\n\ndef update(x):\n    x = x.strip('_')\n    x = x.strip(':')\n    x = x.strip('_')\n    return x\n\ndef lol(x, i, j, d):\n    if x + 1 - (d + abs(i - j)) > 0:\n        return 1\n    else:\n        return 0\n\ndef papa(l, x):\n    if len(l) == 0:\n        return 0\n    list1 = []\n    list2 = []\n    P = [0 for i in range(len(l))]\n    if l[0] == ':':\n        P[0] = 1\n    for i in range(len(l)):\n        if l[i] == 'M':\n            list2 += [i]\n    for i in range(len(l)):\n        if l[i] == 'I':\n            list1 += [i]\n    for i in range(len(l)):\n        if l[i] == ':' and i > 0:\n            P[i] += P[i - 1] + 1\n        else:\n            P[i] += P[i - 1]\n    (count, i, j) = (0, 0, 0)\n    while j < len(list2) and i < len(list1):\n        if lol(x, list1[i], list2[j], P[max(list1[i], list2[j])] - P[min(list1[i], list2[j])]):\n            count += 1\n            i += 1\n            j += 1\n        elif list1[i] > list2[j]:\n            j += 1\n        else:\n            i += 1\n    return count\n\ndef solve(s, n, x):\n    test = []\n    for i in range(len(s)):\n        if s[i] == 'X':\n            test += [i]\n    if len(test) == 0:\n        print(papa(s, x))\n        return\n    (i, j, k) = (0, 0, 0)\n    c = 0\n    while k < len(test):\n        i = j\n        j = test[k]\n        c += papa(update(s[i:j]), x)\n        k += 1\n    if len(test):\n        c += papa(update(s[test[-1] + 1:n]), x)\n    print(c)\nfor _ in range(int(sys.stdin.readline())):\n    (n, x) = map(int, sys.stdin.readline().strip().split())\n    string = input()\n    string = update(string)\n    solve(string, n, x)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    ans = 0\n    c = 0\n    (i, j) = (0, 0)\n    while i < n and j < n:\n        if s[i] == 'M':\n            if s[j] == 'I':\n                for x in range(min(i, j), max(i, j) + 1):\n                    if s[x] == ':':\n                        c += 1\n                p = k + 1 - abs(i - j) - c\n                c = 0\n                if p > 0:\n                    ans += 1\n                    i += 1\n                    j += 1\n                elif j > i:\n                    i += 1\n                else:\n                    j += 1\n            elif s[j] == 'X':\n                i = j\n                i += 1\n                j += 1\n            else:\n                j += 1\n        elif s[i] == 'X':\n            j = i\n            i += 1\n            j += 1\n        else:\n            i += 1\n    print(ans)", "try:\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        a = input()\n        ans = 0\n        (i, j) = (0, 0)\n        while i < n and j < n:\n            if a[i] != 'I':\n                i += 1\n            if a[j] != 'M':\n                j += 1\n            if i >= len(a) or j >= len(a):\n                break\n            c = 0\n            flag = 0\n            if a[i] == 'I' and a[j] == 'M':\n                if i < j:\n                    mini = i\n                    maxi = j\n                else:\n                    maxi = i\n                    mini = j\n                for fe in range(mini, maxi):\n                    if a[fe] == ':':\n                        c += 1\n                    elif a[fe] == 'X':\n                        i = fe\n                        j = fe\n                        flag = 1\n                        break\n                if flag == 0:\n                    p = k + 1 - abs(i - j) - c\n                if p > 0 and flag == 0:\n                    ans += 1\n                    i += 1\n                    j += 1\n                if p <= 0:\n                    if j < i:\n                        j += 1\n                    else:\n                        i += 1\n        print(ans)\nexcept:\n    pass", "t = int(input())\nfor i in range(t):\n    (n, k1) = map(int, input().split())\n    s = input()\n    res = 0\n    j = 0\n    k = 0\n    sh = 0\n    while j < n and k < n:\n        if s[j] == 'X':\n            k = j\n            j = j + 1\n            k = k + 1\n            sh = 0\n        elif s[j] == 'M':\n            if s[k] == 'X':\n                j = k\n                j = j + 1\n                k = k + 1\n                sh = 0\n            elif s[k] == 'I':\n                sh = 0\n                if k > j:\n                    te = j\n                    while te < k:\n                        if s[te] == ':':\n                            sh = sh + 1\n                        te = te + 1\n                else:\n                    te = k\n                    while te < j:\n                        if s[te] == ':':\n                            sh = sh + 1\n                        te = te + 1\n                po = k1 + 1 - abs(j - k) - sh\n                if po > 0:\n                    res = res + 1\n                    k = k + 1\n                    j = j + 1\n                    sh = 0\n                elif j > k:\n                    k = k + 1\n                else:\n                    j = j + 1\n            else:\n                k = k + 1\n        else:\n            j = j + 1\n    print(res)", "try:\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        a = input()\n        ans = 0\n        (i, j) = (0, 0)\n        while i < n and j < n:\n            if a[i] != 'I':\n                i += 1\n            if a[j] != 'M':\n                j += 1\n            if i >= len(a) or j >= len(a):\n                break\n            c = 0\n            flag = 0\n            if a[i] == 'I' and a[j] == 'M':\n                if i < j:\n                    mini = i\n                    maxi = j\n                else:\n                    maxi = i\n                    mini = j\n                for fe in range(mini, maxi):\n                    if a[fe] == ':':\n                        c += 1\n                    elif a[fe] == 'X':\n                        i = fe\n                        j = fe\n                        flag = 1\n                        break\n                if flag == 0:\n                    p = k + 1 - abs(i - j) - c\n                if p > 0 and flag == 0:\n                    ans += 1\n                    i += 1\n                    j += 1\n                if p <= 0:\n                    if j < i:\n                        j += 1\n                    else:\n                        i += 1\n        print(ans)\nexcept:\n    pass", "def check(k, j, i, s):\n    k = k + 1 - abs(j - i) - s\n    return k > 0\nt = int(input())\nfor i in range(t):\n    (n, k) = input().split()\n    (n, k, cou, var) = (int(n), int(k), 0, 0)\n    s = input()\n    ma = s.find('M')\n    ir = s.find('I')\n    while ma >= 0 and ir >= 0:\n        block = s.count('X', min(ma, ir), max(ma, ir) + 1)\n        if block == 0:\n            plate = s.count(':', min(ma, ir), max(ma, ir) + 1)\n            var = check(k, ma, ir, plate)\n        if ma < ir and block > 0:\n            ma = s.find('M', ma + 1, n)\n        elif ir < ma and block > 0:\n            ir = s.find('I', ir + 1, n)\n        elif ma < ir and var == False:\n            ma = s.find('M', ma + 1, n)\n        elif ir < ma and var == False:\n            ir = s.find('I', ir + 1, n)\n        else:\n            cou += 1\n            ma = s.find('M', ma + 1, n)\n            ir = s.find('I', ir + 1, n)\n    print(cou)", "def check(k, j, i, s):\n    k = k + 1 - abs(j - i) - s\n    return k > 0\nt = int(input())\nfor i in range(t):\n    (n, k) = input().split()\n    (n, k, ans, var) = (int(n), int(k), 0, 0)\n    s = input()\n    ma = s.find('M')\n    ir = s.find('I')\n    while ma >= 0 and ir >= 0:\n        block = s.count('X', min(ma, ir), max(ma, ir) + 1)\n        if block == 0:\n            plate = s.count(':', min(ma, ir), max(ma, ir) + 1)\n            var = check(k, ma, ir, plate)\n        if ma < ir and block > 0:\n            ma = s.find('M', ma + 1, n)\n        elif ir < ma and block > 0:\n            ir = s.find('I', ir + 1, n)\n        elif ma < ir and var == False:\n            ma = s.find('M', ma + 1, n)\n        elif ir < ma and var == False:\n            ir = s.find('I', ir + 1, n)\n        else:\n            ans += 1\n            ma = s.find('M', ma + 1, n)\n            ir = s.find('I', ir + 1, n)\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    s = input()\n    p = k + 1\n    c = 0\n    l1 = []\n    l2 = []\n    for i in range(n):\n        if s[i] == 'M':\n            l1.append(i)\n        if s[i] == 'I':\n            l2.append(i)\n        if s[i] == 'X' or i == n - 1:\n            while len(l1) > 0 and len(l2) > 0:\n                k = 0\n                l = min(l1[0], l2[0])\n                r = max(l1[0], l2[0])\n                for j in range(l, r + 1):\n                    if s[j] == ':':\n                        k += 1\n                if p - abs(l - r) - k > 0:\n                    c += 1\n                    l1.remove(l1[0])\n                    l2.remove(l2[0])\n                elif l1[0] < l2[0]:\n                    l1.pop(0)\n                else:\n                    l2.pop(0)\n            l1.clear()\n            l2.clear()\n    print(c)", "try:\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        s = input()\n        (mg, ir, count) = (list(), list(), 0)\n        for i in range(n):\n            if s[i] == 'M':\n                mg.append(i)\n            if s[i] == 'I':\n                ir.append(i)\n            if s[i] == 'X' or i == n - 1:\n                while len(mg) != 0 and len(ir) != 0:\n                    scount = 0\n                    (high, low) = (max(mg[0], ir[0]), min(mg[0], ir[0]))\n                    for j in range(low, high + 1):\n                        if s[j] == ':':\n                            scount = scount + 1\n                    if k + 1 - abs(low - high) - scount > 0:\n                        count = count + 1\n                        mg.remove(mg[0])\n                        ir.remove(ir[0])\n                    elif mg[0] < ir[0]:\n                        mg.remove(mg[0])\n                    else:\n                        ir.remove(ir[0])\n                while len(mg) != 0:\n                    mg.remove(mg[0])\n                while len(ir) != 0:\n                    ir.remove(ir[0])\n        print(count)\nexcept:\n    pass", "def pos(i):\n    if i < 0:\n        return -i\n    else:\n        return i\nTestcase = int(input())\nfor i in range(Testcase):\n    (N, K) = map(int, input().split())\n    string = input()\n    z = 0\n    magnet = 0\n    se = 0\n    list1 = []\n    for j in range(N):\n        if string[j] == 'I':\n            if z == 0:\n                list1.append(j)\n                z = 1\n            elif z == 2:\n                abc = magnet\n                for c in list1:\n                    if K + 1 - pos(c - j) - string[c + 1:j].count(':') > 0:\n                        list1.remove(c)\n                        magnet = magnet + 1\n                        break\n                if abc == magnet:\n                    z = 1\n                    list1.clear()\n                    list1.append(j)\n            else:\n                list1.append(j)\n        elif string[j] == 'M':\n            if z == 0:\n                list1.append(j)\n                z = 2\n            elif z == 1:\n                abc = magnet\n                for c in list1:\n                    if K + 1 - pos(c - j) - string[c + 1:j].count(':') > 0:\n                        list1.remove(c)\n                        magnet = magnet + 1\n                        break\n                if abc == magnet:\n                    z = 2\n                    list1.clear()\n                    list1.append(j)\n            else:\n                list1.append(j)\n        elif string[j] == 'X':\n            z = 0\n            list1.clear()\n    print(magnet)", "try:\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        s = input()\n        iron = []\n        mag = []\n        cnt = 0\n        p = k + 1\n        for i in range(n):\n            if s[i] == 'M':\n                mag.append(i)\n            if s[i] == 'I':\n                iron.append(i)\n            if s[i] == 'X' or i == n - 1:\n                while len(mag) != 0 and len(iron) != 0:\n                    shcnt = 0\n                    l = min(mag[0], iron[0])\n                    r = max(mag[0], iron[0])\n                    for k in range(l, r + 1):\n                        if s[k] == ':':\n                            shcnt += 1\n                    if p - abs(l - r) - shcnt > 0:\n                        cnt += 1\n                        iron.remove(iron[0])\n                        mag.remove(mag[0])\n                    elif mag[0] < iron[0]:\n                        mag.remove(mag[0])\n                    else:\n                        iron.remove(iron[0])\n                while len(mag) != 0:\n                    mag.remove(mag[0])\n                while len(iron) != 0:\n                    iron.remove(iron[0])\n        print(cnt)\nexcept:\n    pass", "from collections import deque\n\ndef throw(n):\n    print(n)\nfor _ in range(int(input())):\n    (num, k) = map(int, input().split())\n    string = input()\n    ans = 0\n    loha = deque([])\n    chumbak = deque([])\n    parat = [0 for x in range(len(string) + 1)]\n    if string[0] == ':':\n        parat[1] = 1\n    else:\n        parat[1] = 0\n    for i in range(1, len(string)):\n        if string[i] == ':':\n            parat[i + 1] = parat[i] + 1\n        else:\n            parat[i + 1] = parat[i]\n    for i in range(len(string)):\n        f = 0\n        if string[i] == '_':\n            continue\n        elif string[i] == 'X':\n            loha.clear()\n            chumbak.clear()\n        elif string[i] == 'M':\n            if len(loha) != 0:\n                c = 0\n                for j in loha:\n                    c += 1\n                    if k + 1 - abs(i - j) - (parat[i + 1] - parat[j]) > 0:\n                        ans += 1\n                        f = 1\n                        break\n                if f == 0:\n                    chumbak.append(i)\n                else:\n                    for j in range(c):\n                        loha.popleft()\n            else:\n                chumbak.append(i)\n        elif string[i] == 'I':\n            if len(chumbak) != 0:\n                c = 0\n                for j in chumbak:\n                    c += 1\n                    if k + 1 - abs(i - j) - (parat[i + 1] - parat[j]) > 0:\n                        ans += 1\n                        f = 1\n                        break\n                if f == 0:\n                    loha.append(i)\n                else:\n                    for j in range(c):\n                        chumbak.popleft()\n            else:\n                loha.append(i)\n    throw(ans)", "def change(i, ch, s, n):\n    i += 1\n    while i < n and s[i] != ch:\n        i += 1\n    return i\nt = int(input())\nfor q in range(0, t):\n    (n, k) = map(int, input().split())\n    s = input()\n    i = 0\n    j = 0\n    ans = 0\n    conduct = [0 for _ in range(n)]\n    blocked = [0 for _ in range(n)]\n    if s[0] == ':':\n        conduct[0] = 1\n    if s[0] == 'X':\n        blocked[0] = 1\n    for i in range(1, n):\n        if s[i] == 'X':\n            blocked[i] = blocked[i - 1] + 1\n        else:\n            blocked[i] = blocked[i - 1]\n        if s[i] == ':':\n            conduct[i] = conduct[i - 1] + 1\n        else:\n            conduct[i] = conduct[i - 1]\n    i = 0\n    j = 0\n    while i < n and s[i] != 'M':\n        i += 1\n    while j < n and s[j] != 'I':\n        j += 1\n    while i < n and j < n:\n        cc = abs(conduct[i] - conduct[j])\n        vv = abs(blocked[i] - blocked[j])\n        val = k + 1 - abs(i - j) - cc\n        if val > 0 and vv == 0:\n            ans += 1\n            i = change(i, 'M', s, n)\n            j = change(j, 'I', s, n)\n        elif i < j:\n            i = change(i, 'M', s, n)\n        else:\n            j = change(j, 'I', s, n)\n    print(ans)", "def changed(i, ch, s, n):\n    i += 1\n    while i < n and s[i] != ch:\n        i += 1\n    return i\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    c = [0] * n\n    b = [0] * n\n    if s[0] == ':':\n        c[0] = 1\n    if s[0] == 'X':\n        b[0] = 1\n    for i in range(1, n):\n        if s[i] == 'X':\n            b[i] = b[i - 1] + 1\n        else:\n            b[i] = b[i - 1]\n        if s[i] == ':':\n            c[i] = c[i - 1] + 1\n        else:\n            c[i] = c[i - 1]\n    i = 0\n    j = 0\n    ans = 0\n    while i < n and s[i] != 'M':\n        i += 1\n    while j < n and s[j] != 'I':\n        j += 1\n    while i < n and j < n:\n        ii = i\n        jj = j\n        vv = abs(b[i] - b[j])\n        cc = abs(c[i] - c[j])\n        val = k + 1 - abs(i - j) - cc\n        if val > 0 and vv == 0:\n            ans += 1\n            i = changed(ii, 'M', s, n)\n            j = changed(jj, 'I', s, n)\n        elif i < j:\n            i = changed(ii, 'M', s, n)\n        else:\n            j = changed(jj, 'I', s, n)\n    print(ans)", "def increment(i, ch, s, n):\n    i = i + 1\n    while i < n and s[i] != ch:\n        i = i + 1\n    return i\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    p = k + 1\n    x = [0] * n\n    y = [0] * n\n    if s[0] == ':':\n        y[0] = 1\n    if s[0] == 'X':\n        x[0] = 1\n    for i in range(1, n):\n        if s[i] == 'X':\n            x[i] = x[i - 1] + 1\n        else:\n            x[i] = x[i - 1]\n        if s[i] == ':':\n            y[i] = y[i - 1] + 1\n        else:\n            y[i] = y[i - 1]\n    (i, j, ans) = (0, 0, 0)\n    while i < n and s[i] != 'M':\n        i = i + 1\n    while j < n and s[j] != 'I':\n        j = j + 1\n    while i < n and j < n:\n        q = abs(i - j) + abs(y[i] - y[j])\n        ip = i\n        jp = j\n        q = k + 1 - abs(i - j) - abs(y[i] - y[j])\n        if q > 0 and abs(x[i] - x[j]) == 0:\n            ans = ans + 1\n            i = increment(ip, 'M', s, n)\n            j = increment(jp, 'I', s, n)\n        elif i < j:\n            i = increment(ip, 'M', s, n)\n        else:\n            j = increment(jp, 'I', s, n)\n    print(ans)", "def increment(i, ch, s, n):\n    i = i + 1\n    while i < n and s[i] != ch:\n        i = i + 1\n    return i\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    p = k + 1\n    x = [0] * n\n    y = [0] * n\n    if s[0] == ':':\n        y[0] = 1\n    if s[0] == 'X':\n        x[0] = 1\n    for i in range(1, n):\n        if s[i] == 'X':\n            x[i] = x[i - 1] + 1\n        else:\n            x[i] = x[i - 1]\n        if s[i] == ':':\n            y[i] = y[i - 1] + 1\n        else:\n            y[i] = y[i - 1]\n    (i, j, ans) = (0, 0, 0)\n    while i < n and s[i] != 'M':\n        i = i + 1\n    while j < n and s[j] != 'I':\n        j = j + 1\n    while i < n and j < n:\n        q = abs(i - j) + abs(y[i] - y[j])\n        ip = i\n        jp = j\n        q = k + 1 - abs(i - j) - abs(y[i] - y[j])\n        if q > 0 and abs(x[i] - x[j]) == 0:\n            ans = ans + 1\n            i = increment(ip, 'M', s, n)\n            j = increment(jp, 'I', s, n)\n        elif i < j:\n            i = increment(ip, 'M', s, n)\n        else:\n            j = increment(jp, 'I', s, n)\n    print(ans)", "def increment(i, ch, s, n):\n    i = i + 1\n    while i < n and s[i] != ch:\n        i = i + 1\n    return i\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    p = k + 1\n    x = [0 for _ in range(n)]\n    y = [0 for _ in range(n)]\n    if s[0] == ':':\n        y[0] = 1\n    if s[0] == 'X':\n        x[0] = 1\n    for i in range(1, n):\n        if s[i] == 'X':\n            x[i] = x[i - 1] + 1\n        else:\n            x[i] = x[i - 1]\n        if s[i] == ':':\n            y[i] = y[i - 1] + 1\n        else:\n            y[i] = y[i - 1]\n    (i, j, ans) = (0, 0, 0)\n    while i < n and s[i] != 'M':\n        i = i + 1\n    while j < n and s[j] != 'I':\n        j = j + 1\n    while i < n and j < n:\n        q = abs(i - j) + abs(y[i] - y[j])\n        ip = i\n        jp = j\n        q = k + 1 - abs(i - j) - abs(y[i] - y[j])\n        if q > 0 and abs(x[i] - x[j]) == 0:\n            ans = ans + 1\n            i = increment(ip, 'M', s, n)\n            j = increment(jp, 'I', s, n)\n        elif i < j:\n            i = increment(ip, 'M', s, n)\n        else:\n            j = increment(jp, 'I', s, n)\n    print(ans)", "def attraction(magnet, iron, num_sheets):\n    return k + 1 - abs(magnet - iron) - num_sheets\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    iron_pos = magnet_pos = num_sheets = ans = 0\n    seq = input()\n    while iron_pos < n and magnet_pos < n:\n        if seq[magnet_pos] == 'M':\n            if seq[iron_pos] == 'I':\n                if iron_pos < magnet_pos:\n                    for i in range(iron_pos, magnet_pos):\n                        if seq[i] == ':':\n                            num_sheets += 1\n                elif magnet_pos < iron_pos:\n                    for i in range(magnet_pos, iron_pos):\n                        if seq[i] == ':':\n                            num_sheets += 1\n                P = attraction(magnet_pos, iron_pos, num_sheets)\n                if P <= 0:\n                    if magnet_pos > iron_pos:\n                        iron_pos += 1\n                    else:\n                        magnet_pos += 1\n                    num_sheets = 0\n                elif P > 0:\n                    ans += 1\n                    iron_pos += 1\n                    magnet_pos += 1\n                    num_sheets = 0\n                continue\n            elif seq[iron_pos] == 'X':\n                iron_pos += 1\n                magnet_pos = iron_pos\n            else:\n                iron_pos += 1\n        elif seq[magnet_pos] == 'X':\n            magnet_pos += 1\n            iron_pos = magnet_pos\n        else:\n            magnet_pos += 1\n    print(ans)", "while True:\n    try:\n        t = int(input())\n        h = 1\n        while h <= t:\n            (n, k) = map(int, input().split())\n            s = input()\n            iron = []\n            magnet = []\n            count = 0\n            for i in range(n):\n                if s[i] == 'M':\n                    magnet.append(i)\n                if s[i] == 'I':\n                    iron.append(i)\n                if s[i] == 'X' or i == n - 1:\n                    while len(iron) != 0 and len(magnet) != 0:\n                        cdt = 0\n                        l = min(iron[0], magnet[0])\n                        r = max(iron[0], magnet[0])\n                        for j in range(l, r + 1):\n                            if s[j] == ':':\n                                cdt += 1\n                        if k + 1 - abs(l - r) - cdt > 0:\n                            count += 1\n                            magnet.pop(0)\n                            iron.pop(0)\n                        elif magnet[0] < iron[0]:\n                            magnet.pop(0)\n                        else:\n                            iron.pop(0)\n                    while len(magnet) != 0:\n                        magnet.pop()\n                    while len(iron) != 0:\n                        iron.pop()\n            print(count)\n            h += 1\n    except:\n        break", "def solve(setup, K):\n    global mag_stren, mag_count, mag_index, iron_stren, iron_count, iron_index, since_last_mag, since_last_iron\n    start_stren = K + 1\n    pair_count = 0\n    (since_last_mag, since_last_iron) = (0, 0)\n    reset(iron=True, mag=True)\n    for char in setup:\n        if char == 'M':\n            if not mag_found:\n                mag_stren = start_stren\n            mag_found.append(since_last_mag)\n            mag_count += 1\n            since_last_mag = 0\n            while iron_stren <= 0 and iron_index < iron_count - 1:\n                iron_index += 1\n                iron_stren += iron_found[iron_index]\n            if iron_stren > 0 and iron_index < iron_count:\n                pair_count += 1\n                iron_index += 1\n                mag_index += 1\n                if iron_index == iron_count:\n                    reset(iron=True)\n                else:\n                    iron_stren += iron_found[iron_index]\n                if mag_index == mag_count:\n                    reset(mag=True)\n                else:\n                    mag_stren += mag_found[mag_index]\n        elif char == 'I':\n            if not iron_found:\n                iron_stren = start_stren\n            iron_found.append(since_last_iron)\n            iron_count += 1\n            since_last_iron = 0\n            while mag_stren <= 0 and mag_index < mag_count - 1:\n                mag_index += 1\n                mag_stren += mag_found[mag_index]\n            if mag_stren > 0 and mag_index < mag_count:\n                pair_count += 1\n                mag_index += 1\n                iron_index += 1\n                if mag_index == mag_count:\n                    reset(mag=True)\n                else:\n                    mag_stren += mag_found[mag_index]\n                if iron_index == iron_count:\n                    reset(iron=True)\n                else:\n                    iron_stren += iron_found[iron_index]\n        elif char == 'X':\n            reset(iron=True, mag=True)\n        elif char == ':':\n            mag_stren -= 1\n            iron_stren -= 1\n            since_last_iron += 1\n            since_last_mag += 1\n        mag_stren -= 1\n        iron_stren -= 1\n        since_last_iron += 1\n        since_last_mag += 1\n        if mag_found and mag_stren <= 0:\n            mag_index += 1\n            if mag_index < mag_count:\n                mag_stren += mag_found[mag_index]\n            else:\n                reset(mag=True)\n        if iron_found and iron_stren <= 0:\n            iron_index += 1\n            if iron_index < iron_count:\n                iron_stren += iron_found[iron_index]\n            else:\n                reset(iron=True)\n    return pair_count\n\ndef reset(iron=False, mag=False):\n    if iron:\n        global iron_index, iron_stren, iron_count, since_last_iron\n        iron_found.clear()\n        (iron_index, iron_stren, iron_count, since_last_iron) = (0, 0, 0, 0)\n    if mag:\n        global mag_index, mag_stren, mag_count, since_last_mag\n        mag_found.clear()\n        (mag_index, mag_stren, mag_count, since_last_mag) = (0, 0, 0, 0)\niron_found = []\nmag_found = []\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    setup = input()\n    print(solve(setup, K))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = [list(x) for x in s.split('X')]\n    res = 0\n    for slc in a:\n        i = 0\n        m = 0\n        I = True\n        M = True\n        l = len(slc)\n        while i < l and m < l:\n            if slc[i] == 'I':\n                I = False\n            if slc[m] == 'M':\n                M = False\n            if not I and (not M):\n                s = 0\n                srt = min(i, m)\n                end = max(i, m)\n                for x in range(srt, end):\n                    if slc[x] == ':':\n                        s += 1\n                part = k + 1 - abs(i - m) - s\n                if part > 0:\n                    I = True\n                    M = True\n                    res += 1\n                elif i < m:\n                    I = True\n                else:\n                    M = True\n            if I:\n                i += 1\n            if M:\n                m += 1\n    print(res)"]