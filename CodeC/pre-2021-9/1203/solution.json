["try:\n    import math\n\n    def computeGCD(x, y):\n        while y:\n            (x, y) = (y, x % y)\n        return x\n\n    def findsol(ai, n):\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if computeGCD(ai[i], ai[j]) > 1:\n                    return computeGCD(ai[i], ai[j])\n        for i in range(n):\n            x = ai[i]\n            q = 1\n            while q * q * q <= x:\n                if q > 1 and x % (q * q) == 0:\n                    return q\n                if x % q == 0:\n                    k = math.floor(math.sqrt(x // q))\n                    if k > 1 and k * k == x // q:\n                        return k\n                q += 1\n    for _ in range(int(input())):\n        n = int(input())\n        ai = list(map(int, input().split()))\n        ans = findsol(ai, n)\n        print(ans, end='\\n')\nexcept EOFError as e:\n    print(end='')", "try:\n    import math\n\n    def computeGCD(x, y):\n        while y:\n            (x, y) = (y, x % y)\n        return x\n\n    def findsol(ai, n):\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if computeGCD(ai[i], ai[j]) > 1:\n                    return computeGCD(ai[i], ai[j])\n        for i in range(n):\n            x = ai[i]\n            q = 1\n            while q * q * q <= x:\n                if q > 1 and x % (q * q) == 0:\n                    return q\n                if x % q == 0:\n                    k = math.floor(math.sqrt(x // q))\n                    if k > 1 and k * k == x // q:\n                        return k\n                q += 1\n    for _ in range(int(input())):\n        n = int(input())\n        ai = list(map(int, input().split()))\n        ans = findsol(ai, n)\n        print(ans, end='\\n')\nexcept EOFError as e:\n    print(end='')", "try:\n    import math\n\n    def computeGCD(x, y):\n        while y:\n            (x, y) = (y, x % y)\n        return x\n\n    def findsol(ai, n):\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if computeGCD(ai[i], ai[j]) > 1:\n                    return computeGCD(ai[i], ai[j])\n        for i in range(n):\n            x = ai[i]\n            q = 1\n            while q * q * q <= x:\n                if q > 1 and x % (q * q) == 0:\n                    return q\n                if x % q == 0:\n                    k = math.floor(math.sqrt(x // q))\n                    if k > 1 and k * k == x // q:\n                        return k\n                q += 1\n    for _ in range(int(input())):\n        n = int(input())\n        ai = list(map(int, input().split()))\n        ans = findsol(ai, n)\n        print(ans, end='\\n')\nexcept EOFError as e:\n    print(end='')", "import math\n\ndef solve(arr):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if math.gcd(arr[i], arr[j]) > 1:\n                return math.gcd(arr[i], arr[j])\n    for i in range(len(arr)):\n        p = arr[i]\n        j = 1\n        while j * j * j <= p:\n            if j > 1 and p % (j * j) == 0:\n                return j\n            if p % j == 0:\n                k = math.floor(math.sqrt(p // j))\n                if k > 1 and k * k == p // j:\n                    return k\n            j += 1\n    raise ValueError()\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(c) for c in input().split()]\n    print(solve(arr))", "import math\n\ndef seive():\n    m = 0\n    M = 10 ** 6\n    arr = [0] * (M + 1)\n    arr[0] = arr[1] = 1\n    for i in range(2, M + 1):\n        if arr[i] == 0:\n            j = i + i\n            while j <= M:\n                arr[j] = 1\n                j += i\n    pr = []\n    for i in range(M + 1):\n        if arr[i] == 0:\n            pr += [i]\n    return pr\n\ndef prog(prime):\n    n = int(input())\n    M = 10 ** 6\n    num = [int(i) for i in input().split()]\n    for i in range(n):\n        for j in range(i + 1, n):\n            x = math.gcd(num[i], num[j])\n            if x != 1:\n                print(x)\n                return\n    for x in num:\n        i = x\n        for j in prime:\n            if i % j == 0:\n                i /= j\n                if i % j == 0:\n                    i /= j\n                    print(j)\n                    return\n        if i >= M:\n            sq = math.sqrt(i)\n            sqi = int(sq)\n            if sq == sqi:\n                print(sqi)\n                return\nprime = seive()\nfor _ in range(int(input())):\n    prog(prime)", "import math\n\ndef seive():\n    m = 0\n    M = 10 ** 6\n    arr = [0] * (M + 1)\n    arr[0] = arr[1] = 1\n    for i in range(2, M + 1):\n        if arr[i] == 0:\n            j = i + i\n            while j <= M:\n                arr[j] = 1\n                j += i\n    pr = []\n    for i in range(M + 1):\n        if arr[i] == 0:\n            pr += [i]\n    return pr\n\ndef prog(prime):\n    n = int(input())\n    M = 10 ** 6\n    num = [int(i) for i in input().split()]\n    for i in range(n):\n        for j in range(i + 1, n):\n            x = math.gcd(num[i], num[j])\n            if x != 1:\n                print(x)\n                return\n    for x in num:\n        i = x\n        for j in prime:\n            if i % j == 0:\n                i /= j\n                if i % j == 0:\n                    i /= j\n                    print(j)\n                    return\n        if i >= M:\n            sq = math.sqrt(i)\n            sqi = int(sq)\n            if sq == sqi:\n                print(sqi)\n                return\nprime = seive()\nt = int(input())\nfor _ in range(t):\n    prog(prime)", "from math import sqrt as S\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfrom math import sqrt as S\nfor _ in range(int(input())):\n    n = int(input())\n    f = 0\n    pf = {}\n    l = [int(i) for i in input().split()]\n    g = 0\n    ans = 0\n    for i in range(n):\n        if ans:\n            break\n        for j in range(i + 1, n):\n            g = gcd(l[i], l[j])\n            if g > 1:\n                ans = g\n                break\n    for i in range(n):\n        if ans:\n            break\n        curr = l[i]\n        pr = 1\n        while pr * pr * pr <= curr:\n            if curr % (pr * pr) == 0:\n                if pr * pr > 1:\n                    ans = pr\n            if curr % pr == 0:\n                rem = curr // pr\n                sq = S(rem)\n                if sq == int(sq) and rem > 1:\n                    ans = int(sq)\n            pr += 1\n    print(ans)", "def abcd():\n    import random\n\n    def gcd(a, b):\n        if b % a == 0:\n            return a\n        elif a % b == 0:\n            return b\n        else:\n            return gcd(min(a, b), max(a, b) % min(a, b))\n    import sys\n    from sys import stdin, stderr, stdout\n    up = 1000000000\n    K = int(up ** 0.5) + 1\n    prime = []\n    temp = [0] * (K + 1)\n    temp[0] = 1\n    temp[1] = 1\n    for i in range(len(temp)):\n        if temp[i] == 0:\n            prime += [i]\n            for j in range(2 * i, len(temp), i):\n                temp[j] = 1\n\n    def find(m, n):\n        C = [0 for i in range(m, n + 1)]\n        if m == 1:\n            C[0] = 1\n        K = int(n ** 0.5) + 1\n        for x in prime:\n            if x <= K:\n                start = x ** 2\n                if m > x ** 2:\n                    start = (m - x ** 2) // x * x + x ** 2\n                for y in range(start, n + 1, x):\n                    if y >= m:\n                        C[y - m] = 1\n            else:\n                break\n        ANS = []\n        for i in range(len(C)):\n            if C[i] == 0:\n                ANS += [i + m]\n        return ANS\n    primes = find(2, 10 ** 6 + 1)\n\n    def main():\n        input()\n        A = list(map(int, input().strip().split(' ')))\n        random.shuffle(A)\n        random.shuffle(A)\n        for i in range(len(A)):\n            for j in range(i + 1, len(A)):\n                T = gcd(A[i], A[j])\n                if T > 1:\n                    print(T)\n                    return 0\n        for i in range(len(A)):\n            tt = testing(A[i])\n            if tt == 1:\n                return 0\n\n    def testing(B):\n        for i in range(len(primes)):\n            if B % primes[i] == 0:\n                temp = primes[i]\n                if B % temp ** 2 == 0:\n                    print(temp)\n                    return 1\n                else:\n                    B = B // temp\n        L = int(B ** 0.5)\n        if L < 100:\n            return 0\n        if B % L ** 2 == 0:\n            print(L)\n            return 1\n        elif B % (L + 1) ** 2 == 0:\n            print(L + 1)\n            return 1\n        return 0\n    for _ in range(int(input())):\n        main()\nabcd()"]