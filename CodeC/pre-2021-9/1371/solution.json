["MOD = 10 ** 9 + 7\n\ndef pow2(n):\n    return 0 if n < 0 else pow(2, n, MOD)\n\ndef setB():\n    global B\n    gs = [set(g_u) for g_u in g]\n    es = set(e)\n    B = [0] * (n + 1)\n    lim = m ** 0.5\n    for u in range(1, n + 1):\n        if deg[u] < lim:\n            for v in g[u]:\n                for w in g[u]:\n                    if (v, w) in es:\n                        B[u] += 1\n        else:\n            for (v, w) in e:\n                if v in gs[u] and w in gs[u]:\n                    B[u] += 1\n\ndef solve3():\n    (a23, a24) = solve2(get_a23_a24=True)\n    setB()\n    tri = sum(B)\n    claw = sum((deg_u * (deg_u - 1) * (deg_u - 2) for deg_u in deg))\n    P4 = 3 * sum(((deg[u] - 1) * (deg[v] - 1) for (u, v) in e)) - 3 * tri\n    a32 = m\n    a33 = 3 * a23 + tri\n    a34 = 3 * a24 + claw + P4\n    a35 = 3 * sum((deg[u] * (deg[u] - 1) * (m - deg[u] + 2) + B[u] - 2 * (deg[u] - 1) * sum((deg[v] for v in g[u])) for u in range(1, n + 1)))\n    a36 = m * m * m - a32 - a33 - a34 - a35\n    return (a32 * pow2(n - 2) + a33 * pow2(n - 3) + a34 * pow2(n - 4) + a35 * pow2(n - 5) + a36 * pow2(n - 6)) % MOD\n\ndef solve2(get_a23_a24=False):\n    a22 = m\n    a23 = sum((deg_u * (deg_u - 1) for deg_u in deg))\n    a24 = m * m - a22 - a23\n    if get_a23_a24:\n        return (a23, a24)\n    return (a22 * pow2(n - 2) + a23 * pow2(n - 3) + a24 * pow2(n - 4)) % MOD\n\ndef solve1():\n    return m * pow2(n - 2) % MOD\nT = int(input())\nfor t in range(T):\n    (n, m, k) = map(int, input().split())\n    e = []\n    g = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        e.append((u, v))\n        e.append((v, u))\n        g[u].append(v)\n        g[v].append(u)\n    deg = [len(g_u) for g_u in g]\n    ans = solve1() if k == 1 else solve2() if k == 2 else solve3()\n    print(ans)", "MOD = 10 ** 9 + 7\n\ndef pow2(n):\n    return 0 if n < 0 else pow(2, n, MOD)\n\ndef setB():\n    global B\n    gs = [set(g_u) for g_u in g]\n    es = set(e)\n    B = [0] * (n + 1)\n    lim = m ** 0.5\n    for u in range(1, n + 1):\n        if deg[u] < lim:\n            for v in g[u]:\n                for w in g[u]:\n                    if (v, w) in es:\n                        B[u] += 1\n        else:\n            for (v, w) in e:\n                if v in gs[u] and w in gs[u]:\n                    B[u] += 1\n\ndef solve3():\n    (a23, a24) = solve2(get_a23_a24=True)\n    setB()\n    tri = sum(B)\n    claw = sum((deg_u * (deg_u - 1) * (deg_u - 2) for deg_u in deg))\n    P4 = 3 * sum(((deg[u] - 1) * (deg[v] - 1) for (u, v) in e)) - 3 * tri\n    a32 = m\n    a33 = 3 * a23 + tri\n    a34 = 3 * a24 + claw + P4\n    a35 = 3 * sum((deg[u] * (deg[u] - 1) * (m - deg[u] + 2) + B[u] - 2 * (deg[u] - 1) * sum((deg[v] for v in g[u])) for u in range(1, n + 1)))\n    a36 = m * m * m - a32 - a33 - a34 - a35\n    return (a32 * pow2(n - 2) + a33 * pow2(n - 3) + a34 * pow2(n - 4) + a35 * pow2(n - 5) + a36 * pow2(n - 6)) % MOD\n\ndef solve2(get_a23_a24=False):\n    a22 = m\n    a23 = sum((deg_u * (deg_u - 1) for deg_u in deg))\n    a24 = m * m - a22 - a23\n    if get_a23_a24:\n        return (a23, a24)\n    return (a22 * pow2(n - 2) + a23 * pow2(n - 3) + a24 * pow2(n - 4)) % MOD\n\ndef solve1():\n    return m * pow2(n - 2) % MOD\nT = int(input())\nfor t in range(T):\n    (n, m, k) = map(int, input().split())\n    e = []\n    g = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        e.append((u, v))\n        e.append((v, u))\n        g[u].append(v)\n        g[v].append(u)\n    deg = [len(g_u) for g_u in g]\n    ans = solve1() if k == 1 else solve2() if k == 2 else solve3()\n    print(ans)", "MOD = 10 ** 9 + 7\n\ndef pow2(n):\n    return 0 if n < 0 else pow(2, n, MOD)\n\ndef setB():\n    global B\n    gs = [set(g_u) for g_u in g]\n    es = set(e)\n    B = [0] * (n + 1)\n    lim = m ** 0.5\n    for u in range(1, n + 1):\n        if deg[u] < lim:\n            for v in g[u]:\n                for w in g[u]:\n                    if (v, w) in es:\n                        B[u] += 1\n        else:\n            for (v, w) in e:\n                if v in gs[u] and w in gs[u]:\n                    B[u] += 1\n\ndef solve3():\n    (a23, a24) = solve2(get_a23_a24=True)\n    setB()\n    tri = sum(B)\n    claw = sum((deg_u * (deg_u - 1) * (deg_u - 2) for deg_u in deg))\n    P4 = 3 * sum(((deg[u] - 1) * (deg[v] - 1) for (u, v) in e)) - 3 * tri\n    a32 = m\n    a33 = 3 * a23 + tri\n    a34 = 3 * a24 + claw + P4\n    a35 = 3 * sum((deg[u] * (deg[u] - 1) * (m - deg[u] + 2) + B[u] - 2 * (deg[u] - 1) * sum((deg[v] for v in g[u])) for u in range(1, n + 1)))\n    a36 = m * m * m - a32 - a33 - a34 - a35\n    return (a32 * pow2(n - 2) + a33 * pow2(n - 3) + a34 * pow2(n - 4) + a35 * pow2(n - 5) + a36 * pow2(n - 6)) % MOD\n\ndef solve2(get_a23_a24=False):\n    a22 = m\n    a23 = sum((deg_u * (deg_u - 1) for deg_u in deg))\n    a24 = m * m - a22 - a23\n    if get_a23_a24:\n        return (a23, a24)\n    return (a22 * pow2(n - 2) + a23 * pow2(n - 3) + a24 * pow2(n - 4)) % MOD\n\ndef solve1():\n    return m * pow2(n - 2) % MOD\nT = int(input())\nfor t in range(T):\n    (n, m, k) = map(int, input().split())\n    e = []\n    g = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        e.append((u, v))\n        e.append((v, u))\n        g[u].append(v)\n        g[v].append(u)\n    deg = [len(g_u) for g_u in g]\n    ans = solve1() if k == 1 else solve2() if k == 2 else solve3()\n    print(ans)", "MOD = 10 ** 9 + 7\n\ndef pow2(n):\n    return 0 if n < 0 else pow(2, n, MOD)\n\ndef setB():\n    global B\n    gs = [set(g_u) for g_u in g]\n    es = set(e)\n    B = [0] * (n + 1)\n    lim = m ** 0.5\n    for u in range(1, n + 1):\n        if deg[u] < lim:\n            for v in g[u]:\n                for w in g[u]:\n                    if (v, w) in es:\n                        B[u] += 1\n        else:\n            for (v, w) in e:\n                if v in gs[u] and w in gs[u]:\n                    B[u] += 1\n\ndef solve3():\n    (a23, a24) = solve2(get_a23_a24=True)\n    setB()\n    tri = sum(B)\n    claw = sum((deg_u * (deg_u - 1) * (deg_u - 2) for deg_u in deg))\n    P4 = 3 * sum(((deg[u] - 1) * (deg[v] - 1) for (u, v) in e)) - 3 * tri\n    a32 = m\n    a33 = 3 * a23 + tri\n    a34 = 3 * a24 + claw + P4\n    a35 = 3 * sum((deg[u] * (deg[u] - 1) * (m - deg[u] + 2) + B[u] - 2 * (deg[u] - 1) * sum((deg[v] for v in g[u])) for u in range(1, n + 1)))\n    a36 = m * m * m - a32 - a33 - a34 - a35\n    return (a32 * pow2(n - 2) + a33 * pow2(n - 3) + a34 * pow2(n - 4) + a35 * pow2(n - 5) + a36 * pow2(n - 6)) % MOD\n\ndef solve2(get_a23_a24=False):\n    a22 = m\n    a23 = sum((deg_u * (deg_u - 1) for deg_u in deg))\n    a24 = m * m - a22 - a23\n    if get_a23_a24:\n        return (a23, a24)\n    return (a22 * pow2(n - 2) + a23 * pow2(n - 3) + a24 * pow2(n - 4)) % MOD\n\ndef solve1():\n    return m * pow2(n - 2) % MOD\nT = int(input())\nfor t in range(T):\n    (n, m, k) = map(int, input().split())\n    e = []\n    g = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        e.append((u, v))\n        e.append((v, u))\n        g[u].append(v)\n        g[v].append(u)\n    deg = [len(g_u) for g_u in g]\n    ans = solve1() if k == 1 else solve2() if k == 2 else solve3()\n    print(ans)", "MOD = 10 ** 9 + 7\n\ndef pow2(n):\n    return 0 if n < 0 else pow(2, n, MOD)\n\ndef setB():\n    global B\n    gs = [set(g_u) for g_u in g]\n    es = set(e)\n    B = [0] * (n + 1)\n    lim = m ** 0.5\n    for u in range(1, n + 1):\n        if deg[u] < lim:\n            for v in g[u]:\n                for w in g[u]:\n                    if (v, w) in es:\n                        B[u] += 1\n        else:\n            for (v, w) in e:\n                if v in gs[u] and w in gs[u]:\n                    B[u] += 1\n\ndef solve3():\n    (a23, a24) = solve2(get_a23_a24=True)\n    setB()\n    tri = sum(B)\n    claw = sum((deg_u * (deg_u - 1) * (deg_u - 2) for deg_u in deg))\n    P4 = 3 * sum(((deg[u] - 1) * (deg[v] - 1) for (u, v) in e)) - 3 * tri\n    a32 = m\n    a33 = 3 * a23 + tri\n    a34 = 3 * a24 + claw + P4\n    a35 = 3 * sum((deg[u] * (deg[u] - 1) * (m - deg[u] + 2) + B[u] - 2 * (deg[u] - 1) * sum((deg[v] for v in g[u])) for u in range(1, n + 1)))\n    a36 = m * m * m - a32 - a33 - a34 - a35\n    return (a32 * pow2(n - 2) + a33 * pow2(n - 3) + a34 * pow2(n - 4) + a35 * pow2(n - 5) + a36 * pow2(n - 6)) % MOD\n\ndef solve2(get_a23_a24=False):\n    a22 = m\n    a23 = sum((deg_u * (deg_u - 1) for deg_u in deg))\n    a24 = m * m - a22 - a23\n    if get_a23_a24:\n        return (a23, a24)\n    return (a22 * pow2(n - 2) + a23 * pow2(n - 3) + a24 * pow2(n - 4)) % MOD\n\ndef solve1():\n    return m * pow2(n - 2) % MOD\nT = int(input())\nfor t in range(T):\n    (n, m, k) = map(int, input().split())\n    e = []\n    g = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        e.append((u, v))\n        e.append((v, u))\n        g[u].append(v)\n        g[v].append(u)\n    deg = [len(g_u) for g_u in g]\n    ans = solve1() if k == 1 else solve2() if k == 2 else solve3()\n    print(ans)", "MOD = 10 ** 9 + 7\n\ndef pow2(n):\n    return 0 if n < 0 else pow(2, n, MOD)\n\ndef setB():\n    global B\n    gs = [set(g_u) for g_u in g]\n    es = set(e)\n    B = [0] * (n + 1)\n    lim = m ** 0.5\n    for u in range(1, n + 1):\n        if deg[u] < lim:\n            for v in g[u]:\n                for w in g[u]:\n                    if (v, w) in es:\n                        B[u] += 1\n        else:\n            for (v, w) in e:\n                if v in gs[u] and w in gs[u]:\n                    B[u] += 1\n\ndef solve3():\n    (a23, a24) = solve2(get_a23_a24=True)\n    setB()\n    tri = sum(B)\n    claw = sum((deg_u * (deg_u - 1) * (deg_u - 2) for deg_u in deg))\n    P4 = 3 * sum(((deg[u] - 1) * (deg[v] - 1) for (u, v) in e)) - 3 * tri\n    a32 = m\n    a33 = 3 * a23 + tri\n    a34 = 3 * a24 + claw + P4\n    a35 = 3 * sum((deg[u] * (deg[u] - 1) * (m - deg[u] + 2) + B[u] - 2 * (deg[u] - 1) * sum((deg[v] for v in g[u])) for u in range(1, n + 1)))\n    a36 = m * m * m - a32 - a33 - a34 - a35\n    return (a32 * pow2(n - 2) + a33 * pow2(n - 3) + a34 * pow2(n - 4) + a35 * pow2(n - 5) + a36 * pow2(n - 6)) % MOD\n\ndef solve2(get_a23_a24=False):\n    a22 = m\n    a23 = sum((deg_u * (deg_u - 1) for deg_u in deg))\n    a24 = m * m - a22 - a23\n    if get_a23_a24:\n        return (a23, a24)\n    return (a22 * pow2(n - 2) + a23 * pow2(n - 3) + a24 * pow2(n - 4)) % MOD\n\ndef solve1():\n    return m * pow2(n - 2) % MOD\nT = int(input())\nfor t in range(T):\n    (n, m, k) = map(int, input().split())\n    e = []\n    g = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        e.append((u, v))\n        e.append((v, u))\n        g[u].append(v)\n        g[v].append(u)\n    deg = [len(g_u) for g_u in g]\n    ans = solve1() if k == 1 else solve2() if k == 2 else solve3()\n    print(ans)", "MOD = 10 ** 9 + 7\n\ndef pow2(n):\n    return 0 if n < 0 else pow(2, n, MOD)\n\ndef getB(n, m, g, deg, e):\n    gs = [set(g_u) for g_u in g]\n    es = set(e)\n    B = [0] * (n + 1)\n    lim = m ** 0.5\n    for u in range(1, n + 1):\n        if deg[u] < lim:\n            B[u] = sum(((v, w) in es for v in g[u] for w in g[u]))\n        else:\n            B[u] = sum((v in gs[u] and w in gs[u] for (v, w) in e))\n    return B\n\ndef solve3(n, m, g, deg, e):\n    (a23, a24) = solve2(n, m, deg, get_a23_a24=True)\n    B = getB(n, m, g, deg, e)\n    tri = sum(B)\n    claw = sum((deg_u * (deg_u - 1) * (deg_u - 2) for deg_u in deg))\n    P4 = 3 * sum(((deg[u] - 1) * (deg[v] - 1) for (u, v) in e)) - 3 * tri\n    a32 = m\n    a33 = 3 * a23 + tri\n    a34 = 3 * a24 + claw + P4\n    a35 = 3 * sum((deg[u] * (deg[u] - 1) * (m - deg[u] + 2) + B[u] - 2 * (deg[u] - 1) * sum((deg[v] for v in g[u])) for u in range(1, n + 1)))\n    a36 = m * m * m - a32 - a33 - a34 - a35\n    return (a32 * pow2(n - 2) + a33 * pow2(n - 3) + a34 * pow2(n - 4) + a35 * pow2(n - 5) + a36 * pow2(n - 6)) % MOD\n\ndef solve2(n, m, deg, get_a23_a24=False):\n    a22 = m\n    a23 = sum((deg_u * (deg_u - 1) for deg_u in deg))\n    a24 = m * m - a22 - a23\n    if get_a23_a24:\n        return (a23, a24)\n    return (a22 * pow2(n - 2) + a23 * pow2(n - 3) + a24 * pow2(n - 4)) % MOD\n\ndef solve1(n, m):\n    return m * pow2(n - 2) % MOD\n\ndef main():\n    T = int(input())\n    for t in range(T):\n        (n, m, k) = map(int, input().split())\n        e = []\n        g = [[] for i in range(n + 1)]\n        for i in range(m):\n            (u, v) = map(int, input().split())\n            e.append((u, v))\n            e.append((v, u))\n            g[u].append(v)\n            g[v].append(u)\n        deg = [len(g_u) for g_u in g]\n        ans = solve1(n, m) if k == 1 else solve2(n, m, deg) if k == 2 else solve3(n, m, g, deg, e)\n        print(ans)\nmain()", "MOD = 10 ** 9 + 7\n\ndef pow2(n):\n    return 0 if n < 0 else pow(2, n, MOD)\n\ndef setB():\n    global B\n    gs = [set(g_u) for g_u in g]\n    es = set(e)\n    B = [0] * (n + 1)\n    lim = m ** 0.5\n    for u in range(1, n + 1):\n        if deg[u] < lim:\n            B[u] = sum(((v, w) in es for v in g[u] for w in g[u]))\n        else:\n            B[u] = sum((v in gs[u] and w in gs[u] for (v, w) in e))\n\ndef solve3():\n    (a23, a24) = solve2(get_a23_a24=True)\n    setB()\n    tri = sum(B)\n    claw = sum((deg_u * (deg_u - 1) * (deg_u - 2) for deg_u in deg))\n    P4 = 3 * sum(((deg[u] - 1) * (deg[v] - 1) for (u, v) in e)) - 3 * tri\n    a32 = m\n    a33 = 3 * a23 + tri\n    a34 = 3 * a24 + claw + P4\n    a35 = 3 * sum((deg[u] * (deg[u] - 1) * (m - deg[u] + 2) + B[u] - 2 * (deg[u] - 1) * sum((deg[v] for v in g[u])) for u in range(1, n + 1)))\n    a36 = m * m * m - a32 - a33 - a34 - a35\n    return (a32 * pow2(n - 2) + a33 * pow2(n - 3) + a34 * pow2(n - 4) + a35 * pow2(n - 5) + a36 * pow2(n - 6)) % MOD\n\ndef solve2(get_a23_a24=False):\n    a22 = m\n    a23 = sum((deg_u * (deg_u - 1) for deg_u in deg))\n    a24 = m * m - a22 - a23\n    if get_a23_a24:\n        return (a23, a24)\n    return (a22 * pow2(n - 2) + a23 * pow2(n - 3) + a24 * pow2(n - 4)) % MOD\n\ndef solve1():\n    return m * pow2(n - 2) % MOD\nT = int(input())\nfor t in range(T):\n    (n, m, k) = map(int, input().split())\n    e = []\n    g = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        e.append((u, v))\n        e.append((v, u))\n        g[u].append(v)\n        g[v].append(u)\n    deg = [len(g_u) for g_u in g]\n    ans = solve1() if k == 1 else solve2() if k == 2 else solve3()\n    print(ans)", "MOD = 10 ** 9 + 7\n\ndef pow2(n):\n    return 0 if n < 0 else pow(2, n, MOD)\n\ndef setB():\n    global B\n    gs = [set(g_u) for g_u in g]\n    es = set(e)\n    B = [0] * (n + 1)\n    lim = m ** 0.5\n    for u in range(1, n + 1):\n        if deg[u] < lim:\n            for v in g[u]:\n                for w in g[u]:\n                    if (v, w) in es:\n                        B[u] += 1\n        else:\n            for (v, w) in e:\n                if v in gs[u] and w in gs[u]:\n                    B[u] += 1\n\ndef solve3():\n    (a23, a24) = solve2(get_a23_a24=True)\n    setB()\n    tri = sum(B)\n    claw = sum((deg_u * (deg_u - 1) * (deg_u - 2) for deg_u in deg))\n    P4 = 3 * sum(((deg[u] - 1) * (deg[v] - 1) for (u, v) in e)) - 3 * tri\n    a32 = m\n    a33 = 3 * a23 + tri\n    a34 = 3 * a24 + claw + P4\n    a35 = 3 * sum((deg[u] * (deg[u] - 1) * (m - deg[u] + 2) + B[u] - 2 * (deg[u] - 1) * sum((deg[v] for v in g[u])) for u in range(1, n + 1)))\n    a36 = m * m * m - a32 - a33 - a34 - a35\n    return (a32 * pow2(n - 2) + a33 * pow2(n - 3) + a34 * pow2(n - 4) + a35 * pow2(n - 5) + a36 * pow2(n - 6)) % MOD\n\ndef solve2(get_a23_a24=False):\n    a22 = m\n    a23 = sum((deg_u * (deg_u - 1) for deg_u in deg))\n    a24 = m * m - a22 - a23\n    if get_a23_a24:\n        return (a23, a24)\n    return (a22 * pow2(n - 2) + a23 * pow2(n - 3) + a24 * pow2(n - 4)) % MOD\n\ndef solve1():\n    return m * pow2(n - 2) % MOD\nT = int(input())\nfor t in range(T):\n    (n, m, k) = map(int, input().split())\n    e = []\n    g = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        e.append((u, v))\n        e.append((v, u))\n        g[u].append(v)\n        g[v].append(u)\n    deg = [len(g_u) for g_u in g]\n    ans = solve1() if k == 1 else solve2() if k == 2 else solve3()\n    print(ans)", "import sys\nMOD = 10 ** 9 + 7\n\ndef trivial(edge, N, K):\n    total = 2 ** N\n    situation = []\n    for i in range(1, total):\n        s = bin(i)[2:]\n        if len(s) < N:\n            s = '0' * (N - len(s)) + s\n        s = '0' + s[::-1]\n        situation += [s]\n    ans = 0\n    for i in range(len(situation)):\n        s = situation[i]\n        temp = []\n        for j in range(len(s)):\n            if s[j] != '0':\n                temp += [j]\n        value = 0\n        for ii in range(len(temp)):\n            for jj in range(ii + 1, len(temp)):\n                aa = temp[ii]\n                bb = temp[jj]\n                if (aa, bb) in edge or (bb, aa) in edge:\n                    value += 1\n        ans += value ** K\n        ans %= MOD\n    return ans\n\ndef ONE(edge, N):\n    if N == 1:\n        return 0\n    return pow(2, N - 2, MOD) * len(edge) % MOD\n\ndef TWO(graph, edge, N, M):\n    MOD = 10 ** 9 + 7\n    degree = {}\n    for i in range(1, N + 1):\n        degree[i] = len(graph[i])\n    temp = 0\n    for X in edge:\n        (a, b) = X\n        temp += degree[a] + degree[b]\n        temp %= MOD\n    sum1 = M\n    sum2 = (temp - 2 * M) * pow(2, MOD - 2, MOD) % MOD\n    sum3 = (M * (M + 1) - temp) % MOD * pow(2, MOD - 2, MOD) % MOD\n    ans = (pow(2, N - 2, MOD) * (sum2 + sum1) % MOD + pow(2, N - 3, MOD) * sum3 % MOD) % MOD\n    return ans\n\ndef THREE(graph, edge, N, M):\n    MOD = 10 ** 9 + 7\n    degree = {}\n    GRAPH = {}\n    for i in range(1, N + 1):\n        degree[i] = len(graph[i])\n        GRAPH[i] = set(graph[i])\n    temp = 0\n    for X in edge:\n        (a, b) = X\n        temp += degree[a] + degree[b]\n        temp %= MOD\n    sum1 = M\n    sum2 = (temp - 2 * M) * pow(2, MOD - 2, MOD) % MOD\n    sum3 = (M * (M + 1) - temp) % MOD * pow(2, MOD - 2, MOD) % MOD\n    total = 0\n    tri = 0\n    for X in edge:\n        (a, b) = X\n        if degree[a] >= 2 and degree[b] >= 2:\n            total += (degree[a] - 1) * (degree[b] - 1)\n            tri += len(GRAPH[a] & GRAPH[b])\n            tri %= MOD\n            total %= MOD\n    tri *= pow(3, MOD - 2, MOD)\n    tri %= MOD\n    need = (tri + total) % MOD\n    number1 = sum2 * (M - 2) % MOD\n    number2 = M * (M - 1) * (M - 2) // 6 % MOD\n    ans11 = 3 * (number1 + number2 + need) % MOD % MOD\n    ans11 += M * 8 + (12 * sum2 + 6 * sum3) * 2\n    ans11 %= MOD\n    return ans11 * pow(2, N - 5, MOD) % MOD\nANS = []\nfor _ in range(int(input())):\n    (N, M, K) = list(map(int, sys.stdin.readline().strip().split(' ')))\n    edge = set()\n    graph = {}\n    for i in range(1, N + 1):\n        graph[i] = []\n    for ii in range(M):\n        (x, y) = list(map(int, sys.stdin.readline().strip().split(' ')))\n        graph[x] += [y]\n        graph[y] += [x]\n        edge.add((x, y))\n    if N < 16:\n        ANS += [trivial(edge, N, K)]\n    elif K == 1:\n        ANS += [ONE(edge, N)]\n    elif K == 2:\n        ANS += [TWO(graph, edge, N, M)]\n    else:\n        ANS += [THREE(graph, edge, N, M)]\nprint('\\n'.join(list(map(str, ANS))))"]