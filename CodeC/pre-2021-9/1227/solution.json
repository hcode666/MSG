["primes = [0] * (10 ** 6 + 3)\nprimes[0] = 1\nprimes[1] = 1\nfor p in range(2, len(primes)):\n    if primes[p] == 0:\n        for j in range(2, len(primes)):\n            k = j * p\n            if k >= len(primes):\n                break\n            primes[k] = 1\nP = [x for x in range(len(primes)) if primes[x] == 0]\n\ndef find_factorial_factor(N):\n    dic = {}\n    for p in P:\n        if p > 10 ** 6:\n            break\n        if p > N:\n            break\n        temp = p\n        count = 0\n        while temp <= N:\n            count += N // temp\n            temp *= p\n        dic[p] = count\n    return dic\n\ndef find_factor(N):\n    dic = {}\n    for p in P:\n        if N % p == 0:\n            dic[p] = 1\n        if p > 10 ** 6 + 1:\n            break\n    return dic\n\ndef find_ans(N, K):\n    prime_K = find_factor(K)\n    prime_N = find_factorial_factor(N)\n    prime_want = [p for p in prime_N if p not in prime_K]\n    ans = [(p, prime_N[p]) for p in prime_want]\n    true_ans = 1\n    MOD = 10 ** 9 + 7\n    for (p, exp) in ans:\n        true_ans *= pow(p, exp, MOD)\n        true_ans %= MOD\n    return true_ans\nfor _ in range(int(input())):\n    (N, K) = list(map(int, input().strip().split()))\n    print(find_ans(N, K))", "primes = [0] * (10 ** 6 + 3)\nprimes[0] = 1\nprimes[1] = 1\nfor p in range(2, len(primes)):\n    if primes[p] == 0:\n        for j in range(2, len(primes)):\n            k = j * p\n            if k >= len(primes):\n                break\n            primes[k] = 1\nP = [x for x in range(len(primes)) if primes[x] == 0]\n\ndef find_factorial_factor(N):\n    dic = {}\n    for p in P:\n        if p > 10 ** 6:\n            break\n        if p > N:\n            break\n        temp = p\n        count = 0\n        while temp <= N:\n            count += N // temp\n            temp *= p\n        dic[p] = count\n    return dic\n\ndef find_factor(N):\n    dic = {}\n    for p in P:\n        if N % p == 0:\n            dic[p] = 1\n        if p > 10 ** 6 + 1:\n            break\n    return dic\n\ndef find_ans(N, K):\n    prime_K = find_factor(K)\n    prime_N = find_factorial_factor(N)\n    prime_want = [p for p in prime_N if p not in prime_K]\n    ans = [(p, prime_N[p]) for p in prime_want]\n    true_ans = 1\n    MOD = 10 ** 9 + 7\n    for (p, exp) in ans:\n        true_ans *= pow(p, exp, MOD)\n        true_ans %= MOD\n    return true_ans\nfor _ in range(int(input())):\n    (N, K) = list(map(int, input().strip().split()))\n    print(find_ans(N, K))", "primes = [0] * (10 ** 6 + 3)\nprimes[0] = 1\nprimes[1] = 1\nfor p in range(2, len(primes)):\n    if primes[p] == 0:\n        for j in range(2, len(primes)):\n            k = j * p\n            if k >= len(primes):\n                break\n            primes[k] = 1\nP = [x for x in range(len(primes)) if primes[x] == 0]\n\ndef find_factorial_factor(N):\n    dic = {}\n    for p in P:\n        if p > 10 ** 6:\n            break\n        if p > N:\n            break\n        temp = p\n        count = 0\n        while temp <= N:\n            count += N // temp\n            temp *= p\n        dic[p] = count\n    return dic\n\ndef find_factor(N):\n    dic = {}\n    for p in P:\n        if N % p == 0:\n            dic[p] = 1\n        if p > 10 ** 6 + 1:\n            break\n    return dic\n\ndef find_ans(N, K):\n    prime_K = find_factor(K)\n    prime_N = find_factorial_factor(N)\n    prime_want = [p for p in prime_N if p not in prime_K]\n    ans = [(p, prime_N[p]) for p in prime_want]\n    true_ans = 1\n    MOD = 10 ** 9 + 7\n    for (p, exp) in ans:\n        true_ans *= pow(p, exp, MOD)\n        true_ans %= MOD\n    return true_ans\nfor _ in range(int(input())):\n    (N, K) = list(map(int, input().strip().split()))\n    print(find_ans(N, K))", "import math\n\ndef m(n, i):\n    d = 0\n    while n > 0:\n        d += n // i\n        n = n // i\n    p = 1\n    while d > 1:\n        if d % 2 == 1:\n            p *= i\n        i *= i\n        d //= 2\n        i %= 1000000007\n    return i * p % 1000000007\nt = int(input())\nimport math\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = 1\n    a = [True] * (n + 1)\n    for i in range(2, n + 1):\n        if a[i] == True and math.gcd(k, i) == 1:\n            if a[i] == True:\n                s *= m(n, i)\n                s %= 1000000007\n                for j in range(i, n + 1, i):\n                    a[j] = False\n    print(s)", "MOD = 10 ** 9 + 7\nprimes = [2, 3, 5, 7, 11]\np2 = [4, 9, 25, 49, 121]\nact = 11\nwhile act < 1000009:\n    act += 2\n    i = 1\n    while p2[i] <= act and act % primes[i] != 0:\n        i += 1\n    if p2[i] > act:\n        primes.append(act)\n        p2.append(act ** 2)\npass\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    res = 1\n    for p in primes:\n        if p > N:\n            break\n        if K % p != 0:\n            div = 1\n            while div * p <= N:\n                div *= p\n                for i in range(N // div):\n                    res = res * p % MOD\n    print(res)"]