["import math\nimport collections\nlst = ['0', '1', '4', '9']\nfor i in range(4, 100001):\n    n = str(i * i)\n    l = len(n)\n    d = collections.Counter(n)\n    k = d['0'] + d['1'] + d['4'] + d['9']\n    if k == l:\n        lst.append(n)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    count = 0\n    for num in lst:\n        if int(num) >= a and int(num) <= b:\n            count += 1\n    print(count)", "import math\nimport collections\nlst = ['0', '1', '4', '9']\nfor i in range(4, 100001):\n    n = str(i * i)\n    l = len(n)\n    d = collections.Counter(n)\n    k = d['0'] + d['1'] + d['4'] + d['9']\n    if k == l:\n        lst.append(n)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    count = 0\n    for num in lst:\n        if int(num) >= a and int(num) <= b:\n            count += 1\n    print(count)", "def fun(argc):\n    for i in range(4, 100001):\n        k = i * i\n        s = str(k)\n        flag = True\n        for j in range(len(s)):\n            if s[j] in argc:\n                pass\n            else:\n                flag = False\n                break\n        if flag == True:\n            argc.append(s)\nt = int(input())\nlst = ['0', '1', '4', '9']\nfun(lst)\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    flag1 = True\n    flag2 = True\n    j = 0\n    k = 0\n    for i in range(len(lst)):\n        if flag1 == False and flag2 == False:\n            break\n        if int(lst[i]) >= n and flag1 == True:\n            j = i\n            flag1 = False\n        if int(lst[i]) >= m and flag2 == True:\n            if int(lst[i]) == m:\n                k = i\n            else:\n                k = i - 1\n            flag2 = False\n    print(k - j + 1)", "l = []\ns = {'0', '1', '4', '9'}\nfor i in range(0, 100001):\n    ans = i * i\n    if set(str(ans)).issubset(s):\n        l.append(ans)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    n = len(l)\n    s = 0\n    for i in l:\n        if a <= i <= b:\n            s += 1\n    print(s)", "l = []\ns = {'0', '1', '4', '9'}\nfor i in range(0, 100001):\n    ans = i * i\n    if set(str(ans)).issubset(s):\n        l.append(ans)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    n = len(l)\n    s = 0\n    for i in l:\n        if a <= i <= b:\n            s += 1\n    print(s)", "l = []\ns = {'0', '1', '4', '9'}\nfor i in range(0, 100001):\n    ans = i * i\n    if set(str(ans)).issubset(s):\n        l.append(ans)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    n = len(l)\n    s = 0\n    for i in l:\n        if a <= i <= b:\n            s += 1\n    print(s)", "l = []\ns = {'0', '1', '4', '9'}\nfor i in range(0, 100001):\n    ans = i * i\n    if set(str(ans)).issubset(s):\n        l.append(ans)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    n = len(l)\n    s = 0\n    for i in l:\n        if a <= i <= b:\n            s += 1\n    print(s)", "l = []\ns = {'0', '1', '4', '9'}\nfor i in range(0, 100001):\n    ans = i * i\n    if set(str(ans)).issubset(s):\n        l.append(ans)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    n = len(l)\n    s = 0\n    for i in l:\n        if a <= i <= b:\n            s += 1\n    print(s)", "import math\n\ndef fun(n):\n    l = ['0', '1', '4', '9']\n    s = str(n)\n    for k in range(len(s)):\n        if s[k] not in l:\n            return False\n    return True\nl1 = []\nfor i in range(1000000):\n    if fun(i ** 2) == True:\n        l1.append(i ** 2)\nfor it in range(int(input())):\n    count = 0\n    lst = list(map(int, input().split()))\n    a = lst[0]\n    b = lst[1]\n    for j in l1:\n        if j >= a and j <= b:\n            count += 1\n    print(count)", "IN = lambda : int(input())\nl1 = ['1', '0', '4', '9']\n\ndef fk(t):\n    s = str(t)\n    for i in s:\n        if i in l1:\n            pass\n        else:\n            return False\n    return True\nl = []\nfor i in range(100005):\n    if fk(i * i):\n        l.append(i * i)\nfor _ in range(IN()):\n    c = 0\n    (n, k) = map(int, input().split())\n    for j in l:\n        if j >= n and j <= k:\n            c += 1\n    print(c)", "import os, sys, io, math\nfrom array import *\nfrom math import *\nfrom bisect import *\nfrom heapq import *\nfrom functools import *\nfrom itertools import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\nl = ['1', '0', '4', '9']\n\ndef f(t):\n    s = str(t)\n    for i in s:\n        if i in l:\n            pass\n        else:\n            return False\n    return True\nr = []\nfor i in range(100002):\n    if f(i * i):\n        r.append(i * i)\nfor _ in range(IN()):\n    (a, b) = map(int, input().split())\n    c = 0\n    for i in r:\n        if i >= a and i <= b:\n            c += 1\n    print(c)", "def check(i):\n    s = str(i)\n    for x in s:\n        if x == '1' or x == '0' or x == '4' or (x == '9'):\n            pass\n        else:\n            return False\n    return True\nprecompute = list()\nfor i in range(100002):\n    if check(i ** 2):\n        precompute.append(i ** 2)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    cnt = 0\n    for x in precompute:\n        if x >= a and x <= b:\n            cnt += 1\n    print(cnt)", "def check(i):\n    s = str(i)\n    for x in s:\n        if x == '1' or x == '0' or x == '4' or (x == '9'):\n            pass\n        else:\n            return False\n    return True\nprecompute = list()\nfor i in range(100002):\n    if check(i ** 2):\n        precompute.append(i ** 2)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    cnt = 0\n    for x in precompute:\n        if x >= a and x <= b:\n            cnt += 1\n    print(cnt)", "l = []\ns = {'0', '1', '4', '9'}\nfor i in range(0, 100001):\n    ans = i * i\n    if set(str(ans)).issubset(s):\n        l.append(ans)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    n = len(l)\n    s = 0\n    for i in l:\n        if a <= i <= b:\n            s += 1\n    print(s)", "l = []\ns = {'0', '1', '4', '9'}\nfor i in range(0, 100001):\n    ans = i * i\n    if set(str(ans)).issubset(s):\n        l.append(ans)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    n = len(l)\n    s = 0\n    for i in l:\n        if a <= i <= b:\n            s += 1\n    print(s)", "perfect_sqaures = []\nperfect_nums = {'0', '1', '4', '9'}\n\ndef is_perfect_square(num):\n    num = set(str(num))\n    if len(num - perfect_nums) == 0:\n        return True\n    return False\nfor i in range(10 ** 5 + 1):\n    num = i * i\n    if is_perfect_square(num):\n        perfect_sqaures.append(num)\nperfect_sqaures_len = len(perfect_sqaures)\n\ndef find_perfect_squares_count(num):\n    start = 0\n    end = perfect_sqaures_len - 1\n    while start <= end:\n        middle = (start + end) // 2\n        if perfect_sqaures[middle] == num or (perfect_sqaures[middle] < num and (middle + 1 == perfect_sqaures_len or perfect_sqaures[middle + 1] > num)):\n            return middle + 1\n        elif perfect_sqaures[middle] < num:\n            start = middle + 1\n        else:\n            end = middle - 1\nimport math\ntests = int(input())\nfor i in range(tests):\n    (a, b) = map(int, input().split())\n    remove = find_perfect_squares_count(a - 1)\n    total = find_perfect_squares_count(b)\n    print(total - remove)", "import math\nn = 10 ** 10\narr = []\nfor i in range(1, 1 + int(math.ceil(math.sqrt(n)))):\n    s = str(i * i)\n    flag = True\n    if '2' in s or '3' in s or '5' in s or ('6' in s) or ('7' in s) or ('8' in s):\n        flag = False\n    if flag:\n        arr.append(int(s))\nt = int(input())\nwhile t:\n    t -= 1\n    (a, b) = map(int, input().split())\n    c = 0\n    for i in arr:\n        if i >= a and i <= b:\n            c += 1\n    print(c)", "import math\nn = 10 ** 10\narr = []\nfor i in range(1, 1 + int(math.ceil(math.sqrt(n)))):\n    s = str(i * i)\n    flag = True\n    if '2' in s or '3' in s or '5' in s or ('6' in s) or ('7' in s) or ('8' in s):\n        flag = False\n    if flag:\n        arr.append(int(s))\nt = int(input())\nwhile t:\n    t -= 1\n    (a, b) = map(int, input().split())\n    c = 0\n    for i in arr:\n        if i >= a and i <= b:\n            c += 1\n    print(c)", "import math\nans = [0] * 100001\nfor i in range(1, 100001):\n    s = str(i ** 2)\n    ans[i] = ans[i - 1]\n    for j in s:\n        if j not in {'0', '1', '4', '9'}:\n            break\n    else:\n        ans[i] += 1\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    (a, b) = (math.ceil(a ** 0.5), math.floor(b ** 0.5))\n    print(ans[b] - ans[a - 1])", "from math import ceil, floor, sqrt\n\ndef solve(n):\n    x = [0, 1, 4, 9]\n    while n != 0:\n        if n % 10 in x:\n            n //= 10\n        else:\n            return 0\n    return 1\nans = [0] * 100001\nfor i in range(1, 100001):\n    ans[i] = solve(i * i)\nfor i in range(1, 100001):\n    ans[i] += ans[i - 1]\nt = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    l = ceil(sqrt(l))\n    r = floor(sqrt(r))\n    print(ans[r] - ans[l - 1])", "from math import ceil, floor, sqrt\n\ndef solve(n):\n    x = [0, 1, 4, 9]\n    while n != 0:\n        if n % 10 in x:\n            n //= 10\n        else:\n            return 0\n    return 1\nans = [0] * 100001\nfor i in range(1, 100001):\n    ans[i] = solve(i * i)\nfor i in range(1, 100001):\n    ans[i] += ans[i - 1]\nt = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    l = ceil(sqrt(l))\n    r = floor(sqrt(r))\n    print(ans[r] - ans[l - 1])", "from math import ceil, floor, sqrt\n\ndef solve(n):\n    x = [0, 1, 4, 9]\n    while n != 0:\n        if n % 10 in x:\n            n //= 10\n        else:\n            return 0\n    return 1\nans = [0] * 100001\nfor i in range(1, 100001):\n    ans[i] = solve(i * i)\nfor i in range(1, 100001):\n    ans[i] += ans[i - 1]\nt = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    l = ceil(sqrt(l))\n    r = floor(sqrt(r))\n    print(ans[r] - ans[l - 1])", "from math import ceil, floor, sqrt\n\ndef solve(n):\n    x = [0, 1, 4, 9]\n    while n != 0:\n        if n % 10 in x:\n            n //= 10\n        else:\n            return 0\n    return 1\nans = [0] * 100001\nfor i in range(1, 100001):\n    ans[i] = solve(i * i)\nfor i in range(1, 100001):\n    ans[i] += ans[i - 1]\nt = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    l = ceil(sqrt(l))\n    r = floor(sqrt(r))\n    print(ans[r] - ans[l - 1])", "import sys\ninput = sys.stdin.readline\na = [str(i * i) for i in range(1, 10 ** 5 + 1)]\ns = ['2', '3', '5', '6', '7', '8']\ng = []\nfor i in a:\n    f = 0\n    for j in s:\n        if j in i:\n            f = 1\n            break\n    if f == 0:\n        g.append(int(i))\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    f = [i for i in g if a <= i <= b]\n    print(len(f))", "from bisect import bisect_left, bisect_right\n\ndef prfsqr(a, b):\n    sqr = []\n    chk = [0, 1, 4, 9]\n    for i in range(a, b, 1):\n        k = i ** 2\n        if k <= b:\n            prf = True\n            k = str(k)\n            for j in k:\n                if int(j) not in chk:\n                    prf = False\n                    break\n            if prf:\n                sqr.append(int(k))\n        else:\n            break\n    return sqr\nsqr = prfsqr(1, 10 ** 10)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    leftind = bisect_left(sqr, a)\n    rightind = bisect_right(sqr, b)\n    print(rightind - leftind)", "from bisect import bisect_left, bisect_right\n\ndef prfsqr(a, b):\n    sqr = []\n    chk = [0, 1, 4, 9]\n    for i in range(a, b, 1):\n        k = i ** 2\n        if k <= b:\n            prf = True\n            k = str(k)\n            for j in k:\n                if int(j) not in chk:\n                    prf = False\n                    break\n            if prf:\n                sqr.append(int(k))\n        else:\n            break\n    return sqr\nsqr = prfsqr(1, 10 ** 10)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    leftind = bisect_left(sqr, a)\n    rightind = bisect_right(sqr, b)\n    print(rightind - leftind)", "from bisect import bisect_left, bisect_right\n\ndef prfsqr(a, b):\n    sqr = []\n    chk = [0, 1, 4, 9]\n    for i in range(a, b, 1):\n        k = i ** 2\n        if k <= b:\n            prf = True\n            k = str(k)\n            for j in k:\n                if int(j) not in chk:\n                    prf = False\n                    break\n            if prf:\n                sqr.append(int(k))\n        else:\n            break\n    return sqr\nsqr = prfsqr(1, 10 ** 10)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    leftind = bisect_left(sqr, a)\n    rightind = bisect_right(sqr, b)\n    print(rightind - leftind)", "from bisect import bisect_left, bisect_right\n\ndef prfsqr(a, b):\n    sqr = []\n    chk = [0, 1, 4, 9]\n    for i in range(a, b, 1):\n        k = i ** 2\n        if k <= b:\n            prf = True\n            k = str(k)\n            for j in k:\n                if int(j) not in chk:\n                    prf = False\n                    break\n            if prf:\n                sqr.append(int(k))\n        else:\n            break\n    return sqr\nsqr = prfsqr(1, 10 ** 10)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    leftind = bisect_left(sqr, a)\n    rightind = bisect_right(sqr, b)\n    print(rightind - leftind)", "res = [1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nt = int(input())\nfor tc in range(t):\n    (a, b) = map(int, input().split())\n    ans = 0\n    for num in res:\n        if num >= a and num <= b:\n            ans += 1\n        if num > b:\n            break\n    print(ans)", "import bisect\nt = int(input())\ntemp = {1: 1, 4: 2, 9: 3, 49: 4, 100: 5, 144: 6, 400: 7, 441: 8, 900: 9, 1444: 10, 4900: 11, 9409: 12, 10000: 13, 10404: 14, 11449: 15, 14400: 16, 19044: 17, 40000: 18, 40401: 19, 44100: 20, 44944: 21, 90000: 22, 144400: 23, 419904: 24, 490000: 25, 491401: 26, 904401: 27, 940900: 28, 994009: 29, 1000000: 30, 1004004: 31, 1014049: 32, 1040400: 33, 1100401: 34, 1144900: 35, 1440000: 36, 1904400: 37, 1940449: 38, 4000000: 39, 4004001: 40, 4040100: 41, 4410000: 42, 4494400: 43, 9000000: 44, 9909904: 45, 9941409: 46, 11909401: 47, 14010049: 48, 14040009: 49, 14440000: 50, 19909444: 51, 40411449: 52, 41990400: 53, 49000000: 54, 49014001: 55, 49140100: 56, 49999041: 57, 90440100: 58, 94090000: 59, 94109401: 60, 99400900: 61, 99940009: 62, 100000000: 63, 100040004: 64, 100140049: 65, 100400400: 66, 101404900: 67, 101949409: 68, 104040000: 69, 104919049: 70, 110040100: 71, 111049444: 72, 114041041: 73, 114490000: 74, 144000000: 75, 190440000: 76, 194044900: 77, 400000000: 78, 400040001: 79, 400400100: 80, 404010000: 81, 404090404: 82, 409941009: 83, 414000409: 84, 414041104: 85, 441000000: 86, 449440000: 87, 490091044: 88, 900000000: 89, 990990400: 90, 991494144: 91, 994140900: 92, 1190940100: 93, 1401004900: 94, 1404000900: 95, 1409101444: 96, 1444000000: 97, 1449401041: 98, 1490114404: 99, 1990944400: 100, 4014109449: 101, 4019940409: 102, 4041144900: 103, 4199040000: 104, 4900000000: 105, 4900140001: 106, 4901400100: 107, 4914010000: 108, 4914991449: 109, 4941949401: 110, 4999904100: 111, 9044010000: 112, 9409000000: 113, 9409194001: 114, 9410940100: 115, 9900449001: 116, 9940090000: 117, 9994000900: 118, 9999400009: 119, 10000000000: 120}\narr = [1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    flag1 = 0\n    flag2 = 0\n    if a in temp and b in temp:\n        ans = temp[b] - temp[a]\n    elif a in temp:\n        lb2 = arr[bisect.bisect_left(arr, b, 0, len(arr)) - 1]\n        ans = temp[lb2] - temp[a]\n    elif b in temp:\n        lb1 = arr[bisect.bisect_left(arr, a, 0, len(arr))]\n        ans = temp[b] - temp[lb1]\n    else:\n        lb1 = arr[bisect.bisect_left(arr, a, 0, len(arr))]\n        lb2 = arr[bisect.bisect_left(arr, b, 0, len(arr)) - 1]\n        ans = temp[lb2] - temp[lb1]\n    ans += 1\n    print(ans)", "import bisect\nt = int(input())\ntemp = {1: 1, 4: 2, 9: 3, 49: 4, 100: 5, 144: 6, 400: 7, 441: 8, 900: 9, 1444: 10, 4900: 11, 9409: 12, 10000: 13, 10404: 14, 11449: 15, 14400: 16, 19044: 17, 40000: 18, 40401: 19, 44100: 20, 44944: 21, 90000: 22, 144400: 23, 419904: 24, 490000: 25, 491401: 26, 904401: 27, 940900: 28, 994009: 29, 1000000: 30, 1004004: 31, 1014049: 32, 1040400: 33, 1100401: 34, 1144900: 35, 1440000: 36, 1904400: 37, 1940449: 38, 4000000: 39, 4004001: 40, 4040100: 41, 4410000: 42, 4494400: 43, 9000000: 44, 9909904: 45, 9941409: 46, 11909401: 47, 14010049: 48, 14040009: 49, 14440000: 50, 19909444: 51, 40411449: 52, 41990400: 53, 49000000: 54, 49014001: 55, 49140100: 56, 49999041: 57, 90440100: 58, 94090000: 59, 94109401: 60, 99400900: 61, 99940009: 62, 100000000: 63, 100040004: 64, 100140049: 65, 100400400: 66, 101404900: 67, 101949409: 68, 104040000: 69, 104919049: 70, 110040100: 71, 111049444: 72, 114041041: 73, 114490000: 74, 144000000: 75, 190440000: 76, 194044900: 77, 400000000: 78, 400040001: 79, 400400100: 80, 404010000: 81, 404090404: 82, 409941009: 83, 414000409: 84, 414041104: 85, 441000000: 86, 449440000: 87, 490091044: 88, 900000000: 89, 990990400: 90, 991494144: 91, 994140900: 92, 1190940100: 93, 1401004900: 94, 1404000900: 95, 1409101444: 96, 1444000000: 97, 1449401041: 98, 1490114404: 99, 1990944400: 100, 4014109449: 101, 4019940409: 102, 4041144900: 103, 4199040000: 104, 4900000000: 105, 4900140001: 106, 4901400100: 107, 4914010000: 108, 4914991449: 109, 4941949401: 110, 4999904100: 111, 9044010000: 112, 9409000000: 113, 9409194001: 114, 9410940100: 115, 9900449001: 116, 9940090000: 117, 9994000900: 118, 9999400009: 119, 10000000000: 120}\narr = [1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    flag1 = 0\n    flag2 = 0\n    if a in temp and b in temp:\n        ans = temp[b] - temp[a]\n        ans += 1\n    elif a in temp:\n        lb2 = arr[bisect.bisect_left(arr, b, 0, len(arr)) - 1]\n        ans = temp[lb2] - temp[a]\n        ans += 1\n    elif b in temp:\n        lb1 = arr[bisect.bisect_left(arr, a, 0, len(arr))]\n        ans = temp[b] - temp[lb1]\n        ans += 1\n    else:\n        lb1 = arr[bisect.bisect_left(arr, a, 0, len(arr))]\n        lb2 = arr[bisect.bisect_left(arr, b, 0, len(arr)) - 1]\n        ans = temp[lb2] - temp[lb1]\n        ans += 1\n    print(ans)", "n = 0\narr = []\nwhile n * n <= 10000000000:\n    z = n * n\n    flag = 0\n    while z > 0:\n        k = int(z % 10)\n        if k != 0 and k != 1 and (k != 4) and (k != 9):\n            flag = 1\n            break\n        z //= 10\n    if flag == 0:\n        arr.append(n * n)\n    n += 1\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    count = 0\n    for i in range(len(arr)):\n        if a <= arr[i] <= b:\n            count += 1\n    print(count)", "n = 0\narr = []\nwhile n * n <= 10000000000:\n    z = n * n\n    flag = 0\n    while z > 0:\n        k = int(z % 10)\n        if k != 0 and k != 1 and (k != 4) and (k != 9):\n            flag = 1\n            break\n        z //= 10\n    if flag == 0:\n        arr.append(n * n)\n    n += 1\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    count = 0\n    for i in range(len(arr)):\n        if a <= arr[i] <= b:\n            count += 1\n    print(count)", "a = [str(i * i) for i in range(1, 10 ** 5 + 1)]\ns = ['2', '3', '5', '6', '7', '8']\ng = []\nfor i in a:\n    f = 0\n    for j in s:\n        if j in i:\n            f = 1\n            break\n    if f == 0:\n        g.append(int(i))\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(len([i for i in g if a <= i <= b]))", "a = [str(i * i) for i in range(1, 10 ** 5 + 1)]\ns = ['2', '3', '5', '6', '7', '8']\ng = []\nfor i in a:\n    f = 0\n    for j in s:\n        if j in i:\n            f = 1\n            break\n    if f == 0:\n        g.append(int(i))\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    f = [i for i in g if a <= i <= b]\n    print(len(f))", "try:\n    import math\n    n = 10 ** 10\n    arr = []\n    for i in range(1, 1 + int(math.ceil(math.sqrt(n)))):\n        s = str(i * i)\n        flag = True\n        if '2' in s or '3' in s or '5' in s or ('6' in s) or ('7' in s) or ('8' in s):\n            flag = False\n        if flag:\n            arr.append(int(s))\n    t = int(input())\n    while t:\n        t -= 1\n        (a, b) = map(int, input().split())\n        c = 0\n        for i in arr:\n            if i >= a and i <= b:\n                c += 1\n        print(c)\nexcept:\n    pass", "def is_digit_square(n):\n    while n > 0:\n        if n % 10 not in [0, 1, 4, 9]:\n            return False\n        n //= 10\n    return True\n\ndef lower_bound(x):\n    low = 0\n    high = len(digit_squares)\n    while low < high:\n        mid = (low + high) // 2\n        if digit_squares[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low\ndigit_squares = []\nfor i in range(1, 10 ** 5):\n    if is_digit_square(i ** 2):\n        digit_squares.append(i ** 2)\nt = int(input())\nfor _ in range(t):\n    (a, b) = (int(i) for i in input().split())\n    lb = lower_bound(a)\n    ub = lower_bound(b + 1)\n    if ub == len(digit_squares):\n        print(ub - lb + 1)\n    else:\n        print(ub - lb)", "def is_digit_square(n):\n    while n > 0:\n        if n % 10 not in [0, 1, 4, 9]:\n            return False\n        n //= 10\n    return True\n\ndef lower_bound(x):\n    low = 0\n    high = len(digit_squares)\n    while low < high:\n        mid = (low + high) // 2\n        if digit_squares[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low\ndigit_squares = []\nfor i in range(1, 10 ** 5):\n    if is_digit_square(i ** 2):\n        digit_squares.append(i ** 2)\nt = int(input())\nfor _ in range(t):\n    (a, b) = (int(i) for i in input().split())\n    lb = lower_bound(a)\n    ub = lower_bound(b + 1)\n    if ub == len(digit_squares):\n        print(ub - lb + 1)\n    else:\n        print(ub - lb)", "import bisect\n\ndef is_digit_square(n):\n    while n > 0:\n        if n % 10 not in [0, 1, 4, 9]:\n            return False\n        n //= 10\n    return True\ndigit_squares = []\nfor i in range(1, 10 ** 5):\n    if is_digit_square(i ** 2):\n        digit_squares.append(i ** 2)\nt = int(input())\nfor _ in range(t):\n    (a, b) = (int(i) for i in input().split())\n    lower_bound = bisect.bisect_left(digit_squares, a)\n    upper_bound = bisect.bisect_right(digit_squares, b)\n    if upper_bound == len(digit_squares):\n        print(upper_bound - lower_bound + 1)\n    else:\n        print(upper_bound - lower_bound)", "def check(n):\n    for j in str(n):\n        if j not in ['1', '0', '4', '9']:\n            return False\n    return True\nt = int(input())\nmaxi = 100001\nsq = []\nfor i in range(maxi):\n    s = i * i\n    if check(s):\n        sq.append(s)\nfor _ in range(t):\n    (l, u) = map(int, input().split())\n    count = 0\n    for i in sq:\n        if l <= i and i <= u:\n            count += 1\n    print(count)", "def lower_bound(aux, x):\n    l = 0\n    r = len(aux) - 1\n    while l < r:\n        mid = l + (r - l) // 2\n        if aux[mid] >= x:\n            r = mid\n        else:\n            l = mid + 1\n    return l\naux = []\nfor i in range(1, 100000 + 1):\n    t = str(i * i)\n    if t.count('0') + t.count('1') + t.count('4') + t.count('9') == len(t):\n        aux.append(int(t))\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    ans = lower_bound(aux, b) - 1 - lower_bound(aux, a) + 1\n    if b in aux:\n        ans += 1\n    print(ans)", "n = 10 ** 5 + 1\nl = []\nfor i in range(1, n):\n    x = i ** 2\n    s = str(x)\n    q = 0\n    for j in s:\n        if j != '0' and j != '1' and (j != '4') and (j != '9'):\n            q = 1\n            break\n    if q == 0:\n        l.append(x)\nt = int(input())\nwhile t > 0:\n    (a, b) = map(int, input().split())\n    c = 0\n    for i in l:\n        if i <= b and i >= a:\n            c += 1\n        if i > b:\n            break\n    print(c)\n    t -= 1", "n = 10 ** 5 + 1\nl = []\nfor i in range(1, n):\n    x = i ** 2\n    s = str(x)\n    q = 0\n    for j in s:\n        if j != '0' and j != '1' and (j != '4') and (j != '9'):\n            q = 1\n            break\n    if q == 0:\n        l.append(x)\nt = int(input())\nwhile t > 0:\n    (a, b) = map(int, input().split())\n    x = y = 0\n    for i in range(120):\n        if l[i] >= b:\n            x = i\n            break\n    if l[i] > b:\n        x -= 1\n    for j in range(120):\n        if l[j] >= a:\n            y = j\n            break\n    print(x - y + 1)\n    t -= 1", "t = int(input())\nsm = [0, 1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nfor i in range(t):\n    countt = 0\n    (a, b) = map(int, input().split())\n    for x in sm:\n        if a <= x <= b:\n            countt += 1\n    print(countt)", "n = 0\narr = []\nwhile n * n <= 10000000000:\n    z = n * n\n    flag = 0\n    while z > 0:\n        k = int(z % 10)\n        if k != 0 and k != 1 and (k != 4) and (k != 9):\n            flag = 1\n            break\n        z //= 10\n    if flag == 0:\n        arr.append(n * n)\n    n += 1\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    count = 0\n    for i in range(len(arr)):\n        if a <= arr[i] <= b:\n            count += 1\n    print(count)", "n = 0\narr = []\nwhile n * n <= 10000000000:\n    z = n * n\n    flag = 0\n    while z > 0:\n        k = int(z % 10)\n        if k != 0 and k != 1 and (k != 4) and (k != 9):\n            flag = 1\n            break\n        z //= 10\n    if flag == 0:\n        arr.append(n * n)\n    n += 1\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    count = 0\n    for i in range(len(arr)):\n        if a <= arr[i] <= b:\n            count += 1\n    print(count)", "n = 0\narr = []\nwhile n * n <= 10000000000:\n    z = n * n\n    flag = 0\n    while z > 0:\n        k = int(z % 10)\n        if k != 0 and k != 1 and (k != 4) and (k != 9):\n            flag = 1\n            break\n        z //= 10\n    if flag == 0:\n        arr.append(n * n)\n    n += 1\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    count = 0\n    for i in range(len(arr)):\n        if a <= arr[i] <= b:\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    lst = [1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\n    c = 0\n    for i in range(len(lst)):\n        if a <= lst[i] <= b:\n            c += 1\n    print(c)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    lst = [1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\n    c = 0\n    for i in range(len(lst)):\n        if a <= lst[i] <= b:\n            c += 1\n    print(c)", "try:\n    t = int(input())\n    l = ['0', '1', '4', '9']\n    m = []\n    c = 0\n    s = 0\n    j = 0\n    while j <= 1000002:\n        s = str(j * j)\n        for k in s:\n            if k not in l:\n                c = 0\n                break\n            else:\n                c = 1\n        if c == 1:\n            m.append(s)\n        j = j + 1\n    for _ in range(t):\n        count = 0\n        (a, b) = map(int, input().split())\n        for i in m:\n            if int(i) >= a and int(i) <= b:\n                count += 1\n        print(count)\nexcept:\n    pass", "n = [0, 1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000, 10000400004]\nfor _ in range(int(input())):\n    count = 0\n    (r1, r2) = [int(r1) for r1 in input().split()]\n    for i in n:\n        if i >= r1 and i <= r2:\n            count += 1\n    print(count)", "N = [0, 1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000, 10000400004]\nT = int(input())\nfor i in range(T):\n    (a, b) = list(map(int, input().split()))\n    s = 0\n    for i in N:\n        if i >= a and i <= b:\n            s += 1\n    print(s)", "n = [0, 1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000, 10000400004]\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = 0\n    for i in n:\n        if i >= a and i <= b:\n            c = c + 1\n    print(c)", "from bisect import *\ntry:\n\n    def f(a, b):\n        k = [0, 1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\n        l = bisect_left(k, a)\n        r = bisect_right(k, b)\n        print(r - l)\n    for i in range(int(input())):\n        (a, b) = map(int, input().split())\n        f(a, b)\nexcept:\n    pass", "n = [0, 1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000, 10000400004]\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = 0\n    for j in n:\n        if j > b:\n            break\n        if j >= a and j <= b:\n            c += 1\n    print(c)", "list1 = [0, 1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nfor _ in range(int(input())):\n    (lower, upper) = list(map(int, input().split()))\n    res = 0\n    for i in list1:\n        if i >= lower and i <= upper:\n            res += 1\n        elif i > upper:\n            break\n    print(res)", "n = 0\narr = []\nwhile n * n <= 10000000000:\n    z = n * n\n    flag = 0\n    while z > 0:\n        k = int(z % 10)\n        if k != 0 and k != 1 and (k != 4) and (k != 9):\n            flag = 1\n            break\n        z = z // 10\n    if flag == 0:\n        arr.append(n * n)\n    n += 1\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    count = 0\n    for i in range(len(arr)):\n        if a <= arr[i] <= b:\n            count += 1\n    print(count)", "def lucky_check(n):\n    for i in range(len(n)):\n        if n[i] not in '1049':\n            return False\n    return True\narray = []\nfor i in range(1, 100001):\n    if lucky_check(str(i * i)):\n        array.append(i * i)\nfinal = []\nfor i in range(len(array) - 1):\n    final.append([array[i], array[i + 1] - 1])\n\ndef find(a):\n    if a == 10000000000:\n        return 120\n    elif a == 0:\n        return 0\n    else:\n        i = 0\n        found = False\n        while not found:\n            p = final[i]\n            if a <= p[1] and a >= p[0]:\n                found = True\n            i += 1\n        return i\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(find(b) - find(a - 1))", "noOfTestCases = int(input())\nresult = [0, 1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nwhile noOfTestCases != 0:\n    (lower, upper) = list(map(int, input().split()))\n    res = 0\n    for i in result:\n        if i >= lower and i <= upper:\n            res += 1\n        elif i > upper:\n            break\n    print(res)\n    noOfTestCases -= 1", "n = [0, 1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000, 10000400004]\nfor T in range(int(input())):\n    (l, r) = [int(x) for x in input().split()]\n    ans = 0\n    for i in n:\n        if i > r:\n            break\n        if i >= l and i <= r:\n            ans += 1\n    print(ans)", "import math\npower_list = []\nfor i in range(1, 100001):\n    curr = i * i\n    is_valid = True\n    while curr:\n        if curr % 10 in [0, 1, 4, 9]:\n            curr //= 10\n        else:\n            is_valid = False\n            break\n    if is_valid:\n        power_list.append(i)\nfor _ in range(int(input())):\n    (left, rite) = [int(x) for x in input().split()]\n    cnts = 0\n    left = math.ceil(left ** 0.5)\n    rite = int(rite ** 0.5)\n    m = 0\n    n = -1\n    for j in range(len(power_list)):\n        if power_list[j] <= rite:\n            m = j\n        if power_list[j] < left:\n            n = j\n    print(m - n)", "import math\nl = []\nfor i in range(1, 100001):\n    m = i * i\n    temp = 1\n    while m:\n        if m % 10 != 0 and m % 10 != 1 and (m % 10 != 4) and (m % 10 != 9):\n            temp = 0\n            break\n        m = m // 10\n    if temp == 1:\n        l.append(i)\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = 0\n    a1 = math.ceil(a ** 0.5)\n    b1 = int(b ** 0.5)\n    m = 0\n    n = -1\n    for j in range(len(l)):\n        if l[j] <= b1:\n            m = j\n        if l[j] < a1:\n            n = j\n    print(m - n)", "import math\nl = []\nfor i in range(1, 100001):\n    m = i * i\n    temp = 1\n    while m:\n        if m % 10 != 0 and m % 10 != 1 and (m % 10 != 4) and (m % 10 != 9):\n            temp = 0\n            break\n        m = m // 10\n    if temp == 1:\n        l.append(i)\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = 0\n    a1 = math.ceil(a ** 0.5)\n    b1 = int(b ** 0.5)\n    m = 0\n    n = -1\n    for j in range(len(l)):\n        if l[j] <= b1:\n            m = j\n        if l[j] < a1:\n            n = j\n    print(m - n)", "l = []\nl1 = ['0', '1', '4', '9']\nfor i in range(1, 100001):\n    s = str(i * i)\n    if any((j not in l1 for j in s)):\n        c = 1\n    else:\n        l.append(i * i)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    ans = 0\n    for i in l:\n        if i >= a and i <= b:\n            ans += 1\n    print(ans)", "n = int(input())\nx = ['2', '3', '5', '6', '7', '8']\nlm = []\nfor i in range(1, 10 ** 5 + 1):\n    flag = 0\n    for j in x:\n        if j in str(i ** 2):\n            flag = 1\n            break\n    if flag == 0:\n        lm.append(i ** 2)\nfor i in range(n):\n    (a, b) = map(int, input().split())\n    c = 0\n    for k in lm:\n        if k >= a and k <= b:\n            c += 1\n    print(c)", "t = int(input())\nlst = []\nj = 0\nwhile j * j <= 10000000000:\n    z = j * j\n    flag = 0\n    while z > 0:\n        k = int(z % 10)\n        if k != 0 and k != 1 and (k != 4) and (k != 9):\n            flag = 1\n            break\n        z = z / 10\n    if flag == 0:\n        lst.append(j * j)\n    j = j + 1\nwhile t > 0:\n    t -= 1\n    (a, b) = map(int, input().split())\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] >= a and lst[i] <= b:\n            count += 1\n    print(count)", "from bisect import *\ntable = [0, 1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nT = 0\ntry:\n    T = int(input())\nexcept:\n    pass\nfor _ in range(T):\n    (a, b) = map(int, input().split())\n    aa = bisect_left(table, a)\n    bb = bisect_right(table, b)\n    print(bb - aa)", "from bisect import *\ntable = [0, 1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    aa = bisect_left(table, a)\n    bb = bisect_right(table, b)\n    print(bb - aa)", "t = int(input())\nl = ['2', '3', '5', '6', '7', '8']\nk = []\nfor j in range(1, 10 ** 5 + 1):\n    flag = 0\n    for c in l:\n        if c in str(j ** 2):\n            flag = 1\n            break\n    if flag == 0:\n        k.append(j ** 2)\nfor i in range(t):\n    (a, b) = list(map(int, input().split()))\n    count = 0\n    for m in k:\n        if a <= m <= b:\n            count += 1\n    print(count)", "maximum = int(10000000000 ** 0.5)\nperfect = {'0', '1', '4', '9'}\npn = []\nfor i in range(1, maximum + 1):\n    if set(str(i * i)).union(perfect) == perfect:\n        pn.append(i * i)\nt = int(input())\nfor u in range(t):\n    (a, b) = map(int, input().split())\n    count = 0\n    for i in range(len(pn)):\n        if pn[i] > b:\n            break\n        elif pn[i] >= a:\n            count += 1\n    print(count)\n    print()", "import bisect\n\ndef perfect_digit(n):\n    ar = [2, 3, 5, 6, 7, 8]\n    while n > 0:\n        if n % 10 in ar:\n            return False\n        n //= 10\n    return True\nar = []\nfor i in range(1, 10 ** 5 + 1):\n    cur = i * i\n    if perfect_digit(cur):\n        ar.append(cur)\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    (right, left) = (bisect.bisect_left(ar, y), bisect.bisect_left(ar, x))\n    if ar[right] > y:\n        right -= 1\n    if ar[left] < x:\n        left += 1\n    print(right - left + 1)", "l = []\nl1 = ['0', '1', '4', '9']\nfor i in range(1, 100001):\n    s = str(i * i)\n    if any((j not in l1 for j in s)):\n        c = 1\n    else:\n        l.append(i * i)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    ans = 0\n    for i in l:\n        if i >= a and i <= b:\n            ans += 1\n    print(ans)", "from math import sqrt as S, ceil as upar, floor as neeche\n\ndef sahi(n):\n    if str(n).count('0') + str(n).count('1') + str(n).count('4') + str(n).count('9') == len(str(n)):\n        return True\n    return False\np = 10 ** 5 + 9\npre = [0] * p\nfor i in range(1, p):\n    curr = i * i\n    pre[i] = pre[i - 1] + sahi(curr)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    b = int(S(b))\n    a = int(S(a - 1))\n    print(pre[b] - pre[a])", "l = [1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000, 1000000000000000000000]\nfor r in range(int(input())):\n    x = 0\n    (a, b) = map(int, input().split())\n    for g in l:\n        if g >= a and g <= b:\n            x += 1\n    print(x)", "arr = [1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nfor _ in range(int(input())):\n    c = 0\n    (a, b) = map(int, input().split())\n    for i in arr:\n        if i >= a and i <= b:\n            c += 1\n    print(c)", "import math\nimport sys\n\ndef _int():\n    return int(sys.stdin.readline())\n\ndef _ints():\n    return map(int, sys.stdin.readline().split())\n\ndef _intarr():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef _str():\n    return sys.stdin.readline()\n\ndef _strarr():\n    return sys.stdin.readline().split()\n\ndef is_perfect(n):\n    perfect = True\n    while n != 0:\n        r = n % 10\n        if r not in [0, 1, 4, 9]:\n            perfect = False\n            break\n        n = n // 10\n    return perfect\nmem = [0] * 100001\nc = 0\nfor i in range(1, len(mem)):\n    if is_perfect(i * i):\n        c += 1\n    mem[i] = c\nt = _int()\nfor _ in range(t):\n    (a, b) = _ints()\n    ra = int(math.ceil(math.sqrt(a)))\n    rb = int(math.floor(math.sqrt(b)))\n    print(mem[rb] - mem[ra - 1])", "import math\nt = int(input())\nl = [0] * 1000001\nfor i in range(1, 1000001):\n    x = str(i * i)\n    if x.count('1') + x.count('0') + x.count('4') + x.count('9') == len(x):\n        l[i] = l[i - 1] + 1\n    else:\n        l[i] = l[i - 1]\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    (a, b) = (math.ceil(pow(a, 0.5)), math.ceil(pow(b, 0.5)))\n    print(l[b] - l[a - 1])", "t = int(input())\nans = []\nfor j in range(10 ** 5 + 1):\n    flag = 0\n    num = str(j * j)\n    for i in range(len(num)):\n        if num[i] != '0' and num[i] != '1' and (num[i] != '4') and (num[i] != '9'):\n            flag = 1\n            break\n    if flag == 0:\n        ans.append(j * j)\nfor I in range(t):\n    (a, b) = [int(i) for i in input().split()]\n    count = 0\n    for i in range(len(ans)):\n        if ans[i] >= a and ans[i] <= b:\n            count += 1\n    print(count)", "perf = []\n\ndef findvalid():\n    for i in range(1, 10 ** 5 + 1):\n        square = i ** 2\n        s = set(str(square))\n        for digit in s:\n            if digit == '1' or digit == '0' or digit == '4' or (digit == '9'):\n                cool = True\n            else:\n                cool = False\n                break\n        if cool:\n            perf.append(square)\nfindvalid()\nfrom bisect import bisect_left as bl\nfor i in range(int(input())):\n    allowed = [0, 1, 4, 9]\n    (a, b) = [int(x) for x in input().split()]\n    left = bl(perf, a)\n    right = bl(perf, b)\n    if perf[right] == b:\n        right += 1\n    print(right - left)", "perf = []\n\ndef findvalid():\n    for i in range(1, 10 ** 5 + 1):\n        square = i ** 2\n        s = set(str(square))\n        for digit in s:\n            if digit == '1' or digit == '0' or digit == '4' or (digit == '9'):\n                cool = True\n            else:\n                cool = False\n                break\n        if cool:\n            perf.append(square)\nfindvalid()\nfrom bisect import bisect_left as bl\nfor i in range(int(input())):\n    allowed = [0, 1, 4, 9]\n    (a, b) = [int(x) for x in input().split()]\n    left = bl(perf, a)\n    right = bl(perf, b)\n    if perf[right] == b:\n        right += 1\n    print(right - left)", "import os\nimport math\n\ndef checknum(num):\n    while num > 0:\n        temp = num % 10\n        if temp != 1 and temp != 4 and (temp != 9) and (temp != 0):\n            return 0\n        num = num // 10\n    return 1\nt = int(input())\navalues = []\nbvalues = []\nfor i in range(t):\n    (a, b) = input().strip().split()\n    a = int(a)\n    b = int(b)\n    avalues.append(a)\n    bvalues.append(b)\namin = min(avalues)\nbmax = max(bvalues)\nsquares = []\nbegin = math.ceil(math.sqrt(amin))\nend = math.floor(math.sqrt(bmax))\nfor j in range(begin, end + 1):\n    num = j * j\n    if checknum(num) == 1:\n        squares.append(num)\nfor i in range(t):\n    count = 0\n    for j in range(len(squares)):\n        if squares[j] >= avalues[i]:\n            m = j\n            while m < len(squares) and squares[m] <= bvalues[i]:\n                count += 1\n                m += 1\n            break\n    print(count)", "from math import *\ncount = []\nfor i in range(10 ** 5 + 5):\n    q = 0\n    for j in str(i ** 2):\n        if j not in ['0', '1', '4', '9']:\n            q = 1\n            break\n    if q == 0:\n        count.append(i ** 2)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in count:\n        if i >= n and i <= m:\n            c += 1\n        elif i > m:\n            break\n    print(c)", "t = int(input())\narr = []\nfor i in range(10 ** 5 + 5):\n    te = str(i * i)\n    st = 0\n    for j in range(len(te)):\n        if te[j] != '1' and te[j] != '4' and (te[j] != '9') and (te[j] != '0'):\n            st = 1\n            break\n    if st == 0:\n        arr.append(i * i)\nlength = len(arr)\nwhile t:\n    t -= 1\n    (a, b) = map(int, input().split())\n    ans = 0\n    for i in range(length):\n        if arr[i] >= a and arr[i] <= b:\n            ans += 1\n    print(ans)", "t = int(input())\nans = []\nfor j in range(10 ** 5 + 1):\n    flag = 0\n    num = str(j * j)\n    for i in range(len(num)):\n        if num[i] != '0' and num[i] != '1' and (num[i] != '4') and (num[i] != '9'):\n            flag = 1\n            break\n    if flag == 0:\n        ans.append(j * j)\nfor I in range(t):\n    (a, b) = [int(i) for i in input().split()]\n    count = 0\n    for i in range(len(ans)):\n        if ans[i] >= a and ans[i] <= b:\n            count += 1\n    print(count)", "op = [0]\ncount = 0\nfor j in range(1, 100001):\n    z = str(j * j)\n    if len(z) == z.count('0') + z.count('1') + z.count('4') + z.count('9'):\n        count += 1\n    op.append(count)\nt = int(input())\nfor i in range(0, t):\n    (a, b) = input().strip().split()\n    a = int(a)\n    b = int(b)\n    if pow(a, 1 / 2) == int(pow(a, 1 / 2)):\n        a = int(pow(a, 1 / 2))\n    else:\n        a = int(pow(a, 1 / 2)) + 1\n    b = int(pow(b, 1 / 2))\n    print(op[b] - op[a - 1])", "from sys import stdin\nawsSquares = [1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nT = int(stdin.readline().strip())\nwhile T > 0:\n    [l, r] = [int(n) for n in stdin.readline().strip().split()]\n    low = 0\n    high = len(awsSquares) - 1\n    while low < high:\n        mid = int((low + high) / 2)\n        if awsSquares[mid] < l:\n            low = mid + 1\n        else:\n            high = mid\n    start = low\n    low = 0\n    high = len(awsSquares) - 1\n    while low < high:\n        mid = int((low + high + 1) / 2)\n        if awsSquares[mid] > r:\n            high = mid - 1\n        else:\n            low = mid\n    end = low\n    if start <= end:\n        print(end - start + 1)\n    else:\n        print('0')\n    T -= 1", "def consists_of_perfect_digits(number):\n    while number != 0:\n        digit = number % 10\n        if digit not in [0, 1, 4, 9]:\n            return False\n        number //= 10\n    return True\n\ndef count_perfect_squares(perfect_digits, a, b):\n    num_perf_sq = 0\n    i = 0\n    while i < len(perfect_digits) and perfect_digits[i] <= b:\n        if perfect_squares[i] >= a and perfect_squares[i] <= b:\n            num_perf_sq += 1\n        i += 1\n    return num_perf_sq\nperfect_squares = []\nfor i in range(100000 + 1):\n    perf_sq = i * i\n    if consists_of_perfect_digits(perf_sq):\n        perfect_squares.append(perf_sq)\nT = int(input())\nfor t in range(T):\n    (a, b) = map(int, input().split())\n    print(count_perfect_squares(perfect_squares, a, b))", "import math\n\ndef verifyPerfectDigit(n):\n    n = int(n)\n    while n > 0:\n        x = int(n % 10)\n        if x != 0 and x != 1 and (x != 4) and (x != 9):\n            return 0\n        n = int(n / 10)\n    return 1\n\ndef createArray():\n    arr = []\n    for i in range(1, 100001):\n        if verifyPerfectDigit(i * i) == 1:\n            arr.append(i * i)\n    return arr\n\ndef main():\n    t = int(input())\n    arr = createArray()\n    while t:\n        str = input()\n        a = 0\n        b = 0\n        count = 0\n        (str1, str2) = str.split(' ')\n        for i in range(0, len(str1)):\n            a = a * 10 + int(str1[i])\n        for i in range(0, len(str2)):\n            b = b * 10 + int(str2[i])\n        for i in range(0, len(arr)):\n            if arr[i] >= a and arr[i] <= b:\n                count += 1\n        print(count)\n        t -= 1\nmain()", "s = []\ns = [0, 1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nt = int(input())\nfor q in range(0, t):\n    (a, b) = list(map(int, input().split()))\n    count = 0\n    for i in range(0, 121):\n        if s[i] >= a and s[i] <= b:\n            count = count + 1\n    print(count)", "def main():\n    import math\n    T = int(input())\n    output = list()\n    squaredigits = {'0', '1', '4', '9'}\n    sqrt_beginning = 1\n    sqrt_end = math.ceil(math.sqrt(10000000000))\n    x = 0\n    counter = 0\n    listcounter = list()\n    while x <= sqrt_end:\n        square = x * x\n        string_square = str(square)\n        flag = -1\n        for digit in string_square:\n            if digit not in squaredigits:\n                flag = 0\n                break\n        if flag == -1:\n            counter = counter + 1\n        listcounter.append(counter)\n        x = x + 1\n    for i in range(0, T):\n        line = input()\n        linelist = line.split()\n        a = int(linelist[0])\n        b = int(linelist[1])\n        sqrt_a = math.ceil(math.sqrt(a))\n        sqrt_b = math.ceil(math.sqrt(b))\n        output.append(listcounter[sqrt_b] - listcounter[sqrt_a - 1])\n    for x in output:\n        print(x)\nmain()", "def main():\n    from sys import stdin\n    input()\n    perfect_numbers = [1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\n    for a in stdin:\n        (A, B) = map(int, a.split())\n        ans = 0\n        for x in perfect_numbers:\n            if A <= x <= B:\n                ans += 1\n            elif x > B:\n                break\n        print(ans)\nmain()", "arr = [0, 1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    count = 0\n    for i in arr:\n        if i >= a and i <= b:\n            count += 1\n    print(count)", "import sys\nimport math\nfrom time import time\nfrom itertools import permutations, combinations\nimport collections\nimport functools\nfrom fractions import gcd, Fraction\nimport string\nimport operator\nimport bisect\n\nclass timed(object):\n\n    def __init__(self, func):\n        self.func = func\n\n    def __call__(self, *args):\n        t1 = time()\n        ret = self.func(*args)\n        dif_time = time() - t1\n        print('%s: returned %s in %f seconds' % (self.func.__name__, ret, dif_time))\n        return ret\n\ndef comp(f1, f2, *args):\n    t1 = time()\n    r1 = f1(*args) if f1 is not None else None\n    t2 = time()\n    r2 = f2(*args) if f2 is not None else None\n    t3 = time()\n    res = '%5s: %s in %f\\n%5s: %s in %f' % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)\n    if r1 != r2:\n        dr = '!! DIFFERENT RESULTS !!'\n        res = dr + '\\n' + res + '\\n' + dr\n    print(res)\n\ndef alg(start, end):\n    root_start = int(math.sqrt(start))\n    root_end = int(math.sqrt(end))\n    count = 0\n    for root in range(root_start, root_end + 1):\n        sq = root * root\n        if all([int(a) in [0, 1, 4, 9] for a in str(sq)]):\n            count += 1\n    return count\n\ndef alg2(start, end):\n    perfect_squares = [1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\n    res = filter(lambda x: start <= x and end >= x, perfect_squares)\n    return len(list(res))\n\ndef main():\n    data = sys.stdin\n    nb = int(data.readline())\n    for icase in range(nb):\n        (start, end) = map(int, data.readline().split())\n        res = alg2(start, end)\n        print(res)\nmain()", "arr = [0, 1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nt = int(input())\ni = 0\nwhile i < t:\n    ans = 0\n    a = input()\n    a = a.split()\n    for j in arr:\n        if j >= int(a[0]) and j <= int(a[1]):\n            ans += 1\n    print(ans)\n    i += 1", "total_cases = int(input())\ncurrent_case = 0\nperfect_squares = [1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nwhile current_case < total_cases:\n    current_case += 1\n    (curr_low, curr_hi) = map(int, input().split())\n    answer = 0\n    for i in perfect_squares:\n        if i >= curr_low and i <= curr_hi:\n            answer += 1\n    print(answer)", "from sys import stdin, stdout\nans = [0, 1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nfor _ in [0] * int(stdin.readline()):\n    c = 0\n    (a, b) = map(int, stdin.readline().split())\n    for i in ans:\n        if i >= a and i <= b:\n            c += 1\n    print(c)", "lst = [1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nT = int(input())\nwhile T > 0:\n    T -= 1\n    count = 0\n    (a, b) = map(int, input().split(' '))\n    for k in lst:\n        if k >= a and k <= b:\n            count += 1\n    print(count)", "from math import sqrt\nlst = []\n\ndef perfectsquarelst():\n    aa = 1\n    bb = 100000\n    for i in range(aa, bb + 1):\n        num = str(i * i)\n        perfect = True\n        for d in num:\n            if d in ['2', '3', '5', '6', '7', '8']:\n                perfect = False\n        if perfect:\n            lst.append(i * i)\nT = int(input())\nperfectsquarelst()\nwhile T > 0:\n    T -= 1\n    count = 0\n    (a, b) = map(int, input().split(' '))\n    for k in lst:\n        if k >= a and k <= b:\n            count += 1\n    print(count)"]