["import math\n\ndef primeFactors(num):\n    primes = set()\n    if num == 2:\n        primes.add(num)\n    for j in range(2, int(math.sqrt(num)) + 1):\n        if num % j == 0:\n            primes.add(j)\n            while num % j == 0:\n                num //= j\n    if num > 2:\n        primes.add(num)\n    return primes\n(k, q) = map(int, input().split())\nprimes = primeFactors(k)\ntemp = {}\nc = 0\nresult = []\nwhile q > 0:\n    query = input().split()\n    if query[0] == '!':\n        (cstart, cend, x) = (int(query[1]), int(query[2]), int(query[3]))\n        for existingvalue in sorted(temp):\n            (estart, eend) = (existingvalue[0], existingvalue[1])\n            if cstart > eend:\n                continue\n            if cend < estart:\n                break\n            (startRange, endRange) = (cstart, cend)\n            if cstart >= estart and cstart <= eend:\n                cstart = eend + 1\n                continue\n            if cend >= estart:\n                endRange = estart - 1\n            if startRange <= endRange:\n                temp[startRange, endRange] = x\n                cstart = max(endRange + 1, eend + 1)\n        if cstart <= cend:\n            temp[cstart, cend] = x\n    elif query[0] == '?':\n        (l, r) = (int(query[1]), int(query[2]))\n        count = 0\n        for primenum in primes:\n            for currRange in temp:\n                if not (r < currRange[0] or l > currRange[1]):\n                    if temp[currRange] % primenum == 0:\n                        count += 1\n                        break\n        c += 1\n        result.append(count)\n    q = q - 1\nfor i in range(c):\n    print(result[i])", "import math\n\ndef primeFactors(num):\n    primes = set()\n    if num == 2:\n        primes.add(num)\n    for j in range(2, int(math.sqrt(num)) + 1):\n        if num % j == 0:\n            primes.add(j)\n            while num % j == 0:\n                num //= j\n    if num > 2:\n        primes.add(num)\n    return primes\n(k, q) = map(int, input().split())\nprimes = primeFactors(k)\ntemp = {}\nc = 0\nresult = []\nwhile q > 0:\n    query = input().split()\n    if query[0] == '!':\n        (cstart, cend, x) = (int(query[1]), int(query[2]), int(query[3]))\n        for existingvalue in sorted(temp):\n            (estart, eend) = (existingvalue[0], existingvalue[1])\n            if cstart > eend:\n                continue\n            if cend < estart:\n                break\n            (startRange, endRange) = (cstart, cend)\n            if cstart >= estart and cstart <= eend:\n                cstart = eend + 1\n                continue\n            if cend >= estart:\n                endRange = estart - 1\n            if startRange <= endRange:\n                temp[startRange, endRange] = x\n                cstart = max(endRange + 1, eend + 1)\n        if cstart <= cend:\n            temp[cstart, cend] = x\n    elif query[0] == '?':\n        (l, r) = (int(query[1]), int(query[2]))\n        count = 0\n        for primenum in primes:\n            for currRange in temp:\n                if not (r < currRange[0] or l > currRange[1]):\n                    if temp[currRange] % primenum == 0:\n                        count += 1\n                        break\n        c += 1\n        result.append(count)\n    q = q - 1\nfor i in range(c):\n    print(result[i])", "import math\n\ndef primeFactors(num):\n    primes = set()\n    if num == 2:\n        primes.add(num)\n    for j in range(2, int(math.sqrt(num)) + 1):\n        if num % j == 0:\n            primes.add(j)\n            while num % j == 0:\n                num //= j\n    if num > 2:\n        primes.add(num)\n    return primes\n(k, q) = map(int, input().split())\nprimes = primeFactors(k)\ntemp = {}\nc = 0\nresult = []\nwhile q > 0:\n    query = input().split()\n    if query[0] == '!':\n        (cstart, cend, x) = (int(query[1]), int(query[2]), int(query[3]))\n        for existingvalue in sorted(temp):\n            (estart, eend) = (existingvalue[0], existingvalue[1])\n            if cstart > eend:\n                continue\n            if cend < estart:\n                break\n            (startRange, endRange) = (cstart, cend)\n            if cstart >= estart and cstart <= eend:\n                cstart = eend + 1\n                continue\n            if cend >= estart:\n                endRange = estart - 1\n            if startRange <= endRange:\n                temp[startRange, endRange] = x\n                cstart = max(endRange + 1, eend + 1)\n        if cstart <= cend:\n            temp[cstart, cend] = x\n    elif query[0] == '?':\n        (l, r) = (int(query[1]), int(query[2]))\n        count = 0\n        for primenum in primes:\n            for currRange in temp:\n                if not (r < currRange[0] or l > currRange[1]):\n                    if temp[currRange] % primenum == 0:\n                        count += 1\n                        break\n        c += 1\n        result.append(count)\n    q = q - 1\nfor i in range(c):\n    print(result[i])", "import math\n\ndef distinctPrimeFactors(num):\n    (primes, sqrt) = (set(), int(math.sqrt(num)))\n    if num == 2:\n        primes.add(num)\n    for j in range(2, sqrt + 1):\n        if num % j == 0:\n            primes.add(j)\n            while num % j == 0:\n                num //= j\n    if num > 2:\n        primes.add(num)\n    return primes\n(res, c, lst, primes, rangeData) = ([], 0, {}, {}, {})\n(k, q) = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q):\n    query = input()\n    if query[0] == '!':\n        (cmd, l, r, x) = query.split()\n        (l, r, x) = (int(l), int(r), int(x))\n        (start, end, startflag) = (l, r, False)\n        for i in sorted(rangeData):\n            rangeVal = i\n            if start > rangeVal[1]:\n                continue\n            if end < rangeVal[0]:\n                break\n            (startRange, endRange) = (start, end)\n            if start >= rangeVal[0] and start <= rangeVal[1]:\n                start = rangeVal[1] + 1\n                continue\n            if end >= rangeVal[0]:\n                endRange = rangeVal[0] - 1\n            if startRange <= endRange:\n                rangeData[startRange, endRange] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if start <= end:\n            rangeData[start, end] = x\n    elif query[0] == '?':\n        (cmd, l, r) = query.split()\n        (l, r, count) = (int(l), int(r), 0)\n        for primenum in primes[k]:\n            for currRange in rangeData:\n                if not (r < currRange[0] or l > currRange[1]):\n                    if rangeData[currRange] % primenum == 0:\n                        count += 1\n                        break\n        c += 1\n        res.append(count)\nfor i in range(c):\n    print(res[i])", "import math\n\ndef distinctPrimeFactors(num):\n    (primes, sqrt) = (set(), int(math.sqrt(num)))\n    if num == 2:\n        primes.add(num)\n    for j in range(2, sqrt + 1):\n        if num % j == 0:\n            primes.add(j)\n            while num % j == 0:\n                num //= j\n    if num > 2:\n        primes.add(num)\n    return primes\n(res, c, lst, primes, rangeData) = ([], 0, {}, {}, {})\n(k, q) = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q):\n    query = input()\n    if query[0] == '!':\n        (cmd, l, r, x) = query.split()\n        (l, r, x) = (int(l), int(r), int(x))\n        (start, end, startflag) = (l, r, False)\n        for i in sorted(rangeData):\n            rangeVal = i\n            if start > rangeVal[1]:\n                continue\n            if end < rangeVal[0]:\n                break\n            (startRange, endRange) = (start, end)\n            if start >= rangeVal[0] and start <= rangeVal[1]:\n                start = rangeVal[1] + 1\n                continue\n            if end >= rangeVal[0]:\n                endRange = rangeVal[0] - 1\n            if startRange <= endRange:\n                rangeData[startRange, endRange] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if start <= end:\n            rangeData[start, end] = x\n    elif query[0] == '?':\n        (cmd, l, r) = query.split()\n        (l, r, count) = (int(l), int(r), 0)\n        for primenum in primes[k]:\n            for currRange in rangeData:\n                if not (r < currRange[0] or l > currRange[1]):\n                    if rangeData[currRange] % primenum == 0:\n                        count += 1\n                        break\n        c += 1\n        res.append(count)\nfor i in range(c):\n    print(res[i])", "import math\n\ndef distinctPrimeFactors(num):\n    (primes, sqrt) = (set(), int(math.sqrt(num)))\n    if num == 2:\n        primes.add(num)\n    for j in range(2, sqrt + 1):\n        if num % j == 0:\n            primes.add(j)\n            while num % j == 0:\n                num //= j\n    if num > 2:\n        primes.add(num)\n    return primes\n(res, c, lst, primes, rangeData) = ([], 0, {}, {}, {})\n(k, q) = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q):\n    query = input()\n    if query[0] == '!':\n        (cmd, l, r, x) = query.split()\n        (l, r, x) = (int(l), int(r), int(x))\n        (start, end, startflag) = (l, r, False)\n        for i in sorted(rangeData):\n            rangeVal = i\n            if start > rangeVal[1]:\n                continue\n            if end < rangeVal[0]:\n                break\n            (startRange, endRange) = (start, end)\n            if start >= rangeVal[0] and start <= rangeVal[1]:\n                start = rangeVal[1] + 1\n                continue\n            if end >= rangeVal[0]:\n                endRange = rangeVal[0] - 1\n            if startRange <= endRange:\n                rangeData[startRange, endRange] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if start <= end:\n            rangeData[start, end] = x\n    elif query[0] == '?':\n        (cmd, l, r) = query.split()\n        (l, r, count) = (int(l), int(r), 0)\n        for primenum in primes[k]:\n            for currRange in rangeData:\n                if not (r < currRange[0] or l > currRange[1]):\n                    if rangeData[currRange] % primenum == 0:\n                        count += 1\n                        break\n        c += 1\n        res.append(count)\nfor i in range(c):\n    print(res[i])", "import math\n\ndef distinctPrimeFactors(num):\n    (primes, sqrt) = (set(), int(math.sqrt(num)))\n    if num == 2:\n        primes.add(num)\n    for j in range(2, sqrt + 1):\n        if num % j == 0:\n            primes.add(j)\n            while num % j == 0:\n                num //= j\n    if num > 2:\n        primes.add(num)\n    return primes\n(res, c, lst, primes, rangeData) = ([], 0, {}, {}, {})\n(k, q) = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q):\n    query = input()\n    if query[0] == '!':\n        (cmd, l, r, x) = query.split()\n        (l, r, x) = (int(l), int(r), int(x))\n        (start, end, startflag) = (l, r, False)\n        for i in sorted(rangeData):\n            rangeVal = i\n            if start > rangeVal[1]:\n                continue\n            if end < rangeVal[0]:\n                break\n            (startRange, endRange) = (start, end)\n            if start >= rangeVal[0] and start <= rangeVal[1]:\n                start = rangeVal[1] + 1\n                continue\n            if end >= rangeVal[0]:\n                endRange = rangeVal[0] - 1\n            if startRange <= endRange:\n                rangeData[startRange, endRange] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if start <= end:\n            rangeData[start, end] = x\n    elif query[0] == '?':\n        (cmd, l, r) = query.split()\n        (l, r, count) = (int(l), int(r), 0)\n        for primenum in primes[k]:\n            for currRange in rangeData:\n                if not (r < currRange[0] or l > currRange[1]):\n                    if rangeData[currRange] % primenum == 0:\n                        count += 1\n                        break\n        c += 1\n        res.append(count)\nfor i in range(c):\n    print(res[i])", "import math\n\ndef distinctPrimeFactors(num):\n    (primes, sqrt) = (set(), int(math.sqrt(num)))\n    if num == 2:\n        primes.add(num)\n    for j in range(2, sqrt + 1):\n        if num % j == 0:\n            primes.add(j)\n            while num % j == 0:\n                num //= j\n    if num > 2:\n        primes.add(num)\n    return primes\n(res, c, lst, primes, rangeData) = ([], 0, {}, {}, {})\n(k, q) = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q):\n    query = input()\n    if query[0] == '!':\n        (cmd, l, r, x) = query.split()\n        (l, r, x) = (int(l), int(r), int(x))\n        (start, end, startflag) = (l, r, False)\n        for i in sorted(rangeData):\n            rangeVal = i\n            if start > rangeVal[1]:\n                continue\n            if end < rangeVal[0]:\n                break\n            (startRange, endRange) = (start, end)\n            if start >= rangeVal[0] and start <= rangeVal[1]:\n                start = rangeVal[1] + 1\n                continue\n            if end >= rangeVal[0]:\n                endRange = rangeVal[0] - 1\n            if startRange <= endRange:\n                rangeData[startRange, endRange] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if start <= end:\n            rangeData[start, end] = x\n    elif query[0] == '?':\n        (cmd, l, r) = query.split()\n        (l, r, count) = (int(l), int(r), 0)\n        for primenum in primes[k]:\n            for currRange in rangeData:\n                if not (r < currRange[0] or l > currRange[1]):\n                    if rangeData[currRange] % primenum == 0:\n                        count += 1\n                        break\n        c += 1\n        res.append(count)\nfor i in range(c):\n    print(res[i])", "import math\n\ndef distinctPrimeFactors(num):\n    (primes, sqrt) = (set(), int(math.sqrt(num)))\n    if num == 2:\n        primes.add(num)\n    for j in range(2, sqrt + 1):\n        if num % j == 0:\n            primes.add(j)\n            while num % j == 0:\n                num //= j\n    if num > 2:\n        primes.add(num)\n    return primes\n(res, c, lst, primes, rangeData) = ([], 0, {}, {}, {})\n(k, q) = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q):\n    query = input()\n    if query[0] == '!':\n        (cmd, l, r, x) = query.split()\n        (l, r, x) = (int(l), int(r), int(x))\n        (start, end, startflag) = (l, r, False)\n        for i in sorted(rangeData):\n            rangeVal = i\n            if start > rangeVal[1]:\n                continue\n            if end < rangeVal[0]:\n                break\n            (startRange, endRange) = (start, end)\n            if start >= rangeVal[0] and start <= rangeVal[1]:\n                start = rangeVal[1] + 1\n                continue\n            if end >= rangeVal[0]:\n                endRange = rangeVal[0] - 1\n            if startRange <= endRange:\n                rangeData[startRange, endRange] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if start <= end:\n            rangeData[start, end] = x\n    elif query[0] == '?':\n        (cmd, l, r) = query.split()\n        (l, r, count) = (int(l), int(r), 0)\n        for primenum in primes[k]:\n            for currRange in rangeData:\n                if not (r < currRange[0] or l > currRange[1]):\n                    if rangeData[currRange] % primenum == 0:\n                        count += 1\n                        break\n        c += 1\n        res.append(count)\nfor i in range(c):\n    print(res[i])", "import math\n\ndef distinctPrimeFactors(num):\n    (primes, sqrt) = (set(), int(math.sqrt(num)))\n    if num == 2:\n        primes.add(num)\n    for j in range(2, sqrt + 1):\n        if num % j == 0:\n            primes.add(j)\n            while num % j == 0:\n                num //= j\n    if num > 2:\n        primes.add(num)\n    return primes\n(res, c, lst, primes, rangeData) = ([], 0, {}, {}, {})\n(k, q) = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q):\n    query = input()\n    if query[0] == '!':\n        (cmd, l, r, x) = query.split()\n        (l, r, x) = (int(l), int(r), int(x))\n        (start, end, startflag) = (l, r, False)\n        for i in sorted(rangeData):\n            rangeVal = i\n            if start > rangeVal[1]:\n                continue\n            if end < rangeVal[0]:\n                break\n            (startRange, endRange) = (start, end)\n            if start >= rangeVal[0] and start <= rangeVal[1]:\n                start = rangeVal[1] + 1\n                continue\n            if end >= rangeVal[0]:\n                endRange = rangeVal[0] - 1\n            if startRange <= endRange:\n                rangeData[startRange, endRange] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if start <= end:\n            rangeData[start, end] = x\n    elif query[0] == '?':\n        (cmd, l, r) = query.split()\n        (l, r, count) = (int(l), int(r), 0)\n        for primenum in primes[k]:\n            for currRange in rangeData:\n                if not (r < currRange[0] or l > currRange[1]):\n                    if rangeData[currRange] % primenum == 0:\n                        count += 1\n                        break\n        c += 1\n        res.append(count)\nfor i in range(c):\n    print(res[i])", "import math\n\ndef distinctPrimeFactors(num):\n    (primes, sqrt) = (set(), int(math.sqrt(num)))\n    if num == 2:\n        primes.add(num)\n    for j in range(2, sqrt + 1):\n        if num % j == 0:\n            primes.add(j)\n            while num % j == 0:\n                num //= j\n    if num > 2:\n        primes.add(num)\n    return primes\n(res, c, lst, primes, rangeData) = ([], 0, {}, {}, {})\n(k, q) = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q):\n    query = input()\n    if query[0] == '!':\n        (cmd, l, r, x) = query.split()\n        (l, r, x) = (int(l), int(r), int(x))\n        (start, end, startflag) = (l, r, False)\n        for i in sorted(rangeData):\n            rangeVal = i\n            if start > rangeVal[1]:\n                continue\n            if end < rangeVal[0]:\n                break\n            (startRange, endRange) = (start, end)\n            if start >= rangeVal[0] and start <= rangeVal[1]:\n                start = rangeVal[1] + 1\n                continue\n            if end >= rangeVal[0]:\n                endRange = rangeVal[0] - 1\n            if startRange <= endRange:\n                rangeData[startRange, endRange] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if start <= end:\n            rangeData[start, end] = x\n    elif query[0] == '?':\n        (cmd, l, r) = query.split()\n        (l, r, count) = (int(l), int(r), 0)\n        for primenum in primes[k]:\n            for currRange in rangeData:\n                if not (r < currRange[0] or l > currRange[1]):\n                    if rangeData[currRange] % primenum == 0:\n                        count += 1\n                        break\n        c += 1\n        res.append(count)\nfor i in range(c):\n    print(res[i])", "import math\n\ndef distinctPrimeFactors(num):\n    (primes, sqrt) = (set(), int(math.sqrt(num)))\n    if num == 2:\n        primes.add(num)\n    for j in range(2, sqrt + 1):\n        if num % j == 0:\n            primes.add(j)\n            while num % j == 0:\n                num //= j\n    if num > 2:\n        primes.add(num)\n    return primes\n(res, c, lst, primes, rangeData) = ([], 0, {}, {}, {})\n(k, q) = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q):\n    query = input()\n    if query[0] == '!':\n        (cmd, l, r, x) = query.split()\n        (l, r, x) = (int(l), int(r), int(x))\n        (start, end, startflag) = (l, r, False)\n        for i in sorted(rangeData):\n            rangeVal = i\n            if start > rangeVal[1]:\n                continue\n            if end < rangeVal[0]:\n                break\n            (startRange, endRange) = (start, end)\n            if start >= rangeVal[0] and start <= rangeVal[1]:\n                start = rangeVal[1] + 1\n                continue\n            if end >= rangeVal[0]:\n                endRange = rangeVal[0] - 1\n            if startRange <= endRange:\n                rangeData[startRange, endRange] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if start <= end:\n            rangeData[start, end] = x\n    elif query[0] == '?':\n        (cmd, l, r) = query.split()\n        (l, r, count) = (int(l), int(r), 0)\n        for primenum in primes[k]:\n            for currRange in rangeData:\n                if not (r < currRange[0] or l > currRange[1]):\n                    if rangeData[currRange] % primenum == 0:\n                        count += 1\n                        break\n        c += 1\n        res.append(count)\nfor i in range(c):\n    print(res[i])", "import math\n\ndef distinctPrimeFactors(num):\n    (primes, sqrt) = (set(), int(math.sqrt(num)))\n    if num == 2:\n        primes.add(num)\n    for j in range(2, sqrt + 1):\n        if num % j == 0:\n            primes.add(j)\n            while num % j == 0:\n                num //= j\n    if num > 2:\n        primes.add(num)\n    return primes\n(res, c, lst, primes, rangeData) = ([], 0, {}, {}, {})\n(k, q) = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q):\n    query = input()\n    if query[0] == '!':\n        (cmd, l, r, x) = query.split()\n        (l, r, x) = (int(l), int(r), int(x))\n        (start, end, startflag) = (l, r, False)\n        for i in sorted(rangeData):\n            rangeVal = i\n            if start > rangeVal[1]:\n                continue\n            if end < rangeVal[0]:\n                break\n            (startRange, endRange) = (start, end)\n            if start >= rangeVal[0] and start <= rangeVal[1]:\n                start = rangeVal[1] + 1\n                continue\n            if end >= rangeVal[0]:\n                endRange = rangeVal[0] - 1\n            if startRange <= endRange:\n                rangeData[startRange, endRange] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if start <= end:\n            rangeData[start, end] = x\n    elif query[0] == '?':\n        (cmd, l, r) = query.split()\n        (l, r, count) = (int(l), int(r), 0)\n        for primenum in primes[k]:\n            for currRange in rangeData:\n                if not (r < currRange[0] or l > currRange[1]):\n                    if rangeData[currRange] % primenum == 0:\n                        count += 1\n                        break\n        c += 1\n        res.append(count)\nfor i in range(c):\n    print(res[i])", "import math\n\ndef distinctPrimeFactors(num):\n    (primes, sqrt) = (set(), int(math.sqrt(num)))\n    if num == 2:\n        primes.add(num)\n    for j in range(2, sqrt + 1):\n        if num % j == 0:\n            primes.add(j)\n            while num % j == 0:\n                num //= j\n    if num > 2:\n        primes.add(num)\n    return primes\n(res, c, lst, primes, rangeData) = ([], 0, {}, {}, {})\n(k, q) = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q):\n    query = input()\n    if query[0] == '!':\n        (cmd, l, r, x) = query.split()\n        (l, r, x) = (int(l), int(r), int(x))\n        (start, end, startflag) = (l, r, False)\n        for i in sorted(rangeData):\n            rangeVal = i\n            if start > rangeVal[1]:\n                continue\n            if end < rangeVal[0]:\n                break\n            (startRange, endRange) = (start, end)\n            if start >= rangeVal[0] and start <= rangeVal[1]:\n                start = rangeVal[1] + 1\n                continue\n            if end >= rangeVal[0]:\n                endRange = rangeVal[0] - 1\n            if startRange <= endRange:\n                rangeData[startRange, endRange] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if start <= end:\n            rangeData[start, end] = x\n    elif query[0] == '?':\n        (cmd, l, r) = query.split()\n        (l, r, count) = (int(l), int(r), 0)\n        for primenum in primes[k]:\n            for currRange in rangeData:\n                if not (r < currRange[0] or l > currRange[1]):\n                    if rangeData[currRange] % primenum == 0:\n                        count += 1\n                        break\n        c += 1\n        res.append(count)\nfor i in range(c):\n    print(res[i])", "from collections import defaultdict\nfrom math import sqrt\n\ndef primefact(n):\n    pf = []\n    if n % 2 == 0:\n        pf.append(2)\n        while n % 2 == 0:\n            n //= 2\n    for i in range(3, int(sqrt(n)) + 1):\n        if n % i == 0:\n            while n % i == 0:\n                n //= i\n            pf.append(i)\n    if n > 2:\n        pf.append(int(n))\n    return pf\n(K, Q) = map(int, input().split())\nprime_range = {}\npfk = primefact(K)\nfor i in range(Q):\n    query = input().split()\n    if query[0] == '!':\n        l = int(query[1])\n        r = int(query[2])\n        start = l\n        end = r\n        for i in sorted(prime_range):\n            if start > i[1]:\n                continue\n            if end < i[0]:\n                break\n            startrange = start\n            endrange = end\n            if start >= i[0] and start <= i[1]:\n                start = i[1] + 1\n                continue\n            if end >= i[0]:\n                endrange = i[0] - 1\n            if startrange <= endrange:\n                prime_range[startrange, endrange] = int(query[3])\n                start = max(endrange + 1, i[1] + 1)\n        if start <= end:\n            prime_range[start, end] = int(query[3])\n    else:\n        l = int(query[1])\n        r = int(query[2])\n        res = []\n        count = 0\n        for primenum in pfk:\n            for currRange in prime_range:\n                if not (r < currRange[0] or l > currRange[1]):\n                    num = prime_range[currRange]\n                    if num % primenum == 0:\n                        count += 1\n                        break\n        res.append(count)\n        for r in res:\n            print(r)", "import math\n\ndef distinctPrimeFactors(num):\n    primes = set()\n    if num == 2:\n        primes.add(num)\n    sqrt = int(math.sqrt(num))\n    for j in range(2, sqrt + 1):\n        if num % j == 0:\n            primes.add(j)\n            while num % j == 0:\n                num //= j\n    if num > 2:\n        primes.add(num)\n    return primes\nres = []\nc = 0\nlst = {}\nprimes = {}\nrangeData = {}\n(k, q) = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q):\n    query = input()\n    if query[0] == '!':\n        (cmd, l, r, x) = query.split()\n        l = int(l)\n        r = int(r)\n        x = int(x)\n        start = l\n        end = r\n        startflag = False\n        for i in sorted(rangeData):\n            rangeVal = i\n            if start > rangeVal[1]:\n                continue\n            if end < rangeVal[0]:\n                break\n            startRange = start\n            endRange = end\n            if start >= rangeVal[0] and start <= rangeVal[1]:\n                start = rangeVal[1] + 1\n                continue\n            if end >= rangeVal[0]:\n                endRange = rangeVal[0] - 1\n            if startRange <= endRange:\n                rangeData[startRange, endRange] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if start <= end:\n            rangeData[start, end] = x\n    elif query[0] == '?':\n        (cmd, l, r) = query.split()\n        l = int(l)\n        r = int(r)\n        count = 0\n        for primenum in primes[k]:\n            for currRange in rangeData:\n                if not (r < currRange[0] or l > currRange[1]):\n                    num = rangeData[currRange]\n                    if num % primenum == 0:\n                        count += 1\n                        break\n        c += 1\n        res.append(count)\nfor i in range(c):\n    print(res[i])", "import math\n\ndef distinctPrimeFactors(num):\n    primes = set()\n    if num == 2:\n        primes.add(num)\n    sqrt = int(math.sqrt(num))\n    for j in range(2, sqrt + 1):\n        if num % j == 0:\n            primes.add(j)\n            while num % j == 0:\n                num //= j\n    if num > 2:\n        primes.add(num)\n    return primes\nlst = {}\nprimes = {}\nrangeData = {}\n(k, q) = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q):\n    query = input()\n    if query[0] == '!':\n        (cmd, l, r, x) = query.split()\n        l = int(l)\n        r = int(r)\n        x = int(x)\n        start = l\n        end = r\n        startflag = False\n        for i in sorted(rangeData):\n            rangeVal = i\n            if start > rangeVal[1]:\n                continue\n            if end < rangeVal[0]:\n                break\n            startRange = start\n            endRange = end\n            if start >= rangeVal[0] and start <= rangeVal[1]:\n                start = rangeVal[1] + 1\n                continue\n            if end >= rangeVal[0]:\n                endRange = rangeVal[0] - 1\n            if startRange <= endRange:\n                rangeData[startRange, endRange] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if start <= end:\n            rangeData[start, end] = x\n    elif query[0] == '?':\n        (cmd, l, r) = query.split()\n        l = int(l)\n        r = int(r)\n        count = 0\n        for primenum in primes[k]:\n            for currRange in rangeData:\n                if not (r < currRange[0] or l > currRange[1]):\n                    num = rangeData[currRange]\n                    if num % primenum == 0:\n                        count += 1\n                        break\n        print(count)", "import math\n\ndef distinctPrimeFactors(num):\n    primes = set()\n    if num == 2:\n        primes.add(num)\n    sqrt = int(math.sqrt(num))\n    for j in range(2, sqrt + 1):\n        if num % j == 0:\n            primes.add(j)\n            while num % j == 0:\n                num //= j\n    if num > 2:\n        primes.add(num)\n    return primes\nlst = {}\nprimes = {}\nrangeData = {}\n(k, q) = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q):\n    query = input()\n    if query[0] == '!':\n        (cmd, l, r, x) = query.split()\n        l = int(l)\n        r = int(r)\n        x = int(x)\n        start = l\n        end = r\n        startflag = False\n        for i in sorted(rangeData):\n            rangeVal = i\n            if start > rangeVal[1]:\n                continue\n            if end < rangeVal[0]:\n                break\n            startRange = start\n            endRange = end\n            if start >= rangeVal[0] and start <= rangeVal[1]:\n                start = rangeVal[1] + 1\n                continue\n            if end >= rangeVal[0]:\n                endRange = rangeVal[0] - 1\n            if startRange <= endRange:\n                rangeData[startRange, endRange] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if start <= end:\n            rangeData[start, end] = x\n    elif query[0] == '?':\n        (cmd, l, r) = query.split()\n        l = int(l)\n        r = int(r)\n        count = 0\n        for primenum in primes[k]:\n            for currRange in rangeData:\n                if not (r < currRange[0] or l > currRange[1]):\n                    num = rangeData[currRange]\n                    if num % primenum == 0:\n                        count += 1\n                        break\n        print(count)", "import math\n\ndef distinctPrimeFactors(num):\n    primes = set()\n    if num == 2:\n        primes.add(num)\n    sqrt = int(math.sqrt(num))\n    for j in range(2, sqrt + 1):\n        if num % j == 0:\n            primes.add(j)\n            while num % j == 0:\n                num //= j\n    if num > 2:\n        primes.add(num)\n    return primes\nlst = {}\nprimes = {}\nrangeData = {}\n(k, q) = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q):\n    query = input()\n    if query[0] == '!':\n        (cmd, l, r, x) = query.split()\n        l = int(l)\n        r = int(r)\n        x = int(x)\n        start = l\n        end = r\n        startflag = False\n        for i in sorted(rangeData):\n            rangeVal = i\n            if start > rangeVal[1]:\n                continue\n            if end < rangeVal[0]:\n                break\n            startRange = start\n            endRange = end\n            if start >= rangeVal[0] and start <= rangeVal[1]:\n                start = rangeVal[1] + 1\n                continue\n            if end >= rangeVal[0]:\n                endRange = rangeVal[0] - 1\n            if startRange <= endRange:\n                rangeData[startRange, endRange] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if start <= end:\n            rangeData[start, end] = x\n    elif query[0] == '?':\n        (cmd, l, r) = query.split()\n        l = int(l)\n        r = int(r)\n        count = 0\n        for primenum in primes[k]:\n            for currRange in rangeData:\n                if not (r < currRange[0] or l > currRange[1]):\n                    num = rangeData[currRange]\n                    if num % primenum == 0:\n                        count += 1\n                        break\n        print(count)", "import math\n\ndef distinctPrimeFactors(num):\n    primes = set()\n    if num == 2:\n        primes.add(num)\n    sqrt = int(math.sqrt(num))\n    for j in range(2, sqrt + 1):\n        if num % j == 0:\n            primes.add(j)\n            while num % j == 0:\n                num //= j\n    if num > 2:\n        primes.add(num)\n    return primes\nlst = {}\nprimes = {}\nrangeData = {}\n(k, q) = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q):\n    query = input()\n    if query[0] == '!':\n        (cmd, l, r, x) = query.split()\n        l = int(l)\n        r = int(r)\n        x = int(x)\n        start = l\n        end = r\n        startflag = False\n        for i in sorted(rangeData):\n            rangeVal = i\n            if start > rangeVal[1]:\n                continue\n            if end < rangeVal[0]:\n                break\n            startRange = start\n            endRange = end\n            if start >= rangeVal[0] and start <= rangeVal[1]:\n                start = rangeVal[1] + 1\n                continue\n            if end >= rangeVal[0]:\n                endRange = rangeVal[0] - 1\n            if startRange <= endRange:\n                rangeData[startRange, endRange] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if start <= end:\n            rangeData[start, end] = x\n    elif query[0] == '?':\n        (cmd, l, r) = query.split()\n        l = int(l)\n        r = int(r)\n        count = 0\n        for primenum in primes[k]:\n            for currRange in rangeData:\n                if not (r < currRange[0] or l > currRange[1]):\n                    num = rangeData[currRange]\n                    if num % primenum == 0:\n                        count += 1\n                        break\n        print(count)"]