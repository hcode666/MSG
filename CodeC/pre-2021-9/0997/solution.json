["def g(x, k, c):\n    t = int(pow((x + 1) / c, 1 / float(k))) + 2\n    while c * (t - 1) ** k > x:\n        t -= 1\n    return t\nncase = int(input())\nfor testcase in range(ncase):\n    x = int(input())\n    if x == 0:\n        print('0')\n    if x == 1:\n        print('INFINITY')\n    if x > 1:\n        ans = 0\n        for k in range(1, 40):\n            ans += g(x, k, 1) - g(x, k, 2)\n        print(ans)", "def g(x, k, c):\n    t = int(pow((x + 1) / c, 1 / float(k))) + 2\n    while c * (t - 1) ** k > x:\n        t -= 1\n    return t\nncase = int(input())\nfor testcase in range(ncase):\n    x = int(input())\n    if x == 0:\n        print('0')\n    if x == 1:\n        print('INFINITY')\n    if x > 1:\n        ans = 0\n        for k in range(1, 40):\n            ans += g(x, k, 1) - g(x, k, 2)\n        print(ans)", "def g(x, k, c):\n    t = int(pow((x + 1) / c, 1 / float(k))) + 2\n    while c * (t - 1) ** k > x:\n        t -= 1\n    return t\nncase = int(input())\nfor testcase in range(ncase):\n    x = int(input())\n    if x == 0:\n        print('0')\n    if x == 1:\n        print('INFINITY')\n    if x > 1:\n        ans = 0\n        for k in range(1, 40):\n            ans += g(x, k, 1) - g(x, k, 2)\n        print(ans)", "def g(x, k, c):\n    t = int(pow((x + 1) / c, 1 / float(k))) + 2\n    while c * (t - 1) ** k > x:\n        t -= 1\n    return t\nncase = int(input())\nfor testcase in range(ncase):\n    x = int(input())\n    if x == 0:\n        print('0')\n    if x == 1:\n        print('INFINITY')\n    if x > 1:\n        ans = 0\n        for k in range(1, 40):\n            ans += g(x, k, 1) - g(x, k, 2)\n        print(ans)", "def g(x, k, c):\n    t = int(pow((x + 1) / c, 1 / float(k))) + 2\n    while c * (t - 1) ** k > x:\n        t -= 1\n    return t\nncase = int(input())\nfor testcase in range(ncase):\n    x = int(input())\n    if x == 0:\n        print('0')\n    if x == 1:\n        print('INFINITY')\n    if x > 1:\n        ans = 0\n        for k in range(1, 40):\n            ans += g(x, k, 1) - g(x, k, 2)\n        print(ans)", "def g(x, k, c):\n    t = int(pow((x + 1) / c, 1 / float(k))) + 2\n    while c * (t - 1) ** k > x:\n        t -= 1\n    return t\nncase = int(input())\nfor testcase in range(ncase):\n    x = int(input())\n    if x == 0:\n        print('0')\n    if x == 1:\n        print('INFINITY')\n    if x > 1:\n        ans = 0\n        for k in range(1, 40):\n            ans += g(x, k, 1) - g(x, k, 2)\n        print(ans)", "def g(x, k, c):\n    t = int(pow((x + 1) / c, 1 / float(k))) + 2\n    while c * (t - 1) ** k > x:\n        t -= 1\n    return t\nncase = int(input())\nfor testcase in range(ncase):\n    x = int(input())\n    if x == 0:\n        print('0')\n    if x == 1:\n        print('INFINITY')\n    if x > 1:\n        ans = 0\n        for k in range(1, 40):\n            ans += g(x, k, 1) - g(x, k, 2)\n        print(ans)", "def Solve(N):\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 'INFINITY'\n    elif N == 2:\n        return 1\n    elif N == 3:\n        return 2\n    elif N == 4:\n        return 3\n    elif N > 4:\n        count = 0\n        (a, b) = (N, N / 2)\n        i = 1\n        while 1:\n            inf = int(pow(b, 1 / i))\n            if (inf + 1) ** i <= b:\n                inf += 1\n            sup = int(pow(a, 1 / i))\n            if (sup + 1) ** i <= a:\n                sup += 1\n            if inf < sup:\n                count += sup - inf\n            elif sup <= 1:\n                break\n            i += 1\n        return count\nfor _ in range(int(input())):\n    print(Solve(int(input())))", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    if N == 1:\n        print('INFINITY')\n        continue\n    cnt = 0\n    M = N // 2\n    for i in range(1, 50):\n        (n1, m1) = (N ** (1 / i), M ** (1 / i))\n        (n, m) = (int(n1), int(m1))\n        if (n + 1) ** i <= N:\n            n += 1\n        if (m + 1) ** i <= M:\n            m += 1\n        cnt += n - m\n    print(cnt)", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    if N == 1:\n        print('INFINITY')\n        continue\n    cnt = 0\n    M = N // 2\n    for i in range(1, 50):\n        (n1, m1) = (N ** (1 / i), M ** (1 / i))\n        (n, m) = (int(n1), int(m1))\n        while (n + 1) ** i <= N:\n            n += 1\n        while (m + 1) ** i <= M:\n            m += 1\n        cnt += n - m\n    print(cnt)", "from math import ceil, floor\nres = []\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    if N == 1:\n        res.append('INFINITY')\n        continue\n    cnt = 0\n    M = N // 2\n    for i in range(1, 50):\n        (n1, m1) = (N ** (1 / i), M ** (1 / i))\n        (n, m) = (int(n1), int(m1))\n        while (n + 1) ** i <= N:\n            n += 1\n        while (m + 1) ** i <= M:\n            m += 1\n        cnt += n - m\n    res.append(str(cnt))\nprint('\\n'.join(res))", "from math import ceil, floor\nres = []\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    if N == 1:\n        res.append('INFINITY')\n        continue\n    cnt = 0\n    M = (N + 2) // 2\n    for i in range(1, 50):\n        (n1, m1) = (N ** (1 / i), M ** (1 / i))\n        (n, m) = (int(n1), int(m1))\n        while (n + 1) ** i <= N:\n            n += 1\n        while m ** i < M:\n            m += 1\n        cnt += n - m + 1\n    res.append(str(cnt))\nprint('\\n'.join(res))", "from math import log\nfrom math import floor\nfrom math import ceil\n\ndef f1(x, i, n):\n    return pow(x, i) - n\n\ndef f2(x, i, n):\n    return 2 * pow(x, i) - n - 1\n\ndef l_search(start, end, i, n):\n    while start <= end:\n        mid = (start + end) // 2\n        if f2(mid + 1, i, n) >= 0 and f2(mid, i, n) < 0:\n            return mid + 1\n        elif f2(mid, i, n) < 0:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n\ndef r_search(start, end, i, n):\n    while start <= end:\n        mid = (start + end) // 2\n        if f1(mid - 1, i, n) < 0 and f1(mid, i, n) >= 0:\n            return mid\n        elif f1(mid, i, n) < 0:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n\ndef max_val(a, i):\n    return 2 * pow(a, i) - 1\n\ndef min_val(a, i):\n    return pow(a, i)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    if n == 1:\n        print('INFINITY')\n        continue\n    if n == 0:\n        print('0')\n        continue\n    k = floor(log(n, 2)) + 1\n    c = 0\n    up = n\n    for i in range(2, k + 1):\n        s = ceil(pow(n, 1 / (i - 1)))\n        v = ceil(pow((n - 1) / 2, 1 / (i - 1)))\n        up = v + 10\n        if s != v:\n            c += s - v - 1\n        if max_val(s, i - 1) >= n and min_val(s, i - 1) <= n:\n            c += 1\n        if max_val(v, i - 1) >= n and min_val(v, i - 1) <= n and (s != v):\n            c += 1\n    print(c)", "from math import floor, pow, ceil\n\ndef goodpow(n, i):\n    eps = 5e-06\n    x = pow(n, 1 / i)\n    y = ceil(x)\n    if y - x < eps:\n        if pow(y, i) == n:\n            return y\n    y = floor(x)\n    if x - y < eps:\n        if pow(y, i) == n:\n            return y\n    return x\nT = int(input())\nwhile T > 0:\n    T -= 1\n    N = int(input())\n    if N == 1:\n        print('INFINITY')\n        continue\n    ans = floor((N + 1) / 2)\n    if N % 2 == 0:\n        low = ans + 1\n    else:\n        low = ans\n    x = low\n    i = 2\n    while x >= 2:\n        x = goodpow(low, i)\n        y = goodpow(N, i)\n        ans += floor(y) - floor(x)\n        if floor(x) == x:\n            ans += 1\n        i += 1\n    print(ans)", "import math\nimport sys\nsys.setrecursionlimit(10 ** 9)\n\ndef get(n, l):\n    c = int(n ** (1 / l))\n    if c ** l == n:\n        return c\n    elif c ** l < n:\n        if (c + 1) ** l <= n:\n            return c + 1\n        return c\n    return c\n\ndef get2(n, l):\n    k = (n + 1) / 2\n    c = int(k ** (1 / l))\n    while c ** l < k:\n        c += 1\n    return c\n\ndef ans1(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 'INFINITY'\n    else:\n        l = 1\n        a = 0\n        while l <= int(math.log2(n)) + 1:\n            k1 = get2(n, l)\n            k2 = get(n, l)\n            a += max(0, k2 - k1 + 1)\n            l += 1\n        return a\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    print(ans1(n))", "for thisniceloop in range(int(input())):\n    n = int(input())\n    powerflag = 1\n    if n == 0:\n        print(n)\n        continue\n    if n == 1:\n        print('INFINITY')\n        continue\n    outputans = 0\n    while 1 == 1:\n        a = int(pow(n, 1 / powerflag))\n        b = int(pow(n / 2, 1 / powerflag))\n        if pow(a + 1, powerflag) <= n:\n            a += 1\n        if pow(b + 1, powerflag) <= n / 2:\n            b += 1\n        if a == b and b == 1:\n            break\n        outputans += a - b\n        powerflag += 1\n    print(outputans)", "def root(N, k):\n    x = int(N ** (1 / k))\n    while (x + 1) ** k <= N:\n        x += 1\n    while x ** k > N:\n        x -= 1\n    return x\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print('INFINITY')\n    elif n == 2:\n        print('1')\n    elif n == 0:\n        print('0')\n    elif n == 3:\n        print('2')\n    else:\n        nn = n // 2\n        b = 2\n        ans = n - nn + 1\n        while root(nn, b) >= 2:\n            ans += root(n, b) - root(nn, b)\n            b += 1\n        print(ans)", "def ipc(x, t):\n    x = abs(x)\n    return int(round(x ** (1.0 / t))) ** t == x\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print('INFINITY')\n    else:\n        s = 0\n        for t1 in range(1, 40):\n            t = 1 / float(t1)\n            b = n / 2.0\n            a = n\n            if ipc(a, t1):\n                a = int(round(a ** (1.0 / t1)))\n            else:\n                a = int(a ** (1 / t1))\n            if ipc(b, t1):\n                b = int(round(b ** (1.0 / t1)))\n            else:\n                b = int(b ** (1 / t1))\n            s += int(a) - int(b)\n        print(s)", "import math\n\ndef root(x, n):\n    ans = int(x ** (1 / n))\n    if (ans + 1) ** n == x:\n        return ans + 1\n    return ans\n\ndef ans(N):\n    if N == 0 or N == 1:\n        print('0' if N == 0 else 'INFINITY')\n        return\n    res = 0\n    dhigh = int(math.log(N, 2))\n    d = 1\n    while d <= dhigh:\n        blow = root(N / 2, d)\n        bhigh = root(N, d)\n        res += bhigh - blow\n        d += 1\n    print(res)\ntc = int(input())\nfor i in range(tc):\n    n = int(input())\n    ans(n)", "import time\n\ndef changebase(x, b):\n    while x >= b:\n        x //= b\n    return x\nres = []\nT = int(input())\nst = time.time()\nfor t in range(T):\n    N = int(input())\n    if N < 4:\n        if N == 0:\n            res.append('0')\n        elif N == 1:\n            res.append('INFINITY')\n        elif N == 2:\n            res.append('1')\n        elif N == 3:\n            res.append('2')\n        continue\n    cnt = 0\n    M = N // 2\n    i = 1\n    en = time.time()\n    while True:\n        (n, m) = (N ** (1 / i), M ** (1 / i))\n        n = round(n) if abs(n - round(n)) < 1e-10 else int(n)\n        m = round(m) if abs(m - round(m)) < 1e-10 else int(m)\n        if en - st < 9:\n            if m < 219:\n                break\n        elif m < 200:\n            break\n        cnt += n - m\n        i += 1\n    cnt += 1\n    for i in range(3, n + 1):\n        if changebase(N, i) == 1:\n            cnt += 1\n    res.append(str(cnt))\nprint('\\n'.join(res))", "for _ in range(int(input())):\n    (n, k, p, i) = (int(input()), 0, 1, 9000)\n    if n == 1:\n        print('INFINITY')\n        continue\n    while i > 1:\n        (i, j) = (int(pow(n + 0.99, 1 / p)), int(pow(n / 2 + 0.49, 1 / p)))\n        (k, p) = (k + (i - j), p + 1)\n    print(k)", "import math\nnum_tests = int(input())\nfor test_run in range(num_tests):\n    ans = 0\n    u = 40\n    n = int(input())\n    if n == 0:\n        ans1 = 0\n        print(ans1)\n    elif n == 1:\n        ans1 = 'INFINITY'\n        print(ans1)\n    else:\n        for i in range(1, 40):\n            d = ((n + 1) / 2) ** (1.0 / i)\n            d = math.floor(d)\n            if d ** i < (n + 1) / 2:\n                d = d + 1\n            if (d - 1) ** i >= (n + 1) / 2:\n                d = d - 1\n            e = n ** (1.0 / i)\n            e = math.floor(e)\n            if (e - 1) ** i <= n:\n                e = e + 1\n            if e ** i > n:\n                e = e - 1\n            ans = ans + max(0, e - d + 1)\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    if n == 0:\n        print(0)\n        continue\n    if n == 1:\n        print('INFINITY')\n        continue\n    if n == 2:\n        print(1)\n        continue\n    ans = 0\n    h = n / 2\n    for i in range(1, 45):\n        x = int(n ** (1 / i))\n        if x ** i > n:\n            x -= 1\n        elif (x + 1) ** i <= n:\n            x += 1\n        y = int(h ** (1 / i))\n        if y ** i > h:\n            y -= 1\n        elif (y + 1) ** i <= h:\n            y += 1\n        ans += abs(x - y)\n    print(ans)", "from math import *\n\ndef nth_root(val, n):\n    ret = int(val ** (1.0 / n))\n    return ret + 1 if (ret + 1) ** n == val else ret\nfor t in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print('INFINITY')\n        continue\n    ans = (n + 1) // 2\n    for x in range(2, 40):\n        lower = nth_root((n + 1) // 2, x)\n        upper = nth_root(n, x)\n        lowerlower = lower ** x\n        lowerupper = lowerlower * 2\n        upperlower = upper ** x\n        upperupper = upperlower * 2\n        if not lowerlower <= n < lowerupper:\n            lower += 1\n        if not upperlower <= n < upperupper:\n            upper -= 1\n        if upper < lower:\n            continue\n        if upper < 2:\n            break\n        ans += upper - lower + 1\n    print(ans)", "import math\n\ndef nth(n, i):\n    x = n ** (1.0 / i)\n    x = int(x)\n    if (x + 1) ** i <= n:\n        return x + 1\n    return x\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 0:\n        print(0)\n        continue\n    if n == 1:\n        print('INFINITY')\n        continue\n    if n == 2:\n        print(1)\n        continue\n    c = 0\n    m = n // 2\n    hip = int(math.log2(n)) + 1\n    for i in range(1, hip + 1):\n        c += nth(n, i) - nth(m, i)\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    p = 1\n    if n == 0:\n        print(n)\n        continue\n    if n == 1:\n        print('INFINITY')\n        continue\n    myfirstintegerns = 0\n    while 1 == 1:\n        myfirstinteger = int(pow(n, 1 / p))\n        b = int(pow(n / 2, 1 / p))\n        if (myfirstinteger + 1) ** p <= n:\n            myfirstinteger += 1\n        if (b + 1) ** p <= n / 2:\n            b += 1\n        if myfirstinteger == b and b == 1:\n            break\n        myfirstintegerns += myfirstinteger - b\n        p += 1\n    print(myfirstintegerns)", "def f2(N):\n    if N == 1:\n        return 'INFINITY'\n    ans = 0\n    i = 1\n    while True:\n        a1 = int(N ** (1 / i))\n        if (a1 + 1) ** i == N:\n            a1 = a1 + 1\n        a2 = int((N // 2) ** (1 / i))\n        if (a2 + 1) ** i == N // 2:\n            a2 = a2 + 1\n        if a1 <= 1:\n            break\n        ans = ans + a1 - a2\n        i = i + 1\n    return ans\nfor t in range(int(input())):\n    print(f2(int(input())))", "def calc(n):\n    s = 0\n    for i in range(1, int(math.log(n) / math.log(2)) + 1):\n        s += int((n + 0.5) ** (1 / i)) - int(((n + 0.2) / 2) ** (1 / i))\n    return s\n\ndef main(args):\n    T = int(input())\n    while T:\n        T -= 1\n        N = int(input())\n        if N == 1:\n            print('INFINITY')\n        elif N == 0:\n            print(0)\n        else:\n            print(calc(N))\n    return 0\nimport sys\nimport math\nsys.exit(main(sys.argv))", "import math\ncases = int(input())\nfor _ in range(cases):\n    N = int(input())\n    if N == 1:\n        print('INFINITY')\n        continue\n    total = 0\n    d = 1\n    while 1 << d <= N:\n        lo = int(math.pow((N + 1) / 2, 1 / d))\n        while 2 * pow(lo, d) - 1 < N:\n            lo += 1\n        hi = int(math.pow(N, 1 / d))\n        while pow(hi, d) <= N:\n            hi += 1\n        hi -= 1\n        total += max(0, hi - lo + 1)\n        d += 1\n    print(total)", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    if n == 1:\n        print('INFINITY')\n    elif n == 0:\n        print(0)\n    else:\n        i = 1\n        prev_l = 10000000000000.0\n        ans = 0\n        while True:\n            l = math.pow(n / 2, 1 / i)\n            r = math.pow(n, 1 / i)\n            r = round(r) - 1\n            l = round(l) + 1\n            if math.pow(r + 1, i) <= n:\n                r += 1\n            if 2 * math.pow(l - 1, i) > n:\n                l -= 1\n            ans += r - l + 1\n            if l == 2:\n                break\n            prev_l = l\n            i += 1\n        print(ans)\n    t -= 1", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    if n == 1:\n        print('INFINITY')\n    elif n == 0:\n        print(0)\n    else:\n        i = 1\n        prev_l = 10000000000000.0\n        ans = 0\n        while True:\n            l = math.pow(n / 2, 1 / i)\n            r = math.pow(n, 1 / i)\n            r = round(r) - 1\n            l = round(l) + 1\n            if math.pow(r + 1, i) <= n:\n                r += 1\n            if 2 * math.pow(l - 1, i) > n:\n                l -= 1\n            ans += r - l + 1\n            if l <= 2:\n                break\n            prev_l = l\n            i += 1\n        print(ans)\n    t -= 1", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print('INFINITY')\n    else:\n        ans = 0\n        x = len(bin(n)) - 2\n        for j in range(1, x):\n            a = math.floor(pow(n / 2, 1 / j))\n            b = math.floor(pow(n, 1 / j))\n            while 2 * a ** j <= n:\n                a += 1\n            while 2 * (a - 1) ** j > n:\n                a -= 1\n            while b ** j > n:\n                b -= 1\n            while (b + 1) ** j <= n:\n                b += 1\n            if b - a + 1 > 0:\n                ans += b - a + 1\n        print(ans)", "def lb(n, k):\n    res = int((n / 2) ** (1 / k))\n    if (res + 1) ** k * 2 <= n:\n        return res + 1\n    else:\n        return res\n\ndef ub(n, k):\n    res = int(n ** (1 / k))\n    if (res + 1) ** k <= n:\n        return res + 1\n    else:\n        return res\n\ndef test(n, k):\n    while n:\n        res = n % k\n        n //= k\n    return res == 1\n\ndef raw_cnt(n):\n    res = 0\n    for i in range(2, n + 1):\n        if test(n, i):\n            res += 1\n    return res\n\ndef smart_cnt(n):\n    res = 0\n    for i in range(1, 100):\n        (l, u) = (lb(n, i), ub(n, i))\n        res += u - l\n        if u == 1:\n            break\n    return res\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    if n == 1:\n        print('INFINITY')\n    else:\n        print(smart_cnt(n))"]