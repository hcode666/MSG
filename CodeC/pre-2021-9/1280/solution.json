["import math\nimport sys\nfrom bisect import bisect_left, bisect_right\nfrom collections import Counter, defaultdict, deque\nfrom functools import lru_cache, reduce\nfrom heapq import heapify, heappop, heappush\nfrom itertools import chain, combinations, permutations, product\nfrom typing import List, Dict\ninput = sys.stdin.readline\nwrite = sys.stdout.write\n\ndef read_int() -> int:\n    return int(input())\n\ndef read_n_int() -> list:\n    return [int(s) for s in input().split()]\n\ndef list2d(row, col, init=0) -> List[list]:\n    return [[init] * col for _ in range(row)]\nMOD = 10 ** 9 + 7\nMOD = 163577857\nfact = [1] * (10 ** 5 + 1)\nfor i in range(1, len(fact)):\n    fact[i] = i * fact[i - 1] % MOD\nifact = [1] * (10 ** 5 + 1)\nifact[-1] = pow(fact[-1], MOD - 2, MOD)\nfor i in range(1, len(fact) - 1)[::-1]:\n    ifact[i] = ifact[i + 1] * (i + 1) % MOD\n\ndef nCr(n, i):\n    if i < 0 or i > n:\n        return 0\n    return fact[n] * ifact[i] % MOD * ifact[n - i] % MOD\nT = read_int()\nfor _ in range(T):\n    N = read_int()\n    arr = read_n_int()\n    cnt = Counter(arr)\n    zeros = pow(2, cnt[0], MOD)\n    ans = [0] * (2 * N + 1)\n    (one, n_one) = (cnt[1], cnt[-1])\n    for i in range(2 * N + 1):\n        k = i - N\n        ans[i] = nCr(one + n_one, one - k) * zeros % MOD\n    ans[N] -= 1\n    print(*ans, sep=' ')", "N = 100001\nfactorialNumInverse = [None] * (N + 1)\nnaturalNumInverse = [None] * (N + 1)\nfact = [None] * (N + 1)\n\ndef InverseofNumber(p):\n    naturalNumInverse[0] = naturalNumInverse[1] = 1\n    for i in range(2, N + 1, 1):\n        naturalNumInverse[i] = naturalNumInverse[p % i] * (p - int(p / i)) % p\n\ndef InverseofFactorial(p):\n    factorialNumInverse[0] = factorialNumInverse[1] = 1\n    for i in range(2, N + 1, 1):\n        factorialNumInverse[i] = naturalNumInverse[i] * factorialNumInverse[i - 1] % p\n\ndef factorial(p):\n    fact[0] = 1\n    for i in range(1, N + 1):\n        fact[i] = fact[i - 1] * i % p\n\ndef Binomial(N, R, p):\n    ans = fact[N] * factorialNumInverse[R] % p * factorialNumInverse[N - R] % p\n    return ans\nNUM = 163577857\nInverseofNumber(NUM)\nInverseofFactorial(NUM)\nfactorial(NUM)\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    a = 0\n    b = 0\n    c = 0\n    for i in A:\n        if i == 0:\n            c += 1\n        if i == 1:\n            a += 1\n        if i == -1:\n            b += 1\n    ans = [0 for i in range(2 * N + 1)]\n    ans[N] = -1\n    k = pow(2, c, NUM)\n    for i in range(0, a + b + 1):\n        ans[N - b + i] += Binomial(a + b, i, NUM) * k % NUM\n    print(' '.join((str(x) for x in ans)))"]