["from collections import defaultdict\nfrom itertools import product\n\ndef solve(mouse, n, m):\n    shadow = [[0 for i in range(m)] for j in range(n)]\n    for (i, j) in product(range(n), range(m)):\n        if mouse[i][j] == 1:\n            if i > 0:\n                shadow[i - 1][j] += 1\n            if j > 0:\n                shadow[i][j - 1] += 1\n            if i < n - 1:\n                shadow[i + 1][j] += 1\n            if j < m - 1:\n                shadow[i][j + 1] += 1\n    dp = defaultdict(int)\n    dp[0, 0, 0] = dp[0, 0, 1] = shadow[0][0] - mouse[0][0]\n    for i in range(1, m):\n        dp[0, i, 0] = dp[0, i, 1] = shadow[0][i] - mouse[0][i] + dp[0, i - 1, 0]\n    for i in range(1, n):\n        dp[i, 0, 0] = dp[i, 0, 1] = shadow[i][0] - mouse[i][0] + dp[i - 1, 0, 1]\n    for (i, j) in product(range(1, n), range(1, m)):\n        a = shadow[i][j] - mouse[i][j]\n        b = a\n        a += min(dp[i, j - 1, 0], dp[i, j - 1, 1] - mouse[i - 1][j])\n        b += min(dp[i - 1, j, 1], dp[i - 1, j, 0] - mouse[i][j - 1])\n        dp[i, j, 0] = a\n        dp[i, j, 1] = b\n    return min(dp[n - 1, m - 1, 0], dp[n - 1, m - 1, 1]) + mouse[0][0] + mouse[n - 1][m - 1]\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mouse = []\n    for i in range(n):\n        x = input()\n        mouse.append(list(map(int, x)))\n    print(solve(mouse, n, m))", "from collections import defaultdict\nfrom itertools import product\n\ndef solve(mouse, n, m):\n    shadow = [[0 for i in range(m)] for j in range(n)]\n    for (i, j) in product(range(n), range(m)):\n        if mouse[i][j] == 1:\n            if i > 0:\n                shadow[i - 1][j] += 1\n            if j > 0:\n                shadow[i][j - 1] += 1\n            if i < n - 1:\n                shadow[i + 1][j] += 1\n            if j < m - 1:\n                shadow[i][j + 1] += 1\n    dp = defaultdict(int)\n    dp[0, 0, 0] = dp[0, 0, 1] = shadow[0][0] - mouse[0][0]\n    for i in range(1, m):\n        dp[0, i, 0] = dp[0, i, 1] = shadow[0][i] - mouse[0][i] + dp[0, i - 1, 0]\n    for i in range(1, n):\n        dp[i, 0, 0] = dp[i, 0, 1] = shadow[i][0] - mouse[i][0] + dp[i - 1, 0, 1]\n    for (i, j) in product(range(1, n), range(1, m)):\n        a = shadow[i][j] - mouse[i][j]\n        b = a\n        a += min(dp[i, j - 1, 0], dp[i, j - 1, 1] - mouse[i - 1][j])\n        b += min(dp[i - 1, j, 1], dp[i - 1, j, 0] - mouse[i][j - 1])\n        dp[i, j, 0] = a\n        dp[i, j, 1] = b\n    return min(dp[n - 1, m - 1, 0], dp[n - 1, m - 1, 1]) + mouse[0][0] + mouse[n - 1][m - 1]\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mouse = []\n    for i in range(n):\n        x = input()\n        mouse.append(list(map(int, x)))\n    print(solve(mouse, n, m))", "from collections import defaultdict\nfrom itertools import product\n\ndef solve(mouse, n, m):\n    shadow = [[0 for i in range(m)] for j in range(n)]\n    for (i, j) in product(range(n), range(m)):\n        if mouse[i][j] == 1:\n            if i > 0:\n                shadow[i - 1][j] += 1\n            if j > 0:\n                shadow[i][j - 1] += 1\n            if i < n - 1:\n                shadow[i + 1][j] += 1\n            if j < m - 1:\n                shadow[i][j + 1] += 1\n    dp = defaultdict(int)\n    dp[0, 0, 0] = dp[0, 0, 1] = shadow[0][0] - mouse[0][0]\n    for i in range(1, m):\n        dp[0, i, 0] = dp[0, i, 1] = shadow[0][i] - mouse[0][i] + dp[0, i - 1, 0]\n    for i in range(1, n):\n        dp[i, 0, 0] = dp[i, 0, 1] = shadow[i][0] - mouse[i][0] + dp[i - 1, 0, 1]\n    for (i, j) in product(range(1, n), range(1, m)):\n        a = shadow[i][j] - mouse[i][j]\n        b = a\n        a += min(dp[i, j - 1, 0], dp[i, j - 1, 1] - mouse[i - 1][j])\n        b += min(dp[i - 1, j, 1], dp[i - 1, j, 0] - mouse[i][j - 1])\n        dp[i, j, 0] = a\n        dp[i, j, 1] = b\n    return min(dp[n - 1, m - 1, 0], dp[n - 1, m - 1, 1]) + mouse[0][0] + mouse[n - 1][m - 1]\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mouse = []\n    for i in range(n):\n        x = input()\n        mouse.append(list(map(int, x)))\n    print(solve(mouse, n, m))", "from collections import defaultdict\nfrom itertools import product\n\ndef solve(mouse, n, m):\n    shadow = [[0 for i in range(m)] for j in range(n)]\n    for (i, j) in product(range(n), range(m)):\n        if mouse[i][j] == 1:\n            if i > 0:\n                shadow[i - 1][j] += 1\n            if j > 0:\n                shadow[i][j - 1] += 1\n            if i < n - 1:\n                shadow[i + 1][j] += 1\n            if j < m - 1:\n                shadow[i][j + 1] += 1\n    dp = defaultdict(int)\n    dp[0, 0, 0] = dp[0, 0, 1] = shadow[0][0] - mouse[0][0]\n    for i in range(1, m):\n        dp[0, i, 0] = dp[0, i, 1] = shadow[0][i] - mouse[0][i] + dp[0, i - 1, 0]\n    for i in range(1, n):\n        dp[i, 0, 0] = dp[i, 0, 1] = shadow[i][0] - mouse[i][0] + dp[i - 1, 0, 1]\n    for (i, j) in product(range(1, n), range(1, m)):\n        a = shadow[i][j] - mouse[i][j]\n        b = a\n        a += min(dp[i, j - 1, 0], dp[i, j - 1, 1] - mouse[i - 1][j])\n        b += min(dp[i - 1, j, 1], dp[i - 1, j, 0] - mouse[i][j - 1])\n        dp[i, j, 0] = a\n        dp[i, j, 1] = b\n    return min(dp[n - 1, m - 1, 0], dp[n - 1, m - 1, 1]) + mouse[0][0] + mouse[n - 1][m - 1]\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mouse = []\n    for i in range(n):\n        x = input()\n        mouse.append(list(map(int, x)))\n    print(solve(mouse, n, m))", "from collections import defaultdict\nfrom itertools import product\n\ndef solve(mouse, n, m):\n    shadow = [[0 for i in range(m)] for j in range(n)]\n    for (i, j) in product(range(n), range(m)):\n        if mouse[i][j] == 1:\n            if i > 0:\n                shadow[i - 1][j] += 1\n            if j > 0:\n                shadow[i][j - 1] += 1\n            if i < n - 1:\n                shadow[i + 1][j] += 1\n            if j < m - 1:\n                shadow[i][j + 1] += 1\n    dp = defaultdict(int)\n    dp[0, 0, 0] = dp[0, 0, 1] = shadow[0][0] - mouse[0][0]\n    for i in range(1, m):\n        dp[0, i, 0] = dp[0, i, 1] = shadow[0][i] - mouse[0][i] + dp[0, i - 1, 0]\n    for i in range(1, n):\n        dp[i, 0, 0] = dp[i, 0, 1] = shadow[i][0] - mouse[i][0] + dp[i - 1, 0, 1]\n    for (i, j) in product(range(1, n), range(1, m)):\n        a = shadow[i][j] - mouse[i][j]\n        b = a\n        a += min(dp[i, j - 1, 0], dp[i, j - 1, 1] - mouse[i - 1][j])\n        b += min(dp[i - 1, j, 1], dp[i - 1, j, 0] - mouse[i][j - 1])\n        dp[i, j, 0] = a\n        dp[i, j, 1] = b\n    return min(dp[n - 1, m - 1, 0], dp[n - 1, m - 1, 1]) + mouse[0][0] + mouse[n - 1][m - 1]\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mouse = []\n    for i in range(n):\n        x = input()\n        mouse.append(list(map(int, x)))\n    print(solve(mouse, n, m))", "from collections import defaultdict\nfrom itertools import product\n\ndef solve(mouse, n, m):\n    shadow = [[0 for i in range(m)] for j in range(n)]\n    for (i, j) in product(range(n), range(m)):\n        if mouse[i][j] == 1:\n            if i > 0:\n                shadow[i - 1][j] += 1\n            if j > 0:\n                shadow[i][j - 1] += 1\n            if i < n - 1:\n                shadow[i + 1][j] += 1\n            if j < m - 1:\n                shadow[i][j + 1] += 1\n    dp = defaultdict(int)\n    dp[0, 0, 0] = dp[0, 0, 1] = shadow[0][0] - mouse[0][0]\n    for i in range(1, m):\n        dp[0, i, 0] = dp[0, i, 1] = shadow[0][i] - mouse[0][i] + dp[0, i - 1, 0]\n    for i in range(1, n):\n        dp[i, 0, 0] = dp[i, 0, 1] = shadow[i][0] - mouse[i][0] + dp[i - 1, 0, 1]\n    for (i, j) in product(range(1, n), range(1, m)):\n        a = shadow[i][j] - mouse[i][j]\n        b = a\n        a += min(dp[i, j - 1, 0], dp[i, j - 1, 1] - mouse[i - 1][j])\n        b += min(dp[i - 1, j, 1], dp[i - 1, j, 0] - mouse[i][j - 1])\n        dp[i, j, 0] = a\n        dp[i, j, 1] = b\n    return min(dp[n - 1, m - 1, 0], dp[n - 1, m - 1, 1]) + mouse[0][0] + mouse[n - 1][m - 1]\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mouse = []\n    for i in range(n):\n        x = input()\n        mouse.append(list(map(int, x)))\n    print(solve(mouse, n, m))", "def solve(game_map, rows, columns):\n    INF = rows * columns\n    dp = [[[INF for _ in range(2)] for _ in range(columns)] for _ in range(rows)]\n    for r in range(rows):\n        for c in range(columns):\n            v = game_map[r + 1][c] if 0 <= r + 1 < rows else 0\n            v += game_map[r][c + 1] if 0 <= c + 1 < columns else 0\n            if r == 0 and c == 0:\n                v += game_map[0][0]\n            if 0 <= r - 1 < rows and 0 <= c - 1 < columns:\n                dp[r][c][0] = v + min(dp[r][c - 1][0] + game_map[r - 1][c], dp[r][c - 1][1])\n                dp[r][c][1] = v + min(dp[r - 1][c][0], dp[r - 1][c][1] + game_map[r][c - 1])\n            elif 0 <= r - 1 < rows:\n                dp[r][c][0] = v + min(dp[r - 1][c][0], dp[r - 1][c][1])\n                dp[r][c][1] = v + min(dp[r - 1][c][0], dp[r - 1][c][1])\n            elif 0 <= c - 1 < columns:\n                dp[r][c][0] = v + min(dp[r][c - 1][0], dp[r][c - 1][1])\n                dp[r][c][1] = v + min(dp[r][c - 1][0], dp[r][c - 1][1])\n            else:\n                dp[r][c][0] = dp[r][c][1] = v\n    return min(dp[rows - 1][columns - 1][0], dp[rows - 1][columns - 1][1])\nt = int(input())\nfor _ in range(t):\n    (rows, columns) = (int(x) for x in input().split())\n    game_map = []\n    for _ in range(rows):\n        game_map.append([int(x) for x in input()])\n    print(solve(game_map, rows, columns))"]