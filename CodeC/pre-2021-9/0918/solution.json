["t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    ans = 's'\n    for i in range(n):\n        chr = s[i]\n        str = s[:i] + s[i + 1:]\n        for j in range(n):\n            ans = min(ans, str[:j] + chr + str[j:])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    ans = 's'\n    for i in range(n):\n        chr = s[i]\n        str = s[:i] + s[i + 1:]\n        for j in range(n):\n            ans = min(ans, str[:j] + chr + str[j:])\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    ans = 's'\n    for j in range(n):\n        c = s[j]\n        k = s[:j] + s[j + 1:]\n        for z in range(n):\n            ans = min(ans, k[:z] + c + k[z:])\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input().upper()\n    ans = 's'\n    for j in range(n):\n        c = s[j]\n        k = s[:j] + s[j + 1:]\n        for z in range(n):\n            ans = min(ans, k[:z] + c + k[z:])\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    ans = 's'\n    for j in range(n):\n        c = s[j]\n        k = s[:j] + s[j + 1:]\n        for z in range(n):\n            ans = min(ans, k[:z] + c + k[z:])\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    ans = 's'\n    for j in range(n):\n        c = s[j]\n        k = s[:j] + s[j + 1:]\n        for z in range(n):\n            ans = min(ans, k[:z] + c + k[z:])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    ans = 's'\n    for i in range(n):\n        chr = s[i]\n        str = s[:i] + s[i + 1:]\n        for j in range(n):\n            ans = min(ans, str[:j] + chr + str[j:])\n    print(ans)", "def rightShift(s, i, j):\n    s = list(s)\n    while j > i:\n        (s[j], s[j - 1]) = (s[j - 1], s[j])\n        j -= 1\n    return ''.join(s)\n\ndef leftShift(s, i, j):\n    s = list(s)\n    while j > i:\n        (s[i], s[i + 1]) = (s[i + 1], s[i])\n        i += 1\n    return ''.join(s)\n\ndef solution():\n    N = int(input())\n    S = input()\n    ans = S\n    for i in range(N):\n        for j in range(i + 1, N):\n            ls = leftShift(S, i, j)\n            rs = rightShift(S, i, j)\n            ans = min(ans, rs, ls)\n    print(ans)\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def rightShift(s, i, j):\n    s = list(s)\n    while j > i:\n        (s[j], s[j - 1]) = (s[j - 1], s[j])\n        j -= 1\n    return ''.join(s)\n\ndef leftShift(s, i, j):\n    s = list(s)\n    while j > i:\n        (s[i], s[i + 1]) = (s[i + 1], s[i])\n        i += 1\n    return ''.join(s)\n\ndef solution():\n    N = int(input())\n    S = input()\n    ans = S\n    for i in range(N):\n        for j in range(i + 1, N):\n            ls = leftShift(S, i, j)\n            rs = rightShift(S, i, j)\n            ans = min(ans, rs, ls)\n    print(ans)\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def rightShift(s, i, j):\n    s = list(s)\n    while j > i:\n        (s[j], s[j - 1]) = (s[j - 1], s[j])\n        j -= 1\n    return ''.join(s)\n\ndef leftShift(s, i, j):\n    s = list(s)\n    while j > i:\n        (s[i], s[i + 1]) = (s[i + 1], s[i])\n        i += 1\n    return ''.join(s)\n\ndef solution():\n    N = int(input())\n    S = input()\n    ans = S\n    for i in range(N):\n        for j in range(i + 1, N):\n            ls = leftShift(S, i, j)\n            rs = rightShift(S, i, j)\n            ans = min(ans, rs, ls)\n    print(ans)\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def rightShift(s, i, j):\n    s = list(s)\n    while j > i:\n        (s[j], s[j - 1]) = (s[j - 1], s[j])\n        j -= 1\n    return ''.join(s)\n\ndef leftShift(s, i, j):\n    s = list(s)\n    while j > i:\n        (s[i], s[i + 1]) = (s[i + 1], s[i])\n        i += 1\n    return ''.join(s)\n\ndef solution():\n    N = int(input())\n    S = input()\n    ans = S\n    for i in range(N):\n        for j in range(i + 1, N):\n            ls = leftShift(S, i, j)\n            rs = rightShift(S, i, j)\n            ans = min(ans, rs, ls)\n    print(ans)\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def rightShift(s, i, j):\n    s = list(s)\n    while j > i:\n        (s[j], s[j - 1]) = (s[j - 1], s[j])\n        j -= 1\n    return ''.join(s)\n\ndef leftShift(s, i, j):\n    s = list(s)\n    while j > i:\n        (s[i], s[i + 1]) = (s[i + 1], s[i])\n        i += 1\n    return ''.join(s)\n\ndef solution():\n    N = int(input())\n    S = input()\n    ans = S\n    for i in range(N):\n        for j in range(N):\n            ls = leftShift(S, i, j)\n            rs = rightShift(S, i, j)\n            ans = min(ans, rs, ls)\n    print(ans)\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def rightShift(s, i, j):\n    s = list(s)\n    while j > i:\n        (s[j], s[j - 1]) = (s[j - 1], s[j])\n        j -= 1\n    return ''.join(s)\n\ndef leftShift(s, i, j):\n    s = list(s)\n    while j > i:\n        (s[i], s[i + 1]) = (s[i + 1], s[i])\n        i += 1\n    return ''.join(s)\n\ndef modify(s, deleteAt, insertAt):\n    if deleteAt < insertAt:\n        s = leftShift(s, deleteAt, insertAt)\n    else:\n        s = rightShift(s, insertAt, deleteAt)\n    return s\n\ndef solution():\n    N = int(input())\n    S = input()\n    ans = S\n    for i in range(N):\n        for j in range(N):\n            res = modify(S, i, j)\n            ans = min(ans, res)\n    print(ans)\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def rightShift(s, i, j):\n    s = list(s)\n    while j > i:\n        (s[j], s[j - 1]) = (s[j - 1], s[j])\n        j -= 1\n    return ''.join(s)\n\ndef leftShift(s, i, j):\n    s = list(s)\n    while j > i:\n        (s[i], s[i + 1]) = (s[i + 1], s[i])\n        i += 1\n    return ''.join(s)\n\ndef modify(s, deleteAt, insertAt):\n    if deleteAt < insertAt:\n        s = leftShift(s, deleteAt, insertAt)\n    else:\n        s = rightShift(s, insertAt, deleteAt)\n    return s\n\ndef solution():\n    N = int(input())\n    S = input()\n    ans = S\n    for i in range(N):\n        for j in range(N):\n            res = modify(S, i, j)\n            ans = min(ans, res)\n    print(ans)\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    s = input().strip()\n    answer = s\n    for i in range(len(s)):\n        c = s[i]\n        string = s[:i] + s[i + 1:]\n        for j in range(len(string) + 1):\n            answer = min(answer, string[:j] + c + string[j:])\n    print(answer)", "def modified_string_BF(test_str):\n    clst = list(test_str)\n    cmin = [max(clst)] * len(clst)\n    for (mx, mch) in enumerate(clst):\n        cref = clst.copy()\n        cref.pop(mx)\n        for np in range(len(clst)):\n            ctst = cref.copy()\n            ctst.insert(np, mch)\n            cmin = min(ctst, cmin)\n    return ''.join(cmin)\n\ndef modified_string(test_str):\n    pc = test_str[0]\n    shift = None\n    for (cx, ch) in enumerate(test_str):\n        if pc > ch:\n            if shift is None or ch <= shift:\n                if shift is None:\n                    bsh = pc\n                    bx = cx - 1\n                shift = ch\n                sx = cx\n        pc = ch\n    if shift is not None:\n        for (cx, ch) in enumerate(test_str):\n            if ch >= shift:\n                shup = test_str[:cx] + shift + test_str[cx:sx] + test_str[sx + 1:]\n                break\n        shbk = test_str[:bx]\n        for (nx, nch) in enumerate(test_str[bx + 1:], bx + 1):\n            if nch <= bsh:\n                shbk += nch\n            else:\n                shbk += bsh + test_str[nx:]\n                break\n        else:\n            shbk += bsh\n        return min(shup, shbk)\n    else:\n        return test_str\nT = int(input())\nfor tx in range(T):\n    N = int(input())\n    S = input().strip()\n    print(modified_string(S))", "def modified_string(test_str):\n    clst = list(test_str)\n    cmin = [max(clst)] * len(clst)\n    for (mx, mch) in enumerate(clst):\n        cref = clst.copy()\n        cref.pop(mx)\n        for np in range(len(clst)):\n            ctst = cref.copy()\n            ctst.insert(np, mch)\n            cmin = min(ctst, cmin)\n    return ''.join(cmin)\nT = int(input())\nfor tx in range(T):\n    N = int(input())\n    S = input().strip()\n    print(modified_string(S))", "for _1 in range(int(input())):\n    n = int(input())\n    s = input().strip()\n    answer = s\n    for i in range(len(s)):\n        c = s[i]\n        string = s[:i] + s[i + 1:]\n        for j in range(len(string) + 1):\n            answer = min(answer, string[:j] + c + string[j:])\n    print(answer)", "def modify(s, i, j):\n    k = s[i]\n    del s[i]\n    s.insert(j, k)\n    return str(s)\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(input())\n    ans = str(s)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                ans = min(ans, modify(s, i, j))\n            k = s[j]\n            del s[j]\n            s.insert(i, k)\n    for i in ans:\n        if ord(i) >= 65 and ord(i) <= 90:\n            print(i, end='')\n    print()", "def Min_str():\n    n = int(input())\n    s = input()\n    temp = s[:]\n    for i in range(n):\n        s1 = [ord(x) for x in s]\n        t = s1[i]\n        del s1[i]\n        j = 0\n        while j < n - 1:\n            if s1[j] > t:\n                s1[j:j] = [t]\n                break\n            j += 1\n        if len(s1) != n:\n            s1 += [t]\n        T = ''.join([chr(x) for x in s1])\n        if T < temp:\n            temp = T\n    print(temp)\nt = int(input())\nfor i in range(t):\n    Min_str()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(input())\n    ans = s\n    for i in range(n):\n        x = s.copy()\n        del x[i]\n        for j in range(n):\n            ans = min(ans, x[:j] + [s[i]] + x[j:])\n    print(''.join(ans))", "for _ in range(int(input())):\n    n = int(input())\n    mini = ['z'] * 100\n    s = list(input().strip())\n    ans = min(mini, s)\n    t = s[:]\n    for i in range(n):\n        curr = s[i]\n        f = 0\n        ind = 0\n        temp = s[i]\n        for j in range(i):\n            if s[j] > curr:\n                s.pop(i)\n                s.insert(j, temp)\n                ans = min(ans, s)\n                break\n        s = t[:]\n    for i in range(n):\n        curr = s[i]\n        f = 0\n        ind = n - 1\n        temp = s[i]\n        for j in range(i + 1, n):\n            if s[j] > curr:\n                s.pop(i)\n                s.insert(j - 1, temp)\n                ans = min(ans, s)\n                break\n        else:\n            s.pop(i)\n            s.insert(n - 1, temp)\n            ans = min(ans, s)\n        s = t[:]\n    print(*ans, sep='')", "t = int(input())\nfor T in range(t):\n    n = int(input())\n    s = input()\n    ans = s\n    (val, val1) = ('', '')\n    for i in range(n):\n        val = s[:i] + s[i + 1:]\n        for j in range(n):\n            val1 = val[:j] + s[i] + val[j:]\n            ans = min(ans, val1)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    l = []\n    for i in range(n):\n        yo = s[:i] + s[i + 1:]\n        for j in range(n):\n            k1 = yo[:j] + s[i] + yo[j:]\n            l.append(k1)\n    l.sort()\n    print(l[0])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    wow = s\n    for i in range(n):\n        now = s[:i] + s[i + 1:]\n        for j in range(n):\n            wow = min(wow, now[:j] + s[i] + now[j:])\n    print(wow)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = s\n    for i in range(n):\n        new_s = s[:i] + s[i + 1:]\n        for j in range(n):\n            ans = min(ans, new_s[:j] + s[i] + new_s[j:])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = s\n    for i in range(n):\n        new_s = s[:i] + s[i + 1:]\n        for j in range(n):\n            ans = min(ans, new_s[:j] + s[i] + new_s[j:])\n    print(ans)", "def compare(s1, s2, n):\n    i = 0\n    while i < n:\n        if s1[i] < s2[i]:\n            return s1\n        elif s2[i] < s1[i]:\n            return s2\n        i += 1\n    return s1\nfor t in range(int(input())):\n    n = int(input())\n    a = input()\n    s = []\n    s1 = []\n    s2 = []\n    temp = []\n    for i in range(n):\n        s.append(a[i])\n        s1.append(a[i])\n        s2.append(a[i])\n        temp.append([a[i], i])\n    temp.sort()\n    for i in range(n):\n        if s[i] == temp[i][0] or s[i] < temp[i][0]:\n            continue\n        elif s[i] > temp[i][0]:\n            index = temp[i][1]\n            j = n - 1\n            while j >= 0:\n                if s[j] == temp[i][0] and j > index:\n                    index = j\n                j -= 1\n            del s1[index]\n            s1.insert(i, temp[i][0])\n            pos = i + 1\n            while pos < n:\n                if s2[pos] <= s[i]:\n                    pos += 1\n                    continue\n                else:\n                    del s2[i]\n                    s2.insert(pos - 1, s[i])\n                    break\n            if pos >= n:\n                del s2[i]\n                s2.insert(n - 1, s[i])\n            break\n    x = ''.join(s1)\n    y = ''.join(s2)\n    ans = compare(x, y, n)\n    print(ans)", "t = int(input())\nfor it in range(t):\n    n = int(input())\n    s1 = input()\n    lowest = s1\n    for j in range(n):\n        jumper = s1[j]\n        s2 = s1[:j] + s1[j + 1:]\n        for i in range(n):\n            s3 = s2[:i] + jumper + s2[i:]\n            if s3 < lowest:\n                lowest = s3\n    print(lowest)", "import sys\n\ndef modify(s, i, j):\n    c = s[i]\n    t = s[:i] + s[i + 1:]\n    ret = t[:j] + c + t[j:]\n    return ret\nt = int(sys.stdin.readline())\nwhile t > 0:\n    t -= 1\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n    m = s\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                m = min(m, modify(s, i, j))\n    print(m)", "def getInput():\n    T = int(input())\n    taille = []\n    chaine = []\n    for i in range(T):\n        taille.append(int(input()))\n        chaine.append(input())\n    return (T, taille, chaine)\n\ndef solve(taille, chaine):\n    solution = chaine\n    for i in range(taille):\n        for j in range(taille):\n            tempChaine = list(chaine)\n            lettre = tempChaine[i]\n            tempChaine.pop(i)\n            tempChaine.insert(j, lettre)\n            if ''.join(tempChaine) < solution:\n                solution = ''.join(tempChaine)\n    return solution\n(T, taille, chaine) = getInput()\nfor a in range(T):\n    print(solve(taille[a], chaine[a]))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = s\n    for i in range(n):\n        for j in range(n):\n            cur = s[:i] + s[i + 1:]\n            cur = cur[:j] + s[i] + cur[j:]\n            ans = min(ans, cur)\n    print(ans)"]