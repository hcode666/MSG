["from collections import defaultdict\n\ndef cal(d):\n    ans = 0\n    for i in d:\n        if d[i]:\n            ans += 2 ** i\n    return ans\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = defaultdict(lambda : 0)\n    for i in l:\n        for j in range(32):\n            b = i >> j & 1\n            if b:\n                d[j] += 1\n    print(cal(d))\n    for i in range(k):\n        (bb, a) = map(int, input().split())\n        for j in range(32):\n            b = l[bb - 1] >> j & 1\n            if b:\n                d[j] -= 1\n        for j in range(32):\n            b = a >> j & 1\n            if b:\n                d[j] += 1\n        l[bb - 1] = a\n        print(cal(d))", "from collections import defaultdict\n\ndef cal(d):\n    ans = 0\n    for i in d:\n        if d[i]:\n            ans += 2 ** i\n    return ans\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = defaultdict(lambda : 0)\n    for i in l:\n        for j in range(32):\n            b = i >> j & 1\n            if b:\n                d[j] += 1\n    print(cal(d))\n    for i in range(k):\n        (bb, a) = map(int, input().split())\n        for j in range(32):\n            b = l[bb - 1] >> j & 1\n            if b:\n                d[j] -= 1\n        for j in range(32):\n            b = a >> j & 1\n            if b:\n                d[j] += 1\n        l[bb - 1] = a\n        print(cal(d))", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = [*map(int, input().split())]\n    ans = 0\n    w = [0] * 32\n    for i in a:\n        ans |= i\n        p = 0\n        while i:\n            w[p] += i & 1\n            i >>= 1\n            p += 1\n    print(ans)\n    for i in range(q):\n        (x, v) = map(int, input().split())\n        j = a[x - 1]\n        a[x - 1] = v\n        p = 0\n        while j or v:\n            w[p] += (v & 1) - (j & 1)\n            j >>= 1\n            v >>= 1\n            p += 1\n        ans = 0\n        for j in range(32):\n            if w[j]:\n                ans += 1 << j\n        print(ans)", "def Build(p, l, r):\n    if l == r:\n        st[p] = x[l]\n        return\n    m = (l + r) // 2\n    Build(2 * p, l, m)\n    Build(2 * p + 1, m + 1, r)\n    st[p] = st[2 * p] | st[2 * p + 1]\n\ndef Update(p, l, r, i):\n    if l == r:\n        st[p] = x[l]\n        return\n    m = (l + r) // 2\n    if i <= m:\n        Update(2 * p, l, m, i)\n    else:\n        Update(2 * p + 1, m + 1, r, i)\n    st[p] = st[2 * p] | st[2 * p + 1]\n\ndef solve():\n    (N, Q) = map(int, input().split())\n    global x, st\n    x = list(map(int, input().split()))\n    st = [0] * (4 * N + 1)\n    Build(1, 0, N - 1)\n    print(st[1])\n    while Q != 0:\n        (i, v) = map(int, input().split())\n        x[i - 1] = v\n        Update(1, 0, N - 1, i - 1)\n        Q -= 1\n        print(st[1])\n\ndef main():\n    T = int(input())\n    while T > 0:\n        solve()\n        T = T - 1\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    L = list(map(int, input().split()))\n    ans = 0\n    A = [0] * 31\n    for i in range(n):\n        ans |= L[i]\n        for j in range(31):\n            if 1 << j & L[i]:\n                A[j] += 1\n    print(ans)\n    for k in range(q):\n        (x, v) = map(int, input().split())\n        for i in range(31):\n            if 1 << i & L[x - 1]:\n                A[i] -= 1\n        for i in range(31):\n            if 1 << i & v:\n                A[i] += 1\n        L[x - 1] = v\n        ans = 0\n        for i in range(31):\n            if A[i]:\n                ans += 1 << i\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    L = list(map(int, input().split()))\n    ans = 0\n    A = [0] * 31\n    for i in range(n):\n        ans |= L[i]\n        for j in range(31):\n            if 1 << j & L[i]:\n                A[j] += 1\n    print(ans)\n    for k in range(q):\n        (x, v) = map(int, input().split())\n        for i in range(31):\n            if 1 << i & L[x - 1]:\n                A[i] -= 1\n        for i in range(31):\n            if 1 << i & v:\n                A[i] += 1\n        L[x - 1] = v\n        ans = 0\n        for i in range(31):\n            if A[i]:\n                ans += 1 << i\n        print(ans)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    ip = input().split()\n    (n, q) = [int(i) for i in ip]\n    ip = input().split()\n    a = [int(i) for i in ip]\n    tab = [0 for i in range(31)]\n    ores = 0\n    for i in a:\n        ores = ores | i\n        operand = 1\n        for j in range(31):\n            if i & operand == operand:\n                tab[j] += 1\n            operand = operand << 1\n    print(ores)\n    for i in range(q):\n        ip = input().split()\n        (x, v) = [int(j) for j in ip]\n        x -= 1\n        operand = 1\n        ans = 0\n        for j in range(31):\n            if a[x] & operand == operand:\n                tab[j] -= 1\n            if v & operand == operand:\n                tab[j] += 1\n            if tab[j] >= 1:\n                ans = ans | operand\n            operand = operand << 1\n        a[x] = v\n        print(ans)", "def calculate(b):\n    ans = 0\n    for j in range(0, 32, 1):\n        if b[j] >= 1:\n            ans = ans | 1 << j\n    return ans\nT = int(input())\nfor tc in range(0, T):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().strip().split()))[:n]\n    b = []\n    for i in range(0, 32, 1):\n        b.append(0)\n    for i in range(0, n, 1):\n        for j in range(0, 32, 1):\n            if a[i] >> j & 1 == 1:\n                b[j] += 1\n    ans = calculate(b)\n    print(ans)\n    while q > 0:\n        (x, v) = map(int, input().split())\n        for j in range(0, 32, 1):\n            if a[x - 1] >> j & 1 == 1:\n                b[j] -= 1\n            if v >> j & 1 == 1:\n                b[j] += 1\n        a[x - 1] = v\n        ans = calculate(b)\n        print(ans)\n        q -= 1", "T = int(input())\n\ndef editt(x, ext):\n    base = 1\n    for i in range(32):\n        if x & base:\n            freq[i] += ext\n        base *= 2\n\ndef cal():\n    ans = 0\n    base = 1\n    for i in range(32):\n        if freq[i] > 0:\n            ans += base\n        base *= 2\n    return ans\nwhile T > 0:\n    T -= 1\n    (N, Q) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    freq = [0] * 32\n    for i in lst:\n        editt(i, 1)\n    print(cal())\n    while Q > 0:\n        Q -= 1\n        (x, v) = map(int, input().split())\n        editt(lst[x - 1], -1)\n        editt(v, 1)\n        lst[x - 1] = v\n        print(cal())", "def find(l):\n    summ = 0\n    for i in range(50):\n        summ += 2 ** i * min(1, l[i])\n    return summ\nfor _ in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    arr = [0 for i in range(50)]\n    for x in l:\n        i = 0\n        while x != 0:\n            arr[i] += x & 1\n            x = x >> 1\n            i += 1\n    print(find(arr))\n    for qq in range(q):\n        (ind, val) = list(map(int, input().split()))\n        x = l[ind - 1]\n        i = 0\n        while x != 0:\n            arr[i] -= x & 1\n            x = x >> 1\n            i += 1\n        i = 0\n        x = val\n        while x != 0:\n            arr[i] += x & 1\n            x = x >> 1\n            i += 1\n        l[ind - 1] = val\n        print(find(arr))", "T = int(input())\nfor i in range(T):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = len(bin(max(a))) - 2\n    r = [0] * 31\n    for i in a:\n        s = i\n        j = 0\n        while s:\n            r[j] += s & 1\n            s >>= 1\n            j += 1\n    ans = ''\n    for i in r:\n        if i > 0:\n            ans = '1' + ans\n        else:\n            ans = '0' + ans\n    print(int(ans, 2))\n    for i in range(q):\n        (x, v) = map(int, input().split())\n        j = 0\n        w = a[x - 1]\n        while w:\n            r[j] -= w & 1\n            w >>= 1\n            j += 1\n        a[x - 1] = v\n        j = 0\n        while v:\n            r[j] += v & 1\n            v >>= 1\n            j += 1\n        ans = ''\n        for i in r:\n            if i > 0:\n                ans = '1' + ans\n            else:\n                ans = '0' + ans\n        print(int(ans, 2))", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = len(bin(max(a))) - 2\n    r = [0] * 31\n    for i in a:\n        s = i\n        j = 0\n        while s:\n            r[j] += s & 1\n            s >>= 1\n            j += 1\n    ans = ''\n    for i in r:\n        if i > 0:\n            ans = '1' + ans\n        else:\n            ans = '0' + ans\n    print(int(ans, 2))\n    for i in range(q):\n        (x, v) = map(int, input().split())\n        j = 0\n        w = a[x - 1]\n        while w:\n            r[j] -= w & 1\n            w >>= 1\n            j += 1\n        a[x - 1] = v\n        j = 0\n        while v:\n            r[j] += v & 1\n            v >>= 1\n            j += 1\n        ans = ''\n        for i in r:\n            if i > 0:\n                ans = '1' + ans\n            else:\n                ans = '0' + ans\n        print(int(ans, 2))", "for t in range(int(input())):\n    (n, q) = tuple(map(int, input().strip().split()))\n    a = list(map(int, input().strip().split()))\n    dp = [0 for i in range(31)]\n    ans = 0\n    for v in a:\n        b = 1\n        for i in range(31):\n            if b & v:\n                dp[i] += 1\n            b <<= 1\n        ans |= v\n    print(ans)\n    for i in range(q):\n        (x, v) = tuple(map(int, input().strip().split()))\n        c = a[x - 1] ^ v\n        b = 1\n        for i in range(31):\n            if c & b:\n                if b & v:\n                    ans |= b\n                    dp[i] += 1\n                else:\n                    dp[i] -= 1\n                    if dp[i] == 0:\n                        ans -= b\n            b <<= 1\n        a[x - 1] = v\n        print(ans)", "for _ in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    l = [0] * 32\n    for i in range(n):\n        for j in range(32):\n            if 1 << j & a[i]:\n                l[31 - j] += 1\n    res = int(''.join((str(1 if i > 0 else 0) for i in l)), 2)\n    print(res)\n    for _ in range(q):\n        (ind, v) = list(map(int, input().split()))\n        for j in range(32):\n            if 1 << j & a[ind - 1]:\n                l[31 - j] -= 1\n            if 1 << j & v:\n                l[31 - j] += 1\n        a[ind - 1] = v\n        res = int(''.join((str(1 if i > 0 else 0) for i in l)), 2)\n        print(res)", "import numpy as np\nfor i in range(int(input())):\n    (n, q) = map(int, input().split())\n    ai = np.array([[int(ik) for ik in np.binary_repr(int(ii), width=32)] for ii in input().split()])\n    xx = np.sum(ai, axis=0)\n    print(sum((xx != 0) * 2 ** np.array(list(range(32)))[::-1]))\n    for iii in range(q):\n        (x, v) = map(int, input().split())\n        xxa = np.array([int(ik) for ik in np.binary_repr(v, width=32)])\n        xx = xx + xxa - ai[x - 1]\n        ai[x - 1] = xxa\n        print(sum((xx != 0) * 2 ** np.array(list(range(32)))[::-1]))", "def add(a, b):\n    return a | b\n\nclass SegmentTree:\n\n    def __init__(self, data, default=0, func=max):\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, idx):\n        return self.data[idx + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        start += self._size\n        stop += self._size\n        res_left = res_right = self._default\n        while start < stop:\n            if start & 1:\n                res_left = self._func(res_left, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res_right = self._func(self.data[stop], res_right)\n            start >>= 1\n            stop >>= 1\n        return self._func(res_left, res_right)\n\n    def __repr__(self):\n        return 'SegmentTree({0})'.format(self.data)\nfor i in range(int(input())):\n    (n, m) = map(int, input().strip().split())\n    lst = list(map(int, input().strip().split()))\n    st = SegmentTree(lst, func=add)\n    print(st.query(0, n))\n    for i in range(m):\n        (ind, val) = map(int, input().strip().split())\n        st.__setitem__(ind - 1, val)\n        lst[ind - 1] = val\n        print(st.query(0, n))", "from sys import stdin\nip = stdin.readline\nfor _ in range(int(ip())):\n    (n, q) = map(int, ip().split())\n    a = list(map(int, ip().split()))\n    tobin = lambda x: bin(x).replace('0b', '')[::-1]\n    bit = [0] * 31\n    for v in a:\n        binary = tobin(v)\n        for (i, binval) in enumerate(binary):\n            bit[i] += int(binval)\n\n    def ans():\n        f = 1\n        res = 0\n        for i in range(31):\n            if bit[i]:\n                res += f\n            f *= 2\n        return res\n    print(ans())\n    for _ in range(q):\n        (x, v) = map(int, ip().split())\n        x -= 1\n        old = tobin(a[x])\n        a[x] = v\n        for (i, binval) in enumerate(old):\n            bit[i] -= int(binval)\n        new = tobin(v)\n        for (i, val) in enumerate(new):\n            bit[i] += int(val)\n        print(ans())", "def increment(bin_arr, v):\n    rev_bin = bin(v)[:1:-1]\n    for (i, e) in enumerate(rev_bin):\n        bin_arr[i] += int(e)\n\ndef decrement(bin_arr, v):\n    rev_bin = bin(v)[:1:-1]\n    for (i, e) in enumerate(rev_bin):\n        bin_arr[i] -= int(e)\n\ndef get_int(bin_arr):\n    bin_str = '0b' + ''.join(['1' if x > 0 else '0' for x in bin_arr])[::-1]\n    return int(bin_str, 2)\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    bin_arr = [0] * 32\n    for v in arr:\n        increment(bin_arr, v)\n    print(get_int(bin_arr))\n    for i in range(q):\n        (x, v) = map(int, input().split())\n        decrement(bin_arr, arr[x - 1])\n        increment(bin_arr, v)\n        arr[x - 1] = v\n        print(get_int(bin_arr))", "for t in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    store = {}\n    for i in a:\n        x = i\n        p = 0\n        while x:\n            if x % 2 == 1:\n                if p not in store:\n                    store[p] = 0\n                store[p] += 1\n            p += 1\n            x //= 2\n    ans = 0\n    for i in store:\n        ans += pow(2, i)\n    print(ans)\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        z = x\n        x = a[x - 1]\n        a[z - 1] = y\n        p = 0\n        while x:\n            if x % 2 == 1:\n                store[p] -= 1\n                if store[p] == 0:\n                    store.pop(p)\n                    ans -= pow(2, p)\n            x //= 2\n            p += 1\n        p = 0\n        while y:\n            if y % 2 == 1:\n                if p not in store:\n                    store[p] = 0\n                    ans += pow(2, p)\n                store[p] += 1\n            p += 1\n            y //= 2\n        print(ans)", "def calc(setbits):\n    res = 0\n    for i in range(32):\n        if setbits[i] > 0:\n            res += 2 ** i\n    return res\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    setbits = [0] * 32\n    for i in a:\n        k = 0\n        while i != 0:\n            setbits[k] += 1 if i & 1 == 1 else 0\n            k += 1\n            i = i >> 1\n    print(calc(setbits))\n    for i in range(q):\n        (x, v) = map(int, input().split())\n        k = 0\n        old = a[x - 1]\n        a[x - 1] = v\n        while old != 0:\n            setbits[k] -= 1 if old & 1 == 1 else 0\n            old = old >> 1\n            k += 1\n        k = 0\n        while v != 0:\n            setbits[k] += 1 if v & 1 == 1 else 0\n            v = v >> 1\n            k += 1\n        print(calc(setbits))", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    ele = list(map(int, input().split()))\n    arr = [0] * 31\n    ans = 0\n    for i in range(n):\n        ans |= ele[i]\n        for j in range(31):\n            if 1 << j & ele[i]:\n                arr[j] += 1\n    print(ans)\n    for _ in range(q):\n        (x, v) = map(int, input().split())\n        for i in range(31):\n            if 1 << i & ele[x - 1]:\n                arr[i] -= 1\n        for i in range(31):\n            if 1 << i & v:\n                arr[i] += 1\n        ele[x - 1] = v\n        ans = 0\n        for i in range(31):\n            if arr[i] > 0:\n                ans += 1 << i\n        print(ans)", "def binary(b):\n    s = ''\n    for i in b:\n        if i > 0:\n            s += '1'\n        else:\n            s += '0'\n    return int(s[::-1], 2)\ntry:\n    t = int(input())\n    while t:\n        t -= 1\n        (n, q) = map(int, input().split())\n        lis = list(map(int, input().split()))\n        bits = [0] * 35\n        for i in lis:\n            index = 0\n            while i:\n                bits[index] += i & 1\n                index += 1\n                i >>= 1\n        print(binary(bits))\n        for k in range(q):\n            (x, v) = map(int, input().split())\n            n = lis[x - 1]\n            index = 0\n            while n:\n                bits[index] -= n & 1\n                index += 1\n                n >>= 1\n            lis[x - 1] = v\n            index = 0\n            while v:\n                bits[index] += v & 1\n                index += 1\n                v >>= 1\n            print(binary(bits))\nexcept:\n    pass", "def binary(bits):\n    b = [1 if i else 0 for i in bits]\n    return int(''.join([str(i) for i in b[::-1]]), 2)\ntry:\n    t = int(input())\n    while t:\n        t -= 1\n        (n, q) = map(int, input().split())\n        lis = list(map(int, input().split()))\n        bits = [0] * 35\n        for i in lis:\n            index = 0\n            while i:\n                bits[index] += i & 1\n                index += 1\n                i >>= 1\n        print(binary(bits))\n        for k in range(q):\n            (x, v) = map(int, input().split())\n            n = lis[x - 1]\n            index = 0\n            while n:\n                bits[index] -= n & 1\n                index += 1\n                n >>= 1\n            lis[x - 1] = v\n            index = 0\n            while v:\n                bits[index] += v & 1\n                index += 1\n                v >>= 1\n            print(binary(bits))\nexcept:\n    pass", "def f(A):\n    s = [0] * 32\n    for i in range(31):\n        for j in range(len(A)):\n            if A[j] & 1 << i > 0:\n                s[i] += 1\n    return s\n\ndef sm(s):\n    x = 0\n    mul = 1\n    for i in range(31):\n        x += mul if s[i] else 0\n        mul = mul << 1\n    print(x)\nfor i in range(int(input())):\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = f(l)\n    sm(s)\n    for a in range(q):\n        (r, r2) = map(int, input().split())\n        r1 = l[r - 1]\n        for i in range(31):\n            if r1 & 1 << i:\n                s[i] -= 1\n            if r2 & 1 << i:\n                s[i] += 1\n        l[r - 1] = r2\n        sm(s)", "def find(l):\n    summ = 0\n    for i in range(50):\n        summ += 2 ** i * min(1, l[i])\n    return summ\nfor _ in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    arr = [0 for i in range(50)]\n    for x in l:\n        i = 0\n        while x != 0:\n            arr[i] += x & 1\n            x = x >> 1\n            i += 1\n    print(find(arr))\n    for qq in range(q):\n        (ind, val) = list(map(int, input().split()))\n        x = l[ind - 1]\n        i = 0\n        while x != 0:\n            arr[i] -= x & 1\n            x = x >> 1\n            i += 1\n        i = 0\n        x = val\n        while x != 0:\n            arr[i] += x & 1\n            x = x >> 1\n            i += 1\n        l[ind - 1] = val\n        print(find(arr))", "def find(l):\n    summ = 0\n    for i in range(50):\n        summ += 2 ** i * min(1, l[i])\n    return summ\nfor _ in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    arr = [0 for i in range(50)]\n    for x in l:\n        i = 0\n        while x != 0:\n            arr[i] += x & 1\n            x = x >> 1\n            i += 1\n    print(find(arr))\n    for qq in range(q):\n        (ind, val) = list(map(int, input().split()))\n        x = l[ind - 1]\n        i = 0\n        while x != 0:\n            arr[i] -= x & 1\n            x = x >> 1\n            i += 1\n        i = 0\n        x = val\n        while x != 0:\n            arr[i] += x & 1\n            x = x >> 1\n            i += 1\n        l[ind - 1] = val\n        print(find(arr))", "def find(l):\n    summ = 0\n    for i in range(50):\n        summ += 2 ** i * min(1, l[i])\n    return summ\nfor _ in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    arr = [0 for i in range(50)]\n    for x in l:\n        i = 0\n        while x != 0:\n            arr[i] += x & 1\n            x = x >> 1\n            i += 1\n    print(find(arr))\n    for qq in range(q):\n        (ind, val) = list(map(int, input().split()))\n        x = l[ind - 1]\n        i = 0\n        while x != 0:\n            arr[i] -= x & 1\n            x = x >> 1\n            i += 1\n        i = 0\n        x = val\n        while x != 0:\n            arr[i] += x & 1\n            x = x >> 1\n            i += 1\n        l[ind - 1] = val\n        print(find(arr))", "import math\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    nos = list(map(int, input().split()))\n    ans = {i: 0 for i in range(32)}\n    for i in range(len(nos)):\n        nos[i] = '{:032b}'.format(nos[i])\n        j = 0\n        for k in range(31, -1, -1):\n            if nos[i][k] == '1':\n                ans[j] += 1\n            j += 1\n    tempans = 0\n    for bit in ans:\n        if ans[bit] > 0:\n            tempans += 2 ** bit\n    print(tempans)\n    for query in range(q):\n        (x, v) = map(int, input().split())\n        x -= 1\n        j = 0\n        for k in range(31, -1, -1):\n            if nos[x][k] == '1':\n                ans[j] -= 1\n            j += 1\n        nos[x] = '{:032b}'.format(v)\n        j = 0\n        for k in range(31, -1, -1):\n            if nos[x][k] == '1':\n                ans[j] += 1\n            j += 1\n        tempans = 0\n        for bit in ans:\n            if ans[bit] >= 1:\n                tempans += 2 ** bit\n        print(tempans)", "for _ in range(int(input())):\n    (n, Q) = map(int, input().split(' '))\n    A = list(map(int, input().split(' ')))\n    D = {}\n    S = 0\n    for a in A:\n        S |= a\n        for (s, i) in enumerate(bin(a)[2:][::-1]):\n            if i == '1':\n                D[s] = D.get(s, 0) + 1\n    print(S)\n    for q in range(Q):\n        (x, v) = map(int, input().split(' '))\n        S |= v\n        for (s, i) in enumerate(bin(v)[2:][::-1]):\n            if i == '1':\n                D[s] = D.get(s, 0) + 1\n        for (s, i) in enumerate(bin(A[x - 1])[2:][::-1]):\n            if i == '1':\n                h = D[s]\n                D[s] = h - 1\n                if h == 1:\n                    S -= 1 << s\n        A[x - 1] = v\n        print(S)", "T = int(input())\nwhile T:\n    T -= 1\n    (N, Q) = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n    freq = [0] * 33\n    for i in A:\n        bit = 0\n        while i >= 1:\n            if i % 2 != 0:\n                freq[bit] += 1\n            i = i // 2\n            bit += 1\n    ors = 0\n    for i in range(0, 33):\n        if freq[i] > 0:\n            ors += 2 ** i\n    print(ors)\n    while Q:\n        Q -= 1\n        (X, V) = [int(x) for x in input().split()]\n        X -= 1\n        bit = 0\n        while A[X] >= 1:\n            if A[X] % 2 != 0:\n                freq[bit] -= 1\n            A[X] = A[X] // 2\n            bit += 1\n        A[X] = V\n        bit = 0\n        while V >= 1:\n            if V % 2 != 0:\n                freq[bit] += 1\n            V = V // 2\n            bit += 1\n        ors = 0\n        for i in range(0, len(freq)):\n            if freq[i] > 0:\n                ors += 2 ** i\n        print(ors)", "from itertools import accumulate\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    nums = list(map(lambda x: bin(int(x))[2:].zfill(31), input().split()))\n    queries = [list(map(int, input().split())) for _ in range(q)]\n    count = [0 for _ in range(31)]\n    for num in nums:\n        count = list(map(lambda x: x[1] + int(x[0]), zip(num, count)))\n    print(list(accumulate(map(lambda x: x > 0, count), lambda tot, x: 2 * tot + x))[-1])\n    for query in queries:\n        count = list(map(lambda x: x[1] - int(x[0]), zip(nums[query[0] - 1], count)))\n        nums[query[0] - 1] = bin(query[1])[2:].zfill(31)\n        count = list(map(lambda x: x[1] + int(x[0]), zip(nums[query[0] - 1], count)))\n        print(list(accumulate(map(lambda x: x > 0, count), lambda tot, x: 2 * tot + x))[-1])", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    bit = [0] * 31\n    for num in arr:\n        count = 0\n        while num != 0:\n            bit[count] += 1 if num & 1 == 1 else 0\n            num = num >> 1\n            count += 1\n    ans = 0\n    for i in range(31):\n        if bit[i] > 0:\n            ans += 2 ** i\n    print(ans)\n    for z in range(q):\n        (x, v) = map(int, input().split())\n        old = arr[x - 1]\n        arr[x - 1] = v\n        count = 0\n        while old != 0:\n            bit[count] -= 1 if old & 1 == 1 else 0\n            old = old >> 1\n            count += 1\n        count = 0\n        while v != 0:\n            bit[count] += 1 if v & 1 == 1 else 0\n            v = v >> 1\n            count += 1\n        ans = 0\n        for i in range(31):\n            if bit[i] > 0:\n                ans += 2 ** i\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    bit = [0] * 31\n    for num in arr:\n        count = 0\n        while num != 0:\n            bit[count] += 1 if num & 1 == 1 else 0\n            num = num >> 1\n            count += 1\n    ans = 0\n    for i in range(31):\n        if bit[i] > 0:\n            ans += 2 ** i\n    print(ans)\n    for z in range(q):\n        (x, v) = map(int, input().split())\n        bit_copy = bit[:]\n        old = arr[x - 1]\n        arr[x - 1] = v\n        count = 0\n        while old != 0:\n            bit[count] -= 1 if old & 1 == 1 else 0\n            old = old >> 1\n            count += 1\n        count = 0\n        while v != 0:\n            bit[count] += 1 if v & 1 == 1 else 0\n            v = v >> 1\n            count += 1\n        ans = 0\n        for i in range(31):\n            if bit[i] > 0:\n                ans += 2 ** i\n        print(ans)", "T = int(input())\nfor i in range(T):\n    (N, Q) = map(int, input().split())\n    A = list(map(int, input().split()))\n    ans = [0] * 31\n    for bit in range(31):\n        for i in range(N):\n            if A[i] & 1 << bit:\n                ans[bit] += 1\n    res = 0\n    for bit in range(31):\n        if ans[bit] > 0:\n            res += 2 ** bit\n    print(res)\n    for qr in range(Q):\n        res = 0\n        (X, V) = map(int, input().split())\n        for bit in range(31):\n            if A[X - 1] & 1 << bit:\n                ans[bit] -= 1\n            if V & 1 << bit:\n                ans[bit] += 1\n        A[X - 1] = V\n        for bit in range(31):\n            if ans[bit] > 0:\n                res += 2 ** bit\n        print(res)", "from functools import reduce\nt = int(input())\n\ndef tobinary(num):\n    mul = 1\n    f = 0\n    while num > 0:\n        res = num % 2\n        num = num // 2\n        f = f + mul * res\n        mul = mul * 10\n    return str(f)\n\ndef todecimal(num):\n    res = 0\n    j = 0\n    for i in num:\n        res = res + 2 ** j * int(i)\n        j += 1\n    return res\n\ndef getValue(freq):\n    ans = 0\n    b = 1\n    for i in range(32):\n        if freq[i] >= 1:\n            ans += b\n        b *= 2\n    return ans\nfor z in range(t):\n    (n, m) = list(input().split())\n    n = int(n)\n    m = int(m)\n    l = list(map(int, input().split()))\n    fre = [0] * 32\n    q = []\n    for i in range(m):\n        q.append(list(map(int, input().split())))\n    for i in l:\n        res = tobinary(i)\n        for j in range(len(res) - 1, -1, -1):\n            fre[len(res) - j - 1] = fre[len(res) - j - 1] + int(res[j])\n    print(getValue(fre))\n    for k in q:\n        res = tobinary(l[k[0] - 1])\n        for j in range(len(res) - 1, -1, -1):\n            fre[len(res) - j - 1] = fre[len(res) - j - 1] - int(res[j])\n        res = tobinary(k[1])\n        for j in range(len(res) - 1, -1, -1):\n            fre[len(res) - j - 1] = fre[len(res) - j - 1] + int(res[j])\n        l[k[0] - 1] = k[1]\n        print(getValue(fre))", "from functools import reduce\nt = int(input())\n\ndef tobinary(num):\n    mul = 1\n    f = 0\n    while num > 0:\n        res = num % 2\n        num = num // 2\n        f = f + mul * res\n        mul = mul * 10\n    return str(f)\n\ndef todecimal(num):\n    res = 0\n    j = 0\n    for i in num:\n        res = res + 2 ** j * int(i)\n        j += 1\n    return res\n\ndef getValue(freq):\n    ans = 0\n    b = 1\n    for i in range(32):\n        if freq[i]:\n            ans += b\n        b *= 2\n    return ans\nfor z in range(t):\n    (n, m) = list(input().split())\n    n = int(n)\n    m = int(m)\n    l = list(map(int, input().split()))\n    fre = [0] * 32\n    q = []\n    for i in range(m):\n        q.append(list(map(int, input().split())))\n    for i in l:\n        res = tobinary(i)\n        for j in range(len(res) - 1, -1, -1):\n            fre[len(res) - j - 1] = fre[len(res) - j - 1] + int(res[j])\n    print(getValue(fre))\n    for k in q:\n        res = tobinary(l[k[0] - 1])\n        for j in range(len(res) - 1, -1, -1):\n            fre[len(res) - j - 1] = fre[len(res) - j - 1] - int(res[j])\n        res = tobinary(k[1])\n        for j in range(len(res) - 1, -1, -1):\n            fre[len(res) - j - 1] = fre[len(res) - j - 1] + int(res[j])\n        l[k[0] - 1] = k[1]\n        print(getValue(fre))", "c = int(input())\nwhile c:\n\n    def ans(arra):\n        an = 0\n        for i in range(50):\n            an += 2 ** i * min(arra[i], 1)\n        return an\n    c -= 1\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    arr = [0 for i in range(50)]\n    for j in l:\n        i = 0\n        while j != 0:\n            arr[i] += j & 1\n            j = j >> 1\n            i += 1\n    print(ans(arr))\n    for h in range(q):\n        (pi, np) = map(int, input().split())\n        p = l[pi - 1]\n        l[pi - 1] = np\n        i = 0\n        while p != 0:\n            arr[i] -= p & 1\n            p = p >> 1\n            i += 1\n        i = 0\n        while np != 0:\n            arr[i] += np & 1\n            np = np >> 1\n            i += 1\n        print(ans(arr))", "powers = [1]\nfor i in range(1, 32):\n    powers.append(powers[-1] * 2)\n\ndef decimal(a):\n    ans = 0\n    for i in range(32):\n        ans += powers[i] * (1 if a[i] != 0 else 0)\n    return ans\n\ndef solve():\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0 for i in range(32)]\n    for i in a:\n        c = 0\n        while i != 0:\n            b[c] += i % 2\n            i = i // 2\n            c += 1\n    print(decimal(b))\n    while q != 0:\n        (x, v) = map(int, input().split())\n        actual = a[x - 1]\n        c = 0\n        while actual != 0:\n            b[c] -= actual % 2\n            actual = actual // 2\n            c += 1\n        a[x - 1] = v\n        c = 0\n        while v != 0:\n            b[c] += v % 2\n            v = v // 2\n            c += 1\n        print(decimal(b))\n        q -= 1\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    k = list(map(int, input().split()))\n    bin_arr = [0] * 32\n    for u in k:\n        result = bin(u)[2:]\n        rev = result[::-1]\n        for g in range(len(rev)):\n            if rev[g] == '1':\n                bin_arr[31 - g] += 1\n    s = ''\n    for u in bin_arr:\n        if u != 0:\n            s += '1'\n        else:\n            s += '0'\n    print(int(s, 2))\n    for j in range(q):\n        (x, v) = map(int, input().split())\n        result = bin(k[x - 1])[2:]\n        k[x - 1] = v\n        rev = result[::-1]\n        for g in range(len(result)):\n            if rev[g] == '1':\n                bin_arr[31 - g] -= 1\n        result = bin(v)[2:]\n        rev = result[::-1]\n        for g in range(len(result)):\n            if rev[g] == '1':\n                bin_arr[31 - g] += 1\n        s = ''\n        for g in bin_arr:\n            if g != 0:\n                s += '1'\n            else:\n                s += '0'\n        print(int(s, 2))", "def fxn1(bits, num):\n    for i in range(len(bits) - 1, -1, -1):\n        bits[i] += num & 1\n        num = num >> 1\n    return bits\n\ndef fxn2(bits, num):\n    for i in range(len(bits) - 1, -1, -1):\n        bits[i] -= num & 1\n        num = num >> 1\n    return bits\n\ndef b2d(bits):\n    dec = 0\n    power = 0\n    for i in range(len(bits) - 1, -1, -1):\n        dec += min(1, bits[i]) * 2 ** power\n        power += 1\n    return dec\nt = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    bits = [0] * 31\n    for i in arr:\n        bits = fxn1(bits, i)\n    print(b2d(bits))\n    for j in range(q):\n        (ind, val) = map(int, input().split())\n        bits = fxn2(bits, arr[ind - 1])\n        arr[ind - 1] = val\n        bits = fxn1(bits, val)\n        print(b2d(bits))", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    l = [int(x) for x in input().split()]\n    ans = 0\n    ans = [0] * 32\n    for item in l:\n        result = bin(item)[2:]\n        count = len(result)\n        for i in range(count):\n            if result[i] == '1':\n                ans[count - 1 - i] += 1\n    s = ''\n    for i in ans:\n        if i != 0:\n            s = '1' + s\n        else:\n            s = '0' + s\n    print(int(s, 2))\n    for i in range(q):\n        (index, value) = map(int, input().split())\n        result = l[index - 1]\n        l[index - 1] = value\n        result = bin(result)[2:]\n        count = len(result)\n        for i in range(count):\n            if result[i] == '1':\n                ans[count - 1 - i] -= 1\n        result = bin(value)[2:]\n        count = len(result)\n        for i in range(count):\n            if result[i] == '1':\n                ans[count - 1 - i] += 1\n        s = ''\n        for i in ans:\n            if i != 0:\n                s = '1' + s\n            else:\n                s = '0' + s\n        print(int(s, 2))", "def getFreq(freq, val, z):\n    b = 1\n    for i in range(32):\n        if b & val:\n            freq[i] += z\n        b *= 2\n\ndef getValue(freq):\n    ans = 0\n    b = 1\n    for i in range(32):\n        if freq[i]:\n            ans += b\n        b *= 2\n    return ans\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    freq = [0] * 32\n    for num in a:\n        getFreq(freq, num, 1)\n    print(getValue(freq))\n    for i in range(q):\n        (x, v) = map(int, input().split())\n        getFreq(freq, a[x - 1], -1)\n        getFreq(freq, v, 1)\n        a[x - 1] = v\n        print(getValue(freq))", "t = int(input())\nfor i in range(0, t):\n    arr = list(map(int, input().strip().split()))\n    N = arr[0]\n    Q = arr[1]\n    A = list(map(int, input().strip().split()))\n    freq = [0] * 32\n    for m in range(0, N):\n        st_binary = str(bin(A[m]).replace('0b', ''))\n        st_binary = st_binary[::-1]\n        for n in range(0, len(st_binary)):\n            if st_binary[n] == '1':\n                freq[n] += 1\n    st = ''\n    for m in range(0, 32):\n        if freq[m] == 0:\n            st += '0'\n        else:\n            st += '1'\n    st = st[::-1]\n    no = int(st, 2)\n    print(no)\n    for j in range(0, Q):\n        arr1 = list(map(int, input().strip().split()))\n        X = arr1[0]\n        V = arr1[1]\n        val1 = A[X - 1]\n        val2 = V\n        A[X - 1] = V\n        st_binary_sub = str(bin(val1).replace('0b', ''))\n        st_binary_sub = st_binary_sub[::-1]\n        st_binary_add = str(bin(val2).replace('0b', ''))\n        st_binary_add = st_binary_add[::-1]\n        for k in range(32):\n            if k < len(st_binary_sub) and st_binary_sub[k] == '1':\n                freq[k] -= 1\n            if k < len(st_binary_add) and st_binary_add[k] == '1':\n                freq[k] += 1\n        st = ''\n        for m in range(0, 32):\n            if freq[m] == 0:\n                st += '0'\n            else:\n                st += '1'\n        st = st[::-1]\n        no = int(st, 2)\n        print(no)", "from math import ceil, log2\nfor tc in range(int(input())):\n    (N, Q) = map(int, input().split())\n    A = list(map(int, input().split()))\n    bits = [0] * 31\n    OR = 0\n    for i in A:\n        OR |= i\n        if i != 0:\n            blen = len(bin(i)[2:])\n            for j in range(blen):\n                if i & 1 << j:\n                    bits[30 - j] += 1\n    print(OR)\n    for q in range(Q):\n        QOR = ''\n        (X, V) = map(int, input().split())\n        X -= 1\n        blen = len(bin(A[X])[2:])\n        for j in range(blen):\n            if A[X] & 1 << j:\n                bits[30 - j] -= 1\n        A[X] = V\n        blen = len(bin(A[X])[2:])\n        if A[X] != 0:\n            for j in range(blen):\n                if A[X] & 1 << j:\n                    bits[30 - j] += 1\n        for b in bits:\n            if b > 0:\n                QOR += '1'\n                continue\n            QOR += '0'\n        print(int(QOR, 2))", "t = int(input())\nfor _ in range(0, t):\n    (n, q) = map(int, input().split())\n    list_n = list(map(int, input().split()))\n    bit = [0] * 32\n    for i in range(0, n):\n        for j in range(0, 32):\n            if 1 << j & list_n[i]:\n                bit[j] += 1\n    ans = 0\n    for i in range(0, 32):\n        if bit[i]:\n            ans += 1 << i\n    print(ans)\n    for k in range(0, q):\n        ans = 0\n        (pos, val) = map(int, input().split())\n        for i in range(0, 32):\n            if 1 << i & list_n[pos - 1]:\n                bit[i] -= 1\n        for i in range(0, 32):\n            if 1 << i & val:\n                bit[i] += 1\n        list_n[pos - 1] = val\n        for i in range(0, 32):\n            if bit[i]:\n                ans += 1 << i\n        print(ans)", "import sys\nI = lambda : int(sys.stdin.readline())\nIn = lambda : list(map(int, sys.stdin.readline().split()))\npr = lambda x: sys.stdout.write(str(x) + '\\n')\n\ndef solve():\n    (n, q) = In()\n    a = In()\n    val = [0] * 32\n    for v in a:\n        for i in range(32):\n            c = 1 << i\n            if v & c:\n                val[i] += 1\n                if c > v:\n                    break\n    ans = array_to_int(val)\n    pr(ans)\n    while q:\n        q -= 1\n        (pos, new_val) = In()\n        pos -= 1\n        v = a[pos]\n        a[pos] = new_val\n        for i in range(32):\n            c = 1 << i\n            if v & c:\n                val[i] -= 1\n            if new_val & c:\n                val[i] += 1\n        pr(array_to_int(val))\n\ndef array_to_int(a):\n    b = [1 if i > 0 else 0 for i in a]\n    s = ''.join([str(i) for i in b[::-1]])\n    return int(s, 2)\nfor _ in range(I()):\n    solve()", "import sys\nI = lambda : int(sys.stdin.readline())\nIn = lambda : list(map(int, sys.stdin.readline().split()))\npr = lambda x: sys.stdout.write(str(x) + '\\n')\n\ndef solve():\n    (n, q) = In()\n    a = In()\n    val = [0] * 32\n    for v in a:\n        for i in range(32):\n            c = 1 << i\n            if v & c:\n                val[i] += 1\n                if c > v:\n                    break\n    ans = array_to_int(val)\n    print(ans)\n    while q:\n        q -= 1\n        (pos, new_val) = In()\n        pos -= 1\n        v = a[pos]\n        a[pos] = new_val\n        for i in range(32):\n            c = 1 << i\n            if v & c:\n                val[i] -= 1\n            if new_val & c:\n                val[i] += 1\n        print(array_to_int(val))\n\ndef array_to_int(a):\n    b = [1 if i > 0 else 0 for i in a]\n    s = ''.join([str(i) for i in b[::-1]])\n    return int(s, 2)\nfor _ in range(I()):\n    solve()", "def solve():\n    (n, q) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    val = [0] * 32\n    for v in a:\n        for i in range(32):\n            c = 1 << i\n            if v & c:\n                val[i] += 1\n                if c > v:\n                    break\n    ans = array_to_int(val)\n    print(ans)\n    while q:\n        q -= 1\n        (pos, new_val) = [int(x) for x in input().split()]\n        pos -= 1\n        v = a[pos]\n        a[pos] = new_val\n        for i in range(32):\n            c = 1 << i\n            if v & c:\n                val[i] -= 1\n            if new_val & c:\n                val[i] += 1\n        print(array_to_int(val))\n\ndef array_to_int(a):\n    b = [1 if i > 0 else 0 for i in a]\n    s = ''.join([str(i) for i in b[::-1]])\n    return int(s, 2)\nfor _ in range(int(input())):\n    solve()", "import sys\nI = lambda : int(sys.stdin.readline())\nIn = lambda : list(map(int, sys.stdin.readline().split()))\npr = lambda x: sys.stdout.write(str(x) + '\\n')\n\ndef main():\n    T = I()\n    bits = [1]\n    for i in range(1, 32):\n        bits.append(bits[-1] * 2)\n    for t in range(T):\n        (n, q) = In()\n        A = In()\n        dp = [0] * 32\n        for x in A:\n            j = 0\n            while x > 0:\n                if x & 1 > 0:\n                    dp[j] += 1\n                x >>= 1\n                j += 1\n        ans = 0\n        for i in range(32):\n            if dp[i] > 0:\n                ans += bits[i]\n        pr(ans)\n        for k in range(q):\n            (idx, v) = In()\n            j = 0\n            x = A[idx - 1]\n            while x:\n                if x & 1:\n                    dp[j] -= 1\n                x >>= 1\n                j += 1\n            A[idx - 1] = v\n            j = 0\n            while v:\n                if v & 1:\n                    dp[j] += 1\n                v >>= 1\n                j += 1\n            ans = 0\n            for i in range(32):\n                if dp[i] > 0:\n                    ans += bits[i]\n            pr(ans)\nmain()", "t = int(input())\nfor _ in range(t):\n    bits = [0 for i in range(32)]\n    (n, q) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    for i in a:\n        i = bin(i)[2:]\n        for j in range(1, len(i) + 1):\n            if i[-j] == '1':\n                bits[-j] += 1\n    nums = []\n    for i in bits:\n        if i > 0:\n            nums.append('1')\n        else:\n            nums.append('0')\n    nums = ''.join(nums)\n    nums = int(nums, 2)\n    print(nums)\n    for _ in range(q):\n        (x, v) = map(int, input().split())\n        i = bin(a[x - 1])[2:]\n        for j in range(1, len(i) + 1):\n            if i[-j] == '1':\n                bits[-j] -= 1\n        i = bin(v)[2:]\n        for j in range(1, len(i) + 1):\n            if i[-j] == '1':\n                bits[-j] += 1\n        a[x - 1] = v\n        nums = []\n        for i in bits:\n            if i > 0:\n                nums.append('1')\n            else:\n                nums.append('0')\n        nums = ''.join(nums)\n        nums = int(nums, 2)\n        print(nums)", "def oraplus(temp):\n    bit = 0\n    while temp > 0:\n        if temp % 2 == 1:\n            ora[bit] += 1\n        bit += 1\n        temp //= 2\n\ndef oraminus(temp):\n    bit = 0\n    while temp > 0:\n        if temp % 2 == 1:\n            ora[bit] -= 1\n        bit += 1\n        temp //= 2\n\ndef calans():\n    ans = 0\n    num = 1\n    for i in range(0, 33):\n        if ora[i] > 0:\n            ans += num\n        num *= 2\n    return ans\n\ndef calor(a):\n    global ora\n    for x in a:\n        temp = x\n        oraplus(temp)\n    return calans()\nfor _ in range(int(input())):\n    ora = [0] * 33\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(calor(a))\n    for _ in range(q):\n        (index, e) = map(int, input().split())\n        temp = a[index - 1]\n        a[index - 1] = e\n        oraminus(temp)\n        oraplus(e)\n        print(calans())", "def main():\n    T = int(input())\n    for _ in range(T):\n        (N, Q) = map(int, input().split())\n        A = list(map(int, input().split()))\n        bitArr = [0] * 31\n        ans = 0\n        for i in range(N):\n            temp = A[i]\n            c = 0\n            while temp > 0:\n                if temp % 2 != 0:\n                    bitArr[c] += 1\n                temp = temp // 2\n                c += 1\n            ans = ans | A[i]\n        print(ans)\n        for _ in range(Q):\n            (X, V) = map(int, input().split())\n            for b in range(31):\n                if A[X - 1] & 1 << b != 0 and V & 1 << b == 0:\n                    bitArr[b] -= 1\n                elif A[X - 1] & 1 << b == 0 and V & 1 << b != 0:\n                    bitArr[b] += 1\n            ans = 0\n            for b in range(31):\n                if bitArr[b] != 0:\n                    ans += 1 << b\n            A[X - 1] = V\n            print(ans)\nmain()", "t = int(input())\nfor _ in range(t):\n    nq = input().split()\n    n = int(nq[0])\n    q = int(nq[1])\n    arr = list(map(int, input().split()))\n    bit = [0] * 32\n    for i in range(n):\n        for j in range(32):\n            if 1 << j & arr[i]:\n                bit[j] += 1\n    ans = 0\n    for j in range(32):\n        if bit[j]:\n            ans += 1 << j\n    print(ans)\n    for i in range(q):\n        xv = input().split()\n        x = int(xv[0])\n        v = int(xv[1])\n        for j in range(32):\n            if 1 << j & arr[x - 1]:\n                bit[j] -= 1\n        for j in range(32):\n            if 1 << j & v:\n                bit[j] += 1\n        arr[x - 1] = v\n        ans = 0\n        for j in range(32):\n            if bit[j]:\n                ans += 1 << j\n        print(ans)", "def frequency(f, v, e):\n    base = 1\n    for i in range(31, -1, -1):\n        if v & base:\n            f[i] += e\n        base *= 2\nt = int(input())\nwhile t:\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    f = [0] * 32\n    for i in l:\n        frequency(f, i, 1)\n    base = 1\n    c = 0\n    for i in f:\n        if i != 0:\n            c += 1 * base\n            base *= 2\n    print(c)\n    i = 0\n    while i < q:\n        (a, b) = map(int, input().split())\n        frequency(f, l[a - 1], -1)\n        frequency(f, b, 1)\n        l[a - 1] = b\n        j = 31\n        base = 1\n        c = 0\n        while j >= 0:\n            if f[j] != 0:\n                c += 1 * base\n            base *= 2\n            j -= 1\n        print(c)\n        i += 1\n    t -= 1", "from collections import Counter\narr = [0] * 32\ntheta = 0\ntheta += 1\nthetas = [2 ** (31 - i) for i in range(32)]\n\ndef add(k):\n    bina = bin(k)[2:]\n    theta = 0\n    theta = 0\n    bina = '0' * (32 - len(bina)) + bina\n    theta = 0\n    for i in range(32):\n        theta = 0\n        if bina[i] == '1':\n            theta = 0\n            arr[i] += 1\n    theta = 0\n\ndef sub(k):\n    bina = bin(k)[2:]\n    theta = 0\n    bina = '0' * (32 - len(bina)) + bina\n    theta = 0\n    for i in range(32):\n        theta = 0\n        if bina[i] == '1':\n            theta = 0\n            arr[i] -= 1\n\ndef get_value():\n    theta = 0\n    suma = 0\n    theta = 0\n    for i in range(32):\n        theta = 0\n        suma += thetas[i] * (arr[i] > 0)\n        theta = 0\n    return suma\ntheta = 0\nt = int(input())\ntheta = 0\nfor i in range(t):\n    theta = 0\n    (n, q) = list(map(int, input().split()))\n    theta = 0\n    arr = [0] * 32\n    theta = 0\n    l = list(map(int, input().split()))\n    theta = 0\n    suma = 0\n    theta = 0\n    for i in l:\n        theta = 0\n        add(i)\n    theta = 0\n    print(get_value())\n    theta = 0\n    for i in range(q):\n        (index, val) = map(int, input().split())\n        theta = 0\n        index -= 1\n        theta = 0\n        sub(l[index])\n        theta = 0\n        l[index] = val\n        theta = 0\n        add(l[index])\n        theta = 0\n        print(get_value())\n        theta = 0", "def binarytodecimal(freq):\n    ans = 0\n    base = 1\n    for i in range(32):\n        if freq[i]:\n            ans = ans + base\n        base *= 2\n    print(ans)\n\ndef solve(arr, check, freq):\n    for i in range(32):\n        if arr >> i & 1 == 1:\n            freq[i] += check\n    return freq\n\ndef main():\n    t = int(input())\n    for t1 in range(t):\n        (n, q) = [int(x) for x in input().split()]\n        arr = list(map(int, input().split()))[:n]\n        freq = [0 for i in range(32)]\n        for q1 in range(q + 1):\n            if q1 != 0:\n                (X, Y) = [int(x) for x in input().split()]\n                X -= 1\n                freq = solve(arr[X], -1, freq)\n                arr[X] = Y\n                freq = solve(arr[X], 1, freq)\n                binarytodecimal(freq)\n            else:\n                for i in range(len(arr)):\n                    freq = solve(arr[i], 1, freq)\n                binarytodecimal(freq)\nmain()", "try:\n    t = int(input())\n    for i in range(0, t):\n        (n, q) = map(int, input().split())\n        a = list(map(int, input().split()))\n        bit = ['0'] * 31\n        orr = 0\n        kp = []\n        for i in range(0, len(a)):\n            orr |= a[i]\n            k = bin(a[i])\n            l = len(k[2:])\n            kp.append((31 - l) * '0' + k[2:])\n        print(orr)\n        for i in range(0, len(kp)):\n            for j in range(0, 31):\n                if kp[i][j] == '1':\n                    bit[j] = str(int(bit[j]) + 1)\n        for i in range(0, q):\n            (p, q) = map(int, input().split())\n            up = bin(a[p - 1])\n            lk = len(up[2:])\n            x = (31 - lk) * '0' + up[2:]\n            uq = bin(q)\n            lkk = len(uq[2:])\n            y = (31 - lkk) * '0' + uq[2:]\n            for i in range(0, len(y)):\n                if y[i] == '1':\n                    bit[i] = str(int(bit[i]) + 1)\n                if x[i] == '1':\n                    bit[i] = str(int(bit[i]) - 1)\n            np = bit.copy()\n            for i in range(0, len(np)):\n                if int(np[i]) >= 1:\n                    np[i] = '1'\n            np = ''.join(np)\n            npo = int(np, 2)\n            print(npo)\n            a[p - 1] = q\nexcept:\n    pass", "for _ in range(int(input())):\n    dp = []\n    for i in range(32):\n        dp.append(0)\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for i in a:\n        p = bin(i).replace('0b', '')\n        c = 31\n        for j in range(len(p) - 1, -1, -1):\n            if p[j] == '1':\n                dp[c] += 1\n            c -= 1\n    m = ''\n    for i in dp:\n        if i != 0:\n            m += '1'\n        else:\n            m += '0'\n    print(int(m, 2))\n    for i in range(q):\n        (x, v) = map(int, input().split())\n        p = bin(a[x - 1]).replace('0b', '')\n        c = 31\n        for j in range(len(p) - 1, -1, -1):\n            if p[j] == '1':\n                dp[c] -= 1\n            c -= 1\n        a[x - 1] = v\n        c = 31\n        p = bin(v).replace('0b', '')\n        for j in range(len(p) - 1, -1, -1):\n            if p[j] == '1':\n                dp[c] += 1\n            c -= 1\n        m = ''\n        for i in dp:\n            if i != 0:\n                m += '1'\n            else:\n                m += '0'\n        print(int(m, 2))", "def find(l):\n    summ = 0\n    for i in range(50):\n        summ += 2 ** i * min(1, l[i])\n    return summ\nfor _ in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    arr = [0 for i in range(50)]\n    for x in l:\n        i = 0\n        while x != 0:\n            arr[i] += x & 1\n            x = x >> 1\n            i += 1\n    print(find(arr))\n    for qq in range(q):\n        (ind, val) = list(map(int, input().split()))\n        x = l[ind - 1]\n        i = 0\n        while x != 0:\n            arr[i] -= x & 1\n            x = x >> 1\n            i += 1\n        i = 0\n        x = val\n        while x != 0:\n            arr[i] += x & 1\n            x = x >> 1\n            i += 1\n        l[ind - 1] = val\n        print(find(arr))", "def change(elem, act):\n    tt = 1\n    j = 0\n    while j < 32:\n        if tt & elem:\n            freqy[j] += act\n        j += 1\n        tt <<= 1\n\ndef oreo(qq):\n    zz = 0\n    for k in range(len(qq)):\n        if qq[k]:\n            zz += 2 ** k\n    return zz\ntkk = int(input())\nfor z in range(tkk):\n    tst = 0\n    (n, q) = map(int, input().split())\n    lt = list(map(int, input().split()))\n    freqy = [0] * 32\n    for i in range(n):\n        tst += 1\n        change(lt[i], 1)\n    print(oreo(freqy))\n    for pp in range(q):\n        (x, v) = map(int, input().split())\n        change(v, 1)\n        change(lt[x - 1], -1)\n        lt[x - 1] = v\n        print(oreo(freqy))", "t = int(input())\nfor x in range(t):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    freq = list()\n    for i in range(32):\n        freq.append(0)\n    for i in range(n):\n        temp = bin(arr[i])[2:]\n        index = 32 - len(temp)\n        for j in range(len(temp)):\n            freq[index + j] += int(temp[j])\n    result = str()\n    for i in range(32):\n        if freq[i] > 0:\n            result += '1'\n    print(int(result, 2))\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        temp = bin(arr[x - 1])[2:]\n        index = 32 - len(temp)\n        for j in range(len(temp)):\n            freq[index + j] -= int(temp[j])\n        arr[x - 1] = y\n        temp = bin(arr[x - 1])[2:]\n        index = 32 - len(temp)\n        for j in range(len(temp)):\n            freq[index + j] += int(temp[j])\n        result = ''\n        flag = False\n        for j in range(32):\n            if (freq[j] > 0) | flag:\n                if freq[j] > 0:\n                    result += '1'\n                else:\n                    result += '0'\n                flag = True\n        print(int(result, 2))", "def readInput():\n    return list(map(int, input().split()))\n\ndef getBit(elem):\n    arr = []\n    while elem > 0:\n        arr.append(elem % 2)\n        elem = elem // 2\n    for _ in range(32 - len(arr)):\n        arr.append(0)\n    arr.reverse()\n    return arr\n\ndef getNumber(bitArr):\n    bitArr.reverse()\n    num = 0\n    for i in range(len(bitArr)):\n        num += bitArr[i] * 2 ** i\n    return num\n\ndef getBitFromOrArr(orarr):\n    a = []\n    for e in orarr:\n        if e > 0:\n            a.append(1)\n        else:\n            a.append(0)\n    return a\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, q) = readInput()\n    arr = readInput()\n    orarr = [0 for _ in range(32)]\n    for elem in arr:\n        bitArr = getBit(elem)\n        for i in range(len(bitArr)):\n            orarr[i] += bitArr[i]\n    print(getNumber(getBitFromOrArr(orarr)))\n    for _ in range(q):\n        (x, v) = readInput()\n        elemX = arr[x - 1]\n        arr[x - 1] = v\n        bitArrX = getBit(elemX)\n        for i in range(len(bitArrX)):\n            orarr[i] -= bitArrX[i]\n        bitArrV = getBit(v)\n        for i in range(len(bitArrV)):\n            orarr[i] += bitArrV[i]\n        print(getNumber(getBitFromOrArr(orarr)))", "def updateFrequency(num, change):\n    bit = f'{num:031b}'\n    for i in range(1, 32):\n        bitMap[i] += int(bit[i - 1]) * change\n\ndef finalScore():\n    bin = ''\n    for i in range(1, 32):\n        digit = 1 if bitMap[i] > 0 else 0\n        bin = f'{bin}{digit}'\n    return int(bin, 2)\n\ndef query():\n    (x, v) = map(int, input().split())\n    updateFrequency(arr[x - 1], -1)\n    updateFrequency(v, 1)\n    arr[x - 1] = v\n    print(finalScore())\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    bitMap = {i: 0 for i in range(1, 32)}\n    for a in arr:\n        updateFrequency(a, 1)\n    print(finalScore())\n    for _ in range(q):\n        query()", "il = lambda : list(map(int, input().split()))\niin = lambda : map(int, input().split())\nii = lambda : int(input())\nfor _ in range(ii()):\n    (n, q) = iin()\n    a = il()\n    temp = [0] * 32\n    ans = a[0]\n    for k in range(1, 32):\n        if ans & 1 << k - 1:\n            temp[k] += 1\n    for i in range(1, n):\n        ans |= a[i]\n        for k in range(1, 32):\n            if a[i] & 1 << k - 1:\n                temp[k] += 1\n    print(ans)\n    for _ in range(q):\n        (x, v) = iin()\n        t = a[x - 1]\n        a[x - 1] = v\n        for k in range(1, 32):\n            if t & 1 << k - 1:\n                temp[k] -= 1\n                if temp[k] == 0:\n                    ans = ans & ~(1 << k - 1)\n        for k in range(1, 32):\n            if v & 1 << k - 1:\n                temp[k] += 1\n        ans |= v\n        print(ans)", "def incrementBitMap(bitMap, num):\n    bit = f'{num:031b}'\n    for i in range(1, 32):\n        bitMap[i] += int(bit[i - 1])\n\ndef decrementBitMap(bitMap, num):\n    bit = f'{num:031b}'\n    for i in range(1, 32):\n        bitMap[i] -= int(bit[i - 1])\n\ndef finalScore(bitMap):\n    bin = ''\n    for i in range(1, 32):\n        digit = 1 if bitMap[i] > 0 else 0\n        bin = f'{bin}{digit}'\n    return int(bin, 2)\n\ndef query(bitMap):\n    (x, v) = map(int, input().split())\n    decrementBitMap(bitMap, arr[x - 1])\n    incrementBitMap(bitMap, v)\n    arr[x - 1] = v\n    print(finalScore(bitMap))\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    bitMap = {i: 0 for i in range(1, 32)}\n    for a in arr:\n        incrementBitMap(bitMap, a)\n    print(finalScore(bitMap))\n    for _ in range(q):\n        query(bitMap)", "il = lambda : list(map(int, input().split()))\niin = lambda : map(int, input().split())\nii = lambda : int(input())\nfor _ in range(ii()):\n    (n, q) = iin()\n    a = il()\n    temp = [0] * 32\n    ans = a[0]\n    for k in range(1, 32):\n        if ans & 1 << k - 1:\n            temp[k] += 1\n    for i in range(1, n):\n        ans |= a[i]\n        for k in range(1, 32):\n            if a[i] & 1 << k - 1:\n                temp[k] += 1\n    print(ans)\n    for _ in range(q):\n        (x, v) = iin()\n        t = a[x - 1]\n        a[x - 1] = v\n        for k in range(1, 32):\n            if t & 1 << k - 1:\n                temp[k] -= 1\n                if temp[k] == 0:\n                    ans = ans & ~(1 << k - 1)\n        for k in range(1, 32):\n            if v & 1 << k - 1:\n                temp[k] += 1\n        ans |= v\n        print(ans)", "for i in range(int(input())):\n    (n, q) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    arr = [0] * 32\n    orr = 0\n    for j in ar:\n        orr = orr | j\n        k = 0\n        while j:\n            t = j % 2\n            j //= 2\n            if t == 1:\n                arr[k] += 1\n            k += 1\n    print(orr)\n    for j in range(q):\n        (a, b) = map(int, input().split())\n        k = 0\n        b2 = ar[a - 1]\n        while b2:\n            t = b2 % 2\n            b2 //= 2\n            if t == 1:\n                arr[k] -= 1\n            k += 1\n        ar[a - 1] = b\n        k = 0\n        while b:\n            t = b % 2\n            b //= 2\n            if t == 1:\n                arr[k] += 1\n            k += 1\n        summ = 0\n        cnt = 0\n        for l in arr:\n            if l >= 1:\n                summ += 2 ** cnt\n            cnt += 1\n        print(summ)", "for i in range(int(input())):\n    (n, q) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    arr = [0] * 32\n    orr = 0\n    for j in ar:\n        orr = orr | j\n        k = 0\n        while j:\n            t = j % 2\n            j //= 2\n            if t == 1:\n                arr[k] += 1\n            k += 1\n    print(orr)\n    for j in range(q):\n        (a, b) = map(int, input().split())\n        k = 0\n        b2 = ar[a - 1]\n        while b2:\n            t = b2 % 2\n            b2 //= 2\n            if t == 1:\n                arr[k] -= 1\n            k += 1\n        ar[a - 1] = b\n        k = 0\n        while b:\n            t = b % 2\n            b //= 2\n            if t == 1:\n                arr[k] += 1\n            k += 1\n        summ = 0\n        cnt = 0\n        for l in arr:\n            if l >= 1:\n                summ += 2 ** cnt\n            cnt += 1\n        print(summ)", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (arr, ans, ones) = ([], 0, [0] * 32)\n    for no in a:\n        ans |= no\n        b = bin(no)[2:]\n        b = b[::-1] + str('0' * (32 - len(b)))\n        for i in range(32):\n            if b[i] == '1':\n                ones[i] += 1\n        arr.append(b)\n    print(ans)\n    for i in range(q):\n        (x, v) = map(int, input().split())\n        x -= 1\n        for j in range(32):\n            if arr[x][j] == '1':\n                ones[j] -= 1\n        v = bin(v)[2:]\n        v = v[::-1] + str('0' * (32 - len(v)))\n        arr[x] = v\n        for j in range(32):\n            if v[j] == '1':\n                ones[j] += 1\n        res = 0\n        for j in range(32):\n            if ones[j] > 0:\n                res += pow(2, j)\n        print(res)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    bitMap = {i: 0 for i in range(1, 32)}\n\n    def incrementBitMap(num):\n        bit = f'{num:031b}'\n        for i in range(1, 32):\n            bitMap[i] += int(bit[i - 1])\n\n    def decrementBitMap(num):\n        bit = f'{num:031b}'\n        for i in range(1, 32):\n            bitMap[i] -= int(bit[i - 1])\n\n    def finalScore():\n        bin = ''\n        for i in range(1, 32):\n            digit = 1 if bitMap[i] > 0 else 0\n            bin = f'{bin}{digit}'\n        return int(bin, 2)\n\n    def query():\n        (x, v) = map(int, input().split())\n        decrementBitMap(arr[x - 1])\n        incrementBitMap(v)\n        arr[x - 1] = v\n        print(finalScore())\n    for a in arr:\n        incrementBitMap(a)\n    print(finalScore())\n    for _ in range(q):\n        query()", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    bitMap = {i: 0 for i in range(1, 32)}\n\n    def incrementBitMap(num):\n        bit = f'{num:031b}'\n        for i in range(1, 32):\n            bitMap[i] += int(bit[i - 1])\n\n    def decrementBitMap(num):\n        bit = f'{num:031b}'\n        for i in range(1, 32):\n            bitMap[i] -= int(bit[i - 1])\n\n    def finalScore():\n        bin = ''\n        for i in range(1, 32):\n            digit = 1 if bitMap[i] > 0 else 0\n            bin = f'{bin}{digit}'\n        return int(bin, 2)\n\n    def query():\n        (x, v) = map(int, input().split())\n        decrementBitMap(arr[x - 1])\n        incrementBitMap(v)\n        arr[x - 1] = v\n        print(finalScore())\n    for a in arr:\n        incrementBitMap(a)\n    print(finalScore())\n    for _ in range(q):\n        query()", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    l = [0] * 32\n    for j in range(n):\n        k = arr[j]\n        for i in range(31, -1, -1):\n            a = 2 ** i\n            if a <= k:\n                l[i] += 1\n                k -= a\n    ans = 0\n    ct = 1\n    for i in range(0, 32):\n        if l[i]:\n            ans += ct\n        ct *= 2\n    print(ans)\n    for i in range(q):\n        (x, v) = map(int, input().split())\n        k = arr[x - 1]\n        for i in range(31, -1, -1):\n            a = 2 ** i\n            if a <= k:\n                l[i] -= 1\n                k -= a\n        arr[x - 1] = v\n        for i in range(31, -1, -1):\n            a = 2 ** i\n            if a <= v:\n                l[i] += 1\n                v -= a\n        ans = 0\n        ct = 1\n        for i in range(0, 32):\n            if l[i]:\n                ans += ct\n            ct *= 2\n        print(ans)", "import math\nread = lambda : list(map(int, input().strip().split()))\nrs = lambda : int(input().strip())\nt = rs()\nans = []\n\nclass seg:\n\n    def __init__(self, a, n):\n        self.a = a\n        self.na = [0] * n + a\n        self.n = n\n        self.create()\n\n    def create(self):\n        for i in range(self.n - 1, 0, -1):\n            self.na[i] = self.na[i << 1] | self.na[i << 1 | 1]\n\n    def modify(self, x, v):\n        i = x + self.n\n        self.na[i] = v\n        while i > 1:\n            self.na[i >> 1] = self.na[i] | self.na[i ^ 1]\n            i >>= 1\n\n    def query(self, l, r):\n        res = 0\n        l += self.n\n        r += self.n\n        while l < r:\n            if l & 1:\n                res |= self.na[l]\n                l += 1\n            if r & 1:\n                r -= 1\n                res |= self.na[r]\n            l >>= 1\n            r >>= 1\n        return res\nfor i in range(t):\n    (nl, ql) = read()\n    arr = read()\n    st = seg(arr, nl)\n    ans.append(st.query(0, nl))\n    for _ in range(ql):\n        (xl, vl) = read()\n        xl -= 1\n        if arr[xl] != vl:\n            st.modify(xl, vl)\n            ans.append(st.query(0, nl))\n        else:\n            ans.append(st.query(0, nl))\nprint('\\n'.join([str(x) for x in ans]))", "def ans(arr):\n    res = 0\n    for i in range(32):\n        if arr[i]:\n            res = res + (1 << i)\n    return res\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    sb = [0] * 32\n    for i in arr:\n        for j in range(32):\n            if i & 1 << j:\n                sb[j] += 1\n    print(ans(sb))\n    for t0 in range(q):\n        (x, y) = map(int, input().split())\n        x = x - 1\n        tmp = arr[x]\n        for j in range(32):\n            if tmp & 1 << j:\n                sb[j] -= 1\n        for j in range(32):\n            if y & 1 << j:\n                sb[j] += 1\n        arr[x] = y\n        print(ans(sb))", "from functools import reduce\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [0] * 31\n    for i in range(n):\n        for j in range(31):\n            if a[i] & 1 << j:\n                dp[j] += 1\n    print(sum([1 << i for i in range(31) if dp[i]]))\n    for k in range(q):\n        (idx, v) = map(int, input().split())\n        for i in range(31):\n            if a[idx - 1] & 1 << i:\n                dp[i] -= 1\n            if v & 1 << i:\n                dp[i] += 1\n        a[idx - 1] = v\n        print(sum([1 << i for i in range(31) if dp[i] > 0]))", "from functools import reduce\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [0] * 31\n    for i in range(n):\n        for j in range(31):\n            if a[i] & 1 << j:\n                dp[j] += 1\n    ans = sum([1 << i for i in range(31) if dp[i]])\n    print(ans)\n    for k in range(q):\n        (idx, v) = map(int, input().split())\n        for i in range(31):\n            x = 1 << i\n            if a[idx - 1] & x:\n                dp[i] -= 1\n        for i in range(31):\n            x = 1 << i\n            if v & x:\n                dp[i] += 1\n        ans = 0\n        a[idx - 1] = v\n        for i in range(31):\n            x = 1 << i\n            if dp[i] > 0:\n                ans += x\n        print(ans)", "import functools\nt = int(input())\nfor i in range(t):\n    (n, q) = [int(x) for x in input().split()]\n    a = list(map(int, input().split()))\n    res = 0\n    freq = {}\n    for i in range(32):\n        freq[i] = 0\n    for i in range(len(a)):\n        num = '{:032b}'.format(a[i])\n        for j in range(len(num)):\n            if num[j] == '1':\n                freq[j] += 1\n    lis = []\n    for i in range(32):\n        if freq[i] > 0:\n            lis.append(1)\n        else:\n            lis.append(0)\n    s = ''.join((str(e) for e in lis))\n    print(int(s, 2))\n    for i in range(q):\n        (x, v) = [int(x) for x in input().split()]\n        tmp = a[x - 1]\n        num = '{:032b}'.format(tmp)\n        for j in range(len(num)):\n            if num[j] == '1':\n                freq[j] -= 1\n        a[x - 1] = v\n        num = '{:032b}'.format(v)\n        for j in range(len(num)):\n            if num[j] == '1':\n                freq[j] += 1\n        lis = []\n        for i in range(32):\n            if freq[i] > 0:\n                lis.append(1)\n            else:\n                lis.append(0)\n        s = ''.join((str(e) for e in lis))\n        print(int(s, 2))", "def findbin(n, cnt=31):\n    ans = []\n    res = 0\n    while n > 0:\n        res += 1\n        val = n % 2\n        ans.append(str(val))\n        n //= 2\n    while res < cnt:\n        ans.append(str(0))\n        res += 1\n    ans.reverse()\n    return ''.join(ans)\nt = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    A = list(map(int, input().split()))\n    w = []\n    for j in range(q):\n        (x, v) = map(int, input().split())\n        w.append([x, v])\n    res = 31\n    bitl = [0] * res\n    real_bit = ['0'] * res\n    for j in range(len(A)):\n        ans = findbin(A[j], res)\n        for k in range(res):\n            if ans[k] == '1':\n                bitl[k] += 1\n                real_bit[k] = '1'\n    print(int(''.join(real_bit), 2))\n    for j in range(q):\n        val1 = findbin(A[w[j][0] - 1])\n        val2 = findbin(w[j][1])\n        A[w[j][0] - 1] = w[j][1]\n        for k in range(res):\n            if val1[k] != val2[k]:\n                if val2[k] == '1':\n                    bitl[k] += 1\n                    real_bit[k] = '1'\n                else:\n                    bitl[k] -= 1\n                    if bitl[k] == 0:\n                        real_bit[k] = '0'\n        print(int(''.join(real_bit), 2))", "def printbin(bitv, maxSize):\n    sum = 0\n    for i in range(maxSize):\n        if bitv[i] > 0:\n            sum = sum + pow(2, i)\n    print(sum)\nT = int(input())\nwhile T:\n    (N, Q) = map(int, input().split())\n    A = list(map(int, input().split()))\n    maxSize = 0\n    bitv = [0] * 32\n    for el in A:\n        i = 0\n        while el:\n            if el % 2 != 0:\n                bitv[i] += 1\n            el = el // 2\n            i += 1\n        if i > maxSize:\n            maxSize = i\n    printbin(bitv, maxSize)\n    for _ in range(Q):\n        (X, V) = map(int, input().split())\n        P = A[X - 1]\n        A[X - 1] = V\n        i = 0\n        while P or V:\n            if P % 2 != 0 and V % 2 == 0:\n                bitv[i] -= 1\n            elif P % 2 == 0 and V % 2 != 0:\n                bitv[i] += 1\n            P = P // 2\n            V = V // 2\n            i += 1\n        if i > maxSize:\n            maxSize = i\n        printbin(bitv, maxSize)\n    T -= 1", "t = int(input())\nfor t1 in range(t):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    bits = [0 for i in range(32)]\n    for i in arr:\n        j = 0\n        while i:\n            if i % 2 == 1:\n                bits[j] += 1\n            j += 1\n            i >>= 1\n    ans = 0\n    for i in range(32):\n        if bits[i]:\n            ans += 2 ** i\n    print(ans)\n    for q1 in range(q):\n        (ind, n2) = map(int, input().split())\n        n1 = arr[ind - 1]\n        j = 0\n        while n1:\n            if n1 % 2 == 1:\n                bits[j] -= 1\n            j += 1\n            n1 >>= 1\n        arr[ind - 1] = n2\n        j = 0\n        while n2:\n            if n2 % 2 == 1:\n                bits[j] += 1\n            j += 1\n            n2 >>= 1\n        ans = 0\n        for i in range(32):\n            if bits[i]:\n                ans += 2 ** i\n        print(ans)", "def find(l):\n    summ = 0\n    for i in range(50):\n        summ += 2 ** i * min(1, l[i])\n    return summ\nfor _ in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    arr = [0 for i in range(50)]\n    for x in l:\n        i = 0\n        while x != 0:\n            arr[i] += x & 1\n            x = x >> 1\n            i += 1\n    print(find(arr))\n    for qq in range(q):\n        (ind, val) = list(map(int, input().split()))\n        x = l[ind - 1]\n        i = 0\n        while x != 0:\n            arr[i] -= x & 1\n            x = x >> 1\n            i += 1\n        i = 0\n        x = val\n        while x != 0:\n            arr[i] += x & 1\n            x = x >> 1\n            i += 1\n        l[ind - 1] = val\n        print(find(arr))", "t = int(input())\nimport math\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = 0\n    d = {}\n    for k in range(32):\n        d[k] = 0\n        for z in range(n):\n            if l[z] >> k & 1 == 1:\n                d[k] = d[k] + 1\n    for pp in range(32):\n        if d[pp] > 0:\n            ans = ans | 1 << pp\n    print(ans)\n    for j in range(q):\n        ans = 0\n        (x, v) = map(int, input().split())\n        for pp in range(32):\n            if 1 & l[x - 1] >> pp == 1:\n                d[pp] = d[pp] - 1\n            if 1 & v >> pp == 1:\n                d[pp] = d[pp] + 1\n        for pp in range(32):\n            if d[pp] > 0:\n                ans = ans | 1 << pp\n        print(ans)\n        l[x - 1] = v", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    array = list(map(int, input().split()))\n    freq = [0] * 31\n    for i in array:\n        j = 0\n        while i > 0:\n            rem = i % 2\n            i //= 2\n            freq[j] += rem\n            j += 1\n    ans = 0\n    for i in range(31):\n        if freq[i] > 0:\n            ans += 2 ** i\n    print(ans)\n    for _ in range(q):\n        (x, v) = map(int, input().split())\n        prev = array[x - 1]\n        array[x - 1] = v\n        fin = 0\n        j = 0\n        while prev > 0:\n            rem = prev % 2\n            prev //= 2\n            freq[j] -= rem\n            j += 1\n        j = 0\n        while v > 0:\n            rem2 = v % 2\n            v //= 2\n            freq[j] += rem2\n            j += 1\n        for j in range(31):\n            if freq[j] > 0:\n                fin += 2 ** j\n        print(fin)", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    array = list(map(int, input().split()))\n    freq = [0] * 31\n    for i in array:\n        for j in range(31):\n            rem = i % 2\n            i //= 2\n            freq[j] += rem\n    ans = 0\n    for i in range(31):\n        if freq[i] > 0:\n            ans += 2 ** i\n    print(ans)\n    for _ in range(q):\n        (x, v) = map(int, input().split())\n        prev = array[x - 1]\n        array[x - 1] = v\n        fin = 0\n        for j in range(31):\n            rem = prev % 2\n            prev //= 2\n            freq[j] -= rem\n            rem2 = v % 2\n            v //= 2\n            freq[j] += rem2\n            if freq[j] > 0:\n                fin += 2 ** j\n        print(fin)", "def gAns(li):\n    dt = dict()\n    n = len(li)\n    ans = 0\n    mul = 1\n    for i in range(32):\n        check = False\n        dt[i] = 0\n        for j in range(n):\n            if li[j] & 1 << i > 0:\n                dt[i] += 1\n                check = True\n        if check:\n            ans = ans + mul\n        mul *= 2\n    return (ans, dt)\n\ndef gAAns(dt, pval, nval):\n    for i in range(32):\n        if pval & 1 << i > 0:\n            dt[i] -= 1\n        if nval & 1 << i > 0:\n            dt[i] += 1\n    ans = 0\n    mul = 1\n    for i in range(32):\n        if dt[i]:\n            ans += mul\n        mul *= 2\n    return (ans, dt)\n\ndef solve():\n    (n, q) = map(int, input().split())\n    li = list(map(int, input().split()))\n    queries = [tuple(map(int, input().split())) for i in range(q)]\n    (ans, dt) = gAns(li)\n    print(ans)\n    for (x, v) in queries:\n        (ans, dt) = gAAns(dt, li[x - 1], v)\n        li[x - 1] = v\n        print(ans)\nfor tC in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    a = [0] * 31\n    k = 0\n    for i in range(n):\n        k |= l[i]\n        s = bin(l[i]).replace('0b', '')\n        for i in range(len(s)):\n            a[30 - i] += int(s[len(s) - i - 1])\n    print(k)\n    for i in range(m):\n        (c, d) = list(map(int, input().split()))\n        s = bin(l[c - 1]).replace('0b', '')\n        s1 = bin(d).replace('0b', '')\n        for i in range(len(s)):\n            a[30 - i] -= int(s[len(s) - i - 1])\n        st = list('0') * 31\n        for i in range(len(s1)):\n            a[30 - i] += int(s1[len(s1) - i - 1])\n        for i in range(31):\n            if a[30 - i] > 0:\n                st[30 - i] = '1'\n        print(int(''.join(st), 2))\n        l[c - 1] = d"]