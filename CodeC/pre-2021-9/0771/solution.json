["def count_bits(n: int) -> list:\n    count = [0] * 62\n    str2int = {'0': 0, '1': 31}\n    for (i, b) in enumerate(f'{n:031b}'):\n        count[i + str2int[b]] = 1\n    return count\n\ndef count_sum(c1: list, c2: list) -> list:\n    return [i + j for (i, j) in zip(c1, c2)]\n\ndef count_diff(c1: list, c2: list) -> list:\n    return [i - j for (i, j) in zip(c1, c2)]\n\ndef count2int(count: list) -> int:\n    num = 0\n    for i in range(31):\n        if count[31 + i] < count[i]:\n            num += 1 << 30 - i\n    return num\n\ndef get_counts(n: int, a: list) -> list:\n    counts = [count_bits(a[0])]\n    for i in range(1, n):\n        counts.append(count_sum(counts[i - 1], count_bits(a[i])))\n    return counts\n\ndef solve(counts: list, l: int, r: int) -> int:\n    count = counts[r] if l == 0 else count_diff(counts[r], counts[l - 1])\n    return count2int(count)\n\ndef main():\n    (n, q) = map(int, input().strip().split())\n    a = list(map(int, input().strip().split()))\n    counts = get_counts(n, a)\n    for _ in range(q):\n        (l, r) = map(int, input().strip().split())\n        print(solve(counts, l - 1, r - 1))\nmain()", "def count_bits(n: int) -> list:\n    count = [0] * 62\n    str2int = {'0': 0, '1': 31}\n    for (i, b) in enumerate(f'{n:031b}'):\n        count[i + str2int[b]] = 1\n    return count\n\ndef count_sum(c1: list, c2: list) -> list:\n    return [i + j for (i, j) in zip(c1, c2)]\n\ndef count_diff(c1: list, c2: list) -> list:\n    return [i - j for (i, j) in zip(c1, c2)]\n\ndef count2int(count: list) -> int:\n    num = 0\n    for i in range(31):\n        if count[31 + i] < count[i]:\n            num += 1 << 30 - i\n    return num\n\ndef get_counts(n: int, a: list) -> list:\n    counts = [count_bits(a[0])]\n    for i in range(1, n):\n        counts.append(count_sum(counts[i - 1], count_bits(a[i])))\n    return counts\n\ndef solve(counts: list, l: int, r: int) -> int:\n    count = counts[r] if l == 0 else count_diff(counts[r], counts[l - 1])\n    return count2int(count)\n\ndef main():\n    (n, q) = map(int, input().strip().split())\n    a = list(map(int, input().strip().split()))\n    counts = get_counts(n, a)\n    for _ in range(q):\n        (l, r) = map(int, input().strip().split())\n        print(solve(counts, l - 1, r - 1))\nmain()", "def count_bits(n: int) -> list:\n    count = [0] * 62\n    str2int = {'0': 0, '1': 31}\n    for (i, b) in enumerate(f'{n:031b}'):\n        count[i + str2int[b]] = 1\n    return count\n\ndef count_sum(c1: list, c2: list) -> list:\n    return [i + j for (i, j) in zip(c1, c2)]\n\ndef count_diff(c1: list, c2: list) -> list:\n    return [i - j for (i, j) in zip(c1, c2)]\n\ndef count2int(count: list) -> int:\n    num = 0\n    for i in range(31):\n        if count[31 + i] < count[i]:\n            num += 1 << 30 - i\n    return num\n\ndef get_counts(n: int, a: list) -> list:\n    counts = [count_bits(a[0])]\n    for i in range(1, n):\n        counts.append(count_sum(counts[i - 1], count_bits(a[i])))\n    return counts\n\ndef solve(counts: list, l: int, r: int) -> int:\n    count = counts[r] if l == 0 else count_diff(counts[r], counts[l - 1])\n    return count2int(count)\n\ndef main():\n    (n, q) = map(int, input().strip().split())\n    a = list(map(int, input().strip().split()))\n    counts = get_counts(n, a)\n    for _ in range(q):\n        (l, r) = map(int, input().strip().split())\n        print(solve(counts, l - 1, r - 1))\nmain()", "def count_bits(n: int) -> list:\n    count = [0] * 62\n    str2int = {'0': 0, '1': 31}\n    for (i, b) in enumerate(f'{n:031b}'):\n        count[i + str2int[b]] = 1\n    return count\n\ndef count_sum(c1: list, c2: list) -> list:\n    return [i + j for (i, j) in zip(c1, c2)]\n\ndef count_diff(c1: list, c2: list) -> list:\n    return [i - j for (i, j) in zip(c1, c2)]\n\ndef count2int(count: list) -> int:\n    num = 0\n    for i in range(31):\n        if count[31 + i] < count[i]:\n            num += 1 << 30 - i\n    return num\n\ndef get_counts(n: int, a: list) -> list:\n    counts = [count_bits(a[0])]\n    for i in range(1, n):\n        counts.append(count_sum(counts[i - 1], count_bits(a[i])))\n    return counts\n\ndef solve(counts: list, l: int, r: int) -> int:\n    count = counts[r] if l == 0 else count_diff(counts[r], counts[l - 1])\n    return count2int(count)\n\ndef main():\n    (n, q) = map(int, input().strip().split())\n    a = list(map(int, input().strip().split()))\n    counts = get_counts(n, a)\n    for _ in range(q):\n        (l, r) = map(int, input().strip().split())\n        print(solve(counts, l - 1, r - 1))\nmain()", "(n, q) = map(int, input().split())\nw = [[0 for i in range(31)] for j in range(n)]\na = [*map(int, input().split())]\nfor i in range(n):\n    p = 0\n    j = a[i]\n    while j:\n        w[i][p] += j & 1\n        j >>= 1\n        p += 1\nw = [[0] * 31] + w\nfor i in range(1, n + 1):\n    for j in range(31):\n        w[i][j] += w[i - 1][j]\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    ans = 0\n    for j in range(31):\n        if w[y][j] - w[x - 1][j] < y - x + 2 >> 1:\n            ans += 1 << j\n    print(ans)", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\na = [list(map(int, format(i, '031b'))) for i in a]\nsums = [[0] * 31 for i in range(len(a) + 1)]\nfor i in range(1, len(a) + 1):\n    for j in range(31):\n        sums[i][j] = sums[i - 1][j] + a[i - 1][j]\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    ans = [1] * 31\n    for j in range(31):\n        curr = sums[r][j] - sums[l - 1][j]\n        if curr >= r - l + 1 - curr:\n            ans[j] = 0\n    ans = [str(i) for i in ans]\n    ans = ''.join(ans)\n    print(int(ans, 2))", "(N, Q) = [int(s) for s in input().split()]\nA = [int(x) for x in input().split()]\nnum_ones = [[0] * 31 for _ in range(len(A))]\n\ndef preprocess(A):\n    for (i, num) in enumerate(A):\n        for j in range(31):\n            if num & 1 << j > 0:\n                if i == 0:\n                    num_ones[i][30 - j] = 1\n                else:\n                    num_ones[i][30 - j] = num_ones[i - 1][30 - j] + 1\n            elif i != 0:\n                num_ones[i][30 - j] = num_ones[i - 1][30 - j]\npreprocess(A)\n\ndef solve(l, r):\n    ans = 0\n    for i in range(30, -1, -1):\n        ones = num_ones[r][30 - i]\n        if l - 1 > -1:\n            ones -= num_ones[l - 1][30 - i]\n        zeros = r - l + 1 - ones\n        if zeros > ones:\n            ans |= 1 << i\n    return ans\nfor _ in range(Q):\n    (L, R) = [int(s) - 1 for s in input().split()]\n    print(solve(L, R))", "(n, Q) = map(int, input().split())\narr = [0] + [int(_) for _ in input().split()]\nprefix = [[0 for _ in range(31)] for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    for j in range(31):\n        prefix[i][j] = prefix[i - 1][j] + (arr[i] & 1 << j == 0)\nfor _ in range(Q):\n    ans = 0\n    (l, r) = map(int, input().split())\n    for j in range(31):\n        cnt0 = prefix[r][j] - prefix[l - 1][j]\n        cnt1 = r - l + 1 - cnt0\n        if cnt1 < cnt0:\n            ans += 1 << j\n    print(ans)", "POWS = [1]\nfor i in range(32):\n    POWS.append(POWS[-1] * 2)\n\ndef b(S, bit, l, r):\n    return S[bit][r + 1] - S[bit][l]\n\ndef max_bits(S, l, r):\n    x = 0\n    length = r - l + 1\n    for bit in range(31):\n        if b(S, bit, l, r) < length / 2:\n            x += POWS[bit]\n    return x\n(N, Q) = map(int, input().split())\nA = list(map(int, input().split()))\nS = [[0 for i in range(N + 1)] for i in range(32)]\nfor bit in range(32):\n    for i in range(N):\n        S[bit][i + 1] = S[bit][i] + (A[i] & POWS[bit] != 0)\nfor i in range(Q):\n    (l, r) = map(int, input().split())\n    print(max_bits(S, l - 1, r - 1))", "def b(S, bit, l, r):\n    return S[bit][r + 1] - S[bit][l]\n\ndef max_bits(S, l, r):\n    x = 0\n    length = r - l + 1\n    for bit in range(31):\n        if b(S, bit, l, r) < length / 2:\n            x += 1 << bit\n    return x\n(N, Q) = map(int, input().split())\nA = list(map(int, input().split()))\nS = [[0 for i in range(N + 1)] for i in range(32)]\nfor bit in range(32):\n    for i in range(N):\n        S[bit][i + 1] = S[bit][i] + ((A[i] & 1 << bit) >> bit)\nfor i in range(Q):\n    (l, r) = map(int, input().split())\n    print(max_bits(S, l - 1, r - 1))", "(n, q) = map(int, input().split())\na = [int(x) for x in input().split()]\nbit_pref = [{i: 0 for i in range(31)} for j in range(n)]\nfor i in range(n):\n    num = a[i]\n    j = 0\n    for j in range(31):\n        if num & 1 << j:\n            if i == 0:\n                bit_pref[i][j] = 1\n            else:\n                bit_pref[i][j] = 1 + bit_pref[i - 1][j]\n        elif i != 0:\n            bit_pref[i][j] = bit_pref[i - 1][j]\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    l -= 1\n    r -= 1\n    if l != 0:\n        arr1 = bit_pref[l - 1]\n    arr2 = bit_pref[r]\n    num_ele = r - l + 1\n    x = 0\n    for j in range(31):\n        op1 = arr2[j]\n        if l != 0:\n            op1 -= arr1[j]\n        op2 = num_ele - op1\n        if op1 < op2:\n            x += 1 << j\n    print(x)", "(n, q) = map(int, input().split())\na = [int(x) for x in input().split()]\nbit_pref = [{i: 0 for i in range(31)} for j in range(n)]\nfor i in range(n):\n    num = a[i]\n    j = 0\n    for j in range(31):\n        if num & 1 << j:\n            if i == 0:\n                bit_pref[i][j] = 1\n            else:\n                bit_pref[i][j] = 1 + bit_pref[i - 1][j]\n        elif i != 0:\n            bit_pref[i][j] = bit_pref[i - 1][j]\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    l -= 1\n    r -= 1\n    if l != 0:\n        arr1 = bit_pref[l - 1]\n    arr2 = bit_pref[r]\n    num_ele = r - l + 1\n    x = 0\n    for j in range(31):\n        op1 = arr2[j]\n        if l != 0:\n            op1 -= arr1[j]\n        op2 = num_ele - op1\n        if op1 < op2:\n            x += 1 << j\n    print(x)", "(n, q) = map(int, input().split())\na = [int(x) for x in input().split()]\nbit_pref = [{i: 0 for i in range(31)} for j in range(n)]\nfor i in range(n):\n    num = a[i]\n    j = 0\n    for j in range(31):\n        if num & 1 << j:\n            if i == 0:\n                bit_pref[i][j] = 1\n            else:\n                bit_pref[i][j] = 1 + bit_pref[i - 1][j]\n        elif i != 0:\n            bit_pref[i][j] = bit_pref[i - 1][j]\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    l -= 1\n    r -= 1\n    if l != 0:\n        arr1 = bit_pref[l - 1]\n    arr2 = bit_pref[r]\n    res = [0] * 31\n    num_ele = r - l + 1\n    for j in range(31):\n        op1 = arr2[j]\n        if l != 0:\n            op1 -= arr1[j]\n        op2 = num_ele - op1\n        if op1 >= op2:\n            res[j] = 0\n        else:\n            res[j] = 1\n    x = 0\n    for (idx, j) in enumerate(res):\n        if j == 1:\n            x += 1 << idx\n    print(x)", "from math import ceil\n\ndef calc(n):\n    pp = [0] * 31\n    for i in range(31):\n        if n & 1 << i:\n            pp[i] += 1\n    return pp\n\ndef f(a, q):\n    pref = [[0] * 31]\n    for i in a:\n        pref.append(pref[-1].copy())\n        pp = calc(i)\n        for bt in range(31):\n            pref[-1][bt] += pp[bt]\n    for _ in range(q):\n        (l, r) = map(int, input().strip().split())\n        l -= 1\n        lt = pref[l]\n        rt = pref[r]\n        pp = [0] * 31\n        for i in range(31):\n            pp[i] = rt[i] - lt[i]\n        ans = 2 ** 31 - 1\n        for i in range(31):\n            if pp[i] >= ceil((r - l) / 2):\n                ans ^= 1 << i\n        print(ans)\n(n, q) = map(int, input().strip().split())\na = [*map(int, input().strip().split())]\nf(a, q)", "try:\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    bit = [[0 for i in range(n + 1)] for j in range(32)]\n    for i in range(n):\n        for j in range(31):\n            bit[j + 1][i + 1] = bit[j + 1][i]\n            if arr[i] & 1 << j:\n                bit[j + 1][i + 1] += 1\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        out = 0\n        for j in range(1, 32):\n            if (r - l + 1) % 2:\n                if bit[j][r] - bit[j][l - 1] <= (r - l + 1) // 2:\n                    out += 1 << j - 1\n            elif bit[j][r] - bit[j][l - 1] < (r - l + 1) // 2:\n                out += 1 << j - 1\n        print(out)\nexcept EOFError as e:\n    print(e)", "(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\nbit = [[0 for i in range(n + 1)] for j in range(32)]\nfor i in range(n):\n    for j in range(31):\n        bit[j + 1][i + 1] = bit[j + 1][i]\n        if arr[i] & 1 << j:\n            bit[j + 1][i + 1] += 1\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    out = 0\n    for j in range(1, 32):\n        if (r - l + 1) % 2:\n            if bit[j][r] - bit[j][l - 1] <= (r - l + 1) // 2:\n                out += 1 << j - 1\n        elif bit[j][r] - bit[j][l - 1] < (r - l + 1) // 2:\n            out += 1 << j - 1\n    print(out)", "(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\nbit = [[0 for i in range(n + 1)] for j in range(32)]\nfor i in range(n):\n    for j in range(31):\n        bit[j + 1][i + 1] = bit[j + 1][i]\n        if arr[i] & 1 << j:\n            bit[j + 1][i + 1] += 1\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    out = 0\n    for j in range(1, 32):\n        if (r - l + 1) % 2:\n            if bit[j][r] - bit[j][l - 1] <= (r - l + 1) // 2:\n                out += 1 << j - 1\n        elif bit[j][r] - bit[j][l - 1] < (r - l + 1) // 2:\n            out += 1 << j - 1\n    print(out)", "(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\nbit = [[0 for i in range(n + 1)] for j in range(32)]\nfor i in range(n):\n    for j in range(31):\n        bit[j + 1][i + 1] = bit[j + 1][i]\n        if arr[i] & 1 << j:\n            bit[j + 1][i + 1] += 1\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    out = 0\n    for j in range(1, 32):\n        if (r - l + 1) % 2:\n            if bit[j][r] - bit[j][l - 1] <= (r - l + 1) // 2:\n                out += 1 << j - 1\n        elif bit[j][r] - bit[j][l - 1] < (r - l + 1) // 2:\n            out += 1 << j - 1\n    print(out)", "import math\nt = 1\nwhile t > 0:\n    t -= 1\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    one = [[0 for i in range(31)] for i in range(n)]\n    for i in range(n):\n        for j in range(31):\n            k = 1 if a[i] & 1 << j > 0 else 0\n            one[i][j] = one[i - 1][j] + k\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        ans = 0\n        for i in range(31):\n            m = one[r - 1][i] - one[l - 2][i] if l > 1 else one[r - 1][i]\n            le = r - l + 1\n            if m < le - m:\n                ans = ans | 1 << i\n        print(ans)", "(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\nbit = [[0 for i in range(n + 1)] for j in range(32)]\nfor i in range(n):\n    for j in range(31):\n        bit[j + 1][i + 1] = bit[j + 1][i]\n        if arr[i] & 1 << j:\n            bit[j + 1][i + 1] += 1\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    out = 0\n    for j in range(1, 32):\n        if (r - l + 1) % 2:\n            if bit[j][r] - bit[j][l - 1] <= (r - l + 1) // 2:\n                out += 1 << j - 1\n        elif bit[j][r] - bit[j][l - 1] < (r - l + 1) // 2:\n            out += 1 << j - 1\n    print(out)", "import math\nt = 1\nwhile t > 0:\n    t -= 1\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    one = [[0 for i in range(31)] for i in range(n)]\n    for i in range(n):\n        for j in range(31):\n            k = 1 if a[i] & 1 << j > 0 else 0\n            one[i][j] = one[i - 1][j] + k\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        ans = 0\n        for i in range(31):\n            m = one[r - 1][i] - one[l - 2][i] if l > 1 else one[r - 1][i]\n            le = r - l + 1\n            if m < le - m:\n                ans = ans | 1 << i\n        print(ans)", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\narr = [[0 for i in range(31)] for j in range(n + 1)]\nflag = False\nfor i in range(1, n + 1):\n    j = 0\n    for j in range(0, 31):\n        p = a[i - 1] % 2\n        arr[i][j] = arr[i - 1][j] + p\n        a[i - 1] >>= 1\n        j += 1\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    ans = 0\n    for j in range(31):\n        aa = 1\n        if (r - l + 1) % 2 == 0:\n            if arr[r][j] - arr[l - 1][j] < (r - l + 1) // 2:\n                aa <<= j\n                ans += aa\n        elif arr[r][j] - arr[l - 1][j] <= (r - l + 1) // 2:\n            aa <<= j\n            ans += aa\n    print(ans)", "(n, q) = map(int, input().split())\na = [int(i) for i in input().split()]\none = [[0 for i in range(31)] for i in range(n)]\nfor i in range(n):\n    for j in range(31):\n        k = 1 if a[i] & 1 << j > 0 else 0\n        one[i][j] = one[i - 1][j] + k\nfor o in range(q):\n    (l, r) = map(int, input().split())\n    ans = 0\n    for i in range(31):\n        m = one[r - 1][i] - one[l - 2][i] if l > 1 else one[r - 1][i]\n        le = r - l + 1\n        if m < le - m:\n            ans = ans | 1 << i\n    print(ans)", "lim = 31\n(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\nbits = [[0] * (n + 1) for _ in range(lim)]\n\ndef initialize():\n    for i in range(n):\n        x = arr[i]\n        for j in range(lim):\n            mask = 1 << j\n            bits[j][i] += bits[j][i - 1]\n            if mask & x:\n                bits[j][i] += 1\ninitialize()\nfor _ in range(q):\n    (l, r) = map(lambda x: int(x) - 1, input().split())\n    ans = 0\n    nums = r - l + 1\n    for i in range(lim):\n        count = bits[i][r] - bits[i][l - 1]\n        if count < (nums + 1) // 2:\n            ans += 1 << i\n    print(ans)", "lim = 31\n(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\nbits = [[0] * (n + 1) for _ in range(lim)]\n\ndef initialize():\n    for i in range(n):\n        x = arr[i]\n        for j in range(lim):\n            mask = 1 << j\n            bits[j][i] += bits[j][i - 1]\n            if mask & x:\n                bits[j][i] += 1\ninitialize()\nfor _ in range(q):\n    (l, r) = map(lambda x: int(x) - 1, input().split())\n    ans = 0\n    nums = r - l + 1\n    for i in range(lim):\n        count = bits[i][r] - bits[i][l - 1]\n        if count < (nums + 1) // 2:\n            ans += 1 << i\n    print(ans)", "(n, q) = map(int, input().split())\nl = list(map(int, input().split()))\nk = [[0] * 31]\nx = '{0:031b}'\nfor i in range(n):\n    s = x.format(l[i])\n    s = s[-1::-1]\n    c = []\n    for j in range(31):\n        c.append(k[-1][j] + int(s[j]))\n    k.append(c)\nfor _ in range(q):\n    (a, r) = map(int, input().split())\n    a -= 1\n    ans = 0\n    c = 1\n    d = []\n    for i in range(31):\n        d.append(k[r][i] - k[a][i])\n    e = r - a\n    s = ''\n    for i in d:\n        if i >= e - i:\n            s += '0'\n        else:\n            s += '1'\n    s = s[-1::-1]\n    print(int(s, 2))", "def build(arr, n, size=31):\n    dp = [[0 for i in range(31)] for i in range(n + 1)]\n    for (i, e) in enumerate(arr, 1):\n        j = 0\n        for j in range(31):\n            dp[i][j] = dp[i - 1][j] + (e & 1)\n            e >>= 1\n    return dp\n(n, q) = map(int, input().split())\narr = tuple(map(int, input().split()))\ndp = build(arr, n)\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    avg = (r - l + 1) / 2\n    ans = 0\n    run_pointer = 1\n    for j in range(31):\n        if dp[r][j] - dp[l - 1][j] < avg:\n            ans += run_pointer\n        run_pointer <<= 1\n    print(ans)", "(n, q) = map(int, input().split())\ns = [int(x) for x in input().split()]\nprefix = [[0] * 32 for _ in range(n + 1)]\nfor (i, num) in enumerate(s, 1):\n    for j in range(32):\n        prefix[i][j] += prefix[i - 1][j] + (num & 1)\n        num >>= 1\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    l -= 1\n    r -= 1\n    ans = 0\n    for i in range(30, -1, -1):\n        ans <<= 1\n        bit1 = prefix[r + 1][i] - prefix[l][i]\n        bit0 = r - l + 1 - bit1\n        ans |= int(bit0 > bit1)\n    print(ans)", "(n, q) = map(int, input().split())\nl = [int(i) for i in input().split()]\npre = [[0 for j in range(n)] for i in range(31)]\nfor i in range(31):\n    if l[0] & 1 << i:\n        pre[i][0] = 1\n    else:\n        pre[i][0] = 0\nfor i in range(31):\n    for j in range(n):\n        if l[j] & 1 << i:\n            pre[i][j] = pre[i][j - 1] + 1\n        else:\n            pre[i][j] = pre[i][j - 1]\nfor _ in range(q):\n    (le, r) = map(int, input().split())\n    le = le - 1\n    r = r - 1\n    ans = 0\n    for i in range(31):\n        seg = r - le + 1\n        if le == 0:\n            ones = pre[i][r]\n        else:\n            ones = pre[i][r] - pre[i][le - 1]\n        zeroes = seg - ones\n        if zeroes > ones:\n            ans += pow(2, i)\n    print(ans)", "res = []\n\ndef binaryRep(inum):\n    return '{0:031b}'.format(int(inum))\n(n, q) = input().split(' ')\nn = int(n)\nq = int(q)\nnums = input().split(' ')\nbinLen = 31\nrowOp = [0] * binLen\nbinMatrix = list(map(binaryRep, nums))\nprefixArr = []\nprefixArr.append([0] * binLen)\nfor i in range(0, n):\n    temp = [0] * binLen\n    for j in range(0, binLen):\n        if binMatrix[i][j] == '1':\n            rowOp[j] += 1\n        temp[j] = rowOp[j]\n    prefixArr.append(temp)\nfor k in range(0, q):\n    (l, r) = input().split(' ')\n    l = int(l)\n    r = int(r)\n    half = int((r - l) / 2)\n    fnum = 0\n    for c in range(0, binLen):\n        ones = prefixArr[r][c] - prefixArr[l - 1][c]\n        if ones <= half:\n            fnum += pow(2, binLen - 1 - c)\n    res.append(fnum)\nfor xx in res:\n    print(xx)", "def add_array(A, B):\n    return [A[i] + B[i] for i in range(len(A))]\n\ndef subtract_array(A, B):\n    return [A[i] - B[i] for i in range(len(A))]\n(values, queries) = [int(i) for i in input().split()]\nrow = [0] * 31\ncum_bit_counter = [list(row)]\nfor value in input().split():\n    counter = 0\n    value = int(value)\n    while value != 0:\n        row[counter] += value % 2\n        value = value >> 1\n        counter += 1\n    cum_bit_counter.append(list(row))\nfor query in range(queries):\n    (L, R) = [int(i) for i in input().split()]\n    length = R - L\n    bit_counter = subtract_array(cum_bit_counter[R], cum_bit_counter[L - 1])\n    for i in range(len(bit_counter)):\n        if bit_counter[i] * 2 > length:\n            bit_counter[i] = 0\n        else:\n            bit_counter[i] = 1\n    bin_string = ''.join([str(i) for i in reversed(bit_counter)])\n    print(int(bin_string, 2))", "def add_array(A, B):\n    return [A[i] + B[i] for i in range(len(A))]\n\ndef subtract_array(A, B):\n    return [A[i] - B[i] for i in range(len(A))]\n(values, queries) = [int(i) for i in input().split()]\nrow = [0] * 31\ncum_bit_counter = [list(row)]\nfor value in input().split():\n    counter = 0\n    value = int(value)\n    while value != 0:\n        row[counter] += value % 2\n        value = value >> 1\n        counter += 1\n    cum_bit_counter.append(list(row))\nfor query in range(queries):\n    (L, R) = [int(i) for i in input().split()]\n    length = R - L\n    bit_counter = subtract_array(cum_bit_counter[R], cum_bit_counter[L - 1])\n    for i in range(len(bit_counter)):\n        if bit_counter[i] * 2 > length:\n            bit_counter[i] = 0\n        else:\n            bit_counter[i] = 1\n    bin_string = ''.join([str(i) for i in reversed(bit_counter)])\n    print(int(bin_string, 2))", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nb = [format(x, '031b') for x in a]\nc1 = [[0] * 31]\nfor i in range(n):\n    temp = []\n    for j in range(31):\n        temp.append(c1[i][j] + int(b[i][j]))\n    c1.append(temp)\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    res = ''\n    tc = r - l + 1\n    for j in range(31):\n        co1 = c1[r][j] - c1[l - 1][j]\n        co0 = tc - co1\n        if co0 > co1:\n            res += '1'\n        else:\n            res += '0'\n    print(int(res, 2))", "from itertools import accumulate, chain\nfrom functools import reduce\nfrom operator import add, or_\nR = lambda : map(int, input().split())\nbits = lambda x: [x >> i & 1 for i in range(31)]\nplus = lambda x, y: list(map(add, x, y))\n(n, q) = R()\ns = list(accumulate(map(bits, chain((0,), R())), plus))\nfor _ in range(q):\n    (l, r) = R()\n    l -= 1\n    print(reduce(or_, (1 << i for (i, (sl, sr)) in enumerate(zip(s[l], s[r])) if 2 * (sr - sl) < r - l), 0))", "from itertools import accumulate, chain\nfrom functools import reduce\nfrom operator import or_\nR = lambda : map(int, input().split())\nbits = lambda x: [x >> i & 1 for i in range(31)]\nadd = lambda a, b: [sum(x) for x in zip(a, b)]\n(n, q) = R()\ns = list(accumulate(map(bits, chain((0,), R())), add))\nfor _ in range(q):\n    (l, r) = R()\n    l -= 1\n    print(reduce(or_, (1 << i for (i, (sl, sr)) in enumerate(zip(s[l], s[r])) if 2 * (sr - sl) < r - l), 0))", "from itertools import accumulate, chain, repeat\nfrom functools import reduce\nfrom operator import or_\nR = lambda : map(int, input().split())\nbits = lambda x: [x >> i & 1 for i in range(31)]\nadd = lambda a, b: [sum(x) for x in zip(a, b)]\n(n, q) = R()\ns = list(chain((repeat(0),), accumulate(map(bits, R()), add)))\nfor _ in range(q):\n    (l, r) = R()\n    l -= 1\n    print(reduce(or_, (1 << i for (i, (sl, sr)) in enumerate(zip(s[l], s[r])) if 2 * (sr - sl) < r - l), 0))", "from itertools import accumulate, chain, repeat\nfrom functools import reduce\nfrom operator import or_\nR = lambda : map(int, input().split())\nbits = lambda x: [x >> i & 1 for i in range(31)]\nadd = lambda a, b: [sum(x) for x in zip(a, b)]\n(n, q) = R()\ns = tuple(chain((repeat(0),), accumulate(map(bits, R()), add)))\nfor _ in range(q):\n    (l, r) = R()\n    l -= 1\n    print(reduce(or_, (1 << i for (i, (sl, sr)) in enumerate(zip(s[l], s[r])) if 2 * (sr - sl) < r - l), 0))", "from itertools import accumulate, repeat\nfrom functools import reduce\nfrom operator import or_\nR = lambda : map(int, input().split())\nbits = lambda x: [x >> i & 1 for i in range(31)]\nadd = lambda a, b: [sum(x) for x in zip(a, b)]\n(n, q) = R()\ns = [repeat(0)] + list(accumulate(map(bits, R()), add))\nfor _ in range(q):\n    (l, r) = R()\n    l -= 1\n    print(reduce(or_, (1 << i for (i, (sl, sr)) in enumerate(zip(s[l], s[r])) if 2 * (sr - sl) < r - l), 0))", "from itertools import accumulate, chain, repeat\nfrom functools import reduce\nfrom operator import or_\nR = lambda : map(int, input().split())\nbits = lambda x: [x >> i & 1 for i in range(31)]\nadd = lambda a, b: [sum(x) for x in zip(a, b)]\n(n, q) = R()\ns = list(chain((repeat(0),), accumulate(map(bits, R()), add)))\nfor _ in range(q):\n    (l, r) = R()\n    l -= 1\n    print(reduce(or_, (1 << i for (i, (sl, sr)) in enumerate(zip(s[l], s[r])) if 2 * (sr - sl) < r - l), 0))", "from itertools import accumulate, repeat\nfrom functools import reduce\nfrom operator import or_\nR = lambda : map(int, input().split())\nbits = lambda x: [x >> i & 1 for i in range(31)]\nadd = lambda a, b: [sum(x) for x in zip(a, b)]\n(n, q) = R()\ns = [repeat(0)] + list(accumulate(map(bits, R()), add))\nfor _ in range(q):\n    (l, r) = R()\n    l -= 1\n    print(reduce(or_, (1 << i for (i, (sl, sr)) in enumerate(zip(s[l], s[r])) if 2 * (sr - sl) < r - l), 0))", "from itertools import accumulate, repeat\nfrom functools import reduce\nfrom operator import or_\nR = lambda : map(int, input().split())\nbits = lambda x: [x >> i & 1 for i in range(31)]\nadd = lambda a, b: [sum(x) for x in zip(a, b)]\n(n, q) = R()\ns = [repeat(0)] + list(accumulate(map(bits, R()), add))\nfor _ in range(q):\n    (l, r) = R()\n    l -= 1\n    print(reduce(or_, (1 << i for (i, (sl, sr)) in enumerate(zip(s[l], s[r])) if 2 * (sr - sl) < r - l), 0))", "from itertools import accumulate, repeat\nfrom functools import reduce\nfrom operator import or_, add, neg\nR = lambda : map(int, input().split())\nbits = lambda x: [x >> i & 1 for i in range(31)]\nplus = lambda a, b: [sum(x) for x in zip(a, b)]\n(n, q) = R()\ns = [repeat(0)] + list(accumulate(map(bits, R()), plus))\nfor _ in range(q):\n    (l, r) = R()\n    l -= 1\n    print(reduce(or_, (1 << i for (i, d) in enumerate(map(add, map(neg, s[l]), s[r])) if 2 * d < r - l), 0))", "from itertools import accumulate, repeat\nfrom functools import reduce\nfrom operator import or_\nR = lambda : map(int, input().split())\nbits = lambda x: [x >> i & 1 for i in range(31)]\nadd = lambda a, b: [sum(x) for x in zip(a, b)]\n(n, q) = R()\ns = [repeat(0)] + list(accumulate(map(bits, R()), add))\nfor _ in range(q):\n    (l, r) = R()\n    l -= 1\n    print(reduce(or_, (1 << i for (i, (sl, sr)) in enumerate(zip(s[l], s[r])) if 2 * (sr - sl) < r - l), 0))", "from itertools import accumulate, repeat\nfrom functools import reduce\nfrom operator import or_\nR = lambda : map(int, input().split())\nbits = lambda x: [x >> i & 1 for i in range(31)]\nadd = lambda a, b: [sum(x) for x in zip(a, b)]\n(n, q) = R()\ns = [repeat(0)] + list(accumulate(map(bits, R()), add))\nfor _ in range(q):\n    (l, r) = R()\n    l -= 1\n    x = reduce(or_, (1 << i for (i, (sl, sr)) in enumerate(zip(s[l], s[r])) if 2 * (sr - sl) < r - l))\n    print(x)", "from itertools import accumulate, repeat\nfrom functools import reduce\nfrom operator import or_\nR = lambda : map(int, input().split())\nbits = lambda x: [x >> i & 1 for i in range(31)]\nadd = lambda a, b: [sum(x) for x in zip(a, b)]\n(n, q) = R()\ns = [repeat(0)] + list(accumulate(map(bits, R()), add))\nfor _ in range(q):\n    (l, r) = R()\n    l -= 1\n    x = reduce(or_, (1 << i for (i, (sl, sr)) in enumerate(zip(s[l], s[r])) if 2 * (sr - sl) < r - l), 0)\n    print(x)", "from itertools import accumulate, repeat\nR = lambda : map(int, input().split())\nbits = lambda x: [x >> i & 1 for i in range(31)]\nadd = lambda a, b: [sum(x) for x in zip(a, b)]\n(n, q) = R()\ns = [repeat(0)] + list(accumulate(map(bits, R()), add))\nfor _ in range(q):\n    (l, r) = R()\n    l -= 1\n    x = 0\n    for (i, (sl, sr)) in enumerate(zip(s[l], s[r])):\n        if 2 * (sr - sl) < r - l:\n            x |= 1 << i\n    print(x)", "from itertools import accumulate\nR = lambda : map(int, input().split())\nbits = lambda x: [x >> i & 1 for i in range(31)]\nf = lambda a, b: [sum(x) for x in zip(a, b)]\n(n, q) = R()\ns = [[0] * 31] + list(accumulate(map(bits, R()), f))\nfor _ in range(q):\n    (l, r) = R()\n    l -= 1\n    x = 0\n    for (i, (sl, sr)) in enumerate(zip(s[l], s[r])):\n        if 2 * (sr - sl) < r - l:\n            x |= 1 << i\n    print(x)", "from itertools import accumulate, repeat\nR = lambda : map(int, input().split())\nbits = lambda x: [x >> i & 1 for i in range(31)]\nf = lambda a, b: [sum(x) for x in zip(a, b)]\n(n, q) = R()\ns = [repeat(0)] + list(accumulate(map(bits, R()), f))\nfor _ in range(q):\n    (l, r) = R()\n    l -= 1\n    x = 0\n    for (i, (sl, sr)) in enumerate(zip(s[l], s[r])):\n        if 2 * (sr - sl) < r - l:\n            x |= 1 << i\n    print(x)", "from itertools import accumulate\nR = lambda : map(int, input().split())\nb = lambda x: [x >> i & 1 for i in range(31)]\nf = lambda a, b: [x + y for (x, y) in zip(a, b)]\n(n, q) = R()\ns = [[0] * 31] + list(accumulate(map(b, R()), f))\nfor _ in range(q):\n    (l, r) = R()\n    l -= 1\n    x = 0\n    for (i, (sl, sr)) in enumerate(zip(s[l], s[r])):\n        if 2 * (sr - sl) < r - l:\n            x |= 1 << i\n    print(x)", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nb = [format(x, '031b') for x in a]\nc1 = [[0] * 31]\nfor i in range(n):\n    temp = []\n    for j in range(31):\n        temp.append(c1[i][j] + int(b[i][j]))\n    c1.append(temp)\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    res = ''\n    tc = r - l + 1\n    for j in range(31):\n        co1 = c1[r][j] - c1[l - 1][j]\n        co0 = tc - co1\n        if co0 > co1:\n            res += '1'\n        else:\n            res += '0'\n    print(int(res, 2))", "(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\nprefixsum = [[0] * 31]\nfor i in range(len(arr)):\n    binary = '{0:031b}'.format(arr[i])\n    t = []\n    for j in range(31):\n        t.append(prefixsum[i][j] + int(binary[j]))\n    prefixsum.append(t)\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    count0 = 0\n    count1 = 0\n    binary = ''\n    for j in range(31):\n        count1 = prefixsum[r][j] - prefixsum[l - 1][j]\n        count0 = r - l + 1 - count1\n        if count1 >= count0:\n            binary += '0'\n        else:\n            binary += '1'\n    print(int(binary, 2))", "from collections import defaultdict as dd\nfrom itertools import permutations as pp\nfrom math import *\nfrom random import randint as rd\nfrom bisect import bisect_left as bl\nmod = 10 ** 9 + 7\n(n, q) = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nqu = []\nfor i in range(q):\n    qu.append([int(i) for i in input().split()])\ndp = [[0 for i in range(31)] for j in range(n + 1)]\nfor i in range(n):\n    for j in range(31):\n        if a[i] & 1 << j:\n            dp[i + 1][j] += 1\nfor i in range(1, n + 1):\n    for j in range(31):\n        dp[i][j] += dp[i - 1][j]\nfor ii in qu:\n    (l, r) = ii\n    temp = [0] * 31\n    for i in range(31):\n        temp[i] = dp[r][i] - dp[l - 1][i]\n    ans = [1] * 31\n    le = r - l + 1\n    for i in range(31):\n        onec = temp[i]\n        zeroc = le - temp[i]\n        if onec >= zeroc:\n            ans[i] = 0\n    now = [str(i) for i in ans]\n    now = now[::-1]\n    print(int(''.join(now), 2))", "(n, q) = [int(x) for x in input().split()]\npsum = [[0] * 31]\nc = 0\nfor numl in [list(map(int, bin(int(x))[2:].zfill(31))) for x in input().split()]:\n    psum.append([x + y for (x, y) in zip(psum[c], numl)])\n    c += 1\n\ndef shifting(bitlist):\n    out = 0\n    for bit in bitlist:\n        out = out << 1 | bit\n    return out\nwhile q:\n    (l, r) = [int(x) for x in input().split()]\n    setbits = [y - x for (x, y) in zip(psum[l - 1], psum[r])]\n    size = r - l + 1\n    bitarr = [0 if setbits[i] >= size / 2 else 1 for i in range(31)]\n    print(shifting(bitarr))\n    q -= 1", "from operator import add, sub\n(N, Q) = list(map(int, input().split(' ')))\nA = list(map(int, input().split(' ')))\ncSum = [0] * 31\nS = []\nfor a in A:\n    binary = list(map(int, bin(a)[2:].zfill(31)))\n    cSum = list(map(add, cSum, binary))\n    S.append(cSum)\nfor q in range(0, Q):\n    (L, R) = list(map(int, input().split(' ')))\n    answer = ''\n    (L, R) = (L - 1, R - 1)\n    if L == 0:\n        res = S[R]\n    else:\n        res = list(map(sub, S[R], S[L - 1]))\n    for ones in res:\n        zeros = R - L + 1 - ones\n        if ones >= zeros:\n            answer += '0'\n        else:\n            answer += '1'\n    print(int(answer, 2))", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nb = [format(x, '031b') for x in a]\nc1 = [[0] * 31]\nfor i in range(n):\n    temp = []\n    for j in range(31):\n        temp.append(c1[i][j] + int(b[i][j]))\n    c1.append(temp)\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    res = ''\n    tc = r - l + 1\n    for j in range(31):\n        co1 = c1[r][j] - c1[l - 1][j]\n        co0 = tc - co1\n        if co0 > co1:\n            res += '1'\n        else:\n            res += '0'\n    print(int(res, 2))", "l = list(map(int, input().split()))\nn = l[0]\nq = l[1]\nl1 = input().split()\nfor i in range(0, n):\n    l1[i] = '{:031b}'.format(int(l1[i]))\nmatrix_count = list()\nn1 = 0\nwhile n1 < n:\n    count = [0] * 31\n    x = 0\n    matrix_count.append(count)\n    while x < 31:\n        if len(matrix_count) == 1:\n            if l1[n1][x] == '1':\n                matrix_count[n1][x] = matrix_count[n1][x] + 1\n        elif l1[n1][x] == '1':\n            matrix_count[n1][x] = matrix_count[n1][x] + 1 + matrix_count[n1 - 1][x]\n        else:\n            matrix_count[n1][x] = matrix_count[n1 - 1][x]\n        x = x + 1\n    n1 = n1 + 1\nans = ''\nfor i in range(0, q):\n    x = list(map(int, input().split()))\n    l2 = x[0]\n    r = x[1]\n    ans = ''\n    if l2 == 1:\n        k = r - l2 + 1\n        for i in range(0, 31):\n            if k - matrix_count[r - 1][i] > matrix_count[r - 1][i]:\n                ans = ans + '1'\n            else:\n                ans = ans + '0'\n    else:\n        k = r - l2 + 1\n        tlist = list()\n        for i in range(0, 31):\n            tlist.append(matrix_count[r - 1][i] - matrix_count[l2 - 2][i])\n        for i in range(0, 31):\n            if k - tlist[i] > tlist[i]:\n                ans = ans + '1'\n            else:\n                ans = ans + '0'\n    print(int('0b' + ans, 2))", "def preprocess(mat, arr, n):\n    for i in range(n):\n        b = bin(arr[i])\n        b = b[2:]\n        m = len(b)\n        for j in range(m):\n            if b[j] == '1':\n                mat[i][31 - m + j] += 1\n    for i in range(1, n):\n        for j in range(31):\n            mat[i][j] += mat[i - 1][j]\n    return mat\n\ndef diff(arr1, arr2):\n    arr = []\n    for i in range(31):\n        arr.append(arr1[i] - arr2[i])\n    return arr\n(n, q) = map(int, input().strip().split())\narr = list(map(int, input().strip().split()))\nmat = []\nfor i in range(n):\n    a = []\n    for i in range(31):\n        a.append(0)\n    mat.append(a)\nmat = preprocess(mat, arr, n)\nfor i in range(q):\n    (l, r) = map(int, input().strip().split())\n    d = r - l + 1\n    if l == 1:\n        ans = mat[r - 1]\n    else:\n        ans = diff(mat[r - 1], mat[l - 2])\n    s = ''\n    for i in range(31):\n        if ans[i] >= d - ans[i]:\n            s += '1'\n        else:\n            s += '0'\n    print(2 ** 31 - 1 - int(s, 2))", "(n, q) = map(int, input().split())\nl = list(map(int, input().split()))\nprefix = [[0] * 32 for i in range(n)]\nfor i in range(n):\n    binary = bin(l[i])[2:]\n    length = len(binary)\n    string = [0] * 32\n    for j in range(length - 1, -1, -1):\n        if binary[j] == '1':\n            string[length - 1 - j] += 1\n    if i == 0:\n        for j in range(32):\n            prefix[i][j] = string[j]\n    else:\n        for j in range(32):\n            prefix[i][j] = prefix[i - 1][j] + string[j]\nfor _ in range(q):\n    (left, right) = map(int, input().split())\n    left -= 1\n    right -= 1\n    result = 0\n    for i in range(32):\n        nset = 0\n        if left == 0:\n            nset = prefix[right][i]\n        else:\n            nset = prefix[right][i] - prefix[left - 1][i]\n        if nset >= right - left + 1 - nset:\n            result += int(2 ** i)\n    print(2147483647 - result)", "(n, q) = map(int, input().split())\nA = list(map(int, input().split()))\ncount = [[0 for col in range(n)] for row in range(31)]\nb = [bin(x)[2:][::-1] for x in A]\nfor i in range(n):\n    for j in range(len(b[i])):\n        if b[i][j] == '1':\n            count[j][i] = 1\nfor i in range(31):\n    for j in range(1, n):\n        count[i][j] += count[i][j - 1]\nfor _ in range(q):\n    (l, r) = map(int, input().split())\n    out = 0\n    for i in range(31):\n        if l == 1:\n            c = count[i][r - 1]\n        else:\n            c = count[i][r - 1] - count[i][l - 2]\n        if c < r - l + 1 - c:\n            out += 1 << i\n    print(out)", "import numpy as np\n\ndef compli(b):\n    b = b[2:]\n    compliment = ''\n    for c in b:\n        if c == '0':\n            compliment = compliment + '1'\n        else:\n            compliment = compliment + '0'\n    return compliment\ntemp = [int(x) for x in input().strip().split()]\nn = temp[0]\nq = temp[1]\nvalues = [int(x) for x in input().strip().split()]\ncompliments = []\nfor i in values:\n    compliments.append(compli(bin(i)))\ncommon_length = len(max(compliments, key=len))\ncompliments2 = []\nfor c in compliments:\n    to_add = '1' * (common_length - len(c))\n    c = to_add + c\n    compliments2.append(c)\ncompliments2 = [list(x) for x in compliments2]\ncompliments2 = np.array(compliments2).astype(int).tolist()\nprefixsum = np.cumsum(compliments2, axis=0)\nwhile q != 0:\n    q = q - 1\n    temp = [int(x) for x in input().strip().split()]\n    start = temp[0]\n    end = temp[1]\n    answer = ''\n    length = end - start + 1\n    sum_bits = []\n    decider = (length + 1) // 2\n    if start == 1:\n        L = [0] * common_length\n        R = prefixsum[end - 1]\n    else:\n        L = prefixsum[start - 2]\n        R = prefixsum[end - 1]\n    sum_bits = (R - L).tolist()\n    for b in sum_bits:\n        if length % 2 == 0:\n            if b <= decider:\n                answer = answer + '0'\n            else:\n                answer = answer + '1'\n        elif b < decider:\n            answer = answer + '0'\n        else:\n            answer = answer + '1'\n    answer = '1' * (31 - len(answer)) + answer\n    print(int(answer, 2))", "(n, q) = input().split()\n(n, q) = [int(n), int(q)]\np = list(map(int, input().split()))\nemp = []\nfor lm in range(0, q):\n    (l, r) = list(map(int, input().split()))\n    emp.append([l, r])\na = []\nc = []\nb = [0] * 31\nfor i in range(0, n):\n    a.append([int(rs) for rs in list('{0:031b}'.format(p[i]))])\nc.append(a[0])\nfor i in range(1, len(a)):\n    c.append([sum(x) for x in zip(a[i], c[i - 1])])\nfor ps in range(0, q):\n    tt = []\n    tat = []\n    la = emp[ps][0]\n    ra = emp[ps][1]\n    if la == 1:\n        tt = c[ra - 1]\n    else:\n        tt = [x - y for (x, y) in zip(c[ra - 1], c[la - 2])]\n    for qs in range(0, 31):\n        if ra - la + 1 - tt[qs] > tt[qs]:\n            tat.append('1')\n        else:\n            tat.append('0')\n    pqr = ''.join(tat)\n    jkl = int(pqr, 2)\n    print(jkl)", "(n, q) = map(int, input().split())\nrah = [0] * 31\na = input().split()\narr = []\nfor i in range(len(a)):\n    tmp = int(a[i])\n    tmp_l = rah[:]\n    j = 30\n    while tmp > 0:\n        tmp_l[j] = tmp % 2\n        j -= 1\n        tmp //= 2\n    arr.append(tmp_l)\narr_f = []\narr_f.append(rah[:])\narr_f.append(arr[0])\nfor i in range(1, len(arr)):\n    tmp_l = rah[:]\n    for j in range(len(tmp_l)):\n        tmp_l[j] = arr[i][j] + arr_f[len(arr_f) - 1][j]\n    arr_f.append(tmp_l)\nfor tp in range(q):\n    (l, r) = map(int, input().split())\n    f_ans = 0\n    cou = r - l + 1\n    for j in range(31):\n        if (arr_f[r][j] - arr_f[l - 1][j]) * 2 < cou:\n            f_ans += pow(2, 30 - j)\n    print(f_ans)", "(n, q) = input().split()\n(n, q) = [int(n), int(q)]\nl1 = [int(num) for num in input().split()]\nb = []\nfor j in range(q):\n    (x, y) = input().split()\n    (x, y) = [int(x), int(y)]\n    b.append([x, y])\nl2 = []\nprev = 0\ntemp = [0] * 31\nfor p in range(n):\n    if p == 0:\n        s1 = format(l1[p], 'b')\n        s2 = []\n        for g in range(31 - len(s1)):\n            s2.append(0)\n        for g in range(31 - len(s1), 31, 1):\n            s2.append(int(s1[g - 31 + len(s1)]))\n        l2.append(s2)\n        temp = s2\n    else:\n        s1 = format(l1[p], 'b')\n        s2 = []\n        for g in range(31 - len(s1)):\n            s2.append(0)\n        for g in range(31 - len(s1), 31, 1):\n            s2.append(int(s1[g - 31 + len(s1)]))\n        temp = [x + y for (x, y) in zip(temp, s2)]\n        l2.append(temp)\nfor c in range(q):\n    l = b[c][0]\n    r = b[c][1]\n    l3 = ['0'] * 31\n    t = []\n    if l == 1:\n        t = l2[r - 1]\n    else:\n        t = [x - y for (x, y) in zip(l2[r - 1], l2[l - 2])]\n    val = r - l + 1\n    for h in range(0, 31, 1):\n        if t[h] >= val - t[h]:\n            l3.append('0')\n        else:\n            l3.append('1')\n    str1 = ''.join(l3)\n    n1 = int(str1, 2)\n    print(n1, end='\\n')", "(n, q) = tuple(map(int, input().split()))\na = [0] + list(map(int, input().split()))\ncount = [[int(bool(x & 1 << y)) for y in range(32)] for x in a]\nfor i in range(1, n + 1):\n    count[i] = list(map(sum, zip(count[i], count[i - 1])))\nfor _ in range(q):\n    (l, r) = tuple(map(int, input().split()))\n    diff = []\n    for i in range(32):\n        temp = count[r][i] - count[l - 1][i]\n        if temp > r - l - temp:\n            diff.append(0)\n        else:\n            diff.append(1)\n    num = 0\n    x = 0\n    for k in diff[:-1]:\n        num += (1 << x) * k\n        x += 1\n    print(num)", "(n, q) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nbinary = []\nfor x in a:\n    temp = '{0:b}'.format(x)\n    temp = '0' * (31 - len(temp)) + temp\n    binary.append(temp)\nbinary = [list(map(int, p)) for p in binary]\nt = []\nfor i in range(31):\n    t.append(0)\nfinal = []\nfinal.append(t)\nfor i in range(n):\n    t = [sum(x) for x in zip(t, binary[i])]\n    final.append(t)\nfor a0 in range(q):\n    (l, r) = [int(x) for x in input().split()]\n    (l, r) = (l - 1, r)\n    ans = [x - y for (x, y) in zip(final[r], final[l])]\n    f = ''\n    for x in ans:\n        if r - l - x > x:\n            f = f + '1'\n        else:\n            f = f + '0'\n    f = int(f, 2)\n    print(f)", "def binaryde(a):\n    return '{0:b}'.format(a)\n(n, q) = list(map(int, input().split()))\nllist = list(map(int, input().split()))\nsub = 2 ** 31\nkitnezeroes = []\ntemplist = []\nfor x in range(31):\n    zeroes = 0\n    sub /= 2\n    templist = []\n    for y in range(n):\n        if llist[y] - sub < 0:\n            zeroes += 1\n        else:\n            llist[y] -= sub\n        templist.append(zeroes)\n    kitnezeroes.append(list(templist))\nfor i in range(q):\n    (l, r) = list(map(int, input().split()))\n    kitneelements = r - l + 1\n    ans = ''\n    zeroes = 0\n    for j in range(31):\n        if l - 2 < 0:\n            zeroes = kitnezeroes[j][r - 1]\n        else:\n            zeroes = kitnezeroes[j][r - 1] - kitnezeroes[j][l - 2]\n        if zeroes > kitneelements // 2:\n            ans = ans + '1'\n        else:\n            ans = ans + '0'\n    print(int(ans, 2))", "(N, Q) = [int(x) for x in input().split()]\nA = [int(x) for x in input().split()]\nA = list(map(lambda n: [n >> i & 1 for i in range(31)], A))\nB = []\nB.append(A[0])\nfor i in range(1, N):\n    T = []\n    for j in range(31):\n        T.append(A[i][j] + B[i - 1][j])\n    B.append(T)\nfor i in range(Q):\n    (l, r) = [int(x) for x in input().split()]\n    (l, r) = (l - 1, r - 1)\n    T = []\n    to_app = [0] * 31 if l == 0 else B[l - 1]\n    c_sum = 0\n    for j in range(30, -1, -1):\n        c_sum |= 0 if 2 * (B[r][j] - to_app[j]) >= r - l + 1 else 1\n        c_sum <<= 1\n    print(c_sum >> 1)", "from operator import add\n(n, q) = input().split()\nn = int(n)\nq = int(q)\na = list(map(int, input().split()))\nfor i in range(0, n):\n    a[i] = '{:031b}'.format(a[i])\nt = [[0 for i in range(0, 31)]]\nfor i in range(0, n):\n    a[i] = list(map(int, a[i]))\n    if i == 0:\n        t[i] = list(map(add, t[i], a[i]))\n    else:\n        t.append([0 for i in range(0, 31)])\n        t[i] = list(map(add, t[i - 1], a[i]))\nfor i in range(0, q):\n    (l, r) = input().split()\n    l = int(l)\n    r = int(r)\n    c = r - l + 1\n    c = c / 2\n    t2 = [0 for i in range(0, 31)]\n    if l == 1:\n        for j in range(0, 31):\n            if t[r - 1][j] >= c:\n                t2[j] = '0'\n            else:\n                t2[j] = '1'\n    else:\n        for j in range(0, 31):\n            if t[r - 1][j] - t[l - 2][j] >= c:\n                t2[j] = '0'\n            else:\n                t2[j] = '1'\n    t2 = ''.join(t2)\n    print(int(t2, 2))", "A = list(map(int, input().split()))\nN = A[0]\nQ = A[1]\nA = list(map(int, input().split()))\nbits = []\nfor i in range(N):\n    num = A[i]\n    bi = bin(num)\n    p = 33 - len(bi)\n    r = bi[:2] + p * '0' + bi[2:]\n    bits.append(r)\ncounts = []\nfor i in range(31):\n    sc = []\n    c = 0\n    for j in range(N):\n        if bits[j][-1] == '1':\n            c += 1\n        else:\n            c -= 1\n        bits[j] = bits[j][:-1]\n        sc.append(c)\n    counts.append(sc)\nfor cases in range(Q):\n    B = list(map(int, input().split()))\n    L = B[0] - 2\n    R = B[1] - 1\n    s = ''\n    for i in range(31):\n        if L < 0:\n            c1 = counts[i][R]\n        else:\n            c1 = counts[i][R] - counts[i][L]\n        if c1 < 0:\n            s = '1' + s\n        else:\n            s = '0' + s\n    s = '0b' + s\n    print(int(s, 2))", "(N, Q) = list(map(int, input().split()))\nai = list(map(int, input().split()))\nbinary = []\nt_count = []\nfor i in range(N):\n    t = []\n    for g in range(31):\n        t.append(0)\n    t_count.append(t)\n    binary.append(bin(ai[i])[2:])\n    binary[i] = '0' * (31 - len(binary[i])) + binary[i]\n    if i != 0:\n        for g in range(31):\n            t_count[i][g] = t_count[i - 1][g] + int(binary[i][g])\n    else:\n        for g in range(31):\n            t_count[0][g] = int(binary[0][g])\nfor i in range(Q):\n    (L, R) = list(map(int, input().split()))\n    L = L - 1\n    R = R - 1\n    t = ''\n    if L == 0:\n        for h in range(31):\n            a = t_count[R][h] / (R - L + 1)\n            if a < 0.5:\n                t += '1'\n            else:\n                t += '0'\n    else:\n        for h in range(31):\n            b = (t_count[R][h] - t_count[L - 1][h]) / (R - L + 1)\n            if b < 0.5:\n                t += '1'\n            else:\n                t += '0'\n    print(int(t, 2))", "(N, Q) = map(int, input().split())\nW = list(map(int, input().split()))\nM = []\nX = bin(W[0])\nX = (33 - len(X)) * '0' + X[2:]\nV = []\nfor C in range(31):\n    V.append(int(X[C]))\nM.append(V)\nfor I in range(1, N):\n    X = bin(W[I])\n    X = (33 - len(X)) * '0' + X[2:]\n    K = []\n    for J in range(31):\n        K.append(M[I - 1][J] + int(X[J]))\n    M.append(K)\nfor Y in range(Q):\n    (L, R) = map(int, input().split())\n    Total = R - L + 1\n    Ans = ''\n    F = Total // 2\n    if L != 1:\n        for P in range(31):\n            C = M[R - 1][P]\n            G = M[L - 2][P]\n            Z = C - G\n            if Z > F:\n                Ans += '0'\n            elif Z == F:\n                if Total % 2 != 0:\n                    Ans += '1'\n                else:\n                    Ans += '0'\n            else:\n                Ans += '1'\n    else:\n        for P in range(31):\n            C = M[R - 1][P]\n            if C > F:\n                Ans += '0'\n            elif C == F:\n                if Total % 2 != 0:\n                    Ans += '1'\n                else:\n                    Ans += '0'\n            else:\n                Ans += '1'\n    print(int(Ans, 2))", "strInp = input()\n(n, q) = strInp.split()\nn = int(n)\nq = int(q)\na = list(map(int, input().split()))\nsums = []\nmask = 1073741824\ncurrent = []\nwhile mask:\n    bit = int(a[0] & mask > 0)\n    current.append(bit)\n    mask >>= 1\nsums.append(current)\nprevious = current\nfor i in range(1, n):\n    current = []\n    mask = 1073741824\n    j = 0\n    while mask:\n        bit = int(a[i] & mask > 0)\n        current.append(bit + previous[j])\n        j += 1\n        mask >>= 1\n    sums.append(current)\n    previous = current\nwhile q != 0:\n    strInp = input()\n    (left, right) = strInp.split()\n    left = int(left)\n    right = int(right)\n    numbers = right - left + 1\n    left -= 1\n    right -= 1\n    xorValue = 0\n    mask = 1073741824\n    for i in range(31):\n        if left != 0:\n            numOfOnes = sums[right][i] - sums[left - 1][i]\n        else:\n            numOfOnes = sums[right][i]\n        numOfZeros = numbers - numOfOnes\n        if numOfZeros > numOfOnes:\n            xorValue |= mask\n        mask >>= 1\n    print(xorValue)\n    q -= 1", "import operator\n(arrsize, query) = map(int, input().split(' '))\narray = map(int, input().split(' '))\nqq = []\nfor i in array:\n    qq.append('{0:b}'.format(i))\nqq2 = []\nfor i in qq:\n    qq3 = []\n    for j in i:\n        qq3.append(j)\n    qq3 = list(map(int, qq3))\n    qq2.append(qq3)\nf_matrix = []\nbindex = 0\nqq1 = []\nfor i in range(31):\n    qq1.append(0)\nfor ix in qq2:\n    for jx in range(len(ix)):\n        qq1[30 - jx] += qq2[bindex][len(ix) - 1 - jx]\n    bindex += 1\n    sam_arr = list(qq1)\n    f_matrix.append(sam_arr)\nfor t in range(query):\n    (range1, range2) = map(int, input().split(' '))\n    leng = range2 - range1 + 1\n    if range1 != 1:\n        update = list(map(operator.sub, f_matrix[range2 - 1], f_matrix[range1 - 2]))\n    else:\n        update = f_matrix[range2 - 1]\n    fin_ans = ''\n    for i in update:\n        if leng - i > i:\n            fin_ans += '1'\n        else:\n            fin_ans += '0'\n    print(int(fin_ans, 2))", "import operator\n(q1, q2) = map(int, input().split(' '))\nq = map(int, input().split(' '))\nqe = []\nfor i in q:\n    qe.append('{0:b}'.format(i))\nar = []\nfor i in range(31):\n    ar.append(0)\narr = []\nfor i in qe:\n    qy = []\n    for j in i:\n        qy.append(j)\n    qy = list(map(int, qy))\n    arr.append(qy)\nar1 = []\nb = 0\nfor i in arr:\n    for j in range(len(i)):\n        ar[30 - j] += arr[b][len(i) - 1 - j]\n    b += 1\n    ar2 = list(ar)\n    ar1.append(ar2)\nfor tal in range(q2):\n    (i1, i2) = map(int, input().split(' '))\n    leng = i2 - i1 + 1\n    if i1 != 1:\n        g = list(map(operator.sub, ar1[i2 - 1], ar1[i1 - 2]))\n    else:\n        g = ar1[i2 - 1]\n    h = ''\n    for i in g:\n        if leng - i > i:\n            h += '1'\n        else:\n            h += '0'\n    print(int(h, 2))", "def onesComp(s):\n    a = list(s)\n    for i in range(len(a)):\n        if a[i] == '1':\n            a[i] = '0'\n        else:\n            a[i] = '1'\n    return ''.join(a)\n\ndef add(a, b):\n    s = [0] * len(a)\n    for i in range(len(a)):\n        s[i] = a[i] + b[i]\n    return s\n(n, q) = list(map(int, input().split()))\na = list(map(int, input().split()))\nbin = []\nfor i in range(len(a)):\n    e = '{0:b}'.format(a[i])\n    e = onesComp(e)\n    e = '1' * (31 - len(e)) + e\n    bin.append(e)\ndp = []\ndp.append(list(map(int, list(bin[0]))))\nfor i in range(1, len(bin)):\n    dp.append(add(dp[i - 1], list(map(int, list(bin[i])))))\nfor z in range(q):\n    (l, r) = list(map(int, input().split()))\n    l -= 1\n    r -= 1\n    w = []\n    for i in range(31):\n        if l > 0:\n            x = dp[l - 1][i]\n        else:\n            x = 0\n        count1 = dp[r][i] - x\n        count0 = r - l - count1 + 1\n        if count1 > count0:\n            w.append('1')\n        else:\n            w.append('0')\n    print(int(''.join(w), 2))", "(n, q) = list(map(int, input().split()))\nb = list(map(int, input().split()))\na = [[0 for x in range(n)] for y in range(31)]\nfor j in range(0, 31):\n    if b[0] & 1 << j:\n        a[j][0] = 1\n    else:\n        a[j][0] = 0\nfor i in range(1, n):\n    for j in range(0, 31):\n        if b[i] & 1 << j:\n            a[j][i] = a[j][i - 1] + 1\n        else:\n            a[j][i] = a[j][i - 1]\nwhile q > 0:\n    q = q - 1\n    t = 0\n    (l, r) = list(map(int, input().split()))\n    diff = r - l + 1\n    if l > 1:\n        for i in range(0, 31):\n            c = a[i][r - 1] - a[i][l - 2]\n            if diff - c > c:\n                t = t + (1 << i)\n    else:\n        for i in range(0, 31):\n            c = a[i][r - 1]\n            if diff - c > c:\n                t = t + (1 << i)\n    print(t)", "import sys\n(n, q) = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\nv = [[0] * 31]\nfor i in range(n):\n    v.append(list('{0:031b}'.format(a[i])))\nfor i in range(1, n + 1):\n    for j in range(31):\n        v[i][j] = int(v[i - 1][j]) + int(v[i][j])\nfor i in range(q):\n    ans = [0] * 31\n    (l, r) = map(int, sys.stdin.readline().split())\n    for j in range(31):\n        if v[r][j] - v[l - 1][j] >= (r - l) // 2 + 1:\n            ans[j] = 0\n        else:\n            ans[j] = 1\n    ans = ''.join((str(e) for e in ans))\n    print(int(ans, 2))", "def solve():\n    (N, Q) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    WIDTH = 31\n\n    def doMatrix(nums):\n        matrix = [[0] * WIDTH for _ in range(N)]\n        for (i, k) in enumerate(nums):\n            row = matrix[i]\n            for j in range(WIDTH):\n                row[j] = k >> WIDTH - 1 - j & 1\n        return matrix\n    matrix = doMatrix(nums)\n    preSum = [[0] * WIDTH for _ in range(N + 1)]\n    for j in range(WIDTH):\n        for i in range(1, len(preSum)):\n            preSum[i][j] = preSum[i - 1][j] + matrix[i - 1][j]\n    for _ in range(Q):\n        (L, R) = map(int, input().split())\n        n = R - L + 1\n        half = n / 2 - 0.1\n        rowL = preSum[L - 1]\n        rowR = preSum[R]\n        row = [b - a for (a, b) in zip(rowL, rowR)]\n        res = ['1'] * WIDTH\n        for i in range(WIDTH):\n            if row[i] >= half:\n                res[i] = '0'\n        print(int(''.join(res), 2))\nT = 1\nfor _ in range(T):\n    solve()", "def padd(arr, l):\n    for i in range(len(arr)):\n        arr[i] = arr[i] + '0' * (l - len(arr[i]))\n    return arr\n(n, m) = map(int, input().split())\na = map(int, input().split())\na = [bin(i)[2:][::-1] for i in a]\nmm = max((len(i) for i in a))\na = padd(a, mm)\nans = [[] for i in range(n)]\nans[0] = [int(i) for i in a[0]]\nmax1 = 0\nqq = []\nfor _ in range(m):\n    (l, r) = map(int, input().split())\n    max1 = max(max1, r)\n    qq.append((l, r))\nfor j in range(mm):\n    for i in range(1, len(a)):\n        if len(a[i]) > j:\n            if a[i][j] == '1':\n                ans[i].append(ans[i - 1][j] + 1)\n            else:\n                ans[i].append(ans[i - 1][j])\nfor q in qq:\n    (l, r) = q\n    an = ['1' for _ in range(31)]\n    for i in range(mm):\n        if l > 1:\n            if ans[r - 1][i] - ans[l - 2][i] >= (r - l + 1) / 2:\n                an[i] = '0'\n        elif ans[r - 1][i] >= r / 2:\n            an[i] = '0'\n    print(int(''.join(an[::-1]), 2))", "def binary(N):\n    bits = []\n    while N != 0:\n        bits.append(N % 2)\n        N = int(N / 2)\n    return bits\n\ndef decimal(bits):\n    val = 0\n    for bit in bits:\n        val = val * 2 + bit\n    return val\n(N, Q) = [int(x) for x in input().strip().split(' ')]\nA = [binary(int(x)) for x in input().strip().split(' ')]\nA = [[]] + A\nmax_length = -1\nfor val in A:\n    max_length = max(max_length, len(val))\nfor val in A:\n    req_length = max_length - len(val)\n    for _ in range(req_length):\n        val.append(0)\nfor i in range(1, len(A)):\n    for j in range(max_length):\n        A[i][j] += A[i - 1][j]\nfor _ in range(Q):\n    (L, R) = [int(x) for x in input().strip().split(' ')]\n    bottom = A[R]\n    top = A[L - 1]\n    ans = []\n    for i in range(max_length):\n        num_ones = bottom[i] - top[i]\n        num_zeroes = R - L + 1 - num_ones\n        if num_zeroes <= num_ones:\n            ans.append(0)\n        else:\n            ans.append(1)\n    first = [1 for _ in range(31 - len(ans))]\n    ans = first + ans[::-1]\n    print(decimal(ans))", "(N, Q) = map(int, input().split())\nA = list(map(int, input().split()))\nabi = [list(map(int, format(A[i], '031b'))) for i in range(N)]\ncd = [[0 for i in range(31)] for i in range(N + 1)]\nfor i in range(1, N + 1):\n    for j in range(31):\n        cd[i][j] = cd[i - 1][j] + abi[i - 1][j]\ntemp = [0 for i in range(31)]\nfor query in range(Q):\n    (l, r) = map(int, input().split())\n    X = ''\n    for i in range(31):\n        temp[i] = cd[r][i] - cd[l - 1][i]\n    for i in range(31):\n        if temp[i] < r - l + 1 - temp[i]:\n            X += '1'\n        else:\n            X += '0'\n    print(int(X, 2))", "(a, b) = map(int, input().split())\nc = list(map(int, input().split()))\nd = []\nx = bin(c[0])\nx = (33 - len(x)) * '0' + x[2:]\nk = []\nfor i in range(31):\n    if x[i] == '0':\n        k.append(0)\n    else:\n        k.append(1)\nd.append(k)\nfor i in range(1, a):\n    x = bin(c[i])\n    x = (33 - len(x)) * '0' + x[2:]\n    k = []\n    for j in range(31):\n        if x[j] == '0':\n            k.append(d[i - 1][j])\n        else:\n            k.append(d[i - 1][j] + 1)\n    d.append(k)\nfor i in range(b):\n    (l, r) = map(int, input().split())\n    m = r - l + 1\n    z = ''\n    if l == 1:\n        for j in range(31):\n            if m % 2 == 0:\n                if d[r - 1][j] >= m // 2:\n                    z = z + '0'\n                else:\n                    z = z + '1'\n            elif d[r - 1][j] > m // 2:\n                z = z + '0'\n            else:\n                z = z + '1'\n    else:\n        for j in range(31):\n            if m % 2 == 0:\n                if d[r - 1][j] - d[l - 2][j] >= m // 2:\n                    z = z + '0'\n                else:\n                    z = z + '1'\n            elif d[r - 1][j] - d[l - 2][j] > m // 2:\n                z = z + '0'\n            else:\n                z = z + '1'\n    print(int(z, 2))", "import math\n\ndef func1():\n    return [int(x) for x in input().split()]\n(n, q) = func1()\nll = func1()\nm = [[0 for _ in range(31)]]\nc1 = [0 for _ in range(31)]\nfor i in range(n):\n    bb = '{:031b}'.format(ll[i])\n    c2 = [c1[x] + int(bb[x]) for x in range(31)]\n    m.append(c2)\n    c1 = c2\n\ndef func2():\n    (l, r) = func1()\n    md = math.ceil((r - l + 1) / 2)\n    p = []\n    pp = 0\n    for i in range(31):\n        if m[r][i] - m[l - 1][i] < md:\n            p.append('1')\n        else:\n            p.append('0')\n    return int(''.join(p), 2)\na = []\nfor _ in range(q):\n    a.append(func2())\nfor aa in a:\n    print(aa)", "(n, q) = map(int, input().split())\narr = [int(x) for x in input().split()]\nnew_array = []\nfor i in range(n):\n    new_array.append([])\n    for j in range(31):\n        if arr[i] & 1 << j:\n            if i == 0:\n                new_array[i].append(1)\n            else:\n                new_array[i].append(new_array[i - 1][j] + 1)\n        elif i == 0:\n            new_array[i].append(0)\n        else:\n            new_array[i].append(new_array[i - 1][j])\nfor i in range(q):\n    (x, y) = map(int, input().split())\n    new_sum = 1\n    max1 = 0\n    mid = (y - x + 1) / 2\n    for j in range(31):\n        if x == 1:\n            if new_array[y - 1][j] < mid:\n                max1 += new_sum\n        elif new_array[y - 1][j] - new_array[x - 2][j] < mid:\n            max1 += new_sum\n        new_sum *= 2\n    print(max1)", "from sys import setrecursionlimit, exit\nfrom math import ceil, floor, acos, pi\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom fractions import gcd\nfrom functools import reduce\nfrom collections import Counter\nimport queue\nsetrecursionlimit(10 ** 7)\nRI = lambda x=' ': list(map(int, input().split(x)))\nRS = lambda x=' ': input().rstrip().split(x)\ndX = [-1, 1, 0, 0, -1, 1, -1, 1]\ndY = [0, 0, -1, 1, 1, -1, -1, 1]\nmod = int(1000000000.0 + 7)\neps = 1e-06\nMAX = 2 ** 32\n(N, Q) = RI()\nA = RI()\ns = [0] * 31\nx = [s.copy()]\nfor n in A:\n    i = 0\n    while n:\n        if n % 2:\n            s[i] += 1\n        n //= 2\n        i += 1\n    x.append(s.copy())\nfor _ in range(Q):\n    (L, R) = RI()\n    v = [x[R][i] - x[L - 1][i] for i in range(31)]\n    ans = 0\n    for i in range(31):\n        if v[i] < (R - L + 1) / 2:\n            ans += 2 ** i\n    print(ans)", "(n, q) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\narra = [[0] * 31 for i in range(n + 1)]\nfor num in range(n):\n    tempStr = bin(a[num])[2:][::-1]\n    for i in range(31):\n        arra[num + 1][i] = arra[num][i]\n    for i in range(len(tempStr)):\n        arra[num + 1][i] += int(tempStr[i])\nansarr = [0] * q\nfor z in range(q):\n    (l, r) = [int(x) for x in input().split()]\n    ans = [0] * 31\n    for i in range(31):\n        if arra[r][i] - arra[l - 1][i] < (r - l + 1) / 2:\n            ans[i] = 1\n    ans = ans[::-1]\n    ansarr[z] = int('0b' + ''.join([str(x) for x in ans]), 2)\nprint('\\n'.join([str(x) for x in ansarr]))", "import numpy as np\n(n, q) = map(int, input().strip().split())\narr = np.array(list(map(int, input().split())))\ncon = lambda val: [int(val) for val in np.binary_repr(val, width=31)]\nmp = np.array(list(map(con, arr)))\nzero = np.zeros(31, dtype=int)\nans = np.array(mp)\nfor i in range(1, len(mp)):\n    ans[i] += ans[i - 1]\nwhile q:\n    q = q - 1\n    (l, r) = map(int, input().strip().split())\n    no = r - l + 1\n    l = l - 1\n    r = r - 1\n    if l == 0:\n        final_ans = ans[r]\n    else:\n        final_ans = ans[r] - ans[l - 1]\n    mid = (no + 1) // 2\n    count = 0\n    for (i, val) in enumerate(reversed(final_ans)):\n        if val < mid:\n            count += 2 ** i\n    print(count)", "(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\npres = [[0] * 31 for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    j = bin(arr[i - 1])[2:]\n    j = j[::-1]\n    for k in range(len(j)):\n        pres[i][k] = int(j[k])\nfor i in range(1, n + 1):\n    for k in range(31):\n        pres[i][k] += pres[i - 1][k]\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    tr = 2 ** 31 - 1\n    x = 1\n    for k in range(31):\n        diff = pres[r][k] - pres[l - 1][k]\n        if diff > (r - l) // 2:\n            tr ^= x\n        x *= 2\n    print(tr)", "(n, q) = [int(__) for __ in input().strip().split()]\narr = [int(__) for __ in input().strip().split()]\nle = len(bin(max(arr))) - 2\nfor i in range(len(arr)):\n    arr[i] = bin(arr[i])[2:].zfill(le)\ndic = {}\nfor i in range(le):\n    x = arr[0][i]\n    pre = [1 if arr[0][i] == '1' else 0]\n    for j in range(1, n):\n        if arr[j][i] == '1':\n            pre.append(pre[j - 1] + 1)\n        else:\n            pre.append(pre[j - 1])\n    dic[i] = pre\nfor _ in range(q):\n    ans = ['0' for i in range(le)]\n    (l, r) = [int(__) for __ in input().strip().split()]\n    (l, r) = (l - 1, r - 1)\n    for i in range(le):\n        ones = 0\n        if l == 0:\n            ones = dic[i][r]\n        else:\n            ones = dic[i][r] - dic[i][l - 1]\n        zros = r - l + 1 - ones\n        if zros > ones:\n            ans[i] = '1'\n        else:\n            ans[i] = '0'\n    print(int('1' * (31 - le) + ''.join(ans), 2))", "import math\n\ndef reverse(s):\n    str = ''\n    for i in s:\n        str = i + str\n    return str\n(n, q) = map(int, input().split())\nA = list(map(int, input().split()))\na1 = []\nval = [0] * 31\ntemp = [0] * 31\na1.append(temp)\nfor va in A:\n    q2 = '{0:b}'.format(va)\n    q1 = reverse(q2)\n    for i in range(len(q1)):\n        if q1[i] == '1':\n            val[i] += 1\n    a1.append(val[:])\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    res = ''\n    for j in range(31):\n        if a1[r][j] - a1[l - 1][j] > math.floor((r - l) / 2):\n            res += '0'\n        else:\n            res += '1'\n    print(int(reverse(res), 2))", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\na1 = []\nl1 = []\nval = [0] * 31\na1.append(val[:])\nfor x in a:\n    w = '{0:b}'.format(x)\n    w = w[::-1]\n    l1.append(len(w))\n    for i in range(len(w)):\n        if w[i] == '1':\n            val[i] += 1\n    a1.append(val[:])\nfor i in range(q):\n    (l, r) = map(int, input().split())\n    ans = ''\n    for j in range(31):\n        if a1[r][j] - a1[l - 1][j] > (r - l) // 2:\n            ans += '0'\n        else:\n            ans += '1'\n    print(int(ans[::-1], 2))", "def main():\n    (n, q) = map(int, input().split())\n    binary = ['{:031b}'.format(int(i)) for i in input().split()]\n    zero = [[0 for i in range(n)] for j in range(31)]\n    one = [[0 for i in range(n)] for j in range(31)]\n    for pos in range(31):\n        ones = 0\n        zeroes = 0\n        item_index = 0\n        for item in binary:\n            if item[pos] == '0':\n                zeroes += 1\n            elif item[pos] == '1':\n                ones += 1\n            zero[pos][item_index] = zeroes\n            one[pos][item_index] = ones\n            item_index += 1\n    for queries in range(q):\n        (l, r) = map(int, input().split())\n        ans = ''\n        for pos in range(31):\n            if l == 1:\n                ones = one[pos][r - 1]\n                zeroes = zero[pos][r - 1]\n            else:\n                ones = one[pos][r - 1] - one[pos][l - 2]\n                zeroes = zero[pos][r - 1] - zero[pos][l - 2]\n            if ones < zeroes:\n                ans = ans + '1'\n            elif ones >= zeroes:\n                ans = ans + '0'\n        print(int(ans, 2))\nmain()", "(N, Q) = [int(i) for i in input().split(' ')]\nList = [int(i) for i in input().split(' ')]\nList1 = [[0 for i in range(31)]]\nFinal_List1 = []\ntemp = 0\nfor i in List:\n    Final_List = list(map(int, list(str('{0:031b}'.format(i)))))\n    Final_List1 = []\n    for j in range(31):\n        Final_List1.append(Final_List[j] + List1[temp][j])\n    List1.append(Final_List1)\n    temp += 1\nfor _ in range(Q):\n    (L, R) = [int(i) for i in input().split(' ')]\n    num = (R - L + 1) / 2\n    Final_List2 = []\n    for j in range(31):\n        if num <= List1[R][j] - List1[L - 1][j]:\n            Final_List2.append('0')\n        else:\n            Final_List2.append('1')\n    print(int(''.join(Final_List2), 2))", "import sys\nx = 2\nx = [int(x) for x in sys.stdin.readline().split()]\nn = x[0]\nq = x[1]\nl = [int(n) for n in sys.stdin.readline().split()]\nb = []\nM = 0\nfor i in range(n):\n    t = []\n    drain = [int(x) for x in list(bin(l[i])[2:])]\n    for i in range(32 - len(drain)):\n        t.append(0)\n    t += drain[:]\n    if M < len(drain):\n        M = len(t)\n    b.append(t)\nfor i in range(1, n):\n    b[i] = [fi + se for (fi, se) in zip(b[i], b[i - 1])]\nfor _ in range(q):\n    r = [int(x) for x in sys.stdin.readline().split()]\n    d = r[1] - r[0]\n    s = [0] * M\n    svC = d // 2\n    for i in range(M):\n        if r[0] == 1:\n            if b[r[1] - 1][i] <= svC:\n                s[i] = 0\n            else:\n                s[i] = 1\n        elif b[r[1] - 1][i] - b[r[0] - 2][i] <= svC:\n            s[i] = 0\n        else:\n            s[i] = 1\n    ans = 0\n    for i in range(M):\n        ans += 2 ** i * s[M - i - 1]\n    print(2147483647 - ans)", "import sys\n\ndef makeMatch(l):\n    l.sort()\n    (res, cnt) = ([], 1)\n    for i in range(1, len(l)):\n        if l[i] == l[i - 1]:\n            cnt += 1\n        else:\n            res.append((l[i - 1], cnt))\n            cnt = 1\n        if i == len(l) - 1:\n            res.append((l[i], cnt))\n    return sorted(res, key=lambda x: (x[1], x[0]))\n(n, q) = [int(x) for x in sys.stdin.readline().split()]\nl = [int(n) for n in sys.stdin.readline().split()]\nb = []\nm = 0\nfor i in range(n):\n    (t, tle) = ([], [int(x) for x in list(bin(l[i])[2:])])\n    for i in range(32 - len(tle)):\n        t.append(0)\n    t += tle[:]\n    if m < len(tle):\n        m = len(t)\n    b.append(t)\nfor i in range(1, n):\n    b[i] = [fi + se for (fi, se) in zip(b[i], b[i - 1])]\nfor _ in range(q):\n    r = [int(x) for x in sys.stdin.readline().split()]\n    d = r[1] - r[0]\n    s = [None] * m\n    chk = d // 2\n    for i in range(m):\n        if r[0] == 1:\n            if b[r[1] - 1][i] <= chk:\n                s[i] = 0\n            else:\n                s[i] = 1\n        elif b[r[1] - 1][i] - b[r[0] - 2][i] <= chk:\n            s[i] = 0\n        else:\n            s[i] = 1\n    ans = 0\n    for i in range(m):\n        ans += 2 ** i * s[m - i - 1]\n    print(2147483647 - ans)", "(N, Q) = [int(i) for i in input().split(' ')]\nlis = [int(i) for i in input().split(' ')]\nend_lis = [[0 for i in range(31)]]\nl1 = []\ntemp = 0\nfor i in lis:\n    l = list(map(int, list(str('{0:031b}'.format(i)))))\n    l1 = []\n    for j in range(31):\n        l1.append(l[j] + end_lis[temp][j])\n    end_lis.append(l1)\n    temp += 1\nfor _ in range(Q):\n    (L, R) = [int(i) for i in input().split(' ')]\n    num = (R - L + 1) / 2\n    final = []\n    for j in range(31):\n        if num <= end_lis[R][j] - end_lis[L - 1][j]:\n            final.append('0')\n        else:\n            final.append('1')\n    print(int(''.join(final), 2))", "def prefix_sums(A):\n    res = []\n    for bit in range(31):\n        res_bit = []\n        cumsum = 0\n        for a in A:\n            cumsum += (a & 1 << bit) >> bit\n            res_bit.append(cumsum)\n        res.append(res_bit)\n    return res\n\ndef main():\n    (N, Q) = (int(_) for _ in input().split())\n    A = [0] + [int(x) for x in input().split()]\n    psums = prefix_sums(A)\n    for _ in range(Q):\n        (L, R) = (int(x) for x in input().split())\n        length = R - L + 1\n        res = 0\n        for (psum, bit) in zip(psums, range(31)):\n            ones = psum[R] - psum[L - 1]\n            if 2 * ones < length:\n                res = res + (1 << bit)\n        print(res)\nmain()"]