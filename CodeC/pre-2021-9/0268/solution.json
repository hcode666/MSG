["def distance(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\nfor _ in range(int(input())):\n    n = int(input())\n    record = [0] * n ** 2\n    for i in range(n):\n        a = [int(x) for x in input().split()]\n        for j in range(n):\n            record[a[j] - 1] = (j, i)\n    total_walk = 0\n    for i in range(1, len(record)):\n        total_walk += distance(record[i - 1], record[i])\n    print(total_walk)", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        b = list(map(int, input().split()))\n        for (j, d) in enumerate(b):\n            a.append((d, i, j))\n    a.sort()\n    steps = 0\n    for (y, i, j) in a:\n        if y > 1:\n            steps += abs(i - pi) + abs(j - pj)\n        pi = i\n        pj = j\n    print(steps)", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    d = dict()\n    for r in range(0, n):\n        l = list(map(int, input().split()))\n        for p in range(0, n):\n            d[l[p]] = (r, p)\n    s = 0\n    (i, j) = d[1]\n    for k in range(1, n * n):\n        (p, q) = d[k + 1]\n        s += abs(p - i) + abs(q - j)\n        (i, j) = (p, q)\n    print(s)\n    t -= 1", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    d = dict()\n    for r in range(0, n):\n        l = list(map(int, input().split()))\n        for p in range(0, n):\n            d[l[p]] = (r, p)\n    s = 0\n    (i, j) = d[1]\n    for k in range(1, n * n):\n        (p, q) = d[k + 1]\n        s += abs(p - i) + abs(q - j)\n        (i, j) = (p, q)\n    print(s)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    mp = {i: [] for i in range(1, n * n + 1)}\n    for i in range(n):\n        l1 = list(map(int, input().split()))\n        l.append(l1)\n        for j in range(n):\n            mp[l1[j]] = [i, j]\n    ans = 0\n    for i in range(2, n * n + 1):\n        ans += abs(mp[i][0] - mp[i - 1][0]) + abs(mp[i][1] - mp[i - 1][1])\n    print(ans)", "for T in range(int(input())):\n    N = int(input())\n    mat_map = {}\n    matrix = []\n    steps = 0\n    for row in range(N):\n        matrix.append(list(map(int, input().split())))\n        for col in range(N):\n            mat_map[matrix[row][col]] = [row, col]\n    for position in range(2, N ** 2 + 1):\n        steps += abs(mat_map[position - 1][0] - mat_map[position][0]) + abs(mat_map[position - 1][1] - mat_map[position][1])\n    print(steps)", "for _ in range(int(input())):\n    n = int(input())\n    m = []\n    disc = {}\n    c = 0\n    for i in range(n):\n        l = list(map(int, input().split()))\n        m.append(l)\n        for j in range(n):\n            disc[m[i][j]] = [i, j]\n    for k in range(2, n * n + 1):\n        c += abs(disc[k - 1][0] - disc[k][0]) + abs(disc[k - 1][1] - disc[k][1])\n    print(c)", "for t in range(int(input())):\n    n = int(input())\n    plm = {}\n    for i in range(n):\n        x = [int(i) for i in input().split()]\n        for j in range(n):\n            plm[x[j]] = [i, j]\n    plm = [v for (k, v) in sorted(plm.items())]\n    count = 0\n    for i in range(1, n ** 2):\n        count += abs(plm[i][0] - plm[i - 1][0]) + abs(plm[i][1] - plm[i - 1][1])\n    print(count)", "for t in range(int(input())):\n    n = int(input())\n    plm = {}\n    for i in range(n):\n        x = [int(i) for i in input().split()]\n        for j in range(n):\n            plm[x[j]] = [i, j]\n    plm = [v for (k, v) in sorted(plm.items())]\n    count = 0\n    for i in range(1, n ** 2):\n        count += abs(plm[i][0] - plm[i - 1][0]) + abs(plm[i][1] - plm[i - 1][1])\n    print(count)", "for tc in range(int(input())):\n    n = int(input())\n    a = []\n    oldcoord = [0, 0]\n    newcoord = [0, 0]\n    newdist = 0\n    dist = 0\n    matrix = {}\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    for i in range(n):\n        for j in range(n):\n            matrix[a[i][j]] = (i, j)\n    oldcoord = matrix[1]\n    for i in range(2, n ** 2 + 1):\n        newcoord = matrix[i]\n        newdist = abs(newcoord[0] - oldcoord[0]) + abs(newcoord[1] - oldcoord[1])\n        dist += newdist\n        oldcoord = newcoord\n    print(dist)", "for tc in range(int(input())):\n    n = int(input())\n    a = []\n    oldcoord = [0, 0]\n    newcoord = [0, 0]\n    newdist = 0\n    dist = 0\n    matrix = {}\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    for i in range(n):\n        for j in range(n):\n            matrix[a[i][j]] = (i, j)\n    oldcoord = matrix[1]\n    for i in range(2, n ** 2 + 1):\n        newcoord = matrix[i]\n        newdist = abs(newcoord[0] - oldcoord[0]) + abs(newcoord[1] - oldcoord[1])\n        dist += newdist\n        oldcoord = newcoord\n    print(dist)", "for _ in range(int(input())):\n    n = int(input())\n    m = []\n    disc = {}\n    c = 0\n    for i in range(n):\n        l = list(map(int, input().split()))\n        m.append(l)\n        for j in range(n):\n            disc[m[i][j]] = [i, j]\n    for k in range(2, n * n + 1):\n        c += abs(disc[k - 1][0] - disc[k][0]) + abs(disc[k - 1][1] - disc[k][1])\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    m = []\n    dick = {}\n    c = 0\n    for i in range(n):\n        l = list(map(int, input().split()))\n        m.append(l)\n        for j in range(n):\n            dick[m[i][j]] = [i, j]\n    for k in range(2, n * n + 1):\n        c += abs(dick[k - 1][0] - dick[k][0]) + abs(dick[k - 1][1] - dick[k][1])\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    m = []\n    dick = {}\n    c = 0\n    for i in range(n):\n        l = list(map(int, input().split()))\n        m.append(l)\n        for j in range(n):\n            dick[m[i][j]] = [i, j]\n    for k in range(2, n * n + 1):\n        c += abs(dick[k - 1][0] - dick[k][0]) + abs(dick[k - 1][1] - dick[k][1])\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    m = []\n    dick = {}\n    c = 0\n    for i in range(n):\n        l = list(map(int, input().split()))\n        m.append(l)\n        for j in range(n):\n            dick[m[i][j]] = [i, j]\n    for k in range(2, n * n + 1):\n        c += abs(dick[k - 1][0] - dick[k][0]) + abs(dick[k - 1][1] - dick[k][1])\n    print(c)", "for t in range(int(input())):\n    n = int(input())\n    a = {}\n    for i in range(n):\n        s = list(map(int, input().split(' ')))\n        for j in range(1, n + 1):\n            a[s[j - 1]] = (i + 1, j)\n    (x, y) = a[1]\n    ans = 0\n    for i in range(2, n * n + 1):\n        t = abs(a[i][0] - x) + abs(a[i][1] - y)\n        ans += t\n        (x, y) = a[i]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    pos = [0] * (n ** 2 + 1)\n    for y in range(n):\n        l = list(map(int, input().split()))\n        for x in range(n):\n            pos[l[x]] = (x, y)\n    total = 0\n    for i in range(2, len(pos)):\n        dx = abs(pos[i][0] - pos[i - 1][0])\n        dy = abs(pos[i][1] - pos[i - 1][1])\n        total += dx + dy\n    print(total)", "for t in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        b = list(map(int, input().split()))\n        for (j, d) in enumerate(b):\n            a.append((d, i, j))\n    a.sort()\n    steps = 0\n    for (y, i, j) in a:\n        if y > 1:\n            steps += abs(i - pi) + abs(j - pj)\n        pi = i\n        pj = j\n    print(steps)", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        b = list(map(int, input().split()))\n        for (j, d) in enumerate(b):\n            a.append((d, i, j))\n    a.sort(key=lambda x: x[0])\n    steps = 0\n    for (y, i, j) in a:\n        if y > 1:\n            steps += abs(i - pi) + abs(j - pj)\n        pi = i\n        pj = j\n    print(steps)", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        b = list(map(int, input().split()))\n        for (j, d) in enumerate(b):\n            a.append((d, i, j))\n    a.sort(key=lambda x: x[0])\n    steps = 0\n    for (y, i, j) in a:\n        if y > 1:\n            steps += abs(i - pi) + abs(j - pj)\n        pi = i\n        pj = j\n    print(steps)", "for t in range(int(input())):\n    n = int(input())\n    d = {}\n    a = 0\n    for i in range(n):\n        m = list(map(int, input().split()))\n        for i in range(n):\n            d[m[i]] = (a // n + 1, a % n + 1)\n            a = a + 1\n    c = 1\n    ans = 0\n    (px, py) = d[1]\n    for i in range(1, n * n + 1):\n        (x, y) = d[c]\n        ans = ans + abs(px - x) + abs(py - y)\n        px = x\n        py = y\n        c = c + 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    pos = {}\n    for i in range(n):\n        for j in range(n):\n            pos[matrix[i][j]] = [i + 1, j + 1]\n    pos = dict(sorted(pos.items(), key=lambda x: x[0]))\n    ans = 0\n    for i in range(1, len(pos)):\n        a = abs(pos[i + 1][0] - pos[i][0]) + abs(pos[i + 1][1] - pos[i][1])\n        ans += a\n    print(ans)", "tests = int(input())\nfor i in range(tests):\n    size = int(input())\n    if size == 1:\n        element = input()\n        print(0)\n        continue\n    element_dict = {}\n    for j in range(size):\n        arr = list(map(int, input().split()))\n        for k in range(size):\n            element_dict[arr[k]] = [j, k]\n    last_ele = size * size + 1\n    ans = 0\n    for j in range(2, last_ele):\n        ans += abs(element_dict[j - 1][0] - element_dict[j][0])\n        ans += abs(element_dict[j - 1][1] - element_dict[j][1])\n    print(ans)", "tests = int(input())\nfor i in range(tests):\n    size = int(input())\n    if size == 1:\n        element = input()\n        print(0)\n        continue\n    element_dict = {}\n    for j in range(size):\n        arr = list(map(int, input().split()))\n        for k in range(size):\n            element_dict[arr[k]] = [j, k]\n    last_ele = size * size + 1\n    ans = 0\n    for j in range(2, last_ele):\n        ans += abs(element_dict[j - 1][0] - element_dict[j][0])\n        ans += abs(element_dict[j - 1][1] - element_dict[j][1])\n    print(ans)", "for _ in range(int(input())):\n    N = int(input())\n    A = []\n    for i in range(N):\n        B = list(map(int, input().split()))\n        for (j, b) in enumerate(B):\n            A.append((b, i, j))\n    A.sort(key=lambda x: x[0])\n    steps = 0\n    for (a, i, j) in A:\n        if a > 1:\n            steps += abs(i - pi) + abs(j - pj)\n        pi = i\n        pj = j\n    print(steps)", "t = input()\nfor c in range(0, int(t)):\n    size = int(input())\n    if size == 1:\n        element = input()\n        print(0)\n        continue\n    element_dict = {}\n    for j in range(size):\n        arr = list(map(int, input().split()))\n        for k in range(size):\n            element_dict[arr[k]] = [j, k]\n    last_ele = size * size + 1\n    ans = 0\n    for j in range(2, last_ele):\n        ans += abs(element_dict[j - 1][0] - element_dict[j][0])\n        ans += abs(element_dict[j - 1][1] - element_dict[j][1])\n    print(ans)", "tests = int(input())\nfor i in range(tests):\n    size = int(input())\n    if size == 1:\n        element = input()\n        print(0)\n        continue\n    element_dict = {}\n    for j in range(size):\n        arr = list(map(int, input().split()))\n        for k in range(size):\n            element_dict[arr[k]] = [j, k]\n    last_ele = size * size + 1\n    ans = 0\n    for j in range(2, last_ele):\n        ans += abs(element_dict[j - 1][0] - element_dict[j][0])\n        ans += abs(element_dict[j - 1][1] - element_dict[j][1])\n    print(ans)", "tests = int(input())\nfor i in range(tests):\n    size = int(input())\n    if size == 1:\n        element = input()\n        print(0)\n        continue\n    element_dict = {}\n    for j in range(size):\n        arr = list(map(int, input().split()))\n        for k in range(size):\n            element_dict[arr[k]] = [j, k]\n    last_ele = size * size + 1\n    ans = 0\n    for j in range(2, last_ele):\n        ans += abs(element_dict[j - 1][0] - element_dict[j][0])\n        ans += abs(element_dict[j - 1][1] - element_dict[j][1])\n    print(ans)", "tests = int(input())\nfor i in range(tests):\n    size = int(input())\n    if size == 1:\n        element = input()\n        print(0)\n        continue\n    element_dict = {}\n    for j in range(size):\n        arr = list(map(int, input().split()))\n        for k in range(size):\n            element_dict[arr[k]] = [j, k]\n    last_ele = size * size + 1\n    ans = 0\n    for j in range(2, last_ele):\n        ans += abs(element_dict[j - 1][0] - element_dict[j][0])\n        ans += abs(element_dict[j - 1][1] - element_dict[j][1])\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    a = {}\n    for i in range(n):\n        s = list(map(int, input().split(' ')))\n        for j in range(1, n + 1):\n            a[s[j - 1]] = (i + 1, j)\n    (x, y) = a[1]\n    ans = 0\n    for i in range(2, n * n + 1):\n        t = abs(a[i][0] - x) + abs(a[i][1] - y)\n        ans += t\n        (x, y) = a[i]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    for i in range(1, n + 1):\n        l = list(map(int, input().split()))\n        for j in range(1, n + 1):\n            d[l[j - 1]] = (i, j)\n    res = 0\n    (a, b) = d[1]\n    for i in range(2, len(d) + 1):\n        (p, q) = d[i]\n        res += abs(a - p) + abs(b - q)\n        (a, b) = (p, q)\n    print(res)", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    s = {}\n    l = []\n    for i in range(n):\n        l.append([int(o) for o in input().split()])\n        for y in range(n):\n            s[l[i][y]] = [i, y]\n    c = 0\n    for m in range(2, n * n + 1):\n        c += abs(s[m - 1][0] - s[m][0]) + abs(s[m - 1][1] - s[m][1])\n    print(c)", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    s = {}\n    l = []\n    for i in range(n):\n        l.append([int(o) for o in input().split()])\n        for y in range(n):\n            s[l[i][y]] = [i, y]\n    c = 0\n    for m in range(2, n * n + 1):\n        c += abs(s[m - 1][0] - s[m][0]) + abs(s[m - 1][1] - s[m][1])\n    print(c)", "TC = int(input())\nfor _ in range(TC):\n    N = int(input())\n    pos = [[0, 0] for i in range(N * N)]\n    for i in range(N):\n        row = list(map(int, input().split()))\n        for j in range(N):\n            pos[row[j] - 1] = [i, j]\n    ans = 0\n    for i in range(1, N * N):\n        ans += abs(pos[i][0] - pos[i - 1][0]) + abs(pos[i][1] - pos[i - 1][1])\n    print(ans)", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    s = {}\n    l = []\n    for i in range(n):\n        l.append([int(o) for o in input().split()])\n        for y in range(n):\n            s[l[i][y]] = [i, y]\n    c = 0\n    for m in range(2, n * n + 1):\n        c += abs(s[m - 1][0] - s[m][0]) + abs(s[m - 1][1] - s[m][1])\n    print(c)", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    s = {}\n    l = []\n    for i in range(n):\n        l.append([int(o) for o in input().split()])\n        for y in range(n):\n            s[l[i][y]] = [i, y]\n    c = 0\n    for m in range(2, n * n + 1):\n        c += abs(s[m - 1][0] - s[m][0]) + abs(s[m - 1][1] - s[m][1])\n    print(c)", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    s = {}\n    l = []\n    for i in range(n):\n        l.append([int(o) for o in input().split()])\n        for y in range(n):\n            s[l[i][y]] = [i, y]\n    c = 0\n    for m in range(2, n * n + 1):\n        c += abs(s[m - 1][0] - s[m][0]) + abs(s[m - 1][1] - s[m][1])\n    print(c)", "ujju = int(input())\nfor jyo in range(ujju):\n    sur = int(input())\n    pro = {}\n    esh = []\n    for p in range(sur):\n        esh.append([int(pp) for pp in input().split()])\n        for l in range(sur):\n            pro[esh[p][l]] = [p, l]\n    tro = 0\n    for yp in range(2, sur * sur + 1):\n        tro += abs(pro[yp - 1][0] - pro[yp][0]) + abs(pro[yp - 1][1] - pro[yp][1])\n    print(tro)", "TC = int(input())\nfor _ in range(TC):\n    N = int(input())\n    pos = [[0, 0] for i in range(N * N)]\n    for i in range(N):\n        row = list(map(int, input().split()))\n        for j in range(N):\n            pos[row[j] - 1] = [i, j]\n    ans = 0\n    for i in range(1, N * N):\n        ans += abs(pos[i][0] - pos[i - 1][0]) + abs(pos[i][1] - pos[i - 1][1])\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    mat = []\n    for j in range(n):\n        row = [int(x) for x in input().split()]\n        mat.append(row)\n    xval = [0 for x in range(n * n)]\n    yval = [0 for x in range(n * n)]\n    for a in range(n):\n        for b in range(n):\n            xval[mat[a][b] - 1] = a\n            yval[mat[a][b] - 1] = b\n    res = 0\n    for a in range(1, n * n):\n        res += abs(xval[a - 1] - xval[a]) + abs(yval[a - 1] - yval[a])\n    print(res)", "t = int(input())\nfor i in range(t):\n    h = int(input())\n    mat = []\n    for j in range(h):\n        mat.append(list(map(int, input().split())))\n    p = {}\n    for c in range(h):\n        for g in range(h):\n            p[mat[c][g]] = [c, g]\n    d = 0\n    for row in range(1, h * h):\n        d += abs(p[row][0] - p[row + 1][0]) + abs(p[row][1] - p[row + 1][1])\n    print(d)", "t = int(input())\nfor _ in range(t):\n    size = int(input())\n    matrix = []\n    for i in range(size):\n        matrix.append(list(map(int, input().split())))\n    position = {}\n    for r in range(size):\n        for c in range(size):\n            position[matrix[r][c]] = [r, c]\n    d = 0\n    for row in range(1, size * size):\n        d += abs(position[row][0] - position[row + 1][0]) + abs(position[row][1] - position[row + 1][1])\n    print(d)", "def check(z):\n    st = 0\n    n = len(z)\n    for i in range(n - 1):\n        st = st + abs(z[i][1] - z[i + 1][1]) + abs(z[i][2] - z[i + 1][2])\n    print(st)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    z = []\n    for i in range(n):\n        b = list(map(int, input().strip().split()))\n        for j in range(n):\n            c = []\n            c.append(b[j])\n            c.append(i)\n            c.append(j)\n            z.append(c)\n    z.sort()\n    check(z)", "def check(z):\n    st = 0\n    n = len(z)\n    for i in range(n - 1):\n        r = abs(z[i][1] - z[i + 1][1]) + abs(z[i][2] - z[i + 1][2])\n        st = st + r\n    print(st)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    z = []\n    for i in range(n):\n        b = list(map(int, input().strip().split()))\n        for j in range(n):\n            c = []\n            c.append(b[j])\n            c.append(i)\n            c.append(j)\n            z.append(c)\n        a.append(b)\n    z.sort()\n    check(z)", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n        for j in range(n):\n            d[a[i][j]] = [i, j]\n    c = 0\n    for i in range(2, n * n + 1):\n        c += abs(d[i - 1][0] - d[i][0]) + abs(d[i - 1][1] - d[i][1])\n    print(c)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    mat = []\n    for _ in range(n):\n        a = list(map(int, input().strip().split(' ')))\n        t = []\n        for i in range(n):\n            t.append(a[i])\n        mat.append(t)\n    cost = 0\n    myDict = {}\n    for i in range(n):\n        for j in range(n):\n            myDict[mat[i][j]] = [i, j]\n    for i in range(1, n * n, 1):\n        t1 = myDict[i]\n        t2 = myDict[i + 1]\n        cost = cost + abs(t1[0] - t2[0]) + abs(t1[1] - t2[1])\n    print(cost)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    mat = []\n    for _ in range(n):\n        a = list(map(int, input().strip().split(' ')))\n        t = []\n        for i in range(n):\n            t.append(a[i])\n        mat.append(t)\n    cost = 0\n    myDict = {}\n    for i in range(n):\n        for j in range(n):\n            myDict[mat[i][j]] = [i, j]\n    for i in range(1, n * n, 1):\n        t1 = myDict[i]\n        t2 = myDict[i + 1]\n        cost = cost + abs(t1[0] - t2[0]) + abs(t1[1] - t2[1])\n    print(cost)", "try:\n\n    def manhattan(a, b):\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n    for _ in range(int(input())):\n        lst = []\n        n = int(input())\n        for _ in range(n):\n            lst.append(list(map(int, input().split())))\n        d = {}\n        res = 0\n        for i in range(len(lst)):\n            for j in range(len(lst[i])):\n                d[lst[i][j]] = [i, j]\n        for i in range(1, n * n):\n            res += manhattan(d[i], d[i + 1])\n        print(res)\nexcept EOFError:\n    pass", "for i in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        t = [int(i) for i in input().split()]\n        arr.append(t)\n    x = [0] * n ** 2\n    y = [0] * n ** 2\n    for i in range(n):\n        for j in range(n):\n            x[arr[i][j] - 1] = i + 1\n            y[arr[i][j] - 1] = j + 1\n    s = 0\n    for i in range(n ** 2 - 1):\n        s += abs(x[i] - x[i + 1]) + abs(y[i] - y[i + 1])\n    print(s)", "def m(arr):\n    l = []\n    l1 = []\n    d = dict()\n    h = dict()\n    l1 = []\n    s = 0\n    l = []\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            d[arr[i][j]] = i\n            h[arr[i][j]] = j\n    for i in range(1, n * n + 1):\n        l.append(d[i])\n        l1.append(h[i])\n    for i in range(len(l) - 1):\n        s += abs(l1[i] - l1[i + 1]) + abs(l[i] - l[i + 1])\n    print(s)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        b = list((int(x) for x in input().split()))\n        arr.append(b)\n    m(arr)", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    dict = {}\n    for i in range(0, n):\n        r = list(map(int, input().split(' ')))\n        for j in range(0, len(r)):\n            dict[r[j]] = [i + 1, j + 1]\n    sum = 0\n    for i in range(1, n * n):\n        sum1 = abs(dict[i][0] - dict[i + 1][0])\n        sum2 = abs(dict[i][1] - dict[i + 1][1])\n        sum = sum + sum1 + sum2\n    print(sum)", "for _ in range(int(input())):\n    n = int(input())\n    dict = {}\n    for i in range(n):\n        r = list(map(int, input().split()))\n        for j in range(0, len(r)):\n            dict[r[j]] = [i + 1, j + 1]\n    sum = 0\n    for i in range(1, n * n):\n        sum1 = abs(dict[i][0] - dict[i + 1][0])\n        sum2 = abs(dict[i][1] - dict[i + 1][1])\n        sum += sum1 + sum2\n    print(sum)", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    dict = {}\n    for i in range(0, n):\n        r = list(map(int, input().split(' ')))\n        for j in range(0, len(r)):\n            dict[r[j]] = [i + 1, j + 1]\n    sum = 0\n    for i in range(1, n * n):\n        sum1 = abs(dict[i][0] - dict[i + 1][0])\n        sum2 = abs(dict[i][1] - dict[i + 1][1])\n        sum = sum + sum1 + sum2\n    print(sum)", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    dict = {}\n    for i in range(0, n):\n        r = list(map(int, input().split(' ')))\n        for j in range(0, len(r)):\n            dict[r[j]] = [i + 1, j + 1]\n    sum = 0\n    for i in range(1, n * n):\n        sum1 = abs(dict[i][0] - dict[i + 1][0])\n        sum2 = abs(dict[i][1] - dict[i + 1][1])\n        sum = sum + sum1 + sum2\n    print(sum)", "t = int(input())\nfor i in range(t):\n    s = int(input())\n    m = [[]] * s\n    l = [None] * s * s\n    for i in range(s):\n        m[i] = list(map(int, input().split()))\n        for j in range(s):\n            l[m[i][j] - 1] = (i, j)\n    steps = 0\n    for i in range(s * s - 1):\n        steps += sum((abs(l[i][k] - l[i + 1][k]) for k in range(2)))\n    print(steps)", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    for i in range(n):\n        a = list(map(int, input().split()))\n        for j in range(n):\n            d[a[j]] = [i, j]\n    ans = 0\n    for i in range(2, n * n + 1):\n        a = d[i - 1]\n        b = d[i]\n        ans += abs(a[0] - b[0]) + abs(a[1] - b[1])\n    print(ans)", "for o in range(int(input())):\n    n = int(input())\n    m = []\n    for h in range(n):\n        m.append([int(l) for l in input().split()])\n    d = {}\n    for i in range(n):\n        for j in range(n):\n            d[m[i][j]] = (i, j)\n    s = 0\n    for k in range(2, n * n + 1):\n        s += abs(d[k][0] - d[k - 1][0]) + abs(d[k][1] - d[k - 1][1])\n    print(s)", "num_cases = int(input())\nfor _ in range(num_cases):\n    matrix_width = int(input())\n    pos_dict = {}\n    for y in range(matrix_width):\n        matrix_row = map(int, input().split())\n        for (x, num) in enumerate(matrix_row):\n            pos_dict[num] = (x, y)\n    num_moves = 0\n    current_num = 1\n    (x, y) = pos_dict[current_num]\n    while current_num < matrix_width * matrix_width:\n        (x_next, y_next) = pos_dict[current_num + 1]\n        num_moves += abs(x_next - x) + abs(y_next - y)\n        current_num += 1\n        (x, y) = (x_next, y_next)\n    print(num_moves)", "n = int(input())\nfor _ in range(n):\n    size = int(input())\n    matrix = []\n    for i in range(size):\n        matrix.append(list(map(int, input().split(' ', size - 1))))\n    sum = 0\n    d = {}\n    for i in range(size):\n        for j in range(size):\n            d[matrix[i][j]] = (i, j)\n    (x1, y1) = d[1]\n    for k in range(2, size * size + 1):\n        (x2, y2) = d[k]\n        sum += abs(x2 - x1) + abs(y2 - y1)\n        x1 = x2\n        y1 = y2\n    print(sum)", "n = int(input())\nfor _ in range(n):\n    size = int(input())\n    matrix = []\n    for i in range(size):\n        matrix.append(list(map(int, input().split(' ', size - 1))))\n    nums = size ** 2\n    xx = 0\n    yy = 0\n    sum = 0\n    d = {}\n    for i in range(size):\n        for j in range(size):\n            d[matrix[i][j]] = (i, j)\n    (x1, y1) = d[1]\n    for k in range(2, size * size + 1):\n        (x2, y2) = d[k]\n        sum += abs(x2 - x1) + abs(y2 - y1)\n        x1 = x2\n        y1 = y2\n    print(sum)", "for t in range(int(input())):\n    numOfRow = int(input())\n    mainList = [[0, 0] for i in range(0, numOfRow * numOfRow)]\n    for rowInd in range(0, numOfRow):\n        colList = [int(x) for x in input().split()]\n        for colInd in range(0, numOfRow):\n            mainList[colList[colInd] - 1] = [rowInd, colInd]\n    numOfSteps = 0\n    currentInd = mainList[0]\n    for element in mainList[1:]:\n        numOfSteps += abs(currentInd[0] - element[0]) + abs(currentInd[1] - element[1])\n        currentInd = element\n    print(numOfSteps)", "import sys\nimport math\n\ndef main():\n    T = int(input())\n    result = []\n    for t in range(T):\n        N = int(input())\n        mat = dict()\n        for i in range(N):\n            row = input().split()\n            for j in range(N):\n                mat[int(row[j])] = [i, j]\n        cost = 0\n        for i in range(2, pow(N, 2) + 1):\n            cost += math.fabs(mat[i][0] - mat[i - 1][0]) + math.fabs(mat[i][1] - mat[i - 1][1])\n        result.append(math.ceil(cost))\n    for t in range(T):\n        print(result[t])\nmain()", "try:\n    t = input()\nexcept EOFError:\n    t = 0\nt = int(t)\nfor i in range(t):\n    n = int(input())\n    dict = {}\n    for j in range(n):\n        m = input().split()\n        m = [int(x) for x in m]\n        for k in range(n):\n            dict[m[k]] = j * n + k\n    sum = 0\n    for l in range(n * n - 1):\n        t_1 = dict[l + 1]\n        t_2 = dict[l + 2]\n        j_1 = t_1 // n\n        k_1 = t_1 % n\n        j_2 = t_2 // n\n        k_2 = t_2 % n\n        sum = sum + abs(j_1 - j_2) + abs(k_1 - k_2)\n    print(sum)", "for t in range(int(input())):\n    row_num = int(input())\n    coordinates = [None] * (row_num * row_num)\n    for y in range(row_num):\n        rows = list(map(int, input().split()))\n        for (x, val) in enumerate(rows):\n            coordinates[val - 1] = (x, y)\n    total_steps = 0\n    (x1, y1) = (coordinates[0][0], coordinates[0][1])\n    for i in range(1, len(coordinates)):\n        (x2, y2) = (coordinates[i][0], coordinates[i][1])\n        step = abs(x1 - x2) + abs(y1 - y2)\n        total_steps += step\n        (x1, y1) = (x2, y2)\n    print(total_steps)", "for t in range(int(input())):\n    row_num = int(input())\n    coordinates = [None] * (row_num * row_num)\n    for y in range(row_num):\n        rows = list(map(int, input().split()))\n        for (x, val) in enumerate(rows):\n            coordinates[val - 1] = (x, y)\n    total_steps = 0\n    for i in range(1, len(coordinates)):\n        (x1, y1) = (coordinates[i - 1][0], coordinates[i - 1][1])\n        (x2, y2) = (coordinates[i][0], coordinates[i][1])\n        step = abs(x1 - x2) + abs(y1 - y2)\n        total_steps += step\n    print(total_steps)", "import sys\nt = int(input())\nfor i in range(0, t):\n    list = []\n    z = int(input())\n    for j in range(0, z):\n        list += [int(x) for x in sys.stdin.readline().rstrip().split()]\n    newlist = sorted(range(len(list)), key=lambda k: list[k])\n    item = 0\n    step = 0\n    prev = newlist[0]\n    for i in range(1, len(newlist)):\n        next = newlist[i]\n        step += abs(next // z - prev // z)\n        step += abs(next % z - prev % z)\n        prev = next\n    print(step)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = {}\n    for i in range(n):\n        row = [int(x) for x in input().split()]\n        for (j, val) in enumerate(row):\n            d[val] = (i, j)\n    distance = 0\n    curr_val = 1\n    next_val = 2\n    while next_val in d:\n        diff_x = abs(d[next_val][0] - d[curr_val][0])\n        diff_y = abs(d[next_val][1] - d[curr_val][1])\n        distance += diff_x + diff_y\n        curr_val += 1\n        next_val += 1\n    print(distance)", "t = int(input())\ng = 0\nwhile g < t:\n    g = g + 1\n    k = int(input())\n    j = 0\n    size = k * k\n    arr = [None] * size\n    for i in range(size):\n        arr[i] = [None] * 2\n    while j < k:\n        z = 0\n        string = input()\n        string = string.split(' ')\n        for n in string:\n            arr[int(n) - 1][0] = j\n            arr[int(n) - 1][1] = z\n            z = z + 1\n        j = j + 1\n    j = 0\n    x = arr[0][0]\n    y = arr[0][1]\n    SUM = 0\n    while j < size:\n        SUM = SUM + abs(x - arr[j][0]) + abs(y - arr[j][1])\n        x = arr[j][0]\n        y = arr[j][1]\n        j = j + 1\n    print(SUM)", "import sys\n\ndef min_step_from_to(i, j, x, y):\n    res = abs(i - x) + abs(j - y)\n    return res\n\ndef min_count():\n    result = 0\n    current = mat_map[0]\n    for i in range(1, N ** 2):\n        next = mat_map[i]\n        result += min_step_from_to(current[0], current[1], next[0], next[1])\n        current = next\n    print(result)\n    return\n\ndef main():\n    T = int(sys.stdin.readline())\n    t = 0\n    while t < T:\n        t += 1\n        global N\n        N = int(sys.stdin.readline())\n        global mat_map\n        mat_map = N ** 2 * [0]\n        n = 0\n        while n < N:\n            line = sys.stdin.readline()\n            line = line.split(' ')\n            line = [int(i) for i in line]\n            for i in range(0, N):\n                mat_map[line[i] - 1] = (n, i)\n            n += 1\n        min_count()\nmain()", "T = int(input())\nwhile T:\n    T -= 1\n    N = int(input())\n    matrix = []\n    for n in range(N):\n        matrix += (int(x) for x in input().split())\n    sortedindex = sorted(range(len(matrix)), key=lambda k: matrix[k])\n    prevpos = sortedindex[0]\n    steps = 0\n    for i in range(1, len(sortedindex)):\n        nextpos = sortedindex[i]\n        steps += abs(nextpos // N - prevpos // N)\n        steps += abs(nextpos % N - prevpos % N)\n        prevpos = nextpos\n    print(steps)", "def path(n, z):\n    sum = 0\n    for i in range(2, n * n + 1):\n        sum = sum + abs(z[i][0] - z[i - 1][0]) + abs(z[i][1] - z[i - 1][1])\n    return sum\ntest_case = int(input())\nfor t in range(test_case):\n    n = int(input())\n    z = [[0 for x in range(2)] for x in range(n * n + 1)]\n    for m in range(n):\n        inp = [int(x) for x in input().split()]\n        for k in range(n):\n            z[inp[k]][0] = m + 1\n            z[inp[k]][1] = k + 1\n    print(path(n, z))", "def path(n, z):\n    sum = 0\n    for i in range(1, n * n):\n        sum = sum + abs(z[i][0] - z[i - 1][0]) + abs(z[i][1] - z[i - 1][1])\n    return sum\ntest_case = int(input())\nfor t in range(test_case):\n    n = int(input())\n    z = [[0 for x in range(2)] for x in range(n * n)]\n    for m in range(n):\n        inp = [int(x) for x in input().split()]\n        for k in range(n):\n            z[inp[k] - 1][0] = m + 1\n            z[inp[k] - 1][1] = k + 1\n    print(path(n, z))", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    b = [[0 for x in range(2)] for x in range(n * n + 1)]\n    for i in range(n):\n        m = input()\n        m = m.split()\n        for k in range(len(m)):\n            b[int(m[k])][0] = i + 1\n            b[int(m[k])][1] = k + 1\n    count = 0\n    for j in range(1, n * n):\n        count = count + abs(b[j][0] - b[j + 1][0]) + abs(b[j][1] - b[j + 1][1])\n    print(count)", "def main():\n    testCases = int(input())\n    while testCases:\n        numOfRow = int(input())\n        mainList = [[0, 0] for i in range(0, numOfRow * numOfRow)]\n        for rowInd in range(0, numOfRow):\n            colList = [int(x) for x in input().split()]\n            for colInd in range(0, numOfRow):\n                mainList[colList[colInd] - 1] = [rowInd, colInd]\n        numOfSteps = 0\n        currentInd = mainList[0]\n        for element in mainList[1:]:\n            numOfSteps += abs(currentInd[0] - element[0]) + abs(currentInd[1] - element[1])\n            currentInd = element\n        print(numOfSteps)\n        testCases -= 1\nmain()", "def find(obj, array, size):\n    out = []\n    for x in range(size):\n        for y in range(size):\n            if array[x][y] == obj:\n                return [x, y]\nres = []\nfor _ in range(int(input())):\n    n = int(input())\n    look = {}\n    step = 0\n    for i in range(n):\n        row = list(map(int, input().split()))\n        for j in range(n):\n            look[row[j]] = [i, j]\n    co = look[1]\n    for i in range(2, n * n + 1):\n        nex = look[i]\n        step = step + abs(co[0] - nex[0]) + abs(co[1] - nex[1])\n        co = nex\n    res.append(step)\nfor i in res:\n    print(i)", "def find(obj, array, size):\n    out = []\n    for x in range(size):\n        for y in range(size):\n            if array[x][y] == obj:\n                return [x, y]\nres = []\nfor _ in range(int(input())):\n    n = int(input())\n    look = {}\n    step = 0\n    for i in range(n):\n        row = list(map(int, input().split()))\n        for j in range(n):\n            look[row[j]] = [i, j]\n    co = look[1]\n    for i in range(2, n * n + 1):\n        nex = look[i]\n        step = step + abs(co[0] - nex[0]) + abs(co[1] - nex[1])\n        co = nex\n    res.append(step)\nfor i in res:\n    print(i)", "def finddist(old, new):\n    return abs(old[0] - new[0]) + abs(old[1] - new[1])\nT = int(input())\nfor Ti in range(T):\n    N = int(input())\n    matrix = [None] * N ** 2\n    for Ri in range(1, N + 1):\n        row = input().split(' ')\n        for Ci in range(1, N + 1):\n            matrix[int(row[Ci - 1]) - 1] = [Ri, Ci]\n    dist = 0\n    oldl = matrix[0]\n    for now in range(N ** 2 - 1):\n        newl = matrix[now + 1]\n        dist += finddist(oldl, newl)\n        oldl = newl\n        now += 1\n    print(dist)", "test_cases = int(input())\nfor _ in range(test_cases):\n    dimension = int(input())\n    sequence = [None] * dimension ** 2\n    for row in range(dimension):\n        numbers = list(map(int, input().split()))\n        for column in range(len(numbers)):\n            number = numbers[column]\n            sequence[number - 1] = (row, column)\n    cost = 0\n    for step_index in range(len(sequence) - 1):\n        this_step = sequence[step_index]\n        next_step = sequence[step_index + 1]\n        cost += abs(this_step[0] - next_step[0])\n        cost += abs(this_step[1] - next_step[1])\n    print(cost)", "import sys\n\ndef work(array, N):\n    r = 0\n    i = 2\n    while i <= N * N:\n        r = r + abs(array[i][0] - array[i - 1][0]) + abs(array[i][1] - array[i - 1][1])\n        i = i + 1\n    print(r)\n\ndef homemade(N):\n    i = 0\n    liste = []\n    while i <= N * N:\n        line = [0, 0]\n        liste.append(line)\n        i = i + 1\n    return liste\n\ndef main():\n    T = int(input())\n    testcase = 0\n    while testcase < T:\n        N = int(input())\n        rows = 0\n        array = homemade(N)\n        while rows < N:\n            line = list(map(int, input().split()))\n            ij = 0\n            while ij < N:\n                value = line[ij]\n                array[value][0] = rows\n                array[value][1] = ij\n                ij = ij + 1\n            rows = rows + 1\n        work(array, N)\n        testcase = testcase + 1\n    return 0\nmain()", "T = int(input())\nfor test_case_index in range(T):\n    N = int(input())\n    rows = [None] * (N * N)\n    columns = [None] * (N * N)\n    for row_index in range(N):\n        row = [int(number) for number in input().split()]\n        for (column_index, number) in enumerate(row):\n            rows[number - 1] = row_index + 1\n            columns[number - 1] = column_index + 1\n    result = 0\n    previous_number = 1\n    current_number = 2\n    while current_number <= N * N:\n        dist_y = abs(rows[current_number - 1] - rows[previous_number - 1])\n        dist_x = abs(columns[current_number - 1] - columns[previous_number - 1])\n        result += dist_y + dist_x\n        previous_number = current_number\n        current_number += 1\n    print(result)", "class Entry:\n\n    def __init__(self, row, column):\n        self.row = row\n        self.column = column\nT = int(input())\nfor test_case_index in range(T):\n    N = int(input())\n    numbers = [None] * (N * N)\n    for row_index in range(N):\n        row = [int(number) for number in input().split()]\n        for (column_index, number) in enumerate(row):\n            numbers[number - 1] = Entry(row_index + 1, column_index)\n    result = 0\n    current_number = 1\n    previous_entry = numbers[current_number - 1]\n    current_number += 1\n    while current_number <= N * N:\n        current_entry = numbers[current_number - 1]\n        dist_y = abs(current_entry.row - previous_entry.row)\n        dist_x = abs(current_entry.column - previous_entry.column)\n        result += dist_y + dist_x\n        previous_entry = current_entry\n        current_number += 1\n    print(result)", "t = int(input())\n\ndef calc_d(a, b):\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\nfor i in range(t):\n    n = int(input())\n    mat = [[0 for i in range(n)] for j in range(n)]\n    d = [(0, 0) for i in range(n * n + 1)]\n    for m in range(n):\n        mat[m] = list(map(int, input().split()))\n    for m in range(n):\n        for k in range(n):\n            d[mat[m][k]] = (m, k)\n    distance = 0\n    for i in range(2, n * n + 1):\n        distance += calc_d(d[i], d[i - 1])\n    print(distance)", "tc = int(input())\nfor z in range(tc):\n    N = int(input())\n    mapNums = []\n    locList = []\n    for y in range(N):\n        cArr = list(map(int, input().split()))\n        for x in range(len(cArr)):\n            locList.append([cArr[x], y, x])\n    locList.sort()\n    numMoves = 0\n    for w in range(len(locList) - 1):\n        numMoves += abs(locList[w][1] - locList[w + 1][1]) + abs(locList[w][2] - locList[w + 1][2])\n    print(numMoves)", "from collections import defaultdict\nimport inspect, os\ns = inspect.getfile(inspect.currentframe())\nr = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))\nt = int(input())\nwhile t > 0:\n    d = defaultdict()\n    n = int(input())\n    i = 0\n    while i < n:\n        a = [int(x) for x in input().split()]\n        for j in range(len(a)):\n            d[a[j]] = [i, j]\n        i = i + 1\n    c = 0\n    for i in range(1, n * n):\n        c = c + abs(d[i + 1][0] - d[i][0]) + abs(d[i + 1][1] - d[i][1])\n    print(c)\n    t = t - 1", "from collections import defaultdict\nt = int(input())\nwhile t > 0:\n    d = defaultdict()\n    n = int(input())\n    i = 0\n    while i < n:\n        a = [int(x) for x in input().split()]\n        for j in range(len(a)):\n            d[a[j]] = [i, j]\n        i = i + 1\n    c = 0\n    for i in range(1, n * n):\n        c = c + abs(d[i + 1][0] - d[i][0]) + abs(d[i + 1][1] - d[i][1])\n    print(c)\n    t = t - 1", "tc = int(input())\nfor i in range(tc):\n    n = int(input())\n    mat = [[0 for x in range(n)] for x in range(n)]\n    d = dict()\n    for j in range(n):\n        mat[j] = input().split()\n        for k in range(n):\n            d[mat[j][k]] = [j + 1, k + 1]\n    count = 0\n    srcCoordinates = d['1']\n    for i in range(2, n * n + 1):\n        destCoordinates = d[str(i)]\n        count += abs(destCoordinates[0] - srcCoordinates[0]) + abs(destCoordinates[1] - srcCoordinates[1])\n        srcCoordinates = destCoordinates\n    print(count)", "import sys\ntc = int(input())\nwhile tc:\n    tc -= 1\n    n = int(input())\n    d = {}\n    for i in range(n):\n        dd = list(map(int, sys.stdin.readline().strip().split()))\n        for j in range(n):\n            d[dd[j]] = [i, j]\n    sum_ = 0\n    for i in range(2, n * n + 1):\n        sum_ += abs(d[i][0] - d[i - 1][0]) + abs(d[i][1] - d[i - 1][1])\n    print(sum_)", "import sys\ntc = int(input())\nwhile tc:\n    tc -= 1\n    n = int(input())\n    d = {}\n    for i in range(n):\n        dd = list(map(int, sys.stdin.readline().strip().split()))\n        for j in range(n):\n            d[dd[j]] = [i, j]\n    sum_ = 0\n    for i in range(2, n * n + 1):\n        sum_ += abs(d[i][0] - d[i - 1][0]) + abs(d[i][1] - d[i - 1][1])\n    print(sum_)", "t = int(input())\nwhile t:\n    n = int(input())\n    mat = []\n    for i in range(n):\n        mat.append(list(map(int, input().split())))\n    pos = {}\n    for (i, j) in enumerate(mat):\n        for (k, m) in enumerate(j):\n            pos[m] = (i, k)\n    step = 0\n    for i in range(1, len(pos)):\n        (x1, y1) = pos[i]\n        (x2, y2) = pos[i + 1]\n        step += abs(x1 - x2) + abs(y1 - y2)\n    print(step)\n    t -= 1", "def take_input_matrix(n):\n    matrix = []\n    row_num = 0\n    while row_num < n:\n        input_string = str(input())\n        values = input_string.split(' ')\n        row = [int(value) for value in values]\n        matrix.append(row)\n        row_num += 1\n    return matrix\n\ndef calculate_steps(matrix):\n    n = len(matrix)\n    row_list = [0] * n ** 2\n    column_list = [0] * n ** 2\n    for row_num in range(0, n):\n        for column_num in range(0, n):\n            row_list[matrix[row_num][column_num] - 1] = row_num\n            column_list[matrix[row_num][column_num] - 1] = column_num\n    steps = 0\n    for index in range(1, n ** 2):\n        steps += abs(row_list[index] - row_list[index - 1]) + abs(column_list[index] - column_list[index - 1])\n    return steps\nnum_of_cases = int(input())\nwhile 6 > num_of_cases > 0:\n    n = int(input())\n    if 0 < n < 501:\n        matrix = take_input_matrix(n)\n    else:\n        break\n    steps = calculate_steps(matrix)\n    num_of_cases -= 1\n    print(steps)", "def mat(n):\n    steps = 0\n    l1 = [None] * n ** 2\n    l2 = [None] * n ** 2\n    a = [[]] * n\n    for i in range(n):\n        a[i] = list(map(int, input().split()))\n        for j in range(n):\n            l1[a[i][j] - 1] = i\n            l2[a[i][j] - 1] = j\n    for i in range(0, len(l1) - 1):\n        steps = steps + abs(l1[i] - l1[i + 1]) + abs(l2[i] - l2[i + 1])\n    return steps\nt = int(input())\nfin = [None] * t\nfor i in range(0, t):\n    n = int(input())\n    fin[i] = mat(n)\nfor i in range(0, len(fin)):\n    print(fin[i])", "case = int(input())\nfor i in range(case):\n    n = int(input())\n    l = [[0 for x in range(n)] for x in range(n)]\n    count = 0\n    for x in range(n):\n        l1 = list(input().split())\n        for y in range(n):\n            l[x][y] = int(l1[y])\n    d = {}\n    for x in range(n):\n        for y in range(n):\n            d[l[x][y]] = [x, y]\n    for z in range(2, n * n + 1):\n        count += abs(d[z][0] - d[z - 1][0]) + abs(d[z][1] - d[z - 1][1])\n    print(count)", "def mat(n):\n    steps = 0\n    l1 = [None] * n ** 2\n    l2 = [None] * n ** 2\n    a = [[]] * n\n    for i in range(n):\n        a[i] = list(map(int, input().split()))\n        for j in range(n):\n            c = a[i][j]\n            l1[c - 1] = i\n            l2[c - 1] = j\n    for i in range(0, len(l1) - 1):\n        steps = steps + abs(l1[i] - l1[i + 1]) + abs(l2[i] - l2[i + 1])\n    return steps\nt = int(input())\nfin = []\nfor i in range(0, t):\n    n = int(input())\n    fin.append(mat(n))\nfor i in range(0, len(fin)):\n    print(fin[i])", "def take_input_matrix(n):\n    matrix = []\n    row_num = 0\n    while row_num < n:\n        input_string = str(input())\n        values = input_string.split(' ')\n        row = [int(value) for value in values]\n        matrix.append(row)\n        row_num += 1\n    return matrix\n\ndef calculate_steps(matrix):\n    n = len(matrix)\n    row_list = [0] * n ** 2\n    column_list = [0] * n ** 2\n    for row_num in range(0, n):\n        for column_num in range(0, n):\n            row_list[matrix[row_num][column_num] - 1] = row_num\n            column_list[matrix[row_num][column_num] - 1] = column_num\n    steps = 0\n    for index in range(1, n ** 2):\n        steps += abs(row_list[index] - row_list[index - 1]) + abs(column_list[index] - column_list[index - 1])\n    return steps\nnum_of_cases = int(input())\nwhile 6 > num_of_cases > 0:\n    n = int(input())\n    if 0 < n < 501:\n        matrix = take_input_matrix(n)\n    else:\n        break\n    steps = calculate_steps(matrix)\n    num_of_cases -= 1\n    print(steps)", "import sys\n\ndef dist(xy1, xy2):\n    return abs(xy1[0] - xy2[0]) + abs(xy1[1] - xy2[1])\n\ndef ans():\n    for _ in range(int(sys.stdin.readline())):\n        n = int(sys.stdin.readline())\n        d = {}\n        for y in range(n):\n            xcoor = list(map(int, sys.stdin.readline().split()))\n            for x in range(len(xcoor)):\n                d[xcoor[x]] = (x, y)\n        a = 0\n        for i in range(2, n ** 2 + 1):\n            a += dist(d[i], d[i - 1])\n        yield a\nfor i in ans():\n    print(i)", "def count_steps(pointA, pointB):\n    (xA, yA) = pointA\n    (xB, yB) = pointB\n    return abs(xA - xB) + abs(yA - yB)\nt = int(input())\nfor case in range(t):\n    matrix = dict()\n    lines = int(input())\n    for line in range(lines):\n        m_line = map(int, input().split())\n        for element in enumerate(m_line):\n            matrix[element[1]] = (line + 1, element[0] + 1)\n    points = list(matrix.values())\n    steps = 0\n    for index in range(lines * lines - 1):\n        steps += count_steps(points[index], points[index + 1])\n    print(steps)", "mode = 'fileee'\nif mode == 'file':\n    f = open('test.txt', 'r')\n\ndef fun(u, v):\n    [x, y] = [int(x) for x in u]\n    [p, q] = [int(x) for x in v]\n    if p == x:\n        return int(abs(q - y))\n    if q == y:\n        return int(abs(x - p))\n    return abs(p - x) + abs(q - y)\nd = {}\na = []\nif mode == 'file':\n    T = int(f.readline())\nelse:\n    T = int(input())\nfor z in range(T):\n    if mode == 'file':\n        n = int(f.readline())\n    else:\n        n = int(input())\n    for i in range(n):\n        if mode == 'file':\n            kk = [int(x) for x in f.readline().split()]\n        else:\n            kk = [int(x) for x in input().split()]\n        for j in range(n):\n            d[kk[j]] = [i, j]\n    s = 0\n    for i in range(1, n ** 2):\n        s += fun(d[i], d[i + 1])\n    print(s)\nif mode == 'file':\n    f.close()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [0] * (n * n)\n    b = [0] * (n * n)\n    for j in range(n):\n        temp = list(map(int, input().split()))\n        for k in range(n):\n            a[temp[k] - 1] = j\n            b[temp[k] - 1] = k\n    ans = 0\n    for j in range(n * n - 1):\n        ans += abs(a[j] - a[j + 1])\n        ans += abs(b[j] - b[j + 1])\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = [(-1, -1) for j in range(n ** 2)]\n    for j in range(n):\n        temp = [int(k) for k in input().split()]\n        for k in range(n):\n            l[temp[k] - 1] = (j, k)\n    ans = 0\n    for j in range(n ** 2 - 1):\n        ans += abs(l[j + 1][0] - l[j][0]) + abs(l[j + 1][1] - l[j][1])\n    print(ans)"]