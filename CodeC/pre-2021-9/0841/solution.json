["lim = 5000000\nhyps = [False] * (lim + 1)\nfor m in range(1, lim, 2):\n    prh = m * m\n    if prh > lim:\n        break\n    for n in range(m + 1, lim, 2):\n        prh += 2 * n\n        if prh > lim:\n            break\n        if not hyps[prh]:\n            for k in range(prh, lim + 1, prh):\n                hyps[k] = True\nout = []\nfor _ in range(int(input())):\n    out.append('YES' if hyps[int(input())] else 'NO')\nprint(*out, sep='\\n')", "lim = 5000000\nhyps = [False] * (lim + 1)\nfor m in range(1, lim, 2):\n    prh = m * m\n    if prh > lim:\n        break\n    for n in range(m + 1, lim, 2):\n        prh += 2 * n\n        if prh > lim:\n            break\n        if not hyps[prh]:\n            for k in range(prh, lim + 1, prh):\n                hyps[k] = True\nout = []\nfor _ in range(int(input())):\n    out.append('YES' if hyps[int(input())] else 'NO')\nprint(*out, sep='\\n')", "lim = 5000000\nhyps = [False] * (lim + 1)\nm = -1\nwhile True:\n    m += 2\n    prh = m * m\n    if prh > lim:\n        break\n    n = m - 1\n    while True:\n        n += 2\n        prh += 2 * n\n        if prh > lim:\n            break\n        if not hyps[prh]:\n            for k in range(1, lim // prh + 1):\n                hyps[k * prh] = True\nout = []\nfor _ in range(int(input())):\n    out.append('YES' if hyps[int(input())] else 'NO')\nprint(*out, sep='\\n')", "import math\nlim = 5000000\nmlim = int(math.sqrt(lim) + 2)\nhyps = dict()\nfor m in range(1, mlim, 2):\n    prh = m * m\n    for n in range(m + 1, 2 * lim, 2):\n        prh += 2 * n\n        if prh > lim:\n            break\n        if prh not in hyps:\n            for k in range(1, lim // prh + 1):\n                hyps[k * prh] = True\nout = []\nfor _ in range(int(input())):\n    out.append('YES' if int(input()) in hyps else 'NO')\nprint(*out, sep='\\n')", "maxc = 5 * 10 ** 6\ncs = set()\nmaxp = 1580\nfor p in range(1, maxp):\n    for q in range(p + 1, maxc):\n        c = int(p ** 2 + q ** 2)\n        if c > maxc:\n            break\n        if not c in cs:\n            cs.update({c * i for i in range(1, maxc // c + 1)})\nimport sys\ninput = sys.stdin.readline\nprint = sys.stdout.write\nfor t in range(int(input())):\n    print('YES\\n' if int(input()) in cs else 'NO\\n')", "global primes\nglobal result\nresult = []\nfrom math import sqrt\n\ndef sieve():\n    limit = 5 * 10 ** 6 + 7\n    prime = [True] * limit\n    for i in range(3, int(sqrt(limit)) + 1, 2):\n        if prime[i]:\n            prime[i * i::2 * i] = [False] * len(range(i * i, limit, 2 * i))\n    global primes\n    primes = [2] + [i for i in range(3, limit, 2) if prime[i]]\n\ndef equi():\n    limit1 = 5 * 10 ** 6 + 7\n    global result\n    result = [False] * limit1\n    global primes\n    for i in primes:\n        if i % 4 == 1:\n            result[i] = True\n            result[i::i] = [True] * len(range(i, limit1, i))\nimport sys\nsieve()\nequi()\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    a = int(sys.stdin.readline())\n    if result[a]:\n        print('YES')\n    else:\n        print('NO')", "def triples(limit):\n    a = [True] * limit\n    b = [False] * limit\n    a[0] = a[1] = False\n    for (i, isprime) in enumerate(a):\n        if isprime:\n            if (i - 1) % 4 == 0:\n                for n in range(i, limit, i):\n                    b[n] = True\n            for n in range(i * i, limit, i):\n                a[n] = False\n    return b\n\ndef solve(N, trip):\n    if trip[N]:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef main(infile, outfile):\n    trip = triples(5000001)\n    T = int(infile.readline())\n    for t in range(T):\n        N = int(infile.readline())\n        outfile.write(str(solve(N, trip)) + '\\n')\nfrom sys import stdin, stdout\nmain(stdin, stdout)", "from sys import stdin\ndp = [0] * 5000010\n\ndef precompute():\n    for i in range(2, 5000010):\n        if dp[i] == 0:\n            j = i\n            if (i - 1) % 4 == 0:\n                while j < 5000010:\n                    dp[j] = 1\n                    j += i\n            else:\n                while j < 5000010:\n                    if dp[j] != 1:\n                        dp[j] = 10\n                    j += i\n    return\nprecompute()\nt = int(stdin.readline())\nfor i in range(0, t):\n    N = n = int(stdin.readline())\n    if dp[N] == 1:\n        print('YES')\n    else:\n        print('NO')"]