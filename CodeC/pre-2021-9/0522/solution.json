["for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    ans = k % m * pow(k - 1, n - 1, m) % m\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    d = k % m * pow(k - 1, n - 1, m) % m\n    print(d)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    d = k % m * pow(k - 1, n - 1, m) % m\n    print(d)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    d = k % m * pow(k - 1, n - 1, m) % m\n    print(d)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    d = k % m * pow(k - 1, n - 1, m) % m\n    print(d)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    d = k % m * pow(k - 1, n - 1, m) % m\n    print(d)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    d = k % m * pow(k - 1, n - 1, m) % m\n    print(d)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    d = k % m * pow(k - 1, n - 1, m) % m\n    print(d)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    d = k % m * pow(k - 1, n - 1, m) % m\n    print(d)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    d = k % m * pow(k - 1, n - 1, m) % m\n    print(d)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    d = k % m * pow(k - 1, n - 1, m) % m\n    print(d)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    d = k % m * pow(k - 1, n - 1, m) % m\n    print(d)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    d = k % m * pow(k - 1, n - 1, m) % m\n    print(d)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    d = k % m * pow(k - 1, n - 1, m) % m\n    print(d)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    d = k % m * pow(k - 1, n - 1, m) % m\n    print(d)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    d = k % m * pow(k - 1, n - 1, m) % m\n    print(d)", "for i in range(int(input())):\n    (x, y) = map(int, input().split())\n    m = 10 ** 9 + 7\n    ans = y % m * pow(y - 1, x - 1, m) % m\n    print(ans)", "t = int(input())\nwhile t:\n    (n, k) = (int(x) for x in input().split())\n    m = 10 ** 9 + 7\n    ans = k % m * pow(k - 1, n - 1, m) % m\n    print(ans)\n    t = t - 1", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    d = k % m * pow(k - 1, n - 1, m) % m\n    print(d)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    print(k % m * pow(k - 1, n - 1, m) % m)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    print(k % m * pow(k - 1, n - 1, m) % m)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    m = 10 ** 9 + 7\n    print(k % m * pow(k - 1, n - 1, m) % m)", "m = 10 ** 9 + 7\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(k % m * pow(k - 1, n - 1, m) % m)", "mod = 10 ** 9 + 7\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    print(k % mod * pow(k - 1, n - 1, mod) % mod)", "prime = 10 ** 9 + 7\nt = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    print(k % prime * pow(k - 1, n - 1, prime) % prime)\n    t -= 1", "prime = 10 ** 9 + 7\nt = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    print(k % prime * pow(k - 1, n - 1, prime) % prime)\n    t -= 1", "prime = 10 ** 9 + 7\nt = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    print(k % prime * pow(k - 1, n - 1, prime) % prime)\n    t -= 1", "t = int(input())\nfor case in range(t):\n    (n, k) = map(int, input().split())\n    m = 1000000007\n    k = k * pow((k - 1) % m, (n - 1) % m, 1000000007)\n    print(k % m)", "def mult(n, k):\n    if n == 0:\n        return 1\n    if n == 1:\n        return k\n    else:\n        pcount = 1\n        ans = k\n        while True:\n            if pcount * 2 > n:\n                break\n            ans = ans % constant * (ans % constant) % constant\n            pcount = pcount * 2\n        return ans % constant * (mult(n - pcount, k) % constant) % constant\n\ndef mult2(n, k):\n    return pow(k, n, constant)\nconstant = pow(10, 9) + 7\n\ndef answer():\n    for t in range(int(input())):\n        (N, K) = [int(x) for x in input().split()]\n        if N == 1:\n            print(K)\n        elif N != 1 and K == 1:\n            print(0)\n        elif N != 1 and K != 1:\n            print(K * (mult(N - 1, K - 1) % constant) % constant)\n    return\nanswer()", "def mult(n, k):\n    if n == 0:\n        return 1\n    if n == 1:\n        return k\n    else:\n        pcount = 1\n        ans = k\n        while True:\n            if pcount * 2 > n:\n                break\n            ans = ans % constant * (ans % constant) % constant\n            pcount = pcount * 2\n        return ans % constant * (mult(n - pcount, k) % constant) % constant\n\ndef mult2(n, k):\n    return pow(k, n, constant)\nconstant = pow(10, 9) + 7\n\ndef answer():\n    for t in range(int(input())):\n        (N, K) = [int(x) for x in input().split()]\n        if N == 1:\n            print(K)\n        elif N != 1 and K == 1:\n            print(0)\n        elif N != 1 and K != 1:\n            print(K * (mult2(N - 1, K - 1) % constant) % constant)\n    return\nanswer()", "def power(x, y, p):\n    res = 1\n    x = x % p\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nfor t in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    count = k - 1\n    mod = 10 ** 9 + 7\n    ans = k\n    ans = ans % mod * power(count, n - 1, mod) % mod % mod\n    print(ans)", "def power(x, y):\n    if y == 0:\n        return 1\n    elif y == 1:\n        return x\n    else:\n        a = power(x, y // 2) % 1000000007\n        if y % 2 == 0:\n            return a * a % 1000000007\n        else:\n            return a * a * x % 1000000007\nfor i in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    p = power(k - 1, n - 1)\n    ans = p * k\n    print(ans % 1000000007)", "def power(x, y, p):\n    res = 1\n    x = x % p\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nfor t in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    count = k - 1\n    mod = 10 ** 9 + 7\n    ans = k\n    ans = ans % mod * power(count, n - 1, mod) % mod % mod\n    print(ans)", "def power(a, b, m):\n    if a == 0:\n        return 0\n    if b == 0:\n        return 1\n    p = power(a, b // 2, m) % m\n    p = p * p % m\n    if b % 2 == 1:\n        p = p * a % m\n    return p\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    ans = power(k - 1, n - 1, 1000000007)\n    ans = ans * k\n    ans = ans % 1000000007\n    print(ans)", "mod = 1000000007\nfor _ in range(int(input())):\n    (n, k) = input().split()\n    (n, k) = (int(n), int(k))\n    print(k * pow(k - 1, n - 1, mod) % mod)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    prod = k\n    prod2 = pow(k - 1, n - 1, 1000000007)\n    prod *= prod2\n    prod %= 1000000007\n    print(prod)", "memo = {}\nM = pow(10, 9) + 7\n\ndef power(k, n):\n    if n in memo:\n        return memo\n    if n == 0 or n == 1:\n        return pow(k, n)\n    if n % 2 == 0:\n        a = power(k, n // 2) % M\n        memo[n] = a * a % M\n        return memo[n]\n    else:\n        a = power(k, (n - 1) // 2) % M\n        memo[n] = a * a * k % M\n        return memo[n]\nt = int(input())\nfor i in range(t):\n    memo = {}\n    (n, k) = (int(x) for x in input().split())\n    print(power(k - 1, n - 1) * k % M)", "m = 1000000007\n\ndef multiply(n, k):\n    if k == 0:\n        return 1\n    mul = multiply(n, k // 2) % m\n    if k % 2 == 1:\n        return n * mul * mul\n    else:\n        return mul * mul\n\ndef number(n, k):\n    ans = k\n    if n - 1 == 0:\n        ans = ans * 1\n    elif k - 1 == 0:\n        ans = ans * 0\n    else:\n        ans = ans * multiply(k - 1, n - 1)\n        ans = ans % m\n    return ans\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split(' '))\n    print(number(n, k))", "def pow_mod(x, y, z):\n    number = 1\n    while y:\n        if y & 1:\n            number = number * x % z\n        y >>= 1\n        x = x * x % z\n    return number\nt = int(input())\nMOD = 10 ** 9 + 7\nfor _ in range(0, t):\n    (n, k) = map(int, input().split())\n    if k == 1:\n        if n == 1:\n            print(1)\n        else:\n            print(0)\n    elif n == 1:\n        if k == 1:\n            print(1)\n        else:\n            print(n * k)\n    else:\n        ans = 1\n        ans = k % MOD * int(pow_mod(k - 1, n - 1, MOD)) % MOD\n        print(ans)", "t = int(input())\nmod = 1000000007\nwhile t:\n    num = input().split()\n    n = int(num[0])\n    m = int(num[1])\n    a = 1\n    b = m - 1\n    n = n - 1\n    while n > 0:\n        if n % 2 != 0:\n            a *= b\n            a %= mod\n        b *= b\n        b %= mod\n        n = n // 2\n    sol = a * m % mod\n    print(sol)\n    t -= 1", "def power(x, y):\n    if y == 0:\n        return 1\n    temp = power(int(x), int(y / 2)) % 1000000007\n    if y % 2 == 0:\n        return temp * temp % 1000000007\n    else:\n        return x * temp * temp % 1000000007\nt = int(input())\nfor i in range(t):\n    a = [int(i) for i in input().split()]\n    (m, k) = (a[0], a[1])\n    (mm, kk) = (m - 1 % 1000000007, k - 1 % 1000000007)\n    count = k * power(kk, mm)\n    print(count % 1000000007)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    mod = 1000000007\n    print(k % mod * pow(k - 1, n - 1, mod) % mod)", "def bipin3():\n\n    def func(a, b):\n        if b:\n            if b & 1:\n                return a * func(a, b - 1) % 1000000007\n            else:\n                k = a * a % 1000000007\n                return k * func(k, b // 2 - 1) % 1000000007\n        else:\n            return 1\n    test = int(input())\n    while test:\n        (z, k) = map(int, input().split())\n        if z == 1:\n            print(k)\n        elif k == 1:\n            print(0)\n        else:\n            print(k * func(k - 1, z - 1) % 1000000007)\n        test -= 1\nbipin3()", "def power(x, y):\n    if y == 0:\n        return 1\n    if y == 1:\n        return x\n    temp = power(x, y // 2)\n    if y % 2 == 0:\n        return temp * temp % 1000000007\n    else:\n        return x * temp * temp % 1000000007\nt = int(input())\nb = []\nfor i in range(0, t):\n    a = []\n    a = list(map(int, input().split()))\n    tot = power(a[1] - 1, a[0] - 1)\n    t = str(tot * a[1] % 1000000007)\n    b.append(t)\nprint('\\n'.join(b))", "import math\nT = int(input())\nfor i in range(0, T):\n    (n, k) = map(int, input().split())\n    a = pow(k - 1, n - 1, 1000000007)\n    a = a * k % 1000000007\n    print(a)", "Testcases = int(input())\nfor Testcase in range(0, Testcases):\n    List = input().split()\n    N = int(List[0])\n    K = int(List[1])\n    C = 10 ** 9 + 7\n    Result = K * pow(K - 1, N - 1, C) % C\n    print(Result)", "import math\nq = 1000000007\n\ndef fast_exp(base, exp):\n    res = 1\n    while exp > 0:\n        if exp % 2 == 1:\n            res = res * base % q\n        base = base * base % q\n        exp //= 2\n    return res\nt = int(input())\nwhile t:\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    if n == 1:\n        print(k)\n        t -= 1\n        continue\n    p = k * fast_exp(k - 1, n - 1)\n    print(int(p % q))\n    t -= 1", "t = int(input())\nfor i in range(1, t + 1):\n    numbers = list(map(int, input().split()))\n    n = numbers[0]\n    k = numbers[1]\n    k1 = k % (10 ** 9 + 7)\n    k2 = pow(k - 1, n - 1, 10 ** 9 + 7)\n    temp = k1 * k2 % (10 ** 9 + 7)\n    print(temp)", "'__author__' == 'deepak Singh Mehta(learning to code :) ) '\nmod = 1000000007\n\ndef pow(b, e, m):\n    global mod\n    c = 1\n    while e:\n        if e & 1:\n            c = c * b % m\n        e //= 2\n        b = b * b % m\n    return c\ntests = int(input())\nfor _ in range(tests):\n    (n, k) = map(int, input().split())\n    ans = 0\n    if k == 1 and n > 1:\n        ans = 0\n    else:\n        ans = k\n        ans = ans % mod * pow(k - 1, n - 1, mod) % mod\n    print(ans)", "def power(x, y):\n    result = 1\n    value = x\n    power = y\n    while power > 0:\n        if power % 2 == 1:\n            result = result * value\n        value = value * value\n        value = value % 1000000007\n        power = power // 2\n    return result\nT = int(input())\nwhile T > 0:\n    (N, K) = map(int, input().split())\n    ways = K\n    temp = power(K - 1, N - 1)\n    ways = ways * temp\n    ways = ways % 1000000007\n    print(ways)\n    T = T - 1", "def power(x, y):\n    if y == 0:\n        return 1\n    elif y == 1:\n        return x\n    elif y == -1:\n        return 1 / float(x)\n    elif y % 2 == 0:\n        tmp = power(x, y // 2)\n        return tmp * tmp\n    else:\n        tmp = power(x, y // 2)\n        if y > 0:\n            return x * tmp * tmp\n        elif y == -3:\n            return tmp / float(x)\n        else:\n            return tmp * tmp / float(x)\n\ndef main():\n    t = int(input())\n    for j in range(t):\n        l = [int(i) for i in input().split()]\n        (no, col) = (l[0], l[1])\n        print(pow(col, 1, 1000000007) * pow(col - 1, no - 1, 1000000007) % 1000000007)\nmain()", "for _ in range(int(input())):\n    (m, n) = list(map(int, input().split()))\n    mod = 10 ** 9 + 7\n    print(n * pow(n - 1, m - 1, mod) % mod)", "mod = 1000000007\nT = int(input())\n\ndef fun(n, k):\n    a = k - 1\n    b = n - 1\n    ans = k\n    while b != 0:\n        if b % 2 == 1:\n            ans = ans * a\n            ans = ans % mod\n        a = a * a\n        a = a % mod\n        b = b // 2\n    return ans\nfor i in range(T):\n    (n, k) = map(int, input().split())\n    print(fun(n, k))", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    print(k * pow(k - 1, n - 1, 10 ** 9 + 7) % (10 ** 9 + 7))", "t = int(input())\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    ans = r * pow(r - 1, l - 1, 1000000007)\n    ans %= 1000000007\n    print(ans)", "t = int(input())\nwhile t != 0:\n    t = t - 1\n    (n, k) = [int(y) for y in input().split()]\n    ans = pow(k - 1, n - 1, 1000000007) * k % 1000000007\n    print(ans)", "import math\nimport sys\n\ndef main():\n    m = int(input())\n    for i in range(1, m + 1, 1):\n        (n, k) = map(int, sys.stdin.readline().split())\n        to = 1\n        to = pow(k - 1, n - 1, 1000000007)\n        to = to * k % 1000000007\n        print(to)\nmain()", "import sys\n\ndef power(base, exp):\n    if exp == 0:\n        return 1\n    if exp == 1:\n        return base\n    if exp % 2 == 0:\n        half = power(base, exp / 2) % 1000000007\n        return half * half % 1000000007\n    else:\n        half = power(base, (exp - 1) / 2)\n        return base * (half * half % 1000000007) % 1000000007\nnum_of_test_cases = int(input())\nwhile num_of_test_cases:\n    configuration = str(input())\n    num_zombie = int(configuration.split(' ')[0])\n    num_colors = int(configuration.split(' ')[1])\n    if num_zombie == 1:\n        print(num_colors)\n        num_of_test_cases -= 1\n        continue\n    res = int(num_colors * power(num_colors - 1, num_zombie - 1))\n    res %= 1000000007\n    print(res)\n    num_of_test_cases -= 1", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    print(k * pow(k - 1, n - 1, 1000000007) % 1000000007)", "def f(x, e, m):\n    X = x\n    E = e\n    Y = 1\n    while E > 0:\n        if E % 2 == 0:\n            X = X * X % m\n            E = E / 2\n        else:\n            Y = X * Y % m\n            E = E - 1\n    return Y\nimport math\ntestCases = int(input())\nfor c in range(0, testCases):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    temp = f(k - 1, n - 1, 1000000007)\n    temp2 = k % 1000000007\n    answer = temp * temp2 % 1000000007\n    print(answer)", "a = int(input())\nfor i in range(a):\n    (y, x) = map(int, input().split())\n    print(x * pow(x - 1, y - 1, 10 ** 9 + 7) % (10 ** 9 + 7))", "from sys import stdin\nt = int(stdin.readline())\nfor i in range(t):\n    (n, k) = map(int, stdin.readline().split())\n    ans = pow(k - 1, n - 1, 1000000007) * k % 1000000007\n    print(ans)", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    x = pow(k - 1, n - 1, 10 ** 9 + 7)\n    y = k % (10 ** 9 + 7)\n    print(x * y % (10 ** 9 + 7))\n    t = t - 1", "import sys\n\ndef sq(x, n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        if x > 10000007:\n            return x % 1000000007\n        return x\n    elif n % 2 == 0:\n        p = sq(x, n / 2)\n        p *= p\n        if p > 1000000007:\n            return p % 1000000007\n        return p\n    else:\n        p = sq(x, (n - 1) / 2)\n        p *= p * x\n        if p > 1000000007:\n            return p % 1000000007\n        return p\nt = int(input())\nwhile t:\n    (n, k) = map(int, sys.stdin.readline().split())\n    if n == 1:\n        res = k\n    elif k == 1:\n        res = 0\n    else:\n        res = sq(k - 1, n - 1)\n        res = res * k\n    res = res % (1000000000 + 7)\n    print(res, '\\n')\n    t = t - 1", "MOD = 1000000007\n\ndef PowMod(n, b):\n    if n == 0 and b == 0:\n        return 1\n    ret = 1\n    while n > 0:\n        if n % 2 == 1:\n            ret = ret * b % MOD\n        b = b * b % MOD\n        n >>= 1\n    return ret\nT = int(input())\nfor i in range(0, T):\n    (N, K) = map(int, input().split(' '))\n    print(K * PowMod(N - 1, K - 1) % MOD)", "MOD = 1000000007\n\ndef fast_exp(base, exp):\n    res = 1\n    while exp:\n        if exp & 1:\n            res = res * base % MOD\n        base = base * base % MOD\n        exp = exp >> 1\n    return res\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k == 1:\n        if n == 1:\n            print('1')\n        else:\n            print('0')\n        continue\n    ans = k\n    ans = ans * fast_exp(k - 1, n - 1) % MOD\n    print(ans)", "t = int(input())\nmod = 1000000007\nfor T in range(t):\n    l = list(map(int, input().split()))\n    n = l[0]\n    k = l[1]\n    ans = pow(k - 1, n - 1, mod)\n    ans *= k\n    ans %= mod\n    print(ans)", "mod = 10 ** 9 + 7\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    sum = k\n    sum *= pow(k - 1, n - 1, mod)\n    sum %= mod\n    print(sum)\n    t -= 1", "mod = int(1000000007)\n\ndef pow1(x, y):\n    temp = 0\n    if y == 0:\n        return 1\n    temp = pow1(x, int(y / 2)) % mod\n    if y % 2 == 0:\n        temp = temp * temp % mod\n        return temp\n    else:\n        temp = temp * temp % mod\n        temp = x * temp % mod\n        return temp\nt = int(input())\nwhile t != 0:\n    t -= 1\n    (x, y) = map(int, input().split())\n    print(y * pow1(y - 1, x - 1) % mod)", "import math\nT = int(input())\nfor i in range(0, T):\n    (a, b) = map(int, input().split())\n    x = pow(b - 1, a - 1, 1000000007)\n    x = x * b\n    x = x % 1000000007\n    print(x)", "import math\nT = int(input())\nfor i in range(0, T):\n    (a, b) = map(int, input().split())\n    x = pow(b - 1, a - 1, 1000000007)\n    x = x * b\n    x = x % 1000000007\n    print(x)", "def modpow(b, e, mod):\n    res = 1\n    b %= mod\n    while e:\n        if e & 1:\n            res = res * b % mod\n        b = b * b % mod\n        e >>= 1\n    return res\nt = int(input())\nmod = int(1000000000.0) + 7\nfor i in range(t):\n    (n, k) = map(int, input().split(' '))\n    t = k * modpow(k - 1, n - 1, mod)\n    t %= mod\n    print(t)", "import sys\n\ndef long_pow(x, y, z):\n    number = 1\n    while y:\n        if y & 1:\n            number = number * x % z\n        y >>= 1\n        x = x * x % z\n    return number\ntest_cases = int(input())\nfor test in range(test_cases):\n    (n, m) = map(int, input().split())\n    ans = m * long_pow(m - 1, n - 1, 1000000007) % 1000000007\n    print(ans)", "def f(x, e, m):\n    X = x\n    E = e\n    Y = 1\n    while E > 0:\n        if E % 2 == 0:\n            X = X * X % m\n            E = E / 2\n        else:\n            Y = X * Y % m\n            E = E - 1\n    return Y\nfor tests in range(int(input())):\n    [N, K] = [int(i) for i in input().split()]\n    N -= 1\n    p = K\n    p = p * f(K - 1, N, 10 ** 9 + 7) % (10 ** 9 + 7)\n    print(p)", "def gao(x, y):\n    if x == 1:\n        return y\n    if y == 1:\n        return 0 if x > 1 else 1\n    m = 10 ** 9 + 7\n\n    def p(x, e):\n        if e == 0:\n            return 1\n        q = p(x, e // 2)\n        q = q * q % m\n        return q * x % m if e % 2 == 1 else q\n    return p(y - 1, x - 1) * y % m\nn = int(input())\nfor _ in range(n):\n    (x, y) = map(int, input().split())\n    print(gao(x, y))", "from sys import stdin as sin\nt = int(sin.readline())\nfor _ in range(t):\n    (n, k) = map(int, sin.readline().split())\n    x = pow(k - 1, n - 1, 1000000007)\n    x = x * k % 1000000007\n    print(x)", "md = int(1000000000.0 + 7)\nT = int(input())\nwhile T > 0:\n    T -= 1\n    (n, k) = map(int, input().split())\n    ans = k * pow(k - 1, n - 1, md) % md\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    if k == 1 and n == 1:\n        print(1)\n    elif k == 1 and n > 1:\n        print(0)\n    else:\n        print(pow(k - 1, n - 1, 1000000007) * k % 1000000007)", "import math\nT = int(input())\nfor i in range(0, T):\n    (a, b) = map(int, input().split())\n    x = pow(b - 1, a - 1, 1000000007)\n    x = x * b\n    x = x % 1000000007\n    print(x)", "def MOD(x):\n    return x % 1000000007\n\ndef bigMod(x, n):\n    if n == 0:\n        return 1\n    ret = bigMod(x, n // 2)\n    ret = MOD(ret * ret)\n    if n % 2 == 1:\n        ret = MOD(ret * x)\n    return ret\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    ans = MOD(bigMod(k - 1, n - 1) * k)\n    print(ans)", "def fast_power(a, n):\n    m = 1000000007\n    result = 1\n    value = a\n    power = n\n    while power > 0:\n        if power % 2 == 1:\n            result = result * value\n            result = result % m\n        value = value * value\n        value = value % m\n        power = power // 2\n    return result\nfor t in range(int(input())):\n    s = input().split()\n    n = int(s[0])\n    k = int(s[1])\n    if n > 1 and k == 1:\n        print('0')\n    else:\n        m = 1000000007\n        p = fast_power(k - 1, n - 1) % m\n        print(k * p % m)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    ans = k\n    ans = ans * pow(k - 1, n - 1, 1000000007) % 1000000007\n    print(ans)", "t = int(input())\nans = []\nfor i in range(t):\n    x = list(map(str, input().split()))\n    n = int(x[0])\n    k = int(x[1])\n    temp_old = int(k % (10 ** 9 + 7) * pow(k - 1, n - 1, 10 ** 9 + 7) % (10 ** 9 + 7))\n    ans.append(temp_old)\nfor x in ans:\n    print(x)", "for _ in range(int(input())):\n    nk = [int(i) for i in input().split()]\n    n = nk[0]\n    k = nk[1]\n    if n == 1 and k == 1:\n        print(1)\n        continue\n    ans = k * pow(k - 1, n - 1, 1000000007) % 1000000007\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = tuple(map(int, input().split()))\n    ans = pow(k - 1, n - 1, 1000000007)\n    ans = ans % 1000000007 * (k % 1000000007) % 1000000007\n    print(ans)", "import sys\nmod = 1000000007\n\ndef go(z):\n    (n, k) = (z[0], z[1])\n    ret = pow(k - 1, n - 1, mod) * k\n    ret = ret % mod\n    print(ret)\nf = sys.stdin\nn = int(f.readline().strip())\nfor i in range(n):\n    z = [int(x) for x in f.readline().split()]\n    go(z)", "def mod_pow(base, exp, mod):\n    result = 1\n    while exp:\n        if exp & 1:\n            result = result * base % mod\n        exp >>= 1\n        base = base * base % mod\n    return result\n\ndef solve(n, k, mod):\n    return k * mod_pow(k - 1, n - 1, mod) % mod\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    print(solve(n, k, 10 ** 9 + 7))", "test = int(input())\nwhile test != 0:\n    test -= 1\n    (n, k) = map(int, input().split())\n    m = pow(10, 9) + 7\n    ans = k % m\n    c = k - 1\n    k = int(bin(n - 1)[2:])\n    while k != 0:\n        if k % 10 == 1:\n            ans = ans * c % m\n        k = k // 10\n        c = c * c % m\n    print(ans % m)", "x = int(input())\nmod = 1000000007\nfor q in range(x):\n    y = input().split(' ')\n    n = int(y[0])\n    k = int(y[1])\n    ans = pow(k - 1, n - 1, mod)\n    ans = k * ans % mod\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = pow(k - 1, n - 1, 1000000007) * k % 1000000007\n    print(ans)", "for y in range(int(input())):\n    (N, K) = map(int, input().split())\n    ans = K * pow(K - 1, N - 1, 1000000007) % 1000000007\n    print(ans)", "for x in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = pow(k - 1, n - 1, 1000000007) * k % 1000000007\n    print(ans)", "t = int(input())\nfor i in range(t):\n    s = input().split(' ')\n    x = int(s[0])\n    y = int(s[1])\n    m = 0\n    if x == 1:\n        m = y\n    else:\n        m = y * pow(y - 1, x - 1, 1000000007)\n    print(m % 1000000007)", "m = 10 ** 9 + 7\n\ndef Kode(x, e, m):\n    X = x\n    E = e\n    Y = 1\n    while E > 0:\n        if E % 2 == 0:\n            X = X * X % m\n            E = E / 2\n        else:\n            Y = X * Y % m\n            E = E - 1\n    return Y\nfor tt in range(int(input())):\n    (n, k) = map(int, input().split())\n    z = k - 1\n    a = k % m * Kode(z, n - 1, m) % m\n    print(a)", "m = 10 ** 9 + 7\nfor tt in range(int(input())):\n    (n, k) = map(int, input().split())\n    z = k - 1\n    aa = k % m\n    print(aa * pow(z, n - 1, m) % m)", "def fast_power(a, n):\n    result = 1\n    value = a\n    power = n\n    while power > 0:\n        if power % 2 == 1:\n            result = result * value % 1000000007\n        value = value * value % 1000000007\n        power = int(power // 2)\n    return result\nt = int(input())\nwhile t > 0:\n    x = input().split()\n    n = int(x[0])\n    k = int(x[1])\n    ans = k * fast_power(k - 1, n - 1)\n    print(ans % 1000000007)\n    t = t - 1", "M = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(m * pow(m - 1, n - 1, M) % M)", "def power(a, b, n):\n    r = 1\n    while b > 0:\n        if b & 1 == 1:\n            r = r * a % n\n        b = b // 2\n        a = a * a % n\n    return r % n\nt = int(input())\nwhile t:\n    t -= 1\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    x = k\n    n -= 1\n    k -= 1\n    print(power(k, n, 1000000007) * x % 1000000007)"]