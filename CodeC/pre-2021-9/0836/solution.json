["from collections import Counter\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    orders = list(map(int, input().split()))\n    tables = set()\n    oper = 0\n    for (k, i) in enumerate(orders):\n        if i in tables:\n            continue\n        oper += 1\n        if len(tables) < n:\n            tables.add(i)\n            continue\n        tmp = tables.copy()\n        for j in range(k + 1, m):\n            if len(tmp) == 1:\n                break\n            if orders[j] in tmp:\n                tmp.remove(orders[j])\n        tables.remove(tmp.pop())\n        tables.add(i)\n    print(oper)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    orders = list(map(int, input().split()))\n    tables = set()\n    oper = 0\n    for (k, i) in enumerate(orders):\n        if i in tables:\n            continue\n        oper += 1\n        if len(tables) < n:\n            tables.add(i)\n            continue\n        tmp = tables.copy()\n        for j in range(k + 1, m):\n            if len(tmp) == 1:\n                break\n            if orders[j] in tmp:\n                tmp.remove(orders[j])\n        tables.remove(tmp.pop())\n        tables.add(i)\n    print(oper)", "t = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    order = list(map(int, input().split()))\n    table = []\n    count = 0\n    for i in range(m):\n        if order[i] in table:\n            continue\n        count = count + 1\n        if len(table) < n:\n            table.append(order[i])\n            continue\n        unique = set(table)\n        for j in range(i + 1, m):\n            if len(unique) == 1:\n                break\n            if order[j] in unique:\n                unique.remove(order[j])\n        first = list(unique)[0]\n        table.remove(first)\n        table.append(order[i])\n    print(count)\n    t = t - 1", "t = int(input())\nfor i in range(t):\n    (a, n) = map(int, input().split())\n    l = list(map(int, input().split()))\n    k = []\n    v = 0\n    for j in range(n):\n        if l[j] in k:\n            continue\n        v += 1\n        if len(k) < a:\n            k.append(l[j])\n            continue\n        x = set(k)\n        for z in range(j + 1, n):\n            if len(x) == 1:\n                break\n            if l[z] in x:\n                x.remove(l[z])\n        m = list(x)[0]\n        k.remove(m)\n        k.append(l[j])\n    print(v)", "t = int(input())\nfor i in range(t):\n    (a, n) = map(int, input().split())\n    l = list(map(int, input().split()))\n    k = []\n    v = 0\n    for j in range(n):\n        if l[j] in k:\n            continue\n        v += 1\n        if len(k) < a:\n            k.append(l[j])\n            continue\n        x = set(k)\n        for z in range(j + 1, n):\n            if len(x) == 1:\n                break\n            if l[z] in x:\n                x.remove(l[z])\n        m = list(x)[0]\n        k.remove(m)\n        k.append(l[j])\n    print(v)", "t = int(input())\nfor i in range(t):\n    (a, n) = map(int, input().split())\n    l = list(map(int, input().split()))\n    k = []\n    v = 0\n    for j in range(n):\n        if l[j] in k:\n            continue\n        v += 1\n        if len(k) < a:\n            k.append(l[j])\n            continue\n        x = set(k)\n        for z in range(j + 1, n):\n            if len(x) == 1:\n                break\n            if l[z] in x:\n                x.remove(l[z])\n        m = list(x)[0]\n        k.remove(m)\n        k.append(l[j])\n    print(v)", "t = int(input())\nfor i in range(t):\n    (a, n) = map(int, input().split())\n    l = list(map(int, input().split()))\n    k = []\n    v = 0\n    for j in range(n):\n        if l[j] in k:\n            continue\n        v += 1\n        if len(k) < a:\n            k.append(l[j])\n            continue\n        x = set(k)\n        for z in range(j + 1, n):\n            if len(x) == 1:\n                break\n            if l[z] in x:\n                x.remove(l[z])\n        m = list(x)[0]\n        k.remove(m)\n        k.append(l[j])\n    print(v)", "from queue import Queue\nt = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    orders = list(map(int, input().split()))\n    cin = [-1 for num in range(401)]\n    d = {}\n    for ele in orders:\n        if ele not in d:\n            d[ele] = 1\n        else:\n            d[ele] += 1\n    tables = 0\n    clean = 0\n    q = Queue()\n    for k in range(len(orders)):\n        if cin[orders[k]] == 1:\n            d[orders[k]] -= 1\n            if d[orders[k]] <= 0:\n                q.put(orders[k])\n            continue\n        elif tables < n:\n            cin[orders[k]] = 1\n            tables += 1\n            clean += 1\n            d[orders[k]] -= 1\n            if d[orders[k]] <= 0:\n                q.put(orders[k])\n        elif q.empty() == 1 and k <= m - 2:\n            temp = []\n            for j in range(k + 1, m):\n                if cin[orders[j]] == 1 and orders[j] not in temp:\n                    temp.append(orders[j])\n            cin[temp[-1]] = -1\n            cin[orders[k]] = 1\n            clean += 1\n            d[orders[k]] -= 1\n            if d[orders[k]] <= 0:\n                q.put(orders[k])\n        elif q.empty() == 1 and k == m - 1:\n            clean += 1\n        else:\n            ele = q.get()\n            cin[ele] = -1\n            cin[orders[k]] = 1\n            clean += 1\n            d[orders[k]] -= 1\n            if d[orders[k]] <= 0:\n                q.put(orders[k])\n    print(clean)\n    t -= 1", "from queue import Queue\nt = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    orders = list(map(int, input().split()))\n    cin = [-1 for num in range(401)]\n    d = {}\n    for ele in orders:\n        if ele not in d:\n            d[ele] = 1\n        else:\n            d[ele] += 1\n    tables = 0\n    clean = 0\n    q = Queue()\n    for k in range(len(orders)):\n        if cin[orders[k]] == 1:\n            d[orders[k]] -= 1\n            if d[orders[k]] <= 0:\n                q.put(orders[k])\n            continue\n        elif tables < n:\n            cin[orders[k]] = 1\n            tables += 1\n            clean += 1\n            d[orders[k]] -= 1\n            if d[orders[k]] <= 0:\n                q.put(orders[k])\n        elif q.empty() == 1 and k <= m - 2:\n            temp = []\n            for j in range(k + 1, m):\n                if cin[orders[j]] == 1 and orders[j] not in temp:\n                    temp.append(orders[j])\n            cin[temp[-1]] = -1\n            cin[orders[k]] = 1\n            clean += 1\n            d[orders[k]] -= 1\n            if d[orders[k]] <= 0:\n                q.put(orders[k])\n        elif q.empty() == 1 and k == m - 1:\n            clean += 1\n        else:\n            ele = q.get()\n            cin[ele] = -1\n            cin[orders[k]] = 1\n            clean += 1\n            d[orders[k]] -= 1\n            if d[orders[k]] <= 0:\n                q.put(orders[k])\n    print(clean)\n    t -= 1", "from tkinter import Y\nY = int(input())\nfor i in range(Y):\n    (a, n) = map(int, input().split())\n    l = list(map(int, input().split()))\n    k = []\n    b = 0\n    for j in range(n):\n        if l[j] in k:\n            continue\n        b += 1\n        if len(k) < a:\n            k.append(l[j])\n            continue\n        x = set(k)\n        for z in range(j + 1, n):\n            if len(x) == 1:\n                break\n            if l[z] in x:\n                x.remove(l[z])\n        m = list(x)[0]\n        k.remove(m)\n        k.append(l[j])\n    print(b)", "t = int(input())\nfor i in range(t):\n    (a, n) = map(int, input().split())\n    l = list(map(int, input().split()))\n    k = []\n    v = 0\n    for j in range(n):\n        if l[j] in k:\n            continue\n        v += 1\n        if len(k) < a:\n            k.append(l[j])\n            continue\n        x = set(k)\n        for z in range(j + 1, n):\n            if len(x) == 1:\n                break\n            if l[z] in x:\n                x.remove(l[z])\n        m = list(x)[0]\n        k.remove(m)\n        k.append(l[j])\n    print(v)", "t = int(input())\nfor i in range(t):\n    (a, n) = map(int, input().split())\n    l = list(map(int, input().split()))\n    k = []\n    v = 0\n    for j in range(n):\n        if l[j] in k:\n            continue\n        v += 1\n        if len(k) < a:\n            k.append(l[j])\n            continue\n        x = set(k)\n        for z in range(j + 1, n):\n            if len(x) == 1:\n                break\n            if l[z] in x:\n                x.remove(l[z])\n        m = list(x)[0]\n        k.remove(m)\n        k.append(l[j])\n    print(v)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (a, n) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    mk = []\n    v = 0\n    for i in range(n):\n        if arr[i] in mk:\n            continue\n        v += 1\n        if len(mk) < a:\n            mk.append(arr[i])\n            continue\n        k = set(mk)\n        for j in range(i + 1, n):\n            if len(k) == 1:\n                break\n            if arr[j] in k:\n                k.remove(arr[j])\n        m = list(k)[0]\n        mk.remove(m)\n        mk.append(arr[i])\n    print(v)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (a, n) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    mk = []\n    v = 0\n    for i in range(n):\n        if arr[i] in mk:\n            continue\n        v += 1\n        if len(mk) < a:\n            mk.append(arr[i])\n            continue\n        k = set(mk)\n        for j in range(i + 1, n):\n            if len(k) == 1:\n                break\n            if arr[j] in k:\n                k.remove(arr[j])\n        m = list(k)[0]\n        mk.remove(m)\n        mk.append(arr[i])\n    print(v)", "from collections import defaultdict\n\nclass Table:\n\n    def __init__(self, n, pos):\n        self.table = set()\n        self.pos = pos\n        self.n = n\n\n    def is_full(self):\n        return len(self.table) == self.n\n\n    def insert(self, k):\n        self.table.add(k)\n\n    def exists(self, k):\n        return k in self.table\n\n    def evict(self):\n        mmax = -1\n        to_remove = -1\n        for t in self.table:\n            if not self.pos[t]:\n                mmax = 10000000000\n                to_remove = t\n                break\n            elif self.pos[t][0] > mmax:\n                mmax = self.pos[t][0]\n                to_remove = t\n        if mmax == -1:\n            to_remove = next(iter(self.table))\n        self.table.remove(to_remove)\n\n    def remove_entry(self, k):\n        self.pos[k].pop(0)\n\ndef doit(n, ar):\n    pos = defaultdict(list)\n    for (i, a) in enumerate(ar):\n        pos[a].append(i)\n    table = Table(n, pos)\n    cleaned = 0\n    for (i, a) in enumerate(ar):\n        if table.exists(a):\n            pass\n        elif not table.is_full():\n            table.insert(a)\n            cleaned += 1\n        else:\n            table.evict()\n            table.insert(a)\n            cleaned += 1\n        table.remove_entry(a)\n    print(cleaned)\n\ndef solve():\n    for _ in range(int(input())):\n        (n, _) = (int(i) for i in input().split())\n        ar = [int(i) for i in input().split()]\n        doit(n, ar)\nsolve()", "from collections import defaultdict\n\ndef get_farthest_customer(allocation, request):\n    max_distance = -1\n    farthest_c = -1\n    for c in allocation:\n        if len(request[c]) == 0:\n            return c\n        elif request[c][0] > max_distance:\n            farthest_c = c\n            max_distance = request[c][0]\n    return farthest_c\nT = int(input())\noutput = []\nfor _ in range(T):\n    (N, M) = [int(x) for x in input().split()]\n    array = [int(x) for x in input().split()]\n    request = defaultdict(list)\n    for i in range(M):\n        request[array[i]].append(i)\n    tables = [x for x in range(N)]\n    allocation = {}\n    clean = 0\n    for c in array:\n        if c in allocation:\n            request[c].pop(0)\n            continue\n        elif len(tables) > 0:\n            tab = tables.pop()\n            clean += 1\n            allocation[c] = tab\n            request[c].pop(0)\n        else:\n            farthest_c = get_farthest_customer(allocation, request)\n            tab = allocation[farthest_c]\n            clean += 1\n            del allocation[farthest_c]\n            allocation[c] = tab\n            request[c].pop(0)\n    output.append(clean)\nfor o in output:\n    print(o)", "from collections import defaultdict\n\ndef get_farthest_customer(allocation, request):\n    max_distance = -1\n    farthest_c = -1\n    for c in allocation:\n        if len(request[c]) == 0:\n            return c\n        elif request[c][0] > max_distance:\n            farthest_c = c\n            max_distance = request[c][0]\n    return farthest_c\nT = int(input())\noutput = []\nfor _ in range(T):\n    (N, M) = [int(x) for x in input().split()]\n    array = [int(x) for x in input().split()]\n    request = defaultdict(list)\n    for i in range(M):\n        request[array[i]].append(i)\n    tables = [x for x in range(N)]\n    allocation = {}\n    clean = 0\n    for c in array:\n        if c in allocation:\n            request[c].pop(0)\n            continue\n        elif len(tables) > 0:\n            tab = tables.pop()\n            clean += 1\n            allocation[c] = tab\n            request[c].pop(0)\n        else:\n            farthest_c = get_farthest_customer(allocation, request)\n            tab = allocation[farthest_c]\n            clean += 1\n            del allocation[farthest_c]\n            allocation[c] = tab\n            request[c].pop(0)\n    output.append(clean)\nfor o in output:\n    print(o)", "T = int(input())\nfor i in range(T):\n    (a, n) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    mk = dict()\n    s = 0\n    v = 0\n    for i in range(n):\n        p = arr[i]\n        if p in mk:\n            continue\n        elif s < a:\n            mk[p] = 1\n            s += 1\n            v += 1\n        elif s == a:\n            k = set(mk.keys())\n            m = arr[i]\n            for j in range(i + 1, n):\n                if arr[j] in k:\n                    k.remove(arr[j])\n                    m = arr[j]\n            if len(k) != 0:\n                m = k.pop()\n            del mk[m]\n            mk[p] = 1\n            v += 1\n    print(v)", "for _ in range(int(input())):\n    (a, n) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    mk = dict()\n    s = 0\n    v = 0\n    for i in range(n):\n        p = arr[i]\n        if p in mk:\n            continue\n        elif s < a:\n            mk[p] = 1\n            s += 1\n            v += 1\n        elif s == a:\n            k = set(mk.keys())\n            m = arr[i]\n            for j in range(i + 1, n):\n                if arr[j] in k:\n                    k.remove(arr[j])\n                    m = arr[j]\n            if len(k) != 0:\n                m = k.pop()\n            del mk[m]\n            mk[p] = 1\n            v += 1\n    print(v)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (a, n) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    mk = []\n    v = 0\n    for i in range(n):\n        if arr[i] in mk:\n            continue\n        v += 1\n        if len(mk) < a:\n            mk.append(arr[i])\n            continue\n        k = set(mk)\n        for j in range(i + 1, n):\n            if len(k) == 1:\n                break\n            if arr[j] in k:\n                k.remove(arr[j])\n        m = list(k)[0]\n        mk.remove(m)\n        mk.append(arr[i])\n    print(v)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    order = list(map(int, input().split()))\n    a = []\n    cleaning = 0\n    for i in range(m):\n        if len(a) >= 1 and order[i] in a:\n            continue\n        cleaning += 1\n        if len(a) < n:\n            a.append(order[i])\n            continue\n        temp = set(a)\n        for j in range(i + 1, m):\n            if len(temp) == 1:\n                break\n            if order[j] in temp:\n                temp.remove(order[j])\n        a.remove(list(temp)[0])\n        a.append(order[i])\n    print(cleaning)", "t = int(input())\nwhile t > 0:\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    c = input().split()\n    s = set()\n    count = 0\n    l = []\n    for i in range(m):\n        c[i] = int(c[i])\n    for i in range(m):\n        if c[i] in l:\n            continue\n        count += 1\n        if len(l) < n:\n            l.append(c[i])\n            continue\n        temp = list(l)\n        for j in range(i + 1, m):\n            if len(temp) == 1:\n                break\n            if c[j] in temp:\n                temp.remove(c[j])\n        l.remove(temp[0])\n        l.append(c[i])\n    print(count)\n    t -= 1", "answers = []\n\ndef solve(N, M, orders):\n    store = {}\n    for (i, order) in enumerate(orders):\n        if order not in store:\n            store[order] = [i]\n        else:\n            store[order].append(i)\n    trackStore = {}\n    final = 0\n    for (i, order) in enumerate(orders):\n        if len(trackStore) == N and order not in trackStore:\n            temp = []\n            flag = 1\n            for ele in trackStore:\n                if len(store[ele]) == 0:\n                    del trackStore[ele]\n                    flag = 0\n                    break\n                for j in store[ele]:\n                    if j > i:\n                        temp.append(j)\n                        break\n            if flag == 1:\n                del trackStore[orders[max(temp)]]\n        if order not in trackStore:\n            trackStore[order] = 1\n            final += 1\n        store[order].pop(0)\n    answers.append(final)\nT = int(input())\nwhile T:\n    (N, M) = [int(x) for x in input().split()]\n    orders = [int(x) for x in input().split()]\n    solve(N, M, orders)\n    T -= 1\nfor ans in answers:\n    print(ans)", "answers = []\n\ndef solve(N, M, orders):\n    store = {}\n    for (i, order) in enumerate(orders):\n        if order not in store:\n            store[order] = [i]\n        else:\n            store[order].append(i)\n    trackSet = set()\n    final = 0\n    for (i, order) in enumerate(orders):\n        if len(trackSet) == N and order not in trackSet:\n            temp = []\n            flag = 1\n            for ele in trackSet:\n                if len(store[ele]) == 0:\n                    trackSet.discard(ele)\n                    flag = 0\n                    break\n                for j in store[ele]:\n                    if j > i:\n                        temp.append(j)\n                        break\n            if flag == 1:\n                trackSet.discard(orders[max(temp)])\n        if order not in trackSet:\n            trackSet.add(order)\n            final += 1\n        store[order].pop(0)\n    answers.append(final)\nT = int(input())\nwhile T:\n    (N, M) = [int(x) for x in input().split()]\n    orders = [int(x) for x in input().split()]\n    solve(N, M, orders)\n    T -= 1\nfor ans in answers:\n    print(ans)", "answers = []\n\ndef solve(N, M, orders):\n    store = {}\n    for (i, order) in enumerate(orders):\n        if order not in store:\n            store[order] = {'total': 1, 'last': [i]}\n        else:\n            store[order]['total'] += 1\n            store[order]['last'].append(i)\n    trackSet = set()\n    final = 0\n    for (i, order) in enumerate(orders):\n        if len(trackSet) == N and order not in trackSet:\n            temp = []\n            flag = 1\n            for ele in trackSet:\n                if store[ele]['total'] == 0:\n                    trackSet.discard(ele)\n                    flag = 0\n                    break\n                for j in store[ele]['last']:\n                    if j > i:\n                        temp.append(j)\n                        break\n            if flag == 1:\n                trackSet.discard(orders[max(temp)])\n        if order not in trackSet:\n            trackSet.add(order)\n            final += 1\n        store[order]['total'] -= 1\n    answers.append(final)\nT = int(input())\nwhile T:\n    (N, M) = [int(x) for x in input().split()]\n    orders = [int(x) for x in input().split()]\n    solve(N, M, orders)\n    T -= 1\nfor ans in answers:\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().strip().split())\n    orders = list(map(int, input().strip().split()))\n    custmap = {}\n    for (index, order) in enumerate(orders):\n        if order not in custmap:\n            custmap[order] = {'total': 1, 'last': [index]}\n        else:\n            custmap[order]['total'] += 1\n            custmap[order]['last'].append(index)\n    ocust = set()\n    ans = 0\n    for (index, order) in enumerate(orders):\n        if len(ocust) == n and order not in ocust:\n            temp = []\n            flag = True\n            for c in ocust:\n                if custmap[c]['total'] == 0:\n                    flag = False\n                    ocust.discard(c)\n                    break\n                for j in custmap[c]['last']:\n                    if j > index:\n                        temp.append(j)\n                        break\n            if flag:\n                ocust.discard(orders[max(temp)])\n        if order not in ocust:\n            ocust.add(order)\n            ans += 1\n        custmap[order]['total'] -= 1\n    print(ans)", "from math import gcd\nimport sys\nfrom heapq import heappush, heappop\nfrom collections import Counter, defaultdict, deque\ninput = lambda : sys.stdin.readline().strip()\nc = lambda x: 10 ** 9 if x == '?' else int(x)\n\nclass node:\n\n    def __init__(self, x, y):\n        self.a = [x, y]\n\n    def __lt__(self, b):\n        return b.a[0] < self.a[0]\n\n    def __repr__(self):\n        return str(self.a[0]) + ' ' + str(self.a[1])\n\ndef main():\n    for _ in range(int(input())):\n        heap = []\n        (n, m) = list(map(int, input().split()))\n        a = list(map(int, input().split()))\n        d = defaultdict(lambda : deque([]))\n        for i in range(m):\n            d[a[i]].append(i)\n        for i in d:\n            d[i].append(m)\n        l = []\n        s = set()\n        saaf = 0\n        for i in range(m):\n            if len(s) >= n and a[i] not in s:\n                a1 = max(l, key=lambda x: d[x][0])\n                l.remove(a1)\n                l.append(a[i])\n                s.discard(a1)\n                s.add(a[i])\n                d[a[i]].popleft()\n                saaf += 1\n            elif len(s) >= n and a[i] in s:\n                d[a[i]].popleft()\n            elif len(s) < n and a[i] not in s:\n                l.append(a[i])\n                d[a[i]].popleft()\n                s.add(a[i])\n                saaf += 1\n            elif len(s) < n and a[i] in s:\n                d[a[i]].popleft()\n        print(saaf)\nmain()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    tab = set()\n    for i in range(m):\n        if a[i] in tab:\n            continue\n        if len(tab) < n:\n            tab.add(a[i])\n            ans += 1\n            continue\n        x = set()\n        for j in range(i + 1, m):\n            if a[j] in tab and len(x) < n - 1:\n                x.add(a[j])\n        tab = x\n        tab.add(a[i])\n        ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    tab = set()\n    for i in range(m):\n        if a[i] in tab:\n            continue\n        if len(tab) < n:\n            tab.add(a[i])\n            ans += 1\n            continue\n        x = set()\n        for j in range(i + 1, m):\n            if a[j] in tab and len(x) < n - 1:\n                x.add(a[j])\n        tab = x\n        tab.add(a[i])\n        ans += 1\n    print(ans)", "try:\n    for _ in range(int(input())):\n        (N, M) = map(int, input().split())\n        memory = list(map(int, input().split()))\n        space = [0] * N\n        count = 0\n        i = -1\n        for item in memory:\n            bits = [1000] * N\n            i += 1\n            if item in space:\n                continue\n            else:\n                count += 1\n                if 0 in space:\n                    it = space.index(0)\n                    space[it] = item\n                else:\n                    for j in range(i + 1, len(memory)):\n                        if memory[j] in space:\n                            ii = space.index(memory[j])\n                            if bits[ii] == 1000:\n                                bits[ii] = j\n                    replaceable = max(bits)\n                    if replaceable != 1000:\n                        r_index = bits.index(replaceable)\n                        space[r_index] = item\n                    else:\n                        space[bits.index(1000)] = item\n        print(count)\nexcept:\n    pass", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = []\n    ans = 0\n    w = 0\n    for i in range(len(a)):\n        if len(l) != n:\n            if a[i] not in l:\n                l.append(a[i])\n                ans += 1\n        elif a[i] not in l:\n            m = 0\n            for j in range(len(l)):\n                if l[j] in a[i + 1:]:\n                    m = max(m, a[i + 1:].index(l[j]))\n                    w = 1\n                else:\n                    l[j] = a[i]\n                    ans += 1\n                    w = 0\n                    break\n            if w == 1:\n                c = 0\n                c = a[i + 1:][m]\n                h = 0\n                h = l.index(c)\n                l[h] = a[i]\n                ans += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    m = 0\n    w = 0\n    ans = 0\n    l = []\n    for i in range(len(a)):\n        if len(l) != n:\n            if a[i] not in l:\n                l.append(a[i])\n                ans += 1\n        elif a[i] not in l:\n            m = 0\n            for j in range(len(l)):\n                if l[j] in a[i + 1:]:\n                    m = max(m, a[i + 1:].index(l[j]))\n                    w = 1\n                else:\n                    l[j] = a[i]\n                    ans += 1\n                    w = 0\n                    break\n            if w == 1:\n                c = 0\n                c = a[i + 1:][m]\n                h = 0\n                h = l.index(c)\n                l[h] = a[i]\n                ans += 1\n    print(ans)", "for i in range(int(input())):\n    (t, nor) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    l = []\n    m = 0\n    w = 0\n    for i in range(len(a)):\n        if len(l) != t:\n            if a[i] not in l:\n                l.append(a[i])\n                ans += 1\n        elif a[i] not in l:\n            m = 0\n            for j in range(len(l)):\n                if l[j] in a[i + 1:]:\n                    m = max(m, a[i + 1:].index(l[j]))\n                    w = 1\n                else:\n                    l[j] = a[i]\n                    ans += 1\n                    w = 0\n                    break\n            if w == 1:\n                c = a[i + 1:][m]\n                h = l.index(c)\n                l[h] = a[i]\n                ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    order = list(map(int, input().split()))\n    table = []\n    ans = 0\n    tcount = 0\n    for i in range(m):\n        if order[i] in table:\n            continue\n        ans += 1\n        if tcount < n:\n            table += (order[i],)\n            tcount += 1\n            continue\n        tmp = set(table)\n        for j in range(i + 1, m):\n            if len(tmp) == 1:\n                break\n            elif order[j] in tmp:\n                tmp.remove(order[j])\n        table.remove(list(tmp)[0])\n        table += (order[i],)\n    print(ans)", "from typing import Iterable, Dict, Optional, Set\n\nclass CustomerState:\n\n    def __init__(self, customer_id):\n        self.__customer_id = customer_id\n        self.__is_seated = False\n        self.__order_ids = []\n\n    def add_order(self, order_id: int):\n        self.__order_ids.append(order_id)\n\n    def remove_order(self):\n        assert len(self.__order_ids) > 0, 'Attempted to remove orders from a customer with no orders left'\n        self.__order_ids.pop(0)\n\n    def seat(self):\n        self.__is_seated = True\n\n    def evict(self):\n        self.__is_seated = False\n\n    def is_seated(self) -> bool:\n        return self.__is_seated\n\n    def orders_left(self) -> int:\n        return len(self.__order_ids)\n\n    def customer_id(self) -> int:\n        return self.__customer_id\n\n    def earliest_next_reference(self) -> int:\n        if len(self.__order_ids) > 0:\n            return self.__order_ids[0]\n        return -1\n\n    def order_ids(self):\n        return self.__order_ids\n\ndef calculate_clean_count(table_count: int, customer_orders: Iterable[int]) -> int:\n    customer_states: Dict[CustomerState] = {}\n    for i in range(0, len(customer_orders)):\n        customer_id = customer_orders[i]\n        if customer_id not in customer_states:\n            customer_states[customer_id] = CustomerState(customer_id)\n        customer_states[customer_id].add_order(i)\n    seated_customers: Set[CustomerState] = set()\n    clean_count = 0\n    for customer_id in customer_orders:\n        target_customer = customer_states[customer_id]\n        if target_customer.is_seated():\n            target_customer.remove_order()\n            continue\n        if len(seated_customers) != table_count:\n            target_customer.seat()\n            seated_customers.add(target_customer)\n            clean_count += 1\n            target_customer.remove_order()\n            continue\n        eviction_target: CustomerState = None\n        for customer_state in seated_customers:\n            if customer_state.orders_left() == 0:\n                eviction_target = customer_state\n                break\n            if eviction_target is None or eviction_target.earliest_next_reference() < customer_state.earliest_next_reference():\n                eviction_target = customer_state\n        eviction_target.evict()\n        seated_customers.remove(eviction_target)\n        clean_count += 1\n        target_customer.seat()\n        seated_customers.add(target_customer)\n        target_customer.remove_order()\n    return clean_count\ntestcase_count = int(input())\nfor _ in range(0, testcase_count):\n    (table_count, customer_order_count) = [int(number) for number in input().split(' ')]\n    customer_orders = [int(number) for number in input().split(' ')]\n    print(calculate_clean_count(table_count, customer_orders))", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    l1 = []\n    (ans, occupied) = (0, 0)\n    for i in range(m):\n        if l[i] not in l1:\n            if occupied < n:\n                l1.append(l[i])\n                ans += 1\n                occupied += 1\n            else:\n                (p, q) = (0, 0)\n                for j in l1:\n                    flag = 0\n                    for k in range(i + 1, m):\n                        if l[k] == j:\n                            if k > p:\n                                p = k\n                                q = j\n                            flag = 1\n                            break\n                    if flag == 0:\n                        l1.remove(j)\n                        l1.append(l[i])\n                        ans += 1\n                        break\n                if flag == 1:\n                    l1.remove(q)\n                    l1.append(l[i])\n                    ans += 1\n    print(ans)", "def farthest(tab_arr, arr, n):\n    (x, y) = (-1, -1)\n    for j in range(n):\n        i = 0\n        while arr[i] != tab_arr[j]:\n            i += 1\n        if i > x:\n            x = i\n            y = j\n    return y\n\ndef count(tab_arr, arr, n):\n    for i in range(n):\n        if arr.count(tab_arr[i]) == 0:\n            return i\n    return -1\ntest = int(input())\nfor _ in range(test):\n    (n, m) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    (i, tab, clean) = (0, 0, 0)\n    curr = []\n    while i < m:\n        while tab < n and i < m:\n            if arr[i] not in curr:\n                curr.append(arr[i])\n                tab += 1\n                clean += 1\n            i += 1\n        if i == m:\n            break\n        while i < m:\n            if arr[i] not in curr:\n                break\n            i += 1\n        if i < m and count(curr, arr[i + 1:m], n) != -1:\n            curr[count(curr, arr[i + 1:m], n)] = arr[i]\n            clean += 1\n            i += 1\n        elif i < m:\n            a = farthest(curr, arr[i + 1:m], n)\n            curr[a] = arr[i]\n            clean += 1\n            i += 1\n        else:\n            break\n    print(clean)", "def farthest(tab_arr, arr, n):\n    (x, y) = (-1, -1)\n    for j in range(n):\n        i = 0\n        while arr[i] != tab_arr[j]:\n            i += 1\n        if i > x:\n            x = i\n            y = j\n    return y\n\ndef count(tab_arr, arr, n):\n    for i in range(n):\n        if arr.count(tab_arr[i]) == 0:\n            return i\n    return -1\nt = int(input())\nfor _ in range(t):\n    (n, m) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    (i, tab, clean) = (0, 0, 0)\n    curr = []\n    while i < m:\n        while tab < n and i < m:\n            if arr[i] not in curr:\n                curr.append(arr[i])\n                tab += 1\n                clean += 1\n            i += 1\n        if i == m:\n            break\n        while i < m:\n            if arr[i] not in curr:\n                break\n            i += 1\n        if i < m and count(curr, arr[i + 1:m], n) != -1:\n            curr[count(curr, arr[i + 1:m], n)] = arr[i]\n            clean += 1\n            i += 1\n        elif i < m:\n            a = farthest(curr, arr[i + 1:m], n)\n            curr[a] = arr[i]\n            clean += 1\n            i += 1\n        else:\n            break\n    print(clean)", "def farthest_page(tables, arr, i, m):\n    val = dict()\n    for cust in tables:\n        dist = 0\n        for j in range(i + 1, m):\n            if arr[j] == cust:\n                val[cust] = dist\n                break\n            dist += 1\n    max_val = list(val.keys())[0]\n    for cust in val.keys():\n        if val[cust] > val[max_val]:\n            max_val = cust\n    return max_val\n\ndef solve(n, m, arr):\n    seats_left = n\n    clean = 0\n    future = dict()\n    tables = set()\n    for cust in arr:\n        if future.get(cust) == None:\n            future[cust] = 1\n        else:\n            future[cust] += 1\n    for i in range(0, m):\n        cust = arr[i]\n        future[cust] -= 1\n        if cust in tables:\n            continue\n        if seats_left > 0:\n            tables.add(cust)\n            seats_left -= 1\n            clean += 1\n        elif seats_left == 0:\n            found_replacement = -1\n            for x in tables:\n                if future[x] == 0:\n                    found_replacement = x\n            if found_replacement == -1:\n                found_replacement = farthest_page(tables, arr, i, m)\n            tables.remove(found_replacement)\n            tables.add(cust)\n            clean += 1\n    print(clean)\n    return\n\ndef main():\n    t = int(input())\n    while t > 0:\n        (n, m) = (int(i) for i in input().split())\n        arr = [int(i) for i in input().split()]\n        solve(n, m, arr)\n        t -= 1\n    return\nmain()", "for _ in range(int(input())):\n    (n, m) = map(int, input().strip().split())\n    orders = list(map(int, input().strip().split()))\n    custmap = {}\n    for (index, order) in enumerate(orders):\n        if order not in custmap:\n            custmap[order] = {'total': 1, 'last': [index]}\n        else:\n            custmap[order]['total'] += 1\n            custmap[order]['last'].append(index)\n    ocust = set()\n    ans = 0\n    for (index, order) in enumerate(orders):\n        if len(ocust) == n and order not in ocust:\n            temp = []\n            flag = True\n            for c in ocust:\n                if custmap[c]['total'] == 0:\n                    flag = False\n                    ocust.discard(c)\n                    break\n                for j in custmap[c]['last']:\n                    if j > index:\n                        temp.append(j)\n                        break\n            if flag:\n                ocust.discard(orders[max(temp)])\n        if order not in ocust:\n            ocust.add(order)\n            ans += 1\n        custmap[order]['total'] -= 1\n    print(ans)", "t = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    a = []\n    s = 0\n    for i in range(m):\n        if l[i] not in a:\n            s += 1\n            if len(a) < n:\n                a.append(l[i])\n            else:\n                k = a.copy()\n                y = 0\n                for j in range(i + 1, m):\n                    if l[j] in k:\n                        k.remove(l[j])\n                        y = l[j]\n                if k == []:\n                    a.remove(y)\n                else:\n                    a.remove(k[0])\n                a.append(l[i])\n    print(s)\n    t -= 1", "import sys\nread = sys.stdin.readline\nfor i in range(int(read())):\n    (t, no) = map(int, read().split())\n    orders = list(map(int, read().split()))\n    inres = []\n    tablescleaned = 0\n    for i in range(no):\n        if len(inres) >= 1 and orders[i] in inres:\n            continue\n        if len(inres) < t:\n            inres.append(orders[i])\n            tablescleaned += 1\n            continue\n        tablescleaned += 1\n        temp = set(inres)\n        for j in range(i + 1, no):\n            if len(temp) == 1:\n                break\n            if orders[j] in temp:\n                temp.remove(orders[j])\n        inres.remove(list(temp)[0])\n        inres.append(orders[i])\n    print(tablescleaned)", "t = int(input())\nfor z in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    o = []\n    c = 0\n    for i in range(m):\n        if len(o) >= 1 and l[i] in o:\n            continue\n        c += 1\n        if len(o) < n:\n            o.append(l[i])\n            continue\n        temp = set(o)\n        for j in range(i + 1, m):\n            if len(temp) == 1:\n                break\n            if l[j] in temp:\n                temp.remove(l[j])\n        o.remove(list(temp)[0])\n        o.append(l[i])\n    print(c)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    order = list(map(int, input().split()))\n    a = []\n    cleaning = 0\n    for i in range(m):\n        if len(a) >= 1 and order[i] in a:\n            continue\n        cleaning += 1\n        if len(a) < n:\n            a.append(order[i])\n            continue\n        temp = set(a)\n        for j in range(i + 1, m):\n            if len(temp) == 1:\n                break\n            if order[j] in temp:\n                temp.remove(order[j])\n        a.remove(list(temp)[0])\n        a.append(order[i])\n    print(cleaning)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    lst = list(map(int, input().split()))\n    tmp = []\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] not in tmp:\n            if n > 0:\n                tmp.append(lst[i])\n                lst[i] = -1\n                count += 1\n                n -= 1\n                continue\n            farthest = 0\n            ind = 0\n            for j in range(len(tmp)):\n                if tmp[j] not in lst:\n                    tmp[j] = lst[i]\n                    count += 1\n                    break\n                val = lst.index(tmp[j])\n                if val > farthest:\n                    farthest = val\n                    ind = j\n            else:\n                tmp[ind] = lst[i]\n                count += 1\n        lst[i] = -1\n    print(count)", "res = []\n\ndef cleantable(test):\n    for test_case in range(test):\n        (n, m) = map(int, input().split())\n        count = 0\n        allot = []\n        cust = list(map(int, input().split()))\n        for i in range(len(cust)):\n            if cust[i] in allot:\n                pass\n            elif n != 0:\n                allot.append(cust[i])\n                count += 1\n                n -= 1\n            else:\n                temp = cust[i:]\n                last = -1\n                replace = 0\n                for (idx, j) in enumerate(allot):\n                    if j in temp:\n                        temp1 = temp.index(j)\n                        if temp1 > last:\n                            last = temp1\n                            replace = idx\n                    else:\n                        replace = idx\n                        break\n                allot[replace] = cust[i]\n                count += 1\n        res.append(count)\nt = int(input())\ncleantable(t)\nfor r in res:\n    print(r)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    marray = list(map(int, input().split()))\n    ans = 0\n    occupied = 0\n    occupied_array = []\n    for ma in range(m):\n        if marray[ma] in occupied_array:\n            pass\n        elif occupied < n:\n            occupied += 1\n            occupied_array.append(marray[ma])\n            ans += 1\n        else:\n            temp = marray[ma:]\n            last = -1\n            replace = 0\n            for (idx, j) in enumerate(occupied_array):\n                if j in temp:\n                    temp1 = temp.index(j)\n                    if temp1 > last:\n                        last = temp1\n                        replace = idx\n                else:\n                    replace = idx\n                    break\n            occupied_array[replace] = marray[ma]\n            ans += 1\n    print(ans)", "import collections\n\ndef isExistingInTable(tables, item):\n    flag = False\n    for each in tables:\n        if each == item:\n            flag = True\n    return flag\n\ndef isEmptyTable(tables):\n    flag = False\n    cnt = 0\n    for each in tables:\n        if each == -1:\n            cnt = cnt + 1\n    if cnt == 0:\n        return False\n    else:\n        return True\n\ndef rep_and_adj(rem_list, to_fit, ans):\n    if len(rem_list) == 0:\n        for each in tables:\n            if each != to_fit:\n                pos = tables.index(each)\n                tables[pos] = to_fit\n                ans = ans + 1\n                return ans\n    else:\n        flag = False\n        for each in tables:\n            if each != -1 and each not in rem_list:\n                pos = tables.index(each)\n                tables[pos] = to_fit\n                ans = ans + 1\n                flag = True\n                break\n        if flag == False:\n            rem_list2 = []\n            for e in rem_list:\n                if e in tables:\n                    rem_list2.append(e)\n            if rem_list2 != None and len(rem_list2) > 0:\n                dist = []\n                to_replace = -1\n                for each in rem_list2:\n                    if each not in dist and len(dist) == len(tables) - 1:\n                        to_replace = each\n                        break\n                    elif each not in dist:\n                        dist.append(each)\n            for (n, z) in enumerate(tables):\n                if z == to_replace:\n                    tables[n] = to_fit\n                    ans = ans + 1\n                    break\n        return ans\nt = int(input().strip())\nwhile t > 0:\n    (n, m) = map(int, input().strip().split())\n    nums = list(map(int, input().strip().split()))\n    tables = [-1] * n\n    ans = 0\n    i = 0\n    while i < len(nums):\n        to_fit = nums[i]\n        if isExistingInTable(tables, to_fit) == True:\n            pass\n        elif isEmptyTable(tables) == True:\n            for (n, z) in enumerate(tables):\n                if z == -1:\n                    tables[n] = to_fit\n                    ans = ans + 1\n                    break\n        else:\n            rem_list = nums[i + 1:]\n            ans = rep_and_adj(rem_list, to_fit, ans)\n        i = i + 1\n    print(ans)\n    t = t - 1", "t = int(input())\nfor z in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    o = []\n    c = 0\n    for i in range(m):\n        if len(o) >= 1 and l[i] in o:\n            continue\n        c += 1\n        if len(o) < n:\n            o.append(l[i])\n            continue\n        temp = set(o)\n        for j in range(i + 1, m):\n            if len(temp) == 1:\n                break\n            if l[j] in temp:\n                temp.remove(l[j])\n        o.remove(list(temp)[0])\n        o.append(l[i])\n    print(c)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = list(map(int, input().split()))\n    table = set()\n    count = 0\n    for i in range(m):\n        customer = c[i]\n        if customer in table:\n            continue\n        count += 1\n        if len(table) < n:\n            table.add(customer)\n            continue\n        temp = table.copy()\n        for j in range(i + 1, m):\n            if len(temp) == 1:\n                break\n            if c[j] in temp:\n                temp.remove(c[j])\n        a = temp.pop()\n        table.remove(a)\n        table.add(customer)\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    order = list(map(int, input().split()))\n    already = set()\n    count = 0\n    for i in range(m):\n        x = order[i]\n        if x in already:\n            continue\n        count += 1\n        if len(already) < n:\n            already.add(x)\n            continue\n        temp = set(list(already))\n        for j in range(i + 1, m):\n            if len(temp) == 1:\n                break\n            if order[j] in temp:\n                temp.remove(order[j])\n        a = list(temp)[0]\n        already.remove(a)\n        already.add(x)\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    order = list(map(int, input().split()))\n    already = set()\n    count = 0\n    for i in range(m):\n        x = order[i]\n        if x in already:\n            continue\n        count += 1\n        if len(already) < n:\n            already.add(x)\n            continue\n        temp = set(list(already))\n        for j in range(i + 1, m):\n            if len(temp) == 1:\n                break\n            if order[j] in temp:\n                temp.remove(order[j])\n        a = list(temp)[0]\n        already.remove(a)\n        already.add(x)\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    tables = [0] * n\n    clean = 0\n    for i in range(m):\n        cust = arr[i]\n        if cust in tables:\n            continue\n        elif 0 in tables:\n            ind = tables.index(0)\n            tables[ind] = cust\n            clean += 1\n            continue\n        left = arr[i + 1:]\n        flag = 0\n        dist = [0] * n\n        for j in range(n):\n            if tables[j] not in left:\n                tables[j] = cust\n                clean += 1\n                flag = 1\n                break\n            dist[j] = left.index(tables[j])\n        if flag == 0:\n            maxVal = max(dist)\n            repInd = dist.index(maxVal)\n            tables[repInd] = cust\n            clean += 1\n    print(clean)", "tc = int(input())\nfor i in range(tc):\n    (n, m) = list(map(int, input().split()))\n    list1 = list(map(int, input().split()))\n    list2 = [x for x in list1]\n    set1 = set(list1)\n    if n >= len(set1):\n        print(len(set1))\n    else:\n        list3 = []\n        count = 0\n        for (i, each) in enumerate(list1):\n            if each in list3:\n                continue\n            elif len(list3) < n:\n                count += 1\n                list3.append(each)\n            elif len(list3) == n:\n                temp_ind_dict = {}\n                for (j, cus) in enumerate(list3):\n                    try:\n                        ind = list1[i + 1:].index(cus)\n                        temp_ind_dict[ind] = j\n                    except:\n                        ind = -1\n                        temp_ind_dict[ind] = j\n                        break\n                if -1 in temp_ind_dict.keys():\n                    pop_ind = -1\n                else:\n                    pop_ind = max(temp_ind_dict.keys())\n                list3.pop(temp_ind_dict[pop_ind])\n                list3.append(each)\n                count += 1\n        print(count)", "t = int(input())\nfor _t in range(t):\n    (n, m) = map(int, input().split())\n    a = [int(x) for x in input().strip().split()]\n    (W, tbl) = (dict(), set())\n    for (idx, el) in enumerate(a):\n        W[el] = [idx] + W.get(el, [])\n    count = 0\n    for (idx, el) in enumerate(a):\n        if el in tbl:\n            W[el].pop()\n        elif len(tbl) < n:\n            tbl.add(el)\n            W[el].pop()\n            count += 1\n        else:\n            (tmp, tmp_c) = (0, -1)\n            for c in tbl:\n                if len(W[c]) > 0 and W[c][-1] - idx > tmp:\n                    tmp = W[c][-1] - idx\n                    tmp_c = c\n                elif len(W[c]) == 0:\n                    tmp = 10 ** 9\n                    tmp_c = c\n                    break\n            tbl.remove(tmp_c)\n            tbl.add(el)\n            W[el].pop()\n            count += 1\n    print(count)", "t = int(input())\nwhile t:\n    n_m = [int(i) for i in input().split()]\n    customers = [int(i) for i in input().split()]\n    n = n_m[0]\n    m = n_m[1]\n    tables = dict()\n    washing = 0\n    for i in range(len(customers)):\n        if len(tables) < n:\n            if not customers[i] in tables.keys():\n                tables[customers[i]] = customers[i]\n                washing += 1\n        elif not customers[i] in tables.keys():\n            max_key = list(tables.keys())[0]\n            res = {}\n            aa = set()\n            for k in tables.keys():\n                res[k] = 9999\n            for j in range(i + 1, len(customers)):\n                if customers[j] not in aa and customers[j] in tables.keys():\n                    res[customers[j]] = j\n                    aa.add(customers[j])\n            max_key = max(res, key=res.get)\n            del tables[max_key]\n            tables[customers[i]] = customers[i]\n            washing += 1\n    print(washing)\n    t -= 1", "for _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    C = list(map(int, input().split()))\n    arr = [[100000 for i in range(M)] for j in range(402)]\n    for i in range(len(C) - 1, -1, -1):\n        pos = i\n        arr[C[i]][i] = pos\n        for j in range(i - 1, -1, -1):\n            if C[j] == C[i]:\n                pos = j\n            arr[C[i]][j] = pos\n    tab = [-1] * N\n    count = 0\n    for i in range(len(C)):\n        if C[i] in tab:\n            continue\n        else:\n            for j in range(len(tab)):\n                if tab[j] == -1:\n                    tab[j] = C[i]\n                    count += 1\n                    break\n            else:\n                trr = [arr[j][i] for j in tab]\n                minn = trr.index(max(trr))\n                tab[minn] = C[i]\n                count += 1\n    print(count)", "import sys\nimport math\nfrom collections import defaultdict\nimport bisect\nimport heapq\n\ndef alele():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef ilele():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef list2d(a, b, c):\n    return [[c] * b for i in range(a)]\n\ndef list3d(a, b, c, d):\n    return [[[d] * c for j in range(b)] for i in range(a)]\n\ndef Yes():\n    print('Yes')\n\ndef No():\n    print('No')\n\ndef YES():\n    print('YES')\n\ndef NO():\n    print('NO')\nINF = 10 ** 18\nMOD = 1000000000 + 7\nfor _ in range(int(input())):\n    (N, M) = ilele()\n    A = alele()\n    c = 0\n    clean = 0\n    OnTable = []\n    for i in range(len(A)):\n        if c < N:\n            if A[i] not in OnTable:\n                c += 1\n                clean += 1\n                OnTable.append(A[i])\n        else:\n            maxi = -1\n            ele = None\n            if A[i] not in OnTable:\n                h = 0\n                for j in OnTable:\n                    if j not in A[i:]:\n                        h = 1\n                        OnTable.remove(j)\n                        clean += 1\n                        OnTable.append(A[i])\n                        break\n                    else:\n                        x = A[i:].index(j)\n                        if x > maxi:\n                            maxi = x\n                            ele = j\n                if h == 0:\n                    OnTable.remove(ele)\n                    clean += 1\n                    OnTable.append(A[i])\n    print(clean)", "from sys import stdin\n\ndef minimum(arr, M, N):\n    tables = [0] * N\n    j = 0\n    clean = 0\n    for i in range(M):\n        if arr[i] in tables:\n            continue\n        if j < N:\n            tables[j] = arr[i]\n            clean += 1\n            j += 1\n        else:\n            k = i + 1\n            liste = tables.copy()\n            while k < M:\n                if arr[k] in liste:\n                    last = arr[k]\n                    liste.remove(arr[k])\n                k += 1\n                if len(liste) <= 0:\n                    break\n            if len(liste) <= 0:\n                index = tables.index(last)\n            else:\n                index = tables.index(liste[0])\n            tables[index] = arr[i]\n            clean += 1\n    return clean\n\ndef main():\n    T = int(stdin.readline())\n    for test in range(T):\n        (N, M) = [int(x) for x in stdin.readline().split()]\n        array = [int(x) for x in stdin.readline().split()]\n        print(minimum(array, M, N))\nmain()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = list(map(int, input().split()))\n    tables = []\n    count = 0\n    for i in range(m):\n        if c[i] in tables:\n            continue\n        count += 1\n        if len(tables) < n:\n            tables.append(c[i])\n            continue\n        x = 0\n        temp = tables.copy()\n        for x in c[i + 1:]:\n            if len(temp) <= 1:\n                break\n            if x in temp:\n                temp.remove(x)\n        tables.append(c[i])\n        tables.remove(temp[0])\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = list(map(int, input().split()))\n    tables = []\n    count = 0\n    for i in range(m):\n        if c[i] in tables:\n            continue\n        count += 1\n        if len(tables) < n:\n            tables.append(c[i])\n            continue\n        x = 0\n        temp = tables.copy()\n        for x in c[i + 1:]:\n            if len(temp) <= 1:\n                break\n            if x in temp:\n                temp.remove(x)\n        tables.append(c[i])\n        tables.remove(temp[0])\n    print(count)", "T = int(input())\nfor z in range(T):\n    (N, M) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    occupied = []\n    clean = 0\n    for i in range(M):\n        elem = lst[i]\n        if elem in occupied:\n            continue\n        clean += 1\n        if len(occupied) < N:\n            occupied.append(elem)\n            continue\n        tmp_occ = occupied[:]\n        tmp_m = lst[i + 1:]\n        for x in tmp_m:\n            if len(tmp_occ) <= 1:\n                break\n            if x in tmp_occ:\n                tmp_occ.remove(x)\n        occupied.append(elem)\n        occupied.remove(tmp_occ[0])\n    print(clean)", "for _ in range(int(input())):\n    (tables, orders) = map(int, input().split())\n    actual_orders = [int(x) for x in input().split()]\n    occupied = []\n    cleans = 0\n    for i in range(orders):\n        if actual_orders[i] in occupied:\n            continue\n        cleans += 1\n        if len(occupied) < tables:\n            occupied.append(actual_orders[i])\n            continue\n        tmp = set(occupied)\n        for j in range(i + 1, orders):\n            if len(tmp) == 1:\n                break\n            if actual_orders[j] in tmp:\n                tmp.remove(actual_orders[j])\n        occupied.remove(list(tmp)[0])\n        occupied.append(actual_orders[i])\n    print(cleans)", "T = int(input())\nfor z in range(T):\n    (N, M) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    occupied = []\n    clean = 0\n    for i in range(M):\n        elem = lst[i]\n        if elem in occupied:\n            continue\n        clean += 1\n        if len(occupied) < N:\n            occupied.append(elem)\n            continue\n        tmp_occ = occupied[:]\n        tmp_m = lst[i + 1:]\n        for x in tmp_m:\n            if len(tmp_occ) <= 1:\n                break\n            if x in tmp_occ:\n                tmp_occ.remove(x)\n        occupied.append(elem)\n        occupied.remove(tmp_occ[0])\n    print(clean)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    o = list(map(int, input().split()))\n    l = []\n    cleans = 0\n    for i in range(m):\n        if o[i] in l:\n            continue\n        cleans += 1\n        if len(l) < n:\n            l.append(o[i])\n            continue\n        tmp = set(l)\n        for j in range(i + 1, m):\n            if len(tmp) == 1:\n                break\n            if o[j] in tmp:\n                tmp.remove(o[j])\n        l.remove(list(tmp)[0])\n        l.append(o[i])\n    print(cleans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    o = list(map(int, input().split()))\n    l = []\n    clean = 0\n    for i in range(m):\n        if o[i] in l:\n            continue\n        clean += 1\n        if len(l) < n:\n            l.append(o[i])\n            continue\n        tmp = set(l)\n        for j in range(i + 1, m):\n            if len(tmp) == 1:\n                break\n            if o[j] in tmp:\n                tmp.remove(o[j])\n        l.remove(list(tmp)[0])\n        l.append(o[i])\n    print(clean)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = list(map(int, input().split()))\n    co = defaultdict(int)\n    ro = defaultdict(int)\n    for i in c:\n        ro[i] += 1\n    t = 0\n    ans = 0\n    for (j, i) in enumerate(c):\n        if not co[i] and t < n:\n            co[i] = 1\n            ro[i] -= 1\n            ans += 1\n            t += 1\n        elif not co[i]:\n            for k in ro:\n                if ro[k] == 0 and co[k]:\n                    co[k] = 0\n                    ro[i] -= 1\n                    co[i] = 1\n                    ans += 1\n                    break\n            else:\n                f = defaultdict(int)\n                fd = None\n                for k in c[j + 1:]:\n                    if not f[k] and co[k]:\n                        f[k] = 1\n                        fd = k\n                co[fd] = 0\n                co[i] = 1\n                ro[i] -= 1\n                ans += 1\n        else:\n            ro[i] -= 1\n    print(ans)", "for _ in range(int(input())):\n    (num_tables, num_orders) = map(int, input().split())\n    orders = list(map(int, input().split()))\n    prev_occurance = {}\n    next_occurance = [float('inf')] * num_orders\n    for i in range(num_orders - 1, -1, -1):\n        if orders[i] in prev_occurance:\n            next_occurance[i] = prev_occurance[orders[i]]\n        prev_occurance[orders[i]] = i\n    sitting = {}\n    cleaning_count = 0\n    for i in range(num_orders):\n        if orders[i] not in sitting:\n            if len(sitting) == num_tables:\n                remove_customer = -1\n                customer_next_occrance = -1\n                for customer in sitting:\n                    if sitting[customer] > customer_next_occrance:\n                        customer_next_occrance = sitting[customer]\n                        remove_customer = customer\n                del sitting[remove_customer]\n            cleaning_count += 1\n        sitting[orders[i]] = next_occurance[i]\n    print(cleaning_count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    o = list(map(int, input().split()))\n    l = []\n    clean = 0\n    for i in range(m):\n        if o[i] in l:\n            continue\n        clean += 1\n        if len(l) < n:\n            l.append(o[i])\n            continue\n        tmp = set(l)\n        for j in range(i + 1, m):\n            if len(tmp) == 1:\n                break\n            if o[j] in tmp:\n                tmp.remove(o[j])\n        l.remove(list(tmp)[0])\n        l.append(o[i])\n    print(clean)", "t = int(input())\nfor i in range(t):\n    (N, M) = map(int, input().split())\n    C = [int(i) for i in input().split()]\n    h = set()\n    count = 0\n    for (idx, elem) in enumerate(C):\n        if elem in h:\n            continue\n        if len(h) < N:\n            h.add(elem)\n            count += 1\n        else:\n            farthest = -1\n            check = True\n            for e in h:\n                try:\n                    farthest = max(C.index(e, idx + 1), farthest)\n                    check = True\n                except:\n                    check = False\n                    h.remove(e)\n                    h.add(elem)\n                    count += 1\n                    break\n            if check:\n                h.remove(C[farthest])\n                h.add(elem)\n                count += 1\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    array = list(map(int, input().split()))\n    s = set()\n    count = 0\n    for i in range(m):\n        if array[i] in s:\n            continue\n        elif len(s) < n:\n            s.add(array[i])\n            count += 1\n        else:\n            farthest = -1\n            check = True\n            for v in s:\n                try:\n                    farthest = max(array[i + 1:].index(v) + i + 1, farthest)\n                except:\n                    check = False\n                    s.discard(v)\n                    s.add(array[i])\n                    count += 1\n                    break\n            if check:\n                s.remove(array[farthest])\n                s.add(array[i])\n                count += 1\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    array = list(map(int, input().split()))\n    s = set()\n    count = 0\n    for i in range(m):\n        if array[i] in s:\n            continue\n        elif len(s) < n:\n            s.add(array[i])\n            count += 1\n        else:\n            farthest = -1\n            check = True\n            for v in s:\n                try:\n                    farthest = max(array[i + 1:].index(v) + i + 1, farthest)\n                except:\n                    check = False\n                    s.discard(v)\n                    s.add(array[i])\n                    count += 1\n                    break\n            if check:\n                s.remove(array[farthest])\n                s.add(array[i])\n                count += 1\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    array = list(map(int, input().split()))\n    s = set()\n    count = 0\n    for i in range(m):\n        if array[i] in s:\n            continue\n        elif len(s) < n:\n            s.add(array[i])\n            count += 1\n        else:\n            ele = -1\n            for v in s:\n                if v not in array[i + 1:]:\n                    ele = v\n                    break\n            if ele != -1:\n                s.discard(ele)\n                s.add(array[i])\n                count += 1\n            else:\n                farthest = -1\n                for v in s:\n                    ind = array[i + 1:].index(v) + i + 1\n                    farthest = max(farthest, ind)\n                s.discard(array[farthest])\n                s.add(array[i])\n                count += 1\n    print(count)", "MAX = 401\nfor T in range(int(input())):\n    (N, M) = map(int, input().split())\n    C = list(map(int, input().split()))\n    orders = [0] * MAX\n    seated = [False] * MAX\n    for c in C:\n        orders[c] += 1\n    clean = 0\n    for i in range(M):\n        c = C[i]\n        if not seated[c] and N > 0:\n            clean += 1\n            seated[c] = True\n            N -= 1\n        elif not seated[c] and N == 0:\n            swap = -1\n            temp = list(seated)\n            for j in range(i + 1, M):\n                cj = C[j]\n                if temp[cj]:\n                    swap = cj\n                    temp[cj] = False\n            for j in range(MAX):\n                if seated[j] and orders[j] == 0:\n                    swap = j\n                    break\n            clean += 1\n            seated[swap] = False\n            seated[c] = True\n        orders[c] -= 1\n    print(clean)", "T = int(input())\nfor t in range(T):\n    (n, m) = map(int, input().split())\n    o = list(map(int, input().split()))\n    cnt = 0\n    for i in range(m):\n        o[i] -= 1\n    ls = [-1 for i in range(n)]\n    if len(set(o)) < n:\n        print(len(set(o)))\n    else:\n        k = 0\n        for i in range(n):\n            if o[i] not in ls:\n                ls[k] = o[i]\n                k += 1\n                cnt += 1\n        for j in range(n, m):\n            if o[j] not in ls:\n                if ls.count(-1) != 0:\n                    ls[ls.index(-1)] = o[j]\n                    cnt += 1\n                else:\n                    max = -2\n                    flag = 0\n                    for p in ls:\n                        if o[j + 1:].count(p) == 0:\n                            ls[ls.index(p)] = o[j]\n                            cnt += 1\n                            flag = 1\n                            break\n                        elif o[j + 1:].index(p) > max:\n                            max = o[j + 1:].index(p)\n                    if flag == 0:\n                        ls[ls.index(o[j + 1 + max])] = o[j]\n                        cnt += 1\n        print(cnt)", "for _ in range(int(input())):\n    (n, m) = map(int, input().strip().split())\n    orders = list(map(int, input().strip().split()))\n    custmap = {}\n    for (index, order) in enumerate(orders):\n        if order not in custmap:\n            custmap[order] = {'total': 1, 'last': [index]}\n        else:\n            custmap[order]['total'] += 1\n            custmap[order]['last'].append(index)\n    ocust = set()\n    ans = 0\n    for (index, order) in enumerate(orders):\n        if len(ocust) == n and order not in ocust:\n            temp = []\n            for c in ocust:\n                for j in custmap[c]['last']:\n                    if j > index:\n                        temp.append(j)\n                        break\n            ocust.discard(orders[max(temp)])\n        if order not in ocust:\n            ocust.add(order)\n            ans += 1\n        custmap[order]['total'] -= 1\n        if custmap[order]['total'] == 0:\n            ocust.discard(order)\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().strip().split())\n    orders = list(map(int, input().strip().split()))\n    custmap = {}\n    for (index, order) in enumerate(orders):\n        if order not in custmap:\n            custmap[order] = {'total': 1, 'last': [index]}\n        else:\n            custmap[order]['total'] += 1\n            custmap[order]['last'].append(index)\n    ocust = set()\n    ans = 0\n    for (index, order) in enumerate(orders):\n        if len(ocust) == n and order not in ocust:\n            temp = []\n            flag = True\n            for c in ocust:\n                if custmap[c]['total'] == 0:\n                    flag = False\n                    ocust.discard(c)\n                    break\n                for j in custmap[c]['last']:\n                    if j > index:\n                        temp.append(j)\n                        break\n            if flag:\n                ocust.discard(orders[max(temp)])\n        if order not in ocust:\n            ocust.add(order)\n            ans += 1\n        custmap[order]['total'] -= 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    order = list(map(int, input().split()))\n    already = set()\n    count = 0\n    for i in range(m):\n        if order[i] not in already and len(already) < n:\n            already.add(order[i])\n            count += 1\n        elif order[i] not in already and len(already) == n:\n            flag = True\n            temp = []\n            for each in already:\n                try:\n                    temp.append(i + 1 + order[i + 1:].index(each))\n                except:\n                    flag = False\n                    already.remove(each)\n                    already.add(order[i])\n                    count += 1\n                    break\n            if flag:\n                bestindex = max(temp)\n                already.remove(order[bestindex])\n                already.add(order[i])\n                count += 1\n    print(count)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    order = list(map(int, input().split()))\n    already = set()\n    count = 0\n    for i in range(m):\n        x = order[i]\n        if x in already:\n            continue\n        count += 1\n        if len(already) < n:\n            already.add(order[i])\n            continue\n        temp = set(list(already))\n        for j in range(i + 1, m):\n            if len(temp) == 1:\n                break\n            if order[j] in temp:\n                temp.remove(order[j])\n        a = list(temp)[0]\n        already.remove(a)\n        already.add(x)\n    print(count)", "t = int(input())\nfrom collections import defaultdict as dd\nfor ijk in range(0, t):\n    freq = dd(list)\n    (n, m) = map(int, input().strip().split())\n    a = list(map(int, input().strip().split()))\n    for i in range(0, m):\n        freq[a[i]].append(i)\n    occ = [0] * n\n    ans = 0\n    for i in range(0, m):\n        if a[i] in occ:\n            freq[a[i]] = freq[a[i]][1:]\n            continue\n        else:\n            tmp = -1\n            index = -1\n            freq[a[i]] = freq[a[i]][1:]\n            flag = False\n            for j in range(0, n):\n                if occ[j] == 0:\n                    occ[j] = a[i]\n                    ans += 1\n                    flag = True\n                    break\n                if freq[occ[j]] == []:\n                    index = j\n                    break\n                elif freq[occ[j]][0] > tmp:\n                    index = j\n                    tmp = freq[occ[j]][0]\n            if flag == False:\n                occ[index] = a[i]\n                ans += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    z = 0\n    (n, m) = [int(x) for x in input().split()]\n    order = [int(x) for x in input().split()]\n    table = set()\n    for i in range(m):\n        x = order[i]\n        if x in table:\n            continue\n        z += 1\n        if len(table) < n:\n            table.add(x)\n            continue\n        l = set(list(table))\n        for j in range(i + 1, m):\n            if len(l) == 1:\n                break\n            if order[j] in l:\n                l.remove(order[j])\n        a = list(l)[0]\n        table.remove(a)\n        table.add(x)\n    print(z)", "t = int(input())\nfor i in range(t):\n    z = 0\n    (n, m) = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    cur = set()\n    for i in range(m):\n        x = c[i]\n        if x in cur:\n            continue\n        z += 1\n        if len(cur) < n:\n            cur.add(x)\n            continue\n        left = set(list(cur))\n        for j in range(i + 1, m):\n            if len(left) == 1:\n                break\n            if c[j] in left:\n                left.remove(c[j])\n        torem = list(left)[0]\n        cur.remove(torem)\n        cur.add(x)\n    print(z)", "a = int(input())\nfor i in range(a):\n    (t, r) = map(int, input().split())\n    di = {}\n    dp = {}\n    dn = {}\n    count = 0\n    l = list(map(int, input().split()))\n    for i in l:\n        if i in di:\n            di[i] += 1\n            dn[i] += 1\n        else:\n            di[i] = 1\n            dn[i] = 1\n    i = 0\n    while i < len(l):\n        if l[i] in dp:\n            dp[l[i]].append(i)\n        else:\n            dp[l[i]] = []\n            dp[l[i]].append(i)\n        i += 1\n    cache = [(-7, -7)] * t\n    allocc = []\n    for i in l:\n        if i not in allocc:\n            if (-7, -7) in cache:\n                h = 0\n                k = cache.index((-7, -7))\n                dn[i] -= 1\n                if dn[i] > 0:\n                    m = di[i] - dn[i]\n                    h = dp[i][m]\n                else:\n                    h = 500\n                cache[k] = (h, i)\n                allocc.append(i)\n            else:\n                h = 0\n                j = cache.index(max(cache))\n                dn[i] -= 1\n                if dn[i] > 0:\n                    m = di[i] - dn[i]\n                    h = dp[i][m]\n                else:\n                    h = 500\n                del allocc[allocc.index(cache[j][1])]\n                cache[j] = (h, i)\n                allocc.append(cache[j][1])\n            count += 1\n        else:\n            m = di[i] - dn[i]\n            k = cache.index((dp[i][m], i))\n            dn[i] -= 1\n            if dn[i] > 0:\n                m = di[i] - dn[i]\n                cache[k] = (dp[i][m], i)\n            else:\n                cache[k] = (500, i)\n            pass\n    print(count)", "printswitch = False\n\ndef pr(*args):\n    if printswitch:\n        for i in args:\n            print(i, ' ', end='')\n        print('')\nt = int(input())\nres = []\nfor i in range(t):\n    count = 0\n    (noOfTables, noOfOrders) = map(int, input().split())\n    orders = list(map(int, input().split()))\n    dicc = {}\n    for index in range(len(orders)):\n        if orders[index] not in dicc:\n            dicc[orders[index]] = [index]\n        else:\n            dicc[orders[index]].append(index)\n    tableOccupancy = {}\n    for ind in range(len(orders)):\n        pr('tc=', i, ' order=', orders[ind], ' ind:', ind, 'tableOccupancy: ', tableOccupancy, 'noOftables:', noOfTables)\n        if noOfTables > 0:\n            if orders[ind] in tableOccupancy:\n                pr('debug 1')\n                dicc[orders[ind]].remove(ind)\n            else:\n                pr('debug 2')\n                dicc[orders[ind]].remove(ind)\n                tableOccupancy[orders[ind]] = dicc[orders[ind]]\n                count += 1\n                noOfTables -= 1\n        elif orders[ind] in tableOccupancy:\n            pr('debug 3')\n            dicc[orders[ind]].remove(ind)\n            tableOccupancy[orders[ind]] = dicc[orders[ind]]\n        else:\n            pr('debug 4-------------------------------------------------------------')\n            nulllistfound = False\n            for (k, v) in tableOccupancy.items():\n                if len(v) == 0:\n                    tableOccupancy.pop(k)\n                    dicc[orders[ind]].remove(ind)\n                    tableOccupancy[orders[ind]] = dicc[orders[ind]]\n                    count += 1\n                    nulllistfound = True\n                    break\n            if nulllistfound:\n                pr('debug 5')\n                continue\n            else:\n                pr('debug 6')\n                ordertoremove = max(tableOccupancy, key=lambda k: tableOccupancy[k][0])\n                tableOccupancy.pop(ordertoremove)\n                dicc[orders[ind]].remove(ind)\n                tableOccupancy[orders[ind]] = dicc[orders[ind]]\n                count += 1\n    res.append(count)\nfor k in res:\n    print(k)", "for _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    ls = list(map(int, input().split()))\n    m = [0] * 401\n    lastSeen = [0] * 401\n    present = [False] * 401\n    for i in range(M):\n        m[ls[i]] = i\n    Count = table = 0\n    for i in range(M):\n        if present[ls[i]]:\n            continue\n        if table < N:\n            present[ls[i]] = True\n            table += 1\n        else:\n            r = -1\n            for j in range(i - 1, -1, -1):\n                if present[ls[j]] and m[ls[j]] == j:\n                    r = ls[j]\n                    break\n            if r == -1:\n                for j in range(i + 1, M):\n                    if present[ls[j]] and lastSeen[ls[j]] != i:\n                        r = ls[j]\n                        lastSeen[ls[j]] = i\n            present[r] = False\n            present[ls[i]] = True\n        Count += 1\n    print(Count)", "t = int(input())\nfor ii in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    s = set(a)\n    d = {}\n    ans = 0\n    for i in range(k):\n        d[a[i]] = []\n    for i in range(k):\n        d[a[i]].append(i)\n    se = set()\n    arr = []\n    c = 0\n    for i in range(k):\n        if a[i] in se:\n            d[a[i]].pop(0)\n            continue\n        if a[i] not in se:\n            if c < n:\n                arr.append(a[i])\n                se.add(a[i])\n                d[a[i]].pop(0)\n                c += 1\n                ans += 1\n            else:\n                kk = []\n                kt = 0\n                for j in arr:\n                    if d[j] == []:\n                        kt = 1\n                        nu = j\n                        break\n                    else:\n                        kk.append((d[j][0], j))\n                if kt == 0:\n                    kk = max(kk)\n                    kk = kk[1]\n                    arr.remove(kk)\n                    se.remove(kk)\n                    se.add(a[i])\n                    arr.append(a[i])\n                    d[a[i]].pop(0)\n                    ans += 1\n                else:\n                    arr.remove(nu)\n                    arr.append(a[i])\n                    se.remove(nu)\n                    se.add(a[i])\n                    d[a[i]].pop(0)\n                    ans += 1\n    print(ans)", "def replaceTable(orders, tables, x, n):\n    occ = [-1] * n\n    for i in range(n):\n        if tables[i] in orders[x + 1:]:\n            occ[i] = orders[x + 1:].index(tables[i])\n    if -1 in occ:\n        return occ.index(-1)\n    else:\n        return occ.index(max(occ))\nt = int(input())\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    orders = [a[0]]\n    for i in range(1, m):\n        if a[i] != a[i - 1]:\n            orders.append(a[i])\n    m = len(orders)\n    tables = []\n    count = 0\n    for i in range(m):\n        if orders[i] in tables:\n            continue\n        if len(tables) < n:\n            tables.append(orders[i])\n        else:\n            j = replaceTable(orders, tables, i, n)\n            tables[j] = orders[i]\n        count += 1\n    print(count)", "def find_table(tables, orders):\n    maxOrderIndex = 0\n    tableIndex = 0\n    for (it, t) in enumerate(tables):\n        if t not in orders:\n            return it\n        if orders.index(t) > maxOrderIndex:\n            maxOrderIndex = orders.index(t)\n            tableIndex = it\n    return tableIndex\nt = int(input())\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    orders = [int(x) for x in input().split()]\n    tables = [0 for x in range(n)]\n    counter = 0\n    for (idx, order) in enumerate(orders):\n        if order in tables:\n            continue\n        elif 0 in tables:\n            index0 = tables.index(0)\n            tables[index0] = order\n            counter += 1\n        else:\n            tab = find_table(tables, orders[idx:])\n            tables[tab] = order\n            counter += 1\n    print(counter)", "def find_table(tables, orders):\n    maxOrderIndex = 0\n    tableIndex = 0\n    for (it, t) in enumerate(tables):\n        if t not in orders:\n            return it\n        if orders.index(t) > maxOrderIndex:\n            maxOrderIndex = orders.index(t)\n            tableIndex = it\n    return tableIndex\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = [int(x) for x in input().split()]\n        orders = [int(x) for x in input().split()]\n        tables = [0 for x in range(n)]\n        counter = 0\n        for (idx, order) in enumerate(orders):\n            if order in tables:\n                continue\n            elif 0 in tables:\n                index0 = tables.index(0)\n                tables[index0] = order\n                counter += 1\n            else:\n                tab = find_table(tables, orders[idx:])\n                tables[tab] = order\n                counter += 1\n        print(counter)\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l2 = []\n    d1 = {}\n    d2 = {}\n    for i in l:\n        d1[i] = False\n        d2[i] = d2.get(i, 0) + 1\n    c = 0\n    for i in range(m):\n        if not d1[l[i]]:\n            if len(l2) != n:\n                l2.append(l[i])\n                d1[l[i]] = True\n                d2[l[i]] -= 1\n                c += 1\n            else:\n                mi = -1\n                ma = -1\n                for j in range(n):\n                    if d2[l2[j]] == 0:\n                        mi = j\n                        break\n                    else:\n                        for k in range(i + 1, m):\n                            if l2[j] == l[k]:\n                                if k > ma:\n                                    ma = k\n                                    mi = j\n                                break\n                d1[l2.pop(mi)] = False\n                c += 1\n                l2.append(l[i])\n                d1[l[i]] = True\n                d2[l[i]] -= 1\n        else:\n            d2[l[i]] -= 1\n    print(c)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l2 = []\n    d1 = {}\n    d2 = {}\n    for i in l:\n        d1[i] = False\n        d2[i] = d2.get(i, 0) + 1\n    c = 0\n    for i in range(m):\n        if not d1[l[i]]:\n            if len(l2) != n:\n                l2.append(l[i])\n                d1[l[i]] = True\n                d2[l[i]] -= 1\n                c += 1\n            else:\n                mi = -1\n                ma = -1\n                for j in range(n):\n                    if d2[l2[j]] == 0:\n                        mi = j\n                        break\n                    else:\n                        for k in range(i + 1, m):\n                            if l2[j] == l[k]:\n                                if k > ma:\n                                    ma = k\n                                    mi = j\n                                break\n                d1[l2.pop(mi)] = False\n                c += 1\n                l2.append(l[i])\n                d1[l[i]] = True\n                d2[l[i]] -= 1\n        else:\n            d2[l[i]] -= 1\n    print(c)", "for _ in range(int(input().strip())):\n    (n, m) = map(int, input().strip().split())\n    requests = list(map(int, input().strip().split()))\n    remaining_reqs = dict()\n    for req in requests:\n        remaining_reqs[req] = remaining_reqs.get(req, 0) + 1\n    occupied_tables = 0\n    seated = dict()\n    for req in set(requests):\n        seated[req] = False\n    clean_count = 0\n    current_idx = 0\n    for req in requests:\n        if seated[req]:\n            remaining_reqs[req] -= 1\n        elif occupied_tables < n:\n            clean_count += 1\n            seated[req] = True\n            remaining_reqs[req] -= 1\n            occupied_tables += 1\n        else:\n            max_recent_idx = -1\n            idx = None\n            for rem_req in remaining_reqs:\n                if seated[rem_req]:\n                    try:\n                        rem_req_idx = requests[current_idx + 1:].index(rem_req)\n                    except ValueError:\n                        idx = rem_req\n                        break\n                    if rem_req_idx > max_recent_idx:\n                        max_recent_idx = rem_req_idx\n                        idx = rem_req\n            seated[idx] = False\n            clean_count += 1\n            seated[req] = True\n            remaining_reqs[req] -= 1\n        current_idx += 1\n    print(clean_count)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().strip().split())\n    arr = list(map(int, input().strip().split()))\n    tables = []\n    ans = 0\n    for (k, i) in enumerate(arr):\n        if len(tables) < n and i not in tables:\n            tables.append(i)\n            ans += 1\n        elif i in tables:\n            continue\n        else:\n            support = []\n            flag = True\n            for j in tables:\n                if j not in arr[k:]:\n                    support.append(-1)\n                    tables.remove(j)\n                    tables.append(i)\n                    ans += 1\n                    flag = False\n                    break\n                else:\n                    support.append(arr[k:].index(j))\n            if flag:\n                tables.remove(arr[k:][max(support)])\n                tables.append(i)\n                ans += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().strip().split())\n    arr = list(map(int, input().strip().split()))\n    tables = []\n    ans = 0\n    for (k, i) in enumerate(arr):\n        if len(tables) < n and i not in tables:\n            tables.append(i)\n            ans += 1\n        elif i in tables:\n            continue\n        else:\n            support = []\n            flag = True\n            for j in tables:\n                if j not in arr[k:]:\n                    support.append(-1)\n                    tables.remove(j)\n                    tables.append(i)\n                    ans += 1\n                    flag = False\n                    break\n                else:\n                    support.append(arr[k:].index(j))\n            if flag:\n                tables.remove(arr[k:][max(support)])\n                tables.append(i)\n                ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    orders = list(map(int, input().split()))\n    tables = set()\n    present = 0\n    ans = 0\n    for i in range(m):\n        if orders[i] not in tables:\n            ans += 1\n            if present < n:\n                tables.add(orders[i])\n                present += 1\n            else:\n                last = orders[i - 1]\n                temp_dict = {}\n                j = i + 1\n                while len(temp_dict) < present and j < m:\n                    if orders[j] in tables:\n                        if orders[j] not in temp_dict:\n                            last = orders[j]\n                            temp_dict[last] = last\n                    j += 1\n                if len(temp_dict) < present:\n                    for element in tables:\n                        if element not in temp_dict:\n                            last = element\n                            break\n                tables.remove(last)\n                tables.add(orders[i])\n    print(ans)", "def compute_person_tracker(meal_orders):\n    personTracker = {}\n    for i in range(len(meal_orders)):\n        if meal_orders[i] in personTracker:\n            personTracker[meal_orders[i]].append(i)\n        else:\n            personTracker[meal_orders[i]] = [i]\n    return personTracker\n\ndef find_the_farest(table_tracker, personTracker):\n    farest = -1\n    far_index = -1\n    for i in range(len(table_tracker)):\n        if not personTracker[table_tracker[i]]:\n            return i\n        elif personTracker[table_tracker[i]][0] >= farest:\n            farest = personTracker[table_tracker[i]][0]\n            far_index = i\n    return far_index\n\ndef number_of_cleans(tables, no_orders, meal_orders):\n    person_tracker = compute_person_tracker(meal_orders)\n    table_tracker = [-1] * tables\n    cleans = 0\n    track = 0\n    for order in meal_orders:\n        if order not in table_tracker:\n            cleans = cleans + 1\n            if table_tracker[tables - 1] == -1:\n                table_tracker[track] = order\n                person_tracker[order] = person_tracker[order][1:]\n                track += 1\n            else:\n                table_tracker[find_the_farest(table_tracker, person_tracker)] = order\n                person_tracker[order] = person_tracker[order][1:]\n        else:\n            person_tracker[order] = person_tracker[order][1:]\n    print(cleans)\nT = int(input())\nfor i in range(T):\n    (tables, no_orders) = [int(x) for x in input().split()]\n    meal_orders = [int(x) for x in input().split()]\n    number_of_cleans(tables, no_orders, meal_orders)", "from sys import stdin\nt = int(input())\nfor k in range(t):\n    count = 0\n    d = {}\n    (n, m) = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    for i in range(len(l)):\n        if str(l[i]) not in d.keys():\n            d[str(l[i])] = 1\n        else:\n            d[str(l[i])] += 1\n    if n < len(set(l)):\n        temp_li = []\n        for i in range(len(l)):\n            if l[i] not in temp_li and len(temp_li) < n:\n                temp_li.append(l[i])\n                count += 1\n            elif l[i] not in temp_li:\n                local = -1000000000\n                temp = local\n                val = 0\n                for m in range(len(temp_li)):\n                    if temp_li[m] in l[i + 1:]:\n                        temp1 = l[i + 1:].index(temp_li[m])\n                        local = max(local, temp1)\n                        if temp < local:\n                            temp = local\n                            val = m\n                    else:\n                        val = m\n                        break\n                temp_li[val] = l[i]\n                count += 1\n        print(count)\n    else:\n        print(str(len(set(l))))"]