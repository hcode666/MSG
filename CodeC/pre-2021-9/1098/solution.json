["for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    colors = [0] * 41\n    cost = [0] * 41\n    color = 0\n    for i in range(n):\n        (cc, pp) = list(map(int, input().split()))\n        colors[cc] += 1\n        cost[cc] += pp\n    for i in colors:\n        if i > 0:\n            color += 1\n    dp2 = [[0] * 41 for i in range(color + 1)]\n    dp2[0] = [1] * 41\n    for i in range(1, color + 1):\n        for j in range(1, 41):\n            dp2[i][j] = dp2[i][j - 1] + dp2[i - 1][j - 1] * (2 ** colors[j] - 1)\n    dp1 = [[0] * 41 for i in range(color + 1)]\n    for i in range(1, color + 1):\n        for j in range(1, 41):\n            dp1[i][j] = dp1[i][j - 1] + dp1[i - 1][j - 1] * (2 ** colors[j] - 1) + dp2[i - 1][j - 1] * cost[j] * 2 ** (colors[j] - 1)\n    num = den = 0\n    for i in range(m, color + 1):\n        num += dp1[i][40]\n        den += dp2[i][40]\n    print(num / den)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    colors = [0] * 41\n    cost = [0] * 41\n    color = 0\n    for i in range(n):\n        (cc, pp) = list(map(int, input().split()))\n        colors[cc] += 1\n        cost[cc] += pp\n    for i in colors:\n        if i > 0:\n            color += 1\n    dp2 = [[0] * 41 for i in range(color + 1)]\n    dp2[0] = [1] * 41\n    for i in range(1, color + 1):\n        for j in range(1, 41):\n            dp2[i][j] = dp2[i][j - 1] + dp2[i - 1][j - 1] * (2 ** colors[j] - 1)\n    dp1 = [[0] * 41 for i in range(color + 1)]\n    for i in range(1, color + 1):\n        for j in range(1, 41):\n            dp1[i][j] = dp1[i][j - 1] + dp1[i - 1][j - 1] * (2 ** colors[j] - 1) + dp2[i - 1][j - 1] * cost[j] * 2 ** (colors[j] - 1)\n    num = den = 0\n    for i in range(m, color + 1):\n        num += dp1[i][40]\n        den += dp2[i][40]\n    print(num / den)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    colors = [0] * 41\n    cost = [0] * 41\n    color = 0\n    for i in range(n):\n        (cc, pp) = list(map(int, input().split()))\n        colors[cc] += 1\n        cost[cc] += pp\n    for i in colors:\n        if i > 0:\n            color += 1\n    dp2 = [[0] * 41 for i in range(color + 1)]\n    dp2[0] = [1] * 41\n    for i in range(1, color + 1):\n        for j in range(1, 41):\n            dp2[i][j] = dp2[i][j - 1] + dp2[i - 1][j - 1] * (2 ** colors[j] - 1)\n    dp1 = [[0] * 41 for i in range(color + 1)]\n    for i in range(1, color + 1):\n        for j in range(1, 41):\n            dp1[i][j] = dp1[i][j - 1] + dp1[i - 1][j - 1] * (2 ** colors[j] - 1) + dp2[i - 1][j - 1] * cost[j] * 2 ** (colors[j] - 1)\n    num = den = 0\n    for i in range(m, color + 1):\n        num += dp1[i][40]\n        den += dp2[i][40]\n    print(num / den)", "def epc(d):\n    r = [0, 1, 0]\n    for i in range(len(d)):\n        p = r[0]\n        for j in range(1, len(r)):\n            t = r[j]\n            r[j] = p + t * d[i]\n            p = t\n        r += [0]\n    r = r[1:-1]\n    r.reverse()\n    return r\n\ndef main():\n    T = int(input())\n    while T > 0:\n        line = input().split(' ')\n        N = int(line[0])\n        M = int(line[1])\n        n = {}\n        d = {}\n        for i in range(N):\n            line = input().split(' ')\n            C = int(line[0])\n            P = int(line[1])\n            if C in n:\n                n[C] += P\n                d[C] = (d[C] + 1) * 2 - 1\n            else:\n                n[C] = P\n                d[C] = 1\n        K = len(n)\n        for c in n:\n            n[c] = n[c] * (d[c] - ((d[c] + 1) / 2 - 1)) / d[c]\n        b = [[], []]\n        d0 = []\n        dp = 1\n        for c in d:\n            b[0] += [0]\n            b[1] += [d[c]]\n            d0 += [d[c]]\n            dp *= d[c]\n        e0 = epc(d0)\n        for m in range(2, K + 1):\n            b += [[]]\n        for i in range(len(d0)):\n            d1 = []\n            for j in range(i):\n                d1 += [d0[j]]\n            for j in range(i + 1, len(d0)):\n                d1 += [d0[j]]\n            e1 = epc(d1)\n            for m in range(2, K):\n                b[m] += [e0[m] - e1[m]]\n            b[-1] += [dp]\n        n0 = []\n        for c in n:\n            n0 += [n[c]]\n        rn = 0\n        rd = 0\n        for i in range(M, K + 1):\n            rd += e0[i]\n            for j in range(K):\n                rn += n0[j] * b[i][j]\n        print('%.8f' % (rn / rd))\n        T -= 1\nmain()", "T = int(input())\nfor testIndex in range(T):\n    (N, M) = map(int, input().split())\n    products = [(0, 0)]\n    for productIndex in range(N):\n        (C, P) = map(int, input().split())\n        products += [(C, P)]\n    products.sort(key=lambda x: x[0])\n    dpN = [[0 for j in range(N + 1)] for i in range(N + 1)]\n    dpS = [[0 for j in range(N + 1)] for i in range(N + 1)]\n    dpN[0][0] = 1\n    dpS[0][0] = 0\n    for last in range(N):\n        for colors in range(N):\n            if dpN[last][colors] > 0:\n                for next in range(last + 1, N + 1):\n                    colorsAfter = colors + 1\n                    if products[last][0] == products[next][0]:\n                        colorsAfter -= 1\n                    dpS[next][colorsAfter] += dpS[last][colors] + dpN[last][colors] * products[next][1]\n                    dpN[next][colorsAfter] += dpN[last][colors]\n    allN = 0\n    allS = 0\n    for last in range(0, N + 1):\n        for colors in range(M, N + 1):\n            allS += dpS[last][colors]\n            allN += dpN[last][colors]\n    result = allS / allN\n    print('%.7f' % result)"]