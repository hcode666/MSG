["from sys import stdin\n(k, T) = map(int, stdin.readline().strip().split())\nmax_possible = 1000000000000000000\nif k != 2:\n    not_thrown = [0, 1]\nelse:\n    not_thrown = [0]\nk_minus_1 = k - 1\nnum = k // k_minus_1 + 1\nwhile num < max_possible:\n    not_thrown.append(num)\n    num = k * num // k_minus_1 + 1\nnot_thrown = set(not_thrown)\nfor t in range(1, T + 1):\n    (n, m) = map(int, stdin.readline().strip().split())\n    if n < m * k:\n        if k == 2:\n            if n == 1:\n                print(m)\n                continue\n            if n == 2:\n                print('Thrown off the roof.')\n                continue\n            if n == 3:\n                print(m)\n                continue\n            remaining = m - (n + 1) // k\n            print(remaining)\n        else:\n            print(m - n // k)\n    elif n - m * k in not_thrown:\n        print(0)\n    else:\n        print('Thrown off the roof.')", "from sys import stdin\n(k, T) = map(int, stdin.readline().strip().split())\nmax_possible = 1000000000000000000\nif k != 2:\n    not_thrown = [0, 1]\nelse:\n    not_thrown = [0]\nk_minus_1 = k - 1\nnum = k // k_minus_1 + 1\nwhile num < max_possible:\n    not_thrown.append(num)\n    num = k * num // k_minus_1 + 1\nnot_thrown = set(not_thrown)\nfor t in range(1, T + 1):\n    (n, m) = map(int, stdin.readline().strip().split())\n    if n < m * k:\n        if k == 2:\n            if n == 1:\n                print(m)\n                continue\n            if n == 2:\n                print('Thrown off the roof.')\n                continue\n            if n == 3:\n                print(m)\n                continue\n            remaining = m - (n + 1) // k\n            print(remaining)\n        else:\n            print(m - n // k)\n    elif n - m * k in not_thrown:\n        print(0)\n    else:\n        print('Thrown off the roof.')", "import sys\ninput = sys.stdin.readline\nl = list(map(int, input().split()))\nk = l[0]\nq = l[1]\nif k != 2:\n    dict1 = {}\n    dict1[k + 1] = 1\n    prev = k + 1\n    r = 3000000\n    if k <= 1000 or (k > 10000 and k < 50000):\n        for i in range(r):\n            new = prev * k // (k - 1)\n            new += 1\n            dict1[new] = 1\n            prev = new\n            if len(str(new)) >= 19:\n                break\n    elif k <= 5000:\n        for i in range(3 * 10000):\n            new = prev * k // (k - 1)\n            new += 1\n            dict1[new] = 1\n            prev = new\n            if len(str(new)) >= 19:\n                break\n    elif k >= 5000 and k <= 10000:\n        for i in range(3 * 100000):\n            new = prev * k // (k - 1)\n            new += 1\n            dict1[new] = 1\n            prev = new\n            if len(str(new)) >= 19:\n                break\n    else:\n        r = 3000000\n        for i in range(r):\n            new = prev * k // (k - 1)\n            new += 1\n            dict1[new] = 1\n            prev = new\nfor i in range(q):\n    l1 = list(map(int, input().split()))\n    n = l1[0]\n    m = l1[1]\n    extra = 0\n    flag = True\n    if k == 2:\n        if n == 1:\n            extra = 0\n        elif n == 2:\n            flag = False\n            extra = m\n        elif n == 3:\n            extra = 0\n        elif n == 4:\n            extra = 2\n        elif n == 5:\n            extra = 3\n        elif n % 2 == 0:\n            extra = n // 2\n        else:\n            extra = n // 2 + 1\n        lol = m - extra\n        if lol >= 0 and flag == True:\n            print(lol)\n        else:\n            new = n + 1 - 2 * m\n            while new % 2 == 0 and new > 0:\n                new = new // 2\n            if new == 1 or new == 0:\n                print(0)\n            else:\n                print('Thrown off the roof.')\n    else:\n        extra = n // k\n        lol = m - extra\n        if lol >= 0:\n            print(lol)\n        elif n > k * m:\n            to_check = n - k * m\n            if dict1.get(to_check, 0) != 0:\n                print(0)\n            else:\n                print('Thrown off the roof.')\n        else:\n            print('Thrown off the roof.')", "import sys\ninput = sys.stdin.readline\n(k, q) = map(int, input().split())\ndict1 = {}\ndict1[1] = 1\nprev = 1\nborder = 10 ** 18\nwhile prev < border:\n    dict1[prev] = 1\n    prev = prev * k // (k - 1) + 1\nfor i in range(q):\n    (n, m) = map(int, input().split())\n    check = m * k\n    if n == 1:\n        print(m)\n    elif n == 2 and k == 2:\n        print('Thrown off the roof.')\n    elif n == 3 and k == 2:\n        print(m)\n    elif check + 1 == n and k == 2:\n        print(0)\n    elif check >= n and k == 2:\n        if n % 2 == 0:\n            print(max(m - n // 2, 0))\n        else:\n            print(max(m - n // 2 - 1, 0))\n    elif check >= n:\n        print(m - n // k)\n    elif n - check in dict1:\n        print(0)\n    else:\n        print('Thrown off the roof.')", "import sys\ninput = sys.stdin.readline\n(k, q) = map(int, input().split())\ndict1 = {}\ndict1[1] = 1\nprev = 1\nborder = 10 ** 18\nwhile prev < border:\n    dict1[prev] = 1\n    prev = prev * k // (k - 1) + 1\nfor i in range(q):\n    (n, m) = map(int, input().split())\n    if n == 1:\n        print(m)\n    elif n == 2 and k == 2:\n        print('Thrown off the roof.')\n    elif n == 3 and k == 2:\n        print(m)\n    elif m * 2 + 1 == n and k == 2:\n        print(0)\n    elif m * 2 >= n and k == 2:\n        if n % 2 == 0:\n            print(max(m - n // 2, 0))\n        else:\n            print(max(m - n // 2 - 1, 0))\n    elif m * k >= n:\n        print(m - n // k)\n    elif n - m * k in dict1:\n        print(0)\n    else:\n        print('Thrown off the roof.')", "import sys\nimport math\ninput = sys.stdin.readline\n(k, q) = map(int, input().split())\nif k == 2:\n    for i in range(q):\n        (n, m) = map(int, input().split())\n        if n == 1:\n            print(m)\n        elif n == 2:\n            print('Thrown off the roof.')\n        elif n == 3:\n            print(m)\n        elif n == 4:\n            ans = m - 2\n            if ans >= 0:\n                print(ans)\n            else:\n                print('Thrown off the roof.')\n        elif n <= 2 * m + 1:\n            if n % 2 == 0:\n                print(m - n // 2)\n            else:\n                print(m - n // 2 - 1)\n        elif n - 1 == 2 * m + 1:\n            print('Throw off the roof.')\n        elif bin(n - 2 * m + 1).count('1') == 1:\n            print(0)\n        else:\n            print('Thrown off the roof.')\nelse:\n    allnum = {k + 1: 0}\n    temp = k + 1\n    count = 0\n    while temp < 10 ** 18:\n        new = temp * k // (k - 1) + 1\n        allnum[new] = 0\n        temp = new\n    for i in range(q):\n        (n, m) = map(int, input().split())\n        if n <= k * m + k - 1:\n            if n >= 1 and n <= k - 1:\n                print(m)\n            else:\n                print(m - n // k)\n        elif n - 1 == k * m + k - 1:\n            print('Thrown off the roof.')\n        else:\n            num = n - m * k\n            if num in allnum:\n                print(0)\n            else:\n                print('Thrown off the roof.')", "import bisect\nimport sys\ninput = sys.stdin.readline\n(K, Q) = list(map(int, input().strip().split(' ')))\n\ndef findout(N, M, K):\n    if N == 2 and K == 2:\n        return 'Thrown off the roof.'\n    if N == 3 and K == 2:\n        return M\n    if N == 1:\n        return M\n    if N <= M * K:\n        if K == 2:\n            return M - (N + 1) // K\n        return M - N // K\n    remind = N - M * K\n    if remind in check:\n        return 0\n    return 'Thrown off the roof.'\n\ndef easy_find(N, M, K):\n    if N == 2 and K == 2:\n        return -1\n    if N == 3 and K == 2:\n        return M\n    if N == 1:\n        return M\n    if N <= M * K:\n        if K == 2:\n            return M - (N + 1) // K\n        return M - N // K\n    return 'bad'\nqueries = []\nans = [-1] * Q\nfor _ in range(Q):\n    (N, M) = list(map(int, input().strip().split(' ')))\n    temp = easy_find(N, M, K)\n    if temp != 'bad':\n        ans[_] = temp\n    else:\n        queries += [(N - M * K, _)]\nqueries = sorted(queries)\nif queries:\n    MAX = queries[-1][0]\n    check = []\n    temp = 1\n    while True:\n        temp = K * temp // (K - 1) + 1\n        check += [temp]\n        if temp > MAX:\n            break\nwhile queries:\n    (remind, post) = queries[-1]\n    if check == []:\n        ans[post] = -1\n        queries.pop()\n        continue\n    while check[-1] > remind:\n        check.pop()\n    if check == []:\n        ans[post] = -1\n        queries.pop()\n        continue\n    if check[-1] == remind:\n        ans[post] = 0\n        queries.pop()\n    else:\n        ans[post] = -1\n        queries.pop()\nfor i in range(Q):\n    if ans[i] == -1:\n        ans[i] = 'Thrown off the roof.'\n    else:\n        ans[i] = str(ans[i])\nsys.stdout.write('\\n'.join(ans))"]