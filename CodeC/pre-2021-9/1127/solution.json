["import math\n\ndef function(x, b, c):\n    return (x ** 2 + b * x + c) / math.sin(x)\n\ndef ternary_search(l, r, precision, b, c):\n    count = 0\n    while r - l > precision:\n        partition = (r - l) / 3\n        m1 = l + partition\n        m2 = r - partition\n        fm1 = function(m1, b, c)\n        fm2 = function(m2, b, c)\n        if fm1 > fm2:\n            l = m1\n        elif fm1 < fm2:\n            r = m2\n        else:\n            l = m1\n            r = m2\n        count += 1\n    return l\ncant = int(input())\nfor i in range(cant):\n    (b, c) = map(float, input().split())\n    print(function(ternary_search(0, math.pi / 2, 10 ** (-6), b, c), b, c))", "import math\n\ndef function(x, b, c):\n    return (x ** 2 + b * x + c) / math.sin(x)\n\ndef ternary_search(l, r, precision, b, c):\n    count = 0\n    while r - l > precision:\n        partition = (r - l) / 3\n        m1 = l + partition\n        m2 = r - partition\n        fm1 = function(m1, b, c)\n        fm2 = function(m2, b, c)\n        if fm1 > fm2:\n            l = m1\n        elif fm1 < fm2:\n            r = m2\n        else:\n            l = m1\n            r = m2\n        count += 1\n    return l\ncant = int(input())\nfor i in range(cant):\n    (b, c) = map(float, input().split())\n    print(function(ternary_search(0, math.pi / 2, 10 ** (-6), b, c), b, c))", "import math\n\ndef f(x):\n    return (x ** 2 + b * x + c) / math.sin(x)\n\ndef busqueda(f, l, r, precision):\n    for i in range(50):\n        m1 = l + (r - l) / 3\n        m2 = r - (r - l) / 3\n        if f(m1) > f(m2):\n            l = m1\n        else:\n            r = m2\n    return (l + r) / 2\ncant = int(input())\nfor i in range(cant):\n    (b, c) = map(float, input().split())\n    print(f(busqueda(f, 0, math.pi / 2, 10 ** (-6))))", "import math\n\ndef function(x):\n    if x != 0:\n        return float((x ** 2 + b * x + c) / math.sin(x))\nfor _ in range(int(input())):\n    (b, c) = map(float, input().strip().split())\n    l = 0\n    r = math.pi / 2\n    for _ in range(25):\n        aux = (r - l) / 3\n        m1 = l + aux\n        m2 = r - aux\n        f1 = function(m1)\n        f2 = function(m2)\n        if f1 <= f2:\n            r = m2\n        elif f2 <= f1:\n            l = m1\n    average = (l + r) / 2\n    print(round(function(average), 10))", "from math import sin, pi\n\ndef func(x, b, c):\n    return (x * x + b * x + c) / sin(x)\nfor _ in range(int(input())):\n    (b, c) = map(float, input().split())\n    start = 0\n    end = pi / 2\n    while end - start > 1e-06:\n        m1 = start + (end - start) / 3\n        m2 = end - (end - start) / 3\n        fm1 = func(m1, b, c)\n        fm2 = func(m2, b, c)\n        if fm1 > fm2:\n            start = m1\n        elif fm1 < fm2:\n            end = m2\n        else:\n            start = m1\n            end = m2\n    print(func(start, b, c))", "from math import sin, pi\n\ndef func(x, b, c):\n    return (x * x + b * x + c) / sin(x)\nfor _ in range(int(input())):\n    (b, c) = map(float, input().split())\n    start = 0\n    end = pi / 2\n    while end - start > 1e-06:\n        m1 = start + (end - start) / 3\n        m2 = end - (end - start) / 3\n        fm1 = func(m1, b, c)\n        fm2 = func(m2, b, c)\n        if fm1 > fm2:\n            start = m1\n        elif fm1 < fm2:\n            end = m2\n        else:\n            start = m1\n            end = m2\n    print(func(start, b, c))", "from math import sin, pi\n\ndef f(x):\n    return (x ** 2 + b * x + c) / sin(x)\n\ndef ts(left, right, depht):\n    for i in range(depht):\n        p1 = left + (right - left) / 3\n        p2 = right - (right - left) / 3\n        f2 = f(p1)\n        f3 = f(p2)\n        if f2 <= f3:\n            right = p2\n        if f2 >= f3:\n            left = p1\n    return (left + right) / 2\nfor _ in range(int(input())):\n    (b, c) = map(float, input().split())\n    x = ts(0, pi / 2, 50)\n    print(f(x))", "from math import sin, pi\n\ndef function(x):\n    return (x ** 2 + b * x + c) / sin(x)\n\ndef ternary_search():\n    left = 0\n    right = pi / 2\n    for _ in range(100):\n        mid1 = left + (right - left) / 3\n        mid2 = right - (right - left) / 3\n        f1 = function(mid1)\n        f2 = function(mid2)\n        if f1 == f2:\n            return f1\n        elif f1 < f2:\n            right = mid2\n        elif f1 > f2:\n            left = mid1\n    return function((left + right) / 2)\naws_dict = {}\nT = int(input())\nfor _ in range(T):\n    (b, c) = map(float, input().split())\n    if f'{b}_{c}' not in aws_dict:\n        aws = ternary_search()\n        aws = round(aws, 10)\n        aws_dict[f'{b}_{c}'] = aws\n    else:\n        aws = aws_dict[f'{b}_{c}']\n    print(aws)", "import math\n\ndef func(x, b, c):\n    ans = (x * x + b * x + c) / math.sin(x)\n    return ans\n\ndef findMin(b, c):\n    start = 0.0\n    end = 1.57079632679\n    while end - start > 1e-06:\n        m1 = start + (end - start) / 3\n        m2 = end - (end - start) / 3\n        fm1 = func(m1, b, c)\n        fm2 = func(m2, b, c)\n        if fm1 > fm2:\n            start = m1\n        elif fm2 > fm1:\n            end = m2\n        else:\n            start = m1\n            end = m2\n    mn = func(start, b, c)\n    return mn\n\ndef solve():\n    for _ in range(int(input())):\n        (b, c) = map(float, input().split())\n        ans = findMin(b, c)\n        print(ans)\nsolve()", "from math import *\ntc = 1\ntc = int(input())\nfor _ in range(tc):\n    (b, c) = map(float, input().split())\n    error = 10 ** (-6)\n    (l, r) = (error, pi / 2 - error)\n\n    def f(x):\n        return (x ** 2 + b * x + c) / sin(x)\n    while r - l > error:\n        mid = (r - l) / 3\n        m1 = l + mid\n        m2 = r - mid\n        if f(m1) > f(m2):\n            l = m1\n        else:\n            r = m2\n    print(f(l))", "import math\n\ndef func(x, b, c):\n    ans = (x * x + b * x + c) / math.sin(x)\n    return ans\n\ndef findMin(b, c):\n    start = 0.0\n    end = 1.57079632679\n    while end - start > 1e-06:\n        m1 = start + (end - start) / 3\n        m2 = end - (end - start) / 3\n        fm1 = func(m1, b, c)\n        fm2 = func(m2, b, c)\n        if fm1 > fm2:\n            start = m1\n        elif fm2 > fm1:\n            end = m2\n        else:\n            start = m1\n            end = m2\n    mn = func(start, b, c)\n    return mn\n\ndef solve():\n    for _ in range(int(input())):\n        (b, c) = map(float, input().split())\n        ans = findMin(b, c)\n        print(ans)\nsolve()", "import math\n(b, c) = (0, 0)\n\ndef f(x):\n    return (x * x + b * x + c) / math.sin(x)\n\ndef m(x):\n    return (2 * x + b) * math.sin(x) - (x * x + b * x + c) * math.cos(x)\nfor t in range(int(input())):\n    (b, c) = map(float, input().split())\n    (LL, HL) = (0.0, math.pi / 2)\n    x = (LL + HL) / 2\n    while abs(m(x)) > math.pow(10, -6):\n        if m(x) > 0:\n            HL = x\n            x = (LL + HL) / 2\n        else:\n            LL = x\n            x = (LL + HL) / 2\n    print(f(x))", "import math\n(b, c) = (0, 0)\n\ndef f(x):\n    return (x * x + b * x + c) / math.sin(x)\n\ndef m(x):\n    return (2 * x + b) * math.sin(x) - (x * x + b * x + c) * math.cos(x)\nfor t in range(int(input())):\n    (b, c) = map(float, input().split())\n    (LL, HL) = (0.0, math.pi / 2)\n    x = (LL + HL) / 2\n    while abs(m(x)) > math.pow(10, -6):\n        if m(x) > 0:\n            HL = x\n            x = (LL + HL) / 2\n        else:\n            LL = x\n            x = (LL + HL) / 2\n    print(f(x))", "import math\n\ndef f(x, b, c):\n    return (x * x + b * x + c) / math.sin(x)\ntest_cases = int(input())\nfor _ in range(test_cases):\n    numbers = list(map(float, input().split()))\n    b = numbers[0]\n    c = numbers[1]\n    low = 0\n    high = math.pi / 2\n    tries = 25\n    while tries > 0:\n        stretch = (high - low) / 3.0\n        v1 = low + stretch\n        v2 = high - stretch\n        f1 = f(v1, b, c)\n        f2 = f(v2, b, c)\n        if f1 >= f2:\n            low = v1\n        if f1 <= f2:\n            high = v2\n        if low == high:\n            break\n        tries -= 1\n    print(f((low + high) * 0.5, b, c))", "import math\n(b, c) = (0, 0)\n\ndef f(x):\n    return (x * x + b * x + c) / math.sin(x)\n\ndef m(x):\n    return (2 * x + b) * math.sin(x) - (x * x + b * x + c) * math.cos(x)\nfor t in range(int(input())):\n    (b, c) = map(float, input().split())\n    (LL, HL) = (0.0, math.pi / 2)\n    x = (LL + HL) / 2\n    while abs(m(x)) > math.pow(10, -6):\n        if m(x) > 0:\n            HL = x\n            x = (LL + HL) / 2\n        else:\n            LL = x\n            x = (LL + HL) / 2\n    print(f(x))", "import math\n(b, c) = (0, 0)\n\ndef f(x):\n    return (x * x + b * x + c) / math.sin(x)\n\ndef m(x):\n    return (2 * x + b) * math.sin(x) - (x * x + b * x + c) * math.cos(x)\nfor t in range(int(input())):\n    (b, c) = map(float, input().split())\n    (LL, HL) = (0.0, math.pi / 2)\n    x = (LL + HL) / 2\n    while abs(m(x)) > math.pow(10, -6):\n        if m(x) > 0:\n            HL = x\n            x = (LL + HL) / 2\n        else:\n            LL = x\n            x = (LL + HL) / 2\n    print(f(x))", "import math\n\ndef f(x, b, c):\n    return (x * x + b * x + c) / math.sin(x)\ntest_cases = int(input())\nfor _ in range(test_cases):\n    numbers = list(map(float, input().split()))\n    b = numbers[0]\n    c = numbers[1]\n    low = 0\n    high = math.pi / 2\n    tries = 25\n    while tries > 0:\n        stretch = (high - low) / 3.0\n        v1 = low + stretch\n        v2 = high - stretch\n        f1 = f(v1, b, c)\n        f2 = f(v2, b, c)\n        if f1 >= f2:\n            low = v1\n        if f1 <= f2:\n            high = v2\n        if low == high:\n            break\n        tries -= 1\n    print(f((low + high) * 0.5, b, c))", "import math\n\ndef f(x, b, c):\n    return (x * x + b * x + c) / math.sin(x)\ntest_cases = int(input())\nfor _ in range(test_cases):\n    numbers = list(map(float, input().split()))\n    b = numbers[0]\n    c = numbers[1]\n    low = 0\n    high = math.pi / 2\n    tries = 25\n    while tries > 0:\n        stretch = (high - low) / 3.0\n        v1 = low + stretch\n        v2 = high - stretch\n        f1 = f(v1, b, c)\n        f2 = f(v2, b, c)\n        if f1 >= f2:\n            low = v1\n        if f1 <= f2:\n            high = v2\n        if low == high:\n            break\n        tries -= 1\n    print(f((low + high) * 0.5, b, c))", "import math\n\ndef f(x, b, c):\n    return (x * x + b * x + c) / math.sin(x)\ntest_cases = int(input())\nfor _ in range(test_cases):\n    (b, c) = list(map(float, input().split()))\n    low = 0\n    high = math.pi / 2\n    tries = 25\n    while tries > 0:\n        stretch = (high - low) / 3\n        v1 = low + stretch\n        v2 = high - stretch\n        f1 = f(v1, b, c)\n        f2 = f(v2, b, c)\n        if f1 >= f2:\n            low = v1\n        if f1 <= f2:\n            high = v2\n        tries -= 1\n    awns = f((low + high) / 2, b, c)\n    print(awns)", "from math import sin, pi\n\ndef f(x, b, c):\n    return (x * x + b * x + c) / sin(x)\n\ndef ternary(low, high):\n    (p1, p2) = (low + (high - low) / 3, high - (high - low) / 3)\n    if f(p1, b, c) <= f(p2, b, c):\n        high = p2\n    elif f(p1, b, c) >= f(p2, b, c):\n        low = p1\n    return (low, high)\nt = int(input())\nfor _ in range(t):\n    (b, c) = list(map(float, input().split()))\n    low = 0\n    high = pi / 2\n    x = 0\n    while x < 25:\n        (low, high) = ternary(low, high)\n        x += 1\n    print(f((low + high) * 0.5, b, c))", "import math\n\ndef f(x, b, c):\n    return (x * x + b * x + c) / math.sin(x)\nt = int(input())\nfor i in range(t):\n    num = [float(j) for j in input().split(' ')]\n    b = num[0]\n    c = num[1]\n    l = 0\n    r = 3.1416 / 2\n    times = 30\n    while times > 0:\n        d = (r - l) / 3.0\n        m1 = l + d\n        m2 = r - d\n        f1 = f(m1, b, c)\n        f2 = f(m2, b, c)\n        if f1 >= f2:\n            l = m1\n        if f2 >= f1:\n            r = m2\n        if l == r:\n            break\n        times -= 1\n    print(f((l + r) * 0.5, b, c))", "import math\n\ndef fun(x, b, c):\n    return (x ** 2 + b * x + c) / math.sin(x)\nfor _ in range(int(input())):\n    d = input().split(' ')\n    b = float(d[0])\n    c = float(d[1])\n    l = 0\n    r = math.pi / 2\n    for _ in range(25):\n        dist = (r - l) / 3\n        corte1 = l + dist\n        corte2 = r - dist\n        if fun(corte1, b, c) <= fun(corte2, b, c):\n            r = corte2\n        else:\n            l = corte1\n    print(fun(corte1, b, c))", "from math import sin, pi\n\nclass Solution:\n\n    def f(self, x, b, c):\n        return (x ** 2 + b * x + c) / sin(x)\n\n    def solve(self, b, c):\n        eps = 10 ** (-9)\n        (l, r) = (eps, pi / 2 - eps)\n        while r - l > eps:\n            m1 = l + (r - l) / 3\n            m2 = r - (r - l) / 3\n            if self.f(m1, b, c) > self.f(m2, b, c):\n                l = m1\n            else:\n                r = m2\n        print(f'{self.f(l, b, c):.10f}')\nsol = Solution()\nfor _ in range(int(input())):\n    (b, c) = [float(x) for x in input().split()]\n    sol.solve(b, c)", "import math\nb = 0\nc = 0\ntry:\n    outList = []\n    T = int(input())\n\n    def f(x):\n        y = (x ** 2 + b * x + c) / math.sin(x)\n        return y\n    for i in range(T):\n        inputValue = input().split()\n        b = float(inputValue[0])\n        c = float(inputValue[1])\n        lower = math.exp(-8)\n        upper = math.pi / 2.0\n        for j in range(50):\n            mid = (lower + upper) / 2.0\n            if math.tan(mid) - (mid * mid + b * mid + c) / (2.0 * mid + b) <= 0:\n                lower = mid\n            else:\n                upper = mid\n        outList.append(f(lower))\nexcept:\n    pass\nfor i in outList:\n    print(i)", "import math\nb = 0\nc = 0\ntry:\n    outList = []\n    T = int(input())\n\n    def f(x):\n        y = (x ** 2 + b * x + c) / math.sin(x)\n        return y\n    for i in range(T):\n        inputValue = input().split()\n        b = float(inputValue[0])\n        c = float(inputValue[1])\n        lower = math.exp(-8)\n        upper = math.pi / 2.0\n        for j in range(50):\n            mid = (lower + upper) / 2.0\n            if math.tan(mid) - (mid * mid + b * mid + c) / (2.0 * mid + b) <= 0:\n                lower = mid\n            else:\n                upper = mid\n        outList.append(f(lower))\nexcept:\n    pass\nfor i in outList:\n    print(i)", "import math\nb = 0\nc = 0\ntry:\n    outList = []\n    T = int(input())\n\n    def f(x):\n        y = (x ** 2 + b * x + c) / math.sin(x)\n        return y\n    for i in range(T):\n        inputValue = input().split()\n        b = float(inputValue[0])\n        c = float(inputValue[1])\n        lower = math.exp(-8)\n        upper = math.pi / 2.0\n        for j in range(50):\n            mid = (lower + upper) / 2.0\n            if math.tan(mid) - (mid * mid + b * mid + c) / (2.0 * mid + b) <= 0:\n                lower = mid\n            else:\n                upper = mid\n        outList.append(f(lower))\nexcept:\n    pass\nfor i in outList:\n    print(i)", "import math\nb = 0\nc = 0\ntry:\n    outList = []\n    T = int(input())\n\n    def f(x):\n        y = (x ** 2 + b * x + c) / math.sin(x)\n        return y\n    for i in range(T):\n        inputValue = input().split()\n        b = float(inputValue[0])\n        c = float(inputValue[1])\n        lower = math.exp(-8)\n        upper = math.pi / 2.0\n        for j in range(50):\n            mid = (lower + upper) / 2.0\n            if math.tan(mid) - (mid * mid + b * mid + c) / (2.0 * mid + b) <= 0:\n                lower = mid\n            else:\n                upper = mid\n        outList.append(f(lower))\nexcept:\n    pass\nfor i in outList:\n    print(i)", "import math\nb = 0\nc = 0\ntry:\n    outList = []\n    T = int(input())\n\n    def f(x):\n        y = (x ** 2 + b * x + c) / math.sin(x)\n        return y\n    for i in range(T):\n        inputValue = input().split()\n        b = float(inputValue[0])\n        c = float(inputValue[1])\n        lower = math.exp(-8)\n        upper = math.pi / 2.0\n        for j in range(50):\n            mid = (lower + upper) / 2.0\n            if math.tan(mid) - (mid * mid + b * mid + c) / (2.0 * mid + b) <= 0:\n                lower = mid\n            else:\n                upper = mid\n        outList.append(f(lower))\nexcept:\n    pass\nfor i in outList:\n    print(i)", "import math\nb = 0\nc = 0\ntry:\n    outList = []\n    T = int(input())\n\n    def f(x):\n        y = (x ** 2 + b * x + c) / math.sin(x)\n        return y\n    for i in range(T):\n        inputValue = input().split()\n        b = float(inputValue[0])\n        c = float(inputValue[1])\n        lower = math.exp(-8)\n        upper = math.pi / 2.0\n        for j in range(50):\n            mid = (lower + upper) / 2.0\n            if math.tan(mid) - (mid * mid + b * mid + c) / (2.0 * mid + b) <= 0:\n                lower = mid\n            else:\n                upper = mid\n        outList.append(f(lower))\nexcept:\n    pass\nfor i in outList:\n    print(i)", "import math\nb = 0\nc = 0\ntry:\n    outList = []\n    T = int(input())\n\n    def f(x):\n        y = (x ** 2 + b * x + c) / math.sin(x)\n        return y\n    for i in range(T):\n        inputValue = input().split()\n        b = float(inputValue[0])\n        c = float(inputValue[1])\n        lower = math.exp(-8)\n        upper = math.pi / 2.0\n        for j in range(50):\n            mid = (lower + upper) / 2.0\n            if math.tan(mid) - (mid * mid + b * mid + c) / (2.0 * mid + b) <= 0:\n                lower = mid\n            else:\n                upper = mid\n        outList.append(f(lower))\nexcept:\n    pass\nfor i in outList:\n    print(i)", "from math import *\n\ndef func(x):\n    return (x * x + b * x + c) / sin(x)\n\ndef diff(x):\n    return (2 * x + b) * sin(x) - (x * x + b * x + c) * cos(x)\nt = int(input())\nfor i in range(0, t):\n    bc = list(map(float, input().split()))\n    b = bc[0]\n    c = bc[1]\n    l = 0\n    h = pi / 2\n    m = (l + h) / 2\n    for j in range(50):\n        if diff(m) > 0:\n            h = m\n            m = (l + h) / 2\n        else:\n            l = m\n            m = (l + h) / 2\n    print(func(m))", "from math import *\n\ndef func(x):\n    return (x * x + b * x + c) / sin(x)\n\ndef diff(x):\n    return (2 * x + b) * sin(x) - (x * x + b * x + c) * cos(x)\nt = int(input())\nfor i in range(0, t):\n    bc = list(map(float, input().split()))\n    b = bc[0]\n    c = bc[1]\n    l = 0\n    h = pi / 2\n    m = (l + h) / 2\n    for j in range(50):\n        if diff(m) > 0:\n            h = m\n            m = (l + h) / 2\n        else:\n            l = m\n            m = (l + h) / 2\n    print(func(m))", "import math\n\ndef func(x):\n    return (x * x + b * x + c) / math.sin(x)\n\ndef diff(x):\n    return (2 * x + b) * math.sin(x) - (x * x + b * x + c) * math.cos(x)\nt = int(input())\nfor i in range(0, t):\n    bc = list(map(float, input().split()))\n    b = bc[0]\n    c = bc[1]\n    l = 0\n    h = math.pi / 2\n    m = (l + h) / 2\n    for j in range(50):\n        if diff(m) > 0:\n            h = m\n            m = (l + h) / 2\n        else:\n            l = m\n            m = (l + h) / 2\n    print(func(m))", "import math\nt = int(input())\n\ndef fn(x, b, c):\n    return (x ** 2 + b * x + c) / math.sin(x)\n\ndef fn_der(x, b, c):\n    return (2 * x + b) * math.sin(x) - (x ** 2 + b * x + c) * math.cos(x)\n\ndef answer(rmin, rmax, b, c):\n    if abs(fn_der(rmin, b, c)) < 1e-08:\n        return rmin\n    if fn_der((rmin + rmax) / 2, b, c) < 0:\n        return answer((rmin + rmax) / 2, rmax, b, c)\n    else:\n        return answer(rmin, (rmin + rmax) / 2, b, c)\nfor i in range(t):\n    (b, c) = map(float, input().split())\n    rmin = 0\n    rmax = math.pi / 2\n    print(fn(answer(rmin, rmax, b, c), b, c))", "from math import *\n\ndef func(x):\n    return (x * x + b * x + c) / sin(x)\n\ndef diff(x):\n    return (2 * x + b) * sin(x) - (x * x + b * x + c) * cos(x)\nt = int(input())\nfor i in range(0, t):\n    bc = list(map(float, input().split()))\n    b = bc[0]\n    c = bc[1]\n    l = 0\n    h = pi / 2\n    m = (l + h) / 2\n    for j in range(50):\n        if diff(m) > 0:\n            h = m\n            m = (l + h) / 2\n        else:\n            l = m\n            m = (l + h) / 2\n    print(func(m))", "from math import *\n\ndef func(x):\n    return (x * x + b * x + c) / sin(x)\n\ndef diff(x):\n    return (2 * x + b) * sin(x) - (x * x + b * x + c) * cos(x)\nt = int(input())\nfor i in range(0, t):\n    bc = list(map(float, input().split()))\n    b = bc[0]\n    c = bc[1]\n    l = 0\n    h = pi / 2\n    m = (l + h) / 2\n    for j in range(50):\n        if diff(m) > 0:\n            h = m\n            m = (l + h) / 2\n        else:\n            l = m\n            m = (l + h) / 2\n    print(func(m))", "import math\n\ndef f(x, b, c):\n    return (x * x + b * x + c) / math.sin(x)\nt = int(input())\nans = []\nfor i in range(0, t):\n    domainStart = 1e-06\n    domainEnd = 1.570796\n    iterations = 1\n    bc = list(map(float, input().split()))\n    b = bc[0]\n    c = bc[1]\n    while iterations < 150:\n        x = (domainStart + domainEnd) / 2\n        if f(x, b, c) > f(x - 1e-06, b, c) and f(x, b, c) < f(x + 1e-06, b, c):\n            domainEnd = x\n        elif f(x, b, c) < f(x - 1e-06, b, c) and f(x, b, c) > f(x + 1e-06, b, c):\n            domainStart = x\n        else:\n            k = (x * x + b * x + c) / math.sin(x)\n            k = round(k, 10)\n            ans.append(k)\n            break\n        iterations = iterations + 1\nfor x in ans:\n    print(x)", "from math import sin, cos, pi\n\ndef f(x):\n    return (x ** 2 + b * x + c) / sin(x)\n\ndef df(x):\n    return (2 * x + b) * sin(x) - cos(x) * (x ** 2 + b * x + c)\nfor _ in range(int(input())):\n    (b, c) = map(float, input().split())\n    low = 0\n    high = pi / 2\n    while low < high:\n        mid = (low + high) / 2\n        if abs(df(mid)) < 0.0013:\n            print(f(mid))\n            break\n        elif df(mid) < 0:\n            low = mid\n        else:\n            high = mid", "from math import sin, cos, pi\n\ndef f(x):\n    return (x ** 2 + b * x + c) / sin(x)\n\ndef df(x):\n    return (2 * x + b) * sin(x) - cos(x) * (x ** 2 + b * x + c)\nfor _ in range(int(input())):\n    (b, c) = map(float, input().split())\n    low = 0\n    high = pi / 2\n    while low < high:\n        mid = (low + high) / 2\n        if abs(df(mid)) < 0.0013:\n            print(f(mid))\n            break\n        elif df(mid) < 0:\n            low = mid\n        else:\n            high = mid", "from math import pi, sin, cos\n(c, b) = (0, 0)\n\ndef slope(x):\n    return (2 * x + b) * sin(x) - (x * x + b * x + c) * cos(x)\n\ndef f(x):\n    return (x * x + b * x + c) / sin(x)\nfor t in range(int(input())):\n    (b, c) = map(float, input().split())\n    (mn, mx, x) = (0, pi / 2, pi / 4)\n    for i in range(25):\n        if slope(x) > 0:\n            mx = x\n            x = mn + mx\n            x /= 2\n        else:\n            mn = x\n            x = mx + mn\n            x /= 2\n    print(f(x))", "from math import pi, sin, cos\n(c, b) = (0, 0)\n\ndef slope(x):\n    return (2 * x + b) * sin(x) - (x * x + b * x + c) * cos(x)\n\ndef f(x):\n    return (x * x + b * x + c) / sin(x)\nfor t in range(int(input())):\n    (b, c) = map(float, input().split())\n    (mn, mx, x) = (0, pi / 2, pi / 4)\n    for i in range(25):\n        if slope(x) > 0:\n            mx = x\n            x = mn + mx\n            x /= 2\n        else:\n            mn = x\n            x = mx + mn\n            x /= 2\n    print(f(x))", "from math import pi, sin, cos\n(c, b) = (0, 0)\n\ndef slope(x):\n    return (2 * x + b) * sin(x) - (x * x + b * x + c) * cos(x)\n\ndef f(x):\n    return (x * x + b * x + c) / sin(x)\nfor t in range(int(input())):\n    (b, c) = map(float, input().split())\n    (mn, mx, x) = (0, pi / 2, pi / 4)\n    for i in range(25):\n        if slope(x) > 0:\n            mx = x\n            x = mn + mx\n            x /= 2\n        else:\n            mn = x\n            x = mx + mn\n            x /= 2\n    print(f(x))", "from math import *\n\ndef f(x, b, c):\n    return (x ** 2 + b * x + c) / sin(x)\n\ndef f_d(x, b, c):\n    return (2 * x + b) * sin(x) - (x ** 2 + b * x + c) * cos(x)\n\ndef solve(l, h, b, c):\n    e = 0.0013\n    mid = (l + h) / 2\n    if abs(f_d(mid, b, c)) < e:\n        return mid\n    if f_d(mid, b, c) < 0:\n        return solve(mid, h, b, c)\n    else:\n        return solve(l, mid, b, c)\nt = int(input())\nfor i in range(t):\n    l = list(map(float, input().rstrip().split()))\n    a1 = l[0]\n    a2 = l[1]\n    mini = solve(0, 3.141592 / 2, a1, a2)\n    print(f(mini, a1, a2))", "from math import *\n\ndef f(x, b, c):\n    return (x ** 2 + b * x + c) / sin(x)\n\ndef f_d(x, b, c):\n    return (2 * x + b) * sin(x) - (x ** 2 + b * x + c) * cos(x)\n\ndef solve(l, h, b, c):\n    e = 0.0013\n    mid = (l + h) / 2\n    if abs(f_d(mid, b, c)) < e:\n        return mid\n    if f_d(mid, b, c) < 0:\n        return solve(mid, h, b, c)\n    else:\n        return solve(l, mid, b, c)\nt = int(input())\nfor i in range(t):\n    l = list(map(float, input().rstrip().split()))\n    a1 = l[0]\n    a2 = l[1]\n    mini = solve(0, 3.141592 / 2, a1, a2)\n    print(f(mini, a1, a2))", "from math import *\n\ndef f(x, b, c):\n    return (x ** 2 + b * x + c) / sin(x)\n\ndef f_d(x, b, c):\n    return (2 * x + b) * sin(x) - (x ** 2 + b * x + c) * cos(x)\n\ndef solve(l, h, b, c):\n    e = 0.001\n    mid = (l + h) / 2\n    if abs(f_d(mid, b, c)) < e:\n        return mid\n    if f_d(mid, b, c) < 0:\n        return solve(mid, h, b, c)\n    else:\n        return solve(l, mid, b, c)\nt = int(input())\nfor i in range(t):\n    l = list(map(float, input().rstrip().split()))\n    a1 = l[0]\n    a2 = l[1]\n    mini = solve(0, 3.141592 / 2, a1, a2)\n    print(f(mini, a1, a2))", "from math import *\n\ndef f(x, b, c):\n    return (x ** 2 + b * x + c) / sin(x)\n\ndef f_d(x, b, c):\n    return (2 * x + b) * sin(x) - (x ** 2 + b * x + c) * cos(x)\n\ndef solve(l, h, b, c):\n    e = 1e-05\n    mid = (l + h) / 2\n    if abs(f_d(mid, b, c)) < e:\n        return mid\n    if f_d(mid, b, c) < 0:\n        return solve(mid, h, b, c)\n    else:\n        return solve(l, mid, b, c)\nt = int(input())\nfor i in range(t):\n    l = list(map(float, input().rstrip().split()))\n    a1 = l[0]\n    a2 = l[1]\n    mini = solve(0, 3.141592 / 2, a1, a2)\n    print(f(mini, a1, a2))", "from math import *\n\ndef f(x, b, c):\n    return (x ** 2 + b * x + c) / sin(x)\n\ndef f_d(x, b, c):\n    return (2 * x + b) * sin(x) - (x ** 2 + b * x + c) * cos(x)\n\ndef solve(l, h, b, c):\n    e = 1e-08\n    mid = (l + h) / 2\n    if abs(f_d(mid, b, c)) < e:\n        return mid\n    if f_d(mid, b, c) < 0:\n        return solve(mid, h, b, c)\n    else:\n        return solve(l, mid, b, c)\nt = int(input())\nfor i in range(t):\n    l = list(map(float, input().rstrip().split()))\n    a1 = l[0]\n    a2 = l[1]\n    mini = solve(0, 3.141592 / 2, a1, a2)\n    print(f(mini, a1, a2))", "from math import *\n\ndef f(x, b, c):\n    return (x ** 2 + b * x + c) / sin(x)\n\ndef f_d(x, b, c):\n    return (2 * x + b) * sin(x) - (x ** 2 + b * x + c) * cos(x)\n\ndef solve(l, h, b, c):\n    e = 1e-08\n    mid = (l + h) / 2\n    if abs(f_d(mid, b, c)) < e:\n        return mid\n    if f_d(mid, b, c) < 0:\n        return solve(mid, h, b, c)\n    else:\n        return solve(l, mid, b, c)\nt = int(input())\nfor i in range(t):\n    l = list(map(float, input().rstrip().split()))\n    a1 = l[0]\n    a2 = l[1]\n    mini = solve(0, 3.141592 / 2, a1, a2)\n    print(f(mini, a1, a2))", "from math import *\n\ndef f(x, b, c):\n    num = x ** 2 + b * x + c\n    denom = sin(x)\n    return num / denom\n\ndef f_prime(x, b, c):\n    first = (2 * x + b) * sin(x) - (x ** 2 + b * x + c) * cos(x)\n    return first\n\ndef solve(min_, max_, b, c):\n    if abs(f_prime(min_, b, c)) < 1e-08:\n        return min_\n    if f_prime((min_ + max_) / 2, b, c) < 0:\n        return solve((min_ + max_) / 2, max_, b, c)\n    else:\n        return solve(min_, (min_ + max_) / 2, b, c)\nt = int(input())\nfor _ in range(t):\n    (b, c) = [float(d) for d in input().split()]\n    min_ = 0\n    max_ = pi / 2\n    print(f(solve(min_, max_, b, c), b, c))", "import math\n(c, b) = (0, 0)\n\ndef slope(x):\n    return (2 * x + b) * math.sin(x) - (x * x + b * x + c) * math.cos(x)\n\ndef f(x):\n    return (x * x + b * x + c) / math.sin(x)\nfor t in range(int(input())):\n    (b, c) = map(float, input().split())\n    (mn, mx, x) = (0, math.pi / 2, math.pi / 4)\n    for i in range(25):\n        if slope(x) > 0:\n            mx = x\n            x = mn + mx\n            x /= 2\n        else:\n            mn = x\n            x = mx + mn\n            x /= 2\n    print(f(x))", "import math\n(c, b) = (0, 0)\n\ndef slope(x):\n    return (2 * x + b) * math.sin(x) - (x * x + b * x + c) * math.cos(x)\n\ndef f(x):\n    return (x * x + b * x + c) / math.sin(x)\nfor t in range(int(input())):\n    (b, c) = map(float, input().split())\n    (mn, mx, x) = (0, math.pi / 2, math.pi / 4)\n    for i in range(25):\n        if slope(x) > 0:\n            mx = x\n            x = mn + mx\n            x /= 2\n        else:\n            mn = x\n            x = mx + mn\n            x /= 2\n    print(f(x))", "import math\nc = b = 0\n\ndef slope(x):\n    return (2 * x + b) * math.sin(x) - (x * x + b * x + c) * math.cos(x)\n\ndef f(x):\n    return (x * x + b * x + c) / math.sin(x)\nfor t in range(int(input())):\n    (b, c) = map(float, input().split())\n    mn = 0\n    mx = math.pi / 2\n    x = math.pi / 4\n    for i in range(25):\n        if slope(x) > 0:\n            mx = x\n            x = mn + mx\n            x /= 2\n        else:\n            mn = x\n            x = mx + mn\n            x /= 2\n    print(f(x))", "from math import sin, pi\n\ndef calc(x):\n    return (x ** 2 + b * x + c) / sin(x)\n\ndef ternary_search():\n    left = 0\n    right = pi / 2\n    absolute_precision = 1e-06\n    while True:\n        if abs(right - left) < absolute_precision:\n            return (calc(left) + calc(right)) / 2\n        left_third = left + (right - left) / 3\n        right_third = right - (right - left) / 3\n        if calc(left_third) > calc(right_third):\n            left = left_third\n        elif calc(right_third) > calc(left_third):\n            right = right_third\n        else:\n            left = left_third\n            right = right_third\nt = int(input())\nfor i in range(t):\n    (b, c) = [float(i) for i in input().split()]\n    print('%.10f' % ternary_search())", "import math\ntestcases = int(input())\n\ndef f(x):\n    return (x * x + b * x + c) / math.sin(x)\n\ndef slope(x):\n    return (2 * x + b) * math.sin(x) - (x * x + x * b + c) * math.cos(x)\nfor i in range(testcases):\n    (b, c) = list(map(float, input().split()))\n    mini = 0\n    maxi = math.pi / 2\n    mid = math.pi / 4\n    for i in range(25):\n        if slope(mid) > 0:\n            maxi = mid\n            mid = (maxi + mini) / 2\n        else:\n            mini = mid\n            mid = (maxi + mini) / 2\n    print(f(mid))", "import math\nc = b = 0\n\ndef slope(x):\n    return (2 * x + b) * math.sin(x) - (x * x + b * x + c) * math.cos(x)\n\ndef f(x):\n    return (x * x + b * x + c) / math.sin(x)\nfor t in range(int(input())):\n    (b, c) = map(float, input().split())\n    mn = 0\n    mx = math.pi / 2\n    x = math.pi / 4\n    for i in range(25):\n        if slope(x) > 0:\n            mx = x\n            x = mn + mx\n            x /= 2\n        else:\n            mn = x\n            x = mx + mn\n            x /= 2\n    print(f(x))", "import sys\nimport math\ninput = sys.stdin.readline\n\ndef binary(l, r, co, b, c):\n    x = (l + r) / 2\n    val1 = (2 * x + b) * math.sin(x)\n    val2 = (x ** 2 + b * x + c) * math.cos(x)\n    x = (l + r) / 2\n    val = val1 - val2\n    if abs(val) < 1e-07 or co == 150:\n        return (l + r) / 2\n    if val < 0:\n        return binary((l + r) / 2, r, co + 1, b, c)\n    else:\n        return binary(l, (l + r) / 2, co + 1, b, c)\nt = int(input())\nfor _ in range(t):\n    (b, c) = map(float, input().split())\n    x = binary(1e-10, math.pi / 2 - 1e-10, 0, b, c)\n    val = (x * x + b * x + c) / math.sin(x)\n    print(val)", "import math\n\ndef func(x, b, c):\n    ans = x * x + b * x + c\n    ans /= math.sin(x)\n    return ans\nfor asd in range(int(input())):\n    (b, c) = map(float, input().split())\n    st = 0\n    en = math.pi / 2\n    iterations = 0\n    ans = func(en, b, c)\n    while en - st > 1e-06:\n        if iterations > 100:\n            break\n        x1 = st + (en - st) / 3\n        x2 = en - (en - st) / 3\n        fx1 = func(x1, b, c)\n        fx2 = func(x2, b, c)\n        if abs(fx2 - fx1) < 1e-08:\n            break\n        ans = min(ans, min(fx1, fx2))\n        if fx2 < fx1:\n            st = x1\n        else:\n            en = x2\n        iterations += 1\n    print('%.12f' % ans)"]