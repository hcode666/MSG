["from collections import defaultdict\n\ndef get_active_bits(n):\n    result = []\n    i = 0\n    while n:\n        if n & 1:\n            result.append(i)\n        i += 1\n        n >>= 1\n    return result\n\ndef get_val(d):\n    result = 0\n    for (key, val) in d.items():\n        if val:\n            result += 2 ** key\n    return result\nt = int(input())\nwhile t:\n    n = input().split()\n    k = int(n[1])\n    n = int(n[0])\n    a = [int(_) for _ in input().split()]\n    (i, j, ans) = (0, 0, 0)\n    dd = defaultdict(int)\n    while j < n:\n        while j < n and get_val(dd) < k:\n            new_bits = get_active_bits(a[j])\n            for each in new_bits:\n                dd[each] += 1\n            j += 1\n        while i <= j and get_val(dd) >= k:\n            ans += n - j + 1\n            new_bits = get_active_bits(a[i])\n            for each in new_bits:\n                dd[each] -= 1\n            i += 1\n    print(ans)\n    t -= 1", "from collections import defaultdict\n\ndef get_active_bits(n):\n    result = []\n    i = 0\n    while n:\n        if n & 1:\n            result.append(i)\n        i += 1\n        n >>= 1\n    return result\n\ndef get_val(d):\n    result = 0\n    for (key, val) in d.items():\n        if val:\n            result += 2 ** key\n    return result\nt = int(input())\nwhile t:\n    n = input().split()\n    k = int(n[1])\n    n = int(n[0])\n    a = [int(_) for _ in input().split()]\n    (i, j, ans) = (0, 0, 0)\n    dd = defaultdict(int)\n    while j < n:\n        while j < n and get_val(dd) < k:\n            new_bits = get_active_bits(a[j])\n            for each in new_bits:\n                dd[each] += 1\n            j += 1\n        while i <= j and get_val(dd) >= k:\n            ans += n - j + 1\n            new_bits = get_active_bits(a[i])\n            for each in new_bits:\n                dd[each] -= 1\n            i += 1\n    print(ans)\n    t -= 1"]