["for _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    (count, e, perm) = (0, 0, 1)\n    while True:\n        (lim, start) = (N // M ** e, N // M ** (e + 1) + 1)\n        num = lim - start + 1\n        divs = num // M\n        if start + divs * M <= lim:\n            r = (start + divs * M) % M\n            if r == 0 or r + (lim - (start + divs * M)) >= M:\n                divs += 1\n        cmon = num - divs\n        if e % 2 == 0:\n            count += cmon * ((e + 2) // 2)\n        else:\n            count += cmon * (e // 2 + 1)\n            perm = perm * pow((e + 3) // 2, cmon, 998244353) % 998244353\n        e += 1\n        if start == 1:\n            break\n    print(count, perm)", "for _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    (count, e, perm) = (0, 0, 1)\n    while True:\n        (lim, start) = (N // M ** e, N // M ** (e + 1) + 1)\n        num = lim - start + 1\n        divs = num // M\n        if start + divs * M <= lim:\n            r = (start + divs * M) % M\n            if r == 0 or r + (lim - (start + divs * M)) >= M:\n                divs += 1\n        cmon = num - divs\n        if e % 2 == 0:\n            count += cmon * ((e + 2) // 2)\n        else:\n            count += cmon * (e // 2 + 1)\n            perm = perm * pow((e + 3) // 2, cmon, 998244353) % 998244353\n        e += 1\n        if start == 1:\n            break\n    print(count, perm)", "ts = int(input())\nfor _ in range(ts):\n    (n, m) = map(int, input().split())\n    (t, tt, res, cnt) = (1, [], 0, 1)\n    while t <= n:\n        t *= m\n        v = n // t\n        v -= v // m\n        if tt:\n            tt[-1] -= v\n        tt.append(v)\n    for (i, v) in enumerate(tt):\n        res += (i + 2) // 2 * v\n        if i & 1 == 0:\n            cnt = cnt * pow((i + 2) // 2 + 1, v, 998244353) % 998244353\n    print(n - res, cnt)", "import sys\nsys.setrecursionlimit(10 ** 9)\nmod = 998244353\n\ndef power(a, b):\n    res = 1\n    while b > 0:\n        if b % 2:\n            res *= a\n            res %= mod\n        b //= 2\n        a *= a\n        a %= mod\n    return res\n\ndef solve(a):\n    if a > n:\n        return (0, 1)\n    val = a\n    c = 1\n    p = 1\n    size = 0\n    ways = 0\n    while 1:\n        if val > n // m:\n            break\n        val *= m\n        p *= m\n        c += 1\n    u = n // p\n    ans = solve(u + 1)\n    rem = u // m\n    rem -= (a - 1) // m\n    u -= rem\n    size = (c + 1) // 2 * (u - a + 1)\n    if c % 2:\n        ways = 1\n    else:\n        ways = power(c // 2 + 1, u - a + 1)\n    size += ans[0]\n    ways *= ans[1]\n    ways %= mod\n    return (size, ways)\nt = int(input())\nwhile t:\n    t -= 1\n    (n, m) = map(int, input().split())\n    ans = solve(1)\n    print(ans[0], ans[1])", "import sys\ninput = sys.stdin.readline\n(inp, ip) = (lambda : int(input()), lambda : [int(w) for w in input().split()])\nM = 998244353\nfor _ in range(inp()):\n    (n, m) = ip()\n    (size, ways) = (0, 1)\n    (a, b) = (1, m)\n    for k in range(1, 70):\n        if a > n:\n            break\n        ct = n // a - n // b - (n // a // m - n // b // m)\n        size += ct * ((1 + k) // 2)\n        if k % 2 == 0:\n            ways = ways * pow(k // 2 + 1, ct, M) % M\n        (a, b) = (a * m, b * m)\n    print(size, ways)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    t = 1\n    tt = []\n    while t <= n:\n        t *= k\n        v = n // t\n        v -= v // k\n        if tt:\n            tt[-1] -= v\n        tt.append(v)\n    (res, cnt) = (0, 1)\n    for (i, v) in enumerate(tt):\n        res += (i + 2) // 2 * v\n        if i & 1 == 0:\n            cnt = cnt * pow((i + 2) // 2 + 1, v, 998244353) % 998244353\n    print(n - res, cnt)", "def groupsInInterval(L, R, M, N):\n    if R <= N:\n        return R - (L - 1) - (R // M - (L - 1) // M)\n    else:\n        return 0\n\ndef power(a, b):\n    MOD = 998244353\n    res = 1\n    while b > 0:\n        if b % 2:\n            res *= a\n            res %= MOD\n        b //= 2\n        a *= a\n        a %= MOD\n    return res\nwhile True:\n    try:\n        test = int(input())\n    except EOFError:\n        break\n    for i in range(test):\n        MOD = 998244353\n        (n, m) = map(int, input().split())\n        (taken, ways) = (0, 1)\n        for i in range(1, 70):\n            L = n // m ** i + 1\n            R = n // m ** (i - 1)\n            groups = groupsInInterval(L, R, m, n)\n            if i % 2 == 0:\n                taken += i // 2 * groups\n                ways *= power(i // 2 + 1, groups)\n            else:\n                taken += (i + 1) // 2 * groups\n                ways *= 1\n        print(taken, ways % MOD)", "def help():\n    (n, m) = map(int, input().split(' '))\n    max_power = 0\n    n1 = n\n    while n1 >= m:\n        n1 = n1 // m\n        max_power += 1\n    sizes = [0] * (max_power + 1)\n    sizes[max_power] = n // m ** max_power\n    yet = sizes[max_power]\n    curr = max_power - 1\n    while curr >= 0:\n        y1 = n // m ** curr\n        sizes[curr] = y1 - yet\n        yet = y1\n        curr -= 1\n    size = [0] * (max_power + 1)\n    for i in range(max_power, -1, -1):\n        curr = sizes[i]\n        size[i] = curr\n        for j in range(max_power + 1):\n            sizes[j] -= curr\n    size_ans = 0\n    ways_ans = 1\n    for i in range(max_power + 1):\n        C = i + 1\n        size_ans += size[i] * ((C + 1) // 2)\n        if C % 2 == 0:\n            ways_ans *= pow(C // 2 + 1, size[i], 998244353)\n            ways_ans = ways_ans % 998244353\n    print(size_ans, ways_ans)\nfor _ in range(int(input())):\n    help()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    (t, tt, res, cnt) = (1, [], 0, 1)\n    while t <= n:\n        t *= k\n        v = n // t\n        v -= v // k\n        if tt:\n            tt[-1] -= v\n        tt.append(v)\n    for (i, v) in enumerate(tt):\n        res += (i + 2) // 2 * v\n        if i & 1 == 0:\n            cnt = cnt * pow((i + 2) // 2 + 1, v, 998244353) % 998244353\n    print(n - res, cnt)", "t = int(input())\nfor _ in range(t):\n    (N, M) = map(int, input().split())\n    total = 0\n    numways = 1\n    cont = True\n    e = 0\n    while cont:\n        high = N // M ** e\n        low = N // M ** (e + 1) + 1\n        num = high - low + 1\n        divs = num // M\n        if low + divs * M <= high:\n            r = (low + divs * M) % M\n            if r == 0 or r + (high - (low + divs * M)) >= M:\n                divs += 1\n        nondivs = num - divs\n        if e % 2 == 0:\n            total += nondivs * ((e + 2) // 2)\n        else:\n            total += nondivs * (e // 2 + 1)\n            numways = numways * pow((e + 3) // 2, nondivs, 998244353) % 998244353\n        e += 1\n        if low == 1:\n            cont = False\n    print(total, numways)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    t = 1\n    tt = []\n    while t <= n:\n        t *= k\n        v = n // t\n        v -= v // k\n        if tt:\n            tt[-1] -= v\n        tt.append(v)\n    (res, cnt) = (0, 1)\n    for (i, v) in enumerate(tt):\n        res += (i + 2) // 2 * v\n        if i & 1 == 0:\n            cnt = cnt * pow((i + 2) // 2 + 1, v, 998244353) % 998244353\n    print(n - res, cnt)", "def power(x, y):\n    p = 998244353\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\n\ndef func(a, b, m):\n    no = a % m\n    st = a\n    if no != 0:\n        st += m - no\n    val = (b - st) // m + 1\n    return b - a - val + 1\nfor _ in range(int(input())):\n    (n, m) = [int(i) for i in input().split()]\n    val = n\n    ct = m\n    flag = 1\n    while ct <= n:\n        val += (-1) ** flag * (n // ct)\n        ct *= m\n        flag ^= 1\n    ot = 1\n    ct = m\n    p1 = 2\n    while ct <= n:\n        v = func(n // (ct * m) + 1, n // ct, m)\n        ct *= m * m\n        ot *= power(p1, v)\n        p1 += 1\n    print(val, ot % 998244353)"]