["def solve(l, k):\n    s = [x for x in l]\n    n = len(s)\n    r = 0\n    if k == 1:\n        s0 = s[:]\n        r0 = r1 = 0\n        for (i, c) in enumerate(s):\n            if i % 2:\n                if c == '0':\n                    s0[i] = '1'\n                    r0 += 1\n            elif c == '1':\n                s0[i] = '0'\n                r0 += 1\n        s1 = s[:]\n        for (i, c) in enumerate(s):\n            if i % 2 == 0:\n                if c == '0':\n                    s1[i] = '1'\n                    r1 += 1\n            elif c == '1':\n                s1[i] = '0'\n                r1 += 1\n        if r0 < r1:\n            r = r0\n            s = s0\n        else:\n            r = r1\n            s = s1\n    else:\n        i = j = 0\n        while j < n:\n            while j < n and s[i] == s[j]:\n                j += 1\n            if j - i > k:\n                for l in range(i + k, j, k + 1):\n                    if l == j - 1:\n                        l -= 1\n                    s[l] = '0' if s[l] == '1' else '1'\n                    r += 1\n            i = j\n    print(r)\n    print(''.join(s))\nfor t in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    solve(input(), k)", "def is_prime(n):\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0:\n        return False\n    r = int(n ** 0.5)\n    f = 5\n    while f <= r:\n        if n % f == 0:\n            return False\n        if n % (f + 2) == 0:\n            return False\n        f += 6\n    return True\n\ndef decomp(n):\n    return [n] if n < 10 else decomp(n // 10) + [n % 10]\n\ndef compose(lst):\n    return 0 if len(lst) < 1 else lst[len(lst) - 1] + compose(lst[0:len(lst) - 1]) * 10\nn_test = int(input())\n\ndef find_next_chunk(bin_str, start_pos, k):\n    len_str = len(bin_str)\n    if start_pos >= len_str:\n        return (-1, -1)\n    cur_pos = start_pos\n    cur_val = bin_str[start_pos]\n    while cur_pos < len_str:\n        if bin_str[cur_pos] != cur_val:\n            if cur_pos - start_pos >= k:\n                return (start_pos, cur_pos - 1)\n            else:\n                start_pos = cur_pos\n                cur_val = bin_str[cur_pos]\n        cur_pos += 1\n    if cur_pos - start_pos >= k:\n        return (start_pos, cur_pos - 1)\n    else:\n        return (-1, -1)\n\ndef fill_chunk(bin_str, start_pos, end_pos, k):\n    count = 1\n    list_bin_str = list(bin_str)\n    if bin_str[start_pos] == '0':\n        val = '1'\n    else:\n        val = '0'\n    while end_pos - start_pos - k * count + 1 > 0:\n        list_bin_str[start_pos + k * count - 1] = val\n        count += 1\n    if end_pos - start_pos - k * count + 1 == 0:\n        list_bin_str[start_pos + k * (count - 1) + 1] = val\n        count += 1\n    return (count - 1, ''.join(list_bin_str))\n\ndef fill_chunk_zero_one(bin_str):\n    list_bin_str = list(bin_str)\n    len_str = len(bin_str)\n    one_first_count = 0\n    zero_first_count = 0\n    for k in range(len_str):\n        if k % 2 == 0:\n            if list_bin_str[k] == '0':\n                one_first_count += 1\n            else:\n                zero_first_count += 1\n        elif list_bin_str[k] == '1':\n            one_first_count += 1\n        else:\n            zero_first_count += 1\n    if one_first_count <= zero_first_count:\n        for k in range(len_str):\n            if k % 2 == 0:\n                list_bin_str[k] = '1'\n            else:\n                list_bin_str[k] = '0'\n        return (one_first_count, ''.join(list_bin_str))\n    else:\n        for k in range(len_str):\n            if k % 2 == 0:\n                list_bin_str[k] = '0'\n            else:\n                list_bin_str[k] = '1'\n        return (zero_first_count, ''.join(list_bin_str))\nfor t in range(n_test):\n    (n, k) = list(map(int, input().split()))\n    bin_str = input()\n    bin_str = bin_str[0:n]\n    n_cnt = 0\n    if k == 1:\n        (n_cnt, bin_str) = fill_chunk_zero_one(bin_str)\n    else:\n        start_pos = 0\n        while True:\n            (start_pos, end_pos) = find_next_chunk(bin_str, start_pos, k + 1)\n            if end_pos == -1:\n                break\n            (count, bin_str) = fill_chunk(bin_str, start_pos, end_pos, k + 1)\n            start_pos = end_pos + 1\n            n_cnt += count\n    print(n_cnt)\n    print(bin_str)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = input()\n    if k == 1:\n        cnt = 0\n        str1 = ''\n        str2 = ''\n        while cnt < n:\n            str1 += '0'\n            str2 += '1'\n            cnt += 1\n            if cnt == n:\n                break\n            str1 += '1'\n            str2 += '0'\n            cnt += 1\n        flip1 = 0\n        flip2 = 0\n        for j in range(n):\n            if a[j] != str1[j]:\n                flip1 += 1\n            if a[j] != str2[j]:\n                flip2 += 1\n        if flip1 < flip2:\n            print(flip1)\n            print(str1)\n        else:\n            print(flip2)\n            print(str2)\n    else:\n        flip = 0\n        con = 1\n        past = a[0]\n        for j in range(1, n, 1):\n            if a[j] == past:\n                con += 1\n            else:\n                con = 1\n            if con > k:\n                idx = j\n                if j + 1 < n and a[j] != a[j + 1]:\n                    idx = j - 1\n                temp = list(a)\n                if temp[idx] == '1':\n                    temp[idx] = '0'\n                else:\n                    temp[idx] = '1'\n                a = ''.join(temp)\n                con = 1\n                flip += 1\n            past = a[j]\n        print(flip)\n        print(a)", "t = int(input())\nfor i in range(t):\n    x = input().split()\n    n = int(x[0])\n    k = int(x[1])\n    y = [int(i) for i in input()]\n    z = [1 - i for i in y]\n    ck = 1\n    res = 0\n    last = 0\n    for i in range(len(y)):\n        c = y[i]\n        if i != 0:\n            if c == y[i - 1]:\n                ck += 1\n            else:\n                last = ck\n                ck = 1\n        if ck > k:\n            if i == len(y) - 1:\n                y[i] = 1 - y[i]\n            elif y[i] == 1 - y[i + 1] and (last < k or k > 1):\n                y[i - 1] = 1 - y[i - 1]\n                ck = 1\n                last = 1\n            else:\n                y[i] = 1 - y[i]\n                last = ck - 1\n                ck = 1\n            res += 1\n    s = ''\n    for i in y:\n        s += str(i)\n    res1 = 0\n    ck = 1\n    last = 0\n    for i in range(len(z)):\n        c = z[i]\n        if i != 0:\n            if c == z[i - 1]:\n                ck += 1\n            else:\n                last = ck\n                ck = 1\n        if ck > k:\n            if i == len(z) - 1:\n                z[i] = 1 - z[i]\n            elif z[i] == 1 - z[i + 1] and (last < k or k > 1):\n                z[i - 1] = 1 - z[i - 1]\n                ck = 1\n                last = 1\n            else:\n                z[i] = 1 - z[i]\n                last = ck - 1\n                ck = 1\n            res1 += 1\n    s1 = ''\n    for i in z:\n        s1 += str(i)\n    res1 = n - res1\n    if res1 < res:\n        print(res1)\n        print(s1)\n    else:\n        print(res)\n        print(s)"]