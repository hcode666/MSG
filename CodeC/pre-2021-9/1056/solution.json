["for i in range(int(input())):\n    (N, M) = list(map(int, input().split(' ')))\n    C = [list(map(int, input().split(' '))) for _ in range(N)]\n    D = [list(map(int, input().split(' '))) for _ in range(N)]\n    dp = [[0] * M for _ in range(N)]\n    for j in range(M):\n        dp[0][j] = C[0][j]\n    min_value = min(dp[0])\n    for i in range(1, N):\n        for j in range(M):\n            dp[i][j] = min(min_value + C[i][j], dp[i - 1][j] + max(0, C[i][j] - D[i - 1][j]))\n        min_value = min(dp[i])\n    print(min_value)", "for i in range(int(input())):\n    (N, M) = list(map(int, input().split(' ')))\n    C = [list(map(int, input().split(' '))) for _ in range(N)]\n    D = [list(map(int, input().split(' '))) for _ in range(N)]\n    dp = [[0] * M for _ in range(N)]\n    for j in range(M):\n        dp[0][j] = C[0][j]\n    min_value = min(dp[0])\n    for i in range(1, N):\n        for j in range(M):\n            dp[i][j] = min(min_value + C[i][j], dp[i - 1][j] + max(0, C[i][j] - D[i - 1][j]))\n        min_value = min(dp[i])\n    print(min_value)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    cost = []\n    for i in range(n):\n        e = list(map(int, input().split()))\n        cost.append(e)\n    disc = []\n    for i in range(n):\n        e = list(map(int, input().split()))\n        disc.append(e)\n    dp = [[0] * m for i in range(n)]\n    curmin = float('inf')\n    for j in range(m):\n        dp[0][j] = cost[0][j]\n        curmin = min(curmin, dp[0][j])\n    for i in range(1, n):\n        for j in range(m):\n            dp[i][j] = min(curmin + cost[i][j], dp[i - 1][j] + max(0, cost[i][j] - disc[i - 1][j]))\n        curmin = float('inf')\n        for j in range(m):\n            curmin = min(dp[i][j], curmin)\n    print(curmin)", "global ans\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    prices = []\n    for i in range(n):\n        prices.append(list(map(int, input().split())))\n    dis = []\n    for i in range(n):\n        dis.append(list(map(int, input().split())))\n    dp = [[0] * m for i in range(n)]\n    curmin = float('inf')\n    for j in range(m):\n        dp[0][j] = prices[0][j]\n        curmin = min(curmin, dp[0][j])\n    for i in range(1, n):\n        for j in range(m):\n            dp[i][j] = min(curmin + prices[i][j], dp[i - 1][j] + max(0, prices[i][j] - dis[i - 1][j]))\n        curmin = float('inf')\n        for j in range(m):\n            curmin = min(dp[i][j], curmin)\n    print(curmin)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    prices = [list(map(int, input().split())) for i in range(n)]\n    dis = [list(map(int, input().split())) for i in range(n)]\n    prev = min(prices[0][:])\n    for i in range(1, n):\n        cur_min = float('inf')\n        for j in range(m):\n            prices[i][j] = min(prev + prices[i][j], prices[i - 1][j] + max(0, prices[i][j] - dis[i - 1][j]))\n            cur_min = min(cur_min, prices[i][j])\n        prev = max(cur_min, 0)\n    print(min(prices[-1][:]))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    prices = [list(map(int, input().split())) for i in range(n)]\n    dis = [list(map(int, input().split())) for i in range(n)]\n    prev = min(prices[0][:])\n    for i in range(1, n):\n        cur_min = float('inf')\n        for j in range(m):\n            prices[i][j] = min(prev + prices[i][j], prices[i - 1][j] + max(0, prices[i][j] - dis[i - 1][j]))\n            cur_min = min(cur_min, prices[i][j])\n        prev = max(cur_min, 0)\n    print(min(prices[-1][:]))", "def helper(item, shop, discount):\n    if item == n:\n        return 0\n    elif dp[item][shop] != float('inf'):\n        return dp[item][shop]\n    else:\n        for i in range(m):\n            if shop == i:\n                dp[item][shop] = min(dp[item][shop], prices[item][shop] - discount + helper(item + 1, shop, discounts[item][shop]))\n            else:\n                dp[item][shop] = min(dp[item][shop], prices[item][i] + helper(item + 1, i, discounts[item][i]))\n        return dp[item][shop]\nt = int(input())\nwhile t:\n    (n, m) = list(map(int, input().split()))\n    prices = []\n    for i in range(n):\n        prices.append(list(map(int, input().split())))\n    discounts = []\n    for i in range(n):\n        discounts.append(list(map(int, input().split())))\n    dp = [[0 for i in range(m)] for j in range(n)]\n    mn = float('inf')\n    for j in range(m):\n        dp[0][j] = prices[0][j]\n        mn = min(mn, dp[0][j])\n    for i in range(1, n):\n        for j in range(m):\n            dp[i][j] = min(mn + prices[i][j], dp[i - 1][j] + max(0, prices[i][j] - discounts[i - 1][j]))\n        mn = min(dp[i])\n    print(mn)\n    t -= 1", "from sys import stdin, stdout\nfrom sys import maxsize\n\ndef solve():\n    pass\ntest = 1\ntest = int(input())\nfor t in range(0, test):\n    (n, m) = list(map(int, input().split()))\n    brr = [list(map(int, input().split())) for i in range(n)]\n    drr = [list(map(int, input().split())) for i in range(n)]\n    dp = [[0] * m for j in range(n)]\n    dp[0] = brr[0]\n    for i in range(1, n):\n        v1 = min(dp[i - 1])\n        ind = dp[i - 1].index(v1)\n        for j in range(m):\n            if j != ind:\n                dp[i][j] = min(v1 + brr[i][j], dp[i - 1][j] + max(0, brr[i][j] - drr[i - 1][j]))\n            else:\n                dp[i][j] = dp[i - 1][j] + max(0, brr[i][j] - drr[i - 1][j])\n    print(min(dp[n - 1]))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    mat = []\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        mat.append(temp)\n    dis = []\n    for i in range(n):\n        dis.append(list(map(int, input().split())))\n    for i in range(1, n):\n        minPrev = min(mat[i - 1])\n        for j in range(m):\n            dp = max(0, mat[i][j] - dis[i - 1][j])\n            mat[i][j] = min(mat[i - 1][j] + dp, mat[i][j] + minPrev)\n    print(min(mat[n - 1]))", "t = int(input())\nfor l in range(t):\n    (n, m) = list(map(int, input().split()))\n    price = [list(map(int, input().split())) for x in range(n)]\n    discount = [list(map(int, input().split())) for x in range(n)]\n    ans = [[0] * m for x in range(n)]\n    for i in range(n):\n        curr_min = 100000000000000\n        for j in range(m):\n            if i == 0:\n                ans[i][j] = price[i][j]\n            else:\n                cost1 = price[i][j] + prev_min\n                cost2 = max(0, price[i][j] - discount[i - 1][j]) + ans[i - 1][j]\n                ans[i][j] = min(cost1, cost2)\n            curr_min = min(ans[i][j], curr_min)\n        prev_min = curr_min\n    print(curr_min)", "def main():\n    test_case = int(input())\n    for itr in range(test_case):\n        (item, shop) = map(int, input().split())\n        costMatrix = []\n        discountMatrix = []\n        for itr_s in range(item):\n            costMatrix.append(list(map(int, input().split())))\n        for itr_s in range(item):\n            discountMatrix.append(list(map(int, input().split())))\n        print(solve(shop, item, costMatrix, discountMatrix))\n\ndef solve(shop, item, costMatrix, discountMatrix):\n    ans = -1\n    for i in range(item):\n        tempminval = -1\n        for j in range(shop):\n            if i == 0:\n                costMatrix[i][j] = costMatrix[i][j]\n            else:\n                minval = costMatrix[i - 1][j] + discount(costMatrix[i][j], discountMatrix[i - 1][j])\n                if j == 0:\n                    for it in range(shop):\n                        tempval = costMatrix[i - 1][it]\n                        if tempval < tempminval or tempminval == -1:\n                            tempminval = tempval\n                minval = min(minval, costMatrix[i][j] + tempminval)\n                costMatrix[i][j] = minval\n            if i == item - 1:\n                ans = costMatrix[i][j] if ans == -1 or ans > costMatrix[i][j] else ans\n    return ans\n\ndef discount(cost, discount):\n    return cost - discount if cost > discount else 0\nmain()", "for t in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    prices = []\n    discounts = []\n    for i in range(n):\n        price = list(map(int, input().split(' ')))\n        prices.append(price)\n    for i in range(n):\n        discount = list(map(int, input().split(' ')))\n        discounts.append(discount)\n    table = [[0 for i in range(m)] for j in range(n)]\n    for i in range(m):\n        table[0][i] = prices[0][i]\n    value = 0\n    for i in range(1, n):\n        value = min(table[i - 1])\n        for j in range(m):\n            temp = max(0, prices[i][j] - discounts[i - 1][j])\n            table[i][j] = min(temp + table[i - 1][j], prices[i][j] + value)\n    print(min(table[n - 1]))", "t = int(input())\nINF = 10 ** 20\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    (price, discount) = ([], [])\n    for i in range(n):\n        price.append([])\n        discount.append([])\n    for i in range(n):\n        l = list(map(int, input().split()))\n        price[i] = l\n    for i in range(n):\n        l = list(map(int, input().split()))\n        discount[i] = l\n    dp = [[0] * m] * n\n    ans = min(price[0])\n    for i in range(m):\n        val = price[0][i]\n        dp[0][i] = val\n    for i in range(1, n):\n        ans2 = INF\n        for j in range(m):\n            val = price[i][j] - discount[i - 1][j] if price[i][j] - discount[i - 1][j] >= 0 else 0\n            dp[i][j] = min(dp[i - 1][j] + val, ans + price[i][j])\n            ans2 = min(ans2, dp[i][j])\n        ans = ans2\n    M = dp[n - 1][0]\n    for r in dp:\n        x = min(r)\n        M = min(x, M)\n    print(M)\n    t -= 1", "t = int(input())\nfor T in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    (cost, disc, dp) = ([], [], [])\n    for i in range(n):\n        cost.append([int(x) for x in input().split()])\n    for i in range(n):\n        disc.append([int(x) for x in input().split()])\n    val = 0\n    dp = [[0 for j in range(m)] for i in range(n)]\n    for i in range(m):\n        dp[0][i] = cost[0][i]\n    for i in range(1, n):\n        val = min(dp[i - 1])\n        for j in range(m):\n            v1 = max(0, cost[i][j] - disc[i - 1][j])\n            dp[i][j] = min(dp[i - 1][j] + v1, val + cost[i][j])\n    print(min(dp[n - 1]))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    prices = []\n    for j in range(n):\n        arr = [int(k) for k in input().split()]\n        prices += [arr]\n    discounts = []\n    for j in range(n):\n        arr = [int(k) for k in input().split()]\n        discounts += [arr]\n    dp = [[[-1] * 2 for j in range(m)] for j in range(n)]\n    mi = 10 ** 10\n    prevmi = 10 ** 10\n    prevprevmi = 10 ** 10\n    for x in range(m):\n        for z in range(2):\n            dp[0][x][z] = prices[0][x]\n            if prices[0][x] <= mi:\n                prevprevmi = prevmi\n                prevmi = mi\n                mi = prices[0][x]\n            elif prices[0][x] > mi and prices[0][x] <= prevmi:\n                prevprevmi = prevmi\n                prevmi = prices[0][x]\n            elif prices[0][x] > prevmi and prices[0][x] <= prevprevmi:\n                prevprevmi = prices[0][x]\n    for x in range(1, n):\n        mi2 = 10 ** 15\n        prevmi2 = 10 ** 15\n        prevprevmi2 = 10 ** 15\n        for y in range(m):\n            discprice = prices[x][y] - discounts[x - 1][y]\n            if discprice < 0:\n                discprice = 0\n            dp[x][y][1] = min(dp[x - 1][y][0], dp[x - 1][y][1]) + discprice\n            if dp[x][y][1] <= mi2:\n                prevprevmi2 = prevmi2\n                prevmi2 = mi2\n                mi2 = dp[x][y][1]\n            elif dp[x][y][1] > mi2 and dp[x][y][1] <= prevmi2:\n                prevprevmi2 = prevmi2\n                prevmi2 = dp[x][y][1]\n            elif dp[x][y][1] > prevmi2 and dp[x][y][1] <= prevprevmi2:\n                prevprevmi2 = dp[x][y][1]\n            if sorted([dp[x - 1][y][0], dp[x - 1][y][1]]) == [mi, prevmi]:\n                dp[x][y][0] = prevprevmi + prices[x][y]\n            elif dp[x - 1][y][0] == mi or dp[x - 1][y][1] == mi:\n                dp[x][y][0] = prevmi + prices[x][y]\n            else:\n                dp[x][y][0] = mi + prices[x][y]\n            if dp[x][y][0] <= mi2:\n                prevprevmi2 = prevmi2\n                prevmi2 = mi2\n                mi2 = dp[x][y][0]\n            elif dp[x][y][0] > mi2 and dp[x][y][0] <= prevmi2:\n                prevprevmi2 = prevmi2\n                prevmi2 = dp[x][y][0]\n            elif dp[x][y][0] > prevmi2 and dp[x][y][0] <= prevprevmi2:\n                prevprevmi2 = dp[x][y][0]\n        prevprevmi = prevprevmi2\n        prevmi = prevmi2\n        mi = mi2\n    print(mi)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    prices = []\n    for j in range(n):\n        arr = [int(k) for k in input().split()]\n        prices += [arr]\n    discounts = []\n    for j in range(n):\n        arr = [int(k) for k in input().split()]\n        discounts += [arr]\n    dp = [[[-1] * 2 for j in range(m)] for j in range(n)]\n    mi = 10 ** 10\n    prevmi = 10 ** 10\n    prevprevmi = 10 ** 10\n    for x in range(m):\n        for z in range(2):\n            dp[0][x][z] = prices[0][x]\n            if prices[0][x] <= mi:\n                prevprevmi = prevmi\n                prevmi = mi\n                mi = prices[0][x]\n            elif prices[0][x] > mi and prices[0][x] <= prevmi:\n                prevprevmi = prevmi\n                prevmi = prices[0][x]\n            elif prices[0][x] > prevmi and prices[0][x] <= prevprevmi:\n                prevprevmi = prices[0][x]\n    for x in range(1, n):\n        mi2 = 10 ** 15\n        prevmi2 = 10 ** 15\n        prevprevmi2 = 10 ** 15\n        for y in range(m):\n            discprice = prices[x][y] - discounts[x - 1][y]\n            if discprice < 0:\n                discprice = 0\n            dp[x][y][1] = min(dp[x - 1][y][0], dp[x - 1][y][1]) + discprice\n            if dp[x][y][1] <= mi2:\n                prevprevmi2 = prevmi2\n                prevmi2 = mi2\n                mi2 = dp[x][y][1]\n            elif dp[x][y][1] > mi2 and dp[x][y][1] <= prevmi2:\n                prevprevmi2 = prevmi2\n                prevmi2 = dp[x][y][1]\n            elif dp[x][y][1] > prevmi2 and dp[x][y][1] <= prevprevmi2:\n                prevprevmi2 = dp[x][y][1]\n            if (dp[x - 1][y][0], dp[x - 1][y][1]) == (mi, prevmi) or (dp[x - 1][y][0], dp[x - 1][y][1]) == (prevmi, mi):\n                dp[x][y][0] = prevprevmi + prices[x][y]\n            elif dp[x - 1][y][0] == mi and dp[x - 1][y][1] != prevmi or (dp[x - 1][y][1] == mi and dp[x - 1][y][0] != prevmi):\n                dp[x][y][0] = prevmi + prices[x][y]\n            else:\n                dp[x][y][0] = mi + prices[x][y]\n            if dp[x][y][0] <= mi2:\n                prevprevmi2 = prevmi2\n                prevmi2 = mi2\n                mi2 = dp[x][y][0]\n            elif dp[x][y][0] > mi2 and dp[x][y][0] <= prevmi2:\n                prevprevmi2 = prevmi2\n                prevmi2 = dp[x][y][0]\n            elif dp[x][y][0] > prevmi2 and dp[x][y][0] <= prevprevmi2:\n                prevprevmi2 = dp[x][y][0]\n        prevprevmi = prevprevmi2\n        prevmi = prevmi2\n        mi = mi2\n    print(mi)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    cost = [list(map(int, input().split())) for i in range(n)]\n    disc = [list(map(int, input().split())) for i in range(n)]\n    dp = [[0 for j in range(m)] for i in range(n)]\n    for i in range(m):\n        dp[0][i] = cost[0][i]\n    for i in range(1, n):\n        prev = min(dp[i - 1])\n        for j in range(m):\n            d = max(0, cost[i][j] - disc[i - 1][j])\n            dp[i][j] = min(dp[i - 1][j] + d, prev + cost[i][j])\n    print(min(dp[n - 1]))", "import sys\ndata = [int(i) for i in sys.stdin.read().split()]\ndata.reverse()\n\ndef read():\n    return data.pop()\nT = read()\nfor test in range(T):\n    (n, m) = (read(), read())\n    P = [[read() for j in range(m)] for i in range(n)]\n    D = [[read() for j in range(m)] for i in range(n)]\n    DP = [[[0 for k in range(2)] for j in range(m)] for i in range(n + 1)]\n    mn = 0\n    for i in range(n - 1, -1, -1):\n        cnt = 10 ** 18\n        for j in range(m):\n            toAdd = min(mn, DP[i + 1][j][1])\n            DP[i][j][0] = toAdd + P[i][j]\n            if i:\n                DP[i][j][1] = toAdd + max(0, P[i][j] - D[i - 1][j])\n            cnt = min(cnt, DP[i][j][0])\n        mn = cnt\n    print(mn)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    pri = [list(map(int, input().split())) for x in range(n)]\n    dis = [list(map(int, input().split())) for x in range(n)]\n    a = [[0] * m for x in range(n)]\n    a[0] = pri[0][:]\n    min1 = min(pri[0])\n    for j in range(1, n):\n        min2 = 10000000000000.0\n        for k in range(m):\n            di = max(0, pri[j][k] - dis[j - 1][k])\n            a[j][k] = min(min1 + pri[j][k], a[j - 1][k] + di)\n            min2 = min(min2, a[j][k])\n        min1 = min2\n    print(min(a[n - 1]))", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split(' ')))\n    cst = list()\n    for _ in range(n):\n        cst.append(list(map(int, input().split(' '))))\n    dsc = list()\n    for _ in range(n):\n        dsc.append(list(map(int, input().split(' '))))\n    dp = list()\n    dp.append(cst[0][:])\n    for _ in range(n - 1):\n        dp.append([0 for x in range(m)])\n    for i in range(1, n):\n        mn = min(dp[i - 1][:])\n        for j in range(m):\n            h = cst[i][j] - dsc[i - 1][j]\n            if h < 0:\n                h = 0\n            dp[i][j] = min(mn + cst[i][j], dp[i - 1][j] + h)\n    print(min(dp[n - 1][:]))", "mod = 1000000007\ninf = mod\n\ndef solve(n, m, dp, discounts, prices):\n    prev = inf * inf\n    for i in range(m):\n        dp[0][i] = prices[0][i]\n        prev = min(prev, dp[0][i])\n    for i in range(1, n):\n        prev2 = inf * inf\n        for j in range(m):\n            d = max(0, prices[i][j] - discounts[i - 1][j])\n            dp[i][j] = dp[i - 1][j] + d\n            dp[i][j] = min(dp[i][j], prev + prices[i][j])\n            prev2 = min(prev2, dp[i][j])\n        prev = prev2\n    return min(dp[n - 1])\ntests = int(input())\nfor _ in range(tests):\n    (n, m) = map(int, input().split())\n    prices = []\n    dp = []\n    discounts = []\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        temp2 = [0] * m\n        dp.append(temp2)\n        prices.append(temp)\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        discounts.append(temp)\n    print(solve(n, m, dp, discounts, prices))"]