["t = int(input())\nfor _ in range(t):\n    r = input()\n    c = input()\n    m = len(r) + 1\n    n = len(c) + 1\n    a = {}\n    if r[0] == '0' or c[0] == '0':\n        a[1 * 1000000 + 1] = '1'\n    else:\n        a[1 * 1000000 + 1] = '0'\n    for i in range(2, m):\n        if r[i - 1] == '0' or a[1 * 1000000 + i - 1] == '0':\n            a[1 * 1000000 + i] = '1'\n        else:\n            a[1 * 1000000 + i] = '0'\n    for i in range(2, n):\n        if c[i - 1] == '0' or a[(i - 1) * 1000000 + 1] == '0':\n            a[i * 1000000 + 1] = '1'\n        else:\n            a[i * 1000000 + 1] = '0'\n    for i in range(2, min(n, 5)):\n        for j in range(2, m):\n            if a[(i - 1) * 1000000 + j] == '0' or a[i * 1000000 + j - 1] == '0':\n                a[i * 1000000 + j] = '1'\n            else:\n                a[i * 1000000 + j] = '0'\n    for i in range(2, n):\n        for j in range(2, min(m, 5)):\n            if a[(i - 1) * 1000000 + j] == '0' or a[i * 1000000 + j - 1] == '0':\n                a[i * 1000000 + j] = '1'\n            else:\n                a[i * 1000000 + j] = '0'\n    q = int(input())\n    s = ''\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        if x < 5 or y < 5:\n            s = s + a[x * 1000000 + y]\n        elif x == y:\n            s = s + a[4 * 1000000 + 4]\n        elif x > y:\n            s = s + a[(x - (y - 4)) * 1000000 + 4]\n        else:\n            s = s + a[4 * 1000000 + y - (x - 4)]\n    print(s)", "t = int(input())\nfor _ in range(t):\n    r = input()\n    c = input()\n    m = len(r) + 1\n    n = len(c) + 1\n    a = {}\n    if r[0] == '0' or c[0] == '0':\n        a[1 * 1000000 + 1] = '1'\n    else:\n        a[1 * 1000000 + 1] = '0'\n    for i in range(2, m):\n        if r[i - 1] == '0' or a[1 * 1000000 + i - 1] == '0':\n            a[1 * 1000000 + i] = '1'\n        else:\n            a[1 * 1000000 + i] = '0'\n    for i in range(2, n):\n        if c[i - 1] == '0' or a[(i - 1) * 1000000 + 1] == '0':\n            a[i * 1000000 + 1] = '1'\n        else:\n            a[i * 1000000 + 1] = '0'\n    for i in range(2, min(n, 5)):\n        for j in range(2, m):\n            if a[(i - 1) * 1000000 + j] == '0' or a[i * 1000000 + j - 1] == '0':\n                a[i * 1000000 + j] = '1'\n            else:\n                a[i * 1000000 + j] = '0'\n    for i in range(2, n):\n        for j in range(2, min(m, 5)):\n            if a[(i - 1) * 1000000 + j] == '0' or a[i * 1000000 + j - 1] == '0':\n                a[i * 1000000 + j] = '1'\n            else:\n                a[i * 1000000 + j] = '0'\n    q = int(input())\n    s = ''\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        if x < 5 or y < 5:\n            s = s + a[x * 1000000 + y]\n        elif x == y:\n            s = s + a[4 * 1000000 + 4]\n        elif x > y:\n            s = s + a[(x - (y - 4)) * 1000000 + 4]\n        else:\n            s = s + a[4 * 1000000 + y - (x - 4)]\n    print(s)", "t = int(input())\nfor _ in range(t):\n    r = input()\n    c = input()\n    m = len(r) + 1\n    n = len(c) + 1\n    a = {}\n    if r[0] == '0' or c[0] == '0':\n        a[1 * 1000000 + 1] = '1'\n    else:\n        a[1 * 1000000 + 1] = '0'\n    for i in range(2, m):\n        if r[i - 1] == '0' or a[1 * 1000000 + i - 1] == '0':\n            a[1 * 1000000 + i] = '1'\n        else:\n            a[1 * 1000000 + i] = '0'\n    for i in range(2, n):\n        if c[i - 1] == '0' or a[(i - 1) * 1000000 + 1] == '0':\n            a[i * 1000000 + 1] = '1'\n        else:\n            a[i * 1000000 + 1] = '0'\n    for i in range(2, min(n, 5)):\n        for j in range(2, m):\n            if a[(i - 1) * 1000000 + j] == '0' or a[i * 1000000 + j - 1] == '0':\n                a[i * 1000000 + j] = '1'\n            else:\n                a[i * 1000000 + j] = '0'\n    for i in range(2, n):\n        for j in range(2, min(m, 5)):\n            if a[(i - 1) * 1000000 + j] == '0' or a[i * 1000000 + j - 1] == '0':\n                a[i * 1000000 + j] = '1'\n            else:\n                a[i * 1000000 + j] = '0'\n    q = int(input())\n    s = ''\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        if x < 5 or y < 5:\n            s = s + a[x * 1000000 + y]\n        elif x == y:\n            s = s + a[4 * 1000000 + 4]\n        elif x > y:\n            s = s + a[(x - (y - 4)) * 1000000 + 4]\n        else:\n            s = s + a[4 * 1000000 + y - (x - 4)]\n    print(s)", "t = int(input())\nfrom sys import stdin, stdout\nfor _ in range(t):\n    dd = []\n    r = list(map(int, list(input().strip())))\n    c = list(map(int, list(input().strip())))\n    for i in range(len(c)):\n        if i <= 1:\n            t = c[i]\n            r[0] = int(not (r[0] and t))\n            for j in range(1, len(r)):\n                r[j] = int(not (r[j - 1] and r[j]))\n            dd.append(list(r))\n        else:\n            r = r[:2]\n            t = c[i]\n            r[0] = int(not (r[0] and t))\n            for j in range(1, 2):\n                r[j] = int(not (r[j - 1] and r[j]))\n            dd.append(list(r))\n    q = int(input())\n    for _ in range(q):\n        (u, v) = map(int, stdin.readline().strip().split(' '))\n        if u <= 2 or v <= 2:\n            stdout.write(str(dd[u - 1][v - 1]))\n        elif u == v:\n            stdout.write(str(dd[1][1]))\n        else:\n            stdout.write(str(dd[u - (min(u, v) - 2) - 1][v - (min(u, v) - 2) - 1]))\n    print()", "for t in range(int(input())):\n    top = list(map(int, list(input().strip())))\n    left = list(map(int, list(input().strip())))\n    row0 = [not top[0] or not left[0]]\n    for i in range(1, len(top)):\n        row0.append(not top[i] or not row0[-1])\n    if len(left) > 1:\n        row1 = [not row0[0] or not left[1]]\n        for i in range(1, len(top)):\n            row1.append(not row0[i] or not row1[-1])\n    col0 = [not left[0] or not top[0]]\n    for i in range(1, len(left)):\n        col0.append(not left[i] or not col0[-1])\n    if len(top) > 1:\n        col1 = [not col0[0] or not top[1]]\n        for i in range(1, len(left)):\n            col1.append(not col0[i] or not col1[-1])\n    ans = []\n    for q in range(int(input())):\n        (x, y) = map(int, input().split())\n        (x, y) = (x - 1, y - 1)\n        if x == 0:\n            res = row0[y]\n        elif y == 0:\n            res = col0[x]\n        elif x <= y:\n            res = row1[y - (x - 1)]\n        else:\n            res = col1[x - (y - 1)]\n        ans.append(int(res))\n    print(*ans, sep='')", "import sys\nfor _ in range(int(input())):\n    m = input()\n    n = input()\n    a = [[None] * min(len(n), 3) for _ in range(len(m))]\n    b = [[None] * len(n) for _ in range(min(len(m), 3))]\n    s = set()\n    a[0][0] = b[0][0] = m[0] == '0' or n[0] == '0'\n    if not a[0][0]:\n        s.add(0)\n    for i in range(1, len(m)):\n        a[i][0] = m[i] == '0' or not a[i - 1][0]\n        if not a[i][0]:\n            s.add(i)\n    for i in range(1, min(len(n), 3)):\n        a[0][i] = n[i] == '0' or not a[0][i - 1]\n        if not a[0][i]:\n            s.add(-i)\n    for i in range(1, len(m)):\n        for j in range(1, min(len(n), 3)):\n            a[i][j] = not a[i - 1][j] or not a[i][j - 1]\n            if not a[i][j]:\n                s.add(i - j)\n    for i in range(1, len(n)):\n        b[0][i] = n[i] == '0' or not b[0][i - 1]\n        if not b[0][i]:\n            s.add(-i)\n    for i in range(1, min(len(m), 3)):\n        b[i][0] = m[i] == '0' or not b[i - 1][0]\n        if not b[i][0]:\n            s.add(i)\n    for i in range(1, min(len(m), 3)):\n        for j in range(1, len(n)):\n            b[i][j] = not b[i - 1][j] or not b[i][j - 1]\n            if not b[i][j]:\n                s.add(i - j)\n    for _ in range(int(input())):\n        (x, y) = map(int, input().split())\n        if x <= min(len(n), 3):\n            v = '1' if a[y - 1][x - 1] else '0'\n        elif y <= min(len(m), 3):\n            v = '1' if b[y - 1][x - 1] else '0'\n        else:\n            v = '0' if y - x in s else '1'\n        sys.stdout.write(v)\n    print('')", "for _ in range(int(input())):\n    c = input()\n    r = input()\n    a = []\n    b = []\n    x = []\n    d = []\n    op = ''\n    if r[0] == '0' or c[0] == '0':\n        a.append('1')\n    elif r[0] == '1' and c[0] == '1':\n        a.append('0')\n    for i in range(1, len(c)):\n        if c[i] == '0':\n            a.append('1')\n        elif c[i] == '1' and a[i - 1] == '1':\n            a.append('0')\n        elif c[i] == '1' and a[i - 1] == '0':\n            a.append('1')\n    x.append(a[0])\n    for i in range(1, len(r)):\n        if r[i] == '0':\n            x.append('1')\n        elif r[i] == '1' and x[i - 1] == '1':\n            x.append('0')\n        elif r[i] == '1' and x[i - 1] == '0':\n            x.append('1')\n    if len(r) > 1:\n        for i in range(0, len(a)):\n            if i == 0:\n                b.append(x[1])\n            elif a[i] == b[i - 1] == '1':\n                b.append('0')\n            else:\n                b.append('1')\n    if len(c) > 1:\n        for i in range(0, len(r)):\n            if i == 0:\n                d.append(a[1])\n            elif x[i] == d[i - 1] == '1':\n                d.append('0')\n            else:\n                d.append('1')\n    q = int(input())\n    for _ in range(q):\n        (p, t) = [int(i) for i in input().split()]\n        if p == 1 and t != 1:\n            op += a[t - 1]\n        elif p == t == 1:\n            op += a[0]\n        elif t == 1 and p != 1:\n            op += x[p - 1]\n        elif p == 2:\n            op += b[t - 1]\n        elif t == 2 and p != 2:\n            op += d[p - 1]\n        elif t > 2 and p > 2:\n            if p > t:\n                diff = t - 2\n                ans = p - diff\n                op += d[ans - 1]\n            elif p < t:\n                diff = p - 2\n                ans = t - diff\n                op += b[ans - 1]\n            else:\n                op += b[1]\n    print(op)", "for _ in range(int(input())):\n    c = input()\n    r = input()\n    a = []\n    b = []\n    x = []\n    d = []\n    op = ''\n    if r[0] == '0' or c[0] == '0':\n        a.append('1')\n    elif r[0] == '1' and c[0] == '1':\n        a.append('0')\n    for i in range(1, len(c)):\n        if c[i] == '0':\n            a.append('1')\n        elif c[i] == '1' and a[i - 1] == '1':\n            a.append('0')\n        elif c[i] == '1' and a[i - 1] == '0':\n            a.append('1')\n    x.append(a[0])\n    for i in range(1, len(r)):\n        if r[i] == '0':\n            x.append('1')\n        elif r[i] == '1' and x[i - 1] == '1':\n            x.append('0')\n        elif r[i] == '1' and x[i - 1] == '0':\n            x.append('1')\n    if len(r) > 1:\n        for i in range(0, len(a)):\n            if i == 0:\n                b.append(x[1])\n            elif a[i] == b[i - 1] == '1':\n                b.append('0')\n            else:\n                b.append('1')\n    if len(c) > 1:\n        for i in range(0, len(r)):\n            if i == 0:\n                d.append(a[1])\n            elif x[i] == d[i - 1] == '1':\n                d.append('0')\n            else:\n                d.append('1')\n    q = int(input())\n    for _ in range(q):\n        (p, t) = [int(i) for i in input().split()]\n        if p == 1 and t != 1:\n            op += a[t - 1]\n        elif p == t == 1:\n            op += a[0]\n        elif t == 1 and p != 1:\n            op += x[p - 1]\n        elif p == 2:\n            op += b[t - 1]\n        elif t == 2 and p != 2:\n            op += d[p - 1]\n        elif t > 2 and p > 2:\n            if p > t:\n                diff = t - 2\n                ans = p - diff\n                op += d[ans - 1]\n            elif p < t:\n                diff = p - 2\n                ans = t - diff\n                op += b[ans - 1]\n            else:\n                op += b[1]\n    print(op)", "def special(m, n):\n    if m == '0' or n == '0':\n        return '1'\n    return '0'\nfor j in range(int(input())):\n    m = input()\n    n = input()\n    solm = special(m[0], n[0])\n    soln = special(m[0], n[0])\n    for i in range(1, len(m)):\n        solm += special(solm[i - 1], m[i])\n    for i in range(1, len(n)):\n        soln += special(soln[i - 1], n[i])\n    if len(m) > 1 and len(n) > 1:\n        solm_next = special(solm[1], soln[1])\n        soln_next = special(solm[1], soln[1])\n        for i in range(1, len(m) - 1):\n            solm_next += special(solm_next[i - 1], solm[i + 1])\n        for i in range(1, len(n) - 1):\n            soln_next += special(soln_next[i - 1], soln[i + 1])\n    q = ''\n    for qweqw in range(int(input())):\n        (x, y) = map(int, input().split())\n        if x == 1:\n            q += solm[y - 1]\n        elif y == 1:\n            q += soln[x - 1]\n        elif x == y:\n            q += solm_next[0]\n        elif x > y:\n            q += soln_next[x - y]\n        elif y > x:\n            q += solm_next[y - x]\n    print(q)", "def special(m, n):\n    if m == '0' or n == '0':\n        return '1'\n    return '0'\nfor j in range(int(input())):\n    m = input()\n    n = input()\n    solm = special(m[0], n[0])\n    soln = special(m[0], n[0])\n    for i in range(1, len(m)):\n        solm += special(solm[i - 1], m[i])\n    for i in range(1, len(n)):\n        soln += special(soln[i - 1], n[i])\n    if len(m) > 1 and len(n) > 1:\n        solm_next = special(solm[1], soln[1])\n        soln_next = special(solm[1], soln[1])\n        for i in range(1, len(m) - 1):\n            solm_next += special(solm_next[i - 1], solm[i + 1])\n        for i in range(1, len(n) - 1):\n            soln_next += special(soln_next[i - 1], soln[i + 1])\n    q = ''\n    for qweqw in range(int(input())):\n        (x, y) = map(int, input().split())\n        if x == 1:\n            q += solm[y - 1]\n        elif y == 1:\n            q += soln[x - 1]\n        elif x == y:\n            q += solm_next[0]\n        elif x > y:\n            q += soln_next[x - y]\n        elif y > x:\n            q += solm_next[y - x]\n    print(q)", "def solve():\n    for _ in range(int(input())):\n        top = input()\n        left = input()\n        table = [['W' for i in range(len(top) + 1)] for j in range(4)]\n        table_left = [['W' for i in range(len(left) + 1)] for j in range(4)]\n        for i in range(len(left)):\n            if left[i] == '1':\n                table_left[0][i + 1] = 'L'\n        for i in range(len(top)):\n            if top[i] == '1':\n                table[0][i + 1] = 'L'\n                if i < min(3, len(left)):\n                    table_left[i + 1][0] = 'L'\n        for i in range(1, min(4, len(left) + 1)):\n            for j in range(1, len(top) + 1):\n                if j == 1:\n                    if table[i - 1][j] == 'L' and left[i - 1] == '1':\n                        table[i][j] = '0'\n                        continue\n                    if left[i - 1] == '0' or table[i - 1][j] == 'W':\n                        table[i][j] = '1'\n                        continue\n                    if table[i - 1][j] == 'L' and left[i - 1] == '1':\n                        table[i][j] = '0'\n                        continue\n                    if left[i - 1] == '1':\n                        table[i][j] = '0' if table[i - 1][j] == '1' else '1'\n                        continue\n                    if table[i - 1][j] == 'L':\n                        table[i][j] = '0' if left[i - 1] == '1' else '1'\n                        continue\n                if table[i - 1][j] == 'L' and table[i][j - 1] == 'L':\n                    table[i][j] = '0'\n                    continue\n                if table[i][j - 1] == '1' and table[i - 1][j] == '1':\n                    table[i][j] = '0'\n                    continue\n                if table[i][j - 1] == 'W' or table[i - 1][j] == 'W':\n                    table[i][j] = '1'\n                    continue\n                if table[i][j - 1] == '0' or table[i - 1][j] == '0':\n                    table[i][j] = '1'\n                    continue\n                if table[i][j - 1] == 'L':\n                    table[i][j] = '0' if table[i - 1][j] == '1' else '1'\n                    continue\n                if table[i - 1][j] == 'L':\n                    table[i][j] = '0' if table[i][j - 1] == '1' else '1'\n                    continue\n                if left[i - 1] == '0' or table[i - 1][j] == 'W':\n                    table[i][j] = '1'\n                    continue\n        for i in range(1, min(4, len(top) + 1)):\n            for j in range(1, len(left) + 1):\n                if j == 1:\n                    if table_left[i - 1][j] == 'L' and top[i - 1] == '1':\n                        table_left[i][j] = '0'\n                        continue\n                    if top[i - 1] == '0' or table_left[i - 1][j] == 'W':\n                        table_left[i][j] = '1'\n                        continue\n                    if table_left[i - 1][j] == 'L' and top[i - 1] == '1':\n                        table_left[i][j] = '0'\n                        continue\n                    if i == 1 and left[i - 1] == '1':\n                        table_left[i][j] = '0' if table_left[i - 1][j] == '1' else '1'\n                        continue\n                    if table_left[i - 1][j] == 'L':\n                        table_left[i][j] = '0' if left[i - 1] == '1' else '1'\n                        continue\n                if table_left[i - 1][j] == 'L' and table_left[i][j - 1] == 'L':\n                    table_left[i][j] = '0'\n                    continue\n                if table_left[i][j - 1] == '1' and table_left[i - 1][j] == '1':\n                    table_left[i][j] = '0'\n                    continue\n                if table_left[i][j - 1] == 'W' or table_left[i - 1][j] == 'W':\n                    table_left[i][j] = '1'\n                    continue\n                if table_left[i][j - 1] == '0' or table_left[i - 1][j] == '0':\n                    table_left[i][j] = '1'\n                    continue\n                if table_left[i][j - 1] == 'L':\n                    table_left[i][j] = '0' if table_left[i - 1][j] == '1' else '1'\n                    continue\n                if table_left[i - 1][j] == 'L':\n                    table_left[i][j] = '0' if table_left[i][j - 1] == '1' else '1'\n                    continue\n        res = []\n        for _ in range(int(input())):\n            (x, y) = input().split()\n            (x, y) = (int(x), int(y))\n            if min(x, y) < 4:\n                if x > y:\n                    r = table_left[y][x]\n                else:\n                    r = table[x][y]\n                res.append(r)\n                continue\n            k = 2 if min(x, y) > 2 else 1\n            if x > y:\n                r = table_left[k][x - y + k]\n            else:\n                r = table[k][y - x + k]\n            res.append(r)\n        print(''.join(res))\nsolve()", "for _ in range(int(input())):\n    c = input()\n    r = input()\n    a = []\n    b = []\n    x = []\n    d = []\n    op = ''\n    if r[0] == '0' or c[0] == '0':\n        a.append('1')\n    elif r[0] == '1' and c[0] == '1':\n        a.append('0')\n    for i in range(1, len(c)):\n        if c[i] == '0':\n            a.append('1')\n        elif c[i] == '1' and a[i - 1] == '1':\n            a.append('0')\n        elif c[i] == '1' and a[i - 1] == '0':\n            a.append('1')\n    x.append(a[0])\n    for i in range(1, len(r)):\n        if r[i] == '0':\n            x.append('1')\n        elif r[i] == '1' and x[i - 1] == '1':\n            x.append('0')\n        elif r[i] == '1' and x[i - 1] == '0':\n            x.append('1')\n    if len(r) > 1:\n        for i in range(0, len(a)):\n            if i == 0:\n                b.append(x[1])\n            elif a[i] == b[i - 1] == '1':\n                b.append('0')\n            else:\n                b.append('1')\n    if len(c) > 1:\n        for i in range(0, len(r)):\n            if i == 0:\n                d.append(a[1])\n            elif x[i] == d[i - 1] == '1':\n                d.append('0')\n            else:\n                d.append('1')\n    q = int(input())\n    for _ in range(q):\n        (p, t) = [int(i) for i in input().split()]\n        if p == 1 and t != 1:\n            op += a[t - 1]\n        elif p == t == 1:\n            op += a[0]\n        elif t == 1 and p != 1:\n            op += x[p - 1]\n        elif p == 2:\n            op += b[t - 1]\n        elif t == 2 and p != 2:\n            op += d[p - 1]\n        elif t > 2 and p > 2:\n            if p > t:\n                diff = t - 2\n                ans = p - diff\n                op += d[ans - 1]\n            elif p < t:\n                diff = p - 2\n                ans = t - diff\n                op += b[ans - 1]\n            else:\n                op += b[1]\n    print(op)", "for _ in range(int(input())):\n    c = input()\n    r = input()\n    a = []\n    b = []\n    x = []\n    d = []\n    op = ''\n    if r[0] == '0' or c[0] == '0':\n        a.append('1')\n    elif r[0] == '1' and c[0] == '1':\n        a.append('0')\n    for i in range(1, len(c)):\n        if c[i] == '0':\n            a.append('1')\n        elif c[i] == '1' and a[i - 1] == '1':\n            a.append('0')\n        elif c[i] == '1' and a[i - 1] == '0':\n            a.append('1')\n    x.append(a[0])\n    for i in range(1, len(r)):\n        if r[i] == '0':\n            x.append('1')\n        elif r[i] == '1' and x[i - 1] == '1':\n            x.append('0')\n        elif r[i] == '1' and x[i - 1] == '0':\n            x.append('1')\n    if len(r) > 1:\n        for i in range(0, len(a)):\n            if i == 0:\n                b.append(x[1])\n            elif a[i] == b[i - 1] == '1':\n                b.append('0')\n            else:\n                b.append('1')\n    if len(c) > 1:\n        for i in range(0, len(r)):\n            if i == 0:\n                d.append(a[1])\n            elif x[i] == d[i - 1] == '1':\n                d.append('0')\n            else:\n                d.append('1')\n    q = int(input())\n    for _ in range(q):\n        (p, t) = [int(i) for i in input().split()]\n        if p == 1 and t != 1:\n            op += a[t - 1]\n        elif p == t == 1:\n            op += a[0]\n        elif t == 1 and p != 1:\n            op += x[p - 1]\n        elif p == 2:\n            op += b[t - 1]\n        elif t == 2 and p != 2:\n            op += d[p - 1]\n        elif t > 2 and p > 2:\n            if p > t:\n                diff = t - 2\n                ans = p - diff\n                op += d[ans - 1]\n            elif p < t:\n                diff = p - 2\n                ans = t - diff\n                op += b[ans - 1]\n            else:\n                op += b[1]\n    print(op)", "for _ in range(int(input())):\n    column = input()\n    r = input()\n    a = []\n    b = []\n    x = []\n    d = []\n    op = []\n    if r[0] == '0' or column[0] == '0':\n        a.append('1')\n    elif r[0] == '1' and column[0] == '1':\n        a.append('0')\n    for i in range(1, len(column)):\n        if column[i] == '0':\n            a.append('1')\n        elif column[i] == '1' and a[i - 1] == '1':\n            a.append('0')\n        elif column[i] == '1' and a[i - 1] == '0':\n            a.append('1')\n    x.append(a[0])\n    for i in range(1, len(r)):\n        if r[i] == '0' or x[i - 1] == '0':\n            x.append('1')\n        else:\n            x.append('0')\n    if len(r) > 1:\n        for i in range(0, len(a)):\n            if i == 0:\n                b.append(x[1])\n            elif a[i] == b[i - 1] == '1':\n                b.append('0')\n            else:\n                b.append('1')\n    if len(column) > 1:\n        for i in range(0, len(r)):\n            if i == 0:\n                d.append(a[1])\n            elif x[i] == d[i - 1] == '1':\n                d.append('0')\n            else:\n                d.append('1')\n    q = int(input())\n    for _ in range(q):\n        (p, t) = [int(i) for i in input().split()]\n        if p == 1:\n            op.append(a[t - 1])\n        elif t == 1 and p != 1:\n            op.append(x[p - 1])\n        elif p == 2 and t != 2:\n            op.append(b[t - 1])\n        elif p == 2 and t == 2:\n            op.append(b[1])\n        elif t == 2 and p != 2:\n            op.append(d[p - 1])\n        elif t > 2 and p > 2:\n            if p > t:\n                diff = t - 2\n                ans = p - diff\n                op.append(d[ans - 1])\n            elif p < t:\n                diff = p - 2\n                ans = t - diff\n                op.append(b[ans - 1])\n            else:\n                op.append(b[1])\n    print(''.join((str(e) for e in op)))", "def nand(a, b):\n    if a == '1' and b == '1':\n        return '0'\n    else:\n        return '1'\nt = int(input())\nwhile t > 0:\n    row = str(input())\n    col = str(input())\n    q = int(input())\n    m = len(col)\n    n = len(row)\n    ans = ''\n    row1 = ['0' for i in range(0, n)]\n    row2 = ['0' for i in range(0, n)]\n    col1 = ['0' for i in range(0, m)]\n    col2 = ['0' for i in range(0, m)]\n    if m == 1:\n        col = col + '1'\n    if n == 1:\n        row = row + '1'\n    row1[0] = nand(row[0], col[0])\n    row2[0] = nand(row1[0], col[1])\n    for i in range(1, n):\n        row1[i] = nand(row[i], row1[i - 1])\n        row2[i] = nand(row1[i], row2[i - 1])\n    col1[0] = row1[0]\n    col2[0] = row1[1]\n    for i in range(1, m):\n        col1[i] = nand(col1[i - 1], col[i])\n        col2[i] = nand(col2[i - 1], col1[i])\n    for k in range(0, q):\n        (i, j) = map(int, input().split())\n        if i == 1:\n            ans = ans + row1[j - 1]\n        elif i == 2:\n            ans = ans + row2[j - 1]\n        elif j == 1:\n            ans = ans + col1[i - 1]\n        elif j == 2:\n            ans = ans + col2[i - 1]\n        elif i == j:\n            ans = ans + row2[1]\n        elif i < j:\n            ans = ans + row2[j - i + 1]\n        elif j < i:\n            ans = ans + col2[i - j + 1]\n    print(ans)\n    t = t - 1", "MOD = 10 ** 9 + 7\nI = lambda : list(map(int, input().split()))\n(t,) = I()\nwhile t:\n    t -= 1\n    ms = input()\n    ns = input()\n    n = len(ns)\n    m = len(ms)\n    table = [[0 for i in range(m + 1)] for j in range(min(3, n + 1))]\n    table[0][0] = 1 if ms[0] == '0' or ns[0] == '0' else 0\n    col = [[0 for i in range(min(3, m + 1))] for j in range(n + 1)]\n    col[0][0] = 1 if ms[0] == '0' or ns[0] == '0' else 0\n    i = 1\n    winner = 0\n    while i < m:\n        if ms[i] == '0':\n            table[0][i] = 1\n        else:\n            winner = 1 if table[0][i - 1] == 0 else 0\n            table[0][i] = winner\n        i += 1\n    i = 1\n    while i < n:\n        if ns[i] == '0':\n            col[i][0] = 1\n        else:\n            winner = 1 if col[i - 1][0] == 0 else 0\n            col[i][0] = winner\n        i += 1\n    if n >= 2 and m >= 2:\n        table[1][1] = col[1][1] = 0 if table[0][1] and col[1][0] else 1\n    for j in range(2, m + 1):\n        if table[0][j] == 1 and table[1][j - 1] == 1:\n            table[1][j] = 0\n        else:\n            table[1][j] = 1\n    for j in range(2, n + 1):\n        if col[j][0] == 1 and col[j - 1][1] == 1:\n            col[j][1] = 0\n        else:\n            col[j][1] = 1\n    (q,) = I()\n    s = ''\n    while q:\n        q -= 1\n        (x, y) = I()\n        if x == y == 1:\n            s += str(table[0][0])\n            continue\n        elif x == 1:\n            s += str(table[0][y - 1])\n            continue\n        elif y == 1:\n            s += str(col[x - 1][0])\n            continue\n        k = min(x, y) - 1\n        x -= k\n        y -= k\n        if y < x:\n            s += str(col[x][y])\n        else:\n            s += str(table[x][y])\n    print(s)", "def nand(a, b):\n    if not (a and b) == True:\n        return 1\n    elif not (a and b) == False:\n        return 0\n\ndef rec(val, lm, dic):\n    if val in dic.keys():\n        return dic[val]\n    else:\n        dic[val] = nand(rec(val - 1, lm, dic), rec(val - 1 - lm, lm, dic))\n        return dic[val]\n\ndef findvalue(r, c, new, nm, lm):\n    step = 0\n    if r == 1:\n        return new[c]\n    elif c == 1:\n        return new[lm + r - 1]\n    if r > c:\n        step = c - 2\n        (r, c) = (r - step, 2)\n    else:\n        step = r - 2\n        (r, c) = (2, c - step)\n    if r == 2:\n        pos = c - 1\n    elif c == 2:\n        pos = lm - 1 + r - 2\n    return inner[pos]\nfor qwerty in range(int(input())):\n    m = input()\n    n = input()\n    lm = len(m)\n    ln = len(n)\n    try:\n        table = []\n        nm = []\n        nm.append(-1)\n        for i in range(1, lm + 1):\n            nm.append(int(m[i - 1]))\n        for i in range(lm + 1, lm + ln + 1):\n            nm.append(int(n[i - lm - 1]))\n        for i in range(2 * (lm + ln)):\n            table.append(-1)\n        for i in range(1, 1 + lm):\n            table[i] = int(m[i - 1])\n        table[lm + 1] = int(n[0])\n        table[2 * lm + 2] = int(n[1])\n        k = 2\n        for i in range(1, ln - 1):\n            if table[2 * lm + 2 + k] == -1:\n                table[2 * lm + 2 + k] = int(n[i + 1])\n            k = k + 2\n        count = 0\n        new = [-1]\n        for i in range(lm, len(table)):\n            if table[i] == -1:\n                if count > lm:\n                    table[i] = nand(table[i - 1], table[i - 2])\n                    new.append(table[i])\n                else:\n                    table[i] = nand(table[i - 1], table[i - 1 - lm])\n                    new.append(table[i])\n                count = count + 1\n        inner = [-1]\n        for i in range(ln + lm - 3):\n            inner.append(-1)\n        inner[1] = nand(new[2], new[lm + 1])\n        if len(inner) > lm:\n            inner[lm] = nand(inner[1], new[lm + 2])\n        for i in range(2, lm):\n            if inner[i] == -1:\n                inner[i] = nand(new[i + 1], inner[i - 1])\n        for i in range(lm, len(inner)):\n            if inner[i] == -1:\n                inner[i] = nand(new[i + 2], inner[i - 1])\n        q = int(input())\n        answer = []\n        for j in range(q):\n            (r, c) = list(map(int, input().split(' ')))\n            value = findvalue(r, c, new, nm, lm)\n            answer.append(value)\n        answer = ''.join(list(map(str, answer)))\n        print(str(answer))\n    except:\n        dic = {}\n        table = []\n        for i in range(1, lm + 1):\n            dic[i] = int(m[i - 1])\n        for i in range(1, ln + 1):\n            dic[i * lm + i] = int(n[i - 1])\n        q = int(input())\n        answer = []\n        for j in range(q):\n            (r, c) = list(map(int, input().split(' ')))\n            pos = r * lm + r + c\n            value1 = rec(pos - 1, lm, dic)\n            value2 = rec(pos - 1 - lm, lm, dic)\n            if value1 == 0 or value2 == 0:\n                answer.append(1)\n            else:\n                answer.append(0)\n        answer = ''.join(list(map(str, answer)))\n        print(str(answer))", "I = lambda : list(map(int, list(input())))\nfrom sys import stdin, stdout\nfor _ in range(int(input())):\n    a = I()\n    b = I()\n    c = [int(not (b[0] and a[0]))]\n    d = [int(not (b[0] and a[0]))]\n    for i in range(1, len(a)):\n        c.append(int(not (a[i] and c[i - 1])))\n    for i in range(1, len(b)):\n        d.append(int(not (b[i] and d[i - 1])))\n    if len(a) > 1 and len(b) > 1:\n        e = [d[1], int(not (c[1] and d[1]))]\n        f = [c[1], int(not (c[1] and d[1]))]\n        for i in range(2, len(a)):\n            e.append(int(not (c[i] and e[-1])))\n        for i in range(2, len(b)):\n            f.append(int(not (d[i] and f[-1])))\n    for i in range(int(input())):\n        (x, y) = map(int, input().split())\n        if x != 1 and x == y:\n            print(e[1], end='')\n        elif x != 1 and y != 1 and (x > y):\n            print(f[x - y + 1], end='')\n        elif x != 1 and y != 1 and (y > x):\n            print(e[y - x + 1], end='')\n        elif x == 1 and y > x:\n            print(c[y - 1], end='')\n        elif y == 1 and x > y:\n            print(d[x - 1], end='')\n        else:\n            print(c[0], end='')\n    print('')", "for t in range(int(input())):\n    a = input()\n    b = input()\n    m = len(a)\n    n = len(b)\n    board = ['' for i in range(n + 1)]\n    board[0] = '1' + a\n    for i in range(1, n + 1):\n        board[i] = b[i - 1]\n    for j in range(1, m + 1):\n        board[1] += str(1 - (int(board[0][j]) & int(board[1][j - 1])))\n        if n > 1:\n            board[2] += str(1 - (int(board[1][j]) & int(board[2][j - 1])))\n    for i in range(3, n + 1):\n        board[i] = b[i - 1] + str(1 - (int(board[i][0]) & int(board[i - 1][1])))\n        if m > 1:\n            board[i] += str(1 - (int(board[i][1]) & int(board[i - 1][2])))\n    q = int(input())\n    for Q in range(q):\n        (x, y) = map(int, input().split())\n        if x > 2 and y > 2:\n            if x < y:\n                print(board[2][y - (x - 2)], end='')\n            else:\n                print(board[x - (y - 2)][2], end='')\n        else:\n            print(board[x][y], end='')\n    print()", "t = int(input())\nres = []\nfor _ in range(t):\n    r = []\n    N = list(map(int, list(input())))\n    M = list(map(int, list(input())))\n    n = len(N)\n    m = len(M)\n    Y = [1 for j in range(m + 1)]\n    A = [Y.copy() for i in range(3)] + [[1 for j in range(3)] for i in range(n + 1 - 3)]\n    A[0] = ['_'] + M\n    for i in zip(A[1:], N):\n        i[0][0] = i[1]\n    for k in range(1, min(n, m, 2) + 1):\n        for i in range(k, n + 1):\n            if A[i - 1][k] and A[i][k - 1]:\n                A[i][k] = 0\n        for j in range(k + 1, m + 1):\n            if A[k - 1][j] and A[k][j - 1]:\n                A[k][j] = 0\n    q = int(input())\n    for i in range(q):\n        (qj, qi) = map(int, input().split())\n        if qi > 2 and qj > 2:\n            if qi > qj:\n                (x, y) = (qi - qj + 2, 2)\n            else:\n                (x, y) = (2, qj - qi + 2)\n        else:\n            (x, y) = (qi, qj)\n        r.append(str(A[x][y]))\n    res.append(''.join(r))\nfor i in res:\n    print(i)", "t = int(input())\nres = []\nfor _ in range(t):\n    r = []\n    N = list(map(int, list(input())))\n    M = list(map(int, list(input())))\n    n = len(N)\n    m = len(M)\n    Y = [1 for j in range(m + 1)]\n    A = [Y.copy() for i in range(3)] + [[1 for j in range(3)] for i in range(n + 1 - 3)]\n    A[0] = ['_'] + M\n    for i in zip(A[1:], N):\n        i[0][0] = i[1]\n    for k in range(1, min(n, m, 2) + 1):\n        for i in range(k, n + 1):\n            if A[i - 1][k] and A[i][k - 1]:\n                A[i][k] = 0\n        for j in range(k + 1, m + 1):\n            if A[k - 1][j] and A[k][j - 1]:\n                A[k][j] = 0\n    q = int(input())\n    for i in range(q):\n        (qj, qi) = map(int, input().split())\n        if qi > 2 and qj > 2:\n            if qi > qj:\n                (x, y) = (qi - qj + 2, 2)\n            else:\n                (x, y) = (2, qj - qi + 2)\n        else:\n            (x, y) = (qi, qj)\n        r.append(str(A[x][y]))\n    res.append(''.join(r))\nfor i in res:\n    print(i)", "def NAND(a, b):\n    if a == 1 and b == 1:\n        return 0\n    return 1\nimport numpy as np\nfor i in range(int(input())):\n    m = list(input())\n    n = list(input())\n    l = np.full((min(2, len(n)), len(m)), -1)\n    l_ = np.full((len(n), min(2, len(m))), -1)\n    for j in range(min(2, len(n))):\n        for k in range(len(m)):\n            if j == 0 and k == 0:\n                l[j][k] = NAND(int(m[k]), int(n[j]))\n            elif j == 0:\n                l[j][k] = NAND(int(m[k]), l[j][k - 1])\n            elif k == 0:\n                l[j][k] = NAND(int(n[j]), l[j - 1][k])\n            else:\n                l[j][k] = NAND(l[j - 1][k], l[j][k - 1])\n    for j in range(len(n)):\n        for k in range(min(2, len(m))):\n            if j == 0 and k == 0:\n                l_[j][k] = NAND(int(m[k]), int(n[j]))\n            elif j == 0:\n                l_[j][k] = NAND(int(m[k]), l_[j][k - 1])\n            elif k == 0:\n                l_[j][k] = NAND(int(n[j]), l_[j - 1][k])\n            else:\n                l_[j][k] = NAND(l_[j - 1][k], l_[j][k - 1])\n    s = ''\n    for j in range(int(input())):\n        (x, y) = map(int, input().split())\n        if x == 1:\n            s += str(l[0][y - 1])\n        elif y == 1:\n            s += str(l_[x - 1][0])\n        elif x > y:\n            s += str(l_[x - y + 1][1])\n        else:\n            s += str(l[1][y - x + 1])\n    print(s)", "from sys import stdin, stdout\nfor _ in range(int(input())):\n    a = list(map(int, list(input())))\n    b = list(map(int, list(input())))\n    a1 = [int(not (b[0] and a[0]))]\n    b1 = [int(not (b[0] and a[0]))]\n    for i in range(1, len(a)):\n        a1.append(int(not (a[i] and a1[-1])))\n    for i in range(1, len(b)):\n        b1.append(int(not (b[i] and b1[-1])))\n    if len(a) > 1 and len(b) > 1:\n        a2 = [b1[1], int(not (a1[1] and b1[1]))]\n        b2 = [a1[1], int(not (a1[1] and b1[1]))]\n        for i in range(2, len(a)):\n            a2.append(int(not (a1[i] and a2[-1])))\n        for i in range(2, len(b)):\n            b2.append(int(not (b1[i] and b2[-1])))\n    for i in range(int(input())):\n        (x, y) = map(int, input().split())\n        if x != 1 and x == y:\n            print(a2[1], end='')\n        elif x != 1 and y != 1 and (x > y):\n            print(b2[x - y + 1], end='')\n        elif x != 1 and y != 1 and (y > x):\n            print(a2[y - x + 1], end='')\n        elif x == 1 and y > x:\n            print(a1[y - 1], end='')\n        elif y == 1 and x > y:\n            print(b1[x - 1], end='')\n        else:\n            print(a1[0], end='')\n    print('')", "T = int(input())\nfor t in range(T):\n    Y = input()\n    M = len(Y)\n    X = input()\n    N = len(X)\n    Q = int(input())\n    board = [['-']]\n    for y in Y:\n        board.append(list(y))\n    for y in X:\n        board[0].append(y)\n    t = min(3, M + 1)\n    for j in range(1, t):\n        for i in range(1, N + 1):\n            if board[j - 1][i] == '0' or board[j][i - 1] == '0':\n                board[j].append('1')\n            else:\n                board[j].append('0')\n    t = min(3, N + 1)\n    for j in range(t, M + 1):\n        for i in range(1, t):\n            if board[j - 1][i] == '0' or board[j][i - 1] == '0':\n                board[j].append('1')\n            else:\n                board[j].append('0')\n    ans = ''\n    for i in range(Q):\n        (x, y) = [int(x) for x in input().split()]\n        if x > 2 and y > 2:\n            temp = min(x, y)\n            x = x - temp + 2\n            y = y - temp + 2\n        ans = ans + board[y][x]\n    print(ans)", "def transform(string, start):\n    temp = int(start)\n    result = str(int(not temp & int(string[0])))\n    i = 1\n    while i < len(string):\n        result += str(int(not int(string[i]) & int(result[-1])))\n        i += 1\n    return result\nT = int(input())\nfor _ in range(T):\n    row = []\n    col = []\n    row.append(input())\n    col.append(input())\n    if len(row[0]) != 1 and len(col[0]) != 1:\n        row.append(transform(row[0], col[0][0]))\n        col.append(transform(col[0], row[0][0]))\n        row.append(transform(row[1], col[0][1]))\n        col.append(transform(col[1], row[0][1]))\n        Q = int(input())\n        for i in range(Q):\n            (r, c) = map(int, input().split())\n            if r == 1 or c == 1:\n                if r == 1:\n                    print(row[1][c - 1], end='')\n                else:\n                    print(col[1][r - 1], end='')\n            elif r < c:\n                print(row[2][abs(r - c) + 1], end='')\n            else:\n                print(col[2][abs(r - c) + 1], end='')\n        print()\n    else:\n        f = row[0]\n        s = col[0]\n        matrix = []\n        for i in range(len(s) + 1):\n            matrix.append([])\n            for j in range(len(f) + 1):\n                matrix[-1].append(0)\n        for i in range(len(f)):\n            matrix[0][i + 1] = int(f[i])\n        for i in range(len(s)):\n            matrix[i + 1][0] = int(s[i])\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(f) + 1):\n                matrix[i][j] = int(not (matrix[i - 1][j] and matrix[i][j - 1]))\n        Q = int(input())\n        for _ in range(Q):\n            (i, j) = map(int, input().split())\n            print(matrix[i][j], end='')\n        print()", "for _ in range(int(input())):\n    m = [int(i) for i in input()]\n    n = [int(i) for i in input()]\n    res = []\n    row = []\n    col = []\n    row2 = []\n    col2 = []\n    lm = len(m)\n    ln = len(n)\n    if m[0] == 0 or n[0] == 0:\n        row.append(1)\n        col.append(1)\n    else:\n        row.append(0)\n        col.append(0)\n    for i in range(1, lm):\n        if m[i] == 0 or row[i - 1] == 0:\n            row.append(1)\n        else:\n            row.append(0)\n    for i in range(1, ln):\n        if n[i] == 0 or col[i - 1] == 0:\n            col.append(1)\n        else:\n            col.append(0)\n    if ln > 1 and lm > 1:\n        if row[1] == 0 or col[1] == 0:\n            row2.append(1)\n            col2.append(1)\n        else:\n            row2.append(0)\n            col2.append(0)\n        for i in range(1, lm - 1):\n            if row[i + 1] == 0 or row2[i - 1] == 0:\n                row2.append(1)\n            else:\n                row2.append(0)\n        for i in range(1, ln - 1):\n            if col[i + 1] == 0 or col2[i - 1] == 0:\n                col2.append(1)\n            else:\n                col2.append(0)\n    q = int(input())\n    for x in range(q):\n        (i, j) = map(int, input().split())\n        if i < 3 or j < 3:\n            if i == j:\n                if i == 1:\n                    res.append(row[0])\n                elif i == 2:\n                    res.append(row2[0])\n            elif i < j:\n                if i == 1:\n                    res.append(row[j - 1])\n                elif i == 2:\n                    res.append(row2[j - 2])\n            elif i > j:\n                if j == 1:\n                    res.append(col[i - 1])\n                elif j == 2:\n                    res.append(col2[i - 2])\n        elif i == j:\n            res.append(row2[0])\n        elif i < j:\n            res.append(row2[j - i])\n        elif i > j:\n            res.append(col2[i - j])\n    for k in range(len(res)):\n        print(res[k], end='')\n    print()", "for _ in range(int(input())):\n    m = input().strip()\n    n = input().strip()\n    q = int(input())\n    nl = len(n)\n    ml = len(m)\n    arh1 = [None for i in range(ml + 1)]\n    arh1[0] = n[0]\n    if nl > 1:\n        arh2 = [None for i in range(ml + 1)]\n        arh2[0] = n[1]\n    for i in range(1, ml + 1):\n        if arh1[i - 1] == '0' or m[i - 1] == '0':\n            arh1[i] = '1'\n        else:\n            arh1[i] = '0'\n        if nl > 1:\n            if arh2[i - 1] == '0' or arh1[i] == '0':\n                arh2[i] = '1'\n            else:\n                arh2[i] = '0'\n    arv1 = [None for i in range(nl + 1)]\n    arv1[0] = m[0]\n    if ml > 1:\n        arv2 = [None for i in range(nl + 1)]\n        arv2[0] = m[1]\n    for i in range(1, nl + 1):\n        if arv1[i - 1] == '0' or n[i - 1] == '0':\n            arv1[i] = '1'\n        else:\n            arv1[i] = '0'\n        if ml > 1:\n            if arv2[i - 1] == '0' or arv1[i] == '0':\n                arv2[i] = '1'\n            else:\n                arv2[i] = '0'\n    ans = ''\n    for k in range(q):\n        (x, y) = map(int, input().split())\n        if x == 1 or y == 1:\n            if x == 1:\n                ans += arh1[y]\n            else:\n                ans += arv1[x]\n        elif x < y:\n            k = x - 2\n            ans += arh2[y - k]\n        else:\n            k = y - 2\n            ans += arv2[x - k]\n    print(ans)", "def mat1():\n    global horiz\n    horiz = ''\n    ar1 = []\n    ar1.append(['0'] + [r for r in s1])\n    for i in range(0, 2):\n        lw = []\n        el = s2[i]\n        sm = ''\n        lw.append(el)\n        for j in range(0, l1):\n            if i == 0:\n                if j == 0:\n                    if s1[j] == '1' and el == '1':\n                        lw.append('1')\n                        last = '1'\n                        sm += last\n                    else:\n                        lw.append('0')\n                        last = '0'\n                        sm += last\n                elif s1[j] == '1' and last == '0':\n                    lw.append('1')\n                    last = '1'\n                    sm += last\n                else:\n                    lw.append('0')\n                    last = '0'\n                    sm += last\n            elif j == 0:\n                if chk[j] == '0' and el == '1':\n                    lw.append('1')\n                    last = '1'\n                    sm += last\n                else:\n                    lw.append('0')\n                    last = '0'\n                    sm += last\n            elif chk[j] == '0' and last == '0':\n                lw.append('1')\n                last = '1'\n                sm += last\n            else:\n                lw.append('0')\n                last = '0'\n                sm += last\n        chk = sm\n        ar1.append(lw)\n    horiz = chk[1:]\n    return ar1\n\ndef mat2():\n    global vert\n    vert = ''\n    ar2 = []\n    temp_var = ''\n    for i in range(0, l2):\n        lw = []\n        el = s2[i]\n        sm = ''\n        lw.append(el)\n        for j in range(0, 2):\n            if i == 0:\n                if j == 0:\n                    if s1[j] == '1' and el == '1':\n                        lw.append('1')\n                        last = '1'\n                        sm += last\n                    else:\n                        lw.append('0')\n                        last = '0'\n                        sm += last\n                elif s1[j] == '1' and last == '0':\n                    lw.append('1')\n                    last = '1'\n                    sm += last\n                else:\n                    lw.append('0')\n                    last = '0'\n                    sm += last\n            elif j == 0:\n                if chk[j] == '0' and el == '1':\n                    lw.append('1')\n                    last = '1'\n                    sm += last\n                else:\n                    lw.append('0')\n                    last = '0'\n                    sm += last\n            elif chk[j] == '0' and last == '0':\n                lw.append('1')\n                last = '1'\n                sm += last\n            else:\n                lw.append('0')\n                last = '0'\n                sm += last\n            if j == 1:\n                temp_var += last\n        chk = sm\n        ar2.append(lw)\n    vert = temp_var[1:]\n    return ar2\nfor _ in range(0, int(input())):\n    s1 = input()\n    s2 = input()\n    (l1, l2) = (len(s1), len(s2))\n    horiz = ''\n    vert = ''\n    out = ''\n    if l1 >= 2 and l2 >= 2:\n        hor_ar = mat1()\n        ver_ar = mat2()\n        for q in range(0, int(input())):\n            (x, y) = input().split()\n            (x, y) = (int(x), int(y))\n            if x > 2 and y > 2:\n                if x > y:\n                    el_chk = vert[x - y]\n                elif x < y:\n                    el_chk = horiz[y - x]\n                else:\n                    el_chk = horiz[0]\n            elif x > 2 and y <= 2:\n                el_chk = ver_ar[x - 1][y]\n            elif y > 2 and x <= 2:\n                el_chk = hor_ar[x][y]\n            else:\n                el_chk = hor_ar[x][y]\n            if el_chk == '0':\n                out += '1'\n            else:\n                out += '0'\n        print(out)\n    else:\n        ar = [[]]\n        ar[0] = ['0'] + [r for r in s1]\n        for i in range(0, l2):\n            lw = []\n            el = s2[i]\n            sm = ''\n            lw.append(el)\n            for j in range(0, l1):\n                if i == 0:\n                    if j == 0:\n                        if s1[j] == '1' and el == '1':\n                            lw.append('1')\n                            last = '1'\n                            sm += last\n                        else:\n                            lw.append('0')\n                            last = '0'\n                            sm += last\n                    elif s1[j] == '1' and last == '0':\n                        lw.append('1')\n                        last = '1'\n                        sm += last\n                    else:\n                        lw.append('0')\n                        last = '0'\n                        sm += last\n                elif j == 0:\n                    if chk[j] == '0' and el == '1':\n                        lw.append('1')\n                        last = '1'\n                        sm += last\n                    else:\n                        lw.append('0')\n                        last = '0'\n                        sm += last\n                elif chk[j] == '0' and last == '0':\n                    lw.append('1')\n                    last = '1'\n                    sm += last\n                else:\n                    lw.append('0')\n                    last = '0'\n                    sm += last\n            chk = sm\n            ar.append(lw)\n        for q in range(0, int(input())):\n            (x, y) = input().split()\n            (x, y) = (int(x), int(y))\n            if ar[x][y] == '0':\n                out += '1'\n            else:\n                out += '0'\n        print(out)", "tc = int(input())\nwhile tc != 0:\n    a = input()\n    b = input()\n    n = int(input())\n    a = list(map(int, a))\n    b = list(map(int, b))\n    cu = b[0]\n    cr = a[0]\n    nuL = []\n    nrL = []\n    lst = []\n    for i in range(0, len(a)):\n        if a[i] == 1 and cu == 1:\n            cu = 0\n            nuL.append(cu)\n        else:\n            cu = 1\n            nuL.append(cu)\n    for i in range(0, len(b)):\n        if b[i] == 1 and cr == 1:\n            cr = 0\n            nrL.append(cr)\n        else:\n            cr = 1\n            nrL.append(cr)\n    if len(nrL) > 1:\n        nuL1 = []\n        cu1 = nrL[1]\n        for i in range(1, len(a)):\n            if nuL[i] == 1 and cu1 == 1:\n                cu1 = 0\n                nuL1.append(cu1)\n            else:\n                cu1 = 1\n                nuL1.append(cu1)\n    if len(nuL) > 1:\n        nrL1 = []\n        cr1 = nuL[1]\n        for i in range(1, len(b)):\n            if nrL[i] == 1 and cr1 == 1:\n                cr1 = 0\n                nrL1.append(cr1)\n            else:\n                cr1 = 1\n                nrL1.append(cr1)\n    for i in range(0, n):\n        case = input().split()\n        case = list(map(int, case))\n        p = case[0]\n        t = case[1]\n        if p == 1 or t == 1:\n            if p == t:\n                lst.append(nuL[0])\n                continue\n            if p < t:\n                lst.append(nuL[t - p])\n            if p > t:\n                lst.append(nrL[p - t])\n        else:\n            if p <= t:\n                lst.append(nuL1[t - p])\n            if p > t:\n                lst.append(nrL1[p - t])\n    lst = list(map(str, lst))\n    print(''.join(lst))\n    tc -= 1", "t = int(input())\nfor _ in range(t):\n    s1 = input()\n    s2 = input()\n    query = int(input())\n    arr = []\n    s = ''\n    arr.append([])\n    arr[0].append(1)\n    for i in s1:\n        arr[0].append(int(i))\n    for i in range(len(s2)):\n        arr.append([])\n        arr[i + 1].append(int(s2[i]))\n    if arr[0][1] == 0 or arr[1][0] == 0:\n        arr[1].append(0)\n    else:\n        arr[1].append(1)\n    for i in range(2, len(s1) + 1):\n        if arr[0][i] == 0 or arr[1][i - 1] == 1:\n            arr[1].append(0)\n        else:\n            arr[1].append(1)\n    for i in range(2, len(s2) + 1):\n        if arr[i][0] == 0 or arr[i - 1][1] == 1:\n            arr[i].append(0)\n        else:\n            arr[i].append(1)\n    if len(s1) >= 2 and len(s2) >= 2:\n        if arr[1][2] == 1 or arr[2][1] == 1:\n            arr[2].append(0)\n        else:\n            arr[2].append(1)\n    try:\n        for i in range(3, len(s1) + 1):\n            if arr[1][i] == 1 or arr[2][i - 1] == 1:\n                arr[2].append(0)\n            else:\n                arr[2].append(1)\n        for i in range(3, len(s2) + 1):\n            if arr[i][1] == 1 or arr[i - 1][2] == 1:\n                arr[i].append(0)\n            else:\n                arr[i].append(1)\n    except Exception:\n        pass\n    try:\n        for i in range(query):\n            (a, b) = list(map(int, input().split()))\n            if min(a, b) > 2:\n                if a > b:\n                    (a, b) = (a - (b - 2), 2)\n                else:\n                    (a, b) = (2, b - (a - 2))\n            if arr[a][b] == 0:\n                s += '1'\n            else:\n                s += '0'\n    except Exception:\n        pass\n    print(s)", "for _ in range(int(input())):\n    xm = input()\n    yn = input()\n    m = len(xm)\n    n = len(yn)\n    q = int(input())\n    mat = []\n    if m <= 2 or n <= 2:\n        for i in range(n + 2):\n            x = []\n            for j in range(m + 2):\n                x.append(0)\n            mat.append(x)\n        try:\n            for i in range(1, m + 1):\n                mat[0][i] = int(xm[i - 1])\n            for i in range(1, n + 1):\n                mat[i][0] = int(yn[i - 1])\n        except IndexError:\n            print('pass 1')\n            pass\n        try:\n            for i in range(1, m + 1):\n                if i == 1:\n                    if mat[0][1] == 0 or mat[1][0] == 0:\n                        mat[1][1] = 'a'\n                    else:\n                        mat[1][1] = 'b'\n                elif mat[0][i] == 0:\n                    mat[1][i] = 'a'\n                elif mat[1][i - 1] == 'a':\n                    mat[1][i] = 'b'\n                else:\n                    mat[1][i] = 'a'\n        except IndexError:\n            print('pass 2')\n            pass\n        try:\n            for i in range(2, n + 1):\n                if mat[i][0] == 0:\n                    mat[i][1] = 'a'\n                elif mat[i - 1][1] == 'a':\n                    mat[i][1] = 'b'\n                else:\n                    mat[i][1] = 'a'\n        except IndexError:\n            print('pass 3')\n            pass\n        try:\n            for i in range(2, n + 1):\n                for j in range(2, m + 1):\n                    if mat[i][j - 1] == 'a' and mat[i - 1][j] == 'a':\n                        mat[i][j] = 'b'\n                    elif mat[i][j - 1] == 'b' and mat[i - 1][j] == 'b':\n                        mat[i][j] = 'a'\n                    else:\n                        mat[i][j] = 'a'\n        except IndexError:\n            print('pass 4')\n            pass\n        ans = []\n        try:\n            for i in range(q):\n                (p, q) = map(int, input().split())\n                if mat[p][q] == 'a':\n                    ans.append(1)\n                else:\n                    ans.append(0)\n        except IndexError:\n            print('pass 5')\n            pass\n        for i in range(len(ans)):\n            print(ans[i], end='')\n        print()\n    else:\n        marray = []\n        narray = []\n        for i in range(4):\n            x = []\n            for j in range(m + 1):\n                x.append(0)\n            marray.append(x)\n        marray[0][0] = 0\n        marray[1][0] = int(yn[0])\n        marray[2][0] = int(yn[1])\n        marray[3][0] = int(yn[2])\n        for i in range(n + 1):\n            x = []\n            for j in range(4):\n                x.append(0)\n            narray.append(x)\n        narray[0][0] = 0\n        narray[0][1] = int(xm[0])\n        narray[0][2] = int(xm[1])\n        narray[0][3] = int(xm[2])\n        for i in range(1, m + 1):\n            marray[0][i] = int(xm[i - 1])\n        for i in range(1, n + 1):\n            narray[i][0] = int(yn[i - 1])\n        for i in range(1, m + 1):\n            if i == 1:\n                if marray[0][1] == 0 or marray[1][0] == 0:\n                    marray[1][1] = 'a'\n                else:\n                    marray[1][1] = 'b'\n            elif marray[0][i] == 0:\n                marray[1][i] = 'a'\n            elif marray[1][i - 1] == 'a':\n                marray[1][i] = 'b'\n            else:\n                marray[1][i] = 'a'\n        for i in range(1, n + 1):\n            if i == 1:\n                if narray[1][0] == 0 or marray[0][1] == 0:\n                    narray[1][1] = 'a'\n                else:\n                    narray[1][1] = 'b'\n            elif narray[i][0] == 0:\n                narray[i][1] = 'a'\n            elif narray[i - 1][1] == 'a':\n                narray[i][1] = 'b'\n            else:\n                narray[i][1] = 'a'\n        for i in range(2, 4):\n            for j in range(1, m + 1):\n                if j == 1:\n                    if marray[i][0] == 0:\n                        marray[i][j] = 'a'\n                    elif marray[i - 1][1] == 'a' and marray[i][0] == 1:\n                        marray[i][j] = 'b'\n                    else:\n                        marray[i][j] = 'a'\n                elif marray[i][j - 1] == 'a' and marray[i - 1][j] == 'a':\n                    marray[i][j] = 'b'\n                elif marray[i][j - 1] == 'b' and marray[i - 1][j] == 'b':\n                    marray[i][j] = 'a'\n                else:\n                    marray[i][j] = 'a'\n        for i in range(1, n + 1):\n            for j in range(2, 4):\n                if i == 1:\n                    if narray[0][j] == 0:\n                        narray[i][j] = 'a'\n                    elif narray[1][j - 1] == 'a' and narray[0][j] == 1:\n                        narray[i][j] = 'b'\n                    else:\n                        narray[i][j] = 'a'\n                elif narray[i][j - 1] == 'a' and narray[i - 1][j] == 'a':\n                    narray[i][j] = 'b'\n                elif narray[i][j - 1] == 'b' and narray[i - 1][j] == 'b':\n                    narray[i][j] = 'a'\n                else:\n                    narray[i][j] = 'a'\n        ans = []\n        query = q\n        for _ in range(query):\n            (p, q) = map(int, input().split())\n            if p == 1 or q == 1:\n                if p == 1:\n                    if marray[p][q] == 'a':\n                        ans.append(1)\n                    else:\n                        ans.append(0)\n                elif narray[p][q] == 'a':\n                    ans.append(1)\n                else:\n                    ans.append(0)\n            elif p <= q:\n                q = q - p + 2\n                p = 2\n                if marray[p][q] == 'a':\n                    ans.append(1)\n                else:\n                    ans.append(0)\n            else:\n                p = p - q + 2\n                q = 2\n                if narray[p][q] == 'a':\n                    ans.append(1)\n                else:\n                    ans.append(0)\n        for i in range(query):\n            print(ans[i], end='')\n        print()", "import sys\nfor _ in range(int(input())):\n    m = sys.stdin.readline()\n    n = sys.stdin.readline()\n    (m1, n1) = (len(m), len(n))\n    a = [['-1' for i in range(m1)] for j in range(2)]\n    b = [['-1' for i in range(2)] for j in range(n1)]\n    for i in range(n1):\n        for j in range(min(2, m1)):\n            if i == 0 and j == 0:\n                if n[0] == '0' or m[0] == '0':\n                    b[0][0] = '1'\n                else:\n                    b[0][0] = '0'\n            elif i == 0 and j != 0:\n                if m[j] == '0' or b[i][j - 1] == '0':\n                    b[i][j] = '1'\n                else:\n                    b[i][j] = '0'\n            elif j == 0 and i != 0:\n                if n[i] == '0' or b[i - 1][j] == '0':\n                    b[i][j] = '1'\n                else:\n                    b[i][j] = '0'\n            elif b[i][j - 1] == '0' or b[i - 1][j] == '0':\n                b[i][j] = '1'\n            else:\n                b[i][j] = '0'\n    for i in range(min(2, n1)):\n        for j in range(m1):\n            if i == 0 and j == 0:\n                if n[0] == '0' or m[0] == '0':\n                    a[0][0] = '1'\n                else:\n                    a[0][0] = '0'\n            elif i == 0 and j != 0:\n                if m[j] == '0' or a[i][j - 1] == '0':\n                    a[i][j] = '1'\n                else:\n                    a[i][j] = '0'\n            elif j == 0 and i != 0:\n                if n[i] == '0' or a[i - 1][j] == '0':\n                    a[i][j] = '1'\n                else:\n                    a[i][j] = '0'\n            elif a[i][j - 1] == '0' or a[i - 1][j] == '0':\n                a[i][j] = '1'\n            else:\n                a[i][j] = '0'\n    s = ''\n    for i in range(int(input())):\n        (l, r) = map(int, sys.stdin.readline().split())\n        l -= 1\n        r -= 1\n        if l > r:\n            if l == 0 or r == 0:\n                s += b[l - r][0]\n            else:\n                s += b[l - r + 1][1]\n        elif l == 0 or r == 0:\n            s += a[0][r - l]\n        else:\n            s += a[1][r - l + 1]\n    print(s)", "for _ in range(int(input())):\n    mi = input()\n    ni = input()\n    m = len(mi)\n    n = len(ni)\n    a = [[None]]\n    out = []\n    for i in range(1, n + 1):\n        a.append([])\n        a[i].append(ni[i - 1])\n    for j in range(1, m + 1):\n        a[0].append(mi[j - 1])\n    for i in range(1, min(n + 1, 3)):\n        for j in range(1, m + 1):\n            if a[i - 1][j] == '0' or a[i][j - 1] == '0':\n                a[i].append('1')\n            else:\n                a[i].append('0')\n    for i in range(1, min(m + 1, 3)):\n        for k in range(3, n + 1):\n            if a[k - 1][i] == '0' or a[k][i - 1] == '0':\n                a[k].append('1')\n            else:\n                a[k].append('0')\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        if x < 3 or y < 3:\n            out.append(a[x][y])\n        elif x > y:\n            out.append(a[x - (y - 2)][2])\n        elif x < y:\n            out.append(a[2][y - (x - 2)])\n        else:\n            out.append(a[2][2])\n    output = ''.join(out)\n    print(output)", "def cal(x, y):\n    if x == 0 or x == 1:\n        if x == 0:\n            return str(col1[y])\n        elif nl >= 2 and ml >= 2:\n            return str(col2[y])\n    if y == 0 or y == 1:\n        if y == 0:\n            return str(row1[x])\n        elif nl >= 2 and ml >= 2:\n            return str(row2[x])\nfor o in range(int(input())):\n    m = list(map(int, list(input())))\n    n = list(map(int, list(input())))\n    nl = len(n)\n    ml = len(m)\n    q = int(input())\n    p = []\n    for _ in range(q):\n        (x, y) = list(map(int, input().split()))\n        (x, y) = (x - 1, y - 1)\n        p.append([x, y])\n    row1 = []\n    row2 = []\n    col1 = []\n    col2 = []\n    i = 0\n    for i in range(nl):\n        if i == 0:\n            if m[0] == 1 and n[0] == 1:\n                row1.append(0)\n                continue\n            row1.append(1)\n            continue\n        if row1[-1] == 1 and n[i] == 1:\n            row1.append(0)\n            continue\n        row1.append(1)\n    i = 0\n    for i in range(ml):\n        if i == 0:\n            if m[0] == 1 and n[0] == 1:\n                col1.append(0)\n                continue\n            col1.append(1)\n            continue\n        if col1[-1] == 1 and m[i] == 1:\n            col1.append(0)\n            continue\n        col1.append(1)\n    if nl >= 2 and ml >= 2:\n        for i in range(nl):\n            if i == 0:\n                row2.append(col1[1])\n                continue\n            if row2[-1] == 1 and row1[i] == 1:\n                row2.append(0)\n                continue\n            row2.append(1)\n        for i in range(ml):\n            if i == 0:\n                col2.append(row1[1])\n                continue\n            if i == 1:\n                col2.append(row2[1])\n                continue\n            if col2[-1] == 1 and col1[i] == 1:\n                col2.append(0)\n                continue\n            col2.append(1)\n    s = ''\n    for (x, y) in p:\n        if y > x and x > 1:\n            z = x - 1\n            y = y - z\n            x = 1\n            s += cal(x, y)\n            continue\n        if x > y and y > 1:\n            z = y - 1\n            y = 1\n            x = x - z\n            s += cal(x, y)\n            continue\n        if x == y and x >= 1:\n            s += str(row2[1])\n            continue\n        else:\n            s += cal(x, y)\n    print(s)", "T = int(input())\nfor test_case in range(T):\n    M = input()\n    N = input()\n    Q = int(input())\n    query = [list(map(int, input().split())) for i in range(Q)]\n    result = ''\n    for (y, x) in query:\n        rLen = len(result)\n        if x > y > 1:\n            tempX = x - (y - 1)\n            while tempX > 1:\n                if M[tempX - 1:tempX + 1] == '01':\n                    result += '1'\n                    break\n                elif M[tempX - 2:tempX] == '01':\n                    result += '0'\n                    break\n                else:\n                    tempX -= 2\n            if len(result) == rLen:\n                if tempX == 1:\n                    result += '1' if (N[1] == '1' or M[1] == '1') and (N[0] == '0' or M[0] == '0') else '0'\n                elif tempX == 0:\n                    result += '0' if (N[1] == '1' or M[1] == '1') and (N[0] == '0' or M[0] == '0') else '1'\n        elif y > x > 1:\n            tempY = y - (x - 1)\n            while tempY > 1:\n                if N[tempY - 1:tempY + 1] == '01':\n                    result += '1'\n                    break\n                elif N[tempY - 2:tempY] == '01':\n                    result += '0'\n                    break\n                else:\n                    tempY -= 2\n            if len(result) == rLen:\n                if tempY == 1:\n                    result += '1' if (N[1] == '1' or M[1] == '1') and (N[0] == '0' or M[0] == '0') else '0'\n                elif tempY == 0:\n                    result += '0' if (N[1] == '1' or M[1] == '1') and (N[0] == '0' or M[0] == '0') else '1'\n        elif x == y > 1:\n            result += '1' if (N[1] == '1' or M[1] == '1') and (N[0] == '0' or M[0] == '0') else '0'\n        elif x == 1:\n            tempY = y\n            while tempY > 1:\n                if N[tempY - 1] == '0':\n                    result += '1'\n                    break\n                elif N[tempY - 2] == '0':\n                    result += '0'\n                    break\n                else:\n                    tempY -= 2\n            if len(result) == rLen:\n                if tempY == 1:\n                    result += '1' if N[0] == '0' or M[0] == '0' else '0'\n                elif tempY == 0:\n                    result += '0' if N[0] == '0' or M[0] == '0' else '1'\n        elif y == 1:\n            tempX = x\n            while tempX > 1:\n                if M[tempX - 1] == '0':\n                    result += '1'\n                    break\n                elif M[tempX - 2] == '0':\n                    result += '0'\n                    break\n                else:\n                    tempX -= 2\n            if len(result) == rLen:\n                if tempX == 1:\n                    result += '1' if M[0] == '0' or N[0] == '0' else '0'\n                elif tempX == 0:\n                    result += '0' if M[0] == '0' or N[0] == '0' else '1'\n    print(result)", "T = int(input())\nfor _ in range(T):\n    top = 'X' + input().strip()\n    left = 'X' + input().strip()\n    M = len(top) - 1\n    N = len(left) - 1\n    table = {}\n    for j in range(1, M + 1):\n        table[0, j] = int(top[j])\n    for i in range(1, N + 1):\n        table[i, 0] = int(left[i])\n    for j in range(1, min(M, 2) + 1):\n        for i in range(1, N + 1):\n            if table[i - 1, j] == 1 and table[i, j - 1] == 1:\n                table[i, j] = 0\n            else:\n                table[i, j] = 1\n    for i in range(1, min(N, 2) + 1):\n        for j in range(1, M + 1):\n            if table[i - 1, j] == 1 and table[i, j - 1] == 1:\n                table[i, j] = 0\n            else:\n                table[i, j] = 1\n\n    def value(x, y):\n        if x <= 2 or y <= 2:\n            return table[x, y]\n        delta = min(x, y) - 2\n        return value(x - delta, y - delta)\n    Q = int(input())\n    result = []\n    for q in range(Q):\n        (x, y) = map(int, input().strip().split())\n        result.append(value(x, y))\n    print(''.join(map(str, result)))", "for _ in range(int(input())):\n    a_m = '0' + str(input())\n    a_n = '0' + str(input())\n    (n, m) = (len(a_n), len(a_m))\n    (a, ans) = ([], '')\n    for i in range(n):\n        if i <= 2:\n            a.append(['-1'] * m)\n        else:\n            a.append(['-1'] * 3)\n        a[i][0] = a_n[i]\n    for i in range(m):\n        a[0][i] = a_m[i]\n    for i in range(1, n):\n        for j in range(1, m):\n            if i > 2 and j > 2:\n                break\n            if a[i - 1][j] in ['0', '3'] or a[i][j - 1] in ['0', '3']:\n                a[i][j] = '2'\n            else:\n                a[i][j] = '3'\n    for _ in range(int(input())):\n        (l, r) = map(int, input().split())\n        t = int()\n        if l > 2 and r > 2:\n            if l < r:\n                ans += '1' if a[2][r - l + 2] == '2' else '0'\n            else:\n                ans += '1' if a[l - r + 2][2] == '2' else '0'\n        else:\n            ans += '1' if a[l][r] == '2' else '0'\n    print(ans)", "t = int(input())\nfor i in range(t):\n    s1 = input()\n    s2 = input()\n    m = len(s1)\n    n = len(s2)\n    tabler = [[1 for _ in range(m + 1)] for _ in range(min(n + 1, 4))]\n    tablec = [[1 for _ in range(min(4, m + 1))] for _ in range(n + 1)]\n    for k in range(1, m + 1):\n        tabler[0][k] = int(s1[k - 1])\n    for y in range(1, n + 1):\n        tablec[y][0] = int(s2[y - 1])\n    q = int(input())\n    s = ''\n    for r in range(1, min(4, m + 1)):\n        tablec[0][r] = tabler[0][r]\n        for c in range(1, n + 1):\n            tablec[c][r] = tabler[0][r]\n            if tablec[c][r - 1] == 1 and tablec[c - 1][r] == 1:\n                tablec[c][r] = 0\n            else:\n                tablec[c][r] = 1\n    for i1 in range(1, min(4, n + 1)):\n        tabler[i1][0] = tablec[i1][0]\n        for j1 in range(1, m + 1):\n            if tabler[i1][j1 - 1] == 1 and tabler[i1 - 1][j1] == 1:\n                tabler[i1][j1] = 0\n            else:\n                tabler[i1][j1] = 1\n    s = ''\n    for a1 in range(q):\n        (x, y) = map(int, input().split())\n        if x > 3 and y > 3:\n            x1 = min(x, y)\n            id = x1 - 3\n            x = x - id\n            y = y - id\n            if x < y:\n                s = s + str(tabler[3][y])\n            else:\n                s = s + str(tablec[x][3])\n        elif x <= 3 and y > 3:\n            s = s + str(tabler[x][y])\n        elif x > 3 and y <= 3:\n            s = s + str(tablec[x][y])\n        else:\n            s = s + str(tabler[x][y])\n    print(s)", "T = int(input())\nfor i in range(T):\n    M = str(input())\n    N = str(input())\n    Q = int(input())\n    mapping = {}\n    ans = ''\n    for p in range(1, 3):\n        for q in range(1, len(M) + 1):\n            if p < len(N) + 1:\n                if p - 1 == 0 and q - 1 == 0:\n                    if M[0] == '0' or N[0] == '0':\n                        mapping[p, q] = 'W'\n                    else:\n                        mapping[p, q] = 'L'\n                elif p == 1:\n                    if M[q - 1] == '0':\n                        mapping[p, q] = 'W'\n                    elif mapping[p, q - 1] == 'W':\n                        mapping[p, q] = 'L'\n                    else:\n                        mapping[p, q] = 'W'\n                elif q == 1:\n                    if N[p - 1] == '0':\n                        mapping[p, q] = 'W'\n                    elif mapping[p - 1, q] == 'W':\n                        mapping[p, q] = 'L'\n                    else:\n                        mapping[p, q] = 'W'\n                elif mapping[p - 1, q] == 'L' or mapping[p, q - 1] == 'L':\n                    mapping[p, q] = 'W'\n                else:\n                    mapping[p, q] = 'L'\n    for p in range(2, len(N) + 1):\n        for q in range(1, 3):\n            if q < len(M) + 1:\n                if q == 1:\n                    if N[p - 1] == '0':\n                        mapping[p, q] = 'W'\n                    elif mapping[p - 1, q] == 'W':\n                        mapping[p, q] = 'L'\n                    else:\n                        mapping[p, q] = 'W'\n                elif mapping[p - 1, q] == 'L' or mapping[p, q - 1] == 'L':\n                    mapping[p, q] = 'W'\n                else:\n                    mapping[p, q] = 'L'\n    for j in range(Q):\n        (x, y) = map(int, input().split())\n        if x > y and y > 1:\n            factor = y - 2\n            x -= factor\n            y = 2\n        elif y >= x and x > 1:\n            factor = x - 2\n            y -= factor\n            x = 2\n        if x == 1 and y == 1:\n            if mapping[x, y] == 'W':\n                ans += '1'\n            else:\n                ans += '0'\n        elif x == 1:\n            if mapping[x, y] == 'W':\n                ans += '1'\n            else:\n                ans += '0'\n        elif y == 1:\n            if mapping[x, y] == 'W':\n                ans += '1'\n            else:\n                ans += '0'\n        elif mapping[x, y] == 'W':\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)", "t = int(input())\nfor x in range(t):\n    m = input()\n    n = input()\n    t1 = m[0]\n    t2 = n[0]\n    l = ''\n    for y in n:\n        if y == '0' or t1 == '0':\n            l += '1'\n            t1 = '1'\n        else:\n            l += '0'\n            t1 = '0'\n    n = l\n    l = ''\n    for y in m:\n        if t2 == '0' or y == '0':\n            l += '1'\n            t2 = '1'\n        else:\n            l += '0'\n            t2 = '0'\n    m = l\n    s = ''\n    q = int(input())\n    for y in range(q):\n        p = [int(z) for z in input().split()]\n        x = p[0]\n        y = p[1]\n        if y == 1:\n            s += n[x - y]\n        elif x == 1:\n            s += m[y - x]\n        elif x == y:\n            p = x - y\n            if n[p] == '0':\n                s += '0'\n            elif n[p + 1] == '0':\n                s += '1'\n            elif m[1] == '0':\n                s += str(1 - p % 2)\n            else:\n                s += str(p % 2)\n        elif x > y:\n            p = x - y\n            if n[p] == '0':\n                s += '0'\n            elif n[p - 1] == '0' or n[p + 1] == '0':\n                s += '1'\n            else:\n                for k in range(p - 1, -1, -1):\n                    if n[k] == '0':\n                        if k % 2 == 0:\n                            s += str(p % 2)\n                        else:\n                            s += str(1 - p % 2)\n                        break\n                else:\n                    if m[1] == '0':\n                        s += str(1 - p % 2)\n                    else:\n                        s += str(p % 2)\n        else:\n            p = y - x\n            if m[p] == '0':\n                s += '0'\n            elif m[p - 1] == '0' or m[p + 1] == '0':\n                s += '1'\n            else:\n                for k in range(p - 1, -1, -1):\n                    if m[k] == '0':\n                        if k % 2 == 0:\n                            s += str(p % 2)\n                        else:\n                            s += str(1 - p % 2)\n                        break\n                else:\n                    if n[1] == '0':\n                        s += str(1 - p % 2)\n                    else:\n                        s += str(p % 2)\n    print(s)", "def old(ns, ms, n, m, xx, yy, max_x, max_y):\n    board = [['0'] * (m + 1) for x in range(n + 1)]\n    for (index, y) in enumerate(ms):\n        board[0][index + 1] = y\n    for (index, x) in enumerate(ns):\n        board[index + 1][0] = x\n    for x in range(1, max_x + 1):\n        for y in range(1, max_y + 1):\n            res = '0'\n            if x == 1 and y == 1:\n                if board[x - 1][y] == '0' or board[x][y - 1] == '0':\n                    res = 'a'\n                else:\n                    res = 'b'\n            elif board[x - 1][y] == '0' or board[x][y - 1] == '0' or board[x - 1][y] == 'b' or (board[x][y - 1] == 'b'):\n                res = 'a'\n            else:\n                res = 'b'\n            board[x][y] = res\n    result = []\n    for index in range(len(xx)):\n        (x, y) = (xx[index], yy[index])\n        result.append('1' if board[x][y] == 'a' else '0')\n    return ''.join(result)\n\ndef fix(board, x, y):\n    res = '0'\n    if x == 1 and y == 1:\n        if board[x - 1][y] == '0' or board[x][y - 1] == '0':\n            res = 'a'\n        else:\n            res = 'b'\n    elif x <= 2 or y <= 2:\n        if board[x - 1][y] == '0' or board[x][y - 1] == '0' or board[x - 1][y] == 'b' or (board[x][y - 1] == 'b'):\n            res = 'a'\n        else:\n            res = 'b'\n    else:\n        return\n    board[x][y] = res\n\ndef solve(ns, ms, n, m, xx, yy, max_x, max_y):\n    board = {0: ['0'] + list(ms), 1: [ns[0]] + ['b'] * m, 2: [ns[1]] + ['b'] * m}\n    for x in range(3, n + 1):\n        board[x] = [ns[x - 1], 'b', 'b']\n    for y in range(1, max_y + 1):\n        fix(board, 1, y)\n    for y in range(1, max_y + 1):\n        fix(board, 2, y)\n    for x in range(1, max_x + 1):\n        fix(board, x, 1)\n    for x in range(1, max_x + 1):\n        fix(board, x, 2)\n    result = []\n    for index in range(len(xx)):\n        (x, y) = (xx[index], yy[index])\n        if x > 2 and y > 2:\n            d = min([x, y]) - 2\n            x -= d\n            y -= d\n        result.append('1' if board[x][y] == 'a' else '0')\n    return ''.join(result)\nfor _ in range(int(input())):\n    ms = list(input().strip())\n    ns = list(input().strip())\n    m = len(ms)\n    n = len(ns)\n    (xx, yy) = ([], [])\n    for __ in range(int(input())):\n        (x, y) = map(int, input().strip().split())\n        xx.append(x)\n        yy.append(y)\n    max_x = max(xx)\n    max_y = max(yy)\n    if n == 1 or m == 1:\n        print(old(ns, ms, n, m, xx, yy, max_x, max_y))\n    else:\n        print(solve(ns, ms, n, m, xx, yy, max_x, max_y))", "def bob(x, y):\n    if x == 0 or y == 0:\n        return True\n    if (x, y) in dct:\n        return dct[x, y]\n    flag1 = False\n    flag2 = False\n    if x == 1:\n        if M[y] == '0':\n            dct[x, y] = True\n            return True\n        flag1 = True\n    if y == 1:\n        if N[x] == '0':\n            dct[x, y] = True\n            return True\n        flag2 = True\n    if flag1 and flag2:\n        dct[x, y] = False\n        return False\n    if x < y:\n        a = not alice(x - 1, y)\n        if a:\n            dct[x, y] = True\n            return True\n        else:\n            b = not alice(x, y - 1)\n            if b:\n                dct[x, y] = True\n                return True\n        return False\n    else:\n        a = not alice(x, y - 1)\n        if a:\n            dct[x, y] = True\n            return True\n        else:\n            b = not alice(x - 1, y)\n            if b:\n                dct[x, y] = True\n                return True\n        return False\n\ndef alice(x, y):\n    if x == 0 or y == 0:\n        return True\n    if (x, y) in dct:\n        return dct[x, y]\n    flag1 = False\n    flag2 = False\n    if x == 1:\n        if M[y] == '0':\n            dct[x, y] = True\n            return True\n        flag1 = True\n    if y == 1:\n        if N[x] == '0':\n            dct[x, y] = True\n            return True\n        flag2 = True\n    if flag1 and flag2:\n        dct[x, y] = False\n        return False\n    if x < y:\n        a = not bob(x - 1, y)\n        if a:\n            dct[x, y] = True\n            return True\n        else:\n            b = not bob(x, y - 1)\n            if b:\n                dct[x, y] = True\n                return True\n        return False\n    else:\n        a = not bob(x, y - 1)\n        if a:\n            dct[x, y] = True\n            return True\n        else:\n            b = not bob(x - 1, y)\n            if b:\n                dct[x, y] = True\n                return True\n        return False\nT = int(input())\nfor z in range(T):\n    M = list(input())\n    M = ['0'] + M\n    N = list(input())\n    N = ['0'] + N\n    dct = {}\n    s = ''\n    Q = int(input())\n    for q in range(Q):\n        (x, y) = map(int, input().split())\n        if x <= 2 or y <= 2:\n            pass\n        elif x == 3 or y == 3:\n            x -= 1\n            y -= 1\n        else:\n            mn = min(x, y)\n            x -= mn - 2\n            y -= mn - 2\n        if alice(x, y):\n            s += '1'\n        else:\n            s += '0'\n    print(s)", "t = int(input())\nfor w in range(0, t):\n    m = input()\n    n = input()\n    ml = len(m)\n    nl = len(n)\n    a = []\n    a.append([])\n    a[0].append(0)\n    for i in range(1, ml + 1):\n        if m[i - 1] == '1':\n            a[0].append(1)\n        else:\n            a[0].append(0)\n    for i in range(1, nl + 1):\n        a.append([])\n        if n[i - 1] == '1':\n            a[i].append(1)\n        else:\n            a[i].append(0)\n    for j in range(1, ml + 1):\n        a[1].append(a[0][j] & a[1][j - 1] ^ 1)\n        if nl >= 2:\n            a[2].append(a[1][j] & a[2][j - 1] ^ 1)\n    for j in range(3, nl + 1):\n        a[j].append(a[j][0] & a[j - 1][1] ^ 1)\n        if ml >= 2:\n            a[j].append(a[j][1] & a[j - 1][2] ^ 1)\n    q = int(input())\n    ans = ''\n    for i in range(1, q + 1):\n        arr = [int(x) for x in input().split()]\n        x = arr[0]\n        y = arr[1]\n        if x <= 2 or y <= 2:\n            ans = ans + str(a[x][y])\n        else:\n            tx = x - 2 if x <= y else y - 2\n            x = x - tx\n            y = y - tx\n            ans = ans + str(a[x][y])\n    print(ans)", "MOD = 10 ** 9 + 7\nI = lambda : list(map(int, input().split()))\n(t,) = I()\nwhile t:\n    t -= 1\n    ms = input()\n    ns = input()\n    n = len(ns)\n    m = len(ms)\n    table = [[0 for i in range(m + 1)] for j in range(min(3, n + 1))]\n    table[0][0] = 1 if ms[0] == '0' or ns[0] == '0' else 0\n    col = [[0 for i in range(min(3, m + 1))] for j in range(n + 1)]\n    col[0][0] = 1 if ms[0] == '0' or ns[0] == '0' else 0\n    i = 1\n    winner = 0\n    while i < m:\n        if ms[i] == '0':\n            table[0][i] = 1\n            i += 1\n        else:\n            winner = 1 if table[0][i - 1] == 0 else 0\n            if ms[i] == '1':\n                table[0][i] = winner\n                i += 1\n    i = 1\n    while i < n:\n        if ns[i] == '0':\n            col[i][0] = 1\n            i += 1\n        else:\n            winner = 1 if col[i - 1][0] == 0 else 0\n            if ns[i] == '1':\n                col[i][0] = winner\n                i += 1\n    if n >= 2 and m >= 2:\n        table[1][1] = col[1][1] = 0 if table[0][1] and col[1][0] else 1\n    for i in range(1, 2):\n        for j in range(2, m + 1):\n            if table[i - 1][j] == 1 and table[i][j - 1] == 1:\n                table[i][j] = 0\n            else:\n                table[i][j] = 1\n    for i in range(1, 2):\n        for j in range(2, n + 1):\n            if col[j][i - 1] == 1 and col[j - 1][i] == 1:\n                col[j][i] = 0\n            else:\n                col[j][i] = 1\n    (q,) = I()\n    s = ''\n    while q:\n        q -= 1\n        (x, y) = I()\n        if x == y == 1:\n            s += str(table[0][0])\n            continue\n        elif x == 1:\n            s += str(table[0][y - 1])\n            continue\n        elif y == 1:\n            s += str(col[x - 1][0])\n            continue\n        k = min(x, y) - 1\n        x -= k\n        y -= k\n        if y < x:\n            s += str(col[x][y])\n        else:\n            s += str(table[x][y])\n    print(s)", "from random import randint\nt = int(input())\nfor i in range(t):\n    m = list(str(input()))\n    n = list(str(input()))\n    q = int(input())\n    if len(m) == 1 or len(n) == 1:\n        list1 = [[0 for j in range(len(m))] for k in range(len(n))]\n        if m[0] == '0' or n[0] == '0':\n            list1[0][0] = 1\n        for j in range(1, len(m)):\n            if m[j] == '0':\n                list1[0][j] = 1\n            elif list1[0][j - 1] == 0:\n                list1[0][j] = 1\n            else:\n                continue\n        for j in range(1, len(n)):\n            if n[j] == '0':\n                list1[j][0] = 1\n            elif list1[j - 1][0] == 0:\n                list1[j][0] = 1\n            else:\n                continue\n        for j in range(1, len(n)):\n            for k in range(1, len(m)):\n                if list1[j - 1][k] == 0:\n                    list1[j][k] = 1\n                if list1[j][k - 1] == 0:\n                    list1[j][k] = 1\n        list2 = []\n        for j in range(q):\n            (a, b) = map(int, input().strip().split())\n            list2.append(list1[a - 1][b - 1])\n        print(''.join((str(e) for e in list2)))\n    else:\n        list1 = [[0, 0] for j in range(len(m))]\n        list2 = [[0, 0] for j in range(len(n))]\n        if m[0] == '0' or n[0] == '0':\n            list1[0][0] = 1\n            list2[0][0] = 1\n        for j in range(1, len(m)):\n            if m[j] == '0':\n                list1[j][0] = 1\n            elif list1[j - 1][0] == 0:\n                list1[j][0] = 1\n            else:\n                continue\n        for j in range(1, len(n)):\n            if n[j] == '0':\n                list2[j][0] = 1\n            elif list2[j - 1][0] == 0:\n                list2[j][0] = 1\n            else:\n                continue\n        list1[0][1] = list2[1][0]\n        for j in range(1, len(m)):\n            if list1[j - 1][1] == 0:\n                list1[j][1] = 1\n            if list1[j][0] == 0:\n                list1[j][1] = 1\n        list2[0][1] = list1[1][0]\n        for j in range(1, len(n)):\n            if list2[j - 1][1] == 0:\n                list2[j][1] = 1\n            if list2[j][0] == 0:\n                list2[j][1] = 1\n        list3 = []\n        for j in range(q):\n            (a, b) = map(int, input().strip().split())\n            if a <= 2:\n                list3.append(list1[b - 1][a - 1])\n            elif b <= 2:\n                list3.append(list2[a - 1][b - 1])\n            elif a >= b:\n                if list2[a - b][0] == 1 and list2[a - b][1] == 1 and (list2[a - b + 1][0] == 1):\n                    list3.append(0)\n                elif list2[a - b][0] == 0 and list2[a - b][1] == 0 and (list2[a - b + 1][0] == 0):\n                    list3.append(1)\n                else:\n                    list3.append(list2[a - b][0])\n            elif list1[b - a][0] == 1 and list1[b - a][1] == 1 and (list1[b - a + 1][0] == 1):\n                list3.append(0)\n            elif list1[b - a][0] == 0 and list1[b - a][1] == 0 and (list1[b - a + 1][0] == 0):\n                list3.append(1)\n            else:\n                list3.append(list1[b - a][0])\n        print(''.join((str(e) for e in list3)))", "t = int(input())\nfor _ in range(t):\n    M = input().strip()\n    N = input().strip()\n    dp1 = [[False] * (len(N) + 1) for _ in range(10)]\n    dp2 = [[False] * 10 for _ in range(len(M) + 1 - 10)]\n    dp = dp1 + dp2\n    for (i, v) in enumerate(M):\n        dp[i + 1][0] = v == '1'\n    for (i, v) in enumerate(N):\n        dp[0][i + 1] = v == '1'\n    for i in range(1, len(dp)):\n        for j in range(1, len(dp[0])):\n            dp[i][j] = not (dp[i][j - 1] and dp[i - 1][j])\n            if i > 5 and j > 5:\n                break\n    ans = []\n    for _ in range(int(input())):\n        (x, y) = map(int, input().split())\n        m = min(x, y)\n        if m >= 3:\n            x = x - m + 3\n            y = y - m + 3\n        ans.append('1' if dp[y][x] else '0')\n    print(''.join(ans))", "t = int(input())\nfor cas in range(t):\n    row1 = list(input().strip())\n    col1 = list(input().strip())\n    (m, n) = (len(col1) + 1, len(row1) + 1)\n    mat = []\n    for i in range(3):\n        row = [-1] * n\n        mat.append(row)\n    for i in range(m - 3):\n        mat.append([-1, -1, -1, -1])\n    for j in range(1, n):\n        mat[0][j] = 'l' if int(row1[j - 1]) == 1 else 'w'\n    for i in range(1, m):\n        mat[i][0] = 'l' if int(col1[i - 1]) == 1 else 'w'\n    mat[1][1] = 1 if mat[0][1] == 'w' or mat[1][0] == 'w' else 0\n    for i in range(2, n):\n        if mat[1][i - 1] == 0 or mat[0][i] == 'w':\n            mat[1][i] = 1\n        else:\n            mat[1][i] = 0\n    for i in range(2, m):\n        if mat[i - 1][1] == 0 or mat[i][0] == 'w':\n            mat[i][1] = 1\n        else:\n            mat[i][1] = 0\n    if n > 2 and m > 2:\n        mat[2][2] = 1 if mat[1][2] == 0 or mat[2][1] == 0 else 0\n        diff = {}\n        diff[0] = [2, 2]\n        for i in range(3, n):\n            if mat[2][i - 1] == 0 or mat[1][i] == 0:\n                mat[2][i] = 1\n            else:\n                mat[2][i] = 0\n            diff[2 - i] = [2, i]\n        for i in range(3, m):\n            if mat[i - 1][2] == 0 or mat[i][1] == 0:\n                mat[i][2] = 1\n            else:\n                mat[i][2] = 0\n            diff[i - 2] = [i, 2]\n    ans = []\n    q = int(input())\n    for quer in range(q):\n        cor = input().strip().split(' ')\n        cor = [int(x) for x in cor]\n        if cor[0] >= 2 and cor[1] >= 2:\n            cor = diff[cor[0] - cor[1]]\n        if mat[cor[0]][cor[1]] == 1:\n            ans.append('1')\n        else:\n            ans.append('0')\n    print(''.join(ans))", "t = int(input())\nfor ty in range(t):\n    s1 = input()\n    s2 = input()\n    arr = []\n    n = len(s1)\n    m = len(s2)\n    arr.append([])\n    for i in range(-1, n):\n        if i == -1:\n            arr[0].append(0)\n        else:\n            arr[0].append(int(s1[i]))\n    for i in range(m):\n        arr.append([])\n        arr[i + 1].append(int(s2[i]))\n    for j in range(2):\n        if m > j:\n            for k in range(n):\n                arr[j + 1].append((arr[j][k + 1] * arr[j + 1][k] + 1) % 2)\n    for j in range(2):\n        if n > j:\n            for k in range(2, m):\n                arr[k + 1].append((arr[k][j + 1] * arr[k + 1][j] + 1) % 2)\n    q = int(input())\n    s = ''\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        try:\n            s += str(arr[x][y])\n        except:\n            if x == y:\n                s += str(arr[2][2])\n            elif x > y:\n                s += str(arr[x - y + 2][2])\n            else:\n                s += str(arr[2][y - x + 2])\n    print(s)", "t = int(input())\nfor z in range(t):\n    s1 = input()\n    s2 = input()\n    m = len(s1)\n    n = len(s2)\n    if n < 2 or m < 2:\n        a = [[-1] * (m + 1) for i in range(n + 1)]\n        for i in range(m):\n            a[0][i + 1] = int(s1[i])\n        for j in range(n):\n            a[j + 1][0] = int(s2[j])\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if a[i - 1][j] == 0 or a[i][j - 1] == 0:\n                    a[i][j] = 1\n                elif a[i - 1][j] == 1 and a[i][j - 1] == 1:\n                    a[i][j] = 0\n        c = []\n        q = int(input())\n        for i in range(q):\n            (x, y) = map(int, input().split())\n            c.append(a[x][y])\n        for i in range(q):\n            print(c[i], end='')\n        print()\n    else:\n        a1 = [[-1] * (m + 1) for i in range(3)]\n        for i in range(m):\n            a1[0][i + 1] = int(s1[i])\n        a1[1][0] = int(s2[0])\n        a1[2][0] = int(s2[1])\n        a2 = [[-1] * 3 for i in range(n + 1)]\n        for j in range(n):\n            a2[j + 1][0] = int(s2[j])\n        a2[0][1] = int(s1[0])\n        a2[0][2] = int(s1[1])\n        for i in range(1, 3):\n            for j in range(1, m + 1):\n                if a1[i - 1][j] == 0 or a1[i][j - 1] == 0:\n                    a1[i][j] = 1\n                elif a1[i - 1][j] == 1 and a1[i][j - 1] == 1:\n                    a1[i][j] = 0\n        for i in range(1, n + 1):\n            for j in range(1, 3):\n                if a2[i - 1][j] == 0 or a2[i][j - 1] == 0:\n                    a2[i][j] = 1\n                elif a2[i - 1][j] == 1 and a2[i][j - 1] == 1:\n                    a2[i][j] = 0\n        c = []\n        q = int(input())\n        for i in range(q):\n            (x, y) = map(int, input().split())\n            if x <= 2:\n                c.append(a1[x][y])\n            elif y <= 2:\n                c.append(a2[x][y])\n            elif x < y:\n                c.append(a1[2][y - (x - 2)])\n            else:\n                c.append(a2[x - (y - 2)][2])\n        for i in range(q):\n            print(c[i], end='')\n        print()", "for _ in range(int(input())):\n    c = '0' + input()\n    r = '0' + input()\n    m = len(c)\n    n = len(r)\n    rd = [0] * n\n    cd = [0] * m\n    for i in range(1, n):\n        if r[i] == '1' and r[i - 1] == '0':\n            rd[i] = i\n        else:\n            rd[i] = rd[i - 1]\n    for i in range(1, m):\n        if c[i] == '1' and c[i - 1] == '0':\n            cd[i] = i\n        else:\n            cd[i] = cd[i - 1]\n    ans = ''\n    for i in range(int(input())):\n        f = 0\n        (x, y) = map(int, input().split())\n        if x == 1 and c[y] == '0' or (y == 1 and r[x] == '0'):\n            f = 1\n        if x == 1:\n            k = cd[y]\n            if k > 1:\n                if (y - k) % 2 == 1:\n                    f = 1\n            elif k == 1:\n                if (y - k) % 2 == 0:\n                    if r[1] == '0':\n                        f = 1\n                elif r[1] == '1':\n                    f = 1\n        elif y == 1:\n            k = rd[x]\n            if k > 1:\n                if (x - k) % 2 == 1:\n                    f = 1\n            elif k == 1:\n                if (x - k) % 2 == 0:\n                    if c[1] == '0':\n                        f = 1\n                elif c[1] == '1':\n                    f = 1\n        elif x == y:\n            if x >= 2:\n                if (r[2] == '1' or c[2] == '1') and (r[1] == '0' or c[1] == '0'):\n                    f = 1\n            elif r[1] == '0' or c[1] == '0':\n                f = 1\n        elif x < y:\n            k = cd[y - (x - 2)]\n            if k > 1:\n                if (x - 1 + y - k) % 2 != 0:\n                    f = 1\n            elif k == 1:\n                if c[2] == '0':\n                    if (x + y - 3) % 2 == 1:\n                        if r[2] == '1' and r[1] == '0':\n                            f = 1\n                    elif r[2] == '0' or r[1] == '1':\n                        f = 1\n                elif (x - 1 + y - 1) % 2 == 0:\n                    if r[1] == '0':\n                        f = 1\n                elif r[1] == '1':\n                    f = 1\n            elif (x + y - 3) % 2 == 0:\n                if r[2] == '0':\n                    f = 1\n            elif r[2] == '1':\n                f = 1\n        else:\n            k = rd[x - (y - 2)]\n            if k > 1:\n                if (x - k + y - 1) % 2 != 0:\n                    f = 1\n            elif k == 1:\n                if r[2] == '0':\n                    if (x + y - 3) % 2 == 1:\n                        if c[2] == '1' and c[1] == '0':\n                            f = 1\n                    elif c[2] == '0' or c[1] == '1':\n                        f = 1\n                elif (x - 1 + y - 1) % 2 == 0:\n                    if c[1] == '0':\n                        f = 1\n                elif c[1] == '1':\n                    f = 1\n            elif (x + y - 3) % 2 == 0:\n                if c[2] == '0':\n                    f = 1\n            elif c[2] == '1':\n                f = 1\n        if f == 1:\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)", "t = int(input())\nfor i in range(t):\n    sm = input()\n    sn = input()\n    am = []\n    an = []\n    am1 = []\n    an1 = []\n    if sn == '':\n        sn = '1'\n        sn = sn + '1'\n    if sm == '':\n        sm = '1'\n        sm = sm + '1'\n    if sm[0] == '0' or sn[0] == '0':\n        am.append('1')\n        an.append('1')\n    else:\n        am.append('0')\n        an.append('0')\n    for j in range(1, len(sm)):\n        if sm[j] == '0' or am[j - 1] == '0':\n            am.append('1')\n        else:\n            am.append('0')\n    for j in range(1, len(sn)):\n        if sn[j] == '0' or an[j - 1] == '0':\n            an.append('1')\n        else:\n            an.append('0')\n    if len(am) > 1 and len(an) > 1:\n        if am[1] == '0' or an[1] == '0':\n            am1.append('1')\n            an1.append('1')\n        else:\n            am1.append('0')\n            an1.append('0')\n        for j in range(1, len(am) - 1):\n            if am[j + 1] == '0' or am1[j - 1] == '0':\n                am1.append('1')\n            else:\n                am1.append('0')\n        for j in range(1, len(an) - 1):\n            if an[j + 1] == '0' or an1[j - 1] == '0':\n                an1.append('1')\n            else:\n                an1.append('0')\n    q = int(input())\n    output = ''\n    for j in range(q):\n        (x, y) = [int(j) for j in input().split(' ')]\n        if x == 1 or y == 1:\n            if x > y:\n                output = output + an[x - y]\n            else:\n                output = output + am[y - x]\n        elif x > y:\n            output = output + an1[x - y]\n        else:\n            output = output + am1[y - x]\n    print(output)", "def oh(c, r, d):\n    for i in range(1, c + 1):\n        if d[0, i] == 'll' or d[1, i - 1] == 'll' or d[0, i] == 0 or (d[1, i - 1] == 0):\n            d[1, i] = 'w'\n        else:\n            d[1, i] = 'll'\n    for i in range(1, r + 1):\n        if d[i, 0] == 'll' or d[i - 1, 1] == 'll' or d[i, 0] == 0 or (d[i - 1, 1] == 0):\n            d[i, 1] = 'w'\n        else:\n            d[i, 1] = 'll'\n    if r >= 2:\n        for i in range(2, c + 1):\n            if d[1, i] == 'll' or d[2, i - 1] == 'll':\n                d[2, i] = 'w'\n            else:\n                d[2, i] = 'll'\n    if c >= 2:\n        for i in range(2, r + 1):\n            if d[i, 1] == 'll' or d[i - 1, 2] == 'll':\n                d[i, 2] = 'w'\n            else:\n                d[i, 2] = 'll'\nt = int(input())\nfor i in range(t):\n    cx = input()\n    rx = input()\n    cl = len(cx)\n    rl = len(rx)\n    d = {}\n    d[0, 0] = 'X'\n    for i in range(cl):\n        d[0, i + 1] = int(cx[i])\n    for i in range(rl):\n        d[i + 1, 0] = int(rx[i])\n    oh(cl, rl, d)\n    x = int(input())\n    for i in range(x):\n        (l, r) = input().split(' ')\n        l = int(l)\n        r = int(r)\n        if (l, r) in d:\n            sz = d[l, r]\n        else:\n            xz1 = r - 2\n            xz2 = l - 2\n            if xz1 < xz2:\n                l = l - xz1\n                sz = d[l, 2]\n            else:\n                r = r - xz2\n                sz = d[2, r]\n        if sz == 'w':\n            print(1, end='')\n        else:\n            print(0, end='')\n    print()", "T = int(input())\nfor _ in range(T):\n    Mstr = [int(x) for x in input().strip()]\n    Nstr = [int(x) for x in input().strip()]\n    (M, N) = (len(Mstr) + 1, len(Nstr) + 1)\n    nrr = [[0]]\n    nrr[0].extend(Nstr)\n    nrr.extend([[0] * N for i in range(2)])\n    mrr = [[0] * 3 for i in range(M)]\n    (p, q) = (Mstr[0], Nstr[0])\n    mrr[1][0] = p\n    p = p & q\n    mrr[1][1] = p\n    nrr[1][1] = p\n    for i in range(2, M):\n        k = Mstr[i - 1]\n        mrr[i][0] = k\n        if k:\n            mrr[i][1] = k ^ mrr[i - 1][1]\n        else:\n            mrr[i][1] = 0\n    for i in range(2, N):\n        k = nrr[0][i]\n        if k == 0:\n            nrr[1][i] = 0\n        else:\n            nrr[1][i] = k ^ nrr[1][i - 1]\n    for i in range(1, 3):\n        try:\n            mrr[0][i] = nrr[0][i]\n            nrr[i][0] = mrr[i][0]\n            if i > 1:\n                nrr[i][1] = mrr[i][1]\n                mrr[1][i] = nrr[1][i]\n                tmp = ((mrr[i][i - 1] | mrr[i - 1][i]) + 1) % 2\n                (nrr[i][i], mrr[i][i]) = (tmp, tmp)\n        except IndexError:\n            pass\n    for i in range(3, N):\n        nrr[2][i] = not nrr[2][i - 1] | nrr[1][i]\n    for i in range(3, M):\n        mrr[i][2] = not mrr[i - 1][2] | mrr[i][1]\n    Q = int(input())\n    ans = ''\n    for k in range(Q):\n        (x, y) = [int(x) for x in input().strip().split(' ')]\n        if x > 2 and y > 2:\n            if x > y:\n                if nrr[2][x - y + 2]:\n                    ans += '0'\n                else:\n                    ans += '1'\n            elif mrr[y - x + 2][2]:\n                ans += '0'\n            else:\n                ans += '1'\n        elif x < y:\n            if mrr[y][x]:\n                ans += '0'\n            else:\n                ans += '1'\n        elif nrr[y][x]:\n            ans += '0'\n        else:\n            ans += '1'\n    print(ans)", "for _ in range(int(input())):\n    sm = input()\n    sn = input()\n    (n, m) = (len(sn), len(sm))\n    a = {0: {}}\n    for j in range(m):\n        a[0][j + 1] = int(sm[j])\n    for i in range(n):\n        a[i + 1] = {0: int(sn[i])}\n    for i in range(1, n + 1):\n        for j in range(1, min(3, m + 1)):\n            a[i][j] = int(not a[i - 1][j] & a[i][j - 1])\n    for i in range(1, min(3, n + 1)):\n        for j in range(1, m + 1):\n            a[i][j] = int(not a[i - 1][j] & a[i][j - 1])\n    r = ''\n    for _ in range(int(input())):\n        (x, y) = map(int, input().split())\n        t = min(x, y) - 2\n        if t > 0:\n            x -= t\n            y -= t\n        r += str(a[x][y])\n    print(r)", "t = int(input())\nfor i in range(t):\n    m = input().rstrip()\n    n = input().rstrip()\n    a = len(m)\n    b = len(n)\n    h = [2 for x in range(a)]\n    v = [2 for y in range(b)]\n    oh = [2 for x in range(a - 1)]\n    ov = [2 for y in range(b - 1)]\n    if m[0] == '0' or n[0] == '0':\n        h[0] = 1\n        v[0] = 1\n    else:\n        h[0] = 0\n        v[0] = 0\n    for ii in range(1, a):\n        if m[ii] == '0':\n            h[ii] = 1\n        elif h[ii - 1] == 1:\n            h[ii] = 0\n        else:\n            h[ii] = 1\n    for ii in range(1, b):\n        if n[ii] == '0':\n            v[ii] = 1\n        elif v[ii - 1] == 1:\n            v[ii] = 0\n        else:\n            v[ii] = 1\n    if a > 1 and b > 1:\n        if h[1] == 1 and v[1] == 1:\n            oh[0] = 0\n            ov[0] = 0\n        else:\n            oh[0] = 1\n            ov[0] = 1\n        for g in range(1, a - 1):\n            if h[g + 1] == 1 and oh[g - 1] == 1:\n                oh[g] = 0\n            else:\n                oh[g] = 1\n        for g in range(1, b - 1):\n            if v[g + 1] == 1 and ov[g - 1] == 1:\n                ov[g] = 0\n            else:\n                ov[g] = 1\n    q = int(input())\n    ans = ''\n    for j in range(q):\n        (x, y) = [int(xx) for xx in input().split()]\n        mini = min(x - 1, y - 1)\n        if mini > 1:\n            x = x - 1\n            y = y - 1\n            if x > y:\n                ans += str(ov[x - y])\n            else:\n                ans += str(oh[y - x])\n        else:\n            x = x - 1\n            y = y - 1\n            if x == 0:\n                ans += str(h[y])\n            elif y == 0:\n                ans += str(v[x])\n            elif x == 1:\n                ans += str(oh[y - 1])\n            elif y == 1:\n                ans += str(ov[x - 1])\n    print(ans)", "num_cases = int(input())\nfor _ in range(num_cases):\n    zero_row = ['0']\n    zero_row.extend(list(input()))\n    zero_column = ['0']\n    zero_column.extend(list(input()))\n    col_limit = min(6, len(zero_row))\n    row_limit = min(6, len(zero_column))\n    board = list()\n    board.append(zero_row)\n    for row_pos in range(1, row_limit):\n        board.append(list())\n        board[row_pos].append(zero_column[row_pos])\n        for pos in range(1, len(zero_row)):\n            if board[row_pos][pos - 1] == '0' or board[row_pos - 1][pos] == '0':\n                board[row_pos].append('1')\n            else:\n                board[row_pos].append('0')\n    for row_pos in range(row_limit, len(zero_column)):\n        board.append(list())\n        board[row_pos].append(zero_column[row_pos])\n        for pos in range(1, col_limit):\n            if board[row_pos][pos - 1] == '0' or board[row_pos - 1][pos] == '0':\n                board[row_pos].append('1')\n            else:\n                board[row_pos].append('0')\n    num_queries = int(input())\n    solutions = list()\n    for pos in range(num_queries):\n        (row, column) = map(int, input().split())\n        if row < row_limit or column < col_limit:\n            solutions.append(board[row][column])\n        else:\n            minimum = min(row, column)\n            solutions.append(board[row - minimum + 5][column - minimum + 5])\n    print(''.join(solutions))", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    m = input().strip()\n    n = input().strip()\n    m = list(m)\n    n = list(n)\n    m = [int(i) for i in m]\n    n = [int(i) for i in n]\n    cols = len(m)\n    rows = len(n)\n    matrix = []\n    diag = []\n    pnt = dict()\n    for i in range(3):\n        if i < rows:\n            rowi = []\n            if i == 0:\n                x = not (n[i] and m[0])\n                rowi.append(x)\n                if x == False:\n                    diag.append(0)\n                    pnt[0] = [0, 0]\n            else:\n                x = not (n[i] and matrix[i - 1][0])\n                rowi.append(x)\n                if x == False:\n                    diag.append(i)\n                    if i not in pnt:\n                        pnt[i] = [i, 0]\n            for j in range(1, cols):\n                if i == 0:\n                    x = not (rowi[-1] and m[j])\n                    rowi.append(x)\n                    if x == False:\n                        diff = -1 * j\n                        diag.append(diff)\n                        if diff not in pnt:\n                            pnt[diff] = [i, j]\n                else:\n                    x = not (rowi[-1] and matrix[i - 1][j])\n                    rowi.append(x)\n                    if x == False:\n                        diff = i - j\n                        diag.append(diff)\n                        if diff not in pnt:\n                            pnt[diff] = [i, j]\n            matrix.append(rowi)\n        else:\n            break\n    for i in range(3, rows):\n        rowi = []\n        x = not (n[i] and matrix[i - 1][0])\n        rowi.append(x)\n        if x == False:\n            diag.append(i)\n            if i not in pnt:\n                pnt[i] = [i, 0]\n        for j in range(1, 3):\n            if j < cols:\n                x = not (rowi[-1] and matrix[i - 1][j])\n                rowi.append(x)\n                if x == False:\n                    diff = i - j\n                    diag.append(diff)\n                    if diff not in pnt:\n                        pnt[diff] = [i, j]\n            else:\n                break\n        matrix.append(rowi)\n    c = Counter(diag)\n    q = int(input())\n    ans = ''\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        diff = x - y\n        if c[diff] > 0:\n            if x > pnt[diff][0]:\n                ans += '0'\n            else:\n                ans += '1'\n        else:\n            ans += '1'\n    print(ans)", "from collections import defaultdict\nfor i in range(int(input())):\n\n    def setbdp(bdp, fdp, s1, s2):\n        bdp[1] = min(int(s1[0]), int(s2[0]))\n        fdp[1] = min(int(s1[0]), int(s2[0]))\n    s = ''\n\n    def nm(s1, s2):\n        (n, m) = (len(s2), len(s1))\n        return (n, m)\n    d = defaultdict(int)\n    s1 = input()\n    s2 = input()\n    (n, m) = nm(s1, s2)\n    fdp = [0] * (m + 1)\n    bdp = [0] * (n + 1)\n    f1dp = [0] * (m + 1)\n    b1dp = [0] * (n + 1)\n    setbdp(bdp, fdp, s1, s2)\n    for i in range(2, n + 1):\n        bdp[i] = min(1 - bdp[i - 1], int(s2[i - 1]))\n    for i in range(2, m + 1):\n        fdp[i] = min(1 - fdp[i - 1], int(s1[i - 1]))\n    try:\n        d[0] = f1dp[2] = b1dp[2] = min(1 - fdp[2], 1 - bdp[2])\n    except:\n        pass\n    for i in range(3, n + 1):\n        b1dp[i] = min(1 - bdp[i], 1 - b1dp[i - 1])\n        d[i - 2] = b1dp[i]\n    for i in range(3, m + 1):\n        f1dp[i] = min(1 - fdp[i], 1 - f1dp[i - 1])\n        d[2 - i] = f1dp[i]\n    for i in range(int(input())):\n        (l, r) = map(int, input().split())\n        if l == 1:\n            s += str(1 - fdp[r])\n        elif r == 1:\n            s += str(1 - bdp[l])\n        else:\n            s += str(1 - d[l - r])\n    print(s)", "def get_next(row, col, flag):\n    next_col = []\n    next_row = []\n    for elem in row[flag:]:\n        if len(next_row) <= 0:\n            next_row.append(not (int(elem) and int(col[0])))\n        else:\n            next_row.append(not (int(elem) and next_row[-1]))\n    for elem in col[1:]:\n        if len(next_col) <= 0:\n            next_col.append(not (int(elem) and next_row[0]))\n        else:\n            next_col.append(not (int(elem) and next_col[-1]))\n    return (next_row, next_col)\nfor i in range(int(input())):\n    row = list(input())\n    col = list(input())\n    (flag, s, next_row2, next_col2) = (0, '', [], [])\n    (next_row, next_col) = get_next(row, col, flag)\n    if len(row) >= 2 and len(col) >= 2:\n        flag = 1\n        (next_row2, next_col2) = get_next(next_row, next_col, flag)\n    for j in range(int(input())):\n        (y, x) = map(int, input().split())\n        if x > 1 and y > 1:\n            if x >= y:\n                s += str(int(next_row2[x - y]))\n            else:\n                s += str(int(next_col2[max(0, y - x - 1)]))\n        elif x >= y:\n            s += str(int(next_row[x - y]))\n        elif y > x:\n            s += str(int(next_col[max(0, y - x - 1)]))\n    print(s)", "t = int(input())\nfor _ in range(t):\n    X = [int(c == '1') for c in input().strip()]\n    m = len(X)\n    Y = [int(c == '1') for c in input().strip()]\n    n = len(Y)\n    B = [[0] * (m + 1 if i < 2 or i == n else 3) for i in range(n + 1)]\n    for i in range(n):\n        B[i][-1] = Y[i]\n    for j in range(m):\n        B[-1][j] = X[j]\n    for i in range(min(n, 2)):\n        for j in range(m):\n            B[i][j] = int(0 in (B[i - 1][j], B[i][j - 1]))\n    for j in range(min(m, 2)):\n        for i in range(2, n):\n            B[i][j] = int(0 in (B[i - 1][j], B[i][j - 1]))\n    destiny = [0] * (n + m + 1)\n    j = 1\n    for i in range(1, n):\n        destiny[i - j] = B[i][j]\n    i = 1\n    for j in range(2, m):\n        destiny[i - j] = B[i][j]\n    q = int(input())\n    R = []\n    for _ in range(q):\n        (i, j) = [int(x) - 1 for x in input().split()]\n        if min(i, j) < 2:\n            R.append(B[i][j])\n        else:\n            R.append(destiny[i - j])\n    print(*R, sep='')", "def fun(str1, str2):\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n    v = int(not (list1[0] and list2[0]))\n    a1 = [v]\n    b1 = [v]\n    for i in range(1, len(str1)):\n        v = int(not (a1[-1] and list1[i]))\n        a1.append(v)\n    for i in range(1, len(str2)):\n        v = int(not (b1[-1] and list2[i]))\n        b1.append(v)\n    if len(str1) >= 2 and len(str2) >= 2:\n        v = int(not (a1[1] and b1[1]))\n        a2 = [v]\n        b2 = [v]\n        for i in range(2, len(str1)):\n            v = int(not (a2[-1] and a1[i]))\n            a2.append(v)\n        for i in range(2, len(str2)):\n            v = int(not (b2[-1] and b1[i]))\n            b2.append(v)\n    q = int(input())\n    for x in range(q):\n        (i, j) = map(int, input().split())\n        if i == 1 or j == 1:\n            diff = i - j\n            if diff >= 0:\n                print(b1[diff], end='')\n            else:\n                print(a1[-diff], end='')\n        else:\n            diff = i - j\n            if diff >= 0:\n                print(b2[diff], end='')\n            else:\n                print(a2[-diff], end='')\n    print()\ntest = int(input())\nfor snju in range(test):\n    str1 = input().strip()\n    str2 = input().strip()\n    fun(str1, str2)", "import sys\n\ndef pmat(a):\n    (r, c) = (len(a), len(a[0]))\n    for i in range(r - 1, -1, -1):\n        for j in range(c):\n            if i == 0 and j == 0:\n                print(a[i][j], '', end='')\n            elif i == 0 or j == 0:\n                print(a[i][j] ^ 1, '', end='')\n            else:\n                print(a[i][j], '', end='')\n        print('')\n    print('')\n\ndef force(m, n):\n    (r, c) = (len(n), len(m))\n    res = [[0] * (c + 1) for i in range(r + 1)]\n    res[0] = ['x'] + m\n    for i in range(r):\n        res[i + 1][0] = n[i]\n    for i in range(1, r + 1):\n        for j in range(1, c + 1):\n            (l, d) = (res[i - 1][j], res[i][j - 1])\n            res[i][j] = max(l ^ 1, d ^ 1)\n    pmat(res)\n    ans = ''\n    for q in range(int(input())):\n        (x, y) = map(int, input().split())\n        ans += str(res[x][y])\n    return ans\n\ndef solve(m, n):\n    (r, c) = ([0] * (len(m) + 1), [0] * (len(n) + 1))\n    r[0] = n[0]\n    for i in range(1, len(m) + 1):\n        r[i] = max(r[i - 1] ^ 1, m[i - 1] ^ 1)\n    c[0] = m[0]\n    for i in range(1, len(n) + 1):\n        c[i] = max(c[i - 1] ^ 1, n[i - 1] ^ 1)\n    if len(m) > 1 and len(n) > 1:\n        (r2, c2) = ([0] * len(m), [0] * len(n))\n        r2[0] = c[2]\n        for i in range(2, len(r)):\n            r2[i - 1] = max(r2[i - 2] ^ 1, r[i] ^ 1)\n        c2[0] = r[2]\n        for i in range(2, len(c)):\n            c2[i - 1] = max(c2[i - 2] ^ 1, c[i] ^ 1)\n    ans = ''\n    for q in range(int(input())):\n        (x, y) = map(int, input().split())\n        if x > 1 and y > 1:\n            sub = min(x, y) - 1\n            (x, y) = (x - sub, y - sub)\n            if x < y:\n                ans += str(r2[y])\n            else:\n                ans += str(c2[x])\n        else:\n            sub = min(x, y) - 1\n            (x, y) = (x - sub, y - sub)\n            if x < y:\n                ans += str(r[y])\n            else:\n                ans += str(c[x])\n    return ans\nfor _ in range(int(input())):\n    m = [int(x) for x in input()]\n    n = [int(x) for x in input()]\n    print(solve(m, n))", "def toggle(number):\n    if number == 1:\n        return 0\n    else:\n        return 1\n\ndef make_dict():\n    mid1 = int(N[0][0]) and int(M[0][0])\n    k = '1_1'\n    dictionary[k] = mid1\n    mid = mid1\n    for i in range(2, len(N[0]) + 1):\n        k = str(i) + '_' + str(1)\n        dictionary[k] = int(N[0][i - 1]) and toggle(mid)\n        mid = dictionary[k]\n    mid = mid1\n    for i in range(2, len(M[0]) + 1):\n        k = str(1) + '_' + str(i)\n        dictionary[k] = int(M[0][i - 1]) and toggle(mid)\n        mid = dictionary[k]\n    if len(N[0]) > 1 and len(M[0]) > 1:\n        mid2 = toggle(dictionary['2_1']) and toggle(dictionary['1_2'])\n        k = '2_2'\n        dictionary[k] = mid2\n        mid = mid2\n        for i in range(3, len(N[0]) + 1):\n            k = str(i) + '_' + '2'\n            dictionary[k] = toggle(dictionary[str(i) + '_' + '1']) and toggle(mid)\n            mid = dictionary[k]\n        mid = mid2\n        for i in range(3, len(M[0]) + 1):\n            k = '2' + '_' + str(i)\n            dictionary[k] = toggle(dictionary['1' + '_' + str(i)]) and toggle(mid)\n            mid = dictionary[k]\n\ndef win(x, y):\n    k = str(x) + '_' + str(y)\n    return dictionary[k]\nT = int(input())\nfor t in range(T):\n    M = input().strip().split(' ')\n    N = input().strip().split(' ')\n    Q = int(input())\n    dictionary = {}\n    result = ''\n    make_dict()\n    for q in range(Q):\n        (x, y) = input().strip().split(' ')[0:2]\n        if int(x) > 1 and int(y) > 1:\n            c = int(y) - int(x)\n            if c == 0:\n                (x, y) = (2, 2)\n            elif c < 0:\n                x = abs(c) + 2\n                y = 2\n            elif c > 0:\n                y = c + 2\n                x = 2\n        result += str(toggle(win(int(x), int(y))))\n    print(result)", "t = int(input())\nfor _ in range(t):\n    m = input().strip()\n    n = input().strip()\n    (sm, sn) = (len(m), len(n))\n    arr = []\n    for i in range(3):\n        arr.append([0 for x in range(sm + 1)])\n    i = 3\n    while i <= sn:\n        arr.append([0 for x in range(3)])\n        i += 1\n    for i in range(1, sm + 1):\n        arr[0][i] = int(m[i - 1])\n    for i in range(1, sn + 1):\n        arr[i][0] = int(n[i - 1])\n    for j in range(1, 3):\n        for i in range(j, sm + 1):\n            arr[j][i] = int(arr[j][i - 1] == 0 or arr[j - 1][i] == 0)\n        for i in range(j, sn + 1):\n            arr[i][j] = int(arr[i - 1][j] == 0 or arr[i][j - 1] == 0)\n    q = int(input())\n    s = ''\n    for i in range(q):\n        (x, y) = map(int, input().strip().split())\n        if x > 2 and y > 2:\n            if x < y:\n                diff = x - 2\n                x = 2\n                y -= diff\n            else:\n                diff = y - 2\n                y = 2\n                x -= diff\n        s += str(arr[x][y])\n    print(s)", "def solve(X, Y, qq):\n    X = [0] + list(map(int, X))\n    Y = [0] + list(map(int, Y))\n    X1 = [Y[1]]\n    Y1 = [X[1]]\n    X2 = [Y[2] if len(Y) > 2 else 0]\n    Y2 = [X[2] if len(X) > 2 else 0]\n    for i in range(1, len(X)):\n        X1 += [0 if X[i] + X1[i - 1] > 1 else 1]\n        X2 += [0 if X1[i] + X2[i - 1] > 1 else 1]\n    for i in range(1, len(Y)):\n        Y1 += [0 if Y[i] + Y1[i - 1] > 1 else 1]\n        Y2 += [0 if Y1[i] + Y2[i - 1] > 1 else 1]\n    ret = []\n    for (x, y) in qq:\n        z = 0\n        if x == 1:\n            z = X1[y]\n        elif y == 1:\n            z = Y1[x]\n        else:\n            m = min(x, y)\n            x -= m - 2\n            y -= m - 2\n            if x == 2:\n                z = X2[y]\n            else:\n                z = Y2[x]\n        ret += [z]\n    return ''.join(map(str, ret))\nimport sys\nf = sys.stdin\nt = int(f.readline())\nfor i in range(t):\n    X = f.readline()[:-1]\n    Y = f.readline()[:-1]\n    q = int(f.readline())\n    qq = []\n    for j in range(q):\n        (x, y) = map(int, f.readline().split())\n        qq += [(x, y)]\n    z = solve(X, Y, qq)\n    print(z)", "import math\nfrom collections import defaultdict as dd\nimport heapq\nfrom bisect import bisect_left as bl\n\ndef make(x1, x2, l, t):\n    for i in range(t, l):\n        if x1[i] == 1 and x2[-1] == 1:\n            x2.append(0)\n        else:\n            x2.append(1)\n    return x2\nfor _ in range(int(input())):\n    c1 = [int(i) for i in input()]\n    m = len(c1)\n    r1 = [int(i) for i in input()]\n    n = len(r1)\n    if r1[0] == 0 or c1[0] == 0:\n        (c2, r2) = ([1], [1])\n    else:\n        (c2, r2) = ([0], [0])\n    c2 = make(c1, c2, m, 1)\n    r2 = make(r1, r2, n, 1)\n    if n > 1 and m > 1:\n        if c2[1] == 0 or r2[1] == 0:\n            (c3, r3) = ([1], [1])\n        else:\n            (c3, r3) = ([0], [0])\n        c3 = make(c2, c3, m, 2)\n        r3 = make(r2, r3, n, 2)\n    ans = ''\n    for q in range(int(input())):\n        (x, y) = [int(i) for i in input().split(' ')]\n        if x == 1:\n            ans += str(c2[y - 1])\n        elif y == 1:\n            ans += str(r2[x - 1])\n        elif x < y:\n            ans += str(c3[y - x])\n        else:\n            ans += str(r3[x - y])\n    print(ans)", "from collections import defaultdict\n\ndef winner(x, y, win, lose, wp):\n    if not win:\n        return (x + y) % 2\n    if not lose:\n        if x == 1 or y == 1:\n            return 1\n        return (x + y) % 2\n    if x == 1 or x == 2 or y == 1 or (y == 2):\n        return wp[x, y]\n    mn = min(x, y)\n    dif = mn - 2\n    (x1, y1) = (x - dif, y - dif)\n    z = wp[x1, y1]\n    return z\nfor _ in range(int(input())):\n    m = input()\n    n = input()\n    ans = ''\n    (lm, ln) = (len(m), len(n))\n    win = defaultdict(int)\n    lose = defaultdict(int)\n    wp = defaultdict(int)\n    for i in range(lm):\n        if m[i] == '1':\n            lose[0, i + 1] = 1\n        else:\n            win[0, i + 1] = 1\n    for i in range(ln):\n        if n[i] == '1':\n            lose[i + 1, 0] = 1\n        else:\n            win[i + 1, 0] = 1\n    wp[1, 1] = win[1, 0] or win[0, 1]\n    for i in range(2, ln + 1):\n        if win[i, 0]:\n            wp[i, 1] = 1\n        else:\n            wp[i, 1] = int(not wp[i - 1, 1])\n    for i in range(2, lm + 1):\n        if win[0, i]:\n            wp[1, i] = 1\n        else:\n            wp[1, i] = int(not wp[1, i - 1])\n    for i in range(2, ln + 1):\n        wp[i, 2] = int(not wp[i - 1, 2] & wp[i, 1])\n    for i in range(2, lm + 1):\n        wp[2, i] = int(not wp[2, i - 1] & wp[1, i])\n    for i in range(int(input())):\n        (x, y) = map(int, input().split())\n        ans += str(winner(x, y, win, lose, wp))\n    print(ans)", "def tog(n):\n    if n == 1:\n        return 0\n    if n == 0:\n        return 1\n    return 'WTF'\n\ndef print_grid(grid, N, M):\n    for a in range(N):\n        for b in range(M):\n            if a <= 2 or b <= 2:\n                print(grid[a][b], end=' ')\n            elif a <= b:\n                print(grid[2][b - (a - 2)], end=' ')\n            else:\n                print(grid[a - (b - 2)][2], end=' ')\n        print()\n\ndef fn():\n    row0 = '-' + input()\n    column0 = '-' + input()\n    C = len(row0)\n    R = len(column0)\n    C2 = min(3, C)\n    R2 = min(3, R)\n    grid_top = [[-1] * C for i in range(R2)]\n    grid_left = [[-1] * C2 for i in range(R)]\n    for i in range(0, R2):\n        try:\n            temp = int(column0[i])\n            grid_top[i][0] = temp\n        except:\n            grid_top[i][0] = column0[i]\n    for j in range(1, C):\n        grid_top[0][j] = int(row0[j])\n        if j == 1:\n            grid_top[1][j] = grid_top[0][j] * grid_top[1][j - 1]\n            try:\n                grid_top[2][j] = grid_top[2][j - 1] * tog(grid_top[1][j])\n            except:\n                pass\n        else:\n            grid_top[1][j] = grid_top[0][j] * tog(grid_top[1][j - 1])\n            try:\n                grid_top[2][j] = tog(grid_top[1][j]) * tog(grid_top[2][j - 1])\n            except:\n                pass\n    for j in range(0, C2):\n        try:\n            temp = int(row0[j])\n            grid_left[0][j] = temp\n        except:\n            grid_left[0][j] = row0[j]\n    for i in range(1, R):\n        grid_left[i][0] = int(column0[i])\n        if i == 1:\n            grid_left[i][1] = grid_left[i - 1][1] * grid_left[i][0]\n            try:\n                grid_left[i][2] = grid_left[i - 1][2] * tog(grid_left[i][1])\n            except:\n                pass\n        else:\n            grid_left[i][1] = grid_left[i][0] * tog(grid_left[i - 1][1])\n            try:\n                grid_left[i][2] = tog(grid_left[i - 1][2]) * tog(grid_left[i][1])\n            except:\n                pass\n    Q = int(input())\n    for i in range(Q):\n        a = input().split()\n        p = int(a[0])\n        q = int(a[1])\n        if p <= 2:\n            print(tog(grid_top[p][q]), end='')\n        elif q <= 2:\n            print(tog(grid_left[p][q]), end='')\n        elif p == q:\n            print(tog(grid_top[2][2]), end='')\n        elif p > q:\n            print(tog(grid_left[p - (q - 2)][2]), end='')\n        elif p < q:\n            print(tog(grid_top[2][q - (p - 2)]), end='')\nT = int(input())\nfor i in range(T):\n    fn()\n    print()", "for t in range(int(input())):\n    top = list(map(int, list(input().strip())))\n    left = list(map(int, list(input().strip())))\n    row0 = [not top[0] or not left[0]]\n    for i in range(1, len(top)):\n        row0.append(not top[i] or not row0[-1])\n    if len(left) > 1:\n        row1 = [not row0[0] or not left[1]]\n        for i in range(1, len(top)):\n            row1.append(not row0[i] or not row1[-1])\n    col0 = [not left[0] or not top[0]]\n    for i in range(1, len(left)):\n        col0.append(not left[i] or not col0[-1])\n    if len(top) > 1:\n        col1 = [not col0[0] or not top[1]]\n        for i in range(1, len(left)):\n            col1.append(not col0[i] or not col1[-1])\n    ans = []\n    for q in range(int(input())):\n        (x, y) = map(int, input().split())\n        (x, y) = (x - 1, y - 1)\n        if x == 0:\n            res = row0[y]\n        elif y == 0:\n            res = col0[x]\n        elif x <= y:\n            res = row1[y - (x - 1)]\n        else:\n            res = col1[x - (y - 1)]\n        ans.append(int(res))\n    print(*ans, sep='')", "taste_cash = int(input())\nfor f_k in range(taste_cash):\n    s1 = input()\n    s2 = input()\n    m = len(s1)\n    n = len(s2)\n    a1 = []\n    if s1[0] == s2[0] == '1':\n        a1.append('0')\n    else:\n        a1.append('1')\n    for j in range(1, m):\n        if a1[-1] == '1' and s1[j] == '1':\n            a1.append('0')\n        else:\n            a1.append('1')\n    a2 = []\n    a2.append(a1[0])\n    for j in range(1, n):\n        if a2[-1] == '1' and s2[j] == '1':\n            a2.append('0')\n        else:\n            a2.append('1')\n    if n == 1:\n        s = ''\n        nq = int(input())\n        for kk in range(nq):\n            (x, y) = [int(i) - 1 for i in input().split(' ')]\n            s += a1[y]\n        print(s)\n    elif m == 1:\n        s = ''\n        nq = int(input())\n        for kk in range(nq):\n            (x, y) = [int(i) - 1 for i in input().split(' ')]\n            s += a2[y]\n        print(s)\n    else:\n        b1 = [a2[1]]\n        for j in range(1, m):\n            if b1[-1] == '1' and a1[j] == '1':\n                b1.append('0')\n            else:\n                b1.append('1')\n        b2 = [a1[1]]\n        for j in range(1, n):\n            if b2[-1] == '1' and a2[j] == '1':\n                b2.append('0')\n            else:\n                b2.append('1')\n        nq = int(input())\n        s = ''\n        for kk in range(nq):\n            (x, y) = [int(i) - 1 for i in input().split(' ')]\n            if x == 0:\n                s += a1[y]\n            elif y == 0:\n                s += a2[x]\n            elif x == y:\n                s += b2[1]\n            elif x < y:\n                s += b1[y - x + 1]\n            else:\n                s += b2[x - y + 1]\n        print(s)", "t = int(input())\nfor test in range(t):\n    a = input()\n    b = input()\n    n = len(a)\n    m = len(b)\n    while n < 4:\n        a += '0'\n        n += 1\n    while m < 4:\n        b += '0'\n        m += 1\n    a1 = ''\n    b1 = ''\n    for i in a:\n        a1 += str(1 - int(i))\n    for i in b:\n        b1 += str(1 - int(i))\n    an = []\n    for i in range(3):\n        an.append([])\n    for i in range(3):\n        for j in range(n + 1):\n            an[i].append(0)\n    bn = []\n    for i in range(m + 1):\n        bn.append([])\n    for i in range(m + 1):\n        for j in range(3):\n            bn[i].append(0)\n    for i in range(1, 3):\n        bn[0][i] = int(a1[i - 1])\n    for i in range(1, m + 1):\n        bn[i][0] = int(b1[i - 1])\n    for i in range(1, n + 1):\n        an[0][i] = int(a1[i - 1])\n    for i in range(1, 3):\n        an[i][0] = int(b1[i - 1])\n    for i in range(1, 3):\n        for j in range(1, n + 1):\n            an[i][j] = 1 - max(an[i - 1][j], an[i][j - 1])\n    for i in range(1, m + 1):\n        for j in range(1, 3):\n            bn[i][j] = 1 - max(bn[i - 1][j], bn[i][j - 1])\n    ans = ''\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        x1 = min(x - 2, y - 2)\n        if x < 3 and y < 3:\n            ans += str(an[x][y])\n        elif x < 3 and y >= 3:\n            ans += str(an[x][y])\n        elif x >= 3 and y < 3:\n            ans += str(bn[x][y])\n        elif x > y:\n            ans += str(bn[x - x1][y - x1])\n        else:\n            ans += str(an[x - x1][y - x1])\n    anw = ''\n    for i in range(len(ans)):\n        if ans[i] == '1':\n            anw += '0'\n        else:\n            anw += '1'\n    print(anw)", "T = int(input())\nfor _ in range(T):\n    (*C,) = map(int, input())\n    N = len(C)\n    (*D,) = map(int, input())\n    M = len(D)\n    dp_x = [[0] * (N + 1) for i in range(4)]\n    for i in range(N):\n        dp_x[0][i + 1] = C[i]\n    for i in range(min(3, M)):\n        dp_x[i + 1][0] = D[i]\n    dp_y = [[0] * (M + 1) for i in range(4)]\n    for i in range(M):\n        dp_y[0][i + 1] = D[i]\n    for i in range(min(3, N)):\n        dp_y[i + 1][0] = C[i]\n    for i in range(3):\n        for j in range(N):\n            if dp_x[i][j + 1] == dp_x[i + 1][j] == 1:\n                dp_x[i + 1][j + 1] = 0\n            else:\n                dp_x[i + 1][j + 1] = 1\n        for j in range(M):\n            if dp_y[i][j + 1] == dp_y[i + 1][j] == 1:\n                dp_y[i + 1][j + 1] = 0\n            else:\n                dp_y[i + 1][j + 1] = 1\n    ans = []\n    Q = int(input())\n    for q in range(Q):\n        (x, y) = map(int, input().split())\n        if x < 4 and y < 4:\n            assert dp_x[x][y] == dp_y[y][x]\n            ans.append(str(dp_x[x][y]))\n        elif x < 4:\n            ans.append(str(dp_x[x][y]))\n        elif y < 4:\n            ans.append(str(dp_y[y][x]))\n        else:\n            z = min(x, y) - 3\n            if x > y:\n                ans.append(str(dp_y[y - z][x - z]))\n            else:\n                ans.append(str(dp_x[x - z][y - z]))\n    print(*ans, sep='')", "import sys\nfrom collections import defaultdict as dd\nfrom itertools import permutations as pp\nfrom itertools import combinations as cc\nfrom collections import Counter as ccd\nfrom random import randint as rd\nfrom bisect import bisect_left as bl\nimport heapq\nmod = 10 ** 9 + 7\n\ndef ri(flag=0):\n    if flag == 0:\n        return [int(i) for i in input().split()]\n    else:\n        return int(input())\nfor _ in range(ri(1)):\n    a = input()\n    b = input()\n    m = len(a)\n    n = len(b)\n    mat = [dd(int) for i in range(n + 1)]\n    for i in range(m):\n        mat[0][i + 1] = int(a[i])\n    for i in range(n):\n        mat[i + 1][0] = int(b[i])\n    for i in range(1, min(3, n + 1)):\n        for j in range(1, m + 1):\n            mat[i][j] = max(mat[i - 1][j] ^ 1, mat[i][j - 1] ^ 1)\n    for i in range(1, n + 1):\n        for j in range(1, min(3, m + 1)):\n            mat[i][j] = max(mat[i - 1][j] ^ 1, mat[i][j - 1] ^ 1)\n    q = ri(1)\n    ans = []\n    for i in range(q):\n        (l, r) = ri()\n        if l <= 2 or r <= 2:\n            pass\n        else:\n            k1 = l - 2\n            k2 = r - 2\n            if l > r:\n                l = l - k2\n                r = r - k2\n            elif l < r:\n                l = l - k1\n                r = r - k1\n            else:\n                l = 2\n                r = 2\n        ans.append(str(mat[l][r]))\n    print(''.join(ans))", "t = int(input())\nfor _ in range(t):\n    m = input()\n    n = input()\n    ml = len(m)\n    nl = len(n)\n    ar1 = [0] * ml\n    ar2 = [0] * nl\n    arr1 = [0] * (ml - 1)\n    arr2 = [0] * (nl - 1)\n    if m[0] == '0' or n[0] == '0':\n        ar1[0] = 'w'\n        ar2[0] = 'w'\n    else:\n        ar1[0] = 'l'\n        ar2[0] = 'l'\n    for i in range(1, ml):\n        if m[i] == '0' or ar1[i - 1] == 'l':\n            ar1[i] = 'w'\n        else:\n            ar1[i] = 'l'\n    for i in range(1, nl):\n        if n[i] == '0' or ar2[i - 1] == 'l':\n            ar2[i] = 'w'\n        else:\n            ar2[i] = 'l'\n    if ml > 1 and nl > 1:\n        if ar1[1] == 'l' or ar2[1] == 'l':\n            arr1[0] = 'w'\n            arr2[0] = 'w'\n        else:\n            arr1[0] = 'l'\n            arr2[0] = 'l'\n        for i in range(2, ml):\n            if ar1[i] == 'l' or arr1[i - 2] == 'l':\n                arr1[i - 1] = 'w'\n            else:\n                arr1[i - 1] = 'l'\n        for i in range(2, nl):\n            if ar2[i] == 'l' or arr2[i - 2] == 'l':\n                arr2[i - 1] = 'w'\n            else:\n                arr2[i - 1] = 'l'\n    ans = ''\n    for i in range(int(input())):\n        (u, v) = tuple(map(int, input().split()))\n        if u == 1:\n            if ar1[v - 1] == 'l':\n                ans += '0'\n            else:\n                ans += '1'\n        elif v == 1:\n            if ar2[u - 1] == 'l':\n                ans += '0'\n            else:\n                ans += '1'\n        else:\n            mn = min(u, v) - 1\n            u -= mn\n            v -= mn\n            if u == 1:\n                if arr1[v - 1] == 'l':\n                    ans += '0'\n                else:\n                    ans += '1'\n            elif v == 1:\n                if arr2[u - 1] == 'l':\n                    ans += '0'\n                else:\n                    ans += '1'\n    print(ans)"]