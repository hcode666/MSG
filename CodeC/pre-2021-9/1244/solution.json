["import collections as cs\nimport math\nPoint = cs.namedtuple('Point', ['x', 'y', 'col', 'angle'])\n\ndef shift_and_set_angles(points, p):\n    ans = []\n    for q in points:\n        x = q.x - p.x\n        y = q.y - p.y\n        if y >= 0:\n            angle = x / math.sqrt(x * x + y * y)\n        else:\n            angle = -x / math.sqrt(x * x + y * y)\n        ans.append(Point(x, y, q.col, angle))\n    return ans\n\ndef sortbyangle(points, left, right):\n    l = left\n    r = right\n    piv = points[int((left + right) / 2)].angle\n    while l <= r:\n        while points[l].angle > piv:\n            l += 1\n        while points[r].angle < piv:\n            r -= 1\n        if l <= r:\n            tmp = points[l]\n            points[l] = points[r]\n            points[r] = tmp\n            l += 1\n            r -= 1\n    if left < r:\n        sortbyangle(points, left, r)\n    if right > l:\n        sortbyangle(points, l, right)\n\ndef printpoints(points):\n    for p in points:\n        print(p.x, p.y, ' angle: ', p.angle, '; color: ', p.col)\n\ndef dotp(p, q):\n    return p.x * q.x + p.y * q.y\nT = int(input())\nfor ii in range(T):\n    blue = []\n    red = []\n    (n, m) = [int(i) for i in input().split()]\n    for i in range(n):\n        (x, y) = [int(j) for j in input().split()]\n        blue.append(Point(x, y, 1, -1))\n    for i in range(m):\n        (x, y) = [int(j) for j in input().split()]\n        red.append(Point(x, y, 0, -1))\n    ans = 10000000\n    for i in range(n):\n        points = []\n        if i != 0:\n            points.extend(blue[:i])\n        if i != n - 1:\n            points.extend(blue[i + 1:])\n        points.extend(red)\n        points = shift_and_set_angles(points, blue[i])\n        sortbyangle(points, 0, n + m - 2)\n        blue_count_pos = 0\n        blue_count_neg = 0\n        red_count_pos = 0\n        red_count_neg = 0\n        if points[0].y >= 0:\n            normal = Point(points[0].y, -points[0].x, 1, -1)\n        else:\n            normal = Point(-points[0].y, points[0].x, 1, -1)\n        for k in range(1, n + m - 1):\n            if dotp(points[k], normal) > 0:\n                if points[k].col:\n                    blue_count_pos += 1\n                else:\n                    red_count_pos += 1\n            elif points[k].col:\n                blue_count_neg += 1\n            else:\n                red_count_neg += 1\n        if blue_count_pos + red_count_neg < ans:\n            ans = blue_count_pos + red_count_neg\n        if blue_count_neg + red_count_pos < ans:\n            ans = blue_count_neg + red_count_pos\n        if points[0].col == 1:\n            if points[0].y >= 0:\n                blue_count_pos += 1\n            else:\n                blue_count_neg += 1\n        elif points[0].y >= 0:\n            red_count_pos += 1\n        else:\n            red_count_neg += 1\n        for k in range(1, n + m - 1):\n            if points[k].col == 1:\n                if points[k].y < 0:\n                    blue_count_pos -= 1\n                else:\n                    blue_count_neg -= 1\n            elif points[k].y < 0:\n                red_count_pos -= 1\n            else:\n                red_count_neg -= 1\n            if blue_count_pos + red_count_neg < ans:\n                ans = blue_count_pos + red_count_neg\n            if blue_count_neg + red_count_pos < ans:\n                ans = blue_count_neg + red_count_pos\n            if points[k].col == 1:\n                if points[k].y >= 0:\n                    blue_count_pos += 1\n                else:\n                    blue_count_neg += 1\n            elif points[k].y >= 0:\n                red_count_pos += 1\n            else:\n                red_count_neg += 1\n    print(ans)", "import collections as cs\nimport math\nPoint = cs.namedtuple('Point', ['x', 'y', 'col', 'angle'])\n\ndef shift_and_set_angles(points, p):\n    ans = []\n    for q in points:\n        x = q.x - p.x\n        y = q.y - p.y\n        if y >= 0:\n            angle = x / math.sqrt(x * x + y * y)\n        else:\n            angle = -x / math.sqrt(x * x + y * y)\n        ans.append(Point(x, y, q.col, angle))\n    return ans\n\ndef sortbyangle(points, left, right):\n    l = left\n    r = right\n    piv = points[int((left + right) / 2)].angle\n    while l <= r:\n        while points[l].angle > piv:\n            l += 1\n        while points[r].angle < piv:\n            r -= 1\n        if l <= r:\n            tmp = points[l]\n            points[l] = points[r]\n            points[r] = tmp\n            l += 1\n            r -= 1\n    if left < r:\n        sortbyangle(points, left, r)\n    if right > l:\n        sortbyangle(points, l, right)\n\ndef printpoints(points):\n    for p in points:\n        print(p.x, p.y, ' angle: ', p.angle, '; color: ', p.col)\n\ndef dotp(p, q):\n    return p.x * q.x + p.y * q.y\nT = int(input())\nfor ii in range(T):\n    blue = []\n    red = []\n    (n, m) = [int(i) for i in input().split()]\n    for i in range(n):\n        (x, y) = [int(j) for j in input().split()]\n        blue.append(Point(x, y, 1, -1))\n    for i in range(m):\n        (x, y) = [int(j) for j in input().split()]\n        red.append(Point(x, y, 0, -1))\n    ans = 10000000\n    for i in range(n):\n        points = []\n        if i != 0:\n            points.extend(blue[:i])\n        if i != n - 1:\n            points.extend(blue[i + 1:])\n        points.extend(red)\n        points = shift_and_set_angles(points, blue[i])\n        sortbyangle(points, 0, n + m - 2)\n        blue_count_pos = 0\n        blue_count_neg = 0\n        red_count_pos = 0\n        red_count_neg = 0\n        if points[0].y >= 0:\n            normal = Point(points[0].y, -points[0].x, 1, -1)\n        else:\n            normal = Point(-points[0].y, points[0].x, 1, -1)\n        for k in range(1, n + m - 1):\n            if dotp(points[k], normal) > 0:\n                if points[k].col:\n                    blue_count_pos += 1\n                else:\n                    red_count_pos += 1\n            elif points[k].col:\n                blue_count_neg += 1\n            else:\n                red_count_neg += 1\n        if blue_count_pos + red_count_neg < ans:\n            ans = blue_count_pos + red_count_neg\n        if blue_count_neg + red_count_pos < ans:\n            ans = blue_count_neg + red_count_pos\n        if points[0].col == 1:\n            if points[0].y >= 0:\n                blue_count_pos += 1\n            else:\n                blue_count_neg += 1\n        elif points[0].y >= 0:\n            red_count_pos += 1\n        else:\n            red_count_neg += 1\n        for k in range(1, n + m - 1):\n            if points[k].col == 1:\n                if points[k].y < 0:\n                    blue_count_pos -= 1\n                else:\n                    blue_count_neg -= 1\n            elif points[k].y < 0:\n                red_count_pos -= 1\n            else:\n                red_count_neg -= 1\n            if blue_count_pos + red_count_neg < ans:\n                ans = blue_count_pos + red_count_neg\n            if blue_count_neg + red_count_pos < ans:\n                ans = blue_count_neg + red_count_pos\n            if points[k].col == 1:\n                if points[k].y >= 0:\n                    blue_count_pos += 1\n                else:\n                    blue_count_neg += 1\n            elif points[k].y >= 0:\n                red_count_pos += 1\n            else:\n                red_count_neg += 1\n    print(ans)"]