["for tc in range(int(input())):\n    (n, k) = [int(a) for a in input().split()]\n    a = [0] + [int(a) for a in input().split()]\n    res = []\n    for i1 in range(1, n):\n        while a[i1] != i1 and a[a[i1]] != i1:\n            i2 = a[i1]\n            i3 = a[i2]\n            res += [[i1, i2, i3]]\n            (a[i2], a[i3], a[i1]) = (i2, i3, a[i3])\n    pair = [(i1, a[i1]) for i1 in range(1, n + 1) if a[i1] > i1]\n    if len(pair) % 2:\n        print(-1)\n    else:\n        while pair:\n            (i1, i2) = pair.pop()\n            (i3, i4) = pair.pop()\n            res += [[i1, i2, i3], [i1, i4, i3]]\n        print(len(res), *['\\n' + ' '.join(map(str, r)) for r in res])", "for tc in range(int(input())):\n    (n, k) = [int(a) for a in input().split()]\n    a = [0] + [int(a) for a in input().split()]\n    res = []\n    for i1 in range(1, n):\n        while a[i1] != i1 and a[a[i1]] != i1:\n            i2 = a[i1]\n            i3 = a[i2]\n            res += [[i1, i2, i3]]\n            (a[i2], a[i3], a[i1]) = (i2, i3, a[i3])\n    pair = [(i1, a[i1]) for i1 in range(1, n + 1) if a[i1] > i1]\n    if len(pair) % 2:\n        print(-1)\n    else:\n        while pair:\n            (i1, i2) = pair.pop()\n            (i3, i4) = pair.pop()\n            res += [[i1, i2, i3], [i1, i4, i3]]\n        print(len(res), *['\\n' + ' '.join(map(str, r)) for r in res])", "for tc in range(int(input())):\n    (n, k) = [int(a) for a in input().split()]\n    a = [0] + [int(a) for a in input().split()]\n    res = []\n    for i1 in range(1, n):\n        while a[i1] != i1 and a[a[i1]] != i1:\n            i2 = a[i1]\n            i3 = a[i2]\n            res += [[i1, i2, i3]]\n            (a[i2], a[i3], a[i1]) = (i2, i3, a[i3])\n    pair = [(i1, a[i1]) for i1 in range(1, n + 1) if a[i1] > i1]\n    if len(pair) % 2:\n        print(-1)\n    else:\n        while pair:\n            (i1, i2) = pair.pop()\n            (i3, i4) = pair.pop()\n            res += [[i1, i2, i3], [i1, i4, i3]]\n        print(len(res), *['\\n' + ' '.join(map(str, r)) for r in res])", "for tc in range(int(input())):\n    (n, k) = [int(a) for a in input().split()]\n    a = [0] + [int(a) for a in input().split()]\n    res = []\n    for i1 in range(1, n):\n        while a[i1] != i1 and a[a[i1]] != i1:\n            i2 = a[i1]\n            i3 = a[i2]\n            res += [[i1, i2, i3]]\n            (a[i2], a[i3], a[i1]) = (i2, i3, a[i3])\n    pair = [(i1, a[i1]) for i1 in range(1, n + 1) if a[i1] > i1]\n    if len(pair) % 2:\n        print(-1)\n    else:\n        while pair:\n            (i1, i2) = pair.pop()\n            (i3, i4) = pair.pop()\n            res += [[i1, i2, i3], [i1, i4, i3]]\n        print(len(res), *['\\n' + ' '.join(map(str, r)) for r in res])", "for tc in range(int(input())):\n    (n, k) = [int(a) for a in input().split()]\n    a = [0] + [int(a) for a in input().split()]\n    res = []\n    for i1 in range(1, n):\n        while a[i1] != i1 and a[a[i1]] != i1:\n            i2 = a[i1]\n            i3 = a[i2]\n            res += [[i1, i2, i3]]\n            (a[i2], a[i3], a[i1]) = (i2, i3, a[i3])\n    pair = [(i1, a[i1]) for i1 in range(1, n + 1) if a[i1] > i1]\n    if len(pair) % 2:\n        print(-1)\n    else:\n        while pair:\n            (i1, i2) = pair.pop()\n            (i3, i4) = pair.pop()\n            res += [[i1, i2, i3], [i1, i4, i3]]\n        print(len(res), *['\\n' + ' '.join(map(str, r)) for r in res])", "for tc in range(int(input())):\n    (n, k) = [int(a) for a in input().split()]\n    pp = [0] + [int(a) for a in input().split()]\n    res = []\n    for i1 in range(1, n):\n        while pp[i1] != i1 and pp[pp[i1]] != i1:\n            i2 = pp[i1]\n            i3 = pp[i2]\n            res += [[i1, i2, i3]]\n            (pp[i2], pp[i3], pp[i1]) = (i2, i3, pp[i3])\n    pair = [(i1, pp[i1]) for i1 in range(1, n + 1) if pp[i1] > i1]\n    if len(pair) % 2:\n        print(-1)\n        continue\n    while pair:\n        (i1, i2) = pair.pop()\n        (i3, i4) = pair.pop()\n        res += [[i1, i2, i3], [i1, i4, i3]]\n    print(len(res))\n    print(*[' '.join(map(str, r)) + '\\n' for r in res], sep='\\n')", "for tc in range(int(input())):\n    (n, k) = [int(a) for a in input().split()]\n    pp = [0] + [int(a) for a in input().split()]\n    res = []\n    for i1 in range(1, n):\n        while pp[i1] != i1 and pp[pp[i1]] != i1:\n            i2 = pp[i1]\n            i3 = pp[i2]\n            res += [[i1, pp[i1], pp[i2]]]\n            (pp[i2], pp[i3], pp[i1]) = (i2, i3, pp[i3])\n    pair = [(i1, pp[i1]) for i1 in range(1, n + 1) if pp[i1] > i1]\n    if len(pair) % 2:\n        print(-1)\n    else:\n        while pair:\n            (i1, i2) = pair.pop()\n            (i3, i4) = pair.pop()\n            res += [[i1, i2, i3], [i1, i4, i3]]\n        print(len(res), *['\\n' + ' '.join(map(str, r)) for r in res])", "for tc in range(int(input())):\n    (n, k) = [int(a) for a in input().split()]\n    pp = [0] + [int(a) for a in input().split()]\n    res = []\n    for i1 in range(1, n):\n        while pp[i1] != i1 and pp[pp[i1]] != i1:\n            i2 = pp[i1]\n            i3 = pp[i2]\n            res += [[i1, pp[i1], pp[i2]]]\n            (pp[i2], pp[i3], pp[i1]) = (i2, i3, pp[i3])\n    pair = [(i1, pp[i1]) for i1 in range(1, n + 1) if pp[i1] > i1]\n    if len(pair) % 2:\n        print(-1)\n    else:\n        while pair:\n            (i1, i2) = pair.pop()\n            (i3, i4) = pair.pop()\n            res += [[i1, i2, i3], [i1, i4, i3]]\n        print(len(res), *[' '.join(map(str, r)) + '\\n' for r in res], sep='\\n')", "for tc in range(int(input())):\n    (n, k) = [int(a) for a in input().split()]\n    pp = [0] + [int(a) for a in input().split()]\n    res = []\n    for i1 in range(1, n):\n        while pp[i1] != i1 and pp[pp[i1]] != i1:\n            i2 = pp[i1]\n            i3 = pp[i2]\n            res += [[i1, i2, i3]]\n            (pp[i2], pp[i3], pp[i1]) = (i2, i3, pp[i3])\n    pair = [(i1, pp[i1]) for i1 in range(1, n + 1) if pp[i1] > i1]\n    if len(pair) % 2:\n        print(-1)\n        continue\n    while pair:\n        (i1, i2) = pair.pop()\n        (i3, i4) = pair.pop()\n        res += [[i1, i2, i3], [i1, i4, i3]]\n    print(len(res))\n    print(*[' '.join(map(str, r)) + '\\n' for r in res], sep='\\n')", "for tc in range(int(input())):\n    (n, k) = map(int, input().split())\n    pp = [0] + list(map(int, input().split()))\n    res = []\n    for i1 in range(1, n):\n        while pp[i1] != i1 and pp[pp[i1]] != i1:\n            i2 = pp[i1]\n            i3 = pp[i2]\n            res.append([i1, i2, i3])\n            (pp[i2], pp[i3], pp[i1]) = (i2, i3, pp[i3])\n    pair = [(i1, pp[i1]) for i1 in range(1, n + 1) if pp[i1] > i1]\n    if len(pair) % 2:\n        print(-1)\n        continue\n    while pair:\n        (i1, i2) = pair.pop()\n        (i3, i4) = pair.pop()\n        res = res + [[i1, i2, i3], [i1, i4, i3]]\n    print(len(res))\n    print(*[' '.join(map(str, r)) + '\\n' for r in res], sep='\\n')", "for tc in range(int(input())):\n    (n, k) = map(int, input().split())\n    pp = [0] + list(map(int, input().split()))\n    res = []\n    for i1 in range(1, n):\n        while pp[i1] != i1 and pp[pp[i1]] != i1:\n            i2 = pp[i1]\n            i3 = pp[i2]\n            res.append([i1, i2, i3])\n            (pp[i2], pp[i3], pp[i1]) = (i2, i3, pp[i3])\n    pair = {(i1, pp[i1]) for i1 in range(1, n + 1) if pp[i1] > i1}\n    if len(pair) % 2:\n        print(-1)\n        continue\n    while pair:\n        (i1, i2) = pair.pop()\n        (i3, i4) = pair.pop()\n        res.append([i1, i2, i3])\n        res.append([i1, i4, i3])\n    print(len(res))\n    print(*[' '.join(map(str, r)) + '\\n' for r in res], sep='\\n')", "for tc in range(int(input())):\n    (n, k) = map(int, input().split())\n    pp = [0] + [int(a) for a in input().split()]\n    i1 = 1\n    res = []\n    for i1 in range(1, n):\n        while pp[i1] != i1 and pp[pp[i1]] != i1:\n            i2 = pp[i1]\n            i3 = pp[i2]\n            res.append([i1, i2, i3])\n            (pp[i2], pp[i3], pp[i1]) = (i2, i3, pp[i3])\n    pair = {(i1, pp[i1]) for i1 in range(1, n + 1) if pp[i1] > i1}\n    if len(pair) % 2 == 1:\n        print(-1)\n        continue\n    while pair:\n        (i1, i2) = pair.pop()\n        (i3, i4) = pair.pop()\n        res.append([i1, i2, i3])\n        res.append([i1, i4, i3])\n    print(len(res))\n    print(*[' '.join(map(str, r)) + '\\n' for r in res], sep='\\n')", "for tc in range(int(input())):\n    (n, k) = map(int, input().split())\n    pp = [0] + [int(a) for a in input().split()]\n    i1 = 1\n    res = []\n    for i1 in range(1, n):\n        while pp[i1] != i1 and pp[pp[i1]] != i1:\n            i2 = pp[i1]\n            i3 = pp[i2]\n            res.append([i1, i2, i3])\n            (pp[i2], pp[i3], pp[i1]) = (i2, i3, pp[i3])\n    pair = {(i1, pp[i1]) for i1 in range(1, n + 1) if pp[i1] > i1}\n    if len(pair) % 2 == 1:\n        print(-1)\n        continue\n    while pair:\n        (i1, i2) = pair.pop()\n        (i3, i4) = pair.pop()\n        res.append([i1, i2, i3])\n        res.append([i1, i4, i3])\n    print(len(res))\n    print(*[' '.join(map(str, r)) + '\\n' for r in res], sep='\\n')", "for tc in range(int(input())):\n    (n, k) = map(int, input().split())\n    pp = [0] + [int(a) for a in input().split()]\n    i1 = 1\n    res = []\n    while i1 < n:\n        if pp[i1] != i1 and pp[pp[i1]] != i1:\n            i2 = pp[i1]\n            i3 = pp[i2]\n            res.append([i1, i2, i3])\n            (pp[i2], pp[i3], pp[i1]) = (i2, i3, pp[i3])\n        else:\n            i1 += 1\n    pair = {(i1, pp[i1]) for i1 in range(1, n + 1) if pp[i1] > i1}\n    if len(pair) % 2 == 1:\n        print(-1)\n        continue\n    while pair:\n        (i1, i2) = pair.pop()\n        (i3, i4) = pair.pop()\n        res.append([i1, i2, i3])\n        res.append([i1, i4, i3])\n    print(len(res))\n    print(*[' '.join(map(str, r)) + '\\n' for r in res], sep='\\n')", "for tc in range(int(input())):\n    (n, k) = map(int, input().split())\n    pp = [0] + [int(a) for a in input().split()]\n    i1 = 1\n    res = []\n    cycle = set()\n    i1 = 1\n    while i1 < n:\n        if pp[i1] != i1 and pp[pp[i1]] != i1:\n            i2 = pp[i1]\n            i3 = pp[i2]\n            res.append([i1, i2, i3])\n            (pp[i2], pp[i3], pp[i1]) = (i2, i3, pp[i3])\n        else:\n            i1 += 1\n    pair = {(i1, pp[i1]) for i1 in range(1, n + 1) if pp[i1] > i1}\n    if len(pair) % 2 == 1:\n        print(-1)\n        continue\n    while pair:\n        (i1, i2) = pair.pop()\n        (i3, i4) = pair.pop()\n        res.append([i1, i2, i3])\n        res.append([i1, i4, i3])\n    print(len(res))\n    for r in res:\n        print(' '.join(map(str, r)))", "def main():\n\n    def solve():\n        (n, k) = map(int, input().split())\n        pp = [0] + [int(a) for a in input().split()]\n        i1 = 1\n        res = []\n        cycle = set()\n        i1 = 1\n        while i1 < n:\n            if pp[i1] != i1 and pp[pp[i1]] != i1:\n                i2 = pp[i1]\n                i3 = pp[i2]\n                res.append([i1, i2, i3])\n                (pp[i2], pp[i3], pp[i1]) = (i2, i3, pp[i3])\n            else:\n                i1 += 1\n        pair = {(i1, pp[i1]) for i1 in range(1, n + 1) if pp[i1] > i1}\n        if len(pair) % 2 == 1:\n            print(-1)\n            return\n        while pair:\n            (i1, i2) = pair.pop()\n            (i3, i4) = pair.pop()\n            res.append([i1, i2, i3])\n            res.append([i1, i4, i3])\n        print(len(res))\n        for r in res:\n            print(' '.join(map(str, r)))\n    q = int(input())\n    for _ in range(q):\n        solve()\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d1 = {}\n    d2 = {}\n    i = 1\n    c = 0\n    for j in l:\n        d1[i] = j\n        d2[j] = i\n        i += 1\n    l1 = []\n    for i in range(1, n + 1):\n        if i == d1[d1[i]] or i == d1[i]:\n            continue\n        else:\n            k = [d1[i], d2[i], i]\n            l1.append(k)\n            (p, q, r) = k\n            (d2[p], d2[d1[p]], d2[r]) = k\n            (d1[p], d1[q], d1[r]) = (d1[r], d1[p], d1[q])\n    l2 = []\n    for i in d1:\n        if i != d1[i] and i == d1[d1[i]]:\n            y = [i, d1[i]]\n            l2.extend(y)\n            d1[i] = 0\n    if len(l2) % 4 == 0:\n        for i in range(0, len(l2), 4):\n            (p, q, r, s) = l2[i:i + 4]\n            l1.extend([[r, q, p], [s, r, q]])\n    else:\n        c = 1\n    if c == 1 or m < len(l1):\n        print(-1)\n    else:\n        print(len(l1))\n        for (p, g, m) in l1:\n            print(p, g, m)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr = [i - 1 for i in arr]\n    swap = [False] * n\n    ans = []\n    extra = []\n    flag = 0\n    for i in range(n):\n        if swap[i] or i == arr[i]:\n            continue\n        else:\n            index = [i + 1]\n            swap[i] = True\n            ind = arr[i]\n            while ind != i:\n                swap[ind] = True\n                index.append(ind + 1)\n                ind = arr[ind]\n        x = len(index)\n        if x == 2:\n            extra.append(index)\n            continue\n        if x % 2 == 0:\n            extra.append([index[0], index[-1]])\n        for j in range(1, x - 1, 2):\n            ans.append((index[0], index[j], index[j + 1]))\n        if len(extra) + len(ans) > k:\n            flag = 1\n            break\n    if flag == 1 or len(extra) % 2 != 0:\n        print(-1)\n    else:\n        print(len(ans) + len(extra))\n        for ans in ans:\n            print(*ans)\n        for i in range(0, len(extra), 2):\n            print(extra[i][0], extra[i][1], extra[i + 1][0])\n            print(extra[i][0], extra[i + 1][1], extra[i + 1][0])", "def cycles(a, cycle_list):\n    n = len(a)\n    for i in range(1, n):\n        dis_cycle = []\n        while a[i] != i:\n            dis_cycle.append([i, a[i]])\n            t = a[i]\n            a[i] = a[a[i]]\n            a[t] = t\n        if len(dis_cycle) > 0:\n            cycle_list.append(dis_cycle)\n\ndef parity_sort(a):\n    odd = 0\n    box = [0] * len(a)\n    i = -1\n    j = len(a)\n    for iter in a:\n        if len(iter) % 2 == 0:\n            i += 1\n            box[i] = iter\n        else:\n            j -= 1\n            box[j] = iter\n            odd += 1\n    if odd % 2 == 1:\n        return -1\n    extra = []\n    for iter in range(j, len(a), 2):\n        x1 = box[iter].pop(-1)\n        x2 = box[iter + 1].pop(0)\n        extra.append(box[iter])\n        extra.append([x1, x2])\n        extra.append(box[iter + 1])\n    box = box[:i + 1] + extra\n    return box\n\ndef shift(x1, x2):\n    if x1[0] in x2 or x1[1] in x2:\n        if x1[0] == x2[0]:\n            return [[x1[0], x1[1], x2[1]]]\n        elif x1[0] == x2[1]:\n            return [[x1[0], x1[1], x2[0]]]\n        elif x1[1] == x2[0]:\n            return [[x1[1], x1[0], x2[1]]]\n        else:\n            return [[x1[1], x1[0], x2[0]]]\n    else:\n        return [[x1[0], x1[1], x2[1]], [x2[0], x2[1], x1[0]]]\nt = int(input())\nwhile t > 0:\n    a = input().split()\n    n = int(a[0])\n    k = int(a[1])\n    a = input().split()\n    for i in range(n):\n        a[i] = int(a[i])\n    a = [0] + a\n    cycle_list = []\n    cycles(a, cycle_list)\n    cycle_list = parity_sort(cycle_list)\n    if cycle_list == -1:\n        print(-1)\n    else:\n        operations = []\n        for i in cycle_list:\n            if len(i) > 0:\n                for j in range(0, len(i), 2):\n                    operations.extend(shift(i[j], i[j + 1]))\n        if len(operations) > k:\n            print(-1)\n        else:\n            print(len(operations))\n            for i in operations:\n                print(i[0], i[1], i[2])\n    t -= 1", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().strip().split(' '))\n    a = [0]\n    a[1:] = list(map(int, input().strip().split(' ')))\n    pivot = [False] * (n + 1)\n    op = []\n    re = []\n    flag = 0\n    for i in range(1, n + 1):\n        if pivot[i] or a[i] == i:\n            continue\n        else:\n            seq = []\n            seq.append(i)\n            pivot[i] = True\n            j = a[i]\n            while j != i:\n                pivot[j] = True\n                seq.append(j)\n                j = a[j]\n        x = len(seq)\n        if x == 2:\n            re.append(seq)\n            continue\n        if x % 2 == 0:\n            re.append([seq[0], seq[-1]])\n        for i in range(1, x - 1, 2):\n            op.append([seq[0], seq[i], seq[i + 1]])\n        if len(op) + len(re) > k:\n            flag = 1\n            break\n    if flag == 1 or len(re) % 2 != 0:\n        print(-1)\n    else:\n        print(len(op) + len(re))\n        for op in op:\n            print(*op)\n        for i in range(0, len(re), 2):\n            print(re[i][0], re[i][1], re[i + 1][0])\n            print(re[i][0], re[i + 1][1], re[i + 1][0])", "test = int(input())\nwhile test > 0:\n    test -= 1\n    (nn, kk) = map(int, input().split())\n    array = [int(i) for i in input().split()]\n    array = [0] + array\n    li = [0] * (nn + 1)\n    (cc, dd) = (list(), list())\n    counter = 0\n    k = 1\n    for j in range(1, nn + 1):\n        li[array[j]] = j\n    while k < nn + 1:\n        if k != li[k]:\n            rest = li[k]\n            ee = k\n            if array[k] == rest:\n                dd.append(rest)\n                dd.append(k)\n                array[rest] = rest\n                array[k] = k\n                li[k] = k\n                li[rest] = rest\n            else:\n                counter += 1\n                rest1 = array[k]\n                cc.append(rest)\n                cc.append(ee)\n                cc.append(rest1)\n                array[rest] = array[rest1]\n                array[rest1] = array[ee]\n                array[ee] = k\n                li[array[rest]] = rest\n                li[array[rest1]] = rest1\n                li[k] = k\n        k = k + 1\n    flag = 1\n    if len(dd) % 4 == 0:\n        for j in range(len(dd) // 4):\n            counter = counter + 2\n            cc.append(dd[4 * j])\n            cc.append(dd[4 * j + 1])\n            cc.append(dd[4 * j + 2])\n            cc.append(dd[4 * j])\n            cc.append(dd[4 * j + 3])\n            cc.append(dd[4 * j + 2])\n    else:\n        flag = 0\n    if flag == 1 and counter <= kk:\n        print(counter)\n        for z in range(counter):\n            print(cc[3 * z], cc[3 * z + 1], cc[3 * z + 2])\n    else:\n        print(-1)", "test = int(input())\nwhile test > 0:\n    test = test - 1\n    (nn, kk) = map(int, input().split())\n    array = list(map(int, input().split()))\n    array = [0] + array\n    li = [0] * (nn + 1)\n    cc = []\n    dd = []\n    counter = 0\n    k = 1\n    for j in range(1, nn + 1):\n        li[array[j]] = j\n    while k < nn + 1:\n        if k != li[k]:\n            rest = li[k]\n            ee = k\n            if array[k] == rest:\n                dd.append(rest)\n                dd.append(k)\n                array[rest] = rest\n                array[k] = k\n                li[k] = k\n                li[rest] = rest\n            else:\n                counter += 1\n                rest1 = array[k]\n                cc.append(rest)\n                cc.append(ee)\n                cc.append(rest1)\n                array[rest] = array[rest1]\n                array[rest1] = array[ee]\n                array[ee] = k\n                li[array[rest]] = rest\n                li[array[rest1]] = rest1\n                li[k] = k\n        k = k + 1\n    flag = 1\n    if len(dd) % 4 == 0:\n        for j in range(len(dd) // 4):\n            counter = counter + 2\n            cc.append(dd[4 * j])\n            cc.append(dd[4 * j + 1])\n            cc.append(dd[4 * j + 2])\n            cc.append(dd[4 * j])\n            cc.append(dd[4 * j + 3])\n            cc.append(dd[4 * j + 2])\n    else:\n        flag = 0\n    if flag == 1 and counter <= kk:\n        print(counter)\n        for z in range(counter):\n            print(cc[3 * z], cc[3 * z + 1], cc[3 * z + 2])\n    else:\n        print(-1)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nmod = 10 ** 9 + 7\nt = int(input())\nwhile t:\n    freq = {}\n    (size, m) = get_ints()\n    arr = get_array()\n    for i in range(size):\n        freq[arr[i]] = i\n    res = []\n    n = 0\n    for j in range(size):\n        if arr[j] == j + 1:\n            continue\n        else:\n            occurance1 = j\n            random_occurance = arr[j]\n            occurance3 = freq[j + 1]\n            occurance2 = random_occurance - 1\n            if arr[occurance1] == occurance2 + 1 and arr[occurance2] == occurance3 + 1 and (arr[occurance3] == occurance1 + 1) and (occurance2 != occurance3) or ((arr[occurance1] == occurance2 + 1 and arr[occurance2] == occurance3 + 1 or (arr[occurance2] == occurance3 + 1 and arr[occurance3] == occurance1 + 1) or (arr[occurance3] == occurance1 + 1 and arr[occurance1] == occurance2 + 1)) and occurance2 != occurance3):\n                temp = arr[occurance3]\n                arr[occurance3] = arr[occurance2]\n                arr[occurance2] = arr[occurance1]\n                arr[occurance1] = temp\n                random_occurance = arr[occurance1]\n                y = arr[occurance2]\n                z = arr[occurance3]\n                freq[random_occurance] = occurance1\n                freq[y] = occurance2\n                freq[z] = occurance3\n                res.append(occurance1 + 1)\n                res.append(occurance2 + 1)\n                res.append(occurance3 + 1)\n                n += 1\n            else:\n                continue\n    for j in range(size):\n        if arr[j] == j + 1:\n            continue\n        else:\n            occurance1 = j\n            random_occurance = arr[j]\n            occurance3 = freq[j + 1]\n            occurance2 = random_occurance - 1\n            if occurance2 == occurance3:\n                for q in range(occurance1 + 1, size):\n                    if arr[q] != q + 1 and occurance2 != q:\n                        occurance2 = q\n                        break\n            temp = arr[occurance3]\n            arr[occurance3] = arr[occurance2]\n            arr[occurance2] = arr[occurance1]\n            arr[occurance1] = temp\n            random_occurance = arr[occurance1]\n            y = arr[occurance2]\n            z = arr[occurance3]\n            freq[random_occurance] = occurance1\n            freq[y] = occurance2\n            freq[z] = occurance3\n            if occurance2 == occurance3:\n                n = m + 1\n                break\n            res.append(occurance1 + 1)\n            res.append(occurance2 + 1)\n            res.append(occurance3 + 1)\n            n += 1\n    if n <= m:\n        print(n)\n        for i in range(len(res)):\n            if (i + 1) % 3 == 0:\n                print(res[i], end='\\n')\n            else:\n                print(res[i], end=' ')\n    else:\n        print(-1)\n    t -= 1", "def main():\n\n    def solve():\n        (n, k) = map(int, input().split())\n        pp = [0] + [int(a) for a in input().split()]\n        i1 = 1\n        res = []\n        cycle = set()\n        i1 = 1\n        while i1 < n:\n            if pp[i1] != i1 and pp[pp[i1]] != i1:\n                i2 = pp[i1]\n                i3 = pp[i2]\n                res.append([i1, i2, i3])\n                (pp[i2], pp[i3], pp[i1]) = (i2, i3, pp[i3])\n            else:\n                i1 += 1\n        pair = {(i1, pp[i1]) for i1 in range(1, n + 1) if pp[i1] > i1}\n        if len(pair) % 2 == 1:\n            print(-1)\n            return\n        while pair:\n            (i1, i2) = pair.pop()\n            (i3, i4) = pair.pop()\n            res.append([i1, i2, i3])\n            res.append([i1, i4, i3])\n        print(len(res))\n        for r in res:\n            print(' '.join(map(str, r)))\n    q = int(input())\n    for _ in range(q):\n        solve()\nmain()", "def main():\n\n    def solve():\n        (n, k) = map(int, input().split())\n        pp = [0] + [int(a) for a in input().split()]\n        i1 = 1\n        res = []\n        cycle = set()\n        i1 = 1\n        while i1 < n:\n            if pp[i1] != i1 and pp[pp[i1]] != i1:\n                i2 = pp[i1]\n                i3 = pp[i2]\n                res.append([i1, i2, i3])\n                (pp[i2], pp[i3], pp[i1]) = (i2, i3, pp[i3])\n            else:\n                i1 += 1\n        pair = {(i1, pp[i1]) for i1 in range(1, n + 1) if pp[i1] > i1}\n        if len(pair) % 2 == 1:\n            print(-1)\n            return\n        while pair:\n            (i1, i2) = pair.pop()\n            (i3, i4) = pair.pop()\n            res.append([i1, i2, i3])\n            res.append([i1, i4, i3])\n        print(len(res))\n        for r in res:\n            print(' '.join(map(str, r)))\n    q = int(input())\n    for _ in range(q):\n        solve()\nmain()", "try:\n    for _ in range(int(input())):\n        (n, kk) = map(int, input().split())\n        list1 = list(map(int, input().split()))\n        v = [0] * (n + 1)\n        list1 = [0] + list1\n        k = []\n        dd = []\n        ff = []\n        for i in range(1, n + 1):\n            if v[i] == 0:\n                k = []\n                x = list1[i]\n                v[x] = 1\n                k.append(i)\n                k.append(x)\n                while x != i:\n                    x = list1[x]\n                    v[x] = 1\n                    k.append(x)\n                lll = len(k)\n                k = k[0:lll - 1]\n                lll -= 1\n                if lll == 2:\n                    dd.append(k)\n                elif lll >= 3:\n                    if lll % 2 != 0:\n                        j = 0\n                        while j < lll - 2:\n                            ff.append([k[0], k[j + 1], k[j + 2]])\n                            j += 2\n                    else:\n                        j = 0\n                        while j < lll - 3:\n                            ff.append([k[0], k[j + 1], k[j + 2]])\n                            j += 2\n                        dd.append([k[0], k[-1]])\n        f = 0\n        if len(dd) % 2 == 0:\n            i = 0\n            while i < len(dd) - 1:\n                x1 = dd[i]\n                x2 = dd[i + 1]\n                ff.append([x1[0], x1[1], x2[1]])\n                ff.append([x1[0], x2[0], x2[1]])\n                i += 2\n        else:\n            f = 1\n            print(-1)\n        if f == 0:\n            if len(ff) <= kk:\n                print(len(ff))\n                for i in range(len(ff)):\n                    print(*ff[i])\n            else:\n                print(-1)\nexcept:\n    pass", "def solve(a, n, k):\n    vis = [True if i == a[i] - 1 else False for i in range(n)]\n    ans = 0\n    res = []\n    two = []\n    for ind in range(n):\n        if vis[ind]:\n            continue\n        j = ind\n        count = 0\n        s = []\n        while vis[j] == False:\n            s.append(j)\n            vis[j] = True\n            j = a[j] - 1\n            count += 1\n        if count % 2 != 0:\n            ans += count // 2\n            for p in range(1, count // 2 + 1):\n                res.append([s[0]] + s[p * 2 - 1:2 * p + 1])\n        else:\n            ans += count // 2 - 1\n            for p in range(1, count // 2):\n                res.append([s[0]] + s[p * 2 - 1:2 * p + 1])\n            two += [s[0], s[-1]]\n            if len(two) > 2:\n                ans += 2\n                res.append(two[:3])\n                res.append([two[0], two[3], two[2]])\n                two.clear()\n        if ans > k:\n            return [-1, []]\n    if len(two) > 0:\n        return [-1, []]\n    return [ans, res]\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (count, s) = solve(a, n, k)\n    print(count)\n    for i in s:\n        t = [j + 1 for j in i]\n        print(*t)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    swap = [0] * n\n    for i in range(n):\n        if arr[i] == i + 1:\n            swap[i] = 0\n        else:\n            swap[i] = 1\n    s = []\n    (odd, even, flag) = (0, 0, 0)\n    for i in range(n):\n        if swap[i] == 1:\n            cycle = [i + 1]\n            j = i\n            while swap[j] == 1:\n                res = arr[j]\n                cycle.append(res)\n                swap[j] = 0\n                j = arr[j] - 1\n            s.append(cycle)\n    trp = []\n    extra = []\n    count = 0\n    for i in range(len(s)):\n        if len(s[i]) % 2 != 0 and len(s[i]) != 3:\n            for j in range(int((len(s[i]) - 2) / 2)):\n                trp.append([s[i][0], s[i][j * 2 + 1], s[i][j * 2 + 2]])\n                temp = j * 2 + 2\n                count = count + 1\n            extra.append([s[i][0], s[i][-2]])\n            even = even + 1\n        elif len(s[i]) % 2 == 0 and len(s[i]) != 3:\n            for j in range(int((len(s[i]) - 1) / 2)):\n                trp.append([s[i][0], s[i][j * 2 + 1], s[i][j * 2 + 2]])\n                count = count + 1\n        else:\n            extra.append(s[i][:2])\n            even = even + 1\n    if even % 2 == 0:\n        i = 0\n        while i < len(extra):\n            trp.append([extra[i][0], extra[i][1], extra[i + 1][0]])\n            trp.append([extra[i][0], extra[i + 1][1], extra[i + 1][0]])\n            i = i + 2\n    else:\n        flag = 1\n    if flag == 1 or even + count > k:\n        print(-1)\n    else:\n        print(even + count)\n        for i in range(len(trp)):\n            for j in range(len(trp[i])):\n                print(trp[i][j], end=' ')\n            print()", "def swap(i, arr):\n    temp = arr[i]\n    arr[i] = arr[arr[i]]\n    arr[temp] = temp\nt = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    arr = [0] + list(map(int, input().split()))\n    countTransposition = 0\n    listoflistoftransposition = list()\n    nooftranspositionincycle = list()\n    count = 0\n    for i in range(1, n + 1):\n        listoftransposition = list()\n        while i != arr[i]:\n            countTransposition += 1\n            count += 1\n            listoftransposition.append([i, arr[i]])\n            swap(i, arr)\n        if listoftransposition != []:\n            nooftranspositionincycle.append(count)\n            count = 0\n            listoflistoftransposition.append(listoftransposition)\n    if countTransposition & 1 == 1:\n        print(-1)\n    else:\n        ans = list()\n        m = 0\n        lenoftranspositions = len(listoflistoftransposition)\n        for i in range(lenoftranspositions):\n            j = 1\n            while j < nooftranspositionincycle[i]:\n                templist = listoflistoftransposition[i][j - 1]\n                templist.append(listoflistoftransposition[i][j][1])\n                ans.append(templist)\n                m += 1\n                j += 2\n        temp1 = []\n        for i in range(lenoftranspositions):\n            if nooftranspositionincycle[i] & 1 == 1:\n                temp1.append(listoflistoftransposition[i][-1])\n        i = 1\n        while i <= len(temp1):\n            temp11 = temp1[i - 1]\n            temp11.append(temp1[i][1])\n            temp12 = temp1[i]\n            temp12.append(temp1[i - 1][0])\n            ans.append(temp11)\n            ans.append(temp12)\n            m += 2\n            i += 2\n        print(m)\n        for i in range(m):\n            print(ans[i][0], ans[i][1], ans[i][2])", "from sys import *\nfor _ in range(int(stdin.readline())):\n    (n, k) = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    for i in range(n):\n        arr[i] -= 1\n    ans = []\n    count = 0\n    flag = 0\n    extra = []\n    swapping = [True for i in range(n)]\n    for i in range(n):\n        if i == arr[i]:\n            swapping[i] = False\n    for i in range(n):\n        if swapping[i]:\n            index = []\n            idx = i\n            while swapping[idx]:\n                index.append(idx)\n                swapping[idx] = False\n                idx = arr[idx]\n            while len(index) > 2:\n                p = index.pop()\n                q = index.pop()\n                r = index[-1]\n                if len(index) == 1:\n                    index.pop()\n                ans.append([r + 1, q + 1, p + 1])\n                count += 1\n            if len(index) == 2:\n                extra.append([index.pop(), index.pop()])\n    if len(extra) % 2 == 1:\n        print(-1)\n        continue\n    while len(extra) > 1:\n        p = extra.pop()\n        q = extra.pop()\n        ans.append([p[0] + 1, p[1] + 1, q[1] + 1])\n        ans.append([q[0] + 1, q[1] + 1, p[0] + 1])\n        count += 2\n        if count > k:\n            flag = 1\n            break\n    if flag == 1:\n        print('-1')\n        continue\n    else:\n        print(count)\n        for i in ans:\n            print(*i)", "import sys\n\ndef sol(c):\n    print(len(c))\n    for j in c:\n        p = [x + 1 for x in j]\n        print(*p)\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, sys.stdin.readline().strip().split())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    for j in range(n):\n        a[j] -= 1\n    d = list(sorted(a))\n    if a == d:\n        print('0')\n        continue\n    res = {}\n    for j in range(n):\n        res[a[j]] = j\n    val = []\n    c = []\n    valb = [False for j in range(n)]\n    for j in range(n):\n        if a[j] != j and valb[j] == False:\n            pair = [res[j], j, a[j]]\n            if a[a[j]] == j:\n                val.append([j, a[j]])\n                valb[j] = True\n                valb[a[j]] = True\n            else:\n                temp1 = a[pair[2]]\n                temp2 = a[pair[0]]\n                temp3 = a[pair[1]]\n                a[pair[0]] = temp1\n                res[temp1] = pair[0]\n                a[pair[1]] = temp2\n                res[temp2] = pair[1]\n                a[pair[2]] = temp3\n                res[temp3] = pair[2]\n                c.append(pair)\n    if len(val) > 0:\n        if len(val) % 2 == 1:\n            print('-1')\n            continue\n        else:\n            for j in range(0, len(val), 2):\n                c.append([val[j][0], val[j][1], val[j + 1][1]])\n                c.append([val[j][0], val[j + 1][0], val[j + 1][1]])\n    if len(c) <= k:\n        sol(c)\n    else:\n        print('-1')", "test = int(input())\nwhile test > 0:\n    test = test - 1\n    (nn, kk) = map(int, input().split())\n    array = list(map(int, input().split()))\n    array = [0] + array\n    li = [0] * (nn + 1)\n    cc = []\n    dd = []\n    counter = 0\n    k = 1\n    for j in range(1, nn + 1):\n        li[array[j]] = j\n    while k < nn + 1:\n        if k != li[k]:\n            rest = li[k]\n            ee = k\n            if array[k] == rest:\n                dd.append(rest)\n                dd.append(k)\n                array[rest] = rest\n                array[k] = k\n                li[k] = k\n                li[rest] = rest\n            else:\n                counter += 1\n                rest1 = array[k]\n                cc.append(rest)\n                cc.append(ee)\n                cc.append(rest1)\n                array[rest] = array[rest1]\n                array[rest1] = array[ee]\n                array[ee] = k\n                li[array[rest]] = rest\n                li[array[rest1]] = rest1\n                li[k] = k\n        k = k + 1\n    flag = 1\n    if len(dd) % 4 == 0:\n        for j in range(len(dd) // 4):\n            counter = counter + 2\n            cc.append(dd[4 * j])\n            cc.append(dd[4 * j + 1])\n            cc.append(dd[4 * j + 2])\n            cc.append(dd[4 * j])\n            cc.append(dd[4 * j + 3])\n            cc.append(dd[4 * j + 2])\n    else:\n        flag = 0\n    if flag == 1 and counter <= kk:\n        print(counter)\n        for z in range(counter):\n            print(cc[3 * z], cc[3 * z + 1], cc[3 * z + 2])\n    else:\n        print(-1)", "def findParity(listPer, lenPer):\n    newList = listPer.copy()\n    totalTrans = 0\n    for i in range(1, lenPer):\n        while newList[i] != i:\n            totalTrans += 1\n            j = newList[i]\n            (newList[i], newList[j]) = (newList[j], newList[i])\n    if totalTrans % 2 == 0:\n        return True\n    else:\n        return False\n\ndef getCycle(listPer, lenPer):\n    listOfCycles = []\n    for i in range(1, lenPer):\n        cntr = 0\n        curCycle = []\n        while listPer[i] != i:\n            j = listPer[i]\n            (listPer[i], listPer[j]) = (listPer[j], listPer[i])\n            cntr += 1\n            curCycle.append((i, j))\n        if curCycle:\n            listOfCycles.append((cntr % 2, cntr, curCycle))\n    return listOfCycles\n\ndef printOut(listOfCycles, k):\n    (numOfOps, cycleLen) = (0, 0)\n    for element in listOfCycles:\n        if element[0] == 0:\n            numOfOps += element[1] // 2\n        else:\n            numOfOps += element[1] // 2 + 1\n        cycleLen += 1\n    if numOfOps <= k:\n        print(numOfOps)\n        f = 0\n        for i in range(cycleLen):\n            if listOfCycles[i][0] == 0:\n                for j in range(0, listOfCycles[i][1], 2):\n                    f = i + 1\n                    print(listOfCycles[i][2][j][0], listOfCycles[i][2][j][1], listOfCycles[i][2][j + 1][1])\n            else:\n                break\n        flag = False\n        s = 0\n        for k in range(f, cycleLen):\n            if flag:\n                cur = listOfCycles[k][2][0]\n                print(prev[0], prev[1], cur[1])\n                print(cur[0], cur[1], prev[0])\n            for j in range(s, listOfCycles[k][1] - 1, 2):\n                print(listOfCycles[k][2][j][0], listOfCycles[k][2][j][1], listOfCycles[k][2][j + 1][1])\n            if s == 0:\n                prev = listOfCycles[k][2][-1]\n                flag = True\n                s = 1\n            else:\n                s = 0\n                flag = False\n    else:\n        print(-1)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        listPer = list(map(int, input().split()))\n        listPer.insert(0, 0)\n        if findParity(listPer, n + 1):\n            listOfCycles = getCycle(listPer, n + 1)\n            listOfCycles.sort(key=lambda i: i[0])\n            printOut(listOfCycles, k)\n        else:\n            print(-1)\nmain()", "T = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    arr = list(map(lambda x: int(x) - 1, input().split()))\n    (even, odd) = ([], [])\n    for i in range(n):\n        if i == arr[i]:\n            continue\n        cycle = []\n        while i != arr[i]:\n            p = arr[i]\n            cycle.append(p)\n            (arr[i], arr[p]) = (arr[p], arr[i])\n        if len(cycle) % 2:\n            odd.append((i, cycle))\n        else:\n            even.append((i, cycle))\n    if len(odd) % 2:\n        print('-1')\n        continue\n    ans = []\n    extra = None\n    for (x, cycle) in odd:\n        i = 0\n        while i < len(cycle):\n            if i + 1 < len(cycle):\n                ans.append((x, cycle[i], cycle[i + 1]))\n                i += 2\n            elif extra is not None:\n                ans.append((extra[0], extra[1], x))\n                ans.append((x, extra[0], cycle[i]))\n                extra = None\n                i += 1\n            else:\n                extra = (x, cycle[i])\n                i += 1\n    for (x, cycle) in even:\n        i = 0\n        while i < len(cycle):\n            ans.append((x, cycle[i], cycle[i + 1]))\n            i += 2\n    if len(ans) > k:\n        print('-1')\n    else:\n        print(len(ans))\n        for (i, j, k) in ans:\n            print('{} {} {}'.format(i + 1, j + 1, k + 1))", "t = int(input())\nfor _ in range(t):\n    (n, ops) = tuple(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    arr.insert(0, 0)\n    visited = [False] * (n + 1)\n    res = []\n    left = []\n    lsize = 0\n    for i in range(1, n + 1):\n        if visited[i] or arr[i] == i:\n            visited[i] = True\n            continue\n        cycle = []\n        j = i\n        size = 0\n        while not visited[j]:\n            visited[j] = True\n            j = arr[j]\n            cycle.append(j)\n            size += 1\n        k = 2\n        done = 0\n        while k < size:\n            res.append((cycle[0], cycle[k - 1], cycle[k]))\n            k += 2\n            done += 2\n        if size - done == 2:\n            left.append(cycle[0])\n            left.append(cycle[size - 1])\n            lsize += 2\n        if lsize == 4:\n            res.append((left[0], left[1], left[2]))\n            res.append((left[0], left[3], left[2]))\n            left = []\n            lsize = 0\n    if lsize == 2 or len(res) > ops:\n        print(-1)\n    else:\n        print(len(res))\n        for i in res:\n            print(i[0], i[1], i[2])", "def compare(a):\n    if len(a) & 1:\n        return -len(a)\n    return len(a)\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    p = [0] + p\n    liswaps = []\n    totalswaps = 0\n    for i in range(1, n + 1):\n        swaps = []\n        while p[i] != i:\n            swaps.append((i, p[i]))\n            i1 = i\n            i2 = p[i]\n            (p[i1], p[i2]) = (p[i2], p[i1])\n        if swaps:\n            liswaps.append(swaps)\n            totalswaps += len(swaps)\n    if totalswaps & 1:\n        print(-1)\n    else:\n        ans = []\n        liswaps.sort(key=compare)\n        j = 0\n        for i in range(len(liswaps)):\n            li = liswaps[i]\n            while j + 1 < len(li):\n                ans.append((li[j][0], li[j][1], li[j + 1][1]))\n                j += 2\n            if j < len(li):\n                ans.append((li[j][0], li[j][1], liswaps[i + 1][0][0]))\n                ans.append((li[j][0], liswaps[i + 1][0][1], liswaps[i + 1][0][0]))\n                j = 1\n            else:\n                j = 0\n        if len(ans) > k:\n            print(-1)\n        else:\n            print(len(ans))\n            for item in ans:\n                print(*item)", "def compare(a):\n    if len(a) & 1:\n        return -len(a)\n    return len(a)\nfor T in range(int(input())):\n    (N, K) = map(int, input().split())\n    P = [0]\n    P.extend(list(map(int, input().split())))\n    listOfSwaps = []\n    totalSwaps = 0\n    for i in range(1, N + 1):\n        swaps = []\n        while P[i] != i:\n            swaps.append((i, P[i]))\n            i1 = i\n            i2 = P[i]\n            (P[i1], P[i2]) = (P[i2], P[i1])\n        if swaps:\n            listOfSwaps.append(swaps)\n            totalSwaps += len(swaps)\n    if totalSwaps & 1:\n        print(-1)\n    else:\n        ans = []\n        listOfSwaps.sort(key=compare)\n        j = 0\n        for i in range(len(listOfSwaps)):\n            listOfSwap = listOfSwaps[i]\n            while j + 1 < len(listOfSwap):\n                ans.append((listOfSwap[j][0], listOfSwap[j][1], listOfSwap[j + 1][1]))\n                j += 2\n            if j < len(listOfSwap):\n                ans.append((listOfSwap[j][0], listOfSwap[j][1], listOfSwaps[i + 1][0][1]))\n                ans.append((listOfSwaps[i + 1][0][0], listOfSwaps[i + 1][0][1], listOfSwap[j][0]))\n                j = 1\n            else:\n                j = 0\n        if len(ans) > K:\n            print(-1)\n        else:\n            print(len(ans))\n            for item in ans:\n                print(*item)", "for _ in range(int(input())):\n    (n, k) = (int(x) for x in input().split())\n    arr = [int(x) for x in input().split()]\n    ans = []\n    swap = []\n    arr = [0] + arr\n    souma = [0] * (n + 1)\n    for i in range(1, n + 1):\n        souma[arr[i]] = i\n    num = 0\n    j = 1\n    while j < n + 1:\n        if souma[j] != j:\n            if souma[j] == arr[j]:\n                a = souma[j]\n                b = souma[a]\n                swap.append(souma[j])\n                swap.append(j)\n                souma[j] = j\n                souma[arr[j]] = arr[j]\n                arr[j] = j\n                arr[a] = a\n            if souma[j] != arr[j]:\n                a = souma[j]\n                b = souma[a]\n                c = arr[j]\n                ans.append(souma[j])\n                ans.append(souma[arr[j]])\n                ans.append(arr[j])\n                souma[j] = j\n                souma[arr[j]] = arr[j]\n                souma[arr[arr[j]]] = a\n                d = arr[arr[j]]\n                arr[j] = j\n                arr[c] = c\n                arr[a] = d\n                num += 1\n        j += 1\n    if len(swap) % 4 == 0:\n        for i in range(len(swap) // 4):\n            ans.append(swap[4 * i])\n            ans.append(swap[4 * i + 1])\n            ans.append(swap[4 * i + 2])\n            ans.append(swap[4 * i])\n            ans.append(swap[4 * i + 3])\n            ans.append(swap[4 * i + 2])\n    if num + len(swap) // 2 <= k and len(swap) % 4 == 0:\n        print(num + len(swap) // 2)\n        for nakiri in range(len(ans) // 3):\n            print(ans[3 * nakiri], ans[3 * nakiri + 1], ans[3 * nakiri + 2])\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d1 = {}\n    d2 = {}\n    i = 1\n    c = 0\n    for j in l:\n        d1[i] = j\n        d2[j] = i\n        i += 1\n    l1 = []\n    for i in range(1, n + 1):\n        if i == d1[d1[i]] or i == d1[i]:\n            continue\n        else:\n            k = [d1[i], d2[i], i]\n            l1.append(k)\n            (p, q, r) = k\n            (d2[p], d2[d1[p]], d2[r]) = k\n            (d1[p], d1[q], d1[r]) = (d1[r], d1[p], d1[q])\n    l2 = []\n    for i in d1:\n        if i != d1[i] and i == d1[d1[i]]:\n            y = [i, d1[i]]\n            l2.extend(y)\n            d1[i] = 0\n    if len(l2) % 4 == 0:\n        for i in range(0, len(l2), 4):\n            (p, q, r, s) = l2[i:i + 4]\n            l1.extend([[r, q, p], [s, r, q]])\n    else:\n        c = 1\n    if c == 1 or m < len(l1):\n        print(-1)\n    else:\n        print(len(l1))\n        for (p, g, m) in l1:\n            print(p, g, m)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d1 = {}\n    d2 = {}\n    i = 1\n    c = 0\n    for j in l:\n        d1[i] = j\n        d2[j] = i\n        i += 1\n    l1 = []\n    for i in range(1, n + 1):\n        if i == d1[d1[i]] or i == d1[i]:\n            continue\n        else:\n            k = [d1[i], d2[i], i]\n            l1.append(k)\n            (p, q, r) = k\n            (d2[p], d2[d1[p]], d2[r]) = k\n            (d1[p], d1[q], d1[r]) = (d1[r], d1[p], d1[q])\n    l2 = []\n    for i in d1:\n        if i != d1[i] and i == d1[d1[i]]:\n            y = [i, d1[i]]\n            l2.extend(y)\n            d1[i] = 0\n    if len(l2) % 4 == 0:\n        for i in range(0, len(l2), 4):\n            (p, q, r, s) = l2[i:i + 4]\n            l1.extend([[r, q, p], [s, r, q]])\n    else:\n        c = 1\n    if c == 1 or m < len(l1):\n        print(-1)\n    else:\n        print(len(l1))\n        for (p, g, m) in l1:\n            print(p, g, m)", "T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    A = [0] + list(map(int, input().split()))\n    ans = []\n    swapping = [False] * (N + 1)\n    count = 0\n    extra = []\n    for i in range(1, N + 1):\n        if A[i] != i:\n            swapping[i] = True\n    for i in range(1, N + 1):\n        if A[i] != i:\n            indices = []\n            ind = i\n            (first, last) = (-1, -1)\n            while swapping[ind] == True:\n                indices.append(ind)\n                swapping[ind] = False\n                ind = A[ind]\n            if len(indices) % 2 == 0 and len(indices) > 0:\n                first = indices[0]\n                last = indices.pop()\n            for j in range(1, len(indices) - 1, 2):\n                ans.append((indices[0], indices[j], indices[j + 1]))\n                count += 1\n            if first != -1 and last != -1:\n                extra.append((first, last))\n        if count > K:\n            break\n    while len(extra) > 1:\n        ans.append((extra[0][0], extra[0][1], extra[1][0]))\n        ans.append((extra[0][0], extra[1][1], extra[1][0]))\n        count += 2\n        del extra[0]\n        del extra[0]\n    if len(extra) != 0 or count > K:\n        print(-1)\n    else:\n        print(count)\n        for i in range(len(ans)):\n            print(*ans[i])", "def main():\n    T = int(input())\n    for _ in range(T):\n        (N, K) = map(int, input().split())\n        A = [0] + list(map(int, input().split()))\n        ans = []\n        swapping = [False] * (N + 1)\n        count = 0\n        extra = []\n        for i in range(1, N + 1):\n            if A[i] != i:\n                swapping[i] = True\n        for i in range(1, N + 1):\n            if A[i] != i:\n                indices = []\n                ind = i\n                (first, last) = (-1, -1)\n                while swapping[ind] == True:\n                    indices.append(ind)\n                    swapping[ind] = False\n                    ind = A[ind]\n                if len(indices) % 2 == 0 and len(indices) > 0:\n                    first = indices[0]\n                    last = indices.pop()\n                for j in range(1, len(indices) - 1, 2):\n                    ans.append((indices[0], indices[j], indices[j + 1]))\n                    count += 1\n                if first != -1 and last != -1:\n                    extra.append((first, last))\n            if count > K:\n                break\n        while len(extra) > 1:\n            ans.append((extra[0][0], extra[0][1], extra[1][0]))\n            ans.append((extra[0][0], extra[1][1], extra[1][0]))\n            count += 2\n            del extra[0]\n            del extra[0]\n        if len(extra) != 0 or count > K:\n            print(-1)\n        else:\n            print(count)\n            for i in range(len(ans)):\n                print(*ans[i])\nmain()", "for _ in range(int(input())):\n    (n, k) = (int(x) for x in input().split())\n    arr = [int(x) for x in input().split()]\n    ans = []\n    swap = []\n    arr = [0] + arr\n    souma = [0] * (n + 1)\n    for i in range(1, n + 1):\n        souma[arr[i]] = i\n    num = 0\n    j = 1\n    while j < n + 1:\n        if souma[j] != j:\n            if souma[j] == arr[j]:\n                a = souma[j]\n                b = souma[a]\n                swap.append(souma[j])\n                swap.append(j)\n                souma[j] = j\n                souma[arr[j]] = arr[j]\n                arr[j] = j\n                arr[a] = a\n            if souma[j] != arr[j]:\n                a = souma[j]\n                b = souma[a]\n                c = arr[j]\n                ans.append(souma[j])\n                ans.append(souma[arr[j]])\n                ans.append(arr[j])\n                souma[j] = j\n                souma[arr[j]] = arr[j]\n                souma[arr[arr[j]]] = a\n                d = arr[arr[j]]\n                arr[j] = j\n                arr[c] = c\n                arr[a] = d\n                num += 1\n        j += 1\n    if len(swap) % 4 == 0:\n        for i in range(len(swap) // 4):\n            ans.append(swap[4 * i])\n            ans.append(swap[4 * i + 1])\n            ans.append(swap[4 * i + 2])\n            ans.append(swap[4 * i])\n            ans.append(swap[4 * i + 3])\n            ans.append(swap[4 * i + 2])\n    if num + len(swap) // 2 <= k and len(swap) % 4 == 0:\n        print(num + len(swap) // 2)\n        for nakiri in range(len(ans) // 3):\n            print(ans[3 * nakiri], ans[3 * nakiri + 1], ans[3 * nakiri + 2])\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, k) = (int(x) for x in input().split())\n    arr = [int(x) for x in input().split()]\n    ans = []\n    swap = []\n    arr = [0] + arr\n    souma = [0] * (n + 1)\n    for i in range(1, n + 1):\n        souma[arr[i]] = i\n    num = 0\n    j = 1\n    while j < n + 1:\n        if souma[j] != j:\n            if souma[j] == arr[j]:\n                a = souma[j]\n                b = souma[a]\n                swap.append(souma[j])\n                swap.append(j)\n                souma[j] = j\n                souma[arr[j]] = arr[j]\n                arr[j] = j\n                arr[a] = a\n            if souma[j] != arr[j]:\n                a = souma[j]\n                b = souma[a]\n                c = arr[j]\n                ans.append(souma[j])\n                ans.append(souma[arr[j]])\n                ans.append(arr[j])\n                souma[j] = j\n                souma[arr[j]] = arr[j]\n                souma[arr[arr[j]]] = a\n                d = arr[arr[j]]\n                arr[j] = j\n                arr[c] = c\n                arr[a] = d\n                num += 1\n        j += 1\n    if len(swap) % 4 == 0:\n        for i in range(len(swap) // 4):\n            ans.append(swap[4 * i])\n            ans.append(swap[4 * i + 1])\n            ans.append(swap[4 * i + 2])\n            ans.append(swap[4 * i])\n            ans.append(swap[4 * i + 3])\n            ans.append(swap[4 * i + 2])\n    if num + len(swap) // 2 <= k and len(swap) % 4 == 0:\n        print(num + len(swap) // 2)\n        for nakiri in range(len(ans) // 3):\n            print(ans[3 * nakiri], ans[3 * nakiri + 1], ans[3 * nakiri + 2])\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, k) = (int(x) for x in input().split())\n    arr = [int(x) for x in input().split()]\n    ans = []\n    swap = []\n    arr = [0] + arr\n    souma = [0] * (n + 1)\n    for i in range(1, n + 1):\n        souma[arr[i]] = i\n    num = 0\n    j = 1\n    while j < n + 1:\n        if souma[j] != j:\n            if souma[j] == arr[j]:\n                a = souma[j]\n                b = souma[a]\n                swap.append(souma[j])\n                swap.append(j)\n                souma[j] = j\n                souma[arr[j]] = arr[j]\n                arr[j] = j\n                arr[a] = a\n            if souma[j] != arr[j]:\n                a = souma[j]\n                b = souma[a]\n                c = arr[j]\n                ans.append(souma[j])\n                ans.append(souma[arr[j]])\n                ans.append(arr[j])\n                souma[j] = j\n                souma[arr[j]] = arr[j]\n                souma[arr[arr[j]]] = a\n                d = arr[arr[j]]\n                arr[j] = j\n                arr[c] = c\n                arr[a] = d\n                num += 1\n        j += 1\n    if len(swap) % 4 == 0:\n        for i in range(len(swap) // 4):\n            ans.append(swap[4 * i])\n            ans.append(swap[4 * i + 1])\n            ans.append(swap[4 * i + 2])\n            ans.append(swap[4 * i])\n            ans.append(swap[4 * i + 3])\n            ans.append(swap[4 * i + 2])\n    if num + len(swap) // 2 <= k and len(swap) % 4 == 0:\n        print(num + len(swap) // 2)\n        for nakiri in range(len(ans) // 3):\n            print(ans[3 * nakiri], ans[3 * nakiri + 1], ans[3 * nakiri + 2])\n    else:\n        print(-1)", "test = int(input())\nwhile test > 0:\n    test = test - 1\n    (nn, kk) = map(int, input().split())\n    array = list(map(int, input().split()))\n    array = [0] + array\n    li = [0] * (nn + 1)\n    cc = []\n    dd = []\n    counter = 0\n    k = 1\n    for j in range(1, nn + 1):\n        li[array[j]] = j\n    while k < nn + 1:\n        if k != li[k]:\n            rest = li[k]\n            ee = k\n            if array[k] == rest:\n                dd.append(rest)\n                dd.append(k)\n                array[rest] = rest\n                array[k] = k\n                li[k] = k\n                li[rest] = rest\n            else:\n                counter += 1\n                rest1 = array[k]\n                cc.append(rest)\n                cc.append(ee)\n                cc.append(rest1)\n                array[rest] = array[rest1]\n                array[rest1] = array[ee]\n                array[ee] = k\n                li[array[rest]] = rest\n                li[array[rest1]] = rest1\n                li[k] = k\n        k = k + 1\n    flag = 1\n    if len(dd) % 4 == 0:\n        for j in range(len(dd) // 4):\n            counter = counter + 2\n            cc.append(dd[4 * j])\n            cc.append(dd[4 * j + 1])\n            cc.append(dd[4 * j + 2])\n            cc.append(dd[4 * j])\n            cc.append(dd[4 * j + 3])\n            cc.append(dd[4 * j + 2])\n    else:\n        flag = 0\n    if flag == 1 and counter <= kk:\n        print(counter)\n        for z in range(counter):\n            print(cc[3 * z], cc[3 * z + 1], cc[3 * z + 2])\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = [i - 1 for i in a]\n    v = {}\n    r = []\n    doubles = []\n    c = 0\n    f = 0\n    for i in range(n):\n        while a[i] != i and i not in v:\n            if c >= k:\n                f = 1\n                break\n            x = i\n            y = a[i]\n            z = a[a[i]]\n            if x != z:\n                c += 1\n                r.append([x + 1, y + 1, z + 1])\n                (a[x], a[y], a[z]) = (a[z], a[x], a[y])\n            else:\n                doubles.append([min(x, y), max(x, y)])\n                (v[x], v[y]) = (1, 1)\n        if f == 1:\n            break\n    while len(doubles) > 1:\n        p = doubles.pop()\n        q = doubles.pop()\n        r.append([q[0] + 1, q[1] + 1, p[0] + 1])\n        r.append([q[0] + 1, p[1] + 1, p[0] + 1])\n        c += 2\n    if c > k or f == 1 or doubles:\n        print(-1)\n    else:\n        print(len(r))\n        for i in r:\n            print(*i)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = [0]\n    l.extend(list(map(int, input().split())))\n    l1 = [0] * (n + 1)\n    for i in range(1, n + 1):\n        l1[l[i]] = i\n    l2 = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if l[i] != i:\n            l2[i] = 1\n    i = 1\n    ans = []\n    f = 0\n    while i < n:\n        if l[i] == i:\n            i += 1\n            continue\n        a1 = l1[i]\n        a2 = l[l1[i]]\n        a3 = 0\n        if l1[a1] != a1 and l1[a1] != a2 and (l2[l1[a1]] == 1):\n            a3 = l1[a1]\n        else:\n            i += 1\n            continue\n        if a1 == a2 or a2 == a3 or a3 == a1:\n            i += 1\n            continue\n        b1 = l[a1]\n        b2 = l[a2]\n        b3 = l[a3]\n        l[a2] = b1\n        l[a3] = b2\n        l[a1] = b3\n        l1[b1] = a2\n        l1[b2] = a3\n        l1[b3] = a1\n        if l[a1] == a1:\n            l2[a1] = 0\n        else:\n            l2[a1] = 1\n        if l[a2] == a2:\n            l2[a2] = 0\n        else:\n            l2[a2] = 1\n        if l[a3] == a3:\n            l2[a3] = 0\n        else:\n            l2[a3] = 1\n        if l[b1] == b1:\n            l2[b1] = 0\n        else:\n            l2[b1] = 1\n        if l[b2] == b2:\n            l2[b2] = 0\n        else:\n            l2[b2] = 1\n        if l[b3] == b3:\n            l2[b3] = 0\n        else:\n            l2[b3] = 1\n        i += 1\n        ans.append((a1, a2, a3))\n    f = 0\n    i = 1\n    while i < n:\n        if l[i] == i:\n            i += 1\n            continue\n        a1 = l1[i]\n        a2 = l[l1[i]]\n        a3 = 0\n        l2[a1] = 0\n        l2[a2] = 0\n        if l1[a1] != a1 and l1[a1] != a2 and (l2[l1[a1]] == 1):\n            a3 = l1[a1]\n        elif l1[l[l[i]]] != a1 and l1[l[l[i]]] != a2 and (l2[l1[l[l[i]]]] == 1):\n            a3 = l1[l[l[i]]]\n            (a1, a2, a3) = (a3, a1, a2)\n        else:\n            j = i + 1\n            while j < i + 1 + n:\n                if a3 != 0:\n                    break\n                if l2[j % (n + 1)] == 1:\n                    a3 = j % (n + 1)\n                j += 1\n        if a1 == a2 or a2 == a3 or a3 == a1:\n            f = 1\n            break\n        b1 = l[a1]\n        b2 = l[a2]\n        b3 = l[a3]\n        l[a2] = b1\n        l[a3] = b2\n        l[a1] = b3\n        l1[b1] = a2\n        l1[b2] = a3\n        l1[b3] = a1\n        if l[a1] == a1:\n            l2[a1] = 0\n        else:\n            l2[a1] = 1\n        if l[a2] == a2:\n            l2[a2] = 0\n        else:\n            l2[a2] = 1\n        if l[a3] == a3:\n            l2[a3] = 0\n        else:\n            l2[a3] = 1\n        if l[b1] == b1:\n            l2[b1] = 0\n        else:\n            l2[b1] = 1\n        if l[b2] == b2:\n            l2[b2] = 0\n        else:\n            l2[b2] = 1\n        if l[b3] == b3:\n            l2[b3] = 0\n        else:\n            l2[b3] = 1\n        i += 1\n        ans.append((a1, a2, a3))\n    if f == 1:\n        print(-1)\n        continue\n    f1 = False\n    for i in range(1, n + 1):\n        if l[i] != i:\n            f1 = True\n            break\n    if f1 == True:\n        print(-1)\n    elif len(ans) > k:\n        print(-1)\n    else:\n        print(len(ans))\n        for i in range(len(ans)):\n            print(*ans[i])", "def solve(a, n, k):\n    vis = [False if a[i] != i + 1 else True for i in range(n)]\n    res = []\n    ans = 0\n    two = []\n    for ind in range(n):\n        if vis[ind] == True:\n            continue\n        j = ind\n        ct = 0\n        s = []\n        while vis[j] != True:\n            s.append(j)\n            vis[j] = True\n            j = a[j] - 1\n            ct += 1\n        print('S:', s)\n        if ct % 2 != 0:\n            ans += ct // 2\n            for p in range(1, ct // 2 + 1):\n                res.append([s[0]] + s[2 * p - 1:2 * p + 1])\n        else:\n            ans += ct // 2 - 1\n            for p in range(1, ct // 2):\n                res.append([s[0]] + s[2 * p - 1:2 * p + 1])\n            two.append(s[0])\n            two.append(s[-1])\n            if len(two) > 2:\n                ans += 2\n                res.append(two[:3])\n                res.append([two[0], two[3], two[2]])\n                two.clear()\n        if ct > k:\n            return [-1, []]\n    if len(two) > 0:\n        return [-1, []]\n    return [ans, res]\n\ndef solve2(a, n, k):\n    vis = [True if i == a[i] - 1 else False for i in range(n)]\n    ans = 0\n    res = []\n    two = []\n    for ind in range(n):\n        if vis[ind]:\n            continue\n        j = ind\n        count = 0\n        s = []\n        while vis[j] == False:\n            s.append(j)\n            vis[j] = True\n            j = a[j] - 1\n            count += 1\n        if count % 2 != 0:\n            ans += count // 2\n            for p in range(1, count // 2 + 1):\n                res.append([s[0]] + s[p * 2 - 1:2 * p + 1])\n        else:\n            ans += count // 2 - 1\n            for p in range(1, count // 2):\n                res.append([s[0]] + s[p * 2 - 1:2 * p + 1])\n            two += [s[0], s[-1]]\n            if len(two) > 2:\n                ans += 2\n                res.append(two[:3])\n                res.append([two[0], two[3], two[2]])\n                two.clear()\n        if ans > k:\n            return [-1, []]\n    if len(two) > 0:\n        return [-1, []]\n    return [ans, res]\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (count, s) = solve2(a, n, k)\n    print(count)\n    for i in s:\n        t = [j + 1 for j in i]\n        print(*t)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d1 = {}\n    d2 = {}\n    i = 1\n    c = 0\n    for j in l:\n        d1[i] = j\n        d2[j] = i\n        i += 1\n    l1 = []\n    for i in range(1, n + 1):\n        if i == d1[d1[i]] or i == d1[i]:\n            continue\n        else:\n            k = [d1[i], d2[i], i]\n            l1.append(k)\n            (p, q, r) = k\n            (d2[p], d2[d1[p]], d2[r]) = k\n            (d1[p], d1[q], d1[r]) = (d1[r], d1[p], d1[q])\n    l2 = []\n    for i in d1:\n        if i != d1[i] and i == d1[d1[i]]:\n            y = [i, d1[i]]\n            l2.extend(y)\n            d1[i] = 0\n    if len(l2) % 4 == 0:\n        for i in range(0, len(l2), 4):\n            (p, q, r, s) = l2[i:i + 4]\n            l1.extend([[r, q, p], [s, r, q]])\n    else:\n        c = 1\n    if c == 1 or m < len(l1):\n        print(-1)\n    else:\n        print(len(l1))\n        for (p, g, m) in l1:\n            print(p, g, m)", "test = int(input())\nwhile test:\n    test -= 1\n    (n, k) = map(int, input().split())\n    p = [None] + list(map(int, input().split()))\n    visited = [False for i in range(n + 1)]\n    steps = []\n    doubles = []\n    steps_taken = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            cycles = []\n            j = i\n            while not visited[j]:\n                visited[j] = True\n                cycles.append(j)\n                j = p[j]\n            while len(cycles) > 2:\n                z = cycles.pop()\n                y = cycles.pop()\n                x = cycles[-1]\n                steps.append((x, y, z))\n                steps_taken += 1\n                if len(cycles) == 1:\n                    cycles.pop()\n            if len(cycles) == 2:\n                doubles.append(cycles)\n    while len(doubles) > 1:\n        pair1 = doubles.pop()\n        pair2 = doubles.pop()\n        (a, b) = (pair1[0], pair1[1])\n        (c, d) = (pair2[0], pair2[1])\n        steps.append((a, b, d))\n        steps.append((d, a, c))\n        steps_taken += 2\n    if len(doubles) > 0 or len(steps) > k:\n        print(-1)\n    else:\n        print(len(steps))\n        for s in steps:\n            print(str(s[0]) + ' ' + str(s[1]) + ' ' + str(s[2]))", "test = int(input())\nwhile test:\n    test -= 1\n    (n, k) = map(int, input().split())\n    p = [None] + list(map(int, input().split()))\n    visited = [False for i in range(n + 1)]\n    steps = []\n    doubles = []\n    steps_taken = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            cycles = []\n            j = i\n            while not visited[j]:\n                visited[j] = True\n                cycles.append(j)\n                j = p[j]\n            while len(cycles) > 2:\n                z = cycles.pop()\n                y = cycles.pop()\n                x = cycles[-1]\n                steps.append((x, y, z))\n                steps_taken += 1\n                if len(cycles) == 1:\n                    cycles.pop()\n            if len(cycles) == 2:\n                doubles.append(cycles)\n    while len(doubles) > 1:\n        pair1 = doubles.pop()\n        pair2 = doubles.pop()\n        (a, b) = (pair1[0], pair1[1])\n        (c, d) = (pair2[0], pair2[1])\n        steps.append((b, c, d))\n        steps.append((a, b, c))\n        steps_taken += 2\n    if len(doubles) > 0 or len(steps) > k:\n        print(-1)\n    else:\n        print(len(steps))\n        for s in steps:\n            print(str(s[0]) + ' ' + str(s[1]) + ' ' + str(s[2]))", "T = int(input())\n\ndef rotate(a, b, c, arr, unsorted):\n    n = 1\n    arrl = [a, b, c]\n    return (n, arrl)\nfor t in range(T):\n    ns = input()\n    num = list(map(int, ns.split()))\n    n = num[0]\n    kk = num[1]\n    arr_s = input()\n    arr = list(map(int, arr_s.split()))\n    n = len(arr)\n    l = []\n    f = False\n    inversions = []\n    count = 0\n    for i in range(n):\n        while arr[i] != i + 1:\n            if arr[i] != i + 1:\n                ai = i + 1\n                bi = arr[i]\n                if ai == arr[bi - 1]:\n                    inversions.append(ai)\n                    inversions.append(bi)\n                    tp = arr[ai - 1]\n                    arr[ai - 1] = arr[bi - 1]\n                    arr[bi - 1] = tp\n                else:\n                    ci = arr[bi - 1]\n                    tmp = arr[ai - 1]\n                    arr[ai - 1] = arr[ci - 1]\n                    arr[ci - 1] = arr[bi - 1]\n                    arr[bi - 1] = tmp\n                    l.append([ai, bi, ci])\n                    count += 1\n                if count > kk:\n                    break\n    if len(inversions) % 4 == 0:\n        for i in range(int(len(inversions) / 4)):\n            ai = inversions[4 * i]\n            bi = inversions[4 * i + 1]\n            ci = inversions[4 * i + 2]\n            di = inversions[4 * i + 3]\n            l.append([ai, ci, bi])\n            l.append([bi, di, ci])\n    else:\n        print(-1)\n        continue\n    for i in range(len(arr)):\n        if arr[i] != i + 1:\n            f = True\n            break\n    if len(l) > kk or f:\n        print(-1)\n        continue\n    print(len(l))\n    for i in l:\n        print(i[0], i[1], i[2])", "import sys\n\ndef sol(c):\n    print(len(c))\n    for j in c:\n        p = [x + 1 for x in j]\n        print(*p)\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (n, k) = map(int, sys.stdin.readline().strip().split())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    for j in range(n):\n        a[j] -= 1\n    d = list(sorted(a))\n    if a == d:\n        print('0')\n        continue\n    res = {}\n    for j in range(n):\n        res[a[j]] = j\n    val = []\n    c = []\n    valb = [False for j in range(n)]\n    for j in range(n):\n        if a[j] != j and valb[j] == False:\n            pair = [res[j], j, a[j]]\n            if a[a[j]] == j:\n                val.append([j, a[j]])\n                valb[j] = True\n                valb[a[j]] = True\n            else:\n                temp1 = a[pair[2]]\n                temp2 = a[pair[0]]\n                temp3 = a[pair[1]]\n                a[pair[0]] = temp1\n                res[temp1] = pair[0]\n                a[pair[1]] = temp2\n                res[temp2] = pair[1]\n                a[pair[2]] = temp3\n                res[temp3] = pair[2]\n                c.append(pair)\n    if len(val) > 0:\n        if len(val) % 2 == 1:\n            print('-1')\n            continue\n        else:\n            for j in range(0, len(val), 2):\n                c.append([val[j][0], val[j][1], val[j + 1][1]])\n                c.append([val[j][0], val[j + 1][0], val[j + 1][1]])\n    if len(c) <= k:\n        sol(c)\n    else:\n        print('-1')", "for _ in range(int(input())):\n    (nn, kk) = map(int, input().split())\n    array = list(map(int, input().split()))\n    array = [0] + array\n    li = [0] * (nn + 1)\n    cc = []\n    dd = []\n    counter = 0\n    k = 1\n    for j in range(1, nn + 1):\n        li[array[j]] = j\n    for k in range(nn + 1):\n        if k != li[k]:\n            rest = li[k]\n            ee = k\n            if array[k] == rest:\n                dd.append(rest)\n                dd.append(k)\n                array[rest] = rest\n                array[k] = k\n                li[k] = k\n                li[rest] = rest\n            else:\n                counter += 1\n                rest1 = array[k]\n                cc.append(rest)\n                cc.append(ee)\n                cc.append(rest1)\n                array[rest] = array[rest1]\n                array[rest1] = array[ee]\n                array[ee] = k\n                li[array[rest]] = rest\n                li[array[rest1]] = rest1\n                li[k] = k\n    flag = 1\n    if len(dd) % 4 == 0:\n        for j in range(len(dd) // 4):\n            counter = counter + 2\n            cc.append(dd[4 * j])\n            cc.append(dd[4 * j + 1])\n            cc.append(dd[4 * j + 2])\n            cc.append(dd[4 * j])\n            cc.append(dd[4 * j + 3])\n            cc.append(dd[4 * j + 2])\n    else:\n        flag = 0\n    if flag == 1 and counter <= kk:\n        print(counter)\n        for z in range(counter):\n            print(cc[3 * z], cc[3 * z + 1], cc[3 * z + 2])\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (nn, kk) = map(int, input().split())\n    array = list(map(int, input().split()))\n    array = [0] + array\n    li = [0] * (nn + 1)\n    cc = []\n    dd = []\n    counter = 0\n    k = 1\n    for j in range(1, nn + 1):\n        li[array[j]] = j\n    for k in range(nn + 1):\n        if k != li[k]:\n            rest = li[k]\n            ee = k\n            if array[k] == rest:\n                dd.append(rest)\n                dd.append(k)\n                array[rest] = rest\n                array[k] = k\n                li[k] = k\n                li[rest] = rest\n            else:\n                counter += 1\n                rest1 = array[k]\n                cc.append(rest)\n                cc.append(ee)\n                cc.append(rest1)\n                array[rest] = array[rest1]\n                array[rest1] = array[ee]\n                array[ee] = k\n                li[array[rest]] = rest\n                li[array[rest1]] = rest1\n                li[k] = k\n    flag = 1\n    if len(dd) % 4 == 0:\n        for j in range(len(dd) // 4):\n            counter = counter + 2\n            cc.append(dd[4 * j])\n            cc.append(dd[4 * j + 1])\n            cc.append(dd[4 * j + 2])\n            cc.append(dd[4 * j])\n            cc.append(dd[4 * j + 3])\n            cc.append(dd[4 * j + 2])\n    else:\n        flag = 0\n    if flag == 1 and counter <= kk:\n        print(counter)\n        for z in range(counter):\n            print(cc[3 * z], cc[3 * z + 1], cc[3 * z + 2])\n    else:\n        print(-1)", "def triple_sort(p, N, K):\n    ans = 0\n    res = []\n    if_two = []\n    visited = [True if i == p[i] - 1 else False for i in range(N)]\n    for index in range(N):\n        if visited[index] == True:\n            continue\n        temp = index\n        cnt = 0\n        a = []\n        while visited[temp] == False:\n            a.append(temp)\n            visited[temp] = True\n            temp = p[temp] - 1\n            cnt += 1\n        if cnt % 2 != 0:\n            ans += cnt // 2\n            for i in range(1, cnt // 2 + 1):\n                res.append([a[0]] + a[i * 2 - 1:i * 2 + 1])\n        else:\n            ans += cnt // 2 - 1\n            for i in range(1, cnt // 2):\n                res.append([a[0]] + a[i * 2 - 1:i * 2 + 1])\n            if_two += [a[0], a[-1]]\n            if len(if_two) > 2:\n                ans += 2\n                res.append(if_two[:3])\n                res.append([if_two[0], if_two[3], if_two[2]])\n                if_two.clear()\n        if ans > K:\n            return (-1, [])\n    if len(if_two) > 0:\n        return (-1, [])\n    else:\n        return (ans, res)\nfor tc in range(int(input())):\n    (N, K) = map(int, input().split())\n    p_list = list(map(int, input().split()))\n    (moves, ind_list) = triple_sort(p_list, N, K)\n    print(moves)\n    for each in ind_list:\n        output = [inc + 1 for inc in each]\n        print(*output)", "def triple_sort(n, k, prm_list):\n    checked = [True if i == prm_list[i] - 1 else False for i in range(n)]\n    ans = 0\n    even_cycle = []\n    result = []\n    for (index, flag) in enumerate(checked):\n        if flag:\n            continue\n        cycle_list = []\n        count = 0\n        value = index\n        while not checked[value]:\n            checked[value] = True\n            cycle_list.append(value)\n            value = prm_list[value] - 1\n            count += 1\n        (temp_result, temp_even_cycle, temp_count) = swap_indexes(cycle_list, count, even_cycle)\n        result += temp_result\n        even_cycle = temp_even_cycle\n        ans += temp_count\n        if ans > k:\n            return [-1, []]\n    if len(even_cycle) > 0:\n        return [-1, []]\n    return [ans, result]\n\ndef swap_indexes(cycle_list, list_len, even_cycle):\n    result = []\n    count = 0\n    if list_len % 2 != 0:\n        count += list_len // 2\n        for i in range(1, list_len // 2 + 1):\n            result.append([cycle_list[0]] + cycle_list[i * 2 - 1:i * 2 + 1])\n    else:\n        count += list_len // 2 - 1\n        for i in range(1, list_len // 2):\n            result.append([cycle_list[0]] + cycle_list[i * 2 - 1:i * 2 + 1])\n        even_cycle += [cycle_list[0], cycle_list[-1]]\n        if len(even_cycle) > 2:\n            count += 2\n            result.append(even_cycle[:3])\n            result.append([even_cycle[0]] + [even_cycle[3]] + [even_cycle[2]])\n            even_cycle = []\n    return (result, even_cycle, count)\ntest_case = int(input())\nfor i in range(test_case):\n    (n, k) = map(int, input().split())\n    m = k\n    prm_list = list(map(int, input().split()))\n    (k, result) = triple_sort(n, k, prm_list)\n    print(k)\n    for r in result:\n        re = [m + 1 for m in r]\n        print(*re)", "def triple_sort(n, k, prm_list):\n    checked = [True if i == prm_list[i] - 1 else False for i in range(n)]\n    ans = 0\n    even_cycle = []\n    result = []\n    for (index, flag) in enumerate(checked):\n        if flag:\n            continue\n        cycle_list = []\n        count = 0\n        value = index\n        while not checked[value]:\n            checked[value] = True\n            cycle_list.append(value)\n            value = prm_list[value] - 1\n            count += 1\n        if count % 2 != 0:\n            ans += count // 2\n            for g in range(1, count // 2 + 1):\n                result.append([cycle_list[0]] + cycle_list[g * 2 - 1:g * 2 + 1])\n        else:\n            ans += count // 2 - 1\n            for g in range(1, count // 2):\n                result.append([cycle_list[0]] + cycle_list[g * 2 - 1:g * 2 + 1])\n            even_cycle += [cycle_list[0], cycle_list[-1]]\n        if len(even_cycle) > 2:\n            ans += 2\n            result.append(even_cycle[:3])\n            result.append([even_cycle[0]] + [even_cycle[3]] + [even_cycle[2]])\n            even_cycle.clear()\n        if ans > k:\n            return [-1, []]\n    if len(even_cycle) > 0:\n        return [-1, []]\n    return [ans, result]\n\ndef swap_indexes(cycle_list, list_len, even_cycle):\n    result = []\n    count = 0\n    if list_len % 2 != 0:\n        count += list_len // 2\n        for i in range(1, list_len // 2 + 1):\n            result.append([cycle_list[0]] + cycle_list[i * 2 - 1:i * 2 + 1])\n    else:\n        count += list_len // 2 - 1\n        for i in range(1, list_len // 2 - 1):\n            result.append([cycle_list[0]] + cycle_list[i * 2 - 1:i * 2 + 1])\n        even_cycle += [cycle_list[0], cycle_list[-1]]\n        if len(even_cycle) > 2:\n            count += 2\n            result.append(even_cycle[:3])\n            result.append([even_cycle[0]] + [even_cycle[3]] + [even_cycle[2]])\n            even_cycle = []\n    return (result, even_cycle, count)\ntest_case = int(input())\nfor i in range(test_case):\n    (n, k) = map(int, input().split())\n    m = k\n    prm_list = list(map(int, input().split()))\n    (k, result) = triple_sort(n, k, prm_list)\n    print(k)\n    for r in result:\n        re = [m + 1 for m in r]\n        print(*re)", "ipnl = lambda n: [int(input()) for _ in range(n)]\ninp = lambda : int(input())\nip = lambda : [int(w) for w in input().split()]\nfrom bisect import insort, bisect_left as bs\nfor _ in range(inp()):\n    (n, k) = ip()\n    x = ip()\n    xind = {x[i]: i for i in range(n)}\n    y = [i + 1 for i in range(n)]\n    if x == y:\n        print(0)\n        continue\n    ind = [i for i in range(n) if x[i] != y[i]]\n    vis = {i: 1 for i in ind}\n    (ans, dup) = ([], [])\n    while len(ind) >= 3 and k:\n        h = ind[0]\n        i = xind[h + 1]\n        j = xind[i + 1]\n        if h == x[i] - 1 and i == x[h] - 1:\n            dup.extend([h, i])\n            ind = ind[1:]\n            ix = bs(ind, i)\n            ind.pop(ix)\n            vis[i] = 0\n            vis[h] = 0\n            continue\n        t = [h, j, i]\n        (x[h], x[j], x[i]) = (x[i], x[h], x[j])\n        (xind[x[h]], xind[x[j]], xind[x[i]]) = (h, j, i)\n        for kk in t:\n            if vis.get(kk, 0):\n                if x[kk] == y[kk]:\n                    ix = bs(ind, kk)\n                    ind.pop(ix)\n                    vis[kk] = 0\n        ans.append([ii + 1 for ii in t])\n        k -= 1\n    dup.extend(ind)\n    if len(dup) % 4 != 0:\n        print(-1)\n        continue\n    for i in range(0, len(dup) - 3, 4):\n        (a, b, c, d) = dup[i:i + 4]\n        (x[a], x[b], x[d]) = (x[d], x[a], x[b])\n        (x[a], x[c], x[d]) = (x[d], x[a], x[c])\n        ans.append([a + 1, b + 1, d + 1])\n        ans.append([a + 1, c + 1, d + 1])\n    if x != y:\n        print(-1)\n        continue\n    print(len(ans))\n    [print(*i) for i in ans]", "ipnl = lambda n: [int(input()) for _ in range(n)]\ninp = lambda : int(input())\nip = lambda : [int(w) for w in input().split()]\nfrom bisect import insort, bisect_left as bs\nfor _ in range(inp()):\n    (n, k) = ip()\n    x = ip()\n    xind = {x[i]: i for i in range(n)}\n    y = [i + 1 for i in range(n)]\n    if x == y:\n        print(0)\n        continue\n    ind = [i for i in range(n) if x[i] != y[i]]\n    vis = {i: 1 for i in ind}\n    ans = []\n    ctr = 0\n    dup = []\n    while len(ind) >= 3 and k:\n        h = ind[0]\n        i = xind[h + 1]\n        j = xind[i + 1]\n        if h == x[i] - 1 and i == x[h] - 1:\n            dup.extend([h, i])\n            ind = ind[1:]\n            ix = bs(ind, i)\n            ind.pop(ix)\n            vis[i] = 0\n            vis[h] = 0\n            continue\n        t = [h, j, i]\n        (x[h], x[j], x[i]) = (x[i], x[h], x[j])\n        (xind[x[h]], xind[x[j]], xind[x[i]]) = (h, j, i)\n        ctr += 1\n        for kk in t:\n            if vis.get(kk, 0):\n                if x[kk] == y[kk]:\n                    ix = bs(ind, kk)\n                    ind.pop(ix)\n                    vis[kk] = 0\n        ans.append([ii + 1 for ii in t])\n        k -= 1\n    dup.extend(ind)\n    if len(dup) % 4 != 0:\n        print(-1)\n        continue\n    for i in range(0, len(dup) - 3, 4):\n        (a, b, c, d) = dup[i:i + 4]\n        (x[a], x[b], x[d]) = (x[d], x[a], x[b])\n        (x[a], x[c], x[d]) = (x[d], x[a], x[c])\n        ans.append([a + 1, b + 1, d + 1])\n        ans.append([a + 1, c + 1, d + 1])\n    if x != y:\n        print(-1)\n        continue\n    print(len(ans))\n    [print(*i) for i in ans]", "test = int(input())\nwhile test > 0:\n    test = test - 1\n    (nn, kk) = map(int, input().split())\n    array = list(map(int, input().split()))\n    array = [0] + array\n    li = [0] * (nn + 1)\n    cc = []\n    dd = []\n    counter = 0\n    k = 1\n    for j in range(1, nn + 1):\n        li[array[j]] = j\n    while k < nn + 1:\n        if k != li[k]:\n            rest = li[k]\n            ee = k\n            if array[k] == rest:\n                dd.append(rest)\n                dd.append(k)\n                array[rest] = rest\n                array[k] = k\n                li[k] = k\n                li[rest] = rest\n            else:\n                counter += 1\n                rest1 = array[k]\n                cc.append(rest)\n                cc.append(ee)\n                cc.append(rest1)\n                array[rest] = array[rest1]\n                array[rest1] = array[ee]\n                array[ee] = k\n                li[array[rest]] = rest\n                li[array[rest1]] = rest1\n                li[k] = k\n        k = k + 1\n    flag = 1\n    if len(dd) % 4 == 0:\n        for j in range(len(dd) // 4):\n            counter = counter + 2\n            cc.append(dd[4 * j])\n            cc.append(dd[4 * j + 1])\n            cc.append(dd[4 * j + 2])\n            cc.append(dd[4 * j])\n            cc.append(dd[4 * j + 3])\n            cc.append(dd[4 * j + 2])\n    else:\n        flag = 0\n    if flag == 1 and counter <= kk:\n        print(counter)\n        for z in range(counter):\n            print(cc[3 * z], cc[3 * z + 1], cc[3 * z + 2])\n    else:\n        print(-1)", "def solve(a, n, k):\n    vis = [True if i == a[i] - 1 else False for i in range(n)]\n    ans = 0\n    res = []\n    two = []\n    for ind in range(n):\n        if vis[ind]:\n            continue\n        j = ind\n        count = 0\n        s = []\n        while vis[j] == False:\n            s.append(j)\n            vis[j] = True\n            j = a[j] - 1\n            count += 1\n        if count % 2 != 0:\n            ans += count // 2\n            for p in range(1, count // 2 + 1):\n                res.append([s[0]] + s[p * 2 - 1:2 * p + 1])\n        else:\n            ans += count // 2 - 1\n            for p in range(1, count // 2):\n                res.append([s[0]] + s[p * 2 - 1:2 * p + 1])\n            two += [s[0], s[-1]]\n            if len(two) > 2:\n                ans += 2\n                res.append(two[:3])\n                res.append([two[0], two[3], two[2]])\n                two.clear()\n        if ans > k:\n            return [-1, []]\n    if len(two) > 0:\n        return [-1, []]\n    return [ans, res]\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (count, s) = solve(a, n, k)\n    print(count)\n    for i in s:\n        t = [j + 1 for j in i]\n        print(*t)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().strip().split(' '))\n    a = [0]\n    a[1:] = list(map(int, input().strip().split(' ')))\n    pivot = [False] * (n + 1)\n    op = []\n    re = []\n    flag = 0\n    for i in range(1, n + 1):\n        if pivot[i] or a[i] == i:\n            continue\n        else:\n            seq = []\n            seq.append(i)\n            pivot[i] = True\n            j = a[i]\n            while j != i:\n                pivot[j] = True\n                seq.append(j)\n                j = a[j]\n        x = len(seq)\n        if x == 2:\n            re.append(seq)\n            continue\n        if x % 2 == 0:\n            re.append([seq[0], seq[-1]])\n        for i in range(1, x - 1, 2):\n            op.append([seq[0], seq[i], seq[i + 1]])\n        if len(op) + len(re) > k:\n            flag = 1\n            break\n    if flag == 1 or len(re) % 2 != 0:\n        print(-1)\n    else:\n        print(len(op) + len(re))\n        for z in op:\n            print(*z)\n        for i in range(0, len(re), 2):\n            print(re[i][0], re[i][1], re[i + 1][0])\n            print(re[i][0], re[i + 1][1], re[i + 1][0])", "def solve(a, n, k):\n    vis = [True if i == a[i] - 1 else False for i in range(n)]\n    ans = 0\n    res = []\n    two = []\n    for ind in range(n):\n        if vis[ind]:\n            continue\n        j = ind\n        count = 0\n        s = []\n        while vis[j] == False:\n            s.append(j)\n            vis[j] = True\n            j = a[j] - 1\n            count += 1\n        if count % 2 != 0:\n            ans += count // 2\n            for p in range(1, count // 2 + 1):\n                res.append([s[0]] + s[p * 2 - 1:2 * p + 1])\n        else:\n            ans += count // 2 - 1\n            for p in range(1, count // 2):\n                res.append([s[0]] + s[p * 2 - 1:2 * p + 1])\n            two += [s[0], s[-1]]\n            if len(two) > 2:\n                ans += 2\n                res.append(two[:3])\n                res.append([two[0], two[3], two[2]])\n                two.clear()\n        if ans > k:\n            return [-1, []]\n    if len(two) > 0:\n        return [-1, []]\n    return [ans, res]\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (count, s) = solve(a, n, k)\n    print(count)\n    for i in s:\n        t = [j + 1 for j in i]\n        print(*t)", "import numpy as np\nfor i in range(int(input())):\n    (N, K) = map(int, input().split())\n    P = list(map(int, input().split()))\n    T = []\n    for i in range(N):\n        P[i] -= 1\n        if P[i] == i:\n            T.append(True)\n        else:\n            T.append(False)\n    Q = np.argsort(P)\n    count = 0\n    ans = []\n    i = 0\n    val = []\n    while i < N:\n        if T[i]:\n            i += 1\n            continue\n        i3 = Q[i]\n        i1 = i\n        i2 = P[i]\n        if i2 == i3:\n            val.append([i1, i3])\n            T[i1] = True\n            T[i3] = True\n            temp = Q[i1]\n            Q[i1] = Q[i3]\n            Q[i3] = temp\n        else:\n            temp = Q[P[i1]]\n            Q[P[i1]] = Q[P[i2]]\n            Q[P[i2]] = Q[P[i3]]\n            Q[P[i3]] = temp\n            temp = P[i1]\n            P[i1] = P[i3]\n            P[i3] = P[i2]\n            P[i2] = temp\n            ans.append([i1, i2, i3])\n            if P[i1] == i1:\n                T[i1] = True\n            if P[i2] == i2:\n                T[i2] = True\n            if P[i3] == i3:\n                T[i3] = True\n            count += 1\n        i += 1\n    if len(val) > 0:\n        if len(val) % 2 == 1:\n            print('-1')\n            continue\n        else:\n            for j in range(0, len(val), 2):\n                ans.append([val[j][0], val[j][1], val[j + 1][1]])\n                ans.append([val[j][0], val[j + 1][0], val[j + 1][1]])\n                count += 2\n    if count <= K:\n        print(count)\n        for i in ans:\n            print(f'{i[0] + 1} {i[1] + 1} {i[2] + 1}')\n    else:\n        print('-1')", "for _ in range(int(input())):\n    (nn, kk) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr = [0] + arr\n    li = [0] * (nn + 1)\n    concomp = []\n    dd = []\n    c = 0\n    k = 1\n    for j in range(1, nn + 1):\n        li[arr[j]] = j\n    while k < nn + 1:\n        if k != li[k]:\n            ele = li[k]\n            e = k\n            if arr[k] == ele:\n                dd.append(ele)\n                dd.append(k)\n                arr[ele] = ele\n                arr[k] = k\n                li[k] = k\n                li[ele] = ele\n            else:\n                c += 1\n                ele1 = arr[k]\n                concomp.append(ele)\n                concomp.append(e)\n                concomp.append(ele1)\n                arr[ele] = arr[ele1]\n                arr[ele1] = arr[e]\n                arr[e] = k\n                li[arr[ele]] = ele\n                li[arr[ele1]] = ele1\n                li[k] = k\n        k += 1\n    flag = 1\n    if len(dd) % 4 == 0:\n        for j in range(len(dd) // 4):\n            c += 2\n            concomp.append(dd[4 * j])\n            concomp.append(dd[4 * j + 1])\n            concomp.append(dd[4 * j + 2])\n            concomp.append(dd[4 * j])\n            concomp.append(dd[4 * j + 3])\n            concomp.append(dd[4 * j + 2])\n    else:\n        flag = 0\n    if flag == 1 and c <= kk:\n        print(c)\n        for z in range(c):\n            print(concomp[3 * z], concomp[3 * z + 1], concomp[3 * z + 2])\n    else:\n        print(-1)", "try:\n\n    def change(list, pos1, pos2):\n        (list[pos1], list[pos2]) = (list[pos2], list[pos1])\n        return list\n    test = input()\n    test = int(test)\n    tser = 0\n    for tser in range(test):\n        (N, Q) = map(int, input().split(' '))\n        l = list(map(int, input().split(' ')))\n        unsor = 0\n        l = [0] + l\n        i = 1\n        while i <= N:\n            if l[i] != i:\n                unsor += 1\n            i += 1\n        if unsor == 0:\n            print(0)\n            continue\n        if all((l[i] >= l[i + 1] for i in range(len(l) - 1))):\n            if N % 4 != 0 or N % 4 != 1:\n                print('-1')\n            else:\n                Q = 1\n                p = N\n                la = 0\n                print(N // 2)\n                for i in range(0, N // 2):\n                    print(p, Q, p - 1)\n                    la += 1\n                    if la == 2:\n                        la = 0\n                        p = p - 2\n                    Q += 1\n        else:\n            ran = 0\n            p_p = 0\n            fin = []\n            i = 0\n            while i < N + 1:\n                th = i\n                se = l[i]\n                if i == l[l[i]]:\n                    i += 1\n                    continue\n                else:\n                    fir = l[l[i]]\n                    change(l, th, se)\n                    change(l, th, fir)\n                    if l[se] == se:\n                        unsor -= 1\n                    if l[fir] == fir:\n                        unsor -= 1\n                    if l[th] == th:\n                        unsor -= 1\n                    ran += 1\n                    fin.append(th)\n                    fin.append(se)\n                    fin.append(fir)\n                if ran > Q:\n                    p_p = -1\n                    break\n            i = 1\n            while i:\n                if unsor > 0 and unsor <= 2:\n                    p_p = -1\n                    break\n                else:\n                    th = i\n                    se = l[i]\n                    if th != se:\n                        for j in range(i, N + 1):\n                            if j != l[j] and j != th and (j != se):\n                                fir = j\n                                change(l, th, se)\n                                change(l, th, fir)\n                                ran += 1\n                                if l[fir] == fir:\n                                    unsor -= 1\n                                if l[th] == th:\n                                    unsor -= 1\n                                if l[se] == se:\n                                    unsor -= 1\n                                fin.append(th)\n                                fin.append(se)\n                                fin.append(fir)\n                                break\n                    if i == l[i]:\n                        if i != N:\n                            i += 1\n                        else:\n                            break\n                    if ran > Q:\n                        p_p = -1\n                        break\n            if unsor == 0 and p_p != -1 and (ran <= Q):\n                p_p = ran\n            if p_p != -1:\n                print(ran)\n                for i in range(0, len(fin), 3):\n                    print(fin[i], fin[i + 1], fin[i + 2])\n            else:\n                print(-1)\n                continue\nexcept:\n    pass", "from collections import Counter\n\ndef check(arr, k):\n    result = []\n    count = 0\n    arr2 = []\n    c = set()\n    d = {}\n    j = 0\n    for i in arr:\n        d[i] = j\n        j += 1\n    brr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i] != i + 1:\n            index3 = d[i + 1]\n            index2 = d[index3 + 1]\n            index1 = i\n            if index1 != index2 and index2 != index3 and (index3 != index1):\n                temp = arr[index1]\n                arr[index1] = arr[index3]\n                arr[index3] = arr[index2]\n                arr[index2] = temp\n                d[arr[index1]] = index1\n                d[arr[index2]] = index2\n                d[arr[index3]] = index3\n                result.append([index1, index2, index3])\n            else:\n                count += 1\n                if i not in c:\n                    arr2.extend([arr[i] - 1, i])\n                    c.add(arr[i] - 1)\n                    c.add(i)\n    if count % 4 != 0:\n        return -1\n    else:\n        for i in range(len(arr2) - 2):\n            if arr[arr2[i]] != arr2[i] + 1:\n                index2 = arr2[i + 2]\n                index3 = arr2[i + 1]\n                index1 = arr2[i]\n                temp = arr[index1]\n                arr[index1] = arr[index3]\n                arr[index3] = arr[index2]\n                arr[index2] = temp\n                d[arr[index1]] = index1\n                d[arr[index2]] = index2\n                d[arr[index3]] = index3\n                result.append([index1, index2, index3])\n    if arr == brr:\n        return result\n    return -1\nt = int(input())\nwhile t:\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    result = check(arr, k)\n    if result == -1:\n        print(result)\n    else:\n        print(len(result))\n        for (i1, i2, i3) in result:\n            print(i1 + 1, i2 + 1, i3 + 1)\n    t -= 1", "from collections import Counter\n\ndef check(arr, k):\n    result = []\n    count = 0\n    arr2 = []\n    c = set()\n    d = {}\n    j = 0\n    for i in arr:\n        d[i] = j\n        j += 1\n    brr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i] != i + 1:\n            index3 = d[i + 1]\n            index2 = d[index3 + 1]\n            index1 = i\n            if index1 != index2 and index2 != index3 and (index3 != index1):\n                temp = arr[index1]\n                arr[index1] = arr[index3]\n                arr[index3] = arr[index2]\n                arr[index2] = temp\n                d[arr[index1]] = index1\n                d[arr[index2]] = index2\n                d[arr[index3]] = index3\n                result.append([index1, index2, index3])\n            else:\n                count += 1\n                if i not in c:\n                    arr2.extend([arr[i] - 1, i])\n                    c.add(arr[i] - 1)\n                    c.add(i)\n    if count % 4 != 0:\n        return -1\n    else:\n        for i in range(len(arr2) - 2):\n            if arr[arr2[i]] != arr2[i] + 1:\n                index2 = arr2[i + 2]\n                index3 = arr2[i + 1]\n                index1 = arr2[i]\n                temp = arr[index1]\n                arr[index1] = arr[index3]\n                arr[index3] = arr[index2]\n                arr[index2] = temp\n                d[arr[index1]] = index1\n                d[arr[index2]] = index2\n                d[arr[index3]] = index3\n                result.append([index1, index2, index3])\n    if arr == brr:\n        return result\n    return -1\nt = int(input())\nwhile t:\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    result = check(arr, k)\n    if result == -1:\n        print(result)\n    else:\n        print(len(result))\n        for (i1, i2, i3) in result:\n            print(i1 + 1, i2 + 1, i3 + 1)\n    t -= 1", "def solve(a, n, k):\n    vis = [True if i == a[i] - 1 else False for i in range(n)]\n    ans = 0\n    res = []\n    two = []\n    for ind in range(n):\n        if vis[ind]:\n            continue\n        j = ind\n        count = 0\n        s = []\n        while vis[j] == False:\n            s.append(j)\n            vis[j] = True\n            j = a[j] - 1\n            count += 1\n        if count % 2 != 0:\n            ans += count // 2\n            for p in range(1, count // 2 + 1):\n                res.append([s[0]] + s[p * 2 - 1:2 * p + 1])\n        else:\n            ans += count // 2 - 1\n            for p in range(1, count // 2):\n                res.append([s[0]] + s[p * 2 - 1:2 * p + 1])\n            two += [s[0], s[-1]]\n            if len(two) > 2:\n                ans += 2\n                res.append(two[:3])\n                res.append([two[0], two[3], two[2]])\n                two.clear()\n        if ans > k:\n            return [-1, []]\n    if len(two) > 0:\n        return [-1, []]\n    return [ans, res]\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (count, s) = solve(a, n, k)\n    print(count)\n    for i in s:\n        t = [j + 1 for j in i]\n        print(*t)", "for _ in range(int(input())):\n    (n, k) = map(int, input().strip().split(' '))\n    (op, re, pivot, flag, a) = ([], [], [False] * (n + 1), 0, [0] + list(map(int, input().strip().split(' '))))\n    for i in range(1, n + 1):\n        if pivot[i] or a[i] == i:\n            continue\n        else:\n            seq = []\n            seq.append(i)\n            (pivot[i], j) = (True, a[i])\n            while j != i:\n                pivot[j] = True\n                seq.append(j)\n                j = a[j]\n        x = len(seq)\n        if x == 2:\n            re.append(seq)\n            continue\n        if x % 2 == 0:\n            re.append([seq[0], seq[-1]])\n        for i in range(1, x - 1, 2):\n            op.append([seq[0], seq[i], seq[i + 1]])\n        if len(op) + len(re) > k:\n            flag = 1\n            break\n    if flag == 1 or len(re) % 2 != 0:\n        print(-1)\n    else:\n        print(len(op) + len(re))\n        for op in op:\n            print(*op)\n        for i in range(0, len(re), 2):\n            print(re[i][0], re[i][1], re[i + 1][0])\n            print(re[i][0], re[i + 1][1], re[i + 1][0])", "for _ in range(int(input())):\n    (nn, kk) = map(int, input().split())\n    (cc, dd, counter, k, li, array, flag) = ([], [], 0, 1, [0] * (nn + 1), [0] + list(map(int, input().split())), 1)\n    for j in range(1, nn + 1):\n        li[array[j]] = j\n    while k < nn + 1:\n        if k != li[k]:\n            (rest, ee) = (li[k], k)\n            if array[k] == rest:\n                (dd.append(rest), dd.append(k))\n                (array[rest], array[k], li[k], li[rest]) = (rest, k, k, rest)\n            else:\n                (counter, rest1) = (counter + 1, array[k])\n                (cc.append(rest), cc.append(ee), cc.append(rest1))\n                array[rest] = array[rest1]\n                array[rest1] = array[ee]\n                array[ee] = k\n                (li[array[rest]], li[array[rest1]], li[k]) = (rest, rest1, k)\n        k += 1\n    if len(dd) % 4 == 0:\n        for j in range(len(dd) // 4):\n            counter = counter + 2\n            (cc.append(dd[4 * j]), cc.append(dd[4 * j + 1]), cc.append(dd[4 * j + 2]), cc.append(dd[4 * j]), cc.append(dd[4 * j + 3]), cc.append(dd[4 * j + 2]))\n    else:\n        flag = 0\n    if flag == 1 and counter <= kk:\n        print(counter)\n        for z in range(counter):\n            print(cc[3 * z], cc[3 * z + 1], cc[3 * z + 2])\n    else:\n        print(-1)", "import sys\n\ndef sol(c):\n    print(len(c))\n    for j in c:\n        p = [x + 1 for x in j]\n        print(*p)\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (n, k) = map(int, sys.stdin.readline().strip().split())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    for j in range(n):\n        a[j] -= 1\n    d = []\n    for i in range(n):\n        d.append(i + 1)\n    if a == d:\n        print('0')\n        continue\n    res = {}\n    for j in range(n):\n        res[a[j]] = j\n    val = []\n    c = []\n    valb = [False for j in range(n)]\n    for j in range(n):\n        if a[j] != j and valb[j] == False:\n            pair = [res[j], j, a[j]]\n            if a[a[j]] == j:\n                val.append([j, a[j]])\n                valb[j] = True\n                valb[a[j]] = True\n            else:\n                temp1 = a[pair[2]]\n                temp2 = a[pair[0]]\n                temp3 = a[pair[1]]\n                a[pair[0]] = temp1\n                res[temp1] = pair[0]\n                a[pair[1]] = temp2\n                res[temp2] = pair[1]\n                a[pair[2]] = temp3\n                res[temp3] = pair[2]\n                c.append(pair)\n    if len(val) > 0:\n        if len(val) % 2 == 1:\n            print('-1')\n            continue\n        else:\n            for j in range(0, len(val), 2):\n                c.append([val[j][0], val[j][1], val[j + 1][1]])\n                c.append([val[j][0], val[j + 1][0], val[j + 1][1]])\n    if len(c) <= k:\n        sol(c)\n    else:\n        print('-1')", "import sys\n\ndef sol(c):\n    print(len(c))\n    for j in c:\n        p = [x + 1 for x in j]\n        print(*p)\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (n, k) = map(int, sys.stdin.readline().strip().split())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    for j in range(n):\n        a[j] -= 1\n    d = list(sorted(a))\n    if a == d:\n        print('0')\n        continue\n    res = {}\n    for j in range(n):\n        res[a[j]] = j\n    val = []\n    c = []\n    valb = [False for j in range(n)]\n    for j in range(n):\n        if a[j] != j and valb[j] == False:\n            pair = [res[j], j, a[j]]\n            if a[a[j]] == j:\n                val.append([j, a[j]])\n                valb[j] = True\n                valb[a[j]] = True\n            else:\n                temp1 = a[pair[2]]\n                temp2 = a[pair[0]]\n                temp3 = a[pair[1]]\n                a[pair[0]] = temp1\n                res[temp1] = pair[0]\n                a[pair[1]] = temp2\n                res[temp2] = pair[1]\n                a[pair[2]] = temp3\n                res[temp3] = pair[2]\n                c.append(pair)\n    if len(val) > 0:\n        if len(val) % 2 == 1:\n            print('-1')\n            continue\n        else:\n            for j in range(0, len(val), 2):\n                c.append([val[j][0], val[j][1], val[j + 1][1]])\n                c.append([val[j][0], val[j + 1][0], val[j + 1][1]])\n    if len(c) <= k:\n        sol(c)\n    else:\n        print('-1')", "for _ in range(int(input())):\n    (nn, kk) = map(int, input().split())\n    (cc, dd, counter, k, li, array, flag) = ([], [], 0, 1, [0] * (nn + 1), [0] + list(map(int, input().split())), 1)\n    for j in range(1, nn + 1):\n        li[array[j]] = j\n    while k < nn + 1:\n        if k != li[k]:\n            (rest, ee) = (li[k], k)\n            if array[k] == rest:\n                (dd.append(rest), dd.append(k))\n                (array[rest], array[k], li[k], li[rest]) = (rest, k, k, rest)\n            else:\n                (counter, rest1) = (counter + 1, array[k])\n                (cc.append(rest), cc.append(ee), cc.append(rest1))\n                array[rest] = array[rest1]\n                array[rest1] = array[ee]\n                array[ee] = k\n                (li[array[rest]], li[array[rest1]], li[k]) = (rest, rest1, k)\n        k += 1\n    if len(dd) % 4 == 0:\n        for j in range(len(dd) // 4):\n            counter = counter + 2\n            (cc.append(dd[4 * j]), cc.append(dd[4 * j + 1]), cc.append(dd[4 * j + 2]), cc.append(dd[4 * j]), cc.append(dd[4 * j + 3]), cc.append(dd[4 * j + 2]))\n    else:\n        flag = 0\n    if flag == 1 and counter <= kk:\n        print(counter)\n        for z in range(counter):\n            print(cc[3 * z], cc[3 * z + 1], cc[3 * z + 2])\n    else:\n        print(-1)", "test = int(input())\nwhile test > 0:\n    test = test - 1\n    (nn, kk) = map(int, input().split())\n    array = list(map(int, input().split()))\n    array = [0] + array\n    li = [0] * (nn + 1)\n    cc = []\n    dd = []\n    counter = 0\n    k = 1\n    for j in range(1, nn + 1):\n        li[array[j]] = j\n    while k < nn + 1:\n        if k != li[k]:\n            rest = li[k]\n            ee = k\n            if array[k] == rest:\n                dd.append(rest)\n                dd.append(k)\n                array[rest] = rest\n                array[k] = k\n                li[k] = k\n                li[rest] = rest\n            else:\n                counter += 1\n                rest1 = array[k]\n                cc.append(rest)\n                cc.append(ee)\n                cc.append(rest1)\n                array[rest] = array[rest1]\n                array[rest1] = array[ee]\n                array[ee] = k\n                li[array[rest]] = rest\n                li[array[rest1]] = rest1\n                li[k] = k\n        k = k + 1\n    flag = 1\n    if len(dd) % 4 == 0:\n        for j in range(len(dd) // 4):\n            counter = counter + 2\n            cc.append(dd[4 * j])\n            cc.append(dd[4 * j + 1])\n            cc.append(dd[4 * j + 2])\n            cc.append(dd[4 * j])\n            cc.append(dd[4 * j + 3])\n            cc.append(dd[4 * j + 2])\n    else:\n        flag = 0\n    if flag == 1 and counter <= kk:\n        print(counter)\n        for z in range(counter):\n            print(cc[3 * z], cc[3 * z + 1], cc[3 * z + 2])\n    else:\n        print(-1)", "import sys\n\ndef sol(c):\n    print(len(c))\n    for j in c:\n        p = [x + 1 for x in j]\n        print(*p)\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (n, k) = map(int, sys.stdin.readline().strip().split())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    for j in range(n):\n        a[j] -= 1\n    d = list(sorted(a))\n    if a == d:\n        print('0')\n        continue\n    res = {}\n    for j in range(n):\n        res[a[j]] = j\n    val = []\n    c = []\n    valb = [False for j in range(n)]\n    for j in range(n):\n        if a[j] != j and valb[j] == False:\n            pair = [res[j], j, a[j]]\n            if a[a[j]] == j:\n                val.append([j, a[j]])\n                valb[j] = True\n                valb[a[j]] = True\n            else:\n                temp1 = a[pair[2]]\n                temp2 = a[pair[0]]\n                temp3 = a[pair[1]]\n                a[pair[0]] = temp1\n                res[temp1] = pair[0]\n                a[pair[1]] = temp2\n                res[temp2] = pair[1]\n                a[pair[2]] = temp3\n                res[temp3] = pair[2]\n                c.append(pair)\n    if len(val) > 0:\n        if len(val) % 2 == 1:\n            print('-1')\n            continue\n        else:\n            for j in range(0, len(val), 2):\n                c.append([val[j][0], val[j][1], val[j + 1][1]])\n                c.append([val[j][0], val[j + 1][0], val[j + 1][1]])\n    if len(c) <= k:\n        sol(c)\n    else:\n        print('-1')", "def shifting(i, j, k, a):\n    flg = a[i]\n    a[i] = a[j]\n    a[j] = a[k]\n    a[k] = flg\n\ndef fuu(a, b, n, k, res):\n    yes = 0\n    for i in range(1, n + 1):\n        if a[i] != i and i != b[b[i]]:\n            x = i\n            y = a[i]\n            z = b[i]\n            if y == z:\n                if (b[b[i]] != b[i] and b[b[i]] != i) and a[b[i]] != b[i]:\n                    y = b[b[i]]\n                else:\n                    y = i\n                    while True:\n                        y += 1\n                        if y >= n + 1:\n                            break\n                        if (a[y] != y and x != y) and y != z:\n                            break\n                if y == n + 1:\n                    yes = 1\n                    break\n            shifting(z, y, x, a)\n            res.append([x, y, z])\n            b[a[x]] = x\n            b[a[z]] = z\n            b[a[y]] = y\n    yes = 0\n    for i in range(1, n + 1):\n        if a[i] != i:\n            x = i\n            y = a[i]\n            z = b[i]\n            if y == z:\n                if (b[b[i]] != b[i] and b[b[i]] != i) and a[b[i]] != b[i]:\n                    y = b[b[i]]\n                else:\n                    y = i\n                    while True:\n                        y += 1\n                        if y >= n + 1:\n                            break\n                        if (a[y] != y and x != y) and y != z:\n                            break\n                if y == n + 1:\n                    yes = 1\n                    break\n            shifting(z, y, x, a)\n            res.append([x, y, z])\n            b[a[x]] = x\n            b[a[z]] = z\n            b[a[y]] = y\n    return (yes, res)\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.insert(0, 0)\n    b = [0] * (n + 1)\n    for i in range(1, n + 1):\n        b[a[i]] = i\n    res = []\n    yes = 0\n    (yes, res) = fuu(a, b, n, k, res)\n    if len(res) > k:\n        yes = 1\n    if yes == 0:\n        print(len(res))\n        for h in range(len(res)):\n            z = res[h]\n            for i in range(len(z)):\n                print(z[i], end=' ')\n            print()\n    else:\n        print('-1')\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    psort = sorted(p)\n    flag = 0\n    for i in range(0, n):\n        if p[i] != psort[i]:\n            flag = 1\n            break\n    dflag = 0\n    if psort == p[::-1]:\n        dflag = 1\n    if flag == 0:\n        print(0)\n    elif dflag == 1:\n        if n == 3:\n            print(-1)\n        elif n % 4 == 0 or n % 4 == 1:\n            print(n // 2)\n            i = 1\n            j = n\n            for k in range(n // 4):\n                print(i, i + 1, n)\n                print(i + 1, n, n - 1)\n                i = i + 2\n                n = n - 2\n        else:\n            print(-1)\n    elif flag == 1:\n        unsor = 0\n        p.insert(0, 0)\n        for i in range(1, n + 1):\n            if p[i] != i:\n                unsor += 1\n        final = []\n        ans = 0\n        i = 1\n        counter = 0\n        while i < n + 1:\n            a = i\n            b = p[i]\n            if i == p[p[i]]:\n                i += 1\n                continue\n            else:\n                a = i\n                b = p[i]\n                c = p[p[i]]\n                (p[a], p[b]) = (p[b], p[a])\n                (p[a], p[c]) = (p[c], p[a])\n                if p[a] == a:\n                    unsor -= 1\n                if p[b] == b:\n                    unsor -= 1\n                if p[c] == c:\n                    unsor -= 1\n                counter += 1\n                final.append([a, b, c])\n            if counter > k:\n                ans = -1\n                break\n        i = 1\n        while i:\n            if unsor > 0 and unsor <= 2:\n                ans = -1\n                break\n            else:\n                a = i\n                b = p[i]\n                if a != b:\n                    for j in range(i, n + 1):\n                        if j != a and j != b and (p[j] != j):\n                            c = j\n                            (p[a], p[b]) = (p[b], p[a])\n                            (p[a], p[c]) = (p[c], p[a])\n                            counter += 1\n                            if p[a] == a:\n                                unsor -= 1\n                            if p[b] == b:\n                                unsor -= 1\n                            if p[c] == c:\n                                unsor -= 1\n                            final.append([a, b, c])\n                            break\n            if i == p[i]:\n                if i == n:\n                    break\n                else:\n                    i = i + 1\n            if counter > k:\n                ans = -1\n                break\n        if ans == -1:\n            print(-1)\n        else:\n            print(len(final))\n            for i in final:\n                print(*i)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().strip().split(' '))\n    a = [0]\n    a[1:] = list(map(int, input().strip().split(' ')))\n    pivot = [False] * (n + 1)\n    op = []\n    re = []\n    flag = 0\n    for i in range(1, n + 1):\n        if pivot[i] or a[i] == i:\n            continue\n        else:\n            seq = []\n            seq.append(i)\n            pivot[i] = True\n            j = a[i]\n            while j != i:\n                pivot[j] = True\n                seq.append(j)\n                j = a[j]\n        x = len(seq)\n        if x == 2:\n            re.append(seq)\n            continue\n        if x % 2 == 0:\n            re.append([seq[0], seq[-1]])\n        for i in range(1, x - 1, 2):\n            op.append([seq[0], seq[i], seq[i + 1]])\n        if len(op) + len(re) > k:\n            flag = 1\n            break\n    if flag == 1 or len(re) % 2 != 0:\n        print(-1)\n    else:\n        print(len(op) + len(re))\n        for op in op:\n            print(*op)\n        for i in range(0, len(re), 2):\n            print(re[i][0], re[i][1], re[i + 1][0])\n            print(re[i][0], re[i + 1][1], re[i + 1][0])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    psort = sorted(p)\n    flag = 0\n    for i in range(0, n):\n        if p[i] != psort[i]:\n            flag = 1\n            break\n    dflag = 0\n    if psort == p[::-1]:\n        dflag = 1\n    if flag == 0:\n        print(0)\n    elif dflag == 1:\n        if n == 3:\n            print(-1)\n        elif n % 4 == 0 or n % 4 == 1:\n            print(n // 2)\n            i = 1\n            j = n\n            for k in range(n // 4):\n                print(i, i + 1, n)\n                print(i + 1, n, n - 1)\n                i = i + 2\n                n = n - 2\n        else:\n            print(-1)\n    elif flag == 1:\n        unsor = 0\n        p.insert(0, 0)\n        for i in range(1, n + 1):\n            if p[i] != i:\n                unsor += 1\n        final = []\n        ans = 0\n        i = 1\n        counter = 0\n        while i < n + 1:\n            a = i\n            b = p[i]\n            if i == p[p[i]]:\n                i += 1\n                continue\n            else:\n                a = i\n                b = p[i]\n                c = p[p[i]]\n                (p[a], p[b]) = (p[b], p[a])\n                (p[a], p[c]) = (p[c], p[a])\n                if p[a] == a:\n                    unsor -= 1\n                if p[b] == b:\n                    unsor -= 1\n                if p[c] == c:\n                    unsor -= 1\n                counter += 1\n                final.append([a, b, c])\n            if counter > k:\n                ans = -1\n                break\n        i = 1\n        while i:\n            if unsor > 0 and unsor <= 2:\n                ans = -1\n                break\n            else:\n                a = i\n                b = p[i]\n                if a != b:\n                    for j in range(i, n + 1):\n                        if j != a and j != b and (p[j] != j):\n                            c = j\n                            (p[a], p[b]) = (p[b], p[a])\n                            (p[a], p[c]) = (p[c], p[a])\n                            counter += 1\n                            if p[a] == a:\n                                unsor -= 1\n                            if p[b] == b:\n                                unsor -= 1\n                            if p[c] == c:\n                                unsor -= 1\n                            final.append([a, b, c])\n                            break\n            if i == p[i]:\n                if i == n:\n                    break\n                else:\n                    i = i + 1\n            if counter > k:\n                ans = -1\n                break\n        if ans == -1:\n            print(-1)\n        else:\n            print(len(final))\n            for i in final:\n                print(*i)", "def solver(test):\n    res = ''\n    t_var = t_var2 = 0\n    size = 0\n    (n, k) = map(int, input().split())\n    rangelist = list(map(int, input().split()))\n    pos = [0 for i in range(n + 1)]\n    dictionary = {}\n    for i in range(1, n + 1):\n        pos[i] = rangelist[i - 1]\n        dictionary[pos[i]] = i\n    for i in range(1, n + 1):\n        if pos[i] != i:\n            first = i\n            second = pos[first]\n            third = pos[second]\n            if pos[pos[pos[first]]] == first and (not pos[pos[i]] == i):\n                res += str(first) + ' ' + str(second) + ' ' + str(third) + '\\n'\n                size += 1\n                pos[second] = second\n                pos[third] = third\n                pos[first] = first\n                dictionary[second] = second\n                dictionary[third] = third\n                dictionary[i] = i\n    for i in range(1, n + 1):\n        if pos[i] != i:\n            if pos[pos[i]] != i:\n                res += str(i) + ' ' + str(pos[i]) + ' ' + str(dictionary[i]) + '\\n'\n                size += 1\n                ip1 = i\n                ip2 = pos[i]\n                ip3 = dictionary[i]\n                vi1 = pos[i]\n                vi2 = pos[pos[i]]\n                vi3 = pos[dictionary[i]]\n                dictionary[vi1] = ip2\n                dictionary[vi2] = ip3\n                dictionary[vi3] = ip1\n                pos[ip2] = vi1\n                pos[ip1] = vi3\n                pos[ip3] = vi2\n    for i in range(1, n + 1):\n        if pos[i] != i:\n            if pos[pos[i]] == i:\n                if t_var == 0 and t_var2 == 0:\n                    t_var = i\n                    t_var2 = pos[i]\n                elif i != t_var2:\n                    res += str(t_var) + ' ' + str(i) + ' ' + str(t_var2) + '\\n'\n                    size += 1\n                    ip1 = t_var\n                    ip2 = i\n                    ip3 = t_var2\n                    vi1 = pos[ip1]\n                    vi2 = pos[ip2]\n                    vi3 = pos[ip3]\n                    dictionary[vi1] = ip2\n                    dictionary[vi2] = ip3\n                    dictionary[vi3] = ip1\n                    pos[ip2] = vi1\n                    pos[ip1] = vi3\n                    pos[ip3] = vi2\n                    t_var = t_var2 = 0\n            else:\n                res += str(i) + ' ' + str(pos[i]) + ' ' + str(dictionary[i]) + '\\n'\n                size += 1\n                ip1 = i\n                ip2 = pos[i]\n                ip3 = dictionary[i]\n                vi1 = pos[ip1]\n                vi2 = pos[ip2]\n                vi3 = pos[ip3]\n                dictionary[vi1] = ip2\n                dictionary[vi2] = ip3\n                dictionary[vi3] = ip1\n                pos[ip2] = vi1\n                pos[ip1] = vi3\n                pos[ip3] = vi2\n    c_var = 0\n    for i in range(1, n + 1):\n        if pos[i] != i:\n            c_var = 1\n            break\n    if c_var:\n        print(-1)\n    elif size > k:\n        print(-1)\n    else:\n        print(size)\n        print(res, end='')\n    return\nt = int(input())\nfor tmp in range(t):\n    solver(tmp)", "def ans(length, arr, s):\n    index = {}\n    for i in range(1, length + 1):\n        index[arr[i - 1]] = i\n    isVisited = [False] * (length + 1)\n    dic = {}\n    for i in range(length):\n        dic[i + 1] = arr[i]\n    cycle = 1\n    two_arr = []\n    three_arr = []\n    ans_val = 0\n    z = 0\n    for i in range(1000):\n        z += 1\n    ans_arr = []\n    for k in range(1, length + 1):\n        nextNode = 0\n        index_arr = []\n        if isVisited[k] == False:\n            isVisited[k] = True\n            if k == dic[k]:\n                continue\n            else:\n                c = dic[k]\n                index_arr.append(k)\n                while not isVisited[c]:\n                    isVisited[c] = True\n                    nextNode = dic[c]\n                    c = nextNode\n                    cycle += 1\n                    index_arr.append(index[c])\n                if cycle > 2:\n                    if cycle % 2 != 0:\n                        ans_val += cycle // 2\n                        c = 0\n                        temp = []\n                        for i in index_arr[::-1]:\n                            temp.append(i)\n                            c += 1\n                            if c == 3:\n                                temp.reverse()\n                                ans_arr.append(temp)\n                                temp = [i]\n                                c = 1\n                        cycle = 1\n                    else:\n                        temp = []\n                        c = 0\n                        if len(two_arr) != 0:\n                            ans_val += (cycle - 1) // 2\n                            for i in index_arr[-1:0:-1]:\n                                temp.append(i)\n                                c += 1\n                                if c == 3:\n                                    temp.reverse()\n                                    ans_arr.append(temp)\n                                    temp = [i]\n                                    c = 1\n                            temp = []\n                            temp = two_arr.pop()\n                            ans_val += 2\n                            ans_arr.append([temp[1], index_arr[0], index_arr[1]])\n                            ans_arr.append([temp[0], temp[1], index_arr[0]])\n                        elif len(three_arr) != 0:\n                            temp = []\n                            c = 0\n                            for i in index_arr[-1:0:-1]:\n                                temp.append(i)\n                                c += 1\n                                if c == 3:\n                                    temp.reverse()\n                                    ans_arr.append(temp)\n                                    temp = [i]\n                                    ans_val += 1\n                                    c = 1\n                            a = three_arr.pop()\n                            temp = []\n                            c = 0\n                            for i in a[-1:0:-1]:\n                                temp.append(i)\n                                c += 1\n                                if c == 3:\n                                    temp.reverse()\n                                    ans_arr.append(temp)\n                                    temp = [i]\n                                    ans_val += 1\n                                    c = 1\n                            ans_val += 2\n                            ans_arr.append([a[1], index_arr[0], index_arr[1]])\n                            ans_arr.append([a[0], a[1], index_arr[0]])\n                        else:\n                            three_arr.append(index_arr)\n                elif cycle == 2:\n                    temp = []\n                    if len(two_arr) != 0:\n                        temp = two_arr.pop()\n                        ans_val += 2\n                        ans_arr.append([temp[1], index_arr[0], index_arr[1]])\n                        ans_arr.append([temp[0], temp[1], index_arr[0]])\n                    elif len(three_arr) != 0:\n                        a = three_arr.pop()\n                        temp = []\n                        c = 0\n                        for i in a[-1:0:-1]:\n                            temp.append(i)\n                            c += 1\n                            if c == 3:\n                                temp.reverse()\n                                ans_arr.append(temp)\n                                temp = [i]\n                                ans_val += 1\n                                c = 1\n                        ans_val += 2\n                        ans_arr.append([a[1], index_arr[0], index_arr[1]])\n                        ans_arr.append([a[0], a[1], index_arr[0]])\n                    else:\n                        two_arr.append(index_arr)\n                cycle = 1\n    if len(two_arr) != 0 or len(three_arr) != 0:\n        print(-1)\n    elif ans_val > k:\n        print(-1)\n    else:\n        print(ans_val)\n        for i in ans_arr:\n            print(' '.join(map(str, i)))\nt = int(input())\nfor i in range(t):\n    a = input().split()\n    n = int(a[0])\n    s = int(a[1])\n    arr = list(map(int, input().split()))\n    ans(n, arr, s)", "try:\n    test = int(input())\n    for _ in range(test):\n        (n, m) = map(int, input().split())\n        l = list(map(int, input().split()))\n        d1 = {}\n        d2 = {}\n        i = 1\n        cont = 0\n        for j in l:\n            d1[i] = j\n            d2[j] = i\n            i += 1\n        l1 = []\n        for i in range(1, n + 1):\n            if i == d1[d1[i]] or i == d1[i]:\n                continue\n            else:\n                k = [d1[i], d2[i], i]\n                l1.append(k)\n                (p, q, r) = k\n                (d2[p], d2[d1[p]], d2[r]) = k\n                (d1[p], d1[q], d1[r]) = (d1[r], d1[p], d1[q])\n        l2 = []\n        for i in d1:\n            try:\n                if i != d1[i] and i == d1[d1[i]]:\n                    y = [i, d1[i]]\n                    l2.extend(y)\n                    d1[i] = 0\n            except:\n                pass\n        if len(l2) % 4 == 0:\n            for i in range(0, len(l2), 4):\n                u = l2[i:i + 4]\n                (p, q, r, s) = u\n                l1.extend([[r, q, p], [s, r, q]])\n        else:\n            cont = 1\n        if cont == 1 or m < len(l1):\n            print(-1)\n        else:\n            print(len(l1))\n            for (p, g, m) in l1:\n                print(p, g, m)\nexcept EOFError:\n    pass", "ti = int(input())\nwhile ti:\n    ti -= 1\n    (n, k) = map(int, input().strip().split(' '))\n    a = [0]\n    a[1:] = list(map(int, input().strip().split(' ')))\n    pivot = [False] * (n + 1)\n    abcd = []\n    eenCin = []\n    fag = 0\n    for i in range(1, n + 1):\n        if pivot[i] or a[i] == i:\n            continue\n        else:\n            chain = []\n            chain.append(i)\n            pivot[i] = True\n            j = a[i]\n            while j != i:\n                pivot[j] = True\n                chain.append(j)\n                j = a[j]\n        x = len(chain)\n        if x == 2:\n            eenCin.append(chain)\n            continue\n        if x % 2 == 0:\n            eenCin.append([chain[0], chain[-1]])\n        for i in range(1, x - 1, 2):\n            abcd.append([chain[0], chain[i], chain[i + 1]])\n        if len(abcd) + len(eenCin) > k:\n            fag = 1\n            break\n    if fag == 1 or len(eenCin) % 2 != 0:\n        print(-1)\n    else:\n        print(len(abcd) + len(eenCin))\n        for op in abcd:\n            print(*op)\n        for i in range(0, len(eenCin), 2):\n            print(eenCin[i][0], eenCin[i][1], eenCin[i + 1][0])\n            print(eenCin[i][0], eenCin[i + 1][1], eenCin[i + 1][0])", "try:\n\n    def change(list, pos1, pos2):\n        (list[pos1], list[pos2]) = (list[pos2], list[pos1])\n        return list\n    test = input()\n    test = int(test)\n    tser = 0\n    for tser in range(test):\n        (N, Q) = map(int, input().split(' '))\n        l = list(map(int, input().split(' ')))\n        unsor = 0\n        l = [0] + l\n        i = 1\n        while i <= N:\n            if l[i] != i:\n                unsor += 1\n            i += 1\n        if unsor == 0:\n            print(0)\n            continue\n        if all((l[i] >= l[i + 1] for i in range(len(l) - 1))):\n            if N % 4 != 0 or N % 4 != 1:\n                print('-1')\n            else:\n                Q = 1\n                p = N\n                la = 0\n                print(N // 2)\n                for i in range(0, N // 2):\n                    print(p, Q, p - 1)\n                    la += 1\n                    if la == 2:\n                        la = 0\n                        p = p - 2\n                    Q += 1\n        else:\n            ran = 0\n            p_p = 0\n            fin = []\n            i = 0\n            while i < N + 1:\n                th = i\n                se = l[i]\n                if i == l[l[i]]:\n                    i += 1\n                    continue\n                else:\n                    fir = l[l[i]]\n                    change(l, th, se)\n                    change(l, th, fir)\n                    if l[se] == se:\n                        unsor -= 1\n                    if l[fir] == fir:\n                        unsor -= 1\n                    if l[th] == th:\n                        unsor -= 1\n                    ran += 1\n                    fin.append(th)\n                    fin.append(se)\n                    fin.append(fir)\n                if ran > Q:\n                    p_p = -1\n                    break\n            i = 1\n            while i:\n                if unsor > 0 and unsor <= 2:\n                    p_p = -1\n                    break\n                else:\n                    th = i\n                    se = l[i]\n                    if th != se:\n                        for j in range(i, N + 1):\n                            if j != l[j] and j != th and (j != se):\n                                fir = j\n                                change(l, th, se)\n                                change(l, th, fir)\n                                ran += 1\n                                if l[fir] == fir:\n                                    unsor -= 1\n                                if l[th] == th:\n                                    unsor -= 1\n                                if l[se] == se:\n                                    unsor -= 1\n                                fin.append(th)\n                                fin.append(se)\n                                fin.append(fir)\n                                break\n                    if i == l[i]:\n                        if i != N:\n                            i += 1\n                        else:\n                            break\n                    if ran > Q:\n                        p_p = -1\n                        break\n            if unsor == 0 and p_p != -1 and (ran <= Q):\n                p_p = ran\n            if p_p != -1:\n                print(ran)\n                for i in range(0, len(fin), 3):\n                    print(fin[i], fin[i + 1], fin[i + 2])\n            else:\n                print(-1)\n                continue\nexcept:\n    pass", "import sys\n\ndef printRes(res):\n    print(len(result))\n    for a in result:\n        print(a)\n\ndef sortThreeno(P, n, k):\n    for j in range(n):\n        if len(done) == 0:\n            v1 = False\n            v2 = False\n            v3 = False\n            if not P[j] == j + 1:\n                newid = dp[j + 1]\n                v1 = [P[j], j + 1]\n                v2 = [j + 1, newid + 1]\n                temp = newid + 1\n                v3 = [temp, dp[temp] + 1]\n                if v1[0] == dp[temp] + 1:\n                    if v1 and v2 and v3:\n                        ind = []\n                        P[v1[1] - 1] = v2[0]\n                        P[v2[1] - 1] = v3[0]\n                        P[v3[1] - 1] = v1[0]\n                        dp[v2[0]] = v1[1] - 1\n                        dp[v3[0]] = v2[1] - 1\n                        dp[v1[0]] = v3[1] - 1\n                        ind.append(v1[1])\n                        ind.append(v3[1])\n                        ind.append(v2[1])\n                        result.append(' '.join(map(str, ind)))\n                        v1 = False\n                        v2 = False\n                        v3 = False\n                    else:\n                        print(-1)\n                        done.append(0)\n                        return\n\ndef sortTwono(P, n, k):\n    for j in range(n):\n        if len(done) == 0:\n            v1 = False\n            v2 = False\n            v3 = False\n            if not P[j] == j + 1:\n                newid = dp[j + 1]\n                newid2 = P[P[j] - 1]\n                v1 = [P[j], j + 1]\n                v2 = [j + 1, newid + 1]\n                temp = newid + 1\n                temp1 = newid2\n                if v1[0] == dp[temp] + 1:\n                    v3 = [temp, dp[temp] + 1]\n                    if v1 and v2 and v3:\n                        ind = []\n                        P[v1[1] - 1] = v2[0]\n                        P[v2[1] - 1] = v3[0]\n                        P[v3[1] - 1] = v1[0]\n                        dp[v2[0]] = v1[1] - 1\n                        dp[v3[0]] = v2[1] - 1\n                        dp[v1[0]] = v3[1] - 1\n                        ind.append(v1[1])\n                        ind.append(v3[1])\n                        ind.append(v2[1])\n                        result.append(' '.join(map(str, ind)))\n                        v1 = False\n                        v2 = False\n                        v3 = False\n                    else:\n                        print(-1)\n                        done.append(0)\n                        return\n                elif not v1[0] == temp1 and (not v2[0] == temp1):\n                    v3 = [temp1, dp[temp1] + 1]\n                    if v1 and v2 and v3:\n                        ind = []\n                        P[v1[1] - 1] = v2[0]\n                        P[v2[1] - 1] = v3[0]\n                        P[v3[1] - 1] = v1[0]\n                        dp[v2[0]] = v1[1] - 1\n                        dp[v3[0]] = v2[1] - 1\n                        dp[v1[0]] = v3[1] - 1\n                        ind.append(v1[1])\n                        ind.append(v3[1])\n                        ind.append(v2[1])\n                        result.append(' '.join(map(str, ind)))\n                        v1 = False\n                        v2 = False\n                        v3 = False\n                    else:\n                        print(-1)\n                        done.append(0)\n                        return\n                elif not temp == v1[0]:\n                    v3 = [temp, dp[temp] + 1]\n                    if v1 and v2 and v3:\n                        ind = []\n                        P[v1[1] - 1] = v2[0]\n                        P[v2[1] - 1] = v3[0]\n                        P[v3[1] - 1] = v1[0]\n                        dp[v2[0]] = v1[1] - 1\n                        dp[v3[0]] = v2[1] - 1\n                        dp[v1[0]] = v3[1] - 1\n                        ind.append(v1[1])\n                        ind.append(v3[1])\n                        ind.append(v2[1])\n                        result.append(' '.join(map(str, ind)))\n                        v1 = False\n                        v2 = False\n                        v3 = False\n                    else:\n                        print(-1)\n                        done.append(0)\n                        return\n\ndef sortArrno(P, n, k):\n    for j in range(n):\n        if len(done) == 0:\n            v1 = False\n            v2 = False\n            v3 = False\n            if not P[j] == j + 1:\n                newid = dp[j + 1]\n                newid2 = P[P[j] - 1]\n                v1 = [P[j], j + 1]\n                v2 = [j + 1, newid + 1]\n                temp = newid + 1\n                temp1 = newid2\n                if v1[0] == dp[temp] + 1:\n                    v3 = [temp, dp[temp] + 1]\n                    if v1 and v2 and v3:\n                        ind = []\n                        P[v1[1] - 1] = v2[0]\n                        P[v2[1] - 1] = v3[0]\n                        P[v3[1] - 1] = v1[0]\n                        dp[v2[0]] = v1[1] - 1\n                        dp[v3[0]] = v2[1] - 1\n                        dp[v1[0]] = v3[1] - 1\n                        ind.append(v1[1])\n                        ind.append(v3[1])\n                        ind.append(v2[1])\n                        result.append(' '.join(map(str, ind)))\n                        v1 = False\n                        v2 = False\n                        v3 = False\n                    else:\n                        print(-1)\n                        done.append(0)\n                        return\n                elif not v1[0] == temp1 and (not v2[0] == temp1):\n                    v3 = [temp1, dp[temp1] + 1]\n                    if v1 and v2 and v3:\n                        ind = []\n                        P[v1[1] - 1] = v2[0]\n                        P[v2[1] - 1] = v3[0]\n                        P[v3[1] - 1] = v1[0]\n                        dp[v2[0]] = v1[1] - 1\n                        dp[v3[0]] = v2[1] - 1\n                        dp[v1[0]] = v3[1] - 1\n                        ind.append(v1[1])\n                        ind.append(v3[1])\n                        ind.append(v2[1])\n                        result.append(' '.join(map(str, ind)))\n                        v1 = False\n                        v2 = False\n                        v3 = False\n                    else:\n                        print(-1)\n                        done.append(0)\n                        return\n                elif not temp == v1[0]:\n                    v3 = [temp, dp[temp] + 1]\n                    if v1 and v2 and v3:\n                        ind = []\n                        P[v1[1] - 1] = v2[0]\n                        P[v2[1] - 1] = v3[0]\n                        P[v3[1] - 1] = v1[0]\n                        dp[v2[0]] = v1[1] - 1\n                        dp[v3[0]] = v2[1] - 1\n                        dp[v1[0]] = v3[1] - 1\n                        ind.append(v1[1])\n                        ind.append(v3[1])\n                        ind.append(v2[1])\n                        result.append(' '.join(map(str, ind)))\n                        v1 = False\n                        v2 = False\n                        v3 = False\n                    else:\n                        print(-1)\n                        done.append(0)\n                        return\n                else:\n                    for i in range(j + 1, n):\n                        if not P[i] == i + 1 and (not i == newid):\n                            v3 = [P[i], i + 1]\n                            break\n                    if v1 and v2 and v3:\n                        ind = []\n                        P[v1[1] - 1] = v2[0]\n                        P[v2[1] - 1] = v3[0]\n                        P[v3[1] - 1] = v1[0]\n                        dp[v2[0]] = v1[1] - 1\n                        dp[v3[0]] = v2[1] - 1\n                        dp[v1[0]] = v3[1] - 1\n                        ind.append(v1[1])\n                        ind.append(v3[1])\n                        ind.append(v2[1])\n                        result.append(' '.join(map(str, ind)))\n                        v1 = False\n                        v2 = False\n                        v3 = False\n                    else:\n                        print(-1)\n                        done.append(0)\n                        return 0\nfor _ in range(int(input())):\n    (n, k) = map(int, sys.stdin.readline().split())\n    P = list(map(int, sys.stdin.readline().split()))\n    p1 = [i for i in range(1, n + 1)]\n    dp = {}\n    count = 0\n    dp = {k1: v12 for (v12, k1) in enumerate(P)}\n    result = []\n    done = []\n    possible = False\n    sortThreeno(P, n, k)\n    sortTwono(P, n, k)\n    sortArrno(P, n, k)\n    if P == p1:\n        if len(result) <= k:\n            printRes(result)\n        else:\n            print(-1)", "def solve():\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    arr = [int(i) for i in input().split()]\n    vp = [[i, ind] for (ind, i) in enumerate(arr)]\n    ans = ''\n    cnt = 0\n    vp.sort()\n    a = [-1] * n\n    index = [-1] * n\n    for i in range(n):\n        a[vp[i][1]] = i\n        index[i] = vp[i][1]\n    s = []\n    for i in range(n):\n        if a[i] == i or (len(s) != 0 and i == s[-1][1]):\n            continue\n        tmp1 = a[i]\n        tmp2 = index[i]\n        if a[tmp1] != i:\n            tmp3 = a[tmp1]\n            index[i] = i\n            index[tmp1] = tmp1\n            tmp = a[tmp2]\n            a[tmp2] = a[tmp1]\n            a[tmp1] = a[i]\n            a[i] = tmp\n            index[tmp3] = tmp2\n            ans += str(tmp2 + 1) + ' ' + str(i + 1) + ' ' + str(tmp1 + 1) + '\\n'\n            cnt += 1\n            continue\n        if len(s) != 0 and i == s[-1][1]:\n            continue\n        if len(s) == 0:\n            s += [[i, a[i]]]\n            continue\n        p = s[-1]\n        s.pop()\n        tmp = a[i]\n        a[i] = a[p[1]]\n        a[p[1]] = a[p[0]]\n        a[p[0]] = tmp\n        tmp = a[i]\n        a[i] = a[tmp1]\n        a[tmp1] = a[p[0]]\n        a[p[0]] = tmp\n        ans += str(p[0] + 1) + ' ' + str(p[1] + 1) + ' ' + str(i + 1) + '\\n'\n        ans += str(p[0] + 1) + ' ' + str(tmp1 + 1) + ' ' + str(i + 1) + '\\n'\n        cnt += 2\n        index[p[0]] = p[0]\n        index[tmp1] = tmp1\n        index[i] = i\n        index[p[1]] = p[1]\n        continue\n    f = True\n    for i in range(n):\n        if a[i] != i:\n            f = False\n            break\n    if len(s) != 0 or k < cnt or (not f):\n        print(-1)\n    else:\n        print(cnt)\n        print(ans, end='')\nt = int(input())\nwhile t:\n    t -= 1\n    solve()", "def minSwaps(arr):\n    n = len(arr)\n    arrpos = [*enumerate(arr)]\n    arrpos.sort(key=lambda it: it[1])\n    vis = {k: False for k in range(n)}\n    cycles = []\n    for i in range(n):\n        if vis[i] or arrpos[i][0] == i:\n            continue\n        j = i\n        cycles.append([])\n        while not vis[j]:\n            cycles[-1].append(j)\n            vis[j] = True\n            j = arrpos[j][0]\n    return cycles\nt = int(input())\nwhile t:\n    (n, k_max) = map(int, input().split())\n    seq = list(map(int, input().split()))\n    opers = []\n    cycles = minSwaps(seq)\n    even_count = 0\n    odd_count = 0\n    for i in range(len(cycles)):\n        if len(cycles[i]) % 2:\n            odd_count += 1\n        else:\n            even_count += 1\n    if even_count % 2 == 0:\n        for i in range(len(cycles)):\n            if len(cycles[i]) % 2:\n                k = 0\n                for _ in range(len(cycles[i]) // 2):\n                    opers.append([cycles[i][k + 2] + 1, cycles[i][k + 1] + 1, cycles[i][k] + 1])\n                    k += 2\n            elif len(cycles[i]) > 2:\n                k = 0\n                for _ in range(len(cycles[i]) // 2 - 1):\n                    opers.append([cycles[i][k + 2] + 1, cycles[i][k + 1] + 1, cycles[i][k] + 1])\n                    k += 2\n        jump = 0\n        for i in range(len(cycles)):\n            if len(cycles[i + jump]) % 2 == 0:\n                for k in range(i + jump + 1, len(cycles)):\n                    if len(cycles[k]) % 2 == 0:\n                        opers.append([cycles[i + jump][-1] + 1, cycles[i + jump][-2] + 1, cycles[k][-2] + 1])\n                        opers.append([cycles[k][-1] + 1, cycles[k][-2] + 1, cycles[i + jump][-1] + 1])\n                        break\n                jump += k - (i + jump)\n            if i + jump >= len(cycles) - 1:\n                break\n        if len(opers) <= k_max:\n            print(len(opers))\n            for l in range(len(opers)):\n                print(str(opers[l][0]) + ' ' + str(opers[l][1]) + ' ' + str(opers[l][2]))\n    else:\n        print('-1')\n    t -= 1", "def fun(l, ind, a, b, c):\n    t = l[a]\n    l[a] = l[c]\n    ind[l[a]] = a\n    l[c] = l[b]\n    ind[l[c]] = c\n    l[b] = t\n    ind[l[b]] = b\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [0]\n    n += 1\n    a.extend(list(map(int, input().split())))\n    ind = [i for i in range(0, n)]\n    for i in range(n):\n        ind[a[i]] = i\n    ans = []\n    a.append(n + 1)\n    ind.append(n + 1)\n    (c, i, p, q) = (0, 1, -1, -1)\n    while i < n:\n        if a[i] == i or q == i:\n            i += 1\n        else:\n            if p == -1 and a[i] == ind[i]:\n                (p, q) = (i, a[i])\n                i += 1\n                continue\n            elif a[i] == ind[i]:\n                ans.append([p, q, i])\n                fun(a, ind, p, q, i)\n                p = q = -1\n                c += 1\n                continue\n            ans.append([i, a[i], ind[i]])\n            fun(a, ind, i, a[i], ind[i])\n            c += 1\n            i += 1\n        if c > k:\n            break\n    if p != -1 or k < c:\n        print(-1)\n        continue\n    print(c)\n    for j in range(c):\n        print(ans[j][0], ans[j][1], ans[j][2])", "def ans(lanth, arey, s):\n    idx = {}\n    for i in range(1, lanth + 1):\n        idx[arey[i - 1]] = i\n    isvisi = [False] * (lanth + 1)\n    dicti = {}\n    for i in range(lanth):\n        dicti[i + 1] = arey[i]\n    ckel = 1\n    arey2 = []\n    arey3 = []\n    anval = 0\n    anarey = []\n    for k in range(1, lanth + 1):\n        nxtnod = 0\n        indarey = []\n        if isvisi[k] == False:\n            isvisi[k] = True\n            if k == dicti[k]:\n                continue\n            else:\n                c = dicti[k]\n                indarey.append(k)\n                while not isvisi[c]:\n                    isvisi[c] = True\n                    nxtnod = dicti[c]\n                    c = nxtnod\n                    ckel += 1\n                    indarey.append(idx[c])\n                if ckel > 2:\n                    if ckel % 2 != 0:\n                        anval += ckel // 2\n                        c = 0\n                        tempi = []\n                        for i in indarey[::-1]:\n                            tempi.append(i)\n                            c += 1\n                            if c == 3:\n                                tempi.reverse()\n                                anarey.append(tempi)\n                                tempi = [i]\n                                c = 1\n                        ckel = 1\n                    else:\n                        tempi = []\n                        c = 0\n                        if len(arey2) != 0:\n                            anval += (ckel - 1) // 2\n                            for i in indarey[-1:0:-1]:\n                                tempi.append(i)\n                                c += 1\n                                if c == 3:\n                                    tempi.reverse()\n                                    anarey.append(tempi)\n                                    tempi = [i]\n                                    c = 1\n                            tempi = []\n                            tempi = arey2.pop()\n                            anval += 2\n                            anarey.append([tempi[1], indarey[0], indarey[1]])\n                            anarey.append([tempi[0], tempi[1], indarey[0]])\n                        elif len(arey3) != 0:\n                            tempi = []\n                            c = 0\n                            for i in indarey[-1:0:-1]:\n                                tempi.append(i)\n                                c += 1\n                                if c == 3:\n                                    tempi.reverse()\n                                    anarey.append(tempi)\n                                    tempi = [i]\n                                    anval += 1\n                                    c = 1\n                            a = arey3.pop()\n                            tempi = []\n                            c = 0\n                            for i in a[-1:0:-1]:\n                                tempi.append(i)\n                                c += 1\n                                if c == 3:\n                                    tempi.reverse()\n                                    anarey.append(tempi)\n                                    tempi = [i]\n                                    anval += 1\n                                    c = 1\n                            anval += 2\n                            anarey.append([a[1], indarey[0], indarey[1]])\n                            anarey.append([a[0], a[1], indarey[0]])\n                        else:\n                            arey3.append(indarey)\n                elif ckel == 2:\n                    tempi = []\n                    if len(arey2) != 0:\n                        tempi = arey2.pop()\n                        anval += 2\n                        anarey.append([tempi[1], indarey[0], indarey[1]])\n                        anarey.append([tempi[0], tempi[1], indarey[0]])\n                    elif len(arey3) != 0:\n                        a = arey3.pop()\n                        tempi = []\n                        c = 0\n                        for i in a[-1:0:-1]:\n                            tempi.append(i)\n                            c += 1\n                            if c == 3:\n                                tempi.reverse()\n                                anarey.append(tempi)\n                                tempi = [i]\n                                anval += 1\n                                c = 1\n                        anval += 2\n                        anarey.append([a[1], indarey[0], indarey[1]])\n                        anarey.append([a[0], a[1], indarey[0]])\n                    else:\n                        arey2.append(indarey)\n                ckel = 1\n    if len(arey2) != 0 or len(arey3) != 0:\n        print(-1)\n    elif anval > k:\n        print(-1)\n    else:\n        print(anval)\n        for i in anarey:\n            print(' '.join(map(str, i)))\ntst = int(input())\nfor i in range(tst):\n    z = input().split()\n    m = int(z[0])\n    r = int(z[1])\n    arey = list(map(int, input().split()))\n    ans(m, arey, r)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    (n, k) = get_ints()\n    p = get_array()\n    psort = sorted(p)\n    f = 0\n    for i in range(0, n):\n        if p[i] != psort[i]:\n            f = 1\n            break\n    ff = 0\n    if psort == p[::-1]:\n        ff = 1\n    if f == 0:\n        print(0)\n    elif ff == 1:\n        if n == 3:\n            print(-1)\n        elif n % 4 == 0 or n % 4 == 1:\n            print(n // 2)\n            i = 1\n            j = n\n            for k in range(n // 4):\n                print(i, i + 1, n)\n                print(i + 1, n, n - 1)\n                i = i + 2\n                n = n - 2\n        else:\n            print(-1)\n    elif f == 1:\n        sor = 0\n        p.insert(0, 0)\n        for i in range(1, n + 1):\n            if p[i] != i:\n                sor += 1\n        count = 0\n        ind = 0\n        i = 1\n        fin = []\n        while i < n + 1:\n            a = i\n            b = p[i]\n            if i == p[p[i]]:\n                i += 1\n                continue\n            else:\n                a = i\n                b = p[i]\n                c = p[p[i]]\n                (p[a], p[b]) = (p[b], p[a])\n                (p[a], p[c]) = (p[c], p[a])\n                if p[a] == a:\n                    sor -= 1\n                if p[b] == b:\n                    sor -= 1\n                if p[c] == c:\n                    sor -= 1\n                count += 1\n                fin.append([a, b, c])\n            if count > k:\n                ind = -1\n                break\n        i = 1\n        while i:\n            if sor > 0 and sor <= 2:\n                ind = -1\n                break\n            else:\n                a = i\n                b = p[i]\n                if a != b:\n                    for j in range(i, n + 1):\n                        if j != a and j != b and (p[j] != j):\n                            c = j\n                            (p[a], p[b]) = (p[b], p[a])\n                            (p[a], p[c]) = (p[c], p[a])\n                            count += 1\n                            if p[a] == a:\n                                sor -= 1\n                            if p[b] == b:\n                                sor -= 1\n                            if p[c] == c:\n                                sor -= 1\n                            fin.append([a, b, c])\n                            break\n            if i == p[i]:\n                if i == n:\n                    break\n                else:\n                    i = i + 1\n            if count > k:\n                ind = -1\n                break\n        if ind == -1:\n            print(-1)\n        else:\n            print(len(fin))\n            for i in fin:\n                print(*i)", "import sys\nsys.setrecursionlimit(10 ** 6)\n\ndef dfs(graph, visited, node, parent, cycle):\n    visited.add(node)\n    cycle.append(node)\n    if graph[node] == parent:\n        return cycle\n    else:\n        return dfs(graph, visited, graph[node], parent, cycle)\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    (n, k) = list(map(int, input().split()))\n    nodes = list(map(int, input().split()))\n    visited = set()\n    graph = dict()\n    vertices = []\n    for i in range(1, n + 1):\n        if not nodes[i - 1] == i:\n            vertices.append(i)\n    notInplace = len(vertices)\n    for i in range(1, n + 1):\n        graph[i] = nodes[i - 1]\n    even_cycles = []\n    even_2s_cycles = []\n    odd_cycles = []\n    for i in vertices:\n        if not i in visited:\n            c = dfs(graph, visited, i, i, [])\n            if len(c) == 2:\n                even_2s_cycles.append(c)\n            elif len(c) % 2 == 0:\n                even_cycles.append(c)\n            else:\n                odd_cycles.append(c)\n    totalCycles = len(even_cycles) + len(odd_cycles) + len(even_2s_cycles)\n    if notInplace % 2 == 0 and (not totalCycles % 2 == 0) or (not notInplace % 2 == 0 and totalCycles % 2 == 0):\n        print(-1)\n    else:\n        totalMoves = 0\n        for j in even_2s_cycles:\n            totalMoves += len(j) // 2\n        for j in even_cycles:\n            totalMoves += len(j) // 2\n        for j in odd_cycles:\n            totalMoves += len(j) // 2\n        if totalMoves <= k:\n            print(totalMoves)\n            for j in odd_cycles:\n                for v in range(0, len(j) - 2, 2):\n                    print('{} {} {}'.format(j[0], j[v + 1], j[v + 2]))\n            for j in even_cycles:\n                for v in range(0, len(j) - 2, 2):\n                    print('{} {} {}'.format(j[0], j[v + 1], j[v + 2]))\n                even_2s_cycles.append([j[0], j[len(j) - 1]])\n            for j in range(0, len(even_2s_cycles), 2):\n                print('{} {} {}'.format(even_2s_cycles[j][0], even_2s_cycles[j][1], even_2s_cycles[j + 1][0]))\n                print('{} {} {}'.format(even_2s_cycles[j + 1][1], even_2s_cycles[j + 1][0], even_2s_cycles[j][0]))"]