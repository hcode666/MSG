["import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfrom collections import OrderedDict\nt = inp()\nfor i in range(t):\n    s1 = st()\n    s2 = st()\n    d = OrderedDict()\n    s3 = []\n    for i in s2:\n        s3.append(i.lower())\n    for i in range(26):\n        d[chr(i + 97)] = s3.count(chr(i + 97))\n    d1 = {}\n    d = sorted(d.items(), key=lambda x: x[1])\n    d.reverse()\n    s1.reverse()\n    for i in range(len(d)):\n        d1[d[i][0]] = s1[i]\n    s = ''\n    for i in s2:\n        if i in d1:\n            s += d1[i]\n        elif i.lower() in d1:\n            s += d1[i.lower()].upper()\n        else:\n            s += i\n    print(s)", "import sys\nimport operator\nfrom operator import itemgetter\nt = int(input())\nfor i in range(0, t):\n    pstr = input()\n    cstr = input()\n    n = len(cstr)\n    table = 26 * [0]\n    for j in range(0, n):\n        if cstr[j] >= 'a' and cstr[j] <= 'z':\n            table[ord(cstr[j]) - 97] += 1\n        elif cstr[j] >= 'A' and cstr[j] <= 'Z':\n            table[ord(cstr[j]) - 65] += 1\n    list = []\n    for j in range(0, 26):\n        list.append((j, table[j]))\n    list.sort(key=itemgetter(1))\n    mapchars = dict()\n    for k in range(0, 26):\n        mapchars[chr(list[k][0] + 97)] = pstr[k]\n    s = ''\n    for j in range(0, n):\n        if cstr[j] >= 'a' and cstr[j] <= 'z':\n            s += mapchars[cstr[j]]\n        elif cstr[j] >= 'A' and cstr[j] <= 'Z':\n            index = chr(ord(cstr[j]) - 65 + 97)\n            s += chr(ord(mapchars[index]) - 97 + 65)\n        else:\n            s += cstr[j]\n    print(s)", "t = int(input())\nfor i in range(t):\n    fs = input()\n    c = input()\n    c_dict = {}\n    c_list = []\n    c_count = 0\n    c_str = ''\n    r_str = ''\n    for e in range(len(c)):\n        c_char = c[e].lower()\n        if c_char.isalpha():\n            if c_char in c_dict:\n                c_dict[c_char] = c_dict[c_char] + 1\n            else:\n                c_dict[c_char] = 1\n    for (k, v) in sorted(c_dict.items(), key=lambda item: item[1]):\n        if v > c_count:\n            c_list.sort()\n            c_str = c_str + ''.join(c_list)\n            c_list = [k]\n            c_count = v\n        else:\n            c_list.append(k)\n    c_list.sort()\n    c_str = c_str + ''.join(c_list)\n    len_a = len(fs)\n    len_b = len(c_str)\n    result_dict = dict(list(((c_str[len_b - 1 - i], fs[len_a - 1 - i]) for i in range(len_b))))\n    for i in range(len(c)):\n        if not c[i].isalpha():\n            r_str = r_str + c[i]\n        else:\n            c_char = c[i].lower()\n            f_char = result_dict[c_char]\n            if c[i].isupper():\n                f_char = f_char.upper()\n            r_str = r_str + f_char\n    print(r_str)", "import string\nfor _ in range(int(input())):\n    freq = input()\n    cyp = input()\n    d = {}\n    a = set(string.ascii_lowercase)\n    for i in cyp:\n        j = i.lower()\n        if j in a:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n    d = [[d[x], x] for x in d]\n    d.sort()\n    d = list((x[1] for x in d))\n    d = {x: y for (x, y) in zip(d[::-1], freq[::-1])}\n    s = ''\n    for i in cyp:\n        j = i.lower()\n        if j in d:\n            if i in a:\n                s += d[j]\n            else:\n                s += d[j].upper()\n        else:\n            s += j\n    print(s)", "import string\nfor _ in range(int(input())):\n    freq = input()\n    cyp = input()\n    d = {}\n    a = set(string.ascii_lowercase)\n    for i in cyp:\n        j = i.lower()\n        if j in a:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n    d = [[d[x], x] for x in d]\n    d.sort()\n    d = list((x[1] for x in d))\n    d = {x: y for (x, y) in zip(d[::-1], freq[::-1])}\n    s = ''\n    for i in cyp:\n        j = i.lower()\n        if j in d:\n            if i in a:\n                s += d[j]\n            else:\n                s += d[j].upper()\n        else:\n            s += j\n    print(s)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    s = input()\n    s = s[::-1]\n    c = input()\n    d = defaultdict(int)\n    for ele in c:\n        ele = ele.lower()\n        if ele not in s:\n            continue\n        d[ele] += 1\n    res = [(d[key], key) for key in d]\n    res.sort(reverse=True)\n    d = defaultdict(int)\n    ind = 0\n    for ele in res:\n        (_, k) = ele\n        d[k] = s[ind]\n        ind += 1\n    res = ''\n    for ele in c:\n        if ele not in s and ele.lower() not in s:\n            res += ele\n        elif ord(ele) < 97:\n            e = ele.lower()\n            res += d[e].upper()\n        else:\n            res += d[ele]\n    print(res)", "from collections import Counter\n\ndef decrypt(freq: str, ciphertext: str) -> str:\n    counts = Counter((c.lower() for c in ciphertext if c.isalpha()))\n    ordered = sorted(counts.items(), key=lambda x: x[::-1])\n    translation = {ord(cipherc): plainc for ((cipherc, _), plainc) in zip(ordered, freq[-len(ordered):])}\n    translation.update({ord(chr(cipherc).upper()): plainc.upper() for (cipherc, plainc) in translation.items()})\n    plaintext = ciphertext.translate(translation)\n    return plaintext\nt = int(input())\nfor _ in range(t):\n    freq = input()\n    ciphertext = input()\n    plaintext = decrypt(freq, ciphertext)\n    print(plaintext)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    freq = str(input())[::-1]\n    cryp = str(input())\n    fcount = Counter(cryp.lower())\n    csort = []\n    enc = {}\n    for f in fcount:\n        if f.isalpha():\n            csort.append([fcount[f], f])\n        else:\n            enc[f] = f\n    csort.sort(reverse=True)\n    for c in range(len(csort)):\n        enc[csort[c][1]] = freq[c]\n    fin = ''\n    for c in cryp:\n        if c.islower():\n            fin += enc[c]\n        elif c.isupper():\n            fin += enc[c.lower()].upper()\n        else:\n            fin += enc[c]\n    print(fin)", "def frequency(s):\n    ch = 'a'\n    frq_arr = [[chr(i + ord('a')), 0] for i in range(26)]\n    for i in s:\n        if ord(i) - ord('a') <= 25 and ord(i) - ord('a') >= 0:\n            frq_arr[ord(i) - ord('a')][1] += 1\n    frq_arr.sort(key=lambda x: x[1])\n    return frq_arr\nfor _ in range(int(input())):\n    freq_seq = input()\n    encrypted_txt = input()\n    e_txt_lc = encrypted_txt.lower()\n    frq_arr = frequency(e_txt_lc)\n    for i in range(26):\n        frq_arr[i][1] = freq_seq[i]\n    frq_arr.sort(key=lambda x: x[0])\n    for i in range(len(encrypted_txt)):\n        if ord(encrypted_txt[i]) >= ord('a') and ord(encrypted_txt[i]) <= ord('z'):\n            print(chr(ord(encrypted_txt[i]) + ord(frq_arr[ord(encrypted_txt[i]) - ord('a')][1]) - ord(frq_arr[ord(encrypted_txt[i]) - ord('a')][0])), end='')\n        elif ord(encrypted_txt[i]) >= ord('A') and ord(encrypted_txt[i]) <= ord('Z'):\n            print(chr(ord(encrypted_txt[i]) + ord(frq_arr[ord(encrypted_txt[i]) - ord('A')][1]) - ord(frq_arr[ord(encrypted_txt[i]) - ord('A')][0])), end='')\n        else:\n            print(encrypted_txt[i], end='')\n    print('')", "for _ in range(int(input())):\n    abc = list(input())\n    frq = {}\n    ans = {}\n    inp = input()\n    for u in map(ord, inp):\n        if 64 < u < 91:\n            if u not in frq:\n                frq[u] = 0\n            frq[u] += 1\n        elif 64 < (u := (u - 32)) < 91:\n            if u not in frq:\n                frq[u] = 0\n            frq[u] += 1\n    for x in sorted(frq.items(), key=lambda a: (a[1], a[0]), reverse=True):\n        ans[chr(x[0] + 32)] = (n := abc.pop())\n        ans[chr(x[0])] = chr(ord(n) - 32)\n    print(''.join([ans[c] if c in ans else c for c in inp]))", "for _ in range(int(input())):\n    abc = list(input())\n    frq = {}\n    ans = {}\n    inp = input()\n    for u in map(ord, inp):\n        if 64 < u < 91:\n            if u not in frq:\n                frq[u] = 0\n            frq[u] += 1\n        elif 64 < (u := (u - 32)) < 91:\n            if u not in frq:\n                frq[u] = 0\n            frq[u] += 1\n    for x in sorted(frq.items(), key=lambda a: (a[1], a[0]), reverse=True):\n        ans[chr(x[0] + 32)] = (n := abc.pop())\n        ans[chr(x[0])] = chr(ord(n) - 32)\n    print(''.join([ans[c] if c in ans else c for c in inp]))", "for _ in range(int(input())):\n    abc = list(input())\n    frq = {}\n    ans = {}\n    inp = input()\n    for u in map(ord, inp):\n        if 64 < u < 91:\n            if u not in frq:\n                frq[u] = 0\n            frq[u] += 1\n        elif 64 < (u := (u - 32)) < 91:\n            if u not in frq:\n                frq[u] = 0\n            frq[u] += 1\n    for x in sorted(frq.items(), key=lambda a: (a[1], a[0]), reverse=True):\n        ans[chr(x[0] + 32)] = (n := abc.pop())\n        ans[chr(x[0])] = chr(ord(n) - 32)\n    print(''.join([ans[c] if c in ans else c for c in inp]))", "for _ in range(int(input())):\n    abc = list(input())\n    frq = {}\n    ans = {}\n    inp = input()\n    for u in map(ord, inp):\n        if 64 < u < 91:\n            if u not in frq:\n                frq[u] = 0\n            frq[u] += 1\n        elif 64 < (u := (u - 32)) < 91:\n            if u not in frq:\n                frq[u] = 0\n            frq[u] += 1\n    for x in sorted(frq.items(), key=lambda a: (a[1], a[0]), reverse=True):\n        ans[chr(x[0] + 32)] = (n := abc.pop())\n        ans[chr(x[0])] = chr(ord(n) - 32)\n    print(''.join([ans[c] if c in ans else c for c in inp]))", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    x = []\n    xd = {}\n    for i in range(len(t)):\n        if t[i].isupper():\n            x += [1]\n            xd[t[i].lower()] = xd.setdefault(t[i].lower(), 0) + 1\n        elif t[i].isalpha():\n            x += [0]\n            xd[t[i]] = xd.setdefault(t[i], 0) + 1\n        else:\n            x += [-1]\n    xd = sorted(xd.items(), key=lambda x: (x[1], x[0]))\n    ans = {}\n    for i in range(len(xd)):\n        ans[xd[i][0]] = s[26 - len(xd) + i]\n    for i in range(len(t)):\n        if t[i].isalpha():\n            if x[i] == 0:\n                print(ans[t[i]], end='')\n            else:\n                print(ans[t[i].lower()].upper(), end='')\n        else:\n            print(t[i], end='')\n    print()", "import heapq\n\ndef rt(s, q):\n    r = {}\n    for i in range(0, 26):\n        r[i] = chr(97 + i)\n    d = [0 for i in range(0, 26)]\n    h = []\n    for i in range(0, len(q)):\n        if 65 <= ord(q[i]) <= 90:\n            r1 = ord(q[i]) - 65\n            d[r1] += 1\n        elif 97 <= ord(q[i]) <= 122:\n            r1 = ord(q[i]) - 97\n            d[r1] += 1\n    for i in range(0, len(d)):\n        if d[i] > 0:\n            heapq.heappush(h, [-d[i], -i])\n    j = 25\n    while len(h) > 0:\n        [a1, b1] = heapq.heappop(h)\n        r[-b1] = s[j]\n        j = j - 1\n    k = ''\n    for i in range(0, len(q)):\n        if 65 <= ord(q[i]) <= 90:\n            r1 = ord(q[i]) - 65\n            y1 = ord(r[r1]) - 32\n            k = k + chr(y1)\n        elif 97 <= ord(q[i]) <= 122:\n            r1 = ord(q[i]) - 97\n            k = k + r[r1]\n        else:\n            k = k + q[i]\n    return k\nx = int(input())\nfor i in range(0, x):\n    s = input()\n    y = input()\n    print(rt(s, y))", "from collections import defaultdict\n\ndef get_original_text(cipher, freq_seq):\n    cipher_freq = defaultdict(lambda : 0)\n    for c in cipher:\n        if c.isalpha():\n            cipher_freq[c.lower()] += 1\n    cipher_freq = dict(sorted(cipher_freq.items(), key=lambda x: (x[1], x[0])))\n    start = 26 - len(cipher_freq)\n    for c_f_s in cipher_freq:\n        cipher_freq[c_f_s] = freq_seq[start]\n        start += 1\n    origin = ''\n    for c in cipher:\n        if c.isupper() and c.isalpha():\n            origin += cipher_freq[c.lower()].upper()\n        elif c.isalpha():\n            origin += cipher_freq[c]\n        else:\n            origin += c\n    return origin\nfor i in range(int(input())):\n    freq_seq = input()\n    cipher = input()\n    original_text = get_original_text(cipher, freq_seq)\n    print(original_text)", "from collections import defaultdict\n\ndef get_original_text(cipher, freq_seq):\n    cipher_freq = defaultdict(lambda : 0)\n    for c in cipher:\n        if c.isalpha():\n            cipher_freq[c.lower()] += 1\n    cipher_freq_seq = sorted(cipher_freq, key=lambda x: (cipher_freq[x], x))\n    f_s_counter = 25\n    c_f_s_counter = len(cipher_freq_seq) - 1\n    while c_f_s_counter != -1:\n        cipher_freq[cipher_freq_seq[c_f_s_counter]] = freq_seq[f_s_counter]\n        c_f_s_counter -= 1\n        f_s_counter -= 1\n    origin = ''\n    for c in cipher:\n        if c.isupper() and c.isalpha():\n            origin += cipher_freq[c.lower()].upper()\n        elif c.isalpha():\n            origin += cipher_freq[c]\n        else:\n            origin += c\n    return origin\nfor i in range(int(input())):\n    freq_seq = input()\n    cipher = input()\n    original_text = get_original_text(cipher, freq_seq)\n    print(original_text)", "from collections import defaultdict\n\ndef get_cipher_origin_substitute_map(cipher, freq_seq):\n    cipher_freq = defaultdict(lambda : 0)\n    for c in cipher:\n        if c.isalpha():\n            cipher_freq[c.lower()] += 1\n    cipher_freq_seq = sorted(cipher_freq, key=lambda x: (cipher_freq[x], x))\n    f_s_counter = 25\n    c_f_s_counter = len(cipher_freq_seq) - 1\n    while c_f_s_counter != -1:\n        cipher_freq[cipher_freq_seq[c_f_s_counter]] = freq_seq[f_s_counter]\n        c_f_s_counter -= 1\n        f_s_counter -= 1\n    return cipher_freq\nfor i in range(int(input())):\n    freq_seq = input()\n    cipher = input()\n    cipher_origin_map = get_cipher_origin_substitute_map(cipher, freq_seq)\n    origin = ''\n    for (j, c) in enumerate(cipher):\n        if c.isupper() and c.isalpha():\n            origin += cipher_origin_map[c.lower()].upper()\n        elif c.isalpha():\n            origin += cipher_origin_map[c]\n        else:\n            origin += c\n    print(origin)", "T = int(input())\nfor i in range(T):\n    eng_freq = input()\n    enc_text = input()\n    enc_dict = {}\n    for letter in enc_text:\n        if letter.lower() in 'qwertyuiopasdfghjklzxcvbnm':\n            if letter.lower() in enc_dict.keys():\n                enc_dict[letter.lower()] += 1\n            else:\n                enc_dict[letter.lower()] = 1\n    enc_freq = sorted(enc_dict.items(), key=lambda x: (x[1], x[0]))\n    int_dict = {}\n    for i in range(len(enc_freq) - 1, -1, -1):\n        int_dict[enc_freq[i][0]] = i - len(enc_freq)\n    res_strg = ''\n    for letter in enc_text:\n        if letter.lower() in 'qwertyuiopasdfghjklzxcvbnm':\n            if letter.islower():\n                res_strg += eng_freq[int_dict[letter]]\n            else:\n                res_strg += eng_freq[int_dict[letter.lower()]].upper()\n        else:\n            res_strg += letter\n    print(res_strg)", "ri = lambda : int(input())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nfrom collections import defaultdict\nimport sys\nsys.setrecursionlimit(100000)\nt = ri()\nfor test in range(t):\n    s = rs()\n    p = list(rs())\n    arr = [[0, chr(i + 97)] for i in range(26)]\n    for i in p:\n        i = i.lower()\n        if ord(i) < 97 or ord(i) > 122:\n            continue\n        arr[ord(i) - ord('a')][0] += 1\n    arr.sort()\n    d = {}\n    for i in range(26):\n        d[arr[i][1]] = s[i]\n    ans = ''\n    for i in p:\n        if i.lower() in d:\n            if i.islower():\n                ans += d[i]\n            else:\n                ans += d[i.lower()].upper()\n        else:\n            ans += i\n    print(ans)", "t = int(input())\nwhile t > 0:\n    string = input()\n    string_input = input()\n    input_str = ''\n    for i in range(len(string_input)):\n        if 65 <= ord(string_input[i]) <= 90:\n            input_str += chr(ord(string_input[i]) + 32)\n        else:\n            input_str += string_input[i]\n    dct_str = {}\n    for i in range(len(input_str)):\n        if input_str[i] not in dct_str:\n            dct_str[input_str[i]] = 1\n        else:\n            dct_str[input_str[i]] += 1\n    dct_rev = {}\n    for word in dct_str:\n        if dct_str[word] not in dct_rev:\n            dct_rev[dct_str[word]] = [word]\n        else:\n            dct_rev[dct_str[word]].append(word)\n    dct_lst_rev = []\n    for word in dct_rev:\n        dct_lst_rev.append(word)\n    dct_lst_rev.sort()\n    final_freq_seq = []\n    for i in range(len(dct_lst_rev)):\n        final_freq_seq += sorted(dct_rev[dct_lst_rev[i]])\n    final_freq_seq_str = ''\n    for i in range(len(final_freq_seq)):\n        if 65 <= ord(final_freq_seq[i]) <= 90 or 97 <= ord(final_freq_seq[i]) <= 122:\n            final_freq_seq_str += final_freq_seq[i]\n    final_seq_dct = {}\n    length = len(final_freq_seq_str)\n    initial = 26 - length\n    for i in range(initial, 26):\n        final_seq_dct[final_freq_seq_str[i - initial]] = string[i]\n    ans_str = ''\n    for i in range(len(string_input)):\n        if 65 <= ord(string_input[i]) <= 90:\n            ans_str += chr(ord(final_seq_dct[chr(ord(string_input[i]) + 32)]) - 32)\n        elif 97 <= ord(string_input[i]) <= 122:\n            ans_str += final_seq_dct[string_input[i]]\n        else:\n            ans_str += string_input[i]\n    print(ans_str)\n    t -= 1", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    A = input()\n    B = input()\n    C = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    D = [0] * 26\n    E = ''\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            D[ord(i) - 97] += 1\n        elif 26 > ord(i) - 65 >= 0:\n            D[ord(i) - 65] += 1\n    C.sort(key=lambda x: D[ord(x) - 97])\n    for i in range(26):\n        D[ord(C[i]) - 97] = i\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            E += A[D[ord(i) - 97]]\n        elif 26 > ord(i) - 65 >= 0:\n            E += A[D[ord(i) - 65]].upper()\n        else:\n            E += i\n    print(E)", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    A = input()\n    B = input()\n    C = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    D = [0] * 26\n    E = ''\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            D[ord(i) - 97] += 1\n        elif 26 > ord(i) - 65 >= 0:\n            D[ord(i) - 65] += 1\n    C.sort(key=lambda x: D[ord(x) - 97])\n    for i in range(26):\n        D[ord(C[i]) - 97] = i\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            E += A[D[ord(i) - 97]]\n        elif 26 > ord(i) - 65 >= 0:\n            E += A[D[ord(i) - 65]].upper()\n        else:\n            E += i\n    print(E)", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    A = input()\n    B = input()\n    C = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    D = [0] * 26\n    E = ''\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            D[ord(i) - 97] += 1\n        elif 26 > ord(i) - 65 >= 0:\n            D[ord(i) - 65] += 1\n    C.sort(key=lambda x: D[ord(x) - 97])\n    for i in range(26):\n        D[ord(C[i]) - 97] = i\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            E += A[D[ord(i) - 97]]\n        elif 26 > ord(i) - 65 >= 0:\n            E += A[D[ord(i) - 65]].upper()\n        else:\n            E += i\n    print(E)", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    A = input()\n    B = input()\n    C = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    D = [0] * 26\n    E = ''\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            D[ord(i) - 97] += 1\n        elif 26 > ord(i) - 65 >= 0:\n            D[ord(i) - 65] += 1\n    C.sort(key=lambda x: D[ord(x) - 97])\n    for i in range(26):\n        D[ord(C[i]) - 97] = i\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            E += A[D[ord(i) - 97]]\n        elif 26 > ord(i) - 65 >= 0:\n            E += A[D[ord(i) - 65]].upper()\n        else:\n            E += i\n    print(E)", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    A = input()\n    B = input()\n    C = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    D = [0] * 26\n    E = ''\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            D[ord(i) - 97] += 1\n        elif 26 > ord(i) - 65 >= 0:\n            D[ord(i) - 65] += 1\n    C.sort(key=lambda x: D[ord(x) - 97])\n    for i in range(26):\n        D[ord(C[i]) - 97] = i\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            E += A[D[ord(i) - 97]]\n        elif 26 > ord(i) - 65 >= 0:\n            E += A[D[ord(i) - 65]].upper()\n        else:\n            E += i\n    print(E)", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    A = input()\n    B = input()\n    C = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    D = [0] * 26\n    E = ''\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            D[ord(i) - 97] += 1\n        elif 26 > ord(i) - 65 >= 0:\n            D[ord(i) - 65] += 1\n    C.sort(key=lambda x: D[ord(x) - 97])\n    for i in range(26):\n        D[ord(C[i]) - 97] = i\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            E += A[D[ord(i) - 97]]\n        elif 26 > ord(i) - 65 >= 0:\n            E += A[D[ord(i) - 65]].upper()\n        else:\n            E += i\n    print(E)", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    A = input()\n    B = input()\n    C = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    D = [0] * 26\n    E = ''\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            D[ord(i) - 97] += 1\n        elif 26 > ord(i) - 65 >= 0:\n            D[ord(i) - 65] += 1\n    C.sort(key=lambda x: D[ord(x) - 97])\n    for i in range(26):\n        D[ord(C[i]) - 97] = i\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            E += A[D[ord(i) - 97]]\n        elif 26 > ord(i) - 65 >= 0:\n            E += A[D[ord(i) - 65]].upper()\n        else:\n            E += i\n    print(E)", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    A = input()\n    B = input()\n    C = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    D = [0] * 26\n    E = ''\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            D[ord(i) - 97] += 1\n        elif 26 > ord(i) - 65 >= 0:\n            D[ord(i) - 65] += 1\n    C.sort(key=lambda x: D[ord(x) - 97])\n    for i in range(26):\n        D[ord(C[i]) - 97] = i\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            E += A[D[ord(i) - 97]]\n        elif 26 > ord(i) - 65 >= 0:\n            E += A[D[ord(i) - 65]].upper()\n        else:\n            E += i\n    print(E)", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    A = input()\n    B = input()\n    C = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    D = [0] * 26\n    E = ''\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            D[ord(i) - 97] += 1\n        elif 26 > ord(i) - 65 >= 0:\n            D[ord(i) - 65] += 1\n    C.sort(key=lambda x: D[ord(x) - 97])\n    for i in range(26):\n        D[ord(C[i]) - 97] = i\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            E += A[D[ord(i) - 97]]\n        elif 26 > ord(i) - 65 >= 0:\n            E += A[D[ord(i) - 65]].upper()\n        else:\n            E += i\n    print(E)", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    A = input()\n    B = input()\n    C = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    D = [0] * 26\n    E = ''\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            D[ord(i) - 97] += 1\n        elif 26 > ord(i) - 65 >= 0:\n            D[ord(i) - 65] += 1\n    C.sort(key=lambda x: D[ord(x) - 97])\n    for i in range(26):\n        D[ord(C[i]) - 97] = i\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            E += A[D[ord(i) - 97]]\n        elif 26 > ord(i) - 65 >= 0:\n            E += A[D[ord(i) - 65]].upper()\n        else:\n            E += i\n    print(E)", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    A = input()\n    B = input()\n    C = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    D = [0] * 26\n    E = ''\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            D[ord(i) - 97] += 1\n        elif 26 > ord(i) - 65 >= 0:\n            D[ord(i) - 65] += 1\n    C.sort(key=lambda x: D[ord(x) - 97])\n    for i in range(26):\n        D[ord(C[i]) - 97] = i\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            E += A[D[ord(i) - 97]]\n        elif 26 > ord(i) - 65 >= 0:\n            E += A[D[ord(i) - 65]].upper()\n        else:\n            E += i\n    print(E)", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    A = input()\n    B = input()\n    C = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    D = [0] * 26\n    E = ''\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            D[ord(i) - 97] += 1\n        elif 26 > ord(i) - 65 >= 0:\n            D[ord(i) - 65] += 1\n    C.sort(key=lambda x: D[ord(x) - 97])\n    for i in range(26):\n        D[ord(C[i]) - 97] = i\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            E += A[D[ord(i) - 97]]\n        elif 26 > ord(i) - 65 >= 0:\n            E += A[D[ord(i) - 65]].upper()\n        else:\n            E += i\n    print(E)", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    A = input()\n    B = input()\n    C = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    D = [0] * 26\n    E = ''\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            D[ord(i) - 97] += 1\n        elif 26 > ord(i) - 65 >= 0:\n            D[ord(i) - 65] += 1\n    C.sort(key=lambda x: D[ord(x) - 97])\n    for i in range(26):\n        D[ord(C[i]) - 97] = i\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            E += A[D[ord(i) - 97]]\n        elif 26 > ord(i) - 65 >= 0:\n            E += A[D[ord(i) - 65]].upper()\n        else:\n            E += i\n    print(E)", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    A = input()\n    B = input()\n    C = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    D = [0] * 26\n    E = ''\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            D[ord(i) - 97] += 1\n        elif 26 > ord(i) - 65 >= 0:\n            D[ord(i) - 65] += 1\n    C.sort(key=lambda x: D[ord(x) - 97])\n    for i in range(26):\n        D[ord(C[i]) - 97] = i\n    for i in B:\n        if 26 > ord(i) - 97 >= 0:\n            E += A[D[ord(i) - 97]]\n        elif 26 > ord(i) - 65 >= 0:\n            E += A[D[ord(i) - 65]].upper()\n        else:\n            E += i\n    print(E)", "t = int(input())\nfor _ in range(t):\n    a = input()\n    b = input()\n    alpha = []\n    c = []\n    for i in range(26):\n        c.append(0)\n        alpha.append(chr(i + 97))\n    s = ''\n    for i in b:\n        if 25 >= ord(i) - 97 >= 0:\n            c[ord(i) - 97] += 1\n        elif 25 >= ord(i) - 65 >= 0:\n            c[ord(i) - 65] += 1\n    alpha.sort(key=lambda x: c[ord(x) - 97])\n    for i in range(26):\n        c[ord(alpha[i]) - 97] = i\n    for i in b:\n        if 25 >= ord(i) - 97 >= 0:\n            s += a[c[ord(i) - 97]]\n        elif 25 >= ord(i) - 65 >= 0:\n            s += a[c[ord(i) - 65]].upper()\n        else:\n            s += i\n    print(s)", "t = int(input())\nfor _ in range(t):\n    a = input()\n    b = input()\n    alpha = []\n    c = []\n    for i in range(26):\n        c.append(0)\n        alpha.append(chr(i + 97))\n    s = ''\n    for i in b:\n        if 25 >= ord(i) - 97 >= 0:\n            c[ord(i) - 97] += 1\n        elif 25 >= ord(i) - 65 >= 0:\n            c[ord(i) - 65] += 1\n    alpha.sort(key=lambda x: c[ord(x) - 97])\n    for i in range(26):\n        c[ord(alpha[i]) - 97] = i\n    for i in b:\n        if 25 >= ord(i) - 97 >= 0:\n            s += a[c[ord(i) - 97]]\n        elif 25 >= ord(i) - 65 >= 0:\n            s += a[c[ord(i) - 65]].upper()\n        else:\n            s += i\n    print(s)", "def isAlphabet(c):\n    a = ord(c)\n    return a >= 97 and a <= 122 or (a >= 65 and a <= 90)\n\ndef isCapital(c):\n    a = ord(c)\n    return a >= 65 and a <= 90\n\ndef solve(freq, cypher):\n    alphabets = [chr(i) for i in range(97, 97 + 26)]\n    counts = [0] * 26\n    for c in cypher:\n        if isAlphabet(c):\n            c = c.lower()\n            counts[ord(c) - 97] += 1\n\n    def k(v):\n        return counts[ord(v) - 97]\n    alphabets.sort(key=k)\n    ans = ''\n    mp = {}\n    for i in range(26):\n        mp[alphabets[i]] = freq[i]\n    for c in cypher:\n        a = c.lower()\n        if not isAlphabet(c):\n            ans += c\n        elif isCapital(c):\n            ans += mp[a].upper()\n        else:\n            ans += mp[a]\n    return ans\nfor _ in range(int(input())):\n    freq = input()\n    cypher = input()\n    print(solve(freq, cypher))", "def isAlphabet(c):\n    a = ord(c)\n    return a >= 97 and a <= 122 or (a >= 65 and a <= 90)\n\ndef isCapital(c):\n    a = ord(c)\n    return a >= 65 and a <= 90\n\ndef solve(freq, cypher):\n    alphabets = [chr(i) for i in range(97, 97 + 26)]\n    counts = [0] * 26\n    for c in cypher:\n        if isAlphabet(c):\n            c = c.lower()\n            counts[ord(c) - 97] += 1\n\n    def k(v):\n        return counts[ord(v) - 97]\n    alphabets.sort(key=k)\n    ans = ''\n    mp = {}\n    for i in range(26):\n        mp[alphabets[i]] = freq[i]\n    for c in cypher:\n        a = c.lower()\n        if not isAlphabet(c):\n            ans += c\n        elif isCapital(c):\n            ans += mp[a].upper()\n        else:\n            ans += mp[a]\n    return ans\nfor _ in range(int(input())):\n    freq = input()\n    cypher = input()\n    print(solve(freq, cypher))", "t = int(input())\no = 0\nwhile o < t:\n    frequency = input()\n    text = input()\n    text = list(text)\n    posOfText = {}\n    length = 0\n    for (count, i) in enumerate(text):\n        i = i.lower()\n        if i in posOfText:\n            posOfText[i].append(count)\n        else:\n            posOfText[i] = [count]\n            if i != ' ' and i.isalpha():\n                length += 1\n    frequency = list(frequency)\n    frequency = frequency[-length:]\n    occurrenceOfText = {}\n    for (keys, values) in posOfText.items():\n        if len(values) in occurrenceOfText:\n            occurrenceOfText[len(values)].append(keys)\n        else:\n            occurrenceOfText[len(values)] = [keys]\n    count = 0\n    for keys in sorted(occurrenceOfText.keys()):\n        for txt in sorted(occurrenceOfText[keys]):\n            if txt != ' ' and txt.isalpha():\n                for p in posOfText[txt]:\n                    text[p] = frequency[count].upper() if text[p].isupper() else frequency[count]\n                count += 1\n    print(''.join(text))\n    o += 1", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)) + '\\n')\n\ndef main():\n    for _ in tr():\n        freq_seq = line()\n        encrypt = line()\n        f_table = [[0, chr(ord('a') + i)] for i in range(26)]\n        for i in encrypt:\n            temp = ord(i.lower()) - ord('a')\n            if 0 <= temp < 26:\n                f_table[temp][0] += 1\n        f_table.sort(key=lambda x: x[0])\n        mapping = {}\n        for i in range(26):\n            mapping[f_table[i][1]] = freq_seq[i]\n        new_string = ''\n        for i in encrypt:\n            if i.isalpha():\n                if i.isupper():\n                    new_string += mapping[i.lower()].upper()\n                else:\n                    new_string += mapping[i.lower()]\n            else:\n                new_string += i\n        print(new_string)\nmain()", "import sys\nfor _ in range(int(input())):\n    order = list(input())\n    s = input()\n    freq = [[0, chr(ord('a') + i)] for i in range(26)]\n    for ch in s:\n        val = ord(ch.lower()) - ord('a')\n        if 0 <= val < 26:\n            freq[val][0] += 1\n    freq.sort(key=lambda x: x[0])\n    mapp = dict()\n    for i in range(26):\n        mapp[freq[i][1]] = order[i]\n    ans = []\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                ans.append(mapp[ch.lower()].upper())\n            else:\n                ans.append(mapp[ch.lower()])\n        else:\n            ans.append(ch)\n    print(''.join(ans))", "from sys import maxsize\nimport functools\n\ndef customSort(a, b):\n    if a[0] > b[0]:\n        return 1\n    elif a[0] < b[0]:\n        return -1\n    elif a[1].lower() > b[1].lower():\n        return 1\n    elif a[1].lower() < b[1].lower():\n        return -1\n    return 0\n\ndef mgc(a, b):\n    mp = {}\n    for i in b:\n        if not i.isalpha():\n            continue\n        i = i.lower()\n        if i in mp:\n            mp[i] += 1\n        else:\n            mp[i] = 1\n    temp = []\n    for i in mp:\n        temp.append([mp[i], i])\n    temp.sort(key=functools.cmp_to_key(customSort))\n    mapped = {}\n    i = 25\n    j = len(temp) - 1\n    while j >= 0:\n        mapped[temp[j][1]] = a[i]\n        j -= 1\n        i -= 1\n    ans = ''\n    for i in b:\n        if i.isupper():\n            if i.lower() in mapped:\n                ans += mapped[i.lower()].upper()\n            continue\n        if i in mapped:\n            ans += mapped[i]\n        else:\n            ans += i\n    return ans\nfor i in range(int(input())):\n    a = input()\n    b = input()\n    print(mgc(a, b))", "t = int(input())\no = 0\nwhile o < t:\n    frequency = input()\n    text = input()\n    text = list(text)\n    posOfText = {}\n    length = 0\n    for (count, i) in enumerate(text):\n        i = i.lower()\n        if i in posOfText:\n            posOfText[i].append(count)\n        else:\n            posOfText[i] = [count]\n            if i != ' ' and i.isalpha():\n                length += 1\n    frequency = list(frequency)\n    frequency = frequency[-length:]\n    occurrenceOfText = {}\n    for (keys, values) in posOfText.items():\n        if len(values) in occurrenceOfText:\n            occurrenceOfText[len(values)].append(keys)\n        else:\n            occurrenceOfText[len(values)] = [keys]\n    count = 0\n    for keys in sorted(occurrenceOfText.keys()):\n        for txt in sorted(occurrenceOfText[keys]):\n            if txt != ' ' and txt.isalpha():\n                for p in posOfText[txt]:\n                    text[p] = frequency[count].upper() if text[p].isupper() else frequency[count]\n                count += 1\n    print(''.join(text))\n    o += 1", "t = int(input())\no = 0\nwhile o < t:\n    frequency = input()\n    text = input()\n    text = list(text)\n    posOfText = {}\n    length = 0\n    for (count, i) in enumerate(text):\n        i = i.lower()\n        if i in posOfText:\n            posOfText[i].append(count)\n        else:\n            posOfText[i] = [count]\n            if i != ' ' and i.isalpha():\n                length += 1\n    frequency = list(frequency)\n    frequency = frequency[-length:]\n    occurrenceOfText = {}\n    for (keys, values) in posOfText.items():\n        if len(values) in occurrenceOfText:\n            occurrenceOfText[len(values)].append(keys)\n        else:\n            occurrenceOfText[len(values)] = [keys]\n    count = 0\n    for keys in sorted(occurrenceOfText.keys()):\n        for txt in sorted(occurrenceOfText[keys]):\n            if txt != ' ' and txt.isalpha():\n                for p in posOfText[txt]:\n                    text[p] = frequency[count].upper() if text[p].isupper() else frequency[count]\n                count += 1\n    print(''.join(text))\n    o += 1", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    x = []\n    xd = {}\n    for i in range(len(t)):\n        if t[i].isupper():\n            x += [1]\n            xd[t[i].lower()] = xd.setdefault(t[i].lower(), 0) + 1\n        elif t[i].isalpha():\n            x += [0]\n            xd[t[i]] = xd.setdefault(t[i], 0) + 1\n        else:\n            x += [-1]\n    xd = sorted(xd.items(), key=lambda x: (x[1], x[0]))\n    ans = {}\n    for i in range(len(xd)):\n        ans[xd[i][0]] = s[26 - len(xd) + i]\n    for i in range(len(t)):\n        if t[i].isalpha():\n            if x[i] == 0:\n                print(ans[t[i]], end='')\n            else:\n                print(ans[t[i].lower()].upper(), end='')\n        else:\n            print(t[i], end='')\n    print()", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    x = []\n    xd = {}\n    for i in range(len(t)):\n        if t[i].isupper():\n            x += [1]\n            xd[t[i].lower()] = xd.setdefault(t[i].lower(), 0) + 1\n        elif t[i].isalpha():\n            x += [0]\n            xd[t[i]] = xd.setdefault(t[i], 0) + 1\n        else:\n            x += [-1]\n    xd = sorted(xd.items(), key=lambda x: (x[1], x[0]))\n    ans = {}\n    for i in range(len(xd)):\n        ans[xd[i][0]] = s[26 - len(xd) + i]\n    for i in range(len(t)):\n        if t[i].isalpha():\n            if x[i] == 0:\n                print(ans[t[i]], end='')\n            else:\n                print(ans[t[i].lower()].upper(), end='')\n        else:\n            print(t[i], end='')\n    print()", "for _ in range(int(input())):\n    s = input()\n    t = input()\n    x = []\n    xd = {}\n    for i in range(len(t)):\n        if t[i].isupper():\n            x += [1]\n            xd[t[i].lower()] = xd.setdefault(t[i].lower(), 0) + 1\n        elif t[i].isalpha():\n            x += [0]\n            xd[t[i]] = xd.setdefault(t[i], 0) + 1\n        else:\n            x += [-1]\n    xd = sorted(xd.items(), key=lambda x: (x[1], x[0]))\n    ans = {}\n    for i in range(len(xd)):\n        ans[xd[i][0]] = s[26 - len(xd) + i]\n    for i in range(len(t)):\n        if t[i].isalpha():\n            if x[i] == 0:\n                print(ans[t[i]], end='')\n            else:\n                print(ans[t[i].lower()].upper(), end='')\n        else:\n            print(t[i], end='')\n    print()", "n = int(input())\nfor _ in range(n):\n    str1 = input()\n    str = input()\n    dic = {}\n    for i in str:\n        if i.isalpha():\n            i = i.lower()\n            if i in dic:\n                dic[i] += 1\n            else:\n                dic[i] = 1\n    dic = sorted(dic.items(), reverse=True)\n    marklist = sorted(dic, key=lambda x: x[1], reverse=True)\n    sortdict = dict(marklist)\n    new_dic = {}\n    j = 25\n    for key in sortdict:\n        new_dic[key] = str1[j]\n        j -= 1\n    for i in str:\n        if i.isalpha():\n            s1 = i.lower()\n            s = new_dic[s1]\n            if i.islower():\n                print(s, end='')\n            else:\n                print(s.upper(), end='')\n        else:\n            print(i, end='')\n    print()", "import sys\nimport operator\nfrom operator import itemgetter\nt = int(input())\nfor i in range(0, t):\n    pstr = input()\n    cstr = input()\n    n = len(cstr)\n    table = 26 * [0]\n    for j in range(0, n):\n        if cstr[j] >= 'a' and cstr[j] <= 'z':\n            table[ord(cstr[j]) - 97] += 1\n        elif cstr[j] >= 'A' and cstr[j] <= 'Z':\n            table[ord(cstr[j]) - 65] += 1\n    list = []\n    for j in range(0, 26):\n        list.append((j, table[j]))\n    list.sort(key=itemgetter(1))\n    mapchars = dict()\n    for k in range(0, 26):\n        mapchars[chr(list[k][0] + 97)] = pstr[k]\n    s = ''\n    for j in range(0, n):\n        if cstr[j] >= 'a' and cstr[j] <= 'z':\n            s += mapchars[cstr[j]]\n        elif cstr[j] >= 'A' and cstr[j] <= 'Z':\n            index = chr(ord(cstr[j]) - 65 + 97)\n            s += chr(ord(mapchars[index]) - 97 + 65)\n        else:\n            s += cstr[j]\n    print(s)", "t = int(input())\nalphabets = 'abcdefghijklmnopqrstuvwxyz'\n\ndef find_index(i, lst):\n    for (index, item) in enumerate(lst):\n        if item[0] == i:\n            return index\nwhile t > 0:\n    t -= 1\n    alphalist = [[i, 0] for i in alphabets]\n    freq = input()\n    enc = input()\n    encl = enc.lower()\n    for (index, letter) in enumerate(alphabets):\n        alphalist[index][1] = encl.count(letter)\n    alphalist.sort(key=lambda x: x[1])\n    for letter in enc:\n        ll = letter.lower()\n        if ll not in alphabets:\n            print(ll, end='')\n        elif letter == ll:\n            print(freq[find_index(ll, alphalist)], end='')\n        else:\n            print(freq[find_index(ll, alphalist)].upper(), end='')\n    print()", "import collections, sys\nT = int(sys.stdin.readline())\nfor _ in range(T):\n    key = sys.stdin.readline().strip()\n    text = sys.stdin.readline().strip()\n    count = collections.Counter(filter(str.isalpha, text.lower()))\n    freq = sorted(((count[k], k) for k in count))\n    key = key[-len(freq):]\n    key += key.upper()\n    trans = ''.join((x[1] for x in freq))\n    trans += trans.upper()\n    print(text.translate(str.maketrans(trans, key)))", "from sys import stdin\nfrom collections import Counter\nfrom string import ascii_lowercase as letters\ninpt = stdin.read().strip().split('\\n')\ni = 1\nfor _ in range(int(inpt[0])):\n    freqs = inpt[i].strip()\n    s = inpt[i + 1]\n    i += 2\n    s_letters = ''.join((c for c in s.lower() if c.isalpha()))\n    counts = Counter(s_letters)\n    h = {c: s_letters.find(c) for c in counts.keys()}\n    k = ''.join(sorted(counts.keys(), key=lambda x: (counts[x], x)))\n    v = freqs[26 - len(k):]\n    print(s.translate(str.maketrans(k + k.upper(), v + v.upper())))", "t = int(input())\nwhile t:\n    t -= 1\n    f = input()\n    c = input()\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    counter = [0] * 26\n    for ele in c:\n        o = ord(ele)\n        if 97 <= o and o <= 122:\n            counter[o - 97] += 1\n        elif 65 <= o and o <= 90:\n            counter[o - 65] += 1\n    cipher = sorted(s, key=lambda x: counter[s.index(x)])\n    for ele in c:\n        q = ord(ele)\n        if 97 <= q and q <= 122:\n            print(f[cipher.index(ele)], end='')\n        elif 65 <= q and q <= 90:\n            ch = chr(q + 32)\n            print(chr(ord(f[cipher.index(ch)]) - 32), end='')\n        else:\n            print(ele, end='')\n    print(' ')", "import sys\n\ndef Q(c):\n    return (E[c], c)\nT = int(input())\nAnss = ''\nfor t in range(T):\n    E = {}\n    A = 'abcdefghijklmnopqrstuvwxyz'\n    AA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    for item in A:\n        E[item] = 0\n    F = input()\n    s = input()\n    u = s.lower()\n    s = list(s)\n    for item in u:\n        if item in A:\n            E[item] += 1\n    L = sorted(E, key=Q)\n    Ans = {}\n    for item in A:\n        Ans[item] = -1\n    for i in range(26):\n        Ans[L[i]] = F[i]\n    ind = 0\n    for i in range(len(s)):\n        if s[i] not in A and s[i] not in AA:\n            continue\n        if s[i] in A:\n            s[i] = Ans[s[i]]\n        else:\n            s[i] = Ans[s[i].lower()].upper()\n    for item in s:\n        Anss += item\n    Anss += '\\n'\nsys.stdout.write(Anss)", "import operator\nimport string\n\ndef freqEnco():\n    effs = dict()\n    for c in string.ascii_lowercase:\n        effs[c] = 0\n    for c in encrypted:\n        if c.isalpha():\n            effs[c.lower()] += 1\n    freq = []\n    for c in effs:\n        freq += [(c, effs[c])]\n    return sorted(freq, key=operator.itemgetter(1, 0))\n\ndef solveCase():\n    global encrypted\n    freq = input()\n    encrypted = input()\n    freqEnc = freqEnco()\n    corres = dict()\n    for i in range(len(freqEnc)):\n        corres[freqEnc[i][0]] = freq[i]\n    decrypted = ''\n    for c in encrypted:\n        if c.isupper():\n            decrypted += corres[c.lower()].upper()\n        elif c.islower():\n            decrypted += corres[c]\n        else:\n            decrypted += c\n    print(decrypted)\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        solveCase()\nmain()"]