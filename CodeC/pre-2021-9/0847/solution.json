["T = int(input())\nfor _ in range(T):\n    (N, S, Y) = [int(c) for c in input().strip().split()]\n    V = [int(c) for c in input().strip().split()]\n    D = [int(c) * 2 - 1 for c in input().strip().split()]\n    P = [int(c) for c in input().strip().split()]\n    C = [int(c) for c in input().strip().split()]\n    lane = 0\n    t = 0\n    tCross = Y / S\n    while lane < N:\n        f1 = P[lane] + V[lane] * D[lane] * t\n        r1 = f1 - D[lane] * C[lane]\n        f2 = f1 + V[lane] * D[lane] * tCross\n        r2 = r1 + V[lane] * D[lane] * tCross\n        tWait = 0\n        if D[lane] == 1:\n            if f1 >= -10 ** (-6) and r1 <= 10 ** (-6):\n                tWait = (10 ** (-6) - r1) / V[lane]\n            elif f2 >= -10 ** (-6) and r2 <= 10 ** (-6):\n                tWait = (10 ** (-6) - r2) / V[lane] + tCross\n            elif f1 < -10 ** (-6) and r2 > 10 ** (-6):\n                tWait = tCross - (r2 - 10 ** (-6)) / V[lane]\n        elif r1 >= -10 ** (-6) and f1 <= 10 ** (-6):\n            tWait = (10 ** (-6) + r1) / V[lane]\n        elif r2 >= -10 ** (-6) and f2 <= 10 ** (-6):\n            tWait = (10 ** (-6) + r2) / V[lane] + tCross\n        elif r2 < -10 ** (-6) and f1 > 10 ** (-6):\n            tWait = tCross - (-r2 + 10 ** (-6)) / V[lane]\n        t += tWait\n        t += tCross\n        lane += 1\n    print(t)", "t = int(input())\nfor deadman in range(t):\n    ti = 0\n    sm = 1e-06\n    (n, s, y1) = [int(y) for y in input().split()]\n    v = [int(y) for y in input().split()]\n    d = [int(y) for y in input().split()]\n    d = [-1 if x == 0 else x for x in d]\n    p = [int(y) for y in input().split()]\n    c = [int(y) for y in input().split()]\n    t1 = y1 / s\n    for x in range(n):\n        car_t1 = p[x] + v[x] * d[x] * ti\n        car_t2 = car_t1 + v[x] * d[x] * t1\n        if d[x] == 1:\n            if car_t2 <= -sm:\n                ti += t1\n            elif car_t1 - c[x] >= 0:\n                ti += t1\n            else:\n                ti = (abs(p[x]) + c[x]) / v[x] + t1\n        elif d[x] == -1:\n            if car_t2 >= sm:\n                ti += t1\n            elif car_t1 + c[x] <= 0:\n                ti += t1\n            else:\n                ti = (abs(p[x]) + c[x]) / v[x] + t1\n    print(ti)", "T = int(input())\nfor _ in range(T):\n    (N, S, Y) = [int(c) for c in input().strip().split()]\n    V = [int(c) for c in input().strip().split()]\n    D = [int(c) * 2 - 1 for c in input().strip().split()]\n    P = [int(c) for c in input().strip().split()]\n    C = [int(c) for c in input().strip().split()]\n    lane = 0\n    t = 0\n    tCross = Y / S\n    while lane < N:\n        f1 = P[lane] + V[lane] * D[lane] * t\n        r1 = f1 - D[lane] * C[lane]\n        f2 = f1 + V[lane] * D[lane] * tCross\n        r2 = r1 + V[lane] * D[lane] * tCross\n        tWait = 0\n        if D[lane] == 1:\n            if f1 >= -10 ** (-6) and r1 <= 10 ** (-6):\n                tWait = (10 ** (-6) - r1) / V[lane]\n            elif f2 >= -10 ** (-6) and r2 <= 10 ** (-6):\n                tWait = (10 ** (-6) - r2) / V[lane] + tCross\n            elif f1 < -10 ** (-6) and r2 > 10 ** (-6):\n                tWait = tCross - (r2 - 10 ** (-6)) / V[lane]\n        elif r1 >= -10 ** (-6) and f1 <= 10 ** (-6):\n            tWait = (10 ** (-6) + r1) / V[lane]\n        elif r2 >= -10 ** (-6) and f2 <= 10 ** (-6):\n            tWait = (10 ** (-6) + r2) / V[lane] + tCross\n        elif r2 < -10 ** (-6) and f1 > 10 ** (-6):\n            tWait = tCross - (-r2 + 10 ** (-6)) / V[lane]\n        t += tWait\n        t += tCross\n        lane += 1\n    print(t)", "def revo(i):\n    if P[i] > 0 and D[i] is 0 or (P[i] < 0 and D[i] is 1):\n        ti = abs(P[i]) / V[i]\n        tf = (abs(P[i]) + C[i]) / V[i]\n        return [ti, tf]\n    else:\n        tf = (C[i] - abs(P[i])) / V[i]\n        return [0, tf]\n\ndef check_route(i, t):\n    (ti, tf) = revo(i)\n    ti -= t\n    tf -= t\n    tc = W / S\n    if (ti - tc) * V[i] > 1e-06 or tf < 0:\n        return tc\n    else:\n        return tf + tc\nfor K in range(int(input())):\n    (N, S, W) = list(map(int, input().split()))\n    V = list(map(int, input().split()))\n    D = list(map(int, input().split()))\n    P = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    t = 0.0\n    for i in range(N):\n        t = t + check_route(i, t)\n    print('{0:.6f}'.format(t))", "for i in range(int(input())):\n    (n, s, y) = map(int, input().split())\n    V_car = list(map(int, input().split()))\n    Dir_car = list(map(int, input().split()))\n    pos_car = list(map(int, input().split()))\n    len_car = list(map(int, input().split()))\n    t_chef = y / s\n    ti = 0\n    tolerance = 1e-06\n    for i in range(n):\n        d1 = pos_car[i] if Dir_car[i] is 0 else -pos_car[i]\n        d2 = d1 + len_car[i]\n        t_ce = d1 / V_car[i]\n        t_cf = d2 / V_car[i]\n        if d1 < 0:\n            if t_cf + tolerance > ti + t_chef:\n                ti = t_cf + t_chef\n            else:\n                ti += t_chef\n        elif t_ce > ti + t_chef + tolerance or t_cf + tolerance < ti:\n            ti += t_chef\n        else:\n            ti = t_cf + t_chef\n    print(round(ti, 6))\nexit(0)", "t = int(input())\nfor i in range(t):\n    (n, s, y) = map(int, input().split())\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    time = 0\n    x1 = 0\n    y1 = 0\n    for j in range(n):\n        if d[j] == 1:\n            x1 = p[j] + v[j] * time\n            y1 = x1 - c[j]\n            if x1 >= 0 and y1 <= -0:\n                time += abs(1e-06 - y1) / v[j] + y / s\n            elif x1 <= -1e-06:\n                if x1 + y / s * v[j] > -1e-06:\n                    time += abs(1e-06 - y1) / v[j] + y / s\n                else:\n                    time += y / s\n            else:\n                time += y / s\n        else:\n            x1 = p[j] - v[j] * time\n            y1 = x1 + c[j]\n            if x1 <= -1e-06 and y1 >= 1e-06:\n                time += abs(y1 + 1e-06) / v[j] + y / s\n            elif 1e-06 >= y1 >= -1e-06:\n                time += abs(1e-06 + y1) / v[j] + y / s\n            elif 1e-06 >= x1 >= -1e-06:\n                time += abs(1e-06 + y1) / v[j] + y / s\n            elif x1 >= 1e-06:\n                if x1 - y / s * v[j] < 1e-06:\n                    time += abs(y1 + 1e-06) / v[j] + y / s\n                else:\n                    time += y / s\n            else:\n                time += y / s\n    print(time)", "for _ in range(int(input())):\n    (n, s, y) = [int(k) for k in input().split()]\n    n = int(n)\n    s = int(s)\n    y = int(y)\n    vel = [int(i) for i in input().split()]\n    d = [int(z) for z in input().split()]\n    p = [int(w) for w in input().split()]\n    c = [int(a) for a in input().split()]\n    c1 = y / s\n    c2 = 0\n    c3 = 0\n    f = 10 ** (-6)\n    for i in range(n):\n        if d[i]:\n            s = p[i] + vel[i] * c2\n            if s < 0:\n                s = abs(s)\n                if s - vel[i] * c1 <= f:\n                    s += c[i] + f\n                    c3 += s / vel[i]\n            elif c[i] + f > s:\n                c3 += (c[i] + f - s) / vel[i]\n        else:\n            s = p[i] - vel[i] * c2\n            if s >= 0:\n                if s - vel[i] * c1 <= f:\n                    s += c[i] + f\n                    c3 += s / vel[i]\n            else:\n                s = abs(s)\n                if c[i] + f > s:\n                    c3 += (c[i] + f - s) / vel[i]\n        c3 += c1\n        c2 = c3\n    print(c3)", "for t in range(int(input())):\n    (n, s, y) = map(int, input().split())\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    final = 0\n    lelo = y / s\n    for i in range(0, n):\n        if p[i] > 0 and d[i] == 1:\n            v[i] = -v[i]\n        elif p[i] < 0 and d[i] == 0:\n            v[i] = -v[i]\n    for i in range(0, n):\n        p[i] = abs(p[i])\n    muhme = p[:]\n    for i in range(0, n):\n        time = 0\n        if muhme[i] >= 0:\n            if muhme[i] - v[i] * lelo > 1e-06:\n                time += lelo\n            elif muhme[i] - v[i] * lelo <= 1e-06 or muhme[i] <= 1e-06:\n                time += (muhme[i] + c[i]) / v[i] + lelo\n            else:\n                time += lelo\n        elif muhme[i] < 0:\n            if abs(muhme[i]) < c[i]:\n                time += (c[i] - abs(muhme[i])) / v[i] + lelo\n            else:\n                time += lelo\n        else:\n            time += lelo\n        final += time\n        for j in range(i + 1, n):\n            muhme[j] = muhme[j] - v[j] * time\n    print(final)", "for _ in range(int(input())):\n    (n, s, y) = [int(k) for k in input().split()]\n    n = int(n)\n    s = int(s)\n    y = int(y)\n    vel = [int(i) for i in input().split()]\n    d = [int(z) for z in input().split()]\n    p = [int(w) for w in input().split()]\n    c = [int(a) for a in input().split()]\n    c1 = y / s\n    c2 = 0\n    c3 = 0\n    f = 10 ** (-6)\n    for i in range(n):\n        if d[i]:\n            s = p[i] + vel[i] * c2\n            if s < 0:\n                s = abs(s)\n                if s - vel[i] * c1 <= f:\n                    s += c[i] + f\n                    c3 += s / vel[i]\n            elif c[i] + f > s:\n                c3 += (c[i] + f - s) / vel[i]\n        else:\n            s = p[i] - vel[i] * c2\n            if s >= 0:\n                if s - vel[i] * c1 <= f:\n                    s += c[i] + f\n                    c3 += s / vel[i]\n            else:\n                s = abs(s)\n                if c[i] + f > s:\n                    c3 += (c[i] + f - s) / vel[i]\n        c3 += c1\n        c2 = c3\n    print(c3)", "t = int(input())\nfor i in range(0, t):\n    (n, s, w4) = map(int, input().split(' '))\n    v4 = [int(x) for x in input().split(' ')]\n    d4 = [int(x) for x in input().split(' ')]\n    p = [int(x) for x in input().split(' ')]\n    l = [int(x) for x in input().split(' ')]\n    a = w4 / s\n    e = 0\n    for i in range(0, n):\n        if d4[i] == 0:\n            b = (a + e) * v4[i]\n            h = e * v4[i]\n            if p[i] - b > 1e-06:\n                e = e + a\n            elif p[i] + l[i] - h < -1e-06:\n                e = e + a\n            else:\n                c = (abs(p[i] + l[i]) - e * v4[i] + 1e-06) / v4[i]\n                e = c + e + a\n        else:\n            b = (a + e) * v4[i]\n            h = e * v4[i]\n            if p[i] + b < -1e-06:\n                e = e + a\n            elif p[i] - l[i] + h > 1e-06:\n                e = e + a\n            else:\n                c = (abs(p[i] - l[i]) - e * v4[i] + 1e-06) / v4[i]\n                e = c + e + a\n    print('{:.6f}'.format(e))", "for _ in range(int(input())):\n    (n, s, path) = map(int, input().split())\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    starts = list(map(int, input().split()))\n    lengths = list(map(int, input().split()))\n    tchef = path / s\n    i = 0\n    final = 0\n    while i < len(d):\n        if d[i] == 1:\n            end = starts[i] - lengths[i]\n            if starts[i] <= 0 and end <= 0:\n                treach = (0 - starts[i]) / v[i]\n                tcross = (0 - end) / v[i]\n            elif starts[i] > 0 and end < 0:\n                treach = 0\n                tcross = (0 - end) / v[i]\n            else:\n                treach = 10000000000000000000\n                tcross = 10 * treach\n        if d[i] == 0:\n            end = starts[i] + lengths[i]\n            if starts[i] >= 0 and end >= 0:\n                treach = starts[i] / v[i]\n                tcross = end / v[i]\n            elif starts[i] < 0 and end > 0:\n                treach = 0\n                tcross = end / v[i]\n            else:\n                treach = 1000000000000000000000000000000\n                tcross = 10 * treach\n        if treach > tchef and abs(starts[i]) > 1e-06:\n            final += tchef\n        else:\n            final += tchef + tcross\n        try:\n            if d[i + 1] == 1:\n                starts[i + 1] += final * v[i + 1] + 1e-06\n            else:\n                starts[i + 1] -= final * v[i + 1] + 1e-06\n        except:\n            pass\n        i += 1\n    print(final)", "t1 = int(input())\nfor i in range(0, t1):\n    (n1, s1, w1) = map(int, input().split(' '))\n    v1 = [int(x1) for x1 in input().split(' ')]\n    d1 = [int(x1) for x1 in input().split(' ')]\n    p1 = [int(x1) for x1 in input().split(' ')]\n    l1 = [int(x1) for x1 in input().split(' ')]\n    a1 = w1 / s1\n    e1 = 0\n    for i in range(0, n1):\n        if d1[i] == 0:\n            b1 = (a1 + e1) * v1[i]\n            h1 = e1 * v1[i]\n            if p1[i] - b1 > 1e-06:\n                e1 = e1 + a1\n            elif p1[i] + l1[i] - h1 < -1e-06:\n                e1 = e1 + a1\n            else:\n                c1 = (abs(p1[i] + l1[i]) - e1 * v1[i] + 1e-06) / v1[i]\n                e1 = c1 + e1 + a1\n        else:\n            b1 = (a1 + e1) * v1[i]\n            h1 = e1 * v1[i]\n            if p1[i] + b1 < -1e-06:\n                e1 = e1 + a1\n            elif p1[i] - l1[i] + h1 > 1e-06:\n                e1 = e1 + a1\n            else:\n                c1 = (abs(p1[i] - l1[i]) - e1 * v1[i] + 1e-06) / v1[i]\n                e1 = c1 + e1 + a1\n    print('{:.6f}'.format(e1))", "T = int(input())\nfor t in range(T):\n    (N, S, Y) = map(int, input().split())\n    V = list(map(int, input().split()))\n    D = list(map(int, input().split()))\n    P = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    time = 0\n    for i in range(N):\n        if D[i] == 1:\n            P[i] += V[i] * time\n        else:\n            P[i] -= V[i] * time\n        a = Y / S\n        b = abs(P[i]) / V[i]\n        t = 0\n        if D[i] == 1:\n            if P[i] >= 0:\n                if P[i] < C[i]:\n                    t += abs(P[i] - C[i] - 1e-06) / V[i]\n            elif a >= b:\n                t += abs(P[i] - C[i] - 1e-06) / V[i]\n        elif P[i] <= 0:\n            if abs(P[i]) < C[i]:\n                t += abs(P[i] + C[i] + 1e-06) / V[i]\n        elif a >= b:\n            t += abs(P[i] + C[i] + 1e-06) / V[i]\n        t += Y / S\n        time += t\n    print('%.6f' % time)", "for t in range(int(input())):\n    (n, s, y) = map(int, input().split())\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    total = 0\n    con = y / s\n    for i in range(0, n):\n        if p[i] > 0 and d[i] == 1:\n            v[i] = -v[i]\n        elif p[i] < 0 and d[i] == 0:\n            v[i] = -v[i]\n    for i in range(0, n):\n        p[i] = abs(p[i])\n    temp = p[:]\n    for i in range(0, n):\n        time = 0\n        if temp[i] >= 0:\n            if temp[i] - v[i] * con > 1e-06:\n                time += con\n            elif temp[i] - v[i] * con <= 1e-06 or temp[i] <= 1e-06:\n                time += (temp[i] + c[i]) / v[i] + con\n            else:\n                time += con\n        elif temp[i] < 0:\n            if abs(temp[i]) < c[i]:\n                time += (c[i] - abs(temp[i])) / v[i] + con\n            else:\n                time += con\n        else:\n            time += con\n        total += time\n        for j in range(i + 1, n):\n            temp[j] = temp[j] - v[j] * time\n    print(round(total, 6))", "t = int(input())\nfor i in range(t):\n    (n, s, y) = map(int, input().split())\n    V_car = list(map(int, input().split()))\n    Dir_car = list(map(int, input().split()))\n    pos_car = list(map(int, input().split()))\n    len_car = list(map(int, input().split()))\n    t_chef = y / s\n    ti = 0\n    tolerance = 1e-06\n    for i in range(n):\n        d1 = pos_car[i] if Dir_car[i] is 0 else -pos_car[i]\n        d2 = d1 + len_car[i]\n        t_ce = d1 / V_car[i]\n        t_cf = d2 / V_car[i]\n        if d1 < 0:\n            if t_cf + tolerance > ti + t_chef:\n                ti = t_cf + t_chef\n            else:\n                ti += t_chef\n        elif t_ce > ti + t_chef + tolerance or t_cf + tolerance < ti:\n            ti += t_chef\n        else:\n            ti = t_cf + t_chef\n    print(round(ti, 6))\nexit(0)", "t = int(input())\nfor _ in range(t):\n    (n, s, y) = [int(x) for x in input().strip().split(' ')]\n    t = y / s\n    v = [int(x) for x in input().strip().split(' ')]\n    d = [int(x) for x in input().strip().split(' ')]\n    p = [int(x) for x in input().strip().split(' ')]\n    c = [int(x) for x in input().strip().split(' ')]\n    curr = 0\n    for i in range(n):\n        sign = -2 * d[i] + 1\n        if curr + t < sign * p[i] / v[i] or curr > (1e-06 + c[i] + sign * p[i]) / v[i]:\n            curr += t\n        else:\n            curr = (1e-06 + c[i] + sign * p[i]) / v[i] + t\n    print(curr)", "def mp():\n    return map(int, input().split(' '))\n\ndef lst():\n    return list(mp())\nfor w in range(int(input())):\n    (n, s, d) = mp()\n    t = d / s\n    ans = 0\n    v = lst()\n    d = lst()\n    p = lst()\n    l = lst()\n    r = 0\n    to = 0\n    for i in range(n):\n        f = 0\n        if p[i] <= 0 and d[i] == 1:\n            r = -1 * p[i] / v[i]\n            to = (-1 * p[i] + l[i]) / v[i]\n        elif p[i] >= 0 and d[i] == 0:\n            r = p[i] / v[i]\n            to = (p[i] + l[i]) / v[i]\n        else:\n            ans += t\n            f = 1\n        if ans + t < r - 1e-06 and f == 0:\n            ans += t\n        elif ans >= to and f == 0:\n            ans += t\n        elif f == 0:\n            ans = t + to\n    print(ans)", "t_c = int(input())\nfor i_t_c in range(t_c):\n    (n, s, y) = map(int, input().split())\n    v = [int(x) for x in input().split()]\n    d = [int(x) for x in input().split()]\n    p = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    ti = 0\n    t = 0\n    tc = y / s\n    for i in range(n):\n        ti = 0\n        sw2 = 0\n        sw3 = 0\n        if p[i] - c[i] >= 0 and d[i] == 1 or (p[i] + c[i] <= 0 and d[i] == 0):\n            ti = tc\n        else:\n            if p[i] > 0 and p[i] - c[i] < 0 and (d[i] == 1):\n                sw2 = 1\n            elif p[i] < 0 and p[i] + c[i] > 0 and (d[i] == 0):\n                sw3 = 1\n            if sw2 != 1 and sw3 != 1:\n                if p[i] < 0:\n                    pc = -1 * p[i]\n                else:\n                    pc = p[i]\n                tv = (pc - pow(10, -6)) / v[i]\n                if tv > tc:\n                    ti = tc\n                else:\n                    tv = (pc + c[i]) / v[i]\n                    ti = tv + tc\n            else:\n                ti = (c[i] - abs(p[i])) / v[i] + tc\n        t = t + ti\n        for j in range(i + 1, n):\n            if d[j] == 0:\n                p[j] = p[j] - ti * v[j]\n            else:\n                p[j] = p[j] + ti * v[j]\n    print(t)", "t = int(input())\nwhile t:\n    numbers = [int(n) for n in input().split()]\n    v = [int(n) for n in input().split()]\n    d = [int(n) for n in input().split()]\n    p = [int(n) for n in input().split()]\n    c = [int(n) for n in input().split()]\n    time_by_person = numbers[2] / numbers[1]\n    total_time = 0\n    for i in range(numbers[0]):\n        if d[i]:\n            p[i] = p[i] + total_time * v[i]\n        else:\n            p[i] = p[i] - total_time * v[i]\n        if p[i] > 1e-06 and d[i] and (p[i] - c[i] < 0):\n            total_time = total_time + ((c[i] - p[i]) * 1.0 + 1e-06) / v[i]\n        elif p[i] < -1e-06 and (not d[i]) and (p[i] + c[i] > 0):\n            total_time = total_time + ((p[i] + c[i]) * 1.0 + 1e-06) / v[i]\n        elif abs(p[i]) < 1e-06:\n            total_time = total_time + (c[i] * 1.0 + 2 * 1e-06 - abs(p[i])) / v[i]\n        elif p[i] > 1e-06 and (not d[i]):\n            timecar = (p[i] - 1e-06) / v[i]\n            if timecar < time_by_person:\n                total_time = total_time + ((p[i] + c[i]) * 1.0 + 1e-06) / v[i]\n        elif p[i] < -1e-06 and d[i]:\n            timecar = abs(p[i] + 1e-06) / v[i]\n            if timecar < time_by_person:\n                total_time = total_time + (abs(p[i] - c[i]) * 1.0 + 1e-06) / v[i]\n        total_time += time_by_person\n    print(format(total_time, '.6f'))\n    t = t - 1", "t_c = int(input())\nfor i_t_c in range(t_c):\n    (n, s, y) = map(int, input().split())\n    v = [int(x) for x in input().split()]\n    d = [int(x) for x in input().split()]\n    p = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    ti = 0\n    t = 0\n    tc = y / s\n    for i in range(n):\n        ti = 0\n        sw2 = 0\n        sw3 = 0\n        if p[i] - c[i] >= 0 and d[i] == 1 or (p[i] + c[i] <= 0 and d[i] == 0):\n            ti = tc\n        else:\n            if p[i] > 0 and p[i] - c[i] < 0 and (d[i] == 1):\n                sw2 = 1\n            elif p[i] < 0 and p[i] + c[i] > 0 and (d[i] == 0):\n                sw3 = 1\n            if sw2 != 1 and sw3 != 1:\n                if p[i] < 0:\n                    pc = -1 * p[i]\n                else:\n                    pc = p[i]\n                tv = (pc - pow(10, -6)) / v[i]\n                if tv > tc:\n                    ti = tc\n                else:\n                    tv = (pc + pow(10, -6) + c[i]) / v[i]\n                    ti = tv + tc\n            else:\n                ti = (c[i] - abs(p[i])) / v[i] + tc\n        t = t + ti\n        for j in range(i + 1, n):\n            if d[j] == 0:\n                p[j] = p[j] - ti * v[j]\n            else:\n                p[j] = p[j] + ti * v[j]\n    print(t)", "def change_pos_of_cars(x, velocity, direction, car_pos, i, n):\n    for j in range(i + 1, n):\n        displacement = x * velocity[i]\n        if direction[i] == 1:\n            car_pos[i] = car_pos[i] + displacement\n        elif direction[i] == 0:\n            car_pos[i] = car_pos[i] - displacement\nt = int(input())\nans = []\nwhile t > 0:\n    nsy = [int(x) for x in input().split()]\n    num_lanes = nsy[0]\n    chef_speed = nsy[1]\n    lane_width = nsy[2]\n    velocity = [int(x) for x in input().split()]\n    direction = [int(x) for x in input().split()]\n    car_pos = [int(x) for x in input().split()]\n    car_length = [int(x) for x in input().split()]\n    total_time = 0\n    chef_time = lane_width / chef_speed\n    for i in range(num_lanes):\n        if direction[i] == 1:\n            car_back_pos = car_pos[i] - car_length[i]\n            if car_pos[i] < -1e-06:\n                disatance = -1e-06 - car_pos[i]\n                time = disatance / velocity[i]\n                if time > chef_time:\n                    total_time = total_time + chef_time\n                    x = chef_time\n                else:\n                    total_time = total_time + chef_time + (0 - car_back_pos) / velocity[i]\n                    x = chef_time + (0 - car_back_pos) / velocity[i]\n            elif car_back_pos > 0:\n                total_time = total_time + chef_time\n                x = chef_time\n            else:\n                total_time = total_time + chef_time + (0 - car_back_pos) / velocity[i]\n                x = chef_time + (0 - car_back_pos) / velocity[i]\n        elif direction[i] == 0:\n            car_back_pos = car_pos[i] + car_length[i]\n            if car_pos[i] > 1e-06:\n                distance = car_pos[i] - 1e-06\n                time = distance / velocity[i]\n                if time > chef_time:\n                    total_time = total_time + chef_time\n                    x = chef_time\n                else:\n                    total_time = total_time + chef_time + car_back_pos / velocity[i]\n                    x = chef_time + car_back_pos / velocity[i]\n            elif car_back_pos < 0:\n                total_time = total_time + chef_time\n                x = chef_time\n            else:\n                total_time = total_time + chef_time + car_back_pos / velocity[i]\n                x = chef_time + car_back_pos / velocity[i]\n        for j in range(i, num_lanes):\n            displacement = x * velocity[j]\n            if direction[j] == 1:\n                car_pos[j] = car_pos[j] + displacement\n            elif direction[j] == 0:\n                car_pos[j] = car_pos[j] - displacement\n    ans.append(total_time)\n    t = t - 1\nfor x in ans:\n    print(x)", "t = int(input())\nwhile t > 0:\n    (lanes, speed, width) = [int(i) for i in input().split()]\n    car_vel = [int(i) for i in input().split()]\n    car_dir = [int(i) for i in input().split()]\n    car_pos = [int(i) for i in input().split()]\n    car_len = [int(i) for i in input().split()]\n    time = 0\n    time_lane = width / speed\n    for i in range(0, lanes):\n        chef_pass = True\n        car_dis_t = time * car_vel[i]\n        car_dis = (time + time_lane) * car_vel[i]\n        if car_dir[i] == 1:\n            car_pos_f = car_pos[i] + car_dis\n            car_pos_r = car_pos_f - car_len[i]\n            car_pos_f_t = car_pos[i] + car_dis_t\n            car_pos_r_t = car_pos_f_t - car_len[i]\n            if car_pos_r_t < 0 and car_pos_f + 1e-06 >= 0:\n                chef_pass = False\n            if chef_pass == False:\n                time += (0 - car_pos_r_t) / car_vel[i]\n        else:\n            car_pos_f = car_pos[i] - car_dis\n            car_pos_r = car_pos_f + car_len[i]\n            car_pos_f_t = car_pos[i] - car_dis_t\n            car_pos_r_t = car_pos_f_t + car_len[i]\n            if car_pos_r_t > 0 and car_pos_f - 1e-06 <= 0:\n                chef_pass = False\n            if chef_pass == False:\n                time += car_pos_r_t / car_vel[i]\n        time += time_lane\n    print(round(time, 6))\n    t -= 1", "from sys import stdin, stdout\n\ndef chef_needs_wait(new_car_front_pos, cur_car_back_pos, d):\n    val = 10 ** (-6)\n    if d == 1:\n        if new_car_front_pos < -val or cur_car_back_pos > val:\n            return False\n        return True\n    else:\n        if new_car_front_pos > val or cur_car_back_pos < -val:\n            return False\n        return True\nfor _ in range(int(stdin.readline().strip())):\n    (n, s, y) = map(int, stdin.readline().strip().split())\n    v = list(map(int, stdin.readline().strip().split()))\n    d = list(map(int, stdin.readline().strip().split()))\n    p = list(map(int, stdin.readline().strip().split()))\n    c = list(map(int, stdin.readline().strip().split()))\n    ans = 0\n    late = 0\n    chef_time = 0\n    time_req = y / s\n    chef_car_dist = 10 ** (-6)\n    for i in range(n):\n        if d[i] == 1:\n            cur_car_front_pos = chef_time * v[i] + p[i]\n            cur_car_back_pos = cur_car_front_pos - c[i]\n            new_car_front_pos = time_req * v[i] + cur_car_front_pos\n            new_car_back_pos = new_car_front_pos - c[i]\n            if chef_needs_wait(new_car_front_pos, cur_car_back_pos, d[i]):\n                wait_time = (chef_car_dist - cur_car_back_pos) / v[i]\n                chef_time += wait_time\n            chef_time += time_req\n        else:\n            cur_car_front_pos = p[i] - chef_time * v[i]\n            cur_car_back_pos = cur_car_front_pos + c[i]\n            new_car_front_pos = cur_car_front_pos - time_req * v[i]\n            new_car_back_pos = new_car_front_pos + c[i]\n            if chef_needs_wait(new_car_front_pos, cur_car_back_pos, d[i]):\n                wait_time = (cur_car_back_pos - chef_car_dist) / v[i]\n                chef_time += wait_time\n            chef_time += time_req\n    print(chef_time)", "from sys import stdin, stdout\n\ndef chef_needs_wait(new_car_front_pos, cur_car_back_pos, d):\n    val = 10 ** (-6)\n    if d == 1:\n        if new_car_front_pos < -val or cur_car_back_pos > val:\n            return False\n        return True\n    else:\n        if new_car_front_pos > val or cur_car_back_pos < -val:\n            return False\n        return True\nfor _ in range(int(stdin.readline().strip())):\n    (n, s, y) = map(int, stdin.readline().strip().split())\n    v = list(map(int, stdin.readline().strip().split()))\n    d = list(map(int, stdin.readline().strip().split()))\n    p = list(map(int, stdin.readline().strip().split()))\n    c = list(map(int, stdin.readline().strip().split()))\n    ans = 0\n    late = 0\n    chef_time = 0\n    time_req = y / s\n    chef_car_dist = 10 ** (-6)\n    for i in range(n):\n        if d[i] == 1:\n            cur_car_front_pos = chef_time * v[i] + p[i]\n            cur_car_back_pos = cur_car_front_pos - c[i]\n            new_car_front_pos = time_req * v[i] + cur_car_front_pos\n            new_car_back_pos = new_car_front_pos - c[i]\n            if chef_needs_wait(new_car_front_pos, cur_car_back_pos, d[i]):\n                wait_time = (chef_car_dist - cur_car_back_pos) / v[i]\n                chef_time += wait_time\n            chef_time += time_req\n        else:\n            cur_car_front_pos = p[i] - chef_time * v[i]\n            cur_car_back_pos = cur_car_front_pos + c[i]\n            new_car_front_pos = cur_car_front_pos - time_req * v[i]\n            new_car_back_pos = new_car_front_pos + c[i]\n            if chef_needs_wait(new_car_front_pos, cur_car_back_pos, d[i]):\n                wait_time = (cur_car_back_pos + chef_car_dist) / v[i]\n                chef_time += wait_time\n            chef_time += time_req\n    print(chef_time)", "t = int(input())\nfor _ in range(t):\n    (n, s, y) = [int(i) for i in input().split()]\n    v = [int(i) for i in input().split()]\n    d = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n    c = [int(i) for i in input().split()]\n    temp = []\n    for i in range(n):\n        if p[i] < 0 and d[i] == 0 or (p[i] - c[i] > 0 and d[i] == 1):\n            temp.append((-1, -1))\n        else:\n            temp.append((abs(p[i]) / v[i], (abs(p[i]) + c[i]) / v[i]))\n    ct = y / s\n    tt = 0\n    for i in range(n):\n        if temp[i][0] == -1 or tt + ct + 1e-06 < temp[i][0] or tt + 1e-06 > temp[i][1]:\n            tt += ct\n        else:\n            tt = temp[i][1] + ct\n    print(tt)", "minGap = 1e-06\nT = int(input())\nfor test_case in range(T):\n    (N, S, Y) = map(int, input().split())\n    V = list(map(int, input().split()))\n    D = list(map(int, input().split()))\n    P = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    tConst = Y / S\n    time = 0\n    for i in range(N):\n        if D[i] == 1:\n            P[i] += time * V[i]\n            if P[i] - C[i] > minGap or (P[i] < -minGap and (abs(P[i]) - minGap) / V[i] >= tConst):\n                time += tConst\n            else:\n                time += (minGap - (P[i] - C[i])) / V[i] + tConst\n        else:\n            P[i] -= time * V[i]\n            if P[i] + C[i] < -minGap or (P[i] > minGap and (P[i] - minGap) / V[i] >= tConst):\n                time += tConst\n            else:\n                time += (minGap + (P[i] + C[i])) / V[i] + tConst\n    print('{0:.6f}'.format(time))", "t = int(input())\nfor u in range(t):\n    close = 1e-06\n    ans = 0\n    (N, S, Y) = map(int, input().split())\n    cheft = Y / S\n    V = [int(i) for i in input().split()]\n    D = [int(i) for i in input().split()]\n    P = [int(i) for i in input().split()]\n    C = [int(i) for i in input().split()]\n    for i in range(N):\n        if D[i] == 0:\n            if P[i] < 0:\n                if -P[i] - C[i] > close:\n                    ans += cheft\n                else:\n                    ans += cheft\n                    tim_car = (close + P[i] + C[i]) / V[i]\n                    ans += tim_car\n            elif P[i] > 0:\n                if P[i] > close:\n                    tim_car = (P[i] - close) / V[i]\n                    if tim_car > cheft:\n                        ans += cheft\n                    else:\n                        ans += cheft\n                        tim_car = (P[i] + close + C[i]) / V[i]\n                        ans += tim_car\n                else:\n                    ans += cheft\n                    tim_car = (P[i] + close + C[i]) / V[i]\n                    ans += tim_car\n            else:\n                ans += cheft\n                ans += (close + C[i]) / V[i]\n        elif D[i] == 1:\n            if P[i] > 0:\n                if P[i] - C[i] > close:\n                    ans += cheft\n                else:\n                    ans += cheft\n                    tim_car = (close - P[i] + C[i]) / V[i]\n                    ans += tim_car\n            elif P[i] < 0:\n                if -P[i] > close:\n                    tim_car = (-P[i] - close) / V[i]\n                    if tim_car > cheft:\n                        ans += cheft\n                    else:\n                        ans += cheft\n                        tim_car = (-P[i] + close + C[i]) / V[i]\n                        ans += tim_car\n                else:\n                    ans += cheft\n                    tim_car = (-P[i] + close + C[i]) / V[i]\n                    ans += tim_car\n            else:\n                ans += cheft\n                ans += (close + C[i]) / V[i]\n        if i != N - 1:\n            shift = ans * V[i + 1]\n            if D[i + 1] == 0:\n                P[i + 1] -= shift\n            else:\n                P[i + 1] += shift\n    print(round(ans, 6))", "t = int(input())\nfor u in range(t):\n    close = 1e-06\n    ans = 0\n    (N, S, Y) = map(int, input().split())\n    cheft = Y / S\n    V = [int(i) for i in input().split()]\n    D = [int(i) for i in input().split()]\n    P = [int(i) for i in input().split()]\n    C = [int(i) for i in input().split()]\n    for i in range(N):\n        if D[i] == 0:\n            if P[i] < 0:\n                if -P[i] - C[i] > close:\n                    ans += cheft\n                else:\n                    ans += cheft\n                    tim_car = (close + P[i] + C[i]) / V[i]\n                    ans += tim_car\n            elif P[i] > 0:\n                if P[i] > close:\n                    tim_car = (P[i] - close) / V[i]\n                    if tim_car > cheft:\n                        ans += cheft\n                    else:\n                        ans += cheft\n                        tim_car = (P[i] + close + C[i]) / V[i]\n                        ans += tim_car\n                else:\n                    ans += cheft\n                    tim_car = (P[i] + close + C[i]) / V[i]\n                    ans += tim_car\n            else:\n                ans += cheft\n                ans += (close + C[i]) / V[i]\n        elif D[i] == 1:\n            if P[i] > 0:\n                if P[i] - C[i] > close:\n                    ans += cheft\n                else:\n                    ans += cheft\n                    tim_car = (close - P[i] + C[i]) / V[i]\n                    ans += tim_car\n            elif P[i] < 0:\n                if -P[i] > close:\n                    tim_car = (-P[i] - close) / V[i]\n                    if tim_car > cheft:\n                        ans += cheft\n                    else:\n                        ans += cheft\n                        tim_car = (-P[i] + close + C[i]) / V[i]\n                        ans += tim_car\n                else:\n                    ans += cheft\n                    tim_car = (-P[i] + close + C[i]) / V[i]\n                    ans += tim_car\n            else:\n                ans += cheft\n                ans += (close + C[i]) / V[i]\n        if i != N - 1:\n            shift = ans * V[i + 1]\n            if D[i + 1] == 0:\n                P[i + 1] -= shift\n            else:\n                P[i + 1] += shift\n    print(ans)", "t = int(input().strip())\nfor i in range(t):\n    (n, s, y) = [int(x) for x in input().strip().split(' ')]\n    v = [int(x) for x in input().strip().split(' ')]\n    d = [int(x) for x in input().strip().split(' ')]\n    p = [int(x) for x in input().strip().split(' ')]\n    c = [int(x) for x in input().strip().split(' ')]\n    m = 0\n    for i in range(n):\n        if d[i] == 1:\n            p[i] += m * v[i]\n            if p[i] > 0:\n                if p[i] >= c[i]:\n                    m += y / s\n                else:\n                    m += y / s + (c[i] - p[i] + 1e-06) / v[i]\n            elif -p[i] / v[i] <= y / s:\n                m += y / s + (-p[i] + c[i] + 1e-06) / v[i]\n            else:\n                m += y / s\n        else:\n            p[i] -= m * v[i]\n            if p[i] > 0:\n                if p[i] / v[i] <= y / s:\n                    m += y / s + (p[i] + c[i] + 1e-06) / v[i]\n                else:\n                    m += y / s\n            elif p[i] <= -c[i]:\n                m += y / s\n            else:\n                m += y / s + (c[i] + p[i] + 1e-06) / v[i]\n    print('%.6f' % round(m, 6))", "n = int(input())\nfor i in range(0, n):\n    (t, s, y) = map(int, input().split(' '))\n    velocity = [int(x) for x in input().split(' ')]\n    di = [int(x) for x in input().split(' ')]\n    pos = [int(x) for x in input().split(' ')]\n    length = [int(x) for x in input().split(' ')]\n    b = y / s\n    e = 0\n    for i in range(0, t):\n        if di[i] == 0:\n            a = (b + e) * velocity[i]\n            height = e * velocity[i]\n            if pos[i] - a > 1e-06:\n                e = e + b\n            elif pos[i] + length[i] - height < -1e-06:\n                e = e + b\n            else:\n                c = (abs(pos[i] + length[i]) - e * velocity[i] + 1e-06) / velocity[i]\n                e = c + e + b\n        else:\n            a = (b + e) * velocity[i]\n            height = e * velocity[i]\n            if pos[i] + a < -1e-06:\n                e = e + b\n            elif pos[i] - length[i] + height > 1e-06:\n                e = e + b\n            else:\n                c = (abs(pos[i] - length[i]) - e * velocity[i] + 1e-06) / velocity[i]\n                e = c + e + b\n    print('{:.6f}'.format(e))", "we = int(input())\nfor i in range(0, we):\n    (n, s, w) = map(int, input().split(' '))\n    v = [int(x) for x in input().split(' ')]\n    d = [int(x) for x in input().split(' ')]\n    p = [int(x) for x in input().split(' ')]\n    l = [int(x) for x in input().split(' ')]\n    a = w / s\n    time = 0\n    for i in range(0, n):\n        if d[i] == 0:\n            b = (a + time) * v[i]\n            h = time * v[i]\n            if p[i] - b > 1e-06:\n                time = time + a\n            elif p[i] + l[i] - h < -1e-06:\n                time = time + a\n            else:\n                c = (abs(p[i] + l[i]) - time * v[i] + 1e-06) / v[i]\n                time = c + time + a\n        else:\n            b = (a + time) * v[i]\n            h = time * v[i]\n            if p[i] + b < -1e-06:\n                time = time + a\n            elif p[i] - l[i] + h > 1e-06:\n                time = time + a\n            else:\n                c = (abs(p[i] - l[i]) - time * v[i] + 1e-06) / v[i]\n                time = c + time + a\n    print('{:.6f}'.format(time))", "debug = 0\nV106 = pow(10, -6)\n\ndef currentPosOfCar(lane, time):\n    if dirOfCars[lane] == 0:\n        dirCar = -1\n    else:\n        dirCar = 1\n    currentPos = posOfCars[lane] + dirCar * velOfCars[lane] * time\n    return currentPos\n\ndef canPass(lane, time, timeNeeded):\n    currentPos = currentPosOfCar(lane, time)\n    if dirOfCars[lane] == 0:\n        dirCar = -1\n    else:\n        dirCar = 1\n    posAfter = currentPos + dirCar * velOfCars[lane] * timeNeeded\n    if dirCar == 1 and posAfter < -1 * V106:\n        return True\n    if dirCar == -1 and posAfter > V106:\n        return True\n    return False\n\ndef letCarPass(lane, time):\n    currentPos = currentPosOfCar(lane, time)\n    if dirOfCars[lane] == 1:\n        requiredPos = V106 + lenghtOfCars[lane]\n    else:\n        requiredPos = (V106 + lenghtOfCars[lane]) * -1\n    dis = abs(requiredPos - currentPos)\n    timeToPass = dis / velOfCars[lane]\n    if debug:\n        print('time to let pass', timeToPass)\n    return timeToPass\n\ndef timeToWait(lane, time):\n    currentPos = currentPosOfCar(lane, time)\n    if dirOfCars[lane] == 1 and currentPos > V106 + lenghtOfCars[lane]:\n        waitingTime = 0\n    elif dirOfCars[lane] == 0 and currentPos < (V106 + lenghtOfCars[lane]) * -1:\n        waitingTime = 0\n    elif canPass(lane, time, timeNeeded):\n        waitingTime = 0\n    else:\n        waitingTime = letCarPass(lane, time)\n    if debug:\n        print('waiting time', waitingTime)\n    return waitingTime\n\ndef timeToCross(lane, time, timeNeeded):\n    timeTaken = timeToWait(lane, time)\n    timeTaken += timeNeeded\n    return timeTaken\nT = int(input())\nfor i in range(T):\n    (N, S, Y) = map(int, input().split())\n    velOfCars = [float(x) for x in input().split()]\n    dirOfCars = [float(x) for x in input().split()]\n    posOfCars = [float(x) for x in input().split()]\n    lenghtOfCars = [float(x) for x in input().split()]\n    time = 0\n    timeNeeded = float(Y / S)\n    if debug:\n        print('time needed', timeNeeded)\n    for i in range(N):\n        time += timeToCross(i, time, timeNeeded)\n    print(float('{0:.6f}'.format(time)))", "import math\nr = int(input())\nwhile r is not 0:\n    tt = 0\n    (b, o, y1) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    d = [int(x) for x in input().split()]\n    p = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    jt = y1 / o\n    tt = 0\n    for i in range(b):\n        if d[i] == 0:\n            pos = p[i] - tt * a[i]\n            if pos >= 0 and a[i] * jt + 1e-06 > pos:\n                tt += (pos + c[i]) / a[i] + jt\n            elif pos <= 0 and math.fabs(pos) <= c[i]:\n                tt += (c[i] - math.fabs(pos)) / a[i] + jt\n            else:\n                tt += jt\n        else:\n            pos = p[i] + tt * a[i]\n            if pos <= 0 and a[i] * jt + 1e-06 > math.fabs(pos):\n                tt += (math.fabs(pos) + c[i]) / a[i] + jt\n            elif pos >= 0 and pos <= c[i]:\n                tt += (c[i] - pos) / a[i] + jt\n            else:\n                tt += jt\n    print(tt)\n    r -= 1", "t = int(input())\nfor i in range(0, t):\n    (n, s, w) = map(int, input().split(' '))\n    v = [int(x) for x in input().split(' ')]\n    d = [int(x) for x in input().split(' ')]\n    p = [int(x) for x in input().split(' ')]\n    l = [int(x) for x in input().split(' ')]\n    a = w / s\n    e = 0\n    for i in range(0, n):\n        if d[i] == 0:\n            b = (a + e) * v[i]\n            h = e * v[i]\n            if p[i] - b > 1e-06:\n                e = e + a\n            elif p[i] + l[i] - h < -1e-06:\n                e = e + a\n            else:\n                c = (abs(p[i] + l[i]) - e * v[i] + 1e-06) / v[i]\n                e = c + e + a\n        else:\n            b = (a + e) * v[i]\n            h = e * v[i]\n            if p[i] + b < -1e-06:\n                e = e + a\n            elif p[i] - l[i] + h > 1e-06:\n                e = e + a\n            else:\n                c = (abs(p[i] - l[i]) - e * v[i] + 1e-06) / v[i]\n                e = c + e + a\n    print('{:.6f}'.format(e))", "import math\nt = int(input())\nfor i in range(0, t):\n    (n, s, w) = map(int, input().split(' '))\n    v = [int(x) for x in input().split(' ')]\n    d = [int(x) for x in input().split(' ')]\n    p = [int(x) for x in input().split(' ')]\n    l = [int(x) for x in input().split(' ')]\n    a = w / s\n    e = 0\n    for i in range(0, n):\n        if d[i] == 0:\n            p[i] = p[i] - v[i] * e\n            if p[i] >= 0 and a * v[i] + 1e-06 > p[i]:\n                e = e + a + (p[i] + l[i]) / v[i]\n            elif p[i] <= 0 and math.fabs(p[i]) <= l[i]:\n                e = e + a + (l[i] - math.fabs(p[i])) / v[i]\n            else:\n                e = e + a\n        else:\n            p[i] = p[i] + e * v[i]\n            if p[i] <= 0 and v[i] * a + 1e-06 > math.fabs(p[i]):\n                e = e + a + (math.fabs(p[i]) + l[i]) / v[i]\n            elif p[i] >= 0 and p[i] <= l[i]:\n                e = e + (l[i] - p[i]) / v[i] + a\n            else:\n                e = e + a\n    print('{:.6f}'.format(e))", "T = int(input())\nfor t in range(T):\n    (N, S, Y) = map(int, input().split())\n    vel = list(map(int, input().split()))\n    dirL = list(map(int, input().split()))\n    posL = list(map(int, input().split()))\n    LenL = list(map(int, input().split()))\n    if N == 1:\n        time = Y / S\n        if dirL[0] == 1:\n            if not (posL[0] - LenL[0] > 1e-06 or (-posL[0] - 1e-06) / vel[0] > Y / S):\n                time += (-posL[0] + LenL[0] + 1e-06) / vel[0]\n        elif not (posL[0] + LenL[0] < -1e-06 or (posL[0] - 1e-06) / vel[0] > Y / S):\n            time += (posL[0] + LenL[0] + 1e-06) / vel[0]\n    else:\n        time = 0\n        for i in range(N):\n            tcr = LenL[i] / vel[i]\n            if dirL[i] == 1:\n                nfrpos = posL[i] + vel[i] * time\n                nbkpos = posL[i] - LenL[i] + vel[i] * time\n                if (-nfrpos - 1e-06) / vel[i] < Y / S and nfrpos < -1e-06:\n                    time += (-nbkpos + 1e-06) / vel[i]\n                elif nfrpos > 0 and nbkpos < 0:\n                    time += (-nbkpos + 1e-06) / vel[i]\n            else:\n                nfrpos = posL[i] - vel[i] * time\n                nbkpos = posL[i] + LenL[i] - vel[i] * time\n                if (nfrpos - 1e-06) / vel[i] < Y / S and nfrpos > 1e-06:\n                    time += (nbkpos + 1e-06) / vel[i]\n                elif nfrpos < 0 and nbkpos > 0:\n                    time += (nbkpos + 1e-06) / vel[i]\n            time += Y / S\n    print(time)", "t = int(input())\nfor asd in range(t):\n    (n, s, y) = input().split()\n    n = int(n)\n    s = int(s)\n    y = int(y)\n    vel = []\n    d = []\n    p = []\n    lengths = []\n    time = 0.0\n    vel = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    lengths = list(map(int, input().split()))\n    crosstime = y / s\n    for i in range(n):\n        currfront = 0.0\n        currback = 0.0\n        if d[i] == 1:\n            currfront = p[i] + vel[i] * time\n            currback = currfront - lengths[i]\n        else:\n            currfront = p[i] - vel[i] * time\n            currback = currfront + lengths[i]\n        if currfront * (1 if d[i] == 1 else -1) >= 0:\n            if currback * (1 if d[i] == 1 else -1) >= 0:\n                time += crosstime\n            else:\n                time += (abs(currback) + 1e-06) / vel[i]\n                time += crosstime\n        elif abs(currfront) > 1e-06:\n            arrivetime = (abs(currfront) - 1e-06) / vel[i]\n            if arrivetime > crosstime:\n                time += crosstime\n            else:\n                time += abs(currback) / vel[i]\n                time += crosstime\n        else:\n            time += (abs(currback) + 1e-06) / vel[i]\n            time += crosstime\n    print(time)", "import sys\n\ndef preprocess(n, velocities, directions, initial_positions):\n    for i in range(0, n):\n        if initial_positions[i] < 0:\n            initial_positions[i] *= -1\n            directions[i] = 0 if directions[i] == 1 else 1\n        velocities[i] *= 1 if directions[i] == 1 else -1\n    return (velocities, initial_positions)\n\ndef get_lane_time(chef_speed, lane_width, initial_position, velocity, car_length, time_lapsed_till_now):\n    lane_time = lane_width / chef_speed\n    current_start_pos = initial_position + velocity * time_lapsed_till_now\n    if velocity > 0:\n        if current_start_pos - car_length < 10 ** (-6):\n            lane_time += (car_length - current_start_pos) / velocity\n    elif current_start_pos > abs(velocity) * lane_time + 10 ** (-6) or current_start_pos + car_length < -10 ** (-6):\n        pass\n    else:\n        lane_time += (current_start_pos + car_length) / abs(velocity)\n    return lane_time\n\ndef solve(n, chef_speed, lane_width, velocities, directions, initial_positions, car_lengths):\n    ans = 0\n    (velocities, initial_positions) = preprocess(n, velocities, directions, initial_positions)\n    for i in range(0, n):\n        ans += get_lane_time(chef_speed, lane_width, initial_positions[i], velocities[i], car_lengths[i], ans)\n    return ans\nt = int(input())\nwhile t > 0:\n    (n, s, y) = [int(x) for x in input().split()]\n    velocities = [int(x) for x in input().split()]\n    directions = [int(x) for x in input().split()]\n    initial_positions = [int(x) for x in input().split()]\n    car_lengths = [int(x) for x in input().split()]\n    print(solve(n, s, y, velocities, directions, initial_positions, car_lengths))\n    t -= 1", "for _ in range(int(input())):\n    (n, s, y) = [int(x) for x in input().split()]\n    v = [int(x) for x in input().split()]\n    d = [int(x) for x in input().split()]\n    p = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    cost = 0\n    for i in range(n):\n        if d[i] == 0 and p[i] + c[i] <= 0 or (d[i] == 1 and p[i] - c[i] >= 0):\n            cost += y / s\n        elif d[i] == 1 and p[i] + cost * v[i] - c[i] > 0:\n            cost += y / s\n        elif d[i] == 1 and (p[i] * -1 - cost * v[i]) / v[i] - y / s > 1e-06:\n            cost += y / s\n        elif d[i] == 1 and (p[i] * -1 - cost * v[i]) / v[i] - y / s <= 1e-06:\n            cost += abs(p[i] + cost * v[i] - c[i]) / v[i] + y / s\n        elif d[i] == 0 and p[i] - cost * v[i] + c[i] < 0:\n            cost += y / s\n        elif d[i] == 0 and (p[i] - cost * v[i]) / v[i] - y / s > 1e-06:\n            cost += y / s\n        elif d[i] == 0 and (p[i] - cost * v[i]) / v[i] - y / s <= 1e-06:\n            cost += (p[i] - cost * v[i] + c[i]) / v[i] + y / s\n    print('%.6f' % cost)", "T = int(input())\nN = [0 for i in range(T)]\nS = [0 for i in range(T)]\nY = [0 for i in range(T)]\nV = [[] for i in range(T)]\nD = [[] for i in range(T)]\nP = [[] for i in range(T)]\nC = [[] for i in range(T)]\ntime = [0 for i in range(T)]\nfor y in range(T):\n    stri = input()\n    l = stri.split()\n    N[y] = int(l[0])\n    S[y] = int(l[1])\n    Y[y] = int(l[2])\n    stri = input()\n    l = stri.split()\n    for u in l:\n        V[y].append(int(u))\n    stri = input()\n    l = stri.split()\n    for u in l:\n        if u == '0':\n            D[y].append(1)\n        else:\n            D[y].append(-1)\n    stri = input()\n    l = stri.split()\n    for u in l:\n        P[y].append(int(u))\n    stri = input()\n    l = stri.split()\n    for u in l:\n        d = int(u) + 1e-06\n        C[y].append(d)\nfor y in range(T):\n    t = 0\n    for i in range(N[y]):\n        if P[y][i] == 0:\n            t = C[y][i] / V[y][i] + Y[y] / S[y]\n        elif P[y][i] > 0 and D[y][i] < 0 or (P[y][i] < 0 and D[y][i] > 0):\n            if abs(P[y][i]) < C[y][i]:\n                t = (C[y][i] - abs(P[y][i])) / V[y][i] + Y[y] / S[y]\n            else:\n                t = Y[y] / S[y]\n        elif (Y[y] + 1e-06) / S[y] > D[y][i] * P[y][i] / V[y][i]:\n            t = (D[y][i] * P[y][i] + C[y][i]) / V[y][i] + Y[y] / S[y]\n        else:\n            t = Y[y] / S[y]\n        time[y] = time[y] + t\n        if i != N[y] - 1:\n            P[y][i + 1] = P[y][i + 1] - D[y][i + 1] * time[y] * V[y][i + 1]\nfor f in time:\n    print(f)", "t = int(input())\ne6 = 1e-06\nwhile t:\n    (n, s, y) = [int(x) for x in input().split()]\n    v = [int(x) for x in input().split()]\n    d = [int(x) for x in input().split()]\n    p = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    time = float(y) / s\n    elapsed = 0.0\n    for i in range(n):\n        if d[i]:\n            p[i] += elapsed * v[i]\n            if p[i] - c[i] > e6:\n                elapsed += time\n            elif p[i] > -e6 and p[i] - c[i] < e6:\n                elapsed += (c[i] - p[i]) / float(v[i]) + time\n            elif p[i] + v[i] * time < -e6:\n                elapsed += time\n            elif p[i] < 0 and p[i] + v[i] * time > -e6:\n                elapsed += (abs(p[i]) + c[i]) / float(v[i]) + time\n            else:\n                raise ValueError(i)\n        else:\n            p[i] -= elapsed * v[i]\n            if p[i] + c[i] < -e6:\n                elapsed += time\n            elif p[i] < e6 and p[i] + c[i] > -e6:\n                elapsed += (c[i] - abs(p[i])) / float(v[i]) + time\n            elif p[i] - v[i] * time > e6:\n                elapsed += time\n            elif p[i] > 0 and p[i] - v[i] * time < e6:\n                elapsed += (abs(p[i]) + c[i]) / float(v[i]) + time\n            else:\n                raise ValueError(i)\n    print(elapsed)\n    t -= 1", "def update(time, lane):\n    for j in range(lane, n):\n        if direction[j] == 1:\n            position[j] += time * velo[j]\n        else:\n            position[j] -= time * velo[j]\n\ndef sol():\n    timecons = y / s\n    time = 0\n    i = 0\n    while i < n:\n        if direction[i] == 1:\n            if position[i] > 0 and position[i] - length[i] < 0:\n                time += timecons + abs(position[i] - length[i]) / velo[i]\n                update(timecons + abs(position[i] - length[i]) / velo[i], i)\n                i += 1\n            elif position[i] <= 0 and abs(position[i]) / velo[i] <= timecons:\n                time += timecons + abs(position[i] - length[i]) / velo[i]\n                update(timecons + abs(position[i] - length[i]) / velo[i], i)\n                i += 1\n            else:\n                time += timecons\n                update(timecons, i)\n                i += 1\n        elif position[i] < 0 and position[i] + length[i] > 0:\n            time += timecons + abs(position[i] + length[i]) / velo[i]\n            update(timecons + abs(position[i] + length[i]) / velo[i], i)\n            i += 1\n        elif position[i] >= 0 and abs(position[i]) / velo[i] <= timecons:\n            time += timecons + abs(position[i] + length[i]) / velo[i]\n            update(timecons + abs(position[i] + length[i]) / velo[i], i)\n            i += 1\n        else:\n            time += timecons\n            update(timecons, i)\n            i += 1\n    print(time)\nfor i in range(int(input())):\n    (n, s, y) = map(int, input().split())\n    velo = list(map(int, input().split()))\n    direction = list(map(int, input().split()))\n    position = list(map(int, input().split()))\n    for i in range(n):\n        if position[i] > 0:\n            position[i] -= pow(10, -6)\n        else:\n            position[i] += pow(10, -6)\n    length = list(map(int, input().split()))\n    sol()", "from random import randint\n\ndef mi():\n    return map(int, input().split())\n\ndef ii():\n    return int(input())\n\ndef update(time, lane):\n    for j in range(lane, n):\n        if direction[j] == 1:\n            position[j] += time * velo[j]\n        else:\n            position[j] -= time * velo[j]\n\ndef sol():\n    timecons = y / s\n    time = 0\n    i = 0\n    while i < n:\n        if direction[i] == 1:\n            if position[i] > 0 and position[i] - length[i] < 0:\n                time += timecons + abs(position[i] - length[i]) / velo[i]\n                update(timecons + abs(position[i] - length[i]) / velo[i], i)\n                i += 1\n            elif position[i] <= 0 and abs(position[i]) / velo[i] <= timecons:\n                time += timecons + abs(position[i] - length[i]) / velo[i]\n                update(timecons + abs(position[i] - length[i]) / velo[i], i)\n                i += 1\n            else:\n                time += timecons\n                update(timecons, i)\n                i += 1\n        elif position[i] < 0 and position[i] + length[i] > 0:\n            time += timecons + abs(position[i] + length[i]) / velo[i]\n            update(timecons + abs(position[i] + length[i]) / velo[i], i)\n            i += 1\n        elif position[i] >= 0 and abs(position[i]) / velo[i] <= timecons:\n            time += timecons + abs(position[i] + length[i]) / velo[i]\n            update(timecons + abs(position[i] + length[i]) / velo[i], i)\n            i += 1\n        else:\n            time += timecons\n            update(timecons, i)\n            i += 1\n    print(time)\nfor i in range(ii()):\n    (n, s, y) = mi()\n    velo = list(mi())\n    direction = list(mi())\n    position = list(mi())\n    for i in range(n):\n        if position[i] > 0:\n            position[i] -= pow(10, -6)\n        else:\n            position[i] += pow(10, -6)\n    length = list(mi())\n    sol()", "t = int(input())\nfor _ in range(t):\n    chef = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    time = 0\n    chef_time = chef[2] / chef[1]\n    for i in range(chef[0]):\n        if d[i] == 1:\n            p[i] += v[i] * time\n            if p[i] < 0:\n                time1 = abs(p[i]) / v[i]\n                time2 = (abs(p[i]) + c[i]) / v[i]\n                if time1 - chef_time >= 1e-06:\n                    time += chef_time\n                else:\n                    time += time2 + chef_time\n            elif p[i] >= 0 and p[i] - c[i] < 0:\n                time2 = abs(p[i] - c[i]) / v[i]\n                time += time2 + chef_time\n            else:\n                time += chef_time\n        else:\n            p[i] -= v[i] * time\n            if p[i] > 0:\n                time1 = p[i] / v[i]\n                time2 = (p[i] + c[i]) / v[i]\n                if time1 - chef_time >= 1e-06:\n                    time += chef_time\n                else:\n                    time += time2 + chef_time\n            elif p[i] <= 0 and p[i] + c[i] > 0:\n                time2 = (p[i] + c[i]) / v[i]\n                time += time2 + chef_time\n            else:\n                time += chef_time\n    print(time)", "t = int(input())\nfor i in range(t):\n    (N, S, Y) = map(int, input().split())\n    velocities = list(map(int, input().split()))\n    directions = list(map(int, input().split()))\n    positions = list(map(int, input().split()))\n    lengths = list(map(int, input().split()))\n    time = 0\n    for j in range(N):\n        if directions[j] == 1:\n            positions[j] += velocities[j] * time\n            if positions[j] - lengths[j] > 1e-06 or (positions[j] < 0 and -1e-06 > Y * velocities[j] / S + positions[j]):\n                time += Y / S\n            else:\n                time += (-positions[j] + lengths[j]) / velocities[j] + Y / S\n        else:\n            positions[j] -= velocities[j] * time\n            if positions[j] + lengths[j] < -1e-06 or (positions[j] > 0 and 1e-06 < -Y * velocities[j] / S + positions[j]):\n                time += Y / S\n            else:\n                time += (positions[j] + lengths[j]) / velocities[j] + Y / S\n    print(time)", "t = int(input())\nfor z in range(t):\n    (n, s, y) = [int(x) for x in input().split()]\n    v = [int(x) for x in input().split()]\n    d = [int(x) for x in input().split()]\n    p = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    tm = 0\n    ct = y / s\n    for i in range(n):\n        if d[i]:\n            if p[i] + v[i] * tm < -1e-06:\n                if v[i] * (tm + ct) + p[i] < -1e-06:\n                    tm += ct\n                else:\n                    tm += ct + abs(p[i] - c[i] + v[i] * tm) / v[i]\n            elif p[i] - c[i] + v[i] * tm > 1e-06:\n                tm += ct\n            else:\n                tm += ct + abs(p[i] + v[i] * tm - c[i]) / v[i]\n        elif p[i] - v[i] * tm > 1e-06:\n            if p[i] - v[i] * tm - v[i] * ct > 1e-06:\n                tm += ct\n            else:\n                tm += ct + (p[i] - v[i] * tm + c[i]) / v[i]\n        elif p[i] - v[i] * tm + c[i] < -1e-06:\n            tm += ct\n        else:\n            tm += ct + (p[i] - v[i] * tm + c[i]) / v[i]\n    print(tm)", "t = int(input())\nerr = pow(10, -6)\nfor _ in range(t):\n    (n, s, y) = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    d = [1 if i == '1' else -1 for i in input().split()]\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    time = 0\n    cross_time = y / s\n    for i in range(n):\n        veh_pos = p[i] + d[i] * time * v[i]\n        if d[i] == -1 and veh_pos + c[i] < err or (d[i] == 1 and veh_pos - c[i] > err):\n            time += cross_time\n        elif abs(veh_pos) / v[i] - cross_time > err and veh_pos * d[i] < err:\n            time += cross_time\n        else:\n            time += abs(veh_pos - d[i] * c[i]) / v[i] + cross_time\n    print('%f' % time)", "t = int(input())\nwhile t > 0:\n    (n, chefv, y) = map(int, input().split())\n    v = list(map(int, input().split()))\n    di = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    cl = list(map(int, input().split()))\n    totime = 0.0\n    for i in range(n):\n        if di[i] == 0:\n            di[i] = -1\n        temptime = y / chefv\n        cartime = (abs(0 - p[i]) - totime * v[i]) / v[i]\n        diff = 1e-06 / v[i]\n        pcar = p[i] + totime * v[i] * di[i]\n        if di[i] == 1 and p[i] > cl[i] or (di[i] == -1 and p[i] < -cl[i]):\n            totime += temptime\n        elif cartime + diff + cl[i] / v[i] <= 0 or cartime - diff >= temptime:\n            totime += temptime\n        else:\n            totime += temptime + cartime + cl[i] / v[i]\n    print('%.6f' % totime)\n    t -= 1", "for _ in range(int(input())):\n    (n, chef_speed, lane_length) = map(int, input().split())\n    velocity = list(map(int, input().split()))\n    direction = list(map(int, input().split()))\n    position = list(map(int, input().split()))\n    car_length = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        dist = ans * velocity[i]\n        if direction[i]:\n            position[i] += dist\n        else:\n            position[i] -= dist\n        chef_time = lane_length / chef_speed\n        if direction[i] and position[i] - car_length[i] < 0:\n            if position[i] >= 0:\n                ans += abs(position[i] - car_length[i]) / velocity[i]\n                ans += lane_length / chef_speed\n                continue\n            elif lane_length / chef_speed >= abs(position[i]) / velocity[i] or abs(position[i] + chef_time * velocity[i]) < 10 ** (-6):\n                ans += abs(position[i] - car_length[i]) / velocity[i]\n                ans += lane_length / chef_speed\n                continue\n        if direction[i] == 0 and position[i] + car_length[i] > 0:\n            if position[i] <= 0:\n                ans += (position[i] + car_length[i]) / velocity[i]\n                ans += lane_length / chef_speed\n                continue\n            elif lane_length / chef_speed >= position[i] / velocity[i] or abs(position[i] - chef_time * velocity[i]) < 10 ** (-6):\n                ans += (position[i] + car_length[i]) / velocity[i]\n                ans += lane_length / chef_speed\n                continue\n        ans += lane_length / chef_speed\n    print(ans)", "for z in range(int(input())):\n    (n, s, y) = map(int, input().split())\n    velocities = list(map(int, input().split()))\n    directions = list(map(int, input().split()))\n    pos = list(map(int, input().split()))\n    lengths = list(map(int, input().split()))\n    time = 0\n    for i in range(n):\n        if directions[i] == 1:\n            currentpos = pos[i] + time * velocities[i]\n            if currentpos <= 0:\n                if (abs(currentpos) - 10 ** (-6)) / velocities[i] > y / s:\n                    time += y / s\n                else:\n                    time += (abs(currentpos) + lengths[i] + 10 ** (-6)) / velocities[i] + y / s\n            elif currentpos <= lengths[i] + 10 ** (-6):\n                time += (lengths[i] - currentpos + 10 ** (-6)) / velocities[i] + y / s\n            else:\n                time += y / s\n        elif directions[i] == 0:\n            currentpos = pos[i] - time * velocities[i]\n            if currentpos >= 0:\n                if (currentpos - 10 ** (-6)) / velocities[i] > y / s:\n                    time += y / s\n                else:\n                    time += (abs(currentpos) + lengths[i] + 10 ** (-6)) / velocities[i] + y / s\n            elif abs(currentpos) <= lengths[i] + 10 ** (-6):\n                time += (lengths[i] + currentpos + 10 ** (-6)) / velocities[i] + y / s\n            else:\n                time += y / s\n    print(time)", "import math\nt = int(input())\nwhile t is not 0:\n    tt = 0\n    (n, s, y) = [int(x) for x in input().split()]\n    v = [int(x) for x in input().split()]\n    d = [int(x) for x in input().split()]\n    p = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    jt = y / s\n    tt = 0\n    for i in range(n):\n        if d[i] == 0:\n            pos = p[i] - tt * v[i]\n            if pos >= 0 and v[i] * jt + 1e-06 > pos:\n                tt += (pos + c[i]) / v[i] + jt\n            elif pos <= 0 and math.fabs(pos) <= c[i]:\n                tt += (c[i] - math.fabs(pos)) / v[i] + jt\n            else:\n                tt += jt\n        else:\n            pos = p[i] + tt * v[i]\n            if pos <= 0 and v[i] * jt + 1e-06 > math.fabs(pos):\n                tt += (math.fabs(pos) + c[i]) / v[i] + jt\n            elif pos >= 0 and pos <= c[i]:\n                tt += (c[i] - pos) / v[i] + jt\n            else:\n                tt += jt\n    print(tt)\n    t -= 1", "def update(index, time, arrival_time, departure_time):\n    for i in range(index, n):\n        departure_time[i] -= time\n        arrival_time[i] -= time\n\ndef arrival(n, direction, position, velocity):\n    arr_time = []\n    for car in range(n):\n        if direction[car]:\n            if position[car] + x >= 0:\n                arr_time.append(0)\n            else:\n                temp = abs(position[car] + x) / velocity[car]\n                arr_time.append(temp)\n        elif position[car] - x <= 0:\n            arr_time.append(0)\n        else:\n            temp = abs(position[car] - x) / velocity[car]\n            arr_time.append(temp)\n    return arr_time\n\ndef departure(n, direction, position, velocity, length):\n    dep_time = []\n    for car in range(n):\n        if direction[car]:\n            if position[car] - length[car] + x >= 0:\n                dep_time.append(0)\n            else:\n                temp = abs(position[car] - length[car] + x) / velocity[car]\n                dep_time.append(temp)\n        elif position[car] + length[car] - x <= 0:\n            dep.time.append(0)\n        else:\n            temp = abs(position[car] + length[car] - x) / velocity[car]\n            dep_time.append(temp)\n    return dep_time\n\ndef totaltime(arrival_time, departure_time, chef_time):\n    total_time = 0\n    for car in range(n):\n        if arrival_time[car] <= 0 and departure_time[car] <= 0:\n            total_time += chef_time\n            update(car + 1, chef_time, arrival_time, departure_time)\n        elif arrival_time[car] <= 0:\n            total_time += departure_time[car] + chef_time\n            update(car + 1, departure_time[car] + chef_time, arrival_time, departure_time)\n        elif chef_time < arrival_time[car]:\n            total_time += chef_time\n            update(car + 1, chef_time, arrival_time, departure_time)\n        elif chef_time > arrival_time[car]:\n            total_time += departure_time[car] + chef_time\n            update(car + 1, departure_time[car] + chef_time, arrival_time, departure_time)\n    return total_time\nx = 1e-06\nfor _ in range(int(input())):\n    (n, s, y) = map(int, input().split())\n    vel = list(map(int, input().split()))\n    dirn = list(map(int, input().split()))\n    pos = list(map(int, input().split()))\n    leng = list(map(int, input().split()))\n    c_time = y / s\n    arrival_time = arrival(n, dirn, pos, vel)\n    departure_time = departure(n, dirn, pos, vel, leng)\n    print(totaltime(arrival_time, departure_time, c_time))", "T = int(input())\nfor _ in range(T):\n    (N, S, Y) = map(int, input().split())\n    V = list(map(int, input().split()))\n    D = list(map(int, input().split()))\n    P = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    person_time = Y / S\n    total_time = 0\n    total_time_prev = 0\n    for i in range(N):\n        if D[i] == 0:\n            V[i] = -V[i]\n    for i in range(N):\n        if P[i] == 0:\n            total_time += person_time\n            total_time += C[i] / V[i]\n        elif D[i] == 1 and P[i] - C[i] > 10 ** (-6):\n            total_time += person_time\n        elif D[i] == 0 and P[i] + C[i] < -10 ** (-6):\n            total_time += person_time\n        elif D[i] == 1 and P[i] + person_time * V[i] < -10 ** (-6):\n            total_time += person_time\n        elif D[i] == 0 and P[i] + person_time * V[i] > 10 ** (-6):\n            total_time += person_time\n        elif D[i] == 1 and P[i] > 0 and (P[i] - C[i] - 10 ** (-6) < 0):\n            total_time += person_time\n            total_time += (C[i] - P[i] + 10 ** (-6)) / abs(V[i])\n        elif D[i] == 0 and P[i] < 0 and (P[i] + C[i] + 10 ** (-6) > 0):\n            total_time += person_time\n            total_time += (C[i] + P[i] + 10 ** (-6)) / abs(V[i])\n        else:\n            total_time += person_time\n            total_time += (abs(P[i]) + C[i] + 10 ** (-6)) / abs(V[i])\n        for j in range(N):\n            P[j] = P[j] + (total_time - total_time_prev) * V[j]\n        total_time_prev = total_time\n    print('%.6f' % total_time)", "for _ in range(int(input())):\n    a = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    time = 0\n    chefT = a[2] / a[1]\n    for i in range(a[0]):\n        if d[i] == 1 and p[i] > 0 and (time * v[i] + p[i] - c[i] > 10 ** (-6)):\n            time += chefT\n        else:\n            if p[i] < 0 and d[i] == 1:\n                p[i] = -1 * p[i]\n            B = p[i] - (time + chefT) * v[i]\n            A = p[i] - time * v[i]\n            if B >= 10 ** (-6) or A + c[i] <= -10 ** (-6):\n                time += chefT\n            else:\n                time += chefT + (A + c[i]) / v[i]\n    print(time)", "for _ in range(int(input())):\n    t_total = 0\n    (n, s, y) = map(int, input().split())\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t_chef = y / s\n    for i in range(n):\n        if p[i] > 0 and d[i] == 0:\n            current_pos = p[i] - v[i] * t_total\n        elif p[i] <= 0 and d[i] == 1:\n            current_pos = p[i] + v[i] * t_total\n        elif p[i] > 0 and d[i] == 1:\n            current_pos = p[i] + v[i] * t_total\n        elif p[i] <= 0 and d[i] == 0:\n            current_pos = p[i] - v[i] * t_total\n        t_car = abs(current_pos) / v[i]\n        if d[i] == 0 and current_pos < 0 and (abs(current_pos) >= c[i]) or (d[i] == 1 and current_pos > 0 and (current_pos >= c[i])):\n            t_total += t_chef\n            continue\n        if d[i] == 0 and current_pos < 0 and (abs(current_pos) < c[i]):\n            t_total += t_chef + (c[i] + current_pos) / v[i]\n            continue\n        if d[i] == 1 and current_pos > 0 and (current_pos < c[i]):\n            t_total += t_chef + (c[i] - current_pos) / v[i]\n            continue\n        if t_chef < t_car:\n            t_total += t_chef\n            continue\n        t_total += t_chef + (abs(current_pos) + c[i] + pow(10, -6)) / v[i]\n    print('%.6f' % t_total)", "t = int(input())\nfor aaa in range(t):\n    (n, s, y) = map(int, input().split())\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    for i in range(n):\n        d[i] = 2 * d[i] - 1\n    vc = y / s\n    t1 = [0 for i in range(2)]\n    t = [[0, 0] for i in range(n)]\n    for i in range(n):\n        t[i][0] = (-d[i] * p[i] - 10 ** (-6)) / v[i]\n        t[i][1] = t[i][0] + c[i] / v[i] + 2 * (10 ** (-6) / v[i])\n    cur = 0.0\n    for i in range(n):\n        if cur >= t[i][1] or cur + vc <= t[i][0]:\n            cur = cur + vc\n        else:\n            cur = t[i][1] + vc\n    print('%.6f' % cur)", "def increment_distances(pos, inc, dir, idx, velo):\n    for j in range(idx + 1, n):\n        if dir[j] == 0:\n            pos[j] -= velo[j] * inc\n        else:\n            pos[j] += velo[j] * inc\nt = int(input())\nwhile t > 0:\n    ip = input().split()\n    n = int(ip[0])\n    s = int(ip[1])\n    y = int(ip[2])\n    chef_time = y / s\n    inc = 0\n    elap_time = 0\n    midi = 10 ** (-6)\n    velo = list(map(int, input().split()))\n    dir = list(map(int, input().split()))\n    pos = list(map(int, input().split()))\n    length = list(map(int, input().split()))\n    for i in range(n):\n        if dir[i] == 0 and pos[i] + length[i] <= 0 or (dir[i] == 1 and pos[i] - length[i] >= 0):\n            inc = chef_time\n            elap_time += inc\n        elif pos[i] == 0:\n            inc = length[i] / velo[i] + chef_time\n            elap_time += inc\n        elif dir[i] == 0:\n            if pos[i] - chef_time * velo[i] > midi and pos[i] > 0:\n                inc = chef_time\n                elap_time += inc\n            elif pos[i] < 0 and pos[i] + length[i] > 0:\n                rem = pos[i] + length[i]\n                inc = chef_time + rem / velo[i]\n                elap_time += inc\n            else:\n                inc = chef_time + (pos[i] + length[i]) / velo[i]\n                elap_time += inc\n        elif abs(pos[i]) - velo[i] * chef_time > midi and pos[i] < 0:\n            inc = chef_time\n            elap_time += inc\n        elif pos[i] > 0 and pos[i] - length[i] < 0:\n            rem = length[i] - pos[i]\n            inc = chef_time + rem / velo[i]\n            elap_time += inc\n        else:\n            inc = chef_time + (abs(pos[i]) + length[i]) / velo[i]\n            elap_time += inc\n        increment_distances(pos, inc, dir, i, velo)\n    print('%.6lf' % elap_time)\n    t -= 1", "t = int(input())\nwhile t:\n    t -= 1\n    (n, s, y) = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    ans = 0\n    req = y * 1.0 / s\n    for i in range(n):\n        di = -1\n        if d[i] == 1:\n            di = 1\n        oldhead = p[i] + ans * 1.0 * v[i] * di\n        newhead = oldhead + req * 1.0 * v[i] * di\n        oldtail = oldhead - c[i] * di\n        newtail = newhead - c[i] * di\n        if oldtail <= 0 and oldtail >= -1e-06 or (oldtail >= 0 and oldtail <= 1e-06):\n            now = 1e-06 - oldtail * di\n            if now < 0:\n                now = -now\n            ans += now / v[i]\n        elif newhead > 0 and oldhead < 0 or (newhead < 0 and oldhead > 0) or (newtail > 0 and oldtail < 0) or (newtail < 0 and oldtail > 0) or (newhead <= 0 and newhead >= -1e-06) or (newhead >= 0 and newhead <= 1e-06) or (newtail <= 0 and newtail >= -1e-06) or (newtail >= 0 and newtail <= 1e-06) or (oldhead <= 0 and oldhead >= -1e-06) or (oldhead >= 0 and oldhead <= 1e-06) or (oldhead < 0 and oldtail > 0) or (oldtail < 0 and oldhead > 0):\n            if oldtail < 0:\n                oldtail = -oldtail\n            oldtail += 1e-06\n            ans += oldtail * 1.0 / v[i]\n        ans += req\n    print(ans)", "import math\nimport sys\nfor t in range(int(input())):\n    finalTime = 0\n    nsy = list(map(int, input().rstrip().split(' ')))\n    n = int(nsy[0])\n    s = int(nsy[1])\n    y = int(nsy[2])\n    v = list(map(int, input().rstrip().split(' ')))\n    d = list(map(int, input().rstrip().split(' ')))\n    p = list(map(int, input().rstrip().split(' ')))\n    c = list(map(int, input().rstrip().split(' ')))\n    for i in range(0, n):\n        curTime = 0\n        if p[i] >= 0 and p[i] <= c[i] and (d[i] == 1):\n            curTime = (c[i] - p[i]) / v[i]\n        elif p[i] <= 0 and p[i] + c[i] >= 0 and (d[i] == 0):\n            curTime = (c[i] + p[i]) / v[i]\n        elif p[i] <= 0 and d[i] == 1 or (p[i] >= 0 and d[i] == 0):\n            if abs(p[i]) / v[i] <= y / s or abs(p[i]) - v[i] * (y / s) <= 1e-06:\n                curTime = (abs(p[i]) + c[i]) / v[i]\n        j = i + 1\n        while j <= n - 1:\n            if p[j] <= 0 and d[j] == 1:\n                p[j] = p[j] + v[j] * (curTime + y / s)\n            elif p[j] <= 0 and d[j] == 0:\n                p[j] = p[j] - v[j] * (curTime + y / s)\n            elif p[j] >= 0 and d[j] == 1:\n                p[j] = p[j] + v[j] * (curTime + y / s)\n            elif p[j] >= 0 and d[j] == 0:\n                p[j] = p[j] - v[j] * (curTime + y / s)\n            j += 1\n        finalTime += curTime\n    print(finalTime + y / s * n)", "for _ in range(int(input())):\n    (n, s, y) = map(int, input().split())\n    t = 0\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    for i in range(n):\n        if d[i]:\n            if p[i] > 0 and p[i] - c[i] - 1e-06 >= 0:\n                t += y / s\n            elif p[i] > 0 and p[i] - c[i] == 0:\n                t += y / s + 1e-06 / v[i]\n            elif p[i] > 0 and p[i] - c[i] - 1e-06 < 0:\n                t += y / s + abs(p[i] - c[i] - 1e-06) / v[i]\n            elif abs(p[i]) / v[i] <= y / s:\n                t += y / s + (abs(p[i]) + c[i] + 1e-06) / v[i]\n            else:\n                t += y / s\n        elif p[i] < 0 and p[i] + c[i] + 1e-06 <= 0:\n            t += y / s\n        elif p[i] < 0 and p[i] + c[i] == 0:\n            t += y / s + 1e-06 / v[i]\n        elif p[i] < 0 and p[i] + c[i] + 1e-06 > 0:\n            t += y / s + (p[i] + c[i] + 1e-06) / v[i]\n        elif p[i] / v[i] <= y / s:\n            t += y / s + (p[i] + c[i] + 1e-06) / v[i]\n        else:\n            t += y / s\n        if i < n - 1 and d[i + 1]:\n            p[i + 1] += t * v[i + 1]\n        elif i < n - 1:\n            p[i + 1] -= t * v[i + 1]\n    print(round(t, 6))", "import math\nt = int(input())\nwhile t != 0:\n    (n, s, y) = map(int, input().split(' '))\n    v = list(map(int, input().split(' ')))\n    d = list(map(int, input().split(' ')))\n    p = list(map(int, input().split(' ')))\n    c = list(map(int, input().split(' ')))\n    tim = 0\n    tem = y / s\n    i = 0\n    while i < n:\n        T1 = (abs(p[i]) - 1e-06) / abs(v[i])\n        T2 = (abs(p[i]) + c[i] + 1e-06) / abs(v[i])\n        if T1 - tim > tem or (p[i] < 0 and d[i] == 0) or (p[i] > 0 and d[i] == 1):\n            tim = tim + tem\n        elif T2 <= tim:\n            tim = tim + tem\n        else:\n            tim = T2 + tem\n        i = i + 1\n    print(tim)\n    t = t - 1", "t = int(input())\nfor i in range(t):\n    (n, s, y) = map(int, input().split())\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    temp = 1e-06\n    time = 0\n    man = y / s\n    for j in range(n):\n        if d[j] == 0:\n            ub = p[j] - time * v[j]\n            lb = ub + c[j]\n            if ub < -temp and lb < -temp:\n                time = time + man\n                continue\n            if ub <= 0 and lb >= 0:\n                time = time + man + abs(lb) / v[j] + temp / v[j]\n                continue\n            if ub <= temp and ub >= 0:\n                time = time + man + ub / v[j] + c[j] / v[j] + temp / v[j]\n                continue\n            if lb > 0 and lb <= temp:\n                time = time + man + abs(lb) / v[j] + temp / v[j]\n                continue\n            if lb <= 0 and lb >= -temp:\n                time = time + man + (temp - abs(lb)) / v[j]\n                continue\n            if ub < -temp and lb > temp:\n                time = time + man + abs(lb) / v[j] + temp / v[j]\n                continue\n            if ub > temp and lb > temp:\n                xy = ub - temp\n                xy = xy / v[j]\n                ff = xy - man\n                if ff > 0:\n                    time = time + man\n                else:\n                    time = time + man + ub / v[j] + c[j] / v[j] + temp / v[j]\n                continue\n        else:\n            ub = p[j] + time * v[j]\n            lb = ub - c[j]\n            if ub > temp and lb > temp:\n                time = time + man\n                continue\n            if ub >= 0 and lb <= 0:\n                time = time + man + abs(lb) / v[j] + temp / v[j]\n                continue\n            if ub >= temp and ub <= 0:\n                time = time + man - ub / v[j] + c[j] / v[j] + temp / v[j]\n                continue\n            if lb < 0 and lb > -temp:\n                time = time + man + abs(lb) / v[j]\n                continue\n            if lb >= 0 and lb <= temp:\n                time = time + man + (temp - abs(lb)) / v[j]\n                continue\n            if ub > temp and lb < -temp:\n                time = time + man + abs(lb) / v[j] + temp / v[j]\n                continue\n            if ub < -temp and lb < -temp:\n                xy = -ub - temp\n                xy = xy / v[j]\n                ff = xy - man\n                if ff > 0:\n                    time = time + man\n                else:\n                    time = time + man - ub / v[j] + c[j] / v[j] + temp / v[j]\n                continue\n    print(time)", "T = int(input())\n\ndef Pt(P0, Vi, Di, t):\n    if Di == 0:\n        return P0 - Vi * t\n    return P0 + Vi * t\nfor _ in range(T):\n    (N, S, Y) = map(int, input().split())\n    V = list(map(int, input().split()))\n    D = list(map(int, input().split()))\n    P = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    wt = 0\n    dt = Y / S\n    for i in range(N):\n        t = Y * i / S + wt\n        pt = Pt(P[i], V[i], D[i], t)\n        if D[i] == 1:\n            if pt - C[i] < 0 and (not (pt < 0 and pt + dt * V[i] < -1e-06)):\n                wt += abs(pt - C[i]) / V[i]\n        elif pt + C[i] > 0 and (not (pt > 0 and pt - dt * V[i] > 1e-06)):\n            wt += abs(pt + C[i]) / V[i]\n    print(Y * N / S + wt)", "t = int(input())\nfor testcase in range(t):\n    (n, s, y) = list(map(int, input().split(' ')))\n    vlist = list(map(int, input().split(' ')))\n    dlist = list(map(int, input().split(' ')))\n    plist = list(map(int, input().split(' ')))\n    clist = list(map(int, input().split(' ')))\n    time = 0.0\n    tlane = y / s\n    for i in range(n):\n        if dlist[i] == 1:\n            if plist[i] + vlist[i] * (time + tlane) < -1e-06 or plist[i] + vlist[i] * time - clist[i] > 1e-06:\n                time += tlane\n            else:\n                pnew = plist[i] + vlist[i] * time\n                time += (clist[i] - pnew + 1e-06) / vlist[i]\n                time += tlane\n        elif plist[i] - vlist[i] * (time + tlane) > 1e-06 or plist[i] - vlist[i] * time + clist[i] < -1e-06:\n            time += tlane\n        else:\n            pnew = plist[i] - vlist[i] * time\n            time += (clist[i] + pnew + 1e-06) / vlist[i]\n            time += tlane\n    print('{0:.6f}'.format(time))", "t = int(input())\nfor q in range(0, t):\n    var = [int(w) for w in input().split()]\n    n = var[0]\n    s = var[1]\n    y = var[2]\n    v = [int(w) for w in input().split()]\n    d = [int(w) for w in input().split()]\n    p = [int(w) for w in input().split()]\n    c = [int(w) for w in input().split()]\n    timen = y * n / s\n    time1 = y / s\n    timet = 0\n    ti = []\n    to = []\n    p_p = 1e-06\n    p_n = -1e-06\n    for i in range(0, n):\n        if d[i] == 1:\n            if p[i] - c[i] >= p_p:\n                ti.append(9999999999)\n                to.append(-999999999)\n            elif p[i] >= p_n and p[i] - c[i] <= p_p:\n                ti.append(0)\n                to.append(abs(c[i] - p[i]) / v[i])\n            else:\n                ti.append((0 - p[i]) / v[i])\n                to.append((c[i] + abs(p[i])) / v[i])\n        if d[i] == 0:\n            if p[i] + c[i] <= p_n:\n                ti.append(9999999999)\n                to.append(-999999999)\n            elif p[i] <= p_p and p[i] + c[i] >= p_n:\n                ti.append(0)\n                to.append(abs(p[i] + c[i]) / v[i])\n            else:\n                ti.append(p[i] / v[i])\n                to.append((c[i] + p[i]) / v[i])\n    for i in range(0, n):\n        if timet > to[i] or timet + time1 < ti[i]:\n            timet = timet + time1\n        else:\n            timet = to[i] + time1 + p_p / v[i]\n    print(timet)", "def sameside(a, b):\n    if a > 1e-06 and b > 1e-06 or (a < -1e-06 and b < -1e-06):\n        return True\n    else:\n        return False\ntest = int(input())\nwhile test > 0:\n    (n, s, y) = map(int, input().split())\n    v = [int(x) for x in input().split()]\n    d = [int(x) for x in input().split()]\n    p = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    passtime = y / s\n    totime = 0\n    (fone, bone, ftwo, btwo) = (0, 0, 0, 0)\n    for i in range(n):\n        temptime = totime + passtime\n        if d[i] == 0:\n            fone = p[i] - v[i] * totime\n            bone = fone + c[i]\n            ftwo = p[i] - v[i] * temptime\n            btwo = ftwo + c[i]\n        else:\n            fone = p[i] + v[i] * totime\n            bone = fone - c[i]\n            ftwo = p[i] + v[i] * temptime\n            btwo = ftwo - c[i]\n        if sameside(fone, ftwo) and sameside(bone, btwo) and sameside(fone, bone):\n            totime += passtime\n        else:\n            totime += abs(bone) / v[i]\n            totime += passtime\n    print(totime)\n    test = test - 1", "for _ in range(int(input())):\n    (n, s, yy) = map(int, input().split())\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    t = yy / s\n    ans = 0\n    for i in range(n):\n        if d[i] == 1:\n            dis = v[i] * ans\n            y[i] += dis\n            start = y[i]\n            last = y[i] - l[i]\n            if last >= 0:\n                ans += t\n            elif start > 0:\n                dd = abs(last)\n                ans += dd / v[i]\n                ans += t\n            elif start >= -1e-06:\n                ans += l[i] / v[i]\n                ans += t\n            else:\n                df = abs(start) - 1e-06\n                tf = df / v[i]\n                dl = abs(last)\n                tl = dl / v[i]\n                if tf > t:\n                    ans += t\n                else:\n                    ans += tl\n                    ans += t\n        else:\n            dis = v[i] * ans\n            y[i] -= dis\n            start = y[i]\n            last = y[i] + l[i]\n            if last <= 0:\n                ans += t\n            elif start < 0:\n                dd = last\n                ans += dd / v[i]\n                ans += t\n            elif start <= 1e-06:\n                ans += l[i] / v[i]\n                ans += t\n            else:\n                df = start - 1e-06\n                tf = df / v[i]\n                dl = last\n                tl = dl / v[i]\n                if tf > t:\n                    ans += t\n                else:\n                    ans += tl\n                    ans += t\n    print(ans)", "for t0 in range(int(input())):\n    (N, S, Y) = map(int, input().split())\n    V = list(map(int, input().split()))\n    D = list(map(int, input().split()))\n    P = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    b_P = []\n    for i in range(N):\n        if D[i] == 1:\n            b_P.append(P[i] - C[i])\n        else:\n            b_P.append(P[i] + C[i])\n    (t, t_wc) = (0, Y / S)\n    for i in range(N):\n        if D[i] == 1:\n            P[i] += t * V[i]\n            b_P[i] = P[i] - C[i]\n            if b_P[i] >= 1e-06:\n                t += t_wc\n            else:\n                t_c = -P[i] / V[i]\n                if t_c <= t_wc:\n                    t += t_wc + (-b_P[i] + 1e-06) / V[i]\n                else:\n                    t += t_wc\n        if D[i] == 0:\n            P[i] -= t * V[i]\n            b_P[i] = P[i] + C[i]\n            if b_P[i] <= -1e-06:\n                t += t_wc\n            else:\n                t_c = P[i] / V[i]\n                if t_c <= t_wc:\n                    t += t_wc + (b_P[i] + 1e-06) / V[i]\n                else:\n                    t += t_wc\n    print('%.6f' % t)", "import math\nt = int(input())\nwhile t != 0:\n    (n, s, y) = map(int, input().split(' '))\n    v = list(map(int, input().split(' ')))\n    d = list(map(int, input().split(' ')))\n    p = list(map(int, input().split(' ')))\n    c = list(map(int, input().split(' ')))\n    tim = 0\n    time1 = y / s\n    i = 0\n    while i < n:\n        timec1 = (abs(p[i]) - 1e-06) / abs(v[i])\n        timec2 = (abs(p[i]) + c[i] + 1e-06) / abs(v[i])\n        if timec1 - tim > time1 or (p[i] < 0 and d[i] == 0) or (p[i] > 0 and d[i] == 1):\n            tim = tim + time1\n        elif timec2 <= tim:\n            tim = tim + time1\n        else:\n            tim = timec2 + time1\n        i = i + 1\n    print(tim)\n    t = t - 1", "T = int(input())\nfor test_case in range(T):\n    (N, S, Y) = [int(n) for n in input().split(' ')]\n    V = [int(n) for n in input().split(' ')]\n    D = [int(n) for n in input().split(' ')]\n    P = [int(n) for n in input().split(' ')]\n    C = [int(n) for n in input().split(' ')]\n    T_elapsed = 0\n    for lane in range(N):\n        if D[lane]:\n            C_min = P[lane] - C[lane] + V[lane] * T_elapsed\n            C_max = P[lane] + Y / S * V[lane] + V[lane] * T_elapsed\n        else:\n            C_min = P[lane] - Y / S * V[lane] - V[lane] * T_elapsed\n            C_max = P[lane] + C[lane] - V[lane] * T_elapsed\n        if 0 < C_min or 0 > C_max:\n            T_elapsed = T_elapsed + Y / S\n            continue\n        elif D[lane]:\n            T_elapsed = T_elapsed + Y / S + abs(C_min - 0) / V[lane] + 1e-05\n        else:\n            T_elapsed = T_elapsed + Y / S + abs(C_max - 0) / V[lane] + 1e-05\n    print(T_elapsed)", "for _ in range(int(input())):\n    (n, s, y) = [int(c) for c in input().split()]\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    cheftime = y / s\n    time = ans = 0\n    r = 10 ** (-6)\n    for i in range(n):\n        if d[i]:\n            dist = p[i] + v[i] * time\n            if dist < 0:\n                dist = abs(dist)\n                if dist - v[i] * cheftime <= r:\n                    dist += c[i] + r\n                    ans += dist / v[i]\n            elif c[i] + r > dist:\n                ans += (c[i] + r - dist) / v[i]\n        else:\n            dist = p[i] - v[i] * time\n            if dist >= 0:\n                if dist - v[i] * cheftime <= r:\n                    dist += c[i] + r\n                    ans += dist / v[i]\n            else:\n                dist = abs(dist)\n                if c[i] + r > dist:\n                    ans += (c[i] + r - dist) / v[i]\n        ans += cheftime\n        time = ans\n    print(ans)", "test = int(input())\nwhile test > 0:\n    test -= 1\n    (n, s, y) = map(int, input().split())\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    time = y / s\n    ctime = 0\n    for i in range(n):\n        if d[i] == 1:\n            dist = p[i] + ctime * v[i] + 1e-06\n            dist1 = dist - c[i] - 1e-06\n            if dist1 > 0:\n                ctime += time\n            elif dist > 0 and dist1 < 0:\n                ctime += time + abs(dist1) / v[i]\n            else:\n                t = abs(dist) / v[i]\n                if time < t:\n                    ctime += time\n                else:\n                    ctime += time + abs(dist1) / v[i]\n        else:\n            dist = p[i] - ctime * v[i] - 1e-06\n            dist1 = dist + c[i] + 1e-06\n            if dist1 < 0:\n                ctime += time\n            elif dist < 0 and dist1 < 0:\n                ctime += time + dist1 / v[i]\n            else:\n                t = dist / v[i]\n                if time < t:\n                    ctime += time\n                else:\n                    ctime += time + dist1 / v[i]\n    print(ctime)", "T = int(input())\nfor t in range(0, T):\n    (n, s, y) = list(map(float, input().split()))\n    n = int(n)\n    tt = y / s\n    v = list(map(float, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    ct = 0\n    vt = 0\n    for i in range(0, n):\n        if d[i] == 1:\n            ss = p[i] + ct * v[i]\n            ct += tt\n            if ss >= 0 and ss <= c[i]:\n                ct = ct + (-ss + c[i]) / v[i] + 1e-07\n            elif ss < 0:\n                ss = -ss\n                vt = ss / v[i]\n                if vt <= tt:\n                    ct = ct + (ss + c[i]) / v[i] + 1e-07\n        else:\n            ss = p[i] - ct * v[i]\n            ct += tt\n            if ss <= 0 and ss >= -c[i]:\n                ct = ct + (ss + c[i]) / v[i] + 1e-07\n            elif ss > 0:\n                vt = ss / v[i]\n                if vt <= tt:\n                    ct = ct + (ss + c[i]) / v[i] + 1e-07\n    print('%.6f' % ct)", "t = input()\nfor i in range(int(t)):\n    (n, s, y) = map(int, input().split())\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t = 0.0\n    for i in range(n):\n        if d[i] == 0 and p[i] >= 0 and (t < (abs(p[i]) + c[i]) / v[i]) or (d[i] == 1 and p[i] <= 0 and (t < (abs(p[i]) + c[i]) / v[i])):\n            if y / s < (abs(p[i]) - 1e-06) / v[i] - t:\n                t = t + y / s\n            else:\n                m = (abs(p[i]) + c[i]) / v[i] + y / s - t\n                t = t + m\n        else:\n            t = t + y / s\n    print('{0:.6f}'.format(t))", "for _ in range(int(input())):\n    (n, s, y) = [int(x) for x in input().split()]\n    vs = [int(x) for x in input().split()]\n    ds = [int(x) for x in input().split()]\n    ps = [int(x) for x in input().split()]\n    cs = [int(x) for x in input().split()]\n    t = 0\n    interval = y / s\n    for (v, d, p, c) in zip(vs, ds, ps, cs):\n        if d == 1:\n            (t1, t2) = (-p / v, (c - p) / v)\n        else:\n            (t1, t2) = (p / v, (p + c) / v)\n        if t + interval + 1e-06 / v <= t1:\n            t += interval\n        else:\n            t = max(t2 + 1e-06 / v, t) + interval\n    print(round(t, 6))", "for _ in range(int(input())):\n    (N, S, Y) = [int(x) for x in input().split()]\n    V = [int(x) for x in input().split()]\n    D = [int(x) for x in input().split()]\n    P = [int(x) for x in input().split()]\n    C = [int(x) for x in input().split()]\n    chefTime = Y / S\n    totalTime = 0\n    t = 0\n    diff = 1e-06\n    for i in range(N):\n        if D[i] == 0:\n            if P[i] < 0 and abs(P[i]) > C[i]:\n                t = chefTime\n                totalTime += t\n            elif P[i] < 0 and C[i] - abs(P[i]) > 0:\n                t = (C[i] - abs(P[i])) / V[i] + chefTime\n                totalTime += t\n            elif P[i] >= 0 and Y * V[i] > (P[i] - diff) * S:\n                t = (C[i] + P[i] - diff) / V[i] + chefTime\n                totalTime += t\n            else:\n                t = chefTime\n                totalTime += t\n        elif D[i] == 1:\n            if P[i] > 0 and P[i] > C[i]:\n                t = chefTime\n                totalTime += t\n            elif P[i] > 0 and C[i] - P[i] > 0:\n                t = (C[i] - P[i]) / V[i] + chefTime\n                totalTime += t\n            elif P[i] <= 0 and Y * V[i] > (abs(P[i]) - diff) * S:\n                t = (C[i] + abs(P[i]) - diff) / V[i] + chefTime\n                totalTime += t\n            else:\n                t = chefTime\n                totalTime += t\n        for j in range(i + 1, N):\n            if D[j] == 0:\n                P[j] -= t * V[j]\n            else:\n                P[j] += t * V[j]\n    print('{0:.6f}'.format(totalTime))", "for _ in range(int(input())):\n    (N, S, Y) = [int(x) for x in input().split()]\n    V = [int(x) for x in input().split()]\n    D = [int(x) for x in input().split()]\n    P = [int(x) for x in input().split()]\n    C = [int(x) for x in input().split()]\n    chefTime = Y / S\n    totalTime = 0\n    t = 0\n    diff = 1e-06\n    for i in range(N):\n        if D[i] == 0:\n            if P[i] < 0 and abs(P[i]) > C[i]:\n                totalTime += chefTime\n                t = chefTime\n            elif P[i] < 0 and C[i] - abs(P[i]) > 0:\n                totalTime += (C[i] - abs(P[i])) / V[i] + chefTime\n                t = (C[i] - abs(P[i])) / V[i] + chefTime\n            elif P[i] >= 0 and Y * V[i] > (P[i] - diff) * S:\n                totalTime += (C[i] + P[i] - diff) / V[i] + chefTime\n                t = (C[i] + P[i] - diff) / V[i] + chefTime\n            else:\n                totalTime += chefTime\n                t = chefTime\n        elif D[i] == 1:\n            if P[i] > 0 and P[i] > C[i]:\n                totalTime += chefTime\n                t = chefTime\n            elif P[i] > 0 and C[i] - P[i] > 0:\n                totalTime += (C[i] - P[i]) / V[i] + chefTime\n                t = (C[i] - P[i]) / V[i] + chefTime\n            elif P[i] <= 0 and Y * V[i] > (abs(P[i]) - diff) * S:\n                totalTime += (C[i] + abs(P[i]) - diff) / V[i] + chefTime\n                t = (C[i] + abs(P[i]) - diff) / V[i] + chefTime\n            else:\n                totalTime += chefTime\n                t = chefTime\n        for j in range(i + 1, N):\n            if D[j] == 0:\n                P[j] -= t * V[j]\n            else:\n                P[j] += t * V[j]\n    print('{0:.6f}'.format(totalTime))", "from decimal import Decimal\nt = int(input())\nfor i in range(t):\n    (n, s, y) = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    cost = 0\n    for j in range(n):\n        pi = -p[j] if d[j] == 1 else p[j]\n        wait = Decimal(pi) / Decimal(v[j]) - cost\n        epsilon = Decimal(1e-06) / Decimal(v[j])\n        if -Decimal(l[j]) / Decimal(v[j]) <= wait - epsilon < Decimal(y) / Decimal(s):\n            cost += wait + Decimal(l[j]) / Decimal(v[j])\n        cost += Decimal(y) / Decimal(s)\n    print(cost)", "t = int(input())\nfor i in range(t):\n    x = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t1 = x[2] / x[1]\n    s = 0\n    for i in range(x[0]):\n        T = 0\n        if d[i] == 0:\n            k = p[i] - v[i] * s\n            if k >= 0:\n                t2 = k / v[i]\n                if t2 > t1:\n                    if v[i] * (t2 - t1) <= 1e-06:\n                        t2 = (k + c[i]) / v[i]\n                        T = t2 + t1\n                    else:\n                        T = t1\n                else:\n                    t2 = (k + c[i]) / v[i]\n                    T = t2 + t1\n            elif k <= 0 < k + c[i]:\n                t2 = (k + c[i]) / v[i]\n                T = t1 + t2\n            else:\n                T = t1\n        else:\n            k = p[i] + v[i] * s\n            if k <= 0:\n                t2 = abs(k) / v[i]\n                if t2 > t1:\n                    if v[i] * (t2 - t1) <= 1e-06:\n                        t2 = abs(k - c[i]) / v[i]\n                        T = t2 + t1\n                    else:\n                        T = t1\n                else:\n                    t2 = abs(k - c[i]) / v[i]\n                    T = t2 + t1\n            elif k >= 0 > k - c[i]:\n                t2 = abs(k - c[i]) / v[i]\n                T = t1 + t2\n            else:\n                T = t1\n        s = s + T\n    print('%.8f' % s)", "for t in range(int(input())):\n    (N, S, Y) = [int(x) for x in input().split()]\n    V = [int(x) for x in input().split()]\n    D = [int(x) for x in input().split()]\n    P = [int(x) for x in input().split()]\n    C = [int(x) for x in input().split()]\n    cheflane = Y / S\n    (cartime, chefbest) = ([], 0)\n    mind = 10 ** (-6)\n    for x in range(N):\n        (t0, t1) = (0, 0)\n        if D[x] == 0:\n            if P[x] - mind >= 0:\n                t0 = (P[x] - mind) / V[x]\n            if P[x] + mind + C[x] >= 0:\n                t1 = (P[x] + mind + C[x]) / V[x]\n        elif D[x] == 1:\n            if P[x] + mind <= 0:\n                t0 = (P[x] + mind) / V[x]\n            if P[x] - mind - C[x] <= 0:\n                t1 = (P[x] - mind - C[x]) / V[x]\n        cartime.append((abs(t0), abs(t1)))\n    for x in range(N):\n        if chefbest + cheflane < cartime[x][0]:\n            chefbest += cheflane\n        elif chefbest < cartime[x][1]:\n            chefbest += cartime[x][1] - chefbest + cheflane\n        else:\n            chefbest += cheflane\n    print(chefbest)", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    (n, s, y) = list(map(int, input().split(' ')))\n    a = []\n    for i in range(4):\n        a.append([int(j) for j in input().split()])\n    result = 0\n    for i in range(n):\n        v = 0\n        end = 0\n        if a[1][i] == 0:\n            v = -a[0][i]\n            end = a[2][i] + a[3][i]\n        else:\n            v = a[0][i]\n            end = a[2][i] - a[3][i]\n        st = (0 - a[2][i]) / v\n        ed = (0 - end) / v\n        if st - (result + y / s) > 1e-06 / a[0][i]:\n            result = result + y / s\n        elif result - ed > 1e-06 / a[0][i]:\n            result = result + y / s\n        else:\n            result = ed + y / s\n    print(result)", "t = int(input())\nmin1 = 1e-06\nfor _ in range(t):\n    (n, s, y) = map(int, input().split())\n    V = list(map(int, input().split()))\n    D = list(map(int, input().split()))\n    Dir = [2 * D[i] - 1 for i in range(n)]\n    P = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    (time, dt) = (0, round(y / s, 6))\n    for i in range(n):\n        (tc1, tc2) = (-P[i] * Dir[i] / V[i], (C[i] - P[i] * Dir[i]) / V[i])\n        if tc1 - dt < time + min1 < tc2:\n            time = tc2 + dt\n        else:\n            time += dt\n    print('%.6f' % round(time, 6))", "import sys\ninput = sys.stdin.readline\nt = int(input())\neps = 1e-06\nfor _ in range(t):\n    (n, s, y) = map(int, input().split())\n    V = [int(x) for x in input().split()]\n    D = [int(x) for x in input().split()]\n    P = [int(x) for x in input().split()]\n    C = [int(x) for x in input().split()]\n    for i in range(n):\n        if D[i] == 0:\n            V[i] *= -1\n        else:\n            C[i] *= -1\n    ct = y / s\n    t = 0\n    for i in range(n):\n        t1 = -P[i] / V[i]\n        t2 = -(P[i] + C[i]) / V[i]\n        if t2 + eps >= t and t + ct >= t1 - eps:\n            t = t2 + ct + eps\n        else:\n            t = t + ct\n    print(t)", "import sys\nimport math\nmod = 1000000007\nmtime = 10 ** (-6)\n\ndef nospace(l):\n    ans = ''.join((str(i) for i in l))\n    return ans\nt = int(input())\nfor tt in range(t):\n    (n, s, y) = map(int, sys.stdin.readline().split(' '))\n    v = list(map(int, sys.stdin.readline().split(' ')))\n    d = list(map(int, sys.stdin.readline().split(' ')))\n    p = list(map(int, sys.stdin.readline().split(' ')))\n    c = list(map(int, sys.stdin.readline().split(' ')))\n    time = 0\n    fd = y / s\n    for i in range(n):\n        if d[i] == 0:\n            pos = p[i] - v[i] * time\n            if c[i] + pos < 0:\n                time += fd\n            else:\n                time += fd\n                if pos < 0:\n                    time += (c[i] + pos) / v[i]\n                elif pos / v[i] <= fd + mtime:\n                    time += (c[i] + pos) / v[i]\n        else:\n            pos = p[i] + v[i] * time\n            if pos - c[i] > 0:\n                time += fd\n            else:\n                time += fd\n                if pos > 0:\n                    time += (c[i] - pos) / v[i]\n                elif abs(pos / v[i]) <= fd + mtime:\n                    time += (c[i] - pos) / v[i]\n    print(time)", "for i in range(int(input())):\n    (n, s, y) = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t1 = y / s\n    tsfr = 0\n    for j in range(n):\n        add = 0\n        if d[j] == 0:\n            if p[j] - tsfr * v[j] > pow(10, -6) and (p[j] - tsfr * v[j] - pow(10, -6)) / v[j] < t1:\n                add += (p[j] - tsfr * v[j] + c[j]) / v[j]\n            elif p[j] - tsfr * v[j] <= pow(10, -6) and p[j] - tsfr * v[j] > 0:\n                add += (p[j] - tsfr * v[j] + c[j]) / v[j]\n            elif p[j] - tsfr * v[j] <= 0 and p[j] - tsfr * v[j] + c[j] > 0:\n                add += (p[j] - tsfr * v[j] + c[j]) / v[j]\n        elif p[j] + tsfr * v[j] < -pow(10, -6) and (abs(p[j] + tsfr * v[j]) - pow(10, -6)) / v[j] < t1:\n            add += (abs(p[j] + tsfr * v[j]) + c[j]) / v[j]\n        elif p[j] + tsfr * v[j] >= -pow(10, -6) and p[j] + tsfr * v[j] < 0:\n            add += abs(p[j] + tsfr * v[j] - c[j]) / v[j]\n        elif p[j] + tsfr * v[j] >= 0 and p[j] + tsfr * v[j] - c[j] < 0:\n            add += abs(p[j] + tsfr * v[j] - c[j]) / v[j]\n        tsfr = tsfr + t1 + add\n    print(tsfr)", "for _ in range(int(input())):\n    t_total = 0\n    (n, s, y) = map(int, input().split())\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t_chef = y / s\n    for i in range(n):\n        if p[i] > 0 and d[i] == 0:\n            current_pos = p[i] - v[i] * t_total\n        elif p[i] <= 0 and d[i] == 1:\n            current_pos = p[i] + v[i] * t_total\n        elif p[i] > 0 and d[i] == 1:\n            current_pos = p[i] + v[i] * t_total\n        elif p[i] <= 0 and d[i] == 0:\n            current_pos = p[i] - v[i] * t_total\n        t_car = abs(current_pos) / v[i]\n        if d[i] == 0 and current_pos < 0 and (abs(current_pos) >= c[i]) or (d[i] == 1 and current_pos > 0 and (current_pos >= c[i])):\n            t_total += t_chef\n            continue\n        if d[i] == 0 and current_pos < 0 and (abs(current_pos) < c[i]):\n            t_total += t_chef + (c[i] + current_pos) / v[i]\n            continue\n        if d[i] == 1 and current_pos > 0 and (current_pos < c[i]):\n            t_total += t_chef + (c[i] - current_pos) / v[i]\n            continue\n        if t_chef < t_car:\n            t_total += t_chef\n            continue\n        t_total += t_chef + (abs(current_pos) + c[i] + pow(10, -6)) / v[i]\n    print('%.6f' % t_total)", "for t in range(0, int(input())):\n    (n, s, y) = map(int, input().split())\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    time = 0.0\n    for i in range(0, n):\n        x = v[i] * time\n        if d[i] == 0:\n            p[i] = p[i] - x\n        else:\n            p[i] = p[i] + x\n        time = time + y / s\n        if d[i] == 0:\n            if p[i] + c[i] > 0:\n                dist = v[i] * (y / s)\n                temp = p[i] - dist\n                if temp <= 10 ** (-6):\n                    time = time + (p[i] + c[i]) / v[i]\n        elif p[i] - c[i] < 0:\n            dist = v[i] * (y / s)\n            temp = p[i] + dist\n            if temp >= -10 ** (-6):\n                time = time + -(p[i] - c[i]) / v[i]\n    print(time)", "T = int(input())\nfor a in range(T):\n    inp = list(map(int, input().split()))\n    N = inp[0]\n    S = inp[1]\n    Y = inp[2]\n    velocity = list(map(int, input().split()))\n    direction = list(map(int, input().split()))\n    position = list(map(int, input().split()))\n    length = list(map(int, input().split()))\n    cross = Y / S\n    time = 0\n    for i in range(N):\n        if direction[i] == 1:\n            front = position[i] + time * velocity[i]\n            back = front - length[i]\n            if back >= 0:\n                time += cross\n            elif front <= 0:\n                if (-1 * front - 10 ** (-6)) / velocity[i] > cross:\n                    time += cross\n                else:\n                    time += cross + -1 * back / velocity[i]\n            elif front >= 0 and back <= 0:\n                time += -1 * back / velocity[i] + cross\n        else:\n            front = position[i] - time * velocity[i]\n            back = front + length[i]\n            if back <= 0:\n                time += cross\n            elif front >= 0:\n                if (front - 10 ** (-6)) / velocity[i] > cross:\n                    time += cross\n                else:\n                    time += cross + back / velocity[i]\n            elif front <= 0 and back >= 0:\n                time += back / velocity[i] + cross\n    print(time)", "test = int(input())\nfor i in range(test):\n    (N, S, Y) = map(int, input().split())\n    speedlist = list(map(int, input().split()))\n    dirlist = list(map(int, input().split()))\n    poslist = list(map(int, input().split()))\n    lengthlist = list(map(int, input().split()))\n    totaltime = 0\n    time_required = Y / S\n    for i in range(N):\n        if dirlist[i] == 0:\n            arr_time = poslist[i] / speedlist[i]\n        else:\n            arr_time = poslist[i] / speedlist[i] * -1\n        dep_time = arr_time + lengthlist[i] / speedlist[i]\n        wait_time = 0\n        if arr_time >= 0 and totaltime + time_required >= arr_time:\n            wait_time = dep_time - totaltime + pow(10, -6)\n            if wait_time < 0:\n                wait_time = 0\n        totaltime += time_required + wait_time\n    print(totaltime)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, s, y) = map(int, input().split())\n    lane_time = y / s\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    ts = 0\n    for i in range(n):\n        if d[i] == 1:\n            add_dist = v[i] * ts\n            pos = p[i] - c[i] + add_dist + 1e-06\n            dist = abs(pos)\n            if pos >= 0:\n                ts += lane_time\n            elif pos + c[i] <= 0:\n                dist1 = abs(pos + c[i])\n                if dist1 / v[i] <= lane_time:\n                    time_taken = dist / v[i]\n                    ts += lane_time + time_taken\n                else:\n                    ts += lane_time\n            else:\n                time_taken = dist / v[i]\n                ts += lane_time + time_taken\n        else:\n            add_dist = v[i] * ts\n            pos = p[i] + c[i] - add_dist - 1e-06\n            dist = abs(pos)\n            if pos <= 0:\n                ts += lane_time\n            elif pos - c[i] >= 0:\n                dist1 = abs(pos - c[i])\n                if dist1 / v[i] <= lane_time:\n                    time_taken = dist / v[i]\n                    ts += lane_time + time_taken\n                else:\n                    ts += lane_time\n            else:\n                time_taken = dist / v[i]\n                ts += lane_time + time_taken\n    print('{:.6f}'.format(round(ts, 6)))", "t = int(input())\nwhile t:\n    (n, s, y) = map(int, input().split())\n    V = list(map(float, input().split()))\n    D = list(map(int, input().split()))\n    P = list(map(float, input().split()))\n    C = list(map(float, input().split()))\n    for i in range(n):\n        if D[i] == 0:\n            D[i] = -1\n    start = []\n    end = []\n    for i in range(n):\n        if D[i] == -1:\n            start.append(-(P[i] - 1e-06) / (V[i] * D[i]))\n            end.append(-(P[i] + C[i] + 1e-06) / (V[i] * D[i]))\n        elif D[i] == 1:\n            start.append(-(P[i] + 1e-06) / (V[i] * D[i]))\n            end.append(-(P[i] - C[i] - 1e-06) / (V[i] * D[i]))\n    time = float(0)\n    for i in range(n):\n        crosstime = time + float(y) / float(s)\n        if time >= start[i] and time <= end[i] or (crosstime >= start[i] and crosstime <= end[i]) or (start[i] >= time and start[i] <= crosstime) or (end[i] >= time and end[i] <= crosstime):\n            time = end[i] + float(y) / float(s)\n        else:\n            time = crosstime\n    time = format(time, '.6f')\n    print(time)\n    t = t - 1", "for i in range(int(input())):\n    (n, s, width) = list(map(int, input().split()))\n    time = 0\n    v_sp = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    for t in range(n):\n        if d[t] == 0:\n            d[t] = -1\n    icoor = list(map(int, input().split()))\n    lenc = list(map(int, input().split()))\n    for o in range(n):\n        ncoor = icoor[o] + d[o] * time * v_sp[o]\n        if d[o] == -1:\n            if ncoor >= -lenc[o] - 1e-06 and ncoor <= width * v_sp[o] / s + 1e-06:\n                time += (lenc[o] + ncoor + 1e-06) / v_sp[o]\n        elif ncoor <= lenc[o] + 1e-06 and ncoor >= -width * v_sp[o] / s - 1e-06:\n            time += (lenc[o] - ncoor + 1e-06) / v_sp[o]\n        time += width / s\n    print(time)", "moe = 10 ** (-6)\nfor t in range(int(input())):\n    (n, s, y) = [int(i) for i in input().split()]\n    v = [int(i) for i in input().split()]\n    d = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n    c = [int(i) for i in input().split()]\n    time = 0\n    ttc = y / s\n    for i in range(n):\n        if d[i] == 0:\n            d[i] = -1\n        x1 = -1 * p[i] / (v[i] * d[i])\n        x2 = -1 * (p[i] - c[i] * d[i]) / (v[i] * d[i])\n        if time > x2 + moe or time + ttc < x1 - moe:\n            time += ttc\n        else:\n            time = x2 + moe + ttc\n    print(time)", "def fun(index, time):\n    for i in range(index, n):\n        dep_time[i] -= time\n        arr_time[i] -= time\nfor _ in range(int(input())):\n    (n, s, y) = map(int, input().split())\n    velocity = list(map(int, input().split()))\n    direction = list(map(int, input().split()))\n    position = list(map(int, input().split()))\n    length = list(map(int, input().split()))\n    chef_time = y / s\n    x = 1e-06\n    arr_time = []\n    dep_time = []\n    total_time = 0\n    for car in range(n):\n        if direction[car]:\n            if position[car] + x >= 0:\n                arr_time.append(0)\n            else:\n                temp = abs(position[car] + x) / velocity[car]\n                arr_time.append(temp)\n        elif position[car] - x <= 0:\n            arr_time.append(0)\n        else:\n            temp = abs(position[car] - x) / velocity[car]\n            arr_time.append(temp)\n    for car in range(n):\n        if direction[car]:\n            if position[car] - length[car] + x >= 0:\n                dep_time.append(0)\n            else:\n                temp = abs(position[car] - length[car] + x) / velocity[car]\n                dep_time.append(temp)\n        elif position[car] + length[car] - x <= 0:\n            dep.time.append(0)\n        else:\n            temp = abs(position[car] + length[car] - x) / velocity[car]\n            dep_time.append(temp)\n    for car in range(n):\n        if arr_time[car] <= 0 and dep_time[car] <= 0:\n            total_time += chef_time\n            fun(car + 1, chef_time)\n        elif arr_time[car] <= 0:\n            total_time += dep_time[car] + chef_time\n            fun(car + 1, dep_time[car] + chef_time)\n        elif chef_time < arr_time[car]:\n            total_time += chef_time\n            fun(car + 1, chef_time)\n        elif chef_time > arr_time[car]:\n            total_time += dep_time[car] + chef_time\n            fun(car + 1, dep_time[car] + chef_time)\n    print(total_time)", "for i in range(int(input())):\n    (n, s, y) = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t1 = y / s\n    tsfr = 0\n    for j in range(n):\n        add = 0\n        if d[j] == 0:\n            if p[j] - tsfr * v[j] > pow(10, -6) and (p[j] - tsfr * v[j] - pow(10, -6)) / v[j] < t1:\n                add += (p[j] - tsfr * v[j] + c[j]) / v[j]\n            elif p[j] - tsfr * v[j] <= pow(10, -6) and p[j] - tsfr * v[j] > 0:\n                add += (p[j] - tsfr * v[j] + c[j]) / v[j]\n            elif p[j] - tsfr * v[j] <= 0 and p[j] - tsfr * v[j] + c[j] > 0:\n                add += (p[j] - tsfr * v[j] + c[j]) / v[j]\n        elif p[j] + tsfr * v[j] < -pow(10, -6) and (abs(p[j] + tsfr * v[j]) - pow(10, -6)) / v[j] < t1:\n            add += (abs(p[j] + tsfr * v[j]) + c[j]) / v[j]\n        elif p[j] + tsfr * v[j] >= -pow(10, -6) and p[j] + tsfr * v[j] < 0:\n            add += abs(p[j] + tsfr * v[j] - c[j]) / v[j]\n        elif p[j] + tsfr * v[j] >= 0 and p[j] + tsfr * v[j] - c[j] < 0:\n            add += abs(p[j] + tsfr * v[j] - c[j]) / v[j]\n        tsfr = tsfr + t1 + add\n    print(tsfr)", "import sys\n\ndef collision(carvelocity, carlength, carstartpos, cheftime, crosstime):\n    margin = 10 ** (-6)\n    p_front_start = carstartpos + carvelocity * crosstime\n    if carvelocity < 0:\n        p_back_start = p_front_start + carlength + margin\n    else:\n        p_back_start = p_front_start - carlength - margin\n    p_front_end = p_front_start + cheftime * carvelocity\n    p_back_end = p_back_start + cheftime * carvelocity\n    if p_back_start * p_front_end > 0:\n        return cheftime\n    else:\n        waittime = abs(p_back_start / carvelocity)\n        return waittime + cheftime\nt = int(sys.stdin.readline())\nfor case in range(t):\n    (n, s, y) = [int(i) for i in sys.stdin.readline().strip().split()]\n    v = [int(i) for i in sys.stdin.readline().strip().split()]\n    d = [int(i) for i in sys.stdin.readline().strip().split()]\n    p = [int(i) for i in sys.stdin.readline().strip().split()]\n    c = [int(i) for i in sys.stdin.readline().strip().split()]\n    crosstime = 0\n    cheftime = y / s\n    for lane in range(n):\n        carlength = c[lane]\n        carstartpos = p[lane]\n        carvelocity = v[lane]\n        if d[lane] == 0:\n            carvelocity *= -1\n        crosstime += collision(carvelocity, carlength, carstartpos, cheftime, crosstime)\n    print(format(crosstime, '.6f'))", "t = int(input(''))\nfor i in range(t):\n    (n, s, w) = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    tym = w / s\n    t1 = 0\n    for i in range(n):\n        if d[i] == 1 and p[i] - c[i] < 1e-06 or (d[i] == 0 and p[i] + c[i] > 1e-06):\n            if d[i] == 1:\n                p[i] = p[i] + v[i] * t1\n            if d[i] == 0:\n                p[i] = p[i] - v[i] * t1\n        if d[i] == 1 and p[i] - c[i] >= 1e-06 or (d[i] == 0 and p[i] + c[i] <= 1e-06):\n            t1 += tym\n            continue\n        if d[i] == 1:\n            l = p[i] - c[i]\n            if p[i] < 0:\n                t2 = -1 * p[i] / v[i]\n                if tym - t2 < -1e-06:\n                    t1 += tym\n                else:\n                    t2 = -1 * l / v[i]\n                    t1 = t1 + t2 + tym\n            if p[i] >= 0:\n                t2 = (c[i] - p[i]) / v[i]\n                t1 = tym + t2 + t1\n        if d[i] == 0:\n            l = p[i] + c[i]\n            if p[i] > 0:\n                t2 = p[i] / v[i]\n                if tym - t2 < -1e-06:\n                    t1 += tym\n                else:\n                    t2 = l / v[i]\n                    t1 = t1 + t2 + tym\n            if p[i] <= 0:\n                t2 = (c[i] + p[i]) / v[i]\n                t1 = tym + t2 + t1\n    print('{0:.6f}'.format(t1))", "def time1(n, s, y, v, d, p, c, i):\n    tr = y / s\n    time = 0\n    if d[i] == 0:\n        if p[i] >= 0:\n            tc = p[i] / v[i]\n            if tc - 1e-06 > tr:\n                time = tr\n            else:\n                time = tr + (p[i] + c[i]) / v[i]\n        elif p[i] + 1e-06 > -1 * c[i]:\n            dist = c[i] + p[i]\n            time = tr + dist / v[i]\n        else:\n            time = tr\n    elif p[i] <= 0:\n        tc = -1 * p[i] / v[i]\n        if tc - 1e-06 > tr:\n            time = tr\n        else:\n            time = tr + (-1 * p[i] + c[i]) / v[i]\n    elif p[i] + 1e-06 <= c[i]:\n        dist = c[i] - p[i]\n        time = tr + dist / v[i]\n    else:\n        time = tr\n    return time\nt = int(input())\nfor iq in range(0, t):\n    (n, s, y) = map(int, input().strip().split())\n    v = list(map(int, input().strip().split()))\n    d = list(map(int, input().strip().split()))\n    p = list(map(int, input().strip().split()))\n    c = list(map(int, input().strip().split()))\n    total = 0\n    for ijk in range(0, n):\n        q = time1(n, s, y, v, d, p, c, ijk)\n        total += q\n        for j in range(ijk + 1, n):\n            if d[j] == 0:\n                p[j] -= q * v[j]\n            else:\n                p[j] += q * v[j]\n    print(total)", "for t in range(int(input())):\n    (n, s, y) = map(int, input().split())\n    v = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    chef_time = y / s\n    count = 0\n    for i in range(n):\n        a = count * v[i]\n        if d[i] == 1:\n            p[i] += a\n            head = p[i]\n            tail = p[i] - c[i]\n            if tail >= 0:\n                count += chef_time\n            elif head < 0:\n                new_temp = abs(p[i]) / v[i]\n                if new_temp - chef_time > 1e-06:\n                    count += chef_time\n                else:\n                    count += chef_time + new_temp + c[i] / v[i]\n            elif head > 0 and tail < 0:\n                count += abs(tail) / v[i] + chef_time\n            elif head == 0:\n                count += c[i] / v[i] + chef_time\n        else:\n            p[i] -= a\n            head = p[i]\n            tail = p[i] + c[i]\n            if head > 0:\n                new_temp = abs(p[i]) / v[i]\n                if new_temp - chef_time > 1e-06:\n                    count += chef_time\n                else:\n                    count += chef_time + new_temp + c[i] / v[i]\n            elif head < 0 and tail > 0:\n                count += abs(tail) / v[i] + chef_time\n            elif tail <= 0:\n                count += chef_time\n            elif head == 0:\n                count += c[i] / v[i] + chef_time\n    print(count)", "import math\nt = int(input())\na = pow(10, -6)\nfor _ in range(t):\n    chef = 0\n    wait = 0\n    che = []\n    (n, s, y) = [int(x) for x in input().split()]\n    v = [int(x) for x in input().split()]\n    d = [int(x) for x in input().split()]\n    d = [-1 if x == 0 else x for x in d]\n    p = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    t = y / s\n    for i in range(n):\n        f = sum(che)\n        posi_t1 = p[i] + v[i] * f * d[i]\n        posi_t2 = posi_t1 + v[i] * t * d[i]\n        if d[i] == 1:\n            if posi_t1 < -a and posi_t2 <= -a:\n                che.append(t)\n            elif posi_t1 - c[i] >= a:\n                che.append(t)\n            else:\n                wait = (abs(p[i]) + c[i]) / v[i] - sum(che)\n                che.append(t + wait)\n        elif posi_t1 > a and posi_t2 >= a:\n            che.append(t)\n        elif posi_t1 + c[i] <= -a:\n            che.append(t)\n        else:\n            wait = (abs(p[i]) + c[i]) / v[i] - f\n            che.append(t + wait)\n    print(sum(che))"]