["n = int(input())\nl = list(map(int, input().split()))\nq = int(input())\nfor _ in range(q):\n    cnt = 0\n    k = int(input())\n    for i in range(n):\n        for j in range(i, n):\n            if min(l[i:j + 1]) == k:\n                cnt += 1\n    print(cnt)", "n = int(input())\nl = list(map(int, input().split()))\nq = int(input())\nfor _ in range(q):\n    cnt = 0\n    k = int(input())\n    for i in range(n):\n        for j in range(i, n):\n            if min(l[i:j + 1]) == k:\n                cnt += 1\n    print(cnt)", "n = int(input())\nl = list(map(int, input().split()))\nk = []\nfor _ in range(int(input())):\n    m = int(input())\n    c = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if min(l[i:j]) == m:\n                c += 1\n    print(c)", "n = int(input())\narr = [int(x) for x in input().split(' ')]\nfor __ in range(int(input())):\n    count = 0\n    val = int(input())\n    for i in range(n):\n        for j in range(i, n):\n            sub_arr = arr[i:j + 1]\n            if min(sub_arr) == val:\n                count += 1\n    print(count)", "n = int(input())\narr = [int(x) for x in input().split(' ')]\nfor __ in range(int(input())):\n    count = 0\n    val = int(input())\n    for i in range(n):\n        for j in range(i, n):\n            sub_arr = arr[i:j + 1]\n            if min(sub_arr) == val:\n                count += 1\n    print(count)", "n = int(input())\na = list(map(int, input().split()))\nfor k in range(int(input())):\n    cnt = 0\n    val = int(input())\n    for i in range(n):\n        for j in range(i, n):\n            sb = a[i:j + 1]\n            if min(sb) == val:\n                cnt += 1\n    print(cnt)", "n = int(input())\nal = [int(num) for num in input().split(' ', n - 1)]\nfor k in range(int(input())):\n    cnt = 0\n    val = int(input())\n    for i in range(n):\n        for j in range(i, n):\n            sb = al[i:j + 1]\n            if min(sb) == val:\n                cnt += 1\n    print(cnt)", "def getCount(n, ar, lo):\n    count = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            sub = ar[i:j + 1]\n            if min(sub) == lo:\n                count += 1\n    return count\nnOEl = int(input())\naOEl = [int(x) for x in input().split()]\nqueC = int(input())\nwhile queC != 0:\n    k = int(input())\n    print(getCount(nOEl, aOEl, k))\n    queC -= 1", "def getCount(n, ar, lo):\n    count = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            sub = ar[i:j + 1]\n            if min(sub) == lo:\n                count += 1\n    return count\nnOEl = int(input())\naOEl = [int(x) for x in input().split()]\nqueC = int(input())\nwhile queC != 0:\n    k = int(input())\n    print(getCount(nOEl, aOEl, k))\n    queC -= 1", "def cal_temp_subarr(start, end, q_pos):\n    temp = (q_pos[0] - start + 1) * (end - q_pos[0])\n    for i in range(1, len(q_pos)):\n        temp += (q_pos[i] - q_pos[i - 1]) * (end - q_pos[i])\n    return temp\nn = int(input())\narr = list(map(int, input().split()))\nq = int(input())\nfor i in range(q):\n    num = int(input())\n    ans = 0\n    start = -1\n    q_pos = []\n    for j in range(n):\n        if arr[j] > num and start == -1:\n            start = j\n        elif arr[j] < num:\n            if len(q_pos):\n                ans += cal_temp_subarr(start, j, q_pos)\n            start = -1\n            q_pos = []\n        elif arr[j] == num:\n            if start == -1:\n                start = j\n            q_pos.append(j)\n    if start != -1 and len(q_pos):\n        ans += cal_temp_subarr(start, n, q_pos)\n    print(ans)", "n = int(input())\narr = list(map(int, input().split()))\nq = int(input())\nfor i in range(q):\n    num = int(input())\n    ans = 0\n    for j in range(n):\n        if arr[j] == num:\n            temp = 1\n            count = 1\n            for k in range(j + 1, n):\n                if min(num, arr[k]) == num:\n                    count += 1\n                else:\n                    break\n            temp *= count\n            count = 1\n            for k in range(j - 1, -1, -1):\n                if min(num, arr[k]) == num:\n                    if num == arr[k]:\n                        break\n                    count += 1\n                else:\n                    break\n            temp *= count\n            ans += temp\n    print(ans)", "n = int(input())\narr = [int(x) for x in input().split(' ')]\nfor __ in range(int(input())):\n    count = 0\n    val = int(input())\n    for i in range(n):\n        for j in range(i, n):\n            sub_arr = arr[i:j + 1]\n            if min(sub_arr) == val:\n                count += 1\n    print(count)", "n = int(input())\narr = [int(x) for x in input().split(' ')]\nfor __ in range(int(input())):\n    count = 0\n    val = int(input())\n    for i in range(n):\n        for j in range(i, n):\n            sub_arr = arr[i:j + 1]\n            if min(sub_arr) == val:\n                count += 1\n    print(count)", "def getCount(n, ar, lo):\n    count = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            sub = ar[i:j + 1]\n            if min(sub) == lo:\n                count += 1\n    return count\nnOEl = int(input())\naOEl = [int(x) for x in input().split()]\nqueC = int(input())\nwhile queC != 0:\n    k = int(input())\n    print(getCount(nOEl, aOEl, k))\n    queC -= 1", "def getCount(n, ar, lo):\n    count = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            sub = ar[i:j + 1]\n            if min(sub) == lo:\n                count += 1\n    return count\nnOEl = int(input())\naOEl = [int(x) for x in input().split()]\nqueC = int(input())\nwhile queC != 0:\n    k = int(input())\n    print(getCount(nOEl, aOEl, k))\n    queC -= 1", "n = int(input())\nl = list(map(int, input().split()))\nd = {}\nfor j in range(n):\n    m = l[j]\n    for z in range(j, n):\n        m = min(m, l[z])\n        if m in d:\n            d[m] += 1\n        else:\n            d[m] = 1\nc = int(input())\nfor y in range(c):\n    k = int(input())\n    print(d[k] if k in d else 0)", "n = int(input())\nA = list(map(int, input().split()))\nk = int(input())\nB = [0] * (max(A) + 1)\nfor i in range(n):\n    y = A[i]\n    for j in range(i, n):\n        y = min(y, A[j])\n        B[y] += 1\nfor _ in range(k):\n    Q = int(input())\n    if Q in A:\n        print(B[Q])\n    else:\n        print(0)", "t = int(input())\na = list(map(int, input().split()))\nq = int(input())\nfor i in range(q):\n    n = int(input())\n    count = 0\n    for j in range(t):\n        c = []\n        for k in range(j, t):\n            c.append(a[k])\n            if min(c) == n:\n                count += 1\n    print(count)", "t = int(input())\na = list(map(int, input().split()))\nq = int(input())\nfor i in range(q):\n    n = int(input())\n    count = 0\n    for j in range(t):\n        c = []\n        for k in range(j, t):\n            c.append(a[k])\n            if min(c) == n:\n                count += 1\n    print(count)", "n = int(input())\narr = [int(i) for i in input().split()]\np = sorted(arr)\nmn = p[0]\nmx = p[-1]\nfor i in range(int(input())):\n    k = int(input())\n    if k < mn or k > mx:\n        print(0)\n    else:\n        ans = 0\n        for i in range(n):\n            c_r = 0\n            c_l = 0\n            if arr[i] == k:\n                L = arr[:i]\n                R = arr[i + 1:]\n                L = L[::-1]\n                for j in L:\n                    if arr[i] > j:\n                        break\n                    else:\n                        c_l += 1\n                for j in R:\n                    if j > arr[i]:\n                        c_r += 1\n                    else:\n                        break\n                ans += c_l * (c_r + 1) + c_r + 1\n        print(ans)", "import collections\n\ndef func(arr):\n    d = collections.defaultdict(int)\n    mind = {}\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                d[arr[i]] += 1\n                mind[i, j] = arr[i]\n            else:\n                mind[i, j] = min(mind[i, j - 1], arr[j])\n                d[mind[i, j]] += 1\n    return d\nn = int(input())\ns = input().split(' ')\narr = [int(i) for i in s]\nq = int(input())\nd = func(arr)\nwhile q:\n    k = int(input())\n    print(d[k])\n    q -= 1", "n = int(input())\nl = list(map(int, input().split()))\nd = {}\nfor j in range(n):\n    m = l[j]\n    for z in range(j, n):\n        m = min(m, l[z])\n        if m in d:\n            d[m] += 1\n        else:\n            d[m] = 1\nc = int(input())\nfor y in range(c):\n    k = int(input())\n    print(d[k] if k in d else 0)", "n = int(input())\nl = list(map(int, input().split()))\nd = {}\nfor j in range(n):\n    m = l[j]\n    for z in range(j, n):\n        m = min(m, l[z])\n        if m in d:\n            d[m] += 1\n        else:\n            d[m] = 1\nc = int(input())\nfor y in range(c):\n    k = int(input())\n    print(d[k] if k in d else 0)", "n = int(input())\nl = list(map(int, input().split()))\nq = int(input())\nd = {}\nfor i in range(n):\n    item = l[i]\n    for j in range(i, n):\n        item = min(item, l[j])\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\nfor i in range(q):\n    k = int(input())\n    if k in d.keys():\n        print(d[k])\n    else:\n        print(0)", "n = int(input())\nl = list(map(int, input().split()))\nd = {}\nfor j in range(n):\n    m = l[j]\n    for z in range(j, n):\n        m = min(m, l[z])\n        if m in d:\n            d[m] += 1\n        else:\n            d[m] = 1\nc = int(input())\nfor y in range(c):\n    k = int(input())\n    print(d[k] if k in d else 0)", "n = int(input())\nl = list(map(int, input().split()))\nd = {}\nfor j in range(n):\n    m = l[j]\n    for z in range(j, n):\n        m = min(m, l[z])\n        if m in d:\n            d[m] += 1\n        else:\n            d[m] = 1\nc = int(input())\nfor y in range(c):\n    k = int(input())\n    print(d[k] if k in d else 0)", "n = int(input())\nl = list(map(int, input().split()))\nd = {}\nfor j in range(n):\n    m = l[j]\n    for z in range(j, n):\n        m = min(m, l[z])\n        if m in d:\n            d[m] += 1\n        else:\n            d[m] = 1\nc = int(input())\nfor y in range(c):\n    k = int(input())\n    print(d[k] if k in d else 0)", "n = int(input())\nl = list(map(int, input().split()))\nd = {}\nfor j in range(n):\n    m = l[j]\n    for z in range(j, n):\n        m = min(m, l[z])\n        if m in d:\n            d[m] += 1\n        else:\n            d[m] = 1\nc = int(input())\nfor y in range(c):\n    k = int(input())\n    print(d[k] if k in d else 0)", "n = int(input())\nl = list(map(int, input().split()))\nd = {}\nfor j in range(n):\n    m = l[j]\n    for z in range(j, n):\n        m = min(m, l[z])\n        if m in d:\n            d[m] += 1\n        else:\n            d[m] = 1\nc = int(input())\nfor y in range(c):\n    k = int(input())\n    print(d[k] if k in d else 0)", "n = int(input())\nl = list(map(int, input().split()))\nd = {}\nfor j in range(n):\n    m = l[j]\n    for z in range(j, n):\n        m = min(m, l[z])\n        if m in d:\n            d[m] += 1\n        else:\n            d[m] = 1\nc = int(input())\nfor y in range(c):\n    k = int(input())\n    print(d[k] if k in d else 0)", "n = int(input())\nl = list(map(int, input().split()))\nd = {}\nfor j in range(n):\n    m = l[j]\n    for z in range(j, n):\n        m = min(m, l[z])\n        if m in d:\n            d[m] += 1\n        else:\n            d[m] = 1\nc = int(input())\nfor y in range(c):\n    k = int(input())\n    print(d[k] if k in d else 0)", "n = int(input())\nl = list(map(int, input().split()))\nd = {}\nfor j in range(n):\n    m = l[j]\n    for z in range(j, n):\n        m = min(m, l[z])\n        if m in d:\n            d[m] += 1\n        else:\n            d[m] = 1\nc = int(input())\nfor y in range(c):\n    k = int(input())\n    print(d[k] if k in d else 0)", "n = int(input())\nl = list(map(int, input().split()))\nd = {}\nfor j in range(n):\n    m = l[j]\n    for z in range(j, n):\n        m = min(m, l[z])\n        if m in d:\n            d[m] += 1\n        else:\n            d[m] = 1\nc = int(input())\nfor y in range(c):\n    k = int(input())\n    print(d[k] if k in d else 0)", "n = int(input())\na = list(map(int, input().split()))\ncnt = {}\nleft = [1]\nstack = [[a[0], 1]]\nfor i in range(1, n):\n    curr = 0\n    while True:\n        if len(stack) == 0:\n            curr = i\n            break\n        if stack[-1][0] > a[i]:\n            curr += stack.pop()[1]\n        else:\n            break\n    stack.append([a[i], curr + 1])\n    left.append(curr + 1)\na.reverse()\nright = [1]\nstack = [[a[0], 1]]\nfor i in range(1, n):\n    curr = 0\n    while True:\n        if len(stack) == 0:\n            curr = i\n            break\n        if stack[-1][0] >= a[i]:\n            curr += stack.pop()[1]\n        else:\n            break\n    stack.append([a[i], curr + 1])\n    right.append(curr + 1)\nright.reverse()\na.reverse()\nfor i in range(n):\n    if a[i] in cnt:\n        cnt[a[i]] += left[i] * right[i]\n    else:\n        cnt[a[i]] = left[i] * right[i]\nq = int(input())\nfor i in range(q):\n    x = int(input())\n    if x in cnt:\n        print(cnt[x])\n    else:\n        print(0)", "n = int(input())\na = list(map(int, input().split()))\ncnt = {}\nfor i in range(n):\n    mn = a[i]\n    for j in range(i, n):\n        mn = min(mn, a[j])\n        if mn in cnt:\n            cnt[mn] += 1\n        else:\n            cnt[mn] = 1\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    if k in cnt:\n        print(cnt[k])\n    else:\n        print(0)", "n = int(input())\narr = [int(i) for i in input().split()]\nT = int(input())\nfor i in range(T):\n    val = int(input())\n    if val not in arr:\n        print(0)\n    else:\n        count = 0\n        for i in range(1, n + 1):\n            for j in range(n - i + 1):\n                if min(arr[j:j + i]) == val:\n                    count += 1\n        print(count)", "import sys\nimport math\n\ndef main(arr, k):\n    ans = 0\n    for i in range(len(arr)):\n        curr_min = float('inf')\n        for j in range(i, len(arr)):\n            curr_min = min(curr_min, arr[j])\n            if curr_min == k:\n                ans += 1\n    return ans\nn = int(input())\narr = list(map(int, input().split()))\nfor i in range(int(input())):\n    print(main(arr, int(input())))", "N = int(input())\nA = list(map(int, input().split()))\nQ = int(input())\npre = [1 for i in range(N)]\npost = [1 for i in range(N)]\nfor i in range(N):\n    count = 0\n    k = 1\n    while i + k < N and A[i] <= A[i + k]:\n        count += 1\n        k += 1\n    pre[i] += count\nfor i in range(N - 1, -1, -1):\n    count = 0\n    k = -1\n    while i + k >= 0 and A[i] < A[i + k]:\n        count += 1\n        k -= 1\n    post[i] += count\nfin = [pre[i] * post[i] for i in range(N)]\nd = {}\nfor i in range(N):\n    try:\n        d[A[i]] += fin[i]\n    except:\n        d[A[i]] = fin[i]\nwhile Q:\n    Q -= 1\n    k = int(input())\n    try:\n        print(d[k])\n    except:\n        print(0)", "import sys\nimport math\n\ndef main(arr, k):\n    ans = 0\n    for i in range(len(arr)):\n        curr_min = float('inf')\n        for j in range(i, len(arr)):\n            curr_min = min(curr_min, arr[j])\n            if curr_min == k:\n                ans += 1\n    return ans\nn = int(input())\narr = list(map(int, input().split()))\nfor i in range(int(input())):\n    print(main(arr, int(input())))", "n = int(input())\narr = [int(i) for i in input().split()]\nq = int(input())\nfor _ in range(q):\n    val = int(input())\n    if val not in arr:\n        print(0)\n    else:\n        count = 0\n        for i in range(1, n + 1):\n            for j in range(n - i + 1):\n                if min(arr[j:j + i]) == val:\n                    count += 1\n        print(count)", "n = int(input())\nl = list(map(int, input().split()))\nq = int(input())\nfor _ in range(q):\n    x = int(input())\n    c = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            d = min(l[i:j])\n            if d == x:\n                c += 1\n    print(c)", "n = int(input())\nl = list(map(int, input().split()))\nq = int(input())\nfor i in range(q):\n    x = int(input())\n    c = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            d = min(l[i:j])\n            if d == x:\n                c += 1\n    print(c)", "n = int(input())\narr = [int(i) for i in input().split()]\nq = int(input())\nfor _ in range(q):\n    sub = 0\n    k = int(input())\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if min(arr[i:j]) == k:\n                sub = sub + 1\n    print(sub)", "n = int(input())\na = list(map(int, input().split()))\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    x = 0\n    for i in range(0, len(a)):\n        for j in range(i, len(a)):\n            if k == min(a[i:j + 1]):\n                x = x + 1\n    print(x)", "n = int(input())\nl = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n    a = []\n    x = l[i]\n    for j in range(i, n):\n        a.append(l[j])\n        x = min(x, l[j])\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\nq = int(input())\nwhile q > 0:\n    b = int(input())\n    if b in d:\n        print(d[b])\n    else:\n        print(0)\n    q -= 1", "n = int(input())\nlis = list(map(int, input().split()))\nq = int(input())\nans = []\nres = []\nfor i in range(len(lis) + 1):\n    ans = []\n    for j in range(i + 1, len(lis) + 1):\n        ans = lis[i:j]\n        res.append(ans)\nwhile q > 0:\n    k = int(input())\n    count = 0\n    for i in range(len(res)):\n        if k == min(res[i]):\n            count += 1\n    print(count)\n    q -= 1", "n = int(input())\nx = list(map(int, input().split()))\nq = int(input())\nfor i in range(q):\n    c = 0\n    k = int(input())\n    for j in range(n):\n        for l in range(j, n):\n            if min(x[j:l + 1]) == k:\n                c += 1\n    print(c)", "n = int(input())\nx = list(map(int, input().split()))\nq = int(input())\nfor i in range(q):\n    c = 0\n    k = int(input())\n    for j in range(n):\n        for l in range(j, n):\n            if min(x[j:l + 1]) == k:\n                c += 1\n    print(c)", "n = int(input())\ns1 = input().split(' ')\nl = []\nfor _ in s1:\n    l.append(int(_))\ni = 0\nsub = []\nwhile i < n:\n    s = i\n    f = i + 1\n    while f <= n:\n        l1 = l[s:f]\n        sub.append(l1)\n        f += 1\n    i += 1\nq = int(input())\nk = 0\nwhile k < q:\n    c = 0\n    q1 = int(input())\n    for e in sub:\n        if min(e) == q1:\n            c += 1\n    print(c)\n    k += 1", "from sys import stdin, stdout\nimport numpy as np\nn = int(input())\na = list(map(int, input().split()))\nq = int(input())\nwhile q:\n    q -= 1\n    k = int(input())\n    ans = 0\n    for i in range(n):\n        flag = False\n        count = 0\n        forward = 0\n        backward = 1\n        if a[i] == k:\n            if i != a.index(k):\n                flag = True\n            for j in range(i, n):\n                if a[j] >= k:\n                    forward += 1\n                else:\n                    break\n            for j in range(i - 1, -1, -1):\n                if flag:\n                    if a[j] > k:\n                        backward += 1\n                    else:\n                        break\n                elif a[j] >= k:\n                    backward += 1\n                else:\n                    break\n            count += forward * backward\n            ans += count\n    print(ans)", "from sys import stdin, stdout\nimport numpy as np\nn = int(input())\na = np.array(list(map(int, input().split())))\nq = int(input())\nwhile q:\n    q -= 1\n    k = int(input())\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if min(a[i:j]) == k:\n                ans += 1\n    print(ans)", "N = int(input())\narray = list(map(int, input().split()))\nfor _ in range(int(input())):\n    K = int(input())\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N + 1):\n            if K == min(array[i:j]):\n                count += 1\n    print(count)", "n = int(input())\nl = list(map(int, input().split()))\nfor i in range(int(input())):\n    c = 0\n    quer = int(input())\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if min(l[i:j]) == quer:\n                c += 1\n    print(c)", "import sys\nimport numpy as np\n\ndef find_subarray(min_target, lis):\n    arr = np.array(lis)\n    where_arr = np.where(arr == min_target)[0]\n    count = 0\n    if where_arr.size == 0:\n        return count\n    max_where_arr = max(where_arr)\n    for (pos, value) in enumerate(lis):\n        if value < min_target or pos > max_where_arr:\n            pass\n        else:\n            for index in range(pos, len(lis)):\n                if min(lis[pos:index + 1]) == min_target:\n                    count += 1\n    return count\n\ndef main():\n    length_array = sys.stdin.readline()\n    lis = [int(number) for number in sys.stdin.readline().split()]\n    number_inquiries = sys.stdin.readline()\n    for min_target in [int(inquiry) for inquiry in sys.stdin.readlines()]:\n        print(find_subarray(min_target, lis))\nmain()", "import sys\nimport numpy as np\n\ndef find_subarray(min_target, lis):\n    arr = np.array(lis)\n    where_arr = np.where(arr == min_target)[0]\n    count = 0\n    if where_arr.size == 0:\n        return count\n    max_where_arr = max(where_arr)\n    temp_list = []\n    for (pos, value) in enumerate(lis):\n        if value < min_target or pos > max_where_arr:\n            pass\n        else:\n            for index in range(pos, len(lis)):\n                temp_list.append(lis[index])\n                if min(temp_list) == min_target:\n                    count += 1\n            temp_list = []\n    return count\n\ndef main():\n    length_array = sys.stdin.readline()\n    lis = [int(number) for number in sys.stdin.readline().split()]\n    number_inquiries = sys.stdin.readline()\n    for min_target in [int(inquiry) for inquiry in sys.stdin.readlines()]:\n        print(find_subarray(min_target, lis))\nmain()", "import sys\nimport numpy as np\n\ndef find_subarray(min_target, lis):\n    arr = np.array(lis)\n    where_arr = np.where(arr == min_target)[0]\n    if where_arr.size == 0:\n        return 0\n    max_where_arr = max(where_arr)\n    temp_list = []\n    subarrays = []\n    for (pos, value) in enumerate(lis):\n        if value < min_target or pos > max_where_arr:\n            pass\n        else:\n            for index in range(pos, len(lis)):\n                temp_list.append(lis[index])\n                if min(temp_list) == min_target:\n                    subarrays.append(temp_list.copy())\n            temp_list = []\n    return len(subarrays)\n\ndef main():\n    length_array = sys.stdin.readline()\n    lis = [int(number) for number in sys.stdin.readline().split()]\n    number_inquiries = sys.stdin.readline()\n    for min_target in [int(inquiry) for inquiry in sys.stdin.readlines()]:\n        print(find_subarray(min_target, lis))\nmain()", "array_size = int(input())\narr = input().split(' ')\narr = list(map(int, arr))\nquery_no = int(input())\nfor tc in range(query_no):\n    k = int(input())\n    count = 0\n    result = [[]]\n    for i in range(len(arr) + 1):\n        for j in range(i + 1, len(arr) + 1):\n            sub = arr[i:j]\n            result.append(sub)\n    for i in result:\n        if i != []:\n            if k == min(i):\n                count += 1\n    print(count)", "input()\narr = list(map(int, input().split(' ')))\nsubarrays = []\ntemp_arr = []\nfor i in range(len(arr) - 1):\n    for j in range(i, len(arr)):\n        temp_arr.append(arr[j])\n        subarrays.append(temp_arr.copy())\n    temp_arr = []\nsubarrays.append([arr[-1]])\nfor query in range(int(input())):\n    num = int(input())\n    total = 0\n    for subarr in subarrays:\n        if min(subarr) == num:\n            total += 1\n    print(total)", "input()\narr = list(map(int, input().split()))\nQ = int(input())\nfor item in range(Q):\n    K = int(input())\n    total = 0\n    for i in range(len(arr)):\n        hasK = False\n        if arr[i] >= K:\n            if arr[i] == K:\n                hasK = True\n                total += 1\n            j = i + 1\n            while j < len(arr) and arr[j] >= K:\n                if arr[j] == K:\n                    hasK = True\n                if hasK:\n                    total += 1\n                j += 1\n    print(total)", "t = 1\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        k = l[i]\n        for j in range(i, n):\n            k = min(k, l[j])\n            try:\n                d[k] += 1\n            except:\n                d[k] = 1\n    q = int(input())\n    for _ in range(q):\n        k = int(input())\n        try:\n            print(d[k])\n        except:\n            print(0)\n    t -= 1", "n = int(input())\na = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n    d[a[i]] = 0\nfor i in range(n):\n    for j in range(i, n):\n        l = a[i:j + 1]\n        d[min(l)] += 1\nq = int(input())\nfor _ in range(q):\n    x = int(input())\n    if x in d:\n        print(d[x])\n    else:\n        print(0)", "N = int(input())\nA = [int(x) for x in input().split()]\nfor _ in range(int(input())):\n    K = int(input())\n    total = 0\n    for i in range(N):\n        a = 0\n        count = 0\n        forward = 0\n        backward = 1\n        if A[i] == K:\n            if i != A.index(K):\n                a = 1\n            for j in range(i, N):\n                if A[j] >= K:\n                    forward += 1\n                else:\n                    break\n            for j in range(i - 1, -1, -1):\n                if a == 1:\n                    if A[j] > K:\n                        backward += 1\n                    else:\n                        break\n                elif a == 0:\n                    if A[j] >= K:\n                        backward += 1\n                    else:\n                        break\n            count += forward * backward\n            total += count\n    print(total)", "def left(a, pos):\n    current = a[pos]\n    counter = 1\n    pos -= 1\n    while 1:\n        if pos < 0:\n            break\n        if current >= a[pos]:\n            break\n        else:\n            counter += 1\n        pos -= 1\n    return counter\n\ndef right(a, pos):\n    current = a[pos]\n    counter = 1\n    pos += 1\n    while 1:\n        if pos >= len(a):\n            break\n        if current > a[pos]:\n            break\n        else:\n            counter += 1\n        pos += 1\n    return counter\nn = int(input(''))\na = input('').split(' ')\nfor i in range(len(a)):\n    a[i] = int(a[i])\nq = int(input(''))\nfor i in range(q):\n    x = int(input(''))\n    ans = 0\n    for j in range(len(a)):\n        if a[j] == x:\n            ans += left(a, j) * right(a, j)\n    print(ans)", "n = int(input())\nl = list(map(int, input().split()))\nquery = int(input())\nfor _ in range(query):\n    q = int(input())\n    a = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if min(l[i:j]) == q:\n                a += 1\n    print(a)", "n = int(input())\nl = list(map(int, input().split()))\nfor _ in range(int(input())):\n    c = 0\n    m = int(input())\n    for i in range(n):\n        for j in range(i, n):\n            if min(l[i:j + 1]) == m:\n                c += 1\n    print(c)", "from collections import defaultdict\nn = int(input())\na = [int(i) for i in input().split()]\ng = defaultdict(int)\nfor i in range(n):\n    for j in range(i, n):\n        g[min(a[i:j + 1])] += 1\nq = int(input())\nfor _ in range(q):\n    print(g[int(input())])", "from collections import defaultdict\nn = int(input())\na = [int(i) for i in input().split()]\ng = defaultdict(int)\nfor i in range(n):\n    y = a[i]\n    for j in range(i, n):\n        y = min(y, a[j])\n        g[y] += 1\nq = int(input())\nfor _ in range(q):\n    print(g[int(input())])", "import math\n\ndef segmentTree_con(low, high, pos):\n    if low == high:\n        seg_tree[pos] = arr[low]\n    else:\n        mid = (low + high) // 2\n        left_child = 2 * pos + 1\n        right_child = 2 * pos + 2\n        segmentTree_con(low, mid, left_child)\n        segmentTree_con(mid + 1, high, right_child)\n        seg_tree[pos] = min(seg_tree[left_child], seg_tree[right_child])\n\ndef query(qlow, qhigh, low, high, pos):\n    if qlow <= low and qhigh >= high:\n        return seg_tree[pos]\n    if qlow > high or qhigh < low:\n        return maxsize[0]\n    mid = (low + high) // 2\n    return min(query(qlow, qhigh, low, mid, 2 * pos + 1), query(qlow, qhigh, mid + 1, high, 2 * pos + 2))\nn = int(input())\narr = list(map(int, input().split()))\nmaxsize = [10 ** 7]\nquery_list = []\nfor q in range(int(input())):\n    query_list.append(int(input()))\nans_query = [0 for _ in range(len(query_list))]\nif n == 1:\n    for num in query_list:\n        if num in arr:\n            print(1)\n        else:\n            print(0)\nelse:\n    size = math.ceil(math.log(n, 2))\n    seg_tree = [maxsize for _ in range(2 ** size * 2 - 1)]\n    segmentTree_con(0, n - 1, 0)\n    for start in range(n):\n        end = start - 1\n        for j in range(n - start):\n            end += 1\n            ret = query(start, end, 0, n - 1, 0)\n            for k in range(len(query_list)):\n                if ret == query_list[k]:\n                    ans_query[k] += 1\n    for ans in ans_query:\n        print(ans)", "n = int(input())\nl = [int(i) for i in input().split()]\nq = int(input())\nfor i in range(q):\n    x = int(input())\n    cnt = 0\n    for i in range(n):\n        for j in range(i, n):\n            if min(l[i:j + 1]) == x:\n                cnt += 1\n    print(cnt)", "n = int(input())\nA = list(map(int, input().split()))\nB = []\nfor i in range(n):\n    x = A[i]\n    for j in range(i, n):\n        x = min(x, A[j])\n        B.append(x)\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(B.count(k))", "def sub(arr, k, f, n):\n    i = j = d\n    u = v = 0\n    i -= 1\n    j += 1\n    flag = 0\n    while i > -1:\n        if arr[i] < k:\n            break\n        if arr[i] == k:\n            flag = 1\n            break\n        u += 1\n        i -= 1\n    while j < n:\n        if arr[j] < k:\n            break\n        v += 1\n        j += 1\n    if flag == 0:\n        return v + (v + 1) * u + 1\n    else:\n        return v + 1\nn = int(input())\narr = list(map(int, input().strip().split()))\nq = int(input())\nfor j in range(0, q):\n    tot = 0\n    k = int(input())\n    for d in range(0, n):\n        if arr[d] == k:\n            tot += sub(arr, k, d, n)\n    print(tot)", "n = int(input())\na = list(map(int, input().split()))\nans = []\nfor i in range(n):\n    m = a[i]\n    for j in range(i, n):\n        if a[j] < m:\n            m = a[j]\n        ans.append(m)\nfor q in range(int(input())):\n    k = int(input())\n    print(ans.count(k))", "n = int(input())\narr = [int(x) for x in input().split()]\nq = int(input())\nfor _ in range(q):\n    p = int(input())\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if min(arr[i:j + 1]) == p:\n                count += 1\n    print(count)", "n = int(input())\na = [int(word) for word in input().split()]\nq = int(input())\nfor iq in range(q):\n    k = int(input())\n    ways = 0\n    last_lt = -1\n    last_leq = -1\n    for i in range(n):\n        if a[i] < k:\n            last_lt = i\n        if a[i] <= k:\n            last_leq = i\n        ways += last_leq - last_lt\n    print(ways)", "def solve(a, k):\n    listOfMin = []\n    length = len(a)\n    for i in range(length):\n        for j in range(i + 1, length + 1):\n            listOfMin.append(min(a[i:j]))\n    count = 0\n    for e in listOfMin:\n        if e == k:\n            count += 1\n    return count\nsizeOfArray = int(input())\na = []\nelements = input().split(' ')\nfor ele in elements:\n    a.append(int(ele))\nnoOfQueries = int(input())\nfor i in range(noOfQueries):\n    k = int(input())\n    print(solve(a, k))", "n = int(input())\nA = list(map(int, input().strip().split()))\nD = dict()\nfor l in range(len(A)):\n    for r in range(l + 1, len(A) + 1):\n        v = min(A[l:r])\n        D[v] = 1 if not v in D else D[v] + 1\nq = int(input())\nfor i in range(q):\n    v = int(input())\n    print(0 if not v in D else D[v])", "import sys\nt = int(sys.stdin.readline())\na = []\nm = []\na = [int(x) for x in input().split()]\nq = int(sys.stdin.readline())\nfor y in range(q):\n    m.append(int(sys.stdin.readline()))\nfor x in m:\n    c = 0\n    for i in range(t):\n        for j in range(i + 1, t + 1):\n            if x == min(a[i:j]):\n                c += 1\n    print(c)", "import itertools, sys\n\ndef solve(N, A, K):\n    count_sets = lambda g, i: (i + 1) * (len(g) - i)\n    groups = [list(g) for (k, g) in itertools.groupby(A, lambda x: x >= K) if k]\n    total = 0\n    for g in groups:\n        if g.count(K) > 0:\n            idx = [i for (i, a) in enumerate(g) if a == K]\n            for i in range(len(idx)):\n                if i == 0:\n                    total += (idx[i] + 1) * (len(g) - idx[i])\n                else:\n                    total += (idx[i] - idx[i - 1]) * (len(g) - idx[i])\n    return total\n\ndef solve_brute(N, A, K):\n    return sum((1 for i in range(N) for j in range(i, N) if min(A[i:j + 1]) == K))\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split()))\nQ = int(sys.stdin.readline())\nfor _ in range(Q):\n    K = int(sys.stdin.readline())\n    print(solve_brute(N, A, K))", "import itertools, sys\n\ndef solve(N, A, K):\n    count_sets = lambda g, i: (i + 1) * (len(g) - i)\n    groups = [list(g) for (k, g) in itertools.groupby(A, lambda x: x >= K) if k]\n    total = 0\n    for g in groups:\n        if g.count(K) > 0:\n            idx = [i for (i, a) in enumerate(g) if a == K]\n            for i in range(len(idx)):\n                if i == 0:\n                    total += (idx[i] + 1) * (len(g) - idx[i])\n                else:\n                    total += (idx[i] - idx[i - 1]) * (len(g) - idx[i])\n    return total\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split()))\nQ = int(sys.stdin.readline())\nfor _ in range(Q):\n    K = int(sys.stdin.readline())\n    print(solve(N, A, K))", "n = int(input())\narr = input().split()\narr = [int(x) for x in arr]\nq = int(input())\nwhile q:\n    q -= 1\n    ans = 0\n    k = int(input())\n    for i in range(n):\n        temp = arr[i]\n        for j in range(i, n):\n            temp = min(temp, arr[j])\n            ans += int(temp == k)\n    print(ans)", "import math\n\ndef sumfunc(num):\n    return math.floor(num * (num + 1) / 2)\ncaseNum = int(input())\nnumList = []\nnumList = list(map(int, input().split()))\nlistLen = len(numList)\ninqNum = int(input())\nfor eachInquiry in range(inqNum):\n    minNum = int(input())\n    (geqSubList, gSubList) = ([], [])\n    (geqStart, geqEnd, gStart, gEnd) = (-1, -1, -1, -1)\n    for i in range(listLen):\n        if numList[i] > minNum:\n            if i == 0 or numList[i - 1] <= minNum:\n                gStart = i\n            if i == listLen - 1 or numList[i + 1] <= minNum:\n                gEnd = i\n                gSubList.append(gEnd - gStart + 1)\n        if numList[i] >= minNum:\n            if i == 0 or numList[i - 1] < minNum:\n                geqStart = i\n            if i == listLen - 1 or numList[i + 1] < minNum:\n                geqEnd = i\n                geqSubList.append(geqEnd - geqStart + 1)\n    if geqStart == -1:\n        print(0)\n    else:\n        geqSum = sum(map(sumfunc, geqSubList))\n        if len(gSubList) == 0:\n            print(geqSum)\n        else:\n            gSum = sum(map(sumfunc, gSubList))\n            print(geqSum - gSum)", "N = int(input())\nL = list(map(int, input().split()))\nQ = int(input())\nM = {}\nfor start in range(N):\n    minn = 10 ** 10\n    for end in range(start, N):\n        minn = min(minn, L[end])\n        if minn in M:\n            M[minn] += 1\n        else:\n            M[minn] = 1\nfor q in range(Q):\n    x = int(input())\n    if x in M:\n        print(M[x])\n    else:\n        print(0)", "n = int(input())\na = list(map(int, input().split()))\nfor q in range(int(input())):\n    (k, ans) = (int(input()), 0)\n    for i in range(n):\n        for j in range(i, n):\n            if min(a[i:j + 1]) == k:\n                ans += 1\n    print(ans)"]