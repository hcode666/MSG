["import math\nimport bisect\nfrom functools import reduce\nfrom collections import defaultdict\n\ndef inn():\n    return int(input())\n\ndef inl():\n    return list(map(int, input().split()))\nMOD = 10 ** 9 + 7\nINF = inf = 10 ** 18 + 5\nn = inn()\na = inl()\nk = []\nfor q in range(inn()):\n    k.append(inn())\ngcdn = reduce(math.gcd, a)\nlim = max(k) + 1\nans = defaultdict(int)\nans[1] = 0\nfor i in range(n):\n    cur_gcd = a[i]\n    for j in range(i, n):\n        cur_gcd = math.gcd(cur_gcd, a[j])\n        if cur_gcd == 1 or cur_gcd // gcdn == 1:\n            ans[cur_gcd] += n - j\n            break\n        ans[cur_gcd] += 1\nkeys = list(ans.keys())\nans1 = [0] * lim\nfor i in keys:\n    for j in range(i, lim, i):\n        ans1[j] += ans[i]\nfor i in k:\n    print(ans1[i])", "from math import gcd\nn = int(input())\nit = list(map(int, input().split()))\nq = int(input())\naa = [{} for i in range(n)]\naa[0][it[0]] = 1\nfor i in range(1, n):\n    for j in aa[i - 1]:\n        a = gcd(j, it[i])\n        try:\n            aa[i][a] += aa[i - 1][j]\n        except:\n            aa[i][a] = aa[i - 1][j]\n    try:\n        aa[i][it[i]] += 1\n    except:\n        aa[i][it[i]] = 1\nss = {}\nma = 10 ** 6 + 1\nk = -1\nfor i in aa:\n    k += 1\n    for j in i:\n        if j >= ma:\n            continue\n        try:\n            ss[j] += aa[k][j]\n        except:\n            ss[j] = aa[k][j]\nll = list(ss.keys())\nll.sort()\npre = [0] * (10 ** 6 + 1)\nfor i in ll:\n    for j in range(i, len(pre), i):\n        pre[j] += ss[i]\nfor _ in range(q):\n    k = int(input())\n    print(pre[k])", "from math import gcd\nn = int(input())\nit = list(map(int, input().split()))\nq = int(input())\naa = [{} for i in range(n)]\naa[0][it[0]] = 1\nfor i in range(1, n):\n    for j in aa[i - 1]:\n        a = gcd(j, it[i])\n        try:\n            aa[i][a] += aa[i - 1][j]\n        except:\n            aa[i][a] = aa[i - 1][j]\n    try:\n        aa[i][it[i]] += 1\n    except:\n        aa[i][it[i]] = 1\nss = {}\nma = 10 ** 6 + 1\nk = -1\nfor i in aa:\n    k += 1\n    for j in i:\n        if j >= ma:\n            continue\n        try:\n            ss[j] += aa[k][j]\n        except:\n            ss[j] = aa[k][j]\nll = list(ss.keys())\nll.sort()\npre = [0] * (10 ** 6 + 1)\nfor i in ll:\n    for j in range(i, len(pre), i):\n        pre[j] += ss[i]\nfor _ in range(q):\n    k = int(input())\n    print(pre[k])", "__author__ = 'Ronald Kaiser'\n__email__ = 'raios dot catodicos at gmail dot com'\nfrom collections import defaultdict\nfrom functools import reduce\nfrom math import gcd\nN = int(input())\nA = list(map(int, input().split()))\nQ = int(input())\nK = [int(input()) for _ in range(Q)]\nMAX_K = max(K)\nD = defaultdict(int)\ngcd_all = reduce(gcd, A)\nfor i in range(N):\n    v = A[i]\n    for j in range(i, N):\n        v = gcd(v, A[j])\n        if v == 1 or v // gcd_all == 1:\n            D[v] += N - j\n            break\n        D[v] += 1\ns = D[1] if 1 in D else 0\nT = [s for _ in range(MAX_K + 1)]\nfor (k, v) in D.items():\n    if k == 1:\n        continue\n    for i in range(k, MAX_K + 1, k):\n        T[i] += v\nfor k in K:\n    print(T[k])", "__author__ = 'Ronald Kaiser'\n__email__ = 'raios dot catodicos at gmail dot com'\nfrom math import gcd\nfrom collections import defaultdict\nN = int(input())\nA = list(map(int, input().split()))\nQ = int(input())\nK = [int(input()) for _ in range(Q)]\nD = defaultdict(int)\nt = A[0]\nfor i in range(1, N):\n    t = gcd(t, A[i])\nfor i in range(N):\n    v = A[i]\n    for j in range(i, N):\n        v = gcd(v, A[j])\n        if v == 1:\n            D[1] += N - j\n            break\n        elif v // t == 1:\n            D[v] += N - j\n            break\n        D[v] += 1\ni = D[1] if 1 in D else 0\nmax_k = max(K)\nT = [i for _ in range(max_k + 1)]\nfor (k, v) in D.items():\n    if k == 1:\n        continue\n    j = k\n    x = 1\n    while j <= max_k:\n        T[j] += v\n        x += 1\n        j = k * x\nfor k in K:\n    print(T[k])", "import itertools\nfrom math import gcd, ceil, sqrt\nfrom collections import defaultdict\nMAXK = 10 ** 6\nspf = [0 for i in range(MAXK)]\n\ndef preprocess():\n    spf[1] = 1\n    for i in range(2, MAXK):\n        spf[i] = i\n    for i in range(4, MAXK, 2):\n        spf[i] = 2\n    for i in range(3, ceil(sqrt(MAXK))):\n        if spf[i] == i:\n            for j in range(i * i, MAXK, i):\n                if spf[j] == j:\n                    spf[j] = i\n\ndef multiplyListElements(myList):\n    result = 1\n    for x in myList:\n        result *= x\n    return result\n\ndef getProductOfPrimes(x):\n    product_of_primes = defaultdict(int)\n    while x != 1:\n        product_of_primes[spf[x]] += 1\n        x = x // spf[x]\n    return product_of_primes\npreprocess()\nans = defaultdict(int)\ngcds = defaultdict(int)\nk = []\ns = set()\nn = int(input())\na = [int(x) for x in input().split()]\nb = list(a)\nq = int(input())\nfor _ in range(q):\n    y = int(input())\n    k.append(y)\n    s.add(y)\nx = 1\nfor i in range(n):\n    gcd1 = a[i]\n    gcds[gcd1] += 1\n    y = x - 1\n    for j in range(y, i):\n        b[j] = gcd(b[j], b[i])\n        if j == y:\n            gcds[b[j]] += x\n        else:\n            gcds[b[j]] += 1\n    if i != n - 1:\n        first_seq = True\n        for z in range(y, i + 1):\n            if b[z] == b[z + 1] and first_seq:\n                x += 1\n            else:\n                first_seq = False\nfor k3 in s:\n    prime_fact_k = getProductOfPrimes(k3)\n    d = []\n    for j in prime_fact_k:\n        l = [1]\n        f1 = 1\n        for k4 in range(1, prime_fact_k[j] + 1):\n            f1 *= j\n            l.append(f1)\n        d.append(l)\n    all_factors = []\n    for i1 in itertools.product(*d):\n        all_factors.append(multiplyListElements(i1))\n    for i2 in all_factors:\n        ans[k3] += gcds[i2]\nfor i3 in k:\n    print(ans[i3])", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n(total, ans) = ([], [])\nfor i in range(1000001):\n    total.append(0)\n    ans.append(0)\nn = int(input())\narr = list(map(int, input().split()))\n(l1, l2) = ([], [])\n(dict1, dict2) = ({}, {})\nfor i in range(n):\n    l2 = []\n    dict2 = {}\n    for j in range(len(l1)):\n        x = gcd(l1[j], arr[i])\n        if dict2.get(x) == None:\n            l2.append(x)\n            dict2[x] = 0\n        dict2[x] += dict1[l1[j]]\n        if x < 1000001:\n            total[x] += dict1[l1[j]]\n    l1 = []\n    dict1 = {}\n    l1 = l2 + []\n    dict1 = dict2\n    if dict1.get(arr[i]) == None:\n        l1.append(arr[i])\n        dict1[arr[i]] = 0\n    dict1[arr[i]] += 1\n    if arr[i] < 1000001:\n        total[arr[i]] += 1\nfor i in range(1, 1000001):\n    if total[i] == 0:\n        continue\n    for j in range(i, 1000001, i):\n        ans[j] += total[i]\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(ans[k])", "__author__ = 'Ronald Kaiser'\n__email__ = 'raios dot catodicos at gmail dot com'\nfrom math import gcd\nfrom collections import defaultdict\nN = int(input())\nA = list(map(int, input().split()))\nQ = int(input())\nK = [int(input()) for _ in range(Q)]\nD = defaultdict(int)\nt = A[0]\nfor i in range(1, N):\n    t = gcd(t, A[i])\nfor i in range(N):\n    v = A[i]\n    for j in range(i, N):\n        v = gcd(v, A[j])\n        if v == 1:\n            D[1] += N - j\n            break\n        elif v // t == 1:\n            D[v] += N - j\n            break\n        D[v] += 1\ni = D[1] if 1 in D else 0\nmax_k = max(K)\nT = [i for _ in range(max_k + 1)]\nfor (k, v) in D.items():\n    if k == 1:\n        continue\n    j = k\n    x = 1\n    while j <= max_k:\n        T[j] += v\n        x += 1\n        j = k * x\nfor k in K:\n    print(T[k])", "LIMIT = 10 ** 6 + 1\n\ndef gcd(a, b):\n    while a > 0:\n        (a, b) = (b % a, a)\n    return b\n\ndef pop_gcds(A):\n    gcds = [0] * LIMIT\n    prev_updates = [len(A)]\n    last_gcd = A[-1]\n    for start in range(len(A) - 1, -1, -1):\n        cur_gcd = A[start]\n        updates = [start]\n        cur = start\n        for end in prev_updates:\n            spaces = end - cur\n            if cur_gcd < len(gcds):\n                gcds[cur_gcd] += spaces\n            if end >= len(A):\n                break\n            cand_gcd = gcd(cur_gcd, A[end])\n            if cand_gcd != cur_gcd:\n                updates.append(end)\n                cur_gcd = cand_gcd\n            cur = end\n        updates.append(len(A))\n        prev_updates = updates\n    return gcds\n\ndef pop_muls(gcds):\n    muls = [0] * LIMIT\n    for (index, count) in enumerate(gcds):\n        if count > 0:\n            cur_index = index\n            while cur_index < len(muls):\n                muls[cur_index] += count\n                cur_index += index\n    return muls\nN = int(input())\nA = list(map(int, input().strip().split()))\ngcds = pop_gcds(A)\nmuls = pop_muls(gcds)\nQ = int(input())\nfor _ in range(Q):\n    q = int(input())\n    print(muls[q])", "from math import gcd\n\ndef SieveOfEratosthenes(n, prime):\n    p = 2\n    while p <= n:\n        if prime[p] == 0:\n            for i in range(p, n + 1, p):\n                if prime[i] == 0:\n                    prime[i] = p\n        p += 1\n\ndef fac2(nu):\n    d = {}\n    while nu > 1:\n        p = prime[nu]\n        nu = nu // p\n        if d.get(p, 0) == 0:\n            d[p] = 1\n        else:\n            d[p] += 1\n    return d\n\ndef fg(i, d, l, cf, ans):\n    if i == len(d):\n        if cf <= M:\n            ans[0] += gcdcount[cf]\n        return 0\n    mp = d[l[i]]\n    pn = l[i]\n    cm = 1\n    i += 1\n    for pow in range(0, mp + 1):\n        fg(i, d, l, cm * cf, ans)\n        cm *= pn\nM = 1000001\nprime = [0] * M\nSieveOfEratosthenes(M - 1, prime)\nn = int(input())\nl = list(map(int, input().split()))\nq = int(input())\nql = []\ni = 0\nwhile i < q:\n    ql.append(int(input()))\n    i += 1\ngcdcount = [0] * 1000001\nprevgcd = []\nprevgcdcount = {}\nfor i in range(0, n):\n    gcdn = len(prevgcd)\n    el = l[i]\n    currgcd = []\n    currgcddict = {}\n    currgcdcount = {}\n    for j in range(0, gcdn):\n        el2 = prevgcd[j]\n        g = gcd(el, el2)\n        incr = prevgcdcount[el2]\n        if currgcddict.get(g, 0) == 0:\n            currgcd.append(g)\n            currgcdcount[g] = incr\n            currgcddict[g] = 1\n        else:\n            currgcdcount[g] += incr\n        if g <= M:\n            gcdcount[g] += incr\n    if currgcddict.get(el, 0) == 0:\n        currgcd.append(el)\n        currgcdcount[el] = 1\n        currgcddict[el] = 1\n    else:\n        currgcdcount[el] += 1\n    if el <= M:\n        gcdcount[el] += 1\n    prevgcd = currgcd\n    prevgcdcount = currgcdcount\nfor i in ql:\n    ans = [0]\n    if i == 1:\n        print(gcdcount[i])\n    else:\n        d = fac2(i)\n        l = list(d.keys())\n        gv = fg(0, d, l, 1, ans)\n        print(ans[0])", "import math\nn = int(input(''))\na = list(map(int, input('').split(' ')))\nq = int(input(''))\nqu = []\nfor i in range(q):\n    qu.append(int(input('')))\ngd = {}\ngcds = [1] * n\ng = a[n - 1]\nfor i in range(n - 1, -1, -1):\n    g = math.gcd(g, a[i])\n    gcds[i] = g\n    if g == 1:\n        break\nfor i in range(n):\n    g = a[i]\n    for j in range(i, n, 1):\n        g = math.gcd(g, a[j])\n        if g not in gd:\n            gd[g] = 0\n        gd[g] = gd[g] + 1\n        if j < n - 1 and g == gcds[j + 1]:\n            gd[g] = gd[g] + n - j - 1\n            break\nd = {}\nfor k in gd:\n    i = k\n    while i < 10 ** 6 + 1:\n        if i not in d:\n            d[i] = 0\n        d[i] = d[i] + gd[k]\n        i = i + k\nfor k in qu:\n    if k not in d:\n        print(0)\n    else:\n        print(d[k])", "from collections import Counter\nfrom math import gcd\nK_MAX = 10 ** 6\nn = int(input())\nA = list(map(int, input().split()))\nst = [Counter() for _ in range(n)]\nst[0][A[0]] += 1\nfor i in range(1, n):\n    st[i][A[i]] += 1\n    for (el, times) in st[i - 1].items():\n        st[i][gcd(el, A[i])] += times\ncum_st = Counter()\nfor i in range(n):\n    cum_st.update(st[i])\nans = [0] * (K_MAX + 1)\nfor (el, times) in cum_st.items():\n    for i in range(el, K_MAX + 1, el):\n        ans[i] += times\nq = int(input())\nfor _ in range(q):\n    k = int(input())\n    print(ans[k])"]