["t = int(input())\nfor ni in range(t):\n    D = int(input())\n    l = [0] * 32\n    for nj in range(D):\n        (d, p) = map(int, input().split())\n        l[d] = p\n    Q = int(input())\n    a = [0] * 32\n    for nk in range(Q):\n        (de, re) = map(int, input().split())\n        if sum(l[:de + 1]) >= re:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    j_s = {}\n    l_y = {}\n    D = int(input())\n    for j in range(D):\n        L = list(map(int, input().split()))\n        j_s[L[0]] = L[1]\n    Q = int(input())\n    for i in range(Q):\n        (a, b) = map(int, input().split())\n        ans = 0\n        for elem in j_s:\n            if elem <= a:\n                ans += j_s[elem]\n        if ans >= b:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "i = int(input())\nmast = []\nfor _ in range(i):\n    jafar = []\n    j = int(input())\n    for _ in range(j):\n        jafar.append(input().split())\n    t = int(input())\n    for _ in range(t):\n        teach = input().split()\n        tot = 0\n        for ele in range(j):\n            if int(jafar[ele][0]) <= int(teach[0]):\n                tot = int(jafar[ele][1]) + tot\n        if tot >= int(teach[1]):\n            mast.append('Go Camp')\n        else:\n            mast.append('Go Sleep')\nfor ele in mast:\n    print(ele)", "for _ in range(int(input())):\n    N = int(input())\n    S = {}\n    for i in range(N):\n        (d, p) = map(int, input().split())\n        S[d] = p\n    Q = int(input())\n    for q in range(Q):\n        (d, p) = map(int, input().split())\n        solved = 0\n        for i in S.keys():\n            if i <= d:\n                solved += S[i]\n            else:\n                break\n        print('Go Camp' if solved >= p else 'Go Sleep')", "for _ in range(int(input())):\n    solve = [0] * 31\n    for D in range(int(input())):\n        (d, p) = map(int, input().split())\n        for i in range(d - 1, 31):\n            solve[i] += p\n    for Q in range(int(input())):\n        (d, p) = map(int, input().split())\n        if solve[d - 1] >= p:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    plan = {0: 0}\n    for _ in range(int(input())):\n        (day, qsns) = [int(x) for x in input().split()]\n        plan[day] = qsns + plan[list(plan.keys())[-1]]\n    for _ in range(int(input())):\n        (day, qsns) = [int(x) for x in input().split()]\n        reverse_pdays = list(plan.keys())[::-1]\n        for pday in reverse_pdays:\n            if pday <= day:\n                print('Go ' + ('Sleep' if qsns > plan[pday] else 'Camp'))\n                break", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    x = int(input())\n    for i in range(x):\n        (d, r) = map(int, input().split())\n        for (i, j) in l:\n            if i <= d:\n                r -= j\n            if r <= 0:\n                break\n        if r <= 0:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "t = int(input())\nfor i in range(t):\n    days = int(input())\n    a = []\n    b = []\n    for j in range(days):\n        a.append(input().split())\n    dead = int(input())\n    for k in range(dead):\n        d = 0\n        p = input().split()\n        c = 0\n        for i in a:\n            if int(i[0]) > int(p[0]):\n                c += 1\n            else:\n                d += int(i[1])\n        if c == len(a):\n            print('Go Sleep')\n        elif d >= int(p[1]):\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "t = int(input())\nfor i in range(t):\n    days = int(input())\n    a = []\n    for j in range(days):\n        a.append(input().split())\n    dead = int(input())\n    for k in range(dead):\n        b = []\n        d = 0\n        p = input().split()\n        c = 0\n        for i in a:\n            if int(i[0]) > int(p[0]):\n                c += 1\n            else:\n                b.append(i)\n        if c == len(a):\n            print('Go Sleep')\n        else:\n            for i in b:\n                d += int(i[1])\n            if d >= int(p[1]):\n                print('Go Camp')\n            else:\n                print('Go Sleep')", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    x = int(input())\n    for i in range(x):\n        (d, r) = map(int, input().split())\n        p = 0\n        i = 0\n        while i < n and l[i][0] <= d:\n            p += l[i][1]\n            i += 1\n        if p >= r:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    x = int(input())\n    for i in range(x):\n        (d, r) = map(int, input().split())\n        for (i, j) in l:\n            if i <= d:\n                r -= j\n            if r <= 0:\n                break\n        if r <= 0:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    s = {}\n    for i in range(int(input())):\n        (d, p) = map(int, input().split())\n        s[d] = p\n    for j in range(int(input())):\n        (a, b) = map(int, input().split())\n        flag = False\n        for (i, j) in s.items():\n            if i <= a:\n                b -= j\n            if b <= 0:\n                flag = True\n                break\n        print('Go Camp' if flag else 'Go Sleep')", "T = int(input())\nfor i in range(0, T):\n    D = int(input())\n    f = {}\n    for i in range(0, D):\n        (d, p) = map(int, input().split(' '))\n        f[d] = p\n    Q = int(input())\n    for i in range(Q):\n        (a, b) = map(int, input().split())\n        ans = 0\n        for elem in f:\n            if elem <= a:\n                ans += f[elem]\n        if ans >= b:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "T = int(input())\nfor i in range(T):\n    j_s = {}\n    l_y = {}\n    D = int(input())\n    for j in range(D):\n        L = list(map(int, input().split()))\n        j_s[L[0]] = L[1]\n    Q = int(input())\n    for i in range(Q):\n        (a, b) = map(int, input().split())\n        ans = 0\n        for elem in j_s:\n            if elem <= a:\n                ans += j_s[elem]\n        if ans >= b:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "T = int(input())\nfor i in range(T):\n    j_s = {}\n    l_y = {}\n    D = int(input())\n    for j in range(D):\n        L = list(map(int, input().split()))\n        j_s[L[0]] = L[1]\n    Q = int(input())\n    for i in range(Q):\n        (a, b) = map(int, input().split())\n        ans = 0\n        for elem in j_s:\n            if elem <= a:\n                ans += j_s[elem]\n        if ans >= b:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "t = int(input())\nfor _ in range(t):\n    d = int(input())\n    problems = []\n    for i in range(d):\n        temp = list(map(int, input().split()))\n        problems.append(temp)\n    q = int(input())\n    for j in range(q):\n        (date, req) = map(int, input().split())\n        ans = 0\n        for i in range(d):\n            if problems[i][0] <= date:\n                ans += problems[i][1]\n        if ans >= req:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    D = int(input())\n    l1 = []\n    for j in range(D):\n        l1.append(list(map(int, input().split())))\n    Q = int(input())\n    for j in range(Q):\n        sum = 0\n        l2 = list(map(int, input().split()))\n        for j in range(D):\n            if l1[j][0] <= l2[0]:\n                sum = sum + l1[j][1]\n        if sum >= l2[1]:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "t = int(input())\nfor i in range(t):\n    D = int(input())\n    sched = {}\n    for d in range(1, D + 1):\n        (d, prob) = [int(x) for x in input().split()]\n        sched[d] = prob\n    Q = int(input())\n    for scen in range(1, Q + 1):\n        (dead, req) = [int(x) for x in input().split()]\n        solved = 0\n        for day in sched:\n            if day <= dead:\n                solved += sched[day]\n        if solved >= req:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    D = int(input())\n    l1 = []\n    for j in range(D):\n        l1.append(list(map(int, input().split())))\n    Q = int(input())\n    for j in range(Q):\n        sum = 0\n        l2 = list(map(int, input().split()))\n        for j in range(D):\n            if l1[j][0] <= l2[0]:\n                sum = sum + l1[j][1]\n        if sum >= l2[1]:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for p in range(int(input())):\n    k = int(input())\n    a = {}\n    for i in range(k):\n        (m, n) = map(int, input().split())\n        a[m] = n\n    c = int(input())\n    for i in range(c):\n        (m, n) = map(int, input().split())\n        t = 0\n        for j in a:\n            if m >= j:\n                t += a[j]\n        if t >= n:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    da = int(input())\n    d = [0] * 40\n    for i in range(da):\n        (x, z) = map(int, input().split())\n        d[x] = z\n    q = int(input())\n    for i in range(q):\n        (x, z) = map(int, input().split())\n        if sum(d[0:x + 1]) >= z:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    da = int(input())\n    d = [0] * 40\n    for i in range(da):\n        (x, z) = map(int, input().split())\n        d[x] = z\n    q = int(input())\n    for i in range(q):\n        (x, z) = map(int, input().split())\n        if sum(d[0:x + 1]) >= z:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "t = int(input())\nfor i in range(t):\n    k = int(input())\n    l1 = []\n    for i in range(k):\n        l1.append(list(map(int, input().split())))\n    q = int(input())\n    for i in range(q):\n        s = 0\n        l2 = list(map(int, input().split()))\n        for j in range(k):\n            if l1[j][0] <= l2[0]:\n                s = s + l1[j][1]\n        if s >= l2[1]:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "n = int(input())\nfor x in range(n):\n    n1 = int(input())\n    l1 = []\n    for y in range(n1):\n        l1.append(list(map(int, input().split())))\n    for y in range(int(input())):\n        l2 = list(map(int, input().split()))\n        s = 0\n        s1 = 0\n        for i in l1:\n            if i[0] <= l2[0]:\n                s1 = s1 + i[1]\n                if s1 >= l2[1]:\n                    s = 1\n                    break\n        if s == 0:\n            print('Go Sleep')\n        else:\n            print('Go Camp')", "T = int(input())\nfor _ in range(0, T):\n    D = int(input())\n    ld = []\n    lp = []\n    for i in range(0, D):\n        (d, p) = map(int, input().split())\n        ld.append(d)\n        lp.append(p)\n    Q = int(input())\n    ldead = []\n    lreq = []\n    for i in range(0, Q):\n        (dead, req) = map(int, input().split())\n        ldead.append(dead)\n        lreq.append(req)\n    for i in range(0, Q):\n        q = 0\n        for w in range(0, D):\n            if ld[w] <= ldead[i]:\n                q += lp[w]\n        if q >= lreq[i]:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    l = []\n    for x in range(n):\n        l.append(list(map(int, input().split())))\n    ind = 0\n    m = int(input())\n    while m != 0:\n        s = 0\n        (d, p) = map(int, input().split())\n        for j in range(ind, n):\n            if l[j][0] <= d:\n                s += l[j][1]\n            else:\n                break\n        if s >= p:\n            print('Go Camp')\n        else:\n            print('Go Sleep')\n        m -= 1\n    t -= 1", "for i in range(int(input())):\n    d = int(input())\n    c = []\n    for j in range(d):\n        c.append(list(map(int, input().split(' '))))\n    q = int(input())\n    e = []\n    for j in range(q):\n        e.append(list(map(int, input().split(' '))))\n    for j in range(q):\n        s = 0\n        p = e[j][0]\n        for k in range(d):\n            if c[k][0] > p:\n                break\n            s = s + c[k][1]\n        if s >= e[j][1]:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for z in range(int(input())):\n    d = {}\n    for i in range(1, 32):\n        d[i] = 0\n    for y in range(int(input())):\n        (a, k) = list(map(int, input().split()))\n        for i in range(a, 32):\n            d[i] += k\n    for q in range(int(input())):\n        (m, n) = list(map(int, input().split()))\n        if d[m] < n:\n            print('Go Sleep')\n        else:\n            print('Go Camp')", "for _ in range(int(input())):\n    d = int(input())\n    b = {}\n    for i in range(d):\n        (n, p) = map(int, input().split())\n        b[n] = p\n    q = int(input())\n    for j in range(q):\n        (dead, req) = map(int, input().split())\n        solved = 0\n        for k in b.keys():\n            if k <= dead:\n                solved += b[k]\n            else:\n                break\n        print('Go Camp' if solved >= req else 'Go Sleep')", "for _ in range(int(input())):\n    d = int(input())\n    b = {}\n    for i in range(d):\n        (n, p) = map(int, input().split())\n        b[n] = p\n    q = int(input())\n    for j in range(q):\n        (dead, req) = map(int, input().split())\n        solved = 0\n        for k in b.keys():\n            if k <= dead:\n                solved += b[k]\n            else:\n                break\n        print('Go Camp' if solved >= req else 'Go Sleep')", "for _ in range(int(input())):\n    N = int(input())\n    S = {}\n    for i in range(N):\n        (d, p) = map(int, input().split())\n        S[d] = p\n    Q = int(input())\n    for q in range(Q):\n        (d, p) = map(int, input().split())\n        solved = 0\n        for i in S.keys():\n            if i <= d:\n                solved += S[i]\n            else:\n                break\n        print('Go Camp' if solved >= p else 'Go Sleep')", "(t, i) = (int(input()), 1)\n(j, k, d, solved) = (1, 1, {}, 0)\nwhile i <= t:\n    days = int(input())\n    while j <= days:\n        pd = list(map(int, input().split()))\n        d[pd[0]] = pd[1]\n        j += 1\n    scenarios = int(input())\n    while k <= scenarios:\n        sd = list(map(int, input().split()))\n        for key in d.keys():\n            if key <= sd[0]:\n                solved += d[key]\n        if solved >= sd[1]:\n            print('Go Camp')\n        else:\n            print('Go Sleep')\n        solved = 0\n        k += 1\n    (j, k, d) = (1, 1, {})\n    i += 1", "for _ in range(int(input())):\n    da = int(input())\n    d = [0] * 40\n    for i in range(da):\n        (x, z) = map(int, input().split())\n        d[x] = z\n    q = int(input())\n    for i in range(q):\n        (x, z) = map(int, input().split())\n        if sum(d[0:x + 1]) >= z:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    l = []\n    for i in range(int(input())):\n        (d, p) = map(int, input().split())\n        l.append([d, p])\n    for q in range(int(input())):\n        (dead, req) = map(int, input().split())\n        (cnt, i) = (0, 0)\n        while i < len(l):\n            if l[i][0] > dead:\n                break\n            elif l[i][0] <= dead:\n                cnt = cnt + l[i][1]\n            i = i + 1\n        if cnt >= req:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    N = int(input())\n    S = {}\n    for i in range(N):\n        (d, p) = map(int, input().split())\n        S[d] = p\n    Q = int(input())\n    for q in range(Q):\n        (d, p) = map(int, input().split())\n        s = 0\n        for i in S.keys():\n            if i <= d:\n                s += S[i]\n            else:\n                break\n        print('Go Camp' if s >= p else 'Go Sleep')", "for _ in range(int(input())):\n    days = int(input())\n    total_sums = [0] * 31\n    for __ in range(days):\n        (day, prob) = map(int, input().split())\n        total_sums[day - 1] = prob\n    for i in range(int(input())):\n        (day, pass_) = map(int, input().split())\n        if sum(total_sums[:day]) >= pass_:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "t = input()\nfor c in range(0, int(t)):\n    days = int(input())\n    solved_arr = [0] * 31\n    for j in range(days):\n        (day, problems) = map(int, input().split())\n        solved_arr[day - 1] = problems\n    scenarios = int(input())\n    for j in range(scenarios):\n        (day, required) = map(int, input().split())\n        if sum(solved_arr[:day]) >= required:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "tests = int(input())\nfor i in range(tests):\n    days = int(input())\n    solved_arr = [0] * 31\n    for j in range(days):\n        (day, problems) = map(int, input().split())\n        solved_arr[day - 1] = problems\n    scenarios = int(input())\n    for j in range(scenarios):\n        (day, required) = map(int, input().split())\n        if sum(solved_arr[:day]) >= required:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "tests = int(input())\nfor i in range(tests):\n    days = int(input())\n    solved_arr = [0] * 31\n    for j in range(days):\n        (day, problems) = map(int, input().split())\n        solved_arr[day - 1] = problems\n    scenarios = int(input())\n    for j in range(scenarios):\n        (day, required) = map(int, input().split())\n        if sum(solved_arr[:day]) >= required:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "tests = int(input())\nfor i in range(tests):\n    days = int(input())\n    solved_arr = [0] * 31\n    for j in range(days):\n        (day, problems) = map(int, input().split())\n        solved_arr[day - 1] = problems\n    scenarios = int(input())\n    for j in range(scenarios):\n        (day, required) = map(int, input().split())\n        if sum(solved_arr[:day]) >= required:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "tests = int(input())\nfor i in range(tests):\n    days = int(input())\n    solved_arr = [0] * 31\n    for j in range(days):\n        (day, problems) = map(int, input().split())\n        solved_arr[day - 1] = problems\n    scenarios = int(input())\n    for j in range(scenarios):\n        (day, required) = map(int, input().split())\n        if sum(solved_arr[:day]) >= required:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    n = int(input())\n    (d, s) = ({}, 0)\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        s += b\n        d[a] = s\n    n1 = int(input())\n    for _ in range(n1):\n        (a, b) = map(int, input().split())\n        for i in d:\n            if i <= a:\n                if d[i] >= b:\n                    print('Go Camp')\n                    break\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    n = int(input())\n    (d, s) = ({}, 0)\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        s += b\n        d[a] = s\n    n1 = int(input())\n    for _ in range(n1):\n        (a, b) = map(int, input().split())\n        if a < min(d):\n            print('Go Sleep')\n        else:\n            for i in d:\n                if i <= a:\n                    if d[i] >= b:\n                        print('Go Camp')\n                        break\n            else:\n                print('Go Sleep')", "t = int(input())\nfor i in range(t):\n    d = int(input())\n    days = []\n    quesn = []\n    sum = 0\n    ans = False\n    for i in range(d):\n        (di, pi) = map(int, input().split())\n        days.append(di)\n        sum += pi\n        quesn.append(sum)\n    for i in range(int(input())):\n        flag = 0\n        (deadi, reqi) = map(int, input().split())\n        for j in range(len(days)):\n            if days[j] <= deadi:\n                if quesn[j] >= reqi:\n                    print('Go Camp')\n                    flag = 1\n                    break\n        if flag == 0:\n            print('Go Sleep')", "t = int(input())\nfor i in range(t):\n    d = int(input())\n    days = []\n    quesn = []\n    for i in range(d):\n        (di, pi) = map(int, input().split())\n        days.append(di)\n        quesn.append(pi)\n    q = int(input())\n    for i in range(q):\n        flag = 0\n        t = 0\n        (deadi, reqi) = map(int, input().split())\n        for j in range(len(days)):\n            if days[j] <= deadi:\n                t += quesn[j]\n            else:\n                break\n        if t < reqi:\n            print('Go Sleep')\n        else:\n            print('Go Camp')", "for _ in range(int(input())):\n    sdl = int(input())\n    days = []\n    sol = [0]\n    for i in range(sdl):\n        (a, b) = map(int, input().split())\n        days.append(a)\n        sol.append(b + sol[i])\n    sol.pop(0)\n    for _ in range(int(input())):\n        (dead, req) = map(int, input().split())\n        flg = True\n        for (i, j) in zip(days, sol):\n            val = dead - i\n            if val < 0 and flg:\n                print('Go Sleep')\n                break\n            elif val >= 0:\n                flg = False\n                if j >= req:\n                    print('Go Camp')\n                    break\n        else:\n            print('Go Sleep')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = []\n    for j in range(n):\n        a = list(map(int, input().split()))\n        b = []\n        for k in range(2):\n            b.append(a[k])\n        l.append(b)\n    m = int(input())\n    c = []\n    for j in range(m):\n        a = list(map(int, input().split()))\n        b = []\n        for k in range(2):\n            b.append(a[k])\n        c.append(b)\n    for j in range(m):\n        flag = x = y = 0\n        for k in range(n):\n            x = l[k][0]\n            y = y + l[k][1]\n            if x <= c[j][0]:\n                if y >= c[j][1]:\n                    print('Go Camp')\n                    flag = 1\n                    break\n        if flag == 0:\n            print('Go Sleep')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = []\n    for j in range(n):\n        a = list(map(int, input().split()))\n        b = []\n        for k in range(2):\n            b.append(a[k])\n        l.append(b)\n    m = int(input())\n    c = []\n    for j in range(m):\n        a = list(map(int, input().split()))\n        b = []\n        for k in range(2):\n            b.append(a[k])\n        c.append(b)\n    for j in range(m):\n        flag = x = y = 0\n        for k in range(n):\n            x = l[k][0]\n            y = y + l[k][1]\n            if x <= c[j][0]:\n                if y >= c[j][1]:\n                    print('Go Camp')\n                    flag = 1\n                    break\n        if flag == 0:\n            print('Go Sleep')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = []\n    for j in range(n):\n        a = list(map(int, input().split()))\n        b = []\n        for k in range(2):\n            b.append(a[k])\n        l.append(b)\n    m = int(input())\n    c = []\n    for j in range(m):\n        a = list(map(int, input().split()))\n        b = []\n        for k in range(2):\n            b.append(a[k])\n        c.append(b)\n    for j in range(m):\n        flag = x = y = 0\n        for k in range(n):\n            x = l[k][0]\n            y = y + l[k][1]\n            if x <= c[j][0]:\n                if y >= c[j][1]:\n                    print('Go Camp')\n                    flag = 1\n                    break\n        if flag == 0:\n            print('Go Sleep')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = []\n    for j in range(n):\n        a = list(map(int, input().split()))\n        b = []\n        for k in range(2):\n            b.append(a[k])\n        l.append(b)\n    m = int(input())\n    c = []\n    for j in range(m):\n        a = list(map(int, input().split()))\n        b = []\n        for k in range(2):\n            b.append(a[k])\n        c.append(b)\n    for j in range(m):\n        flag = x = y = 0\n        for k in range(n):\n            x = l[k][0]\n            y = y + l[k][1]\n            if x <= c[j][0]:\n                if y >= c[j][1]:\n                    print('Go Camp')\n                    flag = 1\n                    break\n        if flag == 0:\n            print('Go Sleep')", "for _ in range(int(input())):\n    d = int(input())\n    arr = []\n    for i in range(d):\n        arr.append([int(i) for i in input().split()])\n    q = int(input())\n    dead = []\n    for i in range(q):\n        dead.append([int(i) for i in input().split()])\n    for i in range(q):\n        flag = True\n        solved = 0\n        for j in range(d):\n            if arr[j][0] <= dead[i][0]:\n                solved += arr[j][1]\n            if solved >= dead[i][1]:\n                flag = False\n                break\n        if flag:\n            print('Go Sleep')\n        else:\n            print('Go Camp')", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    points = []\n    days = []\n    for z in range(n):\n        (d, p) = map(int, input().split())\n        points.append(p)\n        days.append(d)\n    hg = int(input())\n    for ap in range(hg):\n        (o, p2) = map(int, input().split())\n        sumer = 0\n        for ao in days:\n            if o >= ao:\n                sumer += points[days.index(ao)]\n        if sumer >= p2:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "t = int(input())\nfor tc in range(t):\n    plan = {}\n    d = int(input())\n    for day in range(d):\n        (di, pi) = map(int, input().split())\n        plan[di] = pi\n    q = int(input())\n    for dead in range(q):\n        (deadi, reqi) = map(int, input().split())\n        print('Go Camp' if sum((plan[day] for day in filter(lambda x: x <= deadi, plan.keys()))) >= reqi else 'Go Sleep')", "t = int(input())\nfor tc in range(t):\n    plan = {}\n    d = int(input())\n    for day in range(d):\n        (di, pi) = map(int, input().split())\n        plan[di] = pi\n    q = int(input())\n    for dead in range(q):\n        (deadi, reqi) = map(int, input().split())\n        print('Go Camp' if sum((plan[day] for day in filter(lambda x: x <= deadi, plan.keys()))) >= reqi else 'Go Sleep')", "t = int(input())\nwhile t:\n    D = int(input())\n    d = {}\n    for i in range(D):\n        (x, y) = [int(i) for i in input().split()]\n        d[x] = y\n    q = int(input())\n    for i in range(q):\n        (x, y) = [int(i) for i in input().split()]\n        ans = 0\n        for (key, val) in d.items():\n            if x >= key:\n                ans += val\n        if ans >= y:\n            print('Go Camp')\n        else:\n            print('Go Sleep')\n    t -= 1", "def solve(days_list, pro_list, di, ri):\n    ans = 0\n    n = len(days_list)\n    for i in range(n):\n        if di < days_list[i]:\n            break\n        else:\n            ans += pro_list[i]\n    if ans >= ri:\n        print('Go Camp')\n    else:\n        print('Go Sleep')\nfor _ in range(int(input(''))):\n    days_list = []\n    pro_list = []\n    for a in range(int(input(''))):\n        (d, p) = map(int, input('').split())\n        days_list.append(d)\n        pro_list.append(p)\n    for b in range(int(input(''))):\n        (di, ri) = map(int, input('').split())\n        solve(days_list, pro_list, di, ri)", "def solve(days_list, pro_list, di, ri):\n    ans = 0\n    n = len(days_list)\n    for i in range(n):\n        if di < days_list[i]:\n            break\n        else:\n            ans += pro_list[i]\n    if ans >= ri:\n        print('Go Camp')\n    else:\n        print('Go Sleep')\nfor _ in range(int(input(''))):\n    days_list = []\n    pro_list = []\n    for a in range(int(input(''))):\n        (d, p) = map(int, input('').split())\n        days_list.append(d)\n        pro_list.append(p)\n    for b in range(int(input(''))):\n        (di, ri) = map(int, input('').split())\n        solve(days_list, pro_list, di, ri)", "def solve(days_list, pro_list, di, ri):\n    ans = 0\n    n = len(days_list)\n    for i in range(n):\n        if di < days_list[i]:\n            break\n        else:\n            ans += pro_list[i]\n    if ans >= ri:\n        print('Go Camp')\n    else:\n        print('Go Sleep')\nfor _ in range(int(input(''))):\n    days_list = []\n    pro_list = []\n    for a in range(int(input(''))):\n        (d, p) = map(int, input('').split())\n        days_list.append(d)\n        pro_list.append(p)\n    for b in range(int(input(''))):\n        (di, ri) = map(int, input('').split())\n        solve(days_list, pro_list, di, ri)", "for _ in range(int(input())):\n    f = [0] * 32\n    d = int(input())\n    for i in range(d):\n        (d1, p1) = map(int, input().split())\n        f[d1] = p1\n    for i in range(int(input())):\n        (de, r) = map(int, input().split())\n        total = 0\n        for j in range(de + 1):\n            total += f[j]\n        if total >= r:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    da = int(input())\n    d = [0] * 40\n    for i in range(da):\n        (x, z) = map(int, input().split())\n        d[x] = z\n    q = int(input())\n    for i in range(q):\n        (x, z) = map(int, input().split())\n        if sum(d[0:x + 1]) >= z:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    da = int(input())\n    d = [0] * 40\n    for i in range(da):\n        (x, z) = map(int, input().split())\n        d[x] = z\n    q = int(input())\n    for i in range(q):\n        (x, z) = map(int, input().split())\n        if sum(d[0:x + 1]) >= z:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for t in range(int(input())):\n    D = int(input())\n    schedule = []\n    for i in range(D):\n        schedule.append([int(x) for x in input().split()])\n    Q = int(input())\n    for i in range(Q):\n        (dead, req) = [int(x) for x in input().split()]\n        Jafars_solved_problems = 0\n        for s in schedule:\n            if s[0] > dead:\n                break\n            Jafars_solved_problems += s[1]\n        if Jafars_solved_problems >= req:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    da = int(input())\n    d = [0] * 40\n    for i in range(da):\n        (x, z) = map(int, input().split())\n        d[x] = z\n    q = int(input())\n    for i in range(q):\n        (x, z) = map(int, input().split())\n        if sum(d[0:x + 1]) >= z:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "T = int(input())\nfor tj in range(T):\n    n_days = int(input())\n    tracking_list = []\n    for i in range(n_days):\n        (di, pi) = map(int, input().split())\n        tracking_list.append([di, pi])\n    Q = int(input())\n    scenarios = []\n    for i in range(Q):\n        (deadi, reqi) = map(int, input().split())\n        scenarios.append([deadi, reqi])\n    for i in range(Q):\n        count = 0\n        for j in range(n_days):\n            if tracking_list[j][0] <= scenarios[i][0]:\n                count += tracking_list[j][1]\n        if count >= scenarios[i][1]:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "T = int(input())\nfor tj in range(T):\n    n_days = int(input())\n    tracking_list = []\n    for i in range(n_days):\n        (di, pi) = map(int, input().split())\n        tracking_list.append([di, pi])\n    Q = int(input())\n    scenarios = []\n    for i in range(Q):\n        (deadi, reqi) = map(int, input().split())\n        scenarios.append([deadi, reqi])\n    for i in range(Q):\n        count = 0\n        for j in range(n_days):\n            if tracking_list[j][0] <= scenarios[i][0]:\n                count += tracking_list[j][1]\n        if count >= scenarios[i][1]:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    (d, q) = ([], [])\n    (continueloop, problemsolved) = (True, 0)\n    for _ in range(int(input())):\n        m = [int(x) for x in input().split(' ')]\n        d.append(m)\n    for _ in range(int(input())):\n        q = [int(x) for x in input().split(' ')]\n        problemsolved = 0\n        for i in d:\n            if q[0] < i[0]:\n                break\n            else:\n                problemsolved += i[1]\n        if problemsolved < q[1]:\n            print('Go Sleep')\n        else:\n            print('Go Camp')", "for _ in range(int(input())):\n    (d, q) = ([], [])\n    (continueloop, problemsolved) = (True, 0)\n    for _ in range(int(input())):\n        m = [int(x) for x in input().split(' ')]\n        d.append(m)\n    for _ in range(int(input())):\n        q = [int(x) for x in input().split(' ')]\n        problemsolved = 0\n        for i in d:\n            if q[0] < i[0]:\n                break\n            else:\n                problemsolved += i[1]\n        if problemsolved < q[1]:\n            print('Go Sleep')\n        else:\n            print('Go Camp')", "for _ in range(int(input())):\n    (d, q) = ([], [])\n    (continueloop, problemsolved) = (True, 0)\n    for _ in range(int(input())):\n        m = [int(x) for x in input().split(' ')]\n        d.append(m)\n    for _ in range(int(input())):\n        q = [int(x) for x in input().split(' ')]\n        problemsolved = 0\n        for i in d:\n            if q[0] < i[0]:\n                break\n            else:\n                problemsolved += i[1]\n        if problemsolved < q[1]:\n            print('Go Sleep')\n        else:\n            print('Go Camp')", "for _ in range(int(input())):\n    (d, q) = ([], [])\n    (continueloop, problemsolved) = (True, 0)\n    for _ in range(int(input())):\n        m = [int(x) for x in input().split(' ')]\n        d.append(m)\n    for _ in range(int(input())):\n        q = [int(x) for x in input().split(' ')]\n        problemsolved = 0\n        for i in d:\n            if q[0] < i[0]:\n                break\n            else:\n                problemsolved += i[1]\n        if problemsolved < q[1]:\n            print('Go Sleep')\n        else:\n            print('Go Camp')", "for _ in range(int(input())):\n    (d, q) = ([], [])\n    (continueloop, problemsolved) = (True, 0)\n    for _ in range(int(input())):\n        m = [int(x) for x in input().split(' ')]\n        d.append(m)\n    for _ in range(int(input())):\n        q = [int(x) for x in input().split(' ')]\n        problemsolved = 0\n        for i in d:\n            if q[0] < i[0]:\n                break\n            else:\n                problemsolved += i[1]\n        if problemsolved < q[1]:\n            print('Go Sleep')\n        else:\n            print('Go Camp')", "for _ in range(int(input())):\n    (D, P) = ([], [])\n    for _ in range(int(input())):\n        (d, p) = map(int, input().split())\n        D.append(d)\n        P.append(p)\n    for _ in range(int(input())):\n        f = 0\n        (de, re) = map(int, input().split())\n        p = 0\n        for i in range(len(D)):\n            if de < D[i]:\n                break\n            else:\n                p += P[i]\n        if p < re:\n            print('Go Sleep')\n        else:\n            print('Go Camp')", "import numpy as np\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    c = []\n    s = []\n    for j in range(0, n):\n        b = list(map(int, input().split()))\n        a = np.array(b)\n        c.append(a[0])\n        s.append(a[1])\n    m = np.array(c)\n    p = np.array(s)\n    q = int(input())\n    for j in range(0, q):\n        g = list(map(int, input().split()))\n        f = np.array(g)\n        d = f[0]\n        r = f[1]\n        count = 0\n        for l in range(0, n):\n            if d < m[l]:\n                break\n            count = count + p[l]\n        if count >= r:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "import numpy as np\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    c = []\n    s = []\n    for j in range(0, n):\n        b = list(map(int, input().split()))\n        a = np.array(b)\n        c.append(a[0])\n        s.append(a[1])\n    m = np.array(c)\n    p = np.array(s)\n    q = int(input())\n    for j in range(0, q):\n        g = list(map(int, input().split()))\n        f = np.array(g)\n        d = f[0]\n        r = f[1]\n        count = 0\n        for l in range(0, n):\n            if d < m[l]:\n                break\n            count = count + p[l]\n        if count >= r:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = [0] * 31\n    s = 0\n    for j in range(n):\n        (a, b) = map(int, input().split())\n        s += b\n        l[a - 1:] = [s] * len(l[a - 1:])\n    d = int(input())\n    for j in range(d):\n        (c, d) = map(int, input().split())\n        if l[c - 1] >= d:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    a = [0] * 31\n    b = 0\n    for i in range(int(input())):\n        (c, d) = map(int, input().split())\n        b += d\n        a[c - 1] = b\n    for i in range(int(input())):\n        (c, d) = map(int, input().split())\n        if max(a[:c]) >= d:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    a = [0] * 31\n    b = 0\n    for i in range(int(input())):\n        (c, d) = map(int, input().split())\n        b += d\n        a[c - 1:] = [b] * len(a[c - 1:])\n    for i in range(int(input())):\n        (c, d) = map(int, input().split())\n        if a[c - 1] >= d:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "t = int(input())\nfor test in range(t):\n    d = int(input())\n    (schedule, scenarios, achieve) = ([], [], [])\n    for i in range(d):\n        schedule.append(tuple(map(int, input().split())))\n    q = int(input())\n    for i in range(q):\n        scenarios.append(tuple(map(int, input().split())))\n    schedule = sorted(schedule, key=lambda x: x[0])\n    (j, solved) = (0, 0)\n    for i in range(1, 32):\n        if j < d:\n            if schedule[j][0] == i:\n                solved += schedule[j][1]\n                j += 1\n        achieve.append(solved)\n    for (day, target) in scenarios:\n        if achieve[day - 1] >= target:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "t = int(input())\nfor test in range(t):\n    d = int(input())\n    (schedule, scenarios, achieve) = ([], [], [])\n    for i in range(d):\n        schedule.append(tuple(map(int, input().split())))\n    q = int(input())\n    for i in range(q):\n        scenarios.append(tuple(map(int, input().split())))\n    schedule = sorted(schedule, key=lambda x: x[0])\n    (j, solved) = (0, 0)\n    for i in range(1, 32):\n        if j < d:\n            if schedule[j][0] == i:\n                solved += schedule[j][1]\n                j += 1\n        achieve.append(solved)\n    for (day, target) in scenarios:\n        if achieve[day - 1] >= target:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    data = int(input())\n    d = [0] * 40\n    for i in range(data):\n        (x, z) = map(int, input().split())\n        d[x] = z\n    q = int(input())\n    for i in range(q):\n        (x, z) = map(int, input().split())\n        if sum(d[0:x + 1]) >= z:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    day = int(input())\n    xd = []\n    temp_num = 0\n    temp_day = 1\n    for i in range(day):\n        (d, p) = map(int, input().split())\n        xd += [temp_num] * (d - temp_day)\n        temp_day = d\n        temp_num += p\n    xd += [temp_num] * (32 - temp_day)\n    q = int(input())\n    for i in range(q):\n        (dead, req) = map(int, input().split())\n        if xd[dead - 1] >= req:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    day = int(input())\n    xd = []\n    temp_num = 0\n    temp_day = 1\n    for i in range(day):\n        (d, p) = map(int, input().split())\n        xd += [temp_num] * (d - temp_day)\n        temp_day = d\n        temp_num += p\n    xd += [temp_num] * (32 - temp_day)\n    q = int(input())\n    for i in range(q):\n        (dead, req) = map(int, input().split())\n        if xd[dead - 1] >= req:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "t = int(input())\nfor test in range(t):\n    d = int(input())\n    (schedule, scenarios, achieve) = ([], [], [])\n    for i in range(d):\n        schedule.append(tuple(map(int, input().split())))\n    q = int(input())\n    for i in range(q):\n        scenarios.append(tuple(map(int, input().split())))\n    schedule = sorted(schedule, key=lambda x: x[0])\n    (j, solved) = (0, 0)\n    for i in range(1, 32):\n        if j < d:\n            if schedule[j][0] == i:\n                solved += schedule[j][1]\n                j += 1\n        achieve.append(solved)\n    for (day, target) in scenarios:\n        if achieve[day - 1] >= target:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    data = int(input())\n    d = [0] * 40\n    for i in range(data):\n        (x, z) = map(int, input().split())\n        d[x] = z\n    q = int(input())\n    for i in range(q):\n        (x, z) = map(int, input().split())\n        if sum(d[0:x + 1]) >= z:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    data = int(input())\n    d = [0] * 40\n    for i in range(data):\n        (x, z) = map(int, input().split())\n        d[x] = z\n    q = int(input())\n    for i in range(q):\n        (x, z) = map(int, input().split())\n        if sum(d[0:x + 1]) >= z:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    da = int(input())\n    d = [0] * 40\n    for i in range(da):\n        (x, z) = map(int, input().split())\n        d[x] = z\n    q = int(input())\n    for i in range(q):\n        (x, z) = map(int, input().split())\n        if sum(d[0:x + 1]) >= z:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for t in range(int(input())):\n    n = int(input())\n    x = [0] * 31\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        for j in range(a - 1, 31):\n            x[j] += b\n    n1 = int(input())\n    for i in range(n1):\n        (a1, b1) = map(int, input().split())\n        if x[a1 - 1] < b1:\n            print('Go Sleep')\n        else:\n            print('Go Camp')", "for t in range(int(input())):\n    n = int(input())\n    x = [0] * 31\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        for j in range(a - 1, 31):\n            x[j] += b\n    n1 = int(input())\n    for i in range(n1):\n        (a1, b1) = map(int, input().split())\n        if x[a1 - 1] < b1:\n            print('Go Sleep')\n        else:\n            print('Go Camp')", "for _ in range(int(input())):\n    data = int(input())\n    d = [0] * 40\n    for i in range(data):\n        (x, z) = map(int, input().split())\n        d[x] = z\n    q = int(input())\n    for i in range(q):\n        (x, z) = map(int, input().split())\n        if sum(d[0:x + 1]) >= z:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    data = int(input())\n    d = [0] * 40\n    for i in range(data):\n        (x, z) = map(int, input().split())\n        d[x] = z\n    q = int(input())\n    for i in range(q):\n        (x, z) = map(int, input().split())\n        if sum(d[0:x + 1]) >= z:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    data = int(input())\n    d = [0] * 40\n    for i in range(data):\n        (x, z) = map(int, input().split())\n        d[x] = z\n    q = int(input())\n    for i in range(q):\n        (x, z) = map(int, input().split())\n        if sum(d[0:x + 1]) >= z:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "t = int(input())\nfor test in range(t):\n    d = int(input())\n    (schedule, scenarios, achieve) = ([], [], [])\n    for i in range(d):\n        schedule.append(tuple(map(int, input().split())))\n    q = int(input())\n    for i in range(q):\n        scenarios.append(tuple(map(int, input().split())))\n    schedule = sorted(schedule, key=lambda x: x[0])\n    (j, solved) = (0, 0)\n    for i in range(1, 32):\n        if j < d:\n            if schedule[j][0] == i:\n                solved += schedule[j][1]\n                j += 1\n        achieve.append(solved)\n    for (day, target) in scenarios:\n        if achieve[day - 1] >= target:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    da = int(input())\n    d = [0] * 40\n    for i in range(da):\n        (x, z) = map(int, input().split())\n        d[x] = z\n    q = int(input())\n    for i in range(q):\n        (x, z) = map(int, input().split())\n        if sum(d[0:x + 1]) >= z:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    m = [0] * 32\n    for i in range(n):\n        (t1, t2) = [int(x) for x in input().split()]\n        m[t1] = t2\n    k = int(input())\n    for i in range(k):\n        (t1, t2) = [int(x) for x in input().split()]\n        ts = sum(m[:t1 + 1])\n        if t2 <= ts:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for i in range(int(input())):\n    n = int(input())\n    d = []\n    p = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        d.append(a)\n        p.append(b)\n    q = int(input())\n    for j in range(q):\n        (dead, req) = map(int, input().split())\n        i = 0\n        c = 0\n        while i < n and d[i] <= dead:\n            c += p[i]\n            i += 1\n        if c >= req:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "t = int(input())\nfor i in range(t):\n    b = int(input())\n    d = []\n    p = []\n    for j in range(b):\n        (m, n) = map(int, input().split())\n        d.append(m)\n        p.append(n)\n    c = int(input())\n    dead = []\n    req = []\n    for k in range(c):\n        (dead, req) = map(int, input().split())\n        l = 0\n        n = 0\n        while l < b and dead >= d[l]:\n            n = n + p[l]\n            l = l + 1\n        if n >= req:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "for _ in range(int(input())):\n    n = int(input())\n    d = []\n    p = []\n    for j in range(n):\n        (a, b) = map(int, input().split())\n        d.append(a)\n        p.append(b)\n    q = int(input())\n    for j in range(q):\n        (dead, req) = map(int, input().split())\n        i = 0\n        c = 0\n        while i < n and d[i] <= dead:\n            c += p[i]\n            i += 1\n        if c >= req:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    d = []\n    p = []\n    for j in range(n):\n        (a, b) = [int(i) for i in input().split()]\n        d.append(a)\n        p.append(b)\n    q = int(input())\n    for j in range(q):\n        (dead, req) = [int(i) for i in input().split()]\n        i = 0\n        c = 0\n        while i < n and d[i] <= dead:\n            c += p[i]\n            i += 1\n        if c >= req:\n            print('Go Camp')\n        else:\n            print('Go Sleep')", "subtask = int(input())\nfor i in range(subtask):\n    planning = dict()\n    D = int(input())\n    for j in range(D):\n        (d, q) = [int(k) for k in input().split()]\n        planning[d] = q\n    Q = int(input())\n    for j in range(Q):\n        criteria = 0\n        (rd, rq) = [int(k) for k in input().split()]\n        for item in planning:\n            if item <= rd:\n                criteria += planning[item]\n        if criteria >= rq:\n            print('Go Camp')\n        else:\n            print('Go Sleep')"]