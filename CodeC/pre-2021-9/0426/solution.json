["for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [0] * m\n    b = [True] * m\n    count = 0\n    for i in range(2, m):\n        if b[i]:\n            a[i] += 1\n            for j in range(2 * i, m, i):\n                b[j] = False\n                a[j] += 1\n    for i in range(n, m):\n        count += a[i]\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [0] * m\n    b = [True] * m\n    count = 0\n    for i in range(2, m):\n        if b[i]:\n            a[i] += 1\n            for j in range(2 * i, m, i):\n                b[j] = False\n                a[j] += 1\n    for i in range(n, m):\n        count += a[i]\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [0] * m\n    b = [True] * m\n    count = 0\n    for i in range(2, m):\n        if b[i]:\n            a[i] += 1\n            for j in range(2 * i, m, i):\n                b[j] = False\n                a[j] += 1\n    for i in range(n, m):\n        count += a[i]\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [0] * m\n    b = [True] * m\n    count = 0\n    for i in range(2, m):\n        if b[i]:\n            a[i] += 1\n            for j in range(2 * i, m, i):\n                b[j] = False\n                a[j] += 1\n    for i in range(n, m):\n        count += a[i]\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [0] * m\n    b = [True] * m\n    count = 0\n    for i in range(2, m):\n        if b[i]:\n            a[i] += 1\n            for j in range(2 * i, m, i):\n                b[j] = False\n                a[j] += 1\n    for i in range(n, m):\n        count += a[i]\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [0] * m\n    b = [True] * m\n    count = 0\n    for i in range(2, m):\n        if b[i]:\n            a[i] += 1\n            for j in range(2 * i, m, i):\n                b[j] = False\n                a[j] += 1\n    for i in range(n, m):\n        count += a[i]\n    print(count)", "x = 1000000\nl = [0] * (x + 1)\nfor i in range(2, x + 1):\n    if l[i] == 0:\n        j = 1\n        while i * j < x + 1:\n            l[i * j] = l[i * j] + 1\n            j = j + 1\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(n, m):\n        c = c + l[i]\n    print(c)", "x = 1000000\nl = [0] * (x + 1)\nfor i in range(2, x + 1):\n    if l[i] == 0:\n        j = 1\n        while i * j < x + 1:\n            l[i * j] = l[i * j] + 1\n            j = j + 1\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(n, m):\n        c = c + l[i]\n    print(c)", "x = 1000000\nl = [0] * (x + 1)\nfor i in range(2, x + 1):\n    if l[i] == 0:\n        j = 1\n        while i * j < x + 1:\n            l[i * j] = l[i * j] + 1\n            j = j + 1\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(n, m):\n        c = c + l[i]\n    print(c)", "t = int(input())\nfor i in range(t):\n    r = 0\n    (n, m) = map(int, input().split())\n    c = [0] * m\n    a = [True] * m\n    a[1] = False\n    for j in range(2, m):\n        if a[j]:\n            c[j] += 1\n            for k in range(2 * j, m, j):\n                a[k] = False\n                c[k] += 1\n    for z in range(n, m):\n        r += c[z]\n    print(r)", "arr = 1000000\nl = [0] * (arr + 1)\nfor i in range(2, arr + 1):\n    if l[i] == 0:\n        j = i\n        while j <= arr:\n            l[j] += 1\n            j += i\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(n, m):\n        c += l[i]\n    print(c)", "t = int(input())\nfor i in range(t):\n    r = 0\n    (n, m) = map(int, input().split())\n    c = [0] * m\n    a = [True] * m\n    a[1] = False\n    for j in range(2, m):\n        if a[j]:\n            c[j] += 1\n            for k in range(2 * j, m, j):\n                a[k] = False\n                c[k] += 1\n    for z in range(n, m):\n        r += c[z]\n    print(r)", "nn = 1000000\nl = [0] * (nn + 1)\nfor i in range(2, nn + 1):\n    if l[i] == 0:\n        j = 1\n        while i * j <= nn:\n            l[i * j] += 1\n            j += 1\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(n, m):\n        c += l[i]\n    print(c)", "def seive(m):\n    c = [0] * m\n    a = [True] * m\n    a[1] = False\n    for i in range(2, m):\n        if a[i]:\n            c[i] += 1\n            for j in range(2 * i, m, i):\n                a[j] = False\n                c[j] += 1\n    return c\nfor _ in range(int(input())):\n    result = 0\n    (n, m) = map(int, input().split())\n    c = seive(m)\n    for i in range(n, m):\n        result += c[i]\n    print(result)", "for _ in range(int(input())):\n    result = 0\n    (n, m) = map(int, input().split())\n    c = [0] * m\n    a = [True] * m\n    a[1] = False\n    for i in range(2, m):\n        if a[i]:\n            c[i] += 1\n            for j in range(2 * i, m, i):\n                a[j] = False\n                c[j] += 1\n    for i in range(n, m):\n        result += c[i]\n    print(result)", "prime_arr = [0] * (10 ** 6 + 1)\nfor i in range(2, 10 ** 6 + 1):\n    if prime_arr[i] == 0:\n        temp = i\n        while temp <= 10 ** 6:\n            prime_arr[temp] += 1\n            temp += i\ntests = int(input())\nfor i in range(tests):\n    ans = 0\n    (n, m) = map(int, input().split())\n    for j in range(n, m):\n        ans += prime_arr[j]\n    print(ans)", "prime_arr = [i for i in range(10 ** 6 + 1)]\nfor i in range(2, 10 ** 3 + 1):\n    if prime_arr[i] == i:\n        temp = i * i\n        while temp <= 10 ** 6:\n            if prime_arr[temp] == temp:\n                prime_arr[temp] = i\n            temp += i\ntests = int(input())\nfor i in range(tests):\n    ans = 0\n    (n, m) = map(int, input().split())\n    for j in range(n, m):\n        temp = 0\n        while j != 1:\n            prime = prime_arr[j]\n            temp += 1\n            while j % prime == 0:\n                j //= prime\n        ans += temp\n    print(ans)", "from math import ceil, sqrt\nnn = 1000000\nl = [0] * (nn + 1)\nfor i in range(2, nn + 1):\n    if l[i] == 0:\n        j = 1\n        while i * j <= nn:\n            l[i * j] += 1\n            j += 1\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(n, m):\n        c += l[i]\n    print(c)", "def sieve(n):\n    global count\n    count = [0] * n\n    array = [True] * n\n    array[1] = False\n    for i in range(2, n):\n        if array[i]:\n            count[i] += 1\n            for j in range(2 * i, n, i):\n                array[j] = False\n                count[j] += 1\nt = int(input())\nfor _ in range(t):\n    result = 0\n    (n, m) = map(int, input().split())\n    sieve(m)\n    for i in range(n, m):\n        result += count[i]\n    print(result)", "from math import ceil, sqrt\nnn = 1000000\nl = [0] * (nn + 1)\nfor i in range(2, nn + 1):\n    if l[i] == 0:\n        j = 1\n        while i * j <= nn:\n            l[i * j] += 1\n            j += 1\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(n, m):\n        c += l[i]\n    print(c)", "from math import ceil, sqrt\nnn = 1000000\nl = [0] * (nn + 1)\nfor i in range(2, nn + 1):\n    if l[i] == 0:\n        j = 1\n        while i * j <= nn:\n            l[i * j] += 1\n            j += 1\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(n, m):\n        c += l[i]\n    print(c)", "from math import ceil, sqrt\nnn = 1000000\nl = [0] * (nn + 1)\nfor i in range(2, nn + 1):\n    if l[i] == 0:\n        j = 1\n        while i * j <= nn:\n            l[i * j] += 1\n            j += 1\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(n, m):\n        c += l[i]\n    print(c)", "from math import ceil, sqrt\nnn = 1000000\nl = [0] * (nn + 1)\nfor i in range(2, nn + 1):\n    if l[i] == 0:\n        j = 1\n        while i * j <= nn:\n            l[i * j] += 1\n            j += 1\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(n, m):\n        c += l[i]\n    print(c)", "from math import ceil, sqrt\nnn = 1000000\nl = [0] * (nn + 1)\nfor i in range(2, nn + 1):\n    if l[i] == 0:\n        j = 1\n        while i * j <= nn:\n            l[i * j] += 1\n            j += 1\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(n, m):\n        c += l[i]\n    print(c)", "from math import ceil, sqrt\nls = [0] * (10 ** 6 + 1)\nfor i in range(2, 10 ** 6):\n    if ls[i] == 0:\n        j = 1\n        while i * j <= 10 ** 6:\n            ls[i * j] += 1\n            j += 1\nfor i in range(int(input())):\n    (p, q) = map(int, input().split())\n    cnt = 0\n    for i in range(p, q):\n        cnt += ls[i]\n    print(cnt)", "l = [0] * (10 ** 6 + 1)\nfor i in range(2, 10 ** 6):\n    if l[i] == 0:\n        j = 1\n        while i * j <= 10 ** 6:\n            l[i * j] += 1\n            j += 1\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(n, m):\n        c += l[i]\n    print(c)", "l = [0] * (10 ** 6 + 1)\nfor i in range(2, 10 ** 6):\n    if l[i] == 0:\n        j = 1\n        while i * j <= 10 ** 6:\n            l[i * j] += 1\n            j += 1\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(n, m):\n        c += l[i]\n    print(c)", "from math import ceil, sqrt\nl = [0] * (10 ** 6 + 1)\nfor i in range(2, 10 ** 6):\n    if l[i] == 0:\n        j = 1\n        while i * j <= 10 ** 6:\n            l[i * j] += 1\n            j += 1\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(n, m):\n        c += l[i]\n    print(c)", "from math import ceil, sqrt\nl = [0] * (10 ** 6 + 1)\nfor i in range(2, 10 ** 6):\n    if l[i] == 0:\n        j = 1\n        while i * j <= 10 ** 6:\n            l[i * j] += 1\n            j += 1\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(n, m):\n        c += l[i]\n    print(c)", "from math import ceil, sqrt\nl = [0] * (10 ** 6 + 1)\nfor i in range(2, 10 ** 6):\n    if l[i] == 0:\n        j = 1\n        while i * j <= 10 ** 6:\n            l[i * j] += 1\n            j += 1\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(n, m):\n        c += l[i]\n    print(c)", "from math import ceil, sqrt\nl = [0] * (10 ** 6 + 1)\nfor i in range(2, 10 ** 6):\n    if l[i] == 0:\n        j = 1\n        while i * j <= 10 ** 6:\n            l[i * j] += 1\n            j += 1\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(n, m):\n        c += l[i]\n    print(c)", "from math import ceil, sqrt\nl = [0] * (10 ** 6 + 1)\nfor i in range(2, 10 ** 6):\n    if l[i] == 0:\n        j = 1\n        while i * j <= 10 ** 6:\n            l[i * j] += 1\n            j += 1\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(n, m):\n        c += l[i]\n    print(c)", "from math import ceil, sqrt\nl = [0] * (10 ** 6 + 1)\nfor i in range(2, 10 ** 6):\n    if l[i] == 0:\n        j = 1\n        while i * j <= 10 ** 6:\n            l[i * j] += 1\n            j += 1\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(n, m):\n        c += l[i]\n    print(c)", "factors = [0] * 1000001\nfor i in range(2, 1000001):\n    if factors[i] == 0:\n        factors[i] = 1\n        for j in range(i + i, 1000001, i):\n            factors[j] += 1\nt = int(input())\nwhile t:\n    t -= 1\n    ans = 0\n    (n, m) = map(int, input().strip().split(' '))\n    for i in range(n, m):\n        ans += factors[i]\n    print(ans)", "divisors = [0] * 1000001\nfor i in range(2, 1000001):\n    if divisors[i] == 0:\n        divisors[i] = 1\n        for j in range(i + i, 1000001, i):\n            divisors[j] += 1\nt = int(input())\nwhile t:\n    t -= 1\n    (n, m) = list(map(int, input().split()))\n    ans = 0\n    for i in range(n, m):\n        ans += divisors[i]\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lim = 10 ** 6\n    arr = [0] * (lim + 1)\n    for i in range(2, lim + 1):\n        if arr[i] == 0:\n            for j in range(i, lim + 1, i):\n                arr[j] += 1\n    print(sum(arr[n:m]))", "limit = 10 ** 6 + 1\nprimes = [False, False] + [True] * limit\np = 2\nwhile p * p <= limit:\n    for i in range(p * 2, limit, p):\n        primes[i] = False\n    p += 1\nprime_number = [i for (i, v) in enumerate(primes) if v]\nprime_factor = [0] * limit\nfor prime in prime_number:\n    for j in range(prime, limit, prime):\n        prime_factor[j] += 1\nfor _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    print(sum(prime_factor[n:m]))", "n = 1000001\nfc = [0] * (n + 1)\nfor i in range(2, n + 1):\n    if fc[i] == 0:\n        for j in range(i, n + 1, i):\n            fc[j] += 1\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    count = 0\n    for i in range(n, m):\n        count += fc[i]\n    print(count)", "import math\nnum = int(input())\n\ndef find_prime_numbers(n):\n    res = []\n    a = [0 for i in range(n + 1)]\n    x = int(math.sqrt(n)) + 1\n    prime = [i for i in range(n + 1)]\n    for p in range(2, n):\n        if prime[p]:\n            a[p] += 1\n            for i in range(p * 2, n + 1, p):\n                a[i] += 1\n                prime[i] = False\n    return a\n\ndef distinct_prime_factors(n, res):\n    c = 0\n    x = int(math.sqrt(n))\n    for i in res:\n        if i > x:\n            break\n        if n % i == 0:\n            c += 1\n    return c\nfor i in range(num):\n    s = input().split(' ')\n    (n, m) = (int(s[0]), int(s[1]))\n    res = 0\n    x = find_prime_numbers(m)\n    for j in range(n, m):\n        res += x[j]\n    print(res)", "from math import *\n\ndef sv_of_ertsthns(n):\n    prime = [1] * n\n    dvsr = [0] * n\n    (prime[0], prime[1]) = (0, 0)\n    for i in range(2, n):\n        if prime[i] == 1:\n            dvsr[i] = 1\n            for j in range(2 * i, n, i):\n                prime[j] = 0\n                dvsr[j] += 1\n    return dvsr\np = sv_of_ertsthns(1000001)\nfor x in range(int(input())):\n    (no, m) = [int(i) for i in input().split()]\n    print(sum(p[no:m]))", "n = 1000001\nfc = [0] * (n + 1)\nfor i in range(2, n + 1):\n    if fc[i] == 0:\n        for j in range(i, n + 1, i):\n            fc[j] += 1\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    count = 0\n    for i in range(n, m):\n        count += fc[i]\n    print(count)", "import numpy as np\n\ndef factors():\n    prime = np.ones(1000001, dtype=bool)\n    p = 2\n    while p * p <= 1000000:\n        if prime[p] == True:\n            for i in range(p * 2, 1000001, p):\n                prime[i] = False\n        p += 1\n    return prime\nprime = factors()\nT = int(input())\nl = []\nfor i in range(T):\n    (n, m) = map(int, input().split())\n    summ = 0\n    for i in range(2, m):\n        if prime[i] == True:\n            summ += (m - 1) // i - (n - 1) // i\n    l.append(summ)\nprint(*l, sep='\\n')", "import numpy as np\n\ndef factors():\n    prime = np.ones(1000001, dtype=bool)\n    p = 2\n    while p * p <= 1000000:\n        if prime[p] == True:\n            for i in range(p * 2, 1000001, p):\n                prime[i] = False\n        p += 1\n    return prime\nprime = factors()\nT = int(input())\nl = []\nfor i in range(T):\n    (n, m) = map(int, input().split())\n    summ = 0\n    for i in range(2, m):\n        if prime[i] == True:\n            summ += (m - 1) // i - (n - 1) // i\n    l.append(summ)\nprint(*l, sep='\\n')", "freq = [0] * 1000001\nfor i in range(2, 1000001):\n    if freq[i] == 0:\n        for j in range(i, 1000001, i):\n            freq[j] += 1\nt = int(input())\nfor tc in range(t):\n    (a, b) = map(int, input().split(' '))\n    print(sum(freq[a:b]))", "prime_fac = [0] * (10 ** 6 + 1)\nfor i in range(2, 10 ** 6 + 1):\n    if prime_fac[i] == 0:\n        for j in range(i, 10 ** 6 + 1, i):\n            prime_fac[j] += 1\nfor _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    ans = sum(prime_fac[n:m])\n    print(ans)", "t = int(input())\n\ndef SieveOfEratosthenes(n):\n    prime = [0] * (n + 1)\n    for p in range(2, n):\n        if prime[p] == 0:\n            prime[p] = 1\n            for i in range(p * 2, n + 1, p):\n                prime[i] += 1\n    return prime\np = SieveOfEratosthenes(1000000)\nwhile t:\n    (n, m) = [int(a) for a in input().strip().split()]\n    print(sum(p[n:m]))\n    t -= 1", "T = int(input())\nn = 1000001\nl = [0 for i in range(n)]\nfor i in range(2, n):\n    if l[i] == 0:\n        for j in range(i, n, i):\n            l[j] += 1\nfor test in range(T):\n    sum = 0\n    (N, M) = map(int, input().split())\n    for item in range(N, M):\n        sum += l[item]\n    print(sum)", "prime = [True for i in range(1000001)]\nmultiple = [0] * 1000001\np = 2\nwhile p <= 1000000:\n    if prime[p] == True:\n        multiple[p] = 1\n        for i in range(p * 2, 1000001, p):\n            prime[i] = False\n            multiple[i] += 1\n    p += 1\nt = int(input())\nwhile t:\n    (n, m) = [int(x) for x in input().split()]\n    count = 0\n    for i in range(n, m):\n        count += multiple[i]\n    print(count)\n    t -= 1", "from sys import stdin, stdout\nfrom math import sqrt\nfrom collections import defaultdict\n\ndef preProcess(n=10 ** 6 + 1):\n    counter = [0 for i in range(n)]\n    for i in range(2, n):\n        if counter[i] == 0:\n            counter[i] = 1\n            for j in range(2 * i, n, i):\n                counter[j] += 1\n    return counter\narr = preProcess()\nt = int(stdin.readline().strip())\nwhile t > 0:\n    (l, u) = [int(x) for x in stdin.readline().strip().split()]\n    print(sum(arr[l:u]))\n    t -= 1", "p_count = 10 ** 6 + 1\nprimes = [True] * p_count\nprimes[0] = primes[1] = False\np = 2\nwhile p * p <= p_count:\n    for i in range(p * 2, p_count, p):\n        primes[i] = False\n    p += 1\nprime_number = [i for (i, value) in enumerate(primes) if value]\nprime_factors = [0] * (10 ** 6 + 1)\nfor prime in prime_number:\n    for i in range(prime, 10 ** 6 + 1, prime):\n        prime_factors[i] += 1\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(sum(prime_factors[n:m]))", "def prime_numbers():\n    nums = [True for i in range(1000001)]\n    count = [0 for i in range(1000001)]\n    for i in range(2, 1000001):\n        if nums[i]:\n            count[i] = 1\n            for j in range(2 * i, 1000001, i):\n                nums[j] = False\n                count[j] += 1\n    return count\nt = int(input())\ncount = prime_numbers()\nwhile t > 0:\n    st = input().split()\n    n = int(st[0])\n    m = int(st[1])\n    ans = 0\n    for i in range(n, m):\n        ans += count[i]\n    print(ans)\n    t -= 1", "maxn = 1000010\nspf = [0] * maxn\n\ndef sieve():\n    for i in range(1, maxn):\n        if i % 2 == 0:\n            spf[i] = 2\n        else:\n            spf[i] = i\n    i = 3\n    while i * i < maxn:\n        if spf[i] == i:\n            for j in range(i * i, maxn, i):\n                if spf[j] == j:\n                    spf[j] = i\n        i += 1\nsieve()\n\ndef getFactors(n):\n    l = []\n    while n != 1:\n        l.append(spf[n])\n        n = n // spf[n]\n    return l\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = 0\n    for i in range(n, m):\n        ans += len(set(getFactors(i)))\n    print(ans)", "p = 1000001 * [0]\nfor i in range(2, 1000001):\n    if p[i] == 0:\n        for j in range(i, 1000001, i):\n            p[j] += 1\nfor _ in range(int(input())):\n    (n, m) = [int(j) for j in input().split()]\n    tot = 0\n    for i in range(n, m):\n        tot += p[i]\n    print(tot)", "p = [0] * 1000002\nfor i in range(2, 1000001):\n    if p[i] == 0:\n        for j in range(i, 1000001, i):\n            p[j] += 1\nt = int(input())\nfor test in range(t):\n    (n, m) = map(int, input().split())\n    print(sum(p[n:m]))", "p_count = 10 ** 6 + 1\nprimes = [True] * p_count\nprimes[0] = primes[1] = False\np = 2\nwhile p * p <= p_count:\n    for i in range(p * 2, p_count, p):\n        primes[i] = False\n    p += 1\nprime_number = [i for (i, value) in enumerate(primes) if value]\nprime_factors = [0] * (10 ** 6 + 1)\nfor prime in prime_number:\n    for i in range(prime, 10 ** 6 + 1, prime):\n        prime_factors[i] += 1\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(sum(prime_factors[n:m]))", "n = 1000001\nfc = [0] * (n + 1)\nfor i in range(2, n + 1):\n    if fc[i] == 0:\n        for j in range(i, n + 1, i):\n            fc[j] = fc[j] + 1\nfor hhh in range(0, int(input())):\n    (a, b) = list(map(int, input().split()))\n    c = 0\n    for i in range(a, b):\n        c = c + fc[i]\n    print(c)", "def get_value(n, m):\n    for i in range(6):\n        if ar[i] == 0:\n            flag = 0\n\ndef get_name(a, b):\n    for i in range(6):\n        if x[i] == 0:\n            cnt = 0\n\ndef factorization(n):\n    for i in range(2, 1000005):\n        if n[i] == 0:\n            n[i] = 1\n            for j in range(i + i, 1000001, i):\n                n[j] += 1\n\ndef show(a, b):\n    a = input()\n    b = input()\n    print(a + b)\n\ndef print_answer(count):\n    print(count)\nfor i in range(int(input())):\n    count = 0\n    n = [0] * 1000005\n    factorization(n)\n    (x, y) = map(int, input().split(' '))\n    while x < y:\n        count = count + n[x]\n        x = x + 1\n    print_answer(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    fac = [0] * m\n    for i in range(2, m):\n        if fac[i] == 0:\n            for j in range(i, m, i):\n                fac[j] += 1\n    print(sum(fac[n:m]))", "lim = 10 ** 6\nP = [0] * (lim + 1)\nfor i in range(2, lim + 1):\n    if P[i] == 0:\n        for j in range(i, lim + 1, i):\n            P[j] += 1\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    print(sum(P[n:m]))", "def primefactors():\n    arr = []\n    n = 10 ** 6\n    arr.append(1)\n    for i in range(n):\n        if i % 2 == 1:\n            arr.append(2)\n        else:\n            arr.append(i + 1)\n    for i in range(3, n):\n        if i * i < n:\n            for j in range(i * i, n, i):\n                if arr[j] == j:\n                    arr[j] = i\n        else:\n            break\n    return arr\ny = int(input())\nabc = primefactors()\nfor i in range(y):\n    x = [int(i) for i in input().split()]\n    n = x[0]\n    m = x[1]\n    sum1 = 0\n    for j in range(n, m):\n        arr = []\n        a = j\n        while a != 1:\n            arr.append(abc[a])\n            a = a // abc[a]\n        sum1 += len(list(set(arr)))\n    print(sum1)", "test = int(input())\nfor i in range(test):\n    (b, c) = input().split()\n    b = int(b)\n    c = int(c)\n    max = c\n    nb_factors = [0] * max\n    for i in range(2, max):\n        if nb_factors[i] == 0:\n            for j in range(i, max, i):\n                nb_factors[j] += 1\n    add = 0\n    for (i, f) in enumerate(nb_factors):\n        if i >= b:\n            add = add + f\n    print(add)", "def prime_factors(l):\n    for i in range(2, 1000001):\n        if l[i] == 0:\n            l[i] = 1\n            for j in range(i + i, 1000001, i):\n                l[j] += 1\nfor i in range(int(input())):\n    l = [0] * 1000001\n    prime_factors(l)\n    (a, b) = map(int, input().split(' '))\n    (sum, n) = (0, 0)\n    while a < b:\n        sum += l[a]\n        a += 1\n    print(sum)", "a = int(input())\nfor i in range(a):\n    (b, c) = input().split()\n    b = int(b)\n    c = int(c)\n    max = c\n    nb_factors = [0] * max\n    for i in range(2, max):\n        if nb_factors[i] == 0:\n            for j in range(i, max, i):\n                nb_factors[j] += 1\n    add = 0\n    for (i, f) in enumerate(nb_factors):\n        if i >= b:\n            add = add + f\n    print(add)", "def sieve():\n    prime = [True for i in range(1000001)]\n    p = 2\n    while p * p <= 1000001:\n        if prime[p] == True:\n            for i in range(p * 2, 1000001, p):\n                prime[i] = False\n        p += 1\n    return prime\nprimeArr = sieve()\nprimeArr[1] = False\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    ans = 0\n    for i in range(2, m):\n        if primeArr[i] == True:\n            ans += (m - 1) // i - (n - 1) // i\n    print(ans)", "def sieve():\n    p = 10 ** 6 + 1\n    fact = [0] * (10 ** 6 + 2)\n    i = 2\n    while i <= p:\n        if fact[i] == 0:\n            for j in range(i, p + 1, i):\n                fact[j] += 1\n        i += 1\n    return fact\nfact = sieve()\nt = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    print(sum(fact[n:m]))\n    t = t - 1", "pf = [i for i in range(1, 10 ** 6 + 1)]\nhad = [0 for i in range(10 ** 6)]\npf[0] = 0\nfor i in range(1, len(pf)):\n    if not had[i]:\n        for j in range(i * 2 + 1, len(pf), i + 1):\n            if not had[j]:\n                pf[j] = 1\n                had[j] = 1\n            else:\n                pf[j] += 1\n        pf[i] = 1\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = [int(x) for x in input().split()]\n        if m == n:\n            ans = 0\n        else:\n            ans = sum(pf[n - 1:m - 1] + [0])\n        print(ans)\n\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\nmain()", "Max = 1000005\n\ndef fillPrimeCount(A):\n    index = 2\n    while index < Max:\n        if A[index] != 0:\n            while index < Max and A[index] != 0:\n                index += 1\n        else:\n            inc = index\n            count = 1\n            while inc * count < Max:\n                A[inc * count] += 1\n                count += 1\nprimeCount = [0 for i in range(Max)]\nfillPrimeCount(primeCount)\ntest = int(input())\nfor test in range(test):\n    (n, m) = [int(x) for x in input().split()]\n    print(sum(primeCount[n:m]))", "maxa = 1000001\narrr = []\nfor i in range(maxa):\n    arrr.append(0)\nfor i in range(1, maxa):\n    arrr[i] = i\nfor i in range(4, maxa, 2):\n    arrr[i] = 2\ni = 3\nwhile i * i < maxa:\n    if arrr[i] == i:\n        j = i * i\n        while j < maxa:\n            if arrr[j] == j:\n                arrr[j] = i\n            j += i\n    i += 1\n\ndef give_count_primes(arrr, x):\n    count = []\n    while x != 1:\n        count.append(arrr[x])\n        x = x // arrr[x]\n    return len(set(count))\nt = int(input())\nfor w in range(t):\n    yoar = list(map(int, input().split()))\n    n = yoar[0]\n    m = yoar[1]\n    anscount = 0\n    for i in range(n, m):\n        anscount += give_count_primes(arrr, i)\n    print(anscount)", "a = [0] * 1000001\na[0] = 0\na[1] = 0\nfor i in range(2, 1000001):\n    if a[i] == 0:\n        a[i] += 1\n        for j in range(i * 2, 1000001, i):\n            a[j] += 1\nfor test in range(int(input())):\n    (n, m) = map(int, input().strip().split())\n    ans = 0\n    for k in range(n, m):\n        ans += a[k]\n    print(ans)", "def fun(n):\n    mi = [0] * (n + 1)\n    for i in range(2, int(n ** (1 / 2))):\n        if mi[i] == 0:\n            for j in range(i * i, n + 1, i):\n                if mi[j] == 0:\n                    mi[j] = i\n    for i in range(2, n + 1):\n        if mi[i] == 0:\n            mi[i] = i\n    return mi\n\ndef fact(n, arr):\n    a = []\n    while n != 1:\n        a.append(arr[n])\n        n = int(n / arr[n])\n    return len(set(a))\narr = fun(10 ** 6 + 1)\nt = int(input())\nfor isdx in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    c = 0\n    for i in range(n, m):\n        c += fact(i, arr)\n    print(c)", "from sys import stdin, stdout\nfrom math import sqrt\nfrom collections import defaultdict\n\ndef preProcess(n=10 ** 6 + 1):\n    counter = [0 for i in range(n)]\n    for i in range(2, n):\n        if counter[i] == 0:\n            counter[i] = 1\n            for j in range(2 * i, n, i):\n                counter[j] += 1\n    return counter\narr = preProcess()\nt = int(stdin.readline().strip())\nwhile t > 0:\n    (l, u) = [int(x) for x in stdin.readline().strip().split()]\n    print(sum(arr[l:u]))\n    t -= 1", "l = [0 for i in range(1000002)]\ni = 2\nwhile i < 1000002:\n    if l[i] == 0:\n        k = i\n        c = 1\n        while k * c < 1000002:\n            l[k * c] += 1\n            c += 1\n    else:\n        while i < 1000002 and l[i] != 0:\n            i += 1\nt = int(input())\nfor test in range(t):\n    (n, m) = map(int, input().split())\n    print(sum(l[n:m]))", "import sys\nfa = [0] * (10 ** 6 + 1)\nfor i in range(2, 10 ** 6 + 1):\n    if fa[i] == 0:\n        for j in range(i, 10 ** 6 + 1, i):\n            fa[j] += 1\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (n, m) = map(int, sys.stdin.readline().split())\n    a = 0\n    for i in range(n, m):\n        a += fa[i]\n    sys.stdout.write(str(a))\n    print()", "MAX = int(1000000.0) + 1\np = [True] * MAX\nc = [0] * MAX\nfor i in range(2, MAX):\n    if p[i]:\n        for j in range(i, MAX, i):\n            p[j] = False\n            c[j] += 1\nfor i in range(1, MAX):\n    c[i] += c[i - 1]\nt = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    print(c[b - 1] - c[a - 1])", "factor_count = [0] * (10 ** 6 + 1)\nfor i in range(2, 10 ** 6 + 1):\n    if factor_count[i] == 0:\n        for j in range(i, 10 ** 6 + 1, i):\n            factor_count[j] += 1\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = 0\n    for i in range(n, m):\n        ans += factor_count[i]\n    print(ans)"]