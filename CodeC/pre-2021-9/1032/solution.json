["import sys\nimport numpy as np\n\ndef log2(x):\n    ret = 0\n    while x > 0:\n        ret += 1\n        x >>= 1\n    return ret - 1\n\ndef get_rmq(A):\n    (x, y) = A.shape\n    (lx, ly) = (log2(x) + 1, log2(y) + 1)\n    ret = [[np.ones(A.shape, dtype=np.int32) for i in range(ly)] for j in range(lx)]\n    ret[0][0][:] = A\n    for j in range(1, ly):\n        j2 = 1 << j - 1\n        A0 = ret[0][j - 1]\n        A1 = ret[0][j]\n        A1[:] = A0\n        A1[:, :-j2] = np.maximum(A1[:, j2:], A1[:, :-j2])\n    for i in range(1, lx):\n        i2 = 1 << i - 1\n        A0 = ret[i - 1][0]\n        A1 = ret[i][0]\n        A1[:] = A0\n        A1[:-i2, :] = np.maximum(A1[i2:, :], A1[:-i2, :])\n        for j in range(1, ly):\n            j2 = 1 << j - 1\n            A0 = ret[i][j - 1]\n            A1 = ret[i][j]\n            A1[:] = A0\n            A1[:, :-j2] = np.maximum(A1[:, j2:], A1[:, :-j2])\n    return ret\n\ndef get_max(R, x0, x1, y0, y1):\n    dx = x1 - x0\n    dy = y1 - y0\n    lx = log2(dx)\n    ly = log2(dy)\n    Q = R[lx][ly]\n    x1 = x1 - 2 ** lx\n    y1 = y1 - 2 ** ly\n    return max(Q[x0, y0], Q[x0, y1], Q[x1, y0], Q[x1, y1])\n\ndef get_cums(A):\n    (m, n) = A.shape\n    A0 = np.zeros((m + 1, n + 1), dtype=np.int64)\n    A0[1:, 1:] = A\n    return np.cumsum(np.cumsum(A0, 0), 1)\n\ndef get_sum(C, x0, x1, y0, y1):\n    return C[x1, y1] - C[x0, y1] - C[x1, y0] + C[x0, y0]\n\ndef solve(R, C, x, y, a, b):\n    ret = 10 ** 10\n    for i in range(x - a + 1):\n        for j in range(y - b + 1):\n            m = get_max(R, i, i + a, j, j + b)\n            s = get_sum(C, i, i + a, j, j + b)\n            z = m * a * b - s\n            if z < ret:\n                ret = z\n    return ret\n\ndef solve2(R, C, x, y, a, b):\n    C00 = C[:-a, :-b]\n    C01 = C[a:, :-b]\n    C10 = C[:-a, b:]\n    C11 = C[a:, b:]\n    CC = C00 - C01 - C10 + C11\n    lx = log2(a)\n    ly = log2(b)\n    Q = R[lx][ly]\n    ab = a * b\n    a0 = a - 2 ** lx\n    b0 = b - 2 ** ly\n    Q0 = Q[:x - a0, :y - b0]\n    Q0 = np.maximum(Q0, Q[a0:, :y - b0])\n    Q0 = np.maximum(Q0, Q[a0:, b0:])\n    Q0 = np.maximum(Q0, Q[:x - a0, b0:])\n    Q0 = Q0[:1 + x - a, :1 + y - b]\n    Z = Q0 * ab - CC\n    return np.min(Z)\nF = sys.stdin\n\ndef readints():\n    return map(int, F.readline().split())\n(n, m) = readints()\nA = np.zeros((n, m), dtype=np.int64)\nfor i in range(n):\n    A[i:] = list(readints())\nR = get_rmq(A)\nC = get_cums(A)\n(k,) = readints()\nfor i in range(k):\n    (a, b) = readints()\n    print(solve2(R, C, n, m, a, b))", "import sys\nimport numpy as np\n\ndef log2(x):\n    ret = 0\n    while x > 0:\n        ret += 1\n        x >>= 1\n    return ret - 1\n\ndef get_rmq(A):\n    (x, y) = A.shape\n    (lx, ly) = (log2(x) + 1, log2(y) + 1)\n    ret = [[np.ones(A.shape, dtype=np.int32) for i in range(ly)] for j in range(lx)]\n    ret[0][0][:] = A\n    for j in range(1, ly):\n        j2 = 1 << j - 1\n        A0 = ret[0][j - 1]\n        A1 = ret[0][j]\n        A1[:] = A0\n        A1[:, :-j2] = np.maximum(A1[:, j2:], A1[:, :-j2])\n    for i in range(1, lx):\n        i2 = 1 << i - 1\n        A0 = ret[i - 1][0]\n        A1 = ret[i][0]\n        A1[:] = A0\n        A1[:-i2, :] = np.maximum(A1[i2:, :], A1[:-i2, :])\n        for j in range(1, ly):\n            j2 = 1 << j - 1\n            A0 = ret[i][j - 1]\n            A1 = ret[i][j]\n            A1[:] = A0\n            A1[:, :-j2] = np.maximum(A1[:, j2:], A1[:, :-j2])\n    return ret\n\ndef get_max(R, x0, x1, y0, y1):\n    dx = x1 - x0\n    dy = y1 - y0\n    lx = log2(dx)\n    ly = log2(dy)\n    Q = R[lx][ly]\n    x1 = x1 - 2 ** lx\n    y1 = y1 - 2 ** ly\n    return max(Q[x0, y0], Q[x0, y1], Q[x1, y0], Q[x1, y1])\n\ndef get_cums(A):\n    (m, n) = A.shape\n    A0 = np.zeros((m + 1, n + 1), dtype=np.int64)\n    A0[1:, 1:] = A\n    return np.cumsum(np.cumsum(A0, 0), 1)\n\ndef get_sum(C, x0, x1, y0, y1):\n    return C[x1, y1] - C[x0, y1] - C[x1, y0] + C[x0, y0]\n\ndef solve(R, C, x, y, a, b):\n    ret = 10 ** 10\n    for i in range(x - a + 1):\n        for j in range(y - b + 1):\n            m = get_max(R, i, i + a, j, j + b)\n            s = get_sum(C, i, i + a, j, j + b)\n            z = m * a * b - s\n            if z < ret:\n                ret = z\n    return ret\n\ndef solve2(R, C, x, y, a, b):\n    C00 = C[:-a, :-b]\n    C01 = C[a:, :-b]\n    C10 = C[:-a, b:]\n    C11 = C[a:, b:]\n    CC = C00 - C01 - C10 + C11\n    lx = log2(a)\n    ly = log2(b)\n    Q = R[lx][ly]\n    ab = a * b\n    a0 = a - 2 ** lx\n    b0 = b - 2 ** ly\n    Q0 = Q[:x - a0, :y - b0]\n    Q0 = np.maximum(Q0, Q[a0:, :y - b0])\n    Q0 = np.maximum(Q0, Q[a0:, b0:])\n    Q0 = np.maximum(Q0, Q[:x - a0, b0:])\n    Q0 = Q0[:1 + x - a, :1 + y - b]\n    Z = Q0 * ab - CC\n    return np.min(Z)\nF = sys.stdin\n\ndef readints():\n    return map(int, F.readline().split())\n(n, m) = readints()\nA = np.zeros((n, m), dtype=np.int64)\nfor i in range(n):\n    A[i:] = list(readints())\nR = get_rmq(A)\nC = get_cums(A)\n(k,) = readints()\nfor i in range(k):\n    (a, b) = readints()\n    print(solve2(R, C, n, m, a, b))"]