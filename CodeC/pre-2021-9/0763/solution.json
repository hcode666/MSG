["def is_strong_psp(b, n):\n    n1 = n - 1\n    e = (n1 ^ n1 - 1).bit_length() - 1\n    d = n1 >> e\n    b = pow(b, d, n)\n    if b in [1, n - 1]:\n        return True\n    for i in range(e - 1):\n        b = pow(b, 2, n)\n        if b == n - 1:\n            return True\n    return False\nbases = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\ndef is_prime(n):\n    if n <= 28:\n        return n in bases\n    for x in bases:\n        if n % x == 0:\n            return False\n    for x in bases:\n        if not is_strong_psp(x, n):\n            return False\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 2:\n        print(2)\n        continue\n    if n % 2 == 0:\n        n -= 1\n    assert n >= 3\n    while True:\n        if is_prime(n):\n            print(n)\n            break\n        n -= 2", "def is_strong_psp(b, n):\n    n1 = n - 1\n    e = (n1 ^ n1 - 1).bit_length() - 1\n    d = n1 >> e\n    b = pow(b, d, n)\n    if b in [1, n - 1]:\n        return True\n    for i in range(e - 1):\n        b = pow(b, 2, n)\n        if b == n - 1:\n            return True\n    return False\nbases = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\ndef is_prime(n):\n    if n <= 28:\n        return n in bases\n    for x in bases:\n        if n % x == 0:\n            return False\n    for x in bases:\n        if not is_strong_psp(x, n):\n            return False\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 2:\n        print(2)\n        continue\n    if n % 2 == 0:\n        n -= 1\n    assert n >= 3\n    while True:\n        if is_prime(n):\n            print(n)\n            break\n        n -= 2", "def is_strong_psp(b, n):\n    n1 = n - 1\n    e = (n1 ^ n1 - 1).bit_length() - 1\n    d = n1 >> e\n    b = pow(b, d, n)\n    if b in [1, n - 1]:\n        return True\n    for i in range(e - 1):\n        b = pow(b, 2, n)\n        if b == n - 1:\n            return True\n    return False\nbases = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\ndef is_prime(n):\n    if n <= 28:\n        return n in bases\n    for x in bases:\n        if n % x == 0:\n            return False\n    for x in bases:\n        if not is_strong_psp(x, n):\n            return False\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 2:\n        print(2)\n        continue\n    if n % 2 == 0:\n        n -= 1\n    assert n >= 3\n    while True:\n        if is_prime(n):\n            print(n)\n            break\n        n -= 2", "import random\nPRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23]\nK = 5\n\ndef power(a, p, mod):\n    if p == 0 or a == 1:\n        return 1\n    if p == 1:\n        return a % mod\n    m = power(a, p // 2, mod)\n    return m * m * power(a, p % 2, mod) % mod\n\ndef get_sd(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n = n // 2\n    return (s, n)\n\ndef check_for_a(a, s, d, n):\n    x = power(a, d, n)\n    if x == 1 or x == n - 1:\n        return True\n    for i in range(s - 1):\n        x = x * x % n\n        if x == n - 1:\n            return True\n    return False\n\ndef isprime(n):\n    (s, d) = get_sd(n - 1)\n    for a in PRIMES:\n        if a > n:\n            break\n        if n % a == 0:\n            return n == a\n        if not check_for_a(a, s, d, n):\n            return False\n    return True\n\ndef biggest_prime(n):\n    if n == 2:\n        return n\n    if n % 2 == 0:\n        n -= 1\n    while True:\n        if isprime(n):\n            return n\n        n -= 2\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    print(biggest_prime(n))", "import random\nPRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23]\nK = 5\n\ndef power(a, p, mod):\n    if p == 0 or a == 1:\n        return 1\n    if p == 1:\n        return a % mod\n    m = power(a, p // 2, mod)\n    return m * m * power(a, p % 2, mod) % mod\n\ndef get_sd(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n = n // 2\n    return (s, n)\n\ndef check_for_a(a, s, d, n):\n    x = power(a, d, n)\n    if x == 1 or x == n - 1:\n        return True\n    for i in range(s - 1):\n        x = x * x % n\n        if x == n - 1:\n            return True\n    return False\n\ndef isprime(n):\n    (s, d) = get_sd(n - 1)\n    for a in PRIMES:\n        if a > n:\n            break\n        if n % a == 0:\n            return n == a\n        if not check_for_a(a, s, d, n):\n            return False\n    return True\n\ndef biggest_prime(n):\n    if n == 2:\n        return n\n    if n % 2 == 0:\n        n -= 1\n    while True:\n        if isprime(n):\n            return n\n        n -= 2\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    print(biggest_prime(n))", "import random\nPRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23]\nK = 5\n\ndef power(a, p, mod):\n    if p == 0 or a == 1:\n        return 1\n    if p == 1:\n        return a % mod\n    m = power(a, p // 2, mod)\n    return m * m * power(a, p % 2, mod) % mod\n\ndef get_sd(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n = n // 2\n    return (s, n)\n\ndef check_for_a(a, s, d, n):\n    x = power(a, d, n)\n    if x == 1 or x == n - 1:\n        return True\n    for i in range(s - 1):\n        x = x * x % n\n        if x == n - 1:\n            return True\n    return False\n\ndef isprime(n):\n    (s, d) = get_sd(n - 1)\n    for a in PRIMES:\n        if a > n:\n            break\n        if n % a == 0:\n            return n == a\n        if not check_for_a(a, s, d, n):\n            return False\n    return True\n\ndef biggest_prime(n):\n    if n == 2:\n        return n\n    if n % 2 == 0:\n        n -= 1\n    while True:\n        if isprime(n):\n            return n\n        n -= 2\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    print(biggest_prime(n))", "import random\nPRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23]\nK = 5\n\ndef power(a, p, mod):\n    if p == 0 or a == 1:\n        return 1\n    if p == 1:\n        return a % mod\n    m = power(a, p // 2, mod)\n    return m * m * power(a, p % 2, mod) % mod\n\ndef get_sd(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n = n // 2\n    return (s, n)\n\ndef check_for_a(a, s, d, n):\n    x = power(a, d, n)\n    if x == 1 or x == n - 1:\n        return True\n    for i in range(s - 1):\n        x = x * x % n\n        if x == n - 1:\n            return True\n    return False\n\ndef isprime(n):\n    (s, d) = get_sd(n - 1)\n    for a in PRIMES:\n        if a > n:\n            break\n        if n % a == 0:\n            return n == a\n        if not check_for_a(a, s, d, n):\n            return False\n    return True\n\ndef biggest_prime(n):\n    if n == 2:\n        return n\n    if n % 2 == 0:\n        n -= 1\n    while True:\n        if isprime(n):\n            return n\n        n -= 2\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    print(biggest_prime(n))", "import random\nPRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23]\nK = 5\n\ndef power(a, p, mod):\n    if p == 0 or a == 1:\n        return 1\n    if p == 1:\n        return a % mod\n    m = power(a, p // 2, mod)\n    return m * m * power(a, p % 2, mod) % mod\n\ndef get_sd(n):\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n = n // 2\n    return (s, n)\n\ndef check_for_a(a, s, d, n):\n    x = power(a, d, n)\n    if x == 1 or x == n - 1:\n        return True\n    for i in range(s - 1):\n        x = x * x % n\n        if x == 1:\n            return False\n        if x == n - 1:\n            return True\n    return False\n\ndef isprime(n):\n    (s, d) = get_sd(n - 1)\n    for a in PRIMES:\n        if a > n:\n            break\n        if n % a == 0:\n            return n == a\n        if not check_for_a(a, s, d, n):\n            return False\n    return True\n\ndef biggest_prime(n):\n    if n == 2:\n        return n\n    if n % 2 == 0:\n        n -= 1\n    while True:\n        if isprime(n):\n            return n\n        n -= 2\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    print(biggest_prime(n))", "def mul(a, b, mod):\n    res = 0\n    while b:\n        if b & 1:\n            res = (res + a) % mod\n        a = 2 * a % mod\n        b >>= 1\n    return res\n\ndef checkCom(n, a, d, s):\n    x = pow(a, d, n)\n    if x == 1 or x == n - 1:\n        return False\n    for r in range(s):\n        x = mul(x, x, n)\n        if x == n - 1:\n            return False\n    return True\n\ndef isPrime(n):\n    if n < 4:\n        return n == 2 or n == 3\n    s = 0\n    d = n - 1\n    while d & 1 == 0:\n        d >>= 1\n        s += 1\n    for prime in [2, 3, 5, 7, 11, 13, 17, 19, 23]:\n        if n == prime:\n            return True\n        if checkCom(n, prime, d, s):\n            return False\n    return True\n\ndef fun():\n    n = int(input())\n    if n > 2:\n        if n % 2 == 0:\n            n -= 1\n        while True:\n            if isPrime(n):\n                break\n            n -= 2\n    print(n)\nt = int(input())\nwhile t:\n    t -= 1\n    fun()", "def mul(a, b, mod):\n    res = 0\n    while b:\n        if b & 1:\n            res = (res + a) % mod\n        a = 2 * a % mod\n        b >>= 1\n    return res\n\ndef checkCom(n, a, d, s):\n    x = pow(a, d, n)\n    if x == 1 or x == n - 1:\n        return False\n    for r in range(s):\n        x = mul(x, x, n)\n        if x == n - 1:\n            return False\n    return True\n\ndef isPrime(n):\n    if n < 4:\n        return n == 2 or n == 3\n    s = 0\n    d = n - 1\n    while d & 1 == 0:\n        d >>= 1\n        s += 1\n    for prime in [2, 3, 5, 7, 11, 13, 17, 19, 23]:\n        if n == prime:\n            return True\n        if checkCom(n, prime, d, s):\n            return False\n    return True\n\ndef fun():\n    n = int(input())\n    if n > 2:\n        if n % 2 == 0:\n            n -= 1\n        while True:\n            if isPrime(n):\n                break\n            n -= 2\n    print(n)\nt = int(input())\nwhile t:\n    t -= 1\n    fun()", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\n    def millerTest(d, n, p):\n        x = pow(p, d, n)\n        if x == 1 or x == n - 1:\n            return True\n        while d != n - 1:\n            x = x * x % n\n            d *= 2\n            if x == 1:\n                return False\n            if x == n - 1:\n                return True\n        return False\n\n    def isPrime(n):\n        if n in primes:\n            return True\n        d = n - 1\n        while d % 2 == 0:\n            d //= 2\n        for p in primes:\n            if not millerTest(d, n, p):\n                return False\n        return True\n    if n == 2:\n        print('2')\n    elif n == 3:\n        print('3')\n    else:\n        for i in range(0, n):\n            if isPrime(n - i) == True:\n                print(n - i)\n                break\n    t -= 1", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\n    def millerTest(d, n, p):\n        x = pow(p, d, n)\n        if x == 1 or x == n - 1:\n            return True\n        while d != n - 1:\n            x = x * x % n\n            d *= 2\n            if x == 1:\n                return False\n            if x == n - 1:\n                return True\n        return False\n\n    def isPrime(n):\n        if n in primes:\n            return True\n        d = n - 1\n        while d % 2 == 0:\n            d //= 2\n        for p in primes:\n            if not millerTest(d, n, p):\n                return False\n        return True\n    if n == 2:\n        print('2')\n    elif n == 3:\n        print('3')\n    else:\n        for i in range(0, n):\n            if isPrime(n - i) == True:\n                print(n - i)\n                break\n    t -= 1", "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\ndef millerTest(d, n, p):\n    x = pow(p, d, n)\n    if x == 1 or x == n - 1:\n        return True\n    while d != n - 1:\n        x = x * x % n\n        d *= 2\n        if x == 1:\n            return False\n        if x == n - 1:\n            return True\n    return False\n\ndef isProbablePrime(n):\n    if n in primes:\n        return True\n    d = n - 1\n    while d % 2 == 0:\n        d //= 2\n    for p in primes:\n        if not millerTest(d, n, p):\n            return False\n    return True\nt = int(input())\nfor test in range(t):\n    N = int(input())\n    if N == 1:\n        print(1)\n    for i in range(N, 0, -1):\n        if isProbablePrime(i):\n            print(i)\n            break", "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\ndef millerTest(d, n, p):\n    x = pow(p, d, n)\n    if x == 1 or x == n - 1:\n        return True\n    while d != n - 1:\n        x = x * x % n\n        d *= 2\n        if x == 1:\n            return False\n        if x == n - 1:\n            return True\n    return False\n\ndef isProbablePrime(n):\n    if n in primes:\n        return True\n    d = n - 1\n    while d % 2 == 0:\n        d //= 2\n    for p in primes:\n        if not millerTest(d, n, p):\n            return False\n    return True\nt = int(input())\nfor test in range(t):\n    N = int(input())\n    if N == 1:\n        print(1)\n    for i in range(N, 0, -1):\n        if isProbablePrime(i):\n            print(i)\n            break", "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\ndef millerTest(d, n, p):\n    x = pow(p, d, n)\n    if x == 1 or x == n - 1:\n        return True\n    while d != n - 1:\n        x = x * x % n\n        d *= 2\n        if x == 1:\n            return False\n        if x == n - 1:\n            return True\n    return False\n\ndef isProbablePrime(n):\n    if n in primes:\n        return True\n    d = n - 1\n    while d % 2 == 0:\n        d //= 2\n    for p in primes:\n        if not millerTest(d, n, p):\n            return False\n    return True\nt = int(input())\nfor test in range(t):\n    N = int(input())\n    if N == 1:\n        print(1)\n    for i in range(N, 0, -1):\n        if isProbablePrime(i):\n            print(i)\n            break", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\n    def millerTest(d, n, p):\n        x = pow(p, d, n)\n        if x == 1 or x == n - 1:\n            return True\n        while d != n - 1:\n            x = x * x % n\n            d *= 2\n            if x == 1:\n                return False\n            if x == n - 1:\n                return True\n        return False\n\n    def isPrime(n):\n        if n in primes:\n            return True\n        d = n - 1\n        while d % 2 == 0:\n            d //= 2\n        for p in primes:\n            if not millerTest(d, n, p):\n                return False\n        return True\n    if n == 2:\n        print('2')\n    elif n == 3:\n        print('3')\n    else:\n        for i in range(0, n):\n            if isPrime(n - i) == True:\n                print(n - i)\n                break\n    t -= 1", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\n    def millerTest(d, n, p):\n        x = pow(p, d, n)\n        if x == 1 or x == n - 1:\n            return True\n        while d != n - 1:\n            x = x * x % n\n            d *= 2\n            if x == 1:\n                return False\n            if x == n - 1:\n                return True\n        return False\n\n    def isPrime(n):\n        if n in primes:\n            return True\n        d = n - 1\n        while d % 2 == 0:\n            d //= 2\n        for p in primes:\n            if not millerTest(d, n, p):\n                return False\n        return True\n    if n == 2:\n        print('2')\n    elif n == 3:\n        print('3')\n    else:\n        for i in range(0, n):\n            if isPrime(n - i) == True:\n                print(n - i)\n                break\n    t -= 1", "import math\n\ndef isprime(n):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    if n in primes:\n        return 1\n    elif n % 2:\n        for prime in primes:\n            temp = n - 1\n            times = 0\n            while temp % 2 == 0:\n                temp = temp // 2\n                times = times + 1\n            value = pow(prime, temp, n)\n            if value == 1 or value == n - 1:\n                continue\n            if times:\n                flag = 0\n                for i in range(times - 1):\n                    value = value * value % n\n                    if value == n - 1:\n                        flag = 1\n                        break\n                if flag:\n                    continue\n            return 0\n        return 1\n    else:\n        return 0\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    temp = N\n    while temp >= 2:\n        if isprime(temp):\n            break\n        temp = temp - 1\n    print(temp)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\n    def snek1(d, n, p):\n        x = pow(p, d, n)\n        if x == 1 or x == n - 1:\n            return True\n        while d != n - 1:\n            x = x * x % n\n            d *= 2\n            if x == 1:\n                return False\n            if x == n - 1:\n                return True\n        return False\n\n    def prime(n):\n        if n in l:\n            return True\n        d = n - 1\n        while d % 2 == 0:\n            d //= 2\n        for p in l:\n            if not snek1(d, n, p):\n                return False\n        return True\n    if n == 2:\n        print('2')\n    elif n == 3:\n        print('3')\n    else:\n        for j in range(n):\n            if prime(n - j) == True:\n                print(n - j)\n                break", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\n    def millerTest(d, n, p):\n        x = pow(p, d, n)\n        if x == 1 or x == n - 1:\n            return True\n        while d != n - 1:\n            x = x * x % n\n            d *= 2\n            if x == 1:\n                return False\n            if x == n - 1:\n                return True\n        return False\n\n    def isPrime(n):\n        if n in primes:\n            return True\n        d = n - 1\n        while d % 2 == 0:\n            d //= 2\n        for p in primes:\n            if not millerTest(d, n, p):\n                return False\n        return True\n    if n == 2:\n        print('2')\n    elif n == 3:\n        print('3')\n    else:\n        for i in range(0, n):\n            if isPrime(n - i) == True:\n                print(n - i)\n                break\n    t -= 1", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\n    def millerTest(d, n, p):\n        x = pow(p, d, n)\n        if x == 1 or x == n - 1:\n            return True\n        while d != n - 1:\n            x = x * x % n\n            d *= 2\n            if x == 1:\n                return False\n            if x == n - 1:\n                return True\n        return False\n\n    def isPrime(n):\n        if n in primes:\n            return True\n        d = n - 1\n        while d % 2 == 0:\n            d //= 2\n        for p in primes:\n            if not millerTest(d, n, p):\n                return False\n        return True\n    if n == 2:\n        print('2')\n    elif n == 3:\n        print('3')\n    else:\n        for i in range(0, n):\n            if isPrime(n - i) == True:\n                print(n - i)\n                break\n    t -= 1", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\n    def millerTest(d, n, p):\n        x = pow(p, d, n)\n        if x == 1 or x == n - 1:\n            return True\n        while d != n - 1:\n            x = x * x % n\n            d *= 2\n            if x == 1:\n                return False\n            if x == n - 1:\n                return True\n        return False\n\n    def isPrime(n):\n        if n in primes:\n            return True\n        d = n - 1\n        while d % 2 == 0:\n            d //= 2\n        for p in primes:\n            if not millerTest(d, n, p):\n                return False\n        return True\n    if n == 2:\n        print('2')\n    elif n == 3:\n        print('3')\n    else:\n        for i in range(0, n):\n            if isPrime(n - i) == True:\n                print(n - i)\n                break\n    t -= 1", "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n\ndef millerTest(d, n, p):\n    x = pow(p, d, n)\n    if x == 1 or x == n - 1:\n        return True\n    while d != n - 1:\n        x = x * x % n\n        d *= 2\n        if x == 1:\n            return False\n        if x == n - 1:\n            return True\n    return False\n\ndef isPrime(n):\n    if n in primes:\n        return True\n    d = n - 1\n    while d % 2 == 0:\n        d //= 2\n    for p in primes:\n        if not millerTest(d, n, p):\n            return False\n    return True\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    while not isPrime(n):\n        n -= 1\n    print(n)", "def modular_pow(base, exponent, modulus):\n    result = 1\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = result * base % modulus\n        exponent = exponent // 2\n        base = base * base % modulus\n    return result\n\ndef passesMillerRabinTest(n, a):\n    s = 0\n    d = n - 1\n    while d % 2 == 0:\n        s += 1\n        d >>= 1\n    x = modular_pow(a, d, n)\n    if x == 1 or x == n - 1:\n        return True\n    for ss in range(s - 1):\n        x = x * x % n\n        if x == 1:\n            return False\n        if x == n - 1:\n            return True\n    return False\nprimeList = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37)\n\ndef isPrime(n):\n    for p in primeList:\n        if n % p == 0:\n            return n == p\n    for p in primeList:\n        if passesMillerRabinTest(n, p) == False:\n            return False\n    return True\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    if n == 2:\n        print(2)\n        continue\n    if n % 2 == 0:\n        n -= 1\n    while True:\n        if isPrime(n):\n            print(n)\n            break\n        n -= 2", "def bigmod(x, n, mod):\n    ans = 1\n    while n > 0:\n        if n % 2 == 1:\n            ans = ans * x % mod\n        n >>= 1\n        x = x * x % mod\n    return ans\n\ndef check_composite(n, a, d, s):\n    x = bigmod(a, d, n)\n    if x == 1 or x == n - 1:\n        return False\n    for r in range(s - 1):\n        x = x * x % n\n        if x == 1:\n            return True\n        if x == n - 1:\n            return False\n    return True\n\ndef MillerRabin(n, iter=1):\n    if n < 2:\n        return False\n    r = 0\n    d = n - 1\n    while d % 2 == 0:\n        d >>= 1\n        r += 1\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n    for a in primes:\n        if n == a:\n            return True\n        elif n % a == 0:\n            return False\n        if check_composite(n, a, d, r) == True:\n            return False\n    return True\nt = int(input())\nfor cas in range(t):\n    n = int(input())\n    if n == 2:\n        print(2)\n        continue\n    if n % 2 == 0:\n        n -= 1\n    while MillerRabin(n) == False:\n        n -= 2\n    print(n)", "def modular_pow(base, exponent, modulus):\n    result = 1\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = result * base % modulus\n        exponent = exponent // 2\n        base = base * base % modulus\n    return result\n\ndef passesMillerRabinTest(n, a):\n    s = 0\n    d = n - 1\n    while d % 2 == 0:\n        s += 1\n        d >>= 1\n    x = modular_pow(a, d, n)\n    if x == 1 or x == n - 1:\n        return True\n    for ss in range(s - 1):\n        x = x * x % n\n        if x == 1:\n            return False\n        if x == n - 1:\n            return True\n    return False\nprimeList = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37)\n\ndef isPrime(n):\n    for p in primeList:\n        if n % p == 0:\n            return n == p\n    for p in primeList:\n        if passesMillerRabinTest(n, p) == False:\n            return False\n    return True\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    if n == 2:\n        print(2)\n        continue\n    if n % 2 == 0:\n        n -= 1\n    while True:\n        if isPrime(n):\n            print(n)\n            break\n        n -= 2", "def modular_pow(base, exponent, modulus):\n    result = 1\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = result * base % modulus\n        exponent = exponent // 2\n        base = base * base % modulus\n    return result\n\ndef passesMillerRabinTest(n, a):\n    s = 0\n    d = n - 1\n    while d % 2 == 0:\n        s += 1\n        d >>= 1\n    x = modular_pow(a, d, n)\n    if x == 1 or x == n - 1:\n        return True\n    for ss in range(s - 1):\n        x = x * x % n\n        if x == 1:\n            return False\n        if x == n - 1:\n            return True\n    return False\nprimeList = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37)\n\ndef isPrime(n):\n    for p in primeList:\n        if n % p == 0:\n            return n == p\n    for p in primeList:\n        if passesMillerRabinTest(n, p) == False:\n            return False\n    return True\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    if n == 2:\n        print(2)\n        continue\n    if n % 2 == 0:\n        n -= 1\n    while True:\n        if isPrime(n):\n            print(n)\n            break\n        n -= 2", "import sys, random\nLOW_BORDER = 10\nTRY = 50\n\ndef readInt():\n    return int(input())\n\ndef readList():\n    return list(map(int, input().strip().split(' ')))\n\ndef readStr():\n    return input().strip()\n\ndef makeMatrix(a, b, value):\n    z = [value] * a\n    for i in range(a):\n        z[i] = [value] * b\n    return z\n\ndef gcd(a, b):\n    while a:\n        (a, b) = (b % a, a)\n    return b\n\ndef yakobi(a, p):\n    if a == 1:\n        return 1\n    if a == 2:\n        if (p * p - 1) // 8 % 2 == 0:\n            return 1\n        return -1\n    if a % 2 == 0:\n        res = 1\n        while a % 2 == 0:\n            a //= 2\n            res *= yakobi(2, p)\n        return res * yakobi(a, p)\n    if (a - 1) // 2 * ((p - 1) // 2) % 2 == 0:\n        return yakobi(p % a, a)\n    else:\n        return -yakobi(p % a, a)\n\ndef bruteForce(p):\n    if p == 2:\n        return True\n    if p % 2 == 0:\n        return False\n    t = 3\n    while t * t <= p:\n        if p % t == 0:\n            return False\n        t += 2\n    return True\n\ndef power(a, k, m):\n    r = 1\n    while k:\n        if k & 1:\n            r = r * a % m\n        k //= 2\n        a = a * a % m\n    return r\n\ndef solovey_shtrassen(p):\n    if p <= LOW_BORDER:\n        return bruteForce(p)\n    m = (p - 1) // 2\n    for i in range(TRY):\n        a = random.randint(2, p - 1)\n        if gcd(a, p) != 1:\n            return False\n        pp = power(a, m, p)\n        if pp != 1:\n            pp = -1\n        if pp != yakobi(a, p):\n            return False\n    return True\n\ndef phi(x):\n    res = 0\n    for i in range(1, x + 1):\n        if gcd(i, x) == 1:\n            res += 1\n    return res\ntc = readInt()\nwhile tc:\n    tc -= 1\n    n = readInt()\n    while solovey_shtrassen(n) == False:\n        n -= 1\n    print(n)", "import math\nimport random\n\ndef miller_rabin_pass(a, n):\n    d = n - 1\n    s = 0\n    while d % 2 == 0:\n        d >>= 1\n        s += 1\n    a_to_power = pow(a, d, n)\n    if a_to_power == 1:\n        return True\n    for i in range(s - 1):\n        if a_to_power == n - 1:\n            return True\n        a_to_power = a_to_power * a_to_power % n\n    return a_to_power == n - 1\n\ndef isprime(n):\n    for repeat in range(20):\n        a = 0\n        while a == 0:\n            a = random.randrange(n)\n        if not miller_rabin_pass(a, n):\n            return False\n    return True\nt = int(input())\nfor i in range(t):\n    x = int(input())\n    if x == 2:\n        print('2')\n        continue\n    if x % 2 == 0:\n        x = x - 1\n    while True:\n        if isprime(x):\n            print(x)\n            break\n        x = x - 2", "import math\nimport random\n\ndef miller_rabin_pass(a, n):\n    d = n - 1\n    s = 0\n    while d % 2 == 0:\n        d >>= 1\n        s += 1\n    a_to_power = pow(a, d, n)\n    if a_to_power == 1:\n        return True\n    for i in range(s - 1):\n        if a_to_power == n - 1:\n            return True\n        a_to_power = a_to_power * a_to_power % n\n    return a_to_power == n - 1\n\ndef isprime(n):\n    for repeat in range(20):\n        a = 0\n        while a == 0:\n            a = random.randrange(n)\n        if not miller_rabin_pass(a, n):\n            return False\n    return True\nt = int(input())\nfor i in range(t):\n    x = int(input())\n    if x == 2:\n        print('2')\n        continue\n    if x % 2 == 0:\n        x = x - 1\n    while x > 1:\n        if isprime(x):\n            print(x)\n            break\n        x = x - 2", "import math\nimport random\n\ndef miller_rabin_pass(a, n):\n    d = n - 1\n    s = 0\n    while d % 2 == 0:\n        d >>= 1\n        s += 1\n    a_to_power = pow(a, d, n)\n    if a_to_power == 1:\n        return True\n    for i in range(s - 1):\n        if a_to_power == n - 1:\n            return True\n        a_to_power = a_to_power * a_to_power % n\n    return a_to_power == n - 1\n\ndef isprime(n):\n    for repeat in range(20):\n        a = 0\n        while a == 0:\n            a = random.randrange(n)\n        if not miller_rabin_pass(a, n):\n            return False\n    return True\nt = int(input())\nfor i in range(t):\n    x = int(input())\n    if x == 2:\n        print('2')\n        continue\n    if x % 2 == 0:\n        x = x - 1\n    while x > 1:\n        if isprime(x):\n            print(x)\n            break\n        x = x - 2", "from math import sqrt\n\ndef miller_rabin_pass(s, d, n):\n    atp = pow(2, d, n)\n    if atp == 1 or atp == n - 1:\n        return True\n    for i in range(s - 1):\n        atp = atp * atp % n\n        if atp == n - 1 or atp == 1:\n            return True\n    return False\n\ndef miller_rabin(n):\n    if n == 1373653 or n == 25326001 or n == 3215031751 or (n == 2152302898747) or (n == 3474749660383) or (n == 341550071728321):\n        return False\n    v = sqrt(n)\n    for x in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]:\n        if x > v:\n            return True\n        if n % x == 0:\n            return False\n    d = n - 1\n    s = 0\n    while not d & 1:\n        d >>= 1\n        s += 1\n    if not miller_rabin_pass(s, d, n):\n        return False\n    return True\n\ndef f(n):\n    skip = [1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6]\n    if n == 2:\n        return n\n    if n % 2 == 0:\n        n -= 1\n    mod = n % 30\n    while not miller_rabin(n):\n        n -= skip[mod]\n        mod -= skip[mod]\n        if mod < 0:\n            mod += 30\n    return n\nc = int(input())\nfor i in range(c):\n    print(f(int(input())))", "CNT = 20\nA = 3312412834612873462378467\nB = 5514141562731294354999181\nMOD = 2 ** 64 - 1\nCUR = 132412342151345666641\n\ndef nextRandomValue():\n    global CUR\n    CUR = CUR * A + B\n    CUR %= MOD\n    return CUR\n\ndef Pow(val, p, mod):\n    res = 1\n    while p > 0:\n        if p % 2 == 1:\n            res = res * val % mod\n        val = val * val % mod\n        p //= 2\n    return res % mod\n\ndef isPrime(val):\n    if val == 2 or val == 3:\n        return True\n    if val < 2 or val % 2 == 0:\n        return False\n    s = 0\n    t = val - 1\n    while t % 2 == 0:\n        t //= 2\n        s += 1\n    for i in range(0, CNT):\n        r = 2 + nextRandomValue() % (val - 3)\n        x = Pow(r, t, val)\n        if x == 1 or x == val - 1:\n            continue\n        flag = False\n        for j in range(0, s - 1):\n            x = x * x % val\n            if x == val - 1:\n                flag = True\n        if not flag:\n            return False\n    return True\nt = int(input())\nfor T in range(0, t):\n    n = int(input())\n    ans = n\n    while not isPrime(ans):\n        ans -= 1\n    print(str(ans))"]