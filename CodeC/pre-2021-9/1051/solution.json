["import sys\ndata = sys.stdin.read().split()\ndata.reverse()\n\ndef read():\n    return int(data.pop())\n\ndef readStr():\n    return data.pop()\nN = 100 + 5\nT = read()\nfor test in range(T):\n    (n, c, k) = (read(), read(), read())\n    F = [0] * (n + 5)\n    for i in range(k):\n        (l, r) = (read(), read())\n        F[l] += 1\n        F[r + 1] -= 1\n    DP = [[0 for i in range(N)] for j in range(N)]\n    for i in range(c):\n        DP[i][0] = i\n    for j in range(1, N):\n        for i in range(1, c):\n            cnt = 0\n            for l in range(c):\n                cnt += DP[i * l % c][j - 1]\n            cnt /= c\n            DP[i][j] = (cnt + DP[i][j - 1]) / 2\n    ans = 0\n    for i in range(1, n + 1):\n        F[i] += F[i - 1]\n        ans += DP[1][F[i]]\n    print(ans)", "import sys\ndata = sys.stdin.read().split()\ndata.reverse()\n\ndef read():\n    return int(data.pop())\n\ndef readStr():\n    return data.pop()\nN = 100 + 5\nT = read()\nfor test in range(T):\n    (n, c, k) = (read(), read(), read())\n    F = [0] * (n + 5)\n    for i in range(k):\n        (l, r) = (read(), read())\n        F[l] += 1\n        F[r + 1] -= 1\n    DP = [[0 for i in range(N)] for j in range(N)]\n    for i in range(c):\n        DP[i][0] = i\n    for j in range(1, N):\n        for i in range(1, c):\n            cnt = 0\n            for l in range(c):\n                cnt += DP[i * l % c][j - 1]\n            cnt /= c\n            DP[i][j] = (cnt + DP[i][j - 1]) / 2\n    ans = 0\n    for i in range(1, n + 1):\n        F[i] += F[i - 1]\n        ans += DP[1][F[i]]\n    print(ans)", "for _ in range(int(input())):\n    (N, C, K) = [int(c) for c in input().split()]\n    dp = [[[0 for i in range(C)] for ii in range(N)] for ii in range(K + 1)]\n    for i in range(N):\n        dp[0][i][1] = 1\n    for i in range(1, K + 1):\n        (l, r) = [int(c) - 1 for c in input().split()]\n        for j in range(N):\n            for k in range(C):\n                if j >= l and j <= r:\n                    for m in range(C):\n                        dp[i][j][m * k % C] += dp[i - 1][j][k] / (2 * C)\n                    dp[i][j][k] += dp[i - 1][j][k] * 0.5\n                else:\n                    dp[i][j][k] += dp[i - 1][j][k]\n    ans = 0\n    for i in range(N):\n        for j in range(C):\n            ans += j * dp[K][i][j]\n    print(ans)", "for t in range(int(input())):\n    (n, c, k) = [int(x) for x in input().split()]\n    a = [[[0 for i in range(c)] for j in range(n + 1)] for j in range(k + 1)]\n    for i in range(1, n + 1):\n        a[0][i][1] = 1\n    for i in range(1, k + 1):\n        (l, r) = [int(x) for x in input().split()]\n        for j in range(1, n + 1):\n            for c1 in range(c):\n                if l <= j <= r:\n                    for c2 in range(c):\n                        a[i][j][c1 * c2 % c] += a[i - 1][j][c1] / (2 * c)\n                    a[i][j][c1] += a[i - 1][j][c1] * 0.5\n                else:\n                    a[i][j][c1] += a[i - 1][j][c1]\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(c):\n            ans += a[k][i][j] * j\n    print(ans)", "for t in range(int(input())):\n    (n, c, k) = [int(x) for x in input().split()]\n    a = [[[0 for i in range(c)] for j in range(n + 1)] for j in range(k + 1)]\n    for i in range(1, n + 1):\n        a[0][i][1] = 1\n    for i in range(1, k + 1):\n        (l, r) = [int(x) for x in input().split()]\n        for j in range(1, n + 1):\n            for c1 in range(c):\n                if l <= j <= r:\n                    for c2 in range(c):\n                        a[i][j][c1 * c2 % c] += a[i - 1][j][c1] * (0.5 / c)\n                    a[i][j][c1] += a[i - 1][j][c1] * 0.5\n                else:\n                    a[i][j][c1] += a[i - 1][j][c1]\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(c):\n            ans += a[k][i][j] * j\n    print(ans)", "for _ in range(int(input())):\n    (n, c, k) = [int(x) for x in input().split()]\n    dp = [[[0 for i in range(c)] for j in range(n + 1)] for j in range(k + 1)]\n    for i in range(1, n + 1):\n        dp[0][i][1] = 1\n    for i in range(1, k + 1):\n        (l, r) = [int(x) for x in input().split()]\n        for j in range(1, n + 1):\n            for c1 in range(c):\n                if l <= j <= r:\n                    for c2 in range(c):\n                        dp[i][j][c1 * c2 % c] += dp[i - 1][j][c1] * (0.5 / c)\n                    dp[i][j][c1] += dp[i - 1][j][c1] * 0.5\n                else:\n                    dp[i][j][c1] += dp[i - 1][j][c1]\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(c):\n            ans += dp[k][i][j] * j\n    print(ans)", "def calcEV(n, c, k, lr):\n    pr = [[0] * c for i in range(k + 1)]\n    pr[0][1] = 1\n    ev = [0] * (k + 1)\n    ev[0] = 1\n    for k_index in range(1, k + 1):\n        p = 0.5 / c\n        for cell_color in range(c):\n            for picked_color in range(c):\n                resulting_color = cell_color * picked_color % c\n                pr[k_index][resulting_color] += p * pr[k_index - 1][cell_color]\n            pr[k_index][cell_color] += 0.5 * pr[k_index - 1][cell_color]\n        for cell_color in range(c):\n            ev[k_index] += cell_color * pr[k_index][cell_color]\n    num_visits = [0] * n\n    for k_index in range(k):\n        for n_index in range(n):\n            if lr[k_index][0] - 1 <= n_index and n_index <= lr[k_index][1] - 1:\n                num_visits[n_index] += 1\n    sum_ev = 0\n    for n_index in range(n):\n        sum_ev += ev[num_visits[n_index]]\n    print(sum_ev)\nnumTests = int(input())\nfor test in range(numTests):\n    (n, c, k) = map(int, input().split(' '))\n    lr = []\n    for i in range(k):\n        (l, r) = map(int, input().split(' '))\n        lr.append((l, r))\n    calcEV(n, c, k, lr)", "import sys\ndata = sys.stdin.read().split()\ndata.reverse()\n\ndef read():\n    return int(data.pop())\n\ndef readStr():\n    return data.pop()\nN = 100 + 5\nT = read()\nfor test in range(T):\n    (n, c, k) = (read(), read(), read())\n    F = [0] * (n + 5)\n    for i in range(k):\n        (l, r) = (read(), read())\n        F[l] += 1\n        F[r + 1] -= 1\n    DP = [[0 for i in range(N)] for j in range(N)]\n    for i in range(c):\n        DP[i][0] = i\n    for j in range(1, N):\n        for i in range(1, c):\n            cnt = 0\n            for l in range(c):\n                cnt += DP[i * l % c][j - 1]\n            cnt /= c\n            DP[i][j] = (cnt + DP[i][j - 1]) / 2\n    ans = 0\n    for i in range(1, n + 1):\n        F[i] += F[i - 1]\n        ans += DP[1][F[i]]\n    print(ans)", "import math\n\ndef Solve(i, acc, c):\n    if i == 0:\n        return acc\n    if (i, acc, c) in Mem:\n        return Mem[i, acc, c]\n    ans = 0\n    for j in range(c):\n        ans += 1 / c * Solve(i - 1, acc * j % c, c)\n    Mem[i, acc, c] = ans\n    return ans\n\ndef nCr(x, y):\n    return math.factorial(x) // (math.factorial(y) * math.factorial(x - y))\nMem = {}\nT = int(input())\nfor t in range(T):\n    (n, c, k) = map(int, input().split())\n    Cnt = [0] * n\n    for i in range(k):\n        (x, y) = map(int, input().split())\n        for j in range(x - 1, y):\n            Cnt[j] += 1\n    ans = 0\n    for i in range(n):\n        f = (1 / 2) ** Cnt[i]\n        for j in range(Cnt[i] + 1):\n            ans += f * Solve(j, 1, c) * nCr(Cnt[i], j)\n    print(ans)", "nck = [[0 for x in range(0, 102)] for x in range(0, 102)]\n\ndef precompute():\n    for i in range(0, 102):\n        for j in range(0, 102):\n            if j == 0 or i == j:\n                nck[i][j] = 1\n            else:\n                nck[i][j] = nck[i - 1][j - 1] + nck[i - 1][j]\nprecompute()\ntest = int(input())\nwhile test:\n    color = [[0 for x in range(0, 102)] for x in range(0, 52)]\n    csum = [0 for x in range(0, 52)]\n    count = [0 for x in range(0, 102)]\n    csum[0] = 1\n    ans = 0\n    (n, c, k) = input().split()\n    n = int(n)\n    c = int(c)\n    k = int(k)\n    for i in range(0, c):\n        color[1][i] = 1\n        csum[1] += i / c\n    for i in range(2, 51):\n        for j in range(0, c):\n            for kk in range(0, c):\n                col = j * kk % c\n                color[i][col] += color[i - 1][j]\n        for j in range(0, c):\n            csum[i] += j * color[i][j]\n        csum[i] /= pow(c, i)\n    for i in range(0, k):\n        (l, r) = input().split()\n        l = int(l)\n        r = int(r)\n        for j in range(l, r + 1):\n            count[j] += 1\n    for i in range(1, n + 1):\n        temp = 0.0\n        ctr = count[i]\n        for j in range(0, ctr + 1):\n            temp += nck[ctr][j] / pow(2, ctr) * csum[j]\n        ans += temp\n    print('{0:.9f}'.format(ans))\n    test = test - 1", "from math import factorial\n\ndef binom(n, k):\n    return factorial(n) // factorial(k) // factorial(n - k)\n\ndef main():\n    T = int(input())\n    for t in range(T):\n        (n, c, k) = tuple([int(x) for x in input().split()])\n        freq = [0 for i in range(n + 1)]\n        for q in range(k):\n            (l, r) = tuple([int(x) for x in input().split()])\n            for i in range(l, r + 1):\n                freq[i] += 1\n        ansa = []\n        a = [0 for i in range(c)]\n        a[1] = 1\n        for k in range(51):\n            ansa.append(sum([i * a[i] for i in range(c)]) / c ** k)\n            b = [0 for i in range(c)]\n            for i in range(c):\n                for j in range(c):\n                    z = i * j % c\n                    b[z] += a[i]\n            a = [x for x in b]\n        ans = 0\n        for x in range(1, n + 1):\n            tmp = 0\n            for k in range(0, freq[x] + 1):\n                tmp += ansa[k] * binom(freq[x], k)\n            tmp /= 2 ** freq[x]\n            ans += tmp\n        print('%0.12f' % ans)\nmain()"]