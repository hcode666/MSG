["import sys\nfrom fractions import *\n\ndef readInt():\n    return int(input())\n\ndef readList():\n    return list(map(int, input().strip().split(' ')))\n\ndef readStr():\n    return input().strip()\n\ndef makeMatrix(a, b, value):\n    z = [value] * a\n    for i in range(a):\n        z[i] = [value] * b\n    return z\nMAXN = 152\ne = [0] * MAXN\ne[1] = Fraction(1, 1)\ne[2] = Fraction(2, 1)\nf = [1] * MAXN\nfor i in range(1, MAXN):\n    f[i] = f[i - 1] * i\nfor i in range(3, MAXN):\n    p = Fraction()\n    for k in range(2, i + 1):\n        p += e[k] * f[k - 2] * ((k - 2) * (k - 3) + (k - 2) * 2 + 1) * (i + 1 - k)\n    e[i] = Fraction(p + f[i], f[i]) * (i * i - i)\n    e[i] = e[i] / (2 * i - 3)\ntc = readInt()\nwhile tc:\n    tc -= 1\n    n = readInt()\n    if n <= 1 or n > 150:\n        while True:\n            pass\n    if e[n].denominator == 1:\n        print(e[n].numerator)\n    else:\n        print('%i/%i' % (e[n].numerator, e[n].denominator))", "import sys\nfrom fractions import *\n\ndef readInt():\n    return int(input())\n\ndef readList():\n    return list(map(int, input().strip().split(' ')))\n\ndef readStr():\n    return input().strip()\n\ndef makeMatrix(a, b, value):\n    z = [value] * a\n    for i in range(a):\n        z[i] = [value] * b\n    return z\nMAXN = 152\ne = [0] * MAXN\ne[1] = Fraction(1, 1)\ne[2] = Fraction(2, 1)\nf = [1] * MAXN\nfor i in range(1, MAXN):\n    f[i] = f[i - 1] * i\nfor i in range(3, MAXN):\n    p = Fraction()\n    for k in range(2, i + 1):\n        p += e[k] * f[k - 2] * ((k - 2) * (k - 3) + (k - 2) * 2 + 1) * (i + 1 - k)\n    e[i] = Fraction(p + f[i], f[i]) * (i * i - i)\n    e[i] = e[i] / (2 * i - 3)\ntc = readInt()\nwhile tc:\n    tc -= 1\n    n = readInt()\n    if n <= 1 or n > 150:\n        while True:\n            pass\n    if e[n].denominator == 1:\n        print(e[n].numerator)\n    else:\n        print('%i/%i' % (e[n].numerator, e[n].denominator))", "import sys\nfrom fractions import *\n\ndef readInt():\n    return int(input())\n\ndef readList():\n    return list(map(int, input().strip().split(' ')))\n\ndef readStr():\n    return input().strip()\n\ndef makeMatrix(a, b, value):\n    z = [value] * a\n    for i in range(a):\n        z[i] = [value] * b\n    return z\nMAXN = 152\ne = [0] * MAXN\ne[1] = Fraction(1, 1)\ne[2] = Fraction(2, 1)\nf = [1] * MAXN\nfor i in range(1, MAXN):\n    f[i] = f[i - 1] * i\nfor i in range(3, MAXN):\n    p = Fraction()\n    for k in range(2, i + 1):\n        p += e[k] * f[k - 2] * ((k - 2) * (k - 3) + (k - 2) * 2 + 1) * (i + 1 - k)\n    e[i] = Fraction(p + f[i], f[i]) * (i * i - i)\n    e[i] = e[i] / (2 * i - 3)\ntc = readInt()\nwhile tc:\n    tc -= 1\n    n = readInt()\n    if n <= 1 or n > 150:\n        while True:\n            pass\n    if e[n].denominator == 1:\n        print(e[n].numerator)\n    else:\n        print('%i/%i' % (e[n].numerator, e[n].denominator))", "import sys\nfrom fractions import *\n\ndef readInt():\n    return int(input())\n\ndef readList():\n    return list(map(int, input().strip().split(' ')))\n\ndef readStr():\n    return input().strip()\n\ndef makeMatrix(a, b, value):\n    z = [value] * a\n    for i in range(a):\n        z[i] = [value] * b\n    return z\nMAXN = 152\ne = [0] * MAXN\ne[1] = Fraction(1, 1)\ne[2] = Fraction(2, 1)\nf = [1] * MAXN\nfor i in range(1, MAXN):\n    f[i] = f[i - 1] * i\nfor i in range(3, MAXN):\n    p = Fraction()\n    for k in range(2, i + 1):\n        p += e[k] * f[k - 2] * ((k - 2) * (k - 3) + (k - 2) * 2 + 1) * (i + 1 - k)\n    e[i] = Fraction(p + f[i], f[i]) * (i * i - i)\n    e[i] = e[i] / (2 * i - 3)\ntc = readInt()\nwhile tc:\n    tc -= 1\n    n = readInt()\n    if n <= 1 or n > 150:\n        while True:\n            pass\n    if e[n].denominator == 1:\n        print(e[n].numerator)\n    else:\n        print('%i/%i' % (e[n].numerator, e[n].denominator))", "import sys\nfrom fractions import *\n\ndef readInt():\n    return int(input())\n\ndef readList():\n    return list(map(int, input().strip().split(' ')))\n\ndef readStr():\n    return input().strip()\n\ndef makeMatrix(a, b, value):\n    z = [value] * a\n    for i in range(a):\n        z[i] = [value] * b\n    return z\nMAXN = 152\ne = [0] * MAXN\ne[1] = Fraction(1, 1)\ne[2] = Fraction(2, 1)\nf = [1] * MAXN\nfor i in range(1, MAXN):\n    f[i] = f[i - 1] * i\nfor i in range(3, MAXN):\n    p = Fraction()\n    for k in range(2, i + 1):\n        p += e[k] * f[k - 2] * ((k - 2) * (k - 3) + (k - 2) * 2 + 1) * (i + 1 - k)\n    e[i] = Fraction(p + f[i], f[i]) * (i * i - i)\n    e[i] = e[i] / (2 * i - 3)\ntc = readInt()\nwhile tc:\n    tc -= 1\n    n = readInt()\n    if n <= 1 or n > 150:\n        while True:\n            pass\n    if e[n].denominator == 1:\n        print(e[n].numerator)\n    else:\n        print('%i/%i' % (e[n].numerator, e[n].denominator))", "import sys\nfrom fractions import *\n\ndef readInt():\n    return int(input())\n\ndef readList():\n    return list(map(int, input().strip().split(' ')))\n\ndef readStr():\n    return input().strip()\n\ndef makeMatrix(a, b, value):\n    z = [value] * a\n    for i in range(a):\n        z[i] = [value] * b\n    return z\nMAXN = 152\ne = [0] * MAXN\ne[1] = Fraction(1, 1)\ne[2] = Fraction(2, 1)\nf = [1] * MAXN\nfor i in range(1, MAXN):\n    f[i] = f[i - 1] * i\nfor i in range(3, MAXN):\n    p = Fraction()\n    for k in range(2, i + 1):\n        p += e[k] * f[k - 2] * ((k - 2) * (k - 3) + (k - 2) * 2 + 1) * (i + 1 - k)\n    e[i] = Fraction(p + f[i], f[i]) * (i * i - i)\n    e[i] = e[i] / (2 * i - 3)\ntc = readInt()\nwhile tc:\n    tc -= 1\n    n = readInt()\n    if n <= 1 or n > 150:\n        while True:\n            pass\n    if e[n].denominator == 1:\n        print(e[n].numerator)\n    else:\n        print('%i/%i' % (e[n].numerator, e[n].denominator))", "import sys\nfrom fractions import *\n\ndef readInt():\n    return int(input())\n\ndef readList():\n    return list(map(int, input().strip().split(' ')))\n\ndef readStr():\n    return input().strip()\n\ndef makeMatrix(a, b, value):\n    z = [value] * a\n    for i in range(a):\n        z[i] = [value] * b\n    return z\nMAXN = 152\ne = [0] * MAXN\ne[1] = Fraction(1, 1)\ne[2] = Fraction(2, 1)\nf = [1] * MAXN\nfor i in range(1, MAXN):\n    f[i] = f[i - 1] * i\nfor i in range(3, MAXN):\n    p = Fraction()\n    for k in range(2, i + 1):\n        p += e[k] * f[k - 2] * ((k - 2) * (k - 3) + (k - 2) * 2 + 1) * (i + 1 - k)\n    e[i] = Fraction(p + f[i], f[i]) * (i * i - i)\n    e[i] = e[i] / (2 * i - 3)\ntc = readInt()\nwhile tc:\n    tc -= 1\n    n = readInt()\n    if n <= 1 or n > 150:\n        while True:\n            pass\n    if e[n].denominator == 1:\n        print(e[n].numerator)\n    else:\n        print('%i/%i' % (e[n].numerator, e[n].denominator))", "import sys\nfrom fractions import *\n\ndef readInt():\n    return int(input())\n\ndef readList():\n    return list(map(int, input().strip().split(' ')))\n\ndef readStr():\n    return input().strip()\n\ndef makeMatrix(a, b, value):\n    z = [value] * a\n    for i in range(a):\n        z[i] = [value] * b\n    return z\nMAXN = 152\ne = [0] * MAXN\ne[1] = Fraction(1, 1)\ne[2] = Fraction(2, 1)\nf = [1] * MAXN\nfor i in range(1, MAXN):\n    f[i] = f[i - 1] * i\nfor i in range(3, MAXN):\n    p = Fraction()\n    for k in range(2, i + 1):\n        p += e[k] * f[k - 2] * ((k - 2) * (k - 3) + (k - 2) * 2 + 1) * (i + 1 - k)\n    e[i] = Fraction(p + f[i], f[i]) * (i * i - i)\n    e[i] = e[i] / (2 * i - 3)\ntc = readInt()\nwhile tc:\n    tc -= 1\n    n = readInt()\n    if n <= 1 or n > 150:\n        while True:\n            pass\n    if e[n].denominator == 1:\n        print(e[n].numerator)\n    else:\n        print('%i/%i' % (e[n].numerator, e[n].denominator))", "import sys\nfrom fractions import *\n\ndef readInt():\n    return int(input())\n\ndef readList():\n    return list(map(int, input().strip().split(' ')))\n\ndef readStr():\n    return input().strip()\n\ndef makeMatrix(a, b, value):\n    z = [value] * a\n    for i in range(a):\n        z[i] = [value] * b\n    return z\nMAXN = 152\ne = [0] * MAXN\ne[1] = Fraction(1, 1)\ne[2] = Fraction(2, 1)\nf = [1] * MAXN\nfor i in range(1, MAXN):\n    f[i] = f[i - 1] * i\nfor i in range(3, MAXN):\n    p = Fraction()\n    for k in range(2, i + 1):\n        p += e[k] * f[k - 2] * ((k - 2) * (k - 3) + (k - 2) * 2 + 1) * (i + 1 - k)\n    e[i] = Fraction(p + f[i], f[i]) * (i * i - i)\n    e[i] = e[i] / (2 * i - 3)\ntc = readInt()\nwhile tc:\n    tc -= 1\n    n = readInt()\n    if n <= 1 or n > 150:\n        while True:\n            pass\n    if e[n].denominator == 1:\n        print(e[n].numerator)\n    else:\n        print('%i/%i' % (e[n].numerator, e[n].denominator))", "import sys\nfrom fractions import *\n\ndef readInt():\n    return int(input())\n\ndef readList():\n    return list(map(int, input().strip().split(' ')))\n\ndef readStr():\n    return input().strip()\n\ndef makeMatrix(a, b, value):\n    z = [value] * a\n    for i in range(a):\n        z[i] = [value] * b\n    return z\nMAXN = 152\ne = [0] * MAXN\ne[1] = Fraction(1, 1)\ne[2] = Fraction(2, 1)\nf = [1] * MAXN\nfor i in range(1, MAXN):\n    f[i] = f[i - 1] * i\nfor i in range(3, MAXN):\n    p = Fraction()\n    for k in range(2, i + 1):\n        p += e[k] * f[k - 2] * ((k - 2) * (k - 3) + (k - 2) * 2 + 1) * (i + 1 - k)\n    e[i] = Fraction(p + f[i], f[i]) * (i * i - i)\n    e[i] = e[i] / (2 * i - 3)\ntc = readInt()\nwhile tc:\n    tc -= 1\n    n = readInt()\n    if n <= 1 or n > 150:\n        while True:\n            pass\n    if e[n].denominator == 1:\n        print(e[n].numerator)\n    else:\n        print('%i/%i' % (e[n].numerator, e[n].denominator))", "from fractions import Fraction\nfact = [1]\nfor i in range(1, 151):\n    fact.append(i * fact[-1])\ndp = [None] * 151\ndp[2] = Fraction(2, 1)\npre_mult = [None] * 151\npre_mult[2] = dp[2] * fact[2 - 2]\nfor n in range(3, 151):\n    sum = 0\n    for nk in range(2, n):\n        sum += pre_mult[nk] * (3 + 3 * n + nk * (-3 * n - 6) + nk * nk * (n + 4) - nk * nk * nk)\n    dp[n] = (-fact[n] - sum) / ((n * n - 3 * n + 3) * fact[n - 2] - fact[n])\n    pre_mult[n] = dp[n] * fact[n - 2]\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    print(dp[n])", "from fractions import Fraction\nfact = [1]\nfor i in range(1, 151):\n    fact.append(i * fact[-1])\ndp = [None] * 151\ndp[2] = Fraction(2, 1)\npre_mult = [None] * 151\npre_mult[2] = dp[2] * fact[2 - 2]\nfor n in range(3, 151):\n    sum = 0\n    for nk in range(2, n):\n        sum += pre_mult[nk] * (3 + 3 * n + nk * (-3 * n - 6) + nk * nk * (n + 4) - nk * nk * nk)\n    dp[n] = (-fact[n] - sum) / ((n * n - 3 * n + 3) * fact[n - 2] - fact[n])\n    pre_mult[n] = dp[n] * fact[n - 2]\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    print(dp[n])", "from fractions import Fraction\nfact = [0 for x in range(151)]\n\ndef precompute1(num):\n    fact[0] = 1\n    for i in range(1, num + 1):\n        fact[i] = fact[i - 1] * i\nterm = [0 for x in range(151)]\n\ndef precompute2(num):\n    term[0] = 0\n    term[1] = 0\n    for i in range(2, num + 1):\n        term[i] = ((i - 1) * (i - 2) + 1) * fact[i - 2]\nans = [(0, 1) for x in range(151)]\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef precompute3(num):\n    ans[0] = (0, 1)\n    ans[1] = (1, 1)\n    ans[2] = (2, 1)\n    cumm = Fraction(0, 1)\n    for n in range(3, num + 1):\n        cumm = cumm + Fraction(term[n - 1] * (ans[n - 1][0] + ans[n - 1][1]), ans[n - 1][1])\n        k = Fraction(term[n], 1) + cumm + Fraction(ans[n - 1][0] * fact[n - 1], ans[n - 1][1])\n        numer = int(k.numerator)\n        denom = int(k.denominator) * int(fact[n] - term[n])\n        g = int(gcd(numer, denom))\n        numer = numer // g\n        denom = denom // g\n        ans[n] = (numer, denom)\n\ndef main():\n    t = int(input())\n    inp = []\n    while t > 0:\n        t -= 1\n        n = int(input())\n        inp.append(n)\n    mx = max(inp)\n    precompute1(mx)\n    precompute2(mx)\n    precompute3(mx)\n    for n in inp:\n        if ans[n][1] == 1:\n            print(ans[n][0])\n        else:\n            print(str(ans[n][0]) + '/' + str(ans[n][1]))\nmain()", "from fractions import Fraction\nfact = [0 for x in range(151)]\n\ndef precompute1(num):\n    fact[0] = 1\n    for i in range(1, num + 1):\n        fact[i] = fact[i - 1] * i\nterm = [0 for x in range(151)]\n\ndef precompute2(num):\n    term[0] = 0\n    term[1] = 0\n    for i in range(2, num + 1):\n        term[i] = ((i - 1) * (i - 2) + 1) * fact[i - 2]\nans = [Fraction(0, 1) for x in range(151)]\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef precompute3(num):\n    ans[0] = Fraction(0, 1)\n    ans[1] = Fraction(1, 1)\n    ans[2] = Fraction(2, 1)\n    cumm = Fraction(0, 1)\n    for n in range(3, num + 1):\n        cumm = cumm + Fraction(term[n - 1] * (ans[n - 1].numerator + ans[n - 1].denominator), ans[n - 1].denominator)\n        k = Fraction(term[n], 1) + cumm + Fraction(ans[n - 1].numerator * fact[n - 1], ans[n - 1].denominator)\n        numer = int(k.numerator)\n        denom = int(k.denominator) * int(fact[n] - term[n])\n        g = int(gcd(numer, denom))\n        numer = numer // g\n        denom = denom // g\n        ans[n] = Fraction(numer, denom)\n\ndef main():\n    t = int(input())\n    inp = []\n    while t > 0:\n        t -= 1\n        n = int(input())\n        inp.append(n)\n    mx = max(inp)\n    precompute1(mx)\n    precompute2(mx)\n    precompute3(mx)\n    for n in inp:\n        if ans[n].denominator == 1:\n            print(ans[n].numerator)\n        else:\n            print(str(ans[n].numerator) + '/' + str(ans[n].denominator))\nmain()", "max_inp_len = 150\ninp = [0] * (max_inp_len + 1)\nnt = int(input())\nmax_n = 3\nfor j in range(nt):\n    inp[j] = int(input())\n    if inp[j] > max_n:\n        max_n = inp[j]\nt_n = [0] * (max_n + 1)\nt_d = [1] * (max_n + 1)\nt_n[2] = 2\na_n = 0\na_d = 1\nb_n = 0\nb_d = 1\n\ndef gcd(u, v):\n    while v != 0:\n        r = u % v\n        u = v\n        v = r\n    return u\nfact_n_minus_3 = 1\nfact_n = 2\nfor n in range(3, max_n + 1):\n    fact_n *= n\n    f_n = ((n - 3) ** 2 + (n - 2)) * fact_n_minus_3 * t_n[n - 1]\n    f_d = t_d[n - 1]\n    a_n = f_n * a_d + a_n * f_d\n    a_d *= f_d\n    g = gcd(a_n, a_d)\n    (a_n, a_d) = (a_n // g, a_d // g)\n    b_n = (n - 2) * f_n * b_d + b_n * f_d\n    b_d *= f_d\n    g = gcd(b_n, b_d)\n    (b_n, b_d) = (b_n // g, b_d // g)\n    s_n = n * a_n * b_d - b_n * a_d\n    s_d = a_d * b_d\n    t_n[n] = (fact_n * s_d + s_n) * n * (n - 1)\n    t_d[n] = s_d * fact_n * (2 * n - 3)\n    g = gcd(t_n[n], t_d[n])\n    (t_n[n], t_d[n]) = (t_n[n] // g, t_d[n] // g)\n    fact_n_minus_3 *= n - 2\n\ndef solve(n):\n    if t_d[n] == 1:\n        print(t_n[n])\n    else:\n        print('%d/%d' % (t_n[n], t_d[n]))\nfor j in range(nt):\n    solve(inp[j])", "max_inp_len = 150\ninp = [0] * (max_inp_len + 1)\nnt = int(input())\nmax_n = 3\nfor j in range(nt):\n    inp[j] = int(input())\n    if inp[j] > max_n:\n        max_n = inp[j]\nt_n = [0] * (max_n + 1)\nt_d = [1] * (max_n + 1)\nt_n[2] = 2\nfact = [1] * (max_n + 1)\nfor n in range(2, max_n + 1):\n    fact[n] = fact[n - 1] * n\na_n = 0\na_d = 1\nb_n = 0\nb_d = 1\n\ndef gcd(u, v):\n    while v != 0:\n        r = u % v\n        u = v\n        v = r\n    return u\nfor n in range(3, max_n + 1):\n    f_n = ((n - 3) ** 2 + (n - 2)) * fact[n - 3] * t_n[n - 1]\n    f_d = t_d[n - 1]\n    a_n = f_n * a_d + a_n * f_d\n    a_d *= f_d\n    g = gcd(a_n, a_d)\n    (a_n, a_d) = (a_n // g, a_d // g)\n    b_n = (n - 2) * f_n * b_d + b_n * f_d\n    b_d *= f_d\n    g = gcd(b_n, b_d)\n    (b_n, b_d) = (b_n // g, b_d // g)\n    s_n = n * a_n * b_d - b_n * a_d\n    s_d = a_d * b_d\n    t_n[n] = (fact[n] * s_d + s_n) * n * (n - 1)\n    t_d[n] = s_d * fact[n] * (2 * n - 3)\n    g = gcd(t_n[n], t_d[n])\n    (t_n[n], t_d[n]) = (t_n[n] // g, t_d[n] // g)\n\ndef solve(n):\n    if t_d[n] == 1:\n        print(t_n[n])\n    else:\n        print('%d/%d' % (t_n[n], t_d[n]))\nfor j in range(nt):\n    solve(inp[j])", "from fractions import Fraction\nmax_inp_len = 150\ninp = [0] * (max_inp_len + 1)\nnt = int(input())\nmax_n = 3\nfor j in range(nt):\n    inp[j] = int(input())\n    if inp[j] > max_n:\n        max_n = inp[j]\nt = [0] * (max_n + 1)\nt[0] = 0\nt[1] = 0\nt[2] = 2\nfact = [1] * (max_n + 1)\nfor n in range(2, max_n + 1):\n    fact[n] = fact[n - 1] * n\naa = 0\nbb = 0\n\ndef ff(j):\n    return ((j - 2) ** 2 + (j - 1)) * fact[j - 2] * t[j]\nfor n in range(3, max_n + 1):\n    denom = Fraction(2 * n - 3, n * (n - 1))\n    fj = ff(n - 1)\n    aa += fj\n    bb += (n - 2) * fj\n    s = n * aa - bb\n    t[n] = (1 + s * Fraction(1, fact[n])) / denom\nfor j in range(nt):\n    print(t[inp[j]])", "from fractions import Fraction\nn = int(input())\nv = [None] * n\nMAXV = 0\nfor i in range(0, n):\n    v[i] = int(input())\n    if MAXV < v[i]:\n        MAXV = v[i] + 1\nfa = [None] * 155\nfa[0] = 1\nfa[1] = 1\nfor f in range(2, MAXV):\n    fa[f] = fa[f - 1] * f\nns = [None] * 155\nfor n in range(2, MAXV):\n    ns[n] = fa[n] - fa[n - 1] * 2 + fa[n - 2]\nmo = [None] * 155\nmo[1] = Fraction(0)\nmo[2] = Fraction(2)\nli1 = Fraction(0)\nliA = Fraction(0)\nfor n in range(3, MAXV):\n    zz = ns[n - 1] * mo[n - 1]\n    li1 += zz\n    liA += zz + li1\n    mo[n] = (liA + fa[n]) / (fa[n] - ns[n])\nfor i in v:\n    print(mo[i])", "from fractions import Fraction\nimport sys\nn = int(input())\nv = [None] * n\nmv = 0\nfor i in range(0, n):\n    v[i] = int(input())\n    if mv < v[i]:\n        mv = v[i] + 1\nfa = [None] * 155\nfa[0] = 1\nfa[1] = 1\nfor f in range(2, 151):\n    fa[f] = fa[f - 1] * f\nns = [None] * 155\nfor n in range(2, mv):\n    ns[n] = fa[n] - fa[n - 1] * 2 + fa[n - 2]\nmo = [None] * 155\nmo[1] = Fraction(0)\nmo[2] = Fraction(2)\nmu = [None] * 155\nmu[2] = ns[2] * mo[2]\nli1 = Fraction(0)\nliA = Fraction(0)\nfor n in range(3, mv):\n    li1 += mu[n - 1]\n    liA += mu[n - 1] + li1\n    mo[n] = (liA + fa[n]) / (fa[n] - ns[n])\n    if n < mv - 1:\n        mu[n] = ns[n] * mo[n]\nfor i in v:\n    print(mo[i])", "from fractions import Fraction\nfac = [1 for i in range(151)]\nfor i in range(1, 151):\n    fac[i] = fac[i - 1] * i\ncount = [fac[i] - 2 * fac[i - 1] + fac[i - 2] for i in range(151)]\nf = [Fraction(0, 1) for i in range(151)]\nadd = [Fraction(0, 1) for i in range(151)]\ntot = Fraction(0, 1)\nlast = Fraction(0, 1)\nfor n in range(2, 151):\n    d = last\n    f[n] = Fraction(d + fac[n], fac[n] - count[n])\n    tot = tot + count[n] * f[n]\n    last = tot + last + count[n] * f[n]\nt = int(input())\nfor case in range(t):\n    n = int(input())\n    print(f[n])"]