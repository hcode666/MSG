["def update(M, level, u, v):\n    level[u] = level[v] + 1\n    M[u][0] = v\n    for j in range(1, 18):\n        if M[u][j - 1]:\n            M[u][j] = M[M[u][j - 1]][j - 1]\n\ndef LCA(M, level, u, v):\n    if u == v:\n        return u\n    if level[u] < level[v]:\n        (u, v) = (v, u)\n    for i in range(17, -1, -1):\n        if M[u][i] and level[M[u][i]] >= level[v]:\n            u = M[u][i]\n    if u == v:\n        return u\n    for i in range(17, -1, -1):\n        if M[u][i] and M[u][i] != M[v][i]:\n            u = M[u][i]\n            v = M[v][i]\n    return M[u][0]\n\ndef distance(par, level, a, b):\n    return level[a] + level[b] - 2 * level[LCA(par, level, a, b)]\n\ndef solve():\n    for _ in range(int(input())):\n        N = int(input())\n        M = [[0 for _ in range(18)] for _ in range(N + 5)]\n        level = [0] * N\n        (u, v) = (0, 0)\n        results = []\n        diameter = 0\n        for i in range(1, N):\n            p = int(input())\n            update(M, level, i, p - 1)\n            cur = distance(M, level, i, u)\n            if cur > diameter:\n                diameter = cur\n                v = i\n            else:\n                cur = distance(M, level, i, v)\n                if cur > diameter:\n                    diameter = cur\n                    u = i\n            results.append(diameter)\n        print('\\n'.join((str(k) for k in results)))\nsolve()", "def update(M, level, u, v):\n    level[u] = level[v] + 1\n    M[u][0] = v\n    for j in range(1, 18):\n        if M[u][j - 1]:\n            M[u][j] = M[M[u][j - 1]][j - 1]\n\ndef LCA(M, level, u, v):\n    if u == v:\n        return u\n    if level[u] < level[v]:\n        (u, v) = (v, u)\n    for i in range(17, -1, -1):\n        if M[u][i] and level[M[u][i]] >= level[v]:\n            u = M[u][i]\n    if u == v:\n        return u\n    for i in range(17, -1, -1):\n        if M[u][i] and M[u][i] != M[v][i]:\n            u = M[u][i]\n            v = M[v][i]\n    return M[u][0]\n\ndef distance(par, level, a, b):\n    return level[a] + level[b] - 2 * level[LCA(par, level, a, b)]\n\ndef solve():\n    for _ in range(int(input())):\n        N = int(input())\n        M = [[0 for _ in range(18)] for _ in range(N + 5)]\n        level = [0] * N\n        (u, v) = (0, 0)\n        results = []\n        diameter = 0\n        for i in range(1, N):\n            p = int(input())\n            update(M, level, i, p - 1)\n            cur = distance(M, level, i, u)\n            if cur > diameter:\n                diameter = cur\n                v = i\n            else:\n                cur = distance(M, level, i, v)\n                if cur > diameter:\n                    diameter = cur\n                    u = i\n            results.append(diameter)\n        print('\\n'.join((str(k) for k in results)))\nsolve()"]