["test = int(input())\nfor _ in range(test):\n    (R, C) = list(map(int, input().split()))\n    grid = []\n    R_list = []\n    L_list = []\n    U_list = []\n    D_list = []\n    pairs = 0\n    for i in range(R):\n        row = list(input())\n        R_list.append(list((i for (i, value) in enumerate(row) if value == 'R')))\n        L_list.append(list((i for (i, value) in enumerate(row) if value == 'L')))\n        U_list.append(list((i for (i, value) in enumerate(row) if value == 'U')))\n        D_list.append(list((i for (i, value) in enumerate(row) if value == 'D')))\n        grid.append(row)\n    for i in range(max(R, C)):\n        for j in range(len(R_list)):\n            for x in range(len(R_list[j])):\n                if R_list[j][x] + 1 >= C:\n                    R_list[j][x] = '-'\n                elif grid[j][R_list[j][x] + 1] == '#':\n                    R_list[j][x] = '-'\n                else:\n                    R_list[j][x] = R_list[j][x] + 1\n            R_list[j] = list(filter('-'.__ne__, R_list[j]))\n        for j in range(len(L_list)):\n            for x in range(len(L_list[j])):\n                if L_list[j][x] - 1 < 0:\n                    L_list[j][x] = '-'\n                elif grid[j][L_list[j][x] - 1] == '#':\n                    L_list[j][x] = '-'\n                else:\n                    L_list[j][x] = L_list[j][x] - 1\n            L_list[j] = list(filter('-'.__ne__, L_list[j]))\n        for j in range(len(U_list)):\n            for x in range(len(U_list[j])):\n                if j == 0:\n                    U_list[j][x] = '-'\n                elif grid[j - 1][U_list[j][x]] == '#':\n                    U_list[j][x] = '-'\n                else:\n                    U_list[j - 1].append(U_list[j][x])\n                    U_list[j][x] = '-'\n            U_list[j] = list(filter('-'.__ne__, U_list[j]))\n        for j in range(len(D_list)):\n            for x in range(len(D_list[j])):\n                if isinstance(D_list[j][x], str):\n                    continue\n                if j == R - 1:\n                    D_list[j][x] = '-'\n                elif grid[j + 1][D_list[j][x]] == '#':\n                    D_list[j][x] = '-'\n                else:\n                    D_list[j + 1].append(str(D_list[j][x]))\n                    D_list[j][x] = '-'\n            D_list[j] = list(filter('-'.__ne__, D_list[j]))\n        for k in range(R):\n            D_list[k] = list(map(int, D_list[k]))\n        for k in range(R):\n            if len(R_list[k]) != 0 and len(L_list[k]) != 0:\n                s1 = set(R_list[k])\n                s2 = set(L_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(R_list[k]) != 0 and len(D_list[k]) != 0:\n                s1 = set(R_list[k])\n                s2 = set(D_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(R_list[k]) != 0 and len(U_list[k]) != 0:\n                s1 = set(R_list[k])\n                s2 = set(U_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(L_list[k]) != 0 and len(D_list[k]) != 0:\n                s1 = set(L_list[k])\n                s2 = set(D_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(L_list[k]) != 0 and len(U_list[k]) != 0:\n                s1 = set(L_list[k])\n                s2 = set(U_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(U_list[k]) != 0 and len(D_list[k]) != 0:\n                s1 = set(U_list[k])\n                s2 = set(D_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n    print(pairs)", "test = int(input())\nfor _ in range(test):\n    (R, C) = list(map(int, input().split()))\n    grid = []\n    R_list = []\n    L_list = []\n    U_list = []\n    D_list = []\n    pairs = 0\n    for i in range(R):\n        row = list(input())\n        R_list.append(list((i for (i, value) in enumerate(row) if value == 'R')))\n        L_list.append(list((i for (i, value) in enumerate(row) if value == 'L')))\n        U_list.append(list((i for (i, value) in enumerate(row) if value == 'U')))\n        D_list.append(list((i for (i, value) in enumerate(row) if value == 'D')))\n        grid.append(row)\n    for i in range(max(R, C)):\n        for j in range(len(R_list)):\n            for x in range(len(R_list[j])):\n                if R_list[j][x] + 1 >= C:\n                    R_list[j][x] = '-'\n                elif grid[j][R_list[j][x] + 1] == '#':\n                    R_list[j][x] = '-'\n                else:\n                    R_list[j][x] = R_list[j][x] + 1\n            R_list[j] = list(filter('-'.__ne__, R_list[j]))\n        for j in range(len(L_list)):\n            for x in range(len(L_list[j])):\n                if L_list[j][x] - 1 < 0:\n                    L_list[j][x] = '-'\n                elif grid[j][L_list[j][x] - 1] == '#':\n                    L_list[j][x] = '-'\n                else:\n                    L_list[j][x] = L_list[j][x] - 1\n            L_list[j] = list(filter('-'.__ne__, L_list[j]))\n        for j in range(len(U_list)):\n            for x in range(len(U_list[j])):\n                if j == 0:\n                    U_list[j][x] = '-'\n                elif grid[j - 1][U_list[j][x]] == '#':\n                    U_list[j][x] = '-'\n                else:\n                    U_list[j - 1].append(U_list[j][x])\n                    U_list[j][x] = '-'\n            U_list[j] = list(filter('-'.__ne__, U_list[j]))\n        for j in range(len(D_list)):\n            for x in range(len(D_list[j])):\n                if isinstance(D_list[j][x], str):\n                    continue\n                if j == R - 1:\n                    D_list[j][x] = '-'\n                elif grid[j + 1][D_list[j][x]] == '#':\n                    D_list[j][x] = '-'\n                else:\n                    D_list[j + 1].append(str(D_list[j][x]))\n                    D_list[j][x] = '-'\n            D_list[j] = list(filter('-'.__ne__, D_list[j]))\n        for k in range(R):\n            D_list[k] = list(map(int, D_list[k]))\n        for k in range(R):\n            if len(R_list[k]) != 0 and len(L_list[k]) != 0:\n                s1 = set(R_list[k])\n                s2 = set(L_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(R_list[k]) != 0 and len(D_list[k]) != 0:\n                s1 = set(R_list[k])\n                s2 = set(D_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(R_list[k]) != 0 and len(U_list[k]) != 0:\n                s1 = set(R_list[k])\n                s2 = set(U_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(L_list[k]) != 0 and len(D_list[k]) != 0:\n                s1 = set(L_list[k])\n                s2 = set(D_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(L_list[k]) != 0 and len(U_list[k]) != 0:\n                s1 = set(L_list[k])\n                s2 = set(U_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(U_list[k]) != 0 and len(D_list[k]) != 0:\n                s1 = set(U_list[k])\n                s2 = set(D_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n    print(pairs)", "test = int(input())\nfor _ in range(test):\n    (R, C) = list(map(int, input().split()))\n    grid = []\n    R_list = []\n    L_list = []\n    U_list = []\n    D_list = []\n    pairs = 0\n    for i in range(R):\n        row = list(input())\n        R_list.append(list((i for (i, value) in enumerate(row) if value == 'R')))\n        L_list.append(list((i for (i, value) in enumerate(row) if value == 'L')))\n        U_list.append(list((i for (i, value) in enumerate(row) if value == 'U')))\n        D_list.append(list((i for (i, value) in enumerate(row) if value == 'D')))\n        grid.append(row)\n    for i in range(max(R, C)):\n        for j in range(len(R_list)):\n            for x in range(len(R_list[j])):\n                if R_list[j][x] + 1 >= C:\n                    R_list[j][x] = '-'\n                elif grid[j][R_list[j][x] + 1] == '#':\n                    R_list[j][x] = '-'\n                else:\n                    R_list[j][x] = R_list[j][x] + 1\n            R_list[j] = list(filter('-'.__ne__, R_list[j]))\n        for j in range(len(L_list)):\n            for x in range(len(L_list[j])):\n                if L_list[j][x] - 1 < 0:\n                    L_list[j][x] = '-'\n                elif grid[j][L_list[j][x] - 1] == '#':\n                    L_list[j][x] = '-'\n                else:\n                    L_list[j][x] = L_list[j][x] - 1\n            L_list[j] = list(filter('-'.__ne__, L_list[j]))\n        for j in range(len(U_list)):\n            for x in range(len(U_list[j])):\n                if j == 0:\n                    U_list[j][x] = '-'\n                elif grid[j - 1][U_list[j][x]] == '#':\n                    U_list[j][x] = '-'\n                else:\n                    U_list[j - 1].append(U_list[j][x])\n                    U_list[j][x] = '-'\n            U_list[j] = list(filter('-'.__ne__, U_list[j]))\n        for j in range(len(D_list)):\n            for x in range(len(D_list[j])):\n                if isinstance(D_list[j][x], str):\n                    continue\n                if j == R - 1:\n                    D_list[j][x] = '-'\n                elif grid[j + 1][D_list[j][x]] == '#':\n                    D_list[j][x] = '-'\n                else:\n                    D_list[j + 1].append(str(D_list[j][x]))\n                    D_list[j][x] = '-'\n            D_list[j] = list(filter('-'.__ne__, D_list[j]))\n        for k in range(R):\n            D_list[k] = list(map(int, D_list[k]))\n        for k in range(R):\n            if len(R_list[k]) != 0 and len(L_list[k]) != 0:\n                s1 = set(R_list[k])\n                s2 = set(L_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(R_list[k]) != 0 and len(D_list[k]) != 0:\n                s1 = set(R_list[k])\n                s2 = set(D_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(R_list[k]) != 0 and len(U_list[k]) != 0:\n                s1 = set(R_list[k])\n                s2 = set(U_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(L_list[k]) != 0 and len(D_list[k]) != 0:\n                s1 = set(L_list[k])\n                s2 = set(D_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(L_list[k]) != 0 and len(U_list[k]) != 0:\n                s1 = set(L_list[k])\n                s2 = set(U_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(U_list[k]) != 0 and len(D_list[k]) != 0:\n                s1 = set(U_list[k])\n                s2 = set(D_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n    print(pairs)", "test = int(input())\nfor _ in range(test):\n    (R, C) = list(map(int, input().split()))\n    grid = []\n    R_list = []\n    L_list = []\n    U_list = []\n    D_list = []\n    pairs = 0\n    for i in range(R):\n        row = list(input())\n        R_list.append(list((i for (i, value) in enumerate(row) if value == 'R')))\n        L_list.append(list((i for (i, value) in enumerate(row) if value == 'L')))\n        U_list.append(list((i for (i, value) in enumerate(row) if value == 'U')))\n        D_list.append(list((i for (i, value) in enumerate(row) if value == 'D')))\n        grid.append(row)\n    for i in range(max(R, C)):\n        for j in range(len(R_list)):\n            for x in range(len(R_list[j])):\n                if R_list[j][x] + 1 >= C:\n                    R_list[j][x] = '-'\n                elif grid[j][R_list[j][x] + 1] == '#':\n                    R_list[j][x] = '-'\n                else:\n                    R_list[j][x] = R_list[j][x] + 1\n            R_list[j] = list(filter('-'.__ne__, R_list[j]))\n        for j in range(len(L_list)):\n            for x in range(len(L_list[j])):\n                if L_list[j][x] - 1 < 0:\n                    L_list[j][x] = '-'\n                elif grid[j][L_list[j][x] - 1] == '#':\n                    L_list[j][x] = '-'\n                else:\n                    L_list[j][x] = L_list[j][x] - 1\n            L_list[j] = list(filter('-'.__ne__, L_list[j]))\n        for j in range(len(U_list)):\n            for x in range(len(U_list[j])):\n                if j == 0:\n                    U_list[j][x] = '-'\n                elif grid[j - 1][U_list[j][x]] == '#':\n                    U_list[j][x] = '-'\n                else:\n                    U_list[j - 1].append(U_list[j][x])\n                    U_list[j][x] = '-'\n            U_list[j] = list(filter('-'.__ne__, U_list[j]))\n        for j in range(len(D_list)):\n            for x in range(len(D_list[j])):\n                if isinstance(D_list[j][x], str):\n                    continue\n                if j == R - 1:\n                    D_list[j][x] = '-'\n                elif grid[j + 1][D_list[j][x]] == '#':\n                    D_list[j][x] = '-'\n                else:\n                    D_list[j + 1].append(str(D_list[j][x]))\n                    D_list[j][x] = '-'\n            D_list[j] = list(filter('-'.__ne__, D_list[j]))\n        for k in range(R):\n            D_list[k] = list(map(int, D_list[k]))\n        for k in range(R):\n            if len(R_list[k]) != 0 and len(L_list[k]) != 0:\n                s1 = set(R_list[k])\n                s2 = set(L_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(R_list[k]) != 0 and len(D_list[k]) != 0:\n                s1 = set(R_list[k])\n                s2 = set(D_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(R_list[k]) != 0 and len(U_list[k]) != 0:\n                s1 = set(R_list[k])\n                s2 = set(U_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(L_list[k]) != 0 and len(D_list[k]) != 0:\n                s1 = set(L_list[k])\n                s2 = set(D_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(L_list[k]) != 0 and len(U_list[k]) != 0:\n                s1 = set(L_list[k])\n                s2 = set(U_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n            if len(U_list[k]) != 0 and len(D_list[k]) != 0:\n                s1 = set(U_list[k])\n                s2 = set(D_list[k])\n                set1 = s1.intersection(s2)\n                pairs += len(list(set1))\n    print(pairs)", "import sys\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = []\n    for i in range(n):\n        s.append(input())\n    ans = []\n    for i in range(n):\n        ans.append([])\n        for j in range(m):\n            ans[i].append([])\n    for i in range(n):\n        for j in range(m):\n            c = 0\n            if s[i][j] == 'U':\n                for k in range(i, -1, -1):\n                    if s[k][j] == '#':\n                        break\n                    ans[k][j].append(c)\n                    c += 1\n            elif s[i][j] == 'D':\n                for k in range(i, n):\n                    if s[k][j] == '#':\n                        break\n                    ans[k][j].append(c)\n                    c += 1\n            elif s[i][j] == 'L':\n                for k in range(j, -1, -1):\n                    if s[i][k] == '#':\n                        break\n                    ans[i][k].append(c)\n                    c += 1\n            elif s[i][j] == 'R':\n                for k in range(j, m):\n                    if s[i][k] == '#':\n                        break\n                    ans[i][k].append(c)\n                    c += 1\n    for i in range(n):\n        for j in range(m):\n            ans[i][j].sort()\n    res = []\n    for i in range(n):\n        for j in range(m):\n            c = 1\n            for k in range(1, len(ans[i][j])):\n                if ans[i][j][k] == ans[i][j][k - 1]:\n                    c += 1\n                else:\n                    if c != 1:\n                        res.append(c)\n                    c = 1\n                if k == len(ans[i][j]) - 1:\n                    if c != 1:\n                        res.append(c)\n    pairs = 0\n    for i in range(len(res)):\n        pairs += res[i] * (res[i] - 1) // 2\n    print(pairs)", "def count_ants(l, r, u, d):\n    cnt = 0\n    if l is False:\n        cnt += 1\n    if r is False:\n        cnt += 1\n    if u is False:\n        cnt += 1\n    if d is False:\n        cnt += 1\n    return cnt\n\ndef solve(m, row, col):\n    ans = 0\n    for i in range(row):\n        for j in range(col):\n            lw = True\n            rw = True\n            uw = True\n            dw = True\n            if m[i][j] == '#':\n                continue\n            for d in range(1, max(row, col)):\n                cnt = 0\n                if j - d < 0:\n                    lw = False\n                if j + d >= col:\n                    rw = False\n                if i - d < 0:\n                    uw = False\n                if i + d >= row:\n                    dw = False\n                if count_ants(lw, rw, uw, dw) > 2:\n                    break\n                if lw and j - d >= 0:\n                    if m[i][j - d] == 'R':\n                        cnt += 1\n                    elif m[i][j - d] == '#':\n                        lw = False\n                if rw and j + d < col:\n                    if m[i][j + d] == 'L':\n                        cnt += 1\n                    elif m[i][j + d] == '#':\n                        rw = False\n                if uw and i - d >= 0:\n                    if m[i - d][j] == 'D':\n                        cnt += 1\n                    elif m[i - d][j] == '#':\n                        uw = False\n                if dw and i + d < row:\n                    if m[i + d][j] == 'U':\n                        cnt += 1\n                    elif m[i + d][j] == '#':\n                        dw = False\n                if cnt > 1:\n                    ans += cnt * (cnt - 1) // 2\n    return ans\n\ndef read():\n    t = int(input())\n    for i in range(t):\n        (r, c) = list(map(int, input().strip().split()))\n        m = [[] for i in range(r)]\n        for i in range(r):\n            s = input().strip()\n            m[i] = s\n        ans = solve(m, r, c)\n        print(ans)\nread()", "import copy\n\ndef AllDead(arr):\n    var = 1\n    for x in arr:\n        for y in x:\n            if 'U' in y or 'D' in y or 'L' in y or ('R' in y):\n                var = 0\n    return var\n\ndef checkMeet(arr):\n    ans = 0\n    for x in arr:\n        for y in x:\n            if len(y) >= 2 and '-' not in y:\n                ans += len(y) * (len(y) - 1) // 2\n    return ans\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    lol = [['#']] * (m + 2)\n    arr = [lol]\n    for j in range(n):\n        mo = [[x] for x in input()]\n        arr += [[['#']] + mo + [['#']]]\n    arr += [lol]\n    meet = 0\n    while AllDead(arr) == 0:\n        temp = copy.deepcopy(arr)\n        for x in range(1, n + 1):\n            for y in range(1, m + 1):\n                for z in arr[x][y]:\n                    if z == 'U':\n                        if arr[x - 1][y] == ['#']:\n                            do_nothing = 1\n                        elif temp[x - 1][y] == ['-']:\n                            temp[x - 1][y].remove('-')\n                            temp[x - 1][y] += ['U']\n                        else:\n                            temp[x - 1][y] += ['U']\n                        temp[x][y].remove(z)\n                        if len(temp[x][y]) == 0:\n                            temp[x][y] = ['-']\n                    if z == 'D':\n                        if arr[x + 1][y] == ['#']:\n                            do_nothing = 1\n                        elif temp[x + 1][y] == ['-']:\n                            temp[x + 1][y].remove('-')\n                            temp[x + 1][y] += ['D']\n                        else:\n                            temp[x + 1][y] += ['D']\n                        temp[x][y].remove(z)\n                        if len(temp[x][y]) == 0:\n                            temp[x][y] = ['-']\n                    if z == 'L':\n                        if arr[x][y - 1] == ['#']:\n                            do_nothing = 1\n                        elif temp[x][y - 1] == ['-']:\n                            temp[x][y - 1].remove('-')\n                            temp[x][y - 1] += ['L']\n                        else:\n                            temp[x][y - 1] += ['L']\n                        temp[x][y].remove(z)\n                        if len(temp[x][y]) == 0:\n                            temp[x][y] = ['-']\n                    if z == 'R':\n                        if arr[x][y + 1] == ['#']:\n                            do_nothing = 1\n                        elif temp[x][y + 1] == ['-']:\n                            temp[x][y + 1].remove('-')\n                            temp[x][y + 1] += ['R']\n                        else:\n                            temp[x][y + 1] += ['R']\n                        temp[x][y].remove(z)\n                        if len(temp[x][y]) == 0:\n                            temp[x][y] = ['-']\n        arr = copy.deepcopy(temp)\n        meet += checkMeet(arr)\n    print(meet)", "readFromFile = 0\nif readFromFile:\n    f = open('inputSmall.txt', 'r')\n    T = int(f.readline())\nelse:\n    T = int(input())\ntestCases = range(T)\nfor case in testCases:\n    if readFromFile:\n        RC = [int(x) for x in f.readline().split()]\n    else:\n        RC = [int(x) for x in input().split()]\n    R = RC[0]\n    C = RC[1]\n    aByCols = {}\n    aByRows = {}\n    uAll = []\n    dAll = []\n    lAll = []\n    rAll = []\n    for r in range(R):\n        if readFromFile:\n            row = f.readline()\n        else:\n            row = input()\n        for c in range(C):\n            if row[c] == '#':\n                if r not in aByRows:\n                    aByRows[r] = []\n                aByRows[r].append(c)\n                if c not in aByCols:\n                    aByCols[c] = []\n                aByCols[c].append(r)\n            elif row[c] == 'U':\n                uAll.append((r, c))\n            elif row[c] == 'D':\n                dAll.append((r, c))\n            elif row[c] == 'L':\n                lAll.append((r, c))\n            elif row[c] == 'R':\n                rAll.append((r, c))\n    for x in range(len(uAll)):\n        item = uAll[x]\n        r = item[0]\n        c = item[1]\n        if c in aByCols:\n            eaters = aByCols[c]\n        else:\n            eaters = []\n        age = R\n        for y in eaters:\n            if y < r:\n                age = min(age, r - y)\n        uAll[x] = (item[0], item[1], age)\n    for x in range(len(dAll)):\n        item = dAll[x]\n        r = item[0]\n        c = item[1]\n        if c in aByCols:\n            eaters = aByCols[c]\n        else:\n            eaters = []\n        age = R\n        for y in eaters:\n            if y > r:\n                age = min(age, y - r)\n        dAll[x] = (item[0], item[1], age)\n    for x in range(len(lAll)):\n        item = lAll[x]\n        r = item[0]\n        c = item[1]\n        if r in aByRows:\n            eaters = aByRows[r]\n        else:\n            eaters = []\n        age = C\n        for y in eaters:\n            if y < c:\n                age = min(age, c - y)\n        lAll[x] = (item[0], item[1], age)\n    for x in range(len(rAll)):\n        item = rAll[x]\n        r = item[0]\n        c = item[1]\n        if r in aByRows:\n            eaters = aByRows[r]\n        else:\n            eaters = []\n        age = C\n        for y in eaters:\n            if y > c:\n                age = min(age, y - c)\n        rAll[x] = (item[0], item[1], age)\n    uBySum = {}\n    uByDiff = {}\n    uByCol = {}\n    dBySum = {}\n    dByDiff = {}\n    dByCol = {}\n    rBySum = {}\n    rByDiff = {}\n    rByRow = {}\n    lBySum = {}\n    lByDiff = {}\n    lByRow = {}\n    for x in uAll:\n        r = x[0]\n        c = x[1]\n        if r + c not in uBySum:\n            uBySum[r + c] = []\n        if r - c not in uByDiff:\n            uByDiff[r - c] = []\n        if c not in uByCol:\n            uByCol[c] = []\n        uBySum[r + c].append((r, c, x[2]))\n        uByDiff[r - c].append((r, c, x[2]))\n        uByCol[c].append((r, c, x[2]))\n    for x in dAll:\n        r = x[0]\n        c = x[1]\n        if r + c not in dBySum:\n            dBySum[r + c] = []\n        if r - c not in dByDiff:\n            dByDiff[r - c] = []\n        if c not in dByCol:\n            dByCol[c] = []\n        dBySum[r + c].append((r, c, x[2]))\n        dByDiff[r - c].append((r, c, x[2]))\n        dByCol[c].append((r, c, x[2]))\n    for x in lAll:\n        r = x[0]\n        c = x[1]\n        if r + c not in lBySum:\n            lBySum[r + c] = []\n        if r - c not in lByDiff:\n            lByDiff[r - c] = []\n        if r not in lByRow:\n            lByRow[r] = []\n        lBySum[r + c].append((r, c, x[2]))\n        lByDiff[r - c].append((r, c, x[2]))\n        lByRow[r].append((r, c, x[2]))\n    for x in rAll:\n        r = x[0]\n        c = x[1]\n        if r + c not in rBySum:\n            rBySum[r + c] = []\n        if r - c not in rByDiff:\n            rByDiff[r - c] = []\n        if r not in rByRow:\n            rByRow[r] = []\n        rBySum[r + c].append((r, c, x[2]))\n        rByDiff[r - c].append((r, c, x[2]))\n        rByRow[r].append((r, c, x[2]))\n    uSums = set(uBySum.keys())\n    uDiffs = set(uByDiff.keys())\n    uCols = set(uByCol.keys())\n    dSums = set(dBySum.keys())\n    dDiffs = set(dByDiff.keys())\n    dCols = set(dByCol.keys())\n    rSums = set(rBySum.keys())\n    rDiffs = set(rByDiff.keys())\n    rRows = set(rByRow.keys())\n    lSums = set(lBySum.keys())\n    lDiffs = set(lByDiff.keys())\n    lRows = set(lByRow.keys())\n    total = 0\n    candidates = uSums & lSums\n    for cc in candidates:\n        r1 = [(x[0], 1, x[2]) for x in uBySum[cc]]\n        r2 = [(x[0], 0, x[2]) for x in lBySum[cc]]\n        rTot = r1 + r2\n        rTot.sort()\n        zeros = []\n        for i in range(len(rTot)):\n            item = rTot[i]\n            if item[1] == 1:\n                for j in zeros:\n                    if item[0] - j[0] < j[2] and item[0] - j[0] < item[2]:\n                        total = total + 1\n            elif item[1] == 0:\n                zeros.append(item)\n    candidates = dSums & rSums\n    for cc in candidates:\n        r1 = [(x[0], 1, x[2]) for x in rBySum[cc]]\n        r2 = [(x[0], 0, x[2]) for x in dBySum[cc]]\n        rTot = r1 + r2\n        rTot.sort()\n        zeros = []\n        for i in range(len(rTot)):\n            item = rTot[i]\n            if item[1] == 1:\n                for j in zeros:\n                    if item[0] - j[0] < j[2] and item[0] - j[0] < item[2]:\n                        total = total + 1\n            elif item[1] == 0:\n                zeros.append(item)\n    candidates = uDiffs & rDiffs\n    for cc in candidates:\n        r1 = [(x[0], 1, x[2]) for x in uByDiff[cc]]\n        r2 = [(x[0], 0, x[2]) for x in rByDiff[cc]]\n        rTot = r1 + r2\n        rTot.sort()\n        zeros = []\n        for i in range(len(rTot)):\n            item = rTot[i]\n            if item[1] == 1:\n                for j in zeros:\n                    if item[0] - j[0] < j[2] and item[0] - j[0] < item[2]:\n                        total = total + 1\n            elif item[1] == 0:\n                zeros.append(item)\n    candidates = dDiffs & lDiffs\n    for cc in candidates:\n        r1 = [(x[0], 1, x[2]) for x in lByDiff[cc]]\n        r2 = [(x[0], 0, x[2]) for x in dByDiff[cc]]\n        rTot = r1 + r2\n        rTot.sort()\n        zeros = []\n        for i in range(len(rTot)):\n            item = rTot[i]\n            if item[1] == 1:\n                for j in zeros:\n                    if item[0] - j[0] < j[2] and item[0] - j[0] < item[2]:\n                        total = total + 1\n            elif item[1] == 0:\n                zeros.append(item)\n    candidates = dCols & uCols\n    for cc in candidates:\n        r1 = [(x[0], 1, x[2]) for x in uByCol[cc]]\n        r2 = [(x[0], 0, x[2]) for x in dByCol[cc]]\n        rTot = r1 + r2\n        rTot.sort()\n        zeros = []\n        for i in range(len(rTot)):\n            item = rTot[i]\n            if item[1] == 1:\n                for j in zeros:\n                    if (item[0] - j[0]) % 2 == 0 and item[0] - j[0] < 2 * j[2] and (item[0] - j[0] < 2 * item[2]):\n                        total = total + 1\n            elif item[1] == 0:\n                zeros.append(item)\n    candidates = lRows & rRows\n    for cc in candidates:\n        r1 = [(x[1], 1, x[2]) for x in lByRow[cc]]\n        r2 = [(x[1], 0, x[2]) for x in rByRow[cc]]\n        rTot = r1 + r2\n        rTot.sort()\n        zeros = []\n        for i in range(len(rTot)):\n            item = rTot[i]\n            if item[1] == 1:\n                for j in zeros:\n                    if (item[0] - j[0]) % 2 == 0 and item[0] - j[0] < 2 * j[2] and (item[0] - j[0] < 2 * item[2]):\n                        total = total + 1\n            elif item[1] == 0:\n                zeros.append(item)\n    print(total)", "def nCr(n, r):\n    return fact(n) / (fact(r) * fact(n - r))\n\ndef fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\nwhile True:\n    try:\n        for _ in range(int(input())):\n            (r, c) = map(int, input().split())\n            arena = [[i for i in input().strip()] for j in range(r)]\n            antsInitialPositions = []\n            antsDirection = []\n            antEaterPositions = []\n            for i in range(r):\n                for j in range(c):\n                    if arena[i][j] in ['R', 'U', 'D', 'L']:\n                        antsInitialPositions.append([i, j])\n                        antsDirection.append(arena[i][j])\n                    elif arena[i][j] == '#':\n                        antEaterPositions.append([i, j])\n            antCount = len(antsInitialPositions)\n            grid = [[{} for j in range(c)] for i in range(r)]\n            for current in range(antCount):\n                (i, j) = antsInitialPositions[current]\n                direction = antsDirection[current]\n                (movei, movej) = (i, j)\n                if direction == 'D':\n                    steps = 0\n                    while movei < r and arena[movei][movej] != '#':\n                        steps = abs(i - movei)\n                        if steps in grid[movei][movej]:\n                            grid[movei][movej][steps] += 1\n                        else:\n                            grid[movei][movej][steps] = 1\n                        movei += 1\n                elif direction == 'U':\n                    steps = 0\n                    while movei >= 0 and arena[movei][movej] != '#':\n                        steps = abs(i - movei)\n                        if steps in grid[movei][movej]:\n                            grid[movei][movej][steps] += 1\n                        else:\n                            grid[movei][movej][steps] = 1\n                        movei -= 1\n                elif direction == 'L':\n                    steps = 0\n                    while movej >= 0 and arena[movei][movej] != '#':\n                        steps = abs(j - movej)\n                        if steps in grid[movei][movej]:\n                            grid[movei][movej][steps] += 1\n                        else:\n                            grid[movei][movej][steps] = 1\n                        movej -= 1\n                elif direction == 'R':\n                    steps = 0\n                    while movej < c and arena[movei][movej] != '#':\n                        steps = abs(j - movej)\n                        if steps in grid[movei][movej]:\n                            grid[movei][movej][steps] += 1\n                        else:\n                            grid[movei][movej][steps] = 1\n                        movej += 1\n            meetings = 0\n            for i in range(r):\n                for j in range(c):\n                    for meets in grid[i][j].values():\n                        if meets >= 2:\n                            meetings += nCr(meets, 2)\n            print(int(meetings))\n    except (ValueError, EOFError) as e:\n        break", "def nCr(n, r):\n    return fact(n) / (fact(r) * fact(n - r))\n\ndef fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\nwhile True:\n    try:\n        for _ in range(int(input())):\n            (r, c) = map(int, input().split())\n            arena = [[i for i in input().strip()] for j in range(r)]\n            antsInitialPositions = []\n            antsDirection = []\n            antEaterPositions = []\n            for i in range(r):\n                for j in range(c):\n                    if arena[i][j] in ['R', 'U', 'D', 'L']:\n                        antsInitialPositions.append([i, j])\n                        antsDirection.append(arena[i][j])\n                    elif arena[i][j] == '#':\n                        antEaterPositions.append([i, j])\n            antCount = len(antsInitialPositions)\n            grid = [[{} for j in range(c)] for i in range(r)]\n            for current in range(antCount):\n                (i, j) = antsInitialPositions[current]\n                direction = antsDirection[current]\n                (movei, movej) = (i, j)\n                if direction == 'D':\n                    steps = 0\n                    while movei < r and arena[movei][movej] != '#':\n                        steps = abs(i - movei)\n                        if steps in grid[movei][movej]:\n                            grid[movei][movej][steps] += 1\n                        else:\n                            grid[movei][movej][steps] = 1\n                        movei += 1\n                elif direction == 'U':\n                    steps = 0\n                    while movei >= 0 and arena[movei][movej] != '#':\n                        steps = abs(i - movei)\n                        if steps in grid[movei][movej]:\n                            grid[movei][movej][steps] += 1\n                        else:\n                            grid[movei][movej][steps] = 1\n                        movei -= 1\n                elif direction == 'L':\n                    steps = 0\n                    while movej >= 0 and arena[movei][movej] != '#':\n                        steps = abs(j - movej)\n                        if steps in grid[movei][movej]:\n                            grid[movei][movej][steps] += 1\n                        else:\n                            grid[movei][movej][steps] = 1\n                        movej -= 1\n                elif direction == 'R':\n                    steps = 0\n                    while movej < c and arena[movei][movej] != '#':\n                        steps = abs(j - movej)\n                        if steps in grid[movei][movej]:\n                            grid[movei][movej][steps] += 1\n                        else:\n                            grid[movei][movej][steps] = 1\n                        movej += 1\n            meetings = 0\n            for i in range(r):\n                for j in range(c):\n                    for meets in grid[i][j].values():\n                        if meets >= 2:\n                            meetings += nCr(meets, 2)\n            print(int(meetings))\n    except (ValueError, EOFError) as e:\n        break", "def find_next(arr):\n    ans = [[set() for i in range(len(arr[0]))] for j in range(len(arr))]\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if j > 0:\n                if 'R' in arr[i][j - 1] and '#' not in arr[i][j]:\n                    ans[i][j].add('R')\n            if j < len(arr[0]) - 1:\n                if 'L' in arr[i][j + 1] and '#' not in arr[i][j]:\n                    ans[i][j].add('L')\n            if i > 0:\n                if 'D' in arr[i - 1][j] and '#' not in arr[i][j]:\n                    ans[i][j].add('D')\n            if i < len(arr) - 1:\n                if 'U' in arr[i + 1][j] and '#' not in arr[i][j]:\n                    ans[i][j].add('U')\n            if '#' in arr[i][j]:\n                ans[i][j].add('#')\n    return ans\n\ndef cal(arr):\n    ans = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            n = len(arr[i][j])\n            ans += n * (n - 1) // 2\n    return ans\nt = int(input())\nfor _ in range(t):\n    (r, c) = list(map(int, input().split()))\n    arr = []\n    for i in range(r):\n        toadd = list(map(set, list(input())))\n        arr += [toadd]\n    ans = 0\n    for i in range(max(r, c)):\n        arr = find_next(arr)\n        ans += cal(arr)\n    print(ans)", "t = int(input())\nfor x in range(t):\n    (r, c) = map(int, input().split())\n    antU = []\n    antD = []\n    antR = []\n    antL = []\n    anteater = []\n    j = 0\n    for y in range(r):\n        s = input()\n        i = 0\n        for z in s:\n            if z == 'U':\n                antU.append([j, i, 0, i])\n            elif z == 'D':\n                antD.append([j, i, r - 1, i])\n            elif z == 'R':\n                antR.append([j, i, j, c - 1])\n            elif z == 'L':\n                antL.append([j, i, j, 0])\n            elif z == '#':\n                anteater.append([j, i])\n            i = i + 1\n        j = j + 1\n    for y in anteater:\n        for z in antU:\n            if y[1] == z[1] and z[0] > y[0] and (z[2] <= y[0]):\n                z[2] = y[0] + 1\n        for z in antD:\n            if y[1] == z[1] and z[0] < y[0] and (z[2] >= y[0]):\n                z[2] = y[0] - 1\n        for z in antR:\n            if y[0] == z[0] and z[1] < y[1] and (z[3] >= y[1]):\n                z[3] = y[1] - 1\n        for z in antL:\n            if y[0] == z[0] and z[1] > y[1] and (z[3] <= y[1]):\n                z[3] = y[1] + 1\n    total = 0\n    for y in antU:\n        for z in antD:\n            if y[1] == z[1] and y[2] <= z[2] and (y[0] > z[0]):\n                if (y[0] - z[0]) % 2 == 0:\n                    total = total + 1\n        for z in antR:\n            if y[1] - z[1] == y[0] - z[0]:\n                if y[2] <= z[0] and z[3] >= y[1]:\n                    if y[0] > z[0] and y[1] > z[1]:\n                        total = total + 1\n        for z in antL:\n            if y[1] - z[1] == z[0] - y[0]:\n                if z[3] <= y[1] and y[2] <= z[0]:\n                    if y[0] > z[0] and y[1] < z[1]:\n                        total = total + 1\n    for y in antL:\n        for z in antR:\n            if (y[1] - z[1]) % 2 == 0:\n                if y[0] == z[0] and y[3] <= z[3] and (y[1] > z[1]):\n                    total = total + 1\n        for z in antD:\n            if y[0] - z[0] == y[1] - z[1]:\n                if y[3] <= z[1] and z[2] >= y[0]:\n                    if y[0] > z[0] and y[1] > z[1]:\n                        total = total + 1\n    for y in antD:\n        for z in antR:\n            if y[0] - z[0] == z[1] - y[1]:\n                if z[3] >= y[1] and y[2] >= z[0]:\n                    if y[0] < z[0] and y[1] > z[1]:\n                        total = total + 1\n    print(total)", "for i in range(int(input())):\n    (r, c) = [int(a) for a in input().split()]\n    a = []\n    for i in range(r):\n        a.append(input())\n    n = max(r, c)\n    lst = [0 for i in range(n)]\n    complete_list = []\n    for i in range(r):\n        z = []\n        for j in range(c):\n            z.append(lst.copy())\n        complete_list.append(z)\n    for i in range(r):\n        for j in range(c):\n            if a[i][j] == 'R':\n                l = 1\n                for p in range(j + 1, c):\n                    if a[i][p] == '#':\n                        break\n                    complete_list[i][p][l] += 1\n                    l += 1\n            elif a[i][j] == 'L':\n                l = 1\n                for p in range(j - 1, -1, -1):\n                    if a[i][p] == '#':\n                        break\n                    complete_list[i][p][l] += 1\n                    l += 1\n            elif a[i][j] == 'D':\n                l = 1\n                for p in range(i + 1, r):\n                    if a[p][j] == '#':\n                        break\n                    complete_list[p][j][l] += 1\n                    l += 1\n            elif a[i][j] == 'U':\n                l = 1\n                for p in range(i - 1, -1, -1):\n                    if a[p][j] == '#':\n                        break\n                    complete_list[p][j][l] += 1\n                    l += 1\n    ans = 0\n    for i in range(r):\n        for j in range(c):\n            for p in range(n):\n                if complete_list[i][j][p] == 2:\n                    ans += 1\n                elif complete_list[i][j][p] == 3:\n                    ans += 3\n                elif complete_list[i][j][p] == 4:\n                    ans += 6\n    print(ans)", "import copy\nfor t in range(int(input())):\n    (r, c) = list(map(int, input().split()))\n    grid = []\n    cpy = []\n    for i in range(r):\n        grid.append(list(input()))\n    change = True\n    ans = 0\n    while change:\n        cpy = [['' for i in range(c)] for j in range(r)]\n        change = False\n        for i in range(r):\n            for j in range(c):\n                for ele in grid[i][j]:\n                    if ele == 'D' and i < r - 1:\n                        change = True\n                        if grid[i + 1][j] != '#':\n                            cpy[i + 1][j] += 'D'\n                    elif ele == 'U' and i > 0:\n                        change = True\n                        if grid[i - 1][j] != '#':\n                            cpy[i - 1][j] += 'U'\n                    elif ele == 'R' and j < c - 1:\n                        change = True\n                        if grid[i][j + 1] != '#':\n                            cpy[i][j + 1] += 'R'\n                    elif ele == 'L' and j > 0:\n                        change = True\n                        if grid[i][j - 1] != '#':\n                            cpy[i][j - 1] += 'L'\n                    elif ele == '#':\n                        cpy[i][j] = '#'\n        for i in range(r):\n            for j in range(c):\n                s = cpy[i][j]\n                ans += len(s) * (len(s) - 1) / 2\n                grid[i][j] = s\n    print(int(ans))", "for t in range(int(input())):\n    (r, c) = list(map(int, input().split()))\n    grid = []\n    cpy = []\n    for i in range(r):\n        grid.append(list(input()))\n    change = True\n    ans = 0\n    while change:\n        cpy = [['' for i in range(c)] for j in range(r)]\n        change = False\n        for i in range(r):\n            for j in range(c):\n                for ele in grid[i][j]:\n                    if ele == 'D' and i < r - 1:\n                        change = True\n                        if grid[i + 1][j] != '#':\n                            cpy[i + 1][j] += 'D'\n                    elif ele == 'U' and i > 0:\n                        change = True\n                        if grid[i - 1][j] != '#':\n                            cpy[i - 1][j] += 'U'\n                    elif ele == 'R' and j < c - 1:\n                        change = True\n                        if grid[i][j + 1] != '#':\n                            cpy[i][j + 1] += 'R'\n                    elif ele == 'L' and j > 0:\n                        change = True\n                        if grid[i][j - 1] != '#':\n                            cpy[i][j - 1] += 'L'\n                    elif ele == '#':\n                        cpy[i][j] = '#'\n        for i in range(r):\n            for j in range(c):\n                s = cpy[i][j]\n                ans += len(s) * (len(s) - 1) / 2\n                grid[i][j] = s\n    print(int(ans))", "def sumOfN(n):\n    return n * (n - 1) // 2\n\ndef display():\n    for i in range(r):\n        for j in range(c):\n            print(grid[i][j], end=' ')\n        print()\n    print()\nfor t in range(int(input())):\n    (r, c) = map(int, input().split())\n    grid = []\n    pairs = 0\n    for i in range(r):\n        to_add = []\n        for x in input().strip():\n            to_add.append([x, 1])\n        grid.append(to_add)\n    steps = max(r, c)\n    for _ in range(steps):\n        for i in range(r):\n            for j in range(c):\n                s = grid[i][j][0][:grid[i][j][1]]\n                if s == '#' or s == '-':\n                    continue\n                for ants in s:\n                    if ants == 'U':\n                        if i > 0:\n                            if grid[i - 1][j][0] != '#':\n                                grid[i - 1][j][0] += 'U'\n                    elif ants == 'D':\n                        if i < r - 1:\n                            if grid[i + 1][j][0] != '#':\n                                grid[i + 1][j][0] += 'D'\n                    elif ants == 'L':\n                        if j > 0:\n                            if grid[i][j - 1][0] != '#':\n                                grid[i][j - 1][0] += 'L'\n                    elif ants == 'R':\n                        if j < c - 1:\n                            if grid[i][j + 1][0] != '#':\n                                grid[i][j + 1][0] += 'R'\n                grid[i][j][0] = '-' if len(grid[i][j][0]) == grid[i][j][1] else grid[i][j][0][grid[i][j][1]:]\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j][0].lstrip('-') != '':\n                    grid[i][j][0] = grid[i][j][0].lstrip('-')\n                    pairs += sumOfN(len(grid[i][j][0]))\n                grid[i][j][1] = len(grid[i][j][0])\n    print(pairs)", "from collections import defaultdict as df\nt = int(input())\nfor x in range(t):\n    (r, c) = list(map(int, input().split()))\n    p = df(list)\n    a = [[0] * c for i in range(r)]\n    for i in range(r):\n        s = input().rstrip()\n        for j in range(c):\n            a[i][j] = s[j]\n    for i in range(r):\n        for j in range(c):\n            timer = 0\n            if a[i][j] == 'U':\n                for k in range(i - 1, -1, -1):\n                    if a[k][j] != '#':\n                        timer += 1\n                        p[str(k) + ' ' + str(j)].append(timer)\n                    else:\n                        break\n            if a[i][j] == 'R':\n                for k in range(j + 1, c):\n                    if a[i][k] != '#':\n                        timer += 1\n                        p[str(i) + ' ' + str(k)].append(timer)\n                    else:\n                        break\n            if a[i][j] == 'D':\n                for k in range(i + 1, r):\n                    if a[k][j] != '#':\n                        timer += 1\n                        p[str(k) + ' ' + str(j)].append(timer)\n                    else:\n                        break\n            if a[i][j] == 'L':\n                for k in range(j - 1, -1, -1):\n                    if a[i][k] != '#':\n                        timer += 1\n                        p[str(i) + ' ' + str(k)].append(timer)\n                    else:\n                        break\n    total = 0\n    for i in p:\n        y = set(p[i])\n        for j in y:\n            if p[i].count(j) > 1:\n                n1 = p[i].count(j)\n                total += n1 * (n1 - 1) // 2\n    print(total)", "from collections import defaultdict\nfrom math import factorial\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    hash = defaultdict(int)\n    for i in range(n):\n        k = list(input())\n        l.append(k)\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            count = 0\n            if l[i][j] == 'R':\n                x = i\n                y = j\n                while y < m:\n                    if l[x][y] != '#':\n                        hash[count, x, y] += 1\n                    else:\n                        break\n                    count += 1\n                    y += 1\n            elif l[i][j] == 'L':\n                x = i\n                y = j\n                count = 0\n                while y >= 0:\n                    if l[x][y] != '#':\n                        hash[count, x, y] += 1\n                    else:\n                        break\n                    count += 1\n                    y -= 1\n            elif l[i][j] == 'U':\n                x = i\n                y = j\n                count = 0\n                while x >= 0:\n                    if l[x][y] != '#':\n                        hash[count, x, y] += 1\n                    else:\n                        break\n                    count += 1\n                    x -= 1\n            elif l[i][j] == 'D':\n                x = i\n                y = j\n                count = 0\n                while x < n:\n                    if l[x][y] != '#':\n                        hash[count, x, y] += 1\n                    else:\n                        break\n                    count += 1\n                    x += 1\n    for i in hash.keys():\n        z = hash[i]\n        if z > 1:\n            ans += factorial(z) // (factorial(z - 2) * factorial(2))\n    print(ans)", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    d = []\n    s = 0\n    for _ in range(r):\n        a = input()\n        a = [i for i in a]\n        d.append(a)\n    for i in range(r):\n        for j in range(c):\n            if d[i][j] == 'R':\n                for k in range(j, c):\n                    if d[i][k] == '#':\n                        break\n                    elif d[i][k] == 'L' and (not k - j & 1):\n                        s += 1\n                l = i + 1\n                k = j + 1\n                while k < c and l < r:\n                    f = 0\n                    if d[l][k] == 'U':\n                        for m in range(j, k + 1):\n                            if d[i][m] == '#':\n                                f = 1\n                                break\n                        if f == 0:\n                            for m in range(i, l + 1):\n                                if d[m][k] == '#':\n                                    f = 1\n                                    break\n                        if f == 0:\n                            s += 1\n                    k += 1\n                    l += 1\n            elif d[i][j] == 'L':\n                l = i + 1\n                k = j - 1\n                while l < r and k > -1:\n                    if d[l][k] == 'U':\n                        f = 0\n                        for m in range(j, k - 1, -1):\n                            if d[i][m] == '#':\n                                f = 1\n                                break\n                        if f == 0:\n                            for m in range(i, l + 1):\n                                if d[m][k] == '#':\n                                    f = 1\n                                    break\n                        if f == 0:\n                            s += 1\n                    l += 1\n                    k -= 1\n            elif d[i][j] == 'D':\n                for m in range(i, r):\n                    if d[m][j] == '#':\n                        break\n                    elif d[m][j] == 'U' and (not m - i & 1):\n                        s += 1\n                l = i + 1\n                k = j + 1\n                while l < r and k < c:\n                    f = 0\n                    if d[l][k] == 'L':\n                        for m in range(i, l + 1):\n                            if d[m][j] == '#':\n                                f = 1\n                                break\n                        if f == 0:\n                            for m in range(j, k + 1):\n                                if d[l][m] == '#':\n                                    f = 1\n                                    break\n                        if f == 0:\n                            s += 1\n                    l += 1\n                    k += 1\n                l = i + 1\n                k = j - 1\n                while l < r and k > -1:\n                    f = 0\n                    if d[l][k] == 'R':\n                        for m in range(i, l + 1):\n                            if d[m][j] == '#':\n                                f = 1\n                                break\n                        if f == 0:\n                            for m in range(k, j + 1):\n                                if d[l][m] == '#':\n                                    f = 1\n                                    break\n                        if f == 0:\n                            s += 1\n                    l += 1\n                    k -= 1\n    print(s)", "t = int(input())\nfor i in range(t):\n    (r, c) = map(int, input().split())\n    arr = [['' for x in range(c)] for y in range(r)]\n    for j in range(r):\n        arr[j] = list(str(input()))\n    anr = ['U', 'D', 'L', 'R']\n    meet = 0\n    pos = [[[0 for z in range(c)] for y in range(r)] for x in range(max(r, c))]\n    j = 0\n    k = 0\n    while j < r:\n        j_init = j\n        k = 0\n        while k < c:\n            k_init = k\n            if arr[j][k] in anr:\n                for z in range(max(r, c)):\n                    if j == r or k == c or arr[j][k] == '#' or (k == -1) or (j == -1):\n                        break\n                    if pos[z][j][k] > 0:\n                        meet += pos[z][j][k]\n                    pos[z][j][k] += 1\n                    if arr[j_init][k_init] == 'D':\n                        j += 1\n                    elif arr[j_init][k_init] == 'U':\n                        j -= 1\n                    elif arr[j_init][k_init] == 'L':\n                        k -= 1\n                    elif arr[j_init][k_init] == 'R':\n                        k += 1\n            k = k_init + 1\n            j = j_init\n        j = j_init + 1\n    print(meet)", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    m = [[*input()] for _ in range(r)]\n    ans = 0\n    p = []\n    for i in range(r):\n        for j in range(c):\n            if m[i][j] in 'UDLR':\n                p.append([i, j, m[i][j]])\n    from collections import Counter\n    for i in range(max(r, c) + 1):\n        z = Counter([tuple(i[:2]) for i in p])\n        for j in z.values():\n            ans += j * (j - 1) // 2\n        d = set()\n        for j in range(len(p)):\n            if p[j][2] == 'U':\n                if p[j][0] > 0 and m[p[j][0] - 1][p[j][1]] != '#':\n                    p[j][0] -= 1\n                else:\n                    d.add(j)\n            elif p[j][2] == 'R':\n                if p[j][1] < c - 1 and m[p[j][0]][p[j][1] + 1] != '#':\n                    p[j][1] += 1\n                else:\n                    d.add(j)\n            elif p[j][2] == 'L':\n                if p[j][1] > 0 and m[p[j][0]][p[j][1] - 1] != '#':\n                    p[j][1] -= 1\n                else:\n                    d.add(j)\n            elif p[j][0] < r - 1 and m[p[j][0] + 1][p[j][1]] != '#':\n                p[j][0] += 1\n            else:\n                d.add(j)\n        p = [p[i] for i in set([*range(len(p))]) - d]\n    print(ans)", "from collections import Counter\nt = int(input())\nfor x in range(t):\n    inp = list(map(int, input().split()))\n    r = inp[0]\n    c = inp[1]\n    listo = []\n    listb = set()\n    pair = 0\n    for i in range(r):\n        string = input()\n        for j in range(len(string)):\n            if string[j] == 'U':\n                listo.append([i, j, 1])\n            elif string[j] == 'D':\n                listo.append([i, j, 2])\n            elif string[j] == 'L':\n                listo.append([i, j, 3])\n            elif string[j] == 'R':\n                listo.append([i, j, 4])\n            elif string[j] == '#':\n                listb.add((i, j))\n    for y in range(max(r, c)):\n        nants = Counter()\n        for i in range(len(listo)):\n            if listo[i][2] != 5:\n                nants[tuple(listo[i][:-1])] += 1\n        for key in nants:\n            pair += nants[key] * (nants[key] - 1) // 2\n        for ant in listo:\n            if ant[2] == 1:\n                ant[0] -= 1\n            elif ant[2] == 2:\n                ant[0] += 1\n            elif ant[2] == 3:\n                ant[1] -= 1\n            elif ant[2] == 4:\n                ant[1] += 1\n            if tuple(ant[:-1]) in listb:\n                ant[2] = 5\n            elif ant[0] < 0 or ant[0] >= r:\n                ant[2] = 5\n            elif ant[1] < 0 or ant[1] >= c:\n                ant[2] = 5\n    print(pair)", "T = int(input())\nwhile T > 0:\n    (R, C) = input().split()\n    R = int(R)\n    C = int(C)\n    output = [[0] * C for i in range(R)]\n    for i in range(R):\n        for j in range(C):\n            output[i][j] = dict()\n    matrix = [0] * R\n    for i in range(R):\n        matrix[i] = input()\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] == 'R':\n                column = j + 1\n                while column < C and matrix[i][column] != '#':\n                    output[i][column][column - j] = output[i][column].get(column - j, 0) + 1\n                    column = column + 1\n            elif matrix[i][j] == 'L':\n                column = j - 1\n                while column >= 0 and matrix[i][column] != '#':\n                    output[i][column][j - column] = output[i][column].get(j - column, 0) + 1\n                    column = column - 1\n            elif matrix[i][j] == 'U':\n                row = i - 1\n                while row >= 0 and matrix[row][j] != '#':\n                    output[row][j][i - row] = output[row][j].get(i - row, 0) + 1\n                    row = row - 1\n            elif matrix[i][j] == 'D':\n                row = i + 1\n                while row < R and matrix[row][j] != '#':\n                    output[row][j][row - i] = output[row][j].get(row - i, 0) + 1\n                    row = row + 1\n    no_of_pairs = 0\n    for i in range(R):\n        for j in range(C):\n            for (no_of_steps, count) in output[i][j].items():\n                if count > 1:\n                    no_of_pairs = no_of_pairs + count * (count - 1) // 2\n    print(no_of_pairs)\n    T = T - 1", "import math as mt\n\ndef countPairs(arr, n):\n    mp = dict()\n    for i in range(n):\n        if arr[i] in mp.keys():\n            mp[arr[i]] += 1\n        else:\n            mp[arr[i]] = 1\n    ans = 0\n    for it in mp:\n        count = mp[it]\n        ans += count * (count - 1) // 2\n    return ans\nfor _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    has = []\n    simple = []\n    for i in range(r):\n        lis = input()\n        lis = list(lis)\n        for j in range(c):\n            if lis[j] == '#':\n                has.append([i, j])\n            elif lis[j] != '-':\n                simple.append([lis[j], [i, j]])\n    sum1 = 0\n    for j in range(max(r, c)):\n        (he, del1) = ([], [])\n        flag = 0\n        for i in simple:\n            if i[0] == 'R' and i[1][1] + j + 1 <= c:\n                if has.count([i[1][0], i[1][1] + j + 1]) == 0:\n                    he.append((i[1][0], i[1][1] + j + 1))\n                else:\n                    del1.append(i)\n            elif i[0] == 'D' and i[1][0] + j + 1 <= r:\n                if has.count([i[1][0] + j + 1, i[1][1]]) == 0:\n                    he.append((i[1][0] + j + 1, i[1][1]))\n                else:\n                    del1.append(i)\n            elif i[0] == 'L' and i[1][1] - j - 1 >= 0:\n                if has.count([i[1][0], i[1][1] - j - 1]) == 0:\n                    he.append((i[1][0], i[1][1] - j - 1))\n                else:\n                    del1.append(i)\n            elif i[0] == 'U' and i[1][0] - j - 1 >= 0:\n                if has.count([i[1][0] - j - 1, i[1][1]]) == 0:\n                    he.append((i[1][0] - j - 1, i[1][1]))\n                else:\n                    del1.append(i)\n        sum1 += countPairs(he, len(he))\n        for p in del1:\n            simple.remove(p)\n    print(sum1)", "import math\n\ndef nCr(n):\n    f = math.factorial\n    return f(n) // f(2) // f(n - 2)\nimport math as mt\n\ndef countPairs(arr, n):\n    mp = dict()\n    for i in range(n):\n        if arr[i] in mp.keys():\n            mp[arr[i]] += 1\n        else:\n            mp[arr[i]] = 1\n    ans = 0\n    for it in mp:\n        count = mp[it]\n        ans += count * (count - 1) // 2\n    return ans\nfor _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    has = []\n    simple = []\n    for i in range(r):\n        lis = input()\n        lis = list(lis)\n        for j in range(c):\n            if lis[j] == '#':\n                has.append([i, j])\n            elif lis[j] != '-':\n                simple.append([lis[j], [i, j]])\n    sum1 = 0\n    for j in range(max(r, c)):\n        (he, del1) = ([], [])\n        flag = 0\n        for i in simple:\n            if i[0] == 'R' and i[1][1] + j + 1 <= c:\n                if has.count([i[1][0], i[1][1] + j + 1]) == 0:\n                    he.append((i[1][0], i[1][1] + j + 1))\n                else:\n                    del1.append(i)\n            elif i[0] == 'D' and i[1][0] + j + 1 <= r:\n                if has.count([i[1][0] + j + 1, i[1][1]]) == 0:\n                    he.append((i[1][0] + j + 1, i[1][1]))\n                else:\n                    del1.append(i)\n            elif i[0] == 'L' and i[1][1] - j - 1 >= 0:\n                if has.count([i[1][0], i[1][1] - j - 1]) == 0:\n                    he.append((i[1][0], i[1][1] - j - 1))\n                else:\n                    del1.append(i)\n            elif i[0] == 'U' and i[1][0] - j - 1 >= 0:\n                if has.count([i[1][0] - j - 1, i[1][1]]) == 0:\n                    he.append((i[1][0] - j - 1, i[1][1]))\n                else:\n                    del1.append(i)\n        sum1 += countPairs(he, len(he))\n        for p in del1:\n            simple.remove(p)\n    print(sum1)", "def check_left_hor(mat, row, col, r, c, z, diff):\n    if 0 <= z + diff < c and mat[row][z + diff] == 'L':\n        for q in range(z + 1, z + diff):\n            if mat[row][q] == '#':\n                return False\n        return True\n    return False\n\ndef check_left_ver(mat, row, col, r, c, z, diff):\n    if 0 <= col + diff < c and mat[z][col + diff] == 'L':\n        for q in range(col + 1, col + diff):\n            if mat[z][q] == '#':\n                return False\n        return True\n    return False\n\ndef check_right_hor(mat, row, col, r, c, z, diff):\n    if 0 <= z - diff < c and mat[row][z - diff] == 'R':\n        for q in range(z - 1, z - diff, -1):\n            if mat[row][q] == '#':\n                return False\n        return True\n    return False\n\ndef check_right_ver(mat, row, col, r, c, z, diff):\n    if 0 <= col - diff < c and mat[z][col - diff] == 'R':\n        for q in range(col - 1, col - diff, -1):\n            if mat[z][q] == '#':\n                return False\n        return True\n    return False\n\ndef check_down_hor(mat, row, col, r, c, z, diff):\n    if 0 <= row - diff < r and mat[row - diff][z] == 'D':\n        for q in range(row - diff, row):\n            if mat[q][z] == '#':\n                return False\n        return True\n    return False\n\ndef check_down_ver(mat, row, col, r, c, z, diff):\n    if 0 <= z - diff < r and mat[z - diff][col] == 'D':\n        for q in range(z - diff, z):\n            if mat[q][col] == '#':\n                return False\n        return True\n    return False\n\ndef check_up_hor(mat, row, col, r, c, z, diff):\n    if 0 <= row + diff < r and mat[row + diff][z] == 'U':\n        for q in range(row + 1, row + diff):\n            if mat[q][z] == '#':\n                return False\n        return True\n    return False\n\ndef check_up_ver(mat, row, col, r, c, z, diff):\n    if 0 <= z + diff < r and mat[z + diff][col] == 'U':\n        for q in range(z + 1, z + diff):\n            if mat[q][col] == '#':\n                return False\n        return True\n    return False\nt = int(input())\nfor i in range(t):\n    (r, c) = map(int, input().split())\n    mat = []\n    count = 0\n    for j in range(r):\n        temp = []\n        s = input()\n        for a in range(c):\n            temp.append(s[a])\n            if s[a] != '-' and s[a] != '#':\n                count += 1\n        mat.append(temp)\n    meets = 0\n    for row in range(r):\n        for col in range(c):\n            if mat[row][col] == '-' or mat[row][col] == '#':\n                continue\n            else:\n                if mat[row][col] == 'U':\n                    for z in range(row - 1, -1, -1):\n                        if mat[z][col] == '#':\n                            break\n                        else:\n                            diff = row - z\n                            if check_left_ver(mat, row, col, r, c, z, diff):\n                                meets += 1\n                            if check_right_ver(mat, row, col, r, c, z, diff):\n                                meets += 1\n                            if check_down_ver(mat, row, col, r, c, z, diff):\n                                meets += 1\n                if mat[row][col] == 'D':\n                    for z in range(row + 1, r):\n                        if mat[z][col] == '#':\n                            break\n                        else:\n                            diff = z - row\n                            if check_left_ver(mat, row, col, r, c, z, diff):\n                                meets += 1\n                            if check_right_ver(mat, row, col, r, c, z, diff):\n                                meets += 1\n                            if check_up_ver(mat, row, col, r, c, z, diff):\n                                meets += 1\n                if mat[row][col] == 'L':\n                    for z in range(col - 1, -1, -1):\n                        if mat[row][z] == '#':\n                            break\n                        else:\n                            diff = col - z\n                            if check_down_hor(mat, row, col, r, c, z, diff):\n                                meets += 1\n                            if check_right_hor(mat, row, col, r, c, z, diff):\n                                meets += 1\n                            if check_up_hor(mat, row, col, r, c, z, diff):\n                                meets += 1\n                if mat[row][col] == 'R':\n                    for z in range(col + 1, c):\n                        if mat[row][z] == '#':\n                            break\n                        else:\n                            diff = z - col\n                            if check_down_hor(mat, row, col, r, c, z, diff):\n                                meets += 1\n                            if check_left_hor(mat, row, col, r, c, z, diff):\n                                meets += 1\n                            if check_up_hor(mat, row, col, r, c, z, diff):\n                                meets += 1\n    print(meets // 2)", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    board = []\n    for i in range(r):\n        x = input()\n        board.append(x)\n    coll = []\n    for i in range(r):\n        coll.append([])\n        for j in range(c):\n            coll[i].append([])\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == '-' or board[i][j] == '#':\n                pass\n            else:\n                cnt = 1\n                if board[i][j] == 'D':\n                    for k in range(i + 1, r):\n                        if board[k][j] == '#':\n                            break\n                        coll[k][j].append(cnt)\n                        cnt += 1\n                if board[i][j] == 'U':\n                    for k in range(i - 1, -1, -1):\n                        if board[k][j] == '#':\n                            break\n                        coll[k][j].append(cnt)\n                        cnt += 1\n                if board[i][j] == 'R':\n                    for k in range(j + 1, c):\n                        if board[i][k] == '#':\n                            break\n                        coll[i][k].append(cnt)\n                        cnt += 1\n                if board[i][j] == 'L':\n                    for k in range(j - 1, -1, -1):\n                        if board[i][k] == '#':\n                            break\n                        coll[i][k].append(cnt)\n                        cnt += 1\n    cnts = 0\n    for i in range(r):\n        for j in range(c):\n            if len(coll[i][j]) > 1:\n                sets = set(coll[i][j])\n                counts = {}\n                for k in sets:\n                    counts[k] = 0\n                for k in coll[i][j]:\n                    counts[k] += 1\n                for k in counts.values():\n                    if k > 1:\n                        cnts += int(k * (k - 1) // 2)\n    print(cnts)", "import math\nfrom collections import defaultdict\n\ndef nCr(n, r):\n    f = math.factorial\n    return f(n) // f(r) // f(n - r)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (r, c) = map(int, input().split())\n        matrix = []\n        for i in range(r):\n            data = list(input())\n            matrix.append(data)\n        timeHorizon = defaultdict(int)\n        for i in range(r):\n            for j in range(c):\n                if matrix[i][j] == 'U':\n                    step = 1\n                    for k in range(i - 1, -1, -1):\n                        if matrix[k][j] == '#':\n                            break\n                        timeHorizon[step, k, j] += 1\n                        step += 1\n                elif matrix[i][j] == 'D':\n                    step = 1\n                    for k in range(i + 1, r, 1):\n                        if matrix[k][j] == '#':\n                            break\n                        timeHorizon[step, k, j] += 1\n                        step += 1\n                elif matrix[i][j] == 'L':\n                    step = 1\n                    for k in range(j - 1, -1, -1):\n                        if matrix[i][k] == '#':\n                            break\n                        timeHorizon[step, i, k] += 1\n                        step += 1\n                elif matrix[i][j] == 'R':\n                    step = 1\n                    for k in range(j + 1, c, 1):\n                        if matrix[i][k] == '#':\n                            break\n                        timeHorizon[step, i, k] += 1\n                        step += 1\n        count = 0\n        for key in timeHorizon:\n            if timeHorizon[key] > 1:\n                ants = timeHorizon[key]\n                count += nCr(ants, 2)\n        print(count)\nmain()", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    a = [list(input()) for _ in range(r)]\n    ans = 0\n    for (i, row) in enumerate(a):\n        for (j, x) in enumerate(row):\n            if x == 'R':\n                for (k, y) in enumerate(row[j + 1:]):\n                    if y == '#':\n                        break\n                    if k % 2 and y == 'L':\n                        ans += 1\n            elif x in 'UD':\n                b = a[i + 1:] if x == 'D' else reversed(a[:i])\n                for (k, row1) in enumerate(b, 1):\n                    if row1[j] == '#':\n                        break\n                    if k % 2 == 0 and row1[j] == 'UD'[x == 'U']:\n                        ans += 1\n                    m = j - k\n                    if m >= 0 and row1[m] == 'R' and ('#' not in row1[m + 1:j]):\n                        ans += 1\n                    m = j + k\n                    if m < c and row1[m] == 'L' and ('#' not in row1[j + 1:m]):\n                        ans += 1\n                a[i][j] = None\n    print(ans)", "import copy\nT = int(input())\nwhile T:\n    (R, C) = map(int, input().split())\n    A = []\n    for i in range(R):\n        B = input()\n        A.append(B)\n    ans = 0\n    for x in range(R):\n        for y in range(C):\n            if A[x][y] != '#':\n                dist = []\n                a = copy.deepcopy(x)\n                b = copy.deepcopy(y)\n                while a >= 0:\n                    if A[a][b] == 'D':\n                        dist.append(x - a)\n                    if A[a][b] == '#':\n                        break\n                    a -= 1\n                a = copy.deepcopy(x)\n                b = copy.deepcopy(y)\n                while a < R:\n                    if A[a][b] == 'U':\n                        dist.append(a - x)\n                    if A[a][b] == '#':\n                        break\n                    a += 1\n                a = copy.deepcopy(x)\n                b = copy.deepcopy(y)\n                while b >= 0:\n                    if A[a][b] == 'R':\n                        dist.append(y - b)\n                    if A[a][b] == '#':\n                        break\n                    b -= 1\n                a = copy.deepcopy(x)\n                b = copy.deepcopy(y)\n                while b < C:\n                    if A[a][b] == 'L':\n                        dist.append(b - y)\n                    if A[a][b] == '#':\n                        break\n                    b += 1\n                dist.sort()\n                j = 0\n                count = 0\n                while j < len(dist) - 1:\n                    if dist[j] != dist[j + 1]:\n                        ans += count * (count + 1) // 2\n                        count = 0\n                    if dist[j] == dist[j + 1]:\n                        count += 1\n                    j += 1\n                ans += count * (count + 1) // 2\n    print(ans)\n    T -= 1", "import math\n\ndef nCr(n, r):\n    f = math.factorial\n    return f(n) // f(r) // f(n - r)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (r, c) = map(int, input().split())\n        matrix = []\n        for i in range(r):\n            data = list(input())\n            matrix.append(data)\n        timeHorizon = dict()\n        for i in range(r):\n            for j in range(c):\n                if matrix[i][j] == 'U':\n                    step = 1\n                    for k in range(i - 1, -1, -1):\n                        if matrix[k][j] == '#':\n                            break\n                        if (step, k, j) not in timeHorizon:\n                            timeHorizon[step, k, j] = 1\n                        else:\n                            timeHorizon[step, k, j] += 1\n                        step += 1\n                elif matrix[i][j] == 'D':\n                    step = 1\n                    for k in range(i + 1, r, 1):\n                        if matrix[k][j] == '#':\n                            break\n                        if (step, k, j) not in timeHorizon:\n                            timeHorizon[step, k, j] = 1\n                        else:\n                            timeHorizon[step, k, j] += 1\n                        step += 1\n                elif matrix[i][j] == 'L':\n                    step = 1\n                    for k in range(j - 1, -1, -1):\n                        if matrix[i][k] == '#':\n                            break\n                        if (step, i, k) not in timeHorizon:\n                            timeHorizon[step, i, k] = 1\n                        else:\n                            timeHorizon[step, i, k] += 1\n                        step += 1\n                elif matrix[i][j] == 'R':\n                    step = 1\n                    for k in range(j + 1, c, 1):\n                        if matrix[i][k] == '#':\n                            break\n                        if (step, i, k) not in timeHorizon:\n                            timeHorizon[step, i, k] = 1\n                        else:\n                            timeHorizon[step, i, k] += 1\n                        step += 1\n        count = 0\n        for key in timeHorizon:\n            if timeHorizon[key] > 1:\n                ants = timeHorizon[key]\n                count += nCr(ants, 2)\n        print(count)\nmain()", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    a = [input() for _ in range(r)]\n    ans = 0\n    for (i, row) in enumerate(a):\n        for (j, x) in enumerate(row):\n            if x == 'R':\n                for (k, y) in enumerate(row[j + 1:]):\n                    if y == '#':\n                        break\n                    if k % 2 and y == 'L':\n                        ans += 1\n            elif x in 'UD':\n                b = a[i + 1:] if x == 'D' else reversed(a[:i])\n                for (k, row1) in enumerate(b, 1):\n                    if row1[j] == '#':\n                        break\n                    if k % 2 == 0 and x + row1[j] == 'UD':\n                        ans += 1\n                    m = j - k\n                    if m >= 0 and row1[m] == 'R' and ('#' not in row1[m + 1:j]):\n                        ans += 1\n                    m = j + k\n                    if m < c and row1[m] == 'L' and ('#' not in row1[j + 1:m]):\n                        ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    a = [input() for _ in range(r)]\n    ans = 0\n    for (i, row) in enumerate(a):\n        for (j, x) in enumerate(row):\n            if x == 'R':\n                for (k, y) in enumerate(row[j + 1:]):\n                    if y == '#':\n                        break\n                    if k % 2 and y == 'L':\n                        ans += 1\n            elif x in 'UD':\n                b = a[i + 1:] if x == 'D' else a[:i][::-1]\n                for (k, row1) in enumerate(b, 1):\n                    if row1[j] == '#':\n                        break\n                    if k % 2 == 0 and x + row1[j] == 'UD':\n                        ans += 1\n                    m = j - k\n                    if m >= 0 and row1[m] == 'R' and ('#' not in row1[m + 1:j]):\n                        ans += 1\n                    m = j + k\n                    if m < c and row1[m] == 'L' and ('#' not in row1[j + 1:m]):\n                        ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    a = [input() for _ in range(r)]\n    ans = 0\n    for (i, row) in enumerate(a):\n        for (j, x) in enumerate(row):\n            if x == 'R':\n                for (k, y) in enumerate(row[j + 1:]):\n                    if y == '#':\n                        break\n                    if k % 2 and y == 'L':\n                        ans += 1\n            elif x in 'UD':\n                b = enumerate(a[i + 1:] if x == 'D' else reversed(a[:i]), 1)\n                for (k, row1) in b:\n                    if row1[j] == '#':\n                        break\n                    if k % 2 == 0 and x + row1[j] == 'UD':\n                        ans += 1\n                    m = j - k\n                    if m >= 0 and row1[m] == 'R' and ('#' not in row1[m + 1:j]):\n                        ans += 1\n                    m = j + k\n                    if m < c and row1[m] == 'L' and ('#' not in row1[j + 1:m]):\n                        ans += 1\n    print(ans)", "import math\n\ndef findHash(x):\n    value = x[0] * 100 + x[1] * 10000\n    return value\n\ndef nCr(n):\n    f = math.factorial\n    return f(n) / f(2) / f(n - 2)\nfor _ in range(int(input())):\n    (row, col) = map(int, input().split())\n    matrix = [[None for x in range(col)] for y in range(row)]\n    antU = []\n    antD = []\n    antL = []\n    antR = []\n    antEater = []\n    ants = 0\n    for i in range(row):\n        s = input()\n        for j in range(len(s)):\n            if s[j] == '#':\n                antEater.append([i, j])\n            elif s[j] == 'U':\n                antU.append([i, j])\n            elif s[j] == 'D':\n                antD.append([i, j])\n            elif s[j] == 'L':\n                antL.append([i, j])\n            elif s[j] == 'R':\n                antR.append([i, j])\n    turns = max(row, col)\n    for i in range(turns):\n        d = {}\n        x = 0\n        while x < len(antU):\n            if antU[x][0] - 1 < 0:\n                antU.pop(x)\n            else:\n                antU[x][0] -= 1\n                if antU[x] in antEater:\n                    antU.pop(x)\n                else:\n                    hashValue = findHash(antU[x])\n                    if hashValue in d:\n                        d[hashValue] += 1\n                    else:\n                        d[hashValue] = 1\n                    x += 1\n        x = 0\n        while x < len(antD):\n            if antD[x][0] + 1 >= row:\n                antD.pop(x)\n            else:\n                antD[x][0] += 1\n                if antD[x] in antEater:\n                    antD.pop(x)\n                else:\n                    hashValue = findHash(antD[x])\n                    if hashValue in d:\n                        d[hashValue] += 1\n                    else:\n                        d[hashValue] = 1\n                    x += 1\n        x = 0\n        while x < len(antR):\n            if antR[x][1] + 1 >= col:\n                antR.pop(x)\n            else:\n                antR[x][1] += 1\n                if antR[x] in antEater:\n                    antR.pop(x)\n                else:\n                    hashValue = findHash(antR[x])\n                    if hashValue in d:\n                        d[hashValue] += 1\n                    else:\n                        d[hashValue] = 1\n                    x += 1\n        x = 0\n        while x < len(antL):\n            if antL[x][1] - 1 < 0:\n                antL.pop(x)\n            else:\n                antL[x][1] -= 1\n                if antL[x] in antEater:\n                    antL.pop(x)\n                else:\n                    hashValue = findHash(antL[x])\n                    if hashValue in d:\n                        d[hashValue] += 1\n                    else:\n                        d[hashValue] = 1\n                    x += 1\n        for x in d:\n            if d[x] > 1:\n                ants += int(nCr(d[x]))\n    print(ants)", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    a = [input() for _ in range(r)]\n    ans = 0\n    for (i, row) in enumerate(a):\n        for (j, x) in enumerate(row):\n            if x == 'R':\n                for (k, y) in enumerate(row[j + 1:]):\n                    if y == '#':\n                        break\n                    if k % 2 and y == 'L':\n                        ans += 1\n            elif x in 'UD':\n                b = a[i + 1:] if x == 'D' else reversed(a[:i])\n                for (k, row1) in enumerate(b, 1):\n                    if row1[j] == '#':\n                        break\n                    if k % 2 == 0 and x + row1[j] == 'UD':\n                        ans += 1\n                    m = j - k\n                    if m >= 0 and row1[m] == 'R' and ('#' not in row1[m + 1:j]):\n                        ans += 1\n                    m = j + k\n                    if m < c and row1[m] == 'L' and ('#' not in row1[j + 1:m]):\n                        ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    a = [input() for _ in range(r)]\n    ans = 0\n    for (i, row) in enumerate(a):\n        for (j, x) in enumerate(row):\n            if x == 'R':\n                for (k, y) in enumerate(row[j + 1:]):\n                    if y == '#':\n                        break\n                    if k % 2 and y == 'L':\n                        ans += 1\n            elif x in 'UD':\n                b = a[i + 1:] if x == 'D' else reversed(a[:i])\n                for (k, row1) in enumerate(b, 1):\n                    if row1[j] == '#':\n                        break\n                    if x == 'U' and k % 2 == 0 and (row1[j] == 'D'):\n                        ans += 1\n                    m = j - k\n                    if m >= 0 and row1[m] == 'R' and ('#' not in row1[m + 1:j]):\n                        ans += 1\n                    m = j + k\n                    if m < c and row1[m] == 'L' and ('#' not in row1[j + 1:m]):\n                        ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    a = [input() for _ in range(r)]\n    ans = 0\n    for (i, row) in enumerate(a):\n        for (j, x) in enumerate(row):\n            if x == 'R':\n                for (k, y) in enumerate(row[j + 1:]):\n                    if y == '#':\n                        break\n                    if k % 2 and y == 'L':\n                        ans += 1\n            elif x in 'UD':\n                if x == 'D':\n                    b = a[i + 1:]\n                else:\n                    b = reversed(a[:i])\n                for (k, row1) in enumerate(b, 1):\n                    if row1[j] == '#':\n                        break\n                    if x == 'U' and k % 2 == 0 and (row1[j] == 'D'):\n                        ans += 1\n                    m = j - k\n                    if m >= 0 and row1[m] == 'R' and ('#' not in row1[m + 1:j]):\n                        ans += 1\n                    m = j + k\n                    if m < c and row1[m] == 'L' and ('#' not in row1[j + 1:m]):\n                        ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    a = [input() for _ in range(r)]\n    ans = 0\n    for (i, row) in enumerate(a):\n        for (j, x) in enumerate(row):\n            if x == 'R':\n                for (k, y) in enumerate(row[j + 1:]):\n                    if y == '#':\n                        break\n                    if k % 2 and y == 'L':\n                        ans += 1\n            elif x in 'UD':\n                if x == 'D':\n                    b = a[i + 1:]\n                else:\n                    b = reversed(a[:i])\n                for (k, row1) in enumerate(b, 1):\n                    if row1[j] == '#':\n                        break\n                    if x == 'U' and k % 2 == 0 and (row1[j] == 'D'):\n                        ans += 1\n                    m = j - k\n                    if m >= 0 and row1[m] == 'R' and ('#' not in row1[m + 1:j]):\n                        ans += 1\n                    m = j + k\n                    if m < c and row1[m] == 'L' and ('#' not in row1[j + 1:m]):\n                        ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (r, c) = [int(i) for i in input().split()]\n    zone = [[0 for x in range(c)] for y in range(r)]\n    ants = []\n    for i in range(r):\n        s = input()\n        for w in range(len(s)):\n            if s[w] == '#':\n                zone[i][w] = 1\n            elif s[w] in ['R', 'U', 'L', 'D']:\n                ants.append([1, i, w, s[w]])\n    (pairs, x, y) = (0, 2, 1)\n    for time in range(max(r, c)):\n        for a in ants:\n            if a[3] is 'U':\n                a[y] -= 1\n            elif a[3] == 'D':\n                a[y] += 1\n            elif a[3] == 'L':\n                a[x] -= 1\n            else:\n                a[x] += 1\n            if a[x] < 0 or a[x] >= c:\n                a[0] = 0\n            elif a[y] < 0 or a[y] >= r:\n                a[0] = 0\n            elif zone[a[y]][a[x]] == 1:\n                a[0] = 0\n        ants.sort(key=lambda val: (val[0], val[1], val[2]))\n        for i in range(len(ants)):\n            if ants[i][0] == 1:\n                break\n        ants = ants[i:]\n        if len(ants) == 0:\n            break\n        prev = [ants[0][1], ants[0][2]]\n        cur_num = 1\n        for a in ants[1:]:\n            if prev[0] == a[1] and prev[1] == a[2]:\n                cur_num += 1\n            else:\n                pairs += cur_num * (cur_num - 1) // 2\n                cur_num = 1\n                prev[0] = a[1]\n                prev[1] = a[2]\n        pairs += cur_num * (cur_num - 1) // 2\n    print(pairs)", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    a = [input() for _ in range(r)]\n    ans = 0\n    for (i, row) in enumerate(a):\n        for (j, x) in enumerate(row):\n            if x == 'R':\n                for (k, y) in enumerate(row[j + 1:]):\n                    if y == '#':\n                        break\n                    if k % 2 and y == 'L':\n                        ans += 1\n            elif x == 'U':\n                for (k, row1) in enumerate(reversed(a[:i]), 1):\n                    if row1[j] == '#':\n                        break\n                    if k % 2 == 0 and row1[j] == 'D':\n                        ans += 1\n                    m = j - k\n                    if m >= 0 and row1[m] == 'R' and ('#' not in row1[m + 1:j]):\n                        ans += 1\n                    m = j + k\n                    if m < c and row1[m] == 'L' and ('#' not in row1[j + 1:m]):\n                        ans += 1\n            elif x == 'D':\n                for (k, row1) in enumerate(a[i + 1:], 1):\n                    if row1[j] == '#':\n                        break\n                    m = j - k\n                    if m >= 0 and row1[m] == 'R' and ('#' not in row1[m + 1:j]):\n                        ans += 1\n                    m = j + k\n                    if m < c and row1[m] == 'L' and ('#' not in row1[j + 1:m]):\n                        ans += 1\n    print(ans)", "def main():\n    for _ in range(int(input())):\n        (r, c) = map(int, input().split())\n        g = list()\n        ants = list()\n        eaters = set()\n        dd = {'U': (-1, 0), 'D': (1, 0), 'L': (0, -1), 'R': (0, 1)}\n        for i in range(r):\n            g.append(list(input().strip()))\n            for j in range(c):\n                if g[i][j] in 'UDLR':\n                    ants.append((i, j, dd[g[i][j]]))\n                elif g[i][j] == '#':\n                    eaters.add((i, j))\n        count = 0\n        while len(ants) != 0:\n            nants = list()\n            nc = dict()\n            for k in ants:\n                nk = (k[0] + k[2][0], k[1] + k[2][1])\n                if nk not in eaters and min(nk) >= 0 and (nk[0] < r) and (nk[1] < c):\n                    nants.append((nk[0], nk[1], k[2]))\n                    if nk not in nc:\n                        nc[nk] = 1\n                    else:\n                        nc[nk] += 1\n            ants = nants\n            for (i, k) in nc.items():\n                count += k * (k - 1) // 2\n        print(count)\nmain()", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    a = [input() for _ in range(r)]\n    ans = 0\n    for (i, row) in enumerate(a):\n        for (j, x) in enumerate(row):\n            if x == 'U':\n                for (k, row1) in enumerate(reversed(a[:i]), 1):\n                    if row1[j] == '#':\n                        break\n                    if k % 2 == 0 and row1[j] == 'D':\n                        ans += 1\n                    m = j - k\n                    if m >= 0 and row1[m] == 'R' and ('#' not in row1[m + 1:j]):\n                        ans += 1\n                    m = j + k\n                    if m < c and row1[m] == 'L' and ('#' not in row1[j + 1:m]):\n                        ans += 1\n            elif x == 'D':\n                for (k, row1) in enumerate(a[i + 1:], 1):\n                    if row1[j] == '#':\n                        break\n                    m = j - k\n                    if m >= 0 and row1[m] == 'R' and ('#' not in row1[m + 1:j]):\n                        ans += 1\n                    m = j + k\n                    if m < c and row1[m] == 'L' and ('#' not in row1[j + 1:m]):\n                        ans += 1\n            elif x == 'R':\n                for (k, y) in enumerate(row[j + 1:]):\n                    if y == '#':\n                        break\n                    if k % 2 and y == 'L':\n                        ans += 1\n    print(ans)", "def ncr(n, r):\n    return int(fact(n) / (fact(r) * fact(n - r)))\n\ndef fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\nt = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    a = []\n    tm = []\n    for i in range(r):\n        x = list(input())\n        a.append(x)\n    x = []\n    for i in range(r):\n        d = []\n        for j in range(c):\n            y = [0] * 50\n            d.append(y)\n        x.append(d)\n    for i in range(r):\n        for j in range(c):\n            if a[i][j] == 'U':\n                q = 1\n                for k in range(i - 1, -1, -1):\n                    if a[k][j] == '#':\n                        break\n                    x[k][j][q] += 1\n                    q += 1\n            elif a[i][j] == 'D':\n                q = 1\n                for k in range(i + 1, r):\n                    if a[k][j] == '#':\n                        break\n                    x[k][j][q] += 1\n                    q += 1\n            elif a[i][j] == 'R':\n                q = 1\n                for k in range(j + 1, c):\n                    if a[i][k] == '#':\n                        break\n                    x[i][k][q] += 1\n                    q += 1\n            elif a[i][j] == 'L':\n                q = 1\n                for k in range(j - 1, -1, -1):\n                    if a[i][k] == '#':\n                        break\n                    x[i][k][q] += 1\n                    q += 1\n    ans = 0\n    for i in range(r):\n        for j in range(c):\n            for k in range(50):\n                ans += ncr(x[i][j][k], 2)\n    print(ans)", "tt = int(input())\nfor ii in range(tt):\n    (r, c) = map(int, input().split())\n    arr = []\n    for jj in range(r):\n        temp = input()\n        temp = list(temp)\n        t1 = []\n        for kk in temp:\n            t1.append([kk])\n        arr.append(t1)\n    t = 0\n    cnt = 0\n    while t <= max(r, c) + 1:\n        temp = [[['-'] for i in range(c)] for j in range(r)]\n        for jj in range(r):\n            for kk in range(c):\n                if arr[jj][kk][0] == '#':\n                    temp[jj][kk] = arr[jj][kk]\n                elif arr[jj][kk][0] == '-':\n                    pass\n                else:\n                    li = arr[jj][kk]\n                    le = len(li)\n                    for pp in range(le):\n                        if li[pp] == 'U' and jj == 0:\n                            pass\n                        elif li[pp] == 'U':\n                            if arr[jj - 1][kk][0] == '#':\n                                pass\n                            elif temp[jj - 1][kk][0] == '-':\n                                temp[jj - 1][kk][0] = 'U'\n                            else:\n                                temp[jj - 1][kk].append('U')\n                        if li[pp] == 'D' and jj == r - 1:\n                            pass\n                        elif li[pp] == 'D':\n                            if arr[jj + 1][kk][0] == '#':\n                                pass\n                            elif temp[jj + 1][kk][0] == '-':\n                                temp[jj + 1][kk][0] = 'D'\n                            else:\n                                temp[jj + 1][kk].append('D')\n                        if li[pp] == 'R' and kk == c - 1:\n                            pass\n                        elif li[pp] == 'R':\n                            if arr[jj][kk + 1][0] == '#':\n                                pass\n                            elif temp[jj][kk + 1][0] == '-':\n                                temp[jj][kk + 1][0] = 'R'\n                            else:\n                                temp[jj][kk + 1].append('R')\n                        if li[pp] == 'L' and kk == 0:\n                            pass\n                        elif li[pp] == 'L':\n                            if arr[jj][kk - 1][0] == '#':\n                                pass\n                            elif temp[jj][kk - 1][0] == '-':\n                                temp[jj][kk - 1][0] = 'L'\n                            else:\n                                temp[jj][kk - 1].append('L')\n        for i in range(r):\n            for j in range(c):\n                if temp[i][j][0] == '-' or temp[i][j][0] == '#':\n                    pass\n                else:\n                    le = len(temp[i][j])\n                    cnt += le * (le - 1) // 2\n                arr[i][j] = temp[i][j]\n        t += 1\n    print(cnt)", "tt = int(input())\nfor ii in range(tt):\n    (r, c) = map(int, input().split())\n    arr = []\n    for jj in range(r):\n        temp = input()\n        temp = list(temp)\n        t1 = []\n        for kk in temp:\n            t1.append([kk])\n        arr.append(t1)\n    t = 0\n    cnt = 0\n    while t <= max(r, c) + 1:\n        temp = [[['-'] for i in range(c)] for j in range(r)]\n        for jj in range(r):\n            for kk in range(c):\n                if arr[jj][kk][0] == '#':\n                    temp[jj][kk] = arr[jj][kk]\n                elif arr[jj][kk][0] == '-':\n                    pass\n                else:\n                    li = arr[jj][kk]\n                    le = len(li)\n                    for pp in range(le):\n                        if li[pp] == 'U' and jj == 0:\n                            pass\n                        elif li[pp] == 'U':\n                            if arr[jj - 1][kk][0] == '#':\n                                pass\n                            elif temp[jj - 1][kk][0] == '-':\n                                temp[jj - 1][kk][0] = 'U'\n                            else:\n                                temp[jj - 1][kk].append('U')\n                        if li[pp] == 'D' and jj == r - 1:\n                            pass\n                        elif li[pp] == 'D':\n                            if arr[jj + 1][kk][0] == '#':\n                                pass\n                            elif temp[jj + 1][kk][0] == '-':\n                                temp[jj + 1][kk][0] = 'D'\n                            else:\n                                temp[jj + 1][kk].append('D')\n                        if li[pp] == 'R' and kk == c - 1:\n                            pass\n                        elif li[pp] == 'R':\n                            if arr[jj][kk + 1][0] == '#':\n                                pass\n                            elif temp[jj][kk + 1][0] == '-':\n                                temp[jj][kk + 1][0] = 'R'\n                            else:\n                                temp[jj][kk + 1].append('R')\n                        if li[pp] == 'L' and kk == 0:\n                            pass\n                        elif li[pp] == 'L':\n                            if arr[jj][kk - 1][0] == '#':\n                                pass\n                            elif temp[jj][kk - 1][0] == '-':\n                                temp[jj][kk - 1][0] = 'L'\n                            else:\n                                temp[jj][kk - 1].append('L')\n        for i in range(r):\n            for j in range(c):\n                if temp[i][j][0] == '-' or temp[i][j][0] == '#':\n                    pass\n                else:\n                    le = len(temp[i][j])\n                    cnt += le * (le - 1) // 2\n                arr[i][j] = temp[i][j]\n        t += 1\n    print(cnt)", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    a = [input() for _ in range(r)]\n    ans = 0\n    for i in range(r):\n        for j in range(c):\n            if a[i][j] == 'U':\n                for k in range(i - 1, -1, -1):\n                    if a[k][j] == '#':\n                        break\n                    if k % 2 == i % 2 and a[k][j] == 'D':\n                        ans += 1\n                    m = j - i + k\n                    if m >= 0 and a[k][m] == 'R' and ('#' not in a[k][m + 1:j]):\n                        ans += 1\n                    m = j + i - k\n                    if m < c and a[k][m] == 'L' and ('#' not in a[k][j + 1:m]):\n                        ans += 1\n            elif a[i][j] == 'D':\n                for k in range(i + 1, r):\n                    if a[k][j] == '#':\n                        break\n                    m = j - k + i\n                    if m >= 0 and a[k][m] == 'R' and ('#' not in a[k][m + 1:j]):\n                        ans += 1\n                    m = j + k - i\n                    if m < c and a[k][m] == 'L' and ('#' not in a[k][j + 1:m]):\n                        ans += 1\n            elif a[i][j] == 'R':\n                for k in range(j + 1, c):\n                    if a[i][k] == '#':\n                        break\n                    if k % 2 == j % 2 and a[i][k] == 'L':\n                        ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    a = [input() for _ in range(r)]\n    ans = 0\n    for i in range(r):\n        for j in range(c):\n            if a[i][j] == 'L':\n                for k in range(j - 1, -1, -1):\n                    if a[i][k] == '#':\n                        break\n                    if k % 2 == j % 2 and a[i][k] == 'R':\n                        ans += 1\n                    m = i - j + k\n                    if m >= 0 and a[m][k] == 'D' and all((a[ii][k] != '#' for ii in range(m + 1, i))):\n                        ans += 1\n                    m = i + j - k\n                    if m < r and a[m][k] == 'U' and all((a[ii][k] != '#' for ii in range(i + 1, m))):\n                        ans += 1\n            elif a[i][j] == 'R':\n                for k in range(j + 1, c):\n                    if a[i][k] == '#':\n                        break\n                    m = i - k + j\n                    if m >= 0 and a[m][k] == 'D' and all((a[ii][k] != '#' for ii in range(m + 1, i))):\n                        ans += 1\n                    m = i + k - j\n                    if m < r and a[m][k] == 'U' and all((a[ii][k] != '#' for ii in range(i + 1, m))):\n                        ans += 1\n            elif a[i][j] == 'D':\n                for k in range(i + 1, r):\n                    if a[k][j] == '#':\n                        break\n                    if k % 2 == i % 2 and a[k][j] == 'U':\n                        ans += 1\n    print(ans)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    grid = {(i, j): [] for i in range(r) for j in range(c)}\n    cmd = []\n    for i in range(r):\n        for j in range(c):\n            grid[i, j] = []\n    for i in range(r):\n        move = input()\n        cmd.append([i for i in move])\n    for i in range(r):\n        for j in range(c):\n            if cmd[i][j] == 'R':\n                k = j\n                time = 0\n                while k < c:\n                    if cmd[i][k] == '#':\n                        break\n                    else:\n                        grid[i, k] += [time]\n                    time += 1\n                    k += 1\n            if cmd[i][j] == 'L':\n                k = j\n                time = 0\n                while k >= 0:\n                    if cmd[i][k] == '#':\n                        break\n                    else:\n                        grid[i, k] += [time]\n                    time += 1\n                    k -= 1\n            if cmd[i][j] == 'U':\n                k = i\n                time = 0\n                while k >= 0:\n                    if cmd[k][j] == '#':\n                        break\n                    else:\n                        grid[k, j] += [time]\n                    time += 1\n                    k -= 1\n            if cmd[i][j] == 'D':\n                k = i\n                time = 0\n                while k < r:\n                    if cmd[k][j] == '#':\n                        break\n                    else:\n                        grid[k, j] += [time]\n                    time += 1\n                    k += 1\n    meet = 0\n    for i in grid:\n        f = dict(Counter(grid[i]))\n        for j in f:\n            if f[j] > 1:\n                meet += (f[j] * f[j] - f[j]) // 2\n    print(meet)", "t = int(input())\nwhile t:\n    t -= 1\n    (r, c) = map(int, input().split())\n    arr = []\n    for i in range(r):\n        s = list(input())\n        arr.append(s)\n    ans = 0\n    for i in range(r):\n        for j in range(c):\n            if arr[i][j] == 'R':\n                row = i\n                column = j\n                u = 0\n                if column < c - 1:\n                    flag2 = False\n                    for k in range(column + 1, c):\n                        u += 1\n                        if flag2 == False:\n                            if row - u >= 0:\n                                flag = False\n                                for g in range(row - 1, row - u, -1):\n                                    if arr[g][k] == '#':\n                                        flag = True\n                                        break\n                                if flag == False:\n                                    if arr[row - u][k] == 'D':\n                                        ans += 1\n                            if row + u < r:\n                                flag1 = False\n                                for g in range(row + 1, row + u):\n                                    if arr[g][k] == '#':\n                                        flag1 = True\n                                        break\n                                if flag1 == False:\n                                    if arr[row + u][k] == 'U':\n                                        ans += 1\n                        if arr[row][k] == '#':\n                            flag2 = True\n                            if row - u >= 0:\n                                if arr[row - u][k] == 'D' and flag == False:\n                                    ans -= 1\n                            if row + u < r:\n                                if arr[row + u][k] == 'U' and flag1 == False:\n                                    ans -= 1\n                            break\n                        elif flag2 == False:\n                            if (k - column) % 2 == 0 and arr[row][k] == 'L':\n                                ans += 1\n                arr[i][j] = '0'\n            elif arr[i][j] == 'L':\n                row = i\n                column = j\n                u = 0\n                if column > 0:\n                    flag2 = False\n                    for k in range(column - 1, -1, -1):\n                        u += 1\n                        if flag2 == False:\n                            if row - u >= 0:\n                                flag = False\n                                for g in range(row - 1, row - u, -1):\n                                    if arr[g][k] == '#':\n                                        flag = True\n                                        break\n                                if flag == False:\n                                    if arr[row - u][k] == 'D':\n                                        ans += 1\n                            if row + u < r:\n                                flag1 = False\n                                for g in range(row + 1, row + u):\n                                    if arr[g][k] == '#':\n                                        flag1 = True\n                                        break\n                                if flag1 == False:\n                                    if arr[row + u][k] == 'U':\n                                        ans += 1\n                        if arr[row][k] == '#':\n                            flag2 = True\n                            if row - u >= 0:\n                                if arr[row - u][k] == 'D' and flag == False:\n                                    ans -= 1\n                            if row + u < r:\n                                if arr[row + u][k] == 'U' and flag1 == False:\n                                    ans -= 1\n                            break\n                        elif flag2 == False:\n                            if (column - k) % 2 == 0 and arr[row][k] == 'R':\n                                ans += 1\n                arr[i][j] = '0'\n            elif arr[i][j] == 'U':\n                row = i\n                column = j\n                u = 0\n                if row > 0:\n                    flag2 = False\n                    for k in range(row - 1, -1, -1):\n                        u += 1\n                        if flag2 == False:\n                            if column - u >= 0:\n                                flag = False\n                                for g in range(column - 1, column - u, -1):\n                                    if arr[k][g] == '#':\n                                        flag = True\n                                        break\n                                if flag == False:\n                                    if arr[k][column - u] == 'R':\n                                        ans += 1\n                            if column + u < c:\n                                flag1 = False\n                                for g in range(column + 1, column + u):\n                                    if arr[k][g] == '#':\n                                        flag1 = True\n                                        break\n                                if flag1 == False:\n                                    if arr[k][column + u] == 'L':\n                                        ans += 1\n                        if arr[k][column] == '#':\n                            flag2 = True\n                            if column - u >= 0:\n                                if arr[k][column - u] == 'R' and flag == False:\n                                    ans -= 1\n                            if column + u < c:\n                                if arr[k][column + u] == 'L' and flag1 == False:\n                                    ans -= 1\n                            break\n                        elif flag2 == False:\n                            if (row - k) % 2 == 0 and arr[k][column] == 'D':\n                                ans += 1\n                arr[i][j] = '0'\n            elif arr[i][j] == 'D':\n                row = i\n                column = j\n                u = 0\n                if row < r - 1:\n                    flag2 = False\n                    for k in range(row + 1, r):\n                        u += 1\n                        if flag2 == False:\n                            if column - u >= 0:\n                                flag = False\n                                for g in range(column - 1, column - u, -1):\n                                    if arr[k][g] == '#':\n                                        flag = True\n                                        break\n                                if flag == False:\n                                    if arr[k][column - u] == 'R':\n                                        ans += 1\n                            if column + u < c:\n                                flag1 = False\n                                for g in range(column + 1, column + u):\n                                    if arr[k][g] == '#':\n                                        flag1 = True\n                                        break\n                                if flag1 == False:\n                                    if arr[k][column + u] == 'L':\n                                        ans += 1\n                        if arr[k][column] == '#':\n                            flag2 = True\n                            if column - u >= 0:\n                                if arr[k][column - u] == 'R' and flag == False:\n                                    ans -= 1\n                            if column + u < c:\n                                if arr[k][column + u] == 'L' and flag1 == False:\n                                    ans -= 1\n                            break\n                        elif flag2 == False:\n                            if (k - row) % 2 == 0 and arr[k][column] == 'U':\n                                ans += 1\n                arr[i][j] = '0'\n    print(ans)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    d = dict()\n    for i in range(r):\n        for j in range(c):\n            d[i, j] = []\n    grid = []\n    for i in range(r):\n        x = input()\n        x = [j for j in x]\n        grid += [x]\n    for i in range(r):\n        for j in range(c):\n            if grid[i][j] == 'U':\n                k = i\n                time = 0\n                while k >= 0:\n                    if grid[k][j] == '#':\n                        break\n                    else:\n                        d[k, j] += [time]\n                    k -= 1\n                    time += 1\n            elif grid[i][j] == 'D':\n                k = i\n                time = 0\n                while k < r:\n                    if grid[k][j] == '#':\n                        break\n                    else:\n                        d[k, j] += [time]\n                    k += 1\n                    time += 1\n            elif grid[i][j] == 'R':\n                k = j\n                time = 0\n                while k < c:\n                    if grid[i][k] == '#':\n                        break\n                    else:\n                        d[i, k] += [time]\n                    k += 1\n                    time += 1\n            elif grid[i][j] == 'L':\n                k = j\n                time = 0\n                while k >= 0:\n                    if grid[i][k] == '#':\n                        break\n                    else:\n                        d[i, k] += [time]\n                    k -= 1\n                    time += 1\n    ans = 0\n    for i in d:\n        freq = dict(Counter(d[i]))\n        for j in freq:\n            if freq[j] > 1:\n                ans += freq[j] * (freq[j] - 1) // 2\n    print(ans)", "import numpy\nfor t in range(int(input())):\n    (r, c) = map(int, input().split())\n    temp = max(r, c)\n    ANTS = []\n    ants = numpy.zeros((r, c))\n    eater = numpy.full((r, c), False)\n    for row in range(r):\n        cols = input()\n        for col in range(c):\n            if cols[col] == 'U':\n                ANTS.append([row, col, -1, 0])\n                ants[row][col] = 1\n            elif cols[col] == 'D':\n                ANTS.append([row, col, 1, 0])\n                ants[row][col] = 1\n            elif cols[col] == 'L':\n                ANTS.append([row, col, 0, -1])\n                ants[row][col] = 1\n            elif cols[col] == 'R':\n                ANTS.append([row, col, 0, 1])\n                ants[row][col] = 1\n            elif cols[col] == '#':\n                eater[row][col] = True\n    num = len(ANTS)\n    count = 0\n    for i in range(1, temp):\n        j = 0\n        while j < num:\n            ANT = ANTS[j]\n            ants[ANT[0]][ANT[1]] -= 1\n            ANT[0] += ANT[2]\n            ANT[1] += ANT[3]\n            if ANT[0] >= r or ANT[0] < 0 or ANT[1] >= c or (ANT[1] < 0):\n                ANTS.pop(j)\n                j -= 1\n                num -= 1\n            elif eater[ANT[0]][ANT[1]] == True:\n                ANTS.pop(j)\n                j -= 1\n                num -= 1\n            else:\n                ants[ANT[0]][ANT[1]] += 1\n            j += 1\n        flag = 0\n        for x in range(r):\n            for y in range(c):\n                temp = ants[x][y]\n                count += temp * (temp - 1) // 2\n    print(int(count))", "import sys\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = []\n    for i in range(n):\n        s.append(input())\n    ans = []\n    for i in range(n):\n        ans.append([])\n        for j in range(m):\n            ans[i].append([])\n    for i in range(n):\n        for j in range(m):\n            c = 0\n            if s[i][j] == 'U':\n                for k in range(i, -1, -1):\n                    if s[k][j] == '#':\n                        break\n                    ans[k][j].append(c)\n                    c += 1\n            elif s[i][j] == 'D':\n                for k in range(i, n):\n                    if s[k][j] == '#':\n                        break\n                    ans[k][j].append(c)\n                    c += 1\n            elif s[i][j] == 'L':\n                for k in range(j, -1, -1):\n                    if s[i][k] == '#':\n                        break\n                    ans[i][k].append(c)\n                    c += 1\n            elif s[i][j] == 'R':\n                for k in range(j, m):\n                    if s[i][k] == '#':\n                        break\n                    ans[i][k].append(c)\n                    c += 1\n    for i in range(n):\n        for j in range(m):\n            ans[i][j].sort()\n    res = []\n    for i in range(n):\n        for j in range(m):\n            c = 1\n            for k in range(1, len(ans[i][j])):\n                if ans[i][j][k] == ans[i][j][k - 1]:\n                    c += 1\n                else:\n                    if c != 1:\n                        res.append(c)\n                    c = 1\n                if k == len(ans[i][j]) - 1:\n                    if c != 1:\n                        res.append(c)\n    pairs = 0\n    for i in range(len(res)):\n        pairs += res[i] * (res[i] - 1) // 2\n    print(pairs)", "import copy\n\ndef AllDead(arr):\n    var = 1\n    for x in arr:\n        for y in x:\n            if 'U' in y or 'D' in y or 'L' in y or ('R' in y):\n                var = 0\n    return var\n\ndef checkMeet(arr):\n    ans = 0\n    for x in arr:\n        for y in x:\n            if len(y) >= 2 and '-' not in y:\n                ans += len(y) * (len(y) - 1) // 2\n    return ans\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    lol = [['#']] * (m + 2)\n    arr = [lol]\n    for j in range(n):\n        mo = [[x] for x in input()]\n        arr += [[['#']] + mo + [['#']]]\n    arr += [lol]\n    meet = 0\n    while AllDead(arr) == 0:\n        temp = copy.deepcopy(arr)\n        for x in range(1, n + 1):\n            for y in range(1, m + 1):\n                for z in arr[x][y]:\n                    if z == 'U':\n                        if arr[x - 1][y] == ['#']:\n                            do_nothing = 1\n                        elif temp[x - 1][y] == ['-']:\n                            temp[x - 1][y].remove('-')\n                            temp[x - 1][y] += ['U']\n                        else:\n                            temp[x - 1][y] += ['U']\n                        temp[x][y].remove(z)\n                        if len(temp[x][y]) == 0:\n                            temp[x][y] = ['-']\n                    if z == 'D':\n                        if arr[x + 1][y] == ['#']:\n                            do_nothing = 1\n                        elif temp[x + 1][y] == ['-']:\n                            temp[x + 1][y].remove('-')\n                            temp[x + 1][y] += ['D']\n                        else:\n                            temp[x + 1][y] += ['D']\n                        temp[x][y].remove(z)\n                        if len(temp[x][y]) == 0:\n                            temp[x][y] = ['-']\n                    if z == 'L':\n                        if arr[x][y - 1] == ['#']:\n                            do_nothing = 1\n                        elif temp[x][y - 1] == ['-']:\n                            temp[x][y - 1].remove('-')\n                            temp[x][y - 1] += ['L']\n                        else:\n                            temp[x][y - 1] += ['L']\n                        temp[x][y].remove(z)\n                        if len(temp[x][y]) == 0:\n                            temp[x][y] = ['-']\n                    if z == 'R':\n                        if arr[x][y + 1] == ['#']:\n                            do_nothing = 1\n                        elif temp[x][y + 1] == ['-']:\n                            temp[x][y + 1].remove('-')\n                            temp[x][y + 1] += ['R']\n                        else:\n                            temp[x][y + 1] += ['R']\n                        temp[x][y].remove(z)\n                        if len(temp[x][y]) == 0:\n                            temp[x][y] = ['-']\n        arr = copy.deepcopy(temp)\n        meet += checkMeet(arr)\n    print(meet)", "t = int(input())\nfor p in range(t):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        arr.append([])\n        for j in range(m):\n            arr[i].append({})\n    ar = []\n    for q in range(n):\n        a = input()\n        a = list(a)\n        ar.append(a)\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            k = j\n            while k >= 0:\n                if ar[i][k] == 'R':\n                    if j - k not in arr[i][j]:\n                        arr[i][j][j - k] = 1\n                    else:\n                        arr[i][j][j - k] += 1\n                elif ar[i][k] == '#':\n                    break\n                k -= 1\n            k = j\n            while k < m:\n                if ar[i][k] == 'L':\n                    if k - j not in arr[i][j]:\n                        arr[i][j][k - j] = 1\n                    else:\n                        arr[i][j][k - j] += 1\n                elif ar[i][k] == '#':\n                    break\n                k += 1\n            k = i\n            while k < n:\n                if ar[k][j] == 'U':\n                    if k - i not in arr[i][j]:\n                        arr[i][j][k - i] = 1\n                    else:\n                        arr[i][j][k - i] += 1\n                elif ar[k][j] == '#':\n                    break\n                k += 1\n            k = i\n            while k >= 0:\n                if ar[k][j] == 'D':\n                    if i - k not in arr[i][j]:\n                        arr[i][j][i - k] = 1\n                    else:\n                        arr[i][j][i - k] += 1\n                elif ar[k][j] == '#':\n                    break\n                k -= 1\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            for d in arr[i][j]:\n                if arr[i][j][d] == 2:\n                    count += 1\n                else:\n                    count += arr[i][j][d] * (arr[i][j][d] - 1) // 2\n    print(count)", "import copy\nT = int(input())\nwhile T:\n    (R, C) = map(int, input().split())\n    A = []\n    for i in range(R):\n        B = input()\n        A.append(B)\n    ans = 0\n    for x in range(R):\n        for y in range(C):\n            if A[x][y] != '#':\n                dist = []\n                a = copy.deepcopy(x)\n                b = copy.deepcopy(y)\n                while a >= 0:\n                    if A[a][b] == 'D':\n                        dist.append(x - a)\n                    if A[a][b] == '#':\n                        break\n                    a -= 1\n                a = copy.deepcopy(x)\n                b = copy.deepcopy(y)\n                while a < R:\n                    if A[a][b] == 'U':\n                        dist.append(a - x)\n                    if A[a][b] == '#':\n                        break\n                    a += 1\n                a = copy.deepcopy(x)\n                b = copy.deepcopy(y)\n                while b >= 0:\n                    if A[a][b] == 'R':\n                        dist.append(y - b)\n                    if A[a][b] == '#':\n                        break\n                    b -= 1\n                a = copy.deepcopy(x)\n                b = copy.deepcopy(y)\n                while b < C:\n                    if A[a][b] == 'L':\n                        dist.append(b - y)\n                    if A[a][b] == '#':\n                        break\n                    b += 1\n                dist.sort()\n                j = 0\n                count = 0\n                while j < len(dist) - 1:\n                    if dist[j] != dist[j + 1]:\n                        ans += count * (count + 1) // 2\n                        count = 0\n                    if dist[j] == dist[j + 1]:\n                        count += 1\n                    j += 1\n                ans += count * (count + 1) // 2\n    print(ans)\n    T -= 1", "t = int(input())\nfor i in range(t):\n    (r, c) = map(int, input().rstrip().split())\n    arr = []\n    for j in range(r):\n        arr.append(input().rstrip())\n    n = max(r, c)\n    lst = [0 for j in range(n)]\n    full_list = []\n    for j in range(r):\n        te = []\n        for k in range(c):\n            te.append(lst.copy())\n        full_list.append(te)\n    for j in range(r):\n        for k in range(c):\n            if arr[j][k] == 'R':\n                l = 1\n                for rj in range(k + 1, c):\n                    if arr[j][rj] == '#':\n                        break\n                    full_list[j][rj][l] = full_list[j][rj][l] + 1\n                    l = l + 1\n            elif arr[j][k] == 'L':\n                l = 1\n                for rj in range(k - 1, -1, -1):\n                    if arr[j][rj] == '#':\n                        break\n                    full_list[j][rj][l] += 1\n                    l = l + 1\n            elif arr[j][k] == 'D':\n                l = 1\n                for rj in range(j + 1, r):\n                    if arr[rj][k] == '#':\n                        break\n                    full_list[rj][k][l] += 1\n                    l = l + 1\n            elif arr[j][k] == 'U':\n                l = 1\n                for rj in range(j - 1, -1, -1):\n                    if arr[rj][k] == '#':\n                        break\n                    full_list[rj][k][l] += 1\n                    l = l + 1\n    co = 0\n    for j in range(r):\n        for k in range(c):\n            for rj in range(n):\n                if full_list[j][k][rj] == 2:\n                    co = co + 1\n                elif full_list[j][k][rj] == 3:\n                    co = co + 3\n                elif full_list[j][k][rj] == 4:\n                    co = co + 6\n    print(co)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (r, c) = list(map(int, input().split()))\n    matrix = []\n    for i in range(r):\n        matrix.append(list(input()))\n    sim = [[[] for i in range(c)] for j in range(r)]\n    ants = []\n    eaters = []\n    for i in range(r):\n        for j in range(c):\n            if matrix[i][j] == 'U' or matrix[i][j] == 'D' or matrix[i][j] == 'L' or (matrix[i][j] == 'R'):\n                ants.append([i, j, matrix[i][j]])\n            elif matrix[i][j] == '#':\n                eaters.append([i, j])\n    for i in range(len(ants)):\n        (row, col, d) = ants[i]\n        ver = 0\n        hor = 0\n        if d == 'U':\n            ver = -1\n        elif d == 'D':\n            ver = 1\n        elif d == 'L':\n            hor = -1\n        else:\n            hor = 1\n        time = 0\n        while row < r and row >= 0 and (col >= 0) and (col < c) and (matrix[row][col] != '#'):\n            if time != 0:\n                sim[row][col].append(time)\n            row += ver\n            col += hor\n            time += 1\n    ans = 0\n    for i in range(r):\n        for j in range(c):\n            temp = Counter(sim[i][j])\n            for k in temp:\n                var = temp[k]\n                ans += var * (var - 1) // 2\n    print(ans)", "T = int(input())\nfor t in range(T):\n    (R, C) = [int(i) for i in input().split()]\n    right = []\n    left = []\n    up = []\n    down = []\n    ant = []\n    sm = 0\n    for r in range(R):\n        s = input()\n        c = 0\n        for i in s:\n            if i == 'R':\n                right.append([r, c])\n            elif i == 'L':\n                left.append([r, c])\n            elif i == 'U':\n                up.append([r, c])\n            elif i == 'D':\n                down.append([r, c])\n            elif i == '#':\n                ant.append([r, c])\n            else:\n                pass\n            c += 1\n    a = len(right)\n    b = len(left)\n    c = len(up)\n    d = len(down)\n    while True:\n        if a + b + c + d == 0:\n            break\n        for i in range(a):\n            x = right[i]\n            y = x[1]\n            y += 1\n            if y == C:\n                right[i] = [-1, -1]\n            else:\n                z = x[0]\n                right[i] = [z, y]\n                if right[i] in ant:\n                    right[i] = [-1, -1]\n        for i in range(b):\n            x = left[i]\n            y = x[1]\n            y -= 1\n            if y == -1:\n                left[i] = [-1, -1]\n            else:\n                z = x[0]\n                left[i] = [z, y]\n                if left[i] in ant:\n                    left[i] = [-1, -1]\n        for i in range(c):\n            x = up[i]\n            y = x[0]\n            y -= 1\n            if y == -1:\n                up[i] = [-1, -1]\n            else:\n                z = x[1]\n                up[i] = [y, z]\n                if up[i] in ant:\n                    up[i] = [-1, -1]\n        for i in range(d):\n            if down[i] != [-1, -1]:\n                x = down[i]\n                y = x[0]\n                y += 1\n                if y == R:\n                    down[i] = [-1, -1]\n                else:\n                    z = x[1]\n                    down[i] = [y, z]\n                    if down[i] in ant:\n                        down[i] = [-1, -1]\n        q = 0\n        while True:\n            if q >= a:\n                break\n            if right[q] == [-1, -1]:\n                del right[q]\n                a -= 1\n            else:\n                q += 1\n        w = 0\n        while True:\n            if w >= b:\n                break\n            if left[w] == [-1, -1]:\n                del left[w]\n                b -= 1\n            else:\n                w += 1\n        e = 0\n        while True:\n            if e >= c:\n                break\n            if up[e] == [-1, -1]:\n                del up[e]\n                c -= 1\n            else:\n                e += 1\n        p = 0\n        while True:\n            if p >= d:\n                break\n            if down[p] == [-1, -1]:\n                del down[p]\n                d -= 1\n            else:\n                p += 1\n        for i in right:\n            if i in left:\n                sm += 1\n            if i in up:\n                sm += 1\n            if i in down:\n                sm += 1\n        for i in left:\n            if i in up:\n                sm += 1\n            if i in down:\n                sm += 1\n        for i in up:\n            if i in down:\n                sm += 1\n    print(sm)", "def nCr(n, r):\n    return fact(n) / (fact(r) * fact(n - r))\n\ndef fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\nfor _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    board = []\n    for i in range(r):\n        x = input()\n        board.append(x)\n    coll = []\n    for i in range(r):\n        coll.append([])\n        for j in range(c):\n            coll[i].append([])\n    for i in range(r):\n        for j in range(c):\n            if board[i][j] == '-' or board[i][j] == '#':\n                pass\n            else:\n                cnt = 1\n                if board[i][j] == 'D':\n                    for k in range(i + 1, r):\n                        if board[k][j] == '#':\n                            break\n                        coll[k][j].append(cnt)\n                        cnt += 1\n                if board[i][j] == 'U':\n                    for k in range(i - 1, -1, -1):\n                        if board[k][j] == '#':\n                            break\n                        coll[k][j].append(cnt)\n                        cnt += 1\n                if board[i][j] == 'R':\n                    for k in range(j + 1, c):\n                        if board[i][k] == '#':\n                            break\n                        coll[i][k].append(cnt)\n                        cnt += 1\n                if board[i][j] == 'L':\n                    for k in range(j - 1, -1, -1):\n                        if board[i][k] == '#':\n                            break\n                        coll[i][k].append(cnt)\n                        cnt += 1\n    coll_cnt = 0\n    for i in range(r):\n        for j in range(c):\n            if len(coll[i][j]) > 1:\n                set_coll_i_j = set(coll[i][j])\n                cnt_dict = {}\n                for k in set_coll_i_j:\n                    cnt_dict[k] = 0\n                for k in coll[i][j]:\n                    cnt_dict[k] += 1\n                for k in cnt_dict.values():\n                    if k > 1:\n                        coll_cnt += int(nCr(k, 2))\n    print(coll_cnt)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        s = input()\n        arr.append(list(s))\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] != '#':\n                P = []\n                Q = []\n                R = []\n                S = []\n                r = i\n                c = j\n                d = 0\n                while c >= 0 and arr[r][c] != '#':\n                    if arr[r][c] == 'R':\n                        P.append(d)\n                    c = c - 1\n                    d += 1\n                r = i\n                c = j\n                d = 0\n                while c < m and arr[r][c] != '#':\n                    if arr[r][c] == 'L':\n                        Q.append(d)\n                    c = c + 1\n                    d += 1\n                r = i\n                c = j\n                d = 0\n                while r >= 0 and arr[r][c] != '#':\n                    if arr[r][c] == 'D':\n                        R.append(d)\n                    r = r - 1\n                    d += 1\n                r = i\n                c = j\n                d = 0\n                while r < n and arr[r][c] != '#':\n                    if arr[r][c] == 'U':\n                        S.append(d)\n                    r = r + 1\n                    d += 1\n                for e in P:\n                    if e in Q:\n                        ans += 1\n                for e in P:\n                    if e in R:\n                        ans += 1\n                for e in P:\n                    if e in S:\n                        ans += 1\n                for e in Q:\n                    if e in R:\n                        ans += 1\n                for e in Q:\n                    if e in S:\n                        ans += 1\n                for e in R:\n                    if e in S:\n                        ans += 1\n    print(ans)", "def get_matrix(r, c):\n    matrix = []\n    for i in range(r):\n        oneline = list(input())\n        matrix.append(oneline)\n    return matrix\n\ndef get_empty_matrix(r, c):\n    new_matrix = []\n    for i in range(r):\n        oneline = ['' for k in range(c)]\n        new_matrix.append(oneline)\n    return new_matrix\n\ndef rectify_newmat(new_matrix, r, c):\n    for i in range(r):\n        for j in range(c):\n            if len(new_matrix[i][j]) == 0:\n                new_matrix[i][j] = '-'\n    return new_matrix\n\ndef handle_one():\n    (r, c) = map(int, input().split())\n    matrix = get_matrix(r, c)\n    meetups = 0\n    max_movements = max(r, c)\n    for lol in range(max_movements):\n        new_matrix = get_empty_matrix(r, c)\n        for i in range(r):\n            for j in range(c):\n                for p in range(len(matrix[i][j])):\n                    if matrix[i][j][p] == '-':\n                        pass\n                    elif matrix[i][j][p] == 'U':\n                        if i != 0:\n                            new_matrix[i - 1][j] += 'U'\n                    elif matrix[i][j][p] == 'D':\n                        if i != r - 1:\n                            new_matrix[i + 1][j] += 'D'\n                    elif matrix[i][j][p] == 'R':\n                        if j != c - 1:\n                            new_matrix[i][j + 1] += 'R'\n                    elif matrix[i][j][p] == 'L':\n                        if j != 0:\n                            new_matrix[i][j - 1] += 'L'\n                    elif matrix[i][j][p] == '#':\n                        new_matrix[i][j] = '#'\n        new_matrix = rectify_newmat(new_matrix, r, c)\n        for i in range(r):\n            for j in range(c):\n                if '#' in new_matrix[i][j]:\n                    new_matrix[i][j] = '#'\n                elif len(new_matrix[i][j]) >= 2:\n                    n = len(new_matrix[i][j])\n                    added_meetups = n * (n - 1) // 2\n                    meetups += added_meetups\n        matrix = list(new_matrix)\n    print(meetups)\nT = int(input())\nfor ds in range(T):\n    handle_one()", "from bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nfrom math import *\nfrom decimal import *\nfrom copy import *\ngetcontext().prec = 30\nMAX = sys.maxsize\nMAXN = 10 ** 5 + 10\nMOD = 10 ** 9 + 7\n\ndef isprime(n):\n    n = abs(int(n))\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if not n & 1:\n        return False\n    for x in range(3, int(n ** 0.5) + 1, 2):\n        if n % x == 0:\n            return False\n    return True\n\ndef mhd(a, b):\n    return abs(a[0] - b[0]) + abs(b[1] - a[1])\n\ndef charIN(x=' '):\n    return sys.stdin.readline().strip().split(x)\n\ndef arrIN(x=' '):\n    return list(map(int, sys.stdin.readline().strip().split(x)))\n\ndef eld(x, y):\n    a = y[0] - x[0]\n    b = x[1] - y[1]\n    return (a * a + b * b) ** 0.5\n\ndef lgcd(a):\n    g = a[0]\n    for i in range(1, len(a)):\n        g = math.gcd(g, a[i])\n    return g\n\ndef ms(a):\n    msf = -MAX\n    meh = 0\n    st = en = be = 0\n    for i in range(len(a)):\n        meh += a[i]\n        if msf < meh:\n            msf = meh\n            st = be\n            en = i\n        if meh < 0:\n            meh = 0\n            be = i + 1\n    return (msf, st, en)\n\ndef flush():\n    return sys.stdout.flush()\n\ndef nc2(n):\n    return n * (n - 1) // 2\nfor _ in range(int(input())):\n    (r, c) = arrIN()\n    a = [[i for i in input().strip()] for _ in range(r)]\n    x = [[[0 for k in range(100)] for i in range(c)] for j in range(r)]\n    for i in range(r):\n        for j in range(c):\n            if a[i][j] == 'U':\n                q = 1\n                for k in range(i - 1, -1, -1):\n                    if a[k][j] == '#':\n                        break\n                    x[k][j][q] += 1\n                    q += 1\n            elif a[i][j] == 'D':\n                q = 1\n                for k in range(i + 1, r):\n                    if a[k][j] == '#':\n                        break\n                    x[k][j][q] += 1\n                    q += 1\n            elif a[i][j] == 'R':\n                q = 1\n                for k in range(j + 1, c):\n                    if a[i][k] == '#':\n                        break\n                    x[i][k][q] += 1\n                    q += 1\n            elif a[i][j] == 'L':\n                q = 1\n                for k in range(j - 1, -1, -1):\n                    if a[i][k] == '#':\n                        break\n                    x[i][k][q] += 1\n                    q += 1\n    ans = 0\n    for i in range(r):\n        for j in range(c):\n            for k in range(100):\n                ans += nc2(x[i][j][k])\n    print(ans)", "from collections import defaultdict\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for j in range(n):\n        a = list(input())\n        l.append(a)\n    values = [[defaultdict(int) for i in range(m)] for j in range(n)]\n    for j in range(n):\n        for k in range(m):\n            if l[j][k] == '-' or l[j][k] == '#':\n                continue\n            elif l[j][k] == 'R':\n                time = 1\n                for x in range(k, m):\n                    if l[j][x] == '#':\n                        break\n                    else:\n                        values[j][x][time] += 1\n                        time += 1\n            elif l[j][k] == 'L':\n                time = 1\n                for x in range(k, -1, -1):\n                    if l[j][x] == '#':\n                        break\n                    else:\n                        values[j][x][time] += 1\n                        time += 1\n            elif l[j][k] == 'D':\n                time = 1\n                for x in range(j, n):\n                    if l[x][k] == '#':\n                        break\n                    else:\n                        values[x][k][time] += 1\n                        time += 1\n            else:\n                time = 1\n                for x in range(j, -1, -1):\n                    if l[x][k] == '#':\n                        break\n                    else:\n                        values[x][k][time] += 1\n                        time += 1\n    total = 0\n    for j in range(n):\n        for k in range(m):\n            for x in values[j][k]:\n                value = values[j][k][x]\n                total += value * (value - 1) // 2\n    print(total)", "t = int(input())\nfor _ in range(t):\n    (r, c) = [int(i) for i in input().split()]\n    g = []\n    p = []\n    for _ in range(max(r, c)):\n        y = []\n        for _ in range(r):\n            y.append([0] * c)\n        p.append(y)\n    for _ in range(r):\n        l = input()\n        g.append(l)\n    for i in range(r):\n        for j in range(c):\n            if g[i][j] == 'U':\n                for k in range(1, i + 1):\n                    if g[i - k][j] == '#':\n                        break\n                    else:\n                        p[k][i - k][j] += 1\n            elif g[i][j] == 'R':\n                for k in range(j + 1, c):\n                    if g[i][k] == '#':\n                        break\n                    else:\n                        p[k - j][i][k] += 1\n            elif g[i][j] == 'D':\n                for k in range(i + 1, r):\n                    if g[k][j] == '#':\n                        break\n                    else:\n                        p[k - i][k][j] += 1\n            elif g[i][j] == 'L':\n                for k in range(1, j + 1):\n                    if g[i][j - k] == '#':\n                        break\n                    else:\n                        p[k][i][j - k] += 1\n    ans = 0\n    for i in range(max(r, c)):\n        for j in range(r):\n            for k in range(c):\n                ans += p[i][j][k] * (p[i][j][k] - 1) / 2\n    print(int(ans))", "t = int(input())\nfor i in range(0, t):\n    a = input()\n    a = list(map(int, a.split()))\n    r = a[0]\n    c = a[1]\n    grid = []\n    for j in range(0, r):\n        column = input()\n        row_list = []\n        for k in range(0, c):\n            row_list.append(column[k])\n        grid.append(row_list)\n    meet = 0\n    for j in range(0, r):\n        numR = 0\n        for k in range(0, c, 2):\n            if grid[j][k] == 'R':\n                numR += 1\n            if grid[j][k] == 'L':\n                meet += numR\n            if grid[j][k] == '#':\n                numR = 0\n            if k + 1 < c and grid[j][k + 1] == '#':\n                numR = 0\n        numR = 0\n        for k in range(1, c, 2):\n            if grid[j][k] == 'R':\n                numR += 1\n            if grid[j][k] == 'L':\n                meet += numR\n            if grid[j][k] == '#':\n                numR = 0\n            if k + 1 < c and grid[j][k + 1] == '#':\n                numR = 0\n    for j in range(0, c):\n        numD = 0\n        for k in range(0, r, 2):\n            if grid[k][j] == 'D':\n                numD += 1\n            if grid[k][j] == '#':\n                numD = 0\n            if grid[k][j] == 'U':\n                meet += numD\n            if k + 1 < r and grid[k + 1][j] == '#':\n                numD = 0\n        numD = 0\n        for k in range(1, r, 2):\n            if grid[k][j] == 'D':\n                numD += 1\n            if grid[k][j] == '#':\n                numD = 0\n            if grid[k][j] == 'U':\n                meet += numD\n            if k + 1 < r and grid[k + 1][j] == '#':\n                numD = 0\n    for row in range(0, r):\n        for col in range(0, c):\n            if grid[row][col] == 'U':\n                for k in range(1, row + 1):\n                    if grid[row - k][col] == '#':\n                        break\n                    if col - k >= 0 and grid[row - k][col - k] == 'R':\n                        eaten = False\n                        for l in range(col - k + 1, col):\n                            if grid[row - k][l] == '#':\n                                eaten = True\n                                break\n                        if not eaten:\n                            meet += 1\n                    if col + k < c and grid[row - k][col + k] == 'L':\n                        eaten = False\n                        for l in range(col + 1, col + k):\n                            if grid[row - k][l] == '#':\n                                eaten = True\n                                break\n                        if not eaten:\n                            meet += 1\n            if grid[row][col] == 'D':\n                for k in range(1, r - row):\n                    if grid[row + k][col] == '#':\n                        break\n                    if col - k >= 0 and grid[row + k][col - k] == 'R':\n                        eaten = False\n                        for l in range(col - k + 1, col):\n                            if grid[row + k][l] == '#':\n                                eaten = True\n                                break\n                        if not eaten:\n                            meet += 1\n                    if col + k < c and grid[row + k][col + k] == 'L':\n                        eaten = False\n                        for l in range(col + 1, col + k):\n                            if grid[row + k][l] == '#':\n                                eaten = True\n                                break\n                        if not eaten:\n                            meet += 1\n    print(meet)", "from collections import defaultdict\nfrom math import factorial\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    hash = defaultdict(int)\n    for i in range(n):\n        k = list(input())\n        l.append(k)\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            count = 0\n            if l[i][j] == 'R':\n                x = i\n                y = j\n                while y < m:\n                    if l[x][y] != '#':\n                        hash[count, x, y] += 1\n                    else:\n                        break\n                    count += 1\n                    y += 1\n            elif l[i][j] == 'L':\n                x = i\n                y = j\n                count = 0\n                while y >= 0:\n                    if l[x][y] != '#':\n                        hash[count, x, y] += 1\n                    else:\n                        break\n                    count += 1\n                    y -= 1\n            elif l[i][j] == 'U':\n                x = i\n                y = j\n                count = 0\n                while x >= 0:\n                    if l[x][y] != '#':\n                        hash[count, x, y] += 1\n                    else:\n                        break\n                    count += 1\n                    x -= 1\n            elif l[i][j] == 'D':\n                x = i\n                y = j\n                count = 0\n                while x < n:\n                    if l[x][y] != '#':\n                        hash[count, x, y] += 1\n                    else:\n                        break\n                    count += 1\n                    x += 1\n    for i in hash.keys():\n        z = hash[i]\n        if z > 1:\n            ans += factorial(z) // (factorial(z - 2) * factorial(2))\n    print(ans)", "for t in range(int(input())):\n    (r, c) = list(map(int, input().split()))\n    deadzone = [[0 for x in range(c)] for y in range(r)]\n    ants = []\n    for q in range(r):\n        s = input()\n        for w in range(len(s)):\n            if s[w] == '#':\n                deadzone[q][w] = 1\n            elif s[w] in ('U', 'D', 'L', 'R'):\n                ants.append([1, q, w, s[w]])\n    pairs = 0\n    x = 2\n    y = 1\n    for time in range(max(r, c)):\n        for a in ants:\n            if a[3] == 'U':\n                a[y] -= 1\n            elif a[3] == 'D':\n                a[y] += 1\n            elif a[3] == 'L':\n                a[x] -= 1\n            else:\n                a[x] += 1\n            if a[x] < 0 or a[x] >= c:\n                a[0] = 0\n            elif a[y] < 0 or a[y] >= r:\n                a[0] = 0\n            elif deadzone[a[y]][a[x]] == 1:\n                a[0] = 0\n        ants.sort(key=lambda val: (val[0], val[1], val[2]))\n        for i in range(len(ants)):\n            if ants[i][0] == 1:\n                break\n        ants = ants[i:]\n        if len(ants) == 0:\n            break\n        prev = [ants[0][1], ants[0][2]]\n        cur_num = 1\n        for a in ants[1:]:\n            if prev[0] == a[1] and prev[1] == a[2]:\n                cur_num += 1\n            else:\n                pairs += cur_num * (cur_num - 1) // 2\n                cur_num = 1\n                prev[0] = a[1]\n                prev[1] = a[2]\n        pairs += cur_num * (cur_num - 1) // 2\n    print(pairs)", "import math\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = [[[] for i in range(b)] for i in range(a)]\n    d = [input() for i in range(a)]\n    for i in range(a):\n        for j in range(b):\n            if d[i][j] == 'R':\n                k = 1\n                for m in range(j + 1, b):\n                    if d[i][m] != '#':\n                        c[i][m].append(k)\n                        k += 1\n                    else:\n                        break\n            elif d[i][j] == 'L':\n                k = 1\n                for m in range(j - 1, -1, -1):\n                    if d[i][m] != '#':\n                        c[i][m].append(k)\n                        k += 1\n                    else:\n                        break\n            elif d[i][j] == 'U':\n                k = 1\n                for m in range(i - 1, -1, -1):\n                    if d[m][j] != '#':\n                        c[m][j].append(k)\n                        k += 1\n                    else:\n                        break\n            elif d[i][j] == 'D':\n                k = 1\n                for m in range(i + 1, a):\n                    if d[m][j] != '#':\n                        c[m][j].append(k)\n                        k += 1\n                    else:\n                        break\n    ans = 0\n    for i in c:\n        if len(i) != 0:\n            for j in i:\n                k = set(j)\n                for ll in k:\n                    ff = j.count(ll)\n                    if ff > 1:\n                        ans += math.factorial(ff) // (2 * math.factorial(ff - 2))\n    print(ans)", "import sys\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for _ in range(n):\n        a.append(list(input()))\n    b = [[[0] * 50 for i in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            t = 0\n            if a[i][j] == 'U':\n                for k in range(i, -1, -1):\n                    if a[k][j] == '#':\n                        break\n                    b[k][j][t] += 1\n                    t += 1\n            elif a[i][j] == 'D':\n                for k in range(i, n):\n                    if a[k][j] == '#':\n                        break\n                    b[k][j][t] += 1\n                    t += 1\n            elif a[i][j] == 'R':\n                for k in range(j, m):\n                    if a[i][k] == '#':\n                        break\n                    b[i][k][t] += 1\n                    t += 1\n            elif a[i][j] == 'L':\n                for k in range(j, -1, -1):\n                    if a[i][k] == '#':\n                        break\n                    b[i][k][t] += 1\n                    t += 1\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != '#':\n                for k in range(50):\n                    ans += b[i][j][k] * (b[i][j][k] - 1) // 2\n    print(ans)", "M = 10 ** 9 + 7\nR = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    (r, c) = R()\n    L = []\n    for i in range(r):\n        L.append([j for j in input()])\n    p = 1\n    ans = 0\n    while p < max(r, c):\n        a = [[0 for i in range(c)] for j in range(r)]\n        for i in range(r):\n            for j in range(c):\n                if L[i][j] == '-' or L[i][j] == '#':\n                    continue\n                else:\n                    if L[i][j] == 'R':\n                        if j + p < c:\n                            if L[i][j + p] == '#':\n                                L[i][j] = '-'\n                            else:\n                                a[i][j + p] += 1\n                    elif L[i][j] == 'L':\n                        if j - p >= 0:\n                            if L[i][j - p] == '#':\n                                L[i][j] = '-'\n                            else:\n                                a[i][j - p] += 1\n                    if L[i][j] == 'U':\n                        if i - p >= 0:\n                            if L[i - p][j] == '#':\n                                L[i][j] = '-'\n                            else:\n                                a[i - p][j] += 1\n                    if L[i][j] == 'D':\n                        if i + p < r:\n                            if L[i + p][j] == '#':\n                                L[i][j] = '-'\n                            else:\n                                a[i + p][j] += 1\n        for i in range(r):\n            for j in range(c):\n                t1 = a[i][j]\n                ans += t1 * (t1 - 1) // 2\n        p += 1\n    print(ans)", "T = int(input())\n\ndef func(l):\n    count = 0\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            count += l[i][j].count('U') + l[i][j].count('D') + l[i][j].count('L') + l[i][j].count('R')\n            if count > 1:\n                return 1\n    return 0\nfor i in range(T):\n    (R, C) = map(int, input().split())\n    l = []\n    for j in range(R):\n        p = input()\n        l.append([])\n        for k in range(C):\n            if p[k] != '-':\n                l[j].append([p[k]])\n            else:\n                l[j].append([])\n    c = 0\n    while func(l):\n        l1 = []\n        for j in range(len(l)):\n            l1.append([])\n            for k in range(len(l[j])):\n                l1[j].append([])\n                for x in range(len(l[j][k])):\n                    l1[j][k].append(l[j][k][x])\n        for j in range(R):\n            for k in range(C):\n                f = 0\n                if '#' in l[j][k]:\n                    l[j][k] = ['#']\n                    continue\n                if 'U' in l[j][k]:\n                    f += 1\n                    if j - 1 >= 0:\n                        l1[j - 1][k].append('U*')\n                if 'D' in l[j][k]:\n                    f += 1\n                    if j + 1 <= R - 1:\n                        l1[j + 1][k].append('D*')\n                if 'L' in l[j][k]:\n                    f += 1\n                    if k - 1 >= 0:\n                        l1[j][k - 1].append('L*')\n                if 'R' in l[j][k]:\n                    f += 1\n                    if k + 1 <= C - 1:\n                        l1[j][k + 1].append('R*')\n                if f > 0:\n                    if '#' not in l[j][k]:\n                        c += f * (f - 1) // 2\n        l = []\n        for j in range(len(l1)):\n            l.append([])\n            for k in range(len(l1[j])):\n                l[j].append([])\n                for x in range(len(l1[j][k])):\n                    if l1[j][k][x] not in ['L', 'R', 'U', 'D']:\n                        l[j][k].append(l1[j][k][x][0])\n    print(c)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    d = dict()\n    for i in range(r):\n        for j in range(c):\n            d[i, j] = []\n    grid = []\n    for i in range(r):\n        x = input()\n        x = [j for j in x]\n        grid += [x]\n    for i in range(r):\n        for j in range(c):\n            if grid[i][j] == 'U':\n                k = i\n                time = 0\n                while k >= 0:\n                    if grid[k][j] == '#':\n                        break\n                    else:\n                        d[k, j] += [time]\n                    k -= 1\n                    time += 1\n            elif grid[i][j] == 'D':\n                k = i\n                time = 0\n                while k < r:\n                    if grid[k][j] == '#':\n                        break\n                    else:\n                        d[k, j] += [time]\n                    k += 1\n                    time += 1\n            elif grid[i][j] == 'R':\n                k = j\n                time = 0\n                while k < c:\n                    if grid[i][k] == '#':\n                        break\n                    else:\n                        d[i, k] += [time]\n                    k += 1\n                    time += 1\n            elif grid[i][j] == 'L':\n                k = j\n                time = 0\n                while k >= 0:\n                    if grid[i][k] == '#':\n                        break\n                    else:\n                        d[i, k] += [time]\n                    k -= 1\n                    time += 1\n    ans = 0\n    for i in d:\n        freq = dict(Counter(d[i]))\n        for j in freq:\n            if freq[j] > 1:\n                ans += freq[j] * (freq[j] - 1) // 2\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    ar = []\n    for i in range(n):\n        ar.append(input())\n    arr = []\n    cnt = []\n    for i in range(n):\n        a = []\n        b = []\n        for j in range(m):\n            a.append({0: 0})\n            b.append(0)\n        cnt.append(b)\n        arr.append(a)\n    for i in range(n):\n        for j in range(m):\n            if ar[i][j] == 'U':\n                c = 1\n                for k in range(i - 1, -1, -1):\n                    if ar[k][j] == '#':\n                        break\n                    if c in arr[k][j].keys():\n                        cnt[k][j] = cnt[k][j] - arr[k][j][c] * (arr[k][j][c] - 1) // 2\n                        arr[k][j][c] += int(1)\n                        cnt[k][j] = cnt[k][j] + arr[k][j][c] * (arr[k][j][c] - 1) // 2\n                    else:\n                        arr[k][j][c] = int(1)\n                    c = c + 1\n            elif ar[i][j] == 'D':\n                c = 1\n                for k in range(i + 1, n, 1):\n                    if ar[k][j] == '#':\n                        break\n                    if c in arr[k][j].keys():\n                        cnt[k][j] = cnt[k][j] - arr[k][j][c] * (arr[k][j][c] - 1) // 2\n                        arr[k][j][c] += int(1)\n                        cnt[k][j] = cnt[k][j] + arr[k][j][c] * (arr[k][j][c] - 1) // 2\n                    else:\n                        arr[k][j][c] = int(1)\n                    c = c + 1\n            elif ar[i][j] == 'L':\n                c = 1\n                for k in range(j - 1, -1, -1):\n                    if ar[i][k] == '#':\n                        break\n                    if c in arr[i][k].keys():\n                        cnt[i][k] = cnt[i][k] - arr[i][k][c] * (arr[i][k][c] - 1) // 2\n                        arr[i][k][c] += int(1)\n                        cnt[i][k] = cnt[i][k] + arr[i][k][c] * (arr[i][k][c] - 1) // 2\n                    else:\n                        arr[i][k][c] = int(1)\n                    c = c + 1\n            elif ar[i][j] == 'R':\n                c = 1\n                for k in range(j + 1, m, 1):\n                    if ar[i][k] == '#':\n                        break\n                    if c in arr[i][k].keys():\n                        cnt[i][k] = cnt[i][k] - arr[i][k][c] * (arr[i][k][c] - 1) // 2\n                        arr[i][k][c] += int(1)\n                        cnt[i][k] = cnt[i][k] + arr[i][k][c] * (arr[i][k][c] - 1) // 2\n                    else:\n                        arr[i][k][c] = int(1)\n                    c = c + 1\n    c = 0\n    for i in range(n):\n        for j in range(m):\n            c = c + cnt[i][j]\n    print(c)", "n = int(input())\nfor x in range(n):\n    ant_eater = {}\n    arr = []\n    sam = {}\n    (a, b) = list(map(int, input().split()))\n    for y in range(a):\n        kam = input()\n        arr.append(kam)\n    row = 0\n    for item in arr:\n        for z in range(b):\n            if item[z] == '#':\n                lam = str(row) + ' ' + str(z)\n                ant_eater[lam] = '#'\n            else:\n                pass\n        row += 1\n    row = 0\n    count = 0\n    for item in arr:\n        for z in range(b):\n            step = 0\n            if item[z] == 'U':\n                jim = row\n                while 6 == 6:\n                    if jim < 0:\n                        break\n                    lam = str(jim) + ' ' + str(z)\n                    if lam in ant_eater:\n                        break\n                    else:\n                        ham = str(jim) + ' ' + str(z) + ' ' + str(step)\n                        if ham in sam:\n                            sam[ham] += 1\n                        else:\n                            sam[ham] = 1\n                    jim -= 1\n                    step += 1\n            elif item[z] == 'D':\n                jim = row\n                while 6 == 6:\n                    if jim > a - 1:\n                        break\n                    lam = str(jim) + ' ' + str(z)\n                    if lam in ant_eater:\n                        break\n                    else:\n                        ham = str(jim) + ' ' + str(z) + ' ' + str(step)\n                        if ham in sam:\n                            sam[ham] += 1\n                        else:\n                            sam[ham] = 1\n                    jim += 1\n                    step += 1\n            if item[z] == 'L':\n                jim = z\n                while 6 == 6:\n                    if jim < 0:\n                        break\n                    lam = str(row) + ' ' + str(jim)\n                    if lam in ant_eater:\n                        break\n                    else:\n                        ham = str(row) + ' ' + str(jim) + ' ' + str(step)\n                        if ham in sam:\n                            sam[ham] += 1\n                        else:\n                            sam[ham] = 1\n                    jim -= 1\n                    step += 1\n            if item[z] == 'R':\n                jim = z\n                while 6 == 6:\n                    if jim > b - 1:\n                        break\n                    lam = str(row) + ' ' + str(jim)\n                    if lam in ant_eater:\n                        break\n                    else:\n                        ham = str(row) + ' ' + str(jim) + ' ' + str(step)\n                        if ham in sam:\n                            sam[ham] += 1\n                        else:\n                            sam[ham] = 1\n                    jim += 1\n                    step += 1\n        row += 1\n    count = 0\n    for item in sam:\n        if sam[item] > 1:\n            kk = sam[item] - 1\n            count += int(kk * (kk + 1) // 2)\n    print(count)", "from collections import deque, defaultdict\nt = int(input())\n\ndef f(n, k):\n    if k > n - k:\n        k = n - k\n    res = 1\n    for i in range(k):\n        res = res * (n - i)\n        res = res / (i + 1)\n    return int(res)\nfor _ in range(t):\n    (R, C) = map(int, input().strip().split())\n    arr = []\n    ants = deque([])\n    pos = defaultdict(lambda : 0)\n    for i in range(R):\n        s = input().strip()\n        S = []\n        for j in range(C):\n            S.append(s[j])\n            if s[j].isalpha():\n                ants.append((i, j, s[j], 0))\n        arr.append(S)\n    pairs = 0\n    ptime = 0\n    ppp = set()\n    while ants != deque([]):\n        (i, j, d, t) = ants.popleft()\n        if t == ptime + 1:\n            ptime = t\n            for p in ppp:\n                pairs += f(pos[p], 2)\n            pos.clear()\n            ppp.clear()\n        if d == 'U':\n            if i == 0:\n                pass\n            elif arr[i - 1][j] == '#':\n                pass\n            else:\n                pos[i - 1, j] += 1\n                ants.append((i - 1, j, 'U', t + 1))\n                if pos[i - 1, j] % 2 == 0:\n                    ppp.add((i - 1, j))\n        elif d == 'D':\n            if i == R - 1:\n                pass\n            elif arr[i + 1][j] == '#':\n                pass\n            else:\n                pos[i + 1, j] += 1\n                ants.append((i + 1, j, 'D', t + 1))\n                if pos[i + 1, j] % 2 == 0:\n                    ppp.add((i + 1, j))\n        elif d == 'R':\n            if j == C - 1:\n                pass\n            elif arr[i][j + 1] == '#':\n                pass\n            else:\n                pos[i, j + 1] += 1\n                ants.append((i, j + 1, 'R', t + 1))\n                if pos[i, j + 1] % 2 == 0:\n                    ppp.add((i, j + 1))\n        elif j == 0:\n            pass\n        elif arr[i][j - 1] == '#':\n            pass\n        else:\n            pos[i, j - 1] += 1\n            ants.append((i, j - 1, 'L', t + 1))\n            if pos[i, j - 1] % 2 == 0:\n                ppp.add((i, j - 1))\n    print(pairs)", "import sys\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = []\n    for i in range(n):\n        s.append(input())\n    ans = []\n    for i in range(n):\n        ans.append([])\n        for j in range(m):\n            ans[i].append([])\n    for i in range(n):\n        for j in range(m):\n            c = 0\n            if s[i][j] == 'U':\n                for k in range(i, -1, -1):\n                    if s[k][j] == '#':\n                        break\n                    ans[k][j].append(c)\n                    c += 1\n            elif s[i][j] == 'D':\n                for k in range(i, n):\n                    if s[k][j] == '#':\n                        break\n                    ans[k][j].append(c)\n                    c += 1\n            elif s[i][j] == 'L':\n                for k in range(j, -1, -1):\n                    if s[i][k] == '#':\n                        break\n                    ans[i][k].append(c)\n                    c += 1\n            elif s[i][j] == 'R':\n                for k in range(j, m):\n                    if s[i][k] == '#':\n                        break\n                    ans[i][k].append(c)\n                    c += 1\n    for i in range(n):\n        for j in range(m):\n            ans[i][j].sort()\n    res = []\n    for i in range(n):\n        for j in range(m):\n            c = 1\n            for k in range(1, len(ans[i][j])):\n                if ans[i][j][k] == ans[i][j][k - 1]:\n                    c += 1\n                else:\n                    if c != 1:\n                        res.append(c)\n                    c = 1\n                if k == len(ans[i][j]) - 1:\n                    if c != 1:\n                        res.append(c)\n    pairs = 0\n    for i in range(len(res)):\n        pairs += res[i] * (res[i] - 1) // 2\n    print(pairs)", "t = int(input())\nfor numtest in range(1, t + 1):\n    (n, m) = [int(k) for k in input().strip().split(' ')]\n    g = []\n    ants = []\n    dd = {'U': (-1, 0), 'D': (1, 0), 'L': (0, -1), 'R': (0, 1)}\n    anteaters = set()\n    for i in range(n):\n        g += [input().strip()]\n        for j in range(m):\n            if g[i][j] in 'UDLR':\n                ants += [(i, j, dd[g[i][j]])]\n            if g[i][j] == '#':\n                anteaters.add((i, j))\n    nbm = 0\n    while len(ants):\n        nants = []\n        nc = {}\n        for k in ants:\n            nk = (k[0] + k[2][0], k[1] + k[2][1])\n            if nk not in anteaters and min(nk[0], nk[1]) >= 0 and (nk[0] < n) and (nk[1] < m):\n                nants += [(nk[0], nk[1], k[2])]\n                if nk not in nc:\n                    nc[nk] = 1\n                else:\n                    nc[nk] += 1\n        ants = nants\n        for (i, k) in nc.items():\n            nbm += k * (k - 1) // 2\n    print(nbm)", "from collections import Counter\n\ndef binomialCoef(n, k):\n    C = [[0 for x in range(k + 1)] for x in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(min(i, k) + 1):\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = C[i - 1][j - 1] + C[i - 1][j]\n    return C[n][k]\nfor _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    d = dict()\n    grid = [None] * r\n    for i in range(r):\n        grid[i] = input()\n    for i in range(r):\n        for j in range(c):\n            if grid[i][j] == 'U':\n                kk = i\n                sec = 0\n                while kk >= 0:\n                    if grid[kk][j] == '#':\n                        break\n                    try:\n                        d['r' + str(kk) + 'c' + str(j)].append(sec)\n                    except:\n                        d['r' + str(kk) + 'c' + str(j)] = [sec]\n                    sec += 1\n                    kk -= 1\n            if grid[i][j] == 'D':\n                kk = i\n                sec = 0\n                while kk < r:\n                    if grid[kk][j] == '#':\n                        break\n                    try:\n                        d['r' + str(kk) + 'c' + str(j)].append(sec)\n                    except:\n                        d['r' + str(kk) + 'c' + str(j)] = [sec]\n                    sec += 1\n                    kk += 1\n            if grid[i][j] == 'R':\n                kk = j\n                sec = 0\n                while kk < c:\n                    if grid[i][kk] == '#':\n                        break\n                    try:\n                        d['r' + str(i) + 'c' + str(kk)].append(sec)\n                    except:\n                        d['r' + str(i) + 'c' + str(kk)] = [sec]\n                    sec += 1\n                    kk += 1\n            if grid[i][j] == 'L':\n                kk = j\n                sec = 0\n                while kk >= 0:\n                    if grid[i][kk] == '#':\n                        break\n                    try:\n                        d['r' + str(i) + 'c' + str(kk)].append(sec)\n                    except:\n                        d['r' + str(i) + 'c' + str(kk)] = [sec]\n                    sec += 1\n                    kk -= 1\n    ans = 0\n    for i in d.values():\n        f = dict(Counter(i))\n        for j in f.values():\n            ans += binomialCoef(j, 2)\n    print(ans)", "def func(grid, r, c):\n    count = 0\n    flag = 0\n    for i in range(r):\n        for j in range(c):\n            if '#' in grid[i][j][0]:\n                grid[i][j][0] = '#'\n            else:\n                l = len(grid[i][j][0])\n                count += l * (l - 1) // 2\n                x = grid[i][j][0]\n                for k in x:\n                    flag = 1\n                    if k == 'U':\n                        if i > 0:\n                            grid[i - 1][j][1].append('U')\n                    if k == 'D':\n                        if i < r - 1:\n                            grid[i + 1][j][1].append('D')\n                    if k == 'L':\n                        if j > 0:\n                            grid[i][j - 1][1].append('L')\n                    if k == 'R':\n                        if j < c - 1:\n                            grid[i][j + 1][1].append('R')\n    for i in range(r):\n        for j in range(c):\n            if grid[i][j][0] != '#':\n                grid[i][j][0] = grid[i][j][1]\n                grid[i][j][1] = []\n    if flag == 0:\n        return count\n    else:\n        return count + func(grid, r, c)\nt = int(input())\nfor i in range(t):\n    a = [int(i) for i in input().split()]\n    r = a[0]\n    c = a[1]\n    arr = [str(input()) for i in range(r)]\n    grid = [[[[j], []] for j in arr[i]] for i in range(r)]\n    print(func(grid, r, c))", "from collections import defaultdict as df\nt = int(input())\nfor x in range(t):\n    (r, c) = list(map(int, input().split()))\n    p = df(list)\n    a = [[0] * c for i in range(r)]\n    for i in range(r):\n        s = input().rstrip()\n        for j in range(c):\n            a[i][j] = s[j]\n    for i in range(r):\n        for j in range(c):\n            timer = 0\n            if a[i][j] == 'U':\n                for k in range(i - 1, -1, -1):\n                    if a[k][j] != '#':\n                        timer += 1\n                        p[str(k) + ' ' + str(j)].append(timer)\n                    else:\n                        break\n            if a[i][j] == 'R':\n                for k in range(j + 1, c):\n                    if a[i][k] != '#':\n                        timer += 1\n                        p[str(i) + ' ' + str(k)].append(timer)\n                    else:\n                        break\n            if a[i][j] == 'D':\n                for k in range(i + 1, r):\n                    if a[k][j] != '#':\n                        timer += 1\n                        p[str(k) + ' ' + str(j)].append(timer)\n                    else:\n                        break\n            if a[i][j] == 'L':\n                for k in range(j - 1, -1, -1):\n                    if a[i][k] != '#':\n                        timer += 1\n                        p[str(i) + ' ' + str(k)].append(timer)\n                    else:\n                        break\n    total = 0\n    for i in p:\n        y = set(p[i])\n        for j in y:\n            if p[i].count(j) > 1:\n                n1 = p[i].count(j)\n                total += n1 * (n1 - 1) // 2\n    print(total)", "def kk(L):\n    c = 1\n    ans = 0\n    dp = []\n    for i in range(1, len(L)):\n        if L[i] != L[i - 1]:\n            dp.append(c)\n            c = 1\n        else:\n            c += 1\n    dp.append(c)\n    for i in range(0, len(dp)):\n        ans += dp[i] * (dp[i] - 1) // 2\n    return ans\nT = int(input())\nfor i in range(0, T):\n    (R, C) = map(int, input().split())\n    arr = []\n    for j in range(R):\n        s = input()\n        arr.append(s)\n    ans = []\n    for j in range(R):\n        h = []\n        for k in range(C):\n            g = []\n            h.append(g)\n        ans.append(h)\n    c = 0\n    for j in range(R):\n        for k in range(C):\n            if arr[j][k] != '#' and arr[j][k] != '-':\n                c += 1\n                d = arr[j][k]\n                if d == 'R':\n                    ptr1 = j\n                    ptr2 = k\n                    cnt = 0\n                    while ptr1 >= 0 and ptr1 < R and (ptr2 >= 0) and (ptr2 < C):\n                        if ptr1 >= 0 and ptr1 < R and (ptr2 >= 0) and (ptr2 < C) and (arr[ptr1][ptr2] != '#'):\n                            ans[ptr1][ptr2].append(cnt)\n                        else:\n                            break\n                        cnt += 1\n                        ptr2 += 1\n                elif d == 'L':\n                    ptr1 = j\n                    ptr2 = k\n                    cnt = 0\n                    while ptr1 >= 0 and ptr1 < R and (ptr2 >= 0) and (ptr2 < C):\n                        if ptr1 >= 0 and ptr1 < R and (ptr2 >= 0) and (ptr2 < C) and (arr[ptr1][ptr2] != '#'):\n                            ans[ptr1][ptr2].append(cnt)\n                        else:\n                            break\n                        cnt += 1\n                        ptr2 -= 1\n                elif d == 'D':\n                    ptr1 = j\n                    ptr2 = k\n                    cnt = 0\n                    while ptr1 >= 0 and ptr1 < R and (ptr2 >= 0) and (ptr2 < C):\n                        if ptr1 >= 0 and ptr1 < R and (ptr2 >= 0) and (ptr2 < C) and (arr[ptr1][ptr2] != '#'):\n                            ans[ptr1][ptr2].append(cnt)\n                        else:\n                            break\n                        cnt += 1\n                        ptr1 += 1\n                elif d == 'U':\n                    ptr1 = j\n                    ptr2 = k\n                    cnt = 0\n                    while ptr1 >= 0 and ptr1 < R and (ptr2 >= 0) and (ptr2 < C):\n                        if ptr1 >= 0 and ptr1 < R and (ptr2 >= 0) and (ptr2 < C) and (arr[ptr1][ptr2] != '#'):\n                            ans[ptr1][ptr2].append(cnt)\n                        else:\n                            break\n                        cnt += 1\n                        ptr1 -= 1\n    fnl = 0\n    for j in range(R):\n        for k in range(C):\n            p = ans[j][k]\n            ans[j][k] = sorted(ans[j][k])\n    for j in range(R):\n        for k in range(C):\n            p = ans[j][k]\n            fnl += kk(p)\n    print(fnl)"]