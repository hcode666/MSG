["info = [int(j) for j in input().split()]\ndepth = info[0]\nn = info[1]\nimport math\nlevel = depth + 1\nroot = 1\nleef = int(math.pow(2, depth)) % 1000000007\nedge = int(math.pow(2, level)) % 1000000007 - 2\nfor i in range(n):\n    l = [int(j) for j in input().split()]\n    if len(l) == 2:\n        edge *= 2\n        if l[1] <= 2:\n            edge = (edge + level) % 1000000007\n            root = root * 2 % 1000000007\n            leef = leef * 2 % 1000000007\n        elif l[1] == 3:\n            edge = (edge + root) % 1000000007\n            root = leef\n            level = level * 2 % 1000000007\n        else:\n            edge = (edge + leef) % 1000000007\n            leef = root\n            level = level * 2 % 1000000007\n    else:\n        print(edge % 1000000007)", "info = [int(j) for j in input().split()]\ndepth = info[0]\nn = info[1]\nimport math\nlevel = depth + 1\nroot = 1\nleef = int(math.pow(2, depth)) % 1000000007\nedge = int(math.pow(2, level)) % 1000000007 - 2\nfor i in range(n):\n    l = [int(j) for j in input().split()]\n    if len(l) == 2:\n        edge *= 2\n        if l[1] <= 2:\n            edge = (edge + level) % 1000000007\n            root = root * 2 % 1000000007\n            leef = leef * 2 % 1000000007\n        elif l[1] == 3:\n            edge = (edge + root) % 1000000007\n            root = leef\n            level = level * 2 % 1000000007\n        else:\n            edge = (edge + leef) % 1000000007\n            leef = root\n            level = level * 2 % 1000000007\n    else:\n        print(edge % 1000000007)", "info = [int(j) for j in input().split()]\ndepth = info[0]\nn = info[1]\nimport math\nlevel = depth + 1\nroot = 1\nleef = int(math.pow(2, depth)) % 1000000007\nedge = int(math.pow(2, level)) % 1000000007 - 2\nfor i in range(n):\n    l = [int(j) for j in input().split()]\n    if len(l) == 2:\n        edge *= 2\n        if l[1] <= 2:\n            edge = (edge + level) % 1000000007\n            root = root * 2 % 1000000007\n            leef = leef * 2 % 1000000007\n        elif l[1] == 3:\n            edge = (edge + root) % 1000000007\n            root = leef\n            level = level * 2 % 1000000007\n        else:\n            edge = (edge + leef) % 1000000007\n            leef = root\n            level = level * 2 % 1000000007\n    else:\n        print(edge % 1000000007)", "(n, q) = list(map(int, input().split(' ')))\nans = 1000000007\nleaves = 2 ** n\nedges = (2 ** (n + 1) - 2) % ans\nheight = n + 1\nop = []\nroot = 1\nfor i in range(q):\n    s = str(input())\n    if s[0] == '2':\n        op.append('disp')\n    else:\n        k = list(map(int, s.split()))\n        op.append(k[1])\nfor j in op:\n    if j == 'disp':\n        print(edges)\n    elif j == 1 or j == 2:\n        edges = (2 * edges + height) % ans\n        leaves = 2 * leaves % ans\n        root = root * 2 % ans\n    elif j == 4:\n        edges = (2 * edges + leaves) % ans\n        leaves = root\n        height = 2 * height % ans\n    else:\n        edges = (2 * edges + root) % ans\n        root = leaves\n        height = 2 * height % ans", "(n, q) = list(map(int, input().split(' ')))\nans = 1000000007\nleaves = 2 ** n\nedges = (2 ** (n + 1) - 2) % ans\nheight = n + 1\nop = []\nroot = 1\nfor i in range(q):\n    s = str(input())\n    if s[0] == '2':\n        op.append('disp')\n    else:\n        k = list(map(int, s.split()))\n        op.append(k[1])\nfor j in op:\n    if j == 'disp':\n        print(edges)\n    elif j == 1 or j == 2:\n        edges = (2 * edges + height) % ans\n        leaves = 2 * leaves % ans\n        root = root * 2 % ans\n    elif j == 4:\n        edges = (2 * edges + leaves) % ans\n        leaves = root\n        height = 2 * height % ans\n    else:\n        edges = (2 * edges + root) % ans\n        root = leaves\n        height = 2 * height % ans", "import sys\n(n, q) = list(map(int, input().strip().split(' ')))\nans = 1000000007\nleaves = 2 ** n\nedges = (2 ** (n + 1) - 2) % ans\nheight = n + 1\nop = []\nroot = 1\nfor i in range(q):\n    s = str(input().strip())\n    if s[0] == '2':\n        op.append('disp')\n    else:\n        k = list(map(int, s.split()))\n        op.append(k[1])\nfor j in op:\n    if j == 'disp':\n        print(edges)\n    elif j == 1 or j == 2:\n        edges = (2 * edges + height) % ans\n        leaves = 2 * leaves % ans\n        root = root * 2 % ans\n    elif j == 4:\n        edges = (2 * edges + leaves) % ans\n        leaves = root\n        height = 2 * height % ans\n    else:\n        edges = (2 * edges + root) % ans\n        root = leaves\n        height = 2 * height % ans", "from sys import *\n(n, q) = list(map(int, input().strip().split(' ')))\nans = 1000000007\nleaves = 2 ** n\nedges = (2 ** (n + 1) - 2) % ans\nheight = n + 1\nop = []\nroot = 1\nfor i in range(q):\n    s = str(input().strip())\n    if s[0] == '2':\n        op.append('disp')\n    else:\n        k = list(map(int, s.split()))\n        op.append(k[1])\nfor j in op:\n    if j == 'disp':\n        print(edges)\n    elif j == 1 or j == 2:\n        edges = (2 * edges + height) % ans\n        leaves = 2 * leaves % ans\n        root = root * 2 % ans\n    elif j == 4:\n        edges = (2 * edges + leaves) % ans\n        leaves = root\n        height = 2 * height % ans\n    else:\n        edges = (2 * edges + root) % ans\n        root = leaves\n        height = 2 * height % ans", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nif 1:\n    (n, q) = lisin()\n    eds = n + 1\n    edt = 1\n    edb = 2 ** n\n    edtot = 2 * (edb - 1)\n    for qq in range(q):\n        x = input().split()\n        if len(x) == 2:\n            if x[1] == '1' or x[1] == '2':\n                edtot *= 2\n                edtot += eds\n                edt *= 2\n                edb *= 2\n            elif x[1] == '3':\n                edtot *= 2\n                edtot += edt\n                edt = edb\n                eds *= 2\n            else:\n                edtot *= 2\n                edtot += edb\n                edb = edt\n                eds *= 2\n        else:\n            print(edtot % 1000000007)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nif 1:\n    (n, q) = lisin()\n    eds = n + 1\n    edt = 1\n    edb = 2 ** n\n    edtot = 2 * (edb - 1)\n    for qq in range(q):\n        x = input().split()\n        if len(x) == 2:\n            if x[1] == '1' or x[1] == '2':\n                edtot *= 2\n                edtot += eds\n                edt *= 2\n                edb *= 2\n            elif x[1] == '3':\n                edtot *= 2\n                edtot += edt\n                edt = edb\n                eds *= 2\n            else:\n                edtot *= 2\n                edtot += edb\n                edb = edt\n                eds *= 2\n        else:\n            print(edtot % 1000000007)", "import os, sys\nfrom io import BytesIO, IOBase\n\ndef ii():\n    return int(input())\n\ndef si():\n    return input()\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\nimport math\nimport collections\n\ndef CountFrequency(arr):\n    return collections.Counter(arr)\nfor i in range(1):\n    (n, q) = mi()\n    p = pow(2, n + 1) - 2\n    t = 1\n    b = pow(2, n)\n    s = n + 1\n    for i in range(q):\n        a = li()\n        if len(a) == 2:\n            if a[1] == 1 or a[1] == 2:\n                p *= 2\n                p += s\n                t *= 2\n                b *= 2\n            else:\n                p *= 2\n                if a[1] == 3:\n                    p += t\n                    t = b\n                    s *= 2\n                else:\n                    p += b\n                    b = t\n                    s *= 2\n        else:\n            print(p % 1000000007)", "import os, sys\nfrom io import BytesIO, IOBase\n\ndef ii():\n    return int(input())\n\ndef si():\n    return input()\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\nimport math\nimport collections\n\ndef CountFrequency(arr):\n    return collections.Counter(arr)\nfor i in range(1):\n    (n, q) = mi()\n    p = pow(2, n + 1) - 2\n    t = 1\n    b = pow(2, n)\n    s = n + 1\n    for i in range(q):\n        a = li()\n        if len(a) == 2:\n            if a[1] == 1 or a[1] == 2:\n                p *= 2\n                p += s\n                t *= 2\n                b *= 2\n            else:\n                p *= 2\n                if a[1] == 3:\n                    p += t\n                    t = b\n                    s *= 2\n                else:\n                    p += b\n                    b = t\n                    s *= 2\n        else:\n            print(p % 1000000007)", "(n, q) = map(int, input().split())\nedges = 2 * (2 ** n - 1)\nside_nodes = n + 1\ntop_nodes = 1\nbottom_nodes = 2 ** n\nfor i in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        if query[1] == 1 or query[1] == 2:\n            edges = edges * 2 + side_nodes\n            top_nodes *= 2\n            bottom_nodes *= 2\n        elif query[1] == 3:\n            edges = edges * 2 + top_nodes\n            top_nodes = bottom_nodes\n            side_nodes *= 2\n        else:\n            edges = edges * 2 + bottom_nodes\n            bottom_nodes = top_nodes\n            side_nodes *= 2\n    else:\n        print(edges % 1000000007)", "MOD = 1000000007\n(levels, q) = input().split()\nlevels = int(levels)\nq = int(q)\nleft = levels + 1\nright = levels + 1\ntop = 1\nbottom = pow(2, levels)\nedges = 0\nf = 1\nfor i in range(1, levels + 1):\n    f = 2 % MOD * (f % MOD) % MOD\n    edges += f\nlevels += 1\nfor i in range(1, q + 1):\n    l1 = list(map(int, input().split()))\n    if l1[0] == 1:\n        y = l1[1]\n        if y == 1:\n            edges = edges % MOD * (2 % MOD) % MOD\n            edges = (edges % MOD + levels % MOD) % MOD\n            top = top % MOD * (2 % MOD) % MOD\n            bottom = bottom % MOD * (2 % MOD) % MOD\n        elif y == 2:\n            edges = edges % MOD * (2 % MOD) % MOD\n            edges = (edges % MOD + levels % MOD) % MOD\n            top = top % MOD * (2 % MOD) % MOD\n            bottom = bottom % MOD * (2 % MOD) % MOD\n        elif y == 3:\n            edges = edges % MOD * (2 % MOD) % MOD\n            edges = (edges % MOD + top % MOD) % MOD\n            top = bottom\n            levels = levels % MOD * (2 % MOD)\n        elif y == 4:\n            edges = edges % MOD * (2 % MOD) % MOD\n            edges = (edges % MOD + bottom % MOD) % MOD\n            bottom = top\n            levels = levels % MOD * (2 % MOD)\n    elif l1[0] == 2:\n        print(edges % MOD)", "MOD = 1000000007\n(levels, q) = input().split()\nlevels = int(levels)\nq = int(q)\nleft = levels + 1\nright = levels + 1\ntop = 1\nbottom = pow(2, levels)\nedges = 0\nf = 1\nfor i in range(1, levels + 1):\n    f = 2 % MOD * (f % MOD) % MOD\n    edges += f\nlevels += 1\nfor i in range(1, q + 1):\n    l1 = list(map(int, input().split()))\n    if l1[0] == 1:\n        y = l1[1]\n        if y == 1:\n            edges = edges % MOD * (2 % MOD) % MOD\n            edges = (edges % MOD + levels % MOD) % MOD\n            top = top % MOD * (2 % MOD) % MOD\n            bottom = bottom % MOD * (2 % MOD) % MOD\n        elif y == 2:\n            edges = edges % MOD * (2 % MOD) % MOD\n            edges = (edges % MOD + levels % MOD) % MOD\n            top = top % MOD * (2 % MOD) % MOD\n            bottom = bottom % MOD * (2 % MOD) % MOD\n        elif y == 3:\n            edges = edges % MOD * (2 % MOD) % MOD\n            edges = (edges % MOD + top % MOD) % MOD\n            top = bottom\n            levels = levels % MOD * (2 % MOD)\n        elif y == 4:\n            edges = edges % MOD * (2 % MOD) % MOD\n            edges = (edges % MOD + bottom % MOD) % MOD\n            bottom = top\n            levels = levels % MOD * (2 % MOD)\n    elif l1[0] == 2:\n        print(edges % MOD)", "(n, q) = map(int, input().split())\ntop = 1\nbottom = 2 ** n\ndepth = n + 1\nedges = 2 ** (n + 1) - 2\nfor _ in range(q):\n    x = list(map(int, input().split()))\n    if x[0] == 2:\n        print(edges % (10 ** 9 + 7))\n    else:\n        t = x[1]\n        edges *= 2\n        if t == 1 or t == 2:\n            top *= 2\n            bottom *= 2\n            edges += depth\n        if t == 3:\n            depth *= 2\n            edges += top\n            top = bottom\n        if t == 4:\n            depth *= 2\n            edges += bottom\n            bottom = top", "MOD = 1000000007\n(levels, q) = input().split()\nlevels = int(levels)\nq = int(q)\nleft = levels + 1\nright = levels + 1\ntop = 1\nbottom = pow(2, levels)\nedges = 0\nf = 1\nfor i in range(1, levels + 1):\n    f = 2 % MOD * (f % MOD) % MOD\n    edges += f\nlevels += 1\nfor i in range(1, q + 1):\n    l1 = list(map(int, input().split()))\n    if l1[0] == 1:\n        y = l1[1]\n        if y == 1:\n            edges = edges % MOD * (2 % MOD) % MOD\n            edges = (edges % MOD + levels % MOD) % MOD\n            top = top % MOD * (2 % MOD) % MOD\n            bottom = bottom % MOD * (2 % MOD) % MOD\n        elif y == 2:\n            edges = edges % MOD * (2 % MOD) % MOD\n            edges = (edges % MOD + levels % MOD) % MOD\n            top = top % MOD * (2 % MOD) % MOD\n            bottom = bottom % MOD * (2 % MOD) % MOD\n        elif y == 3:\n            edges = edges % MOD * (2 % MOD) % MOD\n            edges = (edges % MOD + top % MOD) % MOD\n            top = bottom\n            levels = levels % MOD * (2 % MOD)\n        elif y == 4:\n            edges = edges % MOD * (2 % MOD) % MOD\n            edges = (edges % MOD + bottom % MOD) % MOD\n            bottom = top\n            levels = levels % MOD * (2 % MOD)\n    elif l1[0] == 2:\n        print(edges % MOD)", "(n, q) = input().split()\nn = int(n)\nq = int(q)\nr = n + 1\nl = n + 1\nb = 2 ** n\nt = 1\nedge = 0\nMOD = 1000000007\nfor i in range(1, n + 1):\n    edge += 2 ** i\nfor i in range(q):\n    l1 = list(map(int, input().split()))\n    if l1[0] == 1:\n        if l1[1] == 1:\n            edge = (edge % MOD * 2 + r) % MOD\n            r = r % MOD\n            l = l % MOD\n            b = 2 * (b % MOD)\n            t = 2 * (t % MOD)\n        elif l1[1] == 2:\n            edge = (edge % MOD * 2 + l) % MOD\n            r = r % MOD\n            l = l % MOD\n            b = 2 * (b % MOD)\n            t = 2 * (t % MOD)\n        elif l1[1] == 3:\n            edge = (edge % MOD * 2 + t) % MOD\n            t = b % MOD\n            b = b % MOD\n            r = 2 * (r % MOD)\n            l = 2 * (l % MOD)\n        elif l1[1] == 4:\n            edge = (edge % MOD * 2 + b) % MOD\n            b = t % MOD\n            t = t % MOD\n            r = 2 * (r % MOD)\n            l = 2 * (l % MOD)\n    else:\n        print(edge % MOD)", "def mirror_down(e, r, l, u, d):\n    edge = 2 * e + d\n    right = r * 2\n    left = l * 2\n    up = u\n    down = u\n    return [edge, right, left, up, down]\n\ndef mirror_up(e, r, l, u, d):\n    edge = 2 * e + u\n    right = r * 2\n    left = l * 2\n    up = d\n    down = d\n    return [edge, right, left, up, down]\n\ndef mirror_left(e, r, l, u, d):\n    edge = 2 * e + l\n    right = r\n    left = l\n    up = u * 2\n    down = d * 2\n    return [edge, right, left, up, down]\n\ndef mirror_right(e, r, l, u, d):\n    edge = 2 * e + r\n    right = r\n    left = l\n    up = u * 2\n    down = d * 2\n    return [edge, right, left, up, down]\ns = input('').split(' ')\n(n, q) = (int(s[0]), int(s[1]))\ne = 2 ** (n + 1) - 2\nl = n + 1\nr = n + 1\nu = 1\nd = 2 ** n\nwhile q != 0:\n    s = input('').split(' ')\n    if len(s) == 2:\n        c = int(s[1])\n        if c == 1:\n            a = mirror_right(e, r, l, u, d)\n            e = a[0]\n            r = a[1]\n            l = a[2]\n            u = a[3]\n            d = a[4]\n        if c == 2:\n            a = mirror_left(e, r, l, u, d)\n            e = a[0]\n            r = a[1]\n            l = a[2]\n            u = a[3]\n            d = a[4]\n        if c == 3:\n            a = mirror_up(e, r, l, u, d)\n            e = a[0]\n            r = a[1]\n            l = a[2]\n            u = a[3]\n            d = a[4]\n        if c == 4:\n            a = mirror_down(e, r, l, u, d)\n            e = a[0]\n            r = a[1]\n            l = a[2]\n            u = a[3]\n            d = a[4]\n    else:\n        print(e % 1000000007)\n    q -= 1", "mod = 1000000007\n(n, q) = map(int, input().split())\npot = pow(2, n, mod)\ne = (pot - 1) * 2 % mod\nright = n + 1\nleft = n + 1\ntop = 1\nbottom = pot\nfor _ in range(q):\n    l = input()\n    add = 0\n    if l[0] == '1':\n        if l[2] == '1':\n            add = right\n            top *= 2\n            bottom *= 2\n        elif l[2] == '2':\n            add = left\n            top *= 2\n            bottom *= 2\n        elif l[2] == '3':\n            add = top\n            right *= 2\n            left *= 2\n            top = bottom\n        else:\n            add = bottom\n            left *= 2\n            right *= 2\n            bottom = top\n        e = (e * 2 + add) % mod\n    else:\n        print(e)", "def main():\n    (n, q) = map(int, input().split())\n    edges = (pow(2, n, 1000000007) - 1) * 2 % 1000000007\n    bottom = pow(2, n, 1000000007)\n    top = 1\n    right = n + 1\n    left = n + 1\n    for i in range(q):\n        query = list(map(int, input().split()))\n        if len(query) == 1:\n            print(edges)\n        else:\n            op = query[1]\n            if op == 1:\n                edges *= 2\n                edges += right\n                edges = edges % 1000000007\n                bottom *= 2\n                top *= 2\n            elif op == 2:\n                edges *= 2\n                edges += left\n                edges = edges % 1000000007\n                bottom *= 2\n                top *= 2\n            elif op == 3:\n                edges *= 2\n                edges += top\n                edges = edges % 1000000007\n                left *= 2\n                right *= 2\n                top = bottom\n            else:\n                edges *= 2\n                edges += bottom\n                edges = edges % 1000000007\n                left *= 2\n                right *= 2\n                bottom = top\n            left = left % 1000000007\n            right = right % 1000000007\n            bottom = bottom % 1000000007\n            top = top % 1000000007\nmain()", "(d, q) = list(map(int, input().split()))\nans = 1000000007\nleaves = 2 ** d\nedges = (2 ** (d + 1) - 2) % ans\nheight = d + 1\nop = []\nroot = 1\nfor i in range(q):\n    s = input()\n    if s == '2' or s == '2 ' or s == '2  ':\n        op.append('show')\n    else:\n        k = list(map(int, s.split()))\n        op.append(k[1])\nfor j in op:\n    if j == 'show':\n        print(edges)\n    elif j == 1 or j == 2:\n        edges = (2 * edges + height) % ans\n        leaves = 2 * leaves % ans\n        root = root * 2 % ans\n    elif j == 4:\n        edges = (2 * edges + leaves) % ans\n        leaves = root\n        height = 2 * height % ans\n    else:\n        edges = (2 * edges + root) % ans\n        root = leaves\n        height = 2 * height % ans", "(d, q) = list(map(int, input().split()))\nans = 1000000007\nleaves = 2 ** d\nedges = (2 ** (d + 1) - 2) % ans\nheight = d + 1\nop = []\nroot = 1\nfor i in range(q):\n    s = input()\n    if s == '2' or s == '2 ' or s == '2  ':\n        op.append('show')\n    else:\n        k = list(map(int, s.split()))\n        op.append(k[1])\nfor j in op:\n    if j == 'show':\n        print(edges)\n    elif j == 1 or j == 2:\n        edges = (2 * edges + height) % ans\n        leaves = 2 * leaves % ans\n        root = root * 2 % ans\n    elif j == 4:\n        edges = (2 * edges + leaves) % ans\n        leaves = root\n        height = 2 * height % ans\n    else:\n        edges = (2 * edges + root) % ans\n        root = leaves\n        height = 2 * height % ans", "import sys\nmod = 10 ** 9 + 7\n(n, q) = map(int, input().split())\n(u, l, r, d) = (1, n + 1, n + 1, pow(2, n, mod))\ne = 2 * (d - 1) % mod\nfor a in sys.stdin:\n    a = list(a.split())\n    if a[0] == '1':\n        e = e * 2 % mod\n        if a[1] == '1':\n            e = (e + r) % mod\n            r = l\n            u = u * 2 % mod\n            d = d * 2 % mod\n        elif a[1] == '2':\n            e = (e + l) % mod\n            l = r\n            u = u * 2 % mod\n            d = d * 2 % mod\n        elif a[1] == '3':\n            e = (e + u) % mod\n            u = d\n            l = l * 2 % mod\n            r = r * 2 % mod\n        else:\n            e = (e + d) % mod\n            d = u\n            l = l * 2 % mod\n            r = r * 2 % mod\n    else:\n        print(e)", "(depth, q) = map(int, input().split())\nr = 1000000007\nedges = 0\ntop = 1\nbottom = 2 ** depth\nfor i in range(1, depth + 1):\n    edges = edges + 2 ** i\nfor i1 in range(0, q):\n    a = list(map(int, input().split()))\n    if len(a) == 1:\n        print(edges % r)\n    else:\n        x = a[1]\n        if x == 1:\n            top = 2 * top\n            bottom = 2 * bottom\n            edges = 2 * edges + depth + 1\n        elif x == 2:\n            top = top * 2\n            bottom = 2 * bottom\n            edges = 2 * edges + depth + 1\n        elif x == 3:\n            depth = 2 * depth + 1\n            edges = 2 * edges + top\n            top = bottom\n        else:\n            depth = 2 * depth + 1\n            edges = 2 * edges + bottom\n            bottom = top", "(n, q) = map(int, input().split())\n(b, e) = (2 ** n, 2 ** (n + 1) - 2)\nc = 1\nn += 1\nfor _ in range(q):\n    l = input().split()\n    if l[0] == '1':\n        x = l[1]\n        if x == '1' or x == '2':\n            e = e * 2 + n\n            b *= 2\n            c *= 2\n        if x == '3':\n            e = e * 2 + c\n            c = b\n            n *= 2\n        if x == '4':\n            e = e * 2 + b\n            b = c\n            n *= 2\n    else:\n        print(e % 1000000007)", "(n, q) = map(int, input().split())\nedges = pow(2, n + 1) - 2\ntop = 1\nbottom = pow(2, n)\nside = n + 1\nmod = 1000000007\nfor _ in range(q):\n    s = input()\n    if s[-1] == '2' and len(s) == 1:\n        print(edges % mod)\n    elif s[-1] == '1':\n        edges = side + edges * 2\n        top = 2 * top\n        bottom = 2 * bottom\n        side = side\n    elif s[-1] == '2':\n        edges = side + edges * 2\n        top = 2 * top\n        bottom = 2 * bottom\n        side = side\n    elif s[-1] == '3':\n        edges = top + edges * 2\n        top = bottom\n        bottom = bottom\n        side = side * 2\n    elif s[-1] == '4':\n        edges = bottom + edges * 2\n        top = top\n        bottom = top\n        side = 2 * side", "mod = 1000000007\n(n, q) = map(int, input().split())\nl = n + 1 % mod\nr = n + 1 % mod\nt = 1 % mod\nb = pow(2, n) % mod\ne = (pow(2, n + 1) - 2) % mod\nfor _ in range(q):\n    lst = list(map(int, input().split()))\n    if len(lst) != 1:\n        if lst[1] == 1:\n            e = (2 * e + l) % mod\n            l = l\n            r = r\n            t = 2 * t % mod\n            b = 2 * b % mod\n        if lst[1] == 2:\n            e = (2 * e + r) % mod\n            l = l\n            r = r\n            t = 2 * t % mod\n            b = 2 * b % mod\n        if lst[1] == 3:\n            e = (2 * e + t) % mod\n            t = b % mod\n            l = 2 * l % mod\n            r = 2 * r % mod\n            b = b % mod\n        if lst[1] == 4:\n            e = (2 * e + b) % mod\n            b = t % mod\n            l = 2 * l % mod\n            r = 2 * r % mod\n            b = b % mod\n    else:\n        print(e)", "(depth, queries) = map(int, input().strip().split())\nmod = 1000 * 1000 * 1000 + 7\nleft = depth + 1\nright = depth + 1\nup = 1\ndown = pow(2, depth)\nedges = pow(2, depth + 1) - 2\nfor i in range(queries):\n    typ = input()\n    if int(typ[0]) == 1:\n        x = int(typ[2])\n        if x == 1:\n            down = down * 2\n            up = up * 2\n            edges = edges * 2 + left\n        elif x == 2:\n            down = down * 2\n            up = up * 2\n            edges = edges * 2 + right\n        elif x == 3:\n            edges = edges * 2 + up\n            up = down\n            left = left * 2\n            right = right * 2\n        else:\n            edges = edges * 2 + down\n            down = up\n            left = left * 2\n            right = right * 2\n    else:\n        print(edges % mod)", "mod = 10 ** 9 + 7\n(n, q) = map(int, input().split())\ntopbreadth = 1\nbottombreadth = pow(2, n, mod)\nheight = n + 1\nedge = 2 * (pow(2, n, mod) - 1) % mod\ncount1 = 0\ncount2 = 0\nfor i in range(q):\n    s = input().split()\n    if len(s) == 2:\n        typ = int(s[1])\n        if typ == 1 or typ == 2:\n            edge *= 2\n            edge += height\n            bottombreadth *= 2\n            topbreadth *= 2\n            topbreadth %= mod\n            bottombreadth %= mod\n            edge %= mod\n        elif typ == 3:\n            edge *= 2\n            edge += topbreadth\n            topbreadth = bottombreadth\n            height *= 2\n            height %= mod\n            edge %= mod\n        else:\n            edge *= 2\n            edge += bottombreadth\n            bottombreadth = topbreadth\n            height *= 2\n            height %= mod\n            edge %= mod\n    else:\n        print(edge)", "import math\n(n, q) = map(int, input().split())\nedge = 2 ** (n + 1) - 2\nh = n + 1\ntop = 1\nbot = 2 ** n\nfor i in range(q):\n    a = list(map(int, input().split()))\n    if len(a) == 2:\n        if a[1] == 1 or a[1] == 2:\n            edge = edge * 2 + h\n            bot = 2 * bot\n            top = 2 * top\n        elif a[1] == 3:\n            edge = 2 * edge + top\n            h = 2 * h\n            top = bot\n        elif a[1] == 4:\n            edge = edge * 2 + bot\n            bot = top\n            h = 2 * h\n    else:\n        print(edge % 1000000007)", "import math\n(n, q) = map(int, input().split())\nedge = 2 ** (n + 1) - 2\nh = n + 1\ntop = 1\nbot = 2 ** n\nfor i in range(q):\n    a = list(map(int, input().split()))\n    if len(a) == 2:\n        if a[1] == 1 or a[1] == 2:\n            edge = edge * 2 + h\n            bot = 2 * bot\n            top = 2 * top\n        elif a[1] == 3:\n            edge = 2 * edge + top\n            h = 2 * h\n            top = bot\n        elif a[1] == 4:\n            edge = edge * 2 + bot\n            bot = top\n            h = 2 * h\n    else:\n        print(edge % 1000000007)", "def power(x, y, p):\n    res = 1\n    x = x % p\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\n(n, q) = map(int, input().split())\ne = (power(2, n, 10 ** 9 + 7) - 1) * 2\nt = 1\nb = power(2, n, 10 ** 9 + 7)\nr = n + 1\nfor i in range(q):\n    l = list(map(int, input().split()))\n    if l[0] == 1:\n        if l[1] == 1 or l[1] == 2:\n            e = (2 * e + r) % (10 ** 9 + 7)\n            b = 2 * b % (10 ** 9 + 7)\n            t = 2 * t % (10 ** 9 + 7)\n        elif l[1] == 3:\n            e = (2 * e + t) % (10 ** 9 + 7)\n            r = 2 * r % (10 ** 9 + 7)\n            t = b % (10 ** 9 + 7)\n        else:\n            e = (2 * e + b) % (10 ** 9 + 7)\n            r = 2 * r % (10 ** 9 + 7)\n            b = t % (10 ** 9 + 7)\n    elif l[0] == 2:\n        print(e)", "(n, q) = input().split()\n(n, q) = (int(n), int(q))\nrt = 1\nnd = 2 ** (n + 1) - 1\nlf = (nd + 1) // 2\nedge = nd - 1\nn += 1\nfor i in range(int(q)):\n    ch = list(map(int, input().split(' ')))\n    if len(ch) == 2:\n        mr = ch[1]\n        if mr == 1 or mr == 2:\n            edge = edge * 2 + n\n            lf = lf * 2\n            rt = rt * 2\n        elif mr == 3:\n            edge = edge * 2 + rt\n            n = n * 2\n            rt = lf\n        else:\n            edge = edge * 2 + lf\n            n = n * 2\n            lf = rt\n    else:\n        print(edge % (10 ** 9 + 7))", "(n, q) = input().split()\n(n, q) = (int(n), int(q))\nrt = 1\nnd = 2 ** (n + 1) - 1\nlf = (nd + 1) // 2\nedge = nd - 1\nn += 1\nfor i in range(int(q)):\n    ch = list(map(int, input().split(' ')))\n    if len(ch) == 2:\n        mr = ch[1]\n        if mr == 1 or mr == 2:\n            edge = edge * 2 + n\n            lf = lf * 2\n            rt = rt * 2\n        elif mr == 3:\n            edge = edge * 2 + rt\n            n = n * 2\n            rt = lf\n        else:\n            edge = edge * 2 + lf\n            n = n * 2\n            lf = rt\n    else:\n        print(edge % (10 ** 9 + 7))", "(n, q) = [int(a) for a in input().split()]\ne = pow(2, n + 1) - 2\nl = [1, pow(2, n), n + 1, n + 1]\nd = {1: 2, 2: 3, 3: 0, 4: 1}\nf = 0\nfor _ in range(q):\n    x = input()\n    if int(x[0]) == 2:\n        print(e % 1000000007)\n    else:\n        x1 = int(x[2])\n        e = 2 * e + l[d[x1]]\n        if x1 > 2:\n            f = f + 1\n            l[2] = 2 * l[2]\n            l[3] = 2 * l[3]\n            if x1 == 3 and f == 1:\n                l[0] = l[1]\n                f = f + 1\n            elif x1 == 4 and f == 1:\n                l[1] = l[0]\n                f = f + 1\n        else:\n            l[0] = 2 * l[0]\n            l[1] = 2 * l[1]", "(n, q) = input().split()\n(n, q) = (int(n), int(q))\nrt = 1\nnd = 2 ** (n + 1) - 1\nlf = (nd + 1) // 2\nedge = nd - 1\nn += 1\nfor i in range(int(q)):\n    ch = list(map(int, input().split(' ')))\n    if len(ch) == 2:\n        mr = ch[1]\n        if mr == 1 or mr == 2:\n            edge = edge * 2 + n\n            lf = lf * 2\n            rt = rt * 2\n        elif mr == 3:\n            edge = edge * 2 + rt\n            n = n * 2\n            rt = lf\n        else:\n            edge = edge * 2 + lf\n            n = n * 2\n            lf = rt\n    else:\n        print(edge % (10 ** 9 + 7))", "(n, q) = map(int, input().split())\ntopNodes = 1\nbottomNodes = 2 ** n\nleftNodes = n + 1\nrightNodes = n + 1\nedges = 2 ** (n + 1) - 2\nfor i in range(q):\n    inp = input()\n    if len(inp) > 1:\n        (cmd, dir) = map(int, inp.split())\n        if dir == 1:\n            edges = 2 * edges + rightNodes\n            bottomNodes = 2 * bottomNodes\n            topNodes = 2 * topNodes\n        elif dir == 2:\n            edges = 2 * edges + leftNodes\n            bottomNodes = 2 * bottomNodes\n            topNodes = 2 * topNodes\n        elif dir == 3:\n            edges = 2 * edges + topNodes\n            leftNodes = 2 * leftNodes\n            rightNodes = 2 * rightNodes\n            topNodes = bottomNodes\n        elif dir == 4:\n            edges = 2 * edges + bottomNodes\n            leftNodes = 2 * leftNodes\n            rightNodes = 2 * rightNodes\n            bottomNodes = topNodes\n    else:\n        print(edges % 1000000007)", "import math\ns = input()\nidx = s.find(' ')\nn = int(s[0:idx])\nq = int(s[idx + 1:])\nr = n + 1\nd = math.floor(pow(2, n) + 0.5)\ne = 2 * (math.floor(pow(2, n) + 0.5) - 1)\nu = 1\nMOD = 1000000007\nfor i in range(0, q):\n    k = input()\n    k1 = int(k[0])\n    if k1 == 1:\n        x = int(k[2])\n        if x == 1 or x == 2:\n            e = 2 * e + r\n            u = 2 * u\n            d = 2 * d\n        elif x == 3:\n            e = 2 * e + u\n            r = r * 2\n            u = d\n        else:\n            e = 2 * e + d\n            r = r * 2\n            d = u\n    else:\n        print(e % MOD)", "def power(x, y, p):\n    res = 1\n    x = x % p\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\n[n, q] = [int(i) for i in input().split()]\nsu = (power(2, n + 1, 1000000007) - 2 + 1000000007) % 1000000007\nwidth = 1\nt = 0\nk = n + 1\nwhile q > 0:\n    a = [int(i) for i in input().split()]\n    if a[0] == 2:\n        print(su)\n    elif a[1] == 1 or a[1] == 2:\n        su = (2 * su % 1000000007 + k % 1000000007) % 1000000007\n        width = width * 2 % 1000000007\n    elif a[1] == 3:\n        if t == 0:\n            su = (2 * su % 1000000007 + width % 1000000007) % 1000000007\n            t = 1\n        elif t == 1:\n            su = (2 * su % 1000000007 + width % 1000000007 * power(2, n, 1000000007) % 1000000007) % 1000000007\n        elif t == 2:\n            su = (2 * su % 1000000007 + width % 1000000007) % 1000000007\n        k = k * 2 % 1000000007\n    elif a[1] == 4:\n        if t == 2:\n            su = (2 * su % 1000000007 + width % 1000000007) % 1000000007\n        elif t == 0:\n            su = (2 * su % 1000000007 + width % 1000000007 * power(2, n, 1000000007) % 1000000007) % 1000000007\n            t = 2\n        elif t == 1:\n            su = (2 * su % 1000000007 + width % 1000000007 * power(2, n, 1000000007) % 1000000007) % 1000000007\n        k = k * 2 % 1000000007\n    q -= 1", "(n, q) = map(int, input().rstrip().split())\nu = 1\nd = 2 ** n\nl = 2 * (2 ** n - 1)\ntr = False\nlt = n + 1\nfor i in range(q):\n    l = l % 1000000007\n    te = input().rstrip().split()\n    if int(te[0]) == 2:\n        print(l)\n    else:\n        op = int(te[1])\n        if op == 1 or op == 2:\n            u = 2 * u\n            d = 2 * d\n            l = 2 * l + lt\n        elif tr:\n            l = 2 * l + u\n            lt = 2 * lt\n        else:\n            if op == 3:\n                l = 2 * l + u\n                lt = lt * 2\n                u = d\n            else:\n                l = 2 * l + d\n                lt = lt * 2\n                d = u\n            tr = True", "(n, q) = map(int, input().split())\nmod = 1000000007\nans = (pow(2, n + 1, mod) - 2) % mod\ntop = 1\nbottom = pow(2, n, mod)\nfor i in range(q):\n    x = input()\n    if x == '2':\n        print(ans)\n    else:\n        x = x.split()\n        x = int(x[1])\n        if x == 1 or x == 2:\n            ans = (2 * ans + n + 1) % mod\n            top = 2 * top % mod\n            bottom = 2 * bottom % mod\n        elif x == 3:\n            ans = (2 * ans + top) % mod\n            top = bottom\n            n = (2 * n + 1) % mod\n        else:\n            ans = (2 * ans + bottom) % mod\n            bottom = top\n            n = (2 * n + 1) % mod", "mod = 1000000007\n(n, q) = map(int, input().strip().split(' '))\nn += 1\ndown = pow(2, n - 1, mod)\ntop = 1\ndepth = n\ntop = 1\nfin = down * 2 - 2\nfin %= mod\nfor i in range(q):\n    arr = list(map(int, input().strip().split(' ')))\n    if len(arr) == 1:\n        print(fin)\n    elif arr[1] == 1 or arr[1] == 2:\n        fin = fin * 2\n        top *= 2\n        down *= 2\n        fin += depth\n    else:\n        depth *= 2\n        fin *= 2\n        if arr[1] == 4:\n            fin += down\n            down = top\n        else:\n            fin += top\n            top = down\n    fin %= mod\n    down %= mod\n    top %= mod\n    depth %= mod", "(n, q) = map(int, input().split())\n(top, bottom, e) = (1, 2 ** n, 2 ** (n + 1) - 2)\nl = []\nfor i in range(q):\n    l = list(map(int, input().split()))\n    if l[0] == 2:\n        print(e % (10 ** 9 + 7))\n    elif l[1] == 1 or l[1] == 2:\n        e = e * 2 + (n + 1)\n        top = top * 2\n        bottom = bottom * 2\n    elif l[1] == 3:\n        e = e * 2 + top\n        top = bottom\n        n = n * 2 + 1\n    elif l[1] == 4:\n        e = e * 2 + bottom\n        bottom = top\n        n = n * 2 + 1", "(n, k) = map(int, input().split())\nb = 2 ** n\nt = 1\nr = n + 1\nnumber_of_edges = (2 ** (n + 1) - 2) % (10 ** 9 + 7)\nfor _ in range(k):\n    l = list(map(int, input().split()))\n    if len(l) > 1:\n        if l[1] == 1 or l[1] == 2:\n            number_of_edges = (number_of_edges * 2 + r) % (10 ** 9 + 7)\n            (t, b) = (t * 2, b * 2)\n        elif l[1] == 3:\n            number_of_edges = (number_of_edges * 2 + t) % (10 ** 9 + 7)\n            r *= 2\n            t = b\n        elif l[1] == 4:\n            number_of_edges = (number_of_edges * 2 + b) % (10 ** 9 + 7)\n            r *= 2\n            b = t\n    if len(l) == 1:\n        print(number_of_edges)", "m = 10 ** 9 + 7\n(n, q) = map(int, input().split())\nttttttooooppppp = 1\nlllleeeefffttt = n + 1\nrrriiiggghhhttt = n + 1\nbbboootttooommm = 2 ** n\neeeeddddgggeeeessss = (2 ** (n + 1) - 2) % m\nfor _ in range(q):\n    w = [int(i) for i in input().split()]\n    if len(w) == 1:\n        print(eeeeddddgggeeeessss)\n    else:\n        t = w[1]\n        if t == 1 or t == 2:\n            ttttttooooppppp *= 2\n            bbboootttooommm *= 2\n            eeeeddddgggeeeessss = (eeeeddddgggeeeessss * 2 + rrriiiggghhhttt) % m\n        elif t == 3:\n            eeeeddddgggeeeessss = (eeeeddddgggeeeessss * 2 + ttttttooooppppp) % m\n            rrriiiggghhhttt *= 2\n            lllleeeefffttt = rrriiiggghhhttt\n            ttttttooooppppp = bbboootttooommm\n        else:\n            eeeeddddgggeeeessss = (eeeeddddgggeeeessss * 2 + bbboootttooommm) % m\n            rrriiiggghhhttt *= 2\n            lllleeeefffttt = rrriiiggghhhttt\n            bbboootttooommm = ttttttooooppppp", "(n, q) = [int(x) for x in input().split()]\nl1 = [1, pow(2, n), n + 1, n + 1]\ndict1 = {1: 2, 2: 3, 3: 0, 4: 1}\nsum1 = pow(2, n + 1) - 2\nflag = 0\nfor _ in range(q):\n    qu = input()\n    if int(qu[0]) == 2:\n        print(sum1 % 1000000007)\n    else:\n        num = int(qu[2])\n        sum1 = 2 * sum1 + l1[dict1[num]]\n        if num > 2:\n            flag += 1\n            l1[2] = 2 * l1[2]\n            l1[3] = 2 * l1[3]\n            if num == 3 and flag == 1:\n                l1[0] = l1[1]\n                flag += 1\n            elif num == 4 and flag == 1:\n                l1[1] = l1[0]\n                flag += 1\n        else:\n            l1[0] = 2 * l1[0]\n            l1[1] = 2 * l1[1]", "(n, q) = map(int, input().split())\nedges = pow(2, n + 1) - 2\ntop = 1\nbottom = pow(2, n)\nside = n + 1\nmod = 1000000007\nfor _ in range(q):\n    s = input()\n    if s[-1] == '2' and len(s) == 1:\n        print(edges % mod)\n    elif s[-1] == '1':\n        edges = side + edges * 2\n        top = 2 * top\n        bottom = 2 * bottom\n        side = side\n    elif s[-1] == '2':\n        edges = side + edges * 2\n        top = 2 * top\n        bottom = 2 * bottom\n        side = side\n    elif s[-1] == '3':\n        edges = top + edges * 2\n        top = bottom\n        bottom = bottom\n        side = side * 2\n    elif s[-1] == '4':\n        edges = bottom + edges * 2\n        top = top\n        bottom = top\n        side = 2 * side", "(n, q) = map(int, input().split())\nans = pow(2, n + 1) - 2\nl = n + 1\nd = pow(2, n)\nu = 1\nfor ii in range(q):\n    a = list(map(int, input().split()))\n    if a[0] == 2:\n        print(ans % 1000000007)\n    elif a[1] == 1 or a[1] == 2:\n        ans *= 2\n        ans += l\n        d *= 2\n        u *= 2\n    elif a[1] == 3:\n        ans *= 2\n        ans += u\n        u = d\n        l *= 2\n    elif a[1] == 4:\n        ans *= 2\n        ans += d\n        d = u\n        l *= 2", "(n, q) = map(int, input().split())\nli = list()\ned = 2 ** (n + 1) - 2\nrig = n + 1\nlef = n + 1\ntop = 1\nbot = 2 ** n\nfor _ in range(q):\n    li = list(map(int, input().split()))\n    if li[0] == 1:\n        if li[1] == 1:\n            ed = 2 * ed + rig\n            rig = lef\n            top *= 2\n            bot *= 2\n        elif li[1] == 2:\n            ed = 2 * ed + lef\n            lef = rig\n            top *= 2\n            bot *= 2\n        elif li[1] == 3:\n            ed = 2 * ed + top\n            top = bot\n            rig *= 2\n            lef *= 2\n        elif li[1] == 4:\n            ed = 2 * ed + bot\n            bot = top\n            rig *= 2\n            lef *= 2\n        ed = ed % 1000000007\n        top %= 1000000007\n        bot %= 1000000007\n        rig %= 1000000007\n        lef %= 1000000007\n    else:\n        print(ed % 1000000007)", "d = 1000000007\n(n, q) = map(int, input().split())\nr = 1\nle = 2 ** n\nans = 2 ** (n + 1) - 2\nwhile q > 0:\n    q -= 1\n    l = list(map(int, input().split()))\n    if len(l) == 1:\n        print(ans % d)\n    elif l[1] == 1 or l[1] == 2:\n        ans = (ans * 2 + (n + 1)) % d\n        r = r * 2\n        le = le * 2\n    elif l[1] == 3:\n        ans = (ans * 2 + r) % d\n        r = le\n        n = 2 * n + 1\n    else:\n        ans = (ans * 2 + le) % d\n        le = r\n        n = 2 * n + 1", "import math\n(n, q) = map(int, input().split())\nedg = 2 ** (n + 1) - 2\nh = n + 1\ntop = 1\nbot = 2 ** n\nfor i in range(q):\n    a = list(map(int, input().split()))\n    if len(a) == 2:\n        if a[1] == 1 or a[1] == 2:\n            edg = 2 * edg + h\n            bot = 2 * bot\n            top = 2 * top\n        elif a[1] == 3:\n            edg = 2 * edg + top\n            h = 2 * h\n            top = bot\n        elif a[1] == 4:\n            edg = 2 * edg + bot\n            bot = top\n            h = 2 * h\n    else:\n        print(edg % 1000000007)", "(n, q) = map(int, input().split())\nans = 2 ** (n + 1)\nans = ans - 2\nmod = 1000000007\ntop = 1\nlast = 2 ** n\nheight = n + 1\nfor i in range(q):\n    ty = []\n    ty = list(map(int, input().split()))\n    if len(ty) == 1:\n        print(ans % mod)\n    else:\n        x = ty[1]\n        if x == 1 or x == 2:\n            ans = 2 * ans + height\n            last = last * 2\n            top = top * 2\n        elif x == 3:\n            ans = 2 * ans + top\n            top = last\n            height = 2 * height\n        else:\n            ans = 2 * ans + last\n            height = 2 * height\n            last = top", "import math\n(n, q) = map(int, input().split())\nedg = 2 ** (n + 1) - 2\nh = n + 1\ntop = 1\nbot = 2 ** n\nfor i in range(q):\n    a = list(map(int, input().split()))\n    if len(a) == 2:\n        if a[1] == 1 or a[1] == 2:\n            edg = 2 * edg + h\n            bot = 2 * bot\n            top = 2 * top\n        elif a[1] == 3:\n            edg = 2 * edg + top\n            h = 2 * h\n            top = bot\n        elif a[1] == 4:\n            edg = 2 * edg + bot\n            bot = top\n            h = 2 * h\n    else:\n        print(edg % 1000000007)", "s = input()\nn1 = list(map(int, s.split()))\nn = n1[0]\nq = n1[1]\nnodes = 2 ** (n + 1) - 1\nedges = nodes - 1\nr = n + 1\nl = n + 1\nt = 1\nb = 2 ** n\nm = 0\nwhile m < q:\n    s2 = input()\n    n2 = list(map(int, s2.split()))\n    if len(s2) == 3 and n2[0] == 1:\n        a = n2[0]\n        x = n2[1]\n        if x == 1:\n            edges = edges * 2 + r\n            t = t * 2\n            b = b * 2\n        if x == 2:\n            edges = edges * 2 + l\n            t = t * 2\n            b = b * 2\n        if x == 3:\n            edges = edges * 2 + t\n            l = l * 2\n            r = r * 2\n            t = b\n        if x == 4:\n            edges = edges * 2 + b\n            l = l * 2\n            r = r * 2\n            b = t\n    if len(s2) == 1:\n        if n2[0] == 2:\n            print(edges % 1000000007)\n    m = m + 1", "try:\n    (n, q) = list(map(int, input().split()))\n    (L, R, T, B) = (n + 1, n + 1, 1, 2 ** n)\n    total = 0\n    for val in range(1, n + 1):\n        total += 2 ** val\n    for _ in range(q):\n        i = list(map(int, input().split()))\n        if i[0] == 1:\n            if i[1] == 1:\n                total *= 2\n                total += R\n                (L, R, T, B) = (L, R, 2 * T, B * 2)\n            if i[1] == 2:\n                total *= 2\n                total += L\n                (L, R, T, B) = (L, R, 2 * T, B * 2)\n            if i[1] == 3:\n                total *= 2\n                total += T\n                (L, R, T, B) = (2 * L, 2 * R, B, B)\n            if i[1] == 4:\n                total *= 2\n                total += B\n                (L, R, T, B) = (2 * L, 2 * R, T, T)\n        else:\n            print(total % 1000000007)\nexcept:\n    pass", "import math\nnq = input()\nnq = nq.split()\nn = int(nq[0])\nq = int(nq[1])\nsum = 2 * (pow(2, n) - 1)\nbottomedge = pow(2, n)\ndepthedge = n + 1\ntopedge = 1\nwhile q > 0:\n    q -= 1\n    a = input()\n    a = a.split()\n    if len(a) == 2:\n        x = int(a[1])\n        if x == 2 or x == 1:\n            sum = sum % 1000000007\n            sum = sum * 2 + depthedge\n            bottomedge *= 2\n            topedge *= 2\n        elif x == 3:\n            sum = sum % 1000000007\n            sum = sum * 2 + topedge\n            topedge = bottomedge\n            depthedge *= 2\n        elif x == 4:\n            sum = sum % 1000000007\n            sum = sum * 2 + bottomedge\n            bottomedge = topedge\n            depthedge *= 2\n    elif len(a) == 1:\n        sum = sum % 1000000007\n        print(sum)", "arr = list(map(int, input().split()))\nh = arr[0]\ne = 2 ** (h + 1)\ne1 = e - 2\nl = h + 1\nr = h + 1\nu = 1\nd = 2 ** h\nwhile arr[1]:\n    arr[1] = arr[1] - 1\n    arr1 = list(map(int, input().split()))\n    if arr1[0] == 2:\n        print(e1 % 1000000007)\n    elif arr1[1] == 1:\n        e1 = e1 * 2\n        e1 = e1 + r\n        u = u * 2\n        d = d * 2\n        e1 = e1 % 1000000007\n    elif arr1[1] == 2:\n        e1 = e1 * 2\n        e1 = e1 + l\n        u = u * 2\n        d = d * 2\n        e1 = e1 % 1000000007\n    elif arr1[1] == 3:\n        e1 *= 2\n        e1 = e1 + u\n        u = d\n        l = l * 2\n        r = r * 2\n        e1 = e1 % 1000000007\n    elif arr1[1] == 4:\n        e1 *= 2\n        e1 = e1 + d\n        d = u\n        l = l * 2\n        r = r * 2\n        e1 = e1 % 1000000007", "n = list(map(int, input().split()))\n(a, q) = (n[0], n[1])\nn = a\nr = int(n + 1)\nb = 2 ** n\nedge = 2 ** (n + 1) - 2\nu = 1\nl = n\nM = 1000000007\ni = 0\nwhile i < q:\n    s = list(map(int, input().split()))\n    if s[0] == 2:\n        print(edge % M)\n    elif s[1] == 1 or s[1] == 2:\n        edge = edge * 2 % M\n        edge = (edge + r) % M\n        b = b * 2 % M\n        u = u * 2 % M\n    elif s[1] == 3:\n        edge = edge * 2 % M\n        edge = (edge + u) % M\n        u = b\n        r = r * 2 % M\n        l = l * 2 % M\n    else:\n        edge = edge * 2 % M\n        edge = (edge + b) % M\n        b = u\n        r = r * 2 % M\n        l = l * 2 % M\n    i += 1", "m = 10 ** 9 + 7\n(n, q) = map(int, input().split())\nroot = 1\nleft = n + 1\nright = n + 1\nbottom = 2 ** n\nedges = (2 ** (n + 1) - 2) % m\nfor _ in range(q):\n    w = list(map(int, input().split()))\n    if len(w) == 1:\n        print(edges)\n    else:\n        t = w[1]\n        if t == 1 or t == 2:\n            root *= 2\n            bottom *= 2\n            edges = (edges * 2 + right) % m\n        elif t == 3:\n            edges = (edges * 2 + root) % m\n            right *= 2\n            left = right\n            root = bottom\n        else:\n            edges = (edges * 2 + bottom) % m\n            right *= 2\n            left = right\n            bottom = root", "def power(x, y):\n    if y == 0:\n        return 1\n    elif int(y % 2) == 0:\n        return power(x, int(y / 2)) * power(x, int(y / 2))\n    else:\n        return x * power(x, int(y / 2)) * power(x, int(y / 2))\n(h, q) = map(int, input().strip().split())\nrht = h + 1\nlft = h + 1\ntop = 1\nedge = power(2, h + 1) - 2\nbottom = power(2, h)\nfor i in range(1, q + 1):\n    type = input()\n    if type == '2':\n        print(edge % 1000000007)\n    else:\n        y = type[2]\n        y = int(y)\n        if y == 1:\n            edge = edge * 2 + rht\n            top = top * 2\n            bottom = bottom * 2\n        elif y == 2:\n            edge = edge * 2 + lft\n            top = top * 2\n            bottom = bottom * 2\n        elif y == 3:\n            edge = edge * 2 + top\n            top = bottom\n            lft = lft * 2\n            rht = rht * 2\n        elif y == 4:\n            edge = edge * 2 + bottom\n            bottom = top\n            lft = lft * 2\n            rht = rht * 2", "MOD = 1000000007\n(n, q) = map(int, input().split())\nnum_edges = 2 * (2 ** n - 1)\nheight = n + 1\ntop = 1\nbottom = 2 ** n\nfor _ in range(q):\n    s = input()\n    if s[0] == '1':\n        op = s[2]\n        if op in ['1', '2']:\n            num_edges += num_edges + height\n            top *= 2\n            bottom *= 2\n        elif op == '3':\n            num_edges += num_edges + top\n            top = bottom\n            height *= 2\n        else:\n            num_edges += num_edges + bottom\n            bottom = top\n            height *= 2\n    else:\n        print(num_edges % MOD)", "s = input()\nl = list(s.split())\nn = int(l[0])\nq = int(l[1])\ne = pow(2, n + 1) - 2\nl = n + 1\nr = n + 1\nt = 1\nb = pow(2, n)\nfor i in range(0, q):\n    y = input()\n    l6 = list(y.split())\n    y1 = int(l6[0])\n    if y1 == 1:\n        x = int(l6[1])\n        if x == 1:\n            e = 2 * e + r\n            b = 2 * b\n            t = 2 * t\n        elif x == 2:\n            e = 2 * e + l\n            b = 2 * b\n            t = 2 * t\n        elif x == 3:\n            e = 2 * e + t\n            t = b\n            l = 2 * l\n            r = 2 * r\n        elif x == 4:\n            e = 2 * e + b\n            b = t\n            l = 2 * l\n            r = 2 * r\n    else:\n        print(e % 1000000007)", "m = pow(10, 9) + 7\nnq = input().split()\nn = int(nq[0])\nq = int(nq[1])\ne = (pow(2, n + 1) - 2) % m\ntop = 1\nbot = pow(2, n)\nr = n + 1\nl = n + 1\nfor qq in range(q):\n    qu = input().split()\n    if qu[0] == '2':\n        print(e)\n    else:\n        x = int(qu[1])\n        if x == 1:\n            e = (2 * e + r) % m\n            top = top * 2\n            bot = bot * 2\n        elif x == 2:\n            e = (2 * e + l) % m\n            top = top * 2\n            bot = bot * 2\n        elif x == 3:\n            e = (2 * e + top) % m\n            r = r * 2\n            l = l * 2\n            top = bot\n        else:\n            e = (2 * e + bot) % m\n            r = r * 2\n            l = l * 2\n            bot = top", "m = pow(10, 9) + 7\n(n, q) = map(int, input().split())\ne = (pow(2, n + 1) - 2) % m\ntop = 1\nbot = pow(2, n)\nr = n + 1\nl = n + 1\nfor qq in range(q):\n    qu = input().split()\n    if qu[0] == '2':\n        print(e)\n    else:\n        x = int(qu[1])\n        if x == 1:\n            e = (2 * e + r) % m\n            top = top * 2\n            bot = bot * 2\n        elif x == 2:\n            e = (2 * e + l) % m\n            top = top * 2\n            bot = bot * 2\n        elif x == 3:\n            e = (2 * e + top) % m\n            r = r * 2\n            l = l * 2\n            top = bot\n        else:\n            e = (2 * e + bot) % m\n            r = r * 2\n            l = l * 2\n            bot = top", "(n, q) = list(map(int, input().strip().split()))\nn += 1\ns = n\nb = 2 ** (n - 1)\ne = 2 * (2 ** (n - 1) - 1) if n > 1 else 0\nt = 1\nmod = 1000000007\nfor x in range(q):\n    i = input().strip().split()\n    if len(i) == 1:\n        print(e % mod)\n    else:\n        e *= 2\n        if int(i[1]) <= 2:\n            e += s\n            b *= 2\n            t *= 2\n        elif int(i[1]) == 4:\n            s *= 2\n            e += b\n            b = t\n        else:\n            s *= 2\n            e += t\n            t = b\n        e %= mod", "s = input()\nl = list(s.split())\nn = 0\nq = 0\nn = int(l[0])\nq = int(l[1])\nedges = 0\nleft = 0\nright = 0\nbottom = 0\ntop = 0\nedges = pow(2, n + 1) - 2\nleft = n + 1\nright = n + 1\ntop = 1\nbottom = pow(2, n)\nfor i in range(0, q):\n    b = input()\n    l1 = list(b.split())\n    b1 = int(l1[0])\n    if b1 == 1:\n        a = int(l1[1])\n        if a == 1:\n            edges = 2 * edges + right\n            bottom = 2 * bottom\n            top = 2 * top\n        elif a == 2:\n            edges = 2 * edges + left\n            bottom = 2 * bottom\n            top = 2 * top\n        elif a == 3:\n            edges = 2 * edges + top\n            top = bottom\n            left = 2 * left\n            right = 2 * right\n        elif a == 4:\n            edges = 2 * edges + bottom\n            bottom = top\n            left = 2 * left\n            right = 2 * right\n    else:\n        print(edges % 1000000007)", "mod = 10 ** 9 + 7\n(n, q) = map(int, input().split())\ntop = 1\nbottom = 2 ** n % mod\nleft = (n + 1) % mod\nright = (n + 1) % mod\nedges = (2 ** n - 1) * 2 % mod\nfor _ in range(q):\n    s = input()\n    if int(s[0]) == 1:\n        if int(s[2]) == 1:\n            edges = (2 * edges % mod + right) % mod\n            top = top * 2 % mod\n            bottom = bottom * 2 % mod\n        elif int(s[2]) == 2:\n            edges = (2 * edges % mod + left) % mod\n            top = top * 2 % mod\n            bottom = bottom * 2 % mod\n        elif int(s[2]) == 3:\n            edges = (2 * edges % mod + top) % mod\n            top = bottom\n            left = 2 * left % mod\n            right = 2 * right % mod\n        else:\n            edges = (2 * edges % mod + bottom) % mod\n            bottom = top\n            left = left * 2 % mod\n            right = right * 2 % mod\n    else:\n        print(edges)", "(n, q) = map(int, input().split())\ne = 2 ** (n + 1) - 2\nl = 2 ** n\nh = n + 1\np = 1\nup = 0\ndown = 1\nfor i in range(q):\n    qi = input().split()\n    if qi[0] == '2':\n        print(e % 1000000007)\n    elif qi[1] == '1' or qi[1] == '2':\n        e = e * 2 + h\n        l = l * 2\n        p = p * 2\n    elif qi[1] == '3':\n        if up == 1:\n            e = e * 2 + l\n        else:\n            e = e * 2 + p\n        up = down\n        h = h * 2\n    else:\n        if down == 1:\n            e = e * 2 + l\n        else:\n            e = e * 2 + p\n        down = up\n        h = h * 2", "(n, q) = map(int, input().split())\ne = 2 ** (n + 1) - 2\nl = 2 ** n\nh = n + 1\np = 1\nup = 0\ndown = 1\nfor i in range(q):\n    qi = input().split()\n    if qi[0] == '2':\n        print(e % 1000000007)\n    elif qi[1] == '1' or qi[1] == '2':\n        e = e * 2 + h\n        l = l * 2\n        p = p * 2\n    elif qi[1] == '3':\n        if up == 1:\n            e = e * 2 + l\n        else:\n            e = e * 2 + p\n        up = down\n        h = h * 2\n    else:\n        if down == 1:\n            e = e * 2 + l\n        else:\n            e = e * 2 + p\n        down = up\n        h = h * 2", "(n, m) = map(int, input().split())\nedge = pow(2, n + 1, 10 ** 9 + 7)\nedge = (edge - 2) % (10 ** 9 + 7)\ntopnodes = 1\nbottomnodes = 2 ** n\nn += 1\nfor i in range(m):\n    a = list(map(int, input().split()))\n    if a[0] == 1:\n        if a[1] == 1:\n            edge = (edge * 2 + n) % 1000000007\n            bottomnodes *= 2\n            topnodes *= 2\n        if a[1] == 2:\n            edge = (edge * 2 + n) % 1000000007\n            bottomnodes *= 2\n            topnodes *= 2\n        if a[1] == 3:\n            edge = (edge * 2 + topnodes) % 1000000007\n            topnodes = bottomnodes\n            bottomnodes = bottomnodes\n            n *= 2\n        if a[1] == 4:\n            edge = (edge * 2 + bottomnodes) % 1000000007\n            bottomnodes = topnodes\n            topnodes = topnodes\n            n *= 2\n    else:\n        print(edge)", "import math\nimport bisect\nimport itertools\nimport sys\nI = lambda : sys.stdin.readline()\nmod = 10 ** 9 + 7\n\ndef modu(a, m):\n    if a % m:\n        return a % m\n    return m\n\ndef mindiff(a):\n    b = a[:]\n    b.sort()\n    m = 10000000000\n    for i in range(len(b) - 1):\n        if b[i + 1] - b[i] < m:\n            m = b[i + 1] - b[i]\n    return m\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef merge(a, b):\n    i = 0\n    j = 0\n    c = 0\n    ans = []\n    while i < len(a) and j < len(b):\n        if a[i] < b[j]:\n            ans.append(a[i])\n            i += 1\n        else:\n            ans.append(b[j])\n            c += len(a) - i\n            j += 1\n    ans += a[i:]\n    ans += b[j:]\n    return (ans, c)\n\ndef mergesort(a):\n    if len(a) == 1:\n        return (a, 0)\n    mid = len(a) // 2\n    (left, left_inversion) = mergesort(a[:mid])\n    (right, right_inversion) = mergesort(a[mid:])\n    (m, c) = merge(left, right)\n    c += left_inversion + right_inversion\n    return (m, c)\n\ndef is_prime(num):\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num == 3:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 3 == 0:\n        return False\n    t = 5\n    a = 2\n    while t <= int(math.sqrt(num)):\n        if num % t == 0:\n            return False\n        t += a\n        a = 6 - a\n    return True\n\ndef ceil(a, b):\n    if a % b == 0:\n        return a // b\n    else:\n        return a // b + 1\n\ndef ncr1(n, r):\n    s = 1\n    for i in range(min(n - r, r)):\n        s *= n - i\n        s %= mod\n        s *= pow(i + 1, mod - 2, mod)\n        s %= mod\n    return s\n(n, q) = map(int, input().split())\ne = (pow(2, n + 1, mod) - 2) % mod\na = [0, n + 1, n + 1, 1, pow(2, n, mod)]\nfor i in range(q):\n    b = list(map(int, input().split()))\n    if len(b) == 1:\n        print(e)\n    else:\n        (x, y) = (b[0], b[1])\n        e = 2 * e + a[y]\n        e %= mod\n        if y < 3:\n            a[3] *= 2\n            a[4] *= 2\n            a[4] %= mod\n            a[3] %= mod\n        else:\n            a[2] *= 2\n            a[1] *= 2\n            a[2] %= mod\n            a[1] %= mod\n            if y == 3:\n                a[3] = a[4]\n            else:\n                a[4] = a[3]", "m = 10 ** 9 + 7\n(n, q) = map(int, input().split())\nans = 2 * (2 ** n - 1)\nlv = 2 ** n\nsd = n + 1\ntp = 1\nfor i in range(q):\n    s = input()\n    if s[0] == '2':\n        print(ans % m)\n    else:\n        x = int(s[2])\n        if x == 1 or x == 2:\n            ans = ans * 2 + sd\n            lv *= 2\n            tp *= 2\n        if x == 4:\n            ans = ans * 2 + lv\n            sd *= 2\n            lv = tp\n        if x == 3:\n            ans = ans * 2 + tp\n            sd *= 2\n            tp = lv", "(n, q) = map(int, input().split())\nc = 2 * (pow(2, n) - 1)\nns = n + 1\nnt = 1\nnb = pow(2, n)\nx = 7 + pow(10, 9)\nfor i in range(q):\n    li = list(map(int, input().split()))\n    if len(li) == 1:\n        print(c % x)\n    else:\n        b = li[1]\n        if b == 1 or b == 2:\n            c = 2 * c + ns\n            nt *= 2\n            nb *= 2\n        elif b == 3:\n            c = 2 * c + nt\n            ns *= 2\n            nt = nb\n        else:\n            c = 2 * c + nb\n            ns *= 2\n            nb = nt", "(n, q) = map(int, input().split())\nm = 10 ** 9 + 7\nedges = pow(2, n + 1, m)\nedges = (edges - 2) % m\ndepth = n + 1\ntopnodes = 1\nbottomnodes = 2 ** n\nfor i in range(0, q):\n    l1 = list(map(int, input().split()))\n    if len(l1) == 1:\n        print(edges)\n    elif l1[1] == 1 or l1[1] == 2:\n        edges = edges * 2 % m\n        topnodes *= 2\n        edges = (edges + depth) % m\n        bottomnodes *= 2\n    elif l1[1] == 3:\n        edges = edges * 2 % m\n        depth *= 2\n        edges = (edges + topnodes) % m\n        topnodes = bottomnodes\n    elif l1[1] == 4:\n        edges = edges * 2 % m\n        edges = (edges + bottomnodes) % m\n        bottomnodes = topnodes\n        depth *= 2", "(n, q) = map(int, input().strip().split())\nmod = 1000000007\nt = 1\nb = pow(2, n)\nl = n + 1\nr = n + 1\ned = pow(2, n + 1) - 2\nfor w in range(q):\n    s = input()\n    if s == '2':\n        print(ed % mod)\n    else:\n        val = s[2]\n        val = int(val)\n        if val == 1:\n            ed += ed + r\n            t += t\n            b += b\n        if val == 2:\n            ed += ed + l\n            t += t\n            b += b\n        if val == 3:\n            ed += ed + t\n            t = b\n            l += l\n            r += r\n        if val == 4:\n            ed += ed + b\n            b = t\n            l += l\n            r += r", "m = 10 ** 9 + 7\n(n, q) = map(int, input().split())\ntop = 1\nleft = n + 1\nright = n + 1\nbottom = 2 ** n\nedges = (2 ** (n + 1) - 2) % m\nfor _ in range(q):\n    w = [int(i) for i in input().split()]\n    if len(w) == 1:\n        print(edges)\n    else:\n        t = w[1]\n        if t == 1 or t == 2:\n            top *= 2\n            bottom *= 2\n            edges = (edges * 2 + right) % m\n        elif t == 3:\n            edges = (edges * 2 + top) % m\n            right *= 2\n            left = right\n            top = bottom\n        else:\n            edges = (edges * 2 + bottom) % m\n            right *= 2\n            left = right\n            bottom = top", "import sys\nfrom itertools import *\n\ndef numIN(x=' '):\n    return map(int, sys.stdin.readline().strip().split(x))\n(n, q) = numIN()\nans = 2 ** (n + 1) - 2\nl = r = n + 1\nb = 2 ** n\nu = 1\nfor _ in range(q):\n    x = list(numIN())\n    if x[0] == 2:\n        print(ans % 1000000007)\n    elif x[1] == 1:\n        ans *= 2\n        ans += r\n        b *= 2\n        u *= 2\n    elif x[1] == 2:\n        ans *= 2\n        ans += l\n        b *= 2\n        u *= 2\n    elif x[1] == 3:\n        ans *= 2\n        ans += u\n        l *= 2\n        r *= 2\n        u = b\n    else:\n        ans *= 2\n        ans += b\n        l *= 2\n        r *= 2\n        b = u"]