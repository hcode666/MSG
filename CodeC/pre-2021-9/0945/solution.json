["for _ in range(int(input())):\n    N = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    traveled = total = 0\n    f = list(list(zip(*sorted(zip(c, f))))[1])\n    c.sort()\n    i = 0\n    while traveled < N:\n        traveled += f[i]\n        total += f[i] * c[i]\n        i += 1\n    if traveled > N:\n        total -= (traveled - N) * c[i - 1]\n    print(total)", "for _ in range(int(input())):\n    N = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    traveled = total = 0\n    f = list(list(zip(*sorted(zip(c, f))))[1])\n    c.sort()\n    i = 0\n    while traveled < N:\n        traveled += f[i]\n        total += f[i] * c[i]\n        i += 1\n    if traveled > N:\n        total -= (traveled - N) * c[i - 1]\n    print(total)", "for _ in range(int(input())):\n    n = int(input())\n    fuel = list(map(int, input().split()))\n    price = list(map(int, input().split()))\n    pair = [[price[i], fuel[i]] for i in range(n)]\n    pair.sort(key=lambda x: x[0])\n    ans = 0\n    temp = 0\n    for (i, j) in pair:\n        if not n:\n            break\n        val = min(n, j)\n        n -= val\n        ans += i * val\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    fuel = list(map(int, input().split()))\n    price = list(map(int, input().split()))\n    pair = [[price[i], fuel[i]] for i in range(n)]\n    pair.sort(key=lambda x: x[0])\n    ans = 0\n    temp = 0\n    for (i, j) in pair:\n        if not n:\n            break\n        val = min(n, j)\n        n -= val\n        ans += i * val\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    arr = sorted([(l1[i], l2[i]) for i in range(n)], key=lambda x: x[1])\n    cost = 0\n    d_c = 0\n    for i in range(n):\n        if d_c + arr[i][0] >= n:\n            fuel_need = n - d_c\n            cost += fuel_need * arr[i][1]\n            break\n        else:\n            d_c += arr[i][0]\n            cost += arr[i][0] * arr[i][1]\n    print(cost)", "import os.path\nimport sys\nfrom math import *\nfrom math import floor, gcd, fabs, factorial, fmod, sqrt, inf, log\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef inp():\n    return sys.stdin.readline().strip()\nfor _ in range(int(inp())):\n    n = int(input())\n    arr = list(map(int, inp().split()))\n    brr = list(map(int, inp().split()))\n    ml = sorted([[brr[i], arr[i]] for i in range(n)])\n    (x, res) = [0] * 2\n    while n > 0:\n        if ml[x][1] > n:\n            ml[x][1] = n\n        res += ml[x][0] * ml[x][1]\n        n -= ml[x][1]\n        x += 1\n    print(res)", "for i in range(int(input())):\n    n = int(input())\n    fi = list(map(int, input().split()))\n    ci = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append([ci[i], fi[i]])\n    a.sort()\n    c = 0\n    fue = 0\n    for i in range(n):\n        fu = min(a[i][1], n - fue)\n        c += fu * a[i][0]\n        fue += fu\n        if fue == n:\n            break\n    print(c)", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    fuel = list(map(int, input().split()))\n    cost = list(map(int, input().split()))\n    sorted_indices = [i[0] for i in sorted(enumerate(cost), key=lambda i: i[1])]\n    ans = 0\n    distleft = n\n    for car in sorted_indices:\n        cardist = min(fuel[car], distleft)\n        distleft -= cardist\n        ans += cardist * cost[car]\n        if distleft == 0:\n            break\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    fi = list(map(int, input().split()))\n    ci = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append([ci[i], fi[i]])\n    a.sort()\n    c = 0\n    fue = 0\n    for i in range(n):\n        fu = min(a[i][1], n - fue)\n        c += fu * a[i][0]\n        fue += fu\n        if fue == n:\n            break\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    fi = list(map(int, input().split()))\n    ci = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append([ci[i], fi[i]])\n    a.sort()\n    c = 0\n    fue = 0\n    for i in range(n):\n        fu = min(a[i][1], n - fue)\n        c += fu * a[i][0]\n        fue += fu\n        if fue == n:\n            break\n    print(c)", "import sys, math, itertools, random, bisect\nfrom collections import defaultdict\nINF = 10 ** 18\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nmod = 10 ** 9 + 7\ntest = 1\ntest = int(input())\nfor _ in range(test):\n    (n,) = get_ints()\n    a = get_array()\n    b = get_array()\n    c = []\n    for i in range(n):\n        c.append([b[i], a[i]])\n    c.sort()\n    cost = 0\n    fuel = 0\n    for i in range(n):\n        x = min(c[i][1], n - fuel)\n        cost += x * c[i][0]\n        fuel += x\n        if fuel == n:\n            break\n    print(cost)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    fuel = list(map(int, input().split()))\n    cost = list(map(int, input().split()))\n    sorted_indices = [i[0] for i in sorted(enumerate(cost), key=lambda i: i[1])]\n    ans = 0\n    distleft = n\n    for car in sorted_indices:\n        cardist = min(fuel[car], distleft)\n        distleft -= cardist\n        ans += cardist * cost[car]\n        if distleft == 0:\n            break\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [0] * n\n    i = 0\n    for ele in list(map(int, input().split())):\n        arr[i] = [ele, i]\n        i += 1\n    costs = list(map(int, input().split()))\n    prevArrCosts = {}\n    for i in range(len(costs)):\n        prevArrCosts[i] = costs[i]\n    costs.sort()\n    arr = sorted(arr, key=lambda k: prevArrCosts[k[1]])\n    arr = [l[0] for l in arr]\n    fuel = 0\n    amount = 0\n    for i in range(n):\n        fill = min(arr[i], n - fuel)\n        amount += fill * costs[i]\n        fuel += fill\n        if fuel == n:\n            print(amount)\n            break\n    else:\n        print('not possible')", "for _ in range(int(input())):\n    n = int(input())\n    z = list(zip(list(map(int, input().split())), list(map(int, input().split()))))\n    z.sort(key=lambda x: x[1])\n    price = 0\n    for i in range(n):\n        if z[i][0] >= n:\n            price += n * z[i][1]\n            break\n        else:\n            price += z[i][0] * z[i][1]\n            n -= z[i][0]\n    print(price)", "for _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    z = list(zip(c, f))\n    z.sort()\n    m = n\n    price = 0\n    for i in range(n):\n        if z[i][1] >= m:\n            price += m * z[i][0]\n            break\n        else:\n            price += z[i][1] * z[i][0]\n            m -= z[i][1]\n    print(price)", "for u in range(int(input())):\n    n = int(input())\n    gas = list(map(int, input().split()))[:n]\n    cost = list(map(int, input().split()))[:n]\n    list1 = []\n    for i in range(0, len(gas), 1):\n        list1.append([cost[i], gas[i]])\n    list1.sort()\n    distleft = n\n    totalcost = 0\n    for j in range(0, len(list1), 1):\n        cardist = min(list1[j][1], distleft)\n        distleft -= cardist\n        totalcost += list1[j][0] * cardist\n        if distleft <= 0 or j == len(list1) - 1:\n            break\n    print(totalcost)", "for u in range(int(input())):\n    n = int(input())\n    gas = list(map(int, input().split()))[:n]\n    cost = list(map(int, input().split()))[:n]\n    list1 = []\n    for i in range(0, len(gas), 1):\n        list1.append([cost[i], gas[i]])\n    list1.sort(key=lambda x: x[0])\n    distleft = n\n    totalcost = 0\n    for j in range(0, len(list1), 1):\n        cardist = min(list1[j][1], distleft)\n        distleft -= cardist\n        totalcost += list1[j][0] * cardist\n        if distleft <= 0 or j == len(list1) - 1:\n            break\n    print(totalcost)", "for _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[i] = [c[i], f[i]]\n    a = list(d.values())\n    a.sort(key=lambda x: x[0])\n    litres = 0\n    coins = 0\n    for car in a:\n        if litres >= n:\n            break\n        l = min(car[1], n - litres)\n        price = l * car[0]\n        litres += l\n        coins += price\n    print(coins)", "for _ in range(int(input())):\n    n = int(input())\n    fuel = list(map(int, input().split()))\n    cost = list(map(int, input().split()))\n    sort = [item[0] for item in sorted(enumerate(cost), key=lambda item: item[1])]\n    distleft = n\n    ans = 0\n    for car in sort:\n        cardist = min(fuel[car], distleft)\n        distleft -= cardist\n        ans += cardist * cost[car]\n        if distleft == 0:\n            break\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    cap = list(map(int, input().split()))\n    cost = list(map(int, input().split()))\n    indices = [i[0] for i in sorted(enumerate(cost), key=lambda i: i[1])]\n    distLeft = n\n    ans = 0\n    for car in indices:\n        carDist = min(cap[car], distLeft)\n        distLeft -= carDist\n        ans += carDist * cost[car]\n        if distLeft <= 0:\n            break\n    print(ans)", "t = int(input())\nfor T in range(t):\n    nu = int(input())\n    fuel = list(map(int, input().split()))\n    coin = list(map(int, input().split()))\n    a = []\n    for i in range(len(coin)):\n        a.append((coin[i], fuel[i]))\n    sorta = sorted(a)\n    cnt = 0\n    ans = 0\n    for i in range(len(sorta)):\n        if cnt >= nu:\n            break\n        if sorta[i][1] != 0:\n            if cnt + sorta[i][1] > nu:\n                b = nu - cnt\n                cnt = nu\n            else:\n                cnt += sorta[i][1]\n                b = sorta[i][1]\n            ans += b * sorta[i][0]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    indices = [i[0] for i in sorted(enumerate(c), key=lambda x: x[1])]\n    distance = n\n    min_cost = 0\n    for value in indices:\n        dist = min(f[value], distance)\n        distance = distance - dist\n        min_cost += dist * c[value]\n        if distance <= 0:\n            break\n    print(min_cost)", "from sys import stdin, stdout\ninput = stdin.readline\nimport math, bisect\nfrom itertools import permutations\nfor _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l.append([c[i], f[i]])\n    l.sort()\n    tot = 0\n    ans = 0\n    for i in range(n):\n        if tot + l[i][1] <= n:\n            ans += l[i][0] * l[i][1]\n            tot += l[i][1]\n        else:\n            ans += l[i][0] * (n - tot)\n            tot = n\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    cf = []\n    for i in range(n):\n        cf.append((c[i], f[i]))\n    cf.sort(key=lambda x: x[0])\n    cost = 0\n    rem = n\n    for i in range(n):\n        selectedFuel = min(rem, cf[i][1])\n        rem -= selectedFuel\n        cost += selectedFuel * cf[i][0]\n        if rem == 0:\n            break\n    print(cost)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    gasoline = list(map(int, input().split()))\n    cost = list(map(int, input().split()))\n    arr = []\n    for i in range(len(cost)):\n        arr.append((cost[i], gasoline[i]))\n    arr = sorted(arr)\n    (current_cost, current_gasoline) = (0, 0)\n    for cars in arr:\n        if current_gasoline + cars[1] >= n:\n            current_cost += cars[0] * (n - current_gasoline)\n            break\n        else:\n            current_cost += cars[0] * cars[1]\n            current_gasoline += cars[1]\n    print(current_cost)", "def solve(n, F, C):\n    F = [f for (_, f) in sorted(zip(C, F))]\n    C = sorted(C)\n    s = sum(F)\n    surplusCapacity = s - n\n    i = n - 1\n    while i > -1 and surplusCapacity - F[i] >= 0:\n        surplusCapacity -= F[i]\n        F[i] = 0\n        i -= 1\n    F[i] -= surplusCapacity\n    totalCoins = 0\n    for i in range(n):\n        totalCoins += F[i] * C[i]\n    return totalCoins\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    F = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    result = solve(n, F, C)\n    print(result)", "for _ in range(int(input())):\n    n = int(input())\n    fuels = list(map(int, input().split()))\n    coins = list(map(int, input().split()))\n    temp = []\n    for i in range(n):\n        temp.append([coins[i], fuels[i]])\n    temp.sort()\n    cost = fuel = 0\n    for i in range(n):\n        if fuel >= n:\n            break\n        else:\n            cost += temp[i][1] * temp[i][0]\n            fuel += temp[i][1]\n    if fuel != n:\n        extra = fuel - n\n        cost -= extra * temp[i - 1][0]\n    print(cost)", "t = int(input())\nfor T in range(t):\n    nu = int(input())\n    fuel = list(map(int, input().split()))\n    coin = list(map(int, input().split()))\n    a = []\n    for i in range(len(coin)):\n        a.append((coin[i], fuel[i]))\n    sorta = sorted(a)\n    cnt = 0\n    ans = 0\n    for i in range(len(sorta)):\n        if cnt >= nu:\n            break\n        if sorta[i][1] != 0:\n            if cnt + sorta[i][1] > nu:\n                b = nu - cnt\n                cnt = nu\n            else:\n                cnt += sorta[i][1]\n                b = sorta[i][1]\n            ans += b * sorta[i][0]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    fuel = list(map(int, input().split()))\n    cost = list(map(int, input().split()))\n    cl = []\n    for i in range(n):\n        cl.append((cost[i], fuel[i]))\n    sort_cl = sorted(cl)\n    dis = 0\n    price = 0\n    for i in range(n):\n        if dis >= n:\n            break\n        if sort_cl[i][1] != 0:\n            if dis + sort_cl[i][1] > n:\n                z = n - dis\n                dis = n\n            else:\n                dis += sort_cl[i][1]\n                z = sort_cl[i][1]\n            price += z * sort_cl[i][0]\n    print(price)", "from sys import stdin, stdout\nfrom math import floor, gcd, fabs, factorial, fmod, sqrt, inf, log\nfrom collections import defaultdict as dd, deque\nfrom heapq import merge, heapify, heappop, heappush, nsmallest\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nmod = pow(10, 9) + 7\nmod2 = 998244353\n\ndef inp():\n    return stdin.readline().strip()\n\ndef out(var, end='\\n'):\n    stdout.write(str(var) + '\\n')\n\ndef outa(*var, end='\\n'):\n    stdout.write(' '.join(map(str, var)) + end)\n\ndef lmp():\n    return list(mp())\n\ndef mp():\n    return map(int, inp().split())\n\ndef smp():\n    return map(str, inp().split())\n\ndef l1d(n, val=0):\n    return [val for i in range(n)]\n\ndef l2d(n, m, val=0):\n    return [l1d(n, val) for j in range(m)]\n\ndef remadd(x, y):\n    return 1 if x % y else 0\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\ndef isprime(x):\n    if x <= 1:\n        return False\n    if x in (2, 3):\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(sqrt(x)) + 1, 2):\n        if x % i == 0:\n            return False\n    return True\nfor _ in range(int(inp())):\n    n = int(inp())\n    f = lmp()\n    c = lmp()\n    ml = [(c[i], f[i]) for i in range(n)]\n    ml.sort()\n    cost = 0\n    i = 0\n    d = 0\n    while d < n:\n        j = min(ml[i][1], n - d)\n        cost += ml[i][0] * j\n        d += j\n        i += 1\n    print(cost)", "for t in range(int(input())):\n    n = int(input())\n    fuel = list(map(int, input().split()))\n    cost = list(map(int, input().split()))\n    total = [[fuel[i], cost[i]] for i in range(n)]\n    total.sort(key=lambda x: x[1])\n    dist = 0\n    cost = 0\n    i = 0\n    while dist < n and i < n:\n        if dist + total[i][0] <= n:\n            dist += total[i][0]\n            cost += total[i][1] * total[i][0]\n        else:\n            x = n - dist\n            if x <= total[i][0]:\n                dist += x\n                cost += total[i][1] * x\n        i += 1\n    print(cost)", "for _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    sortedIndices = [item[0] for item in sorted(enumerate(c), key=lambda item: item[1])]\n    distLeft = n\n    ans = 0\n    for car in sortedIndices:\n        carDist = min(distLeft, f[car])\n        distLeft -= carDist\n        ans += carDist * c[car]\n        if distLeft == 0:\n            break\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    v = []\n    for i in range(n):\n        v.append([c[i], f[i]])\n    v.sort()\n    tot = 0\n    ans = 0\n    i = 0\n    while tot < n:\n        diff = v[i][1] if v[i][1] + tot <= n else n - tot\n        tot += v[i][1]\n        ans += diff * v[i][0]\n        i += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    l = list()\n    for i in range(n):\n        l.append([f[i], c[i]])\n    netFuelRequired = n\n    l = sorted(l, key=lambda x: x[1])\n    i = 0\n    cost = 0\n    while netFuelRequired != 0:\n        if l[i][0] <= netFuelRequired:\n            cost += l[i][0] * l[i][1]\n            netFuelRequired -= l[i][0]\n        else:\n            cost += netFuelRequired * l[i][1]\n            netFuelRequired = 0\n        i += 1\n    print(cost)", "test = int(input())\nfor i in range(0, test):\n    n = int(input())\n    litres = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    sorted_ind = [item[0] for item in sorted(enumerate(arr), key=lambda item: item[1])]\n    i = 0\n    z = n\n    cost = 0\n    i = 0\n    while True:\n        if z <= 0:\n            break\n        elif z - litres[sorted_ind[i]] >= 0:\n            z = z - litres[sorted_ind[i]]\n            cost = cost + litres[sorted_ind[i]] * arr[sorted_ind[i]]\n        else:\n            cost = cost + arr[sorted_ind[i]] * z\n            break\n        i = i + 1\n    print(cost)", "T = int(input().strip())\nfor t in range(T):\n    N = int(input().strip())\n    f = list(map(int, input().strip().split(' ')))\n    c = list(map(int, input().strip().split(' ')))\n    combined = [[i, j] for (i, j) in zip(f, c)]\n    combined = sorted(combined, key=lambda x: int(x[1]))\n    cost = 0\n    gas = N\n    for i in range(N):\n        req = min(gas, combined[i][0])\n        gas -= req\n        cost += req * combined[i][1]\n        if gas == 0:\n            break\n    print(cost)", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    m = [int(x) for x in input().split()]\n    x = []\n    for i in range(n):\n        x.append([m[i], l[i]])\n    x = sorted(x, key=lambda x: x[0])\n    ans = 0\n    liter = 0\n    for i in range(n):\n        ans += x[i][0] * max(0, min(n - liter, x[i][1]))\n        liter += min(n - liter, x[i][1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    fuel = list(map(int, input().split()))\n    cost = list(map(int, input().split()))\n    comb = []\n    for i in range(n):\n        comb.append([cost[i], fuel[i]])\n    comb.sort()\n    curcost = 0\n    need = n\n    for i in range(n):\n        cc = comb[i][0]\n        cf = comb[i][1]\n        if cf >= need:\n            curcost += need * cc\n            break\n        else:\n            curcost += cf * cc\n            need -= cf\n    print(curcost)", "def Gasoline(n, FUEL, COST):\n    sortedIndex = [item[0] for item in sorted(enumerate(COST), key=lambda item: item[1])]\n    DistandeLeft = n\n    minimalCost = 0\n    for car in sortedIndex:\n        carDist = min(FUEL[car], DistandeLeft)\n        DistandeLeft -= carDist\n        minimalCost += COST[car] * carDist\n        if DistandeLeft == 0:\n            break\n    return minimalCost\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    FUEL = list(map(int, input().split()))\n    COST = list(map(int, input().split()))\n    result = Gasoline(n, FUEL, COST)\n    print(result)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append((c[i], f[i]))\n    a.sort()\n    cost = 0\n    distance = 0\n    for i in range(n):\n        if distance >= n:\n            break\n        if a[i][1] != 0:\n            if distance + a[i][1] > n:\n                b = n - distance\n                distance = n\n            else:\n                distance += a[i][1]\n                b = a[i][1]\n            cost += b * a[i][0]\n    print(cost)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append((c[i], f[i]))\n    a.sort()\n    cost = 0\n    dis = 0\n    for i in range(n):\n        if dis >= n:\n            break\n        if a[i][1] != 0:\n            if dis + a[i][1] > n:\n                b = n - dis\n                dis = n\n            else:\n                dis += a[i][1]\n                b = a[i][1]\n            cost += b * a[i][0]\n    print(cost)", "def boom1(i):\n    return zipped[i][0] * zipped[i][1]\n\ndef boom():\n    (sss, answer) = (0, 0)\n    for i in range(nn):\n        if sss + zipped[i][1] >= nn:\n            answer += (nn - sss) * zipped[i][0]\n        else:\n            answer += boom1(i)\n        sss += zipped[i][1]\n        if sss >= nn:\n            break\n    return answer\nfor q in range(int(input())):\n    nn = int(input())\n    (oop1, oop2) = (list(map(int, input().split())), list(map(int, input().split())))\n    zipped = sorted(zip(oop2, oop1))\n    print(boom())", "tc = int(input())\nfor t in range(tc):\n    n = int(input())\n    max_gas = [int(i) for i in input().split()]\n    cost = [int(i) for i in input().split()]\n    lst = [(cost[i], max_gas[i]) for i in range(len(cost))]\n    srtd = sorted(lst)\n    tank = 0\n    ans = 0\n    for i in range(len(srtd)):\n        if tank >= n:\n            break\n        if srtd[i][1] + tank > n:\n            ltrs = n - tank\n            tank = n\n            ans += srtd[i][0] * ltrs\n        else:\n            ltrs = srtd[i][1]\n            tank += ltrs\n            ans += srtd[i][0] * ltrs\n    print(ans)", "def coins(total, cars, val):\n    arr = list(zip(cars, val))\n    arr.sort(key=lambda x: x[1])\n    i = 0\n    distance = 0\n    coins = 0\n    while distance != total:\n        if total - distance < arr[i][0]:\n            coins = coins + (total - distance) * arr[i][1]\n            distance = total\n        else:\n            distance = distance + arr[i][0]\n            coins = coins + arr[i][0] * arr[i][1]\n            i = i + 1\n    return coins\nnum = int(input())\nfor i in range(num):\n    total = int(input())\n    cars = list(map(int, input().split()))\n    val = list(map(int, input().split()))\n    print(coins(total, cars, val))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    rem = n\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    g = [[c[i], f[i]] for i in range(n)]\n    g.sort()\n    ans = 0\n    i = 0\n    while i < n:\n        fuel = g[i][1]\n        cst = g[i][0]\n        if fuel < rem:\n            rem -= fuel\n            ans += cst * fuel\n        else:\n            ans += cst * rem\n            rem = 0\n        if rem == 0:\n            break\n        i += 1\n    print(ans)", "t = int(input())\nfor T in range(t):\n    nu = int(input())\n    fuel = list(map(int, input().split()))\n    coin = list(map(int, input().split()))\n    a = []\n    for i in range(len(coin)):\n        a.append((coin[i], fuel[i]))\n    sorta = sorted(a)\n    cnt = 0\n    ans = 0\n    for i in range(len(sorta)):\n        if cnt >= nu:\n            break\n        if sorta[i][1] != 0:\n            if cnt + sorta[i][1] > nu:\n                b = nu - cnt\n                cnt = nu\n            else:\n                cnt += sorta[i][1]\n                b = sorta[i][1]\n            ans += b * sorta[i][0]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    fuel = list(map(int, input().split(' ')))\n    cost = list(map(int, input().split(' ')))\n    sortedCost = [item[0] for item in sorted(enumerate(cost), key=lambda item: item[1])]\n    distance = n\n    answer = 0\n    for car in sortedCost:\n        carDistance = min(fuel[car], distance)\n        distance -= carDistance\n        answer += carDistance * cost[car]\n        if distance == 0:\n            break\n    print(answer)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    capacity = list(map(int, input().strip().split()))\n    price = list(map(int, input().strip().split()))\n    relation = dict()\n    for i in range(n):\n        p = price[i]\n        c = capacity[i]\n        if p not in relation:\n            relation[p] = c\n        else:\n            relation[p] += c\n    sorted_price = sorted(relation)\n    net_capacity = 0\n    net_price = 0\n    for p in sorted_price:\n        c = relation[p]\n        if net_capacity + c < n:\n            net_price += c * p\n            net_capacity += c\n        else:\n            net_price += (n - net_capacity) * p\n            break\n    print(net_price)", "for _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    l = list()\n    for i in range(n):\n        l.append((e[i], f[i]))\n    l.sort()\n    ans = 0\n    su = 0\n    for i in range(n):\n        if l[i][1] + su <= n:\n            su += l[i][1]\n            ans += l[i][0] * l[i][1]\n        else:\n            ans += (n - su) * l[i][0]\n            break\n    print(ans)", "import sys\nimport math\nfrom collections import defaultdict, Counter\ninput = sys.stdin.readline\n\ndef print(x):\n    sys.stdout.write(str(x) + '\\n')\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    s = []\n    for (a, b) in zip(c, f):\n        s.append([a, b])\n    s.sort()\n    cur = 0\n    ans = 0\n    for j in s:\n        if cur + j[1] <= n:\n            cur += j[1]\n            ans += j[0] * j[1]\n        else:\n            ans += j[0] * (n - cur)\n            break\n    print(ans)", "T = int(input())\nfor i in range(0, T):\n    N = int(input())\n    f = list(map(int, input().split(' ')))\n    c = list(map(int, input().split(' ')))\n    cost = 0\n    coin_fuel = sorted(zip(c, f))\n    i = 0\n    while True:\n        cost = cost + min(coin_fuel[i][1], N) * coin_fuel[i][0]\n        N = N - min(coin_fuel[i][1], N)\n        if N == 0:\n            print(cost)\n            break\n        i = i + 1", "for _ in range(int(input())):\n    n = int(input())\n    fuel = list(map(int, input().split()))\n    cost = list(map(int, input().split()))\n    sorted_indicesC = [i[0] for i in sorted(enumerate(cost), key=lambda x: x[1])]\n    ans = 0\n    distleft = n\n    for i in sorted_indicesC:\n        temp = min(fuel[i], distleft)\n        distleft -= temp\n        ans += temp * cost[i]\n        if distleft == 0:\n            break\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    capacity = list(map(int, input().split()))\n    coins = list(map(int, input().split()))\n    if coins == [coins[0]] * n:\n        print(n * coins[0])\n    elif capacity.count(0) == n - 1:\n        i = capacity.index(max(capacity))\n        c = coins[i]\n        print(c * n)\n    else:\n        i = coins.index(min(coins))\n        if capacity[i] >= n:\n            c = coins[i]\n            print(c * n)\n        else:\n            a = []\n            for i in range(n):\n                a.append([coins[i], capacity[i]])\n            a = sorted(a)\n            cost = 0\n            rem = n\n            for el in a:\n                if rem == 0:\n                    break\n                elif el[1] > rem:\n                    cost += rem * el[0]\n                    rem = 0\n                else:\n                    cost += el[1] * el[0]\n                    rem -= el[1]\n            print(cost)", "for lol in range(int(input())):\n    n = int(input())\n    (f, c) = (list(map(int, input().split())), list(map(int, input().split())))\n    (a, b, bc) = (sorted(c), [], [])\n    for i in range(n):\n        t = []\n        t.append(c[i])\n        t.append(f[i])\n        b.append(t)\n    b.sort()\n    (tgt, cost) = (n, 0)\n    for i in range(len(b)):\n        amt = min(tgt, b[i][1])\n        cost += amt * b[i][0]\n        tgt -= amt\n        if tgt <= 0:\n            break\n    print(cost)", "import numpy as np\nx = int(input())\nfor _ in range(x):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    k = np.argsort(c)\n    (d, cost, i) = (0, 0, 0)\n    while d < n:\n        d += l[k[i]]\n        cost += c[k[i]] * l[k[i]]\n        i += 1\n    if d > n:\n        cost = cost - (d - n) * c[k[i - 1]]\n    print(cost)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    arr1 = list(map(int, input().split(' ')))\n    sort = [item[0] for item in sorted(enumerate(arr1), key=lambda item: item[1])]\n    dis = n\n    dis1 = 0\n    ans = 0\n    for i in sort:\n        dis1 = min(dis, arr[i])\n        dis -= dis1\n        ans += dis1 * arr1[i]\n        if dis == 0:\n            break\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    arr1 = list(map(int, input().split(' ')))\n    sort = [item[0] for item in sorted(enumerate(arr1), key=lambda item: item[1])]\n    dis = n\n    dis1 = 0\n    ans = 0\n    for i in sort:\n        dis1 = min(dis, arr[i])\n        dis -= dis1\n        ans += dis1 * arr1[i]\n        if dis == 0:\n            break\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    arr = sorted([(l1[i], l2[i]) for i in range(n)], key=lambda x: x[1])\n    cost = 0\n    d_c = 0\n    for i in range(n):\n        if d_c + arr[i][0] >= n:\n            fuel_need = n - d_c\n            cost += fuel_need * arr[i][1]\n            break\n        else:\n            d_c += arr[i][0]\n            cost += arr[i][0] * arr[i][1]\n    print(cost)", "for i in range(int(input())):\n    n = int(input())\n    d = []\n    car = list(map(int, input().split(' ')))\n    cost = list(map(int, input().split(' ')))\n    for j in range(0, len(car)):\n        d.append((cost[j], car[j]))\n    d.sort()\n    total = 0\n    for k in range(len(car)):\n        if n <= 0:\n            break\n        if d[k][1] != 0:\n            if d[k][1] < n:\n                total = total + d[k][0] * d[k][1]\n                n = n - d[k][1]\n            else:\n                total = total + n * d[k][0]\n                n = 0\n    print(total)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    cost = 0\n    km = n\n    l = sorted(zip(c, f))\n    (c, f) = zip(*l)\n    for i in range(n):\n        if km >= f[i]:\n            km -= f[i]\n            cost += c[i] * f[i]\n        else:\n            cost += c[i] * km\n            km = 0\n        if km == 0:\n            break\n    print(cost)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    fuel = list(map(int, input().split()))\n    cost = list(map(int, input().split()))\n    li = []\n    for i in range(n):\n        li.append([cost[i], i])\n    li.sort()\n    sort_index = []\n    for x in li:\n        sort_index.append(x[1])\n    distance = n\n    ans = 0\n    for j in sort_index:\n        carDist = min(fuel[j], distance)\n        distance -= carDist\n        ans += cost[j] * carDist\n        if distance == 0:\n            break\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    fuel = list(map(int, input().split()))\n    cost = list(map(int, input().split()))\n    li = []\n    for i in range(n):\n        li.append([cost[i], i])\n    li.sort()\n    sort_index = []\n    for x in li:\n        sort_index.append(x[1])\n    distance = n\n    ans = 0\n    for j in sort_index:\n        carDist = min(fuel[j], distance)\n        distance -= carDist\n        ans += cost[j] * carDist\n        if distance == 0:\n            break\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    fuel = list(map(int, input().split()))\n    cost = list(map(int, input().split()))\n    li = []\n    for i in range(n):\n        li.append([cost[i], i])\n    li.sort()\n    sort_index = []\n    for x in li:\n        sort_index.append(x[1])\n    distance = n\n    ans = 0\n    for j in sort_index:\n        carDist = min(fuel[j], distance)\n        distance -= carDist\n        ans += cost[j] * carDist\n        if distance == 0:\n            break\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    merged = []\n    for i in range(n):\n        merged.append((c[i], f[i]))\n    merged = sorted(merged)\n    req_fuel = n\n    total_cost = 0\n    for i in range(n):\n        no = merged[i][1]\n        if no > req_fuel:\n            no = req_fuel\n        total_cost += no * merged[i][0]\n        req_fuel -= no\n        if req_fuel == 0:\n            break\n    print(total_cost)", "for _ in range(int(input())):\n    N = int(input())\n    fuel = [int(x) for x in input().split()]\n    cost = [int(x) for x in input().split()]\n    sortedIndices = [item[0] for item in sorted(enumerate(cost), key=lambda item: item[1])]\n    final_cost = 0\n    distance_left = N\n    distance_travelled = 0\n    for car in sortedIndices:\n        distance_travelled = min(fuel[car], distance_left)\n        distance_left = distance_left - distance_travelled\n        final_cost += distance_travelled * cost[car]\n        if distance_left == 0:\n            break\n    print(final_cost)", "for _ in range(int(input())):\n    n = int(input())\n    f = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    de = [(c[i], f[i]) for i in range(n)]\n    de.sort()\n    k = 0\n    i = 0\n    ans = 0\n    while k < n:\n        lm = n - k\n        ans += min(lm, de[i][1]) * de[i][0]\n        k += min(lm, de[i][1])\n        i += 1\n    print(ans)", "t = int(input())\nfor T in range(t):\n    nu = int(input())\n    fuel = list(map(int, input().split()))\n    coin = list(map(int, input().split()))\n    a = []\n    for i in range(len(coin)):\n        a.append((coin[i], fuel[i]))\n    sorta = sorted(a)\n    cnt = 0\n    ans = 0\n    for i in range(len(sorta)):\n        if cnt >= nu:\n            break\n        if sorta[i][1] != 0:\n            if cnt + sorta[i][1] > nu:\n                b = nu - cnt\n                cnt = nu\n            else:\n                cnt += sorta[i][1]\n                b = sorta[i][1]\n            ans += b * sorta[i][0]\n    print(ans)", "t = int(input())\n\ndef sortSecond(val):\n    return val[1]\nfor i in range(t):\n    n = int(input())\n    (answer, temp) = (0, n)\n    fuel = list(map(int, input().split()))\n    coins = list(map(int, input().split()))\n    zipped = list(zip(fuel, coins))\n    zipped.sort(key=sortSecond)\n    for i in range(n):\n        if temp > 0:\n            if temp - zipped[i][0] <= 0:\n                answer += temp * zipped[i][1]\n                temp = 0\n            else:\n                answer += zipped[i][0] * zipped[i][1]\n                temp -= zipped[i][0]\n        else:\n            break\n    print(answer)", "import numpy\nfor i in range(int(input())):\n    N = int(input())\n    fuel = list(map(int, input().split()))\n    cost = list(map(int, input().split()))\n    c = cost\n    s = numpy.array(c)\n    sort_index = numpy.argsort(s)\n    left = N\n    ans = 0\n    for car in sort_index:\n        car_dist = min(fuel[car], left)\n        left = left - car_dist\n        ans += car_dist * cost[car]\n        if left == 0:\n            break\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    cf = []\n    f = list(map(int, input().split(' ')))\n    c = list(map(int, input().split(' ')))\n    for i in range(n):\n        cf.append([c[i], f[i]])\n    cf.sort()\n    flag = 1\n    total = 0\n    fuel = 0\n    distance = 0\n    for i in range(n):\n        if fuel >= n:\n            print(total)\n            flag = 0\n            break\n        else:\n            temp = min(cf[i][1], n - distance)\n            distance = distance + temp\n            fuel = fuel + temp\n            total = total + cf[i][0] * temp\n    if flag:\n        print(total)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    f = list(map(int, input().split(' ')))\n    c = list(map(int, input().split(' ')))\n    cost = 0\n    dist = n\n    comb = list(zip(c, f))\n    comb.sort()\n    c = comb[0]\n    f = comb[1]\n    ch_c = []\n    ch_f = []\n    for (i, j) in comb:\n        ch_c.append(i)\n        ch_f.append(j)\n    for i in range(n):\n        fuel = min(dist, ch_f[i])\n        cost += fuel * ch_c[i]\n        dist -= fuel\n        if dist == 0:\n            break\n    print(cost)", "try:\n    for i in range(int(input())):\n        n = int(int(input()))\n        f = [int(i) for i in input().split()]\n        c = [int(i) for i in input().split()]\n        ans = list(zip(f, c))\n        ans.sort(key=lambda x: x[1])\n        x = 0\n        for i in ans:\n            er = min(i[0], n)\n            n -= er\n            x += er * i[1]\n        print(x)\nexcept:\n    pass", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [0] * n\n    i = 0\n    for ele in list(map(int, input().split())):\n        arr[i] = [ele, i]\n        i += 1\n    costs = list(map(int, input().split()))\n    prevArrCosts = {}\n    for i in range(len(costs)):\n        prevArrCosts[i] = costs[i]\n    costs.sort()\n    arr = sorted(arr, key=lambda k: prevArrCosts[k[1]])\n    arr = [l[0] for l in arr]\n    fuel = 0\n    amount = 0\n    for i in range(n):\n        fill = min(arr[i], n - fuel)\n        amount += fill * costs[i]\n        fuel += fill\n        if fuel == n:\n            print(amount)\n            break\n    else:\n        print('not possible')", "for _ in range(int(input())):\n    n = int(input())\n    fi = list(map(int, input().split()))\n    ci = list(map(int, input().split()))\n    fc = list(zip(fi, ci))\n    fc.sort(key=lambda e: e[1])\n    ans = 0\n    for (f, c) in fc:\n        cnt = min(f, n)\n        n -= cnt\n        ans += cnt * c\n    print(ans)", "from bisect import insort\nfor _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    a = [(f[i], c[i], i) for i in range(n)]\n    a.sort(key=lambda x: x[1])\n    p = 0\n    t = 0\n    for i in range(n):\n        if p + a[i][0] >= n:\n            t += (n - p) * a[i][1]\n            break\n        t += a[i][0] * a[i][1]\n        p += a[i][0]\n    print(t)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l.append([f[i], c[i]])\n    l = sorted(l, key=lambda x: x[1])\n    t = n\n    c = 0\n    for i in range(n):\n        if l[i][0] < t:\n            t -= l[i][0]\n            c += l[i][0] * l[i][1]\n        else:\n            c += t * l[i][1]\n            break\n    print(c)", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    li = [i[0] for i in sorted(enumerate(c), key=lambda x: x[1])]\n    re = n\n    co = 0\n    for j in range(0, n):\n        y = min(f[li[j]], re)\n        re = re - y\n        co += c[li[j]] * y\n        if re == 0:\n            break\n    print(co)", "for _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l.append([l1[i], l2[i]])\n    l = sorted(l, key=lambda x: x[1])\n    t = n\n    c = 0\n    for i in range(n):\n        if l[i][0] < t:\n            t -= l[i][0]\n            c += l[i][0] * l[i][1]\n        else:\n            c += t * l[i][1]\n            break\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    fi = list(map(int, input().split()))\n    ci = list(map(int, input().split()))\n    Si = list(enumerate(ci))\n    new = [x[0] for x in sorted(Si, key=lambda x: x[1])]\n    d = n\n    cost = 0\n    for i in new:\n        cd = min(fi[i], d)\n        cost += cd * ci[i]\n        d -= cd\n        if d == 0:\n            break\n    print(cost)", "for _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    coin = list(map(int, input().split()))\n    coins = 0\n    dist = n\n    clist = [i[0] for i in sorted(enumerate(coin), key=lambda x: x[1])]\n    for j in clist:\n        car = min(f[j], dist)\n        dist -= car\n        coins += car * coin[j]\n        if dist == 0:\n            break\n    print(coins)", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    new = enumerate(c)\n    a = dict(new)\n    a = dict(sorted(a.items(), key=lambda item: item[1]))\n    b = []\n    for key in a:\n        b.append(key)\n    left_dist = n\n    i = 0\n    cost = 0\n    while left_dist > 0:\n        if left_dist > f[b[i]]:\n            left_dist = left_dist - f[b[i]]\n            cost = f[b[i]] * c[b[i]] + cost\n        else:\n            cost = left_dist * c[b[i]] + cost\n            left_dist = 0\n        i = i + 1\n    print(cost)", "for _ in range(int(input())):\n    N = int(input())\n    FUEL = list(map(int, input().split()))\n    COST = list(map(int, input().split()))\n    sortedindC = [i[0] for i in sorted(enumerate(COST), key=lambda i: i[1])]\n    dist = N\n    ans = 0\n    for i in sortedindC:\n        car = min(FUEL[i], dist)\n        dist -= car\n        ans += car * COST[i]\n        if dist == 0:\n            break\n    print(ans)", "def solve(n, a, b):\n    combo = list()\n    for i in range(n):\n        combo.append((b[i], a[i]))\n    qwerty = sorted(combo)\n    cnt = 0\n    res = 0\n    for i in range(n):\n        if cnt >= n:\n            break\n        if qwerty[i][1] != 0:\n            if cnt + qwerty[i][1] > n:\n                mht = n - cnt\n                cnt = n\n            else:\n                cnt += qwerty[i][1]\n                mht = qwerty[i][1]\n            res += mht * qwerty[i][0]\n    return res\nnoOfTestCases = int(input())\nfor i in range(noOfTestCases):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = solve(n, a, b)\n    print(ans)", "import sys\nimport math\nimport bisect\nfrom math import sqrt\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef iinput():\n    return int(input())\n\ndef rinput():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\nmod = int(1000000000.0) + 7\nfor _ in range(iinput()):\n    n = iinput()\n    f = get_list()\n    c = get_list()\n    c2 = list(enumerate(c))\n    c2.sort(key=lambda x: x[1])\n    f2 = [f[item[0]] for item in c2]\n    cost = 0\n    distLeft = n\n    for i in range(n):\n        distComp = min(distLeft, f2[i])\n        cost += distComp * c2[i][1]\n        distLeft -= distComp\n        if distLeft <= 0:\n            break\n    print(cost)", "import sys, io, os, time\nfrom collections import defaultdict\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import combinations\nfrom itertools import permutations\nimport bisect, math, heapq\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\ninput = sys.stdin.readline\nfor ii in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    arr = [[c[i], f[i], i] for i in range(n)]\n    arr.sort(key=lambda x: (x[0], x[1]))\n    ans = 0\n    rem = n\n    for i in range(n):\n        if rem:\n            need = min(arr[i][1], rem)\n            ans += arr[i][0] * need\n            rem -= need\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    coin = list(map(int, input().split()))\n    c = 0\n    a = []\n    for i in range(len(f)):\n        a.append((coin[i], f[i]))\n    a1 = sorted(a)\n    ans = n\n    i = 0\n    while ans > 0:\n        if a1[i][1] >= ans:\n            c += a1[i][0] * ans\n            break\n        else:\n            t = a1[i][0] * a1[i][1]\n            ans = ans - a1[i][1]\n            c += t\n        i += 1\n    print(c)", "import math\n\ndef solve():\n    n = int(input())\n    fuel = list(map(int, input().split()))\n    coin = list(map(int, input().split()))\n    a = []\n    for i in range(len(coin)):\n        a.append((coin[i], fuel[i]))\n    a.sort()\n    cnt = 0\n    ans = 0\n    for i in range(len(a)):\n        if cnt >= n:\n            break\n        if a[i][1] != 0:\n            if cnt + a[i][1] > n:\n                b = n - cnt\n                cnt = n\n            else:\n                cnt += a[i][1]\n                b = a[i][1]\n            ans += b * a[i][0]\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "import math\n\ndef solve():\n    n = int(input())\n    fuel = list(map(int, input().split()))\n    coin = list(map(int, input().split()))\n    a = []\n    for i in range(len(coin)):\n        a.append((coin[i], fuel[i]))\n    a.sort()\n    cnt = 0\n    ans = 0\n    for i in range(len(a)):\n        if cnt >= n:\n            break\n        if a[i][1] != 0:\n            if cnt + a[i][1] > n:\n                b = n - cnt\n                cnt = n\n            else:\n                cnt += a[i][1]\n                b = a[i][1]\n            ans += b * a[i][0]\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    g = [i[0] for i in sorted(enumerate(c), key=lambda i: i[1])]\n    ans = 0\n    rem = n\n    for j in g:\n        d = min(f[j], rem)\n        rem = rem - d\n        ans += c[j] * d\n        if rem == 0:\n            break\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    fuel = list(map(int, input().split()))\n    cost = list(map(int, input().split()))\n    price = list(zip(cost, fuel))\n    price.sort()\n    amount = 0\n    for (c, f) in price:\n        t = min(n, f)\n        amount += c * t\n        n -= t\n        if n <= 0:\n            break\n    print(amount)", "for _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    z = [(c[i], f[i]) for i in range(n)]\n    z.sort(key=lambda x: x[0])\n    dis = 0\n    cos = 0\n    for item in z:\n        if dis >= n:\n            break\n        k = min(n - dis, item[1])\n        dis += k\n        cos += k * item[0]\n    print(cos)", "for _ in range(int(input())):\n    n = int(input())\n    fi = [int(i) for i in input().split()]\n    ci = [int(j) for j in input().split()]\n    fici = []\n    for i in range(n):\n        fici.append({'fi': fi[i], 'ci': ci[i]})\n    s_fici = sorted(fici, key=lambda k: k['ci'])\n    number_of_litres = 0\n    cost = 0\n    for i in s_fici:\n        if n - number_of_litres > 0:\n            fuel_taken = i['fi'] if i['fi'] <= n - number_of_litres else n - number_of_litres\n            cost += fuel_taken * i['ci']\n            number_of_litres += fuel_taken\n    print(cost)", "for _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    z = [(c[i], f[i]) for i in range(n)]\n    z.sort(key=lambda x: x[0])\n    dis = 0\n    cos = 0\n    for item in z:\n        if dis >= n:\n            break\n        k = min(n - dis, item[1])\n        dis += k\n        cos += k * item[0]\n    print(cos)", "def Ans(L, n):\n    L.sort(key=lambda x: x[1])\n    cost = 0\n    req = n\n    for i in L:\n        take = min(req, i[0])\n        cost += take * i[1]\n        req -= take\n    if req == 0:\n        return cost\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    F = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    L = []\n    for i in range(n):\n        L.append([F[i], C[i]])\n    print(Ans(L, n))", "for _ in range(int(input())):\n    n = int(input())\n    fuel = list(map(int, input().split()))\n    cost = list(map(int, input().split()))\n    minimum = [item[0] for item in sorted(enumerate(cost), key=lambda item: item[1])]\n    distleft = n\n    ans = 0\n    for car in minimum:\n        cardist = min(fuel[car], distleft)\n        distleft -= cardist\n        ans += cardist * cost[car]\n        if distleft == 0:\n            break\n    print(ans)", "try:\n    from collections import deque\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        cost = 0\n        f = list(map(int, input().split()))\n        c = list(map(int, input().split()))\n        l = [x[0] for x in sorted(enumerate(c), key=lambda item: item[1])]\n        l = deque(l)\n        distleft = n\n        while True:\n            index = l.popleft()\n            cardist = min(f[index], distleft)\n            cost += c[index] * cardist\n            distleft -= cardist\n            if distleft == 0:\n                print(cost)\n                break\nexcept EOFError:\n    pass", "t = int(input())\nfor T in range(t):\n    nu = int(input())\n    fuel = list(map(int, input().split()))\n    coin = list(map(int, input().split()))\n    a = []\n    for i in range(len(coin)):\n        a.append((coin[i], fuel[i]))\n    sorta = sorted(a)\n    cnt = 0\n    ans = 0\n    for i in range(len(sorta)):\n        if cnt >= nu:\n            break\n        if sorta[i][1] != 0:\n            if cnt + sorta[i][1] > nu:\n                b = nu - cnt\n                cnt = nu\n            else:\n                cnt += sorta[i][1]\n                b = sorta[i][1]\n            ans += b * sorta[i][0]\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    F = [int(n) for n in input().split()]\n    C = [int(n) for n in input().split()]\n    F_C = []\n    for i in range(N):\n        F_C.append([F[i], C[i], i])\n    F_C = [item[2] for item in sorted(F_C, key=lambda e: e[1])]\n    dist = N\n    min_cost = 0\n    ind = 0\n    while dist > 0:\n        min_cost += min(dist, F[F_C[ind]]) * C[F_C[ind]]\n        dist -= F[F_C[ind]]\n        ind += 1\n    print(min_cost)", "def factComb(cost, cap, n):\n    if n <= 1:\n        return 0\n    comb = [(cost[i], cap[i]) for i in range(n)]\n    comb.sort()\n    tot_cost = 0\n    fuel_left = n\n    for i in range(n):\n        consume = min(comb[i][1], fuel_left)\n        tot_cost += consume * comb[i][0]\n        fuel_left -= consume\n        if fuel_left == 0:\n            break\n    return tot_cost\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    f = [int(x) for x in input().split()]\n    cost = [int(x) for x in input().split()]\n    print(factComb(cost, f, n))"]