["n = int(input())\nlst = list(map(int, input().split()))\nbit = [0] * 30\nans = 0\nfor i in range(30):\n    cnt = 0\n    for x in lst:\n        if x & 1 << i:\n            cnt += 1\n    ans += cnt * (cnt - 1) // 2 * (1 << i)\nprint(ans)", "def solve():\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    (count, res) = ([0] * 32, 0)\n    for x in A:\n        p = 1\n        for i in range(32):\n            if x & 1 << i:\n                res += p * count[i]\n                count[i] += 1\n            p *= 2\n    print(res)\nsolve()", "def solve():\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    (count, res) = ([0] * 32, 0)\n    for x in A:\n        p = 1\n        for i in range(32):\n            if x & 1 << i:\n                res += p * count[i]\n                count[i] += 1\n            p *= 2\n    print(res)\nsolve()", "def solve():\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    (count, res) = ([0] * 32, 0)\n    for x in A:\n        p = 1\n        for i in range(32):\n            if x & 1 << i:\n                res += p * count[i]\n                count[i] += 1\n            p *= 2\n    print(res)\nsolve()", "n = int(input())\nnum = list(map(int, input().split()))\nans = 0\nfor i in range(32):\n    ct = 0\n    for j in range(n):\n        if 1 << i & num[j] == 1 << i:\n            ct += 1\n    ans += (1 << i) * (ct * (ct - 1)) // 2\nprint(ans)", "n = int(input())\nnum = list(map(int, input().split()))\nans = 0\nfor i in range(32):\n    ct = 0\n    for j in range(n):\n        if 1 << i & num[j] == 1 << i:\n            ct += 1\n    ans += (1 << i) * (ct * (ct - 1)) // 2\nprint(ans)", "n = int(input())\nnum = list(map(int, input().split()))\nans = 0\nfor i in range(32):\n    ct = 0\n    for j in range(n):\n        if 1 << i & num[j] == 1 << i:\n            ct += 1\n    ans += (1 << i) * (ct * (ct - 1)) // 2\nprint(ans)", "import sys, threading\nimport math\nimport time\nfrom os import path\nfrom collections import defaultdict, Counter, deque\nfrom bisect import *\nfrom string import ascii_lowercase\nfrom functools import cmp_to_key\nimport heapq\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\nsi = lambda : str(input())\nii = lambda : int(input())\nmii = lambda : map(int, input().split())\nlmii = lambda : list(map(int, input().split()))\ni2c = lambda n: chr(ord('a') + n)\nc2i = lambda c: ord(c) - ord('a')\n\ndef solve():\n    n = ii()\n    ans = 0\n    a = lmii()\n    vec = [0] * 31\n    for i in range(n):\n        for j in range(31):\n            if a[i] & 1 << j:\n                vec[j] += 1\n    for j in range(31):\n        cnt = vec[j] * (vec[j] - 1) // 2\n        ans += cnt * (1 << j)\n    print(ans)\n\ndef main():\n    t = 1\n    if path.exists('/Users/nitishkumar/Documents/Template_Codes/Python/CP/AtCoder/input.txt'):\n        sys.stdin = open('/Users/nitishkumar/Documents/Template_Codes/Python/CP/AtCoder/input.txt', 'r')\n        sys.stdout = open('/Users/nitishkumar/Documents/Template_Codes/Python/CP/AtCoder/output.txt', 'w')\n        start_time = time.time()\n        print('--- %s seconds ---' % (time.time() - start_time))\n    sys.setrecursionlimit(10 ** 5)\n    solve()\nmain()", "n = int(input())\narr = list(map(int, input().split(' ')))\nans = 0\nfor i in range(0, 32):\n    c = 0\n    for a in arr:\n        if a & 1 << i:\n            c += 1\n    x = c * (c - 1) // 2\n    ans += x * (1 << i)\nprint(ans)", "n = int(input())\nL = list(map(int, input().split()))\nbits = [0] * 33\nfor i in range(n):\n    for j in range(0, 33):\n        z = 1 << j\n        if L[i] & z:\n            bits[j] += 1\nans = 0\nfor i in range(33):\n    z = bits[i]\n    if z:\n        y = z * (z - 1) // 2\n        x = 1 << i\n        ans += x * y\nprint(ans)", "n = int(input())\nL = list(map(int, input().split()))\nbits = [0] * 33\nfor i in range(n):\n    for j in range(0, 33):\n        z = 1 << j\n        if L[i] & z:\n            bits[j] += 1\nans = 0\nfor i in range(33):\n    z = bits[i]\n    if z:\n        y = z * (z - 1) // 2\n        x = 1 << i\n        ans += x * y\nprint(ans)", "def ans(arr, n):\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += arr[i] & arr[j]\n    print(ans)\n\ndef ans2(arr, n):\n    bits = [0] * 31\n    for i in arr:\n        z = 1\n        x = 0\n        while z <= i:\n            if z & i:\n                bits[x] += 1\n            x += 1\n            z = z << 1\n    ans = 0\n    x = 1\n    for i in range(31):\n        if bits[i]:\n            res = bits[i] * (bits[i] - 1) / 2\n            res *= x\n            ans += res\n        x *= 2\n    print(int(ans))\nn = int(input())\narr = [int(i) for i in input().split()]\nans2(arr, n)", "t = int(input())\nd1 = [int(a) for a in input().split()]\nmaxlen = 32\ndata = [bin(int(a))[2:].zfill(maxlen) for a in d1]\ns = 0\nfor i in range(maxlen - 1, -1, -1):\n    count = sum([1 for x in data if x[i] == '1'])\n    n = 2 ** (maxlen - 1 - i) * (count * (count - 1) // 2)\n    s += n\nprint(s)", "t = int(input())\nd1 = [int(a) for a in input().split()]\nmaxlen = 32\ndata = [bin(int(a))[2:].zfill(maxlen) for a in d1]\ns = 0\nfor i in range(maxlen - 1, -1, -1):\n    count = sum([1 for x in data if x[i] == '1'])\n    n = 2 ** (maxlen - 1 - i) * (count * (count - 1) // 2)\n    s += n\nprint(s)", "n = int(input())\nlst = list(map(int, input().split()))\nbit = [0] * 30\nans = 0\nfor i in range(30):\n    cnt = 0\n    for x in lst:\n        if x & 1 << i:\n            cnt += 1\n    ans += cnt * (cnt - 1) // 2 * (1 << i)\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(40):\n    ls = 1 << i\n    temp = 0\n    for j in range(n):\n        if ls & a[j]:\n            temp += 1\n    ans += temp * (temp - 1) // 2 * ls\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(40):\n    ls = 1 << i\n    temp = 0\n    for j in range(n):\n        if ls & a[j]:\n            temp += 1\n    ans += temp * (temp - 1) // 2 * ls\nprint(ans)", "n = int(input())\nlst = list(map(int, input().split()))\nbit = [0] * 30\nans = 0\nfor i in range(30):\n    cnt = 0\n    for x in lst:\n        if x & 1 << i:\n            cnt += 1\n    ans += cnt * (cnt - 1) // 2 * (1 << i)\nprint(ans)", "n = int(input())\nlst = list(map(int, input().split()))\nbit = [0] * 30\nans = 0\nfor i in range(30):\n    cnt = 0\n    for x in lst:\n        if x & 1 << i:\n            cnt += 1\n    ans += cnt * (cnt - 1) // 2 * (1 << i)\nprint(ans)", "n = int(input())\nlst = list(map(int, input().split()))\nbit = [0] * 30\nans = 0\nfor i in range(30):\n    cnt = 0\n    for x in lst:\n        if x & 1 << i:\n            cnt += 1\n    ans += cnt * (cnt - 1) // 2 * (1 << i)\nprint(ans)", "from math import *\nfrom collections import *\nfrom functools import *\n\ndef rvi():\n    return [*map(int, input().split())]\nn = int(input())\nt = rvi()\nb = [0] * 31\nfor x in t:\n    for i in range(32):\n        if x >> i & 1:\n            b[i] += 1\nprint(sum([(1 << i) * ((max(0, j - 1) * max(0, j - 1) + max(0, j - 1)) // 2) for (i, j) in enumerate(b)]))", "n = int(input())\nnum = list(map(int, input().split()))\nans = 0\nfor i in range(32):\n    ct = 0\n    for j in range(n):\n        if 1 << i & num[j] == 1 << i:\n            ct += 1\n    ans += (1 << i) * (ct * (ct - 1)) // 2\nprint(ans)", "n = int(input())\nA = list(map(int, input().split()))\nans = 0\nfor i in range(0, 31):\n    count = 0\n    for j in range(n):\n        if A[j] & 1 << i:\n            count += 1\n    ans += (1 << i) * (count * (count - 1)) // 2\nprint(ans)", "from math import log\nimport operator as op\nfrom functools import reduce\n\ndef ncr(n, r):\n    r = min(r, n - r)\n    numer = reduce(op.mul, range(n, n - r, -1), 1)\n    denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom\nN = int(input(''))\nl = list(map(int, input('').split()))\nbits = {}\nsum = 0\nfor i in range(N):\n    elem = l[i]\n    if elem == 0:\n        continue\n    power = int(log(elem, 2))\n    while power >= 0:\n        if elem >= 2 ** power:\n            if power + 1 not in bits:\n                bits[power + 1] = 1\n            else:\n                bits[power + 1] += 1\n            elem -= 2 ** power\n        power -= 1\nfor bit in bits.keys():\n    sum += 2 ** (bit - 1) * ncr(bits[bit], 2)\nprint(sum)", "n = int(input())\nA = list(map(int, input().split()))\nans = 0\nfor i in range(0, 31):\n    count = 0\n    for j in range(n):\n        if A[j] & 1 << i:\n            count += 1\n    ans += (1 << i) * (count * (count - 1)) // 2\nprint(ans)", "import itertools\nimport heapq\nimport collections\nimport math\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef inis():\n    return input().split()\n\ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    l = []\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    for p in range(2, n + 1):\n        if prime[p]:\n            l.append(p)\n    return l\n\ndef isPrime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n        if prime_flag == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef gcd(a):\n    x = 0\n    for p in a:\n        x = math.gcd(x, p)\n    return x\nimport math\n\ndef printDivisors(n):\n    i = 1\n    ans = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                ans.append(i)\n            else:\n                ans.append(i)\n                ans.append(n // i)\n        i = i + 1\n    ans.sort()\n    return ans\n\ndef binaryToDecimal(n):\n    return int(n, 2)\n\ndef holes(s):\n    count = 0\n    for i in s:\n        if s == 'A' or s == 'D' or s == 'O' or (s == 'Q') or (s == 'P') or (s == 'R'):\n            count += 1\n        elif s == 'B':\n            count += 2\n    return count\nn = inp()\na = inlt()\nans = 0\nfor i in range(40):\n    ls = 1 << i\n    temp = 0\n    for j in range(n):\n        if ls & a[j]:\n            temp += 1\n    ans += temp * (temp - 1) // 2 * ls\nprint(ans)", "import itertools\nimport heapq\nimport collections\nimport math\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef inis():\n    return input().split()\n\ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    l = []\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    for p in range(2, n + 1):\n        if prime[p]:\n            l.append(p)\n    return l\n\ndef isPrime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n        if prime_flag == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef gcd(a):\n    x = 0\n    for p in a:\n        x = math.gcd(x, p)\n    return x\nimport math\n\ndef printDivisors(n):\n    i = 1\n    ans = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                ans.append(i)\n            else:\n                ans.append(i)\n                ans.append(n // i)\n        i = i + 1\n    ans.sort()\n    return ans\n\ndef binaryToDecimal(n):\n    return int(n, 2)\n\ndef holes(s):\n    count = 0\n    for i in s:\n        if s == 'A' or s == 'D' or s == 'O' or (s == 'Q') or (s == 'P') or (s == 'R'):\n            count += 1\n        elif s == 'B':\n            count += 2\n    return count\nn = inp()\na = inlt()\nans = 0\nfor i in range(40):\n    ls = 1 << i\n    temp = 0\n    for j in range(n):\n        if ls & a[j]:\n            temp += 1\n    ans += temp * (temp - 1) // 2 * ls\nprint(ans)", "n = int(input())\na = [int(_) for _ in input().split()]\nb = [0] * 30\nfor x in a:\n    for i in range(30):\n        y = x & 1 << i\n        if y != 0:\n            b[i] += 1\ns = 0\nfor i in range(30):\n    s += b[i] * (b[i] - 1) * (1 << i)\nprint(s // 2)", "import sys, math\nn = int(input())\narr = [int(c) for c in input().split()]\ncounts = [0 for i in range(32)]\nfor i in arr:\n    for j in range(32):\n        if i & 1 << j:\n            counts[j] += 1\nans = 0\nfor i in range(32):\n    c = 0\n    if counts[i]:\n        n = counts[i]\n        c = n * (n - 1) // 2\n    ans += (1 << i) * c\nprint(ans)", "n = int(input())\narr = list(map(int, input().split()))[:n]\ntotal = 0\nfor i in range(0, 30):\n    y = 0\n    for j in arr:\n        if j & 2 ** i:\n            y += 1\n    total += y * (y - 1) // 2 * 2 ** i\nprint(total)", "def sol(A):\n    ans = 0\n    for i in range(0, 30 + 1):\n        count = 0\n        for j in A:\n            if 1 << i & j != 0:\n                count = count + 1\n        ans += (1 << i) * (count * (count - 1)) // 2\n    return ans\nn = int(input())\nA = list(map(int, input().split()))\nprint(sol(A))", "def sol(A):\n    ans = 0\n    for i in range(0, 30 + 1):\n        count = 0\n        for j in A:\n            if 1 << i & j != 0:\n                count = count + 1\n        ans += (1 << i) * (count * (count - 1)) // 2\n    return ans\nn = int(input())\nA = list(map(int, input().split()))\nprint(sol(A))", "n = int(input())\nnum = list(map(int, input().split()))\nans = 0\nfor i in range(32):\n    ct = 0\n    for j in range(n):\n        if 1 << i & num[j] == 1 << i:\n            ct += 1\n    ans += (1 << i) * (ct * (ct - 1)) // 2\nprint(ans)", "def modBy2Comb(li):\n    l = len([i % 2 for i in li if i % 2 != 0])\n    return l * (l - 1) // 2\n\ndef divideBy2(li):\n    return [i // 2 for i in li if i // 2 != 0]\n\ndef solve(li):\n    s = 0\n    c = 1\n    while li != []:\n        s += modBy2Comb(li) * c\n        li = divideBy2(li)\n        c *= 2\n    return s\nN = input()\nli = [int(i) for i in input().split(' ')]\nprint(solve(li))", "n = int(input())\nli = list(map(int, input().split()))\nki = [0] * 32\nfor i in range(n):\n    s = str(bin(li[i])[2:])\n    for j in range(len(s)):\n        ki[32 - j - 1] = ki[32 - j - 1] + int(s[len(s) - j - 1])\nc = 0\nfor i in range(32):\n    a = ki[i] * (ki[i] - 1) // 2\n    c = c + 2 ** (31 - i) * a\nprint(c)", "n = int(input())\nnum = list(map(int, input().split()))\nans = 0\nfor i in range(32):\n    ct = 0\n    for j in range(n):\n        if 1 << i & num[j] == 1 << i:\n            ct += 1\n    ans += (1 << i) * (ct * (ct - 1)) // 2\nprint(ans)", "n = int(input())\narr = list(map(int, input().split()))[:n]\ntotal = 0\nfor i in range(0, 30):\n    y = 0\n    for j in arr:\n        if j & 2 ** i:\n            y += 1\n    total += y * (y - 1) // 2 * 2 ** i\nprint(total)", "n = int(input())\nl = list(map(int, input().split()))\nx = 0\nfor i in range(30):\n    y = 0\n    for j in l:\n        if j & 2 ** i:\n            y += 1\n    x += y * (y - 1) // 2 * 2 ** i\nprint(x)", "n = int(input())\nl = list(map(int, input().split()))\nx = 0\nfor i in range(30):\n    y = 0\n    for j in l:\n        if j & 2 ** i:\n            y += 1\n    x += y * (y - 1) // 2 * 2 ** i\nprint(x)", "N = int(input())\nA = list(map(int, input().split()))\nans = 0\nfor b in range(31):\n    c = 0\n    for i in range(0, N):\n        if A[i] & 1 << b:\n            c += 1\n    ans += (1 << b) * (c * (c - 1)) // 2\nprint(ans)", "n = int(input())\nlst = list(map(int, input().split()))\nbit = [0] * 30\nans = 0\nfor i in range(30):\n    count = 0\n    for x in lst:\n        if x & 1 << i:\n            count += 1\n    ans += count * (count - 1) // 2 * (1 << i)\nprint(ans)", "n = int(input())\nl = list(map(int, input().split()))\nx = 0\nfor i in range(30):\n    y = 0\n    for j in l:\n        if j & 2 ** i:\n            y += 1\n    x += y * (y - 1) // 2 * 2 ** i\nprint(x)", "n = int(input())\nl = list(map(int, input().split()))\nx = 0\nfor i in range(32):\n    y = 0\n    for j in l:\n        if j & 2 ** i:\n            y += 1\n    x += y * (y - 1) // 2 * 2 ** i\nprint(x)", "n = int(input())\na = [int(j) for j in input().split()]\nans = 0\nfor i in range(32):\n    cur = 0\n    for j in a:\n        if j & 1 << i:\n            cur += 1\n    ans += (cur - 1) * cur // 2 * (1 << i)\nprint(ans)", "n = int(input())\nN = tuple(filter(lambda a: a != 0, list(map(int, input().split()))))\nans = 0\nfor i in range(32):\n    c = 0\n    for j in N:\n        if j & 1 << i:\n            c += 1\n    ans += c * (c - 1) // 2 * (1 << i)\nprint(ans)", "n = int(input())\narr = list(map(int, input().split()))\nans = 0\nfor i in range(0, 32):\n    k = 0\n    for j in range(0, n):\n        if arr[j] & 1 << i:\n            k = k + 1\n    ans = ans + (1 << i) * (k * (k - 1) // 2)\nprint(ans)", "def pairAndSum(arr, n):\n    ans = 0\n    for i in range(0, 32):\n        k = 0\n        for j in range(0, n):\n            if arr[j] & 1 << i:\n                k = k + 1\n        ans = ans + (1 << i) * (k * (k - 1) // 2)\n    return ans\nn = int(input())\narr = list(map(int, input().split()))\nprint(pairAndSum(arr, n))", "def pairAndSum(arr, n):\n    ans = 0\n    for i in range(0, 32):\n        k = 0\n        for j in range(0, n):\n            if arr[j] & 1 << i:\n                k = k + 1\n        ans = ans + (1 << i) * (k * (k - 1) // 2)\n    return ans\nn = int(input())\narr = list(map(int, input().split()))\nprint(pairAndSum(arr, n))", "n = int(input())\nli = [int(x) for x in input().split()]\nans = 0\nfor i in range(30):\n    c = 0\n    for x in li:\n        if x & 2 ** i:\n            c += 1\n    ans += 2 ** i * (c * (c - 1) // 2)\nprint(ans)", "n = int(input())\na = [int(x) for x in input().split()]\nc = 0\nf = 1\nfor i in range(32):\n    d = 0\n    for j in range(n):\n        if a[j] & f << i:\n            d += 1\n    if d > 0:\n        d = d * (d - 1) // 2\n    c += d * (f << i)\nprint(c)", "from collections import Counter\nimport string\nimport bisect\nimport math\nimport sys\nfrom fractions import Fraction\n\ndef array_int():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef vary(arrber_of_variables):\n    if arrber_of_variables == 1:\n        return int(sys.stdin.readline())\n    if arrber_of_variables >= 2:\n        return map(int, sys.stdin.readline().split())\n\ndef makedict(var):\n    return dict(Counter(var))\ntestcases = 1\nfor _ in range(testcases):\n    n = vary(1)\n    num = array_int()\n    ans = 0\n    for i in range(32):\n        ct = 0\n        for j in range(n):\n            if 1 << i & num[j] == 1 << i:\n                ct += 1\n        ans += (1 << i) * (ct * (ct - 1)) // 2\n    print(ans)", "n = int(input())\na = [int(x) for x in input().split()]\nc = 0\nf = 1\nfor i in range(32):\n    d = 0\n    for j in range(n):\n        if a[j] & f << i:\n            d += 1\n    if d > 0:\n        d = d * (d - 1) // 2\n    c += d * (f << i)\nprint(c)", "n = int(input())\na = [int(x) for x in input().split()]\nc = 0\nf = 1\nfor i in range(32):\n    d = 0\n    for j in range(n):\n        if a[j] & f << i:\n            d += 1\n    if d > 0:\n        d = d * (d - 1) // 2\n    c += d * (f << i)\nprint(c)", "n = int(input())\na = [int(x) for x in input().split()]\nc = 0\nf = 1\nfor i in range(32):\n    d = 0\n    for j in range(n):\n        if a[j] & f << i:\n            d += 1\n    if d > 0:\n        d = d * (d - 1) // 2\n    c += d * (f << i)\nprint(c)", "n = int(input())\nbit = list(map(int, input().split()))\nmask = 1 << 30\nans = 0\nfor i in range(30, -1, -1):\n    count = 0\n    for andd in bit:\n        if andd & mask != 0:\n            count += 1\n    ans += 2 ** i * (count * (count - 1) // 2)\n    mask >>= 1\nprint(ans)", "n = int(input())\nlst = list(map(int, input().split()))\nbit = [0] * 30\nans = 0\nfor i in range(30):\n    cnt = 0\n    for x in lst:\n        if x & 1 << i:\n            cnt += 1\n    ans += cnt * (cnt - 1) // 2 * (1 << i)\nprint(ans)", "n = int(input())\nl = list(map(int, input().split()))\nres = 0\ncount = 0\nfor i in range(32):\n    for j in range(n):\n        if l[j] & 1:\n            count += 1\n        l[j] >>= 1\n    res += count * (count - 1) // 2 * 2 ** i\n    count = 0\nprint(res)", "try:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    bins = [0] * 32\n    for i in range(32):\n        cnt = 0\n        for j in range(len(arr)):\n            if arr[j] & 1 << i:\n                cnt += 1\n        bins[i] = cnt\n    ans = 0\n    for i in range(len(bins)):\n        cnt = bins[i]\n        ans += cnt * (cnt - 1) // 2 * (1 << i)\n    print(ans)\nexcept:\n    pass", "n = int(input())\nlst = list(map(int, input().split()))\nbit = [0] * 30\nans = 0\nfor i in range(30):\n    cnt = 0\n    for x in lst:\n        if x & 1 << i:\n            cnt += 1\n    ans += cnt * (cnt - 1) // 2 * (1 << i)\nprint(ans)", "n = int(input())\nlst = list(map(int, input().split()))\nbit = [0] * 30\nans = 0\nfor i in range(30):\n    cnt = 0\n    for x in lst:\n        if x & 1 << i:\n            cnt += 1\n    ans += cnt * (cnt - 1) // 2 * (1 << i)\nprint(ans)", "N = int(input())\nA = list(map(int, input().split()))\nonesCnt = [0] * 30\nfor i in range(N):\n    val = A[i]\n    bitPos = 0\n    while val > 0:\n        onesCnt[bitPos] += val % 2\n        bitPos += 1\n        val = int(val / 2)\nans = 0\nfor b in range(30):\n    ans += int(2 ** b * onesCnt[b] * (onesCnt[b] - 1) / 2)\nprint(ans)", "_ = int(input())\narr = list(map(int, input().split()))\nans = 0\nfor i in range(32):\n    ith_bit_count = 0\n    for j in arr:\n        if j & 1 << i:\n            ith_bit_count += 1\n    ans += ith_bit_count * (ith_bit_count - 1) // 2 * 2 ** i\nprint(ans)", "n = int(input())\nx = [int(w) for w in input().split()]\ny = [0] * 32\nans = 0\nfor i in range(32):\n    c = 0\n    for j in x:\n        if j & 1 << i:\n            c += 1\n    ans += c * (c - 1) // 2 * 2 ** i\nprint(ans)", "n = int(input())\np = 1\nar = list(map(int, input().split()))\nctr = 0\nfor i in range(31):\n    x = 0\n    for j in range(n):\n        if ar[j] % 2 == 1:\n            x += 1\n        ar[j] = ar[j] // 2\n    if (x - 1) % 2 == 0:\n        ctr += x * ((x - 1) // 2) * p\n    else:\n        ctr += (x - 1) * (x // 2) * p\n    p *= 2\nprint(ctr)", "import math\nn = int(input())\narr = list(map(int, input().split()))\ntot = 0\nfor i in range(32):\n    c = 0\n    for j in arr:\n        if (j >> i) % 2:\n            c += 1\n    if c <= 1:\n        x = 0\n    else:\n        x = c * (c - 1) // 2\n    sc = (1 << i) * x\n    tot += sc\nprint(tot)", "N = int(input())\nA = list(map(int, input().strip().split()))\nresult = 0\nif N <= 1000:\n    for i in range(N):\n        for j in range(i + 1, N):\n            result += A[i] & A[j]\nelse:\n    data = [0] * 29\n    for x in A:\n        s = bin(x)\n        n = len(s)\n        for i in range(2, n):\n            data[n - 1 - i] += int(s[i])\n    for i in range(29):\n        k = (data[i] - 1) * data[i] * 2 ** (i - 1)\n        result += k\nprint(int(result))", "N = int(input())\nA = list(map(int, input().strip().split()))\nresult = 0\nif N <= 1000:\n    for i in range(N):\n        for j in range(i + 1, N):\n            result += A[i] & A[j]\nelse:\n    data = [0] * 29\n    for x in A:\n        s = bin(x)\n        n = len(s)\n        for i in range(2, n):\n            data[n - 1 - i] += int(s[i])\n    for i in range(29):\n        k = (data[i] - 1) * data[i] * 2 ** (i - 1)\n        result += k\nprint(int(result))", "n = int(input())\na = list(map(int, input().split()))\nans = [0] * 30\nfor i in range(n):\n    for j in range(30):\n        if a[i] & 1 << j:\n            ans[j] += 1\nfinal = 0\nfor j in range(30):\n    final += ans[j] * (ans[j] - 1) * (1 << j)\nprint(final // 2)", "n = int(input())\na = list(map(int, input().split()))\nans = [0] * 30\nfor i in range(n):\n    for j in range(30):\n        if a[i] & 1 << j:\n            ans[j] += 1\nfinal = 0\nfor j in range(30):\n    final += ans[j] * (ans[j] - 1) * (1 << j)\nprint(final // 2)", "n = int(input())\narr = [int(x) for x in input().split()]\nans = 0\nfor i in range(32):\n    cnt = 0\n    for ele in arr:\n        if ele & 1 << i:\n            cnt = cnt + 1\n    cnt = cnt * (cnt - 1) // 2\n    ans += cnt * (1 << i)\nprint(ans)", "def solve():\n    n = int(input())\n    li = [int(x) for x in input().split()]\n    ans = 0\n    for i in range(32):\n        cnt = 0\n        for ele in li:\n            if ele & 1 << i:\n                cnt += 1\n        cnt = cnt * (cnt - 1) // 2\n        ans += cnt * (1 << i)\n    print(ans)\nsolve()", "def optimal(n, li):\n    dt = dict()\n    for val in li:\n        binary = bin(val)[2:][::-1]\n        for (pos, bit) in enumerate(binary):\n            if bit == '1':\n                dt[pos] = dt.get(pos, 0) + 1\n    sm = 0\n    for (pos, pwr) in dt.items():\n        sm += pwr * (pwr - 1) // 2 * pow(2, pos)\n    return sm\nn = int(input())\nli = list(map(int, input().split()))\nprint(optimal(n, li))", "n = int(input())\na = list(map(int, input().split()))\nSum = 0\nfor i in range(32):\n    num_bits = 0\n    for j in range(n):\n        if a[j] & 1 << i:\n            num_bits += 1\n    Sum += (num_bits * (num_bits - 1) >> 1) * (1 << i)\nprint(Sum)", "def answer():\n    bit = [0] * 30\n    for x in a:\n        for i in range(30):\n            if x >> i & 1:\n                bit[i] += 1\n    ans = 0\n    for i in range(len(bit)):\n        ans += bit[i] * (bit[i] - 1) // 2 * (1 << i)\n    return ans\nn = int(input())\na = list(map(int, input().split()))\nprint(answer())", "n = int(input())\na = list(map(int, input().split()))\nSum = 0\nfor i in range(32):\n    num_bits = 0\n    for j in range(n):\n        if a[j] & 1 << i:\n            num_bits += 1\n    Sum += (num_bits * (num_bits - 1) >> 1) * (1 << i)\nprint(Sum)", "n = int(input())\na = list(map(int, input().split()))\nsum = 0\nfor i in range(32):\n    num_bits = 0\n    for j in range(n):\n        if a[j] & 1 << i:\n            num_bits += 1\n    sum += (num_bits * (num_bits - 1) >> 1) * (1 << i)\nprint(sum)", "n = int(input())\na = list(map(int, input().split()))\nbits = [0] * 31\nfor x in a:\n    for b in range(31):\n        if x & 1 << b > 0:\n            bits[b] += 1\nans = 0\nfor b in range(31):\n    ans += (bits[b] * (bits[b] - 1) >> 1) * (1 << b)\nprint(ans)", "import numpy as np\nimport sys\ninput = sys.stdin.readline\nn = int(input())\na = np.array(list(map(int, input().split())))\ns = 0\nfor i in range(32):\n    k = 0\n    for j in range(n):\n        if a[j] & 1 << i:\n            k += 1\n    s += (1 << i) * (k * (k - 1) // 2)\nprint(s)", "n = int(input())\na = list(map(int, input().split()))\ns = 0\nb = [0] * 32\nfor i in range(32):\n    for j in range(n):\n        b[i] += a[j] & 1\n        a[j] >>= 1\nfor i in range(32):\n    s += b[i] * (b[i] - 1) // 2 * 2 ** i\nprint(s)", "n = int(input())\na = list(map(int, input().split()))\nbits = [0] * 32\nfor i in range(32):\n    for j in range(n):\n        bits[i] += a[j] & 1\n        a[j] >>= 1\nans = 0\nfor i in range(32):\n    ans += bits[i] * (bits[i] - 1) // 2 * 2 ** i\nprint(ans)", "def pairAndSum(arr, n):\n    ans = 0\n    for i in range(0, 32):\n        k = 0\n        for j in range(0, n):\n            if arr[j] & 1 << i:\n                k = k + 1\n        ans = ans + (1 << i) * (k * (k - 1) // 2)\n    return ans\nn = int(input())\na = list(map(int, input().split()))\nprint(pairAndSum(a, n))", "n = int(input())\na = list(map(int, input().split()))\nbits = [0] * 32\nfor i in range(32):\n    for j in range(n):\n        bits[i] += a[j] & 1\n        a[j] >>= 1\nans = 0\nfor i in range(32):\n    ans += bits[i] * (bits[i] - 1) // 2 * 2 ** i\nprint(ans)", "n = int(input())\nnums = [int(j) for j in input().split()]\nencoding = [0 for _ in range(30)]\nfor num in nums:\n    m = num\n    for i in range(30):\n        encoding[i] += m % 2\n        m = m // 2\nprint(sum([2 ** i * encoding[i] * (encoding[i] - 1) // 2 for i in range(30)]))", "n = int(input())\nnums = [int(j) for j in input().split()]\nencoding = [0 for _ in range(30)]\nfor num in nums:\n    m = num\n    for i in range(30):\n        encoding[i] += m % 2\n        m = m // 2\nprint(sum([2 ** i * encoding[i] * (encoding[i] - 1) // 2 for i in range(30)]))", "n = int(input())\na = [int(x) for x in input().split()]\ns = 0\nfor i in range(32):\n    k = 0\n    for j in range(n):\n        if a[j] & 1 << i:\n            k += 1\n    s += (1 << i) * (k * (k - 1) // 2)\nprint(s)", "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(32):\n    k = 0\n    for j in range(n):\n        if a[j] & 1 << i:\n            k += 1\n    ans += (1 << i) * (k * (k - 1) // 2)\nprint(ans)", "n = int(input())\narr = list(map(int, input().split()))\nsetbit = [0] * 32\nfor num in arr:\n    i = 0\n    while num > 0:\n        if num & 1:\n            setbit[i] += 1\n        i += 1\n        num = num >> 1\nans = 0\nfor i in range(32):\n    f = setbit[i]\n    ans += f * (f - 1) * 2 ** i // 2\nprint(ans)", "n = int(input())\narr = list(map(int, input().split()))\nsetbit = [0] * 32\nfor num in arr:\n    i = 0\n    while num > 0:\n        if num & 1:\n            setbit[i] += 1\n        i += 1\n        num = num >> 1\nans = 0\nfor i in range(32):\n    f = setbit[i]\n    ans += f * (f - 1) * 2 ** i // 2\nprint(ans)", "size = int(input())\narr = list(map(int, input().split()))\nsetbit = [0] * 32\nfor num in arr:\n    i = 0\n    while num > 0:\n        if num & 1:\n            setbit[i] += 1\n        i += 1\n        num = num >> 1\nans = 0\nfor i in range(32):\n    f = setbit[i]\n    ans += f * (f - 1) * 2 ** i // 2\nprint(ans)", "n = int(input())\narr = list(map(int, input().split()))\ns = 0\nsize = len(bin(max(arr))[2:])\narr = [bin(i)[2:].zfill(size) for i in arr]\ns = 0\nfor i in range(size):\n    count = 0\n    for j in range(n):\n        if arr[j][i] == '1':\n            count += 1\n    s += count * (count - 1) // 2 * 2 ** (size - i - 1)\nprint(s)", "size = int(input())\narr = list(map(int, input().split()))\nsetbit = [0] * 32\nfor num in arr:\n    i = 0\n    while num > 0:\n        if num & 1:\n            setbit[i] += 1\n        i += 1\n        num = num // 2\nans = 0\nfor i in range(32):\n    f = setbit[i]\n    ans += f * (f - 1) * 2 ** i // 2\nprint(ans)", "N = int(input())\narr = [int(i) for i in input().split()]\ntotal = 0\nfrequency = [0 for i in range(30)]\nfor i in arr:\n    for j in range(0, len(bin(i)[2:])):\n        if i & 1 << j:\n            frequency[j] += 1\nfor i in range(30):\n    total += frequency[i] * (frequency[i] - 1) // 2 * 2 ** i\nprint(total)", "n = int(input())\na = [int(x) for x in input().split()]\nsum = 0\nfor i in range(32):\n    count = 0\n    k = 1 << i\n    for j in range(n):\n        if k & a[j]:\n            count += 1\n    sum += k * (count * (count - 1) // 2)\nprint(sum)", "import sys\nfrom collections import Counter\nimport numpy as np\nimport math\ntest = False\nN = int(input().strip())\nA = list(map(int, input().strip().split(' ')))\nif test:\n    print('N, A = ', N, A)\ngrid = []\nfor i in range(N):\n    b = '{0:b}'.format(A[i])\n    lenb = len(b)\n    b = '0' * (30 - lenb) + b\n    if test:\n        print(b)\n    b = [int(x) for x in b]\n    grid.append(b)\nnp_grid = np.array(grid)\nif test:\n    print('np_grid = ', np_grid)\ngrid_sum = sum(np_grid)\nif test:\n    print('grid_sum = ', grid_sum)\nanswer = 0\ncombos = []\nvals = []\nfor i in range(30):\n    combo = grid_sum[i] * (grid_sum[i] - 1) / 2\n    combos.append(combo)\n    val = 2 ** (29 - i)\n    vals.append(val)\n    if test:\n        print(combo, val)\n    answer += combo * val\nprint(int(answer))", "n = int(input())\narr = list(map(int, input().split()))\narr.sort()\ncount = 0\nfor i in range(32):\n    k = 1 << i\n    sum = 0\n    for j in range(n):\n        if k & arr[j]:\n            sum += 1\n    count += k * (sum * (sum - 1) // 2)\nprint(count)", "n = int(input())\narr = list(map(int, input().split()))\narr.sort()\ncount = 0\nfor i in range(32):\n    k = 1 << i\n    sum = 0\n    for j in range(n):\n        if k & arr[j]:\n            sum += 1\n    count += k * (sum * (sum - 1) // 2)\nprint(count)"]