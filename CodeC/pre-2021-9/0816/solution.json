["from math import inf\nfor __ in range(int(input())):\n    (n, e, h, a, b, c) = map(int, input().split())\n    min_cost = inf\n    for chocolate_cake in range(min(n, min(e, h)) + 1):\n        total_cost = chocolate_cake * c\n        remaining = n - chocolate_cake\n        egg = max(0, e - chocolate_cake)\n        choco_bar = max(0, h - chocolate_cake)\n        if a < b:\n            total_cost += min(egg // 2, remaining) * a\n            remaining -= min(egg // 2, remaining)\n            total_cost += min(choco_bar // 3, remaining) * b\n            remaining -= min(choco_bar // 3, remaining)\n        else:\n            total_cost += min(choco_bar // 3, remaining) * b\n            remaining -= min(choco_bar // 3, remaining)\n            total_cost += min(egg // 2, remaining) * a\n            remaining -= min(egg // 2, remaining)\n        if not remaining:\n            min_cost = min(min_cost, total_cost)\n    if min_cost == inf:\n        print(-1)\n    else:\n        print(min_cost)", "from math import inf\nfor __ in range(int(input())):\n    (n, e, h, a, b, c) = map(int, input().split())\n    min_cost = inf\n    for chocolate_cake in range(min(n, min(e, h)) + 1):\n        total_cost = chocolate_cake * c\n        remaining = n - chocolate_cake\n        egg = max(0, e - chocolate_cake)\n        choco_bar = max(0, h - chocolate_cake)\n        if a < b:\n            total_cost += min(egg // 2, remaining) * a\n            remaining -= min(egg // 2, remaining)\n            total_cost += min(choco_bar // 3, remaining) * b\n            remaining -= min(choco_bar // 3, remaining)\n        else:\n            total_cost += min(choco_bar // 3, remaining) * b\n            remaining -= min(choco_bar // 3, remaining)\n            total_cost += min(egg // 2, remaining) * a\n            remaining -= min(egg // 2, remaining)\n        if not remaining:\n            min_cost = min(min_cost, total_cost)\n    if min_cost == inf:\n        print(-1)\n    else:\n        print(min_cost)", "from math import inf\nfor __ in range(int(input())):\n    (n, e, h, a, b, c) = map(int, input().split())\n    min_cost = inf\n    for chocolate_cake in range(min(n, min(e, h)) + 1):\n        total_cost = chocolate_cake * c\n        remaining = n - chocolate_cake\n        egg = max(0, e - chocolate_cake)\n        choco_bar = max(0, h - chocolate_cake)\n        if a < b:\n            total_cost += min(egg // 2, remaining) * a\n            remaining -= min(egg // 2, remaining)\n            total_cost += min(choco_bar // 3, remaining) * b\n            remaining -= min(choco_bar // 3, remaining)\n        else:\n            total_cost += min(choco_bar // 3, remaining) * b\n            remaining -= min(choco_bar // 3, remaining)\n            total_cost += min(egg // 2, remaining) * a\n            remaining -= min(egg // 2, remaining)\n        if not remaining:\n            min_cost = min(min_cost, total_cost)\n    if min_cost == inf:\n        print(-1)\n    else:\n        print(min_cost)", "t = int(input())\nfor i in range(t):\n    (n, e, h, a, b, c) = map(int, input().split())\n    l2 = []\n    ans = 1e+18\n    for j in range(n + 1):\n        if j > e or j > h:\n            break\n        m1 = (e - j) // 2\n        m2 = (h - j) // 3\n        if n > j + m1 + m2:\n            continue\n        if a < b:\n            r1 = min(n - j, m1)\n            r2 = n - j - r1\n        else:\n            r2 = min(n - j, m2)\n            r1 = n - j - r2\n        p = j * c + r1 * a + r2 * b\n        ans = min(ans, p)\n    if ans == 1e+18:\n        print(-1)\n    else:\n        print(ans)", "t = int(input())\nfor i in range(t):\n    (n, e, h, a, b, c) = map(int, input().split())\n    l2 = []\n    ans = 1e+18\n    for j in range(n + 1):\n        if j > e or j > h:\n            break\n        m1 = (e - j) // 2\n        m2 = (h - j) // 3\n        if n > j + m1 + m2:\n            continue\n        if a < b:\n            r1 = min(n - j, m1)\n            r2 = n - j - r1\n        else:\n            r2 = min(n - j, m2)\n            r1 = n - j - r2\n        p = j * c + r1 * a + r2 * b\n        ans = min(ans, p)\n    if ans == 1e+18:\n        print(-1)\n    else:\n        print(ans)", "t = int(input())\nfor i in range(t):\n    (n, e, h, a, b, c) = map(int, input().split())\n    l2 = []\n    ans = 1e+18\n    for j in range(n + 1):\n        if j > e or j > h:\n            break\n        m1 = (e - j) // 2\n        m2 = (h - j) // 3\n        if n > j + m1 + m2:\n            continue\n        if a < b:\n            r1 = min(n - j, m1)\n            r2 = n - j - r1\n        else:\n            r2 = min(n - j, m2)\n            r1 = n - j - r2\n        p = j * c + r1 * a + r2 * b\n        ans = min(ans, p)\n    if ans == 1e+18:\n        print(-1)\n    else:\n        print(ans)", "t = int(input())\nfor i in range(t):\n    (n, e, h, a, b, c) = map(int, input().split())\n    l2 = []\n    ans = 1e+18\n    for j in range(n + 1):\n        if j > e or j > h:\n            break\n        m1 = (e - j) // 2\n        m2 = (h - j) // 3\n        if n > j + m1 + m2:\n            continue\n        if a < b:\n            r1 = min(n - j, m1)\n            r2 = n - j - r1\n        else:\n            r2 = min(n - j, m2)\n            r1 = n - j - r2\n        p = j * c + r1 * a + r2 * b\n        ans = min(ans, p)\n    if ans == 1e+18:\n        print(-1)\n    else:\n        print(ans)", "for _ in range(int(input())):\n    (n, e, h, a, b, c) = map(int, input().split())\n    l2 = []\n    ans = 1e+18\n    for numc in range(n + 1):\n        if numc > e or numc > h:\n            break\n        maxo = (e - numc) // 2\n        maxm = (h - numc) // 3\n        if n > numc + maxo + maxm:\n            continue\n        if a < b:\n            reqo = min(n - numc, maxo)\n            reqm = n - numc - reqo\n        else:\n            reqm = min(n - numc, maxm)\n            reqo = n - numc - reqm\n        price = numc * c + reqo * a + reqm * b\n        ans = min(ans, price)\n    if ans == 1e+18:\n        print(-1)\n    else:\n        print(ans)", "T = int(input())\nfor t in range(T):\n    (N, Eggs, Chocos, OC, MC, CC) = map(int, input().split())\n    ans = 1e+18\n    for cakes in range(N + 1):\n        if Eggs < cakes or Chocos < cakes:\n            break\n        omelette = int((Eggs - cakes) / 2)\n        milkshake = int((Chocos - cakes) / 3)\n        if cakes + milkshake + omelette < N:\n            continue\n        if OC < MC:\n            reqomelette = min(omelette, N - cakes)\n            reqmilkshake = N - cakes - reqomelette\n        else:\n            reqmilkshake = min(milkshake, N - cakes)\n            reqomelette = N - cakes - reqmilkshake\n        price = cakes * CC + reqmilkshake * MC + reqomelette * OC\n        ans = min(ans, price)\n    if ans == 1e+18:\n        ans = -1\n    print(ans)", "T = int(input())\nfor t in range(T):\n    (N, Eggs, Chocos, OC, MC, CC) = map(int, input().split())\n    ans = 1e+18\n    for cakes in range(N + 1):\n        if Eggs < cakes or Chocos < cakes:\n            break\n        omelette = int((Eggs - cakes) / 2)\n        milkshake = int((Chocos - cakes) / 3)\n        if cakes + milkshake + omelette < N:\n            continue\n        if OC < MC:\n            reqomelette = min(omelette, N - cakes)\n            reqmilkshake = N - cakes - reqomelette\n        else:\n            reqmilkshake = min(milkshake, N - cakes)\n            reqomelette = N - cakes - reqmilkshake\n        price = cakes * CC + reqmilkshake * MC + reqomelette * OC\n        ans = min(ans, price)\n    if ans == 1e+18:\n        ans = -1\n    print(ans)", "inf = 10 ** 20\nfor _ in range(int(input())):\n    (n, e, h, a, b, c) = list(map(int, input().split()))\n    ans = inf\n    for num_cake in range(min(e, h, n) + 1):\n        max_oml = max(0, (e - num_cake) // 2)\n        max_bar = max(0, (h - num_cake) // 3)\n        if num_cake + max_oml + max_bar >= n:\n            price = 0\n            price += num_cake * c\n            item_left = n - num_cake\n            if a == b:\n                price += a * item_left\n            elif a > b:\n                bar_count = min(item_left, max_bar)\n                price += bar_count * b\n                item_left -= bar_count\n                if item_left > 0:\n                    price += item_left * a\n            else:\n                oml_count = min(item_left, max_oml)\n                price += oml_count * a\n                item_left -= oml_count\n                if item_left > 0:\n                    price += item_left * b\n            ans = min(ans, price)\n    if ans >= inf:\n        print(-1)\n    else:\n        print(ans)", "inf = 10 ** 20\nfor _ in range(int(input())):\n    (n, e, h, a, b, c) = list(map(int, input().split()))\n    ans = inf\n    for num_cake in range(min(e, h, n) + 1):\n        max_oml = max(0, (e - num_cake) // 2)\n        max_bar = max(0, (h - num_cake) // 3)\n        if num_cake + max_oml + max_bar >= n:\n            price = 0\n            price += num_cake * c\n            item_left = n - num_cake\n            if a == b:\n                price += a * item_left\n            elif a > b:\n                bar_count = min(item_left, max_bar)\n                price += bar_count * b\n                item_left -= bar_count\n                if item_left > 0:\n                    price += item_left * a\n            else:\n                oml_count = min(item_left, max_oml)\n                price += oml_count * a\n                item_left -= oml_count\n                if item_left > 0:\n                    price += item_left * b\n            ans = min(ans, price)\n    if ans >= inf:\n        print(-1)\n    else:\n        print(ans)", "for _ in range(int(input())):\n    (n, e, h, a, b, c) = map(int, input().split())\n    l2 = []\n    ans = 1e+18\n    for numc in range(n + 1):\n        if numc > e or numc > h:\n            break\n        maxo = (e - numc) // 2\n        maxm = (h - numc) // 3\n        if n > numc + maxo + maxm:\n            continue\n        if a < b:\n            reqo = min(n - numc, maxo)\n            reqm = n - numc - reqo\n        else:\n            reqm = min(n - numc, maxm)\n            reqo = n - numc - reqm\n        price = numc * c + reqo * a + reqm * b\n        ans = min(ans, price)\n    if ans == 1e+18:\n        print(-1)\n    else:\n        print(ans)", "inf = 10 ** 20\nfor _ in range(int(input())):\n    (n, e, h, a, b, c) = list(map(int, input().split()))\n    ans = inf\n    for num_cake in range(min(e, h, n) + 1):\n        max_oml = max(0, (e - num_cake) // 2)\n        max_bar = max(0, (h - num_cake) // 3)\n        if num_cake + max_oml + max_bar >= n:\n            price = 0\n            price += num_cake * c\n            item_left = n - num_cake\n            if a == b:\n                price += a * item_left\n            elif a > b:\n                bar_count = min(item_left, max_bar)\n                price += bar_count * b\n                item_left -= bar_count\n                if item_left > 0:\n                    price += item_left * a\n            else:\n                oml_count = min(item_left, max_oml)\n                price += oml_count * a\n                item_left -= oml_count\n                if item_left > 0:\n                    price += item_left * b\n            ans = min(ans, price)\n    if ans >= inf:\n        print(-1)\n    else:\n        print(ans)", "for _ in range(int(input())):\n    (n, e, h, a, b, c) = map(int, input().split())\n    l2 = []\n    ans = 1e+18\n    for numc in range(n + 1):\n        if numc > e or numc > h:\n            break\n        maxo = (e - numc) // 2\n        maxm = (h - numc) // 3\n        if n > numc + maxo + maxm:\n            continue\n        if a < b:\n            reqo = min(n - numc, maxo)\n            reqm = n - numc - reqo\n        else:\n            reqm = min(n - numc, maxm)\n            reqo = n - numc - reqm\n        price = numc * c + reqo * a + reqm * b\n        ans = min(ans, price)\n    if ans == 1e+18:\n        print(-1)\n    else:\n        print(ans)", "for _ in range(int(input())):\n    (n, e, h, a, b, c) = map(int, input().split())\n    l2 = []\n    ans = 1e+18\n    for numc in range(n + 1):\n        if numc > e or numc > h:\n            break\n        maxo = (e - numc) // 2\n        maxm = (h - numc) // 3\n        if n > numc + maxo + maxm:\n            continue\n        if a < b:\n            reqo = min(n - numc, maxo)\n            reqm = n - numc - reqo\n        else:\n            reqm = min(n - numc, maxm)\n            reqo = n - numc - reqm\n        price = numc * c + reqo * a + reqm * b\n        ans = min(ans, price)\n    if ans == 1e+18:\n        print(-1)\n    else:\n        print(ans)", "for _ in range(int(input())):\n    (n, e, h, a, b, c) = map(int, input().split())\n    l2 = []\n    ans = 1e+18\n    for numc in range(n + 1):\n        if numc > e or numc > h:\n            break\n        maxo = (e - numc) // 2\n        maxm = (h - numc) // 3\n        if n > numc + maxo + maxm:\n            continue\n        if a < b:\n            reqo = min(n - numc, maxo)\n            reqm = n - numc - reqo\n        else:\n            reqm = min(n - numc, maxm)\n            reqo = n - numc - reqm\n        price = numc * c + reqo * a + reqm * b\n        ans = min(ans, price)\n    if ans == 1e+18:\n        print(-1)\n    else:\n        print(ans)", "try:\n    for i in range(int(input())):\n        (n, e, h, a, b, c) = map(int, input().split())\n        ans = 1e+18\n        for i in range(n + 1):\n            if e < i or h < i:\n                break\n            mo = (e - i) // 2\n            mc = (h - i) // 3\n            if n > mo + mc + i:\n                continue\n            if a > b:\n                rc = min(n - i, mc)\n                ro = n - i - rc\n            else:\n                ro = min(n - i, mo)\n                rc = n - i - ro\n            p = ro * a + rc * b + i * c\n            ans = min(p, ans)\n        if ans == 1e+18:\n            print('-1')\n        else:\n            print(ans)\nexcept:\n    pass", "for _ in range(int(input())):\n    (n, e, h, a, b, c) = map(int, input().split())\n    l2 = []\n    ans = 1e+18\n    for numc in range(n + 1):\n        if numc > e or numc > h:\n            break\n        maxo = (e - numc) // 2\n        maxm = (h - numc) // 3\n        if n > numc + maxo + maxm:\n            continue\n        if a < b:\n            reqo = min(n - numc, maxo)\n            reqm = n - numc - reqo\n        else:\n            reqm = min(n - numc, maxm)\n            reqo = n - numc - reqm\n        price = numc * c + reqo * a + reqm * b\n        ans = min(ans, price)\n    if ans == 1e+18:\n        print(-1)\n    else:\n        print(ans)", "for _ in range(int(input())):\n    (n, e, h, a, b, c) = map(int, input().split())\n    l2 = []\n    ans = 1e+18\n    for numc in range(n + 1):\n        if numc > e or numc > h:\n            break\n        maxo = (e - numc) // 2\n        maxm = (h - numc) // 3\n        if n > numc + maxo + maxm:\n            continue\n        if a < b:\n            reqo = min(n - numc, maxo)\n            reqm = n - numc - reqo\n        else:\n            reqm = min(n - numc, maxm)\n            reqo = n - numc - reqm\n        price = numc * c + reqo * a + reqm * b\n        ans = min(ans, price)\n    if ans == 1e+18:\n        print(-1)\n    else:\n        print(ans)", "for _ in range(int(input())):\n    (n, e, h, a, b, c) = map(int, input().split())\n    l2 = []\n    ans = 1e+18\n    for numc in range(n + 1):\n        if numc > e or numc > h:\n            break\n        maxo = (e - numc) // 2\n        maxm = (h - numc) // 3\n        if n > numc + maxo + maxm:\n            continue\n        if a < b:\n            reqo = min(n - numc, maxo)\n            reqm = n - numc - reqo\n        else:\n            reqm = min(n - numc, maxm)\n            reqo = n - numc - reqm\n        price = numc * c + reqo * a + reqm * b\n        ans = min(ans, price)\n    if ans == 1e+18:\n        print(-1)\n    else:\n        print(ans)", "for _ in range(int(input())):\n    (n, e, h, a, b, c) = map(int, input().split())\n    l2 = []\n    ans = 1e+18\n    for numc in range(n + 1):\n        if numc > e or numc > h:\n            break\n        maxo = (e - numc) // 2\n        maxm = (h - numc) // 3\n        if n > numc + maxo + maxm:\n            continue\n        if a < b:\n            reqo = min(n - numc, maxo)\n            reqm = n - numc - reqo\n        else:\n            reqm = min(n - numc, maxm)\n            reqo = n - numc - reqm\n        price = numc * c + reqo * a + reqm * b\n        ans = min(ans, price)\n    if ans == 1e+18:\n        print(-1)\n    else:\n        print(ans)", "import math\n\ndef unc(n, e, h, a, b, c):\n    res = math.inf\n    for noc in range(0, n + 1):\n        if e < noc or h < noc:\n            break\n        maxO = (e - noc) // 2\n        maxChoc = (h - noc) // 3\n        if noc + maxChoc + maxO < n:\n            continue\n        if a < b:\n            noO = min(n - noc, maxO)\n            noChoc = n - noc - noO\n        else:\n            noChoc = min(n - noc, maxChoc)\n            noO = n - noc - noChoc\n        res = min(res, a * noO + b * noChoc + c * noc)\n    if res == math.inf:\n        return -1\n    return res\nfor _ in range(int(input())):\n    (n, e, h, a, b, c) = list(map(int, input().split()))\n    print(unc(n, e, h, a, b, c))", "for _ in range(int(input())):\n    (n, e, h, a, b, c) = map(int, input().split())\n    l2 = []\n    ans = 1e+18\n    for numc in range(n + 1):\n        if numc > e or numc > h:\n            break\n        maxo = (e - numc) // 2\n        maxm = (h - numc) // 3\n        if n > numc + maxo + maxm:\n            continue\n        if a < b:\n            reqo = min(n - numc, maxo)\n            reqm = n - numc - reqo\n        else:\n            reqm = min(n - numc, maxm)\n            reqo = n - numc - reqm\n        price = numc * c + reqo * a + reqm * b\n        ans = min(ans, price)\n    if ans == 1e+18:\n        print(-1)\n    else:\n        print(ans)", "import math\n\ndef func(n, e, h, a, b, c):\n    res = math.inf\n    for noc in range(0, n + 1):\n        if e < noc or h < noc:\n            break\n        maxO = (e - noc) // 2\n        maxChoc = (h - noc) // 3\n        if noc + maxChoc + maxO < n:\n            continue\n        if a < b:\n            noO = min(n - noc, maxO)\n            noChoc = n - noc - noO\n        else:\n            noChoc = min(n - noc, maxChoc)\n            noO = n - noc - noChoc\n        res = min(res, a * noO + b * noChoc + c * noc)\n    if res == math.inf:\n        return -1\n    return res\nfor _ in range(int(input())):\n    (n, e, h, a, b, c) = list(map(int, input().split()))\n    print(func(n, e, h, a, b, c))", "import math\n\ndef func(n, e, h, a, b, c):\n    res = math.inf\n    for noc in range(0, n + 1):\n        if e < noc or h < noc:\n            break\n        maxO = (e - noc) // 2\n        maxChoc = (h - noc) // 3\n        if noc + maxChoc + maxO < n:\n            continue\n        if a < b:\n            noO = min(n - noc, maxO)\n            noChoc = n - noc - noO\n        else:\n            noChoc = min(n - noc, maxChoc)\n            noO = n - noc - noChoc\n        res = min(res, a * noO + b * noChoc + c * noc)\n    if res == math.inf:\n        return -1\n    return res\nfor _ in range(int(input())):\n    (n, e, h, a, b, c) = list(map(int, input().split()))\n    print(func(n, e, h, a, b, c))", "import math\n\ndef func(n, e, h, a, b, c):\n    res = math.inf\n    for noc in range(0, n + 1):\n        if e < noc or h < noc:\n            break\n        maxO = (e - noc) // 2\n        maxChoc = (h - noc) // 3\n        if noc + maxChoc + maxO < n:\n            continue\n        if a < b:\n            noO = min(n - noc, maxO)\n            noChoc = n - noc - noO\n        else:\n            noChoc = min(n - noc, maxChoc)\n            noO = n - noc - noChoc\n        res = min(res, a * noO + b * noChoc + c * noc)\n    if res == math.inf:\n        return -1\n    return res\nfor _ in range(int(input())):\n    (n, e, h, a, b, c) = list(map(int, input().split()))\n    print(func(n, e, h, a, b, c))", "ip = int(input())\nwhile ip:\n    (N, E, H, A, B, C) = [int(i) for i in input().split(' ')]\n    best_cost = float('inf')\n    for cakes in range(N + 1):\n        Egg = E - cakes\n        Choc = H - cakes\n        if Egg < 0 or Choc < 0:\n            continue\n        omlette = Egg // 2\n        shakes = Choc // 3\n        if omlette + shakes + cakes < N:\n            continue\n        total_cost = 0\n        NUM = N - cakes\n        if A <= B:\n            total_cost += cakes * C\n            omlette_req = min(NUM, omlette)\n            total_cost += A * omlette_req\n            NUM = NUM - omlette_req\n            total_cost += B * NUM\n            best_cost = min(best_cost, total_cost)\n        else:\n            total_cost += cakes * C\n            milkshake_req = min(NUM, shakes)\n            total_cost += B * milkshake_req\n            NUM = NUM - milkshake_req\n            total_cost += A * NUM\n            best_cost = min(best_cost, total_cost)\n    if best_cost == float('inf'):\n        print('-1')\n    else:\n        print(best_cost)\n    ip -= 1", "ip = int(input())\nwhile ip:\n    (N, E, H, A, B, C) = [int(i) for i in input().split(' ')]\n    best_cost = float('inf')\n    for cakes in range(N + 1):\n        Egg = E - cakes\n        Choc = H - cakes\n        if Egg < 0 or Choc < 0:\n            continue\n        omlette = Egg // 2\n        shakes = Choc // 3\n        if omlette + shakes + cakes < N:\n            continue\n        total_cost = 0\n        NUM = N - cakes\n        if A <= B:\n            total_cost += cakes * C\n            omlette_req = min(NUM, omlette)\n            total_cost += A * omlette_req\n            NUM = NUM - omlette_req\n            m = min(shakes, NUM)\n            total_cost += B * m\n            best_cost = min(best_cost, total_cost)\n        else:\n            total_cost += cakes * C\n            milkshake_req = min(NUM, shakes)\n            total_cost += B * milkshake_req\n            NUM = NUM - milkshake_req\n            m = min(omlette, NUM)\n            total_cost += A * m\n            best_cost = min(best_cost, total_cost)\n    if best_cost == float('inf'):\n        print('-1')\n    else:\n        print(best_cost)\n    ip -= 1", "for _ in range(int(input())):\n    (n, egg, choc, a, b, c) = map(int, input().split())\n    best = float('inf')\n    for i in range(n + 1):\n        E = egg - i\n        CH = choc - i\n        if E < 0 or CH < 0:\n            continue\n        (om, shk) = (E // 2, CH // 3)\n        if i + om + shk < n:\n            continue\n        num = n - i\n        cost = 0\n        if a <= b:\n            cost += i * c\n            m = min(num, om)\n            cost += m * a\n            num -= m\n            m = min(shk, num)\n            cost += m * b\n            best = min(best, cost)\n        else:\n            cost += i * c\n            m = min(num, shk)\n            cost += m * b\n            num -= m\n            m = min(om, num)\n            cost += m * a\n            best = min(best, cost)\n    if best == float('inf'):\n        print('-1')\n    else:\n        print(best)", "for _ in range(int(input())):\n    (n, egg, choc, a, b, c) = map(int, input().split())\n    best = float('inf')\n    for i in range(n + 1):\n        E = egg - i\n        CH = choc - i\n        if E < 0 or CH < 0:\n            continue\n        (om, shk) = (E // 2, CH // 3)\n        if i + om + shk < n:\n            continue\n        num = n - i\n        cost = 0\n        if a <= b:\n            cost += i * c\n            m = min(num, om)\n            cost += m * a\n            num -= m\n            m = min(shk, num)\n            cost += m * b\n            best = min(best, cost)\n        else:\n            cost += i * c\n            m = min(num, shk)\n            cost += m * b\n            num -= m\n            m = min(om, num)\n            cost += m * a\n            best = min(best, cost)\n    if best == float('inf'):\n        print('-1')\n    else:\n        print(best)", "import math\n\ndef func(n, e, h, a, b, c):\n    res = math.inf\n    for noc in range(0, n + 1):\n        if e < noc or h < noc:\n            break\n        maxO = (e - noc) // 2\n        maxChoc = (h - noc) // 3\n        if noc + maxChoc + maxO < n:\n            continue\n        if a < b:\n            noO = min(n - noc, maxO)\n            noChoc = n - noc - noO\n        else:\n            noChoc = min(n - noc, maxChoc)\n            noO = n - noc - noChoc\n        res = min(res, a * noO + b * noChoc + c * noc)\n    if res == math.inf:\n        return -1\n    return res\nfor _ in range(int(input())):\n    (n, e, h, a, b, c) = list(map(int, input().split()))\n    print(func(n, e, h, a, b, c))", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\nsys.setrecursionlimit(1500000)\nt = int(input())\n\ndef dfs(n, e, h, a, b, c):\n    if n < 0:\n        return 0\n    ans = 10 ** 15\n    if 2 * n <= e:\n        ans = min(ans, n * a)\n    if n <= e and n <= h:\n        ans = min(ans, n * c)\n    if 3 * n <= h:\n        ans = min(ans, b * n)\n    if (h - n) // 2 >= 1 and (h - n) // 2 >= n - e:\n        if b - c < 0:\n            k = min(n - 1, (h - n) // 2)\n        else:\n            k = max(n - e, 1)\n        ans = min(ans, (b - c) * k + n * c)\n    if e - n >= 1 and e - n >= n - h:\n        if a - c < 0:\n            k = min(n - 1, e - n)\n        else:\n            k = max(n - h, 1)\n        ans = min(ans, (a - c) * k + n * c)\n    if e // 2 >= 1 and e // 2 + h // 3 >= n:\n        if a < b:\n            k = min(n - 1, e // 2)\n        else:\n            k = max((3 * n - h + 2) // 3, 1)\n        ans = min(ans, (a - b) * k + n * b)\n    if e >= 3 and h >= 4 and (n >= 3):\n        ans = min(ans, a + b + c + dfs(n - 3, e - 3, h - 4, a, b, c))\n    return ans\nfor i in range(0, t):\n    (n, e, h, a, b, c) = get_ints()\n    final = dfs(n, e, h, a, b, c)\n    if final == 10 ** 15:\n        final = -1\n    print(final)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\nsys.setrecursionlimit(1500000)\nt = int(input())\n\ndef dfs(n, e, h, a, b, c):\n    if n < 0:\n        return 0\n    ans = 10 ** 15\n    if 2 * n <= e:\n        ans = min(ans, n * a)\n    if n <= e and n <= h:\n        ans = min(ans, n * c)\n    if 3 * n <= h:\n        ans = min(ans, b * n)\n    if (h - n) // 2 >= 1 and (h - n) // 2 >= n - e:\n        if b - c < 0:\n            k = min(n - 1, (h - n) // 2)\n        else:\n            k = max(n - e, 1)\n        ans = min(ans, (b - c) * k + n * c)\n    if e - n >= 1 and e - n >= n - h:\n        if a - c < 0:\n            k = min(n - 1, e - n)\n        else:\n            k = max(n - h, 1)\n        ans = min(ans, (a - c) * k + n * c)\n    if e // 2 >= 1 and e // 2 + h // 3 >= n:\n        if a < b:\n            k = min(n - 1, e // 2)\n        else:\n            k = max((3 * n - h + 2) // 3, 1)\n        ans = min(ans, (a - b) * k + n * b)\n    if e >= 3 and h >= 4 and (n >= 3):\n        ans = min(ans, a + b + c + dfs(n - 3, e - 3, h - 4, a, b, c))\n    return ans\nfor i in range(0, t):\n    (n, e, h, a, b, c) = get_ints()\n    final = dfs(n, e, h, a, b, c)\n    if final == 10 ** 15:\n        final = -1\n    print(final)", "def min_cost(N, E, H, A, B, C):\n    res = 1e+18\n    for cake in range(N + 1):\n        if E < cake or H < cake:\n            break\n        maxO = (E - cake) // 2\n        maxM = (h - cake) // 3\n        if cake + maxO + maxM < N:\n            continue\n        else:\n            if A < B:\n                reqO = min(N - cake, maxO)\n                reqM = N - cake - reqO\n            else:\n                reqM = min(N - cake, maxM)\n                reqO = N - cake - reqM\n            price = cake * C + A * reqO + B * reqM\n            res = min(res, price)\n    return res if res != 1e+18 else -1\nT = int(input())\nfor _ in range(T):\n    (n, e, h, a, b, c) = map(int, input().split())\n    ans = min_cost(n, e, h, a, b, c)\n    print(ans)", "T = int(input())\nfor i in range(T):\n    (n, egg, choc, a, b, c) = map(int, input().split())\n    best = float('inf')\n    for i in range(n + 1):\n        E = egg - i\n        CH = choc - i\n        if E < 0 or CH < 0:\n            continue\n        (om, shk) = (E // 2, CH // 3)\n        if i + om + shk < n:\n            continue\n        num = n - i\n        cost = 0\n        if a <= b:\n            cost += i * c\n            m = min(num, om)\n            cost += m * a\n            num -= m\n            m = min(shk, num)\n            cost += m * b\n            best = min(best, cost)\n        else:\n            cost += i * c\n            m = min(num, shk)\n            cost += m * b\n            num -= m\n            m = min(om, num)\n            cost += m * a\n            best = min(best, cost)\n    if best == float('inf'):\n        print('-1')\n    else:\n        print(best)", "import sys\nsys.setrecursionlimit(10 ** 6)\n\ndef fa(n, e, h, a, b, c):\n    ans = 10 ** 13\n    if n <= e and n <= h:\n        ans = min(ans, n * c)\n    if 2 * n <= e:\n        ans = min(ans, n * a)\n    if n * 3 <= h:\n        ans = min(ans, n * b)\n    if (h - n) // 2 >= 1 and (h - n) // 2 >= n - e:\n        if b - c < 0:\n            k = min(n - 1, (h - n) // 2)\n            ans = min(ans, (b - c) * k + n * c)\n        else:\n            k = max(1, n - e)\n            ans = min(ans, (b - c) * k + n * c)\n    if e - n >= 1 and e - n >= n - h:\n        if a - c < 0:\n            k = min(n - 1, e - n)\n            ans = min(ans, (a - c) * k + n * c)\n        else:\n            k = max(1, n - h)\n            ans = min(ans, (a - c) * k + n * c)\n    if e // 2 >= 1 and e // 2 >= (3 * n - h + 2) // 3:\n        if a - b < 0:\n            k = min(n - 1, e // 2)\n            ans = min(ans, (a - b) * k + n * b)\n        else:\n            k = max(1, (3 * n - h + 2) // 3)\n            ans = min(ans, (a - b) * k + n * b)\n    if e >= 3 and h >= 4 and (n >= 3):\n        ans = min(ans, a + b + c + fa(n - 3, e - 3, h - 4, a, b, c))\n    return ans\nfor i in range(int(input())):\n    (n, e, h, a, b, c) = list(map(int, input().split()))\n    ans = 10 ** 10\n    if n <= 0:\n        print(0)\n    else:\n        P = fa(n, e, h, a, b, c)\n        if P == 10 ** 13:\n            print(-1)\n        else:\n            print(P)", "for _ in range(int(input())):\n    (n, egg, choc, a, b, c) = map(int, input().split())\n    best = float('inf')\n    for i in range(n + 1):\n        E = egg - i\n        CH = choc - i\n        if E < 0 or CH < 0:\n            continue\n        (om, shk) = (E // 2, CH // 3)\n        if i + om + shk < n:\n            continue\n        num = n - i\n        cost = 0\n        if a <= b:\n            cost += i * c\n            m = min(num, om)\n            cost += m * a\n            num -= m\n            m = min(shk, num)\n            cost += m * b\n            best = min(best, cost)\n        else:\n            cost += i * c\n            m = min(num, shk)\n            cost += m * b\n            num -= m\n            m = min(om, num)\n            cost += m * a\n            best = min(best, cost)\n    if best == float('inf'):\n        print('-1')\n    else:\n        print(best)", "import math\nT = int(input())\nfor z in range(T):\n    (N, E, H, A, B, C) = map(int, input().split(' '))\n    mini = -1\n    for a in range(0, N + 1):\n        c_max = min(N - a, E - 2 * a)\n        c_min = max(math.ceil((3 * N - 3 * a - H) / 2), 0)\n        b_min = N - a - c_max\n        b_max = min(N - a, N - a - c_min)\n        if c_min > c_max or b_min > b_max or c_max < 0 or (b_max < 0):\n            continue\n        if B < C:\n            price = a * A + b_max * B + (N - a - b_max) * C\n        else:\n            price = a * A + (N - a - c_max) * B + c_max * C\n        if mini != -1:\n            mini = min(mini, price)\n        else:\n            mini = price\n    print(mini)", "import math\nT = int(input())\nfor z in range(T):\n    (N, E, H, A, B, C) = map(int, input().split(' '))\n    mini = -1\n    for a in range(0, N + 1):\n        c_max = min(N - a, E - 2 * a)\n        c_min = max(math.ceil((3 * N - 3 * a - H) / 2), 0)\n        b_min = N - a - c_max\n        b_max = min(N - a, N - a - c_min)\n        if c_min > c_max or b_min > b_max or c_max < 0 or (b_max < 0):\n            continue\n        if B < C:\n            price = a * A + b_max * B + (N - a - b_max) * C\n        else:\n            price = a * A + (N - a - c_max) * B + c_max * C\n        if mini != -1:\n            mini = min(mini, price)\n        else:\n            mini = price\n    print(mini)", "T = int(input())\nfor i in range(T):\n    (N, E, H, A, B, C) = (int(x) for x in input().split())\n    l = []\n    if N > E and N > H:\n        print('-1')\n    else:\n        for cake in range(0, min(N, min(E, H)) + 1):\n            if E - cake >= 0 and H - cake >= 0:\n                o = (E - cake) // 2\n                s = (H - cake) // 3\n                if A <= B:\n                    omletes = min(N - cake, o)\n                    shake = N - cake - omletes\n                    if s >= shake and omletes >= 0 and (shake >= 0):\n                        price = cake * C + omletes * A + shake * B\n                        l.append(price)\n                else:\n                    shake = min(N - cake, s)\n                    omletes = N - cake - shake\n                    if o >= omletes and omletes >= 0 and (shake >= 0):\n                        price = cake * C + omletes * A + shake * B\n                        l.append(price)\n        if len(l) == 0:\n            print('-1')\n        else:\n            print(min(l))", "T = int(input())\nfor i in range(T):\n    (N, E, H, A, B, C) = (int(x) for x in input().split())\n    l = []\n    if N > E and N > H:\n        print('-1')\n    else:\n        for cake in range(0, min(N, min(E, H)) + 1):\n            if E - cake >= 0 and H - cake >= 0:\n                o = (E - cake) // 2\n                s = (H - cake) // 3\n                if A <= B:\n                    omletes = min(N - cake, o)\n                    shake = N - cake - omletes\n                    if s >= shake and omletes >= 0 and (shake >= 0):\n                        price = cake * C + omletes * A + shake * B\n                        l.append(price)\n                else:\n                    shake = min(N - cake, s)\n                    omletes = N - cake - shake\n                    if o >= omletes and omletes >= 0 and (shake >= 0):\n                        price = cake * C + omletes * A + shake * B\n                        l.append(price)\n        if len(l) == 0:\n            print('-1')\n        else:\n            print(min(l))", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\nsys.setrecursionlimit(1500000)\nt = int(input())\n\ndef dfs(n, e, h, a, b, c):\n    if n < 0:\n        return 0\n    ans = 10 ** 15\n    if 2 * n <= e:\n        ans = min(ans, n * a)\n    if n <= e and n <= h:\n        ans = min(ans, n * c)\n    if 3 * n <= h:\n        ans = min(ans, b * n)\n    if (h - n) // 2 >= 1 and (h - n) // 2 >= n - e:\n        if b - c < 0:\n            k = min(n - 1, (h - n) // 2)\n        else:\n            k = max(n - e, 1)\n        ans = min(ans, (b - c) * k + n * c)\n    if e - n >= 1 and e - n >= n - h:\n        if a - c < 0:\n            k = min(n - 1, e - n)\n        else:\n            k = max(n - h, 1)\n        ans = min(ans, (a - c) * k + n * c)\n    if e // 2 >= 1 and e // 2 + h // 3 >= n:\n        if a < b:\n            k = min(n - 1, e // 2)\n        else:\n            k = max((3 * n - h + 2) // 3, 1)\n        ans = min(ans, (a - b) * k + n * b)\n    if e >= 3 and h >= 4 and (n >= 3):\n        ans = min(ans, a + b + c + dfs(n - 3, e - 3, h - 4, a, b, c))\n    return ans\nfor i in range(0, t):\n    (n, e, h, a, b, c) = get_ints()\n    final = dfs(n, e, h, a, b, c)\n    if final == 10 ** 15:\n        final = -1\n    print(final)", "from sys import stdin, stdout\n(readline, writeline) = (stdin.readline, stdout.write)\nfor _ in range(int(readline())):\n    (n, egg, choc, a, b, c) = map(int, readline().split())\n    best = float('inf')\n    for i in range(n + 1):\n        E = egg - i\n        CH = choc - i\n        if E < 0 or CH < 0:\n            continue\n        (om, shk) = (E // 2, CH // 3)\n        if i + om + shk < n:\n            continue\n        num = n - i\n        cost = 0\n        if a <= b:\n            cost += i * c\n            m = min(num, om)\n            cost += m * a\n            num -= m\n            m = min(shk, num)\n            cost += m * b\n            best = min(best, cost)\n        else:\n            cost += i * c\n            m = min(num, shk)\n            cost += m * b\n            num -= m\n            m = min(om, num)\n            cost += m * a\n            best = min(best, cost)\n    if best == float('inf'):\n        print('-1')\n    else:\n        print(best)", "import math\nT = int(input())\nfor _ in range(T):\n    (N, E, H, A, B, C) = map(int, input().split(' '))\n    minimum = -1\n    for a in range(0, N + 1):\n        c_max = min(N - a, E - 2 * a)\n        c_min = max(math.ceil((3 * N - 3 * a - H) / 2), 0)\n        b_min = N - a - c_max\n        b_max = min(N - a, N - a - c_min)\n        if c_min > c_max or b_min > b_max or c_max < 0 or (b_max < 0):\n            continue\n        if B < C:\n            price = a * A + b_max * B + (N - a - b_max) * C\n        else:\n            price = a * A + (N - a - c_max) * B + c_max * C\n        if minimum != -1:\n            minimum = min(minimum, price)\n        else:\n            minimum = price\n    print(minimum)", "t = int(input())\nfor i in range(t):\n    (n, e, h, a, b, c) = map(int, input().split())\n    ans = 1e+18\n    for cake in range(0, n + 1):\n        if e < cake or h < cake:\n            break\n        omlets = (e - cake) // 2\n        milkshake = (h - cake) // 3\n        if cake + omlets + milkshake < n:\n            continue\n        if a < b:\n            reqomletes = min(n - cake, omlets)\n            reqmilkshake = n - cake - reqomletes\n        else:\n            reqmilkshake = min(n - cake, milkshake)\n            reqomletes = n - cake - reqmilkshake\n        price = cake * c + reqomletes * a + reqmilkshake * b\n        ans = min(ans, price)\n    if ans == 1e+18:\n        print(-1)\n    else:\n        print(ans)", "from operator import itemgetter\nfrom math import floor\n\ndef solution(N, E, H, A, B, C):\n    imp_cost = max(A, B, C) * (N + 5)\n    min_cost = imp_cost\n    for z in range(N + 1):\n        if E < z or H < z:\n            continue\n        maxX = min(N - z, floor((E - z) / 2))\n        maxY = min(N - z, floor((H - z) / 3))\n        if z + maxX + maxY < N:\n            continue\n        if A < B:\n            x = maxX\n            y = N - z - x\n        else:\n            y = maxY\n            x = N - z - y\n        cost = A * x + B * y + C * z\n        if cost < min_cost:\n            min_cost = cost\n    if min_cost == imp_cost:\n        min_cost = -1\n    return min_cost\n\ndef main():\n    T = int(input())\n    for t in range(T):\n        (N, E, H, A, B, C) = [int(x) for x in input().split()]\n        print(solution(N, E, H, A, B, C))\nmain()", "t = int(input())\nfor l in range(t):\n    (n, e, h, a, b, c) = map(int, input().split())\n    if a < b:\n        s = True\n    else:\n        s = False\n    ans = 1e+18\n    for i in range(n + 1):\n        if e < i or h < i:\n            break\n        max_x = (e - i) // 2\n        max_y = (h - i) // 3\n        if i + max_x + max_y < n:\n            continue\n        if s:\n            x = min(n - i, max_x)\n            y = n - i - x\n            price = x * a + y * b + i * c\n            ans = min(ans, price)\n        else:\n            y = min(n - i, max_y)\n            x = n - i - y\n            price = x * a + y * b + i * c\n            ans = min(ans, price)\n    if ans == 1e+18:\n        ans = -1\n    print(ans)", "import sys\nsys.setrecursionlimit(10 ** 6)\n\ndef fa(n, e, h, a, b, c):\n    ans = 10 ** 13\n    if n <= e and n <= h:\n        ans = min(ans, n * c)\n    if 2 * n <= e:\n        ans = min(ans, n * a)\n    if n * 3 <= h:\n        ans = min(ans, n * b)\n    if (h - n) // 2 >= 1 and (h - n) // 2 >= n - e:\n        if b - c < 0:\n            k = min(n - 1, (h - n) // 2)\n            ans = min(ans, (b - c) * k + n * c)\n        else:\n            k = max(1, n - e)\n            ans = min(ans, (b - c) * k + n * c)\n    if e - n >= 1 and e - n >= n - h:\n        if a - c < 0:\n            k = min(n - 1, e - n)\n            ans = min(ans, (a - c) * k + n * c)\n        else:\n            k = max(1, n - h)\n            ans = min(ans, (a - c) * k + n * c)\n    if e // 2 >= 1 and e // 2 >= (3 * n - h + 2) // 3:\n        if a - b < 0:\n            k = min(n - 1, e // 2)\n            ans = min(ans, (a - b) * k + n * b)\n        else:\n            k = max(1, (3 * n - h + 2) // 3)\n            ans = min(ans, (a - b) * k + n * b)\n    if e >= 3 and h >= 4 and (n >= 3):\n        ans = min(ans, a + b + c + fa(n - 3, e - 3, h - 4, a, b, c))\n    return ans\nfor i in range(int(input())):\n    (n, e, h, a, b, c) = list(map(int, input().split()))\n    ans = 10 ** 10\n    if n <= 0:\n        print(0)\n    else:\n        P = fa(n, e, h, a, b, c)\n        if P == 10 ** 13:\n            print(-1)\n        else:\n            print(P)", "import sys\nt = int(input())\nfor _ in range(t):\n    (n, e, h, a, b, c) = list(map(int, input().split()))\n    ans = sys.maxsize\n    for i in range(min(min(e, h) + 1, n + 1)):\n        om = (e - i) // 2\n        milk = (h - i) // 3\n        cc = i\n        if om + milk + cc >= n:\n            out = 0\n            cnt = cc\n            out += cc * c\n            if a < b:\n                out += min(om, n - cnt) * a\n                cnt += min(om, n - cnt)\n                out += min(milk, n - cnt) * b\n                cnt += min(milk, n - cnt)\n            else:\n                out += min(milk, n - cnt) * b\n                cnt += min(milk, n - cnt)\n                out += min(om, n - cnt) * a\n                cnt += min(om, n - cnt)\n            ans = min(ans, out)\n    if ans == sys.maxsize:\n        print(-1)\n    else:\n        print(ans)", "import sys\nt = int(input())\nfor _ in range(t):\n    (n, e, h, a, b, c) = list(map(int, input().split()))\n    ans = sys.maxsize\n    for i in range(min(min(e, h) + 1, n + 1)):\n        om = (e - i) // 2\n        milk = (h - i) // 3\n        cc = i\n        if om + milk + cc >= n:\n            out = 0\n            cnt = cc\n            out += cc * c\n            if a < b:\n                out += min(om, n - cnt) * a\n                cnt += min(om, n - cnt)\n                out += min(milk, n - cnt) * b\n                cnt += min(milk, n - cnt)\n            else:\n                out += min(milk, n - cnt) * b\n                cnt += min(milk, n - cnt)\n                out += min(om, n - cnt) * a\n                cnt += min(om, n - cnt)\n            ans = min(ans, out)\n    if ans == sys.maxsize:\n        print(-1)\n    else:\n        print(ans)", "for _ in range(int(input())):\n    (n, e, h, a, b, c) = map(int, input().split())\n    ans = []\n    for cakes in range(n + 1):\n        if e < cakes or h < cakes:\n            break\n        if int((e - cakes) / 2) + int((h - cakes) / 3) + cakes < n:\n            continue\n        else:\n            if a < b:\n                ro = min(n - cakes, int((e - cakes) / 2))\n                rm = n - cakes - ro\n            else:\n                rm = min(n - cakes, int((h - cakes) / 3))\n                ro = n - cakes - rm\n            ans.append(rm * b + ro * a + cakes * c)\n    if len(ans) == 0:\n        print(-1)\n    else:\n        print(int(min(ans)))", "import math\nt = int(input())\nfor _ in range(t):\n    (n, e, h, a, b, c) = list(map(int, input().strip().split()))\n    min_price = 10 ** 15\n    limit = min(e, h, n)\n    for z in range(0, limit + 1):\n        price = 10 ** 15\n        if a >= b:\n            y = min(math.floor((h - z) // 3), n - z)\n            x = n - y - z\n            if x <= math.floor((e - z) // 2):\n                price = a * x + b * y + c * z\n        elif b > a:\n            x = min(math.floor((e - z) // 2), n - z)\n            y = n - x - z\n            if y <= math.floor((h - z) // 3):\n                price = a * x + b * y + c * z\n        if price < min_price:\n            min_price = price\n    if min_price == 10 ** 15:\n        print(-1)\n    else:\n        print(min_price)", "def minimum_price(n, e, h, a, b, c):\n    flag = 0\n    max_price = 0\n    for cake in range(n + 1):\n        if e < cake or h < cake:\n            continue\n        maxo = (e - cake) // 2\n        maxh = (h - cake) // 3\n        if cake + maxo + maxh < n:\n            continue\n        if a < b:\n            reqo = min(n - cake, maxo)\n            reqm = n - cake - reqo\n        else:\n            reqm = min(n - cake, maxh)\n            reqo = n - cake - reqm\n        price = cake * c + reqo * a + reqm * b\n        if max_price == 0:\n            max_price = price\n        max_price = min(max_price, price)\n    if max_price == 0:\n        return -1\n    else:\n        return max_price\nt = int(input())\nwhile t > 0:\n    (n, e, h, a, b, c) = map(int, input().split())\n    print(minimum_price(n, e, h, a, b, c))\n    t -= 1", "def minimum_price(n, e, h, a, b, c):\n    flag = 0\n    max_price = 0\n    for cake in range(n + 1):\n        if e < cake or h < cake:\n            continue\n        maxo = (e - cake) // 2\n        maxh = (h - cake) // 3\n        if cake + maxo + maxh < n:\n            continue\n        if a < b:\n            reqo = min(n - cake, maxo)\n            reqm = n - cake - reqo\n        else:\n            reqm = min(n - cake, maxh)\n            reqo = n - cake - reqm\n        price = cake * c + reqo * a + reqm * b\n        if max_price == 0:\n            max_price = price\n        max_price = min(max_price, price)\n    if max_price == 0:\n        return -1\n    else:\n        return max_price\nt = int(input())\nwhile t > 0:\n    (n, e, h, a, b, c) = map(int, input().split())\n    print(minimum_price(n, e, h, a, b, c))\n    t -= 1", "def findPrice(n, nC, a, b, c, e, h):\n    price = c * nC\n    eRem = e - nC\n    hRem = h - nC\n    if eRem // 2 + nC + hRem // 3 < n:\n        return -1\n    if a < b:\n        nO = min(n - nC, eRem // 2)\n        nM = min(n - nC - nO, hRem // 3)\n        price = price + nO * a + nM * b\n    else:\n        nM = min(n - nC, hRem // 3)\n        nO = min(n - nC - nM, eRem // 2)\n        price = price + nO * a + nM * b\n    return price\nt = int(input())\nfor _ in range(t):\n    (n, e, h, a, b, c) = list(map(int, input().strip().split()))\n    numCakes = min(e if e < h else h, n)\n    eRem = e - numCakes\n    hRem = h - numCakes\n    if eRem // 2 + numCakes + hRem // 3 < n:\n        print(-1)\n    else:\n        price = findPrice(n, numCakes, a, b, c, e, h)\n        for i in range(numCakes - 1, -1, -1):\n            curr = findPrice(n, i, a, b, c, e, h)\n            if curr == -1:\n                continue\n            if curr < price:\n                price = curr\n        print(price)", "def findPrice(n, nC, a, b, c, e, h):\n    price = c * nC\n    eRem = e - nC\n    hRem = h - nC\n    if eRem // 2 + nC + hRem // 3 < n:\n        if (eRem + 1) // 2 + (nC - 1) + (hRem + 1) // 3 < n:\n            return -2\n        return -1\n    if a < b:\n        nO = min(n - nC, eRem // 2)\n        nM = min(n - nC - nO, hRem // 3)\n        price = price + nO * a + nM * b\n    else:\n        nM = min(n - nC, hRem // 3)\n        nO = min(n - nC - nM, eRem // 2)\n        price = price + nO * a + nM * b\n    return price\nt = int(input())\nfor _ in range(t):\n    (n, e, h, a, b, c) = list(map(int, input().strip().split()))\n    numCakes = min(e if e < h else h, n)\n    eRem = e - numCakes\n    hRem = h - numCakes\n    if eRem // 2 + numCakes + hRem // 3 < n:\n        print(-1)\n    else:\n        price = findPrice(n, numCakes, a, b, c, e, h)\n        for i in range(numCakes - 1, -1, -1):\n            curr = findPrice(n, i, a, b, c, e, h)\n            if curr == -2:\n                break\n            if curr == -1:\n                continue\n            if curr < price:\n                price = curr\n        print(price)", "def findPrice(n, nC, a, b, c, e, h):\n    price = c * nC\n    eRem = e - nC\n    hRem = h - nC\n    if eRem // 2 + nC + hRem // 3 < n:\n        return -1\n    if a < b:\n        nO = min(n - nC, eRem // 2)\n        nM = min(n - nC - nO, hRem // 3)\n        price = price + nO * a + nM * b\n    else:\n        nM = min(n - nC, hRem // 3)\n        nO = min(n - nC - nM, eRem // 2)\n        price = price + nO * a + nM * b\n    return price\nt = int(input())\nfor _ in range(t):\n    (n, e, h, a, b, c) = list(map(int, input().strip().split()))\n    numCakes = min(e if e < h else h, n)\n    eRem = e - numCakes\n    hRem = h - numCakes\n    if eRem // 2 + numCakes + hRem // 3 < n:\n        print(-1)\n    else:\n        price = findPrice(n, numCakes, a, b, c, e, h)\n        for i in range(numCakes - 1, -1, -1):\n            curr = findPrice(n, i, a, b, c, e, h)\n            if curr == -1:\n                continue\n            if curr < price:\n                price = curr\n        print(price)", "def findPrice(n, nC, a, b, c, e, h):\n    price = c * nC\n    eRem = e - nC\n    hRem = h - nC\n    if eRem // 2 + nC + hRem // 3 < n:\n        return -1\n    if a < b:\n        nO = min(n - nC, eRem // 2)\n        nM = min(n - nC - nO, hRem // 3)\n        price = price + nO * a + nM * b\n    else:\n        nM = min(n - nC, hRem // 3)\n        nO = min(n - nC - nM, eRem // 2)\n        price = price + nO * a + nM * b\n    return price\nt = int(input())\nfor _ in range(t):\n    (n, e, h, a, b, c) = list(map(int, input().strip().split()))\n    numCakes = min(e if e < h else h, n)\n    eRem = e - numCakes\n    hRem = h - numCakes\n    if eRem // 2 + numCakes + hRem // 3 < n:\n        print(-1)\n    else:\n        price = findPrice(n, numCakes, a, b, c, e, h)\n        for i in range(numCakes - 1, -1, -1):\n            curr = findPrice(n, i, a, b, c, e, h)\n            if curr == -1:\n                continue\n            if curr < price:\n                price = curr\n        print(price)", "def findPrice(n, nC, a, b, c, e, h):\n    price = c * nC\n    eRem = e - nC\n    hRem = h - nC\n    if eRem // 2 + nC + hRem // 3 < n:\n        return -1\n    if a < b:\n        nO = min(n - nC, eRem // 2)\n        nM = min(n - nC - nO, hRem // 3)\n        price = price + nO * a + nM * b\n    else:\n        nM = min(n - nC, hRem // 3)\n        nO = min(n - nC - nM, eRem // 2)\n        price = price + nO * a + nM * b\n    return price\nt = int(input())\nfor _ in range(t):\n    (n, e, h, a, b, c) = list(map(int, input().strip().split()))\n    numCakes = min(e if e < h else h, n)\n    eRem = e - numCakes\n    hRem = h - numCakes\n    if eRem // 2 + numCakes + hRem // 3 < n:\n        print(-1)\n    else:\n        found = False\n        price = -1\n        for i in range(numCakes, -1, -1):\n            curr = findPrice(n, i, a, b, c, e, h)\n            if not found and curr != -1:\n                price = curr\n                found = True\n            elif found and curr != -1 and (curr < price):\n                price = curr\n        print(price)", "def findPrice(n, nC, a, b, c, e, h):\n    price = c * nC\n    eRem = e - nC\n    hRem = h - nC\n    if eRem // 2 + nC + hRem // 3 < n:\n        return -1\n    if a < b:\n        nO = min(n - nC, eRem // 2)\n        nM = min(n - nC - nO, hRem // 3)\n        price = price + nO * a + nM * b\n    else:\n        nM = min(n - nC, hRem // 3)\n        nO = min(n - nC - nM, eRem // 2)\n        price = price + nO * a + nM * b\n    return price\nt = int(input())\nfor _ in range(t):\n    (n, e, h, a, b, c) = list(map(int, input().strip().split()))\n    numCakes = e if e < h else h\n    eRem = e - numCakes\n    hRem = h - numCakes\n    if eRem // 2 + numCakes + hRem // 3 < n:\n        print(-1)\n    else:\n        found = False\n        price = -1\n        for i in range(min(numCakes, n), -1, -1):\n            curr = findPrice(n, i, a, b, c, e, h)\n            if not found and curr != -1:\n                price = curr\n                found = True\n            elif found and curr != -1 and (curr < price):\n                price = curr\n        print(price)", "for testcase in range(int(input())):\n    (items, eggs, chocolates, costometlette, costShake, costCake) = map(int, input().split())\n    ans = 10 ** 18\n    for cakes in range(items + 1):\n        if eggs < cakes or chocolates < cakes:\n            break\n        omelettes = int((eggs - cakes) / 2)\n        shake = int((chocolates - cakes) / 3)\n        if cakes + omelettes + shake < items:\n            continue\n        if costometlette < costShake:\n            omelettesReq = min(omelettes, items - cakes)\n            shakeReq = items - cakes - omelettesReq\n        else:\n            shakeReq = min(shake, items - cakes)\n            omelettesReq = items - cakes - shakeReq\n        finalcost = costCake * cakes + costometlette * omelettesReq + costShake * shakeReq\n        ans = min(ans, finalcost)\n    if ans == 10 ** 18:\n        print(-1)\n    else:\n        print(ans)", "T = int(input())\nimport sys\nwhile T:\n    (N, E, H, A, B, C) = list(map(int, input().split()))\n    minprice = sys.maxsize\n    for cake in range(N + 1):\n        if E < cake or H < cake:\n            break\n        omlette = (E - cake) // 2\n        milkshake = (H - cake) // 3\n        if omlette + cake + milkshake < N:\n            continue\n        if A < B:\n            omletteReq = min(omlette, N - cake)\n            milkshakeReq = N - cake - omletteReq\n        else:\n            milkshakeReq = min(milkshake, N - cake)\n            omletteReq = N - cake - milkshakeReq\n        price = omletteReq * A + milkshakeReq * B + cake * C\n        minprice = min(minprice, price)\n    if minprice == sys.maxsize:\n        print(-1)\n    else:\n        print(minprice)\n    T -= 1", "for testcase in range(int(input())):\n    (items, eggs, chocolates, costometlette, costShake, costCake) = map(int, input().split())\n    ans = 10 ** 18\n    for cakes in range(items + 1):\n        if eggs < cakes or chocolates < cakes:\n            break\n        omelettes = int((eggs - cakes) / 2)\n        shake = int((chocolates - cakes) / 3)\n        if cakes + omelettes + shake < items:\n            continue\n        if costometlette < costShake:\n            omelettesReq = min(omelettes, items - cakes)\n            shakeReq = items - cakes - omelettesReq\n        else:\n            shakeReq = min(shake, items - cakes)\n            omelettesReq = items - cakes - shakeReq\n        finalcost = costCake * cakes + costometlette * omelettesReq + costShake * shakeReq\n        ans = min(ans, finalcost)\n    if ans == 10 ** 18:\n        print(-1)\n    else:\n        print(ans)", "for _ in range(int(input())):\n    (N, E, H, A, B, C) = map(int, input().split())\n    a = int(1e+18)\n    for i in range(N + 1):\n        if E < i or H < i:\n            break\n        nom = (E - i) // 2\n        ncm = (H - i) // 3\n        if i + nom + ncm < N:\n            continue\n        if A < B:\n            Omr = min(nom, N - i)\n            cmr = N - i - Omr\n        else:\n            cmr = min(ncm, N - i)\n            Omr = N - i - cmr\n        price = i * C + Omr * A + cmr * B\n        a = min(a, price)\n    if a == int(1e+18):\n        print(-1)\n    else:\n        print(int(a))", "for _ in range(int(input())):\n    (n, e, h, a, b, c) = map(int, input().split())\n    ans = []\n    for cakes in range(n + 1):\n        if e < cakes or h < cakes:\n            break\n        if int((e - cakes) / 2) + int((h - cakes) / 3) + cakes < n:\n            continue\n        else:\n            if a < b:\n                ro = min(n - cakes, int((e - cakes) / 2))\n                rm = n - cakes - ro\n            else:\n                rm = min(n - cakes, int((h - cakes) / 3))\n                ro = n - cakes - rm\n            ans.append(rm * b + ro * a + cakes * c)\n    if len(ans) == 0:\n        print(-1)\n    else:\n        print(int(min(ans)))", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef solve(n, eggs, chocolates, omPrice, shakePrice, cakePrice):\n    minPrice = 10 ** 12\n    for cake in range(n + 1):\n        if eggs < cake or chocolates < cake:\n            break\n        maxOmellete = (eggs - cake) // 2\n        maxChocolates = (chocolates - cake) // 3\n        if cake + maxOmellete + maxChocolates < n:\n            continue\n        if omPrice < shakePrice:\n            omelleteReq = min(n - cake, maxOmellete)\n            shakesReq = n - cake - omelleteReq\n        else:\n            shakesReq = min(n - cake, maxChocolates)\n            omelleteReq = n - cake - shakesReq\n        price = cake * cakePrice + omelleteReq * omPrice + shakesReq * shakePrice\n        minPrice = min(price, minPrice)\n    if minPrice == 10 ** 12:\n        return -1\n    return minPrice\nt = int(input())\nfor i in range(t):\n    (n, e, h, a, b, c) = get_ints()\n    print(solve(n, e, h, a, b, c))", "t = int(input())\nfor _ in range(t):\n    (n, e, h, a, b, c) = map(int, input().split())\n    mini = set()\n    f = 0\n    for cake in range(0, n + 1):\n        if e < cake or h < cake:\n            continue\n        maxa = (e - cake) // 2\n        maxb = (h - cake) // 3\n        if cake + maxa + maxb < n:\n            continue\n        if a < b:\n            ome = min(n - cake, maxa)\n            milk = n - cake - ome\n        else:\n            milk = min(n - cake, maxb)\n            ome = n - cake - milk\n        price = ome * a + milk * b + cake * c\n        mini.add(price)\n    if mini == set():\n        print(-1)\n    else:\n        print(min(mini))", "try:\n    t = int(input())\n    for i in range(t):\n        (items, eggs, chocolates, price_omlette, price_milkshake, price_cake) = map(int, input().split())\n        ans = 1e+18\n        for cakes in range(0, items + 1):\n            if eggs < cakes or chocolates < cakes:\n                break\n            omlettes = (eggs - cakes) // 2\n            milkshakes = (chocolates - cakes) // 3\n            if cakes + milkshakes + omlettes < items:\n                continue\n            if price_omlette < price_milkshake:\n                req_omlettes = min(omlettes, items - cakes)\n                req_milkshakes = items - cakes - req_omlettes\n            else:\n                req_milkshakes = min(milkshakes, items - cakes)\n                req_omlettes = items - cakes - req_milkshakes\n            price = cakes * price_cake + req_omlettes * price_omlette + req_milkshakes * price_milkshake\n            ans = min(ans, price)\n        if ans == 1e+18:\n            ans = -1\n            print(ans)\n        else:\n            print(ans)\nexcept:\n    pass", "import math\nt = int(input())\nfor _ in range(t):\n    (n, e, h, a, b, c) = [int(x) for x in input().split()]\n    ans = math.inf\n    for i in range(min(e, h, n), -1, -1):\n        cc = i\n        if cc < n:\n            ans1 = cc * c\n            if (e - cc) // 2 + (h - cc) // 3 >= n - cc:\n                t1 = min((e - cc) // 2, n - cc)\n                t2 = min((h - cc) // 3, n - cc)\n                if a <= b:\n                    ans1 += t1 * a\n                    ans1 += (n - cc - t1) * b\n                else:\n                    ans1 += t2 * b\n                    ans1 += (n - cc - t2) * a\n            else:\n                ans1 = math.inf\n            ans = min(ans, ans1)\n        else:\n            ans = min(ans, n * c)\n    if ans == math.inf:\n        print(-1)\n    else:\n        print(ans)", "def getMin(n, e, ch, omCost, mkCost, ckCost):\n    ans = float('inf')\n    (omReq, mkshakeReq) = (0, 0)\n    for cakes in range(n + 1):\n        if e < cakes or ch < cakes:\n            break\n        omelettes = (e - cakes) // 2\n        milkshakes = (ch - cakes) // 3\n        if cakes + omelettes + milkshakes < n:\n            continue\n        if omCost < mkCost:\n            omReq = min(n - cakes, omelettes)\n            mkshakeReq = n - cakes - omReq\n        else:\n            mkshakeReq = min(n - cakes, milkshakes)\n            omReq = n - cakes - mkshakeReq\n        price = ckCost * cakes + omCost * omReq + mkCost * mkshakeReq\n        ans = min(ans, price)\n    if ans == float('inf'):\n        return -1\n    return ans\nfor i in range(int(input())):\n    (n, e, ch, om, mk, ck) = [int(i) for i in input().split()]\n    print(getMin(n, e, ch, om, mk, ck))", "for TC in range(int(input())):\n    (N, E, H, A, B, C) = map(int, input().split())\n    result = int(1e+18)\n    flag = 0\n    for i in range(N + 1):\n        if E < i or H < i:\n            break\n        cost = i * C\n        first = N - i\n        second = E - i\n        third = H - i\n        if A < B:\n            e1 = min(second // 2, first)\n            cost += e1 * A\n            first -= e1\n            if third // 3 < first:\n                continue\n            cost += first * B\n            result = min(result, cost)\n        else:\n            b1 = min(third // 3, first)\n            cost += b1 * B\n            first -= b1\n            if second // 2 < first:\n                continue\n            cost += first * A\n            result = min(result, cost)\n    if result == int(1e+18):\n        print('-1')\n    else:\n        print(result)", "for TC in range(int(input())):\n    (N, E, H, A, B, C) = map(int, input().split(' '))\n    result = int(1e+18)\n    flag = 0\n    for i in range(N + 1):\n        if E < i or H < i:\n            break\n        cost = i * C\n        first = N - i\n        second = E - i\n        third = H - i\n        if A < B:\n            e1 = min(second // 2, first)\n            cost += e1 * A\n            first -= e1\n            if third // 3 < first:\n                continue\n            cost += first * B\n            result = min(result, cost)\n        else:\n            b1 = min(third // 3, first)\n            cost += b1 * B\n            first -= b1\n            if second // 2 < first:\n                continue\n            cost += first * A\n            result = min(result, cost)\n    if result == int(1e+18):\n        print('-1')\n    else:\n        print(result)", "for t in range(int(input())):\n    (items, eggs, choclate, omeletteprice, milkshakeprice, cakeprice) = list(map(int, input().split()))\n    price = 0\n    ans = 1000000000000000\n    for cake in range(items + 1):\n        if eggs < cake or choclate < cake:\n            break\n        omelete = (eggs - cake) // 2\n        milkshake = (choclate - cake) // 3\n        if cake + omelete + milkshake < items:\n            continue\n        if omeletteprice < milkshakeprice:\n            omelete = min(omelete, items - cake)\n            milkshake = items - cake - omelete\n        else:\n            milkshake = min(milkshake, items - cake)\n            omelete = items - cake - milkshake\n        price = omelete * omeletteprice + milkshake * milkshakeprice + cake * cakeprice\n        ans = min(ans, price)\n    if ans == 1000000000000000:\n        ans = -1\n    print(ans)", "import math\nt = int(input())\nwhile t:\n    (N, E, H, A, B, C) = [int(x) for x in input().split()]\n    minimum = math.inf\n    for z in range(N + 1):\n        if E < z or H < z:\n            continue\n        maxO = (E - z) // 2\n        maxM = (H - z) // 3\n        if z + maxO + maxM < N:\n            continue\n        if A < B:\n            x = min(N - z, maxO)\n            y = N - z - x\n        else:\n            y = min(N - z, maxM)\n            x = N - z - y\n        price = z * C + x * A + y * B\n        minimum = min(minimum, price)\n    if minimum == math.inf:\n        print(-1)\n    else:\n        print(minimum)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, e, h, a, b, c) = map(int, input().split())\n    (cake, prize, flag) = (n, n * max([a, c, b]), False)\n    for ck in range(cake + 1):\n        N = ck\n        if e < ck or h < ck:\n            continue\n        elif ck >= n:\n            flag = True\n            pri = n * c\n        elif a <= b:\n            pri = ck * c\n            om = (e - ck) // 2\n            if (h - ck) // 3 >= n - ck - om:\n                flag = True\n                if om <= n - N:\n                    pri += om * a\n                    N += om\n                    if n - N > 0:\n                        pri += (n - N) * b\n                else:\n                    pri += (n - N) * a\n            else:\n                continue\n        else:\n            pri = ck * c\n            cs = (h - ck) // 3\n            if (e - ck) // 2 >= n - ck - cs:\n                flag = True\n                if cs <= n - N:\n                    pri += cs * b\n                    N += cs\n                    if n - N > 0:\n                        pri += (n - N) * a\n                else:\n                    pri += (n - N) * b\n            else:\n                continue\n        if pri < prize:\n            prize = pri\n    if flag == True:\n        print(prize)\n    else:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    (n, e, h, a, b, c) = map(int, input().split())\n    minCost = -1\n    for i in range(n + 1):\n        cake = i\n        if e < cake or h < cake:\n            continue\n        maxO = (e - cake) // 2\n        maxC = (h - cake) // 3\n        if maxO + maxC + cake < n:\n            continue\n        arr = [[a, maxO], [b, maxC], [c, cake]]\n        arr.sort()\n        cost = 0\n        p = n\n        for i in range(len(arr)):\n            if arr[i][1] > p:\n                cost = cost + arr[i][0] * p\n                break\n            else:\n                cost = cost + arr[i][0] * arr[i][1]\n                p = p - arr[i][1]\n        if minCost == -1:\n            minCost = cost\n        elif minCost > cost:\n            minCost = cost\n    print(minCost)", "try:\n    t = int(input())\n    for _ in range(t):\n        (n, eggs, bars, price_ome, price_milk, price_cake) = map(int, input().split())\n        (w_eggs, w_bars) = (2, 3)\n        if price_ome > price_milk:\n            (price_ome, price_milk) = (price_milk, price_ome)\n            (w_eggs, w_bars) = (w_bars, w_eggs)\n            (eggs, bars) = (bars, eggs)\n        ans = 10 ** 18\n        for cake in range(0, n + 1):\n            if eggs >= cake and bars >= cake:\n                used_ome = min(n - cake, int((eggs - cake) / w_eggs))\n                used_milk = min(n - cake - used_ome, int((bars - cake) / w_bars))\n                if cake + used_ome + used_milk == n:\n                    ans = min(ans, cake * price_cake + used_ome * price_ome + used_milk * price_milk)\n        if ans == 10 ** 18:\n            ans = -1\n        print(ans)\nexcept:\n    pass", "try:\n    for _ in range(int(input())):\n        (n, e, h, a, b, c) = list(map(int, input().split()))\n        ans = int(1e+18)\n        price = 0\n        for i in range(n + 1):\n            if e < i or h < i:\n                break\n            oms = int((e - i) / 2)\n            mshakes = int((h - i) / 3)\n            if i + oms + mshakes < n:\n                continue\n            if a < b:\n                omsreq = int(min(oms, n - i))\n                mshakesreq = int(n - i - omsreq)\n            else:\n                mshakesreq = int(min(mshakes, n - i))\n                omsreq = int(n - i - mshakesreq)\n            price = int(i * c + omsreq * a + mshakesreq * b)\n            ans = min(ans, price)\n        if ans == 1e+18:\n            ans = -1\n        print(ans)\nexcept:\n    pass", "t = int(input())\nwhile t:\n    (n, e, h, a, b, c) = map(int, input().split())\n    min_cost = 10 ** 20\n    max_z = min(e, h, n)\n    for z in range(0, max_z + 1):\n        max_x = (e - z) // 2\n        max_y = (h - z) // 3\n        if max_x + max_y + z < n:\n            continue\n        if a > b:\n            y = min(max_y, n - z)\n            x = n - y - z\n        else:\n            x = min(max_x, n - z)\n            y = n - x - z\n        min_cost = min(min_cost, a * x + b * y + c * z)\n    if min_cost == 10 ** 20:\n        print(-1)\n    else:\n        print(min_cost)\n    t = t - 1", "t = int(input())\nwhile t:\n    (n, e, h, a, b, c) = map(int, input().split())\n    min_cost = 10 ** 20\n    max_z = min(e, h)\n    for z in range(0, n + 1):\n        if e < z or h < z:\n            break\n        max_x = (e - z) // 2\n        max_y = (h - z) // 3\n        if max_x + max_y + z < n:\n            continue\n        if a < b:\n            x = min(max_x, n - z)\n            y = n - x - z\n        else:\n            y = min(max_y, n - z)\n            x = n - y - z\n        min_cost = min(min_cost, a * x + b * y + c * z)\n    if min_cost == 10 ** 20:\n        print(-1)\n    else:\n        print(min_cost)\n    t = t - 1", "t = int(input())\nfor _ in range(t):\n    ans = 10 ** 20\n    (n, e, h, a, b, c) = map(int, input().split())\n    for cakes in range(n + 1):\n        if e < cakes or h < cakes:\n            break\n        omlet = (e - cakes) // 2\n        shake = (h - cakes) // 3\n        if cakes + omlet + shake < n:\n            continue\n        if a < b:\n            reqO = min(omlet, n - cakes)\n            reqM = n - cakes - reqO\n        else:\n            reqM = min(shake, n - cakes)\n            reqO = n - cakes - reqM\n        ans = min(ans, reqO * a + reqM * b + cakes * c)\n    if ans == 10 ** 20:\n        ans = -1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    ans = 10 ** 20\n    (n, e, h, a, b, c) = map(int, input().split())\n    for cakes in range(n + 1):\n        if e < cakes or h < cakes:\n            break\n        omlet = (e - cakes) // 2\n        shake = (h - cakes) // 3\n        if cakes + omlet + shake < n:\n            continue\n        if a < b:\n            reqO = min(omlet, n - cakes)\n            reqM = n - cakes - reqO\n        else:\n            reqM = min(shake, n - cakes)\n            reqO = n - cakes - reqM\n        ans = min(ans, reqO * a + reqM * b + cakes * c)\n    if ans == 10 ** 20:\n        ans = -1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    ans = 10 ** 20\n    (n, e, h, a, b, c) = map(int, input().split())\n    for cakes in range(n + 1):\n        if e < cakes or h < cakes:\n            break\n        omlet = (e - cakes) // 2\n        shake = (h - cakes) // 3\n        if cakes + omlet + shake < n:\n            continue\n        if a < b:\n            reqO = min(omlet, n - cakes)\n            reqM = n - cakes - reqO\n        else:\n            reqM = min(shake, n - cakes)\n            reqO = n - cakes - reqM\n        ans = min(ans, reqO * a + reqM * b + cakes * c)\n    if ans == 10 ** 20:\n        ans = -1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, eggs, choco_bar, cost_om, cost_ms, cost_cake) = list(map(int, input().split()))\n    ans = float('inf')\n    for cakes in range(n + 1):\n        if eggs < cakes or choco_bar < cakes:\n            break\n        om = (eggs - cakes) // 2\n        ms = (choco_bar - cakes) // 3\n        if om + cakes + ms < n:\n            continue\n        if cost_om < cost_ms:\n            req_om = min(n - cakes, om)\n            req_ms = n - cakes - req_om\n        else:\n            req_ms = min(n - cakes, ms)\n            req_om = n - cakes - req_ms\n        price = cakes * cost_cake + req_ms * cost_ms + req_om * cost_om\n        ans = min(price, ans)\n    if ans == float('inf'):\n        print('-1')\n    else:\n        print(ans)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef solve(n, eggs, chocolates, omPrice, shakePrice, cakePrice):\n    minPrice = 10 ** 12\n    for cake in range(n + 1):\n        if eggs < cake or chocolates < cake:\n            break\n        maxOmellete = (eggs - cake) // 2\n        maxChocolates = (chocolates - cake) // 3\n        if cake + maxOmellete + maxChocolates < n:\n            continue\n        if omPrice < shakePrice:\n            omelleteReq = min(n - cake, maxOmellete)\n            shakesReq = n - cake - omelleteReq\n        else:\n            shakesReq = min(n - cake, maxChocolates)\n            omelleteReq = n - cake - shakesReq\n        price = cake * cakePrice + omelleteReq * omPrice + shakesReq * shakePrice\n        minPrice = min(price, minPrice)\n    if minPrice == 10 ** 12:\n        return -1\n    return minPrice\nt = int(input())\nfor i in range(t):\n    (n, e, h, a, b, c) = get_ints()\n    print(solve(n, e, h, a, b, c))", "t = int(input())\nfor _ in range(t):\n    (N, E, H, A, B, C) = list(map(int, input().split(' ')))\n    result = float('inf')\n    for i in range(N + 1):\n        if i > E or i > H:\n            break\n        c = i\n        o = m = 0\n        e = E - i\n        h = H - i\n        Omax = e // 2\n        Mmax = h // 3\n        if A < B:\n            if Omax >= N - i:\n                o = N - i\n            else:\n                o = Omax\n                if Mmax >= N - i - o:\n                    m = N - i - o\n                else:\n                    continue\n        elif Mmax >= N - i:\n            m = N - i\n        else:\n            m = Mmax\n            if Omax >= N - i - m:\n                o = N - i - m\n            else:\n                continue\n        result = min(result, A * o + B * m + C * c)\n    if result == float('inf'):\n        print(-1)\n    else:\n        print(result)", "for _ in range(int(input())):\n    (N, E, H, A, B, C) = map(int, input().split())\n    ans = 10 ** 18\n    for cakes in range(0, N + 1):\n        if E < cakes or H < cakes:\n            break\n        maxO = (E - cakes) // 2\n        maxM = (H - cakes) // 3\n        if cakes + maxO + maxM < N:\n            continue\n        if A < B:\n            reqO = min(N - cakes, maxO)\n            reqM = N - cakes - reqO\n        else:\n            reqM = min(N - cakes, maxM)\n            reqO = N - cakes - reqM\n        price = cakes * C + reqO * A + reqM * B\n        ans = min(price, ans)\n    if ans == 10 ** 18:\n        ans = -1\n    print(ans)", "import sys\nt = int(input())\nfor _ in range(t):\n    (n, e, h, a, b, c) = map(int, input().split())\n    ans = sys.maxsize\n    price = 0\n    for cc in range(n + 1):\n        if e < cc or h < cc:\n            break\n        maxo = (e - cc) // 2\n        maxcm = (h - cc) // 3\n        if cc + maxo + maxcm < n:\n            continue\n        if a < b:\n            reqo = min(maxo, n - cc)\n            reqcm = n - (reqo + cc)\n        else:\n            reqcm = min(maxcm, n - cc)\n            reqo = n - (reqcm + cc)\n        price = a * reqo + b * reqcm + c * cc\n        ans = min(price, ans)\n    if ans == sys.maxsize:\n        print(-1)\n    else:\n        print(ans)", "for _ in range(int(input())):\n    (items, eggs, chocolates, omeletteCost, milkshakeCost, cakeCost) = map(int, input().split())\n    ans = float('inf')\n    for cakes in range(items + 1):\n        if eggs < cakes or chocolates < cakes:\n            break\n        maxO = (eggs - cakes) // 2\n        maxC = (chocolates - cakes) // 3\n        if cakes + maxO + maxC < items:\n            continue\n        if omeletteCost < milkshakeCost:\n            reqO = min(items - cakes, maxO)\n            reqC = items - cakes - reqO\n        else:\n            reqC = min(items - cakes, maxC)\n            reqO = items - cakes - reqC\n        price = omeletteCost * reqO + milkshakeCost * reqC + cakeCost * cakes\n        ans = min(price, ans)\n    if ans == float('inf'):\n        ans = -1\n        print(ans)\n    else:\n        print(ans)", "t = int(input())\nfor i in range(t):\n    (n, e, h, a, b, c) = map(int, input().split())\n    cakes = min(e, h)\n    eggs_available = max(e - cakes, 0)\n    bars_available = max(h - cakes, 0)\n    if cakes + int(eggs_available / 2) + int(bars_available / 3) < n:\n        print(-1)\n        continue\n    minimum = 1000000000000000\n    j = min(cakes, n)\n    while j >= 0:\n        eggs_available = e - j\n        bars_available = h - j\n        temp = j * c\n        (temp1, temp2) = (0, 0)\n        if a < b:\n            temp1 = min(int(eggs_available / 2), n - j)\n            temp += temp1 * a\n            temp2 = min(int(bars_available / 3), n - j - temp1)\n            temp += temp2 * b\n        else:\n            temp1 = min(int(bars_available / 3), n - j)\n            temp += temp1 * b\n            temp2 = min(int(eggs_available / 2), n - j - temp1)\n            temp += temp2 * a\n        if (temp1 < 0) & (temp2 < 0):\n            j -= 1\n            continue\n        if j + temp1 + temp2 < n:\n            j -= 1\n            continue\n        if temp < minimum:\n            minimum = temp\n        j -= 1\n    print(minimum)", "for _ in range(int(input())):\n    (n, e, h, a, b, c) = map(int, input().split())\n    p = 1e+18\n    find = False\n    for cake in range(0, n + 1, 1):\n        if e < cake or h < cake:\n            break\n        maxo = (e - cake) // 2\n        maxm = (h - cake) // 3\n        if cake + maxm + maxo < n:\n            continue\n        if a < b:\n            reo = min(n - cake, maxo)\n            rem = n - cake - reo\n        else:\n            rem = min(n - cake, maxm)\n            reo = n - cake - rem\n        p = min(p, a * reo + b * rem + c * cake)\n        find = True\n    if find:\n        print(p)\n    else:\n        print(-1)", "from math import floor\nINF = 1e+18\nt = int(input())\nfor _ in range(t):\n    (N, E, H, A, B, C) = list(map(int, input().split()))\n    minimum = INF\n    for z in range(0, min(N + 1, min(E + 1, H + 1))):\n        x = max(0, (E - z) // 2)\n        y = max(0, (H - z) // 3)\n        if x + y + z < N:\n            continue\n        if A < B:\n            cost = min(x, N - z) * A + z * C + min(y, N - z - min(x, N - z)) * B\n        else:\n            cost = min(x, N - z - min(y, N - z)) * A + z * C + min(y, N - z) * B\n        minimum = min(cost, minimum)\n    if minimum == INF:\n        print(-1)\n    else:\n        print(minimum)", "try:\n    testcase = int(input())\n    while testcase > 0:\n        (items, eggs, chocolates, omeletteCost, milkshakeCost, cakeCost) = list(map(int, input().split()))\n        testcase -= 1\n        ans = 1e+18\n        for cakes in range(0, items + 1):\n            if eggs < cakes or chocolates < cakes:\n                break\n            omelettes = (eggs - cakes) // 2\n            milkshakes = (chocolates - cakes) // 3\n            if cakes + omelettes + milkshakes < items:\n                continue\n            (omelettesreq, milkshakesReq) = (0, 0)\n            if omeletteCost < milkshakeCost:\n                omelettesReq = min(omelettes, items - cakes)\n                milkshakesReq = items - cakes - omelettesReq\n            else:\n                milkshakesReq = min(milkshakes, items - cakes)\n                omelettesReq = items - cakes - milkshakesReq\n            price = cakes * cakeCost + omelettesReq * omeletteCost + milkshakesReq * milkshakeCost\n            ans = min(ans, price)\n        if ans == 1e+18:\n            ans = -1\n        print(ans)\nexcept:\n    pass", "for tc in range(int(input())):\n    (N, EGG, CHOC, a, b, c) = map(int, input().split())\n    sufficient = False\n    ans = 1000000000000000000\n    for cake in range(0, min(N, min(EGG, CHOC)) + 1):\n        (shake, omelete) = (0, 0)\n        n = N - cake\n        egg = EGG - cake\n        choc = CHOC - cake\n        if a <= b:\n            if egg > 0:\n                served = min(n, egg // 2)\n                n -= served\n                omelete = served\n            if n > 0:\n                served = min(n, choc // 3)\n                n -= served\n                shake = served\n        else:\n            if choc > 0:\n                served = min(n, choc // 3)\n                n -= served\n                shake = served\n            if n > 0:\n                served = min(n, egg // 2)\n                n -= served\n                omelete = served\n        if n == 0:\n            sufficient = True\n            ans = min(ans, omelete * a + shake * b + cake * c)\n    if sufficient:\n        print(ans)\n    else:\n        print(-1)", "def run_one_test_case():\n    (N, E, H, A, B, C) = list(map(int, input().split()))\n    min_cost = None\n    for xc in range(min(E, H, N) + 1):\n        max_omelette = (E - xc) // 2\n        max_milkshake = (H - xc) // 3\n        if xc + max_omelette + max_milkshake < N:\n            continue\n        if A < B:\n            xa = min(N - xc, max_omelette)\n            xb = N - xc - xa\n        else:\n            xb = min(N - xc, max_milkshake)\n            xa = N - xc - xb\n        cost = xa * A + xb * B + xc * C\n        if min_cost is None or cost < min_cost:\n            min_cost = cost\n    print(min_cost) if min_cost else print(-1)\n\ndef run_one_test_case_old():\n    (N, E, H, A, B, C) = list(map(int, input().split()))\n    min_cost = None\n    for xa in range(min(E // 2 + 1, N + 1)):\n        for xb in range(min(H // 3 + 1, N - xa + 1)):\n            xc = N - xa - xb\n            if 2 * xa + xc <= E and 3 * xb + xc <= H:\n                cost = xa * A + xb * B + xc * C\n                if min_cost is None or cost < min_cost:\n                    min_cost = cost\n    print(min_cost) if min_cost else print(-1)\n\ndef main():\n    for _ in range(int(input())):\n        run_one_test_case()\nmain()", "try:\n    for i in range(int(input())):\n        (n, e, h, a, b, c) = map(int, input().split())\n        ans = int(1e+18)\n        for j in range(n + 1):\n            if e < j or h < j:\n                break\n            cost = j * c\n            egg = e - j\n            l = n - j\n            bar = h - j\n            if a < b:\n                om = min(l, egg // 2)\n                cost += om * a\n                l -= om\n                if bar // 3 < l:\n                    continue\n                cost += l * b\n                ans = min(cost, ans)\n            else:\n                milk = min(l, bar // 3)\n                cost += milk * b\n                l -= milk\n                if egg // 2 < l:\n                    continue\n                cost += l * a\n                ans = min(ans, cost)\n        if ans == int(1e+18):\n            print('-1')\n        else:\n            print(ans)\nexcept:\n    pass", "import math\nt = int(input())\nfor _ in range(t):\n    (n, e, h, a, b, c) = [int(x) for x in input().split()]\n    ans = math.inf\n    for i in range(min(e, h, n), -1, -1):\n        cc = i\n        if cc < n:\n            ans1 = cc * c\n            if (e - cc) // 2 + (h - cc) // 3 >= n - cc:\n                t1 = min((e - cc) // 2, n - cc)\n                t2 = min((h - cc) // 3, n - cc)\n                if a <= b:\n                    ans1 += t1 * a\n                    ans1 += (n - cc - t1) * b\n                else:\n                    ans1 += t2 * b\n                    ans1 += (n - cc - t2) * a\n            else:\n                ans1 = math.inf\n            ans = min(ans, ans1)\n        else:\n            ans = min(ans, n * c)\n    if ans == math.inf:\n        print(-1)\n    else:\n        print(ans)"]