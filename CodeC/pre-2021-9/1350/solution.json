["try:\n    X = list(map(int, input().split()))\nexcept:\n    X = [0, 0]\nch = []\nchnew = []\npar = {}\npar[1] = 0\nfor i in range(X[0] + 1):\n    ch.append([])\n    chnew.append([])\nfor i in range(X[0] - 1):\n    Y = list(map(int, input().split()))\n    ch[Y[0]].append([Y[1], Y[2]])\n    ch[Y[1]].append([Y[0], Y[2]])\ntre = [1]\nwhile len(tre):\n    cr = tre[-1]\n    tre = tre[:-1]\n    for i in ch[cr]:\n        chnew[cr].append(i)\n        par[i[0]] = [cr, i[1]]\n        tre.append(i[0])\n        for j in ch[i[0]]:\n            if j[0] == cr:\n                ch[i[0]].remove(j)\n                break\nch = chnew\n\ndef goup(par, nd):\n    if nd == 1:\n        return 0\n    else:\n        p = par[nd]\n        ans = p[1] + goup(par, p[0])\n        return max([ans, 0])\n\ndef godown(ch, nd):\n    ans = 0\n    for i in ch[nd]:\n        ans = max([i[1] + godown(ch, i[0]), ans])\n    return ans\nfor i in range(X[1]):\n    Z = list(map(int, input().split()))\n    r = Z[0]\n    s = Z[1]\n    nans = 0\n    while r != s:\n        if r > s:\n            nans = nans + par[r][1]\n            r = par[r][0]\n        else:\n            nans = nans + par[s][1]\n            s = par[s][0]\n    if r == Z[0] or r == Z[1]:\n        if Z[0] < Z[1]:\n            nans = nans + 2 * max(goup(par, Z[0]), godown(ch, Z[1]))\n        else:\n            nans = nans + 2 * max(goup(par, Z[1]), godown(ch, Z[0]))\n    else:\n        nans = nans + 2 * goup(par, r)\n    print(nans)", "try:\n    X = list(map(int, input().split()))\nexcept:\n    X = [0, 0]\nch = []\nchnew = []\npar = {}\npar[1] = 0\nfor i in range(X[0] + 1):\n    ch.append([])\n    chnew.append([])\nfor i in range(X[0] - 1):\n    Y = list(map(int, input().split()))\n    ch[Y[0]].append([Y[1], Y[2]])\n    ch[Y[1]].append([Y[0], Y[2]])\ntre = [1]\nwhile len(tre):\n    cr = tre[-1]\n    tre = tre[:-1]\n    for i in ch[cr]:\n        chnew[cr].append(i)\n        par[i[0]] = [cr, i[1]]\n        tre.append(i[0])\n        for j in ch[i[0]]:\n            if j[0] == cr:\n                ch[i[0]].remove(j)\n                break\nch = chnew\n\ndef goup(par, nd):\n    if nd == 1:\n        return 0\n    else:\n        p = par[nd]\n        ans = p[1] + goup(par, p[0])\n        return max([ans, 0])\n\ndef godown(ch, nd):\n    ans = 0\n    for i in ch[nd]:\n        ans = max([i[1] + godown(ch, i[0]), ans])\n    return ans\nfor i in range(X[1]):\n    Z = list(map(int, input().split()))\n    r = Z[0]\n    s = Z[1]\n    nans = 0\n    while r != s:\n        if r > s:\n            nans = nans + par[r][1]\n            r = par[r][0]\n        else:\n            nans = nans + par[s][1]\n            s = par[s][0]\n    if r == Z[0] or r == Z[1]:\n        if Z[0] < Z[1]:\n            nans = nans + 2 * max(goup(par, Z[0]), godown(ch, Z[1]))\n        else:\n            nans = nans + 2 * max(goup(par, Z[1]), godown(ch, Z[0]))\n    else:\n        nans = nans + 2 * goup(par, r)\n    print(nans)", "def up(dp, nod):\n    if nod == 1:\n        return 0\n    else:\n        p = dp[nod]\n        ans = p[1] + up(dp, p[0])\n        return max([ans, 0])\n\ndef down(city, nod):\n    ans = 0\n    for i in city[nod]:\n        ans = max([i[1] + down(city, i[0]), ans])\n    return ans\ntry:\n    (n, q) = map(int, input().split())\nexcept:\n    (n, q) = (0, 0)\n(city, ncity) = ([], [])\ndp = {}\nfor _ in range(n + 1):\n    city.append([])\n    ncity.append([])\nfor i in range(n - 1):\n    (x, y, w) = map(int, input().split())\n    city[x].append([y, w])\n    city[y].append([x, w])\nt = [1]\nwhile len(t):\n    c = t[-1]\n    t = t[:-1]\n    for i in city[c]:\n        ncity[c].append(i)\n        dp[i[0]] = [c, i[1]]\n        t.append(i[0])\n        for j in city[i[0]]:\n            if j[0] == c:\n                city[i[0]].remove(j)\n                break\ncity = ncity\nfor i in range(q):\n    x = list(map(int, input().split()))\n    r = x[0]\n    s = x[1]\n    an = 0\n    while r != s:\n        if r > s:\n            an = an + dp[r][1]\n            r = dp[r][0]\n        else:\n            an = an + dp[s][1]\n            s = dp[s][0]\n    if r == x[0] or r == x[1]:\n        if x[0] < x[1]:\n            an = an + 2 * max(up(dp, x[0]), down(city, x[1]))\n        else:\n            an = an + 2 * max(up(dp, x[1]), down(city, x[0]))\n    else:\n        an = an + 2 * up(dp, r)\n    print(an)", "try:\n    X = list(map(int, input().split()))\nexcept:\n    X = [0, 0]\nch = []\nchnew = []\npar = {}\npar[1] = 0\nfor i in range(X[0] + 1):\n    ch.append([])\n    chnew.append([])\nfor i in range(X[0] - 1):\n    Y = list(map(int, input().split()))\n    ch[Y[0]].append([Y[1], Y[2]])\n    ch[Y[1]].append([Y[0], Y[2]])\ntre = [1]\nwhile len(tre):\n    cr = tre[-1]\n    tre = tre[:-1]\n    for i in ch[cr]:\n        chnew[cr].append(i)\n        par[i[0]] = [cr, i[1]]\n        tre.append(i[0])\n        for j in ch[i[0]]:\n            if j[0] == cr:\n                ch[i[0]].remove(j)\n                break\nch = chnew\n\ndef goup(par, nd):\n    if nd == 1:\n        return 0\n    else:\n        p = par[nd]\n        ans = p[1] + goup(par, p[0])\n        return max([ans, 0])\n\ndef godown(ch, nd):\n    ans = 0\n    for i in ch[nd]:\n        ans = max([i[1] + godown(ch, i[0]), ans])\n    return ans\nfor i in range(X[1]):\n    Z = list(map(int, input().split()))\n    r = Z[0]\n    s = Z[1]\n    nans = 0\n    while r != s:\n        if r > s:\n            nans = nans + par[r][1]\n            r = par[r][0]\n        else:\n            nans = nans + par[s][1]\n            s = par[s][0]\n    if r == Z[0] or r == Z[1]:\n        if Z[0] < Z[1]:\n            nans = nans + 2 * max(goup(par, Z[0]), godown(ch, Z[1]))\n        else:\n            nans = nans + 2 * max(goup(par, Z[1]), godown(ch, Z[0]))\n    else:\n        nans = nans + 2 * goup(par, r)\n    print(nans)", "try:\n    X = list(map(int, input().split()))\nexcept:\n    X = [0, 0]\nch = []\nchnew = []\npar = {}\npar[1] = 0\nfor i in range(X[0] + 1):\n    ch.append([])\n    chnew.append([])\nfor i in range(X[0] - 1):\n    Y = list(map(int, input().split()))\n    ch[Y[0]].append([Y[1], Y[2]])\n    ch[Y[1]].append([Y[0], Y[2]])\ntre = [1]\nwhile len(tre):\n    cr = tre[-1]\n    tre = tre[:-1]\n    for i in ch[cr]:\n        chnew[cr].append(i)\n        par[i[0]] = [cr, i[1]]\n        tre.append(i[0])\n        for j in ch[i[0]]:\n            if j[0] == cr:\n                ch[i[0]].remove(j)\n                break\nch = chnew\n\ndef goup(par, nd):\n    if nd == 1:\n        return 0\n    else:\n        p = par[nd]\n        ans = p[1] + goup(par, p[0])\n        return max([ans, 0])\n\ndef godown(ch, nd):\n    ans = 0\n    for i in ch[nd]:\n        ans = max([i[1] + godown(ch, i[0]), ans])\n    return ans\nfor i in range(X[1]):\n    Z = list(map(int, input().split()))\n    r = Z[0]\n    s = Z[1]\n    nans = 0\n    while r != s:\n        if r > s:\n            nans = nans + par[r][1]\n            r = par[r][0]\n        else:\n            nans = nans + par[s][1]\n            s = par[s][0]\n    if r == Z[0] or r == Z[1]:\n        if Z[0] < Z[1]:\n            nans = nans + 2 * max(goup(par, Z[0]), godown(ch, Z[1]))\n        else:\n            nans = nans + 2 * max(goup(par, Z[1]), godown(ch, Z[0]))\n    else:\n        nans = nans + 2 * goup(par, r)\n    print(nans)", "try:\n    X = list(map(int, input().split()))\nexcept:\n    X = [0, 0]\nch = []\nchnew = []\npar = {}\npar[1] = 0\nfor i in range(X[0] + 1):\n    ch.append([])\n    chnew.append([])\nfor i in range(X[0] - 1):\n    Y = list(map(int, input().split()))\n    ch[Y[0]].append([Y[1], Y[2]])\n    ch[Y[1]].append([Y[0], Y[2]])\ntre = [1]\nwhile len(tre):\n    cr = tre[-1]\n    tre = tre[:-1]\n    for i in ch[cr]:\n        chnew[cr].append(i)\n        par[i[0]] = [cr, i[1]]\n        tre.append(i[0])\n        for j in ch[i[0]]:\n            if j[0] == cr:\n                ch[i[0]].remove(j)\n                break\nch = chnew\n\ndef goup(par, nd):\n    if nd == 1:\n        return 0\n    else:\n        p = par[nd]\n        ans = p[1] + goup(par, p[0])\n        return max([ans, 0])\n\ndef godown(ch, nd):\n    ans = 0\n    for i in ch[nd]:\n        ans = max([i[1] + godown(ch, i[0]), ans])\n    return ans\nfor i in range(X[1]):\n    Z = list(map(int, input().split()))\n    r = Z[0]\n    s = Z[1]\n    nans = 0\n    while r != s:\n        if r > s:\n            nans = nans + par[r][1]\n            r = par[r][0]\n        else:\n            nans = nans + par[s][1]\n            s = par[s][0]\n    if r == Z[0] or r == Z[1]:\n        if Z[0] < Z[1]:\n            nans = nans + 2 * max(goup(par, Z[0]), godown(ch, Z[1]))\n        else:\n            nans = nans + 2 * max(goup(par, Z[1]), godown(ch, Z[0]))\n    else:\n        nans = nans + 2 * goup(par, r)\n    print(nans)", "try:\n    X = list(map(int, input().split()))\nexcept:\n    X = [0, 0]\nch = []\nchnew = []\npar = {}\npar[1] = 0\nfor i in range(X[0] + 1):\n    ch.append([])\n    chnew.append([])\nfor i in range(X[0] - 1):\n    Y = list(map(int, input().split()))\n    ch[Y[0]].append([Y[1], Y[2]])\n    ch[Y[1]].append([Y[0], Y[2]])\ntre = [1]\nwhile len(tre):\n    cr = tre[-1]\n    tre = tre[:-1]\n    for i in ch[cr]:\n        chnew[cr].append(i)\n        par[i[0]] = [cr, i[1]]\n        tre.append(i[0])\n        for j in ch[i[0]]:\n            if j[0] == cr:\n                ch[i[0]].remove(j)\n                break\nch = chnew\n\ndef goup(par, nd):\n    if nd == 1:\n        return 0\n    else:\n        p = par[nd]\n        ans = p[1] + goup(par, p[0])\n        return max([ans, 0])\n\ndef godown(ch, nd):\n    ans = 0\n    for i in ch[nd]:\n        ans = max([i[1] + godown(ch, i[0]), ans])\n    return ans\nfor i in range(X[1]):\n    Z = list(map(int, input().split()))\n    r = Z[0]\n    s = Z[1]\n    nans = 0\n    while r != s:\n        if r > s:\n            nans = nans + par[r][1]\n            r = par[r][0]\n        else:\n            nans = nans + par[s][1]\n            s = par[s][0]\n    if r == Z[0] or r == Z[1]:\n        if Z[0] < Z[1]:\n            nans = nans + 2 * max(goup(par, Z[0]), godown(ch, Z[1]))\n        else:\n            nans = nans + 2 * max(goup(par, Z[1]), godown(ch, Z[0]))\n    else:\n        nans = nans + 2 * goup(par, r)\n    print(nans)", "try:\n    X = list(map(int, input().split()))\nexcept:\n    X = [0, 0]\nch = []\nchnew = []\npar = {}\npar[1] = 0\nfor i in range(X[0] + 1):\n    ch.append([])\n    chnew.append([])\nfor i in range(X[0] - 1):\n    Y = list(map(int, input().split()))\n    ch[Y[0]].append([Y[1], Y[2]])\n    ch[Y[1]].append([Y[0], Y[2]])\ntre = [1]\nwhile len(tre):\n    cr = tre[-1]\n    tre = tre[:-1]\n    for i in ch[cr]:\n        chnew[cr].append(i)\n        par[i[0]] = [cr, i[1]]\n        tre.append(i[0])\n        for j in ch[i[0]]:\n            if j[0] == cr:\n                ch[i[0]].remove(j)\n                break\nch = chnew\n\ndef goup(par, nd):\n    if nd == 1:\n        return 0\n    else:\n        p = par[nd]\n        ans = p[1] + goup(par, p[0])\n        return max([ans, 0])\n\ndef godown(ch, nd):\n    ans = 0\n    for i in ch[nd]:\n        ans = max([i[1] + godown(ch, i[0]), ans])\n    return ans\nfor i in range(X[1]):\n    Z = list(map(int, input().split()))\n    r = Z[0]\n    s = Z[1]\n    nans = 0\n    while r != s:\n        if r > s:\n            nans = nans + par[r][1]\n            r = par[r][0]\n        else:\n            nans = nans + par[s][1]\n            s = par[s][0]\n    if r == Z[0] or r == Z[1]:\n        if Z[0] < Z[1]:\n            nans = nans + 2 * max(goup(par, Z[0]), godown(ch, Z[1]))\n        else:\n            nans = nans + 2 * max(goup(par, Z[1]), godown(ch, Z[0]))\n    else:\n        nans = nans + 2 * goup(par, r)\n    print(nans)", "try:\n    X = list(map(int, input().split()))\nexcept:\n    X = [0, 0]\nch = []\nchnew = []\npar = {}\npar[1] = 0\nfor i in range(X[0] + 1):\n    ch.append([])\n    chnew.append([])\nfor i in range(X[0] - 1):\n    Y = list(map(int, input().split()))\n    ch[Y[0]].append([Y[1], Y[2]])\n    ch[Y[1]].append([Y[0], Y[2]])\ntre = [1]\nwhile len(tre):\n    cr = tre[-1]\n    tre = tre[:-1]\n    for i in ch[cr]:\n        chnew[cr].append(i)\n        par[i[0]] = [cr, i[1]]\n        tre.append(i[0])\n        for j in ch[i[0]]:\n            if j[0] == cr:\n                ch[i[0]].remove(j)\n                break\nch = chnew\n\ndef goup(par, nd):\n    if nd == 1:\n        return 0\n    else:\n        p = par[nd]\n        ans = p[1] + goup(par, p[0])\n        return max([ans, 0])\n\ndef godown(ch, nd):\n    ans = 0\n    for i in ch[nd]:\n        ans = max([i[1] + godown(ch, i[0]), ans])\n    return ans\nfor i in range(X[1]):\n    Z = list(map(int, input().split()))\n    r = Z[0]\n    s = Z[1]\n    nans = 0\n    while r != s:\n        if r > s:\n            nans = nans + par[r][1]\n            r = par[r][0]\n        else:\n            nans = nans + par[s][1]\n            s = par[s][0]\n    if r == Z[0] or r == Z[1]:\n        if Z[0] < Z[1]:\n            nans = nans + 2 * max(goup(par, Z[0]), godown(ch, Z[1]))\n        else:\n            nans = nans + 2 * max(goup(par, Z[1]), godown(ch, Z[0]))\n    else:\n        nans = nans + 2 * goup(par, r)\n    print(nans)", "try:\n    X = list(map(int, input().split()))\nexcept:\n    X = [0, 0]\nch = []\nchnew = []\npar = {}\npar[1] = 0\nfor i in range(X[0] + 1):\n    ch.append([])\n    chnew.append([])\nfor i in range(X[0] - 1):\n    Y = list(map(int, input().split()))\n    ch[Y[0]].append([Y[1], Y[2]])\n    ch[Y[1]].append([Y[0], Y[2]])\ntre = [1]\nwhile len(tre):\n    cr = tre[-1]\n    tre = tre[:-1]\n    for i in ch[cr]:\n        chnew[cr].append(i)\n        par[i[0]] = [cr, i[1]]\n        tre.append(i[0])\n        for j in ch[i[0]]:\n            if j[0] == cr:\n                ch[i[0]].remove(j)\n                break\nch = chnew\n\ndef goup(par, nd):\n    if nd == 1:\n        return 0\n    else:\n        p = par[nd]\n        ans = p[1] + goup(par, p[0])\n        return max([ans, 0])\n\ndef godown(ch, nd):\n    ans = 0\n    for i in ch[nd]:\n        ans = max([i[1] + godown(ch, i[0]), ans])\n    return ans\nfor i in range(X[1]):\n    Z = list(map(int, input().split()))\n    r = Z[0]\n    s = Z[1]\n    nans = 0\n    while r != s:\n        if r > s:\n            nans = nans + par[r][1]\n            r = par[r][0]\n        else:\n            nans = nans + par[s][1]\n            s = par[s][0]\n    if r == Z[0] or r == Z[1]:\n        if Z[0] < Z[1]:\n            nans = nans + 2 * max(goup(par, Z[0]), godown(ch, Z[1]))\n        else:\n            nans = nans + 2 * max(goup(par, Z[1]), godown(ch, Z[0]))\n    else:\n        nans = nans + 2 * goup(par, r)\n    print(nans)", "try:\n    X = list(map(int, input().split()))\nexcept:\n    X = [0, 0]\nch = []\nchnew = []\npar = {}\npar[1] = 0\nfor i in range(X[0] + 1):\n    ch.append([])\n    chnew.append([])\nfor i in range(X[0] - 1):\n    Y = list(map(int, input().split()))\n    ch[Y[0]].append([Y[1], Y[2]])\n    ch[Y[1]].append([Y[0], Y[2]])\ntre = [1]\nwhile len(tre):\n    cr = tre[-1]\n    tre = tre[:-1]\n    for i in ch[cr]:\n        chnew[cr].append(i)\n        par[i[0]] = [cr, i[1]]\n        tre.append(i[0])\n        for j in ch[i[0]]:\n            if j[0] == cr:\n                ch[i[0]].remove(j)\n                break\nch = chnew\n\ndef goup(par, nd):\n    if nd == 1:\n        return 0\n    else:\n        p = par[nd]\n        ans = p[1] + goup(par, p[0])\n        return max([ans, 0])\n\ndef godown(ch, nd):\n    ans = 0\n    for i in ch[nd]:\n        ans = max([i[1] + godown(ch, i[0]), ans])\n    return ans\nfor i in range(X[1]):\n    Z = list(map(int, input().split()))\n    r = Z[0]\n    s = Z[1]\n    nans = 0\n    while r != s:\n        if r > s:\n            nans = nans + par[r][1]\n            r = par[r][0]\n        else:\n            nans = nans + par[s][1]\n            s = par[s][0]\n    if r == Z[0] or r == Z[1]:\n        if Z[0] < Z[1]:\n            nans = nans + 2 * max(goup(par, Z[0]), godown(ch, Z[1]))\n        else:\n            nans = nans + 2 * max(goup(par, Z[1]), godown(ch, Z[0]))\n    else:\n        nans = nans + 2 * goup(par, r)\n    print(nans)"]