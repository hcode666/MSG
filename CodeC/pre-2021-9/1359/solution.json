["from sys import stdin, setrecursionlimit\ninput = stdin.readline\nsetrecursionlimit(3 * 10 ** 5)\n\nclass fenwicktree:\n\n    def __init__(self, n):\n        self.BITTree = [0] * (n + 1)\n        self.size = n\n\n    def getsum(self, i):\n        s = 0\n        i = i + 1\n        while i > 0:\n            s += self.BITTree[i]\n            i -= i & -i\n        return s\n\n    def query(self, l, r):\n        return self.getsum(r) - self.getsum(l - 1)\n\n    def update(self, i, v):\n        i += 1\n        while i <= self.size:\n            self.BITTree[i] += v\n            i += i & -i\n\ndef dfs(p, prev, lvl):\n    level[lvl].append(p)\n    for i in child[p]:\n        if i == prev:\n            continue\n        dfs(i, p, lvl + 1)\n\ndef answer():\n    f = fenwicktree(n + 1)\n    ans = 0\n    for i in range(n):\n        for j in level[i]:\n            ans += f.query(1, j) - f.query(j, n)\n        for j in level[i]:\n            f.update(j, 1)\n    return ans\nfor T in range(1):\n    n = int(input())\n    child = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        child[u].append(v)\n        child[v].append(u)\n    level = [[] for i in range(n)]\n    dfs(1, -1, 0)\n    print(answer())", "from sys import stdin, setrecursionlimit\ninput = stdin.readline\nsetrecursionlimit(3 * 10 ** 5)\n\nclass fenwicktree:\n\n    def __init__(self, n):\n        self.BITTree = [0] * (n + 1)\n        self.size = n\n\n    def getsum(self, i):\n        s = 0\n        i = i + 1\n        while i > 0:\n            s += self.BITTree[i]\n            i -= i & -i\n        return s\n\n    def query(self, l, r):\n        return self.getsum(r) - self.getsum(l - 1)\n\n    def update(self, i, v):\n        i += 1\n        while i <= self.size:\n            self.BITTree[i] += v\n            i += i & -i\n\ndef dfs(p, prev, lvl):\n    level[lvl].append(p)\n    for i in child[p]:\n        if i == prev:\n            continue\n        dfs(i, p, lvl + 1)\n\ndef answer():\n    f = fenwicktree(n + 1)\n    ans = 0\n    for i in range(n):\n        for j in level[i]:\n            ans += f.query(1, j) - f.query(j, n)\n        for j in level[i]:\n            f.update(j, 1)\n    return ans\nfor T in range(1):\n    n = int(input())\n    child = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        child[u].append(v)\n        child[v].append(u)\n    level = [[] for i in range(n)]\n    dfs(1, -1, 0)\n    print(answer())", "from sys import stdin, setrecursionlimit\ninput = stdin.readline\nsetrecursionlimit(3 * 10 ** 5)\n\nclass fenwicktree:\n\n    def __init__(self, n):\n        self.BITTree = [0] * (n + 1)\n        self.size = n\n\n    def getsum(self, i):\n        s = 0\n        i = i + 1\n        while i > 0:\n            s += self.BITTree[i]\n            i -= i & -i\n        return s\n\n    def query(self, l, r):\n        return self.getsum(r) - self.getsum(l - 1)\n\n    def update(self, i, v):\n        i += 1\n        while i <= self.size:\n            self.BITTree[i] += v\n            i += i & -i\n\ndef dfs(p, prev, lvl):\n    level[lvl].append(p)\n    for i in child[p]:\n        if i == prev:\n            continue\n        dfs(i, p, lvl + 1)\n\ndef answer():\n    f = fenwicktree(n + 1)\n    ans = 0\n    for i in range(n):\n        for j in level[i]:\n            ans += f.query(1, j) - f.query(j, n)\n        for j in level[i]:\n            f.update(j, 1)\n    return ans\nfor T in range(1):\n    n = int(input())\n    child = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        child[u].append(v)\n        child[v].append(u)\n    level = [[] for i in range(n)]\n    dfs(1, -1, 0)\n    print(answer())"]