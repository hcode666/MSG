["for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    (p, q, r) = map(int, input().split())\n    zeros = [a, b, c].count(0)\n    (d, e, f) = (p - a, q - b, r - c)\n    operations = 0\n    if d == e == f:\n        if d:\n            operations = 1\n        else:\n            operations = 0\n    elif zeros >= 2:\n        if d == e and f == 0 or (d == e == 0 and f) or (e == f and d == 0) or (e == f == 0 and d) or (f == d and e == 0) or (f == d == 0 and e):\n            operations = 1\n        elif d == e or e == f or f == d or (d == e + f) or (e == d + f) or (f == d + e):\n            operations = 2\n    elif zeros == 1:\n        if a == 0:\n            if d == e and f == 0 or (d == e == 0 and f) or (e == f and d == 0) or (e == f == 0 and d) or (f == d and e == 0) or (f == d == 0 and e) or (d == 0 and q // b == r // c and (q % b == 0) and (r % c == 0)):\n                operations = 1\n            elif d == e or e == f or f == d or (d and q // b == r // c and (q % b == 0) and (r % c == 0)) or (d == e + f) or (e == d + f) or (f == d + e):\n                operations = 2\n        elif b == 0:\n            if d == e and f == 0 or (d == e == 0 and f) or (e == f and d == 0) or (e == f == 0 and d) or (f == d and e == 0) or (f == d == 0 and e) or (e == 0 and p // a == r // c and (p % a == 0) and (r % c == 0)):\n                operations = 1\n            elif d == e or e == f or f == d or (e and p // a == r // c and (p % a == 0) and (r % c == 0)) or (d == e + f) or (e == d + f) or (f == d + e):\n                operations = 2\n        elif d == e and f == 0 or (d == e == 0 and f) or (e == f and d == 0) or (e == f == 0 and d) or (f == d and e == 0) or (f == d == 0 and e) or (f == 0 and p // a == q // b and (p % a == 0) and (q % b == 0)):\n            operations = 1\n        elif d == e or e == f or f == d or (f and p // a == q // b and (p % a == 0) and (q % b == 0)) or (d == e + f) or (e == d + f) or (f == d + e):\n            operations = 2\n    else:\n        (x, y, z) = (p // a, q // b, r // c)\n        if d == e and f == 0 or (d == e == 0 and f) or (e == f and d == 0) or (e == f == 0 and d) or (f == d and e == 0) or (f == d == 0 and e) or (x == y == z and p % a == 0 and (q % b == 0) and (r % c == 0)) or (d == 0 and y == z and (q % b == 0) and (r % c == 0)) or (e == 0 and x == z and (p % a == 0) and (r % c == 0)) or (f == 0 and x == y and (p % a == 0) and (q % b == 0)):\n            operations = 1\n        elif d == e or e == f or f == d or (f and x == y and (p % a == 0) and (q % b == 0)) or (d and y == z and (q % b == 0) and (r % c == 0)) or (e and x == z and (p % a == 0) and (r % c == 0)) or (d == 0 and e != f and e and f) or (e == 0 and d != f and d and f) or (f == 0 and d != e and d and e) or (d == e + f) or (e == d + f) or (f == d + e) or (p % a == 0 and q % b == 0 and (r % c == 0) and (x * y == z or y * z == x or z * x == y)):\n            operations = 2\n    if operations == 0:\n        if d:\n            operations += 1\n        if e:\n            operations += 1\n        if f:\n            operations += 1\n    if operations == 3:\n        try:\n            (u, v, w) = ((q * a - p * b) // (p - q), (r * b - q * c) // (q - r), (p * c - r * a) // (r - p))\n            if u == v == w and (q * a - p * b) % (p - q) == 0 and ((r * b - q * c) % (q - r) == 0) and ((p * c - r * a) % (r - p) == 0) and (p // (a + u) == q // (b + u) == r // (c + u)) and (p % (a + u) == 0) and (q % (b + u) == 0) and (r % (c + u) == 0):\n                operations = 2\n        except:\n            pass\n        if operations == 3:\n            try:\n                x = p // a\n                if p % a == 0 and (q % x == 0 and c + q // x - b == r or (r % x == 0 and b + r // x - c == q)):\n                    operations = 2\n            except:\n                pass\n            if operations == 3:\n                try:\n                    x = q // b\n                    if q % b == 0 and (p % x == 0 and c + p // x - a == r or (r % x == 0 and a + r // x - c == p)):\n                        operations = 2\n                except:\n                    pass\n                if operations == 3:\n                    try:\n                        x = r // c\n                        if r % c == 0 and (p % x == 0 and b + p // x - a == q or (q % x == 0 and a + q // x - b == p)):\n                            operations = 2\n                    except:\n                        pass\n                    if operations == 3:\n                        try:\n                            if (q * a - p * b) % (p - q) == 0:\n                                (u, x) = ((q * a - p * b) // (p - q), p // (a + u))\n                                if x == q // (b + u) and p % (a + u) == 0 and (q % (b + u) == 0) and (c * x == r or c + u == r):\n                                    operations = 2\n                        except:\n                            pass\n                        if operations == 3:\n                            try:\n                                if (r * b - q * c) % (q - r) == 0:\n                                    (v, x) = ((r * b - q * c) // (q - r), q // (b + v))\n                                    if x == r // (c + v) and q % (b + v) == 0 and (r % (c + v) == 0) and (a * x == p or a + v == p):\n                                        operations = 2\n                            except:\n                                pass\n                            if operations == 3:\n                                try:\n                                    if (p * c - r * a) % (r - p) == 0:\n                                        (w, x) = ((p * c - r * a) // (r - p), r // (c + w))\n                                        if x == p // (a + w) and r % (c + w) == 0 and (p % (a + w) == 0) and (b * x == q or b + w == q):\n                                            operations = 2\n                                except:\n                                    pass\n                                if operations == 3:\n                                    try:\n                                        (x, y, z) = ((p - q) // (a - b), (q - r) // (b - c), (r - p) // (c - a))\n                                        if x == y == z and (p - q) % (a - b) == 0 and ((q - r) % (b - c) == 0) and ((r - p) % (c - a) == 0) and (p - a * x == q - b * y == r - c * z):\n                                            operations = 2\n                                    except:\n                                        pass\n                                    if operations == 3:\n                                        try:\n                                            x = p // a\n                                            if p % a == 0 and (b * x + r - c == q or c * x + q - b == r):\n                                                operations = 2\n                                        except:\n                                            pass\n                                        if operations == 3:\n                                            try:\n                                                x = q // b\n                                                if q % b == 0 and (a * x + r - c == p or c * x + p - a == r):\n                                                    operations = 2\n                                            except:\n                                                pass\n                                            if operations == 3:\n                                                try:\n                                                    x = r // c\n                                                    if r % c == 0 and (a * x + q - b == p or b * x + p - a == q):\n                                                        operations = 2\n                                                except:\n                                                    pass\n                                                if operations == 3:\n                                                    try:\n                                                        x = (p - q) // (a - b)\n                                                        if (p - q) % (a - b) == 0 and p - a * x == q - b * x and (c + p - a * x == r or c * x == r):\n                                                            operations = 2\n                                                    except:\n                                                        pass\n                                                    if operations == 3:\n                                                        try:\n                                                            y = (q - r) // (b - c)\n                                                            if (q - r) % (b - c) == 0 and q - b * y == r - c * y and (a + q - b * y == p or a * y == p):\n                                                                operations = 2\n                                                        except:\n                                                            pass\n                                                        if operations == 3:\n                                                            try:\n                                                                z = (r - p) // (c - a)\n                                                                if (r - p) % (c - a) == 0 and r - c * z == p - a * z and (b + r - c * z == q or b * z == q):\n                                                                    operations = 2\n                                                            except:\n                                                                pass\n    print(operations)", "import sys\n\ndef fop(s, end='\\n'):\n    sys.stdout.write(str(s) + end)\n\ndef fip():\n    return sys.stdin.readline().strip()\nfintinp = lambda : int(fip())\n\ndef flistinp(func=int):\n    return list(map(func, fip().split()))\n\ndef fnsepline(n, func=str):\n    return [func(fip()) for _ in range(n)]\nfrom functools import lru_cache\n\n@lru_cache(maxsize=1 << 10)\ndef byeqs(pqr, abc):\n    (p, q, r) = pqr\n    (a, b, c) = abc\n    muls = []\n    try:\n        if p != q:\n            m_ = (a - b) // (p - q)\n            muls.append(m_)\n    except:\n        pass\n    try:\n        if p != r:\n            m_ = (a - c) // (p - r)\n            muls.append(m_)\n    except:\n        pass\n    try:\n        if q != r:\n            m_ = (b - c) // (q - r)\n            muls.append(m_)\n    except:\n        pass\n    return muls\n\n@lru_cache(maxsize=1 << 10)\ndef recSolver(pqr, abc, ans=0):\n    if pqr == abc:\n        return ans\n    if ans >= 2:\n        return 3\n    adds = [abc[i] - pqr[i] for i in range(3)]\n    muls = [abc[i] // pqr[i] if pqr[i] != 0 else 0 for i in range(3)] + byeqs(pqr, abc)\n    f_ans = 3\n    for ss in range(8):\n        for a in adds:\n            pqr_copy = list(pqr)\n            for i in [1, 2, 4]:\n                if ss & i:\n                    pqr_copy[i >> 1] += a\n            f_ans = min(f_ans, recSolver(tuple(pqr_copy), tuple(abc), ans + 1))\n        for m in muls:\n            pqr_copy = list(pqr)\n            for i in [1, 2, 4]:\n                if ss & i:\n                    pqr_copy[i >> 1] *= m\n            f_ans = min(f_ans, recSolver(tuple(pqr_copy), tuple(abc), ans + 1))\n    return f_ans\nfor _ in range(fintinp()):\n    pqr = flistinp()\n    abc = flistinp()\n    fop(recSolver(tuple(pqr), tuple(abc), 0))", "import sys\n\ndef fop(s, end='\\n'):\n    sys.stdout.write(str(s) + end)\n\ndef fip():\n    return sys.stdin.readline().strip()\nfintinp = lambda : int(fip())\n\ndef flistinp(func=int):\n    return list(map(func, fip().split()))\n\ndef fnsepline(n, func=str):\n    return [func(fip()) for _ in range(n)]\nfrom functools import lru_cache\n\n@lru_cache(maxsize=1 << 20)\ndef byeqs(pqr, abc):\n    (p, q, r) = pqr\n    (a, b, c) = abc\n    muls = []\n    try:\n        if p != q:\n            m_ = (a - b) // (p - q)\n            muls.append(m_)\n    except:\n        pass\n    try:\n        if p != r:\n            m_ = (a - c) // (p - r)\n            muls.append(m_)\n    except:\n        pass\n    try:\n        if q != r:\n            m_ = (b - c) // (q - r)\n            muls.append(m_)\n    except:\n        pass\n    return muls\n\n@lru_cache(maxsize=1 << 20)\ndef recSolver(pqr, abc, ans=0):\n    if pqr == abc:\n        return ans\n    if ans >= 2:\n        return 3\n    adds = [abc[i] - pqr[i] for i in range(3)]\n    muls = [abc[i] // pqr[i] if pqr[i] != 0 else 0 for i in range(3)] + byeqs(pqr, abc)\n    f_ans = 3\n    for ss in range(8):\n        for a in adds:\n            pqr_copy = list(pqr)\n            for i in [1, 2, 4]:\n                if ss & i:\n                    pqr_copy[i >> 1] += a\n            f_ans = min(f_ans, recSolver(tuple(pqr_copy), tuple(abc), ans + 1))\n        for m in muls:\n            pqr_copy = list(pqr)\n            for i in [1, 2, 4]:\n                if ss & i:\n                    pqr_copy[i >> 1] *= m\n            f_ans = min(f_ans, recSolver(tuple(pqr_copy), tuple(abc), ans + 1))\n    return f_ans\nfor _ in range(fintinp()):\n    pqr = flistinp()\n    abc = flistinp()\n    fop(recSolver(tuple(pqr), tuple(abc), 0))", "import sys\n\ndef fop(s, end='\\n'):\n    sys.stdout.write(str(s) + end)\n\ndef fip():\n    return sys.stdin.readline().strip()\nfintinp = lambda : int(fip())\n\ndef flistinp(func=int):\n    return list(map(func, fip().split()))\n\ndef fnsepline(n, func=str):\n    return [func(fip()) for _ in range(n)]\n\ndef byeqs(pqr, abc):\n    (p, q, r) = pqr\n    (a, b, c) = abc\n    muls = []\n    try:\n        if p != q:\n            m_ = (a - b) // (p - q)\n            muls.append(m_)\n    except:\n        pass\n    try:\n        if p != r:\n            m_ = (a - c) // (p - r)\n            muls.append(m_)\n    except:\n        pass\n    try:\n        if q != r:\n            m_ = (b - c) // (q - r)\n            muls.append(m_)\n    except:\n        pass\n    return muls\n\ndef recSolver(pqr, abc, ans=0):\n    if pqr == abc:\n        return ans\n    if ans >= 2:\n        return 3\n    adds = [abc[i] - pqr[i] for i in range(3)]\n    muls = [abc[i] // pqr[i] if pqr[i] != 0 else 0 for i in range(3)] + byeqs(pqr, abc)\n    f_ans = 3\n    for ss in range(8):\n        for a in adds:\n            pqr_copy = list(pqr)\n            for i in [1, 2, 4]:\n                if ss & i:\n                    pqr_copy[i >> 1] += a\n            f_ans = min(f_ans, recSolver(pqr_copy, abc, ans + 1))\n        for m in muls:\n            pqr_copy = list(pqr)\n            for i in [1, 2, 4]:\n                if ss & i:\n                    pqr_copy[i >> 1] *= m\n            f_ans = min(f_ans, recSolver(pqr_copy, abc, ans + 1))\n    return f_ans\nfor _ in range(fintinp()):\n    pqr = flistinp()\n    abc = flistinp()\n    fop(recSolver(pqr, abc, 0))", "from sys import stdin\n\ndef check(x, y, X, Y):\n    if X - x == Y - y:\n        return True\n    if x != 0 and y != 0 and (X % x == 0) and (Y % y == 0) and (X // x == Y // y):\n        return True\n    return False\n\ndef case2():\n    if p == a and check(q, r, b, c) or (q == b and check(p, r, a, c)) or (r == c and check(p, q, a, b)):\n        return 1\n    return 2\n\ndef case3():\n    if a - p == b - q and b - q == c - r:\n        return 1\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0) and (a // p == b // q) and (b // q == c // r):\n        return 1\n    if p - q != 0 and q - r != 0 and (r - p != 0) and ((a - b) % (p - q) == 0) and ((b - c) % (q - r) == 0) and ((c - a) % (r - p) == 0) and ((a - b) // (p - q) == (b - c) // (q - r)) and ((c - a) // (r - p) == (a - b) // (p - q)):\n        return 2\n    if check(p, q, a, b) or check(q, r, b, c) or check(r, p, c, a):\n        return 2\n    if check(q + (a - p), r + (a - p), b, c) or check(p + (b - q), r + (b - q), a, c) or check(p + (c - r), q + (c - r), a, b):\n        return 2\n    if check(q, r, b - (a - p), c - (a - p)) or check(p, r, a - (b - q), c - (b - q)) or check(p, q, a - (c - r), b - (c - r)):\n        return 2\n    if p != 0 and a % p == 0 and check(q * (a // p), r * (a // p), b, c) or (q != 0 and b % q == 0 and check(p * (b // q), r * (b // q), a, c)) or (r != 0 and c % r == 0 and check(p * (c // r), q * (c // r), a, b)):\n        return 2\n    if p != 0 and a != 0 and (a % p == 0) and (b % (a // p) == 0) and (c % (a // p) == 0) and check(q, r, b // (a // p), c // (a // p)) or (q != 0 and b != 0 and (b % q == 0) and (a % (b // q) == 0) and (c % (b // q) == 0) and check(p, r, a // (b // q), c // (b // q))) or (r != 0 and c != 0 and (c % r == 0) and (a % (c // r) == 0) and (b % (c // r) == 0) and check(p, q, a // (c // r), b // (c // r))):\n        return 2\n    if check(q + (a - p), r, b, c) or check(q, r + (a - p), b, c) or check(p + (b - q), r, a, c) or check(p, r + (b - q), a, c) or check(p + (c - r), q, a, b) or check(p, r + (c - r), a, c):\n        return 2\n    if check(q, r, b - (a - p), c) or check(q, r, b, c - (a - p)) or check(p, r, a - (b - q), c) or check(p, r, a, c - (b - q)) or check(p, q, a - (c - r), b) or check(p, q, a, b - (c - r)):\n        return 2\n    if p != 0 and a % p == 0 and (check(q * (a // p), r, b, c) or check(q, r * (a // p), b, c)) or (q != 0 and b % q == 0 and (check(p * (b // q), r, a, c) or check(p, r * (b // q), a, c))) or (r != 0 and c % r == 0 and (check(p, q * (c // r), a, b) or check(p * (c // r), q, a, b))):\n        return 2\n    if p != 0 and a != 0 and (a % p == 0) and (b % (a // p) == 0 and check(q, r, b // (a // p), c) or (c % (a // p) == 0 and check(q, r, b, c // (a // p)))):\n        return 2\n    if q != 0 and b != 0 and (b % q == 0) and (a % (b // q) == 0 and check(p, r, a // (b // q), c) or (c % (b // q) == 0 and check(p, r, a, c // (b // q)))):\n        return 2\n    if r != 0 and c != 0 and (c % r == 0) and (a % (c // r) == 0 and check(p, q, a // (c // r), b) or (b % (c // r) == 0 and check(p, q, a, b // (c // r)))):\n        return 2\n    return 3\n\ndef main():\n    arr = []\n    if p != a:\n        arr.append(0)\n    if q != b:\n        arr.append(1)\n    if r != c:\n        arr.append(2)\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    if len(arr) == 2:\n        return case2()\n    return case3()\nfor _ in range(int(stdin.readline())):\n    (p, q, r) = map(int, stdin.readline().split())\n    (a, b, c) = map(int, stdin.readline().split())\n    print(main())", "def d1d2(p, q, r, a, b, c):\n    if p == 0 or q == 0 or r == 0:\n        return False\n    if a % p == 0 and b % q == 0:\n        d1 = a // p\n        d2 = b // q\n        if c == r * d1 * d2:\n            return True\n        return False\n    return False\n\ndef e1e2(p, q, r, a, b, c):\n    e1 = a - p\n    e2 = b - q\n    return c == r + e1 + e2\n\ndef d3e3(p, q, r, a, b, c):\n    delta = [0, 0, 0]\n    delta[0] = p - q\n    if delta[0] == 0:\n        return False\n    delta[1] = a - b\n    delta[2] = p * b - q * a\n    if delta[1] % delta[0] == 0 and delta[2] % delta[0] == 0:\n        val_d = delta[1] // delta[0]\n        val_e = delta[2] // delta[0]\n        return c == r * val_d + val_e\n    else:\n        return False\n\ndef d3e2(p, q, r, a, b, c):\n    delta = [0, 0, 0]\n    delta[0] = p - q\n    if delta[0] == 0:\n        return False\n    delta[1] = a - b\n    delta[2] = p * b - q * a\n    if delta[1] % delta[0] == 0 and delta[2] % delta[0] == 0:\n        val_d = delta[1] // delta[0]\n        val_e = delta[2] // delta[0]\n        return c == r * val_d\n    else:\n        return False\n\ndef d2e3(p, q, r, a, b, c):\n    delta = [0, 0, 0]\n    delta[0] = p - q\n    if delta[0] == 0:\n        return False\n    delta[1] = a - b\n    delta[2] = p * b - q * a\n    if delta[1] % delta[0] == 0 and delta[2] % delta[0] == 0:\n        val_d = delta[1] // delta[0]\n        val_e = delta[2] // delta[0]\n        return c == r + val_e\n    else:\n        return False\n\ndef d2e2(p, q, r, a, b, c):\n    if q != 0 and b % q == 0:\n        d = b // q\n        e = c - r\n        assert e != 0, 'already checked, one same'\n        return a == p * d + e\n    return False\n\ndef e3d2(p, q, r, a, b, c):\n    assert c != r, '1 same'\n    e = c - r\n    if p != -e and q != -e and (a % (p + e) == 0) and (b % (q + e) == 0):\n        d1 = a // (p + e)\n        d2 = b // (q + e)\n        return d1 != 1 and d1 == d2\n    return False\n\ndef e2d2(p, q, r, a, b, c):\n    if r != 0 and c % r == 0:\n        d = c // r\n        e = b - q\n        assert d != 1 and e != 0, '1 or 2 same'\n        return a == (p + e) * d\n    return False\n\ndef modified(src, dst):\n    (p, q, r) = src\n    (a, b, c) = dst\n    if p == a and q == b and (r == c):\n        print(0)\n        return\n    if p == a and q == b:\n        if r != c:\n            print(1)\n            return\n        assert True, 'Should not have come here1'\n    if q == b and r == c:\n        if p != a:\n            print(1)\n            return\n        assert True, 'Should not have come here2'\n    if r == c and p == a:\n        if q != b:\n            print(1)\n            return\n        assert True, 'Should not have come here3'\n    if p == a:\n        if b - q == c - r:\n            print(1)\n            return\n        if q != 0 and r != 0 and (b % q == 0) and (b % q == c % r) and (b // q == c // r):\n            print(1)\n            return\n        print(2)\n        return\n    if q == b:\n        if c - r == a - p:\n            print(1)\n            return\n        if p != 0 and r != 0 and (a % p == 0) and (a % p == c % r) and (a // p == c // r):\n            print(1)\n            return\n        print(2)\n        return\n    if r == c:\n        if b - q == a - p:\n            print(1)\n            return\n        if p != 0 and q != 0 and (a % p == 0) and (a % p == b % q) and (a // p == b // q):\n            print(1)\n            return\n        print(2)\n        return\n    if p - a == q - b and q - b == r - c:\n        print(1)\n        return\n    if p != 0 and q != 0 and (r != 0):\n        if a % p == 0 and a % p == b % q and (b % q == c % r):\n            if a // p == b // q and b // q == c // r:\n                print(1)\n                return\n    if p - a == q - b:\n        print(2)\n        return\n    if p != 0 and q != 0 and (a % p == 0) and (a % p == b % q) and (a // p == b // q):\n        print(2)\n        return\n    if r - c == q - b:\n        print(2)\n        return\n    if r != 0 and q != 0 and (c % r == 0) and (c % r == b % q) and (c // r == b // q):\n        print(2)\n        return\n    if p - a == r - c:\n        print(2)\n        return\n    if p != 0 and r != 0 and (a % p == 0) and (a % p == c % r) and (a // p == c // r):\n        print(2)\n        return\n    if d1d2(p, q, r, a, b, c) or d1d2(q, r, p, b, c, a) or d1d2(r, p, q, c, a, b):\n        print(2)\n        return\n    if e1e2(p, q, r, a, b, c) or e1e2(q, r, p, b, c, a) or e1e2(r, p, q, c, a, b):\n        print(2)\n        return\n    if d3e3(p, q, r, a, b, c):\n        print(2)\n        return\n    if d3e2(p, q, r, a, b, c) or d3e2(q, r, p, b, c, a) or d3e2(r, p, q, c, a, b):\n        print(2)\n        return\n    if d2e3(p, q, r, a, b, c) or d2e3(q, r, p, b, c, a) or d2e3(r, p, q, c, a, b):\n        print(2)\n        return\n    if d2e2(p, q, r, a, b, c) or d2e2(q, r, p, b, c, a) or d2e2(r, p, q, c, a, b) or d2e2(p, r, q, a, c, b) or d2e2(q, p, r, b, a, c) or d2e2(r, q, p, c, b, a):\n        print(2)\n        return\n    if e3d2(p, q, r, a, b, c) or e3d2(q, r, p, b, c, a) or e3d2(r, p, q, c, a, b):\n        print(2)\n        return\n    if e2d2(p, q, r, a, b, c) or e2d2(q, r, p, b, c, a) or e2d2(r, p, q, c, a, b) or e2d2(p, r, q, a, c, b) or e2d2(q, p, r, b, a, c) or e2d2(r, q, p, c, b, a):\n        print(2)\n        return\n    print(3)\nfor _ in range(int(input())):\n    src = tuple(map(int, input().split()))\n    dst = tuple(map(int, input().split()))\n    modified(src, dst)", "def checkpoint1(p, q, r, a, b, c):\n    if p == a and b - q == c - r:\n        return True\n    if q == b and a - p == c - r:\n        return True\n    if c == r and a - p == b - q:\n        return True\n    if p == a and q == b:\n        return True\n    if p == a and c == r:\n        return True\n    if c == r and b == q:\n        return True\n    if a - p == b - q and a - p == c - r:\n        return True\n    if q != 0 and r != 0 and (b % q == 0) and (c % r == 0) and (p == a) and (b / q == c / r):\n        return True\n    if p != 0 and r != 0 and (a % p == 0) and (c % r == 0) and (q == b) and (a / p == c / r):\n        return True\n    if p != 0 and q != 0 and (a % p == 0) and (b % q == 0) and (c == r) and (a / p == b / q):\n        return True\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0) and (a / p == b / q) and (a / p == c / r):\n        return True\n    return False\n\ndef checkpoint2(p, q, r, a, b, c):\n    x1 = a - p\n    y1 = b - q\n    z1 = c - r\n    if p == a or q == b or r == c:\n        return True\n    if a - p == b - q or b - q == c - r or c - r == a - p:\n        return True\n    if p != 0 and q != 0 and (a % p == 0 and b % q == 0) and (a / p == b / q):\n        return True\n    if p != 0 and r != 0 and (a % p == 0 and c % r == 0) and (a / p == c / r):\n        return True\n    if q != 0 and r != 0 and (b % q == 0 and c % r == 0) and (b / q == c / r):\n        return True\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0) and (a / p * b / q == c / r or a / p * c / r == b / q or b / q * c / r == a / p):\n        return True\n    if x1 + y1 == z1 or x1 + z1 == y1 or y1 + z1 == x1:\n        return True\n    if q + x1 != 0 and r != 0 and (b % (q + x1) == 0) and (c % r == 0) and (b / (q + x1) == c / r):\n        return True\n    if p != 0 and a % p == 0 and (b - q * a / p == c - r):\n        return True\n    if q + z1 != 0 and p != 0 and (b % (q + z1) == 0) and (a % p == 0) and (b / (q + z1) == a / p):\n        return True\n    if r != 0 and c % r == 0 and (b - q * c / r == a - p):\n        return True\n    if p + y1 != 0 and r != 0 and (a % (p + y1) == 0) and (c % r == 0) and (a / (p + y1) == c / r):\n        return True\n    if q != 0 and b % q == 0 and (a - p * b / q == c - r):\n        return True\n    if p + z1 != 0 and q != 0 and (a % (p + z1) == 0) and (b % q == 0) and (a / (p + z1) == b / q):\n        return True\n    if r != 0 and c % r == 0 and (a - p * c / r == b - q):\n        return True\n    if r + y1 != 0 and p != 0 and (c % (r + y1) == 0) and (a % p == 0) and (c / (r + y1) == a / p):\n        return True\n    if q != 0 and b % q == 0 and (c - r * b / q == a - p):\n        return True\n    if r + x1 != 0 and q != 0 and (c % (r + x1) == 0) and (b % q == 0) and (c / (r + x1) == b / q):\n        return True\n    if p != 0 and a % p == 0 and (c - r * a / p == b - q):\n        return True\n    if p + z1 != 0 and q + z1 != 0 and (a % (p + z1) == 0) and (b % (q + z1) == 0) and (a / (p + z1) == b / (q + z1)):\n        return True\n    if r != 0 and c % r == 0 and (a - p * c / r == b - q * c / r):\n        return True\n    if p + y1 != 0 and r + y1 != 0 and (a % (p + y1) == 0) and (c % (r + y1) == 0) and (a / (p + y1) == c / (r + y1)):\n        return True\n    if q != 0 and b % q == 0 and (a - p * b / q == c - r * b / q):\n        return True\n    if q + x1 != 0 and r + x1 != 0 and (b % (q + x1) == 0) and (c % (r + x1) == 0) and (b / (q + x1) == c / (r + x1)):\n        return True\n    if p != 0 and a % p == 0 and (b - q * a / p == c - r * a / p):\n        return True\n    if r != 0 and c % r == 0 and (c / r != 0) and (a % (c / r) == 0) and (b % (c / r) == 0) and (a / (c / r) - p == b / (c / r) - q):\n        return True\n    if p != 0 and q != 0 and ((a - z1) % p == 0) and ((b - z1) % q == 0) and ((a - z1) / p == (b - z1) / q):\n        return True\n    if q != 0 and b % q == 0 and (b / q != 0) and (a % (b / q) == 0) and (c % (b / q) == 0) and (a / (b / q) - p == c / (b / q) - r):\n        return True\n    if p != 0 and r != 0 and ((a - y1) % p == 0) and ((c - y1) % r == 0) and ((a - y1) / p == (c - y1) / r):\n        return True\n    if p != 0 and a % p == 0 and (a / p != 0) and (b % (a / p) == 0) and (c % (a / p) == 0) and (b / (a / p) - q == c / (a / p) - r):\n        return True\n    if q != 0 and r != 0 and ((b - x1) % q == 0) and ((c - x1) % r == 0) and ((b - x1) / q == (c - x1) / r):\n        return True\n    if q - p != 0 and r - q != 0 and ((b - a) % (q - p) == 0) and ((c - b) % (r - q) == 0) and ((b - a) / (q - p) == (c - b) / (r - q)):\n        return True\n    return False\ntest = int(input())\nfor _ in range(test):\n    (x1, y1, z1) = [int(x) for x in input().split()]\n    (a, b, c) = [int(x) for x in input().split()]\n    if a == x1 and b == y1 and (c == z1):\n        print(0)\n    elif checkpoint1(x1, y1, z1, a, b, c):\n        print(1)\n    elif checkpoint2(x1, y1, z1, a, b, c):\n        print(2)\n    else:\n        print(3)", "def checkpoint1(p, q, r, a, b, c):\n    if p == a and b - q == c - r:\n        return True\n    if q == b and a - p == c - r:\n        return True\n    if c == r and a - p == b - q:\n        return True\n    if p == a and q == b:\n        return True\n    if p == a and c == r:\n        return True\n    if c == r and b == q:\n        return True\n    if a - p == b - q and a - p == c - r:\n        return True\n    if q != 0 and r != 0 and (b % q == 0) and (c % r == 0) and (p == a) and (b / q == c / r):\n        return True\n    if p != 0 and r != 0 and (a % p == 0) and (c % r == 0) and (q == b) and (a / p == c / r):\n        return True\n    if p != 0 and q != 0 and (a % p == 0) and (b % q == 0) and (c == r) and (a / p == b / q):\n        return True\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0) and (a / p == b / q) and (a / p == c / r):\n        return True\n    return False\n\ndef checkpoint2(p, q, r, a, b, c):\n    x1 = a - p\n    y1 = b - q\n    z1 = c - r\n    if p == a or q == b or r == c:\n        return True\n    if a - p == b - q or b - q == c - r or c - r == a - p:\n        return True\n    if p != 0 and q != 0 and (a % p == 0 and b % q == 0) and (a / p == b / q):\n        return True\n    if p != 0 and r != 0 and (a % p == 0 and c % r == 0) and (a / p == c / r):\n        return True\n    if q != 0 and r != 0 and (b % q == 0 and c % r == 0) and (b / q == c / r):\n        return True\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0) and (a / p * b / q == c / r or a / p * c / r == b / q or b / q * c / r == a / p):\n        return True\n    if x1 + y1 == z1 or x1 + z1 == y1 or y1 + z1 == x1:\n        return True\n    if q + x1 != 0 and r != 0 and (b % (q + x1) == 0) and (c % r == 0) and (b / (q + x1) == c / r):\n        return True\n    if p != 0 and a % p == 0 and (b - q * a / p == c - r):\n        return True\n    if q + z1 != 0 and p != 0 and (b % (q + z1) == 0) and (a % p == 0) and (b / (q + z1) == a / p):\n        return True\n    if r != 0 and c % r == 0 and (b - q * c / r == a - p):\n        return True\n    if p + y1 != 0 and r != 0 and (a % (p + y1) == 0) and (c % r == 0) and (a / (p + y1) == c / r):\n        return True\n    if q != 0 and b % q == 0 and (a - p * b / q == c - r):\n        return True\n    if p + z1 != 0 and q != 0 and (a % (p + z1) == 0) and (b % q == 0) and (a / (p + z1) == b / q):\n        return True\n    if r != 0 and c % r == 0 and (a - p * c / r == b - q):\n        return True\n    if r + y1 != 0 and p != 0 and (c % (r + y1) == 0) and (a % p == 0) and (c / (r + y1) == a / p):\n        return True\n    if q != 0 and b % q == 0 and (c - r * b / q == a - p):\n        return True\n    if r + x1 != 0 and q != 0 and (c % (r + x1) == 0) and (b % q == 0) and (c / (r + x1) == b / q):\n        return True\n    if p != 0 and a % p == 0 and (c - r * a / p == b - q):\n        return True\n    if p + z1 != 0 and q + z1 != 0 and (a % (p + z1) == 0) and (b % (q + z1) == 0) and (a / (p + z1) == b / (q + z1)):\n        return True\n    if r != 0 and c % r == 0 and (a - p * c / r == b - q * c / r):\n        return True\n    if p + y1 != 0 and r + y1 != 0 and (a % (p + y1) == 0) and (c % (r + y1) == 0) and (a / (p + y1) == c / (r + y1)):\n        return True\n    if q != 0 and b % q == 0 and (a - p * b / q == c - r * b / q):\n        return True\n    if q + x1 != 0 and r + x1 != 0 and (b % (q + x1) == 0) and (c % (r + x1) == 0) and (b / (q + x1) == c / (r + x1)):\n        return True\n    if p != 0 and a % p == 0 and (b - q * a / p == c - r * a / p):\n        return True\n    if r != 0 and c % r == 0 and (c / r != 0) and (a % (c / r) == 0) and (b % (c / r) == 0) and (a / (c / r) - p == b / (c / r) - q):\n        return True\n    if p != 0 and q != 0 and ((a - z1) % p == 0) and ((b - z1) % q == 0) and ((a - z1) / p == (b - z1) / q):\n        return True\n    if q != 0 and b % q == 0 and (b / q != 0) and (a % (b / q) == 0) and (c % (b / q) == 0) and (a / (b / q) - p == c / (b / q) - r):\n        return True\n    if p != 0 and r != 0 and ((a - y1) % p == 0) and ((c - y1) % r == 0) and ((a - y1) / p == (c - y1) / r):\n        return True\n    if p != 0 and a % p == 0 and (a / p != 0) and (b % (a / p) == 0) and (c % (a / p) == 0) and (b / (a / p) - q == c / (a / p) - r):\n        return True\n    if q != 0 and r != 0 and ((b - x1) % q == 0) and ((c - x1) % r == 0) and ((b - x1) / q == (c - x1) / r):\n        return True\n    if q - p != 0 and r - q != 0 and ((b - a) % (q - p) == 0) and ((c - b) % (r - q) == 0) and ((b - a) / (q - p) == (c - b) / (r - q)):\n        return True\n    return False\ntest = int(input())\nfor _ in range(test):\n    (x1, y1, z1) = [int(x) for x in input().split()]\n    (a, b, c) = [int(x) for x in input().split()]\n    if a == x1 and b == y1 and (c == z1):\n        print(0)\n    elif checkpoint1(x1, y1, z1, a, b, c):\n        print(1)\n    elif checkpoint2(x1, y1, z1, a, b, c):\n        print(2)\n    else:\n        print(3)", "t = int(input())\nwhile t > 0:\n    li1 = [int(i) for i in input().split()]\n    li2 = [int(i) for i in input().split()]\n    s1 = set()\n    s2 = set()\n    (val, ans) = (0, 3)\n    for i in range(3):\n        if li1[i] == li2[i]:\n            val += 1\n    if val == 3:\n        ans = 0\n    elif val == 2:\n        ans = 1\n    else:\n        for i in range(3):\n            if li2[i] - li1[i] != 0:\n                s1.add(li2[i] - li1[i])\n            if li1[i] != 0 and li2[i] % li1[i] == 0 and (li2[i] // li1[i] != 1):\n                s2.add(li2[i] // li1[i])\n        temp = []\n        for i in s1:\n            for j in range(7):\n                temp = [li1[k] for k in range(3)]\n                if j == 0:\n                    temp[0] += i\n                    temp[1] += i\n                elif j == 1:\n                    temp[0] += i\n                    temp[2] += i\n                elif j == 2:\n                    temp[1] += i\n                    temp[2] += i\n                elif j == 3:\n                    temp[0] += i\n                    temp[1] += i\n                    temp[2] += i\n                elif j == 4:\n                    temp[0] += i\n                elif j == 5:\n                    temp[1] += i\n                elif j == 6:\n                    temp[2] += i\n                a = 0\n                for k in range(3):\n                    if temp[k] == li2[k]:\n                        a += 1\n                if a == 3:\n                    ans = 1\n                if a == 2:\n                    ans = min(ans, 2)\n                s3 = set()\n                for k in range(3):\n                    if temp[k] != 0 and li2[k] % temp[k] == 0 and (li2[k] // temp[k] != 1):\n                        s3.add(li2[k] // temp[k])\n                temp1 = []\n                for k in s3:\n                    for l in range(7):\n                        temp1 = [temp[m] for m in range(3)]\n                        if l == 0:\n                            temp1[0] *= k\n                            temp1[1] *= k\n                        elif l == 1:\n                            temp1[0] *= k\n                            temp1[2] *= k\n                        elif l == 2:\n                            temp1[1] *= k\n                            temp1[2] *= k\n                        elif l == 3:\n                            temp1[0] *= k\n                            temp1[1] *= k\n                            temp1[2] *= k\n                        elif l == 4:\n                            temp1[0] *= k\n                        elif l == 5:\n                            temp1[1] *= k\n                        elif l == 6:\n                            temp1[2] *= k\n                        for m in range(3):\n                            if li2[m] != temp1[m]:\n                                break\n                            if m == 2:\n                                ans = min(ans, 2)\n                s4 = set()\n                for k in range(3):\n                    if li2[k] - temp[k] != 0:\n                        s4.add(li2[k] - temp[k])\n                temp2 = []\n                for k in s4:\n                    for l in range(7):\n                        temp2 = [temp[m] for m in range(3)]\n                        if l == 0:\n                            temp2[0] += k\n                            temp2[1] += k\n                        elif l == 1:\n                            temp2[0] += k\n                            temp2[2] += k\n                        elif l == 2:\n                            temp2[1] += k\n                            temp2[2] += k\n                        elif l == 3:\n                            temp2[0] += k\n                            temp2[1] += k\n                            temp2[2] += k\n                        elif l == 4:\n                            temp2[0] += k\n                        elif l == 5:\n                            temp2[1] += k\n                        elif l == 6:\n                            temp2[2] += k\n                        for m in range(3):\n                            if li2[m] != temp2[m]:\n                                break\n                            if m == 2:\n                                ans = min(ans, 2)\n                s4.clear()\n                count = 0\n                for k in range(3):\n                    var = li2[k] - i\n                    if li1[k] != 0 and var % li1[k] == 0:\n                        if var // li1[k] != 1:\n                            s4.add(var // li1[k])\n                        count += 1\n                if len(s4) == 1 and count == 3:\n                    ans = min(ans, 2)\n        if ans == 3 or ans == 2:\n            d1 = li2[2] - li2[1]\n            d2 = li2[1] - li2[0]\n            d3 = li1[2] - li1[1]\n            d4 = li1[1] - li1[0]\n            d5 = li2[2] - li2[0]\n            d6 = li1[2] - li1[0]\n            if d3 != 0 and d4 != 0 and (d6 != 0) and (d1 % d3 == 0) and (d2 % d4 == 0) and (d5 % d6 == 0) and (d1 // d3 == d2 // d4) and (d1 // d3 == d5 // d6):\n                ans = min(ans, 2)\n            for i in s2:\n                s3 = set()\n                count = 0\n                for j in range(3):\n                    temp[j] = li2[j]\n                    if i != 0 and temp[j] % i == 0:\n                        temp[j] //= i\n                        temp[j] -= li1[j]\n                        if temp[j] != 0:\n                            s3.add(temp[j])\n                        count += 1\n                if len(s3) == 1 and count == 3:\n                    ans = min(ans, 2)\n            for i in s2:\n                for j in range(7):\n                    temp = [li1[k] for k in range(3)]\n                    if j == 0:\n                        temp[0] *= i\n                        temp[1] *= i\n                    elif j == 1:\n                        temp[0] *= i\n                        temp[2] *= i\n                    elif j == 2:\n                        temp[1] *= i\n                        temp[2] *= i\n                    elif j == 3:\n                        temp[0] *= i\n                        temp[1] *= i\n                        temp[2] *= i\n                    elif j == 4:\n                        temp[0] *= i\n                    elif j == 5:\n                        temp[1] *= i\n                    elif j == 6:\n                        temp[2] *= i\n                    a = 0\n                    for k in range(3):\n                        if temp[k] == li2[k]:\n                            a += 1\n                    if a == 3:\n                        ans = 1\n                    elif a == 2:\n                        ans = min(ans, 2)\n                    temp2 = []\n                    s4 = set()\n                    for k in range(3):\n                        if temp[k] != 0 and li2[k] % temp[k] == 0 and (li2[k] // temp[k] != 1):\n                            s4.add(li2[k] // temp[k])\n                    temp2 = []\n                    for k in s4:\n                        for l in range(7):\n                            temp2 = [temp[m] for m in range(3)]\n                            if l == 0:\n                                temp2[0] *= k\n                                temp2[1] *= k\n                            elif l == 1:\n                                temp2[0] *= k\n                                temp2[2] *= k\n                            elif l == 2:\n                                temp2[1] *= k\n                                temp2[2] *= k\n                            elif l == 3:\n                                temp2[0] *= k\n                                temp2[1] *= k\n                                temp2[2] *= k\n                            elif l == 4:\n                                temp2[0] *= k\n                            elif l == 5:\n                                temp2[1] *= k\n                            elif l == 6:\n                                temp2[2] *= k\n                            for m in range(3):\n                                if li2[m] != temp2[m]:\n                                    break\n                                if m == 2:\n                                    ans = min(ans, 2)\n                    s4.clear()\n                    for k in range(3):\n                        var = li2[k] - temp[k]\n                        if var != 0:\n                            s4.add(var)\n                    if len(s4) == 1:\n                        ans = min(ans, 2)\n    print(ans)\n    t -= 1", "def util(x1, x2, y1, y2):\n    d = x1 - y1\n    n = x2 - y2\n    if d and (not n % d):\n        return n // d\n    return 1\n\ndef solve(p, q, r, a, b, c, res=0):\n    if p == a and q == b and (r == c):\n        return res\n    if res >= 2:\n        return 3\n    adds = [a - p, b - q, c - r]\n    muls = []\n    if p and (not a % p):\n        muls += [a // p]\n    if q and (not b % q):\n        muls += [b // q]\n    if r and (not c % r):\n        muls += [c // r]\n    muls.append(util(p, a, q, b))\n    muls.append(util(p, a, r, c))\n    muls.append(util(q, b, r, c))\n    mask = 2 ** 3\n    ans = 3\n    for msk in range(1, mask):\n        for add in adds:\n            (np, nq, nr) = (p, q, r)\n            if msk & 1:\n                np += add\n            if msk & 2:\n                nq += add\n            if msk & 4:\n                nr += add\n            ans = min(ans, solve(np, nq, nr, a, b, c, res + 1))\n        for mul in muls:\n            (np, nq, nr) = (p, q, r)\n            if msk & 1:\n                np *= mul\n            if msk & 2:\n                nq *= mul\n            if msk & 4:\n                nr *= mul\n            ans = min(ans, solve(np, nq, nr, a, b, c, res + 1))\n    return ans\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        (p, q, r) = map(int, input().split())\n        (a, b, c) = map(int, input().split())\n        print(solve(p, q, r, a, b, c))\nmain()", "def checkpoint1(p, q, r, a, b, c):\n    if p == a and b - q == c - r:\n        return True\n    if q == b and a - p == c - r:\n        return True\n    if c == r and a - p == b - q:\n        return True\n    if p == a and q == b:\n        return True\n    if p == a and c == r:\n        return True\n    if c == r and b == q:\n        return True\n    if a - p == b - q and a - p == c - r:\n        return True\n    if q != 0 and r != 0 and (b % q == 0) and (c % r == 0) and (p == a) and (b / q == c / r):\n        return True\n    if p != 0 and r != 0 and (a % p == 0) and (c % r == 0) and (q == b) and (a / p == c / r):\n        return True\n    if p != 0 and q != 0 and (a % p == 0) and (b % q == 0) and (c == r) and (a / p == b / q):\n        return True\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0) and (a / p == b / q) and (a / p == c / r):\n        return True\n    return False\n\ndef checkpoint2(p, q, r, a, b, c):\n    x1 = a - p\n    y1 = b - q\n    z1 = c - r\n    if p == a or q == b or r == c:\n        return True\n    if a - p == b - q or b - q == c - r or c - r == a - p:\n        return True\n    if p != 0 and q != 0 and (a % p == 0 and b % q == 0) and (a / p == b / q):\n        return True\n    if p != 0 and r != 0 and (a % p == 0 and c % r == 0) and (a / p == c / r):\n        return True\n    if q != 0 and r != 0 and (b % q == 0 and c % r == 0) and (b / q == c / r):\n        return True\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0) and (a / p * b / q == c / r or a / p * c / r == b / q or b / q * c / r == a / p):\n        return True\n    if x1 + y1 == z1 or x1 + z1 == y1 or y1 + z1 == x1:\n        return True\n    if q + x1 != 0 and r != 0 and (b % (q + x1) == 0) and (c % r == 0) and (b / (q + x1) == c / r):\n        return True\n    if p != 0 and a % p == 0 and (b - q * a / p == c - r):\n        return True\n    if q + z1 != 0 and p != 0 and (b % (q + z1) == 0) and (a % p == 0) and (b / (q + z1) == a / p):\n        return True\n    if r != 0 and c % r == 0 and (b - q * c / r == a - p):\n        return True\n    if p + y1 != 0 and r != 0 and (a % (p + y1) == 0) and (c % r == 0) and (a / (p + y1) == c / r):\n        return True\n    if q != 0 and b % q == 0 and (a - p * b / q == c - r):\n        return True\n    if p + z1 != 0 and q != 0 and (a % (p + z1) == 0) and (b % q == 0) and (a / (p + z1) == b / q):\n        return True\n    if r != 0 and c % r == 0 and (a - p * c / r == b - q):\n        return True\n    if r + y1 != 0 and p != 0 and (c % (r + y1) == 0) and (a % p == 0) and (c / (r + y1) == a / p):\n        return True\n    if q != 0 and b % q == 0 and (c - r * b / q == a - p):\n        return True\n    if r + x1 != 0 and q != 0 and (c % (r + x1) == 0) and (b % q == 0) and (c / (r + x1) == b / q):\n        return True\n    if p != 0 and a % p == 0 and (c - r * a / p == b - q):\n        return True\n    if p + z1 != 0 and q + z1 != 0 and (a % (p + z1) == 0) and (b % (q + z1) == 0) and (a / (p + z1) == b / (q + z1)):\n        return True\n    if r != 0 and c % r == 0 and (a - p * c / r == b - q * c / r):\n        return True\n    if p + y1 != 0 and r + y1 != 0 and (a % (p + y1) == 0) and (c % (r + y1) == 0) and (a / (p + y1) == c / (r + y1)):\n        return True\n    if q != 0 and b % q == 0 and (a - p * b / q == c - r * b / q):\n        return True\n    if q + x1 != 0 and r + x1 != 0 and (b % (q + x1) == 0) and (c % (r + x1) == 0) and (b / (q + x1) == c / (r + x1)):\n        return True\n    if p != 0 and a % p == 0 and (b - q * a / p == c - r * a / p):\n        return True\n    if r != 0 and c % r == 0 and (c / r != 0) and (a % (c / r) == 0) and (b % (c / r) == 0) and (a / (c / r) - p == b / (c / r) - q):\n        return True\n    if p != 0 and q != 0 and ((a - z1) % p == 0) and ((b - z1) % q == 0) and ((a - z1) / p == (b - z1) / q):\n        return True\n    if q != 0 and b % q == 0 and (b / q != 0) and (a % (b / q) == 0) and (c % (b / q) == 0) and (a / (b / q) - p == c / (b / q) - r):\n        return True\n    if p != 0 and r != 0 and ((a - y1) % p == 0) and ((c - y1) % r == 0) and ((a - y1) / p == (c - y1) / r):\n        return True\n    if p != 0 and a % p == 0 and (a / p != 0) and (b % (a / p) == 0) and (c % (a / p) == 0) and (b / (a / p) - q == c / (a / p) - r):\n        return True\n    if q != 0 and r != 0 and ((b - x1) % q == 0) and ((c - x1) % r == 0) and ((b - x1) / q == (c - x1) / r):\n        return True\n    if q - p != 0 and r - q != 0 and ((b - a) % (q - p) == 0) and ((c - b) % (r - q) == 0) and ((b - a) / (q - p) == (c - b) / (r - q)):\n        return True\n    return False\ntest = int(input())\nfor _ in range(test):\n    (x1, y1, z1) = [int(x) for x in input().split()]\n    (a, b, c) = [int(x) for x in input().split()]\n    if a == x1 and b == y1 and (c == z1):\n        print(0)\n    elif checkpoint1(x1, y1, z1, a, b, c):\n        print(1)\n    elif checkpoint2(x1, y1, z1, a, b, c):\n        print(2)\n    else:\n        print(3)", "def div1(a1, b1):\n    p = 10 ** 10\n    if a1 != 0:\n        if b1 % a1 == 0:\n            p1 = b1 // a1\n        else:\n            p1 = p + 1\n    elif b1 == 0:\n        p1 = 0\n    else:\n        p1 = p + 1\n    return p1\n\ndef div2(a2, b2):\n    p = 10 ** 10\n    if a2 != 0:\n        if b2 % a2 == 0:\n            p2 = b2 // a2\n        else:\n            p2 = p + 2\n    elif b2 == 0:\n        p2 = 0\n    else:\n        p2 = p + 2\n    return p2\n\ndef div3(a3, b3):\n    p = 10 ** 10\n    if a3 != 0:\n        if b3 % a3 == 0:\n            p3 = b3 // a3\n        else:\n            p3 = p + 3\n    elif b3 == 0:\n        p3 = 0\n    else:\n        p3 = p + 3\n    return p3\n\ndef unique(c1, d1, c2, d2, c3, d3):\n    pr = 3\n    if c1 != 0:\n        if d1 % c1 == 0:\n            m = d1 // c1\n            m1 = d2 - c2\n            if c3 + m1 == d3 or c3 * m == d3 or (c3 + m1) * m == d3 or (c3 * m + m1 == d3):\n                pr = 2\n    if c2 != 0:\n        if d2 % c2 == 0:\n            m = d2 // c2\n            m1 = d1 - c1\n            if c3 + m1 == d3 or c3 * m == d3 or (c3 + m1) * m == d3 or (c3 * m + m1 == d3):\n                pr = 2\n    if c1 != 0 and c2 != 0:\n        if d1 % c1 == 0 and d2 % c2 == 0:\n            m = d1 // c1\n            m1 = d2 // c2\n            if c3 * m == d3 or c3 * m1 == d3 or c3 * m * m1 == d3:\n                pr = 2\n    if c1 != c2:\n        if (d1 - d2) % (c1 - c2) == 0:\n            m = (d1 - d2) // (c1 - c2)\n            m1 = d1 - c1 * m\n            if m == 1 or m1 == 0 or c3 + m1 == d3 or (c3 * m == d3) or (c3 * m + m1 == d3):\n                pr = 2\n    if d1 != d2:\n        if (c1 * d2 - c2 * d1) % (d1 - d2) == 0:\n            m = (c1 * d2 - c2 * d1) // (d1 - d2)\n            if c1 + m != 0:\n                if d1 % (c1 + m) == 0:\n                    m1 = d1 // (c1 + m)\n                    if m == 0 or m1 == 1 or c3 + m == d3 or (c3 * m1 == d3) or ((c3 + m) * m1 == d3):\n                        pr = 2\n    if d1 == d2 and c1 == c2:\n        pr = 2\n    if c3 + (d1 - c1) == d3 or c3 + (d2 - c2) == d3 or c3 + (d1 - c1) + (d2 - c2) == d3:\n        pr = 2\n    return pr\nfor i in range(int(input())):\n    (a1, a2, a3) = map(int, input().split())\n    (b1, b2, b3) = map(int, input().split())\n    d1 = b1 - a1\n    d2 = b2 - a2\n    d3 = b3 - a3\n    p1 = div1(a1, b1)\n    p2 = div2(a2, b2)\n    p3 = div3(a3, b3)\n    l = [a1, a2, a3]\n    l1 = [b1, b2, b3]\n    c = 0\n    j = 0\n    k = 3\n    while j < k:\n        if l[j] == l1[j]:\n            c = c + 1\n            l.remove(l[j])\n            l1.remove(l1[j])\n            k = k - 1\n        else:\n            j = j + 1\n    if c == 3 or c == 2:\n        print(3 - c)\n    elif c == 1:\n        if l1[0] - l[0] == l1[1] - l[1]:\n            print(1)\n        elif l[0] != 0 and l[1] != 0:\n            print(1) if l1[0] % l[0] == 0 and l1[1] % l[1] == 0 and (l1[0] / l[0] == l1[1] / l[1]) else print(2)\n        else:\n            print(2)\n    elif d1 == d2 and d2 == d3 or (p1 == p2 and p2 == p3):\n        print(1)\n    else:\n        pr1 = 3\n        pr2 = 3\n        pr3 = 3\n        pr1 = unique(a1, b1, a2, b2, a3, b3)\n        pr2 = unique(a3, b3, a1, b1, a2, b2)\n        pr3 = unique(a2, b2, a3, b3, a1, b1)\n        print(min(pr1, pr2, pr3))", "def solve(a, b, operations):\n    if a == b:\n        return operations\n    if operations >= 2:\n        return 3\n    ops = 3\n    add_set = [b[0] - a[0], b[1] - a[1], b[2] - a[2]]\n    mult_set = []\n    for i in range(3):\n        if a[i] != 0:\n            mult_set.append(b[i] // a[i])\n    if a[1] - a[0] != 0:\n        mult_set.append((b[1] - b[0]) // (a[1] - a[0]))\n    if a[2] - a[0] != 0:\n        mult_set.append((b[2] - b[0]) // (a[2] - a[0]))\n    if a[2] - a[1] != 0:\n        mult_set.append((b[2] - b[1]) // (a[2] - a[1]))\n    for x in range(8):\n        for i in add_set:\n            s = [int(i) for i in a]\n            if x & 1 > 0:\n                s[0] += i\n            if x & 2 > 0:\n                s[1] += i\n            if x & 4 > 0:\n                s[2] += i\n            ops = min(ops, solve(s, b, operations + 1))\n        for i in mult_set:\n            s = [int(i) for i in a]\n            if x & 1 > 0:\n                s[0] *= i\n            if x & 2 > 0:\n                s[1] *= i\n            if x & 4 > 0:\n                s[2] *= i\n            ops = min(ops, solve(s, b, operations + 1))\n    return ops\nfor t in range(int(input().strip())):\n    a = [int(i) for i in input().strip().split()]\n    b = [int(i) for i in input().strip().split()]\n    print(solve(a, b, 0))", "from operator import mul, add\n\ndef solve_eq(t1, t2):\n    (p, a) = t1\n    (q, b) = t2\n    if q - p == 0:\n        return 1\n    return (b - a) // (q - p)\n\ndef solve0(p, q, r, a, b, c, op_count):\n    if (p, q, r) == (a, b, c):\n        return op_count\n    if op_count >= 2:\n        return 3\n    soln = 3\n    operations = []\n    operations.append((add, a - p))\n    operations.append((add, b - q))\n    operations.append((add, c - r))\n    if p != 0:\n        operations.append((mul, a // p))\n    if q != 0:\n        operations.append((mul, b // q))\n    if r != 0:\n        operations.append((mul, c // r))\n    operations.append((mul, solve_eq((p, a), (q, b))))\n    operations.append((mul, solve_eq((p, a), (r, c))))\n    operations.append((mul, solve_eq((q, b), (r, c))))\n    for mask in range(8):\n        for (op, rhs) in operations:\n            (p0, q0, r0, a0, b0, c0) = (p, q, r, a, b, c)\n            if mask & 1:\n                p0 = op(p0, rhs)\n            if mask & 2:\n                q0 = op(q0, rhs)\n            if mask & 4:\n                r0 = op(r0, rhs)\n            soln = min(soln, solve0(p0, q0, r0, a, b, c, op_count + 1))\n    return soln\n\ndef solve(p, q, r, a, b, c):\n    return solve0(p, q, r, a, b, c, 0)\n\ndef main():\n    import sys\n    test_cases = int(sys.stdin.readline())\n    for _ in range(test_cases):\n        (p, q, r) = (int(i) for i in sys.stdin.readline().split())\n        (a, b, c) = (int(i) for i in sys.stdin.readline().split())\n        print(solve(p, q, r, a, b, c))\nmain()", "from operator import mul, add\n\ndef solve_eq(t1, t2):\n    (p, a) = t1\n    (q, b) = t2\n    if q - p == 0:\n        return 1\n    return (b - a) // (q - p)\n\ndef solve0(p, q, r, a, b, c, op_count):\n    if (p, q, r) == (a, b, c):\n        return op_count\n    if op_count >= 2:\n        return 3\n    soln = 3\n    operations = []\n    operations.append((add, a - p))\n    operations.append((add, b - q))\n    operations.append((add, c - r))\n    if p != 0:\n        operations.append((mul, a // p))\n    if q != 0:\n        operations.append((mul, b // q))\n    if r != 0:\n        operations.append((mul, c // r))\n    operations.append((mul, solve_eq((p, a), (q, b))))\n    operations.append((mul, solve_eq((p, a), (r, c))))\n    operations.append((mul, solve_eq((q, b), (r, c))))\n    for mask in range(8):\n        for (op, rhs) in operations:\n            (p0, q0, r0, a0, b0, c0) = (p, q, r, a, b, c)\n            if mask & 1:\n                p0 = op(p0, rhs)\n            if mask & 2:\n                q0 = op(q0, rhs)\n            if mask & 4:\n                r0 = op(r0, rhs)\n            soln = min(soln, solve0(p0, q0, r0, a, b, c, op_count + 1))\n    return soln\n\ndef solve(p, q, r, a, b, c):\n    return solve0(p, q, r, a, b, c, 0)\n\ndef main():\n    import sys\n    test_cases = int(sys.stdin.readline())\n    for _ in range(test_cases):\n        (p, q, r) = (int(i) for i in sys.stdin.readline().split())\n        (a, b, c) = (int(i) for i in sys.stdin.readline().split())\n        print(solve(p, q, r, a, b, c))\nmain()", "def ch1(a, b):\n    if b / a == int(b / a):\n        return True\n    return False\n\ndef ch3(a, b):\n    if abs(a) <= abs(b) and a != 0:\n        return True\n    return False\n\ndef ch2(a, b, c, d):\n    if ch3(a, b) and ch1(a, b) and ch3(c, d) and ch1(c, d):\n        if b / a == d / c:\n            return True\n    return False\n\ndef ch4(a, b, c, d, e, f):\n    if ch3(a, b) and ch1(a, b) and ch3(c, d) and ch1(c, d) and ch3(e, f) and ch1(e, f):\n        if b / a * (d / c) == f / e:\n            return True\n    return False\n\ndef ch5(a, b, c, d, e, f):\n    if ch3(a, b) and ch1(a, b) and ch3(c, d) and ch1(c, d) and ch3(e, f) and ch1(e, f):\n        if b / a == d / c == f / e:\n            return True\n    return False\n\ndef ch6(a, b, x, c, y, z):\n    if ch3(a, b) and ch1(a, b):\n        if x / (b / a) - c == z - y:\n            return True\n    return False\n\ndef ch7(a, b, c, d, e, f):\n    if ch3(a, b) and ch1(a, b):\n        temp1 = b / a\n        if ch3(temp1, d) and ch1(temp1, d):\n            temp2 = d / temp1\n            temp3 = temp2 - c\n            if f - e == temp3:\n                return True\n        if ch3(temp1, f) and ch1(temp1, f):\n            temp2 = f / temp1\n            temp3 = temp2 - e\n            if d - c == temp3:\n                return True\n    return False\n\ndef ch8(a, b, c, d, e, f):\n    if ch3(a, b) and ch1(a, b):\n        temp1 = b / a\n        temp2 = e * temp1\n        temp3 = f - temp2\n        if temp3 == d - c:\n            return True\n    return False\n\ndef ch9(st, li):\n    for i in range(st, 3):\n        li[i] = 0\n        fl.append(li[:])\n        ch9(i + 1, li)\n        li[i] = li2[i]\nt = int(input())\nfor _ in range(t):\n    (p, q, r) = map(int, input().split())\n    (a, b, c) = map(int, input().split())\n    (x, y, z) = (a - p, b - q, c - r)\n    ct = 0\n    if a == 0:\n        ct += 1\n    if b == 0:\n        ct += 1\n    if c == 0:\n        ct += 1\n    l = [3]\n    flag = [0 for x in range(26)]\n    if x == y == z == 0:\n        l.append(0)\n    elif ct == 3 or (ct == 2 and (x == 0 and p != 0 or (y == 0 and q != 0) or (z == 0 and r != 0))) or (x == y == 0 or x == z == 0 or y == z == 0) or (x == y == z):\n        l.append(1)\n    elif abs(a) == abs(p) and abs(b) == abs(q) and (abs(c) == abs(r)):\n        l.append(1)\n    elif x == 0 and y == z or (y == 0 and x == z) or (z == 0 and y == x):\n        l.append(1)\n    elif x == 0 and ch2(q, b, r, c) or (y == 0 and ch2(p, a, r, c)) or (z == 0 and ch2(p, a, q, b)):\n        l.append(1)\n    elif ch5(p, a, q, b, r, c):\n        l.append(1)\n    elif a == b == c:\n        l.append(2)\n    elif ch5(abs(p), abs(a), abs(q), abs(b), abs(r), abs(c)):\n        l.append(2)\n    elif x == 0 or y == 0 or z == 0:\n        l.append(2)\n    elif x + y == z or x + z == y or y + z == x:\n        l.append(2)\n    elif ch4(p, a, q, b, r, c) or ch4(q, b, r, c, p, a) or ch4(p, a, r, c, q, b):\n        l.append(2)\n    elif ct == 2:\n        l.append(2)\n    elif x == b == c or y == a == c or z == a == b:\n        l.append(2)\n    elif x == y or y == z or x == z:\n        l.append(2)\n    elif ch2(p, a, q, b) or ch2(q, b, r, c) or ch2(p, a, r, c):\n        l.append(2)\n    elif ch3(q, b) and ch1(q, b) and (z == a - b / q * p or x == c - b / q * r):\n        l.append(2)\n    elif ch3(p, a) and ch1(p, a) and (y == c - a / p * r or z == b - a / p * q):\n        l.append(2)\n    elif ch3(r, c) and ch1(r, c) and (x == b - c / r * q or y == a - c / r * p):\n        l.append(2)\n    elif ch5(p - q, a - b, q - r, b - c, p - r, a - c):\n        l.append(2)\n    elif ch2(p - q, a - b, r, c) or ch2(q - r, b - c, p, a) or ch2(p - r, a - c, q, b):\n        l.append(2)\n    elif ch6(p - q, a - b, a, p, r, c) or ch6(p - r, a - c, a, p, q, b) or ch6(q - r, b - c, b, q, p, a):\n        l.append(2)\n    elif ch7(p, a, q, b, r, c) or ch7(q, b, r, c, p, a) or ch7(r, c, p, a, q, b):\n        l.append(2)\n    elif ch8(p - q, a - b, r, c, p, a) or ch8(p - r, a - c, q, b, p, a) or ch8(q - r, b - c, p, a, q, b):\n        l.append(2)\n    elif a == 0 and b == c or (b == 0 and a == c) or (c == 0 and a == b):\n        l.append(2)\n    elif abs(a) - abs(p) == abs(b) - abs(q) == abs(c) - abs(r):\n        ans = abs(a) - abs(p)\n        tp = p + ans\n        tq = q + ans\n        tr = r + ans\n        for _ in range(2):\n            tp *= -1\n            for _ in range(2):\n                tq *= -1\n                for _ in range(2):\n                    tr *= -1\n                    if tp == a and tq == b and (tr == c):\n                        l.append(2)\n        tp = p - ans\n        tq = q - ans\n        tr = r - ans\n        for _ in range(2):\n            tp *= -1\n            for _ in range(2):\n                tq *= -1\n                for _ in range(2):\n                    tr *= -1\n                    if tp == a and tq == b and (tr == c):\n                        l.append(2)\n    tp = p\n    tq = q\n    tr = r\n    for _ in range(2):\n        tp *= -1\n        for _ in range(2):\n            tq *= -1\n            for _ in range(2):\n                tr *= -1\n                if a - tp == b - tq == c - tr:\n                    l.append(2)\n    li = [p, q, r]\n    li2 = [p, q, r]\n    fl = []\n    ch9(0, li)\n    for i in fl:\n        x = a - i[0]\n        y = b - i[1]\n        z = c - i[2]\n        if x == y and z == 0 or (x == z and y == 0) or (y == z and x == 0):\n            l.append(2)\n    print(min(l))", "def eq_solve(v0, v1, u0, u1):\n    den = u0 - v0\n    num = u1 - v1\n    if den != 0:\n        return num // den\n    return 1\n\ndef solve(p, q, r, a, b, c, rs):\n    if p == a and q == b and (r == c):\n        return rs\n    if rs >= 2:\n        return 3\n    res = 3\n    adds = [a - p, b - q, c - r]\n    muls = []\n    if p != 0:\n        muls.append(a // p)\n    if q != 0:\n        muls.append(b // q)\n    if r != 0:\n        muls.append(c // r)\n    muls.append(eq_solve(p, a, q, b))\n    muls.append(eq_solve(p, a, r, c))\n    muls.append(eq_solve(q, b, r, c))\n    msks = 2 ** 3\n    for msk in range(msks):\n        for add in adds:\n            np = p\n            nq = q\n            nr = r\n            if msk & 1 > 0:\n                np += add\n            if msk & 2 > 0:\n                nq += add\n            if msk & 4 > 0:\n                nr += add\n            res = min(res, solve(np, nq, nr, a, b, c, rs + 1))\n        for mul in muls:\n            np = p\n            nq = q\n            nr = r\n            if msk & 1 > 0:\n                np *= mul\n            if msk & 2 > 0:\n                nq *= mul\n            if msk & 4 > 0:\n                nr *= mul\n            res = min(res, solve(np, nq, nr, a, b, c, rs + 1))\n    return res\nt = int(input())\nfor q in range(t):\n    (p, q, r) = map(int, input().split())\n    (a, b, c) = map(int, input().split())\n    ans = solve(p, q, r, a, b, c, 0)\n    print(ans)", "def get_x(a1, b1, a2, b2):\n    x = a2 - a1\n    y = b2 - b1\n    return y // x if x != 0 and y % x == 0 else 0\n\ndef add(t, o, a):\n    return tuple(map(lambda x, y: x + a if y else x, t, o))\n\ndef mult(t, o, m):\n    return tuple(map(lambda x, y: x * m if y else x, t, o))\n\ndef solve(s, e, ops=0):\n    if s == e:\n        return ops\n    elif ops >= 2:\n        return 3\n    res = 3\n    diffs = []\n    mults = []\n    for i in range(3):\n        diffs.append(e[i] - s[i])\n        if s[i] != 0 and e[i] % s[i] == 0:\n            mults.append(e[i] // s[i])\n        for j in range(i + 1, 3):\n            x = get_x(s[i], e[i], s[j], e[j])\n            mults.append(x)\n    for i in range(1, 8):\n        o = ((4 & i) >> 2, (2 & i) >> 1, 1 & i)\n        for d in diffs:\n            t = add(s, o, d)\n            res = min(res, solve(t, e, ops + 1))\n        for m in mults:\n            t = mult(s, o, m)\n            res = min(res, solve(t, e, ops + 1))\n    return res\nfor t in range(int(input().strip())):\n    s = tuple(map(int, input().strip().split()))\n    e = tuple(map(int, input().strip().split()))\n    print(solve(s, e, 0))", "global aa, bb, cc, xx, yy, zz\n\ndef isZero(a, b, c, x, y, z):\n    return a == x and b == y and (c == z)\n\ndef isIT(a, b, c, x, y, z, d):\n    if isZero(a * d, b, c, x, y, z):\n        return True\n    if isZero(a, b * d, c, x, y, z):\n        return True\n    if isZero(a, b, c * d, x, y, z):\n        return True\n    if isZero(a * d, b * d, c, x, y, z):\n        return True\n    if isZero(a * d, b, c * d, x, y, z):\n        return True\n    if isZero(a * d, b * d, c * d, x, y, z):\n        return True\n    if isZero(a, b * d, c * d, x, y, z):\n        return True\n    return False\n\ndef isOne(a, b, c, x, y, z):\n    if a != 0:\n        if isIT(a, b, c, x, y, z, x // a):\n            return True\n    if b != 0:\n        if isIT(a, b, c, x, y, z, y // b):\n            return True\n    if c != 0:\n        if isIT(a, b, c, x, y, z, z // c):\n            return True\n    l = [0, 0, 0]\n    l[0] = x - a\n    l[1] = y - b\n    l[2] = z - c\n    if l[0] == l[1] and l[1] == l[2] or (l[0] == l[1] and (l[2] == 0 if l[0] != 0 else True)) or (l[0] == l[2] and (l[1] == 0 if l[0] != 0 else True)) or (l[1] == l[2] and (l[0] == 0 if l[1] != 0 else True)):\n        return True\n    return False\n\ndef difSum(a, b, c, x, y, z):\n    l = [x - a, y - b, z - c]\n    for i in range(3):\n        d = l[i]\n        if isOne(a + d, b, c, x, y, z):\n            return True\n        if isOne(a + d, b + d, c, x, y, z):\n            return True\n        if isOne(a + d, b, c + d, x, y, z):\n            return True\n        if isOne(a + d, b + d, c + d, x, y, z):\n            return True\n        if isOne(a, b + d, c + d, x, y, z):\n            return True\n        if isOne(a, b + d, c, x, y, z):\n            return True\n        if isOne(a, b, c + d, x, y, z):\n            return True\n    return False\n\ndef difMul(a, b, c, x, y, z):\n    l = [x // a if a != 0 else 0, y // b if b != 0 else 0, z // c if c != 0 else 0, 0]\n    for i in range(4):\n        d = l[i]\n        if isOne(a * d, b, c, x, y, z):\n            return True\n        if isOne(a * d, b * d, c, x, y, z):\n            return True\n        if isOne(a * d, b, c * d, x, y, z):\n            return True\n        if isOne(a * d, b * d, c * d, x, y, z):\n            return True\n        if isOne(a, b * d, c * d, x, y, z):\n            return True\n        if isOne(a, b * d, c, x, y, z):\n            return True\n        if isOne(a, b, c * d, x, y, z):\n            return True\n    return False\n\ndef mulSum(a, b, c, x, y, z):\n    if a - b != 0:\n        if (x - y) % (a - b) != 0:\n            return False\n        X = (x - y) // (a - b)\n        Y = x - a * X\n        if c * X + Y == z or c * X == z or c + Y == z:\n            return True\n    if b - a != 0:\n        if (y - x) % (b - a) != 0:\n            return False\n        X = (y - x) // (b - a)\n        Y = x - a * X\n        if c * X + Y == z or c * X == z or c + Y == z:\n            return True\n    return False\n\ndef difMulSum(a, b, c, x, y, z):\n    if mulSum(a, b, c, x, y, z):\n        return True\n    if mulSum(a, c, b, x, z, y):\n        return True\n    if mulSum(b, c, a, y, z, x):\n        return True\n    return False\n\ndef isTwo(a, b, c, x, y, z):\n    if x == a or y == b or z == c:\n        return True\n    if difSum(aa, bb, cc, xx, yy, zz):\n        return True\n    if difMul(aa, bb, cc, xx, yy, zz):\n        return True\n    if difMulSum(aa, bb, cc, xx, yy, zz):\n        return True\n    return False\nT = int(input())\nfor _ in range(T):\n    (aa, bb, cc) = map(int, input().split())\n    (xx, yy, zz) = map(int, input().split())\n    if isZero(aa, bb, cc, xx, yy, zz):\n        print(0)\n    elif isOne(aa, bb, cc, xx, yy, zz):\n        print(1)\n    elif isTwo(aa, bb, cc, xx, yy, zz):\n        print(2)\n    else:\n        print(3)", "def get_x(a1, b1, a2, b2):\n    x = a2 - a1\n    y = b2 - b1\n    return y // x if x != 0 and y % x == 0 else 0\n\ndef add(t, o, a):\n    return tuple(map(lambda x, y: x + a if y else x, t, o))\n\ndef mult(t, o, m):\n    return tuple(map(lambda x, y: x * m if y else x, t, o))\n\ndef solve(s, e, ops=0):\n    if s == e:\n        return ops\n    elif ops >= 2:\n        return 3\n    res = 3\n    diffs = []\n    mults = []\n    for i in range(3):\n        diffs.append(e[i] - s[i])\n        if s[i] != 0 and e[i] % s[i] == 0:\n            mults.append(e[i] // s[i])\n        for j in range(i + 1, 3):\n            x = get_x(s[i], e[i], s[j], e[j])\n            mults.append(x)\n    for i in range(1, 8):\n        o = ((4 & i) >> 2, (2 & i) >> 1, 1 & i)\n        for d in diffs:\n            t = add(s, o, d)\n            res = min(res, solve(t, e, ops + 1))\n        for m in mults:\n            t = mult(s, o, m)\n            res = min(res, solve(t, e, ops + 1))\n    return res\nfor t in range(int(input().strip())):\n    s = tuple(map(int, input().strip().split()))\n    e = tuple(map(int, input().strip().split()))\n    print(solve(s, e, 0))", "def checkpoint1(p, q, r, a, b, c):\n    if p == a and b - q == c - r:\n        return True\n    if q == b and a - p == c - r:\n        return True\n    if c == r and a - p == b - q:\n        return True\n    if p == a and q == b:\n        return True\n    if p == a and c == r:\n        return True\n    if c == r and b == q:\n        return True\n    if a - p == b - q and a - p == c - r:\n        return True\n    if q != 0 and r != 0 and (b % q == 0) and (c % r == 0) and (p == a) and (b / q == c / r):\n        return True\n    if p != 0 and r != 0 and (a % p == 0) and (c % r == 0) and (q == b) and (a / p == c / r):\n        return True\n    if p != 0 and q != 0 and (a % p == 0) and (b % q == 0) and (c == r) and (a / p == b / q):\n        return True\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0) and (a / p == b / q) and (a / p == c / r):\n        return True\n    return False\n\ndef checkpoint2(p, q, r, a, b, c):\n    x1 = a - p\n    y1 = b - q\n    z1 = c - r\n    if p == a or q == b or r == c:\n        return True\n    if a - p == b - q or b - q == c - r or c - r == a - p:\n        return True\n    if p != 0 and q != 0 and (a % p == 0 and b % q == 0) and (a / p == b / q):\n        return True\n    if p != 0 and r != 0 and (a % p == 0 and c % r == 0) and (a / p == c / r):\n        return True\n    if q != 0 and r != 0 and (b % q == 0 and c % r == 0) and (b / q == c / r):\n        return True\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0) and (a / p * b / q == c / r or a / p * c / r == b / q or b / q * c / r == a / p):\n        return True\n    if x1 + y1 == z1 or x1 + z1 == y1 or y1 + z1 == x1:\n        return True\n    if q + x1 != 0 and r != 0 and (b % (q + x1) == 0) and (c % r == 0) and (b / (q + x1) == c / r):\n        return True\n    if p != 0 and a % p == 0 and (b - q * a / p == c - r):\n        return True\n    if q + z1 != 0 and p != 0 and (b % (q + z1) == 0) and (a % p == 0) and (b / (q + z1) == a / p):\n        return True\n    if r != 0 and c % r == 0 and (b - q * c / r == a - p):\n        return True\n    if p + y1 != 0 and r != 0 and (a % (p + y1) == 0) and (c % r == 0) and (a / (p + y1) == c / r):\n        return True\n    if q != 0 and b % q == 0 and (a - p * b / q == c - r):\n        return True\n    if p + z1 != 0 and q != 0 and (a % (p + z1) == 0) and (b % q == 0) and (a / (p + z1) == b / q):\n        return True\n    if r != 0 and c % r == 0 and (a - p * c / r == b - q):\n        return True\n    if r + y1 != 0 and p != 0 and (c % (r + y1) == 0) and (a % p == 0) and (c / (r + y1) == a / p):\n        return True\n    if q != 0 and b % q == 0 and (c - r * b / q == a - p):\n        return True\n    if r + x1 != 0 and q != 0 and (c % (r + x1) == 0) and (b % q == 0) and (c / (r + x1) == b / q):\n        return True\n    if p != 0 and a % p == 0 and (c - r * a / p == b - q):\n        return True\n    if p + z1 != 0 and q + z1 != 0 and (a % (p + z1) == 0) and (b % (q + z1) == 0) and (a / (p + z1) == b / (q + z1)):\n        return True\n    if r != 0 and c % r == 0 and (a - p * c / r == b - q * c / r):\n        return True\n    if p + y1 != 0 and r + y1 != 0 and (a % (p + y1) == 0) and (c % (r + y1) == 0) and (a / (p + y1) == c / (r + y1)):\n        return True\n    if q != 0 and b % q == 0 and (a - p * b / q == c - r * b / q):\n        return True\n    if q + x1 != 0 and r + x1 != 0 and (b % (q + x1) == 0) and (c % (r + x1) == 0) and (b / (q + x1) == c / (r + x1)):\n        return True\n    if p != 0 and a % p == 0 and (b - q * a / p == c - r * a / p):\n        return True\n    if r != 0 and c % r == 0 and (c / r != 0) and (a % (c / r) == 0) and (b % (c / r) == 0) and (a / (c / r) - p == b / (c / r) - q):\n        return True\n    if p != 0 and q != 0 and ((a - z1) % p == 0) and ((b - z1) % q == 0) and ((a - z1) / p == (b - z1) / q):\n        return True\n    if q != 0 and b % q == 0 and (b / q != 0) and (a % (b / q) == 0) and (c % (b / q) == 0) and (a / (b / q) - p == c / (b / q) - r):\n        return True\n    if p != 0 and r != 0 and ((a - y1) % p == 0) and ((c - y1) % r == 0) and ((a - y1) / p == (c - y1) / r):\n        return True\n    if p != 0 and a % p == 0 and (a / p != 0) and (b % (a / p) == 0) and (c % (a / p) == 0) and (b / (a / p) - q == c / (a / p) - r):\n        return True\n    if q != 0 and r != 0 and ((b - x1) % q == 0) and ((c - x1) % r == 0) and ((b - x1) / q == (c - x1) / r):\n        return True\n    if q - p != 0 and r - q != 0 and ((b - a) % (q - p) == 0) and ((c - b) % (r - q) == 0) and ((b - a) / (q - p) == (c - b) / (r - q)):\n        return True\n    return False\ntest = int(input())\nfor _ in range(test):\n    (x1, y1, z1) = [int(x) for x in input().split()]\n    (a, b, c) = [int(x) for x in input().split()]\n    if a == x1 and b == y1 and (c == z1):\n        print(0)\n    elif checkpoint1(x1, y1, z1, a, b, c):\n        print(1)\n    elif checkpoint2(x1, y1, z1, a, b, c):\n        print(2)\n    else:\n        print(3)", "def is_integer_num(n):\n    if isinstance(n, int):\n        return True\n    if isinstance(n, float):\n        return n.is_integer()\n    return False\nfor k in range(int(input())):\n    l = [int(p) for p in input().split()]\n    d = [int(p) for p in input().split()]\n    (a, c, q, b, p, r) = (l[0], l[1], l[2], d[0], d[1], d[2])\n    if l == d:\n        print(0)\n        continue\n    if l[0] != 0 and l[1] != 0 and (l[2] != 0):\n        if d[0] == l[0] and d[1] == l[1] or (d[0] == l[0] and d[2] == l[2]) or (d[2] == l[2] and d[1] == l[1]):\n            print(1)\n        elif d[0] == l[0] or d[1] == l[1] or d[2] == l[2]:\n            if d[0] == l[0]:\n                if d[2] + l[1] == d[1] + l[2] or (d[1] / l[1] == d[2] / l[2] and is_integer_num(d[1] / l[1])):\n                    print(1)\n                else:\n                    print(2)\n            elif d[1] == l[1]:\n                if d[2] + l[0] == d[0] + l[2] or (d[0] * l[2] == d[2] * l[0] and is_integer_num(d[0] / l[0])):\n                    print(1)\n                else:\n                    print(2)\n            elif d[2] == l[2]:\n                if d[0] + l[1] == d[1] + l[0] or (d[0] * l[1] == d[1] * l[0] and is_integer_num(d[0] / l[0])):\n                    print(1)\n                else:\n                    print(2)\n        elif d[0] + l[1] == d[1] + l[0] and d[0] + l[2] == d[2] + l[0] or ((d[0] * l[1] == d[1] * l[0] and is_integer_num(d[0] / l[0])) and (d[0] * l[2] == d[2] * l[0] and is_integer_num(d[0] / l[0]))):\n            print(1)\n        elif (d[0] + l[1] == d[1] + l[0] or d[0] + l[2] == d[2] + l[0] or d[1] + l[2] == d[2] + l[1]) or (d[0] * l[1] == d[1] * l[0] and is_integer_num(d[0] / l[0]) or (d[0] * l[2] == d[2] * l[0] and is_integer_num(d[0] / l[0])) or (d[1] * l[2] == d[2] * l[1] and is_integer_num(d[1] / l[1]))):\n            print(2)\n        else:\n            m = [[l[0], d[0], l[1], d[1], l[2], d[2]], [l[0], d[0], l[2], d[2], l[1], d[1]], [l[1], d[1], l[0], d[0], l[2], d[2]], [l[1], d[1], l[2], d[2], l[0], d[0]], [l[2], d[2], l[1], d[1], l[0], d[0]], [l[2], d[2], l[0], d[0], l[1], d[1]]]\n            x = 0\n            for (a, b, c, p, q, r) in m:\n                flag = 0\n                flag1 = 0\n                if a != c:\n                    multiply = (b - p) / (a - c)\n                    if b != p:\n                        plus1 = b / multiply - a\n                    else:\n                        plus1 = -1\n                        flag1 = 1\n                    plus2 = b - a * multiply\n                else:\n                    multiply = -1\n                    plus1 = -1\n                    plus2 = -1\n                    flag = 1\n                if (c + (b - a)) * r == q * p and is_integer_num(r / q) or (c * r + q * (b - a) == q * p and is_integer_num(r / q)) or (c * b * r == a * q * p and is_integer_num(r / q) and is_integer_num(b / a)) or (c + (b - a) + (q - r) == p):\n                    x = 1\n                    print(2)\n                    break\n                elif (q + plus1 == r and is_integer_num(plus1) and is_integer_num(multiply) and (flag1 == 0) or (q + plus2 == r and is_integer_num(plus2) and is_integer_num(multiply)) or (q * multiply == r and is_integer_num(multiply) and (is_integer_num(plus1) or is_integer_num(plus2)))) and flag == 0:\n                    x = 1\n                    print(2)\n                    break\n                elif ((q + plus1) * multiply == r and is_integer_num(plus1) and is_integer_num(multiply) and (flag1 == 0) or (q * multiply + plus2 == r and is_integer_num(plus2) and is_integer_num(multiply)) or (q * multiply == r and is_integer_num(multiply) and (is_integer_num(plus1) or is_integer_num(plus2)))) and flag == 0:\n                    x = 1\n                    print(2)\n                    break\n            if x == 0:\n                print(3)\n    elif l[0] == 0 and l[1] == 0 and (l[2] == 0):\n        if d[0] == l[0] and d[1] == l[1] or (d[0] == l[0] and d[2] == l[2]) or (d[2] == l[2] and d[1] == l[1]):\n            print(1)\n        elif d[0] == l[0] or d[1] == l[1] or d[2] == l[2]:\n            if d[0] == l[0]:\n                if d[2] + l[1] == d[1] + l[2] or (d[1] * l[2] == d[2] * l[1] and (l[2] != 0 or l[1] != 0)):\n                    print(1)\n                else:\n                    print(2)\n            elif d[1] == l[1]:\n                if d[2] + l[0] == d[0] + l[2] or (d[0] * l[2] == d[2] * l[0] and (l[2] != 0 or l[0] != 0)):\n                    print(1)\n                else:\n                    print(2)\n            elif d[2] == l[2]:\n                if d[0] + l[1] == d[1] + l[0] or (d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0)):\n                    print(1)\n                else:\n                    print(2)\n        elif d[0] + l[1] == d[1] + l[0] and d[0] + l[2] == d[2] + l[0] or ((d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0)) and (d[0] * l[2] == d[2] * l[0] and (l[0] != 0 or l[2] != 0))):\n            print(1)\n        elif (d[0] + l[1] == d[1] + l[0] or d[0] + l[2] == d[2] + l[0] or d[1] + l[2] == d[2] + l[1]) or (d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0) or (d[0] * l[2] == d[2] * l[0] and (l[0] != 0 or l[2] != 0)) or (d[1] * l[2] == d[2] * l[1] and (l[2] != 0 or l[1] != 0))):\n            print(2)\n        elif a + (p - c) + (r - q) == b or c + (b - a) + (r - q) == p or q + (p - c) + (b - a) == r:\n            print(2)\n        else:\n            m = [[l[0], d[0], l[1], d[1], l[2], d[2]], [l[0], d[0], l[2], d[2], l[1], d[1]], [l[1], d[1], l[0], d[0], l[2], d[2]], [l[1], d[1], l[2], d[2], l[0], d[0]], [l[2], d[2], l[1], d[1], l[0], d[0]], [l[2], d[2], l[0], d[0], l[1], d[1]]]\n            x = 0\n            for (a, b, c, p, q, r) in m:\n                flag = 0\n                flag1 = 0\n                if a != c:\n                    multiply = (b - p) / (a - c)\n                    if b != p:\n                        plus1 = b / multiply - a\n                    else:\n                        plus1 = -1\n                        flag1 = 1\n                    plus2 = b - a * multiply\n                else:\n                    multiply = -1\n                    plus1 = -1\n                    plus2 = -1\n                    flag = 1\n                if (q + plus1 == r and is_integer_num(plus1) and (flag1 == 0) or (q + plus2 == r and is_integer_num(plus2)) or (q * multiply == r and is_integer_num(multiply) and (is_integer_num(plus1) or is_integer_num(plus2)))) and flag == 0:\n                    x = 1\n                    print(2)\n                    break\n                elif ((q + plus1) * multiply == r and is_integer_num(plus1) and is_integer_num(multiply) and (flag1 == 0) or (q * multiply + plus2 == r and is_integer_num(plus2) and is_integer_num(multiply)) or (q * multiply == r and is_integer_num(multiply) and (is_integer_num(plus1) or is_integer_num(plus2)))) and flag == 0:\n                    x = 1\n                    print(2)\n                    break\n            if x == 0:\n                print(3)\n    elif l[1] == 0 and l[2] == 0:\n        if d[0] == l[0] and d[1] == l[1] or (d[0] == l[0] and d[2] == l[2]) or (d[2] == l[2] and d[1] == l[1]):\n            print(1)\n        elif d[0] == l[0] or d[1] == l[1] or d[2] == l[2]:\n            if d[0] == l[0]:\n                if d[2] + l[1] == d[1] + l[2] or (d[1] * l[2] == d[2] * l[1] and (l[2] != 0 or l[1] != 0)):\n                    print(1)\n                else:\n                    print(2)\n            elif d[1] == l[1]:\n                if d[2] + l[0] == d[0] + l[2] or (d[0] * l[2] == d[2] * l[0] and (l[2] != 0 or l[0] != 0) and is_integer_num(d[0] / l[0])):\n                    print(1)\n                else:\n                    print(2)\n            elif d[2] == l[2]:\n                if d[0] + l[1] == d[1] + l[0] or (d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0) and is_integer_num(d[0] / l[0])):\n                    print(1)\n                else:\n                    print(2)\n        elif d[0] + l[1] == d[1] + l[0] and d[0] + l[2] == d[2] + l[0] or ((d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0) and is_integer_num(d[0] / l[0])) and (d[0] * l[2] == d[2] * l[0] and (l[0] != 0 or l[2] != 0) and is_integer_num(d[0] / l[0]))):\n            print(1)\n        elif (d[0] + l[1] == d[1] + l[0] or d[0] + l[2] == d[2] + l[0] or d[1] + l[2] == d[2] + l[1]) or (d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0) and is_integer_num(d[0] / l[0]) or (d[0] * l[2] == d[2] * l[0] and (l[0] != 0 or l[2] != 0) and is_integer_num(d[0] / l[0])) or (d[1] * l[2] == d[2] * l[1] and (l[2] != 0 or l[1] != 0))):\n            print(2)\n        elif (c + (r - q)) * (b / a) == p and is_integer_num(b / a) or ((q + (p - c)) * (b / a) == r and is_integer_num(b / a)) or (c * (b / a) + (r - q) == p and is_integer_num(b / a)) or (q * (b / a) + (p - c) == r and is_integer_num(b / a)) or (a + (p - c) + (r - q) == b) or (c + (b - a) + (r - q) == p) or (q + (p - c) + (b - a) == r):\n            print(2)\n        else:\n            m = [[l[0], d[0], l[1], d[1], l[2], d[2]], [l[0], d[0], l[2], d[2], l[1], d[1]], [l[1], d[1], l[0], d[0], l[2], d[2]], [l[1], d[1], l[2], d[2], l[0], d[0]], [l[2], d[2], l[1], d[1], l[0], d[0]], [l[2], d[2], l[0], d[0], l[1], d[1]]]\n            x = 0\n            for (a, b, c, p, q, r) in m:\n                flag = 0\n                flag1 = 0\n                if a != c:\n                    multiply = (b - p) / (a - c)\n                    if b != p:\n                        plus1 = b / multiply - a\n                    else:\n                        plus1 = -1\n                        flag1 = 1\n                    plus2 = b - a * multiply\n                else:\n                    multiply = -1\n                    plus1 = -1\n                    plus2 = -1\n                    flag = 1\n                if (q + plus1 == r and is_integer_num(plus1) and is_integer_num(multiply) and (flag1 == 0) or (q + plus2 == r and is_integer_num(plus2) and is_integer_num(multiply)) or (q * multiply == r and is_integer_num(multiply) and (is_integer_num(plus2) or is_integer_num(plus1)))) and flag == 0:\n                    x = 1\n                    print(2)\n                    break\n                elif ((q + plus1) * multiply == r and is_integer_num(plus1) and is_integer_num(multiply) and (flag1 == 0) or (q * multiply + plus2 == r and is_integer_num(plus2) and is_integer_num(multiply)) or (q * multiply == r and is_integer_num(multiply) and (is_integer_num(plus1) or is_integer_num(plus2)))) and flag == 0:\n                    x = 1\n                    print(2)\n                    break\n            if x == 0:\n                print(3)\n    elif l[0] == 0 and l[1] == 0:\n        if d[0] == l[0] and d[1] == l[1] or (d[0] == l[0] and d[2] == l[2]) or (d[2] == l[2] and d[1] == l[1]):\n            print(1)\n        elif d[0] == l[0] or d[1] == l[1] or d[2] == l[2]:\n            if d[0] == l[0]:\n                if d[2] + l[1] == d[1] + l[2] or (d[1] * l[2] == d[2] * l[1] and (l[2] != 0 or l[1] != 0) and is_integer_num(d[2] / l[2])):\n                    print(1)\n                else:\n                    print(2)\n            elif d[1] == l[1]:\n                if d[2] + l[0] == d[0] + l[2] or (d[0] * l[2] == d[2] * l[0] and (l[2] != 0 or l[0] != 0) and is_integer_num(d[2] / l[2])):\n                    print(1)\n                else:\n                    print(2)\n            elif d[2] == l[2]:\n                if d[0] + l[1] == d[1] + l[0] or (d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0)):\n                    print(1)\n                else:\n                    print(2)\n        elif d[0] + l[1] == d[1] + l[0] and d[0] + l[2] == d[2] + l[0] or ((d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0)) and (d[0] * l[2] == d[2] * l[0] and (l[0] != 0 or l[2] != 0) and is_integer_num(d[2] / l[2]))):\n            print(1)\n        elif (d[0] + l[1] == d[1] + l[0] or d[0] + l[2] == d[2] + l[0] or d[1] + l[2] == d[2] + l[1]) or (d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0) or (d[0] * l[2] == d[2] * l[0] and (l[0] != 0 or l[2] != 0) and is_integer_num(d[2] / l[2])) or (d[1] * l[2] == d[2] * l[1] and (l[2] != 0 or l[1] != 0) and is_integer_num(d[2] / l[2]))):\n            print(2)\n        elif (c + (b - a)) * (r / q) == p and is_integer_num(r / q) or ((a + (p - c)) * (r / q) == b and is_integer_num(r / q)) or (c * (r / q) + (b - a) == p and is_integer_num(r / q)) or (a * (r / q) + (p - c) == b and is_integer_num(r / q)) or (a + (p - c) + (r - q) == b) or (c + (b - a) + (r - q) == p) or (q + (p - c) + (b - a) == r):\n            print(2)\n        else:\n            m = [[l[0], d[0], l[1], d[1], l[2], d[2]], [l[0], d[0], l[2], d[2], l[1], d[1]], [l[1], d[1], l[0], d[0], l[2], d[2]], [l[1], d[1], l[2], d[2], l[0], d[0]], [l[2], d[2], l[1], d[1], l[0], d[0]], [l[2], d[2], l[0], d[0], l[1], d[1]]]\n            x = 0\n            for (a, b, c, p, q, r) in m:\n                flag = 0\n                flag1 = 0\n                if a != c:\n                    multiply = (b - p) / (a - c)\n                    if b != p:\n                        plus1 = b / multiply - a\n                    else:\n                        plus1 = -1\n                        flag1 = 1\n                    plus2 = b - a * multiply\n                else:\n                    multiply = -1\n                    plus1 = -1\n                    plus2 = -1\n                    flag = 1\n                if (q + plus1 == r and is_integer_num(plus1) and is_integer_num(multiply) and (flag1 == 0) or (q + plus2 == r and is_integer_num(plus2) and is_integer_num(multiply)) or (q * multiply == r and is_integer_num(multiply) and (is_integer_num(plus2) or is_integer_num(plus1)))) and flag == 0:\n                    x = 1\n                    print(2)\n                    break\n                elif ((q + plus1) * multiply == r and is_integer_num(plus1) and is_integer_num(multiply) and (flag1 == 0) or (q * multiply + plus2 == r and is_integer_num(plus2) and is_integer_num(multiply)) or (q * multiply == r and is_integer_num(multiply) and (is_integer_num(plus1) or is_integer_num(plus2)))) and flag == 0:\n                    x = 1\n                    print(2)\n                    break\n            if x == 0:\n                print(3)\n    elif l[0] == 0 and l[2] == 0:\n        if d[0] == l[0] and d[1] == l[1] or (d[0] == l[0] and d[2] == l[2]) or (d[2] == l[2] and d[1] == l[1]):\n            print(1)\n        elif d[0] == l[0] or d[1] == l[1] or d[2] == l[2]:\n            if d[0] == l[0]:\n                if d[2] + l[1] == d[1] + l[2] or (d[1] * l[2] == d[2] * l[1] and (l[2] != 0 or l[1] != 0) and is_integer_num(d[1] / l[1])):\n                    print(1)\n                else:\n                    print(2)\n            elif d[1] == l[1]:\n                if d[2] + l[0] == d[0] + l[2] or (d[0] * l[2] == d[2] * l[0] and (l[2] != 0 or l[0] != 0)):\n                    print(1)\n                else:\n                    print(2)\n            elif d[2] == l[2]:\n                if d[0] + l[1] == d[1] + l[0] or (d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0) and is_integer_num(d[1] / l[1])):\n                    print(1)\n                else:\n                    print(2)\n        elif d[0] + l[1] == d[1] + l[0] and d[0] + l[2] == d[2] + l[0] or ((d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0) and is_integer_num(d[1] / l[1])) and (d[0] * l[2] == d[2] * l[0] and (l[0] != 0 or l[2] != 0))):\n            print(1)\n        elif (d[0] + l[1] == d[1] + l[0] or d[0] + l[2] == d[2] + l[0] or d[1] + l[2] == d[2] + l[1]) or (d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0) and is_integer_num(d[1] / l[1]) or (d[0] * l[2] == d[2] * l[0] and (l[0] != 0 or l[2] != 0)) or (d[1] * l[2] == d[2] * l[1] and (l[2] != 0 or l[1] != 0) and is_integer_num(d[1] / l[1]))):\n            print(2)\n        elif (q + (b - a)) * (p / c) == r and is_integer_num(p / c) or ((a + (r - q)) * (p / c) == b and is_integer_num(p / c)) or (q * (p / c) + (b - a) == r and is_integer_num(p / c)) or (a * (p / c) + (r - q) == b and is_integer_num(p / c)) or (a + (p - c) + (r - q) == b) or (c + (b - a) + (r - q) == p) or (q + (p - c) + (b - a) == r):\n            print(2)\n        else:\n            m = [[l[0], d[0], l[1], d[1], l[2], d[2]], [l[0], d[0], l[2], d[2], l[1], d[1]], [l[1], d[1], l[0], d[0], l[2], d[2]], [l[1], d[1], l[2], d[2], l[0], d[0]], [l[2], d[2], l[1], d[1], l[0], d[0]], [l[2], d[2], l[0], d[0], l[1], d[1]]]\n            x = 0\n            for (a, b, c, p, q, r) in m:\n                flag = 0\n                flag1 = 0\n                if a != c:\n                    multiply = (b - p) / (a - c)\n                    if b != p:\n                        plus1 = b / multiply - a\n                    else:\n                        plus1 = -1\n                        flag1 = 1\n                    plus2 = b - a * multiply\n                else:\n                    multiply = -1\n                    plus1 = -1\n                    plus2 = -1\n                    flag = 1\n                if (q + plus1 == r and is_integer_num(plus1) and is_integer_num(multiply) and (flag1 == 0) or (q + plus2 == r and is_integer_num(plus2) and is_integer_num(multiply)) or (q * multiply == r and is_integer_num(multiply) and (is_integer_num(plus2) or is_integer_num(plus1)))) and flag == 0:\n                    x = 1\n                    print(2)\n                    break\n                elif ((q + plus1) * multiply == r and is_integer_num(plus1) and is_integer_num(multiply) and (flag1 == 0) or (q * multiply + plus2 == r and is_integer_num(plus2) and is_integer_num(multiply)) or (q * multiply == r and is_integer_num(multiply) and (is_integer_num(plus1) or is_integer_num(plus2)))) and flag == 0:\n                    x = 1\n                    print(2)\n                    break\n            if x == 0:\n                print(3)\n    elif l[0] == 0:\n        if d[0] == l[0] and d[1] == l[1] or (d[0] == l[0] and d[2] == l[2]) or (d[2] == l[2] and d[1] == l[1]):\n            print(1)\n        elif d[0] == l[0] or d[1] == l[1] or d[2] == l[2]:\n            if d[0] == l[0]:\n                if d[2] + l[1] == d[1] + l[2] or (d[1] * l[2] == d[2] * l[1] and (l[2] != 0 or l[1] != 0) and is_integer_num(d[1] / l[1])):\n                    print(1)\n                else:\n                    print(2)\n            elif d[1] == l[1]:\n                if d[2] + l[0] == d[0] + l[2] or (d[0] * l[2] == d[2] * l[0] and (l[2] != 0 or l[0] != 0) and is_integer_num(d[2] / l[2])):\n                    print(1)\n                else:\n                    print(2)\n            elif d[2] == l[2]:\n                if d[0] + l[1] == d[1] + l[0] or (d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0) and is_integer_num(d[1] / l[1])):\n                    print(1)\n                else:\n                    print(2)\n        elif d[0] + l[1] == d[1] + l[0] and d[0] + l[2] == d[2] + l[0] or ((d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0) and is_integer_num(d[1] / l[1])) and (d[0] * l[2] == d[2] * l[0] and (l[0] != 0 or l[2] != 0) and is_integer_num(d[2] / l[2]))):\n            print(1)\n        elif (d[0] + l[1] == d[1] + l[0] or d[0] + l[2] == d[2] + l[0] or d[1] + l[2] == d[2] + l[1]) or (d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0) and is_integer_num(d[1] / l[1]) or (d[0] * l[2] == d[2] * l[0] and (l[0] != 0 or l[2] != 0) and is_integer_num(d[2] / l[2])) or (d[1] * l[2] == d[2] * l[1] and (l[2] != 0 or l[1] != 0) and is_integer_num(d[1] / l[1]))):\n            print(2)\n        elif (c + (b - a)) * (r / q) == p and is_integer_num(r / q) or ((q + (b - a)) * (p / c) == r and is_integer_num(p / c)) or ((a + (p - c)) * (r / q) == b and is_integer_num(r / q)) or ((a + (r - q)) * (p / c) == b and is_integer_num(p / c)) or (c * (r / q) + (b - a) == p and is_integer_num(r / q)) or (q * (p / c) + (b - a) == r and is_integer_num(p / c)) or (a * (r / q) + (p - c) == b and is_integer_num(r / q)) or (a * (p / c) + (r - q) == b and is_integer_num(p / c)) or (a * (p / c) * (r / q) == b and is_integer_num(p / c) and is_integer_num(r / q)) or (a + (p - c) + (r - q) == b) or (c + (b - a) + (r - q) == p) or (q + (p - c) + (b - a) == r):\n            print(2)\n        else:\n            m = [[l[0], d[0], l[1], d[1], l[2], d[2]], [l[0], d[0], l[2], d[2], l[1], d[1]], [l[1], d[1], l[0], d[0], l[2], d[2]], [l[1], d[1], l[2], d[2], l[0], d[0]], [l[2], d[2], l[1], d[1], l[0], d[0]], [l[2], d[2], l[0], d[0], l[1], d[1]]]\n            x = 0\n            for (a, b, c, p, q, r) in m:\n                flag = 0\n                flag1 = 0\n                if a != c:\n                    multiply = (b - p) / (a - c)\n                    if b != p:\n                        plus1 = b / multiply - a\n                    else:\n                        plus1 = -1\n                        flag1 = 1\n                    plus2 = b - a * multiply\n                else:\n                    multiply = -1\n                    plus1 = -1\n                    plus2 = -1\n                    flag = 1\n                if (q + plus1 == r and is_integer_num(plus1) and is_integer_num(multiply) and (flag1 == 0) or (q + plus2 == r and is_integer_num(plus2) and is_integer_num(multiply)) or (q * multiply == r and is_integer_num(multiply) and (is_integer_num(plus2) or is_integer_num(plus1)))) and flag == 0:\n                    x = 1\n                    print(2)\n                    break\n                elif ((q + plus1) * multiply == r and is_integer_num(plus1) and is_integer_num(multiply) and (flag1 == 0) or (q * multiply + plus2 == r and is_integer_num(plus2) and is_integer_num(multiply)) or (q * multiply == r and is_integer_num(multiply) and (is_integer_num(plus1) or is_integer_num(plus2)))) and flag == 0:\n                    x = 1\n                    print(2)\n                    break\n            if x == 0:\n                print(3)\n    elif l[1] == 0:\n        if d[0] == l[0] and d[1] == l[1] or (d[0] == l[0] and d[2] == l[2]) or (d[2] == l[2] and d[1] == l[1]):\n            print(1)\n        elif d[0] == l[0] or d[1] == l[1] or d[2] == l[2]:\n            if d[0] == l[0]:\n                if d[2] + l[1] == d[1] + l[2] or (d[1] * l[2] == d[2] * l[1] and (l[2] != 0 or l[1] != 0) and is_integer_num(d[2] / l[2])):\n                    print(1)\n                else:\n                    print(2)\n            elif d[1] == l[1]:\n                if d[2] + l[0] == d[0] + l[2] or (d[0] * l[2] == d[2] * l[0] and (l[2] != 0 or l[0] != 0) and is_integer_num(d[0] / l[0])):\n                    print(1)\n                else:\n                    print(2)\n            elif d[2] == l[2]:\n                if d[0] + l[1] == d[1] + l[0] or (d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0) and is_integer_num(d[0] / l[0])):\n                    print(1)\n                else:\n                    print(2)\n        elif d[0] + l[1] == d[1] + l[0] and d[0] + l[2] == d[2] + l[0] or ((d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0) and is_integer_num(d[0] / l[0])) and (d[0] * l[2] == d[2] * l[0] and (l[0] != 0 or l[2] != 0) and is_integer_num(d[0] / l[0]))):\n            print(1)\n        elif (d[0] + l[1] == d[1] + l[0] or d[0] + l[2] == d[2] + l[0] or d[1] + l[2] == d[2] + l[1]) or (d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0) and is_integer_num(d[0] / l[0]) or (d[0] * l[2] == d[2] * l[0] and (l[0] != 0 or l[2] != 0) and is_integer_num(d[0] / l[0])) or (d[1] * l[2] == d[2] * l[1] and (l[2] != 0 or l[1] != 0) and is_integer_num(d[2] / l[2]))):\n            print(2)\n        elif (c + (b - a)) * (r / q) == p and is_integer_num(r / q) or ((a + (p - c)) * (r / q) == b and is_integer_num(r / q)) or ((c + (r - q)) * (b / a) == p and is_integer_num(b / a)) or ((q + (p - c)) * (b / a) == r and is_integer_num(b / a)) or (c * (r / q) + (b - a) == p and is_integer_num(r / q)) or (a * (r / q) + (p - c) == b and is_integer_num(r / q)) or (c * (b / a) + (r - q) == p and is_integer_num(b / a)) or (q * (b / a) + (p - c) == r and is_integer_num(b / a)) or (c * (b / a) * (r / q) == p and is_integer_num(b / a) and is_integer_num(r / q)) or (a + (p - c) + (r - q) == b) or (c + (b - a) + (r - q) == p) or (q + (p - c) + (b - a) == r):\n            print(2)\n        else:\n            m = [[l[0], d[0], l[1], d[1], l[2], d[2]], [l[0], d[0], l[2], d[2], l[1], d[1]], [l[1], d[1], l[0], d[0], l[2], d[2]], [l[1], d[1], l[2], d[2], l[0], d[0]], [l[2], d[2], l[1], d[1], l[0], d[0]], [l[2], d[2], l[0], d[0], l[1], d[1]]]\n            x = 0\n            for (a, b, c, p, q, r) in m:\n                flag = 0\n                flag1 = 0\n                if a != c:\n                    multiply = (b - p) / (a - c)\n                    if b != p:\n                        plus1 = b / multiply - a\n                    else:\n                        plus1 = -1\n                        flag1 = 1\n                    plus2 = b - a * multiply\n                else:\n                    multiply = -1\n                    plus1 = -1\n                    plus2 = -1\n                    flag = 1\n                if (q + plus1 == r and is_integer_num(plus1) and is_integer_num(multiply) and (flag1 == 0) or (q + plus2 == r and is_integer_num(plus2) and is_integer_num(multiply)) or (q * multiply == r and is_integer_num(multiply) and (is_integer_num(plus2) or is_integer_num(plus1)))) and flag == 0:\n                    x = 1\n                    print(2)\n                    break\n                elif ((q + plus1) * multiply == r and is_integer_num(plus1) and is_integer_num(multiply) and (flag1 == 0) or (q * multiply + plus2 == r and is_integer_num(plus2) and is_integer_num(multiply)) or (q * multiply == r and is_integer_num(multiply) and (is_integer_num(plus1) or is_integer_num(plus2)))) and flag == 0:\n                    x = 1\n                    print(2)\n                    break\n            if x == 0:\n                print(3)\n    elif l[2] == 0:\n        if d[0] == l[0] and d[1] == l[1] or (d[0] == l[0] and d[2] == l[2]) or (d[2] == l[2] and d[1] == l[1]):\n            print(1)\n        elif d[0] == l[0] or d[1] == l[1] or d[2] == l[2]:\n            if d[0] == l[0]:\n                if d[2] + l[1] == d[1] + l[2] or (d[1] * l[2] == d[2] * l[1] and (l[2] != 0 or l[1] != 0) and is_integer_num(d[1] / l[1])):\n                    print(1)\n                else:\n                    print(2)\n            elif d[1] == l[1]:\n                if d[2] + l[0] == d[0] + l[2] or (d[0] * l[2] == d[2] * l[0] and (l[2] != 0 or l[0] != 0) and is_integer_num(d[0] / l[0])):\n                    print(1)\n                else:\n                    print(2)\n            elif d[2] == l[2]:\n                if d[0] + l[1] == d[1] + l[0] or (d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0) and is_integer_num(d[0] / l[0])):\n                    print(1)\n                else:\n                    print(2)\n        elif d[0] + l[1] == d[1] + l[0] and d[0] + l[2] == d[2] + l[0] or ((d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0) and is_integer_num(d[0] / l[0])) and (d[0] * l[2] == d[2] * l[0] and (l[0] != 0 or l[2] != 0) and is_integer_num(d[0] / l[0]))):\n            print(1)\n        elif (d[0] + l[1] == d[1] + l[0] or d[0] + l[2] == d[2] + l[0] or d[1] + l[2] == d[2] + l[1]) or (d[0] * l[1] == d[1] * l[0] and (l[0] != 0 or l[1] != 0) and is_integer_num(d[0] / l[0]) or (d[0] * l[2] == d[2] * l[0] and (l[0] != 0 or l[2] != 0) and is_integer_num(d[0] / l[0])) or (d[1] * l[2] == d[2] * l[1] and (l[2] != 0 or l[1] != 0) and is_integer_num(d[1] / l[1]))):\n            print(2)\n        elif (q + (b - a)) * (p / c) == r and is_integer_num(p / c) or ((a + (r - q)) * (p / c) == b and is_integer_num(p / c)) or ((c + (r - q)) * (b / a) == p and is_integer_num(b / a)) or ((q + (p - c)) * (b / a) == r and is_integer_num(b / a)) or (q * (p / c) + (b - a) == r and is_integer_num(p / c)) or (a * (p / c) + (r - q) == b and is_integer_num(p / c)) or (c * (b / a) + (r - q) == p and is_integer_num(b / a)) or (q * (b / a) + (p - c) == r and is_integer_num(b / a)) or (q * (p / c) * (b / a) == r and is_integer_num(b / a) and is_integer_num(p / c)) or (a + (p - c) + (r - q) == b) or (c + (b - a) + (r - q) == p) or (q + (p - c) + (b - a) == r):\n            print(2)\n        else:\n            m = [[l[0], d[0], l[1], d[1], l[2], d[2]], [l[0], d[0], l[2], d[2], l[1], d[1]], [l[1], d[1], l[0], d[0], l[2], d[2]], [l[1], d[1], l[2], d[2], l[0], d[0]], [l[2], d[2], l[1], d[1], l[0], d[0]], [l[2], d[2], l[0], d[0], l[1], d[1]]]\n            x = 0\n            for (a, b, c, p, q, r) in m:\n                flag = 0\n                flag1 = 0\n                if a != c:\n                    multiply = (b - p) / (a - c)\n                    if b != p:\n                        plus1 = b / multiply - a\n                    else:\n                        plus1 = -1\n                        flag1 = 1\n                    plus2 = b - a * multiply\n                else:\n                    multiply = -1\n                    plus1 = -1\n                    plus2 = -1\n                    flag = 1\n                if (q + plus1 == r and is_integer_num(plus1) and is_integer_num(multiply) and (flag1 == 0) or (q + plus2 == r and is_integer_num(plus2) and is_integer_num(multiply)) or (q * multiply == r and is_integer_num(multiply) and (is_integer_num(plus1) or is_integer_num(plus2)))) and flag == 0:\n                    x = 1\n                    print(2)\n                    break\n                elif ((q + plus1) * multiply == r and is_integer_num(plus1) and is_integer_num(multiply) and (flag1 == 0) or (q * multiply + plus2 == r and is_integer_num(plus2) and is_integer_num(multiply)) or (q * multiply == r and is_integer_num(multiply) and (is_integer_num(plus1) or is_integer_num(plus2)))) and flag == 0:\n                    x = 1\n                    print(2)\n                    break\n            if x == 0:\n                print(3)", "def function1(p, q, r, a, b, c):\n    listA = []\n    listM = []\n    if p != a:\n        listA.append(a - p)\n        if p and a % p == 0:\n            listM.append(a // p)\n        else:\n            listM.append(None)\n    if q != b:\n        listA.append(b - q)\n        if q and b % q == 0:\n            listM.append(b // q)\n        else:\n            listM.append(None)\n    if r != c:\n        listA.append(c - r)\n        if r and c % r == 0:\n            listM.append(c // r)\n        else:\n            listM.append(None)\n    if len(listA) == 0:\n        return 0\n    elif len(listA) == 1:\n        return 1\n    elif len(listA) == 2:\n        if listA[0] == listA[1] or (listM[0] != None and listM[1] != None and (listM[0] == listM[1])):\n            return 1\n        else:\n            return 2\n    elif len(listA) == 3:\n        flag = 0\n        if listA[0] == listA[1] == listA[2] or (listM[0] != None and listM[1] != None and (listM[2] != None) and (listM[0] == listM[1] == listM[2])):\n            return 1\n            flag = -1\n        elif listA[0] == listA[1] or listA[1] == listA[2] or listA[0] == listA[2] or (listA[0] == listA[1] + listA[2]) or (listA[1] == listA[0] + listA[2]) or (listA[2] == listA[0] + listA[1]):\n            return 2\n            flag = -1\n        elif listM[0] != None and listM[1] != None and (listM[2] != None) and (listM[0] == listM[1] * listM[2] or listM[1] == listM[0] * listM[2] or listM[2] == listM[0] * listM[1]):\n            return 2\n            flag = -1\n        elif listM[0] != None and listM[1] != None and (listM[0] == listM[1]) or (listM[1] != None and listM[2] != None and (listM[1] == listM[2])) or (listM[0] != None and listM[2] != None and (listM[0] == listM[2])):\n            return 2\n            flag = -1\n        elif listM[0] != None and (b == q * listM[0] + listA[2] or c == r * listM[0] + listA[1] or b == (q + listA[2]) * listM[0] or (c == (r + listA[1]) * listM[0])):\n            return 2\n            flag = -1\n        elif listM[1] != None and (a == p * listM[1] + listA[2] or c == r * listM[1] + listA[0] or a == (p + listA[2]) * listM[1] or (c == (r + listA[0]) * listM[1])):\n            return 2\n            flag = -1\n        elif listM[0] != None and (b == q * listM[0] + listA[2] or c == r * listM[0] + listA[1] or b == (q + listA[2]) * listM[0] or (c == (r + listA[1]) * listM[0])):\n            return 2\n            flag = -1\n        elif listM[2] != None and (a == p * listM[2] + listA[1] or b == q * listM[2] + listA[0] or a == (p + listA[1]) * listM[2] or (b == (q + listA[0]) * listM[2])):\n            return 2\n            flag = -1\n        elif p - q and (a - b) % (p - q) == 0 and ((p * b - q * a) % (p - q) == 0) and (c == r * ((a - b) // (p - q)) + (p * b - q * a) // (p - q) or c == r * ((a - b) // (p - q)) or c == r + (p * b - q * a) // (p - q)):\n            return 2\n            flag = -1\n        elif p - q and a - b and ((a - b) % (p - q) == 0) and ((b * p - a * q) % (a - b) == 0) and (c == (r + (b * p - a * q) // (a - b)) * ((a - b) // (p - q)) or c == r * ((a - b) // (p - q)) or c == r + (b * p - a * q) // (a - b)):\n            return 2\n            flag = -1\n        (a, b, c) = (b, c, a)\n        (p, q, r) = (q, r, p)\n        if not flag and p - q and ((a - b) % (p - q) == 0) and ((p * b - q * a) % (p - q) == 0) and (c == r * ((a - b) // (p - q)) + (p * b - q * a) // (p - q) or c == r * ((a - b) // (p - q)) or c == r + (p * b - q * a) // (p - q)):\n            return 2\n            flag = -1\n        elif not flag and p - q and a - b and ((a - b) % (p - q) == 0) and ((b * p - a * q) % (a - b) == 0) and (c == (r + (b * p - a * q) // (a - b)) * ((a - b) // (p - q)) or c == r * ((a - b) // (p - q)) or c == r + (b * p - a * q) // (a - b)):\n            return 2\n            flag = -1\n        (a, b, c) = (b, c, a)\n        (p, q, r) = (q, r, p)\n        if not flag and p - q and ((a - b) % (p - q) == 0) and ((p * b - q * a) % (p - q) == 0) and (c == r * ((a - b) // (p - q)) + (p * b - q * a) // (p - q) or c == r * ((a - b) // (p - q)) or c == r + (p * b - q * a) // (p - q)):\n            return 2\n            flag = -1\n        elif not flag and p - q and a - b and ((a - b) % (p - q) == 0) and ((b * p - a * q) % (a - b) == 0) and (c == (r + (b * p - a * q) // (a - b)) * ((a - b) // (p - q)) or c == r * ((a - b) // (p - q)) or c == r + (b * p - a * q) // (a - b)):\n            return 2\n            flag = -1\n        if flag == 0:\n            return 3\nl1 = int(input())\nfor _ in range(l1):\n    (p, q, r) = map(int, input().split())\n    (a, b, c) = map(int, input().split())\n    temp1 = function1(p, q, r, a, b, c)\n    print(temp1)", "t = int(input())\nwhile t > 0:\n    li1 = [int(i) for i in input().split()]\n    li2 = [int(i) for i in input().split()]\n    s1 = set()\n    s2 = set()\n    (val, ans) = (0, 3)\n    for i in range(3):\n        if li1[i] == li2[i]:\n            val += 1\n    if val == 3:\n        ans = 0\n    elif val == 2:\n        ans = 1\n    else:\n        for i in range(3):\n            if li2[i] - li1[i] != 0:\n                s1.add(li2[i] - li1[i])\n            if li1[i] != 0 and li2[i] % li1[i] == 0 and (li2[i] // li1[i] != 1):\n                s2.add(li2[i] // li1[i])\n        temp = []\n        for i in s1:\n            for j in range(7):\n                temp = [li1[k] for k in range(3)]\n                if j == 0:\n                    temp[0] += i\n                    temp[1] += i\n                elif j == 1:\n                    temp[0] += i\n                    temp[2] += i\n                elif j == 2:\n                    temp[1] += i\n                    temp[2] += i\n                elif j == 3:\n                    temp[0] += i\n                    temp[1] += i\n                    temp[2] += i\n                elif j == 4:\n                    temp[0] += i\n                elif j == 5:\n                    temp[1] += i\n                elif j == 6:\n                    temp[2] += i\n                a = 0\n                for k in range(3):\n                    if temp[k] == li2[k]:\n                        a += 1\n                if a == 3:\n                    ans = 1\n                if a == 2:\n                    ans = min(ans, 2)\n                s3 = set()\n                for k in range(3):\n                    if temp[k] != 0 and li2[k] % temp[k] == 0 and (li2[k] // temp[k] != 1):\n                        s3.add(li2[k] // temp[k])\n                temp1 = []\n                for k in s3:\n                    for l in range(7):\n                        temp1 = [temp[m] for m in range(3)]\n                        if l == 0:\n                            temp1[0] *= k\n                            temp1[1] *= k\n                        elif l == 1:\n                            temp1[0] *= k\n                            temp1[2] *= k\n                        elif l == 2:\n                            temp1[1] *= k\n                            temp1[2] *= k\n                        elif l == 3:\n                            temp1[0] *= k\n                            temp1[1] *= k\n                            temp1[2] *= k\n                        elif l == 4:\n                            temp1[0] *= k\n                        elif l == 5:\n                            temp1[1] *= k\n                        elif l == 6:\n                            temp1[2] *= k\n                        for m in range(3):\n                            if li2[m] != temp1[m]:\n                                break\n                            if m == 2:\n                                ans = min(ans, 2)\n                s4 = set()\n                for k in range(3):\n                    if li2[k] - temp[k] != 0:\n                        s4.add(li2[k] - temp[k])\n                temp2 = []\n                for k in s4:\n                    for l in range(7):\n                        temp2 = [temp[m] for m in range(3)]\n                        if l == 0:\n                            temp2[0] += k\n                            temp2[1] += k\n                        elif l == 1:\n                            temp2[0] += k\n                            temp2[2] += k\n                        elif l == 2:\n                            temp2[1] += k\n                            temp2[2] += k\n                        elif l == 3:\n                            temp2[0] += k\n                            temp2[1] += k\n                            temp2[2] += k\n                        elif l == 4:\n                            temp2[0] += k\n                        elif l == 5:\n                            temp2[1] += k\n                        elif l == 6:\n                            temp2[2] += k\n                        for m in range(3):\n                            if li2[m] != temp2[m]:\n                                break\n                            if m == 2:\n                                ans = min(ans, 2)\n                s4.clear()\n                count = 0\n                for k in range(3):\n                    var = li2[k] - i\n                    if li1[k] != 0 and var % li1[k] == 0:\n                        if var // li1[k] != 1:\n                            s4.add(var // li1[k])\n                        count += 1\n                if len(s4) == 1 and count == 3:\n                    ans = min(ans, 2)\n        if ans == 3 or ans == 2:\n            d1 = li2[2] - li2[1]\n            d2 = li2[1] - li2[0]\n            d3 = li1[2] - li1[1]\n            d4 = li1[1] - li1[0]\n            d5 = li2[2] - li2[0]\n            d6 = li1[2] - li1[0]\n            if d3 != 0 and d4 != 0 and (d6 != 0) and (d1 % d3 == 0) and (d2 % d4 == 0) and (d5 % d6 == 0) and (d1 // d3 == d2 // d4) and (d1 // d3 == d5 // d6):\n                ans = min(ans, 2)\n            for i in s2:\n                s3 = set()\n                count = 0\n                for j in range(3):\n                    temp[j] = li2[j]\n                    if i != 0 and temp[j] % i == 0:\n                        temp[j] //= i\n                        temp[j] -= li1[j]\n                        if temp[j] != 0:\n                            s3.add(temp[j])\n                        count += 1\n                if len(s3) == 1 and count == 3:\n                    ans = min(ans, 2)\n            for i in s2:\n                for j in range(7):\n                    temp = [li1[k] for k in range(3)]\n                    if j == 0:\n                        temp[0] *= i\n                        temp[1] *= i\n                    elif j == 1:\n                        temp[0] *= i\n                        temp[2] *= i\n                    elif j == 2:\n                        temp[1] *= i\n                        temp[2] *= i\n                    elif j == 3:\n                        temp[0] *= i\n                        temp[1] *= i\n                        temp[2] *= i\n                    elif j == 4:\n                        temp[0] *= i\n                    elif j == 5:\n                        temp[1] *= i\n                    elif j == 6:\n                        temp[2] *= i\n                    a = 0\n                    for k in range(3):\n                        if temp[k] == li2[k]:\n                            a += 1\n                    if a == 3:\n                        ans = 1\n                    elif a == 2:\n                        ans = min(ans, 2)\n                    temp2 = []\n                    s4 = set()\n                    for k in range(3):\n                        if temp[k] != 0 and li2[k] % temp[k] == 0 and (li2[k] // temp[k] != 1):\n                            s4.add(li2[k] // temp[k])\n                    temp2 = []\n                    for k in s4:\n                        for l in range(7):\n                            temp2 = [temp[m] for m in range(3)]\n                            if l == 0:\n                                temp2[0] *= k\n                                temp2[1] *= k\n                            elif l == 1:\n                                temp2[0] *= k\n                                temp2[2] *= k\n                            elif l == 2:\n                                temp2[1] *= k\n                                temp2[2] *= k\n                            elif l == 3:\n                                temp2[0] *= k\n                                temp2[1] *= k\n                                temp2[2] *= k\n                            elif l == 4:\n                                temp2[0] *= k\n                            elif l == 5:\n                                temp2[1] *= k\n                            elif l == 6:\n                                temp2[2] *= k\n                            for m in range(3):\n                                if li2[m] != temp2[m]:\n                                    break\n                                if m == 2:\n                                    ans = min(ans, 2)\n                    s4.clear()\n                    for k in range(3):\n                        var = li2[k] - temp[k]\n                        if var != 0:\n                            s4.add(var)\n                    if len(s4) == 1:\n                        ans = min(ans, 2)\n    print(ans)\n    t -= 1", "def factors(v0, v1, u0, u1):\n    den = u0 - v0\n    num = u1 - v1\n    if den != 0:\n        return num // den\n    return 1\n\ndef solve(p, q, r, a, b, c, num):\n    if p == a and q == b and (r == c):\n        return num\n    if num >= 2:\n        return 3\n    best = 3\n    add_list = [a - p, b - q, c - r]\n    mul_list = []\n    if p != 0:\n        mul_list.append(a // p)\n    if q != 0:\n        mul_list.append(b // q)\n    if r != 0:\n        mul_list.append(c // r)\n    mul_list.append(factors(p, a, q, b))\n    mul_list.append(factors(p, a, r, c))\n    mul_list.append(factors(q, b, r, c))\n    m = 8\n    for i in range(m):\n        for add in add_list:\n            tp = p\n            tq = q\n            tr = r\n            if i & 1 > 0:\n                tp += add\n            if i & 2 > 0:\n                tq += add\n            if i & 4 > 0:\n                tr += add\n            best = min(best, solve(tp, tq, tr, a, b, c, num + 1))\n        for mul in mul_list:\n            tp = p\n            tq = q\n            tr = r\n            if i & 1 > 0:\n                tp *= mul\n            if i & 2 > 0:\n                tq *= mul\n            if i & 4 > 0:\n                tr *= mul\n            best = min(best, solve(tp, tq, tr, a, b, c, num + 1))\n    return best\nfor tc in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    (a, b, c) = map(int, input().split())\n    print(solve(p, q, r, a, b, c, 0))", "def gunc(a, d, b, e, c, f, d1, d2, d3):\n    zero = set()\n    if d1 != 0:\n        zero.add(d)\n    if d2 != 0:\n        zero.add(e)\n    if d3 != 0:\n        zero.add(f)\n    zero = list(zero)\n    if len(zero) == 1 and zero[0] == 0:\n        return 1\n    uni = set()\n    if d1 != 0 and a != 0 and (d % a == 0):\n        uni.add(d // a)\n    if d2 != 0 and b != 0 and (e % b == 0):\n        uni.add(e // b)\n    if d3 != 0 and c != 0 and (f % c == 0):\n        uni.add(f // c)\n    uni = list(uni)\n    if len(uni) == 1:\n        x = uni[0]\n        if d1 != 0 and d2 != 0 and (d3 != 0) and (a * x == d) and (b * x == e) and (c * x == f) or (d1 == 0 and d2 != 0 and (d3 != 0) and (b * x == e) and (c * x == f)) or (d2 == 0 and d3 != 0 and (d1 != 0) and (a * x == d) and (c * x == f)) or (d3 == 0 and d1 != 0 and (d2 != 0) and (a * x == d) and (b * x == e)):\n            return 1\n    return -1\n\ndef func1(d1, d2, d3):\n    if d1 == d2 or d2 == d3 or d3 == d1 or (d1 + d2 == d3) or (d2 + d3 == d1) or (d3 + d1 == d2) or (d1 == 0) or (d2 == 0) or (d3 == 0):\n        return 2\n    return -1\n\ndef func232(a, d, b, e, c, f):\n    x = b * d - a * e\n    if e - d != 0 and x % (e - d) == 0:\n        x = x // (e - d)\n        if a + x != 0 and d % (a + x) == 0:\n            y = d // (a + x)\n            if (a + x) * y == d and (b + x) * y == e and (c + x == f):\n                return 2\n    return -1\n\ndef func233(a, d, b, e, c, f):\n    x = b * d - a * e\n    if e - d != 0 and x % (e - d) == 0:\n        x = x // (e - d)\n        if a + x != 0 and d % (a + x) == 0:\n            y = d // (a + x)\n            if (a + x) * y == d and (b + x) * y == e and ((c + x) * y == f):\n                return 2\n    return -1\n\ndef func231(a, d, b, e, c, f):\n    x = e - b\n    if a + x != 0 and d % (a + x) == 0:\n        y = d // (a + x)\n        if (a + x) * y == d and b + x == e and (c + x == f):\n            return 2\n    return -1\n\ndef func213(a, d, b, e, c, f):\n    x = b * d - a * e\n    if e != 0 and x % e == 0:\n        x = x // e\n        if a + x != 0 and d % (a + x) == 0:\n            y = d // (a + x)\n            if (a + x) * y == d and b * y == e and (c * y == f):\n                return 2\n    return -1\n\ndef func222(a, d, b, e, c, f):\n    x = c * e - b * f\n    if f != 0 and x % f == 0 and (c != 0) and (f % c == 0):\n        x = x // f\n        y = f // c\n        if a + x == d and (b + x) * y == e and (c * y == f):\n            return 2\n    return -1\n\ndef func223(a, d, b, e, c, f):\n    x = b * d - a * e\n    if e - d != 0 and x % (e - d) == 0:\n        x = x // (e - d)\n        if a + x != 0 and d % (a + x) == 0:\n            y = d // (a + x)\n            if (a + x) * y == d and (b + x) * y == e and (c * y == f):\n                return 2\n    return -1\n\ndef func212(a, d, b, e, c, f):\n    if b != 0 and c != 0 and (e % b == 0) and (f % c == 0) and (e // b == f // c):\n        return 2\n    return -1\n\ndef func2(a, d, b, e, c, f):\n    if func212(a, d, b, e, c, f) == 2 or func212(a, d, c, f, b, e) == 2 or func212(b, e, a, d, c, f) == 2 or (func212(b, e, c, f, a, d) == 2) or (func212(c, f, a, d, b, e) == 2) or (func212(c, f, b, e, a, d) == 2):\n        return 2\n    if func213(a, d, b, e, c, f) == 2 or func213(a, d, c, f, b, e) == 2 or func213(b, e, a, d, c, f) == 2 or (func213(b, e, c, f, a, d) == 2) or (func213(c, f, a, d, b, e) == 2) or (func213(c, f, b, e, a, d) == 2):\n        return 2\n    if func222(a, d, b, e, c, f) == 2 or func222(a, d, c, f, b, e) == 2 or func222(b, e, a, d, c, f) == 2 or (func222(b, e, c, f, a, d) == 2) or (func222(c, f, a, d, b, e) == 2) or (func222(c, f, b, e, a, d) == 2):\n        return 2\n    if func223(a, d, b, e, c, f) == 2 or func223(a, d, c, f, b, e) == 2 or func223(b, e, a, d, c, f) == 2 or (func223(b, e, c, f, a, d) == 2) or (func223(c, f, a, d, b, e) == 2) or (func223(c, f, b, e, a, d) == 2):\n        return 2\n    if func231(a, d, b, e, c, f) == 2 or func231(a, d, c, f, b, e) == 2 or func231(b, e, a, d, c, f) == 2 or (func231(b, e, c, f, a, d) == 2) or (func231(c, f, a, d, b, e) == 2) or (func231(c, f, b, e, a, d) == 2):\n        return 2\n    if func232(a, d, b, e, c, f) == 2 or func232(a, d, c, f, b, e) == 2 or func232(b, e, a, d, c, f) == 2 or (func232(b, e, c, f, a, d) == 2) or (func232(c, f, a, d, b, e) == 2) or (func232(c, f, b, e, a, d) == 2):\n        return 2\n    if func233(a, d, b, e, c, f) == 2 or func233(a, d, c, f, b, e) == 2 or func233(b, e, a, d, c, f) == 2 or (func233(b, e, c, f, a, d) == 2) or (func233(c, f, a, d, b, e) == 2) or (func233(c, f, b, e, a, d) == 2):\n        return 2\n    return -1\n\ndef func312(a, d, b, e, c, f):\n    if a != 0 and d % a == 0 and (e - b == f - c):\n        return 2\n    return -1\n\ndef func313(a, d, b, e, c, f):\n    if a != 0 and (d + b - e) % a == 0:\n        x = (d + b - e) // a\n        y = f - c\n        if a * x + y == d and b + y == e and (c + y == f):\n            return 2\n    return -1\n\ndef func321(a, d, b, e, c, f):\n    if a != 0 and d % a == 0:\n        x = d // a\n        y = f - c\n        if a * x == d and b * x == e and (c + y == f):\n            return 2\n    return -1\n\ndef func322(a, d, b, e, c, f):\n    if a != 0 and d % a == 0:\n        x = d // a\n        y = f - c\n        if a * x == d and b * x + y == e and (c + y == f):\n            return 2\n    return -1\n\ndef func323(a, d, b, e, c, f):\n    if a - b != 0 and (d - e) % (a - b) == 0:\n        x = (d - e) // (a - b)\n        y = f - c\n        if a * x + y == d and b * x + y == e and (c + y == f):\n            return 2\n    return -1\n\ndef func331(a, d, b, e, c, f):\n    if b != 0 and e % b == 0:\n        x = e // b\n        y = d - a * x\n        if a * x + y == d and b * x == e and (c * x == f):\n            return 2\n    return -1\n\ndef func332(a, d, b, e, c, f):\n    if c != 0 and f % c == 0:\n        x = f // c\n        y = d - a * x\n        if a * x + y == d and b * x + y == e and (c * x == f):\n            return 2\n    return -1\n\ndef func333(a, d, b, e, c, f):\n    if a - b != 0 and (d - e) % (a - b) == 0:\n        x = (d - e) // (a - b)\n        y = d - a * x\n        if a * x + y == d and b * x + y == e and (c * x + y == f):\n            return 2\n    return -1\n\ndef func3(a, d, b, e, c, f):\n    if func312(a, d, b, e, c, f) == 2 or func312(a, d, c, f, b, e) == 2 or func312(b, e, a, d, c, f) == 2 or (func312(b, e, c, f, a, d) == 2) or (func312(c, f, a, d, b, e) == 2) or (func312(c, f, b, e, a, d) == 2):\n        return 2\n    if func313(a, d, b, e, c, f) == 2 or func313(a, d, c, f, b, e) == 2 or func313(b, e, a, d, c, f) == 2 or (func313(b, e, c, f, a, d) == 2) or (func313(c, f, a, d, b, e) == 2) or (func313(c, f, b, e, a, d) == 2):\n        return 2\n    if func321(a, d, b, e, c, f) == 2 or func321(a, d, c, f, b, e) == 2 or func321(b, e, a, d, c, f) == 2 or (func321(b, e, c, f, a, d) == 2) or (func321(c, f, a, d, b, e) == 2) or (func321(c, f, b, e, a, d) == 2):\n        return 2\n    if func322(a, d, b, e, c, f) == 2 or func322(a, d, c, f, b, e) == 2 or func322(b, e, a, d, c, f) == 2 or (func322(b, e, c, f, a, d) == 2) or (func322(c, f, a, d, b, e) == 2) or (func322(c, f, b, e, a, d) == 2):\n        return 2\n    if func323(a, d, b, e, c, f) == 2 or func323(a, d, c, f, b, e) == 2 or func323(b, e, a, d, c, f) == 2 or (func323(b, e, c, f, a, d) == 2) or (func323(c, f, a, d, b, e) == 2) or (func323(c, f, b, e, a, d) == 2):\n        return 2\n    if func331(a, d, b, e, c, f) == 2 or func331(a, d, c, f, b, e) == 2 or func331(b, e, a, d, c, f) == 2 or (func331(b, e, c, f, a, d) == 2) or (func331(c, f, a, d, b, e) == 2) or (func331(c, f, b, e, a, d) == 2):\n        return 2\n    if func332(a, d, b, e, c, f) == 2 or func332(a, d, c, f, b, e) == 2 or func332(b, e, a, d, c, f) == 2 or (func332(b, e, c, f, a, d) == 2) or (func332(c, f, a, d, b, e) == 2) or (func332(c, f, b, e, a, d) == 2):\n        return 2\n    if func333(a, d, b, e, c, f) == 2:\n        return 2\n    return -1\n\ndef func412(a, d, b, e, c, f):\n    if a != 0 and b != 0 and (c != 0) and (e % b == 0) and (f % c == 0) and (d % a == 0) and (e // b == f // c):\n        return 2\n    return -1\n\ndef func413(a, d, b, e, c, f):\n    if a != 0 and b != 0 and (c != 0) and (d % a == 0) and (e % b == 0) and (f % c == 0) and (f // c == e // b):\n        y = f // c\n        d = d // a\n        if y != 0 and d % y == 0:\n            return 2\n    return -1\n\ndef func422(a, d, b, e, c, f):\n    if a != 0 and b != 0 and (c != 0) and (f % c == 0) and (e % b == 0):\n        x = e // b\n        y = f // c\n        if a * x * y == d:\n            return 2\n    return -1\n\ndef func423(a, d, b, e, c, f):\n    if c != 0 and f % c == 0:\n        y = f // c\n        if y != 0 and b != 0 and (e % (b * y) == 0):\n            x = e // (b * y)\n            if a * x * y == d and b * x * y == e and (c * y == f):\n                return 2\n    return -1\n\ndef func4(a, d, b, e, c, f):\n    if func412(a, d, b, e, c, f) == 2 or func412(a, d, c, f, b, e) == 2 or func412(b, e, a, d, c, f) == 2 or (func412(b, e, c, f, a, d) == 2) or (func412(c, f, a, d, b, e) == 2) or (func412(c, f, b, e, a, d) == 2):\n        return 2\n    if func413(a, d, b, e, c, f) == 2 or func413(a, d, c, f, b, e) == 2 or func413(b, e, a, d, c, f) == 2 or (func413(b, e, c, f, a, d) == 2) or (func413(c, f, a, d, b, e) == 2) or (func413(c, f, b, e, a, d) == 2):\n        return 2\n    if func422(a, d, b, e, c, f) == 2 or func422(a, d, c, f, b, e) == 2 or func422(b, e, a, d, c, f) == 2 or (func422(b, e, c, f, a, d) == 2) or (func422(c, f, a, d, b, e) == 2) or (func422(c, f, b, e, a, d) == 2):\n        return 2\n    if func423(a, d, b, e, c, f) == 2 or func423(a, d, c, f, b, e) == 2 or func423(b, e, a, d, c, f) == 2 or (func423(b, e, c, f, a, d) == 2) or (func423(c, f, a, d, b, e) == 2) or (func423(c, f, b, e, a, d) == 2):\n        return 2\n    if a != 0 and b != 0 and (c != 0) and (d % a == 0) and (e % b == 0) and (f % c == 0) and (d // a == e // b) and (e // b == f // c):\n        return 2\n    return -1\nfor _ in range(int(input())):\n    (a, b, c) = list(map(int, input().split()))\n    (d, e, f) = list(map(int, input().split()))\n    (d1, d2, d3) = (d - a, e - b, f - c)\n    if d1 == 0 and d2 == 0 and (d3 == 0):\n        print(0)\n    elif d1 == d2 and d2 == d3 or (d1 == 0 and d2 == d3) or (d2 == 0 and d1 == d3) or (d3 == 0 and d1 == d2) or (d1 == 0 and d2 == 0 and (d3 != 0)) or (d2 == 0 and d3 == 0 and (d1 != 0)) or (d2 != 0 and d1 == 0 and (d3 == 0)):\n        print(1)\n    elif gunc(a, d, b, e, c, f, d1, d2, d3) == 1:\n        print(1)\n    elif func1(d1, d2, d3) == 2:\n        print(2)\n    elif func2(a, d, b, e, c, f) == 2:\n        print(2)\n    elif func3(a, d, b, e, c, f) == 2:\n        print(2)\n    elif func4(a, d, b, e, c, f) == 2:\n        print(2)\n    else:\n        print(3)", "import math\n\ndef check_int(x):\n    return math.floor(x) == x\n\ndef check_split_prod(initial, target):\n    pairs = [(0, 1, 2), (1, 2, 0), (2, 0, 1)]\n    ans = 0\n    for pair in pairs:\n        init = initial[pair[-1]]\n        fin = target[pair[-1]]\n        prod1 = divide(target[pair[0]], initial[pair[0]])\n        prod2 = divide(target[pair[1]], initial[pair[1]])\n        diff1 = target[pair[0]] - initial[pair[0]]\n        diff2 = target[pair[1]] - initial[pair[1]]\n        if prod1 != None:\n            ans = ans or prod1 * init + diff2 == fin\n            ans = ans or prod1 * (init + diff2) == fin\n        if prod2 != None:\n            ans = ans or prod2 * init + diff1 == fin\n            ans = ans or prod2 * (init + diff1) == fin\n        if prod1 != None and prod2 != None:\n            ans = ans or prod1 * prod2 * init == fin\n        ans = ans or diff1 + diff2 + init == fin\n        ans = ans or (initial[pair[0]] == initial[pair[1]] and target[pair[0]] == target[pair[1]])\n    return bool(ans)\n\ndef find_m_and_C(x1, y1, x2, y2):\n    if x2 == x1:\n        return (None, None)\n    div = divmod(y2 - y1, x2 - x1)\n    if div[1] != 0:\n        return (None, None)\n    m = div[0]\n    C = y1 - m * x1\n    return (m, C)\n\ndef divide(a, b):\n    if b == 0:\n        return None\n    div = divmod(a, b)\n    if div[1] != 0:\n        return None\n    return div[0]\n\ndef pentuple_list(initial, target):\n    pairs = [(0, 1, 2), (1, 2, 0), (2, 0, 1)]\n    q_list = []\n    for pair in pairs:\n        (m, C) = find_m_and_C(initial[pair[0]], target[pair[0]], initial[pair[1]], target[pair[1]])\n        if m == None:\n            continue\n        q_list.append((m, C, divide(C, m), divide(target[pair[-1]], initial[pair[-1]]), target[pair[-1]] - initial[pair[-1]]))\n    return q_list\nT = int(input())\nfor t in range(T):\n    (p, q, r) = initial = [int(i) for i in input().split()]\n    (a, b, c) = target = [int(i) for i in input().split()]\n    equality_list = [int(target[i] == initial[i]) for i in range(3)]\n    if sum(equality_list) == 3:\n        ans = 0\n    elif sum(equality_list) == 2:\n        ans = 1\n    elif sum(equality_list) == 1:\n        (ind1, ind2) = [i for i in range(3) if not equality_list[i]]\n        if initial[ind1] - target[ind1] == initial[ind2] - target[ind2] or (initial[ind1] * initial[ind2] != 0 and target[ind2] // initial[ind2] == target[ind1] // initial[ind1] and (divide(target[ind1], initial[ind1]) and divide(target[ind2], initial[ind2]))):\n            ans = 1\n        else:\n            ans = 2\n    elif initial[0] - target[0] == initial[1] - target[1] == initial[2] - target[2] or (initial[0] * initial[1] * initial[2] != 0 and target[0] // initial[0] == target[1] // initial[1] == target[2] // initial[2] and (divide(target[0], initial[0]) != None and divide(target[1], initial[1]) != None and (divide(target[2], initial[2]) != None))):\n        ans = 1\n    else:\n        ans = 3\n        q_list = pentuple_list(initial, target)\n        if len(q_list) == 3:\n            if q_list[0][0] == q_list[1][0] == q_list[2][0] and q_list[0][1] == q_list[1][1] == q_list[2][1]:\n                ans = 2\n        for q in q_list:\n            if q[0] == q[3] or q[1] == q[4] or q[2] == q[4] or (q[0] == 1) or (q[1] == 0):\n                ans = 2\n        if check_split_prod(initial, target):\n            ans = 2\n    print(ans)", "for _ in range(int(input())):\n    li1 = list(map(int, input().split()))\n    li2 = list(map(int, input().split()))\n    s1 = set()\n    s2 = set()\n    (val, ans) = (0, 3)\n    for i in range(3):\n        if li1[i] == li2[i]:\n            val += 1\n    if val == 3:\n        ans = 0\n    elif val == 2:\n        ans = 1\n    else:\n        for i in range(3):\n            if li2[i] - li1[i] != 0:\n                s1.add(li2[i] - li1[i])\n            if li1[i] != 0 and li2[i] % li1[i] == 0 and (li2[i] // li1[i] != 1):\n                s2.add(li2[i] // li1[i])\n        temp = []\n        for i in s1:\n            for j in range(7):\n                temp = [li1[k] for k in range(3)]\n                if j == 0:\n                    temp[0] += i\n                    temp[1] += i\n                elif j == 1:\n                    temp[0] += i\n                    temp[2] += i\n                elif j == 2:\n                    temp[1] += i\n                    temp[2] += i\n                elif j == 3:\n                    temp[0] += i\n                    temp[1] += i\n                    temp[2] += i\n                elif j == 4:\n                    temp[0] += i\n                elif j == 5:\n                    temp[1] += i\n                elif j == 6:\n                    temp[2] += i\n                a = 0\n                for k in range(3):\n                    if temp[k] == li2[k]:\n                        a += 1\n                if a == 3:\n                    ans = 1\n                if a == 2:\n                    ans = min(ans, 2)\n                s3 = set()\n                for k in range(3):\n                    if temp[k] != 0 and li2[k] % temp[k] == 0 and (li2[k] // temp[k] != 1):\n                        s3.add(li2[k] // temp[k])\n                temp1 = []\n                for k in s3:\n                    for l in range(7):\n                        temp1 = [temp[m] for m in range(3)]\n                        if l == 0:\n                            temp1[0] *= k\n                            temp1[1] *= k\n                        elif l == 1:\n                            temp1[0] *= k\n                            temp1[2] *= k\n                        elif l == 2:\n                            temp1[1] *= k\n                            temp1[2] *= k\n                        elif l == 3:\n                            temp1[0] *= k\n                            temp1[1] *= k\n                            temp1[2] *= k\n                        elif l == 4:\n                            temp1[0] *= k\n                        elif l == 5:\n                            temp1[1] *= k\n                        elif l == 6:\n                            temp1[2] *= k\n                        for m in range(3):\n                            if li2[m] != temp1[m]:\n                                break\n                            if m == 2:\n                                ans = min(ans, 2)\n                s4 = set()\n                for k in range(3):\n                    if li2[k] - temp[k] != 0:\n                        s4.add(li2[k] - temp[k])\n                temp2 = []\n                for k in s4:\n                    for l in range(7):\n                        temp2 = [temp[m] for m in range(3)]\n                        if l == 0:\n                            temp2[0] += k\n                            temp2[1] += k\n                        elif l == 1:\n                            temp2[0] += k\n                            temp2[2] += k\n                        elif l == 2:\n                            temp2[1] += k\n                            temp2[2] += k\n                        elif l == 3:\n                            temp2[0] += k\n                            temp2[1] += k\n                            temp2[2] += k\n                        elif l == 4:\n                            temp2[0] += k\n                        elif l == 5:\n                            temp2[1] += k\n                        elif l == 6:\n                            temp2[2] += k\n                        for m in range(3):\n                            if li2[m] != temp2[m]:\n                                break\n                            if m == 2:\n                                ans = min(ans, 2)\n                s4.clear()\n                count = 0\n                for k in range(3):\n                    var = li2[k] - i\n                    if li1[k] != 0 and var % li1[k] == 0:\n                        if var // li1[k] != 1:\n                            s4.add(var // li1[k])\n                        count += 1\n                if len(s4) == 1 and count == 3:\n                    ans = min(ans, 2)\n        if ans == 3 or ans == 2:\n            d1 = li2[2] - li2[1]\n            d2 = li2[1] - li2[0]\n            d3 = li1[2] - li1[1]\n            d4 = li1[1] - li1[0]\n            d5 = li2[2] - li2[0]\n            d6 = li1[2] - li1[0]\n            if d3 != 0 and d4 != 0 and (d6 != 0) and (d1 % d3 == 0) and (d2 % d4 == 0) and (d5 % d6 == 0) and (d1 // d3 == d2 // d4) and (d1 // d3 == d5 // d6):\n                ans = min(ans, 2)\n            for i in s2:\n                s3 = set()\n                count = 0\n                for j in range(3):\n                    temp[j] = li2[j]\n                    if i != 0 and temp[j] % i == 0:\n                        temp[j] //= i\n                        temp[j] -= li1[j]\n                        if temp[j] != 0:\n                            s3.add(temp[j])\n                        count += 1\n                if len(s3) == 1 and count == 3:\n                    ans = min(ans, 2)\n            for i in s2:\n                for j in range(7):\n                    temp = [li1[k] for k in range(3)]\n                    if j == 0:\n                        temp[0] *= i\n                        temp[1] *= i\n                    elif j == 1:\n                        temp[0] *= i\n                        temp[2] *= i\n                    elif j == 2:\n                        temp[1] *= i\n                        temp[2] *= i\n                    elif j == 3:\n                        temp[0] *= i\n                        temp[1] *= i\n                        temp[2] *= i\n                    elif j == 4:\n                        temp[0] *= i\n                    elif j == 5:\n                        temp[1] *= i\n                    elif j == 6:\n                        temp[2] *= i\n                    a = 0\n                    for k in range(3):\n                        if temp[k] == li2[k]:\n                            a += 1\n                    if a == 3:\n                        ans = 1\n                    elif a == 2:\n                        ans = min(ans, 2)\n                    temp2 = []\n                    s4 = set()\n                    for k in range(3):\n                        if temp[k] != 0 and li2[k] % temp[k] == 0 and (li2[k] // temp[k] != 1):\n                            s4.add(li2[k] // temp[k])\n                    temp2 = []\n                    for k in s4:\n                        for l in range(7):\n                            temp2 = [temp[m] for m in range(3)]\n                            if l == 0:\n                                temp2[0] *= k\n                                temp2[1] *= k\n                            elif l == 1:\n                                temp2[0] *= k\n                                temp2[2] *= k\n                            elif l == 2:\n                                temp2[1] *= k\n                                temp2[2] *= k\n                            elif l == 3:\n                                temp2[0] *= k\n                                temp2[1] *= k\n                                temp2[2] *= k\n                            elif l == 4:\n                                temp2[0] *= k\n                            elif l == 5:\n                                temp2[1] *= k\n                            elif l == 6:\n                                temp2[2] *= k\n                            for m in range(3):\n                                if li2[m] != temp2[m]:\n                                    break\n                                if m == 2:\n                                    ans = min(ans, 2)\n                    s4.clear()\n                    for k in range(3):\n                        var = li2[k] - temp[k]\n                        if var != 0:\n                            s4.add(var)\n                    if len(s4) == 1:\n                        ans = min(ans, 2)\n    print(ans)", "def eq_solve(v0, v1, u0, u1):\n    den = u0 - v0\n    num = u1 - v1\n    if den != 0:\n        return num // den\n    return 1\n\ndef solve(p, q, r, a, b, c, rs):\n    if p == a and q == b and (r == c):\n        return rs\n    if rs >= 2:\n        return 3\n    res = 3\n    adds = [a - p, b - q, c - r]\n    muls = []\n    if p != 0:\n        muls.append(a // p)\n    if q != 0:\n        muls.append(b // q)\n    if r != 0:\n        muls.append(c // r)\n    muls.append(eq_solve(p, a, q, b))\n    muls.append(eq_solve(p, a, r, c))\n    muls.append(eq_solve(q, b, r, c))\n    msks = 2 ** 3\n    for msk in range(msks):\n        for add in adds:\n            np = p\n            nq = q\n            nr = r\n            if msk & 1 > 0:\n                np += add\n            if msk & 2 > 0:\n                nq += add\n            if msk & 4 > 0:\n                nr += add\n            res = min(res, solve(np, nq, nr, a, b, c, rs + 1))\n        for mul in muls:\n            np = p\n            nq = q\n            nr = r\n            if msk & 1 > 0:\n                np *= mul\n            if msk & 2 > 0:\n                nq *= mul\n            if msk & 4 > 0:\n                nr *= mul\n            res = min(res, solve(np, nq, nr, a, b, c, rs + 1))\n    return res\nt = int(input())\nwhile t > 0:\n    (p, q, r) = map(int, input().split())\n    (a, b, c) = map(int, input().split())\n    print(solve(p, q, r, a, b, c, 0))\n    t -= 1", "def checkpoint1(p, q, r, a, b, c):\n    if p == a and b - q == c - r:\n        return True\n    if q == b and a - p == c - r:\n        return True\n    if c == r and a - p == b - q:\n        return True\n    if p == a and q == b:\n        return True\n    if p == a and c == r:\n        return True\n    if c == r and b == q:\n        return True\n    if a - p == b - q and a - p == c - r:\n        return True\n    if q != 0 and r != 0 and (b % q == 0) and (c % r == 0) and (p == a) and (b / q == c / r):\n        return True\n    if p != 0 and r != 0 and (a % p == 0) and (c % r == 0) and (q == b) and (a / p == c / r):\n        return True\n    if p != 0 and q != 0 and (a % p == 0) and (b % q == 0) and (c == r) and (a / p == b / q):\n        return True\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0) and (a / p == b / q) and (a / p == c / r):\n        return True\n    return False\n\ndef checkpoint2(p, q, r, a, b, c):\n    x1 = a - p\n    y1 = b - q\n    z1 = c - r\n    if p == a or q == b or r == c:\n        return True\n    if a - p == b - q or b - q == c - r or c - r == a - p:\n        return True\n    if p != 0 and q != 0 and (a % p == 0 and b % q == 0) and (a / p == b / q):\n        return True\n    if p != 0 and r != 0 and (a % p == 0 and c % r == 0) and (a / p == c / r):\n        return True\n    if q != 0 and r != 0 and (b % q == 0 and c % r == 0) and (b / q == c / r):\n        return True\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0) and (a / p * b / q == c / r or a / p * c / r == b / q or b / q * c / r == a / p):\n        return True\n    if x1 + y1 == z1 or x1 + z1 == y1 or y1 + z1 == x1:\n        return True\n    if q + x1 != 0 and r != 0 and (b % (q + x1) == 0) and (c % r == 0) and (b / (q + x1) == c / r):\n        return True\n    if p != 0 and a % p == 0 and (b - q * a / p == c - r):\n        return True\n    if q + z1 != 0 and p != 0 and (b % (q + z1) == 0) and (a % p == 0) and (b / (q + z1) == a / p):\n        return True\n    if r != 0 and c % r == 0 and (b - q * c / r == a - p):\n        return True\n    if p + y1 != 0 and r != 0 and (a % (p + y1) == 0) and (c % r == 0) and (a / (p + y1) == c / r):\n        return True\n    if q != 0 and b % q == 0 and (a - p * b / q == c - r):\n        return True\n    if p + z1 != 0 and q != 0 and (a % (p + z1) == 0) and (b % q == 0) and (a / (p + z1) == b / q):\n        return True\n    if r != 0 and c % r == 0 and (a - p * c / r == b - q):\n        return True\n    if r + y1 != 0 and p != 0 and (c % (r + y1) == 0) and (a % p == 0) and (c / (r + y1) == a / p):\n        return True\n    if q != 0 and b % q == 0 and (c - r * b / q == a - p):\n        return True\n    if r + x1 != 0 and q != 0 and (c % (r + x1) == 0) and (b % q == 0) and (c / (r + x1) == b / q):\n        return True\n    if p != 0 and a % p == 0 and (c - r * a / p == b - q):\n        return True\n    if p + z1 != 0 and q + z1 != 0 and (a % (p + z1) == 0) and (b % (q + z1) == 0) and (a / (p + z1) == b / (q + z1)):\n        return True\n    if r != 0 and c % r == 0 and (a - p * c / r == b - q * c / r):\n        return True\n    if p + y1 != 0 and r + y1 != 0 and (a % (p + y1) == 0) and (c % (r + y1) == 0) and (a / (p + y1) == c / (r + y1)):\n        return True\n    if q != 0 and b % q == 0 and (a - p * b / q == c - r * b / q):\n        return True\n    if q + x1 != 0 and r + x1 != 0 and (b % (q + x1) == 0) and (c % (r + x1) == 0) and (b / (q + x1) == c / (r + x1)):\n        return True\n    if p != 0 and a % p == 0 and (b - q * a / p == c - r * a / p):\n        return True\n    if r != 0 and c % r == 0 and (c / r != 0) and (a % (c / r) == 0) and (b % (c / r) == 0) and (a / (c / r) - p == b / (c / r) - q):\n        return True\n    if p != 0 and q != 0 and ((a - z1) % p == 0) and ((b - z1) % q == 0) and ((a - z1) / p == (b - z1) / q):\n        return True\n    if q != 0 and b % q == 0 and (b / q != 0) and (a % (b / q) == 0) and (c % (b / q) == 0) and (a / (b / q) - p == c / (b / q) - r):\n        return True\n    if p != 0 and r != 0 and ((a - y1) % p == 0) and ((c - y1) % r == 0) and ((a - y1) / p == (c - y1) / r):\n        return True\n    if p != 0 and a % p == 0 and (a / p != 0) and (b % (a / p) == 0) and (c % (a / p) == 0) and (b / (a / p) - q == c / (a / p) - r):\n        return True\n    if q != 0 and r != 0 and ((b - x1) % q == 0) and ((c - x1) % r == 0) and ((b - x1) / q == (c - x1) / r):\n        return True\n    if q - p != 0 and r - q != 0 and ((b - a) % (q - p) == 0) and ((c - b) % (r - q) == 0) and ((b - a) / (q - p) == (c - b) / (r - q)):\n        return True\n    return False\ntest = int(input())\nfor _ in range(test):\n    (x1, y1, z1) = [int(x) for x in input().split()]\n    (a, b, c) = [int(x) for x in input().split()]\n    if a == x1 and b == y1 and (c == z1):\n        print(0)\n    elif checkpoint1(x1, y1, z1, a, b, c):\n        print(1)\n    elif checkpoint2(x1, y1, z1, a, b, c):\n        print(2)\n    else:\n        print(3)", "global count1\n\ndef din(x, y, m, n):\n    global count1\n    if x != 0 and m % x == 0:\n        if n == y * (m // x):\n            count1 = 2\n    if n == y + (m - x):\n        count1 = 2\n\ndef red(x, y, m, n):\n    global count1\n    if x != 0 and m % x == 0:\n        if n == y * (m // x):\n            count1 = 1\n    if n == y + (m - x):\n        count1 = 1\nfor _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    (a, b, c) = map(int, input().split())\n    count = 0\n    count1 = 0\n    if p != a:\n        count += 1\n    if q != b:\n        count += 1\n    if r != c:\n        count += 1\n    if count == 0 or count == 1:\n        count1 = count\n    elif count == 2:\n        count1 = count\n        x = 0\n        y = 0\n        m = 0\n        n = 0\n        if p != a and q != b:\n            x = p\n            y = q\n            m = a\n            n = b\n        elif p != a and r != c:\n            x = p\n            y = r\n            m = a\n            n = c\n        else:\n            x = q\n            y = r\n            m = b\n            n = c\n        red(x, y, m, n)\n    else:\n        count1 = count\n        if p != 0 and a % p == 0 and (b == q * (a // p)) and (c == r * (a // p)) or (b == q + (a - p) and c == r + (a - p)):\n            count1 = 1\n        elif p != 0 and a % p == 0 and (b == q * (a // p)) or b == q + (a - p):\n            count1 = 2\n        elif p != 0 and a % p == 0 and (c == r * (a // p)) or c == r + (a - p):\n            count1 = 2\n        elif q != 0 and b % q == 0 and (c == r * (b // q)) or c == r + (b - q):\n            count1 = 2\n        else:\n            din(q, r, b + (p - a), c + (p - a))\n            din(p, r, a + (q - b), c + (q - b))\n            din(p, q, a + (r - c), b + (r - c))\n            if p != 0 and a % p == 0:\n                din(q * (a // p), r, b, c)\n                din(q, r * (a // p), b, c)\n                din(q * (a // p), r * (a // p), b, c)\n            din(q + (a - p), r, b, c)\n            din(q, r + (a - p), b, c)\n            din(q + (a - p), r + (a - p), b, c)\n            if q != 0 and b % q == 0:\n                din(p * (b // q), r, a, c)\n                din(p, r * (b // q), a, c)\n                din(p * (b // q), r * (b // q), a, c)\n            din(p + (b - q), r, a, c)\n            din(p, r + (b - q), a, c)\n            din(p + (b - q), r + (b - q), a, c)\n            if r != 0 and c % r == 0:\n                din(p * (c // r), q, a, b)\n                din(p, q * (c // r), a, b)\n                din(p * (c // r), q * (c // r), a, b)\n            din(p + (c - r), q, a, b)\n            din(p, q + (c - r), a, b)\n            din(p + (c - r), q + (c - r), a, b)\n            if count1 == 3:\n                if p - q != 0 and p - r != 0 and (q - r != 0):\n                    if b - c == (a - b) // (p - q) * (q - r) and b - c == (a - c) // (p - r) * (q - r):\n                        if a - b == (a - c) // (p - r) * (p - q) and a - b == (b - c) // (q - r) * (p - q):\n                            if a - c == (a - b) // (p - q) * (p - r) and a - c == (c - b) // (r - q) * (p - r):\n                                count1 = 2\n    print(count1)", "def checkpoint1(p, q, r, a, b, c):\n    if p == a and b - q == c - r:\n        return True\n    if q == b and a - p == c - r:\n        return True\n    if c == r and a - p == b - q:\n        return True\n    if p == a and q == b:\n        return True\n    if p == a and c == r:\n        return True\n    if c == r and b == q:\n        return True\n    if a - p == b - q and a - p == c - r:\n        return True\n    if q != 0 and r != 0 and (b % q == 0) and (c % r == 0) and (p == a) and (b / q == c / r):\n        return True\n    if p != 0 and r != 0 and (a % p == 0) and (c % r == 0) and (q == b) and (a / p == c / r):\n        return True\n    if p != 0 and q != 0 and (a % p == 0) and (b % q == 0) and (c == r) and (a / p == b / q):\n        return True\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0) and (a / p == b / q) and (a / p == c / r):\n        return True\n    return False\n\ndef checkpoint2(p, q, r, a, b, c):\n    x1 = a - p\n    y1 = b - q\n    z1 = c - r\n    if p == a or q == b or r == c:\n        return True\n    if a - p == b - q or b - q == c - r or c - r == a - p:\n        return True\n    if p != 0 and q != 0 and (a % p == 0 and b % q == 0) and (a / p == b / q):\n        return True\n    if p != 0 and r != 0 and (a % p == 0 and c % r == 0) and (a / p == c / r):\n        return True\n    if q != 0 and r != 0 and (b % q == 0 and c % r == 0) and (b / q == c / r):\n        return True\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0) and (a / p * b / q == c / r or a / p * c / r == b / q or b / q * c / r == a / p):\n        return True\n    if x1 + y1 == z1 or x1 + z1 == y1 or y1 + z1 == x1:\n        return True\n    if q + x1 != 0 and r != 0 and (b % (q + x1) == 0) and (c % r == 0) and (b / (q + x1) == c / r):\n        return True\n    if p != 0 and a % p == 0 and (b - q * a / p == c - r):\n        return True\n    if q + z1 != 0 and p != 0 and (b % (q + z1) == 0) and (a % p == 0) and (b / (q + z1) == a / p):\n        return True\n    if r != 0 and c % r == 0 and (b - q * c / r == a - p):\n        return True\n    if p + y1 != 0 and r != 0 and (a % (p + y1) == 0) and (c % r == 0) and (a / (p + y1) == c / r):\n        return True\n    if q != 0 and b % q == 0 and (a - p * b / q == c - r):\n        return True\n    if p + z1 != 0 and q != 0 and (a % (p + z1) == 0) and (b % q == 0) and (a / (p + z1) == b / q):\n        return True\n    if r != 0 and c % r == 0 and (a - p * c / r == b - q):\n        return True\n    if r + y1 != 0 and p != 0 and (c % (r + y1) == 0) and (a % p == 0) and (c / (r + y1) == a / p):\n        return True\n    if q != 0 and b % q == 0 and (c - r * b / q == a - p):\n        return True\n    if r + x1 != 0 and q != 0 and (c % (r + x1) == 0) and (b % q == 0) and (c / (r + x1) == b / q):\n        return True\n    if p != 0 and a % p == 0 and (c - r * a / p == b - q):\n        return True\n    if p + z1 != 0 and q + z1 != 0 and (a % (p + z1) == 0) and (b % (q + z1) == 0) and (a / (p + z1) == b / (q + z1)):\n        return True\n    if r != 0 and c % r == 0 and (a - p * c / r == b - q * c / r):\n        return True\n    if p + y1 != 0 and r + y1 != 0 and (a % (p + y1) == 0) and (c % (r + y1) == 0) and (a / (p + y1) == c / (r + y1)):\n        return True\n    if q != 0 and b % q == 0 and (a - p * b / q == c - r * b / q):\n        return True\n    if q + x1 != 0 and r + x1 != 0 and (b % (q + x1) == 0) and (c % (r + x1) == 0) and (b / (q + x1) == c / (r + x1)):\n        return True\n    if p != 0 and a % p == 0 and (b - q * a / p == c - r * a / p):\n        return True\n    if r != 0 and c % r == 0 and (c / r != 0) and (a % (c / r) == 0) and (b % (c / r) == 0) and (a / (c / r) - p == b / (c / r) - q):\n        return True\n    if p != 0 and q != 0 and ((a - z1) % p == 0) and ((b - z1) % q == 0) and ((a - z1) / p == (b - z1) / q):\n        return True\n    if q != 0 and b % q == 0 and (b / q != 0) and (a % (b / q) == 0) and (c % (b / q) == 0) and (a / (b / q) - p == c / (b / q) - r):\n        return True\n    if p != 0 and r != 0 and ((a - y1) % p == 0) and ((c - y1) % r == 0) and ((a - y1) / p == (c - y1) / r):\n        return True\n    if p != 0 and a % p == 0 and (a / p != 0) and (b % (a / p) == 0) and (c % (a / p) == 0) and (b / (a / p) - q == c / (a / p) - r):\n        return True\n    if q != 0 and r != 0 and ((b - x1) % q == 0) and ((c - x1) % r == 0) and ((b - x1) / q == (c - x1) / r):\n        return True\n    if q - p != 0 and r - q != 0 and ((b - a) % (q - p) == 0) and ((c - b) % (r - q) == 0) and ((b - a) / (q - p) == (c - b) / (r - q)):\n        return True\n    return False\ntest = int(input())\nfor _ in range(test):\n    (x1, y1, z1) = [int(x) for x in input().split()]\n    (a, b, c) = [int(x) for x in input().split()]\n    if a == x1 and b == y1 and (c == z1):\n        print(0)\n    elif checkpoint1(x1, y1, z1, a, b, c):\n        print(1)\n    elif checkpoint2(x1, y1, z1, a, b, c):\n        print(2)\n    else:\n        print(3)", "def div1(a1, b1, p):\n    if a1 != 0:\n        p1 = b1 // a1 if b1 % a1 == 0 else p + 1\n    else:\n        p1 = 0 if b1 == 0 else p + 1\n    return p1\n\ndef div2(a2, b2, p):\n    if a2 != 0:\n        p2 = b2 // a2 if b2 % a2 == 0 else p + 2\n    else:\n        p2 = 0 if b2 == 0 else p + 2\n    return p2\n\ndef div3(a3, b3, p):\n    if a3 != 0:\n        p3 = b3 // a3 if b3 % a3 == 0 else p + 3\n    else:\n        p3 = 0 if b3 == 0 else p + 3\n    return p3\n\ndef unique(c1, d1, c2, d2, c3, d3, pr):\n    if c1 != 0:\n        if d1 % c1 == 0:\n            m = d1 // c1\n            m1 = d2 - c2\n            if c3 + m1 == d3 or c3 * m == d3 or (c3 + m1) * m == d3 or (c3 * m + m1 == d3):\n                pr = 2\n    if c2 != 0:\n        if d2 % c2 == 0:\n            m = d2 // c2\n            m1 = d1 - c1\n            if c3 + m1 == d3 or c3 * m == d3 or (c3 + m1) * m == d3 or (c3 * m + m1 == d3):\n                pr = 2\n    if c1 != 0 and c2 != 0:\n        if d1 % c1 == 0 and d2 % c2 == 0:\n            m = d1 // c1\n            m1 = d2 // c2\n            if c3 * m == d3 or c3 * m1 == d3 or c3 * m * m1 == d3:\n                pr = 2\n    if c1 != c2:\n        if (d1 - d2) % (c1 - c2) == 0:\n            m = (d1 - d2) // (c1 - c2)\n            m1 = d1 - c1 * m\n            if m == 1 or m1 == 0 or c3 + m1 == d3 or (c3 * m == d3) or (c3 * m + m1 == d3):\n                pr = 2\n    if d1 != d2:\n        if (c1 * d2 - c2 * d1) % (d1 - d2) == 0:\n            m = (c1 * d2 - c2 * d1) // (d1 - d2)\n            if c1 + m != 0:\n                if d1 % (c1 + m) == 0:\n                    m1 = d1 // (c1 + m)\n                    if m == 0 or m1 == 1 or c3 + m == d3 or (c3 * m1 == d3) or ((c3 + m) * m1 == d3):\n                        pr = 2\n    if d1 == d2 and c1 == c2:\n        pr = 2\n    if c3 + (d1 - c1) == d3 or c3 + (d2 - c2) == d3 or c3 + (d1 - c1) + (d2 - c2) == d3:\n        pr = 2\n    return pr\nfor i in range(int(input())):\n    (a1, a2, a3) = map(int, input().split())\n    (b1, b2, b3) = map(int, input().split())\n    (d1, d2, d3) = (b1 - a1, b2 - a2, b3 - a3)\n    (p1, p2, p3) = (div1(a1, b1, 10 ** 10), div2(a2, b2, 10 ** 10), div3(a3, b3, 10 ** 10))\n    (l, l1, c, j, k) = ([a1, a2, a3], [b1, b2, b3], 0, 0, 3)\n    while j < k:\n        if l[j] == l1[j]:\n            c += 1\n            l.remove(l[j])\n            l1.remove(l1[j])\n            k -= 1\n        else:\n            j += 1\n    if c == 3 or c == 2:\n        print(3 - c)\n    elif c == 1:\n        if l1[0] - l[0] == l1[1] - l[1]:\n            print(1)\n        elif l[0] != 0 and l[1] != 0:\n            print(1) if l1[0] % l[0] == 0 and l1[1] % l[1] == 0 and (l1[0] / l[0] == l1[1] / l[1]) else print(2)\n        else:\n            print(2)\n    elif d1 == d2 and d2 == d3 or (p1 == p2 and p2 == p3):\n        print(1)\n    else:\n        (pr1, pr2, pr3) = (3, 3, 3)\n        pr1 = unique(a1, b1, a2, b2, a3, b3, 3)\n        pr2 = unique(a3, b3, a1, b1, a2, b2, 3)\n        pr3 = unique(a2, b2, a3, b3, a1, b1, 3)\n        print(min(pr1, pr2, pr3))", "def div1(a1, b1, p):\n    if a1 != 0:\n        p1 = b1 // a1 if b1 % a1 == 0 else p + 1\n    else:\n        p1 = 0 if b1 == 0 else p + 1\n    return p1\n\ndef div2(a2, b2, p):\n    if a2 != 0:\n        p2 = b2 // a2 if b2 % a2 == 0 else p + 2\n    else:\n        p2 = 0 if b2 == 0 else p + 2\n    return p2\n\ndef div3(a3, b3, p):\n    if a3 != 0:\n        p3 = b3 // a3 if b3 % a3 == 0 else p + 3\n    else:\n        p3 = 0 if b3 == 0 else p + 3\n    return p3\n\ndef unique(c1, d1, c2, d2, c3, d3, pr):\n    if c1 != 0:\n        if d1 % c1 == 0:\n            m = d1 // c1\n            m1 = d2 - c2\n            if c3 + m1 == d3 or c3 * m == d3 or (c3 + m1) * m == d3 or (c3 * m + m1 == d3):\n                pr = 2\n    if c2 != 0:\n        if d2 % c2 == 0:\n            m = d2 // c2\n            m1 = d1 - c1\n            if c3 + m1 == d3 or c3 * m == d3 or (c3 + m1) * m == d3 or (c3 * m + m1 == d3):\n                pr = 2\n    if c1 != 0 and c2 != 0:\n        if d1 % c1 == 0 and d2 % c2 == 0:\n            m = d1 // c1\n            m1 = d2 // c2\n            if c3 * m == d3 or c3 * m1 == d3 or c3 * m * m1 == d3:\n                pr = 2\n    if c1 != c2:\n        if (d1 - d2) % (c1 - c2) == 0:\n            m = (d1 - d2) // (c1 - c2)\n            m1 = d1 - c1 * m\n            if m == 1 or m1 == 0 or c3 + m1 == d3 or (c3 * m == d3) or (c3 * m + m1 == d3):\n                pr = 2\n    if d1 != d2:\n        if (c1 * d2 - c2 * d1) % (d1 - d2) == 0:\n            m = (c1 * d2 - c2 * d1) // (d1 - d2)\n            if c1 + m != 0:\n                if d1 % (c1 + m) == 0:\n                    m1 = d1 // (c1 + m)\n                    if m == 0 or m1 == 1 or c3 + m == d3 or (c3 * m1 == d3) or ((c3 + m) * m1 == d3):\n                        pr = 2\n    if d1 == d2 and c1 == c2:\n        pr = 2\n    if c3 + (d1 - c1) == d3 or c3 + (d2 - c2) == d3 or c3 + (d1 - c1) + (d2 - c2) == d3:\n        pr = 2\n    return pr\nfor i in range(int(input())):\n    (a1, a2, a3) = map(int, input().split())\n    (b1, b2, b3) = map(int, input().split())\n    (d1, d2, d3) = (b1 - a1, b2 - a2, b3 - a3)\n    (p1, p2, p3) = (div1(a1, b1, 10 ** 10), div2(a2, b2, 10 ** 10), div3(a3, b3, 10 ** 10))\n    (l, l1, c, j, k) = ([a1, a2, a3], [b1, b2, b3], 0, 0, 3)\n    while j < k:\n        if l[j] == l1[j]:\n            c += 1\n            l.remove(l[j])\n            l1.remove(l1[j])\n            k -= 1\n        else:\n            j += 1\n    if c == 3 or c == 2:\n        print(3 - c)\n    elif c == 1:\n        if l1[0] - l[0] == l1[1] - l[1]:\n            print(1)\n        elif l[0] != 0 and l[1] != 0:\n            print(1) if l1[0] % l[0] == 0 and l1[1] % l[1] == 0 and (l1[0] / l[0] == l1[1] / l[1]) else print(2)\n        else:\n            print(2)\n    elif d1 == d2 and d2 == d3 or (p1 == p2 and p2 == p3):\n        print(1)\n    else:\n        (pr1, pr2, pr3) = (3, 3, 3)\n        pr1 = unique(a1, b1, a2, b2, a3, b3, 3)\n        pr2 = unique(a3, b3, a1, b1, a2, b2, 3)\n        pr3 = unique(a2, b2, a3, b3, a1, b1, 3)\n        print(min(pr1, pr2, pr3))", "def div1(a1, b1):\n    p = 10 ** 10\n    if a1 != 0:\n        p1 = b1 // a1 if b1 % a1 == 0 else p + 1\n    else:\n        p1 = 0 if b1 == 0 else p + 1\n    return p1\n\ndef div2(a2, b2):\n    p = 10 ** 10\n    if a2 != 0:\n        p2 = b2 // a2 if b2 % a2 == 0 else p + 2\n    else:\n        p2 = 0 if b2 == 0 else p + 2\n    return p2\n\ndef div3(a3, b3):\n    p = 10 ** 10\n    if a3 != 0:\n        p3 = b3 // a3 if b3 % a3 == 0 else p + 3\n    else:\n        p3 = 0 if b3 == 0 else p + 3\n    return p3\n\ndef unique(c1, d1, c2, d2, c3, d3):\n    pr = 3\n    if c1 != 0:\n        if d1 % c1 == 0:\n            m = d1 // c1\n            m1 = d2 - c2\n            if c3 + m1 == d3 or c3 * m == d3 or (c3 + m1) * m == d3 or (c3 * m + m1 == d3):\n                pr = 2\n    if c2 != 0:\n        if d2 % c2 == 0:\n            m = d2 // c2\n            m1 = d1 - c1\n            if c3 + m1 == d3 or c3 * m == d3 or (c3 + m1) * m == d3 or (c3 * m + m1 == d3):\n                pr = 2\n    if c1 != 0 and c2 != 0:\n        if d1 % c1 == 0 and d2 % c2 == 0:\n            m = d1 // c1\n            m1 = d2 // c2\n            if c3 * m == d3 or c3 * m1 == d3 or c3 * m * m1 == d3:\n                pr = 2\n    if c1 != c2:\n        if (d1 - d2) % (c1 - c2) == 0:\n            m = (d1 - d2) // (c1 - c2)\n            m1 = d1 - c1 * m\n            if m == 1 or m1 == 0 or c3 + m1 == d3 or (c3 * m == d3) or (c3 * m + m1 == d3):\n                pr = 2\n    if d1 != d2:\n        if (c1 * d2 - c2 * d1) % (d1 - d2) == 0:\n            m = (c1 * d2 - c2 * d1) // (d1 - d2)\n            if c1 + m != 0:\n                if d1 % (c1 + m) == 0:\n                    m1 = d1 // (c1 + m)\n                    if m == 0 or m1 == 1 or c3 + m == d3 or (c3 * m1 == d3) or ((c3 + m) * m1 == d3):\n                        pr = 2\n    if d1 == d2 and c1 == c2:\n        pr = 2\n    if c3 + (d1 - c1) == d3 or c3 + (d2 - c2) == d3 or c3 + (d1 - c1) + (d2 - c2) == d3:\n        pr = 2\n    return pr\nfor i in range(int(input())):\n    (a1, a2, a3) = map(int, input().split())\n    (b1, b2, b3) = map(int, input().split())\n    (d1, d2, d3) = (b1 - a1, b2 - a2, b3 - a3)\n    (p1, p2, p3) = (div1(a1, b1), div2(a2, b2), div3(a3, b3))\n    (l, l1, c, j, k) = ([a1, a2, a3], [b1, b2, b3], 0, 0, 3)\n    while j < k:\n        if l[j] == l1[j]:\n            c += 1\n            l.remove(l[j])\n            l1.remove(l1[j])\n            k -= 1\n        else:\n            j += 1\n    if c == 3 or c == 2:\n        print(3 - c)\n    elif c == 1:\n        if l1[0] - l[0] == l1[1] - l[1]:\n            print(1)\n        elif l[0] != 0 and l[1] != 0:\n            print(1) if l1[0] % l[0] == 0 and l1[1] % l[1] == 0 and (l1[0] / l[0] == l1[1] / l[1]) else print(2)\n        else:\n            print(2)\n    elif d1 == d2 and d2 == d3 or (p1 == p2 and p2 == p3):\n        print(1)\n    else:\n        (pr1, pr2, pr3) = (3, 3, 3)\n        pr1 = unique(a1, b1, a2, b2, a3, b3)\n        pr2 = unique(a3, b3, a1, b1, a2, b2)\n        pr3 = unique(a2, b2, a3, b3, a1, b1)\n        print(min(pr1, pr2, pr3))", "def div1(a1, b1):\n    p = 10 ** 10\n    if a1 != 0:\n        p1 = b1 // a1 if b1 % a1 == 0 else p + 1\n    else:\n        p1 = 0 if b1 == 0 else p + 1\n    return p1\n\ndef div2(a2, b2):\n    p = 10 ** 10\n    if a2 != 0:\n        p2 = b2 // a2 if b2 % a2 == 0 else p + 2\n    else:\n        p2 = 0 if b2 == 0 else p + 2\n    return p2\n\ndef div3(a3, b3):\n    p = 10 ** 10\n    if a3 != 0:\n        p3 = b3 // a3 if b3 % a3 == 0 else p + 3\n    else:\n        p3 = 0 if b3 == 0 else p + 3\n    return p3\n\ndef unique(c1, d1, c2, d2, c3, d3):\n    pr = 3\n    if c1 != 0:\n        if d1 % c1 == 0:\n            m = d1 // c1\n            m1 = d2 - c2\n            if c3 + m1 == d3 or c3 * m == d3 or (c3 + m1) * m == d3 or (c3 * m + m1 == d3):\n                pr = 2\n    if c2 != 0:\n        if d2 % c2 == 0:\n            m = d2 // c2\n            m1 = d1 - c1\n            if c3 + m1 == d3 or c3 * m == d3 or (c3 + m1) * m == d3 or (c3 * m + m1 == d3):\n                pr = 2\n    if c1 != 0 and c2 != 0:\n        if d1 % c1 == 0 and d2 % c2 == 0:\n            m = d1 // c1\n            m1 = d2 // c2\n            if c3 * m == d3 or c3 * m1 == d3 or c3 * m * m1 == d3:\n                pr = 2\n    if c1 != c2:\n        if (d1 - d2) % (c1 - c2) == 0:\n            m = (d1 - d2) // (c1 - c2)\n            m1 = d1 - c1 * m\n            if m == 1 or m1 == 0 or c3 + m1 == d3 or (c3 * m == d3) or (c3 * m + m1 == d3):\n                pr = 2\n    if d1 != d2:\n        if (c1 * d2 - c2 * d1) % (d1 - d2) == 0:\n            m = (c1 * d2 - c2 * d1) // (d1 - d2)\n            if c1 + m != 0:\n                if d1 % (c1 + m) == 0:\n                    m1 = d1 // (c1 + m)\n                    if m == 0 or m1 == 1 or c3 + m == d3 or (c3 * m1 == d3) or ((c3 + m) * m1 == d3):\n                        pr = 2\n    if d1 == d2 and c1 == c2:\n        pr = 2\n    if c3 + (d1 - c1) == d3 or c3 + (d2 - c2) == d3 or c3 + (d1 - c1) + (d2 - c2) == d3:\n        pr = 2\n    return pr\nfor i in range(int(input())):\n    (a1, a2, a3) = map(int, input().split())\n    (b1, b2, b3) = map(int, input().split())\n    d1 = b1 - a1\n    d2 = b2 - a2\n    d3 = b3 - a3\n    p1 = div1(a1, b1)\n    p2 = div2(a2, b2)\n    p3 = div3(a3, b3)\n    l = [a1, a2, a3]\n    l1 = [b1, b2, b3]\n    c = 0\n    j = 0\n    k = 3\n    while j < k:\n        if l[j] == l1[j]:\n            c += 1\n            l.remove(l[j])\n            l1.remove(l1[j])\n            k -= 1\n        else:\n            j += 1\n    if c == 3 or c == 2:\n        print(3 - c)\n    elif c == 1:\n        if l1[0] - l[0] == l1[1] - l[1]:\n            print(1)\n        elif l[0] != 0 and l[1] != 0:\n            print(1) if l1[0] % l[0] == 0 and l1[1] % l[1] == 0 and (l1[0] / l[0] == l1[1] / l[1]) else print(2)\n        else:\n            print(2)\n    elif d1 == d2 and d2 == d3 or (p1 == p2 and p2 == p3):\n        print(1)\n    else:\n        (pr1, pr2, pr3) = (3, 3, 3)\n        pr1 = unique(a1, b1, a2, b2, a3, b3)\n        pr2 = unique(a3, b3, a1, b1, a2, b2)\n        pr3 = unique(a2, b2, a3, b3, a1, b1)\n        print(min(pr1, pr2, pr3))", "def div1(a1, b1):\n    p = 10 ** 10\n    if a1 != 0:\n        p1 = b1 // a1 if b1 % a1 == 0 else p + 1\n    else:\n        p1 = 0 if b1 == 0 else p + 1\n    return p1\n\ndef div2(a2, b2):\n    p = 10 ** 10\n    if a2 != 0:\n        p2 = b2 // a2 if b2 % a2 == 0 else p + 2\n    else:\n        p2 = 0 if b2 == 0 else p + 2\n    return p2\n\ndef div3(a3, b3):\n    p = 10 ** 10\n    if a3 != 0:\n        if b3 % a3 == 0:\n            p3 = b3 // a3\n        else:\n            p3 = p + 3\n    elif b3 == 0:\n        p3 = 0\n    else:\n        p3 = p + 3\n    return p3\n\ndef unique(c1, d1, c2, d2, c3, d3):\n    pr = 3\n    if c1 != 0:\n        if d1 % c1 == 0:\n            m = d1 // c1\n            m1 = d2 - c2\n            if c3 + m1 == d3 or c3 * m == d3 or (c3 + m1) * m == d3 or (c3 * m + m1 == d3):\n                pr = 2\n    if c2 != 0:\n        if d2 % c2 == 0:\n            m = d2 // c2\n            m1 = d1 - c1\n            if c3 + m1 == d3 or c3 * m == d3 or (c3 + m1) * m == d3 or (c3 * m + m1 == d3):\n                pr = 2\n    if c1 != 0 and c2 != 0:\n        if d1 % c1 == 0 and d2 % c2 == 0:\n            m = d1 // c1\n            m1 = d2 // c2\n            if c3 * m == d3 or c3 * m1 == d3 or c3 * m * m1 == d3:\n                pr = 2\n    if c1 != c2:\n        if (d1 - d2) % (c1 - c2) == 0:\n            m = (d1 - d2) // (c1 - c2)\n            m1 = d1 - c1 * m\n            if m == 1 or m1 == 0 or c3 + m1 == d3 or (c3 * m == d3) or (c3 * m + m1 == d3):\n                pr = 2\n    if d1 != d2:\n        if (c1 * d2 - c2 * d1) % (d1 - d2) == 0:\n            m = (c1 * d2 - c2 * d1) // (d1 - d2)\n            if c1 + m != 0:\n                if d1 % (c1 + m) == 0:\n                    m1 = d1 // (c1 + m)\n                    if m == 0 or m1 == 1 or c3 + m == d3 or (c3 * m1 == d3) or ((c3 + m) * m1 == d3):\n                        pr = 2\n    if d1 == d2 and c1 == c2:\n        pr = 2\n    if c3 + (d1 - c1) == d3 or c3 + (d2 - c2) == d3 or c3 + (d1 - c1) + (d2 - c2) == d3:\n        pr = 2\n    return pr\nfor i in range(int(input())):\n    (a1, a2, a3) = map(int, input().split())\n    (b1, b2, b3) = map(int, input().split())\n    d1 = b1 - a1\n    d2 = b2 - a2\n    d3 = b3 - a3\n    p1 = div1(a1, b1)\n    p2 = div2(a2, b2)\n    p3 = div3(a3, b3)\n    l = [a1, a2, a3]\n    l1 = [b1, b2, b3]\n    c = 0\n    j = 0\n    k = 3\n    while j < k:\n        if l[j] == l1[j]:\n            c += 1\n            l.remove(l[j])\n            l1.remove(l1[j])\n            k -= 1\n        else:\n            j += 1\n    if c == 3 or c == 2:\n        print(3 - c)\n    elif c == 1:\n        if l1[0] - l[0] == l1[1] - l[1]:\n            print(1)\n        elif l[0] != 0 and l[1] != 0:\n            print(1) if l1[0] % l[0] == 0 and l1[1] % l[1] == 0 and (l1[0] / l[0] == l1[1] / l[1]) else print(2)\n        else:\n            print(2)\n    elif d1 == d2 and d2 == d3 or (p1 == p2 and p2 == p3):\n        print(1)\n    else:\n        pr1 = 3\n        pr2 = 3\n        pr3 = 3\n        pr1 = unique(a1, b1, a2, b2, a3, b3)\n        pr2 = unique(a3, b3, a1, b1, a2, b2)\n        pr3 = unique(a2, b2, a3, b3, a1, b1)\n        print(min(pr1, pr2, pr3))", "def div1(a1, b1):\n    p = 10 ** 10\n    if a1 != 0:\n        if b1 % a1 == 0:\n            p1 = b1 // a1\n        else:\n            p1 = p + 1\n    elif b1 == 0:\n        p1 = 0\n    else:\n        p1 = p + 1\n    return p1\n\ndef div2(a2, b2):\n    p = 10 ** 10\n    if a2 != 0:\n        if b2 % a2 == 0:\n            p2 = b2 // a2\n        else:\n            p2 = p + 2\n    elif b2 == 0:\n        p2 = 0\n    else:\n        p2 = p + 2\n    return p2\n\ndef div3(a3, b3):\n    p = 10 ** 10\n    if a3 != 0:\n        if b3 % a3 == 0:\n            p3 = b3 // a3\n        else:\n            p3 = p + 3\n    elif b3 == 0:\n        p3 = 0\n    else:\n        p3 = p + 3\n    return p3\n\ndef unique(c1, d1, c2, d2, c3, d3):\n    pr = 3\n    if c1 != 0:\n        if d1 % c1 == 0:\n            m = d1 // c1\n            m1 = d2 - c2\n            if c3 + m1 == d3 or c3 * m == d3 or (c3 + m1) * m == d3 or (c3 * m + m1 == d3):\n                pr = 2\n    if c2 != 0:\n        if d2 % c2 == 0:\n            m = d2 // c2\n            m1 = d1 - c1\n            if c3 + m1 == d3 or c3 * m == d3 or (c3 + m1) * m == d3 or (c3 * m + m1 == d3):\n                pr = 2\n    if c1 != 0 and c2 != 0:\n        if d1 % c1 == 0 and d2 % c2 == 0:\n            m = d1 // c1\n            m1 = d2 // c2\n            if c3 * m == d3 or c3 * m1 == d3 or c3 * m * m1 == d3:\n                pr = 2\n    if c1 != c2:\n        if (d1 - d2) % (c1 - c2) == 0:\n            m = (d1 - d2) // (c1 - c2)\n            m1 = d1 - c1 * m\n            if m == 1 or m1 == 0 or c3 + m1 == d3 or (c3 * m == d3) or (c3 * m + m1 == d3):\n                pr = 2\n    if d1 != d2:\n        if (c1 * d2 - c2 * d1) % (d1 - d2) == 0:\n            m = (c1 * d2 - c2 * d1) // (d1 - d2)\n            if c1 + m != 0:\n                if d1 % (c1 + m) == 0:\n                    m1 = d1 // (c1 + m)\n                    if m == 0 or m1 == 1 or c3 + m == d3 or (c3 * m1 == d3) or ((c3 + m) * m1 == d3):\n                        pr = 2\n    if d1 == d2 and c1 == c2:\n        pr = 2\n    if c3 + (d1 - c1) == d3 or c3 + (d2 - c2) == d3 or c3 + (d1 - c1) + (d2 - c2) == d3:\n        pr = 2\n    return pr\nfor i in range(int(input())):\n    (a1, a2, a3) = map(int, input().split())\n    (b1, b2, b3) = map(int, input().split())\n    d1 = b1 - a1\n    d2 = b2 - a2\n    d3 = b3 - a3\n    p1 = div1(a1, b1)\n    p2 = div2(a2, b2)\n    p3 = div3(a3, b3)\n    l = [a1, a2, a3]\n    l1 = [b1, b2, b3]\n    c = 0\n    j = 0\n    k = 3\n    while j < k:\n        if l[j] == l1[j]:\n            c += 1\n            l.remove(l[j])\n            l1.remove(l1[j])\n            k -= 1\n        else:\n            j += 1\n    if c == 3 or c == 2:\n        print(3 - c)\n    elif c == 1:\n        if l1[0] - l[0] == l1[1] - l[1]:\n            print(1)\n        elif l[0] != 0 and l[1] != 0:\n            print(1) if l1[0] % l[0] == 0 and l1[1] % l[1] == 0 and (l1[0] / l[0] == l1[1] / l[1]) else print(2)\n        else:\n            print(2)\n    elif d1 == d2 and d2 == d3 or (p1 == p2 and p2 == p3):\n        print(1)\n    else:\n        pr1 = 3\n        pr2 = 3\n        pr3 = 3\n        pr1 = unique(a1, b1, a2, b2, a3, b3)\n        pr2 = unique(a3, b3, a1, b1, a2, b2)\n        pr3 = unique(a2, b2, a3, b3, a1, b1)\n        print(min(pr1, pr2, pr3))", "def div1(a1, b1):\n    p = 10 ** 10\n    if a1 != 0:\n        if b1 % a1 == 0:\n            p1 = b1 // a1\n        else:\n            p1 = p + 1\n    elif b1 == 0:\n        p1 = 0\n    else:\n        p1 = p + 1\n    return p1\n\ndef div2(a2, b2):\n    p = 10 ** 10\n    if a2 != 0:\n        if b2 % a2 == 0:\n            p2 = b2 // a2\n        else:\n            p2 = p + 2\n    elif b2 == 0:\n        p2 = 0\n    else:\n        p2 = p + 2\n    return p2\n\ndef div3(a3, b3):\n    p = 10 ** 10\n    if a3 != 0:\n        if b3 % a3 == 0:\n            p3 = b3 // a3\n        else:\n            p3 = p + 3\n    elif b3 == 0:\n        p3 = 0\n    else:\n        p3 = p + 3\n    return p3\n\ndef unique(c1, d1, c2, d2, c3, d3):\n    pr = 3\n    if c1 != 0:\n        if d1 % c1 == 0:\n            m = d1 // c1\n            m1 = d2 - c2\n            if c3 + m1 == d3 or c3 * m == d3 or (c3 + m1) * m == d3 or (c3 * m + m1 == d3):\n                pr = 2\n    if c2 != 0:\n        if d2 % c2 == 0:\n            m = d2 // c2\n            m1 = d1 - c1\n            if c3 + m1 == d3 or c3 * m == d3 or (c3 + m1) * m == d3 or (c3 * m + m1 == d3):\n                pr = 2\n    if c1 != 0 and c2 != 0:\n        if d1 % c1 == 0 and d2 % c2 == 0:\n            m = d1 // c1\n            m1 = d2 // c2\n            if c3 * m == d3 or c3 * m1 == d3 or c3 * m * m1 == d3:\n                pr = 2\n    if c1 != c2:\n        if (d1 - d2) % (c1 - c2) == 0:\n            m = (d1 - d2) // (c1 - c2)\n            m1 = d1 - c1 * m\n            if m == 1 or m1 == 0 or c3 + m1 == d3 or (c3 * m == d3) or (c3 * m + m1 == d3):\n                pr = 2\n    if d1 != d2:\n        if (c1 * d2 - c2 * d1) % (d1 - d2) == 0:\n            m = (c1 * d2 - c2 * d1) // (d1 - d2)\n            if c1 + m != 0:\n                if d1 % (c1 + m) == 0:\n                    m1 = d1 // (c1 + m)\n                    if m == 0 or m1 == 1 or c3 + m == d3 or (c3 * m1 == d3) or ((c3 + m) * m1 == d3):\n                        pr = 2\n    if d1 == d2 and c1 == c2:\n        pr = 2\n    if c3 + (d1 - c1) == d3 or c3 + (d2 - c2) == d3 or c3 + (d1 - c1) + (d2 - c2) == d3:\n        pr = 2\n    return pr\nfor i in range(int(input())):\n    (a1, a2, a3) = map(int, input().split())\n    (b1, b2, b3) = map(int, input().split())\n    d1 = b1 - a1\n    d2 = b2 - a2\n    d3 = b3 - a3\n    p1 = div1(a1, b1)\n    p2 = div2(a2, b2)\n    p3 = div3(a3, b3)\n    l = [a1, a2, a3]\n    l1 = [b1, b2, b3]\n    c = 0\n    j = 0\n    k = 3\n    while j < k:\n        if l[j] == l1[j]:\n            c = c + 1\n            l.remove(l[j])\n            l1.remove(l1[j])\n            k = k - 1\n        else:\n            j = j + 1\n    if c == 3 or c == 2:\n        print(3 - c)\n    elif c == 1:\n        if l1[0] - l[0] == l1[1] - l[1]:\n            print(1)\n        elif l[0] != 0 and l[1] != 0:\n            print(1) if l1[0] % l[0] == 0 and l1[1] % l[1] == 0 and (l1[0] / l[0] == l1[1] / l[1]) else print(2)\n        else:\n            print(2)\n    elif d1 == d2 and d2 == d3 or (p1 == p2 and p2 == p3):\n        print(1)\n    else:\n        pr1 = 3\n        pr2 = 3\n        pr3 = 3\n        pr1 = unique(a1, b1, a2, b2, a3, b3)\n        pr2 = unique(a3, b3, a1, b1, a2, b2)\n        pr3 = unique(a2, b2, a3, b3, a1, b1)\n        print(min(pr1, pr2, pr3))", "import math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef binR(a, i):\n    vd = 100\n    har = 200\n    kite = 300\n    kot = 400\n    v = [[0, 0], [0, 0], [0, 0]]\n    if i < 8:\n        nm = i\n        for k in range(3):\n            v[k][0] = a[k]\n            v[k][1] = 0\n            if nm % 2 != 0:\n                v[k][1] = 1\n            nm = nm // 2\n    else:\n        nm = i % 7\n        if nm == 0:\n            nm = 7\n        for k in range(3):\n            if nm % 2 != 0:\n                v[k][0] = 0\n                v[k][1] = a[k]\n            else:\n                v[k][0] = a[k]\n                v[k][1] = 0\n            nm = nm // 2\n    vd = 100\n    har = 200\n    kite = 300\n    kot = 400\n    return v\n\ndef single(a, b):\n    d = 0\n    p = 1\n    vd = 100\n    har = 200\n    kite = 300\n    kot = 400\n    md = 10 ** 9 + 7\n    diff = [0, 0, 0]\n    pod = [md, md, md]\n    for i in range(3):\n        diff[i] = b[i] - a[i]\n        if d == 0:\n            d = diff[i]\n        if diff[i] == 0:\n            pod[i] = 1\n        elif a[i] != 0:\n            if b[i] % a[i] == 0:\n                pod[i] = b[i] / a[i]\n                p = pod[i]\n    i = 0\n    while i != 3:\n        if diff[i] == 0 or diff[i] == d:\n            vd = 100\n            har = 200\n            kite = 300\n            kot = 400\n            i += 1\n        else:\n            break\n    if i == 3:\n        return 1\n    i = 0\n    while i != 3:\n        if pod[i] == 1 or pod[i] == p:\n            i += 1\n        else:\n            break\n    if i == 3:\n        return 1\n    vd = 100\n    har = 200\n    kite = 300\n    kot = 400\n    return 3\n\ndef bfill(b, j):\n    vd = 100\n    har = 200\n    kite = 300\n    kot = 400\n    k = 0\n    for i in range(3):\n        if j % 2 != 0:\n            if k == 0:\n                k = b[i]\n            else:\n                k = gcd(k, b[i])\n        j = j // 2\n    return k\n\ndef bfill2(j, b, r):\n    c = [0, 0, 0]\n    vd = 100\n    har = 200\n    kite = 300\n    kot = 400\n    for i in range(3):\n        if j % 2 != 0:\n            c[i] = b[i] / r\n        else:\n            c[i] = b[i]\n        j = j // 2\n    return c\n\ndef find(v1, v2, kk, a):\n    den1 = 0\n    den2 = 0\n    u_n = 0\n    vd = 100\n    har = 200\n    kite = 300\n    kot = 400\n    my1 = gcd(v1[0][1], v1[1][1])\n    my1 = gcd(v1[2][1], my1)\n    my2 = gcd(v2[0][1], v2[1][1])\n    my2 = gcd(v2[2][1], my2)\n    vd = 100\n    har = 200\n    kite = 300\n    kot = 400\n    if my1 == 0:\n        my1 = 1\n    if my2 == 0:\n        my2 = 1\n    for k in range(3):\n        v1[k][1] = v1[k][1] // my1\n        v2[k][1] = v2[k][1] // my2\n    vd = 100\n    har = 200\n    kite = 300\n    kot = 400\n    for k in range(3):\n        den1 += v1[k][1] ** 2\n        den2 += v2[k][1] ** 2\n        u_n += v1[k][1] * v2[k][1]\n    u_d = den1 * den2\n    if u_n ** 2 == u_d:\n        return 3\n    t1 = 0\n    t2 = 0\n    for k in range(3):\n        t1 += (v2[k][0] - v1[k][0]) * v1[k][1]\n        t2 += (v2[k][0] - v1[k][0]) * v2[k][1]\n    if u_d == 0:\n        return 3\n    s1 = den2 * t1 - u_n * t2\n    s2 = u_d - u_n ** 2\n    s22 = 0 - s2\n    gc1 = gcd(abs(s1), abs(s2))\n    if gc1 != 0 and s1 != 0 and (s2 != 0):\n        s1 = s1 // gc1\n        s2 = s2 // gc1\n    vd = 100\n    har = 200\n    kite = 300\n    kot = 400\n    s11 = t2 * den1 - u_n * t1\n    gc1 = gcd(abs(s11), abs(s22))\n    if gc1 != 0 and s11 != 0 and (s22 != 0):\n        s11 = s11 // gc1\n        s22 = s22 // gc1\n    if s2 == 0 or s22 == 0:\n        return 3\n    p = [0, 0, 0]\n    for k in range(3):\n        if s1 * v1[k][1] % s2 != 0:\n            return 3\n        p1 = v1[k][0] + s1 * v1[k][1] // s2\n        if s11 * v2[k][1] % s22 != 0:\n            return 3\n        p2 = v2[k][0] + s11 * v2[k][1] // s22\n        if p1 != p2:\n            return 3\n        p[k] = p1\n    vd = 100\n    har = 200\n    kite = 300\n    kot = 400\n    if kk == 1:\n        for i in range(3):\n            if p[i] % a[i] != 0:\n                return 3\n    return 2\n\ndef call():\n    a = []\n    a = list(map(int, input().split()))\n    b = []\n    b = list(map(int, input().split()))\n    if a[0] == b[0] and a[1] == b[1] and (a[2] == b[2]):\n        return 0\n    vd = 100\n    har = 200\n    kite = 300\n    kot = 400\n    dis = single(a, b)\n    if dis == 1:\n        return 1\n    for j in range(1, 8):\n        k = bfill(b, j)\n        for i in range(2, math.ceil(abs(k) ** 0.5)):\n            if abs(k) % i == 0:\n                c = bfill2(j, b, i)\n                if single(a, c) == 1:\n                    return 2\n                c = bfill2(j, b, -i)\n                if single(a, c) == 1:\n                    return 2\n                ii = abs(k) // i\n                if i != ii:\n                    c = bfill2(j, b, ii)\n                    if single(a, c) == 1:\n                        return 2\n                    c = bfill2(j, b, -ii)\n                    if single(a, c) == 1:\n                        vd = 100\n                        har = 200\n                        kite = 300\n                        kot = 400\n                        return 2\n        if k != 0 and k != 1:\n            c = bfill2(j, b, k)\n            if single(a, c) == 1:\n                return 2\n            c = bfill2(j, b, -k)\n            if single(a, c) == 1:\n                return 2\n        c = bfill2(j, b, -1)\n        if single(a, c) == 1:\n            return 2\n    for i in range(1, 15):\n        for j in range(1, 8):\n            v1 = binR(a, i)\n            v2 = binR(b, j)\n            kk = 0\n            if i > 7:\n                kk = 1\n            k = find(v1, v2, kk, a)\n            vd = 100\n            har = 200\n            kite = 300\n            kot = 400\n            if k == 2:\n                return 2\n    return 3\nt = int(input())\nwhile t != 0:\n    k = call()\n    vd = 100\n    har = 200\n    kite = 300\n    kot = 400\n    print(k)\n    t -= 1", "def checkpoint1(p, q, r, a, b, c):\n    if p == a and b - q == c - r:\n        return True\n    if q == b and a - p == c - r:\n        return True\n    if c == r and a - p == b - q:\n        return True\n    if p == a and q == b:\n        return True\n    if p == a and c == r:\n        return True\n    if c == r and b == q:\n        return True\n    if a - p == b - q and a - p == c - r:\n        return True\n    if q != 0 and r != 0 and (b % q == 0) and (c % r == 0) and (p == a) and (b / q == c / r):\n        return True\n    if p != 0 and r != 0 and (a % p == 0) and (c % r == 0) and (q == b) and (a / p == c / r):\n        return True\n    if p != 0 and q != 0 and (a % p == 0) and (b % q == 0) and (c == r) and (a / p == b / q):\n        return True\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0) and (a / p == b / q) and (a / p == c / r):\n        return True\n    return False\n\ndef checkpoint2(p, q, r, a, b, c):\n    x1 = a - p\n    y1 = b - q\n    z1 = c - r\n    if p == a or q == b or r == c:\n        return True\n    if a - p == b - q or b - q == c - r or c - r == a - p:\n        return True\n    if p != 0 and q != 0 and (a % p == 0 and b % q == 0) and (a / p == b / q):\n        return True\n    if p != 0 and r != 0 and (a % p == 0 and c % r == 0) and (a / p == c / r):\n        return True\n    if q != 0 and r != 0 and (b % q == 0 and c % r == 0) and (b / q == c / r):\n        return True\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0) and (a / p * b / q == c / r or a / p * c / r == b / q or b / q * c / r == a / p):\n        return True\n    if x1 + y1 == z1 or x1 + z1 == y1 or y1 + z1 == x1:\n        return True\n    if q + x1 != 0 and r != 0 and (b % (q + x1) == 0) and (c % r == 0) and (b / (q + x1) == c / r):\n        return True\n    if p != 0 and a % p == 0 and (b - q * a / p == c - r):\n        return True\n    if q + z1 != 0 and p != 0 and (b % (q + z1) == 0) and (a % p == 0) and (b / (q + z1) == a / p):\n        return True\n    if r != 0 and c % r == 0 and (b - q * c / r == a - p):\n        return True\n    if p + y1 != 0 and r != 0 and (a % (p + y1) == 0) and (c % r == 0) and (a / (p + y1) == c / r):\n        return True\n    if q != 0 and b % q == 0 and (a - p * b / q == c - r):\n        return True\n    if p + z1 != 0 and q != 0 and (a % (p + z1) == 0) and (b % q == 0) and (a / (p + z1) == b / q):\n        return True\n    if r != 0 and c % r == 0 and (a - p * c / r == b - q):\n        return True\n    if r + y1 != 0 and p != 0 and (c % (r + y1) == 0) and (a % p == 0) and (c / (r + y1) == a / p):\n        return True\n    if q != 0 and b % q == 0 and (c - r * b / q == a - p):\n        return True\n    if r + x1 != 0 and q != 0 and (c % (r + x1) == 0) and (b % q == 0) and (c / (r + x1) == b / q):\n        return True\n    if p != 0 and a % p == 0 and (c - r * a / p == b - q):\n        return True\n    if p + z1 != 0 and q + z1 != 0 and (a % (p + z1) == 0) and (b % (q + z1) == 0) and (a / (p + z1) == b / (q + z1)):\n        return True\n    if r != 0 and c % r == 0 and (a - p * c / r == b - q * c / r):\n        return True\n    if p + y1 != 0 and r + y1 != 0 and (a % (p + y1) == 0) and (c % (r + y1) == 0) and (a / (p + y1) == c / (r + y1)):\n        return True\n    if q != 0 and b % q == 0 and (a - p * b / q == c - r * b / q):\n        return True\n    if q + x1 != 0 and r + x1 != 0 and (b % (q + x1) == 0) and (c % (r + x1) == 0) and (b / (q + x1) == c / (r + x1)):\n        return True\n    if p != 0 and a % p == 0 and (b - q * a / p == c - r * a / p):\n        return True\n    if r != 0 and c % r == 0 and (c / r != 0) and (a % (c / r) == 0) and (b % (c / r) == 0) and (a / (c / r) - p == b / (c / r) - q):\n        return True\n    if p != 0 and q != 0 and ((a - z1) % p == 0) and ((b - z1) % q == 0) and ((a - z1) / p == (b - z1) / q):\n        return True\n    if q != 0 and b % q == 0 and (b / q != 0) and (a % (b / q) == 0) and (c % (b / q) == 0) and (a / (b / q) - p == c / (b / q) - r):\n        return True\n    if p != 0 and r != 0 and ((a - y1) % p == 0) and ((c - y1) % r == 0) and ((a - y1) / p == (c - y1) / r):\n        return True\n    if p != 0 and a % p == 0 and (a / p != 0) and (b % (a / p) == 0) and (c % (a / p) == 0) and (b / (a / p) - q == c / (a / p) - r):\n        return True\n    if q != 0 and r != 0 and ((b - x1) % q == 0) and ((c - x1) % r == 0) and ((b - x1) / q == (c - x1) / r):\n        return True\n    if q - p != 0 and r - q != 0 and ((b - a) % (q - p) == 0) and ((c - b) % (r - q) == 0) and ((b - a) / (q - p) == (c - b) / (r - q)):\n        return True\n    return False\ntest = int(input())\nfor _ in range(test):\n    (x1, y1, z1) = [int(x) for x in input().split()]\n    (a, b, c) = [int(x) for x in input().split()]\n    if a == x1 and b == y1 and (c == z1):\n        print(0)\n    elif checkpoint1(x1, y1, z1, a, b, c):\n        print(1)\n    elif checkpoint2(x1, y1, z1, a, b, c):\n        print(2)\n    else:\n        print(3)", "t = int(input())\nwhile t > 0:\n    li1 = [int(i) for i in input().split()]\n    li2 = [int(i) for i in input().split()]\n    s1 = set()\n    s2 = set()\n    (val, ans) = (0, 3)\n    for i in range(3):\n        if li1[i] == li2[i]:\n            val += 1\n    if val == 3:\n        ans = 0\n    elif val == 2:\n        ans = 1\n    else:\n        for i in range(3):\n            if li2[i] - li1[i] != 0:\n                s1.add(li2[i] - li1[i])\n            if li1[i] != 0 and li2[i] % li1[i] == 0 and (li2[i] // li1[i] != 1):\n                s2.add(li2[i] // li1[i])\n        temp = []\n        for i in s1:\n            for j in range(7):\n                temp = [li1[k] for k in range(3)]\n                if j == 0:\n                    temp[0] += i\n                    temp[1] += i\n                elif j == 1:\n                    temp[0] += i\n                    temp[2] += i\n                elif j == 2:\n                    temp[1] += i\n                    temp[2] += i\n                elif j == 3:\n                    temp[0] += i\n                    temp[1] += i\n                    temp[2] += i\n                elif j == 4:\n                    temp[0] += i\n                elif j == 5:\n                    temp[1] += i\n                elif j == 6:\n                    temp[2] += i\n                a = 0\n                for k in range(3):\n                    if temp[k] == li2[k]:\n                        a += 1\n                if a == 3:\n                    ans = 1\n                if a == 2:\n                    ans = min(ans, 2)\n                s3 = set()\n                for k in range(3):\n                    if temp[k] != 0 and li2[k] % temp[k] == 0 and (li2[k] // temp[k] != 1):\n                        s3.add(li2[k] // temp[k])\n                temp1 = []\n                for k in s3:\n                    for l in range(7):\n                        temp1 = [temp[m] for m in range(3)]\n                        if l == 0:\n                            temp1[0] *= k\n                            temp1[1] *= k\n                        elif l == 1:\n                            temp1[0] *= k\n                            temp1[2] *= k\n                        elif l == 2:\n                            temp1[1] *= k\n                            temp1[2] *= k\n                        elif l == 3:\n                            temp1[0] *= k\n                            temp1[1] *= k\n                            temp1[2] *= k\n                        elif l == 4:\n                            temp1[0] *= k\n                        elif l == 5:\n                            temp1[1] *= k\n                        elif l == 6:\n                            temp1[2] *= k\n                        for m in range(3):\n                            if li2[m] != temp1[m]:\n                                break\n                            if m == 2:\n                                ans = min(ans, 2)\n                s4 = set()\n                for k in range(3):\n                    if li2[k] - temp[k] != 0:\n                        s4.add(li2[k] - temp[k])\n                temp2 = []\n                for k in s4:\n                    for l in range(7):\n                        temp2 = [temp[m] for m in range(3)]\n                        if l == 0:\n                            temp2[0] += k\n                            temp2[1] += k\n                        elif l == 1:\n                            temp2[0] += k\n                            temp2[2] += k\n                        elif l == 2:\n                            temp2[1] += k\n                            temp2[2] += k\n                        elif l == 3:\n                            temp2[0] += k\n                            temp2[1] += k\n                            temp2[2] += k\n                        elif l == 4:\n                            temp2[0] += k\n                        elif l == 5:\n                            temp2[1] += k\n                        elif l == 6:\n                            temp2[2] += k\n                        for m in range(3):\n                            if li2[m] != temp2[m]:\n                                break\n                            if m == 2:\n                                ans = min(ans, 2)\n                s4.clear()\n                count = 0\n                for k in range(3):\n                    var = li2[k] - i\n                    if li1[k] != 0 and var % li1[k] == 0:\n                        if var // li1[k] != 1:\n                            s4.add(var // li1[k])\n                        count += 1\n                if len(s4) == 1 and count == 3:\n                    ans = min(ans, 2)\n        if ans == 3 or ans == 2:\n            d1 = li2[2] - li2[1]\n            d2 = li2[1] - li2[0]\n            d3 = li1[2] - li1[1]\n            d4 = li1[1] - li1[0]\n            d5 = li2[2] - li2[0]\n            d6 = li1[2] - li1[0]\n            if d3 != 0 and d4 != 0 and (d6 != 0) and (d1 % d3 == 0) and (d2 % d4 == 0) and (d5 % d6 == 0) and (d1 // d3 == d2 // d4) and (d1 // d3 == d5 // d6):\n                ans = min(ans, 2)\n            for i in s2:\n                s3 = set()\n                count = 0\n                for j in range(3):\n                    temp[j] = li2[j]\n                    if i != 0 and temp[j] % i == 0:\n                        temp[j] //= i\n                        temp[j] -= li1[j]\n                        if temp[j] != 0:\n                            s3.add(temp[j])\n                        count += 1\n                if len(s3) == 1 and count == 3:\n                    ans = min(ans, 2)\n            for i in s2:\n                for j in range(7):\n                    temp = [li1[k] for k in range(3)]\n                    if j == 0:\n                        temp[0] *= i\n                        temp[1] *= i\n                    elif j == 1:\n                        temp[0] *= i\n                        temp[2] *= i\n                    elif j == 2:\n                        temp[1] *= i\n                        temp[2] *= i\n                    elif j == 3:\n                        temp[0] *= i\n                        temp[1] *= i\n                        temp[2] *= i\n                    elif j == 4:\n                        temp[0] *= i\n                    elif j == 5:\n                        temp[1] *= i\n                    elif j == 6:\n                        temp[2] *= i\n                    a = 0\n                    for k in range(3):\n                        if temp[k] == li2[k]:\n                            a += 1\n                    if a == 3:\n                        ans = 1\n                    elif a == 2:\n                        ans = min(ans, 2)\n                    temp2 = []\n                    s4 = set()\n                    for k in range(3):\n                        if temp[k] != 0 and li2[k] % temp[k] == 0 and (li2[k] // temp[k] != 1):\n                            s4.add(li2[k] // temp[k])\n                    temp2 = []\n                    for k in s4:\n                        for l in range(7):\n                            temp2 = [temp[m] for m in range(3)]\n                            if l == 0:\n                                temp2[0] *= k\n                                temp2[1] *= k\n                            elif l == 1:\n                                temp2[0] *= k\n                                temp2[2] *= k\n                            elif l == 2:\n                                temp2[1] *= k\n                                temp2[2] *= k\n                            elif l == 3:\n                                temp2[0] *= k\n                                temp2[1] *= k\n                                temp2[2] *= k\n                            elif l == 4:\n                                temp2[0] *= k\n                            elif l == 5:\n                                temp2[1] *= k\n                            elif l == 6:\n                                temp2[2] *= k\n                            for m in range(3):\n                                if li2[m] != temp2[m]:\n                                    break\n                                if m == 2:\n                                    ans = min(ans, 2)\n                    s4.clear()\n                    for k in range(3):\n                        var = li2[k] - temp[k]\n                        if var != 0:\n                            s4.add(var)\n                    if len(s4) == 1:\n                        ans = min(ans, 2)\n    print(ans)\n    t -= 1", "def checkpoint1(p, q, r, a, b, c):\n    if p == a and b - q == c - r:\n        return True\n    if q == b and a - p == c - r:\n        return True\n    if c == r and a - p == b - q:\n        return True\n    if p == a and q == b:\n        return True\n    if p == a and c == r:\n        return True\n    if c == r and b == q:\n        return True\n    if a - p == b - q and a - p == c - r:\n        return True\n    if q != 0 and r != 0 and (b % q == 0) and (c % r == 0) and (p == a) and (b / q == c / r):\n        return True\n    if p != 0 and r != 0 and (a % p == 0) and (c % r == 0) and (q == b) and (a / p == c / r):\n        return True\n    if p != 0 and q != 0 and (a % p == 0) and (b % q == 0) and (c == r) and (a / p == b / q):\n        return True\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0) and (a / p == b / q) and (a / p == c / r):\n        return True\n    return False\n\ndef checkpoint2(p, q, r, a, b, c):\n    x1 = a - p\n    y1 = b - q\n    z1 = c - r\n    if p == a or q == b or r == c:\n        return True\n    if a - p == b - q or b - q == c - r or c - r == a - p:\n        return True\n    if p != 0 and q != 0 and (a % p == 0 and b % q == 0) and (a / p == b / q):\n        return True\n    if p != 0 and r != 0 and (a % p == 0 and c % r == 0) and (a / p == c / r):\n        return True\n    if q != 0 and r != 0 and (b % q == 0 and c % r == 0) and (b / q == c / r):\n        return True\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0) and (a / p * b / q == c / r or a / p * c / r == b / q or b / q * c / r == a / p):\n        return True\n    if x1 + y1 == z1 or x1 + z1 == y1 or y1 + z1 == x1:\n        return True\n    if q + x1 != 0 and r != 0 and (b % (q + x1) == 0) and (c % r == 0) and (b / (q + x1) == c / r):\n        return True\n    if p != 0 and a % p == 0 and (b - q * a / p == c - r):\n        return True\n    if q + z1 != 0 and p != 0 and (b % (q + z1) == 0) and (a % p == 0) and (b / (q + z1) == a / p):\n        return True\n    if r != 0 and c % r == 0 and (b - q * c / r == a - p):\n        return True\n    if p + y1 != 0 and r != 0 and (a % (p + y1) == 0) and (c % r == 0) and (a / (p + y1) == c / r):\n        return True\n    if q != 0 and b % q == 0 and (a - p * b / q == c - r):\n        return True\n    if p + z1 != 0 and q != 0 and (a % (p + z1) == 0) and (b % q == 0) and (a / (p + z1) == b / q):\n        return True\n    if r != 0 and c % r == 0 and (a - p * c / r == b - q):\n        return True\n    if r + y1 != 0 and p != 0 and (c % (r + y1) == 0) and (a % p == 0) and (c / (r + y1) == a / p):\n        return True\n    if q != 0 and b % q == 0 and (c - r * b / q == a - p):\n        return True\n    if r + x1 != 0 and q != 0 and (c % (r + x1) == 0) and (b % q == 0) and (c / (r + x1) == b / q):\n        return True\n    if p != 0 and a % p == 0 and (c - r * a / p == b - q):\n        return True\n    if p + z1 != 0 and q + z1 != 0 and (a % (p + z1) == 0) and (b % (q + z1) == 0) and (a / (p + z1) == b / (q + z1)):\n        return True\n    if r != 0 and c % r == 0 and (a - p * c / r == b - q * c / r):\n        return True\n    if p + y1 != 0 and r + y1 != 0 and (a % (p + y1) == 0) and (c % (r + y1) == 0) and (a / (p + y1) == c / (r + y1)):\n        return True\n    if q != 0 and b % q == 0 and (a - p * b / q == c - r * b / q):\n        return True\n    if q + x1 != 0 and r + x1 != 0 and (b % (q + x1) == 0) and (c % (r + x1) == 0) and (b / (q + x1) == c / (r + x1)):\n        return True\n    if p != 0 and a % p == 0 and (b - q * a / p == c - r * a / p):\n        return True\n    if r != 0 and c % r == 0 and (c / r != 0) and (a % (c / r) == 0) and (b % (c / r) == 0) and (a / (c / r) - p == b / (c / r) - q):\n        return True\n    if p != 0 and q != 0 and ((a - z1) % p == 0) and ((b - z1) % q == 0) and ((a - z1) / p == (b - z1) / q):\n        return True\n    if q != 0 and b % q == 0 and (b / q != 0) and (a % (b / q) == 0) and (c % (b / q) == 0) and (a / (b / q) - p == c / (b / q) - r):\n        return True\n    if p != 0 and r != 0 and ((a - y1) % p == 0) and ((c - y1) % r == 0) and ((a - y1) / p == (c - y1) / r):\n        return True\n    if p != 0 and a % p == 0 and (a / p != 0) and (b % (a / p) == 0) and (c % (a / p) == 0) and (b / (a / p) - q == c / (a / p) - r):\n        return True\n    if q != 0 and r != 0 and ((b - x1) % q == 0) and ((c - x1) % r == 0) and ((b - x1) / q == (c - x1) / r):\n        return True\n    if q - p != 0 and r - q != 0 and ((b - a) % (q - p) == 0) and ((c - b) % (r - q) == 0) and ((b - a) / (q - p) == (c - b) / (r - q)):\n        return True\n    return False\ntest = int(input())\nfor _ in range(test):\n    (x1, y1, z1) = [int(x) for x in input().split()]\n    (a, b, c) = [int(x) for x in input().split()]\n    if a == x1 and b == y1 and (c == z1):\n        print(0)\n    elif checkpoint1(x1, y1, z1, a, b, c):\n        print(1)\n    elif checkpoint2(x1, y1, z1, a, b, c):\n        print(2)\n    else:\n        print(3)", "from sys import stdin\nfrom itertools import combinations, permutations\nimport functools\n\ndef Chef(w):\n    if ord(w) != ord('w'):\n        return True\n    return False\n\ndef Coin(p, a, q, b, r, c):\n    x = b - a\n    d = q - p\n    if d != 0:\n        y = a - 1 * p * (x / d)\n        if 1 * r * (x / d) + y == c:\n            if x % d == 0:\n                return True\n        if x % d == 0 and r + y == c:\n            return True\n        if x % d == 0 and r * x == c:\n            return True\n    return False\n\ndef Code():\n    return True\n\ndef check(p, a, q, b):\n    if p == a or q == b:\n        return True\n    if a - p == b - q:\n        return True\n    if p != 0 and q != 0 and (a % p == 0) and (b % q == 0) and (a / p == b / q):\n        return True\n    return False\n\ndef CodeStabiliy():\n    return False\nt = int(input())\nfor _ in range(t):\n    (p, q, r) = map(int, input().split())\n    (a, b, c) = map(int, input().split())\n    Chef('p')\n    if p == a and q == b and (r == c):\n        print(0)\n        continue\n    if p == a and check(q, b, r, c) or (q == b and check(p, a, r, c)) or (r == c and check(q, b, p, a)):\n        print(1)\n        continue\n    diff = a - p\n    if q + diff == b and r + diff == c:\n        print(1)\n        continue\n    if p != 0 and a % p == 0:\n        diff = a / p\n        if q * diff == b and r * diff == c:\n            print(1)\n            continue\n    d = 0\n    if p != 0 and a % p == 0:\n        d = a / p\n        if check(q * d, b, r * d, c) or check(q * d, b, r, c) or check(q, b, r * d, c) or check(q, b, r, c):\n            print(2)\n            continue\n    d = a - p\n    if check(q + d, b, r + d, c) or check(q + d, b, r, c) or check(q, b, r + d, c) or check(q, b, r, c):\n        print(2)\n        continue\n    if q != 0 and b % q == 0:\n        d = b / q\n        if check(p * d, a, r * d, c) or check(p * d, a, r, c) or check(p, a, r * d, c) or check(p, a, r, c):\n            print(2)\n            continue\n    d = b - q\n    if check(p + d, a, r + d, c) or check(p + d, a, r, c) or check(p, a, r + d, c) or check(p, a, r, c):\n        print(2)\n        continue\n    if r != 0 and c % r == 0:\n        d = c / r\n        if check(q * d, b, p * d, a) or check(q * d, b, p, a) or check(q, b, p * d, a) or check(q, b, p, a):\n            print(2)\n            continue\n    d = c - r\n    if check(q + d, b, p + d, a) or check(q + d, b, p, a) or check(q, b, p + d, a) or check(q, b, p, a):\n        print(2)\n        continue\n    if Coin(p, a, q, b, r, c) or Coin(p, a, r, c, q, b) or Coin(q, b, r, c, p, a):\n        print(2)\n        continue\n    Code()\n    print(3)", "t = int(input())\nfor _ in range(t):\n    src = list(map(int, input().strip().split()))\n    dest = list(map(int, input().strip().split()))\n    nsrc = []\n    ndest = []\n    for i in range(3):\n        if not src[i] == dest[i]:\n            nsrc.append(src[i])\n            ndest.append(dest[i])\n    if len(nsrc) == 0:\n        print(0)\n    elif len(nsrc) == 1:\n        print(1)\n    elif len(nsrc) == 2:\n        (x1, x2) = (nsrc[0], nsrc[1])\n        (y1, y2) = (ndest[0], ndest[1])\n        if x1 != 0 and x2 != 0 and (y1 % x1 == 0) and (y2 % x2 == 0) and (y1 // x1 == y2 // x2) or y2 - x2 == y1 - x1:\n            print(1)\n        else:\n            print(2)\n    else:\n        (x1, x2, x3) = (nsrc[0], nsrc[1], nsrc[2])\n        (y1, y2, y3) = (ndest[0], ndest[1], ndest[2])\n        if x1 != 0 and x2 != 0 and (x3 != 0) and (y1 % x1 == 0) and (y2 % x2 == 0) and (y3 % x3 == 0) and (y1 // x1 == y2 // x2) and (y2 // x2 == y3 // x3) or (y3 - x3 == y2 - x2 and y2 - x2 == y1 - x1):\n            print(1)\n            continue\n        elif y1 == y2 and y2 == y3:\n            print(2)\n            continue\n        else:\n            if x1 != 0 and y1 % x1 == 0:\n                r1 = y1 // x1\n                if y2 - x2 * r1 == y3 - x3 * r1:\n                    print(2)\n                    continue\n                if y2 == x2 * r1 or y3 == x3 * r1:\n                    print(2)\n                    continue\n                if y2 - x2 * r1 == y3 - x3 or y3 - x3 * r1 == y2 - x2:\n                    print(2)\n                    continue\n                if r1 != 0 and x2 != 0 and (x3 != 0) and (y2 % (x2 * r1) == 0) and (y3 % x3 == 0) and (y3 // x3 == y2 // (x2 * r1)):\n                    print(2)\n                    continue\n                if r1 != 0 and x2 != 0 and (x3 != 0) and (y3 % (x3 * r1) == 0) and (y2 % x2 == 0) and (y2 // x2 == y3 // (x3 * r1)):\n                    print(2)\n                    continue\n            d1 = y1 - x1\n            if y2 == x2 + d1 or y3 == x3 + d1:\n                print(2)\n                continue\n            if x2 + d1 != 0 and x3 != 0 and (y2 % (x2 + d1) == 0) and (y3 % x3 == 0) and (y2 // (x2 + d1) == y3 // x3):\n                print(2)\n                continue\n            if x3 + d1 != 0 and x2 != 0 and (y2 % x2 == 0) and (y3 % (x3 + d1) == 0) and (y2 // x2 == y3 // (x3 + d1)):\n                print(2)\n                continue\n            if x3 != 0 and x2 != 0 and ((y2 - d1) % x2 == 0) and ((y3 - d1) % x3 == 0) and ((y2 - d1) // x2 == (y3 - d1) // x3):\n                print(2)\n                continue\n            if x3 + d1 != 0 and x2 + d1 != 0 and (y2 % (x2 + d1) == 0) and (y3 % (x3 + d1) == 0) and (y2 // (x2 + d1) == y3 // (x3 + d1)):\n                print(2)\n                continue\n            if y2 - (x2 + d1) == y3 - x3 or y2 - x2 == y3 - (x3 + d1):\n                print(2)\n                continue\n            (x1, x2, x3) = (x2, x1, x3)\n            (y1, y2, y3) = (y2, y1, y3)\n            if x1 != 0 and y1 % x1 == 0:\n                r1 = y1 // x1\n                if y2 - x2 * r1 == y3 - x3 * r1:\n                    print(2)\n                    continue\n                if y2 == x2 * r1 or y3 == x3 * r1:\n                    print(2)\n                    continue\n                if y2 - x2 * r1 == y3 - x3 or y3 - x3 * r1 == y2 - x2:\n                    print(2)\n                    continue\n                if r1 != 0 and x2 != 0 and (x3 != 0) and (y2 % (x2 * r1) == 0) and (y3 % x3 == 0) and (y3 // x3 == y2 // (x2 * r1)):\n                    print(2)\n                    continue\n                if r1 != 0 and x2 != 0 and (x3 != 0) and (y3 % (x3 * r1) == 0) and (y2 % x2 == 0) and (y2 // x2 == y3 // (x3 * r1)):\n                    print(2)\n                    continue\n            d1 = y1 - x1\n            if y2 == x2 + d1 or y3 == x3 + d1:\n                print(2)\n                continue\n            if x2 + d1 != 0 and x3 != 0 and (y2 % (x2 + d1) == 0) and (y3 % x3 == 0) and (y2 // (x2 + d1) == y3 // x3):\n                print(2)\n                continue\n            if x3 + d1 != 0 and x2 != 0 and (y2 % x2 == 0) and (y3 % (x3 + d1) == 0) and (y2 // x2 == y3 // (x3 + d1)):\n                print(2)\n                continue\n            if x3 != 0 and x2 != 0 and ((y2 - d1) % x2 == 0) and ((y3 - d1) % x3 == 0) and ((y2 - d1) // x2 == (y3 - d1) // x3):\n                print(2)\n                continue\n            if x3 + d1 != 0 and x2 + d1 != 0 and (y2 % (x2 + d1) == 0) and (y3 % (x3 + d1) == 0) and (y2 // (x2 + d1) == y3 // (x3 + d1)):\n                print(2)\n                continue\n            if y2 - (x2 + d1) == y3 - x3 or y2 - x2 == y3 - (x3 + d1):\n                print(2)\n                continue\n            (x1, x2, x3) = (x3, x2, x1)\n            (y1, y2, y3) = (y3, y2, y1)\n            if x1 != 0 and y1 % x1 == 0:\n                r1 = y1 // x1\n                if y2 - x2 * r1 == y3 - x3 * r1:\n                    print(2)\n                    continue\n                if y2 == x2 * r1 or y3 == x3 * r1:\n                    print(2)\n                    continue\n                if y2 - x2 * r1 == y3 - x3 or y3 - x3 * r1 == y2 - x2:\n                    print(2)\n                    continue\n                if r1 != 0 and x2 != 0 and (x3 != 0) and (y2 % (x2 * r1) == 0) and (y3 % x3 == 0) and (y3 // x3 == y2 // (x2 * r1)):\n                    print(2)\n                    continue\n                if r1 != 0 and x2 != 0 and (x3 != 0) and (y3 % (x3 * r1) == 0) and (y2 % x2 == 0) and (y2 // x2 == y3 // (x3 * r1)):\n                    print(2)\n                    continue\n            d1 = y1 - x1\n            if y2 == x2 + d1 or y3 == x3 + d1:\n                print(2)\n                continue\n            if x2 + d1 != 0 and x3 != 0 and (y2 % (x2 + d1) == 0) and (y3 % x3 == 0) and (y2 // (x2 + d1) == y3 // x3):\n                print(2)\n                continue\n            if x3 + d1 != 0 and x2 != 0 and (y2 % x2 == 0) and (y3 % (x3 + d1) == 0) and (y2 // x2 == y3 // (x3 + d1)):\n                print(2)\n                continue\n            if x3 != 0 and x2 != 0 and ((y2 - d1) % x2 == 0) and ((y3 - d1) % x3 == 0) and ((y2 - d1) // x2 == (y3 - d1) // x3):\n                print(2)\n                continue\n            if x3 + d1 != 0 and x2 + d1 != 0 and (y2 % (x2 + d1) == 0) and (y3 % (x3 + d1) == 0) and (y2 // (x2 + d1) == y3 // (x3 + d1)):\n                print(2)\n                continue\n            if y2 - (x2 + d1) == y3 - x3 or y2 - x2 == y3 - (x3 + d1):\n                print(2)\n                continue\n            if x1 != x2 and x2 != x3 and (x3 != x1):\n                if (y2 - y1) * (x3 - x1) == (x2 - x1) * (y3 - y1) and (y2 - y1) % (x2 - x1) == 0:\n                    print(2)\n                    continue\n            print(3)", "from sys import stdin\n\ndef Coincide(p, a, q, b, r, c):\n    x = b - a\n    d = q - p\n    if d != 0:\n        y = a - 1 * p * (x / d)\n        if 1 * r * (x / d) + y == c:\n            if x % d == 0:\n                return True\n        if x % d == 0 and r + y == c:\n            return True\n        if x % d == 0 and r * x == c:\n            return True\n    return False\n\ndef check2(p, a, q, b):\n    if p == a or q == b:\n        return True\n    if a - p == b - q:\n        return True\n    if p != 0 and q != 0 and (a % p == 0) and (b % q == 0) and (a / p == b / q):\n        return True\n    return False\nt = int(input())\nfor _ in range(t):\n    (p, q, r) = map(int, input().split())\n    (a, b, c) = map(int, input().split())\n    if p == a and q == b and (r == c):\n        print(0)\n        continue\n    if p == a and check2(q, b, r, c) or (q == b and check2(p, a, r, c)) or (r == c and check2(q, b, p, a)):\n        print(1)\n        continue\n    diff = a - p\n    if q + diff == b and r + diff == c:\n        print(1)\n        continue\n    if p != 0 and a % p == 0:\n        diff = a / p\n        if q * diff == b and r * diff == c:\n            print(1)\n            continue\n    d = 0\n    if p != 0 and a % p == 0:\n        d = a / p\n        if check2(q * d, b, r * d, c) or check2(q * d, b, r, c) or check2(q, b, r * d, c) or check2(q, b, r, c):\n            print(2)\n            continue\n    d = a - p\n    if check2(q + d, b, r + d, c) or check2(q + d, b, r, c) or check2(q, b, r + d, c) or check2(q, b, r, c):\n        print(2)\n        continue\n    if q != 0 and b % q == 0:\n        d = b / q\n        if check2(p * d, a, r * d, c) or check2(p * d, a, r, c) or check2(p, a, r * d, c) or check2(p, a, r, c):\n            print(2)\n            continue\n    d = b - q\n    if check2(p + d, a, r + d, c) or check2(p + d, a, r, c) or check2(p, a, r + d, c) or check2(p, a, r, c):\n        print(2)\n        continue\n    if r != 0 and c % r == 0:\n        d = c / r\n        if check2(q * d, b, p * d, a) or check2(q * d, b, p, a) or check2(q, b, p * d, a) or check2(q, b, p, a):\n            print(2)\n            continue\n    d = c - r\n    if check2(q + d, b, p + d, a) or check2(q + d, b, p, a) or check2(q, b, p + d, a) or check2(q, b, p, a):\n        print(2)\n        continue\n    if Coincide(p, a, q, b, r, c) or Coincide(p, a, r, c, q, b) or Coincide(q, b, r, c, p, a):\n        print(2)\n        continue\n    print(3)", "def func2(t1, t2, t3, t4):\n    if t1 == t3 and t2 == t4:\n        return 0\n    elif t1 == t3 and t2 != t4:\n        return 1\n    elif t1 != t3 and t2 == t4:\n        return 1\n    elif t1 == t2:\n        if t3 == t4:\n            return 1\n        else:\n            return 2\n    elif t3 == t4:\n        if t3 == 0:\n            return 1\n        else:\n            return 2\n    elif t1 != 0 and t2 != 0:\n        if t3 - t1 == t4 - t2:\n            return 1\n        elif t1 * t4 == t2 * t3 and t3 % t1 == 0 and (t4 % t2 == 0):\n            return 1\n        else:\n            return 2\n    elif t1 == 0 and t4 == t2 + t3:\n        return 1\n    elif t2 == 0 and t3 == t1 + t4:\n        return 1\n    return 2\n\ndef func4(a, b, c, p, q, r, l1, l2):\n    lis = [func2(a, b, p, q), func2(a, c, p, r), func2(b, c, q, r)]\n    if len(set(lis)) == 1 and lis[0] == 2:\n        for i in range(3):\n            k1 = l2[i] - l1[i]\n            temp = [func2(l1[i - 1], l1[i - 2], l2[i - 1], l2[i - 2]), func2(l1[i - 1] + k1, l1[i - 2], l2[i - 1], l2[i - 2]), func2(l1[i - 1], l1[i - 2] + k1, l2[i - 1], l2[i - 2]), func2(l1[i - 1] + k1, l1[i - 2] + k1, l2[i - 1], l2[i - 2]), func2(l1[i - 1], l1[i - 2], l2[i - 1] - k1, l2[i - 2] - k1), func2(l1[i - 1], l1[i - 2], l2[i - 1] - k1, l2[i - 2]), func2(l1[i - 1], l1[i - 2], l2[i - 1], l2[i - 2] - k1)]\n            ans = min(temp)\n            if ans == 1:\n                return 2\n            if l1[i] != 0:\n                if l2[i] % l1[i] == 0:\n                    k1 = l2[i] // l1[i]\n                    if k1 != 0:\n                        temp = [func2(l1[i - 1], l1[i - 2], l2[i - 1], l2[i - 2]), func2(l1[i - 1] * k1, l1[i - 2], l2[i - 1], l2[i - 2]), func2(l1[i - 1], l1[i - 2] * k1, l2[i - 1], l2[i - 2]), func2(l1[i - 1] * k1, l1[i - 2] * k1, l2[i - 1], l2[i - 2]), func2(l1[i - 1], l1[i - 2], l2[i - 1] / k1, l2[i - 2] / k1), func2(l1[i - 1], l1[i - 2], l2[i - 1] / k1, l2[i - 2]), func2(l1[i - 1], l1[i - 2], l2[i - 1], l2[i - 2] / k1)]\n                        ans = min(temp)\n                        if ans == 1:\n                            return 2\n                    else:\n                        k1 = 0\n                        temp = [func2(l1[i - 1], l1[i - 2], l2[i - 1], l2[i - 2]), func2(l1[i - 1] * k1, l1[i - 2], l2[i - 1], l2[i - 2]), func2(l1[i - 1], l1[i - 2] * k1, l2[i - 1], l2[i - 2]), func2(l1[i - 1] * k1, l1[i - 2] * k1, l2[i - 1], l2[i - 2])]\n                        ans = min(temp)\n                        if ans == 1:\n                            return 2\n        for i in range(3):\n            if l1[i] != l1[i - 1]:\n                k1 = l2[i] - l2[i - 1]\n                k1 /= l1[i] - l1[i - 1]\n                if k1 == int(k1):\n                    k2 = l2[i] - l1[i] * k1\n                    if l2[i - 2] == l1[i - 2] * k1 + k2:\n                        return 2\n            else:\n                k1 = l2[i] - l1[i]\n                lis = [func2(l1[i - 1], l1[i - 2], l2[i - 1], l2[i - 2]), func2(l1[i - 1] + k1, l1[i - 2], l2[i - 1], l2[i - 2]), func2(l1[i - 1], l1[i - 2] + k1, l2[i - 1], l2[i - 2]), func2(l1[i - 1] + k1, l1[i - 2] + k1, l2[i - 1], l2[i - 2]), func2(l1[i - 1], l1[i - 2], l2[i - 1] - k1, l2[i - 2] - k1), func2(l1[i - 1], l1[i - 2], l2[i - 1] - k1, l2[i - 2]), func2(l1[i - 1], l1[i - 2], l2[i - 1], l2[i - 2] - k1)]\n                ans = min(lis)\n                if ans == 1:\n                    return 2\n                k1 = l2[i - 1] - l1[i - 1]\n                lis = [func2(l1[i], l1[i - 2], l2[i], l2[i - 2]), func2(l1[i] + k1, l1[i - 2], l2[i], l2[i - 2]), func2(l1[i], l1[i - 2] + k1, l2[i], l2[i - 2]), func2(l1[i] + k1, l1[i - 2] + k1, l2[i], l2[i - 2]), func2(l1[i], l1[i - 2], l2[i] - k1, l2[i - 2] - k1), func2(l1[i], l1[i - 2], l2[i] - k1, l2[i - 2]), func2(l1[i], l1[i - 2], l2[i], l2[i - 2] - k1)]\n                ans = min(lis)\n                if ans == 1:\n                    return 2\n        return 3\n    ans = max(lis)\n    return ans\nfor _ in range(int(input())):\n    lis1 = list(map(int, input().split()))\n    lis2 = list(map(int, input().split()))\n    (a, b, c) = (lis1[0], lis1[1], lis1[2])\n    (p, q, r) = (lis2[0], lis2[1], lis2[2])\n    ans1 = func4(a, b, c, p, q, r, lis1, lis2)\n    print(ans1)", "import math\nmeth = 69\ncunt = 3\nweed = meth - cunt\n\ndef ifDeno(a1, b1, c1, a2, b2, c2):\n    meth = 69\n    cunt = 3\n    weed = meth - cunt\n    if a2 == b2 == c2 != 0:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        return True\n    if a2 == b2:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        if c1 == c2:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            return True\n        if c2 == 0:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            return True\n        if c1 + a2 == c2:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            return True\n    if b2 == c2:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        if a1 == a2:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            return True\n        if a2 == 0:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            return True\n        if a1 + b2 == a2:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            return True\n    if c2 == a2:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        if b1 == b2:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            return True\n        if b2 == 0:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            return True\n        if b1 + a2 == b2:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            return True\n    return False\n\ndef ifCombo(x, y, z, x2, y2, z2):\n    meth = 69\n    cunt = 3\n    weed = meth - cunt\n    if x + y == z or y + z == x or z + x == y:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        return True\n    if x2 == math.ceil(x2) and y2 == math.ceil(y2) and (z2 == math.ceil(z2)):\n        if x2 * y2 == z2 or y2 * z2 == x2 or z2 * x2 == y2:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            return True\n    return False\n\ndef ifTwo(a1, b1, c1, a2, b2, c2):\n    meth = 69\n    cunt = 3\n    weed = meth - cunt\n    ints = []\n    meth = 69\n    cunt = 3\n    weed = meth - cunt\n    try:\n        if a2 != b2 and a1 != b1:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            if (a2 - b2) % (a1 - b1) == 0:\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n                x = (a2 - b2) // (a1 - b1)\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n                if a2 - a1 * x == b2 - b1 * x:\n                    meth = 69\n                    cunt = 3\n                    weed = meth - cunt\n                    ints.append(x)\n                    meth = 69\n                    cunt = 3\n                    weed = meth - cunt\n    except:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        n = 0\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    try:\n        if b2 != c2 and b1 != c1:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            if (b2 - c2) % (b1 - c1) == 0:\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n                x = (b2 - c2) // (b1 - c1)\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n                if b2 - b1 * x == c2 - c1 * x:\n                    meth = 69\n                    cunt = 3\n                    weed = meth - cunt\n                    ints.append(x)\n                    meth = 69\n                    cunt = 3\n                    weed = meth - cunt\n    except:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        n = 0\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    try:\n        if c2 != a2 and c1 != a1:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            if (c2 - a2) % (c1 - a1) == 0:\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n                x = (c2 - a2) // (c1 - a1)\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n                if c2 - c1 * x == a2 - a1 * x:\n                    meth = 69\n                    cunt = 3\n                    weed = meth - cunt\n                    ints.append(x)\n                    meth = 69\n                    cunt = 3\n                    weed = meth - cunt\n    except:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        n = 0\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    if len(ints) == 3 and len(set(ints)) == 1:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        return True\n    if len(ints) == 3 and len(set(ints)) == 2:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        return True\n    if len(ints) == 3 and len(set(ints)) == 3:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        try:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            x = (a2 - b2) // (a1 - b1)\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            y = a2 - a1 * x\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            xx = (a1 * b2 - a2 * b1) // (a2 - b2)\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            yy = a2 // (a1 + xx)\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            if (a1 * b2 - a2 * b1) % (a2 - b2) != 0:\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n                xx = 0.4857454\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n                yy = 0.294823\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n            if c1 == c2 or c1 + y == c2 or c1 * x == c2 or (c1 + xx == c2) or (c1 * yy == c2):\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n                return True\n        except:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            n = 0\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n        try:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            x = (b2 - c2) // (b1 - c1)\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            y = b2 - b1 * x\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            xx = (b1 * c2 - b2 * c1) // (b2 - c2)\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            yy = b2 // (b1 + xx)\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            if (b1 * c2 - b2 * c1) % (b2 - c2) != 0:\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n                xx = 0.4857454\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n                yy = 0.294823\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n            if a1 == a2 or a1 + y == a2 or a1 * x == a2 or (a1 + xx == a2) or (a1 * yy == a2):\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n                return True\n        except:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            n = 0\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n        try:\n            x = (c2 - a2) // (c1 - a1)\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            y = c2 - c1 * x\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            xx = (c1 * a2 - c2 * a1) // (c2 - a2)\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            yy = c2 // (c1 + xx)\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            if (c1 * a2 - c2 * a1) % (c2 - a2) != 0:\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n                xx = 0.4857454\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n                yy = 0.294823\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n            if b1 == b2 or b1 + y == b2 or b1 * x == b2 or (b1 + xx == b2) or (b1 * yy == b2):\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n                return True\n        except:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            n = 0\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n    if len(ints) == 2 and len(set(ints)) == 1:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        return True\n    if len(ints) == 2 and len(set(ints)) == 2 or len(ints) == 1:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        try:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            if a2 != b2 and a1 != b1:\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n                if (a2 - b2) % (a1 - b1) == 0:\n                    meth = 69\n                    cunt = 3\n                    weed = meth - cunt\n                    x = (a2 - b2) // (a1 - b1)\n                    meth = 69\n                    cunt = 3\n                    weed = meth - cunt\n                    if a2 - a1 * x == b2 - b1 * x:\n                        meth = 69\n                        cunt = 3\n                        weed = meth - cunt\n                        y = a2 - a1 * x\n                        meth = 69\n                        cunt = 3\n                        weed = meth - cunt\n                        xx = (a1 * b2 - a2 * b1) // (a2 - b2)\n                        meth = 69\n                        cunt = 3\n                        weed = meth - cunt\n                        yy = a2 // (a1 + xx)\n                        meth = 69\n                        cunt = 3\n                        weed = meth - cunt\n                        if (a1 * b2 - a2 * b1) % (a2 - b2) != 0:\n                            meth = 69\n                            cunt = 3\n                            weed = meth - cunt\n                            xx = 0.4857454\n                            meth = 69\n                            cunt = 3\n                            weed = meth - cunt\n                            yy = 0.294823\n                            meth = 69\n                            cunt = 3\n                            weed = meth - cunt\n                        if c1 == c2 or c1 + y == c2 or c1 * x == c2 or (c1 + xx == c2) or (c1 * yy == c2):\n                            meth = 69\n                            cunt = 3\n                            weed = meth - cunt\n                            return True\n        except:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            n = 0\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n        try:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            if b2 != c2 and b1 != c1:\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n                if (b2 - c2) % (b1 - c1) == 0:\n                    meth = 69\n                    cunt = 3\n                    weed = meth - cunt\n                    x = (b2 - c2) // (b1 - c1)\n                    meth = 69\n                    cunt = 3\n                    weed = meth - cunt\n                    if b2 - b1 * x == c2 - c1 * x:\n                        meth = 69\n                        cunt = 3\n                        weed = meth - cunt\n                        y = b2 - b1 * x\n                        meth = 69\n                        cunt = 3\n                        weed = meth - cunt\n                        xx = (b1 * c2 - b2 * c1) // (b2 - c2)\n                        meth = 69\n                        cunt = 3\n                        weed = meth - cunt\n                        yy = b2 // (b1 + xx)\n                        meth = 69\n                        cunt = 3\n                        weed = meth - cunt\n                        if (b1 * c2 - b2 * c1) % (b2 - c2) != 0:\n                            meth = 69\n                            cunt = 3\n                            weed = meth - cunt\n                            xx = 0.4857454\n                            meth = 69\n                            cunt = 3\n                            weed = meth - cunt\n                            yy = 0.294823\n                            meth = 69\n                            cunt = 3\n                            weed = meth - cunt\n                        if a1 == a2 or a1 + y == a2 or a1 * x == a2 or (a1 + xx == a2) or (a1 * yy == a2):\n                            meth = 69\n                            cunt = 3\n                            weed = meth - cunt\n                            return True\n        except:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            n = 0\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n        try:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            if c2 != a2 and c1 != a1:\n                meth = 69\n                cunt = 3\n                weed = meth - cunt\n                if (c2 - a2) % (c1 - a1) == 0:\n                    meth = 69\n                    cunt = 3\n                    weed = meth - cunt\n                    x = (c2 - a2) // (c1 - a1)\n                    meth = 69\n                    cunt = 3\n                    weed = meth - cunt\n                    if c2 - c1 * x == a2 - a1 * x:\n                        meth = 69\n                        cunt = 3\n                        weed = meth - cunt\n                        y = c2 - c1 * x\n                        meth = 69\n                        cunt = 3\n                        weed = meth - cunt\n                        xx = (c1 * a2 - c2 * a1) // (c2 - a2)\n                        meth = 69\n                        cunt = 3\n                        weed = meth - cunt\n                        yy = c2 // (c1 + xx)\n                        meth = 69\n                        cunt = 3\n                        weed = meth - cunt\n                        if (c1 * a2 - c2 * a1) % (c2 - a2) != 0:\n                            meth = 69\n                            cunt = 3\n                            weed = meth - cunt\n                            xx = 0.4857454\n                            meth = 69\n                            cunt = 3\n                            weed = meth - cunt\n                            yy = 0.294823\n                            meth = 69\n                            cunt = 3\n                            weed = meth - cunt\n                        if b1 == b2 or b1 + y == b2 or b1 * x == b2 or (b1 + xx == b2) or (b1 * yy == b2):\n                            meth = 69\n                            cunt = 3\n                            weed = meth - cunt\n                            return True\n        except:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            n = 0\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n    return False\n\ndef ifGrid(a1, b1, c1, a2, b2, c2):\n    meth = 69\n    cunt = 3\n    weed = meth - cunt\n    l = [[None, None, None], [None, None, None]]\n    meth = 69\n    cunt = 3\n    weed = meth - cunt\n    l[0][0] = a2 - a1\n    meth = 69\n    cunt = 3\n    weed = meth - cunt\n    l[0][1] = b2 - b1\n    meth = 69\n    cunt = 3\n    weed = meth - cunt\n    l[0][2] = c2 - c1\n    meth = 69\n    cunt = 3\n    weed = meth - cunt\n    try:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        if a2 % a1 == 0:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            l[1][0] = a2 // a1\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n    except:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        n = 0\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    try:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        if b2 % b1 == 0:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            l[1][1] = b2 // b1\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n    except:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        n = 0\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    try:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        if c2 % c1 == 0:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            l[1][2] = c2 // c1\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n    except:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        n = 0\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    if l[0][1] != None and l[1][2] != None:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        if (a1 + l[0][1]) * l[1][2] == a2 or l[0][1] + a1 * l[1][2] == a2:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            return True\n    if l[0][2] != None and l[1][1] != None:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        if (a1 + l[0][2]) * l[1][1] == a2 or l[0][2] + a1 * l[1][1] == a2:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            return True\n    if l[0][0] != None and l[1][2] != None:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        if (b1 + l[0][0]) * l[1][2] == b2 or l[0][0] + b1 * l[1][2] == b2:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            return True\n    if l[0][2] != None and l[1][0] != None:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        if (b1 + l[0][2]) * l[1][0] == b2 or l[0][2] + b1 * l[1][0] == b2:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            return True\n    if l[0][0] != None and l[1][1] != None:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        if (c1 + l[0][0]) * l[1][1] == c2 or l[0][0] + c1 * l[1][1] == c2:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            return True\n    if l[0][1] != None and l[1][0] != None:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        if (c1 + l[0][1]) * l[1][0] == c2 or l[0][1] + c1 * l[1][0] == c2:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            return True\n    return False\nt = int(input())\nmeth = 69\ncunt = 3\nweed = meth - cunt\nwhile t:\n    meth = 69\n    cunt = 3\n    weed = meth - cunt\n    t -= 1\n    meth = 69\n    cunt = 3\n    weed = meth - cunt\n    (a1, b1, c1) = map(int, input().split())\n    (a2, b2, c2) = map(int, input().split())\n    meth = 69\n    cunt = 3\n    weed = meth - cunt\n    ones = 0\n    meth = 69\n    cunt = 3\n    weed = meth - cunt\n    zeros = 0\n    meth = 69\n    cunt = 3\n    weed = meth - cunt\n    x = a2 - a1\n    meth = 69\n    cunt = 3\n    weed = meth - cunt\n    y = b2 - b1\n    meth = 69\n    cunt = 3\n    weed = meth - cunt\n    z = c2 - c1\n    meth = 69\n    cunt = 3\n    weed = meth - cunt\n    try:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        if a2 % a1 == 0:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            x2 = a2 // a1\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n        else:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            x2 = 8.12248952\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n    except:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        x2 = 8.12248952\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    try:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        if b2 % b1 == 0:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            y2 = b2 // b1\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n        else:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            y2 = 43.82248952\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n    except:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        y2 = 43.82248952\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    try:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        if c2 % c1 == 0:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            z2 = c2 // c1\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n        else:\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n            z2 = 3.81118952\n            meth = 69\n            cunt = 3\n            weed = meth - cunt\n    except:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        z2 = 3.81118952\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    same = 0\n    meth = 69\n    cunt = 3\n    weed = meth - cunt\n    if a1 == a2:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        same += 1\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    if b1 == b2:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        same += 1\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    if c1 == c2:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        same += 1\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    if same == 3:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(0)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    elif same == 2:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(1)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    elif same == 1 and (x == y or y == z or z == x):\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(1)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    elif same == 1 and (x2 == y2 and math.ceil(x2) == x2 or (y2 == z2 and math.ceil(y2) == y2) or (z2 == x2 and math.ceil(x2) == x2)):\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(1)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    elif same == 0 and x == y == z:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(1)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    elif same == 0 and (x2 == y2 == z2 and math.ceil(x2) == x2):\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(1)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    elif a2 == b2 == c2 == 0:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(1)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    elif a2 == b2 == 0 and c1 == c2:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(1)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    elif b2 == c2 == 0 and a1 == a2:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(1)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    elif c2 == a2 == 0 and b1 == b2:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(1)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    elif ifTwo(a1, b1, c1, a2, b2, c2) or ifCombo(x, y, z, x2, y2, z2) or ifDeno(a1, b1, c1, a2, b2, c2) or ifGrid(a1, b1, c1, a2, b2, c2):\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(2)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    elif same == 1 and a1 == a2 and (y != z):\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(2)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    elif same == 1 and b1 == b2 and (x != z):\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(2)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    elif same == 1 and c1 == c2 and (x != y):\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(2)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    elif same == 0 and (x == y or y == z or z == x):\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(2)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    elif same == 1 and a1 == a2 and (y2 != z2 or math.ceil(y2) != y2):\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(2)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    elif same == 1 and b1 == b2 and (x2 != z2 or math.ceil(x2) != x2):\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(2)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    elif same == 1 and c1 == c2 and (x2 != y2 or math.ceil(x2) != x2):\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(2)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    elif same == 0 and (x2 == y2 and math.ceil(x2) == x2 or (y2 == z2 and math.ceil(y2) == y2) or (z2 == x2 and math.ceil(x2) == x2)):\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(2)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n    else:\n        meth = 69\n        cunt = 3\n        weed = meth - cunt\n        print(3)\n        meth = 69\n        cunt = 3\n        weed = meth - cunt", "from itertools import permutations\noo = 1000000000000\nt = int(input())\n\ndef check1(e):\n    for i in range(len(e) - 1):\n        if e[i] != e[i + 1] or e[i] == oo:\n            return False\n    return True\n\ndef check2(e):\n    l = len(e)\n    for i in range(l):\n        if e[i] == e[(i + 1) % l] and e[i] != oo:\n            return True\n    return False\n\ndef check2_2(d, f, a, b):\n    perm = permutations([0, 1, 2])\n    for i in perm:\n        if f[i[0]] != oo and f[i[1]] != oo:\n            if b[i[2]] == a[i[2]] * f[i[0]] * f[i[1]]:\n                return True\n        if a[i[2]] + d[i[0]] + d[i[1]] == b[i[2]]:\n            return True\n        if f[i[1]] != oo:\n            if b[i[2]] == f[i[1]] * (a[i[2]] + d[i[0]]):\n                return True\n        if f[i[0]] != oo:\n            if b[i[2]] == a[i[2]] * f[i[0]] + d[i[1]]:\n                return True\n        if a[i[0]] - a[i[1]] != 0 and (b[i[0]] - b[i[1]]) % (a[i[0]] - a[i[1]]) == 0:\n            p = (b[i[0]] - b[i[1]]) / (a[i[0]] - a[i[1]])\n            q = b[i[0]] - a[i[0]] * p\n            if a[i[2]] * p + q == b[i[2]]:\n                return True\n        if f[i[2]] != oo:\n            if a[i[0]] * f[i[2]] - b[i[0]] == a[i[1]] * f[i[2]] - b[i[1]]:\n                return True\n        if a[i[0]] + d[i[2]] != 0 and a[i[1]] + d[i[2]] != 0:\n            if b[i[0]] % (a[i[0]] + d[i[2]]) == 0 and b[i[1]] % (a[i[1]] + d[i[2]]) == 0:\n                if b[i[0]] / (a[i[0]] + d[i[2]]) == b[i[1]] / (a[i[1]] + d[i[2]]):\n                    return True\n        if f[i[2]] != oo and f[i[2]] != 0:\n            if b[i[1]] % f[i[2]] == 0 and b[i[0]] % f[i[2]] == 0:\n                if b[i[1]] / f[i[2]] - a[i[1]] == b[i[0]] / f[i[2]] - a[i[0]]:\n                    return True\n        if a[i[1]] != 0 and a[i[0]] != 0:\n            if (b[i[1]] - d[i[2]]) % a[i[1]] == 0 and (b[i[0]] - d[i[2]]) % a[i[0]] == 0:\n                if (b[i[1]] - d[i[2]]) / a[i[1]] == (b[i[0]] - d[i[2]]) / a[i[0]]:\n                    return True\nfor _ in range(t):\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    c = 0\n    d = []\n    f = []\n    for i in range(3):\n        if a[i] == b[i]:\n            c += 1\n        else:\n            d.append(b[i] - a[i])\n            if a[i] == 0 or b[i] % a[i] != 0:\n                f.append(oo)\n            else:\n                f.append(b[i] / a[i])\n    if c == 0:\n        if check1(d) == True or check1(f) == True:\n            print(1)\n        elif check2(d) == True or check2(f) == True or check2_2(d, f, a, b) == True:\n            print(2)\n        else:\n            print(3)\n    elif c == 1:\n        if check1(d) == True or check1(f) == True:\n            print(1)\n        else:\n            print(2)\n    else:\n        print(3 - c)", "for _ in range(int(input())):\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c1 = 0\n    for i in range(3):\n        if a[i] == b[i]:\n            c1 += 1\n    if c1 == 3:\n        print(0)\n        continue\n    if c1 == 2:\n        print(1)\n        continue\n    if c1 == 1:\n        if a[0] == b[0]:\n            if a[1] - b[1] == a[2] - b[2]:\n                print(1)\n                continue\n            if a[2] != 0 and a[1] != 0 and (b[2] / a[2] == b[1] / a[1]) and (b[2] % a[2] == 0) and (b[1] % a[1] == 0):\n                print(1)\n                continue\n        if a[1] == b[1]:\n            if a[0] - b[0] == a[2] - b[2]:\n                print(1)\n                continue\n            if a[0] != 0 and a[2] != 0 and (b[2] / a[2] == b[0] / a[0]) and (b[2] % a[2] == 0) and (b[0] % a[0] == 0):\n                print(1)\n                continue\n        if a[2] == b[2]:\n            if a[1] - b[1] == a[0] - b[0]:\n                print(1)\n                continue\n            if a[0] != 0 and a[1] != 0 and (b[0] / a[0] == b[1] / a[1]) and (b[0] % a[0] == 0) and (b[1] % a[1] == 0):\n                print(1)\n                continue\n        print(2)\n        continue\n    if c1 == 0:\n        s = set()\n        mylove = []\n        for i in range(3):\n            if a[i] != b[i]:\n                s.add(b[i] - a[i])\n        if len(s) == 1:\n            print(1)\n            continue\n        s.clear()\n        c2 = 0\n        for i in range(3):\n            if a[i] != 0 and b[i] % a[i] == 0 and (b[i] != a[i]):\n                s.add(b[i] // a[i])\n            else:\n                c2 += 1\n        if len(s) == 1 and c2 == 0:\n            print(1)\n            continue\n        s.clear()\n        for i in range(3):\n            if a[i] != b[i]:\n                s.add(b[i] - a[i])\n                mylove.append(b[i] - a[i])\n        if len(s) == 2:\n            print(2)\n            continue\n        if len(s) == 3:\n            if mylove[0] == mylove[1] + mylove[2] or mylove[1] == mylove[0] + mylove[2] or mylove[2] == mylove[0] + mylove[1]:\n                print(2)\n                continue\n        s.clear()\n        mylove.clear()\n        c2 = 0\n        for i in range(3):\n            if a[i] != 0 and b[i] % a[i] == 0:\n                s.add(b[i] / a[i])\n                mylove.append(b[i] / a[i])\n            else:\n                c2 += 1\n        if len(s) == 2 and c2 == 0:\n            print(2)\n            continue\n        if len(s) == 3:\n            if mylove[0] == mylove[1] * mylove[2] or mylove[1] == mylove[0] * mylove[2] or mylove[2] == mylove[0] * mylove[1]:\n                print(2)\n                continue\n        if len(s) == 1 and c2 == 1:\n            print(2)\n            continue\n        r1 = a[0] - a[1]\n        r2 = b[0] - b[1]\n        if r1 != 0 and r2 % r1 == 0:\n            x = r2 // r1\n            y = b[0] - a[0] * x\n            if a[2] * x + y == b[2]:\n                print(2)\n                continue\n        if a[0] != 0 and b[0] % a[0] == 0:\n            k = b[0] // a[0]\n            if b[1] - a[1] * k == b[2] - a[2] * k:\n                print(2)\n                continue\n            if k != 0 and b[1] % k == 0 and (b[2] % k == 0) and (b[1] / k - a[1] == b[2] / k - a[2]):\n                print(2)\n                continue\n        if a[1] != 0 and b[1] % a[1] == 0:\n            k = b[1] // a[1]\n            if b[0] - a[0] * k == b[2] - a[2] * k:\n                print(2)\n                continue\n            if k != 0 and b[0] % k == 0 and (b[2] % k == 0) and (b[0] / k - a[0] == b[2] / k - a[2]):\n                print(2)\n                continue\n        if a[2] != 0 and b[2] % a[2] == 0:\n            k = b[2] // a[2]\n            if b[1] - a[1] * k == b[0] - a[0] * k:\n                print(2)\n                continue\n            if k != 0 and b[1] % k == 0 and (b[0] % k == 0) and (b[1] / k - a[1] == b[0] / k - a[0]):\n                print(2)\n                continue\n        poo = b[0] - a[0]\n        agra = b[1] - poo\n        him = b[2] - poo\n        if a[1] != 0 and a[2] != 0 and (agra % a[1] == 0) and (him % a[2] == 0) and (agra / a[1] == him / a[2]):\n            print(2)\n            continue\n        ram = a[1] + poo\n        shyam = a[2] + poo\n        if ram != 0 and shyam != 0 and (b[1] % ram == 0) and (b[2] % shyam == 0) and (b[1] / ram == b[2] / shyam):\n            print(2)\n            continue\n        poo = b[1] - a[1]\n        agra = b[0] - poo\n        him = b[2] - poo\n        if a[0] != 0 and a[2] != 0 and (agra % a[0] == 0) and (him % a[2] == 0) and (agra / a[0] == him / a[2]):\n            print(2)\n            continue\n        ram = a[0] + poo\n        shyam = a[2] + poo\n        if ram != 0 and shyam != 0 and (b[0] % ram == 0) and (b[2] % shyam == 0) and (b[0] / ram == b[2] / shyam):\n            print(2)\n            continue\n        poo = b[2] - a[2]\n        agra = b[1] - poo\n        him = b[0] - poo\n        if a[1] != 0 and a[0] != 0 and (agra % a[1] == 0) and (him % a[0] == 0) and (agra / a[1] == him / a[0]):\n            print(2)\n            continue\n        ram = a[1] + poo\n        shyam = a[0] + poo\n        if ram != 0 and shyam != 0 and (b[1] % ram == 0) and (b[0] % shyam == 0) and (b[1] / ram == b[0] / shyam):\n            print(2)\n            continue\n        dinesh = b[0] - a[0]\n        if a[1] != 0 and b[1] % a[1] == 0:\n            zz = b[1] // a[1]\n            if a[2] * zz + dinesh == b[2]:\n                print(2)\n                continue\n            if (a[2] + dinesh) * zz == b[2]:\n                print(2)\n                continue\n        if a[2] != 0 and b[2] % a[2] == 0:\n            zz = b[2] // a[2]\n            if a[1] * zz + dinesh == b[1]:\n                print(2)\n                continue\n            if (a[1] + dinesh) * zz == b[1]:\n                print(2)\n                continue\n        dinesh = b[1] - a[1]\n        if a[0] != 0 and b[0] % a[0] == 0:\n            zz = b[0] / a[0]\n            if a[2] * zz + dinesh == b[2]:\n                print(2)\n                continue\n            if (a[2] + dinesh) * zz == b[2]:\n                print(2)\n                continue\n        if a[2] != 0 and b[2] % a[2] == 0:\n            zz = b[2] / a[2]\n            if a[0] * zz + dinesh == b[0]:\n                print(2)\n                continue\n            if (a[0] + dinesh) * zz == b[0]:\n                print(2)\n                continue\n        dinesh = b[2] - a[2]\n        if a[1] != 0 and b[1] % a[1] == 0:\n            zz = b[1] / a[1]\n            if a[0] * zz + dinesh == b[0]:\n                print(2)\n                continue\n            if (a[0] + dinesh) * zz == b[0]:\n                print(2)\n                continue\n        if a[0] != 0 and b[0] % a[0] == 0:\n            zz = b[0] / a[0]\n            if a[1] * zz + dinesh == b[1]:\n                print(2)\n                continue\n            if (a[1] + dinesh) * zz == b[1]:\n                print(2)\n                continue\n        print(3)\n        continue", "import math\nt = int(input())\nfor i in range(t):\n    (a, b, c) = map(int, input().split())\n    (d, e, f) = map(int, input().split())\n    ans = 3\n    s1 = d - a\n    s2 = e - b\n    s3 = f - c\n    if a == 0:\n        r1 = 1\n        q1 = 0\n    else:\n        if d % a == 0:\n            r1 = 0\n        else:\n            r1 = 1\n        q1 = d // a\n    if b == 0:\n        r2 = 1\n        q2 = 0\n    else:\n        if e % b == 0:\n            r2 = 0\n        else:\n            r2 = 1\n        q2 = e // b\n    if c == 0:\n        r3 = 1\n        q3 = 0\n    else:\n        if f % c == 0:\n            r3 = 0\n        else:\n            r3 = 1\n        q3 = f // c\n    if s1 == 0 and s2 == 0 and (s3 == 0):\n        ans = min(ans, 0)\n    if s1 == 0 and s2 == 0:\n        ans = min(ans, 1)\n    if s2 == 0 and s3 == 0:\n        ans = min(ans, 1)\n    if s1 == 0 and s3 == 0:\n        ans = min(ans, 1)\n    if s1 == 0:\n        if s2 == s3 or (r2 == 0 and r3 == 0 and (q2 == q3)):\n            ans = min(ans, 1)\n        else:\n            ans = min(ans, 2)\n    if s2 == 0:\n        if s1 == s3 or (r1 == 0 and r3 == 0 and (q1 == q3)):\n            ans = min(ans, 1)\n        else:\n            ans = min(ans, 2)\n    if s3 == 0:\n        if s1 == s2 or (r1 == 0 and r2 == 0 and (q1 == q2)):\n            ans = min(ans, 1)\n        else:\n            ans = min(ans, 2)\n    if s1 == s2 and s1 == s3:\n        ans = min(ans, 1)\n    if s1 == s2 or s1 == s3 or s2 == s3:\n        ans = min(ans, 2)\n    if s1 + s2 == s3 or s1 + s3 == s2 or s2 + s3 == s1:\n        ans = min(ans, 2)\n    if r1 == 0 and r2 == 0 and (r3 == 0):\n        if q1 == q2 and q1 == q3:\n            ans = min(ans, 1)\n        if q1 * q2 == q3 or q1 * q3 == q2 or q2 * q3 == q1:\n            ans = min(ans, 2)\n    if r1 == 0 and r2 == 0 and (q1 == q2):\n        ans = min(ans, 2)\n    if r2 == 0 and r3 == 0 and (q2 == q3):\n        ans = min(ans, 2)\n    if r1 == 0 and r3 == 0 and (q1 == q3):\n        ans = min(ans, 2)\n    if r2 == 0 and c * q2 + s1 == f:\n        ans = min(ans, 2)\n    if r3 == 0 and b * q3 + s1 == e:\n        ans = min(ans, 2)\n    if c != 0 and b != 0 and ((f - s1) % c == 0) and ((e - s1) % b == 0):\n        if (f - s1) // c == (e - s1) // b:\n            ans = min(ans, 2)\n    if r1 == 0 and c * q1 + s2 == f:\n        ans = min(ans, 2)\n    if r3 == 0 and a * q3 + s2 == d:\n        ans = min(ans, 2)\n    if a != 0 and c != 0 and ((d - s2) % a == 0) and ((f - s2) % c == 0):\n        if (d - s2) // a == (f - s2) // c:\n            ans = min(ans, 2)\n    if r2 == 0 and a * q2 + s3 == d:\n        ans = min(ans, 2)\n    if r1 == 0 and b * q1 + s3 == e:\n        ans = min(ans, 2)\n    if a != 0 and b != 0 and ((d - s3) % a == 0) and ((e - s3) % b == 0):\n        if (d - s3) // a == (e - s3) // b:\n            ans = min(ans, 2)\n    if r1 == 0 and e - b * q1 == f - c * q1 or (r2 == 0 and d - a * q2 == f - c * q2) or (r3 == 0 and d - a * q3 == e - b * q3):\n        ans = min(ans, 2)\n    p = a - b\n    q = d - e\n    r = b - c\n    s = e - f\n    t1 = math.gcd(abs(p), abs(q))\n    t2 = math.gcd(abs(r), abs(s))\n    if t1 != 0:\n        p //= t1\n        q //= t1\n    if t2 != 0:\n        r //= t2\n        s //= t2\n    if (p == r and q == s or (p == -r and q == -s)) and abs(p) == 1:\n        ans = min(ans, 2)\n    if r1 == 0:\n        x = q1\n        if (c + s2) * x == f or (b + s3) * x == e:\n            ans = min(ans, 2)\n        if x != 0 and e % x == 0 and (f % x == 0) and (f // x - c == e // x - b):\n            ans = min(ans, 2)\n    if r2 == 0:\n        x = q2\n        if (c + s1) * x == f or (a + s3) * x == d:\n            ans = min(ans, 2)\n        if x != 0 and d % x == 0 and (f % x == 0) and (d // x - a == f // x - c):\n            ans = min(ans, 2)\n    if r3 == 0:\n        x = q3\n        if (a + s2) * x == d or (b + s1) * x == e:\n            ans = min(ans, 2)\n        if x != 0 and d % x == 0 and (e % x == 0) and (d // x - a == e // x - b):\n            ans = min(ans, 2)\n    if a + s2 != 0 and c + s2 != 0 and (d % (a + s2) == 0) and (f % (c + s2) == 0) and (d // (a + s2) == f // (c + s2)):\n        ans = min(ans, 2)\n    if a + s3 != 0 and b + s3 != 0 and (d % (a + s3) == 0) and (e % (b + s3) == 0) and (d // (a + s3) == e // (b + s3)):\n        ans = min(ans, 2)\n    if b + s1 != 0 and c + s1 != 0 and (e % (b + s1) == 0) and (f % (c + s1) == 0) and (e // (b + s1) == f // (c + s1)):\n        ans = min(ans, 2)\n    print(ans)", "import math\nlol = 2\nlmao = 3\nreset = 0\n\ndef check3(lany, lauv, nightly, midnight, raspberry, pineapple):\n    lol = 2\n    lmao = 3\n    if midnight == raspberry == pineapple != 0:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        return True\n    if midnight == raspberry:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        if nightly == pineapple:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            return True\n        if pineapple == 0:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            return True\n        if nightly + midnight == pineapple:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            return True\n    if raspberry == pineapple:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        if lany == midnight:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            return True\n        if midnight == 0:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            return True\n        if lany + raspberry == midnight:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            return True\n    if pineapple == midnight:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        if lauv == raspberry:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            return True\n        if raspberry == 0:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            return True\n        if lauv + midnight == raspberry:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            return True\n    return False\n\ndef check2(x, y, z, x2, y2, z2):\n    lol = 2\n    lmao = 3\n    if x + y == z or y + z == x or z + x == y:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        return True\n    if x2 == math.ceil(x2) and y2 == math.ceil(y2) and (z2 == math.ceil(z2)):\n        if x2 * y2 == z2 or y2 * z2 == x2 or z2 * x2 == y2:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            return True\n    return False\n\ndef check1(lany, lauv, nightly, midnight, raspberry, pineapple):\n    lol = 2\n    lmao = 3\n    lol = lol + lmao\n    lmao = reset\n    lol -= reset\n    ints = []\n    lol = lol + lmao\n    lmao = reset\n    lol -= reset\n    try:\n        if midnight != raspberry and lany != lauv:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            if (midnight - raspberry) % (lany - lauv) == 0:\n                lol = lol + lmao\n                lmao = reset\n                lol -= reset\n                x = (midnight - raspberry) // (lany - lauv)\n                if midnight - lany * x == raspberry - lauv * x:\n                    lol = lol + lmao\n                    lmao = reset\n                    lol -= reset\n                    ints.append(x)\n                    lol = lol + lmao\n                    lmao = reset\n                    lol -= reset\n    except:\n        n = 0\n    try:\n        if raspberry != pineapple and lauv != nightly:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            if (raspberry - pineapple) % (lauv - nightly) == 0:\n                lol = lol + lmao\n                lmao = reset\n                lol -= reset\n                x = (raspberry - pineapple) // (lauv - nightly)\n                lol = lol + lmao\n                lmao = reset\n                lol -= reset\n                if raspberry - lauv * x == pineapple - nightly * x:\n                    lol = lol + lmao\n                    lmao = reset\n                    lol -= reset\n                    ints.append(x)\n                    lol = lol + lmao\n                    lmao = reset\n                    lol -= reset\n    except:\n        n = 0\n    try:\n        if pineapple != midnight and nightly != lany:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            if (pineapple - midnight) % (nightly - lany) == 0:\n                lol = lol + lmao\n                lmao = reset\n                lol -= reset\n                x = (pineapple - midnight) // (nightly - lany)\n                lol = lol + lmao\n                lmao = reset\n                lol -= reset\n                if pineapple - nightly * x == midnight - lany * x:\n                    lol = lol + lmao\n                    lmao = reset\n                    lol -= reset\n                    ints.append(x)\n                    lol = lol + lmao\n                    lmao = reset\n                    lol -= reset\n    except:\n        n = 0\n    if len(ints) == 3 and len(set(ints)) == 1:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        return True\n    if len(ints) == 3 and len(set(ints)) == 2:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        return True\n    if len(ints) == 3 and len(set(ints)) == 3:\n        try:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            x = (midnight - raspberry) // (lany - lauv)\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            y = midnight - lany * x\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            xx = (lany * raspberry - midnight * lauv) // (midnight - raspberry)\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            yy = midnight // (lany + xx)\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            if (lany * raspberry - midnight * lauv) % (midnight - raspberry) != 0:\n                lol = lol + lmao\n                lmao = reset\n                lol -= reset\n                xx = 0.4857454\n                lol = lol + lmao\n                lmao = reset\n                lol -= reset\n                yy = 0.294823\n                lol = lol + lmao\n                lmao = reset\n                lol -= reset\n            if nightly == pineapple or nightly + y == pineapple or nightly * x == pineapple or (nightly + xx == pineapple) or (nightly * yy == pineapple):\n                lol = lol + lmao\n                lmao = reset\n                lol -= reset\n                return True\n        except:\n            n = 0\n        try:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            x = (raspberry - pineapple) // (lauv - nightly)\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            y = raspberry - lauv * x\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            xx = (lauv * pineapple - raspberry * nightly) // (raspberry - pineapple)\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            yy = raspberry // (lauv + xx)\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            if (lauv * pineapple - raspberry * nightly) % (raspberry - pineapple) != 0:\n                lol = lol + lmao\n                lmao = reset\n                lol -= reset\n                xx = 0.4857454\n                lol = lol + lmao\n                lmao = reset\n                lol -= reset\n                yy = 0.294823\n                lol = lol + lmao\n                lmao = reset\n                lol -= reset\n            if lany == midnight or lany + y == midnight or lany * x == midnight or (lany + xx == midnight) or (lany * yy == midnight):\n                lol = lol + lmao\n                lmao = reset\n                lol -= reset\n                return True\n        except:\n            n = 0\n        try:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            x = (pineapple - midnight) // (nightly - lany)\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            y = pineapple - nightly * x\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            xx = (nightly * midnight - pineapple * lany) // (pineapple - midnight)\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            yy = pineapple // (nightly + xx)\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            if (nightly * midnight - pineapple * lany) % (pineapple - midnight) != 0:\n                lol = lol + lmao\n                lmao = reset\n                lol -= reset\n                xx = 0.4857454\n                lol = lol + lmao\n                lmao = reset\n                lol -= reset\n                yy = 0.294823\n                lol = lol + lmao\n                lmao = reset\n                lol -= reset\n            if lauv == raspberry or lauv + y == raspberry or lauv * x == raspberry or (lauv + xx == raspberry) or (lauv * yy == raspberry):\n                lol = lol + lmao\n                lmao = reset\n                lol -= reset\n                return True\n        except:\n            n = 0\n    if len(ints) == 2 and len(set(ints)) == 1:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        return True\n    if len(ints) == 2 and len(set(ints)) == 2 or len(ints) == 1:\n        try:\n            if midnight != raspberry and lany != lauv:\n                lol = lol + lmao\n                lmao = reset\n                lol -= reset\n                if (midnight - raspberry) % (lany - lauv) == 0:\n                    lol = lol + lmao\n                    lmao = reset\n                    lol -= reset\n                    x = (midnight - raspberry) // (lany - lauv)\n                    lol = lol + lmao\n                    lmao = reset\n                    lol -= reset\n                    if midnight - lany * x == raspberry - lauv * x:\n                        lol = lol + lmao\n                        lmao = reset\n                        lol -= reset\n                        y = midnight - lany * x\n                        lol = lol + lmao\n                        lmao = reset\n                        lol -= reset\n                        xx = (lany * raspberry - midnight * lauv) // (midnight - raspberry)\n                        lol = lol + lmao\n                        lmao = reset\n                        lol -= reset\n                        yy = midnight // (lany + xx)\n                        lol = lol + lmao\n                        lmao = reset\n                        lol -= reset\n                        if (lany * raspberry - midnight * lauv) % (midnight - raspberry) != 0:\n                            lol = lol + lmao\n                            lmao = reset\n                            lol -= reset\n                            xx = 0.4857454\n                            lol = lol + lmao\n                            lmao = reset\n                            lol -= reset\n                            yy = 0.294823\n                            lol = lol + lmao\n                            lmao = reset\n                            lol -= reset\n                        if nightly == pineapple or nightly + y == pineapple or nightly * x == pineapple or (nightly + xx == pineapple) or (nightly * yy == pineapple):\n                            lol = lol + lmao\n                            lmao = reset\n                            lol -= reset\n                            return True\n        except:\n            n = 0\n        try:\n            if raspberry != pineapple and lauv != nightly:\n                if (raspberry - pineapple) % (lauv - nightly) == 0:\n                    lol = lol + lmao\n                    lmao = reset\n                    lol -= reset\n                    x = (raspberry - pineapple) // (lauv - nightly)\n                    lol = lol + lmao\n                    lmao = reset\n                    lol -= reset\n                    if raspberry - lauv * x == pineapple - nightly * x:\n                        lol = lol + lmao\n                        lmao = reset\n                        lol -= reset\n                        y = raspberry - lauv * x\n                        lol = lol + lmao\n                        lmao = reset\n                        lol -= reset\n                        xx = (lauv * pineapple - raspberry * nightly) // (raspberry - pineapple)\n                        lol = lol + lmao\n                        lmao = reset\n                        lol -= reset\n                        yy = raspberry // (lauv + xx)\n                        lol = lol + lmao\n                        lmao = reset\n                        lol -= reset\n                        if (lauv * pineapple - raspberry * nightly) % (raspberry - pineapple) != 0:\n                            lol = lol + lmao\n                            lmao = reset\n                            lol -= reset\n                            xx = 0.4857454\n                            lol = lol + lmao\n                            lmao = reset\n                            lol -= reset\n                            yy = 0.294823\n                            lol = lol + lmao\n                            lmao = reset\n                            lol -= reset\n                        if lany == midnight or lany + y == midnight or lany * x == midnight or (lany + xx == midnight) or (lany * yy == midnight):\n                            lol = lol + lmao\n                            lmao = reset\n                            lol -= reset\n                            return True\n        except:\n            n = 0\n        try:\n            if pineapple != midnight and nightly != lany:\n                lol = lol + lmao\n                lmao = reset\n                lol -= reset\n                if (pineapple - midnight) % (nightly - lany) == 0:\n                    lol = lol + lmao\n                    lmao = reset\n                    lol -= reset\n                    x = (pineapple - midnight) // (nightly - lany)\n                    lol = lol + lmao\n                    lmao = reset\n                    lol -= reset\n                    if pineapple - nightly * x == midnight - lany * x:\n                        lol = lol + lmao\n                        lmao = reset\n                        lol -= reset\n                        y = pineapple - nightly * x\n                        lol = lol + lmao\n                        lmao = reset\n                        lol -= reset\n                        xx = (nightly * midnight - pineapple * lany) // (pineapple - midnight)\n                        lol = lol + lmao\n                        lmao = reset\n                        lol -= reset\n                        yy = pineapple // (nightly + xx)\n                        lol = lol + lmao\n                        lmao = reset\n                        lol -= reset\n                        if (nightly * midnight - pineapple * lany) % (pineapple - midnight) != 0:\n                            lol = lol + lmao\n                            lmao = reset\n                            lol -= reset\n                            xx = 0.4857454\n                            lol = lol + lmao\n                            lmao = reset\n                            lol -= reset\n                            yy = 0.294823\n                            lol = lol + lmao\n                            lmao = reset\n                            lol -= reset\n                        if lauv == raspberry or lauv + y == raspberry or lauv * x == raspberry or (lauv + xx == raspberry) or (lauv * yy == raspberry):\n                            lol = lol + lmao\n                            lmao = reset\n                            lol -= reset\n                            return True\n        except:\n            n = 0\n    return False\n\ndef check4(lany, lauv, nightly, midnight, raspberry, pineapple):\n    lol = 2\n    lmao = 3\n    l = [[None, None, None], [None, None, None]]\n    lol = lol + lmao\n    lmao = reset\n    lol -= reset\n    l[0][0] = midnight - lany\n    lol = lol + lmao\n    lmao = reset\n    lol -= reset\n    l[0][1] = raspberry - lauv\n    lol = lol + lmao\n    lmao = reset\n    lol -= reset\n    l[0][2] = pineapple - nightly\n    lol = lol + lmao\n    lmao = reset\n    lol -= reset\n    try:\n        if midnight % lany == 0:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            l[1][0] = midnight // lany\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n    except:\n        n = 0\n    try:\n        if raspberry % lauv == 0:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            l[1][1] = raspberry // lauv\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n    except:\n        n = 0\n    try:\n        if pineapple % nightly == 0:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            l[1][2] = pineapple // nightly\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n    except:\n        n = 0\n    if l[0][1] != None and l[1][2] != None:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        if (lany + l[0][1]) * l[1][2] == midnight or l[0][1] + lany * l[1][2] == midnight:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            return True\n    if l[0][2] != None and l[1][1] != None:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        if (lany + l[0][2]) * l[1][1] == midnight or l[0][2] + lany * l[1][1] == midnight:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            return True\n    if l[0][0] != None and l[1][2] != None:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        if (lauv + l[0][0]) * l[1][2] == raspberry or l[0][0] + lauv * l[1][2] == raspberry:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            return True\n    if l[0][2] != None and l[1][0] != None:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        if (lauv + l[0][2]) * l[1][0] == raspberry or l[0][2] + lauv * l[1][0] == raspberry:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            return True\n    if l[0][0] != None and l[1][1] != None:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        if (nightly + l[0][0]) * l[1][1] == pineapple or l[0][0] + nightly * l[1][1] == pineapple:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            return True\n    if l[0][1] != None and l[1][0] != None:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        if (nightly + l[0][1]) * l[1][0] == pineapple or l[0][1] + nightly * l[1][0] == pineapple:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            return True\n    return False\nt = int(input())\nlol = lol + lmao\nlmao = reset\nlol -= reset\nwhile t:\n    lol = lol + lmao\n    lmao = reset\n    lol -= reset\n    t -= 1\n    lol = lol + lmao\n    lmao = reset\n    lol -= reset\n    (lany, lauv, nightly) = map(int, input().split())\n    (midnight, raspberry, pineapple) = map(int, input().split())\n    lol = lol + lmao\n    lmao = reset\n    lol -= reset\n    ones = 0\n    lol = lol + lmao\n    lmao = reset\n    lol -= reset\n    zeros = 0\n    lol = lol + lmao\n    lmao = reset\n    lol -= reset\n    x = midnight - lany\n    lol = lol + lmao\n    lmao = reset\n    lol -= reset\n    y = raspberry - lauv\n    lol = lol + lmao\n    lmao = reset\n    lol -= reset\n    z = pineapple - nightly\n    lol = lol + lmao\n    lmao = reset\n    lol -= reset\n    try:\n        if midnight % lany == 0:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            x2 = midnight // lany\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n        else:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            x2 = 75.8463\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n    except:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        x2 = 75.8463\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    try:\n        if raspberry % lauv == 0:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            y2 = raspberry // lauv\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n        else:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            y2 = 857.949\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n    except:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        y2 = 857.949\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    try:\n        if pineapple % nightly == 0:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            z2 = pineapple // nightly\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n        else:\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n            z2 = 553.7465\n            lol = lol + lmao\n            lmao = reset\n            lol -= reset\n    except:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        z2 = 553.7465\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    twins = 0\n    if lany == midnight:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        twins += 1\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    if lauv == raspberry:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        twins += 1\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    if nightly == pineapple:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        twins += 1\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    if twins == 3:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(0)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    elif twins == 2:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(1)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    elif twins == 1 and (x == y or y == z or z == x):\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(1)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    elif twins == 1 and (x2 == y2 and math.ceil(x2) == x2 or (y2 == z2 and math.ceil(y2) == y2) or (z2 == x2 and math.ceil(x2) == x2)):\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(1)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    elif twins == 0 and x == y == z:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(1)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    elif twins == 0 and (x2 == y2 == z2 and math.ceil(x2) == x2):\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(1)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    elif midnight == raspberry == pineapple == 0:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(1)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    elif midnight == raspberry == 0 and nightly == pineapple:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(1)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    elif raspberry == pineapple == 0 and lany == midnight:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(1)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    elif pineapple == midnight == 0 and lauv == raspberry:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(1)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    elif check1(lany, lauv, nightly, midnight, raspberry, pineapple) or check2(x, y, z, x2, y2, z2) or check3(lany, lauv, nightly, midnight, raspberry, pineapple) or check4(lany, lauv, nightly, midnight, raspberry, pineapple):\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(2)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    elif twins == 1 and lany == midnight and (y != z):\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(2)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    elif twins == 1 and lauv == raspberry and (x != z):\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(2)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    elif twins == 1 and nightly == pineapple and (x != y):\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(2)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    elif twins == 0 and (x == y or y == z or z == x):\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(2)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    elif twins == 1 and lany == midnight and (y2 != z2 or math.ceil(y2) != y2):\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(2)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    elif twins == 1 and lauv == raspberry and (x2 != z2 or math.ceil(x2) != x2):\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(2)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    elif twins == 1 and nightly == pineapple and (x2 != y2 or math.ceil(x2) != x2):\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(2)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    elif twins == 0 and (x2 == y2 and math.ceil(x2) == x2 or (y2 == z2 and math.ceil(y2) == y2) or (z2 == x2 and math.ceil(x2) == x2)):\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(2)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n    else:\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset\n        print(3)\n        lol = lol + lmao\n        lmao = reset\n        lol -= reset", "def div1(a1, b1):\n    p = 10 ** 10\n    if a1 != 0:\n        if b1 % a1 == 0:\n            p1 = b1 // a1\n        else:\n            p1 = p + 1\n    elif b1 == 0:\n        p1 = 0\n    else:\n        p1 = p + 1\n    return p1\n\ndef div2(a2, b2):\n    p = 10 ** 10\n    if a2 != 0:\n        if b2 % a2 == 0:\n            p2 = b2 // a2\n        else:\n            p2 = p + 2\n    elif b2 == 0:\n        p2 = 0\n    else:\n        p2 = p + 2\n    return p2\n\ndef div3(a3, b3):\n    p = 10 ** 10\n    if a3 != 0:\n        if b3 % a3 == 0:\n            p3 = b3 // a3\n        else:\n            p3 = p + 3\n    elif b3 == 0:\n        p3 = 0\n    else:\n        p3 = p + 3\n    return p3\n\ndef unique(c1, d1, c2, d2, c3, d3):\n    pr = 3\n    if c1 != 0:\n        if d1 % c1 == 0:\n            m = d1 // c1\n            m1 = d2 - c2\n            if c3 + m1 == d3 or c3 * m == d3 or (c3 + m1) * m == d3 or (c3 * m + m1 == d3):\n                pr = 2\n    if c2 != 0:\n        if d2 % c2 == 0:\n            m = d2 // c2\n            m1 = d1 - c1\n            if c3 + m1 == d3 or c3 * m == d3 or (c3 + m1) * m == d3 or (c3 * m + m1 == d3):\n                pr = 2\n    if c1 != 0 and c2 != 0:\n        if d1 % c1 == 0 and d2 % c2 == 0:\n            m = d1 // c1\n            m1 = d2 // c2\n            if c3 * m == d3 or c3 * m1 == d3 or c3 * m * m1 == d3:\n                pr = 2\n    if c1 != c2:\n        if (d1 - d2) % (c1 - c2) == 0:\n            m = (d1 - d2) // (c1 - c2)\n            m1 = d1 - c1 * m\n            if m == 1 or m1 == 0 or c3 + m1 == d3 or (c3 * m == d3) or (c3 * m + m1 == d3):\n                pr = 2\n    if d1 != d2:\n        if (c1 * d2 - c2 * d1) % (d1 - d2) == 0:\n            m = (c1 * d2 - c2 * d1) // (d1 - d2)\n            if c1 + m != 0:\n                if d1 % (c1 + m) == 0:\n                    m1 = d1 // (c1 + m)\n                    if m == 0 or m1 == 1 or c3 + m == d3 or (c3 * m1 == d3) or ((c3 + m) * m1 == d3):\n                        pr = 2\n    if d1 == d2 and c1 == c2:\n        pr = 2\n    if c3 + (d1 - c1) == d3 or c3 + (d2 - c2) == d3 or c3 + (d1 - c1) + (d2 - c2) == d3:\n        pr = 2\n    return pr\nfor i in range(int(input())):\n    (a1, a2, a3) = map(int, input().split())\n    (b1, b2, b3) = map(int, input().split())\n    d1 = b1 - a1\n    d2 = b2 - a2\n    d3 = b3 - a3\n    p1 = div1(a1, b1)\n    p2 = div2(a2, b2)\n    p3 = div3(a3, b3)\n    l = [a1, a2, a3]\n    l1 = [b1, b2, b3]\n    c = 0\n    j = 0\n    k = 3\n    while j < k:\n        if l[j] == l1[j]:\n            c = c + 1\n            l.remove(l[j])\n            l1.remove(l1[j])\n            k = k - 1\n        else:\n            j = j + 1\n    if c == 3 or c == 2:\n        print(3 - c)\n    elif c == 1:\n        if l1[0] - l[0] == l1[1] - l[1]:\n            print(1)\n        elif l[0] != 0 and l[1] != 0:\n            if l1[0] % l[0] == 0 and l1[1] % l[1] == 0 and (l1[0] / l[0] == l1[1] / l[1]):\n                print(1)\n            else:\n                print(2)\n        else:\n            print(2)\n    elif d1 == d2 and d2 == d3 or (p1 == p2 and p2 == p3):\n        print(1)\n    else:\n        pr1 = 3\n        pr2 = 3\n        pr3 = 3\n        pr1 = unique(a1, b1, a2, b2, a3, b3)\n        pr2 = unique(a3, b3, a1, b1, a2, b2)\n        pr3 = unique(a2, b2, a3, b3, a1, b1)\n        print(min(pr1, pr2, pr3))", "import math\n\ndef floored(x):\n    y = math.floor(math.sqrt(abs(x)))\n    return 1 + y\n\ndef starplus(l1, l2, extra, v):\n    d = l2[0] - l1[0]\n    if l1[0] != 0:\n        if l1[1] != 0 and (l2[1] - d) % l1[1] == 0:\n            k = (l2[1] - d) // l1[1]\n            if l1[2] * k == l2[2] or l1[2] * k + d == l2[2]:\n                v = min(2, v)\n        if l1[1] != 0 and l2[1] % l1[1] == 0:\n            k = l2[1] // l1[1]\n            if l2[2] == l1[2] * k or l1[2] * k + d == l2[2]:\n                v = min(2, v)\n    d = l2[1] - l1[1]\n    if l1[1] != 0:\n        if l1[0] != 0 and (l2[0] - d) % l1[0] == 0:\n            k = (l2[0] - d) // l1[0]\n            if l1[2] * k == l2[2] or l1[2] * k + d == l2[2]:\n                v = min(2, v)\n        if l1[0] != 0 and l2[0] % l1[0] == 0:\n            k = l2[0] // l1[0]\n            if l2[2] == l1[2] * k or l2[2] == l1[2] * k + d:\n                v = min(2, v)\n    d = l2[2] - l1[2]\n    if l1[2] != 0:\n        if l1[0] != 0 and (l2[0] - d) % l1[0] == 0:\n            k = (l2[0] - d) // l1[0]\n            if l1[1] * k == l2[1] or l1[1] * k + d == l2[1]:\n                v = min(2, v)\n        if l1[0] != 0 and l2[0] % l1[0] == 0:\n            k = l2[0] // l1[0]\n            if l1[1] * k == l2[1] or l1[1] * k + d == l2[1]:\n                v = min(2, v)\n    if l1[1] - l1[0] != 0 and (l2[1] - l2[0]) % (l1[1] - l1[0]) == 0:\n        q = (l2[1] - l2[0]) // (l1[1] - l1[0])\n        d = l2[1] - l1[1] * q\n        if l2[2] == l1[2] * q + d or l2[2] == l1[2] * q or l2[2] == l1[2] + d:\n            v = min(2, v)\n    if l1[2] - l1[1] != 0 and (l2[2] - l2[1]) % (l1[2] - l1[1]) == 0:\n        q = (l2[2] - l2[1]) // (l1[2] - l1[1])\n        d = l2[1] - l1[1] * q\n        if l2[0] == l1[0] * q + d or l2[0] == l1[0] * q or l2[0] == l1[0] + d:\n            v = min(2, v)\n    if l1[2] - l1[0] != 0 and (l2[2] - l2[0]) % (l1[2] - l1[0]) == 0:\n        q = (l2[2] - l2[0]) // (l1[2] - l1[0])\n        d = l2[2] - l1[2] * q\n        if l2[1] == l1[1] * q + d or l2[1] == l1[1] * q or l2[1] == l1[1] + d:\n            v = min(2, v)\n    return v\n\ndef check(zing, l1, l2):\n    v = 3\n    d1 = l2[0] - l1[0]\n    d2 = l2[1] - l1[1]\n    d3 = l2[2] - l1[2]\n    if d1 == d2 and d1 == d3:\n        v = 1\n    elif d1 == d2 or d2 == d3 or d1 == d3 or (d1 == d2 + d3) or (d2 == d1 + d3) or (d3 == d1 + d2):\n        v = 2\n    q1 = 10000000000.0\n    q2 = 10000000000.0\n    q3 = 10000000000.0\n    if l1[0] != 0 and l2[0] % l1[0] == 0:\n        q1 = l2[0] // l1[0]\n    if l1[1] != 0 and l2[1] % l1[1] == 0:\n        q2 = l2[1] // l1[1]\n    if l1[2] != 0 and l2[2] % l1[2] == 0:\n        q3 = l2[2] // l1[2]\n    if q1 == q2 and q2 == q3 and (q1 != 10000000000.0):\n        v = min(1, v)\n    if q1 == q2 and q1 != 10000000000.0 or (q2 == q3 and q2 != 10000000000.0) or (q1 == q3 and q1 != 10000000000.0):\n        v = min(2, v)\n    if q1 != 10000000000.0 and q2 != 10000000000.0 and (q3 != 10000000000.0) and (q1 * q2 == q3 or q1 * q3 == q2 or q2 * q3 == q1):\n        v = min(2, v)\n    f1 = []\n    f2 = []\n    f3 = []\n    for i in range(1, floored(l2[0])):\n        if l2[0] % i == 0:\n            f1.append(i)\n            f1.append(l2[0] // i)\n            i *= -1\n            f1.append(i)\n            f1.append(l2[0] // i)\n    for i in range(1, floored(l2[1])):\n        if l2[1] % i == 0:\n            f2.append(i)\n            f2.append(l2[1] // i)\n            i *= -1\n            f2.append(i)\n            f2.append(l2[1] // i)\n    for i in range(1, floored(l2[2])):\n        if l2[2] % i == 0:\n            f3.append(i)\n            f3.append(l2[2] // i)\n            i *= -1\n            f3.append(i)\n            f3.append(l2[2] // i)\n    f1 = list(set(f1))\n    f2 = list(set(f2))\n    f3 = list(set(f3))\n    v = min(v, starplus(l1, l2, 1, v))\n    for i in f1:\n        if i != 0 and l2[0] % i == 0:\n            x = l2[0] // i - l1[0]\n        else:\n            x = l2[0] - l1[0]\n        if l2[1] - l1[1] == x or (i != 0 and l2[1] % i == 0 and (l2[1] // i - l1[1] == 0 or l2[1] // i - l1[1] == x)):\n            if l2[2] - l1[2] == x or (i != 0 and l2[2] % i == 0 and (l2[2] // i - l1[2] == 0 or l2[2] // i - l1[2] == x)):\n                v = min(2, v)\n    for i in f2:\n        if i != 0 and l2[1] % i == 0:\n            x = l2[1] // i - l1[1]\n        else:\n            x = l2[1] - l1[1]\n        if l2[0] - l1[0] == x or (i != 0 and l2[0] % i == 0 and (l2[0] // i - l1[0] == 0 or l2[0] // i - l1[0] == x)):\n            if l2[2] - l1[2] == x or (i != 0 and l2[2] % i == 0 and (l2[2] // i - l1[2] == 0 or l2[2] // i - l1[2] == x)):\n                v = min(2, v)\n    for i in f3:\n        if i != 0 and l2[2] % i == 0:\n            x = l2[2] // i - l1[2]\n        else:\n            x = l2[2] - l1[2]\n        if l2[0] - l1[0] == x or (i != 0 and l2[0] % i == 0 and (l2[0] // i - l1[0] == 0 or l2[0] // i - l1[0] == x)):\n            if l2[1] - l1[1] == x or (i != 0 and l2[1] % i == 0 and (l2[1] // i - l1[1] == 0 or l2[1] // i - l1[1] == x)):\n                v = min(2, v)\n    return v\n\ndef push(a, b, under):\n    l1 = list()\n    l2 = []\n    if a[0] != b[0]:\n        l1.append(a[0])\n        l2.append(b[0])\n    if a[1] != b[1]:\n        l1.append(a[1])\n        l2.append(b[1])\n    if a[2] != b[2]:\n        l1.append(a[2])\n        l2.append(b[2])\n    v = 3\n    if len(l1) == 0:\n        v = 0\n    elif len(l1) == 1:\n        v = 1\n    elif len(l1) == 2:\n        v = 2\n        d1 = l2[0] - l1[0]\n        d2 = l2[1] - l1[1]\n        if d1 == d2:\n            v = 1\n        if l1[0] != 0 and l1[1] != 0 and (l2[1] % l1[1] == 0) and (l2[0] % l1[0] == 0):\n            q1 = l2[0] // l1[0]\n            q2 = l2[1] // l1[1]\n            if q1 == q2:\n                v = 1\n    elif len(l1) == 3:\n        v = check(1, l1, l2)\n    print(v)\nfor _ in range(int(input())):\n    t1 = list(map(int, input().split()))\n    t2 = list(map(int, input().split()))\n    push(t1, t2, 1)", "def checkzero(a, b, c, p, q, r):\n    if a == p and b == q and (c == r):\n        return True\n    return False\n\ndef checkone(a, b, c, p, q, r):\n    diff = p - a\n    if checkzero(a + diff, b, c, p, q, r) or checkzero(a + diff, b + diff, c, p, q, r) or checkzero(a + diff, b, c + diff, p, q, r) or checkzero(a + diff, b + diff, c + diff, p, q, r):\n        return True\n    if a != 0 and p % a == 0:\n        diff = p // a\n        if checkzero(a * diff, b, c, p, q, r) or checkzero(a * diff, b * diff, c, p, q, r) or checkzero(a * diff, b, c * diff, p, q, r) or checkzero(a * diff, b * diff, c * diff, p, q, r):\n            return True\n    return False\n\ndef check1(a, b, c, p, q, r):\n    if checkone(a, b, c, p, q, r) or checkone(b, c, a, q, r, p) or checkone(c, a, b, r, p, q):\n        return True\n    return False\n\ndef checktwo(a, b, c, p, q, r):\n    diff = p - a\n    if check1(a + diff, b, c, p, q, r) or check1(a + diff, b + diff, c, p, q, r) or check1(a + diff, b, c + diff, p, q, r) or check1(a + diff, b + diff, c + diff, p, q, r):\n        return True\n    if a != 0:\n        diff = p // a\n        if check1(a * diff, b, c, p, q, r) or check1(a * diff, b * diff, c, p, q, r) or check1(a * diff, b, c * diff, p, q, r) or check1(a * diff, b * diff, c * diff, p, q, r):\n            return True\n    return False\n\ndef check2(a, b, c, p, q, r):\n    if checktwo(a, b, c, p, q, r) or checktwo(b, c, a, q, r, p) or checktwo(c, a, b, r, p, q):\n        return True\n    return False\n\ndef newchecktwo(a, b, c, p, q, r):\n    if a - b != 0:\n        k = (p - q) / (a - b)\n        x = (a * q - p * b) / (a - b)\n        if k % 1 == 0 and x % 1 == 0:\n            if checkzero(a * k + x, b * k + x, c * k, p, q, r) or checkzero(a * k + x, b * k + x, c * k + x, p, q, r) or checkzero(a * k + x, b * k + x, c + x, p, q, r):\n                return True\n    return False\n\ndef newcheck2(a, b, c, p, q, r):\n    if newchecktwo(a, b, c, p, q, r) or newchecktwo(b, c, a, q, r, p) or newchecktwo(c, a, b, r, p, q):\n        return True\n    return False\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    (p, q, r) = map(int, input().split())\n    for o in range(45):\n        break\n    if checkzero(a, b, c, p, q, r):\n        print(0)\n        continue\n    for o in range(45):\n        break\n    if check1(a, b, c, p, q, r):\n        print(1)\n        continue\n    if check2(a, b, c, p, q, r):\n        print(2)\n        continue\n    if newcheck2(a, b, c, p, q, r):\n        print(2)\n        continue\n    print(3)", "from sys import stdin\nfrom math import gcd\nfrom functools import reduce\n\ndef factors(n):\n    return list(set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0))))\nfor _ in range(int(stdin.readline())):\n    (p, q, r) = map(int, stdin.readline().split())\n    (a, b, c) = map(int, stdin.readline().split())\n    if p == a:\n        if q == b:\n            if r == c:\n                print(0)\n            else:\n                print(1)\n        elif r == c:\n            print(1)\n        elif b - q == c - r or ((q != 0 and r != 0) and (b % q == 0 and c % r == 0) and (b // q == c // r)):\n            print(1)\n        else:\n            print(2)\n    elif q == b:\n        if r == c:\n            print(1)\n        elif a - p == c - r or ((p != 0 and r != 0) and (a % p == 0 and c % r == 0) and (a // p == c // r)):\n            print(1)\n        else:\n            print(2)\n    elif r == c:\n        if a - p == b - q or ((p != 0 and q != 0) and (a % p == 0 and b % q == 0) and (a // p == b // q)):\n            print(1)\n        else:\n            print(2)\n    elif a - p == b - q == c - r or ((p != 0 and q != 0 and (r != 0)) and (a % p == 0 and b % q == 0 and (c % r == 0)) and (a // p == b // q == c // r)):\n        print(1)\n    else:\n        cond = True\n        if a - p == b - q or b - q == c - r or c - r == a - p:\n            print(2)\n            continue\n        if a - p + b - q == c - r or b - q + c - r == a - p or c - r + a - p == b - q:\n            print(2)\n            continue\n        if p != 0 and q != 0 and (a % p == 0) and (b % q == 0) and (a // p == b // q) or (q != 0 and r != 0 and (b % q == 0) and (c % r == 0) and (b // q == c // r)) or (r != 0 and p != 0 and (c % r == 0) and (a % p == 0) and (c // r == a // p)):\n            print(2)\n            continue\n        if (p != 0 and q != 0 and (r != 0)) and (a % p == 0 and b % q == 0 and (c % r == 0)) and (a // p * (b // q) == c // r or a // p * (c // r) == b // q or b // q * (c // r) == a // p):\n            print(2)\n            continue\n        if cond == True:\n            k = gcd(a, gcd(b, c))\n            arr = factors(k)\n            for i in range(1, len(arr)):\n                (x, y, z) = (a // arr[i], b // arr[i], c // arr[i])\n                if x - p == y - q == z - r:\n                    cond = False\n                    break\n                (x, y, z) = (a // (0 - arr[i]), b // (0 - arr[i]), c // (0 - arr[i]))\n                if x - p == y - q == z - r:\n                    cond = False\n                    break\n            if cond == False:\n                print(2)\n                continue\n        if cond == True:\n            d = c - r\n            if (p + d != 0 and q + d != 0) and (a % (p + d) == 0 and b % (q + d) == 0) and (a // (p + d) == b // (q + d)):\n                print(2)\n                continue\n            d = a - p\n            if (r + d != 0 and q + d != 0) and (c % (r + d) == 0 and b % (q + d) == 0) and (c // (r + d) == b // (q + d)):\n                print(2)\n                continue\n            d = b - q\n            if (p + d != 0 and r + d != 0) and (a % (p + d) == 0 and c % (r + d) == 0) and (a // (p + d) == c // (r + d)):\n                print(2)\n                continue\n        if cond == True:\n            if r != 0 and c % r == 0:\n                k = c // r\n                if k != 0:\n                    if a % k == 0 and b % k == 0:\n                        (x, y) = (a // k, b // k)\n                        if x - p == y - q:\n                            print(2)\n                            continue\n            if p != 0 and a % p == 0:\n                k = a // p\n                if k != 0:\n                    if c % k == 0 and b % k == 0:\n                        (z, y) = (c // k, b // k)\n                        if z - r == y - q:\n                            print(2)\n                            continue\n            if q != 0 and b % q == 0:\n                k = b // q\n                if k != 0:\n                    if a % k == 0 and c % k == 0:\n                        (x, z) = (a // k, c // k)\n                        if x - p == z - r:\n                            print(2)\n                            continue\n        if cond == True:\n            if r != 0 and c % r == 0:\n                k = c // r\n                if k != 0:\n                    if a % k == 0 and a // k - p == b - q or (b % k == 0 and b // k - q == a - p):\n                        print(2)\n                        continue\n            if p != 0 and a % p == 0:\n                k = a // p\n                if k != 0:\n                    if c % k == 0 and c // k - r == b - q or (b % k == 0 and b // k - q == c - r):\n                        print(2)\n                        continue\n            if q != 0 and b % q == 0:\n                k = b // q\n                if k != 0:\n                    if a % k == 0 and a // k - p == c - r or (c % k == 0 and c // k - r == a - p):\n                        print(2)\n                        continue\n        if (p != q and q != r and (p != r)) and ((a - b) % (p - q) == 0 and (a - c) % (p - r) == 0 and ((c - b) % (r - q) == 0)) and ((a - b) // (p - q) == (a - c) // (p - r) == (c - b) // (r - q)):\n            print(2)\n            continue\n        if r != 0 and c % r == 0:\n            k = c // r\n            if k != 0:\n                if a - p * k == b - q * k:\n                    print(2)\n                    continue\n        if p != 0 and a % p == 0:\n            k = a // p\n            if k != 0:\n                if c - r * k == b - q * k:\n                    print(2)\n                    continue\n        if q != 0 and b % q == 0:\n            k = b // q\n            if k != 0:\n                if a - p * k == c - r * k:\n                    print(2)\n                    continue\n        if cond == True:\n            d = c - r\n            if p != 0 and q != 0:\n                if (a - d) % p == 0 and (b - d) % q == 0 and ((a - d) // p == (b - d) // q):\n                    print(2)\n                    continue\n            d = a - p\n            if r != 0 and q != 0:\n                if (c - d) % r == 0 and (b - d) % q == 0 and ((c - d) // r == (b - d) // q):\n                    print(2)\n                    continue\n            d = b - q\n            if p != 0 and r != 0:\n                if (a - d) % p == 0 and (c - d) % r == 0 and ((a - d) // p == (c - d) // r):\n                    print(2)\n                    continue\n        if cond == True:\n            d = c - r\n            if p != 0 and q != 0 and ((b - d) % q == 0) and (a % p == 0) and ((b - d) // q == a // p):\n                print(2)\n                continue\n            if p != 0 and q != 0 and ((a - d) % p == 0) and (b % q == 0) and ((a - d) // p == b // q):\n                print(2)\n                continue\n            d = a - p\n            if r != 0 and q != 0 and ((b - d) % q == 0) and (c % r == 0) and ((b - d) // q == c // r):\n                print(2)\n                continue\n            if r != 0 and q != 0 and ((c - d) % r == 0) and (b % q == 0) and ((c - d) // r == b // q):\n                print(2)\n                continue\n            d = b - q\n            if p != 0 and r != 0 and ((c - d) % r == 0) and (a % p == 0) and ((c - d) // r == a // p):\n                print(2)\n                continue\n            if p != 0 and r != 0 and ((a - d) % p == 0) and (c % r == 0) and ((a - d) // p == c // r):\n                print(2)\n                continue\n        if cond == True:\n            if a == b == c == 0:\n                print(1)\n                continue\n            if a == b == c:\n                print(2)\n                continue\n            if a == b == 0 or b == c == 0 or a == c == 0:\n                print(2)\n                continue\n            if a == 0 and b == c or (b == 0 and a == c) or (c == 0 and b == a):\n                print(2)\n                continue\n        print(3)", "import math\n\ndef ifDeno(a1, b1, c1, a2, b2, c2):\n    harre = 10\n    kawab = 20\n    if a2 == b2 == c2 != 0:\n        harre = 10\n        kawab = 20\n        return True\n    if a2 == b2:\n        harre = 10\n        kawab = 20\n        if c1 == c2:\n            harre = 10\n            kawab = 20\n            return True\n        if c2 == 0:\n            harre = 10\n            kawab = 20\n            return True\n        if c1 + a2 == c2:\n            harre = 10\n            kawab = 20\n            return True\n            harre = 10\n            kawab = 20\n    if b2 == c2:\n        harre = 10\n        kawab = 20\n        if a1 == a2:\n            harre = 10\n            kawab = 20\n            return True\n            harre = 10\n            kawab = 20\n        if a2 == 0:\n            harre = 10\n            kawab = 20\n            return True\n            harre = 10\n            kawab = 20\n        if a1 + b2 == a2:\n            harre = 10\n            kawab = 20\n            return True\n            harre = 10\n            kawab = 20\n    if c2 == a2:\n        harre = 10\n        kawab = 20\n        if b1 == b2:\n            harre = 10\n            kawab = 20\n            return True\n            harre = 10\n            kawab = 20\n        if b2 == 0:\n            harre = 10\n            kawab = 20\n            return True\n            harre = 10\n            kawab = 20\n        if b1 + a2 == b2:\n            harre = 10\n            kawab = 20\n            return True\n            harre = 10\n            kawab = 20\n    return False\n\ndef ifCombo(x, y, z, x2, y2, z2):\n    harre = 10\n    kawab = 20\n    if x + y == z or y + z == x or z + x == y:\n        harre = 10\n        kawab = 20\n        return True\n    if x2 == math.ceil(x2) and y2 == math.ceil(y2) and (z2 == math.ceil(z2)):\n        harre = 10\n        kawab = 20\n        if x2 * y2 == z2 or y2 * z2 == x2 or z2 * x2 == y2:\n            harre = 10\n            kawab = 20\n            return True\n            harre = 10\n            kawab = 20\n    return False\n\ndef ifTwo(a1, b1, c1, a2, b2, c2):\n    harre = 10\n    kawab = 20\n    ints = []\n    harre = 10\n    kawab = 20\n    try:\n        harre = 10\n        kawab = 20\n        if a2 != b2 and a1 != b1:\n            harre = 10\n            kawab = 20\n            if (a2 - b2) % (a1 - b1) == 0:\n                harre = 10\n                kawab = 20\n                x = (a2 - b2) // (a1 - b1)\n                harre = 10\n                kawab = 20\n                if a2 - a1 * x == b2 - b1 * x:\n                    harre = 10\n                    kawab = 20\n                    ints.append(x)\n    except:\n        harre = 10\n        kawab = 20\n        n = 0\n    try:\n        if b2 != c2 and b1 != c1:\n            harre = 10\n            kawab = 20\n            if (b2 - c2) % (b1 - c1) == 0:\n                harre = 10\n                kawab = 20\n                x = (b2 - c2) // (b1 - c1)\n                harre = 10\n                kawab = 20\n                if b2 - b1 * x == c2 - c1 * x:\n                    harre = 10\n                    kawab = 20\n                    ints.append(x)\n                    harre = 10\n                    kawab = 20\n    except:\n        harre = 10\n        kawab = 20\n        n = 0\n    try:\n        harre = 10\n        kawab = 20\n        if c2 != a2 and c1 != a1:\n            harre = 10\n            kawab = 20\n            if (c2 - a2) % (c1 - a1) == 0:\n                harre = 10\n                kawab = 20\n                x = (c2 - a2) // (c1 - a1)\n                harre = 10\n                kawab = 20\n                if c2 - c1 * x == a2 - a1 * x:\n                    harre = 10\n                    kawab = 20\n                    ints.append(x)\n                    harre = 10\n                    kawab = 20\n    except:\n        harre = 10\n        kawab = 20\n        n = 0\n    if len(ints) == 3 and len(set(ints)) == 1:\n        harre = 10\n        kawab = 20\n        return True\n        harre = 10\n        kawab = 20\n    if len(ints) == 3 and len(set(ints)) == 2:\n        harre = 10\n        kawab = 20\n        return True\n        harre = 10\n        kawab = 20\n    if len(ints) == 3 and len(set(ints)) == 3:\n        harre = 10\n        kawab = 20\n        try:\n            harre = 10\n            kawab = 20\n            x = (a2 - b2) // (a1 - b1)\n            harre = 10\n            kawab = 20\n            y = a2 - a1 * x\n            harre = 10\n            kawab = 20\n            xx = (a1 * b2 - a2 * b1) // (a2 - b2)\n            harre = 10\n            kawab = 20\n            yy = a2 // (a1 + xx)\n            harre = 10\n            kawab = 20\n            if (a1 * b2 - a2 * b1) % (a2 - b2) != 0:\n                harre = 10\n                kawab = 20\n                xx = 0.4857454\n                harre = 10\n                kawab = 20\n                yy = 0.294823\n                harre = 10\n                kawab = 20\n            if c1 == c2 or c1 + y == c2 or c1 * x == c2 or (c1 + xx == c2) or (c1 * yy == c2):\n                harre = 10\n                kawab = 20\n                return True\n        except:\n            harre = 10\n            kawab = 20\n            n = 0\n        try:\n            harre = 10\n            kawab = 20\n            x = (b2 - c2) // (b1 - c1)\n            harre = 10\n            kawab = 20\n            y = b2 - b1 * x\n            harre = 10\n            kawab = 20\n            xx = (b1 * c2 - b2 * c1) // (b2 - c2)\n            harre = 10\n            kawab = 20\n            yy = b2 // (b1 + xx)\n            harre = 10\n            kawab = 20\n            if (b1 * c2 - b2 * c1) % (b2 - c2) != 0:\n                harre = 10\n                kawab = 20\n                xx = 0.4857454\n                harre = 10\n                kawab = 20\n                yy = 0.294823\n                harre = 10\n                kawab = 20\n            if a1 == a2 or a1 + y == a2 or a1 * x == a2 or (a1 + xx == a2) or (a1 * yy == a2):\n                harre = 10\n                kawab = 20\n                return True\n                harre = 10\n                kawab = 20\n        except:\n            harre = 10\n            kawab = 20\n            n = 0\n        try:\n            harre = 10\n            kawab = 20\n            x = (c2 - a2) // (c1 - a1)\n            harre = 10\n            kawab = 20\n            y = c2 - c1 * x\n            harre = 10\n            kawab = 20\n            xx = (c1 * a2 - c2 * a1) // (c2 - a2)\n            harre = 10\n            kawab = 20\n            yy = c2 // (c1 + xx)\n            harre = 10\n            kawab = 20\n            if (c1 * a2 - c2 * a1) % (c2 - a2) != 0:\n                harre = 10\n                kawab = 20\n                xx = 0.4857454\n                harre = 10\n                kawab = 20\n                yy = 0.294823\n                harre = 10\n                kawab = 20\n            if b1 == b2 or b1 + y == b2 or b1 * x == b2 or (b1 + xx == b2) or (b1 * yy == b2):\n                harre = 10\n                kawab = 20\n                return True\n                harre = 10\n                kawab = 20\n        except:\n            harre = 10\n            kawab = 20\n            n = 0\n    if len(ints) == 2 and len(set(ints)) == 1:\n        harre = 10\n        kawab = 20\n        return True\n        harre = 10\n        kawab = 20\n    if len(ints) == 2 and len(set(ints)) == 2 or len(ints) == 1:\n        harre = 10\n        kawab = 20\n        try:\n            harre = 10\n            kawab = 20\n            if a2 != b2 and a1 != b1:\n                harre = 10\n                kawab = 20\n                if (a2 - b2) % (a1 - b1) == 0:\n                    harre = 10\n                    kawab = 20\n                    x = (a2 - b2) // (a1 - b1)\n                    harre = 10\n                    kawab = 20\n                    if a2 - a1 * x == b2 - b1 * x:\n                        harre = 10\n                        kawab = 20\n                        y = a2 - a1 * x\n                        harre = 10\n                        kawab = 20\n                        xx = (a1 * b2 - a2 * b1) // (a2 - b2)\n                        harre = 10\n                        kawab = 20\n                        yy = a2 // (a1 + xx)\n                        harre = 10\n                        kawab = 20\n                        if (a1 * b2 - a2 * b1) % (a2 - b2) != 0:\n                            harre = 10\n                            kawab = 20\n                            xx = 0.4857454\n                            harre = 10\n                            kawab = 20\n                            yy = 0.294823\n                            harre = 10\n                            kawab = 20\n                        if c1 == c2 or c1 + y == c2 or c1 * x == c2 or (c1 + xx == c2) or (c1 * yy == c2):\n                            harre = 10\n                            kawab = 20\n                            return True\n                            harre = 10\n                            kawab = 20\n        except:\n            harre = 10\n            kawab = 20\n            n = 0\n        try:\n            harre = 10\n            kawab = 20\n            if b2 != c2 and b1 != c1:\n                harre = 10\n                kawab = 20\n                if (b2 - c2) % (b1 - c1) == 0:\n                    harre = 10\n                    kawab = 20\n                    x = (b2 - c2) // (b1 - c1)\n                    harre = 10\n                    kawab = 20\n                    if b2 - b1 * x == c2 - c1 * x:\n                        harre = 10\n                        kawab = 20\n                        y = b2 - b1 * x\n                        harre = 10\n                        kawab = 20\n                        xx = (b1 * c2 - b2 * c1) // (b2 - c2)\n                        harre = 10\n                        kawab = 20\n                        yy = b2 // (b1 + xx)\n                        harre = 10\n                        kawab = 20\n                        if (b1 * c2 - b2 * c1) % (b2 - c2) != 0:\n                            harre = 10\n                            kawab = 20\n                            xx = 0.4857454\n                            harre = 10\n                            kawab = 20\n                            yy = 0.294823\n                            harre = 10\n                            kawab = 20\n                        if a1 == a2 or a1 + y == a2 or a1 * x == a2 or (a1 + xx == a2) or (a1 * yy == a2):\n                            harre = 10\n                            kawab = 20\n                            return True\n                            harre = 10\n                            kawab = 20\n        except:\n            harre = 10\n            kawab = 20\n            n = 0\n        try:\n            harre = 10\n            kawab = 20\n            if c2 != a2 and c1 != a1:\n                harre = 10\n                kawab = 20\n                if (c2 - a2) % (c1 - a1) == 0:\n                    harre = 10\n                    kawab = 20\n                    x = (c2 - a2) // (c1 - a1)\n                    harre = 10\n                    kawab = 20\n                    if c2 - c1 * x == a2 - a1 * x:\n                        harre = 10\n                        kawab = 20\n                        y = c2 - c1 * x\n                        harre = 10\n                        kawab = 20\n                        xx = (c1 * a2 - c2 * a1) // (c2 - a2)\n                        harre = 10\n                        kawab = 20\n                        yy = c2 // (c1 + xx)\n                        harre = 10\n                        kawab = 20\n                        if (c1 * a2 - c2 * a1) % (c2 - a2) != 0:\n                            harre = 10\n                            kawab = 20\n                            xx = 0.4857454\n                            harre = 10\n                            kawab = 20\n                            yy = 0.294823\n                            harre = 10\n                            kawab = 20\n                        if b1 == b2 or b1 + y == b2 or b1 * x == b2 or (b1 + xx == b2) or (b1 * yy == b2):\n                            harre = 10\n                            kawab = 20\n                            return True\n        except:\n            harre = 10\n            kawab = 20\n            n = 0\n            harre = 10\n            kawab = 20\n    return False\n\ndef ifGrid(a1, b1, c1, a2, b2, c2):\n    harre = 10\n    kawab = 20\n    l = [[None, None, None], [None, None, None]]\n    harre = 10\n    kawab = 20\n    l[0][0] = a2 - a1\n    harre = 10\n    kawab = 20\n    l[0][1] = b2 - b1\n    harre = 10\n    kawab = 20\n    l[0][2] = c2 - c1\n    harre = 10\n    kawab = 20\n    try:\n        harre = 10\n        kawab = 20\n        if a2 % a1 == 0:\n            harre = 10\n            kawab = 20\n            l[1][0] = a2 // a1\n            harre = 10\n            kawab = 20\n    except:\n        harre = 10\n        kawab = 20\n        n = 0\n        harre = 10\n        kawab = 20\n    try:\n        harre = 10\n        kawab = 20\n        if b2 % b1 == 0:\n            harre = 10\n            kawab = 20\n            l[1][1] = b2 // b1\n            harre = 10\n            kawab = 20\n    except:\n        harre = 10\n        kawab = 20\n        n = 0\n    try:\n        harre = 10\n        kawab = 20\n        if c2 % c1 == 0:\n            harre = 10\n            kawab = 20\n            l[1][2] = c2 // c1\n            harre = 10\n            kawab = 20\n    except:\n        harre = 10\n        kawab = 20\n        n = 0\n        harre = 10\n        kawab = 20\n    if l[0][1] != None and l[1][2] != None:\n        harre = 10\n        kawab = 20\n        if (a1 + l[0][1]) * l[1][2] == a2 or l[0][1] + a1 * l[1][2] == a2:\n            harre = 10\n            kawab = 20\n            return True\n            harre = 10\n            kawab = 20\n    if l[0][2] != None and l[1][1] != None:\n        harre = 10\n        kawab = 20\n        if (a1 + l[0][2]) * l[1][1] == a2 or l[0][2] + a1 * l[1][1] == a2:\n            harre = 10\n            kawab = 20\n            return True\n            harre = 10\n            kawab = 20\n    if l[0][0] != None and l[1][2] != None:\n        harre = 10\n        kawab = 20\n        if (b1 + l[0][0]) * l[1][2] == b2 or l[0][0] + b1 * l[1][2] == b2:\n            harre = 10\n            kawab = 20\n            return True\n            harre = 10\n            kawab = 20\n    if l[0][2] != None and l[1][0] != None:\n        harre = 10\n        kawab = 20\n        if (b1 + l[0][2]) * l[1][0] == b2 or l[0][2] + b1 * l[1][0] == b2:\n            harre = 10\n            kawab = 20\n            return True\n            harre = 10\n            kawab = 20\n    if l[0][0] != None and l[1][1] != None:\n        harre = 10\n        kawab = 20\n        if (c1 + l[0][0]) * l[1][1] == c2 or l[0][0] + c1 * l[1][1] == c2:\n            harre = 10\n            kawab = 20\n            return True\n            harre = 10\n            kawab = 20\n    if l[0][1] != None and l[1][0] != None:\n        harre = 10\n        kawab = 20\n        if (c1 + l[0][1]) * l[1][0] == c2 or l[0][1] + c1 * l[1][0] == c2:\n            harre = 10\n            kawab = 20\n            return True\n            harre = 10\n            kawab = 20\n    return False\nt = int(input())\nharre = 10\nkawab = 20\nwhile t:\n    harre = 10\n    kawab = 20\n    t -= 1\n    harre = 10\n    kawab = 20\n    (a1, b1, c1) = map(int, input().split())\n    harre = 10\n    kawab = 20\n    (a2, b2, c2) = map(int, input().split())\n    harre = 10\n    kawab = 20\n    ones = 0\n    harre = 10\n    kawab = 20\n    zeros = 0\n    harre = 10\n    kawab = 20\n    x = a2 - a1\n    harre = 10\n    kawab = 20\n    y = b2 - b1\n    harre = 10\n    kawab = 20\n    z = c2 - c1\n    harre = 10\n    kawab = 20\n    try:\n        harre = 10\n        kawab = 20\n        if a2 % a1 == 0:\n            harre = 10\n            kawab = 20\n            x2 = a2 // a1\n            harre = 10\n            kawab = 20\n        else:\n            harre = 10\n            kawab = 20\n            x2 = 8.12248952\n            harre = 10\n            kawab = 20\n    except:\n        harre = 10\n        kawab = 20\n        x2 = 8.12248952\n    try:\n        harre = 10\n        kawab = 20\n        if b2 % b1 == 0:\n            harre = 10\n            kawab = 20\n            y2 = b2 // b1\n            harre = 10\n            kawab = 20\n        else:\n            harre = 10\n            kawab = 20\n            y2 = 43.82248952\n            harre = 10\n            kawab = 20\n    except:\n        harre = 10\n        kawab = 20\n        y2 = 43.82248952\n        harre = 10\n        kawab = 20\n    try:\n        harre = 10\n        kawab = 20\n        if c2 % c1 == 0:\n            harre = 10\n            kawab = 20\n            z2 = c2 // c1\n            harre = 10\n            kawab = 20\n        else:\n            harre = 10\n            kawab = 20\n            z2 = 3.81118952\n            harre = 10\n            kawab = 20\n    except:\n        harre = 10\n        kawab = 20\n        z2 = 3.81118952\n    harre = 10\n    kawab = 20\n    same = 0\n    harre = 10\n    kawab = 20\n    if a1 == a2:\n        harre = 10\n        kawab = 20\n        same += 1\n        harre = 10\n        kawab = 20\n    if b1 == b2:\n        harre = 10\n        kawab = 20\n        same += 1\n        harre = 10\n        kawab = 20\n    if c1 == c2:\n        harre = 10\n        kawab = 20\n        same += 1\n        harre = 10\n        kawab = 20\n    if same == 3:\n        harre = 10\n        kawab = 20\n        print(0)\n        harre = 10\n        kawab = 20\n    elif same == 2:\n        harre = 10\n        kawab = 20\n        print(1)\n        harre = 10\n        kawab = 20\n    elif same == 1 and (x == y or y == z or z == x):\n        harre = 10\n        kawab = 20\n        print(1)\n        harre = 10\n        kawab = 20\n    elif same == 1 and (x2 == y2 and math.ceil(x2) == x2 or (y2 == z2 and math.ceil(y2) == y2) or (z2 == x2 and math.ceil(x2) == x2)):\n        harre = 10\n        kawab = 20\n        print(1)\n        harre = 10\n        kawab = 20\n    elif same == 0 and x == y == z:\n        harre = 10\n        kawab = 20\n        print(1)\n        harre = 10\n        kawab = 20\n    elif same == 0 and (x2 == y2 == z2 and math.ceil(x2) == x2):\n        harre = 10\n        kawab = 20\n        print(1)\n        harre = 10\n        kawab = 20\n    elif a2 == b2 == c2 == 0:\n        harre = 10\n        kawab = 20\n        print(1)\n        harre = 10\n        kawab = 20\n    elif a2 == b2 == 0 and c1 == c2:\n        harre = 10\n        kawab = 20\n        print(1)\n        harre = 10\n        kawab = 20\n    elif b2 == c2 == 0 and a1 == a2:\n        harre = 10\n        kawab = 20\n        print(1)\n        harre = 10\n        kawab = 20\n    elif c2 == a2 == 0 and b1 == b2:\n        harre = 10\n        kawab = 20\n        print(1)\n        harre = 10\n        kawab = 20\n    elif ifTwo(a1, b1, c1, a2, b2, c2) or ifCombo(x, y, z, x2, y2, z2) or ifDeno(a1, b1, c1, a2, b2, c2) or ifGrid(a1, b1, c1, a2, b2, c2):\n        harre = 10\n        kawab = 20\n        print(2)\n        harre = 10\n        kawab = 20\n    elif same == 1 and a1 == a2 and (y != z):\n        harre = 10\n        kawab = 20\n        print(2)\n        harre = 10\n        kawab = 20\n    elif same == 1 and b1 == b2 and (x != z):\n        harre = 10\n        kawab = 20\n        print(2)\n        harre = 10\n        kawab = 20\n    elif same == 1 and c1 == c2 and (x != y):\n        harre = 10\n        kawab = 20\n        print(2)\n        harre = 10\n        kawab = 20\n    elif same == 0 and (x == y or y == z or z == x):\n        harre = 10\n        kawab = 20\n        print(2)\n        harre = 10\n        kawab = 20\n    elif same == 1 and a1 == a2 and (y2 != z2 or math.ceil(y2) != y2):\n        harre = 10\n        kawab = 20\n        print(2)\n        harre = 10\n        kawab = 20\n    elif same == 1 and b1 == b2 and (x2 != z2 or math.ceil(x2) != x2):\n        harre = 10\n        kawab = 20\n        print(2)\n        harre = 10\n        kawab = 20\n    elif same == 1 and c1 == c2 and (x2 != y2 or math.ceil(x2) != x2):\n        harre = 10\n        kawab = 20\n        print(2)\n        harre = 10\n        kawab = 20\n    elif same == 0 and (x2 == y2 and math.ceil(x2) == x2 or (y2 == z2 and math.ceil(y2) == y2) or (z2 == x2 and math.ceil(x2) == x2)):\n        harre = 10\n        kawab = 20\n        print(2)\n        harre = 10\n        kawab = 20\n    else:\n        harre = 10\n        kawab = 20\n        print(3)\n        harre = 10\n        kawab = 20", "import math\n\ndef solve():\n    a = list(map(float, input().split()))\n    p = list(map(float, input().split()))\n    d = [p[0] - a[0], p[1] - a[1], p[2] - a[2]]\n    div = []\n    for i in range(3):\n        try:\n            div.append(p[i] / a[i])\n        except:\n            div.append(math.nan)\n    if d[0] == 0 and d[1] == 0 and (d[2] == 0):\n        print(0)\n        return\n    else:\n        if d[0] == d[1] and d[1] == d[2]:\n            print(1)\n            return\n        if div[0].is_integer() and div[1].is_integer() and div[2].is_integer():\n            if div[0] == div[1] and div[1] == div[2]:\n                print(1)\n                return\n        for i in range(3):\n            (j, k) = ((i + 1) % 3, (i + 2) % 3)\n            if d[i] == 0 and d[j] == d[k] or (d[j] == 0 and d[k] == 0):\n                print(1)\n                return\n            if div[j].is_integer() and div[k].is_integer():\n                if d[i] == 0 and div[k] == div[j] or (div[j] == 1 and div[k] == 1):\n                    print(1)\n                    return\n        for i in range(3):\n            (j, k) = ((i + 1) % 3, (i + 2) % 3)\n            if d[i] == 0:\n                print(2)\n                return\n            if d[j] == d[k]:\n                print(2)\n                return\n            if div[j].is_integer() and div[k].is_integer():\n                if div[k] == div[j]:\n                    print(2)\n                    return\n            if div[j].is_integer() and div[k].is_integer():\n                if p[i] == div[j] * div[k] * a[i]:\n                    print(2)\n                    return\n            if p[i] == d[j] + d[k] + a[i]:\n                print(2)\n                return\n        for i in range(3):\n            (j, k) = ((i + 1) % 3, (i + 2) % 3)\n            try:\n                u = (p[j] - p[k]) / (a[j] - a[k])\n            except:\n                u = math.nan\n            try:\n                v = (a[j] * p[k] - p[j] * a[k]) / (a[j] - a[k])\n            except:\n                v = math.nan\n            if u.is_integer():\n                if p[i] == a[i] + v or p[i] == a[i] * u or p[i] == a[i] * u + v:\n                    print(2)\n                    return\n            try:\n                u = (p[j] - p[k]) / (a[j] - a[k])\n            except:\n                u = math.nan\n            try:\n                v = (a[j] * p[k] - p[j] * a[k]) / (p[j] - p[k])\n            except:\n                v = math.nan\n            if u.is_integer():\n                if p[i] == a[i] + v or p[i] == a[i] * u or p[i] == (a[i] + v) * u:\n                    print(2)\n                    return\n            try:\n                u = p[k] / a[k]\n            except:\n                u = math.nan\n            try:\n                v = p[j] - a[j] * p[k] / a[k]\n            except:\n                v = math.nan\n            if u.is_integer():\n                if p[i] == a[i] + v or p[i] == a[i] * u or p[i] == a[i] * u + v:\n                    print(2)\n                    return\n            try:\n                u = p[j] / a[j]\n            except:\n                u = math.nan\n            try:\n                v = p[k] - a[k] * p[j] / a[j]\n            except:\n                v = math.nan\n            if u.is_integer():\n                if p[i] == a[i] + v or p[i] == a[i] * u or p[i] == a[i] * u + v:\n                    print(2)\n                    return\n            try:\n                u = p[k] / a[k]\n            except:\n                u = math.nan\n            try:\n                v = a[k] * p[j] / p[k] - a[j]\n            except:\n                v = math.nan\n            if u.is_integer():\n                if p[i] == a[i] + v or p[i] == a[i] * u or p[i] == (a[i] + v) * u:\n                    print(2)\n                    return\n            try:\n                u = p[j] / a[j]\n            except:\n                u = math.nan\n            try:\n                v = a[j] * p[k] / p[j] - a[k]\n            except:\n                v = math.nan\n            if u.is_integer():\n                if p[i] == a[i] + v or p[i] == a[i] * u or p[i] == (a[i] + v) * u:\n                    print(2)\n                    return\n            try:\n                u = (p[j] - p[k] + a[k]) / a[j]\n            except:\n                u = math.nan\n            try:\n                v = p[k] - a[k]\n            except:\n                v = math.nan\n            if u.is_integer():\n                if p[i] == a[i] + v or p[i] == a[i] * u or p[i] == a[i] * u + v:\n                    print(2)\n                    return\n            try:\n                u = (p[k] - p[j] + a[j]) / a[k]\n            except:\n                u = math.nan\n            try:\n                v = p[j] - a[j]\n            except:\n                v = math.nan\n            if u.is_integer():\n                if p[i] == a[i] + v or p[i] == a[i] * u or p[i] == a[i] * u + v:\n                    print(2)\n                    return\n            try:\n                u = p[j] / (a[j] + p[k] - a[k])\n            except:\n                u = math.nan\n            try:\n                v = p[k] - a[k]\n            except:\n                v = math.nan\n            if u.is_integer():\n                if p[i] == a[i] + v or p[i] == a[i] * u or p[i] == (a[i] + v) * u:\n                    print(2)\n                    return\n            try:\n                u = p[k] / (a[k] + p[j] - a[j])\n            except:\n                u = math.nan\n            try:\n                v = p[j] - a[j]\n            except:\n                v = math.nan\n            if u.is_integer():\n                if p[i] == a[i] + v or p[i] == a[i] * u or p[i] == (a[i] + v) * u:\n                    print(2)\n                    return\n    print(3)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    a = input().split()\n    b = input().split()\n    a = [int(i) for i in a]\n    b = [int(i) for i in b]\n    dif = [0] * 3\n    if b[0] == a[0] and b[1] == a[1] and (b[2] == a[2]):\n        print(0)\n        continue\n    dif[0] = b[0] - a[0]\n    dif[1] = b[1] - a[1]\n    dif[2] = b[2] - a[2]\n    if dif[0] == 0 and dif[1] == 0 and (dif[2] != 0) or (dif[0] != 0 and dif[1] == 0 and (dif[2] == 0)) or (dif[0] == 0 and dif[1] != 0 and (dif[2] == 0)):\n        print(1)\n        continue\n    if dif[0] == 0 and dif[1] != 0 and (dif[2] != 0) and (dif[1] == dif[2]) or (dif[1] == 0 and dif[2] != 0 and (dif[0] != 0) and (dif[0] == dif[2])) or (dif[2] == 0 and dif[0] != 0 and (dif[1] != 0) and (dif[0] == dif[1])):\n        print(1)\n        continue\n    if dif[0] == 0 and dif[1] != 0 and (dif[2] != 0):\n        if a[1] != 0 and a[2] != 0:\n            if b[1] % a[1] == 0 and b[2] % a[2] == 0:\n                if b[1] / a[1] == b[2] / a[2]:\n                    print(1)\n                    continue\n    if dif[1] == 0 and dif[0] != 0 and (dif[2] != 0):\n        if a[0] != 0 and a[2] != 0:\n            if b[0] % a[0] == 0 and b[2] % a[2] == 0:\n                if b[0] / a[0] == b[2] / a[2]:\n                    print(1)\n                    continue\n    if dif[2] == 0 and dif[1] != 0 and (dif[0] != 0):\n        if a[1] != 0 and a[0] != 0:\n            if b[1] % a[1] == 0 and b[0] % a[0] == 0:\n                if b[1] / a[1] == b[0] / a[0]:\n                    print(1)\n                    continue\n    if dif[2] != 0 and dif[1] != 0 and (dif[0] != 0) and (dif[0] == dif[1]) and (dif[1] == dif[2]):\n        print(1)\n        continue\n    if dif[2] != 0 and dif[1] != 0 and (dif[0] != 0):\n        if a[0] != 0 and a[1] != 0 and (a[2] != 0):\n            if b[0] % a[0] == 0 and b[1] % a[1] == 0 and (b[2] % a[2] == 0):\n                if b[0] / a[0] == b[1] / a[1] == b[2] / a[2]:\n                    print(1)\n                    continue\n    if dif[0] == 0 and dif[1] != dif[2] or (dif[1] == 0 and dif[2] != dif[0]) or (dif[2] == 0 and dif[0] != dif[1]):\n        print(2)\n        continue\n    if dif[0] == 0 and a[1] != 0 and (a[2] != 0):\n        if b[1] % a[1] == 0 and b[2] % a[2] == 0:\n            if b[1] / a[1] != b[2] / a[2]:\n                print(2)\n                continue\n    if dif[1] == 0 and a[0] != 0 and (a[2] != 0):\n        if b[0] % a[0] == 0 and b[2] % a[2] == 0:\n            if b[0] / a[0] != b[2] / a[2]:\n                print(2)\n                continue\n    if dif[2] == 0 and a[0] != 0 and (a[1] != 0):\n        if b[1] % a[1] == 0 and b[0] % a[0] == 0:\n            if b[1] / a[1] != b[0] / a[0]:\n                print(2)\n                continue\n    if dif[0] == dif[1] != dif[2] != 0 or dif[1] == dif[2] != dif[0] != 0 or dif[0] == dif[2] != dif[1] != 0:\n        print(2)\n        continue\n    if a[0] != 0 and a[1] != 0 and (dif[0] != 0) and (dif[1] != 0) and (dif[2] != 0):\n        if b[0] % a[0] == 0 and b[1] % a[1] == 0:\n            if b[0] / a[0] == b[1] / a[1]:\n                print(2)\n                continue\n    if a[0] != 0 and a[2] != 0 and (dif[0] != 0) and (dif[1] != 0) and (dif[2] != 0):\n        if b[0] % a[0] == 0 and b[2] % a[2] == 0:\n            if b[0] / a[0] == b[2] / a[2]:\n                print(2)\n                continue\n    if a[2] != 0 and a[1] != 0 and (dif[0] != 0) and (dif[1] != 0) and (dif[2] != 0):\n        if b[2] % a[2] == 0 and b[1] % a[1] == 0:\n            if b[2] / a[2] == b[1] / a[1]:\n                print(2)\n                continue\n    if dif[0] + dif[1] == dif[2] or dif[1] + dif[2] == dif[0] or dif[2] + dif[0] == dif[1]:\n        print(2)\n        continue\n    if a[0] != 0 and a[1] != 0 and (a[2] != 0):\n        if b[0] % a[0] == 0 and b[1] % a[1] == 0 and (b[2] % a[2] == 0):\n            if b[0] / a[0] * (b[1] / a[1]) == b[2] / a[2] or b[0] / a[0] * (b[2] / a[2]) == b[1] / a[1] or b[2] / a[2] * (b[1] / a[1]) == b[0] / a[0]:\n                print(2)\n                continue\n    if a[1] != 0:\n        if b[1] % a[1] == 0 and (a[2] * (b[1] / a[1]) + dif[0] == b[2] or (a[2] + dif[0]) * (b[1] / a[1]) == b[2]):\n            print(2)\n            continue\n    if a[1] != 0:\n        if b[1] % a[1] == 0 and (a[0] * (b[1] / a[1]) + dif[2] == b[0] or (a[0] + dif[2]) * (b[1] / a[1]) == b[0]):\n            print(2)\n            continue\n    if a[0] != 0:\n        if b[0] % a[0] == 0 and (a[2] * (b[0] / a[0]) + dif[1] == b[2] or (a[2] + dif[1]) * (b[0] / a[0]) == b[2]):\n            print(2)\n            continue\n    if a[0] != 0:\n        if b[0] % a[0] == 0 and (a[1] * (b[0] / a[0]) + dif[2] == b[1] or (a[1] + dif[2]) * (b[0] / a[0]) == b[1]):\n            print(2)\n            continue\n    if a[2] != 0:\n        if b[2] % a[2] == 0 and (a[1] * (b[2] / a[2]) + dif[0] == b[1] or (a[1] + dif[0]) * (b[2] / a[2]) == b[1]):\n            print(2)\n            continue\n    if a[2] != 0:\n        if b[2] % a[2] == 0 and (a[0] * (b[2] / a[2]) + dif[1] == b[0] or (a[0] + dif[1]) * (b[2] / a[2]) == b[0]):\n            print(2)\n            continue\n    if a[0] - a[1] != 0 and b[0] - b[1] != 0:\n        if (b[0] - b[1]) % (a[0] - a[1]) == 0:\n            x = (b[0] - b[1]) / (a[0] - a[1])\n            if (a[0] * b[1] - b[0] * a[1]) % (b[0] - b[1]) == 0:\n                y = (a[0] * b[1] - b[0] * a[1]) / (b[0] - b[1])\n                if (a[0] + y) * x == b[0] and (a[1] + y) * x == b[1] and (a[2] + y == b[2] or a[2] * x == b[2] or (a[2] + y) * x == b[2]):\n                    print(2)\n                    continue\n    if a[0] - a[2] != 0 and b[0] - b[2] != 0:\n        if (b[0] - b[2]) % (a[0] - a[2]) == 0:\n            x = (b[0] - b[2]) / (a[0] - a[2])\n            if (a[0] * b[2] - b[0] * a[2]) % (b[0] - b[2]) == 0:\n                y = (a[0] * b[2] - b[0] * a[2]) / (b[0] - b[2])\n                if (a[0] + y) * x == b[0] and (a[2] + y) * x == b[2] and (a[1] + y == b[1] or a[1] * x == b[1] or (a[1] + y) * x == b[1]):\n                    print(2)\n                    continue\n    if a[1] - a[2] != 0 and b[1] - b[2] != 0:\n        if (b[1] - b[2]) % (a[1] - a[2]) == 0:\n            x = (b[1] - b[2]) / (a[1] - a[2])\n            if (a[1] * b[2] - b[1] * a[2]) % (b[1] - b[2]) == 0:\n                y = (a[1] * b[2] - b[1] * a[2]) / (b[1] - b[2])\n                if (a[1] + y) * x == b[1] and (a[2] + y) * x == b[2] and (a[0] + y == b[0] or a[0] * x == b[0] or (a[0] + y) * x == b[0]):\n                    print(2)\n                    continue\n    if a[0] - a[1] != 0:\n        if (b[0] - b[1]) % (a[0] - a[1]) == 0:\n            x = (b[0] - b[1]) / (a[0] - a[1])\n            if (a[0] * b[1] - b[0] * a[1]) % (a[0] - a[1]) == 0:\n                y = (a[0] * b[1] - b[0] * a[1]) / (a[0] - a[1])\n                if a[0] * x + y == b[0] and a[1] * x + y == b[1] and (a[2] + y == b[2] or a[2] * x == b[2] or a[2] * x + y == b[2]):\n                    print(2)\n                    continue\n    if a[0] - a[2] != 0:\n        if (b[0] - b[2]) % (a[0] - a[2]) == 0:\n            x = (b[0] - b[2]) / (a[0] - a[2])\n            if (a[0] * b[2] - b[0] * a[2]) % (a[0] - a[2]) == 0:\n                y = (a[0] * b[2] - b[0] * a[2]) / (a[0] - a[2])\n                if a[0] * x + y == b[0] and a[2] * x + y == b[2] and (a[1] + y == b[1] or a[1] * x == b[1] or a[1] * x + y == b[1]):\n                    print(2)\n                    continue\n    if a[1] - a[2] != 0:\n        if (b[1] - b[2]) % (a[1] - a[2]) == 0:\n            x = (b[1] - b[2]) / (a[1] - a[2])\n            if (a[1] * b[2] - b[1] * a[2]) % (a[1] - a[2]) == 0:\n                y = (a[1] * b[2] - b[1] * a[2]) / (a[1] - a[2])\n                if a[2] * x + y == b[2] and a[1] * x + y == b[1] and (a[0] + y == b[0] or a[0] * x == b[0] or a[0] * x + y == b[0]):\n                    print(2)\n                    continue\n    print(3)", "from random import randint\n\ndef addition2test(a, b, p, q):\n    k1 = p - a\n    k2 = q - b\n    if k1 == k2:\n        return True\n    return False\n\ndef addition3test(a, b, c, p, q, r):\n    k1 = p - a\n    k2 = q - b\n    k3 = r - c\n    if k1 == k2 and k2 == k3 and (k1 == k3):\n        return True\n    return False\n\ndef multi3test(a, b, c, p, q, r):\n    if a == 0 or b == 0 or c == 0:\n        return False\n    v1 = p // a\n    v2 = q // b\n    v3 = r // c\n    if v1 == v2 and v2 == v3 and (v1 == v3):\n        if a * v1 == p and b * v2 == q and (c * v3 == r):\n            return True\n        else:\n            return False\n    return False\n\ndef mult2test(a, b, p, q):\n    if a == 0 or b == 0:\n        return False\n    v1 = p // a\n    v2 = q // b\n    if v1 == v2:\n        if a * v1 == p and b * v2 == q:\n            return True\n        else:\n            return False\n    return False\n\ndef addy2multall(a, b, c, p, q, r):\n    if p == q:\n        return False\n    else:\n        d = (a * q - p * b) / (p - q)\n        if a + d == 0 and b + d != 0:\n            k = q // (b + d)\n        elif a + d != 0:\n            k = p // (a + d)\n        else:\n            return False\n        if p == k * (a + d) and q == k * (b + d) and (r == k * c):\n            return True\n    return False\n\ndef add2mul2(a, b, c, p, q, r):\n    if r == 0:\n        return False\n    else:\n        d = (p * c - a * r) // r\n        if a + d == 0:\n            return False\n        else:\n            k = p // (a + d)\n            if k * (a + d) == p and b + d == q and (k * c == r):\n                return True\n    return False\n\ndef add3mul2(a, b, c, p, q, r):\n    if p != q:\n        d = (a * q - p * b) // (p - q)\n        if a + d == 0 and b + d != 0:\n            k = q // (b + d)\n        elif a + d != 0:\n            k = p // (a + d)\n        else:\n            return False\n        if k * (a + d) == p and k * (b + d) == q and (c + d == r):\n            return True\n    return False\n\ndef add3mul3(a, b, c, p, q, r):\n    if p != q:\n        d = (a * q - p * b) // (p - q)\n        if a + d == 0 and b + d != 0:\n            k = q // (b + d)\n        elif a + d != 0:\n            k = p // (a + d)\n        else:\n            return False\n        if k * (a + d) == p and k * (b + d) == q and (k * (c + d) == r):\n            return True\n    return False\n\ndef mul2addall(a, b, c, p, q, r):\n    d = r - c\n    if a != 0 or b != 0:\n        if a != 0:\n            k = (p - d) // a\n        else:\n            k = (p - d) // b\n        if p == k * a + d and q == k * b + d and (r == c + d):\n            return True\n    else:\n        return False\n    return False\n\ndef mul2add2(a, b, c, p, q, r):\n    d = r - c\n    if a != 0:\n        k = (p - d) // a\n        if p == k * a + d and q == k * b and (r == c + d):\n            return True\n    return False\n\ndef mul3add2(a, b, c, p, q, r):\n    if a != b:\n        k = (p - q) // (a - b)\n        d = p - k * a\n        if p == k * a + d and q == k * b + d and (r == k * c):\n            return True\n    return False\n\ndef mul3add3(a, b, c, p, q, r):\n    if a != b:\n        k = (p - q) // (a - b)\n        d = p - k * a\n        if p == k * a + d and q == k * b + d and (r == k * c + d):\n            return True\n    return False\n\ndef add2add2(a, b, c, p, q, r):\n    d2 = r - c\n    d1 = p - a - d2\n    if a + d1 + d2 == p and q == b + d1 and (r == c + d2):\n        return True\n    else:\n        return False\n\ndef mul2mul2(a, b, c, p, q, r):\n    if c == 0 or b == 0:\n        return False\n    else:\n        k1 = r // c\n        k2 = q // b\n        if k1 * k2 * a == p and k2 * b == q and (k1 * c == r):\n            return True\n    return False\nfor _ in range(int(input())):\n    (a, b, c) = list(map(int, input().split()))\n    (p, q, r) = list(map(int, input().split()))\n    if a == p and b == q and (c == r):\n        print(0)\n    elif a == p and b == q or (b == q and c == r) or (a == p and c == r):\n        print(1)\n    elif mult2test(a, b, p, q) and c == r or (mult2test(a, c, p, r) and b == q) or (mult2test(b, c, q, r) and a == p):\n        print(1)\n    elif multi3test(a, b, c, p, q, r):\n        print(1)\n    elif addition2test(a, b, p, q) and c == r or (addition2test(a, c, p, r) and b == q) or (addition2test(b, c, q, r) and a == p):\n        print(1)\n    elif addition3test(a, b, c, p, q, r):\n        print(1)\n    elif a == p or b == q or c == r:\n        print(2)\n    elif addition2test(a, b, p, q) or addition2test(b, c, q, r) or addition2test(a, c, p, r):\n        print(2)\n    elif mult2test(a, b, p, q) or mult2test(b, c, q, r) or mult2test(a, c, p, r):\n        print(2)\n    elif addy2multall(a, b, c, p, q, r) or addy2multall(b, c, a, q, r, p) or addy2multall(c, a, b, r, p, q):\n        print(2)\n    elif add2mul2(a, b, c, p, q, r) or add2mul2(b, a, c, q, p, r) or add2mul2(c, b, a, r, q, p) or add2mul2(b, c, a, q, r, p) or add2mul2(a, c, b, p, r, q) or add2mul2(c, a, b, r, p, q):\n        print(2)\n    elif add3mul3(a, b, c, p, q, r) or add3mul3(b, c, a, q, r, p) or add3mul3(c, a, b, r, p, q):\n        print(2)\n    elif add3mul2(a, b, c, p, q, r) or add3mul2(b, c, a, q, r, p) or add3mul2(c, a, b, r, p, q):\n        print(2)\n    elif add2add2(a, b, c, p, q, r) or add2add2(b, a, c, q, p, r) or add2add2(c, b, a, r, q, p) or add2add2(b, c, a, q, r, p) or add2add2(a, c, b, p, r, q) or add2add2(c, a, b, r, p, q):\n        print(2)\n    elif mul2addall(a, b, c, p, q, r) or mul2addall(b, c, a, q, r, p) or mul2addall(c, a, b, r, p, q):\n        print(2)\n    elif mul2add2(a, b, c, p, q, r) or mul2add2(b, a, c, q, p, r) or mul2add2(c, b, a, r, q, p) or mul2add2(b, c, a, q, r, p) or mul2add2(a, c, b, p, r, q) or mul2add2(c, a, b, r, p, q):\n        print(2)\n    elif mul3add3(a, b, c, p, q, r) or mul3add3(b, c, a, q, r, p) or mul3add3(c, a, b, r, p, q):\n        print(2)\n    elif mul3add2(a, b, c, p, q, r) or mul3add2(b, c, a, q, r, p) or mul3add2(c, a, b, r, p, q):\n        print(2)\n    elif mul2mul2(a, b, c, p, q, r) or mul2mul2(b, a, c, q, p, r) or mul2mul2(c, b, a, r, q, p) or mul2mul2(b, c, a, q, r, p) or mul2mul2(a, c, b, p, r, q) or mul2mul2(c, a, b, r, p, q):\n        print(2)\n    else:\n        print(3)", "def performCheck4(p, q, r, a, b, c):\n    x = c - r\n    if p != 0 and q != 0 and ((a - x) % p == 0) and ((b - x) % q == 0) and ((a - x) // p == (b - x) // q):\n        return True\n    elif p != 0 and q != 0 and ((a - x) % p == 0) and (b % q == 0) and ((a - x) // p == b // q):\n        return True\n    elif p != 0 and q != 0 and ((b - x) % q == 0) and (a % p == 0) and ((b - x) // q == a // p):\n        return True\n    elif p != 0 and q != 0 and (a % p == 0) and (b % q == 0) and (a // p == b // q):\n        return True\n    x = b - q\n    if p != 0 and r != 0 and ((a - x) % p == 0) and ((c - x) % r == 0) and (p != 0) and (r != 0) and ((a - x) // p == (c - x) // r):\n        return True\n    elif p != 0 and r != 0 and ((a - x) % p == 0) and (c % r == 0) and ((a - x) // p == c // r):\n        return True\n    elif p != 0 and r != 0 and ((c - x) % r == 0) and (a % p == 0) and ((c - x) // r == a // p):\n        return True\n    elif p != 0 and r != 0 and (a % p == 0) and (c % r == 0) and (a // p == c // r):\n        return True\n    x = a - p\n    if q != 0 and r != 0 and ((b - x) % q == 0) and ((c - x) % r == 0) and ((b - x) // q == (c - x) // r):\n        return True\n    elif q != 0 and r != 0 and ((b - x) % q == 0) and (c % r == 0) and ((b - x) // q == c // r):\n        return True\n    elif q != 0 and r != 0 and ((c - x) % r == 0) and (b % q == 0) and ((c - x) // r == b // q):\n        return True\n    elif q != 0 and r != 0 and (b % q == 0) and (c % r == 0) and (b // q == c // r):\n        return True\n    if r != 0 and c % r == 0:\n        y = c // r\n        if a - p * y == b - q * y:\n            return True\n    if q != 0 and b % q == 0:\n        y = b // q\n        if a - p * y == c - r * y:\n            return True\n    if p != 0 and a % p == 0:\n        y = a // p\n        if b - q * y == c - r * y:\n            return True\n    if p != q and (a - b) % (p - q) == 0:\n        y = (a - b) // (p - q)\n        x = a - p * y\n        if r * y + x == c and q * y + x == b:\n            return True\n    return False\n\ndef performCheck3(p, q, r, a, b, c):\n    if r != 0 and c != 0 and (c % r == 0):\n        y = c // r\n        if y != 0:\n            if a % y == 0 and b % y == 0 and (a // y - p == b // y - q):\n                return True\n            elif a % y == 0 and a // y - p == b - q:\n                return True\n            elif b % y == 0 and b // y - q == a - p:\n                return True\n    if q != 0 and b != 0 and (b % q == 0):\n        y = b // q\n        if y != 0:\n            if a % y == 0 and c % y == 0 and (a // y - p == c // y - r):\n                return True\n            elif a % y == 0 and a // y - p == c - r:\n                return True\n            elif c % y == 0 and c // y - r == a - p:\n                return True\n    if p != 0 and a != 0 and (a % p == 0):\n        y = a // p\n        if y != 0:\n            if b % y == 0 and c % y == 0 and (b // y - q == c // y - r):\n                return True\n            elif b % y == 0 and b // y - q == c - r:\n                return True\n            elif c % y == 0 and c // y - r == b - q:\n                return True\n    x = c - r\n    if p + x != 0 and q + x != 0 and (a % (p + x) == 0) and (b % (q + x) == 0) and (a // (p + x) == b // (q + x)):\n        return True\n    x = b - q\n    if p + x != 0 and r + x != 0 and (a % (p + x) == 0) and (c % (r + x) == 0) and (a // (p + x) == c // (r + x)):\n        return True\n    x = a - p\n    if q + x != 0 and r + x != 0 and (b % (q + x) == 0) and (c % (r + x) == 0) and (b // (q + x) == c // (r + x)):\n        return True\n    if p != q and a != b and ((a - b) % (p - q) == 0):\n        y = (a - b) // (p - q)\n        x = a // y - p\n        if (r + x) * y == c and (q + x) * y == b:\n            return True\n    return False\n\ndef performCheck2(p, q, r, a, b, c):\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0):\n        (x, y, z) = (a // p, b // q, c // r)\n        if x == 1 or y == 1 or z == 1 or (x == y) or (y == z) or (x == z) or (x * y == z) or (x * z == y) or (y * z == x):\n            return True\n    return False\n\ndef performCheck1(p, q, r, a, b, c):\n    (x, y, z) = (p - a, q - b, r - c)\n    if x == 0 or y == 0 or z == 0 or (x == y) or (y == z) or (x == z) or (x + y == z) or (x + z == y) or (y + z == x):\n        return True\n    return False\n\ndef performCheck(p, q, r, a, b, c):\n    (x, y, z) = (a - p, b - q, c - r)\n    if x == 0 and y == z or (y == 0 and x == z) or (z == 0 and x == y) or (x == 0 and y == 0) or (x == 0 and z == 0) or (y == 0 and z == 0) or (x == y == z):\n        return True\n    elif p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0):\n        (x, y, z) = (a // p, b // q, c // r)\n        if x == 1 and y == z or (y == 1 and x == z) or (z == 1 and x == y) or (x == 1 and y == 1) or (x == 1 and z == 1) or (y == 1 and z == 1) or (x == y == z):\n            return True\n    elif p == 0 and a == 0:\n        if q != 0 and r != 0 and (b % q == 0) and (c % r == 0) and (b // q == c // r):\n            return True\n    elif q == 0 and b == 0:\n        if p != 0 and r != 0 and (a % p == 0) and (c % r == 0) and (a // p == c // r):\n            return True\n    elif r == 0 and c == 0:\n        if p != 0 and q != 0 and (a % p == 0) and (b % q == 0) and (a // p == b // q):\n            return True\n    return False\nT = int(input())\nfor _ in range(T):\n    (p, q, r) = map(int, input().split())\n    (a, b, c) = map(int, input().split())\n    if p == a and q == b and (r == c):\n        print(0)\n    elif performCheck(p, q, r, a, b, c) or (a == 0 and b == 0 and (c == 0)):\n        print(1)\n    elif performCheck1(p, q, r, a, b, c) or performCheck2(p, q, r, a, b, c) or performCheck3(p, q, r, a, b, c) or performCheck4(p, q, r, a, b, c):\n        print(2)\n    else:\n        print(3)", "def performCheck4(p, q, r, a, b, c):\n    x = c - r\n    if p != 0 and q != 0 and ((a - x) % p == 0) and ((b - x) % q == 0) and ((a - x) // p == (b - x) // q):\n        return True\n    elif p != 0 and q != 0 and ((a - x) % p == 0) and (b % q == 0) and ((a - x) // p == b // q):\n        return True\n    elif p != 0 and q != 0 and ((b - x) % q == 0) and (a % p == 0) and ((b - x) // q == a // p):\n        return True\n    elif p != 0 and q != 0 and (a % p == 0) and (b % q == 0) and (a // p == b // q):\n        return True\n    x = b - q\n    if p != 0 and r != 0 and ((a - x) % p == 0) and ((c - x) % r == 0) and (p != 0) and (r != 0) and ((a - x) // p == (c - x) // r):\n        return True\n    elif p != 0 and r != 0 and ((a - x) % p == 0) and (c % r == 0) and ((a - x) // p == c // r):\n        return True\n    elif p != 0 and r != 0 and ((c - x) % r == 0) and (a % p == 0) and ((c - x) // r == a // p):\n        return True\n    elif p != 0 and r != 0 and (a % p == 0) and (c % r == 0) and (a // p == c // r):\n        return True\n    x = a - p\n    if q != 0 and r != 0 and ((b - x) % q == 0) and ((c - x) % r == 0) and ((b - x) // q == (c - x) // r):\n        return True\n    elif q != 0 and r != 0 and ((b - x) % q == 0) and (c % r == 0) and ((b - x) // q == c // r):\n        return True\n    elif q != 0 and r != 0 and ((c - x) % r == 0) and (b % q == 0) and ((c - x) // r == b // q):\n        return True\n    elif q != 0 and r != 0 and (b % q == 0) and (c % r == 0) and (b // q == c // r):\n        return True\n    if r != 0 and c % r == 0:\n        y = c // r\n        if a - p * y == b - q * y:\n            return True\n    if q != 0 and b % q == 0:\n        y = b // q\n        if a - p * y == c - r * y:\n            return True\n    if p != 0 and a % p == 0:\n        y = a // p\n        if b - q * y == c - r * y:\n            return True\n    if p != q and (a - b) % (p - q) == 0:\n        y = (a - b) // (p - q)\n        x = a - p * y\n        if r * y + x == c and q * y + x == b:\n            return True\n    return False\n\ndef performCheck3(p, q, r, a, b, c):\n    if r != 0 and c != 0 and (c % r == 0):\n        y = c // r\n        if y != 0:\n            if a % y == 0 and b % y == 0 and (a // y - p == b // y - q):\n                return True\n            elif a % y == 0 and a // y - p == b - q:\n                return True\n            elif b % y == 0 and b // y - q == a - p:\n                return True\n    if q != 0 and b != 0 and (b % q == 0):\n        y = b // q\n        if y != 0:\n            if a % y == 0 and c % y == 0 and (a // y - p == c // y - r):\n                return True\n            elif a % y == 0 and a // y - p == c - r:\n                return True\n            elif c % y == 0 and c // y - r == a - p:\n                return True\n    if p != 0 and a != 0 and (a % p == 0):\n        y = a // p\n        if y != 0:\n            if b % y == 0 and c % y == 0 and (b // y - q == c // y - r):\n                return True\n            elif b % y == 0 and b // y - q == c - r:\n                return True\n            elif c % y == 0 and c // y - r == b - q:\n                return True\n    x = c - r\n    if p + x != 0 and q + x != 0 and (a % (p + x) == 0) and (b % (q + x) == 0) and (a // (p + x) == b // (q + x)):\n        return True\n    x = b - q\n    if p + x != 0 and r + x != 0 and (a % (p + x) == 0) and (c % (r + x) == 0) and (a // (p + x) == c // (r + x)):\n        return True\n    x = a - p\n    if q + x != 0 and r + x != 0 and (b % (q + x) == 0) and (c % (r + x) == 0) and (b // (q + x) == c // (r + x)):\n        return True\n    if p != q and a != b and ((a - b) % (p - q) == 0):\n        y = (a - b) // (p - q)\n        x = a // y - p\n        if (r + x) * y == c and (q + x) * y == b:\n            return True\n    return False\n\ndef performCheck2(p, q, r, a, b, c):\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0):\n        (x, y, z) = (a // p, b // q, c // r)\n        if x == 1 or y == 1 or z == 1 or (x == y) or (y == z) or (x == z) or (x * y == z) or (x * z == y) or (y * z == x):\n            return True\n    return False\n\ndef performCheck1(p, q, r, a, b, c):\n    (x, y, z) = (p - a, q - b, r - c)\n    if x == 0 or y == 0 or z == 0 or (x == y) or (y == z) or (x == z) or (x + y == z) or (x + z == y) or (y + z == x):\n        return True\n    return False\n\ndef performCheck(p, q, r, a, b, c):\n    (x, y, z) = (a - p, b - q, c - r)\n    if x == 0 and y == z or (y == 0 and x == z) or (z == 0 and x == y) or (x == 0 and y == 0) or (x == 0 and z == 0) or (y == 0 and z == 0) or (x == y == z):\n        return True\n    elif p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0):\n        (x, y, z) = (a // p, b // q, c // r)\n        if x == 1 and y == z or (y == 1 and x == z) or (z == 1 and x == y) or (x == 1 and y == 1) or (x == 1 and z == 1) or (y == 1 and z == 1) or (x == y == z):\n            return True\n    elif p == 0 and a == 0:\n        if q != 0 and r != 0 and (b % q == 0) and (c % r == 0) and (b // q == c // r):\n            return True\n    elif q == 0 and b == 0:\n        if p != 0 and r != 0 and (a % p == 0) and (c % r == 0) and (a // p == c // r):\n            return True\n    elif r == 0 and c == 0:\n        if p != 0 and q != 0 and (a % p == 0) and (b % q == 0) and (a // p == b // q):\n            return True\n    return False\nT = int(input())\nfor _ in range(T):\n    (p, q, r) = map(int, input().split())\n    (a, b, c) = map(int, input().split())\n    if p == a and q == b and (r == c):\n        print(0)\n    elif performCheck(p, q, r, a, b, c) or (a == 0 and b == 0 and (c == 0)):\n        print(1)\n    elif performCheck1(p, q, r, a, b, c) or performCheck2(p, q, r, a, b, c) or performCheck3(p, q, r, a, b, c) or performCheck4(p, q, r, a, b, c):\n        print(2)\n    else:\n        print(3)", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    (p, q, r) = map(int, input().split())\n    (a, b, c) = map(int, input().split())\n    if a == p and b == q and (c == r):\n        print(0)\n        continue\n    d1 = a - p\n    d2 = b - q\n    d3 = c - r\n    if d1 == 0 and d2 == 0 and (d3 != 0) or (d1 != 0 and d2 == 0 and (d3 == 0)) or (d1 == 0 and d2 != 0 and (d3 == 0)):\n        print(1)\n        continue\n    if d1 == 0 and d2 != 0 and (d3 != 0) and (d2 == d3) or (d2 == 0 and d3 != 0 and (d1 != 0) and (d1 == d3)) or (d3 == 0 and d1 != 0 and (d2 != 0) and (d1 == d2)):\n        print(1)\n        continue\n    if d1 == 0 and d2 != 0 and (d3 != 0):\n        if q != 0 and r != 0:\n            if b % q == 0 and c % r == 0:\n                if b / q == c / r:\n                    print(1)\n                    continue\n    if d2 == 0 and d1 != 0 and (d3 != 0):\n        if p != 0 and r != 0:\n            if a % p == 0 and c % r == 0:\n                if a / p == c / r:\n                    print(1)\n                    continue\n    if d3 == 0 and d2 != 0 and (d1 != 0):\n        if q != 0 and p != 0:\n            if b % q == 0 and a % p == 0:\n                if b / q == a / p:\n                    print(1)\n                    continue\n    if d3 != 0 and d2 != 0 and (d1 != 0) and (d1 == d2) and (d2 == d3):\n        print(1)\n        continue\n    if d3 != 0 and d2 != 0 and (d1 != 0):\n        if p != 0 and q != 0 and (r != 0):\n            if a % p == 0 and b % q == 0 and (c % r == 0):\n                if a / p == b / q == c / r:\n                    print(1)\n                    continue\n    if d1 == 0 and d2 != d3 or (d2 == 0 and d3 != d1) or (d3 == 0 and d1 != d2):\n        print(2)\n        continue\n    if d1 == 0 and q != 0 and (r != 0):\n        if b % q == 0 and c % r == 0:\n            if b / q != c / r:\n                print(2)\n                continue\n    if d2 == 0 and p != 0 and (r != 0):\n        if a % p == 0 and c % r == 0:\n            if a / p != c / r:\n                print(2)\n                continue\n    if d3 == 0 and p != 0 and (q != 0):\n        if b % q == 0 and a % p == 0:\n            if b / q != a / p:\n                print(2)\n                continue\n    if d1 == d2 != d3 != 0 or d2 == d3 != d1 != 0 or d1 == d3 != d2 != 0:\n        print(2)\n        continue\n    if p != 0 and q != 0 and (d1 != 0) and (d2 != 0) and (d3 != 0):\n        if a % p == 0 and b % q == 0:\n            if a / p == b / q:\n                print(2)\n                continue\n    if p != 0 and r != 0 and (d1 != 0) and (d2 != 0) and (d3 != 0):\n        if a % p == 0 and c % r == 0:\n            if a / p == c / r:\n                print(2)\n                continue\n    if r != 0 and q != 0 and (d1 != 0) and (d2 != 0) and (d3 != 0):\n        if c % r == 0 and b % q == 0:\n            if c / r == b / q:\n                print(2)\n                continue\n    if d1 + d2 == d3 or d2 + d3 == d1 or d3 + d1 == d2:\n        print(2)\n        continue\n    if p != 0 and q != 0 and (r != 0):\n        if a % p == 0 and b % q == 0 and (c % r == 0):\n            if a / p * (b / q) == c / r or a / p * (c / r) == b / q or c / r * (b / q) == a / p:\n                print(2)\n                continue\n    if q != 0:\n        if b % q == 0 and (r * (b / q) + d1 == c or (r + d1) * (b / q) == c):\n            print(2)\n            continue\n    if q != 0:\n        if b % q == 0 and (p * (b / q) + d3 == a or (p + d3) * (b / q) == a):\n            print(2)\n            continue\n    if p != 0:\n        if a % p == 0 and (r * (a / p) + d2 == c or (r + d2) * (a / p) == c):\n            print(2)\n            continue\n    if p != 0:\n        if a % p == 0 and (q * (a / p) + d3 == b or (q + d3) * (a / p) == b):\n            print(2)\n            continue\n    if r != 0:\n        if c % r == 0 and (q * (c / r) + d1 == b or (q + d1) * (c / r) == b):\n            print(2)\n            continue\n    if r != 0:\n        if c % r == 0 and (p * (c / r) + d2 == a or (p + d2) * (c / r) == a):\n            print(2)\n            continue\n    if p - q != 0 and a - b != 0:\n        if (a - b) % (p - q) == 0:\n            m = (a - b) / (p - q)\n            if (p * b - a * q) % (a - b) == 0:\n                d = (p * b - a * q) / (a - b)\n                if (p + d) * m == a and (q + d) * m == b and (r + d == c or r * m == c or (r + d) * m == c):\n                    print(2)\n                    continue\n    if p - r != 0 and a - c != 0:\n        if (a - c) % (p - r) == 0:\n            m = (a - c) / (p - r)\n            if (p * c - a * r) % (a - c) == 0:\n                d = (p * c - a * r) / (a - c)\n                if (p + d) * m == a and (r + d) * m == c and (q + d == b or q * m == b or (q + d) * m == b):\n                    print(2)\n                    continue\n    if q - r != 0 and b - c != 0:\n        if (b - c) % (q - r) == 0:\n            m = (b - c) / (q - r)\n            if (q * c - b * r) % (b - c) == 0:\n                d = (q * c - b * r) / (b - c)\n                if (q + d) * m == b and (r + d) * m == c and (p + d == a or p * m == a or (p + d) * m == a):\n                    print(2)\n                    continue\n    if p - q != 0:\n        if (a - b) % (p - q) == 0:\n            m = (a - b) / (p - q)\n            if (p * b - a * q) % (p - q) == 0:\n                d = (p * b - a * q) / (p - q)\n                if p * m + d == a and q * m + d == b and (r + d == c or r * m == c or r * m + d == c):\n                    print(2)\n                    continue\n    if p - r != 0:\n        if (a - c) % (p - r) == 0:\n            m = (a - c) / (p - r)\n            if (p * c - a * r) % (p - r) == 0:\n                d = (p * c - a * r) / (p - r)\n                if p * m + d == a and r * m + d == c and (q + d == b or q * m == b or q * m + d == b):\n                    print(2)\n                    continue\n    if q - r != 0:\n        if (b - c) % (q - r) == 0:\n            m = (b - c) / (q - r)\n            if (q * c - b * r) % (q - r) == 0:\n                d = (q * c - b * r) / (q - r)\n                if r * m + d == c and q * m + d == b and (p + d == a or p * m == a or p * m + d == a):\n                    print(2)\n                    continue\n    print(3)", "global aa, bb, cc, xx, yy, zz\n\ndef isZero(a, b, c, x, y, z):\n    return a == x and b == y and (c == z)\n\ndef isIT(a, b, c, x, y, z, d):\n    if isZero(a * d, b, c, x, y, z):\n        return True\n    if isZero(a, b * d, c, x, y, z):\n        return True\n    if isZero(a, b, c * d, x, y, z):\n        return True\n    if isZero(a * d, b * d, c, x, y, z):\n        return True\n    if isZero(a * d, b, c * d, x, y, z):\n        return True\n    if isZero(a * d, b * d, c * d, x, y, z):\n        return True\n    if isZero(a, b * d, c * d, x, y, z):\n        return True\n    return False\n\ndef isOne(a, b, c, x, y, z):\n    if a != 0:\n        if isIT(a, b, c, x, y, z, x // a):\n            return True\n    if b != 0:\n        if isIT(a, b, c, x, y, z, y // b):\n            return True\n    if c != 0:\n        if isIT(a, b, c, x, y, z, z // c):\n            return True\n    l = [0, 0, 0]\n    l[0] = x - a\n    l[1] = y - b\n    l[2] = z - c\n    if l[0] == l[1] and l[1] == l[2] or (l[0] == l[1] and (l[2] == 0 if l[0] != 0 else True)) or (l[0] == l[2] and (l[1] == 0 if l[0] != 0 else True)) or (l[1] == l[2] and (l[0] == 0 if l[1] != 0 else True)):\n        return True\n    return False\n\ndef difSum(a, b, c, x, y, z):\n    l = [x - a, y - b, z - c]\n    for i in range(3):\n        d = l[i]\n        if isOne(a + d, b, c, x, y, z):\n            return True\n        if isOne(a + d, b + d, c, x, y, z):\n            return True\n        if isOne(a + d, b, c + d, x, y, z):\n            return True\n        if isOne(a + d, b + d, c + d, x, y, z):\n            return True\n        if isOne(a, b + d, c + d, x, y, z):\n            return True\n        if isOne(a, b + d, c, x, y, z):\n            return True\n        if isOne(a, b, c + d, x, y, z):\n            return True\n    return False\n\ndef difMul(a, b, c, x, y, z):\n    l = [x // a if a != 0 else 0, y // b if b != 0 else 0, z // c if c != 0 else 0, 0]\n    for i in range(4):\n        d = l[i]\n        if isOne(a * d, b, c, x, y, z):\n            return True\n        if isOne(a * d, b * d, c, x, y, z):\n            return True\n        if isOne(a * d, b, c * d, x, y, z):\n            return True\n        if isOne(a * d, b * d, c * d, x, y, z):\n            return True\n        if isOne(a, b * d, c * d, x, y, z):\n            return True\n        if isOne(a, b * d, c, x, y, z):\n            return True\n        if isOne(a, b, c * d, x, y, z):\n            return True\n    return False\n\ndef mulSum(a, b, c, x, y, z):\n    if a - b != 0:\n        if (x - y) % (a - b) != 0:\n            return False\n        X = (x - y) // (a - b)\n        Y = x - a * X\n        if c * X + Y == z or c * X == z or c + Y == z:\n            return True\n    if b - a != 0:\n        if (y - x) % (b - a) != 0:\n            return False\n        X = (y - x) // (b - a)\n        Y = x - a * X\n        if c * X + Y == z or c * X == z or c + Y == z:\n            return True\n    return False\n\ndef difMulSum(a, b, c, x, y, z):\n    if mulSum(a, b, c, x, y, z):\n        return True\n    if mulSum(a, c, b, x, z, y):\n        return True\n    if mulSum(b, c, a, y, z, x):\n        return True\n    return False\n\ndef isTwo(a, b, c, x, y, z):\n    if x == a or y == b or z == c:\n        return True\n    if difSum(aa, bb, cc, xx, yy, zz):\n        return True\n    if difMul(aa, bb, cc, xx, yy, zz):\n        return True\n    if difMulSum(aa, bb, cc, xx, yy, zz):\n        return True\n    return False\nT = int(input())\nfor _ in range(T):\n    (aa, bb, cc) = map(int, input().split())\n    (xx, yy, zz) = map(int, input().split())\n    if isZero(aa, bb, cc, xx, yy, zz):\n        print(0)\n    elif isOne(aa, bb, cc, xx, yy, zz):\n        print(1)\n    elif isTwo(aa, bb, cc, xx, yy, zz):\n        print(2)\n    else:\n        print(3)", "def try1(v1, v2, v3, v4):\n    if v3 - v1 == v4 - v2:\n        return 1\n    if v1 == 0 or v2 == 0:\n        return 0\n    if v3 % v1 == 0 and v4 % v2 == 0 and (v3 // v1 == v4 // v2):\n        return 1\n    return 0\n\ndef try2(v1, v2, v3, v4, v5, v6):\n    if v4 - v1 == v5 - v2 and v5 - v2 == v6 - v3:\n        return 1\n    if v1 == 0 or v2 == 0 or v3 == 0:\n        return 0\n    if v4 % v1 == 0 and v5 % v2 == 0 and (v6 % v3 == 0) and (v4 // v1 == v5 // v2) and (v5 // v2 == v6 // v3):\n        return 1\n    return 0\nT = int(input())\nfor t in range(T):\n    (a, b, c) = map(int, input().split(' '))\n    (p, q, r) = map(int, input().split(' '))\n    if a == p and b == q and (c == r):\n        print('0')\n        continue\n    if a == p and b == q or (a == p and c == r) or (b == q and c == r):\n        print(1)\n        continue\n    if a == p and try1(b, c, q, r) or (b == q and try1(a, c, p, r)) or (c == r and try1(a, b, p, q)) or try2(a, b, c, p, q, r):\n        print(1)\n        continue\n    if a == p or b == q or c == r:\n        print(2)\n        continue\n    if try1(a, b, p, q) or try1(a, c, p, r) or try1(b, c, q, r):\n        print(2)\n        continue\n    diff1 = p - a\n    diff2 = q - b\n    diff3 = r - c\n    if diff1 + diff2 == diff3 or diff2 + diff3 == diff1 or diff1 + diff3 == diff2:\n        print(2)\n        continue\n    flag = 1\n    if a == 0 or b == 0 or c == 0:\n        flag = 0\n    if flag == 1:\n        qnt1 = p // a\n        qnt2 = q // b\n        qnt3 = r // c\n        rem1 = p % a\n        rem2 = q % b\n        rem3 = r % c\n        if rem1 == 0 and rem2 == 0 and (rem3 == 0) and (qnt1 * qnt2 == qnt3 or qnt1 * qnt3 == qnt2 or qnt2 * qnt3 == qnt1):\n            print(2)\n            continue\n    if a != 0 and p % a == 0:\n        qnt1 = p // a\n        if qnt1 != 0 and r % qnt1 == 0:\n            if q - b == r // qnt1 - c:\n                print(2)\n                continue\n        if qnt1 != 0 and q % qnt1 == 0:\n            if r - c == q // qnt1 - b:\n                print(2)\n                continue\n    if b != 0 and q % b == 0:\n        qnt1 = q // b\n        if qnt1 != 0 and r % qnt1 == 0:\n            if p - a == r // qnt1 - c:\n                print(2)\n                continue\n        if qnt1 != 0 and p % qnt1 == 0:\n            if r - c == p // qnt1 - a:\n                print(2)\n                continue\n    if c != 0 and r % c == 0:\n        qnt1 = r // c\n        if qnt1 != 0 and p % qnt1 == 0:\n            if q - b == p // qnt1 - a:\n                print(2)\n                continue\n        if qnt1 != 0 and q % qnt1 == 0:\n            if p - a == q // qnt1 - b:\n                print(2)\n                continue\n    if a != 0 and (p - diff2) % a == 0:\n        if c != 0 and r % c == 0 and ((p - diff2) // a == r // c):\n            print(2)\n            continue\n    if a != 0 and (p - diff3) % a == 0:\n        if b != 0 and q % b == 0 and ((p - diff3) // a == q // b):\n            print(2)\n            continue\n    if b != 0 and (q - diff1) % b == 0:\n        if c != 0 and r % c == 0 and ((q - diff1) // b == r // c):\n            print(2)\n            continue\n    if b != 0 and (q - diff3) % b == 0:\n        if a != 0 and p % a == 0 and ((q - diff3) // b == p // a):\n            print(2)\n            continue\n    if c != 0 and (r - diff1) % c == 0:\n        if b != 0 and q % b == 0 and ((r - diff1) // c == q // b):\n            print(2)\n            continue\n    if c != 0 and (r - diff2) % c == 0:\n        if a != 0 and p % a == 0 and ((r - diff2) // c == p // a):\n            print(2)\n            continue\n    if a != 0 and p % a == 0:\n        qnt1 = p // a\n        if qnt1 != 0 and q % qnt1 == 0 and (r % qnt1 == 0):\n            qnt2 = q // qnt1\n            qnt3 = r // qnt1\n            if qnt2 - b == qnt3 - c:\n                print(2)\n                continue\n    if b != 0 and q % b == 0:\n        qnt1 = q // b\n        if qnt1 != 0 and p % qnt1 == 0 and (r % qnt1 == 0):\n            qnt2 = p // qnt1\n            qnt3 = r // qnt1\n            if qnt2 - a == qnt3 - c:\n                print(2)\n                continue\n    if c != 0 and r % c == 0:\n        qnt1 = r // c\n        if qnt1 != 0 and p % qnt1 == 0 and (q % qnt1 == 0):\n            qnt2 = p // qnt1\n            qnt3 = q // qnt1\n            if qnt2 - a == qnt3 - b:\n                print(2)\n                continue\n    if b + diff1 != 0 and c + diff1 != 0 and (q % (b + diff1) == 0) and (r % (c + diff1) == 0) and (q // (b + diff1) == r // (c + diff1)):\n        print(2)\n        continue\n    if a + diff2 != 0 and c + diff2 != 0 and (p % (a + diff2) == 0) and (r % (c + diff2) == 0) and (p // (a + diff2) == r // (c + diff2)):\n        print(2)\n        continue\n    if b + diff3 != 0 and a + diff3 != 0 and (q % (b + diff3) == 0) and (p % (a + diff3) == 0) and (q // (b + diff3) == p // (a + diff3)):\n        print(2)\n        continue\n    if b != 0 and c != 0 and ((q - diff1) % b == 0) and ((r - diff1) % c == 0) and ((q - diff1) // b == (r - diff1) // c):\n        print(2)\n        continue\n    if a != 0 and b != 0 and ((q - diff3) % b == 0) and ((p - diff3) % a == 0) and ((q - diff3) // b == (p - diff3) // a):\n        print(2)\n        continue\n    if a != 0 and c != 0 and ((p - diff2) % a == 0) and ((r - diff2) % c == 0) and ((p - diff2) // a == (r - diff2) // c):\n        print(2)\n        continue\n    if a - b != 0 and (p - q) % (a - b) == 0:\n        d2 = (p - q) // (a - b)\n        if d2 != 0 and p % d2 == 0:\n            d1 = p // d2 - a\n            if (c + d1) * d2 == r:\n                print(2)\n                continue\n    if a - c != 0 and (p - r) % (a - c) == 0:\n        d2 = (p - r) // (a - c)\n        if d2 != 0 and p % d2 == 0:\n            d1 = p // d2 - a\n            if (b + d1) * d2 == q:\n                print(2)\n                continue\n    if b - c != 0 and (q - r) % (b - c) == 0:\n        d2 = (q - r) // (b - c)\n        if d2 != 0 and q % d2 == 0:\n            d1 = q // d2 - b\n            if (a + d1) * d2 == p:\n                print(2)\n                continue\n    if a != 0 and p % a == 0:\n        qnt1 = p // a\n        if q - b * qnt1 == r - c * qnt1:\n            print(2)\n            continue\n    if b != 0 and q % b == 0:\n        qnt1 = q // b\n        if p - a * qnt1 == r - c * qnt1:\n            print(2)\n            continue\n    if c != 0 and r % c == 0:\n        qnt1 = r // c\n        if q - b * qnt1 == p - a * qnt1:\n            print(2)\n            continue\n    if a - b != 0 and (p - q) % (a - b) == 0:\n        d1 = (p - q) // (a - b)\n        d2 = p - a * d1\n        if c * d1 + d2 == r:\n            print(2)\n            continue\n    if a - c != 0 and (p - r) % (a - c) == 0:\n        d1 = (p - r) // (a - c)\n        d2 = p - a * d1\n        if b * d1 + d2 == q:\n            print(2)\n            continue\n    if c - b != 0 and (r - q) % (c - b) == 0:\n        d1 = (r - q) // (c - b)\n        d2 = r - c * d1\n        if a * d1 + d2 == p:\n            print(2)\n            continue\n    print(3)\n    continue", "def try1(v1, v2, v3, v4):\n    if v3 - v1 == v4 - v2:\n        return 1\n    if v1 == 0 or v2 == 0:\n        return 0\n    if v3 % v1 == 0 and v4 % v2 == 0 and (v3 // v1 == v4 // v2):\n        return 1\n    return 0\n\ndef try2(v1, v2, v3, v4, v5, v6):\n    if v4 - v1 == v5 - v2 and v5 - v2 == v6 - v3:\n        return 1\n    if v1 == 0 or v2 == 0 or v3 == 0:\n        return 0\n    if v4 % v1 == 0 and v5 % v2 == 0 and (v6 % v3 == 0) and (v4 // v1 == v5 // v2) and (v5 // v2 == v6 // v3):\n        return 1\n    return 0\nT = int(input())\nfor t in range(T):\n    (a, b, c) = map(int, input().split(' '))\n    (p, q, r) = map(int, input().split(' '))\n    if a == p and b == q and (c == r):\n        print('0')\n        continue\n    if a == p and b == q or (a == p and c == r) or (b == q and c == r):\n        print(1)\n        continue\n    if a == p and try1(b, c, q, r) or (b == q and try1(a, c, p, r)) or (c == r and try1(a, b, p, q)) or try2(a, b, c, p, q, r):\n        print(1)\n        continue\n    if a == p or b == q or c == r:\n        print(2)\n        continue\n    if try1(a, b, p, q) or try1(a, c, p, r) or try1(b, c, q, r):\n        print(2)\n        continue\n    diff1 = p - a\n    diff2 = q - b\n    diff3 = r - c\n    if diff1 + diff2 == diff3 or diff2 + diff3 == diff1 or diff1 + diff3 == diff2:\n        print(2)\n        continue\n    flag = 1\n    if a == 0 or b == 0 or c == 0:\n        flag = 0\n    if flag == 1:\n        qnt1 = p // a\n        qnt2 = q // b\n        qnt3 = r // c\n        rem1 = p % a\n        rem2 = q % b\n        rem3 = r % c\n        if rem1 == 0 and rem2 == 0 and (rem3 == 0) and (qnt1 * qnt2 == qnt3 or qnt1 * qnt3 == qnt2 or qnt2 * qnt3 == qnt1):\n            print(2)\n            continue\n    if a != 0 and p % a == 0:\n        qnt1 = p // a\n        if qnt1 != 0 and r % qnt1 == 0:\n            if q - b == r // qnt1 - c:\n                print(2)\n                continue\n        if qnt1 != 0 and q % qnt1 == 0:\n            if r - c == q // qnt1 - b:\n                print(2)\n                continue\n    if b != 0 and q % b == 0:\n        qnt1 = q // b\n        if qnt1 != 0 and r % qnt1 == 0:\n            if p - a == r // qnt1 - c:\n                print(2)\n                continue\n        if qnt1 != 0 and p % qnt1 == 0:\n            if r - c == p // qnt1 - a:\n                print(2)\n                continue\n    if c != 0 and r % c == 0:\n        qnt1 = r // c\n        if qnt1 != 0 and p % qnt1 == 0:\n            if q - b == p // qnt1 - a:\n                print(2)\n                continue\n        if qnt1 != 0 and q % qnt1 == 0:\n            if p - a == q // qnt1 - b:\n                print(2)\n                continue\n    if a != 0 and (p - diff2) % a == 0:\n        if c != 0 and r % c == 0 and ((p - diff2) // a == r // c):\n            print(2)\n            continue\n    if a != 0 and (p - diff3) % a == 0:\n        if b != 0 and q % b == 0 and ((p - diff3) // a == q // b):\n            print(2)\n            continue\n    if b != 0 and (q - diff1) % b == 0:\n        if c != 0 and r % c == 0 and ((q - diff1) // b == r // c):\n            print(2)\n            continue\n    if b != 0 and (q - diff3) % b == 0:\n        if a != 0 and p % a == 0 and ((q - diff3) // b == p // a):\n            print(2)\n            continue\n    if c != 0 and (r - diff1) % c == 0:\n        if b != 0 and q % b == 0 and ((r - diff1) // c == q // b):\n            print(2)\n            continue\n    if c != 0 and (r - diff2) % c == 0:\n        if a != 0 and p % a == 0 and ((r - diff2) // c == p // a):\n            print(2)\n            continue\n    if a != 0 and p % a == 0:\n        qnt1 = p // a\n        if qnt1 != 0 and q % qnt1 == 0 and (r % qnt1 == 0):\n            qnt2 = q // qnt1\n            qnt3 = r // qnt1\n            if qnt2 - b == qnt3 - c:\n                print(2)\n                continue\n    if b != 0 and q % b == 0:\n        qnt1 = q // b\n        if qnt1 != 0 and p % qnt1 == 0 and (r % qnt1 == 0):\n            qnt2 = p // qnt1\n            qnt3 = r // qnt1\n            if qnt2 - a == qnt3 - c:\n                print(2)\n                continue\n    if c != 0 and r % c == 0:\n        qnt1 = r // c\n        if qnt1 != 0 and p % qnt1 == 0 and (q % qnt1 == 0):\n            qnt2 = p // qnt1\n            qnt3 = q // qnt1\n            if qnt2 - a == qnt3 - b:\n                print(2)\n                continue\n    if b != 0 and c != 0 and ((q - diff1) % b == 0) and ((r - diff1) % c == 0) and ((q - diff1) // b == (r - diff1) // c):\n        print(2)\n        continue\n    if a != 0 and b != 0 and ((q - diff3) % b == 0) and ((p - diff3) % a == 0) and ((q - diff3) // b == (p - diff3) // a):\n        print(2)\n        continue\n    if a != 0 and c != 0 and ((p - diff2) % a == 0) and ((r - diff2) % c == 0) and ((p - diff2) // a == (r - diff2) // c):\n        print(2)\n        continue\n    if b + diff1 != 0 and c + diff1 != 0 and (q % (b + diff1) == 0) and (r % (c + diff1) == 0) and (q // (b + diff1) == r // (c + diff1)):\n        print(2)\n        continue\n    if a + diff2 != 0 and c + diff2 != 0 and (p % (a + diff2) == 0) and (r % (c + diff2) == 0) and (p // (a + diff2) == r // (c + diff2)):\n        print(2)\n        continue\n    if b + diff3 != 0 and a + diff3 != 0 and (q % (b + diff3) == 0) and (p % (a + diff3) == 0) and (q // (b + diff3) == p // (a + diff3)):\n        print(2)\n        continue\n    if a != 0 and p % a == 0:\n        qnt1 = p // a\n        if q - b * qnt1 == r - c * qnt1:\n            print(2)\n            continue\n    if b != 0 and q % b == 0:\n        qnt1 = q // b\n        if p - a * qnt1 == r - c * qnt1:\n            print(2)\n            continue\n    if c != 0 and r % c == 0:\n        qnt1 = r // c\n        if q - b * qnt1 == p - a * qnt1:\n            print(2)\n            continue\n    if a - b != 0 and (p - q) % (a - b) == 0:\n        d2 = (p - q) // (a - b)\n        if d2 != 0 and p % d2 == 0:\n            d1 = p // d2 - a\n            if (c + d1) * d2 == r:\n                print(2)\n                continue\n    if a - c != 0 and (p - r) % (a - c) == 0:\n        d2 = (p - r) // (a - c)\n        if d2 != 0 and p % d2 == 0:\n            d1 = p // d2 - a\n            if (b + d1) * d2 == q:\n                print(2)\n                continue\n    if b - c != 0 and (q - r) % (b - c) == 0:\n        d2 = (q - r) // (b - c)\n        if d2 != 0 and q % d2 == 0:\n            d1 = q // d2 - b\n            if (a + d1) * d2 == p:\n                print(2)\n                continue\n    if a - b != 0 and (p - q) % (a - b) == 0:\n        d1 = (p - q) // (a - b)\n        d2 = p - a * d1\n        if c * d1 + d2 == r:\n            print(2)\n            continue\n    if a - c != 0 and (p - r) % (a - c) == 0:\n        d1 = (p - r) // (a - c)\n        d2 = p - a * d1\n        if b * d1 + d2 == q:\n            print(2)\n            continue\n    if c - b != 0 and (r - q) % (c - b) == 0:\n        d1 = (r - q) // (c - b)\n        d2 = r - c * d1\n        if a * d1 + d2 == p:\n            print(2)\n            continue\n    print(3)\n    continue", "def try1(v1, v2, v3, v4):\n    if v3 - v1 == v4 - v2:\n        return 1\n    if v1 == 0 or v2 == 0:\n        return 0\n    if v3 % v1 == 0 and v4 % v2 == 0 and (v3 // v1 == v4 // v2):\n        return 1\n    return 0\n\ndef try2(v1, v2, v3, v4, v5, v6):\n    if v4 - v1 == v5 - v2 and v5 - v2 == v6 - v3:\n        return 1\n    if v1 == 0 or v2 == 0 or v3 == 0:\n        return 0\n    if v4 % v1 == 0 and v5 % v2 == 0 and (v6 % v3 == 0) and (v4 // v1 == v5 // v2) and (v5 // v2 == v6 // v3):\n        return 1\n    return 0\nT = int(input())\nfor t in range(T):\n    (a, b, c) = map(int, input().split(' '))\n    (p, q, r) = map(int, input().split(' '))\n    if a == p and b == q and (c == r):\n        print('0')\n        continue\n    if a == p and b == q or (a == p and c == r) or (b == q and c == r):\n        print(1)\n        continue\n    if a == p and try1(b, c, q, r) or (b == q and try1(a, c, p, r)) or (c == r and try1(a, b, p, q)) or try2(a, b, c, p, q, r):\n        print(1)\n        continue\n    if a == p or b == q or c == r:\n        print(2)\n        continue\n    if try1(a, b, p, q) or try1(a, c, p, r) or try1(b, c, q, r):\n        print(2)\n        continue\n    diff1 = p - a\n    diff2 = q - b\n    diff3 = r - c\n    if diff1 + diff2 == diff3 or diff2 + diff3 == diff1 or diff1 + diff3 == diff2:\n        print(2)\n        continue\n    flag = 1\n    if a == 0 or b == 0 or c == 0:\n        flag = 0\n    if flag == 1:\n        qnt1 = p // a\n        qnt2 = q // b\n        qnt3 = r // c\n        rem1 = p % a\n        rem2 = q % b\n        rem3 = r % c\n        if rem1 == 0 and rem2 == 0 and (rem3 == 0) and (qnt1 * qnt2 == qnt3 or qnt1 * qnt3 == qnt2 or qnt2 * qnt3 == qnt1):\n            print(2)\n            continue\n    if a != 0 and p % a == 0:\n        qnt1 = p // a\n        if qnt1 != 0 and r % qnt1 == 0:\n            if q - b == r // qnt1 - c:\n                print(2)\n                continue\n        if qnt1 != 0 and q % qnt1 == 0:\n            if r - c == q // qnt1 - b:\n                print(2)\n                continue\n    if b != 0 and q % b == 0:\n        qnt1 = q // b\n        if qnt1 != 0 and r % qnt1 == 0:\n            if p - a == r // qnt1 - c:\n                print(2)\n                continue\n        if qnt1 != 0 and p % qnt1 == 0:\n            if r - c == p // qnt1 - a:\n                print(2)\n                continue\n    if c != 0 and r % c == 0:\n        qnt1 = r // c\n        if qnt1 != 0 and p % qnt1 == 0:\n            if q - b == p // qnt1 - a:\n                print(2)\n                continue\n        if qnt1 != 0 and q % qnt1 == 0:\n            if p - a == q // qnt1 - b:\n                print(2)\n                continue\n    if a != 0 and (p - diff2) % a == 0:\n        if c != 0 and r % c == 0 and ((p - diff2) // a == r // c):\n            print(2)\n            continue\n    if a != 0 and (p - diff3) % a == 0:\n        if b != 0 and q % b == 0 and ((p - diff3) // a == q // b):\n            print(2)\n            continue\n    if b != 0 and (q - diff1) % b == 0:\n        if c != 0 and r % c == 0 and ((q - diff1) // b == r // c):\n            print(2)\n            continue\n    if b != 0 and (q - diff3) % b == 0:\n        if a != 0 and p % a == 0 and ((q - diff3) // b == p // a):\n            print(2)\n            continue\n    if c != 0 and (r - diff1) % c == 0:\n        if b != 0 and q % b == 0 and ((r - diff1) // c == q // b):\n            print(2)\n            continue\n    if c != 0 and (r - diff2) % c == 0:\n        if a != 0 and p % a == 0 and ((r - diff2) // c == p // a):\n            print(2)\n            continue\n    if a != 0 and p % a == 0:\n        qnt1 = p // a\n        if qnt1 != 0 and q % qnt1 == 0 and (r % qnt1 == 0):\n            qnt2 = q // qnt1\n            qnt3 = r // qnt1\n            if qnt2 - b == qnt3 - c:\n                print(2)\n                continue\n    if b != 0 and q % b == 0:\n        qnt1 = q // b\n        if qnt1 != 0 and p % qnt1 == 0 and (r % qnt1 == 0):\n            qnt2 = p // qnt1\n            qnt3 = r // qnt1\n            if qnt2 - a == qnt3 - c:\n                print(2)\n                continue\n    if c != 0 and r % c == 0:\n        qnt1 = r // c\n        if qnt1 != 0 and p % qnt1 == 0 and (q % qnt1 == 0):\n            qnt2 = p // qnt1\n            qnt3 = q // qnt1\n            if qnt2 - a == qnt3 - b:\n                print(2)\n                continue\n    if b != 0 and c != 0 and ((q - diff1) % b == 0) and ((r - diff1) % c == 0) and ((q - diff1) // b == (r - diff1) // c):\n        print(2)\n        continue\n    if a != 0 and b != 0 and ((q - diff3) % b == 0) and ((p - diff3) % a == 0) and ((q - diff3) // b == (p - diff3) // a):\n        print(2)\n        continue\n    if a != 0 and c != 0 and ((p - diff2) % a == 0) and ((r - diff2) % c == 0) and ((p - diff2) // a == (r - diff2) // c):\n        print(2)\n        continue\n    if b + diff1 != 0 and c + diff1 != 0 and (q % (b + diff1) == 0) and (r % (c + diff1) == 0) and (q // (b + diff1) == r // (c + diff1)):\n        print(2)\n        continue\n    if a + diff2 != 0 and c + diff2 != 0 and (p % (a + diff2) == 0) and (r % (c + diff2) == 0) and (p // (a + diff2) == r // (c + diff2)):\n        print(2)\n        continue\n    if b + diff3 != 0 and a + diff3 != 0 and (q % (b + diff3) == 0) and (p % (a + diff3) == 0) and (q // (b + diff3) == p // (a + diff3)):\n        print(2)\n        continue\n    if a != 0 and p % a == 0:\n        qnt1 = p // a\n        if q - b * qnt1 == r - c * qnt1:\n            print(2)\n            continue\n    if b != 0 and q % b == 0:\n        qnt1 = q // b\n        if p - a * qnt1 == r - c * qnt1:\n            print(2)\n            continue\n    if c != 0 and r % c == 0:\n        qnt1 = r // c\n        if q - b * qnt1 == p - a * qnt1:\n            print(2)\n            continue\n    if a - b != 0 and (p - q) % (a - b) == 0:\n        y1 = (p - q) // (a - b)\n        if y1 != 0 and p % y1 == 0:\n            x1 = p // y1 - a\n            if (c + x1) * y1 == r:\n                print(2)\n                continue\n    if a - c != 0 and (p - r) % (a - c) == 0:\n        y1 = (p - r) // (a - c)\n        if y1 != 0 and p % y1 == 0:\n            x1 = p // y1 - a\n            if (b + x1) * y1 == q:\n                print(2)\n                continue\n    if b - c != 0 and (q - r) % (b - c) == 0:\n        y1 = (q - r) // (b - c)\n        if y1 != 0 and q % y1 == 0:\n            x1 = q // y1 - b\n            if (a + x1) * y1 == p:\n                print(2)\n                continue\n    if a - b != 0 and (p - q) % (a - b) == 0:\n        x1 = (p - q) // (a - b)\n        y1 = p - a * x1\n        if c * x1 + y1 == r:\n            print(2)\n            continue\n    if a - c != 0 and (p - r) % (a - c) == 0:\n        x1 = (p - r) // (a - c)\n        y1 = p - a * x1\n        if b * x1 + y1 == q:\n            print(2)\n            continue\n    if c - b != 0 and (r - q) % (c - b) == 0:\n        x1 = (r - q) // (c - b)\n        y1 = r - c * x1\n        if a * x1 + y1 == p:\n            print(2)\n            continue\n    print(3)\n    continue", "def two_only(p, q, a, b):\n    if p == a or q == b:\n        return 1\n    if a == b == 0:\n        return 1\n    if a - p == b - q:\n        return 1\n    if p == 0 or q == 0:\n        return 2\n    if a // p == b // q and a % p == 0 and (b % q == 0):\n        return 1\n    return 2\nfor _ in range(int(input())):\n    (p, q, r) = list(map(int, input().split()))\n    (a, b, c) = list(map(int, input().split()))\n    if p == a and q == b and (r == c):\n        print(0)\n        continue\n    if p == a:\n        print(two_only(q, r, b, c))\n        continue\n    if b == q:\n        print(two_only(p, r, a, c))\n        continue\n    if c == r:\n        print(two_only(p, q, a, b))\n        continue\n    if a == b == c == 0:\n        print(1)\n        continue\n    d1 = a - p\n    d2 = b - q\n    d3 = c - r\n    x = False\n    y = False\n    z = False\n    p1 = 0\n    p2 = 0\n    p3 = 0\n    if d1 == d2 == d3:\n        print(1)\n        continue\n    if p != 0 and a // p == a / p:\n        x = True\n        p1 = a // p\n    if q != 0 and b // q == b / q:\n        y = True\n        p2 = b // q\n    if r != 0 and c // r == c / r:\n        z = True\n        p3 = c // r\n    if x and y and z:\n        if p1 == p2 == p3:\n            print(1)\n            continue\n    d = [d1, d2, d3]\n    d.sort()\n    if d[1] == d[0] or d[1] == d[2]:\n        print(2)\n        continue\n    if d[2] == d[1] + d[0] or d[1] == d[2] + d[0] or d[0] == d[1] + d[2]:\n        print(2)\n        continue\n    if x and y and z:\n        pr = [p1, p2, p3]\n        pr.sort()\n        if pr[1] == pr[0] or pr[1] == pr[2]:\n            print(2)\n            continue\n        if pr[2] == pr[1] * pr[0] or pr[1] == pr[2] * pr[0] or pr[0] == pr[1] * pr[2]:\n            print(2)\n            continue\n    if x and y:\n        if p1 == p2:\n            print(2)\n            continue\n    if y and z:\n        if p2 == p3:\n            print(2)\n            continue\n    if x and z:\n        if p1 == p3:\n            print(2)\n            continue\n    s = [p, q, r]\n    t = [a, b, c]\n    two = False\n    for _ in range(3):\n        (p, q, r) = s\n        (a, b, c) = t\n        l = False\n        m = False\n        n = False\n        l1 = 0\n        l2 = 0\n        l3 = 0\n        x = False\n        y = False\n        z = False\n        p1 = 0\n        p2 = 0\n        p3 = 0\n        d1 = a - p\n        d2 = b - q\n        d3 = c - r\n        if p != 0 and a // p == a / p:\n            x = True\n            p1 = a // p\n        if q != 0 and b // q == b / q:\n            y = True\n            p2 = b // q\n        if r != 0 and c // r == c / r:\n            z = True\n            p3 = c // r\n        if p != q:\n            if (a - b) % (p - q) == 0:\n                l1 = (a - b) // (p - q)\n                l = True\n        if r != q:\n            if (c - b) % (r - q) == 0:\n                l3 = (c - b) // (r - q)\n                n = True\n        if p != r:\n            if (a - c) % (p - r) == 0:\n                l2 = (a - c) // (p - r)\n                m = True\n        if l and m and n:\n            if l1 == l2 == l3:\n                two = True\n                break\n        if l:\n            if (a - b) * r == (p - q) * c:\n                two = True\n                break\n            diff = c - r\n            if a * (q + diff) == b * (p + diff):\n                two = True\n                break\n            if p * (b - diff) == q * (a - diff):\n                two = True\n                break\n        if z:\n            if (p + d2) * p3 == a:\n                two = True\n                break\n            if p * p3 + d2 == a:\n                two = True\n                break\n        if y:\n            if (p + d3) * p2 == a:\n                two = True\n                break\n            if p * p2 + d3 == a:\n                two = True\n                break\n        s.append(s[0])\n        del s[0]\n        t.append(t[0])\n        del t[0]\n    if two:\n        print(2)\n    else:\n        print(3)", "temp = 2 ** 32\n\ndef fun1(f, aux, x1, j1, x2, j2):\n    if (f + x1) * j1 == aux:\n        return 1\n    elif f * j2 + x2 == aux:\n        return 1\n    elif (f + x2) * j2 == aux:\n        return 1\n    elif f * j1 + x1 == aux:\n        return 1\n    else:\n        return 0\n\ndef fun2(p, q, r, a, b, c):\n    difference = c - r\n    p1 = a - difference\n    q1 = b - difference\n    if p != 0 and q != 0:\n        j1 = p1 / p\n        j2 = q1 / q\n        if j1 == j2 and j1 == p1 // p:\n            return 1\n    p1 = p + difference\n    q1 = q + difference\n    if p1 != 0 and q1 != 0:\n        j1 = a / p1\n        j2 = b / q1\n        if j1 == j2 and j1 == a // p1:\n            return 1\n    return 0\n\ndef fun3(p, q, r, a, b, c):\n    if r == 0:\n        return 0\n    m = c / r\n    if m != c // r:\n        return 0\n    p1 = p * m\n    q1 = q * m\n    if a - p1 == b - q1:\n        return 1\n    if m == 0:\n        return 0\n    p1 = a / m\n    q1 = b / m\n    if p1 - p == q1 - q and p1 - p == int(p1 - p):\n        return 1\n    return 0\n\ndef fun4(p, q, r, a, b, c):\n    if p == q:\n        return 0\n    val = (a - b) / (p - q)\n    if val != (a - b) // (p - q) or val == 0:\n        return 0\n    d1 = a / val - p\n    d2 = b / val - q\n    d3 = c / val - r\n    if d1 == d2 and d2 == d3 and (d1 == int(d1)):\n        return 1\n    d1 = a - p * val\n    d2 = b - q * val\n    d3 = c - r * val\n    if d1 == d2 and d2 == d3 and (d1 == int(d1)):\n        return 1\n    return 0\ntestcases = int(input())\nfor i in range(testcases):\n    h = list(map(int, input().split()))\n    p = h[0]\n    q = h[1]\n    r = h[2]\n    u = list(map(int, input().split()))\n    a = u[0]\n    b = u[1]\n    c = u[2]\n    d = []\n    m = []\n    d.append(a - p)\n    d.append(b - q)\n    d.append(c - r)\n    if p != 0 and a % p == 0:\n        m.append(a / p)\n    else:\n        m.append(temp)\n    if q != 0 and b % q == 0:\n        m.append(b / q)\n    else:\n        m.append(temp)\n    if r != 0 and c % r == 0:\n        m.append(c / r)\n    else:\n        m.append(temp)\n    if a == p and b == q and (c == r):\n        print(0)\n    elif d[0] == d[1] and d[1] == d[2]:\n        print(1)\n    elif m[0] == m[1] and m[1] == m[2] and (m[0] != temp):\n        print(1)\n    elif d[0] == 0 and d[1] == 0 or (d[1] == 0 and d[2] == 0) or (d[0] == 0 and d[2] == 0):\n        print(1)\n    elif d[0] == 0:\n        if d[1] == d[2]:\n            print(1)\n        elif m[1] == m[2] and m[1] != temp:\n            print(1)\n        else:\n            print(2)\n    elif d[1] == 0:\n        if d[0] == d[2] or (m[0] == m[2] and m[0] != temp):\n            print(1)\n        else:\n            print(2)\n    elif d[2] == 0:\n        if d[1] == d[0] or (m[1] == m[0] and m[0] != temp):\n            print(1)\n        else:\n            print(2)\n    elif fun1(p, a, d[1], m[2], d[2], m[1]) or fun1(q, b, d[0], m[2], d[2], m[0]) or fun1(r, c, d[0], m[1], d[1], m[0]):\n        print(2)\n    elif fun2(p, q, r, a, b, c) or fun2(q, r, p, b, c, a) or fun2(r, p, q, c, a, b):\n        print(2)\n    elif fun3(p, q, r, a, b, c) or fun3(q, r, p, b, c, a) or fun3(r, p, q, c, a, b):\n        print(2)\n    elif fun4(p, q, r, a, b, c):\n        print(2)\n    elif d[0] == d[1] + d[2] or d[1] == d[0] + d[2] or d[2] == d[1] + d[0]:\n        print(2)\n    elif m[0] == m[1] * m[2] or m[1] == m[2] * m[0] or m[2] == m[0] * m[1]:\n        print(2)\n    elif d[1] == d[2] or (m[1] == m[2] and m[1] != temp):\n        print(2)\n    elif d[0] == d[2] or (m[0] == m[2] and m[0] != temp):\n        print(2)\n    elif d[0] == d[1] or (m[0] == m[1] and m[0] != temp):\n        print(2)\n    else:\n        print(3)", "def case_0(a1, b1, c1, a2, b2, c2):\n    if a1 == a2 and b1 == b2 and (c1 == c2):\n        return True\n    return False\n\ndef case_1(a1, b1, c1, a2, b2, c2):\n    if a2 == a1 and b2 == b1 or (c2 == c1 and b2 == b1) or (a2 == a1 and c2 == c1):\n        return True\n    elif a2 == 0 and b2 == 0 and (c2 == 0):\n        return True\n    elif a2 - a1 == b2 - b1 == c2 - c1:\n        return True\n    elif (b1 != 0 and b2 % b1 == 0) and (c1 != 0 and c2 % c1 == 0) and (a1 != 0 and a2 % a1 == 0) and (b2 // b1 == c2 // c1 == a2 // a1):\n        return True\n    elif a2 == a1 and (b2 - b1 == c2 - c1 or ((b1 != 0 and b2 % b1 == 0) and (c1 != 0 and c2 % c1 == 0) and (b2 * c1 == c2 * b1))):\n        return True\n    elif b2 == b1 and (a2 - a1 == c2 - c1 or ((a1 != 0 and a2 % a1 == 0) and (c1 != 0 and c2 % c1 == 0) and (a2 * c1 == c2 * a1))):\n        return True\n    elif c2 == c1 and (b2 - b1 == a2 - a1 or ((b1 != 0 and b2 % b1 == 0) and (a1 != 0 and a2 % a1 == 0) and (b2 * a1 == a2 * b1))):\n        return True\n    return False\n\ndef case_2(a1, b1, c1, a2, b2, c2):\n    if a1 == a2 or b1 == b2 or c1 == c2:\n        return True\n    if a2 - a1 == b2 - b1 or b2 - b1 == c2 - c1 or c2 - c1 == a2 - a1:\n        return True\n    if (b1 != 0 and b2 % b1 == 0) and (c1 != 0 and c2 % c1 == 0) and (b2 * c1 == c2 * b1) or ((a1 != 0 and a2 % a1 == 0) and (c1 != 0 and c2 % c1 == 0) and (a2 * c1 == c2 * a1)) or ((b1 != 0 and b2 % b1 == 0) and (a1 != 0 and a2 % a1 == 0) and (b2 * a1 == a2 * b1)):\n        return True\n    if a2 == b2 == 0 or a2 == c2 == 0 or b2 == c2 == 0:\n        return True\n    if b1 != 0 and b2 % b1 == 0 and (b2 // b1 != 0) and (a1 != 0) and (a2 % (a1 * (b2 // b1)) == 0):\n        d1 = b2 // b1\n        d2 = a2 // (a1 * d1)\n        if c1 * d1 == c2 or c1 * d1 * d2 == c2 or c1 * d2 == c2:\n            return True\n    if a1 != 0 and a2 % a1 == 0 and (a2 // a1 != 0) and (b1 != 0) and (b2 % (b1 * (a2 // a1)) == 0):\n        d1 = a2 // a1\n        d2 = b2 // (b1 * d1)\n        if c1 * d1 == c2 or c1 * d1 * d2 == c2 or c1 * d2 == c2:\n            return True\n    if c1 != 0 and c2 % c1 == 0 and (c2 // c1 != 0) and (a1 != 0) and (a2 % (a1 * (c2 // c1)) == 0):\n        d1 = c2 // c1\n        d2 = a2 // (a1 * d1)\n        if b1 * d1 == b2 or c1 * d1 * d2 == b2 or b1 * d2 == b2:\n            return True\n    if a1 != 0 and a2 % a1 == 0 and (a2 // a1 != 0) and (c1 != 0) and (c2 % (c1 * (a2 // a1)) == 0):\n        d1 = a2 // a1\n        d2 = c2 // (c1 * d1)\n        if b1 * d1 == b2 or b1 * d1 * d2 == b2 or b1 * d2 == b2:\n            return True\n    if c1 != 0 and c2 % c1 == 0 and (c2 // c1 != 0) and (b1 != 0) and (b2 % (b1 * (c2 // c1)) == 0):\n        d1 = c2 // c1\n        d2 = b2 // (b1 * d1)\n        if a1 * d1 == a2 or a1 * d1 * d2 == a2 or a1 * d2 == a2:\n            return True\n    if b1 != 0 and b2 % b1 == 0 and (b2 // b1 != 0) and (c1 != 0) and (c2 % (c1 * (b2 // b1)) == 0):\n        d1 = b2 // b1\n        d2 = c2 // (c1 * d1)\n        if a1 * d1 == a2 or a1 * d1 * d2 == a2 or a1 * d2 == a2:\n            return True\n    if a1 + (b2 - b1) + (c2 - c1) == a2:\n        return True\n    if b1 + (a2 - a1) + (c2 - c1) == b2:\n        return True\n    if c1 + (a2 - a1) + (b2 - b1) == c2:\n        return True\n    if b1 != a1 and (b2 - a2) % (b1 - a1) == 0:\n        d2 = (b2 - a2) // (b1 - a1)\n        if d2 != 0 and a2 % d2 == 0:\n            d1 = a2 // d2 - a1\n            if (c1 + d1) * d2 == c2 or c1 * d2 == c2 or c1 + d1 == c2:\n                return True\n    if c1 != a1 and (c2 - a2) % (c1 - a1) == 0:\n        d2 = (c2 - a2) // (c1 - a1)\n        if d2 != 0 and a2 % d2 == 0:\n            d1 = a2 // d2 - a1\n            if (b1 + d1) * d2 == b2 or b1 * d2 == b2 or b1 + d1 == b2:\n                return True\n    if c1 != b1 and (c2 - b2) % (c1 - b1) == 0:\n        d2 = (c2 - b2) // (c1 - b1)\n        if d2 != 0 and b2 % d2 == 0:\n            d1 = b2 // d2 - b1\n            if (a1 + d1) * d2 == a2 or a1 * d2 == a2 or a1 + d1 == a2:\n                return True\n    if a1 + b2 != b1 and a2 % (a1 + b2 - b1) == 0:\n        d1 = b2 - b1\n        d2 = a2 // (a1 + d1)\n        if c1 + d1 == c2 or c1 * d2 == c2:\n            return True\n    if a1 + c2 != c1 and a2 % (a1 + c2 - c1) == 0:\n        d1 = c2 - c1\n        d2 = a2 // (a1 + d1)\n        if b1 + d1 == b2 or b1 * d2 == b2:\n            return True\n    if c1 + b2 != b1 and c2 % (c1 + b2 - b1) == 0:\n        d1 = b2 - b1\n        d2 = c2 // (c1 + d1)\n        if a1 + d1 == a2 or a1 * d2 == a2:\n            return True\n    if c1 + a2 != a1 and c2 % (c1 + a2 - a1) == 0:\n        d1 = a2 - a1\n        d2 = c2 // (c1 + d1)\n        if b1 + d1 == b2 or b1 * d2 == b2:\n            return True\n    if b1 + c2 != c1 and b2 % (b1 + c2 - c1) == 0:\n        d1 = c2 - c1\n        d2 = b2 // (b1 + d1)\n        if a1 + d1 == a2 or a1 * d2 == a2:\n            return True\n    if b1 + a2 != a1 and b2 % (b1 + a2 - a1) == 0:\n        d1 = a2 - a1\n        d2 = b2 // (b1 + d1)\n        if c1 + d1 == c2 or c1 * d2 == c2:\n            return True\n    if b1 != 0 and b2 != 0 and (b2 % b1 == 0) and (a2 % (b2 // b1) == 0):\n        d2 = b2 // b1\n        d1 = a2 * b1 // b2 - a1\n        if c1 * d2 == c2 or c1 + d1 == c2:\n            return True\n    if b1 != 0 and b2 != 0 and (b2 % b1 == 0) and (c2 % (b2 // b1) == 0):\n        d2 = b2 // b1\n        d1 = c2 * b1 // b2 - c1\n        if a1 * d2 == a2 or a1 + d1 == a2:\n            return True\n    if c1 != 0 and c2 != 0 and (c2 % c1 == 0) and (a2 % (c2 // c1) == 0):\n        d2 = c2 // c1\n        d1 = a2 * c1 // c2 - a1\n        if b1 * d2 == b2 or b1 + d1 == b2:\n            return True\n    if c1 != 0 and c2 != 0 and (c2 % c1 == 0) and (b2 % (c2 // c1) == 0):\n        d2 = c2 // c1\n        d1 = b2 * c1 // c2 - b1\n        if a1 * d2 == a2 or a1 + d1 == a2:\n            return True\n    if a1 != 0 and a2 != 0 and (a2 % a1 == 0) and (b2 % (a2 // a1) == 0):\n        d2 = a2 // a1\n        d1 = b2 * a1 // a2 - b1\n        if c1 * d2 == c2 or c1 + d1 == c2:\n            return True\n    if a1 != 0 and a2 != 0 and (a2 % a1 == 0) and (c2 % (a2 // a1) == 0):\n        d2 = a2 // a1\n        d1 = c2 * a1 // a2 - c1\n        if b1 * d2 == b2 or b1 + d1 == b2:\n            return True\n    if b1 != a1 and (b2 - a2) % (b1 - a1) == 0:\n        d1 = (b2 - a2) // (b1 - a1)\n        d2 = a2 - a1 * d1\n        if c1 * d1 + d2 == c2 or c1 + d2 == c2 or c1 * d1 == c2:\n            return True\n    if c1 != a1 and (c2 - a2) % (c1 - a1) == 0:\n        d1 = (c2 - a2) // (c1 - a1)\n        d2 = a2 - a1 * d1\n        if b1 * d1 + d2 == b2 or b1 + d2 == b2 or b1 * d1 == b2:\n            return True\n    if b1 != c1 and (b2 - c2) % (b1 - c1) == 0:\n        d1 = (b2 - c2) // (b1 - c1)\n        d2 = c2 - c1 * d1\n        if a1 * d1 + d2 == a2 or a1 + d2 == a2 or a1 * d1 == a2:\n            return True\n    if a1 != 0 and (a2 - (b2 - b1)) % a1 == 0:\n        d2 = b2 - b1\n        d1 = (a2 - d2) // a1\n        if c1 + d2 == c2 or c1 * d1 == c2:\n            return True\n    if a1 != 0 and (a2 - (c2 - c1)) % a1 == 0:\n        d2 = c2 - c1\n        d1 = (a2 - d2) // a1\n        if b1 + d2 == b2 or b1 * d1 == b2:\n            return True\n    if c1 != 0 and (c2 - (b2 - b1)) % c1 == 0:\n        d2 = b2 - b1\n        d1 = (c2 - d2) // c1\n        if a1 + d2 == a2 or a1 * d1 == a2:\n            return True\n    if c1 != 0 and (c2 - (a2 - a1)) % c1 == 0:\n        d2 = a2 - a1\n        d1 = (c2 - d2) // c1\n        if b1 + d2 == b2 or b1 * d1 == b2:\n            return True\n    if b1 != 0 and (b2 - (a2 - a1)) % b1 == 0:\n        d2 = a2 - a1\n        d1 = (b2 - d2) // b1\n        if c1 + d2 == c2 or c1 * d1 == c2:\n            return True\n    if b1 != 0 and (b2 - (c2 - c1)) % b1 == 0:\n        d2 = c2 - c1\n        d1 = (b2 - d2) // b1\n        if a1 + d2 == a2 or a1 * d1 == a2:\n            return True\n    if b1 != 0 and b2 % b1 == 0:\n        d1 = b2 // b1\n        d2 = a2 - a1 * d1\n        if c1 + d2 == c2 or c1 * d1 == c2:\n            return True\n    if b1 != 0 and b2 % b1 == 0:\n        d1 = b2 // b1\n        d2 = c2 - c1 * d1\n        if a1 + d2 == a2 or a1 * d1 == a2:\n            return True\n    if c1 != 0 and c2 % c1 == 0:\n        d1 = c2 // c1\n        d2 = a2 - a1 * d1\n        if b1 + d2 == b2 or b1 * d1 == b2:\n            return True\n    if c1 != 0 and c2 % c1 == 0:\n        d1 = c2 // c1\n        d2 = b2 - b1 * d1\n        if a1 + d2 == a2 or a1 * d1 == a2:\n            return True\n    if a1 != 0 and a2 % a1 == 0:\n        d1 = a2 // a1\n        d2 = c2 - c1 * d1\n        if b1 + d2 == b2 or b1 * d1 == b2:\n            return True\n    if a1 != 0 and a2 % a1 == 0:\n        d1 = a2 // a1\n        d2 = b2 - b1 * d1\n        if c1 + d2 == c2 or c1 * d1 == c2:\n            return True\n    return False\nT = int(input())\nfor _ in range(T):\n    line = input().split()\n    a1 = int(line[0])\n    b1 = int(line[1])\n    c1 = int(line[2])\n    line = input().split()\n    a2 = int(line[0])\n    b2 = int(line[1])\n    c2 = int(line[2])\n    case0 = case_0(a1, b1, c1, a2, b2, c2)\n    case1 = False\n    case2 = False\n    if not case0:\n        case1 = case_1(a1, b1, c1, a2, b2, c2)\n    if not case1:\n        case2 = case_2(a1, b1, c1, a2, b2, c2)\n    if case0:\n        print(0)\n    elif case1:\n        print(1)\n    elif case2:\n        print(2)\n    else:\n        print(3)", "t = int(input())\nfor test in range(0, t):\n    (a, b, c) = input().split(' ')\n    (x, y, z) = input().split(' ')\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    x = int(x)\n    y = int(y)\n    z = int(z)\n    if a == x and b == y and (c == z):\n        print(0)\n    elif a == x and b == y or (c == z and b == y) or (a == x and c == z):\n        print(1)\n    elif a == x or b == y or c == z:\n        if a == x:\n            if y - b == z - c or (b * c != 0 and y % b == 0 and (c * (y // b) == z)):\n                print(1)\n            else:\n                print(2)\n        elif b == y:\n            if x - a == z - c or (a * c != 0 and x % a == 0 and (c * (x // a) == z)):\n                print(1)\n            else:\n                print(2)\n        elif y - b == x - a or (b * a != 0 and y % b == 0 and (a * (y // b) == x)):\n            print(1)\n        else:\n            print(2)\n    elif x - a == y - b and x - a == z - c:\n        print(1)\n    elif a * b * c != 0 and x % a == 0 and (x // a * b == y) and (x // a * c == z):\n        print(1)\n    else:\n        ma = mb = mc = 0\n        if a != 0 and x % a == 0:\n            ma = 1\n        if b != 0 and y % b == 0:\n            mb = 1\n        if c != 0 and z % c == 0:\n            mc = 1\n        if a != b:\n            d2 = (a * y - b * x) / (a - b)\n            d1 = (x - y) / (a - b)\n            if d1 % 1 == 0 and d2 % 1 == 0 and (c * d1 + d2 == z or c * d1 == z or c + d2 == z):\n                print(2)\n                continue\n        elif x == y:\n            print(2)\n            continue\n        if c != b:\n            d2 = (c * y - b * z) / (c - b)\n            d1 = (z - y) / (c - b)\n            if d1 % 1 == 0 and d2 % 1 == 0 and (a * d1 + d2 == x or a * d1 == x or a + d2 == x):\n                print(2)\n                continue\n        elif z == y:\n            print(2)\n            continue\n        if a != c:\n            d2 = (a * z - c * x) / (a - c)\n            d1 = (x - z) / (a - c)\n            if d1 % 1 == 0 and d2 % 1 == 0 and (b * d1 + d2 == y or b * d1 == y or b + d2 == y):\n                print(2)\n                continue\n        elif x == z:\n            print(2)\n            continue\n        if mc and mb:\n            if y // b * c == z:\n                print(2)\n                continue\n        if ma and mc:\n            if x // a * c == z:\n                print(2)\n                continue\n        if ma and mb:\n            if x // a * b == y:\n                print(2)\n                continue\n        if mb:\n            if a * (y // b) + (z - c) == x or c * (y // b) + (x - a) == z:\n                print(2)\n                continue\n        if mc:\n            if a * (z // c) + (y - b) == x or b * (z // c) + (x - a) == y:\n                print(2)\n                continue\n        if ma:\n            if b * (x // a) + (z - c) == y or c * (x // a) + (y - b) == z:\n                print(2)\n                continue\n        if y - b == z - c or y - b == x - a or x - a == z - c:\n            print(2)\n            continue\n        if a != b and x != y:\n            d1 = (a * y - b * x) / (x - y)\n            d2 = (x - y) / (a - b)\n            if d1 % 1 == 0 and d2 % 1 == 0 and ((c + d1) * d2 == z or c + d1 == z or c * d2 == z):\n                print(2)\n                continue\n        if a != c and x != z:\n            d1 = (a * z - c * x) / (x - z)\n            d2 = (x - z) / (a - c)\n            if d1 % 1 == 0 and d2 % 1 == 0 and ((b + d1) * d2 == y or b + d1 == y or b * d2 == y):\n                print(2)\n                continue\n        if c != b and z != y:\n            d1 = (c * y - b * z) / (z - y)\n            d2 = (z - y) / (c - b)\n            if d1 % 1 == 0 and d2 % 1 == 0 and ((a + d1) * d2 == x or a + d1 == x or a * d2 == x):\n                print(2)\n                continue\n        if mc:\n            if (a + y - b) * (z // c) == x or (b + x - a) * (z // c) == y:\n                print(2)\n                continue\n        if ma:\n            if (c + y - b) * (x // a) == z or (b + z - c) * (x // a) == y:\n                print(2)\n                continue\n        if mb:\n            if (a + z - c) * (y // b) == x or (c + x - a) * (y // b) == z:\n                print(2)\n                continue\n        if a + y - b + z - c == x or b + x - a + z - c == y or c + x - a + y - b == z:\n            print(2)\n            continue\n        if ma and mb and mc:\n            if a * (y // b) * (z // c) == x or b * (x // a) * (z // c) == y or c * (x // a) * (y // b) == z:\n                print(2)\n                continue\n        print(3)", "def n_solved(p, q, r, a, b, c):\n    s = 0\n    if p == a:\n        s += 1\n    if q == b:\n        s += 1\n    if r == c:\n        s += 1\n    return s\n\ndef can_solve_in_one_move_2(p, q, a, b):\n    if a - p == b - q:\n        return True\n    if p != 0 and a % p == 0 and (a // p * q == b):\n        return True\n    return False\n\ndef can_solve_in_one_move_3(p, q, r, a, b, c):\n    if a - p == b - q and a - p == c - r:\n        return True\n    if p != 0 and a % p == 0 and (a // p * q == b) and (a // p * r == c):\n        return True\n    return False\n\ndef fix_one_fixes_other(p, a, q, r, b, c):\n    n = a - p\n    if can_solve_in_one_move_2(q + n, r, b, c) or can_solve_in_one_move_2(q, r + n, b, c) or can_solve_in_one_move_2(q + n, r + n, b, c):\n        return True\n    if p != 0 and a % p == 0:\n        n = a // p\n        if can_solve_in_one_move_2(q * n, r, b, c) or can_solve_in_one_move_2(q, r * n, b, c) or can_solve_in_one_move_2(q * n, r * n, b, c):\n            return True\n    return False\n\ndef can_align_others(p, a, q, r, b, c):\n    if q != 0:\n        x = (b + p - a) / q\n        if x.is_integer():\n            if can_solve_in_one_move_3(p, q * x, r * x, a, b, c):\n                return True\n    if a != 0:\n        x = b * p / a - 9\n        if x.is_integer():\n            if can_solve_in_one_move_3(p, q + x, r + x, a, b, c):\n                return True\n    return False\n\ndef can_solve_in_two_move_3(p, q, r, a, b, c):\n    if a - b != 0:\n        x = (p * b - a * q) / (a - b)\n        if x.is_integer():\n            if can_solve_in_one_move_3(p + x, q + x, r + x, a, b, c):\n                return True\n    if q - r != 0:\n        x = (b - c) / (q - r)\n        if x.is_integer():\n            if can_solve_in_one_move_3(p * x, q * x, r * x, a, b, c):\n                return True\n\ndef _sol(p, q, r, a, b, c):\n    ns = n_solved(p, q, r, a, b, c)\n    if ns == 3:\n        return 0\n    if ns == 2:\n        return 1\n    if ns == 1:\n        if can_solve_in_one_move_2(p, q, a, b) or can_solve_in_one_move_2(p, r, a, c) or can_solve_in_one_move_2(q, r, b, c):\n            return 1\n        return 2\n    if ns == 0:\n        if can_solve_in_one_move_3(p, q, r, a, b, c):\n            return 1\n        if can_solve_in_one_move_2(p, q, a, b) or can_solve_in_one_move_2(p, r, a, c) or can_solve_in_one_move_2(q, r, b, c):\n            return 2\n        if fix_one_fixes_other(p, a, q, r, b, c) or fix_one_fixes_other(q, b, p, r, a, c) or fix_one_fixes_other(r, c, p, q, a, b):\n            return 2\n        if can_align_others(p, a, q, r, b, c) or can_align_others(q, b, p, r, a, c) or can_align_others(r, c, p, q, a, b):\n            return 2\n        if can_solve_in_two_move_3(p, q, r, a, b, c):\n            return 2\n        return 3\n\ndef sol() -> int:\n    (p, q, r) = map(int, input().split())\n    (a, b, c) = map(int, input().split())\n    return _sol(p, q, r, a, b, c)\nN = int(input())\nfor i in range(N):\n    s = sol()\n    print(s)", "def findanswer2(p, q, r, a, b, c):\n    temp = 1\n    add = p * b - a * q\n    if p - q == 0 or add % (p - q) != 0:\n        return 0\n    add //= p - q\n    sub = a - add\n    if p == 0 or sub % p != 0:\n        return 0\n    sub //= p\n    p1 = p\n    q1 = q\n    r1 = r\n    r += add\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    r *= sub\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    r = r * sub + add\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    sub = a - b\n    if p - q == 0 or sub % (p - q) != 0:\n        return 0\n    sub //= p - q\n    add = a\n    if sub == 0 or add % sub != 0:\n        return 0\n    add //= sub\n    add -= p\n    r += add\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    r *= sub\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    r = (r + add) * sub\n    if r == c:\n        temp += 1\n        return temp\n    return 0\n\ndef findanswer(p, q, r, a, b, c):\n    temp = 1\n    diff = c - r\n    if a == 0 and b == 0:\n        temp += 1\n        return temp\n    if p - a == q - b:\n        temp += 1\n        return temp\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n        if a // p == b // q:\n            temp += 1\n            return temp\n    p1 = p\n    q1 = q\n    r1 = r\n    p += diff\n    if p - a == q - b:\n        temp += 1\n        return temp\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n        if a // p == b // q:\n            temp += 1\n            return temp\n    p = p1\n    q = q1\n    r = r1\n    q += diff\n    if p - a == q - b:\n        temp += 1\n        return temp\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n        if a // p == b // q:\n            temp += 1\n            return temp\n    p = p1\n    q = q1\n    r = r1\n    p += diff\n    q += diff\n    if p - a == q - b:\n        temp += 1\n        return temp\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n        if a // p == b // q:\n            temp += 1\n            return temp\n    p = p1\n    q = q1\n    r = r1\n    if r != 0 and c % r == 0:\n        mult = c // r\n        if p - a == q - b:\n            temp += 1\n            return temp\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                temp += 1\n                return temp\n        p = p1\n        q = q1\n        r = r1\n        p *= mult\n        if p - a == q - b:\n            temp += 1\n            return temp\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                temp += 1\n                return temp\n        p = p1\n        q = q1\n        r = r1\n        q *= mult\n        if p - a == q - b:\n            temp += 1\n            return temp\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                temp += 1\n                return temp\n        p = p1\n        q = q1\n        r = r1\n        p *= mult\n        q *= mult\n        if p - a == q - b:\n            temp += 1\n            return temp\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                temp += 1\n                return temp\n    return 0\n\ndef sol():\n    (p, q, r) = input().split()\n    (a, b, c) = input().split()\n    p = int(p)\n    q = int(q)\n    r = int(r)\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if p == a and q == b and (r == c):\n        count = 0\n        print(count)\n        return\n    if a == 0 and b == 0 and (c == 0):\n        count = 1\n        print(count)\n        return\n    if p - a == q - b and q - b == r - c:\n        count = 1\n        print(count)\n        return\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0) and (r != 0) and (c % r == 0):\n        if a // p == b // q and b // q == c // r:\n            count = 1\n            print(count)\n            return\n    if p != a and q == b and (r == c) or (p == a and q != b and (r == c)) or (p == a and q == b and (r != c)):\n        count = 1\n        print(count)\n        return\n    if p != a and q != b and (r == c):\n        if a == 0 and b == 0:\n            count = 1\n            print(count)\n            return\n        if p - a == q - b:\n            count = 1\n            print(count)\n            return\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                count = 1\n                print(count)\n                return\n        count = 2\n        print(count)\n        return\n    if p != a and q == b and (r != c):\n        if a == 0 and c == 0:\n            count = 1\n            print(count)\n            return\n        if p - a == r - c:\n            count = 1\n            print(count)\n            return\n        if p != 0 and a % p == 0 and (r != 0) and (c % r == 0):\n            if a // p == c // r:\n                count = 1\n                print(count)\n                return\n        count = 2\n        print(count)\n        return\n    if p == a and q != b and (r != c):\n        if b == 0 and c == 0:\n            count = 1\n            print(count)\n            return\n        if q - b == r - c:\n            count = 1\n            print(count)\n            return\n        if q != 0 and b % q == 0 and (r != 0) and (c % r == 0):\n            if b // q == c // r:\n                count = 1\n                print(count)\n                return\n        count = 2\n        print(count)\n        return\n    answer = 0\n    answer = findanswer(p, q, r, a, b, c)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer(p, r, q, a, c, b)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer(q, r, p, b, c, a)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer2(p, q, r, a, b, c)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer2(p, r, q, a, c, b)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer2(q, r, p, b, c, a)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    count = 3\n    print(count)\nT = int(input())\nfor i in range(T):\n    sol()", "def findanswer2(p, q, r, a, b, c):\n    temp = 1\n    add = p * b - a * q\n    if p - q == 0 or add % (p - q) != 0:\n        return 0\n    add //= p - q\n    sub = a - add\n    if p == 0 or sub % p != 0:\n        return 0\n    sub //= p\n    p1 = p\n    q1 = q\n    r1 = r\n    r += add\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    r *= sub\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    r = r * sub + add\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    sub = a - b\n    if p - q == 0 or sub % (p - q) != 0:\n        return 0\n    sub //= p - q\n    add = a\n    if sub == 0 or add % sub != 0:\n        return 0\n    add //= sub\n    add -= p\n    r += add\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    r *= sub\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    r = (r + add) * sub\n    if r == c:\n        temp += 1\n        return temp\n    return 0\n\ndef findanswer(p, q, r, a, b, c):\n    temp = 1\n    diff = c - r\n    if a == 0 and b == 0:\n        temp += 1\n        return temp\n    if p - a == q - b:\n        temp += 1\n        return temp\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n        if a // p == b // q:\n            temp += 1\n            return temp\n    p1 = p\n    q1 = q\n    r1 = r\n    p += diff\n    if p - a == q - b:\n        temp += 1\n        return temp\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n        if a // p == b // q:\n            temp += 1\n            return temp\n    p = p1\n    q = q1\n    r = r1\n    q += diff\n    if p - a == q - b:\n        temp += 1\n        return temp\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n        if a // p == b // q:\n            temp += 1\n            return temp\n    p = p1\n    q = q1\n    r = r1\n    p += diff\n    q += diff\n    if p - a == q - b:\n        temp += 1\n        return temp\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n        if a // p == b // q:\n            temp += 1\n            return temp\n    p = p1\n    q = q1\n    r = r1\n    if r != 0 and c % r == 0:\n        mult = c // r\n        if p - a == q - b:\n            temp += 1\n            return temp\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                temp += 1\n                return temp\n        p = p1\n        q = q1\n        r = r1\n        p *= mult\n        if p - a == q - b:\n            temp += 1\n            return temp\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                temp += 1\n                return temp\n        p = p1\n        q = q1\n        r = r1\n        q *= mult\n        if p - a == q - b:\n            temp += 1\n            return temp\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                temp += 1\n                return temp\n        p = p1\n        q = q1\n        r = r1\n        p *= mult\n        q *= mult\n        if p - a == q - b:\n            temp += 1\n            return temp\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                temp += 1\n                return temp\n    return 0\n\ndef sol():\n    (p, q, r) = input().split()\n    (a, b, c) = input().split()\n    p = int(p)\n    q = int(q)\n    r = int(r)\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if p == a and q == b and (r == c):\n        count = 0\n        print(count)\n        return\n    if a == 0 and b == 0 and (c == 0):\n        count = 1\n        print(count)\n        return\n    if p - a == q - b and q - b == r - c:\n        count = 1\n        print(count)\n        return\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0) and (r != 0) and (c % r == 0):\n        if a // p == b // q and b // q == c // r:\n            count = 1\n            print(count)\n            return\n    if p != a and q == b and (r == c) or (p == a and q != b and (r == c)) or (p == a and q == b and (r != c)):\n        count = 1\n        print(count)\n        return\n    if p != a and q != b and (r == c):\n        if a == 0 and b == 0:\n            count = 1\n            print(count)\n            return\n        if p - a == q - b:\n            count = 1\n            print(count)\n            return\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                count = 1\n                print(count)\n                return\n        count = 2\n        print(count)\n        return\n    if p != a and q == b and (r != c):\n        if a == 0 and c == 0:\n            count = 1\n            print(count)\n            return\n        if p - a == r - c:\n            count = 1\n            print(count)\n            return\n        if p != 0 and a % p == 0 and (r != 0) and (c % r == 0):\n            if a // p == c // r:\n                count = 1\n                print(count)\n                return\n        count = 2\n        print(count)\n        return\n    if p == a and q != b and (r != c):\n        if b == 0 and c == 0:\n            count = 1\n            print(count)\n            return\n        if q - b == r - c:\n            count = 1\n            print(count)\n            return\n        if q != 0 and b % q == 0 and (r != 0) and (c % r == 0):\n            if b // q == c // r:\n                count = 1\n                print(count)\n                return\n        count = 2\n        print(count)\n        return\n    answer = 0\n    answer = findanswer(p, q, r, a, b, c)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer(p, r, q, a, c, b)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer(q, r, p, b, c, a)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer2(p, q, r, a, b, c)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer2(p, r, q, a, c, b)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer2(q, r, p, b, c, a)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    count = 3\n    print(count)\nT = int(input())\nfor i in range(T):\n    sol()", "def findanswer2(p, q, r, a, b, c):\n    temp = 1\n    add = p * b - a * q\n    if p - q == 0 or add % (p - q) != 0:\n        return 0\n    add //= p - q\n    sub = a - add\n    if p == 0 or sub % p != 0:\n        return 0\n    sub //= p\n    p1 = p\n    q1 = q\n    r1 = r\n    r += add\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    r *= sub\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    r = r * sub + add\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    sub = a - b\n    if p - q == 0 or sub % (p - q) != 0:\n        return 0\n    sub //= p - q\n    add = a\n    if sub == 0 or add % sub != 0:\n        return 0\n    add //= sub\n    add -= p\n    r += add\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    r *= sub\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    r = (r + add) * sub\n    if r == c:\n        temp += 1\n        return temp\n    return 0\n\ndef findanswer(p, q, r, a, b, c):\n    temp = 1\n    diff = c - r\n    if a == 0 and b == 0:\n        temp += 1\n        return temp\n    if p - a == q - b:\n        temp += 1\n        return temp\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n        if a // p == b // q:\n            temp += 1\n            return temp\n    p1 = p\n    q1 = q\n    r1 = r\n    p += diff\n    if p - a == q - b:\n        temp += 1\n        return temp\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n        if a // p == b // q:\n            temp += 1\n            return temp\n    p = p1\n    q = q1\n    r = r1\n    q += diff\n    if p - a == q - b:\n        temp += 1\n        return temp\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n        if a // p == b // q:\n            temp += 1\n            return temp\n    p = p1\n    q = q1\n    r = r1\n    p += diff\n    q += diff\n    if p - a == q - b:\n        temp += 1\n        return temp\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n        if a // p == b // q:\n            temp += 1\n            return temp\n    p = p1\n    q = q1\n    r = r1\n    if r != 0 and c % r == 0:\n        mult = c // r\n        if p - a == q - b:\n            temp += 1\n            return temp\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                temp += 1\n                return temp\n        p = p1\n        q = q1\n        r = r1\n        p *= mult\n        if p - a == q - b:\n            temp += 1\n            return temp\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                temp += 1\n                return temp\n        p = p1\n        q = q1\n        r = r1\n        q *= mult\n        if p - a == q - b:\n            temp += 1\n            return temp\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                temp += 1\n                return temp\n        p = p1\n        q = q1\n        r = r1\n        p *= mult\n        q *= mult\n        if p - a == q - b:\n            temp += 1\n            return temp\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                temp += 1\n                return temp\n    return 0\n\ndef sol():\n    (p, q, r) = input().split()\n    (a, b, c) = input().split()\n    p = int(p)\n    q = int(q)\n    r = int(r)\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if p == a and q == b and (r == c):\n        count = 0\n        print(count)\n        return\n    if a == 0 and b == 0 and (c == 0):\n        count = 1\n        print(count)\n        return\n    if p - a == q - b and q - b == r - c:\n        count = 1\n        print(count)\n        return\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0) and (r != 0) and (c % r == 0):\n        if a // p == b // q and b // q == c // r:\n            count = 1\n            print(count)\n            return\n    if p != a and q == b and (r == c) or (p == a and q != b and (r == c)) or (p == a and q == b and (r != c)):\n        count = 1\n        print(count)\n        return\n    if p != a and q != b and (r == c):\n        if a == 0 and b == 0:\n            count = 1\n            print(count)\n            return\n        if p - a == q - b:\n            count = 1\n            print(count)\n            return\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                count = 1\n                print(count)\n                return\n        count = 2\n        print(count)\n        return\n    if p != a and q == b and (r != c):\n        if a == 0 and c == 0:\n            count = 1\n            print(count)\n            return\n        if p - a == r - c:\n            count = 1\n            print(count)\n            return\n        if p != 0 and a % p == 0 and (r != 0) and (c % r == 0):\n            if a // p == c // r:\n                count = 1\n                print(count)\n                return\n        count = 2\n        print(count)\n        return\n    if p == a and q != b and (r != c):\n        if b == 0 and c == 0:\n            count = 1\n            print(count)\n            return\n        if q - b == r - c:\n            count = 1\n            print(count)\n            return\n        if q != 0 and b % q == 0 and (r != 0) and (c % r == 0):\n            if b // q == c // r:\n                count = 1\n                print(count)\n                return\n        count = 2\n        print(count)\n        return\n    answer = 0\n    answer = findanswer(p, q, r, a, b, c)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer(p, r, q, a, c, b)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer(q, r, p, b, c, a)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer2(p, q, r, a, b, c)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer2(p, r, q, a, c, b)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer2(q, r, p, b, c, a)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    count = 3\n    print(count)\nT = int(input())\nfor i in range(T):\n    sol()", "def findanswer2(p, q, r, a, b, c):\n    temp = 1\n    add = p * b - a * q\n    if p - q == 0 or add % (p - q) != 0:\n        return 0\n    add //= p - q\n    sub = a - add\n    if p == 0 or sub % p != 0:\n        return 0\n    sub //= p\n    p1 = p\n    q1 = q\n    r1 = r\n    r += add\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    r *= sub\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    r = r * sub + add\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    sub = a - b\n    if p - q == 0 or sub % (p - q) != 0:\n        return 0\n    sub //= p - q\n    add = a\n    if sub == 0 or add % sub != 0:\n        return 0\n    add //= sub\n    add -= p\n    r += add\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    r *= sub\n    if r == c:\n        temp += 1\n        return temp\n    p = p1\n    q = q1\n    r = r1\n    r = (r + add) * sub\n    if r == c:\n        temp += 1\n        return temp\n    return 0\n\ndef findanswer(p, q, r, a, b, c):\n    temp = 1\n    diff = c - r\n    if a == 0 and b == 0:\n        temp += 1\n        return temp\n    if p - a == q - b:\n        temp += 1\n        return temp\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n        if a // p == b // q:\n            temp += 1\n            return temp\n    p1 = p\n    q1 = q\n    r1 = r\n    p += diff\n    if p - a == q - b:\n        temp += 1\n        return temp\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n        if a // p == b // q:\n            temp += 1\n            return temp\n    p = p1\n    q = q1\n    r = r1\n    q += diff\n    if p - a == q - b:\n        temp += 1\n        return temp\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n        if a // p == b // q:\n            temp += 1\n            return temp\n    p = p1\n    q = q1\n    r = r1\n    p += diff\n    q += diff\n    if p - a == q - b:\n        temp += 1\n        return temp\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n        if a // p == b // q:\n            temp += 1\n            return temp\n    p = p1\n    q = q1\n    r = r1\n    if r != 0 and c % r == 0:\n        mult = c // r\n        if p - a == q - b:\n            temp += 1\n            return temp\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                temp += 1\n                return temp\n        p = p1\n        q = q1\n        r = r1\n        p *= mult\n        if p - a == q - b:\n            temp += 1\n            return temp\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                temp += 1\n                return temp\n        p = p1\n        q = q1\n        r = r1\n        q *= mult\n        if p - a == q - b:\n            temp += 1\n            return temp\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                temp += 1\n                return temp\n        p = p1\n        q = q1\n        r = r1\n        p *= mult\n        q *= mult\n        if p - a == q - b:\n            temp += 1\n            return temp\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                temp += 1\n                return temp\n    return 0\n\ndef sol():\n    (p, q, r) = input().split()\n    (a, b, c) = input().split()\n    p = int(p)\n    q = int(q)\n    r = int(r)\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if p == a and q == b and (r == c):\n        count = 0\n        print(count)\n        return\n    if a == 0 and b == 0 and (c == 0):\n        count = 1\n        print(count)\n        return\n    if p - a == q - b and q - b == r - c:\n        count = 1\n        print(count)\n        return\n    if p != 0 and a % p == 0 and (q != 0) and (b % q == 0) and (r != 0) and (c % r == 0):\n        if a // p == b // q and b // q == c // r:\n            count = 1\n            print(count)\n            return\n    if p != a and q == b and (r == c) or (p == a and q != b and (r == c)) or (p == a and q == b and (r != c)):\n        count = 1\n        print(count)\n        return\n    if p != a and q != b and (r == c):\n        if a == 0 and b == 0:\n            count = 1\n            print(count)\n            return\n        if p - a == q - b:\n            count = 1\n            print(count)\n            return\n        if p != 0 and a % p == 0 and (q != 0) and (b % q == 0):\n            if a // p == b // q:\n                count = 1\n                print(count)\n                return\n        count = 2\n        print(count)\n        return\n    if p != a and q == b and (r != c):\n        if a == 0 and c == 0:\n            count = 1\n            print(count)\n            return\n        if p - a == r - c:\n            count = 1\n            print(count)\n            return\n        if p != 0 and a % p == 0 and (r != 0) and (c % r == 0):\n            if a // p == c // r:\n                count = 1\n                print(count)\n                return\n        count = 2\n        print(count)\n        return\n    if p == a and q != b and (r != c):\n        if b == 0 and c == 0:\n            count = 1\n            print(count)\n            return\n        if q - b == r - c:\n            count = 1\n            print(count)\n            return\n        if q != 0 and b % q == 0 and (r != 0) and (c % r == 0):\n            if b // q == c // r:\n                count = 1\n                print(count)\n                return\n        count = 2\n        print(count)\n        return\n    answer = 0\n    answer = findanswer(p, q, r, a, b, c)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer(p, r, q, a, c, b)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer(q, r, p, b, c, a)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer2(p, q, r, a, b, c)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer2(p, r, q, a, c, b)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    answer = findanswer2(q, r, p, b, c, a)\n    if answer == 2:\n        count = 2\n        print(count)\n        return\n    count = 3\n    print(count)\nT = int(input())\nfor i in range(T):\n    sol()", "import math\nimport copy\n\ndef calc(m, n):\n    (p, q, r) = (m[0], m[1], m[2])\n    (a, b, c) = (n[0], n[1], n[2])\n    if p == a and q == b and (r == c):\n        return 0\n    i = a - p\n    j = b - q\n    k = c - r\n    if i == j and j == k or (i == j and k == 0) or (i == 0 and k == 0 and (j != 0)) or (i == 0 and j == k) or (j == 0 and i == k) or (i == 0 and j == 0 and (k != 0)) or (j == 0 and k == 0 and (i != 0)):\n        return 1\n    if p != 0:\n        if a % p == 0:\n            i = int(a / p)\n            if i * q == b and r == c or (r * i == c and q == b) or (q * i == b and r * i == c) or (q == b and r == c):\n                return 1\n    if q != 0:\n        if b % q == 0:\n            i = int(b / q)\n            if i * p == a and r == c or (i * r == c and p == a) or (i * p == a and i * r == c) or (p == a and r == c):\n                return 1\n    if r != 0:\n        if c % r == 0:\n            i = int(c / r)\n            if i * p == a and q == b or (i * q == b and p == a) or (p * i == a and i * q == b) or (p == a and q == b):\n                return 1\n    i = a - p\n    j = b - q\n    k = c - r\n    if i + j == k or j + k == i or i + k == j or (i == j) or (j == k) or (i == k) or (i == 0) or (j == 0) or (k == 0):\n        return 2\n    if p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0):\n        i = int(a / p)\n        j = int(b / q)\n        k = int(c / r)\n        if i * j == k or j * k == i or i * k == j or (i == j) or (j == k) or (i == k) or (a == p) or (q == b) or (c == r):\n            return 2\n    if p - q != 0:\n        if (a - b) % (p - q) == 0:\n            i = int((a - b) / (p - q))\n            d = a - p * i\n            if r * i == c or r + d == c or r * i + d == c:\n                return 2\n    if q - r != 0:\n        if (b - c) % (q - r) == 0:\n            i = int((b - c) / (q - r))\n            d = b - q * i\n            if p * i == a or p * i + d == a or p + d == a:\n                return 2\n    if p - r != 0:\n        if (a - c) % (p - r) == 0:\n            i = int((a - c) / (p - r))\n            d = c - r * i\n            if q * i == b or q + d == b or q * i + d == b:\n                return 2\n    if p != 0:\n        d = b - q\n        if (a - d) % p == 0:\n            i = int((a - d) / p)\n            if r * i == c or r * i + d == c or r + d == c:\n                return 2\n        d = c - r\n        if (a - d) % p == 0:\n            i = int((a - d) / p)\n            if q * i == b or q * i + d == b or q + d == b:\n                return 2\n    if q != 0:\n        d = a - p\n        if (b - d) % q == 0:\n            i = int((b - d) / q)\n            if r * i == c or r * i + d == c or r + d == c:\n                return 2\n        d = c - r\n        if (b - d) % q == 0:\n            i = int((b - d) / q)\n            if p * i == a or p * i + d == a or p + d == a:\n                return 2\n    if r != 0:\n        d = b - q\n        if (c - d) % r == 0:\n            i = int((c - d) / r)\n            if p * i == a or p * i + d == a or p + d == a:\n                return 2\n        d = a - p\n        if (c - d) % r == 0:\n            i = int((c - d) / r)\n            if q * i == b or q * i + d == b or q + d == b:\n                return 2\n    if p != 0:\n        d = b - q\n        if a % p == 0:\n            i = int(a / p)\n            if r * i == c or r * i + d == c or r + d == c or ((r + d) * i == c):\n                return 2\n        d = c - r\n        if a % p == 0:\n            i = int(a / p)\n            if q * i == b or q * i + d == b or q + d == b or ((q + d) * i == b):\n                return 2\n    if q != 0:\n        d = a - p\n        if b % q == 0:\n            i = int(b / q)\n            if r * i == c or r * i + d == c or r + d == c or ((r + d) * i == c):\n                return 2\n        d = c - r\n        if b % q == 0:\n            i = int(b / q)\n            if p * i == a or p * i + d == a or p + d == a or ((p + d) * i == a):\n                return 2\n    if r != 0:\n        d = b - q\n        if c % r == 0:\n            i = int(c / r)\n            if p * i == a or p * i + d == a or p + d == a or ((p + d) * i == a):\n                return 2\n        d = a - p\n        if c % r == 0:\n            i = int(c / r)\n            if q * i == b or q * i + d == b or q + d == b or ((q + d) * i == b):\n                return 2\n    if a - b != 0:\n        if (b * p - a * q) % (a - b) == 0:\n            d = int((b * p - a * q) / (a - b))\n            if p + d != 0:\n                if a % (p + d) == 0:\n                    i = int(a / (p + d))\n                    if (r + d) * i == c or r * i == c or r + d == c:\n                        return 2\n    if b - c != 0:\n        if (c * q - b * r) % (b - c) == 0:\n            d = int((c * q - b * r) / (b - c))\n            if q + d != 0:\n                if b % (q + d) == 0:\n                    i = int(b / (q + d))\n                    if (p + d) * i == a or p * i == a or p + d == a:\n                        return 2\n    if a - c != 0:\n        if (c * p - a * r) % (a - c) == 0:\n            d = int((c * p - a * r) / (a - c))\n            if p + d != 0:\n                if a % (p + d) == 0:\n                    i = int(a / (p + d))\n                    if (q + d) * i == b or q * i == b or q + d == b:\n                        return 2\n    return 3\nt = int(input())\nfor q in range(t):\n    m = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    print(calc(m, n))", "def check2(a, b, c, d):\n    if c - a == d - b:\n        return 1\n    if a == 0 or b == 0:\n        return 0\n    if c % a == 0 and d % b == 0 and (c // a == d // b):\n        return 1\n    return 0\n\ndef check3(a, b, c, d, e, f):\n    if d - a == e - b and e - b == f - c:\n        return 1\n    if a == 0 or b == 0 or c == 0:\n        return 0\n    if d % a == 0 and e % b == 0 and (f % c == 0) and (d // a == e // b) and (e // b == f // c):\n        return 1\n    return 0\nt = int(input())\nwhile t:\n    t -= 1\n    (a, b, c) = [int(x) for x in input().split()]\n    (a1, b1, c1) = [int(x) for x in input().split()]\n    if a == a1 and b == b1 and (c == c1):\n        print('0')\n        continue\n    if a == a1 and b == b1 or (a == a1 and c == c1) or (b == b1 and c == c1):\n        print('1')\n        continue\n    if a == a1 and check2(b, c, b1, c1) or (b == b1 and check2(a, c, a1, c1)) or (c == c1 and check2(a, b, a1, b1)) or check3(a, b, c, a1, b1, c1):\n        print('1')\n        continue\n    if a == a1 or b == b1 or c == c1:\n        print('2')\n        continue\n    if check2(a, b, a1, b1) or check2(a, c, a1, c1) or check2(b, c, b1, c1):\n        print('2')\n        continue\n    d1 = a1 - a\n    d2 = b1 - b\n    d3 = c1 - c\n    if d1 + d2 == d3 or d2 + d3 == d1 or d1 + d3 == d2:\n        print('2')\n        continue\n    flag = 1\n    if a == 0 or b == 0 or c == 0:\n        flag = 0\n    if flag == 1:\n        div1 = a1 // a\n        div2 = b1 // b\n        div3 = c1 // c\n        mod1 = a1 % a\n        mod2 = b1 % b\n        mod3 = c1 % c\n        if mod1 == 0 and mod2 == 0 and (mod3 == 0) and (div1 * div2 == div3 or div1 * div3 == div2 or div2 * div3 == div1):\n            print('2')\n            continue\n    if a != 0 and a1 % a == 0:\n        div1 = a1 // a\n        if div1 != 0 and c1 % div1 == 0:\n            if b1 - b == c1 // div1 - c:\n                print('2')\n                continue\n        if div1 != 0 and b1 % div1 == 0:\n            if c1 - c == b1 // div1 - b:\n                print('2')\n                continue\n    if b != 0 and b1 % b == 0:\n        div1 = b1 // b\n        if div1 != 0 and c1 % div1 == 0:\n            if a1 - a == c1 // div1 - c:\n                print('2')\n                continue\n        if div1 != 0 and a1 % div1 == 0:\n            if c1 - c == a1 // div1 - a:\n                print('2')\n                continue\n    if c != 0 and c1 % c == 0:\n        div1 = c1 // c\n        if div1 != 0 and a1 % div1 == 0:\n            if b1 - b == a1 // div1 - a:\n                print('2')\n                continue\n        if div1 != 0 and b1 % div1 == 0:\n            if a1 - a == b1 // div1 - b:\n                print('2')\n                continue\n    if a != 0 and (a1 - d2) % a == 0:\n        if c != 0 and c1 % c == 0 and ((a1 - d2) // a == c1 // c):\n            print('2')\n            continue\n    if a != 0 and (a1 - d3) % a == 0:\n        if b != 0 and b1 % b == 0 and ((a1 - d3) // a == b1 // b):\n            print('2')\n            continue\n    if b != 0 and (b1 - d1) % b == 0:\n        if c != 0 and c1 % c == 0 and ((b1 - d1) // b == c1 // c):\n            print('2')\n            continue\n    if b != 0 and (b1 - d3) % b == 0:\n        if a != 0 and a1 % a == 0 and ((b1 - d3) // b == a1 // a):\n            print('2')\n            continue\n    if c != 0 and (c1 - d1) % c == 0:\n        if b != 0 and b1 % b == 0 and ((c1 - d1) // c == b1 // b):\n            print('2')\n            continue\n    if c != 0 and (c1 - d2) % c == 0:\n        if a != 0 and a1 % a == 0 and ((c1 - d2) // c == a1 // a):\n            print('2')\n            continue\n    if a != 0 and a1 % a == 0:\n        div1 = a1 // a\n        if div1 != 0 and b1 % div1 == 0 and (c1 % div1 == 0):\n            div2 = b1 // div1\n            div3 = c1 // div1\n            if div2 - b == div3 - c:\n                print('2')\n                continue\n    if b != 0 and b1 % b == 0:\n        div1 = b1 // b\n        if div1 != 0 and a1 % div1 == 0 and (c1 % div1 == 0):\n            div2 = a1 // div1\n            div3 = c1 // div1\n            if div2 - a == div3 - c:\n                print('2')\n                continue\n    if c != 0 and c1 % c == 0:\n        div1 = c1 // c\n        if div1 != 0 and a1 % div1 == 0 and (b1 % div1 == 0):\n            div2 = a1 // div1\n            div3 = b1 // div1\n            if div2 - a == div3 - b:\n                print('2')\n                continue\n    if b != 0 and c != 0 and ((b1 - d1) % b == 0) and ((c1 - d1) % c == 0) and ((b1 - d1) // b == (c1 - d1) // c):\n        print('2')\n        continue\n    if a != 0 and b != 0 and ((b1 - d3) % b == 0) and ((a1 - d3) % a == 0) and ((b1 - d3) // b == (a1 - d3) // a):\n        print('2')\n        continue\n    if a != 0 and c != 0 and ((a1 - d2) % a == 0) and ((c1 - d2) % c == 0) and ((a1 - d2) // a == (c1 - d2) // c):\n        print('2')\n        continue\n    if b + d1 != 0 and c + d1 != 0 and (b1 % (b + d1) == 0) and (c1 % (c + d1) == 0) and (b1 // (b + d1) == c1 // (c + d1)):\n        print('2')\n        continue\n    if a + d2 != 0 and c + d2 != 0 and (a1 % (a + d2) == 0) and (c1 % (c + d2) == 0) and (a1 // (a + d2) == c1 // (c + d2)):\n        print('2')\n        continue\n    if b + d3 != 0 and a + d3 != 0 and (b1 % (b + d3) == 0) and (a1 % (a + d3) == 0) and (b1 // (b + d3) == a1 // (a + d3)):\n        print('2')\n        continue\n    if a != 0 and a1 % a == 0:\n        div1 = a1 // a\n        if b1 - b * div1 == c1 - c * div1:\n            print('2')\n            continue\n    if b != 0 and b1 % b == 0:\n        div1 = b1 // b\n        if a1 - a * div1 == c1 - c * div1:\n            print('2')\n            continue\n    if c != 0 and c1 % c == 0:\n        div1 = c1 // c\n        if b1 - b * div1 == a1 - a * div1:\n            print('2')\n            continue\n    if a - b != 0 and (a1 - b1) % (a - b) == 0:\n        y1 = (a1 - b1) // (a - b)\n        if y1 != 0 and a1 % y1 == 0:\n            x1 = a1 // y1 - a\n            if (c + x1) * y1 == c1:\n                print('2')\n                continue\n    if a - c != 0 and (a1 - c1) % (a - c) == 0:\n        y1 = (a1 - c1) // (a - c)\n        if y1 != 0 and a1 % y1 == 0:\n            x1 = a1 // y1 - a\n            if (b + x1) * y1 == b1:\n                print('2')\n                continue\n    if b - c != 0 and (b1 - c1) % (b - c) == 0:\n        y1 = (b1 - c1) // (b - c)\n        if y1 != 0 and b1 % y1 == 0:\n            x1 = b1 // y1 - b\n            if (a + x1) * y1 == a1:\n                print('2')\n                continue\n    if a - b != 0 and (a1 - b1) % (a - b) == 0:\n        x1 = (a1 - b1) // (a - b)\n        y1 = a1 - a * x1\n        if c * x1 + y1 == c1:\n            print('2')\n            continue\n    if a - c != 0 and (a1 - c1) % (a - c) == 0:\n        x1 = (a1 - c1) // (a - c)\n        y1 = a1 - a * x1\n        if b * x1 + y1 == b1:\n            print('2')\n            continue\n    if c - b != 0 and (c1 - b1) % (c - b) == 0:\n        x1 = (c1 - b1) // (c - b)\n        y1 = c1 - c * x1\n        if a * x1 + y1 == a1:\n            print('2')\n            continue\n    print('3')\n    continue", "def tupp(a, p, b, q, c, r):\n    manlo = 3\n    if a != b:\n        if (p - q) % (a - b) == 0:\n            x = (p - q) // (a - b)\n            y = p - a * x\n            if x == 1 or y == 0 or c + y == r or (c * x == r) or (c * x + y == r):\n                manlo = 2\n    if p != q:\n        if (a * q - b * p) % (p - q) == 0:\n            x = (a * q - b * p) // (p - q)\n            if a + x != 0:\n                if p % (a + x) == 0:\n                    y = p // (a + x)\n                    if x == 0 or y == 1 or c + x == r or (c * y == r) or ((c + x) * y == r):\n                        manlo = 2\n    if p == q and a == b:\n        manlo = 2\n    if c + (p - a) == r or c + (q - b) == r or c + (p - a) + (q - b) == r:\n        manlo = 2\n    if a != 0 and b != 0:\n        if p % a == 0 and q % b == 0:\n            x = p // a\n            y = q // b\n            if c * x == r or c * y == r or c * x * y == r:\n                manlo = 2\n    if a != 0:\n        if p % a == 0:\n            x = p // a\n            y = q - b\n            if c + y == r or c * x == r or (c + y) * x == r or (c * x + y == r):\n                manlo = 2\n    if b != 0:\n        if q % b == 0:\n            x = q // b\n            y = p - a\n            if c + y == r or c * x == r or (c + y) * x == r or (c * x + y == r):\n                manlo = 2\n    return manlo\nfor _ in range(int(input())):\n    given = list(map(int, input().split()))\n    req = list(map(int, input().split()))\n    i = 0\n    l = 3\n    while i < l:\n        if given[i] == req[i]:\n            given.pop(i)\n            req.pop(i)\n            l -= 1\n        else:\n            i += 1\n    if len(given) < 2:\n        print(len(given))\n    elif len(given) == 2:\n        manlo = 2\n        if given[1] - req[1] == given[0] - req[0]:\n            manlo = 1\n        if manlo == 2 and given[1] != 0 and (given[0] != 0):\n            if req[0] % given[0] == 0 and req[1] % given[1] == 0 and (req[0] / given[0] == req[1] / given[1]):\n                manlo = 1\n        print(manlo)\n    else:\n        manlo = 3\n        if given[1] - req[1] == given[0] - req[0] and given[1] - req[1] == given[2] - req[2]:\n            manlo = 1\n        elif given[1] != 0 and given[0] != 0 and (given[2] != 0) and (req[0] % given[0] == 0) and (req[1] % given[1] == 0) and (req[2] % given[2] == 0) and (req[0] / given[0] == req[1] / given[1]) and (req[0] / given[0] == req[2] / given[2]):\n            manlo = 1\n        else:\n            manlo = min(tupp(given[0], req[0], given[1], req[1], given[2], req[2]), manlo)\n            manlo = min(tupp(given[1], req[1], given[2], req[2], given[0], req[0]), manlo)\n            manlo = min(tupp(given[2], req[2], given[0], req[0], given[1], req[1]), manlo)\n        print(manlo)", "import math\nall_fact = set()\n\ndef factorize(num):\n    numr = int(math.sqrt(abs(num)))\n    for i in range(1, numr + 1):\n        if num % i == 0:\n            all_fact.add(i)\n            all_fact.add(-i)\n            all_fact.add(num // i)\n            all_fact.add(-num // i)\n\ndef pro_sum(a, b, c, p, q, r):\n    for i in all_fact:\n        dif1 = 0\n        if p % i != 0:\n            dif1 = p - a\n        else:\n            dif1 = p // i - a\n        if q == b or q - dif1 == b or (q % i == 0 and q // i == b) or (q % i == 0 and q // i - dif1 == b):\n            if r == c or r - dif1 == c or (r % i == 0 and r // i == c) or (r % i == 0 and r // i - dif1 == c):\n                return 2\n    return 3\n\ndef sum_sum_pro(a, b, c, p, q, r):\n    d = p - a\n    if b != 0 and q % b == 0:\n        k = q // b\n        if c * k == r or c * k + d == r or c + d == r or ((c + d) * k == r):\n            return 2\n    if b != 0 and (q - d) % b == 0:\n        k = (q - d) // b\n        if c * k == r or c * k + d == r or c + d == r:\n            return 2\n    return 3\n\ndef sum_pro(a, b, c, p, q, r):\n    a1 = a - b\n    dif1 = p - q\n    if a1 != 0:\n        if dif1 % a1 == 0:\n            k = dif1 // a1\n            d = p - k * a\n            if (c * k + d == r or c + d == r or c * k == r) and (b * k + d == q or b + d == q or b * k == q):\n                return 2\n            d = q - k * b\n            if (c * k + d == r or c + d == r or c * k == r) and (a * k + d == p or a + d == p or a * k == p):\n                return 2\n    return 3\n\ndef this_one_for_SSR():\n    (a, b, c) = map(int, input().split(' '))\n    (p, q, r) = map(int, input().split(' '))\n    if a == p and b == q and (c == r):\n        print('0')\n        return\n    dif1 = p - a\n    dif2 = q - b\n    dif3 = r - c\n    if (p - a == 0 or p - a == dif1) and (q - b == 0 or q - b == dif1) and (r - c == 0 or r - c == dif1):\n        print('1')\n        return\n    elif (p - a == 0 or p - a == dif2) and (q - b == 0 or q - b == dif2) and (r - c == 0 or r - c == dif2):\n        print('1')\n        return\n    elif (p - a == 0 or p - a == dif3) and (q - b == 0 or q - b == dif3) and (r - c == 0 or r - c == dif3):\n        print('1')\n        return\n    if (b == q or (a != 0 and b != 0 and (q % b == 0) and (p % a == 0) and (p // a == q // b))) and (r == c or (a != 0 and c != 0 and (r % c == 0) and (p % a == 0) and (p // a == r // c))):\n        print('1')\n        return\n    elif (a == p or (a != 0 and b != 0 and (q % b == 0) and (p % a == 0) and (p // a == q // b))) and (r == c or (b != 0 and c != 0 and (r % c == 0) and (q % b == 0) and (q // b == r // c))):\n        print('1')\n        return\n    elif (b == q or (c != 0 and b != 0 and (q % b == 0) and (r % c == 0) and (r // c == q // b))) and (r == c or (a != 0 and c != 0 and (r % c == 0) and (p % a == 0) and (p // a == r // c))):\n        print('1')\n        return\n    if dif1 == dif2 or dif2 == dif3 or dif1 == dif3 or (dif1 + dif2 == dif3) or (dif2 + dif3 == dif1) or (dif1 + dif3 == dif2) or (dif1 == 0) or (dif2 == 0) or (dif3 == 0):\n        print('2')\n        return\n    if a != 0 and b != 0 and (c != 0) and (p % a == 0) and (q % b == 0) and (r % c == 0):\n        x = p / a\n        y = q / b\n        z = r / c\n        if x * y == z or z * x == y or y * z == x:\n            print('2')\n            return\n    all_fact.clear()\n    factorize(p)\n    factorize(q)\n    factorize(r)\n    mini = 3\n    mini = min(mini, pro_sum(a, b, c, p, q, r))\n    mini = min(mini, pro_sum(a, c, b, p, r, q))\n    mini = min(mini, sum_pro(a, b, c, p, q, r))\n    mini = min(mini, sum_pro(a, c, b, p, r, q))\n    mini = min(mini, sum_sum_pro(a, b, c, p, q, r))\n    mini = min(mini, sum_sum_pro(a, c, b, p, r, q))\n    mini = min(mini, pro_sum(b, a, c, q, p, r))\n    mini = min(mini, pro_sum(b, c, a, q, r, p))\n    mini = min(mini, sum_pro(b, c, a, q, r, p))\n    mini = min(mini, sum_pro(b, a, c, q, p, r))\n    mini = min(mini, sum_sum_pro(b, c, a, q, r, p))\n    mini = min(mini, sum_sum_pro(b, a, c, q, p, r))\n    mini = min(mini, pro_sum(c, a, b, r, p, q))\n    mini = min(mini, pro_sum(c, b, a, r, q, p))\n    mini = min(mini, sum_pro(c, a, b, r, p, q))\n    mini = min(mini, sum_pro(c, b, a, r, q, p))\n    mini = min(mini, sum_sum_pro(c, a, b, r, p, q))\n    mini = min(mini, sum_sum_pro(c, b, a, r, q, p))\n    print(mini)\n    return\nt = int(input())\nwhile t > 0:\n    t -= 1\n    this_one_for_SSR()", "def conversions(a, p, b, q, c, r):\n    val = 3\n    if a != b:\n        if (p - q) % (a - b) == 0:\n            x = (p - q) // (a - b)\n            y = p - a * x\n            if x == 1 or y == 0 or c + y == r or (c * x == r) or (c * x + y == r):\n                val = 2\n    if p != q:\n        if (a * q - b * p) % (p - q) == 0:\n            x = (a * q - b * p) // (p - q)\n            if a + x != 0:\n                if p % (a + x) == 0:\n                    y = p // (a + x)\n                    if x == 0 or y == 1 or c + x == r or (c * y == r) or ((c + x) * y == r):\n                        val = 2\n    if p == q and a == b:\n        val = 2\n    if c + (p - a) == r or c + (q - b) == r or c + (p - a) + (q - b) == r:\n        val = 2\n    if a != 0 and b != 0:\n        if p % a == 0 and q % b == 0:\n            x = p // a\n            y = q // b\n            if c * x == r or c * y == r or c * x * y == r:\n                val = 2\n    if a != 0:\n        if p % a == 0:\n            x = p // a\n            y = q - b\n            if c + y == r or c * x == r or (c + y) * x == r or (c * x + y == r):\n                val = 2\n    if b != 0:\n        if q % b == 0:\n            x = q // b\n            y = p - a\n            if c + y == r or c * x == r or (c + y) * x == r or (c * x + y == r):\n                val = 2\n    return val\nfor _ in range(int(input())):\n    given = list(map(int, input().split()))\n    req = list(map(int, input().split()))\n    i = 0\n    l = 3\n    while i < l:\n        if given[i] == req[i]:\n            given.pop(i)\n            req.pop(i)\n            l -= 1\n        else:\n            i += 1\n    if len(given) < 2:\n        print(len(given))\n    elif len(given) == 2:\n        val = 2\n        if given[1] - req[1] == given[0] - req[0]:\n            val = 1\n        if val == 2 and given[1] != 0 and (given[0] != 0):\n            if req[0] % given[0] == 0 and req[1] % given[1] == 0 and (req[0] / given[0] == req[1] / given[1]):\n                val = 1\n        print(val)\n    else:\n        val = 3\n        if given[1] - req[1] == given[0] - req[0] and given[1] - req[1] == given[2] - req[2]:\n            val = 1\n        elif given[1] != 0 and given[0] != 0 and (given[2] != 0) and (req[0] % given[0] == 0) and (req[1] % given[1] == 0) and (req[2] % given[2] == 0) and (req[0] / given[0] == req[1] / given[1]) and (req[0] / given[0] == req[2] / given[2]):\n            val = 1\n        else:\n            val = min(conversions(given[0], req[0], given[1], req[1], given[2], req[2]), val)\n            val = min(conversions(given[1], req[1], given[2], req[2], given[0], req[0]), val)\n            val = min(conversions(given[2], req[2], given[0], req[0], given[1], req[1]), val)\n        print(val)", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    (p, q, r) = map(int, input().split())\n    x = p - a\n    y = q - b\n    z = r - c\n    if x == 0 and y == 0 and (z == 0):\n        print('0')\n    elif p == 0 and q == 0 and (r == 0):\n        print('1')\n    elif x == 0 and y == 0 and (z != 0) or (y == 0 and z == 0 and (x != 0)) or (z == 0 and x == 0 and (y != 0)):\n        print('1')\n    elif x == 0:\n        if y == z:\n            print('1')\n        elif b != 0 and c != 0 and (abs(q) >= abs(b)) and (abs(r) >= abs(c)) and (q % b == 0) and (r % c == 0) and (q // b == r // c):\n            print('1')\n        elif r == 0 and q == 0:\n            print('1')\n        else:\n            print('2')\n    elif y == 0:\n        if x == z:\n            print('1')\n        elif a != 0 and c != 0 and (abs(p) >= abs(a)) and (abs(r) >= abs(c)) and (p % a == 0) and (r % c == 0) and (p // a == r // c):\n            print('1')\n        elif p == 0 and r == 0:\n            print('1')\n        else:\n            print('2')\n    elif z == 0:\n        if x == y:\n            print('1')\n        elif b != 0 and a != 0 and (abs(p) >= abs(a)) and (abs(q) >= abs(b)) and (p % a == 0) and (q % b == 0) and (q // b == p // a):\n            print('1')\n        elif p == 0 and q == 0:\n            print('1')\n        else:\n            print('2')\n    elif x == y and y == z and (z == x):\n        print('1')\n    elif a != 0 and b != 0 and (c != 0) and (abs(p) >= abs(a)) and (abs(q) >= abs(b)) and (abs(r) >= abs(c)) and (p % a == 0) and (q % b == 0) and (r % c == 0) and (p // a == q // b) and (q // b == r // c) and (r // c == p // a):\n        print('1')\n    elif x == y or y == z or z == x:\n        print('2')\n    elif p == 0 and q == 0 and (r != 0) or (q == 0 and r == 0 and (p != 0)) or (r == 0 and p == 0 and (q != 0)):\n        print('2')\n    elif p == 0 and (q == r - c or r == q - b) or (q == 0 and (p == r - c or r == p - a)) or (r == 0 and (q == p - a or p == q - b)):\n        print('2')\n    elif a != 0 and b != 0 and (abs(q) >= abs(b)) and (abs(p) >= abs(a)) and (p % a == 0) and (q % b == 0) and (p // a == q // b) or (b != 0 and c != 0 and (abs(r) >= abs(c)) and (abs(q) >= abs(b)) and (r % c == 0) and (q % b == 0) and (r // c == q // b)) or (a != 0 and c != 0 and (abs(p) >= abs(a)) and (abs(r) >= abs(c)) and (p % a == 0) and (r % c == 0) and (p // a == r // c)):\n        print('2')\n    elif a != 0 and b != 0 and (c != 0) and (abs(q) >= abs(b)) and (abs(p) >= abs(a)) and (abs(r) >= abs(c)) and (p % a == q % b) and (q % b == r % c) and (r % c == p % a) and (p // a == q // b) and (q // b == r // c) and (r // c == p // a):\n        print('2')\n    elif b - a != 0 and c - b != 0 and (c - a != 0) and ((q - p) // (b - a) == (r - q) // (c - b)) and ((r - q) // (c - b) == (r - p) // (c - a)) and ((r - p) // (c - a) == (q - p) // (b - a)) and ((q - p) // (b - a) != 0) and (p // ((q - p) // (b - a)) - a == q // ((q - p) // (b - a)) - b) and (q // ((q - p) // (b - a)) - b == r // ((q - p) // (b - a)) - c) and (r // ((q - p) // (b - a)) - c == p // ((q - p) // (b - a)) - a):\n        print('2')\n    elif p == q and q == r and (p == r):\n        print('2')\n    elif c != 0 and r % c == 0 and ((b + x) * (r // c) == q or (a + y) * (r // c) == p) or (b != 0 and q % b == 0 and ((a + z) * (q // b) == p or (c + x) * (q // b) == r)) or (a != 0 and p % a == 0 and ((b + z) * (p // a) == q or (c + y) * (p // a) == r)):\n        print('2')\n    elif c != 0 and r % c == 0 and (b * (r // c) + x == q or a * (r // c) + y == p) or (b != 0 and q % b == 0 and (a * (q // b) + z == p or c * (q // b) + x == r)) or (a != 0 and p % a == 0 and (b * (p // a) + z == q or c * (p // a) + y == r)):\n        print('2')\n    elif a != 0 and b != 0 and (c != 0) and (p % a == q % b) and (q % b == r % c) and (r % c == p % a) and (p // a == 1 and q // b == r // c or (q // b == 1 and p // a == r // c) or (r // c == 1 and p // a == q // b)):\n        print('2')\n    elif x + y == z or x + z == y or y + z == x:\n        print('2')\n    elif a != 0 and b != 0 and (c != 0) and (abs(p) >= abs(a)) and (abs(q) >= abs(b)) and (abs(r) >= abs(c)) and (p % a == 0) and (q % b == 0) and (r % c == 0) and (p // a == q // b * (r // c) or q // b == p // a * (r // c) or r // c == p // a * (q // b)):\n        print('2')\n    elif b != 0 and q % b == 0 and (abs(q) >= abs(b)) and (q // b != 0) and (p % (q // b) == 0) and (r % (q // b) == 0) and (p // (q // b) - a == r // (q // b) - c):\n        print('2')\n    elif a != 0 and p % a == 0 and (abs(p) >= abs(a)) and (p // a != 0) and (q % (p // a) == 0) and (r % (p // a) == 0) and (q // (p // a) - b == r // (p // a) - c):\n        print('2')\n    elif c != 0 and r % c == 0 and (abs(r) >= abs(c)) and (r // c != 0) and (p % (r // c) == 0) and (q % (r // c) == 0) and (p // (r // c) - a == q // (r // c) - b):\n        print('2')\n    elif a != 0 and c != 0 and ((p - y) % a == 0) and ((r - y) % c == 0) and ((p - y) // a == (r - y) // c):\n        print('2')\n    elif b != 0 and c != 0 and ((q - x) % b == 0) and ((r - x) % c == 0) and ((q - x) // b == (r - x) // c):\n        print('2')\n    elif a != 0 and b != 0 and ((p - z) % a == 0) and ((q - z) % b == 0) and ((p - z) // a == (q - z) // b):\n        print('2')\n    elif p == 0 and q == r or (q == 0 and p == r) or (r == 0 and p == q):\n        print('2')\n    elif c != 0 and r % c == 0 and (q - b * (r // c) == p - a * (r // c)) or (b != 0 and q % b == 0 and (r - c * (q // b) == p - a * (q // b))) or (a != 0 and p % a == 0 and (q - b * (p // a) == r - c * (p // a))):\n        print('2')\n    else:\n        if b - a != 0 and (q - p) % (b - a) == 0:\n            y = (q - p) // (b - a)\n            if (q - p) // (b - a) != 0 and p % y == 0:\n                x = p // ((q - p) // (b - a)) - a\n                if a + x != 0 and p % (a + x) == 0 and (b + x != 0) and (q % (b + x) == 0) and (c + x != 0) and (r % (c + x) == 0) and (p // (a + x) == 1):\n                    if q // (b + x) == r // (c + x):\n                        print('2')\n                        continue\n                elif a + x != 0 and p % (a + x) == 0 and (b + x != 0) and (q % (b + x) == 0) and (c + x != 0) and (r % (c + x) == 0) and (q // (b + x) == 1):\n                    if p // (a + x) == r // (c + x):\n                        print('2')\n                        continue\n                elif a + x != 0 and p % (a + x) == 0 and (b + x != 0) and (q % (b + x) == 0) and (c + x != 0) and (r % (c + x) == 0) and (r // (c + x) == 1):\n                    if p // (a + x) == q // (b + x):\n                        print('2')\n                        continue\n                elif a + x != 0 and b + x != 0 and (c + x != 0) and (p % (a + x) == 0) and (q % (b + x) == 0) and (r % (c + x) == 0) and (p // (a + x) == q // (b + x)) and (q // (b + x) == r // (c + x)) and (p // (a + x) == r // (c + x)):\n                    print('2')\n                    continue\n        if c - b != 0 and (r - q) % (c - b) == 0:\n            y = (r - q) // (c - b)\n            if (r - q) // (c - b) != 0 and q % y == 0:\n                x = q // ((r - q) // (c - b)) - b\n                if a + x != 0 and p % (a + x) == 0 and (b + x != 0) and (q % (b + x) == 0) and (c + x != 0) and (r % (c + x) == 0) and (p // (a + x) == 1):\n                    if q // (b + x) == r // (c + x):\n                        print('2')\n                        continue\n                elif a + x != 0 and p % (a + x) == 0 and (b + x != 0) and (q % (b + x) == 0) and (c + x != 0) and (r % (c + x) == 0) and (q // (b + x) == 1):\n                    if p // (a + x) == r // (c + x):\n                        print('2')\n                        continue\n                elif a + x != 0 and p % (a + x) == 0 and (b + x != 0) and (q % (b + x) == 0) and (c + x != 0) and (r % (c + x) == 0) and (r // (c + x) == 1):\n                    if p // (a + x) == q // (b + x):\n                        print('2')\n                        continue\n                elif a + x != 0 and p % (a + x) == 0 and (b + x != 0) and (q % (b + x) == 0) and (c + x != 0) and (r % (c + x) == 0) and (p // (a + x) == q // (b + x)) and (q // (b + x) == r // (c + x)) and (p // (a + x) == r // (c + x)):\n                    print('2')\n                    continue\n        if c - a != 0 and (r - p) % (c - a) == 0:\n            y = (r - p) // (c - a)\n            if (r - p) // (c - a) != 0 and r % y == 0:\n                x = r // ((r - p) // (c - a)) - c\n                if a + x != 0 and p % (a + x) == 0 and (b + x != 0) and (q % (b + x) == 0) and (c + x != 0) and (r % (c + x) == 0) and (p // (a + x) == 1):\n                    if q // (b + x) == r // (c + x):\n                        print('2')\n                        continue\n                elif a + x != 0 and p % (a + x) == 0 and (b + x != 0) and (q % (b + x) == 0) and (c + x != 0) and (r % (c + x) == 0) and (q // (b + x) == 1):\n                    if p // (a + x) == r // (c + x):\n                        print('2')\n                        continue\n                elif a + x != 0 and p % (a + x) == 0 and (b + x != 0) and (q % (b + x) == 0) and (c + x != 0) and (r % (c + x) == 0) and (r // (c + x) == 1):\n                    if p // (a + x) == q // (b + x):\n                        print('2')\n                        continue\n                elif a + x != 0 and p % (a + x) == 0 and (b + x != 0) and (q % (b + x) == 0) and (c + x != 0) and (r % (c + x) == 0) and (p // (a + x) == q // (b + x)) and (q // (b + x) == r // (c + x)) and (p // (a + x) == r // (c + x)):\n                    print('2')\n                    continue\n                else:\n                    print('3')\n                    continue\n            else:\n                print('3')\n        else:\n            print('3')", "def case_0(a1, b1, c1, a2, b2, c2):\n    if a1 == a2 and b1 == b2 and (c1 == c2):\n        return True\n    return False\n\ndef case_1(a1, b1, c1, a2, b2, c2):\n    if a2 == a1 and b2 == b1 or (c2 == c1 and b2 == b1) or (a2 == a1 and c2 == c1):\n        return True\n    elif a2 == 0 and b2 == 0 and (c2 == 0):\n        return True\n    elif a2 - a1 == b2 - b1 == c2 - c1:\n        return True\n    elif (b1 != 0 and b2 % b1 == 0) and (c1 != 0 and c2 % c1 == 0) and (a1 != 0 and a2 % a1 == 0) and (b2 // b1 == c2 // c1 == a2 // a1):\n        return True\n    elif a2 == a1 and (b2 - b1 == c2 - c1 or ((b1 != 0 and b2 % b1 == 0) and (c1 != 0 and c2 % c1 == 0) and (b2 * c1 == c2 * b1))):\n        return True\n    elif b2 == b1 and (a2 - a1 == c2 - c1 or ((a1 != 0 and a2 % a1 == 0) and (c1 != 0 and c2 % c1 == 0) and (a2 * c1 == c2 * a1))):\n        return True\n    elif c2 == c1 and (b2 - b1 == a2 - a1 or ((b1 != 0 and b2 % b1 == 0) and (a1 != 0 and a2 % a1 == 0) and (b2 * a1 == a2 * b1))):\n        return True\n    return False\n\ndef case_2(a1, b1, c1, a2, b2, c2):\n    if a1 == a2 or b1 == b2 or c1 == c2:\n        return True\n    if a2 - a1 == b2 - b1 or b2 - b1 == c2 - c1 or c2 - c1 == a2 - a1:\n        return True\n    if (b1 != 0 and b2 % b1 == 0) and (c1 != 0 and c2 % c1 == 0) and (b2 * c1 == c2 * b1) or ((a1 != 0 and a2 % a1 == 0) and (c1 != 0 and c2 % c1 == 0) and (a2 * c1 == c2 * a1)) or ((b1 != 0 and b2 % b1 == 0) and (a1 != 0 and a2 % a1 == 0) and (b2 * a1 == a2 * b1)):\n        return True\n    if a2 == b2 == 0 or a2 == c2 == 0 or b2 == c2 == 0:\n        return True\n    if b1 != 0 and b2 % b1 == 0 and (b2 // b1 != 0) and (a1 != 0) and (a2 % (a1 * (b2 // b1)) == 0):\n        d1 = b2 // b1\n        d2 = a2 // (a1 * d1)\n        if c1 * d1 == c2 or c1 * d1 * d2 == c2 or c1 * d2 == c2:\n            return True\n    if a1 != 0 and a2 % a1 == 0 and (a2 // a1 != 0) and (b1 != 0) and (b2 % (b1 * (a2 // a1)) == 0):\n        d1 = a2 // a1\n        d2 = b2 // (b1 * d1)\n        if c1 * d1 == c2 or c1 * d1 * d2 == c2 or c1 * d2 == c2:\n            return True\n    if c1 != 0 and c2 % c1 == 0 and (c2 // c1 != 0) and (a1 != 0) and (a2 % (a1 * (c2 // c1)) == 0):\n        d1 = c2 // c1\n        d2 = a2 // (a1 * d1)\n        if b1 * d1 == b2 or c1 * d1 * d2 == b2 or b1 * d2 == b2:\n            return True\n    if a1 != 0 and a2 % a1 == 0 and (a2 // a1 != 0) and (c1 != 0) and (c2 % (c1 * (a2 // a1)) == 0):\n        d1 = a2 // a1\n        d2 = c2 // (c1 * d1)\n        if b1 * d1 == b2 or b1 * d1 * d2 == b2 or b1 * d2 == b2:\n            return True\n    if c1 != 0 and c2 % c1 == 0 and (c2 // c1 != 0) and (b1 != 0) and (b2 % (b1 * (c2 // c1)) == 0):\n        d1 = c2 // c1\n        d2 = b2 // (b1 * d1)\n        if a1 * d1 == a2 or a1 * d1 * d2 == a2 or a1 * d2 == a2:\n            return True\n    if b1 != 0 and b2 % b1 == 0 and (b2 // b1 != 0) and (c1 != 0) and (c2 % (c1 * (b2 // b1)) == 0):\n        d1 = b2 // b1\n        d2 = c2 // (c1 * d1)\n        if a1 * d1 == a2 or a1 * d1 * d2 == a2 or a1 * d2 == a2:\n            return True\n    if a1 + (b2 - b1) + (c2 - c1) == a2:\n        return True\n    if b1 + (a2 - a1) + (c2 - c1) == b2:\n        return True\n    if c1 + (a2 - a1) + (b2 - b1) == c2:\n        return True\n    if b1 != a1 and (b2 - a2) % (b1 - a1) == 0:\n        d2 = (b2 - a2) // (b1 - a1)\n        if d2 != 0 and a2 % d2 == 0:\n            d1 = a2 // d2 - a1\n            if (c1 + d1) * d2 == c2 or c1 * d2 == c2 or c1 + d1 == c2:\n                return True\n    if c1 != a1 and (c2 - a2) % (c1 - a1) == 0:\n        d2 = (c2 - a2) // (c1 - a1)\n        if d2 != 0 and a2 % d2 == 0:\n            d1 = a2 // d2 - a1\n            if (b1 + d1) * d2 == b2 or b1 * d2 == b2 or b1 + d1 == b2:\n                return True\n    if c1 != b1 and (c2 - b2) % (c1 - b1) == 0:\n        d2 = (c2 - b2) // (c1 - b1)\n        if d2 != 0 and b2 % d2 == 0:\n            d1 = b2 // d2 - b1\n            if (a1 + d1) * d2 == a2 or a1 * d2 == a2 or a1 + d1 == a2:\n                return True\n    if a1 + b2 != b1 and a2 % (a1 + b2 - b1) == 0:\n        d1 = b2 - b1\n        d2 = a2 // (a1 + d1)\n        if c1 + d1 == c2 or c1 * d2 == c2:\n            return True\n    if a1 + c2 != c1 and a2 % (a1 + c2 - c1) == 0:\n        d1 = c2 - c1\n        d2 = a2 // (a1 + d1)\n        if b1 + d1 == b2 or b1 * d2 == b2:\n            return True\n    if c1 + b2 != b1 and c2 % (c1 + b2 - b1) == 0:\n        d1 = b2 - b1\n        d2 = c2 // (c1 + d1)\n        if a1 + d1 == a2 or a1 * d2 == a2:\n            return True\n    if c1 + a2 != a1 and c2 % (c1 + a2 - a1) == 0:\n        d1 = a2 - a1\n        d2 = c2 // (c1 + d1)\n        if b1 + d1 == b2 or b1 * d2 == b2:\n            return True\n    if b1 + c2 != c1 and b2 % (b1 + c2 - c1) == 0:\n        d1 = c2 - c1\n        d2 = b2 // (b1 + d1)\n        if a1 + d1 == a2 or a1 * d2 == a2:\n            return True\n    if b1 + a2 != a1 and b2 % (b1 + a2 - a1) == 0:\n        d1 = a2 - a1\n        d2 = b2 // (b1 + d1)\n        if c1 + d1 == c2 or c1 * d2 == c2:\n            return True\n    if b1 != 0 and b2 != 0 and (b2 % b1 == 0) and (a2 % (b2 // b1) == 0):\n        d2 = b2 // b1\n        d1 = a2 * b1 // b2 - a1\n        if c1 * d2 == c2 or c1 + d1 == c2:\n            return True\n    if b1 != 0 and b2 != 0 and (b2 % b1 == 0) and (c2 % (b2 // b1) == 0):\n        d2 = b2 // b1\n        d1 = c2 * b1 // b2 - c1\n        if a1 * d2 == a2 or a1 + d1 == a2:\n            return True\n    if c1 != 0 and c2 != 0 and (c2 % c1 == 0) and (a2 % (c2 // c1) == 0):\n        d2 = c2 // c1\n        d1 = a2 * c1 // c2 - a1\n        if b1 * d2 == b2 or b1 + d1 == b2:\n            return True\n    if c1 != 0 and c2 != 0 and (c2 % c1 == 0) and (b2 % (c2 // c1) == 0):\n        d2 = c2 // c1\n        d1 = b2 * c1 // c2 - b1\n        if a1 * d2 == a2 or a1 + d1 == a2:\n            return True\n    if a1 != 0 and a2 != 0 and (a2 % a1 == 0) and (b2 % (a2 // a1) == 0):\n        d2 = a2 // a1\n        d1 = b2 * a1 // a2 - b1\n        if c1 * d2 == c2 or c1 + d1 == c2:\n            return True\n    if a1 != 0 and a2 != 0 and (a2 % a1 == 0) and (c2 % (a2 // a1) == 0):\n        d2 = a2 // a1\n        d1 = c2 * a1 // a2 - c1\n        if b1 * d2 == b2 or b1 + d1 == b2:\n            return True\n    if b1 != a1 and (b2 - a2) % (b1 - a1) == 0:\n        d1 = (b2 - a2) // (b1 - a1)\n        d2 = a2 - a1 * d1\n        if c1 * d1 + d2 == c2 or c1 + d2 == c2 or c1 * d1 == c2:\n            return True\n    if c1 != a1 and (c2 - a2) % (c1 - a1) == 0:\n        d1 = (c2 - a2) // (c1 - a1)\n        d2 = a2 - a1 * d1\n        if b1 * d1 + d2 == b2 or b1 + d2 == b2 or b1 * d1 == b2:\n            return True\n    if b1 != c1 and (b2 - c2) % (b1 - c1) == 0:\n        d1 = (b2 - c2) // (b1 - c1)\n        d2 = c2 - c1 * d1\n        if a1 * d1 + d2 == a2 or a1 + d2 == a2 or a1 * d1 == a2:\n            return True\n    if a1 != 0 and (a2 - (b2 - b1)) % a1 == 0:\n        d2 = b2 - b1\n        d1 = (a2 - d2) // a1\n        if c1 + d2 == c2 or c1 * d1 == c2:\n            return True\n    if a1 != 0 and (a2 - (c2 - c1)) % a1 == 0:\n        d2 = c2 - c1\n        d1 = (a2 - d2) // a1\n        if b1 + d2 == b2 or b1 * d1 == b2:\n            return True\n    if c1 != 0 and (c2 - (b2 - b1)) % c1 == 0:\n        d2 = b2 - b1\n        d1 = (c2 - d2) // c1\n        if a1 + d2 == a2 or a1 * d1 == a2:\n            return True\n    if c1 != 0 and (c2 - (a2 - a1)) % c1 == 0:\n        d2 = a2 - a1\n        d1 = (c2 - d2) // c1\n        if b1 + d2 == b2 or b1 * d1 == b2:\n            return True\n    if b1 != 0 and (b2 - (a2 - a1)) % b1 == 0:\n        d2 = a2 - a1\n        d1 = (b2 - d2) // b1\n        if c1 + d2 == c2 or c1 * d1 == c2:\n            return True\n    if b1 != 0 and (b2 - (c2 - c1)) % b1 == 0:\n        d2 = c2 - c1\n        d1 = (b2 - d2) // b1\n        if a1 + d2 == a2 or a1 * d1 == a2:\n            return True\n    if b1 != 0 and b2 % b1 == 0:\n        d1 = b2 // b1\n        d2 = a2 - a1 * d1\n        if c1 + d2 == c2 or c1 * d1 == c2:\n            return True\n    if b1 != 0 and b2 % b1 == 0:\n        d1 = b2 // b1\n        d2 = c2 - c1 * d1\n        if a1 + d2 == a2 or a1 * d1 == a2:\n            return True\n    if c1 != 0 and c2 % c1 == 0:\n        d1 = c2 // c1\n        d2 = a2 - a1 * d1\n        if b1 + d2 == b2 or b1 * d1 == b2:\n            return True\n    if c1 != 0 and c2 % c1 == 0:\n        d1 = c2 // c1\n        d2 = b2 - b1 * d1\n        if a1 + d2 == a2 or a1 * d1 == a2:\n            return True\n    if a1 != 0 and a2 % a1 == 0:\n        d1 = a2 // a1\n        d2 = c2 - c1 * d1\n        if b1 + d2 == b2 or b1 * d1 == b2:\n            return True\n    if a1 != 0 and a2 % a1 == 0:\n        d1 = a2 // a1\n        d2 = b2 - b1 * d1\n        if c1 + d2 == c2 or c1 * d1 == c2:\n            return True\n    return False\nT = int(input())\nfor _ in range(T):\n    line = input().split()\n    a1 = int(line[0])\n    b1 = int(line[1])\n    c1 = int(line[2])\n    line = input().split()\n    a2 = int(line[0])\n    b2 = int(line[1])\n    c2 = int(line[2])\n    case0 = case_0(a1, b1, c1, a2, b2, c2)\n    case1 = False\n    case2 = False\n    if not case0:\n        case1 = case_1(a1, b1, c1, a2, b2, c2)\n    if not case1:\n        case2 = case_2(a1, b1, c1, a2, b2, c2)\n    if case0:\n        print(0)\n    elif case1:\n        print(1)\n    elif case2:\n        print(2)\n    else:\n        print(3)", "def a1(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2):\n    if p + p1 == a and q == b and (r == c):\n        return 1\n    return -1\n\ndef a2(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2):\n    if p == a and q + q1 == b and (r == c):\n        return 1\n    return -1\n\ndef a3(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2):\n    if p == a and q == b and (r + r1 == c):\n        return 1\n    return -1\n\ndef a4(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2):\n    if p1 == q1 and p + p1 == a and (q + q1 == b) and (r == c):\n        return 1\n    return -1\n\ndef a5(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2):\n    if q1 == r1 and p == a and (q + q1 == b) and (r + r1 == c):\n        return 1\n    return -1\n\ndef a6(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2):\n    if p1 == r1 and p + p1 == a and (q == b) and (r + r1 == c):\n        return 1\n    return -1\n\ndef a7(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2):\n    if (q1 == r1 and p1 == q1) and p + p1 == a and (q + q1 == b) and (r + r1 == c):\n        return 1\n    return -1\n\ndef a8(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2):\n    if p * p2 == a and q == b and (r == c):\n        return 1\n    return -1\n\ndef a9(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2):\n    if p == a and q * q2 == b and (r == c):\n        return 1\n    return -1\n\ndef a10(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2):\n    if p == a and q == b and (r * r2 == c):\n        return 1\n    return -1\n\ndef a11(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2):\n    if p2 == q2 and p * p2 == a and (q * q2 == b) and (r == c):\n        return 1\n    return -1\n\ndef a12(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2):\n    if q2 == r2 and p == a and (q * q2 == b) and (r * r2 == c):\n        return 1\n    return -1\n\ndef a13(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2):\n    if p2 == r2 and p * p2 == a and (q == b) and (r * r2 == c):\n        return 1\n    return -1\n\ndef a14(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2):\n    if (q2 == r2 and p2 == q2) and p * p2 == a and (q * q2 == b) and (r * r2 == c):\n        return 1\n    return -1\n\ndef b1(p, q, r, a, b, c):\n    if q == b or r == c or p == a:\n        return 2\n    return -1\n\ndef b2(p, q, r, a, b, c):\n    if b - q == c - r:\n        return 2\n    return -1\n\ndef b3(p, q, r, a, b, c):\n    if q != 0 and r != 0 and (b % q == 0) and (c % r == 0) and (b // q == c // r):\n        return 2\n    return -1\n\ndef b4(p, q, r, a, b, c):\n    if a - p == c - r:\n        return 2\n    return -1\n\ndef b5(p, q, r, a, b, c):\n    if p != 0 and r != 0 and (a % p == 0) and (c % r == 0) and (a // p == c // r):\n        return 2\n    return -1\n\ndef b6(p, q, r, a, b, c):\n    if b - q == a - p:\n        return 2\n    return -1\n\ndef b7(p, q, r, a, b, c):\n    if p != 0 and q != 0 and (a % p == 0) and (b % q == 0) and (a // p == b // q):\n        return 2\n    return -1\n\ndef b8(p, q, r, a, b, c):\n    if a - p + (c - r) == b - q:\n        return 2\n    return -1\n\ndef b9(p, q, r, a, b, c):\n    if b - q + (c - r) == a - p:\n        return 2\n    return -1\n\ndef b10(p, q, r, a, b, c):\n    if r != 0 and c % r == 0 and ((q + a - p) * c // r == b):\n        return 2\n    return -1\n\ndef b11(p, q, r, a, b, c):\n    if r != 0 and c % r == 0 and ((p + b - q) * c // r == a):\n        return 2\n    return -1\n\ndef b12(p, q, r, a, b, c):\n    if r != 0 and c % r == 0 and ((p + b - q) * c // r == a):\n        return 2\n    return -1\n\ndef b13(p, q, r, a, b, c):\n    if r != 0 and c != 0 and (c % r == 0) and (a * r % c == 0) and (b * r % c == 0) and (a * r // c - p == b * r // c - q):\n        return 2\n    return -1\n\ndef b14(p, q, r, a, b, c):\n    if b - q + (a - p) == c - r:\n        return 2\n    return -1\n\ndef b15(p, q, r, a, b, c):\n    if p != 0 and a % p == 0 and ((q + c - r) * a // p == b):\n        return 2\n    return -1\n\ndef b16(p, q, r, a, b, c):\n    if p != 0 and a % p == 0 and ((r + b - q) * a // p == c):\n        return 2\n    return -1\n\ndef b17(p, q, r, a, b, c):\n    if p != 0 and a != 0 and (a % p == 0) and (b * p % a == 0) and (c * p % a == 0) and (b * p // a - q == c * p // a - r):\n        return 2\n    return -1\n\ndef b18(p, q, r, a, b, c):\n    if q != 0 and b % q == 0 and ((p + c - r) * b // q == a):\n        return 2\n    return -1\n\ndef b19(p, q, r, a, b, c):\n    if q != 0 and b % q == 0 and ((r + a - p) * b // q == c):\n        return 2\n    return -1\n\ndef b20(p, q, r, a, b, c):\n    if q != 0 and b != 0 and (b % q == 0) and (a * q % b == 0) and (c * q % b == 0) and (a * q // b - p == c * q // b - r):\n        return 2\n    return -1\n\ndef b21(p, q, r, a, b, c):\n    if p + c - r != 0 and q + c - r != 0 and (a % (p + c - r) == 0) and (b % (q + c - r) == 0) and (a // (p + c - r) == b // (q + c - r)):\n        return 2\n    return -1\n\ndef b22(p, q, r, a, b, c):\n    if q + a - p != 0 and r + a - p != 0 and (b % (q + a - p) == 0) and (c % (r + a - p) == 0) and (b // (q + a - p) == c // (r + a - p)):\n        return 2\n    return -1\n\ndef b23(p, q, r, a, b, c):\n    if p + b - q != 0 and r + b - q != 0 and (a % (p + b - q) == 0) and (c % (r + b - q) == 0) and (a // (p + b - q) == c // (r + b - q)):\n        return 2\n    return -1\n\ndef b24(p, q, r, a, b, c):\n    if p != 0 and a % p == 0 and (q * a // p + (c - r) == b):\n        return 2\n    return -1\n\ndef b25(p, q, r, a, b, c):\n    if q != 0 and b % q == 0 and (p * b // q + (c - r) == a):\n        return 2\n    return -1\n\ndef b26(p, q, r, a, b, c):\n    if p != 0 and q != 0 and ((a - c + r) % p == 0) and ((b - c + r) % q == 0) and ((a - c + r) // p == (b - c + r) // q):\n        return 2\n    return -1\n\ndef b27(p, q, r, a, b, c):\n    if p != 0 and r != 0 and (a % p == 0) and (c % r == 0) and (q * a * c // (p * r) == b):\n        return 2\n    return -1\n\ndef b28(p, q, r, a, b, c):\n    if q != 0 and r != 0 and (b % q == 0) and (c % r == 0) and (p * b * c // (q * r) == a):\n        return 2\n    return -1\n\ndef b29(p, q, r, a, b, c):\n    if p != 0 and q != 0 and (r != 0) and (c != 0) and (c % r == 0) and (a % p == 0) and (b % q == 0) and (a // p == b // q):\n        return 2\n    return -1\n\ndef b30(p, q, r, a, b, c):\n    if r != 0 and c % r == 0 and (q * c // r + (a - p) == b):\n        return 2\n    return -1\n\ndef b31(p, q, r, a, b, c):\n    if q != 0 and b % q == 0 and (r * b // q + (a - p) == c):\n        return 2\n    return -1\n\ndef b32(p, q, r, a, b, c):\n    if q != 0 and r != 0 and ((b - a + p) % q == 0) and ((c - a + p) % r == 0) and ((b - a + p) // q == (c - a + p) // r):\n        return 2\n    return -1\n\ndef b33(p, q, r, a, b, c):\n    if p != 0 and q != 0 and (a % p == 0) and (b % q == 0) and (r * b * a // (p * q) == c):\n        return 2\n    return -1\n\ndef b34(p, q, r, a, b, c):\n    if p != 0 and q != 0 and (r != 0) and (a != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0) and (b // q == c // r):\n        return 2\n    return -1\n\ndef b35(p, q, r, a, b, c):\n    if r != 0 and c % r == 0 and (p * c // r + (b - q) == a):\n        return 2\n    return -1\n\ndef b36(p, q, r, a, b, c):\n    if p != 0 and a % p == 0 and (r * a // p + (b - q) == c):\n        return 2\n    return -1\n\ndef b37(p, q, r, a, b, c):\n    if p != 0 and r != 0 and ((a - b + q) % p == 0) and ((c - b + q) % r == 0) and ((a - b + q) // p == (c - b + q) // r):\n        return 2\n    return -1\n\ndef b38(p, q, r, a, b, c):\n    if p != 0 and q != 0 and (r != 0) and (b != 0) and (b % q == 0) and (a % p == 0) and (c % r == 0) and (a // p == c // r):\n        return 2\n    return -1\n\ndef b39(p, q, r, a, b, c):\n    if r != 0 and c % r == 0 and (a - p * c // r == b - q * c // r):\n        return 2\n    return -1\n\ndef b40(p, q, r, a, b, c):\n    if p != 0 and a % p == 0 and (b - q * a // p == c - r * a // p):\n        return 2\n    return -1\n\ndef b41(p, q, r, a, b, c):\n    if q != 0 and b % q == 0 and (a - p * b // q == c - r * b // q):\n        return 2\n    return -1\n\ndef b42(p, q, r, a, b, c):\n    if p - q != 0 and q - r != 0 and ((a - b) % (p - q) == 0) and ((b - c) % (q - r) == 0) and ((a - b) // (p - q) == (b - c) // (q - r)):\n        t = (a - b) // (p - q)\n        if a - p * t == b - q * t and b - q * t == c - r * t:\n            return 2\n    return -1\n\ndef b43(p, q, r, a, b, c):\n    if a - b != 0 and b - c != 0 and (p - q != 0) and (q - r != 0) and ((a - b) % (p - q) == 0) and ((b - c) % (q - r) == 0) and ((a - b) // (p - q) == (b - c) / (q - r)):\n        t = (a - b) / (p - q)\n        if a % t == 0 and b % t == 0 and (c % t == 0) and (a // t - p == b // t - q) and (b // t - q == c // t - r):\n            return 2\n    return -1\nt = int(input())\nfor _ in range(t):\n    (p, q, r) = map(int, input().split())\n    (a, b, c) = map(int, input().split())\n    ans = -1\n    if p == a and q == b and (r == c):\n        ans = 0\n    else:\n        if ans == -1:\n            p1 = a - p\n            q1 = b - q\n            r1 = c - r\n            p2 = 0\n            q2 = 0\n            r2 = 0\n            if p != 0 and a % p == 0:\n                p2 = a // p\n            if q != 0 and b % q == 0:\n                q2 = b // q\n            if r != 0 and c % r == 0:\n                r2 = c // r\n            if ans == -1:\n                ans = a1(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2)\n            if ans == -1:\n                ans = a2(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2)\n            if ans == -1:\n                ans = a3(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2)\n            if ans == -1:\n                ans = a4(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2)\n            if ans == -1:\n                ans = a5(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2)\n            if ans == -1:\n                ans = a6(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2)\n            if ans == -1:\n                ans = a7(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2)\n            if ans == -1:\n                ans = a8(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2)\n            if ans == -1:\n                ans = a9(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2)\n            if ans == -1:\n                ans = a10(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2)\n            if ans == -1:\n                ans = a11(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2)\n            if ans == -1:\n                ans = a12(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2)\n            if ans == -1:\n                ans = a13(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2)\n            if ans == -1:\n                ans = a14(p, q, r, a, b, c, p1, q1, r1, p2, q2, r2)\n            if ans == -1:\n                ans = b1(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b2(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b3(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b4(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b5(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b6(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b7(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b8(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b9(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b10(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b11(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b12(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b13(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b14(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b15(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b16(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b17(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b18(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b19(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b20(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b21(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b22(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b23(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b24(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b25(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b26(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b27(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b28(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b29(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b30(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b31(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b32(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b33(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b34(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b35(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b36(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b37(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b38(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b39(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b40(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b41(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b42(p, q, r, a, b, c)\n            if ans == -1:\n                ans = b43(p, q, r, a, b, c)\n        if ans == -1:\n            ans = 3\n    print(ans)", "import math\n\ndef is_valid_integers(*values):\n    infinity = float('inf')\n    for val in values:\n        if val == infinity:\n            return False\n        elif math.ceil(val) != math.floor(val):\n            return False\n    return True\n\ndef get_int_or_infinity(val):\n    if is_valid_integers(val):\n        return int(val)\n    return float('inf')\nt = int(input())\n\ndef is_zero_step_possible(p, q, r, a, b, c):\n    if a == p and q == b and (c == r):\n        return True\n    return False\n\ndef check_for_possible_one_step(p, q, r, a, b, c):\n    first_array = [(p, q, r), (q, r, p), (r, p, q), (q, p, r), (p, r, q), (r, q, p)]\n    second_array = [(a, b, c), (b, c, a), (c, a, b), (b, a, c), (a, c, b), (c, b, a)]\n    for i in range(0, 6):\n        first = first_array[i]\n        second = second_array[i]\n        if is_one_step_possible(*first, *second):\n            return True\n    return False\n\ndef is_one_step_possible(p, q, r, a, b, c):\n    d1 = a - p\n    d2 = b - q\n    d3 = c - r\n    if d1 == d2 and d2 == d3:\n        return True\n    if d1 == d2 and d3 == 0:\n        return True\n    if d1 == d3 and d2 == 0:\n        return True\n    if d2 == d3 and d1 == 0:\n        return True\n    if d1 == d2 and d1 == 0 and d3:\n        return True\n    if d2 == d3 and d2 == 0 and d1:\n        return True\n    if d1 == d3 and d1 == 0 and d2:\n        return True\n    try:\n        m1 = get_int_or_infinity(a / p)\n    except:\n        m1 = float('inf')\n    try:\n        m2 = get_int_or_infinity(b / q)\n    except:\n        m2 = float('inf')\n    try:\n        m3 = get_int_or_infinity(c / r)\n    except:\n        m3 = float('inf')\n    if is_valid_integers(m1, m2, m3):\n        if m1 == m2 and m2 == m3:\n            return True\n        if m1 == m2 and m3 == 1:\n            return True\n        if m1 == m3 and m2 == 1:\n            return True\n        if m2 == m3 and m1 == 1:\n            return True\n    if is_valid_integers(m1, m2) and m1 == m2 and (c == r):\n        return True\n    if is_valid_integers(m2, m3) and m2 == m3 and (a == p):\n        return True\n    if is_valid_integers(m1, m3) and m1 == m3 and (b == q):\n        return True\n    return False\n\ndef get_m_and_d_for_mul_and_add_step(p, q, a, b):\n    try:\n        m = get_int_or_infinity((a - b) / (p - q))\n    except:\n        m = float('inf')\n    try:\n        d = get_int_or_infinity((p * b - q * a) / (p - q))\n    except:\n        d = float('inf')\n    return (m, d)\n\ndef multiply_and_add_step(p, q, r, a, b, c):\n    infinity = float('inf')\n    (m1, d1) = get_m_and_d_for_mul_and_add_step(p, q, a, b)\n    (m2, d2) = get_m_and_d_for_mul_and_add_step(p, r, a, c)\n    if is_valid_integers(m1, d1, m2, d2) and m1 == m2 and (d1 == d2):\n        return True\n    try:\n        m3 = get_int_or_infinity(c / r)\n    except:\n        m3 = infinity\n    if is_valid_integers(m3) and a - p * m3 == b - q * m3:\n        return True\n    try:\n        m4 = get_int_or_infinity(b / q)\n        m5 = get_int_or_infinity(c / r)\n    except:\n        m4 = infinity\n        m5 = infinity\n    if is_valid_integers(m4, m5) and m4 == m5 and a - p * m5:\n        return True\n    d6 = c - r\n    try:\n        m6 = get_int_or_infinity((a - d6) / p)\n        m7 = get_int_or_infinity((b - d6) / q)\n    except:\n        m6 = infinity\n        m7 = infinity\n    if is_valid_integers(m6, m7) and m6 == m7 and d6:\n        return True\n    if r == c:\n        try:\n            m8 = get_int_or_infinity((a - b) / (p - q))\n        except:\n            m8 = infinity\n        if is_valid_integers(m8) and a - p * m8 == b - q * m8 and a - p * m8:\n            return True\n    d9 = c - r\n    try:\n        m9 = get_int_or_infinity(b / q)\n    except:\n        m9 = infinity\n    if is_valid_integers(m9) and p * m9 + d9 == a:\n        return True\n    if c == r:\n        try:\n            m10 = get_int_or_infinity(b / q)\n        except:\n            m10 = infinity\n        if is_valid_integers(m10) and a - p * m10 and (b == q * m10):\n            return True\n    if c - r:\n        try:\n            m11 = get_int_or_infinity(a / p)\n            m12 = get_int_or_infinity(b / q)\n        except:\n            m11 = infinity\n            m12 = infinity\n        if is_valid_integers(m11, m12) and m11 == m12:\n            return True\n    if c - r and a == p:\n        try:\n            m13 = get_int_or_infinity(b / q)\n        except:\n            m13 = infinity\n        if is_valid_integers(m13):\n            return True\n    if c - r and a == p:\n        d14 = c - r\n        try:\n            m14 = get_int_or_infinity((b - d14) / q)\n        except:\n            m14 = infinity\n        if is_valid_integers(m14):\n            return True\n    if c - r and c - r == a - p:\n        try:\n            m15 = get_int_or_infinity(b / q)\n        except:\n            m15 = infinity\n        if is_valid_integers(m15):\n            return True\n    if c - r and c - r == a - p:\n        d = c - r\n        try:\n            m16 = get_int_or_infinity((b - d) / q)\n        except:\n            m16 = infinity\n        if is_valid_integers(m16):\n            return True\n    return False\n\ndef add_and_multiply_step(p, q, r, a, b, c):\n    infinity = float('inf')\n    try:\n        m1 = get_int_or_infinity((a - b) / (p - q))\n    except:\n        m1 = infinity\n    try:\n        m2 = get_int_or_infinity((b - c) / (q - r))\n    except:\n        m2 = infinity\n    if is_valid_integers(m1, m2) and m1 == m2:\n        try:\n            d = get_int_or_infinity((a - p * m1) / m1)\n        except:\n            d = infinity\n        if is_valid_integers(d) and b == q * m1 + d * m1:\n            return True\n    if c - r:\n        d = c - r\n        try:\n            m1 = get_int_or_infinity((a - b) / (p - q))\n        except:\n            m1 = infinity\n        if is_valid_integers(m1) and a == p * m1 + d * m1 and (b == q * m1 + d * m1):\n            return True\n    if c - r and c - r == b - q:\n        d = c - r\n        try:\n            m1 = get_int_or_infinity(a / (p + d))\n        except:\n            m1 = infinity\n        if is_valid_integers(m1):\n            return True\n    try:\n        m1 = get_int_or_infinity(c / r)\n        m2 = get_int_or_infinity((a - b) / (p - q))\n    except:\n        m1 = infinity\n        m2 = infinity\n    if is_valid_integers(m1, m2) and m1 == m2:\n        try:\n            d = get_int_or_infinity((a - p * m1) / m1)\n        except:\n            d = infinity\n        if is_valid_integers(d) and b == q * m1 + d * m1:\n            return True\n    d = b - q\n    if d:\n        try:\n            m1 = get_int_or_infinity(c / r)\n        except:\n            m1 = infinity\n        if is_valid_integers(m1) and a == p * m1 + d * m1:\n            return True\n    if c == r:\n        try:\n            m1 = get_int_or_infinity((a - b) / (p - q))\n        except:\n            m1 = infinity\n        if is_valid_integers(m1):\n            try:\n                d = get_int_or_infinity((a - p * m1) / m1)\n            except:\n                d = infinity\n            if is_valid_integers(d) and b == q * m1 + d * m1:\n                return True\n    try:\n        m = get_int_or_infinity(c / r)\n    except:\n        m = infinity\n    if is_valid_integers(m) and a - p == b - q:\n        return True\n    if c == r and b - q:\n        d = b - q\n        try:\n            m = get_int_or_infinity(a / (p + d))\n        except:\n            m = infinity\n        if is_valid_integers(m):\n            return True\n    try:\n        m1 = get_int_or_infinity(b / q)\n        m2 = get_int_or_infinity(c / r)\n    except:\n        m1 = infinity\n        m2 = infinity\n        if is_valid_integers(m1, m2) and m1 == m2:\n            try:\n                d = get_int_or_infinity((a - p * m1) / m1)\n            except:\n                d = infinity\n            if is_valid_integers(d):\n                return True\n    if c == r:\n        try:\n            m = get_int_or_infinity(b / q)\n        except:\n            m = infinity\n        if is_valid_integers(m):\n            try:\n                d = get_int_or_infinity((a - p * m) / m)\n            except:\n                d = infinity\n            if is_valid_integers(d):\n                return True\n    try:\n        m1 = get_int_or_infinity(b / q)\n        m2 = get_int_or_infinity(c / r)\n    except:\n        m1 = infinity\n        m2 = infinity\n    if is_valid_integers(m1, m2) and m1 == m2 and a - p:\n        return True\n    if c == r:\n        try:\n            m = get_int_or_infinity(b / q)\n        except:\n            m = infinity\n        if is_valid_integers(m) and a - p:\n            return True\n    return False\n\ndef get_d_and_m_for_add_and_mul_step(p, q, a, b):\n    try:\n        m = get_int_or_infinity((a - b) / (p - q))\n    except:\n        m = float('inf')\n    try:\n        d = get_int_or_infinity((p * b - q * a) / (a - b))\n    except:\n        d = float('inf')\n    return (d, m)\n\ndef add_and_add_step(p, q, r, a, b, c):\n    d1 = c - r\n    if d1 and a - p - d1 == b - q - d1:\n        return True\n    if c - r == b - q and a - p - b + q:\n        return True\n    d1 = a - p\n    d2 = b - q - d1\n    if c - r == d2:\n        return True\n    if c - r == b - q and c - r and a - p:\n        return True\n    if c == r and b - q and a - p + q - b:\n        return True\n    if b - q == c - r and b - q and a - p + q - b:\n        return True\n\ndef mul_and_mul_step(p, q, r, a, b, c):\n    infinity = float('inf')\n    try:\n        m1 = get_int_or_infinity(a / p)\n    except:\n        m1 = infinity\n    try:\n        if m1 != infinity:\n            m2 = get_int_or_infinity(c / (r * m1))\n        else:\n            m2 = infinity\n    except:\n        m2 = infinity\n    if is_valid_integers(m1, m2) and b == q * m1:\n        return True\n    try:\n        m1 = get_int_or_infinity(c / r)\n    except:\n        m1 = infinity\n    try:\n        if m1 != infinity:\n            m2 = get_int_or_infinity(a / (p * m1))\n        else:\n            m2 = infinity\n    except:\n        m2 = infinity\n    if is_valid_integers(m1, m2) and b == q * m1 * m2:\n        return True\n    try:\n        m2 = get_int_or_infinity(a / p)\n    except:\n        m2 = infinity\n    try:\n        if m2 != infinity:\n            m1 = get_int_or_infinity(c / (r * m2))\n        else:\n            m1 = infinity\n    except:\n        m1 = infinity\n    if is_valid_integers(m1, m2) and q * m1 == b:\n        return True\n    try:\n        m1 = get_int_or_infinity(a / p)\n    except:\n        m1 = infinity\n    try:\n        m2 = get_int_or_infinity(c / r)\n    except:\n        m2 = infinity\n    if is_valid_integers(m1, m2) and q * m1 == b:\n        return True\n    if c == r:\n        try:\n            m1 = get_int_or_infinity(a / p)\n        except:\n            m1 = infinity\n        try:\n            if m1 != infinity:\n                m2 = get_int_or_infinity(b / (q * m1))\n            else:\n                m2 = infinity\n        except:\n            m2 = infinity\n        if is_valid_integers(m1, m2):\n            return True\n    return False\n\ndef is_two_step_possible(p, q, r, a, b, c):\n    first_array = [(p, q, r), (q, r, p), (r, p, q), (q, p, r), (p, r, q), (r, q, p)]\n    second_array = [(a, b, c), (b, c, a), (c, a, b), (b, a, c), (a, c, b), (c, b, a)]\n    for i in range(0, 6):\n        first = first_array[i]\n        second = second_array[i]\n        if multiply_and_add_step(*first, *second):\n            return True\n        if add_and_multiply_step(*first, *second):\n            return True\n        if mul_and_mul_step(*first, *second):\n            return True\n        if add_and_add_step(*first, *second):\n            return True\n    return False\nwhile t > 0:\n    t -= 1\n    (p, q, r) = list(map(int, input().split(' ')))\n    (a, b, c) = list(map(int, input().split(' ')))\n    if is_zero_step_possible(p, q, r, a, b, c):\n        print(0)\n    elif check_for_possible_one_step(p, q, r, a, b, c):\n        print(1)\n    elif is_two_step_possible(p, q, r, a, b, c):\n        print(2)\n    else:\n        print(3)", "from math import *\n\ndef one_zero(p, q, r, a, b, c):\n    if add_all(p, q, r, a, b, c):\n        return 1\n    if add_two_one_zero(p, q, r, a, b, c):\n        return 1\n    if add_two_one_zero(p, r, q, a, c, b):\n        return 1\n    if add_two_one_zero(r, q, p, c, b, a):\n        return 1\n    if add_one_two_zero(p, q, r, a, b, c):\n        return 1\n    if add_one_two_zero(q, r, p, b, c, a):\n        return 1\n    if add_one_two_zero(r, q, p, c, b, a):\n        return 1\n    if multiply_two_one_zero(p, q, r, a, b, c):\n        return 1\n    if isTwo(p, q, r, a, b, c):\n        return 2\n    count = 3\n    if c == 0:\n        count -= 1\n    return count\n\ndef two_zero(p, q, r, a, b, c):\n    if add_all(p, q, r, a, b, c):\n        return 1\n    if add_two_one_zero(p, q, r, a, b, c):\n        return 1\n    if add_two_one_zero(p, r, q, a, c, b):\n        return 1\n    if add_two_one_zero(r, q, p, c, b, a):\n        return 1\n    if add_one_two_zero(p, q, r, a, b, c):\n        return 1\n    if add_one_two_zero(q, r, p, b, c, a):\n        return 1\n    if add_one_two_zero(r, q, p, c, b, a):\n        return 1\n    count = 3\n    if p == 0 and a == 0:\n        count -= 1\n    if q == 0 and b == 0:\n        count -= 1\n    if r == 0 and c == 0:\n        count -= 1\n    return count\n\ndef add_all(p, q, r, a, b, c):\n    if a - p == b - q and b - q == c - r:\n        return True\n\ndef multiply_all(p, q, r, a, b, c):\n    try:\n        x = a // p\n        if p * x == a and q * x == b and (r * x == c):\n            return True\n    except:\n        pass\n\ndef add_two_one_zero(p, q, r, a, b, c):\n    if c == r:\n        if a - p == b - q:\n            return True\n\ndef multiply_two_one_zero(p, q, r, a, b, c):\n    try:\n        if c == r:\n            x = a // p\n            if p * x == a and q * x == b:\n                return True\n    except:\n        pass\n\ndef add_one_two_zero(p, q, r, a, b, c):\n    if c == r and b == q:\n        return True\n\ndef multiply_two_add_all(p, q, r, a, b, c):\n    try:\n        y = c - r\n        x = (a - y) // p\n        if p * x + y == a and q * x + y == b and (r + y == c):\n            return True\n    except:\n        pass\n\ndef multiply_one_add_all(p, q, r, a, b, c):\n    try:\n        y = b - q\n        x = (a - y) // p\n        if p * x + y == a and q + y == b and (r + y == c):\n            return True\n    except:\n        pass\n\ndef add_two_multiply_all(p, q, r, a, b, c):\n    try:\n        y = c // r\n        x = a // y - p\n        if (p + x) * y == a and (q + x) * y == b and (r * y == c):\n            return True\n    except:\n        pass\n\ndef add_one_multiply_all(p, q, r, a, b, c):\n    try:\n        y = b // q\n        x = a // y - p\n        if (p + x) * y == a and q * y == b and (r * y == c):\n            return True\n    except:\n        pass\n\ndef multiply_all_add_two(p, q, r, a, b, c):\n    try:\n        x = a // p\n        y = c - r * x\n        if p * x == a and q * x + y == b and (r * x + y == c):\n            return True\n    except:\n        pass\n\ndef multiply_all_add_one(p, q, r, a, b, c):\n    try:\n        x = c // r\n        y = a - p * x\n        if p * x + y == a and q * x == b and (r * x == c):\n            return True\n    except:\n        pass\n\ndef add_all_multiply_two(p, q, r, a, b, c):\n    try:\n        x = a - p\n        y = b // (q + x)\n        if p + x == a and (q + x) * y == b and ((r + x) * y == c):\n            return True\n    except:\n        pass\n\ndef add_all_multiply_one(p, q, r, a, b, c):\n    try:\n        x = b - q\n        y = a // (p + x)\n        if (p + x) * y == a and q + x == b and (r + x == c):\n            return True\n    except:\n        pass\n\ndef multiply_two_add_two(p, q, r, a, b, c):\n    try:\n        if r == c:\n            x = (a - b) // (p - q)\n            y = a - p * x\n            if p * x + y == a and q * x + y == b:\n                return True\n    except:\n        pass\n    try:\n        x = b // q\n        y = c - r\n        if p * x + y == a and q * x == b and (r + y == c):\n            return True\n    except:\n        pass\n\ndef multiply_two_add_one(p, q, r, a, b, c):\n    try:\n        if c == r:\n            x = b // q\n            y = a - p * x\n            if p * x + y and q * x == b:\n                return True\n    except:\n        pass\n    try:\n        x = a // p\n        y = c - r\n        if p * x == a and q * x == b and (r + y == c):\n            return True\n    except:\n        pass\n\ndef multiply_one_add_two(p, q, r, a, b, c):\n    try:\n        if r == c:\n            y = b - q\n            x = (a - y) // p\n            if p * x + y == a and q + y == b:\n                return True\n    except:\n        pass\n    try:\n        y = b - q\n        x = a // p\n        if p * x == a and q + y == b and (r + y == c):\n            return True\n    except:\n        pass\n\ndef multiply_one_add_one(p, q, r, a, b, c):\n    try:\n        if r == c:\n            y = b - q\n            x = a // p\n            if p * x == a and q + y == b:\n                return True\n    except:\n        pass\n\ndef add_one_multiply_two(p, q, r, a, b, c):\n    try:\n        if c == r:\n            x = b // q\n            y = a // x - p\n            if (p + y) * x == a and q * x == b:\n                return True\n    except:\n        pass\n    try:\n        y = a - p\n        x = b // q\n        if p + y == a and q * x == b and (r * x == c):\n            return True\n    except:\n        pass\n\ndef add_two_multiply_two(p, q, r, a, b, c):\n    try:\n        if r == c:\n            y = (a - b) // (p - q)\n            x = a // y - p\n            if p * x + y == a and q * x + y == b:\n                return True\n    except:\n        pass\n    try:\n        y = c - r\n        x = b // q\n        if (p + y) * x == a and q * x == b and (r + y == c):\n            return True\n    except:\n        pass\n\ndef add_two_multiply_one(p, q, r, a, b, c):\n    try:\n        if c == r:\n            x = b - q\n            y = a // (p + x)\n            if (p + x) * y == a and q + x == b:\n                return True\n    except:\n        pass\n    try:\n        y = c // r\n        x = b - q\n        if p + x == a and q + x == b and (r * y == c):\n            return True\n    except:\n        pass\n\ndef add_one_multiply_one(p, q, r, a, b, c):\n    try:\n        if c == r:\n            x = a // p\n            y = b - q\n            if p * x == a and q + y == b:\n                return True\n    except:\n        pass\n\ndef one_zero_add_two(p, q, r, a, b, c):\n    if c == r:\n        return True\n\ndef add_two_add_one(p, q, r, a, b, c):\n    if a - p == b - q:\n        return True\n\ndef add_two_add_two(p, q, r, a, b, c):\n    y = b - q\n    x = c - r\n    if p + x + y == a and q + y == b and (r + x == c):\n        return True\n\ndef multiply_two_multiply_two(p, q, r, a, b, c):\n    try:\n        y = b // q\n        x = c // r\n        if p * x * y == a and q * y == b and (r * x == c):\n            return True\n    except:\n        pass\n\ndef isTwo(p, q, r, a, b, c):\n    try:\n        x = (a - b) // (p - q)\n        y = a - p * x\n        if p * x + y == a and q * x + y == b and (r * x + y == c):\n            return True\n    except:\n        pass\n    ans = multiply_two_add_all(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = multiply_two_add_all(p, r, q, a, c, b)\n    if ans:\n        return True\n    ans = multiply_two_add_all(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = multiply_one_add_all(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = multiply_one_add_all(q, p, r, b, a, c)\n    if ans:\n        return True\n    ans = multiply_one_add_all(r, q, p, c, b, a)\n    if ans:\n        return True\n    try:\n        y = (a - b) // (p - q)\n        x = a // y - p\n        if (p + x) * y == a and (q + x) * y == b and ((r + x) * y == c):\n            return True\n    except:\n        pass\n    ans = add_two_multiply_all(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = add_two_multiply_all(p, r, q, a, c, b)\n    if ans:\n        return True\n    ans = add_two_multiply_all(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = add_one_multiply_all(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = add_one_multiply_all(q, p, r, b, a, c)\n    if ans:\n        return True\n    ans = add_one_multiply_all(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = multiply_all_add_two(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = multiply_all_add_two(q, p, r, b, a, c)\n    if ans:\n        return True\n    ans = multiply_all_add_two(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = multiply_all_add_one(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = multiply_all_add_one(q, p, r, b, a, c)\n    if ans:\n        return True\n    ans = multiply_all_add_one(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = add_all_multiply_two(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = add_all_multiply_two(q, p, r, b, a, c)\n    if ans:\n        return True\n    ans = add_all_multiply_two(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = add_all_multiply_one(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = add_all_multiply_one(q, p, r, b, a, c)\n    if ans:\n        return True\n    ans = add_all_multiply_one(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = multiply_two_add_two(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = multiply_two_add_two(p, r, q, a, c, b)\n    if ans:\n        return True\n    ans = multiply_two_add_two(q, p, r, b, a, c)\n    if ans:\n        return True\n    ans = multiply_two_add_two(q, r, p, b, c, a)\n    if ans:\n        return True\n    ans = multiply_two_add_two(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = multiply_two_add_two(r, p, q, c, a, b)\n    if ans:\n        return True\n    ans = multiply_two_add_one(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = multiply_two_add_one(p, r, q, a, c, b)\n    if ans:\n        return True\n    ans = multiply_two_add_one(q, p, r, b, a, c)\n    if ans:\n        return True\n    ans = multiply_two_add_one(q, r, p, b, c, a)\n    if ans:\n        return True\n    ans = multiply_two_add_one(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = multiply_two_add_one(r, p, q, c, a, b)\n    if ans:\n        return True\n    ans = multiply_one_add_two(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = multiply_one_add_two(p, r, q, a, c, b)\n    if ans:\n        return True\n    ans = multiply_one_add_two(q, p, r, b, a, c)\n    if ans:\n        return True\n    ans = multiply_one_add_two(q, r, p, b, c, a)\n    if ans:\n        return True\n    ans = multiply_one_add_two(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = multiply_one_add_two(r, p, q, c, a, b)\n    if ans:\n        return True\n    ans = multiply_one_add_one(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = multiply_one_add_one(p, r, q, a, c, b)\n    if ans:\n        return True\n    ans = multiply_one_add_one(q, p, r, b, a, c)\n    if ans:\n        return True\n    ans = multiply_one_add_one(q, r, p, b, c, a)\n    if ans:\n        return True\n    ans = multiply_one_add_one(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = multiply_one_add_one(r, p, q, c, a, b)\n    if ans:\n        return True\n    ans = add_one_multiply_two(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = add_one_multiply_two(p, r, q, a, c, b)\n    if ans:\n        return True\n    ans = add_one_multiply_two(q, p, r, b, a, c)\n    if ans:\n        return True\n    ans = add_one_multiply_two(q, r, p, b, c, a)\n    if ans:\n        return True\n    ans = add_one_multiply_two(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = add_one_multiply_two(r, p, q, c, a, b)\n    if ans:\n        return True\n    ans = add_two_multiply_two(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = add_two_multiply_two(p, r, q, a, c, b)\n    if ans:\n        return True\n    ans = add_two_multiply_two(q, p, r, b, a, c)\n    if ans:\n        return True\n    ans = add_two_multiply_two(q, r, p, b, c, a)\n    if ans:\n        return True\n    ans = add_two_multiply_two(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = add_two_multiply_two(r, p, q, c, a, b)\n    if ans:\n        return True\n    ans = add_two_multiply_one(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = add_two_multiply_one(p, r, q, a, c, b)\n    if ans:\n        return True\n    ans = add_two_multiply_one(q, p, r, b, a, c)\n    if ans:\n        return True\n    ans = add_two_multiply_one(q, r, p, b, c, a)\n    if ans:\n        return True\n    ans = add_two_multiply_one(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = add_two_multiply_one(r, p, q, c, a, b)\n    if ans:\n        return True\n    ans = add_one_multiply_one(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = add_one_multiply_one(p, r, q, a, c, b)\n    if ans:\n        return True\n    ans = add_one_multiply_one(q, p, r, b, a, c)\n    if ans:\n        return True\n    ans = add_one_multiply_one(q, r, p, b, c, a)\n    if ans:\n        return True\n    ans = add_one_multiply_one(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = add_one_multiply_one(r, p, q, c, a, b)\n    if ans:\n        return True\n    ans = add_two_add_two(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = add_two_add_two(q, p, r, b, a, c)\n    if ans:\n        return True\n    ans = add_two_add_two(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = multiply_two_multiply_two(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = multiply_two_multiply_two(q, p, r, b, a, c)\n    if ans:\n        return True\n    ans = multiply_two_multiply_two(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = one_zero_add_two(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = one_zero_add_two(p, r, q, a, c, b)\n    if ans:\n        return True\n    ans = one_zero_add_two(q, p, r, b, a, c)\n    if ans:\n        return True\n    ans = one_zero_add_two(q, r, p, b, c, a)\n    if ans:\n        return True\n    ans = one_zero_add_two(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = one_zero_add_two(r, p, q, c, a, b)\n    if ans:\n        return True\n    ans = add_two_add_one(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = add_two_add_one(p, r, q, a, c, b)\n    if ans:\n        return True\n    ans = add_two_add_one(r, q, p, c, b, a)\n    if ans:\n        return True\n    return False\n\ndef isOne(p, q, r, a, b, c):\n    ans = add_all(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = multiply_all(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = add_two_one_zero(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = add_two_one_zero(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = add_two_one_zero(p, r, q, a, c, b)\n    if ans:\n        return True\n    ans = multiply_two_one_zero(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = multiply_two_one_zero(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = multiply_two_one_zero(p, r, q, a, c, b)\n    if ans:\n        return True\n    ans = add_one_two_zero(p, q, r, a, b, c)\n    if ans:\n        return True\n    ans = add_one_two_zero(r, q, p, c, b, a)\n    if ans:\n        return True\n    ans = add_one_two_zero(q, p, r, b, a, c)\n    if ans:\n        return True\nfor _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    (a, b, c) = map(int, input().split())\n    if p == a and q == b and (r == c):\n        print(0)\n        continue\n    if p == 0 and q != 0 and (r != 0):\n        print(one_zero(r, q, p, c, b, a))\n        continue\n    if q == 0 and p != 0 and (r != 0):\n        print(one_zero(p, r, q, a, c, b))\n        continue\n    if r == 0 and p != 0 and (q != 0):\n        print(one_zero(p, q, r, a, b, c))\n        continue\n    if [p, q, r].count(0) == 2:\n        print(two_zero(p, q, r, a, b, c))\n        continue\n    if isOne(p, q, r, a, b, c):\n        print(1)\n    elif isTwo(p, q, r, a, b, c):\n        print(2)\n    else:\n        print(3)", "cases = int(input())\n\ndef integer(po):\n    if po[0] != 3000000000.0 and po[1] != 3000000000.0:\n        return True\n    else:\n        return False\n\ndef lies(point, index, current, target):\n    if point[1] + current[index] * point[0] == target[index] or (current[index] + point[1]) * point[0] == target[index] or current[index] * point[0] == target[index] or (current[index] + point[1] == target[index]):\n        return True\n    else:\n        return False\n\ndef intercept_case_check(intercepts, p, current, target):\n    for i in range(3):\n        a = [0, 1, 2]\n        a.remove(i)\n        point0 = [intercepts[a[0]][0], intercepts[a[1]][1]]\n        point6 = [intercepts[a[1]][0], intercepts[a[0]][1]]\n        if integer(point0):\n            if lies(point0, i, current, target):\n                return True\n        if integer(point6):\n            if lies(point6, i, current, target):\n                return True\n    return False\n\ndef cepts(a, p):\n    if a != 0 and p % a == 0:\n        x = p // a\n    else:\n        x = 3000000000.0\n    y = p - a\n    t = [x, y]\n    return t\n\ndef solve(a1, p1, a2, p2):\n    point = []\n    if a1 == a2:\n        point.append(3000000000.0)\n        point.append(3000000000.0)\n        return point\n    if (p2 - p1) % (a2 - a1) == 0:\n        point.append((p2 - p1) // (a2 - a1))\n    else:\n        point.append(3000000000.0)\n    if (a2 * p1 - a1 * p2) % (a2 - a1) == 0:\n        point.append((a2 * p1 - a1 * p2) // (a2 - a1))\n    else:\n        point.append(3000000000.0)\n    return point\nfor case_parser in range(cases):\n    current = list(map(int, input().split()))\n    target = list(map(int, input().split()))\n    intercepts = [[] for j in range(3)]\n    rem = 3\n    flagged = []\n    p = [[] for j in range(3)]\n    p[0] = solve(current[1], target[1], current[2], target[2])\n    p[1] = solve(current[2], target[2], current[0], target[0])\n    p[2] = solve(current[0], target[0], current[1], target[1])\n    for i in range(3):\n        intercepts[i] = cepts(current[i], target[i])\n    for i in range(3):\n        if current[i] == target[i]:\n            flagged.append(i)\n            rem -= 1\n    if rem == 0 or rem == 1:\n        print(rem)\n        continue\n    if rem == 2:\n        i = flagged[0]\n        dev = [0, 1, 2]\n        dev.remove(i)\n        if integer(p[i]):\n            if p[i][0] == 1 or p[i][1] == 0:\n                print(1)\n                continue\n            else:\n                print(2)\n                continue\n        elif current[dev[0]] == current[dev[1]] and target[dev[0]] == target[dev[1]]:\n            print(1)\n            continue\n        else:\n            print(2)\n            continue\n    parallel = []\n    coincident = []\n    if current[0] == current[1]:\n        if target[0] == target[1]:\n            coincident.append(0)\n            coincident.append(1)\n        else:\n            parallel.append(0)\n            parallel.append(1)\n    if current[1] == current[2]:\n        if target[1] == target[2]:\n            if 1 not in coincident:\n                coincident.append(1)\n            if 2 not in coincident:\n                coincident.append(2)\n        else:\n            if 1 not in parallel:\n                parallel.append(1)\n            if 2 not in parallel:\n                parallel.append(2)\n    if current[0] == current[2]:\n        if target[0] == target[2]:\n            if 0 not in coincident:\n                coincident.append(0)\n            if 2 not in coincident:\n                coincident.append(2)\n        else:\n            if 0 not in parallel:\n                parallel.append(0)\n            if 2 not in parallel:\n                parallel.append(2)\n    parallel.sort()\n    coincident.sort()\n    points = [intercepts[0][1], intercepts[1][1], intercepts[2][1]]\n    poins = [intercepts[0][0], intercepts[1][0], intercepts[2][0]]\n    for i in range(3):\n        if i in coincident and i in parallel:\n            parallel.remove(i)\n    flag = 0\n    if len(parallel) == 3:\n        if rem == 3:\n            for i in range(3):\n                if flag == 1:\n                    continue\n                remain = [0, 1, 2]\n                remain.remove(i)\n                if points[i] == points[remain[0]] + points[remain[1]]:\n                    print(2)\n                    flag = 1\n                    continue\n            if flag == 1:\n                continue\n            for i in range(3):\n                if flag == 1:\n                    continue\n                remain = [0, 1, 2]\n                remain.remove(i)\n                if poins[i] == poins[remain[0]] * poins[remain[1]]:\n                    print(2)\n                    flag = 1\n                    continue\n            if intercept_case_check(intercepts, p, current, target):\n                print(2)\n                continue\n        if flag == 1:\n            continue\n        if intercept_case_check(intercepts, p, current, target):\n            print(2)\n            continue\n        print(rem)\n        continue\n    if len(coincident) == 3:\n        print(1)\n        continue\n    df = [0, 1, 2]\n    if len(coincident) == 2:\n        if len(parallel) == 1:\n            if rem == 3:\n                print(2)\n                continue\n        else:\n            for i in range(3):\n                if i in coincident:\n                    df.remove(i)\n            point = []\n            if df[0] == 0:\n                point = p[1].copy()\n            elif df[0] == 1:\n                point = p[0].copy()\n            else:\n                point = p[0].copy()\n            if integer(point):\n                if point[0] == 1 or point[1] == 0:\n                    print(1)\n                    continue\n                else:\n                    print(2)\n                    continue\n            else:\n                print(2)\n                continue\n    de = [0, 1, 2]\n    de1 = [0, 1, 2]\n    if len(parallel) == 2:\n        point1 = p[parallel[0]].copy()\n        point2 = p[parallel[1]].copy()\n        if rem == 3:\n            if integer(point1):\n                q = point1.copy()\n                if intercepts[parallel[0]][0] == point1[0] or intercepts[parallel[0]][1] == point1[1]:\n                    print(2)\n                    continue\n                if point1[0] != 0 and point1[1] % point1[0] == 0:\n                    q[1] = point1[1] // point1[0]\n                    if intercepts[parallel[0]][0] == q[0] or intercepts[parallel[0]][1] == q[1]:\n                        print(2)\n                        continue\n            if integer(point2):\n                q = point2.copy()\n                if intercepts[parallel[1]][0] == point2[0] or intercepts[parallel[1]][1] == point2[1]:\n                    print(2)\n                    continue\n                if point2[0] != 0 and point2[1] % point2[0] == 0:\n                    q[1] = point2[1] // point2[0]\n                    if intercepts[parallel[1]][0] == q[0] or intercepts[parallel[1]][1] == q[1]:\n                        print(2)\n                        continue\n            if integer(point1) and point1[0] == 1:\n                print(2)\n                continue\n            if integer(point2) and point2[0] == 1:\n                print(2)\n                continue\n            else:\n                if 3000000000.0 not in points:\n                    for i in range(3):\n                        if flag == 1:\n                            continue\n                        remain = [0, 1, 2]\n                        remain.remove(i)\n                        if points[i] == points[remain[0]] + points[remain[1]]:\n                            print(2)\n                            flag = 1\n                            continue\n                if flag == 1:\n                    continue\n                if 3000000000.0 not in poins:\n                    for i in range(3):\n                        if flag == 1:\n                            continue\n                        remain = [0, 1, 2]\n                        remain.remove(i)\n                        if poins[i] == poins[remain[0]] * poins[remain[1]]:\n                            print(2)\n                            flag = 1\n                            continue\n                if flag == 1:\n                    continue\n        if intercept_case_check(intercepts, p, current, target):\n            print(2)\n            continue\n        print(rem)\n        continue\n    if len(parallel) == 0 and len(coincident) == 0:\n        flag = 0\n        if p[0] == p[1] and p[1] == p[2]:\n            if integer(p[0]):\n                if p[0][0] == 1 or p[0][1] == 0:\n                    print(1)\n                    continue\n                else:\n                    print(2)\n                    continue\n        q = p.copy()\n        least_count = rem\n        for i in range(3):\n            if integer(p[i]):\n                if p[i][0] != 1 and p[i][1] != 0:\n                    if intercepts[i][0] == p[i][0] or intercepts[i][1] == p[i][1]:\n                        least_count = 2\n                    elif p[i][0] != 0 and p[i][1] % p[i][0] == 0:\n                        q[i][1] = p[i][1] // p[i][0]\n                        if intercepts[i][0] == q[i][0] or intercepts[i][1] == q[i][1]:\n                            least_count = 2\n                elif p[i][0] == 1 or p[i][1] == 0:\n                    least_count = 2\n        if least_count == 3:\n            for i in range(3):\n                if flag == 1:\n                    continue\n                remain = [0, 1, 2]\n                remain.remove(i)\n                if points[i] == points[remain[0]] + points[remain[1]]:\n                    print(2)\n                    flag = 1\n                    continue\n            if flag == 1:\n                continue\n            for i in range(3):\n                if flag == 1:\n                    continue\n                remain = [0, 1, 2]\n                remain.remove(i)\n                if poins[i] == poins[remain[0]] * poins[remain[1]]:\n                    print(2)\n                    flag = 1\n                    continue\n        if flag == 1:\n            continue\n        if intercept_case_check(intercepts, p, current, target):\n            print(2)\n            continue\n        else:\n            print(least_count)\n            continue\n    else:\n        print(rem)\n        continue", "t = int(input())\n\ndef check1(t1, t2):\n    (x1, y1, z1) = t1\n    (x2, y2, z2) = t2\n    arr1 = [x2 - x1, y2 - y1, z2 - z1]\n    arr2 = []\n    if x1 != 0 and x2 / x1 == x2 // x1:\n        arr2.append(x2 // x1)\n    if y1 != 0 and y2 / y1 == y2 // y1:\n        arr2.append(y2 // y1)\n    if z1 != 0 and z2 / z1 == z2 // z1:\n        arr2.append(z2 // z1)\n    if x1 == 0 and x2 == 0:\n        arr2.append(1)\n    if y1 == 0 and y2 == 0:\n        arr2.append(1)\n    if z1 == 0 and z2 == 0:\n        arr2.append(1)\n    while 0 in arr1:\n        arr1.remove(0)\n    if len(arr1) == 1:\n        return True\n    if len(arr1) == 2:\n        if arr1[0] == arr1[1]:\n            return True\n    elif arr1[0] == arr1[1] and arr1[1] == arr1[2]:\n        return True\n    if len(arr2) == 3:\n        while 1 in arr2:\n            arr2.remove(1)\n        if len(arr2) == 1:\n            return True\n        if len(arr2) == 2:\n            if arr2[0] == arr2[1]:\n                return True\n        elif arr2[0] == arr2[1] and arr2[1] == arr2[2]:\n            return True\n    return False\nfor _ in range(t):\n    l1 = [int(i) for i in input().split()]\n    l2 = [int(i) for i in input().split()]\n    if l1 == l2:\n        print(0)\n        continue\n    else:\n        if check1(l1, l2):\n            print(1)\n            continue\n        else:\n            (a, b) = ([], [])\n            for i in range(3):\n                a.append(l2[i] - l1[i])\n                if l1[i] != 0 and l2[i] / l1[i] == l2[i] // l1[i]:\n                    b.append(l2[i] // l1[i])\n                if l1[i] == 0 and l2[i] == 0:\n                    b.append(1)\n            if 0 in a or 1 in b:\n                print(2)\n                continue\n            elif len(set(a)) == 2 or len(b) - len(set(b)) == 1:\n                print(2)\n                continue\n            else:\n                if a[0] + a[1] == a[2] or a[0] + a[2] == a[1] or a[1] + a[2] == a[0]:\n                    print(2)\n                    continue\n                if len(b) == 3:\n                    if b[0] * b[1] == b[2] or b[0] * b[2] == b[1] or b[1] * b[2] == b[0]:\n                        print(2)\n                        continue\n                bol = False\n                for i in range(3):\n                    diff = a[i]\n                    (p, q, r) = ([l2[0] - diff, l2[1] - diff, l2[2] - diff], [l2[0] - diff, l2[1] - diff, l2[2] - diff], [l2[0] - diff, l2[1] - diff, l2[2] - diff])\n                    for j in range(3):\n                        if i != j:\n                            p[j] = p[j] + diff\n                            break\n                    for k in range(3):\n                        if i != k and j != k:\n                            q[k] = q[k] + diff\n                            break\n                    if check1(l1, p) or check1(l1, q) or check1(l1, r):\n                        print(2)\n                        bol = True\n                        break\n                if bol:\n                    continue\n                bol = False\n                for i in range(3):\n                    if l1[i] != 0:\n                        pro = l2[i] / l1[i]\n                        if pro == int(pro):\n                            p = [l1[0] * pro, l1[1] * pro, l1[2] * pro]\n                            if check1(p, l2):\n                                print(2)\n                                bol = True\n                                break\n                if bol:\n                    continue\n                if len(set(l1)) == 3:\n                    l3 = [(l2[0] - l2[1]) / (l1[0] - l1[1]), (l2[1] - l2[2]) / (l1[1] - l1[2]), (l2[2] - l2[0]) / (l1[2] - l1[0])]\n                    if l3[0] == l3[1] and l3[1] == l3[2] and (l3[0] == int(l3[0])):\n                        print(2)\n                        continue\n                bol = False\n                for i in range(3):\n                    diff = -1 * a[i]\n                    (p, q, r) = ([l1[0] - diff, l1[1] - diff, l1[2] - diff], [l1[0] - diff, l1[1] - diff, l1[2] - diff], [l1[0] - diff, l1[1] - diff, l1[2] - diff])\n                    for j in range(3):\n                        if i != j:\n                            p[j] = p[j] + diff\n                            break\n                    for k in range(3):\n                        if i != k and j != k:\n                            q[k] = q[k] + diff\n                            break\n                    if check1(p, l2) or check1(q, l2) or check1(r, l2):\n                        bol = True\n                        print(2)\n                        break\n                if bol:\n                    continue\n                bol = False\n                for i in range(3):\n                    if l1[i] != 0 and l2[i] != 0:\n                        pro = l2[i] / l1[i]\n                        if pro == int(pro):\n                            (p, q, r) = (l2[0] / pro, l2[1] / pro, l2[2] / pro)\n                            if p == int(p) and q == int(q) and (r == int(r)):\n                                lp = [int(p), int(q), int(r)]\n                                if check1(l1, lp):\n                                    bol = True\n                                    print(2)\n                                    break\n                if bol:\n                    continue\n        print(3)", "import math\n\ndef ifDeno(a1, b1, c1, a2, b2, c2):\n    if a2 == b2 == c2 != 0:\n        return True\n    if a2 == b2:\n        if c1 == c2:\n            return True\n        if c2 == 0:\n            return True\n        if c1 + a2 == c2:\n            return True\n    if b2 == c2:\n        if a1 == a2:\n            return True\n        if a2 == 0:\n            return True\n        if a1 + b2 == a2:\n            return True\n    if c2 == a2:\n        if b1 == b2:\n            return True\n        if b2 == 0:\n            return True\n        if b1 + a2 == b2:\n            return True\n    return False\n\ndef ifCombo(x, y, z, x2, y2, z2):\n    if x + y == z or y + z == x or z + x == y:\n        return True\n    if x2 == math.ceil(x2) and y2 == math.ceil(y2) and (z2 == math.ceil(z2)):\n        if x2 * y2 == z2 or y2 * z2 == x2 or z2 * x2 == y2:\n            return True\n    return False\n\ndef ifTwoBrute2(a1, b1, c1, a2, b2, c2):\n    up1 = a2 - a1\n    up2 = b2 - b1\n    up3 = c2 - c1\n    down1 = -a2 - a1\n    down2 = -b2 - b1\n    down3 = -c2 - c1\n    for i in range(min(up1, down1), max(up1, down1) + 1):\n        try:\n            if a2 % (a1 + i) == 0 and b2 % (b1 + i) == 0 and (c2 % (c1 + i) == 0) and (a2 // (a1 + i) == b2 // (b1 + i) == c2 // (c1 + i)):\n                return True\n        except:\n            n = 0\n        try:\n            if a2 % (a1 + i) == 0 and b2 % (b1 + i) == 0 and (a2 // (a1 + i) == b2 // (b1 + i)):\n                if c1 == c2 or c1 + i == c2 or c1 * (a2 // (a1 + i)) == c2:\n                    return True\n        except:\n            n = 0\n        try:\n            if b2 % (b1 + i) == 0 and c2 % (c1 + i) == 0 and (b2 // (b1 + i) == c2 // (c1 + i)):\n                if a1 == a2 or a1 + i == a2 or a1 * (b2 // (b1 + i)) == a2:\n                    return True\n        except:\n            n = 0\n        try:\n            if c2 % (c1 + i) == 0 and a2 % (a1 + i) == 0 and (c2 // (c1 + i) == a2 // (a1 + i)):\n                if b1 == b2 or b1 + i == b2 or b1 * (a2 // (a1 + i)) == b2:\n                    return True\n        except:\n            n = 0\n    for i in range(min(up2, down2), max(up2, down2) + 1):\n        try:\n            if a2 % (a1 + i) == 0 and b2 % (b1 + i) == 0 and (c2 % (c1 + i) == 0) and (a2 // (a1 + i) == b2 // (b1 + i) == c2 // (c1 + i)):\n                return True\n        except:\n            n = 0\n        try:\n            if a2 % (a1 + i) == 0 and b2 % (b1 + i) == 0 and (a2 // (a1 + i) == b2 // (b1 + i)):\n                if c1 == c2 or c1 + i == c2 or c1 * (a2 // (a1 + i)) == c2:\n                    return True\n        except:\n            n = 0\n        try:\n            if b2 % (b1 + i) == 0 and c2 % (c1 + i) == 0 and (b2 // (b1 + i) == c2 // (c1 + i)):\n                if a1 == a2 or a1 + i == a2 or a1 * (b2 // (b1 + i)) == a2:\n                    return True\n        except:\n            n = 0\n        try:\n            if c2 % (c1 + i) == 0 and a2 % (a1 + i) == 0 and (c2 // (c1 + i) == a2 // (a1 + i)):\n                if b1 == b2 or b1 + i == b2 or b1 * (a2 // (a1 + i)) == b2:\n                    return True\n        except:\n            n = 0\n    for i in range(min(up3, down3), max(up3, down3) + 1):\n        try:\n            if a2 % (a1 + i) == 0 and b2 % (b1 + i) == 0 and (c2 % (c1 + i) == 0) and (a2 // (a1 + i) == b2 // (b1 + i) == c2 // (c1 + i)):\n                return True\n        except:\n            n = 0\n        try:\n            if a2 % (a1 + i) == 0 and b2 % (b1 + i) == 0 and (a2 // (a1 + i) == b2 // (b1 + i)):\n                if c1 == c2 or c1 + i == c2 or c1 * (a2 // (a1 + i)) == c2:\n                    return True\n        except:\n            n = 0\n        try:\n            if b2 % (b1 + i) == 0 and c2 % (c1 + i) == 0 and (b2 // (b1 + i) == c2 // (c1 + i)):\n                if a1 == a2 or a1 + i == a2 or a1 * (b2 // (b1 + i)) == a2:\n                    return True\n        except:\n            n = 0\n        try:\n            if c2 % (c1 + i) == 0 and a2 % (a1 + i) == 0 and (c2 // (c1 + i) == a2 // (a1 + i)):\n                if b1 == b2 or b1 + i == b2 or b1 * (a2 // (a1 + i)) == b2:\n                    return True\n        except:\n            n = 0\n    for i in range(min(up1, down1), max(up1, down1) + 1):\n        try:\n            if a2 - a1 * i == b2 - b1 * i == c2 - c1 * i:\n                return True\n        except:\n            n = 0\n        try:\n            if a2 - a1 * i == b2 - b1 * i:\n                if c1 == c2 or c1 * i == c2 or c1 + (a2 - a1 * i) == c2:\n                    return True\n        except:\n            n = 0\n        try:\n            if b2 - b1 * i == c2 - c1 * i:\n                if a1 == a2 or a1 * i == a2 or a1 + (b2 - b1 * i) == a2:\n                    return True\n        except:\n            n = 0\n        try:\n            if c2 - c1 * i == a2 - a1 * i:\n                if b1 == b2 or b1 * i == b2 or b1 + (c2 - c1 * i) == b2:\n                    return True\n        except:\n            n = 0\n    for i in range(min(up2, down2), max(up2, down2) + 1):\n        try:\n            if a2 - a1 * i == b2 - b1 * i == c2 - c1 * i:\n                return True\n        except:\n            n = 0\n        try:\n            if a2 - a1 * i == b2 - b1 * i:\n                if c1 == c2 or c1 * i == c2 or c1 + (a2 - a1 * i) == c2:\n                    return True\n        except:\n            n = 0\n        try:\n            if b2 - b1 * i == c2 - c1 * i:\n                if a1 == a2 or a1 * i == a2 or a1 + (b2 - b1 * i) == a2:\n                    return True\n        except:\n            n = 0\n        try:\n            if c2 - c1 * i == a2 - a1 * i:\n                if b1 == b2 or b1 * i == b2 or b1 + (c2 - c1 * i) == b2:\n                    return True\n        except:\n            n = 0\n    for i in range(min(up3, down3), max(up3, down3) + 1):\n        try:\n            if a2 - a1 * i == b2 - b1 * i == c2 - c1 * i:\n                return True\n        except:\n            n = 0\n        try:\n            if a2 - a1 * i == b2 - b1 * i:\n                if c1 == c2 or c1 * i == c2 or c1 + (a2 - a1 * i) == c2:\n                    return True\n        except:\n            n = 0\n        try:\n            if b2 - b1 * i == c2 - c1 * i:\n                if a1 == a2 or a1 * i == a2 or a1 + (b2 - b1 * i) == a2:\n                    return True\n        except:\n            n = 0\n        try:\n            if c2 - c1 * i == a2 - a1 * i:\n                if b1 == b2 or b1 * i == b2 or b1 + (c2 - c1 * i) == b2:\n                    return True\n        except:\n            n = 0\n    return False\n\ndef ifTwoBrute(a1, b1, c1, a2, b2, c2):\n    up1 = a2 - a1\n    up2 = b2 - b1\n    up3 = c2 - c1\n    down1 = -a2 - a1\n    down2 = -b2 - b1\n    down3 = -c2 - c1\n    upCurrent = 0\n    downCurrent = 0\n    status = [False, False, False]\n    status1 = [False, False, False]\n    if a1 == a2:\n        upCurrent += 1\n        downCurrent += 1\n        status[0] = True\n        status1[0] = True\n    if b1 == b2:\n        upCurrent += 1\n        downCurrent += 1\n        status[1] = True\n        status1[1] = True\n    if c1 == c2:\n        upCurrent += 1\n        downCurrent += 1\n        status[2] = True\n        status1[2] = True\n    i = 0\n    while upCurrent < 2:\n        if i > up1 and status[0] == False:\n            upCurrent += 1\n            status[0] = True\n        if i > up2 and status[1] == False:\n            upCurrent += 1\n            status[1] = True\n        if i > up3 and status[2] == False:\n            upCurrent += 1\n            status[2] = True\n        try:\n            if a2 % (a1 + i) == 0 and b2 % (b1 + i) == 0 and (c2 % (c1 + i) == 0) and (a2 // (a1 + i) == b2 // (b1 + i) == c2 // (c1 + i)):\n                return True\n        except:\n            n = 0\n        try:\n            if a2 % (a1 + i) == 0 and b2 % (b1 + i) == 0 and (a2 // (a1 + i) == b2 // (b1 + i)):\n                if c1 == c2 or c1 + i == c2 or c1 * (a2 // (a1 + i)) == c2:\n                    return True\n        except:\n            n = 0\n        try:\n            if b2 % (b1 + i) == 0 and c2 % (c1 + i) == 0 and (b2 // (b1 + i) == c2 // (c1 + i)):\n                if a1 == a2 or a1 + i == a2 or a1 * (b2 // (b1 + i)) == a2:\n                    return True\n        except:\n            n = 0\n        try:\n            if c2 % (c1 + i) == 0 and a2 % (a1 + i) == 0 and (c2 // (c1 + i) == a2 // (a1 + i)):\n                if b1 == b2 or b1 + i == b2 or b1 * (a2 // (a1 + i)) == b2:\n                    return True\n        except:\n            n = 0\n        i += 1\n    i = 0\n    while downCurrent < 2:\n        if i < down1 and status1[0] == False:\n            downCurrent += 1\n            status1[0] = True\n        if i < down2 and status1[1] == False:\n            downCurrent += 1\n            status1[1] = True\n        if i < down3 and status1[2] == False:\n            downCurrent += 1\n            status1[2] = True\n        try:\n            if a2 % (a1 + i) == 0 and b2 % (b1 + i) == 0 and (c2 % (c1 + i) == 0) and (a2 // (a1 + i) == b2 // (b1 + i) == c2 // (c1 + i)):\n                return True\n        except:\n            n = 0\n        try:\n            if a2 % (a1 + i) == 0 and b2 % (b1 + i) == 0 and (a2 // (a1 + i) == b2 // (b1 + i)):\n                if c1 == c2 or c1 + i == c2 or c1 * (a2 // (a1 + i)) == c2:\n                    return True\n        except:\n            n = 0\n        try:\n            if b2 % (b1 + i) == 0 and c2 % (c1 + i) == 0 and (b2 // (b1 + i) == c2 // (c1 + i)):\n                if a1 == a2 or a1 + i == a2 or a1 * (b2 // (b1 + i)) == a2:\n                    return True\n        except:\n            n = 0\n        try:\n            if c2 % (c1 + i) == 0 and a2 % (a1 + i) == 0 and (c2 // (c1 + i) == a2 // (a1 + i)):\n                if b1 == b2 or b1 + i == b2 or b1 * (a2 // (a1 + i)) == b2:\n                    return True\n        except:\n            n = 0\n        i -= 1\n    up1 = a2 - a1\n    up2 = b2 - b1\n    up3 = c2 - c1\n    down1 = -a2 - a1\n    down2 = -b2 - b1\n    down3 = -c2 - c1\n    upCurrent = 0\n    downCurrent = 0\n    status = [False, False, False]\n    status1 = [False, False, False]\n    if a1 == a2:\n        upCurrent += 1\n        downCurrent += 1\n        status[0] = True\n        status1[0] = True\n    if b1 == b2:\n        upCurrent += 1\n        downCurrent += 1\n        status[1] = True\n        status1[1] = True\n    if c1 == c2:\n        upCurrent += 1\n        downCurrent += 1\n        status[2] = True\n        status1[2] = True\n    i = 0\n    while upCurrent < 2:\n        if i > up1 and status[0] == False:\n            upCurrent += 1\n            status[0] = True\n        if i > up2 and status[1] == False:\n            upCurrent += 1\n            status[1] = True\n        if i > up3 and status[2] == False:\n            upCurrent += 1\n            status[2] = True\n        try:\n            if a2 - a1 * i == b2 - b1 * i == c2 - c1 * i:\n                return True\n        except:\n            n = 0\n        try:\n            if a2 - a1 * i == b2 - b1 * i:\n                if c1 == c2 or c1 * i == c2 or c1 + (a2 - a1 * i) == c2:\n                    return True\n        except:\n            n = 0\n        try:\n            if b2 - b1 * i == c2 - c1 * i:\n                if a1 == a2 or a1 * i == a2 or a1 + (b2 - b1 * i) == a2:\n                    return True\n        except:\n            n = 0\n        try:\n            if c2 - c1 * i == a2 - a1 * i:\n                if b1 == b2 or b1 * i == b2 or b1 + (c2 - c1 * i) == b2:\n                    return True\n        except:\n            n = 0\n        i += 1\n    i = 0\n    while downCurrent < 2:\n        if i < down1 and status1[0] == False:\n            downCurrent += 1\n            status1[0] = True\n        if i < down2 and status1[1] == False:\n            downCurrent += 1\n            status1[1] = True\n        if i < down3 and status1[2] == False:\n            downCurrent += 1\n            status1[2] = True\n        try:\n            if a2 - a1 * i == b2 - b1 * i == c2 - c1 * i:\n                return True\n        except:\n            n = 0\n        try:\n            if a2 - a1 * i == b2 - b1 * i:\n                if c1 == c2 or c1 * i == c2 or c1 + (a2 - a1 * i) == c2:\n                    return True\n        except:\n            n = 0\n        try:\n            if b2 - b1 * i == c2 - c1 * i:\n                if a1 == a2 or a1 * i == a2 or a1 + (b2 - b1 * i) == a2:\n                    return True\n        except:\n            n = 0\n        try:\n            if c2 - c1 * i == a2 - a1 * i:\n                if b1 == b2 or b1 * i == b2 or b1 + (c2 - c1 * i) == b2:\n                    return True\n        except:\n            n = 0\n        i -= 1\n    return False\n\ndef ifTwo(a1, b1, c1, a2, b2, c2):\n    ints = []\n    try:\n        if a2 != b2 and a1 != b1:\n            if (a2 - b2) % (a1 - b1) == 0:\n                x = (a2 - b2) // (a1 - b1)\n                if a2 - a1 * x == b2 - b1 * x:\n                    ints.append(x)\n    except:\n        n = 0\n    try:\n        if b2 != c2 and b1 != c1:\n            if (b2 - c2) % (b1 - c1) == 0:\n                x = (b2 - c2) // (b1 - c1)\n                if b2 - b1 * x == c2 - c1 * x:\n                    ints.append(x)\n    except:\n        n = 0\n    try:\n        if c2 != a2 and c1 != a1:\n            if (c2 - a2) % (c1 - a1) == 0:\n                x = (c2 - a2) // (c1 - a1)\n                if c2 - c1 * x == a2 - a1 * x:\n                    ints.append(x)\n    except:\n        n = 0\n    if len(ints) == 3 and len(set(ints)) == 1:\n        return True\n    if len(ints) == 3 and len(set(ints)) == 2:\n        return True\n    if len(ints) == 3 and len(set(ints)) == 3:\n        try:\n            x = (a2 - b2) // (a1 - b1)\n            y = a2 - a1 * x\n            xx = (a1 * b2 - a2 * b1) // (a2 - b2)\n            yy = a2 // (a1 + xx)\n            if (a1 * b2 - a2 * b1) % (a2 - b2) != 0:\n                xx = 0.4857454\n                yy = 0.294823\n            if c1 == c2 or c1 + y == c2 or c1 * x == c2 or (c1 + xx == c2) or (c1 * yy == c2):\n                return True\n        except:\n            n = 0\n        try:\n            x = (b2 - c2) // (b1 - c1)\n            y = b2 - b1 * x\n            xx = (b1 * c2 - b2 * c1) // (b2 - c2)\n            yy = b2 // (b1 + xx)\n            if (b1 * c2 - b2 * c1) % (b2 - c2) != 0:\n                xx = 0.4857454\n                yy = 0.294823\n            if a1 == a2 or a1 + y == a2 or a1 * x == a2 or (a1 + xx == a2) or (a1 * yy == a2):\n                return True\n        except:\n            n = 0\n        try:\n            x = (c2 - a2) // (c1 - a1)\n            y = c2 - c1 * x\n            xx = (c1 * a2 - c2 * a1) // (c2 - a2)\n            yy = c2 // (c1 + xx)\n            if (c1 * a2 - c2 * a1) % (c2 - a2) != 0:\n                xx = 0.4857454\n                yy = 0.294823\n            if b1 == b2 or b1 + y == b2 or b1 * x == b2 or (b1 + xx == b2) or (b1 * yy == b2):\n                return True\n        except:\n            n = 0\n    if len(ints) == 2 and len(set(ints)) == 1:\n        return True\n    if len(ints) == 2 and len(set(ints)) == 2 or len(ints) == 1:\n        try:\n            if a2 != b2 and a1 != b1:\n                if (a2 - b2) % (a1 - b1) == 0:\n                    x = (a2 - b2) // (a1 - b1)\n                    if a2 - a1 * x == b2 - b1 * x:\n                        y = a2 - a1 * x\n                        xx = (a1 * b2 - a2 * b1) // (a2 - b2)\n                        yy = a2 // (a1 + xx)\n                        if (a1 * b2 - a2 * b1) % (a2 - b2) != 0:\n                            xx = 0.4857454\n                            yy = 0.294823\n                        if c1 == c2 or c1 + y == c2 or c1 * x == c2 or (c1 + xx == c2) or (c1 * yy == c2):\n                            return True\n        except:\n            n = 0\n        try:\n            if b2 != c2 and b1 != c1:\n                if (b2 - c2) % (b1 - c1) == 0:\n                    x = (b2 - c2) // (b1 - c1)\n                    if b2 - b1 * x == c2 - c1 * x:\n                        y = b2 - b1 * x\n                        xx = (b1 * c2 - b2 * c1) // (b2 - c2)\n                        yy = b2 // (b1 + xx)\n                        if (b1 * c2 - b2 * c1) % (b2 - c2) != 0:\n                            xx = 0.4857454\n                            yy = 0.294823\n                        if a1 == a2 or a1 + y == a2 or a1 * x == a2 or (a1 + xx == a2) or (a1 * yy == a2):\n                            return True\n        except:\n            n = 0\n        try:\n            if c2 != a2 and c1 != a1:\n                if (c2 - a2) % (c1 - a1) == 0:\n                    x = (c2 - a2) // (c1 - a1)\n                    if c2 - c1 * x == a2 - a1 * x:\n                        y = c2 - c1 * x\n                        xx = (c1 * a2 - c2 * a1) // (c2 - a2)\n                        yy = c2 // (c1 + xx)\n                        if (c1 * a2 - c2 * a1) % (c2 - a2) != 0:\n                            xx = 0.4857454\n                            yy = 0.294823\n                        if b1 == b2 or b1 + y == b2 or b1 * x == b2 or (b1 + xx == b2) or (b1 * yy == b2):\n                            return True\n        except:\n            n = 0\n    return False\n\ndef ifGrid(a1, b1, c1, a2, b2, c2):\n    l = [[None, None, None], [None, None, None]]\n    l[0][0] = a2 - a1\n    l[0][1] = b2 - b1\n    l[0][2] = c2 - c1\n    try:\n        if a2 % a1 == 0:\n            l[1][0] = a2 // a1\n    except:\n        n = 0\n    try:\n        if b2 % b1 == 0:\n            l[1][1] = b2 // b1\n    except:\n        n = 0\n    try:\n        if c2 % c1 == 0:\n            l[1][2] = c2 // c1\n    except:\n        n = 0\n    if l[0][1] != None and l[1][2] != None:\n        if (a1 + l[0][1]) * l[1][2] == a2 or l[0][1] + a1 * l[1][2] == a2:\n            return True\n    if l[0][2] != None and l[1][1] != None:\n        if (a1 + l[0][2]) * l[1][1] == a2 or l[0][2] + a1 * l[1][1] == a2:\n            return True\n    if l[0][0] != None and l[1][2] != None:\n        if (b1 + l[0][0]) * l[1][2] == b2 or l[0][0] + b1 * l[1][2] == b2:\n            return True\n    if l[0][2] != None and l[1][0] != None:\n        if (b1 + l[0][2]) * l[1][0] == b2 or l[0][2] + b1 * l[1][0] == b2:\n            return True\n    if l[0][0] != None and l[1][1] != None:\n        if (c1 + l[0][0]) * l[1][1] == c2 or l[0][0] + c1 * l[1][1] == c2:\n            return True\n    if l[0][1] != None and l[1][0] != None:\n        if (c1 + l[0][1]) * l[1][0] == c2 or l[0][1] + c1 * l[1][0] == c2:\n            return True\n    return False\nt = int(input())\nwhile t:\n    t -= 1\n    (a1, b1, c1) = map(int, input().split())\n    (a2, b2, c2) = map(int, input().split())\n    ones = 0\n    zeros = 0\n    x = a2 - a1\n    y = b2 - b1\n    z = c2 - c1\n    try:\n        if a2 % a1 == 0:\n            x2 = a2 // a1\n        else:\n            x2 = 8.12248952\n    except:\n        x2 = 8.12248952\n    try:\n        if b2 % b1 == 0:\n            y2 = b2 // b1\n        else:\n            y2 = 43.82248952\n    except:\n        y2 = 43.82248952\n    try:\n        if c2 % c1 == 0:\n            z2 = c2 // c1\n        else:\n            z2 = 3.81118952\n    except:\n        z2 = 3.81118952\n    same = 0\n    if a1 == a2:\n        same += 1\n    if b1 == b2:\n        same += 1\n    if c1 == c2:\n        same += 1\n    if same == 3:\n        print(0)\n    elif same == 2:\n        print(1)\n    elif same == 1 and (x == y or y == z or z == x):\n        print(1)\n    elif same == 1 and (x2 == y2 and math.ceil(x2) == x2 or (y2 == z2 and math.ceil(y2) == y2) or (z2 == x2 and math.ceil(x2) == x2)):\n        print(1)\n    elif same == 0 and x == y == z:\n        print(1)\n    elif same == 0 and (x2 == y2 == z2 and math.ceil(x2) == x2):\n        print(1)\n    elif a2 == b2 == c2 == 0:\n        print(1)\n    elif a2 == b2 == 0 and c1 == c2:\n        print(1)\n    elif b2 == c2 == 0 and a1 == a2:\n        print(1)\n    elif c2 == a2 == 0 and b1 == b2:\n        print(1)\n    elif ifTwo(a1, b1, c1, a2, b2, c2) or ifCombo(x, y, z, x2, y2, z2) or ifDeno(a1, b1, c1, a2, b2, c2) or ifGrid(a1, b1, c1, a2, b2, c2):\n        print(2)\n    elif same == 1 and a1 == a2 and (y != z):\n        print(2)\n    elif same == 1 and b1 == b2 and (x != z):\n        print(2)\n    elif same == 1 and c1 == c2 and (x != y):\n        print(2)\n    elif same == 0 and (x == y or y == z or z == x):\n        print(2)\n    elif same == 1 and a1 == a2 and (y2 != z2 or math.ceil(y2) != y2):\n        print(2)\n    elif same == 1 and b1 == b2 and (x2 != z2 or math.ceil(x2) != x2):\n        print(2)\n    elif same == 1 and c1 == c2 and (x2 != y2 or math.ceil(x2) != x2):\n        print(2)\n    elif same == 0 and (x2 == y2 and math.ceil(x2) == x2 or (y2 == z2 and math.ceil(y2) == y2) or (z2 == x2 and math.ceil(x2) == x2)):\n        print(2)\n    else:\n        print(3)", "def case1(p, q, r, a, b, c):\n    for i in range(2):\n        if i == 0:\n            d = a - p\n            if (q + d == b or q == b) and (r + d == c or r == c):\n                return 1\n        elif i == 1 and p != 0 and (a % p == 0):\n            d = a // p\n            if (q * d == b or q == b) and (r * d == c or r == c):\n                return 1\n    return 0\n\ndef case2(p, q, r, a, b, c):\n    if p == a:\n        if b - q != c - r:\n            if q != 0 and r != 0:\n                diff1 = b / q\n                diff2 = c / r\n                if int(diff1) == diff1 and int(diff2) == diff2:\n                    if diff1 != diff2:\n                        return 2\n    x = a - p\n    y = b - q\n    z = c - r\n    new = [x, y, z]\n    if len(set(new)) == 2 and 0 not in set(new):\n        return 2\n    if len(set(new)) == 3 and 0 in new:\n        return 2\n    if p != 0 and q != 0 and (r != 0) and (r != c):\n        r1 = a / p\n        r2 = b / q\n        r3 = c / r\n        if int(r1) == r1 and int(r2) == r2 and (r1 == r2):\n            if int(r3) == r3 and r3 != r1:\n                return 2\n    diff1 = a - p\n    diff2 = b - q\n    diff3 = c - r\n    if diff1 == diff2 and diff1 != diff3:\n        return 2\n    d1 = a - p\n    d2 = b - q\n    d3 = c - r\n    if d1 == d2 or d2 == d3 or d1 == d3 or (d1 + d2 == d3) or (d1 + d3 == d2) or (d2 + d3 == d1):\n        return 2\n    if d1 == 0 and d2 != d3 and (d2 != 0) and (d3 != 0) or (d2 == 0 and d1 != d3 and (d1 != 0) and (d3 != 0)) or (d3 == 0 and d2 != d1 and (d1 != 0) and (d2 != 0)):\n        return 2\n    elif d1 != d2 and d2 == d3 or (d1 != d3 and d2 == d1) or (d3 != d2 and d1 == d3):\n        return 2\n    elif (p != 0 and a % p == 0) and (q != 0 and b % q == 0) and (r != 0 and c % r == 0):\n        f1 = a // p\n        f2 = b // q\n        f3 = c // r\n        if f1 == f2 or f2 == f3 or f3 == f1:\n            return 2\n        elif f3 == f1 * f2 or f2 == f1 * f3 or f1 == f2 * f3:\n            return 2\n    if a - b != 0:\n        x = (p * b - q * a) / (a - b)\n        if p + x != 0:\n            y = a / (p + x)\n            if x == int(x) and y == int(y):\n                if (r + x) * y == c or r + x == c or r * y == c:\n                    return 2\n    if q != 0:\n        y = b / q\n        if y != 0:\n            x = a / y - p\n            if x == int(x) and y == int(y):\n                if (r + x) * y == c or r + x == c or r * y == c or (r == c):\n                    return 2\n    x = b - q\n    if p + x != 0:\n        y = a / (p + x)\n        if x == int(x) and y == int(y):\n            if (r + x) * y == c or r + x == c or r * y == c or (r == c):\n                return 2\n    if p - q != 0:\n        y = (p * b - a * q) / (p - q)\n        if p != 0:\n            x = (a - y) / p\n            if x == int(x) and y == int(y):\n                if r * x + y == c or r + y == c or r * x == c:\n                    return 2\n    if q != 0:\n        x = b / q\n        y = a - p * x\n        if x == int(x) and y == int(y):\n            if r * x + y == c or r + y == c or r * x == c or (r == c):\n                return 2\n    y = b - q\n    if p != 0:\n        x = (a - y) / p\n        if x == int(x) and y == int(y):\n            if r * x + y == c or r + y == c or r * x == c or (r == c):\n                return 2\n    return 0\nfor _ in range(int(input())):\n    start = list(map(int, input().split()))\n    stop = list(map(int, input().split()))\n    if start == stop:\n        print(0)\n        continue\n    p = start[0]\n    q = start[1]\n    r = start[2]\n    a = stop[0]\n    b = stop[1]\n    c = stop[2]\n    out = case1(p, q, r, a, b, c)\n    if out == 1:\n        print(1)\n        continue\n    out = case1(p, r, q, a, c, b)\n    if out == 1:\n        print(1)\n        continue\n    out = case1(q, p, r, b, a, c)\n    if out == 1:\n        print(1)\n        continue\n    out = case1(q, r, p, b, c, a)\n    if out == 1:\n        print(1)\n        continue\n    out = case1(r, p, q, c, a, b)\n    if out == 1:\n        print(1)\n        continue\n    out = case1(r, q, p, c, b, a)\n    if out == 1:\n        print(1)\n        continue\n    x = a - p\n    y = b - q\n    z = c - r\n    new = [x, y, z]\n    if len(set(new)) == 2:\n        print(2)\n        continue\n    if len(set(new)) == 3 and 0 in new:\n        print(2)\n        continue\n    out = case2(p, q, r, a, b, c)\n    if out == 2:\n        print(2)\n        continue\n    out = case2(p, r, q, a, c, b)\n    if out == 2:\n        print(2)\n        continue\n    out = case2(q, p, r, b, a, c)\n    if out == 2:\n        print(2)\n        continue\n    out = case2(q, r, p, b, c, a)\n    if out == 2:\n        print(2)\n        continue\n    out = case2(r, p, q, c, a, b)\n    if out == 2:\n        print(2)\n        continue\n    out = case2(r, q, p, c, b, a)\n    if out == 2:\n        print(2)\n        continue\n    print(3)", "for t in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    (p, q, r) = map(int, input().split())\n    x = p - a\n    y = q - b\n    z = r - c\n    flag = 1\n    if a != 0 and b != 0 and (c != 0) and (p == 0) and (q == 0) and (r == 0):\n        print(1)\n        flag = 0\n        continue\n    if x == 0 and y == 0 and (z == 0):\n        print(0)\n        flag = 0\n        continue\n    if p != 0 and q != 0 and (r != 0) and (a != 0) and (b != 0) and (c != 0):\n        m = p / a\n        n = q / b\n        o = r / c\n        if x == 0 and y == 0 and (z != 0) or (x == 0 and y != 0 and (z == 0)) or (x != 0 and y == 0 and (z == 0)) or (m == 1 and n == 1 and (o != 1)) or (m == 1 and n != 1 and (o == 1)) or (m != 1 and n == 1 and (o == 1)) or (x == 0 and y != 0 and (y == z)) or (x != 0 and y == 0 and (z == x)) or (x != 0 and y == x and (z == 0)) or (m != 1 and n == m and (o == 1)) or (m != 1 and n == 1 and (o == m)) or (m == 1 and n != 1 and (o == n)) or (x == y and y == z and (x != 0)) or (m == n and n == o and (m != 1)):\n            print(1)\n            flag = 0\n            continue\n    if p == 0 or q == 0 or r == 0 or (a == 0) or (b == 0) or (c == 0):\n        if x == 0 and y == 0 and (z != 0) or (x == 0 and y != 0 and (z == 0)) or (x != 0 and y == 0 and (z == 0)) or (x == 0 and y != 0 and (y == z)) or (x != 0 and y == 0 and (z == x)) or (x != 0 and y == x and (z == 0)) or (x == y and y == z and (x != 0)):\n            print(1)\n            flag = 0\n            continue\n    if a == 0 and p == 0 and (b != 0) and (c != 0) and (q % b == 0) and (r % c == 0) and (q / b == r / c) or (b == 0 and q == 0 and (a != 0) and (c != 0) and (p % a == 0) and (r % c == 0) and (p / a == r / c)) or (c == 0 and r == 0 and (a != 0) and (b != 0) and (p % a == 0) and (q % b == 0) and (p / a == q / b)):\n        print(1)\n        flag = 0\n        continue\n    if flag != 0:\n        if x + y == z or x + z == y or z + y == x or (x == y) or (y == z) or (x == z):\n            print(2)\n            flag = 0\n            continue\n        if x == 0 or z == 0 or y == 0:\n            print(2)\n            flag = 0\n            continue\n        if a != 0 and b != 0 and (c != 0):\n            if p % a == 0 and q % b == 0 and (r % c == 0):\n                x = p / a\n                y = q / b\n                z = r / c\n                if x * y == z or y * z == x or z * x == y or (x == y) or (y == z) or (x == z):\n                    print(2)\n                    flag = 0\n                    continue\n                if x == 1 or y == 1 or z == 1:\n                    print(2)\n                    flag = 0\n                    continue\n        if p - q != 0:\n            x = (a * q - b * p) / (p - q)\n            if a + x != 0 and p % (a + x) == 0:\n                y = p / (a + x)\n                if c + x == r or c * y == r or (c + x) * y == r:\n                    print(2)\n                    flag = 0\n                    continue\n        if q - r != 0:\n            x = (b * r - c * q) / (q - r)\n            if b + x != 0 and q % (b + x) == 0:\n                y = q / (b + x)\n                if a + x == p or a * y == p or (a + x) * y == p:\n                    print(2)\n                    flag = 0\n                    continue\n        if r - p != 0:\n            x = (c * p - a * r) / (r - p)\n            if c + x != 0 and r % (c + x) == 0:\n                y = r / (c + x)\n                if b + x == q or b * y == q or (b + x) * y == q:\n                    print(2)\n                    flag = 0\n                    continue\n        if a == 0 and b != 0 and (c != 0) and (p != 0) and (q != 0) and (r != 0) and (q % b == 0) and (r % c == 0) and (q / b == r / c):\n            print(2)\n            flag = 0\n            continue\n        if a != 0 and b == 0 and (c != 0) and (p != 0) and (q != 0) and (r != 0) and (p % a == 0) and (r % c == 0) and (p / a == r / c):\n            print(2)\n            flag = 0\n            continue\n        if a != 0 and b != 0 and (c == 0) and (p != 0) and (q != 0) and (r != 0) and (q % b == 0) and (p % a == 0) and (p / a == q / b):\n            print(2)\n            flag = 0\n            continue\n        if a != 0 and b != 0 and (c != 0):\n            if p % a == 0 and q % b == 0 and (p / a == q / b) or (q % b == 0 and r % c == 0 and (q / b == r / c)) or (r % c == 0 and p % a == 0 and (r / c == p / a)):\n                print(2)\n                flag = 0\n                continue\n        if a - b != 0 and (p - q) % (a - b) == 0:\n            x = (p - q) / (a - b)\n            y = p - a * x\n            if c * x == r or c + y == r or c * x + y == r:\n                print(2)\n                flag = 0\n                continue\n        if b - c != 0 and (q - r) % (b - c) == 0:\n            x = (q - r) / (b - c)\n            y = q - b * x\n            if a * x == p or a + y == p or a * x + y == p:\n                print(2)\n                flag = 0\n                continue\n        if c - a != 0 and (r - p) % (c - a) == 0:\n            x = (r - p) / (c - a)\n            y = r - c * x\n            if b * x == q or b + y == q or b * x + y == q:\n                print(2)\n                flag = 0\n                continue\n        if c != 0 and r % c == 0:\n            if (a + q - b) * (r / c) == p or (b + p - a) * (r / c) == q or a * (r / c) + q - b == p or (b * (r / c) + p - a == q):\n                print(2)\n                flag = 0\n                continue\n        if a != 0 and p % a == 0:\n            if (b + r - c) * (p / a) == q or (c + q - b) * (p / a) == r or b * (p / a) + r - c == q or (c * (p / a) + q - b == r):\n                print(2)\n                flag = 0\n                continue\n        if b != 0 and q % b == 0:\n            if (a + r - c) * (q / b) == p or (c + p - a) * (q / b) == r or a * (q / b) + r - c == p or (c * (q / b) + p - a == r):\n                print(2)\n                flag = 0\n                continue\n    if flag != 0:\n        print(3)\n        flag = 0\n        continue", "for t in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    (p, q, r) = map(int, input().split())\n    x = p - a\n    y = q - b\n    z = r - c\n    flag = 1\n    if a != 0 and b != 0 and (c != 0) and (p == 0) and (q == 0) and (r == 0):\n        print(1)\n        flag = 0\n        continue\n    if x == 0 and y == 0 and (z == 0):\n        print(0)\n        flag = 0\n        continue\n    if p != 0 and q != 0 and (r != 0) and (a != 0) and (b != 0) and (c != 0):\n        m = p / a\n        n = q / b\n        o = r / c\n        if x == 0 and y == 0 and (z != 0) or (x == 0 and y != 0 and (z == 0)) or (x != 0 and y == 0 and (z == 0)) or (m == 1 and n == 1 and (o != 1)) or (m == 1 and n != 1 and (o == 1)) or (m != 1 and n == 1 and (o == 1)) or (x == 0 and y != 0 and (y == z)) or (x != 0 and y == 0 and (z == x)) or (x != 0 and y == x and (z == 0)) or (m != 1 and n == m and (o == 1)) or (m != 1 and n == 1 and (o == m)) or (m == 1 and n != 1 and (o == n)) or (x == y and y == z and (x != 0)) or (m == n and n == o and (m != 1)):\n            print(1)\n            flag = 0\n            continue\n    if p == 0 or q == 0 or r == 0 or (a == 0) or (b == 0) or (c == 0):\n        if x == 0 and y == 0 and (z != 0) or (x == 0 and y != 0 and (z == 0)) or (x != 0 and y == 0 and (z == 0)) or (x == 0 and y != 0 and (y == z)) or (x != 0 and y == 0 and (z == x)) or (x != 0 and y == x and (z == 0)) or (x == y and y == z and (x != 0)):\n            print(1)\n            flag = 0\n            continue\n    if a == 0 and p == 0 and (b != 0) and (c != 0) and (q % b == 0) and (r % c == 0) and (q / b == r / c) or (b == 0 and q == 0 and (a != 0) and (c != 0) and (p % a == 0) and (r % c == 0) and (p / a == r / c)) or (c == 0 and r == 0 and (a != 0) and (b != 0) and (p % a == 0) and (q % b == 0) and (p / a == q / b)):\n        print(1)\n        flag = 0\n        continue\n    if flag != 0:\n        if x + y == z or x + z == y or z + y == x or (x == y) or (y == z) or (x == z):\n            print(2)\n            flag = 0\n            continue\n        if x == 0 or z == 0 or y == 0:\n            print(2)\n            flag = 0\n            continue\n        if a != 0 and b != 0 and (c != 0):\n            if p % a == 0 and q % b == 0 and (r % c == 0):\n                x = p / a\n                y = q / b\n                z = r / c\n                if x * y == z or y * z == x or z * x == y or (x == y) or (y == z) or (x == z):\n                    print(2)\n                    flag = 0\n                    continue\n                if x == 1 or y == 1 or z == 1:\n                    print(2)\n                    flag = 0\n                    continue\n        if p - q != 0:\n            x = (a * q - b * p) / (p - q)\n            if a + x != 0 and p % (a + x) == 0:\n                y = p / (a + x)\n                if c + x == r or c * y == r or (c + x) * y == r:\n                    print(2)\n                    flag = 0\n                    continue\n        if q - r != 0:\n            x = (b * r - c * q) / (q - r)\n            if b + x != 0 and q % (b + x) == 0:\n                y = q / (b + x)\n                if a + x == p or a * y == p or (a + x) * y == p:\n                    print(2)\n                    flag = 0\n                    continue\n        if r - p != 0:\n            x = (c * p - a * r) / (r - p)\n            if c + x != 0 and r % (c + x) == 0:\n                y = r / (c + x)\n                if b + x == q or b * y == q or (b + x) * y == q:\n                    print(2)\n                    flag = 0\n                    continue\n        if a == 0 and b != 0 and (c != 0) and (p != 0) and (q != 0) and (r != 0) and (q % b == 0) and (r % c == 0) and (q / b == r / c):\n            print(2)\n            flag = 0\n            continue\n        if a != 0 and b == 0 and (c != 0) and (p != 0) and (q != 0) and (r != 0) and (p % a == 0) and (r % c == 0) and (p / a == r / c):\n            print(2)\n            flag = 0\n            continue\n        if a != 0 and b != 0 and (c == 0) and (p != 0) and (q != 0) and (r != 0) and (q % b == 0) and (p % a == 0) and (p / a == q / b):\n            print(2)\n            flag = 0\n            continue\n        if a != 0 and b != 0 and (c != 0):\n            if p % a == 0 and q % b == 0 and (p / a == q / b) or (q % b == 0 and r % c == 0 and (q / b == r / c)) or (r % c == 0 and p % a == 0 and (r / c == p / a)):\n                print(2)\n                flag = 0\n                continue\n        if a - b != 0 and (p - q) % (a - b) == 0:\n            x = (p - q) / (a - b)\n            y = p - a * x\n            if c * x == r or c + y == r or c * x + y == r:\n                print(2)\n                flag = 0\n                continue\n        if b - c != 0 and (q - r) % (b - c) == 0:\n            x = (q - r) / (b - c)\n            y = q - b * x\n            if a * x == p or a + y == p or a * x + y == p:\n                print(2)\n                flag = 0\n                continue\n        if c - a != 0 and (r - p) % (c - a) == 0:\n            x = (r - p) / (c - a)\n            y = r - c * x\n            if b * x == q or b + y == q or b * x + y == q:\n                print(2)\n                flag = 0\n                continue\n        if c != 0 and r % c == 0:\n            if (a + q - b) * (r / c) == p or (b + p - a) * (r / c) == q or a * (r / c) + q - b == p or (b * (r / c) + p - a == q):\n                print(2)\n                flag = 0\n                continue\n        if a != 0 and p % a == 0:\n            if (b + r - c) * (p / a) == q or (c + q - b) * (p / a) == r or b * (p / a) + r - c == q or (c * (p / a) + q - b == r):\n                print(2)\n                flag = 0\n                continue\n        if b != 0 and q % b == 0:\n            if (a + r - c) * (q / b) == p or (c + p - a) * (q / b) == r or a * (q / b) + r - c == p or (c * (q / b) + p - a == r):\n                print(2)\n                flag = 0\n                continue\n    if flag != 0:\n        print(3)\n        flag = 0\n        continue", "from sys import stdin, stdout\nimport itertools\n\ndef input():\n    return stdin.readline()\n\ndef combinations(a, b, c):\n    p = itertools.permutations([a, b, c])\n    return list(p)\nt = int(input())\nfor _ in range(t):\n    flag = 0\n    (a, b, c) = map(int, input().split())\n    (p, q, r) = map(int, input().split())\n    l1 = combinations(a, b, c)\n    l2 = combinations(p, q, r)\n    while True:\n        if a == p and b == q and (c == r):\n            flag = 1\n            print(0)\n            break\n        if a == p and b == q and (c != r) or (a == p and b != q and (c == r)) or (a != p and b == q and (c == r)):\n            flag = 1\n            print(1)\n            break\n        if a == p and b != q and (c != r):\n            x = q - b\n            if c + x == r:\n                flag = 1\n                print(1)\n                break\n            if b != 0:\n                x = q / b\n                if int(x) == x and c * x == r:\n                    flag = 1\n                    print(1)\n                    break\n        if a != p and b == q and (c != r):\n            x = p - a\n            if c + x == r:\n                flag = 1\n                print(1)\n                break\n            if a != 0:\n                x = p / a\n                if int(x) == x and c * x == r:\n                    flag = 1\n                    print(1)\n                    break\n        if a != p and b != q and (c == r):\n            x = q - b\n            if a + x == p:\n                flag = 1\n                print(1)\n                break\n            if a != 0:\n                x = p / a\n                if int(x) == x and b * x == q:\n                    flag = 1\n                    print(1)\n                    break\n        if a != p and b != q and (c != r):\n            x = p - a\n            if b + x == q and c + x == r:\n                flag = 1\n                print(1)\n                break\n            if a != 0:\n                x = p / a\n                if int(x) == x and b * x == q and (c * x == r):\n                    flag = 1\n                    print(1)\n                    break\n        if a == p and b != q and (c != r) or (a != p and b == q and (c != r)) or (a != p and b != q and (c == r)):\n            flag = 1\n            print(2)\n            break\n        if a != p and b != q and (c != r):\n            x = p - a\n            if b + x == q or c + x == r:\n                flag = 1\n                print(2)\n                break\n            x = q - b\n            if c + x == r:\n                flag = 1\n                print(2)\n                break\n            if a != 0:\n                x = p / a\n                if int(x) == x and (b * x == q or c * x == r):\n                    flag = 1\n                    print(2)\n                    break\n            if b != 0:\n                x = q / b\n                if int(x) == x and c * x == r:\n                    flag = 1\n                    print(2)\n                    break\n\n        def check0_2(a, b, c, p, q, r):\n            if c != b:\n                x = (r - q) / (c - b)\n                y = (c * q - r * b) / (c - b)\n                if int(x) == x and int(y) == y and (a * x + y == p):\n                    return True\n            return False\n        for i in range(6):\n            res = check0_2(l1[i][0], l1[i][1], l1[i][2], l2[i][0], l2[i][1], l2[i][2])\n            if res == True:\n                flag = 1\n                print(2)\n                break\n        if res == True:\n            break\n\n        def check00_2(a, b, c, p, q, r):\n            if c != b:\n                y = (r - q) / (c - b)\n                if y != 0:\n                    x = (q * c - r * b) / (r - q)\n                    if int(y) == y and int(x) == x and ((a + x) * y == p):\n                        return True\n            return False\n        for i in range(6):\n            res = check00_2(l1[i][0], l1[i][1], l1[i][2], l2[i][0], l2[i][1], l2[i][2])\n            if res == True:\n                flag = 1\n                print(2)\n                break\n        if res:\n            break\n\n        def check1_2(a, b, c, p, q, r):\n            if b != 0:\n                y = q / b\n                if int(y) == y and c * y == r and (y != 0):\n                    x = p / y - a\n                    if int(x) == x:\n                        return True\n            return False\n        for i in range(6):\n            res = check1_2(l1[i][0], l1[i][1], l1[i][2], l2[i][0], l2[i][1], l2[i][2])\n            if res == True:\n                flag = 1\n                print(2)\n                break\n        if res == True:\n            break\n\n        def check2_2(a, b, c, p, q, r):\n            x = q - b\n            if c + x == r and a != 0:\n                y = (p - x) / a\n                if int(y) == y:\n                    return True\n            return False\n        for i in range(6):\n            res = check2_2(l1[i][0], l1[i][1], l1[i][2], l2[i][0], l2[i][1], l2[i][2])\n            if res == True:\n                flag = 1\n                print(2)\n                break\n        if res == True:\n            break\n\n        def check3_2(a, b, c, p, q, r):\n            if c != 0:\n                y = r / c\n                if y != 0:\n                    x = q / y - b\n                    x1 = p / y - a\n                    if int(y) == y and int(x) == x and (int(x1) == x1) and (x == x1):\n                        return True\n            return False\n        for i in range(6):\n            res = check3_2(l1[i][0], l1[i][1], l1[i][2], l2[i][0], l2[i][1], l2[i][2])\n            if res == True:\n                flag = 1\n                print(2)\n                break\n        if res == True:\n            break\n\n        def check4_2(a, b, c, p, q, r):\n            x = r - c\n            if b != 0:\n                y = (q - x) / b\n                if a != 0:\n                    y1 = (p - x) / a\n                    if int(y) == y and int(y1) == y1 and (y == y1):\n                        return True\n            return False\n        for i in range(6):\n            res = check4_2(l1[i][0], l1[i][1], l1[i][2], l2[i][0], l2[i][1], l2[i][2])\n            if res == True:\n                flag = 1\n                print(2)\n                break\n        if res == True:\n            break\n\n        def check5_2(a, b, c, p, q, r):\n            x = q - b\n            y = r - c\n            if p - x - y == a:\n                return True\n            return False\n        for i in range(6):\n            res = check5_2(l1[i][0], l1[i][1], l1[i][2], l2[i][0], l2[i][1], l2[i][2])\n            if res == True:\n                flag = 1\n                print(2)\n                break\n        if res == True:\n            break\n\n        def check6_2(a, b, c, p, q, r):\n            if c != 0:\n                y = r / c\n                if b != 0:\n                    x = q / b\n                    if a != 0 and y != 0:\n                        x1 = p / (a * y)\n                        if int(y) == y and int(x) == x and (int(x1) == x1) and (x == x1):\n                            return True\n            return False\n        for i in range(6):\n            res = check6_2(l1[i][0], l1[i][1], l1[i][2], l2[i][0], l2[i][1], l2[i][2])\n            if res == True:\n                flag = 1\n                print(2)\n                break\n        if res == True:\n            break\n\n        def check7_2(a, b, c, p, q, r):\n            x = r - c\n            y = q - b - x\n            if p - x - y == a:\n                return True\n            return False\n        for i in range(6):\n            res = check7_2(l1[i][0], l1[i][1], l1[i][2], l2[i][0], l2[i][1], l2[i][2])\n            if res == True:\n                flag = 1\n                print(2)\n                break\n        if res == True:\n            break\n\n        def check8_2(a, b, c, p, q, r):\n            if c != 0:\n                x = r / c\n                if x != 0 and b != 0 and (a != 0):\n                    y = q / (b * x)\n                    y1 = p / (a * x)\n                    if int(x) == x and int(y) == y and (int(y1) == y1) and (y == y1):\n                        return True\n            return False\n        for i in range(6):\n            res = check8_2(l1[i][0], l1[i][1], l1[i][2], l2[i][0], l2[i][1], l2[i][2])\n            if res == True:\n                flag = 1\n                print(2)\n                break\n        if res == True:\n            break\n\n        def check9_2(a, b, c, p, q, r):\n            x = p - a\n            if c != 0:\n                y = r / c\n                if y != 0:\n                    y1 = q / y - x\n                    if int(y) == y and int(y1) == y1 and (y1 == b) and (y == y1):\n                        return True\n            return False\n        for i in range(6):\n            res = check9_2(l1[i][0], l1[i][1], l1[i][2], l2[i][0], l2[i][1], l2[i][2])\n            if res == True:\n                flag = 1\n                print(2)\n                break\n        if res == True:\n            break\n\n        def check10_2(a, b, c, p, q, r):\n            if c != 0:\n                y = r / c\n                x = q - b\n                if int(y) == y and (a + x) * y == p:\n                    return True\n            return False\n        for i in range(6):\n            res = check10_2(l1[i][0], l1[i][1], l1[i][2], l2[i][0], l2[i][1], l2[i][2])\n            if res == True:\n                flag = 1\n                print(2)\n                break\n        if res:\n            break\n\n        def check11_2(a, b, c, p, q, r):\n            if c != 0:\n                y = r / c\n                if int(y) == y and b * y == q:\n                    x = p - a * y\n                    return True\n            return False\n        for i in range(6):\n            res = check11_2(l1[i][0], l1[i][1], l1[i][2], l2[i][0], l2[i][1], l2[i][2])\n            if res == True:\n                flag = 1\n                print(2)\n                break\n        if res:\n            break\n\n        def check12_2(a, b, c, p, q, r):\n            x = r - c\n            if b + x == q and a + x != 0:\n                y = p / (a + x)\n                if int(y) == y:\n                    return True\n            return False\n        for i in range(6):\n            res = check12_2(l1[i][0], l1[i][1], l1[i][2], l2[i][0], l2[i][1], l2[i][2])\n            if res == True:\n                flag = 1\n                print(2)\n                break\n        if res:\n            break\n\n        def check13_2(a, b, c, p, q, r):\n            if c != 0:\n                y = r / c\n                x = q - b * y\n                if int(x) == x and int(y) == y and (a * y + x == p):\n                    return True\n            return False\n        for i in range(6):\n            res = check13_2(l1[i][0], l1[i][1], l1[i][2], l2[i][0], l2[i][1], l2[i][2])\n            if res == True:\n                flag = 1\n                print(2)\n                break\n        if res:\n            break\n\n        def check14_2(a, b, c, p, q, r):\n            x = r - c\n            if b + x != 0:\n                y = q / (b + x)\n                if int(y) == y and (a + x) * y == p:\n                    return True\n            return False\n        for i in range(6):\n            res = check14_2(l1[i][0], l1[i][1], l1[i][2], l2[i][0], l2[i][1], l2[i][2])\n            if res == True:\n                flag = 1\n                print(2)\n                break\n        if res:\n            break\n\n        def check15_2(a, b, c, p, q, r):\n            x = r - c\n            if b != 0:\n                y = q / b\n                if int(y) == y and a * y + x == p:\n                    return True\n            return False\n        for i in range(6):\n            res = check15_2(l1[i][0], l1[i][1], l1[i][2], l2[i][0], l2[i][1], l2[i][2])\n            if res == True:\n                flag = 1\n                print(2)\n                break\n        if res:\n            break\n        break\n    if flag == 0:\n        print(3)", "def CheckForTwoEq(p, a, q, b):\n    if p == a or q == b:\n        return True\n    if a - p == b - q:\n        return True\n    if p != 0 and q != 0 and (a % p == 0) and (b % q == 0) and (a / p == b / q):\n        return True\n    return False\n\ndef Ccide(p, a, q, b, r, c):\n    x = b - a\n    d = q - p\n    if d != 0:\n        y = a - 1 * p * (x / d)\n        if 1 * r * (x / d) + y == c:\n            if x % d == 0:\n                return True\n        if x % d == 0 and r + y == c:\n            return True\n        if x % d == 0 and r * x == c:\n            return True\n    return False\nfor _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    (a, b, c) = map(int, input().split())\n    if p == a and q == b and (r == c):\n        print(0)\n        continue\n    if p == a and CheckForTwoEq(q, b, r, c) or (q == b and CheckForTwoEq(p, a, r, c)) or (r == c and CheckForTwoEq(q, b, p, a)):\n        print(1)\n        continue\n    diff = a - p\n    if q + diff == b and r + diff == c:\n        print(1)\n        continue\n    if p != 0 and a % p == 0:\n        diff = a / p\n        if q * diff == b and r * diff == c:\n            print(1)\n            continue\n    d = 0\n    if p != 0 and a % p == 0:\n        d = a / p\n        if CheckForTwoEq(q * d, b, r * d, c) or CheckForTwoEq(q * d, b, r, c) or CheckForTwoEq(q, b, r * d, c) or CheckForTwoEq(q, b, r, c):\n            print(2)\n            continue\n    d = a - p\n    if CheckForTwoEq(q + d, b, r + d, c) or CheckForTwoEq(q + d, b, r, c) or CheckForTwoEq(q, b, r + d, c) or CheckForTwoEq(q, b, r, c):\n        print(2)\n        continue\n    if q != 0 and b % q == 0:\n        d = b / q\n        if CheckForTwoEq(p * d, a, r * d, c) or CheckForTwoEq(p * d, a, r, c) or CheckForTwoEq(p, a, r * d, c) or CheckForTwoEq(p, a, r, c):\n            print(2)\n            continue\n    d = b - q\n    if CheckForTwoEq(p + d, a, r + d, c) or CheckForTwoEq(p + d, a, r, c) or CheckForTwoEq(p, a, r + d, c) or CheckForTwoEq(p, a, r, c):\n        print(2)\n        continue\n    if r != 0 and c % r == 0:\n        d = c / r\n        if CheckForTwoEq(q * d, b, p * d, a) or CheckForTwoEq(q * d, b, p, a) or CheckForTwoEq(q, b, p * d, a) or CheckForTwoEq(q, b, p, a):\n            print(2)\n            continue\n    d = c - r\n    if CheckForTwoEq(q + d, b, p + d, a) or CheckForTwoEq(q + d, b, p, a) or CheckForTwoEq(q, b, p + d, a) or CheckForTwoEq(q, b, p, a):\n        print(2)\n        continue\n    if Ccide(p, a, q, b, r, c) or Ccide(p, a, r, c, q, b) or Ccide(q, b, r, c, p, a):\n        print(2)\n        continue\n    print(3)", "def gOP(X):\n    (ad, md, Y, t) = ([], [], [], 0)\n    for (i, j) in X:\n        if i != j:\n            Y.append([i, j])\n    for (i, j) in Y:\n        ad.append(j - i)\n        if j == 0:\n            md.append(0)\n        elif i != 0 and j % i == 0:\n            md.append(j // i)\n        else:\n            t += 1\n    return min(len(set(ad)), t + len(set(md)))\na = ''\nfor _ in range(int(input())):\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    if x == y:\n        a += '0\\n'\n        continue\n    (X, ad, md, t, f) = ([], [], [], 0, False)\n    for i in range(3):\n        if x[i] != y[i]:\n            X.append([x[i], y[i]])\n    for (i, j) in X:\n        ad.append(j - i)\n        if j == 0:\n            md.append(0)\n        elif i != 0 and j % i == 0:\n            md.append(j // i)\n        else:\n            t += 1\n    res = min(len(set(ad)), t + len(set(md)))\n    if res < 3:\n        a += str(res) + '\\n'\n        continue\n    (dd, Mmd, Mad) = ([], [], [])\n    for i in range(3):\n        for j in range(i + 1, 3):\n            dd.append([x[i] - x[j], y[i] - y[j]])\n    for k in range(3):\n        i = dd[k][0]\n        j = dd[k][1]\n        if i != 0 and j % i == 0:\n            Mmd.append(j // i)\n            for l in range(3):\n                aa = x[l]\n                bb = y[l]\n                if j // i != 0 and bb % (j // i) == 0:\n                    Mad.append(bb // (j // i) - aa)\n    (tres, xx, tt, ii) = ([], [[x[0], x[1]], [x[1], x[2]], [x[0], x[2]]], [[y[0], y[1]], [y[1], y[2]], [y[0], y[2]]], [2, 0, 1])\n    for i in ad + Mad:\n        sx = [4]\n        for k in range(len(xx)):\n            if not (xx[k][0] + i != tt[k][0] and xx[k][1] + i != tt[k][1]):\n                sx.append(ii[k])\n        if len(sx) == 1:\n            sx.extend([0, 1, 2])\n        for k in sx:\n            (ax, aX) = ([x[j] if k == j else i + x[j] for j in range(len(x))], [])\n            for l in range(3):\n                aX.append([ax[l], y[l]])\n            tres.append(gOP(aX) + 1)\n            if tres[-1] == 2:\n                a += '2\\n'\n                f = True\n                break\n        if f:\n            break\n    if f:\n        continue\n    for i in md + Mmd:\n        sx = [4]\n        for k in range(len(xx)):\n            try:\n                if not (tt[k][0] / xx[k][0] == i and tt[k][1] / xx[k][1] == i):\n                    sx.append(ii[k])\n            except:\n                continue\n        if len(sx) == 1:\n            sx.extend([2, 1, 0])\n        for k in sx:\n            (mx, mX) = ([x[j] if k == j else i * x[j] for j in range(len(x))], [])\n            for l in range(3):\n                mX.append([mx[l], y[l]])\n            tres.append(gOP(mX) + 1)\n            if tres[-1] == 2:\n                a += '2\\n'\n                f = True\n                break\n        if f:\n            break\n    if f:\n        continue\n    res = min(res, min(tres))\n    a += str(res) + '\\n'\nprint(a)", "import math\ndpkg = 12345\nab = 8845\nfor _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    (a, b, c) = map(int, input().split())\n    x = a - p\n    y = b - q\n    z = c - r\n    ans = 3\n    if p == a and q == b and (r == c):\n        ans = 0\n    if ans != 0:\n        if a == 0 and b == 0 and (c == 0):\n            ans = 1\n        if p == a and q == b or (q == b and r == c) or (r == c and p == a) or (x == y and z == 0) or (y == z and x == 0) or (z == x and y == 0) or (x == y and y == z and (z == x)):\n            ans = 1\n        if p == a or q == b or r == c:\n            if p == a:\n                if q - b == r - c:\n                    ans = 1\n                elif q != 0 and b % q == 0 and (r != 0) and (c % r == 0) and (b / q == c / r):\n                    ans = 1\n            elif q == b:\n                if p - a == r - c:\n                    ans == 1\n                elif p != 0 and a % p == 0 and (r != 0) and (c % r == 0) and (a / p == c / r):\n                    ans = 1\n            elif p - a == q - b:\n                ans = 1\n            elif q != 0 and b % q == 0 and (p != 0) and (a % p == 0) and (b / q == a / p):\n                ans = 1\n        if p - a == q - b and q - b == r - c or (p != 0 and q != 0 and (r != 0) and (a % p == 0) and (b % q == 0) and (c % r == 0) and (a / p == b / q) and (a / p == c / r)):\n            ans = 1\n    if ans != 1 and ans != 0:\n        if a == p or b == q or c == r:\n            ans = 2\n        if x + y == z or x + z == y or y + z == x or (x == y) or (y == z) or (z == x):\n            ans = 2\n        if p != 0 and q != 0 and (r != 0):\n            if a % p == 0 and b % q == 0 and (c % r == 0):\n                x = a / p\n                y = b / q\n                z = c / r\n                if x * y == z or x * z == y or y * z == x or (x == y) or (y == z) or (z == x):\n                    ans = 2\n        factors = []\n        for i in range(1, int(math.sqrt(abs(a))) + 1):\n            if a % i == 0:\n                if a / i == i:\n                    factors.append(i)\n                    factors.append(-i)\n                else:\n                    factors.append(i)\n                    factors.append(-i)\n                    factors.append(a // i)\n                    factors.append(-1 * (a // i))\n        for i in range(1, int(math.sqrt(abs(b))) + 1):\n            if b % i == 0:\n                if b / i == i:\n                    factors.append(i)\n                    factors.append(-i)\n                else:\n                    factors.append(i)\n                    factors.append(-i)\n                    factors.append(b // i)\n                    factors.append(-1 * (b // i))\n        for i in range(1, int(math.sqrt(abs(c))) + 1):\n            if c % i == 0:\n                if c / i == i:\n                    factors.append(i)\n                    factors.append(-i)\n                else:\n                    factors.append(i)\n                    factors.append(-i)\n                    factors.append(c // i)\n                    factors.append(-1 * (c // i))\n        for i in factors:\n            if a % i == 0:\n                x = a / i - p\n            else:\n                x = a - p\n            if b - q == x or (b % i == 0 and (b / i - q == 0 or b / i - q == x)):\n                if c - r == x or (c % i == 0 and (c / i - r == 0 or c / i - r == x)):\n                    ans = 2\n            if b % i == 0:\n                x = b / i - q\n            else:\n                x = b - q\n            if a - p == x or (a % i == 0 and (a / i - p == 0 or a / i - p == x)):\n                if c - r == x or (c % i == 0 and (c / i - r == 0 or c / i - r == x)):\n                    ans = 2\n            if c % i == 0:\n                x = c / i - r\n            else:\n                x = c - r\n            if a - p == x or (a % i == 0 and (a / i - p == 0 or a / i - p == x)):\n                if b - q == x or (b % i == 0 and (b / i - q == 0 or b / i - q == x)):\n                    ans = 2\n        a1 = q - p\n        b1 = r - q\n        c1 = p - r\n        x = b - a\n        y = c - b\n        z = a - c\n        if a1 != 0:\n            if x % a1 == 0:\n                k = x // a1\n                d = a - k * p\n                if r * k + d == c or r * k == c or r + d == c:\n                    ans = 2\n        if b1 != 0:\n            if y % b1 == 0:\n                k = y // b1\n                d = b - k * q\n                if p * k + d == a or p * k == a or p + d == a:\n                    ans = 2\n        if c1 != 0:\n            if z % c1 == 0:\n                k = z // c1\n                d = c - k * r\n                if q * k + d == b or q * k == b or q + d == b:\n                    ans = 2\n        d = a - p\n        if q != 0 and (b - d) % q == 0:\n            k = (b - d) // q\n            if r * k == c or r * k + d == c:\n                ans = 2\n        if q != 0 and b % q == 0:\n            k = b // q\n            if r * k == c or r * k + d == c:\n                ans = 2\n        d = b - q\n        if r != 0 and (c - d) % r == 0:\n            k = (c - d) // r\n            if p * k == a or p * k + d == a:\n                ans = 2\n        if r != 0 and c % r == 0:\n            k = c // r\n            if p * k == a or p * k + d == a:\n                ans = 2\n        d = c - r\n        if p != 0 and (a - d) % p == 0:\n            k = (a - d) // p\n            if q * k == b or q * k + d == b:\n                ans = 2\n        if p != 0 and a % p == 0:\n            k = a // p\n            if q * k == b or q * k + d == b:\n                ans = 2\n    print(ans)"]