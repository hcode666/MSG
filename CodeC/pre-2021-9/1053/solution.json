["import heapq as hp\n\ndef solve(heap, k):\n    li = heap.copy()\n    s = 0\n    while k >= 2 and len(li) > 0:\n        s += hp.heappop(li)\n        k -= 2\n    return -s\nfor _ in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    s = input()\n    zeros = 0\n    for ch in s:\n        if ch == '0':\n            zeros += 1\n    if k < 1:\n        print(zeros)\n        continue\n    l = 0\n    while l < n and s[l] == '0':\n        l += 1\n    r = n - 1\n    while r >= 0 and s[r] == '0':\n        r -= 1\n    if k < 2:\n        print(zeros - max(l, n - r - 1))\n        continue\n    heap = []\n    cnt = 0\n    for i in range(l, r + 1):\n        if s[i] == '0':\n            cnt -= 1\n        if s[i] == '1' and cnt < 0:\n            hp.heappush(heap, cnt)\n            cnt = 0\n    x = solve(heap, k)\n    y = solve(heap, k - 1)\n    z = solve(heap, k - 2)\n    ans = max(x, l + y, n - r - 1 + y, l + n - r - 1 + z)\n    print(zeros - ans)", "import heapq as hp\n\ndef solve(heap, k):\n    li = heap.copy()\n    s = 0\n    while k >= 2 and len(li) > 0:\n        s += hp.heappop(li)\n        k -= 2\n    return -s\nfor _ in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    s = input()\n    zeros = 0\n    for ch in s:\n        if ch == '0':\n            zeros += 1\n    if k < 1:\n        print(zeros)\n        continue\n    l = 0\n    while l < n and s[l] == '0':\n        l += 1\n    r = n - 1\n    while r >= 0 and s[r] == '0':\n        r -= 1\n    if k < 2:\n        print(zeros - max(l, n - r - 1))\n        continue\n    heap = []\n    cnt = 0\n    for i in range(l, r + 1):\n        if s[i] == '0':\n            cnt -= 1\n        if s[i] == '1' and cnt < 0:\n            hp.heappush(heap, cnt)\n            cnt = 0\n    x = solve(heap, k)\n    y = solve(heap, k - 1)\n    z = solve(heap, k - 2)\n    ans = max(x, l + y, n - r - 1 + y, l + n - r - 1 + z)\n    print(zeros - ans)", "import heapq as hp\n\ndef solve(heap, k):\n    li = heap.copy()\n    s = 0\n    while k >= 2 and len(li) > 0:\n        s += hp.heappop(li)\n        k -= 2\n    return -s\nfor _ in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    s = input()\n    zeros = 0\n    for ch in s:\n        if ch == '0':\n            zeros += 1\n    if k < 1:\n        print(zeros)\n        continue\n    l = 0\n    while l < n and s[l] == '0':\n        l += 1\n    r = n - 1\n    while r >= 0 and s[r] == '0':\n        r -= 1\n    if k < 2:\n        print(zeros - max(l, n - r - 1))\n        continue\n    heap = []\n    cnt = 0\n    for i in range(l, r + 1):\n        if s[i] == '0':\n            cnt -= 1\n        if s[i] == '1' and cnt < 0:\n            hp.heappush(heap, cnt)\n            cnt = 0\n    x = solve(heap, k)\n    y = solve(heap, k - 1)\n    z = solve(heap, k - 2)\n    ans = max(x, l + y, n - r - 1 + y, l + n - r - 1 + z)\n    print(zeros - ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    st = en = cnt = 0\n    l = []\n    if s[0] == '0':\n        st += 1\n    if s[-1] == '0':\n        en += 1\n    for i in s:\n        if i == '0':\n            cnt += 1\n        elif cnt > 0:\n            l.append(cnt)\n            cnt = 0\n    if cnt > 0:\n        l.append(cnt)\n        cnt = 0\n    n1 = len(l)\n    if n1 == 0 or l[0] == n:\n        print(0)\n    elif n1 == 1:\n        if st or en:\n            if k >= 1:\n                print(0)\n            else:\n                print(l[0])\n        elif k >= 2:\n            print(0)\n        else:\n            print(l[0])\n    elif k % 2 == 0:\n        if st and en:\n            l[0] += l[-1]\n            l.pop()\n        l.sort()\n        disconnetcs = 0\n        for i in range(len(l) - k // 2):\n            disconnetcs += l[i]\n        print(disconnetcs)\n    else:\n        if st and en:\n            if l[0] >= l[-1]:\n                l = l[1:]\n            else:\n                l.pop()\n        elif st:\n            l = l[1:]\n        elif en:\n            l.pop()\n        disconnetcs = 0\n        l.sort()\n        for i in range(len(l) - (k - 1) // 2):\n            disconnetcs += l[i]\n        print(disconnetcs)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    st = en = cnt = 0\n    l = []\n    if s[0] == '0':\n        st += 1\n    if s[-1] == '0':\n        en += 1\n    for i in s:\n        if i == '0':\n            cnt += 1\n        elif cnt > 0:\n            l.append(cnt)\n            cnt = 0\n    if cnt > 0:\n        l.append(cnt)\n        cnt = 0\n    n1 = len(l)\n    if n1 == 0 or l[0] == n:\n        print(0)\n    elif n1 == 1:\n        if st == 1 or en == 1:\n            if k >= 1:\n                print(0)\n            else:\n                print(l[0])\n        elif k >= 2:\n            print(0)\n        else:\n            print(l[0])\n    elif k % 2 == 0:\n        if st == 1 and en == 1:\n            l[0] += l[-1]\n            l.pop()\n        l.sort()\n        disconnetcs = 0\n        for i in range(len(l) - k // 2):\n            disconnetcs += l[i]\n        print(disconnetcs)\n    else:\n        if st == 1 and en == 1:\n            if l[0] >= l[-1]:\n                l = l[1:]\n            else:\n                l.pop()\n        elif st:\n            del l[0]\n        elif en:\n            l.pop()\n        disconnetcs = 0\n        l.sort()\n        for i in range(len(l) - (k - 1) // 2):\n            disconnetcs += l[i]\n        print(disconnetcs)", "def stipid(n, k, st):\n    (mid, side, i, count) = ([], [], 0, 0)\n    for i in range(len(st)):\n        if st[i] == '1':\n            break\n    side.append(i)\n    st = st[i:]\n    for i in range(len(st) - 1, -1, -1):\n        if st[i] == '1':\n            break\n    side.append(len(st) - 1 - i)\n    st = st[0:i + 1]\n    if len(st) == 0:\n        print(0)\n        return\n    for i in range(len(st)):\n        if st[i] == '0':\n            count += 1\n        elif count != 0:\n            mid.append(count)\n            count = 0\n    (total, cuts) = (sum(mid + side), 0)\n    mid.sort(reverse=True)\n    side.sort(reverse=True)\n    if k == 0:\n        print(total)\n        return\n    if k & 1:\n        k -= 1\n        if len(side) > 0:\n            cuts += side[0]\n            del side[0]\n    for i in range(len(mid)):\n        if k > 2:\n            cuts += mid[i]\n            k -= 2\n        else:\n            break\n    if k >= 2:\n        if i < len(mid):\n            cuts += max(sum(side), mid[i])\n        else:\n            cuts += sum(side)\n    print(total - cuts)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    st = input()\n    stipid(n, k, st)", "for _ in range(int(input())):\n    (z, cc, l1, f1, ans, a1, b1) = ([], 0, 0, 0, 0, 0, 0)\n    (n, k) = map(int, input().split())\n    s = list(input())\n    for i in s:\n        if i == '1':\n            z.append(cc)\n            cc = 0\n        elif i == '0':\n            cc += 1\n    if cc > 0:\n        z.append(cc)\n    if s[n - 1] != '1':\n        b1 = z[len(z) - 1]\n    else:\n        b1 = -1\n    if s[0] == '1':\n        a1 = -1\n    else:\n        a1 = z[0]\n    z.sort(reverse=True)\n    for i in range(len(z)):\n        if k <= 1:\n            ans += z[i]\n        elif z[i] == b1 and l1 == 0:\n            k -= 1\n            l1 += 1\n        elif z[i] == a1 and f1 == 0:\n            k -= 1\n            f1 += 1\n        elif k >= 2:\n            k -= 2\n    (x1, y1) = (ans, ans)\n    if k == 1:\n        if l1 == 0 and b1 != -1:\n            y1 = ans - b1\n        if f1 == 0 and a1 != -1:\n            x1 = ans - a1\n    print(min(x1, y1))", "t = int(input())\nwhile t:\n    t = t - 1\n    (n, k) = map(int, input().split())\n    s = input()\n    start = 0\n    for x in s:\n        if x == '1':\n            break\n        start += 1\n    end = 0\n    for x in s[::-1]:\n        if x == '1':\n            break\n        end += 1\n    zero = 0\n    a = []\n    for x in s:\n        if x == '1':\n            if zero != 0:\n                a.append(zero)\n            zero = 0\n        else:\n            zero += 1\n    a.append(zero)\n    a = sorted(a, reverse=True)\n    for i in range(len(a)):\n        if k >= 1 and a[i] != 0:\n            if a[i] == start and start != 0:\n                start = 0\n                k -= 1\n                a[i] = 0\n            elif a[i] == end and end != 0:\n                k -= 1\n                a[i] = 0\n                end = 0\n            elif k > 1:\n                a[i] = 0\n                k -= 2\n    dis = 0\n    for x in a:\n        dis += x\n    print(dis)", "t = int(input())\nfor i in range(0, t):\n    (a, b) = map(int, input().split())\n    str1 = input()\n    l1 = []\n    ct = 0\n    for j in range(0, a):\n        if str1[j] == '0':\n            ct += 1\n        if str1[j] == '1' or j == a - 1:\n            l1.append(ct)\n            ct = 0\n    if str1[-1] == '1':\n        l1.append(0)\n    if b == 1:\n        yy = max(l1[0], l1[-1])\n        z = sum(l1)\n        ans = z - yy\n    elif b == 0:\n        z = sum(l1)\n        ans = z\n    else:\n        length = len(l1)\n        if b % 2 == 0:\n            xx = l1[0] + l1[-1]\n            arr2 = l1[1:length - 1]\n            arr2.append(xx)\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans = sum(arr3)\n        else:\n            xx = min(l1[0], l1[-1])\n            arr2 = l1[1:length - 1]\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans = sum(arr3) + xx\n            xx = l1[0] + l1[-1]\n            arr2 = l1[1:length - 1]\n            arr2.append(xx)\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans1 = sum(arr3)\n            ans = min(ans, ans1)\n    print(ans)", "import heapq\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    arr = list(s)\n    size = 0\n    conn = 0\n    cnt = []\n    for i in range(len(s)):\n        if s[i] == '0':\n            size += 1\n        else:\n            if size != 0:\n                cnt.append([-size, 2])\n            size = 0\n    if size != 0:\n        cnt.append([-size, 2])\n    if len(s) == 1:\n        if s[0] == '0':\n            cnt[0][1] = 1\n    else:\n        if s[0] == '0':\n            cnt[0][1] = 1\n        if s[-1] == '0':\n            cnt[-1][1] = 1\n    cnt.sort()\n    vis = [False for i in range(len(cnt))]\n    for i in range(len(cnt)):\n        if k >= cnt[i][1]:\n            k -= cnt[i][1]\n            vis[i] = True\n    ans = 0\n    for i in range(len(cnt)):\n        if vis[i] == False:\n            ans -= cnt[i][0]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    s1 = ['1'] * n\n    loc = [[], []]\n    diff = []\n    (c0, c1) = [0, 0]\n    t = 0\n    if n > 1 and k != 0 and (s != ['0'] * n) and (s != ['1'] * n):\n        for i in range(n):\n            if s[i] == '0':\n                loc[0].append(i)\n                c0 += 1\n            else:\n                loc[1].append(i)\n                c1 += 1\n                i1 = c1 - 1\n                if c1 > 1:\n                    diff.append([loc[1][i1 - 1], loc[1][i1] - loc[1][i1 - 1] - 1])\n                elif c1 == 1:\n                    diff.append([-1, loc[1][i1]])\n                    t += diff[-1][1]\n        diff.append([-2, n - loc[1][-1] - 1])\n        t += diff[-1][1]\n        diff = sorted(diff, key=lambda x: x[1], reverse=True)\n        (i, l) = (0, len(diff))\n        flag = 2\n        while k > 0 and i < l:\n            d = diff[i]\n            if t > d[1] and k == 2 and (flag == 2):\n                c0 -= t\n                flag = 0\n                k -= 2\n            elif d[0] in [-1, -2] and flag > 0:\n                k -= 1\n                if d[0] == -1:\n                    s1[:d[1]] = ['0'] * d[1]\n                else:\n                    s1[n - d[1]:n] = ['0'] * d[1]\n                c0 -= d[1]\n                flag -= 1\n            elif k > 1:\n                k -= 2\n                s1[d[0] + 1:d[0] + d[1] + 1] = ['0'] * d[1]\n                c0 -= d[1]\n            i += 1\n    elif s == ['0'] * n or s == ['1'] * n:\n        c0 = 0\n    else:\n        c0 = s.count('0')\n    print(c0)", "t = int(input())\nwhile t != 0:\n    (n, k) = map(int, input().split())\n    state_str = input()\n    sum_edges = 0\n    sum_zeroes = 0\n    count = [0, 0]\n    zeroes_arr = [[0, 0]]\n    ans = 0\n    if n > 1:\n        for i in range(0, n):\n            if state_str[i] == '0' and i == 0:\n                count[0] += 1\n                count[1] = 1\n            elif state_str[i] == '0' and i != 0 and (i != n - 1):\n                count[0] += 1\n            elif state_str[i] != '0' or (state_str[i] == '0' and i == n - 1):\n                if state_str[i] == '0' and i == n - 1:\n                    count[0] += 1\n                    count[1] = 1\n                zeroes_arr.append(count)\n                count = [0, 0]\n        zeroes_arr.sort()\n        for i in range(0, len(zeroes_arr)):\n            if zeroes_arr[i][1] == 1:\n                sum_edges += zeroes_arr[i][0]\n            sum_zeroes += zeroes_arr[i][0]\n        j = len(zeroes_arr) - 1\n        k_dup = k\n        while k > 0 and j > 0:\n            if zeroes_arr[j][1] == 1:\n                k -= 1\n                zeroes_arr[j][0] = 0\n            elif zeroes_arr[j][1] != 1 and k >= 2:\n                k -= 2\n                zeroes_arr[j][0] = 0\n            j -= 1\n        for i in range(0, len(zeroes_arr)):\n            ans += zeroes_arr[i][0]\n        if sum_edges > sum_zeroes - sum_edges and k_dup == 2:\n            print(sum_zeroes - sum_edges)\n        elif sum_zeroes == n:\n            print(0)\n        else:\n            print(ans)\n    else:\n        print(0)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    s = input()\n    if n == 1:\n        print(0)\n    else:\n        l = []\n        c = 0\n        st = 0\n        en = 0\n        if s[0] == '0':\n            st = 1\n        if s[-1] == '0':\n            en = 1\n        for i in s:\n            if i == '0':\n                c += 1\n            else:\n                if c > 0:\n                    l.append(c)\n                c = 0\n        if c > 0:\n            l.append(c)\n        if len(l) == 0 or l[0] == n:\n            print(0)\n        elif len(l) == 1:\n            if st == 1 or en == 1:\n                if k >= 1:\n                    print(0)\n                else:\n                    print(l[0])\n            elif k >= 2:\n                print(0)\n            else:\n                print(l[0])\n        elif k % 2 == 0:\n            if st == 1 and en == 1:\n                l[0] = l[0] + l[-1]\n                l.pop()\n            l.sort()\n            su = 0\n            for i in range(len(l) - k // 2):\n                su += l[i]\n            print(su)\n        else:\n            if st == 1 and en == 1:\n                if l[0] >= l[-1]:\n                    l = l[1:]\n                else:\n                    l.pop()\n            elif st == 1:\n                del l[0]\n            elif en == 1:\n                l.pop()\n            l.sort()\n            su = 0\n            for i in range(len(l) - (k - 1) // 2):\n                su += l[i]\n            print(su)\n    t -= 1", "t = int(input())\nwhile t:\n    t = t - 1\n    (n, k) = map(int, input().split())\n    s = input()\n    start = 0\n    for x in s:\n        if x == '1':\n            break\n        start += 1\n    end = 0\n    for x in s[::-1]:\n        if x == '1':\n            break\n        end += 1\n    zero = 0\n    a = []\n    for x in s:\n        if x == '1':\n            if zero != 0:\n                a.append(zero)\n            zero = 0\n        else:\n            zero += 1\n    a.append(zero)\n    a = sorted(a, reverse=True)\n    for i in range(len(a)):\n        if k >= 1 and a[i] != 0:\n            if a[i] == start and start != 0:\n                start = 0\n                k -= 1\n                a[i] = 0\n            elif a[i] == end and end != 0:\n                k -= 1\n                a[i] = 0\n                end = 0\n            elif k > 1:\n                a[i] = 0\n                k -= 2\n    dis = 0\n    for x in a:\n        dis += x\n    print(dis)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    sree = input()\n    siri = []\n    c = 0\n    for i in range(n):\n        if sree[i] == '1':\n            siri.append(c)\n            c = 0\n        else:\n            c += 1\n    if c != 0:\n        siri.append(c)\n    if c == 0 and sree[-1] == '1':\n        siri.append(0)\n    (first, check1) = (siri[0], 1)\n    (last, check2) = (siri[-1], 1)\n    shanth_total_sum = sum(siri)\n    siri = sorted(siri, reverse=True)\n    honey_sum = 0\n    for a in siri:\n        if k <= 0:\n            break\n        elif a == first and check1 == 1:\n            k -= 1\n            check1 = 0\n            honey_sum += a\n        elif a == last and check2 == 1:\n            k -= 1\n            check2 = 0\n            honey_sum += a\n        elif k > 1:\n            k -= 2\n            honey_sum += a\n    print(shanth_total_sum - honey_sum)", "def solnext(st, k):\n    if len(set(st)) == 1:\n        return 0\n    if k == 0:\n        return st.count('0')\n    mid = list(map(len, st.split('1')))\n    side = [mid.pop(0), mid.pop(-1)]\n    mid.sort(reverse=True)\n    mid = mid[:mid.index(0)] if 0 in mid else mid\n    tsum = sum(mid) + sum(side)\n    if k % 2 == 1:\n        tsum -= max(side)\n        side = [min(side)]\n        k -= 1\n    i = 0\n    for i in range(len(mid)):\n        if k > 2:\n            k -= 2\n            tsum -= mid[i]\n        else:\n            break\n    if k >= 2:\n        if i < len(mid):\n            tsum -= max(mid[i], sum(side))\n        else:\n            tsum -= sum(side)\n    return tsum\nfor test in range(int(input())):\n    (n, k) = map(int, input().split())\n    st = input()\n    print(solnext(st, k))", "def sol(n, k, st):\n    side = []\n    zmid = []\n    count = 0\n    for i in range(n):\n        if st[i] == '1':\n            break\n    if i != 0:\n        side.append(i)\n        st = st[i:]\n    r = st[::-1]\n    for i in range(len(r)):\n        if r[i] == '1':\n            break\n    if i != 0:\n        side.append(i)\n        st = st[:len(r) - i]\n    if len(st) == 0:\n        print(0)\n        return\n    for i in range(len(st)):\n        if st[i] == '0':\n            count += 1\n        else:\n            if count != 0:\n                zmid.append(count)\n            count = 0\n    total = sum(zmid) + sum(side)\n    zmid.sort(reverse=True)\n    side.sort(reverse=True)\n    cnts = 0\n    gcut = 0\n    if k == 0:\n        print(total)\n        return\n    if k % 2 != 0:\n        k -= 1\n        if len(side) != 0:\n            gcut += side[0]\n            cnts += 1\n    for i in range(len(zmid)):\n        if k > 2:\n            gcut += zmid[i]\n            k -= 2\n        else:\n            break\n    if k >= 2:\n        if i < len(zmid):\n            gcut += max(sum(side[cnts:]), zmid[i])\n        else:\n            gcut += sum(side[cnts:])\n    print(total - gcut)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    st = input()\n    sol(n, k, st)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    count_0 = 0\n    for i in s:\n        if i == '0':\n            count_0 += 1\n    if count_0 == n or count_0 == 0:\n        print(0)\n        continue\n    req1 = []\n    req2 = []\n    if s[0] == '0':\n        x = 0\n        for i in s:\n            if i == '0':\n                x += 1\n            else:\n                req1.append(x)\n                break\n    if s[-1] == '0':\n        p = s[::-1]\n        x = 0\n        for i in p:\n            if i == '0':\n                x += 1\n            else:\n                req1.append(x)\n                break\n    z = 0\n    b = 0\n    flag = 0\n    for i in range(n):\n        if s[i] == '1' and flag == 0:\n            z = i\n            flag = 1\n        elif s[i] == '1' and flag == 1:\n            b = i\n            if b - z > 1:\n                req2.append(b - z - 1)\n            z = i\n        else:\n            continue\n    req1.sort()\n    req2.sort()\n    used = 0\n    while k > 0:\n        if k > 1:\n            if len(req2) != 0 and len(req1) != 0:\n                if req2[-1] > req1[-1]:\n                    used += req2.pop()\n                    k = k - 2\n                else:\n                    used += req1.pop()\n                    k -= 1\n            elif len(req2) != 0 and len(req1) == 0:\n                used += req2.pop()\n                k = k - 2\n            elif len(req1) != 0 and len(req2) == 0:\n                used += req1.pop()\n                k = k - 1\n        elif len(req1) != 0:\n            used += req1.pop()\n            k -= 1\n        else:\n            break\n    print(count_0 - used)", "import sys\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    count_0 = 0\n    for i in s:\n        if i == '0':\n            count_0 += 1\n    if count_0 == n or count_0 == 0:\n        print(0)\n        continue\n    req1 = []\n    req2 = []\n    if s[0] == '0':\n        x = 0\n        for i in s:\n            if i == '0':\n                x += 1\n            else:\n                req1.append(x)\n                break\n    if s[-1] == '0':\n        p = s[::-1]\n        x = 0\n        for i in p:\n            if i == '0':\n                x += 1\n            else:\n                req1.append(x)\n                break\n    z = 0\n    b = 0\n    flag = 0\n    for i in range(n):\n        if s[i] == '1' and flag == 0:\n            z = i\n            flag = 1\n        elif s[i] == '1' and flag == 1:\n            b = i\n            if b - z > 1:\n                req2.append(b - z - 1)\n            z = i\n        else:\n            continue\n    req1.sort()\n    req2.sort()\n    used = 0\n    while k > 0:\n        if k > 1:\n            if len(req2) != 0 and len(req1) != 0:\n                if req2[-1] > req1[-1]:\n                    used += req2.pop()\n                    k = k - 2\n                else:\n                    used += req1.pop()\n                    k -= 1\n            elif len(req2) != 0 and len(req1) == 0:\n                used += req2.pop()\n                k = k - 2\n            elif len(req1) != 0 and len(req2) == 0:\n                used += req1.pop()\n                k = k - 1\n        elif len(req1) != 0:\n            used += req1.pop()\n            k -= 1\n        else:\n            break\n    print(count_0 - used)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    (cut, beg, size) = ([], 0, 0)\n    for i in range(n):\n        if s[i] == '1':\n            if size == 0:\n                beg += 1\n            else:\n                if beg == 0:\n                    cut.append([-beg + i, 1])\n                else:\n                    cut.append([-beg + i, 2])\n                beg = i + 1\n                size = 0\n        else:\n            size += 1\n    if size != 0:\n        cut.append([-beg + i + 1, 1])\n    cut.sort(key=lambda i: (i[0], -i[1]), reverse=True)\n    if cut:\n        index = 0\n        while k and index < len(cut):\n            if k >= cut[index][1]:\n                k -= cut[index][1]\n                cut[index][0] = 0\n            index += 1\n        ans = 0\n        for i in cut:\n            ans += i[0]\n        print(ans)\n    else:\n        print(0)", "def cutter(Off, K):\n    li = []\n    dis = 0\n    for i in range(0, len(Off)):\n        li.append(Off[i][1])\n    li.sort(reverse=True)\n    i = 0\n    for j in range(0, K, 2):\n        li.remove(li[i])\n    for i in range(0, len(li)):\n        dis += li[i]\n    print(dis)\n\ndef OffFinder(s, st):\n    l = []\n    i = 0\n    li = -1\n    N = len(s)\n    if st == 'On':\n        a = 1\n        b = 0\n    else:\n        a = 0\n        b = 1\n    while i < N:\n        if int(s[i]) == a:\n            l.append([])\n            li += 1\n            l[li].append(i)\n            for j in range(i + 1, N):\n                if int(s[j]) == b:\n                    l[li].append(j - i)\n                    i = j + 1\n                    break\n            else:\n                l[li].append(N - i)\n                i = N\n        else:\n            i += 1\n    return l\n\ndef minDis(N, K, s):\n    Off = OffFinder(s, 'Off')\n    cutReqd = 0\n    if int(s[0]) == 0:\n        stoff = Off[0][1]\n    if int(s[N - 1]) == 0:\n        endoff = Off[len(Off) - 1][1]\n    if int(s[0]) == 0:\n        if int(s[N - 1]) == 0:\n            cutReqd = (len(Off) - 2) * 2 + 2\n        else:\n            cutReqd = (len(Off) - 1) * 2 + 1\n    elif int(s[N - 1]) == 0:\n        cutReqd = (len(Off) - 1) * 2 + 1\n    else:\n        cutReqd = len(Off) * 2\n    if cutReqd <= K:\n        print(0)\n    elif K % 2 != 0:\n        if int(s[0]) == 0:\n            if int(s[N - 1]) == 0:\n                stoff = Off[0][1]\n                endoff = Off[len(Off) - 1][1]\n                if stoff > endoff:\n                    Off.remove(Off[0])\n                else:\n                    Off.remove(Off[len(Off) - 1])\n                cutter(Off, K - 1)\n            else:\n                Off.remove(Off[0])\n                cutter(Off, K - 1)\n        elif int(s[N - 1]) == 0:\n            Off.remove(Off[len(Off) - 1])\n            cutter(Off, K - 1)\n        else:\n            cutter(Off, K - 1)\n    elif int(s[0]) == 0:\n        if int(s[N - 1]) == 0:\n            Off[0][1] += Off[len(Off) - 1][1]\n            Off.remove(Off[len(Off) - 1])\n            cutter(Off, K)\n        else:\n            cutter(Off, K)\n    else:\n        cutter(Off, K)\nnT = int(input())\nfor i in range(0, nT):\n    d = list(map(int, input().strip().split()))\n    N = d[0]\n    K = d[1]\n    s = input().strip()\n    minDis(N, K, s)", "for i in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    center_bulbs = []\n    side_bulbs = []\n    s = input()\n    fl = 0\n    m = 0\n    for j in range(n):\n        if s[j] == '0':\n            m += 1\n            if not fl:\n                if j == 0 or j == n - 1:\n                    fl = 2\n                else:\n                    fl = 1\n        elif m:\n            if fl == 2:\n                side_bulbs.append(m)\n            else:\n                center_bulbs.append(m)\n            m = 0\n            fl = 0\n    if m:\n        side_bulbs.append(m)\n    side_bulbs.sort()\n    center_bulbs.sort()\n    x = k\n    disconnections = 0\n    (j, k) = (len(center_bulbs) - 1, len(side_bulbs) - 1)\n    if j == -1 and k == 0:\n        print(0)\n    else:\n        while j > -1 and k > -1 and (x > 0):\n            if x > 3:\n                j -= 1\n                x -= 2\n            elif x == 3:\n                if center_bulbs[j] + side_bulbs[k] > sum(side_bulbs[0:k + 1]):\n                    k -= 1\n                    j -= 1\n                    x -= 3\n                elif k == 0:\n                    k -= 1\n                    x -= 1\n                else:\n                    k -= 2\n                    x -= 2\n            elif x == 2:\n                if sum(side_bulbs[0:k + 1]) > center_bulbs[j]:\n                    k -= 2\n                    x -= 2\n                else:\n                    j -= 1\n                    x -= 2\n            else:\n                k -= 1\n                x -= 1\n        if j > -1:\n            while j > -1 and x > 1:\n                j -= 1\n                x -= 2\n            disconnections += sum(center_bulbs[0:j + 1])\n        if k > -1:\n            while k > -1 and x > 0:\n                k -= 1\n                x -= 1\n            disconnections += sum(side_bulbs[0:k + 1])\n        print(disconnections)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = 0\n    side = list()\n    mid = list()\n    for c in s:\n        if c == '0':\n            l += 1\n        else:\n            break\n    if l:\n        side.append(l)\n    s = s[l:]\n    s = s[::-1]\n    l = 0\n    for c in s:\n        if c == '0':\n            l += 1\n        else:\n            break\n    if l:\n        side.append(l)\n    s = s[l:]\n    l = 0\n    for c in s:\n        if c == '0':\n            l += 1\n        elif l:\n            mid.append(l)\n            l = 0\n    side.sort(reverse=True)\n    mid.sort(reverse=True)\n    total = sum(mid) + sum(side)\n    cut = 0\n    if k == 0:\n        print(total)\n    elif len(s) == 0:\n        print(0)\n    else:\n        if k & 1:\n            if len(side):\n                cut += side[0]\n                side.remove(side[0])\n                k -= 1\n        while k > 2:\n            cut += mid[0]\n            mid.remove(mid[0])\n            k -= 2\n        if k == 2:\n            if len(mid):\n                cut += max(mid[0], sum(side))\n            else:\n                cut += sum(side)\n        print(total - cut)", "test_cases = int(input())\nfor _ in range(test_cases):\n    (n, k) = map(int, input().split())\n    s = input()\n    if s[0] == '0':\n        flag = 0\n    else:\n        flag = 1\n    count = 0\n    l = []\n    sl = [0, 0]\n    for x in s:\n        if flag == 0 and x == '0':\n            count += 1\n        elif flag == 0 and x == '1':\n            l.append(count)\n            count = 0\n            flag = 1\n        elif flag == 1 and x == '0':\n            flag = 0\n            count += 1\n    if flag == 0:\n        sl[1] = count\n    if s[0] == '0' and len(l) > 0:\n        sl[0] = l[0]\n        l[0] = 0\n    l.sort(reverse=True)\n    sl.sort(reverse=True)\n    length = len(l)\n    if k == 0:\n        i = 0\n        sum = 0\n        while i < len(l):\n            sum += l[i]\n            i += 1\n        print(sum + sl[0] + sl[1])\n    elif k == 1:\n        i = 0\n        sum = 0\n        while i < len(l):\n            sum += l[i]\n            i += 1\n        print(sum + sl[1])\n    elif k % 2 == 0:\n        i = (k - 1) // 2\n        if i < len(l):\n            if sl[0] + sl[1] < l[i]:\n                l[i] = sl[0] + sl[1]\n        sum = 0\n        while i < len(l):\n            sum += l[i]\n            i += 1\n        print(sum)\n    else:\n        i = (k - 2) // 2\n        if i < len(l):\n            if sl[0] + l[i] > sl[0] + sl[1]:\n                l[i] = sl[1]\n        sum = 0\n        while i < len(l):\n            sum += l[i]\n            i += 1\n        print(sum)", "test_cases = int(input())\nfor _ in range(test_cases):\n    (n, k) = map(int, input().split())\n    s = input()\n    if s[0] == '0':\n        flag = 0\n    else:\n        flag = 1\n    count = 0\n    l = []\n    sl = [0, 0]\n    for x in s:\n        if flag == 0 and x == '0':\n            count += 1\n        elif flag == 0 and x == '1':\n            l.append(count)\n            count = 0\n            flag = 1\n        elif flag == 1 and x == '0':\n            flag = 0\n            count += 1\n    if flag == 0:\n        sl[1] = count\n    if s[0] == '0' and len(l) > 0:\n        sl[0] = l[0]\n        l[0] = 0\n    l.sort(reverse=True)\n    sl.sort(reverse=True)\n    length = len(l)\n    if k == 0:\n        i = 0\n        sum = 0\n        while i < len(l):\n            sum += l[i]\n            i += 1\n        print(sum + sl[0] + sl[1])\n    elif k == 1:\n        i = 0\n        sum = 0\n        while i < len(l):\n            sum += l[i]\n            i += 1\n        print(sum + sl[1])\n    elif k % 2 == 0:\n        i = (k - 1) // 2\n        if i < len(l):\n            if sl[0] + sl[1] < l[i]:\n                l[i] = sl[0] + sl[1]\n        sum = 0\n        while i < len(l):\n            sum += l[i]\n            i += 1\n        print(sum)\n    else:\n        i = (k - 2) // 2\n        if i < len(l):\n            if sl[0] + l[i] > sl[0] + sl[1]:\n                l[i] = sl[1]\n        sum = 0\n        while i < len(l):\n            sum += l[i]\n            i += 1\n        print(sum)", "test_cases = int(input())\ntry:\n    for _ in range(test_cases):\n        (n, k) = map(int, input().split())\n        s = input()\n        if s[0] == '0':\n            flag = 0\n        else:\n            flag = 1\n        count = 0\n        l = []\n        sl = [0, 0]\n        for x in s:\n            if flag == 0 and x == '0':\n                count += 1\n            elif flag == 0 and x == '1':\n                l.append(count)\n                count = 0\n                flag = 1\n            elif flag == 1 and x == '0':\n                flag = 0\n                count += 1\n        if flag == 0:\n            sl[1] = count\n        if s[0] == '0' and len(l) > 0:\n            sl[0] = l[0]\n            l[0] = 0\n        l.sort(reverse=True)\n        sl.sort(reverse=True)\n        length = len(l)\n        if k == 0:\n            i = 0\n            sum = 0\n            while i < len(l):\n                sum += l[i]\n                i += 1\n            print(sum + sl[0] + sl[1])\n        elif k == 1:\n            i = 0\n            sum = 0\n            while i < len(l):\n                sum += l[i]\n                i += 1\n            print(sum + sl[1])\n        elif k % 2 == 0:\n            i = (k - 1) // 2\n            if i < len(l):\n                if sl[0] + sl[1] < l[i]:\n                    l[i] = sl[0] + sl[1]\n            sum = 0\n            while i < len(l):\n                sum += l[i]\n                i += 1\n            print(sum)\n        else:\n            i = (k - 2) // 2\n            if i < len(l):\n                if sl[0] + l[i] > sl[0] + sl[1]:\n                    l[i] = sl[1]\n            sum = 0\n            while i < len(l):\n                sum += l[i]\n                i += 1\n            print(sum)\nexcept:\n    print('Wrong')", "t = int(input())\nfor i in range(0, t):\n    (a, b) = map(int, input().split())\n    str1 = input()\n    l1 = []\n    ct = 0\n    for j in range(0, a):\n        if str1[j] == '0':\n            ct += 1\n        if str1[j] == '1' or j == a - 1:\n            l1.append(ct)\n            ct = 0\n    if str1[-1] == '1':\n        l1.append(0)\n    if b == 1:\n        yy = max(l1[0], l1[-1])\n        z = sum(l1)\n        ans = z - yy\n    elif b == 0:\n        z = sum(l1)\n        ans = z\n    else:\n        length = len(l1)\n        if b % 2 == 0:\n            xx = l1[0] + l1[-1]\n            arr2 = l1[1:length - 1]\n            arr2.append(xx)\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans = sum(arr3)\n        else:\n            xx = min(l1[0], l1[-1])\n            arr2 = l1[1:length - 1]\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans = sum(arr3) + xx\n            xx = l1[0] + l1[-1]\n            arr2 = l1[1:length - 1]\n            arr2.append(xx)\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans1 = sum(arr3)\n            ans = min(ans, ans1)\n    print(ans)", "for _ in range(int(input())):\n    z = []\n    cc = 0\n    (l1, f1) = (0, 0)\n    ans = 0\n    a1 = 0\n    b1 = 0\n    (n, k) = map(int, input().split())\n    s = list(input())\n    for i in s:\n        if i == '1':\n            z.append(cc)\n            cc = 0\n        elif i == '0':\n            cc += 1\n    if cc > 0:\n        z.append(cc)\n    if s[n - 1] != '1':\n        b1 = z[len(z) - 1]\n    else:\n        b1 = -1\n    if s[0] == '1':\n        a1 = -1\n    else:\n        a1 = z[0]\n    z.sort(reverse=True)\n    for i in range(len(z)):\n        if k <= 1:\n            ans += z[i]\n        elif z[i] == b1 and l1 == 0:\n            k -= 1\n            l1 += 1\n        elif z[i] == a1 and f1 == 0:\n            k -= 1\n            f1 += 1\n        elif k >= 2:\n            k -= 2\n    (x1, y1) = (ans, ans)\n    if k == 1:\n        if l1 == 0 and b1 != -1:\n            y1 = ans - b1\n        if f1 == 0 and a1 != -1:\n            x1 = ans - a1\n    print(min(x1, y1))", "import math\n\ndef foo(s, k):\n    arr = s.split('1')\n    start = 0\n    end = 0\n    if len(arr) == 1:\n        return 0\n    start = len(arr[0])\n    end = len(arr[-1])\n    arr = list(map(len, arr[1:len(arr) - 1]))\n    arr.sort(reverse=True)\n    i = 0\n    ans = start + end + sum(arr)\n    while k > 3 and i < len(arr):\n        ans -= arr[i]\n        i += 1\n        k -= 2\n    if k == 1:\n        ans -= max(start, end)\n    elif k == 2 and i < len(arr):\n        ans -= max(start + end, arr[i])\n    elif k == 2:\n        ans -= start + end\n    elif k == 3 and i < len(arr):\n        ans -= max(start + end, arr[i] + start, arr[i] + end)\n    elif k == 3:\n        ans -= start + end\n    return ans\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(foo(s, k))", "def func(n, k, string):\n    count = 0\n    gcuts = 0\n    sidecuts = 0\n    total = 0\n    zmid = []\n    side = []\n    for i in range(len(string)):\n        if string[i] == '1':\n            break\n    if i != 0:\n        side.append(i)\n        string = string[i:]\n    r = string[::-1]\n    for i in range(len(r)):\n        if r[i] == '1':\n            break\n    if i != 0:\n        side.append(i)\n        string = string[:len(r) - i]\n    if len(string) == 0:\n        print(0)\n        return\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            if count != 0:\n                zmid.append(count)\n            count = 0\n    total = sum(side) + sum(zmid)\n    zmid = sorted(zmid, reverse=True)\n    side = sorted(side, reverse=True)\n    if k == 0:\n        print(total)\n        return\n    if k % 2 != 0:\n        k = k - 1\n        if len(side) != 0:\n            gcuts += side[0]\n            sidecuts += 1\n    for i in range(len(zmid)):\n        if k > 2:\n            gcuts += zmid[i]\n            k = k - 2\n        else:\n            break\n    if k >= 2:\n        if i < len(zmid):\n            gcuts += max(sum(side[sidecuts:]), zmid[i])\n        else:\n            gcuts += sum(side[sidecuts:])\n    ans = total - gcuts\n    print(ans)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    string = input()\n    func(n, k, string)", "ls = []\nt = int(input())\nfor z in range(t):\n    nk = list(map(int, input().rstrip().split()))\n    n = nk[0]\n    k = nk[1]\n    b = input()\n    bl = n\n    ct0 = 0\n    base0 = 0\n    lst = []\n    active = False\n    side = []\n    for i in range(bl):\n        if b[i] == '1' and active == False:\n            if base0 != 0:\n                lst.append(ct0)\n            else:\n                side.append(ct0)\n            active = True\n            ct0 = 0\n            base0 = i + 1\n        elif b[i] == '0':\n            active = False\n            ct0 += 1\n    if active == False:\n        top = ct0\n        side.append(top)\n    lst.sort(reverse=True)\n    side.sort(reverse=True)\n    lsd = 0\n    llst = 0\n    while k > 0:\n        kcurr = k\n        if k % 2 == 1:\n            k -= 1\n            if side:\n                lsd += 1\n        elif lst:\n            if lsd < len(side) and lst[llst] < sum(side[lsd:]):\n                k -= len(side)\n                side = []\n            else:\n                k -= 2\n                llst += 1\n        else:\n            k = 0\n            break\n        if kcurr == k:\n            k = 0\n            break\n    sm = 0\n    sm = sum(lst[llst:]) + sum(side[lsd:])\n    ls.append(sm)\nfor i in ls:\n    print(i)", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input().split('1')\n    for i in range(len(s)):\n        s[i] = len(s[i])\n    out = 0\n    if len(s) == 1:\n        print(0)\n    elif k % 2 == 0:\n        s = s[1:-1] + [s[0] + s[-1]]\n        s.sort(reverse=True)\n        i = 0\n        while k > 0 and i < len(s):\n            k -= 2\n            i += 1\n        while i < len(s):\n            out += s[i]\n            i += 1\n        print(out)\n    else:\n        on = [s[0], s[-1]]\n        s = s[1:-1]\n        s.sort(reverse=True)\n        on.sort(reverse=True)\n        f = sum(on)\n        cov = False\n        i = 0\n        while k > 2 and i < len(s):\n            if not cov:\n                if s[i] + on[0] > f:\n                    k -= 2\n                    i += 1\n                else:\n                    k -= 2\n                    cov = True\n            else:\n                i += 1\n                k -= 2\n        if not cov:\n            out += on[1]\n        while i < len(s):\n            out += s[i]\n            i += 1\n        print(out)", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input().split('1')\n    for i in range(len(s)):\n        s[i] = len(s[i])\n    out = 0\n    if len(s) == 1:\n        print(0)\n    elif k % 2 == 0:\n        s = s[1:-1] + [s[0] + s[-1]]\n        s.sort(reverse=True)\n        i = 0\n        while k > 0 and i < len(s):\n            k -= 2\n            i += 1\n        while i < len(s):\n            out += s[i]\n            i += 1\n        print(out)\n    else:\n        on = [s[0], s[-1]]\n        s = s[1:-1]\n        s.sort(reverse=True)\n        on.sort(reverse=True)\n        f = sum(on)\n        cov = False\n        i = 0\n        while k > 2 and i < len(s):\n            if not cov:\n                if s[i] + on[0] > f:\n                    k -= 2\n                    i += 1\n                else:\n                    k -= 2\n                    cov = True\n            else:\n                i += 1\n                k -= 2\n        if not cov:\n            out += on[1]\n        while i < len(s):\n            out += s[i]\n            i += 1\n        print(out)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input().rstrip().split('1')\n    for i in range(len(s)):\n        s[i] = len(s[i])\n    out = 0\n    if len(s) == 1:\n        print(0)\n    elif k % 2 == 0:\n        s = s[1:-1] + [s[0] + s[-1]]\n        s.sort(reverse=True)\n        i = 0\n        while k > 0 and i < len(s):\n            k -= 2\n            i += 1\n        while i < len(s):\n            out += s[i]\n            i += 1\n        print(out)\n    else:\n        on = [s[0], s[-1]]\n        s = s[1:-1]\n        s.sort(reverse=True)\n        on.sort(reverse=True)\n        f = sum(on)\n        cov = False\n        i = 0\n        while k > 2 and i < len(s):\n            if not cov:\n                if s[i] + on[0] > f:\n                    k -= 2\n                    i += 1\n                else:\n                    k -= 2\n                    cov = True\n            else:\n                i += 1\n                k -= 2\n        if not cov:\n            out += on[1]\n        while i < len(s):\n            out += s[i]\n            i += 1\n        print(out)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input().rstrip().split('1')\n    for i in range(len(s)):\n        s[i] = len(s[i])\n    out = 0\n    if len(s) == 1:\n        print(0)\n    elif k % 2 == 0:\n        s = s[1:-1] + [s[0] + s[-1]]\n        s.sort(reverse=True)\n        i = 0\n        while k > 0 and i < len(s):\n            k -= 2\n            i += 1\n        while i < len(s):\n            out += s[i]\n            i += 1\n        print(out)\n    else:\n        on = [s[0], s[-1]]\n        s = s[1:-1]\n        s.sort(reverse=True)\n        on.sort(reverse=True)\n        f = sum(on)\n        cov = False\n        i = 0\n        while k > 2 and i < len(s):\n            if not cov:\n                if s[i] + on[0] > f:\n                    k -= 2\n                    i += 1\n                else:\n                    k -= 2\n                    cov = True\n            else:\n                i += 1\n                k -= 2\n        if not cov:\n            out += on[1]\n        while i < len(s):\n            out += s[i]\n            i += 1\n        print(out)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    (mid, side) = ([], [])\n    (srt, end, i, ctr, add) = (0, n - 1, 0, 0, 0)\n    if s.count('0') == n or s.count('1') == n:\n        print(0)\n    elif k == 0:\n        print(s.count('0'))\n    else:\n        if s[0] == '0' or s[-1] == '0':\n            while s[srt] == '0':\n                srt += 1\n            while s[end] == '0':\n                i += 1\n                end -= 1\n            side.append(srt)\n            side.append(i)\n        for i in range(srt, end + 1):\n            if s[i] == '0':\n                ctr += 1\n            else:\n                mid.append(ctr)\n                ctr = 0\n        mid.sort(reverse=True)\n        side.sort(reverse=True)\n        if k % 2 != 0:\n            k -= 1\n            if len(side) != 0:\n                add += side[0]\n                side[0] = 0\n        for i in range(len(mid)):\n            if k > 2:\n                add += mid[i]\n                k -= 2\n            else:\n                break\n        if k >= 2:\n            if i < len(mid):\n                add += max(sum(side), mid[i])\n            else:\n                add += sum(side)\n        print(s.count('0') - add)", "from sys import stdin, stdout\nfrom math import gcd, log2, log10, floor, ceil\nimport math\nfrom collections import defaultdict, OrderedDict\nfrom bisect import bisect_left\n\ndef fun(n, k):\n    s = list(input())\n    l = [0]\n    for i in range(n):\n        if s[i] == '0':\n            l[-1] += 1\n        else:\n            l.append(0)\n    count1 = 0\n    count2 = 0\n    if s[0] == '0':\n        count1 = l[0]\n    if s[-1] == '0':\n        count2 = l[-1]\n    l.sort(reverse=True)\n    indexa = 0\n    while k > 0:\n        if l[indexa] == count2 and k >= 1:\n            k -= 1\n            count2 = 0\n            l[indexa] = 0\n        elif l[indexa] == count1 and k >= 1:\n            k -= 1\n            count1 = 0\n            l[indexa] = 0\n        elif l[indexa] > 0 and k >= 2:\n            l[indexa] = 0\n            k -= 2\n        indexa += 1\n        if indexa == len(l):\n            break\n    return sum(l)\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    answer = fun(n, k)\n    print(answer)", "t = int(input())\nfor i in range(0, t):\n    (a, b) = map(int, input().split())\n    str1 = input()\n    l1 = []\n    ct = 0\n    for j in range(0, a):\n        if str1[j] == '0':\n            ct += 1\n        if str1[j] == '1' or j == a - 1:\n            l1.append(ct)\n            ct = 0\n    if str1[-1] == '1':\n        l1.append(0)\n    if b == 1:\n        yy = max(l1[0], l1[-1])\n        z = sum(l1)\n        ans = z - yy\n    elif b == 0:\n        z = sum(l1)\n        ans = z\n    else:\n        length = len(l1)\n        if b % 2 == 0:\n            xx = l1[0] + l1[-1]\n            arr2 = l1[1:length - 1]\n            arr2.append(xx)\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans = sum(arr3)\n        else:\n            xx = min(l1[0], l1[-1])\n            arr2 = l1[1:length - 1]\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans = sum(arr3) + xx\n            xx = l1[0] + l1[-1]\n            arr2 = l1[1:length - 1]\n            arr2.append(xx)\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans1 = sum(arr3)\n            ans = min(ans, ans1)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    ans = 0\n    st_0 = s.find('1')\n    last_1 = s.rfind('1')\n    end_0 = n - last_1 - 1\n    d = {}\n    tmp_cnt = 0\n    for i in range(st_0, last_1 + 1):\n        if s[i] == '0':\n            tmp_cnt += 1\n            d[tmp_cnt] = d.get(tmp_cnt, 0) + 1\n            if tmp_cnt > 1:\n                d[tmp_cnt - 1] -= 1\n                if not d[tmp_cnt - 1]:\n                    del d[tmp_cnt - 1]\n        else:\n            tmp_cnt = 0\n    a1 = max(st_0, end_0)\n    a2 = min(st_0, end_0)\n    if k % 2 == 1:\n        k -= 1\n        a1 = 0\n    x = list(d.keys())\n    x.append(a1 + a2)\n    x.sort(reverse=True)\n    d[a1 + a2] = d.get(a1 + a2, 0) + 1\n    for (index, i) in enumerate(x):\n        if k <= 1:\n            break\n        while d.get(i, 0) and k >= 2:\n            k -= 2\n            d[i] -= 1\n    for (k, v) in d.items():\n        ans += k * v\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = list(map(len, input().split('1')))\n    sm = sum(s)\n    l = s[0]\n    r = s[len(s) - 1]\n    fl = True\n    fr = True\n    s.sort(reverse=True)\n    count = 0\n    for i in s:\n        if k <= 0:\n            break\n        if i == l and fl == True:\n            k -= 1\n            count += i\n            fl = False\n        elif i == r and fr == True:\n            k -= 1\n            count += i\n            fr = False\n        elif k > 1:\n            k -= 2\n            count += i\n    print(sm - count)", "for aww in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = s.split('1')\n    b = []\n    xx = []\n    for w in range(len(a)):\n        x = len(a[w])\n        if x != 0:\n            xx.append([-x, 2])\n    if len(s) == 1:\n        if s[0] == '0':\n            xx[0][1] = 1\n    else:\n        if s[0] == '0':\n            xx[0][1] = 1\n        if s[-1] == '0':\n            xx[-1][1] = 1\n    xx.sort()\n    d = 0\n    vis = [False for i in range(len(xx))]\n    for i in range(len(xx)):\n        if k >= xx[i][1]:\n            k -= xx[i][1]\n            vis[i] = True\n    for i in range(len(xx)):\n        if vis[i] == False:\n            d -= xx[i][0]\n    print(d)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if '1' not in s:\n        print('0')\n    else:\n        d = []\n        p = ''\n        for i in s:\n            p += i\n        first = p.index('1')\n        p = p[::-1]\n        last = p.index('1')\n        last1 = n - last - 1\n        count = 0\n        for i in range(first, last1 + 1):\n            if s[i] == '1' and count != 0:\n                d.append(count)\n                count = 0\n            elif s[i] == '0':\n                count += 1\n            else:\n                pass\n        if k % 2 == 0:\n            first = first + last\n            d.append(first)\n            d.sort(reverse=True)\n            r = len(d)\n            count1 = 0\n            for i in range(len(d)):\n                if k == 0:\n                    count1 = 1\n                    r = i\n                    break\n                else:\n                    k -= 2\n            if count1 == 1:\n                count = 0\n                for i in range(r, len(d)):\n                    count += d[i]\n                print(count)\n            else:\n                print('0')\n        else:\n            count = 0\n            d.sort(reverse=True)\n            if k == 1:\n                if first > last:\n                    count += last\n                else:\n                    count += first\n                for i in range(len(d)):\n                    count += d[i]\n                print(count)\n            else:\n                k -= 3\n                count1 = 0\n                r = len(d)\n                for i in range(len(d)):\n                    if k == 0:\n                        count1 = 1\n                        r = i\n                        break\n                    else:\n                        k -= 2\n                if count1 == 1:\n                    count = 0\n                    if first > last:\n                        if last > d[r]:\n                            for i in range(r, len(d)):\n                                count += d[i]\n                        else:\n                            count += last\n                            for i in range(r + 1, len(d)):\n                                count += d[i]\n                    elif first > d[r]:\n                        for i in range(r, len(d)):\n                            count += d[i]\n                    else:\n                        count += first\n                        for i in range(r + 1, len(d)):\n                            count += d[i]\n                    print(count)\n                else:\n                    print('0')", "def solve(s, n, k):\n    (l, r) = (0, n - 1)\n    while l < n and s[l] == '0':\n        l += 1\n    while r > -1 and s[r] == '0':\n        r -= 1\n    (sides, mids) = ([l, n - 1 - r], [])\n    cnt = 0\n    for i in range(l, r + 1):\n        if s[i] == '1':\n            if cnt > 0:\n                mids.append(cnt)\n            cnt = 0\n        else:\n            cnt += 1\n    res = 0\n    mids.sort(reverse=True)\n    zeros = sum(sides) + sum(mids)\n    if k >= 2 * len(mids) + len(sides) or s == '0' * n:\n        return 0\n    if k % 2 == 1:\n        zeros -= max(sides)\n        sides = [min(sides)]\n        k -= 1\n    i = 0\n    while k > 2:\n        zeros -= mids[i]\n        i += 1\n        k -= 2\n    if k == 1:\n        zeros -= min(sides)\n    elif k == 2:\n        zeros -= max(mids[i], sum(sides))\n    return zeros\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(solve(s, n, k))", "for _ in range(int(input())):\n    (n, kost) = map(int, input().split())\n    a = list(input())\n    val = []\n    wt = []\n    mybool = False\n    count = 0\n    for j in range(n):\n        if a[j] == '1':\n            break\n    first = j\n    if j == n - 1:\n        print(0)\n        continue\n    for k in a[j:]:\n        if k == '1':\n            if mybool == False:\n                mybool = True\n                val.append(count)\n            count = 0\n        else:\n            count += 1\n            mybool = False\n    if len(val) > 0:\n        val.pop(0)\n    last = count\n    if kost % 2 == 0:\n        val.append(first + last)\n        val.sort(reverse=True)\n        ans = sum(val[:kost // 2])\n    else:\n        val.sort(reverse=True)\n        temp1 = sum(val[:(kost - 1) // 2]) + max(first, last)\n        val.append(first + last)\n        val.sort(reverse=True)\n        temp2 = sum(val[:(kost - 1) // 2])\n        ans = max(temp2, temp1)\n    print(max(0, a.count('0') - ans))", "t = int(input())\nfor i in range(0, t):\n    (a, b) = map(int, input().split())\n    str1 = input()\n    l1 = []\n    ct = 0\n    for j in range(0, a):\n        if str1[j] == '0':\n            ct += 1\n        if str1[j] == '1' or j == a - 1:\n            l1.append(ct)\n            ct = 0\n    if str1[-1] == '1':\n        l1.append(0)\n    if b == 1:\n        yy = max(l1[0], l1[-1])\n        z = sum(l1)\n        ans = z - yy\n    elif b == 0:\n        z = sum(l1)\n        ans = z\n    else:\n        length = len(l1)\n        if b % 2 == 0:\n            xx = l1[0] + l1[-1]\n            arr2 = l1[1:length - 1]\n            arr2.append(xx)\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans = sum(arr3)\n        else:\n            xx = min(l1[0], l1[-1])\n            arr2 = l1[1:length - 1]\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans = sum(arr3) + xx\n            xx = l1[0] + l1[-1]\n            arr2 = l1[1:length - 1]\n            arr2.append(xx)\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans1 = sum(arr3)\n            ans = min(ans, ans1)\n    print(ans)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(map(len, input().split('1')))\n    su = sum(s)\n    count = 0\n    l = s[0]\n    r = s[len(s) - 1]\n    lf = True\n    rf = True\n    s.sort(reverse=True)\n    for i in s:\n        if k <= 0:\n            break\n        if i == l and lf == True:\n            count += i\n            k -= 1\n            lf = False\n        elif i == r and rf == True:\n            count += i\n            k -= 1\n            rf = False\n        elif k > 1:\n            k -= 2\n            count += i\n    print(su - count)", "def func(n, k, string):\n    total = string.count('0')\n    if n == 0 or n == 1 or string.count('0') == 0 or (string.count('1') == 0):\n        return 0\n    first = string.index('1')\n    last = string[::-1].index('1')\n    lister = string[first:n - last].split('1')\n    a1 = []\n    if k == 1:\n        return total - max(first, last)\n    for e1 in lister:\n        if len(e1) != 0:\n            a1.append(len(e1))\n    a1.sort(reverse=True)\n    sumer = 0\n    if 2 * len(a1) + 2 <= k:\n        return 0\n    elif k % 2 == 0:\n        a1.append(first + last)\n        a1.sort(reverse=True)\n        p = int(k / 2)\n        for e2 in a1[0:p]:\n            sumer += e2\n        return total - sumer\n    else:\n        p = k // 2 - 1\n        for e3 in a1[0:p]:\n            sumer += e3\n        r1 = a1[p] + max(first, last)\n        r2 = first + last\n        sumer += max(r1, r2)\n        return total - sumer\ntry:\n    for i_itr in range(int(input())):\n        (n, k) = map(int, input().split())\n        string = input()\n        output = func(n, k, string)\n        print(output)\nexcept:\n    pass", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    (n, k) = stdin.readline().split()\n    lis = list(stdin.readline())\n    if lis[-1] == '\\n':\n        lis.pop(-1)\n    output_str = list(map(int, lis))\n    n = int(n)\n    k = int(k)\n    flag1 = 0\n    total = sum(output_str)\n    if total == 0 or total == n:\n        print('0')\n        flag1 = 1\n    elif k == 0:\n        print(n - total)\n        flag1 = 1\n    if flag1 == 0:\n        mid_zero = []\n        end_zero = []\n        flag = 0\n        start_ind = -1\n        end_ind = -1\n        for (ind, val) in enumerate(output_str):\n            if val == 0:\n                if flag == 0:\n                    start_ind = ind\n                    flag = 1\n            if val == 1:\n                if flag == 1:\n                    end_ind = ind - 1\n                    if start_ind == 0:\n                        end_zero.append(end_ind - start_ind + 1)\n                    elif end_ind == n - 1:\n                        end_zero.append(end_ind - start_ind + 1)\n                    else:\n                        mid_zero.append(end_ind - start_ind + 1)\n                    flag = 0\n        if flag == 1:\n            end_zero.append(n - start_ind)\n        mid_zero.sort(reverse=True)\n        end_zero.sort(reverse=True)\n        div = int(k / 2)\n        rem = k % 2\n        if rem == 1:\n            if len(end_zero) > 0:\n                end_zero.pop(0)\n        len_mid = len(mid_zero)\n        len_end = len(end_zero)\n        for i in range(div):\n            if len_mid > 0:\n                if len_end > 0:\n                    len1 = mid_zero[0]\n                    len2 = end_zero[0]\n                    if len1 > len2:\n                        mid_zero.pop(0)\n                        len_mid -= 1\n                    else:\n                        end_zero.pop(0)\n                        len_end -= 1\n                        if len_end > 0:\n                            end_zero.pop(0)\n                            len_end -= 1\n                else:\n                    mid_zero.pop(0)\n                    len_mid -= 1\n        final = sum(mid_zero) + sum(end_zero)\n        print(final)", "try:\n    t = int(input())\n    for i in range(t):\n        (n, k) = map(int, input().split())\n        s = input()\n        l = []\n        j = 0\n        t = k + 0\n        while j < n:\n            aj = -1\n            if s[j] == '0':\n                aj = j + 0\n                cnt = 0\n                while j < n and s[j] == '0':\n                    cnt += 1\n                    j += 1\n                if aj == 0 or j == n:\n                    l.append([cnt, 1])\n                else:\n                    l.append([cnt, 2])\n            else:\n                j += 1\n        l.sort()\n        l.reverse()\n        v = len(l)\n        j = 0\n        while j < v and k - l[j][1] >= 0:\n            k -= l[j][1]\n            j += 1\n        sm = 0\n        while j < v:\n            if k > 0 and l[j][1] == 1:\n                k -= 1\n            else:\n                sm += l[j][0]\n            j += 1\n        l = []\n        j = 0\n        k = t + 0\n        valu = 0\n        while j < n:\n            aj = -1\n            if s[j] == '0':\n                aj = j + 0\n                cnt = 0\n                while j < n and s[j] == '0':\n                    cnt += 1\n                    j += 1\n                if aj == 0 or j == n:\n                    valu += cnt\n                else:\n                    l.append([cnt, 2])\n            else:\n                j += 1\n        l.append([valu, 2])\n        l.sort()\n        l.reverse()\n        v = len(l)\n        j = 0\n        while j < v and k - l[j][1] >= 0:\n            k -= l[j][1]\n            j += 1\n        tm = 0\n        while j < v:\n            if k > 0 and l[j][1] == 1:\n                k -= 1\n            else:\n                tm += l[j][0]\n            j += 1\n        if len(set(list(s))) == 1:\n            print(0)\n        else:\n            print(min(sm, tm))\nexcept:\n    pass", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(map(len, input().split('1')))\n    sm = sum(s)\n    l = s[0]\n    r = s[len(s) - 1]\n    fl = True\n    fr = True\n    s.sort(reverse=True)\n    count = 0\n    for i in s:\n        if k <= 0:\n            break\n        if i == l and fl == True:\n            k -= 1\n            count += i\n            fl = False\n        elif i == r and fr == True:\n            k -= 1\n            count += i\n            fr = False\n        elif k > 1:\n            k -= 2\n            count += i\n    print(sm - count)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = []\n    edge = []\n    start = 0\n    end = 0\n    i = 0\n    while i < len(s):\n        count = 0\n        while i < len(s) and s[i] == '0':\n            count += 1\n            i += 1\n        if count:\n            l.append(count)\n        i += 1\n    if s[0] == '0':\n        if len(l):\n            edge.append(l[0])\n            l.pop(0)\n    if s[n - 1] == '0':\n        if len(l):\n            edge.append(l[-1])\n            l.pop()\n    l.sort()\n    edge.sort()\n    if k == 1:\n        if len(edge) == 1:\n            edge.clear()\n            k -= 1\n        elif len(edge) == 2:\n            edge.pop()\n            k -= 1\n    elif k % 2 == 0:\n        while k > 0:\n            if k > 2:\n                if len(l):\n                    l.pop()\n                    k -= 2\n                else:\n                    if len(edge):\n                        edge.clear()\n                    k = 0\n            elif k == 2:\n                if len(l) and len(edge):\n                    if sum(edge) >= l[-1]:\n                        edge.clear()\n                        k = 0\n                    else:\n                        l.pop()\n                        k = 0\n                elif len(l) and (not len(edge)):\n                    l.pop()\n                    k = 0\n                elif len(edge) and (not len(l)):\n                    edge.clear()\n                    k = 0\n                else:\n                    k = 0\n    else:\n        while k > 0:\n            if k > 3:\n                if len(l):\n                    l.pop()\n                    k -= 2\n                else:\n                    if len(edge):\n                        edge.clear()\n                    k = 0\n            elif k == 3:\n                if len(l) and len(edge):\n                    if sum(edge) >= edge[-1] + l[-1]:\n                        edge.clear()\n                        k = 0\n                    else:\n                        edge.pop()\n                        l.pop()\n                        k = 0\n                elif len(l) and (not len(edge)):\n                    l.pop()\n                    k = 0\n                elif len(edge) and (not len(l)):\n                    edge.clear()\n                    k = 0\n                else:\n                    k = 0\n    total = sum(l) + sum(edge)\n    print(total)", "import math\n\ndef solve(s, n, k):\n    if k == 0:\n        return s.count('0')\n    else:\n        i = 0\n        m = k\n        l = []\n        e = []\n        while i < n:\n            if s[i] == '0':\n                j = i + 1\n                while j < n:\n                    if s[j] == '1':\n                        break\n                    j += 1\n                if i == 0 or j == n:\n                    e.append(j - i)\n                else:\n                    l.append(j - i)\n                i = j\n            i += 1\n        l.sort(reverse=True)\n        e.sort(reverse=True)\n        mi = math.inf\n        su = 0\n        for i in l:\n            k -= 2\n            if k < 0:\n                su += i\n        mi = min(mi, su + sum(e))\n        if e != []:\n            su = 0\n            k = m\n            k -= 1\n            for i in l:\n                k -= 2\n                if k < 0:\n                    su += i\n            mi = min(mi, su + (0 if len(e) == 1 else e[-1]))\n        if len(e) == 2:\n            k = m\n            if k >= 2:\n                k -= 2\n                su = 0\n                for i in l:\n                    k -= 2\n                    if k < 0:\n                        su += i\n                mi = min(mi, su)\n        return mi\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input().strip()\n    print(solve(s, n, k))", "import math\n\ndef solve(s, n, k):\n    if k == 0:\n        return s.count('0')\n    else:\n        i = 0\n        m = k\n        l = []\n        e = []\n        while i < n:\n            if s[i] == '0':\n                j = i + 1\n                while j < n:\n                    if s[j] == '1':\n                        break\n                    j += 1\n                if i == 0 or j == n:\n                    e.append(j - i)\n                else:\n                    l.append(j - i)\n                i = j\n            i += 1\n        l.sort(reverse=True)\n        e.sort(reverse=True)\n        mi = math.inf\n        su = 0\n        for i in l:\n            k -= 2\n            if k < 0:\n                su += i\n        mi = min(mi, su + sum(e))\n        if e != []:\n            su = 0\n            k = m\n            k -= 1\n            for i in l:\n                k -= 2\n                if k < 0:\n                    su += i\n            mi = min(mi, su + (0 if len(e) == 1 else e[-1]))\n        if len(e) == 2:\n            k = m\n            if k >= 2:\n                k -= 2\n                su = 0\n                for i in l:\n                    k -= 2\n                    if k < 0:\n                        su += i\n                mi = min(mi, su)\n        return mi\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input().strip()\n    print(solve(s, n, k))", "t = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split(' ')))\n    s = input()\n    count_0 = 0\n    for i in s:\n        if int(i) == 0:\n            count_0 += 1\n    if count_0 == n:\n        print(0)\n        continue\n    one_cut = [0]\n    two_cut = [0]\n    cnt = 0\n    for i in s:\n        if int(i) == 1:\n            break\n        else:\n            cnt += 1\n    one_cut.append(cnt)\n    cnt = 0\n    for i in range(len(s) - 1, -1, -1):\n        if int(s[i]) == 1:\n            break\n        else:\n            cnt += 1\n    one_cut.append(cnt)\n    j = 0\n    while j < n - 1:\n        if int(s[j]) == 1:\n            j += 1\n            cnt = 0\n            while j < n and int(s[j]) != 1:\n                j += 1\n                cnt += 1\n            if j != n:\n                two_cut.append(cnt)\n        else:\n            j += 1\n    used = 0\n    one_cut.sort()\n    two_cut.sort()\n    while k > 0:\n        if two_cut[-1] > one_cut[-1] and k > 1:\n            used += two_cut[-1]\n            if len(two_cut) > 1:\n                two_cut.pop()\n            else:\n                two_cut[-1] = 0\n            k -= 2\n        else:\n            used += one_cut[-1]\n            if len(one_cut) > 1:\n                one_cut.pop()\n            else:\n                one_cut[-1] = 0\n            k -= 1\n    print(count_0 - used)", "def solve_helper(s, k):\n    if k < 0:\n        return 1000000000000\n    zerocounts = []\n    tempcount = 0\n    for i in s:\n        if i == '0':\n            tempcount += 1\n        else:\n            if tempcount > 0:\n                zerocounts.append(tempcount)\n            tempcount = 0\n    zerocounts.sort()\n    while k > 1 and len(zerocounts) > 0:\n        zerocounts.pop()\n        k -= 2\n    ans = 0\n    for item in zerocounts:\n        ans += item\n    return ans\n\ndef solve(s, k):\n    begcount = 0\n    endcount = 0\n    s1 = ''\n    flag = True\n    for i in s:\n        if flag and i == '0':\n            begcount += 1\n        else:\n            flag = False\n            s1 += i\n    while s1[-1] == '0':\n        endcount += 1\n        s1 = s1[:-1]\n    finalans = min(solve_helper(s1, k) + begcount + endcount, min(solve_helper(s1, k - 1) + begcount, min(solve_helper(s1, k - 1) + endcount, solve_helper(s1, k - 2))))\n    return finalans\n\ndef main():\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        s = input()\n        count = 0\n        for i in s:\n            if i == '0':\n                count += 1\n        if count == 0 or count == n:\n            print(0)\n        else:\n            print(solve(s, k))\nmain()", "import collections\nimport math\nimport sys\n\ndef CountFrequency(arr):\n    return collections.Counter(arr)\ntry:\n    for case in range(int(input())):\n        (n, k) = map(int, input().split())\n        s = list(input())\n        indx = []\n        zero = []\n        zc = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                indx.append(i)\n            else:\n                zc += 1\n        if len(indx) != 0:\n            if indx[0] != 0:\n                zero.append((indx[0], 1))\n            if indx[-1] != n - 1:\n                zero.append((n - 1 - indx[-1], 1))\n            for i in range(len(indx) - 1):\n                zero.append((indx[i + 1] - indx[i] - 1, 2))\n            zero.sort(key=lambda x: x[0], reverse=True)\n            for i in zero:\n                if k >= 2:\n                    zc -= i[0]\n                    k -= i[1]\n                elif k == 1 and i[1] == 1:\n                    zc -= i[0]\n                    k -= 1\n                if k == 0:\n                    break\n            print(zc)\n        else:\n            print(0)\nexcept:\n    pass", "import collections\nimport math\nimport sys\n\ndef CountFrequency(arr):\n    return collections.Counter(arr)\ntry:\n    for case in range(int(input())):\n        (n, k) = map(int, input().split())\n        s = list(input())\n        indx = []\n        zero = []\n        zc = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                indx.append(i)\n            else:\n                zc += 1\n        if len(indx) != 0:\n            if indx[0] != 0:\n                zero.append((indx[0], 1))\n            if indx[-1] != n - 1:\n                zero.append((n - 1 - indx[-1], 1))\n            for i in range(len(indx) - 1):\n                zero.append((indx[i + 1] - indx[i] - 1, 2))\n            zero.sort(key=lambda x: (x[0], -x[1]), reverse=True)\n            for i in zero:\n                if k >= 2:\n                    zc -= i[0]\n                    k -= i[1]\n                elif k == 1 and i[1] == 1:\n                    zc -= i[0]\n                    k -= 1\n                if k == 0:\n                    break\n            print(zc)\n        else:\n            print(0)\nexcept:\n    pass", "t = int(input())\nfor i in range(0, t):\n    (a, b) = map(int, input().split())\n    str1 = input()\n    l1 = []\n    ct = 0\n    for j in range(0, a):\n        if str1[j] == '0':\n            ct += 1\n        if str1[j] == '1' or j == a - 1:\n            l1.append(ct)\n            ct = 0\n    if str1[-1] == '1':\n        l1.append(0)\n    if b == 1:\n        yy = max(l1[0], l1[-1])\n        z = sum(l1)\n        ans = z - yy\n    elif b == 0:\n        z = sum(l1)\n        ans = z\n    else:\n        length = len(l1)\n        if b % 2 == 0:\n            xx = l1[0] + l1[-1]\n            arr2 = l1[1:length - 1]\n            arr2.append(xx)\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans = sum(arr3)\n        else:\n            xx = min(l1[0], l1[-1])\n            arr2 = l1[1:length - 1]\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans = sum(arr3) + xx\n            xx = l1[0] + l1[-1]\n            arr2 = l1[1:length - 1]\n            arr2.append(xx)\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans1 = sum(arr3)\n            ans = min(ans, ans1)\n    print(ans)", "t = int(input())\nfor i in range(0, t):\n    (a, b) = map(int, input().split())\n    str1 = input()\n    l1 = []\n    ct = 0\n    for j in range(0, a):\n        if str1[j] == '0':\n            ct += 1\n        if str1[j] == '1' or j == a - 1:\n            l1.append(ct)\n            ct = 0\n    if str1[-1] == '1':\n        l1.append(0)\n    if b == 1:\n        yy = max(l1[0], l1[-1])\n        z = sum(l1)\n        ans = z - yy\n    elif b == 0:\n        z = sum(l1)\n        ans = z\n    else:\n        length = len(l1)\n        if b % 2 == 0:\n            xx = l1[0] + l1[-1]\n            arr2 = l1[1:length - 1]\n            arr2.append(xx)\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans = sum(arr3)\n        else:\n            xx = min(l1[0], l1[-1])\n            arr2 = l1[1:length - 1]\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans = sum(arr3) + xx\n            xx = l1[0] + l1[-1]\n            arr2 = l1[1:length - 1]\n            arr2.append(xx)\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans1 = sum(arr3)\n            ans = min(ans, ans1)\n    print(ans)", "import collections\nimport math\nimport sys\n\ndef CountFrequency(arr):\n    return collections.Counter(arr)\nfor case in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    i = 0\n    zero = []\n    zc = 0\n    while i < len(s):\n        if s[i] == '0':\n            temp = i\n            while i < len(s) and s[i] == '0':\n                i += 1\n            if temp == 0 or i == len(s):\n                zero.append((i - temp, 1))\n                zc += i - temp\n            else:\n                zero.append((i - temp, 2))\n                zc += i - temp\n        i += 1\n    zero.sort(key=lambda x: (x[0], -x[1]), reverse=True)\n    for i in zero:\n        if k >= 2:\n            zc -= i[0]\n            k -= i[1]\n        elif k == 1 and i[1] == 1:\n            zc -= i[0]\n            k -= 1\n        if k == 0:\n            break\n    print(zc)", "import collections\nimport math\nimport sys\n\ndef CountFrequency(arr):\n    return collections.Counter(arr)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ls = list(input())\n    (i, zero_cnt, sp_lst) = (0, 0, [])\n    while i < len(ls):\n        if ls[i] == '0':\n            temp = i\n            while i < len(ls) and ls[i] == '0':\n                i += 1\n            if temp == 0 or i == len(ls):\n                sp_lst.append((i - temp, 1))\n                zero_cnt += i - temp\n            else:\n                sp_lst.append((i - temp, 2))\n                zero_cnt += i - temp\n        i += 1\n    sp_lst.sort(key=lambda e: (e[0], -e[1]), reverse=True)\n    for e in sp_lst:\n        if k >= 2:\n            zero_cnt -= e[0]\n            k -= e[1]\n        elif k == 1 and e[1] == 1:\n            zero_cnt -= e[0]\n            k -= 1\n        if k == 0:\n            break\n    print(zero_cnt)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ls = list(input())\n    (i, zero_cnt, sp_lst) = (0, 0, [])\n    while i < len(ls):\n        if ls[i] == '0':\n            temp = i\n            while i < len(ls) and ls[i] == '0':\n                i += 1\n            if temp == 0 or i == len(ls):\n                sp_lst.append((i - temp, 1))\n                zero_cnt += i - temp\n            else:\n                sp_lst.append((i - temp, 2))\n                zero_cnt += i - temp\n        i += 1\n    sp_lst.sort(key=lambda e: (e[0], -e[1]), reverse=True)\n    for e in sp_lst:\n        if k >= 2:\n            zero_cnt -= e[0]\n            k -= e[1]\n        elif k == 1 and e[1] == 1:\n            zero_cnt -= e[0]\n            k -= 1\n        if k == 0:\n            break\n    print(zero_cnt)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ls = list(input())\n    i = 0\n    sp_lst = []\n    zero_cnt = 0\n    while i < len(ls):\n        if ls[i] == '0':\n            temp = i\n            while i < len(ls) and ls[i] == '0':\n                i += 1\n            if temp == 0 or i == len(ls):\n                sp_lst.append((i - temp, 1))\n                zero_cnt += i - temp\n            else:\n                sp_lst.append((i - temp, 2))\n                zero_cnt += i - temp\n        i += 1\n    sp_lst.sort(key=lambda e: (e[0], -e[1]), reverse=True)\n    for e in sp_lst:\n        if k >= 2:\n            zero_cnt -= e[0]\n            k -= e[1]\n        elif k == 1 and e[1] == 1:\n            zero_cnt -= e[0]\n            k -= 1\n        if k == 0:\n            break\n    print(zero_cnt)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    bulbs = list(map(len, input().split('1')))\n    total = sum(bulbs)\n    cuts = 0\n    lside = bulbs[0]\n    rside = bulbs[-1]\n    sidel = True\n    sider = True\n    bulbs.sort(reverse=True)\n    for i in bulbs:\n        if k <= 0:\n            break\n        elif i == lside and sidel == True:\n            k -= 1\n            cuts += i\n            sidel = False\n        elif i == rside and sider == True:\n            k -= 1\n            cuts += i\n            sider = False\n        elif k > 1:\n            k -= 2\n            cuts += i\n    print(total - cuts)", "try:\n    t = int(input())\n    while t:\n        t = t - 1\n        (n, k) = map(int, input().split())\n        s = input()\n        start = 0\n        for x in s:\n            if x == '1':\n                break\n            start += 1\n        end = 0\n        for x in s[::-1]:\n            if x == '1':\n                break\n            end += 1\n        zero = 0\n        a = []\n        for x in s:\n            if x == '1':\n                if zero != 0:\n                    a.append(zero)\n                zero = 0\n            else:\n                zero += 1\n        a.append(zero)\n        a = sorted(a, reverse=True)\n        for i in range(len(a)):\n            if k >= 1 and a[i] != 0:\n                if a[i] == start and start != 0:\n                    start = 0\n                    k -= 1\n                    a[i] = 0\n                elif a[i] == end and end != 0:\n                    k -= 1\n                    a[i] = 0\n                    end = 0\n                elif k > 1:\n                    a[i] = 0\n                    k -= 2\n        dis = 0\n        for x in a:\n            dis += x\n        print(dis)\nexcept:\n    pass", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    if n == 1:\n        print([1, 0][n])\n    elif k == 0:\n        print(n - s.count('1'))\n    else:\n        p1 = 0\n        p2 = n - 1\n        pz = 0\n        sz = 0\n        if s[0] == '0':\n            for i in range(n):\n                p1 = i\n                if s[i] != '0':\n                    break\n                pz += 1\n        if s[-1] == '0':\n            for i in range(n - 1, p1, -1):\n                p2 = i\n                if s[p2] != '0':\n                    break\n                sz += 1\n        z = 0\n        arr = []\n        for i in range(p1 + 1, p2 + 1):\n            if s[i] != '0':\n                if s[i - 1] == '0':\n                    arr.append(z)\n                z = 0\n            else:\n                z += 1\n        arr = sorted([pz, sz]) + sorted(arr)\n        if len(arr) <= 2:\n            if k >= 2:\n                print(0)\n            elif k == 1:\n                print(min(arr))\n        else:\n            ptr = len(arr) - 1\n            ans = sum(arr)\n            while k > 3 and ptr >= 0:\n                ans -= arr[ptr]\n                k -= 2\n                ptr -= 1\n            if ptr != -1:\n                if ptr >= 2:\n                    if k == 1:\n                        ans -= max(arr[:2])\n                    elif k == 2:\n                        ans -= max(arr[1] + arr[0], arr[ptr])\n                    else:\n                        ans -= max(arr[1] + arr[0], max(arr[:2]) + arr[ptr])\n                elif ptr == 1:\n                    if k == 1:\n                        ans -= max(arr[0], arr[1])\n                    else:\n                        ans -= arr[0] + arr[1]\n                elif ptr == 0:\n                    if k >= 1:\n                        ans -= arr[0]\n            print(ans)", "try:\n    T = int(input())\n    while T:\n        (N, K) = tuple(map(int, input().split()))\n        S = input()\n        ls = list(S)\n        temp = []\n        part = 0\n        countz = 0\n        lflag = 0\n        final = []\n        lz = 0\n        rz = 0\n        for x in ls:\n            if x == '0':\n                countz += 1\n                if lflag == 0:\n                    lz += 1\n            if x == '1':\n                part += 1\n                lflag = 1\n            if part == 1:\n                if x == '0':\n                    temp.append(x)\n            if part == 2:\n                if len(temp) > 0:\n                    final.append(len(temp))\n                temp = []\n                part = 1\n        if part == 1 and len(temp) > 0:\n            rz = len(temp)\n        final.sort(reverse=True)\n        if K % 2 != 0 and K > 0:\n            countz = countz - max(lz, rz)\n            K = K - 1\n            if K > 0:\n                maincutsec = K // 2\n                if len(final) >= maincutsec:\n                    if maincutsec == 1 and min(rz, lz) > final[0]:\n                        countz = countz - min(rz, lz)\n                    elif maincutsec == 1:\n                        countz -= final[0]\n                    if maincutsec > 1:\n                        countz = countz - sum(final[:maincutsec - 1])\n                        if min(lz, rz) > final[maincutsec - 1]:\n                            countz = countz - min(lz, rz)\n                        else:\n                            countz = countz - final[maincutsec - 1]\n                else:\n                    countz = countz - sum(final) - min(lz, rz)\n        else:\n            maincutsec = K // 2\n            if len(final) >= maincutsec:\n                if maincutsec == 1 and rz + lz > final[0]:\n                    countz = countz - (rz + lz)\n                elif maincutsec == 1:\n                    countz -= final[0]\n                if maincutsec > 1:\n                    countz = countz - sum(final[:maincutsec - 1])\n                    if rz + lz > final[maincutsec - 1]:\n                        countz = countz - (rz + lz)\n                    else:\n                        countz = countz - final[maincutsec - 1]\n            else:\n                countz = countz - sum(final) - (rz + lz)\n        print(countz)\n        T = T - 1\nexcept:\n    pass", "from sys import stdin, stdout, setrecursionlimit\nimport heapq\nfrom math import gcd, ceil, sqrt\nfrom collections import Counter, deque\nfrom bisect import bisect_left, bisect_right\nfrom itertools import combinations, permutations\nii1 = lambda : int(stdin.readline().strip())\nis1 = lambda : stdin.readline().strip()\niia = lambda : list(map(int, stdin.readline().strip().split()))\nisa = lambda : stdin.readline().strip().split()\nsetrecursionlimit(100000)\nmod = 1000000007\ntc = ii1()\nfor _ in range(tc):\n    (n, k) = iia()\n    s = is1()\n    if set(s) == set(['0']):\n        print(0)\n        continue\n    (one, two) = ([], [])\n    start = end = None\n    for i in range(n):\n        if s[i] == '0':\n            if start == None:\n                start = i\n                end = i\n            else:\n                end = i\n        elif start != None:\n            if start == 0:\n                one.append(end - start + 1)\n            else:\n                two.append(end - start + 1)\n            start = end = None\n    if start != None:\n        one.append(n - start)\n    one = deque(sorted(one, reverse=True))\n    two = deque(sorted(two, reverse=True))\n    while k > 0:\n        if len(one) and len(two) and (one[0] >= two[0]):\n            one.popleft()\n            k -= 1\n        elif len(two) and k > 1:\n            two.popleft()\n            k -= 2\n        else:\n            while k > 0 and len(one):\n                k -= 1\n                one.popleft()\n            break\n    print(sum(one) + sum(two))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k == 0:\n        print(s.count('0'))\n        continue\n    if s.count('0') == n:\n        print(0)\n        continue\n    if k == 0:\n        print(s.count('0'))\n        continue\n    front = 0\n    back = 0\n    while s[front] == '0':\n        front += 1\n    i = n - 1\n    while s[i] == '0':\n        i -= 1\n        back += 1\n    cons = []\n    zero = 0\n    flag = 0\n    for i in range(front, n - back):\n        if s[i] == '0':\n            flag = 1\n            zero += 1\n        if s[i] == '1':\n            if flag:\n                cons.append(zero)\n                zero = 0\n                flag = 0\n    cons.sort()\n    cons.reverse()\n    if cons == []:\n        if k == 1:\n            print(min(front, back))\n            continue\n        if k == 0:\n            print(front + back)\n            continue\n        elif k > 1:\n            print(0)\n            continue\n    if k % 2:\n        if front > back:\n            front = 0\n        else:\n            back = 0\n        k -= 1\n    if front + back > cons[0]:\n        front = 0\n        back = 0\n        k -= 2\n    i = 0\n    while cons[i] >= front + back and k > 0:\n        cons[i] = 0\n        k -= 2\n        i += 1\n        if i > len(cons) - 1:\n            break\n    if k:\n        front = 0\n        back = 0\n        k -= 2\n    while k > 0 and i < len(cons):\n        cons[i] = 0\n        k -= 2\n        i += 1\n    print(sum(cons) + front + back)", "t = int(input())\nfor i in range(0, t):\n    (n, k) = map(int, input().split())\n    str1 = input()\n    l1 = []\n    ct = 0\n    for j in range(0, n):\n        if str1[j] == '0':\n            ct += 1\n        if str1[j] == '1' or j == n - 1:\n            l1.append(ct)\n            ct = 0\n    if str1[-1] == '1':\n        l1.append(0)\n    if k == 1:\n        yy = max(l1[0], l1[-1])\n        z = sum(l1)\n        ans = z - yy\n    elif k == 0:\n        z = sum(l1)\n        ans = z\n    else:\n        length = len(l1)\n        if k % 2 == 0:\n            xx = l1[0] + l1[-1]\n            arr2 = l1[1:length - 1]\n            arr2.append(xx)\n            arr2.sort(reverse=True)\n            torem = k // 2\n            arr3 = arr2[torem:]\n            ans = sum(arr3)\n        else:\n            xx = min(l1[0], l1[-1])\n            arr2 = l1[1:length - 1]\n            arr2.sort(reverse=True)\n            torem = int(k / 2)\n            arr3 = arr2[torem:]\n            ans = sum(arr3) + xx\n            xx = l1[0] + l1[-1]\n            arr2 = l1[1:length - 1]\n            arr2.append(xx)\n            arr2.sort(reverse=True)\n            torem = int(k / 2)\n            arr3 = arr2[torem:]\n            ans1 = sum(arr3)\n            ans = min(ans, ans1)\n    print(ans)", "t = int(input())\nfor i in range(0, t):\n    (n, k) = map(int, input().split())\n    str1 = input()\n    l1 = []\n    ct = 0\n    for j in range(0, n):\n        if str1[j] == '0':\n            ct += 1\n        if str1[j] == '1' or j == n - 1:\n            l1.append(ct)\n            ct = 0\n    if str1[-1] == '1':\n        l1.append(0)\n    if k == 1:\n        yy = max(l1[0], l1[-1])\n        z = sum(l1)\n        ans = z - yy\n    elif k == 0:\n        z = sum(l1)\n        ans = z\n    else:\n        length = len(l1)\n        if k % 2 == 0:\n            xx = l1[0] + l1[-1]\n            arr2 = l1[1:length - 1]\n            arr2.append(xx)\n            arr2.sort(reverse=True)\n            torem = int(k / 2)\n            arr3 = arr2[torem:]\n            ans = sum(arr3)\n        else:\n            xx = min(l1[0], l1[-1])\n            arr2 = l1[1:length - 1]\n            arr2.sort(reverse=True)\n            torem = int(k / 2)\n            arr3 = arr2[torem:]\n            ans = sum(arr3) + xx\n            xx = l1[0] + l1[-1]\n            arr2 = l1[1:length - 1]\n            arr2.append(xx)\n            arr2.sort(reverse=True)\n            torem = int(k / 2)\n            arr3 = arr2[torem:]\n            ans1 = sum(arr3)\n            ans = min(ans, ans1)\n    print(ans)", "pi = int(input())\nfor t in range(0, pi):\n    (a, b) = map(int, input().split())\n    piii = input()\n    count_1 = 0\n    for i in piii:\n        if i == '1':\n            count_1 += 1\n    split = []\n    part = []\n    for i in range(0, a):\n        part.append(piii[i])\n        if i + 1 < a:\n            if piii[i] != piii[i + 1]:\n                split.append(part)\n                part = []\n        else:\n            split.append(part)\n    if len(split) - 1 <= b:\n        print(0)\n    else:\n        count = []\n        count_0 = []\n        bg = 0\n        eg = 0\n        for i in range(0, len(split)):\n            count.append([int(split[i][0]), len(split[i])])\n        for i in range(0, len(split)):\n            if count[i][0] == 0:\n                count_0.append(len(split[i]))\n        count_0.sort(reverse=True)\n        for i in count_0:\n            if b >= 1:\n                if count[len(split) - 1] == [0, i] and eg < 1:\n                    a = a - i\n                    b = b - 1\n                    eg = 1\n                elif count[0] == [0, i] and bg < 1:\n                    a = a - i\n                    b = b - 1\n                    bg = 1\n                elif b >= 2:\n                    a = a - i\n                    b = b - 2\n        print(a - count_1)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = list(map(len, input().split('1')))\n    sm = sum(s)\n    l = s[0]\n    r = s[len(s) - 1]\n    fl = True\n    fr = True\n    s.sort(reverse=True)\n    count = 0\n    for i in s:\n        if k <= 0:\n            break\n        if i == l and fl == True:\n            k -= 1\n            count += i\n            fl = False\n        elif i == r and fr == True:\n            k -= 1\n            count += i\n            fr = False\n        elif k > 1:\n            k -= 2\n            count += i\n    print(sm - count)", "import sys\nimport math\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    s = input()\n    start = 0\n    end = 0\n    mid = []\n    i = 0\n    while i < n and s[i] == '0':\n        start += 1\n        i += 1\n    if i == n:\n        print(0)\n    else:\n        j = n - 1\n        while j >= 0 and s[j] == '0':\n            end += 1\n            j -= 1\n        count = 0\n        i += 1\n        while i < j:\n            if s[i] == '0':\n                count += 1\n            elif count > 0:\n                mid.append(count)\n                count = 0\n            i += 1\n        if count > 0:\n            mid.append(count)\n        mid.sort(reverse=True)\n\n        def solve(k, mid):\n            size = len(mid)\n            ans = 999999999\n            if k >= 0:\n                ans = sum(mid[min(k // 2, size):])\n            return ans\n        a1 = solve(k, mid) + start + end\n        a2 = solve(k - 1, mid) + min(start, end)\n        a3 = solve(k - 2, mid)\n        print(min(a1, a2, a3))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ns = s\n    arr = ns.split('1')\n    arr = [len(x) for x in arr if x]\n    weird = []\n    if len(arr) >= 2:\n        if s[0] == '0':\n            weird.append(arr[0])\n        if s[-1] == '0':\n            weird.append(arr[-1])\n    elif len(arr) == 1:\n        if s[0] == '0':\n            weird.append(arr[0])\n        elif s[-1] == '0':\n            weird.append(arr[0])\n    arr = list(sorted(arr, reverse=True))\n    i = 0\n    len_arr = len(arr)\n    while i < len_arr and k:\n        t = arr[i]\n        if t in weird:\n            if t == weird[0]:\n                weird.pop(0)\n            else:\n                weird.pop()\n            arr[i] = 0\n            k -= 1\n        elif k >= 2:\n            arr[i] = 0\n            k -= 2\n        i += 1\n    print(sum(arr))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    d = []\n    t = 0\n    for i in range(n):\n        if s[i] == '0':\n            t += 1\n        else:\n            if len(d) == 0:\n                d.append([t, 1])\n            else:\n                d.append([t, 2])\n            t = 0\n    f = 0\n    if t != 0:\n        if len(d) == 0:\n            f = 1\n        d.append([t, 1])\n    d.sort(key=lambda x: x[1])\n    d.sort(reverse=True, key=lambda x: x[0])\n    if f == 1:\n        print(0)\n    else:\n        for i in d:\n            if k >= i[1]:\n                k -= i[1]\n                i[0] = 0\n        out = 0\n        for i in d:\n            out += i[0]\n        print(out)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = list(map(len, input().split('1')))\n    sm = sum(s)\n    l = s[0]\n    r = s[len(s) - 1]\n    fl = True\n    fr = True\n    s.sort(reverse=True)\n    count = 0\n    for i in s:\n        if k <= 0:\n            break\n        if i == l and fl == True:\n            k -= 1\n            count += i\n            fl = False\n        elif i == r and fr == True:\n            k -= 1\n            count += i\n            fr = False\n        elif k > 1:\n            k -= 2\n            count += i\n    print(sm - count)", "t = int(input())\nfor i in range(0, t):\n    (a, b) = map(int, input().split())\n    str1 = input()\n    l1 = []\n    ct = 0\n    for j in range(0, a):\n        if str1[j] == '0':\n            ct += 1\n        if str1[j] == '1' or j == a - 1:\n            l1.append(ct)\n            ct = 0\n    if str1[-1] == '1':\n        l1.append(0)\n    if b == 1:\n        yy = max(l1[0], l1[-1])\n        z = sum(l1)\n        ans = z - yy\n    elif b == 0:\n        z = sum(l1)\n        ans = z\n    else:\n        length = len(l1)\n        if b % 2 == 0:\n            xx = l1[0] + l1[-1]\n            arr2 = l1[1:length - 1]\n            arr2.append(xx)\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans = sum(arr3)\n        else:\n            xx = min(l1[0], l1[-1])\n            arr2 = l1[1:length - 1]\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans = sum(arr3) + xx\n            xx = l1[0] + l1[-1]\n            arr2 = l1[1:length - 1]\n            arr2.append(xx)\n            arr2.sort(reverse=True)\n            torem = int(b / 2)\n            arr3 = arr2[torem:]\n            ans1 = sum(arr3)\n            ans = min(ans, ans1)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k == 0:\n        print(s.count('0'))\n        continue\n    if s.count('0') == n:\n        print(0)\n        continue\n    if k == 0:\n        print(s.count('0'))\n        continue\n    front = 0\n    back = 0\n    while s[front] == '0':\n        front += 1\n    i = n - 1\n    while s[i] == '0':\n        i -= 1\n        back += 1\n    cons = []\n    zero = 0\n    flag = 0\n    for i in range(front, n - back):\n        if s[i] == '0':\n            flag = 1\n            zero += 1\n        if s[i] == '1':\n            if flag:\n                cons.append(zero)\n                zero = 0\n                flag = 0\n    cons.sort()\n    cons.reverse()\n    if cons == []:\n        if k == 1:\n            print(min(front, back))\n            continue\n        if k == 0:\n            print(front + back)\n            continue\n        elif k > 1:\n            print(0)\n            continue\n    if k % 2:\n        if front > back:\n            front = 0\n        else:\n            back = 0\n        k -= 1\n    if front + back > cons[0]:\n        front = 0\n        back = 0\n        k -= 2\n    i = 0\n    while cons[i] >= front + back and k > 0:\n        cons[i] = 0\n        k -= 2\n        i += 1\n        if i > len(cons) - 1:\n            break\n    if k:\n        front = 0\n        back = 0\n        k -= 2\n    while k > 0 and i < len(cons):\n        cons[i] = 0\n        k -= 2\n        i += 1\n    print(sum(cons) + front + back)", "for _ in range(int(input())):\n    (n, kost) = map(int, input().split())\n    a = list(input())\n    val = []\n    wt = []\n    mybool = False\n    count = 0\n    for j in range(n):\n        if a[j] == '1':\n            break\n    first = j\n    if j == n - 1:\n        print('0')\n        continue\n    for k in a[j:]:\n        if k == '1':\n            if mybool == False:\n                mybool = True\n                val.append(count)\n            count = 0\n        else:\n            count += 1\n            mybool = False\n    if len(val) > 0:\n        val.pop(0)\n    last1 = count\n    if kost % 2 == 0:\n        val.append(first + last1)\n        val.sort(reverse=True)\n        ans = sum(val[:kost // 2])\n    else:\n        val.sort(reverse=True)\n        temp1 = sum(val[:(kost - 1) // 2]) + max(first, last1)\n        val.append(first + last1)\n        val.sort(reverse=True)\n        temp2 = sum(val[:(kost - 1) // 2])\n        ans = max(temp2, temp1)\n    print(max(0, a.count('0') - ans))", "def Zero(input_str):\n    return max(map(str, input_str.split('1')))\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = list(map(len, input().split('1')))\n    sm = sum(s)\n    l = s[0]\n    r = s[len(s) - 1]\n    fl = True\n    fr = True\n    s.sort(reverse=True)\n    count = 0\n    for i in s:\n        if k <= 0:\n            break\n        if i == l and fl == True:\n            k -= 1\n            count += i\n            fl = False\n        elif i == r and fr == True:\n            k -= 1\n            count += i\n            fr = False\n        elif k > 1:\n            k -= 2\n            count += i\n    print(sm - count)", "for _ in range(int(input())):\n    (n, kost) = map(int, input().split())\n    a = list(input())\n    val = []\n    wt = []\n    mybool = False\n    count = 0\n    for j in range(n):\n        if a[j] == '1':\n            break\n    first = j\n    if j == n - 1:\n        print(0)\n        continue\n    for k in a[j:]:\n        if k == '1':\n            if mybool == False:\n                mybool = True\n                val.append(count)\n            count = 0\n        else:\n            count += 1\n            mybool = False\n    if len(val) > 0:\n        val.pop(0)\n    last = count\n    if kost % 2 == 0:\n        val.append(first + last)\n        val.sort(reverse=True)\n        ans = sum(val[:kost // 2])\n    else:\n        val.sort(reverse=True)\n        temp1 = sum(val[:(kost - 1) // 2]) + max(first, last)\n        val.append(first + last)\n        val.sort(reverse=True)\n        temp2 = sum(val[:(kost - 1) // 2])\n        ans = max(temp2, temp1)\n    print(max(0, a.count('0') - ans))", "def shukla(store, n, cuts, st):\n    c = 0\n    val = st.count('0')\n    for i in range(n):\n        if st[i] == '0':\n            c += 1\n            i += 1\n        else:\n            break\n    xv = c\n    i = n - 1\n    c = 0\n    while i < n:\n        if st[i] == '0':\n            c += 1\n            i -= 1\n        else:\n            break\n    yv = c\n    c = 0\n    for i in range(xv, n - yv):\n        if st[i] == '0':\n            c += 1\n        elif c:\n            store.append(c)\n            c = 0\n    if c:\n        store.append(c)\n    if cuts == 2:\n        if len(store) > 0:\n            val -= max(xv + yv, max(store))\n            print(val)\n        else:\n            val -= xv + yv\n            print(val)\n        return\n    store.sort(reverse=True)\n    if cuts % 2 == 1:\n        val -= max(xv, yv)\n        cuts -= 1\n        i = 0\n        while cuts > 0:\n            if i > len(store) - 1:\n                if cuts > 0:\n                    if min(xv, yv) > 0:\n                        val = 0\n                break\n            if store[i] > min(xv, yv):\n                val -= store[i]\n                i += 1\n                cuts -= 2\n            else:\n                val -= min(xv, yv)\n                cuts -= 2\n                xv = -1\n                yv = -1\n        print(val)\n    else:\n        i = 0\n        while cuts > 0:\n            if i > len(store) - 1:\n                if cuts > 0:\n                    if cuts == 1 and (xv > 0 or yv > 0):\n                        val -= max(xv, yv)\n                    else:\n                        if xv > 0:\n                            val -= xv\n                        if yv > 0:\n                            val -= yv\n                break\n            if store[i] > xv + yv:\n                val -= store[i]\n                i += 1\n                cuts -= 2\n            else:\n                val -= xv + yv\n                cuts -= 2\n                xv = -1\n                yv = -1\n        print(val)\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    store = []\n    val = s.count('0')\n    if k == 0:\n        print(val)\n    elif val == n or val == 0:\n        print(0)\n    else:\n        shukla(store, n, k, s)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if s.count('0') == n:\n        print(0)\n        continue\n    if k == 0:\n        print(s.count('0'))\n        continue\n    front = 0\n    back = 0\n    while s[front] == '0':\n        front += 1\n    i = n - 1\n    while s[i] == '0':\n        i -= 1\n        back += 1\n    cons = []\n    zero = 0\n    flag = 0\n    for i in range(front, n - back):\n        if s[i] == '0':\n            flag = 1\n            zero += 1\n        if s[i] == '1':\n            if flag:\n                cons.append(zero)\n                zero = 0\n                flag = 0\n    cons.sort()\n    cons.reverse()\n    if cons == []:\n        if k == 1:\n            print(min(front, back))\n            continue\n        if k == 0:\n            print(front + back)\n            continue\n        elif k > 1:\n            print(0)\n            continue\n    if k % 2:\n        if front > back:\n            front = 0\n        else:\n            back = 0\n        k -= 1\n    if front + back > cons[0]:\n        front = 0\n        back = 0\n        k -= 2\n    i = 0\n    while cons[i] >= front + back and k > 0:\n        cons[i] = 0\n        k -= 2\n        i += 1\n        if i > len(cons) - 1:\n            break\n    if k:\n        front = 0\n        back = 0\n        k -= 2\n    while k > 0 and i < len(cons):\n        cons[i] = 0\n        k -= 2\n        i += 1\n    print(sum(cons) + front + back)", "for i in range(int(input())):\n    (inp, size) = map(int, input().split())\n    battlepass = input()\n    valorant = list(map(int, list(battlepass)))\n    sage = list(map(len, battlepass.split('1')))\n    breach = True\n    brim = True\n    for i in range(sage.count(0)):\n        sage.remove(0)\n    cnt = 0\n    raze = sorted(sage, reverse=True)\n    jett = list(sage)\n    for i in range(len(raze)):\n        if cnt < size:\n            if sage[0] == raze[i] and valorant[0] == 0 and breach:\n                cnt += 1\n                breach = False\n                jett.remove(raze[i])\n            elif sage[-1] == raze[i] and valorant[-1] == 0 and brim:\n                cnt += 1\n                brim = False\n                jett.remove(raze[i])\n            elif cnt + 1 < size:\n                cnt += 2\n                jett.remove(raze[i])\n    print(sum(jett))", "for _ in range(int(input())):\n    z = []\n    cc = 0\n    (l1, f1) = (0, 0)\n    ans = 0\n    a1 = 0\n    b1 = 0\n    (n, k) = map(int, input().split())\n    s = list(input())\n    for i in s:\n        if i == '1':\n            z.append(cc)\n            cc = 0\n        elif i == '0':\n            cc += 1\n    if cc > 0:\n        z.append(cc)\n    if s[n - 1] != '1':\n        b1 = z[len(z) - 1]\n    else:\n        b1 = -1\n    if s[0] == '1':\n        a1 = -1\n    else:\n        a1 = z[0]\n    z.sort(reverse=True)\n    for i in range(len(z)):\n        if k <= 1:\n            ans += z[i]\n        elif z[i] == b1 and l1 == 0:\n            k -= 1\n            l1 += 1\n        elif z[i] == a1 and f1 == 0:\n            k -= 1\n            f1 += 1\n        elif k >= 2:\n            k -= 2\n    (x1, y1) = (ans, ans)\n    if k == 1:\n        if l1 == 0 and b1 != -1:\n            y1 = ans - b1\n        if f1 == 0 and a1 != -1:\n            x1 = ans - a1\n    print(min(x1, y1))", "for a0 in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    l = [x for x in input().strip()]\n    (s1, s2, cut) = (0, 0, 0)\n    s = []\n    r = []\n    if l[0] == '0' and n > 1 and (l[1] != l[0]):\n        s1 += 1\n        s2 += 1\n    if l[-1] == '0' and n > 1 and (l[-2] != l[-1]):\n        s1 += 1\n    tp = l[0]\n    c = -1\n    for i in range(len(l)):\n        c += 1\n        if l[i] != tp:\n            if tp == '1':\n                c = 0\n            elif l[0] == '0' and s == []:\n                s.append(c)\n            else:\n                r.append(c)\n            cut += 1\n            tp = l[i]\n            if i < n - 1 and l[i] == '0' and (l[i] != l[i + 1]):\n                s2 += 1\n            if i == n - 1 and l[i] == '0':\n                s2 += 1\n    if tp == '0':\n        s.append(c + 1)\n    r.sort(reverse=True)\n    if s != [] and s[0] < s[-1]:\n        (s[0], s[-1]) = (s[-1], s[0])\n    if cut <= k:\n        print(0)\n    else:\n        if k % 2 == 1 and s != []:\n            cut -= 1\n            k -= 1\n            del s[0]\n        if s == []:\n            for i in range(k // 2):\n                del r[0]\n            print(sum(r))\n        else:\n            while True:\n                if (k == 1 or k == 0) or s == []:\n                    break\n                if r[0] > s[0]:\n                    k -= 2\n                    cut -= 2\n                    del r[0]\n                else:\n                    cut -= 1\n                    k -= 1\n                    del s[0]\n            while True:\n                if k == 0 or k == 1:\n                    break\n                del r[0]\n                k -= 2\n                cut -= 2\n            if k == 1 and len(s) > 0:\n                del s[0]\n            print(sum(r) + sum(s))", "for T in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    bulbs = s.split('1')\n    c = [len(i) for i in bulbs if i != '']\n    if c == []:\n        print('0')\n    else:\n        (f_c, l_c) = (0, 0)\n        (first, last) = (False, False)\n        if s[0] == '0':\n            f_c = c[0]\n            first = True\n        if s[-1] == '0':\n            l_c = c[-1]\n            last = True\n        (f, l) = (0, 0)\n        c.sort()\n        b = False\n        for i in range(len(c) - 1, -1, -1):\n            if k <= 2:\n                b = True\n                break\n            if c[i] == f_c and (not f):\n                k -= 1\n                f = 1\n            elif c[i] == l_c and (not l):\n                k -= 1\n                l = 1\n            else:\n                k -= 2\n        if i == 0 and b == False:\n            print('0')\n        else:\n            i += 1\n            val = 0\n            for j in range(i):\n                val += c[j]\n            if k == 2:\n                if last == True and first == True:\n                    if l == 0 and f == 0:\n                        val -= max(l_c + f_c, c[i - 1])\n                    else:\n                        val -= c[i - 1]\n                else:\n                    val -= c[i - 1]\n            elif k == 1:\n                if last == True and first == True:\n                    if l == 0 and f == 0:\n                        val -= max(l_c, f_c)\n                    elif l == 1 and f == 0:\n                        val -= f_c\n                    elif l == 0 and f == 1:\n                        val -= l_c\n                elif last == True and first == False:\n                    if l == 0:\n                        val -= l_c\n                elif last == False and first == True:\n                    if f == 0:\n                        val -= f_c\n            print(val)", "for _ in range(int(input())):\n    (n, k) = (int(x) for x in input().split())\n    s = input()\n    if len(s) == 1:\n        print(0)\n    else:\n        ind = 0\n        cnt = 0\n        ini = 0\n        sth = 0\n        last = 0\n        flag = 1\n        data = []\n        while ind < len(s):\n            if s[ind] == '1' and sth == 0:\n                if ini == 0 and ind != 0:\n                    ini += ind\n                elif ini == 0 and ind == 0:\n                    flag = 0\n                if cnt == 0:\n                    cnt = 1\n            elif s[ind] == '0' and cnt == 1:\n                sth += 1\n                if ind == len(s) - 1:\n                    last += sth\n            elif s[ind] == '1' and sth != 0:\n                cnt = 0\n                data.append(sth)\n                sth = 0\n                if ind != len(s) - 1 and s[ind + 1] == '0':\n                    cnt = 1\n            ind += 1\n        ind = len(data) - 1\n        if k > 1:\n            data.sort()\n        if flag == 0:\n            ini = 0\n        ini_ = ini\n        last_ = last\n        data_ = data[:]\n        k_ = k\n        while k != 0:\n            if k % 2 != 0:\n                if ini > last:\n                    ini = 0\n                else:\n                    last = 0\n                k -= 1\n            while ind >= 0 and k > 0:\n                ind -= 1\n                k -= 2\n            if ind == -1 and k > 0:\n                if k > 1:\n                    ini = 0\n                    last = 0\n                elif ini > last:\n                    ini = 0\n                else:\n                    last = 0\n            break\n        ans = ini + last\n        if ind >= 0:\n            ans += sum(data[:ind + 1])\n        ini = ini_\n        last = last_\n        k = k_\n        data = data_[:]\n        ind = len(data) - 1\n        while k > 0:\n            if k % 2 != 0:\n                if ini > last:\n                    ini = 0\n                else:\n                    last = 0\n                k -= 1\n            else:\n                while k > 2 and ind >= 0:\n                    ind -= 1\n                    k -= 2\n                if ini != 0 and last != 0 and (ind >= 0) and (ini + last > data[ind]):\n                    ini = 0\n                    last = 0\n                    k -= 2\n                elif ini != 0 and last != 0 and (ind >= 0):\n                    ind -= 1\n                    k -= 2\n                elif ini != 0 and last != 0:\n                    ini = 0\n                    last = 0\n                    k -= 2\n                    break\n                else:\n                    if ini > last:\n                        ini = 0\n                    else:\n                        last = 0\n                    break\n        ans_ = ini + last\n        if ind >= 0:\n            ans_ += sum(data[:ind + 1])\n        print(min(ans, ans_))", "import heapq\n\ndef printNumber(N, K, string):\n    k = 1\n    if string[0] == '1':\n        k = 2\n    heap = []\n    zeros = 0\n    total_zeros = 0\n    for val in string:\n        if val == '1':\n            heapq.heappush(heap, (-1 * zeros, k))\n            total_zeros += zeros\n            zeros = 0\n            k = 2\n        else:\n            zeros += 1\n    if zeros != 0:\n        heapq.heappush(heap, (-1 * zeros, 1))\n        total_zeros += zeros\n    while heap != [] and K > 0:\n        item = heapq.heappop(heap)\n        if K >= item[1]:\n            total_zeros -= item[0] * -1\n            K -= item[1]\n    print(total_zeros)\ntry:\n    T = int(input())\nexcept:\n    exit()\nfor t in range(T):\n    line = input().split()\n    string = list(input())\n    printNumber(int(line[0]), int(line[1]), string)", "import heapq\n\ndef printNumber(N, K, string):\n    k = 1\n    if string[0] == '1':\n        k = 2\n    heap = []\n    zeros = 0\n    total_zeros = 0\n    for val in string:\n        if val == '1':\n            heapq.heappush(heap, (-1 * zeros, k))\n            total_zeros += zeros\n            zeros = 0\n            k = 2\n        else:\n            zeros += 1\n    if zeros != 0:\n        heapq.heappush(heap, (-1 * zeros, 1))\n        total_zeros += zeros\n    while heap != [] and K > 0:\n        item = heapq.heappop(heap)\n        if K >= item[1]:\n            total_zeros -= item[0] * -1\n            K -= item[1]\n    print(total_zeros)\ntry:\n    T = int(input())\nexcept:\n    exit()\nfor t in range(T):\n    line = input().split()\n    string = list(input())\n    printNumber(int(line[0]), int(line[1]), string)", "t = int(input())\nfor _ in range(t):\n    l = []\n    (n, k) = map(int, input().split())\n    s = input()\n    temp = 0\n    flag = 0\n    for i in range(n):\n        if s[i] == '1':\n            flag = 1\n            l.append(temp)\n            temp = 0\n        else:\n            temp += 1\n    if flag == 0:\n        print(0)\n    else:\n        l.append(temp)\n        m = l[1:len(l) - 1]\n        m.sort()\n        m.reverse()\n        a1 = sum(l)\n        if k > 0:\n            a1 -= max(l[0], l[-1])\n            k1 = k - 1\n            k1 = k1 // 2\n            for i in range(min(k1, len(m))):\n                a1 -= m[i]\n        a2 = sum(l)\n        k1 = k // 2\n        for i in range(min(k1, len(m))):\n            a2 -= m[i]\n        a3 = sum(l)\n        if k > 1:\n            a3 -= l[0]\n            a3 -= l[-1]\n            k1 = k - 2\n            k1 = k1 // 2\n            for i in range(min(k1, len(m))):\n                a3 -= m[i]\n        print(min(a1, a2, a3))", "t = int(input())\nfor _ in range(t):\n    l = []\n    (n, k) = map(int, input().split())\n    s = input()\n    temp = 0\n    flag = 0\n    for i in range(n):\n        if s[i] == '1':\n            flag = 1\n            l.append(temp)\n            temp = 0\n        else:\n            temp += 1\n    if flag == 0:\n        print(0)\n    else:\n        l.append(temp)\n        m = l[1:len(l) - 1]\n        m.sort()\n        m.reverse()\n        a1 = sum(l)\n        if k > 0:\n            a1 -= max(l[0], l[-1])\n            k1 = k - 1\n            k1 = k1 // 2\n            for i in range(min(k1, len(m))):\n                a1 -= m[i]\n        a2 = sum(l)\n        k1 = k // 2\n        for i in range(min(k1, len(m))):\n            a2 -= m[i]\n        a3 = sum(l)\n        if k > 1:\n            a3 -= l[0]\n            a3 -= l[-1]\n            k1 = k - 2\n            k1 = k1 // 2\n            for i in range(min(k1, len(m))):\n                a3 -= m[i]\n        print(min(a1, a2, a3))", "for _ in range(int(input())):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    s = input()\n    a = []\n    if s.count('1') == 0:\n        print(0)\n    else:\n        hello = -1\n        for i in range(n):\n            if s[i] == '1':\n                if hello == -1:\n                    a.append(i - hello - 1)\n                elif i - hello - 1 > 0:\n                    a.append(i - hello - 1)\n                hello = i\n        interst1 = a[0]\n        interst2 = n - 1 - hello\n        a.remove(a[0])\n        a.sort(reverse=True)\n        j = -1\n        ax = 0\n        while k > 2:\n            j += 1\n            k -= 2\n        if j > len(a) - 1:\n            print(0)\n        else:\n            if k == 0:\n                ax += interst1 + interst2\n            elif k == 2:\n                if j == len(a) - 1:\n                    ax = 0\n                elif max(a[j + 1], interst1 + interst2) == a[j + 1] or (interst1 == 0 and interst2 == 0):\n                    j += 1\n                    ax += interst1 + interst2\n            elif j == -1 and min(a[0], interst1, interst2) == a[0]:\n                ax = min(interst1, interst2)\n            elif min(a[j], interst1, interst2) == a[j]:\n                ax = a[j]\n            else:\n                ax += min(interst1, interst2)\n            ax += sum(a[j + 1:])\n            print(ax)", "T = int(input())\nfor _ in range(T):\n    (N, K) = [int(x) for x in input().split()]\n    output = [int(x) for x in input()]\n    bulbs = [0 for i in range(N)]\n    zeros_and_req_cut = []\n    req_cut = 1\n    zero_count = 0\n    one_count = 0\n    for o in range(len(output)):\n        if output[o] == 0:\n            zero_count += 1\n        else:\n            one_count += 1\n            if zero_count != 0:\n                zeros_and_req_cut.append((zero_count, req_cut))\n            req_cut = 2\n            zero_count = 0\n    if zero_count != 0:\n        zeros_and_req_cut.insert(0, (zero_count, 1))\n    zeros_and_req_cut.sort(key=lambda x: x[0], reverse=True)\n    turn_off = 0\n    for z in range(len(zeros_and_req_cut)):\n        (zeros, cuts) = zeros_and_req_cut[z]\n        if K >= cuts:\n            K -= cuts\n        else:\n            turn_off += zeros\n    if one_count == 0:\n        print(0)\n    else:\n        print(turn_off)"]