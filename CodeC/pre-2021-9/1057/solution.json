["import sys\nfrom collections import Counter\nt = sys.stdin.readline()\nm = 1\nM = 1000000000\nfor _ in range(int(t)):\n    k = sys.stdin.readline()\n    k = int(k)\n    assert 1 <= k <= 100000\n    c = Counter()\n    for _ in range(k):\n        line = sys.stdin.readline()\n        (o, l, v) = line.strip().split()\n        l = int(l)\n        assert m <= l <= M\n        v = v.upper()\n        if o == '<' and v == 'YES':\n            c[l] += 1\n        elif o == '<' and v == 'NO':\n            c[m] += 1\n            c[l] -= 1\n        elif o == '>' and v == 'YES':\n            c[m] += 1\n            c[l + 1] -= 1\n        elif o == '>' and v == 'NO':\n            c[l + 1] += 1\n        elif o == '=' and v == 'YES':\n            c[m] += 1\n            c[l] -= 1\n            c[l + 1] += 1\n        elif o == '=' and v == 'NO':\n            c[l] += 1\n            c[l + 1] -= 1\n    count = 0\n    mcount = k\n    for key in sorted(c):\n        count += c[key]\n        if key <= M:\n            mcount = min(mcount, count)\n    print(mcount)", "import sys\nfrom collections import Counter\nt = sys.stdin.readline()\nm = 1\nM = 1000000000\nfor _ in range(int(t)):\n    k = sys.stdin.readline()\n    k = int(k)\n    assert 1 <= k <= 100000\n    c = Counter()\n    for _ in range(k):\n        line = sys.stdin.readline()\n        (o, l, v) = line.strip().split()\n        l = int(l)\n        assert m <= l <= M\n        v = v.upper()\n        if o == '<' and v == 'YES':\n            c[l] += 1\n        elif o == '<' and v == 'NO':\n            c[m] += 1\n            c[l] -= 1\n        elif o == '>' and v == 'YES':\n            c[m] += 1\n            c[l + 1] -= 1\n        elif o == '>' and v == 'NO':\n            c[l + 1] += 1\n        elif o == '=' and v == 'YES':\n            c[m] += 1\n            c[l] -= 1\n            c[l + 1] += 1\n        elif o == '=' and v == 'NO':\n            c[l] += 1\n            c[l + 1] -= 1\n    count = 0\n    mcount = k\n    for key in sorted(c):\n        count += c[key]\n        if key <= M:\n            mcount = min(mcount, count)\n    print(mcount)", "def guessingGame(l):\n    a = []\n    m = 1000000001\n    for i in range(len(l)):\n        k = int(l[i][1])\n        if l[i][0] == '<' and l[i][2] == 'Yes':\n            a.append((1, 1))\n            a.append((k, -1))\n        if l[i][0] == '<' and l[i][2] == 'No':\n            a.append((k, 1))\n            a.append((m, -1))\n        if l[i][0] == '=' and l[i][2] == 'Yes':\n            a.append((k, 1))\n            a.append((k + 1, -1))\n        if l[i][0] == '=' and l[i][2] == 'No':\n            a.append((1, 1))\n            a.append((k, -1))\n            a.append((k + 1, 1))\n            a.append((m, -1))\n        if l[i][0] == '>' and l[i][2] == 'Yes':\n            a.append((k + 1, 1))\n            a.append((m, -1))\n        if l[i][0] == '>' and l[i][2] == 'No':\n            a.append((1, 1))\n            a.append((k + 1, -1))\n    a.sort()\n    w = 0\n    r = 0\n    for i in range(len(a)):\n        w += a[i][1]\n        r = max(w, r)\n    return len(l) - r\nT = int(input())\nanswer = []\nfor _ in range(T):\n    e = int(input())\n    temp = []\n    for q_t in range(e):\n        q = list(map(str, input().rstrip().split()))\n        temp.append(q)\n    result = guessingGame(temp)\n    print(result)", "def guessingGame(l):\n    a = []\n    m = 1000000001\n    for i in range(len(l)):\n        k = int(l[i][1])\n        if l[i][0] == '<' and l[i][2] == 'Yes':\n            a.append((1, 1))\n            a.append((k, -1))\n        if l[i][0] == '<' and l[i][2] == 'No':\n            a.append((k, 1))\n            a.append((m, -1))\n        if l[i][0] == '=' and l[i][2] == 'Yes':\n            a.append((k, 1))\n            a.append((k + 1, -1))\n        if l[i][0] == '=' and l[i][2] == 'No':\n            a.append((1, 1))\n            a.append((k, -1))\n            a.append((k + 1, 1))\n            a.append((m, -1))\n        if l[i][0] == '>' and l[i][2] == 'Yes':\n            a.append((k + 1, 1))\n            a.append((m, -1))\n        if l[i][0] == '>' and l[i][2] == 'No':\n            a.append((1, 1))\n            a.append((k + 1, -1))\n    a.sort()\n    w = 0\n    r = 0\n    for i in range(len(a)):\n        w += a[i][1]\n        r = max(w, r)\n    return len(l) - r\nT = int(input())\nanswer = []\nfor _ in range(T):\n    e = int(input())\n    temp = []\n    for q_t in range(e):\n        q = list(map(str, input().rstrip().split()))\n        temp.append(q)\n    result = guessingGame(temp)\n    print(result)", "def guessingGame(l):\n    a = []\n    m = 1000000001\n    for i in range(len(l)):\n        k = int(l[i][1])\n        if l[i][0] == '<' and l[i][2] == 'Yes':\n            a.append((1, 1))\n            a.append((k, -1))\n        if l[i][0] == '<' and l[i][2] == 'No':\n            a.append((k, 1))\n            a.append((m, -1))\n        if l[i][0] == '=' and l[i][2] == 'Yes':\n            a.append((k, 1))\n            a.append((k + 1, -1))\n        if l[i][0] == '=' and l[i][2] == 'No':\n            a.append((1, 1))\n            a.append((k, -1))\n            a.append((k + 1, 1))\n            a.append((m, -1))\n        if l[i][0] == '>' and l[i][2] == 'Yes':\n            a.append((k + 1, 1))\n            a.append((m, -1))\n        if l[i][0] == '>' and l[i][2] == 'No':\n            a.append((1, 1))\n            a.append((k + 1, -1))\n    a.sort()\n    w = 0\n    r = 0\n    for i in range(len(a)):\n        w += a[i][1]\n        r = max(w, r)\n    return len(l) - r\nT = int(input())\nanswer = []\nfor _ in range(T):\n    e = int(input())\n    temp = []\n    for q_t in range(e):\n        q = list(map(str, input().rstrip().split()))\n        temp.append(q)\n    result = guessingGame(temp)\n    print(result)", "def guessingGame(l):\n    a = []\n    m = 1000000001\n    for i in range(len(l)):\n        k = int(l[i][1])\n        if l[i][0] == '<' and l[i][2] == 'Yes':\n            a.append((1, 1))\n            a.append((k, -1))\n        if l[i][0] == '<' and l[i][2] == 'No':\n            a.append((k, 1))\n            a.append((m, -1))\n        if l[i][0] == '=' and l[i][2] == 'Yes':\n            a.append((k, 1))\n            a.append((k + 1, -1))\n        if l[i][0] == '=' and l[i][2] == 'No':\n            a.append((1, 1))\n            a.append((k, -1))\n            a.append((k + 1, 1))\n            a.append((m, -1))\n        if l[i][0] == '>' and l[i][2] == 'Yes':\n            a.append((k + 1, 1))\n            a.append((m, -1))\n        if l[i][0] == '>' and l[i][2] == 'No':\n            a.append((1, 1))\n            a.append((k + 1, -1))\n    a.sort()\n    w = 0\n    r = 0\n    for i in range(len(a)):\n        w += a[i][1]\n        r = max(w, r)\n    return len(l) - r\nT = int(input())\nanswer = []\nfor _ in range(T):\n    e = int(input())\n    temp = []\n    for q_t in range(e):\n        q = list(map(str, input().rstrip().split()))\n        temp.append(q)\n    result = guessingGame(temp)\n    print(result)", "def guessingGame(l):\n    a = []\n    m = 1000000001\n    for i in range(len(l)):\n        k = int(l[i][1])\n        if l[i][0] == '<' and l[i][2] == 'Yes':\n            a.append((1, 1))\n            a.append((k, -1))\n        if l[i][0] == '<' and l[i][2] == 'No':\n            a.append((k, 1))\n            a.append((m, -1))\n        if l[i][0] == '=' and l[i][2] == 'Yes':\n            a.append((k, 1))\n            a.append((k + 1, -1))\n        if l[i][0] == '=' and l[i][2] == 'No':\n            a.append((1, 1))\n            a.append((k, -1))\n            a.append((k + 1, 1))\n            a.append((m, -1))\n        if l[i][0] == '>' and l[i][2] == 'Yes':\n            a.append((k + 1, 1))\n            a.append((m, -1))\n        if l[i][0] == '>' and l[i][2] == 'No':\n            a.append((1, 1))\n            a.append((k + 1, -1))\n    a.sort()\n    w = 0\n    r = 0\n    for i in range(len(a)):\n        w += a[i][1]\n        r = max(w, r)\n    return len(l) - r\nT = int(input())\nanswer = []\nfor _ in range(T):\n    e = int(input())\n    temp = []\n    for q_t in range(e):\n        q = list(map(str, input().rstrip().split()))\n        temp.append(q)\n    result = guessingGame(temp)\n    print(result)", "import sys\nfrom collections import Counter\nt = sys.stdin.readline()\nm = 1\nM = 1000000000\nfor _ in range(int(t)):\n    k = sys.stdin.readline()\n    k = int(k)\n    assert 1 <= k <= 100000\n    c = Counter()\n    for _ in range(k):\n        line = sys.stdin.readline()\n        (o, l, v) = line.strip().split()\n        l = int(l)\n        assert m <= l <= M\n        v = v.upper()\n        if o == '<' and v == 'YES':\n            c[l] += 1\n        elif o == '<' and v == 'NO':\n            c[m] += 1\n            c[l] -= 1\n        elif o == '>' and v == 'YES':\n            c[m] += 1\n            c[l + 1] -= 1\n        elif o == '>' and v == 'NO':\n            c[l + 1] += 1\n        elif o == '=' and v == 'YES':\n            c[m] += 1\n            c[l] -= 1\n            c[l + 1] += 1\n        elif o == '=' and v == 'NO':\n            c[l] += 1\n            c[l + 1] -= 1\n    count = 0\n    mcount = k\n    for key in sorted(c):\n        count += c[key]\n        if key <= M:\n            mcount = min(mcount, count)\n    print(mcount)", "import sys\nfrom collections import Counter\nt = sys.stdin.readline()\nm = 1\nM = 1000000000\nfor _ in range(int(t)):\n    k = sys.stdin.readline()\n    k = int(k)\n    assert 1 <= k <= 100000\n    c = Counter()\n    for _ in range(k):\n        line = sys.stdin.readline()\n        (o, l, v) = line.strip().split()\n        l = int(l)\n        assert m <= l <= M\n        v = v.upper()\n        if o == '<' and v == 'YES':\n            c[l] += 1\n        elif o == '<' and v == 'NO':\n            c[m] += 1\n            c[l] -= 1\n        elif o == '>' and v == 'YES':\n            c[m] += 1\n            c[l + 1] -= 1\n        elif o == '>' and v == 'NO':\n            c[l + 1] += 1\n        elif o == '=' and v == 'YES':\n            c[m] += 1\n            c[l] -= 1\n            c[l + 1] += 1\n        elif o == '=' and v == 'NO':\n            c[l] += 1\n            c[l + 1] -= 1\n    count = 0\n    mcount = k\n    for key in sorted(c):\n        count += c[key]\n        if key <= M:\n            mcount = min(mcount, count)\n    print(mcount)"]