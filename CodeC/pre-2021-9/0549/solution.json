["KEYS = 12\nT = int(input())\nfor _ in range(T):\n    scale = list(input())\n    n = int(input())\n    length = 0\n    for move in scale:\n        if move == 'S':\n            length += 1\n        elif move == 'T':\n            length += 2\n    num = 0\n    k = 1\n    while k * length < n * KEYS:\n        num += n * KEYS - k * length\n        k += 1\n    print(num)", "KEYS = 12\nT = int(input())\nfor _ in range(T):\n    scale = list(input())\n    n = int(input())\n    length = 0\n    for move in scale:\n        if move == 'S':\n            length += 1\n        elif move == 'T':\n            length += 2\n    num = 0\n    k = 1\n    while k * length < n * KEYS:\n        num += n * KEYS - k * length\n        k += 1\n    print(num)", "trendy = int(input())\nfor _ in range(trendy):\n    sammy = input()\n    n = int(input()) * 12\n    k = sum((1 if i == 'S' else 2 for i in sammy))\n    ways = 0\n    for i in range(n):\n        ways += (n - i - 1) // k\n    print(ways)", "trendy = int(input())\nfor _ in range(trendy):\n    sammy = input()\n    n = int(input()) * 12\n    k = sum((1 if i == 'S' else 2 for i in sammy))\n    ways = 0\n    for i in range(n):\n        ways += (n - i - 1) // k\n    print(ways)", "trendy = int(input())\nfor _ in range(trendy):\n    sammy = input()\n    n = int(input()) * 12\n    k = sum((1 if i == 'S' else 2 for i in sammy))\n    ways = 0\n    for i in range(n):\n        ways += (n - i - 1) // k\n    print(ways)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = int(input()) * 12\n    k = sum((1 if i == 'S' else 2 for i in s))\n    ways = 0\n    for i in range(n):\n        ways += (n - i - 1) // k\n    print(ways)", "for _ in range(0, int(input())):\n    s = str(input())\n    ct = 2 * s.count('T')\n    cs = s.count('S')\n    x = int(input())\n    s = 12 * x\n    c = ct + cs\n    z = c\n    res = 0\n    while s >= c:\n        res += s - c\n        c += z\n    print(res)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = int(input())\n    k = 0\n    for c in s:\n        if c == 'T':\n            k += 2\n        else:\n            k += 1\n    cnt = 0\n    for i in range(1, 12 * n // k + 1):\n        last_start = 12 * n - i * k - 1\n        cnt += last_start + 1\n    print(cnt)", "KEYS = 12\nT = int(input())\nfor _ in range(T):\n    scale = list(input())\n    n = int(input())\n    length = 0\n    for move in scale:\n        if move == 'S':\n            length += 1\n        elif move == 'T':\n            length += 2\n    num = 0\n    k = 1\n    while k * length < n * KEYS:\n        num += n * KEYS - k * length\n        k += 1\n    print(num)", "def soln(n, s):\n    if len(s) > n * 12:\n        return 0\n    scale_len = 0\n    for i in s:\n        if i == 'T':\n            scale_len += 2\n        else:\n            scale_len += 1\n    keys = n * 12\n    mul = keys // scale_len\n    res = (keys - scale_len) * mul\n    for i in range(mul):\n        res -= i * scale_len\n    return res\nfor _ in range(int(input())):\n    s = input()\n    n = int(input())\n    print(soln(n, s))", "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = int(input()) * 12\n    k = sum((1 if i == 'S' else 2 for i in s))\n    ways = 0\n    for i in range(n):\n        ways += (n - i - 1) // k\n    print(ways)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = int(input()) * 12\n    k = sum((1 if i == 'S' else 2 for i in s))\n    arr = [0] * n\n    for i in range(n):\n        arr[i] = (n - i - 1) // k\n    print(sum(arr))", "t = int(input())\nwhile t:\n    t -= 1\n    s = input()\n    n = int(input())\n    s1 = 0\n    for i in s:\n        if i == 'T':\n            s1 += 2\n        else:\n            s1 += 1\n    (f, c, t1, t2) = (0, 0, 12 * n, 0)\n    while f < t1:\n        t2 = f\n        while t2 + s1 < t1:\n            t2 += s1\n            c += 1\n        f += 1\n    print(c)", "for _ in range(int(input())):\n    s = input()\n    n = int(input())\n    lt = 0\n    for m in s:\n        if m == 'T':\n            lt += 2\n        else:\n            lt += 1\n    ans = 0\n    i = 1\n    while 12 * n > i * lt:\n        ans += 12 * n - i * lt\n        i += 1\n    print(ans)", "def soln(n, s):\n    if len(s) > n * 12:\n        return 0\n    scale_len = 0\n    for i in s:\n        if i == 'T':\n            scale_len += 2\n        else:\n            scale_len += 1\n    keys = n * 12\n    mul = keys // scale_len\n    res = (keys - scale_len) * mul\n    for i in range(mul):\n        res -= i * scale_len\n    return res\nfor _ in range(int(input())):\n    s = input()\n    n = int(input())\n    print(soln(n, s))", "KEYS = 12\nT = int(input())\nfor _ in range(T):\n    scale = list(input())\n    n = int(input())\n    length = 0\n    for move in scale:\n        if move == 'S':\n            length += 1\n        elif move == 'T':\n            length += 2\n    num = 0\n    k = 1\n    while k * length < n * KEYS:\n        num += n * KEYS - k * length\n        k += 1\n    print(num)", "KEYS = 12\nT = int(input())\nfor _ in range(T):\n    scale = list(input())\n    n = int(input())\n    length = 0\n    for move in scale:\n        if move == 'S':\n            length += 1\n        elif move == 'T':\n            length += 2\n    num = 0\n    k = 1\n    while k * length < n * KEYS:\n        num += n * KEYS - k * length\n        k += 1\n    print(num)", "KEYS = 12\nT = int(input())\nfor _ in range(T):\n    scale = list(input())\n    n = int(input())\n    length = 0\n    for move in scale:\n        if move == 'S':\n            length += 1\n        elif move == 'T':\n            length += 2\n    num = 0\n    k = 1\n    while k * length < n * KEYS:\n        num += n * KEYS - k * length\n        k += 1\n    print(num)", "t = int(input())\nwhile t != 0:\n    n = input()\n    o = int(input())\n    c = 0\n    ans = 0\n    for i in n:\n        if i == 'T':\n            c += 2\n        else:\n            c += 1\n    x = 12 * o\n    i = 1\n    while True:\n        if i * c + 1 > x:\n            break\n        ans += x - c * i\n        i += 1\n    print(ans)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    s = str(input())\n    n = int(input())\n    keys = 12 * n\n    forward = s.count('T') * 2 + s.count('S')\n    plays = 0\n    for i in range(keys):\n        plays += (keys - i - 1) // forward\n    print(plays)", "for _ in range(int(input())):\n    pattern = input()\n    N = int(input())\n    length = 12 * N\n    keys_in_pattern = 0\n    for i in range(len(pattern)):\n        if pattern[i] == 'S':\n            keys_in_pattern += 1\n        else:\n            keys_in_pattern += 2\n    repeats = length // keys_in_pattern\n    ans = 0\n    for i in range(1, repeats + 1):\n        ans += length - i * keys_in_pattern\n    print(ans)", "for _ in range(int(input())):\n    p = sum([{'T': 2, 'S': 1}[i] for i in input()])\n    o = int(input()) * 12\n    x = o // p\n    print(o * x - p * sum(range(x + 1)))", "for _ in range(int(input())):\n    S = input()\n    n = int(input())\n    keys = 12 * n\n    t = S.count('T')\n    pl = 2 * t + len(S) - t\n    p = 1\n    res = 0\n    while p * pl < keys:\n        res += keys - p * pl\n        p += 1\n    print(res)", "for _ in range(int(input())):\n    S = input()\n    n = int(input())\n    keys = 12 * n\n    t = S.count('T')\n    pl = 2 * t + len(S) - t\n    p = 1\n    res = 0\n    while p * pl < keys:\n        res += keys - p * pl\n        p += 1\n    print(res)", "t = int(input())\nwhile t > 0:\n    pattern = input()\n    Ts = pattern.count('T')\n    Ss = pattern.count('S')\n    pl = 2 * Ts + Ss\n    octave = int(input())\n    keys = 12 * octave\n    pn = 1\n    scales = 0\n    while pn * pl < keys:\n        scales += keys - pn * pl\n        pn += 1\n    print(scales)\n    t -= 1", "def soln(n, s):\n    if len(s) > n * 12:\n        return 0\n    scale_len = 0\n    for i in s:\n        if i == 'T':\n            scale_len += 2\n        else:\n            scale_len += 1\n    keys = n * 12\n    mul = keys // scale_len\n    res = (keys - scale_len) * mul\n    for i in range(mul):\n        res -= i * scale_len\n    return res\nfor _ in range(int(input())):\n    s = input()\n    n = int(input())\n    print(soln(n, s))", "def soln(n, s):\n    if len(s) > n * 12:\n        return 0\n    scale_len = 0\n    for i in s:\n        if i == 'T':\n            scale_len += 2\n        else:\n            scale_len += 1\n    keys = n * 12\n    mul = keys // scale_len\n    res = (keys - scale_len) * mul\n    for i in range(mul):\n        res -= i * scale_len\n    return res\nfor _ in range(int(input())):\n    s = input()\n    n = int(input())\n    print(soln(n, s))", "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = int(input())\n    pc = n * 12\n    cnt = s.count('S') + s.count('T') * 2\n    nr = pc // cnt\n    sm = (pc - cnt) * nr\n    sm -= nr * (nr - 1) // 2 * cnt\n    print(sm)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = int(input())\n    n *= 12\n    cnt = s.count('S') + s.count('T') * 2\n    sm = (n - cnt) * (n // cnt)\n    for i in range(n // cnt):\n        sm -= i * cnt\n    print(sm)", "t = int(input())\nwhile t > 0:\n    pattern = input()\n    Ts = pattern.count('T')\n    Ss = pattern.count('S')\n    pl = 2 * Ts + Ss\n    octave = int(input())\n    keys = 12 * octave\n    pn = 1\n    scales = 0\n    while pn * pl < keys:\n        scales += keys - pn * pl\n        pn += 1\n    print(scales)\n    t -= 1", "for _ in range(int(input())):\n    St = input()\n    St_count = St.count('S') + 2 * St.count('T')\n    n = 12 * int(input())\n    sum_ = (n - St_count) * (n // St_count)\n    for i in range(n // St_count):\n        sum_ -= i * St_count\n    print(sum_)", "for _ in range(int(input())):\n    St = input()\n    St_count = St.count('S') + 2 * St.count('T')\n    n = 12 * int(input())\n    sum_ = n * (n // St_count)\n    for i in range(n // St_count):\n        sum_ -= (i + 1) * St_count\n    print(sum_)", "for _ in range(int(input())):\n    St = input()\n    St_count = St.count('S') + 2 * St.count('T')\n    n = 12 * int(input())\n    sum_ = 0\n    for i in range(n // St_count):\n        sum_ += n - (i + 1) * St_count\n    print(sum_)", "for _ in range(int(input())):\n    St = input()\n    St_count = St.count('S') + 2 * St.count('T')\n    n = 12 * int(input())\n    print(sum([n - (i + 1) * St_count for i in range(n // St_count)]))", "for _ in range(int(input())):\n    s = input()\n    length = 0\n    for i in s:\n        if i == 'T':\n            length += 2\n        elif i == 'S':\n            length += 1\n    n = int(input()) * 12\n    num = 0\n    m = 1\n    while m * length <= n:\n        a = n - m * length\n        num += a\n        m += 1\n    print(num)", "t = int(input())\nwhile t > 0:\n    s = input()\n    n = int(input())\n    key = n * 12\n    count = 0\n    for i in s:\n        if i == 'T':\n            count += 2\n        else:\n            count += 1\n    n1 = 1\n    scales = 0\n    while n1 * count < key:\n        scales += key - n1 * count\n        n1 += 1\n    print(scales)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    pattern = input()\n    Ts = pattern.count('T')\n    Ss = pattern.count('S')\n    pl = 2 * Ts + Ss\n    octave = int(input())\n    keys = 12 * octave\n    pn = 1\n    scales = 0\n    while pn * pl < keys:\n        scales += keys - pn * pl\n        pn += 1\n    print(scales)\n    t -= 1", "def opts(pl, ks):\n    if pl > ks:\n        return 0\n    s = ks % pl\n    e = ks - pl\n    n = (e - s) // pl + 1\n    return (s + e) * n // 2\nfor _ in range(int(input())):\n    pl = sum((2 if x == 'T' else 1 for x in input()))\n    ks = 12 * int(input())\n    print(opts(pl, ks))", "import os.path\nfrom math import gcd, floor, ceil, log2\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfor _ in range(int(input())):\n    s = input()\n    n = inp()\n    l = s.count('T') * 2 + s.count('S')\n    res = 0\n    i = l\n    while i <= 12 * n:\n        res += 12 * n - i\n        i += l\n    pr(res)", "for tc in range(int(input())):\n    x = str(input())\n    n = int(input())\n    keyboardlen = 12 * n\n    a = list(x)\n    r = a.count('T') * 2 + a.count('S')\n    l = keyboardlen // r\n    ans = keyboardlen * l - l * r * (l + 1) // 2\n    print(ans)", "for tc in range(int(input())):\n    x = str(input())\n    n = int(input())\n    keyboardlen = 12 * n\n    a = list(x)\n    r = a.count('T') * 2 + a.count('S')\n    l = keyboardlen // r\n    ans = keyboardlen * l - l * r * (l + 1) // 2\n    print(ans)", "import math\n\ndef solve(l, n):\n    ans = 0\n    k = 12 * n\n    for i in range(l, k, l):\n        ans += 12 * n - i\n    return ans\nt = int(input())\nfor r in range(1, t + 1):\n    s = input()\n    l = 0\n    for c in s:\n        if c == 'T':\n            l += 2\n        elif c == 'S':\n            l += 1\n    n = int(input())\n    result = solve(l, n)\n    print(str(result))", "mod = 1000000007\nread_int = lambda : int(input().strip())\nread_str = lambda : input().strip()\nread_str_arr = lambda : input().strip().split()\nread_int_arr = lambda : [int(x) for x in input().strip().split()]\n\ndef solve():\n    s = read_str()\n    n = read_int()\n    (nt, ns) = (0, 0)\n    for e in s:\n        if e == 'T':\n            nt += 1\n        else:\n            ns += 1\n    ans = 0\n    for i in range(12 * n):\n        p = (12 * n - i - 1) // (2 * nt + ns)\n        if p == 0:\n            break\n        ans += p\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "for i in range(int(input())):\n    s = input()\n    n = int(input())\n    x = 0\n    for j in range(len(s)):\n        if s[j] == 'T':\n            x = x + 2\n        elif s[j] == 'S':\n            x = x + 1\n    ans = 0\n    keys = n * 12\n    d = x\n    while x <= keys:\n        ans += keys - x\n        x += d\n    print(ans)", "for i in range(int(input())):\n    s = input()\n    n = int(input())\n    x = 0\n    for j in range(len(s)):\n        if s[j] == 'T':\n            x = x + 2\n        elif s[j] == 'S':\n            x = x + 1\n    ans = 0\n    keys = n * 12\n    d = x\n    while x <= keys:\n        ans += keys - x\n        x += d\n    print(ans)", "for i in range(int(input())):\n    s = input()\n    n = int(input())\n    x = 0\n    for j in range(len(s)):\n        if s[j] == 'T':\n            x = x + 2\n        elif s[j] == 'S':\n            x = x + 1\n    ans = 0\n    keys = n * 12\n    d = x\n    while x <= keys:\n        ans += keys - x\n        x += d\n    print(ans)", "t = int(input())\nfor test in range(t):\n    num = input()\n    n = int(input())\n    x = 0\n    for i in num:\n        if i == 'T':\n            x += 2\n        else:\n            x += 1\n    ans = 0\n    keys = n * 12\n    d = x\n    while x <= keys:\n        ans += keys - x\n        x += d\n    print(ans)", "t = int(input())\nout = []\nfor i in range(t):\n    s = input()\n    n = int(input())\n    S = 0\n    for j in s:\n        if j == 'T':\n            S += 2\n        else:\n            S += 1\n    N = 12 * n\n    Out = 0\n    for j in range(N - S):\n        Out += (N - 1 - j) // S\n    out.append(Out)\nfor i in out:\n    print(i)", "t = int(input())\nfor test in range(t):\n    num = input()\n    n = int(input())\n    x = 0\n    for i in num:\n        if i == 'T':\n            x += 2\n        else:\n            x += 1\n    ans = 0\n    keys = n * 12\n    d = x\n    while x <= keys:\n        ans += keys - x\n        x += d\n    print(ans)", "T = int(input())\nfor t in range(T):\n    s = input()\n    n = int(input())\n    x = sum(({'S': 1, 'T': 2}[i] for i in s))\n    k = 12 * n // x\n    m = 12 * n * k - k * (k + 1) * x // 2\n    print(m)", "T = int(input())\nfor t in range(T):\n    s = input()\n    n = int(input())\n    x = sum(({'S': 1, 'T': 2}[i] for i in s))\n    k = 12 * n // x\n    m = 12 * n * k - k * (k + 1) * x // 2\n    print(m)", "t = int(input())\nfor t0 in range(t):\n    s = input()\n    n = int(input())\n    n1 = 0\n    for i in s:\n        if i == 'T':\n            n1 += 2\n        else:\n            n1 += 1\n    d = n * 12\n    x = 0\n    i = 1\n    while i * n1 < d:\n        x += d - i * n1\n        i += 1\n    print(x)", "def substring(total, part):\n    return max(total - part + 1, 0)\n\ndef count_part(string):\n    count = 0\n    for x in string:\n        if x == 'S':\n            count += 1\n        else:\n            count += 2\n    return count + 1\n\ndef total_ans(start, total):\n    count = 0\n    value = start\n    while True:\n        if substring(total, value) > 0:\n            count += substring(total, value)\n            value += start - 1\n        else:\n            break\n    print(count)\nfor _ in range(int(input())):\n    string = str(input())\n    total = int(input())\n    total = 12 * total\n    start = count_part(string)\n    total_ans(start, total)", "def substring(total, part):\n    return max(total - part + 1, 0)\n\ndef count_part(string):\n    count = 0\n    for x in string:\n        if x == 'S':\n            count += 1\n        else:\n            count += 2\n    return count + 1\n\ndef total_ans(start, total):\n    count = 0\n    value = start\n    while True:\n        if substring(total, value) > 0:\n            count += substring(total, value)\n            value += start - 1\n        else:\n            break\n    print(count)\nfor _ in range(int(input())):\n    string = str(input())\n    total = int(input())\n    total = 12 * total\n    start = count_part(string)\n    total_ans(start, total)", "def substring(total, part):\n    return max(total - part + 1, 0)\n\ndef count_part(string):\n    count = 0\n    for x in string:\n        if x == 'S':\n            count += 1\n        else:\n            count += 2\n    return count + 1\n\ndef total_ans(start, total):\n    count = 0\n    value = start\n    while True:\n        if substring(total, value) > 0:\n            count += substring(total, value)\n            value += start - 1\n        else:\n            break\n    print(count)\nfor _ in range(int(input())):\n    string = str(input())\n    total = int(input())\n    total = 12 * total\n    start = count_part(string)\n    total_ans(start, total)", "def substring(total, part):\n    return max(total - part + 1, 0)\n\ndef count_part(string):\n    count = 0\n    for x in string:\n        if x == 'S':\n            count += 1\n        else:\n            count += 2\n    return count + 1\n\ndef total_ans(start, total):\n    count = 0\n    value = start\n    while True:\n        if substring(total, value) > 0:\n            count += substring(total, value)\n            value += start - 1\n        else:\n            break\n    print(count)\nfor _ in range(int(input())):\n    string = str(input())\n    total = int(input())\n    total = 12 * total\n    start = count_part(string)\n    total_ans(start, total)", "def substring(total, part):\n    return max(total - part + 1, 0)\n\ndef count_part(string):\n    count = 0\n    for x in string:\n        if x == 'S':\n            count += 1\n        else:\n            count += 2\n    return count + 1\n\ndef total_ans(start, total):\n    count = 0\n    value = start\n    while True:\n        if substring(total, value) > 0:\n            count += substring(total, value)\n            value += start - 1\n        else:\n            break\n    print(count)\nfor _ in range(int(input())):\n    string = str(input())\n    total = int(input())\n    total = 12 * total\n    start = count_part(string)\n    total_ans(start, total)", "def substring(total, part):\n    return max(total - part + 1, 0)\n\ndef count_part(string):\n    count = 0\n    for x in string:\n        if x == 'S':\n            count += 1\n        else:\n            count += 2\n    return count + 1\n\ndef total_ans(start, total):\n    count = 0\n    value = start\n    while True:\n        if substring(total, value) > 0:\n            count += substring(total, value)\n            value += start - 1\n        else:\n            break\n    print(count)\nfor _ in range(int(input())):\n    string = str(input())\n    total = int(input())\n    total = 12 * total\n    start = count_part(string)\n    total_ans(start, total)", "def substring(total, part):\n    return max(total - part + 1, 0)\n\ndef count_part(string):\n    count = 0\n    for x in string:\n        if x == 'S':\n            count += 1\n        else:\n            count += 2\n    return count + 1\n\ndef total_ans(start, total):\n    count = 0\n    value = start\n    while True:\n        if substring(total, value) > 0:\n            count += substring(total, value)\n            value += start - 1\n        else:\n            break\n    print(count)\nfor _ in range(int(input())):\n    string = str(input())\n    total = int(input())\n    total = 12 * total\n    start = count_part(string)\n    total_ans(start, total)", "def substring(total, part):\n    return max(total - part + 1, 0)\n\ndef count_part(string):\n    count = 0\n    for x in string:\n        if x == 'S':\n            count += 1\n        else:\n            count += 2\n    return count + 1\n\ndef total_ans(start, total):\n    count = 0\n    value = start\n    while True:\n        if substring(total, value) > 0:\n            count += substring(total, value)\n            value += start - 1\n        else:\n            break\n    print(count)\nfor _ in range(int(input())):\n    string = str(input())\n    total = int(input())\n    total = 12 * total\n    start = count_part(string)\n    total_ans(start, total)", "def substring(total, part):\n    return max(total - part + 1, 0)\n\ndef count_part(string):\n    count = 0\n    for x in string:\n        if x == 'S':\n            count += 1\n        else:\n            count += 2\n    return count + 1\n\ndef total_ans(start, total):\n    count = 0\n    value = start\n    while True:\n        if substring(total, value) > 0:\n            count += substring(total, value)\n            value += start - 1\n        else:\n            break\n    print(count)\nfor _ in range(int(input())):\n    string = str(input())\n    total = int(input())\n    total = 12 * total\n    start = count_part(string)\n    total_ans(start, total)", "def substring(total, part):\n    return max(total - part + 1, 0)\n\ndef count_part(string):\n    count = 0\n    for x in string:\n        if x == 'S':\n            count += 1\n        else:\n            count += 2\n    return count + 1\n\ndef total_ans(start, total):\n    count = 0\n    value = start\n    while True:\n        if substring(total, value) > 0:\n            count += substring(total, value)\n            value += start - 1\n        else:\n            break\n    print(count)\nfor _ in range(int(input())):\n    string = str(input())\n    total = int(input())\n    total = 12 * total\n    start = count_part(string)\n    total_ans(start, total)", "def substring(total, part):\n    return max(total - part + 1, 0)\n\ndef count_part(string):\n    count = 0\n    for x in string:\n        if x == 'S':\n            count += 1\n        else:\n            count += 2\n    return count + 1\n\ndef total_ans(start, total):\n    count = 0\n    value = start\n    while True:\n        if substring(total, value) > 0:\n            count += substring(total, value)\n            value += start - 1\n        else:\n            break\n    print(count)\nfor _ in range(int(input())):\n    string = str(input())\n    total = int(input())\n    total = 12 * total\n    start = count_part(string)\n    total_ans(start, total)", "def substring(total, part):\n    return max(total - part + 1, 0)\n\ndef count_part(string):\n    count = 0\n    for x in string:\n        if x == 'S':\n            count += 1\n        else:\n            count += 2\n    return count + 1\n\ndef total_ans(start, total):\n    count = 0\n    value = start\n    while True:\n        if substring(total, value) > 0:\n            count += substring(total, value)\n            value += start - 1\n        else:\n            break\n    print(count)\nfor _ in range(int(input())):\n    string = str(input())\n    total = int(input())\n    total = 12 * total\n    start = count_part(string)\n    total_ans(start, total)", "def substring(total, part):\n    return max(total - part + 1, 0)\n\ndef count_part(string):\n    count = 0\n    for x in string:\n        if x == 'S':\n            count += 1\n        else:\n            count += 2\n    return count + 1\n\ndef total_ans(start, total):\n    count = 0\n    value = start\n    while True:\n        if substring(total, value) > 0:\n            count += substring(total, value)\n            value += start - 1\n        else:\n            break\n    print(count)\nfor _ in range(int(input())):\n    string = str(input())\n    total = int(input())\n    total = 12 * total\n    start = count_part(string)\n    total_ans(start, total)", "def substring(total, part):\n    return max(total - part + 1, 0)\n\ndef count_part(string):\n    count = 0\n    for x in string:\n        if x == 'S':\n            count += 1\n        else:\n            count += 2\n    return count + 1\n\ndef total_ans(start, total):\n    count = 0\n    value = start\n    while True:\n        if substring(total, value) > 0:\n            count += substring(total, value)\n            value += start - 1\n        else:\n            break\n    print(count)\nfor _ in range(int(input())):\n    string = str(input())\n    total = int(input())\n    total = 12 * total\n    start = count_part(string)\n    total_ans(start, total)", "def substring(total, part):\n    return max(total - part + 1, 0)\n\ndef count_part(string):\n    count = 0\n    for x in string:\n        if x == 'S':\n            count += 1\n        else:\n            count += 2\n    return count + 1\n\ndef total_ans(start, total):\n    count = 0\n    value = start\n    while True:\n        if substring(total, value) > 0:\n            count += substring(total, value)\n            value += start - 1\n        else:\n            break\n    print(count)\nfor _ in range(int(input())):\n    string = str(input())\n    total = int(input())\n    total = 12 * total\n    start = count_part(string)\n    total_ans(start, total)", "def substring(total, part):\n    return max(total - part + 1, 0)\n\ndef count_part(string):\n    count = 0\n    for x in string:\n        if x == 'S':\n            count += 1\n        else:\n            count += 2\n    return count + 1\n\ndef total_ans(start, total):\n    count = 0\n    value = start\n    while True:\n        if substring(total, value) > 0:\n            count += substring(total, value)\n            value += start - 1\n        else:\n            break\n    print(count)\nfor _ in range(int(input())):\n    string = str(input())\n    total = int(input())\n    total = 12 * total\n    start = count_part(string)\n    total_ans(start, total)", "for _ in range(int(input())):\n    strng = str(input())\n    n = int(input())\n    ln = 12 * n\n    t_count = strng.count('T')\n    s_count = strng.count('S')\n    dd = 2 * t_count + s_count\n    ans = 0\n    for i in range(dd, ln, dd):\n        ans += ln - i\n    print(ans)", "from collections import Counter\n\ndef solve():\n    dct = Counter(s)\n    total_steps = 2 * dct.get('T', 0) + dct.get('S', 0)\n    d = total_steps\n    count = 0\n    for i in range(d, 12 * n, total_steps):\n        count += 12 * n - i\n    print(count)\nt = int(input())\nfor _ in range(t):\n    s = input()\n    count = 0\n    n = int(input())\n    solve()", "num = int(input())\nwhile num:\n    p = list(input())\n    n = int(input())\n    n = n * 12\n    t = 0\n    s = 0\n    for i in p:\n        if i == 'T':\n            t += 1\n        else:\n            s += 1\n    n2 = 2 * t + s\n    if n2 + 1 > n:\n        print(0)\n    elif n2 + 1 == n:\n        print(1)\n    else:\n        n = n - 1\n        c = n // n2\n        count = 0\n        while c != 0:\n            count += n - c * n2 + 1\n            c -= 1\n        print(count)\n    num -= 1", "T = int(input())\nfor _ in range(T):\n    L = list(input())\n    n = int(input())\n    n *= 12\n    x = 0\n    for i in range(len(L)):\n        if L[i] == 'T':\n            x += 2\n        else:\n            x += 1\n    ans = 0\n    y = x\n    while x + 1 <= n:\n        a = n - x\n        ans += a\n        x += y\n    print(ans)", "steps = {'T': 2, 'S': 1}\noctave = 12\n\ndef length(phrase):\n    return sum([steps[s] for s in phrase])\n\ndef results(keys, l):\n    return keys - l\nfor t in range(int(input())):\n    s = str(input())\n    n = int(input())\n    ans = 0\n    repeat = 1\n    number_of_keys = octave * n\n    r = results(number_of_keys, length(s * repeat))\n    while r >= 0:\n        ans += r\n        repeat += 1\n        r = results(number_of_keys, length(s * repeat))\n    print(ans)", "steps = {'T': 2, 'S': 1}\noctave = 12\n\ndef length(phrase):\n    return sum([steps[s] for s in phrase])\n\ndef results(keys, l):\n    return keys - l\nfor t in range(int(input())):\n    s = str(input())\n    n = int(input())\n    ans = 0\n    repeat = 1\n    number_of_keys = octave * n\n    r = results(number_of_keys, length(s * repeat))\n    while r >= 0:\n        ans += r\n        repeat += 1\n        r = results(number_of_keys, length(s * repeat))\n    print(ans)", "steps = {'T': 2, 'S': 1}\noctave = 12\n\ndef length(phrase):\n    return sum([steps[s] for s in phrase])\n\ndef results(keys, l):\n    return keys - l\nfor t in range(int(input())):\n    s = str(input())\n    n = int(input())\n    ans = 0\n    repeat = 1\n    number_of_keys = octave * n\n    r = results(number_of_keys, length(s * repeat))\n    while r >= 0:\n        ans += r\n        repeat += 1\n        r = results(number_of_keys, length(s * repeat))\n    print(ans)", "steps = {'T': 2, 'S': 1}\noctave = 12\n\ndef length(phrase):\n    return sum([steps[s] for s in phrase])\n\ndef results(keys, l):\n    return keys - l\nfor t in range(int(input())):\n    s = str(input())\n    n = int(input())\n    ans = 0\n    repeat = 1\n    number_of_keys = octave * n\n    r = results(number_of_keys, length(s * repeat))\n    while r >= 0:\n        ans += r\n        repeat += 1\n        r = results(number_of_keys, length(s * repeat))\n    print(ans)", "steps = {'T': 2, 'S': 1}\noctave = 12\n\ndef length(phrase):\n    return sum([steps[s] for s in phrase])\n\ndef results(keys, l):\n    return keys - l\nfor t in range(int(input())):\n    s = str(input())\n    n = int(input())\n    ans = 0\n    repeat = 1\n    number_of_keys = octave * n\n    r = results(number_of_keys, length(s * repeat))\n    while r >= 0:\n        ans += r\n        repeat += 1\n        r = results(number_of_keys, length(s * repeat))\n    print(ans)", "steps = {'T': 2, 'S': 1}\noctave = 12\n\ndef length(phrase):\n    return sum([steps[s] for s in phrase])\n\ndef results(keys, l):\n    return keys - l\nfor t in range(int(input())):\n    s = str(input())\n    n = int(input())\n    ans = 0\n    repeat = 1\n    number_of_keys = octave * n\n    r = results(number_of_keys, length(s * repeat))\n    while r >= 0:\n        ans += r\n        repeat += 1\n        r = results(number_of_keys, length(s * repeat))\n    print(ans)", "steps = {'T': 2, 'S': 1}\noctave = 12\n\ndef length(phrase):\n    return sum([steps[s] for s in phrase])\n\ndef results(keys, l):\n    return keys - l\nfor t in range(int(input())):\n    s = str(input())\n    n = int(input())\n    ans = 0\n    repeat = 1\n    number_of_keys = octave * n\n    r = results(number_of_keys, length(s * repeat))\n    while r >= 0:\n        ans += r\n        repeat += 1\n        r = results(number_of_keys, length(s * repeat))\n    print(ans)", "steps = {'T': 2, 'S': 1}\noctave = 12\n\ndef length(phrase):\n    return sum([steps[s] for s in phrase])\n\ndef results(keys, l):\n    return keys - l\nfor t in range(int(input())):\n    s = str(input())\n    n = int(input())\n    ans = 0\n    repeat = 1\n    number_of_keys = octave * n\n    r = results(number_of_keys, length(s * repeat))\n    while r >= 0:\n        ans += r\n        repeat += 1\n        r = results(number_of_keys, length(s * repeat))\n    print(ans)", "for t in range(int(input())):\n    s = input()\n    n = int(input())\n    l = len(s)\n    c = 0\n    for i in range(l):\n        if s[i] == 'T':\n            c += 2\n        else:\n            c += 1\n    p = 0\n    r = 12 * n\n    while r - c > 0:\n        r -= c\n        p += r\n    print(p)", "t = int(input())\nwhile t:\n    s = input()\n    n = int(input())\n    mSum = 0\n    for i in range(len(s)):\n        if s[i] == 'T':\n            mSum += 2\n        else:\n            mSum += 1\n    count = 0\n    for i in range(1, 12 * n + 1):\n        if mSum + i > 12 * n:\n            break\n        count += (12 * n - i) // mSum\n    print(count)\n    t -= 1", "t = int(input())\nwhile t:\n    s = input()\n    n = int(input())\n    mSum = 0\n    for i in range(len(s)):\n        if s[i] == 'T':\n            mSum += 2\n        else:\n            mSum += 1\n    count = 0\n    for i in range(1, 12 * n + 1):\n        if mSum + i > 12 * n:\n            break\n        count += (12 * n - i) // mSum\n    print(count)\n    t -= 1", "t = int(input())\nwhile t:\n    s = input()\n    n = int(input())\n    mSum = 0\n    for i in range(len(s)):\n        if s[i] == 'T':\n            mSum += 2\n        else:\n            mSum += 1\n    count = 0\n    for i in range(1, 12 * n + 1):\n        if mSum + i > 12 * n:\n            break\n        count += (12 * n - i) // mSum\n    print(count)\n    t -= 1", "def solution():\n    s = input()\n    n = int(input())\n    length = 0\n    for (i, c) in enumerate(s):\n        if c == 'T':\n            length += 2\n        else:\n            length += 1\n    count = 0\n    for i in range(length, 12 * n, length):\n        count += 12 * n - i\n    print(count)\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def solution():\n    s = input()\n    n = int(input())\n    length = 0\n    for (i, c) in enumerate(s):\n        if c == 'T':\n            length += 2\n        else:\n            length += 1\n    count = 0\n    for i in range(length, 12 * n, length):\n        count += 12 * n - i\n    print(count)\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "n = int(input())\nfor i in range(n):\n    s = input().strip()\n    n = int(input())\n    count = 0\n    for k in s:\n        if k == 'T':\n            count += 2\n        elif k == 'S':\n            count += 1\n    d = count\n    ans = 0\n    while d < 12 * n:\n        ans += 12 * n - d\n        d = d + count\n    print(ans)", "t = int(input())\nfor i in range(t):\n    s = input()\n    n = int(input())\n    l = len(s)\n    c = 0\n    for j in range(l):\n        if s[j] == 'T':\n            c += 2\n        else:\n            c += 1\n    p = 0\n    r = 12 * n\n    while r - c > 0:\n        r -= c\n        p += r\n    print(p)", "for t in range(int(input())):\n    s = input()\n    n = int(input())\n    l = len(s)\n    c = 0\n    for i in range(l):\n        if s[i] == 'T':\n            c += 2\n        else:\n            c += 1\n    p = 0\n    r = 12 * n\n    while r - c > 0:\n        r -= c\n        p += r\n    print(p)", "for t in range(int(input())):\n    s = input()\n    n = int(input())\n    l = len(s)\n    c = 0\n    for i in range(l):\n        if s[i] == 'T':\n            c += 2\n        else:\n            c += 1\n    p = 0\n    r = 12 * n\n    while r - c > 0:\n        r -= c\n        p += r\n    print(p)", "for t in range(int(input())):\n    s = input()\n    n = int(input())\n    l = len(s)\n    c = 0\n    for i in range(l):\n        if s[i] == 'T':\n            c += 2\n        else:\n            c += 1\n    p = 0\n    r = 12 * n\n    while r - c > 0:\n        r -= c\n        p += r\n    print(p)", "t = int(input())\nfor i in range(t):\n    C = [ord(x) - ord('R') for x in list(input())]\n    N = int(input())\n    L = sum(C)\n    r = 1\n    c = 0\n    while r * L < N * 12:\n        c += N * 12 - r * L\n        r += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    s = input().rstrip()\n    n = int(input())\n    count = 0\n    for k in s:\n        if k == 'T':\n            count += 2\n        elif k == 'S':\n            count += 1\n    d = count\n    ans = 0\n    while d < 12 * n:\n        ans += 12 * n - d\n        d = d + count\n    print(ans)", "T = int(input())\nfor i in range(T):\n    C = [ord(x) - ord('R') for x in list(input())]\n    N = int(input())\n    L = sum(C)\n    repeat = 1\n    count = 0\n    while repeat * L < N * 12:\n        count += N * 12 - repeat * L\n        repeat += 1\n    print(count)", "def main():\n    T = int(input())\n    output = list()\n    oct = '1 1.5 2 2.5 3 3.5 4 4.5 5 5.5 6 6.5'\n    octa = oct.split()\n    octave = list()\n    for o in octa:\n        octave.append(float(o))\n    for testcase in range(0, T):\n        set = input()\n        buildset = ''\n        N = int(input())\n        counter = 0\n        singlePatternsize = 0.0\n        for character in set:\n            if character == 'T':\n                singlePatternsize = singlePatternsize + 1.0\n            else:\n                singlePatternsize = singlePatternsize + 0.5\n        flag = 1\n        K = 0.0\n        while flag != counter:\n            flag = counter\n            K = K + singlePatternsize\n            for repeats in range(0, N):\n                for key in octave:\n                    FinalKey = key + 6.0 * repeats + K\n                    Comparator = 6.5 + (N - 1) * 6.0\n                    if FinalKey <= 6.5 + (N - 1) * 6.0:\n                        counter += 1\n        output.append(counter)\n    for x in output:\n        print(x)\nmain()"]