["import sys\nt = int(input())\n\ndef find(leaders, r):\n    if leaders[r] not in leaders:\n        return leaders[r]\n    else:\n        stack = [r]\n        temp = r\n        while leaders[temp] in leaders:\n            temp = leaders[temp]\n            stack.append(temp)\n        stack.append(leaders[temp])\n        leader = stack.pop()\n        while len(stack) > 0:\n            x = stack.pop()\n            leaders[x] = leader\n        return leaders[r]\nfor _ in range(t):\n    (n, q) = list(map(lambda x: int(x), input().split()))\n    s = 0\n    leaders = {}\n    for _ in range(0, q):\n        query = list(map(lambda x: int(x), input().split()))\n        if query[0] == 1:\n            y = query[1]\n            x = y + s\n            leaders[x] = x - 1\n        if query[0] == 2:\n            p = query[1]\n            q = query[2]\n            l = p + s\n            r = q + s\n            if r == 0:\n                print(0)\n                continue\n            if r not in leaders:\n                s = (s + r % n) % n\n                print(r)\n            else:\n                answer = find(leaders, r)\n                if answer < l:\n                    answer = 0\n                s = (s + answer % n) % n\n                print(answer)", "import sys\nt = int(input())\n\ndef find(leaders, r):\n    if leaders[r] not in leaders:\n        return leaders[r]\n    else:\n        stack = [r]\n        temp = r\n        while leaders[temp] in leaders:\n            temp = leaders[temp]\n            stack.append(temp)\n        stack.append(leaders[temp])\n        leader = stack.pop()\n        while len(stack) > 0:\n            x = stack.pop()\n            leaders[x] = leader\n        return leaders[r]\nfor _ in range(t):\n    (n, q) = list(map(lambda x: int(x), input().split()))\n    s = 0\n    leaders = {}\n    for _ in range(0, q):\n        query = list(map(lambda x: int(x), input().split()))\n        if query[0] == 1:\n            y = query[1]\n            x = y + s\n            leaders[x] = x - 1\n        if query[0] == 2:\n            p = query[1]\n            q = query[2]\n            l = p + s\n            r = q + s\n            if r == 0:\n                print(0)\n                continue\n            if r not in leaders:\n                s = (s + r % n) % n\n                print(r)\n            else:\n                answer = find(leaders, r)\n                if answer < l:\n                    answer = 0\n                s = (s + answer % n) % n\n                print(answer)", "def find(u):\n    try:\n        kk = dsu[u]\n    except:\n        dsu[u] = u\n    while dsu[u] != u:\n        try:\n            u = dsu[u]\n            dsu[u] = dsu[dsu[u]]\n        except:\n            dsu[u] = u\n    return dsu[u]\n\ndef union(u, v):\n    fu = find(u)\n    fv = find(v)\n    if fu > fv:\n        dsu[fu] = dsu[fv]\n    else:\n        dsu[fv] = dsu[fu]\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    rank = dict()\n    dsu = dict()\n    s = 0\n    ans = 0\n    for i in range(q):\n        quer = [int(o) for o in input().split()]\n        ans = s % n\n        if quer[0] == 1:\n            x = quer[1] + ans\n            union(x, x - 1)\n        else:\n            l = quer[1] + ans\n            r = quer[2] + ans\n            lll = find(r)\n            if lll < l:\n                print(0)\n            else:\n                s += lll\n                print(lll)", "for _ in range(int(input())):\n    d = dict()\n    s = 0\n    query = []\n    (n, q) = map(int, input().split())\n    for to in range(q):\n        query = list(map(int, input().split()))\n        if query[0] == 1:\n            d[s + query[1]] = s + query[1] - 1\n        else:\n            l = s + query[1]\n            r = s + query[2]\n            while r in d.keys():\n                if d[r] in d.keys():\n                    d[r] = d[d[r]]\n                r = d[r]\n            if r < l:\n                print('0')\n            else:\n                print(r)\n                s += r\n                s %= n", "for _ in range(int(input())):\n    d = dict()\n    s = 0\n    query = []\n    (n, q) = map(int, input().split())\n    for to in range(q):\n        query = list(map(int, input().split()))\n        if query[0] == 1:\n            d[s + query[1]] = s + query[1] - 1\n        else:\n            l = s + query[1]\n            r = s + query[2]\n            while r in d.keys():\n                if d[r] in d.keys():\n                    d[r] = d[d[r]]\n                r = d[r]\n            if r < l:\n                print('0')\n            else:\n                print(r)\n                s += r\n                s %= n", "for _ in range(int(input())):\n    d = dict()\n    s = 0\n    query = []\n    (n, q) = map(int, input().split())\n    for to in range(q):\n        query = list(map(int, input().split()))\n        if query[0] == 1:\n            d[s + query[1]] = s + query[1] - 1\n        else:\n            l = s + query[1]\n            r = s + query[2]\n            while r in d.keys():\n                if d[r] in d.keys():\n                    d[r] = d[d[r]]\n                r = d[r]\n            if r < l:\n                print('0')\n            else:\n                print(r)\n                s += r\n                s %= n", "for _ in range(int(input())):\n    d = dict()\n    s = 0\n    query = []\n    (n, q) = map(int, input().split())\n    for to in range(q):\n        query = list(map(int, input().split()))\n        if query[0] == 1:\n            d[s + query[1]] = s + query[1] - 1\n        else:\n            l = s + query[1]\n            r = s + query[2]\n            while r in d:\n                if d[r] in d:\n                    d[r] = d[d[r]]\n                r = d[r]\n            if r < l:\n                print('0')\n            else:\n                print(r)\n                s += r\n                s %= n", "test = int(input())\nwhile test > 0:\n    (n, q) = map(int, input().split())\n    N = {}\n    s = 0\n    while q > 0:\n        li = list(map(int, input().split()))\n        if li[0] == 1:\n            x = li[1] + s\n            N[x] = x - 1\n        else:\n            l = li[1] + s\n            r = li[2] + s\n            var = r\n            while var >= l:\n                try:\n                    var = N[var]\n                except:\n                    break\n            if var != r:\n                N[r] = var\n            if var < l:\n                var = 0\n            s = (s + var) % n\n            print(var)\n        q -= 1\n    test -= 1", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = 0\n    d = {}\n    f = []\n    for _ in range(q):\n        z = list(map(int, input().split()))\n        if z[0] == 1:\n            k = s + z[1]\n            d[k] = k - 1\n        else:\n            (l, r) = (z[1] + s, z[2] + s)\n            while r in d:\n                if d[r] in d:\n                    d[r] = d[d[r]]\n                r = d[r]\n            if r >= l:\n                s += r\n                s %= n\n                print(r)\n            else:\n                print(0)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = 0\n    d = dict()\n    for _ in range(q):\n        a = list(map(int, input().split()))\n        if a[0] == 1:\n            x = a[1] + s\n            d[x] = x - 1\n        else:\n            l = a[1] + s\n            r = a[2] + s\n            while r in d:\n                if d[r] in d:\n                    d[r] = d[d[r]]\n                r = d[r]\n            if l > r:\n                print(0)\n            else:\n                s += r\n                s %= n\n                print(r)", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    s = 0\n    par = {}\n    for __ in range(q):\n        a = input()\n        if a[0] == '1':\n            x = int(a[2:]) + s\n            par[x] = x - 1\n        elif a[0] == '2':\n            (l, r) = map(int, a[2:].split())\n            l += s\n            r += s\n            aa = r\n            st = True\n            while True:\n                if aa < l:\n                    st = False\n                    break\n                try:\n                    aa = par[aa]\n                except:\n                    break\n            if aa != r:\n                par[r] = aa\n            if not st:\n                print(0)\n                aa = 0\n            else:\n                print(aa)\n            s = (s + aa) % n", "t = int(input())\nwhile t:\n    t -= 1\n    (n, q) = map(int, input().split())\n    d = {}\n    s = 0\n    total = 0\n    for i in range(q):\n        arr = list(map(int, input().split()))\n        if arr[0] == 1:\n            d[s + arr[1]] = s + arr[1] - 1\n        else:\n            r = arr[2] + s\n            l = arr[1] + s\n            while r in d:\n                if d[r] in d:\n                    d[r] = d[d[r]]\n                r = d[r]\n            if r >= l:\n                total += r\n                print(r)\n                s = total % n\n            else:\n                print(0)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = 0\n    l = {}\n    for i in range(q):\n        arr = list(map(int, input().split()))\n        if arr[0] == 1:\n            l[s + arr[1]] = s + arr[1] - 1\n        else:\n            r = s + arr[2]\n            while r in l:\n                if l[r] in l:\n                    l[r] = l[l[r]]\n                r = l[r]\n            if r < arr[1] + s:\n                print(0)\n            else:\n                print(r)\n                s = (s + r) % n", "t = int(input())\nfor i in range(t):\n    one = {}\n    s = 0\n    (n, Q) = map(int, input().split())\n    for j in range(Q):\n        query = list(map(int, input().split()))\n        if query[0] == 1:\n            x = query[1] + s\n            if x not in one:\n                one[x] = x - 1\n        elif query[0] == 2:\n            maximum = 0\n            l = query[1] + s\n            r = query[2] + s\n            while r in one:\n                if one[r] in one:\n                    one[r] = one[one[r]]\n                r = one[r]\n            if r < l:\n                print(0)\n            else:\n                print(r)\n                s += r\n                s = s % n", "t = int(input())\nfor _ in range(t):\n    (N, Q) = [int(v) for v in input().strip().split()]\n    Aquery = {}\n    SumOfAns = 0\n    for i in range(Q):\n        s = [int(v) for v in input().strip().split()]\n        if s[0] == 1:\n            Aquery[SumOfAns + s[1]] = SumOfAns + s[1] - 1\n        else:\n            flag = 0\n            (l, r) = (SumOfAns + s[1], SumOfAns + s[2])\n            x = r\n            if x in Aquery:\n                y = Aquery[x]\n                while y in Aquery:\n                    y = Aquery[y]\n                if y >= l:\n                    ans = y\n                else:\n                    ans = 0\n                Aquery[x] = y\n            else:\n                ans = r\n            print(ans)\n            SumOfAns = (SumOfAns + ans) % N", "for tcs in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = 0\n    dct = {}\n    for i in range(q):\n        x = input().split()\n        if x[0] == '1':\n            x = int(x[1]) + s\n            if x not in dct:\n                dct[x] = x - 1\n        else:\n            (L, R) = (int(x[1]), int(x[2]))\n            l = L + s\n            r = R + s\n            while r in dct:\n                if dct[r] in dct:\n                    dct[r] = dct[dct[r]]\n                r = dct[r]\n            if r < l:\n                print(0)\n            else:\n                print(r)\n                s = (s + r) % n", "def dofast(x, d):\n    if x in d and d[x] != x:\n        d[x] = dofast(d[x], d)\n        return d[x]\n    d[x] = x\n    return x\nfor _ in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    d = {}\n    s = 0\n    for i in range(q):\n        st = input().split()\n        if st[0] == '1':\n            sh = s + int(st[1])\n            d[sh] = dofast(sh - 1, d)\n        else:\n            (l, r) = (s + int(st[1]), s + int(st[2]))\n            temp = 0\n            temp = dofast(r, d)\n            if temp < l:\n                temp = 0\n            print(temp)\n            s = (s + temp) % n", "t = int(input())\nwhile t:\n    t -= 1\n    (n, q) = map(int, input().split())\n    s = 0\n    dict1 = dict()\n    for i in range(q):\n        a = list(map(int, input().split()))\n        if len(a) == 2:\n            x = a[1] + s\n            if x not in dict1:\n                dict1[x] = x - 1\n        else:\n            (l, r) = (a[1] + s, a[2] + s)\n            if r in dict1:\n                temp = dict1[r]\n                while True:\n                    if temp in dict1:\n                        temp = dict1[temp]\n                    else:\n                        break\n                if temp >= l:\n                    print(temp)\n                    s += temp\n                else:\n                    print(0)\n                dict1[r] = temp\n            else:\n                print(r)\n                s += r\n        s = s % n", "T = int(input())\nmaximum = max\nfor _ in range(T):\n    (N, Q) = list(map(int, input().split()))\n    s = 0\n    dic = {}\n    for _ in range(Q):\n        li = list(map(int, input().split()))\n        if li[0] == 1:\n            x = s + li[1]\n            if x not in dic:\n                dic[x] = x - 1\n        elif li[0] == 2:\n            l = li[1] + s\n            r = li[2] + s\n            m = 0\n            if r not in dic:\n                m = r\n            else:\n                m = dic[r]\n                while True:\n                    if m in dic:\n                        m = dic[m]\n                    else:\n                        break\n                dic[r] = m\n            if m < 0 or m < l:\n                m = 0\n            print(m)\n            s = (s + m) % N", "for i in range(int(input())):\n    (n, q) = map(int, input().split())\n    l = {}\n    s = 0\n    for j in range(q):\n        query = list(map(int, input().split()))\n        if query[0] == 1:\n            y = query[1] + s\n            l[y] = y - 1\n        else:\n            p = query[1] + s\n            q = query[2] + s\n            k = q\n            while k >= p:\n                if k in l:\n                    k = l[k]\n                else:\n                    print(k)\n                    s = (s + k) % n\n                    break\n            if q in l:\n                l[q] = k\n            if k < p:\n                print(0)", "import bisect\n\ndef binarySearch(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return 1\n        elif arr[mid] > x:\n            return binarySearch(arr, l, mid - 1, x)\n        else:\n            return binarySearch(arr, mid + 1, r, x)\n    else:\n        return 0\nfor t in range(int(input())):\n    (n, q) = map(int, input().split())\n    ss = {}\n    s = 0\n    par = {}\n    de = []\n    for query in range(q):\n        a = list(map(int, input().split()))\n        if a[0] == 1:\n            y = a[1]\n            x = y + s\n            de.append(x)\n            ss[x] = 1\n            par[x] = x - 1\n        else:\n            p = a[1]\n            q = a[2]\n            l = p + s\n            r = q + s\n            aa = r\n            st = True\n            while True:\n                if aa < l:\n                    st = False\n                    break\n                try:\n                    x = ss[aa]\n                    aa = par[aa]\n                except:\n                    break\n            if aa != r:\n                par[r] = aa\n            if not st:\n                print(0)\n                aa = 0\n            else:\n                print(aa)\n            s = (s + aa) % n", "def dofast(x, d):\n    if x in d and d[x] != x:\n        d[x] = dofast(d[x], d)\n        return d[x]\n    return x\nfor _ in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    d = {}\n    s = 0\n    for i in range(q):\n        st = input().split()\n        if st[0] == '1':\n            sh = s + int(st[1])\n            d[sh] = dofast(sh - 1, d)\n        else:\n            (l, r) = (s + int(st[1]), s + int(st[2]))\n            temp = 0\n            temp = dofast(r, d)\n            if temp < l:\n                temp = 0\n            print(temp)\n            s = (s + temp) % n", "def dofast(x, d):\n    if x in d and d[x] != x:\n        d[x] = dofast(d[x], d)\n        return d[x]\n    d[x] = x\n    return x\nfor _ in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    d = {}\n    s = 0\n    for i in range(q):\n        st = input().split()\n        if st[0] == '1':\n            sh = s + int(st[1])\n            d[sh] = dofast(sh - 1, d)\n        else:\n            (l, r) = (s + int(st[1]), s + int(st[2]))\n            temp = 0\n            temp = dofast(r, d)\n            if temp < l:\n                temp = 0\n            print(temp)\n            s = (s + temp) % n", "from collections import defaultdict as dd\nt = int(input())\nwhile t:\n    d = dd(int)\n    pr = dd(int)\n    su = 0\n    (n, q) = map(int, input().split())\n    while q:\n        s = input()\n        if s[0] == '1':\n            x = int(s[2:]) + su\n            d[x] = 1\n            pr[x] = x - 1\n        else:\n            (p, qq) = map(int, s[2:].split())\n            l = p + su\n            r = qq + su\n            a = d[r]\n            x = r\n            lol = 0\n            while a > 0:\n                x = pr[x]\n                a = d[x]\n                if x < l:\n                    lol = 1\n                    break\n            if x != r:\n                pr[r] = x\n            if lol == 1:\n                print(0)\n                x = 0\n            else:\n                print(x)\n            su += x\n        su = su % n\n        q -= 1\n    t -= 1", "import bisect\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = 0\n    dic = dict()\n    for i in range(q):\n        ar = list(map(int, input().split()))\n        if len(ar) == 2:\n            x = s + ar[1]\n            if x not in dic:\n                dic[x] = x - 1\n        else:\n            (l, r) = (ar[1] + s, ar[2] + s)\n            if r in dic:\n                abc = dic[r]\n                while True:\n                    if abc in dic:\n                        abc = dic[abc]\n                    else:\n                        break\n                if abc >= l:\n                    print(abc)\n                    s += abc\n                else:\n                    print(0)\n                dic[r] = abc\n            else:\n                print(r)\n                s += r\n        s = s % n", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    ss = {}\n    s = 0\n    par = {}\n    de = []\n    for __ in range(q):\n        a = input()\n        if a[0] == '1':\n            x = int(a[2:]) + s\n            de.append(x)\n            ss[x] = 1\n            par[x] = x - 1\n        else:\n            (l, r) = map(int, a[2:].split())\n            l += s\n            r += s\n            aa = r\n            st = True\n            while True:\n                if aa < l:\n                    st = False\n                    break\n                try:\n                    x = ss[aa]\n                    aa = par[aa]\n                except:\n                    break\n            if aa != r:\n                par[r] = aa\n            if not st:\n                print(0)\n                aa = 0\n            else:\n                print(aa)\n            s = (s + aa) % n", "for _ in range(int(input())):\n    (N, Q) = map(int, input().split())\n    s = 0\n    zeros = {}\n    for _ in range(Q):\n        (q_type, *others) = map(int, input().split())\n        if q_type == 1:\n            [y] = others\n            x = y + s\n            target = x - 1\n            keys = {x}\n            while target in zeros:\n                keys.add(target)\n                target = zeros[target]\n            for key in keys:\n                zeros[key] = target\n        else:\n            (p, q) = others\n            l = p + s\n            r = q + s\n            i = r\n            if r in zeros:\n                target = r\n                keys = {r}\n                while target in zeros:\n                    keys.add(target)\n                    target = zeros[target]\n                for key in keys:\n                    zeros[key] = target\n                if target >= l:\n                    res = target\n                else:\n                    res = 0\n            else:\n                res = r\n            print(res)\n            s += res\n            s %= N"]