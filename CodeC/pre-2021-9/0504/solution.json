["from functools import reduce\n(n, q) = map(int, input().split())\nl = list(map(int, input().split()))\nl.append(reduce(lambda x, y: x ^ y, l))\nna = l[:]\nfor i in range(1, n + 1):\n    na[i] = na[i - 1] ^ l[i]\nfor _ in range(q):\n    k = int(input())\n    k %= n + 1\n    print(na[k - 1])", "from functools import reduce\n(n, q) = map(int, input().split())\nl = list(map(int, input().split()))\nl.append(reduce(lambda x, y: x ^ y, l))\nna = l[:]\nfor i in range(1, n + 1):\n    na[i] = na[i - 1] ^ l[i]\nfor _ in range(q):\n    k = int(input())\n    k %= n + 1\n    print(na[k - 1])", "(n, q) = map(int, input().split())\nf = list(map(int, input().split()))\nres = [0] * (n + 1)\nfor i in range(1, n + 1):\n    res[i] = res[i - 1] ^ f[i - 1]\nfor i in range(q):\n    k = int(input())\n    print(res[k % (n + 1)])", "(n, q) = map(int, input().split())\nf = list(map(int, input().split()))\nres = [0] * (n + 1)\nfor i in range(1, n + 1):\n    res[i] = res[i - 1] ^ f[i - 1]\nfor i in range(q):\n    k = int(input())\n    print(res[k % (n + 1)])", "(n, q) = map(int, input().split())\nf = list(map(int, input().split()))\nres = [0] * (n + 1)\nfor i in range(1, n + 1):\n    res[i] = res[i - 1] ^ f[i - 1]\nfor i in range(q):\n    k = int(input())\n    print(res[k % (n + 1)])", "(n, q) = map(int, input().split())\nf = list(map(int, input().split()))\nres = [0] * (n + 1)\nfor i in range(1, n + 1):\n    res[i] = res[i - 1] ^ f[i - 1]\nfor i in range(q):\n    k = int(input())\n    print(res[k % (n + 1)])", "(n, q) = map(int, input().split())\nf = list(map(int, input().split()))\nres = [0] * (n + 1)\nfor i in range(1, n + 1):\n    res[i] = res[i - 1] ^ f[i - 1]\nfor i in range(q):\n    k = int(input())\n    print(res[k % (n + 1)])", "(n, q) = map(int, input().split())\nf = list(map(int, input().split()))\nres = [0] * (n + 1)\nfor i in range(1, n + 1):\n    res[i] = res[i - 1] ^ f[i - 1]\nfor i in range(q):\n    k = int(input())\n    print(res[k % (n + 1)])", "(n, q) = map(int, input().split())\nf = list(map(int, input().split()))\nres = [0] * (n + 1)\nfor i in range(1, n + 1):\n    res[i] = res[i - 1] ^ f[i - 1]\nfor i in range(q):\n    k = int(input())\n    print(res[k % (n + 1)])", "(n, q) = map(int, input().split())\nf = list(map(int, input().split()))\nres = [0] * (n + 1)\nfor i in range(1, n + 1):\n    res[i] = res[i - 1] ^ f[i - 1]\nfor i in range(q):\n    k = int(input())\n    print(res[k % (n + 1)])", "(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\nprefix_arr = [0] * (n + 1)\nfor i in range(1, n + 1):\n    prefix_arr[i] = prefix_arr[i - 1] ^ arr[i - 1]\nfor i in range(q):\n    pos = int(input())\n    print(prefix_arr[pos % (n + 1)])", "(n, q) = map(int, input().split())\nf = list(map(int, input().split()))\nres = [0] * (n + 1)\nfor i in range(1, n + 1):\n    res[i] = res[i - 1] ^ f[i - 1]\nfor i in range(q):\n    k = int(input())\n    print(res[k % (n + 1)])", "(n, q) = map(int, input().split())\nf = list(map(int, input().split()))\nres = [0] * (n + 1)\nfor i in range(1, n + 1):\n    res[i] = res[i - 1] ^ f[i - 1]\nfor i in range(q):\n    k = int(input())\n    print(res[k % (n + 1)])", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nf = 0\nfor i in a:\n    f = f ^ i\na.append(f)\nd = []\nd.append(a[0])\nfor i in range(1, n + 1):\n    d.append(d[-1] ^ a[i])\nfor i in range(k):\n    p = int(input())\n    p = p % (n + 1)\n    print(d[p - 1])", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nf = 0\nfor i in a:\n    f = f ^ i\na.append(f)\nd = []\nd.append(a[0])\nfor i in range(1, n + 1):\n    d.append(d[-1] ^ a[i])\nfor i in range(k):\n    p = int(input())\n    p = p % (n + 1)\n    print(d[p - 1])", "(n, c) = list(map(int, input().split()))\ns = [0] * (n + 1)\nkp = list(map(int, input().split()))\nfor i in range(1, n + 1):\n    s[i] = s[i - 1] ^ kp[i - 1]\nfor _ in range(c):\n    k = int(input())\n    print(s[k % (n + 1)])", "(n, q) = map(int, input().split())\nlst = list(map(int, input().split()))\nans = [lst[0]]\nfor i in range(1, n):\n    ans.append(ans[i - 1] ^ lst[i])\nans.append(0)\nfor _ in range(q):\n    idx = int(input()) % (n + 1) - 1\n    print(ans[idx])", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(1, n):\n    a[i] ^= a[i - 1]\nfor _ in range(q):\n    x = int(input())\n    x %= n + 1\n    if x > 0:\n        print(a[x - 1])\n    else:\n        print(0)", "import math\nfrom bisect import bisect_left\nfrom code import interact\nfrom heapq import heapify, heappush, heappop\nfrom collections import deque\nfrom pydoc import plain\nfrom re import X\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\ninput = sys.stdin.readline\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\ndx = [-1, -2, 1, 2, 2, -2, -1, 1]\ndy = [2, 1, 2, 1, -1, -1, -2, -2]\nl = il()\n(n, q) = (l[0], l[1])\nl = il()\na = 0\ns = []\nfor i in l:\n    a = a ^ i\n    s.append(a)\nl.append(a)\ns.append(0)\ns_l = len(s)\nfor i in range(q):\n    k = ii()\n    k = k % s_l\n    print(s[k - 1])", "(n, q) = map(int, input().split())\nf = [*map(int, input().split())]\nw = 0\nfor i in f:\n    w ^= i\nf += [w]\nfor i in range(1, len(f)):\n    f[i] ^= f[i - 1]\nfor i in range(q):\n    k = int(input()) - 1\n    print(f[k % (n + 1)])", "(n, c) = list(map(int, input().split()))\ns = [0] * (n + 1)\nkp = list(map(int, input().split()))\nfor i in range(1, n + 1):\n    s[i] = s[i - 1] ^ kp[i - 1]\nfor _ in range(c):\n    k = int(input())\n    print(s[k % (n + 1)])", "(n, c) = list(map(int, input().split()))\ns = [0] * (n + 1)\nkp = list(map(int, input().split()))\nfor i in range(1, n + 1):\n    s[i] = s[i - 1] ^ kp[i - 1]\nfor _ in range(c):\n    k = int(input())\n    print(s[k % (n + 1)])", "(n, q) = map(int, input().split())\nf = [int(x) for x in input().split()]\nxortab = []\n(xor, xor1) = (0, 0)\nfor i in f:\n    xor ^= i\n    xortab.append(xor)\nxortab.append(0)\nfor i in range(q):\n    k = int(input())\n    rem = k % (n + 1)\n    print(xortab[rem - 1])", "(n, c) = list(map(int, input().split()))\ns = [0] * (n + 1)\nkp = list(map(int, input().split()))\nfor i in range(1, n + 1):\n    s[i] = s[i - 1] ^ kp[i - 1]\nfor _ in range(c):\n    k = int(input())\n    print(s[k % (n + 1)])", "(n, c) = list(map(int, input().split()))\ns = [0] * (n + 1)\nkp = list(map(int, input().split()))\nfor i in range(1, n + 1):\n    s[i] = s[i - 1] ^ kp[i - 1]\nfor _ in range(c):\n    k = int(input())\n    print(s[k % (n + 1)])", "(n, c) = list(map(int, input().split()))\ns = [0] * (n + 1)\nkp = list(map(int, input().split()))\nfor i in range(1, n + 1):\n    s[i] = s[i - 1] ^ kp[i - 1]\nfor _ in range(c):\n    k = int(input())\n    print(s[k % (n + 1)])", "(n, q) = list(map(int, input().split()))\ns = [0] * (n + 1)\nf_seq = list(map(int, input().split()))\nfor i in range(1, n + 1):\n    s[i] = s[i - 1] ^ f_seq[i - 1]\nfor _ in range(q):\n    k = int(input())\n    print(s[k % (n + 1)])", "l = list(map(int, input().split()))\nn = l[0]\nq = l[1]\nl = list(map(int, input().split()))\nnum = 0\nfor i in range(len(l)):\n    num = num ^ l[i]\nl.append(num)\ns = []\nnum = 0\nfor i in range(len(l)):\n    num = num ^ l[i]\n    s.append(num)\nfor i in range(q):\n    k = int(input())\n    k = k % (n + 1)\n    k = k - 1\n    if k < 0:\n        print(s[len(s) - 1])\n    else:\n        print(s[k])", "(n, k) = map(int, input().split())\narr = list(map(int, input().split()))\nsol_arr = [0]\nvar = 0\nfor i in range(n):\n    var ^= arr[i]\n    sol_arr.append(var)\nwhile k > 0:\n    x = int(input())\n    print(sol_arr[x % (n + 1)])\n    k -= 1", "(n, q) = map(int, input().split())\nnli = [0] + list(map(int, input().split()))\nd = [0]\nfor i in range(1, n + 1):\n    d.append(d[i - 1] ^ nli[i])\nfor j in range(q):\n    qi = int(input())\n    print(d[qi % (n + 1)])", "(n, q) = map(int, input().split())\nls = list(map(int, input().split()))\ncur = 0\ns = [0]\nfor i in ls:\n    cur = cur ^ i\n    s.append(cur)\nfor i in range(q):\n    k = int(input())\n    print(s[k % (n + 1)])", "(n, q) = map(int, input().split())\nls = [int(i) for i in input().split()]\ncur = 0\ns = [0]\nfor i in ls:\n    cur = cur ^ i\n    s.append(cur)\nfor i in range(q):\n    k = int(input())\n    print(s[k % (n + 1)])", "(n, k) = map(int, input().split())\nd = [0] + list(map(int, input().split()))\nl = [0]\nfor i in range(1, n + 1):\n    l.append(l[i - 1] ^ d[i])\nfor q in range(k):\n    x = int(input())\n    print(l[x % (n + 1)])", "(n, q) = input().split()\nn = int(n)\nq = int(q)\nf = [int(fi) for fi in input().split()]\ncur = 0\ns = [0]\nfor fi in f:\n    cur = cur ^ fi\n    s.append(cur)\nfor i in range(q):\n    k = int(input())\n    print(s[k % (n + 1)])", "(n, q) = map(int, input().split(' '))\n(ar, xor) = (list(map(int, input().split(' '))), 0)\nfor x in ar:\n    xor ^= x\nar.append(xor)\nprefix = [0] * (n + 1)\nprefix[0] = ar[0]\nfor i in range(1, len(prefix)):\n    prefix[i] = ar[i] ^ prefix[i - 1]\nfor i in range(q):\n    print(prefix[(int(input()) - 1) % (n + 1)])", "(n, q) = list(map(lambda x: int(x), input().split()))\na = list(map(lambda x: int(x), input().split()))\nxor_a = 0\nfor i in a:\n    xor_a = xor_a ^ i\na.append(xor_a)\nprefix = [a[0]]\nfor i in range(1, len(a)):\n    prefix.append(a[i] ^ prefix[i - 1])\nfor i in range(0, q):\n    x = int(input())\n    print(prefix[(x - 1) % (n + 1)])", "from math import *\nfrom collections import *\nfrom itertools import *\nfrom functools import *\nfrom bisect import *\nfrom heapq import *\nfrom operator import *\nfrom sys import *\nsetrecursionlimit(100000000)\n(n, k) = map(int, input().split())\nl = list(map(int, input().split()))\nl.append(reduce(xor, l))\nl = list(accumulate(l, xor))\nfor _ in range(k):\n    v = int(input())\n    print(l[(v - 1) % len(l)])", "from math import *\nfrom collections import *\nfrom itertools import *\nfrom functools import *\nfrom bisect import *\nfrom heapq import *\nfrom operator import *\nfrom sys import *\nsetrecursionlimit(100000000)\n(n, k) = map(int, input().split())\nl = list(map(int, input().split()))\nl.append(reduce(xor, l))\nl = list(accumulate(l, xor))\nfor _ in range(k):\n    v = int(input())\n    print(l[(v - 1) % len(l)])", "a = [int(s) for s in input().split()]\nb = [int(s) for s in input().split()]\nc = [0]\nd = 0\nfor e in range(a[0]):\n    d = d ^ b[e]\n    c.append(d)\nfor j in range(a[1]):\n    e = int(input())\n    if e <= a[0]:\n        print(c[e])\n    else:\n        print(c[(e - (a[0] + 1)) % (a[0] + 1)])", "(n, q) = map(int, input().split())\nl = list(map(int, input().split()))\nv = [0 for x in range(n)]\nv[0] = l[0]\nfor j in range(1, n):\n    v[j] = v[j - 1] ^ l[j]\nfor i in range(q):\n    k = int(input())\n    if k <= n:\n        print(v[k - 1])\n    else:\n        ans = (k - n) % (n + 1) - 1\n        if ans == 0:\n            print(0)\n        elif ans < 0:\n            print(v[n - 1])\n        else:\n            print(v[ans - 1])", "(n, q) = map(int, input().split())\nf = list(map(int, input().split()))\nl = [0, f[0]]\nfor i in range(1, n, 1):\n    l.append(l[-1] ^ f[i])\nl.append(0)\nfor _ in range(q):\n    a = int(input())\n    print(l[a % (n + 1)])", "l = input().split()\nn = int(l[0])\nq = int(l[1])\nl = input().split()\nli = [int(i) for i in l]\nxori = 0\nsi = [0 for i in range(n)]\nfor i in range(n):\n    si[i] = xori\n    xori = xori ^ li[i]\nsi.append(xori)\nfi = list(li)\nfi.append(xori)\nfor you in range(q):\n    q1 = int(input())\n    print(si[q1 % (n + 1)])", "(n, q) = list(map(int, input().split()))\na = list(map(int, input().split()))\ns = [0] * (n + 1)\nfor i in range(n):\n    if i == 0:\n        s[i] = a[i]\n    else:\n        s[i] = s[i - 1] ^ a[i]\ns[n] = 0\nfor _ in range(q):\n    k = int(input())\n    k -= 1\n    k = k % (n + 1)\n    print(s[k])", "(n, q) = [int(a) for a in input().strip().split()]\nF = [int(a) for a in input().strip().split()]\nS = [0]\nfor i in range(n):\n    S.append(S[i] ^ F[i])\nfor _ in range(q):\n    k = int(input())\n    print(S[k % (n + 1)])", "nums = list(map(int, input().split()))\narr = list(map(int, input().split()))\ncount = 0\ns = []\nfor item in arr:\n    count = count ^ item\n    s.append(count)\nfor i in range(nums[1]):\n    query = int(input())\n    if query % (nums[0] + 1) == 0:\n        print(0)\n    else:\n        print(s[query % (nums[0] + 1) - 1])", "(n, q) = map(int, input().split(' '))\nn_bonacci = list(map(int, input().split(' ')))\narr = []\nxor = 0\nfor val in n_bonacci:\n    xor = xor ^ val\n    arr.append(xor)\nfor query in range(q):\n    s = int(input())\n    if s % (n + 1) == 0:\n        print(0)\n    else:\n        print(arr[s % (n + 1) - 1])", "(n, q) = map(int, input().split())\nF = []\nS = []\nline1 = input().split()\nlast = 0\nfor i in range(n):\n    F.append(int(line1[i]))\n    last = last ^ int(line1[i])\n    S.append(last)\nS.append(0)\nfor i in range(q):\n    query = int(input())\n    pos = (query - 1) % len(S)\n    final = S[pos]\n    print(final)", "(n, q) = map(int, input().split())\narr = [int(n) for n in input().split()]\nx = arr[0]\narr1 = []\narr1.append(x)\nfor i in range(1, n):\n    x = x ^ arr[i]\n    arr1.append(x)\narr1.append(0)\nwhile q:\n    q = q - 1\n    x = int(input())\n    r = x % (n + 1)\n    print(arr1[r - 1])", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nxor = 0\nsl = []\nfor i in a:\n    xor = xor ^ i\n    sl.append(xor)\nfor i in range(q):\n    qval = int(input())\n    if qval % (n + 1) == 0:\n        print(0)\n    else:\n        print(sl[qval % (n + 1) - 1])", "(n, q) = map(int, input().split())\nf = [int(w) for w in input().split()]\nft = []\nft.append(f[0])\nfor i in range(1, n):\n    temp = ft[i - 1]\n    temp = temp ^ f[i]\n    ft.append(temp)\nft.append(0)\nwhile q:\n    k = int(input())\n    index = k % (n + 1) - 1\n    print(ft[index])\n    q = q - 1", "nq = [x for x in list(map(int, input().split(' ')))]\ntab = [x for x in list(map(int, input().split(' ')))]\nxs = tab[0]\nsol = []\nsol.append(tab[0])\nfor i in range(1, nq[0]):\n    xs ^= tab[i]\n    sol.append(xs)\nsol.append(sol[-1] ^ xs)\nfor i in range(nq[1]):\n    q = int(input())\n    print(sol[(q - 1) % (nq[0] + 1)])", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nf = [0] * n\nfor i in range(n):\n    if i == 0:\n        f[i] = a[i]\n    else:\n        f[i] = f[i - 1] ^ a[i]\nfor i in range(q):\n    k = int(input())\n    x = k % (n + 1)\n    if x == 0:\n        print(0)\n    else:\n        print(f[x - 1])", "(n, q) = map(int, input().split())\nf = list(map(int, input().split()))\nfor j in range(1, n):\n    f[j] ^= f[j - 1]\nfor g in range(q):\n    k = int(input())\n    tyagibagi = k % (n + 1)\n    if tyagibagi == 0:\n        print(0)\n    else:\n        print(f[tyagibagi - 1])", "(n, q) = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nxor = a[0]\nfor i in range(1, len(a)):\n    xor = xor ^ a[i]\na.append(xor)\ns = [a[0]]\nfor i in range(1, len(a)):\n    s.append(s[-1] ^ a[i])\nfor I in range(q):\n    k = int(input())\n    k -= 1\n    print(s[k % (n + 1)])", "(n, q) = map(int, input().split())\nf = [int(fi) for fi in input().split()]\ns = []\nsk = 0\nfor k in range(n):\n    sk = sk ^ f[k]\n    s.append(sk)\ns.append(0)\nfor _ in range(q):\n    k = int(input())\n    if k < n:\n        print(s[k - 1])\n    else:\n        print(s[k % (n + 1) - 1])", "(n, q) = map(int, input().split(' '))\nf = list(map(int, input().split(' ')))\nc = [0]\nd = 0\nfor i in range(n):\n    d = d ^ f[i]\n    c.append(d)\nwhile q:\n    e = int(input())\n    if e <= n:\n        print(c[e])\n    else:\n        print(c[(e - (n + 1)) % (n + 1)])\n    q = q - 1", "(n, q) = map(int, input().split())\nf = list(map(int, input().split()))\nd = {}\nans = f[0]\nfor i in range(1, n):\n    ans = f[i] ^ ans\nf.append(ans)\nd[1] = f[0]\nfor i in range(2, n + 2):\n    d[i % (n + 1)] = d[i - 1] ^ f[i - 1]\nfor _ in range(q):\n    k = int(input())\n    print(d[k % (n + 1)])", "a = [int(s) for s in input().split()]\nb = [int(s) for s in input().split()]\nc = [0]\nd = 0\nfor e in range(a[0]):\n    d = d ^ b[e]\n    c.append(d)\nfor j in range(a[1]):\n    e = int(input())\n    if e <= a[0]:\n        print(c[e])\n    else:\n        print(c[(e - (a[0] + 1)) % (a[0] + 1)])", "a = [int(s) for s in input().split()]\nb = [int(s) for s in input().split()]\nc = [0]\nd = 0\nfor e in range(a[0]):\n    d = d ^ b[e]\n    c.append(d)\nfor j in range(a[1]):\n    e = int(input())\n    if e <= a[0]:\n        print(c[e])\n    else:\n        print(c[(e - (a[0] + 1)) % (a[0] + 1)])", "(n, q) = map(int, input().split())\nf = list(map(int, input().split()))\nrecord = []\nr = 0\nfor i in range(n):\n    record.append(f[i])\n    r = r ^ f[i]\nrecord.append(r)\ns = [record[0]]\nfor i in range(1, n + 1):\n    s.append(s[i - 1] ^ record[i])\nfor i in range(q):\n    k = int(input())\n    temp = k % (n + 1)\n    print(s[temp - 1])", "(n, q) = map(int, input().split())\nf = list(map(int, input().split()))\ns = [f[0]]\nfor i in range(1, n):\n    s.append(f[i] ^ s[i - 1])\ns.append(0)\nfor i in range(q):\n    x = int(input())\n    x %= n + 1\n    print(s[x - 1])", "(n, q) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\np = [0] * (n + 1)\nfor i in range(n):\n    if i == 0:\n        p[0] = a[0]\n    else:\n        p[i] = p[i - 1] ^ a[i]\nfor j in range(q):\n    l = int(input())\n    x = l % (n + 1)\n    print(p[x - 1])", "ans = []\n(n, q) = map(int, input().split())\narr = [int(x) for x in input().split()]\npre = 0\nfor i in range(n):\n    pre = pre ^ arr[i]\n    ans.append(pre)\nans.append(0)\nfor _ in range(q):\n    que = int(input())\n    print(ans[que % (n + 1) - 1])", "(N, Q) = map(int, input().split())\nl = list(map(int, input().split()))\nfor i in range(N - 1):\n    l[i + 1] = l[i + 1] ^ l[i]\nfor i in range(Q):\n    k = int(input())\n    k = k % (N + 1)\n    if k == 0:\n        print(0)\n    else:\n        print(l[k - 1])", "a = [int(s) for s in input().split()]\nb = [int(s) for s in input().split()]\nc = [0]\nd = 0\nfor e in range(a[0]):\n    d = d ^ b[e]\n    c.append(d)\nfor j in range(a[1]):\n    e = int(input())\n    if e <= a[0]:\n        print(c[e])\n    else:\n        print(c[(e - (a[0] + 1)) % (a[0] + 1)])", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nfin = [a[0]]\nfor i in range(1, n):\n    fin.append(fin[i - 1] ^ a[i])\nwhile q:\n    q1 = int(input())\n    rem = q1 % (n + 1)\n    if rem == 0:\n        print(0)\n    else:\n        print(fin[rem - 1])\n    q -= 1", "(n, m) = map(int, input().split())\nl = [int(i) for i in input().split()]\npr = [0] * (n + 1)\npr = 0\nfor i in l:\n    pr ^= i\nl.append(pr)\npre = [0] * (n + 1)\npre[0] = l[0]\nfor i in range(1, n + 1):\n    pre[i] = pre[i - 1] ^ l[i]\nfor i in range(m):\n    x = int(input())\n    x -= 1\n    print(pre[x % (n + 1)])", "(n, q) = map(int, input().split())\nl = list(map(int, input().split()))\nt = []\nfor i in range(q):\n    t.append(int(input()))\nk = 0\nl1 = []\nfor i in l:\n    k ^= i\n    l1.append(k)\nl1 += [0]\nlenl = len(l1)\nfor i in t:\n    print(l1[(i - 1) % lenl])", "(N, Q) = map(int, input().split())\nl = list(map(int, input().split()))\nans = [0]\nsk = 0\n\ndef tobinary(a):\n    s = ''\n    while a > 0:\n        s = str(a % 2) + s\n        a = a // 2\n    return s\n\ndef XOR(a, b):\n    s1 = tobinary(a)\n    s2 = tobinary(b)\n    if len(s1) > len(s2):\n        s2 = '0' * (len(s1) - len(s2)) + s2\n    else:\n        s1 = '0' * (len(s2) - len(s1)) + s1\n    xor = 0\n    for i in range(len(s1)):\n        s = 1\n        if s1[i] == s2[i]:\n            s = 0\n        xor += s * 2 ** (len(s1) - 1 - i)\n    return xor\nfor i in range(N):\n    sk = XOR(sk, l[i])\n    ans.append(sk)\nfor i in range(Q):\n    k = int(input())\n    k = k % (N + 1)\n    print(ans[k])", "a = [int(s) for s in input().split()]\nb = [int(s) for s in input().split()]\nc = [0]\nd = 0\nfor e in range(a[0]):\n    d = d ^ b[e]\n    c.append(d)\nfor j in range(a[1]):\n    e = int(input())\n    if e <= a[0]:\n        print(c[e])\n    else:\n        print(c[(e - (a[0] + 1)) % (a[0] + 1)])", "(N, Q) = map(int, input().split())\narr = list(map(int, input().split()))\ntemp = arr[0]\nf = [arr[0]]\nfor num in arr[1:]:\n    temp ^= num\n    f.append(temp)\nfor i in range(Q):\n    q = int(input())\n    s = q % (N + 1)\n    ans = 0\n    if s >= 1:\n        ans = f[s - 1]\n    print(ans)", "from sys import stdin\n\ndef main():\n    (n, q) = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    f = [0, arr[0]]\n    xor = arr[0] ^ arr[1]\n    f.append(xor)\n    for index in range(2, n):\n        xor ^= arr[index]\n        f.append(xor)\n    for query in range(q):\n        k = int(stdin.readline())\n        if k <= n:\n            print(f[k])\n        else:\n            print(f[k % (n + 1)])\nmain()", "(n, q) = map(int, input().split())\na = [int(j) for j in input().split()]\nexor = 0\narr = []\nfor x in range(n):\n    exor = exor ^ a[x]\n    arr += [exor]\nfor j in range(q):\n    k = int(input())\n    if k % (n + 1) == 0:\n        print(0)\n    else:\n        print(arr[k % (n + 1) - 1])", "(n, q) = map(int, input().split())\nf1 = list(map(int, input().split()))\nf = []\nsize = n + 1\nans = 0\nfor i in range(n):\n    ans ^= f1[i]\n    f.append(ans)\nwhile q:\n    k = int(input())\n    if k % size == 0:\n        print(0)\n    else:\n        print(f[k % size - 1])\n    q -= 1", "import math\nl = [int(x) for x in input().split()]\n(n, q) = (l[0], l[1])\nf = [int(x) for x in input().split()]\ntemp = 0\ns = []\nfor each in f:\n    temp = temp ^ each\n    s.append(temp)\nfor _ in range(q):\n    p = int(input())\n    if p % (n + 1) == 0:\n        print(0)\n    elif p <= n:\n        print(s[p - 1])\n    else:\n        print(s[p % (n + 1) - 1])", "import sys\nimport math\nfileoperation = 0\nif fileoperation:\n    orig_stdout = sys.stdout\n    orig_stdin = sys.stdin\n    inputfile = open('W:/Competitive Programming/input.txt', 'r')\n    outputfile = open('W:/Competitive Programming/output.txt', 'w')\n    sys.stdin = inputfile\n    sys.stdout = outputfile\nmod = 1000000007\n\ndef nospace(l):\n    ans = ''.join((str(i) for i in l))\n    return ans\nt = 1\nfor tt in range(t):\n    (n, q) = map(int, sys.stdin.readline().split(' '))\n    a = list(map(int, sys.stdin.readline().split(' ')))\n    s = []\n    s.append(a[0])\n    for i in range(1, n):\n        s.append(s[i - 1] ^ a[i])\n    for _ in range(q):\n        x = int(input())\n        x = x % (n + 1)\n        if x == 0:\n            print(0)\n            continue\n        print(s[x - 1])\nif fileoperation:\n    sys.stdout = orig_stdout\n    sys.stdin = orig_stdin\n    inputfile.close()\n    outputfile.close()", "a = [int(s) for s in input().split()]\nf = [int(s) for s in input().split()]\ns = [0]\ncurr = 0\nfor i in range(a[0]):\n    curr = curr ^ f[i]\n    s.append(curr)\nfor i in range(a[1]):\n    k = int(input())\n    print(s[k % (a[0] + 1)])", "(n, q) = map(int, input().split())\nl = list(map(int, input().split()))\nf = [0]\nfor i in range(n):\n    y = f[i] ^ l[i]\n    f.append(y)\nfor i in range(q):\n    a = int(input())\n    b = a % (n + 1)\n    print(f[b])", "from sys import stdin\nimport functools\n(n, q) = map(int, stdin.readline().split())\narr = list(map(int, stdin.readline().split()))\nd = {1: arr[0]}\nans = arr[0] ^ arr[1]\nd[2] = ans\nfor i in range(2, n):\n    ans = ans ^ arr[i]\n    d[i + 1] = ans\nd[0] = 0\nfor i in range(q):\n    k = int(stdin.readline())\n    if k <= n:\n        print(d[k])\n    else:\n        print(d[k % (n + 1)])", "(n, q) = map(int, input().split())\nf1 = list(map(int, input().split()))\nf = []\nsize = n + 1\nans = 0\nfor i in range(n):\n    ans ^= f1[i]\n    f.append(ans)\nwhile q:\n    k = int(input())\n    if k % size == 0:\n        print(0)\n    else:\n        print(f[k % size - 1])\n    q -= 1", "(n, q) = map(int, input().split())\nl = list(map(int, input().split()))\nf = [0]\nfor i in range(n):\n    y = f[i] ^ l[i]\n    f.append(y)\nfor i in range(q):\n    w = int(input())\n    t = w % (n + 1)\n    print(f[t])", "(n, q) = map(int, input().strip().split())\nflist = list(map(int, input().strip().split()))\nnum = 0\nfor ele in flist:\n    num = num ^ ele\nflist.append(num)\nslist = []\nnum = 0\nfor ele in flist:\n    num = num ^ ele\n    slist.append(num)\nfor _ in range(q):\n    ind = int(input())\n    ind -= 1\n    rem = ind % (n + 1)\n    print(slist[rem])\ndel flist\ndel slist", "(n, q) = input().strip().split(' ')\n(n, q) = (int(n), int(q))\nl = list(map(int, input().strip().split(' ')))\ntemp = l[0]\nfor i in l[1:]:\n    temp ^= i\nl.append(temp)\nans = {}\ntemp = 0\nfor i in range(n, -1, -1):\n    ans[i] = temp ^ l[i]\n    temp ^= l[i]\nfor i in range(q):\n    k = int(input())\n    print(ans[k % (n + 1)])", "(a, b) = map(int, input().split())\nA = list(map(int, input().split()))\nB = []\nxor = 0\nfor i in range(a):\n    xor ^= A[i]\n    B.append(xor)\nfor _ in range(b):\n    t = int(input())\n    if t % (a + 1) == 0:\n        print(0)\n    else:\n        hade = t % (a + 1)\n        hade -= 1\n        print(B[hade])", "(N, Q) = map(int, input().split())\na = list(map(int, input().split()))\ns = []\nc = 0\nfor i in a:\n    c ^= i\n    s.append(c)\ns.append(0)\nfor i in range(Q):\n    print(s[(int(input()) - 1) % len(s)])", "(n, q) = map(int, input().split())\na = list(map(int, input().split()))\nlis = []\nxo = 0\nfor k in a:\n    xo = xo ^ k\n    lis.append(xo)\nfor i in range(q):\n    ans = 0\n    k = int(input())\n    z = k % (n + 1)\n    if z == 0:\n        print(0)\n    else:\n        print(lis[z - 1])", "(n, Q) = map(int, input().split())\na = [int(x) for x in input().split()]\nb = [a[0]]\nfor i in range(1, n):\n    b.append(b[len(b) - 1] ^ a[i])\nb.append(0)\nn += 1\nfor q in range(Q):\n    k = int(input())\n    if k <= n:\n        k -= 1\n        print(b[k])\n    else:\n        if k % n == 0:\n            k = n\n        else:\n            k = k % n\n        k -= 1\n        print(b[k])", "(n, q) = map(int, input().split())\nf = list(map(int, input().split()))\na = 0\nna = [0 for x in range(n + 1)]\nna[0] = f[0]\nna[n] = 0\nfor i in range(1, n):\n    na[i] = na[i - 1] ^ f[i]\nfor i in range(q):\n    que = int(input())\n    print(na[que % (n + 1) - 1])", "(N, Q) = input().split()\nN = int(N)\nFarray = list(map(int, input().split()))\nrequiredarray = [Farray[0]]\nfor i in range(1, N):\n    requiredarray.append(requiredarray[-1] ^ Farray[i])\nrequiredarray.append(0)\nfor j in range(int(Q)):\n    q = int(input())\n    print(requiredarray[q % (N + 1) - 1])", "(n, q) = map(int, input().split())\nlist1 = list(map(int, input().split()))\nseq = []\nx = 0\nfor i in list1:\n    x ^= i\n    seq.append(x)\nseq.append(0)\nfor _ in range(q):\n    print(seq[(int(input()) - 1) % len(seq)])", "(n, q) = map(int, input().split(' '))\nF = list(map(int, input().split(' ')))\nS = [0]\nfor i in range(n):\n    x = S[i] ^ F[i]\n    S.append(x)\nS.append(0)\nfor i in range(q):\n    k = int(input())\n    indx = k % (n + 1)\n    print(S[indx])", "(n, q) = map(int, input().split())\nf = list(map(int, input().split()))\narr = [f[0]]\nfor i in range(1, n):\n    arr.append(f[i] ^ arr[i - 1])\narr.append(0)\nn = n + 1\nfor i in range(q):\n    k = int(input())\n    print(arr[(k - 1) % n])", "(N, Q) = [int(x) for x in input().split()]\nF = [int(x) for x in input().split()]\nS = [F[0]]\nfor i in range(1, len(F)):\n    S.append(S[-1] ^ F[i])\nfor _ in range(Q):\n    val = int(input()) % (N + 1)\n    if not val:\n        print(0)\n    else:\n        print(S[val - 1])", "(n, q) = input().split(' ')\nn = int(n)\nq = int(q)\na = []\npre = 0\nb = []\narr = input()\na = list(map(int, arr.split(' ')))\nfor i in range(0, int(n)):\n    pre = pre ^ a[i]\n    b.append(pre)\nb.append(0)\nfor i in range(0, int(q)):\n    k = int(input())\n    k = k - 1\n    k = k % (n + 1)\n    print(b[k])", "(n, q) = map(int, input().split())\nf = list(map(int, input().split()))\nc = f[0]\ns = [f[0]]\nfor i in range(1, n):\n    c = c ^ f[i]\n    s.append(c)\ns.append(0)\nfor _ in range(q):\n    k = int(input())\n    print(s[k % (n + 1) - 1])", "(N, Q) = map(int, input().split())\nF = [0] + list(map(int, input().split()))\nx = F[1]\nfor i in range(2, N + 1):\n    x = x ^ F[i]\nF.append(x)\nS = [0]\nS.append(F[1])\nfor i in range(2, N + 2):\n    S.append(F[i] ^ S[i - 1])\nfor _ in range(Q):\n    i = int(input())\n    if i % (N + 1) == 0:\n        print(0)\n    else:\n        print(S[i % (N + 1)])", "import sys\nsys.setrecursionlimit(10 ** 5 + 1)\ninf = int(10 ** 20)\nmax_val = inf\nmin_val = -inf\nRW = lambda : sys.stdin.readline().strip()\nRI = lambda : int(RW())\nRMI = lambda : [int(x) for x in sys.stdin.readline().strip().split()]\nRWI = lambda : [x for x in sys.stdin.readline().strip().split()]\n(nb_elem, nb_query) = RMI()\nelems = [0] + RMI()\nfor i in range(1, nb_elem + 1):\n    elems[i] ^= elems[i - 1]\nnb_elem += 1\nfor _ in range(nb_query):\n    print(elems[RI() % nb_elem])", "(n, q) = map(int, input().split())\narr = [int(x) for x in input().split()]\nx = arr[0]\nfor i in range(1, len(arr)):\n    x = x ^ arr[i]\narr.append(x)\nxor = []\nxor.append(arr[0])\nfor i in range(1, len(arr)):\n    xor.append(xor[i - 1] ^ arr[i])\nxor.insert(0, xor[n])\nn += 1\nwhile q != 0:\n    q -= 1\n    t = int(input())\n    print(xor[t % n])"]