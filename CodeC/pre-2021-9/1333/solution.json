["def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    mod = 998244353\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        a.append((x, y))\n    a.sort()\n    if n == 1:\n        print((pow(2, a[0][1], mod) - 2) % mod)\n        continue\n    prefixlcm = []\n    lcm = 1\n    for i in range(n):\n        lcm = lcm * a[i][0] // gcd(lcm, a[i][0])\n        prefixlcm.append(lcm)\n    suffixgcd = [0] * n\n    g = 0\n    for i in range(n - 1, -1, -1):\n        g = gcd(g, a[i][0])\n        suffixgcd[i] = g\n    res = 0\n    b = 0\n    for i in range(n - 1):\n        if prefixlcm[i] > 1000000000.0:\n            b = 1\n            break\n        if suffixgcd[i] % prefixlcm[i] == 0:\n            res = (res + pow(2, a[i][1], mod) - 2) % mod\n        if i + 1 < n and suffixgcd[i + 1] % prefixlcm[i] == 0:\n            res = (res + 1) % mod\n    if not b and suffixgcd[n - 1] % prefixlcm[n - 1] == 0:\n        res = (res + pow(2, a[n - 1][1], mod) - 2) % mod\n    print(res)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    mod = 998244353\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        a.append((x, y))\n    a.sort()\n    if n == 1:\n        print((pow(2, a[0][1], mod) - 2) % mod)\n        continue\n    prefixlcm = []\n    lcm = 1\n    for i in range(n):\n        lcm = lcm * a[i][0] // gcd(lcm, a[i][0])\n        prefixlcm.append(lcm)\n    suffixgcd = [0] * n\n    g = 0\n    for i in range(n - 1, -1, -1):\n        g = gcd(g, a[i][0])\n        suffixgcd[i] = g\n    res = 0\n    b = 0\n    for i in range(n - 1):\n        if prefixlcm[i] > 1000000000.0:\n            b = 1\n            break\n        if suffixgcd[i] % prefixlcm[i] == 0:\n            res = (res + pow(2, a[i][1], mod) - 2) % mod\n        if i + 1 < n and suffixgcd[i + 1] % prefixlcm[i] == 0:\n            res = (res + 1) % mod\n    if not b and suffixgcd[n - 1] % prefixlcm[n - 1] == 0:\n        res = (res + pow(2, a[n - 1][1], mod) - 2) % mod\n    print(res)", "m = 998244353\n\ndef p(y):\n    ans = 1\n    x = 2\n    while y > 0:\n        if y & 1 == 1:\n            ans = x * ans % m\n        y = y >> 1\n        x = x * x % m\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        l.append((x, y))\n    l.sort()\n    ans = 0\n    for i in range(n):\n        am = True\n        j = i + 1\n        while j < n:\n            if l[j][0] % l[i][0] != 0:\n                am = False\n                break\n            j += 1\n        bm = True\n        j = i - 1\n        while j >= 0:\n            if l[i][0] % l[j][0] != 0:\n                bm = False\n                break\n            j -= 1\n        if am and bm:\n            ans = (ans + p(l[i][1]) - 1) % m\n            if i == n - 1:\n                ans = (ans - 1) % m\n        if am and (not bm):\n            ans = (ans + 1) % m\n            if i == n - 1:\n                ans = (ans - 1) % m\n    print(ans)", "m = 998244353\n\ndef p(y):\n    ans = 1\n    x = 2\n    while y > 0:\n        if y & 1 == 1:\n            ans = x * ans % m\n        y = y >> 1\n        x = x * x % m\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        l.append((x, y))\n    l.sort()\n    ans = 0\n    for i in range(n):\n        am = True\n        j = i + 1\n        while j < n:\n            if l[j][0] % l[i][0] != 0:\n                am = False\n                break\n            j += 1\n        bm = True\n        j = i - 1\n        while j >= 0:\n            if l[i][0] % l[j][0] != 0:\n                bm = False\n                break\n            j -= 1\n        if am and bm:\n            ans = (ans + p(l[i][1]) - 1) % m\n            if i == n - 1:\n                ans = (ans - 1) % m\n        if am and (not bm):\n            ans = (ans + 1) % m\n            if i == n - 1:\n                ans = (ans - 1) % m\n    print(ans)", "m = 998244353\n\ndef p(y):\n    ans = 1\n    x = 2\n    while y > 0:\n        if y & 1 == 1:\n            ans = x * ans % m\n        y = y >> 1\n        x = x * x % m\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        l.append((x, y))\n    l.sort()\n    ans = 0\n    for i in range(n):\n        am = True\n        j = i + 1\n        while j < n:\n            if l[j][0] % l[i][0] != 0:\n                am = False\n                break\n            j += 1\n        bm = True\n        j = i - 1\n        while j >= 0:\n            if l[i][0] % l[j][0] != 0:\n                bm = False\n                break\n            j -= 1\n        if am and bm:\n            ans = (ans + p(l[i][1]) - 1) % m\n            if i == n - 1:\n                ans = (ans - 1) % m\n        if am and (not bm):\n            ans = (ans + 1) % m\n            if i == n - 1:\n                ans = (ans - 1) % m\n    print(ans)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    mod = 998244353\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        a.append((x, y))\n    a.sort()\n    if n == 1:\n        print((pow(2, a[0][1], mod) - 2) % mod)\n        continue\n    prefixlcm = []\n    lcm = 1\n    for i in range(n):\n        lcm = lcm * a[i][0] // gcd(lcm, a[i][0])\n        prefixlcm.append(lcm)\n    suffixgcd = [0] * n\n    g = 0\n    for i in range(n - 1, -1, -1):\n        g = gcd(g, a[i][0])\n        suffixgcd[i] = g\n    res = 0\n    b = 0\n    for i in range(n - 1):\n        if prefixlcm[i] > 1000000000.0:\n            b = 1\n            break\n        if suffixgcd[i] % prefixlcm[i] == 0:\n            res = (res + pow(2, a[i][1], mod) - 2) % mod\n        if i + 1 < n and suffixgcd[i + 1] % prefixlcm[i] == 0:\n            res = (res + 1) % mod\n    if not b and suffixgcd[n - 1] % prefixlcm[n - 1] == 0:\n        res = (res + pow(2, a[n - 1][1], mod) - 2) % mod\n    print(res)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    mod = 998244353\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        a.append((x, y))\n    a.sort()\n    if n == 1:\n        print((pow(2, a[0][1], mod) - 2) % mod)\n        continue\n    prefixlcm = []\n    lcm = 1\n    for i in range(n):\n        lcm = lcm * a[i][0] // gcd(lcm, a[i][0])\n        prefixlcm.append(lcm)\n    suffixgcd = [0] * n\n    g = 0\n    for i in range(n - 1, -1, -1):\n        g = gcd(g, a[i][0])\n        suffixgcd[i] = g\n    res = 0\n    b = 0\n    for i in range(n - 1):\n        if prefixlcm[i] > 1000000000.0:\n            b = 1\n            break\n        if suffixgcd[i] % prefixlcm[i] == 0:\n            res = (res + pow(2, a[i][1], mod) - 2) % mod\n        if i + 1 < n and suffixgcd[i + 1] % prefixlcm[i] == 0:\n            res = (res + 1) % mod\n    if not b and suffixgcd[n - 1] % prefixlcm[n - 1] == 0:\n        res = (res + pow(2, a[n - 1][1], mod) - 2) % mod\n    print(res)", "import sys, math, itertools, random, bisect\nfrom collections import defaultdict\nINF = 10 ** 18\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nmod = 998244353\nN = 10 ** 5 + 5\ntwo = [0] * N\nfor i in range(1, N):\n    two[i] = (two[i - 1] + 1) % mod * 2 % mod\n    two[i] -= 1\n    if two[i] == -1:\n        two[i] = mod - 1\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        (x, y) = get_ints()\n        a.append([x, two[y]])\n    if n == 1:\n        print((a[0][1] - 1 + mod) % mod)\n        continue\n    a.sort(key=lambda x: x[0])\n    (GCD, LCM) = ([-1] * n, [-1] * n)\n    GCD[n - 1] = a[n - 1][0]\n    for i in range(n - 2, -1, -1):\n        GCD[i] = math.gcd(GCD[i + 1], a[i][0])\n    ans = 0\n    for i in range(n - 1):\n        if i == 0:\n            LCM[i] = a[i][0]\n        else:\n            LCM[i] = LCM[i - 1] * a[i][0] // math.gcd(LCM[i - 1], a[i][0])\n        if LCM[i] > 10 ** 9:\n            LCM[i] = -1\n            break\n        if GCD[i] % LCM[i] == 0:\n            ans = (ans + a[i][1] - 1 + mod) % mod\n        if GCD[i + 1] % LCM[i] == 0:\n            ans = (ans + 1) % mod\n    if LCM[n - 2] != -1:\n        LCM[n - 1] = LCM[n - 2] * a[n - 1][0] // math.gcd(LCM[n - 2], a[n - 1][0])\n        if GCD[n - 1] % LCM[n - 1] == 0:\n            ans = (ans + a[n - 1][1] - 1 + mod) % mod\n    print(ans)", "from math import gcd\n\ndef lcm(x, y):\n    if max(x, y) > 10 ** 9:\n        return 10 ** 9 + 1\n    ans = x * y // gcd(x, y)\n    return ans if ans <= 10 ** 9 else 10 ** 9 + 1\nmod = 998244353\nfor _ in range(int(input())):\n    n = int(input())\n    a = [tuple(map(int, input().split())) for _ in range(n)]\n    a.sort(key=lambda xx: xx[0])\n    pref = [1]\n    suff = [0]\n    for i in range(n):\n        pref.append(lcm(pref[-1], a[i][0]))\n    for i in range(n - 1, -1, -1):\n        suff.append(gcd(suff[-1], a[i][0]))\n    suff.reverse()\n    (ans, prev) = (0, 0)\n    for i in range(1, n + 1):\n        if not suff[i - 1] % pref[i]:\n            ans = (ans + pow(2, a[i - 1][1], mod) - prev - (i == 1) - (i == n)) % mod\n            prev = 1\n        else:\n            prev = 0\n    print(ans)", "from math import gcd\n\ndef lcm(x, y):\n    if max(x, y) > 10 ** 9:\n        return 10 ** 9 + 1\n    ans = x * y // gcd(x, y)\n    return ans if ans <= 10 ** 9 else 10 ** 9 + 1\nmod = 998244353\nfor _ in range(int(input())):\n    n = int(input())\n    a = [tuple(map(int, input().split())) for _ in range(n)]\n    a.sort(key=lambda xx: xx[0])\n    pref = [1]\n    suff = [0]\n    for i in range(n):\n        pref.append(lcm(pref[-1], a[i][0]))\n    for i in range(n - 1, -1, -1):\n        suff.append(gcd(suff[-1], a[i][0]))\n    suff.reverse()\n    (ans, prev) = (0, 0)\n    for i in range(1, n + 1):\n        if not suff[i - 1] % pref[i]:\n            ans = (ans + pow(2, a[i - 1][1], mod) - prev - (i == 1) - (i == n)) % mod\n            prev = 1\n        else:\n            prev = 0\n    print(ans)", "from math import gcd\n\ndef lcm(x, y):\n    if max(x, y) > 10 ** 9:\n        return 10 ** 9 + 1\n    ans = x * y // gcd(x, y)\n    return ans if ans <= 10 ** 9 else 10 ** 9 + 1\n\ndef main():\n    mod = 998244353\n    for _ in range(int(input())):\n        n = int(input())\n        a = [tuple(map(int, input().split())) for _ in range(n)]\n        a.sort(key=lambda xx: xx[0])\n        pref = [1]\n        for i in range(n):\n            pref.append(lcm(pref[-1], a[i][0]))\n        suff = [0]\n        for i in range(n - 1, -1, -1):\n            suff.append(gcd(suff[-1], a[i][0]))\n        suff.reverse()\n        (ans, prev) = (0, 0)\n        for i in range(1, n + 1):\n            if not suff[i - 1] % pref[i]:\n                ans = (ans + pow(2, a[i - 1][1], mod) - prev - (i == 1) - (i == n)) % mod\n                prev = 1\n            else:\n                prev = 0\n        print(ans)\nmain()", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    mod = 998244353\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        a.append((x, y))\n    a.sort()\n    if n == 1:\n        print((pow(2, a[0][1], mod) - 2) % mod)\n        continue\n    prefixlcm = []\n    lcm = 1\n    for i in range(n):\n        lcm = lcm * a[i][0] // gcd(lcm, a[i][0])\n        prefixlcm.append(lcm)\n    suffixgcd = [0] * n\n    g = 0\n    for i in range(n - 1, -1, -1):\n        g = gcd(g, a[i][0])\n        suffixgcd[i] = g\n    res = 0\n    b = 0\n    for i in range(n - 1):\n        if prefixlcm[i] > 1000000000.0:\n            b = 1\n            break\n        if suffixgcd[i] % prefixlcm[i] == 0:\n            res = (res + pow(2, a[i][1], mod) - 2) % mod\n        if i + 1 < n and suffixgcd[i + 1] % prefixlcm[i] == 0:\n            res = (res + 1) % mod\n    if not b and suffixgcd[n - 1] % prefixlcm[n - 1] == 0:\n        res = (res + pow(2, a[n - 1][1], mod) - 2) % mod\n    print(res)"]