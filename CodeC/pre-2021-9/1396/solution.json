["pow_2 = [1, 2, 4, 8, 16, 32, 64, 128, 256]\n\ndef solve(N, G, L):\n    if not N in pow_2:\n        print(-1)\n        return\n    V = [i for i in range(0, N)]\n    while len(V) > 1:\n        i = 0\n        C = []\n        while i < len(V) - 1:\n            u = V[i]\n            v = V[i + 1]\n            if G[u][v] != 0:\n                C.append(u)\n                L.remove((u, v))\n            else:\n                C.append(v)\n                L.remove((v, u))\n            i += 2\n        V = C\n    print(len(L))\n    for i in range(0, len(L) - 1):\n        print(G[L[i][0]][L[i][1]], end=' ')\n    if len(L) != 0:\n        print(G[L[-1][0]][L[-1][1]])\n    else:\n        print('')\nT = int(input())\nfor i in range(0, T):\n    N = int(input())\n    G = [[0 for j in range(0, N)] for i in range(0, N)]\n    L = []\n    for i in range(0, N * (N - 1) // 2):\n        (u, v) = [int(s) for s in input().split(' ') if s != '']\n        G[u - 1][v - 1] = i + 1\n        L.append((u - 1, v - 1))\n    solve(N, G, L)", "pow_2 = [1, 2, 4, 8, 16, 32, 64, 128, 256]\n\ndef solve(N, G, L):\n    if not N in pow_2:\n        print(-1)\n        return\n    V = [i for i in range(0, N)]\n    while len(V) > 1:\n        i = 0\n        C = []\n        while i < len(V) - 1:\n            u = V[i]\n            v = V[i + 1]\n            if G[u][v] != 0:\n                C.append(u)\n                L.remove((u, v))\n            else:\n                C.append(v)\n                L.remove((v, u))\n            i += 2\n        V = C\n    print(len(L))\n    for i in range(0, len(L) - 1):\n        print(G[L[i][0]][L[i][1]], end=' ')\n    if len(L) != 0:\n        print(G[L[-1][0]][L[-1][1]])\n    else:\n        print('')\nT = int(input())\nfor i in range(0, T):\n    N = int(input())\n    G = [[0 for j in range(0, N)] for i in range(0, N)]\n    L = []\n    for i in range(0, N * (N - 1) // 2):\n        (u, v) = [int(s) for s in input().split(' ') if s != '']\n        G[u - 1][v - 1] = i + 1\n        L.append((u - 1, v - 1))\n    solve(N, G, L)", "powers_of_two = [2 ** x for x in range(11)]\n\ndef power_root(l, r, adj_matrix, keep_edges):\n    if l == r:\n        return l\n    mid = (l + r) // 2\n    root1 = power_root(l, mid, adj_matrix, keep_edges)\n    root2 = power_root(mid + 1, r, adj_matrix, keep_edges)\n    if adj_matrix[root1][root2] > 0:\n        keep_edges[root1][root2] = 1\n        new_root = root1\n    else:\n        keep_edges[root2][root1] = 1\n        new_root = root2\n    return new_root\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    adj_matrix = []\n    for i in range(n):\n        adj_matrix.append([0] * n)\n    keep_edges = []\n    for i in range(n):\n        keep_edges.append([0] * n)\n    for i in range(1, n * (n - 1) // 2 + 1):\n        (u, v) = [int(vert) for vert in input().split(' ')]\n        adj_matrix[u - 1][v - 1] = i\n    if not n in powers_of_two:\n        print(-1)\n        continue\n    power_root(0, n - 1, adj_matrix, keep_edges)\n    answer = []\n    for i in range(n):\n        for j in range(n):\n            if keep_edges[i][j] == 0 and adj_matrix[i][j] != 0:\n                answer.append(adj_matrix[i][j])\n    print(len(answer))\n    if len(answer) > 0:\n        print(*answer)", "pow_2 = [1, 2, 4, 8, 16, 32, 64, 128, 256]\n\ndef solve(N, G, L):\n    if not N in pow_2:\n        print(-1)\n        return\n    V = [i for i in range(0, N)]\n    while len(V) > 1:\n        i = 0\n        C = []\n        while i < len(V) - 1:\n            u = V[i]\n            v = V[i + 1]\n            if G[u][v] != 0:\n                C.append(u)\n                L.remove((u, v))\n            else:\n                C.append(v)\n                L.remove((v, u))\n            i += 2\n        V = C\n    print(len(L))\n    for i in range(0, len(L) - 1):\n        print(G[L[i][0]][L[i][1]], end=' ')\n    if len(L) != 0:\n        print(G[L[-1][0]][L[-1][1]])\n    else:\n        print('')\nT = int(input())\nfor i in range(0, T):\n    N = int(input())\n    G = [[0 for j in range(0, N)] for i in range(0, N)]\n    L = []\n    for i in range(0, N * (N - 1) // 2):\n        (u, v) = [int(s) for s in input().split(' ') if s != '']\n        G[u - 1][v - 1] = i + 1\n        L.append((u - 1, v - 1))\n    solve(N, G, L)"]