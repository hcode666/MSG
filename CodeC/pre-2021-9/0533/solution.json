["t = int(input())\ni = 0\nwhile i < t:\n    s = input()\n    y = s[-4:]\n    if y == '1000':\n        print('YES')\n    else:\n        print('NO')\n    i = i + 1", "(t1, t2) = (1, 2)\nt = 0\nfor _ in range(int(input())):\n    a = input()\n    temp = 'red'\n    for i in a:\n        if temp == 'red':\n            if i == '1':\n                temp = 'blue'\n        elif temp == 'blue':\n            if i == '0':\n                temp = 'yellow'\n        elif temp == 'yellow':\n            if i == '0':\n                temp = 'pink'\n            else:\n                temp = 'blue'\n        elif temp == 'pink':\n            if i == '0':\n                temp = 'green'\n            else:\n                temp = 'blue'\n        elif temp == 'green':\n            if i == '0':\n                temp = 'red'\n            else:\n                temp = 'blue'\n    if temp == 'green':\n        print('YES')\n    else:\n        print('NO')", "testcases = int(input())\ni = 0\nwhile i < testcases:\n    s = input()\n    y = s[-4:]\n    if y == '1000':\n        print('YES')\n    else:\n        print('NO')\n    i = i + 1", "def state(country, roa):\n    road = int(roa)\n    if country == 'red':\n        if road == 0:\n            return 'red'\n        else:\n            return 'blue'\n    elif country == 'blue':\n        if road == 1:\n            return 'blue'\n        else:\n            return 'yellow'\n    elif country == 'yellow':\n        if road == 0:\n            return 'pink'\n        else:\n            return 'blue'\n    elif country == 'pink':\n        if road == 0:\n            return 'green'\n        else:\n            return 'blue'\n    elif country == 'green':\n        if road == 1:\n            return 'blue'\n        else:\n            return 'red'\nfor _ in range(int(input())):\n    s = input()\n    c = 'red'\n    for i in range(len(s)):\n        c = state(c, s[i])\n    if c == 'green':\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    currnode = 'red'\n    for i in s:\n        if currnode == 'red':\n            if i == '1':\n                currnode = 'blue'\n        elif currnode == 'blue':\n            if i == '0':\n                currnode = 'yellow'\n        elif currnode == 'yellow':\n            if i == '0':\n                currnode = 'pink'\n            else:\n                currnode = 'blue'\n        elif currnode == 'pink':\n            if i == '0':\n                currnode = 'green'\n            else:\n                currnode = 'blue'\n        elif currnode == 'green':\n            if i == '0':\n                currnode = 'red'\n            else:\n                currnode = 'blue'\n    if currnode == 'green':\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    if s[-4:] == '1000':\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    if s[-4:] == '1000':\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    s = input()\n    print('YES') if s.endswith('1000') else print('NO')", "for _ in range(int(input())):\n    map = [[0, 1], [2, 1], [3, 1], [4, 1], [0, 1]]\n    path = input()\n    curr = 0\n    for p in path:\n        curr = map[curr][int(p)]\n    if curr == 4:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    s = input()\n    if s.endswith('1000'):\n        print('YES')\n    else:\n        print('NO')", "k = int(input())\nfor i in range(k):\n    s = input()\n    j = len(s) - 1\n    if j > 2:\n        if s[j - 3] == '1' and s[j - 2] == '0' and (s[j - 1] == '0') and (s[j] == '0'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    s = input()\n    j = len(s) - 1\n    if j > 2:\n        if s[j - 3] == '1' and s[j - 2] == '0' and (s[j - 1] == '0') and (s[j] == '0'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "def path(a):\n    a = [int(i) for i in a]\n    color = 'red'\n    for i in a:\n        if color == 'red':\n            if i == 1:\n                color = 'blue'\n            elif i == 0:\n                color = 'red'\n        elif color == 'blue':\n            if i == 1:\n                color = 'blue'\n            elif i == 0:\n                color = 'yellow'\n        elif color == 'yellow':\n            if i == 1:\n                color = 'blue'\n            elif i == 0:\n                color = 'pink'\n        elif color == 'pink':\n            if i == 1:\n                color = 'blue'\n            elif i == 0:\n                color = 'green'\n        elif color == 'green':\n            if i == 1:\n                color = 'blue'\n            elif i == 0:\n                color = 'red'\n    return color == 'green'\nfor i in range(int(input())):\n    if path(input()):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    s = input()\n    lens = len(s)\n    if lens >= 4 and s[lens - 1] == '0' and (s[lens - 2] == '0') and (s[lens - 3] == '0') and (s[lens - 4] == '1'):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    s = input()\n    lens = len(s)\n    if lens >= 4 and s[lens - 1] == '0' and (s[lens - 2] == '0') and (s[lens - 3] == '0') and (s[lens - 4] == '1'):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    s = input()\n    lens = len(s)\n    if lens >= 4 and s[lens - 1] == '0' and (s[lens - 2] == '0') and (s[lens - 3] == '0') and (s[lens - 4] == '1'):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    s = input()\n    lens = len(s)\n    if lens >= 4 and s[lens - 1] == '0' and (s[lens - 2] == '0') and (s[lens - 3] == '0') and (s[lens - 4] == '1'):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    s = input()\n    lens = len(s)\n    if lens >= 4 and s[lens - 1] == '0' and (s[lens - 2] == '0') and (s[lens - 3] == '0') and (s[lens - 4] == '1'):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    s = input()\n    lens = len(s)\n    if lens >= 4 and s[lens - 1] == '0' and (s[lens - 2] == '0') and (s[lens - 3] == '0') and (s[lens - 4] == '1'):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    lens = len(s)\n    if lens >= 4 and s[lens - 1] == '0' and (s[lens - 2] == '0') and (s[lens - 3] == '0') and (s[lens - 4] == '1'):\n        print('YES')\n    else:\n        print('NO')", "st = dict()\nst['R'] = ['R', 'B']\nst['B'] = ['Y', 'B']\nst['Y'] = ['P', 'B']\nst['P'] = ['G', 'B']\nst['G'] = ['R', 'B']\ntn = int(input())\nfor _ in range(tn):\n    si = input()\n    cs = 'R'\n    for ch in si:\n        cs = st[cs][int(ch)]\n    if cs == 'G':\n        print('YES')\n    else:\n        print('NO')", "graph = []\nfor i in range(0, 5):\n    l = []\n    for j in range(0, 2):\n        l.append(0)\n    graph.append(l)\ngraph[0][0] = 0\ngraph[0][1] = 1\ngraph[1][0] = 2\ngraph[1][1] = 1\ngraph[2][0] = 3\ngraph[2][1] = 1\ngraph[3][0] = 4\ngraph[3][1] = 1\ngraph[4][0] = 0\ngraph[4][1] = 1\nn = int(input())\nwhile n:\n    string = input()\n    pos = 0\n    for i in string:\n        pos = graph[pos][int(i)]\n    if pos == 4:\n        print('YES')\n    else:\n        print('NO')\n    n -= 1", "st = dict()\nst['R'] = ['R', 'B']\nst['B'] = ['Y', 'B']\nst['Y'] = ['P', 'B']\nst['P'] = ['G', 'B']\nst['G'] = ['R', 'B']\ntn = int(input())\nfor _ in range(tn):\n    si = input()\n    cs = 'R'\n    for ch in si:\n        cs = st[cs][int(ch)]\n    if cs == 'G':\n        print('YES')\n    else:\n        print('NO')", "st = dict()\nst['R'] = ['R', 'B']\nst['B'] = ['Y', 'B']\nst['Y'] = ['P', 'B']\nst['P'] = ['G', 'B']\nst['G'] = ['R', 'B']\ntn = int(input())\nfor _ in range(tn):\n    si = input()\n    cs = 'R'\n    for ch in si:\n        cs = st[cs][int(ch)]\n    if cs == 'G':\n        print('YES')\n    else:\n        print('NO')", "import collections as clts\nimport math\nimport heapq\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\ndef lcm(x, y):\n    return int(x / gcd(x, y) * y)\nfor _ in range(int(input())):\n    graph = {'R': ['R', 'B'], 'B': ['Y', 'B'], 'Y': ['P', 'B'], 'P': ['G', 'B'], 'G': ['R', 'B']}\n    S = input()\n    curr = 'R'\n    for edge in S:\n        curr = graph[curr][int(edge)]\n    if curr != 'G':\n        print('NO')\n    else:\n        print('YES')", "import collections as clts\nimport math\nimport heapq\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\ndef lcm(x, y):\n    return int(x / gcd(x, y) * y)\nfor _ in range(int(input())):\n    graph = {'R': ['R', 'B'], 'B': ['Y', 'B'], 'Y': ['P', 'B'], 'P': ['G', 'B'], 'G': ['R', 'B']}\n    S = input()\n    curr = 'R'\n    for edge in S:\n        curr = graph[curr][int(edge)]\n    if curr != 'G':\n        print('NO')\n    else:\n        print('YES')", "def Helper(index, S, adj, root):\n    if index == len(S) and root == 4:\n        return True\n    if index >= len(S):\n        return False\n    ans = False\n    for node in adj[root]:\n        if node[1] == S[index]:\n            ans = ans | Helper(index + 1, S, adj, node[0])\n        else:\n            pass\n    return ans\n\ndef function(S, adj):\n    if len(S) > 3 and S[len(S) - 4:] == '1000':\n        return 'YES'\n    return 'NO'\n\ndef createADJ():\n    adj = [[] for i in range(5)]\n    adj[0] = [(0, '0'), (1, '1')]\n    adj[1] = [(1, '1'), (2, '0')]\n    adj[2] = [(1, '1'), (3, '0')]\n    adj[3] = [(4, '0'), (1, '1')]\n    adj[4] = [(0, '0'), (1, '1')]\n    return adj\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        adj = createADJ()\n        S = input()\n        val = function(S, adj)\n        print(val)\nmain()", "path = {'R0': 'R', 'R1': 'B', 'B1': 'B', 'B0': 'Y', 'Y1': 'B', 'Y0': 'P', 'P1': 'B', 'P0': 'G', 'G1': 'B', 'G0': 'R'}\nT = int(input())\nfor _ in range(T):\n    s = input()\n    current = 'R'\n    for c in s:\n        current = path[current + c]\n    print('YES' if current == 'G' else 'NO')", "path = {'R0': 'R', 'R1': 'B', 'B1': 'B', 'B0': 'Y', 'Y1': 'B', 'Y0': 'P', 'P1': 'B', 'P0': 'G', 'G1': 'B', 'G0': 'R'}\nT = int(input())\nfor _ in range(T):\n    s = input()\n    current = 'R'\n    for c in s:\n        current = path[current + c]\n    print('YES' if current == 'G' else 'NO')", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    s = input()\n    graph = [[0] * 2 for i in range(6)]\n    graph[1][0] = 1\n    graph[1][1] = 2\n    graph[2][0] = 3\n    graph[2][1] = 2\n    graph[3][0] = 4\n    graph[3][1] = 2\n    graph[4][0] = 5\n    graph[4][1] = 2\n    graph[5][0] = 1\n    graph[5][1] = 2\n    c = 1\n    for i in s:\n        c = graph[c][int(i)]\n    if c == 5:\n        print('YES')\n    else:\n        print('NO')", "from bisect import bisect_left\nfrom heapq import heapify, heappush, heappop\nfrom collections import deque\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 6)\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\ndx = [-1, -2, 1, 2, 2, -2, -1, 1]\ndy = [2, 1, 2, 1, -1, -1, -2, -2]\nfor _ in range(ii()):\n    ed = [[0, 1], [2, 1], [3, 1], [4, 1], [0, 1]]\n    st = ip()\n    p = 0\n    for i in range(len(st)):\n        p = ed[p][int(st[i])]\n    if p == 4:\n        print('YES')\n    else:\n        print('NO')", "a = [[0 for j in range(2)] for i in range(6)]\na[1][0] = 1\na[1][1] = 2\na[2][1] = 2\na[2][0] = 3\na[3][0] = 4\na[3][1] = 2\na[4][0] = 5\na[4][1] = 2\na[5][0] = 1\na[5][1] = 2\nfor _ in range(int(input())):\n    s = input()\n    cur = 1\n    for i in s:\n        cur = a[cur][int(i)]\n    if cur == 5:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    lens = len(s)\n    if lens >= 4 and s[lens - 1] == '0' and (s[lens - 2] == '0') and (s[lens - 3] == '0') and (s[lens - 4] == '1'):\n        print('YES')\n    else:\n        print('NO')", "def makeAdj():\n    dic = {}\n    dic[0, 0] = 0\n    dic[0, 1] = 1\n    dic[1, 0] = 2\n    dic[1, 1] = 1\n    dic[2, 1] = 1\n    dic[2, 0] = 3\n    dic[3, 0] = 4\n    dic[3, 1] = 1\n    dic[4, 1] = 1\n    dic[4, 0] = 0\n    return dic\nadj = makeAdj()\nt = int(input())\nfor i in range(t):\n    s = str(input())\n    node = 0\n    for j in s:\n        node = adj[node, int(j)]\n    if node == 4:\n        print('YES')\n    else:\n        print('NO')", "def next(c, n):\n    if n == '1':\n        return 'B'\n    elif c == 'R':\n        return 'R'\n    elif c == 'B':\n        return 'Y'\n    elif c == 'Y':\n        return 'P'\n    elif c == 'P':\n        return 'G'\n    else:\n        return 'R'\nfor i in range(int(input())):\n    string = input()\n    c = 'R'\n    for i in range(len(string)):\n        n = string[i]\n        c = next(c, n)\n    if c == 'G':\n        print('YES')\n    else:\n        print('NO')", "adj = [[0, 1], [2, 1], [3, 1], [4, 1], [0, 1]]\nT = int(input())\nfor _ in range(T):\n    L = list(input())\n    M = [int(x) for x in L]\n    initial = 0\n    for i in range(len(M)):\n        a = int(M[i])\n        initial = adj[initial][a]\n    if initial == 4:\n        print('YES')\n    else:\n        print('NO')", "adj = [[0, 1], [2, 1], [3, 1], [4, 1], [0, 1]]\nT = int(input())\nfor _ in range(T):\n    L = list(input())\n    M = [int(x) for x in L]\n    initial = 0\n    for i in range(len(M)):\n        a = int(M[i])\n        initial = adj[initial][a]\n    if initial == 4:\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\nfor _ in range(T):\n    ns = input()\n    if ns.endswith('1000'):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    s = input()\n    if s.endswith('1000'):\n        print('YES')\n    else:\n        print('NO')", "def next(c, n):\n    if n == '1':\n        return 'B'\n    elif c == 'R':\n        return 'R'\n    elif c == 'B':\n        return 'Y'\n    elif c == 'Y':\n        return 'P'\n    elif c == 'P':\n        return 'G'\n    else:\n        return 'R'\nfor i in range(int(input())):\n    string = input()\n    c = 'R'\n    for i in range(len(string)):\n        n = string[i]\n        c = next(c, n)\n    if c == 'G':\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    s = input()\n    if len(s) > 3:\n        if s[-1] == '1':\n            print('NO')\n        elif s[-2] == '0' and s[-3] == '0' and (s[-4] == '1'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    s = input()\n    if len(s) > 3:\n        if s[-1] == '1':\n            print('NO')\n        elif s[-2] == '0' and s[-3] == '0' and (s[-4] == '1'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    s = input()\n    if len(s) > 3:\n        if s[-1] == '1':\n            print('NO')\n        elif s[-2] == '0' and s[-3] == '0' and (s[-4] == '1'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    l = input()\n    if len(l) > 3:\n        if l[-1] == '1':\n            print('NO')\n        elif l[-2] == '0' and l[-3] == '0' and (l[-4] == '1'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    s = input()\n    j = len(s) - 1\n    if j > 2:\n        if s[j - 3] == '1' and s[j - 2] == '0' and (s[j - 1] == '0') and (s[j] == '0'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    if n >= 4 and s[n - 4:] == '1000':\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    j = len(s) - 1\n    if j > 2:\n        if s[j - 3] == '1' and s[j - 2] == '0' and (s[j - 1] == '0') and (s[j] == '0'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    j = len(s) - 1\n    if j > 2:\n        if s[j - 3] == '1' and s[j - 2] == '0' and (s[j - 1] == '0') and (s[j] == '0'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "import sys, math, itertools, random, bisect\nfrom collections import defaultdict\nINF = 10 ** 18\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    if n >= 4 and s[n - 4:] == '1000':\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    s = input()\n    j = len(s) - 1\n    if j > 2:\n        if s[j - 3] == '1' and s[j - 2] == '0' and (s[j - 1] == '0') and (s[j] == '0'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "read = lambda : map(int, input().split(' '))\nfor I in range(int(input())):\n    s = input()\n    n = len(s)\n    if n < 4:\n        print('NO')\n        continue\n    if s[n - 1] == '0' and s[n - 2] == '0' and (s[n - 3] == '0') and (s[n - 4] == '1'):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    if len(s) < 4:\n        print('NO')\n    elif s[-4:] == '1000':\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = input()\n    if len(n) >= 4:\n        if n.endswith('1000'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    s = input()\n    if s.endswith('1000'):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    s = str(input())\n    n = len(s)\n    if n < 4:\n        print('NO')\n    elif s[n - 4] != '0' and s[n - 3] == '0' and (s[n - 2] == '0') and (s[n - 1] == '0'):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    s = str(input())\n    n = len(s)\n    if n < 4:\n        print('NO')\n    elif s[n - 4] != '0' and s[n - 3] == '0' and (s[n - 2] == '0') and (s[n - 1] == '0'):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nl = []\nfor i in range(t):\n    s = str(input())\n    le = len(s)\n    if le < 4:\n        l.append('NO')\n    elif s[le - 1] == '0' and s[le - 2] == '0' and (s[le - 3] == '0') and (s[le - 4] == '1'):\n        l.append('YES')\n    else:\n        l.append('NO')\nfor i in l:\n    print(i)", "t = int(input())\nl = []\nfor i in range(t):\n    s = str(input())\n    le = len(s)\n    if le < 4:\n        l.append('NO')\n    elif s[le - 1] == '0' and s[le - 2] == '0' and (s[le - 3] == '0') and (s[le - 4] == '1'):\n        l.append('YES')\n    else:\n        l.append('NO')\nfor i in l:\n    print(i)", "t = int(input())\nfor i in range(t):\n    n = input()\n    l = len(n)\n    if len(n) < 4:\n        print('NO')\n    elif n[l - 1] == '0' and n[l - 2] == '0' and (n[l - 3] == '0') and (n[l - 4] == '1'):\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    s = input()\n    l = list(s)\n    if len(l) >= 4:\n        if s[-4:] == '1000':\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    if len(s) >= 4:\n        if s[-4:] == '1000':\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "for e in range(int(input())):\n    s = input()\n    if len(s) >= 4:\n        if s[-4:] == '1000':\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    binstr = input()\n    if binstr.endswith('1000'):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    s = input()\n    if len(s) < 4:\n        print('NO')\n    elif s[-4:] != '1000':\n        print('NO')\n    else:\n        print('YES')", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    s = stdin.readline().strip()\n    cond = True\n    n = len(s)\n    state = 1\n    for i in range(n):\n        if s[i] == '0':\n            if state != 1 or state != 5:\n                state += 1\n            elif state == 5:\n                state -= 4\n        elif state != 2:\n            state = 2\n    if state == 5:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    a = input()\n    d = {'q00': 'q0', 'q01': 'q1', 'q11': 'q1', 'q10': 'q2', 'q21': 'q1', 'q20': 'q3', 'q31': 'q1', 'q30': 'q4', 'q41': 'q1', 'q40': 'q0'}\n    g = 'q0'\n    for i in a:\n        g += i\n        g = d[g]\n    if g == 'q4':\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = input()\n    if len(n) >= 4:\n        if n[-4:] == '1000':\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    s = input()\n    if len(s) > 3:\n        if s[-1] == '0' and s[-2] == '0' and (s[-3] == '0') and (s[-4] == '1'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    s = input()\n    if len(s) >= 4:\n        x = s[-4] + s[-3] + s[-2] + s[-1]\n        if x == '1000':\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "graph = [{'0': 0, '1': 1}, {'1': 1, '0': 2}, {'0': 3, '1': 1}, {'1': 1, '0': 4}, {'1': 1, '0': 0}]\nfor i in range(0, int(input())):\n    S = input()\n    N = len(S)\n    currentIndex = 0\n    for i in range(0, N):\n        currentIndex = graph[currentIndex][S[i]]\n    if currentIndex == 4:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t > 0:\n    t -= 1\n    s = input()\n    if len(s) < 4:\n        print('NO')\n        continue\n    if s[-4:] != '1000':\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    n = input()\n    if len(n) < 4:\n        print('NO')\n    elif n[-1] == '0' and n[-2] == '0' and (n[-3] == '0') and (n[-4] == '1'):\n        print('YES')\n    else:\n        print('NO')", "def change_of_state(state, cur_no):\n    if cur_no == 1:\n        if state == 'R':\n            state = 'B'\n        elif state == 'B':\n            state = 'B'\n        elif state == 'Y':\n            state = 'B'\n        elif state == 'P':\n            state = 'B'\n        elif state == 'G':\n            state = 'B'\n    elif state == 'R':\n        state = 'R'\n    elif state == 'B':\n        state = 'Y'\n    elif state == 'Y':\n        state = 'P'\n    elif state == 'P':\n        state = 'G'\n    elif state == 'G':\n        state = 'R'\n    return state\nfor _ in range(int(input())):\n    s = str(input())\n    state = 'R'\n    for i in range(len(s)):\n        state = change_of_state(state, int(s[i]))\n    if state == 'G':\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\nfor _ in range(T):\n    s = input()\n    if len(s) > 3:\n        g = s[::-1]\n        if g[0:4] == '0001':\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "import math\ng = {1: (1, 2), 2: (3, 2), 3: (4, 2), 4: (5, 2), 5: (1, 2)}\nt = int(input().strip())\nfor tt in range(t):\n    str = input().strip()\n    v = 1\n    for j in range(len(str)):\n        if str[j] == '0':\n            v = g[v][0]\n        else:\n            v = g[v][1]\n    if v == 5:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    if len(s) < 4:\n        print('NO')\n    else:\n        i = len(s)\n        if s[i - 4] == '1' and s[i - 3] == '0' and (s[i - 2] == '0') and (s[i - 1] == '0'):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    s = input()\n    if s[len(s) - 4:] == '1000':\n        print('YES')\n    else:\n        print('NO')", "import sys\nimport math\nread = lambda : list(map(int, sys.stdin.readline().strip().split()))\ndfa = [[0, 1], [2, 1], [3, 1], [4, 1], [0, 1]]\n\ndef solve(s):\n    cur = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            cur = dfa[cur][1]\n        else:\n            cur = dfa[cur][0]\n    if cur == 4:\n        return True\n    return False\nfor _ in range(int(input())):\n    s = input()\n    ans = solve(s)\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    s = input()\n    a = [int(i) for i in s]\n    if len(a) < 4:\n        print('NO')\n        continue\n    sample = ['r0r', 'r1b', 'b1b', 'b0y', 'y1b', 'y0p', 'p0g', 'p1b', 'g1b', 'g0b']\n    curr_state = 'r'\n    next_state = ''\n    k = 0\n    z = 0\n    for i in a:\n        z += 1\n        tran_val = i\n        for j in sample:\n            if curr_state == j[0] and tran_val == int(j[1]):\n                next_state = j[2]\n                break\n        curr_state = next_state\n        if curr_state == 'g' and z == len(a):\n            print('YES')\n            k = 1\n            break\n    if k == 0:\n        print('NO')", "for case in range(int(input())):\n    inp = input()\n    if inp.endswith('1000'):\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    s = input()\n    j = len(s) - 1\n    if j > 2:\n        if s[j - 3] == '1' and s[j - 2] == '0' and (s[j - 1] == '0') and (s[j] == '0'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "T = int(input())\nR = 'R'\nG = 'G'\nB = 'B'\nY = 'Y'\nP = 'P'\nZ = '0'\nO = '1'\nA = {}\nA[R] = {}\nA[R][Z] = R\nA[R][O] = B\nA[B] = {}\nA[B][Z] = Y\nA[B][O] = B\nA[Y] = {}\nA[Y][Z] = P\nA[Y][O] = B\nA[P] = {}\nA[P][Z] = G\nA[P][O] = B\nA[G] = {}\nA[G][Z] = R\nA[G][O] = B\nfor t in range(T):\n    s = input()\n    c = R\n    for i in s:\n        c = A[c][i]\n    if c == G:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    string = input()\n    place = 'R'\n    for j in range(len(string)):\n        if place == 'R':\n            if string[j] == '1':\n                place = 'B'\n        elif place == 'B':\n            if string[j] == '0':\n                place = 'Y'\n        elif place == 'Y':\n            if string[j] == '1':\n                place = 'B'\n            elif string[j] == '0':\n                place = 'P'\n        elif place == 'P':\n            if string[j] == '1':\n                place = 'B'\n            elif string[j] == '0':\n                place = 'G'\n        elif place == 'G':\n            if string[j] == '1':\n                place = 'B'\n            elif string[j] == '0':\n                place = 'R'\n    if place == 'G':\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    l = input()\n    if len(l) > 3:\n        if l[-1] == '1':\n            print('NO')\n        elif l[-2] == '0' and l[-3] == '0' and (l[-4] == '1'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    l = input()\n    if len(l) > 3:\n        if l[-1] == '1':\n            print('NO')\n        elif l[-2] == '0' and l[-3] == '0' and (l[-4] == '1'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    l = input()\n    if len(l) > 3:\n        if l[-1] == '1':\n            print('NO')\n        elif l[-2] == '0' and l[-3] == '0' and (l[-4] == '1'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    l = input()\n    if len(l) > 3:\n        if l[-1] == '1':\n            print('NO')\n        elif l[-2] == '0' and l[-3] == '0' and (l[-4] == '1'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    l = input()\n    if len(l) > 3:\n        if l[-1] == '1':\n            print('NO')\n        elif l[-2] == '0' and l[-3] == '0' and (l[-4] == '1'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "T = int(input())\nl = [[0, 1], [2, 1], [3, 1], [4, 1], [0, 1]]\nfor _ in range(T):\n    s = input()\n    a = 0\n    for i in s:\n        x = int(i)\n        a = l[a][x]\n    if a == 4:\n        print('YES')\n    else:\n        print('NO')", "from numpy import *\nfor t in range(int(input())):\n    s = input()\n    city = array([[0, 1, -1, -1, -1], [-1, 1, 0, -1, -1], [-1, 1, -1, 0, -1], [-1, 1, -1, -1, 0], [0, 1, -1, -1, -1]])\n    k = 0\n    i = 0\n    flag = 0\n    while k < len(s):\n        for j in range(5):\n            if k == len(s) - 1 and i == 3 and (j == 4):\n                flag = 1\n                k += 1\n                break\n            elif city[i][j] == int(s[k]):\n                i = j\n                k += 1\n                break\n    if flag == 0:\n        print('NO')\n    elif flag == 1:\n        print('YES')", "d = {'red': {'0': 'red', '1': 'blue'}, 'blue': {'0': 'yellow', '1': 'blue'}, 'yellow': {'0': 'violet', '1': 'blue'}, 'violet': {'0': 'green', '1': 'blue'}, 'green': {'0': 'red', '1': 'blue'}}\nfor _ in range(int(input())):\n    s = input()\n    c = 'red'\n    f = 0\n    for i in s:\n        c = d[c][i]\n    if c == 'green':\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    s = input()\n    l = len(s)\n    if l >= 4:\n        if s.endswith('1000'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    s = input()\n    j = len(s) - 1\n    if j > 2:\n        if s[j - 3] == '1' and s[j - 2] == '0' and (s[j - 1] == '0') and (s[j] == '0'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    l = input()\n    if len(l) > 3:\n        if l[-1] == '1':\n            print('NO')\n        elif l[-2] == '0' and l[-3] == '0' and (l[-4] == '1'):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = list(input())\n    if len(s) < 4:\n        print('NO')\n    elif s[-1] == '0' and s[-2] == '0' and (s[-3] == '0') and (s[-4] == '1'):\n        print('YES')\n    else:\n        print('NO')", "d = {'red': {'0': 'red', '1': 'blue'}, 'blue': {'0': 'yellow', '1': 'blue'}, 'yellow': {'0': 'violet', '1': 'blue'}, 'violet': {'0': 'green', '1': 'blue'}, 'green': {'0': 'red', '1': 'blue'}}\nfor _ in range(int(input())):\n    s = input()\n    c = 'red'\n    f = 0\n    for i in s:\n        c = d[c][i]\n    if c == 'green':\n        print('YES')\n    else:\n        print('NO')", "def main():\n    t = int(input())\n    for _ in range(t):\n        sx = input()\n        if sx[-4:] == '1000':\n            print('YES')\n        else:\n            print('NO')\nmain()"]