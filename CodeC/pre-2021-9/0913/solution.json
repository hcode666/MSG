["import sys\nif sys.version_info > (3,):\n    long = int\n    xrange = range\n\ndef choose(n, k):\n    ntok = 1\n    ktok = 1\n    for t in xrange(1, min(k, n - k) + 1):\n        ntok *= n\n        ktok *= t\n        n -= 1\n    return ntok // ktok\n\ndef C(X, M):\n    return choose(X + M - 1, M - 1)\nimport numpy as np\n\ndef R(N, M):\n    Base = [C(0, M)]\n    for i in range(1, M + 1):\n        Base.append(Base[i - 1] * (M + i - 1) // i)\n    Base = np.array([i % 1000000000 for i in Base], dtype=np.int64)\n    Next = Base[:]\n    for i in range(1, N):\n        Next = np.multiply(Base, np.cumsum(Next) % 1000000000, dtype=np.int64) % 1000000000\n    return sum((i for i in Next)) % 1000000000\nT = int(input())\nfor i in range(T):\n    (N, M) = list(map(int, input().split()))\n    print(R(N, M))", "import sys\nif sys.version_info > (3,):\n    long = int\n    xrange = range\n\ndef choose(n, k):\n    ntok = 1\n    ktok = 1\n    for t in xrange(1, min(k, n - k) + 1):\n        ntok *= n\n        ktok *= t\n        n -= 1\n    return ntok // ktok\n\ndef C(X, M):\n    return choose(X + M - 1, M - 1)\nimport numpy as np\n\ndef R(N, M):\n    Base = [C(0, M)]\n    for i in range(1, M + 1):\n        Base.append(Base[i - 1] * (M + i - 1) // i)\n    Base = np.array([i % 1000000000 for i in Base], dtype=np.int64)\n    Next = Base[:]\n    for i in range(1, N):\n        Next = np.multiply(Base, np.cumsum(Next) % 1000000000, dtype=np.int64) % 1000000000\n    return sum((i for i in Next)) % 1000000000\nT = int(input())\nfor i in range(T):\n    (N, M) = list(map(int, input().split()))\n    print(R(N, M))"]