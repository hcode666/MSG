["t = int(input())\nfor i in range(t):\n    (N, K) = list(map(int, input().split(' ')))\n    d = dict()\n    lst = []\n    a = set({})\n    f = ''\n    for i in range(N):\n        s = list(map(int, input().split(' ')))\n        lst.append(s)\n    for i in range(N):\n        for ele in lst[i][1:]:\n            if ele not in a:\n                a.add(ele)\n        if len(a) == K:\n            if i == N - 1:\n                f = 'all'\n            else:\n                f = 'some'\n            break\n    else:\n        f = 'sad'\n    a = set({})\n    b = ''\n    for i in range(N - 1, -1, -1):\n        for ele in lst[i][1:]:\n            if ele not in a:\n                a.add(ele)\n        if len(a) == K:\n            if i == 0:\n                b = 'all'\n            else:\n                b = 'some'\n            break\n    else:\n        b = 'sad'\n    if f == b:\n        print(f)\n    else:\n        print('some')", "for _ in range(int(input())):\n    (N, K) = list(map(int, input().split(' ')))\n    d = dict()\n    lst = []\n    a = set({})\n    f = ''\n    for i in range(N):\n        s = list(map(int, input().split(' ')))\n        lst.append(s)\n    for i in range(N):\n        for ele in lst[i][1:]:\n            if ele not in a:\n                a.add(ele)\n        if len(a) == K:\n            if i == N - 1:\n                f = 'all'\n            else:\n                f = 'some'\n            break\n    else:\n        f = 'sad'\n    a = set({})\n    b = ''\n    for i in range(N - 1, -1, -1):\n        for ele in lst[i][1:]:\n            if ele not in a:\n                a.add(ele)\n        if len(a) == K:\n            if i == 0:\n                b = 'all'\n            else:\n                b = 'some'\n            break\n    else:\n        b = 'sad'\n    if f == b:\n        print(f)\n    else:\n        print('some')", "for q in range(int(input())):\n    (n, k) = map(int, input().split())\n    test = []\n    z = []\n    f = 0\n    for i in range(n):\n        l = [int(i) for i in input().split()]\n        l = l[1:]\n        z.append(l)\n    c = [0] * (k + 1)\n    for i in range(n):\n        for j in z[i]:\n            c[j] += 1\n    for i in range(1, k + 1):\n        if c[i] == 0:\n            print('sad')\n            f = 1\n            break\n    if f == 1:\n        continue\n    for i in range(n):\n        cnt = 0\n        for j in z[i]:\n            if c[j] != 1:\n                cnt += 1\n        if cnt == len(z[i]):\n            print('some')\n            break\n    else:\n        print('all')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    c = set({})\n    bl = ''\n    for i in range(n):\n        for j in l[i][1:]:\n            if j not in c:\n                c.add(j)\n        if len(c) == k:\n            if i == n - 1:\n                bl = 'all'\n            else:\n                bl = 'some'\n            break\n    else:\n        bl = 'sad'\n    c = set({})\n    bl1 = ''\n    for i in range(n - 1, -1, -1):\n        for j in l[i][1:]:\n            if j not in c:\n                c.add(j)\n        if len(c) == k:\n            if i == 0:\n                bl1 = 'all'\n            else:\n                bl1 = 'some'\n            break\n    else:\n        bl1 = 'sad'\n    if bl1 == bl:\n        print(bl)\n    else:\n        print('some')", "def soln(n, k, arr):\n    cur = arr[0]\n    flag = True\n    for i in range(1, n):\n        inter = cur.intersection(arr[i])\n        if inter == cur or inter == arr[i]:\n            flag = False\n        cur.update(arr[i])\n    if len(cur) < k:\n        return 'sad'\n    if flag:\n        return 'all'\n    return 'some'\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        arr.append(set(list(map(int, input().split()))[1:]))\n    print(soln(n, k, arr))", "def soln(n, k, arr):\n    cur = arr[0]\n    flag = True\n    for i in range(1, n):\n        inter = cur.intersection(arr[i])\n        if inter == cur or inter == arr[i]:\n            flag = False\n        cur.update(arr[i])\n    if len(cur) < k:\n        return 'sad'\n    if flag:\n        return 'all'\n    return 'some'\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        arr.append(set(list(map(int, input().split()))[1:]))\n    print(soln(n, k, arr))", "def soln(n, k, arr):\n    cur = arr[0]\n    flag = True\n    for i in range(1, n):\n        inter = cur.intersection(arr[i])\n        if inter == cur or inter == arr[i]:\n            flag = False\n        cur.update(arr[i])\n    if len(cur) < k:\n        return 'sad'\n    if flag:\n        return 'all'\n    return 'some'\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        arr.append(set(list(map(int, input().split()))[1:]))\n    print(soln(n, k, arr))", "def soln(n, k, arr):\n    cur = arr[0]\n    flag = True\n    for i in range(1, n):\n        inter = cur.intersection(arr[i])\n        if inter == cur or inter == arr[i]:\n            flag = False\n        cur.update(arr[i])\n    if len(cur) < k:\n        return 'sad'\n    if flag:\n        return 'all'\n    return 'some'\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        arr.append(set(list(map(int, input().split()))[1:]))\n    print(soln(n, k, arr))", "tests = int(input())\nfor i in range(tests):\n    (n, r) = map(int, input().split())\n    all_ingridients = []\n    for j in range(n):\n        arr = list(map(int, input().split()))\n        all_ingridients.append(arr)\n    ans1 = 'sad'\n    ingridients = set()\n    for j in range(n):\n        arr = all_ingridients[j]\n        if arr[0] == r:\n            ans1 = 'some'\n            break\n        if ans1 == 'sad':\n            ingridients.update(arr[1:])\n            if len(ingridients) == r:\n                if j + 1 == n:\n                    ans1 = 'all'\n                else:\n                    ans1 = 'some'\n                break\n    ans2 = 'sad'\n    ingridients = set()\n    for j in range(n - 1, -1, -1):\n        arr = all_ingridients[j]\n        if arr[0] == r:\n            ans2 = 'some'\n            break\n        if ans2 == 'sad':\n            ingridients.update(arr[1:])\n            if len(ingridients) == r:\n                if j == 0:\n                    ans2 = 'all'\n                else:\n                    ans2 = 'some'\n                break\n    if ans1 == 'all' and ans2 == 'all':\n        print(ans1)\n    elif ans1 == 'some' or ans2 == 'some':\n        print('some')\n    else:\n        print('sad')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    res = set()\n    cnt = 0\n    visit = True\n    p = []\n    for i in range(n):\n        lis = tuple(map(int, input().split()))\n        li = set(lis[1:])\n        k1 = res.intersection(li)\n        if k1 == li:\n            visit = False\n        if k1 == res and res != set():\n            visit = False\n        res.update(li)\n    if len(res) != k:\n        print('sad')\n        continue\n    elif visit:\n        print('all')\n    else:\n        print('some')", "tests = int(input())\nfor i in range(tests):\n    (n, r) = map(int, input().split())\n    all_ingridients = []\n    for j in range(n):\n        arr = list(map(int, input().split()))\n        all_ingridients.append(arr)\n    ans1 = 'sad'\n    ingridients = set()\n    for j in range(n):\n        arr = all_ingridients[j]\n        if arr[0] == r:\n            ans1 = 'some'\n            break\n        if ans1 == 'sad':\n            ingridients.update(arr[1:])\n            if len(ingridients) == r:\n                if j + 1 == n:\n                    ans1 = 'all'\n                else:\n                    ans1 = 'some'\n                break\n    ans2 = 'sad'\n    ingridients = set()\n    for j in range(n - 1, -1, -1):\n        arr = all_ingridients[j]\n        if arr[0] == r:\n            ans2 = 'some'\n            break\n        if ans2 == 'sad':\n            ingridients.update(arr[1:])\n            if len(ingridients) == r:\n                if j == 0:\n                    ans2 = 'all'\n                else:\n                    ans2 = 'some'\n                break\n    if ans1 == 'all' and ans2 == 'all':\n        print(ans1)\n    elif ans1 == 'some' or ans2 == 'some':\n        print('some')\n    else:\n        print('sad')", "def soln(n, k, arr):\n    cur = arr[0]\n    flag = True\n    for i in range(1, n):\n        inter = cur.intersection(arr[i])\n        if inter == cur or inter == arr[i]:\n            flag = False\n        cur.update(arr[i])\n    if len(cur) < k:\n        return 'sad'\n    if flag:\n        return 'all'\n    return 'some'\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        arr.append(set(list(map(int, input().split()))[1:]))\n    print(soln(n, k, arr))", "def soln(n, k, arr):\n    cur = arr[0]\n    flag = True\n    for i in range(1, n):\n        inter = cur.intersection(arr[i])\n        if inter == cur or inter == arr[i]:\n            flag = False\n        cur.update(arr[i])\n    if len(cur) < k:\n        return 'sad'\n    if flag:\n        return 'all'\n    return 'some'\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        arr.append(set(list(map(int, input().split()))[1:]))\n    print(soln(n, k, arr))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    f = [False] * (k + 1)\n    l = []\n    res = 0\n    for i in range(n):\n        x = [int(x) for x in input().split()]\n        l.append(x[1:])\n        for ing in l[i]:\n            if f[ing] == 0:\n                res += 1\n            f[ing] += 1\n    if res != k:\n        print('sad')\n    else:\n        for i in range(n):\n            flag = True\n            for ing in l[i]:\n                if f[ing] == 1:\n                    flag = False\n                    break\n            if flag:\n                break\n        if flag:\n            print('some')\n        else:\n            print('all')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    f = [False] * (k + 1)\n    l = []\n    res = 0\n    for i in range(n):\n        x = [int(x) for x in input().split()]\n        l.append(x[1:])\n        for ing in l[i]:\n            if f[ing] == 0:\n                res += 1\n            f[ing] += 1\n    if res != k:\n        print('sad')\n    else:\n        for i in range(n):\n            flag = True\n            for ing in l[i]:\n                if f[ing] == 1:\n                    flag = False\n                    break\n            if flag:\n                break\n        if flag:\n            print('some')\n        else:\n            print('all')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    f = [False] * (k + 1)\n    l = []\n    res = 0\n    for i in range(n):\n        x = [int(x) for x in input().split()]\n        l.append(x[1:])\n        for ing in l[i]:\n            if f[ing] == 0:\n                res += 1\n            f[ing] += 1\n    if res != k:\n        print('sad')\n    else:\n        for i in range(n):\n            flag = True\n            for ing in l[i]:\n                if f[ing] == 1:\n                    flag = False\n                    break\n            if flag:\n                break\n        if flag:\n            print('some')\n        else:\n            print('all')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    f = [False] * (k + 1)\n    l = []\n    res = 0\n    for i in range(n):\n        x = [int(x) for x in input().split()]\n        l.append(x[1:])\n        for ing in l[i]:\n            if f[ing] == 0:\n                res += 1\n            f[ing] += 1\n    if res != k:\n        print('sad')\n    else:\n        for i in range(n):\n            flag = True\n            for ing in l[i]:\n                if f[ing] == 1:\n                    flag = False\n                    break\n            if flag:\n                break\n        if flag:\n            print('some')\n        else:\n            print('all')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    f = [False] * (k + 1)\n    l = []\n    res = 0\n    for i in range(n):\n        x = [int(x) for x in input().split()]\n        l.append(x[1:])\n        for ing in l[i]:\n            if f[ing] == 0:\n                res += 1\n            f[ing] += 1\n    if res != k:\n        print('sad')\n    else:\n        for i in range(n):\n            flag = True\n            for ing in l[i]:\n                if f[ing] == 1:\n                    flag = False\n                    break\n            if flag:\n                break\n        if flag:\n            print('some')\n        else:\n            print('all')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    f = [False] * (k + 1)\n    l = []\n    res = 0\n    for i in range(n):\n        x = [int(x) for x in input().split()]\n        l.append(x[1:])\n        for ing in l[i]:\n            if f[ing] == 0:\n                res += 1\n            f[ing] += 1\n    if res != k:\n        print('sad')\n    else:\n        for i in range(n):\n            flag = True\n            for ing in l[i]:\n                if f[ing] == 1:\n                    flag = False\n                    break\n            if flag:\n                break\n        if flag:\n            print('some')\n        else:\n            print('all')", "from math import gcd, sqrt, ceil, floor, log10, log2\nfrom heapq import heapify, heappop, heappush, nsmallest, nlargest\nfrom collections import Counter, deque, OrderedDict, defaultdict\nfrom itertools import combinations, permutations, zip_longest\nfrom bisect import bisect_left, bisect_right\nfrom functools import lru_cache, reduce\nimport sys\nimport time\nimport string\nimport operator\nRECURSION_LIMIT = int(10000000.0)\nINT_MAX = float('inf')\nINT_MIN = float('-inf')\nMOD = int(1000000000.0) + 7\nNEWLINE = '\\n'\nSPACE = ' '\nsys.setrecursionlimit(RECURSION_LIMIT)\ninp = lambda fn: fn(input())\ninp_vars = lambda fn, delim, convert_to=list: convert_to(map(fn, input().split(delim)))\nenum = lambda itr: enumerate(itr)\n\ndef toposort(graph, n):\n    degree = [0] * n\n    for node in graph:\n        for adj in graph[node]:\n            degree[adj] += 1\n    bfs_queue = [node for node in range(n) if not degree[node]]\n    for node in bfs_queue:\n        for adj in graph[node]:\n            degree[adj] -= 1\n            if not degree[adj]:\n                bfs_queue.append(adj)\n    return (bfs_queue, degree)\n\ndef dfs(graph, node, visited):\n    visited.add(node)\n    for adj in graph[node]:\n        if adj in visited:\n            continue\n        dfs(graph, adj, visited)\n\ndef solve(*args, **kwargs):\n    (n, k, arr) = args\n    (cnt, mp) = (0, Counter())\n    for ingredients in arr:\n        for i in ingredients:\n            mp[i] += 1\n    for ingredients in arr:\n        visit = False\n        for i in ingredients:\n            if mp[i] == 1:\n                visit = True\n                break\n        cnt += visit\n    return 'some' if len(mp) == k and cnt != n else 'all' if len(mp) == k and cnt == n else 'sad'\n\ndef main(*args, **kwargs):\n    for _ in range(int(input())):\n        (arg1, arg2) = inp_vars(int, SPACE)\n        arg3 = [inp_vars(int, SPACE)[1:] for _ in range(arg1)]\n        res = solve(*(arg1, arg2, arg3))\n        if type(res) in {list, tuple, set}:\n            print(*res, sep=' ')\n        else:\n            print(res)\nmain()", "for q in range(int(input())):\n    (n, k) = map(int, input().split())\n    test = []\n    z = []\n    f = 0\n    for i in range(n):\n        l = [int(i) for i in input().split()]\n        l = l[1:]\n        z.append(l)\n    c = [0] * (k + 1)\n    for i in range(n):\n        for j in z[i]:\n            c[j] += 1\n    for i in range(1, k + 1):\n        if c[i] == 0:\n            print('sad')\n            f = 1\n            break\n    if f == 1:\n        continue\n    for i in range(n):\n        cnt = 0\n        for j in z[i]:\n            if c[j] != 1:\n                cnt += 1\n        if cnt == len(z[i]):\n            print('some')\n            break\n    else:\n        print('all')", "for q in range(int(input())):\n    (n, k) = map(int, input().split())\n    test = []\n    z = []\n    f = 0\n    for i in range(n):\n        l = [int(i) for i in input().split()]\n        l = l[1:]\n        z.append(l)\n    c = [0] * (k + 1)\n    for i in range(n):\n        for j in z[i]:\n            c[j] += 1\n    for i in range(1, k + 1):\n        if c[i] == 0:\n            print('sad')\n            f = 1\n            break\n    if f == 1:\n        continue\n    for i in range(n):\n        cnt = 0\n        for j in z[i]:\n            if c[j] != 1:\n                cnt += 1\n        if cnt == len(z[i]):\n            print('some')\n            break\n    else:\n        print('all')", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = set()\n    count = 0\n    done = True\n    li = []\n    for i in range(n):\n        l = tuple(map(int, input().split()))\n        ll = set(l[1:])\n        k1 = ans.intersection(ll)\n        if k1 == ll:\n            done = False\n        if k1 == ans and ans != set():\n            done = False\n        ans.update(ll)\n    if len(ans) != k:\n        print('sad')\n        continue\n    elif done:\n        print('all')\n    else:\n        print('some')", "import numpy as np\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = set()\n    count = 0\n    done = True\n    li = []\n    for i in range(n):\n        l = tuple(map(int, input().split()))\n        ll = set(l[1:])\n        k1 = ans.intersection(ll)\n        if k1 == ll:\n            done = False\n        if k1 == ans and ans != set():\n            done = False\n        ans.update(ll)\n    if len(ans) != k:\n        print('sad')\n        continue\n    elif done:\n        print('all')\n    else:\n        print('some')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    f = [False] * (k + 1)\n    l = []\n    res = 0\n    for i in range(n):\n        x = [int(x) for x in input().split()]\n        l.append(x[1:])\n        for ing in l[i]:\n            if f[ing] == 0:\n                res += 1\n            f[ing] += 1\n    if res != k:\n        print('sad')\n    else:\n        for i in range(n):\n            flag = True\n            for ing in l[i]:\n                if f[ing] == 1:\n                    flag = False\n                    break\n            if flag:\n                break\n        if flag:\n            print('some')\n        else:\n            print('all')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    f = [False] * (k + 1)\n    l = []\n    res = 0\n    for i in range(n):\n        x = [int(x) for x in input().split()]\n        l.append(x[1:])\n        for ing in l[i]:\n            if f[ing] == 0:\n                res += 1\n            f[ing] += 1\n    if res != k:\n        print('sad')\n    else:\n        for i in range(n):\n            flag = True\n            for ing in l[i]:\n                if f[ing] == 1:\n                    flag = False\n                    break\n            if flag:\n                break\n        if flag:\n            print('some')\n        else:\n            print('all')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    f = [False] * (k + 1)\n    l = []\n    res = 0\n    for i in range(n):\n        x = [int(x) for x in input().split()]\n        l.append(x[1:])\n        for ing in l[i]:\n            if f[ing] == 0:\n                res += 1\n            f[ing] += 1\n    if res != k:\n        print('sad')\n    else:\n        for i in range(n):\n            flag = True\n            for ing in l[i]:\n                if f[ing] == 1:\n                    flag = False\n                    break\n            if flag:\n                break\n        if flag:\n            print('some')\n        else:\n            print('all')", "for _ in range(int(input())):\n    island = []\n    (n, k) = map(int, input().split())\n    for i in range(n):\n        l = [int(i) for i in input().split()]\n        l = l[1:]\n        island.append(l)\n    cnt = [0] * (k + 1)\n    for i in range(n):\n        for indigrient in island[i]:\n            cnt[indigrient] += 1\n    f = 1\n    for i in range(1, k + 1):\n        if cnt[i] == 0:\n            f = 0\n            break\n    if not f:\n        print('sad')\n        continue\n    f1 = 0\n    for i in range(n):\n        f2 = 1\n        for j in island[i]:\n            if cnt[j] == 1:\n                f2 = 0\n        if f2:\n            f1 = 1\n            break\n    if f1:\n        print('some')\n    else:\n        print('all')", "for _ in range(int(input())):\n    island = []\n    (n, k) = map(int, input().split())\n    for i in range(n):\n        l = [int(i) for i in input().split()]\n        l = l[1:]\n        island.append(l)\n    cnt = [0] * (k + 1)\n    for i in range(n):\n        for indigrient in island[i]:\n            cnt[indigrient] += 1\n    f = 1\n    for i in range(1, k + 1):\n        if cnt[i] == 0:\n            f = 0\n            break\n    if not f:\n        print('sad')\n        continue\n    f1 = 0\n    for i in range(n):\n        f2 = 1\n        for j in island[i]:\n            if cnt[j] == 1:\n                f2 = 0\n        if f2:\n            f1 = 1\n            break\n    if f1:\n        print('some')\n    else:\n        print('all')", "for q in range(int(input())):\n    (n, k) = map(int, input().split())\n    test = []\n    z = []\n    f = 0\n    for i in range(n):\n        l = [int(i) for i in input().split()]\n        l = l[1:]\n        z.append(l)\n    c = [0] * (k + 1)\n    for i in range(n):\n        for j in z[i]:\n            c[j] += 1\n    for i in range(1, k + 1):\n        if c[i] == 0:\n            print('sad')\n            f = 1\n            break\n    if f == 1:\n        continue\n    for i in range(n):\n        cnt = 0\n        for j in z[i]:\n            if c[j] != 1:\n                cnt += 1\n        if cnt == len(z[i]):\n            print('some')\n            break\n    else:\n        print('all')", "for q in range(int(input())):\n    (n, k) = map(int, input().split())\n    test = []\n    z = []\n    f = 0\n    for i in range(n):\n        l = [int(i) for i in input().split()]\n        l = l[1:]\n        z.append(l)\n    c = [0] * (k + 1)\n    for i in range(n):\n        for j in z[i]:\n            c[j] += 1\n    for i in range(1, k + 1):\n        if c[i] == 0:\n            print('sad')\n            f = 1\n            break\n    if f == 1:\n        continue\n    for i in range(n):\n        cnt = 0\n        for j in z[i]:\n            if c[j] != 1:\n                cnt += 1\n        if cnt == len(z[i]):\n            print('some')\n            break\n    else:\n        print('all')", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    array = []\n    tot = []\n    for _ in range(n):\n        temp = list(map(int, input().split()))\n        aa = temp[0]\n        del temp[0]\n        temp.sort()\n        temp.insert(0, aa)\n        array.append(temp)\n    dic = {}\n    array.sort(reverse=True)\n    for i in array:\n        del i[0]\n    for i in range(1, k + 1):\n        dic[i] = False\n    count = 0\n    for i in array:\n        count += 1\n        for j in i:\n            if dic[j] == True:\n                pass\n            else:\n                tot.append(j)\n                dic[j] = True\n        if len(tot) == k:\n            break\n    if len(tot) != k:\n        print('sad')\n    elif count != n:\n        print('some')\n    else:\n        print('all')", "for q in range(int(input())):\n    (n, k) = map(int, input().split())\n    test = []\n    z = []\n    f = 0\n    for i in range(n):\n        l = [int(i) for i in input().split()]\n        l = l[1:]\n        z.append(l)\n    c = [0] * (k + 1)\n    for i in range(n):\n        for j in z[i]:\n            c[j] += 1\n    for i in range(1, k + 1):\n        if c[i] == 0:\n            print('sad')\n            f = 1\n            break\n    if f == 1:\n        continue\n    for i in range(n):\n        cnt = 0\n        for j in z[i]:\n            if c[j] != 1:\n                cnt += 1\n        if cnt == len(z[i]):\n            print('some')\n            break\n    else:\n        print('all')", "for _ in range(int(input())):\n    island = []\n    (n, k) = map(int, input().split())\n    for i in range(n):\n        l = [int(i) for i in input().split()]\n        l = l[1:]\n        island.append(l)\n    cnt = [0] * (k + 1)\n    for i in range(n):\n        for indigrient in island[i]:\n            cnt[indigrient] += 1\n    f = 1\n    for i in range(1, k + 1):\n        if cnt[i] == 0:\n            f = 0\n            break\n    if not f:\n        print('sad')\n        continue\n    f1 = 0\n    for i in range(n):\n        f2 = 1\n        for j in island[i]:\n            if cnt[j] == 1:\n                f2 = 0\n        if f2:\n            f1 = 1\n            break\n    if f1:\n        print('some')\n    else:\n        print('all')", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = set()\n    l = set()\n    cnt = 0\n    for j in range(n):\n        p = tuple(map(int, input().split()))\n        l.add(p)\n    l = list(l)\n    l.sort(reverse=True)\n    f = 0\n    for j in range(len(l)):\n        x = len(s)\n        for p in range(1, l[j][0] + 1):\n            s.add(l[j][p])\n            y = len(s)\n            if y == k:\n                f = 1\n                break\n        if f == 1:\n            break\n    if len(s) < k:\n        print('sad')\n    elif f == 1 and j < n - 1:\n        print('some')\n    else:\n        print('all')", "for _ in range(int(input())):\n    (islands, collects) = map(int, input().split())\n    data = [0] * collects\n    idata = []\n    for i in range(islands):\n        arr = list(map(int, input().split()))\n        idata.append(arr[1:])\n    for i in range(islands):\n        for item in idata[i]:\n            data[item - 1] += 1\n    if 0 in data:\n        print('sad')\n        continue\n    skip = False\n    for i in range(islands):\n        need = False\n        for j in idata[i]:\n            if data[j - 1] == 1:\n                need = True\n        if not need:\n            skip = True\n            break\n    if skip:\n        print('some')\n    else:\n        print('all')", "def main():\n    from sys import stdin, stdout\n    t = int(stdin.readline())\n    for i in range(t):\n        (islands, ingredients) = map(int, stdin.readline().split())\n        test = [0] * ingredients\n        zero = 0\n        skip_this = False\n        islands_ingredients = [[] for x in range(islands)]\n        for j in range(islands):\n            islands_ingredients[j] = list(map(int, stdin.readline().split()))[1:]\n        for j in range(islands):\n            for k in islands_ingredients[j]:\n                test[k - 1] += 1\n        for j in test:\n            if j == 0:\n                zero += 1\n        if zero:\n            stdout.write('sad\\n')\n        else:\n            for j in range(islands):\n                not_necessary = True\n                for k in islands_ingredients[j]:\n                    if test[k - 1] == 1:\n                        not_necessary = False\n                if not_necessary:\n                    skip_this = True\n                    break\n            if skip_this:\n                stdout.write('some\\n')\n            else:\n                stdout.write('all\\n')\nmain()", "t = int(input())\nfor i in range(t):\n    (islands, ingredients) = map(int, input().split())\n    test = [0] * ingredients\n    zero = 0\n    skip_this = False\n    islands_ingredients = [[] for x in range(islands)]\n    for j in range(islands):\n        islands_ingredients[j] = list(map(int, input().split()))[1:]\n    for j in range(islands):\n        for k in islands_ingredients[j]:\n            test[k - 1] += 1\n    for j in test:\n        if j == 0:\n            zero += 1\n    if zero:\n        print('sad')\n    else:\n        for j in range(islands):\n            not_necessary = True\n            for k in islands_ingredients[j]:\n                if test[k - 1] == 1:\n                    not_necessary = False\n            if not_necessary:\n                skip_this = True\n                break\n        if skip_this:\n            print('some')\n        else:\n            print('all')", "def solve():\n    T = int(input())\n    for t in range(T):\n        (N, K) = input().split(' ')\n        N = int(N)\n        K = int(K)\n        ing_count = [0 for i in range(K)]\n        ing_list = []\n        for n in range(N):\n            ing_in_island = input().split(' ')\n            no_ing = int(ing_in_island[0])\n            ing_list.append(ing_in_island[1:])\n            for i in range(no_ing):\n                ing_count[int(ing_in_island[i + 1]) - 1] += 1\n        sad = 0\n        for k in range(K):\n            if ing_count[k] == 0:\n                sad = 1\n                break\n        if sad == 1:\n            print('sad')\n            continue\n        all_islands = True\n        for one_list in ing_list:\n            island_needed_for = 0\n            for ing in one_list:\n                if ing_count[int(ing) - 1] == 1:\n                    island_needed_for += 1\n            if island_needed_for == 0:\n                all_islands = False\n                break\n        if all_islands:\n            print('all')\n        else:\n            print('some')\nsolve()", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    it = []\n    occ = [0] * (k + 1)\n    end = False\n    res = ''\n    for i in range(n):\n        items = [int(x) for x in input().split()]\n        it.append(items)\n        for ii in range(1, len(items)):\n            occ[items[ii]] += 1\n    for i in range(1, len(occ)):\n        if occ[i] == 0:\n            end = True\n    visit_all = True\n    for i in range(n):\n        city_not_needed = True\n        for j in range(1, len(it[i])):\n            if occ[it[i][j]] == 1:\n                city_not_needed = False\n        if city_not_needed == True:\n            visit_all = False\n    if end == True:\n        print('sad')\n    elif visit_all == False:\n        print('some')\n    else:\n        print('all')", "t = int(input().strip())\nfor a0 in range(t):\n    (n, k) = [int(x) for x in input().strip().split()]\n    occurence = [0] * (k + 1)\n    island_items = []\n    for a1 in range(n):\n        items = [int(x) for x in input().strip().split()]\n        island_items.append(items)\n        for i in range(1, len(items)):\n            occurence[items[i]] += 1\n    possible_to_fix = True\n    for i in range(1, k + 1):\n        if occurence[i] == 0:\n            possible_to_fix = False\n    need_to_visit_all = True\n    for i in range(n):\n        can_complete_without_island = True\n        for j in range(1, len(island_items[i])):\n            item = island_items[i][j]\n            if occurence[item] == 1:\n                can_complete_without_island = False\n        if can_complete_without_island:\n            need_to_visit_all = False\n    if possible_to_fix == False:\n        print('sad')\n    elif need_to_visit_all == False:\n        print('some')\n    else:\n        print('all')", "def main():\n    t = int(input())\n    for _ in range(t):\n        (n, k) = [int(i) for i in input().split()]\n        k = set(range(1, k + 1))\n        islands = []\n        for i in range(n):\n            islands.append({int(i) for i in input().split()[1:]})\n        islands.sort(key=lambda x: len(x), reverse=True)\n        temp = set()\n        considered = 0\n        for i in islands:\n            if i - temp:\n                considered += 1\n                temp |= i\n        if temp != k:\n            print('sad')\n        elif considered < n:\n            print('some')\n        elif considered == n:\n            print('all')\nmain()", "T = int(input())\nfor t in range(1, T + 1):\n    (N, K) = [int(i) for i in input().strip().split(' ')]\n    ings = [0 for i in range(K)]\n    is_ings = [[] for i in range(N)]\n    for is_n in range(N):\n        is_ings[is_n].extend([int(i) - 1 for i in input().strip().split(' ')])\n        is_ings[is_n].pop(0)\n        for is_ing in is_ings[is_n]:\n            ings[is_ing] += 1\n    if 0 in ings:\n        print('sad')\n    else:\n        for is_n in range(N):\n            good = True\n            for is_ing in is_ings[is_n]:\n                if ings[is_ing] < 2:\n                    good = False\n            if good:\n                print('some')\n                break\n        if not good:\n            print('all')", "n = int(input())\nwhile n:\n    (islands, ingredients) = map(int, input().split())\n    some = 0\n    foundIngredients = [x for x in range(1, ingredients + 1)]\n    while islands:\n        caught = 0\n        currentIngredients = []\n        currentIngredients = list(map(int, input().split()))\n        for x in range(1, currentIngredients[0] + 1):\n            if foundIngredients[currentIngredients[x] - 1] != 0:\n                foundIngredients[currentIngredients[x] - 1] = 0\n            else:\n                caught += 1\n        if caught == currentIngredients[0]:\n            some = 1\n        islands -= 1\n    if not all((x == 0 for x in foundIngredients)):\n        print('sad')\n    elif all((x == 0 for x in foundIngredients)) and some == 0:\n        print('all')\n    elif all((x == 0 for x in foundIngredients)) and some == 1:\n        print('some')\n    n -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = set()\n    flag = False\n    for i in range(n):\n        s.update(input().split()[1:])\n        if i < n - 1 and s.__len__() == k:\n            flag = True\n    if flag:\n        print('some')\n    elif s.__len__() == k:\n        print('all')\n    else:\n        print('sad')", "for _ in range(int(input())):\n    a = input().split()\n    (n, k) = [int(a[0]), int(a[1])]\n    answer = set()\n    cer = 0\n    po = 0\n    for i in range(n):\n        box = set(input().split())\n        if cer != 1:\n            answer.update(box)\n        if len(answer) == k and i + 1 != n:\n            cer = 1\n        for lk in range(2):\n            po += 1\n    for lk in range(2):\n        po += 1\n    for de in range(2):\n        if de != 0:\n            po += 1\n    l = len(answer)\n    if cer == 1 and l == k:\n        print('some')\n    elif l == k:\n        print('all')\n    elif l != k:\n        print('sad')", "t = int(input())\nfor i in range(t):\n    (n, k) = input().split()\n    st = set()\n    s = set()\n    cnt = 0\n    arr = [list() for p in range(int(k))]\n    for j in range(int(n)):\n        l = [int(x) for x in input().split()]\n        for p in range(1, l[0] + 1):\n            st.add((j, l[p]))\n            if len(arr[l[p] - 1]) == 0:\n                cnt = cnt + 1\n            arr[l[p] - 1].append(j)\n    if cnt != int(k):\n        print('sad')\n    else:\n        for j in range(int(k)):\n            if len(arr[j]) == 1:\n                s.add(arr[j][0])\n        c = 0\n        for x in range(int(n)):\n            if x not in s:\n                st1 = set()\n                for p in range(1, int(k) + 1):\n                    st1.add((x, p))\n                st2 = st.difference(st1)\n                cnt = 0\n                arr1 = [0 for p in range(int(k))]\n                for p in st2:\n                    if arr1[p[1] - 1] == 0:\n                        arr1[p[1] - 1] = 1\n                        cnt = cnt + 1\n                if cnt == int(k):\n                    print('some')\n                    c = 1\n                    break\n        if c == 0:\n            print('all')", "for testCases in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = set()\n    some = False\n    for islands in range(n):\n        s.update(input().split()[1:])\n        if islands < n - 1 and s.__len__() == k:\n            some = True\n    if some:\n        print('some')\n    elif s.__len__() == k:\n        print('all')\n    else:\n        print('sad')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().strip().split())\n    a = [0] * k\n    flag1 = 1\n    flag2 = 1\n    for i in range(0, n):\n        flag2 = 1\n        b = list(map(int, input().strip().split()))\n        num = b[0]\n        for j in range(1, len(b)):\n            if a[b[j] - 1] == 0:\n                flag2 = 0\n            a[b[j] - 1] = 1\n    for i in range(0, k):\n        if a[i] == 0:\n            flag1 = 0\n            break\n    if flag1 == 0:\n        print('sad')\n    elif flag2 == 0:\n        print('all')\n    else:\n        print('some')", "T = int(input())\nfor t in range(T):\n    (N, k) = list(map(int, input().split()))\n    recipe = set([])\n    for n in range(N - 1):\n        ingredients = input().split()\n        for i in range(1, len(ingredients)):\n            if ingredients[i] not in recipe:\n                recipe.add(ingredients[i])\n    ingredients = input().split()\n    if len(recipe) == k or len(ingredients) - 1 == k:\n        print('some')\n    else:\n        for i in range(1, len(ingredients)):\n            if ingredients[i] not in recipe:\n                recipe.add(ingredients[i])\n        if len(recipe) == k:\n            print('all')\n        else:\n            print('sad')", "for i in range(int(input())):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    h = []\n    c = 0\n    for x in range(k):\n        h.append(0)\n    s = ''\n    for j in range(n):\n        l = input().split()\n        for m in range(1, len(l)):\n            if h[int(l[m]) - 1] == 0:\n                h[int(l[m]) - 1] = 1\n                c = c + 1\n            if s == '':\n                if k == c:\n                    if j == n - 1:\n                        s = 'all'\n                    else:\n                        s = 'some'\n    if s == '':\n        if k != c:\n            s = 'sad'\n    print(s)", "for _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    sumi = 0\n    d = {}\n    island = 1\n    for j in range(1, n + 1):\n        for i in [int(w) for w in input().split()][1:]:\n            if sumi == k:\n                continue\n            if d.get(i, -1) == -1:\n                sumi += 1\n                d[i] = 1\n            island = j\n    if sumi < k:\n        print('sad')\n    elif island < n:\n        print('some')\n    else:\n        print('all')", "t = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().strip().split()))\n    a = []\n    d = {}\n    for i in range(1, k + 1):\n        d[i] = 0\n    for i in range(n):\n        p = list(map(int, input().strip().split()))[1:]\n        for j in p:\n            d[j] += 1\n        a.append(p)\n    flag = 0\n    for i in range(1, k + 1):\n        if d[i] == 0:\n            flag = 1\n            break\n    if flag == 0:\n        for i in range(n):\n            flag2 = 0\n            for j in a[i]:\n                if d[j] == 1:\n                    flag2 = 1\n                    break\n            if flag2 == 0:\n                flag = 2\n                break\n    if flag == 0:\n        print('all')\n    elif flag == 1:\n        print('sad')\n    else:\n        print('some')", "for I in range(int(input())):\n    (n, k) = map(int, input().split())\n    b = []\n    for i in range(n):\n        x = list(map(int, input().split()))\n        for j in x:\n            b.append(j)\n    if not len(set(b)) == k:\n        print('sad')\n    elif len(set(b[0:len(b) - len(x)])) == k:\n        print('some')\n    else:\n        print('all')", "t = int(input())\nwhile t:\n    t -= 1\n    out = 'all'\n    (n, k) = map(int, input().split())\n    ps = []\n    p = [0 for x in range(k + 1)]\n    for x in range(n):\n        ps.append(list(map(int, input().split())))\n    sorted(ps, key=lambda x: x[0], reverse=True)\n    all_exist = False\n    for x in ps:\n        some_unique = False\n        for pi in x[1:]:\n            p[pi] += 1\n            if 1 == p[pi]:\n                some_unique = True\n        if not some_unique:\n            all_exist = True\n    if 0 in p[1:]:\n        print('sad')\n    elif all_exist:\n        print('some')\n    else:\n        print('all')", "t = int(input())\nfor i in range(t):\n    (n, k) = [int(j) for j in input().split()]\n    b = set()\n    flag = 0\n    cout = 0\n    for m in range(n):\n        a = [int(j) for j in input().split()]\n        a1 = a[1:]\n        cout += 1\n        if flag == 1:\n            continue\n        b.update(a1)\n        if a[0] == k:\n            flag = 1\n            print('some')\n        elif len(b) == k:\n            flag = 1\n            if cout == n:\n                print('all')\n            else:\n                print('some')\n    if flag == 0:\n        print('sad')", "t = int(input())\nfor i in range(t):\n    (n, k) = input().strip().split(' ')\n    (n, k) = (int(n), int(k))\n    a = list(range(1, k + 1))\n    e = []\n    flag = 'sad'\n    for j in range(n - 1):\n        for x in input().strip().split(' '):\n            e.append(int(x))\n    e1 = [x for x in e]\n    for x in input().strip().split(' '):\n        e.append(int(x))\n    if set(a) == set(e):\n        if set(e) == set(e1):\n            flag = 'some'\n        if set(e) != set(e1):\n            flag = 'all'\n    print(flag)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    required_ingredients = set([i + 1 for i in range(k)])\n    l = -1\n    found = False\n    while n > 0:\n        n -= 1\n        temp = list(map(int, input().split()))\n        temp.remove(temp[0])\n        for i in temp:\n            if i in required_ingredients:\n                required_ingredients.remove(i)\n        if len(required_ingredients) == 0 and (not found):\n            found = True\n            l = n\n    if found and l is 0:\n        print('all')\n    elif found and l > 0:\n        print('some')\n    else:\n        print('sad')", "for i in range(int(input())):\n    a = [int(j) for j in input().split()]\n    b = []\n    c = []\n    co = 0\n    e = [0 for j in range(a[1])]\n    for j in range(a[0]):\n        tmp = input().split()\n        b.append(int(tmp[0]))\n        temp = []\n        for k in tmp[1:]:\n            temp.append(int(k))\n            e[int(k) - 1] += 1\n        c.append(temp)\n    try:\n        e.index(0)\n        print('sad')\n        continue\n    except:\n        pass\n    for j in c:\n        flag = 0\n        for k in j:\n            if e[k - 1] == 1:\n                flag = 1\n        if flag == 1:\n            co += 1\n    if co == a[0]:\n        print('all')\n    else:\n        print('some')", "t = int(input())\nfor i in range(t):\n    (n, k) = [int(j) for j in input().split()]\n    b = set()\n    flag = 0\n    cout = 0\n    for m in range(n):\n        a = [int(j) for j in input().split()]\n        a1 = a[1:]\n        cout += 1\n        if flag == 1:\n            continue\n        b.update(a1)\n        if len(b) == k:\n            flag = 1\n            if cout == n:\n                print('all')\n            else:\n                print('some')\n    if flag == 0:\n        print('sad')", "k = int(input())\nfor i in range(k):\n    tw = []\n    t = list(map(int, input().split()))\n    for lo in range(0, t[1] + 1):\n        tw.append('false')\n    tw[0] = 'true'\n    f = []\n    wq = 0\n    e = 'sad'\n    for j in range(t[0]):\n        q = list(map(int, input().split()))\n        if j < t[0] - 1:\n            for tr in q:\n                tw[tr] = 'true'\n            if j == t[0] - 2:\n                wq = tw.count('false')\n                if wq == 0:\n                    e = 'some'\n        elif j == t[0] - 1:\n            for tr in q:\n                tw[tr] = 'true'\n            if j == t[0] - 1 and e != 'some':\n                wq = tw.count('false')\n                if wq == 0:\n                    e = 'all'\n    print(e)", "t = int(input())\nfor e in range(t):\n    (n, k) = map(int, input().split())\n    (a, b, s) = ([], [], set())\n    flag = False\n    for ee in range(n):\n        y = []\n        y = list(map(int, input().split()))\n        b.append(y[0])\n        y.pop(0)\n        a.append(y)\n        if len(y) == k:\n            flag = True\n        s |= set(y)\n    if len(s) != k:\n        print('sad')\n        continue\n    if flag:\n        print('some')\n        continue\n    l = set()\n    for i in range(len(a)):\n        for j in a[i]:\n            l.add(j)\n            if len(l) == k:\n                break\n        if len(l) == k:\n            if i < len(a) - 1:\n                flag = True\n            break\n    if flag:\n        print('some')\n    else:\n        print('all')", "def check1(x, y):\n    j = 0\n    for i in range(len(y)):\n        while x[j] != y[i]:\n            j += 1\n            if j == len(x) or x[j] > y[i]:\n                return False\n        j += 1\n    return True\n\ndef check2(x, y):\n    for i in y:\n        if i not in x:\n            return False\n    return True\n\ndef check3(x, y):\n    s = set(x)\n    f = len(s)\n    for i in y:\n        s.add(i)\n    return f == len(s)\nt = int(input())\nfor e in range(t):\n    (n, k) = map(int, input().split())\n    (a, b, s) = ([], [], set())\n    flag = False\n    for ee in range(n):\n        y = []\n        y = list(map(int, input().split()))\n        b.append(y[0])\n        y.pop(0)\n        a.append(y)\n        if len(y) == k:\n            flag = True\n        s |= set(y)\n    if len(s) != k:\n        print('sad')\n        continue\n    if flag:\n        print('some')\n        continue\n    l = set()\n    for i in range(len(a)):\n        for j in a[i]:\n            l.add(j)\n            if len(l) == k:\n                break\n        if len(l) == k:\n            if i < len(a) - 1:\n                flag = True\n            break\n    if flag:\n        print('some')\n    else:\n        print('all')", "t = int(input())\nfor r in range(t):\n    (n, k) = map(int, input().strip().split(' '))\n    kset = []\n    sm = [0] * k\n    for i in range(n):\n        it = list(map(int, input().split(' ')))\n        ks = it[0]\n        sp = it[1:]\n        rset = set()\n        for j in range(ks):\n            rset.add(sp[j] - 1)\n            sm[sp[j] - 1] += 1\n        kset.append(rset)\n    ans = min(sm)\n    if ans == 0:\n        print('sad')\n    elif ans > 1:\n        print('some')\n    else:\n        onc = []\n        for i in range(k):\n            if sm[i] == 1:\n                onc.append(i)\n        if len(onc) == k:\n            print('all')\n        else:\n            flag = False\n            for i in range(n):\n                f2 = True\n                for j in onc:\n                    if kset[i].__contains__(j):\n                        f2 = False\n                        break\n                if f2 == True:\n                    flag = True\n                    break\n            if flag:\n                print('some')\n            else:\n                print('all')", "for _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    a = set()\n    q = set(range(1, k + 1))\n    c = z = 0\n    global r\n    r = 1\n    for _1 in range(n):\n        a.update([int(i) for i in input().split()][1:])\n        z += 1\n        c += 1\n        if q.issubset(a):\n            if c < n:\n                print('some')\n                for i in range(n - z):\n                    input()\n            elif c == n:\n                print('all')\n                r = 0\n            break\n    if c == n and r:\n        print('sad')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    dd = dict()\n    inn = []\n    for i in range(n):\n        a = list(map(int, input().split()))[1:]\n        inn.append(a)\n        for ing in a:\n            try:\n                dd[ing].append(i)\n            except KeyError:\n                dd[ing] = [i]\n    tot_ing = set(dd)\n    if len(tot_ing) != k:\n        print('sad')\n    else:\n        al = True\n        for i in inn:\n            if all((len(dd[k]) > 1 for k in i)):\n                al = False\n                break\n        if al:\n            print('all')\n        else:\n            print('some')", "t = int(input())\nfor i in range(t):\n    p = 0\n    count = 0\n    a = []\n    (n, k) = map(int, input().split(' '))\n    c = [0] * (k + 1)\n    for j in range(n):\n        b = list(map(int, input().split(' ')))\n        a.append(b)\n    a.sort(key=len)\n    for I in range(len(a) - 1, -1, -1):\n        q = len(a[I])\n        for J in range(1, q):\n            if c[a[I][J]] == 0:\n                c[a[I][J]] += 1\n                count += 1\n            if count == k:\n                break\n        p += 1\n        if count == k:\n            break\n    if count == k and p == n:\n        print('all')\n    elif count == k and p < n:\n        print('some')\n    elif count != k:\n        print('sad')", "def solve():\n    nk = input().split()\n    n = int(nk[0])\n    k = int(nk[1])\n    cnt = [0]\n    size = [0]\n    sets = [[]]\n    for i in range(100005):\n        cnt += [0]\n        size += [0]\n        sets += [[0]]\n    for i in range(1, n + 1):\n        qq = input().split()\n        size[i] = int(qq[0])\n        for x in range(1, size[i] + 1):\n            tmp = int(qq[x])\n            cnt[tmp] += 1\n            sets[i] += [tmp]\n    for x in range(1, k + 1):\n        if cnt[x] == 0:\n            print('sad')\n            return\n    for x in range(1, n + 1):\n        ok = True\n        for z in range(1, size[x] + 1):\n            if cnt[sets[x][z]] == 1:\n                ok = False\n                break\n        if ok:\n            print('some')\n            return\n    print('all')\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split(' '))\n    arr_n = []\n    arr_k = [0] * k\n    for i in range(n):\n        arr_n.append([int(x) for x in input().split(' ')])\n        for j in range(1, arr_n[i][0] + 1):\n            arr_k[arr_n[i][j] - 1] += 1\n    flag = 0\n    if 0 in arr_k:\n        print('sad')\n    else:\n        for i in range(n):\n            count = 0\n            for j in range(1, arr_n[i][0] + 1):\n                if arr_k[arr_n[i][j] - 1] > 1:\n                    count += 1\n            if count == arr_n[i][0]:\n                flag = 1\n                break\n        if flag == 1:\n            print('some')\n        else:\n            print('all')", "class GetOutOfLoop(Exception):\n    pass\nt = int(input().strip())\nwhile t:\n    t -= 1\n    inputs = list(map(int, input().strip().split()))\n    n = inputs[0]\n    k = inputs[1]\n    islands = []\n    total = {}\n    try:\n        for i in range(n):\n            inputs = list(map(int, input().strip().split()))\n            if inputs[0] == k:\n                if n == 1:\n                    print('all')\n                else:\n                    print('some')\n                for j in range(n - 1 - i):\n                    input()\n                raise GetOutOfLoop\n            island = {}\n            for inp in inputs[1:]:\n                if island.get(inp):\n                    island[inp] += 1\n                    total[inp] += 1\n                else:\n                    island[inp] = 1\n                    if total.get(inp):\n                        total[inp] += 1\n                    else:\n                        total[inp] = 1\n            islands.append(island)\n        if len(total.keys()) < k:\n            print('sad')\n            continue\n        for island in islands:\n            is_extra = True\n            for inp in island:\n                if total[inp] <= island[inp]:\n                    is_extra = False\n                    break\n            if is_extra:\n                print('some')\n                raise GetOutOfLoop\n        print('all')\n    except GetOutOfLoop:\n        continue", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    count = 0\n    set1 = set()\n    flag2 = False\n    for i in range(n):\n        count += 1\n        l = input()\n        l = [int(i) for i in l.split()]\n        num_of_ing = l[0]\n        for key in range(1, num_of_ing + 1):\n            set1.add(l[key])\n        if len(set1) == k:\n            flag2 = True\n            break\n    for i in range(n - count):\n        garbage = input()\n    if flag2 == True:\n        if count == n:\n            print('all')\n        else:\n            print('some')\n    else:\n        print('sad')", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    count = 0\n    set1 = set()\n    flag2 = False\n    for i in range(n):\n        count += 1\n        l = input()\n        l = [int(i) for i in l.split()]\n        num_of_ing = l[0]\n        for key in range(1, num_of_ing + 1):\n            set1.add(l[key])\n        if len(set1) == k:\n            flag2 = True\n            break\n    for i in range(n - count):\n        garbage = input()\n    if flag2 == True:\n        if count == n:\n            print('all')\n        else:\n            print('some')\n    else:\n        print('sad')", "import sys\nt = int(input())\nfor ti in range(t):\n    ans = ''\n    (n, k) = map(int, input().split())\n    for_set = []\n    vp = [[-1, -1]] * (k + 1)\n    for i in range(n):\n        ls = list(map(int, input().split()))\n        for j in range(1, ls[0] + 1):\n            temp = [ls[0], i + 1]\n            if vp[ls[j]][0] < temp[0]:\n                vp[ls[j]] = temp\n    for i in range(1, k + 1):\n        if vp[i] == [-1, -1]:\n            ans = 'sad'\n            break\n        else:\n            for_set.append(vp[i][1])\n    if ans == 'sad':\n        print(ans)\n    elif len(set(for_set)) == n:\n        print('all')\n    else:\n        print('some')", "import sys\nt = int(input())\nfor ti in range(t):\n    ans = ''\n    (n, k) = map(int, input().split())\n    for_set = []\n    vp = [[-1, -1]] * (k + 1)\n    for i in range(n):\n        ls = list(map(int, input().split()))\n        for j in range(1, ls[0] + 1):\n            temp = [ls[0], i + 1]\n            if vp[ls[j]][0] < temp[0]:\n                vp[ls[j]] = temp\n    for i in range(1, k + 1):\n        if vp[i] == [-1, -1]:\n            ans = 'sad'\n            break\n        else:\n            for_set.append(vp[i][1])\n    if ans == 'sad':\n        print(ans)\n    elif len(set(for_set)) == n:\n        print('all')\n    else:\n        print('some')", "t = int(input())\nfor m in range(t):\n    a = input().split()\n    flag = False\n    pk = set([])\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    for j in range(a[0]):\n        b = input().split()\n        gs = len(pk)\n        for z in range(1, len(b)):\n            pk.add(b[z])\n        if gs == len(pk):\n            flag = True\n    if len(pk) != a[1]:\n        print('sad')\n    elif flag == True:\n        print('some')\n    else:\n        print('all')", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    flag = 0\n    m = [0] * (k + 1)\n    m[0] = 1\n    co = 0\n    while n:\n        n -= 1\n        l = list(map(int, input().split()))\n        if l[0] == k:\n            flag = 1\n        if flag != 1:\n            i = 1\n            while i < l[0] + 1:\n                if m[l[i]] == 0:\n                    m[l[i]] = 1\n                    co += 1\n                i += 1\n            if n != 0 and co == k:\n                flag = 1\n    if flag == 1:\n        print('some')\n    elif 0 in m:\n        print('sad')\n    else:\n        print('all')", "t = int(input())\nfor m in range(t):\n    l = input()\n    flag = False\n    pk = set([])\n    a = l.split()\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    for j in range(a[0]):\n        l = input()\n        b = l.split()\n        for i in range(0, len(b)):\n            b[i] = int(b[i])\n        gs = len(pk)\n        for z in range(1, len(b)):\n            pk.add(b[z])\n        if gs == len(pk):\n            flag = True\n        for i in b:\n            del i\n    if len(pk) != a[1]:\n        print('sad')\n    elif flag == True:\n        print('some')\n    else:\n        print('all')\n    for i in a:\n        del i", "T = int(input())\nfor t in range(T):\n    (N, K) = [int(num) for num in input().split()]\n    allIsles = set()\n    someIsles = [set() for n in range(N)]\n    possSome = False\n    allIsles = {}\n    for n in range(N):\n        (P, *ingrds) = [int(num) for num in input().split()]\n        numSame = 0\n        for ing in ingrds:\n            if ing in allIsles:\n                numSame += 1\n            else:\n                allIsles[ing] = True\n        if numSame == P:\n            possSome = True\n        if len(allIsles) == K:\n            if n < N - 1:\n                possSome = True\n                for n in range(n + 1, N):\n                    input()\n            break\n    if len(allIsles) == K:\n        if possSome:\n            print('some')\n        else:\n            print('all')\n    else:\n        print('sad')", "T = int(input())\nfor t in range(T):\n    (N, K) = [int(num) for num in input().split()]\n    allIsles = set()\n    someIsles = [set() for n in range(N)]\n    possSome = False\n    allIsles = {}\n    for n in range(N):\n        (P, *ingrds) = [int(num) for num in input().split()]\n        numSame = 0\n        for ing in ingrds:\n            if ing in allIsles:\n                numSame += 1\n            else:\n                allIsles[ing] = True\n        if numSame == P:\n            possSome = True\n        if len(allIsles) == K:\n            if n < N - 1:\n                possSome = True\n                for n in range(n + 1, N):\n                    input()\n            break\n    if len(allIsles) == K:\n        if possSome:\n            print('some')\n        else:\n            print('all')\n    else:\n        print('sad')", "T = int(input())\nwhile T > 0:\n    (N, K) = map(int, input().split())\n    C = []\n    G = [0]\n    l = 0\n    c = 0\n    for i in range(1, K + 1):\n        w = 0\n        G.append(w)\n    for i in range(0, N):\n        e = 0\n        c1 = input()\n        C = c1.split(' ')\n        p = int(C[0])\n        for j in range(1, p + 1):\n            s = int(C[j])\n            if G[s] == 0:\n                G[s] = 1\n                c = c + 1\n                e = 1\n        if e == 1:\n            l = l + 1\n    if l == N and c == K:\n        print('all')\n    if l < N and c == K:\n        print('some')\n    if c != K:\n        print('sad')\n    T = T - 1", "T = int(input())\nwhile T > 0:\n    (N, K) = map(int, input().split())\n    C = []\n    G = [0]\n    l = 0\n    c = 0\n    for i in range(1, K + 1):\n        w = 0\n        G.append(w)\n    for i in range(0, N):\n        e = 0\n        c1 = input()\n        C = c1.split(' ')\n        p = int(C[0])\n        for j in range(1, p + 1):\n            s = int(C[j])\n            if G[s] == 0:\n                G[s] = 1\n                c = c + 1\n                e = 1\n        if e == 1:\n            l = l + 1\n    if l == N and c == K:\n        print('all')\n    if l < N and c == K:\n        print('some')\n    if c != K:\n        print('sad')\n    T = T - 1", "from collections import defaultdict\ntestcases = int(input())\nwhile testcases != 0:\n    maps = defaultdict(int)\n    (n, k) = [int(x) for x in input().split()]\n    l = []\n    flag = 0\n    count = 0\n    for x in range(n):\n        now = input().split()\n        l = now[1:]\n        if flag == 0:\n            for a in l:\n                if maps[a] == 0:\n                    maps[a] = 1\n                    count += 1\n            if count == k and x == n - 1:\n                print('all')\n            elif count == k:\n                print('some')\n                flag = 1\n        else:\n            continue\n    if count != k:\n        print('sad')\n    testcases -= 1", "for a1 in range(int(input())):\n    (n, k) = [int(i) for i in input().split(' ')]\n    ans = set()\n    (flag, c) = (0, 0)\n    for i in range(n):\n        b = set(input().split())\n        if c != 1:\n            ans.update(b)\n        if len(ans) == k and i + 1 != n:\n            c = 1\n    l = len(ans)\n    if c == 1 and l == k:\n        print('some')\n    elif l == k:\n        print('all')\n    elif l != k:\n        print('sad')", "def main():\n    T = int(input())\n    results = [''] * T\n    for t in range(T):\n        sad = 1\n        (N, K) = input().split(' ')\n        case = [0] * int(K)\n        lastIslandVisted = 0\n        for n in range(int(N)):\n            P = input().split(' ')\n            P.pop(0)\n            P = list(map(int, P))\n            for i in P:\n                if case[i - 1] == 0:\n                    case[i - 1] = 1\n                    lastIslandVisted = n\n        for c in case:\n            if c == 0:\n                results[t] = 'sad'\n                sad = 0\n                break\n        if sad != 0:\n            if lastIslandVisted == int(N) - 1:\n                results[t] = 'all'\n            else:\n                results[t] = 'some'\n    for i in results:\n        print(i)\nmain()", "T = int(input())\nfor i in range(T):\n    line = input()\n    split = line.split(' ')\n    N = int(split[0])\n    K = int(split[1])\n    arrB = []\n    presence = {}\n    for j in range(N):\n        b = input().split()[1:]\n        for k in b:\n            if k in presence:\n                presence[k] += 1\n            else:\n                presence[k] = 1\n        arrB.append(b)\n    if len(presence) < K:\n        print('sad')\n        continue\n    printed = False\n    for j in range(N):\n        d = True\n        for k in arrB[j]:\n            if presence[k] == 1:\n                d = False\n                break\n        if d:\n            print('some')\n            printed = True\n            break\n    if not printed:\n        print('all')", "t = int(input())\nfor test in range(t):\n    skip = 0\n    (n, k) = map(int, input().split())\n    m = {}\n    his = []\n    for i in range(n):\n        lst = input().split()\n        p = lst[0]\n        ing = lst[1:]\n        ing = list(map(int, ing))\n        his.append(ing)\n        for j in ing:\n            try:\n                m[j] += 1\n            except:\n                m[j] = 1\n    for i in range(1, k + 1):\n        if not i in m or m[i] == 0:\n            print('sad')\n            skip = 1\n            break\n    if skip:\n        continue\n    for x in his:\n        flag = 1\n        for num in x:\n            if m[num] == 1:\n                flag = 0\n        if flag:\n            print('some')\n            skip = 1\n            break\n    if skip:\n        continue\n    print('all')", "T = int(input())\nfor testCaseID in range(T):\n    (N, K) = map(int, input().split())\n    islandList = []\n    seenCount = [0] * K\n    for islandID in range(N):\n        itemList = list(map(int, input().split()))\n        del itemList[0]\n        islandList.append(itemList)\n        for item in itemList:\n            seenCount[item - 1] += 1\n    isSad = 0 in seenCount\n    if isSad:\n        print('sad')\n    else:\n        isSome = False\n        for island in islandList:\n            canSkipIsland = True\n            for item in island:\n                if seenCount[item - 1] - 1 == 0:\n                    canSkipIsland = False\n                    break\n            if canSkipIsland:\n                isSome = True\n                break\n        if isSome:\n            print('some')\n        else:\n            print('all')", "import logging\nimport sys\n\ndef fnHasMissing(totIng):\n    for x in totIng:\n        if x == 0:\n            return True\n    return False\n\ndef fnIsRedundant(totIng, isleIng):\n    lTotIng = list(totIng)\n    logging.debug('Total Ingredients before = %s', lTotIng)\n    for x in range(1, len(isleIng)):\n        lTotIng[int(isleIng[x]) - 1] -= 1\n    logging.debug('Total Ingredients after = %s', lTotIng)\n    for x in lTotIng:\n        if x == 0:\n            return False\n    return True\nlogging.basicConfig(level=logging.ERROR)\ncases = int(input(''))\nlogging.debug('No. of test cases is %d', cases)\nfor x in range(0, cases):\n    line = input('')\n    islands = int(line.split()[0])\n    ingredients = int(line.split()[1])\n    logging.debug('Case #%d: Islands = %d, Ingredients = %d', x + 1, islands, ingredients)\n    totIng = []\n    for y in range(0, ingredients):\n        totIng.append(0)\n    isleIng = []\n    for y in range(0, islands):\n        line = input('')\n        isleIng.append(line.split())\n        logging.debug('Case #%d: Island #%d: Ingredients = %s', x + 1, y + 1, isleIng[y])\n        for z in range(1, len(isleIng[y])):\n            totIng[int(isleIng[y][z]) - 1] += 1\n        logging.debug('Case #%d: Island #%d: Total Ingredients = %s', x + 1, y + 1, totIng)\n    if fnHasMissing(totIng):\n        print('sad')\n    else:\n        redundantIsle = 0\n        for y in range(0, islands):\n            logging.debug('Case #%d: Test island: %d', x + 1, y + 1)\n            if fnIsRedundant(totIng, isleIng[y]):\n                redundantIsle += 1\n                break\n        if redundantIsle == 0:\n            print('all')\n        else:\n            print('some')", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = list(map(int, input().split()))\n    ing = {i: 0 for i in range(1, k + 1)}\n    islands = []\n    for i in range(n):\n        vals = list(map(int, input().split()))[1:]\n        islands.append(vals)\n        for val in vals:\n            ing[val] += 1\n    flag = False\n    for i in range(1, k + 1):\n        if ing[i] == 0:\n            print('sad')\n            flag = True\n            break\n    if flag:\n        continue\n    k = 0\n    for i in range(1, n + 1):\n        for j in islands[i - 1]:\n            if ing[j] == 1:\n                k += 1\n                break\n    if k == n:\n        print('all')\n    else:\n        print('some')", "from collections import Counter\nT = int(input())\nfor test in range(T):\n    (N, K) = map(int, input().split(' '))\n    islands = []\n    counter = Counter()\n    for i in range(N):\n        islands.append(list(map(int, input().split(' '))))\n        islands[i].pop(0)\n        for x in islands[i]:\n            counter[x] += 1\n    solution = 'all'\n    for e in range(1, K + 1):\n        if counter[e] == 0:\n            solution = 'sad'\n    if solution == 'all':\n        for island in islands:\n            valid = True\n            for x in island:\n                counter[x] -= 1\n                if counter[x] == 0:\n                    valid = False\n            for x in island:\n                counter[x] += 1\n            if valid:\n                solution = 'some'\n                break\n    print(solution)", "t = int(input())\nwhile t > 0:\n    a = input().split()\n    a = [int(i) for i in a]\n    n = a[0]\n    m = a[1]\n    temp = set()\n    flag = 0\n    cnt = 0\n    while n != 0:\n        b = input().split()\n        s = {int(i) for i in b[1:]}\n        x = len(temp)\n        temp |= s\n        cnt += 1\n        if len(temp) - x == 0 or (n != 1 and len(temp) == m):\n            flag = 1\n        n -= 1\n    if len(temp) != m:\n        print('sad')\n    elif flag == 1:\n        print('some')\n    else:\n        print('all')\n    t -= 1", "def main(args):\n    T = int(input())\n    while T:\n        T -= 1\n        (N, K) = list(map(int, input().split()))\n        print(calc(N, K))\n    return 0\n\ndef calc(N, K):\n    flag = 0\n    x = set()\n    for i in range(N - 1):\n        P = list(map(int, input().split()))\n        for s in P:\n            x.add(s)\n        if len(x) == K:\n            flag = 1\n    P = list(map(int, input().split()))\n    for s in P:\n        x.add(s)\n    if flag == 1:\n        return 'some'\n    elif len(x) == K:\n        return 'all'\n    else:\n        return 'sad'\nimport sys\nsys.exit(main(sys.argv))", "import heapq\ntc = int(input())\nfor etc in range(tc):\n    (n, k) = map(int, input().split())\n    used_food = [False for i in range(k + 1)]\n    input_q = []\n    final_q = []\n    used_food[0] = True\n    some = False\n    for i in range(n):\n        input_list = list(map(int, input().strip().split()))\n        count = input_list[0]\n        values = input_list[1:]\n        heapq.heappush(input_q, (count, values))\n    for i in range(n):\n        final_q.append(heapq.heappop(input_q))\n    for i in range(n):\n        current = final_q[n - i - 1]\n        some_temp = False\n        for item in current[1]:\n            if not used_food[item]:\n                some_temp = True\n                used_food[item] = True\n        if some_temp == False:\n            some = True\n    if False in used_food:\n        print('sad')\n    elif some:\n        print('some')\n    else:\n        print('all')", "def dol():\n    t = int(input())\n    for i in range(t):\n        (n, k) = input().split()\n        n = int(n)\n        k = int(k)\n        d = {}\n        covered_sofar = 0\n        skipped = 0\n        for j in range(n):\n            s = input().split()\n            if covered_sofar >= k:\n                skipped += 1\n                continue\n            if int(s[0]) == k:\n                if covered_sofar == 0:\n                    skipped += 1\n                    covered_sofar += k\n                    continue\n                else:\n                    covered_sofar += k\n                    continue\n            already_covered = True\n            for l in range(1, len(s)):\n                if s[l] not in d:\n                    d[s[l]] = 1\n                    covered_sofar += 1\n                    already_covered = False\n            if already_covered is True:\n                skipped += 1\n        if covered_sofar < k:\n            print('sad')\n        elif skipped == 0:\n            print('all')\n        else:\n            print('some')\ndol()", "t = int(input())\nfor test in range(t):\n    (n, k) = map(int, input().split())\n    l = [0] * k\n    extra = 0\n    for i in range(n):\n        isle = list(map(int, input().split()))\n        c = 0\n        for el in isle:\n            if l[el - 1] == 0:\n                l[el - 1] = 1\n                c += 1\n        extra = 1 if c == 0 else 0\n    if 0 in l:\n        print('sad')\n    elif extra:\n        print('some')\n    else:\n        print('all')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = set(range(1, k + 1))\n    label = 0\n    for i in range(n):\n        s = set(map(int, input().split()))\n        for j in s:\n            l.discard(j)\n        if l == set():\n            label = 1\n            x = i + 1\n            break\n    for j in range(i + 1, n):\n        input()\n    if label and x < n:\n        print('some')\n    elif label == 0:\n        print('sad')\n    else:\n        print('all')"]