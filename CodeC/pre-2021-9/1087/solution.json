["def LPS(s):\n    lps = [0 for i in range(len(s))]\n    for i in range(1, len(s)):\n        j = i - 1\n        while j >= 0 and s[lps[j]] != s[i]:\n            j = lps[j] - 1\n        if j >= 0:\n            lps[i] = lps[j] + 1\n    return lps\nN = int(input())\nA = input()\nB = input()\nlpsA = LPS(A)\na = 0\nb = 0\nshifts = 0\ncurShift = 0\nlongPref = 0\nwhile curShift < N:\n    while a < len(A) and b < len(B) and (A[a] == B[b]):\n        a += 1\n        b += 1\n    assert a < len(A) and b < len(B) or (a == len(A) and b == len(B))\n    if a > longPref:\n        shifts = curShift\n        longPref = a\n    if a == 0:\n        B += B[b]\n        curShift += 1\n        b += 1\n    elif a == len(A):\n        break\n    else:\n        B += B[b - a:b - lpsA[a - 1]]\n        curShift += a - lpsA[a - 1]\n        a = lpsA[a - 1]\nprint(shifts)", "No = int(input(''))\na = input('')\nb = input('')\nmax_count = 0\nmax_shift = 0\ni = 0\nwhile i < No:\n    count = 0\n    j = 0\n    while j < No and a[j] == b[(j + i) % No]:\n        count += 1\n        j += 1\n    if max_count < count:\n        max_count = count\n        max_shift = i\n    if j > 0:\n        i += count\n    else:\n        i += 1\nprint(max_shift)", "No = int(input(''))\na = input('')\nb = input('')\nmax_count = 0\nmax_shift = 0\ni = 0\nwhile i < No:\n    count = 0\n    j = 0\n    while j < No and a[j] == b[(j + i) % No]:\n        count += 1\n        j += 1\n    if max_count < count:\n        max_count = count\n        max_shift = i\n    if j > 0:\n        i += count\n    else:\n        i += 1\nprint(max_shift)", "def LPS(s):\n    lps = [0 for i in range(len(s))]\n    for i in range(1, len(s)):\n        j = i - 1\n        while j >= 0 and s[lps[j]] != s[i]:\n            j = lps[j] - 1\n        if j >= 0:\n            lps[i] = lps[j] + 1\n    return lps\nN = int(input())\nA = input()\nB = input()\nlpsA = LPS(A)\na = 0\nb = 0\nshifts = 0\ncurShift = 0\nlongPref = 0\nwhile curShift < N:\n    while a < len(A) and b < len(B) and (A[a] == B[b]):\n        a += 1\n        b += 1\n    assert a < len(A) and b < len(B) or (a == len(A) and b == len(B))\n    if a > longPref:\n        shifts = curShift\n        longPref = a\n    if a == 0:\n        B += B[b]\n        curShift += 1\n        b += 1\n    elif a == len(A):\n        break\n    else:\n        B += B[b - a:b - lpsA[a - 1]]\n        curShift += a - lpsA[a - 1]\n        a = lpsA[a - 1]\nprint(shifts)", "def LPS(s):\n    lps = [0 for i in range(len(s))]\n    for i in range(1, len(s)):\n        j = i - 1\n        while j >= 0 and s[lps[j]] != s[i]:\n            j = lps[j] - 1\n        if j >= 0:\n            lps[i] = lps[j] + 1\n    return lps\nN = int(input())\nA = input()\nB = input()\nlpsA = LPS(A)\na = 0\nb = 0\nshifts = 0\ncurShift = 0\nlongPref = 0\nwhile curShift < N:\n    while a < len(A) and b < len(B) and (A[a] == B[b]):\n        a += 1\n        b += 1\n    assert a < len(A) and b < len(B) or (a == len(A) and b == len(B))\n    if a > longPref:\n        shifts = curShift\n        longPref = a\n    if a == 0:\n        B += B[b]\n        curShift += 1\n        b += 1\n    elif a == len(A):\n        break\n    else:\n        B += B[b - a:b - lpsA[a - 1]]\n        curShift += a - lpsA[a - 1]\n        a = lpsA[a - 1]\nprint(shifts)", "No = int(input(''))\na = input('')\nb = input('')\nmax_count = 0\nmax_shift = 0\ni = 0\nwhile i < No:\n    count = 0\n    j = 0\n    while j < No and a[j] == b[(j + i) % No]:\n        count += 1\n        j += 1\n    if max_count < count:\n        max_count = count\n        max_shift = i\n    if j > 0:\n        i += count\n    else:\n        i += 1\nprint(max_shift)", "N = int(input(''))\na = input('')\nb = input('')\nmax_count = 0\nmax_shift = 0\ni = 0\nwhile i < N:\n    count = 0\n    j = 0\n    while j < N and a[j] == b[(j + i) % N]:\n        count += 1\n        j += 1\n    if max_count < count:\n        max_count = count\n        max_shift = i\n    if j > 0:\n        i += count\n    else:\n        i += 1\nprint(max_shift)", "t = int(input())\nlist = []\na = input()\nb = input()\n(low, high) = (0, t - 1)\nrpp = ''\nwhile low <= high:\n    mid = (low + high) // 2\n    if a[:mid + 1] in b:\n        rpp = a[:mid + 1]\n        low = mid + 1\n    else:\n        high = mid - 1\nprint(b.index(rpp))", "n = int(input())\na = input()\nb = input()\nf = 0\ns = n - 1\nsh = 0\nwhile f <= s:\n    m = (f + s) // 2\n    c = a[:m + 1]\n    x = b.find(c)\n    if x == -1:\n        s = m - 1\n    else:\n        f = m + 1\n    if sh < x:\n        sh = x\nprint(sh)", "n = int(input())\na = input()\nb = input()\nf = 0\ns = n - 1\nop = 0\nwhile f <= s:\n    m = (f + s) // 2\n    c = a[:m + 1]\n    x = b.find(c)\n    if x == -1:\n        s = m - 1\n    else:\n        f = m + 1\n    if op < x:\n        op = x\nprint(op)", "n = int(input())\ns1 = input()\ns2 = input()\ns2 += s2\nfirst = 0\nsecond = n - 1\nop = 0\nwhile first <= second:\n    m = (first + second) // 2\n    c = s1[:m + 1]\n    x = s2.find(c)\n    if x == -1:\n        second = m - 1\n    else:\n        first = m + 1\n    if op < x:\n        op = x\nprint(op)", "l = int(input())\ns1 = input()\ns2 = input()\ns2 += s2\nn1 = 0\nn2 = l - 1\nshift = 0\nwhile n1 <= n2:\n    m = (n1 + n2) // 2\n    c = s1[:m + 1]\n    y = s2.find(c)\n    if y == -1:\n        n2 = m - 1\n    else:\n        n1 = m + 1\n    if shift < y:\n        shift = y\nprint(shift)", "from math import *\nfrom collections import *\nfrom functools import *\n\ndef rvi():\n    return [*map(int, input().split())]\n\ndef ri():\n    return int(input())\ninput()\nw = input()\nt = input() * 2\ni = 0\nj = -1\nlps = [-1] * (len(w) + 1)\nwhile i < len(w):\n    while j >= 0 and w[i] != w[j]:\n        j = lps[j]\n    i += 1\n    j += 1\n    lps[i] = j\ni = 0\nj = 0\n(max_j, max_i) = (0, 0)\nwhile i < len(t):\n    while j >= 0 and t[i] != w[j]:\n        j = lps[j]\n    i += 1\n    j += 1\n    if j > max_j:\n        max_j = j\n        max_i = i - j\n    elif j == max_j:\n        max_i = min(i - j, max_i)\nprint(max_i)", "t = int(input())\nlist = []\na = input()\nb = input()\n(low, high) = (0, t - 1)\nrpp = ''\nwhile low <= high:\n    mid = (low + high) // 2\n    if a[:mid + 1] in b:\n        rpp = a[:mid + 1]\n        low = mid + 1\n    else:\n        high = mid - 1\nprint(b.index(rpp))", "t = int(input())\nlist = []\na = input()\nb = input()\n(low, high) = (0, t - 1)\nrpp = ''\nwhile low <= high:\n    mid = (low + high) // 2\n    if a[:mid + 1] in b:\n        rpp = a[:mid + 1]\n        low = mid + 1\n    else:\n        high = mid - 1\nprint(b.index(rpp))", "l = int(input())\ns1 = input()\ns2 = input()\ns2 += s2\nn1 = 0\nn2 = l - 1\nshift = 0\nwhile n1 <= n2:\n    m = (n1 + n2) // 2\n    c = s1[:m + 1]\n    y = s2.find(c)\n    if y == -1:\n        n2 = m - 1\n    else:\n        n1 = m + 1\n    if shift < y:\n        shift = y\nprint(shift)", "import sys\nn = int(input())\na = input()\nb = input()\nlps = [0] * n\ni = 1\ntemp = 0\nwhile i < n:\n    if a[i] == a[temp]:\n        temp += 1\n        lps[i] = temp\n        i += 1\n    elif temp != 0:\n        temp = lps[temp - 1]\n    else:\n        lps[i] = 0\n        i += 1\ni = 0\nj = 0\nres = 0\ntemp = 0\nb = b + b\nmaxi = -1\nwhile i < len(b) and j < n:\n    if b[i] == a[j]:\n        temp += 1\n        i += 1\n        j += 1\n    else:\n        if temp > maxi:\n            maxi = temp\n            res = i - j\n        if j == 0:\n            i += 1\n            temp = 0\n        else:\n            j = lps[j - 1]\n            temp = 0\nprint(res)", "def createLPS(pattern):\n    j = 0\n    lps = [0]\n    i = 1\n    while i < len(pattern):\n        if pattern[i] == pattern[j]:\n            i += 1\n            j += 1\n            lps.append(j)\n        elif j == 0:\n            i += 1\n            lps.append(0)\n        else:\n            j = lps[j - 1]\n    return lps\n\ndef KMPStringsearch(s, pattern):\n    lps = createLPS(pattern)\n    i = 0\n    j = 0\n    maxMatch = 0\n    currShift = -1\n    while i < len(s) and j < len(pattern):\n        if s[i] == pattern[j]:\n            i += 1\n            j += 1\n            if j > maxMatch:\n                maxMatch = j\n                currShift = i - j\n        elif j != 0:\n            j = lps[j - 1]\n        else:\n            i += 1\n        if j == len(pattern):\n            break\n    return currShift\nn = int(input())\npattern = input()\ns = input()\nprint(KMPStringsearch(s, pattern))", "n = int(input())\na = input()\nB = input()\nb = B + B\nn1 = 0\nn2 = n - 1\nx = 0\ncmp = []\nwhile n1 <= n2:\n    m = (n1 + n2) // 2\n    c = a[:m + 1]\n    y = b.find(c)\n    if y == -1:\n        n2 = m - 1\n    else:\n        n1 = m + 1\n        cmp.append(y)\n    if x < y:\n        x = y\nprint(x)", "n = int(input())\na = input()\nB = input()\nb = B + B\nn1 = 0\nn2 = n - 1\nx = 0\ncmp = []\nwhile n1 <= n2:\n    m = (n1 + n2) // 2\n    c = a[:m + 1]\n    y = b.find(c)\n    if y == -1:\n        n2 = m - 1\n    else:\n        n1 = m + 1\n        cmp.append(y)\n    if x < y:\n        x = y\nprint(x)", "n = int(input())\na = input()\nb = input()\nb += b\nleft = 0\nright = n - 1\nans = 0\nwhile left <= right:\n    mid = (left + right) // 2\n    d = b.find(a[:mid + 1])\n    if d == -1:\n        right = mid - 1\n    else:\n        left = mid + 1\n    if ans < d:\n        ans = d\nprint(ans)", "n = int(input())\na = input()\nB = input()\nb = B + B\nn1 = 0\nn2 = n - 1\nx = 0\ncmp = []\nwhile n1 <= n2:\n    m = (n1 + n2) // 2\n    c = a[:m + 1]\n    y = b.find(c)\n    if y == -1:\n        n2 = m - 1\n    else:\n        n1 = m + 1\n        cmp.append(y)\n    if x < y:\n        x = y\nprint(x)", "n = int(input())\na = input()\nB = input()\nb = B + B\nn1 = 0\nn2 = n - 1\nx = 0\ncmp = []\nwhile n1 <= n2:\n    m = (n1 + n2) // 2\n    c = a[:m + 1]\n    y = b.find(c)\n    if y == -1:\n        n2 = m - 1\n    else:\n        n1 = m + 1\n        cmp.append(y)\n    if x < y:\n        x = y\nprint(x)", "t = int(input())\nlist = []\na = input()\nb = input()\n(low, high) = (0, t - 1)\nrpp = ''\nwhile low <= high:\n    mid = (low + high) // 2\n    if a[:mid + 1] in b:\n        rpp = a[:mid + 1]\n        low = mid + 1\n    else:\n        high = mid - 1\nprint(b.index(rpp))", "n = int(input())\na = input()\nB = input()\nb = B + B\nvar1 = 0\nvar2 = n - 1\nx = 0\nwhile var1 <= var2:\n    m = (var1 + var2) // 2\n    c = a[:m + 1]\n    y = b.find(c)\n    if y == -1:\n        var2 = m - 1\n    else:\n        var1 = m + 1\n    if x < y:\n        x = y\nprint(x)", "def tashift(a, B, l, r, x, lst):\n    while l <= r:\n        m = (l + r) // 2\n        c = a[:m + 1]\n        y = B.find(c)\n        if y == -1:\n            r = m - 1\n        else:\n            l = m + 1\n        if x < y:\n            x = y\n    lst.append(x)\nn = int(input())\na = input()\nb = input()\nB = b + b\nlst = []\nl = 0\nr = n - 1\nx = 0\ntashift(a, B, l, r, x, lst)\nfor i in lst:\n    print(i, end='')\n    print()", "n = int(input())\na = input()\nB = input()\nb = B + B\nl = 0\nr = n - 1\nx = 0\nwhile l <= r:\n    m = (l + r) // 2\n    c = a[:m + 1]\n    y = b.find(c)\n    if y == -1:\n        r = m - 1\n    else:\n        l = m + 1\n    if x < y:\n        x = y\nprint(x)", "try:\n    n = int(input())\n    a = input()\n    c = input()\n    b = c + c\n    res = 0\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = int((left + right) / 2)\n        d = a[:mid + 1]\n        ans = b.find(d)\n        if ans == -1:\n            right = mid - 1\n        else:\n            left = mid + 1\n        if res < ans:\n            res = ans\n    print(res)\nexcept:\n    pass", "try:\n    n = int(input())\n    a = input()\n    c = input()\n    b = c + c\n    res = 0\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = int((left + right) / 2)\n        d = a[:mid + 1]\n        ans = b.find(d)\n        if ans == -1:\n            right = mid - 1\n        else:\n            left = mid + 1\n        if res < ans:\n            res = ans\n    print(res)\nexcept:\n    pass", "try:\n    n = int(input())\n    a = input()\n    c = input()\n    b = c + c\n    res = 0\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = int((left + right) / 2)\n        d = a[:mid + 1]\n        ans = b.find(d)\n        if ans == -1:\n            right = mid - 1\n        else:\n            left = mid + 1\n        if res < ans:\n            res = ans\n    print(res)\nexcept:\n    pass", "def LPS(s):\n    lps = [0 for i in range(len(s))]\n    for i in range(1, len(s)):\n        j = i - 1\n        while j >= 0 and s[lps[j]] != s[i]:\n            j = lps[j] - 1\n        if j >= 0:\n            lps[i] = lps[j] + 1\n    return lps\nN = int(input())\nA = input()\nB = input()\nlpsA = LPS(A)\na = 0\nb = 0\nshifts = 0\ncurShift = 0\nlongPref = 0\nwhile curShift < N:\n    while a < len(A) and b < len(B) and (A[a] == B[b]):\n        a += 1\n        b += 1\n    assert a < len(A) and b < len(B) or (a == len(A) and b == len(B))\n    if a > longPref:\n        shifts = curShift\n        longPref = a\n    if a == 0:\n        B += B[b]\n        curShift += 1\n        b += 1\n    elif a == len(A):\n        break\n    else:\n        B += B[b - a:b - lpsA[a - 1]]\n        curShift += a - lpsA[a - 1]\n        a = lpsA[a - 1]\nprint(shifts)", "def LPS(s):\n    lps = [0 for i in range(len(s))]\n    for i in range(1, len(s)):\n        j = i - 1\n        while j >= 0 and s[lps[j]] != s[i]:\n            j = lps[j] - 1\n        if j >= 0:\n            lps[i] = lps[j] + 1\n    return lps\nN = int(input())\nA = input()\nB = input()\nlpsA = LPS(A)\na = 0\nb = 0\nshifts = 0\ncurShift = 0\nlongPref = 0\nwhile curShift < N:\n    while a < len(A) and b < len(B) and (A[a] == B[b]):\n        a += 1\n        b += 1\n    assert a < len(A) and b < len(B) or (a == len(A) and b == len(B))\n    if a > longPref:\n        shifts = curShift\n        longPref = a\n    if a == 0:\n        B += B[b]\n        curShift += 1\n        b += 1\n    elif a == len(A):\n        break\n    else:\n        B += B[b - a:b - lpsA[a - 1]]\n        curShift += a - lpsA[a - 1]\n        a = lpsA[a - 1]\nprint(shifts)", "n = int(input())\na = input()\nc = input()\nb = c + c\nres = 0\nleft = 0\nright = n - 1\nwhile left <= right:\n    mid = int((left + right) / 2)\n    d = a[:mid + 1]\n    ans = b.find(d)\n    if ans == -1:\n        right = mid - 1\n    else:\n        left = mid + 1\n    if res < ans:\n        res = ans\nprint(res)", "def LPS(s):\n    lps = [0 for i in range(len(s))]\n    for i in range(1, len(s)):\n        j = i - 1\n        while j >= 0 and s[lps[j]] != s[i]:\n            j = lps[j] - 1\n        if j >= 0:\n            lps[i] = lps[j] + 1\n    return lps\nN = int(input())\nA = input()\nB = input()\nlpsA = LPS(A)\na = 0\nb = 0\nshifts = 0\ncurShift = 0\nlongPref = 0\nwhile curShift < N:\n    while a < len(A) and b < len(B) and (A[a] == B[b]):\n        a += 1\n        b += 1\n    assert a < len(A) and b < len(B) or (a == len(A) and b == len(B))\n    if a > longPref:\n        shifts = curShift\n        longPref = a\n    if a == 0:\n        B += B[b]\n        curShift += 1\n        b += 1\n    elif a == len(A):\n        break\n    else:\n        B += B[b - a:b - lpsA[a - 1]]\n        curShift += a - lpsA[a - 1]\n        a = lpsA[a - 1]\nprint(shifts)", "n = int(input())\na = input()\nb = input()\n(lo, hi) = (0, n - 1)\nres = '#'\nwhile lo <= hi:\n    mid = (lo + hi) // 2\n    if a[:mid + 1] in b:\n        res = a[:mid + 1]\n        lo = mid + 1\n    else:\n        hi = mid - 1\nprint(b.index(res))", "t = int(input())\nlist = []\na = input()\nb = input()\n(low, high) = (0, t - 1)\nrpp = ''\nwhile low <= high:\n    mid = (low + high) // 2\n    if a[:mid + 1] in b:\n        rpp = a[:mid + 1]\n        low = mid + 1\n    else:\n        high = mid - 1\nprint(b.index(rpp))", "n = int(input())\na = input()\nb = input()\nb += b\npos = []\nlens = []\ni = j = 0\nwhile j < len(b):\n    if a[i] == b[j]:\n        pos.append(j)\n        l = 1\n        i += 1\n        j += 1\n        while i < len(a) and j < len(b):\n            if a[i] == b[j]:\n                l += 1\n                i += 1\n                j += 1\n                if j == len(b):\n                    lens.append(l)\n            else:\n                lens.append(l)\n                i = 0\n                break\n    else:\n        i = 0\n        j += 1\nm_idx = lens.index(max(lens))\nprint(pos[m_idx] % n)", "t = int(input())\nlist = []\na = input()\nb = input()\n(low, high) = (0, t - 1)\nrpp = '#'\nwhile low <= high:\n    mid = (low + high) // 2\n    if a[:mid + 1] in b:\n        rpp = a[:mid + 1]\n        low = mid + 1\n    else:\n        high = mid - 1\nprint(b.index(rpp))", "t = int(input())\nlist = []\na = input()\nb = input()\n(low, high) = (0, t - 1)\nrpp = '#'\nwhile low <= high:\n    mid = (low + high) // 2\n    if a[:mid + 1] in b:\n        rpp = a[:mid + 1]\n        low = mid + 1\n    else:\n        high = mid - 1\nprint(b.index(rpp))", "try:\n    T = int(input())\n    f = input()\n    s = input()\n    (lo, hi) = (0, T - 1)\n    res = '#'\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if f[:mid + 1] in s:\n            res = f[:mid + 1]\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    print(s.index(res))\nexcept:\n    pass", "n = int(input())\na = input()\nb = input()\n(lo, hi) = (0, n - 1)\nres = '#'\nwhile lo <= hi:\n    mid = (lo + hi) // 2\n    if a[:mid + 1] in b:\n        res = a[:mid + 1]\n        lo = mid + 1\n    else:\n        hi = mid - 1\nprint(b.index(res))", "n = int(input())\na = input()\nb = input()\n(lo, hi) = (0, n - 1)\nres = '#'\nwhile lo <= hi:\n    mid = (lo + hi) // 2\n    if a[:mid + 1] in b:\n        res = a[:mid + 1]\n        lo = mid + 1\n    else:\n        hi = mid - 1\nprint(b.index(res))", "n = int(input())\na = input()\nb = input()\n(lo, hi) = (0, n - 1)\nres = '#'\nwhile lo <= hi:\n    mid = (lo + hi) // 2\n    if a[:mid + 1] in b:\n        res = a[:mid + 1]\n        lo = mid + 1\n    else:\n        hi = mid - 1\nans = b.index(res)\nprint(ans)", "n = int(input())\na = input()\nb = input()\n(lo, hi) = (0, n - 1)\nres = '#'\nwhile lo <= hi:\n    mid = (lo + hi) // 2\n    if a[:mid + 1] in b:\n        res = a[:mid + 1]\n        lo = mid + 1\n    else:\n        hi = mid - 1\nans = b.index(res)\nprint(ans)", "n = int(input())\na = input()\nb = input()\n(lo, hi) = (0, n - 1)\nres = '#'\nwhile lo <= hi:\n    mid = (lo + hi) // 2\n    if a[:mid + 1] in b:\n        res = a[:mid + 1]\n        lo = mid + 1\n    else:\n        hi = mid - 1\nans = b.index(res)\nprint(ans)", "n = int(input())\na = input()\nb = input()\nlow = 0\nhigh = n - 1\nres = float('inf')\nwhile low <= high:\n    mid = (low + high) // 2\n    if a[:mid + 1] in b:\n        res = a[:mid + 1]\n        low = mid + 1\n    else:\n        high = mid - 1\nans = b.index(res)\nprint(ans)", "n = int(input())\na = input()\nb = input()\nlow = 0\nhigh = n - 1\nres = float('inf')\nwhile low <= high:\n    mid = (low + high) // 2\n    if a[:mid + 1] in b:\n        res = a[:mid + 1]\n        low = mid + 1\n    else:\n        high = mid - 1\nans = b.index(res)\nprint(ans)", "n = int(input())\na = input()\nb = input()\nb *= 2\ni = n // 2\nj = i // 2\nwhile j:\n    if b.find(a[:i]) >= 0:\n        i += j\n    else:\n        i -= j\n    j //= 2\nwhile b.find(a[:i]) < 0:\n    i -= 1\nprint(b.find(a[:i]))", "n = int(input())\na = input()\nb = input()\nb *= 2\nn0 = n // 2\nn1 = n0 // 2\nwhile n1:\n    if b.find(a[:n0]) >= 0:\n        n0 += n1\n    else:\n        n0 -= n1\n    n1 //= 2\nwhile b.find(a[:n0]) < 0:\n    n0 -= 1\nprint(b.find(a[:n0]))", "n = int(input())\na = input()\nb = input()\nb *= 2\nn0 = n // 2\nn1 = n0 // 2\nwhile n1:\n    if b.find(a[:n0]) >= 0:\n        n0 += n1\n    else:\n        n0 -= n1\n    n1 //= 2\nwhile b.find(a[:n0]) < 0:\n    n0 -= 1\nprint(b.find(a[:n0]))", "try:\n    n = int(input())\n    a = input()\n    b = input()\n    b *= 2\n    n0 = n // 2\n    n1 = n0 // 2\n    while n1:\n        if b.find(a[:n0]) >= 0:\n            n0 += n1\n        else:\n            n0 -= n1\n        n1 //= 2\n    while b.find(a[:n0]) < 0:\n        n0 -= 1\n    print(b.find(a[:n0]))\nexcept:\n    EOFError", "n = int(input())\na = input()\nb = input()\nb = b + b\ni = n // 2\nj = i // 2\nwhile j:\n    idx = b.find(a[:i])\n    if idx >= 0:\n        i += j\n    else:\n        i -= j\n    j //= 2\nwhile b.find(a[:i]) < 0:\n    i -= 1\nres = b.find(a[:i])\nprint(res)", "n = int(input())\na = input()\nb = input()\nb = b + b\ni = n // 2\nj = i // 2\nwhile j:\n    idx = b.find(a[:i])\n    if idx >= 0:\n        i += j\n    else:\n        i -= j\n    j //= 2\nwhile b.find(a[:i]) < 0:\n    i -= 1\nres = b.find(a[:i])\nprint(res)", "try:\n    n = int(input())\n    a = input()\n    b = input()\n    b *= 2\n    n0 = n // 2\n    n1 = n0 // 2\n    while n1:\n        if b.find(a[:n0]) >= 0:\n            n0 += n1\n        else:\n            n0 -= n1\n        n1 //= 2\n    while b.find(a[:n0]) < 0:\n        n0 -= 1\n    print(b.find(a[:n0]))\nexcept:\n    EOFError", "try:\n    n = int(input())\n    a = input()\n    b = input()\n    b *= 2\n    n0 = n // 2\n    n1 = n0 // 2\n    while n1:\n        if b.find(a[:n0]) >= 0:\n            n0 += n1\n        else:\n            n0 -= n1\n        n1 //= 2\n    while b.find(a[:n0]) < 0:\n        n0 -= 1\n    print(b.find(a[:n0]))\nexcept:\n    EOFError", "try:\n    n = int(input())\n    a = input()\n    b = input()\n    b *= 2\n    n0 = n // 2\n    n1 = n0 // 2\n    while n1:\n        if b.find(a[:n0]) >= 0:\n            n0 += n1\n        else:\n            n0 -= n1\n        n1 //= 2\n    while b.find(a[:n0]) < 0:\n        n0 -= 1\n    print(b.find(a[:n0]))\nexcept:\n    EOFError", "try:\n    n = int(input())\n    a = input()\n    b = input()\n    b *= 2\n    n0 = n // 2\n    n1 = n0 // 2\n    while n1:\n        if b.find(a[:n0]) >= 0:\n            n0 += n1\n        else:\n            n0 -= n1\n        n1 //= 2\n    while b.find(a[:n0]) < 0:\n        n0 -= 1\n    print(b.find(a[:n0]))\nexcept:\n    EOFError", "try:\n    n = int(input())\n    a = input()\n    b = input()\n    b *= 2\n    n0 = n // 2\n    n1 = n0 // 2\n    while n1:\n        if b.find(a[:n0]) >= 0:\n            n0 += n1\n        else:\n            n0 -= n1\n        n1 //= 2\n    while b.find(a[:n0]) < 0:\n        n0 -= 1\n    print(b.find(a[:n0]))\nexcept:\n    EOFError", "try:\n    n = int(input())\n    a = input()\n    b = input()\n    b *= 2\n    n0 = n // 2\n    n1 = n0 // 2\n    while n1:\n        if b.find(a[:n0]) >= 0:\n            n0 += n1\n        else:\n            n0 -= n1\n        n1 //= 2\n    while b.find(a[:n0]) < 0:\n        n0 -= 1\n    print(b.find(a[:n0]))\nexcept:\n    EOFError", "try:\n    n = int(input())\n    a = input()\n    b = input()\n    b *= 2\n    n0 = n // 2\n    n1 = n0 // 2\n    while n1:\n        if b.find(a[:n0]) >= 0:\n            n0 += n1\n        else:\n            n0 -= n1\n        n1 //= 2\n    while b.find(a[:n0]) < 0:\n        n0 -= 1\n    print(b.find(a[:n0]))\nexcept:\n    EOFError", "try:\n    n = int(input())\n    a = input()\n    b = input()\n    b *= 2\n    n0 = n // 2\n    n1 = n0 // 2\n    while n1:\n        if b.find(a[:n0]) >= 0:\n            n0 += n1\n        else:\n            n0 -= n1\n        n1 //= 2\n    while b.find(a[:n0]) < 0:\n        n0 -= 1\n    print(b.find(a[:n0]))\nexcept:\n    EOFError", "n = int(input())\na = input()\nb = input()\nb = b + b\ni = n // 2\nj = i // 2\nwhile j:\n    idx = b.find(a[:i])\n    if idx >= 0:\n        i += j\n    else:\n        i -= j\n    j //= 2\nwhile b.find(a[:i]) < 0:\n    i -= 1\nres = b.find(a[:i])\nprint(res)", "n = int(input())\na = input()\nb = input()\nb = b + b\ni = n // 2\nj = i // 2\nwhile j:\n    idx = b.find(a[:i])\n    if idx >= 0:\n        i += j\n    else:\n        i -= j\n    j //= 2\nwhile b.find(a[:i]) < 0:\n    i -= 1\nres = b.find(a[:i])\nprint(res)", "n = int(input())\na = input()\nb = input()\nb = b + b\ni = n // 2\nj = i // 2\nwhile j:\n    idx = b.find(a[:i])\n    if idx >= 0:\n        i += j\n    else:\n        i -= j\n    j //= 2\nwhile b.find(a[:i]) < 0:\n    i -= 1\nres = b.find(a[:i])\nprint(res)", "n = int(input())\na = input()\nb = input()\nb = b + b\ni = n // 2\nj = i // 2\nwhile j:\n    idx = b.find(a[:i])\n    if idx >= 0:\n        i += j\n    else:\n        i -= j\n    j //= 2\nwhile b.find(a[:i]) < 0:\n    i -= 1\nres = b.find(a[:i])\nprint(res)", "n = int(input())\na = input()\nb = input()\nb = b + b\ni = n // 2\nj = i // 2\nwhile j:\n    idx = b.find(a[:i])\n    if idx >= 0:\n        i += j\n    else:\n        i -= j\n    j //= 2\nwhile b.find(a[:i]) < 0:\n    i -= 1\nres = b.find(a[:i])\nprint(res)", "n = int(input())\na = input()\nb = input()\nb = b + b\ni = n // 2\nj = i // 2\nwhile j:\n    idx = b.find(a[:i])\n    if idx >= 0:\n        i += j\n    else:\n        i -= j\n    j //= 2\nwhile b.find(a[:i]) < 0:\n    i -= 1\nres = b.find(a[:i])\nprint(res)", "n = int(input())\na = input()\nb = input()\nb = b + b\ni = n // 2\nj = i // 2\nwhile j:\n    idx = b.find(a[:i])\n    if idx >= 0:\n        i += j\n    else:\n        i -= j\n    j //= 2\nwhile b.find(a[:i]) < 0:\n    i -= 1\nres = b.find(a[:i])\nprint(res)", "n = int(input())\na = input()\nb = input()\nb = b + b\ni = n // 2\nj = i // 2\nwhile j:\n    idx = b.find(a[:i])\n    if idx >= 0:\n        i += j\n    else:\n        i -= j\n    j //= 2\nwhile b.find(a[:i]) < 0:\n    i -= 1\nres = b.find(a[:i])\nprint(res)", "n = int(input())\na = input()\nb = input()\nb = b + b\ni = n // 2\nj = i // 2\nwhile j:\n    idx = b.find(a[:i])\n    if idx >= 0:\n        i += j\n    else:\n        i -= j\n    j //= 2\nwhile b.find(a[:i]) < 0:\n    i -= 1\nres = b.find(a[:i])\nprint(res)", "n = int(input())\na = input()\nb = input()\nb = b + b\ni = n // 2\nj = i // 2\nwhile j:\n    idx = b.find(a[:i])\n    if idx >= 0:\n        i += j\n    else:\n        i -= j\n    j //= 2\nwhile b.find(a[:i]) < 0:\n    i -= 1\nres = b.find(a[:i])\nprint(res)", "n = int(input())\na = input()\nb = input()\nb = b + b\ni = n // 2\nj = i // 2\nwhile j:\n    idx = b.find(a[:i])\n    if idx >= 0:\n        i += j\n    else:\n        i -= j\n    j //= 2\nwhile b.find(a[:i]) < 0:\n    i -= 1\nres = b.find(a[:i])\nprint(res)", "n = int(input())\na = input()\nb = input()\nb *= 2\nn0 = n // 2\nn1 = n0 // 2\nwhile n1:\n    if b.find(a[:n0]) >= 0:\n        n0 += n1\n    else:\n        n0 -= n1\n    n1 //= 2\nwhile b.find(a[:n0]) < 0:\n    n0 -= 1\nprint(b.find(a[:n0]))", "n = int(input())\na = input()\nb = input()\nb *= 2\nn0 = n // 2\nn1 = n0 // 2\nwhile n1:\n    if b.find(a[:n0]) >= 0:\n        n0 += n1\n    else:\n        n0 -= n1\n    n1 //= 2\nwhile b.find(a[:n0]) < 0:\n    n0 -= 1\nprint(b.find(a[:n0]))", "t = int(input())\na = input()\nb = input()\ni = 0\nres = -99999999\nj = 0\nflag = -1\nwhile j < t:\n    k = j\n    while i < t and j < 2 * t and (a[i] == b[j % t]):\n        i += 1\n        j += 1\n    if k - j != 0:\n        prev = res\n        res = max(res, j - k)\n        if prev < res:\n            flag = k\n        i = 0\n        continue\n    j += 1\nprint(flag)", "n = int(input())\na = input()\nb = input()\nb = b + b\ni = n // 2\nj = i // 2\nwhile j:\n    idx = b.find(a[:i])\n    if idx >= 0:\n        i += j\n    else:\n        i -= j\n    j //= 2\nwhile b.find(a[:i]) < 0:\n    i -= 1\nres = b.find(a[:i])\nprint(res)", "n = int(input())\na = input()\nb = input()\nlow = 0\nhigh = n - 1\nres = float('inf')\nwhile low <= high:\n    mid = (low + high) // 2\n    if a[:mid + 1] in b:\n        res = a[:mid + 1]\n        low = mid + 1\n    else:\n        high = mid - 1\nans = b.index(res)\nprint(ans)", "try:\n    n = int(input())\n    a = input()\n    b = input()\n    low = 0\n    high = n - 1\n    res = float('inf')\n    while low <= high:\n        mid = (low + high) // 2\n        if a[:mid + 1] in b:\n            res = a[:mid + 1]\n            low = mid + 1\n        else:\n            high = mid - 1\n    print(b.index(res))\nexcept:\n    pass", "try:\n    n = int(input())\n    a = input()\n    b = input()\n    low = 0\n    high = n - 1\n    res = float('inf')\n    while low <= high:\n        mid = (low + high) // 2\n        if a[:mid + 1] in b:\n            res = a[:mid + 1]\n            low = mid + 1\n        else:\n            high = mid - 1\n    print(b.index(res))\nexcept:\n    pass", "try:\n    n = int(input())\n    a = input()\n    b = input()\n    low = 0\n    high = n - 1\n    res = float('inf')\n    while low <= high:\n        mid = (low + high) // 2\n        if a[:mid + 1] in b:\n            res = a[:mid + 1]\n            low = mid + 1\n        else:\n            high = mid - 1\n    print(b.index(res))\nexcept:\n    pass", "def solve(sa, sb):\n    m = len(sa)\n    n = len(sb)\n    i = j = 0\n    curr_start = -1\n    cur_len = 0\n    largest_start = -1\n    max_len = 0\n    while i < m:\n        if sa[i] == sb[j]:\n            cur_len += 1\n            if cur_len == 1:\n                curr_start = j\n            i += 1\n            j = (j + 1) % n\n        else:\n            if cur_len > max_len:\n                max_len = cur_len\n                largest_start = curr_start\n            cur_len = 0\n            j = (j + (i == 0)) % n\n            i = 0\n            if largest_start != -1 and j == largest_start:\n                break\n    return largest_start\n\ndef main():\n    _ = input()\n    sa = input()\n    sb = input()\n    print(solve(sa, sb))\nmain()", "def computeLps(pattern, n):\n    lps = [0 for i in range(n)]\n    j = 0\n    i = 1\n    while i < n:\n        if pattern[i] == pattern[j]:\n            j += 1\n            lps[i] = j\n            i += 1\n        elif j == 0:\n            lps[i] = 0\n            i += 1\n        else:\n            j = lps[j - 1]\n    return lps\n\ndef determineAnswer(pattern, string, n):\n    lps = computeLps(pattern, n)\n    i = 0\n    j = 0\n    ind = -1\n    min = 0\n    for prefixLength in range(1, n + 1):\n        flag = False\n        while i < n:\n            if pattern[j] == string[i]:\n                i += 1\n                j += 1\n            elif i < n:\n                if j != 0:\n                    j = lps[j - 1]\n                else:\n                    i += 1\n            if j == prefixLength:\n                flag = True\n                ind = i - j\n                break\n        if flag == False:\n            break\n        else:\n            min = ind\n    return min\nn = int(input())\npattern = input()\nstring = input()\nminShifts = determineAnswer(pattern, string, n)\nprint(minShifts)", "def computeLps(pattern, n):\n    lps = [0 for i in range(n)]\n    j = 0\n    i = 1\n    while i < n:\n        if pattern[i] == pattern[j]:\n            j += 1\n            lps[i] = j\n            i += 1\n        elif j == 0:\n            lps[i] = 0\n            i += 1\n        else:\n            j = lps[j - 1]\n    return lps\n\ndef determineAnswer(pattern, string, n):\n    lps = computeLps(pattern, n)\n    i = 0\n    j = 0\n    ind = -1\n    min = 0\n    for prefixLength in range(1, n + 1):\n        flag = False\n        while i < n:\n            if pattern[j] == string[i]:\n                i += 1\n                j += 1\n            elif i < n:\n                if j != 0:\n                    j = lps[j - 1]\n                else:\n                    i += 1\n            if j == prefixLength:\n                flag = True\n                ind = i - j\n                break\n        if flag == False:\n            break\n        else:\n            min = ind\n    return min\nn = int(input())\npattern = input()\nstring = input()\nminShifts = determineAnswer(pattern, string, n)\nprint(minShifts)", "def solve(sa, sb):\n    m = len(sa)\n    n = len(sb)\n    i = j = 0\n    curr_start = -1\n    cur_len = 0\n    largest_start = -1\n    max_len = 0\n    while i < m:\n        if sa[i] == sb[j]:\n            cur_len += 1\n            if cur_len == 1:\n                curr_start = j\n            i += 1\n            j = (j + 1) % n\n        else:\n            if cur_len > max_len:\n                max_len = cur_len\n                largest_start = curr_start\n            cur_len = 0\n            j = (j + (i == 0)) % n\n            i = 0\n            if largest_start != -1 and j == largest_start:\n                break\n    return largest_start\n\ndef main():\n    _ = input()\n    sa = input()\n    sb = input()\n    print(solve(sa, sb))\nmain()", "def solve(sa, sb):\n    m = len(sa)\n    n = len(sb)\n    i = j = 0\n    curr_start = -1\n    cur_len = 0\n    largest_start = -1\n    max_len = 0\n    while i < m:\n        if sa[i] == sb[j]:\n            cur_len += 1\n            if cur_len == 1:\n                curr_start = j\n            i += 1\n            j = (j + 1) % n\n        else:\n            if cur_len > max_len:\n                max_len = cur_len\n                largest_start = curr_start\n            cur_len = 0\n            j = (j + (i == 0)) % n\n            i = 0\n            if largest_start != -1 and j == largest_start:\n                break\n    return largest_start\n\ndef main():\n    _ = input()\n    sa = input()\n    sb = input()\n    print(solve(sa, sb))\nmain()", "def solve(sa, sb):\n    m = len(sa)\n    n = len(sb)\n    i = j = 0\n    curr_start = -1\n    cur_len = 0\n    largest_start = -1\n    max_len = 0\n    while i < m:\n        if sa[i] == sb[j]:\n            cur_len += 1\n            if cur_len == 1:\n                curr_start = j\n            i += 1\n            j = (j + 1) % n\n        else:\n            if cur_len > max_len:\n                max_len = cur_len\n                largest_start = curr_start\n            cur_len = 0\n            j = (j + (i == 0)) % n\n            i = 0\n            if largest_start != -1 and j == largest_start:\n                break\n    return largest_start\n\ndef main():\n    _ = input()\n    sa = input()\n    sb = input()\n    print(solve(sa, sb))\nmain()", "t = int(input())\na = input()\nb = input()\ni = 0\nres = -99999999\nj = 0\nflag = -1\nwhile j < t:\n    k = j\n    while i < t and j < 2 * t and (a[i] == b[j % t]):\n        i += 1\n        j += 1\n    if k - j != 0:\n        prev = res\n        res = max(res, j - k)\n        if prev < res:\n            flag = k\n        i = 0\n        continue\n    j += 1\nprint(flag)", "t = int(input())\na = input()\nb = input()\ni = 0\nres = -99999999\nj = 0\nflag = -1\nwhile j < t:\n    k = j\n    while i < t and j < 2 * t and (a[i] == b[j % t]):\n        i += 1\n        j += 1\n    if k - j != 0:\n        prev = res\n        res = max(res, j - k)\n        if prev < res:\n            flag = k\n        i = 0\n        continue\n    j += 1\nprint(flag)", "def solve(sa, sb):\n    m = len(sa)\n    n = len(sb)\n    i = j = 0\n    curr_start = -1\n    cur_len = 0\n    largest_start = -1\n    max_len = 0\n    while i < m:\n        if sa[i] == sb[j]:\n            cur_len += 1\n            if cur_len == 1:\n                curr_start = j\n            i += 1\n            j = (j + 1) % n\n        else:\n            if cur_len > max_len:\n                max_len = cur_len\n                largest_start = curr_start\n            cur_len = 0\n            j = (j + (i == 0)) % n\n            i = 0\n            if largest_start != -1 and j == largest_start:\n                break\n    return largest_start\n\ndef main():\n    _ = input()\n    sa = input()\n    sb = input()\n    print(solve(sa, sb))\nmain()", "def computelps(pat, m, lps):\n    le = 0\n    lps[0] = 0\n    i = 1\n    while i < m:\n        if pat[i] == pat[le]:\n            le += 1\n            lps[i] += le\n            i += 1\n        elif le > 0:\n            le = lps[le - 1]\n        else:\n            lps[i] = 0\n            i += 1\n\ndef kmp(pat, txt):\n    n = len(txt)\n    m = len(pat)\n    lps = [0] * m\n    computelps(pat, m, lps)\n    (i, j) = (0, 0)\n    (ma, ans, res) = (0, 0, 0)\n    while i < n:\n        if pat[j] == txt[i]:\n            i += 1\n            j += 1\n            ma += 1\n        if ma > res:\n            res = ma\n            ans = i - j\n        if j == m:\n            break\n        elif i < n and pat[j] != txt[i]:\n            ma = 0\n            if j != 0:\n                j = lps[j - 1]\n            else:\n                i += 1\n    print(ans)\nn = int(input())\na = input()\nb = input()\nb = b + b\nkmp(a, b)", "def computelps(pat, m, lps):\n    le = 0\n    lps[0] = 0\n    i = 1\n    while i < m:\n        if pat[i] == pat[le]:\n            le += 1\n            lps[i] = le\n            i += 1\n        elif le > 0:\n            le = lps[le - 1]\n        else:\n            lps[i] = 0\n            i += 1\n\ndef kmp(pat, txt):\n    n = len(txt)\n    m = len(pat)\n    lps = [0] * m\n    computelps(pat, m, lps)\n    (i, j) = (0, 0)\n    (ma, ans, res) = (0, 0, 0)\n    while i < n:\n        if pat[j] == txt[i]:\n            i += 1\n            j += 1\n            ma += 1\n        if ma > res:\n            res = ma\n            ans = i - j\n        if j == m:\n            break\n        elif i < n and pat[j] != txt[i]:\n            ma = 0\n            if j != 0:\n                j = lps[j - 1]\n            else:\n                i += 1\n    print(ans)\nn = int(input())\na = input()\nb = input()\nb = b + b\nkmp(a, b)", "def lpsarr(pat, m, lps):\n    len = 0\n    i = 1\n    lps[0] = 0\n    while i < m:\n        if pat[i] == pat[len]:\n            len += 1\n            lps[i] = len\n            i += 1\n        elif len != 0:\n            len = lps[len - 1]\n        else:\n            lps[i] = 0\n            i += 1\n\ndef kmpsearch(pat, txt):\n    n = len(txt)\n    m = len(pat)\n    lps = [0] * m\n    lpsarr(pat, m, lps)\n    i = 0\n    j = 0\n    (max, ans, res) = (0, 0, 0)\n    while i < n:\n        if pat[j] == txt[i]:\n            i += 1\n            j += 1\n            max += 1\n        if max > res:\n            res = max\n            ans = i - j\n        if j == m:\n            break\n        elif i < n and pat[j] != txt[i]:\n            max = 0\n            if j != 0:\n                j = lps[j - 1]\n            else:\n                i += 1\n    print(ans)\nn = int(input())\na = input()\nb = input()\nb = b + b\nkmpsearch(a, b)", "def findPi(str1, pi, m):\n    i = 0\n    pi[0] = 0\n    j = 1\n    while j < m:\n        if str1[i] == str1[j]:\n            i += 1\n            pi[j] = i\n            j += 1\n        elif i == 0:\n            pi[j] = i\n            j += 1\n        else:\n            i = pi[i - 1]\n    return pi\n\ndef find(pi_1, str1, str2):\n    m = len(str1)\n    n = len(str2)\n    pi_2 = [0] * n\n    i = 0\n    j = 0\n    while i < m and j < n:\n        if str1[i] == str2[j]:\n            i += 1\n            pi_2[j] = i\n            j += 1\n        elif i == 0:\n            j += 1\n        else:\n            i = pi_1[i - 1]\n    val = max(pi_2)\n    pos = pi_2.index(val)\n    return pos - val + 1\nt = int(input())\nstr1 = list(input())\nstr2 = list(input())\nm = len(str1)\nn = len(str2)\npi_1 = [None] * m\npi_1 = findPi(str1, pi_1, m)\nprint(find(pi_1, str1, str2))", "def solve(sa, sb):\n    m = len(sa)\n    n = len(sb)\n    i = j = 0\n    curr_start = -1\n    cur_len = 0\n    largest_start = -1\n    max_len = 0\n    while i < m:\n        if sa[i] == sb[j]:\n            cur_len += 1\n            if cur_len == 1:\n                curr_start = j\n            i += 1\n            j = (j + 1) % n\n        else:\n            if cur_len > max_len:\n                max_len = cur_len\n                largest_start = curr_start\n            cur_len = 0\n            j = (j + (i == 0)) % n\n            i = 0\n            if largest_start != -1 and j == largest_start:\n                break\n    return largest_start\n\ndef main():\n    _ = input()\n    sa = input()\n    sb = input()\n    print(solve(sa, sb))\nmain()", "def solve(sa, sb):\n    m = len(sa)\n    n = len(sb)\n    i = j = 0\n    curr_start = -1\n    cur_len = 0\n    largest_start = -1\n    max_len = 0\n    while i < m:\n        if sa[i] == sb[j]:\n            cur_len += 1\n            if cur_len == 1:\n                curr_start = j\n            i += 1\n            j = (j + 1) % n\n        else:\n            if cur_len > max_len:\n                max_len = cur_len\n                largest_start = curr_start\n            cur_len = 0\n            j = (j + (i == 0)) % n\n            i = 0\n            if largest_start != -1 and j == largest_start:\n                break\n    return largest_start\n\ndef main():\n    _ = input()\n    sa = input()\n    sb = input()\n    print(solve(sa, sb))\nmain()", "def get_table(length, string):\n    table = []\n    table.append(0)\n    j = 0\n    for i in range(1, length):\n        if string[i] == string[j]:\n            table.append(table[i - 1] + 1)\n            j += 1\n        else:\n            table.append(0)\n            j = 0\n    return table\n\ndef kmpModified(length, first, second):\n    table = get_table(length, first)\n    j = 0\n    longestShift = 0\n    longestMatch = 0\n    for i in range(length * 2):\n        if second[i] == first[j]:\n            j += 1\n            if j == length:\n                return i - j + 1\n        else:\n            if longestMatch < j:\n                longestMatch = j\n                longestShift = i - j\n            while j != 0:\n                j = table[j - 1]\n                if second[i] == first[j]:\n                    j += 1\n                    break\n    if i == length * 2 - 1:\n        if longestMatch < j:\n            return i - j\n    return longestShift\n\ndef main():\n    length = int(input())\n    first = input()\n    second = input()\n    second = second + second\n    print(kmpModified(length, first, second))\nmain()", "from bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nimport math\nfrom decimal import *\nfrom copy import *\nfrom heapq import *\ngetcontext().prec = 30\nMAX = sys.maxsize\nMAXN = 10 ** 6 + 1\nMOD = 10 ** 9 + 7\n\ndef isprime(n):\n    n = abs(int(n))\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if not n & 1:\n        return False\n    for x in range(3, int(n ** 0.5) + 1, 2):\n        if n % x == 0:\n            return False\n    return True\n\ndef mhd(a, b):\n    return abs(a[0] - b[0]) + abs(b[1] - a[1])\n\ndef charIN(x=' '):\n    return sys.stdin.readline().strip().split(x)\n\ndef arrIN(x=' '):\n    return list(map(int, sys.stdin.readline().strip().split(x)))\n\ndef eld(x, y):\n    a = y[0] - x[0]\n    b = x[1] - y[1]\n    return (a * a + b * b) ** 0.5\n\ndef lgcd(a):\n    g = a[0]\n    for i in range(1, len(a)):\n        g = math.gcd(g, a[i])\n    return g\n\ndef ms(a):\n    msf = -MAX\n    meh = 0\n    st = en = be = 0\n    for i in range(len(a)):\n        meh += a[i]\n        if msf < meh:\n            msf = meh\n            st = be\n            en = i\n        if meh < 0:\n            meh = 0\n            be = i + 1\n    return (msf, st, en)\n\ndef ncr(n, r):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % MOD\n        den = den * (i + 1) % MOD\n    return num * pow(den, MOD - 2, MOD) % MOD\n\ndef flush():\n    return sys.stdout.flush()\n\ndef fac(n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans *= i\n        ans %= MOD\n    return ans\nn = int(input())\na = input().strip()\nb = input().strip()\nb += b\ni = 0\nmx = 0\nop = 0\nst = 0\nwhile i < n:\n    if b[i] == a[0]:\n        st = i\n        c = 0\n        for j in range(n):\n            if a[j] == b[i]:\n                c += 1\n                i += 1\n            else:\n                break\n        if c > mx:\n            mx = c\n            op = st\n    else:\n        i += 1\nprint(op)", "n = int(input())\na = input()\nb = input()\nb = b + b\nn0 = n // 2\nn1 = n0 // 2\nwhile n1:\n    idx = b.find(a[:n0])\n    if idx >= 0:\n        n0 += n1\n    else:\n        n0 -= n1\n    n1 //= 2\nwhile b.find(a[:n0]) < 0:\n    n0 -= 1\nprint(b.find(a[:n0]))", "n = int(input())\nA = input()\nB = input()\n\ndef computeTemporaryArray(pattern):\n    lps = [0] * len(pattern)\n    index = 0\n    for i in range(1, len(pattern)):\n        if pattern[i] == pattern[index]:\n            lps[i] = index + 1\n            index += 1\n        elif index != 0:\n            index = lps[index - 1]\n        else:\n            lps[i] = 0\n    return lps\n\ndef KMP(strr, pattern):\n    lps = computeTemporaryArray(pattern)\n    (i, j) = (0, 0)\n    (max_j, max_rotations) = (0, 0)\n    while i < len(strr) and j < len(pattern):\n        if strr[i] == pattern[j]:\n            i += 1\n            j += 1\n        elif j != 0:\n            j = lps[j - 1]\n        else:\n            i += 1\n        if j > max_j:\n            max_j = j\n            max_rotations = max(max_rotations, i - len(pattern) - j if i > len(pattern) else i - j)\n    return max_rotations\nstrr = B + B\npattern = A\nresult = KMP(strr, pattern)\nprint(result)"]