["for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = []\n    for i in range(1, n + 1):\n        l.append(a.index(i) + 1)\n    ans = 0\n    for i in range(1, n):\n        if l[i - 1] < l[i]:\n            continue\n        else:\n            while l[i - 1] >= l[i]:\n                ans += 1\n                l[i] += b[a.index(i + 1)]\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    d = {}\n    ans = 0\n    for i in range(n):\n        d[w[i]] = i\n    for i in range(2, n + 1):\n        if d[i] <= d[i - 1]:\n            v = d[i - 1] - d[i]\n            jump = l[d[i]]\n            ind = (v + jump) // jump\n            d[i] += jump * ind\n            ans += ind\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    (d, s) = ({}, 0)\n    for i in range(1, n + 1):\n        d[i] = w.index(i)\n    for i in range(2, n + 1):\n        (t1, t2, t) = (d[i], d[i - 1], 0)\n        if t1 <= t2:\n            t = math.ceil((t2 + 1 - t1) / l[t1])\n        s += t\n        d[i] += t * l[t1]\n    print(s)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    (d, s) = ({}, 0)\n    for i in range(1, n + 1):\n        d[i] = w.index(i)\n    for i in range(2, n + 1):\n        (t1, t2, t) = (d[i], d[i - 1], 0)\n        if t1 <= t2:\n            t = math.ceil((t2 + 1 - t1) / l[t1])\n        s += t\n        d[i] += t * l[t1]\n    print(s)", "for _ in range(int(input())):\n    N = int(input())\n    W = list(map(int, input().split()))\n    L = list(map(int, input().split()))\n    curr = W.index(1)\n    count = 0\n    for i in range(2, N + 1):\n        ind = W.index(i)\n        if ind > curr:\n            curr = ind\n            continue\n        jump = L[ind]\n        while ind <= curr:\n            ind += jump\n            count += 1\n        curr = ind\n    print(count)", "for _ in range(int(input())):\n    N = int(input())\n    W = list(map(int, input().split()))\n    L = list(map(int, input().split()))\n    curr = W.index(1)\n    count = 0\n    for i in range(2, N + 1):\n        ind = W.index(i)\n        if ind > curr:\n            curr = ind\n            continue\n        jump = L[ind]\n        while ind <= curr:\n            ind += jump\n            count += 1\n        curr = ind\n    print(count)", "for _ in range(int(input())):\n    N = int(input())\n    W = list(map(int, input().split()))\n    L = list(map(int, input().split()))\n    curr = W.index(1)\n    count = 0\n    for i in range(2, N + 1):\n        ind = W.index(i)\n        if ind > curr:\n            curr = ind\n            continue\n        jump = L[ind]\n        while ind <= curr:\n            ind += jump\n            count += 1\n        curr = ind\n    print(count)", "for z in range(int(input())):\n    n = int(input())\n    w = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    m = min(w)\n    j = w.index(m)\n    c = 0\n    for x in sorted(w):\n        i = w.index(x)\n        if i > j or x == m:\n            j = i\n            continue\n        k = j - i + 1\n        if k % l[i] == 0:\n            c += k // l[i]\n            j += 1\n        else:\n            c += 1 + k // l[i]\n            j = i + (1 + k // l[i]) * l[i]\n    print(c)", "for z in range(int(input())):\n    n = int(input())\n    w = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    m = min(w)\n    j = w.index(m)\n    c = 0\n    for x in sorted(w):\n        i = w.index(x)\n        if i > j or x == m:\n            j = i\n            continue\n        k = j - i + 1\n        if k % l[i] == 0:\n            c += k // l[i]\n            j += 1\n        else:\n            c += 1 + k // l[i]\n            j = i + (1 + k // l[i]) * l[i]\n    print(c)", "for t in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    if n == 2:\n        if w[0] == 1:\n            print(0)\n        elif l[0] > 1:\n            print(1)\n        else:\n            print(2)\n    elif n == 3:\n        c = 0\n        p = w.index(1)\n        q = w.index(2)\n        r = w.index(3)\n        l2 = l[q]\n        l3 = l[r]\n        while q <= p:\n            q += l2\n            c += 1\n        while r <= q:\n            r += l3\n            c += 1\n        print(c)\n    else:\n        c = 0\n        p = w.index(1)\n        q = w.index(2)\n        r = w.index(3)\n        s = w.index(4)\n        l2 = l[q]\n        l3 = l[r]\n        l4 = l[s]\n        while q <= p:\n            q += l2\n            c += 1\n        while r <= q:\n            r += l3\n            c += 1\n        while s <= r:\n            s += l4\n            c += 1\n        print(c)", "for _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    (minp, ans) = (0, 0)\n    for i in range(1, n + 1):\n        p = w.index(i)\n        if p > minp:\n            minp = p + 1\n            continue\n        d = l[p]\n        h = (minp - p) // d + 1 if (minp - p) % d else (minp - p) // d\n        ans += h\n        minp = p + h * d + 1\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    weight = list(map(int, input().split()))[:n]\n    jump = list(map(int, input().split()))[:n]\n    d = []\n    for i in range(n):\n        d.append((weight[i], i))\n    order = sorted(d)\n    y = order[0][1]\n    count = 0\n    order = dict(order)\n    for item in list(order.keys())[1:]:\n        x = order[item]\n        l = jump[x]\n        if y >= x:\n            t = int((y - x) / l) + 1\n            count += t\n            y = t * l + x\n        else:\n            y = x\n    print(count)", "t = int(input())\nfor i in range(t):\n    c = 0\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    d = {}\n    for j in range(len(l1)):\n        d[l1[j]] = [j + 1, l2[j]]\n    for k in range(2, len(l1) + 1):\n        while d[k][0] <= d[k - 1][0]:\n            d[k][0] += d[k][1]\n            c += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    c = 0\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    d = {}\n    for j in range(len(l1)):\n        d[l1[j]] = [j + 1, l2[j]]\n    for k in range(2, len(l1) + 1):\n        while d[k][0] <= d[k - 1][0]:\n            d[k][0] += d[k][1]\n            c += 1\n    print(c)", "for i in range(int(input())):\n    count = 0\n    num = int(input())\n    list1 = list(map(int, input().split()))\n    list2 = list(map(int, input().split()))\n    temp_d = dict()\n    for i in range(len(list1)):\n        temp_d[list1[i]] = [i + 1, list2[i]]\n    for j in range(2, len(list1) + 1):\n        while temp_d[j][0] <= temp_d[j - 1][0]:\n            temp_d[j][0] += temp_d[j][1]\n            count += 1\n    print(count)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    (d, s) = ({}, 0)\n    for i in range(1, n + 1):\n        d[i] = w.index(i)\n    for i in range(2, n + 1):\n        (t1, t2, t) = (d[i], d[i - 1], 0)\n        if t1 <= t2:\n            t = math.ceil((t2 + 1 - t1) / l[t1])\n        s += t\n        d[i] += t * l[t1]\n    print(s)", "import math\nn = int(input())\nfor eachcase in range(n):\n    frogs = int(input())\n    weight = list(map(int, input().split()))\n    leaps = list(map(int, input().split()))\n    hits = 0\n    position = [0, 0, 0, 0, 0]\n    posjumps = [0, 0, 0, 0, 0]\n    for numbers in range(1, frogs + 1):\n        position[weight[numbers - 1]] = numbers\n        posjumps[weight[numbers - 1]] = leaps[numbers - 1]\n    for index in range(2, frogs + 1):\n        if position[index] <= position[index - 1]:\n            hits += math.ceil((1 + position[index - 1] - position[index]) / posjumps[index])\n            position[index] += math.ceil((1 + position[index - 1] - position[index]) / posjumps[index]) * posjumps[index]\n    print(hits)", "import math\ntestcases = int(input())\nfor eachcase in range(testcases):\n    frogs = int(input())\n    weight = list(map(int, input().split()))\n    leaps = list(map(int, input().split()))\n    hits = 0\n    position = [0, 0, 0, 0, 0]\n    posjumps = [0, 0, 0, 0, 0]\n    for numbers in range(1, frogs + 1):\n        position[weight[numbers - 1]] = numbers\n        posjumps[weight[numbers - 1]] = leaps[numbers - 1]\n    for index in range(2, frogs + 1):\n        if position[index] <= position[index - 1]:\n            hits += math.ceil((1 + position[index - 1] - position[index]) / posjumps[index])\n            position[index] += math.ceil((1 + position[index - 1] - position[index]) / posjumps[index]) * posjumps[index]\n    print(hits)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    temp = []\n    for j in range(n):\n        temp.append([w[j], j + 1, l[j]])\n    temp.sort()\n    ct = 0\n    ind = 0\n    for j in temp:\n        index = j[1]\n        jump = j[2]\n        if index > ind:\n            ind = index\n            continue\n        else:\n            diff = ind - index\n            z = diff // jump\n            z = z + 1\n            ct += z\n            ind = index + z * jump\n    print(ct)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    temp = []\n    for j in range(n):\n        temp.append([w[j], j + 1, l[j]])\n    temp.sort()\n    ct = 0\n    ind = 0\n    for j in temp:\n        index = j[1]\n        jump = j[2]\n        if index > ind:\n            ind = index\n            continue\n        else:\n            diff = ind - index\n            z = diff // jump\n            z = z + 1\n            ct += z\n            ind = index + z * jump\n    print(ct)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    temp = []\n    for j in range(n):\n        temp.append([w[j], j + 1, l[j]])\n    temp.sort()\n    ct = 0\n    ind = 0\n    for j in temp:\n        index = j[1]\n        jump = j[2]\n        if index > ind:\n            ind = index\n            continue\n        else:\n            diff = ind - index\n            z = diff // jump\n            z = z + 1\n            ct += z\n            ind = index + z * jump\n    print(ct)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    ind = {}\n    s = 0\n    for j in range(1, n + 1):\n        ind[j] = w.index(j)\n    for j in range(2, n + 1):\n        temp1 = ind[j]\n        temp2 = ind[j - 1]\n        temp = 0\n        if temp1 <= temp2:\n            temp = math.ceil((temp2 + 1 - temp1) / l[temp1])\n        s += temp\n        ind[j] += temp * l[temp1]\n    print(s)", "def fun(arr, fun2):\n    n = len(arr)\n    lst = []\n    for i in range(n):\n        lst.append((arr[i], fun2[i], i))\n    lst = sorted(lst, key=lambda x: x[0])\n    ans = 0\n    curr = lst[0][-1]\n    for i in range(1, n):\n        (w, jump, next) = lst[i]\n        while next <= curr:\n            next += jump\n            ans += 1\n        curr = next\n    print(ans)\nn = int(input())\nfor i in range(n):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    fun2 = list(map(int, input().split()))\n    fun(arr, fun2)", "def pro(arr, pos):\n    n = len(arr)\n    lst = []\n    for i in range(n):\n        lst.append((arr[i], pos[i], i))\n    lst = sorted(lst, key=lambda x: x[0])\n    ans = 0\n    curr = lst[0][-1]\n    for i in range(1, n):\n        (w, jump, next) = lst[i]\n        while next <= curr:\n            next += jump\n            ans += 1\n        curr = next\n    print(ans)\nn = int(input())\nfor i in range(n):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pos = list(map(int, input().split()))\n    pro(arr, pos)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    ind = {}\n    s = 0\n    for i in range(1, n + 1):\n        ind[i] = w.index(i)\n    for i in range(2, n + 1):\n        temp1 = ind[i]\n        temp2 = ind[i - 1]\n        temp = 0\n        if temp1 <= temp2:\n            temp = math.ceil((temp2 + 1 - temp1) / l[temp1])\n        s += temp\n        ind[i] += temp * l[temp1]\n    print(s)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    ind = {}\n    s = 0\n    for i in range(1, n + 1):\n        ind[i] = w.index(i)\n    for i in range(2, n + 1):\n        temp1 = ind[i]\n        temp2 = ind[i - 1]\n        temp = 0\n        if temp1 <= temp2:\n            temp = math.ceil((temp2 + 1 - temp1) / l[temp1])\n        s += temp\n        ind[i] += temp * l[temp1]\n    print(s)", "for i in range(int(input())):\n    n = int(input())\n    weight = list(map(int, input().split()))[:n]\n    jump = list(map(int, input().split()))[:n]\n    d = []\n    for i in range(n):\n        d.append((weight[i], i))\n    order = sorted(d)\n    y = order[0][1]\n    count = 0\n    order = dict(order)\n    for item in list(order.keys())[1:]:\n        x = order[item]\n        l = jump[x]\n        if y >= x:\n            t = int((y - x) / l) + 1\n            count += t\n            y = t * l + x\n        else:\n            y = x\n    print(count)", "for i in range(int(input())):\n    n = int(input())\n    weight = list(map(int, input().split()))[:n]\n    jump = list(map(int, input().split()))[:n]\n    d = []\n    for i in range(n):\n        d.append((weight[i], i))\n    order = sorted(d)\n    y = order[0][1]\n    count = 0\n    order = dict(order)\n    for item in list(order.keys())[1:]:\n        x = order[item]\n        l = jump[x]\n        if y >= x:\n            t = int((y - x) / l) + 1\n            count += t\n            y = t * l + x\n        else:\n            y = x\n    print(count)", "for i in range(int(input())):\n    n = int(input())\n    weight = list(map(int, input().split()))[:n]\n    jump = list(map(int, input().split()))[:n]\n    d = []\n    for i in range(n):\n        d.append((weight[i], i))\n    order = sorted(d)\n    y = order[0][1]\n    count = 0\n    order = dict(order)\n    for item in list(order.keys())[1:]:\n        x = order[item]\n        l = jump[x]\n        if y >= x:\n            t = int((y - x) / l) + 1\n            count += t\n            y = t * l + x\n        else:\n            y = x\n    print(count)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    ind = {}\n    s = 0\n    for i in range(1, n + 1):\n        ind[i] = w.index(i)\n    for i in range(2, n + 1):\n        temp1 = ind[i]\n        temp2 = ind[i - 1]\n        temp = 0\n        if temp1 <= temp2:\n            temp = math.ceil((temp2 + 1 - temp1) / l[temp1])\n        s += temp\n        ind[i] += temp * l[temp1]\n    print(s)", "from math import ceil\n\ndef solve(length, w, l):\n    positions = dict()\n    for i in range(length):\n        positions[w[i]] = i\n\n    def find(elem):\n        return positions[elem]\n    total_jumps = 0\n    prev_pos = find(1)\n    for weight in range(2, length + 1):\n        cur_pos = find(weight)\n        a = ceil((prev_pos - cur_pos + 1) / l[cur_pos])\n        if a < 0:\n            a = 0\n        total_jumps += a\n        prev_pos = cur_pos + a * l[cur_pos]\n    return total_jumps\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        w = list(map(int, input().split(' ')))\n        l = list(map(int, input().split(' ')))\n        print(solve(N, w, l))\nmain()", "from math import ceil\n\ndef solve(length, w, l):\n\n    def find(elem):\n        i = 0\n        while w[i] != elem:\n            i += 1\n        return i\n    total_jumps = 0\n    prev_pos = find(1)\n    for weight in range(2, length + 1):\n        cur_pos = find(weight)\n        a = ceil((prev_pos - cur_pos + 1) / l[cur_pos])\n        if a < 0:\n            a = 0\n        total_jumps += a\n        prev_pos = cur_pos + a * l[cur_pos]\n    return total_jumps\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        w = list(map(int, input().split(' ')))\n        l = list(map(int, input().split(' ')))\n        print(solve(N, w, l))\nmain()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    temp = []\n    for j in range(n):\n        temp.append([w[j], j + 1, l[j]])\n    temp.sort()\n    ct = 0\n    ind = 0\n    for j in temp:\n        index = j[1]\n        jump = j[2]\n        if index > ind:\n            ind = index\n            continue\n        else:\n            diff = ind - index\n            z = diff // jump\n            z = z + 1\n            ct += z\n            ind = index + z * jump\n    print(ct)", "for _ in range(int(input())):\n    cnt = 0\n    n = int(input())\n    idx = list(map(int, input().split()))\n    wgt = list(map(int, input().split()))\n    d = dict()\n    for i in range(len(idx)):\n        d[idx[i]] = [i + 1, wgt[i]]\n    for j in range(2, len(idx) + 1):\n        while d[j][0] <= d[j - 1][0]:\n            d[j][0] += d[j][1]\n            cnt += 1\n    print(cnt)", "import math\nt = int(input())\nfor i in range(t):\n    a = int(input())\n    w = list(map(int, input().split()))[:a]\n    L = list(map(int, input().split()))[:a]\n    index = {}\n    ans = 0\n    for i in range(1, len(w) + 1):\n        index[i] = w.index(i)\n    for i in range(2, len(w) + 1):\n        val = 0\n        val1 = index[i]\n        val2 = index[i - 1]\n        if val1 <= val2:\n            val = math.ceil((val2 + 1 - val1) / L[val1])\n        ans += val\n        index[i] += val * L[val1]\n    print(ans)", "import math\n\ndef bubble_sort_efficient(array):\n    size = len(array)\n    for i in range(size - 1):\n        swapped = False\n        for j in range(0, size - i - 1):\n            if array[j] > array[j + 1]:\n                (array[j], array[j + 1]) = (array[j + 1], array[j])\n                swapped = True\n        if not swapped:\n            break\n    return array\ntest_cases = int(input())\nfor _ in range(test_cases):\n    N = int(input())\n    W = [int(inputs) for inputs in input().strip().split()]\n    L = [int(inputs) for inputs in input().strip().split()]\n    sorted_W = bubble_sort_efficient(W[:])\n    index_after = W.index(sorted_W[0])\n    count = 0\n    for i in range(1, len(W)):\n        index = W.index(sorted_W[i])\n        if index > index_after:\n            index_after = index\n            continue\n        jump_value = L[index]\n        minimum_position = index_after - index + 1\n        jump_required = math.ceil(minimum_position / jump_value)\n        index_after = index + jump_required * jump_value\n        count += jump_required\n    print(count)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    W = list(map(int, input().split()))\n    L = list(map(int, input().split()))\n    res = 0\n    if N == 2:\n        p = 0\n        q = 1\n        l1 = L[0]\n        if W[0] > W[1]:\n            while p <= q:\n                p += l1\n                res += 1\n        print(res)\n    elif N == 3:\n        for j in range(N):\n            if W[j] == 1:\n                p = j\n                l1 = L[j]\n            elif W[j] == 2:\n                q = j\n                l2 = L[j]\n            else:\n                r = j\n                l3 = L[j]\n        while q <= p:\n            q += l2\n            res += 1\n        while r <= q:\n            r += l3\n            res += 1\n        print(res)\n    elif N == 4:\n        for j in range(N):\n            if W[j] == 1:\n                p = j\n                l1 = L[j]\n            elif W[j] == 2:\n                q = j\n                l2 = L[j]\n            elif W[j] == 3:\n                r = j\n                l3 = L[j]\n            else:\n                s = j\n                l4 = L[j]\n        while q <= p:\n            q += l2\n            res += 1\n        while r <= q:\n            r += l3\n            res += 1\n        while s <= r:\n            s += l4\n            res += 1\n        print(res)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    W = list(map(int, input().split()))\n    L = list(map(int, input().split()))\n    res = 0\n    if N == 2:\n        p = 0\n        q = 1\n        l1 = L[0]\n        if W[0] > W[1]:\n            while p <= q:\n                p += l1\n                res += 1\n        print(res)\n    elif N == 3:\n        for j in range(N):\n            if W[j] == 1:\n                p = j\n                l1 = L[j]\n            elif W[j] == 2:\n                q = j\n                l2 = L[j]\n            else:\n                r = j\n                l3 = L[j]\n        while q <= p:\n            q += l2\n            res += 1\n        while r <= q:\n            r += l3\n            res += 1\n        print(res)\n    elif N == 4:\n        for j in range(N):\n            if W[j] == 1:\n                p = j\n                l1 = L[j]\n            elif W[j] == 2:\n                q = j\n                l2 = L[j]\n            elif W[j] == 3:\n                r = j\n                l3 = L[j]\n            else:\n                s = j\n                l4 = L[j]\n        while q <= p:\n            q += l2\n            res += 1\n        while r <= q:\n            r += l3\n            res += 1\n        while s <= r:\n            s += l4\n            res += 1\n        print(res)", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    count = 0\n    d = dict()\n    for i in range(0, len(w)):\n        d[w[i]] = [i + 1, l[i]]\n    for j in range(2, len(w) + 1):\n        while d[j][0] <= d[j - 1][0]:\n            d[j][0] += d[j][1]\n            count += 1\n    print(count)", "def solve(l, idi, wei):\n    cnt = 0\n    d = dict()\n    for i in range(0, len(idi)):\n        d[idi[i]] = [i + 1, wei[i]]\n    for j in range(2, len(idi) + 1):\n        while d[j][0] <= d[j - 1][0]:\n            d[j][0] += d[j][1]\n            cnt += 1\n    return cnt\ntest = int(input())\nfor _ in range(test):\n    l = int(input())\n    a = list(map(int, input().rstrip().split()))\n    b = list(map(int, input().rstrip().split()))\n    print(solve(l, a, b))", "t = int(input())\nfor _ in range(t):\n    cnt = 0\n    n = int(input())\n    idi = list(map(int, input().split()))\n    wei = list(map(int, input().split()))\n    d = dict()\n    for i in range(0, len(idi)):\n        d[idi[i]] = [i + 1, wei[i]]\n    for j in range(2, len(idi) + 1):\n        while d[j][0] <= d[j - 1][0]:\n            d[j][0] += d[j][1]\n            cnt += 1\n    print(cnt)", "t = int(input())\nfor _ in range(t):\n    cnt = 0\n    n = int(input())\n    idi = list(map(int, input().split()))\n    wei = list(map(int, input().split()))\n    d = dict()\n    for i in range(0, len(idi)):\n        d[idi[i]] = [i + 1, wei[i]]\n    for j in range(2, len(idi) + 1):\n        while d[j][0] <= d[j - 1][0]:\n            d[j][0] += d[j][1]\n            cnt += 1\n    print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    d = {}\n    jump = 0\n    for i in range(n):\n        d[w[i]] = i + 1\n    for i in range(2, n + 1):\n        a = l[d[i] - 1]\n        while d[i - 1] >= d[i]:\n            d[i] += a\n            jump += 1\n    print(jump)", "import math\ntry:\n    t = int(input())\n    while t > 0:\n        n = int(input())\n        w = list(map(int, input().split()))\n        l = list(map(int, input().split()))\n        steps = 0\n        dict1 = {}\n        for i in range(1, n + 1):\n            dict1[i] = w.index(i)\n        for i in range(2, n + 1):\n            t1 = dict1[i]\n            t2 = dict1[i - 1]\n            temp = 0\n            if t1 <= t2:\n                temp = math.ceil((t2 + 1 - t1) / l[t1])\n            steps += temp\n            dict1[i] += temp * l[t1]\n        print(steps)\n        t = t - 1\nexcept:\n    pass", "def prog_name():\n    n = int(input())\n    w = list(map(int, input().split()))\n    j = list(map(int, input().split()))\n    i = [x for x in range(n)]\n    wsort = sorted(w)\n    luffy = 0\n    for x in range(1, len(w)):\n        second = w.index(wsort[x])\n        prev = w.index(wsort[x - 1])\n        while i[second] <= i[prev]:\n            luffy += 1\n            i[second] += j[second]\n    print(luffy)\nt = int(input())\nfor unique in range(t):\n    prog_name()", "for _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    pos = list(range(n))\n    wsort = sorted(w)\n    if w == wsort:\n        print(0)\n    else:\n        hits = 0\n        for i in range(1, n):\n            temp = w.index(wsort[i])\n            prev = w.index(wsort[i - 1])\n            if pos[temp] > pos[prev]:\n                continue\n            else:\n                while pos[temp] <= pos[prev]:\n                    hits += 1\n                    pos[temp] += l[temp]\n        print(hits)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    dict = {}\n    ans = 0\n    for i in range(1, n + 1):\n        dict[i] = w.index(i)\n    for i in range(2, n + 1):\n        x = dict[i]\n        y = dict[i - 1]\n        z = 0\n        if x <= y:\n            z = math.ceil((y - x + 1) / l[x])\n        ans += z\n        dict[i] += z * l[x]\n    print(ans)", "import math\nt = int(input())\nwhile t:\n    n = int(input())\n    a = list((int(i) for i in input().split(' ')))\n    p = list((int(i) for i in input().split(' ')))\n    arr = [0] * 100\n    arr[a.index(1)] = 1\n    count = 0\n    for i in range(2, n + 1):\n        if arr.index(i - 1) < a.index(i):\n            arr[a.index(i)] = i\n        elif int((arr.index(i - 1) + 1 - a.index(i)) / p[a.index(i)]) <= 0:\n            arr[a.index(i) + p[a.index(i)]] = i\n            count += 1\n        else:\n            arr[a.index(i) + math.ceil((arr.index(i - 1) + 1 - a.index(i)) / p[a.index(i)]) * p[a.index(i)]] = i\n            count += math.ceil((arr.index(i - 1) + 1 - a.index(i)) / p[a.index(i)])\n    print(count)\n    t -= 1", "t = int(input())\nans = []\nwhile t:\n    slist = [0] * 30\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    m = min(w)\n    for i in range(n):\n        slist[i] = w[i]\n    kick = 0\n    lastpos = w.index(m)\n    for i in range(n - 1):\n        mv = min((j for j in w if j > m))\n        if w.index(mv) > lastpos:\n            m = mv\n            lastpos = w.index(mv)\n            continue\n        else:\n            nextpos = w.index(mv)\n            inc = l[w.index(mv)]\n            while True:\n                kick += 1\n                nextpos += inc\n                if nextpos > lastpos:\n                    slist[nextpos] = mv\n                    lastpos = nextpos\n                    break\n        m = mv\n    ans.append(kick)\n    t -= 1\nfor i in ans:\n    print(i)", "from math import ceil\nT = int(input())\nans = []\nfor _ in range(T):\n    N = int(input())\n    W = [int(i) for i in input().split()]\n    L = [int(i) for i in input().split()]\n    P = {}\n    for i in range(N):\n        P[i] = i\n    visited = [False for i in range(N)]\n    count = 0\n    for i in range(N):\n        mn = float('inf')\n        mi = None\n        for j in range(N):\n            if W[j] < mn and visited[j] == False:\n                mn = W[j]\n                mi = j\n        visited[mi] = True\n        for j in range(N):\n            if P[j] <= P[mi] and W[j] > W[mi]:\n                x = (P[mi] - P[j]) / L[j]\n                if x == int(x):\n                    count += x + 1\n                    P[j] += L[j] * (x + 1)\n                else:\n                    count += ceil(x)\n                    P[j] += L[j] * ceil(x)\n    ans.append(int(count))\nfor i in ans:\n    print(i)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    A = []\n    for __ in range(n):\n        A.append([w[__], l[__]])\n    B = sorted(A)\n    pos = 0\n    for i in range(n):\n        if A[i][0] == B[0][0] and A[i][1] == B[0][1]:\n            pos = i\n    ans = 0\n    for i in range(1, n):\n        newpos = i\n        for j in range(n):\n            if A[j][0] == B[i][0] and A[j][1] == B[i][1]:\n                newpos = j\n        req = pos + 1\n        noofjumps = 0\n        if req - newpos > 0:\n            noofjumps = math.ceil((req - newpos) / B[i][1])\n        ans += noofjumps\n        pos = newpos + B[i][1] * noofjumps\n    print(ans)", "a = int(input())\nfor i in range(a):\n    n = int(input())\n    li = list(map(int, input().split()))\n    li2 = list(map(int, input().split()))\n    res = 0\n    if n == 2:\n        if li[0] < li[1]:\n            res = 0\n        elif li2[0] == 1:\n            res = 2\n        else:\n            res = 1\n    dict2 = {}\n    dict1 = {}\n    k = 1\n    if n == 3:\n        for j in li:\n            dict2[j] = k\n            dict1[j] = k\n            k = k + 1\n        while 1:\n            if dict2[1] >= dict2[2]:\n                dict2[2] = dict2[2] + li2[dict1[2] - 1]\n                res = res + 1\n            else:\n                break\n        while 1:\n            if dict2[2] >= dict2[3]:\n                dict2[3] = dict2[3] + li2[dict1[3] - 1]\n                res = res + 1\n            else:\n                break\n    k = 1\n    if n == 4:\n        for j in li:\n            dict2[j] = k\n            dict1[j] = k\n            k = k + 1\n        while 1:\n            if dict2[1] >= dict2[2]:\n                dict2[2] = dict2[2] + li2[dict1[2] - 1]\n                res = res + 1\n            else:\n                break\n        while 1:\n            if dict2[2] >= dict2[3]:\n                dict2[3] = dict2[3] + li2[dict1[3] - 1]\n                res = res + 1\n            else:\n                break\n        while 1:\n            if dict2[3] >= dict2[4]:\n                dict2[4] = dict2[4] + li2[dict1[4] - 1]\n                res = res + 1\n            else:\n                break\n    print(res)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    t = sorted(l)\n    c = l.index(1)\n    p = 0\n    for i in range(1, n):\n        k = l.index(t[i])\n        if k > c:\n            c = k\n            continue\n        j = math.ceil((abs(c - k) + 1) / m[k])\n        if j == 0:\n            j += 1\n        p += j\n        c = k + j * m[k]\n    print(p)", "def frogSort(w, l):\n    hits = 0\n    pos = {}\n    i = 0\n    while i < len(w):\n        tracker = list()\n        tracker.append(i)\n        tracker.append(l[i])\n        pos[w[i]] = tracker\n        i += 1\n    i = 1\n    while i < len(w):\n        while pos[i][0] >= pos[i + 1][0]:\n            pos[i + 1][0] += pos[i + 1][1]\n            hits += 1\n        i += 1\n    return hits\nt = int(input())\nfor i in range(t):\n    size = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    print(frogSort(w, l))", "import math\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        w = list(map(int, input().split()))\n        l = list(map(int, input().split()))\n        pos = [None] * (n + 1)\n        jump = [None] * (n + 1)\n        for i in range(0, n):\n            pos[w[i]] = i\n            jump[w[i]] = l[i]\n        inc = 0\n        if pos[2] <= pos[1]:\n            hit = math.ceil(float(pos[1] - pos[2] + 1) / jump[2])\n            inc += hit\n            pos[2] += hit * jump[2]\n        if n > 2:\n            if pos[3] <= pos[2]:\n                hit = math.ceil(float(pos[2] - pos[3] + 1) / jump[3])\n                inc += hit\n                pos[3] += hit * jump[3]\n        if n > 3:\n            if pos[4] <= pos[3]:\n                hit = math.ceil(float(pos[3] - pos[4] + 1) / jump[4])\n                inc += hit\n                pos[4] += hit * jump[4]\n        print(inc)\nexcept EOFError as t:\n    pass", "import math\n\ndef frogSort(N, W, L):\n    Pos = [-1 for i in range(N + 1)]\n    for i in range(1, N + 1):\n        Pos[i] = W.index(i)\n    totHit = 0\n    for i in range(2, N + 1):\n        if Pos[i - 1] - Pos[i] >= 0:\n            hit = math.ceil((Pos[i - 1] - Pos[i] + 1) / L[W.index(i)])\n            totHit += hit\n            Pos[i] += L[W.index(i)] * hit\n    return totHit\nfor _ in range(int(input())):\n    N = int(input())\n    W = list(map(int, input().split()))\n    L = list(map(int, input().split()))\n    print(frogSort(N, W, L))", "import math\nfor t in range(int(input())):\n    n = int(input())\n    weight = list(map(int, input().split()))\n    length = list(map(int, input().split()))\n    ind = {}\n    s = 0\n    for i in range(1, n + 1):\n        ind[i] = weight.index(i)\n    for i in range(2, n + 1):\n        temp1 = ind[i]\n        temp2 = ind[i - 1]\n        temp = 0\n        if temp1 <= temp2:\n            temp = math.ceil((temp2 + 1 - temp1) / length[temp1])\n        s += temp\n        ind[i] += temp * length[temp1]\n    print(s)", "for _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    d = {}\n    le = {}\n    for i in range(n):\n        d.update({w[i]: i + 1})\n        le.update({w[i]: l[i]})\n    z = {}\n    for i in sorted(d):\n        z.update({i: d[i]})\n    c = 0\n    for i in range(2, n + 1):\n        while z[i] <= z[i - 1]:\n            z[i] = z[i] + le[i]\n            c = c + 1\n    print(c)", "def find(i, w):\n    for j in range(len(w)):\n        if w[j] == i:\n            return j\n    return -1\n\ndef frogsort(w, l, n):\n    p = [x for x in range(n)]\n    ans = 0\n    for i in range(2, n + 1):\n        f = find(i, w)\n        e = find(i - 1, w)\n        while p[f] <= p[e]:\n            ans += 1\n            p[f] += l[f]\n    return ans\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    w = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    print(frogsort(w, l, n))", "from math import ceil\nt = int(input())\nwhile t:\n    n = int(input())\n    A = dict()\n    B = dict()\n    wx = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    w = sorted(wx)\n    for i in range(len(w)):\n        A[wx[i]] = i\n    for j in range(len(l)):\n        B[wx[j]] = l[j]\n    count = 0\n    for i in range(len(w) - 1):\n        if A[w[i + 1]] <= A[w[i]]:\n            jump = int((A[w[i]] - A[w[i + 1]]) / B[w[i + 1]]) + 1\n            A[w[i + 1]] += jump * B[w[i + 1]]\n            count += jump\n    print(count)\n    t -= 1", "import math\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    pos = [-1 for _ in range(n + 1)]\n    lw = [-1 for _ in range(n + 1)]\n    for i in range(n):\n        pos[w[i]] = i\n    for i in range(n):\n        lw[w[i]] = l[i]\n    ans = 0\n    for i in range(1, n):\n        if pos[i + 1] <= pos[i]:\n            hits = math.ceil((pos[i] - pos[i + 1] + 1) / lw[i + 1])\n            ans += hits\n            pos[i + 1] += hits * lw[i + 1]\n    print(ans)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    weight = list(map(int, input().split()))\n    length = list(map(int, input().split()))\n    ind = {}\n    s = 0\n    for i in range(1, n + 1):\n        ind[i] = weight.index(i)\n    for i in range(2, n + 1):\n        temp1 = ind[i]\n        temp2 = ind[i - 1]\n        temp = 0\n        if temp1 <= temp2:\n            temp = math.ceil((temp2 + 1 - temp1) / length[temp1])\n        s += temp\n        ind[i] += temp * length[temp1]\n    print(s)", "import math, sys\nfrom collections import defaultdict, Counter, deque\nfrom bisect import bisect_left, bisect_right\nINF = float('inf')\nMOD = int(1000000000.0) + 7\nMAX = int(1000000.0) + 1\n\ndef solve():\n    n = int(input())\n    arr = array()\n    jumps = array()\n    index = {}\n    for i in range(n):\n        index[arr[i]] = i\n    ans = sorted(arr)\n    prev = -1\n    res = 0\n    for i in range(n):\n        j = index[ans[i]]\n        jump = jumps[j]\n        if prev != -1 or j <= prev:\n            while j <= prev:\n                j += jump\n                res += 1\n        prev = j\n    print(res)\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef input():\n    return sys.stdin.readline().rstrip('\\n').strip()\n\ndef print(*args, sep=' ', end='\\n'):\n    first = True\n    for arg in args:\n        if not first:\n            sys.stdout.write(sep)\n        sys.stdout.write(str(arg))\n        first = False\n    sys.stdout.write(end)\nprimes = [1 for i in range(MAX)]\n\ndef sieve():\n    global primes\n    primes[0] = primes[1] = 0\n    i = 2\n    while i <= MAX ** 0.5:\n        j = i * i\n        while primes[i] and j < MAX:\n            if j % i == 0:\n                primes[j] = 0\n            j += i\n        i += 1\n\ndef vars():\n    return map(int, input().split())\n\ndef array():\n    return list(map(int, input().split()))\nmain()", "import math\nfor _ in range(int(input())):\n    N = int(input())\n    W = [int(x) for x in input().split()]\n    L = [int(x) for x in input().split()]\n    pos = [0] * (N + 1)\n    L_inv = [0] * (N + 1)\n    for i in range(N):\n        pos[W[i]] = i\n        L_inv[W[i]] = L[i]\n    (ans, hits) = (0, 0)\n    if pos[2] <= pos[1]:\n        hits = math.ceil((pos[1] - pos[2] + 1) / L_inv[2])\n        ans += hits\n        pos[2] += hits * L_inv[2]\n    if N > 2:\n        if pos[3] <= pos[2]:\n            hits = math.ceil((pos[2] - pos[3] + 1) / L_inv[3])\n            ans += hits\n            pos[3] += hits * L_inv[3]\n    if N > 3:\n        if pos[4] <= pos[3]:\n            hits = math.ceil((pos[3] - pos[4] + 1) / L_inv[4])\n            ans += hits\n            pos[4] += hits * L_inv[4]\n    print(ans)", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    weights = list(map(int, input().split()))\n    leaps = list(map(int, input().split()))\n    frog = [[weights[i], i, leaps[i]] for i in range(n)]\n    frog.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if frog[j][0] > frog[i][0] and frog[j][1] <= frog[i][1]:\n                dist = frog[i][1] + 1 - frog[j][1]\n                jmps_req = ceil(dist / frog[j][2])\n                ans += jmps_req\n                frog[j][1] += jmps_req * frog[j][2]\n    print(ans)", "for test_case in range(int(input())):\n    size = int(input())\n    weight = [int(x) for x in input().split()]\n    step = [int(x) for x in input().split()]\n    hit = 0\n    weightPos = {}\n    for i in range(size):\n        weightPos[weight[i]] = i\n    weight.sort()\n    lastPos = weightPos[weight[0]]\n    for i in range(1, size):\n        currPos = weightPos[weight[i]]\n        index = weightPos[weight[i]]\n        while lastPos >= currPos:\n            currPos += step[index]\n            hit += 1\n        lastPos = currPos\n    print(hit)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    weight = list(map(int, input().split()))\n    length = list(map(int, input().split()))\n    ind = {}\n    s = 0\n    for i in range(1, n + 1):\n        ind[i] = weight.index(i)\n    for i in range(2, n + 1):\n        temp1 = ind[i]\n        temp2 = ind[i - 1]\n        temp = 0\n        if temp1 <= temp2:\n            temp = math.ceil((temp2 + 1 - temp1) / length[temp1])\n        s += temp\n        ind[i] += temp * length[temp1]\n    print(s)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    ind = {}\n    s = 0\n    for i in range(1, n + 1):\n        ind[i] = w.index(i)\n    for i in range(2, n + 1):\n        temp1 = ind[i]\n        temp2 = ind[i - 1]\n        temp = 0\n        if temp1 <= temp2:\n            temp = math.ceil((temp2 - temp1 + 1) / l[temp1])\n        s += temp\n        ind[i] += l[temp1] * temp\n    print(s)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    weight = list(map(int, input().split()))\n    length = list(map(int, input().split()))\n    ind = {}\n    s = 0\n    for i in range(1, n + 1):\n        ind[i] = weight.index(i)\n    for i in range(2, n + 1):\n        temp1 = ind[i]\n        temp2 = ind[i - 1]\n        temp = 0\n        if temp1 <= temp2:\n            temp = math.ceil((temp2 + 1 - temp1) / length[temp1])\n        s += temp\n        ind[i] += temp * length[temp1]\n    print(s)", "try:\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        warr = list(map(int, input().split()))\n        larr = list(map(int, input().split()))\n        positions = [[0, 0] for i in range(n)]\n        for i in warr:\n            positions[i - 1][0] = warr.index(i)\n            positions[i - 1][1] = larr[warr.index(i)]\n        output = 0\n        for i in range(1, n):\n            if positions[i][0] <= positions[i - 1][0]:\n                pos_diff = positions[i - 1][0] - positions[i][0]\n                inc = positions[i][1]\n                jumps = pos_diff // inc + 1\n                output += jumps\n                positions[i][0] += jumps * inc\n        print(output)\nexcept EOFError:\n    pass", "t = int(input())\nwhile t > 0:\n    t -= 1\n    N = int(input())\n    wi = list(map(int, input().split()))\n    li = list(map(int, input().split()))\n    si = [0] * N\n    pi = [0] * N\n    for i in range(0, N):\n        si[i] = li[wi.index(i + 1)]\n        pi[wi[i] - 1] = i\n    lock = 0\n    count = 0\n    while lock == 0:\n        flag = 0\n        for i in range(0, N - 1):\n            if pi[i] >= pi[i + 1]:\n                pi[i + 1] += si[i + 1]\n                flag = 1\n                count += 1\n        if flag == 0:\n            lock = 1\n    print(count)", "for _ in range(int(input())):\n    N = int(input())\n    pos = {}\n    W = [int(x) for x in input().split()]\n    L = [int(x) for x in input().split()]\n    for i in range(N):\n        pos[W[i]] = [i + 1, L[i]]\n    cnt = 0\n    for w in range(2, N + 1):\n        while pos[w][0] <= pos[w - 1][0]:\n            pos[w][0] += pos[w][1]\n            cnt += 1\n    print(cnt)", "import math\nfor test_case in range(int(input())):\n    n = int(input())\n    w = [int(x) for x in input().split()]\n    l = [int(y) for y in input().split()]\n    wIndex = {}\n    wL = {}\n    output = 0\n    for x in w:\n        wIndex[w[x - 1]] = x\n        wL[w[x - 1]] = l[x - 1]\n    for i in range(2, n + 1):\n        if wIndex[i - 1] >= wIndex[i]:\n            output += math.ceil((wIndex[i - 1] - wIndex[i] + 1) / wL[i])\n            wIndex[i] += math.ceil((wIndex[i - 1] - wIndex[i] + 1) / wL[i]) * wL[i]\n    print(output)", "t = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))[:n]\n    b = list(map(int, input().split()))[:n]\n    c = []\n    d = []\n    for i in range(n):\n        c.append(0)\n        d.append(0)\n    step = 0\n    steps = 0\n    for i in range(n):\n        c[a[i] - 1] = i\n        d[a[i] - 1] = b[i]\n    for i in range(n - 1):\n        if c[i] >= c[i + 1]:\n            step = int((c[i] - c[i + 1]) / d[i + 1]) + 1\n            c[i + 1] += d[i + 1] * step\n            steps += step\n    print(steps)\n    t = t - 1", "import sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\nfrom collections import *\nORDA = 97\n\ndef ii():\n    return int(input())\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return [int(i) for i in input().split()]\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\n\ndef revn(n):\n    return str(n)[::-1]\n\ndef dd():\n    return collections.defaultdict(int)\n\ndef ddl():\n    return collections.defaultdict(list)\n\ndef sieve(n):\n    if n < 2:\n        return list()\n    prime = [True for _ in range(n + 1)]\n    p = 3\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 2\n    r = [2]\n    for p in range(3, n + 1, 2):\n        if prime[p]:\n            r.append(p)\n    return r\n\ndef divs(n, start=2):\n    r = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            if n / i == i:\n                r.append(i)\n            else:\n                r.extend([i, n // i])\n    return r\n\ndef divn(n, primes):\n    divs_number = 1\n    for i in primes:\n        if n == 1:\n            return divs_number\n        t = 1\n        while n % i == 0:\n            t += 1\n            n //= i\n        divs_number *= t\n\ndef prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n    sqr = int(math.sqrt(n)) + 1\n    for d in range(3, sqr, 2):\n        if n % d == 0:\n            return False\n    return True\n\ndef convn(number, base):\n    new_number = 0\n    while number > 0:\n        new_number += number % base\n        number //= base\n    return new_number\n\ndef cdiv(n, k):\n    return n // k + (n % k != 0)\n\ndef ispal(s):\n    for i in range(len(s) // 2 + 1):\n        if s[i] != s[-i - 1]:\n            return False\n    return True\n\ndef function(arr, size, dp):\n    if size == 1 or size == 0:\n        return 1\n    key = ''.join(map(str, arr[:size]))\n    if dp[key]:\n        return dp[key]\n    output = function(arr, size - 1, dp)\n    key = ''.join(map(str, arr[:size - 1]))\n    dp[key] = output\n    if arr[size - 2] * 10 + arr[size - 1] <= 26:\n        output += function(arr, size - 2, dp)\n        key = ''.join(map(str, arr[:size - 2]))\n        dp[key] = output\n    return output\n\ndef main():\n    for _ in range(ii()):\n        n = ii()\n        fweight = li()\n        l = li()\n        d = {}\n        for i in range(n):\n            d[fweight[i]] = l[i]\n        prev_frog = fweight.index(1)\n        hits = 0\n        for f in range(2, n + 1, 1):\n            cur_frog = fweight.index(f)\n            if cur_frog > prev_frog:\n                prev_frog = cur_frog\n                continue\n            else:\n                while cur_frog <= prev_frog:\n                    hits += 1\n                    cur_frog += d[f]\n                prev_frog = cur_frog\n        print(hits)\nmain()", "t = int(input())\nfor i in range(t):\n    N = int(input())\n    a = input()\n    W = a.split(' ')\n    b = input()\n    L = b.split(' ')\n    n = 0\n    tap = 0\n    for i in range(len(W)):\n        W[i] = int(W[i])\n    link = {}\n    for i in range(1, N + 1):\n        link[i] = W.index(i)\n    for i in range(2, N + 1):\n        temp1 = link.get(i)\n        temp2 = link.get(i - 1)\n        if temp2 >= temp1:\n            n = (temp2 - temp1) // int(L[W.index(i)]) + 1\n            tap += n\n            link[i] += n * int(L[W.index(i)])\n    print(tap)", "n = int(input())\nfor i in range(0, n):\n    nf = int(input())\n    f = list(map(int, input().split()))\n    fw = list(map(int, input().split()))\n    p = {}\n    w = {}\n    c = 0\n    s = sorted(f)\n    for j in range(0, len(f)):\n        p[f[j]] = j\n        w[f[j]] = fw[j]\n    while p[s[1]] <= p[s[0]]:\n        p[s[1]] = p[s[1]] + w[s[1]]\n        c = c + 1\n    if nf >= 3:\n        while p[s[2]] <= p[s[1]]:\n            p[s[2]] = p[s[2]] + w[s[2]]\n            c = c + 1\n    if nf == 4:\n        while p[s[3]] <= p[s[2]]:\n            p[s[3]] = p[s[3]] + w[s[3]]\n            c = c + 1\n    print(c)", "import math\nt = int(input())\nfor testcases in range(t):\n    n = int(input())\n    W = [int(x) for x in input().split(' ')]\n    P = [-1] * n\n    for w in range(n):\n        P[W[w] - 1] = w\n    L = [int(x) for x in input().split(' ')]\n    max_index = n\n    curr_index = 0\n    count = 0\n    for p in range(1, n):\n        if P[p] <= P[p - 1]:\n            ce = math.ceil((P[p - 1] - P[p] + 1) / L[P[p]])\n            count += ce\n            P[p] += L[P[p]] * ce\n    print(count)", "from collections import Counter, defaultdict\nfrom math import ceil\nfor i in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    a = sorted(w)\n    j = 1\n    ans = 0\n    indp = w.index(a[j - 1])\n    while j < n:\n        ind = w.index(a[j])\n        cind = ind\n        while ind <= indp:\n            ind += l[cind]\n            ans += 1\n        indp = ind\n        j += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    temp = list(map(int, input().split()))\n    k = 0\n    curIndex = {}\n    cap = {}\n    for j in arr:\n        curIndex[j] = k\n        cap[j] = temp[k]\n        k = k + 1\n    cnt = 0\n    for r in range(2, n + 1):\n        x = 0\n        a = curIndex[r]\n        b = curIndex[r - 1]\n        if a <= b:\n            diff = b - a\n            x = int(diff / cap[r]) + 1\n            curIndex[r] = curIndex[r] + x * cap[r]\n        cnt = cnt + x\n    print(cnt)", "for _ in range(int(input())):\n    N = int(input())\n    W = list(map(int, input().split()))\n    L = list(map(int, input().split()))\n    pos = {}\n    for i in range(N):\n        pos[W[i]] = i + 1\n    init_pos = pos\n    hits = 0\n    for i in range(2, N + 1):\n        jumps = L[init_pos[i] - 1]\n        if pos[i] <= pos[i - 1]:\n            separation = pos[i - 1] - pos[i]\n            if separation < jumps:\n                hits += 1\n                pos[i] += jumps\n            else:\n                hits = hits + separation // jumps + 1\n                pos[i] += jumps * (separation // jumps + 1)\n    print(hits)", "import math\n\ndef sol():\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    sorted_arr = True\n    pos = dict()\n    for i in range(n):\n        pos[w[i]] = i\n    step = dict()\n    for i in range(n):\n        step[w[i]] = l[i]\n    for i in range(n):\n        if pos[i + 1] != i:\n            sorted_arr = False\n            break\n    if sorted_arr:\n        return 0\n    hit = 0\n    for i in range(2, n + 1):\n        if pos[i] <= pos[i - 1]:\n            temp = math.ceil((pos[i - 1] - pos[i] + 1) / step[i])\n            hit += temp\n            pos[i] += temp * step[i]\n    return hit\ntests = int(input())\nfor _ in range(tests):\n    print(sol())", "import math\n\ndef sol():\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    sorted_arr = True\n    pos = dict()\n    for i in range(n):\n        pos[w[i]] = i\n    step = dict()\n    for i in range(n):\n        step[w[i]] = l[i]\n    for i in range(n):\n        if pos[i + 1] != i:\n            sorted_arr = False\n            break\n    if sorted_arr:\n        return 0\n    hit = 0\n    for i in range(2, n + 1):\n        if pos[i] <= pos[i - 1]:\n            temp = math.ceil((pos[i - 1] - pos[i]) / step[i])\n            hit += temp\n            pos[i] += temp * step[i]\n            if pos[i] == pos[i - 1]:\n                pos[i] += step[i]\n                hit += 1\n    return hit\ntests = int(input())\nfor _ in range(tests):\n    print(sol())", "import math\n\ndef hitt(p1, p2, l):\n    i = math.ceil((p1 - p2 + 1) / l)\n    return i\nfor _ in range(int(input())):\n    n = int(input())\n    n_w = list(map(int, input().split()[:n]))\n    n_l = list(map(int, input().split()[:n]))\n    hit = 0\n    j = 0\n    p1 = n_w.index(1)\n    p2 = n_w.index(2)\n    if n >= 1 and p1 >= p2:\n        j = hitt(p1, p2, n_l[p2])\n        hit += j\n    p1 = p2 + j * n_l[p2]\n    if n >= 2:\n        for i in range(1, n - 1):\n            j = 0\n            p2 = n_w.index(i + 2)\n            l = n_l[p2]\n            if p1 >= p2:\n                j = hitt(p1, p2, l)\n                hit += j\n            p1 = p2 + j * n_l[p2]\n    print(hit)", "t = int(input())\nfor i in range(t):\n    d = int(input())\n    c = input().rstrip().split(' ')\n    f = input().rstrip().split(' ')\n    dictt = dict()\n    for j in c:\n        dictt.setdefault(int(j), c.index(j))\n    c.sort()\n    hit = 0\n    for o in range(len(c) - 1):\n        l = int(c[o])\n        k = int(c[o + 1])\n        index = dictt.get(k)\n        while dictt.get(k) <= dictt.get(l):\n            dictt[k] = dictt.get(k) + int(f[index])\n            hit = hit + 1\n    print(hit)", "import math\n\ndef sol():\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    sorted_arr = True\n    pos = dict()\n    for i in range(n):\n        pos[w[i]] = i\n    step = dict()\n    for i in range(n):\n        step[w[i]] = l[i]\n    for i in range(n):\n        if pos[i + 1] != i:\n            sorted_arr = False\n            break\n    if sorted_arr:\n        return 0\n    hit = 0\n    for i in range(2, n + 1):\n        if pos[i] <= pos[i - 1]:\n            temp = math.ceil((pos[i - 1] - pos[i]) / step[i])\n            hit += temp\n            pos[i] += temp * step[i]\n            if pos[i] == pos[i - 1]:\n                pos[i] += step[i]\n                hit += 1\n    return hit\ntests = int(input())\nfor _ in range(tests):\n    print(sol())", "tcase = int(input())\nfor i in range(tcase):\n    n = int(input())\n    wi = input().split()\n    wi = list(map(int, wi))\n    li = input().split()\n    li = list(map(int, li))\n    pos = range(1, n + 1)\n    lipos = list()\n    for j in range(n):\n        temp = (li[j], pos[j])\n        lipos.append(temp)\n    res = dict(zip(wi, lipos))\n    wi.sort()\n    templt1 = []\n    templt2 = []\n    for j in range(n):\n        templt1.append(res[wi[j]][0])\n        templt2.append(res[wi[j]][1])\n    li = templt1\n    pos = templt2\n    count = 0\n    for j in range(n - 1):\n        if pos[j] >= pos[j + 1]:\n            temp2 = (pos[j] - pos[j + 1]) // li[j + 1] + 1\n            pos[j + 1] = pos[j + 1] + temp2 * li[j + 1]\n            count = count + temp2\n    print(count)", "for test in range(int(input())):\n    n = int(input())\n    weights = list(map(int, input().split()))\n    leaps = list(map(int, input().split()))\n    position = {weights[ind]: ind + 1 for ind in range(n)}\n    link = dict(zip(weights, leaps))\n    hits = 0\n    for i in range(1, n):\n        if position[i] >= position[i + 1]:\n            ihit = 1 + (position[i] - position[i + 1]) // link[i + 1]\n            hits += ihit\n            position[i + 1] += ihit * link[i + 1]\n    print(hits)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    frogs = []\n    for i in range(n):\n        frogs.append([w[i], l[i], i])\n    result = 0\n    for i in range(100):\n        for j in range(n - 1):\n            if frogs[j][0] > frogs[j + 1][0]:\n                frogs[j][2] += frogs[j][1]\n                result += 1\n            frogs.sort(key=lambda x: x[2])\n    for i in range(1, n):\n        while frogs[i][2] <= frogs[i - 1][2]:\n            frogs[i][2] += frogs[i][1]\n            result += 1\n    print(result)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    frogs = []\n    for i in range(n):\n        frogs.append([w[i], l[i], i])\n    result = 0\n    for i in range(100):\n        for j in range(n - 1):\n            if frogs[j][0] > frogs[j + 1][0]:\n                frogs[j][2] += frogs[j][1]\n                result += 1\n            frogs.sort(key=lambda x: x[2])\n    for i in range(1, n):\n        while frogs[i][2] <= frogs[i - 1][2]:\n            frogs[i][2] += frogs[i][1]\n            result += 1\n    print(result)", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    if n >= 2:\n        ans = 0\n        one = w.index(1)\n        two = w.index(2)\n        i = 0\n        if one >= two:\n            i = ceil((one - two + 1) / l[two])\n            ans += i\n        if n >= 3:\n            two += i * l[two]\n            three = w.index(3)\n            j = 0\n            if two >= three:\n                j = ceil((two - three + 1) / l[three])\n                ans += j\n            k = 0\n            if n == 4:\n                three += j * l[three]\n                four = w.index(4)\n                if three >= four:\n                    k = ceil((three - four + 1) / l[four])\n                    ans += k\n    print(ans)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    ind = {}\n    s = 0\n    for i in range(1, n + 1):\n        ind[i] = w.index(i)\n    for i in range(2, n + 1):\n        temp1 = ind[i]\n        temp2 = ind[i - 1]\n        temp = 0\n        if temp1 <= temp2:\n            temp = math.ceil((temp2 + 1 - temp1) / l[temp1])\n        s += temp\n        ind[i] += temp * l[temp1]\n    print(s)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    elif n == 2:\n        (x1, x2) = (0, 0)\n        (l1, l2) = (0, 0)\n        for i in range(2):\n            if w[i] == 1:\n                x1 = i\n                l1 = l[i]\n            elif w[i] == 2:\n                x2 = i\n                l2 = l[i]\n        j = 0\n        if x2 <= x1:\n            while x2 <= x1:\n                j += 1\n                x2 += l2\n        print(j)\n    elif n == 3:\n        (x1, x2, x3) = (0, 0, 0)\n        (l1, l2, l3) = (0, 0, 0)\n        for i in range(3):\n            if w[i] == 1:\n                x1 = i\n                l1 = l[i]\n            elif w[i] == 2:\n                x2 = i\n                l2 = l[i]\n            elif w[i] == 3:\n                x3 = i\n                l3 = l[i]\n        j = 0\n        if x2 <= x1:\n            while x2 <= x1:\n                j += 1\n                x2 += l2\n        if x3 <= x2:\n            while x3 <= x2:\n                j += 1\n                x3 += l3\n        print(j)\n    else:\n        (x1, x2, x3, x4) = (0, 0, 0, 0)\n        (l1, l2, l3, l4) = (0, 0, 0, 0)\n        for i in range(4):\n            if w[i] == 1:\n                x1 = i\n                l1 = l[i]\n            elif w[i] == 2:\n                x2 = i\n                l2 = l[i]\n            elif w[i] == 3:\n                x3 = i\n                l3 = l[i]\n            else:\n                x4 = i\n                l4 = l[i]\n        j = 0\n        if x2 <= x1:\n            while x2 <= x1:\n                j += 1\n                x2 += l2\n        if x3 <= x2:\n            while x3 <= x2:\n                j += 1\n                x3 += l3\n        if x4 <= x3:\n            while x4 <= x3:\n                j += 1\n                x4 += l4\n        print(j)", "for _ in range(int(input())):\n    n = int(input())\n    w = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    pos = [i for i in range(n)]\n    sw = []\n    for i in w:\n        sw.append(i)\n    sw.sort()\n    ans = 0\n    for i in range(1, n):\n        ind2 = w.index(sw[i])\n        ind1 = pos[w.index(sw[i - 1])]\n        idx = ind2\n        while idx <= ind1:\n            idx += l[ind2]\n            pos[ind2] = idx\n            ans += 1\n    print(ans)"]