["def findsubtract(num):\n    n = num\n    strn = str(n)\n    count = 0\n    while n > 0:\n        fd = int(strn[0])\n        p = len(strn) - 1\n        if p == 0:\n            n -= fd\n            strn = str(n)\n            count += 1\n        else:\n            n1 = n - fd * 10 ** p\n            n2 = n1 // fd + 1\n            count += n2\n            n -= n2 * fd\n            strn = str(n)\n    return count + 1\nfor i in range(int(input())):\n    k = int(input())\n    if k == 2:\n        print(9)\n        continue\n    n = None\n    brutetop = 4 * k\n    brutebottom = 0\n    while abs(brutetop - brutebottom) > 20:\n        v = round((brutetop + brutebottom) / 2)\n        t = findsubtract(v)\n        if t <= k:\n            brutebottom = v\n        else:\n            brutetop = v\n    for j in range(brutetop, brutebottom - 1, -1):\n        n = findsubtract(j)\n        if n == k:\n            print(j)\n            break", "def findsubtract(num):\n    n = num\n    strn = str(n)\n    count = 0\n    while n > 0:\n        fd = int(strn[0])\n        p = len(strn) - 1\n        if p == 0:\n            n -= fd\n            strn = str(n)\n            count += 1\n        else:\n            n1 = n - fd * 10 ** p\n            n2 = n1 // fd + 1\n            count += n2\n            n -= n2 * fd\n            strn = str(n)\n    return count + 1\nfor i in range(int(input())):\n    k = int(input())\n    if k == 2:\n        print(9)\n        continue\n    n = None\n    brutetop = 4 * k\n    brutebottom = 0\n    while abs(brutetop - brutebottom) > 20:\n        v = round((brutetop + brutebottom) / 2)\n        t = findsubtract(v)\n        if t <= k:\n            brutebottom = v\n        else:\n            brutetop = v\n    for j in range(brutetop, brutebottom - 1, -1):\n        n = findsubtract(j)\n        if n == k:\n            print(j)\n            break", "def findsubtract(num):\n    n = num\n    strn = str(n)\n    count = 0\n    while n > 0:\n        fd = int(strn[0])\n        p = len(strn) - 1\n        if p == 0:\n            n -= fd\n            strn = str(n)\n            count += 1\n        else:\n            n1 = n - fd * 10 ** p\n            n2 = n1 // fd + 1\n            count += n2\n            n -= n2 * fd\n            strn = str(n)\n    return count + 1\nfor i in range(int(input())):\n    k = int(input())\n    if k == 2:\n        print(9)\n        continue\n    n = None\n    brutetop = 4 * k\n    brutebottom = 0\n    while abs(brutetop - brutebottom) > 20:\n        v = round((brutetop + brutebottom) / 2)\n        t = findsubtract(v)\n        if t <= k:\n            brutebottom = v\n        else:\n            brutetop = v\n    for j in range(brutetop, brutebottom - 1, -1):\n        n = findsubtract(j)\n        if n == k:\n            print(j)\n            break", "def findsubtract(num):\n    n = num\n    strn = str(n)\n    count = 0\n    while n > 0:\n        fd = int(strn[0])\n        p = len(strn) - 1\n        if p == 0:\n            n -= fd\n            strn = str(n)\n            count += 1\n        else:\n            n1 = n - fd * 10 ** p\n            n2 = n1 // fd + 1\n            count += n2\n            n -= n2 * fd\n            strn = str(n)\n    return count + 1\nfor i in range(int(input())):\n    k = int(input())\n    if k == 2:\n        print(9)\n        continue\n    n = None\n    brutetop = 4 * k\n    brutebottom = 0\n    while abs(brutetop - brutebottom) > 20:\n        v = round((brutetop + brutebottom) / 2)\n        t = findsubtract(v)\n        if t <= k:\n            brutebottom = v\n        else:\n            brutetop = v\n    for j in range(brutetop, brutebottom - 1, -1):\n        n = findsubtract(j)\n        if n == k:\n            print(j)\n            break", "def findsubtract(num):\n    n = num\n    strn = str(n)\n    count = 0\n    while n > 0:\n        fd = int(strn[0])\n        p = len(strn) - 1\n        if p == 0:\n            n -= fd\n            strn = str(n)\n            count += 1\n        else:\n            n1 = n - fd * 10 ** p\n            n2 = n1 // fd + 1\n            count += n2\n            n -= n2 * fd\n            strn = str(n)\n    return count + 1\nfor i in range(int(input())):\n    k = int(input())\n    if k == 2:\n        print(9)\n        continue\n    n = None\n    brutetop = 4 * k\n    brutebottom = 0\n    while abs(brutetop - brutebottom) > 20:\n        v = round((brutetop + brutebottom) / 2)\n        t = findsubtract(v)\n        if t <= k:\n            brutebottom = v\n        else:\n            brutetop = v\n    for j in range(brutetop, brutebottom - 1, -1):\n        n = findsubtract(j)\n        if n == k:\n            print(j)\n            break", "def findsubtract(num):\n    n = num\n    strn = str(n)\n    count = 0\n    while n > 0:\n        fd = int(strn[0])\n        p = len(strn) - 1\n        if p == 0:\n            n -= fd\n            strn = str(n)\n            count += 1\n        else:\n            n1 = n - fd * 10 ** p\n            n2 = n1 // fd + 1\n            count += n2\n            n -= n2 * fd\n            strn = str(n)\n    return count + 1\nfor i in range(int(input())):\n    k = int(input())\n    if k == 2:\n        print(9)\n        continue\n    n = None\n    brutetop = 4 * k\n    brutebottom = 0\n    while abs(brutetop - brutebottom) > 20:\n        v = round((brutetop + brutebottom) / 2)\n        t = findsubtract(v)\n        if t <= k:\n            brutebottom = v\n        else:\n            brutetop = v\n    for j in range(brutetop, brutebottom - 1, -1):\n        n = findsubtract(j)\n        if n == k:\n            print(j)\n            break", "def getAns(num):\n    if num < 10:\n        return 2\n    last = int(str(num)[0])\n    rem = int(str(num)[1:])\n    steps = 2\n    p = len(str(num)) - 1\n    while True:\n        steps += rem // last + 1\n        rem = rem % last\n        if last > 0:\n            rem = rem + 10 ** p - last\n        last = last - 1\n        if last == 0:\n            p = p - 1\n            last = 9\n            if len(str(rem)) == 1:\n                rem = 0\n            else:\n                rem = int(str(rem)[1:])\n        if rem == 0:\n            break\n    return steps\nfor awa in range(int(input())):\n    k = int(input())\n    if k == 1:\n        print(0)\n    elif k == 2:\n        print(9)\n    elif k == 3:\n        print(10)\n    else:\n        (low, high, ans) = (0, 10 ** 18, 0)\n        while low <= high:\n            mid = (low + high) // 2\n            temp = getAns(mid)\n            if int(temp) == k:\n                ans = max(ans, mid)\n                low = mid + 1\n            elif temp < k:\n                low = mid + 1\n            else:\n                high = mid - 1\n        print(ans)", "def getAns(num):\n    if num < 10:\n        return 2\n    last = int(str(num)[0])\n    rem = int(str(num)[1:])\n    steps = 2\n    p = len(str(num)) - 1\n    while True:\n        steps += rem // last + 1\n        rem = rem % last\n        if last > 0:\n            rem = rem + 10 ** p - last\n        last = last - 1\n        if last == 0:\n            p = p - 1\n            last = 9\n            if len(str(rem)) == 1:\n                rem = 0\n            else:\n                rem = int(str(rem)[1:])\n        if rem == 0:\n            break\n    return steps\nfor awa in range(int(input())):\n    k = int(input())\n    if k == 1:\n        print(0)\n    elif k == 2:\n        print(9)\n    elif k == 3:\n        print(10)\n    else:\n        (low, high, ans) = (0, 10 ** 18, 0)\n        while low <= high:\n            mid = (low + high) // 2\n            temp = getAns(mid)\n            if int(temp) == k:\n                ans = max(ans, mid)\n                low = mid + 1\n            elif temp < k:\n                low = mid + 1\n            else:\n                high = mid - 1\n        print(ans)", "def getAns(num):\n    if num < 10:\n        return 2\n    last = int(str(num)[0])\n    rem = int(str(num)[1:])\n    steps = 2\n    p = len(str(num)) - 1\n    while True:\n        steps += rem // last + 1\n        rem = rem % last\n        if last > 0:\n            rem = rem + 10 ** p - last\n        last = last - 1\n        if last == 0:\n            p = p - 1\n            last = 9\n            if len(str(rem)) == 1:\n                rem = 0\n            else:\n                rem = int(str(rem)[1:])\n        if rem == 0:\n            break\n    return steps\nfor awa in range(int(input())):\n    k = int(input())\n    if k == 1:\n        print(0)\n    elif k == 2:\n        print(9)\n    elif k == 3:\n        print(10)\n    else:\n        (low, high, ans) = (0, 10 ** 18, 0)\n        while low <= high:\n            mid = (low + high) // 2\n            temp = getAns(mid)\n            if int(temp) == k:\n                ans = max(ans, mid)\n                low = mid + 1\n            elif temp < k:\n                low = mid + 1\n            else:\n                high = mid - 1\n        print(ans)", "def find_steps_number(target_steps=30):\n    steps = 3\n    step_distance = 1\n    power = 10\n    modulo = 9\n    step_list = [power]\n    steps_number_dict = {2: 9, 3: 10}\n    while steps < target_steps:\n        while step_distance < 10 and steps < target_steps:\n            temp_list = []\n            for result in step_list:\n                if result % modulo == 0:\n                    result1 = result + step_distance\n                    temp_list.append(result1)\n                    step_distance += 1\n                    if step_distance < 10:\n                        result2 = result + step_distance\n                        temp_list.append(result2)\n                elif step_distance < 10:\n                    result += step_distance\n                    temp_list.append(result)\n            step_list = temp_list[:]\n            steps += 1\n            steps_number_dict[steps] = max(step_list)\n        steps += 1\n        step_distance = 1\n        power *= 10\n        step_list = [power]\n        modulo = modulo * 10 + 9\n        if steps <= target_steps:\n            steps_number_dict[steps] = max(step_list)\n    return steps_number_dict\n\ndef create_stepNumber_dict(steps_number_dict):\n    starting_step = 30\n    limit = 10 ** 13\n    starting_number = steps_number_dict[starting_step]\n    test_dict = {len(str(starting_step)): {starting_step: starting_number}}\n    cumalative_steps = starting_step\n    test_dict[len(str(starting_number))] = {starting_number: starting_number + starting_number - cumalative_steps}\n    cumalative_steps_len = len(str(cumalative_steps))\n    test_dict[cumalative_steps_len][int('9' * cumalative_steps_len)] = starting_number + int('9' * cumalative_steps_len) - cumalative_steps\n    while starting_number <= limit:\n        starting_number_string = str(starting_number)\n        first_digit = int(starting_number_string[0])\n        ending_number = (first_digit + 1) * 10 ** (len(starting_number_string) - 1)\n        ending_number_string = str(ending_number)\n        if first_digit < 9:\n            for jump_number in range(ending_number - first_digit - 1, ending_number):\n                if (jump_number - starting_number) / first_digit == (jump_number - starting_number) // first_digit:\n                    if str(jump_number + first_digit + 1)[0] == ending_number_string[0]:\n                        break\n            steps = (jump_number - starting_number) // first_digit + 1\n            cumalative_steps += steps\n            cumalative_steps_len = len(str(cumalative_steps))\n            test_dict[cumalative_steps_len] = test_dict.get(cumalative_steps_len, {})\n            test_dict[cumalative_steps_len][cumalative_steps] = test_dict.get(cumalative_steps, jump_number + first_digit + 1)\n            starting_number = jump_number + first_digit + 1\n        else:\n            jump_number = int('9' * len(starting_number_string))\n            steps = (jump_number - starting_number) // first_digit + 1\n            cumalative_steps += steps + 1\n            cumalative_steps_len = len(str(cumalative_steps))\n            test_dict[cumalative_steps_len] = test_dict.get(cumalative_steps_len, {})\n            test_dict[cumalative_steps_len][cumalative_steps] = test_dict.get(cumalative_steps, jump_number + 1)\n            number_steps = jump_number + 1\n            tens_steps = jump_number + 1 + jump_number + 1 - cumalative_steps\n            number_steps_len = len(str(number_steps))\n            test_dict[number_steps_len] = test_dict.get(number_steps_len, {})\n            test_dict[number_steps_len][number_steps] = test_dict.get(number_steps, tens_steps)\n            starting_number = jump_number + 1\n        if len(str(jump_number + 1)) == len(str(cumalative_steps)) + 1:\n            cumalative_steps_len = len(str(cumalative_steps))\n            number_steps = int('9' * cumalative_steps_len)\n            tens_steps = jump_number + 1 + int('9' * cumalative_steps_len) - cumalative_steps\n            number_steps_len = len(str(number_steps))\n            test_dict[number_steps_len] = test_dict.get(number_steps_len, {})\n            test_dict[number_steps_len][number_steps] = test_dict.get(number_steps, tens_steps)\n    return test_dict\n\ndef search_number(test_step, test_dict, steps_number_dict):\n    test_step_len = len(str(test_step))\n    if test_step <= 30:\n        print(steps_number_dict[test_step])\n    else:\n        step_keys = list(test_dict[test_step_len].keys())\n        step_values = list(test_dict[test_step_len].values())\n        for pos in range(len(step_keys) - 1):\n            if step_keys[pos] <= test_step < step_keys[pos + 1]:\n                first_digit = int(str(test_dict[test_step_len][step_keys[pos]])[0])\n                number = step_values[pos] + (test_step - step_keys[pos]) * first_digit\n                if first_digit < 9:\n                    print(number)\n                elif number <= step_values[-2]:\n                    print(number)\n                else:\n                    print(step_values[-2] - 1)\n            if pos == len(step_keys) - 1 - 1 and test_step == step_keys[pos + 1]:\n                print(step_values[pos + 1])\nsteps_number_dict = find_steps_number()\ntest_dict = create_stepNumber_dict(steps_number_dict)\nnumber_tests = int(input().strip())\nfor test in range(number_tests):\n    step = int(input().strip())\n    search_number(step, test_dict, steps_number_dict)", "def find_steps_number(target_steps=30):\n    steps = 3\n    step_distance = 1\n    power = 10\n    modulo = 9\n    step_list = [power]\n    steps_number_dict = {2: 9, 3: 10}\n    while steps < target_steps:\n        while step_distance < 10 and steps < target_steps:\n            temp_list = []\n            for result in step_list:\n                if result % modulo == 0:\n                    result1 = result + step_distance\n                    temp_list.append(result1)\n                    step_distance += 1\n                    if step_distance < 10:\n                        result2 = result + step_distance\n                        temp_list.append(result2)\n                elif step_distance < 10:\n                    result += step_distance\n                    temp_list.append(result)\n            step_list = temp_list[:]\n            steps += 1\n            steps_number_dict[steps] = max(step_list)\n        steps += 1\n        step_distance = 1\n        power *= 10\n        step_list = [power]\n        modulo = modulo * 10 + 9\n        if steps <= target_steps:\n            steps_number_dict[steps] = max(step_list)\n    return steps_number_dict\n\ndef create_stepNumber_dict(steps_number_dict):\n    starting_step = 30\n    limit = 10 ** 13\n    starting_number = steps_number_dict[starting_step]\n    test_dict = {len(str(starting_step)): {starting_step: starting_number}}\n    cumalative_steps = starting_step\n    test_dict[len(str(starting_number))] = {starting_number: starting_number + starting_number - cumalative_steps}\n    test_dict[len(str(cumalative_steps))][int('9' * len(str(cumalative_steps)))] = starting_number + int('9' * len(str(cumalative_steps))) - cumalative_steps\n    while starting_number <= limit:\n        starting_number_string = str(starting_number)\n        first_digit = int(starting_number_string[0])\n        ending_number = (first_digit + 1) * 10 ** (len(starting_number_string) - 1)\n        ending_number_string = str(ending_number)\n        if first_digit < 9:\n            for jump_number in range(ending_number - first_digit - 1, ending_number):\n                if (jump_number - starting_number) / first_digit == (jump_number - starting_number) // first_digit:\n                    if str(jump_number + first_digit + 1)[0] == ending_number_string[0]:\n                        break\n            steps = (jump_number - starting_number) // first_digit + 1\n            cumalative_steps += steps\n            test_dict[len(str(cumalative_steps))] = test_dict.get(len(str(cumalative_steps)), {})\n            test_dict[len(str(cumalative_steps))][cumalative_steps] = test_dict.get(cumalative_steps, jump_number + first_digit + 1)\n            starting_number = jump_number + first_digit + 1\n        else:\n            jump_number = int('9' * len(starting_number_string))\n            steps = (jump_number - starting_number) // first_digit + 1\n            cumalative_steps += steps + 1\n            test_dict[len(str(cumalative_steps))] = test_dict.get(len(str(cumalative_steps)), {})\n            test_dict[len(str(cumalative_steps))][cumalative_steps] = test_dict.get(cumalative_steps, jump_number + 1)\n            number_steps = jump_number + 1\n            tens_steps = jump_number + 1 + jump_number + 1 - cumalative_steps\n            test_dict[len(str(number_steps))] = test_dict.get(len(str(number_steps)), {})\n            test_dict[len(str(number_steps))][number_steps] = test_dict.get(number_steps, tens_steps)\n            starting_number = jump_number + 1\n        if len(str(jump_number + 1)) == len(str(cumalative_steps)) + 1:\n            number_steps = int('9' * len(str(cumalative_steps)))\n            tens_steps = jump_number + 1 + int('9' * len(str(cumalative_steps))) - cumalative_steps\n            test_dict[len(str(number_steps))] = test_dict.get(len(str(number_steps)), {})\n            test_dict[len(str(number_steps))][number_steps] = test_dict.get(number_steps, tens_steps)\n    return test_dict\n\ndef search_number(test_step, test_dict, steps_number_dict):\n    test_step_len = len(str(test_step))\n    if test_step <= 30:\n        print(steps_number_dict[test_step])\n    else:\n        step_keys = list(test_dict[test_step_len].keys())\n        step_values = list(test_dict[test_step_len].values())\n        for pos in range(len(step_keys) - 1):\n            if step_keys[pos] <= test_step < step_keys[pos + 1]:\n                first_digit = int(str(test_dict[test_step_len][step_keys[pos]])[0])\n                number = step_values[pos] + (test_step - step_keys[pos]) * first_digit\n                if first_digit < 9:\n                    print(number)\n                elif number <= step_values[-2]:\n                    print(number)\n                else:\n                    print(step_values[-2] - 1)\n            if pos == len(step_keys) - 1 - 1 and test_step == step_keys[pos + 1]:\n                print(step_values[pos + 1])\nsteps_number_dict = find_steps_number()\ntest_dict = create_stepNumber_dict(steps_number_dict)\nnumber_tests = int(input().strip())\nfor test in range(number_tests):\n    step = int(input().strip())\n    search_number(step, test_dict, steps_number_dict)", "t = int(input())\nfor m in range(t):\n\n    def diff(n):\n        count = 1\n        while n != 0:\n            n -= int(str(n)[0])\n            count += 1\n        return count\n    hash = {}\n    for i in range(9, 1001):\n        z = diff(i)\n        hash[z] = i\n    lim = 10 ** 13\n    k = 100\n    ranges = {}\n    for i in hash.keys():\n        ranges[hash[i]] = i\n    ans = {100: 30}\n    while k <= lim:\n        z = str(k)\n        diff = int(str(k)[0])\n        g = (int(z[0]) + 1) * 10 ** (len(z) - 1)\n        g = str(g)\n        if diff != 9:\n            for f in range(int(g) - 10, int(g)):\n                if (f - k) / diff == (f - k) // diff:\n                    if str(f + int(z[0]) + 1)[0] == g[0]:\n                        break\n            u = (f - k) // diff + 1\n            ans[f + int(z[0]) + 1] = u + ans[k]\n            k = f + int(z[0]) + 1\n        else:\n            f = int('9' * len(z))\n            u = (f - k) // diff + 1\n            ans[int('9' * len(z)) + 1] = u + ans[k] + 1\n            k = int('9' * len(z)) + 1\n    n = int(input())\n\n    def p1(n, hash):\n        if n > 30:\n            v = list(ans.keys())\n            for i in range(len(ans.keys()) - 1):\n                if ans[v[i]] <= n < ans[v[i + 1]]:\n                    diff = int(str(v[i])[0])\n                    n = n - ans[v[i]]\n                    z = n * diff + v[i]\n                    if diff == 9 and z > v[i + 1]:\n                        return int('9' * len(str(v[i])))\n                    else:\n                        return z\n        elif n != 1:\n            return hash[n]\n        else:\n            return 0\n    print(p1(n, hash))", "t = int(input())\nfor m in range(t):\n\n    def diff(n):\n        count = 1\n        while n != 0:\n            n -= int(str(n)[0])\n            count += 1\n        return count\n    hash = {}\n    for i in range(9, 1001):\n        z = diff(i)\n        hash[z] = i\n    lim = 10 ** 13\n    k = 100\n    ranges = {}\n    for i in hash.keys():\n        ranges[hash[i]] = i\n    ans = {100: 30}\n    while k <= lim:\n        z = str(k)\n        diff = int(str(k)[0])\n        g = (int(z[0]) + 1) * 10 ** (len(z) - 1)\n        g = str(g)\n        if diff != 9:\n            for f in range(int(g) - 10, int(g)):\n                if (f - k) / diff == (f - k) // diff:\n                    if str(f + int(z[0]) + 1)[0] == g[0]:\n                        break\n            u = (f - k) // diff + 1\n            ans[f + int(z[0]) + 1] = u + ans[k]\n            k = f + int(z[0]) + 1\n        else:\n            f = int('9' * len(z))\n            u = (f - k) // diff + 1\n            ans[int('9' * len(z)) + 1] = u + ans[k] + 1\n            k = int('9' * len(z)) + 1\n    n = int(input())\n\n    def p1(n, hash):\n        if n > 30:\n            v = list(ans.keys())\n            for i in range(len(ans.keys()) - 1):\n                if ans[v[i]] <= n < ans[v[i + 1]]:\n                    diff = int(str(v[i])[0])\n                    n = n - ans[v[i]]\n                    z = n * diff + v[i]\n                    if diff == 9 and z > v[i + 1]:\n                        return int('9' * len(str(v[i])))\n                    else:\n                        return z\n        elif n != 1:\n            return hash[n]\n        else:\n            return 0\n    print(p1(n, hash))", "t = int(input())\nfor m in range(t):\n\n    def diff(n):\n        count = 1\n        while n != 0:\n            n -= int(str(n)[0])\n            count += 1\n        return count\n    hash = {}\n    for i in range(9, 1001):\n        z = diff(i)\n        hash[z] = i\n    lim = 10 ** 13\n    k = 100\n    ranges = {}\n    for i in hash.keys():\n        ranges[hash[i]] = i\n    ans = {100: 30}\n    while k <= lim:\n        z = str(k)\n        diff = int(str(k)[0])\n        g = (int(z[0]) + 1) * 10 ** (len(z) - 1)\n        g = str(g)\n        if diff != 9:\n            for f in range(int(g) - 10, int(g)):\n                if (f - k) / diff == (f - k) // diff:\n                    if str(f + int(z[0]) + 1)[0] == g[0]:\n                        break\n            u = (f - k) // diff + 1\n            ans[f + int(z[0]) + 1] = u + ans[k]\n            k = f + int(z[0]) + 1\n        else:\n            f = int('9' * len(z))\n            u = (f - k) // diff + 1\n            ans[int('9' * len(z)) + 1] = u + ans[k] + 1\n            k = int('9' * len(z)) + 1\n    n = int(input())\n\n    def p1(n, hash):\n        if n > 30:\n            v = list(ans.keys())\n            for i in range(len(ans.keys()) - 1):\n                if ans[v[i]] <= n < ans[v[i + 1]]:\n                    diff = int(str(v[i])[0])\n                    n = n - ans[v[i]]\n                    z = n * diff + v[i]\n                    if diff == 9 and z > v[i + 1]:\n                        return int('9' * len(str(v[i])))\n                    else:\n                        return z\n        elif n != 1:\n            return hash[n]\n        else:\n            return 0\n    print(p1(n, hash))", "t = int(input())\nfor m in range(t):\n\n    def diff(n):\n        count = 1\n        while n != 0:\n            n -= int(str(n)[0])\n            count += 1\n        return count\n    hash = {}\n    for i in range(9, 1001):\n        z = diff(i)\n        hash[z] = i\n    lim = 10 ** 13\n    k = 100\n    ranges = {}\n    for i in hash.keys():\n        ranges[hash[i]] = i\n    ans = {100: 30}\n    while k <= lim:\n        z = str(k)\n        diff = int(str(k)[0])\n        g = (int(z[0]) + 1) * 10 ** (len(z) - 1)\n        g = str(g)\n        if diff != 9:\n            for f in range(int(g) - 10, int(g)):\n                if (f - k) / diff == (f - k) // diff:\n                    if str(f + int(z[0]) + 1)[0] == g[0]:\n                        break\n            u = (f - k) // diff + 1\n            ans[f + int(z[0]) + 1] = u + ans[k]\n            k = f + int(z[0]) + 1\n        else:\n            f = int('9' * len(z))\n            u = (f - k) // diff + 1\n            ans[int('9' * len(z)) + 1] = u + ans[k] + 1\n            k = int('9' * len(z)) + 1\n    n = int(input())\n\n    def p1(n, hash):\n        if n > 30:\n            v = list(ans.keys())\n            for i in range(len(ans.keys()) - 1):\n                if ans[v[i]] <= n < ans[v[i + 1]]:\n                    diff = int(str(v[i])[0])\n                    n = n - ans[v[i]]\n                    z = n * diff + v[i]\n                    if diff == 9 and z > v[i + 1]:\n                        return int('9' * len(str(v[i])))\n                    else:\n                        return z\n        elif n != 1:\n            return hash[n]\n        else:\n            return 0\n    print(p1(n, hash))", "import sys\nT = int(sys.stdin.readline())\n\ndef nearest_nine(max):\n    ps = 0\n    for j in range(9, 0, -1):\n        mstr = str(max)\n        lp = int(mstr[1:])\n        lp = lp // j\n        ps += lp + 1\n        max -= (lp + 1) * j\n    return ps\nall9 = [2]\nfor i in range(1, 13):\n    max = 10 ** (i + 1) - 1\n    all9.append(all9[i - 1] + nearest_nine(max))\nfor i in range(T):\n    k = int(sys.stdin.readline())\n    for (i, item) in enumerate(all9):\n        if item == k:\n            result = 10 ** (i + 1) - 1\n            break\n        elif item < k:\n            continue\n        else:\n            k -= all9[i - 1]\n            deg = 10 ** i\n            result = deg - 1\n            fd = 1\n            while True:\n                hl = (deg - 1) * (fd + 1)\n                if result + k * fd < hl:\n                    result += k * fd\n                    break\n                else:\n                    incr = (hl - result) // fd\n                    k -= incr\n                    result += fd * incr\n                    if (hl - result) % fd:\n                        k -= 1\n                        result += fd\n                    fd += 1\n            break\n    print(result)", "lim = 10 ** 12\nfix = [(9, 2), (10, 3)]\npk = 3\np10 = 10\nwhile pk <= lim:\n    k = pk\n    v = p10\n    over = 0\n    for ld in range(1, 9):\n        step = (p10 - 2 - over) // ld + 1\n        v += step * ld + 1\n        k += step\n        fix.append((v, k))\n        over = v % 10\n    pf = p10 * 10 - 1\n    v = pf\n    k = 0\n    for ld in reversed(range(2, 10)):\n        step = v % p10 // ld + 1\n        v -= step * ld\n        k += step\n    pk += k + v % p10\n    fix.append((pf, pk))\n    pk += 1\n    p10 *= 10\n    fix.append((p10, pk))\nfor ti in range(int(input())):\n    k = int(input())\n    fx = 0\n    while fx < len(fix):\n        (v, s) = fix[fx]\n        if s == k:\n            print(v)\n            break\n        elif s > k:\n            fx -= 1\n            (v, s) = fix[fx]\n            d = fx % 10\n            print(v + d * (k - s))\n            break\n        fx += 1", "def getAns(num):\n    if num < 10:\n        return 2\n    last = int(str(num)[0])\n    rem = int(str(num)[1:])\n    steps = 2\n    p = len(str(num)) - 1\n    while True:\n        steps += rem // last + 1\n        rem = rem % last\n        if last > 0:\n            rem = rem + 10 ** p - last\n        last = last - 1\n        if last == 0:\n            p = p - 1\n            last = 9\n            if len(str(rem)) == 1:\n                rem = 0\n            else:\n                rem = int(str(rem)[1:])\n        if rem == 0:\n            break\n    return steps\ntest = int(input())\nwhile test > 0:\n    test -= 1\n    k = int(input())\n    if k == 1:\n        print(0)\n    elif k == 2:\n        print(9)\n    elif k == 3:\n        print(10)\n    else:\n        low = 0\n        high = 10 ** 18\n        ans = 0\n        while low <= high:\n            mid = (low + high) // 2\n            temp = getAns(mid)\n            if int(temp) == k:\n                ans = max(ans, mid)\n                low = mid + 1\n            elif temp < k:\n                low = mid + 1\n            else:\n                high = mid - 1\n        print(ans)", "def getAns(num):\n    if num < 10:\n        return 2\n    last = int(str(num)[0])\n    rem = int(str(num)[1:])\n    steps = 2\n    p = len(str(num)) - 1\n    while True:\n        steps += rem // last + 1\n        rem = rem % last\n        if last > 0:\n            rem = rem + 10 ** p - last\n        last = last - 1\n        if last == 0:\n            p = p - 1\n            last = 9\n            if len(str(rem)) == 1:\n                rem = 0\n            else:\n                rem = int(str(rem)[1:])\n        if rem == 0:\n            break\n    return steps\ntest = int(input())\nwhile test > 0:\n    test -= 1\n    k = int(input())\n    if k == 1:\n        print(0)\n    elif k == 2:\n        print(9)\n    elif k == 3:\n        print(10)\n    else:\n        low = 0\n        high = 10 ** 18\n        ans = 0\n        while low <= high:\n            mid = (low + high) // 2\n            temp = getAns(mid)\n            if int(temp) == k:\n                ans = max(ans, mid)\n                low = mid + 1\n            elif temp < k:\n                low = mid + 1\n            else:\n                high = mid - 1\n        print(ans)", "def getAns(num):\n    if num < 10:\n        return 2\n    last = int(str(num)[0])\n    rem = int(str(num)[1:])\n    steps = 2\n    p = len(str(num)) - 1\n    while True:\n        steps += rem // last + 1\n        rem = rem % last\n        if last > 0:\n            rem = rem + 10 ** p - last\n        last = last - 1\n        if last == 0:\n            p = p - 1\n            last = 9\n            if len(str(rem)) == 1:\n                rem = 0\n            else:\n                rem = int(str(rem)[1:])\n        if rem == 0:\n            break\n    return steps\ntest = int(input())\nwhile test > 0:\n    test -= 1\n    k = int(input())\n    if k == 1:\n        print(0)\n    elif k == 2:\n        print(9)\n    elif k == 3:\n        print(10)\n    else:\n        low = 0\n        high = 10 ** 18\n        ans = 0\n        while low <= high:\n            mid = (low + high) // 2\n            temp = getAns(mid)\n            if int(temp) == k:\n                ans = max(ans, mid)\n                low = mid + 1\n            elif temp < k:\n                low = mid + 1\n            else:\n                high = mid - 1\n        print(ans)", "lim = 10 ** 12\nfix = [(9, 2), (10, 3)]\npk = 3\np10 = 10\nwhile pk <= lim:\n    k = pk\n    v = p10\n    over = 0\n    for ld in range(1, 9):\n        step = (p10 - 2 - over) // ld + 1\n        v += step * ld + 1\n        k += step\n        fix.append((v, k))\n        over = v % 10\n    pf = p10 * 10 - 1\n    v = pf\n    k = 0\n    for ld in reversed(range(2, 10)):\n        step = v % p10 // ld + 1\n        v -= step * ld\n        k += step\n    pk += k + v % p10\n    fix.append((pf, pk))\n    pk += 1\n    p10 *= 10\n    fix.append((p10, pk))\nfor ti in range(int(input())):\n    k = int(input())\n    lo = 0\n    hi = len(fix)\n    while hi - lo > 1:\n        md = (hi + lo) // 2\n        if fix[md][1] > k:\n            hi = md\n        else:\n            lo = md\n    (val, s) = fix[lo]\n    if s == k:\n        print(val)\n    else:\n        lead = lo % 10\n        print(val + lead * (k - s))", "lim = 10 ** 12\nfix = [(9, 2), (10, 3)]\npk = 3\np10 = 10\nwhile pk <= lim:\n    k = pk\n    v = p10\n    over = 0\n    for ld in range(1, 9):\n        step = (p10 - 2 - over) // ld + 1\n        v += step * ld + 1\n        k += step\n        fix.append((v, k))\n        over = v % 10\n    pf = p10 * 10 - 1\n    v = pf\n    k = 0\n    for ld in reversed(range(2, 10)):\n        step = v % p10 // ld + 1\n        v -= step * ld\n        k += step\n    pk += k + v % p10\n    fix.append((pf, pk))\n    pk += 1\n    p10 *= 10\n    fix.append((p10, pk))\nfor ti in range(int(input())):\n    k = int(input())\n    fx = 0\n    while fx < len(fix):\n        (v, s) = fix[fx]\n        if s == k:\n            print(v)\n            break\n        elif s > k:\n            fx -= 1\n            (v, s) = fix[fx]\n            d = fx % 10\n            print(v + d * (k - s))\n            break\n        fx += 1"]