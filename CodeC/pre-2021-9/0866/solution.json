["t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    d = list(map(int, input().split()))\n    n = a * b\n    f = 0\n    p = 0\n    ans = [0] * (n + b)\n    for j in range(n + b):\n        p += d[j % n]\n        ans[j] = p\n    for j in range(b):\n        w = 0\n        for k in range(a):\n            s = j + b * k\n            e = s + b\n            v = ans[e - 1]\n            if s - 1 >= 0:\n                v -= ans[s - 1]\n            if v > int(b / 2):\n                w += 1\n        if w > int(a / 2):\n            f = 1\n            break\n    print(f)", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    d = list(map(int, input().split()))\n    n = a * b\n    f = 0\n    p = 0\n    ans = [0] * (n + b)\n    for j in range(n + b):\n        p += d[j % n]\n        ans[j] = p\n    for j in range(b):\n        w = 0\n        for k in range(a):\n            s = j + b * k\n            e = s + b\n            v = ans[e - 1]\n            if s - 1 >= 0:\n                v -= ans[s - 1]\n            if v > int(b / 2):\n                w += 1\n        if w > int(a / 2):\n            f = 1\n            break\n    print(f)", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    d = list(map(int, input().split()))\n    n = a * b\n    f = 0\n    p = 0\n    ans = [0] * (n + b)\n    for j in range(n + b):\n        p += d[j % n]\n        ans[j] = p\n    for j in range(b):\n        w = 0\n        for k in range(a):\n            s = j + b * k\n            e = s + b\n            v = ans[e - 1]\n            if s - 1 >= 0:\n                v -= ans[s - 1]\n            if v > int(b / 2):\n                w += 1\n        if w > int(a / 2):\n            f = 1\n            break\n    print(f)", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    d = list(map(int, input().split()))\n    n = a * b\n    f = 0\n    p = 0\n    ans = [0] * (n + b)\n    for j in range(n + b):\n        p += d[j % n]\n        ans[j] = p\n    for j in range(b):\n        w = 0\n        for k in range(a):\n            s = j + b * k\n            e = s + b\n            v = ans[e - 1]\n            if s - 1 >= 0:\n                v -= ans[s - 1]\n            if v > int(b / 2):\n                w += 1\n        if w > int(a / 2):\n            f = 1\n            break\n    print(f)", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    d = list(map(int, input().split()))\n    n = a * b\n    f = 0\n    p = 0\n    ans = [0] * (n + b)\n    for j in range(n + b):\n        p += d[j % n]\n        ans[j] = p\n    for j in range(b):\n        w = 0\n        for k in range(a):\n            s = j + b * k\n            e = s + b\n            v = ans[e - 1]\n            if s - 1 >= 0:\n                v -= ans[s - 1]\n            if v > int(b / 2):\n                w += 1\n        if w > int(a / 2):\n            f = 1\n            break\n    print(f)", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    d = list(map(int, input().split()))\n    n = a * b\n    f = 0\n    p = 0\n    ans = [0] * (n + b)\n    for j in range(n + b):\n        p += d[j % n]\n        ans[j] = p\n    for j in range(b):\n        w = 0\n        for k in range(a):\n            s = j + b * k\n            e = s + b\n            v = ans[e - 1]\n            if s - 1 >= 0:\n                v -= ans[s - 1]\n            if v > int(b / 2):\n                w += 1\n        if w > int(a / 2):\n            f = 1\n            break\n    print(f)", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    d = list(map(int, input().split()))\n    n = a * b\n    f = 0\n    p = 0\n    ans = [0] * (n + b)\n    for j in range(n + b):\n        p += d[j % n]\n        ans[j] = p\n    for j in range(b):\n        w = 0\n        for k in range(a):\n            s = j + b * k\n            e = s + b\n            v = ans[e - 1]\n            if s - 1 >= 0:\n                v -= ans[s - 1]\n            if v > int(b / 2):\n                w += 1\n        if w > int(a / 2):\n            f = 1\n            break\n    print(f)", "t = int(input())\nfor _ in range(t):\n    (noState, size) = map(int, input().split())\n    d = list(map(int, input().split()))\n    n = noState * size\n    flag = 0\n    tmp = 0\n    ans = [0] * (n + size)\n    for i in range(n + size):\n        tmp += d[i % n]\n        ans[i] = tmp\n    for i in range(size):\n        noWin = 0\n        for j in range(noState):\n            start = i + size * j\n            end = start + size\n            noVotes = ans[end - 1]\n            if start - 1 >= 0:\n                noVotes -= ans[start - 1]\n            if noVotes > int(size / 2):\n                noWin += 1\n        if noWin > int(noState / 2):\n            flag = 1\n            break\n    print(flag)", "t = int(input())\nfor _ in range(t):\n    (noState, size) = map(int, input().split())\n    d = list(map(int, input().split()))\n    n = noState * size\n    flag = 0\n    tmp = 0\n    ans = [0] * (n + size)\n    for i in range(n + size):\n        tmp += d[i % n]\n        ans[i] = tmp\n    for i in range(size):\n        noWin = 0\n        for j in range(noState):\n            start = i + size * j\n            end = start + size\n            noVotes = ans[end - 1]\n            if start - 1 >= 0:\n                noVotes -= ans[start - 1]\n            if noVotes > int(size / 2):\n                noWin += 1\n        if noWin > int(noState / 2):\n            flag = 1\n            break\n    print(flag)", "for _ in range(int(input())):\n    (o1, o2) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ll = []\n    s = 0\n    for i in range(o2):\n        s += l[i]\n    ll.append(s)\n    i = 0\n    for j in range(o2, o1 * o2):\n        s = s - l[i] + l[j]\n        ll.append(s)\n        i += 1\n    j = 0\n    while i != o1 * o2 - 1:\n        s = s - l[i] + l[j]\n        ll.append(s)\n        i += 1\n        j += 1\n    f = 0\n    for i in range(o2):\n        j = i\n        c = 0\n        while j < o1 * o2:\n            if ll[j] > o2 - ll[j]:\n                c += 1\n            j += o2\n        if c > o1 - c:\n            f = 1\n            break\n    if f == 1:\n        print('1')\n    else:\n        print('0')", "n = int(input())\nstatedistricts = []\ndatapoints = []\ndatapointssum = []\nfor i in range(n):\n    (nstates, ndistricts) = map(int, input().split())\n    statedistricts.append((nstates, ndistricts))\n    l = list(map(int, input().split()))\n    s = []\n    cs = 0\n    for d in l:\n        if d == 1:\n            cs += 1\n        s.append(cs)\n    datapoints.append(l)\n    datapointssum.append(s)\nfor i in range(n):\n    (nstates, ndistricts) = statedistricts[i]\n    districtcount = 0\n    flag = False\n    while districtcount < ndistricts:\n        jump = districtcount\n        onewon = 0\n        statecount = 0\n        prevonecount = 0 if districtcount == 0 else datapointssum[i][districtcount - 1]\n        while statecount < nstates:\n            if jump + ndistricts <= ndistricts * nstates:\n                countofones = datapointssum[i][jump + ndistricts - 1] - prevonecount\n            else:\n                countofones = datapointssum[i][ndistricts * nstates - 1] - prevonecount + datapointssum[i][(jump + ndistricts) % (ndistricts * nstates) - 1]\n            if countofones > ndistricts / 2:\n                onewon += 1\n            jump += ndistricts\n            prevonecount = datapointssum[i][jump % (ndistricts * nstates) - 1]\n            statecount += 1\n        districtcount += 1\n        if onewon > nstates / 2:\n            flag = True\n            break\n    if flag:\n        print(1)\n    else:\n        print(0)", "import math\nt = int(input())\nfor I in range(0, t):\n    (o1, o2) = map(int, input().split())\n    n = o1 * o2\n    a = [int(i) for i in input().split()]\n    cumm = [0 for i in range(0, n + 1)]\n    cumm[1] = a[0]\n    for i in range(2, n + 1):\n        if a[i - 1] == 1:\n            cumm[i] = cumm[i - 1] + 1\n        else:\n            cumm[i] = cumm[i - 1]\n    m1 = math.floor(o1 / 2) + 1\n    m2 = math.floor(o2 / 2) + 1\n    flag = 0\n    for i in range(0, o2):\n        c = 0\n        k = i\n        for j in range(0, o1):\n            if k + o2 < n and cumm[k + o2] - cumm[k] >= m2:\n                c = c + 1\n            elif k + o2 >= n and cumm[n] - cumm[k] + cumm[o2 - (n - k)] >= m2:\n                c = c + 1\n            k = k + o2\n        if c >= m1:\n            print('1')\n            flag = 1\n            break\n    if flag == 0:\n        print('0')", "t = int(input())\nwhile t:\n    t -= 1\n    (o1, o2) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    ans = 0\n    dist = []\n    for i in range(0, o1 * o2, o2):\n        dist.append(a[i:i + o2].count(1))\n    c = 0\n    for i in dist:\n        if i > o2 // 2:\n            c += 1\n    if c > o1 // 2:\n        print(1)\n    else:\n        f = 1\n        for i in range(1, o2):\n            k = 0\n            for j in range(i, o1 * o2, o2):\n                dist[k] += a[(j + o2 - 1) % (o1 * o2)] - a[j - 1]\n                k += 1\n            c = 0\n            for i in dist:\n                if i > o2 // 2:\n                    c += 1\n            if c > o1 // 2:\n                print(1)\n                f = 0\n                break\n        if f:\n            print(0)", "for _ in range(int(input())):\n    [o1, o2] = [int(i) for i in input().split()]\n    n = o1 * o2\n    a = [int(i) for i in input().split()]\n    l = sum(a[:o2])\n    b = [l]\n    for i in range(1, n):\n        b.append(b[-1] + a[(i + o2 - 1) % n])\n        b[-1] -= a[i - 1]\n    for i in range(n):\n        if b[i] > o2 // 2:\n            b[i] = 1\n        else:\n            b[i] = 0\n    for i in range(o2):\n        j = i + o2\n        while j < n:\n            b[i] += b[j]\n            j += o2\n        if b[i] > o1 // 2:\n            print('1')\n            break\n    else:\n        print('0')", "t = int(input())\nwhile t > 0:\n    flag = 0\n    o = input().split()\n    n = int(o[0])\n    q = int(o[1])\n    sum = [0] * q\n    arr = input().split()\n    i = yt = rem = 0\n    if n == 1 or q == 1:\n        yt = 1\n        while i < n:\n            rem = rem + int(arr[i])\n            i = i + 1\n            if rem > n / 2:\n                flag = 1\n                break\n    while i < q - 1 and yt == 0:\n        arr.append(arr[i])\n        i = i + 1\n    i = k = 0\n    while arr and yt == 0:\n        arr[i] = int(arr[i])\n        if i < q:\n            rem = rem + arr[i]\n        else:\n            if rem > q / 2:\n                pos = i % q\n                sum[pos] = sum[pos] + 1\n                if sum[pos] > n / 2:\n                    flag = 1\n                    break\n            rem = rem - arr[k]\n            rem = rem + arr[i]\n            k = k + 1\n        i = i + 1\n        if i == n * q + (q - 1):\n            break\n    if rem > q / 2 and yt == 0:\n        sum[q - 1] = sum[q - 1] + 1\n    if sum[q - 1] > n / 2 and yt == 0:\n        flag = 1\n    if flag == 1:\n        print('1')\n    else:\n        print('0')\n    t = t - 1", "import sys\n\ndef ones_win(states, dps, num_states):\n    return [int(ones > dps / 2) for ones in states].count(1) > num_states / 2\n\ndef main():\n    for _ in range(int(sys.stdin.readline())):\n        (num_states, dps) = list(map(int, sys.stdin.readline().split()))\n        districts = list(map(int, sys.stdin.readline().split()))\n        states = [sum(districts[i * dps:(i + 1) * dps]) for i in range(num_states)]\n        found = 0\n        for i in range(dps):\n            for j in range(num_states):\n                if i == 0:\n                    break\n                s = j * dps + i - 1\n                e = ((j + 1) * dps + i - 1) % (dps * num_states)\n                if districts[s] != districts[e]:\n                    if districts[e] == 0:\n                        states[j] -= 1\n                    else:\n                        states[j] += 1\n            if ones_win(states, dps, num_states):\n                found = 1\n                break\n            if len(states) == 0:\n                break\n        print(found)\nmain()", "import sys\n\ndef ones_win(districts, spd, num_districts):\n    return [int(ones > spd / 2) for ones in districts].count(1) > num_districts / 2\n\ndef main():\n    for _ in range(int(sys.stdin.readline())):\n        (num_states, dps) = list(map(int, sys.stdin.readline().split()))\n        districts = list(map(int, sys.stdin.readline().split()))\n        states = [sum(districts[i * dps:(i + 1) * dps]) for i in range(num_states)]\n        found = 0\n        for i in range(dps):\n            for j in range(num_states):\n                if i == 0:\n                    break\n                s = j * dps + i - 1\n                e = ((j + 1) * dps + i - 1) % (dps * num_states)\n                if districts[s] != districts[e]:\n                    if districts[e] == 0:\n                        states[j] -= 1\n                    else:\n                        states[j] += 1\n            if ones_win(states, dps, num_states):\n                found = 1\n                break\n        print(found)\nmain()", "t = int(input())\nfor i in range(t):\n    (o1, o2) = list(map(int, input().strip().split()))\n    d = list(map(int, input().strip().split()))\n    o1by2 = o1 // 2\n    o2by2 = o2 // 2\n    flag = 0\n    ll = [0] * o2\n    s = sum(d[0:o2])\n    if s > o2by2:\n        ll[0] += 1\n    for i in range(o1 * o2 - o2):\n        s = s - d[i] + d[o2 + i]\n        if s > o2by2:\n            ll[(i + 1) % o2] += 1\n    for (i, j) in zip(range(o2 - 1), range(o1 * o2 - o2, o1 * o2 - 1)):\n        s = s - d[j] + d[i]\n        if s > o2by2:\n            ll[(i + 1) % o2] += 1\n    count = 0\n    for i in ll:\n        if i > o1by2:\n            flag = 1\n            break\n    print(flag)", "for i in range(int(input())):\n    (o1, o2) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    sum_array = []\n    r = []\n    for j in range(o1 * o2):\n        r.append(a[j])\n    for j in range(o2 - 1):\n        r.append(a[j])\n    count = 0\n    acd = 0\n    for j in range(o1 * o2):\n        if r[j] == 1:\n            count += 1\n        if (j + 1) % o2 == 0:\n            sum_array.append(count)\n            if count >= o2 // +1:\n                acd += 1\n            count = 0\n    if acd >= o1 // 2 + 1:\n        m = 1\n    else:\n        m = 0\n    if m == 0:\n        for k in range(o2 - 1):\n            totalcount = 0\n            s = 0\n            for j in range(k, o1 * o2, o2):\n                sum_array[s] = sum_array[s] + r[j + o2] - r[j]\n                if sum_array[s] >= o2 // 2 + 1:\n                    totalcount += 1\n                s += 1\n            if totalcount >= o1 // 2 + 1:\n                m = 1\n                break\n    if m == 1:\n        print(1)\n    else:\n        print(0)", "for i in range(int(input())):\n    (o1, o2) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    sum_array = []\n    r = []\n    if o2 == 1:\n        if a.count(1) >= o1 // 2 + 1:\n            print(1)\n        else:\n            print(0)\n    else:\n        for j in range(o1 * o2):\n            r.append(a[j])\n        for j in range(o2 - 1):\n            r.append(a[j])\n        count = 0\n        acd = 0\n        for j in range(o1 * o2):\n            if r[j] == 1:\n                count += 1\n            if (j + 1) % o2 == 0:\n                sum_array.append(count)\n                if count >= o2 // +1:\n                    acd += 1\n                count = 0\n        if acd >= o1 // 2 + 1:\n            m = 1\n        else:\n            m = 0\n        if m == 0:\n            for k in range(o2 - 1):\n                totalcount = 0\n                s = 0\n                for j in range(k, o1 * o2, o2):\n                    sum_array[s] = sum_array[s] + r[j + o2] - r[j]\n                    if sum_array[s] >= o2 // 2 + 1:\n                        totalcount += 1\n                    s += 1\n                if totalcount >= o1 // 2 + 1:\n                    m = 1\n                    break\n        if m == 1:\n            print(1)\n        else:\n            print(0)", "def ans(l, o1, o2):\n    i = 0\n    n = len(l)\n    l = l + l\n    c = 0\n    p = []\n    while i < len(l):\n        c += l[i]\n        p += [c]\n        i += 1\n    i = 0\n    while i < o2:\n        (c1, c2) = (0, 0)\n        j = i\n        while j < n:\n            if p[j + o2] - p[j] > o2 / 2:\n                c1 += 1\n            else:\n                c2 += 1\n            j += o2\n        if c1 > c2:\n            return 1\n        i += 1\n    return 0\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (o1, o2) = map(int, input().split())\n    l = list(map(int, input().split()))\n    print(ans(l, o1, o2))", "def solve(o1, o2, s):\n    n = o1 * o2\n    for i in range(1, n):\n        s[i] = s[i - 1] + s[i]\n    if (o1 + 1) / 2 * ((o2 + 1) / 2) > s[n - 1]:\n        print('0')\n        return\n    for i in range(0, o2):\n        sum_a = 0\n        k = 2\n        if i == 0:\n            if s[i + o2 - 1] * 2 > o2:\n                sum_a += 1\n        else:\n            k = 1\n        for j in range(k, o1 + 1):\n            a = (i + o2 * j - 1) % n\n            b = (i + o2 * (j - 1) - 1) % n\n            if a > b and (s[a] - s[b]) * 2 > o2 or (a < b and (s[n - 1] - s[b] + s[a]) * 2 > o2):\n                sum_a += 1\n        if sum_a * 2 > o1:\n            print('1')\n            return\n    print('0')\nt_cases = int(input())\nt = 0\nwhile t < t_cases:\n    t += 1\n    (a1, a2) = map(int, input().split())\n    d = list(map(int, input().split()))\n    solve(a1, a2, d)", "import sys\nt = int(sys.stdin.readline())\nwhile t:\n    (o1, o2) = [int(x) for x in sys.stdin.readline().split()]\n    arr = [int(x) for x in sys.stdin.readline().split()]\n    n = o1 * o2\n    if o2 == 1 or o1 == 1:\n        if sum(arr) > n // 2:\n            print(1)\n        else:\n            print(0)\n    else:\n        res = [0] * n\n        tmp_sum = sum(arr[-o2:])\n        for i in range(o2):\n            tmp_sum = tmp_sum - arr[-(o2 - i)] + arr[i]\n            if tmp_sum > o2 // 2:\n                res[i] = 1\n        tmp_sum = sum(arr[:o2])\n        for i in range(o2, n):\n            tmp_sum = tmp_sum - arr[i - o2] + arr[i]\n            res[i] = res[i - o2]\n            if tmp_sum > o2 // 2:\n                res[i] += 1\n        if max(res) > o1 // 2:\n            print(1)\n        else:\n            print(0)\n    t = t - 1", "num_cases = int(input())\nfor _ in range(num_cases):\n    (num_states, districts_per_state) = map(int, input().strip().split())\n    representatives = [int(c) for c in input().strip().split()]\n    governors = []\n    for i in range(0, len(representatives), districts_per_state):\n        governors.append(sum(representatives[i:i + districts_per_state]))\n    if sum(map(lambda x: 1 if x > districts_per_state // 2 else -1, governors)) > 0:\n        print('1')\n        continue\n    for dist_idx in range(0, districts_per_state - 1):\n        for state_idx in range(num_states):\n            governors[state_idx] -= representatives[state_idx * districts_per_state + dist_idx]\n            governors[state_idx - 1] += representatives[state_idx * districts_per_state + dist_idx]\n        if sum(map(lambda x: 1 if x > districts_per_state // 2 else -1, governors)) > 0:\n            print('1')\n            break\n    else:\n        print('0')", "import math\nt = int(input())\nwhile t != 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    li = list(map(int, input().split()))\n    check = []\n    c = 0\n    for i in range(m):\n        if li[i] == 1:\n            c += 1\n    check = [0] * (n * m)\n    check[0] = c\n    for i in range(1, m * (n - 1) + 1):\n        check[i] = check[i - 1]\n        if li[i - 1] == 1:\n            check[i] -= 1\n        if li[i + m - 1] == 1:\n            check[i] += 1\n    for i in range(m * (n - 1) + 1, n * m):\n        check[i] = check[i - 1]\n        if li[i - 1] == 1:\n            check[i] -= 1\n        if li[(i + m - 1) % (n * m)] == 1:\n            check[i] += 1\n    ans = []\n    for i in range(m):\n        temp = []\n        pos = i\n        for j in range(n):\n            temp.append(check[pos])\n            pos += m\n        ans.append(temp)\n    ok = False\n    for i in ans:\n        lc = 0\n        for j in i:\n            if j >= (m + 1) // 2:\n                lc += 1\n        if lc >= (n + 1) // 2:\n            ok = True\n    if ok:\n        print(1)\n    else:\n        print(0)", "for t in range(int(input())):\n    (o1, o2) = [int(i) for i in input().split()]\n    d = [int(i) for i in input().split()]\n    dbins = []\n    i = 0\n    for j in range(o1):\n        l = []\n        for k in range(o2):\n            l.append(d[i])\n            i += 1\n        dbins.append(l)\n    sums = [sum(d) for d in dbins]\n    localplur = o2 // 2 + 1\n    nationplur = o1 // 2 + 1\n    wins = 0\n    for s in sums:\n        if s >= localplur:\n            wins += 1\n    if wins >= nationplur:\n        print(1)\n        continue\n    found = False\n    for i in range(o2 - 1):\n        for j in range(o1 - 1):\n            sums[j] += dbins[j + 1][i]\n            sums[j] -= dbins[j][i]\n        sums[-1] += dbins[0][i]\n        sums[-1] -= dbins[-1][i]\n        wins = 0\n        for s in sums:\n            if s >= localplur:\n                wins += 1\n        if wins >= nationplur:\n            print(1)\n            break\n    else:\n        print(0)", "c = 1\ncases = int(input())\nwhile c <= cases:\n    [n, m] = [int(i) for i in input().split()]\n    d = [int(i) for i in input().split()]\n    d += d[:m]\n    dn = [0 for i in range(0, n)]\n    ind = -1\n    OZ = False\n    for i in range(0, n * m):\n        if i % m == 0:\n            ind += 1\n        dn[ind] += d[i]\n    for i in range(0, m):\n        zfc = 0\n        ofc = 0\n        for j in dn:\n            if j > m - j:\n                ofc += 1\n            else:\n                zfc += 1\n        if ofc > zfc:\n            OZ = True\n            break\n        for j in range(0, n):\n            dn[j] = dn[j] - d[j * m + i] + d[(j + 1) * m + i]\n    if OZ:\n        print(1)\n    else:\n        print(0)\n    c = c + 1", "c = 1\ncases = int(input())\nwhile c <= cases:\n    [n, m] = [int(i) for i in input().split()]\n    d = [int(i) for i in input().split()]\n    d += d[:m]\n    dn = [0 for i in range(0, n)]\n    OZ = False\n    for i in range(0, n):\n        for j in range(m * i, m * i + m):\n            dn[i] += d[j]\n    for i in range(0, m):\n        zfc = 0\n        ofc = 0\n        for j in dn:\n            if j > m - j:\n                ofc += 1\n            else:\n                zfc += 1\n        if ofc > zfc:\n            OZ = True\n            break\n        for j in range(0, n):\n            dn[j] = dn[j] - d[j * m + i] + d[(j + 1) * m + i]\n    if OZ:\n        print(1)\n    else:\n        print(0)\n    c = c + 1", "c = 1\ncases = int(input())\nwhile c <= cases:\n    [n, m] = [int(i) for i in input().split()]\n    d = [int(i) for i in input().split()]\n    d += d[:m]\n    dn = [0 for i in range(0, n)]\n    ind = -1\n    OZ = False\n    for i in range(0, n * m):\n        if i % m == 0:\n            ind += 1\n        dn[ind] += d[i]\n    for i in range(0, m):\n        zfc = 0\n        ofc = 0\n        for j in dn:\n            if j > m - j:\n                ofc += 1\n            elif m - j > j:\n                zfc += 1\n        if ofc > zfc:\n            OZ = True\n            break\n        for j in range(0, n):\n            dn[j] = dn[j] - d[j * m + i] + d[(j + 1) * m + i]\n    if OZ:\n        print(1)\n    else:\n        print(0)\n    c = c + 1", "c = 1\ncases = int(input())\nwhile c <= cases:\n    [n, m] = [int(i) for i in input().split()]\n    d = [int(i) for i in input().split()]\n    d += d[:m]\n    dn = [0 for i in range(0, n)]\n    ind = -1\n    OZ = False\n    for i in range(0, n * m):\n        if i % m == 0:\n            ind += 1\n        if d[i] == 1:\n            dn[ind] += 1\n    for i in range(0, m):\n        zfc = 0\n        ofc = 0\n        for j in dn:\n            if j > m - j:\n                ofc += 1\n            elif m - j > j:\n                zfc += 1\n        if ofc > zfc:\n            OZ = True\n            break\n        for j in range(0, n):\n            dn[j] = dn[j] - d[j * m + i] + d[(j + 1) * m + i]\n    if OZ:\n        print(1)\n    else:\n        print(0)\n    c = c + 1", "cases = int(input())\nfor case in range(cases):\n    (states, dist) = map(int, input().strip().split())\n    districts = list(map(int, input().strip().split()))\n    districts = districts[:] + districts[:dist]\n    distmaj = dist / 2\n    statesmaj = states / 2\n    nums = states * dist\n    offsetSums = [0] * nums\n    offsetSums[0] = sum(districts[:dist])\n    for i in range(1, nums):\n        offsetSums[i] = offsetSums[i - 1] - districts[i - 1] + districts[i - 1 + dist]\n    offsetSums = list(map(lambda x: 1 if x > distmaj else 0, offsetSums))\n    majorities = [0] * dist\n    for i in range(dist):\n        majorities[i] = [offsetSums[i + j * dist] for j in range(states)]\n    presidents = list(map(lambda x: 1 if sum(x) > statesmaj else 0, majorities))\n    print(max(presidents))", "for _ in range(int(input())):\n    (o1, o2) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    (count1, count0) = ([0] * o1, [0] * o1)\n    for i in range(o1):\n        count1[i] = arr[i * o2:(i + 1) * o2].count(1)\n        count0[i] = arr[i * o2:(i + 1) * o2].count(0)\n    (win1, win0) = (0, 0)\n    for i in range(o1):\n        if count1[i] > count0[i]:\n            win1 += 1\n        else:\n            win0 += 1\n    if win1 > win0:\n        print(1)\n        continue\n    for j in range(1, o2):\n        for i in range(o1):\n            (fi, li) = (i * o2 + j - 1, (i * o2 + j + o2 - 1) % (o1 * o2))\n            if arr[fi] == 1:\n                count1[i] -= 1\n            else:\n                count0[i] -= 1\n            if arr[li] == 1:\n                count1[i] += 1\n            else:\n                count0[i] += 1\n        (win1, win2) = (0, 0)\n        for i in range(o1):\n            if count1[i] > count0[i]:\n                win1 += 1\n            else:\n                win2 += 1\n        if win1 > win2:\n            print(1)\n            break\n    else:\n        print(0)", "t = int(input())\nfor t0 in range(t):\n    s = [int(i) for i in input().strip().split()]\n    (o1, o2) = (s[0], s[1])\n    li = [int(i) for i in input().strip().split()]\n    n = o1 * o2\n    dp = [0 for i in range(n + 1)]\n    for i in range(n):\n        if li[i] == 0:\n            dp[i + 1] = dp[i]\n        else:\n            dp[i + 1] = dp[i] + 1\n    fl = 0\n    ct = 0\n    mid = (o2 + 1) // 2\n    mnd = (o1 + 1) // 2\n    noo = 0\n    noz = 0\n    cal = n - o2 - o2 + 1\n    while ct < o2:\n        tmp = ct\n        fl = 0\n        noo = 0\n        noz = 0\n        while tmp < cal + ct:\n            if dp[tmp + o2] - dp[tmp] >= mid:\n                noo += 1\n            else:\n                noz += 1\n            tmp += o2\n            if noo == mnd:\n                fl = 1\n                break\n            elif noz == mnd:\n                fl = 2\n                break\n        if fl == 1:\n            break\n        elif fl == 2:\n            ct += 1\n        else:\n            if tmp == n - o2:\n                if dp[tmp + o2] - dp[tmp] >= mid:\n                    fl = 1\n                    break\n            else:\n                tmpr = dp[n] - dp[tmp] + dp[ct]\n                if tmpr >= mid:\n                    fl = 1\n                    break\n            ct += 1\n    if fl == 1:\n        print(1)\n    else:\n        print(0)", "flag_debug = True\n\ndef read(type=int):\n    return type(input())\n\ndef read_arr(type=int):\n    return [type(token) for token in input().split()]\n\ndef debug(*args):\n    if flag_debug:\n        print(args)\n\ndef check(C, s, d):\n    count = 0\n    for i in range(s):\n        if C[i] >= (d + 1) // 2:\n            count += 1\n            if count >= (s + 1) // 2:\n                return 1\n    return 0\n\ndef solve(s, d, A):\n    C = [0] * s\n    for i in range(s):\n        for j in range(d):\n            C[i] += A[i * d + j]\n    c = 0\n    for j in range(d):\n        for k in range(s):\n            C[k] += A[(k + 1) % s * d + j] - A[k * d + j]\n        c = check(C, s, d)\n        if c == 1:\n            break\n    return c\n\ndef run():\n    t = read()\n    for i in range(t):\n        (s, d) = read_arr()\n        A = read_arr()\n        print(solve(s, d, A))\nrun()", "cases = int(input())\nwhile cases:\n    cases -= 1\n    [states, districts] = list(map(int, input().split()))\n    polls = list(map(int, input().split()))\n    districtWins = [0] * len(polls)\n    stateWins = [0] * len(polls)\n    minDistrict = districts // 2 + 1\n    minState = states // 2 + 1\n    polls.extend(polls[:districts - 1])\n    oneWins = False\n    if states == 1 or districts == 1:\n        oneWins = True if polls[:states * districts].count(1) >= states * districts / 2 else False\n    else:\n        initialSum = sum(polls[:districts])\n        districtWins[0] = initialSum\n        stateWins[0] = 1 if districtWins[0] >= minDistrict else 0\n        if stateWins[0] >= minState:\n            oneWins = True\n        else:\n            for i in range(1, states * districts):\n                districtWins[i] = districtWins[i - 1] - polls[i - 1] + polls[i + districts - 1]\n                stateWins[i] = (0 if i < districts else stateWins[i - districts]) + (1 if districtWins[i] >= minDistrict else 0)\n                if stateWins[i] >= minState:\n                    oneWins = True\n                    break\n    if oneWins:\n        print(1)\n    else:\n        print(0)", "def checkpresident(o1, o2, arr=None, sumarr=None):\n    if arr == None:\n        arr = []\n    if sumarr == None:\n        sumarr = []\n    for i in range(o2):\n        count = [0, 0]\n        x = i\n        for j in range(o1):\n            if x < o2:\n                if sumarr[x] - 0 + sumarr[len(arr) - 1] - sumarr[len(arr) - 1 - (o2 - (x + 1))] >= (o2 + 1) // 2:\n                    count[1] += 1\n                else:\n                    count[0] += 1\n            elif sumarr[x] - sumarr[x - o2] >= (o2 + 1) // 2:\n                count[1] += 1\n            else:\n                count[0] += 1\n            x += o2\n        if count[1] > count[0]:\n            return 1\n    return 0\n\ndef problem3():\n    t = int(input())\n    for T in range(t):\n        temp = input()\n        (o1, o2) = [int(i) for i in temp.split()]\n        temp = input()\n        arr = [int(i) for i in temp.split()]\n        sumarr = arr\n        for i in range(1, len(arr)):\n            sumarr[i] = sumarr[i - 1] + arr[i]\n        print(checkpresident(o1, o2, arr, sumarr))\nproblem3()", "t = int(input())\nfor i in range(t):\n    flag = 0\n    (o1, o2) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    a = a + a[:o2 - 1]\n    b = [0] * o2\n    ones = 0\n    ones = sum(a[:o2])\n    if ones > o2 / 2:\n        b[0] = 1\n    for j in range(o2, len(a)):\n        ones = ones + a[j] - a[j - o2]\n        if ones > o2 / 2:\n            b[(j + 1) % o2] += 1\n    if any((i > o1 / 2 for i in b)):\n        print(1)\n    else:\n        print(0)", "t = int(input())\nfor i in range(t):\n    a = []\n    (o1, o2) = map(int, input().split())\n    n = o1 * o2\n    a.extend(map(int, input().split()))\n    b = []\n    s = 0\n    for j in range(o2):\n        s += a[j]\n    b.append(s)\n    for j in range(1, n):\n        s = s - a[j - 1] + a[(j + o2 - 1) % n]\n        b.append(s)\n    ans = 0\n    for i in range(o2):\n        f = 0\n        for j in range(o1):\n            if b[j * o2 + i] > o2 // 2:\n                f += 1\n        if f > o1 // 2:\n            ans = 1\n            break\n    print(ans)", "def read_input():\n    t = int(input())\n    for _ in range(t):\n        (o1, o2) = input().strip().split()\n        (o1, o2) = (int(o1), int(o2))\n        l = input().strip().split()\n        l[0] = int(l[0])\n        for i in range(1, o1 * o2):\n            l[i] = l[i - 1] + int(l[i])\n        flag = False\n        for i in range(0, o2):\n            bits = calculate(i, o1, o2, l)\n            if sum(bits) > len(bits) / 2:\n                flag = True\n                break\n        if flag:\n            print(1)\n        else:\n            print(0)\n\ndef calculate(i, o1, o2, l):\n    bit = [0 for _ in range(o1)]\n    j = i\n    for k in range(o1):\n        if j == 0:\n            if l[j + o2 - 1] > o2 / 2:\n                bit[k] = 1\n        elif j + o2 - 1 < o1 * o2:\n            if l[j + o2 - 1] - l[j - 1] > o2 / 2:\n                bit[k] = 1\n        elif l[o1 * o2 - 1] - l[j - 1] + l[o2 - (o1 * o2 - j)] > o2 / 2:\n            bit[k] = 1\n        j += o2\n    return bit\nread_input()", "t = int(input())\nwhile t > 0:\n    (o1, o2) = map(int, input().split())\n    n = o1 * o2\n    a = [int(i) for i in input().split()]\n    sum = []\n    sum.append(a[0])\n    for i in range(1, n):\n        sum.append(sum[i - 1] + a[i])\n    ok = False\n    for i in range(0, o2):\n        one = 0\n        zero = 0\n        for k in range(0, o1):\n            cnt = 0\n            j = k * o2 + i\n            if j + o2 - 1 >= n:\n                jj = (j + o2 - 1) % n\n                if j == 0:\n                    cnt = sum[n - 1] + sum[jj]\n                else:\n                    cnt = sum[n - 1] - sum[j - 1] + sum[jj]\n            else:\n                jj = (j + o2 - 1) % n\n                if j == 0:\n                    cnt = sum[jj]\n                else:\n                    cnt = sum[jj] - sum[j - 1]\n            if cnt > o2 - cnt:\n                one += 1\n            else:\n                zero += 1\n        if one > zero:\n            ok = True\n            break\n    if ok == True:\n        print(1)\n    else:\n        print(0)\n    t -= 1", "t = int(input())\narr_st_pos = []\n\ndef cal(i, size, all_dist_rep):\n    summ = 0\n    while i < size:\n        summ += all_dist_rep[i]\n        i += 1\n    return summ\ni = 0\nwhile i < 1000000:\n    arr_st_pos.append(-1)\n    i += 1\nwhile t:\n    t -= 1\n    o1o2 = [int(x) for x in input().split()]\n    o1 = o1o2[0]\n    o2 = o1o2[1]\n    n = o1 * o2\n    all_dist_rep = [int(x) for x in input().split()]\n    ref_table = set([])\n    i = 0\n    val = cal(i, o2, all_dist_rep)\n    dist_maj = o2 // 2\n    if val > dist_maj:\n        arr_st_pos[0] = 0\n    i = 1\n    while i < n:\n        new_val = val - all_dist_rep[i - 1] + all_dist_rep[(i + o2 - 1) % n]\n        if new_val > dist_maj:\n            arr_st_pos[i] = i\n        else:\n            arr_st_pos[i] = -1\n        val = new_val\n        i += 1\n    leng_pos_tab = len(arr_st_pos)\n    j = 0\n    flag = 1\n    cnt = 0\n    state_maj = o1 // 2\n    while j < leng_pos_tab and (not cnt > state_maj):\n        st = arr_st_pos[j]\n        if st == -1:\n            j += 1\n            continue\n        cnt = 1\n        arr_st_pos[st] = -1\n        i = (st + o2) % n\n        while i != st and (not cnt > state_maj):\n            if arr_st_pos[i] != -1:\n                arr_st_pos[i] = -1\n                cnt += 1\n            i = (i + o2) % n\n        j += 1\n    if j < leng_pos_tab:\n        print('1')\n    else:\n        print('0')", "t = int(input())\narr_st_pos = []\n\ndef cal(i, size, all_dist_rep):\n    summ = 0\n    while i < size:\n        summ += all_dist_rep[i]\n        i += 1\n    return summ\ni = 0\nwhile i < 1000000:\n    arr_st_pos.append(-1)\n    i += 1\nwhile t:\n    t -= 1\n    o1o2 = [int(x) for x in input().split()]\n    o1 = o1o2[0]\n    o2 = o1o2[1]\n    n = o1 * o2\n    all_dist_rep = [int(x) for x in input().split()]\n    ref_table = set([])\n    i = 0\n    val = cal(i, o2, all_dist_rep)\n    dist_maj = o2 // 2\n    if val > dist_maj:\n        arr_st_pos[0] = 0\n    i = 1\n    while i < n:\n        new_val = val - all_dist_rep[i - 1] + all_dist_rep[(i + o2 - 1) % n]\n        if new_val > dist_maj:\n            arr_st_pos[i] = i\n        else:\n            arr_st_pos[i] = -1\n        val = new_val\n        i += 1\n    leng_pos_tab = len(arr_st_pos)\n    j = 0\n    flag = 1\n    cnt = 0\n    state_maj = o1 // 2\n    while j < leng_pos_tab and (not cnt > state_maj):\n        st = arr_st_pos[j]\n        if st == -1:\n            j += 1\n            continue\n        cnt = 1\n        arr_st_pos[st] = -1\n        i = (st + o2) % n\n        while i != st and (not cnt > state_maj):\n            if arr_st_pos[i] != -1:\n                arr_st_pos[i] = -1\n                cnt += 1\n            i = (i + o2) % n\n        j += 1\n    if j < leng_pos_tab:\n        print('1')\n    else:\n        print('0')", "t = int(input().strip(' '))\nfor _ in range(t):\n    (o1, o2) = map(int, input().strip(' ').split(' '))\n    n = o1 * o2\n    array = list(input().strip(' ').split(' '))\n    one = zero = 0\n    for i in range(o2):\n        if array[i] == '0':\n            zero += 1\n        else:\n            one += 1\n    num = list()\n    if one > zero:\n        num.append(1)\n    else:\n        num.append(0)\n    for i in range(n - 1):\n        if array[(i + o2) % n] == '0':\n            zero += 1\n        else:\n            one += 1\n        if array[i] == '0':\n            zero -= 1\n        else:\n            one -= 1\n        if one > zero:\n            num.append(1)\n        else:\n            num.append(0)\n    for i in range(o2):\n        one = 0\n        zero = 0\n        for j in range(i, n, o2):\n            if num[j] == 1:\n                one += 1\n            else:\n                zero += 1\n        if one > zero:\n            print(1)\n            break\n    else:\n        print(0)", "from collections import deque\nt = int(input())\nans = []\nfor i in range(t):\n    (o1, o2) = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    list_of_states = [0 for j in range(len(d))]\n    win_que = deque()\n    num_zer = 0\n    num_one = 0\n    for j in range(o2):\n        win_que.append(d[j])\n        if d[j] == 0:\n            num_zer += 1\n        else:\n            num_one += 1\n    if num_one > num_zer:\n        list_of_states[0] = 1\n    for j in range(1, len(d)):\n        ele = win_que.popleft()\n        if ele == 0:\n            num_zer -= 1\n        else:\n            num_one -= 1\n        if j <= len(d) - o2:\n            if d[j + o2 - 1] == 0:\n                num_zer += 1\n            else:\n                num_one += 1\n            win_que.append(d[j + o2 - 1])\n        else:\n            if d[o2 - (len(d) - j) - 1] == 0:\n                num_zer += 1\n            else:\n                num_one += 1\n            win_que.append(d[o2 - (len(d) - j) - 1])\n        if j >= o2:\n            if num_one > num_zer:\n                list_of_states[j] = list_of_states[j - o2] + 1\n            else:\n                list_of_states[j] = list_of_states[j - o2]\n        elif num_one > num_zer:\n            list_of_states[j] = 1\n    max_count = 0\n    for j in range(len(d)):\n        if list_of_states[j] > max_count:\n            max_count = list_of_states[j]\n    if max_count >= (o1 + 1) // 2:\n        ans.append(1)\n    else:\n        ans.append(0)\nfor x in ans:\n    print(x)", "T = int(input())\nfor t in range(T):\n    (o1, o2) = map(int, input().strip().split())\n    A = list(map(int, input().strip().split()))\n    A = A + A[:o2 - 1]\n    N = o1 * o2\n    ans = 0\n    if o2 == 1:\n        if A.count(1) > A.count(0):\n            ans = 1\n    else:\n        Z = [0] * (N + o2)\n        O = [0] * (N + o2)\n        for i in range(N + o2 - 1):\n            if A[i] & 1:\n                O[i + 1] = O[i] + 1\n                Z[i + 1] = Z[i]\n            else:\n                O[i + 1] = O[i]\n                Z[i + 1] = Z[i] + 1\n        for i in range(o2):\n            (ones, zeros) = (0, 0)\n            for j in range(i, N, o2):\n                z = Z[j + o2] - Z[j]\n                o = O[j + o2] - O[j]\n                if o > z:\n                    ones += 1\n                else:\n                    zeros += 1\n            if ones > zeros:\n                ans = 1\n                break\n    print(ans)", "import sys\nt = int(sys.stdin.readline())\nwhile t:\n    t -= 1\n    (o1, o2) = [int(x) for x in sys.stdin.readline().split()]\n    data = [int(x) for x in sys.stdin.readline().split()]\n    n = o1 * o2\n    if o2 == 1 or o1 == 1:\n        if sum(data) > n / 2:\n            print('1')\n        else:\n            print('0')\n    else:\n        res = [0] * n\n        tmp_sm = sum(data[-o2:])\n        for i in range(o2):\n            tmp_sm = tmp_sm - data[-(o2 - i)] + data[i]\n            if tmp_sm > o2 / 2:\n                res[i] = 1\n        tmp_sm = sum(data[:o2])\n        for i in range(o2, n):\n            tmp_sm = tmp_sm - data[i - o2] + data[i]\n            res[i] = res[i - o2]\n            if tmp_sm > o2 / 2:\n                res[i] += 1\n        if max(res) > o1 / 2:\n            print('1')\n        else:\n            print('0')", "t = int(input())\n\ndef cal(i, size, all_dist_rep):\n    summ = 0\n    while i < size:\n        summ += all_dist_rep[i]\n        i += 1\n    return summ\nwhile t:\n    t -= 1\n    o1o2 = [int(x) for x in input().split()]\n    o1 = o1o2[0]\n    o2 = o1o2[1]\n    n = o1 * o2\n    all_dist_rep = [int(x) for x in input().split()]\n    ref_table = set([])\n    arr_st_pos = []\n    i = 0\n    val = cal(i, o2, all_dist_rep)\n    dist_maj = o2 // 2\n    if val > dist_maj:\n        arr_st_pos.append(0)\n    i = 1\n    while i < n:\n        new_val = val - all_dist_rep[i - 1] + all_dist_rep[(i + o2 - 1) % n]\n        if new_val > dist_maj:\n            arr_st_pos.append(i)\n        val = new_val\n        i += 1\n    leng_pos_tab = len(arr_st_pos)\n    state_maj = o1 // 2\n    arr_cnt = []\n    for i in range(0, o2):\n        arr_cnt.append(0)\n    for i in range(0, leng_pos_tab):\n        arr_cnt[arr_st_pos[i] % o2] = arr_cnt[arr_st_pos[i] % o2] + 1\n    arr_cnt.sort()\n    if arr_cnt[o2 - 1] > state_maj:\n        print('1')\n    else:\n        print('0')", "for t in range(0, int(input())):\n    arr = [int(i) for i in input().split()]\n    (o, p, f) = (arr[0], arr[1], True)\n    arr = [int(i) for i in input().split()]\n    lst = [0 for i in range(0, o * p)]\n    (one, zer, n) = (0, 0, o * p)\n    for i in range(0, p):\n        if arr[i] == 0:\n            zer += 1\n        else:\n            one += 1\n    if zer > one:\n        lst[0] = 0\n    else:\n        lst[1] = 1\n    i = 1\n    while i < n:\n        if arr[(i - 1 + n) % n] == 0:\n            zer -= 1\n        else:\n            one -= 1\n        if arr[(i + p - 1) % n] == 0:\n            zer += 1\n        else:\n            one += 1\n        if zer > one:\n            lst[i] = 0\n        else:\n            lst[i] = 1\n        i += 1\n    f = True\n    if p == 1:\n        for i in range(0, n):\n            lst[i] = arr[i]\n    for i in range(0, p):\n        (zer, one, j, cn) = (0, 0, i, 0)\n        while cn < o:\n            if lst[j] == 0:\n                zer += 1\n            else:\n                one += 1\n            cn += 1\n            j = (j + p) % n\n        if one > zer:\n            print(1)\n            f = False\n            break\n    if f:\n        print(0)", "def f(N, M, A):\n    pref_sum = [0]\n    for i in range(N * M):\n        pref_sum.append(pref_sum[-1] + A[i])\n    for i in range(1, M + 1):\n        j = i\n        cnt = 0\n        while j + M <= N * M + 1:\n            if pref_sum[j + M - 1] - pref_sum[j - 1] > M / 2:\n                cnt += 1\n            if cnt > N / 2:\n                print(1)\n                return\n            j += M\n        if j < N * M:\n            l = pref_sum[N * M] - pref_sum[j - 1] + pref_sum[i]\n            if l > M / 2:\n                cnt += 1\n            if cnt > N / 2:\n                print(1)\n                return\n    print(0)\n    return\nT = int(input())\nwhile T > 0:\n    T -= 1\n    (N, M) = [int(x) for x in input().strip().split()]\n    A = [int(x) for x in input().strip().split()]\n    f(N, M, A)", "def is_pres(st, l1, l2):\n    cnt = 0\n    for i in st:\n        if i > l2 // 2:\n            cnt += 1\n    return cnt > l1 // 2\nfor _ in range(int(input())):\n    (o1, o2) = map(int, input().split())\n    n = o1 * o2\n    a = list(map(int, input().split()))\n    a.extend(a[:o2])\n    result = 0\n    c = a.count(1)\n    b = []\n    for i in range(o1):\n        b.append(sum(a[i * o2:(i + 1) * o2]))\n    if is_pres(b, o1, o2):\n        result = 1\n    else:\n        for i in range(o2 - 1):\n            for j in range(o1):\n                b[j] -= a[i + j * o2]\n                b[j] += a[i + (j + 1) * o2]\n            if is_pres(b, o1, o2):\n                result = 1\n                break\n    print(result)"]