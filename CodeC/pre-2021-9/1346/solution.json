["def operation(a, b, o):\n    if o == '&':\n        return a & b\n    elif o == '^':\n        return a ^ b\n    elif o == '|':\n        return a | b\n\ndef ans(num, ope):\n    if len(num) == 1:\n        return num\n    elif len(num) == 2:\n        return [operation(num[0], num[1], ope[0])]\n    else:\n        xd = []\n        for i in range(1, len(num)):\n            (a, b) = (num[:i], num[i:])\n            (o, p) = (ope[:i], ope[i:])\n            (x, y) = (ans(a, o), ans(b, p))\n            for j in x:\n                for k in y:\n                    xd += [operation(j, k, ope[i - 1])]\n        return xd\nfor _ in range(int(input())):\n    s = input()\n    num = []\n    ope = []\n    temp = ''\n    for i in range(len(s)):\n        xd = s[i].isnumeric()\n        if xd:\n            temp += s[i]\n        else:\n            num += [temp]\n            ope += [s[i]]\n            temp = ''\n    num += [temp]\n    num = list(map(int, num))\n    print(max(ans(num, ope)))", "def operation(a, b, o):\n    if o == '&':\n        return a & b\n    elif o == '^':\n        return a ^ b\n    elif o == '|':\n        return a | b\n\ndef ans(num, ope):\n    if len(num) == 1:\n        return num\n    elif len(num) == 2:\n        return [operation(num[0], num[1], ope[0])]\n    else:\n        xd = []\n        for i in range(1, len(num)):\n            (a, b) = (num[:i], num[i:])\n            (o, p) = (ope[:i], ope[i:])\n            (x, y) = (ans(a, o), ans(b, p))\n            for j in x:\n                for k in y:\n                    xd += [operation(j, k, ope[i - 1])]\n        return xd\nfor _ in range(int(input())):\n    s = input()\n    num = []\n    ope = []\n    temp = ''\n    for i in range(len(s)):\n        xd = s[i].isnumeric()\n        if xd:\n            temp += s[i]\n        else:\n            num += [temp]\n            ope += [s[i]]\n            temp = ''\n    num += [temp]\n    num = list(map(int, num))\n    print(max(ans(num, ope)))", "def value(a, b, c):\n    if c == '&':\n        return a & b\n    elif c == '^':\n        return a ^ b\n    elif c == '|':\n        return a | b\n\ndef break_rules(n, operator):\n    if len(n) == 1:\n        return n\n    elif len(n) == 2:\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1, len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\nt = int(input())\nwhile t > 0:\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if ord(exp[i]) > 47 and ord(exp[i]) < 58:\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if i == len(exp) - 1:\n            num.append(int(temp))\n    t -= 1\n    print(max(break_rules(num, operator)))", "def value(a, b, c):\n    if c == '&':\n        return a & b\n    elif c == '^':\n        return a ^ b\n    elif c == '|':\n        return a | b\n\ndef break_rules(n, operator):\n    if len(n) == 1:\n        return n\n    elif len(n) == 2:\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1, len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\nt = int(input())\nwhile t > 0:\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if ord(exp[i]) > 47 and ord(exp[i]) < 58:\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if i == len(exp) - 1:\n            num.append(int(temp))\n    t -= 1\n    print(max(break_rules(num, operator)))", "def value(a, b, c):\n    if c == '&':\n        return a & b\n    elif c == '^':\n        return a ^ b\n    elif c == '|':\n        return a | b\n\ndef break_rules(n, operator):\n    if len(n) == 1:\n        return n\n    elif len(n) == 2:\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1, len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\nt = int(input())\nwhile t > 0:\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if ord(exp[i]) > 47 and ord(exp[i]) < 58:\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if i == len(exp) - 1:\n            num.append(int(temp))\n    t -= 1\n    print(max(break_rules(num, operator)))", "def value(a, b, c):\n    if c == '&':\n        return a & b\n    elif c == '^':\n        return a ^ b\n    elif c == '|':\n        return a | b\n\ndef break_rules(n, operator):\n    if len(n) == 1:\n        return n\n    elif len(n) == 2:\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1, len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\nt = int(input())\nwhile t > 0:\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if ord(exp[i]) > 47 and ord(exp[i]) < 58:\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if i == len(exp) - 1:\n            num.append(int(temp))\n    t -= 1\n    print(max(break_rules(num, operator)))", "def value(a, b, c):\n    if c == '&':\n        return a & b\n    elif c == '^':\n        return a ^ b\n    elif c == '|':\n        return a | b\n\ndef break_rules(n, operator):\n    if len(n) == 1:\n        return n\n    elif len(n) == 2:\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1, len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\nt = int(input())\nwhile t > 0:\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if ord(exp[i]) > 47 and ord(exp[i]) < 58:\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if i == len(exp) - 1:\n            num.append(int(temp))\n    t -= 1\n    print(max(break_rules(num, operator)))", "def value(a, b, c):\n    if c == '&':\n        return a & b\n    elif c == '^':\n        return a ^ b\n    elif c == '|':\n        return a | b\n\ndef break_rules(n, operator):\n    if len(n) == 1:\n        return n\n    elif len(n) == 2:\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1, len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i - 1]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\nt = int(input())\nwhile t > 0:\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if ord(exp[i]) > 47 and ord(exp[i]) < 58:\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if i == len(exp) - 1:\n            num.append(int(temp))\n    t -= 1\n    print(max(break_rules(num, operator)))", "def value(a, b, c):\n    if c == '&':\n        return a & b\n    elif c == '^':\n        return a ^ b\n    elif c == '|':\n        return a | b\n\ndef break_rules(n, operator):\n    if len(n) == 1:\n        return n\n    elif len(n) == 2:\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1, len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i - 1]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\nt = int(input())\nwhile t > 0:\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if ord(exp[i]) > 47 and ord(exp[i]) < 58:\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if i == len(exp) - 1:\n            num.append(int(temp))\n    t -= 1\n    print(max(break_rules(num, operator)))", "def value(a, b, c):\n    if c == '&':\n        return a & b\n    elif c == '^':\n        return a ^ b\n    elif c == '|':\n        return a | b\n\ndef break_rules(n, operator):\n    if len(n) == 1:\n        return n\n    elif len(n) == 2:\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1, len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i - 1]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\nt = int(input())\nwhile t > 0:\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if ord(exp[i]) > 47 and ord(exp[i]) < 58:\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if i == len(exp) - 1:\n            num.append(int(temp))\n    t -= 1\n    print(max(break_rules(num, operator)))", "def value(a, b, c):\n    if c == '&':\n        return a & b\n    elif c == '^':\n        return a ^ b\n    elif c == '|':\n        return a | b\n\ndef break_rules(n, operator):\n    if len(n) == 1:\n        return n\n    elif len(n) == 2:\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1, len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i - 1]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\nt = int(input())\nwhile t > 0:\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if ord(exp[i]) > 47 and ord(exp[i]) < 58:\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if i == len(exp) - 1:\n            num.append(int(temp))\n    t -= 1\n    print(max(break_rules(num, operator)))", "def value(a, b, c):\n    if c == '&':\n        return a & b\n    elif c == '^':\n        return a ^ b\n    elif c == '|':\n        return a | b\n\ndef break_rules(n, operator):\n    if len(n) == 1:\n        return n\n    elif len(n) == 2:\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1, len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i - 1]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\nt = int(input())\nwhile t > 0:\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if ord(exp[i]) > 47 and ord(exp[i]) < 58:\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if i == len(exp) - 1:\n            num.append(int(temp))\n    t -= 1\n    print(max(break_rules(num, operator)))", "def value(a, b, c):\n    if c == '&':\n        return a & b\n    elif c == '^':\n        return a ^ b\n    elif c == '|':\n        return a | b\n\ndef break_rules(n, operator):\n    if len(n) == 1:\n        return n\n    elif len(n) == 2:\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1, len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i - 1]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\nt = int(input())\nwhile t > 0:\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if ord(exp[i]) > 47 and ord(exp[i]) < 58:\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if i == len(exp) - 1:\n            num.append(int(temp))\n    t -= 1\n    print(max(break_rules(num, operator)))", "def value(a, b, c):\n    if c == '&':\n        return a & b\n    elif c == '^':\n        return a ^ b\n    elif c == '|':\n        return a | b\n\ndef break_rules(n, operator):\n    if len(n) == 1:\n        return n\n    elif len(n) == 2:\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1, len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i - 1]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\nt = int(input())\nwhile t > 0:\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if ord(exp[i]) > 47 and ord(exp[i]) < 58:\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if i == len(exp) - 1:\n            num.append(int(temp))\n    t -= 1\n    print(max(break_rules(num, operator)))", "def value(a, b, c):\n    if c == '&':\n        return a & b\n    elif c == '^':\n        return a ^ b\n    elif c == '|':\n        return a | b\n\ndef break_rules(n, operator):\n    if len(n) == 1:\n        return n\n    elif len(n) == 2:\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1, len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i - 1]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\nt = int(input())\nwhile t > 0:\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if ord(exp[i]) > 47 and ord(exp[i]) < 58:\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if i == len(exp) - 1:\n            num.append(int(temp))\n    t -= 1\n    print(max(break_rules(num, operator)))", "def value(a, b, c):\n    if c == '&':\n        return a & b\n    elif c == '^':\n        return a ^ b\n    elif c == '|':\n        return a | b\n\ndef break_rules(n, operator):\n    if len(n) == 1:\n        return n\n    elif len(n) == 2:\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1, len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i - 1]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\nt = int(input())\nwhile t > 0:\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if ord(exp[i]) > 47 and ord(exp[i]) < 58:\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if i == len(exp) - 1:\n            num.append(int(temp))\n    t -= 1\n    print(max(break_rules(num, operator)))", "def extract(s):\n    arr = []\n    news = ''\n    for x in s:\n        try:\n            x = int(x)\n            news = news + str(x)\n        except:\n            arr = [news] + arr\n            news = ''\n            arr = [x] + arr\n    arr = [news] + arr\n    return arr\nfor i in range(int(input())):\n    s = input()\n    arr = extract(s)\n    n = len(arr) // 2 + 1\n    dp = [[0] * n for j in range(n)]\n    for i in range(n):\n        dp[i][i] = [int(arr[2 * i])]\n    n = len(arr)\n    for i in range(3, n + 1, 2):\n        for j in range(0, n - i + 1, 2):\n            ans = []\n            for k in range(j + 2, i + j + 1, 2):\n                for x in dp[j // 2][(k - 1) // 2]:\n                    for y in dp[k // 2][(i + j) // 2]:\n                        if arr[k - 1] == '&':\n                            ans += [x & y]\n                        if arr[k - 1] == '|':\n                            ans += [x | y]\n                        if arr[k - 1] == '^':\n                            ans += [x ^ y]\n            if i != n:\n                dp[j // 2][k // 2] = ans[:]\n            else:\n                print(max(ans))", "def extract(s):\n    arr = []\n    news = ''\n    for x in s:\n        try:\n            x = int(x)\n            news += str(x)\n        except:\n            arr += [news]\n            news = ''\n            arr += [x]\n    arr += [news]\n    return arr\nt = int(input())\nfor _ in range(t):\n    s = input()\n    arr = extract(s)\n    n = len(arr) // 2 + 1\n    dp = [[0] * n for j in range(n)]\n    for i in range(n):\n        dp[i][i] = [int(arr[2 * i])]\n    n = len(arr)\n    for i in range(3, n + 1, 2):\n        for j in range(0, n - i + 1, 2):\n            ans = []\n            for k in range(j + 2, i + j + 1, 2):\n                for x in dp[j // 2][(k - 1) // 2]:\n                    for y in dp[k // 2][(i + j) // 2]:\n                        if arr[k - 1] == '&':\n                            ans += [x & y]\n                        if arr[k - 1] == '|':\n                            ans += [x | y]\n                        if arr[k - 1] == '^':\n                            ans += [x ^ y]\n            if i != n:\n                dp[j // 2][k // 2] = ans[:]\n            else:\n                print(max(ans))", "from collections import defaultdict\nimport time\n\ndef solve(s):\n    if len(s) == 1:\n        return int(s[0])\n    temp = []\n    for i in range(1, len(s) // 2 + 1):\n        ans1 = solve(s[:len(s) - 2 * i])\n        ans2 = solve(s[len(s) - 2 * i + 1:])\n        op = s[len(s) - 2 * i]\n        if op == '^':\n            temp += [ans1 ^ ans2]\n        elif op == '|':\n            temp += [ans1 | ans2]\n        else:\n            temp += [ans1 & ans2]\n    print(s, temp)\n    return max(temp)\n\ndef extract(s):\n    arr = []\n    news = ''\n    for x in s:\n        try:\n            x = int(x)\n            news += str(x)\n        except:\n            arr += [news]\n            news = ''\n            arr += [x]\n    arr += [news]\n    return arr\nt = int(input())\nfor _ in range(t):\n    s = input()\n    t1 = time.time()\n    arr = extract(s)\n    n = len(arr) // 2 + 1\n    dp = [[0] * n for j in range(n)]\n    for i in range(n):\n        dp[i][i] = [int(arr[2 * i])]\n    n = len(arr)\n    for i in range(3, n + 1, 2):\n        for j in range(0, n - i + 1, 2):\n            ans = []\n            for k in range(j + 2, i + j + 1, 2):\n                for x in dp[j // 2][(k - 1) // 2]:\n                    for y in dp[k // 2][(i + j) // 2]:\n                        if arr[k - 1] == '&':\n                            ans += [x & y]\n                        if arr[k - 1] == '|':\n                            ans += [x | y]\n                        if arr[k - 1] == '^':\n                            ans += [x ^ y]\n            if i != n:\n                dp[j // 2][k // 2] = ans[:]\n            else:\n                print(max(ans))", "dp = []\n\ndef solve(s, o, l, r):\n    if dp[l][r] != None:\n        return dp[l][r]\n    if l == r:\n        dp[l][r] = set([int(n[l])])\n    else:\n        res = set()\n        for i in range(l, r):\n            a = solve(s, o, l, i)\n            b = solve(s, o, i + 1, r)\n            for j in a:\n                for k in b:\n                    res.add(eval(str(j) + o[i] + str(k)))\n        dp[l][r] = res\n    return dp[l][r]\nfor _ in range(int(input())):\n    s = input()\n    n = []\n    o = []\n    temp = ''\n    for i in s:\n        if i.isdigit():\n            temp += i\n        else:\n            n.append(temp)\n            o.append(i)\n            temp = ''\n    n.append(temp)\n    dp = [[None for i in range(len(n))] for j in range(len(n))]\n    s = list(solve(n, o, 0, len(n) - 1))\n    print(max(s))"]