["def snek(s):\n    a1 = x0 + s1 * s - x1\n    a2 = y0 + s2 * s - y1\n    a3 = z0 + s3 * s - z1\n    b = 4 * (a1 * d1 + a2 * d2 + a3 * d3) * (a1 * d1 + a2 * d2 + a3 * d3)\n    a = 4 * (a1 * a1 + a2 * a2 + a3 * a3)\n    v = b - a * c\n    return v\nt = int(input())\nfor i in range(t):\n    (x1, y1, z1, x0, y0, z0, s1, s2, s3, cx, cy, cz, r) = map(int, input().split())\n    d1 = x1 - cx\n    d2 = y1 - cy\n    d3 = z1 - cz\n    c = d1 * d1 + d2 * d2 + d3 * d3 - r * r\n    l = 0\n    h = 10 ** 9 + 1\n    while l < h - 10 ** (-6):\n        m = l + (h - l) * 1.0 / 2\n        v = snek(m)\n        if abs(v) <= 10 ** (-2):\n            break\n        elif v > 0:\n            l = m\n        else:\n            h = m\n    print(m)", "def snek(s):\n    a1 = x0 + s1 * s - x1\n    a2 = y0 + s2 * s - y1\n    a3 = z0 + s3 * s - z1\n    b = 4 * (a1 * d1 + a2 * d2 + a3 * d3) * (a1 * d1 + a2 * d2 + a3 * d3)\n    a = 4 * (a1 * a1 + a2 * a2 + a3 * a3)\n    v = b - a * c\n    return v\nt = int(input())\nfor i in range(t):\n    (x1, y1, z1, x0, y0, z0, s1, s2, s3, cx, cy, cz, r) = map(int, input().split())\n    d1 = x1 - cx\n    d2 = y1 - cy\n    d3 = z1 - cz\n    c = d1 * d1 + d2 * d2 + d3 * d3 - r * r\n    l = 0\n    h = 10 ** 9 + 1\n    while l < h - 10 ** (-6):\n        m = l + (h - l) * 1.0 / 2\n        v = snek(m)\n        if abs(v) <= 10 ** (-2):\n            break\n        elif v > 0:\n            l = m\n        else:\n            h = m\n    print(m)", "def snek(s):\n    a1 = x0 + s1 * s - x1\n    a2 = y0 + s2 * s - y1\n    a3 = z0 + s3 * s - z1\n    b = 4 * (a1 * d1 + a2 * d2 + a3 * d3) * (a1 * d1 + a2 * d2 + a3 * d3)\n    a = 4 * (a1 * a1 + a2 * a2 + a3 * a3)\n    v = b - a * c\n    return v\nt = int(input())\nfor i in range(t):\n    (x1, y1, z1, x0, y0, z0, s1, s2, s3, cx, cy, cz, r) = map(int, input().split())\n    d1 = x1 - cx\n    d2 = y1 - cy\n    d3 = z1 - cz\n    c = d1 * d1 + d2 * d2 + d3 * d3 - r * r\n    l = 0\n    h = 10 ** 9 + 1\n    while l < h - 10 ** (-6):\n        m = l + (h - l) * 1.0 / 2\n        v = snek(m)\n        if abs(v) <= 10 ** (-2):\n            break\n        elif v > 0:\n            l = m\n        else:\n            h = m\n    print(m)", "def snek(s):\n    a1 = x0 + s1 * s - x1\n    a2 = y0 + s2 * s - y1\n    a3 = z0 + s3 * s - z1\n    b = 4 * (a1 * d1 + a2 * d2 + a3 * d3) * (a1 * d1 + a2 * d2 + a3 * d3)\n    a = 4 * (a1 * a1 + a2 * a2 + a3 * a3)\n    v = b - a * c\n    return v\nt = int(input())\nfor i in range(t):\n    (x1, y1, z1, x0, y0, z0, s1, s2, s3, cx, cy, cz, r) = map(int, input().split())\n    d1 = x1 - cx\n    d2 = y1 - cy\n    d3 = z1 - cz\n    c = d1 * d1 + d2 * d2 + d3 * d3 - r * r\n    l = 0\n    h = 10 ** 9 + 1\n    while l < h - 10 ** (-6):\n        m = l + (h - l) * 1.0 / 2\n        v = snek(m)\n        if abs(v) <= 10 ** (-2):\n            break\n        elif v > 0:\n            l = m\n        else:\n            h = m\n    print(m)", "def snek(s):\n    a1 = x0 + s1 * s - x1\n    a2 = y0 + s2 * s - y1\n    a3 = z0 + s3 * s - z1\n    b = 4 * (a1 * d1 + a2 * d2 + a3 * d3) * (a1 * d1 + a2 * d2 + a3 * d3)\n    a = 4 * (a1 * a1 + a2 * a2 + a3 * a3)\n    v = b - a * c\n    return v\nt = int(input())\nfor i in range(t):\n    (x1, y1, z1, x0, y0, z0, s1, s2, s3, cx, cy, cz, r) = map(int, input().split())\n    d1 = x1 - cx\n    d2 = y1 - cy\n    d3 = z1 - cz\n    c = d1 * d1 + d2 * d2 + d3 * d3 - r * r\n    l = 0\n    h = 10 ** 9 + 1\n    while l < h - 10 ** (-6):\n        m = l + (h - l) * 1.0 / 2\n        v = snek(m)\n        if abs(v) <= 10 ** (-2):\n            break\n        elif v > 0:\n            l = m\n        else:\n            h = m\n    print(m)", "epi = 10 ** (-2)\n\ndef vision(t):\n    a1 = x0 + dx * t - x1\n    a2 = y0 + dy * t - y1\n    a3 = z0 + dz * t - z1\n    b = 4 * (a1 * d1 + a2 * d2 + a3 * d3) * (a1 * d1 + a2 * d2 + a3 * d3)\n    a = 4 * (a1 * a1 + a2 * a2 + a3 * a3)\n    value = b - a * c\n    return value\nxrange = range\nfor _ in xrange(int(input())):\n    (x1, y1, z1, x0, y0, z0, dx, dy, dz, cx, cy, cz, r) = map(int, input().split())\n    d1 = x1 - cx\n    d2 = y1 - cy\n    d3 = z1 - cz\n    c = d1 * d1 + d2 * d2 + d3 * d3 - r * r\n    low = 0\n    high = 10 ** 9 + 1\n    while low < high - 10 ** (-6):\n        mid = low + (high - low) * 1.0 / 2\n        value = vision(mid)\n        if abs(value) <= epi:\n            break\n        elif value > 0:\n            low = mid\n        else:\n            high = mid\n    print(mid)", "epi = 10 ** (-2)\n\ndef vision(t):\n    a1 = x0 + dx * t - x1\n    a2 = y0 + dy * t - y1\n    a3 = z0 + dz * t - z1\n    b = 4 * (a1 * d1 + a2 * d2 + a3 * d3) * (a1 * d1 + a2 * d2 + a3 * d3)\n    a = 4 * (a1 * a1 + a2 * a2 + a3 * a3)\n    value = b - a * c\n    return value\nxrange = range\nfor _ in xrange(int(input())):\n    (x1, y1, z1, x0, y0, z0, dx, dy, dz, cx, cy, cz, r) = map(int, input().split())\n    d1 = x1 - cx\n    d2 = y1 - cy\n    d3 = z1 - cz\n    c = d1 * d1 + d2 * d2 + d3 * d3 - r * r\n    low = 0\n    high = 10 ** 9 + 1\n    while low < high - 10 ** (-6):\n        mid = low + (high - low) * 1.0 / 2\n        value = vision(mid)\n        if abs(value) <= epi:\n            break\n        elif value > 0:\n            low = mid\n        else:\n            high = mid\n    print(mid)", "epi = 10 ** (-2)\n\ndef vision(t):\n    a1 = x0 + dx * t - x1\n    a2 = y0 + dy * t - y1\n    a3 = z0 + dz * t - z1\n    b = 4 * (a1 * d1 + a2 * d2 + a3 * d3) * (a1 * d1 + a2 * d2 + a3 * d3)\n    a = 4 * (a1 * a1 + a2 * a2 + a3 * a3)\n    value = b - a * c\n    return value\nxrange = range\nfor _ in xrange(int(input())):\n    (x1, y1, z1, x0, y0, z0, dx, dy, dz, cx, cy, cz, r) = map(int, input().split())\n    d1 = x1 - cx\n    d2 = y1 - cy\n    d3 = z1 - cz\n    c = d1 * d1 + d2 * d2 + d3 * d3 - r * r\n    low = 0\n    high = 10 ** 9 + 1\n    while low < high - 10 ** (-6):\n        mid = low + (high - low) * 1.0 / 2\n        value = vision(mid)\n        if abs(value) <= epi:\n            break\n        elif value > 0:\n            low = mid\n        else:\n            high = mid\n    print(mid)", "import math\ntest = int(input())\nwhile test:\n    (qx, qy, qz, px, py, pz, dx, dy, dz, sx, sy, sz, r) = input().split()\n    qx = float(qx)\n    qy = float(qy)\n    qz = float(qz)\n    px = float(px)\n    py = float(py)\n    pz = float(pz)\n    dx = float(dx)\n    dy = float(dy)\n    dz = float(dz)\n    sx = float(sx)\n    sy = float(sy)\n    sz = float(sz)\n    r = float(r)\n    constntVelocity = float(math.sqrt(dx * dx + dy * dy + dz * dz))\n    px = px - sx\n    py -= sy\n    pz -= sz\n    qx = qx - sx\n    qy -= sy\n    qz -= sz\n    px1 = px\n    py1 = py\n    pz1 = pz\n    sx = 0\n    sy = 0\n    sz = 0\n    C = qx * qx + qy * qy + qz * qz - r * r\n    cn1 = dx * dx + dy * dy + dz * dz\n    cn2 = 2 * dx * px - 2 * dx * qx + 2 * dy * (py - qy) + 2 * dz * (pz - qz)\n    cn3 = px * px + py * py + pz * pz + (qx * qx + qy * qy + qz * qz) - 2 * (qx * px + qy * py + qz * pz)\n    pn1 = 2 * (dx * qx + dy * qy + dz * qz)\n    pn2 = 2 * (qx * (px - qx) + qy * (py - qy) + qz * (pz - qz))\n    a = pn1 * pn1 - 4 * C * cn1\n    b = 2 * pn1 * pn2 - 4 * C * cn2\n    c = pn2 * pn2 - 4 * C * cn3\n    distpp_upd = 0\n    TimeofVision = 0\n    if a == 0.0:\n        k = -c / b\n        px = dx * k + px\n        py = dy * k + py\n        pz = dz * k + pz\n        distpp_upd = float(math.sqrt((px1 - px) * (px1 - px) + (py1 - py) * (py1 - py) + (pz1 - pz) * (pz1 - pz)))\n        TimeofVision = float(distpp_upd / constntVelocity)\n        print(TimeofVision)\n        test = test - 1\n        continue\n    k1 = float((-b + math.sqrt(b * b - 4 * a * c)) / (2 * a))\n    k2 = float((-b - math.sqrt(b * b - 4 * a * c)) / (2 * a))\n    if abs(k1 - k2) == 0:\n        px = dx * k1 + px\n        py = dy * k1 + py\n        pz = dz * k1 + pz\n    else:\n        g1 = dx * k1 + px1\n        g2 = dy * k1 + py1\n        g3 = dz * k1 + pz1\n        g1 = g1 - px1\n        g2 = g2 - py1\n        g3 = g3 - pz1\n        jnp = float(math.sqrt(g1 * g1 + g2 * g2 + g3 * g3))\n        u1 = g1 / jnp\n        u2 = g2 / jnp\n        u3 = g3 / jnp\n        ud1 = float(dx / constntVelocity)\n        ud2 = float(dy / constntVelocity)\n        ud3 = float(dy / constntVelocity)\n        if abs(ud1 - u1) == 0.0 and abs(ud2 - u2) == 0.0 and (abs(ud3 - u3) == 0.0):\n            px = dx * k1 + px1\n            py = dy * k1 + py1\n            pz = dz * k1 + pz1\n        else:\n            px = dx * k2 + px1\n            py = dy * k2 + py1\n            pz = dz * k2 + pz1\n    distpp_upd = float(math.sqrt((px1 - px) * (px1 - px) + (py1 - py) * (py1 - py) + (pz1 - pz) * (pz1 - pz)))\n    TimeofVision = float(distpp_upd / constntVelocity)\n    print(TimeofVision)\n    test = test - 1", "from math import *\nT = int(input())\nfor i in range(T):\n    (px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r) = list(map(int, input().split(' ')))\n    (p1x, p2x) = (cx - px, qx - px)\n    (p1y, p2y) = (cy - py, qy - py)\n    (p1z, p2z) = (cz - pz, qz - pz)\n    usel = p1x * p1x + p1y * p1y + p1z * p1z - r ** 2\n    dot1 = 2 * ((p2x * dx + p2y * dy + p2z * dz) * usel - (dx * p1x + dy * p1y + dz * p1z) * (p1x * p2x + p1y * p2y + p1z * p2z))\n    dot2 = (dx * dx + dy * dy + dz * dz) * usel - (dx * p1x + dy * p1y + dz * p1z) * (dx * p1x + dy * p1y + dz * p1z)\n    dot3 = (p2x * p2x + p2y * p2y + p2z * p2z) * usel - (p2x * p1x + p2y * p1y + p2z * p1z) * (p2x * p1x + p2y * p1y + p2z * p1z)\n    determ = sqrt(dot1 * dot1 - 4 * dot2 * dot3)\n    tn = 0\n    tm = 0\n    tn = -dot1 + determ\n    tm = -dot1 - determ\n    if dot2 != 0:\n        tn = tn / (2 * dot2)\n        tm = tm / (2 * dot2)\n        if tn > 0 and tm > 0:\n            t = min(tn, tm)\n            print('%.10f' % t)\n        elif tn > 0 and tm < 0:\n            t = tn\n            print('%.10f' % t)\n        elif tn < 0 and tm > 0:\n            t = tm\n            print('%.10f' % t)\n    else:\n        t = -dot3 / dot1\n        print('%.10f' % t)", "from math import sqrt\n\ndef sqr(a):\n    return a * a\nfor _ in range(int(input())):\n    (px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r) = map(int, input().split())\n    g = qx - px\n    h = qy - py\n    i = qz - pz\n    d = px - cx\n    e = py - cy\n    f = pz - cz\n    m = dx\n    n = dy\n    o = dz\n    var1 = sqr(px - cx) + sqr(py - cy) + sqr(pz - cz) - sqr(r)\n    a = sqr(m) * (sqr(d) - var1) + sqr(n) * (sqr(e) - var1) + sqr(o) * (sqr(f) - var1) + 2 * d * e * m * n + 2 * e * f * n * o + 2 * d * f * m * o\n    b = 2 * g * m * (sqr(d) - var1) + 2 * h * n * (sqr(e) - var1) + 2 * i * o * (sqr(f) - var1) + 2 * d * e * (g * n + h * m) + 2 * e * f * (h * o + i * n) + 2 * d * f * (g * o + m * i)\n    c = sqr(g) * (sqr(d) - var1) + sqr(h) * (sqr(e) - var1) + sqr(i) * (sqr(f) - var1) + 2 * d * e * g * h + 2 * e * f * h * i + 2 * d * f * g * i\n    (ans, ans1, ans2) = (0, 0, 0)\n    if a != 0:\n        ans1 = (-b + sqrt(sqr(b) - 4 * a * c)) / (2 * a)\n        ans2 = (-b - sqrt(sqr(b) - 4 * a * c)) / (2 * a)\n        if ans1 > 0 and ans2 > 0:\n            ans = min(ans1, ans2)\n        else:\n            ans = max(ans1, ans2)\n    else:\n        ans = -(b / c)\n    print(float(ans))", "import math\n\ndef dot(l1, l2):\n    return l1[0] * l2[0] + l1[1] * l2[1] + l1[2] * l2[2]\n\ndef mod(l):\n    return l[0] ** 2 + l[1] ** 2 + l[2] ** 2\n\ndef sub(l1, l2):\n    return [l1[0] - l2[0], l1[1] - l2[1], l1[2] - l2[2]]\na = int(input())\nfor _ in range(a):\n    (b1, b2, b3, c1, c2, c3, d1, d2, d3, e1, e2, e3, r) = [int(j) for j in input().split()]\n    P = [b1, b2, b3]\n    Q = [c1, c2, c3]\n    d = [d1, d2, d3]\n    C = [e1, e2, e3]\n    f1 = (mod(sub(P, C)) - r ** 2) * mod(d) - dot(d, sub(P, C)) ** 2\n    f2 = -2 * dot(sub(P, Q), d) * (mod(sub(P, C)) - r ** 2) + 2 * dot(sub(P, Q), sub(P, C)) * dot(d, sub(P, C))\n    f3 = mod(sub(P, Q)) * (mod(sub(P, C)) - r ** 2) - dot(sub(P, Q), sub(P, C)) ** 2\n    if f1 == 0:\n        print(-f3 / f2)\n    else:\n        aw = (-f2 + math.sqrt(f2 ** 2 - 4 * f1 * f3)) / (2 * f1)\n        sw = (-f2 - math.sqrt(f2 ** 2 - 4 * f1 * f3)) / (2 * f1)\n        if aw > 0 and sw > 0:\n            print(min([aw, sw]))\n        else:\n            print(max([aw, sw]))", "import math\n\ndef dot(l1, l2):\n    return l1[0] * l2[0] + l1[1] * l2[1] + l1[2] * l2[2]\n\ndef mod(l):\n    return l[0] ** 2 + l[1] ** 2 + l[2] ** 2\n\ndef sub(l1, l2):\n    return [l1[0] - l2[0], l1[1] - l2[1], l1[2] - l2[2]]\na = int(input())\nfor _ in range(a):\n    (b1, b2, b3, c1, c2, c3, d1, d2, d3, e1, e2, e3, r) = [int(j) for j in input().split()]\n    P = [b1, b2, b3]\n    Q = [c1, c2, c3]\n    d = [d1, d2, d3]\n    C = [e1, e2, e3]\n    f1 = (mod(sub(P, C)) - r ** 2) * mod(d) - dot(d, sub(P, C)) ** 2\n    f2 = -2 * dot(sub(P, Q), d) * (mod(sub(P, C)) - r ** 2) + 2 * dot(sub(P, Q), sub(P, C)) * dot(d, sub(P, C))\n    f3 = mod(sub(P, Q)) * (mod(sub(P, C)) - r ** 2) - dot(sub(P, Q), sub(P, C)) ** 2\n    if f1 == 0:\n        print(-f3 / f2)\n    else:\n        aw = (-f2 + math.sqrt(f2 ** 2 - 4 * f1 * f3)) / (2 * f1)\n        sw = (-f2 - math.sqrt(f2 ** 2 - 4 * f1 * f3)) / (2 * f1)\n        if aw > 0 and sw > 0:\n            print(min([aw, sw]))\n        else:\n            print(max([aw, sw]))", "import math\n\ndef dot(l1, l2):\n    return l1[0] * l2[0] + l1[1] * l2[1] + l1[2] * l2[2]\n\ndef mod(l):\n    return l[0] ** 2 + l[1] ** 2 + l[2] ** 2\n\ndef sub(l1, l2):\n    return [l1[0] - l2[0], l1[1] - l2[1], l1[2] - l2[2]]\na = int(input())\nfor _ in range(a):\n    (b1, b2, b3, c1, c2, c3, d1, d2, d3, e1, e2, e3, r) = [int(j) for j in input().split()]\n    P = [b1, b2, b3]\n    Q = [c1, c2, c3]\n    d = [d1, d2, d3]\n    C = [e1, e2, e3]\n    f1 = (mod(sub(P, C)) - r ** 2) * mod(d) - dot(d, sub(P, C)) ** 2\n    f2 = -2 * dot(sub(P, Q), d) * (mod(sub(P, C)) - r ** 2) + 2 * dot(sub(P, Q), sub(P, C)) * dot(d, sub(P, C))\n    f3 = mod(sub(P, Q)) * (mod(sub(P, C)) - r ** 2) - dot(sub(P, Q), sub(P, C)) ** 2\n    if f1 == 0:\n        print(-f3 / f2)\n    else:\n        aw = (-f2 + math.sqrt(f2 ** 2 - 4 * f1 * f3)) / (2 * f1)\n        sw = (-f2 - math.sqrt(f2 ** 2 - 4 * f1 * f3)) / (2 * f1)\n        if aw > 0 and sw > 0:\n            print(min([aw, sw]))\n        else:\n            print(max([aw, sw]))", "import math\n\ndef dot(l1, l2):\n    return l1[0] * l2[0] + l1[1] * l2[1] + l1[2] * l2[2]\n\ndef mod(l):\n    return l[0] ** 2 + l[1] ** 2 + l[2] ** 2\n\ndef sub(l1, l2):\n    return [l1[0] - l2[0], l1[1] - l2[1], l1[2] - l2[2]]\na = int(input())\nfor _ in range(a):\n    (b1, b2, b3, c1, c2, c3, d1, d2, d3, e1, e2, e3, r) = [int(j) for j in input().split()]\n    P = [b1, b2, b3]\n    Q = [c1, c2, c3]\n    d = [d1, d2, d3]\n    C = [e1, e2, e3]\n    f1 = (mod(sub(P, C)) - r ** 2) * mod(d) - dot(d, sub(P, C)) ** 2\n    f2 = -2 * dot(sub(P, Q), d) * (mod(sub(P, C)) - r ** 2) + 2 * dot(sub(P, Q), sub(P, C)) * dot(d, sub(P, C))\n    f3 = mod(sub(P, Q)) * (mod(sub(P, C)) - r ** 2) - dot(sub(P, Q), sub(P, C)) ** 2\n    if f1 == 0:\n        print(-f3 / f2)\n    else:\n        aw = (-f2 + math.sqrt(f2 ** 2 - 4 * f1 * f3)) / (2 * f1)\n        sw = (-f2 - math.sqrt(f2 ** 2 - 4 * f1 * f3)) / (2 * f1)\n        if aw > 0 and sw > 0:\n            print(min([aw, sw]))\n        else:\n            print(max([aw, sw]))", "import math\n\ndef dot(l1, l2):\n    return l1[0] * l2[0] + l1[1] * l2[1] + l1[2] * l2[2]\n\ndef mod(l):\n    return l[0] ** 2 + l[1] ** 2 + l[2] ** 2\n\ndef sub(l1, l2):\n    return [l1[0] - l2[0], l1[1] - l2[1], l1[2] - l2[2]]\na = int(input())\nfor _ in range(a):\n    (b1, b2, b3, c1, c2, c3, d1, d2, d3, e1, e2, e3, r) = [int(j) for j in input().split()]\n    P = [b1, b2, b3]\n    Q = [c1, c2, c3]\n    d = [d1, d2, d3]\n    C = [e1, e2, e3]\n    f1 = (mod(sub(P, C)) - r ** 2) * mod(d) - dot(d, sub(P, C)) ** 2\n    f2 = -2 * dot(sub(P, Q), d) * (mod(sub(P, C)) - r ** 2) + 2 * dot(sub(P, Q), sub(P, C)) * dot(d, sub(P, C))\n    f3 = mod(sub(P, Q)) * (mod(sub(P, C)) - r ** 2) - dot(sub(P, Q), sub(P, C)) ** 2\n    if f1 == 0:\n        print(-f3 / f2)\n    else:\n        aw = (-f2 + math.sqrt(f2 ** 2 - 4 * f1 * f3)) / (2 * f1)\n        sw = (-f2 - math.sqrt(f2 ** 2 - 4 * f1 * f3)) / (2 * f1)\n        if aw > 0 and sw > 0:\n            print(min([aw, sw]))\n        else:\n            print(max([aw, sw]))", "from math import *\n\ndef sq(n):\n    return n * n\nk = int(input())\nwhile k:\n    mp = input().split()\n    px = int(mp[0])\n    py = int(mp[1])\n    pz = int(mp[2])\n    qx = int(mp[3])\n    qy = int(mp[4])\n    qz = int(mp[5])\n    dx = int(mp[6])\n    dy = int(mp[7])\n    dz = int(mp[8])\n    cx = int(mp[9])\n    cy = int(mp[10])\n    cz = int(mp[11])\n    r = int(mp[12])\n    x2 = px\n    y2 = py\n    z2 = pz\n    x0 = qx\n    y0 = qy\n    z0 = qz\n    a11 = x2 - x0\n    a22 = y2 - y0\n    a33 = z2 - z0\n    b11 = -dx\n    b22 = -dy\n    b33 = -dz\n    x = x2 - cx\n    y = y2 - cy\n    z = z2 - cz\n    A = y * z2 - z * y2\n    B = z * x2 - x * z2\n    C = x * y2 - y * x2\n    a1 = A - y * z0 + z * y0\n    a2 = B - z * x0 + x * z0\n    a3 = C - x * y0 + y * x0\n    b1 = z * dy - y * dz\n    b2 = x * dz - z * dx\n    b3 = y * dx - x * dy\n    a = sq(b11) * sq(r) - sq(b1) + sq(b22) * sq(r) - sq(b2) + sq(b33) * sq(r) - sq(b3)\n    b = 2 * (a11 * b11 * sq(r) - a1 * b1) + 2 * (a22 * b22 * sq(r) - a2 * b2) + 2 * (a33 * b33 * sq(r) - a3 * b3)\n    c = sq(a11) * sq(r) - sq(a1) + sq(a22) * sq(r) - sq(a2) + sq(a33) * sq(r) - sq(a3)\n    if a == 0:\n        print(-c / b)\n        k -= 1\n        continue\n    k1 = (-b + sqrt(b * b - 4 * a * c)) / 2 / a\n    k2 = (-b - sqrt(b * b - 4 * a * c)) / 2 / a\n    if k1 >= 0.0 and k2 >= 0.0:\n        print(min(k1, k2))\n    elif k1 >= 0.0:\n        print(k1)\n    elif k2 >= 0.0:\n        print(k2)\n    k -= 1", "import math\nt = int(input().strip(' '))\nfor __ in range(t):\n    (px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r) = map(int, input().split())\n    r10 = qx - px\n    r11 = qy - py\n    r12 = qz - pz\n    r00 = px - cx\n    r02 = pz - cz\n    r01 = py - cy\n    res2 = r00 * r12 - r02 * r10\n    res1 = r01 * r12 - r02 * r11\n    res3 = r00 * r11 - r01 * r10\n    ans3 = r00 * dy - r01 * dx\n    ans1 = r01 * dz - r02 * dy\n    ans2 = r00 * dz - r02 * dx\n    A = ans1 ** 2 + ans2 ** 2 + ans3 ** 2 - r ** 2 * (dx ** 2 + dy ** 2 + dz ** 2)\n    B = 2 * (res1 * ans1 + res2 * ans2 + res3 * ans3 - r ** 2 * (r10 * dx + r11 * dy + r12 * dz))\n    C = res1 ** 2 + res2 ** 2 + res3 ** 2 - r ** 2 * (r10 ** 2 + r11 ** 2 + r12 ** 2)\n    D = B ** 2 - 4 * A * C\n    if A < 0:\n        A *= -1\n        B *= -1\n        C *= -1\n    ANS = 0\n    if A == 0:\n        ANS = -1 * (C / B)\n    else:\n        d = math.sqrt(D)\n        ANS = max(-B + d, -B - d)\n        ANS = ANS / (2 * A)\n    print('%.10f' % ANS)", "from math import sqrt\nt = int(input())\nfor _ in range(t):\n    (px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r) = map(int, input().split())\n    r = r - 1e-12\n    nice = (2 * cy ** 2 * dx * px + 2 * cz ** 2 * dx * px - 2 * cx * cy * dy * px - 2 * cx * cz * dz * px + 2 * cy * dy * px ** 2 + 2 * cz * dz * px ** 2 - 2 * cx * cy * dx * py + 2 * cx ** 2 * dy * py + 2 * cz ** 2 * dy * py - 2 * cy * cz * dz * py - 2 * cy * dx * px * py - 2 * cx * dy * px * py + 2 * cx * dx * py ** 2 + 2 * cz * dz * py ** 2 - 2 * cx * cz * dx * pz - 2 * cy * cz * dy * pz + 2 * cx ** 2 * dz * pz + 2 * cy ** 2 * dz * pz - 2 * cz * dx * px * pz - 2 * cx * dz * px * pz - 2 * cz * dy * py * pz - 2 * cy * dz * py * pz + 2 * cx * dx * pz ** 2 + 2 * cy * dy * pz ** 2 - 2 * cy ** 2 * dx * qx - 2 * cz ** 2 * dx * qx + 2 * cx * cy * dy * qx + 2 * cx * cz * dz * qx - 2 * cy * dy * px * qx - 2 * cz * dz * px * qx + 4 * cy * dx * py * qx - 2 * cx * dy * py * qx + 2 * dy * px * py * qx - 2 * dx * py ** 2 * qx + 4 * cz * dx * pz * qx - 2 * cx * dz * pz * qx + 2 * dz * px * pz * qx - 2 * dx * pz ** 2 * qx + 2 * cx * cy * dx * qy - 2 * cx ** 2 * dy * qy - 2 * cz ** 2 * dy * qy + 2 * cy * cz * dz * qy - 2 * cy * dx * px * qy + 4 * cx * dy * px * qy - 2 * dy * px ** 2 * qy - 2 * cx * dx * py * qy - 2 * cz * dz * py * qy + 2 * dx * px * py * qy + 4 * cz * dy * pz * qy - 2 * cy * dz * pz * qy + 2 * dz * py * pz * qy - 2 * dy * pz ** 2 * qy + 2 * cx * cz * dx * qz + 2 * cy * cz * dy * qz - 2 * cx ** 2 * dz * qz - 2 * cy ** 2 * dz * qz - 2 * cz * dx * px * qz + 4 * cx * dz * px * qz - 2 * dz * px ** 2 * qz - 2 * cz * dy * py * qz + 4 * cy * dz * py * qz - 2 * dz * py ** 2 * qz - 2 * cx * dx * pz * qz - 2 * cy * dy * pz * qz + 2 * dx * px * pz * qz + 2 * dy * py * pz * qz - 2 * dx * px * r ** 2 - 2 * dy * py * r ** 2 - 2 * dz * pz * r ** 2 + 2 * dx * qx * r ** 2 + 2 * dy * qy * r ** 2 + 2 * dz * qz * r ** 2 + sqrt((-2 * cy ** 2 * dx * px - 2 * cz ** 2 * dx * px + 2 * cx * cy * dy * px + 2 * cx * cz * dz * px - 2 * cy * dy * px ** 2 - 2 * cz * dz * px ** 2 + 2 * cx * cy * dx * py - 2 * cx ** 2 * dy * py - 2 * cz ** 2 * dy * py + 2 * cy * cz * dz * py + 2 * cy * dx * px * py + 2 * cx * dy * px * py - 2 * cx * dx * py ** 2 - 2 * cz * dz * py ** 2 + 2 * cx * cz * dx * pz + 2 * cy * cz * dy * pz - 2 * cx ** 2 * dz * pz - 2 * cy ** 2 * dz * pz + 2 * cz * dx * px * pz + 2 * cx * dz * px * pz + 2 * cz * dy * py * pz + 2 * cy * dz * py * pz - 2 * cx * dx * pz ** 2 - 2 * cy * dy * pz ** 2 + 2 * cy ** 2 * dx * qx + 2 * cz ** 2 * dx * qx - 2 * cx * cy * dy * qx - 2 * cx * cz * dz * qx + 2 * cy * dy * px * qx + 2 * cz * dz * px * qx - 4 * cy * dx * py * qx + 2 * cx * dy * py * qx - 2 * dy * px * py * qx + 2 * dx * py ** 2 * qx - 4 * cz * dx * pz * qx + 2 * cx * dz * pz * qx - 2 * dz * px * pz * qx + 2 * dx * pz ** 2 * qx - 2 * cx * cy * dx * qy + 2 * cx ** 2 * dy * qy + 2 * cz ** 2 * dy * qy - 2 * cy * cz * dz * qy + 2 * cy * dx * px * qy - 4 * cx * dy * px * qy + 2 * dy * px ** 2 * qy + 2 * cx * dx * py * qy + 2 * cz * dz * py * qy - 2 * dx * px * py * qy - 4 * cz * dy * pz * qy + 2 * cy * dz * pz * qy - 2 * dz * py * pz * qy + 2 * dy * pz ** 2 * qy - 2 * cx * cz * dx * qz - 2 * cy * cz * dy * qz + 2 * cx ** 2 * dz * qz + 2 * cy ** 2 * dz * qz + 2 * cz * dx * px * qz - 4 * cx * dz * px * qz + 2 * dz * px ** 2 * qz + 2 * cz * dy * py * qz - 4 * cy * dz * py * qz + 2 * dz * py ** 2 * qz + 2 * cx * dx * pz * qz + 2 * cy * dy * pz * qz - 2 * dx * px * pz * qz - 2 * dy * py * pz * qz + 2 * dx * px * r ** 2 + 2 * dy * py * r ** 2 + 2 * dz * pz * r ** 2 - 2 * dx * qx * r ** 2 - 2 * dy * qy * r ** 2 - 2 * dz * qz * r ** 2) ** 2 - 4 * (cy ** 2 * dx ** 2 + cz ** 2 * dx ** 2 - 2 * cx * cy * dx * dy + cx ** 2 * dy ** 2 + cz ** 2 * dy ** 2 - 2 * cx * cz * dx * dz - 2 * cy * cz * dy * dz + cx ** 2 * dz ** 2 + cy ** 2 * dz ** 2 + 2 * cy * dx * dy * px - 2 * cx * dy ** 2 * px + 2 * cz * dx * dz * px - 2 * cx * dz ** 2 * px + dy ** 2 * px ** 2 + dz ** 2 * px ** 2 - 2 * cy * dx ** 2 * py + 2 * cx * dx * dy * py + 2 * cz * dy * dz * py - 2 * cy * dz ** 2 * py - 2 * dx * dy * px * py + dx ** 2 * py ** 2 + dz ** 2 * py ** 2 - 2 * cz * dx ** 2 * pz - 2 * cz * dy ** 2 * pz + 2 * cx * dx * dz * pz + 2 * cy * dy * dz * pz - 2 * dx * dz * px * pz - 2 * dy * dz * py * pz + dx ** 2 * pz ** 2 + dy ** 2 * pz ** 2 - dx ** 2 * r ** 2 - dy ** 2 * r ** 2 - dz ** 2 * r ** 2) * (cy ** 2 * px ** 2 + cz ** 2 * px ** 2 - 2 * cx * cy * px * py + cx ** 2 * py ** 2 + cz ** 2 * py ** 2 - 2 * cx * cz * px * pz - 2 * cy * cz * py * pz + cx ** 2 * pz ** 2 + cy ** 2 * pz ** 2 - 2 * cy ** 2 * px * qx - 2 * cz ** 2 * px * qx + 2 * cx * cy * py * qx + 2 * cy * px * py * qx - 2 * cx * py ** 2 * qx + 2 * cx * cz * pz * qx + 2 * cz * px * pz * qx - 2 * cx * pz ** 2 * qx + cy ** 2 * qx ** 2 + cz ** 2 * qx ** 2 - 2 * cy * py * qx ** 2 + py ** 2 * qx ** 2 - 2 * cz * pz * qx ** 2 + pz ** 2 * qx ** 2 + 2 * cx * cy * px * qy - 2 * cy * px ** 2 * qy - 2 * cx ** 2 * py * qy - 2 * cz ** 2 * py * qy + 2 * cx * px * py * qy + 2 * cy * cz * pz * qy + 2 * cz * py * pz * qy - 2 * cy * pz ** 2 * qy - 2 * cx * cy * qx * qy + 2 * cy * px * qx * qy + 2 * cx * py * qx * qy - 2 * px * py * qx * qy + cx ** 2 * qy ** 2 + cz ** 2 * qy ** 2 - 2 * cx * px * qy ** 2 + px ** 2 * qy ** 2 - 2 * cz * pz * qy ** 2 + pz ** 2 * qy ** 2 + 2 * cx * cz * px * qz - 2 * cz * px ** 2 * qz + 2 * cy * cz * py * qz - 2 * cz * py ** 2 * qz - 2 * cx ** 2 * pz * qz - 2 * cy ** 2 * pz * qz + 2 * cx * px * pz * qz + 2 * cy * py * pz * qz - 2 * cx * cz * qx * qz + 2 * cz * px * qx * qz + 2 * cx * pz * qx * qz - 2 * px * pz * qx * qz - 2 * cy * cz * qy * qz + 2 * cz * py * qy * qz + 2 * cy * pz * qy * qz - 2 * py * pz * qy * qz + cx ** 2 * qz ** 2 + cy ** 2 * qz ** 2 - 2 * cx * px * qz ** 2 + px ** 2 * qz ** 2 - 2 * cy * py * qz ** 2 + py ** 2 * qz ** 2 - px ** 2 * r ** 2 - py ** 2 * r ** 2 - pz ** 2 * r ** 2 + 2 * px * qx * r ** 2 - qx ** 2 * r ** 2 + 2 * py * qy * r ** 2 - qy ** 2 * r ** 2 + 2 * pz * qz * r ** 2 - qz ** 2 * r ** 2))) / (2.0 * (cy ** 2 * dx ** 2 + cz ** 2 * dx ** 2 - 2 * cx * cy * dx * dy + cx ** 2 * dy ** 2 + cz ** 2 * dy ** 2 - 2 * cx * cz * dx * dz - 2 * cy * cz * dy * dz + cx ** 2 * dz ** 2 + cy ** 2 * dz ** 2 + 2 * cy * dx * dy * px - 2 * cx * dy ** 2 * px + 2 * cz * dx * dz * px - 2 * cx * dz ** 2 * px + dy ** 2 * px ** 2 + dz ** 2 * px ** 2 - 2 * cy * dx ** 2 * py + 2 * cx * dx * dy * py + 2 * cz * dy * dz * py - 2 * cy * dz ** 2 * py - 2 * dx * dy * px * py + dx ** 2 * py ** 2 + dz ** 2 * py ** 2 - 2 * cz * dx ** 2 * pz - 2 * cz * dy ** 2 * pz + 2 * cx * dx * dz * pz + 2 * cy * dy * dz * pz - 2 * dx * dz * px * pz - 2 * dy * dz * py * pz + dx ** 2 * pz ** 2 + dy ** 2 * pz ** 2 - dx ** 2 * r ** 2 - dy ** 2 * r ** 2 - dz ** 2 * r ** 2))\n    print(nice)", "from operator import mul, sub\ndot = lambda x, y: sum(map(mul, x, y))\nt = int(input())\nfor _ in range(t):\n    l = map(int, input().split())\n    R = lambda : (next(l), next(l), next(l))\n    (p, q, d, c, r) = (R(), R(), R(), R(), next(l))\n    q = tuple(map(sub, q, p))\n    c = tuple(map(sub, c, p))\n    (cc, qc, dc) = (dot(x, c) for x in (c, q, d))\n    q = tuple((x - qc / cc * y for (x, y) in zip(q, c)))\n    d = tuple((x - dc / cc * y for (x, y) in zip(d, c)))\n    r *= r\n    r /= (cc - r) * cc\n    a = dot(d, d) - dc * dc * r\n    b = dot(q, d) - qc * dc * r\n    c = dot(q, q) - qc * qc * r\n    if a:\n        print(((b * b - a * c) ** 0.5 - b) / a)\n    else:\n        print(-c / (2 * b))", "from operator import mul, sub\ndot = lambda x, y: sum(map(mul, x, y))\nt = int(input())\nfor _ in range(t):\n    l = map(int, input().split())\n    R = lambda : (next(l), next(l), next(l))\n    (p, q, d, c, r) = (R(), R(), R(), R(), next(l))\n    q = tuple(map(sub, q, p))\n    c = tuple(map(sub, c, p))\n    (cc, qc, dc) = (dot(x, c) for x in (c, q, d))\n    q = tuple((x - qc / cc * y for (x, y) in zip(q, c)))\n    d = tuple((x - dc / cc * y for (x, y) in zip(d, c)))\n    r *= r\n    r /= (cc - r) * cc\n    a = dot(d, d) - dc * dc * r\n    b = dot(q, d) - qc * dc * r\n    c = dot(q, q) - qc * qc * r\n    if a:\n        print(((b * b - a * c) ** 0.5 - b) / a)\n    else:\n        print(-c / (2 * b))", "from operator import mul, sub\ndot = lambda x, y: sum(map(mul, x, y))\nt = int(input())\nfor _ in range(t):\n    l = map(int, input().split())\n    R = lambda : (next(l), next(l), next(l))\n    (p, q, d, c, r) = (R(), R(), R(), R(), next(l))\n    q = tuple(map(sub, q, p))\n    c = tuple(map(sub, c, p))\n    (cc, qc, dc) = (dot(x, c) for x in (c, q, d))\n    (qcc, dcc) = (qc / cc, dc / cc)\n    q = tuple((x - qcc * y for (x, y) in zip(q, c)))\n    d = tuple((x - dcc * y for (x, y) in zip(d, c)))\n    r *= r\n    r /= (cc - r) * cc\n    a = dot(d, d) - dc * dc * r\n    b = dot(q, d) - qc * dc * r\n    c = dot(q, q) - qc * qc * r\n    if a:\n        print(((b * b - a * c) ** 0.5 - b) / a)\n    else:\n        print(-c / (2 * b))", "from operator import mul, sub\ndot = lambda x, y: sum(map(mul, x, y))\nt = int(input())\nfor _ in range(t):\n    l = map(int, input().split())\n    R = lambda : (next(l), next(l), next(l))\n    (p, q, d, c, r) = (R(), R(), R(), R(), next(l))\n    q = tuple(map(sub, q, p))\n    c = tuple(map(sub, c, p))\n    (cc, qc, dc) = (dot(x, c) for x in (c, q, d))\n    q = tuple((cc * x - qc * y for (x, y) in zip(q, c)))\n    d = tuple((cc * x - dc * y for (x, y) in zip(d, c)))\n    r *= r\n    r = r * cc / (cc - r)\n    a = dot(d, d) - dc * dc * r\n    b = dot(q, d) - qc * dc * r\n    c = dot(q, q) - qc * qc * r\n    if a:\n        print(((b * b - a * c) ** 0.5 - b) / a)\n    else:\n        print(-c / (2 * b))", "from operator import mul, sub\ndot = lambda x, y: sum(map(mul, x, y))\nt = int(input())\nfor _ in range(t):\n    l = map(int, input().split())\n    R = lambda : (next(l), next(l), next(l))\n    (p, q, d, c, r) = (R(), R(), R(), R(), next(l))\n    q = tuple(map(sub, q, p))\n    c = tuple(map(sub, c, p))\n    (cc, qc, dc) = (dot(x, c) for x in (c, q, d))\n    (qcc, dcc) = (qc / cc, dc / cc)\n    q = tuple((x - qcc * y for (x, y) in zip(q, c)))\n    d = tuple((x - dcc * y for (x, y) in zip(d, c)))\n    r *= r\n    r /= (cc - r) * cc\n    a = dot(d, d) - dc * dc * r\n    b = dot(q, d) - qc * dc * r\n    c = dot(q, q) - qc * qc * r\n    if a:\n        print(((b * b - a * c) ** 0.5 - b) / a)\n    else:\n        print(-c / (2 * b))", "from operator import mul, sub\ndot = lambda x, y: sum(map(mul, x, y))\nt = int(input())\nfor _ in range(t):\n    l = map(int, input().split())\n    p = (next(l), next(l), next(l))\n    q = (next(l), next(l), next(l))\n    d = (next(l), next(l), next(l))\n    c = (next(l), next(l), next(l))\n    r = next(l)\n    q = tuple(map(sub, q, p))\n    c = tuple(map(sub, c, p))\n    cc = dot(c, c)\n    qc = dot(q, c)\n    dc = dot(d, c)\n    (qcc, dcc) = (qc / cc, dc / cc)\n    q = tuple((x - qcc * y for (x, y) in zip(q, c)))\n    d = tuple((x - dcc * y for (x, y) in zip(d, c)))\n    r *= r\n    r /= (cc - r) * cc\n    a = dot(d, d) - dc * dc * r\n    b = dot(q, d) - qc * dc * r\n    c = dot(q, q) - qc * qc * r\n    if a:\n        print(((b * b - a * c) ** 0.5 - b) / a)\n    else:\n        print(-c / (2 * b))", "from operator import mul, sub\ndot = lambda x, y: sum(map(mul, x, y))\nt = int(input())\nfor _ in range(t):\n    l = map(int, input().split())\n    R = lambda : (next(l), next(l), next(l))\n    (p, q, d, c, r) = (R(), R(), R(), R(), next(l))\n    q = tuple(map(sub, q, p))\n    c = tuple(map(sub, c, p))\n    cc = dot(c, c)\n    qc = dot(q, c)\n    dc = dot(d, c)\n    (qcc, dcc) = (qc / cc, dc / cc)\n    q = tuple((x - qcc * y for (x, y) in zip(q, c)))\n    d = tuple((x - dcc * y for (x, y) in zip(d, c)))\n    r *= r\n    r /= (cc - r) * cc\n    a = dot(d, d) - dc * dc * r\n    b = dot(q, d) - qc * dc * r\n    c = dot(q, q) - qc * qc * r\n    if a:\n        print(((b * b - a * c) ** 0.5 - b) / a)\n    else:\n        print(-c / (2 * b))", "from operator import mul, sub\ndot = lambda x, y: sum(map(mul, x, y))\nt = int(input())\nfor _ in range(t):\n    l = map(int, input().split())\n    R = lambda : (next(l), next(l), next(l))\n    (p, q, d, c, r) = (R(), R(), R(), R(), next(l))\n    q = tuple(map(sub, q, p))\n    c = tuple(map(sub, c, p))\n    (cc, qc, dc) = (dot(x, c) for x in (c, q, d))\n    (qcc, dcc) = (qc / cc, dc / cc)\n    q = tuple((x - qcc * y for (x, y) in zip(q, c)))\n    d = tuple((x - dcc * y for (x, y) in zip(d, c)))\n    r *= r\n    r /= (cc - r) * cc\n    a = dot(d, d) - dc * dc * r\n    b = dot(q, d) - qc * dc * r\n    c = dot(q, q) - qc * qc * r\n    if a:\n        print(((b * b - a * c) ** 0.5 - b) / a)\n    else:\n        print(-c / (2 * b))", "from operator import mul, sub\ndot = lambda x, y: sum(map(mul, x, y))\nt = int(input())\nfor _ in range(t):\n    l = map(int, input().split())\n    R = lambda : (next(l), next(l), next(l))\n    (p, q, d, c, r) = (R(), R(), R(), R(), next(l))\n    q = tuple(map(sub, q, p))\n    c = tuple(map(sub, c, p))\n    (cc, qc, dc) = (dot(x, c) for x in (c, q, d))\n    (qcc, dcc) = (qc / cc, dc / cc)\n    q = tuple((x - qcc * y for (x, y) in zip(q, c)))\n    d = tuple((x - dcc * y for (x, y) in zip(d, c)))\n    r *= r\n    r /= (cc - r) * cc\n    a = dot(d, d) - dc * dc * r\n    b = dot(q, d) - qc * dc * r\n    c = dot(q, q) - qc * qc * r\n    if a:\n        print(((b * b - a * c) ** 0.5 - b) / a)\n    else:\n        print(-c / (2 * b))", "from operator import mul, sub\ndot = lambda x, y: sum(map(mul, x, y))\nt = int(input())\nfor _ in range(t):\n    l = map(int, input().split())\n    R = lambda : (next(l), next(l), next(l))\n    (p, q, d, c, r) = (R(), R(), R(), R(), next(l))\n    q = tuple(map(sub, q, p))\n    c = tuple(map(sub, c, p))\n    cc = dot(c, c)\n    qc = dot(q, c)\n    dc = dot(d, c)\n    (qcc, dcc) = (qc / cc, dc / cc)\n    q = tuple((x - qcc * y for (x, y) in zip(q, c)))\n    d = tuple((x - dcc * y for (x, y) in zip(d, c)))\n    r *= r\n    r /= (cc - r) * cc\n    a = dot(d, d) - dc * dc * r\n    b = dot(q, d) - qc * dc * r\n    c = dot(q, q) - qc * qc * r\n    if a:\n        print(((b * b - a * c) ** 0.5 - b) / a)\n    else:\n        print(-c / (2 * b))", "from operator import mul, sub\ndot = lambda x, y: sum(map(mul, x, y))\nt = int(input())\nfor _ in range(t):\n    l = map(int, input().split())\n    R = lambda : (next(l), next(l), next(l))\n    (p, q, d, c) = (R(), R(), R(), R())\n    r = next(l)\n    q = tuple(map(sub, q, p))\n    c = tuple(map(sub, c, p))\n    cc = dot(c, c)\n    qc = dot(q, c)\n    dc = dot(d, c)\n    (qcc, dcc) = (qc / cc, dc / cc)\n    q = tuple((x - qcc * y for (x, y) in zip(q, c)))\n    d = tuple((x - dcc * y for (x, y) in zip(d, c)))\n    r *= r\n    r /= (cc - r) * cc\n    a = dot(d, d) - dc * dc * r\n    b = dot(q, d) - qc * dc * r\n    c = dot(q, q) - qc * qc * r\n    if a:\n        print(((b * b - a * c) ** 0.5 - b) / a)\n    else:\n        print(-c / (2 * b))", "from math import *\n\ndef sq(n):\n    return n * n\nt = int(input())\nwhile t:\n    mp = input().split()\n    px = int(mp[0])\n    py = int(mp[1])\n    pz = int(mp[2])\n    qx = int(mp[3])\n    qy = int(mp[4])\n    qz = int(mp[5])\n    dx = int(mp[6])\n    dy = int(mp[7])\n    dz = int(mp[8])\n    cx = int(mp[9])\n    cy = int(mp[10])\n    cz = int(mp[11])\n    r = int(mp[12])\n    x2 = px\n    y2 = py\n    z2 = pz\n    x0 = qx\n    y0 = qy\n    z0 = qz\n    a11 = x2 - x0\n    a22 = y2 - y0\n    a33 = z2 - z0\n    b11 = -dx\n    b22 = -dy\n    b33 = -dz\n    x = x2 - cx\n    y = y2 - cy\n    z = z2 - cz\n    A = y * z2 - z * y2\n    B = z * x2 - x * z2\n    C = x * y2 - y * x2\n    a1 = A - y * z0 + z * y0\n    a2 = B - z * x0 + x * z0\n    a3 = C - x * y0 + y * x0\n    b1 = z * dy - y * dz\n    b2 = x * dz - z * dx\n    b3 = y * dx - x * dy\n    a = sq(b11) * sq(r) - sq(b1) + sq(b22) * sq(r) - sq(b2) + sq(b33) * sq(r) - sq(b3)\n    b = 2 * (a11 * b11 * sq(r) - a1 * b1) + 2 * (a22 * b22 * sq(r) - a2 * b2) + 2 * (a33 * b33 * sq(r) - a3 * b3)\n    c = sq(a11) * sq(r) - sq(a1) + sq(a22) * sq(r) - sq(a2) + sq(a33) * sq(r) - sq(a3)\n    if a == 0:\n        print(-c / b)\n        t -= 1\n        continue\n    t1 = (-b + sqrt(b * b - 4 * a * c)) / 2 / a\n    t2 = (-b - sqrt(b * b - 4 * a * c)) / 2 / a\n    if t1 >= 0.0 and t2 >= 0.0:\n        print(min(t1, t2))\n    elif t1 >= 0.0:\n        print(t1)\n    elif t2 >= 0.0:\n        print(t2)\n    t -= 1", "from operator import mul, sub\ndot = lambda x, y: sum(map(mul, x, y))\nt = int(input())\nfor _ in range(t):\n    l = map(int, input().split())\n    p = (next(l), next(l), next(l))\n    q = (next(l), next(l), next(l))\n    d = (next(l), next(l), next(l))\n    c = (next(l), next(l), next(l))\n    r = next(l)\n    q = tuple(map(sub, q, p))\n    c = tuple(map(sub, c, p))\n    cc = dot(c, c)\n    qc = dot(q, c)\n    dc = dot(d, c)\n    (qcc, dcc) = (qc / cc, dc / cc)\n    q = tuple((x - qcc * y for (x, y) in zip(q, c)))\n    d = tuple((x - dcc * y for (x, y) in zip(d, c)))\n    r *= r\n    r /= (cc - r) * cc\n    a = dot(d, d) - dc * dc * r\n    b = dot(q, d) - qc * dc * r\n    c = dot(q, q) - qc * qc * r\n    if a:\n        print(((b * b - a * c) ** 0.5 - b) / a)\n    else:\n        print(-c / (2 * b))", "from operator import mul, sub\nfrom itertools import islice\ndot = lambda x, y: sum(map(mul, x, y))\nt = int(input())\nfor _ in range(t):\n    l = map(int, input().split())\n    p = tuple(islice(l, 3))\n    q = tuple(islice(l, 3))\n    d = tuple(islice(l, 3))\n    c = tuple(islice(l, 3))\n    r = next(l)\n    q = tuple(map(sub, q, p))\n    c = tuple(map(sub, c, p))\n    cc = dot(c, c)\n    qc = dot(q, c)\n    dc = dot(d, c)\n    (qcc, dcc) = (qc / cc, dc / cc)\n    q = tuple((x - qcc * y for (x, y) in zip(q, c)))\n    d = tuple((x - dcc * y for (x, y) in zip(d, c)))\n    r *= r\n    r /= (cc - r) * cc\n    a = dot(d, d) - dc * dc * r\n    b = dot(q, d) - qc * dc * r\n    c = dot(q, q) - qc * qc * r\n    if a:\n        print(((b * b - a * c) ** 0.5 - b) / a)\n    else:\n        print(-c / (2 * b))", "from operator import mul, sub\nfrom itertools import islice\ndot = lambda x, y: sum(map(mul, x, y))\nt = int(input())\nfor _ in range(t):\n    l = map(int, input().split())\n    (p, q, d, c) = islice(iter(lambda : tuple(islice(l, 3)), None), 4)\n    r = next(l)\n    q = tuple(map(sub, q, p))\n    c = tuple(map(sub, c, p))\n    cc = dot(c, c)\n    qc = dot(q, c)\n    dc = dot(d, c)\n    (qcc, dcc) = (qc / cc, dc / cc)\n    q = tuple((x - qcc * y for (x, y) in zip(q, c)))\n    d = tuple((x - dcc * y for (x, y) in zip(d, c)))\n    r *= r\n    r /= (cc - r) * cc\n    a = dot(d, d) - dc * dc * r\n    b = dot(q, d) - qc * dc * r\n    c = dot(q, q) - qc * qc * r\n    if a:\n        print(((b * b - a * c) ** 0.5 - b) / a)\n    else:\n        print(-c / (2 * b))", "from operator import mul, sub\ndot = lambda x, y: sum(map(mul, x, y))\nt = int(input())\nfor _ in range(t):\n    l = map(int, input().split())\n    p = (next(l), next(l), next(l))\n    q = (next(l), next(l), next(l))\n    d = (next(l), next(l), next(l))\n    c = (next(l), next(l), next(l))\n    r = next(l)\n    q = tuple(map(sub, q, p))\n    c = tuple(map(sub, c, p))\n    cc = dot(c, c)\n    qc = dot(q, c)\n    dc = dot(d, c)\n    (qcc, dcc) = (qc / cc, dc / cc)\n    q = tuple((x - qcc * y for (x, y) in zip(q, c)))\n    d = tuple((x - dcc * y for (x, y) in zip(d, c)))\n    r *= r\n    r /= (cc - r) * cc\n    a = dot(d, d) - dc * dc * r\n    b = dot(q, d) - qc * dc * r\n    c = dot(q, q) - qc * qc * r\n    if a:\n        print(((b * b - a * c) ** 0.5 - b) / a)\n    else:\n        print(-c / (2 * b))", "from operator import mul, sub\nfrom itertools import islice\ndot = lambda x, y: sum(map(mul, x, y))\nt = int(input())\nfor _ in range(t):\n    l = map(int, input().split())\n    (p, q, d, c) = islice(iter(lambda : tuple(islice(l, 3)), None), 4)\n    r = next(l)\n    q = tuple(map(sub, q, p))\n    c = tuple(map(sub, c, p))\n    cc = dot(c, c)\n    qc = dot(q, c)\n    dc = dot(d, c)\n    (qcc, dcc) = (qc / cc, dc / cc)\n    q = tuple((x - qcc * y for (x, y) in zip(q, c)))\n    d = tuple((x - dcc * y for (x, y) in zip(d, c)))\n    r *= r\n    r /= (cc - r) * cc\n    a = dot(d, d) - dc * dc * r\n    b = dot(q, d) - qc * dc * r\n    c = dot(q, q) - qc * qc * r\n    if a:\n        print(((b * b - a * c) ** 0.5 - b) / a)\n    else:\n        print(-c / (2 * b))", "import math\nte = int(input())\nwhile te > 0:\n    te = te - 1\n    (x1, y1, z1, x2, y2, z2, d1, d2, d3, x0, y0, z0, r) = input().split()\n    x1 = int(x1)\n    y1 = int(y1)\n    z1 = int(z1)\n    x2 = int(x2)\n    y2 = int(y2)\n    z2 = int(z2)\n    d1 = int(d1)\n    d2 = int(d2)\n    d3 = int(d3)\n    x0 = int(x0)\n    y0 = int(y0)\n    z0 = int(z0)\n    r = int(r)\n    A = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0) + (z1 - z0) * (z1 - z0)\n    C = A - r * r\n    a = x1 - x0\n    b = y1 - y0\n    c = z1 - z0\n    AA = (C - a * a) * (d1 * d1) + (C - b * b) * (d2 * d2) + (C - c * c) * (d3 * d3) - 2 * a * b * d1 * d2 - 2 * b * c * d2 * d3 - 2 * a * c * d1 * d3\n    BB = (C - a * a) * d1 * (x2 - x1) + (C - b * b) * d2 * (y2 - y1) + (C - c * c) * d3 * (z2 - z1) - a * b * (d1 * (y2 - y1) + d2 * (x2 - x1)) - b * c * (d2 * (z2 - z1) + d3 * (y2 - y1)) - a * c * (d1 * (z2 - z1) + d3 * (x2 - x1))\n    CC = (C - a * a) * (x2 - x1) * (x2 - x1) + (C - b * b) * (y2 - y1) * (y2 - y1) + (C - c * c) * (z2 - z1) * (z2 - z1) - 2 * a * b * (x2 - x1) * (y2 - y1) - 2 * b * c * (y2 - y1) * (z2 - z1) - 2 * a * c * (x2 - x1) * (z2 - z1)\n    BB *= 2\n    if AA == 0:\n        t1 = -CC / BB\n        print(t1)\n    else:\n        cal = math.sqrt(BB * BB - 4 * AA * CC)\n        t1 = (-BB + cal) / (2 * AA)\n        t2 = (-BB - cal) / (2 * AA)\n        if t2 < 0:\n            print(t1)\n        else:\n            print(t2)", "import math\nT = int(input().strip())\nif T >= 1 and T <= 10 ** 5:\n    for eachTestCase in range(T):\n        par = [int(i) for i in input().strip().split()]\n        (px, py, pz) = (par[0], par[1], par[2])\n        (qx, qy, qz) = (par[3], par[4], par[5])\n        (dx, dy, dz) = (par[6], par[7], par[8])\n        (cx, cy, cz, r) = (par[9], par[10], par[11], par[12])\n        if r > 0 and r <= 10 ** 9 and (abs(px) <= 2 * 10 ** 9) and (abs(py) <= 2 * 10 ** 9) and (abs(pz) <= 2 * 10 ** 9) and (abs(qx) <= 2 * 10 ** 9) and (abs(qy) <= 2 * 10 ** 9) and (abs(qz) <= 2 * 10 ** 9) and (abs(dx) <= 2 * 10 ** 9) and (abs(dy) <= 2 * 10 ** 9) and (abs(dz) <= 2 * 10 ** 9) and (abs(cx) <= 2 * 10 ** 9) and (abs(cy) <= 2 * 10 ** 9) and (abs(cz) <= 2 * 10 ** 9):\n            (pqx, pqy, pqz, pcx, pcy, pcz) = (px - qx, py - qy, pz - qz, px - cx, py - cy, pz - cz)\n            (a2qu, a2rem, a2val) = (dx ** 2 + dy ** 2 + dz ** 2, pqx ** 2 + pqy ** 2 + pqz ** 2, 2 * (dx * pqx + dy * pqy + dz * pqz))\n            (b2rem, b2val) = (2 * (pqx * pcx + pqy * pcy + pqz * pcz), 2 * (dx * pcx + dy * pcy + dz * pcz))\n            c = pcx ** 2 + pcy ** 2 + pcz ** 2 - r ** 2\n            (tqu, tval, trem) = (b2val ** 2 - 4 * c * a2qu, 4 * c * a2val - 2 * b2rem * b2val, b2rem ** 2 - 4 * c * a2rem)\n            if tqu == 0:\n                print(trem * -1 / tval)\n            else:\n                detval = tval ** 2 - 4 * tqu * trem\n                if detval >= 0:\n                    root1 = (tval * -1 + math.sqrt(detval)) / (2 * tqu)\n                    root2 = (tval * -1 - math.sqrt(detval)) / (2 * tqu)\n                    if root1 > 0 and root2 > 0:\n                        if root1 > root2:\n                            print(root2)\n                        else:\n                            print(root1)\n                    elif root1 < 0 and root2 > 0:\n                        print(root2)\n                    elif root1 > 0 and root2 < 0:\n                        print(root1)\n                    else:\n                        print()", "t = int(input())\nwhile t:\n    t -= 1\n    (Px, Py, Pz, Qx, Qy, Qz, dx, dy, dz, cx, cy, cz, r) = [int(s) for s in input().split(' ')]\n    ax = Px - cx\n    x = Qx - Px\n    ay = Py - cy\n    y = Qy - Py\n    az = Pz - cz\n    z = Qz - Pz\n    A = (az * dy - ay * dz) * (az * dy - ay * dz) + (az * dx - ax * dz) * (az * dx - ax * dz) + (ax * dy - ay * dx) * (ax * dy - ay * dx) - r * r * (dx * dx + dy * dy + dz * dz)\n    C = (y * az - z * ay) * (y * az - z * ay) + (x * az - z * ax) * (x * az - z * ax) + (y * ax - x * ay) * (y * ax - x * ay) - r * r * (x * x + y * y + z * z)\n    B = 2 * ((y * ax - x * ay) * (dy * ax - dx * ay) + (y * az - z * ay) * (dy * az - dz * ay) + (z * ax - x * az) * (dz * ax - dx * az) - r * r * (x * dx + y * dy + z * dz))\n    if A == 0:\n        time = -1 * C / B\n    else:\n        time = ((B * B - 4 * A * C) ** 0.5 - B) / (2 * A)\n    print(time)", "import math\n\ndef square(f):\n    return f * f\n\ndef dist(px, py, pz, cx, cy, cz):\n    a1 = square(px - cx)\n    b1 = square(py - cy)\n    c1 = square(pz - cz)\n    return a1 + b1 + c1\nt = int(input())\nfor i in range(t):\n    inp = input().split()\n    px = int(inp[0])\n    py = int(inp[1])\n    pz = int(inp[2])\n    qx = int(inp[3])\n    qy = int(inp[4])\n    qz = int(inp[5])\n    dx = int(inp[6])\n    dy = int(inp[7])\n    dz = int(inp[8])\n    cx = int(inp[9])\n    cy = int(inp[10])\n    cz = int(inp[11])\n    r = int(inp[12])\n    a = qx - px\n    b = qy - py\n    c = qz - pz\n    d = square(a) + square(b) + square(c)\n    e = square(dx) + square(dy) + square(dz)\n    f = 2 * a * dx + 2 * b * dy + 2 * c * dz\n    g = qx - cx\n    h = qy - cy\n    i1 = qz - cz\n    i = square(g) + square(h) + square(i1)\n    j = 2 * g * dx + 2 * h * dy + 2 * i1 * dz\n    k = dist(px, py, pz, cx, cy, cz) - square(r)\n    l = i - square(r) - d + k\n    m = j - f\n    n = 4 * k * e - square(m)\n    o = 4 * k * j - 2 * l * m\n    p = 4 * k * (i - square(r)) - square(l)\n    if n == 0:\n        print(-p / o)\n    else:\n        alpha = (-o + math.sqrt(square(o) - 4 * n * p)) / (2 * n)\n        beta = (-o - math.sqrt(square(o) - 4 * n * p)) / (2 * n)\n        if alpha > 0 and beta > 0:\n            print(min(alpha, beta))\n        elif alpha < 0 and beta > 0:\n            print(beta)\n        elif alpha > 0 and beta < 0:\n            print(alpha)\n        elif alpha < 0 and beta < 0:\n            print(-1)", "import math\n\ndef twice(n):\n    a = n * n\n    return a\n\nclass data:\n    locx = 0.0\n    locy = 0.0\n    locz = 0.0\n\n    def subtract(first, second):\n        variable2 = data()\n        variable2.locx = first.locx - second.locx\n        variable2.locy = first.locy - second.locy\n        variable2.locz = first.locz - second.locz\n        return variable2\nashu = input()\nashu = int(ashu)\nfor testcases in range(1, ashu + 1):\n    variable1 = data()\n    variable2 = data()\n    d = data()\n    c = data()\n    medium = input().split(' ')\n    variable1.locx = float(medium[0])\n    variable1.locy = float(medium[1])\n    variable1.locz = float(medium[2])\n    variable2.locx = float(medium[3])\n    variable2.locy = float(medium[4])\n    variable2.locz = float(medium[5])\n    d.locx = float(medium[6])\n    d.locy = float(medium[7])\n    d.locz = float(medium[8])\n    c.locx = float(medium[9])\n    c.locy = float(medium[10])\n    c.locz = float(medium[11])\n    r = float(medium[12])\n    palak1 = math.sqrt(twice(c.locx - variable1.locx) + twice(c.locy - variable1.locy) + twice(c.locz - variable1.locz))\n    palak2 = r / palak1\n    palak3 = math.sqrt(1 - twice(palak2))\n    palak4 = data()\n    palak5 = data()\n    palak4 = c.subtract(variable1)\n    palak5 = variable2.subtract(variable1)\n    palak6 = palak4.locx * palak5.locx + palak4.locy * palak5.locy + palak4.locz * palak5.locz\n    palak7 = palak4.locx * d.locx + palak4.locy * d.locy + palak4.locz * d.locz\n    palak8 = math.sqrt(twice(palak4.locx) + twice(palak4.locy) + twice(palak4.locz))\n    palak9 = twice(palak8) * twice(palak3)\n    palak10 = math.sqrt(twice(palak5.locx) + twice(palak5.locy) + twice(palak5.locz))\n    palak11 = math.sqrt(twice(d.locx) + twice(d.locy) + twice(d.locz))\n    palak12 = palak5.locx * d.locx + palak5.locy * d.locy + palak5.locz * d.locz\n    palak16 = twice(palak11) - twice(palak7) / palak9\n    palak17 = 2 * (palak12 - palak6 * palak7 / palak9)\n    palak18 = twice(palak10) - twice(palak6) / palak9\n    if palak16 < 10 ** (-10):\n        answeris = -1.0 * palak18 / palak17\n    else:\n        palak13 = math.sqrt(twice(palak17) - 4 * palak16 * palak18)\n        palak14 = (palak13 - palak17) / (2 * palak16)\n        palak15 = (-palak13 - palak17) / (2 * palak16)\n        if palak15 < 0 or palak14 < 0:\n            answeris = max(palak15, palak14)\n        else:\n            answeris = min(palak15, palak14)\n    print(answeris)", "import math\nw = int(input())\nwhile w > 0:\n    w = w - 1\n    h = map(int, input().split(' '))\n    h = list(h)\n    px = h[0]\n    py = h[1]\n    pz = h[2]\n    qx = h[3]\n    qy = h[4]\n    qz = h[5]\n    dx = h[6]\n    dy = h[7]\n    dz = h[8]\n    cx = h[9]\n    cy = h[10]\n    cz = h[11]\n    r = h[12]\n    x = (qx - px) * (px - cx) + (qy - py) * (py - cy) + (qz - pz) * (pz - cz)\n    y = (px - cx) * dx + (py - cy) * dy + (pz - cz) * dz\n    z = (qx - px) * (qx - px) + (qy - py) * (qy - py) + (qz - pz) * (qz - pz)\n    x1 = 2 * (qx - px) * dx + 2 * (qy - py) * dy + 2 * (qz - pz) * dz\n    x2 = dx * dx + dy * dy + dz * dz\n    x3 = (px - cx) * (px - cx) + (py - cy) * (py - cy) + (pz - cz) * (pz - cz)\n    b = 2 * x * y + r * r * x1 - x3 * x1\n    c = x * x + r * r * z - x3 * z\n    a = y * y + r * r * x2 - x3 * x2\n    x = b * b - 4 * a * c\n    D = math.pow(x, 1 / 2)\n    if a == 0:\n        r1 = -(c / b)\n        r2 = r1\n    else:\n        r1 = (-b - D) / (2 * a)\n        r2 = (b + D) / (2 * a)\n    if r1 < 0:\n        r1 = -r1\n    if r2 < 0:\n        r2 = -r2\n    print(r1)", "import math\nt = int(input())\nfor l in range(t):\n    (px, py, pz, qx, qy, qz, x, y, z, cx, cy, cz, r) = map(int, input().split())\n    a = cx - px\n    b = cy - py\n    c = cz - pz\n    g = cx - qx\n    h = cy - qy\n    i = cz - qz\n    m = px - qx\n    n = py - qy\n    v = pz - qz\n    at1 = a * a * y * y + a * a * z * z - 2 * a * b * x * y - 2 * a * c * x * z + b * b * x * x + b * b * z * z - 2 * b * c * y * z + c * c * x * x + c * c * y * y - r * r * x * x - r * r * y * y - r * r * z * z\n    bt1 = -2 * a * a * h * y - 2 * a * a * i * z + 2 * a * b * g * y + 2 * a * b * h * x + 2 * a * c * g * z + 2 * a * c * i * x - 2 * b * b * g * x - 2 * b * b * i * z + 2 * b * c * h * z + 2 * b * c * i * y - 2 * c * c * g * x - 2 * c * c * h * y + 2 * m * r * r * x + 2 * n * r * r * y + 2 * r * r * v * z\n    ct1 = a * a * h * h + a * a * i * i - 2 * a * b * g * h - 2 * a * c * g * i + b * b * g * g + b * b * i * i - 2 * b * c * h * i + c * c * g * g + c * c * h * h - m * m * r * r - n * n * r * r - r * r * v * v\n    at1 = -1 * at1\n    bt1 = -1 * bt1\n    ct1 = -1 * ct1\n    if at1 == 0:\n        ans = abs(-1 * (ct1 / bt1))\n        print(ans)\n    else:\n        ans1 = (-bt1 + math.sqrt(bt1 * bt1 - 4 * at1 * ct1)) / (2 * at1)\n        ans2 = (-bt1 - math.sqrt(bt1 * bt1 - 4 * at1 * ct1)) / (2 * at1)\n        if ans1 > 0:\n            print(ans1)\n        if ans2 > 0:\n            print(ans2)", "import math\nt = int(input())\nwhile t > 0:\n    q = map(int, input().split(' '))\n    p = list(q)\n    x1 = p[0]\n    y1 = p[1]\n    z1 = p[2]\n    x2 = p[3]\n    y2 = p[4]\n    z2 = p[5]\n    dx = p[6]\n    dy = p[7]\n    dz = p[8]\n    x3 = p[9]\n    y3 = p[10]\n    z3 = p[11]\n    r = p[12]\n    a = (x1 - x3) * (x2 - x1) + (y1 - y3) * (y2 - y1) + (z1 - z3) * (z2 - z1)\n    b = (x1 - x3) * dx + (y1 - y3) * dy + (z1 - z3) * dz\n    d = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1)\n    e = 2 * ((x2 - x1) * dx + (y2 - y1) * dy + (z2 - z1) * dz)\n    f = dx * dx + dy * dy + dz * dz\n    A = (x1 - x3) * (x1 - x3) + (y1 - y3) * (y1 - y3) + (z1 - z3) * (z1 - z3)\n    x = r * r * f - A * f + b * b\n    y = r * r * e - A * e + 2 * a * b\n    z = r * r * d - A * d + a * a\n    D = pow(y * y - 4 * x * z, 1 / 2)\n    if x == 0:\n        D1 = -z / y\n    else:\n        D1 = (-y - D) / (2 * x)\n    print(D1)\n    t = t - 1", "def dot(a, b):\n    r1 = a[0] * b[0]\n    r2 = a[1] * b[1]\n    r3 = a[2] * b[2]\n    r = r1 + r2 + r3\n    return r\nfor i in range(int(input())):\n    (x1, y1, z1, x2, y2, z2, d1, d2, d3, c1, c2, c3, r) = map(float, input().split())\n    t1 = r ** 2 * d1 ** 2 + r ** 2 * d2 ** 2 + r ** 2 * d3 ** 2\n    t2 = (d1 * (y1 - c2) - d2 * (x1 - c1)) ** 2 + (d2 * (z1 - c3) - d3 * (y1 - c2)) ** 2 + (d3 * (x1 - c1) - d1 * (z1 - c3)) ** 2\n    A = t1 - t2\n    t11 = 2 * r ** 2 * ((x2 - x1) * d1 + (y2 - y1) * d2 + (z2 - z1) * d3)\n    t22 = 2 * (((x2 - x1) * (y1 - c2) - (y2 - y1) * (x1 - c1)) * (d1 * (y1 - c2) - d2 * (x1 - c1)) + ((y2 - y1) * (z1 - c3) - (z2 - z1) * (y1 - c2)) * (d2 * (z1 - c3) - d3 * (y1 - c2)) + ((z2 - z1) * (x1 - c1) - (x2 - x1) * (z1 - c3)) * (d3 * (x1 - c1) - d1 * (z1 - c3)))\n    B = t11 - t22\n    t111 = r ** 2 * ((x2 - x1) ** 2 + (y2 - y1) ** 2 + (z2 - z1) ** 2)\n    t222 = ((x2 - x1) * (y1 - c2) - (y2 - y1) * (x1 - c1)) ** 2 + ((y2 - y1) * (z1 - c3) - (z2 - z1) * (y1 - c2)) ** 2 + ((z2 - z1) * (x1 - c1) - (x2 - x1) * (z1 - c3)) ** 2\n    C = t111 - t222\n    if A != 0:\n        Z = 2 * A\n        t1 = (-1 * B + (B ** 2 - 4 * A * C) ** 0.5) / Z\n        t2 = (-1 * B - (B ** 2 - 4 * A * C) ** 0.5) / Z\n        t = 0\n        q = 0\n        if t2 < q:\n            t = t1\n        elif t1 < q:\n            t = t2\n        elif t1 >= q and t2 >= q:\n            if t1 > t2:\n                t = t2\n            elif t2 > t1:\n                t = t1\n        print('%.10f' % t)\n    elif A == 0:\n        t = -1 * C / B\n        print('%.10f' % t)\n        continue", "from math import sqrt as sqrt\n\ndef sqr(x):\n    return x * x\n\nclass coordinates:\n    x = 0.0\n    y = 0.0\n    z = 0.0\n\n    def mins(self, a):\n        b = coordinates()\n        b.x = self.x - a.x\n        b.y = self.y - a.y\n        b.z = self.z - a.z\n        return b\ntest = int(input())\nwhile test:\n    test -= 1\n    p = coordinates()\n    q = coordinates()\n    d = coordinates()\n    c = coordinates()\n    arr = input().split()\n    p.x = float(arr[0])\n    p.y = float(arr[1])\n    p.z = float(arr[2])\n    q.x = float(arr[3])\n    q.y = float(arr[4])\n    q.z = float(arr[5])\n    d.x = float(arr[6])\n    d.y = float(arr[7])\n    d.z = float(arr[8])\n    c.x = float(arr[9])\n    c.y = float(arr[10])\n    c.z = float(arr[11])\n    r = float(arr[12])\n    dist_rp = sqrt(sqr(c.x - p.x) + sqr(c.y - p.y) + sqr(c.z - p.z))\n    sinth = r / dist_rp\n    costh = sqrt(1 - sqr(sinth))\n    c_p = coordinates()\n    qmp = coordinates()\n    c_p = c.mins(p)\n    qmp = q.mins(p)\n    udvf = c_p.x * qmp.x + c_p.y * qmp.y + c_p.z * qmp.z\n    udvs = c_p.x * d.x + c_p.y * d.y + c_p.z * d.z\n    mag_u = sqrt(sqr(c_p.x) + sqr(c_p.y) + sqr(c_p.z))\n    denm = sqr(mag_u) * sqr(costh)\n    mag_qmp = sqrt(sqr(qmp.x) + sqr(qmp.y) + sqr(qmp.z))\n    mag_d = sqrt(sqr(d.x) + sqr(d.y) + sqr(d.z))\n    qmpdd = qmp.x * d.x + qmp.y * d.y + qmp.z * d.z\n    a = sqr(mag_d) - sqr(udvs) / denm\n    b = 2 * (qmpdd - udvf * udvs / denm)\n    c = sqr(mag_qmp) - sqr(udvf) / denm\n    if a < 10 ** (-10):\n        t = -1.0 * c / b\n    else:\n        determ = sqrt(sqr(b) - 4 * a * c)\n        sh = (determ - b) / (2 * a)\n        ev = (-determ - b) / (2 * a)\n        if ev < 0 or sh < 0:\n            t = max(ev, sh)\n        else:\n            t = min(ev, sh)\n    print(t)", "t = input().strip()\nt = int(t)\nfor _ in range(t):\n    (px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r) = map(float, input().strip().split())\n    a = qx - px\n    b = qy - py\n    c = qz - pz\n    k = px - cx\n    l = py - cy\n    m = pz - cz\n    S1 = r ** 2 * (dx ** 2 + dy ** 2 + dz ** 2)\n    S2 = (dx * l - dy * k) ** 2 + (dy * m - dz * l) ** 2 + (dz * k - dx * m) ** 2\n    A = S1 - S2\n    S1 = 2 * r ** 2 * (a * dx + b * dy + c * dz)\n    S2 = 2 * ((a * l - b * k) * (dx * l - dy * k) + (b * m - c * l) * (dy * m - dz * l) + (c * k - a * m) * (dz * k - dx * m))\n    B = S1 - S2\n    S1 = r ** 2 * (a ** 2 + b ** 2 + c ** 2)\n    S2 = (a * l - b * k) ** 2 + (b * m - c * l) ** 2 + (c * k - a * m) ** 2\n    C = S1 - S2\n    if A == 0:\n        t = -1 * C / B\n        print(round(t, 10))\n    else:\n        import math\n        t1 = (-1 * B + math.sqrt(B ** 2 - 4 * A * C)) / (2 * A)\n        t2 = (-1 * B - math.sqrt(B ** 2 - 4 * A * C)) / (2 * A)\n        if t1 < 0 and t2 < 0:\n            print(round(0, 10))\n        elif t1 < 0:\n            print(round(t2, 10))\n        elif t2 < 0:\n            print(round(t1, 10))\n        elif t1 >= t2:\n            print(round(t1, 10))\n        else:\n            print(round(t2, 10))", "from math import *\nT = int(input())\nfor _ in range(T):\n    (px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r) = map(int, input().split())\n    M = px - cx\n    N = py - cy\n    P = pz - cz\n    PT2 = M ** 2 + N ** 2 + P ** 2 - r ** 2\n    a = (-2 * dx * M - 2 * dy * N - 2 * dz * P) ** 2 - 4 * PT2 * (dx ** 2 + dy ** 2 + dz ** 2)\n    b = -1 * ((4 * dx * M + 4 * dy * N + 4 * dz * P) * (px ** 2 + py ** 2 + pz ** 2 - cx ** 2 - cy ** 2 - cz ** 2 - 2 * (qx * M + qy * N + qz * P) + r ** 2 - PT2) + 4 * PT2 * (2 * qx * dx + 2 * qy * dy + 2 * qz * dz - 2 * cx * dx - 2 * cy * dy - 2 * cz * dz))\n    c = (px ** 2 + py ** 2 + pz ** 2 - cx ** 2 - cy ** 2 - cz ** 2 - 2 * (qx * M + qy * N + qz * P) + r ** 2 - PT2) ** 2 - 4 * PT2 * (cx ** 2 + cy ** 2 + cz ** 2 + qx ** 2 + qy ** 2 + qz ** 2 - 2 * cx * qx - 2 * cy * qy - 2 * cz * qz - r ** 2)\n    ANS = 0\n    if a == 0:\n        ANS = -c / b\n    else:\n        D = (b ** 2 - 4 * a * c) ** (1 / 2)\n        first = (-1 * b - D) / (2 * a)\n        zz = 0\n        second = (-1 * b + D) / (2 * a)\n        minn = min(second, first)\n        if minn < 0:\n            if minn == first:\n                zz = second\n            else:\n                zz = first\n        ANS = zz\n    print('%.10f' % ANS)", "import math\nt = int(input().strip())\nfor _ in range(t):\n    (p0, p1, p2, q0, q1, q2, d0, d1, d2, c0, c1, c2, r) = [int(x) for x in input().strip().split(' ')]\n    pc0 = p0 - c0\n    pc1 = p1 - c1\n    pc2 = p2 - c2\n    sqt1 = pc1 * d2 - pc2 * d1\n    sqt2 = pc0 * d1 - pc1 * d0\n    sqt3 = pc2 * d0 - pc0 * d2\n    lt1 = q1 * c2 - q2 * c1 + p2 * c1 - p1 * c2 + p1 * q2 - p2 * q1\n    lt2 = q0 * c1 - q1 * c0 + p1 * c0 - p0 * c1 + p0 * q1 - p1 * q0\n    lt3 = q2 * c0 - q0 * c2 + p0 * c2 - p2 * c0 + p2 * q0 - p0 * q2\n    s1 = d0 * r\n    s2 = d1 * r\n    s3 = d2 * r\n    l1 = q0 * r - p0 * r\n    l2 = q1 * r - p1 * r\n    l3 = q2 * r - p2 * r\n    a = s1 ** 2 + s2 ** 2 + s3 ** 2 - sqt1 ** 2 - sqt2 ** 2 - sqt3 ** 2\n    b = 2 * (s1 * l1 + s2 * l2 + s3 * l3 - sqt1 * lt1 - sqt2 * lt2 - sqt3 * lt3)\n    c = l1 ** 2 + l2 ** 2 + l3 ** 2 - lt1 ** 2 - lt2 ** 2 - lt3 ** 2\n    if a == 0:\n        t = -1 * c / b\n        print(t)\n    else:\n        srt = math.sqrt(b ** 2 - 4 * a * c)\n        sol1 = -1 * b + srt\n        sol2 = -1 * b - srt\n        sol1 /= 2 * a\n        sol2 /= 2 * a\n        sol = min(sol1, sol2)\n        if sol < 0:\n            print(max(sol1, sol2))\n        else:\n            print(sol)", "import math\nN = int(input())\nfor i in range(N):\n    op = input().split(' ')\n    Px = int(op[0])\n    Py = int(op[1])\n    Pz = int(op[2])\n    Qx = int(op[3])\n    Qy = int(op[4])\n    Qz = int(op[5])\n    Dx = int(op[6])\n    Dy = int(op[7])\n    Dz = int(op[8])\n    Cx = int(op[9])\n    Cy = int(op[10])\n    Cz = int(op[11])\n    R = int(op[12])\n    C = Cx * Cx + Cy * Cy + Cz * Cz + Px * Px + Py * Py + Pz * Pz - 2 * (Px * Cx + Py * Cy + Pz * Cz) - R * R\n    Kx = Cx - Px\n    Ky = Cy - Py\n    Kz = Cz - Pz\n    lambdaX = Qx - Px\n    lambdaY = Qy - Py\n    lambdaZ = Qz - Pz\n    a = (Kx * Kx - C) * (Dx * Dx) + (Ky * Ky - C) * (Dy * Dy) + (Kz * Kz - C) * (Dz * Dz) + 2 * (Kx * Ky * Dx * Dy + Kx * Kz * Dx * Dz + Ky * Kz * Dy * Dz)\n    b = (Kx * Kx - C) * (2 * lambdaX * Dx) + (Ky * Ky - C) * (2 * lambdaY * Dy) + (Kz * Kz - C) * (2 * lambdaZ * Dz) + (2 * Kx * Ky * (lambdaY * Dx + lambdaX * Dy) + 2 * Ky * Kz * (lambdaZ * Dy + lambdaY * Dz) + 2 * Kx * Kz * (lambdaX * Dz + lambdaZ * Dx))\n    c = (Kx * Kx - C) * (lambdaX * lambdaX) + (Ky * Ky - C) * (lambdaY * lambdaY) + (Kz * Kz - C) * (lambdaZ * lambdaZ) + 2 * Kx * Ky * lambdaX * lambdaY + 2 * Kx * Kz * lambdaX * lambdaZ + 2 * Ky * Kz * lambdaY * lambdaZ\n    A = (Kz * Dy - Ky * Dz) * (Kz * Dy - Ky * Dz) + (Kz * Dx - Kx * Dz) * (Kz * Dx - Kx * Dz) + (Ky * Dx - Kx * Dy) * (Ky * Dx - Kx * Dy) - R * R * (Dx * Dx + Dy * Dy + Dz * Dz)\n    B = 2 * ((Kz * lambdaY - Ky * lambdaZ) * (Kz * Dy - Ky * Dz) + (Kz * lambdaX - Kx * lambdaZ) * (Kz * Dx - Kx * Dz) + (Ky * lambdaX - Kx * lambdaY) * (Ky * Dx - Kx * Dy)) - 2 * R * R * (lambdaX * Dx + lambdaY * Dy + lambdaZ * Dz)\n    C = (Kz * lambdaY - Ky * lambdaZ) * (Kz * lambdaY - Ky * lambdaZ) + (Kz * lambdaX - Kx * lambdaZ) * (Kz * lambdaX - Kx * lambdaZ) + (Ky * lambdaX - Kx * lambdaY) * (Ky * lambdaX - Kx * lambdaY) - R * R * (lambdaX * lambdaX + lambdaY * lambdaY + lambdaZ * lambdaZ)\n    d = B * B - 4 * A * C\n    sqrt_val = math.sqrt(abs(d))\n    if A == 0:\n        print(-C / B)\n    else:\n        r1 = (-B + sqrt_val) / (2 * A)\n        r2 = (-B - sqrt_val) / (2 * A)\n        if r2 < 0 and r1 >= 0:\n            print(r1)\n        elif r2 < 0 and r1 < 0:\n            print(min(abs(r1), abs(r2)))\n        else:\n            print(min(abs(r2), abs(r1)))", "def isSeen(x, y, z, Cx, Cy, Cz, CP2, R):\n    a = x * Cx + y * Cy + z * Cz\n    b = x * x + y * y + z * z\n    return CP2 * b - a * a > R * R * b\nN = int(input())\nfor t in range(N):\n    (Px, Py, Pz, Qx, Qy, Qz, dx, dy, dz, Cx, Cy, Cz, R) = [int(i) for i in input().split()]\n    Qx = Qx - Px\n    Qy = Qy - Py\n    Qz = Qz - Pz\n    Cx = Cx - Px\n    Cy = Cy - Py\n    Cz = Cz - Pz\n    CP2 = Cx * Cx + Cy * Cy + Cz * Cz\n    l = 0\n    h = 1100000000.0\n    m = (l + h) / 2\n    while h - l >= 1e-07:\n        if isSeen(Qx + m * dx, Qy + m * dy, Qz + m * dz, Cx, Cy, Cz, CP2, R):\n            h = m\n        else:\n            l = m\n        m = (l + h) / 2\n    print(m)", "from math import sqrt\ntest = int(input())\nfor i in range(test):\n    (x2, y2, z2, x3, y3, z3, d1, d2, d3, a, b, c, r) = map(int, input().split())\n    k = x2 - x3\n    l = y2 - y3\n    m = z2 - z3\n    k1 = (x2 - a) * (x2 - a) + (y2 - b) * (y2 - b) + (z2 - c) * (z2 - c) - r * r\n    so = d2 * (y2 - b) + d3 * (z2 - c) + d1 * (x2 - a)\n    lo = k * (x2 - a) + l * (y2 - b) + m * (z2 - c)\n    zz = lo * lo - k1 * (k * k + l * l + m * m)\n    don = d1 * d1 + d2 * d2 + d3 * d3\n    xx = so * so - k1 * don\n    ron = x2 * y2 * z2 * don\n    kon = don * x2\n    tyui = don * don\n    yy = -2 * lo * so + k1 * 2 * (k * d1 + l * d2 + m * d3)\n    pui = ron * xx\n    dfg = xx * yy\n    if xx == 0:\n        print(zz / -yy + 1e-07)\n    else:\n        ans1 = (-yy + sqrt(yy ** 2 - 4 * xx * zz)) / (2 * xx)\n        ans2 = (-yy - sqrt(yy ** 2 - 4 * xx * zz)) / (2 * xx)\n        if ans2 > 0:\n            print(ans2 + 1e-07)\n        else:\n            print(ans1 + 1e-07)", "import math\nTESTS = int(input())\nfor x in range(TESTS):\n    a = input().split(' ')\n    px = float(a[0])\n    py = float(a[1])\n    pz = float(a[2])\n    qx = float(a[3])\n    qy = float(a[4])\n    qz = float(a[5])\n    dx = float(a[6])\n    dy = float(a[7])\n    dz = float(a[8])\n    cx = float(a[9])\n    cy = float(a[10])\n    cz = float(a[11])\n    r = float(a[12])\n    xx = dx * (px - cx) + dy * (py - cy) + dz * (pz - cz)\n    yy = -px * (px - cx) - py * (py - cy) - pz * (pz - cz) + qx * (px - cx) + qy * (py - cy) + qz * (pz - cz)\n    zz = xx * xx\n    aa = 2 * xx * yy\n    bb = yy * yy\n    co = cx * cx + cy * cy + cz * cz + px * px + py * py + pz * pz - 2 * (cx * px + cy * py + cz * pz) - r * r\n    rq2 = co * (dx * dx + dy * dy + dz * dz)\n    rq1 = co * 2 * (dx * (qx - px) + dy * (qy - py) + dz * (qz - pz))\n    rq0 = co * (qx - px) * (qx - px) + co * (qy - py) * (qy - py) + co * (qz - pz) * (qz - pz)\n    q2 = zz - rq2\n    q1 = aa - rq1\n    q0 = bb - rq0\n    yyyy = math.sqrt(1.0 * q1 * q1 - 4 * q2 * q0)\n    if q2 == 0:\n        ans = -q0 / q1\n        print('%.20f' % ans)\n    else:\n        ans1 = (-q1 + math.sqrt(1.0 * q1 * q1 - 4 * q2 * q0)) / (1.0 * 2 * q2)\n        ans2 = (-q1 - math.sqrt(1.0 * q1 * q1 - 4 * q2 * q0)) / (1.0 * 2 * q2)\n        if ans2 * ans1 <= 0:\n            ans = max(ans1, ans2)\n        else:\n            ans = min(ans1, ans2)\n        print('%.20f' % ans)", "from math import sqrt\nt = int(input())\nfor i in range(t):\n    (px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r) = map(int, input().split())\n    c = cx ** 2 + cy ** 2 + cz ** 2 + px ** 2 + py ** 2 + pz ** 2 - 2 * (px * cx + py * cy + pz * cz) - r ** 2\n    g1 = (px - cx) * (qx - px) + (py - cy) * (qy - py) + (pz - cz) * (qz - pz)\n    g2 = (px - cx) * dx + (py - cy) * dy + (pz - cz) * dz\n    g3 = (qx - px) ** 2 + (qy - py) ** 2 + (qz - pz) ** 2\n    g4 = dx ** 2 + dy ** 2 + dz ** 2\n    g5 = (qx - px) * dx + (qy - py) * dy + (qz - pz) * dz\n    a1 = g2 ** 2 - c * g4\n    b1 = 2 * g1 * g2 - 2 * c * g5\n    c1 = g1 ** 2 - c * g3\n    if a1 != 0:\n        temp = sqrt(b1 ** 2 - 4 * a1 * c1)\n        ans1 = (temp - b1) / (2 * a1)\n        ans2 = (-temp - b1) / (2 * a1)\n        if ans2 < 0:\n            print(ans1)\n        else:\n            print(ans2)\n    else:\n        print(-c1 / b1)", "import math\nimport sys\nt = int(input())\nwhile t > 0:\n    (px, py, pz, qx, qy, qz, d1, d2, d3, cx, cy, cz, r) = map(int, input().strip().split())\n    a1 = qx - px\n    a2 = qy - py\n    a3 = qz - pz\n    a = cx - px\n    b = cy - py\n    c = cz - pz\n    k = a1 * a + a2 * b + a3 * c\n    h = a * d1 + b * d2 + c * d3\n    g2 = a * a - r * r + b * b + c * c\n    c1 = (a1 * d1 + a2 * d2 + a3 * d3) * g2 * 2\n    c2 = g2 * (a1 * a1 + a2 * a2 + a3 * a3)\n    a = h * h - g2 * (d1 * d1 + d2 * d2 + d3 * d3)\n    b = 2 * h * k - c1\n    c = k * k - c2\n    if a == 0:\n        x1 = -c / b\n        print(x1)\n        t -= 1\n        continue\n    discriminant = b * b - 4 * a * c\n    x1 = (-b + math.sqrt(discriminant)) / (2 * a)\n    x2 = (-b - math.sqrt(discriminant)) / (2 * a)\n    if x1 > x2:\n        print(x1)\n    else:\n        print(x2)\n    t -= 1", "from math import *\nT = int(input())\nfor t in range(0, T):\n    o = input().split()\n    p1 = int(o[0])\n    p2 = int(o[1])\n    p3 = int(o[2])\n    q1 = int(o[3])\n    q2 = int(o[4])\n    q3 = int(o[5])\n    d1 = int(o[6])\n    d2 = int(o[7])\n    d3 = int(o[8])\n    c1 = int(o[9])\n    c2 = int(o[10])\n    c3 = int(o[11])\n    r = int(o[12])\n    a1 = p1 - c1\n    a2 = p2 - c2\n    a3 = p3 - c3\n    b1 = p1 - q1\n    b2 = p2 - q2\n    b3 = p3 - q3\n    z = r * r\n    l1 = a1 * b2 - a2 * b1\n    l2 = a2 * b3 - a3 * b2\n    l3 = a1 * b3 - a3 * b1\n    k1 = a2 * d1 - a1 * d2\n    k2 = a3 * d2 - a2 * d3\n    k3 = a3 * d1 - a1 * d3\n    A = z * (d1 * d1 + d2 * d2 + d3 * d3) - (k1 * k1 + k2 * k2 + k3 * k3)\n    B = 2 * (z * (b1 * d1 + b2 * d2 + b3 * d3) + l1 * k1 + l2 * k2 + l3 * k3)\n    C = z * (b1 * b1 + b2 * b2 + b3 * b3) - l1 * l1 - l2 * l2 - l3 * l3\n    if A == 0:\n        print(B / C)\n    else:\n        D = sqrt(B * B - 4 * A * C)\n        ans1 = (B + D) / (2 * A)\n        ans2 = (B - D) / (2 * A)\n        if ans1 >= 0:\n            print(ans1)\n        elif ans2 >= 0:\n            print(ans2)", "import math\nT = int(input())\nwhile T > 0:\n    (px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r) = list(map(int, input().split()))\n    X = px - cx\n    Y = py - cy\n    Z = pz - cz\n    x = dx\n    y = dy\n    z = dz\n    alpha = r * r - Z * Z - Y * Y\n    beta = r * r - X * X - Z * Z\n    gamma = r * r - X * X - Y * Y\n    A = 2 * X * Y\n    B = 2 * Y * Z\n    C = 2 * X * Z\n    qx = qx - px\n    qy = qy - py\n    qz = qz - pz\n    a = alpha * x * x + beta * y * y + gamma * z * z + A * x * y + B * y * z + C * x * z\n    b = 2 * alpha * x * qx + 2 * beta * y * qy + 2 * gamma * z * qz + A * (y * qx + x * qy) + B * (z * qy + y * qz) + C * (z * qx + x * qz)\n    k = alpha * qx * qx + beta * qy * qy + gamma * qz * qz + A * qx * qy + B * qy * qz + C * qx * qz\n    discrim = b * b - 4 * a * k\n    ans = 0\n    if a == 0:\n        ans = -1 * k / b\n    else:\n        ans = (-1 * b - math.sqrt(discrim)) / (2 * a)\n        if ans <= 0:\n            ans = (-1 * b + math.sqrt(discrim)) / (2 * a)\n    print('%.6f' % ans)\n    T = T - 1", "for _ in range(int(input())):\n    (x1, y1, z1, x2, y2, z2, d1, d2, d3, c1, c2, c3, r) = map(float, input().split())\n    cc = z2 - z1\n    kk = x1 - c1\n    aa = x2 - x1\n    bb = y2 - y1\n    l = y1 - c2\n    mm = z1 - c3\n    ta1 = (d1 * l - d2 * kk) ** 2 + (d2 * mm - d3 * l) ** 2 + (d3 * kk - d1 * mm) ** 2\n    rr = r ** 2\n    ta2 = rr * d1 * d1 + rr * d2 * d2 + rr * d3 * d3\n    tb1 = 2 * (aa * l - bb * kk) * (d1 * l - d2 * kk) + 2 * (bb * mm - cc * l) * (d2 * mm - d3 * l)\n    tb1 += 2 * (cc * kk - aa * mm) * (d3 * kk - d1 * mm)\n    tb2 = 2 * aa * rr * d1 + 2 * bb * rr * d2 + 2 * cc * rr * d3\n    tc1 = (aa * l - bb * kk) * (aa * l - bb * kk) + (bb * mm - cc * l) * (bb * mm - cc * l) + (cc * kk - aa * mm) * (cc * kk - aa * mm)\n    tc2 = aa * aa * rr + bb * bb * rr + cc * cc * rr\n    fta = ta2 - ta1\n    ftb = tb2 - tb1\n    ftc = tc2 - tc1\n    if fta != 0:\n        ans1 = (-1 * ftb + (ftb ** 2 - 4 * fta * ftc) ** 0.5) / (2 * fta)\n        ans2 = (-1 * ftb - (ftb ** 2 - 4 * fta * ftc) ** 0.5) / (2 * fta)\n        ans3 = 0\n        if ans1 < 0:\n            ans3 = ans2\n        elif ans2 < 0:\n            ans3 = ans1\n        elif ans1 > 0 and ans2 > 0:\n            ans3 = min(ans1, ans2)\n    else:\n        ans3 = -ftc / ftb\n    print(ans3)", "from math import *\n\ndef sq(n):\n    return n * n\nt = int(input())\nwhile t:\n    mp = input().split()\n    px = int(mp[0])\n    py = int(mp[1])\n    pz = int(mp[2])\n    qx = int(mp[3])\n    qy = int(mp[4])\n    qz = int(mp[5])\n    dx = int(mp[6])\n    dy = int(mp[7])\n    dz = int(mp[8])\n    cx = int(mp[9])\n    cy = int(mp[10])\n    cz = int(mp[11])\n    r = int(mp[12])\n    x2 = px\n    y2 = py\n    z2 = pz\n    x0 = qx\n    y0 = qy\n    z0 = qz\n    a11 = x2 - x0\n    a22 = y2 - y0\n    a33 = z2 - z0\n    b11 = -dx\n    b22 = -dy\n    b33 = -dz\n    x = x2 - cx\n    y = y2 - cy\n    z = z2 - cz\n    A = y * z2 - z * y2\n    B = z * x2 - x * z2\n    C = x * y2 - y * x2\n    a1 = A - y * z0 + z * y0\n    a2 = B - z * x0 + x * z0\n    a3 = C - x * y0 + y * x0\n    b1 = z * dy - y * dz\n    b2 = x * dz - z * dx\n    b3 = y * dx - x * dy\n    a = sq(b11) * sq(r) - sq(b1) + sq(b22) * sq(r) - sq(b2) + sq(b33) * sq(r) - sq(b3)\n    b = 2 * (a11 * b11 * sq(r) - a1 * b1) + 2 * (a22 * b22 * sq(r) - a2 * b2) + 2 * (a33 * b33 * sq(r) - a3 * b3)\n    c = sq(a11) * sq(r) - sq(a1) + sq(a22) * sq(r) - sq(a2) + sq(a33) * sq(r) - sq(a3)\n    if a == 0:\n        print(-c / b)\n        t -= 1\n        continue\n    t1 = (-b + sqrt(b * b - 4 * a * c)) / 2 / a\n    t2 = (-b - sqrt(b * b - 4 * a * c)) / 2 / a\n    if t1 >= 0.0 and t2 >= 0.0:\n        print(min(t1, t2))\n    elif t1 >= 0.0:\n        print(t1)\n    elif t2 >= 0.0:\n        print(t2)\n    t -= 1", "def StringListToNumList(L):\n    for i in range(0, len(L), 1):\n        L[i] = int(L[i])\n    return L\n\ndef DotProduct(Ax, Ay, Az, Bx, By, Bz):\n    Answer = Ax * Bx + Ay * By + Az * Bz\n    return Answer\nT = int(input(''))\nfor k in range(0, T, 1):\n    Input = input('')\n    Input = Input.split(' ')\n    Px = int(Input[0])\n    Py = int(Input[1])\n    Pz = int(Input[2])\n    Qx = int(Input[3])\n    Qy = int(Input[4])\n    Qz = int(Input[5])\n    dx = int(Input[6])\n    dy = int(Input[7])\n    dz = int(Input[8])\n    cx = int(Input[9])\n    cy = int(Input[10])\n    cz = int(Input[11])\n    r = int(Input[12])\n    Ax = Qx - Px\n    Ay = Qy - Py\n    Az = Qz - Pz\n    Axy = Ax * Ay\n    Ayz = Ay * Az\n    Azx = Az * Ax\n    Kx = Px - cx\n    Ky = Py - cy\n    Kz = Pz - cz\n    Kxy = Kx * Ky\n    Kyz = Ky * Kz\n    Kzx = Kz * Kx\n    A1 = Ky ** 2 + Kz ** 2 - r ** 2\n    A2 = Kx ** 2 + Kz ** 2 - r ** 2\n    A3 = Kx ** 2 + Ky ** 2 - r ** 2\n    dxy = dx * dy\n    dyz = dy * dz\n    dzx = dz * dx\n    AA = A1 * dx ** 2 + A2 * dy ** 2 + A3 * dz ** 2\n    BB = Ax * A1 * dx + Ay * A2 * dy + Az * A3 * dz\n    CC = A1 * Ax ** 2 + A2 * Ay ** 2 + A3 * Az ** 2\n    X = 2 * DotProduct(Kxy, Kyz, Kzx, dxy, dyz, dzx) - AA\n    Y = 2 * (Kxy * (Ax * dy + Ay * dx) + Kyz * (Ay * dz + Az * dy) + Kzx * (Az * dx + Ax * dz) - BB)\n    Z = 2 * DotProduct(Kxy, Kyz, Kzx, Axy, Ayz, Azx) - CC\n    if X == 0:\n        print(Z * -1 / Y)\n    else:\n        Answer1 = (-1 * Y + (Y ** 2 - 4 * X * Z) ** 0.5) / (2 * X)\n        if Answer1 >= 0:\n            print(Answer1)\n        else:\n            Answer2 = (-1 * Y - (Y ** 2 - 4 * X * Z) ** 0.5) / (2 * X)\n            print(Answer2)", "import math\nt = int(input())\nfor _ in range(t):\n    l = list(map(int, input().split()))\n    (p1, p2, p3) = (l[0], l[1], l[2])\n    (q1, q2, q3) = (l[3], l[4], l[5])\n    (d1, d2, d3) = (l[6], l[7], l[8])\n    (c1, c2, c3, r) = (l[9], l[10], l[11], l[12])\n    lam1 = (q1 - p1) ** 2 + (q2 - p2) ** 2 + (q3 - p3) ** 2\n    lam2 = d1 ** 2 + d2 ** 2 + d3 ** 2\n    lam3 = 2 * ((q1 - p1) * d1 + (q2 - p2) * d2 + (q3 - p3) * d3)\n    nu1 = (q1 - c1) ** 2 + (q2 - c2) ** 2 + (q3 - c3) ** 2\n    nu2 = 2 * ((q1 - c1) * d1 + (q2 - c2) * d2 + (q3 - c3) * d3)\n    cons = math.sqrt((p1 - c1) ** 2 + (p2 - c2) ** 2 + (p3 - c3) ** 2 - r ** 2)\n    alph = -1 * (lam1 - nu1 + r ** 2 - cons ** 2)\n    bet = -1 * (lam3 - nu2)\n    A = -1 * (bet ** 2 - 4 * cons ** 2 * lam2)\n    B = -1 * (2 * alph * bet - 4 * cons ** 2 * nu2)\n    C = -1 * (alph ** 2 - 4 * cons ** 2 * nu1 + 4 * cons ** 2 * r ** 2)\n    if A == 0:\n        t = -B / C\n        print(t)\n        break\n    D = math.sqrt(B ** 2 - 4 * A * C)\n    t1 = (-1 * B - D) / (2 * A)\n    t2 = (-1 * B + D) / (2 * A)\n    if t1 > 0 and t2 < 0:\n        print(t1)\n    elif t1 < 0 and t2 > 0:\n        print(t2)\n    else:\n        print(min(t1, t2))", "import math\nP = [3, 0, 0]\nQ = [-10, -10, 0]\nD = [0, 10, 0]\nC = [0, -3, 0]\nr = 3.0\n\ndef cross(A, B):\n    c = [A[1] * B[2] - B[1] * A[2], A[2] * B[0] - B[2] * A[0], A[0] * B[1] - B[0] * A[1]]\n    return c\n\ndef dot(A, B):\n    c = A[1] * B[1] + A[2] * B[2] + B[0] * A[0]\n    return c\n\ndef diff(A, B):\n    c = [A[0] - B[0], A[1] - B[1], A[2] - B[2]]\n    return c\n\ndef scale(A, f):\n    c = [f * A[0], f * A[1], f * A[2]]\n    return c\n\ndef add(A, B):\n    return [A[0] + B[0], A[1] + B[1], A[2] + B[2]]\n\ndef mod(A):\n    return math.sqrt(A[0] * A[0] + A[1] * A[1] + A[2] * A[2])\n\ndef mod2(A):\n    return A[0] * A[0] + A[1] * A[1] + A[2] * A[2]\n\ndef dist(A, fromB, fromC):\n    ab = diff(A, fromB)\n    ac = diff(A, fromC)\n    bc = diff(fromB, fromC)\n    nu = mod(cross(ab, ac))\n    de = mod(bc)\n    return nu / de\n\ndef dist(A, B):\n    ab = diff(A, B)\n    return mod(ab)\n\ndef mul(A, M):\n    return [A[0] * M[0][0] + A[1] * M[1][0] + A[2] * M[2][0], A[0] * M[0][1] + A[1] * M[1][1] + A[2] * M[2][1], A[0] * M[0][2] + A[1] * M[1][2] + A[2] * M[2][2]]\n\ndef matmul(A, M):\n    return [mul(A[0], M), mul(A[1], M), mul(A[2], M)]\n\ndef tr(M):\n    return [[M[0][0], M[1][0], M[2][0]], [M[0][1], M[1][1], M[2][1]], [M[0][2], M[1][2], M[2][2]]]\n\ndef Res():\n    global P, Q, D, C, r\n    pc = diff(C, P)\n    pq = diff(Q, P)\n    p2 = mod2(pc)\n    r2 = r * r\n    delta = p2 - r2\n    m = dot(pq, pc)\n    n = dot(D, pc)\n    k = mod2(pq)\n    l = mod2(D)\n    i = 2 * dot(pq, D)\n    a = n * n - delta * l\n    b = 2 * m * n - delta * i\n    c = m * m - delta * k\n    if a == 0:\n        return -b / c\n    d = b * b - 4 * a * c\n    if d < 0:\n        return 0\n    d = math.sqrt(d)\n    t1 = (-b + d) / (2 * a)\n    t2 = (-b - d) / (2 * a)\n    r1 = min(t1, t2)\n    r2 = max(t1, t2)\n    if r2 < 0:\n        return 0\n    if r1 < 0:\n        return r2\n    return r1\n\ndef Resxy():\n    global P, Q, D, C, r\n    PC = diff(C, P)\n    pc = mod(PC)\n    sn = r / pc\n    cs = math.sqrt(1 - sn * sn)\n    Rot = [[cs, -sn, 0], [sn, cs, 0], [0, 0, 1]]\n    pro = mul(PC, Rot)\n    PQ = diff(Q, P)\n    t = (pro[1] * PQ[0] - pro[0] * PQ[1]) / (pro[0] * D[1] - D[0] * pro[1])\n    Rot2 = [[cs, sn, 0], [-sn, cs, 0], [0, 0, 1]]\n    pro2 = mul(PC, Rot2)\n    t2 = (pro2[1] * PQ[0] - pro2[0] * PQ[1]) / (pro2[0] * D[1] - D[0] * pro2[1])\n    r1 = min(t, t2)\n    r2 = max(t, t2)\n    if r2 < 0:\n        return 0\n    if r1 < 0:\n        return r2\n    return max(r1, 0)\n\ndef main():\n    global P, Q, D, C, r\n    t = int(input())\n    while t > 0:\n        L = [int(i) for i in input().split(' ')]\n        P = [L[0], L[1], L[2]]\n        Q = [L[3], L[4], L[5]]\n        D = [L[6], L[7], L[8]]\n        C = [L[9], L[10], L[11]]\n        r = L[12]\n        print(Res())\n        t -= 1\nmain()", "import math\ntests = int(input())\n\ndef roots(x1, y1, z1, x2, y2, z2, dx, dy, dz, x3, y3, z3, r):\n    mx = x2 - x1\n    my = y2 - y1\n    mz = z2 - z1\n    nx = x1 - x3\n    ny = y1 - y3\n    nz = z1 - z3\n    K = x3 ** 2 + y3 ** 2 + z3 ** 2 + x1 ** 2 + y1 ** 2 + z1 ** 2 - 2 * (x3 * x1 + y3 * y1 + z3 * z1) - r ** 2\n    A = dx * dx * (nx * nx - K) + dy * dy * (ny * ny - K) + dz * dz * (nz * nz - K) + 2 * nx * ny * dx * dy + 2 * ny * nz * dy * dz + 2 * nz * nx * dz * dx\n    B = (nx * nx - K) * (2 * mx * dx) + (ny * ny - K) * (2 * my * dy) + (nz * nz - K) * (2 * mz * dz) + 2 * (nx * ny * my * dx + nx * ny * mx * dy + ny * nz * mz * dy + ny * nz * my * dz + nz * nx * mz * dx + nz * nx * mx * dz)\n    C = nx * nx * mx * mx + ny * ny * my * my + nz * nz * mz * mz + 2 * nx * ny * mx * my + 2 * ny * nz * my * mz + 2 * nz * nx * mz * mx - K * mx * mx - K * my * my - K * mz * mz\n    d = B * B - 4 * A * C\n    if A != 0:\n        sol1 = (-B - math.sqrt(d)) / (2 * A)\n        sol2 = (-B + math.sqrt(d)) / (2 * A)\n        if sol1 > 0 and sol2 > 0:\n            return min(sol1, sol2)\n        elif sol1 >= 0:\n            return sol1\n        elif sol2 >= 0:\n            return sol2\n    elif A == 0:\n        return -C / B\nfor tester in range(tests):\n    arr = input().split()\n    (p1, p2, p3, q1, q2, q3, d1, d2, d3, c1, c2, c3, r) = (int(x) for x in arr)\n    ans = roots(p1, p2, p3, q1, q2, q3, d1, d2, d3, c1, c2, c3, r)\n    print('%.6f' % ans)", "from decimal import *\ntests = int(input())\n\ndef roots(x1, y1, z1, x2, y2, z2, dx, dy, dz, x3, y3, z3, r):\n    mx = x2 - x1\n    my = y2 - y1\n    mz = z2 - z1\n    nx = x1 - x3\n    ny = y1 - y3\n    nz = z1 - z3\n    K = Decimal(x3 ** 2 + y3 ** 2 + z3 ** 2 + x1 ** 2 + y1 ** 2 + z1 ** 2 - 2 * (x3 * x1 + y3 * y1 + z3 * z1) - r ** 2)\n    A = Decimal(dx * dx * (nx * nx - K) + dy * dy * (ny * ny - K) + dz * dz * (nz * nz - K) + 2 * nx * ny * dx * dy + 2 * ny * nz * dy * dz + 2 * nz * nx * dz * dx)\n    B = Decimal((nx * nx - K) * (2 * mx * dx) + (ny * ny - K) * (2 * my * dy) + (nz * nz - K) * (2 * mz * dz) + 2 * (nx * ny * my * dx + nx * ny * mx * dy + ny * nz * mz * dy + ny * nz * my * dz + nz * nx * mz * dx + nz * nx * mx * dz))\n    C = Decimal(nx * nx * mx * mx + ny * ny * my * my + nz * nz * mz * mz + 2 * nx * ny * mx * my + 2 * ny * nz * my * mz + 2 * nz * nx * mz * mx - K * mx * mx - K * my * my - K * mz * mz)\n    d = Decimal(B * B - 4 * A * C)\n    if d >= 0:\n        if A != 0:\n            sol1 = (-B - d.sqrt()) / (2 * A)\n            sol2 = (-B + d.sqrt()) / (2 * A)\n            if sol1 > 0 and sol2 > 0:\n                return min(sol1, sol2)\n            elif sol1 >= 0:\n                return sol1\n            elif sol2 >= 0:\n                return sol2\n        elif A == 0 and B != 0:\n            return -C / B\n        else:\n            return 0\n    else:\n        return 0\nfor tester in range(tests):\n    arr = input().split()\n    (p1, p2, p3, q1, q2, q3, d1, d2, d3, c1, c2, c3, r) = (int(x) for x in arr)\n    print(roots(p1, p2, p3, q1, q2, q3, d1, d2, d3, c1, c2, c3, r))", "import math\nt = int(input())\nwhile t > 0:\n    (px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r) = list(map(int, input().split()))\n    x = cx - px\n    y = cy - py\n    z = cz - pz\n    lm = x ** 2 + y ** 2 + z ** 2 - r ** 2\n    xx = qx - px\n    yy = qy - py\n    zz = qz - pz\n    dxyz = dx * x + dy * y + dz * z\n    xyz = xx * x + yy * y + zz * z\n    A = (dx ** 2 + dy ** 2 + dz ** 2) * lm - dxyz ** 2\n    B = 2 * ((dx * xx + dy * yy + dz * zz) * lm - dxyz * xyz)\n    C = (xx ** 2 + yy ** 2 + zz ** 2) * lm - xyz ** 2\n    if A == 0:\n        ans = -C / B\n    else:\n        ans1 = -B / (2 * A) + math.sqrt(B ** 2 - 4 * A * C) / (2 * A)\n        ans2 = -B / (2 * A) - math.sqrt(B ** 2 - 4 * A * C) / (2 * A)\n        if ans1 < 0:\n            ans = ans2\n        elif ans2 < 0:\n            ans = ans1\n        elif ans1 > 0 and ans2 > 0:\n            ans = min(ans1, ans2)\n        else:\n            ans = -1\n    print('{:.12f}'.format(ans))\n    t = t - 1", "import math\nfor t in range(int(input())):\n    r = 0\n    inp = [int(i) for i in input().split()]\n    c = inp[9:12]\n    p = inp[0:3]\n    q = inp[3:6]\n    d = inp[6:9]\n    r = inp[12]\n    A = B = D = E = F = S = 0\n    for i in range(3):\n        D += d[i] * d[i]\n        E += 2 * (d[i] * (q[i] - p[i]))\n        F += (q[i] - p[i]) ** 2\n        A += d[i] * (c[i] - p[i])\n        B += (q[i] - p[i]) * (c[i] - p[i])\n        S += (c[i] - p[i]) ** 2\n    S -= r ** 2\n    FA = A ** 2 - D * S\n    FB = 2 * A * B - E * S\n    FC = B ** 2 - F * S\n    if FA == 0:\n        print(-FC / FB)\n    else:\n        dlt = (FB ** 2 - 4 * FA * FC) ** (1 / 2)\n        t = max((-FB - dlt) / (2 * FA), (-FB + dlt) / (2 * FA))\n        print(t)", "t = int(input())\nfor c in range(t):\n    (p, q, r, x, y, z, f, g, h, c, d, e, R) = input().split()\n    p = int(p)\n    q = int(q)\n    r = int(r)\n    x = int(x)\n    y = int(y)\n    z = int(z)\n    f = int(f)\n    g = int(g)\n    h = int(h)\n    c = int(c)\n    d = int(d)\n    e = int(e)\n    R = int(R)\n    a1 = e * y - d * z + d * r + q * z - r * y - e * q\n    b1 = e * g - d * h + q * h - r * g\n    a2 = c * z - e * x + e * p - p * z + r * x - c * r\n    b2 = c * h - e * f - p * h + r * f\n    a3 = c * q - p * d + p * y + d * x - q * x - c * y\n    b3 = p * g + d * f - q * f - c * g\n    lhc = R * R * ((x - p) * (x - p) + (y - q) * (y - q) + (z - r) * (z - r))\n    lhs = R * R * (f * f + g * g + h * h)\n    lhl = R * R * 2 * ((x - p) * f + (y - q) * g + (z - r) * h)\n    rhc = a1 * a1 + a2 * a2 + a3 * a3\n    rhs = b1 * b1 + b2 * b2 + b3 * b3\n    rhl = 2 * (a1 * b1 + a2 * b2 + a3 * b3)\n    fs = lhs - rhs\n    fl = lhl - rhl\n    fc = lhc - rhc\n    if fs == 0:\n        t1 = -1 * fc / fl\n        print(t1)\n    elif fl * fl - 4 * fs * fc == 0:\n        t1 = -1 * fl / (2 * fs)\n        print(t1)\n    else:\n        D = (fl * fl - 4 * fs * fc) ** 0.5\n        t1 = (-1 * fl + D) / (2 * fs)\n        t2 = (-1 * fl - D) / (2 * fs)\n        if t1 > 0:\n            print(t1)\n        if t2 > 0:\n            print(t2)", "import math\nT = int(input())\nfor i in range(T):\n    L = list(map(int, input().split()))\n    (Px, Py, Pz, Qx, Qy, Qz, dx, dy, dz, cx, cy, cz, r) = (L[0], L[1], L[2], L[3], L[4], L[5], L[6], L[7], L[8], L[9], L[10], L[11], L[12])\n    qpx = Qx - Px\n    qpy = Qy - Py\n    qpz = Qz - Pz\n    pcx = Px - cx\n    pcy = Py - cy\n    pcz = Pz - cz\n    m = (Px - cx) * (Px - cx) + (Py - cy) * (Py - cy) + (Pz - cz) * (Pz - cz)\n    mx = m - r * r - pcx * pcx\n    my = m - r * r - pcy * pcy\n    mz = m - r * r - pcz * pcz\n    a = mx * dx * dx + my * dy * dy + mz * dz * dz - 2 * pcx * pcy * dx * dy - 2 * pcy * pcz * dy * dz - 2 * pcx * pcz * dx * dz\n    b = 2 * mx * qpx * dx + 2 * my * qpy * dy + 2 * mz * qpz * dz - 2 * pcx * pcy * (qpx * dy + qpy * dx) - 2 * pcy * pcz * (qpy * dz + qpz * dy) - 2 * pcx * pcz * (qpz * dx + qpx * dz)\n    c = mx * qpx * qpx + my * qpy * qpy + mz * qpz * qpz\n    c = c - 2 * pcx * pcy * qpx * qpy\n    c = c - 2 * pcy * pcz * qpy * qpz\n    c = c - 2 * pcz * pcx * qpz * qpx\n    if a != 0:\n        det = b * b - 4 * a * c\n        det = math.sqrt(det)\n        det1 = (det - b) / (2 * a)\n        det2 = -1 * (b + det) / (2 * a)\n        if det1 > det2:\n            det = det1\n        else:\n            det = det2\n        print(det)\n    else:\n        det = -1 * (c / b)\n        print(det)", "x = int(input())\nfor i in range(x):\n    arr = list(map(int, input().split()))\n    px = arr[0]\n    py = arr[1]\n    pz = arr[2]\n    qx = arr[3] - arr[0]\n    qy = arr[4] - arr[1]\n    qz = arr[5] - arr[2]\n    dx = arr[6]\n    dy = arr[7]\n    dz = arr[8]\n    cx = arr[9]\n    cy = arr[10]\n    cz = arr[11]\n    r = arr[12]\n    x_ = r ** 2 + (px - cx) ** 2 - ((px - cx) * (px - cx) + (py - cy) * (py - cy) + (pz - cz) * (pz - cz))\n    y_ = r ** 2 + (py - cy) ** 2 - ((px - cx) * (px - cx) + (py - cy) * (py - cy) + (pz - cz) * (pz - cz))\n    z_ = r ** 2 + (pz - cz) ** 2 - ((px - cx) * (px - cx) + (py - cy) * (py - cy) + (pz - cz) * (pz - cz))\n    a1 = x_ * dx * dx + y_ * dy * dy + z_ * dz * dz\n    a2 = 2 * ((px - cx) * (py - cy) * dx * dy + (pz - cz) * (py - cy) * dz * dy + (px - cx) * (pz - cz) * dx * dz)\n    B = 2 * (x_ * qx * dx + y_ * qy * dy + z_ * qz * dz + (px - cx) * (py - cy) * qx * dy + (px - cx) * (py - cy) * qy * dx + (px - cx) * (pz - cz) * qx * dz + (px - cx) * (pz - cz) * qz * dx + (pz - cz) * (py - cy) * qz * dy + (pz - cz) * (py - cy) * qy * dz)\n    c1 = x_ * qx * qx + y_ * qy * qy + z_ * qz * qz\n    c2 = 2 * (px - cx) * (py - cy) * qx * qy + 2 * (px - cx) * (pz - cz) * qx * qz + 2 * (pz - cz) * (py - cy) * qz * qy\n    if a1 + a2 == 0:\n        print(-(c1 + c2) / B)\n    else:\n        ans1 = (-B + (B ** 2 - 4 * (a1 + a2) * (c1 + c2)) ** 0.5) / (2 * (a1 + a2))\n        ans2 = (-B - (B ** 2 - 4 * (a1 + a2) * (c1 + c2)) ** 0.5) / (2 * (a1 + a2))\n        if ans1 >= 0 and ans2 >= 0:\n            if ans1 > ans2:\n                print(ans1)\n            else:\n                print(ans2)\n        elif ans2 >= 0:\n            print(ans2)\n        else:\n            print(ans1)", "import math\nfor _ in range(int(input())):\n    l = [int(i) for i in input().split()]\n    (use1, use2, use3, use4, use5, use6) = (0, 0, -l[12] * l[12], 0, 0, 0)\n    for i in range(3):\n        use1 = use1 + (l[i] - l[i + 3]) * (l[i] - l[i + 9])\n        use2 = use2 + (l[i] - l[i + 9]) * l[i + 6]\n        use3 = use3 + (l[i] - l[i + 9]) * (l[i] - l[i + 9])\n        use4 = use4 + l[i + 6] * l[i + 6]\n        use5 = use5 + (l[i + 3] - l[i]) * l[i + 6]\n        use6 = use6 + (l[i + 3] - l[i]) * (l[i + 3] - l[i])\n    a = 4 * use2 * use2 - 4 * use3 * use4\n    b = 8 * use1 * use2 + 8 * use3 * use5\n    c = 4 * use1 * use1 - 4 * use3 * use6\n    desc = math.sqrt(b * b - 4 * a * c)\n    if a == 0:\n        k = c / b\n        print('%.10f' % k)\n    else:\n        sol1 = (b + desc) / (2 * a)\n        sol2 = (b - desc) / (2 * a)\n        if sol1 > 0 and sol2 > 0:\n            k = min(sol1, sol2)\n            print('%.10f' % k)\n        elif sol2 <= 0:\n            print('%.10f' % sol1)\n        elif sol1 <= 0:\n            print('%.10f' % sol2)", "T = int(input())\nall = []\nfor i in range(0, T):\n    all = [int(i) for i in input().split()]\n    if (all[2] == 0 and all[5] == 0) and (all[8] == 0 and all[11] == 0):\n        list1 = []\n        list1.append(all[9] ** 2 + all[0] ** 2 - all[12] ** 2 - 2 * all[9] * all[0])\n        list1.append(2 * (all[9] * all[1] + all[0] * all[10] - (all[9] * all[10] + all[0] * all[1])))\n        list1.append(all[10] ** 2 + all[1] ** 2 - 2 * all[1] * all[10] - all[12] ** 2)\n        x = all[0] - all[3]\n        y = all[1] - all[4]\n        a = list1[0] * (all[7] * all[7]) + list1[1] * all[6] * all[7] + list1[2] * (all[6] * all[6])\n        b = 2 * list1[0] * y * all[7] + y * all[6] * list1[1] + list1[1] * x * all[7] + 2 * x * list1[2] * all[6]\n        c = list1[0] * y ** 2 + list1[1] * x * y + list1[2] * x ** 2\n        if a == 0 and (c != 0 and b != 0):\n            print(c / b)\n        elif b == 0:\n            if c > 0 and a < 0 or (a > 0 and c < 0):\n                print((c / a) ** 0.5)\n        else:\n            diff = b ** 2 - 4 * a * c\n            if diff > 0:\n                root1 = (b + diff ** 0.5) / (2 * a)\n                root2 = (b - diff ** 0.5) / (2 * a)\n                if root1 > 0 and root2 > 0:\n                    print(min(root1, root2))\n                elif root1 > 0 and root2 < 0:\n                    print(root1)\n                elif root1 < 0 and root2 > 0:\n                    print(root2)\n            elif d == 0:\n                root1 = (b + diff ** 0.5) / (2 * a)\n                print(root1)\n    else:\n        P = []\n        Q = []\n        D = []\n        C = []\n        P.append(all[0])\n        P.append(all[1])\n        P.append(all[2])\n        Q.append(all[3])\n        Q.append(all[4])\n        Q.append(all[5])\n        D.append(all[6])\n        D.append(all[7])\n        D.append(all[8])\n        C.append(all[9])\n        C.append(all[10])\n        C.append(all[11])\n        C.append(all[12])\n        side = (P[0] - C[0]) * (P[0] - C[0]) + (P[1] - C[1]) * (P[1] - C[1]) + (P[2] - C[2]) * (P[2] - C[2]) - C[3] * C[3]\n        m = P[0] * P[0] + P[1] * P[1] + P[2] * P[2] - C[0] * C[0] - C[1] * C[1] - C[2] * C[2] + C[3] * C[3] - side - 2 * P[0] * Q[0] - 2 * P[1] * Q[1] - 2 * P[2] * Q[2] + 2 * C[0] * Q[0] + 2 * C[1] * Q[1] + 2 * C[2] * Q[2]\n        n = 2 * C[0] * D[0] + 2 * C[1] * D[1] + 2 * C[2] * D[2] - 2 * P[0] * D[0] - 2 * P[1] * D[1] - 2 * P[2] * D[2]\n        a = n * n - 4 * side * (D[0] * D[0] + D[1] * D[1] + D[2] * D[2])\n        b = 2 * (-m * n + 4 * side * (D[0] * (Q[0] - C[0]) + D[1] * (Q[1] - C[1]) + D[2] * (Q[2] - C[2])))\n        c = m * m + 4 * side * C[3] * C[3] - 4 * side * ((Q[0] - C[0]) * (Q[0] - C[0]) + (Q[1] - C[1]) * (Q[1] - C[1]) + (Q[2] - C[2]) * (Q[2] - C[2]))\n        d = b * b - 4 * a * c\n        if a == 0 and (b != 0 and c != 0):\n            print(c / b)\n        elif b == 0:\n            if c > 0 and a < 0 or (a > 0 and c < 0):\n                print((c / a) ** 0.5)\n        elif d > 0:\n            diff = d ** 0.5\n            root1 = (b + diff) / (2 * a)\n            root2 = (b - diff) / (2 * a)\n            if root1 > 0 and root2 > 0:\n                print(min(root1, root2))\n            elif root1 > 0 and root2 < 0:\n                print(root1)\n            elif root1 < 0 and root2 > 0:\n                print(root2)\n        elif d == 0:\n            root1 = b / (2 * a)\n            print(root1)", "import math\nT = int(input())\nfor t in range(T):\n    (Px, Py, Pz, Qx, Qy, Qz, dx, dy, dz, xo, yo, zo, r) = list(map(float, input().strip().split(' ')))\n    (kpox, kpoy, kpoz) = (Px - xo, Py - yo, Pz - zo)\n    (kpqx, kpqy, kpqz) = (Px - Qx, Py - Qy, Pz - Qz)\n    c1 = kpox ** 2 + kpoy ** 2 + kpoz ** 2 - r ** 2\n    k1 = kpox * kpqx + kpoy * kpqy + kpoz * kpqz\n    k2 = dx * kpox + dy * kpoy + dz * kpoz\n    a1 = k2 ** 2\n    b1 = -2 * k1 * k2\n    a = a1 - (dx ** 2 + dy ** 2 + dz ** 2) * c1\n    b = c1 * 2 * (dx * kpqx + dy * kpqy + dz * kpqz) + b1\n    c = c1 * (-kpqx ** 2 - kpqy ** 2 - kpqz ** 2) + k1 ** 2\n    if a != 0:\n        ans = (-b - (b ** 2 - 4 * a * c) ** (1 / 2)) / (2 * a)\n    else:\n        ans = -c / b\n    print(ans)", "import math\nT = int(input())\nfor t in range(T):\n    (Px, Py, Pz, Qx, Qy, Qz, dx, dy, dz, xo, yo, zo, r) = list(map(float, input().strip().split(' ')))\n    (kpox, kpoy, kpoz) = (Px - xo, Py - yo, Pz - zo)\n    (kpqx, kpqy, kpqz) = (Px - Qx, Py - Qy, Pz - Qz)\n    c = kpox ** 2 + kpoy ** 2 + kpoz ** 2 - r ** 2\n    b2deg = dx * kpox + dy * kpoy + dz * kpoz\n    bconst = kpox * kpqx + kpoy * kpqy + kpoz * kpqz\n    a2deg = dx ** 2 + dy ** 2 + dz ** 2\n    a1deg = -2 * (kpqx * dx + kpqy * dy + kpqz * dz)\n    aconst = kpqx ** 2 + kpqy ** 2 + kpqz ** 2\n    finala = b2deg ** 2 - c * a2deg\n    finalb = -(2 * bconst * b2deg) - c * a1deg\n    finalc = bconst ** 2 - c * aconst\n    if finala != 0:\n        ans = (-finalb - (finalb ** 2 - 4 * finala * finalc) ** (1 / 2)) / (2 * finala)\n    else:\n        ans = -finalc / finalb\n    print(ans)", "import math\n\ndef ret_N_R(px, py, pz, qx, qy, qz, vx, vy, vz, ox, oy, oz):\n    Nx = oy * qz - oz * qy + oz * py - oy * pz\n    Ny = oz * qx - ox * qz + ox * pz - oz * px\n    Nz = ox * qy - oy * qx + oy * px - ox * py\n    Rx = oy * vz - oz * vy\n    Ry = oz * vx - ox * vz\n    Rz = ox * vy - oy * vx\n    return (Nx, Ny, Nz, Rx, Ry, Rz)\n\ndef quad_coeff(px, py, pz, qx, qy, qz, vx, vy, vz, cx, cy, cz, r):\n    ox = px - cx\n    oy = py - cy\n    oz = pz - cz\n    Dx = qx - px\n    Dy = qy - py\n    Dz = qz - pz\n    (Nx, Ny, Nz, Rx, Ry, Rz) = ret_N_R(px, py, pz, qx, qy, qz, vx, vy, vz, ox, oy, oz)\n    a = r * r * (vx * vx + vy * vy + vz * vz) - (Rx * Rx + Ry * Ry + Rz * Rz)\n    b = 2 * (r * r * (Dx * vx + Dy * vy + Dz * vz) - (Nx * Rx + Ny * Ry + Nz * Rz))\n    c = r * r * (Dx * Dx + Dy * Dy + Dz * Dz) - (Nx * Nx + Ny * Ny + Nz * Nz)\n    return (a, b, c)\n\ndef pos_root(a, b, c):\n    det = math.sqrt(b * b - 4 * a * c)\n    if a == 0:\n        soln = 1\n    else:\n        s1 = (-1 * b - det) / (2 * a)\n        s2 = (det - b) / (2 * a)\n        if s1 >= 0:\n            soln = s1\n        elif s2 >= 0:\n            soln = s2\n        else:\n            soln = 0\n    return soln\nT = int(input())\nfor i in range(0, T):\n    (Px, Py, Pz, Qx, Qy, Qz, Vx, Vy, Vz, Cx, Cy, Cz, r) = map(float, input().split())\n    (a, b, c) = quad_coeff(Px, Py, Pz, Qx, Qy, Qz, Vx, Vy, Vz, Cx, Cy, Cz, r)\n    tm = pos_root(a, b, c)\n    print(tm)", "t = int(input())\nfor i in range(t):\n    lis = input()\n    arr = list(map(int, lis.split(' ')))\n    x1 = arr[0]\n    y1 = arr[1]\n    z1 = arr[2]\n    x0 = arr[3]\n    y0 = arr[4]\n    z0 = arr[5]\n    d1 = arr[6]\n    d2 = arr[7]\n    d3 = arr[8]\n    x3 = arr[9]\n    y3 = arr[10]\n    z3 = arr[11]\n    r = arr[12]\n    k = (x0 - x1) * (x1 - x3) + (y0 - y1) * (y1 - y3) + (z0 - z1) * (z1 - z3)\n    k1 = d1 * (x1 - x3) + d2 * (y1 - y3) + d3 * (z1 - z3)\n    k2 = x3 * x3 + y3 * y3 + z3 * z3 + x1 * x1 + y1 * y1 + z1 * z1 - 2 * (x1 * x3 + y1 * y3 + z1 * z3) - r * r\n    k3 = (x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1) + (z0 - z1) * (z0 - z1)\n    k4 = d1 * d1 + d2 * d2 + d3 * d3\n    k5 = d1 * (x0 - x1) + d2 * (y0 - y1) + d3 * (z0 - z1)\n    a = k1 * k1 - k2 * k4\n    b = 2 * (k * k1 - k2 * k5)\n    c = k * k - k2 * k3\n    if a != 0:\n        t1 = float((-b + (b * b - 4 * a * c) ** 0.5) / (2 * a))\n        t2 = float((-b - (b * b - 4 * a * c) ** 0.5) / (2 * a))\n        if t1 > 0 and t2 > 0:\n            ans = float(min(t1, t2))\n            print('%.9f' % ans)\n        elif t1 > 0:\n            print('%.9f' % t1)\n        else:\n            print('%.9f' % t2)\n    else:\n        t = float(-c / b)\n        print('%.9f' % t)", "from math import *\nt = input()\nt = int(t)\nwhile t > 0:\n    from sys import stdin, stdout\n    (px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r) = [int(x) for x in stdin.readline().rstrip().split()]\n    x1 = cx - px\n    y1 = cy - py\n    z1 = cz - pz\n    x2 = cx - qx\n    y2 = cy - qy\n    z2 = cz - qz\n    x3 = qx - px\n    y3 = qy - py\n    z3 = qz - pz\n    a = y1 * z2 - y2 * z1\n    b = x2 * z1 - x1 * z2\n    c = x1 * y2 - x2 * y1\n    aa = z1 * dy - y1 * dz\n    bb = x1 * dz - z1 * dx\n    cc = y1 * dx - dy * x1\n    c1 = aa * aa + bb * bb + cc * cc - r * r * dx * dx - r * r * dy * dy - r * r * dz * dz\n    c2 = 2 * a * aa + 2 * b * bb + 2 * c * cc - 2 * r * r * x3 * dx - 2 * r * r * y3 * dy - 2 * r * r * z3 * dz\n    c3 = a * a + b * b + c * c - r * r * x3 * x3 - r * r * y3 * y3 - r * r * z3 * z3\n    if c1 == 0:\n        ans = -1.0 * c3 / c2\n    elif c2 == 0:\n        ans = -1.0 * c3 / c1\n        ans = sqrt(ans)\n    else:\n        dis = 1.0 * c2 * c2 - 4 * c1 * c3\n        dis = sqrt(dis)\n        ans1 = -1.0 * c2 + dis\n        ans2 = -1.0 * c2 - dis\n        ans1 = ans1 / (2 * c1)\n        ans2 = ans2 / (2 * c1)\n        if ans1 < ans2 and ans1 >= 0:\n            ans = ans1\n        elif ans2 < ans1 and ans2 >= 0:\n            ans = ans2\n        elif ans1 < ans2 and ans1 < 0:\n            ans = ans2\n        elif ans2 < ans1 and ans2 < 0:\n            ans = ans1\n        elif ans1 == ans2:\n            ans = ans1\n    print('{0:.16f}'.format(ans))\n    t = t - 1", "def dot(a, b):\n    r = a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n    return r\nx = int(input())\nfor _ in range(x):\n    (x1, y1, z1, x2, y2, z2, d1, d2, d3, c1, c2, c3, r) = map(float, input().split())\n    a = x2 - x1\n    b = y2 - y1\n    c = z2 - z1\n    k = x1 - c1\n    l = y1 - c2\n    m = z1 - c3\n    term1 = r ** 2 * d1 ** 2 + r ** 2 * d2 ** 2 + r ** 2 * d3 ** 2\n    term2 = (d1 * l - d2 * k) ** 2 + (d2 * m - d3 * l) ** 2 + (d3 * k - d1 * m) ** 2\n    A = term1 - term2\n    term11 = 2 * r ** 2 * (a * d1 + b * d2 + c * d3)\n    term22 = 2 * ((a * l - b * k) * (d1 * l - d2 * k) + (b * m - c * l) * (d2 * m - d3 * l) + (c * k - a * m) * (d3 * k - d1 * m))\n    B = term11 - term22\n    ter1 = r ** 2 * (a ** 2 + b ** 2 + c ** 2)\n    ter2 = (a * l - b * k) ** 2 + (b * m - c * l) ** 2 + (c * k - a * m) ** 2\n    C = ter1 - ter2\n    if A == 0:\n        t = -1 * C / B\n        print(t)\n    else:\n        t1 = (-1 * B + (B ** 2 - 4 * A * C) ** 0.5) / (2 * A)\n        t2 = (-1 * B - (B ** 2 - 4 * A * C) ** 0.5) / (2 * A)\n        t = 0\n        if t1 < 0:\n            t = t2\n        elif t2 < 0:\n            t = t1\n        elif t1 >= 0 and t2 >= 0:\n            t = min(t1, t2)\n        print(t)", "def dot(a, b):\n    r = a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n    return r\nfor _ in range(int(input())):\n    (x1, y1, z1, x2, y2, z2, d1, d2, d3, c1, c2, c3, r) = map(float, input().split())\n    a = x2 - x1\n    b = y2 - y1\n    c = z2 - z1\n    k = x1 - c1\n    l = y1 - c2\n    m = z1 - c3\n    term1 = r ** 2 * d1 ** 2 + r ** 2 * d2 ** 2 + r ** 2 * d3 ** 2\n    term2 = (d1 * l - d2 * k) ** 2 + (d2 * m - d3 * l) ** 2 + (d3 * k - d1 * m) ** 2\n    A = term1 - term2\n    term11 = 2 * r ** 2 * (a * d1 + b * d2 + c * d3)\n    term22 = 2 * ((a * l - b * k) * (d1 * l - d2 * k) + (b * m - c * l) * (d2 * m - d3 * l) + (c * k - a * m) * (d3 * k - d1 * m))\n    B = term11 - term22\n    ter1 = r ** 2 * (a ** 2 + b ** 2 + c ** 2)\n    ter2 = (a * l - b * k) ** 2 + (b * m - c * l) ** 2 + (c * k - a * m) ** 2\n    C = ter1 - ter2\n    if A == 0:\n        t = -1 * C / B\n        print(t)\n        continue\n    else:\n        t1 = (-1 * B + (B ** 2 - 4 * A * C) ** 0.5) / (2 * A)\n        t2 = (-1 * B - (B ** 2 - 4 * A * C) ** 0.5) / (2 * A)\n        t = 0\n        if t1 < 0:\n            t = t2\n        elif t2 < 0:\n            t = t1\n        elif t1 >= 0 and t2 >= 0:\n            t = min(t1, t2)\n        print(t)", "from math import sqrt\nfor i in range(int(input())):\n    (px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r) = map(int, input().split())\n    a = (qx - px) * (cx - px) + (qy - py) * (cy - py) + (qz - pz) * (cz - pz)\n    b = dx * (cx - px) + dy * (cy - py) + dz * (cz - pz)\n    c = (cx - px) * (cx - px) + (cy - py) * (cy - py) + (cz - pz) * (cz - pz) - r * r\n    d = dx * dx + dy * dy + dz * dz\n    e = (qx - px) * (qx - px) + (qy - py) * (qy - py) + (qz - pz) * (qz - pz)\n    f = 2 * (dx * (qx - px) + dy * (qy - py) + dz * (qz - pz))\n    A = b * b - c * d\n    B = 2 * a * b - c * f\n    C = a * a - c * e\n    p = sqrt(B * B - 4 * A * C)\n    if A == 0:\n        ans = -1 * (C / B)\n        print('{0:.10f}'.format(ans))\n    else:\n        ans = (p - B) / (2 * A)\n        ans1 = -1 * ((p + B) / (2 * A))\n        if ans > 0 and ans1 > 0:\n            print('{0:.10f}'.format(min(ans, ans1)))\n        elif ans > 0 and ans1 < 0:\n            print('{0:.10f}'.format(ans))\n        elif ans < 0 and ans1 > 0:\n            print('{0:.10f}'.format(ans1))", "import math\nT = int(input())\nfor t in range(T):\n    s = input().split()\n    p1 = float(s[0])\n    p2 = float(s[1])\n    p3 = float(s[2])\n    q1 = float(s[3])\n    q2 = float(s[4])\n    q3 = float(s[5])\n    d1 = float(s[6])\n    d2 = float(s[7])\n    d3 = float(s[8])\n    c1 = float(s[9])\n    c2 = float(s[10])\n    c3 = float(s[11])\n    r = float(s[12])\n    ai = q2 * p3 - q2 * c3 + p2 * c3 - p2 * q3 + c2 * q3 - c2 * p3\n    bi = d2 * p3 - d2 * c3 - p2 * d3 + c2 * d3\n    aj = -q1 * p3 + c3 * q1 - c3 * p1 + p1 * q3 - c1 * q3 + c1 * p3\n    bj = -p3 * d1 + c3 * d1 + p1 * d3 - c1 * d3\n    ak = p2 * q1 - c2 * q1 + c2 * p1 - p1 * q2 + c1 * q2 - c1 * p2\n    bk = p2 * d1 - c2 * d1 - p1 * d2 + c1 * d2\n    flag1 = 0\n    snk1 = ai * ai + aj * aj + ak * ak\n    snk2 = bi * bi + bj * bj + bk * bk\n    snk3 = 2 * ai * bi + 2 * aj * bj + 2 * ak * bk\n    ci = q1 - p1\n    cj = q2 - p2\n    ck = q3 - p3\n    aa1 = ci * ci + cj * cj + ck * ck\n    aa2 = d1 * d1 + d2 * d2 + d3 * d3\n    aa3 = 2 * ci * d1 + 2 * cj * d2 + 2 * ck * d3\n    flag2 = 0\n    c1 = snk2 - r * r * aa2\n    c2 = snk3 - r * r * aa3\n    c3 = snk1 - r * r * aa1\n    if c1 != 0:\n        flag1 = 1\n        ans1 = (-c2 + math.sqrt(c2 * c2 - 4 * c1 * c3)) / (2 * c1)\n        ans2 = (-c2 - math.sqrt(c2 * c2 - 4 * c1 * c3)) / (2 * c1)\n        if ans1 > 0 and ans2 > 0:\n            if ans1 < ans2:\n                ans = ans1\n            else:\n                ans = ans2\n        elif ans1 > 0:\n            ans = ans1\n        else:\n            ans = ans2\n    else:\n        flag2 = 1\n        ans = -c3 / c2\n    print(ans)", "import math\nT = int(input())\nfor v in range(T):\n    arr = inp = list(map(int, input().split()))\n    x1 = arr[0]\n    y1 = arr[1]\n    z1 = arr[2]\n    x3 = arr[3]\n    y3 = arr[4]\n    z3 = arr[5]\n    dx = arr[6]\n    dy = arr[7]\n    dz = arr[8]\n    x0 = arr[9]\n    y0 = arr[10]\n    z0 = arr[11]\n    r = arr[12]\n    a = x0 - x1\n    b = y0 - y1\n    c = z0 - z1\n    k1 = b * (z0 - z3) - c * (y0 - y3)\n    k2 = c * (x0 - x3) - a * (z0 - z3)\n    k3 = a * (y0 - y3) - b * (x0 - x3)\n    f1 = b * dz - c * dy\n    f2 = c * dx - a * dz\n    f3 = a * dy - b * dx\n    l1 = x3 - x1\n    l2 = y3 - y1\n    l3 = z3 - z1\n    j = f1 ** 2 + f2 ** 2 + f3 ** 2 - r ** 2 * (dx ** 2 + dy ** 2 + dz ** 2)\n    k = k1 * f1 + k2 * f2 + k3 * f3 + (dx * l1 + dy * l2 + dz * l3) * r ** 2\n    l = k1 ** 2 + k2 ** 2 + k3 ** 2 - (l1 ** 2 + l2 ** 2 + l3 ** 2) * r ** 2\n    disc = math.sqrt(k ** 2 - l * j)\n    if j != 0:\n        r1 = (k + disc) / j\n        r2 = (k - disc) / j\n        if r1 > 0:\n            print(r1)\n        if r2 > 0:\n            print(r2)\n    else:\n        ans = l / (2 * k)\n        print(ans)", "import math\nT = int(input())\nfor t in range(T):\n    (Px, Py, Pz, Qx, Qy, Qz, dx, dy, dz, Cx, Cy, Cz, r) = map(int, input().split())\n    a = Px - Cx\n    b = Py - Cy\n    f = Pz - Cz\n    m = Qx - Px\n    n = Qy - Py\n    s = Qz - Pz\n    Z = a * a + b * b + f * f - r * r\n    k = a * dx + b * dy + f * dz\n    u = a * m + b * n + f * s\n    D = dx * dx + dy * dy + dz * dz\n    v = 2 * m * dx + 2 * n * dy + 2 * s * dz\n    q = m * m + n * n + s * s\n    A = k * k - D * Z\n    B = 2 * k * u - v * Z\n    C = u * u - q * Z\n    if A == 0:\n        t = -C / B\n        print(t)\n    else:\n        t1 = (-B + math.sqrt(B * B - 4 * A * C)) / (2 * A)\n        t2 = (-B - math.sqrt(B * B - 4 * A * C)) / (2 * A)\n        if t1 < 0:\n            print(t2)\n        elif t2 < 0:\n            print(t1)\n        elif t1 <= t2:\n            print(t1)\n        else:\n            print(t2)", "import functools\nimport math\nt = int(input())\np = [0, 0, 0]\nq = [0, 0, 0]\nd = [0, 0, 0]\nc = [0, 0, 0]\nfor i in range(t):\n    (p[0], p[1], p[2], q[0], q[1], q[2], d[0], d[1], d[2], c[0], c[1], c[2], r) = map(int, input().split())\n    qp = [q[i] - p[i] for i in [0, 1, 2]]\n    cp = [c[i] - p[i] for i in [0, 1, 2]]\n    cpd = functools.reduce(lambda x, y: x + y, [cp[i] * d[i] for i in [1, 2, 0]])\n    qpd = functools.reduce(lambda x, y: x + y, [qp[i] * d[i] for i in [1, 2, 0]])\n    cpqp = functools.reduce(lambda x, y: x + y, [cp[i] * qp[i] for i in [1, 2, 0]])\n    cp2 = functools.reduce(lambda x, y: x + y, [cp[i] * cp[i] for i in [1, 2, 0]])\n    qp2 = functools.reduce(lambda x, y: x + y, [qp[i] * qp[i] for i in [1, 2, 0]])\n    d2 = functools.reduce(lambda x, y: x + y, [d[i] * d[i] for i in [0, 1, 2]])\n    l = cp2 - r * r\n    A = cpd * cpd - l * d2\n    B = cpd * cpqp - l * qpd\n    C = cpqp * cpqp - l * qp2\n    if A == 0:\n        ans = -1 * C / (2 * B)\n    else:\n        ans = (math.sqrt(B * B - A * C) - B) / A\n        if ans < 0:\n            ans = (-1 * math.sqrt(B * B - A * C) - B) / A\n    print(ans)", "T = int(input())\nfor i1 in range(0, T):\n    [Px, Py, Pz, Qx, Qy, Qz, dx, dy, dz, Cx, Cy, Cz, r] = [int(i) for i in input().split()]\n    if (Pz == 0 and Qz == 0) and (dz == 0 and Cz == 0):\n        a = Cx * Cx + Px * Px - r * r - 2 * Cx * Px\n        b = 2 * (Cx * Py + Px * Cy - (Cx * Cy + Px * Py))\n        c = Cy * Cy + Py * Py - 2 * Py * Cy - r * r\n        x1 = Px - Qx\n        y1 = Py - Qy\n        a1 = a * dy * dy + b * dx * dy + c * dx * dx\n        b1 = 2 * a * y1 * dy + y1 * dx * b + b * x1 * dy + 2 * c * x1 * dx\n        c1 = a * y1 * y1 + b * y1 * x1 + c * x1 * x1\n        if a1 == 0 and (c1 != 0 and b1 != 0):\n            print(c1 / b1)\n        elif b1 == 0:\n            if c1 > 0 and a1 < 0 or (a1 > 0 and c1 < 0):\n                k = c1 / a1\n                print(k ** 0.5)\n        else:\n            dis = b1 ** 2 - 4 * a1 * c1\n            if dis >= 0:\n                dis = dis ** 0.5\n                t1 = (b1 + dis) / (2 * a1)\n                t2 = (b1 - dis) / (2 * a1)\n                if t1 > 0 and t2 > 0:\n                    print(min(t1, t2))\n                elif t1 > 0 and t2 < 0:\n                    print(t1)\n                elif t1 < 0 and t2 > 0:\n                    print(t2)\n    else:\n        x1 = Qx - Cx\n        y1 = Qy - Cy\n        z1 = Qz - Cz\n        AD2 = (Px - Cx) ** 2 + (Py - Cy) ** 2 + (Pz - Cz) ** 2 - r * r\n        a = Px ** 2 + Py ** 2 + Pz ** 2 - Cx ** 2 - Cy ** 2 - Cz ** 2 + r ** 2 - AD2 - 2 * Px * Qx - 2 * Py * Qy - 2 * Pz * Qz + 2 * Cx * Qx + 2 * Cy * Qy + 2 * Cz * Qz\n        b = 2 * Cx * dx + 2 * Cy * dy + 2 * Cz * dz - 2 * Py * dy - 2 * Px * dx - 2 * Pz * dz\n        a1 = b ** 2 - 4 * AD2 * (dx ** 2 + dy ** 2 + dz ** 2)\n        b1 = 2 * (-a * b + 4 * AD2 * (dx * (Qx - Cx) + dy * (Qy - Cy) + dz * (Qz - Cz)))\n        k1 = x1 * x1 + y1 * y1 + z1 * z1\n        k2 = 4 * AD2 * k1\n        c1 = a ** 2 + 4 * AD2 * r * r - k2\n        if a1 == 0 and (c1 != 0 and b1 != 0):\n            print(c1 / b1)\n        elif b1 == 0:\n            k = c1 / a1\n            print(k ** 0.5)\n        else:\n            dis = b1 ** 2 - 4 * a1 * c1\n            if dis >= 0:\n                dis = dis ** 0.5\n                t1 = (b1 + dis) / (2 * a1)\n                t2 = (b1 - dis) / (2 * a1)\n                if t1 > 0 and t2 > 0:\n                    print(min(t1, t2))\n                elif t1 > 0 and t2 < 0:\n                    print(t1)\n                elif t1 < 0 and t2 > 0:\n                    print(t2)", "def dot(ax, ay, az, bx, by, bz):\n    return ax * bx + ay * by + az * bz\n\ndef findRoot(a, b, c):\n    R1 = (-b + (b * b - 4 * a * c) ** 0.5) / (2 * a)\n    R2 = (-b - (b * b - 4 * a * c) ** 0.5) / (2 * a)\n    return (R1, R2)\nT = int(input())\nwhile T > 0:\n    T -= 1\n    points = input().split()\n    for i in range(len(points)):\n        points[i] = float(points[i])\n    px = points[0]\n    py = points[1]\n    pz = points[2]\n    qx = points[3]\n    qy = points[4]\n    qz = points[5]\n    dx = points[6]\n    dy = points[7]\n    dz = points[8]\n    cx = points[9]\n    cy = points[10]\n    cz = points[11]\n    r = points[12]\n    QPX = qx - px\n    QPY = qy - py\n    QPZ = qz - pz\n    CPX = cx - px\n    CPY = cy - py\n    CPZ = cz - pz\n    c1 = dot(QPX, QPY, QPZ, QPX, QPY, QPZ)\n    c2 = 2 * dot(QPX, QPY, QPZ, dx, dy, dz)\n    c3 = dot(dx, dy, dz, dx, dy, dz)\n    lol = dot(QPX, QPY, QPZ, CPX, CPY, CPZ)\n    lawl = dot(dx, dy, dz, CPX, CPY, CPZ)\n    lmao = dot(CPX, CPY, CPZ, CPX, CPY, CPZ)\n    a = r ** 2 * c3 - lmao * c3 + lawl ** 2\n    b = r ** 2 * c2 - lmao * c2 + 2 * lol * lawl\n    c = r ** 2 * c1 - lmao * c1 + lol ** 2\n    if a == 0:\n        print(-c / b)\n        continue\n    (t1, t2) = findRoot(a, b, c)\n    if t1 < 0:\n        print(t2)\n    elif t2 < 0:\n        print(t1)\n    else:\n        print(min(t1, t2))", "from math import *\ncoder = 'sdpt'\nfor _ in range(int(input())):\n    arr = list(map(float, input().split()))\n    p = arr[:3]\n    q = arr[3:6]\n    d = arr[6:9]\n    c = arr[9:12]\n    r = arr[12]\n    m = [0] * 3\n    n = [0] * 3\n    for i in range(3):\n        m[i] = c[i] - p[i]\n        n[i] = q[i] - p[i]\n    w = [0] * 3\n    x = [0] * 3\n    SumWsq = 0\n    Sum2WX = 0\n    SumXsq = 0\n    SumNsq = 0\n    Sum2ND = 0\n    SumDsq = 0\n    for i in range(3):\n        j = (i + 1) % 3\n        k = (i + 2) % 3\n        w[i] = m[j] * n[k] - m[k] * n[j]\n        x[i] = m[j] * d[k] - m[k] * d[j]\n        SumWsq += w[i] * w[i]\n        Sum2WX += 2 * w[i] * x[i]\n        SumXsq += x[i] * x[i]\n        SumNsq += n[i] * n[i] * r * r\n        SumDsq += d[i] * d[i] * r * r\n        Sum2ND += 2 * d[i] * n[i] * r * r\n    A = SumXsq - SumDsq\n    B = Sum2WX - Sum2ND\n    C = SumWsq - SumNsq\n    if A == 0:\n        ans = -C / B\n        print('%.8f' % ans)\n    else:\n        ans = (-B + sqrt(B * B - 4 * A * C)) / (2 * A)\n        print('%.8f' % ans)", "import math\nt = int(input())\nwhile t > 0:\n    (px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r) = map(float, input().split())\n    temp = (px - cx) ** 2 + (py - cy) ** 2 + (pz - cz) ** 2\n    a1 = -temp + r ** 2 + (px - cx) ** 2\n    a2 = -temp + r ** 2 + (py - cy) ** 2\n    a3 = -temp + r ** 2 + (pz - cz) ** 2\n    b1 = qx - px\n    b2 = qy - py\n    b3 = qz - pz\n    c1 = px - cx\n    c2 = py - cy\n    c3 = pz - cz\n    A = a1 * dx ** 2 + a2 * dy ** 2 + a3 * dz ** 2 + 2 * (dx * dy * c1 * c2) + 2 * (dz * dy * c2 * c3) + 2 * (dx * dz * c3 * c1)\n    B = 2 * a1 * b1 * dx + 2 * a2 * b2 * dy + 2 * a3 * b3 * dz + 2 * c1 * b1 * c2 * dy + 2 * c1 * b2 * c2 * dx + 2 * c1 * b1 * c3 * dz + 2 * c1 * b3 * c3 * dx + 2 * c3 * b3 * c2 * dy + 2 * c3 * b2 * c2 * dz\n    C = a1 * b1 ** 2 + a2 * b2 ** 2 + a3 * b3 ** 2 + 2 * c1 * b1 * b2 * c2 + 2 * c2 * b2 * b3 * c3 + 2 * c3 * b1 * b3 * c1\n    D = B ** 2 - 4 * A * C\n    if A != 0:\n        t1 = (-B + math.sqrt(D)) / (2 * A)\n        t2 = (-B - math.sqrt(D)) / (2 * A)\n        if t1 > 0 and t2 < 0:\n            print(t1)\n        elif t2 > 0 and t1 < 0:\n            print(t2)\n        else:\n            print(max(t1, t2))\n    elif A == 0:\n        print(-C / B)\n    t -= 1", "import math\nimport numpy as np\n\ndef quadratic(a, b, c):\n    if a == 0:\n        x1 = -c / b\n        x2 = 'undefined'\n    else:\n        d = b ** 2 - 4 * a * c\n        if d > 0:\n            x1 = (-b + math.sqrt(d)) / (2 * a)\n            x2 = (-b - math.sqrt(d)) / (2 * a)\n        elif d == 0:\n            x1 = -b / (2 * a)\n            x2 = x1\n        else:\n            (x1, x2) = ('i', 'i')\n    return (x1, x2)\n\ndef solve_2_linear(a1, b1, c1, a2, b2, c2):\n    a = np.array([[a1, b1], [a2, b2]])\n    b = np.array([c1, c2])\n    res = np.linalg.solve(a, b)\n    return (res[0], res[1])\nt = int(input())\nfor _ in range(t):\n    line = list(map(int, input().split()))\n    (Px, Py, Pz) = (line[0], line[1], line[2])\n    (Qx, Qy, Qz) = (line[3], line[4], line[5])\n    (Dx, Dy, Dz) = (line[6], line[7], line[8])\n    (Cx, Cy, Cz) = (line[9], line[10], line[11])\n    R = line[12]\n    (X, Y, Z) = (Qx - Px, Qy - Py, Qz - Pz)\n    (X2, Y2, Z2) = (X ** 2, Y ** 2, Z ** 2)\n    (Dx2, Dy2, Dz2) = (Dx ** 2, Dy ** 2, Dz ** 2)\n    (p, q, r) = (Px - Cx, Py - Cy, Pz - Cz)\n    (p2, q2, r2) = (p ** 2, q ** 2, r ** 2)\n    R2 = R ** 2\n    a = r2 * Dy2 - 2 * r * q * Dy * Dz + q2 * Dz2 + p2 * Dz2 - 2 * r * p * Dx * Dz + r2 * Dx2 + q2 * Dx2 - 2 * p * q * Dx * Dy + p2 * Dy2 - R2 * (Dx2 + Dy2 + Dz2)\n    b = 2 * r2 * Dy * Y - 2 * r * q * Dy * Z - 2 * r * q * Dz * Y + 2 * q2 * Dz * Z + 2 * p2 * Dz * Z - 2 * r * p * Dz * X - 2 * r * p * Dx * Z + 2 * r2 * Dx * X + 2 * q2 * Dx * X - 2 * p * q * Dx * Y - 2 * p * q * Dy * X + 2 * p2 * Dy * Y - 2 * R2 * (Dx * X + Dy * Y + Dz * Z)\n    c = r2 * Y2 - 2 * r * q * Y * Z + q2 * Z2 + p2 * Z2 - 2 * r * p * Z * X + r2 * X2 + q2 * X2 - 2 * p * q * X * Y + p2 * Y2 - R2 * (X2 + Y2 + Z2)\n    (t1, t2) = quadratic(a, b, c)\n    if t2 == 'undefined':\n        print(t1)\n    elif t1 <= 0:\n        print(t2)\n    elif t2 <= 0:\n        print(t1)\n    else:\n        print(min(t1, t2))", "t = int(input())\nfor i in range(t):\n    (px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r) = [float(x) for x in input().split()]\n    a = cx - px\n    b = cy - py\n    c = cz - pz\n    d = qx - px\n    e = qy - py\n    f = qz - pz\n    A = r * r * (dx * dx + dy * dy + dz * dz) - ((a * dy - b * dx) ** 2 + (b * dz - c * dy) ** 2 + (c * dx - a * dz) ** 2)\n    tb1 = 2 * r * r * (dx * d + dy * e + dz * f)\n    asq = a * a\n    bsq = b * b\n    csq = c * c\n    dsq = d * d\n    esq = e * e\n    fsq = f * f\n    absq = asq + bsq\n    bcsq = bsq + csq\n    acsq = asq + csq\n    cf = c * f\n    be = b * e\n    ad = a * d\n    tb2 = 2 * (dx * (a * (cf + be) - d * bcsq) + dy * (b * (cf + ad) - e * acsq) + dz * (c * (be + ad) - f * absq))\n    B = tb1 + tb2\n    tc1 = r * r * (dsq + esq + fsq) - absq * fsq - acsq * esq - bcsq * dsq\n    C = tc1 + 2 * (be * cf + ad * cf + ad * be)\n    if A == 0:\n        t = -1 * (C / B)\n        print(t)\n    else:\n        t1 = (-B + (B * B - 4 * A * C) ** 0.5) / (2 * A)\n        t2 = (-B - (B * B - 4 * A * C) ** 0.5) / (2 * A)\n        if t1 < 0:\n            print(t2)\n        elif t2 < 0:\n            print(t1)\n        else:\n            print(min(t1, t2))", "t = int(input())\nfor i in range(t):\n    (px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r) = [float(x) for x in input().split()]\n    a = cx - px\n    b = cy - py\n    c = cz - pz\n    d = qx - px\n    e = qy - py\n    f = qz - pz\n    A = r * r * (dx * dx + dy * dy + dz * dz) - ((a * dy - b * dx) ** 2 + (b * dz - c * dy) ** 2 + (c * dx - a * dz) ** 2)\n    tb1 = 2 * r * r * (dx * d + dy * e + dz * f)\n    asq = a * a\n    bsq = b * b\n    csq = c * c\n    dsq = d * d\n    esq = e * e\n    fsq = f * f\n    absq = asq + bsq\n    bcsq = bsq + csq\n    acsq = asq + csq\n    cf = c * f\n    be = b * e\n    ad = a * d\n    tb2 = 2 * (dx * (a * (cf + be) - d * bcsq) + dy * (b * (cf + ad) - e * acsq) + dz * (c * (be + ad) - f * absq))\n    B = tb1 + tb2\n    tc1 = r * r * (dsq + esq + fsq) - absq * fsq - acsq * esq - bcsq * dsq\n    C = tc1 + 2 * (be * cf + ad * cf + ad * be)\n    if A == 0:\n        t = -1 * (C / B)\n        print(t)\n    else:\n        t1 = (-B + (B * B - 4 * A * C) ** 0.5) / (2 * A)\n        t2 = (-B - (B * B - 4 * A * C) ** 0.5) / (2 * A)\n        if t1 < 0:\n            print(t2)\n        elif t2 < 0:\n            print(t1)\n        else:\n            print(min(t1, t2))", "import math\nfor _ in range(int(input())):\n    (a, b, c, e, f, g, e1, f1, g1, x1, y1, z1, k) = map(int, input().split())\n    alp = a - x1\n    bet = b - y1\n    thet = c - z1\n    c1 = 2 * e * e1 + 2 * f * f1 + 2 * g * g1 - 2 * a * e1 - 2 * b * f1 - 2 * c * g1\n    c2 = e1 * e1 + f1 * f1 + g1 * g1\n    c3 = 2 * alp * e1 + 2 * bet * f1 + 2 * thet * g1\n    p = e * e + f * f + g * g - 2 * a * e - 2 * b * f - 2 * c * g + a * a + b * b + c * c\n    q = 2 * e * alp + 2 * f * bet + 2 * g * thet - 2 * a * alp - 2 * b * bet - 2 * c * thet\n    r = alp * alp + bet * bet + thet * thet - k * k\n    X = c3 * c3 - 4 * c2 * r\n    Y = 2 * q * c3 - 4 * c1 * r\n    Z = q * q - 4 * p * r\n    sq = float(math.sqrt(Y * Y - 4 * X * Z))\n    if X != 0:\n        ans1 = float((-Y - sq) / (2 * X))\n        ans2 = float((-Y + sq) / (2 * X))\n        if ans1 < 0 and ans2 >= 0:\n            print('%.10f' % ans2)\n        elif ans2 < 0 and ans1 >= 0:\n            print('%.10f' % ans1)\n        elif ans1 >= 0 and ans2 >= 0:\n            print('%.10f' % min(ans1, ans2))\n    else:\n        print('%.10f' % float(-Z / Y))", "import math\n\ndef f():\n    user = input().split(' ')\n    x1 = int(user[0])\n    y1 = int(user[1])\n    z1 = int(user[2])\n    Qx = int(user[3])\n    Qy = int(user[4])\n    Qz = int(user[5])\n    Dx = int(user[6])\n    Dy = int(user[7])\n    Dz = int(user[8])\n    x3 = int(user[9])\n    y3 = int(user[10])\n    z3 = int(user[11])\n    r = int(user[12])\n    time = 0\n    x2 = Qx + Dx * time\n    y2 = Qy + Dy * time\n    z2 = Qz + Dz * time\n    a = (x2 - x1) ** 2 + (y2 - y1) ** 2 + (z2 - z1) ** 2\n    b = 2 * ((x2 - x1) * (x1 - x3) + (y2 - y1) * (y1 - y3) + (z2 - z1) * (z1 - z3))\n    c = x3 ** 2 + y3 ** 2 + z3 ** 2 + x1 ** 2 + y1 ** 2 + z1 ** 2 - 2 * (x3 * x1 + y3 * y1 + z3 * z1) - r ** 2\n    bpart1 = (Qx - x1) * (x1 - x3) + (Qy - y1) * (y1 - y3) + (Qz - z1) * (z1 - z3)\n    bpart2 = Dx * (x1 - x3) + Dy * (y1 - y3) + Dz * (z1 - z3)\n    apart1 = (Qx - x1) ** 2 + (Qy - y1) ** 2 + (Qz - z1) ** 2\n    apart2 = Dx ** 2 + Dy ** 2 + Dz ** 2\n    apart3 = (Qx - x1) * Dx + (Qy - y1) * Dy + (Qz - z1) * Dz\n    tpart1 = bpart2 ** 2 - c * apart2\n    tpart2 = 2 * (bpart1 * bpart2 - c * apart3)\n    tpart3 = bpart1 ** 2 - c * apart1\n    if tpart1 == 0:\n        sol1 = -tpart3 / tpart2\n        sol2 = -tpart3 / tpart2\n    else:\n        d = tpart2 ** 2 - 4 * tpart1 * tpart3\n        sol1 = (-tpart2 - math.sqrt(d)) / (2 * tpart1)\n        sol2 = (-tpart2 + math.sqrt(d)) / (2 * tpart1)\n    max = 10 ** 10\n    if sol1 > 0 and sol1 <= max:\n        max = sol1\n    if sol2 > 0 and sol2 <= max:\n        max = sol2\n    return max\nt = int(input())\nfor i in range(t):\n    print(f())", "t = int(input())\nwhile t:\n    (px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r) = map(int, input().split())\n    a = px - cx\n    b = py - cy\n    c = pz - cz\n    d = qx - cx\n    e = qy - cy\n    f = qz - cz\n    alpha = a * d + b * e + c * f - r * r\n    beta = a * dx + b * dy + c * dz\n    k = a * a + b * b + c * c - r * r\n    g = (dx * dx + dy * dy + dz * dz) * k\n    h = (d * dx + e * dy + f * dz) * 2 * k\n    i = (d * d + e * e + f * f - r * r) * k\n    p = beta * beta - g\n    q = 2 * alpha * beta - h\n    r1 = alpha * alpha - i\n    if p != 0:\n        discr = (q * q - 4 * p * r1) ** (1 / 2)\n        t1 = (-q + discr) / 2 / p\n        t2 = (-q - discr) / 2 / p\n        if t1 <= t2:\n            if t1 >= 0:\n                print(t1)\n            else:\n                print(t2)\n        elif t2 >= 0:\n            print(t2)\n        else:\n            print(t1)\n    if p == 0:\n        t1 = -r1 / q\n        print(t1)\n    t = t - 1", "class point:\n\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\ndef sub(p, q):\n    return point(p.x - q.x, p.y - q.y, p.z - q.z)\n\ndef dot(p, q):\n    return p.x * q.x + p.y * q.y + p.z * q.z\n\ndef cross(p, q):\n    return point(p.y * q.z - p.z * q.y, p.z * q.x - p.x * q.z, p.x * q.y - p.y * q.x)\n\ndef modsq(p):\n    return p.x ** 2 + p.y ** 2 + p.z ** 2\n\ndef solve():\n    (px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r) = map(int, input().split())\n    p = point(px, py, pz)\n    q = point(qx, qy, qz)\n    d = point(dx, dy, dz)\n    c = point(cx, cy, cz)\n    c1 = modsq(cross(d, sub(c, p))) - modsq(d) * r * r\n    c2 = dot(cross(sub(q, p), sub(c, p)), cross(d, sub(c, p))) - r * r * dot(d, sub(q, p))\n    c2 *= 2\n    c3 = modsq(cross(sub(q, p), sub(c, p))) - modsq(sub(q, p)) * r * r\n    if c1 == 0:\n        print(-c3 / c2)\n        return\n    print((-c2 + (c2 ** 2 - 4 * c1 * c3) ** 0.5) / (2 * c1))\nt = int(input())\nfor i in range(t):\n    solve()", "from math import *\nt = int(input().strip())\nfor i in range(t):\n    (x1, y1, z1, x2, y2, z2, d1, d2, d3, xc, yc, zc, r) = [int(x) for x in input().strip().split(' ')]\n    u = d2 * z1 - zc * d2 - y1 * d3 + yc * d3\n    v = y2 * (z1 - zc) + y1 * (zc - z2) + yc * (z2 - z1)\n    m = d1 * z1 - d1 * zc + xc * d3 - x1 * d3\n    n = x2 * (z1 - zc) + x1 * (zc - z2) + xc * (z2 - z1)\n    f = d1 * y1 - d1 * yc - d2 * x1 + d2 * xc\n    g = x1 * (yc - y2) + x2 * (y1 - yc) + xc * (y2 - y1)\n    X = x2 - x1\n    Y = y2 - y1\n    Z = z2 - z1\n    C0 = u * u + m * m + f * f - r * r * (d1 * d1 + d2 * d2 + d3 * d3)\n    C1 = 2 * (u * v + m * n + f * g - r * r * (X * d1 + Y * d2 + Z * d3))\n    C2 = v * v + g * g + n * n - r * r * (X * X + Y * Y + Z * Z)\n    if C0 == 0:\n        print(-(C2 / C1))\n    else:\n        t1 = (-C1 + sqrt(C1 * C1 - 4 * C0 * C2)) / (2 * C0)\n        t2 = (-C1 - sqrt(C1 * C1 - 4 * C0 * C2)) / (2 * C0)\n        if t1 >= 0:\n            print(t1 % 1000000000)\n        else:\n            print(t2 % 1000000000)", "T = int(input())\nwhile T:\n    (px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r) = map(int, input().split())\n    x = qx - px\n    y = qy - py\n    z = qz - pz\n    a = px - cx\n    b = py - cy\n    c = pz - cz\n    e = a * a + b * b + c * c\n    x1 = r * r + a * a - e\n    y1 = r * r + b * b - e\n    z1 = r * r + c * c - e\n    A = x1 * dx * dx + y1 * dy * dy + z1 * dz * dz + 2 * (a * b * dx * dy + c * b * dz * dy + a * c * dx * dz)\n    B = 2 * (x1 * x * dx + y1 * y * dy + z1 * z * dz + a * b * x * dy + a * b * y * dx + a * c * x * dz + a * c * z * dx + c * b * z * dy + c * b * y * dz)\n    C = x1 * x * x + y1 * y * y + z1 * z * z + 2 * a * b * x * y + 2 * a * c * x * z + 2 * c * b * z * y\n    if A != 0:\n        discr = B * B - 4 * A * C\n        discr = discr ** 0.5\n        root1 = (-1 * B + discr) / (2 * A)\n        root2 = (-1 * B - discr) / (2 * A)\n        if root1 >= 0 and root2 >= 0:\n            if root1 > root2:\n                print(root1)\n            else:\n                print(root2)\n        elif root1 >= 0:\n            print(root1)\n        else:\n            print(root2)\n    else:\n        time = -1 * C / B\n        print(time)\n    T -= 1", "from math import sqrt\nt = int(input())\nfor test in range(t):\n    (px, py, pz, qx, qy, qz, dx, dy, dz, cx, cy, cz, r) = map(int, input().split())\n    c2 = qx - px\n    c3 = qy - py\n    c4 = qz - pz\n    c5 = px - cx\n    c6 = py - cy\n    c7 = pz - cz\n    c1 = c5 * c5 + c6 * c6 + c7 * c7 - r * r\n    a = c5 * c5 * dx * dx + c6 * c6 * dy * dy + c7 * c7 * dz * dz + 2 * c5 * c6 * dx * dy + 2 * c6 * c7 * dy * dz + 2 * c5 * c7 * dx * dz - c1 * (dx * dx + dy * dy + dz * dz)\n    b = 2 * c2 * dx * c5 * c5 + 2 * c3 * dy * c6 * c6 + 2 * c4 * dz * c7 * c7 + 2 * (c5 * c6 * (c2 * dy + c3 * dx) + c6 * c7 * (c3 * dz + c4 * dy) + c5 * c7 * (c4 * dx + c2 * dz)) - c1 * (2 * c2 * dx + 2 * c3 * dy + 2 * c4 * dz)\n    c = c5 * c5 * c2 * c2 + c6 * c6 * c3 * c3 + c7 * c7 * c4 * c4 + 2 * (c5 * c6 * c2 * c3 + c6 * c7 * c3 * c4 + c5 * c7 * c4 * c2) - c1 * (c2 * c2 + c3 * c3 + c4 * c4)\n    if a == 0:\n        print('{:.10f}'.format(-1 * (c / b)))\n    else:\n        zt = sqrt(b * b - 4 * a * c)\n        zb = -1 * b\n        ans1 = zb + zt\n        ans1 /= 2 * a\n        ans2 = zb - zt\n        ans2 /= 2 * a\n        l = [ans1, ans2]\n        l.sort()\n        if l[0] > 0:\n            print('{:.10f}'.format(l[0]))\n        else:\n            print('{:.10f}'.format(l[1]))", "def dot(a, b):\n    r = a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n    return r\nfor _ in range(int(input())):\n    (x1, y1, z1, x2, y2, z2, d1, d2, d3, c1, c2, c3, r) = map(float, input().split())\n    a = x2 - x1\n    b = y2 - y1\n    c = z2 - z1\n    k = x1 - c1\n    l = y1 - c2\n    m = z1 - c3\n    term1 = r ** 2 * d1 ** 2 + r ** 2 * d2 ** 2 + r ** 2 * d3 ** 2\n    term2 = (d1 * l - d2 * k) ** 2 + (d2 * m - d3 * l) ** 2 + (d3 * k - d1 * m) ** 2\n    A = term1 - term2\n    term11 = 2 * r ** 2 * (a * d1 + b * d2 + c * d3)\n    term22 = 2 * ((a * l - b * k) * (d1 * l - d2 * k) + (b * m - c * l) * (d2 * m - d3 * l) + (c * k - a * m) * (d3 * k - d1 * m))\n    B = term11 - term22\n    ter1 = r ** 2 * (a ** 2 + b ** 2 + c ** 2)\n    ter2 = (a * l - b * k) ** 2 + (b * m - c * l) ** 2 + (c * k - a * m) ** 2\n    C = ter1 - ter2\n    if A == 0:\n        t = -1 * C / B\n        print(t)\n        continue\n    else:\n        t1 = (-1 * B + (B ** 2 - 4 * A * C) ** 0.5) / (2 * A)\n        t2 = (-1 * B - (B ** 2 - 4 * A * C) ** 0.5) / (2 * A)\n        t = 0\n        if t1 < 0:\n            t = t2\n        elif t2 < 0:\n            t = t1\n        elif t1 >= 0 and t2 >= 0:\n            t = min(t1, t2)\n        print(t)", "import math\nt = int(input())\nfor _ in range(t):\n    (px, py, pz, qx0, qy0, qz0, dx, dy, dz, cx, cy, cz, r) = map(int, input().split())\n    a = px - cx\n    b = py - cy\n    c = pz - cz\n    x = px - qx0\n    y = py - qy0\n    z = pz - qz0\n    (e1, e2, e3) = (b * z - c * y, a * z - c * x, a * y - b * x)\n    (f1, f2, f3) = (c * dy - b * dz, dx * c - dz * a, dx * b - dy * a)\n    a2 = f1 * f1 + f2 * f2 + f3 * f3\n    b2 = 2 * (f1 * e1 + f2 * e2 + f3 * e3)\n    c2 = e1 * e1 + e2 * e2 + e3 * e3\n    c1 = x * x + y * y + z * z\n    a1 = dx * dx + dy * dy + dz * dz\n    b1 = -2 * (dx * x + dy * y + dz * z)\n    g = a2 - a1 * r * r\n    h = b2 - b1 * r * r\n    i = c2 - c1 * r * r\n    try:\n        t1 = (-h + math.sqrt(h * h - 4 * g * i)) / (2 * g)\n        t2 = (-h - math.sqrt(h * h - 4 * g * i)) / (2 * g)\n        if t1 > 0 and t2 > 0:\n            print(min(t1, t2))\n        else:\n            print(max(t1, t2))\n    except:\n        d = (cx - px) * (cx - px) + (cy - py) * (cy - py) + (cz - pz) * (cz - pz)\n        f = 0\n        for x in range(100):\n            for y in range(100):\n                for z in range(100):\n                    if (x - px) * (x - px) + (y - py) * (y - py) + (z - pz) * (z - pz) == d - r * r:\n                        f = 1\n                        break\n                if f == 1:\n                    break\n            if f == 1:\n                break\n        a = px - x\n        b = py - y\n        c = pz - z\n        t = (b * (qx0 - px) - a * (qy0 - py)) / (a * dy - b * dx)\n        print(t)"]