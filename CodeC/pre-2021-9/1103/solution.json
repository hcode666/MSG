["import math\n\ndef GLR(x):\n    summation_N = x * (x + 1) // 2\n    initial = x\n    power = 0\n    sum_A = 0\n    while x >= 1:\n        count = (x + 1) // 2\n        sum_A += count * 2 ** power\n        x = x - count\n        power += 1\n    sum_B = summation_N - sum_A\n    ans = sum_B - (int(math.log(initial, 2)) + 1)\n    return ans\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l == 1:\n        print(GLR(r))\n    else:\n        print(GLR(r) - GLR(l - 1))", "import math\n\ndef GLR(x):\n    summation_N = x * (x + 1) // 2\n    initial = x\n    power = 0\n    sum_A = 0\n    while x >= 1:\n        count = (x + 1) // 2\n        sum_A += count * 2 ** power\n        x = x - count\n        power += 1\n    sum_B = summation_N - sum_A\n    ans = sum_B - (int(math.log(initial, 2)) + 1)\n    return ans\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l == 1:\n        print(GLR(r))\n    else:\n        print(GLR(r) - GLR(l - 1))", "import math\n\ndef GLR(x):\n    summation_N = x * (x + 1) // 2\n    initial = x\n    power = 0\n    sum_A = 0\n    while x >= 1:\n        count = (x + 1) // 2\n        sum_A += count * 2 ** power\n        x = x - count\n        power += 1\n    sum_B = summation_N - sum_A\n    ans = sum_B - (int(math.log(initial, 2)) + 1)\n    return ans\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l == 1:\n        print(GLR(r))\n    else:\n        print(GLR(r) - GLR(l - 1))", "import math\nfrom collections import defaultdict\n\ndef IsPowerOfTwo(x):\n    return x != 0 and x & x - 1 == 0\n\ndef getFirstSetBitPos(n):\n    return int(math.log2(n & -n) + 1) - 1\n\ndef xpr(n):\n    if IsPowerOfTwo(n):\n        return (-1, -1)\n    index = getFirstSetBitPos(n)\n    binary_n_string = str(bin(n))[2:]\n    a = ''\n    b = ''\n    i = 0\n    for bit in reversed(binary_n_string):\n        if i < index:\n            a = '0' + a\n            b = '0' + b\n        elif i == index:\n            a = '1' + a\n            b = '0' + b\n        elif bit == '0':\n            a = '0' + a\n            b = '0' + b\n        else:\n            a = '0' + a\n            b = '1' + b\n        i = i + 1\n    (a, b) = (int(a, 2), int(b, 2))\n    return (a, b)\n\ndef glr(x):\n    tot = x * (x + 1) // 2\n    lb = 0\n    while x >= 1:\n        tot -= int((x + 1) // 2 * 2 ** lb)\n        lb += 1\n        tot -= 1\n        x = x / 2\n    return tot\nt = int(input())\nwhile t > 0:\n    (l, r) = list(map(int, input().split()))\n    print(glr(r) - glr(l - 1))\n    t = t - 1", "import math\nfrom collections import defaultdict\n\ndef IsPowerOfTwo(x):\n    return x != 0 and x & x - 1 == 0\n\ndef getFirstSetBitPos(n):\n    return int(math.log2(n & -n) + 1) - 1\n\ndef xpr(n):\n    if IsPowerOfTwo(n):\n        return (-1, -1)\n    index = getFirstSetBitPos(n)\n    binary_n_string = str(bin(n))[2:]\n    a = ''\n    b = ''\n    i = 0\n    for bit in reversed(binary_n_string):\n        if i < index:\n            a = '0' + a\n            b = '0' + b\n        elif i == index:\n            a = '1' + a\n            b = '0' + b\n        elif bit == '0':\n            a = '0' + a\n            b = '0' + b\n        else:\n            a = '0' + a\n            b = '1' + b\n        i = i + 1\n    (a, b) = (int(a, 2), int(b, 2))\n    return (a, b)\n\ndef glr(x):\n    tot = x * (x + 1) // 2\n    lb = 0\n    while x >= 1:\n        tot -= int((x + 1) // 2 * 2 ** lb)\n        lb += 1\n        tot -= 1\n        x = x / 2\n    return tot\nt = int(input())\nwhile t > 0:\n    (l, r) = list(map(int, input().split()))\n    sumt = 0\n    print(glr(r) - glr(l - 1))\n    t = t - 1", "def fun(m):\n    sumi = m * (m + 1) // 2\n    f = 1\n    while f <= m:\n        x = m // f + 1\n        sumi -= 1 + f * (x // 2)\n        f *= 2\n    return sumi\nt = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    print(fun(r) - fun(l - 1))", "from math import log2\n\ndef get_a(n):\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return (n + 1) // 2 + get_a(n // 2) * 2\n\ndef get(n):\n    if n < 1:\n        return 0\n    total = n * (n + 1) // 2\n    a = get_a(n)\n    return total - a - int(log2(n)) - 1\n\ndef read():\n    t = int(input())\n    for i in range(t):\n        (l, r) = list(map(int, input().strip().split()))\n        print(get(r) - get(l - 1))\nread()", "import math\n\ndef xor_solution(l, r):\n    sum_xors = 0\n    for i in range(l, r + 1):\n        if i & i - 1 == 0:\n            sum_xors = sum_xors - 1\n        else:\n            sum_xors = sum_xors + (i & i - 1)\n    return sum_xors\n\ndef sum_xor(x):\n    if x == 0:\n        return 0\n    sum_n = x * (x + 1) // 2\n    temp = x\n    power2 = 1\n    sum_a = 0\n    while x >= 1:\n        count = (x + 1) // 2\n        sum_a += count * power2\n        x = x - count\n        power2 = power2 * 2\n    sum_b = sum_n - sum_a\n    return sum_b - (int(math.log2(temp)) + 1)\n\ndef main():\n    test_case = int(input())\n    ans = []\n    while test_case > 0:\n        (l, r) = map(int, input().split())\n        ans.append(sum_xor(r) - sum_xor(l - 1))\n        test_case -= 1\n    for i in ans:\n        print(i)\nmain()", "def ans(p):\n    pika = p * (p + 1) // 2\n    tmep = 1\n    while p >= 1:\n        pika -= (p + 1) // 2 * tmep\n        pika -= 1\n        p //= 2\n        tmep *= 2\n    return pika\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    print(ans(r) - ans(l - 1))", "import math\n\ndef GLR(x):\n    summation_N = x * (x + 1) // 2\n    initial = x\n    power = 0\n    sum_A = 0\n    while x >= 1:\n        count = (x + 1) // 2\n        sum_A += count * 2 ** power\n        x = x - count\n        power += 1\n    sum_B = summation_N - sum_A\n    ans = sum_B - (int(math.log(initial, 2)) + 1)\n    return ans\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l == 1:\n        print(GLR(r))\n    else:\n        print(GLR(r) - GLR(l - 1))", "import math\n\ndef GLR(x):\n    summation_N = x * (x + 1) // 2\n    initial = x\n    power = 0\n    sum_A = 0\n    while x >= 1:\n        count = (x + 1) // 2\n        sum_A += count * 2 ** power\n        x = x - count\n        power += 1\n    sum_B = summation_N - sum_A\n    ans = sum_B - (int(math.log(initial, 2)) + 1)\n    return ans\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l == 1:\n        print(GLR(r))\n    else:\n        print(GLR(r) - GLR(l - 1))", "import math\nt = int(input())\n\ndef glr(x):\n    sigma_a = 0\n    a = x\n    sigma_n = x * (x + 1) // 2\n    p = 0\n    while x > 0:\n        if x % 2 == 0:\n            count = x // 2\n        else:\n            count = (x + 1) // 2\n        sigma_a += count * 2 ** p\n        x -= count\n        p += 1\n    sigma_b = sigma_n - sigma_a\n    sigma_b = sigma_b + -1 * int(math.log(a, 2))\n    return sigma_b\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    if l > 1:\n        ans = glr(r) - glr(l - 1)\n    else:\n        ans = glr(r) - 1\n    print(ans)", "import math\n\ndef jd(x):\n    n = x\n    y = x * (x + 1) // 2\n    ans = 0\n    p = 0\n    while n >= 1:\n        c = (n + 1) // 2\n        ans += int(c * math.pow(2, p))\n        n -= c\n        p += 1\n    y -= ans\n    y -= int(math.log2(x) + 1)\n    return int(y)\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l > 1:\n        print(jd(r) - jd(l - 1))\n    else:\n        print(jd(r))", "from math import log2\n\ndef grx(x):\n    if x == 0:\n        return 0\n    i = x\n    summation_n = x * (x + 1) // 2\n    curr = (x + 1) // 2\n    ans = 0\n    p = 0\n    while x >= 1:\n        ans += 2 ** p * curr\n        x -= curr\n        curr = (x + 1) // 2\n        p += 1\n    return summation_n - ans - int(log2(i)) - 1\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    print(grx(r) - grx(l - 1))", "import math\n\ndef howmany(n):\n    total = n * (n + 1) // 2\n    a = 1\n    while a <= n:\n        total = total - a * ((n - a) // (2 * a) + 1)\n        total = total - 1\n        a = a * 2\n    return total\nt = int(input())\nfor you in range(t):\n    l = input().split()\n    x = int(l[0])\n    y = int(l[1])\n    print(howmany(y) - howmany(x - 1))", "import math\n\ndef count(N):\n    if N < 1:\n        return 0\n    total = N * (N + 1) // 2\n    a = 1\n    d = 2\n    while N >= a:\n        n = math.floor((N - a) / d) + 1\n        total -= n * a + 1\n        a *= 2\n        d *= 2\n    return total\nT = int(input())\nfor _ in range(T):\n    (L, R) = list(map(int, input().split()))\n    print(count(R) - count(L - 1))", "import math\n\ndef ceil(n):\n    if int(n) == n:\n        return int(n)\n    else:\n        return int(n) + 1\n\ndef compute(n):\n    if n == 0:\n        return 0\n    temp = int(math.log(n, 2)) + 1\n    ans = n * (n + 1) // 2\n    ans -= temp\n    rr = 1\n    while n != 0:\n        ans -= ceil(n / 2) * rr\n        n = n // 2\n        rr = rr * 2\n    return ans\nt = int(input())\nfor i in range(t):\n    (l, r) = list(map(int, input().split()))\n    ans = compute(r) - compute(l - 1)\n    print(ans)", "import math\n\ndef Fun(a):\n    if a == 0:\n        return 0\n    sum_n = a * (a + 1) // 2\n    ini = a\n    p = 0\n    anss = 0\n    while a >= 1:\n        c = (a + 1) // 2\n        anss += c * pow(2, p)\n        a = a - c\n        p += 1\n    dd = int(math.log2(ini))\n    return sum_n - anss - dd - 1\nt = int(input())\nwhile t > 0:\n    arr = list(map(int, input().split()))\n    l = arr[0]\n    r = arr[1]\n    ans = Fun(r) - Fun(l - 1)\n    print(ans)\n    t = t - 1", "import math\n\ndef GLR(x):\n    summation_N = x * (x + 1) // 2\n    initial = x\n    power = 0\n    sum_A = 0\n    while x >= 1:\n        count = (x + 1) // 2\n        sum_A += count * 2 ** power\n        x = x - count\n        power += 1\n    sum_B = summation_N - sum_A\n    ans = sum_B - (int(math.log(initial, 2)) + 1)\n    return ans\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l == 1:\n        print(GLR(r))\n    else:\n        print(GLR(r) - GLR(l - 1))", "from math import *\n\ndef find(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return -1\n    if n == 2:\n        return -2\n    a = 1\n    ans = 0\n    while a <= n:\n        ans += (floor(n / a) - floor(n / (2 * a))) * a\n        a *= 2\n    k = int(log(n, 2))\n    return n * (n + 1) // 2 - int(ans) - k - 1\nt = int(input())\nfor _ in range(t):\n    (l, r) = list(map(int, input().split()))\n    print(find(r) - find(l - 1))", "import math\n\ndef GLR(x):\n    summation_N = x * (x + 1) // 2\n    initial = x\n    power = 0\n    sum_A = 0\n    while x >= 1:\n        count = (x + 1) // 2\n        sum_A += count * 2 ** power\n        x -= count\n        power += 1\n    sum_B = summation_N - sum_A\n    ans = sum_B - (int(math.log(initial, 2)) + 1)\n    return ans\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l == 1:\n        print(GLR(r))\n    else:\n        print(GLR(r) - GLR(l - 1))", "import math\nt = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    if a == 1:\n        ans = -1\n    else:\n        ans = 0\n    k = (b - a + 1) * (b + a) // 2\n    ans += k\n    if a % 2:\n        ans -= math.ceil((b - a + 1) / 2)\n    elif b % 2:\n        ans -= math.ceil((b - a) / 2)\n    else:\n        ans -= (b - a) // 2\n    i = 2 ** 30\n    c = 0\n    while i >= 2:\n        x = b // i - (a - 1) // i\n        d = x - c\n        c = x\n        ans -= d * i\n        if i >= a and i <= b:\n            ans -= 1\n        i = i // 2\n    print(ans)", "import math\n\ndef xpn(n):\n    sum_n = n * (n + 1) // 2\n    temp = n\n    sum_a = 0\n    p = 0\n    while n >= 1:\n        c = (n + 1) // 2\n        sum_a += c * 2 ** p\n        n -= c\n        p += 1\n    sum_b = sum_n - sum_a\n    b = sum_b - (int(math.log(temp, 2)) + 1)\n    return b\nt = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    if l == 1:\n        m = xpn(r)\n    else:\n        m = xpn(r) - xpn(l - 1)\n    print(m)", "def solve(a):\n    b = 1\n    for i in range(31):\n        if a < b:\n            length = i\n            b >>= 1\n            break\n        b <<= 1\n    res = a * (a + 1) // 2\n    cumusum = 0\n    for _ in range(length):\n        n = a // b - cumusum\n        res -= n * b + 1\n        cumusum += n\n        b >>= 1\n    return res\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        (l, r) = map(int, input().split())\n        print(solve(r) - solve(l - 1))\nmain()", "import math\n\ndef GLR(x):\n    if x == 0:\n        return 0\n    y = x\n    p = 0\n    sum_a = 0\n    while x >= 1:\n        c = (x + 1) // 2\n        sum_a += c * 2 ** p\n        p += 1\n        x = x - c\n    sum_b = y * (y + 1) // 2 - sum_a\n    ans = sum_b - (int(math.log2(y)) + 1)\n    return ans\nfor t in range(int(input())):\n    (l, r) = map(int, input().split(' '))\n    ans = GLR(r) - GLR(l - 1)\n    print(ans)", "import math\n\ndef GLR(x):\n    summation_N = x * (x + 1) // 2\n    initial = x\n    power = 0\n    sum_A = 0\n    while x >= 1:\n        count = (x + 1) // 2\n        sum_A += count * 2 ** power\n        x = x - count\n        power += 1\n    sum_B = summation_N - sum_A\n    ans = sum_B - (int(math.log(initial, 2)) + 1)\n    return ans\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l == 1:\n        print(GLR(r))\n    else:\n        print(GLR(r) - GLR(l - 1))", "import math\n\ndef g(r):\n    if r == 1:\n        return 1\n    elif r == 0:\n        return 0\n    else:\n        return 1 * math.ceil(r / 2) + 2 * g(math.floor(r / 2))\nt = int(input())\nwhile t != 0:\n    t -= 1\n    (l, r) = [int(x) for x in input().split()]\n    pr = math.ceil(math.log(r, 2))\n    pl = math.ceil(math.log(l, 2))\n    ans = r * (r + 1) // 2 - l * (l - 1) // 2 - (g(r) - g(l - 1)) - (pr - pl)\n    print(ans)", "import math\n\ndef GLR(x):\n    summation_N = x * (x + 1) // 2\n    initial = x\n    power = 0\n    sum_A = 0\n    while x >= 1:\n        count = (x + 1) // 2\n        sum_A += count * 2 ** power\n        x = x - count\n        power += 1\n    sum_B = summation_N - sum_A\n    ans = sum_B - (int(math.log(initial, 2)) + 1)\n    return ans\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l == 1:\n        print(GLR(r))\n    else:\n        print(GLR(r) - GLR(l - 1))", "from sys import stdin\nimport math\n\ndef glr(x):\n    sum_n = x * (x + 1) // 2\n    init = x\n    sum_a = 0\n    power = 0\n    while x >= 1:\n        temp = (x + 1) // 2\n        sum_a += temp * pow(2, power)\n        x = x - temp\n        power += 1\n    sum_b = sum_n - sum_a\n    sum_b -= int(math.log(init, 2)) + 1\n    return sum_b\nt = int(stdin.readline())\nwhile t:\n    (l, r) = [int(x) for x in stdin.readline().split()]\n    ans = 0\n    if l == 1:\n        ans = glr(r)\n    else:\n        ans = glr(r) - glr(l - 1)\n    print(ans)\n    t -= 1", "from sys import stdin\nimport math\n\ndef glr(x):\n    sum_n = x * (x + 1) // 2\n    init = x\n    sum_a = 0\n    power = 0\n    while x >= 1:\n        temp = (x + 1) // 2\n        sum_a += temp * 2 ** power\n        x = x - temp\n        power += 1\n    sum_b = sum_n - sum_a\n    sum_b -= int(math.log(init, 2)) + 1\n    return sum_b\nt = int(stdin.readline())\nwhile t:\n    (l, r) = [int(x) for x in stdin.readline().split()]\n    ans = 0\n    if l == 1:\n        ans = glr(r)\n    else:\n        ans = glr(r) - glr(l - 1)\n    print(ans)\n    t -= 1", "def rec(n):\n    sum1 = n * (n + 1) // 2\n    p = 0\n    x = n\n    a = 0\n    while x >= 1:\n        b = (x + 1) // 2\n        a = a + b * 2 ** p\n        x = x - b\n        p = p + 1\n    sum1 = sum1 - a\n    sum1 = sum1 - p\n    return int(sum1)\nt = int(input())\nwhile t > 0:\n    (l, r) = map(int, input().split())\n    if l == 1:\n        print(rec(r))\n    else:\n        print(rec(r) - rec(l - 1))\n    t = t - 1", "import math\n\ndef glr(x):\n    suma = x * (x + 1) // 2\n    initial = x\n    p = 0\n    sumA = 0\n    while x >= 1:\n        count = (x + 1) // 2\n        sumA = sumA + count * 2 ** p\n        x = x - count\n        p = p + 1\n    sumB = suma - sumA\n    sumB = sumB - (int(math.log(initial, 2)) + 1)\n    return sumB\nt = int(input())\nfor i in range(t):\n    (L, R) = map(int, input().split())\n    if L == 1:\n        y = glr(R)\n    else:\n        y = glr(R) - glr(L - 1)\n    print(y)", "inp = input\nfrom math import ceil, log2\n\ndef extra(n, i):\n    o = 1\n    ans = 0\n    while n > 0:\n        m = ceil(n / 2)\n        ans += o * m\n        o = o * 2\n        n = n - m\n    return ans\n\ndef twos(n):\n    ans = 0\n    o = 1\n    while n >= o:\n        ans += 1\n        o = o * 2\n    return ans\n\ndef sm(n):\n    return n * (n + 1) // 2\n\ndef f(n):\n    return sm(n) - twos(n) - extra(n, 0)\n\ndef solve(l, r):\n    return f(r) - f(l - 1)\nfor _ in range(int(inp().strip())):\n    (l, r) = map(int, inp().strip().split(' '))\n    print(solve(l, r))", "import math\n\ndef GLR(x):\n    summation_N = x * (x + 1) // 2\n    initial = x\n    power = 0\n    sum_A = 0\n    while x >= 1:\n        count = (x + 1) // 2\n        sum_A += count * 2 ** power\n        x = x - count\n        power += 1\n    sum_B = summation_N - sum_A\n    ans = sum_B - (int(math.log(initial, 2)) + 1)\n    return ans\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l == 1:\n        print(GLR(r))\n    else:\n        print(GLR(r) - GLR(l - 1))", "import math\n\ndef GLR(x):\n    summation_N = x * (x + 1) // 2\n    initial = x\n    power = 0\n    sum_A = 0\n    while x >= 1:\n        count = (x + 1) // 2\n        sum_A += count * 2 ** power\n        x = x - count\n        power += 1\n    sum_B = summation_N - sum_A\n    ans = sum_B - (int(math.log(initial, 2)) + 1)\n    return ans\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l == 1:\n        print(GLR(r))\n    else:\n        print(GLR(r) - GLR(l - 1))", "T = int(input())\n\ndef cal(n):\n    if n <= 0:\n        return 0\n    ans = n * (n + 1)\n    ans //= 2\n    x = 1\n    while n > 0:\n        ans -= (n + 1) // 2 * x\n        x *= 2\n        n = n // 2\n        ans -= 1\n    return ans\nfor _ in range(T):\n    (l, r) = map(int, input().split())\n    print(cal(r) - cal(l - 1))", "def c(n):\n    if n == 0:\n        return 0\n    return c(n // 2) + 1\n\ndef f(n):\n    if n == 0:\n        return 0\n    ans = (n + 1) // 2\n    ans += f(n // 2) * 2\n    return ans\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    t = (r - l + 1) * (r + l) // 2\n    x = f(r) - f(l - 1) + c(r) - c(l - 1)\n    print(t - x)", "import math\n\ndef ans(n):\n    if n == 0 or n == 1:\n        return n\n    m = n // 2\n    if n % 2 == 0:\n        return 2 * ans(m) + m\n    else:\n        return 2 * ans(m) + m + 1\nt = int(input())\nwhile t:\n    t -= 1\n    (a, b) = map(int, input().split())\n    sl = a * (a - 1) // 2\n    sr = b * (b + 1) // 2\n    diff = sr - sl\n    diff -= ans(b) - ans(a - 1)\n    h = int(math.log(b, 2))\n    l = -1\n    if a == 1:\n        l = -1\n    else:\n        l = int(math.log(a - 1, 2))\n    temp = h - l\n    diff = diff - temp\n    print(diff)", "import math\n\ndef GLR(x):\n    summation_N = x * (x + 1) // 2\n    initial = x\n    power = 0\n    sum_A = 0\n    while x >= 1:\n        count = (x + 1) // 2\n        sum_A += count * 2 ** power\n        x = x - count\n        power += 1\n    sum_B = summation_N - sum_A\n    ans = sum_B - (int(math.log(initial, 2)) + 1)\n    return ans\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l == 1:\n        print(GLR(r))\n    else:\n        print(GLR(r) - GLR(l - 1))", "import sys\nT = int(input())\nfor t in range(T):\n    (L, R) = map(int, input().split(' '))\n    res = int(R * (R + 1) // 2)\n    res -= int(L * (L - 1) // 2) if L > 1 else 0\n    s = 0\n    flag = False\n    n = 2\n    c = 1\n    while True:\n        d = int((R - c) / n)\n        if d <= 0:\n            break\n        if not flag:\n            d2 = int((L - 1 - c) / n)\n            if d2 <= 0:\n                flag = True\n            d -= d2\n        s -= d * c\n        n *= 2\n        c *= 2\n    n = 1\n    while n <= R:\n        if n >= L:\n            s -= n + 1\n        n *= 2\n    print(res + int(s))", "def lowest_bits(n):\n    start = n\n    current = 1\n    total = 0\n    while n > 0:\n        (n, r) = divmod(n, 2)\n        total += current * (n + r)\n        current <<= 1\n    return total\nfor _ in range(int(input())):\n    (l, r) = list(map(int, input().strip().split()))\n    total = (r - l + 1) * (r + l) // 2\n    total -= lowest_bits(r)\n    total += lowest_bits(l - 1)\n    i = 1\n    while i <= r:\n        if l <= i <= r:\n            total -= 1\n        i <<= 1\n    print(total)", "from math import *\n\ndef finddiff(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return -1\n    if n == 2:\n        return -2\n    c = 1\n    res = 0\n    while c <= n:\n        res += (n // c - n // (2 * c)) * c\n        c = c * 2\n    powers = int(log(n, 2))\n    return n * (n + 1) // 2 - res - (powers + 1)\nt = int(input())\nwhile t:\n    t -= 1\n    (l, r) = map(int, input().split())\n    print(finddiff(r) - finddiff(l - 1))", "from math import *\n\ndef find(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return -1\n    if n == 2:\n        return -2\n    a = 1\n    ans = 0\n    while a <= n:\n        ans += (floor(n / a) - floor(n / (2 * a))) * a\n        a *= 2\n    k = int(log(n, 2))\n    return n * (n + 1) // 2 - int(ans) - k - 1\nt = int(input())\nfor _ in range(t):\n    (l, r) = list(map(int, input().split()))\n    print(find(r) - find(l - 1))", "import sys\nT = int(input())\nfor t in range(T):\n    (L, R) = map(int, input().split(' '))\n    res = int(R * (R + 1) // 2)\n    res -= int(L * (L - 1) // 2) if L > 1 else 0\n    s = 0\n    flag = False\n    n = 2\n    c = 1\n    while True:\n        d = int((R - c) / n)\n        if d <= 0:\n            break\n        if not flag:\n            d2 = int((L - 1 - c) / n)\n            if d2 <= 0:\n                flag = True\n            d -= d2\n        s -= d * c\n        n *= 2\n        c *= 2\n    n = 1\n    while n <= R:\n        if n >= L:\n            s -= n + 1\n        n *= 2\n    print(res + int(s))", "from sys import stdin\npot2 = []\nfor i in range(100):\n    x = 2 ** i\n    if x > 10 ** 9:\n        break\n    pot2.append(x)\npot2 = pot2[::-1]\n\ndef tot(x):\n    acum = 0\n    ans = 0\n    ones = 0\n    aux = x * (x + 1)\n    aux = aux // 2\n    for i in pot2:\n        y = x // i - acum\n        if y >= 1:\n            ones += 1\n            acum += 1\n            y -= 1\n            aux -= i\n        ans += y * i\n        acum = x // i\n    ans = aux - ans - ones\n    return ans\nT = int(stdin.readline().strip())\nfor case in range(T):\n    (a, b) = map(int, stdin.readline().strip().split())\n    print(tot(b) - tot(a - 1))", "def lowest_bits(n):\n    start = n\n    current = 1\n    total = 0\n    while n > 0:\n        (n, r) = divmod(n, 2)\n        total += current * (n + r)\n        current <<= 1\n    return total\nfor _ in range(int(input())):\n    (l, r) = list(map(int, input().strip().split()))\n    total = (r - l + 1) * (r + l) // 2\n    total -= lowest_bits(r)\n    total += lowest_bits(l - 1)\n    i = 1\n    while i <= r:\n        if l <= i <= r:\n            total -= 1\n        i <<= 1\n    print(total)", "import math\n\ndef func(x):\n    temp = x\n    if x == 0:\n        return 0\n    if x == 1:\n        return -1\n    if x == 2:\n        return -2\n    count = 0\n    total = x * (x + 1) // 2\n    x = x + 1\n    while x > 1:\n        count_one = x // 2\n        total -= count_one * 2 ** count\n        x = x - count_one\n        count += 1\n    return total - math.floor(math.log(temp) / math.log(2)) - 1\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input().split()))\n    (l, r) = (s[0], s[1])\n    print(func(r) - func(l - 1))"]