["import sys\n\ndef solve():\n    (n, m) = (int(x) for x in input().split())\n    A = [0] * n\n    for i in range(m):\n        (_, *S) = [int(x) for x in input().split()]\n        for val in S:\n            A[val] += 2 ** i\n    A = sorted(A)\n    k = n\n    for i in range(n - 1):\n        if A[i] == A[i + 1]:\n            k -= 1\n    print(k)\nfor _ in range(int(input())):\n    solve()", "import sys\n\ndef solve():\n    (n, m) = (int(x) for x in input().split())\n    A = [0] * n\n    for i in range(m):\n        (_, *S) = [int(x) for x in input().split()]\n        for val in S:\n            A[val] += 2 ** i\n    A = sorted(A)\n    k = n\n    for i in range(n - 1):\n        if A[i] == A[i + 1]:\n            k -= 1\n    print(k)\nfor _ in range(int(input())):\n    solve()", "import sys\n\ndef solve():\n    (n, m) = (int(x) for x in input().split())\n    A = [0] * n\n    for i in range(m):\n        (_, *S) = [int(x) for x in input().split()]\n        for val in S:\n            A[val] += 2 ** i\n    A = sorted(A)\n    k = n\n    for i in range(n - 1):\n        if A[i] == A[i + 1]:\n            k -= 1\n    print(k)\nfor _ in range(int(input())):\n    solve()", "import sys\n\ndef solve():\n    (n, m) = (int(x) for x in input().split())\n    A = [0] * n\n    for i in range(m):\n        (_, *S) = [int(x) for x in input().split()]\n        for val in S:\n            A[val] += 2 ** i\n    A = sorted(A)\n    k = n\n    for i in range(n - 1):\n        if A[i] == A[i + 1]:\n            k -= 1\n    print(k)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    (n, m) = (int(x) for x in input().split())\n    A = [0] * n\n    for i in range(m):\n        (_, *S) = [int(x) for x in input().split()]\n        for val in S:\n            A[val] += 2 ** i\n    A = sorted(A)\n    k = n\n    for i in range(n - 1):\n        if A[i] == A[i + 1]:\n            k -= 1\n    print(k)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    (n, m) = (int(x) for x in input().split())\n    A = [0] * n\n    for i in range(m):\n        (_, *S) = [int(x) for x in input().split()]\n        for val in S:\n            A[val] += 2 ** i\n    A.sort()\n    k = n\n    for i in range(n - 1):\n        if A[i] == A[i + 1]:\n            k -= 1\n    print(k)\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor _ in range(t):\n    (n, m) = (int(x) for x in input().split())\n    arr = [0] * n\n    for i in range(m):\n        (_, *arr_tmp) = [int(x) for x in input().split()]\n        for val in arr_tmp:\n            arr[val] += 2 ** i\n    arr_sorted = sorted(arr)\n    count = n\n    prev = arr_sorted[0]\n    for val in arr_sorted[1:]:\n        if val == prev:\n            count -= 1\n        prev = val\n    print(count)", "t = int(input())\nfor _ in range(t):\n    (n, m) = (int(x) for x in input().split())\n    arr = [0] * n\n    for i in range(m):\n        (_, *arr_tmp) = [int(x) for x in input().split()]\n        for val in arr_tmp:\n            arr[val] += 2 ** i\n    arr_sorted = sorted(arr)\n    count = n\n    prev = arr_sorted[0]\n    for val in arr_sorted[1:]:\n        if val == prev:\n            count -= 1\n        prev = val\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    atomlist = [''] * n\n    for k in range(m):\n        s = []\n        s.extend(input().split()[1:])\n        for w in range(n):\n            if str(w) in s:\n                atomlist[w] += '1'\n            else:\n                atomlist[w] += '0'\n    print(len(set(atomlist)))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    atomlist = [''] * n\n    for k in range(m):\n        s = []\n        s.extend(input().split()[1:])\n        for w in range(n):\n            if str(w) in s:\n                atomlist[w] += '1'\n            else:\n                atomlist[w] += '0'\n    print(len(set(atomlist)))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    atomlist = [''] * n\n    for k in range(m):\n        s = []\n        s.extend(input().split()[1:])\n        for w in range(n):\n            if str(w) in s:\n                atomlist[w] += '1'\n            else:\n                atomlist[w] += '0'\n    print(len(set(atomlist)))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    atom = [''] * n\n    for k in range(m):\n        s = []\n        s.extend(input().split()[1:])\n        for h in range(n):\n            if str(h) in s:\n                atom[h] += '1'\n            else:\n                atom[h] += '0'\n    print(len(set(atom)))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    atom = [''] * n\n    for k in range(m):\n        s = []\n        s.extend(input().split()[1:])\n        for h in range(n):\n            if str(h) in s:\n                atom[h] += '1'\n            else:\n                atom[h] += '0'\n    print(len(set(atom)))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = [''] * n\n    for j in range(m):\n        s = []\n        s.extend(input().split()[1:])\n        for k in range(n):\n            if str(k) in s:\n                a[k] += '1'\n            else:\n                a[k] += '0'\n    print(len(set(a)))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    atomlist = [''] * n\n    for k in range(m):\n        s = []\n        s.extend(input().split()[1:])\n        for w in range(n):\n            if str(w) in s:\n                atomlist[w] += '1'\n            else:\n                atomlist[w] += '0'\n    print(len(set(atomlist)))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    atomlist = [''] * n\n    for k in range(m):\n        s = []\n        s.extend(input().split()[1:])\n        for w in range(n):\n            if str(w) in s:\n                atomlist[w] += '1'\n            else:\n                atomlist[w] += '0'\n    print(len(set(atomlist)))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    atomlist = [''] * n\n    for k in range(m):\n        s = []\n        s.extend(input().split()[1:])\n        for w in range(n):\n            if str(w) in s:\n                atomlist[w] += '1'\n            else:\n                atomlist[w] += '0'\n    print(len(set(atomlist)))", "ind = []\n\ndef add(i, j):\n    while i != ind[i]:\n        i = ind[i]\n    while j != ind[j]:\n        j = ind[j]\n    ind[j] = i\n\ndef binarySearch(alist, item):\n    first = 0\n    last = len(alist) - 1\n    found = False\n    while first <= last and (not found):\n        midpoint = (first + last) // 2\n        if alist[midpoint] == item:\n            found = True\n        elif item < alist[midpoint]:\n            last = midpoint - 1\n        else:\n            first = midpoint + 1\n    return found\nt = int(input().strip())\nwhile t:\n    t -= 1\n    ind = []\n    (n, m) = map(int, input().strip().split())\n    for i in range(n):\n        ind.append(i)\n    st = []\n    for i in range(m):\n        l = list(map(int, input().strip().split()[1:]))\n        l.sort()\n        st.append(l)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if ind[j] != j:\n                continue\n            for k in range(m):\n                if binarySearch(st[k], i) != binarySearch(st[k], j):\n                    break\n            else:\n                add(i, j)\n    l = sum((1 if ind[i] == i else 0 for i in range(n)))\n    print(l)", "t = int(input())\nfor _ in range(t):\n    (n, m) = (int(x) for x in input().split())\n    arr = [0] * n\n    for i in range(m):\n        (_, *arr_tmp) = [int(x) for x in input().split()]\n        for val in arr_tmp:\n            arr[val] += 2 ** i\n    arr_sorted = sorted(arr)\n    count = n\n    prev = arr_sorted[0]\n    for val in arr_sorted[1:]:\n        if val == prev:\n            count -= 1\n        prev = val\n    print(count)", "def solve(n, m, arr):\n    vals = [0] * n\n    for (i, subarray) in enumerate(arr):\n        for val in subarray:\n            vals[val] += 2 ** i\n    vals = sorted(vals)\n    count = n\n    prev = vals[0]\n    for val in vals[1:]:\n        if val == prev:\n            count -= 1\n        prev = val\n    return count\nt = int(input())\nfor _ in range(t):\n    (n, m) = (int(x) for x in input().split())\n    arrs = []\n    for _ in range(m):\n        arr = [int(x) for x in input().split()]\n        arrs.append(arr[1:])\n    print(solve(n, m, arrs))", "t = int(input())\nfor _ in range(t):\n    (n, m) = (int(x) for x in input().split())\n    arr = [0] * n\n    for i in range(m):\n        (_, *arr_tmp) = [int(x) for x in input().split()]\n        for val in arr_tmp:\n            arr[val] += 2 ** i\n    arr = sorted(arr)\n    count = n\n    for i in range(n - 1):\n        if arr[i] == arr[i + 1]:\n            count -= 1\n    print(count)", "def solve(n, m, arr):\n    vals = [0] * n\n    for (i, subarray) in enumerate(arr):\n        for val in subarray:\n            vals[val] += 2 ** i\n    vals = sorted(vals)\n    count = n\n    for i in range(n - 1):\n        if vals[i] == vals[i + 1]:\n            count -= 1\n    return count\nt = int(input())\nfor _ in range(t):\n    (n, m) = (int(x) for x in input().split())\n    arrs = []\n    for _ in range(m):\n        arr = [int(x) for x in input().split()]\n        arrs.append(arr[1:])\n    print(solve(n, m, arrs))", "def find(v, u):\n    if v == u[v]:\n        return v\n    return find(u[v], u)\n\ndef union(u, v, uf):\n    uf[find(v, uf)] = find(u, uf)\n\ndef solve_c(n, m, arr):\n    setsmap = [0 for i in range(n)]\n    union_find = [i for i in range(n)]\n    for (set_index, s_arr) in enumerate(arr):\n        for val in s_arr:\n            setsmap[val] |= 1 << set_index\n    for i in range(n):\n        for j in range(i + 1, n):\n            if setsmap[i] == setsmap[j]:\n                union(i, j, union_find)\n    count = 0\n    for i in range(n):\n        if union_find[i] == i:\n            count += 1\n    return count\nt = int(input())\nfor _ in range(t):\n    (n, m) = (int(x) for x in input().split())\n    arrs = []\n    for _ in range(m):\n        arr = [int(x) for x in input().split()]\n        arrs.append(arr[1:])\n    print(solve_c(n, m, arrs))"]