["for _ in range(int(input())):\n    (n, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = []\n    temp = []\n    record = []\n    total = 0\n    ones = 0\n    zeros = 0\n    for i in range(n):\n        if a[i] == 1:\n            if len(temp) >= z and temp[-z] == 1:\n                total -= 1\n            total += 1\n            temp.append(1)\n            record.append(len(temp) - 1)\n            if zeros != 0:\n                total -= zeros\n                counter = min(len(temp), zeros)\n                for v in record[:-z - 1:-1]:\n                    temp[v] = 0\n                    counter -= 1\n                    del record[-1]\n                    if counter == 0:\n                        break\n                zeros = 0\n            total = max(0, total)\n            dp.append(total)\n        else:\n            zeros += 1\n    ans = [0] * n\n    ind = 0\n    for i in range(n):\n        if a[i] == 1:\n            shift = i - (z - dp[ind])\n            ans[max(shift, ind)] = 1\n            ind += 1\n    print(' '.join((str(v) for v in ans)))", "for _ in range(int(input())):\n    (n, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = []\n    temp = []\n    record = []\n    total = 0\n    ones = 0\n    zeros = 0\n    for i in range(n):\n        if a[i] == 1:\n            if len(temp) >= z and temp[-z] == 1:\n                total -= 1\n            total += 1\n            temp.append(1)\n            record.append(len(temp) - 1)\n            if zeros != 0:\n                total -= zeros\n                counter = min(len(temp), zeros)\n                for v in record[:-z - 1:-1]:\n                    temp[v] = 0\n                    counter -= 1\n                    del record[-1]\n                    if counter == 0:\n                        break\n                zeros = 0\n            total = max(0, total)\n            dp.append(total)\n        else:\n            zeros += 1\n    ans = [0] * n\n    ind = 0\n    for i in range(n):\n        if a[i] == 1:\n            shift = i - (z - dp[ind])\n            ans[max(shift, ind)] = 1\n            ind += 1\n    print(' '.join((str(v) for v in ans)))", "for _ in range(int(input())):\n    (n, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = []\n    temp = []\n    record = []\n    total = 0\n    ones = 0\n    zeros = 0\n    for i in range(n):\n        if a[i] == 1:\n            if len(temp) >= z and temp[-z] == 1:\n                total -= 1\n            total += 1\n            temp.append(1)\n            record.append(len(temp) - 1)\n            if zeros != 0:\n                total -= zeros\n                counter = min(len(temp), zeros)\n                for v in record[:-z - 1:-1]:\n                    temp[v] = 0\n                    counter -= 1\n                    del record[-1]\n                    if counter == 0:\n                        break\n                zeros = 0\n            total = max(0, total)\n            dp.append(total)\n        else:\n            zeros += 1\n    ans = [0] * n\n    ind = 0\n    for i in range(n):\n        if a[i] == 1:\n            shift = i - (z - dp[ind])\n            ans[max(shift, ind)] = 1\n            ind += 1\n    print(' '.join((str(v) for v in ans)))", "import math\nt = int(input())\nwhile t > 0:\n    (n, z) = [int(x) for x in input().split()]\n    seq = [int(x) for x in input().split()]\n    run = []\n    last = 0\n    ones = False\n    timer = []\n    ans = []\n    ct = 0\n    tots = -1\n    iso = True\n    for i in range(n):\n        if seq[i] == 1:\n            ans.append(z)\n            tots += 1\n            if last == 1:\n                run.append(0)\n            act = ct - 1\n            marked = []\n            for m in range(len(run) - 1, -1, -1):\n                run[m] += 1\n                if act > 0:\n                    act -= 1\n                    marked.append(m)\n                elif run[m] <= z:\n                    ans[tots] -= 1\n                else:\n                    marked.append(m)\n            marked.sort(reverse=True)\n            for b in marked:\n                del run[b]\n            ct = 0\n            last = seq[i]\n        else:\n            ct += 1\n        last = seq[i]\n    final = []\n    last = -1\n    tots = -1\n    for l in range(n):\n        if seq[l] == 1:\n            tots += 1\n            if ans[tots] > 0:\n                temp = ans[tots]\n            else:\n                temp = 0\n            if l - temp > last:\n                final.append(l - temp)\n                last = l - temp\n            else:\n                final.append(last + 1)\n                last += 1\n    fk = 0\n    mx = len(final)\n    for f in range(n):\n        if fk < mx and final[fk] == f:\n            print(1, end=' ')\n            fk += 1\n        else:\n            print(0, end=' ')\n    if t != 1:\n        print('')\n    else:\n        print('', end='')\n    t -= 1", "test = int(input())\nwhile test != 0:\n    (n, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ones = []\n    for i in range(n):\n        if a[i] == 1:\n            ones.append(i)\n    while z > 0:\n        flag = True\n        flag2 = False\n        cluster = False\n        for i in range(len(ones) - 1):\n            if ones[i + 1] - ones[i] > 1:\n                flag2 = True\n                continue\n            if flag2:\n                if ones[i + 1] - ones[i] == 1:\n                    cluster = True\n                    break\n        if cluster == False:\n            break\n        for i in range(len(ones)):\n            if i == len(ones) - 1:\n                if flag:\n                    if ones[i] - 1 < i:\n                        ones[i] = i\n                    else:\n                        ones[i] -= 1\n            elif flag:\n                if ones[i + 1] - ones[i] == 1:\n                    flag = False\n                if ones[i] - 1 < i:\n                    ones[i] = i\n                else:\n                    ones[i] -= 1\n            elif ones[i + 1] - ones[i] > 1:\n                flag = True\n        z -= 1\n    if z > 0:\n        for i in range(len(ones)):\n            if ones[i] - z < i:\n                ones[i] = i\n            else:\n                ones[i] -= z\n    ptr = 0\n    for i in range(n):\n        if i == ones[ptr]:\n            print('1 ', end='')\n            if ptr + 1 < len(ones):\n                ptr += 1\n        else:\n            print('0 ', end='')\n    print('')\n    test -= 1", "t = int(input())\nfor naman in range(t):\n    (n, z) = map(int, input().split())\n    l = list(map(int, input().split()))\n    listof1 = []\n    ans = [0] * n\n    for i in range(len(l)):\n        if l[i] == 1:\n            listof1.append(i)\n    n1 = len(listof1)\n    for i in range(n1 - 1):\n        if listof1[i + 1] - listof1[i] == 1:\n            cont = True\n            break\n    k = z\n    while cont and k > 0:\n        flag2 = 0\n        flag = 0\n        flag3 = 0\n        for i in range(n1):\n            if flag == 1:\n                if i != n1 - 1:\n                    if listof1[i + 1] - listof1[i] != 1:\n                        flag = 0\n            elif i != n1 - 1 and i != 0:\n                if listof1[i + 1] - listof1[i] == 1:\n                    listof1[i] = max(listof1[i - 1] + 1, listof1[i] - 1)\n                    flag = 1\n                else:\n                    listof1[i] = max(listof1[i - 1] + 1, listof1[i] - 1)\n                    flag = 0\n            elif i == 0:\n                if listof1[i + 1] - listof1[i] == 1:\n                    listof1[i] = max(listof1[i] - 1, 0)\n                    flag = 1\n                else:\n                    listof1[i] = max(listof1[i] - 1, 0)\n                    flag = 0\n            else:\n                listof1[i] = max(listof1[i - 1] + 1, listof1[i] - 1)\n        k = k - 1\n        for i in range(n1 - 1):\n            if flag3 == 0:\n                if listof1[i + 1] - listof1[i] != 1:\n                    flag3 = 1\n            elif listof1[i + 1] - listof1[i] == 1:\n                cont = True\n                flag2 = 1\n                break\n        if flag2 == 0:\n            cont = False\n    if k > 0:\n        for i in range(n1):\n            if i == 0:\n                listof1[i] = max(0, listof1[i] - k)\n            else:\n                listof1[i] = max(listof1[i - 1] + 1, listof1[i] - k)\n        for i in listof1:\n            ans[i] = 1\n        for i in ans:\n            print(i, end=' ')\n    else:\n        for i in listof1:\n            ans[i] = 1\n        for i in ans:\n            print(i, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = []\n    temp = []\n    record = []\n    total = 0\n    ones = 0\n    zeros = 0\n    for i in range(n):\n        if a[i] == 1:\n            if len(temp) >= z and temp[-z] == 1:\n                total -= 1\n            total += 1\n            temp.append(1)\n            record.append(len(temp) - 1)\n            if zeros != 0:\n                total -= zeros\n                counter = min(len(temp), zeros)\n                for v in record[:-z - 1:-1]:\n                    temp[v] = 0\n                    counter -= 1\n                    del record[-1]\n                    if counter == 0:\n                        break\n                zeros = 0\n            total = max(0, total)\n            dp.append(total)\n        else:\n            zeros += 1\n    ans = [0] * n\n    ind = 0\n    for i in range(n):\n        if a[i] == 1:\n            shift = i - (z - dp[ind])\n            ans[max(shift, ind)] = 1\n            ind += 1\n    print(' '.join((str(v) for v in ans)))", "def find(arr):\n    if arr == []:\n        return []\n    elif arr[-1] == 0:\n        return find(arr[:-1])\n    else:\n        aux = []\n        count = 0\n        for i in range(1, len(arr) + 1):\n            if arr[-i] == 0:\n                aux += [arr[-i]]\n                count += 1\n            elif arr[-i] == 1:\n                if count > 0:\n                    count -= 1\n                else:\n                    aux += [1]\n    aux = aux[::-1]\n    return aux\nt = int(input())\nfor _ in range(t):\n    (n, z) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    onespos = {i: float('inf') for i in range(1, len(arr) + 1)}\n    jumps = []\n    currentones = 0\n    currentzeros = 0\n    numones = 0\n    pos = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            pos = i\n            numones = 1\n            currentones = 1\n            currentzeros = min(i, z)\n            jumps += [min(i, z)]\n            onespos[1] = i\n            break\n    for i in range(pos + 1, len(arr)):\n        if arr[i] == 0:\n            count += 1\n        else:\n            currentones += 1\n            numones -= count\n            if numones <= 0:\n                pos = i - currentones + 1\n                jumps += [min(z, pos)]\n                numones = 1\n                onespos[1] = pos\n                count = 0\n                currentzeros = min(z, pos)\n            else:\n                pos += 1\n                till = onespos[numones]\n                if pos - z <= 0:\n                    currentzeros = currentzeros + count\n                else:\n                    numone = z - currentzeros\n                    if count <= numone:\n                        for i in range(1, len(arr) + 1):\n                            if onespos[i] > pos - z - 1:\n                                currentzeros = currentzeros + count - 1\n                                break\n                            elif onespos[i] == pos - z - 1:\n                                currentzeros = currentzeros + count\n                                break\n                    else:\n                        count = numone\n                        currentzeros += count\n                jumps += [currentzeros]\n                numones += 1\n                onespos[numones] = pos\n                count = 0\n    ans = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            ans[i - jumps[0]] = 1\n            jumps.pop(0)\n    ans = list(map(str, ans))\n    print(' '.join(ans))", "def myfunction0(binary, Z, origlength):\n    seperated = False\n    while not seperated:\n        Z -= 1\n        totalincongestion = 0\n        incongestion = 0\n        for i in range(len(binary) + 1):\n            if i > 1:\n                if binary[i - 2] == binary[i - 1] - 1:\n                    incongestion += 1\n                    if i - 1 == len(binary) - 1 and binary[i - 1] != origlength - 1:\n                        totalincongestion += incongestion\n                else:\n                    totalincongestion += incongestion\n                    incongestion = 0\n            if i <= len(binary) - 1:\n                if i == len(binary) - 1:\n                    if binary[i] != origlength - 1:\n                        binary[i] += 1\n                elif binary[i + 1] == binary[i] + 1:\n                    pass\n                else:\n                    binary[i] += 1\n        if Z == 0:\n            return binary\n        if totalincongestion == 0:\n            seperated = True\n    for i in range(len(binary) - 1, -1, -1):\n        if binary[i] + Z > origlength - 1:\n            if i == len(binary) - 1:\n                binary[i] = origlength - 1\n            else:\n                binary[i] = binary[i + 1] - 1\n        elif i == len(binary) - 1:\n            binary[i] += Z\n        elif binary[i] + Z >= binary[i + 1]:\n            binary[i] = binary[i + 1] - 1\n        else:\n            binary[i] += Z\n    return binary\n\ndef myfunction1(binary, Z, origlength):\n    seperated = False\n    while not seperated:\n        Z -= 1\n        totalincongestion = 0\n        incongestion = 0\n        for i in range(len(binary) - 1, -2, -1):\n            if i < len(binary) - 2:\n                if binary[i + 2] == binary[i + 1] + 1:\n                    incongestion += 1\n                    if i + 1 == 0 and binary[i + 1] != 0:\n                        totalincongestion += incongestion\n                else:\n                    totalincongestion += incongestion\n                    incongestion = 0\n            if i >= 0:\n                if i == 0:\n                    if binary[i] != 0:\n                        binary[i] -= 1\n                elif binary[i - 1] == binary[i] - 1:\n                    pass\n                else:\n                    binary[i] -= 1\n        if Z == 0:\n            return binary\n        if totalincongestion == 0:\n            seperated = True\n    for i in range(len(binary)):\n        if binary[i] - Z < 0:\n            if i == 0:\n                binary[i] = 0\n            else:\n                binary[i] = binary[i - 1] + 1\n        elif i == 0:\n            binary[i] -= Z\n        elif binary[i] - Z <= binary[i - 1]:\n            binary[i] = binary[i - 1] + 1\n        else:\n            binary[i] -= Z\n    return binary\nfor i in range(int(input())):\n    (g, Z) = list(map(int, input().split()))\n    mylist = input().split()\n    zerolist = []\n    onelist = []\n    for j in range(len(mylist)):\n        if mylist[j] == '0':\n            zerolist.append(j)\n        else:\n            onelist.append(j)\n    if len(zerolist) < len(onelist):\n        new_array = myfunction0(zerolist, Z, len(mylist))\n        for i in range(len(mylist)):\n            if len(new_array) == 0:\n                print('1 ' * (len(mylist) - i))\n                break\n            elif i == new_array[0]:\n                new_array.pop(0)\n                if i == len(mylist) - 1:\n                    print('0')\n                else:\n                    print('0', end=' ')\n            elif i == len(mylist) - 1:\n                print('1')\n            else:\n                print('1', end=' ')\n    else:\n        new_array = myfunction1(onelist, Z, len(mylist))\n        for i in range(len(mylist)):\n            if len(new_array) == 0:\n                print('0 ' * (len(mylist) - i))\n                break\n            elif i == new_array[0]:\n                new_array.pop(0)\n                if i == len(mylist) - 1:\n                    print('1')\n                else:\n                    print('1', end=' ')\n            elif i == len(mylist) - 1:\n                print('0')\n            else:\n                print('0', end=' ')", "def myfunction0(binary, Z, origlength):\n    seperated = False\n    while not seperated:\n        Z -= 1\n        totalincongestion = 0\n        incongestion = 0\n        for i in range(len(binary) + 1):\n            if i > 1:\n                if binary[i - 2] == binary[i - 1] - 1:\n                    incongestion += 1\n                    if i - 1 == len(binary) - 1 and binary[i - 1] != origlength - 1:\n                        totalincongestion += incongestion\n                else:\n                    totalincongestion += incongestion\n                    incongestion = 0\n            if i <= len(binary) - 1:\n                if i == len(binary) - 1:\n                    if binary[i] != origlength - 1:\n                        binary[i] += 1\n                elif binary[i + 1] == binary[i] + 1:\n                    pass\n                else:\n                    binary[i] += 1\n        if Z == 0:\n            return binary\n        if totalincongestion == 0:\n            seperated = True\n    for i in range(len(binary) - 1, -1, -1):\n        if binary[i] + Z > origlength - 1:\n            if i == len(binary) - 1:\n                binary[i] = origlength - 1\n            else:\n                binary[i] = binary[i + 1] - 1\n        elif i == len(binary) - 1:\n            binary[i] += Z\n        elif binary[i] + Z >= binary[i + 1]:\n            binary[i] = binary[i + 1] - 1\n        else:\n            binary[i] += Z\n    return binary\n\ndef myfunction1(binary, Z, origlength):\n    seperated = False\n    while not seperated:\n        Z -= 1\n        totalincongestion = 0\n        incongestion = 0\n        for i in range(len(binary) - 1, -2, -1):\n            if i < len(binary) - 2:\n                if binary[i + 2] == binary[i + 1] + 1:\n                    incongestion += 1\n                    if i + 1 == 0 and binary[i + 1] != 0:\n                        totalincongestion += incongestion\n                else:\n                    totalincongestion += incongestion\n                    incongestion = 0\n            if i >= 0:\n                if i == 0:\n                    if binary[i] != 0:\n                        binary[i] -= 1\n                elif binary[i - 1] == binary[i] - 1:\n                    pass\n                else:\n                    binary[i] -= 1\n        if Z == 0:\n            return binary\n        if totalincongestion == 0:\n            seperated = True\n    for i in range(len(binary)):\n        if binary[i] - Z < 0:\n            if i == 0:\n                binary[i] = 0\n            else:\n                binary[i] = binary[i - 1] + 1\n        elif i == 0:\n            binary[i] -= Z\n        elif binary[i] - Z <= binary[i - 1]:\n            binary[i] = binary[i - 1] + 1\n        else:\n            binary[i] -= Z\n    return binary\nfor i in range(int(input())):\n    (g, Z) = list(map(int, input().split()))\n    mylist = input().split()\n    zerolist = []\n    onelist = []\n    for j in range(len(mylist)):\n        if mylist[j] == '0':\n            zerolist.append(j)\n        else:\n            onelist.append(j)\n    if len(zerolist) < len(onelist):\n        new_array = myfunction0(zerolist, Z, len(mylist))\n        for i in range(len(mylist)):\n            if len(new_array) == 0:\n                print('1 ' * (len(mylist) - i))\n                break\n            elif i == new_array[0]:\n                new_array.pop(0)\n                if i == len(mylist) - 1:\n                    print('0')\n                else:\n                    print('0', end=' ')\n            elif i == len(mylist) - 1:\n                print('1')\n            else:\n                print('1', end=' ')\n    else:\n        new_array = myfunction1(onelist, Z, len(mylist))\n        for i in range(len(mylist)):\n            if len(new_array) == 0:\n                print('0 ' * (len(mylist) - i))\n                break\n            elif i == new_array[0]:\n                new_array.pop(0)\n                if i == len(mylist) - 1:\n                    print('1')\n                else:\n                    print('1', end=' ')\n            elif i == len(mylist) - 1:\n                print('0')\n            else:\n                print('0', end=' ')", "t = int(input())\nfor i in range(t):\n    (n, z) = map(int, input().split(' '))\n    bin_seq = list(map(int, input().split(' ')))\n    req1 = []\n    curr = 0\n    while curr <= n:\n        num = 0\n        for j in range(curr, n):\n            if bin_seq[j] == 0:\n                num += 1\n            else:\n                break\n        req1.append(num)\n        curr += num + 1\n    req2 = []\n    curr = 0\n    len_req1 = len(req1)\n    while curr < len_req1 - 1:\n        inx1 = -1\n        inx2 = -1\n        while curr < len_req1 - 1:\n            if req1[curr] == 0:\n                curr += 1\n            else:\n                inx1 = curr\n                curr += 1\n                break\n        while curr < len_req1 - 1:\n            if req1[curr] != 0:\n                curr += 1\n            else:\n                inx2 = curr\n                curr += 1\n                break\n        if inx1 != -1 and inx2 == -1:\n            inx2 = len_req1 - 1\n            req2.append([inx1, inx2])\n        elif inx1 != -1 and inx2 != -1:\n            req2.append([inx1, inx2])\n    for j in range(z):\n        if len(req2) == 0:\n            break\n        for k in req2:\n            req1[k[0]] -= 1\n            req1[k[1]] += 1\n            if k[1] != len_req1 - 1:\n                k[1] += 1\n        prev_req2 = req2\n        req2 = []\n        cons = 0\n        while cons < len(prev_req2):\n            inx1 = prev_req2[cons][0]\n            inx2 = prev_req2[cons][1]\n            if req1[inx1] == 0:\n                if inx1 != len(req1) - 2:\n                    inx1 += 1\n                else:\n                    cons += 1\n                    continue\n            if req1[inx2] != 0 and inx2 != len(req1) - 1:\n                try:\n                    while req1[inx2] != 0:\n                        cons += 1\n                        inx2 = prev_req2[cons][1]\n                except:\n                    inx2 = len_req1 - 1\n            cons += 1\n            req2.append([inx1, inx2])\n    ans_str = ''\n    for j in req1:\n        for k in range(j):\n            ans_str += '0 '\n        ans_str += '1 '\n    print(ans_str[:-3])"]