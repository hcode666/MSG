["import math\n\ndef gcd_list(numbers):\n    result = numbers[0]\n    for i in range(1, len(numbers)):\n        result = math.gcd(result, numbers[i])\n    return result\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().strip().split()]\n    if a[0] > 0:\n        b = a[0]\n        for i in range(n):\n            a[i] -= b\n    a.append(360)\n    b = []\n    for i in range(n):\n        b.append(a[i + 1] - a[i])\n    c = gcd_list(b)\n    ans = 0\n    for i in b:\n        ans += i // c - 1\n    print(ans)", "from math import gcd\nfrom functools import reduce\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    slices = [a[i + 1] - a[i] for i in range(n - 1)] + [360 + a[0] - a[n - 1]]\n    sliceAngle = gcd(reduce(lambda a, b: gcd(a, b), slices), 360)\n    print(360 // sliceAngle - n)", "import math\nt = input()\nfor c in range(0, int(t)):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = []\n    ans = a[1] - a[0]\n    for i in range(1, n):\n        l.append(a[i] - a[i - 1])\n        ans = math.gcd(ans, l[-1])\n    l.append(360 - a[-1] + a[0])\n    ans = math.gcd(ans, l[-1])\n    ans = 360 // ans\n    print(ans - n)", "import math\nt = input()\nfor c in range(0, int(t)):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = []\n    ans = a[1] - a[0]\n    for i in range(1, n):\n        l.append(a[i] - a[i - 1])\n        ans = math.gcd(ans, l[-1])\n    l.append(360 - a[-1] + a[0])\n    ans = math.gcd(ans, l[-1])\n    ans = 360 // ans\n    print(ans - n)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = []\n    ans = a[1] - a[0]\n    for i in range(1, n):\n        l.append(a[i] - a[i - 1])\n        ans = math.gcd(ans, l[-1])\n    l.append(360 - a[-1] + a[0])\n    ans = math.gcd(ans, l[-1])\n    ans = 360 // ans\n    print(ans - n)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = []\n    ans = a[1] - a[0]\n    for i in range(1, n):\n        l.append(a[i] - a[i - 1])\n        ans = math.gcd(ans, l[-1])\n    l.append(360 - a[-1] + a[0])\n    ans = math.gcd(ans, l[-1])\n    ans = 360 // ans\n    print(ans - n)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split(' ')))\n    d = []\n    gcd = 360\n    for i in range(n - 1):\n        d.append(L[i] - L[i + 1])\n    d.append(L[0] + (360 - L[-1]))\n    for each in d:\n        gcd = math.gcd(gcd, each)\n    print(360 // gcd - n)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split(' ')))\n    d = []\n    gcd = 360\n    for i in range(n - 1):\n        d.append(L[i] - L[i + 1])\n    d.append(L[0] + (360 - L[-1]))\n    for each in d:\n        gcd = math.gcd(gcd, each)\n    print(360 // gcd - n)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = l[1] - l[0]\n    for j in range(2, n):\n        a = math.gcd(a, l[j] - l[j - 1])\n    a = math.gcd(a, 360 - l[-1] + l[0])\n    b = 360 / a\n    if b == int(b):\n        print(int(b) - n)\n    else:\n        print(360 - n)", "import math\nfrom functools import reduce\nfor t in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split(' ')))\n    sizes = []\n    for i in range(1, len(A)):\n        sizes.append(A[i] - A[i - 1])\n    sizes.append(A[0] + 360 - A[-1])\n    gd = reduce(lambda x, y: math.gcd(x, y), sizes)\n    ans = 0\n    for s in sizes:\n        ans += s // gd - 1\n    print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = l[1] - l[0]\n    for j in range(2, n):\n        a = math.gcd(a, l[j] - l[j - 1])\n    a = math.gcd(a, 360 - l[-1] + l[0])\n    b = 360 / a\n    if b == int(b):\n        print(int(b) - n)\n    else:\n        print(360 - n)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    temp = []\n    for i in range(n - 1):\n        temp.append(l[i + 1] - l[i])\n    temp.append(360 - l[-1] + l[0])\n    gc = temp[0]\n    for i in range(1, n):\n        gc = math.gcd(gc, temp[i])\n    print(360 // gc - n)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    temp = []\n    for i in range(n - 1):\n        temp.append(l[i + 1] - l[i])\n    temp.append(360 - l[-1] + l[0])\n    gc = temp[0]\n    for i in range(1, n):\n        gc = math.gcd(gc, temp[i])\n    print(360 // gc - n)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split(' ')))\n    d = []\n    gcd = 360\n    for i in range(n - 1):\n        d.append(L[i] - L[i + 1])\n    d.append(L[0] + (360 - L[-1]))\n    for each in d:\n        gcd = math.gcd(gcd, each)\n    print(360 // gcd - n)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split(' ')))\n    d = []\n    gcd = 360\n    for i in range(n - 1):\n        d.append(L[i] - L[i + 1])\n    d.append(L[0] + (360 - L[-1]))\n    for each in d:\n        gcd = math.gcd(gcd, each)\n    print(360 // gcd - n)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split(' ')))\n    d = []\n    gcd = 360\n    for i in range(n - 1):\n        d.append(L[i] - L[i + 1])\n    d.append(L[0] + (360 - L[-1]))\n    for each in d:\n        gcd = math.gcd(gcd, each)\n    print(360 // gcd - n)", "import math\nnum_cases = int(input())\nfor case in range(num_cases):\n    num_cuts = int(input())\n    angles = list(map(int, input().split()))\n    offset = min(angles)\n    angles = list(map(lambda a: a - offset, angles))\n    remaining_angle = 360 - max(angles)\n    angles.append(remaining_angle)\n    common_angle = angles[0]\n    for cut in range(num_cuts + 1):\n        common_angle = math.gcd(common_angle, angles[cut])\n    num_cuts_required = int(360 / common_angle)\n    print(num_cuts_required - num_cuts)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split(' ')))\n    d = []\n    gcd = 360\n    for i in range(n - 1):\n        d.append(L[i] - L[i + 1])\n    d.append(L[0] + (360 - L[-1]))\n    for each in d:\n        gcd = math.gcd(gcd, each)\n    print(360 // gcd - n)", "def gcd(a, b):\n    if a > b:\n        return gcd(b, a)\n    elif a == 0:\n        return b\n    return gcd(b % a, a)\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    sarr = []\n    for i in range(1, n):\n        sarr.append(arr[i] - arr[i - 1])\n    g = sarr[0]\n    for num in sarr[1:]:\n        g = gcd(g, num)\n    if 360 % g == 0:\n        print(360 // g - n)\n    else:\n        ans = g\n        for i in range(2, g):\n            if g % i == 0 and 360 % i == 0:\n                ans = i\n        if ans != g:\n            print(360 // ans - n)\n        else:\n            print(360 - n)\n    t -= 1", "from math import gcd\n\ndef fun(n):\n    a = list(map(int, input().split()))\n    a = a + [a[0]]\n    ps = []\n    for i in range(n - 1):\n        ps.append(a[i + 1] - a[i])\n    ps.append(360 + a[0] - a[n - 1])\n    gd = ps[n - 1]\n    for j in range(n - 1):\n        gd = gcd(gd, ps[j])\n    c = 0\n    for i in ps:\n        c += i // gd - 1\n    return c\nfor _ in range(int(input())):\n    print(fun(int(input())))", "import math\nT = int(input())\nfor x in range(T):\n    d = []\n    g = 360\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(1, n):\n        d.append(a[i] - a[i - 1])\n    d.append(a[0] + (360 - a[-1]))\n    for i in d:\n        g = math.gcd(i, g)\n    print(int(360 / g) - n)", "import math\ntests = int(input())\nfor i in range(tests):\n    length = int(input())\n    arr = list(map(int, input().split()))\n    gcd = 0\n    for j in range(length - 1):\n        gcd = math.gcd(gcd, arr[j + 1] - arr[j])\n    gcd = math.gcd(gcd, 360 + arr[0] - arr[-1])\n    requried = 360 // gcd\n    print(requried - length)", "import math\ntests = int(input())\nfor i in range(tests):\n    length = int(input())\n    arr = list(map(int, input().split()))\n    gcd = 0\n    for j in range(length - 1):\n        gcd = math.gcd(gcd, arr[j + 1] - arr[j])\n    gcd = math.gcd(gcd, 360 + arr[0] - arr[-1])\n    while 360 / gcd != 360 // gcd:\n        gcd -= 1\n    requried = 360 // gcd\n    print(requried - length)", "import math\ntests = int(input())\nfor i in range(tests):\n    length = int(input())\n    arr = list(map(int, input().split()))\n    gcd = arr[1] - arr[0]\n    for j in range(1, length - 1):\n        gcd = math.gcd(gcd, arr[j + 1] - arr[j])\n    gcd = math.gcd(gcd, 360 + arr[0] - arr[-1])\n    while 360 / gcd != 360 // gcd:\n        gcd -= 1\n    requried = 360 // gcd\n    print(requried - length)", "def gcd(a, b):\n    if min(a, b) == 0:\n        return max(a, b)\n    else:\n        return gcd(max(a, b) % min(a, b), min(a, b))\nt = int(input())\nfor i in range(t):\n    g = 0\n    o = []\n    n = int(input())\n    l = list(map(int, input().split()))\n    for j in range(n - 1):\n        o.append(l[j + 1] - l[j])\n        g = gcd(g, o[j])\n    g = gcd(g, 360 + l[0] - l[-1])\n    print(int(360 / g - len(l)))", "from math import gcd\nfrom functools import reduce\nfor _ in range(int(input())):\n    N = int(input())\n    A = [int(s) for s in input().split()]\n    g = reduce(gcd, [(a - b) % 360 for (a, b) in zip(A, A[1:] + [A[0]])], 360)\n    print(360 // g - N)", "def gcd(a, b):\n    if a > b:\n        return gcd(b, a)\n    elif a == 0:\n        return b\n    return gcd(b % a, a)\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    sarr = []\n    for i in range(1, n):\n        sarr.append(arr[i] - arr[i - 1])\n    g = sarr[0]\n    for num in sarr[1:]:\n        g = gcd(g, num)\n    if 360 % g == 0:\n        print(360 // g - n)\n    else:\n        ans = g\n        for i in range(2, g):\n            if g % i == 0 and 360 % i == 0:\n                ans = i\n        if ans != g:\n            print(360 // ans - n)\n        else:\n            print(360 - n)\n    t -= 1", "import math as m\nfor _ in range(int(input())):\n    angels = []\n    d = []\n    total = 360\n    nAngels = int(input())\n    angels = list(map(int, input().split()))\n    for i in range(1, len(angels)):\n        d.append(angels[i] - angels[i - 1])\n    d.append(angels[0] + (360 - angels[-1]))\n    for j in d:\n        total = m.gcd(total, j)\n    print(360 // total - nAngels)", "def hcfnaive(a, b):\n    if b == 0:\n        return abs(a)\n    else:\n        return hcfnaive(b, a % b)\nfor t in range(int(input())):\n    n = int(input())\n    m = 360\n    if 361 > n > 1:\n        p = list(map(int, input().split()))\n        for i in range(1, n):\n            m = min(m, p[i] - p[i - 1])\n    x = 360 - m\n    t = hcfnaive(m, x)\n    t = int(360 / t)\n    print(t - n)", "import math as m\nfor _ in range(int(input())):\n    angels = []\n    d = []\n    total = 360\n    nAngels = int(input())\n    angels = list(map(int, input().split()))\n    for i in range(1, len(angels)):\n        d.append(angels[i] - angels[i - 1])\n    d.append(angels[0] + (360 - angels[-1]))\n    for j in d:\n        total = m.gcd(total, j)\n    print(360 // total - nAngels)", "def hcfnaive(a, b):\n    if b == 0:\n        return abs(a)\n    else:\n        return hcfnaive(b, a % b)\nfor t in range(int(input())):\n    n = int(input())\n    m = 360\n    if 361 > n > 1:\n        p = list(map(int, input().split()))\n        for i in range(1, n):\n            m = min(m, p[i] - p[i - 1])\n    x = 360 - m\n    t = hcfnaive(m, x)\n    t = int(360 / t)\n    print(t - n)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nt = int(input())\nfor T in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    ang = []\n    for i in range(1, n):\n        ang.append(l[i] - l[i - 1])\n    ang.append(360 - (l[-1] - l[0]))\n    ang.sort()\n    if ang == ang[::-1]:\n        print(0)\n        continue\n    g = ang[0]\n    for i in range(1, n):\n        g = gcd(g, ang[i])\n    total = 360 // g - len(ang)\n    print(total)", "import math as m\nfor _ in range(int(input())):\n    angels = []\n    d = []\n    total = 360\n    nAngels = int(input())\n    angels = list(map(int, input().split()))\n    for i in range(1, len(angels)):\n        d.append(angels[i] - angels[i - 1])\n    d.append(angels[0] + (360 - angels[-1]))\n    for j in d:\n        total = m.gcd(total, j)\n    print(360 // total - nAngels)", "import math as m\nfor _ in range(int(input())):\n    angels = []\n    d = []\n    total = 360\n    nAngels = int(input())\n    angels = list(map(int, input().split()))\n    for i in range(1, len(angels)):\n        d.append(angels[i] - angels[i - 1])\n    d.append(angels[0] + (360 - angels[-1]))\n    for j in d:\n        total = m.gcd(total, j)\n    print(360 // total - nAngels)", "import math\nfor _ in range(int(input())):\n    angels = []\n    dif = []\n    gcd = 360\n    nAngels = int(input())\n    angels = list(map(int, input().split()))\n    for i in range(1, len(angels)):\n        dif.append(angels[i] - angels[i - 1])\n    dif.append(angels[0] + (360 - angels[-1]))\n    for d in dif:\n        gcd = math.gcd(gcd, d)\n    print(int(360 / gcd) - nAngels)", "import math\nfor _ in range(int(input())):\n    angels = []\n    dif = []\n    gcd = 360\n    nAngels = int(input())\n    angels = list(map(int, input().split()))\n    for i in range(1, len(angels)):\n        dif.append(angels[i] - angels[i - 1])\n    dif.append(angels[0] + (360 - angels[-1]))\n    for d in dif:\n        gcd = math.gcd(gcd, d)\n    print(int(360 / gcd) - nAngels)", "def hhcf(a):\n    hcf = 0\n    sm = min(a)\n    for i in range(1, sm + 1):\n        for j in a:\n            if j % i != 0:\n                break\n        else:\n            hcf = i\n    return hcf\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    b = []\n    for i in range(n - 1):\n        b.append(a[i] - a[i + 1])\n    b.append(360 - a[0] + a[n - 1])\n    h = hhcf(b)\n    mi = 360 // h\n    print(mi - n)", "import math\nt = int(input())\nfor i in range(t):\n    a = []\n    d = []\n    gcd = 360\n    n = int(input())\n    a = list(map(int, input().split()))\n    for j in range(1, len(a)):\n        d.append(a[j] - a[j - 1])\n    d.append(a[0] + (360 - a[-1]))\n    for k in d:\n        gcd = math.gcd(gcd, k)\n    print(int(360 / gcd) - n)", "import math\nfor _ in range(int(input())):\n    angels = []\n    dif = []\n    gcd = 360\n    nAngels = int(input())\n    angels = list(map(int, input().split()))\n    for i in range(1, len(angels)):\n        dif.append(angels[i] - angels[i - 1])\n    dif.append(angels[0] + (360 - angels[-1]))\n    for d in dif:\n        gcd = math.gcd(gcd, d)\n    print(int(360 / gcd) - nAngels)", "import math\nfor _ in range(int(input())):\n    angels = []\n    dif = []\n    gcd = 360\n    nAngels = int(input())\n    angels = list(map(int, input().split()))\n    for i in range(1, len(angels)):\n        dif.append(angels[i] - angels[i - 1])\n    dif.append(angels[0] + (360 - angels[-1]))\n    for d in dif:\n        gcd = math.gcd(gcd, d)\n    print(int(360 / gcd) - nAngels)", "import math\nfor _ in range(int(input())):\n    angels = []\n    dif = []\n    gcd = 360\n    nAngels = int(input())\n    angels = list(map(int, input().split()))\n    for i in range(1, len(angels)):\n        dif.append(angels[i] - angels[i - 1])\n    dif.append(angels[0] + (360 - angels[-1]))\n    for d in dif:\n        gcd = math.gcd(gcd, d)\n    print(int(360 / gcd) - nAngels)", "import math\nfor _ in range(int(input())):\n    angels = []\n    dif = []\n    gcd = 360\n    nAngels = int(input())\n    angels = list(map(int, input().split()))\n    for i in range(1, len(angels)):\n        dif.append(angels[i] - angels[i - 1])\n    dif.append(angels[0] + (360 - angels[-1]))\n    for d in dif:\n        gcd = math.gcd(gcd, d)\n    print(int(360 / gcd) - nAngels)", "import math\nfor _ in range(int(input())):\n    angels = []\n    dif = []\n    gcd = 360\n    nAngels = int(input())\n    angels = list(map(int, input().split()))\n    for i in range(1, len(angels)):\n        dif.append(angels[i] - angels[i - 1])\n    dif.append(angels[0] + (360 - angels[-1]))\n    for d in dif:\n        gcd = math.gcd(gcd, d)\n    print(int(360 / gcd) - nAngels)", "import math\nfor _ in range(int(input())):\n    angels = []\n    dif = []\n    gcd = 360\n    nAngels = int(input())\n    angels = list(map(int, input().split()))\n    for i in range(1, len(angels)):\n        dif.append(angels[i] - angels[i - 1])\n    dif.append(angels[0] + (360 - angels[-1]))\n    for d in dif:\n        gcd = math.gcd(gcd, d)\n    print(int(360 / gcd) - nAngels)", "import math\nfor _ in range(int(input())):\n    angels = []\n    dif = []\n    gcd = 360\n    nAngels = int(input())\n    angels = list(map(int, input().split()))\n    for i in range(1, len(angels)):\n        dif.append(angels[i] - angels[i - 1])\n    dif.append(angels[0] + (360 - angels[-1]))\n    for d in dif:\n        gcd = math.gcd(gcd, d)\n    print(int(360 / gcd) - nAngels)", "import math\nfor _ in range(int(input())):\n    angels = []\n    dif = []\n    gcd = 360\n    nAngels = int(input())\n    angels = list(map(int, input().split()))\n    for i in range(1, len(angels)):\n        dif.append(angels[i] - angels[i - 1])\n    dif.append(angels[0] + (360 - angels[-1]))\n    for d in dif:\n        gcd = math.gcd(gcd, d)\n    print(int(360 / gcd) - nAngels)", "import math\nfor _ in range(int(input())):\n    angels = []\n    dif = []\n    gcd = 360\n    nAngels = int(input())\n    angels = list(map(int, input().split()))\n    for i in range(1, len(angels)):\n        dif.append(angels[i] - angels[i - 1])\n    dif.append(angels[0] + (360 - angels[-1]))\n    for d in dif:\n        gcd = math.gcd(gcd, d)\n    print(int(360 / gcd) - nAngels)", "import math\nfor _ in range(int(input())):\n    angels = []\n    dif = []\n    gcd = 360\n    nAngels = int(input())\n    angels = list(map(int, input().split()))\n    for i in range(1, len(angels)):\n        dif.append(angels[i] - angels[i - 1])\n    dif.append(angels[0] + (360 - angels[-1]))\n    for d in dif:\n        gcd = math.gcd(gcd, d)\n    print(int(360 / gcd) - nAngels)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nt = int(input())\nfor T in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    ang = []\n    for i in range(1, n):\n        ang.append(l[i] - l[i - 1])\n    ang.append(360 - (l[-1] - l[0]))\n    ang.sort()\n    if ang == ang[::-1]:\n        print(0)\n        continue\n    g = ang[0]\n    for i in range(1, n):\n        g = gcd(g, ang[i])\n    total = 360 // g - len(ang)\n    print(total)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nt = int(input())\nfor T in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    ang = []\n    for i in range(1, n):\n        ang.append(l[i] - l[i - 1])\n    ang.append(360 - (l[-1] - l[0]))\n    ang.sort()\n    if ang == ang[::-1]:\n        print(0)\n        continue\n    g = ang[0]\n    for i in range(1, n):\n        g = gcd(g, ang[i])\n    total = 360 // g - len(ang)\n    print(total)", "import math\nfor _ in range(int(input())):\n    angels = []\n    dif = []\n    gcd = 360\n    nAngels = int(input())\n    angels = list(map(int, input().split()))\n    for i in range(1, len(angels)):\n        dif.append(angels[i] - angels[i - 1])\n    dif.append(angels[0] + (360 - angels[-1]))\n    for d in dif:\n        gcd = math.gcd(gcd, d)\n    print(int(360 / gcd) - nAngels)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nt = int(input())\nfor T in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    ang = []\n    for i in range(1, n):\n        ang.append(l[i] - l[i - 1])\n    ang.append(360 - (l[-1] - l[0]))\n    ang.sort()\n    if ang == ang[::-1]:\n        print(0)\n        continue\n    g = ang[0]\n    for i in range(1, n):\n        g = gcd(g, ang[i])\n    total = 360 // g - len(ang)\n    print(total)", "from functools import reduce\nfrom math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    arr = []\n    val = 0\n    for i in a:\n        arr.append(i - val)\n        val = i\n    arr[0] = 360 - (val - arr[0])\n    arr.append(360)\n    q = reduce(gcd, arr)\n    needed = 360 / q\n    print(int(needed - n))", "from math import *\nfrom functools import *\n\ndef find_gcd(l):\n    x = reduce(gcd, l)\n    return x\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(d) for d in input().split()]\n    l = []\n    for i in range(n):\n        if abs(a[i] - a[i - 1]) > 180:\n            l.append(360 - abs(a[i] - a[i - 1]))\n        else:\n            l.append(abs(a[i] - a[i - 1]))\n    each_angle = find_gcd(l)\n    if 360 % each_angle == 0:\n        total_cuts = 360 // each_angle\n        reqd_cuts = total_cuts - n\n        print(reqd_cuts)\n    else:\n        a1 = gcd(360, each_angle)\n        total_cuts = 360 // a1\n        reqd_cuts = total_cuts - n\n        print(reqd_cuts)", "from functools import reduce\nfrom math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    arr = []\n    val = 0\n    for i in a:\n        arr.append(i - val)\n        val = i\n    arr[0] = 360 - (val - arr[0])\n    arr.append(360)\n    q = reduce(gcd, arr)\n    needed = 360 / q\n    print(int(needed - n))", "def isDivisible(a, k):\n    for i in a:\n        if i % k != 0:\n            return False\n    return True\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef findHCF(l):\n    gcd = find_gcd(l[0], l[1])\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    return gcd\n\ndef calDegree(a):\n    b = []\n    p = a[0]\n    i = 1\n    while i < len(a):\n        b.append((a[i] - p) % 360)\n        p = a[i]\n        i += 1\n    return b\n\ndef calRawCount(a, k):\n    s = 0\n    for i in a:\n        s += i // k\n    return s\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    l.append(l[0])\n    a = calDegree(l)\n    HCF = findHCF(a)\n    raw_count = calRawCount(a, HCF)\n    print(raw_count - len(l) + 1)", "from functools import reduce\nfrom math import gcd\nfor _ in range(int(input())):\n    num = int(input())\n    cuts = list(map(int, input().split(' ')))\n    initial_cuts = [0] * (num - 1)\n    for i in range(0, num - 1):\n        initial_cuts[i] = cuts[i + 1] - cuts[i]\n    initial_cuts.append(360)\n    red = reduce(gcd, initial_cuts)\n    total_initial = int(360 / red)\n    vasya_cuts = total_initial - num\n    print(vasya_cuts)", "t = int(input())\n\ndef gcd(a, b):\n    if a < b:\n        a = a + b\n        b = a - b\n        a = a - b\n    if a % b == 0:\n        return b\n    else:\n        c = a % b\n        return gcd(b, c)\nfor _ in range(t):\n    n = int(input())\n    angle_list = list(map(int, input().split()))\n    slice_list = []\n    for i in range(n):\n        if i == n - 1:\n            theta = angle_list[0] + 360 - angle_list[i]\n        else:\n            theta = angle_list[i + 1] - angle_list[i]\n        slice_list.append(theta)\n    for i in range(n - 1):\n        slice_list[1] = gcd(slice_list[0], slice_list[1])\n        slice_list.pop(0)\n    slices = 360 / slice_list[0] - n\n    print(str(int(slices)))", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    lst = [int(x) for x in input().strip().split()]\n    diff = []\n    for j in range(1, len(lst)):\n        diff.append(lst[j] - lst[j - 1])\n    diff.append(360)\n    gcd = find_gcd(diff[0], diff[1])\n    for j in range(2, len(diff)):\n        gcd = find_gcd(gcd, diff[j])\n    print(360 // gcd - N)", "from functools import reduce\nfrom math import gcd\nfor _ in range(int(input())):\n    num = int(input())\n    cuts = list(map(int, input().split(' ')))\n    initial_cuts = [0] * (num - 1)\n    for i in range(0, num - 1):\n        initial_cuts[i] = cuts[i + 1] - cuts[i]\n    initial_cuts.append(360)\n    red = reduce(gcd, initial_cuts)\n    total_initial = int(360 / red)\n    vasya_cuts = total_initial - num\n    print(vasya_cuts)", "from functools import reduce\nfrom math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    arr = []\n    val = 0\n    for i in a:\n        arr.append(i - val)\n        val = i\n    arr[0] = 360 - (val - arr[0])\n    arr.append(360)\n    q = reduce(gcd, arr)\n    needed = 360 / q\n    print(int(needed - n))", "from math import gcd\nfrom functools import reduce\n\ndef n_cuts(x):\n    l = len(x)\n    if l == 360:\n        print(0)\n        return\n    mini = min(x)\n    flag = 0\n    for i in range(len(x)):\n        if x[i] % mini != 0:\n            flag = 1\n            break\n    if flag == 0:\n        if 360 % mini == 0:\n            print(360 // mini - l)\n            return\n    GCD = reduce(gcd, x)\n    result = int(360 / GCD)\n    print(result - l)\n    return\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    x = list(map(int, input().split(' ')))\n    diff = []\n    for i in range(1, len(x)):\n        diff.append(x[i] - x[i - 1])\n    diff.append(360 - x[-1] + x[0])\n    n_cuts(diff)", "t = int(input())\nfor x in range(t):\n    cu = int(input())\n    angle = list(map(int, input().split()))\n    diff = []\n    mi = float('infinity')\n    for i in range(cu - 1):\n        diff.append(angle[i + 1] - angle[i])\n        if diff[i] < mi:\n            mi = diff[i]\n    diff.append(angle[0] - angle[cu - 1] + 360)\n    if diff[cu - 1] < mi:\n        mi = diff[cu - 1]\n    div = 1\n    while div < 360:\n        smallest = mi / div\n        count = 0\n        flag = True\n        for i in diff:\n            dm = divmod(i, smallest)\n            if dm[1] != 0:\n                flag = False\n                break\n            count += dm[0]\n        if flag:\n            print(int(count - cu))\n            break\n        div += 1", "from functools import reduce\nfrom math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    arr = []\n    val = 0\n    for i in a:\n        arr.append(i - val)\n        val = i\n    arr[0] = 360 - (val - arr[0])\n    arr.append(360)\n    q = reduce(gcd, arr)\n    needed = 360 / q\n    print(int(needed - n))", "from functools import reduce\nfrom math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    arr = [0] * 360\n    for i in a:\n        arr[i] = 1\n    val = 0\n    dif = []\n    for i in range(0, 360):\n        if arr[i] == 1:\n            dif.append(i - val)\n            val = i\n    dif[0] = 360 - (val - dif[0])\n    dif.append(360)\n    q = reduce(gcd, dif)\n    needed = 360 / q\n    print(int(needed - n))", "def gcd(n1, n2):\n    m = 1\n    di = 2\n    while di <= min(n1, n2) and (n1 > 1 and n2 > 1):\n        if n1 % di == 0 and n2 % di == 0:\n            n1 //= di\n            n2 //= di\n            m *= di\n        else:\n            di += 1\n    return m\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (mi, d) = (a[1] - a[0], [a[1] - a[0]])\n    for i in range(2, n):\n        d += [a[i] - a[i - 1]]\n        if d[i - 1] % mi != 0:\n            mi = gcd(mi, d[i - 1])\n    d += [360 - a[n - 1] + a[0]]\n    if d[n - 1] % mi != 0:\n        mi = gcd(mi, d[n - 1])\n    print(360 // mi - n)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef gcd_of_list(lst):\n    a = lst[0]\n    for item in lst:\n        a = gcd(item, a)\n        if a == 1:\n            return 1\n    return a\ncases = int(input())\nfor _ in range(cases):\n    cuts = int(input())\n    angles = list(map(int, input().split()))\n    min_angle = angles[0]\n    size = []\n    for i in range(cuts):\n        if i != cuts - 1:\n            size.append(angles[i + 1] - angles[i])\n    size.append(360 - angles[-1] + angles[0])\n    diff = gcd_of_list(size)\n    print(360 // diff - len(size))", "import numpy as np\nimport math\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    aa = np.zeros([n], dtype=int)\n    for i in range(n - 1):\n        aa[i] = a[i + 1] - a[i]\n    aa[n - 1] = 360 - a[n - 1] + a[0]\n    hcf = 180\n    for i in range(n):\n        hcf = min(hcf, math.gcd(aa[i % n], aa[(i + 1) % n]))\n    print(360 // hcf - n)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef gcd_of_list(lst):\n    a = lst[0]\n    for item in lst:\n        a = gcd(item, a)\n        if a == 1:\n            return 1\n    return a\ncases = int(input())\nfor _ in range(cases):\n    cuts = int(input())\n    angles = list(map(int, input().split()))\n    min_angle = angles[0]\n    size = []\n    for i in range(cuts):\n        if i != cuts - 1:\n            size.append(angles[i + 1] - angles[i])\n    size.append(360 - angles[-1] + angles[0])\n    diff = gcd_of_list(size)\n    print(360 // diff - len(size))", "import math\nt = eval(input())\nfor g in range(t):\n    p = eval(input())\n    str = input()\n    l = str.split()\n    a = int(l[0])\n    for x in range(len(l)):\n        l[x] = int(l[x]) - a\n    a = int(l[0])\n    for x in range(1, len(l)):\n        a = math.gcd(a, l[x])\n    a = math.gcd(a, 360)\n    num = 0\n    for x in range(a, 360, a):\n        if x not in l:\n            num += 1\n    print(num)", "T = int(input())\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor i in range(T):\n    N = int(input())\n    arrst = input()\n    arr = list(map(int, arrst.split()))\n    count = 0\n    arr.sort()\n    lis = [arr[0] - arr[len(arr) - 1] + 360]\n    for j in range(len(arr) - 1):\n        lis += [arr[j + 1] - arr[j]]\n    ans = lis[0]\n    for j in range(len(arr)):\n        ans = gcd(ans, lis[j])\n    for j in range(len(arr)):\n        count += lis[j] // ans - 1\n    print(int(count))", "from math import gcd\nT = int(input())\nx = []\nfor i in range(T):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    g = a[1] - a[0]\n    for i in range(1, n):\n        g = gcd(g, a[i] - a[i - 1])\n    g = gcd(g, 360 - a[n - 1] + a[0])\n    count = 0\n    for i in range(1, n):\n        count += (a[i] - a[i - 1]) // g - 1\n    count += (360 - a[n - 1] + a[0]) // g - 1\n    print(count)", "def hcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return hcf(b, a % b)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    b = []\n    for j in range(len(a) - 1):\n        b.append(a[j + 1] - a[j])\n    b.append(360 - a[len(a) - 1] + a[0])\n    for k in range(len(b) - 1):\n        b[k + 1] = hcf(b[k], b[k + 1])\n    p = 360 / b[len(b) - 1]\n    print(int(p - len(a)))", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    x = []\n    for i in range(1, n):\n        x.append(a[i] - a[i - 1])\n    x.append(360 - a[n - 1] + a[0])\n    p = x[0]\n    s = 0\n    for i in x:\n        p = gcd(p, i)\n    for i in x:\n        s += i // p - 1\n    print(s)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    x = []\n    for i in range(1, n):\n        x.append(a[i] - a[i - 1])\n    x.append(360 - a[n - 1] + a[0])\n    p = x[0]\n    s = 0\n    for i in x:\n        p = gcd(p, i)\n    for i in x:\n        s += i // p - 1\n    print(s)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(y) for y in input().split(' ')]\n    g = l[1] - l[0]\n    count = 0\n    for i in range(1, n):\n        g = gcd(g, l[i] - l[i - 1])\n    g = gcd(g, 360 - l[n - 1] + l[0])\n    for i in range(1, n):\n        count += (l[i] - l[i - 1]) // g - 1\n    count += (360 - l[n - 1] + l[0]) // g - 1\n    print(count)", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    n = len(arr)\n    g = arr[1] - arr[0]\n    for i in range(1, n):\n        g = gcd(g, arr[i] - arr[i - 1])\n    g = gcd(g, 360 - arr[n - 1] + arr[0])\n    count = 0\n    for i in range(1, n):\n        count += (arr[i] - arr[i - 1]) // g - 1\n    count += (360 - arr[n - 1] + arr[0]) // g - 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if sum(l) == 361:\n        print(0)\n    else:\n        d = list()\n        for i in range(1, n):\n            d.append(l[i] - l[i - 1])\n        d.sort()\n        k = d[0]\n        x = l[0]\n        i = 0\n        count = 0\n        while True:\n            x = x + k\n            if i == 0:\n                f = x\n            if x >= 360:\n                x -= 360\n            if x == l[0] or (i == 1 and x == f):\n                break\n            count += 1\n            i = 1\n        print(count - n + 1)", "def giveDivisors(number):\n    ans = []\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            if number / i == i:\n                ans.append(i)\n            else:\n                ans.append(i)\n                ans.append(number // i)\n    ans.sort()\n    if ans == [1, number] or ans == [number, 1]:\n        return False\n    return ans\nimport math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    diff_arr = []\n    for i in range(1, n):\n        diff_arr.append(arr[i] - arr[i - 1])\n    thegcd = diff_arr[0]\n    for i in diff_arr:\n        thegcd = math.gcd(thegcd, i)\n    if 360 % thegcd == 0:\n        print(abs(int(360 / thegcd) - n))\n    else:\n        validDivisors = giveDivisors(thegcd)\n        for i in range(len(validDivisors) - 1, 0, -1):\n            if 360 % validDivisors[i] == 0:\n                print(360 // validDivisors[i] - n)\n                break", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor it in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    z = a[1] - a[0]\n    for i in range(2, n):\n        z = gcd(z, abs(a[i] - a[i - 1]))\n    z = gcd(z, 360 - abs(a[n - 1] - a[0]))\n    if 360 % z != 0:\n        z = 1\n    p = 360 // z - n\n    print(p)", "def compute_gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return compute_gcd(b, a % b)\nT = int(input())\nwhile T:\n    n = int(input())\n    a = list(map(int, input().split()))\n    diff = a[1] - a[0]\n    gcd = diff\n    for i in range(1, n):\n        if i == n - 1:\n            diff = 360 - a[n - 1] + a[0]\n        else:\n            diff = a[i + 1] - a[i]\n        gcd = compute_gcd(max(diff, gcd), min(diff, gcd))\n    min_cuts = int(360 / gcd) - n\n    print(min_cuts)\n    T -= 1", "from math import gcd\nT = int(input())\nfor i in range(T):\n    B = []\n    Ttl = 0\n    N = int(input())\n    A = list(map(int, input().split()))\n    for i in range(N - 1):\n        B.append(A[i + 1] - A[i])\n    B.append(A[0] + 360 - A[N - 1])\n    J = B[0]\n    for i in range(N):\n        J = gcd(B[i], J)\n    for i in range(N):\n        if B[i] // J != 1:\n            Ttl += B[i] // J - 1\n    print(Ttl)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(v) for v in input().strip().split()]\n    a.sort()\n    f = a[1] - a[0]\n    j = 2\n    while j < n - 1 and f != 1:\n        m = a[j + 1] - a[j]\n        if m != f:\n            f = math.gcd(f, m)\n        j = j + 1\n    v = math.gcd(360, f)\n    ans = int(360 / v) - n\n    print(ans)", "import numpy\nimport math\nfrom sys import stdin, stdout\nfrom bisect import bisect_left, bisect_right\n\ndef pnt(x):\n    stdout.write(str(x) + '\\n')\n\ndef pnt(x, end=' '):\n    stdout.write(str(x) + end)\n\ndef countSetBits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\ninp = lambda : int(stdin.readline())\nsip = lambda : input()\nmulip = lambda : map(int, input().split())\nlst = lambda : list(map(int, stdin.readline().split()))\nslst = lambda : list(sip())\nfor _ in range(inp()):\n    N = inp()\n    A = lst()\n    B = []\n    for i in range(0, N):\n        if i == N - 1:\n            B.append(360 + A[0] - A[i])\n        else:\n            B.append(A[i + 1] - A[i])\n    if len(set(B)) == 1:\n        print(0)\n    else:\n        N1 = B[0]\n        N2 = B[1]\n        g = gcd(N1, N2)\n        for i in range(2, len(B)):\n            g = gcd(g, B[i])\n        x = 360 // g\n        print(abs(x - N))", "def computeHCF(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nimport math\nfrom fractions import gcd\nfrom functools import reduce\n\ndef find_gcd(a):\n    x = reduce(computeHCF, a)\n    return x\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    array = list(map(int, input().split()))\n    array.sort()\n    arr = []\n    for i in range(n - 1):\n        arr.append(array[i + 1] - array[i])\n    arr.append(array[0] + 360 - array[n - 1])\n    s = find_gcd(arr)\n    cnt = 1\n    w = array[0]\n    g = array[0]\n    b = True\n    while b:\n        if g + s >= 0 and g + s < 360:\n            g = g + s\n            cnt = cnt + 1\n        else:\n            g = g + s - 360\n            cnt = cnt + 1\n        if g == w:\n            cnt = cnt - 1\n            b = False\n            break\n    print(cnt - n)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = []\n    if n == 1:\n        print(1)\n        continue\n    ans = []\n    for i in range(2, 361):\n        c = 0\n        temp = 360 // i\n        if temp == 360 / i:\n            for j in range(1, n):\n                if (a[j] - a[j - 1]) % temp == 0:\n                    c += 1\n            if c == n - 1:\n                ans.append(i - n)\n    print(min(ans))", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input()\n    ang = list(map(int, a.split()))\n    sec = []\n    for j in range(1, n):\n        sec.append(ang[j] - ang[j - 1])\n    sec.append(360 + ang[0] - ang[n - 1])\n    fihc = gcd(sec[0], sec[1])\n    for j in range(2, n):\n        fihc = gcd(fihc, sec[j])\n    tose = 0\n    for j in range(n):\n        tose = tose + sec[j] // fihc - 1\n    print(tose)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(r) for r in input().split()]\n    p = []\n    for x in range(n - 1):\n        p.append(a[x + 1] - a[x])\n    p.append(360 - a[n - 1] + a[0])\n    e = p[0]\n    for x in range(1, n):\n        e = gcd(e, p[x])\n    su = 0\n    for x in p:\n        su += x // e - 1\n    print(su)"]