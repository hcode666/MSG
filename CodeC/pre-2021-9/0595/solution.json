["from math import factorial\nfrom typing import List\nncr = lambda n, r: factorial(n) // (factorial(r) * factorial(n - r))\n\ndef soln(n: int, k: int, arr: List[int]) -> int:\n    arr.sort()\n    return ncr(arr.count(arr[k - 1]), arr[:k].count(arr[k - 1]))\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(soln(n, k, arr))", "from math import factorial\nfrom typing import List\nncr = lambda n, r: factorial(n) // (factorial(r) * factorial(n - r))\n\ndef soln(n: int, k: int, arr: List[int]) -> int:\n    arr.sort()\n    return ncr(arr.count(arr[k - 1]), arr[:k].count(arr[k - 1]))\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(soln(n, k, arr))", "from math import factorial\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    nli = sorted(list(map(int, input().split())))\n    inq_lst = nli[:k]\n    nm = inq_lst[-1]\n    cnt = inq_lst.count(nm)\n    cnt2 = nli.count(nm)\n    a = factorial(cnt2)\n    b = factorial(cnt) * factorial(cnt2 - cnt)\n    print(a // b)", "from math import factorial\ni = int(input())\nfor _ in range(i):\n    (a, b) = map(int, input().split())\n    c = list(map(int, input().split()))\n    c.sort()\n    p = c[b - 1]\n    f = c.count(p)\n    e = c[:b].count(p)\n    print(factorial(f) // (factorial(e) * factorial(f - e)))", "import math\nt = int(input())\n\ndef t_min(li, k):\n    x = 0\n    for i in range(k):\n        x += li[i]\n    return x\n\ndef cnt(li, x):\n    n = 0\n    for i in li:\n        if x == i:\n            n += 1\n    return n\n\ndef num_of_occur(li, k):\n    z = li[k - 1]\n    y = 0\n    for i in range(k):\n        if li[i] == z:\n            y += 1\n    return y\n\ndef factorials(z, y):\n    return math.factorial(z) / (math.factorial(y) * math.factorial(z - y))\nfor a in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    lis = [int(x) for x in input().split()]\n    lis.sort()\n    sumn = t_min(lis, k)\n    y = num_of_occur(lis, k)\n    z = cnt(lis, lis[k - 1])\n    print(int(factorials(z, y)))", "def integer_list():\n    return list(map(int, input().split()))\n\ndef string_list():\n    return list(map(str, input().split()))\n\ndef hetro_list():\n    return list(input().split())\nimport math\nimport sys\nfrom collections import Counter\nfact = [0] * 51\nfact[0] = 1\nfor i in range(1, 51):\n    fact[i] = fact[i - 1] * i\n\ndef main():\n    lst.sort()\n    seq = lst[:k]\n    dct2 = Counter(seq)\n    dct = Counter(lst)\n    ans = 1\n    for ele in dct2:\n        ele_req = dct2[ele]\n        ele_av = dct[ele]\n        ans *= fact[ele_av] // (fact[ele_req] * fact[ele_av - ele_req])\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    (n, k) = integer_list()\n    lst = integer_list()\n    main()", "def integer_list():\n    return list(map(int, input().split()))\n\ndef string_list():\n    return list(map(str, input().split()))\n\ndef hetro_list():\n    return list(input().split())\nimport math\nimport sys\nfrom collections import Counter\nfact = [0] * 51\nfact[0] = 1\nfor i in range(1, 51):\n    fact[i] = fact[i - 1] * i\n\ndef main():\n    lst.sort()\n    seq = lst[:k]\n    dct2 = Counter(seq)\n    dct = Counter(lst)\n    ans = 1\n    for ele in dct2:\n        ele_req = dct2[ele]\n        ele_av = dct[ele]\n        ans *= fact[ele_av] // (fact[ele_req] * fact[ele_av - ele_req])\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    (n, k) = integer_list()\n    lst = integer_list()\n    main()", "import math as m\nfor i in range(int(input())):\n    (y, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    count = x\n    x -= 1\n    while x > 0 and l[x - 1] == l[x]:\n        x = x - 1\n    box = count - x\n    upper = m.factorial(l.count(l[count - 1]))\n    lower = m.factorial(box)\n    mid = m.factorial(abs(l.count(l[count - 1]) - box))\n    print(upper // (lower * mid))", "import math as m\nfor i in range(int(input())):\n    (y, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    count = x\n    x -= 1\n    while x > 0 and l[x - 1] == l[x]:\n        x = x - 1\n    box = count - x\n    upper = m.factorial(l.count(l[count - 1]))\n    lower = m.factorial(box)\n    mid = m.factorial(abs(l.count(l[count - 1]) - box))\n    print(upper // (lower * mid))", "import math as m\nfor i in range(int(input())):\n    (y, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    count = x\n    x -= 1\n    while x > 0 and l[x - 1] == l[x]:\n        x = x - 1\n    box = count - x\n    upper = m.factorial(l.count(l[count - 1]))\n    lower = m.factorial(box)\n    mid = m.factorial(abs(l.count(l[count - 1]) - box))\n    print(upper // (lower * mid))", "import math as m\nfor i in range(int(input())):\n    (y, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    count = x\n    x -= 1\n    while x > 0 and l[x - 1] == l[x]:\n        x = x - 1\n    box = count - x\n    upper = m.factorial(l.count(l[count - 1]))\n    lower = m.factorial(box)\n    mid = m.factorial(abs(l.count(l[count - 1]) - box))\n    print(upper // (lower * mid))", "import math as m\nfor i in range(int(input())):\n    (y, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    count = x\n    x -= 1\n    while x > 0 and l[x - 1] == l[x]:\n        x = x - 1\n    box = count - x\n    upper = m.factorial(l.count(l[count - 1]))\n    lower = m.factorial(box)\n    mid = m.factorial(abs(l.count(l[count - 1]) - box))\n    print(upper // (lower * mid))", "import math as m\nfor i in range(int(input())):\n    (y, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    count = x\n    x -= 1\n    while x > 0 and l[x - 1] == l[x]:\n        x = x - 1\n    box = count - x\n    upper = m.factorial(l.count(l[count - 1]))\n    lower = m.factorial(box)\n    mid = m.factorial(abs(l.count(l[count - 1]) - box))\n    print(upper // (lower * mid))", "import math as m\nfor i in range(int(input())):\n    (y, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    count = x\n    x -= 1\n    while x > 0 and l[x - 1] == l[x]:\n        x = x - 1\n    box = count - x\n    upper = m.factorial(l.count(l[count - 1]))\n    lower = m.factorial(box)\n    mid = m.factorial(abs(l.count(l[count - 1]) - box))\n    print(upper // (lower * mid))", "import math as m\nfor i in range(int(input())):\n    (y, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if len(set(l)) == 1:\n        upper = m.factorial(l.count(l[0]))\n        lower = m.factorial(x)\n        mid = m.factorial(abs(l.count(l[0]) - x))\n        print(upper // (lower * mid))\n    else:\n        count = x\n        x -= 1\n        while l[x - 1] == l[x]:\n            x = x - 1\n        box = count - x\n        upper = m.factorial(l.count(l[count - 1]))\n        lower = m.factorial(box)\n        mid = m.factorial(abs(l.count(l[count - 1]) - box))\n        print(upper // (lower * mid))", "from math import factorial\n\ndef nCr(a, b):\n    res = factorial(a) / (factorial(b) * factorial(a - b))\n    return res\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    alist = list(map(int, input().split()))\n    slist = sorted(alist)\n    reps = 0\n    count = 0\n    maxm = 0\n    for i in range(k):\n        maxm = max(maxm, slist[i])\n    for i in range(n):\n        if slist[i] == maxm:\n            count += 1\n    for i in range(k):\n        if slist[i] == maxm:\n            reps += 1\n    print(int(nCr(count, reps)))", "from math import factorial\n\ndef nCr(a, b):\n    res = factorial(a) / (factorial(b) * factorial(a - b))\n    return res\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    alist = list(map(int, input().split()))\n    slist = sorted(alist)\n    reps = 0\n    count = 0\n    maxm = 0\n    for i in range(k):\n        maxm = max(maxm, slist[i])\n    for i in range(n):\n        if slist[i] == maxm:\n            count += 1\n    for i in range(k):\n        if slist[i] == maxm:\n            reps += 1\n    print(int(nCr(count, reps)))", "from math import factorial as fact\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    hash_arr = [0 for i in range(101)]\n    for i in l:\n        hash_arr[i] += 1\n    r = 1\n    for j in hash_arr:\n        if j <= k:\n            k -= j\n        else:\n            r *= fact(j) / (fact(k) * fact(j - k))\n            k -= j\n        if k < 0:\n            break\n    print(int(r))", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = sorted(list(map(int, input().split())))\n    x = l.count(l[k - 1])\n    y = l[:k].count(l[k - 1])\n    a = 1\n    b = 1\n    for j in range(x - y + 1, x + 1):\n        a *= j\n    for z in range(1, y + 1):\n        b *= z\n    print(a // b)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = sorted(list(map(int, input().split())))\n    i = x.count(x[k - 1])\n    j = x[:k].count(x[k - 1])\n    a = b = 1\n    for i in range(i - j + 1, i + 1):\n        a *= i\n    for j in range(1, j + 1):\n        b *= j\n    print(a // b)", "def fattoriale(n):\n    p = 1\n    for i in range(2, n + 1):\n        p *= i\n    return p\ntests = int(input())\nfor _ in range(tests):\n    (N, K) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))[:N]\n    Q = [0] * 100\n    for elem in arr:\n        Q[elem - 1] += 1\n    i = -1\n    while K > 0:\n        i += 1\n        K -= Q[i]\n    coeff = int(fattoriale(Q[i]) / (fattoriale(K + Q[i]) * fattoriale(-K)))\n    print(coeff)", "from math import factorial\nt = int(input())\nfor i in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    l.sort()\n    s = l[k - 1]\n    a = l.count(s)\n    b = l[:k].count(s)\n    print(factorial(a) // (factorial(a - b) * factorial(b)))", "from math import factorial\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    num = l[k - 1]\n    t = l.count(num)\n    r = l[:k].count(num)\n    print(factorial(t) // (factorial(r) * factorial(t - r)))", "from math import factorial\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    num = l[k - 1]\n    t = l.count(num)\n    r = l[:k].count(num)\n    print(factorial(t) // (factorial(r) * factorial(t - r)))", "from math import factorial\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    num = l[k - 1]\n    t = l.count(num)\n    r = l[:k].count(num)\n    print(factorial(t) // (factorial(r) * factorial(t - r)))", "from math import factorial as fact\nfor x in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    num = a[k - 1]\n    t = a.count(a[k - 1])\n    r = a[:k].count(num)\n    print(fact(t) // (fact(r) * fact(t - r)))", "from math import factorial as fact\nfor x in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    num = a[k - 1]\n    t = a.count(a[k - 1])\n    r = a[:k].count(num)\n    print(fact(t) // (fact(r) * fact(t - r)))", "from math import factorial as fact\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    hash_arr = [0 for i in range(101)]\n    for i in l:\n        hash_arr[i] += 1\n    r = 1\n    for j in hash_arr:\n        if j <= k:\n            k -= j\n        else:\n            r *= fact(j) / (fact(k) * fact(j - k))\n            k -= j\n        if k < 0:\n            break\n    print(int(r))", "from math import factorial\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    num = a[k - 1]\n    t = a.count(a[k - 1])\n    r = a[:k].count(num)\n    print(factorial(t) // (factorial(r) * factorial(t - r)))", "from math import factorial\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    num = a[k - 1]\n    t = a.count(a[k - 1])\n    r = a[:k].count(num)\n    print(factorial(t) // (factorial(r) * factorial(t - r)))", "from math import factorial\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    num = a[k - 1]\n    t = a.count(a[k - 1])\n    r = a[:k].count(num)\n    print(factorial(t) // (factorial(r) * factorial(t - r)))", "from math import factorial\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    num = a[k - 1]\n    t = a.count(a[k - 1])\n    r = a[:k].count(num)\n    print(factorial(t) // (factorial(r) * factorial(t - r)))", "from math import factorial\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    num = a[k - 1]\n    t = a.count(a[k - 1])\n    r = a[:k].count(num)\n    print(factorial(t) // (factorial(r) * factorial(t - r)))", "from math import *\nimport sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\ninf = 10 ** 19\n\ndef ncr(a, b):\n    ans = 1\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    for i in range(b):\n        ans *= a - i\n    for i in range(b):\n        ans //= i + 1\n    return ans\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    l.sort()\n    lst = l[:k]\n    last = lst[-1]\n    n1 = l.count(last)\n    n2 = lst.count(last)\n    print(int(ncr(n1, n2)))", "from math import factorial\ntry:\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        l = list(map(int, input().split()))\n        l.sort()\n        num = l[k - 1]\n        t = l.count(l[k - 1])\n        r = l[:k].count(num)\n        print(factorial(t) // (factorial(r) * factorial(t - r)))\nexcept:\n    pass", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef factorial(n, r):\n    p = 1\n    k = 1\n    if n - r < r:\n        r = n - r\n    if r != 0:\n        while r:\n            p *= n\n            k *= r\n            y = gcd(p, k)\n            p //= y\n            k //= y\n            n -= 1\n            r -= 1\n    return p\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    num = l[k - 1]\n    t = l.count(num)\n    r = l[:k].count(num)\n    print(factorial(t, r))", "from math import factorial as f\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    num = l[k - 1]\n    t = l.count(num)\n    r = l[:k].count(num)\n    print(f(t) // (f(r) * f(t - r)))", "from math import factorial\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    num = l[k - 1]\n    t = l.count(num)\n    r = l[:k].count(num)\n    print(factorial(t) // (factorial(r) * factorial(t - r)))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef factorial(n, r):\n    p = 1\n    k = 1\n    if n - r < r:\n        r = n - r\n    if r != 0:\n        while r:\n            p *= n\n            k *= r\n            m = gcd(p, k)\n            p //= m\n            k //= m\n            n -= 1\n            r -= 1\n    else:\n        p = 1\n    return p\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    num = l[k - 1]\n    t = l.count(l[k - 1])\n    r = l[:k].count(num)\n    print(factorial(t, r))", "from math import factorial\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    num = l[k - 1]\n    t = l.count(l[k - 1])\n    r = l[:k].count(num)\n    print(factorial(t) // (factorial(r) * factorial(t - r)))", "from math import factorial\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    num = a[k - 1]\n    r = a[:k].count(num)\n    t = a.count(num)\n    print(int(factorial(t) / (factorial(r) * factorial(t - r))))", "from math import factorial\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = sorted(list(map(int, input().split())))\n    l = arr[k - 1]\n    p = arr[:k].count(l)\n    num = arr.count(l)\n    print(int(factorial(num) / (factorial(p) * factorial(num - p))))", "from math import factorial\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = sorted(list(map(int, input().split())))\n    l = arr[k - 1]\n    x = 0\n    for i in range(k - 1, -1, -1):\n        if arr[i] == l:\n            x += 1\n    num = arr.count(l)\n    print(int(factorial(num) / (factorial(x) * factorial(num - x))))", "from functools import reduce\nfrom math import factorial as f\ncomb = lambda n, r: f(n) // (f(r) * f(n - r))\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    xs = sorted(map(int, input().split()))\n    us = list(set(xs[:k]))\n    total = (xs.count(u) for u in us)\n    required = (xs[:k].count(u) for u in us)\n    print(reduce(lambda x, y: x * y, (comb(t, r) for (t, r) in zip(total, required))))", "from math import factorial\nT = int(input())\nfor i in range(T):\n    (k, n) = map(int, input().split(' '))\n    ori_arr = [int(x) for x in input().split()]\n    ori_arr.sort()\n    cut_arr = ori_arr[:n]\n    unq = list(set(cut_arr))\n    freq_or = []\n    freq_cut = []\n    for x in unq:\n        freq_or.append(ori_arr.count(x))\n        freq_cut.append(cut_arr.count(x))\n    summ = 1\n    for x in range(len(unq)):\n        N = factorial(freq_or[x])\n        R = factorial(freq_cut[x])\n        N_R = factorial(freq_or[x] - freq_cut[x])\n        summ = summ * (N / (N_R * R))\n    print(int(summ))", "def ncr(n, r):\n    c = list()\n    for i in range(0, n + 1):\n        l = list()\n        for j in range(0, r + 1):\n            l.append(0)\n        c.append(l)\n    for i in range(0, n + 1):\n        for j in range(0, min(i, r) + 1):\n            if j == 0 or j == i:\n                c[i][j] = 1\n            elif j == 1 or j == i - 1:\n                c[i][j] = i\n            else:\n                c[i][j] = c[i - 1][j] + c[i - 1][j - 1]\n    return c[n][r]\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l = sorted(l)\n    m = max(l[:k])\n    m_count = l[:k].count(m)\n    total_count = l.count(m)\n    print(ncr(total_count, m_count))", "def ncr(n, r):\n    c = list()\n    for i in range(0, n + 1):\n        l = list()\n        for j in range(0, r + 1):\n            l.append(0)\n        c.append(l)\n    for i in range(0, n + 1):\n        for j in range(0, min(i, r) + 1):\n            if j == 0 or j == i:\n                c[i][j] = 1\n            elif j == 1 or j == i - 1:\n                c[i][j] = i\n            else:\n                c[i][j] = c[i - 1][j] + c[i - 1][j - 1]\n    return c[n][r]\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l = sorted(l)\n    m = max(l[:k])\n    m_count = l[:k].count(m)\n    total_count = l.count(m)\n    print(ncr(total_count, m_count))", "from math import factorial\nfor x in range(int(input())):\n    (k, n) = map(int, input().split(' '))\n    ori_arr = [int(x) for x in input().split()]\n    ori_arr.sort()\n    cut_arr = ori_arr[:n]\n    unq = list(set(cut_arr))\n    freq_or = []\n    freq_cut = []\n    for x in unq:\n        freq_or.append(ori_arr.count(x))\n        freq_cut.append(cut_arr.count(x))\n    summ = 1\n    for x in range(len(unq)):\n        N = factorial(freq_or[x])\n        R = factorial(freq_cut[x])\n        N_R = factorial(freq_or[x] - freq_cut[x])\n        summ = summ * (N / (N_R * R))\n    print(int(summ))", "from math import factorial\nfor x in range(int(input())):\n    (k, n) = map(int, input().split(' '))\n    ori_arr = [int(x) for x in input().split()]\n    ori_arr.sort()\n    cut_arr = ori_arr[:n]\n    unq = list(set(cut_arr))\n    freq_or = []\n    freq_cut = []\n    for x in unq:\n        freq_or.append(ori_arr.count(x))\n        freq_cut.append(cut_arr.count(x))\n    summ = 1\n    for x in range(len(unq)):\n        N = factorial(freq_or[x])\n        R = factorial(freq_cut[x])\n        N_R = factorial(freq_or[x] - freq_cut[x])\n        summ = summ * (N / (N_R * R))\n    print(int(summ))", "import math\nt = int(input())\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n    a = arr[:k]\n    temp = arr[k - 1]\n    s1 = arr.count(temp)\n    s2 = a.count(temp)\n    ans = math.factorial(s1)\n    ans = ans // (math.factorial(s1 - s2) * math.factorial(s2))\n    print(ans)", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    if k <= n:\n        c = a.count(a[k - 1])\n        d = a[:k].count(a[k - 1])\n        e = math.factorial(c) // (math.factorial(d) * math.factorial(c - d))\n        print(e)\n    else:\n        print(0)", "t = int(input())\nwhile t:\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    nis = 1\n    while k:\n        nm = a.count(min(a))\n        if nm >= k:\n            for i in range(k):\n                nis *= nm - i\n            kf = 1\n            for i in range(2, k + 1):\n                kf *= i\n            nis /= kf\n            break\n        else:\n            k -= nm\n            a = [x for x in a if x != min(a)]\n    print(int(nis))\n    t -= 1", "t = int(input())\nwhile t:\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    nis = 1\n    while k:\n        nm = a.count(min(a))\n        if nm >= k:\n            for i in range(k):\n                nis *= nm - i\n            kf = 1\n            for i in range(2, k + 1):\n                kf *= i\n            nis /= kf\n            break\n        else:\n            k -= nm\n            a = [x for x in a if x != min(a)]\n    print(int(nis))\n    t -= 1", "def fact(n):\n    if n < 2:\n        return 1\n    return n * fact(n - 1)\n\ndef ncr(n, r):\n    return fact(n) // (fact(r) * fact(n - r))\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    count_z = a.count(a[k - 1])\n    count_z_seq = a[:k].count(a[k - 1])\n    print(ncr(count_z, count_z_seq))", "import math\nt = int(input())\n\ndef t_min(li, k):\n    x = 0\n    for i in range(k):\n        x += li[i]\n    return x\n\ndef cnt(li, x):\n    n = 0\n    for i in li:\n        if x == i:\n            n += 1\n    return n\n\ndef num_of_occur(li, k):\n    z = li[k - 1]\n    y = 0\n    for i in range(k):\n        if li[i] == z:\n            y += 1\n    return y\n\ndef factorials(z, y):\n    return math.factorial(z) / (math.factorial(y) * math.factorial(z - y))\nfor a in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    lis = [int(x) for x in input().split()]\n    lis.sort()\n    sumn = t_min(lis, k)\n    y = num_of_occur(lis, k)\n    z = cnt(lis, lis[k - 1])\n    print(int(factorials(z, y)))", "import math\nt = int(input())\n\ndef t_min(li, k):\n    x = 0\n    for i in range(k):\n        x += li[i]\n    return x\n\ndef cnt(li, x):\n    n = 0\n    for i in li:\n        if x == i:\n            n += 1\n    return n\n\ndef num_of_occur(li, k):\n    z = li[k - 1]\n    y = 0\n    for i in range(k):\n        if li[i] == z:\n            y += 1\n    return y\n\ndef factorials(z, y):\n    return math.factorial(z) / (math.factorial(y) * math.factorial(z - y))\nfor a in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    lis = [int(x) for x in input().split()]\n    lis.sort()\n    sumn = t_min(lis, k)\n    y = num_of_occur(lis, k)\n    z = cnt(lis, lis[k - 1])\n    print(int(factorials(z, y)))", "import math\n\ndef fact(n):\n    return math.factorial(n)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    tot = 0\n    for i in range(k):\n        tot += arr[i]\n    count = 0\n    for i in range(n):\n        if arr[i] == arr[k - 1]:\n            count += 1\n    orig_count = 0\n    for i in range(k):\n        if arr[i] == arr[k - 1]:\n            orig_count += 1\n    print(fact(count) // (fact(orig_count) * fact(count - orig_count)))", "from math import factorial as fact\nt = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    y = list(map(int, input().split()))\n    y.sort()\n    k1 = []\n    for i in range(len(y)):\n        if i > k - 1:\n            if y[i] != k1[-1]:\n                break\n            else:\n                k1.append(y[i])\n        else:\n            k1.append(y[i])\n    c = k1[k - 1]\n    ans = 0\n    for i in range(k):\n        if k1[i] == c:\n            ans += 1\n    ans2 = k1.count(c)\n    print(fact(ans2) // (fact(ans) * fact(ans2 - ans)))\n    t -= 1", "def fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\n\ndef nCr(n, r):\n    return fact(n) / (fact(r) * fact(n - r))\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr = sorted(arr)\n    last_index_of_k = arr[k - 1]\n    count = 0\n    for i in range(n):\n        if arr[i] == last_index_of_k:\n            count += 1\n    num = 0\n    for i in range(k):\n        if arr[i] == last_index_of_k:\n            num += 1\n    print(int(nCr(count, num)))", "def fact(n):\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n    return res\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    tot = 0\n    for i in range(k):\n        tot += arr[i]\n    count = 0\n    for i in range(n):\n        if arr[i] == arr[k - 1]:\n            count += 1\n    orig_count = 0\n    for i in range(k):\n        if arr[i] == arr[k - 1]:\n            orig_count += 1\n    print(fact(count) // (fact(orig_count) * fact(count - orig_count)))", "def fact(n):\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n    return res\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    tot = 0\n    for i in range(k):\n        tot += arr[i]\n    count = 0\n    for i in range(n):\n        if arr[i] == arr[k - 1]:\n            count += 1\n    orig_count = 0\n    for i in range(k):\n        if arr[i] == arr[k - 1]:\n            orig_count += 1\n    print(fact(count) // (fact(orig_count) * fact(count - orig_count)))", "def fact(n):\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n    return res\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    tot = 0\n    for i in range(k):\n        tot += arr[i]\n    count = 0\n    for i in range(n):\n        if arr[i] == arr[k - 1]:\n            count += 1\n    orig_count = 0\n    for i in range(k):\n        if arr[i] == arr[k - 1]:\n            orig_count += 1\n    print(fact(count) // (fact(orig_count) * fact(count - orig_count)))", "from math import factorial\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    x = 0\n    y = 0\n    if k > 0:\n        for j in range(n):\n            if l[j] == l[k - 1] and j < k:\n                x += 1\n            elif l[j] == l[k - 1] and j >= k:\n                y += 1\n            elif l[j] > l[k - 1]:\n                break\n        s = int(factorial(x + y) // (factorial(x) * factorial(y)))\n        print(s)\n    else:\n        print(1)", "from math import factorial as fact\nfor _ in range(0, int(input())):\n    (N, K) = list(map(int, input().split()))\n    Amain = list(map(int, input().split()))\n    Amain.sort()\n    Asub = Amain[:K]\n    n = Amain.count(Amain[K - 1])\n    r = Asub.count(Amain[K - 1])\n    Ans = fact(n) // (fact(r) * fact(n - r))\n    print(Ans)", "import math\n\ndef nCr(n, r):\n    return int(math.factorial(n) / (math.factorial(r) * math.factorial(n - r)))\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    set_arr = set(arr)\n    count = []\n    for i in sorted(set_arr):\n        count.append(arr.count(i))\n    if k < count[0]:\n        print(nCr(count[0], k))\n    elif k == count[0]:\n        print(1)\n    else:\n        ind = -1\n        summ = 0\n        while summ < k:\n            ind += 1\n            summ += count[ind]\n        req = summ - k\n        print(nCr(count[ind], req))\n    t -= 1", "import math\n\ndef nCr(n, r):\n    return int(math.factorial(n) / (math.factorial(r) * math.factorial(n - r)))\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    ele = input().split()\n    arr = [int(j) for j in ele]\n    set_arr = set(arr)\n    count = []\n    for i in sorted(set_arr):\n        count.append(arr.count(i))\n    if k < count[0]:\n        print(nCr(count[0], k))\n    elif k == count[0]:\n        print(1)\n    else:\n        ind = -1\n        summ = 0\n        while summ < k:\n            ind += 1\n            summ += count[ind]\n        req = summ - k\n        print(nCr(count[ind], req))\n    t -= 1", "def fact(n):\n    if n == 0 or n == 1:\n        return 1\n    ans = 1\n    for i in range(2, n + 1):\n        ans *= i\n    return ans\n\ndef nCr(n, r):\n    return int(fact(n) / (fact(r) * fact(n - r)))\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    ele = input().split()\n    arr = [int(j) for j in ele]\n    set_arr = set(arr)\n    count = []\n    for i in sorted(set_arr):\n        count.append(arr.count(i))\n    if k < count[0]:\n        print(nCr(count[0], k))\n    elif k == count[0]:\n        print(1)\n    else:\n        ind = -1\n        summ = 0\n        while summ < k:\n            ind += 1\n            summ += count[ind]\n        req = summ - k\n        print(nCr(count[ind], req))\n    t -= 1", "def fact(n):\n    if n == 0 or n == 1:\n        return 1\n    ans = 1\n    for i in range(2, n + 1):\n        ans *= i\n    return ans\n\ndef nCr(n, r):\n    return int(fact(n) / (fact(r) * fact(n - r)))\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    a = A[:k]\n    if a[-1] == a[0]:\n        temp = A.count(a[0])\n        if temp > k:\n            print(nCr(temp, k))\n        else:\n            print(1)\n    else:\n        temp = A.count(a[-1])\n        if temp > a.count(a[-1]):\n            print(nCr(temp, a.count(a[-1])))\n        else:\n            print(1)", "comb = [[0 for i in range(51)] for j in range(51)]\nfor i in range(51):\n    comb[i][0] = 1\nfor i in range(1, 51):\n    for j in range(1, 51):\n        comb[i][j] = comb[i - 1][j] + comb[i - 1][j - 1]\ntest = int(input())\nwhile test > 0:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    b = a[:k]\n    print(comb[a.count(b[-1])][b.count(b[-1])])\n    test -= 1", "comb = [[0 for i in range(51)] for j in range(51)]\nfor i in range(51):\n    comb[i][0] = 1\nfor i in range(1, 51):\n    for j in range(1, 51):\n        comb[i][j] = comb[i - 1][j] + comb[i - 1][j - 1]\ntest = int(input())\nwhile test > 0:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    b = a[:k]\n    print(comb[a.count(b[-1])][b.count(b[-1])])\n    test -= 1", "comb = [[0 for i in range(51)] for j in range(51)]\nfor i in range(51):\n    comb[i][0] = 1\nfor i in range(1, 51):\n    for j in range(1, 51):\n        comb[i][j] = comb[i - 1][j] + comb[i - 1][j - 1]\ntest = int(input())\nwhile test > 0:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    b = a[:k]\n    print(comb[a.count(b[-1])][b.count(b[-1])])\n    test -= 1", "from math import factorial\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    b = a[:k]\n    c1 = b.count(b[-1])\n    c2 = a.count(b[-1])\n    print(factorial(c2) // (factorial(c1) * factorial(c2 - c1)))", "from math import factorial\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    q = l[:k]\n    a = q.count(q[-1])\n    b = l.count(q[-1])\n    print(factorial(b) // (factorial(a) * factorial(b - a)))", "from math import factorial\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    q = l[:k]\n    a = q.count(q[-1])\n    b = l.count(q[-1])\n    print(factorial(b) // (factorial(a) * factorial(b - a)))", "from math import factorial\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    q = l[:k]\n    a = q.count(q[-1])\n    b = l.count(q[-1])\n    print(factorial(b) // (factorial(a) * factorial(b - a)))", "tests = int(input())\nfor _ in range(tests):\n    (n, k) = [int(j) for j in input().split()]\n    nums = [int(j) for j in input().split()]\n    sorted_nums = list(nums)\n    sorted_nums.sort()\n    value = sorted_nums[k - 1]\n    repeats = 0\n    for i in range(k):\n        if sorted_nums[i] == value:\n            repeats += 1\n    size = repeats\n    for i in range(k, n):\n        if sorted_nums[i] == value:\n            size += 1\n    fact = [1 for _ in range(size + 1)]\n    for i in range(1, size + 1):\n        fact[i] = i * fact[i - 1]\n    print(fact[size] // (fact[repeats] * fact[size - repeats]))", "def sort(array):\n    new_list = []\n    for num in array:\n        start = 0\n        end = len(new_list)\n        while start < end:\n            mid = (start + end) // 2\n            if new_list[mid] > num:\n                end = mid\n            else:\n                start = mid + 1\n        new_list.insert(start, num)\n    return new_list\ntests = int(input())\nfor _ in range(tests):\n    (n, k) = [int(j) for j in input().split()]\n    nums = [int(j) for j in input().split()]\n    sorted_nums = sort(nums)\n    value = sorted_nums[k - 1]\n    repeats = 0\n    for i in range(k):\n        if sorted_nums[i] == value:\n            repeats += 1\n    size = repeats\n    for i in range(k, n):\n        if sorted_nums[i] == value:\n            size += 1\n    fact = [1 for _ in range(size + 1)]\n    for i in range(1, size + 1):\n        fact[i] = i * fact[i - 1]\n    print(fact[size] // (fact[repeats] * fact[size - repeats]))", "try:\n    from math import factorial\n    n = int(input())\n    for _ in range(n):\n        (n, k) = map(int, input().split())\n        l = list(map(int, input().split()))\n        l.sort()\n        seq = l[:k]\n        num = seq.count(seq[-1])\n        c = l.count(seq[-1])\n        answer = factorial(c) // (factorial(num) * factorial(c - num))\n        print(answer)\nexcept Exception as e:\n    pass", "try:\n    from math import factorial\n    n = int(input())\n    for _ in range(n):\n        (n, k) = map(int, input().split())\n        l = list(map(int, input().split()))\n        l.sort()\n        seq = l[:k]\n        num = seq.count(seq[-1])\n        c = l.count(seq[-1])\n        answer = factorial(c) // (factorial(num) * factorial(c - num))\n        print(answer)\nexcept Exception as e:\n    pass", "from math import factorial as fact\nt = int(input())\nfor _ in range(0, t):\n    (n, k) = map(int, input().split())\n    fg = list(map(int, input().split()))\n    fg.sort()\n    f = fg[:k]\n    a = f.count(f[-1])\n    b = fg.count(f[-1])\n    lp = fact(b) // (fact(a) * fact(b - a))\n    print(lp)", "from math import factorial as fac\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    q = l[:k]\n    a = q.count(q[-1])\n    b = l.count(q[-1])\n    print(fac(b) // (fac(a) * fac(b - a)))", "import math as m\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if k == n:\n        print(1)\n    elif n == 1:\n        print(1)\n    elif k == 1:\n        print(arr.count(min(arr)))\n    else:\n        arr = sorted(arr)\n        arr1 = arr[:k]\n        c = max(arr1)\n        a = arr1.count(c)\n        b = arr.count(c)\n        ans = m.factorial(b) // (m.factorial(a) * m.factorial(b - a))\n        print(ans)", "import math\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    I = a[:k]\n    b = I.count(a[k - 1])\n    c = a.count(a[k - 1])\n    res = math.factorial(c) // (math.factorial(b) * math.factorial(c - b))\n    print(res)", "from collections import Counter\nimport operator as op\nfrom functools import reduce\n\ndef nCr(n, r):\n    r = min(n - r, r)\n    num = reduce(op.mul, range(n, n - r, -1))\n    den = reduce(op.mul, range(1, r + 1))\n    return num // den\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = Counter(list(map(int, input().split())))\n    (b, c) = (sorted(a), 1)\n    i = 0\n    while k > 0:\n        k -= a[b[i]]\n        i += 1\n    if k == 0:\n        print(1)\n    else:\n        print(nCr(a[b[i - 1]], abs(k)))", "import math as m\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    lst.sort()\n    lst1 = lst[:k]\n    n = lst.count(max(lst1))\n    r = lst1.count(max(lst1))\n    print(int(m.factorial(n) / (m.factorial(n - r) * m.factorial(r))))", "import math\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr = sorted(arr)\n    l = arr[:k].count(arr[k - 1])\n    m = arr.count(arr[k - 1])\n    print(math.factorial(m) // (math.factorial(l) * math.factorial(m - l)))", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    m = arr.count(arr[k - 1])\n    l = arr[:k].count(arr[k - 1])\n    print(math.factorial(m) // (math.factorial(l) * math.factorial(m - l)))", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    kl = arr[:k].count(arr[k - 1])\n    kler = arr.count(arr[k - 1])\n    print(math.factorial(kler) // (math.factorial(kl) * math.factorial(kler - kl)))", "def fact(n):\n    factsum = 1\n    for i in range(1, n + 1):\n        factsum *= i\n    return factsum\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    lst = sorted(list(map(int, input().split())))\n    s = 0\n    ke = 0\n    for i in range(k):\n        s += lst[i]\n        if lst[i] == lst[k - 1]:\n            ke += 1\n    kt = 0\n    for i in range(n):\n        if lst[i] == lst[k - 1]:\n            kt += 1\n    print(fact(kt) // (fact(ke) * fact(kt - ke)))", "C = [1, 1]\nfor i in range(2, 51):\n    C += [C[-1] * i]\nfor _ in range(int(input())):\n    (N, K) = [int(i) for i in input().split(' ')]\n    A = [int(i) for i in input().split(' ')]\n    A.sort()\n    B = {}\n    for i in range(N):\n        if A[i] in B:\n            B[A[i]] += 1\n        else:\n            B[A[i]] = 1\n    count = 1\n    for i in B:\n        if K < B[i]:\n            count = C[B[i]] // (C[B[i] - K] * C[K])\n            break\n        K -= B[i]\n    print(count)", "C = [1, 1]\nfor i in range(2, 51):\n    C += [C[-1] * i]\nfor _ in range(int(input())):\n    (N, K) = [int(i) for i in input().split(' ')]\n    A = [int(i) for i in input().split(' ')]\n    A.sort()\n    B = {}\n    for i in range(N):\n        if A[i] in B:\n            B[A[i]] += 1\n        else:\n            B[A[i]] = 1\n    count = 1\n    for i in B:\n        if K < B[i]:\n            count = C[B[i]] // (C[B[i] - K] * C[K])\n            break\n        K -= B[i]\n    print(count)", "import math\ny = lambda x: math.factorial(x)\n\ndef combinations(n, r):\n    return y(n) // (y(r) * y(n - r))\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    good = A[:K]\n    last = good[-1]\n    count_total = A.count(last)\n    count_mini = good.count(last)\n    print(combinations(count_total, count_mini))", "import math\ny = lambda x: math.factorial(x)\n\ndef combinations(n, r):\n    return y(n) // (y(r) * y(n - r))\nfor i in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    arr.sort()\n    good = arr[:k]\n    last = good[-1]\n    count_total = arr.count(last)\n    count_mini = good.count(last)\n    print(combinations(count_total, count_mini))"]