["import sys\n\ndef process(s):\n    p = s.find('.')\n    if p == -1:\n        return (int(s), 0)\n    else:\n        aftstr = s[p + 1:]\n        aftstr += '0' * (9 - len(aftstr))\n        return (int(s[:p]), int(aftstr))\ndecbase = 1000000000\n\ndef outrepr(bef, aft):\n    bef += aft // decbase\n    aft %= decbase\n    return '{}.{:09}'.format(bef, aft)\n\ndef gt(a, b, c, d):\n    a += b // decbase\n    b %= decbase\n    c += d // decbase\n    d %= decbase\n    return a > c or (a == c and b > d)\n\ndef mini(a, b, c, d):\n    if gt(a, b, c, d):\n        a = c\n        b = d\n    return (a, b)\nu = [0, 0]\nv = [0, 0]\n\ndef endpoints_match():\n    return u[0] == u[1] or u[0] == v[1] or v[0] == u[1] or (v[0] == v[1])\nT = int(sys.stdin.readline().rstrip())\nfor test in range(T):\n    line = sys.stdin.readline().rstrip()\n    (N, C, M) = line.split()\n    N = int(N)\n    M = int(M)\n    (Cbef, Caft) = process(C)\n    for i in range(M):\n        line = sys.stdin.readline().rstrip()\n        (a, b) = line.split()\n        u[i] = int(a)\n        v[i] = int(b)\n    if M <= 1 or endpoints_match():\n        if gt(Cbef, Caft, 2, 0):\n            solbef = (N - 1 - M) * Cbef + 2 * (N - 1) * (N - 1)\n            solaft = (N - 1 - M) * Caft\n        else:\n            solbef = (N * (N - 1) // 2 - M) * Cbef + N * (N - 1)\n            solaft = (N * (N - 1) // 2 - M) * Caft\n    else:\n        if gt(Cbef, Caft, 2, 0):\n            solbef = (N - 1 - 1) * Cbef + 2 * (N - 1) * (N - 1)\n            solaft = (N - 1 - 1) * Caft\n        else:\n            solbef = (N * (N - 1) // 2 - M) * Cbef + N * (N - 1)\n            solaft = (N * (N - 1) // 2 - M) * Caft\n        if gt(2, 0, Cbef, Caft):\n            (solbef, solaft) = mini(solbef, solaft, (N * (N - 1) // 2 - M) * Cbef + N * (N - 1), (N * (N - 1) // 2 - M) * Caft)\n        elif gt(4, 0, Cbef, Caft):\n            (solbef, solaft) = mini(solbef, solaft, (N - 1 - M + N - 3) * Cbef + 6 * (N - 2) + 2 * (N - 2) * (N - 2) - 4 * (N - 3), (N - 1 - M + N - 3) * Caft)\n        else:\n            (solbef, solaft) = mini(solbef, solaft, (N - 1 - M) * Cbef + 6 * (N - 2) + 2 * (N - 2) * (N - 2), (N - 1 - M) * Caft)\n        (solbef, solaft) = mini(solbef, solaft, (N - 1 - 1) * Cbef + 2 * (N - 1) * (N - 1) - 2, (N - 1 - 1) * Caft)\n    print(outrepr(solbef, solaft))", "import sys\n\ndef process(s):\n    p = s.find('.')\n    if p == -1:\n        return (int(s), 0)\n    else:\n        aftstr = s[p + 1:]\n        aftstr += '0' * (9 - len(aftstr))\n        return (int(s[:p]), int(aftstr))\ndecbase = 1000000000\n\ndef outrepr(bef, aft):\n    bef += aft // decbase\n    aft %= decbase\n    return '{}.{:09}'.format(bef, aft)\n\ndef gt(a, b, c, d):\n    a += b // decbase\n    b %= decbase\n    c += d // decbase\n    d %= decbase\n    return a > c or (a == c and b > d)\n\ndef mini(a, b, c, d):\n    if gt(a, b, c, d):\n        a = c\n        b = d\n    return (a, b)\nu = [0, 0]\nv = [0, 0]\n\ndef endpoints_match():\n    return u[0] == u[1] or u[0] == v[1] or v[0] == u[1] or (v[0] == v[1])\nT = int(sys.stdin.readline().rstrip())\nfor test in range(T):\n    line = sys.stdin.readline().rstrip()\n    (N, C, M) = line.split()\n    N = int(N)\n    M = int(M)\n    (Cbef, Caft) = process(C)\n    for i in range(M):\n        line = sys.stdin.readline().rstrip()\n        (a, b) = line.split()\n        u[i] = int(a)\n        v[i] = int(b)\n    if M <= 1 or endpoints_match():\n        if gt(Cbef, Caft, 2, 0):\n            solbef = (N - 1 - M) * Cbef + 2 * (N - 1) * (N - 1)\n            solaft = (N - 1 - M) * Caft\n        else:\n            solbef = (N * (N - 1) // 2 - M) * Cbef + N * (N - 1)\n            solaft = (N * (N - 1) // 2 - M) * Caft\n    else:\n        if gt(Cbef, Caft, 2, 0):\n            solbef = (N - 1 - 1) * Cbef + 2 * (N - 1) * (N - 1)\n            solaft = (N - 1 - 1) * Caft\n        else:\n            solbef = (N * (N - 1) // 2 - M) * Cbef + N * (N - 1)\n            solaft = (N * (N - 1) // 2 - M) * Caft\n        if gt(2, 0, Cbef, Caft):\n            (solbef, solaft) = mini(solbef, solaft, (N * (N - 1) // 2 - M) * Cbef + N * (N - 1), (N * (N - 1) // 2 - M) * Caft)\n        elif gt(4, 0, Cbef, Caft):\n            (solbef, solaft) = mini(solbef, solaft, (N - 1 - M + N - 3) * Cbef + 6 * (N - 2) + 2 * (N - 2) * (N - 2) - 4 * (N - 3), (N - 1 - M + N - 3) * Caft)\n        else:\n            (solbef, solaft) = mini(solbef, solaft, (N - 1 - M) * Cbef + 6 * (N - 2) + 2 * (N - 2) * (N - 2), (N - 1 - M) * Caft)\n        (solbef, solaft) = mini(solbef, solaft, (N - 1 - 1) * Cbef + 2 * (N - 1) * (N - 1) - 2, (N - 1 - 1) * Caft)\n    print(outrepr(solbef, solaft))", "import sys\n\ndef process(s):\n    p = s.find('.')\n    if p == -1:\n        return (int(s), 0)\n    else:\n        aftstr = s[p + 1:]\n        aftstr += '0' * (9 - len(aftstr))\n        return (int(s[:p]), int(aftstr))\ndecbase = 1000000000\n\ndef outrepr(bef, aft):\n    bef += aft // decbase\n    aft %= decbase\n    return '{}.{:09}'.format(bef, aft)\n\ndef gt(a, b, c, d):\n    a += b // decbase\n    b %= decbase\n    c += d // decbase\n    d %= decbase\n    return a > c or (a == c and b > d)\n\ndef mini(a, b, c, d):\n    if gt(a, b, c, d):\n        a = c\n        b = d\n    return (a, b)\nu = [0, 0]\nv = [0, 0]\n\ndef endpoints_match():\n    return u[0] == u[1] or u[0] == v[1] or v[0] == u[1] or (v[0] == v[1])\nT = int(sys.stdin.readline().rstrip())\nfor test in range(T):\n    line = sys.stdin.readline().rstrip()\n    (N, C, M) = line.split()\n    N = int(N)\n    M = int(M)\n    (Cbef, Caft) = process(C)\n    for i in range(M):\n        line = sys.stdin.readline().rstrip()\n        (a, b) = line.split()\n        u[i] = int(a)\n        v[i] = int(b)\n    if M <= 1 or endpoints_match():\n        if gt(Cbef, Caft, 2, 0):\n            solbef = (N - 1 - M) * Cbef + 2 * (N - 1) * (N - 1)\n            solaft = (N - 1 - M) * Caft\n        else:\n            solbef = (N * (N - 1) // 2 - M) * Cbef + N * (N - 1)\n            solaft = (N * (N - 1) // 2 - M) * Caft\n    else:\n        if gt(Cbef, Caft, 2, 0):\n            solbef = (N - 1 - 1) * Cbef + 2 * (N - 1) * (N - 1)\n            solaft = (N - 1 - 1) * Caft\n        else:\n            solbef = (N * (N - 1) // 2 - M) * Cbef + N * (N - 1)\n            solaft = (N * (N - 1) // 2 - M) * Caft\n        if gt(2, 0, Cbef, Caft):\n            (solbef, solaft) = mini(solbef, solaft, (N * (N - 1) // 2 - M) * Cbef + N * (N - 1), (N * (N - 1) // 2 - M) * Caft)\n        elif gt(4, 0, Cbef, Caft):\n            (solbef, solaft) = mini(solbef, solaft, (N - 1 - M + N - 3) * Cbef + 6 * (N - 2) + 2 * (N - 2) * (N - 2) - 4 * (N - 3), (N - 1 - M + N - 3) * Caft)\n        else:\n            (solbef, solaft) = mini(solbef, solaft, (N - 1 - M) * Cbef + 6 * (N - 2) + 2 * (N - 2) * (N - 2), (N - 1 - M) * Caft)\n        (solbef, solaft) = mini(solbef, solaft, (N - 1 - 1) * Cbef + 2 * (N - 1) * (N - 1) - 2, (N - 1 - 1) * Caft)\n    print(outrepr(solbef, solaft))"]