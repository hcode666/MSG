["def solution():\n    (h, w) = map(int, input().split())\n    R = [list('A' * (w + 2)) for i in range(h + 2)]\n    R[-1] = list('B' * (w + 2))\n    for r in range(1, h + 1):\n        row = input()\n        for c in range(1, w + 1):\n            R[r][c] = row[c - 1]\n    for r in range(1, h + 1):\n        for c in range(1, w + 1):\n            if R[r][c] == 'W':\n                if R[r][c - 1] == 'A' or R[r][c + 1] == 'A' or R[r + 1][c] == 'A':\n                    print('no')\n                    return\n            if R[r][c] == 'B':\n                if R[r + 1][c] == 'A' or R[r + 1][c] == 'W':\n                    print('no')\n                    return\n    print('yes')\np = int(input())\nwhile p > 0:\n    p = p - 1\n    solution()", "def solution():\n    (h, w) = map(int, input().split())\n    R = [list('A' * (w + 2)) for i in range(h + 2)]\n    R[-1] = list('B' * (w + 2))\n    for r in range(1, h + 1):\n        row = input()\n        for c in range(1, w + 1):\n            R[r][c] = row[c - 1]\n    for r in range(1, h + 1):\n        for c in range(1, w + 1):\n            if R[r][c] == 'W':\n                if R[r][c - 1] == 'A' or R[r][c + 1] == 'A' or R[r + 1][c] == 'A':\n                    print('no')\n                    return\n            if R[r][c] == 'B':\n                if R[r + 1][c] == 'A' or R[r + 1][c] == 'W':\n                    print('no')\n                    return\n    print('yes')\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def solution():\n    (h, w) = map(int, input().split())\n    R = [list('A' * (w + 2)) for i in range(h + 2)]\n    R[-1] = list('B' * (w + 2))\n    for r in range(1, h + 1):\n        row = input()\n        for c in range(1, w + 1):\n            R[r][c] = row[c - 1]\n    for r in range(1, h + 1):\n        for c in range(1, w + 1):\n            if R[r][c] == 'W':\n                if R[r][c - 1] == 'A' or R[r][c + 1] == 'A' or R[r + 1][c] == 'A':\n                    print('no')\n                    return\n            if R[r][c] == 'B':\n                if R[r + 1][c] == 'A' or R[r + 1][c] == 'W':\n                    print('no')\n                    return\n    print('yes')\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def solution():\n    (h, w) = map(int, input().split())\n    R = [list('A' * (w + 2)) for i in range(h + 2)]\n    R[-1] = list('B' * (w + 2))\n    for r in range(1, h + 1):\n        row = input()\n        for c in range(1, w + 1):\n            R[r][c] = row[c - 1]\n    for r in range(1, h + 1):\n        for c in range(1, w + 1):\n            if R[r][c] == 'W':\n                if R[r][c - 1] == 'A' or R[r][c + 1] == 'A' or R[r + 1][c] == 'A':\n                    print('no')\n                    return\n            if R[r][c] == 'B':\n                if R[r + 1][c] == 'A' or R[r + 1][c] == 'W':\n                    print('no')\n                    return\n    print('yes')\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def solution():\n    (h, w) = map(int, input().split())\n    R = [list('A' * (w + 2)) for i in range(h + 2)]\n    R[-1] = list('B' * (w + 2))\n    for r in range(1, h + 1):\n        row = input()\n        for c in range(1, w + 1):\n            R[r][c] = row[c - 1]\n    for r in range(1, h + 1):\n        for c in range(1, w + 1):\n            if R[r][c] == 'W':\n                if R[r][c - 1] == 'A' or R[r][c + 1] == 'A' or R[r + 1][c] == 'A':\n                    print('no')\n                    return\n            if R[r][c] == 'B':\n                if R[r + 1][c] == 'A' or R[r + 1][c] == 'W':\n                    print('no')\n                    return\n    print('yes')\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def solution():\n    (h, w) = map(int, input().split())\n    R = [list('A' * (w + 2)) for i in range(h + 2)]\n    R[-1] = list('B' * (w + 2))\n    for r in range(1, h + 1):\n        row = input()\n        for c in range(1, w + 1):\n            R[r][c] = row[c - 1]\n    for r in range(1, h + 1):\n        for c in range(1, w + 1):\n            if R[r][c] == 'W':\n                if R[r][c - 1] == 'A' or R[r][c + 1] == 'A' or R[r + 1][c] == 'A':\n                    print('no')\n                    return\n            if R[r][c] == 'B':\n                if R[r + 1][c] == 'A' or R[r + 1][c] == 'W':\n                    print('no')\n                    return\n    print('yes')\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def solution():\n    (h, w) = map(int, input().split())\n    R = [list('A' * (w + 2)) for i in range(h + 2)]\n    R[-1] = list('B' * (w + 2))\n    for r in range(1, h + 1):\n        row = input()\n        for c in range(1, w + 1):\n            R[r][c] = row[c - 1]\n    for r in range(1, h + 1):\n        for c in range(1, w + 1):\n            if R[r][c] == 'W':\n                if R[r][c - 1] == 'A' or R[r][c + 1] == 'A' or R[r + 1][c] == 'A':\n                    print('no')\n                    return\n            if R[r][c] == 'B':\n                if R[r + 1][c] == 'A' or R[r + 1][c] == 'W':\n                    print('no')\n                    return\n    print('yes')\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def solution():\n    (h, w) = map(int, input().split())\n    R = [list('A' * (w + 2)) for i in range(h + 2)]\n    R[-1] = list('B' * (w + 2))\n    for r in range(1, h + 1):\n        row = input()\n        for c in range(1, w + 1):\n            R[r][c] = row[c - 1]\n    for r in range(1, h + 1):\n        for c in range(1, w + 1):\n            if R[r][c] == 'W':\n                if R[r][c - 1] == 'A' or R[r][c + 1] == 'A' or R[r + 1][c] == 'A':\n                    print('no')\n                    return\n            if R[r][c] == 'B':\n                if R[r + 1][c] == 'A' or R[r + 1][c] == 'W':\n                    print('no')\n                    return\n    print('yes')\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def solution():\n    (h, w) = map(int, input().split())\n    R = [list('A' * (w + 2)) for i in range(h + 2)]\n    R[-1] = list('B' * (w + 2))\n    for r in range(1, h + 1):\n        row = input()\n        for c in range(1, w + 1):\n            R[r][c] = row[c - 1]\n    for r in range(1, h + 1):\n        for c in range(1, w + 1):\n            if R[r][c] == 'W':\n                if R[r][c - 1] == 'A' or R[r][c + 1] == 'A' or R[r + 1][c] == 'A':\n                    print('no')\n                    return\n            if R[r][c] == 'B':\n                if R[r + 1][c] == 'A' or R[r + 1][c] == 'W':\n                    print('no')\n                    return\n    print('yes')\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def solution():\n    (h, w) = map(int, input().split())\n    R = [list('A' * (w + 2)) for i in range(h + 2)]\n    R[-1] = list('B' * (w + 2))\n    for r in range(1, h + 1):\n        row = input()\n        for c in range(1, w + 1):\n            R[r][c] = row[c - 1]\n    for r in range(1, h + 1):\n        for c in range(1, w + 1):\n            if R[r][c] == 'W':\n                if R[r][c - 1] == 'A' or R[r][c + 1] == 'A' or R[r + 1][c] == 'A':\n                    print('no')\n                    return\n            if R[r][c] == 'B':\n                if R[r + 1][c] == 'A' or R[r + 1][c] == 'W':\n                    print('no')\n                    return\n    print('yes')\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        s = input()\n        a.append(s)\n    f = 1\n    for i in range(n):\n        for j in range(m):\n            if i + 1 < n and a[i][j] == 'B' and (a[i + 1][j] != 'B'):\n                f = 0\n                break\n            if a[i][j] == 'W':\n                if j == 0 or j == m - 1 or i == n - 1:\n                    f = 0\n                    break\n                if a[i][j - 1] == 'A' or a[i][j + 1] == 'A' or a[i + 1][j] == 'A':\n                    f = 0\n                    break\n        if f == 0:\n            break\n    if f == 1:\n        print('yes')\n    else:\n        print('no')", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        s = input()\n        a.append(s)\n    f = 1\n    for i in range(n):\n        for j in range(m):\n            if i + 1 < n and a[i][j] == 'B' and (a[i + 1][j] != 'B'):\n                f = 0\n                break\n            if a[i][j] == 'W':\n                if j == 0 or j == m - 1 or i == n - 1:\n                    f = 0\n                    break\n                if a[i][j - 1] == 'A' or a[i][j + 1] == 'A' or a[i + 1][j] == 'A':\n                    f = 0\n                    break\n        if f == 0:\n            break\n    if f == 1:\n        print('yes')\n    else:\n        print('no')", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    l = []\n    for i in range(n):\n        l.append(input())\n    ans = True\n    for i in range(n):\n        for j in range(m):\n            if l[i][j] == 'W':\n                if j == 0 or j == m - 1 or i == n - 1:\n                    ans = False\n                elif l[i][j - 1] == 'A' or l[i][j + 1] == 'A' or l[i + 1][j] == 'A':\n                    ans = False\n            if l[i][j] == 'B':\n                if i < n - 1:\n                    if l[i + 1][j] != 'B':\n                        ans = False\n    if ans:\n        print('yes')\n    else:\n        print('no')", "for _ in range(int(input())):\n    (N, M) = input().split(' ')\n    A = []\n    for i in range(int(N)):\n        stri = input()\n        B = []\n        B.extend(stri)\n        A.append(B)\n    A.reverse()\n    flag = 1\n    for i in range(len(A)):\n        for j in range(len(A[i])):\n            if A[i][j] == 'A':\n                if i != len(A) - 1:\n                    if j != len(A[i]) - 1:\n                        if A[i][j + 1] == 'W':\n                            flag = 0\n                            break\n                    if A[i + 1][j] == 'B' or A[i + 1][j] == 'W':\n                        flag = 0\n                        break\n                else:\n                    if j == 0 or j == len(A[i]) - 1:\n                        continue\n                    if A[i][j + 1] == 'W':\n                        flag = 0\n                        break\n            if A[i][j] == 'W':\n                if i != len(A) - 1:\n                    if j == 0 or j == len(A[i]) - 1:\n                        flag = 0\n                        break\n                    if A[i][j + 1] == 'A':\n                        flag = 0\n                        break\n                    if A[i + 1][j] == 'B':\n                        flag = 0\n                        break\n                else:\n                    if j == 0 or j == len(A[i]) - 1:\n                        flag = 0\n                        break\n                    if A[i][j + 1] == 'A':\n                        flag = 0\n                        break\n        if flag == 0:\n            break\n    print('yes') if flag == 1 else print('no')", "for T in range(int(input())):\n    (N, M) = map(int, input().split())\n    layers = list()\n    stable = 'yes'\n    for n in range(N):\n        layer = input()\n        if 'WA' in layer or 'AW' in layer or layer[0] == 'W' or (layer[-1] == 'W'):\n            stable = 'no'\n        layers.append(list(layer))\n    layers = list(map(''.join, list(zip(*layers))))\n    for i in range(M):\n        if 'BA' in layers[i] or 'BW' in layers[i]:\n            stable = 'no'\n    print(stable)", "t = int(input())\n\ndef fun():\n    for j in range(n):\n        for k in range(m):\n            if l[j][k] is 'W':\n                if k is 0 or k is m - 1 or (j < n - 1 and l[j + 1][k] is 'A') or (k < m - 1 and l[j][k + 1] is 'A'):\n                    print('no')\n                    return\n            elif l[j][k] is 'A':\n                if k < m - 1 and l[j][k + 1] is 'W':\n                    print('no')\n                    return\n            elif l[j][k] is 'B':\n                if j < n - 1 and (l[j + 1][k] is 'A' or l[j + 1][k] is 'W'):\n                    print('no')\n                    return\n    print('yes')\nfor i in range(t):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    l = [['E'] * m for i in range(n)]\n    for j in range(n):\n        s = input()\n        for k in range(m):\n            l[j][k] = s[k]\n    fun()", "t = int(input())\n\ndef fun():\n    for j in range(n):\n        for k in range(m):\n            if l[j][k] is 'W':\n                if k is 0 or k is m - 1 or (j < n - 1 and l[j + 1][k] is 'A') or (k < m - 1 and l[j][k + 1] is 'A') or (k > 0 and l[j][k - 1] is 'A') or (j > 0 and l[j - 1][k] is 'B'):\n                    print('no')\n                    return\n            elif l[j][k] is 'A':\n                if k < m - 1 and l[j][k + 1] is 'W' or (k > 0 and l[j][k - 1] is 'W') or (j > 0 and (l[j - 1][k] is 'W' or l[j - 1][k] is 'B')):\n                    print('no')\n                    return\n    print('yes')\nfor i in range(t):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    l = [['E'] * m for i in range(n)]\n    for j in range(n):\n        s = input()\n        for k in range(m):\n            l[j][k] = s[k]\n    fun()", "t = int(input())\nfor i in range(t):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    l = [['E'] * m for i in range(n)]\n    for j in range(n):\n        s = input()\n        for k in range(m):\n            l[j][k] = s[k]\n    flag = True\n    for j in range(n):\n        if flag is False:\n            break\n        for k in range(m):\n            if l[j][k] is 'W':\n                if k is 0 or k is m - 1 or (j < n - 1 and l[j + 1][k] is 'A') or (k < m - 1 and l[j][k + 1] is 'A') or (k > 0 and l[j][k - 1] is 'A') or (j > 0 and l[j - 1][k] is 'B'):\n                    flag = False\n                    break\n            elif l[j][k] is 'A':\n                if k < m - 1 and l[j][k + 1] is 'W' or (k > 0 and l[j][k - 1] is 'W') or (j > 0 and (l[j - 1][k] is 'W' or l[j - 1][k] is 'B')):\n                    flag = False\n                    break\n    if flag:\n        print('yes')\n    else:\n        print('no')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    flag = True\n    for i in range(n):\n        a.append(list(input()))\n    for i in range(n):\n        if a[i][0] == 'W' or a[i][m - 1] == 'W':\n            print('no')\n            flag = False\n            break\n    else:\n        for j in range(m):\n            if a[n - 1][j] == 'W':\n                flag = False\n                print('no')\n                break\n    if flag:\n        for i in range(n - 1):\n            if flag:\n                for j in range(m):\n                    if a[i][j] == 'W':\n                        if a[i][j + 1] == 'A' or a[i][j - 1] == 'A' or a[i + 1][j] == 'A':\n                            print('no')\n                            flag = False\n                            break\n                    elif a[i][j] == 'B' and (a[i + 1][j] == 'A' or a[i + 1][j] == 'W'):\n                        print('no')\n                        flag = False\n                        break\n    if flag:\n        print('yes')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    rep = []\n    pos = 1\n    for i in range(n):\n        s = input()\n        if s[0] == 'W' or s[len(s) - 1] == 'W':\n            pos = 0\n        rep.append(s)\n        for j in range(m):\n            if rep[i][j] == 'W':\n                if i != 0:\n                    if rep[i - 1][j] == 'B':\n                        pos = 0\n                if j != 0:\n                    if rep[i][j - 1] == 'A':\n                        pos = 0\n            if rep[i][j] == 'A':\n                if i != 0:\n                    if rep[i - 1][j] == 'B' or rep[i - 1][j] == 'W':\n                        pos = 0\n                if j != 0:\n                    if rep[i][j - 1] == 'W':\n                        pos = 0\n    if pos == 1:\n        print('yes')\n    else:\n        print('no')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    rep = []\n    pos = 1\n    for i in range(n):\n        s = input()\n        if s[0] == 'W' or s[len(s) - 1] == 'W':\n            pos = 0\n        rep.append(s)\n        for j in range(m):\n            if rep[i][j] == 'W':\n                if i != 0:\n                    if rep[i - 1][j] == 'B':\n                        pos = 0\n                if j != 0:\n                    if rep[i][j - 1] == 'A':\n                        pos = 0\n            if rep[i][j] == 'A':\n                if i != 0:\n                    if rep[i - 1][j] == 'B' or rep[i - 1][j] == 'W':\n                        pos = 0\n                if j != 0:\n                    if rep[i][j - 1] == 'W':\n                        pos = 0\n    if pos == 1:\n        print('yes')\n    else:\n        print('no')", "def water(i, j, N, M, my_list=[]):\n    if j == 0 or j == M - 1:\n        return False\n    if i < N - 1:\n        if my_list[i + 1][j] == 'B':\n            return False\n    if my_list[i][j + 1] == 'A':\n        return False\n    return True\n\ndef air(i, j, N, M, my_list=[]):\n    if i < N - 1:\n        if my_list[i + 1][j] == 'B' or my_list[i + 1][j] == 'W':\n            return False\n    if j < M - 1:\n        if my_list[i][j + 1] == 'W':\n            return False\n    return True\nT = int(input())\nfor i in range(T):\n    (N, M) = map(int, input().strip().split(' '))\n    L = []\n    for j in range(N):\n        d = input().strip().split(' ')\n        for k in d:\n            L.insert(0, k)\n    flag = True\n    for j in range(N):\n        for k in range(M):\n            if L[j][k] == 'W':\n                flag = water(j, k, N, M, L)\n            if L[j][k] == 'A':\n                flag = air(j, k, N, M, L)\n            if flag == False:\n                break\n        if flag == False:\n            break\n    if flag == True:\n        print('yes')\n    else:\n        print('no')", "def water(i, j, N, M, my_list=[]):\n    if j == 0 or j == M - 1:\n        return False\n    if i < N - 1:\n        if my_list[i + 1][j] == 'B':\n            return False\n    if my_list[i][j + 1] == 'A':\n        return False\n    return True\n\ndef air(i, j, N, M, my_list=[]):\n    if i < N - 1:\n        if my_list[i + 1][j] == 'B' or my_list[i + 1][j] == 'W':\n            return False\n    if j < M - 1:\n        if my_list[i][j + 1] == 'W':\n            return False\n    return True\nT = int(input())\nfor i in range(T):\n    (N, M) = map(int, input().strip().split(' '))\n    L = []\n    for j in range(N):\n        d = input().strip().split(' ')\n        for k in d:\n            L.insert(0, k)\n    flag = True\n    for j in range(N):\n        for k in range(M):\n            if L[j][k] == 'W':\n                flag = water(j, k, N, M, L)\n            if L[j][k] == 'A':\n                flag = air(j, k, N, M, L)\n            if flag == False:\n                break\n        if flag == False:\n            break\n    if flag == True:\n        print('yes')\n    else:\n        print('no')", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list()\n    a.append('A' * m)\n    for i in range(n):\n        a.append(input())\n    x = 1\n    while x < n + 1:\n        for j in range(m):\n            z = a[x][j]\n            if z == 'W':\n                if j == 0 or j == m - 1 or a[x][j - 1] == 'A' or (a[x][j + 1] == 'A') or (a[x - 1][j] == 'B'):\n                    x = n + 1\n                    break\n            elif z == 'A' and a[x - 1][j] != 'A':\n                x = n + 1\n                break\n        x += 1\n    if x == n + 2:\n        print('no')\n    else:\n        print('yes')", "T = int(input())\nwhile T > 0:\n    T = T - 1\n    D = input()\n    M = int(D.split(' ')[0])\n    N = int(D.split(' ')[1])\n    num = M\n    res = []\n    (i, j, flag) = (0, 0, 0)\n    while num > 0:\n        num = num - 1\n        res.append(input())\n    for i in range(M):\n        if res[i].startswith('W') or res[i].endswith('W'):\n            flag = 1\n            break\n        elif res[i].count('AW') > 0 or res[i].count('WA') > 0:\n            flag = 1\n            break\n        elif i < M - 1:\n            for j in range(N):\n                if res[i][j] == 'B' and res[i + 1][j] != 'B':\n                    flag = 1\n                    break\n                if res[i][j] == 'W' and res[i + 1][j] == 'A':\n                    flag = 1\n                    break\n        if flag == 1:\n            break\n    if flag == 1:\n        print('no')\n    else:\n        print('yes')", "def validate(val_hor, m, n):\n    val_ver = list(zip(*val_hor))\n    for i in val_ver:\n        j = 1\n        while j < n:\n            if i[j - 1] > i[j]:\n                return 'no'\n            j += 1\n    for i in val_hor:\n        if i[0] == 2 or i[m - 1] == 2:\n            return 'no'\n        j = 1\n        while j < m - 1:\n            if i[j] == 2 and (i[j - 1] == 1 or i[j + 1] == 1):\n                return 'no'\n            j += 1\n    return 'yes'\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = [int(i) for i in input().split()]\n        val_hor = [[1 if i == 'A' else 2 if i == 'W' else 3 for i in input()] for _ in range(n)]\n        print(validate(val_hor, m, n))\nmain()", "def validate(val_hor, m, n):\n    for i in val_hor:\n        if i[0] == 2 or i[m - 1] == 2:\n            return 'no'\n        j = 1\n        while j < m - 1:\n            if i[j] == 2 and (i[j - 1] == 1 or i[j + 1] == 1):\n                return 'no'\n            j += 1\n    val_ver = list(zip(*val_hor))\n    for i in val_ver:\n        j = 1\n        while j < n:\n            if i[j - 1] > i[j]:\n                return 'no'\n            j += 1\n    return 'yes'\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = [int(i) for i in input().split()]\n        val_hor = [[1 if i == 'A' else 2 if i == 'W' else 3 for i in input()] for _ in range(n)]\n        print(validate(val_hor, m, n))\nmain()", "def validate(val_hor, m):\n    for i in val_hor:\n        if i[0] == 2 or i[m - 1] == 2:\n            return 'no'\n        j = 1\n        while j < m - 1:\n            if i[j] == 2 and (i[j - 1] == 1 or i[j + 1] == 1):\n                return 'no'\n            j += 1\n    val_ver = list(zip(*val_hor))\n    for i in val_ver:\n        if i != tuple(sorted(i)):\n            return 'no'\n    return 'yes'\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = [int(i) for i in input().split()]\n        val_hor = [[1 if i == 'A' else 2 if i == 'W' else 3 for i in input()] for _ in range(n)]\n        print(validate(val_hor, m))\nmain()", "reservoirs = int(input().strip())\nfor i in range(0, reservoirs):\n    list1 = []\n    (rows, columns) = map(int, input().strip().split())\n    for j in range(0, rows):\n        list1.append([x for x in input().strip()])\n    list2 = list(zip(*list1))\n    flag = 0\n    for i in range(0, columns):\n        element1 = ''.join(list2[i])\n        if 'BA' in element1 or 'WA' in element1 or 'BW' in element1:\n            print('no')\n            flag = 1\n            break\n    if flag != 1:\n        for i in range(0, rows):\n            element = ''.join(list1[i])\n            if 'AW' in element or 'WA' in element or element[0] == 'W' or (element[columns - 1] == 'W'):\n                print('no')\n                flag = 1\n                break\n    if flag != 1:\n        print('yes')", "import sys\n\ndef main():\n    for _ in range(int(sys.stdin.readline())):\n        (N, M) = map(int, sys.stdin.readline().strip().split())\n        resv = []\n        resv.append('A' * (M + 2))\n        for i in range(N):\n            resv.append('A' + sys.stdin.readline().strip() + 'A')\n        resv.append('B' * (M + 2))\n        isStable = True\n        for i in range(1, N + 1):\n            for j in range(1, M + 1):\n                tile = resv[i][j]\n                if tile == 'B':\n                    if resv[i + 1][j] == 'A' or resv[i + 1][j] == 'W':\n                        isStable = False\n                        break\n                elif tile == 'W':\n                    if resv[i][j - 1] == 'A' or resv[i][j + 1] == 'A' or resv[i + 1][j] == 'A':\n                        isStable = False\n                        break\n            if not isStable:\n                break\n        if isStable:\n            print('yes')\n        else:\n            print('no')\nmain()", "def built(wall, N, M):\n    for i in range(N):\n        if wall[i][0] == 'W':\n            return 'no'\n        if wall[i][M - 1] == 'W':\n            return 'no'\n    for i in range(N):\n        for j in range(0, M):\n            if wall[i][j] == 'B':\n                if i + 1 <= N - 1:\n                    if wall[i + 1][j] != 'B':\n                        return 'no'\n            if wall[i][j] == 'W':\n                if i + 1 <= N - 1:\n                    if wall[i + 1][j] == 'A':\n                        return 'no'\n                if j - 1 >= 0 and j + 1 <= M - 1:\n                    if wall[i][j - 1] == 'A' or wall[i][j + 1] == 'A':\n                        return 'no'\n    return 'yes'\n\ndef main(args):\n    T = int(input())\n    while T > 0:\n        T -= 1\n        (N, M) = list(map(int, input().split()))\n        wall = []\n        for i in range(N):\n            wall.append(input())\n        print(built(wall, N, M))\nimport sys\nsys.exit(main(sys.argv))", "t = int(input())\ni = 0\nwhile i < t:\n    (n, m) = input().strip().split(' ')\n    n = int(n)\n    m = int(m)\n    s = ''\n    j = 0\n    flag = 0\n    while j < n:\n        s1 = input()\n        if flag == 0:\n            if j == 0 and s1.count('W') == 0:\n                s += s1\n            elif j == 0 and s1.count('W') > 0:\n                s += s1\n                if s1[0] == 'W' or s1[m - 1] == 'W':\n                    flag = 1\n                else:\n                    for k in range(1, m - 1):\n                        if s1[k] == 'W':\n                            if s1[k - 1] == 'A' or s1[k + 1] == 'A':\n                                flag = 1\n                                break\n            elif j > 0:\n                if s1[0] == 'W' or s1[m - 1] == 'W':\n                    flag = 1\n                else:\n                    for k in range(m):\n                        if s[k] == 'B' and (s1[k] == 'W' or s1[k] == 'A'):\n                            flag = 1\n                            break\n                        if s[k] == 'W' and s1[k] == 'A':\n                            flag = 1\n                            break\n                        if s1[k] == 'W':\n                            if s1[k - 1] == 'A' or s1[k + 1] == 'A':\n                                flag = 1\n                                break\n        j += 1\n    if flag == 0:\n        print('yes')\n    else:\n        print('no')\n    i += 1", "t = int(input())\nfor t0 in range(t):\n    s = [int(i) for i in input().strip().split()]\n    (n, m) = (s[0], s[1])\n    wall = []\n    for i in range(n):\n        s = list(input().strip())\n        wall.append(s)\n    fl = 0\n    for i in range(n):\n        for j in range(m):\n            if wall[i][j] == 'B':\n                if i < n - 1 and wall[i + 1][j] != 'B':\n                    fl = 1\n                    break\n            elif wall[i][j] == 'A':\n                if j < m - 1 and wall[i][j + 1] == 'W':\n                    fl = 1\n                    break\n                if j > 0 and wall[i][j - 1] == 'W':\n                    fl = 1\n                    break\n            else:\n                if j == 0 or j == m - 1 or i == n - 1:\n                    fl = 1\n                    break\n                if j < m - 1 and wall[i][j + 1] == 'A':\n                    fl = 1\n                    break\n                if j > 0 and wall[i][j - 1] == 'A':\n                    fl = 1\n                    break\n                if i < n - 1 and wall[i + 1][j] == 'A':\n                    fl = 1\n                    break\n        if fl == 1:\n            break\n    if fl == 0:\n        print('yes')\n    else:\n        print('no')", "for _ in range(int(input())):\n    (n, m) = (int(x) for x in input().split())\n    r = [input() for i in range(n)]\n\n    def stable():\n        for i in reversed(range(n)):\n            for j in range(m):\n                if r[i][j] == 'B':\n                    if i < n - 1 and (r[i + 1][j] == 'W' or r[i + 1][j] == 'A'):\n                        return False\n                elif r[i][j] == 'W':\n                    if i == n - 1 or j == 0 or j == m - 1 or (i < n - 1 and r[i + 1][j] == 'A') or (j > 0 and r[i][j - 1] == 'A') or (j < m - 1 and r[i][j + 1] == 'A'):\n                        return False\n        return True\n    print('yes' if stable() else 'no')", "for _ in range(int(input())):\n    (n, m) = (int(x) for x in input().split())\n    r = [input() for i in range(n)]\n\n    def stable():\n        for i in reversed(range(n)):\n            for j in range(m):\n                if r[i][j] == 'B':\n                    if i < n - 1 and (r[i + 1][j] == 'W' or r[i + 1][j] == 'A'):\n                        return False\n                elif r[i][j] == 'W':\n                    if i == n - 1 or j == 0 or j == m - 1 or (i < n - 1 and r[i + 1][j] == 'A') or (j > 0 and r[i][j - 1] == 'A') or (j < m - 1 and r[i][j + 1] == 'A'):\n                        return False\n        return True\n    print('yes' if stable() else 'no')", "from itertools import combinations\n\ndef isStable(mat, i, j):\n    type = mat[i][j]\n    if type == 'B' and i < n - 1 and (mat[i + 1][j] == 'A'):\n        return False\n    if type == 'W':\n        if j == 0 or j == m - 1 or i == n - 1 or (mat[i + 1][j] == 'A') or (mat[i][j - 1] == 'A') or (mat[i][j + 1] == 'A'):\n            return False\n    return True\n\ndef checkStability(mat, n, m):\n    for i in range(n):\n        for j in range(m):\n            if not isStable(blocks, i, j):\n                yield 'no'\nfor _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    blocks = []\n    for i in range(n):\n        blocks.append(input())\n    result = checkStability(blocks, n, m)\n    try:\n        print(next(result))\n    except StopIteration:\n        print('yes')", "T = int(input().strip())\nfor test in range(0, T):\n    stable = 1\n    figure = []\n    (N, M) = [int(temp) for temp in input().strip().split(' ')]\n    for block in range(0, N):\n        tempString = input().strip()\n        figure.insert(block, tempString)\n    for block in range(0, N):\n        for section in range(0, M):\n            if figure[block][section] == 'W':\n                if section > 0:\n                    if figure[block][section - 1] == 'A':\n                        stable = 0\n                        break\n                else:\n                    stable = 0\n                    break\n                if section < M - 1:\n                    if figure[block][section + 1] == 'A':\n                        stable = 0\n                        break\n                else:\n                    stable = 0\n                    break\n                if block < N - 1:\n                    if figure[block + 1][section] == 'A':\n                        stable = 0\n                        break\n                else:\n                    stable = 0\n                    break\n            if figure[block][section] == 'B':\n                if block < N - 1:\n                    if figure[block + 1][section] != 'B':\n                        stable = 0\n                        break\n        if stable == 0:\n            break\n    if stable:\n        print('yes')\n    else:\n        print('no')", "def getPos(x, y):\n    if x >= n or x < 0 or y >= m or (y < 0):\n        return '.'\n    return s[x][y]\n\ndef calcRes():\n    for x in range(n):\n        for y in range(m):\n            if s[x][y] == 'B':\n                c = getPos(x + 1, y)\n                if c != '.' and c != 'B':\n                    return False\n            elif s[x][y] == 'W':\n                if getPos(x + 1, y) == 'A' or getPos(x + 1, y) == '.' or (getPos(x, y - 1) != 'B' and getPos(x, y - 1) != 'W') or (getPos(x, y + 1) != 'B' and getPos(x, y + 1) != 'W'):\n                    return False\n    return True\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = [input() for x in range(n)]\n    print(['no', 'yes'][calcRes()])", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    ip = []\n    b = 0\n    for j in range(n):\n        ip.append(str(input()))\n    for j in range(n):\n        for k in range(m):\n            if ip[j][k] == 'A':\n                if j == 0 and k == 0:\n                    try:\n                        if ip[j][k + 1] == 'W':\n                            b = 1\n                            break\n                    except:\n                        pass\n                elif j == 0 and k != 0:\n                    if ip[j][k - 1] == 'W':\n                        b = 1\n                        break\n                    try:\n                        if ip[j][k + 1] == 'W':\n                            b = 1\n                            break\n                    except:\n                        pass\n                elif j != 0 and k == 0:\n                    if ip[j - 1][k] != 'A':\n                        b = 1\n                        break\n                else:\n                    if ip[j - 1][k] != 'A' or ip[j][k - 1] == 'W':\n                        b = 1\n                        break\n                    try:\n                        if ip[j][k + 1] == 'W':\n                            b = 1\n                            break\n                    except:\n                        pass\n            elif ip[j][k] == 'B':\n                try:\n                    if ip[j + 1][k] != 'B':\n                        b = 1\n                        break\n                except:\n                    pass\n            elif k == 0 or k == m - 1 or j == n - 1:\n                b = 1\n                break\n        if b == 1:\n            break\n    if b == 1:\n        print('no')\n    else:\n        print('yes')", "def main():\n    from sys import stdin, stdout\n    for _ in range(int(stdin.readline())):\n        (n, m) = map(int, stdin.readline().split())\n        flag = True\n        R = []\n        for i in range(n):\n            R.append(stdin.readline().strip())\n        for i in range(n):\n            for j in range(m):\n                if R[i][j] == 'A':\n                    if i > 0:\n                        if R[i - 1][j] != 'A':\n                            flag = False\n                            break\n                elif R[i][j] == 'W':\n                    if j == 0 or j == m - 1:\n                        flag = False\n                        break\n                    if R[i][j + 1] == 'A' or R[i][j - 1] == 'A':\n                        flag = False\n                        break\n                    if i > 0:\n                        if R[i - 1][j] == 'B':\n                            flag = False\n                            break\n                elif i < n - 1:\n                    if R[i + 1][j] != 'B':\n                        flag = False\n                        break\n            if not flag:\n                break\n        if flag:\n            stdout.write('yes\\n')\n        else:\n            stdout.write('no\\n')\nmain()", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    l = []\n    for j in range(n):\n        mm = input()\n        l.append(mm)\n    a = 0\n    c = 0\n    while a < n:\n        b = 0\n        while b < m:\n            if l[a][b] == 'W':\n                if b == 0 or b == m - 1 or a == n - 1:\n                    print('no')\n                    c += 1\n                    break\n                elif l[a][b + 1] == 'A' or l[a][b - 1] == 'A':\n                    print('no')\n                    c += 1\n                    break\n                elif a < n - 1 and l[a + 1][b] == 'A':\n                    print('no')\n                    c += 1\n                    break\n                elif a > 0 and l[a - 1][b] == 'B':\n                    print('no')\n                    c += 1\n                    break\n            elif l[a][b] == 'A':\n                if a > 0 and (l[a - 1][b] == 'B' or l[a - 1][b] == 'W'):\n                    print('no')\n                    c += 1\n                    break\n            b += 1\n        a += 1\n        if c != 0:\n            break\n    if c == 0:\n        print('yes')", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(input()))\n    flag = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 'W':\n                if j == 0 or j == m - 1 or i == n - 1:\n                    print('no')\n                    flag = 1\n                    break\n                elif a[i + 1][j] == 'A' or a[i][j + 1] == 'A' or a[i][j - 1] == 'A':\n                    print('no')\n                    flag = 1\n                    break\n            elif a[i][j] == 'B':\n                if i == n - 1:\n                    pass\n                elif a[i + 1][j] != 'B':\n                    print('no')\n                    flag = 1\n                    break\n        if flag == 1:\n            break\n    if flag == 0:\n        print('yes')", "t = int(input())\nans = []\nfor i in range(t):\n    (n, m) = list(map(int, input().split()))\n    res = []\n    for j in range(n):\n        ip = input()\n        res.append(ip)\n    stable = True\n    for j in range(n):\n        for k in range(m):\n            ele = res[j][k]\n            if ele == 'B':\n                if j != n - 1 and res[j + 1][k] != 'B':\n                    stable = False\n                    break\n            elif ele == 'W':\n                if k == 0 or k == m - 1 or j == n - 1:\n                    stable = False\n                    break\n                elif res[j][k - 1] == 'A' or res[j][k + 1] == 'A' or res[j + 1][k] == 'A':\n                    stable = False\n                    break\n    if stable:\n        ans.append('yes')\n    else:\n        ans.append('no')\nfor x in ans:\n    print(x)", "def check(string, M):\n    if string[0] == 'W' or string[M - 1] == 'W':\n        return False\n    for i in range(M):\n        if i > 0 and string[i - 1] == 'W' and (string[i] == 'A'):\n            return False\n        if i < M - 1 and string[i + 1] == 'W' and (string[i] == 'A'):\n            return False\n    return True\n\ndef checkTwo(stringA, stringB, M):\n    for i in range(M):\n        if stringA[i] == 'B' and stringB[i] == 'A':\n            return False\n        if stringA[i] == 'W' and stringB[i] == 'A':\n            return False\n    return True\nT = int(input())\nwhile T > 0:\n    (N, M) = input().split(' ')\n    N = int(N)\n    M = int(M)\n    ans = 'yes'\n    string = []\n    for i in range(N):\n        temp = input()\n        if i == N - 1 and 'W' in temp:\n            continue\n        elif check(temp, M) == True:\n            string.append(temp)\n    if len(string) < N:\n        ans = 'no'\n    else:\n        for i in range(1, len(string)):\n            stringupper = string[i - 1]\n            stringlower = string[i]\n            if checkTwo(stringupper, stringlower, M) == False:\n                ans = 'no'\n                break\n    print(ans)\n    T = T - 1", "t = int(input())\nfor _ in range(0, t):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(0, n):\n        a.append(input())\n    flag = True\n    flag1 = True\n    for i in range(0, n - 1):\n        for j in range(0, m):\n            if a[i][j] == 'B' and a[i + 1][j] != 'B':\n                print('no')\n                flag = False\n                break\n        if flag == False:\n            break\n    if flag:\n        for i in range(0, n):\n            (bfpos, blpos, wfpos, wlpos) = (10000, 0, -1, -1)\n            bFlag = False\n            wFlag = False\n            for j in range(1, m - 1):\n                if a[i][j] == 'W' and (a[i][j - 1] == 'A' or a[i][j + 1] == 'A' or a[i + 1][j] == 'A'):\n                    print('no')\n                    flag1 = False\n                    break\n            if flag1 == False:\n                break\n            if 'B' in a[i]:\n                bfpos = a[i].index('B')\n            if 'B' in a[i]:\n                blpos = a[i].rindex('B')\n            if 'W' in a[i]:\n                wfpos = a[i].index('W')\n            if 'W' in a[i]:\n                wlpos = a[i].rindex('W')\n            if (bfpos > wfpos or blpos < wlpos) and wfpos > -1:\n                print('no')\n                flag1 = False\n                break\n        if flag1:\n            print('yes')", "def test(data, n, m):\n    if any(map(lambda x: 'AW' in x or 'WA' in x, data)):\n        return False\n    for i in range(n - 1):\n        if any(map(lambda k: data[i][k] == 'B' and data[i + 1][k] != 'B', range(m))):\n            return False\n    return True\nT = int(input())\nfor t in range(T):\n    (n, m) = map(int, input().split())\n    data = ['A' + input() + 'A' for i in range(n)]\n    if test(data, n, m + 2):\n        print('yes')\n    else:\n        print('no')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    ho = []\n    for i in range(n):\n        ho.append(input())\n    ve = ['' for x in range(m)]\n    for i in range(n):\n        for j in range(m):\n            ve[j] += ho[i][j]\n    flag = 1\n    for i in range(n):\n        if 'WA' in ho[i] or 'AW' in ho[i]:\n            flag = 0\n            break\n    for i in range(m):\n        if 'BA' in ve[i] or 'WA' in ve[i] or 'BW' in ve[i]:\n            flag = 0\n            break\n    if 'W' in ve[0] or 'W' in ve[m - 1]:\n        flag = 0\n    if flag:\n        print('yes')\n    else:\n        print('no')", "for t in range(int(input())):\n    (N, M) = map(int, input().split())\n    G = []\n    for i in range(N):\n        G.append(input())\n    f = True\n    for i in range(0, N - 1):\n        if G[i][0] == 'W' or G[i][-1] == 'W':\n            f = False\n            break\n    if N > 1:\n        for j in range(0, M):\n            if G[-1][j] == 'A' and G[-2][j] != 'A':\n                f = False\n                break\n    for j in range(0, M):\n        if G[-1][j] == 'W':\n            f = False\n            break\n    for i in range(0, N - 1):\n        for j in range(1, M - 1):\n            if G[i][j] == 'B':\n                if G[i + 1][j] != 'B':\n                    f = False\n                    break\n            elif G[i][j] == 'W':\n                if G[i + 1][j] == 'A' or G[i][j - 1] == 'A' or G[i][j + 1] == 'A':\n                    f = False\n                    break\n        if not f:\n            break\n    if f:\n        print('yes')\n    else:\n        print('no')", "import sys\ntest = int(input(''))\nfor i in range(0, test):\n    (h, w) = [int(n) for n in input().split()]\n    a = ''\n    for j in range(0, w):\n        a = a + 'A'\n    res = ['A' + a + 'A']\n    for j in range(0, h):\n        res.append('A' + input() + 'A')\n    a = ''\n    for j in range(0, w):\n        a = a + 'B'\n    res.append('B' + a + 'B')\n    flag = 1\n    for j in range(1, h + 1):\n        for k in range(1, w + 2):\n            if res[j][k] == 'B':\n                if res[j + 1][k] == 'W' or res[j + 1][k] == 'A':\n                    flag = 0\n                    print('no')\n                    break\n            elif res[j][k] == 'W':\n                if res[j][k - 1] == 'A' or res[j][k + 1] == 'A' or res[j + 1][k] == 'A':\n                    flag = 0\n                    print('no')\n                    break\n        if flag == 0:\n            break\n    if flag == 1:\n        print('yes')", "for k in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    flag = True\n    for i in range(n):\n        a.append(input())\n    if a[0][0] == 'W' or a[n - 1][-1] == 'W':\n        flag = False\n    if a[0][0] == 'B':\n        try:\n            if a[1][0] != 'B':\n                flag = False\n        except:\n            pass\n    if a[0][-1] == 'B':\n        try:\n            if a[1][-1] != 'B':\n                flag = False\n        except:\n            pass\n    if True:\n        x = 0\n        for y in range(1, m - 1):\n            if a[x][y] == 'W':\n                try:\n                    if a[x][y - 1] == 'A' or a[x][y + 1] == 'A' or a[x + 1][y] == 'A':\n                        flag = False\n                        break\n                except:\n                    if a[x][y - 1] == 'A' or a[x][y + 1] == 'A':\n                        flag = False\n                        break\n            if a[x][y] == 'B':\n                try:\n                    if not a[x + 1][y] == 'B':\n                        flag = False\n                        break\n                except:\n                    pass\n        for x in range(1, n - 1):\n            if a[x][0] == 'W' or a[x][-1] == 'W':\n                flag = False\n                break\n            for y in range(m):\n                if a[x][y] == 'W':\n                    try:\n                        if a[x][y - 1] == 'A' or a[x][y + 1] == 'A' or a[x + 1][y] == 'A':\n                            flag = False\n                            break\n                    except:\n                        if a[x][y - 1] == 'A' or a[x][y + 1] == 'A':\n                            flag = False\n                            break\n                if a[x][y] == 'B':\n                    try:\n                        if not a[x + 1][y] == 'B':\n                            flag = False\n                            break\n                    except:\n                        pass\n            if not flag:\n                break\n        x = n - 1\n        if a[x][0] == 'W' or a[x][-1] == 'W':\n            flag = False\n        else:\n            for y in range(1, m - 1):\n                if a[x][y] == 'W':\n                    if a[x][y - 1] == 'A' or a[x][y + 1] == 'A':\n                        flag = False\n                        break\n    if flag:\n        print('yes')\n    else:\n        print('no')", "t = int(input())\nfor i in range(t):\n    (d, c) = list(map(int, input().split()))\n    a = [['X'] * (c + 2) for j in range(d + 2)]\n    for j in range(d):\n        a[j + 1][1:c + 1] = list(input())\n    b = 0\n    check = 0\n    for x in range(1, d + 1):\n        for y in range(1, c + 1):\n            if a[x][y] is 'B':\n                continue\n            elif a[x][y] is 'W':\n                if a[x + 1][y] == 'X' or a[x][y - 1] == 'X' or a[x][y + 1] == 'X':\n                    b = 1\n                    break\n                elif a[x + 1][y] == 'A' or a[x][y - 1] == 'A' or a[x][y + 1] == 'A':\n                    b = 1\n                    break\n                else:\n                    continue\n            elif a[x - 1][y] == 'W' or a[x][y - 1] == 'W' or a[x][y + 1] == 'W':\n                b = 1\n                break\n            elif a[x - 1][y] == 'B':\n                b = 1\n                break\n            else:\n                continue\n        if b == 1:\n            check = 1\n            break\n    print('no' if check == 1 else 'yes')", "import sys\nt = int(sys.stdin.readline())\n\ndef is_stable(n, m, d):\n    for i in range(1, m - 1):\n        if d[0][i] == 'W' and (d[0][i - 1] == 'A' or d[0][i + 1] == 'A'):\n            print('no')\n            return\n    (lw, rw) = (d[0][0], d[0][-1])\n    for i in range(n):\n        if d[i][0] == 'W' or d[i][-1] == 'W':\n            print('no')\n            return\n        if d[i][0] == 'B' and lw != 'B':\n            print('no')\n            return\n        if d[i][-1] == 'B' and rw != 'B':\n            print('no')\n            return\n        lw = d[i][0]\n        rw = d[i][-1]\n    for i in range(1, n):\n        for j in range(1, m - 1):\n            if d[i][j] == 'B' and d[i - 1][j] != 'B':\n                print('no')\n                return\n            elif d[i][j] == 'W':\n                if d[i - 1][j] == 'A':\n                    print('no')\n                    return\n                elif d[i][j - 1] == 'A':\n                    print('no')\n                    return\n                elif d[i][j + 1] == 'A':\n                    print('no')\n                    return\n    print('yes')\nwhile t:\n    (n, m) = [int(x) for x in sys.stdin.readline().split()]\n    d = []\n    d = [sys.stdin.readline().strip() for i in range(n)]\n    is_stable(n, m, d[::-1])\n    t = t - 1", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    check = False\n    for i in range(n):\n        s = input()\n        a.append(s)\n    for k in range(n):\n        for j in range(m):\n            if a[k][j] == 'W':\n                if j == 0 or j == m - 1:\n                    check = True\n                    break\n                elif a[k][j - 1] == 'A' or a[k][j + 1] == 'A':\n                    check = True\n                    break\n                elif k != n - 1 and a[k + 1][j] == 'A':\n                    check = True\n                    break\n                elif k != 0 and a[k - 1][j] == 'B':\n                    check = True\n                    break\n            elif a[k][j] == 'A':\n                if k != 0 and a[k - 1][j] == 'B':\n                    check = True\n                    break\n        if check:\n            break\n    if check:\n        print('no')\n    else:\n        print('yes')", "import re\nt = int(input())\nfor a0 in range(t):\n    (N, M) = input().strip().split(' ')\n    (N, M) = [int(N), int(M)]\n    wall = []\n    s = 0\n    for a in range(N):\n        A = input()\n        wall.append(list(A))\n    pattern1 = 'WA'\n    pattern2 = 'AW'\n    for a1 in range(N):\n        if re.search(pattern1, ''.join(wall[a1])):\n            s = 1\n            break\n        elif re.search(pattern2, ''.join(wall[a1])):\n            s = 1\n            break\n        elif wall[a1][0] == 'W' or wall[a1][M - 1] == 'W':\n            s = 1\n            break\n    ptrn1 = '[BW][A]'\n    ptrn2 = 'BW'\n    m = 0\n    while s == 0 and m < M:\n        col = ''\n        for n in range(N):\n            col = col + wall[n][m]\n        if re.search(ptrn1, col):\n            s = 1\n            break\n        elif re.search(ptrn2, col):\n            s = 1\n            break\n        else:\n            m += 1\n    if s == 1:\n        print('no')\n    else:\n        print('yes')", "import sys\n\ndef is_stable(n, m, d):\n    for i in range(1, m - 1):\n        if d[0][i] == 'W' and (d[0][i - 1] == 'A' or d[0][i + 1] == 'A'):\n            return 'no'\n    (left_wall, right_wall) = (d[0][0], d[0][-1])\n    for i in range(n):\n        if d[i][0] == 'W' or d[i][-1] == 'W':\n            return 'no'\n        if d[i][0] == 'B' and left_wall != 'B':\n            return 'no'\n        if d[i][-1] == 'B' and right_wall != 'B':\n            return 'no'\n        left_wall = d[i][0]\n        right_wall = d[i][-1]\n    for i in range(1, n):\n        for j in range(1, m - 1):\n            if d[i][j] == 'B' and d[i - 1][j] != 'B':\n                return 'no'\n            elif d[i][j] == 'W':\n                if d[i - 1][j] == 'A':\n                    return 'no'\n                elif d[i][j - 1] == 'A':\n                    return 'no'\n                elif d[i][j + 1] == 'A':\n                    return 'no'\n    return 'yes'\nt = int(sys.stdin.readline())\nwhile t:\n    t -= 1\n    (n, m) = [int(x) for x in sys.stdin.readline().split()]\n    d = []\n    d = [sys.stdin.readline().strip() for i in range(n)]\n    ans = is_stable(n, m, d[::-1])\n    print(ans)", "import re\nreg = re.compile('(WA|AW)')\n\ndef fun(a):\n    prev = ' ' * len(a[0])\n    for wid in a:\n        if wid[0] == 'W' or wid[-1] == 'W':\n            return False\n        if reg.search(wid):\n            return False\n        for (j, k) in zip(prev, wid):\n            if [j, k] in [['B', 'W'], ['B', 'A']]:\n                return False\n        prev = wid\n    return True\nt = int(input())\nfor _ in range(t):\n    (h, w) = map(int, input().split())\n    a = []\n    for _ in range(h):\n        a.append(input())\n    if fun(a):\n        print('yes')\n    else:\n        print('no')", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    r = ['X' * (m + 2)]\n    for i in range(n):\n        r += ['X' + input() + 'X']\n    r += ['X' * (m + 2)]\n    flag = False\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if r[i][j] == 'W':\n                if 'A' in [r[i][j + 1], r[i][j - 1], r[i + 1][j]]:\n                    flag = True\n                elif 'X' in [r[i][j + 1], r[i][j - 1], r[i + 1][j]]:\n                    flag = True\n            elif r[i][j] == 'B':\n                if r[i + 1][j] == 'A':\n                    flag = True\n            if flag:\n                break\n        if flag:\n            break\n    if flag:\n        print('no')\n    else:\n        print('yes')", "t = int(input())\nfor i in range(t):\n    a = []\n    (n, m) = map(int, input().split())\n    for j in range(n):\n        b = input()\n        a.append(b)\n    tag = 0\n    for j in range(n):\n        if tag == 1:\n            break\n        for k in range(m):\n            if a[j][k] == 'B':\n                try:\n                    if a[j + 1][k] == 'A':\n                        tag = 1\n                        break\n                except:\n                    tag = 0\n            elif a[j][k] == 'A':\n                try:\n                    if a[j][k - 1] == 'W':\n                        tag = 1\n                        break\n                except:\n                    tag = 0\n                try:\n                    if a[j][k + 1] == 'W':\n                        tag = 1\n                        break\n                except:\n                    tag = 0\n            else:\n                if k == 0 or k == m - 1 or j == n - 1:\n                    tag = 1\n                    break\n                try:\n                    if a[j][k + 1] == 'A':\n                        tag = 1\n                        break\n                except:\n                    tag = 0\n                try:\n                    if a[j][k - 1] == 'A':\n                        tag = 1\n                        break\n                except:\n                    tag = 0\n                try:\n                    if a[j + 1][k] == 'A':\n                        tag = 1\n                        break\n                except:\n                    tag = 0\n    if tag == 0:\n        print('yes')\n    else:\n        print('no')", "for _ in range(int(input())):\n    inp = []\n    (n, m) = map(int, input().split())\n    for i in range(n):\n        inp += [list(input())]\n    flag = True\n    inp += [[0 for x in range(m)]]\n    for i in range(n):\n        for j in range(m):\n            if inp[i][j] == 'B':\n                if inp[i + 1][j] == 'A' or inp[i + 1][j] == 'W':\n                    flag = False\n            elif inp[i][j] == 'W':\n                if j == 0 or j == m - 1:\n                    flag = False\n                else:\n                    if inp[i + 1][j] == 'A':\n                        flag = False\n                    if inp[i][j - 1] == 'A' or inp[i][j + 1] == 'A':\n                        flag = False\n        if not flag:\n            break\n    if flag:\n        print('yes')\n    else:\n        print('no')", "def solve(N, M, l):\n    for col in range(M):\n        ch = l[N - 1][col]\n        if ch not in ['B', 'A']:\n            return 'no'\n    for row in reversed(range(N)):\n        for col in range(M):\n            ch = l[row][col]\n            if ch == 'B':\n                None\n            elif ch in ['A']:\n                if row > 0 and l[row - 1][col] in ['B', 'W']:\n                    return 'no'\n                if col < M - 1 and l[row][col + 1] == 'W':\n                    return 'no'\n            elif ch in ['W']:\n                if row > 0 and l[row - 1][col] in ['B']:\n                    return 'no'\n                if col < M - 1 and l[row][col + 1] in ['A']:\n                    return 'no'\n                if col == 0:\n                    return 'no'\n    return 'yes'\nT = int(input())\nwhile T > 0:\n    (N, M) = [int(x) for x in input().split()]\n    l = []\n    for i in range(N):\n        l.append(input())\n    print(solve(N, M, l))\n    T -= 1", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    arr = [input() for _ in range(r)]\n    flag = False\n    if arr[r - 1][0] == 'W' or arr[r - 1][c - 1] == 'W':\n        print('no')\n        continue\n    for i in range(c - 1):\n        if arr[r - 1][i] == 'W' and arr[r - 1][i + 1] == 'A' or (arr[r - 1][i] == 'A' and arr[r - 1][i + 1] == 'W'):\n            print('no')\n            flag = True\n            break\n    if flag:\n        continue\n    for i in range(0, r):\n        if arr[i][0] == 'W' or arr[i][c - 1] == 'W':\n            print('no')\n            break\n    else:\n        for i in range(r - 2, -1, -1):\n            for j in range(c):\n                if arr[i][j] == 'B':\n                    if arr[i + 1][j] != 'B':\n                        print('no')\n                        flag = True\n                        break\n                elif arr[i][j] == 'W':\n                    if arr[i + 1][j] == 'A':\n                        print('no')\n                        flag = True\n                        break\n                    if j != c - 1 and arr[i][j + 1] == 'A':\n                        print('no')\n                        flag = True\n                        break\n                elif arr[i][j] == 'A':\n                    if j != c - 1 and arr[i][j + 1] == 'W':\n                        print('no')\n                        flag = True\n                        break\n            if flag:\n                break\n        else:\n            print('yes')", "t = int(input())\nfor i in range(t):\n    (n, m) = tuple([int(x) for x in input().split()])\n    l = []\n    for j in range(n):\n        l.append(list(input()))\n    answer = 'yes'\n    for j in range(n):\n        for k in range(m):\n            if l[j][k] == 'W':\n                if k == 0 or k == m - 1 or j == n - 1:\n                    answer = 'no'\n                    break\n                if l[j][k + 1] == 'A' or l[j][k - 1] == 'A' or l[j + 1][k] == 'A':\n                    answer = 'no'\n                    break\n            if l[j][k] == 'B' and j < n - 1:\n                if l[j + 1][k] == 'A':\n                    answer = 'no'\n                    break\n        if answer == 'no':\n            break\n    print(answer)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    mat = []\n    for j in range(n):\n        lis = list(input())\n        mat.append(lis)\n    flag = True\n    for j in range(n - 1, -1, -1):\n        for k in range(m):\n            if mat[j][k] == 'A':\n                if j != 0:\n                    if mat[j - 1][k] == 'B' or mat[j - 1][k] == 'W':\n                        flag = False\n            elif mat[j][k] == 'W':\n                if k == 0 or k == m - 1:\n                    flag = False\n                elif mat[j][k - 1] == 'A' or mat[j][k + 1] == 'A':\n                    flag = False\n                elif j != 0:\n                    if mat[j - 1][k] == 'B':\n                        flag = False\n    if flag:\n        print('yes')\n    else:\n        print('no')", "def checka(i, j, n, m, tank):\n    flag = 0\n    if i == 0:\n        if j > 0:\n            if tank[i][j - 1] == 'W':\n                flag = 1\n        if j < m - 1:\n            if tank[i][j + 1] == 'W':\n                flag = 1\n    if i > 0:\n        if tank[i - 1][j] == 'W' or tank[i - 1][j] == 'B':\n            flag = 1\n    if flag:\n        return False\n    else:\n        return True\n\ndef checkw(i, j, n, m, tank):\n    flag = 0\n    if j == 0 or j == m - 1:\n        flag = 1\n    if j > 0:\n        if tank[i][j - 1] == 'A':\n            flag = 1\n    if j < m - 1:\n        if tank[i][j + 1] == 'A':\n            flag = 1\n    if i > 0:\n        if tank[i - 1][j] == 'B':\n            flag = 1\n    if flag:\n        return False\n    else:\n        return True\nT = int(input())\nfor t_ in range(T):\n    (n, m) = map(int, input().split(' '))\n    tank = []\n    for i in range(n):\n        s = input()\n        tank.append(list(s))\n    flag = 0\n    for i in range(n):\n        for j in range(m):\n            if tank[i][j] == 'A':\n                if not checka(i, j, n, m, tank):\n                    flag = 1\n            elif tank[i][j] == 'W':\n                if not checkw(i, j, n, m, tank):\n                    flag = 1\n    print('no') if flag else print('yes')"]