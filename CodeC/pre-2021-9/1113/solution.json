["def snek1(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef snek2(l):\n    n1 = l[0]\n    n2 = l[1]\n    gcd = snek1(n1, n2)\n    for i in range(2, len(l)):\n        gcd = snek1(gcd, l[i])\n    return gcd\n\ndef factors(n):\n    if n == 0:\n        return 1\n    x = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            x.append(i)\n            x.append(n // i)\n    return x\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    h = 0\n    if m > 1:\n        h = snek2(p)\n    else:\n        h = p[0]\n    f = factors(h)\n    f.sort(reverse=True)\n    ans = 0\n    for j in f:\n        if j <= n:\n            ans = n - j\n            break\n    print(ans)", "def snek1(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef snek2(l):\n    n1 = l[0]\n    n2 = l[1]\n    gcd = snek1(n1, n2)\n    for i in range(2, len(l)):\n        gcd = snek1(gcd, l[i])\n    return gcd\n\ndef factors(n):\n    if n == 0:\n        return 1\n    x = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            x.append(i)\n            x.append(n // i)\n    return x\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    h = 0\n    if m > 1:\n        h = snek2(p)\n    else:\n        h = p[0]\n    f = factors(h)\n    f.sort(reverse=True)\n    ans = 0\n    for j in f:\n        if j <= n:\n            ans = n - j\n            break\n    print(ans)", "def snek1(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef snek2(l):\n    n1 = l[0]\n    n2 = l[1]\n    gcd = snek1(n1, n2)\n    for i in range(2, len(l)):\n        gcd = snek1(gcd, l[i])\n    return gcd\n\ndef factors(n):\n    if n == 0:\n        return 1\n    x = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            x.append(i)\n            x.append(n // i)\n    return x\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    h = 0\n    if m > 1:\n        h = snek2(p)\n    else:\n        h = p[0]\n    f = factors(h)\n    f.sort(reverse=True)\n    ans = 0\n    for j in f:\n        if j <= n:\n            ans = n - j\n            break\n    print(ans)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    spells = [int(j) for j in input().split()]\n    if m == 1:\n        ans = spells[0]\n    else:\n        ans = gcd(spells[0], spells[1])\n    for j in range(2, m):\n        ans = gcd(ans, spells[j])\n    if ans <= n:\n        print(n - ans)\n    else:\n        j = 1\n        maxi = 0\n        while j * j <= ans:\n            if ans % j == 0:\n                z = ans // j\n                if j <= n and j > maxi:\n                    maxi = j\n                if z <= n and z > maxi:\n                    maxi = z\n            j += 1\n        print(n - maxi)", "from math import gcd, sqrt\nT = int(input())\nfor i in range(T):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    g = 0\n    for i in l:\n        g = gcd(g, i)\n    if g < n:\n        print(n - g)\n        continue\n    f = 0\n    s = int(sqrt(g))\n    for i in range(1, s + 1):\n        if g % i == 0:\n            if i <= n:\n                f = max(f, i)\n            if g // i <= n:\n                f = max(f, g // i)\n    print(n - f)", "def prime(k, n):\n    while n >= 2:\n        if k % n == 0:\n            return n\n        else:\n            n -= 1\n    return 1\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef findGCD(arr, n):\n    result = arr[0]\n    for i in range(1, n):\n        result = gcd(arr[i], result)\n        if result == 1:\n            return 1\n    return result\nt = int(input())\nwhile t:\n    (n, m) = [int(a) for a in input().split()]\n    odd = 0\n    even = 0\n    p = [int(a) for a in input().split()][:m]\n    o = findGCD(p, m)\n    if o <= n:\n        print(n - o)\n    else:\n        p = prime(o, n)\n        print(n - p)\n    t -= 1", "def prime(k, n):\n    while n >= 2:\n        if k % n == 0:\n            return n\n        else:\n            n -= 1\n    return 1\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef findGCD(arr, n):\n    result = arr[0]\n    for i in range(1, n):\n        result = gcd(arr[i], result)\n        if result == 1:\n            return 1\n    return result\nt = int(input())\nwhile t:\n    (n, m) = [int(a) for a in input().split()]\n    odd = 0\n    even = 0\n    p = [int(a) for a in input().split()][:m]\n    o = findGCD(p, m)\n    if o <= n:\n        print(n - o)\n    else:\n        p = prime(o, n)\n        print(n - p)\n    t -= 1", "import sys, math, itertools, random, bisect\nfrom collections import defaultdict\nINF = 10 ** 18\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, m) = get_ints()\n    a = get_array()\n    g = 0\n    for i in range(m):\n        g = math.gcd(g, a[i])\n    mx_factor = 0\n    for i in range(1, int(g ** 0.5) + 1):\n        if g % i == 0:\n            if i <= n:\n                mx_factor = max(mx_factor, i)\n            if g // i <= n:\n                mx_factor = max(mx_factor, g // i)\n    ans = n - mx_factor\n    print(ans)", "import math\nimport random\n\ndef findGCD(l: list):\n    ans = l[0]\n    for i in l[1:]:\n        ans = math.gcd(ans, i)\n    return int(ans)\n\ndef cirChaos(N, M, spells: list):\n    GCD = findGCD(spells)\n    rem = 0\n    if GCD > N:\n        i = N\n        while i > 0:\n            if GCD % i == 0:\n                rem = i\n                break\n            i -= 1\n    else:\n        rem = GCD\n    return N - rem\nT = int(input())\nfor t in range(T):\n    (N, M) = input().split()\n    N = int(N)\n    M = int(M)\n    spells = input().split()\n    spells = list(map(int, spells))\n    print(cirChaos(N, M, spells))", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef gcd_arr(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    return gcd\n\ndef factors(n):\n    if n == 0:\n        return 1\n    x = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            x.append(i)\n            x.append(n // i)\n    return x\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    hcf = 0\n    if m > 1:\n        hcf = gcd_arr(p)\n    else:\n        hcf = p[0]\n    fact = factors(hcf)\n    fact.sort(reverse=True)\n    final = 0\n    for i in fact:\n        if i <= n:\n            final = n - i\n            break\n    print(final)", "import functools\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    return gcd(y, x % y)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    ans = functools.reduce(lambda x, y: gcd(x, y), p)\n    if ans <= n:\n        print(n - ans)\n    else:\n        f = [1]\n        for k in range(ans // 2, 1, -1):\n            if ans % k == 0:\n                if k <= n:\n                    f.append(k)\n                if ans // k <= n:\n                    f.append(ans // k)\n        res = n - max(f)\n        print(res)", "import functools\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    return gcd(y, x % y)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    ans = functools.reduce(lambda x, y: gcd(x, y), p)\n    if ans <= n:\n        print(n - ans)\n    else:\n        f = [1]\n        for k in range(ans // 2, 1, -1):\n            if ans % k == 0:\n                if k <= n:\n                    f.append(k)\n                    break\n                if ans // k <= n:\n                    f.append(ans // k)\n        res = n - max(f)\n        print(res)", "from math import gcd, sqrt, ceil\n\ndef fac(x, n):\n    mx = 1\n    for i in range(1, ceil(sqrt(x)) + 1):\n        if x % i == 0:\n            if i <= n:\n                mx = max(mx, i)\n            if x // i <= n:\n                mx = max(mx, x // i)\n    return mx\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    rev = n\n    lis = list(map(int, input().split()))\n    g = lis[0]\n    for i in lis:\n        g = gcd(g, i)\n    if n > g:\n        k = n - g\n    else:\n        val = fac(g, n)\n        k = n - val\n    print(k)", "def _gcd(a, b):\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\n\ndef __gcd(mp):\n    if len(mp) == 1:\n        return mp[0]\n    gcd = _gcd(mp[0], mp[1])\n    for i in range(2, len(mp)):\n        gcd = _gcd(gcd, mp[i])\n    return gcd\n\ndef factors(hcf):\n    if hcf == 0:\n        return [1]\n    factor_list = []\n    for i in range(1, int(hcf ** 0.5) + 1):\n        if hcf % i == 0:\n            factor_list.append(i)\n            factor_list.append(hcf // i)\n    return factor_list\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    mp = list(map(int, input().split()))\n    hcf = 0\n    if m == 1:\n        hcf = mp[0]\n    elif m > 1:\n        hcf = __gcd(mp)\n    ans = 0\n    factor_list = factors(hcf)\n    factor_list.sort(reverse=True)\n    for i in factor_list:\n        if i <= n:\n            ans = n - i\n            break\n    print(ans)", "import math\n\ndef gcd(a, b):\n    if a % b == 0:\n        return b\n    return gcd(b, a % b)\n\ndef maxfact(g, n):\n    i = 1\n    maxf = None\n    while i * i <= g:\n        if g % i == 0:\n            if i <= n:\n                maxf = i\n            if math.floor(g / i) <= n:\n                maxf = math.floor(g / i)\n                break\n        i = i + 1\n    return maxf\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    [n, m] = [int(x) for x in input().split(' ')]\n    spells = [int(x) for x in input().split(' ')]\n    g = spells[0]\n    for i in range(1, m):\n        g = gcd(g, spells[i])\n    print(n - maxfact(g, n))", "try:\n\n    def gcd_fd(i, j):\n        while j:\n            (i, j) = (j, i % j)\n        return i\n\n    def gcd_l(t):\n        num = t[0]\n        k = t[1]\n        gcd = gcd_fd(num, k)\n        for i in range(2, len(t)):\n            gcd = gcd_fd(gcd, t[i])\n        return gcd\n\n    def fact(num1):\n        if num1 == 0:\n            return 1\n        a = []\n        for j in range(1, int(num1 ** (1 / 2)) + 1):\n            if num1 % j == 0:\n                a.append(j)\n                a.append(num1 // j)\n        return a\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        p = 0\n        ans = 0\n        if m > 1:\n            p = gcd_l(a)\n        else:\n            p = a[0]\n        fac = fact(p)\n        fac.sort(reverse=True)\n        for i in fac:\n            if i <= n:\n                ans = n - i\n                break\n        print(ans)\nexcept:\n    pass", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef maxfact(x, n):\n    lar_fac = 0\n    for i in range(1, x + 1):\n        if x % i == 0:\n            if i <= n:\n                lar_fac = max(lar_fac, i)\n            elif x / i <= n:\n                lar_fac = max(lar_fac, x / i)\n    return lar_fac\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    gcd = 0\n    for i in range(m):\n        gcd = find_gcd(gcd, p[i])\n    if gcd > n:\n        temp = maxfact(gcd, n)\n        gcd = temp\n    ans = n - gcd\n    print(ans)", "def gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\n\ndef fgcd(a):\n    r = a[0]\n    for i in range(1, len(a)):\n        r = gcd(a[i], r)\n        if r == 1:\n            return 1\n    return r\nt = int(input())\nwhile t:\n    t -= 1\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    mn = fgcd(a)\n    c = 0\n    if n >= mn:\n        c = n - mn\n        print(c)\n        continue\n    while n > 1:\n        if mn % n != 0:\n            c += 1\n            n -= 1\n        else:\n            break\n    print(c)", "from math import gcd\n\ndef largest_factor(val, n):\n    k = min(n, val)\n    while k > 0:\n        if val % k == 0:\n            return k\n        k -= 1\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    li = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        val = li[0]\n        for i in range(1, m):\n            val = gcd(val, li[i])\n        print(n - largest_factor(val, n))", "import math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    p = list(map(int, input().split(' ')))\n    g = p[0]\n    for i in range(1, m):\n        g = gcd(g, p[i])\n    if g > n:\n        maxEl = 1\n        for i in range(2, int(math.sqrt(g) + 1)):\n            if g % i == 0:\n                if i <= n:\n                    maxEl = max(maxEl, i)\n                if g // i <= n:\n                    maxEl = max(maxEl, g // i)\n        print(n - maxEl)\n    else:\n        print(n - g)", "import math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    p = list(map(int, input().split(' ')))\n    g = p[0]\n    for i in range(1, m):\n        g = gcd(g, p[i])\n    if g > n:\n        maxEl = 1\n        for i in range(2, int(math.sqrt(g) + 1)):\n            if g % i == 0:\n                if i <= n:\n                    maxEl = max(maxEl, i)\n                if g // i <= n:\n                    maxEl = max(maxEl, g // i)\n        print(n - maxEl)\n    else:\n        print(n - g)", "import math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    p = list(map(int, input().split(' ')))\n    g = p[0]\n    for i in range(1, m):\n        g = gcd(g, p[i])\n    if g > n:\n        maxEl = 1\n        for i in range(n, 0, -1):\n            if g % i == 0:\n                maxEl = i\n                break\n        print(n - maxEl)\n    else:\n        print(n - g)", "from math import gcd, sqrt\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    g = 0\n    for i in l:\n        g = gcd(g, i)\n    if g < n:\n        print(n - g)\n        continue\n    f = 0\n    s = int(sqrt(g))\n    for i in range(1, s + 1):\n        if g % i == 0:\n            if i <= n:\n                f = max(f, i)\n            if g // i <= n:\n                f = max(f, g // i)\n    print(n - f)", "import math\n\ndef hcfnaive(a, b):\n    if b == 0:\n        return a\n    else:\n        return hcfnaive(b, a % b)\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    hcf = a[0]\n    for j in range(m):\n        hcf = hcfnaive(hcf, a[j])\n    if hcf <= n:\n        print(n - hcf)\n    else:\n        b = []\n        c = 0\n        for j in range(1, int(math.sqrt(hcf)) + 2):\n            if hcf % j == 0:\n                b.append(j)\n                b.append(hcf // j)\n                c = c + 2\n        b.sort()\n        h = 1\n        for j in range(c - 1, -1, -1):\n            if b[j] <= n:\n                h = b[j]\n                break\n        print(n - h)", "import math\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    def hcf(x, y):\n        if x % y == 0:\n            return y\n        else:\n            return hcf(y, x % y)\n    ans = a[0]\n    for i in range(1, m):\n        if a[i] > ans:\n            ans = hcf(a[i], ans)\n        else:\n            ans = hcf(ans, a[i])\n    ans1 = 0\n    for i in range(1, int(math.sqrt(ans)) + 1):\n        if ans % i == 0:\n            if i <= n:\n                ans1 = max(ans1, i)\n            if ans // i <= n:\n                ans1 = max(ans1, ans // i)\n    print(n - ans1)", "import math as x\n\ndef lfact(n, k):\n    fact = []\n    max = 0\n    for j in range(1, int(k ** 0.5) + 1):\n        if k % j == 0:\n            if j <= n and j > max:\n                max = j\n            if k // j <= n and k // j > max:\n                max = k // j\n    return max\nt = int(input())\nfor j in range(t):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        g = 0\n        for i in range(m):\n            g = x.gcd(arr[i], g)\n        if g > n:\n            g = lfact(n, g)\n            print(n - g)\n        elif g == n:\n            print(0)\n        else:\n            print(n - g)", "def gcdf(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nt = int(input())\nfor cases in range(t):\n    (n, m) = list(map(int, input().split()))\n    spells = list(map(int, input().split()))\n    kills = 0\n    gcd = spells[0]\n    for i in range(1, m):\n        gcd = gcdf(gcd, spells[i])\n    if n > gcd:\n        kills += n - gcd\n        n = gcd\n    if n < gcd:\n        for i in range(n, 0, -1):\n            if gcd % i == 0:\n                break\n            kills += 1\n    print(kills)", "import math\n\ndef gcdiv(l):\n    l.sort()\n    ans = math.gcd(l[0], l[1])\n    i = 2\n    while ans != 1 and i < len(l):\n        ans = math.gcd(ans, l[i])\n        i = i + 1\n    return ans\n\ndef lf(gc, n):\n    if gc < n:\n        return gc\n    out = n\n    while out > 1:\n        if gc % out == 0:\n            return out\n        out -= 1\n    return out\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    l1 = list(map(lambda i: int(i), input().split()))\n    if len(l1) > 1:\n        gc = gcdiv(l1)\n    else:\n        gc = l1[0]\n    print(n - lf(gc, n))", "def gcd(a1, b1):\n    if b1 == 0:\n        return a1\n    else:\n        return gcd(b1, a1 % b1)\na = int(input())\nfor i in range(a):\n    b = list(map(int, str(input()).split(' ')))\n    c = list(map(int, str(input()).split(' ')))\n    k = c[0]\n    Ans = 0\n    if b[0] == 1:\n        print(0)\n    elif b[1] == 1:\n        if b[0] > c[0]:\n            print(abs(b[0] - c[0]))\n        elif b[0] == c[0]:\n            print(0)\n        else:\n            for i2 in range(b[0] - 1):\n                if c[0] % b[0] != 0:\n                    Ans += 1\n                    b[0] -= 1\n                else:\n                    break\n            print(Ans)\n    else:\n        for i1 in range(b[1]):\n            k = gcd(c[i1], k)\n        if b[0] > k:\n            print(abs(b[0] - k))\n        elif b[0] == k:\n            print(0)\n        else:\n            for i3 in range(b[0] - 1):\n                if k % b[0] != 0:\n                    Ans += 1\n                    b[0] -= 1\n                else:\n                    break\n            print(Ans)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef printAllDivisors(arr, m, n):\n    g = arr[0]\n    divisors = dict()\n    for i in range(1, m):\n        g = gcd(arr[i], g)\n    for i in range(1, g + 1):\n        if i * i > g:\n            break\n        if g % i == 0:\n            divisors[i] = 1\n            if g // i != i:\n                divisors[g // i] = 1\n    maxx = 0\n    for it in sorted(divisors):\n        if it <= n:\n            maxx = it\n    return maxx\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    print(n - printAllDivisors(arr, m, n))", "try:\n\n    def find_gcd(x, y):\n        while y:\n            (x, y) = (y, x % y)\n        return x\n\n    def gcd_arr(l):\n        num1 = l[0]\n        num2 = l[1]\n        gcd = find_gcd(num1, num2)\n        for i in range(2, len(l)):\n            gcd = find_gcd(gcd, l[i])\n        return gcd\n\n    def factors(n):\n        if n == 0:\n            return 1\n        x = []\n        for i in range(1, int(n ** (1 / 2)) + 1):\n            if n % i == 0:\n                x.append(i)\n                x.append(n // i)\n        return x\n    for t in range(int(input())):\n        (n, m) = map(int, input().split())\n        p = list(map(int, input().split()))\n        hcf = 0\n        if m > 1:\n            hcf = gcd_arr(p)\n        else:\n            hcf = p[0]\n        fact = factors(hcf)\n        fact.sort(reverse=True)\n        final = 0\n        for i in fact:\n            if i <= n:\n                final = n - i\n                break\n        print(final)\nexcept:\n    pass", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef gcd_arr(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    return gcd\n\ndef factors(n):\n    if n == 0:\n        return 1\n    x = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            x.append(i)\n            x.append(n // i)\n    return x\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    hcf = 0\n    if m > 1:\n        hcf = gcd_arr(p)\n    else:\n        hcf = p[0]\n    fact = factors(hcf)\n    fact.sort(reverse=True)\n    final = 0\n    for i in fact:\n        if i <= n:\n            final = n - i\n            break\n    print(final)", "import math\n\ndef fun(a):\n    gcd = a[0]\n    for i in range(1, len(a)):\n        gcd = math.gcd(gcd, a[i])\n    return gcd\nfor _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    gcd = fun(a)\n    if gcd > n:\n        z = [1, gcd]\n        for i in range(2, gcd // 2 + 1):\n            if gcd % i == 0:\n                z.append(i)\n        z = sorted(z, reverse=True)\n        for x in z:\n            if x <= n:\n                break\n        print(n - x)\n    else:\n        print(n - gcd)", "import math\n\ndef maxfact(g, n):\n    maxfactor = 0\n    i = 1\n    while i * i <= g:\n        if g % i == 0:\n            if i <= n:\n                maxfactor = max(maxfactor, i)\n            if g // i <= n:\n                maxfactor = max(maxfactor, g // i)\n        i += 1\n    return maxfactor\n\ndef find_kills(n, m, spells):\n    gcd = 0\n    for i in range(m):\n        gcd = math.gcd(gcd, spells[i])\n    if gcd > n:\n        lf = maxfact(gcd, n)\n        gcd = lf\n    return n - gcd\nT = int(input())\nfor i in range(T):\n    (n, m) = map(int, input().split(' '))\n    spells = list(map(int, input().split(' ')))\n    print(find_kills(n, m, spells))", "import math\n\ndef factor(a):\n    for x in range(2, a):\n        if a % x == 0:\n            return a / x\n\ndef factors(n):\n    if n == 0:\n        return 1\n    x = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            x.append(i)\n            x.append(n // i)\n    x.sort(reverse=True)\n    return x\n\ndef gcd(a, b):\n    if b > a:\n        (a, b) = (b, a)\n    while b:\n        (a, b) = (b, a % b)\n    return a\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    spells = list(map(int, input().split()))\n    ans = 0\n    for spell in spells:\n        ans = gcd(ans, spell)\n    fact = factors(ans)\n    for f in fact:\n        if f <= n:\n            print(n - f)\n            break", "from math import sqrt\n\ndef greatest_divisor(x, y):\n    if y == 0:\n        return x\n    return greatest_divisor(y, x % y)\n\ndef largest_fact(p, n):\n    maxfact = 0\n    for i in range(1, int(sqrt(p)) + 1):\n        if p % i == 0:\n            if i <= n:\n                maxfact = max(maxfact, i)\n            if p // i <= n:\n                maxfact = max(maxfact, p // i)\n    return maxfact\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()[:m]))\n    ans = 0\n    for i in p:\n        ans = greatest_divisor(ans, i)\n    if ans > n:\n        ans = largest_fact(ans, n)\n    kill = n - ans\n    print(kill)", "import math\n\ndef gcdiv(l):\n    l.sort()\n    ans = math.gcd(l[0], l[1])\n    i = 2\n    while ans != 1 and i < len(l):\n        ans = math.gcd(ans, l[i])\n        i = i + 1\n    return ans\n\ndef lf(gc, n):\n    if gc < n:\n        return gc\n    out = n\n    while out > 1:\n        if gc % out == 0:\n            return out\n        out -= 1\n    return out\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    l1 = list(map(lambda i: int(i), input().split()))\n    if len(l1) > 1:\n        gc = gcdiv(l1)\n    else:\n        gc = l1[0]\n    print(n - lf(gc, n))", "import math\nimport functools\nt = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    mi = 0\n    g = functools.reduce(lambda x, y: math.gcd(x, y), p)\n    ma = 0\n    if g > n:\n        for i in range(1, int(math.sqrt(g)) + 1):\n            if g % i == 0:\n                if i <= n:\n                    ma = max(ma, i)\n                if g // i <= n:\n                    ma = max(ma, g // i)\n        print(n - ma)\n        continue\n    print(n - g)", "from math import gcd\nfor _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    spells = list(map(int, input().split()))\n    if N == 1:\n        print(0)\n    else:\n        curr_gcd = spells[0]\n        for i in range(M - 1):\n            curr_gcd = gcd(curr_gcd, spells[i + 1])\n            if curr_gcd == 1:\n                break\n        if curr_gcd <= N:\n            print(N - curr_gcd)\n        else:\n            max_factor = 1\n            for i in range(2, int((curr_gcd + 1) ** 0.5) + 1):\n                if curr_gcd % i == 0:\n                    if i > N:\n                        break\n                    max_factor = i\n                    if curr_gcd // i <= N:\n                        max_factor = curr_gcd // i\n                        break\n            print(N - max_factor)", "from math import gcd\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    g = 0\n    for i in range(len(lst)):\n        g = gcd(g, lst[i])\n    if g > n:\n        fac = [1]\n        for i in range(2, g // 2 + 1):\n            if g % i == 0:\n                if i <= n:\n                    fac.append(i)\n                else:\n                    break\n        g = fac[-1]\n    print(n - g)", "from math import ceil, gcd\n\ndef factors(x, n):\n    f = []\n    k = 0\n    for i in range(1, int(x ** 0.5) + 1):\n        if x % i == 0:\n            f.append(i)\n            f.append(x // i)\n            i1 = x // i\n            if i <= n and i > k:\n                k = i\n            if i1 <= n and i1 > k:\n                k = i1\n    return k\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    elif min(p) == 1:\n        print(n - 1)\n    elif m == 1:\n        k = factors(p[0], n)\n        print(n - k)\n    else:\n        a = gcd(p[0], p[1])\n        l = len(p)\n        for i in range(2, l):\n            a = gcd(a, p[i])\n        k = factors(a, n)\n        print(n - k)", "import math\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    g = 0\n    for i in range(m):\n        g = math.gcd(g, l[i])\n    if n - g > 0:\n        print(n - g)\n    else:\n        t = n\n        while g % n != 0:\n            n -= 1\n        print(t - n)", "import sys\ninput = sys.stdin.readline\nfrom math import ceil, floor, sqrt, gcd, log\nri = lambda : int(input())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input().strip('\\r\\n')\nfor _ in range(ri()):\n    (n, m) = rl()\n    p = rl()\n    if n == 1:\n        print(0)\n        continue\n    ans = p[0]\n    for i in range(m):\n        ans = gcd(ans, p[i])\n    if ans > n:\n        f = 0\n        i = 1\n        while i * i <= ans and i <= n:\n            if ans % i == 0:\n                if ans // i <= n:\n                    f = max(f, ans // i)\n                else:\n                    f = max(f, i)\n            i += 1\n        ans = f\n    print(n - ans)", "import math\nimport sys\nfrom functools import partial, reduce\nSAMPLE_IN = 'sample.in'\nSAMPLE_ANS = 'sample.ans'\n\ndef read_ints(f) -> list:\n    return [int(x) for x in f.readline().split()]\n\ndef read_case(f=sys.stdin) -> tuple:\n    (n, m) = read_ints(f)\n    return (n, m, read_ints(f))\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef greatest_divisor_less_or_equal_than(n, max_value):\n    if n <= max_value:\n        return n\n    sqrt = int(math.sqrt(n))\n    min_ = sqrt if max_value >= sqrt else 1\n    sup = max_value + 1\n    return next((i for i in reversed(range(min_, sup)) if n % i == 0), 1)\n\ndef solve(n, m, powers):\n    powers_gcd = reduce(gcd, powers)\n    g = greatest_divisor_less_or_equal_than(powers_gcd, max_value=n)\n    return n - g\n\ndef make_submission(fin=sys.stdin, fout=sys.stdout):\n    output = partial(print, file=fout)\n    n_cases = int(fin.readline())\n    for t in range(1, n_cases + 1):\n        case = read_case(fin)\n        answer = solve(*case)\n        output(answer)\nimport os\nif os.getenv('GCJ_LOCAL'):\n    with open(SAMPLE_IN) as s:\n        make_submission(s)\nelse:\n    make_submission()", "import math\nimport sys\nfrom functools import partial, reduce\nSAMPLE_IN = 'sample.in'\nSAMPLE_ANS = 'sample.ans'\n\ndef read_ints(f) -> list:\n    return [int(x) for x in f.readline().split()]\n\ndef read_case(f=sys.stdin) -> tuple:\n    (n, m) = read_ints(f)\n    return (n, m, read_ints(f))\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef greatest_divisor_less_or_equal_than(n, max_value):\n    sqrt = int(math.sqrt(n))\n    if max_value >= sqrt:\n        min_ = sqrt\n        sup = min(n, max_value) + 1\n    else:\n        min_ = 1\n        sup = max_value + 1\n    return next((i for i in reversed(range(min_, sup)) if n % i == 0), 1)\n\ndef solve(n, m, powers):\n    powers_gcd = reduce(gcd, powers)\n    g = greatest_divisor_less_or_equal_than(powers_gcd, max_value=n)\n    return n - g\n\ndef make_submission(fin=sys.stdin, fout=sys.stdout):\n    output = partial(print, file=fout)\n    n_cases = int(fin.readline())\n    for t in range(1, n_cases + 1):\n        case = read_case(fin)\n        answer = solve(*case)\n        output(answer)\nimport os\nif os.getenv('GCJ_LOCAL'):\n    with open(SAMPLE_IN) as s:\n        make_submission(s)\nelse:\n    make_submission()", "import math\nimport sys\nfrom functools import partial, reduce\nSAMPLE_IN = 'sample.in'\nSAMPLE_ANS = 'sample.ans'\n\ndef read_ints(f) -> list:\n    return [int(x) for x in f.readline().split()]\n\ndef read_case(f=sys.stdin) -> tuple:\n    (n, m) = read_ints(f)\n    return (n, m, read_ints(f))\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef greatest_divisor_less_or_equal_than(n, max_value):\n    sqrt = int(math.sqrt(n))\n    if max_value >= sqrt:\n        min_ = sqrt\n        sup = min(n, max_value) + 1\n    else:\n        min_ = 1\n        sup = max_value + 1\n    for i in reversed(range(min_, sup)):\n        if n % i == 0:\n            return i\n    return 1\n\ndef solve(n, m, powers):\n    powers_gcd = reduce(gcd, powers)\n    g = greatest_divisor_less_or_equal_than(powers_gcd, max_value=n)\n    return n - g\n\ndef make_submission(fin=sys.stdin, fout=sys.stdout):\n    output = partial(print, file=fout)\n    n_cases = int(fin.readline())\n    for t in range(1, n_cases + 1):\n        case = read_case(fin)\n        answer = solve(*case)\n        output(answer)\nimport os\nif os.getenv('GCJ_LOCAL'):\n    with open(SAMPLE_IN) as s:\n        make_submission(s)\nelse:\n    make_submission()", "import sys\nimport time\nstart_time = time.time()\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfrom collections import Counter\nfrom itertools import permutations\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    spell = list(map(int, input().split()))\n    hcf = 0\n    for i in spell:\n        hcf = gcd(i, hcf)\n    ans = 0\n    for i in range(1, hcf + 1):\n        if i * i > hcf:\n            break\n        if hcf % i == 0:\n            one = i\n            other = hcf // i\n            if one <= n:\n                ans = max(ans, one)\n            if other <= n:\n                ans = max(ans, other)\n    print(n - ans)\nprint('Execution time : {0:.9f} seconds'.format(time.time() - start_time), file=sys.stderr)", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef gcd_arr(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    return gcd\n\ndef factors(n):\n    if n == 0:\n        return 1\n    x = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            x.append(i)\n            x.append(n // i)\n    return x\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    hcf = 0\n    if m > 1:\n        hcf = gcd_arr(p)\n    else:\n        hcf = p[0]\n    fact = factors(hcf)\n    fact.sort(reverse=True)\n    final = 0\n    for i in fact:\n        if i <= n:\n            final = n - i\n            break\n    print(final)", "def GCD(x, y):\n    if not y:\n        return x\n    return GCD(y, x % y)\n\ndef gcd(arr):\n    temp1 = arr[0]\n    for i in range(1, len(arr)):\n        temp1 = GCD(temp1, arr[i])\n    return temp1\n\ndef hcf(gcd, N):\n    if gcd <= N:\n        return gcd\n    else:\n        for i in range(gcd // 2, 0, -1):\n            if gcd % i == 0 and i <= N:\n                return i\nfor t in range(int(input())):\n    (N, M) = map(int, input().split())\n    po = list(map(int, input().split()))\n    gc = gcd(po)\n    print(N - hcf(gc, N))", "def largestFactor(x, y):\n    while x % y:\n        y -= 1\n    return y\n\ndef gcd(a, b):\n    if b > a:\n        return gcd(b, a)\n    if not b:\n        return a\n    return gcd(b, a % b)\n\ndef getGcd(arr):\n    _gcd = arr[0]\n    for i in range(1, len(arr)):\n        _gcd = gcd(_gcd, arr[i])\n    return _gcd\n\ndef solve(arr, N):\n    if N <= 1:\n        return 0\n    _gcd = getGcd(arr)\n    if _gcd == 1:\n        return N - 1\n    if _gcd < N:\n        return N - _gcd\n    if not _gcd % N:\n        return 0\n    return N - largestFactor(_gcd, N)\nT = int(input())\nfor tc in range(T):\n    (N, M) = [int(x) for x in input().strip().split(' ')]\n    arr = [int(x) for x in input().strip().split(' ')]\n    print(solve(arr, N))", "import math\n\ndef maxfactor(x, n):\n    i = 1\n    f = 1\n    while i * i <= x:\n        if x % i == 0:\n            if i <= n:\n                f = max(f, i)\n            if x // i <= n:\n                f = max(f, x // i)\n        i = i + 1\n    return f\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    g = 0\n    for i in arr:\n        g = math.gcd(g, i)\n    k = maxfactor(g, n)\n    print(n - k)", "def CommonSpells(x, y):\n    if y == 0:\n        return x\n    return CommonSpells(y, x % y)\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    spells = list(map(int, input().split()))\n    common = 0\n    for i in range(m):\n        common = CommonSpells(common, spells[i])\n    if common > n:\n        valid = 0\n        for i in range(1, common):\n            if common % i == 0 and i <= n:\n                valid = max(valid, i)\n        common = valid\n    print(n - common)", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    P = list(map(int, input().split()))\n    g = ans = 0\n    for i in P:\n        g = math.gcd(g, i)\n    for i in range(1, int(math.sqrt(g)) + 1):\n        if g % i == 0:\n            if i <= n:\n                ans = max(ans, i)\n            if g // i <= n:\n                ans = max(ans, g // i)\n    print(n - ans)", "from math import gcd\n\ndef maxfactor(x, n):\n    i = 1\n    f = 1\n    while i * i <= x:\n        if x % i == 0:\n            if i <= n:\n                f = max(f, i)\n            if x // i <= n:\n                f = max(f, x // i)\n        i += 1\n    return f\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    g = 0\n    for i in p:\n        g = gcd(g, i)\n    if g > n:\n        g = maxfactor(g, n)\n    print(n - g)", "import sys\nimport os\nimport math\nimport copy\nimport random\nfrom bisect import bisect\nfrom io import BytesIO, IOBase\nfrom math import sqrt, floor, factorial, gcd, log, ceil\nfrom collections import deque, Counter, defaultdict\nfrom itertools import permutations, combinations, accumulate\n\ndef Int():\n    return int(sys.stdin.readline())\n\ndef Mint():\n    return map(int, sys.stdin.readline().split())\n\ndef Lstr():\n    return list(sys.stdin.readline().strip())\n\ndef Str():\n    return sys.stdin.readline().strip()\n\ndef Mstr():\n    return map(str, sys.stdin.readline().strip().split())\n\ndef List():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef Hash():\n    return dict()\n\ndef Mod():\n    return 1000000007\n\ndef Mat2x2(n):\n    return [List() for _ in range(n)]\n\ndef Lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef dtob(n):\n    return bin(n).replace('0b', '')\n\ndef btod(n):\n    return int(n, 2)\n\ndef watch(x):\n    return print(x)\n\ndef common(l1, l2):\n    return set(l1).intersection(l2)\n\ndef Most_frequent(list):\n    return max(set(list), key=list.count)\n\ndef maxfact(gcd, n):\n    facy = 0\n    for i in range(1, gcd + 1):\n        if gcd % i == 0:\n            if i <= n:\n                facy = i\n            else:\n                break\n    return facy\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    power = list(map(int, input().split()))\n    gcd = power[0]\n    for i in range(1, m):\n        gcd = math.gcd(gcd, power[i])\n    largest_factor = gcd\n    if gcd > n:\n        largest_factor = maxfact(gcd, n)\n    print(n - largest_factor)", "from math import gcd\n\ndef gcd_list(l):\n    g = gcd(l[0], l[1])\n    for i in range(2, len(l)):\n        g = gcd(g, l[i])\n    return g\n\ndef factor(n):\n    fact = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            fact.append(i)\n            if n // i not in fact:\n                fact.append(n // i)\n    fact.sort(reverse=True)\n    return fact\n\ndef main():\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        p = list(map(int, input().split()))\n        if m == 1:\n            g1 = p[0]\n        else:\n            g1 = gcd_list(p)\n        factors = factor(g1)\n        ans = 0\n        for i in factors:\n            if i <= n:\n                ans = n - i\n                break\n        print(ans)\nmain()", "from math import gcd\n\ndef factor(n):\n    fact = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            fact.append(i)\n            fact.append(n // i)\n    fact.sort()\n    fact.reverse()\n    return fact\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if m == 1:\n        g = l[0]\n        f = factor(g)\n        for value in f:\n            if value <= n:\n                print(n - value)\n                break\n    else:\n        g = gcd(l[0], l[1])\n        for i in range(2, m):\n            g = gcd(g, l[i])\n        f = factor(g)\n        for value in f:\n            if value <= n:\n                print(n - value)\n                break", "from math import gcd\n\ndef gcd_list(l):\n    g = gcd(l[0], l[1])\n    for i in range(2, len(l)):\n        g = gcd(g, l[i])\n    return g\n\ndef factor(n):\n    fact = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            fact.append(i)\n            if n // i not in fact:\n                fact.append(n // i)\n    fact.sort(reverse=True)\n    return fact\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    if m == 1:\n        g1 = p[0]\n    else:\n        g1 = gcd_list(p)\n    factors = factor(g1)\n    ans = 0\n    for i in factors:\n        if i <= n:\n            ans = n - i\n            break\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    a1 = 0\n    for i in arr:\n        a1 = gcd(a1, i)\n    ans = 0\n    if a1 > n:\n        i = 1\n        while i * i <= a1:\n            if a1 % i == 0:\n                if i <= n:\n                    ans = max(ans, i)\n                if a1 // i <= n:\n                    ans = max(ans, a1 // i)\n            i += 1\n        a1 = ans\n    print(n - a1)", "from sys import stdin, stdout\ninput = stdin.readline\nimport math, bisect\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        g = 0\n        for i in range(m):\n            g = gcd(g, l[i])\n        ans = 0\n        for i in range(1, int(math.sqrt(g)) + 1):\n            if g % i == 0:\n                if i <= n:\n                    ans = max(ans, i)\n                j = g // i\n                if j <= n:\n                    ans = max(ans, j)\n        print(n - ans)", "from functools import reduce\nimport math\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef gcd(l):\n    return reduce(lambda x, y: find_gcd(x, y), l)\n\ndef div(g, n):\n    m = 0\n    for i in range(1, math.floor(math.sqrt(g)) + 1):\n        if g % i == 0:\n            if i <= n:\n                m = max(m, i)\n            if g // i <= n:\n                m = max(m, g // i)\n    return m\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    g = gcd(p)\n    if g > n:\n        g = div(g, n)\n    print(n - g)", "import sys\nimport bisect as bi\nimport math\nfrom collections import defaultdict as dd\nimport queue\nimport heapq\nimport itertools\ninput = sys.stdin.readline\nimport random\nsys.setrecursionlimit(10 ** 7)\nmo = 10 ** 9 + 7\n\ndef cin():\n    return map(int, sin().split())\n\ndef ain():\n    return list(map(int, sin().split()))\n\ndef sin():\n    return input().strip()\n\ndef inin():\n    return int(input())\nfor _ in range(inin()):\n    (n, m) = cin()\n    l = ain()\n    if n == 1:\n        print(0)\n    else:\n        gcd = l[0]\n        for i in l:\n            gcd = math.gcd(gcd, i)\n        if gcd < n:\n            print(n - gcd)\n        else:\n            for i in range(n, 0, -1):\n                if gcd % i == 0:\n                    print(n - i)\n                    break", "import math\n\ndef factors(n):\n    i = 1\n    while i * i < n:\n        if n % i == 0:\n            yield i\n        i += 1\n    for i in range(int(math.sqrt(n)), 0, -1):\n        if n % i == 0:\n            yield (n // i)\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    g = None\n    if len(p) == 1:\n        g = p[0]\n    g = p[0]\n    for w in p[1:]:\n        g = math.gcd(g, w)\n    k = 1\n    if g < n:\n        k = g\n    else:\n        ff = list(factors(g))\n        ff.sort()\n        for f in ff:\n            if f > n:\n                break\n            else:\n                k = f\n        if n == 1:\n            print(0)\n            continue\n    print(n - k)", "import math\nfor k in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if m > 1:\n        g = math.gcd(l[0], l[1])\n        for i in range(2, m):\n            g = math.gcd(g, l[i])\n    else:\n        g = l[0]\n    if g == 1:\n        print(n - 1)\n    elif g < n != 0:\n        print(n - g)\n    else:\n        x = n\n        while g % x != 0:\n            x -= 1\n        print(n - x)", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if len(l) == 1:\n        gcd = l[0]\n    elif len(l) == 2:\n        num1 = l[0]\n        num2 = l[1]\n        gcd = find_gcd(num1, num2)\n    else:\n        num1 = l[0]\n        num2 = l[1]\n        gcd = find_gcd(num1, num2)\n        for i in range(2, len(l)):\n            gcd = find_gcd(gcd, l[i])\n    pr = 1\n    factors = []\n    while pr * pr <= gcd:\n        if gcd % pr == 0:\n            factors.append(pr)\n            factors.append(gcd // pr)\n            pr += 1\n        else:\n            pr += 1\n    factors.sort()\n    factors.reverse()\n    for i in factors:\n        if i <= n:\n            print(n - i)\n            break", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef hf(n, g):\n    d = min(g, n)\n    for i in range(d, -1, -1):\n        if g % i == 0:\n            return i\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for i in range(1, m):\n        g = gcd(g, l[i])\n    f = hf(n, g)\n    print(n - f)", "from math import gcd\n\ndef factors(n):\n    if n == 0:\n        return [1]\n    x = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            x.append(i)\n            x.append(n // i)\n    return x\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if k == 1:\n        hcf = a[0]\n    elif k == 2:\n        hcf = gcd(a[0], a[1])\n    else:\n        x = gcd(a[0], a[1])\n        for i in range(2, k):\n            x = gcd(x, a[i])\n        hcf = x\n    fact = factors(hcf)\n    fact.sort(reverse=True)\n    final = 0\n    for i in fact:\n        if i <= n:\n            final = n - i\n            break\n    print(final)", "import sys, math\n\ndef multiple_input():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef list_input():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    return gcd(y, x % y)\n\ndef greatest_factor(x):\n    i = 1\n    end = math.sqrt(x)\n    f = []\n    while i <= end:\n        if x % i == 0:\n            f.append(i)\n            f.append(x // i)\n        i += 1\n    f.sort(reverse=True)\n    return f\nfor _ in range(int(input())):\n    (n, m) = multiple_input()\n    a = list_input()\n    g = a[0]\n    for i in a:\n        g = gcd(g, i)\n    fact = greatest_factor(g)\n    ans = 0\n    for i in fact:\n        if i <= n:\n            ans = n - i\n            break\n    print(ans)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef answer():\n    g = p[0]\n    for v in p[1:]:\n        g = gcd(g, v)\n    nk = 1\n    for i in range(1, int(g ** 0.5) + 1):\n        if g % i == 0:\n            if i <= n:\n                nk = max(nk, i)\n            if g // i <= n:\n                nk = max(nk, g // i)\n    return n - nk\nfor T in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    print(answer())", "import math\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    p = 0\n    for x in arr:\n        p = math.gcd(p, x)\n        if p == 1:\n            break\n    if n >= p:\n        print(n - p)\n    else:\n        m = n\n        while p % m:\n            m -= 1\n        print(n - m)\n    t -= 1", "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    if a >= b:\n        return gcd(a % b, b)\n    else:\n        return gcd(a, b % a)\n\ndef list_gcd(l):\n    result = l[0]\n    for i in range(1, len(l)):\n        result = gcd(result, l[i])\n    return result\nt = int(input())\nfor q in range(t):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    g = list_gcd(p)\n    if g > n:\n        for i in range(n, 0, -1):\n            if g % i == 0:\n                print(n - i)\n                break\n    else:\n        print(n - g)", "from math import gcd\n\ndef lar(g, n):\n    for a in range(n, 0, -1):\n        if g % a == 0:\n            return a\n    return -1\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    po = list(map(int, input().split()))\n    g = po[0]\n    for a in range(1, m):\n        g = gcd(g, po[a])\n    if n == 1:\n        print(0)\n        continue\n    if g < n:\n        print(n - g)\n    else:\n        l = lar(g, n)\n        print(n - l)", "from math import gcd\nfrom functools import reduce\n\ndef factors(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\nT = int(input())\nfor q in range(T):\n    (n, m) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    if 0 == 0:\n        curr = n\n        hf = arr[0]\n        mnm = arr[0]\n        for i in arr:\n            hf = gcd(hf, i)\n            mnm = min(i, mnm)\n        if mnm <= n:\n            curr = mnm\n        f = list(factors(hf))\n        f.sort(reverse=True)\n        for i in f:\n            if i <= curr:\n                curr = i\n                break\n        print(n - i)", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        g = 0\n        for i in range(m):\n            g = math.gcd(g, a[i])\n        if n > g:\n            print(n - g)\n        elif g == 1:\n            print(n - 1)\n        else:\n            temp = n\n            ans = 0\n            while g % temp != 0:\n                temp -= 1\n            print(n - temp)", "import math\n\ndef factor(n):\n    if n == 0:\n        return 1\n    facts = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            facts.append(i)\n            facts.append(n // i)\n    return facts\n\ndef solve(n, m):\n    if n == 1:\n        return 0\n    if m == 1:\n        gcd_ = powers[0]\n    else:\n        gcd_ = math.gcd(powers[0], powers[1])\n        for i in range(2, m):\n            gcd_ = math.gcd(gcd_, powers[i])\n    factors = factor(gcd_)\n    factors.sort(reverse=True)\n    ans = 0\n    for i in factors:\n        if i <= n:\n            ans = n - i\n            break\n    return ans\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    powers = list(map(int, input().split()))\n    ans = solve(n, m)\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    spells = list(map(int, input().split()))\n    if N == 1:\n        print(0)\n    else:\n        curr_gcd = spells[0]\n        for i in range(M - 1):\n            curr_gcd = gcd(curr_gcd, spells[i + 1])\n            if curr_gcd == 1:\n                break\n        if curr_gcd <= N:\n            print(N - curr_gcd)\n        else:\n            for i in range(N, -1, -1):\n                if curr_gcd % i == 0:\n                    print(N - i)\n                    break", "tests = int(input())\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nwhile tests > 0:\n    (n, m) = list(map(int, input().split()))\n    ms = list(map(int, input().split()))\n    gc = gcd(ms[0], 0)\n    for x in ms:\n        gc = gcd(gc, x)\n    if n < gc:\n        left = n\n        num = n\n        while num > 0:\n            if gc % num == 0:\n                left = num\n                break\n            num -= 1\n        print(n - left)\n    else:\n        print(n - gc)\n    tests -= 1", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef gcd_arr(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    return gcd\n\ndef factors(n):\n    if n == 0:\n        return 1\n    x = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            x.append(i)\n            x.append(n // i)\n    return x\ntest = int(input())\nfor _ in range(test):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    gcd_of_array = 0\n    if m > 1:\n        gcd_of_array = gcd_arr(arr)\n    else:\n        gcd_of_array = arr[0]\n    ans = 0\n    factors_of_gcd = factors(gcd_of_array)\n    factors_of_gcd.sort(reverse=True)\n    for i in range(len(factors_of_gcd)):\n        if factors_of_gcd[i] <= n:\n            ans = n - factors_of_gcd[i]\n            break\n    print(ans)", "import math\nfor _ in range(int(input())):\n    (n, x) = tuple(map(int, input().split()))\n    l = list(map(int, input().split()))\n    g = l[0]\n    m = 1\n    for i in range(1, x):\n        g = math.gcd(g, l[i])\n    for i in range(1, int(math.sqrt(g)) + 2):\n        if g % i == 0:\n            if i <= n:\n                m = max(m, i)\n            if int(g / i) <= n:\n                m = max(m, int(g / i))\n    print(n - m)", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef gcd_arr(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    return gcd\n\ndef factors(n):\n    if n == 0:\n        return 1\n    x = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            x.append(i)\n            x.append(n // i)\n    return x\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    hcf = 0\n    if m > 1:\n        hcf = gcd_arr(p)\n    else:\n        hcf = p[0]\n    fact = factors(hcf)\n    fact.sort(reverse=True)\n    final = 0\n    for i in fact:\n        if i <= n:\n            final = n - i\n            break\n    print(final)", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef gcd_arr(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    return gcd\n\ndef factors(n):\n    if n == 0:\n        return 1\n    x = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            x.append(i)\n            x.append(n // i)\n    return x\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    hcf = 0\n    if m > 1:\n        hcf = gcd_arr(p)\n    else:\n        hcf = p[0]\n    fact = factors(hcf)\n    fact.sort(reverse=True)\n    final = 0\n    for i in fact:\n        if i <= n:\n            final = n - i\n            break\n    print(final)", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef gcd_arr(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    return gcd\n\ndef factors(n):\n    if n == 0:\n        return 1\n    x = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            x.append(i)\n            x.append(n // i)\n    return x\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    hcf = 0\n    if m > 1:\n        hcf = gcd_arr(p)\n    else:\n        hcf = p[0]\n    fact = factors(hcf)\n    fact.sort(reverse=True)\n    final = 0\n    for i in fact:\n        if i <= n:\n            final = n - i\n            break\n    print(final)", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef gcd_arr(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    return gcd\n\ndef factors(n):\n    if n == 0:\n        return 1\n    x = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            x.append(i)\n            x.append(n // i)\n    return x\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    hcf = 0\n    if m > 1:\n        hcf = gcd_arr(p)\n    else:\n        hcf = p[0]\n    fact = factors(hcf)\n    fact.sort(reverse=True)\n    final = 0\n    for i in fact:\n        if i <= n:\n            final = n - i\n            break\n    print(final)", "import math\nfor _ in range(int(input())):\n    (n, x) = tuple(map(int, input().split()))\n    l = list(map(int, input().split()))\n    g = l[0]\n    m = 1\n    for i in range(1, x):\n        g = math.gcd(g, l[i])\n    for i in range(1, int(math.sqrt(g)) + 2):\n        if g % i == 0:\n            if i <= n:\n                m = max(m, i)\n            if int(g / i) <= n:\n                m = max(m, int(g / i))\n    print(n - m)", "def GCD(a, b):\n    if b == 0:\n        return a\n    else:\n        return GCD(b, a % b)\nT = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    list_m = list(map(int, input().split()))\n    if N == 1:\n        print(0)\n    elif len(list_m) == 1:\n        gcd_val = list_m[0]\n        N_tmp = N\n        if gcd_val >= N:\n            while gcd_val > 0:\n                if gcd_val % N_tmp == 0:\n                    print(N - N_tmp)\n                    break\n                else:\n                    N_tmp -= 1\n        else:\n            print(N - gcd_val)\n    else:\n        gcd_val = list_m[0]\n        for x_m in list_m[1:]:\n            gcd_val = GCD(gcd_val, x_m)\n        N_tmp = N\n        if gcd_val >= N:\n            while gcd_val > 0:\n                if gcd_val % N_tmp == 0:\n                    print(N - N_tmp)\n                    break\n                else:\n                    N_tmp -= 1\n        else:\n            print(N - gcd_val)", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef gcd_arr(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    return gcd\n\ndef factors(n):\n    if n == 0:\n        return 1\n    x = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            x.append(i)\n            x.append(n // i)\n    return x\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = list(map(int, input().split()))\n    hcf = 0\n    if m > 1:\n        hcf = gcd_arr(p)\n    else:\n        hcf = p[0]\n    fact = factors(hcf)\n    fact.sort(reverse=True)\n    final = 0\n    for i in fact:\n        if i <= n:\n            final = n - i\n            break\n    print(final)"]