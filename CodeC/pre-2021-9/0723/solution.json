["def solve(n):\n    points = []\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        points.append([x, y])\n    points.sort()\n    d = {}\n    for i in range(n - 1):\n        (x1, y1) = (points[i][0], points[i][1])\n        (x2, y2) = (points[i + 1][0], points[i + 1][1])\n        if x1 == x2:\n            if (y1, y2) not in d:\n                d[y1, y2] = 0\n            d[y1, y2] += 1\n    ans = 0\n    for (k, v) in d.items():\n        ans += v * (v - 1) // 2\n    print(ans)\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    solve(n)", "def solve(n):\n    points = []\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        points.append([x, y])\n    points.sort()\n    d = {}\n    for i in range(n - 1):\n        (x1, y1) = (points[i][0], points[i][1])\n        (x2, y2) = (points[i + 1][0], points[i + 1][1])\n        if x1 == x2:\n            if (y1, y2) not in d:\n                d[y1, y2] = 0\n            d[y1, y2] += 1\n    ans = 0\n    for (k, v) in d.items():\n        ans += v * (v - 1) // 2\n    print(ans)\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    solve(n)", "def count_rectangles(points_set):\n    sorted_points = sorted(points_set)\n    y_pairs_counts = {}\n    p1 = sorted_points[0]\n    for p2 in sorted_points[1:]:\n        if p1[0] == p2[0]:\n            y_pairs_counts[p1[1], p2[1]] = y_pairs_counts.get((p1[1], p2[1]), 0) + 1\n        p1 = p2\n    return sum([v * (v - 1) // 2 for v in y_pairs_counts.values()])\nwhile True:\n    N = int(input())\n    if N == 0:\n        break\n    points_set = set()\n    for j in range(N):\n        (num1, num2) = map(int, input().split())\n        points_set.add((num1, num2))\n    print(count_rectangles(points_set))", "def count_rectangles(points_set):\n    sorted_points = sorted(points_set)\n    y_pairs_counts = {}\n    p1 = sorted_points[0]\n    for p2 in sorted_points[1:]:\n        if p1[0] == p2[0]:\n            y_pairs_counts[p1[1], p2[1]] = y_pairs_counts.get((p1[1], p2[1]), 0) + 1\n        p1 = p2\n    return sum([v * (v - 1) // 2 for v in y_pairs_counts.values()])\nwhile True:\n    N = int(input())\n    if N == 0:\n        break\n    points_set = set()\n    for j in range(N):\n        (num1, num2) = map(int, input().split())\n        points_set.add((num1, num2))\n    print(count_rectangles(points_set))", "def count_rectangles(points_set):\n    sorted_points = sorted(points_set)\n    y_pairs_counts = {}\n    p1 = sorted_points[0]\n    for p2 in sorted_points[1:]:\n        if p1[0] == p2[0]:\n            y_pairs_counts[p1[1], p2[1]] = y_pairs_counts.get((p1[1], p2[1]), 0) + 1\n        p1 = p2\n    return sum([v * (v - 1) // 2 for v in y_pairs_counts.values()])\nwhile True:\n    N = int(input())\n    if N == 0:\n        break\n    points_set = set()\n    for j in range(N):\n        (num1, num2) = map(int, input().split())\n        points_set.add((num1, num2))\n    print(count_rectangles(points_set))", "from collections import defaultdict\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    (X, Y) = (defaultdict(list), defaultdict(int))\n    for i in range(n):\n        (p, q) = map(int, input().split())\n        X[p].append(q)\n    for (k, v) in X.items():\n        if len(v) == 2:\n            if v[1] < v[0]:\n                (v[0], v[1]) = (v[1], v[0])\n            Y[v[0], v[1]] += 1\n    ans = 0\n    for (k, v) in Y.items():\n        ans += v * (v - 1) // 2\n    print(ans)", "from collections import defaultdict\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    (X, Y) = (defaultdict(list), defaultdict(int))\n    for i in range(n):\n        (p, q) = map(int, input().split())\n        X[p].append(q)\n    for (k, v) in X.items():\n        if len(v) == 2:\n            if v[1] < v[0]:\n                (v[0], v[1]) = (v[1], v[0])\n            Y[v[0], v[1]] += 1\n    ans = 0\n    for (k, v) in Y.items():\n        ans += v * (v - 1) // 2\n    print(ans)", "def solve(n):\n    p = []\n    dic = {}\n    while n > 0:\n        (r, s) = map(int, input().split())\n        p.append((r, s))\n        n -= 1\n    p.sort()\n    for i in range(len(p) - 2, -1, -1):\n        (x1, y1) = p[i]\n        (x2, y2) = p[i + 1]\n        if x1 == x2:\n            if (y1, y2) in dic.keys():\n                dic[y1, y2] += 1\n            else:\n                dic[y1, y2] = 1\n    ans = 0\n    for (k, v) in dic.items():\n        ans += v * (v - 1) / 2\n    return int(ans)\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(solve(n))", "def solve(n):\n    p = []\n    dic = {}\n    while n > 0:\n        (r, s) = map(int, input().split())\n        p.append((r, s))\n        n -= 1\n    p.sort()\n    for i in range(len(p) - 2, -1, -1):\n        (x1, y1) = p[i]\n        (x2, y2) = p[i + 1]\n        if x1 == x2:\n            if (y1, y2) in dic.keys():\n                dic[y1, y2] += 1\n            else:\n                dic[y1, y2] = 1\n    ans = 0\n    for (k, v) in dic.items():\n        ans += v * (v - 1) / 2\n    print(int(ans))\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    solve(n)", "while True:\n    n = int(input())\n    if n == 0:\n        break\n    a = []\n    for i in range(n):\n        t = list(map(int, input().split()))\n        a.append(t)\n    d = dict()\n    a.sort(key=lambda x: (x[0], x[1]))\n    for i in range(n - 1):\n        if a[i][0] == a[i + 1][0]:\n            temp = (a[i][1], a[i + 1][1])\n            if temp not in d:\n                d[temp] = 0\n            d[temp] += 1\n    ans = 0\n    for i in d:\n        ans += d[i] * (d[i] - 1) // 2\n    print(ans)", "n = 1\nwhile n != 0:\n    n = int(input())\n    if n == 0:\n        break\n    p = []\n    dic = {}\n    while n > 0:\n        (r, s) = map(int, input().split())\n        p.append((r, s))\n        n -= 1\n    p.sort()\n    for i in range(len(p) - 2, -1, -1):\n        (x1, y1) = p[i]\n        (x2, y2) = p[i + 1]\n        if x1 == x2:\n            if (y1, y2) in dic.keys():\n                dic[y1, y2] += 1\n            else:\n                dic[y1, y2] = 1\n    ans = 0\n    for (k, v) in dic.items():\n        ans += v * (v - 1) / 2\n    print(int(ans))\n    n = 1", "n = 1\nwhile n != 0:\n    n = int(input())\n    if n == 0:\n        break\n    p = []\n    dic = {}\n    while n > 0:\n        (r, s) = map(int, input().split())\n        p.append((r, s))\n        n -= 1\n    p.sort()\n    for i in range(len(p) - 2, -1, -1):\n        (x1, y1) = p[i]\n        (x2, y2) = p[i + 1]\n        if x1 == x2:\n            if (y1, y2) in dic.keys():\n                dic[y1, y2] += 1\n            else:\n                dic[y1, y2] = 1\n    ans = 0\n    for (k, v) in dic.items():\n        ans += v * (v - 1) / 2\n    print(int(ans))\n    n = 1", "n = 1\nwhile n != 0:\n    n = int(input())\n    if n == 0:\n        break\n    l = []\n    dic = {}\n    while n > 0:\n        (a, b) = map(int, input().split())\n        l.append((a, b))\n        n -= 1\n    l.sort()\n    for i in range(len(l) - 2, -1, -1):\n        (x1, y1) = l[i]\n        (x2, y2) = l[i + 1]\n        if x1 == x2:\n            if (y1, y2) in dic.keys():\n                dic[y1, y2] += 1\n            else:\n                dic[y1, y2] = 1\n    ans = 0\n    for (k, v) in dic.items():\n        ans += v * (v - 1) / 2\n    print(int(ans))\n    n = 1", "n = 1\nwhile n != 0:\n    n = int(input())\n    if n == 0:\n        break\n    l = []\n    dic = {}\n    while n > 0:\n        (a, b) = map(int, input().split())\n        l.append((a, b))\n        n -= 1\n    l.sort()\n    for i in range(len(l) - 2, -1, -1):\n        (x1, y1) = l[i]\n        (x2, y2) = l[i + 1]\n        if x1 == x2:\n            if (y1, y2) in dic.keys():\n                dic[y1, y2] += 1\n            else:\n                dic[y1, y2] = 1\n    ans = 0\n    for (k, v) in dic.items():\n        ans += v * (v - 1) / 2\n    print(int(ans))\n    n = 1", "def snek(n):\n    l = []\n    for z in range(n):\n        (x, y) = map(int, input().split())\n        l.append([x, y])\n    l.sort()\n    d = {}\n    for j in range(n - 1):\n        (x1, y1) = (l[j][0], l[j][1])\n        (x2, y2) = (l[j + 1][0], l[j + 1][1])\n        if x1 == x2:\n            if (y1, y2) not in d:\n                d[y1, y2] = 0\n            d[y1, y2] += 1\n    ans = 0\n    for (k, v) in d.items():\n        ans += v * (v - 1) // 2\n    print(ans)\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    snek(n)", "def snek(n):\n    l = []\n    for z in range(n):\n        (x, y) = map(int, input().split())\n        l.append([x, y])\n    l.sort()\n    d = {}\n    for j in range(n - 1):\n        (x1, y1) = (l[j][0], l[j][1])\n        (x2, y2) = (l[j + 1][0], l[j + 1][1])\n        if x1 == x2:\n            if (y1, y2) not in d:\n                d[y1, y2] = 0\n            d[y1, y2] += 1\n    ans = 0\n    for (k, v) in d.items():\n        ans += v * (v - 1) // 2\n    print(ans)\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    snek(n)", "def solve(n):\n    points = []\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        points.append([x, y])\n    points.sort()\n    d = {}\n    for i in range(n - 1):\n        (x1, y1) = (points[i][0], points[i][1])\n        (x2, y2) = (points[i + 1][0], points[i + 1][1])\n        if x1 == x2:\n            if (y1, y2) not in d:\n                d[y1, y2] = 0\n            d[y1, y2] += 1\n    ans = 0\n    for (k, v) in d.items():\n        ans += v * (v - 1) // 2\n    print(ans)\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    solve(n)", "def solve(n):\n    points = []\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        points.append([x, y])\n    points.sort()\n    d = {}\n    for i in range(n - 1):\n        (x1, y1) = (points[i][0], points[i][1])\n        (x2, y2) = (points[i + 1][0], points[i + 1][1])\n        if x1 == x2:\n            if (y1, y2) not in d:\n                d[y1, y2] = 0\n            d[y1, y2] += 1\n    ans = 0\n    for (k, v) in d.items():\n        ans += v * (v - 1) // 2\n    print(ans)\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    solve(n)", "def solve(points, N):\n    points.sort()\n    cnt = {}\n    for i in range(N - 1):\n        (x1, y1, x2, y2) = (points[i][0], points[i][1], points[i + 1][0], points[i + 1][1])\n        if x1 == x2:\n            if (y1, y2) not in cnt:\n                cnt[y1, y2] = 0\n            cnt[y1, y2] += 1\n    ans = 0\n    for key in list(cnt.keys()):\n        value = cnt[key]\n        ans += value * (value - 1) // 2\n    print(ans)\nwhile True:\n    N = int(input())\n    if N == 0:\n        break\n    points = []\n    for i in range(N):\n        (x, y) = map(int, input().split())\n        points.append((x, y))\n    solve(points, N)", "def solve(points, N):\n    points.sort()\n    cnt = {}\n    for i in range(N - 1):\n        (x1, y1, x2, y2) = (points[i][0], points[i][1], points[i + 1][0], points[i + 1][1])\n        if x1 == x2:\n            if (y1, y2) not in cnt:\n                cnt[y1, y2] = 0\n            cnt[y1, y2] += 1\n    ans = 0\n    for key in list(cnt.keys()):\n        value = cnt[key]\n        ans += value * (value - 1) // 2\n    print(ans)\nwhile True:\n    N = int(input())\n    if N == 0:\n        break\n    points = []\n    for i in range(N):\n        (x, y) = map(int, input().split())\n        points.append((x, y))\n    solve(points, N)", "import collections\nn = int(input())\nwhile n != 0:\n    points = []\n    for _ in range(n):\n        points.append(tuple(map(int, input().split())))\n    points.sort()\n    ans = 0\n    sides = collections.defaultdict(int)\n    for i in range(n - 1):\n        (x1, y1) = points[i]\n        (x2, y2) = points[i + 1]\n        if x1 == x2:\n            ans += sides[y1, y2]\n            sides[y1, y2] += 1\n    print(ans)\n    n = int(input())", "import collections\nn = int(input())\nwhile n != 0:\n    points = []\n    for _ in range(n):\n        points.append(tuple(map(int, input().split())))\n    points.sort()\n    ans = 0\n    sides = collections.defaultdict(int)\n    for i in range(n - 1):\n        (x1, y1) = points[i]\n        (x2, y2) = points[i + 1]\n        if x1 == x2:\n            ans += sides[y1, y2]\n            sides[y1, y2] += 1\n    print(ans)\n    n = int(input())", "import collections\nn = int(input())\nwhile n != 0:\n    points = []\n    for _ in range(n):\n        points.append(tuple(map(int, input().split())))\n    points.sort()\n    ans = 0\n    sides = collections.defaultdict(int)\n    for i in range(n - 1):\n        (x1, y1) = points[i]\n        (x2, y2) = points[i + 1]\n        if x1 == x2:\n            ans += sides[y1, y2]\n            sides[y1, y2] += 1\n    print(ans)\n    n = int(input())", "import math\nwhile True:\n    t = int(input())\n    if t == 0:\n        break\n    arr = [[0 for i in range(2)] for j in range(t)]\n    for i in range(t):\n        x = input().split()\n        arr[i][0] = int(x[0])\n        arr[i][1] = int(x[1])\n    if t < 4:\n        print(0)\n    else:\n        arr.sort(key=lambda x: (x[0], x[1]))\n        dict1 = {}\n        i = 0\n        while i < len(arr):\n            if i + 1 < len(arr) and arr[i][0] == arr[i + 1][0]:\n                x = (arr[i][1], arr[i + 1][1])\n                if x in dict1:\n                    dict1[x] += 1\n                else:\n                    dict1[x] = 1\n                i += 2\n            else:\n                i += 1\n        sum = 0\n        ele = list(dict1.values())\n        for i in range(len(ele)):\n            val = (ele[i] - 1) * ele[i] // 2\n            sum += val\n        print(sum)"]