["(n, m, d) = [int(x) for x in input().split()]\nrates = []\nfor _ in range(n):\n    rates.append([int(x) for x in input().split()])\nbefore_peppercorns = [d] * n\nbefore_dollars = [0] * n\nafter_peppercorns = [None] * n\nafter_dollars = [None] * n\nfor t in range(m):\n    for i in range(n):\n        after_peppercorns[i] = max(before_dollars[i] * rates[i][2 * t + 1], before_peppercorns[i - 1] if i > 0 else 0, before_peppercorns[i + 1] if i < n - 1 else 0, before_peppercorns[i])\n        after_dollars[i] = max(before_peppercorns[i] / rates[i][2 * t], before_dollars[i - 1] if i > 0 else 0, before_dollars[i + 1] if i < n - 1 else 0, before_dollars[i])\n    for i in range(n):\n        before_dollars[i] = after_dollars[i]\n        before_peppercorns[i] = after_peppercorns[i]\namt = max(after_peppercorns)\namt2 = max(after_dollars)\nif amt > 10 ** 18 or amt2 > 10 ** 18:\n    print('Quintillionnaire')\nelse:\n    print(amt)", "(n, m, d) = [int(x) for x in input().split()]\nrates = []\nfor _ in range(n):\n    rates.append([int(x) for x in input().split()])\nbefore_peppercorns = [d] * n\nbefore_dollars = [0] * n\nafter_peppercorns = [None] * n\nafter_dollars = [None] * n\nfor t in range(m):\n    for i in range(n):\n        after_peppercorns[i] = max(before_dollars[i] * rates[i][2 * t + 1], before_peppercorns[i - 1] if i > 0 else 0, before_peppercorns[i + 1] if i < n - 1 else 0, before_peppercorns[i])\n        after_dollars[i] = max(before_peppercorns[i] / rates[i][2 * t], before_dollars[i - 1] if i > 0 else 0, before_dollars[i + 1] if i < n - 1 else 0, before_dollars[i])\n    for i in range(n):\n        before_dollars[i] = after_dollars[i]\n        before_peppercorns[i] = after_peppercorns[i]\namt = max(after_peppercorns)\namt2 = max(after_dollars)\nif amt > 10 ** 18 or amt2 > 10 ** 18:\n    print('Quintillionnaire')\nelse:\n    print(amt)", "import random\nfrom fractions import Fraction\nLIM = 10 ** 18\nDE_LIM = 1\nMSG = 'Quintillionnaire'\n(n, m, D) = map(int, input().split())\nbuysell = [[[0, 0] for j in range(n)] for i in range(m)]\n\ndef solve_neq1():\n    maxhave = [[Fraction(1, 1), Fraction(0, 1)] for i in range(n)]\n    nexthave = [[Fraction(1, 1), Fraction(0, 1)] for i in range(n)]\n    for i in range(m):\n        A = max(maxhave[0][0], maxhave[0][1] * buysell[i][0][0])\n        B = max(maxhave[0][1], maxhave[0][0] / buysell[i][0][1])\n        nexthave[0][0] = A\n        nexthave[0][1] = B\n        (maxhave, nexthave) = (nexthave, maxhave)\n    sol = D * max([m[0] for m in maxhave])\n    sol2 = D * max([m[1] for m in maxhave])\n    if sol > LIM or sol2 > LIM:\n        return MSG\n    return '{:.9f}'.format(float(sol.numerator) / float(sol.denominator))\n\ndef solve_ngt1():\n    maxhave = [[Fraction(1, 1), Fraction(0, 1)] for i in range(n)]\n    nexthave = [[Fraction(1, 1), Fraction(0, 1)] for i in range(n)]\n    for i in range(m):\n        A = max(maxhave[0][0], maxhave[0][1] * buysell[i][0][0])\n        A = max(A, maxhave[1][0])\n        B = max(maxhave[0][1], maxhave[0][0] / buysell[i][0][1])\n        B = max(B, maxhave[1][1])\n        nexthave[0][0] = A\n        nexthave[0][1] = B\n        for j in range(1, n - 1):\n            A = max(maxhave[j][0], maxhave[j][1] * buysell[i][j][0])\n            A = max(A, maxhave[j - 1][0])\n            A = max(A, maxhave[j + 1][0])\n            B = max(maxhave[j][1], maxhave[j][0] / buysell[i][j][1])\n            B = max(B, maxhave[j - 1][1])\n            B = max(B, maxhave[j + 1][1])\n            nexthave[j][0] = A\n            nexthave[j][1] = B\n        A = max(maxhave[n - 1][0], maxhave[n - 1][1] * buysell[i][n - 1][0])\n        A = max(A, maxhave[n - 2][0])\n        B = max(maxhave[n - 1][1], maxhave[n - 1][0] / buysell[i][n - 1][1])\n        B = max(B, maxhave[n - 2][1])\n        nexthave[n - 1][0] = A\n        nexthave[n - 1][1] = B\n        (maxhave, nexthave) = (nexthave, maxhave)\n    sol = D * max([m[0] for m in maxhave])\n    sol2 = D * max([m[1] for m in maxhave])\n    if sol > LIM or sol2 > LIM:\n        return MSG\n    return '{:.9f}'.format(float(sol.numerator) / float(sol.denominator))\n\ndef solve_rnd():\n    maxhave = [[Fraction(1, 1), Fraction(0, 1)] for i in range(n)]\n    nexthave = [[Fraction(1, 1), Fraction(0, 1)] for i in range(n)]\n    LIM = Fraction(10 ** 18, D)\n    for i in range(m):\n        for j in range(n):\n            A = max(maxhave[j][0], maxhave[j][1] * buysell[i][j][0])\n            B = max(maxhave[j][1], maxhave[j][0] / buysell[i][j][1])\n            if j > 0:\n                A = max(A, maxhave[j - 1][0])\n                B = max(B, maxhave[j - 1][1])\n            if j + 1 < n:\n                A = max(A, maxhave[j + 1][0])\n                B = max(B, maxhave[j + 1][1])\n            if A > LIM or B > LIM:\n                return MSG\n            nexthave[j][0] = A\n            nexthave[j][1] = B\n        if i % 10 == 0:\n            for j in range(n):\n                nexthave[j][0] = nexthave[j][0].limit_denominator(DE_LIM)\n                nexthave[j][1] = nexthave[j][1].limit_denominator(DE_LIM)\n        (maxhave, nexthave) = (nexthave, maxhave)\n    sol = max([m[0] for m in maxhave])\n    return '{:.9f}'.format(D * float(sol.numerator) / float(sol.denominator))\n\ndef solve_dbl():\n    maxhave = [[1.0, 0.0] for i in range(n)]\n    nexthave = [[1.0, 0.1] for i in range(n)]\n    LIM = 10 ** 18 / D\n    for i in range(m):\n        for j in range(n):\n            A = max(maxhave[j][0], maxhave[j][1] * buysell[i][j][0])\n            B = max(maxhave[j][1], maxhave[j][0] / buysell[i][j][1])\n            if j > 0:\n                A = max(A, maxhave[j - 1][0])\n                B = max(B, maxhave[j - 1][1])\n            if j + 1 < n:\n                A = max(A, maxhave[j + 1][0])\n                B = max(B, maxhave[j + 1][1])\n            if A > LIM or B > LIM:\n                return MSG\n            nexthave[j][0] = A\n            nexthave[j][1] = B\n        (maxhave, nexthave) = (nexthave, maxhave)\n    sol = max([m[0] for m in maxhave])\n    return '{:.9f}'.format(D * sol)\nfor i in range(n):\n    vals = [int(x) for x in input().split()]\n    assert len(vals) == 2 * m\n    j = 0\n    while j < m:\n        buysell[j][i][1] = vals[2 * j]\n        buysell[j][i][0] = vals[2 * j + 1]\n        j += 1\nif n == 1:\n    sol = solve_neq1()\nelif n * m > 100000:\n    sol = solve_dbl()\nelse:\n    sol = solve_ngt1()\nprint(sol)"]