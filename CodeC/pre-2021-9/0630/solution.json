["def solution():\n    (N, M) = map(int, input().split())\n    minSalary = list(map(int, input().split()))\n    offeredSalary = []\n    maxJobOffers = []\n    for i in range(M):\n        (salary, offer) = map(int, input().split())\n        offeredSalary.append(salary)\n        maxJobOffers.append(offer)\n    qual = []\n    for i in range(N):\n        qual.append([c == '1' for (i, c) in enumerate(input())])\n    placements_count = 0\n    total_salary = 0\n    hiring_companies = set()\n    for i in range(N):\n        selected = -1\n        for j in range(M):\n            if qual[i][j] and maxJobOffers[j] > 0 and (offeredSalary[j] >= minSalary[i]):\n                if selected == -1 or offeredSalary[selected] < offeredSalary[j]:\n                    selected = j\n        if selected >= 0:\n            maxJobOffers[selected] -= 1\n            placements_count += 1\n            total_salary += offeredSalary[selected]\n            hiring_companies.add(selected)\n    print(placements_count, end=' ')\n    print(total_salary, end=' ')\n    print(M - len(hiring_companies))\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def solution():\n    (N, M) = map(int, input().split())\n    minSalary = list(map(int, input().split()))\n    offeredSalary = []\n    maxJobOffers = []\n    for i in range(M):\n        (salary, offer) = map(int, input().split())\n        offeredSalary.append(salary)\n        maxJobOffers.append(offer)\n    qual = []\n    for i in range(N):\n        qual.append([c == '1' for (i, c) in enumerate(input())])\n    placements_count = 0\n    total_salary = 0\n    hiring_companies = set()\n    for i in range(N):\n        selected = -1\n        for j in range(M):\n            if qual[i][j] and maxJobOffers[j] > 0 and (offeredSalary[j] >= minSalary[i]):\n                if selected == -1 or offeredSalary[selected] < offeredSalary[j]:\n                    selected = j\n        if selected >= 0:\n            maxJobOffers[selected] -= 1\n            placements_count += 1\n            total_salary += offeredSalary[selected]\n            hiring_companies.add(selected)\n    print(placements_count, end=' ')\n    print(total_salary, end=' ')\n    print(M - len(hiring_companies))\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def solution():\n    (N, M) = map(int, input().split())\n    minSalary = list(map(int, input().split()))\n    offeredSalary = []\n    maxJobOffers = []\n    for i in range(M):\n        (salary, offer) = map(int, input().split())\n        offeredSalary.append(salary)\n        maxJobOffers.append(offer)\n    qual = []\n    for i in range(N):\n        qual.append([c == '1' for (i, c) in enumerate(input())])\n    placements_count = 0\n    total_salary = 0\n    hiring_companies = set()\n    for i in range(N):\n        selected = -1\n        for j in range(M):\n            if qual[i][j] and maxJobOffers[j] > 0 and (offeredSalary[j] >= minSalary[i]):\n                if selected == -1 or offeredSalary[selected] < offeredSalary[j]:\n                    selected = j\n        if selected >= 0:\n            maxJobOffers[selected] -= 1\n            placements_count += 1\n            total_salary += offeredSalary[selected]\n            hiring_companies.add(selected)\n    print(placements_count, end=' ')\n    print(total_salary, end=' ')\n    print(M - len(hiring_companies))\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def solution():\n    (N, M) = map(int, input().split())\n    minSalary = list(map(int, input().split()))\n    offeredSalary = []\n    maxJobOffers = []\n    for i in range(M):\n        (salary, offer) = map(int, input().split())\n        offeredSalary.append(salary)\n        maxJobOffers.append(offer)\n    qual = []\n    for i in range(N):\n        qual.append([c == '1' for (i, c) in enumerate(input())])\n    placements_count = 0\n    total_salary = 0\n    hiring_companies = set()\n    for i in range(N):\n        selected = -1\n        for j in range(M):\n            if qual[i][j] and maxJobOffers[j] > 0 and (offeredSalary[j] >= minSalary[i]):\n                if selected == -1 or offeredSalary[selected] < offeredSalary[j]:\n                    selected = j\n        if selected >= 0:\n            maxJobOffers[selected] -= 1\n            placements_count += 1\n            total_salary += offeredSalary[selected]\n            hiring_companies.add(selected)\n    print(placements_count, end=' ')\n    print(total_salary, end=' ')\n    print(M - len(hiring_companies))\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def solution():\n    (N, M) = map(int, input().split())\n    minSalary = list(map(int, input().split()))\n    offeredSalary = []\n    maxJobOffers = []\n    for i in range(M):\n        (salary, offer) = map(int, input().split())\n        offeredSalary.append(salary)\n        maxJobOffers.append(offer)\n    qual = []\n    for i in range(N):\n        qual.append([c == '1' for (i, c) in enumerate(input())])\n    placements_count = 0\n    total_salary = 0\n    hiring_companies = set()\n    for i in range(N):\n        selected = -1\n        for j in range(M):\n            if qual[i][j] and maxJobOffers[j] > 0 and (offeredSalary[j] >= minSalary[i]):\n                if selected == -1 or offeredSalary[selected] < offeredSalary[j]:\n                    selected = j\n        if selected >= 0:\n            maxJobOffers[selected] -= 1\n            placements_count += 1\n            total_salary += offeredSalary[selected]\n            hiring_companies.add(selected)\n    print(placements_count, end=' ')\n    print(total_salary, end=' ')\n    print(M - len(hiring_companies))\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def solution():\n    (N, M) = map(int, input().split())\n    minSalary = list(map(int, input().split()))\n    offeredSalary = []\n    maxJobOffers = []\n    for i in range(M):\n        (salary, offer) = map(int, input().split())\n        offeredSalary.append(salary)\n        maxJobOffers.append(offer)\n    qual = []\n    for i in range(N):\n        qual.append([c == '1' for (i, c) in enumerate(input())])\n    placements_count = 0\n    total_salary = 0\n    hiring_companies = set()\n    for i in range(N):\n        selected = -1\n        for j in range(M):\n            if qual[i][j] and maxJobOffers[j] > 0 and (offeredSalary[j] >= minSalary[i]):\n                if selected == -1 or offeredSalary[selected] < offeredSalary[j]:\n                    selected = j\n        if selected >= 0:\n            maxJobOffers[selected] -= 1\n            placements_count += 1\n            total_salary += offeredSalary[selected]\n            hiring_companies.add(selected)\n    print(placements_count, end=' ')\n    print(total_salary, end=' ')\n    print(M - len(hiring_companies))\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def solution():\n    (N, M) = map(int, input().split())\n    minSalary = list(map(int, input().split()))\n    offeredSalary = []\n    maxJobOffers = []\n    for i in range(M):\n        (salary, offer) = map(int, input().split())\n        offeredSalary.append(salary)\n        maxJobOffers.append(offer)\n    qual = []\n    for i in range(N):\n        qual.append([c == '1' for (i, c) in enumerate(input())])\n    placements_count = 0\n    total_salary = 0\n    hiring_companies = set()\n    for i in range(N):\n        selected = -1\n        for j in range(M):\n            if qual[i][j] and maxJobOffers[j] > 0 and (offeredSalary[j] > minSalary[i]):\n                if selected == -1 or offeredSalary[selected] < offeredSalary[j]:\n                    selected = j\n        if selected >= 0:\n            maxJobOffers[selected] -= 1\n            placements_count += 1\n            total_salary += offeredSalary[selected]\n            hiring_companies.add(selected)\n    print(placements_count, end=' ')\n    print(total_salary, end=' ')\n    print(M - len(hiring_companies))\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "def solution():\n    (N, M) = map(int, input().split())\n    minSalary = list(map(int, input().split()))\n    offeredSalary = []\n    maxJobOffers = []\n    for i in range(M):\n        (salary, offer) = map(int, input().split())\n        offeredSalary.append(salary)\n        maxJobOffers.append(offer)\n    qual = []\n    for i in range(N):\n        qual.append([c == '1' for (i, c) in enumerate(input())])\n    placements_count = 0\n    total_salary = 0\n    hiring_companies = set()\n    for i in range(N):\n        selected = -1\n        for j in range(M):\n            if qual[i][j] and maxJobOffers[j] > 0 and (offeredSalary[j] > minSalary[i]):\n                if selected == -1 or offeredSalary[selected] < offeredSalary[j]:\n                    selected = j\n        if selected >= 0:\n            maxJobOffers[selected] -= 1\n            placements_count += 1\n            total_salary += offeredSalary[selected]\n            hiring_companies.add(selected)\n    print(placements_count, end=' ')\n    print(total_salary, end=' ')\n    print(M - len(hiring_companies))\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "import sys\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l1 = []\n    for i in range(m):\n        d = input().split()\n        l1.append(list(map(int, d)))\n    ll = []\n    for i in range(m):\n        ll.append(l1[i][1])\n    t = 0\n    student = 0\n    for i in range(n):\n        s = input()\n        lik = -1 * sys.maxsize\n        max1 = -1 * sys.maxsize\n        index = -1\n        for j in range(m):\n            if s[j] == '1':\n                if l1[j][1] > 0:\n                    if l1[j][0] >= l[i] and l1[j][0] > max1:\n                        index = j\n                        max1 = l1[j][0]\n        if lik != max1:\n            t += max1\n        if index != -1:\n            l1[index][1] -= 1\n            student += 1\n    note = 0\n    for i in range(m):\n        if l1[i][1] == ll[i]:\n            note += 1\n    print(student, t, note)", "import sys\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l1 = []\n    for i in range(m):\n        d = input().split()\n        l1.append(list(map(int, d)))\n    ll = []\n    for i in range(m):\n        ll.append(l1[i][1])\n    t = 0\n    student = 0\n    for i in range(n):\n        s = input()\n        lik = -1 * sys.maxsize\n        max1 = -1 * sys.maxsize\n        index = -1\n        for j in range(m):\n            if s[j] == '1':\n                if l1[j][1] > 0:\n                    if l1[j][0] >= l[i] and l1[j][0] > max1:\n                        index = j\n                        max1 = l1[j][0]\n        if lik != max1:\n            t += max1\n        if index != -1:\n            l1[index][1] -= 1\n            student += 1\n    note = 0\n    for i in range(m):\n        if l1[i][1] == ll[i]:\n            note += 1\n    print(student, t, note)", "import sys\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l1 = []\n    for i in range(m):\n        d = input().split()\n        l1.append(list(map(int, d)))\n    ll = []\n    for i in range(m):\n        ll.append(l1[i][1])\n    t = 0\n    student = 0\n    for i in range(n):\n        s = input()\n        lik = -1 * sys.maxsize\n        max1 = -1 * sys.maxsize\n        index = -1\n        for j in range(m):\n            if s[j] == '1':\n                if l1[j][1] > 0:\n                    if l1[j][0] >= l[i] and l1[j][0] > max1:\n                        index = j\n                        max1 = l1[j][0]\n        if lik != max1:\n            t += max1\n        if index != -1:\n            l1[index][1] -= 1\n            student += 1\n    note = 0\n    for i in range(m):\n        if l1[i][1] == ll[i]:\n            note += 1\n    print(student, t, note)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split(' '))\n    min_salary = [int(j) for j in input().split(' ')]\n    company = []\n    for j in range(m):\n        (offered_salary, max_job_offers) = map(int, input().split())\n        company.append([offered_salary, max_job_offers])\n    qual = []\n    for j in range(n):\n        qual.append(list(input()))\n    count = 0\n    sum_sal = 0\n    check = []\n    for j in range(n):\n        sal = 0\n        for k in range(m):\n            if qual[j][k] == '1' and company[k][0] >= min_salary[j] and (company[k][1] > 0):\n                if company[k][0] > sal:\n                    sal = company[k][0]\n                    temp = k\n        if sal:\n            count += 1\n            company[temp][1] -= 1\n            sum_sal += sal\n            if temp not in check:\n                check.append(temp)\n    print(str(count) + ' ' + str(sum_sal) + ' ' + str(m - len(check)))", "for t in range(int(input())):\n    (n, m) = [int(i) for i in input().split()]\n    offeredsalary = [0] * m\n    maxjoboffer = [0] * m\n    minsalary = [int(i) for i in input().split()]\n    for i in range(m):\n        (offeredsalary[i], maxjoboffer[i]) = [int(i) for i in input().split()]\n    totalsalary = 0\n    totalplaced = 0\n    totalcompany = 0\n    company = [0] * m\n    for i in range(n):\n        maxencounter = 0\n        compi = -1\n        qual = [int(i) for i in list(input())]\n        for j in range(m):\n            if qual[j] == 1:\n                if offeredsalary[j] > maxencounter and offeredsalary[j] > minsalary[i]:\n                    if maxjoboffer[j] > 0:\n                        maxencounter = offeredsalary[j]\n                        compi = j\n        if compi != -1:\n            totalplaced += 1\n            totalsalary += maxencounter\n            maxjoboffer[compi] -= 1\n            if company[compi] == 0:\n                company[compi] = 1\n                totalcompany += 1\n    print(totalplaced, totalsalary, m - totalcompany, sep=' ')", "import sys\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l1 = []\n    for i in range(m):\n        d = input().split()\n        l1.append(list(map(int, d)))\n    ll = []\n    for i in range(m):\n        ll.append(l1[i][1])\n    t = 0\n    student = 0\n    for i in range(n):\n        s = input()\n        lik = -1 * sys.maxsize\n        max1 = -1 * sys.maxsize\n        index = -1\n        for j in range(m):\n            if s[j] == '1':\n                if l1[j][1] > 0:\n                    if l1[j][0] >= l[i] and l1[j][0] > max1:\n                        index = j\n                        max1 = l1[j][0]\n        if lik != max1:\n            t += max1\n        if index != -1:\n            l1[index][1] -= 1\n            student += 1\n    note = 0\n    for i in range(m):\n        if l1[i][1] == ll[i]:\n            note += 1\n    print(student, t, note)", "class comp:\n    maxsal = 0\n    available = 0\n    hired = 0\nT = int(input())\nfor t in range(T):\n    ls = list(map(int, input().split()))\n    N = ls[0]\n    M = ls[1]\n    minsal = list(map(int, input().split()))\n    co = []\n    for O in range(M):\n        obj = comp()\n        p = list(map(int, input().split()))\n        obj.maxsal = p[0]\n        obj.available = p[1]\n        obj.hired = 0\n        co.append(obj)\n    qual = [str(input()) for i in range(N)]\n    result = []\n    totalselected = 0\n    totalsal = 0\n    for i in range(N):\n        S = qual[i]\n        candidateselected = False\n        for index in range(len(S)):\n            if S[index] == '1' and minsal[i] <= co[index].maxsal and (co[index].available != 0):\n                minsal[i] = co[index].maxsal\n                hiringco = index\n                candidateselected = True\n        if candidateselected:\n            co[hiringco].available = co[hiringco].available - 1\n            co[hiringco].hired = 1\n            totalselected = totalselected + 1\n            totalsal = totalsal + co[hiringco].maxsal\n    v = 0\n    for m in co:\n        if m.hired == 0:\n            v = v + 1\n    print(totalselected, totalsal, v)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    minSal = list(map(int, input().split()))\n    info = list()\n    selec = list()\n    for _ in range(m):\n        info.append(list(map(int, input().split())))\n    for _ in range(n):\n        selec.append(list(map(int, input())))\n    cand = [0] * n\n    sal = [0] * n\n    comp = [0] * m\n    for i in range(n):\n        possible = list()\n        possible = [ind for (ind, val) in enumerate(selec[i]) if val == 1]\n        max_sal = -1\n        max_com = -1\n        for com in possible:\n            if info[com][1] > 0 and info[com][0] > max_sal and (info[com][0] >= minSal[i]):\n                max_sal = info[com][0]\n                max_com = com\n        if max_com > -1:\n            cand[i] = 1\n            sal[i] = max_sal\n            comp[max_com] += 1\n            info[max_com][1] -= 1\n    print(sum(cand), sum(sal), comp.count(0))", "t = int(input())\nfor testCase in range(t):\n    (n, m) = map(int, input().split())\n    minSalary = [int(x) for x in input().split()]\n    offeredSalary = [0] * m\n    maxJobOffers = [0] * m\n    student = 0\n    comp = -1\n    salary = [0] * n\n    isSelected = [0] * n\n    recruitedOne = [0] * m\n    qual = [[0 for x in range(m)] for y in range(n)]\n    for i in range(1, m + 1):\n        (offeredSalary[i - 1], maxJobOffers[i - 1]) = map(int, input().split())\n    for i in range(1, n + 1):\n        qual[i - 1] = input()\n    for student in range(n):\n        comp = -1\n        for company in range(m):\n            if qual[student][company] == '1' and maxJobOffers[company] > 0 and (offeredSalary[company] >= minSalary[student]) and (offeredSalary[company] > salary[student]):\n                isSelected[student] = 1\n                salary[student] = offeredSalary[company]\n                comp = company\n        if salary[student] > 0:\n            maxJobOffers[comp] = maxJobOffers[comp] - 1\n            recruitedOne[comp] = 1\n    print(sum(isSelected), sum(salary), m - sum(recruitedOne))", "def main():\n    T = int(input())\n    for t in range(T):\n        (N, M) = input().split()\n        N = int(N)\n        M = int(M)\n        min_salaries = input().split()\n        for i in range(N):\n            min_salaries[i] = int(min_salaries[i])\n        offered_salary = []\n        max_job_offers = []\n        for i in range(M):\n            lis = input().split()\n            offered_salary.append(int(lis[0]))\n            max_job_offers.append(int(lis[1]))\n        qual = []\n        for i in range(N):\n            qual.append(input())\n        number_hired_by_company = [0] * M\n        total_salary_accepted = 0\n        for s in range(N):\n            max_salary = 0\n            max_company = 0\n            for c in range(M):\n                if qual[s][c] == '0':\n                    continue\n                elif number_hired_by_company[c] < max_job_offers[c]:\n                    if offered_salary[c] > max_salary:\n                        max_salary = offered_salary[c]\n                        max_company = c\n            if max_salary == 0:\n                continue\n            elif max_salary >= min_salaries[s]:\n                number_hired_by_company[max_company] += 1\n                total_salary_accepted += max_salary\n        number_jobbed_students = 0\n        number_companies_didnt_hire = 0\n        for n in number_hired_by_company:\n            if n == 0:\n                number_companies_didnt_hire += 1\n            else:\n                number_jobbed_students += n\n        print(number_jobbed_students, total_salary_accepted, number_companies_didnt_hire)\nmain()", "def main():\n    T = int(input())\n    for t in range(T):\n        (N, M) = input().split()\n        N = int(N)\n        M = int(M)\n        min_salaries = input().split()\n        for i in range(N):\n            min_salaries[i] = int(min_salaries[i])\n        offered_salary = []\n        max_job_offers = []\n        for i in range(M):\n            lis = input().split()\n            offered_salary.append(int(lis[0]))\n            max_job_offers.append(int(lis[1]))\n        qual = []\n        for i in range(N):\n            qual.append(input())\n        number_hired_by_company = [0] * M\n        total_salary_accepted = 0\n        for s in range(N):\n            max_salary = 0\n            max_company = 0\n            for c in range(M):\n                if qual[s][c] == '0':\n                    pass\n                elif number_hired_by_company[c] < max_job_offers[c]:\n                    if offered_salary[c] > max_salary:\n                        max_salary = offered_salary[c]\n                        max_company = c\n            if max_salary == 0:\n                pass\n            elif max_salary >= min_salaries[s]:\n                number_hired_by_company[max_company] += 1\n                total_salary_accepted += max_salary\n        number_jobbed_students = 0\n        number_companies_didnt_hire = 0\n        for n in number_hired_by_company:\n            if n == 0:\n                number_companies_didnt_hire += 1\n            else:\n                number_jobbed_students += n\n        print(number_jobbed_students, total_salary_accepted, number_companies_didnt_hire)\nmain()", "def main():\n    T = int(input())\n    for t in range(T):\n        (N, M) = input().split()\n        N = int(N)\n        M = int(M)\n        min_salaries = input().split()\n        for i in range(N):\n            min_salaries[i] = int(min_salaries[i])\n        offered_salary = []\n        max_job_offers = []\n        for i in range(M):\n            lis = input().split()\n            offered_salary.append(int(lis[0]))\n            max_job_offers.append(int(lis[1]))\n        qual = []\n        for i in range(N):\n            qual.append(input())\n        number_hired_by_company = [0] * M\n        total_salary_accepted = 0\n        for s in range(N):\n            max_salary = 0\n            max_company = 0\n            for c in range(M):\n                if qual[s][c] == '0':\n                    continue\n                if offered_salary[c] > max_salary:\n                    if number_hired_by_company[c] < max_job_offers[c]:\n                        max_salary = offered_salary[c]\n                        max_company = c\n            if max_salary == 0:\n                continue\n            elif max_salary >= min_salaries[s]:\n                number_hired_by_company[max_company] += 1\n                total_salary_accepted += max_salary\n        number_jobbed_students = 0\n        number_companies_didnt_hire = 0\n        for n in number_hired_by_company:\n            if n == 0:\n                number_companies_didnt_hire += 1\n            else:\n                number_jobbed_students += n\n        print(number_jobbed_students, total_salary_accepted, number_companies_didnt_hire, end='\\n')\nmain()", "def main():\n    T = int(input())\n    for t in range(T):\n        (N, M) = input().split()\n        N = int(N)\n        M = int(M)\n        min_salaries = input().split()\n        for i in range(N):\n            min_salaries[i] = int(min_salaries[i])\n        offered_salary = []\n        max_job_offers = []\n        for i in range(M):\n            lis = input().split()\n            offered_salary.append(int(lis[0]))\n            max_job_offers.append(int(lis[1]))\n        qual = []\n        for i in range(N):\n            qual.append(input())\n        number_hired_by_company = [0] * M\n        total_salary_accepted = 0\n        for s in range(N):\n            max_salary = 0\n            max_company = 0\n            for c in range(M):\n                if qual[s][c] == '0':\n                    continue\n                if offered_salary[c] > max_salary:\n                    if number_hired_by_company[c] < max_job_offers[c]:\n                        max_salary = offered_salary[c]\n                        max_company = c\n            if max_salary == 0:\n                continue\n            elif max_salary >= min_salaries[s]:\n                number_hired_by_company[max_company] += 1\n                total_salary_accepted += max_salary\n        number_jobbed_students = 0\n        number_companies_didnt_hire = 0\n        for n in number_hired_by_company:\n            if n == 0:\n                number_companies_didnt_hire += 1\n            else:\n                number_jobbed_students += n\n        print(number_jobbed_students, total_salary_accepted, number_companies_didnt_hire, end='\\n')\nmain()", "def main():\n    T = int(input())\n    for t in range(T):\n        (N, M) = input().split()\n        N = int(N)\n        M = int(M)\n        min_salaries = input().split()\n        for i in range(N):\n            min_salaries[i] = int(min_salaries[i])\n        company_data = []\n        for i in range(M):\n            company_data.append(input().split())\n            company_data[-1][0] = int(company_data[-1][0])\n            company_data[-1][1] = int(company_data[-1][1])\n        qual = []\n        for i in range(N):\n            qual.append(input())\n        num_hired_by_company = [0] * M\n        total_salary_accepted = 0\n        for s in range(N):\n            max_salary = 0\n            max_company = 0\n            for c in range(M):\n                if qual[s][c] == '0':\n                    continue\n                if company_data[c][0] > max_salary:\n                    if num_hired_by_company[c] < company_data[c][1]:\n                        max_salary = company_data[c][0]\n                        max_company = c\n            if max_salary == 0:\n                continue\n            elif max_salary >= min_salaries[s]:\n                num_hired_by_company[max_company] += 1\n                total_salary_accepted += max_salary\n        number_students_with_jobs = 0\n        number_companies_didnt_hire = 0\n        for n in num_hired_by_company:\n            if n == 0:\n                number_companies_didnt_hire += 1\n            else:\n                number_students_with_jobs += n\n        print(number_students_with_jobs, total_salary_accepted, number_companies_didnt_hire, end='\\n')\nmain()", "t = int(input())\nfor i in range(t):\n    f = input()\n    f = list(map(int, f.split()))\n    n = f[0]\n    m = f[1]\n    minsalary = input()\n    b = []\n    dup = []\n    minsalary = list(map(int, minsalary.split()))\n    for j in range(m):\n        s = input()\n        s = list(map(int, s.split()))\n        b.append(list(s))\n        dup.append(list(s))\n    b.append([0, 0])\n    qual = []\n    for j in range(n):\n        g = input()\n        qual.append(g)\n    count = 0\n    salary = 0\n    for j in range(n):\n        maxi = -float('inf')\n        h = m\n        for k in range(m):\n            if qual[j][k] == '1' and b[k][1] != 0 and (minsalary[j] <= b[k][0]):\n                if b[k][0] > maxi:\n                    maxi = b[k][0]\n                    h = k\n        b[h][1] = b[h][1] - 1\n        if h != m:\n            count = count + 1\n            salary = salary + b[h][0]\n    none = 0\n    for j in range(m):\n        if b[j][1] == dup[j][1]:\n            none = none + 1\n    print(count, salary, none)", "Test = int(input())\nwhile Test != 0:\n    (N, M) = map(int, input().split())\n    minSal = {}\n    k = list(map(int, input().split()))\n    for i in range(N):\n        minSal.update({i: k[i]})\n    CompDetail = {}\n    for i in range(M):\n        CompDetail.update({i: list(map(int, input().split()))})\n    EmpComp = {}\n    for i in range(N):\n        EmpComp.update({i: list(input())})\n    salarySum = 0\n    HiringCompany = {}\n    count0 = 0\n    for i in minSal.keys():\n        maxi = -1\n        loc = -1\n        for j in range(M):\n            if EmpComp[i][j] == '1' and j in CompDetail.keys():\n                if maxi < CompDetail[j][0]:\n                    maxi = CompDetail[j][0]\n                    loc = j\n        if maxi >= minSal[i] and loc in CompDetail.keys():\n            HiringCompany.update({loc: 1})\n            count0 = count0 + 1\n            CompDetail.update({loc: [CompDetail[loc][0], CompDetail[loc][1] - 1]})\n            salarySum = salarySum + CompDetail[loc][0]\n            if CompDetail[loc][1] == 0:\n                del CompDetail[loc]\n    print(count0, salarySum, M - len(HiringCompany.keys()))\n    Test = Test - 1", "Test = int(input())\nwhile Test != 0:\n    (N, M) = map(int, input().split())\n    minSal = {}\n    k = list(map(int, input().split()))\n    for i in range(N):\n        minSal.update({i: k[i]})\n    CompDetail = {}\n    for i in range(M):\n        CompDetail.update({i: list(map(int, input().split()))})\n    EmpComp = {}\n    for i in range(N):\n        EmpComp.update({i: list(input())})\n    sum = 0\n    salary = 0\n    count0 = 0\n    count1 = 0\n    hey = {}\n    for i in minSal.keys():\n        maxi = -1\n        loc = -1\n        for j in range(M):\n            if EmpComp[i][j] == '1' and j in CompDetail.keys():\n                if maxi < CompDetail[j][0]:\n                    maxi = CompDetail[j][0]\n                    loc = j\n        if maxi >= minSal[i] and loc in CompDetail.keys():\n            hey.update({loc: 1})\n            count0 = count0 + 1\n            CompDetail.update({loc: [CompDetail[loc][0], CompDetail[loc][1] - 1]})\n            sum = sum + CompDetail[loc][0]\n            if CompDetail[loc][1] == 0:\n                del CompDetail[loc]\n    print(count0, sum, M - len(hey.keys()))\n    Test = Test - 1", "for _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    minSalary = list(map(int, input().split()))\n    salary = 0\n    candidates = 0\n    companies = 0\n    offeredSalary = []\n    maxJobOffers = []\n    for __ in range(M):\n        (x, y) = map(int, input().split())\n        offeredSalary.append(x)\n        maxJobOffers.append(y)\n    oldmaxjoboffers = maxJobOffers * 1\n    for i in range(N):\n        data = list(input())\n        sal = minSalary[i]\n        for j in range(len(data)):\n            data[j] = int(data[j])\n            if data[j] == 1:\n                if sal <= offeredSalary[j] and maxJobOffers[j] > 0:\n                    sal = offeredSalary[j]\n        for k in range(len(offeredSalary)):\n            if sal == offeredSalary[k]:\n                candidates = candidates + 1\n                salary = salary + offeredSalary[k]\n                maxJobOffers[k] = maxJobOffers[k] - 1\n    for i in range(len(maxJobOffers)):\n        if maxJobOffers[i] == oldmaxjoboffers[i]:\n            companies += 1\n    print(candidates, salary, companies)", "for case in range(int(input())):\n    (n, m) = map(int, input().split())\n    minSalary = list(map(int, input().split()))\n    offer = []\n    companyHappy = [False] * m\n    candidateHappy = [False] * n\n    for offered in range(m):\n        offer.append(list(map(int, input().split())))\n    qual = {}\n    totalSalary = 0\n    for candidate in range(n):\n        qual[candidate] = input().strip()\n    for candidate in qual.keys():\n        cSalary = 0\n        companyID = 0\n        for company in range(m):\n            if qual[candidate][company] == '1':\n                if minSalary[candidate] <= offer[company][0] and offer[company][1] > 0:\n                    if cSalary < offer[company][0]:\n                        cSalary = offer[company][0]\n                        companyID = company\n                        candidateHappy[candidate] = True\n        if candidateHappy[candidate]:\n            offer[companyID][1] -= 1\n            companyHappy[companyID] = True\n            totalSalary += cSalary\n    print(candidateHappy.count(True), totalSalary, companyHappy.count(False))", "for t in range(int(input())):\n    (N, M) = map(int, input().split())\n    min_sal = list(map(int, input().split()))\n    (off_sal, max_job) = ([None] * M, [None] * M)\n    for i in range(M):\n        (off_sal[i], max_job[i]) = map(int, input().split())\n    max_job_copy = max_job[:]\n    qual = [input().strip() for i in range(N)]\n    happy = total = 0\n    for i in range(N):\n        choices = [(off_sal[j], j) for j in range(M) if qual[i][j] == '1' and off_sal[j] >= min_sal[i] and (max_job[j] > 0)]\n        if choices:\n            (max_sal, comp) = max(choices)\n            happy += 1\n            total += max_sal\n            max_job[comp] -= 1\n    sad = sum((m1 == m2 for (m1, m2) in zip(max_job, max_job_copy)))\n    print(happy, total, sad)", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    min = list(map(int, input().split()))\n    salary = [0] * m\n    emp = [0] * m\n    for i in range(0, m):\n        (salary[i], emp[i]) = map(int, input().split())\n    qual = [0] * n\n    for i in range(0, n):\n        qual[i] = input()\n    ca = w = count = s = su = 0\n    f = [0] * 10000\n    freq = [0] * 10000\n    for i in range(0, n):\n        max = 0\n        for j in range(0, m):\n            if qual[i][j] == '1':\n                k = emp[j]\n                if salary[j] > max and k != 0:\n                    max = salary[j]\n        for j in range(0, m):\n            if salary[j] == max and salary[j] >= min[i]:\n                if emp[j] != 0:\n                    emp[j] = emp[j] - 1\n                    ca = ca + 1\n                    su = su + salary[j]\n                    f[w] = j\n                    freq[w] = -1\n                    w = w + 1\n    for i in range(0, w):\n        count = 1\n        for j in range(i + 1, w):\n            if f[i] == f[j]:\n                count = count + 1\n                freq[j] = 0\n        if freq[i] != 0:\n            freq[i] = count\n    for i in range(0, w):\n        if freq[i] != 0:\n            s = s + 1\n    print(ca, su, m - s)\n    t = t - 1", "import copy\nt = int(input())\nfor i in range(0, t):\n    job_offered = 0\n    total_sal = 0\n    comp_det = []\n    cand_det = []\n    num = [int(x) for x in input().split()]\n    N = num[0]\n    M = num[1]\n    minSalary = [int(x) for x in input().split()]\n    for j in range(0, M):\n        comp_det.append([int(x) for x in input().split()])\n    for k in range(0, N):\n        x = input()\n        cand = list(x)\n        cand_det.append([int(s) for s in cand])\n    comp_det_c = copy.deepcopy(comp_det)\n    for l in range(0, N):\n        salary = []\n        for j in range(0, M):\n            if cand_det[l][j] == 1 and comp_det[j][1] != 0:\n                salary.append(comp_det[j][0])\n            else:\n                salary.append(0)\n        if max(salary) >= minSalary[l]:\n            job_offered = job_offered + 1\n            total_sal = total_sal + max(salary)\n            comp_det[salary.index(max(salary))][1] = comp_det[salary.index(max(salary))][1] - 1\n    no_job = 0\n    for l in range(0, M):\n        if comp_det[l] == comp_det_c[l]:\n            no_job = no_job + 1\n    print(job_offered, total_sal, no_job)", "def get_best_comp(cand_key, company):\n    options = cand_key[1]\n    index = -1\n    val = -1\n    for o in range(len(options)):\n        if options[o] == '1':\n            if company[o][1] > 0:\n                if company[o][0] >= cand_key[0]:\n                    if company[o][0] > val:\n                        val = company[o][0]\n                        index = o\n    if not index == -1:\n        company[index][1] -= 1\n    return val\nt = int(input())\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    minSalary = [int(x) for x in input().split()]\n    comp = []\n    for t in range(m):\n        (sal, offer) = [int(x) for x in input().split()]\n        comp.append([sal, offer, offer])\n    cand = {}\n    for t in range(n):\n        temp = input()\n        cand[t] = (minSalary[t], list(temp))\n    jobs = salaries = nil_companies = 0\n    for key in cand.keys():\n        best_comp = get_best_comp(cand[key], comp)\n        if not best_comp == -1:\n            jobs += 1\n            salaries += best_comp\n    for elem in comp:\n        if elem[1] - elem[2] == 0:\n            nil_companies += 1\n    print(jobs, salaries, nil_companies)", "import math\nimport operator\nfor ii in range(int(input())):\n    sal = 0\n    count = 0\n    comc = 0\n    n = [int(x) for x in input().split()]\n    minsal = [int(x) for x in input().split()]\n    com = []\n    for i in range(n[1]):\n        a = [int(x) for x in input().split()]\n        a.append(i)\n        a.append(a[1])\n        com.append(a)\n    com.sort(key=operator.itemgetter(0), reverse=True)\n    sel = []\n    for i in range(n[0]):\n        sel.append(input())\n    for i in range(n[0]):\n        for j in range(n[1]):\n            if com[j][1] > 0 and com[j][0] >= minsal[i] and (sel[i][com[j][2]] == '1'):\n                com[j][1] = com[j][1] - 1\n                count = count + 1\n                sal = sal + com[j][0]\n                break\n            elif minsal[i] > com[j][0]:\n                break\n    for i in range(n[1]):\n        if com[i][3] == com[i][1]:\n            comc = comc + 1\n    print(count, sal, comc)", "import math\n\ndef findalpha():\n    data = [int(x) for x in input().split()]\n    n = data[0]\n    m = data[1]\n    minSalary = [int(x) for x in input().split()]\n    temp = []\n    maxsal_maxjobs = []\n    qual = []\n    sumSalary = 0\n    prev_offer = 0\n    getsjobs = 0\n    maxsal_maxjobs_temp = []\n    for index in range(0, m):\n        temp = []\n        temp = [int(x) for x in input().split()]\n        maxsal_maxjobs_temp.append(temp[1])\n        maxsal_maxjobs.append(temp)\n    for index in range(0, n):\n        string_temp = input()\n        qual.append(string_temp)\n    for i in range(0, n):\n        prev_offer = 0\n        for j in range(0, m):\n            if qual[i][j] == '1':\n                if maxsal_maxjobs_temp[j] > 0 and maxsal_maxjobs[j][0] >= minSalary[i]:\n                    if maxsal_maxjobs[j][0] > prev_offer:\n                        prev_offer = maxsal_maxjobs[j][0]\n                        index_company = j\n        if prev_offer > 0:\n            getsjobs += 1\n            sumSalary += prev_offer\n            maxsal_maxjobs_temp[index_company] -= 1\n    nojobs = 0\n    for x in range(0, m):\n        if maxsal_maxjobs[x][1] == maxsal_maxjobs_temp[x]:\n            nojobs += 1\n    print('%d %d %d' % (getsjobs, sumSalary, nojobs))\nt = int(input())\nwhile t > 0:\n    t -= 1\n    findalpha()", "t = int(input())\nfor r in range(t):\n    (n, m) = map(int, input().strip().split())\n    minr = list(map(int, input().strip().split(' ')))\n    osl = [0] * m\n    mxin = [0] * m\n    for i in range(m):\n        (x, y) = map(int, input().strip().split(' '))\n        osl[i] = x\n        mxin[i] = y\n    jb = [[0] * m for i in range(n)]\n    for i in range(n):\n        ip = input().strip()\n        for j in range(m):\n            jb[i][j] = int(ip[j])\n    ofans = 0\n    nr = set()\n    nor = 0\n    for j in range(m):\n        nr.add(j)\n    for i in range(n):\n        maxof = 0\n        tc = -1\n        for j in range(m):\n            if jb[i][j] == 1 and maxof < osl[j] and (mxin[j] > 0):\n                maxof = osl[j]\n                tc = j\n        if minr[i] <= maxof:\n            nor += 1\n            ofans += maxof\n            mxin[tc] -= 1\n            if nr.__contains__(tc):\n                nr.remove(tc)\n    out = str(nor) + ' ' + str(ofans) + ' ' + str(len(nr))\n    print(out)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    mim = list(map(int, input().split()))\n    os = []\n    mjo = []\n    qual = []\n    l = []\n    z = -1\n    s1 = 0\n    s2 = 0\n    s3 = 0\n    c = 0\n    for j in range(m):\n        (y, z) = map(int, input().split())\n        os.append(y)\n        mjo.append(z)\n        l.append(0)\n    for j in range(n):\n        b = list(input())\n        qual.append(b)\n        b = []\n    z = -1\n    for j in range(n):\n        c = 0\n        for k in range(m):\n            if l[k] < mjo[k]:\n                if qual[j][k] == '1':\n                    if os[k] >= mim[j] and os[k] > c:\n                        c = os[k]\n                        z = k\n        if z != -1:\n            l[z] += 1\n            z = -1\n    for j in range(m):\n        if l[j] > 0:\n            s1 = s1 + l[j]\n            s2 = s2 + l[j] * os[j]\n        else:\n            s3 = s3 + 1\n    print(s1, s2, s3, sep=' ')", "import sys\nn = int(input().strip())\nfor i in range(0, n):\n    a = [int(scores_temp) for scores_temp in input().strip().split(' ')]\n    b = [int(scores_temp) for scores_temp in input().strip().split(' ')]\n    js = [[]] * a[1]\n    company = [0] * a[1]\n    mtr = [[]] * a[0]\n    ans1 = ans2 = 0\n    ans3 = a[1]\n    for i in range(0, a[1]):\n        js[i] = [int(scores_temp) for scores_temp in input().strip().split(' ')]\n    for i in range(0, a[0]):\n        mtr[i] = list(input().strip())\n        t = count = 0\n        salary = 0\n        for j in range(0, a[1]):\n            if mtr[i][j] == '1':\n                minsal = b[i]\n                saloff = js[j][0]\n                if saloff >= minsal and salary < saloff and (js[j][1] > 0):\n                    salary = saloff\n                    t = j\n                    count = 1\n        if count == 1:\n            js[t][1] = js[t][1] - 1\n            ans1 = ans1 + 1\n            company[t] = 1\n            ans2 = ans2 + salary\n    print(ans1, ans2, a[1] - sum(company))", "import sys\nn = int(input().strip())\nfor i in range(0, n):\n    a = [int(scores_temp) for scores_temp in input().strip().split(' ')]\n    b = [int(scores_temp) for scores_temp in input().strip().split(' ')]\n    js = [[]] * a[1]\n    company = [0] * a[1]\n    mtr = [[]] * a[0]\n    ans1 = ans2 = 0\n    ans3 = a[1]\n    for i in range(0, a[1]):\n        js[i] = [int(scores_temp) for scores_temp in input().strip().split(' ')]\n    for i in range(0, a[0]):\n        mtr[i] = list(input().strip())\n        t = count = 0\n        salary = 0\n        for j in range(0, a[1]):\n            if mtr[i][j] == '1':\n                minsal = b[i]\n                saloff = js[j][0]\n                if saloff >= minsal and salary < saloff and (js[j][1] > 0):\n                    salary = saloff\n                    t = j\n                    count = 1\n        if count == 1:\n            js[t][1] = js[t][1] - 1\n            ans1 = ans1 + 1\n            company[t] = 1\n            ans2 = ans2 + salary\n    print(ans1, ans2, a[1] - sum(company))", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    minSalary = list(map(int, input().split()))\n    offeredSalary = []\n    maxJobOffers = []\n    for _ in range(M):\n        (offeredSalary_item, maxJobOffers_item) = map(int, input().split())\n        offeredSalary.append(offeredSalary_item)\n        maxJobOffers.append(maxJobOffers_item)\n    qual = []\n    for i in range(N):\n        qual_item = str(input())\n        if i == 0:\n            qual = [list(map(str, qual_item.split()))]\n        else:\n            qual.append(list(map(str, qual_item.split())))\n    maxJobOffers2 = []\n    for item in maxJobOffers:\n        maxJobOffers2.append(item)\n    count_candidates_successful = 0\n    count_not_comp = 0\n    count_sal = 0\n    comP_old = []\n    comP_new = []\n    for x in range(M):\n        comP_old.append(N)\n        comP_new.append(N)\n    for i in range(N):\n        flag = 0\n        qualified_i = []\n        for j in range(M):\n            if qual[i][0][j] == '1':\n                qualified_i.append(j)\n        maximum_offsal = -1\n        if qualified_i != []:\n            maximum_offsal = minSalary[i]\n            for item in qualified_i:\n                if maximum_offsal <= offeredSalary[item] and maxJobOffers2[item] > 0:\n                    maximum_offsal = offeredSalary[item]\n                    flag = 1\n            if flag == 1:\n                count_sal += maximum_offsal\n                count_candidates_successful += 1\n                index = offeredSalary.index(maximum_offsal)\n                maxJobOffers2[index] -= 1\n    for (index, item) in enumerate(maxJobOffers2):\n        if item == maxJobOffers[index]:\n            count_not_comp += 1\n    print(str(count_candidates_successful) + ' ' + str(count_sal) + ' ' + str(count_not_comp))", "class Company:\n\n    def __init__(self, offeredSalary, maxJobOffers, index, hiredAny=False, sortedIndex=None):\n        self.offeredSalary = offeredSalary\n        self.maxJobOffers = maxJobOffers\n        self.index = index\n        self.hiredAny = hiredAny\n        self.sortedIndex = sortedIndex\noutput = []\nT = int(input())\nfor t in range(0, T):\n    (N, M) = map(int, input().split(' '))\n    minSalary = list(map(int, input().split(' ')))\n    companies = []\n    for ctr in range(0, M):\n        (offSal, maxJobOff) = map(int, input().split(' '))\n        companies.append(Company(offeredSalary=offSal, maxJobOffers=maxJobOff, index=ctr))\n    companies.sort(key=lambda x: x.offeredSalary, reverse=True)\n    for ctr in range(0, M):\n        companies[ctr].sortedIndex = ctr\n    num_placed_candidates = 0\n    total_salary = 0\n    for candidate in range(0, N):\n        qual = list(map(int, list(input())))\n        relevantCompanies = [company for company in companies if qual[company.index] == 1]\n        for c in relevantCompanies:\n            if c.maxJobOffers > 0:\n                if c.offeredSalary >= minSalary[candidate]:\n                    companies[c.sortedIndex].maxJobOffers -= 1\n                    num_placed_candidates += 1\n                    total_salary += c.offeredSalary\n                    companies[c.sortedIndex].hiredAny = True\n                    break\n                else:\n                    break\n    output.append([num_placed_candidates, total_salary, len([company for company in companies if company.hiredAny == False])])\nfor t in range(0, T):\n    print(*output[t])", "t = int(input())\nfor pq in range(t):\n    t1 = list(map(int, input().split()))\n    n = t1[0]\n    m = t1[1]\n    minSal = [int(x) for x in input().split()]\n    comp = []\n    qual = []\n    visLis = []\n    totSal = 0\n    gotJob = 0\n    for i in range(m):\n        comp.append([int(x) for x in input().split()])\n    for i in range(n):\n        qual.append([int(x) for x in list(input())])\n    for i in range(n):\n        sal = 0\n        ind = -1\n        for j in range(m):\n            if qual[i][j] == 1:\n                if minSal[i] < comp[j][0] and comp[j][0] > sal and (comp[j][1] != 0):\n                    sal = comp[j][0]\n                    ind = j\n        if ind != -1:\n            comp[ind][1] -= 1\n            if ind not in visLis:\n                visLis.append(ind)\n            gotJob += 1\n            totSal += sal\n    print(gotJob, totSal, m - len(visLis))", "for _ in range(int(input())):\n    (n1, m1) = input().split()\n    (n1, m1) = (int(n1), int(m1))\n    minisal = []\n    minisal = list(map(int, input().split()))\n    givensal = []\n    joboff = []\n    st = [0] * m1\n    for j in range(m1):\n        (h1, h2) = input().split()\n        (h1, h2) = (int(h1), int(h2))\n        givensal.append(h1)\n        joboff.append(h2)\n    qualdarr = []\n    for u in range(n1):\n        o = list(input())\n        qualdarr.append(o)\n    ans1 = 0\n    ans2 = 0\n    for i in range(n1):\n        expect = int(minisal[i])\n        total1 = 0\n        status = 0\n        for j in range(m1):\n            if int(qualdarr[i][j]) == 1 and expect <= givensal[j] and (joboff[j] != 0):\n                total1 = max(givensal[j], total1)\n        if total1 != 0:\n            ans1 += 1\n            ans2 += total1\n            st[givensal.index(total1)] = 1\n            joboff[givensal.index(total1)] -= 1\n    ans3 = 0\n    for i in range(m1):\n        if st[i] == 0:\n            ans3 += 1\n    print(ans1, ans2, ans3)", "def getkey(item):\n    return item[0]\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    expected_salary = list(map(int, input().split()))\n    salary_offered = []\n    qual = []\n    i = 0\n    companies = [0] * m\n    salary_got = 0\n    job_got = 0\n    while i < m:\n        (offered_Salary, max_job) = map(int, input().split())\n        salary_offered.append([offered_Salary, max_job, i])\n        i += 1\n    i = 0\n    while i < n:\n        max = pos = 0\n        qual = input()\n        for j in range(m):\n            if qual[j] == '1' and salary_offered[j][0] >= expected_salary[i] and (salary_offered[j][1] > 0):\n                if max < salary_offered[j][0]:\n                    max = salary_offered[j][0]\n                    pos = j\n        if max > 0:\n            salary_offered[pos][1] -= 1\n            salary_got += max\n            companies[pos] = 1\n            job_got += 1\n        i += 1\n    print(job_got, salary_got, companies.count(0))", "t = int(input())\nwhile t:\n    t = t - 1\n    (n, m) = map(int, input().split())\n    minsal = list(map(int, input().split()))\n    m1 = m\n    n1 = n\n    offsal = []\n    maxjob = []\n    offmax = []\n    offmax = []\n    che = [0] * m\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        offsal.append(a)\n        maxjob.append(b)\n        offmax.append([a, b])\n    offmax.sort(reverse=True)\n    qual = []\n    while n1:\n        n1 -= 1\n        a = list(input())\n        qual.append(a)\n    total = 0\n    noof = 0\n    noofcomp = m\n    for i in range(n):\n        exp = int(minsal[i])\n        st = 0\n        total1 = 0\n        for j in range(m):\n            if int(qual[i][j]) == 1 and exp <= offsal[j]:\n                if maxjob[j] != 0:\n                    total1 = max(total1, offsal[j])\n        if total1 != 0:\n            noof += 1\n            che[offsal.index(total1)] = 1\n            maxjob[offsal.index(total1)] -= 1\n            total += total1\n    print(noof, total, che.count(0))", "import numpy as np\ntc = int(input())\nwhile tc:\n    (n, m) = map(int, input().split())\n    minSalary = list(map(int, input().split()))\n    offeredSalary = np.zeros(m)\n    maxJobOffers = np.zeros(m)\n    for i in range(m):\n        (offeredSalary[i], maxJobOffers[i]) = map(int, input().split())\n    qual = []\n    for j in range(n):\n        qual.append(list(input()))\n    a = np.argsort(offeredSalary)\n    a = a[::-1]\n    minSalary = np.array(minSalary)\n    ncand = 0\n    tsal = 0\n    com = [0] * m\n    for j in range(n):\n        for i in a:\n            if '1' == qual[j][i]:\n                if maxJobOffers[i] > 0 and offeredSalary[i] >= minSalary[j]:\n                    com[i] = 1\n                    tsal += offeredSalary[i]\n                    ncand += 1\n                    maxJobOffers[i] -= 1\n                    break\n    print(ncand, int(tsal), com.count(0))\n    tc -= 1", "def gcac(minsal, offsal, maxJoboff, qual, n, m):\n    total = []\n    count = [1] * n\n    flag = [0] * m\n    offers = []\n    cand = []\n    mjo = []\n    mjo[:] = maxJoboff\n    fl = 0\n    for j in range(n):\n        c = 0\n        sal = 0\n        comp = -1\n        flag = 0\n        for k in range(m):\n            if qual[j][k] == '1' and maxJoboff[k] > 0 and (minsal[j] <= offsal[k]):\n                offers.append([offsal[k], k])\n                c += 1\n                flag = 1\n                if sal < offsal[k]:\n                    sal = offsal[k]\n                    comp = k\n        if flag == 1:\n            cand.append([sal, comp])\n            maxJoboff[comp] -= 1\n            fl += 1\n    (total, nt) = (0, 0)\n    for r in range(fl):\n        if cand[r][0] != 0:\n            total += cand[r][0]\n    for u in range(m):\n        if mjo[u] == maxJoboff[u]:\n            nt += 1\n    if n >= 1 and m >= 1 and (m <= 1000) and (m <= 1000) and (t <= 10) and (t >= 1):\n        print(fl, total, nt)\n    return 0\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().strip().split(' '))\n    minsal = list(map(int, input().strip().split(' ')))\n    (offsal, maxJoboff, qual) = ([], [], [])\n    a = []\n    for k in range(m):\n        (o, mj) = map(int, input().strip().split(' '))\n        offsal.append(o)\n        maxJoboff.append(mj)\n    for j in range(n):\n        qual.append(input())\n    gcac(minsal, offsal, maxJoboff, qual, n, m)", "t = int(input())\nfor index in range(t):\n    inp = input().split()\n    n = int(inp[0])\n    m = int(inp[1])\n    minSalary = [int(x) for x in input().split()]\n    offeredSalary = []\n    maxJobOffers = []\n    qual = []\n    noOfJobs = 0\n    totalSalary = 0\n    noJobOfferCompanies = [1 for x in range(m)]\n    for index2 in range(m):\n        (sal, offers) = input().split()\n        (sal, offers) = (int(sal), int(offers))\n        offeredSalary.append(sal)\n        maxJobOffers.append(offers)\n    for index2 in range(n):\n        arr = [int(x) for x in list(input())]\n        qual.append(arr)\n    for i in range(n):\n        for j in range(m):\n            qual[i][j] = qual[i][j] * offeredSalary[j]\n    for i in range(n):\n        maxSal = max(qual[i])\n        maxSalCompany = qual[i].index(maxSal)\n        if maxSal >= minSalary[i] and maxJobOffers[maxSalCompany] > 0:\n            noOfJobs += 1\n            noJobOfferCompanies[maxSalCompany] = 0\n            totalSalary += maxSal\n            maxJobOffers[maxSalCompany] -= 1\n            if maxJobOffers[maxSalCompany] == 0:\n                for index2 in range(n):\n                    qual[index2][maxSalCompany] = 0\n    print(noOfJobs, totalSalary, sum(noJobOfferCompanies))", "def main():\n    tests = int(input())\n    for t in range(tests):\n        (n, m) = [int(x) for x in input().split()]\n        minSal = [int(x) for x in input().split()]\n        offeredSal = []\n        jobCount = []\n        companyWorth = [0] * m\n        for i in range(m):\n            (a, b) = [int(x) for x in input().split()]\n            offeredSal.append(a)\n            jobCount.append(b)\n        candPlaced = 0\n        totalSalary = 0\n        compNoCand = m\n        for cand in range(n):\n            jobOffered = list(input())\n            maxOffer = 0\n            maxComp = -1\n            for comp in range(m):\n                if jobOffered[comp] == '1' and offeredSal[comp] > maxOffer and (minSal[cand] <= offeredSal[comp]) and (jobCount[comp] > 0):\n                    maxOffer = offeredSal[comp]\n                    maxComp = comp\n            if maxComp != -1:\n                jobCount[maxComp] -= 1\n                totalSalary += maxOffer\n                candPlaced += 1\n                compNoCand -= 1 if companyWorth[maxComp] == 0 else 0\n                companyWorth[maxComp] = 1\n        print(candPlaced, totalSalary, compNoCand)\nmain()", "import math\nimport operator\nfor ii in range(int(input())):\n    sal = 0\n    count = 0\n    comc = 0\n    n = [int(x) for x in input().split()]\n    minsal = [int(x) for x in input().split()]\n    com = []\n    for i in range(n[1]):\n        a = [int(x) for x in input().split()]\n        a.append(i)\n        a.append(a[1])\n        com.append(a)\n    com.sort(key=operator.itemgetter(0), reverse=True)\n    sel = []\n    for i in range(n[0]):\n        sel.append(input())\n    for i in range(n[0]):\n        for j in range(n[1]):\n            if com[j][1] > 0 and com[j][0] >= minsal[i] and (sel[i][com[j][2]] == '1'):\n                com[j][1] = com[j][1] - 1\n                count = count + 1\n                sal = sal + com[j][0]\n                break\n            elif minsal[i] > com[j][0]:\n                break\n    for i in range(n[1]):\n        if com[i][3] == com[i][1]:\n            comc = comc + 1\n    print(count, sal, comc)", "test = int(input())\nfor n in range(test):\n    (N, M) = input().split()\n    minS = list(map(int, input().split()))\n    (info, qual) = ([], [])\n    for j in range(int(M)):\n        tab = list(map(int, input().split()))\n        info.append(tab)\n    for k in range(int(N)):\n        qualval = input()\n        qual.append(qualval)\n    (numcand, total, entrp) = (0, 0, 0)\n    while entrp < int(M):\n        nbrCand = 0\n        big = max(info)\n        if big[0] > 0:\n            bigIndex = info.index(big)\n            for i in range(int(N)):\n                if minS[i] != -1 and qual[i][bigIndex] == '1' and (big[1] > 0) and (minS[i] <= big[0]):\n                    nbrCand = nbrCand + 1\n                    numcand = numcand + 1\n                    minS[i] = -1\n                    big[1] = big[1] - 1\n                if big[1] == 0:\n                    break\n            total = total + nbrCand * big[0]\n            if nbrCand != 0:\n                info[bigIndex] = [-1, -1]\n            else:\n                info[bigIndex] = [-2, -2]\n        else:\n            break\n        if numcand == int(N):\n            break\n        entrp = entrp + 1\n    Emptyentrp = info.count([-2, -2])\n    print(numcand, total, Emptyentrp)", "salaire_min = []\nmax_job = []\nsalaire_fixe = []\nqual = []\n\ndef fonction(n, m):\n    candidats_retenus = 0\n    montant_total = 0\n    entse_zero_emp = set(range(m))\n    entse_poss = []\n    deja_recru = [0] * m\n    for i in range(n):\n        entse_poss.append([])\n    for i in range(n):\n        for j in range(m):\n            if qual[i][j] == '1':\n                entse_poss[i].append(j)\n    for student in range(n):\n        max_sal = salaire_min[student]\n        choix = -1\n        for entse in entse_poss[student]:\n            if deja_recru[entse] < max_job[entse] and salaire_fixe[entse] >= max_sal:\n                max_sal = salaire_fixe[entse]\n                choix = entse\n        if choix >= 0:\n            deja_recru[choix] += 1\n            candidats_retenus += 1\n            montant_total += max_sal\n            entse_zero_emp -= {choix}\n    return (candidats_retenus, montant_total, len(entse_zero_emp))\nT = int(input())\nfor a in range(T):\n    (N, M) = (int(i) for i in input().split())\n    salaire_min = [int(i) for i in input().split()]\n    max_job = []\n    salaire_fixe = []\n    for j in range(M):\n        (x, y) = (int(i) for i in input().split())\n        salaire_fixe.append(x)\n        max_job.append(y)\n    qual = []\n    for i in range(N):\n        qual.append(input())\n    (a, b, c) = fonction(N, M)\n    print(a, b, c)", "t = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    minSal = list(map(int, input().split()))\n    maxSal = []\n    jobAvail = []\n    finaljob = []\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        maxSal.append([a, b, i])\n        finaljob.append(0)\n    availabejobs = sum(jobAvail)\n    sal = 0\n    maxSal.sort(key=lambda x: x[0], reverse=True)\n    alloted = [[] for i in range(m)]\n    for i in range(n):\n        sel = input()\n        for (ind, c) in enumerate(sel):\n            if c == '1':\n                alloted[ind].append(True)\n            else:\n                alloted[ind].append(False)\n    sal = 0\n    stplaced = 0\n    for i in range(n):\n        for (ind, tp) in enumerate(maxSal):\n            if alloted[tp[2]][i] and tp[0] >= minSal[i] and (tp[1] > 0):\n                sal += tp[0]\n                stplaced += 1\n                maxSal[ind][1] -= 1\n                if finaljob[ind] == 0:\n                    finaljob[ind] = 1\n                break\n    print(stplaced, sal, m - sum(finaljob))\n    t -= 1", "salaire_min = []\nmax_job = []\nsalaire_fixe = []\nqual = []\n\ndef fonction(n, m):\n    candidats_retenus = 0\n    montant_total = 0\n    entse_zero_emp = set(range(m))\n    entse_poss = []\n    deja_recru = [0] * m\n    for i in range(n):\n        entse_poss.append([])\n    for i in range(n):\n        for j in range(m):\n            if qual[i][j] == '1':\n                entse_poss[i].append(j)\n    for student in range(n):\n        max_sal = salaire_min[student]\n        choix = -1\n        for entse in entse_poss[student]:\n            if deja_recru[entse] < max_job[entse] and salaire_fixe[entse] >= max_sal:\n                max_sal = salaire_fixe[entse]\n                choix = entse\n        if choix >= 0:\n            deja_recru[choix] += 1\n            candidats_retenus += 1\n            montant_total += max_sal\n            entse_zero_emp -= {choix}\n    return (candidats_retenus, montant_total, len(entse_zero_emp))\nT = int(input())\nfor a in range(T):\n    (N, M) = (int(i) for i in input().split())\n    salaire_min = [int(i) for i in input().split()]\n    max_job = []\n    salaire_fixe = []\n    for j in range(M):\n        (x, y) = (int(i) for i in input().split())\n        salaire_fixe.append(x)\n        max_job.append(y)\n    qual = []\n    for i in range(N):\n        qual.append(input())\n    (a, b, c) = fonction(N, M)\n    print(a, b, c)", "t = int(input())\nfor z in range(t):\n    (n, m) = map(int, input().split())\n    mnsl = list(map(int, input().split()))\n    ar1 = []\n    ar2 = []\n    for i in range(m):\n        (ofs, mxjb) = map(int, input().split())\n        ar1.append(ofs)\n        ar2.append(mxjb)\n    ar3 = []\n    for i in ar2:\n        ar3.append(i)\n    tt = 0\n    nt = m\n    jb = 0\n    for i in range(n):\n        opt = list(input())\n        sal = mnsl[i]\n        k = -1\n        ln = len(opt)\n        for j in range(ln):\n            if opt[j] == '1':\n                if ar1[j] > sal and ar2[j] > 0:\n                    sal = ar1[j]\n                    k = j\n        if k != -1:\n            tt += sal\n            jb += 1\n            ar2[k] -= 1\n    for i in range(m):\n        if ar2[i] != ar3[i]:\n            nt -= 1\n    print(jb, tt, nt)", "t = int(input())\nfor i in range(t):\n    minsal = list()\n    salary = list()\n    jobs = list()\n    qualify = list()\n    count1 = list()\n    salary1 = []\n    count = countstud = max = sum = x = 0\n    k = input().split()\n    n = int(k[0])\n    m = int(k[1])\n    minsal = list(map(int, input().split()))\n    for j in range(0, m):\n        val = input().split()\n        salary.append(int(val[0]))\n        jobs.append(int(val[1]))\n    for j in range(0, m):\n        count1.append(0)\n    for j in range(n):\n        qualify.append(input())\n    for j in range(0, n):\n        max = flag = c = 0\n        for k in range(0, m):\n            flag = 0\n            if qualify[j][k] == '1' and minsal[j] <= salary[k] and (count1[k] < jobs[k]):\n                if max < salary[k]:\n                    pos = k\n                    max = salary[k]\n                    c = 1\n        if c == 1:\n            sum = sum + max\n            countstud = countstud + 1\n            count1[pos] = count1[pos] + 1\n    for k in range(m):\n        if count1[k] == 0:\n            x = x + 1\n    print(str(countstud) + ' ' + str(sum) + ' ' + str(x))", "t = int(input())\nfor i in range(t):\n    minsal = list()\n    salary = list()\n    jobs = list()\n    qualify = list()\n    count1 = list()\n    salary1 = []\n    count = countstud = max = sum = x = 0\n    k = input().split()\n    n = int(k[0])\n    m = int(k[1])\n    minsal = list(map(int, input().split()))\n    for j in range(0, m):\n        val = input().split()\n        salary.append(int(val[0]))\n        jobs.append(int(val[1]))\n    for j in range(0, m):\n        count1.append(0)\n    for j in range(n):\n        qualify.append(input())\n    for j in range(0, n):\n        max = flag = c = 0\n        for k in range(0, m):\n            flag = 0\n            if qualify[j][k] == '1' and minsal[j] <= salary[k] and (count1[k] < jobs[k]):\n                if max < salary[k]:\n                    pos = k\n                    max = salary[k]\n                    c = 1\n        if c == 1:\n            sum = sum + max\n            countstud = countstud + 1\n            count1[pos] = count1[pos] + 1\n    for k in range(m):\n        if count1[k] == 0:\n            x = x + 1\n    print(str(countstud) + ' ' + str(sum) + ' ' + str(x))", "t = int(input())\nfor i in range(t):\n    minsal = list()\n    salary = list()\n    jobs = list()\n    qualify = list()\n    count1 = list()\n    salary1 = []\n    count = countstud = max = sum = x = 0\n    k = input().split()\n    n = int(k[0])\n    m = int(k[1])\n    minsal = list(map(int, input().split()))\n    for j in range(0, m):\n        val = input().split()\n        salary.append(int(val[0]))\n        jobs.append(int(val[1]))\n    for j in range(0, m):\n        count1.append(0)\n    for j in range(n):\n        qualify.append(input())\n    for j in range(0, n):\n        max = flag = c = 0\n        for k in range(0, m):\n            flag = 0\n            if qualify[j][k] == '1' and minsal[j] <= salary[k] and (count1[k] < jobs[k]):\n                if max < salary[k]:\n                    pos = k\n                    max = salary[k]\n                    c = 1\n        if c == 1:\n            sum = sum + max\n            countstud = countstud + 1\n            count1[pos] = count1[pos] + 1\n    for k in range(m):\n        if count1[k] == 0:\n            x = x + 1\n    print(str(countstud) + ' ' + str(sum) + ' ' + str(x))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    total = 0\n    os = list()\n    limit = list()\n    h = list()\n    minsal = list(map(int, input().split()))\n    for j in range(m):\n        (o, l) = map(int, input().split())\n        os.append(o)\n        limit.append(l)\n    qual = [[0 for x in range(m)] for y in range(n)]\n    for j in range(n):\n        qual[j] = input()\n    for j in range(m):\n        h.append(0)\n    for j in range(n):\n        big = 0\n        c = -1\n        for k in range(m):\n            if qual[j][k] == '1':\n                if h[k] < limit[k]:\n                    if minsal[j] <= os[k]:\n                        if big < os[k]:\n                            big = os[k]\n                            c = k\n        if c != -1:\n            total = total + big\n            h[c] = h[c] + 1\n    print(sum(h), end=' ')\n    print(total, end=' ')\n    print(h.count(0))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    total = 0\n    os = list()\n    limit = list()\n    h = list()\n    minsal = list(map(int, input().split()))\n    for j in range(m):\n        (o, l) = map(int, input().split())\n        os.append(o)\n        limit.append(l)\n    qual = [[0 for x in range(m)] for y in range(n)]\n    for j in range(n):\n        qual[j] = input()\n    for j in range(m):\n        h.append(0)\n    for j in range(n):\n        big = 0\n        c = -1\n        for k in range(m):\n            if qual[j][k] == '1':\n                if h[k] < limit[k]:\n                    if minsal[j] <= os[k]:\n                        if big < os[k]:\n                            big = os[k]\n                            c = k\n        if c != -1:\n            total = total + big\n            h[c] = h[c] + 1\n    print(sum(h), end=' ')\n    print(total, end=' ')\n    print(h.count(0))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    total = 0\n    os = list()\n    limit = list()\n    h = list()\n    minsal = list(map(int, input().split()))\n    for j in range(m):\n        (o, l) = map(int, input().split())\n        os.append(o)\n        limit.append(l)\n    qual = [[0 for x in range(m)] for y in range(n)]\n    for j in range(n):\n        qual[j] = input()\n    for j in range(m):\n        h.append(0)\n    for j in range(n):\n        big = 0\n        c = -1\n        for k in range(m):\n            if qual[j][k] == '1':\n                if h[k] < limit[k]:\n                    if minsal[j] <= os[k]:\n                        if big < os[k]:\n                            big = os[k]\n                            c = k\n        if c != -1:\n            total = total + big\n            h[c] = h[c] + 1\n    print(sum(h), end=' ')\n    print(total, end=' ')\n    print(h.count(0))", "for test in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    stud = list(map(int, input().split()))\n    comp = [list(map(int, input().split())) for i in range(m)]\n    selection = [input() for i in range(n)]\n    stud = list(zip(stud, selection))\n    for i in range(m):\n        comp[i].append(i)\n    comp.sort(reverse=True, key=lambda s: s[0])\n    placed = int()\n    tot_sal = int()\n    comp_y = []\n    for i in stud:\n        if set(i[1]) == {0}:\n            continue\n        else:\n            for j in comp:\n                if i[1][j[2]] == '1' and j[0] >= i[0]:\n                    placed += 1\n                    tot_sal += j[0]\n                    j[1] -= 1\n                    if j[1] == 0:\n                        comp.remove(j)\n                    comp_y.append(j[0])\n                    break\n    print(placed, tot_sal, m - len(set(comp_y)))", "for test in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    stud = list(map(int, input().split()))\n    comp = [list(map(int, input().split())) for i in range(m)]\n    selection = [input() for i in range(n)]\n    stud = list(zip(stud, selection))\n    for i in range(m):\n        comp[i].append(i)\n    comp.sort(reverse=True, key=lambda s: s[0])\n    placed = int()\n    tot_sal = int()\n    comp_y = []\n    for i in stud:\n        if set(i[1]) == {0}:\n            continue\n        else:\n            for j in comp:\n                if i[1][j[2]] == '1' and j[0] >= i[0]:\n                    placed += 1\n                    tot_sal += j[0]\n                    j[1] -= 1\n                    if j[1] == 0:\n                        comp.remove(j)\n                    comp_y.append(j[0])\n                    break\n    print(placed, tot_sal, m - len(set(comp_y)))", "T = int(input())\nfor i in range(T):\n    (N, M) = map(int, input().split())\n    minSalary = [int(x) for x in input().split()]\n    offeredSalary = [1 for k in range(M)]\n    maxJobOffers = [1 for k in range(M)]\n    for j in range(M):\n        (offeredSalary[j], maxJobOffers[j]) = map(int, input().split())\n    qual = [[0 for k in range(M)] for j in range(N)]\n    for j in range(N):\n        x = input()\n        qual[j] = list(x)\n        qual[j] = [int(y) for y in qual[j]]\n    (c, sal, comp) = (0, 0, 0)\n    m = [0 for k in range(M)]\n    last = [0 for k in range(N)]\n    for j in range(N):\n        for k in range(M):\n            if qual[j][k] == 1 and m[k] < maxJobOffers[k] and (offeredSalary[k] >= minSalary[j]):\n                if last[j] < offeredSalary[k]:\n                    last[j] = offeredSalary[k]\n                    a = k\n        if last[j] != 0:\n            c += 1\n            m[a] += 1\n        sal += last[j]\n    comp = m.count(0)\n    print(c, sal, comp)", "for t in range(int(input())):\n    (N, M) = map(int, input().split())\n    n = list(map(int, input().split()))\n    m = [[i for i in list(map(int, input().split()))] for j in range(M)]\n    qual = []\n    for a in range(N):\n        qual.append(input())\n    s = [0] * M\n    c = 0\n    sum = 0\n    for d in range(N):\n        ex = n[d]\n        x = 0\n        w = qual[d]\n        for f in range(M):\n            if w[f] == '1':\n                if x <= m[f][0] and m[f][1] > 0:\n                    x = m[f][0]\n        for h in range(M):\n            if x == m[h][0] and x >= ex:\n                sum = sum + x\n                s[h] = s[h] + 1\n                m[h][1] = m[h][1] - 1\n                c = c + 1\n    print(c, sum, s.count(0))", "def ni():\n    s = input()\n    while len(s) == 0:\n        s = input()\n    try:\n        return int(s)\n    except:\n        return 0\n\ndef nia():\n    s = input()\n    while len(s) == 0:\n        s = input()\n    s = s.split()\n    iVal = []\n    for i in range(len(s)):\n        iVal.append(int(s[i]))\n    return iVal\n\nclass HiringMatch:\n\n    def __init__(self):\n        self.minSalary = []\n        self.offeredSalary = []\n        self.maxJobs = []\n        self.offers = []\n        self.N = 0\n        self.M = 0\n\n    def test1(self):\n        self.minSalary = [5000, 10000, 3000, 20, 100]\n        self.offeredSalary = [10000, 800, 600, 10, 1000, 2000]\n        self.maxJobs = [2, 2, 1, 8, 9, 10]\n        self.offers = ['111111', '100000', '000000', '000001', '100100']\n        self.N = 5\n        self.M = 6\n        self.solve()\n\n    def solve(self):\n        accepted = [0] * self.M\n        totalS = 0\n        numAccepted = 0\n        for i in range(self.N):\n            bestoffer = -1\n            for j in range(self.M):\n                if self.offers[i][j] == '0':\n                    continue\n                elif self.offeredSalary[j] < self.minSalary[i]:\n                    continue\n                elif self.maxJobs[j] == accepted[j]:\n                    continue\n                if bestoffer < 0:\n                    bestoffer = j\n                elif self.offeredSalary[j] > self.offeredSalary[bestoffer]:\n                    bestoffer = j\n            if bestoffer >= 0:\n                numAccepted += 1\n                totalS += self.offeredSalary[bestoffer]\n                accepted[bestoffer] += 1\n        noHire = 0\n        for i in range(self.M):\n            if accepted[i] == 0:\n                noHire += 1\n        print('{0} {1} {2}'.format(numAccepted, totalS, noHire))\n\n    def read(self):\n        NM = nia()\n        self.N = NM[0]\n        self.M = NM[1]\n        self.minSalary = nia()\n        for i in range(self.M):\n            s = nia()\n            self.offeredSalary.append(s[0])\n            self.maxJobs.append(s[1])\n        self.offers = [''] * self.N\n        for i in range(self.N):\n            self.offers[i] = input()\n\ndef main():\n    T = ni()\n    for t in range(T):\n        hiring = HiringMatch()\n        hiring.read()\n        hiring.solve()\nmain()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    minSalary = list(map(int, input().split()))\n    company = []\n    cama = []\n    for i in range(m):\n        a = list(map(int, input().split()))\n        company.append(a)\n        cama.append(tuple(a))\n    qual = []\n    can = 0\n    sal = 0\n    com = m\n    for i in range(n):\n        inp = input()\n        ma = 0\n        f1 = 0\n        k = 100000\n        for j in range(m):\n            if inp[j] == '1' and minSalary[i] <= company[j][0] and (company[j][1] > 0):\n                f1 = 1\n                if ma < company[j][0]:\n                    k = j\n                    ma = company[j][0]\n        if k != 100000:\n            company[k][1] -= 1\n        sal += ma\n        if f1:\n            can += 1\n    for i in range(m):\n        if cama[i][1] != company[i][1]:\n            com -= 1\n    print(can, sal, com)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    minSalary = []\n    offeredSalary = [0] * m\n    maxJobOffers = [0] * m\n    totalSalary = 0\n    countStudent = 0\n    countCompany = 0\n    minSalary = list(map(int, input().split()))\n    for i in range(0, m):\n        (offeredSalary[i], maxJobOffers[i]) = map(int, input().split())\n    companyRecruit = [0] * m\n    for i in range(n):\n        job = input()\n        tempPackage = 0\n        tempCompany = -1\n        for j in range(0, m):\n            if job[j] == '1' and offeredSalary[j] >= minSalary[i] and (maxJobOffers[j] > 0) and (tempPackage < offeredSalary[j]):\n                tempPackage = offeredSalary[j]\n                tempCompany = j\n        if tempCompany != -1:\n            if companyRecruit[tempCompany] == 0:\n                countCompany += 1\n            companyRecruit[tempCompany] = 1\n            maxJobOffers[tempCompany] -= 1\n            countStudent += 1\n            totalSalary += offeredSalary[tempCompany]\n    print(countStudent, ' ', totalSalary, ' ', m - countCompany)", "n = int(input())\nfor d in range(0, n, 1):\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    matrix = []\n    for i in range(0, a[1], 1):\n        p = list(map(int, input().split()))\n        matrix.append(p)\n    y = []\n    for i in range(0, a[1], 1):\n        y.append(matrix[i][1])\n    comp = []\n    for i in range(0, a[0], 1):\n        l = input()\n        comp.append(l)\n    flag = 0\n    count = 0\n    cmp = 0\n    for i in range(0, a[0], 1):\n        t = 0\n        for j in range(0, a[1], 1):\n            if comp[i][j] == '1':\n                if matrix[j][0] > b[i] and matrix[j][1] > 0:\n                    if matrix[j][0] > t and t == 0:\n                        t = matrix[j][0]\n                        x = j\n                        flag = flag + 1\n                        count = count + t\n                        matrix[j][1] = matrix[j][1] - 1\n                    elif matrix[j][0] > t and t != 0:\n                        count = count - t + matrix[j][0]\n                        matrix[x][1] = matrix[x][1] + 1\n                        matrix[j][1] = matrix[j][1] - 1\n                        x = j\n                        t = matrix[j][0]\n    w = 0\n    for i in range(0, a[1], 1):\n        if y[i] > matrix[i][1]:\n            w = w + 1\n    print(flag, count, a[1] - w)", "t = int(input())\nfor q in range(t):\n    (n, m) = map(int, input().split())\n    li = list(map(int, input().split()))\n    li2 = []\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        lix = []\n        lix.append(a)\n        lix.append(b)\n        li2.append(lix)\n    lif = []\n    for i in range(n):\n        z = input()\n        z = list(z)\n        z = list(map(int, z))\n        lif.append(z)\n    lis = [0] * n\n    lic = [0] * m\n    ans = 0\n    for i in range(0, n):\n        ma = 0\n        pos = 0\n        pp = 0\n        for j in range(0, m):\n            if lif[i][j] == 1:\n                if li2[j][0] > ma and li2[j][0] >= li[i] and (li2[j][1] > 0):\n                    ma = li2[j][0]\n        for k in range(0, m):\n            if li2[k][0] == ma and li2[k][0] >= li[i] and (li2[k][1] > 0):\n                li2[k][1] = li2[k][1] - 1\n                ans = ans + li2[k][0]\n                lis[i] = 1\n                lic[k] = 1\n                pos = k\n                break\n    print(lis.count(1), ans, lic.count(0))", "t = int(input())\n\ndef key_offered_salary(comp):\n    return comp[1]\nfor _ in range(0, t):\n    (n, m) = [int(i) for i in input().split(' ')]\n    min_salary_arr = [int(i) for i in input().split(' ')]\n    companies = [None] * m\n    for comp_idx in range(0, m):\n        (offered_salary, max_job_offers) = [int(i) for i in input().split(' ')]\n        companies[comp_idx] = (comp_idx, offered_salary, max_job_offers, [])\n    companies = sorted(companies, reverse=True, key=key_offered_salary)\n    comp_lookup = [None] * len(companies)\n    for (idx, comp) in enumerate(companies):\n        comp_lookup[idx] = comp[0]\n    jobs_obtained = 0\n    total_salary = 0\n    total_empty_companies = 0\n    for cand_idx in range(0, n):\n        quals = input()\n        quals = [quals[c] for c in comp_lookup]\n        for (comp_idx, qual) in enumerate(quals):\n            if qual == '1' and companies[comp_idx][1] > min_salary_arr[cand_idx] and (len(companies[comp_idx][3]) < companies[comp_idx][2]):\n                companies[comp_idx][3].append(cand_idx)\n                jobs_obtained += 1\n                total_salary += companies[comp_idx][1]\n                break\n    for comp in companies:\n        if len(comp[3]) == 0:\n            total_empty_companies += 1\n    print('{} {} {}'.format(jobs_obtained, total_salary, total_empty_companies))", "t = int(input())\nfor test in range(t):\n    (n, m) = map(int, input().split())\n    minSalary = list(map(int, input().split()))\n    offeredSalary = []\n    maxJobOffers = []\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        offeredSalary.append(x)\n        maxJobOffers.append(y)\n    qual = []\n    for i in range(n):\n        qual.append(input())\n    numJobs = 0\n    salary = 0\n    gotJob = [0] * m\n    for i in range(n):\n        maxSal = 0\n        company = -1\n        for j in range(m):\n            if qual[i][j] == '1' and maxJobOffers[j] > 0:\n                if offeredSalary[j] >= minSalary[i]:\n                    if maxSal < offeredSalary[j]:\n                        maxSal = offeredSalary[j]\n                        company = j\n        if maxSal != 0:\n            gotJob[company] = 1\n            numJobs += 1\n            maxJobOffers[company] -= 1\n            salary += maxSal\n    print(numJobs, salary, m - sum(gotJob))", "import random\ndebug = False\ntest = False\nif test is True:\n    T = 10\nelse:\n    T = int(input())\nfor _ in range(T):\n    if test is True:\n        print('Generating...')\n        N = 1000\n        M = 1000\n        minSalary = []\n        offeredSalary = set()\n        qual = []\n        maxJobOffers = []\n        for _ in range(N):\n            minSalary.append(random.randrange(1000000000))\n            tmp = ''\n            for _ in range(M):\n                tmp += str(random.randrange(2))\n            qual.append(tmp)\n        for _ in range(M):\n            maxJobOffers.append(1 + random.randrange(1000000))\n        while len(offeredSalary) < M:\n            offeredSalary.add(1 + random.randrange(1000000000))\n        offeredSalary = list(offeredSalary)\n        print('...done')\n    else:\n        s = input()\n        (N, M) = [int(c) for c in s.strip().split()]\n        s = input()\n        minSalary = [int(c) for c in s.strip().split()]\n        offeredSalary = []\n        maxJobOffers = []\n        for _ in range(M):\n            s = input()\n            tmp = [int(c) for c in s.strip().split()]\n            offeredSalary.append(tmp[0])\n            maxJobOffers.append(tmp[1])\n        qual = []\n        for _ in range(N):\n            s = input()\n            a = s.strip()\n            qual.append(a)\n    if debug is True:\n        print(N, M)\n        print(minSalary)\n        print(offeredSalary)\n        print(maxJobOffers)\n        print(qual)\n    jobFound = 0\n    totalSalary = 0\n    companyFound = [0] * M\n    for n in range(N):\n        jobOffer = qual[n]\n        maxSal = -1\n        comp = -1\n        for (c, job) in enumerate(jobOffer):\n            if job == '1' and offeredSalary[c] >= minSalary[n] and (maxJobOffers[c] > 0):\n                if offeredSalary[c] > maxSal:\n                    maxSal = offeredSalary[c]\n                    comp = c\n        if comp == -1:\n            pass\n        else:\n            maxJobOffers[comp] -= 1\n            companyFound[comp] = 1\n            totalSalary += offeredSalary[comp]\n            jobFound += 1\n    print(jobFound, totalSalary, M - sum(companyFound))", "def solve(N, M, minSalary, offeredSalary, maxJobOffers, qual):\n    potentialCompaniesForStudents = []\n    for i in range(N):\n        companiesForStudent = []\n        potentialCompaniesForStudents.append(companiesForStudent)\n        for j in range(M):\n            if qual[i][j] == '1' and offeredSalary[j] >= minSalary[i]:\n                companiesForStudent.append(j)\n    count_of_candidates_that_get_the_job = 0\n    total_amount_of_salaries = 0\n    count_of_companies_that_didnt_hire = 0\n    availableJobOffers = maxJobOffers[:]\n    for i in range(N):\n        companiesForStudent = potentialCompaniesForStudents[i]\n        companiesForStudent.sort(key=lambda idx: offeredSalary[idx])\n        for company_index in reversed(companiesForStudent):\n            if availableJobOffers[company_index] > 0:\n                count_of_candidates_that_get_the_job += 1\n                total_amount_of_salaries += offeredSalary[company_index]\n                availableJobOffers[company_index] -= 1\n                break\n    for pair in zip(maxJobOffers, availableJobOffers):\n        if pair[0] == pair[1]:\n            count_of_companies_that_didnt_hire += 1\n    return (count_of_candidates_that_get_the_job, total_amount_of_salaries, count_of_companies_that_didnt_hire)\nT = int(input())\nfor t in range(T):\n    (N, M) = (int(i) for i in input().split())\n    minSalary = [int(i) for i in input().split()]\n    offeredSalary = []\n    maxJobOffers = []\n    for m in range(M):\n        (s, j) = (int(i) for i in input().split())\n        offeredSalary.append(s)\n        maxJobOffers.append(j)\n    qual = []\n    for n in range(N):\n        qual.append(input())\n    (count_of_candidates_that_get_the_job, total_amount_of_salaries, count_of_companies_that_didnt_hire) = solve(N, M, minSalary, offeredSalary, maxJobOffers, qual)\n    print(count_of_candidates_that_get_the_job, total_amount_of_salaries, count_of_companies_that_didnt_hire)", "for _ in range(int(input())):\n    (n, m) = [int(e) for e in input().split(' ')]\n    a = [int(e) for e in input().split(' ')]\n    b = []\n    c = []\n    d = []\n    for i in range(m):\n        (x, y) = [int(e) for e in input().split(' ')]\n        b.append(x)\n        c.append(y)\n    g = c[:]\n    for i in range(n):\n        x = [int(e) for e in input()]\n        d.append(x)\n    ans = 0\n    ans1 = 0\n    ans2 = 0\n    for i in range(n):\n        z = -1\n        w = -1\n        for j in range(m):\n            if d[i][j] == 1 and b[j] > a[i] and (b[j] > z) and (c[j] > 0):\n                z = b[j]\n                w = j\n        if w != -1:\n            c[w] -= 1\n            ans += 1\n        if z != -1:\n            ans1 += z\n    for i in range(m):\n        if c[i] == g[i]:\n            ans2 += 1\n    print(ans, ans1, ans2)", "for case in range(int(input())):\n    ans = [0, 0]\n    (n, m) = tuple(map(int, input().split(' ')))\n    minSalary = list(map(int, input().split(' ')))\n    (offeredSalary, maxJobOffers) = ([], [])\n    na = set([x for x in range(m)])\n    for _ in range(m):\n        (q, w) = tuple(map(int, input().split(' ')))\n        offeredSalary.append(q)\n        maxJobOffers.append(w)\n    qual = []\n    for _ in range(n):\n        qual.append(list(input()))\n    for i in range(n):\n        (high, c) = (-1, -1)\n        for j in range(m):\n            if qual[i][j] == '1' and maxJobOffers[j] and (offeredSalary[j] >= minSalary[i]):\n                if offeredSalary[j] > high:\n                    high = offeredSalary[j]\n                    c = j\n        if c > -1:\n            ans[0] += 1\n            ans[1] += offeredSalary[c]\n            na.discard(c)\n            maxJobOffers[c] -= 1\n    print(ans[0], ans[1], len(na))", "T = int(input())\nfor i in range(0, T):\n    first = input()\n    first = first.split()\n    N = int(first[0])\n    M = int(first[1])\n    minSalary = input()\n    minSalary = minSalary.split()\n    offeredSalary = []\n    maxJobOffers = []\n    for j in range(0, M):\n        second = input()\n        second = second.split()\n        offeredSalary.append(int(second[0]))\n        maxJobOffers.append(int(second[1]))\n    maxJobOffers2 = []\n    maxJobOffers2 = maxJobOffers[:]\n    qual = []\n    for j in range(0, N):\n        third = input()\n        qual.append([])\n        qual[j] = third\n    total_cand = N\n    total_sal = 0\n    total_comp = 0\n    for j in range(0, N):\n        flag = -1\n        temp_salary = 0\n        for k in range(0, M):\n            if qual[j][k] == '1' and offeredSalary[k] > int(minSalary[j]) and (maxJobOffers[k] > 0) and (offeredSalary[k] > temp_salary):\n                flag = k\n                temp_salary = offeredSalary[k]\n        if flag == -1:\n            total_cand -= 1\n        else:\n            maxJobOffers[flag] -= 1\n            total_sal += temp_salary\n    for j in range(0, M):\n        if maxJobOffers2[j] == maxJobOffers[j]:\n            total_comp += 1\n    print(total_cand, ' ', total_sal, ' ', total_comp)", "t = int(input())\nfor i in range(0, t):\n    (n, m) = map(int, input().split())\n    min_s = list(map(int, input().split()))\n    off_s = []\n    max_j = []\n    for j in range(0, m):\n        (f, g) = map(int, input().split())\n        off_s.append(f)\n        max_j.append(g)\n    qual = []\n    for j in range(0, n):\n        qual.append(list(map(int, input())))\n    jobs = [0] * m\n    total_s = 0\n    for j in range(0, n):\n        flag_s = 0\n        flag_i = -1\n        for k in range(0, m):\n            if qual[j][k] == 1 and min_s[j] <= off_s[k] and (jobs[k] < max_j[k]) and (flag_s < off_s[k]):\n                flag_s = off_s[k]\n                flag_i = k\n        if flag_i != -1:\n            jobs[flag_i] += 1\n            total_s += flag_s\n    print(sum(jobs), total_s, jobs.count(0))", "t = int(input())\nsaljob = []\nqual = []\njob = []\nbooloffer = []\nwhile t > 0:\n    mn = [int(x) for x in input().split()]\n    minSalary = [int(x) for x in input().split()]\n    for i in range(0, mn[1]):\n        temp = [int(x) for x in input().split()]\n        saljob.insert(len(saljob), temp)\n    for i in range(0, mn[0]):\n        qual.insert(len(qual), input())\n    for i in range(0, mn[0]):\n        job.insert(len(job), -1)\n    for i in range(0, mn[1]):\n        booloffer.insert(len(booloffer), False)\n    for i in range(0, mn[0]):\n        index = -1\n        maxsal = minSalary[i]\n        for j in range(0, mn[1]):\n            if qual[i][j] == '1' and saljob[j][0] >= maxsal and (saljob[j][1] > 0):\n                index = j\n                maxsal = saljob[j][0]\n        if index > -1:\n            saljob[index][1] = saljob[index][1] - 1\n            booloffer[index] = True\n            job[i] = index\n    salary = 0\n    count = 0\n    for i in range(0, mn[0]):\n        if job[i] >= 0:\n            salary = salary + saljob[job[i]][0]\n            count = count + 1\n    nooffer = 0\n    for i in range(0, mn[1]):\n        if booloffer[i] == False:\n            nooffer = nooffer + 1\n    print(count, end=' ')\n    print(salary, end=' ')\n    print(nooffer)\n    saljob.clear()\n    booloffer.clear()\n    qual.clear()\n    job.clear()\n    t = t - 1", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    count = 0\n    total = 0\n    offer = 0\n    offeredSalary = []\n    maxJobOffer = []\n    new = []\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    salary = list(map(int, input().split()))\n    for i in range(m):\n        (x, y) = input().split()\n        (x, y) = (int(x), int(y))\n        offeredSalary.append(x)\n        maxJobOffer.append(y)\n        new.append(y)\n    for i in range(n):\n        result = 0\n        a = list(input())\n        for j in range(len(a)):\n            if a[j] == '1':\n                if salary[i] <= offeredSalary[j] and maxJobOffer[j] > 0:\n                    result = max(result, offeredSalary[j])\n        for j in range(m):\n            if offeredSalary[j] == result:\n                total = total + result\n                maxJobOffer[j] = maxJobOffer[j] - 1\n                count = count + 1\n    for i in range(len(new)):\n        if new[i] == maxJobOffer[i]:\n            offer = offer + 1\n    print(count, total, offer)", "def func():\n    (n, m) = list(map(int, input().split()))\n    minsal = list(map(int, input().split()))\n    offsal = []\n    maxjoboff = []\n    for i in range(m):\n        (a, b) = list(map(int, input().split()))\n        offsal.append(a)\n        maxjoboff.append(b)\n    qual = []\n    ans1 = 0\n    ans2 = 0\n    ans3 = [False for i in range(m)]\n    for i in range(n):\n        qual.append(list(input()))\n        temp_max = 0\n        pos = -1\n        for j in range(len(qual[i])):\n            if qual[i][j] == '1':\n                if maxjoboff[j] > 0 and offsal[j] > temp_max and (offsal[j] >= minsal[i]):\n                    temp_max = offsal[j]\n                    pos = j\n        if pos != -1:\n            maxjoboff[pos] -= 1\n            ans3[pos] = True\n            ans2 += offsal[pos]\n            ans1 += 1\n    ans3c = 0\n    for i in range(len(ans3)):\n        if ans3[i] == False:\n            ans3c += 1\n    print(ans1, ans2, ans3c)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    func()", "for case in range(int(input())):\n    (n, m) = map(int, input().split())\n    minSalary = list(map(int, input().split()))\n    offer = []\n    companyHappy = [False] * m\n    candidateHappy = [False] * n\n    for offered in range(m):\n        offer.append(list(map(int, input().split())))\n    qual = {}\n    totalSalary = 0\n    for candidate in range(n):\n        qual[candidate] = input().strip()\n    for candidate in qual.keys():\n        cSalary = 0\n        companyID = 0\n        for company in range(m):\n            if qual[candidate][company] == '1':\n                if minSalary[candidate] <= offer[company][0] and offer[company][1] > 0:\n                    if cSalary < offer[company][0]:\n                        cSalary = offer[company][0]\n                        companyID = company\n                        candidateHappy[candidate] = True\n        if candidateHappy[candidate]:\n            offer[companyID][1] -= 1\n            companyHappy[companyID] = True\n            totalSalary += cSalary\n    print(candidateHappy.count(True), totalSalary, companyHappy.count(False))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    min_Salary = list(map(int, input().split()))\n    Company_offer = []\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        Company_offer.append([x, y, 0])\n    selection = []\n    for i in range(n):\n        s = input()\n        selection.append(s)\n    co = 0\n    total_salary = 0\n    for i in range(n):\n        k = -1\n        sal = min_Salary[i]\n        for j in range(m):\n            if selection[i][j] == '1':\n                if Company_offer[j][0] >= sal and Company_offer[j][1] > 0:\n                    sal = Company_offer[j][0]\n                    k = j\n        if k != -1:\n            co += 1\n            Company_offer[k][1] -= 1\n            Company_offer[k][2] = 1\n            total_salary += Company_offer[k][0]\n    comp = 0\n    for i in range(m):\n        if Company_offer[i][2] == 0:\n            comp += 1\n    print(co, total_salary, comp)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    min_salary = []\n    min_salary = list(map(int, input().split()))\n    row = []\n    amount = 0\n    count = 0\n    sum = 0\n    column = []\n    offerd_salary = []\n    max_joboffer = []\n    for i in range(m):\n        (a, b) = input().split()\n        a = int(a)\n        b = int(b)\n        offerd_salary.append(a)\n        max_joboffer.append(b)\n    new_max_joboffers = max_joboffer * 1\n    for i in range(n):\n        x = input()\n        row = list(x)\n        salary_get = min_salary[i]\n        for j in range(len(row)):\n            row[j] = int(row[j])\n            if row[j] == 1:\n                if salary_get <= offerd_salary[j] and max_joboffer[j] > 0:\n                    salary_get = offerd_salary[j]\n        for k in range(len(offerd_salary)):\n            if salary_get == offerd_salary[k]:\n                count = count + 1\n                amount = amount + offerd_salary[k]\n                max_joboffer[k] = max_joboffer[k] - 1\n    for i in range(len(max_joboffer)):\n        if max_joboffer[i] == new_max_joboffers[i]:\n            sum = sum + 1\n    print(count, amount, sum)", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(s) for s in input().split()]\n    salary = [int(s) for s in input().split()]\n    a = []\n    for i in range(m):\n        (p, q) = [int(s) for s in input().split()]\n        a.append([p, q])\n    qual = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        qual[i] = input()\n    company = [0] * m\n    total = 0\n    students = 0\n    for i in range(n):\n        sal = salary[i]\n        maxi = -1\n        temp_max = -1\n        for j in range(m):\n            if qual[i][j] == '1' and a[j][1] > 0 and (a[j][0] > sal) and (maxi < a[j][0]):\n                maxi = a[j][0]\n                temp_max = j\n        if temp_max != -1:\n            a[temp_max][1] -= 1\n            students += 1\n            total += maxi\n            company[temp_max] = 1\n    print('%s %s %s' % (students, total, m - company.count(1)))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    total = 0\n    os = list()\n    limit = list()\n    h = list()\n    minsal = list(map(int, input().split()))\n    for j in range(m):\n        (o, l) = map(int, input().split())\n        os.append(o)\n        limit.append(l)\n    qual = [[0 for x in range(m)] for y in range(n)]\n    for j in range(n):\n        qual[j] = input()\n    for j in range(m):\n        h.append(0)\n    for j in range(n):\n        big = 0\n        c = -1\n        for k in range(m):\n            if qual[j][k] == '1':\n                if h[k] < limit[k]:\n                    if minsal[j] <= os[k]:\n                        if big < os[k]:\n                            big = os[k]\n                            c = k\n        if c != -1:\n            total = total + big\n            h[c] = h[c] + 1\n    print(sum(h), end=' ')\n    print(total, end=' ')\n    print(h.count(0))", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    minSalary = list(map(int, input().split()))\n    company = [[0 for x in range(2)] for y in range(m)]\n    for i in range(m):\n        (company[i][0], company[i][1]) = input().split()\n        (company[i][0], company[i][1]) = [int(company[i][0]), int(company[i][1])]\n    companyTaken = [0 for x in range(m)]\n    students = 0\n    tsal = 0\n    for i in range(n):\n        s = input()\n        comp = -1\n        sal = -1\n        for j in range(len(s)):\n            if s[j] == '1' and company[j][0] >= minSalary[i] and (company[j][1] > 0) and (sal <= company[j][0]):\n                comp = j\n                sal = company[j][0]\n        if sal > -1:\n            students += 1\n            tsal += sal\n            company[comp][1] -= 1\n            companyTaken[comp] = 1\n    notTaken = 0\n    for i in companyTaken:\n        if i == 0:\n            notTaken += 1\n    print(str(students) + ' ' + str(tsal) + ' ' + str(notTaken))", "import copy\nanswers = []\ng = int(input())\nfor i in range(g):\n    k = 0\n    s = 0\n    d = 0\n    (n, m) = list(map(int, input().split()))\n    minSalary = list(map(int, input().split()))\n    offeredSalaries = []\n    jobsAvail = []\n    for i in range(m):\n        t = input().split()\n        offeredSalaries.append(int(t[0]))\n        jobsAvail.append(int(t[1]))\n    q = copy.copy(jobsAvail)\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, ' '.join(input().split()))))\n    for i in range(n):\n        minSal = minSalary[i]\n        ar = arr[i]\n        probJobsIndex = []\n        probJobsSalaries = []\n        for l in range(m):\n            if ar[l] == 1:\n                if jobsAvail[l] > 0:\n                    if offeredSalaries[l] > minSal:\n                        probJobsSalaries.append(int(offeredSalaries[l]))\n                        probJobsIndex.append(int(l))\n        if len(probJobsSalaries) == 0:\n            continue\n        else:\n            salary = max(probJobsSalaries)\n            salary_index = offeredSalaries.index(salary)\n            k += 1\n            s += salary\n            jobsAvail[salary_index] -= 1\n    for (a, b) in zip(jobsAvail, q):\n        if a == b:\n            d += 1\n    answers.append([k, s, d])\nfor i in answers:\n    print(*i)", "test = int(input())\nfor t in range(test):\n    (n, m) = [int(i) for i in input().split()]\n    minSalary = [int(i) for i in input().split()]\n    ncad = 0\n    tsal = 0\n    company = {}\n    for c in range(m):\n        (os, mjo) = [int(i) for i in input().split()]\n        company[c] = [os, mjo, 0]\n    for wc in range(n):\n        student = input()\n        mySal = minSalary[wc]\n        maxOffer = 0\n        selComp = None\n        for (s, v) in enumerate(student):\n            if v == '1':\n                if company[s][1] > 0:\n                    offer_sal = company[s][0]\n                    if offer_sal >= mySal and offer_sal >= maxOffer:\n                        maxOffer = offer_sal\n                        selComp = s\n        if selComp is not None:\n            company[selComp][2] = 1\n            company[selComp][1] += -1\n        if maxOffer > 0:\n            ncad += 1\n            tsal += maxOffer\n    ncomp = len([k for (k, v) in company.items() if company[k][2] == 0])\n    print(ncad, tsal, ncomp)", "t = int(input())\nwhile t:\n    t = t - 1\n    (n, m) = map(int, input().split())\n    minsal = list(map(int, input().split()))\n    m1 = m\n    n1 = n\n    offsal = []\n    maxjob = []\n    offmax = []\n    offmax = []\n    che = [0] * m\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        offsal.append(a)\n        maxjob.append(b)\n        offmax.append([a, b])\n    offmax.sort(reverse=True)\n    qual = []\n    while n1:\n        n1 -= 1\n        a = list(input())\n        qual.append(a)\n    total = 0\n    noof = 0\n    noofcomp = m\n    for i in range(n):\n        exp = int(minsal[i])\n        st = 0\n        total1 = 0\n        for j in range(m):\n            if int(qual[i][j]) == 1 and exp <= offsal[j]:\n                if maxjob[j] != 0:\n                    total1 = max(total1, offsal[j])\n        if total1 != 0:\n            noof += 1\n            che[offsal.index(total1)] = 1\n            maxjob[offsal.index(total1)] -= 1\n            total += total1\n    print(noof, total, che.count(0))", "from sys import stdin\nt = int(stdin.readline())\nwhile t:\n    t -= 1\n    (n, m) = map(int, stdin.readline().split())\n    minsalary = list(map(int, stdin.readline().split()))\n    offer = []\n    for i in range(m):\n        offer.append(tuple(map(int, stdin.readline().split())))\n    qual = []\n    for i in range(n):\n        qual.append(stdin.readline())\n    total_salaries = 0\n    get_job = 0\n    no_cand = set([x for x in range(m)])\n    for i in range(n):\n        maxsal = 0\n        comp = -1\n        for j in range(m):\n            if qual[i][j] == '1':\n                if offer[j][0] >= minsalary[i] and offer[j][0] > maxsal and (offer[j][1] > 0):\n                    maxsal = offer[j][0]\n                    comp = j\n        if maxsal != 0:\n            total_salaries += maxsal\n            offer[comp] = (offer[comp][0], offer[comp][1] - 1)\n            get_job += 1\n            if comp in no_cand:\n                no_cand.remove(comp)\n    print(get_job, total_salaries, len(no_cand))", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = map(int, input().split())\n    minsalary = list(map(int, input().split()))\n    offer = []\n    for i in range(m):\n        offer.append(tuple(map(int, input().split())))\n    qual = []\n    for i in range(n):\n        qual.append(input())\n    total_salaries = 0\n    get_job = 0\n    no_cand = set([x for x in range(m)])\n    for i in range(n):\n        maxsal = 0\n        comp = -1\n        for j in range(m):\n            if qual[i][j] == '1':\n                if offer[j][0] >= minsalary[i] and offer[j][0] > maxsal and (offer[j][1] > 0):\n                    maxsal = offer[j][0]\n                    comp = j\n        if maxsal != 0:\n            total_salaries += maxsal\n            offer[comp] = (offer[comp][0], offer[comp][1] - 1)\n            get_job += 1\n            if comp in no_cand:\n                no_cand.remove(comp)\n    print(get_job, total_salaries, len(no_cand))", "T = int(input())\nfor t in range(T):\n    (N, M) = [int(i) for i in input().split()]\n    minSalary = [int(i) for i in input().split()]\n    Offer = dict()\n    for i in range(M):\n        Offer[i] = [int(_) for _ in input().split()]\n    num_candidate = 0\n    company = set()\n    total_salary = 0\n    for i in range(N):\n        qual = input()\n        tmp_index = []\n        max_index = []\n        tmp_len = 0\n        for j in range(M):\n            if qual[j] == '1' and Offer[j][1] > 0 and (Offer[j][0] >= minSalary[i]):\n                tmp_index.append(j)\n                max_index.append(Offer[j][0])\n                tmp_len += 1\n        if tmp_len > 0:\n            m = max(max_index)\n            m_index = [p for p in range(tmp_len) if max_index[p] == m][0]\n            company_chosen = tmp_index[m_index]\n            Offer[company_chosen][1] -= 1\n            num_candidate += 1\n            company.add(company_chosen)\n            total_salary += m\n    print(num_candidate, total_salary, M - len(company))", "t = int(input())\nfor k in range(t):\n    (n, m) = map(int, input().split())\n    minsalary = []\n    minsalary = list(map(int, input().split()))\n    offeredsalary = []\n    maxjoboffers = []\n    flag = 0\n    salary = 0\n    for v in range(m):\n        (s, d) = map(int, input().split())\n        offeredsalary.append(s)\n        maxjoboffers.append(d)\n    lis = []\n    for g in range(m):\n        lis.append(1)\n    for i in range(n):\n        qual = []\n        qual = list(input())\n        g = 0\n        maximum = 0\n        for j in range(len(qual)):\n            if qual[j] == '1' and maxjoboffers[j] > 0 and (offeredsalary[j] > minsalary[i]):\n                if maximum < offeredsalary[j]:\n                    g = 1\n                    maximum = offeredsalary[j]\n            if maximum != 0 and j == len(qual) - 1:\n                h = offeredsalary.index(maximum)\n                lis[h] = lis[h] - 1\n                maxjoboffers[h] = maxjoboffers[h] - 1\n        if g == 1:\n            flag += 1\n        salary += maximum\n    print('{} {} {}'.format(flag, salary, lis.count(1)))", "test = int(input())\nfor i in range(test):\n    offered_salary = []\n    total_job = []\n    placed = []\n    sum = 0\n    (n, m) = map(int, input().split())\n    count1 = 0\n    count2 = m\n    min_salary = list(map(int, input().split()))\n    for j in range(m):\n        (a, b) = map(int, input().split())\n        offered_salary.append(a)\n        total_job.append(b)\n    no_job = list(total_job)\n    for j in range(n):\n        placed.append(input())\n    for j in range(n):\n        get = 0\n        maxi = []\n        for k in range(m):\n            if int(placed[j][k]) == 1 and offered_salary[k] >= min_salary[j] and (total_job[k] > 0):\n                maxi.append(k)\n                get += 1\n        if get > 0:\n            great = offered_salary[maxi[0]]\n            change_post = offered_salary.index(offered_salary[maxi[0]])\n            for l in maxi:\n                if offered_salary[l] > great:\n                    great = offered_salary[l]\n                    change_post = l\n            total_job[change_post] -= 1\n            sum += great\n            count1 += 1\n    for j in range(m):\n        if no_job[j] != total_job[j]:\n            count2 -= 1\n    print(count1, sum, count2)", "for case in range(int(input())):\n    (n, m) = map(int, input().split())\n    minSalary = list(map(int, input().split()))\n    offer = []\n    companyHappy = [False] * m\n    candidateHappy = [False] * n\n    for offered in range(m):\n        offer.append(list(map(int, input().split())))\n    qual = {}\n    totalSalary = 0\n    for candidate in range(n):\n        qual[candidate] = input().strip()\n    for candidate in qual.keys():\n        cSalary = 0\n        companyID = 0\n        for company in range(m):\n            if qual[candidate][company] == '1':\n                if minSalary[candidate] <= offer[company][0] and offer[company][1] > 0:\n                    if cSalary < offer[company][0]:\n                        cSalary = offer[company][0]\n                        companyID = company\n                        candidateHappy[candidate] = True\n        if candidateHappy[candidate]:\n            offer[companyID][1] -= 1\n            companyHappy[companyID] = True\n            totalSalary += cSalary\n    print(candidateHappy.count(True), totalSalary, companyHappy.count(False))", "for t in range(int(input())):\n    (N, M) = map(int, input().split())\n    min_sal = list(map(int, input().split()))\n    (off_sal, max_job) = ([None] * M, [None] * M)\n    for i in range(M):\n        (off_sal[i], max_job[i]) = map(int, input().split())\n    max_job_copy = max_job[:]\n    qual = [input().strip() for i in range(N)]\n    happy = total = 0\n    for i in range(N):\n        choices = [(off_sal[j], j) for j in range(M) if qual[i][j] == '1' and off_sal[j] >= min_sal[i] and (max_job[j] > 0)]\n        if choices:\n            (max_sal, comp) = max(choices)\n            happy += 1\n            total += max_sal\n            max_job[comp] -= 1\n    sad = sum((m1 == m2 for (m1, m2) in zip(max_job, max_job_copy)))\n    print(happy, total, sad)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    minSalary = list(map(int, input().split()))\n    offeredSalary = []\n    maxJobOffers = []\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        offeredSalary.append(a)\n        maxJobOffers.append(b)\n    maxJobOffersCopy = list(maxJobOffers)\n    qual = []\n    for i in range(n):\n        qual.append(list(map(int, input())))\n    candidateNumber = 0\n    candidateGotJob = 0\n    total = 0\n    for i in qual:\n        companyNumber = 0\n        gotJob = False\n        salary = minSalary[candidateNumber]\n        gotJobByCompany = 0\n        for j in i:\n            if j == 1 and maxJobOffers[companyNumber] > 0 and (salary <= offeredSalary[companyNumber]):\n                salary = offeredSalary[companyNumber]\n                gotJob = True\n                gotJobByCompany = companyNumber\n            companyNumber += 1\n        if gotJob:\n            maxJobOffers[gotJobByCompany] -= 1\n            candidateGotJob += 1\n            total += salary\n        candidateNumber += 1\n    sadCompany = 0\n    for i in range(len(maxJobOffers)):\n        if maxJobOffers[i] == maxJobOffersCopy[i]:\n            sadCompany += 1\n    print(candidateGotJob, total, sadCompany, '\\n')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ips = input()\n    minsalary = [0] * n\n    i = 0\n    for token in ips.split():\n        minsalary[i] = int(token)\n        i += 1\n    company = [[i, 0, 0] for i in range(m)]\n    for i in range(m):\n        (company[i][1], company[i][2]) = map(int, input().split())\n    qual = [0] * n\n    for i in range(n):\n        qual[i] = input()\n    empavail = [1] * n\n    company = sorted(company, key=lambda x: x[1], reverse=True)\n    (withjob, totalsalary, sadcompany) = (0, 0, 0)\n    for ele in company:\n        count = ele[2]\n        for j in range(n):\n            cond1 = int(qual[j][ele[0]]) and empavail[j]\n            if cond1:\n                cond2 = minsalary[j] <= ele[1]\n                if cond2:\n                    count -= 1\n                    withjob += 1\n                    empavail[j] = 0\n                    totalsalary += ele[1]\n                    if count == 0:\n                        break\n        if count == ele[2]:\n            sadcompany += 1\n    print(withjob, totalsalary, sadcompany)", "T = int(input().strip())\nfor _ in range(T):\n    (N, M) = input().strip().split(' ')\n    (N, M) = [int(N), int(M)]\n    minSalary = [0] + list(map(int, input().strip().split(' ')))\n    (offeredSalary, maxJobOffers) = ([0] * (M + 1), [0] * (M + 1))\n    for i in range(1, M + 1):\n        (offeredSalary[i], maxJobOffers[i]) = input().strip().split(' ')\n        (offeredSalary[i], maxJobOffers[i]) = [int(offeredSalary[i]), int(maxJobOffers[i])]\n    qual = [0] * (N + 1)\n    for i in range(1, N + 1):\n        qual[i] = [0] + list(map(int, input().strip()))\n    JobGot = [0] * (M + 1)\n    li = []\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            if qual[i][j] == 1 and JobGot[j] < maxJobOffers[j] and (minSalary[i] <= offeredSalary[j]):\n                li.append(offeredSalary[j])\n        if len(li) != 0:\n            JobGot[offeredSalary.index(max(li))] += 1\n        li.clear()\n    candidate_count = 0\n    amount = 0\n    choker = 0\n    for i in range(1, M + 1):\n        if JobGot[i] == 0:\n            choker += 1\n        if JobGot[i] > 0:\n            candidate_count += JobGot[i]\n            amount = amount + offeredSalary[i] * JobGot[i]\n    print(candidate_count, amount, choker, sep=' ')", "import copy\nT = int(input().strip())\nwhile T:\n    (N, M) = map(int, input().strip().split())\n    mSal = list(map(int, input().strip().split()))\n    cp = []\n    for i in range(M):\n        cp.append(list(map(int, input().strip().split())))\n    cp1 = copy.deepcopy(cp)\n    cd = []\n    for i in range(N):\n        cd.append(input().strip())\n    (g, s, c) = (0, 0, 0)\n    for i in range(len(cd)):\n        m = -1\n        cs = -1\n        for j in range(len(cd[i])):\n            if cd[i][j] == '1':\n                if mSal[i] <= cp[j][0] and cp[j][1] and (m < cp[j][0]):\n                    m = cp[j][0]\n                    cs = j\n        if cs != -1:\n            cp[cs][1] -= 1\n            g += 1\n            s += cp[cs][0]\n    for i in range(len(cp)):\n        if cp[i][1] == cp1[i][1]:\n            c += 1\n    print(g, s, c)\n    T -= 1"]