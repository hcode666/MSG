["def main(string):\n    stack = []\n    s = ''\n    for _ in string:\n        if ord(_) in range(97, 123):\n            s += _\n        elif _ == ')':\n            if stack != []:\n                s += stack[-1]\n                del stack[-1]\n        elif _ == '(':\n            continue\n        else:\n            stack.append(_)\n    print(s)\nfor _ in range(int(input())):\n    t = str(input())\n    main(t)", "def main(string):\n    stack = []\n    s = ''\n    for _ in string:\n        if ord(_) in range(97, 123):\n            s += _\n        elif _ == ')':\n            if stack != []:\n                s += stack[-1]\n                del stack[-1]\n        elif _ == '(':\n            continue\n        else:\n            stack.append(_)\n    print(s)\nfor _ in range(int(input())):\n    t = str(input())\n    main(t)", "n = int(input())\nprecedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\nfor i in range(n):\n    stack = []\n    postflix = []\n    x = input()\n    for i in x:\n        if i.isalpha():\n            postflix.append(i)\n        elif i == '(':\n            stack.append(i)\n        elif i == ')':\n            while stack and stack[-1] != '(':\n                postflix.append(stack.pop())\n            stack.pop()\n        elif i in precedence:\n            while stack and stack[-1] != '(' and (precedence[i] <= precedence[stack[-1]]):\n                postflix.append(stack.pop())\n            stack.append(i)\n    while stack:\n        m = stack.pop()\n        if m != '(':\n            postflix.append(m)\n    seperator = ''\n    print(seperator.join(postflix))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "for _ in range(int(input())):\n    exp = input()\n    stack = []\n    s = ''\n    for i in exp:\n        if i.isalpha():\n            s += i\n        elif i == ')':\n            for j in stack[::-1]:\n                if j == '(':\n                    stack.pop()\n                    break\n                s += stack.pop()\n        else:\n            stack.append(i)\n    print(s)", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "n = int(input())\nfor i in range(n):\n    output = []\n    operator = []\n    priority = {'(': 0, '^': 1, '*': 2, '/': 2, '+': 3, '-': 3}\n    ag = input()\n    for ch in ag:\n        if ch == '(':\n            operator.append(ch)\n        elif ch == ')':\n            while operator[-1] != '(':\n                ele = operator.pop()\n                output.append(ele)\n            operator.pop()\n        elif ch == '^' or ch == '*' or ch == '/' or (ch == '-') or (ch == '+'):\n            if len(operator) > 0:\n                while len(operator) > 0 and priority[operator[-1]] >= priority[ch]:\n                    ele = operator.pop()\n                    output.append(ele)\n            operator.append(ch)\n        else:\n            output.append(ch)\n    while len(operator) != 0:\n        ele = operator.pop()\n        output.append(ele)\n    print(''.join(output))", "for _ in range(int(input())):\n    t = []\n    st = []\n    for i in input():\n        if i.isalpha():\n            t.append(i)\n        elif i == ')':\n            t.append(st.pop())\n        elif i == '(':\n            pass\n        else:\n            st.append(i)\n    print(''.join(t))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def precedence(operator):\n    if operator == '^':\n        return 4\n    elif operator in '*/':\n        return 3\n    elif operator in '+-':\n        return 2\n    elif operator == '(':\n        return 1\nt = int(input())\nfor _ in range(t):\n    expression = input().strip()\n    stack = []\n    for char in expression:\n        if char.isalpha():\n            print(char, end='')\n        elif char in '+-*/^':\n            while stack and stack[-1] != '(' and (precedence(stack[-1]) >= precedence(char)):\n                print(stack.pop(), end='')\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                print(stack.pop(), end='')\n            if stack and stack[-1] == '(':\n                stack.pop()\n    while stack:\n        print(stack.pop(), end='')\n    print()", "T = int(input())\nfor _ in range(T):\n    e = input()\n    (rpn, rpn_) = ([], [])\n    for i in e:\n        if i.isalpha():\n            rpn.append(i)\n        elif i == ')':\n            rpn.append(rpn_.pop())\n        elif i == '(':\n            pass\n        else:\n            rpn_.append(i)\n    print(''.join(rpn))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "for _ in range(int(input())):\n    x = input()\n    revpol = ''\n    stk = []\n    for i in x:\n        if i.isalpha():\n            revpol += i\n        elif i in ('(', '+', '-', '/', '*', '^'):\n            stk.append(i)\n        else:\n            while stk[-1] != '(':\n                revpol += stk.pop(-1)\n            stk.pop(-1)\n    while stk:\n        revpol += stk.pop(-1)\n    print(revpol)", "t = int(input())\nfor i in range(t):\n    s = input()\n    n = len(s)\n    a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    l = []\n    l2 = []\n    ls = []\n    for j in range(n):\n        l.append(s[j])\n    for k in range(n):\n        x = l[k]\n        if x in a:\n            l2.append(l[k])\n        elif x == ')':\n            l2.append(ls.pop())\n        elif x == '(':\n            continue\n        else:\n            ls.append(l[k])\n    output = ''\n    for m in l2:\n        output += m\n    print(output)", "def mine(L):\n    n = len(L)\n    ans = ''\n    i = 1\n    count_str = ''\n    count_int = 0\n    while i < n and L[i] != ')':\n        count_int += 1\n        if L[i] == '(':\n            var = mine(L[i:])\n            ans += var[0]\n            count_int += var[1] + 1\n            i += var[1] + 2\n        else:\n            if L[i] in 'abcdefghijklmnopqrstuvwxyz':\n                ans += L[i]\n            else:\n                count_str = L[i]\n            i += 1\n    return (ans + count_str, count_int)\nfor i in range(int(input())):\n    print(mine(input())[0])", "for _ in range(int(input())):\n    t = []\n    st = []\n    for i in input():\n        if i.isalpha():\n            t.append(i)\n        elif i == ')':\n            t.append(st.pop())\n        elif i == '(':\n            pass\n        else:\n            st.append(i)\n    print(''.join(t))", "t = int(input())\nfor j in range(t):\n    rpn = ''\n    stack = []\n    for i in input():\n        if i.isalpha():\n            rpn += i\n        elif i == ')':\n            rpn += stack.pop()\n            stack.pop()\n        else:\n            stack.append(i)\n    print(rpn)", "for inputs in range(int(input())):\n    rpn = ''\n    stack = []\n    for i in input():\n        if i.isalpha():\n            rpn += i\n        elif i == ')':\n            rpn += stack.pop()\n            stack.pop()\n        else:\n            stack.append(i)\n    print(rpn)", "def rpn(exp):\n    line = []\n    for i in range(len(exp)):\n        line += exp[i]\n    length = len(line)\n    while i < len(line):\n        if line[i] == ')':\n            j = i\n            while line[i] != '(':\n                i -= 1\n            line[i + 1] = line[i + 1] + line[i + 3] + line[i + 2]\n            line.pop(i)\n            line.pop(i + 1)\n            line.pop(i + 1)\n            line.pop(i + 1)\n        i += 1\n    return line[0]\ncases = int(input())\nwhile cases > 0:\n    exp = input()\n    print(rpn(exp))\n    cases -= 1", "for inputs in range(int(input())):\n    rpn = ''\n    stack = []\n    for i in input():\n        if i.isalpha():\n            rpn += i\n        elif i == ')':\n            rpn += stack.pop()\n            stack.pop()\n        else:\n            stack.append(i)\n    print(rpn)", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "for _ in range(int(input())):\n    s = input()\n    si = []\n    a = ['+', '-', '*', '/', '^']\n    for i in s:\n        if i not in a and i != '(' and (i != ')'):\n            print(i, end='')\n        elif i in a:\n            si.append(i)\n        elif i == ')':\n            print(si.pop(), end='')\n    print()", "for _ in range(int(input())):\n    s = input()\n    si = []\n    a = ['+', '-', '*', '/', '^']\n    for i in s:\n        if i not in a and i != '(' and (i != ')'):\n            print(i, end='')\n        elif i in a:\n            si.append(i)\n        elif i == ')':\n            print(si.pop(), end='')\n    print()", "for i in range(int(input())):\n    IN = input()\n    c = ['+', '-', '*', '/', '^']\n    stack = []\n    for i in IN:\n        if i not in c and i != '(' and (i != ')'):\n            print(i, end='')\n        elif i in c and i != ')':\n            stack.append(i)\n        elif i == ')':\n            print(stack.pop(), end='')\n    print()", "for t in range(int(input())):\n    s = input()\n    s1 = ' '\n    l = []\n    for i in s:\n        if i == '(':\n            pass\n        elif 97 <= ord(i) <= 122:\n            s1 += i\n        elif i == ')':\n            s1 += l[-1]\n            l.pop(-1)\n        else:\n            l.append(i)\n    print(s1)", "for t in range(int(input())):\n    s = input()\n    s1 = ''\n    l = []\n    for i in s:\n        if i == '(':\n            pass\n        elif 97 <= ord(i) <= 122:\n            s1 += i\n        elif i == ')':\n            s1 += l[-1]\n            l.pop(-1)\n        else:\n            l.append(i)\n    print(s1)", "def exp():\n    s = input()\n    l1 = []\n    l2 = []\n    for i in s:\n        if i.isalpha():\n            l1.append(i)\n        elif i == ')':\n            l1.append(l2.pop())\n        elif i == '(':\n            pass\n        else:\n            l2.append(i)\n    print(''.join(l1))\na = int(input())\nfor i in range(a):\n    exp()", "def test():\n    s = input()\n    lst1 = []\n    lst2 = []\n    for i in s:\n        if i.isalpha():\n            lst1.append(i)\n        elif i == ')':\n            lst1.append(lst2.pop())\n        elif i == '(':\n            pass\n        else:\n            lst2.append(i)\n    print(''.join(lst1))\nt = int(input())\nfor _ in range(t):\n    test()", "for i in range(int(input())):\n    s = input()\n    n = len(s)\n    s1 = ''\n    s2 = ''\n    for i in range(0, n):\n        if s[i] >= 'a' and s[i] <= 'z':\n            s1 += s[i]\n        elif s[i] == '+' or s[i] == '-' or s[i] == '*' or (s[i] == '/') or (s[i] == '^'):\n            s2 += s[i]\n        elif s[i] == ')':\n            s1 = s1 + s2[-1]\n            s2 = s2[0:len(s2) - 1]\n    print(s1)", "def test():\n    lis = []\n    lis1 = []\n    for i in input():\n        if i.isalpha():\n            lis.append(i)\n        elif i == ')':\n            lis.append(lis1.pop())\n        elif i == '(':\n            pass\n        else:\n            lis1.append(i)\n    print(''.join(lis))\nt = int(input())\nfor _ in range(t):\n    test()", "try:\n    for _ in range(int(input())):\n        exp = input()\n        ans = []\n        oper = []\n        for i in list(exp):\n            if i.isalpha():\n                ans.append(i)\n            elif i == ')':\n                x = oper.pop(len(oper) - 1)\n                while x != '(':\n                    ans.append(x)\n                    x = oper.pop(len(oper) - 1)\n            else:\n                oper.append(i)\n        print(*ans, sep='')\nexcept:\n    pass", "try:\n    for _ in range(int(input())):\n        exp = input()\n        ans = []\n        oper = []\n        for i in list(exp):\n            if i.isalpha():\n                ans.append(i)\n            elif i == ')':\n                x = oper.pop(len(oper) - 1)\n                while x != '(':\n                    ans.append(x)\n                    x = oper.pop(len(oper) - 1)\n            else:\n                oper.append(i)\n        print(*ans, sep='')\nexcept:\n    pass", "test_cases = int(input())\nfor _ in range(0, test_cases):\n    input_string = input()\n    my_list = []\n    for str_val in input_string:\n        if str_val == ')':\n            second_operand = my_list.pop()\n            operator = my_list.pop()\n            first_operand = my_list.pop()\n            my_list.pop()\n            current_string = first_operand + second_operand + operator\n            my_list.append(current_string)\n        else:\n            my_list.append(str_val)\n    print(''.join(my_list))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "for i in range(int(input())):\n    lis = []\n    lis1 = []\n    for i in input():\n        if i.isalpha():\n            lis.append(i)\n        elif i == ')':\n            lis.append(lis1.pop())\n        elif i == '(':\n            pass\n        else:\n            lis1.append(i)\n    print(''.join(lis))", "def to_rpn(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    operator_stack = []\n    rpn = ''\n    for char in expression:\n        if char.isalpha():\n            rpn += char\n        elif char in precedence:\n            while operator_stack and operator_stack[-1] != '(' and (precedence[char] <= precedence[operator_stack[-1]]):\n                rpn += operator_stack.pop()\n            operator_stack.append(char)\n        elif char == '(':\n            operator_stack.append(char)\n        elif char == ')':\n            while operator_stack and operator_stack[-1] != '(':\n                rpn += operator_stack.pop()\n            if operator_stack and operator_stack[-1] == '(':\n                operator_stack.pop()\n    while operator_stack:\n        rpn += operator_stack.pop()\n    return rpn\nt = int(input())\nfor i in range(t):\n    expression = input().strip()\n    print(to_rpn(expression))", "test_cases = int(input())\nfor _ in range(0, test_cases):\n    input_string = input()\n    my_list = []\n    for str_val in input_string:\n        if str_val == ')':\n            second_operand = my_list.pop()\n            operator = my_list.pop()\n            first_operand = my_list.pop()\n            my_list.pop()\n            current_string = first_operand + second_operand + operator\n            my_list.append(current_string)\n        else:\n            my_list.append(str_val)\n    print(''.join(my_list))", "t = int(input())\nfor _ in range(t):\n    debo = input()\n    stack = []\n    expression = []\n    for i in debo:\n        if i in ('+', '*', '-', '/', '^'):\n            stack.append(i)\n        elif i == '(':\n            continue\n        elif i == ')':\n            expression.append(stack.pop())\n        else:\n            expression.append(i)\n    print(''.join(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "d = {'+': 1, '-': 2, '*': 3, '/': 4, '^': 5}\nr = '+-*/^'\nt = int(input())\nfor i in range(t):\n    w = []\n    p = []\n    s = input().strip()\n    for j in s:\n        if j == '(':\n            w.append('(')\n        elif j in r:\n            w.append(j)\n        elif j == ')':\n            t = []\n            while w[-1] != '(':\n                t.append(w.pop())\n            w.pop()\n            p.extend(t)\n        else:\n            p.append(j)\n    p.extend(reversed(w))\n    for m in p:\n        print(m, end='')\n    print()", "d = {'+': 1, '-': 2, '*': 3, '/': 4, '^': 5}\nr = '+-*/^'\nt = int(input())\nfor i in range(t):\n    w = []\n    p = []\n    s = input().strip()\n    for j in s:\n        if j == '(':\n            w.append('(')\n        elif j in r:\n            w.append(j)\n        elif j == ')':\n            t = []\n            while w[-1] != '(':\n                t.append(w.pop())\n            w.pop()\n            p.extend(t)\n        else:\n            p.append(j)\n    p.extend(reversed(w))\n    for m in p:\n        print(m, end='')\n    print()", "n = int(input())\nfor i in range(n):\n    s = input()\n    l = []\n    for i in s:\n        if i.isalnum():\n            print(i, end='')\n        elif i == '(':\n            pass\n        elif i == ')':\n            print(l.pop(), end='')\n        else:\n            l.append(i)\n    print(end='\\n')", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "for _ in range(int(input())):\n    s = input()\n    p = []\n    t = ''\n    top = 0\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            p.append(s[i])\n            top += 1\n            count += 1\n        if s[i] == ')':\n            p.append(s[i])\n            top += 1\n            count -= 1\n            while top > 0:\n                if p[top - 1] == '(':\n                    break\n                if p[top - 1] == ')' or p[top - 1] == '(':\n                    p.pop(top - 1)\n                else:\n                    t += p.pop(top - 1)\n                top -= 1\n            p.pop(top - 1)\n            top -= 1\n        elif s[i].isalpha():\n            t += s[i]\n        elif s[i] == '+' or s[i] == '-' or s[i] == '*' or (s[i] == '^') or (s[i] == '/'):\n            if top == 0:\n                p.append(s[i])\n                top += 1\n            elif p[top - 1] == '^' and (s[i] == '+' or s[i] == '-' or s[i] == '*' or (s[i] == '^') or (s[i] == '/')):\n                t += s[top - 1]\n                p.pop()\n                top -= 1\n                p.append(s[i])\n                top += 1\n            elif (p[top - 1] == '*' or p[top - 1] == '/') and (s[i] == '+' or s[i] == '-' or s[i] == '*' or (s[i] == '^') or (s[i] == '/')):\n                t += p.pop()\n                top -= 1\n                p.append(s[i])\n                top += 1\n            else:\n                p.append(s[i])\n                top += 1\n    while top > 0:\n        t += p[top - 1]\n        top -= 1\n    print(t)", "for _ in range(int(input())):\n    s = input()\n    p = []\n    t = ''\n    top = 0\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            p.append(s[i])\n            top += 1\n            count += 1\n        if s[i] == ')':\n            p.append(s[i])\n            top += 1\n            count -= 1\n            while top > 0:\n                if p[top - 1] == '(':\n                    break\n                if p[top - 1] == ')' or p[top - 1] == '(':\n                    p.pop(top - 1)\n                else:\n                    t += p.pop(top - 1)\n                top -= 1\n            p.pop(top - 1)\n            top -= 1\n        elif s[i].isalpha():\n            t += s[i]\n        elif s[i] == '+' or s[i] == '-' or s[i] == '*' or (s[i] == '^') or (s[i] == '/'):\n            if top == 0:\n                p.append(s[i])\n                top += 1\n            elif p[top - 1] == '^' and (s[i] == '+' or s[i] == '-' or s[i] == '*' or (s[i] == '^') or (s[i] == '/')):\n                t += s[top - 1]\n                p.pop()\n                top -= 1\n                p.append(s[i])\n                top += 1\n            elif (p[top - 1] == '*' or p[top - 1] == '/') and (s[i] == '+' or s[i] == '-' or s[i] == '*' or (s[i] == '^') or (s[i] == '/')):\n                t += p.pop()\n                top -= 1\n                p.append(s[i])\n                top += 1\n            else:\n                p.append(s[i])\n                top += 1\n    while top > 0:\n        t += p[top - 1]\n        top -= 1\n    print(t)", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "for _ in range(int(input())):\n    expression = input()\n    stack = []\n    for i in expression:\n        if i == ')':\n            while stack[-1] != '(':\n                print(stack.pop(), end='')\n            stack.pop()\n        elif i in '+-*/^':\n            stack.append(i)\n        elif i == '(':\n            stack.append(i)\n        else:\n            print(i, end='')\n    print()", "def is_operator(c):\n    return c in '+-*/^'\n\ndef to_rpn(expr):\n    stack = []\n    output = ''\n    for c in expr:\n        if c.isalpha():\n            output += c\n        elif is_operator(c):\n            while stack and is_operator(stack[-1]) and (c in '+-' or stack[-1] in '*/'):\n                output += stack.pop()\n            stack.append(c)\n        elif c == '(':\n            stack.append(c)\n        elif c == ')':\n            while stack and stack[-1] != '(':\n                output += stack.pop()\n            if stack and stack[-1] == '(':\n                stack.pop()\n    while stack:\n        output += stack.pop()\n    return output\nt = int(input())\nfor _ in range(t):\n    expr = input().strip()\n    rpn = to_rpn(expr)\n    print(rpn)", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def transform(exprs):\n    strlist = [i for i in exprs]\n    u = int((strlist.count(')') + strlist.count('(')) / 2)\n    iterate = [i % len(strlist) for i in range(len(strlist) * u)]\n    c = 0\n    k1 = 0\n    k2 = 0\n    k3 = 0\n    for i in iterate:\n        if strlist[i] == '(':\n            if c == 0:\n                k1 = i\n            c += 1\n            continue\n        elif strlist[i] == ')':\n            c -= 1\n        if c == 1 and (strlist[i] == '+' or strlist[i] == '-' or strlist[i] == '*' or (strlist[i] == '/') or (strlist[i] == '^')):\n            k2 = i\n        elif c == 0 and strlist[i] == ')':\n            k3 = i\n            strlist[k3] = strlist[k2]\n            strlist[k2] = ' '\n            strlist[k1] = ' '\n    for k in range(u * 2):\n        strlist.remove(' ')\n    exprs = ''\n    for m in strlist:\n        exprs += m\n    return exprs\nui = int(input())\nul = []\nfor i in range(ui):\n    k = input()\n    ul.append(k)\nfor i in range(ui):\n    k = transform(ul[i])\n    print(k)", "def transform(exprs):\n    str1 = exprs\n    strlist = [i for i in str1]\n    u = int((strlist.count(')') + strlist.count('(')) / 2)\n    iterate = [i % len(strlist) for i in range(len(strlist) * u)]\n    c = 0\n    k1 = 0\n    k2 = 0\n    k3 = 0\n    for i in iterate:\n        if strlist[i] == '(':\n            if c == 0:\n                k1 = i\n            c += 1\n            continue\n        elif strlist[i] == ')':\n            c -= 1\n        if c == 1 and (strlist[i] == '+' or strlist[i] == '-' or strlist[i] == '*' or (strlist[i] == '/') or (strlist[i] == '^')):\n            k2 = i\n        elif c == 0 and strlist[i] == ')':\n            k3 = i\n            strlist[k3] = strlist[k2]\n            strlist[k2] = ' '\n            strlist[k1] = ' '\n    for k in range(u * 2):\n        strlist.remove(' ')\n    reqstr = ''\n    for m in strlist:\n        reqstr += m\n    return reqstr\nui = int(input())\nul = []\nfor i in range(ui):\n    k = input()\n    ul.append(k)\nfor i in range(ui):\n    k = transform(ul[i])\n    print(k)", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def infix_postfix(string):\n    stack = []\n    modified_string = ''\n    for char in string:\n        if char == '*' or char == '+' or char == '^' or (char == '-') or (char == '/'):\n            stack.append(char)\n        elif char == '(':\n            continue\n        elif char == ')' and stack:\n            modified_string = modified_string + stack.pop()\n        else:\n            modified_string = modified_string + char\n    return modified_string\ntestcases = int(input())\nfor i in range(testcases):\n    string = str(input())\n    print(infix_postfix(string))", "dict = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 8, ')': 0, '(': 0}\ns = int(input())\nfor i in range(s):\n    string = input()\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '(':\n            stack.append(string[i])\n        elif string[i] == ')':\n            while stack[len(stack) - 1] != '(':\n                print(stack.pop(), end='')\n            stack.pop()\n        elif string[i] in dict:\n            if dict[string[i]] > dict[stack[len(stack) - 1]]:\n                stack.append(string[i])\n            else:\n                while dict[string[i]] <= dict[stack[len(stack) - 1]]:\n                    print(stack.pop(), end='')\n                stack.append(string[i])\n        else:\n            print(string[i], end='')\n    print()", "dict = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 8, ')': 0, '(': 0}\ns = int(input())\nfor i in range(s):\n    string = input()\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '(':\n            stack.append(string[i])\n        elif string[i] == ')':\n            while stack[len(stack) - 1] != '(':\n                print(stack.pop(), end='')\n            stack.pop()\n        elif string[i] in dict:\n            if dict[string[i]] > dict[stack[len(stack) - 1]]:\n                stack.append(string[i])\n            else:\n                while dict[string[i]] <= dict[stack[len(stack) - 1]]:\n                    print(stack.pop(), end='')\n                stack.append(string[i])\n        else:\n            print(string[i], end='')\n    print()", "for _ in range(int(input())):\n    t = []\n    st = []\n    for i in input():\n        if i.isalpha():\n            t.append(i)\n        elif i == ')':\n            t.append(st.pop())\n        elif i == '(':\n            pass\n        else:\n            st.append(i)\n    print(''.join(t))", "for _ in range(int(input())):\n    t = []\n    st = []\n    for i in input():\n        if i.isalpha():\n            t.append(i)\n        elif i == ')':\n            t.append(st.pop())\n        elif i == '(':\n            pass\n        else:\n            st.append(i)\n    print(''.join(t))", "for _ in range(int(input())):\n    t = []\n    st = []\n    for i in input():\n        if i.isalpha():\n            t.append(i)\n        elif i == ')':\n            t.append(st.pop())\n        elif i == '(':\n            pass\n        else:\n            st.append(i)\n    print(''.join(t))", "for _ in range(int(input())):\n    s = input()\n    a = ' '\n    oprends = {'*', '/', '+', '-', '^'}\n    l = []\n    for i in range(len(s) - 1):\n        if s[i] == '(' or s[i] in oprends:\n            l.append(s[i])\n        elif s[i].isalpha():\n            a += str(s[i])\n        else:\n            while l[-1] != '(':\n                a += l.pop()\n            l.pop()\n    while l[-1] != '(':\n        a += l.pop()\n    print(a)", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "for i in range(int(input())):\n    x = input()\n    l = []\n    a = ' '\n    s = {'*', '/', '+', '-', '^'}\n    for i in range(len(x) - 1):\n        if x[i] == '(' or x[i] in s:\n            l.append(x[i])\n        elif x[i].isalpha():\n            a += str(x[i])\n        else:\n            while l[-1] != '(':\n                a += l.pop()\n            l.pop()\n    while l[-1] != '(':\n        a += l.pop()\n    print(a)", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "for _ in range(int(input())):\n    s = input()\n    ans = ''\n    stack = []\n    operator = ['+', '-', '*', '/', '^']\n    for char in s:\n        if char == '(':\n            continue\n        elif char in operator:\n            stack.append(char)\n        elif char == ')':\n            x = stack.pop()\n            ans += x\n        else:\n            ans += char\n    print(ans)", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "for i in range(int(input())):\n    x = input()\n    stack = []\n    a = ' '\n    s = {'*', '/', '+', '-', '^'}\n    for i in range(len(x) - 1):\n        if x[i] == '(' or x[i] in s:\n            stack.append(x[i])\n        elif x[i].isalnum():\n            a += str(x[i])\n        else:\n            while stack[-1] != '(':\n                a += stack.pop()\n            stack.pop()\n    while stack[-1] != '(':\n        a += stack.pop()\n    print(a)", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "t = int(input())\nfor tc in range(t):\n    x = input()\n    l = []\n    a = ' '\n    s = {'*', '/', '+', '-', '^'}\n    for i in range(len(x) - 1):\n        if x[i] == '(' or x[i] in s:\n            l.append(x[i])\n        elif x[i].isalpha():\n            a += str(x[i])\n        else:\n            while l[-1] != '(':\n                a += l.pop()\n            l.pop()\n    while l[-1] != '(':\n        a += l.pop()\n    print(a)", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "for i in range(int(input())):\n    x = input()\n    stack = []\n    a = ' '\n    s = {'*', '/', '+', '-', '^'}\n    for i in range(len(x) - 1):\n        if x[i] == '(' or x[i] in s:\n            stack.append(x[i])\n        elif x[i].isalnum():\n            a += str(x[i])\n        else:\n            while stack[-1] != '(':\n                a += stack.pop()\n            stack.pop()\n    while stack[-1] != '(':\n        a += stack.pop()\n    print(a)", "for i in range(int(input())):\n    x = input()\n    stack = []\n    a = ' '\n    sui = {'*', '/', '+', '-', '^'}\n    for i in range(len(x) - 1):\n        if x[i] == '(' or x[i] in sui:\n            stack.append(x[i])\n        elif x[i].isalnum():\n            a += str(x[i])\n        else:\n            while stack[-1] != '(':\n                a += stack.pop()\n            stack.pop()\n    while stack[-1] != '(':\n        a += stack.pop()\n    print(a)", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "for _ in range(int(input())):\n    t = []\n    st = []\n    for i in input():\n        if i.isalpha():\n            t.append(i)\n        elif i == ')':\n            t.append(st.pop())\n        elif i == '(':\n            pass\n        else:\n            st.append(i)\n    print(''.join(t))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))", "for i in range(int(input())):\n    s = input()\n    stack = []\n    b = ' '\n    sui = {'*', '/', '+', '-', '^'}\n    for i in range(len(s) - 1):\n        if s[i] == '(' or s[i] in sui:\n            stack.append(s[i])\n        elif s[i].isalnum():\n            b += str(s[i])\n        else:\n            while stack[-1] != '(':\n                b += stack.pop()\n            stack.pop()\n    while stack[-1] != '(':\n        b += stack.pop()\n    print(b)", "for i in range(int(input())):\n    s = input()\n    stack = []\n    b = ' '\n    sui = {'*', '/', '+', '-', '^'}\n    for i in range(len(s) - 1):\n        if s[i] == '(' or s[i] in sui:\n            stack.append(s[i])\n        elif s[i].isalnum():\n            b += str(s[i])\n        else:\n            while stack[-1] != '(':\n                b += stack.pop()\n            stack.pop()\n    while stack[-1] != '(':\n        b += stack.pop()\n    print(b)", "def solution(expression):\n    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}\n    stack = []\n    output = []\n    for char in expression:\n        if char.isalnum():\n            output.append(char)\n        elif char in '+-*/^':\n            while stack and precedence[char] <= precedence.get(stack[-1], 0):\n                output.append(stack.pop())\n            stack.append(char)\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                output.append(stack.pop())\n            stack.pop()\n    while stack:\n        output.append(stack.pop())\n    return ''.join(output)\nT = int(input())\nfor _ in range(T):\n    expression = input()\n    print(solution(expression))"]