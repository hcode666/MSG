["tests = int(input())\nfor _ in range(tests):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    if ls[0] < ls[1]:\n        ls[0] = -ls[0]\n    if ls[-1] < ls[-2]:\n        ls[-1] = -ls[-1]\n    for i in range(1, n - 1):\n        if ls[i] < ls[i - 1] and ls[i] < ls[i + 1]:\n            ls[i] = -ls[i]\n    ind = 1\n    while ind < n - 1:\n        started = False\n        pos = []\n        while ind < n - 1 and ls[ind] + ls[ind - 1] + ls[ind + 1] <= 0:\n            if not started:\n                pos.append(ind - 1)\n                pos.append(ind + 1)\n                started = True\n            else:\n                pos.append(ind + 1)\n            ind += 2\n        if started:\n            rec = [0] * (len(pos) + 1)\n            for i in pos:\n                ls[i] = -ls[i]\n            rec[0] = 0\n            rec[1] = ls[pos[0]]\n            for i in range(2, len(pos) + 1):\n                rec[i] = max(rec[i - 1], ls[pos[i - 1]] + rec[i - 2])\n            itr = len(pos)\n            while itr > 0:\n                if itr == 1 or rec[itr] == ls[pos[itr - 1]] + rec[itr - 2]:\n                    ls[pos[itr - 1]] = -ls[pos[itr - 1]]\n                    itr -= 2\n                else:\n                    itr -= 1\n        ind += 1\n    for i in ls:\n        print(i, end=' ')\n    print()", "tests = int(input())\nfor _ in range(tests):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    if ls[0] < ls[1]:\n        ls[0] = -ls[0]\n    if ls[-1] < ls[-2]:\n        ls[-1] = -ls[-1]\n    for i in range(1, n - 1):\n        if ls[i] < ls[i - 1] and ls[i] < ls[i + 1]:\n            ls[i] = -ls[i]\n    ind = 1\n    while ind < n - 1:\n        started = False\n        pos = []\n        while ind < n - 1 and ls[ind] + ls[ind - 1] + ls[ind + 1] <= 0:\n            if not started:\n                pos.append(ind - 1)\n                pos.append(ind + 1)\n                started = True\n            else:\n                pos.append(ind + 1)\n            ind += 2\n        if started:\n            rec = [0] * (len(pos) + 1)\n            for i in pos:\n                ls[i] = -ls[i]\n            rec[0] = 0\n            rec[1] = ls[pos[0]]\n            for i in range(2, len(pos) + 1):\n                rec[i] = max(rec[i - 1], ls[pos[i - 1]] + rec[i - 2])\n            itr = len(pos)\n            while itr > 0:\n                if itr == 1 or rec[itr] == ls[pos[itr - 1]] + rec[itr - 2]:\n                    ls[pos[itr - 1]] = -ls[pos[itr - 1]]\n                    itr -= 2\n                else:\n                    itr -= 1\n        ind += 1\n    for i in ls:\n        print(i, end=' ')\n    print()", "tests = int(input())\nfor _ in range(tests):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    if ls[0] < ls[1]:\n        ls[0] = -ls[0]\n    if ls[-1] < ls[-2]:\n        ls[-1] = -ls[-1]\n    for i in range(1, n - 1):\n        if ls[i] < ls[i - 1] and ls[i] < ls[i + 1]:\n            ls[i] = -ls[i]\n    ind = 1\n    while ind < n - 1:\n        started = False\n        pos = []\n        while ind < n - 1 and ls[ind] + ls[ind - 1] + ls[ind + 1] <= 0:\n            if not started:\n                pos.append(ind - 1)\n                pos.append(ind + 1)\n                started = True\n            else:\n                pos.append(ind + 1)\n            ind += 2\n        if started:\n            rec = [0] * (len(pos) + 1)\n            for i in pos:\n                ls[i] = -ls[i]\n            rec[0] = 0\n            rec[1] = ls[pos[0]]\n            for i in range(2, len(pos) + 1):\n                rec[i] = max(rec[i - 1], ls[pos[i - 1]] + rec[i - 2])\n            itr = len(pos)\n            while itr > 0:\n                if itr == 1 or rec[itr] == ls[pos[itr - 1]] + rec[itr - 2]:\n                    ls[pos[itr - 1]] = -ls[pos[itr - 1]]\n                    itr -= 2\n                else:\n                    itr -= 1\n        ind += 1\n    for i in ls:\n        print(i, end=' ')\n    print()", "tests = int(input())\nfor _ in range(tests):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    if ls[0] < ls[1]:\n        ls[0] = -ls[0]\n    if ls[-1] < ls[-2]:\n        ls[-1] = -ls[-1]\n    for i in range(1, n - 1):\n        if ls[i] < ls[i - 1] and ls[i] < ls[i + 1]:\n            ls[i] = -ls[i]\n    ind = 1\n    while ind < n - 1:\n        started = False\n        pos = []\n        while ind < n - 1 and ls[ind] + ls[ind - 1] + ls[ind + 1] <= 0:\n            if not started:\n                pos.append(ind - 1)\n                pos.append(ind + 1)\n                started = True\n            else:\n                pos.append(ind + 1)\n            ind += 2\n        if started:\n            rec = [0] * (len(pos) + 1)\n            for i in pos:\n                ls[i] = -ls[i]\n            rec[0] = 0\n            rec[1] = ls[pos[0]]\n            for i in range(2, len(pos) + 1):\n                rec[i] = max(rec[i - 1], ls[pos[i - 1]] + rec[i - 2])\n            itr = len(pos)\n            while itr > 0:\n                if itr == 1 or rec[itr] == ls[pos[itr - 1]] + rec[itr - 2]:\n                    ls[pos[itr - 1]] = -ls[pos[itr - 1]]\n                    itr -= 2\n                else:\n                    itr -= 1\n        ind += 1\n    for i in ls:\n        print(i, end=' ')\n    print()", "from math import inf\n\ndef mylogic(n, _a):\n    a = _a[:]\n    if n == 2:\n        if a[0] > a[1]:\n            a[1] *= -1\n        elif a[1] > a[0]:\n            a[0] *= -1\n        print(str(a[0]), str(a[1]))\n        return\n    ppp = [[0, 0] for i in range(n)]\n    npp = [[0, 0] for i in range(n)]\n    pnp = [[0, 0] for i in range(n)]\n    ppn = [[0, 0] for i in range(n)]\n    npn = [[0, 0] for i in range(n)]\n    ppp[0] = [a[0], 0]\n    ppp[1] = [ppp[0][0] + a[1], 0]\n    ppp[2] = [ppp[1][0] + a[2], 0]\n    npp[0] = [inf, 1]\n    npp[1] = [a[1] - a[0] if a[1] > a[0] else inf, 1]\n    npp[2] = [npp[1][0] + a[2], 1]\n    pnp[0] = [a[0], 2]\n    pnp[1] = [a[0] - a[1] if a[0] > a[1] else inf, 2]\n    pnp[2] = [pnp[1][0] + a[2] if a[2] > a[1] else inf, 2]\n    ppn[0] = [a[0], 3]\n    ppn[1] = [a[0] + a[1], 3]\n    ppn[2] = [ppn[1][0] - a[2] if a[1] > a[2] else inf, 3]\n    npn[0] = [inf, 4]\n    npn[1] = [a[1] - a[0] if a[1] > a[0] else inf, 4]\n    npn[2] = [npn[1][0] - a[2] if a[1] > a[2] and a[1] > a[0] + a[2] else inf, 4]\n    for i in range(3, n):\n        if ppp[i - 1][0] > npp[i - 1][0]:\n            ppp[i] = [npp[i - 1][0] + a[i], 1]\n        else:\n            ppp[i] = [ppp[i - 1][0] + a[i], 0]\n        npp[i] = [pnp[i - 1][0] + a[i], 2]\n        if a[i] > a[i - 1]:\n            if ppn[i - 1][0] > npn[i - 1][0]:\n                pnp[i] = [npn[i - 1][0] + a[i], 4]\n            else:\n                pnp[i] = [ppn[i - 1][0] + a[i], 3]\n        else:\n            pnp[i] = [inf, -1]\n        if a[i - 1] > a[i]:\n            if npp[i - 1][0] > ppp[i - 1][0]:\n                ppn[i] = [ppp[i - 1][0] - a[i], 0]\n            else:\n                ppn[i] = [npp[i - 1][0] - a[i], 1]\n        else:\n            ppn[i] = [inf, -1]\n        if a[i - 1] > a[i] and a[i - 1] > a[i] + a[i - 2]:\n            npn[i] = [pnp[i - 1][0] - a[i], 2]\n        else:\n            npn[i] = [inf, -1]\n    value = inf\n    m = -1\n    it = 0\n    minit = -1\n    for l in [ppp, npp, pnp, ppn, npn]:\n        if value > l[-1][0]:\n            value = l[-1][0]\n            minit = it\n            m = l\n        it += 1\n    if n > 3 and minit > 2:\n        a[-1] *= -1\n    m = m[-1][1]\n    data = [True, None]\n    if m == 0:\n        data = [True, ppp]\n    elif m == 1:\n        data = [True, npp]\n    elif m == 2:\n        data = [True, pnp]\n    elif m == 3:\n        data = [False, ppn]\n    else:\n        data = [False, npn]\n    for i in range(n - 1, 3, -1):\n        if not data[0]:\n            a[i - 1] *= -1\n        m = data[1][i - 1][1]\n        if m == 0:\n            data = [True, ppp]\n        elif m == 1:\n            data = [True, npp]\n        elif m == 2:\n            data = [True, pnp]\n        elif m == 3:\n            data = [False, ppn]\n        else:\n            data = [False, npn]\n    if data[1] == ppp:\n        pass\n    elif data[1] == npp:\n        a[0] *= -1\n    elif data[1] == pnp:\n        a[1] *= -1\n    elif data[1] == ppn:\n        a[2] *= -1\n    else:\n        a[0] *= -1\n        a[2] *= -1\n    print(' '.join([str(e) for e in a]))\n\ndef brute(n, _a):\n    minsum = inf\n    ans = None\n    for i in range(0, 2 ** n):\n        a = _a[:]\n        x = i\n        for j in range(n - 1, -1, -1):\n            if x & 1:\n                a[j] *= -1\n            x >>= 1\n        flag = True\n        for j in range(0, n - 1):\n            if a[j] + a[j + 1] <= 0:\n                flag = False\n                break\n        if flag:\n            for j in range(0, n - 2):\n                if a[j] + a[j + 1] + a[j + 2] <= 0:\n                    flag = False\n                    break\n        if flag:\n            if sum(a) < minsum:\n                minsum = sum(a)\n                ans = a[:]\n    return ans\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    mylogic(n, a)\n    t -= 1", "tests = int(input())\nfor _ in range(tests):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    if ls[0] < ls[1]:\n        ls[0] = -ls[0]\n    if ls[-1] < ls[-2]:\n        ls[-1] = -ls[-1]\n    for i in range(1, n - 1):\n        if ls[i] < ls[i - 1] and ls[i] < ls[i + 1]:\n            ls[i] = -ls[i]\n    ind = 1\n    while ind < n - 1:\n        started = False\n        pos = []\n        while ind < n - 1 and ls[ind] + ls[ind - 1] + ls[ind + 1] <= 0:\n            if not started:\n                pos.append(ind - 1)\n                pos.append(ind + 1)\n                started = True\n            else:\n                pos.append(ind + 1)\n            ind += 2\n        if started:\n            rec = [0] * (len(pos) + 1)\n            for i in pos:\n                ls[i] = -ls[i]\n            rec[0] = 0\n            rec[1] = ls[pos[0]]\n            for i in range(2, len(pos) + 1):\n                rec[i] = max(rec[i - 1], ls[pos[i - 1]] + rec[i - 2])\n            itr = len(pos)\n            while itr > 0:\n                if itr == 1 or rec[itr] == ls[pos[itr - 1]] + rec[itr - 2]:\n                    ls[pos[itr - 1]] = -ls[pos[itr - 1]]\n                    itr -= 2\n                else:\n                    itr -= 1\n        ind += 1\n    for i in ls:\n        print(i, end=' ')\n    print()", "tc = int(input())\nwhile tc > 0:\n    n = int(input())\n    array = list(map(int, input().split()))\n    ans = [0] * n\n    if n == 2:\n        if array[0] < array[1]:\n            ans[0] = -array[0]\n            ans[1] = array[1]\n        elif array[0] == array[1]:\n            ans[0] = array[0]\n            ans[1] = array[1]\n        else:\n            ans[0] = array[0]\n            ans[1] = -array[1]\n        for i in ans:\n            print(i, end=' ')\n        print()\n        tc -= 1\n        continue\n    inf = 10 ** 14 + 1\n    dp = [[inf, inf] for i in range(n)]\n    parent = [[-1, -1] for i in range(n)]\n    dp[0][0] = array[0]\n    dp[0][1] = -array[0]\n    if array[0] >= array[1]:\n        dp[0][1] = inf\n    dp[1][0] = min(dp[0][0], dp[0][1]) + array[1]\n    if dp[0][0] < dp[0][1]:\n        parent[1][0] = 0\n    else:\n        parent[1][0] = 1\n    dp[1][1] = dp[0][0] - array[1]\n    parent[1][1] = 0\n    if array[1] >= array[0] or (n >= 3 and array[1] >= array[2] or n == 2):\n        dp[1][1] = inf\n    for i in range(2, n):\n        dp[i][0] = min(array[i] + dp[i - 1][0], array[i] + dp[i - 1][1])\n        if dp[i - 1][0] < dp[i - 1][1]:\n            parent[i][0] = 0\n        else:\n            parent[i][0] = 1\n        check = True\n        check = check and array[i] < array[i - 1]\n        next = inf\n        prev = array[i - 1]\n        if i < n - 1:\n            next = array[i + 1]\n        check = check and array[i] < next\n        if not check:\n            continue\n        pprev = array[i - 2]\n        opt1 = inf\n        if prev - pprev - array[i] > 0:\n            opt1 = dp[i - 2][1] + array[i - 1] - array[i]\n        opt2 = dp[i - 2][0] + array[i - 1] - array[i]\n        dp[i][1] = min(opt1, opt2)\n        if opt1 < opt2:\n            parent[i][1] = 1\n        else:\n            parent[i][1] = 0\n    s = -100\n    if dp[n - 1][0] < dp[n - 1][1]:\n        s = 0\n    else:\n        s = 1\n    ind = n - 1\n    while ind >= 0:\n        cur = array[ind]\n        if s == 1:\n            cur *= -1\n        ans[ind] = cur\n        if ind == 0:\n            break\n        temp = parent[ind][s]\n        if s == 1:\n            ans[ind - 1] = array[ind - 1]\n            ind -= 1\n        s = temp\n        ind -= 1\n    for i in ans:\n        print(i, end=' ')\n    print()\n    tc -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    sothik = False\n    baash = -1\n    index = []\n    starting = -1\n    for gh in range(n):\n        if gh == 0:\n            if a[gh + 1] > a[gh]:\n                baash = gh\n                continue\n            continue\n        if gh == n - 1:\n            if a[gh - 1] > a[gh]:\n                if baash == -1:\n                    baash = gh\n                else:\n                    if gh - baash == 2 and a[gh] + a[baash] >= a[gh - 1]:\n                        if sothik == False:\n                            sothik = True\n                            starting = baash\n                    else:\n                        if sothik == True:\n                            index.append((starting, baash))\n                        else:\n                            a[baash] *= -1\n                        starting = -1\n                        sothik = False\n                    baash = gh\n            continue\n        if a[gh - 1] > a[gh] and a[gh + 1] > a[gh]:\n            if baash == -1:\n                baash = gh\n            else:\n                if gh - baash == 2 and a[gh] + a[baash] >= a[gh - 1]:\n                    if sothik == False:\n                        sothik = True\n                        starting = baash\n                else:\n                    if sothik == True:\n                        index.append((starting, baash))\n                    else:\n                        a[baash] *= -1\n                    starting = -1\n                    sothik = False\n                baash = gh\n            continue\n    if sothik == True:\n        index.append((starting, baash))\n    elif a[baash] < a[baash - 1]:\n        a[baash] *= -1\n    for gh in range(len(index)):\n        dp = []\n        counter = 0\n        for kk in range(index[gh][0], index[gh][1] + 1, 2):\n            if counter == 0:\n                dp.append(a[kk])\n                counter += 1\n                continue\n            if counter == 1:\n                dp.append(max(dp[0], a[kk]))\n                counter += 1\n                continue\n            dp.append(max(dp[counter - 2] + a[kk], dp[counter - 1]))\n            counter += 1\n        counter = len(dp) - 1\n        kk = index[gh][1]\n        while kk >= index[gh][0]:\n            if counter < 0:\n                break\n            if counter >= 2:\n                if dp[counter] == dp[counter - 2] + a[kk]:\n                    a[index[gh][0] + counter * 2] *= -1\n                    kk -= 2\n                    counter -= 2\n                else:\n                    counter -= 1\n            elif counter == 1:\n                if dp[counter] == a[kk]:\n                    a[index[gh][0] + counter * 2] *= -1\n                    counter = -1\n                else:\n                    counter = 0\n            else:\n                a[index[gh][0] + counter * 2] *= -1\n                counter -= 1\n            kk -= 2\n    print(*a)", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    inp = input().split()\n    A = [int(i) for i in inp]\n    if N == 1:\n        print(-A[0])\n        continue\n    if A[0] < A[1]:\n        A[0] = -A[0]\n    if A[N - 1] < A[N - 2]:\n        A[N - 1] = -A[N - 1]\n    for i in range(1, N - 1):\n        b = A[i]\n        if b < A[i - 1] and b < A[i + 1]:\n            A[i] = -A[i]\n    subs = []\n    start = 0\n    end = 0\n    while start < N - 2:\n        if A[start] > 0:\n            start += 1\n            continue\n        if start == N - 4 or start == N - 3:\n            if A[start] + A[start + 1] + A[start + 2] <= 0:\n                subs.append((start, start + 2))\n            break\n        for i in range(start + 2, N, 2):\n            if A[i] > 0 or A[i - 2] + A[i - 1] + A[i] > 0:\n                break\n        if i == N - 1 or i == N - 2:\n            if A[i] < 0 and A[i - 2] + A[i - 1] + A[i] <= 0:\n                subs.append((start, i))\n            else:\n                subs.append((start, i - 2))\n        elif i > start + 2:\n            subs.append((start, i - 2))\n        start = i\n    for s in subs:\n        start = s[0]\n        end = s[1]\n        if end - start == 2:\n            if A[start] > A[end]:\n                A[start] = -A[start]\n            else:\n                A[end] = -A[end]\n        else:\n            fa = [start]\n            sa = [start + 2]\n            ta = [start, start + 4]\n            fs = A[start]\n            ss = A[start + 2]\n            ts = A[start] + A[start + 4]\n            for i in range(start + 6, end + 1, 2):\n                if ss <= fs:\n                    temps = ss + A[i]\n                    tempa = sa + [i]\n                else:\n                    temps = fs + A[i]\n                    tempa = fa + [i]\n                fa = sa\n                sa = ta\n                fs = ss\n                ss = ts\n                ta = tempa\n                ts = temps\n            if ts <= ss:\n                tempa = ta\n            else:\n                tempa = sa\n            for i in range(start, end + 1, 2):\n                A[i] = -A[i]\n            for i in tempa:\n                A[i] = -A[i]\n    a = ''\n    for i in range(N - 1):\n        a += str(A[i]) + ' '\n    print(a + str(A[-1]))", "def rslv(st, sp):\n    arr = A[st:sp + 1:2]\n    su = [0, 0]\n    ind = [0, 0]\n    (su[0], ind[0]) = (arr[0], [st])\n    (su[1], ind[1]) = (su[0], [st]) if su[0] >= arr[1] else (arr[1], [st + 2])\n    for k in range(2, len(arr)):\n        if su[0] + arr[k] > su[1]:\n            (su[1], ind[1], su[0], ind[0]) = (su[0] + arr[k], ind[0] + [st + 2 * k], su[1], ind[1])\n        else:\n            (su[0], ind[0]) = (su[1], ind[1])\n    for k in ind[1]:\n        A[k] *= -1\nT = int(input())\nfor test_case in range(T):\n    N = int(input())\n    A = [10000000000.0, 10000000000.0] + list(map(int, input().split())) + [10000000000.0]\n    i = 2\n    while i < N + 2:\n        if A[i - 1] > A[i] < A[i + 1]:\n            if A[i - 1] + A[i - 2] - A[i] > 0:\n                A[i] *= -1\n            else:\n                A[i - 2] *= -1\n                sti = i - 2\n                stp = i\n                for j in range(i + 2, N + 2, 2):\n                    if A[j - 1] > A[j] < A[j + 1] and A[j - 1] - A[j - 2] - A[j] < 1:\n                        stp += 2\n                    else:\n                        break\n                rslv(sti, stp)\n                i = stp\n            i += 1\n        i += 1\n    print(*A[2:N + 2])", "from pprint import pprint\nfrom time import time\n\ndef get_input():\n    ip = input().split()\n    ip = [int(i) for i in ip]\n    if len(ip) == 1:\n        return ip[0]\n    return ip\n\ndef get_min_sum(A, i, memo):\n    la = len(A) - i\n    if la <= 2:\n        return [sum(A[-la:]), A[:]]\n    if (la, A[i], A[i + 1], A[i + 2]) in memo:\n        return memo[la, A[i], A[i + 1], A[i + 2]]\n    if sum(A[i:i + 3]) > 0:\n        (sa1, A1) = get_min_sum(A, i + 1, memo)\n        memo[la, A[i], A[i + 1], A[i + 2]] = [A[i] + sa1, A[i:i + 4]]\n        return memo[la, A[i], A[i + 1], A[i + 2]]\n    else:\n        a0 = A[i]\n        a2 = A[i + 2]\n        A[i] = abs(a0)\n        (sb, B1) = get_min_sum(A, i + 1, memo)\n        (sb, B1) = (A[i] + sb, A[i:i + 4])\n        A[i] = a0\n        A[i + 2] = abs(a2)\n        (sc, C1) = get_min_sum(A, i + 1, memo)\n        (sc, C1) = (A[i] + sc, A[i:i + 4])\n        A[i + 2] = a2\n        if sb <= sc and sum(B1[:3]) > 0:\n            memo[la, A[i], A[i + 1], A[i + 2]] = (sb, B1)\n            return (sb, B1)\n        elif sum(C1[:3]) > 0:\n            memo[la, A[i], A[i + 1], A[i + 2]] = (sc, C1)\n            return (sc, C1)\n        else:\n            a0 = A[i]\n            a2 = A[i + 2]\n            A[i] = abs(a0)\n            A[i + 2] = abs(a2)\n            (sd, D1) = get_min_sum(A, i + 1, memo)\n            (sd, D1) = (A[i] + sd, A[i:i + 4])\n            A[i] = a0\n            A[i + 2] = a2\n            memo[la, A[i], A[i + 1], A[i + 2]] = (sd, D1)\n            return (sd, D1)\n\ndef main():\n    N = get_input()\n    A = get_input()\n    N = len(A)\n    if A[0] < A[1]:\n        A[0] = A[0] * -1\n    if A[-1] < A[-2]:\n        A[-1] = A[-1] * -1\n    for i in range(1, len(A) - 1):\n        if abs(A[i]) < abs(A[i + 1]) and abs(A[i]) < abs(A[i - 1]):\n            A[i] = A[i] * -1\n    memo = {}\n    for i in range(len(A) - 3, -1, -1):\n        get_min_sum(A, i, memo)\n    if N < 3:\n        (_, B) = get_min_sum(A, 0, memo)\n    else:\n        B = []\n        (_, T) = memo[N, A[0], A[1], A[2]]\n        i = N\n        while len(T) > 3:\n            B.append(T[0])\n            i = i - 1\n            (_, T) = memo[i, T[1], T[2], T[3]]\n        B = B + T\n    for b in B[:-1]:\n        print(b, end=' ')\n    print(B[-1])\ntests = int(input())\nfor _ in range(tests):\n    main()", "t = int(input())\nfor e in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.append(10 ** 18 + 5)\n    b = []\n    sub = 0\n    i = 0\n    swi = [False for i in range(n)]\n    while i < n:\n        temp = []\n        flag = False\n        while a[i] >= a[i + 1] or (a[i] >= a[i - 1] and i != 0):\n            i += 1\n            if i >= n:\n                flag = True\n                break\n        temp.append(i)\n        i += 2\n        if flag:\n            break\n        while i < n and a[i] < a[i - 1] and (a[i] < a[i + 1]):\n            temp.append(i)\n            i += 2\n        i += 1\n        if len(temp) == 1:\n            sub += a[temp[0]]\n            swi[temp[0]] = True\n        else:\n            b.append(temp)\n    for alt in b:\n        dp = [[0, -1] for i in range(len(alt))]\n        dp[0] = [a[alt[0]], -1]\n        if a[alt[0]] + a[alt[0] + 2] < a[alt[0] + 1]:\n            dp[1] = [dp[0][0], 0]\n        dp[1][0] += a[alt[1]]\n        for i in range(2, len(alt)):\n            dp[i][0] = a[alt[i]]\n            if a[alt[i - 1]] + a[alt[i]] < a[alt[i] - 1] and dp[i - 1] > dp[i - 2]:\n                dp[i][0] += dp[i - 1][0]\n                dp[i][1] = i - 1\n            elif i < 3 or dp[i - 2] > dp[i - 3]:\n                dp[i][0] += dp[i - 2][0]\n                dp[i][1] = i - 2\n            else:\n                dp[i][0] += dp[i - 3][0]\n                dp[i][1] = i - 3\n        sub += max(dp[-1][0], dp[-2][0])\n        if dp[-1] > dp[-2]:\n            pos = len(alt) - 1\n        else:\n            pos = len(alt) - 2\n        while pos != -1:\n            swi[alt[pos]] = True\n            pos = dp[pos][1]\n    for i in range(n):\n        if swi[i]:\n            a[i] *= -1\n    s = ''\n    for i in range(len(a) - 1):\n        s += str(a[i]) + ' '\n    print(*a[:-1])", "t = int(input())\nfor m in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    for i in range(n):\n        if i == 0:\n            if arr[i] < arr[i + 1]:\n                arr[i] = -arr[i]\n        elif i == n - 1:\n            if arr[i] < arr[i - 1]:\n                arr[i] = -arr[i]\n        elif arr[i] < arr[i + 1] and arr[i] < arr[i - 1]:\n            arr[i] = -arr[i]\n    ind = -1\n    index_arr = []\n    for i in range(n):\n        if ind == -1:\n            if arr[i] < 0:\n                index_arr.append(i)\n                ind = i\n        elif arr[i] < 0:\n            if i - ind == 2:\n                if arr[i - 1] + arr[i] + arr[ind] > 0:\n                    index_arr.append(i)\n                ind = i\n            else:\n                index_arr.append(i)\n                ind = i\n    leng = len(index_arr)\n    for i in range(leng):\n        grap = {}\n        prev_inc = {}\n        incl = 0\n        excl = 0\n        end_index = 0\n        if i != leng - 1:\n            for j in range(index_arr[i], index_arr[i + 1], 2):\n                if arr[j] > 0:\n                    break\n                if j == index_arr[i]:\n                    temp = incl\n                    incl = excl + -arr[j]\n                    excl = temp\n                    grap[j] = None\n                    prev_inc[j] = j\n                    end_index = j\n                else:\n                    temp = incl\n                    if incl < excl + -arr[j]:\n                        incl = excl + -arr[j]\n                        end_index = j\n                        if j - 4 >= index_arr[i]:\n                            grap[j] = prev_inc[j - 4]\n                            prev_inc[j] = j\n                        else:\n                            grap[j] = None\n                            prev_inc[j] = j\n                    else:\n                        grap[j] = None\n                        prev_inc[j] = prev_inc[j - 2]\n                    excl = temp\n        else:\n            for j in range(index_arr[i], n, 2):\n                if arr[j] > 0:\n                    break\n                if j == index_arr[i]:\n                    temp = incl\n                    incl = excl + -arr[j]\n                    excl = temp\n                    prev_inc[j] = j\n                    end_index = j\n                    grap[j] = None\n                else:\n                    temp = incl\n                    if incl < excl + -arr[j]:\n                        incl = excl + -arr[j]\n                        end_index = j\n                        if j - 4 >= index_arr[i]:\n                            grap[j] = prev_inc[j - 4]\n                            prev_inc[j] = j\n                        else:\n                            grap[j] = None\n                            prev_inc[j] = j\n                    else:\n                        grap[j] = None\n                        prev_inc[j] = prev_inc[j - 2]\n                    excl = temp\n        grap2 = {}\n        start = end_index\n        while 1:\n            grap2[start] = 1\n            if grap[start] == None:\n                break\n            else:\n                start = grap[start]\n        if i != leng - 1:\n            for j in range(index_arr[i], index_arr[i + 1], 2):\n                if arr[j] > 0:\n                    break\n                try:\n                    lpo = grap2[j]\n                except:\n                    arr[j] = -arr[j]\n        else:\n            for j in range(index_arr[i], n, 2):\n                if arr[j] > 0:\n                    break\n                try:\n                    lpo = grap2[j]\n                except:\n                    arr[j] = -arr[j]\n    for i in range(n):\n        print(str(arr[i]) + ' ', end='')\n    print()", "from pprint import pprint\n\ndef f(i, N, A):\n    if i >= N:\n        return 0\n    val = A[i] + f(i + 1, N, A)\n    if (i == N - 1 or A[i] < A[i + 1]) and (i == 0 or A[i] < A[i - 1]):\n        if i < N - 2:\n            if -A[i] + A[i + 1] - A[i + 2] > 0:\n                val = min(-A[i] + A[i + 1] + f(i + 2, N, A), val)\n            else:\n                val = min(-A[i] + A[i + 1] + A[i + 2] + f(i + 3, N, A), val)\n        else:\n            val = min(-A[i] + (A[i + 1] if i != N - 1 else 0), val)\n    print(i, val)\n    return val\n\ndef dp(N, A):\n    total = sum(A)\n    Mem = [total for n in range(N + 1)]\n    Mem[N] = 0\n    for i in reversed(range(N)):\n        val = A[i] + Mem[i + 1]\n        if (i == N - 1 or A[i] < A[i + 1]) and (i == 0 or A[i] < A[i - 1]):\n            if i < N - 2:\n                if -A[i] + A[i + 1] - A[i + 2] > 0:\n                    val = min(-A[i] + A[i + 1] + Mem[i + 2], val)\n                else:\n                    val = min(-A[i] + A[i + 1] + A[i + 2] + Mem[i + 3], val)\n            else:\n                val = min(-A[i] + (A[i + 1] if i != N - 1 else 0), val)\n        Mem[i] = val\n    result = A[:]\n    i = 0\n    while i < N:\n        val = A[i] + Mem[i + 1]\n        if (i == N - 1 or A[i] < A[i + 1]) and (i == 0 or A[i] < A[i - 1]):\n            if i < N - 2:\n                if -A[i] + A[i + 1] - A[i + 2] > 0:\n                    if -A[i] + A[i + 1] + Mem[i + 2] <= val:\n                        result[i] = -result[i]\n                        i = i + 2\n                    else:\n                        i = i + 1\n                elif -A[i] + A[i + 1] + A[i + 2] + Mem[i + 3] <= val:\n                    result[i] = -result[i]\n                    i = i + 3\n                else:\n                    i = i + 1\n            elif -A[i] + (A[i + 1] if i != N - 1 else 0) <= val:\n                result[i] = -result[i]\n                i = N\n            else:\n                i = i + 1\n        else:\n            i = i + 1\n    return result\n\ndef ff(i, AA, N, A):\n    if i == N:\n        prefixSum = {-1: 0, -2: 0}\n        for i in range(N):\n            prefixSum[i] = AA[i] + prefixSum[i - 1]\n        for i in range(N):\n            for j in range(i + 1, N):\n                if prefixSum[j] - prefixSum[i - 1] <= 0:\n                    return (sum(A), A)\n        return (sum(AA), AA)\n    (val1, val2) = (ff(i + 1, AA + [-A[i]], N, A), ff(i + 1, AA + [A[i]], N, A))\n    if val1[0] < val2[0]:\n        return val1\n    else:\n        return val2\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    result = dp(N, A)\n    for a in result:\n        print(a, end=' ')\n    print()", "T = int(input())\nfor l in range(T):\n    N = int(input())\n    arr = input().split(' ')\n    signs = []\n    for p in range(N):\n        signs.append(0)\n        arr[p] = int(arr[p])\n    count = 0\n    if arr[0] < arr[1]:\n        signs[0] = -1\n        count += 1\n    if arr[N - 1] < arr[N - 2]:\n        signs[-1] = -1\n        count += 1\n    for k in range(1, N - 1):\n        if arr[k] < arr[k + 1] and arr[k] < arr[k - 1]:\n            signs[k] = -1\n            count += 1\n\n    def find(ptr):\n        ptr += 1\n        while ptr < N and signs[ptr] == 0:\n            ptr += 1\n        if ptr >= N:\n            ptr = -1\n        return ptr\n\n    def sum(start, end):\n        summer = start + 1\n        sum = 0\n        while summer != end:\n            sum += arr[summer]\n            summer += 1\n        return sum\n    if count >= 2:\n        a = find(-1)\n        b = find(a)\n        c = find(b)\n        while c != -1:\n            if arr[a] + arr[b] >= sum(a, b):\n                if arr[b] + arr[c] >= sum(b, c):\n                    ar = []\n                    ptr = a\n                    include_index = []\n                    while find(ptr) < N and find(ptr) != -1 and (arr[ptr] + arr[find(ptr)] >= sum(ptr, find(ptr))):\n                        ar.append(arr[ptr])\n                        include_index.append(ptr)\n                        ptr = find(ptr)\n                    ar.append(arr[ptr])\n                    include_index.append(ptr)\n                    max_include = []\n                    max_exclude = []\n                    for u in range(len(ar)):\n                        max_include.append(0)\n                        max_exclude.append(0)\n                    max_include[0] = ar[0]\n                    max_exclude[0] = 0\n                    Max = ar[0]\n                    for i in range(1, len(ar)):\n                        max_include[i] = max_exclude[i - 1] + ar[i]\n                        max_exclude[i] = max(max_include[i - 1], max_exclude[i - 1])\n                        Max = max(max_include[i], max_exclude[i])\n                    u = len(ar) - 1\n                    while u > 0:\n                        if max_include[u] <= max_exclude[u]:\n                            signs[include_index[u]] = 0\n                            u -= 1\n                        else:\n                            signs[include_index[u - 1]] = 0\n                            u -= 2\n                    a = ptr\n                    b = find(a)\n                    if b == -1:\n                        c = -1\n                    else:\n                        c = find(b)\n                    continue\n                if arr[b] + arr[c] < sum(b, c):\n                    if arr[a] < arr[b]:\n                        signs[a] = 0\n                        a = b\n                    else:\n                        signs[b] = 0\n                    b = c\n                    c = find(c)\n                    continue\n            if arr[a] + arr[b] < sum(a, b):\n                a = b\n                b = c\n                c = find(c)\n        if c == -1 and b != -1:\n            if arr[a] + arr[b] >= sum(a, b):\n                if arr[a] <= arr[b]:\n                    signs[a] = 0\n                else:\n                    signs[b] = 0\n    meaw = ''\n    for p in range(N):\n        if signs[p] == -1:\n            meaw += str(-1 * arr[p]) + ' '\n        else:\n            meaw += str(arr[p]) + ' '\n    print(meaw)", "def fix_negatives(seq, start, end):\n    seq[start] *= -1\n    excl = (0, ())\n    incl = (seq[start], (start,))\n    for i in range(start + 2, end + 1, 2):\n        seq[i] *= -1\n        tmp = incl\n        if excl[0] + seq[i] > incl[0]:\n            incl = (excl[0] + seq[i], excl[1] + (i,))\n        excl = tmp\n    for i in incl[1]:\n        seq[i] *= -1\n\ndef init_negatives(seq):\n    for i in range(len(seq)):\n        if i == 0:\n            if seq[0] < seq[1]:\n                seq[0] *= -1\n        elif i == len(seq) - 1:\n            if seq[i] < seq[i - 1]:\n                seq[i] *= -1\n        elif seq[i] < seq[i - 1] and seq[i] < seq[i + 1]:\n            seq[i] *= -1\n\ndef solve(seq):\n    init_negatives(seq)\n    i = 0\n    while i < len(seq):\n        start = end = i\n        while i < len(seq) - 2 and seq[i] + seq[i + 1] + seq[i + 2] <= 0:\n            end = i + 2\n            i = i + 2\n        if start != end:\n            fix_negatives(seq, start, end)\n        i = i + 1\n    return seq\n\ndef main():\n    import sys\n    sys.setrecursionlimit(1000000)\n    test_cases = int(sys.stdin.readline())\n    for _ in range(test_cases):\n        seq_len = int(sys.stdin.readline())\n        seq = [int(i) for i in sys.stdin.readline().split()]\n        print(' '.join((str(i) for i in solve(seq))))\nmain()", "class Node:\n\n    def __init__(self, i, last):\n        self.i = i\n        self.last = last\n\ndef is_candidate(i, a):\n    return (i == 0 or a[i] < a[i - 1]) and (i == len(a) - 1 or a[i] < a[i + 1])\n\ndef solve_chain(indecies, a):\n    (last, here) = (0, 0)\n    (last_i, here_i) = (None, None)\n    for i in indecies:\n        if last + a[i] > here:\n            (last, here) = (here, last + a[i])\n            last_i = Node(i, last_i)\n            (last_i, here_i) = (here_i, last_i)\n        else:\n            (last, here) = (here, here)\n            (last_i, here_i) = (here_i, here_i)\n    while here_i is not None:\n        a[here_i.i] = -a[here_i.i]\n        here_i = here_i.last\nfor t in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().strip().split()]\n    indecies = []\n    last_candidate = True\n    for i in range(n):\n        if is_candidate(i, a):\n            if len(indecies) > 0 and i > 1 and (a[i - 2] + a[i] < a[i - 1]):\n                solve_chain(indecies, a)\n                indecies = []\n            indecies.append(i)\n            last_candidate = True\n        elif last_candidate:\n            last_candidate = False\n        elif len(indecies) > 0:\n            solve_chain(indecies, a)\n            indecies = []\n    if len(indecies) > 0:\n        solve_chain(indecies, a)\n    print(*a)", "def is_candidate(i, a):\n    return (i == 0 or a[i] < a[i - 1]) and (i == len(a) - 1 or a[i] < a[i + 1])\n\ndef solve_chain(indecies, a):\n    (last, here) = (0, 0)\n    (last_i, here_i) = ([], [])\n    for i in indecies:\n        if last + a[i] > here:\n            (last, here) = (here, last + a[i])\n            last_i.append(i)\n            (last_i, here_i) = (here_i, last_i)\n        else:\n            (last, here) = (here, here)\n            (last_i, here_i) = (here_i, here_i[:])\n    for i in here_i:\n        a[i] = -a[i]\nfor t in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().strip().split()]\n    indecies = []\n    last_candidate = True\n    for i in range(n):\n        if is_candidate(i, a):\n            if len(indecies) > 0 and i > 1 and (a[i - 2] + a[i] < a[i - 1]):\n                solve_chain(indecies, a)\n                indecies = []\n            indecies.append(i)\n            last_candidate = True\n        elif last_candidate:\n            last_candidate = False\n        elif len(indecies) > 0:\n            solve_chain(indecies, a)\n            indecies = []\n    if len(indecies) > 0:\n        solve_chain(indecies, a)\n    print(*a)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    all = []\n    totka = -1\n    flag = False\n    z = -1\n    for j in range(n):\n        if j == 0:\n            if a[j + 1] > a[j]:\n                totka = j\n                continue\n            continue\n        if j == n - 1:\n            if a[j - 1] > a[j]:\n                if totka == -1:\n                    totka = j\n                else:\n                    if j - totka == 2 and a[j] + a[totka] >= a[j - 1]:\n                        if flag == False:\n                            flag = True\n                            z = totka\n                    else:\n                        if flag == True:\n                            all.append((z, totka))\n                        else:\n                            a[totka] *= -1\n                        z = -1\n                        flag = False\n                    totka = j\n            continue\n        if a[j - 1] > a[j] and a[j + 1] > a[j]:\n            if totka == -1:\n                totka = j\n            else:\n                if j - totka == 2 and a[j] + a[totka] >= a[j - 1]:\n                    if flag == False:\n                        flag = True\n                        z = totka\n                else:\n                    if flag == True:\n                        all.append((z, totka))\n                    else:\n                        a[totka] *= -1\n                    z = -1\n                    flag = False\n                totka = j\n            continue\n    if flag == True:\n        all.append((z, totka))\n    elif a[totka] < a[totka - 1]:\n        a[totka] *= -1\n    for j in range(len(all)):\n        cc = 0\n        ss = 0\n        xy = 1\n        vv = 0\n        sum = []\n        for k in range(all[j][0], all[j][1] + 1, 2):\n            if cc == 0:\n                sum.append(a[k])\n                cc += 1\n                continue\n            if cc == 1:\n                sum.append(max(sum[0], a[k]))\n                cc += 1\n                continue\n            sum.append(max(sum[cc - 2] + a[k], sum[cc - 1]))\n            cc += 1\n        rr = []\n        cc = len(sum) - 1\n        k = all[j][1]\n        while k >= all[j][0] - 1:\n            if cc < 0:\n                break\n            if cc >= 2:\n                if sum[cc] == sum[cc - 2] + a[k]:\n                    rr.append(cc)\n                    k -= 2\n                    cc -= 2\n                else:\n                    cc -= 1\n            elif cc == 1:\n                if sum[cc] == a[k]:\n                    rr.append(cc)\n                    cc = -1\n                else:\n                    cc = 0\n            else:\n                rr.append(cc)\n                cc -= 1\n            k -= 2\n        for k in range(len(rr)):\n            a[all[j][0] + rr[k] * 2] *= -1\n    for j in range(n):\n        print(a[j], end=' ')\n    print()", "T = int(input())\nfor q in range(0, T):\n    N = int(input())\n    s = [int(x) for x in input().split()]\n    R = [1] * N\n    s = [s[0] + 1] + s + [s[-1] + 1]\n    L = []\n    for i in range(1, len(s) - 1):\n        if s[i] < s[i - 1] and s[i] < s[i + 1]:\n            L.append(i - 1)\n    s = s[1:len(s) - 1]\n    G = []\n    for i in range(0, len(L) - 1):\n        if L[i] != L[i + 1] - 2:\n            G.append(0)\n        elif s[L[i]] + s[L[i + 1]] < s[L[i] + 1]:\n            G.append(0)\n        else:\n            G.append(1)\n    if len(L) > 0:\n        C = [L[0]]\n        K = [s[L[0]]]\n        for i in range(0, len(G)):\n            if G[i] == 0:\n                R[L[i + 1]] = -1\n                incl = 0\n                excl = 0\n                L1 = []\n                L2 = []\n                G1 = []\n                for j in range(0, len(K)):\n                    F1 = L1\n                    old_incl = incl\n                    if incl != max(excl + K[j], incl):\n                        L1 = G1 + [j]\n                    else:\n                        L1 = L1\n                    incl = max(excl + K[j], incl)\n                    excl = old_incl\n                    G1 = F1\n                L1.append(len(C) + 100)\n                temp = 0\n                for j in range(0, len(C)):\n                    if j == L1[temp]:\n                        temp = temp + 1\n                    else:\n                        L2.append(j)\n                L1 = L1[:len(L1) - 1]\n                for j in range(0, len(L1)):\n                    R[C[L1[j]]] = -1\n                for j in range(0, len(L2)):\n                    R[C[L2[j]]] = 1\n                C = [L[i + 1]]\n                K = [s[L[i + 1]]]\n            else:\n                C.append(L[i + 1])\n                K.append(s[L[i + 1]])\n        incl = 0\n        excl = 0\n        L1 = []\n        L2 = []\n        G1 = []\n        for i in range(0, len(K)):\n            F1 = L1\n            old_incl = incl\n            if incl != max(excl + K[i], incl):\n                L1 = G1 + [i]\n            else:\n                L1 = L1\n            incl = max(excl + K[i], incl)\n            excl = old_incl\n            G1 = F1\n        L1.append(len(C) + 100)\n        temp = 0\n        for i in range(0, len(C)):\n            if i == L1[temp]:\n                temp = temp + 1\n            else:\n                L2.append(i)\n        L1 = L1[:len(L1) - 1]\n        for i in range(0, len(L1)):\n            R[C[L1[i]]] = -1\n        for i in range(0, len(L2)):\n            R[C[L2[i]]] = 1\n        for i in range(0, N):\n            print(s[i] * R[i], end=' ')\n        print(' ')\n    else:\n        for i in range(0, N):\n            print(s[i], end=' ')\n        print(' ')", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if l[0] > l[1]:\n        l[1] = -l[1]\n    if l[0] < l[1]:\n        l[0] = -l[0]\n    if len(l) > 2:\n        for i in range(2, len(l)):\n            if l[i] + l[i - 1] <= 0:\n                l[i - 1] = -l[i - 1]\n            if l[i] < l[i - 1]:\n                l[i] = -l[i]\n        s = []\n        for i in range(len(l) - 2):\n            s.append(l[i] + l[i + 1] + l[i + 2])\n        i = 0\n        while i < len(s):\n            if s[i] <= 0:\n                j = i\n                while j < len(s):\n                    if s[j] <= 0:\n                        j = j + 2\n                        continue\n                    if s[j] > 0:\n                        j = j - 2\n                        break\n                if j >= len(s):\n                    j = j - 2\n                s1 = 0\n                s2 = 0\n                x = j + 2\n                p = i\n                s1 = l[p]\n                s2 = l[p + 2]\n                s1l = [p]\n                s2l = [p + 2]\n                p = p + 4\n                while p <= x:\n                    if s1 > s2:\n                        s1 = s1 + l[p]\n                        s1l = s1l + [p]\n                    else:\n                        s1 = s2 + l[p]\n                        s1l = s2l + [p]\n                    if p + 2 <= x:\n                        if s2 < s1:\n                            s2 = s1 + l[p + 2]\n                            s2l = s1l + [p + 2]\n                        else:\n                            s2 = s2 + l[p + 2]\n                            s2l = s2l + [p + 2]\n                    p = p + 4\n                if s1 > s2:\n                    p = i\n                    for j in range(len(s1l)):\n                        l[s1l[j]] = -l[s1l[j]]\n                else:\n                    for j in range(len(s2l)):\n                        l[s2l[j]] = -l[s2l[j]]\n                i = x + 1\n            else:\n                i = i + 1\n    for i in range(len(l)):\n        print(l[i], end=' ')\n    print('')", "t = int(input())\ninf = 10 ** 16\nfor _ in range(t):\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    C = [0]\n    for a in A:\n        C.append(C[-1] + a)\n    A.append(inf)\n    poss = []\n    for i in range(n):\n        if A[i - 1] > A[i] and A[i] < A[i + 1]:\n            poss.append(i)\n    del A[-1]\n    if poss:\n        D = [[None] * 2 for _ in range(len(poss))]\n        D[0][0] = 0\n        D[0][1] = A[poss[0]]\n        for i in range(len(poss) - 1):\n            D[i + 1][0] = max(D[i][0], D[i][1])\n            D[i + 1][1] = D[i][C[poss[i + 1]] - C[poss[i]] - 2 * A[poss[i]] - A[poss[i + 1]] > 0 and D[i][1] >= D[i][0]] + A[poss[i + 1]]\n        if D[-1][1] >= D[-1][0]:\n            h = 1\n            A[poss[-1]] *= -1\n        else:\n            h = 0\n        for i in reversed(range(len(D) - 1)):\n            if h:\n                if D[i][1] + abs(A[poss[i + 1]]) == D[i + 1][1] and (not D[i][0] + abs(A[poss[i + 1]]) == D[i + 1][1]):\n                    h = 1\n                    A[poss[i]] *= -1\n                else:\n                    h = 0\n            elif D[i][1] == D[i + 1][0]:\n                h = 1\n                A[poss[i]] *= -1\n            else:\n                h = 0\n    print(*A)", "t = int(input())\ninf = 10 ** 14 + 1\nfor rr in range(t):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    dp = [[inf, inf] for i in range(n)]\n    dp[0][0] = a[0]\n    dp[0][1] = -a[0]\n    for i in range(1, n):\n        if a[i] - a[i - 1] > 0:\n            dp[i][0] = min(dp[i][0], dp[i - 1][1] + a[i])\n        dp[i][0] = min(dp[i][0], dp[i - 1][0] + a[i])\n        if i == 1:\n            if a[i - 1] - a[i] > 0:\n                dp[i][1] = dp[i - 1][0] - a[i]\n        else:\n            if a[i - 1] - a[i] - a[i - 2] > 0:\n                dp[i][1] = min(dp[i][1], dp[i - 2][1] + a[i - 1] - a[i])\n            if a[i - 1] - a[i] > 0:\n                dp[i][1] = min(dp[i][1], dp[i - 2][0] + a[i - 1] - a[i])\n    mn = min(dp[n - 1][0], dp[n - 1][1])\n    ans = []\n    ls = 1\n    if dp[n - 1][0] == mn:\n        ans.append(a[n - 1])\n    else:\n        ans.append(-a[n - 1])\n        ls = -1\n    i = n - 2\n    while i >= 0:\n        if i == 0:\n            if ls == 1:\n                if dp[i][1] + a[i + 1] == dp[i + 1][0]:\n                    ans.append(-a[i])\n                    ls = -1\n                elif dp[i][0] + a[i + 1] == dp[i + 1][0]:\n                    ans.append(a[i])\n            else:\n                ans.append(a[i])\n        elif ls == 1:\n            if dp[i][1] + a[i + 1] == dp[i + 1][0] and a[i + 1] - a[i] > 0:\n                ans.append(-a[i])\n                ls = -1\n            elif dp[i][0] + a[i + 1] == dp[i + 1][0]:\n                ans.append(a[i])\n        elif dp[i - 1][1] + a[i] - a[i + 1] == dp[i + 1][1] and a[i] - a[i - 1] - a[i + 1] > 0:\n            ans.append(a[i])\n            ans.append(-a[i - 1])\n            i -= 1\n        elif dp[i - 1][0] + a[i] - a[i + 1] == dp[i + 1][1] and a[i] - a[i + 1] > 0:\n            ans.append(a[i])\n            ans.append(a[i - 1])\n            i -= 1\n            ls = 1\n        i -= 1\n    st = ''\n    for j in range(n - 1, -1, -1):\n        st += str(ans[j]) + ' '\n    print(st)", "import itertools\n\ndef binseq(k):\n    return [''.join(x) for x in itertools.product('01', repeat=k)]\n\ndef sumx(arr, x):\n    arr2 = []\n    for i in range(len(arr) - x + 1):\n        sum1 = 0\n        for j in range(x):\n            sum1 += arr[i + j]\n        arr2.append(sum1)\n    return arr2\n\ndef recPath(arr, n):\n    arr3 = []\n    for i in range(n - 3):\n        arr3.append(0)\n    arr3.append(arr[-1] + arr[-3])\n    arr3.append(arr[-2])\n    arr3.append(arr[-1])\n    arr4 = []\n    for i in range(n):\n        arr4.append(0)\n    arr4[-3] = n - 1\n    for i in range(len(arr) - 4, 0, -1):\n        if arr3[i + 2] > arr3[i + 3]:\n            val = arr3[i + 2]\n            ch = i + 2\n        else:\n            val = arr3[i + 3]\n            ch = i + 3\n        arr3[i] = arr[i] + val\n        arr4[i] = ch\n    if arr3[1] > arr3[2]:\n        stP = 1\n    else:\n        stP = 2\n    return (arr4, stP, arr3)\n\ndef checkThree(arr):\n    for i in range(len(arr) - 2):\n        if arr[i] + arr[i + 1] + arr[i + 2] <= 0:\n            return False\n    return True\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 2:\n        if arr[0] > arr[1]:\n            arr[1] = -arr[1]\n        elif arr[0] < arr[1]:\n            arr[0] = -arr[0]\n        print(' '.join((str(e) for e in arr)))\n        continue\n    arro = list(arr)\n    if arr[1] > arr[0]:\n        arr[0] = -arr[0]\n    for f in range(1, n - 1):\n        if arr[f] < arr[f + 1] and arr[f - 1] > arr[f]:\n            arr[f] = -arr[f]\n    if arr[-1] < arr[-2]:\n        arr[-1] = -arr[-1]\n    if n == 3:\n        if arr[0] < 0:\n            if arr[2] < 0:\n                if arr[0] + arr[1] + arr[2] < 0:\n                    if arr[0] < arr[2]:\n                        arr[2] = -arr[2]\n                    else:\n                        arr[0] = -arr[0]\n        print(' '.join((str(e) for e in arr)))\n        continue\n    if n < 1:\n        maxm = 10000000\n        maxarr = []\n        noOfNeg = 0\n        arrneg = []\n        for j in range(len(arr)):\n            if arr[j] < 0:\n                noOfNeg += 1\n                arrneg.append(j)\n        arrbin = binseq(noOfNeg)\n        for j in range(2 ** noOfNeg):\n            current = arrbin[j]\n            arro = list(arr)\n            for k in range(noOfNeg):\n                place = arrneg[k]\n                if current[k] == '0':\n                    arro[place] = -arro[place]\n            ans = checkThree(arro)\n            if ans == True and sum(arro) < maxm:\n                maxm = sum(arro)\n                maxarr = arro\n        print(' '.join((str(e) for e in maxarr)))\n    else:\n        arrTotal = []\n        arrTotal2 = []\n        arrtemp = [0]\n        arrtemp2 = [0]\n        for j in range(n - 2):\n            if arr[j] + arr[j + 1] + arr[j + 2] <= 0:\n                if -arrtemp[-1] != arr[j]:\n                    arrtemp.append(-arr[j])\n                    arrtemp2.append(j)\n                arrtemp.append(-arr[j + 2])\n                arrtemp2.append(j + 2)\n            if arr[j] + arr[j + 1] + arr[j + 2] > 0 and arr[j] < 0 and (arr[j + 2] < 0):\n                arrTotal.append(arrtemp)\n                arrTotal2.append(arrtemp2)\n                arrtemp2 = [0]\n                arrtemp = [0]\n            if arr[j + 1] > 0 and arr[j + 2] > 0:\n                arrTotal.append(arrtemp)\n                arrTotal2.append(arrtemp2)\n                arrtemp2 = [0]\n                arrtemp = [0]\n        if len(arrtemp) > 1:\n            arrTotal.append(arrtemp)\n            arrTotal2.append(arrtemp2)\n        if n > 3:\n            if arr[3] + arr[2] + arr[1] > 0 and arr[2] + arr[1] + arr[0] > 0 and (arr[1] < 0) and (arro[1] > 0):\n                arro[1] = -arro[1]\n            if arr[2] + arr[1] + arr[0] > 0 and arr[0] < 0 and (arro[0] > 0):\n                arro[0] = -arro[0]\n            for j in range(2, n - 2):\n                if arr[j - 2] + arr[j - 1] + arr[j] > 0 and arr[j - 1] + arr[j] + arr[j + 1] > 0 and (arr[j] + arr[j + 1] + arr[j + 2] > 0) and (arr[j] < 0) and (arro[j] > 0):\n                    arro[j] = -arro[j]\n            if arr[-4] + arr[-3] + arr[-2] > 0 and arr[-3] + arr[-2] + arr[-1] > 0 and (arr[-2] < 0) and (arro[-2] > 0):\n                arro[-2] = -arro[-2]\n            if arr[-3] + arr[-2] + arr[-1] > 0 and arr[-1] < 0 and (arro[-1] > 0):\n                arro[-1] = -arro[-1]\n        elif n == 2:\n            arro = arr\n        elif arr[0] < 0 and arr[2] < 0 and (arr[0] + arr[2] + arr[1] < 0):\n            arro[0] = arr[0]\n        else:\n            arro = arr\n        if n > 3:\n            index = 0\n            for j in range(len(arrTotal)):\n                if len(arrTotal[j]) > 1:\n                    (arr4, stp, arrsum) = recPath(arrTotal[j], len(arrTotal[j]))\n                    while stp != 0:\n                        val = arrTotal[j][stp]\n                        index = arrTotal2[j][stp]\n                        while index < n:\n                            if arro[index] == val and arro[index] > 0:\n                                arro[index] = -arro[index]\n                                break\n                            index += 1\n                        stp = arr4[stp]\n        print(' '.join((str(e) for e in arro)))", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    Alist = list(map(int, input().split()))\n    newList = []\n    count = 0\n    sign = []\n    newindex = []\n    for j in range(N):\n        sign.append(0)\n    if Alist[0] < Alist[1]:\n        newList.append(-Alist[0])\n        newindex.append(0)\n        sign[0] = 1\n    else:\n        newList.append(Alist[0])\n        newindex.append(0)\n        count += 1\n    for j in range(1, N - 1):\n        if Alist[j] < Alist[j - 1] and Alist[j] < Alist[j + 1]:\n            newList.append(-Alist[j])\n            newindex.append(j)\n            sign[j] = 1\n            count = 0\n        else:\n            count += 1\n            if count == 1:\n                newList.append(Alist[j])\n                newindex.append(j)\n            else:\n                newList[-1] += Alist[j]\n    if Alist[N - 1] < Alist[N - 2]:\n        newList.append(-Alist[N - 1])\n        newindex.append(N - 1)\n        sign[N - 1] = 1\n    else:\n        count += 1\n        if count == 1:\n            newList.append(Alist[N - 1])\n            newindex.append(N - 1)\n        else:\n            newList[-1] += Alist[N - 1]\n    N1 = len(newList)\n    ptr = 0\n    if newList[0] > 0:\n        ptr = 1\n    while True:\n        ll = []\n        while True:\n            if ptr + 2 <= N1 - 1 and abs(newList[ptr]) + abs(newList[ptr + 2]) >= newList[ptr + 1]:\n                ll.append(ptr)\n                if ptr + 4 > N1 - 1:\n                    ll.append(ptr + 2)\n                elif abs(newList[ptr + 2]) + abs(newList[ptr + 4]) < newList[ptr + 3]:\n                    ll.append(ptr + 2)\n                ptr += 2\n            else:\n                break\n        pointer = []\n        sums = []\n        for j in range(len(ll)):\n            sums.append(abs(newList[ll[j]]))\n        for j in range(len(ll)):\n            pointer.append(-1)\n        ans = []\n        if len(ll) > 3:\n            sums[2] += sums[0]\n            pointer[2] = 0\n            for j in range(3, len(ll)):\n                if sums[j - 2] > sums[j - 3]:\n                    sums[j] += sums[j - 2]\n                    pointer[j] = j - 2\n                else:\n                    sums[j] += sums[j - 3]\n                    pointer[j] = j - 3\n            if sums[-1] > sums[-2]:\n                start = len(ll) - 1\n            else:\n                start = len(ll) - 2\n            ans.append(ll[start])\n            while pointer[start] != -1:\n                start = pointer[start]\n                ans.append(ll[start])\n            ans.reverse()\n            newans = list(set(ll) - set(ans))\n        elif len(ll) == 3:\n            sums[2] += sums[0]\n            if sums[2] > sums[1]:\n                ans.append(ll[1])\n            else:\n                ans.append(ll[0])\n                ans.append(ll[2])\n        elif len(ll) == 2:\n            if sums[1] > sums[0]:\n                ans.append(ll[0])\n            else:\n                ans.append(ll[1])\n        if len(ll) > 3:\n            for j in range(len(newans)):\n                sign[newindex[newans[j]]] = 0\n        else:\n            for j in range(len(ans)):\n                sign[newindex[ans[j]]] = 0\n        ptr += 2\n        if ptr > N1 - 1:\n            break\n    for j in range(N):\n        if sign[j] == 1:\n            Alist[j] *= -1\n    print(*Alist)", "def find_max_sum(arr):\n    incl = 0\n    excl = 0\n    incll = []\n    excll = []\n    new_excll = []\n    for (index, i) in enumerate(arr):\n        if excl > incl:\n            new_excl = excl\n            new_excll = excll\n        else:\n            new_excl = incl\n            new_excll = incll\n        incl = excl + i\n        incll = excll + [index]\n        excl = new_excl\n        excll = new_excll\n    if excl > incl:\n        return excll\n    else:\n        return incll\nt = int(input())\nwhile t:\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    lr = [int(10000000000.0)] + l + [int(10000000000.0)]\n    l1 = [0 for i in range(n + 2)]\n    l1[0] = 2\n    l1[n + 1] = 2\n    for k in range(1, n + 1):\n        if lr[k - 1] > lr[k] and lr[k + 1] > lr[k]:\n            l1[k] = -1\n        elif lr[k - 1] + lr[k + 1] < lr[k]:\n            l1[k] = 2\n        else:\n            l1[k] = 1\n    lt = []\n    st = -1\n    for u in range(1, n + 2):\n        if l1[u] == 1:\n            if l1[u - 1] != -1:\n                if st != -1:\n                    a = find_max_sum(lt)\n                    for u2 in a:\n                        lr[2 * u2 + st] = -lr[2 * u2 + st]\n                st = -1\n                lt = []\n            else:\n                continue\n        elif l1[u] == 2:\n            if st != -1:\n                a = find_max_sum(lt)\n                for u2 in a:\n                    lr[2 * u2 + st] = -lr[2 * u2 + st]\n            st = -1\n            lt = []\n        else:\n            if st == -1:\n                st = u\n            lt.append(lr[u])\n    print(' '.join(map(str, lr[1:n + 1])))\n    t = t - 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    sign = [[0] * n for _ in range(2)]\n    pr = [0] * n\n    dp = [[0] * n for _ in range(2)]\n    if n > 1:\n        if arr[0] < arr[1]:\n            pr[0] = 1\n    for i in range(1, n - 1):\n        if arr[i - 1] > arr[i] and arr[i] < arr[i + 1]:\n            pr[i] = 1\n    if arr[n - 1] < arr[n - 2]:\n        pr[n - 1] = 1\n    val = 0\n    for i in range(n):\n        if pr[i] > 0:\n            if val == 0:\n                val += 1\n                dp[0][i] = 0\n                dp[1][i] = arr[i]\n                sign[1][i] = 2\n                sign[0][i] = 6\n            elif val == 2:\n                val = 1\n                max1 = -1\n                t = -1\n                if dp[0][i - 2] > dp[1][i - 2]:\n                    max1 = dp[0][i - 2]\n                    t = 0\n                else:\n                    max1 = dp[1][i - 2]\n                    t = 1\n                if arr[i - 2] + arr[i] >= arr[i - 1]:\n                    dp[0][i] = max1\n                    sign[0][i] = t\n                    dp[1][i] = dp[0][i - 2] + arr[i]\n                    sign[1][i] = 0\n                else:\n                    dp[0][i] = max1\n                    sign[0][i] = t\n                    dp[1][i] = max1 + arr[i]\n                    sign[1][i] = t\n        elif pr[i] == 0:\n            if val == 1:\n                val = 2\n            elif val == 2:\n                max1 = -1\n                t = -1\n                if dp[0][i - 2] > dp[1][i - 2]:\n                    t = 0\n                else:\n                    t = 1\n                sign[1][i] = 3 + t\n                sign[0][i] = 3 + t\n                val = 0\n    start = 0\n    if val == 1:\n        max1 = -1\n        t = -1\n        if dp[0][n - 1] > dp[1][n - 1]:\n            t = 0\n        else:\n            t = 1\n        start = t\n    elif val == 2:\n        max1 = -1\n        t = -1\n        if dp[0][n - 2] > dp[1][n - 2]:\n            t = 0\n        else:\n            t = 1\n        start = t\n    down = start\n    for i in reversed(range(n)):\n        if sign[down][i] == 5:\n            if pr[i] > 0 and down > 0:\n                arr[i] = arr[i] * -1\n            down = 1\n        elif sign[down][i] == 4:\n            if pr[i] > 0 and down > 0:\n                arr[i] = arr[i] * -1\n            down = 1\n        elif sign[down][i] == 3:\n            if pr[i] > 0 and down > 0:\n                arr[i] = arr[i] * -1\n            down = 0\n        elif sign[down][i] == 2:\n            if pr[i] > 0 and down > 0:\n                arr[i] = arr[i] * -1\n            down = 1\n        elif sign[down][i] == 6:\n            down = 1\n        elif sign[down][i] == 1:\n            if pr[i] > 0 and down > 0:\n                arr[i] = arr[i] * -1\n            down = 1\n        elif sign[down][i] == 0:\n            if pr[i] > 0 and down > 0:\n                arr[i] = arr[i] * -1\n            if pr[i] > 0:\n                down = 0\n    for num in arr:\n        print(num, end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [float('inf')]\n    temp = list(map(int, input().split()))\n    temp.append(float('inf'))\n    a.extend(temp)\n    for j in range(1, n + 1):\n        if a[j] < a[j - 1] and a[j] < a[j + 1]:\n            a[j] = -1 * a[j]\n    arr = []\n    j = 1\n    c = 0\n    while j <= n - 1:\n        if a[j] + a[j + 1] + a[j + 2] <= 0:\n            c = 1\n            if len(arr) == 0:\n                arr.append(j)\n                arr.append(j + 2)\n            else:\n                arr.append(j + 2)\n            j += 1\n        elif c == 1:\n            if len(arr) > 3:\n                best = []\n                mindis = []\n                for i in range(len(arr)):\n                    best.append(-1)\n                    mindis.append(a[arr[i]])\n                best[-3] = len(arr) - 1\n                mindis[-3] += mindis[-1]\n                for i in range(len(arr) - 4, -1, -1):\n                    if mindis[i + 2] < mindis[i + 3]:\n                        mindis[i] += mindis[i + 2]\n                        best[i] = i + 2\n                    else:\n                        mindis[i] += mindis[i + 3]\n                        best[i] = i + 3\n                if mindis[0] < mindis[1]:\n                    g = 0\n                    for i in range(len(arr)):\n                        if i != g:\n                            a[arr[i]] = -1 * a[arr[i]]\n                        else:\n                            g = best[g]\n                else:\n                    g = 1\n                    for i in range(len(arr)):\n                        if i != g:\n                            a[arr[i]] = -1 * a[arr[i]]\n                        else:\n                            g = best[g]\n            else:\n                (se, so) = (0, 0)\n                for i in range(len(arr)):\n                    if i & 1 == 0:\n                        se += a[arr[i]]\n                    else:\n                        so += a[arr[i]]\n                if se > so:\n                    for i in range(0, len(arr), 2):\n                        a[arr[i]] = -1 * a[arr[i]]\n                else:\n                    for i in range(1, len(arr), 2):\n                        a[arr[i]] = -1 * a[arr[i]]\n            arr = []\n            c = 0\n        j += 1\n    if c == 1:\n        if len(arr) > 3:\n            best = []\n            mindis = []\n            for i in range(len(arr)):\n                best.append(-1)\n                mindis.append(a[arr[i]])\n            best[-3] = len(arr) - 1\n            mindis[-3] += mindis[-1]\n            for i in range(len(arr) - 4, -1, -1):\n                if mindis[i + 2] < mindis[i + 3]:\n                    mindis[i] += mindis[i + 2]\n                    best[i] = i + 2\n                else:\n                    mindis[i] += mindis[i + 3]\n                    best[i] = i + 3\n            if mindis[0] < mindis[1]:\n                g = 0\n                for i in range(len(arr)):\n                    if i != g:\n                        a[arr[i]] = -1 * a[arr[i]]\n                    else:\n                        g = best[g]\n            else:\n                g = 1\n                for i in range(len(arr)):\n                    if i != g:\n                        a[arr[i]] = -1 * a[arr[i]]\n                    else:\n                        g = best[g]\n        else:\n            (se, so) = (0, 0)\n            for i in range(len(arr)):\n                if i & 1 == 0:\n                    se += a[arr[i]]\n                else:\n                    so += a[arr[i]]\n            if se > so:\n                for i in range(0, len(arr), 2):\n                    a[arr[i]] = -1 * a[arr[i]]\n            else:\n                for i in range(1, len(arr), 2):\n                    a[arr[i]] = -1 * a[arr[i]]\n    print(*a[1:-1])", "T = int(input())\nwhile T > 0:\n    N = int(input())\n    A = list()\n    A = list(map(int, input().strip().split(' ')))\n    B = [0] * N\n    for i in range(0, N):\n        B[i] = A[i]\n    if A[0] < A[1]:\n        B[0] = -1 * A[0]\n    if A[N - 1] < A[N - 2]:\n        B[N - 1] = -1 * A[N - 1]\n    for i in range(1, N - 1):\n        if A[i] < A[i + 1] and A[i] < A[i - 1]:\n            B[i] = -1 * A[i]\n            i = i + 1\n    z1 = 1\n    if z1 == 1:\n        i = -1\n        while i < N:\n            i = i + 1\n            j = i\n            while N - i > 2:\n                temp = 0\n                temp = B[i] + B[i + 1] + B[i + 2]\n                if temp > 0:\n                    break\n                else:\n                    i = i + 2\n            if i != j:\n                inc = [0] * ((i - j) // 2 + 2)\n                exc = [0] * ((i - j) // 2 + 2)\n                l = 1\n                k = j\n                while k <= i:\n                    B[k] = -1 * B[k]\n                    inc[l] = exc[l - 1] + A[k]\n                    if exc[l - 1] > inc[l - 1]:\n                        exc[l] = exc[l - 1]\n                    else:\n                        exc[l] = inc[l - 1]\n                    k = k + 2\n                    l = l + 1\n                if inc[l - 1] > exc[l - 1]:\n                    max = inc[l - 1]\n                else:\n                    max = exc[l - 1]\n                p = i\n                q = j\n                l = (i - j) // 2 + 1\n                while p >= q:\n                    if inc[l] == max:\n                        max = max - A[p]\n                        B[p] = -1 * B[p]\n                        p = p - 2\n                        l = l - 1\n                    p = p - 2\n                    l = l - 1\n    for i in range(0, N):\n        print(B[i], end=' ')\n    print()\n    T = T - 1", "T = int(input())\nINF = 10 ** 20\n\ndef solve(s):\n    n = len(s)\n    prv = [None for i in range(n + 1)]\n    p = 0\n    q = -INF\n    for i in range(n):\n        prv[i] = p < q\n        (p, q) = (max(p, q), p + s[i])\n    prv[n] = p < q\n    v = n\n    res = [0] * n\n    while v > 0:\n        if prv[v]:\n            res[v - 1] = 1\n            v -= 2\n        else:\n            v -= 1\n    return res\nans = []\nfor _ in range(T):\n    N = int(input())\n    (*A,) = map(int, input().split())\n    B = [0] * N\n    B[0] = A[0] < A[1]\n    B[-1] = A[-2] > A[-1]\n    for i in range(1, N - 1):\n        B[i] = A[i - 1] > A[i] < A[i + 1]\n    cur = 0\n    res = 0\n    while cur < N:\n        while cur < N and (not B[cur]):\n            cur += 1\n        if cur == N:\n            break\n        s = [A[cur]]\n        r = [cur]\n        while cur + 2 < N and B[cur + 2] and (A[cur] + A[cur + 2] >= A[cur + 1]):\n            cur += 2\n            s.append(A[cur])\n            r.append(cur)\n        cur += 1\n        rs = solve(s)\n        for (i, f) in zip(r, rs):\n            if f:\n                A[i] = -A[i]\n    ans.append(' '.join(map(str, A)))\nprint(*ans, sep='\\n')"]