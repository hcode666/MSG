["(n, m) = map(int, input().split())\narr = []\nfor _ in range(n):\n    arr.append(list(map(int, list(input()))))\nq = int(input())\nflip = [[0] * m for _ in range(n)]\nfor _ in range(q):\n    (x1, y1, x2, y2) = map(int, input().split())\n    flip[x1 - 1][y1 - 1] += 1\n    if x2 - 1 < n - 1:\n        flip[x2 - 1 + 1][y1 - 1] -= 1\n    if y2 - 1 < m - 1:\n        flip[x1 - 1][y2 - 1 + 1] -= 1\n    if x2 - 1 < n - 1 and y2 - 1 < m - 1:\n        flip[x2 - 1 + 1][y2 - 1 + 1] -= 1\nfor i in range(1, n):\n    for j in range(m):\n        flip[i][j] += flip[i - 1][j]\nfor i in range(n):\n    for j in range(1, m):\n        flip[i][j] += flip[i][j - 1]\nfor i in range(n):\n    for j in range(m):\n        if flip[i][j] % 2:\n            print(arr[i][j] ^ 1, end='')\n        else:\n            print(arr[i][j], end='')\n    print()", "(n, m) = map(int, input().split())\nmatrix = [list(input()) for _ in range(n)]\nq = int(input())\nprefix_sum = [[0] * (m + 2) for _ in range(n + 2)]\nfor _ in range(q):\n    (x1, y1, x2, y2) = map(int, input().split())\n    prefix_sum[x1][y1] += 1\n    prefix_sum[x2 + 1][y2 + 1] += 1\n    prefix_sum[x1][y2 + 1] -= 1\n    prefix_sum[x2 + 1][y1] -= 1\nflip = {'0': '1', '1': '0'}\nfor col in range(1, m + 1):\n    for row in range(1, n + 1):\n        prefix_sum[row][col] += prefix_sum[row - 1][col]\nfor row in range(1, n + 1):\n    for col in range(1, m + 1):\n        prefix_sum[row][col] += prefix_sum[row][col - 1]\n        if prefix_sum[row][col] & 1:\n            matrix[row - 1][col - 1] = flip[matrix[row - 1][col - 1]]\nfor row in range(n):\n    print(''.join(matrix[row]))", "(n, m) = map(int, input().split())\nmatrix = [list(input()) for _ in range(n)]\nq = int(input())\nprefix_sum = [[0] * (m + 2) for _ in range(n + 2)]\nfor _ in range(q):\n    (x1, y1, x2, y2) = map(int, input().split())\n    prefix_sum[x1][y1] += 1\n    prefix_sum[x2 + 1][y2 + 1] += 1\n    prefix_sum[x1][y2 + 1] -= 1\n    prefix_sum[x2 + 1][y1] -= 1\nflip = {'0': '1', '1': '0'}\nfor col in range(1, m + 1):\n    for row in range(1, n + 1):\n        prefix_sum[row][col] += prefix_sum[row - 1][col]\nfor row in range(1, n + 1):\n    for col in range(1, m + 1):\n        prefix_sum[row][col] += prefix_sum[row][col - 1]\n        if prefix_sum[row][col] & 1:\n            matrix[row - 1][col - 1] = flip[matrix[row - 1][col - 1]]\nfor row in range(n):\n    print(''.join(matrix[row]))", "[n, m] = [int(x) for x in input().split()]\narr = []\nfor i in range(n):\n    arr.append([int(x) for x in list(input())])\nprefix = [[0] * (m + 1) for i in range(n + 1)]\nq = int(input())\nfor i in range(q):\n    [x1, y1, x2, y2] = [int(x) for x in input().split()]\n    x1 -= 1\n    y1 -= 1\n    x2 -= 1\n    y2 -= 1\n    prefix[x1][y1] += 1\n    prefix[x2 + 1][y1] -= 1\n    prefix[x1][y2 + 1] -= 1\n    prefix[x2 + 1][y2 + 1] += 1\nfor i in range(m + 1):\n    for j in range(1, n + 1):\n        prefix[j][i] += prefix[j - 1][i]\nfor i in range(n + 1):\n    for j in range(1, m + 1):\n        prefix[i][j] += prefix[i][j - 1]\nfor i in range(n):\n    ans = ''\n    for j in range(m):\n        ans += str((arr[i][j] + prefix[i][j]) % 2)\n    print(ans)", "[n, m] = [int(x) for x in input().split()]\narr = []\nfor i in range(n):\n    arr.append([int(x) for x in list(input())])\nprefix = [[0] * (m + 1) for i in range(n + 1)]\nq = int(input())\nfor i in range(q):\n    [x1, y1, x2, y2] = [int(x) for x in input().split()]\n    x1 -= 1\n    y1 -= 1\n    x2 -= 1\n    y2 -= 1\n    prefix[x1][y1] += 1\n    prefix[x2 + 1][y1] -= 1\n    prefix[x1][y2 + 1] -= 1\n    prefix[x2 + 1][y2 + 1] += 1\nfor i in range(m + 1):\n    for j in range(1, n + 1):\n        prefix[j][i] += prefix[j - 1][i]\nfor i in range(n + 1):\n    for j in range(1, m + 1):\n        prefix[i][j] += prefix[i][j - 1]\nfor i in range(n):\n    ans = ''\n    for j in range(m):\n        ans += str((arr[i][j] + prefix[i][j]) % 2)\n    print(ans)", "(n, m) = map(int, input().split())\narr = []\nfor i in range(n):\n    s = input() + '0'\n    temp = []\n    for x in s:\n        temp += [int(x)]\n    arr += [temp]\narr += [[0] * (m + 1)]\nadd = [[0 for i in range(m + 1)] for j in range(n + 1)]\npref1 = [[0 for i in range(m + 1)] for j in range(n + 1)]\npref2 = [[0 for i in range(m + 1)] for j in range(n + 1)]\nq = int(input())\nfor _ in range(q):\n    (x1, y1, x2, y2) = map(int, input().split())\n    x1 -= 1\n    y1 -= 1\n    x2 -= 1\n    y2 -= 1\n    pref2[x1][y1] += 1\n    pref2[x2 + 1][y1] -= 1\n    pref2[x1][y2 + 1] += -1\n    pref2[x2 + 1][y2 + 1] -= -1\nfor i in range(m):\n    for j in range(n):\n        if j == 0:\n            pref1[j][i] = pref2[j][i]\n        else:\n            pref1[j][i] = pref1[j - 1][i] + pref2[j][i]\nfor i in range(n):\n    for j in range(m):\n        if j == 0:\n            add[i][j] += pref1[i][j]\n        else:\n            add[i][j] = add[i][j - 1] + pref1[i][j]\nfor i in range(n):\n    for j in range(m):\n        arr[i][j] -= add[i][j]\n        arr[i][j] %= 2\nfor i in range(n):\n    for j in range(m):\n        print(arr[i][j], end='')\n    print('')", "(n, m) = map(int, input().split())\narr = []\nfor i in range(n):\n    s = input() + '0'\n    temp = []\n    for x in s:\n        temp += [int(x)]\n    arr += [temp]\narr += [[0] * (m + 1)]\nadd = [[0 for i in range(m + 1)] for j in range(n + 1)]\npref1 = [[0 for i in range(m + 1)] for j in range(n + 1)]\npref2 = [[0 for i in range(m + 1)] for j in range(n + 1)]\nq = int(input())\nfor _ in range(q):\n    (x1, y1, x2, y2) = map(int, input().split())\n    x1 -= 1\n    y1 -= 1\n    x2 -= 1\n    y2 -= 1\n    pref2[x1][y1] += 1\n    pref2[x2 + 1][y1] -= 1\n    pref2[x1][y2 + 1] += -1\n    pref2[x2 + 1][y2 + 1] -= -1\nfor i in range(m):\n    for j in range(n):\n        if j == 0:\n            pref1[j][i] = pref2[j][i]\n        else:\n            pref1[j][i] = pref1[j - 1][i] + pref2[j][i]\nfor i in range(n):\n    for j in range(m):\n        if j == 0:\n            add[i][j] += pref1[i][j]\n        else:\n            add[i][j] = add[i][j - 1] + pref1[i][j]\nfor i in range(n):\n    for j in range(m):\n        arr[i][j] -= add[i][j]\n        arr[i][j] %= 2\nfor i in range(n):\n    for j in range(m):\n        print(arr[i][j], end='')\n    print('')", "import sys\n(n, m) = map(int, sys.stdin.readline().strip().split())\narr = []\nfor i in range(n):\n    s = input() + '0'\n    temp = []\n    for x in s:\n        temp += [int(x)]\n    arr += [temp]\narr += [[0] * (m + 1)]\nadd = [[0 for i in range(m + 1)] for j in range(n + 1)]\npref1 = [[0 for i in range(m + 1)] for j in range(n + 1)]\npref2 = [[0 for i in range(m + 1)] for j in range(n + 1)]\nq = int(sys.stdin.readline().strip())\nfor _ in range(q):\n    (x1, y1, x2, y2) = map(int, sys.stdin.readline().strip().split())\n    x1 -= 1\n    y1 -= 1\n    x2 -= 1\n    y2 -= 1\n    pref2[x1][y1] += 1\n    pref2[x2 + 1][y1] -= 1\n    pref2[x1][y2 + 1] += -1\n    pref2[x2 + 1][y2 + 1] -= -1\nfor i in range(m):\n    for j in range(n):\n        if j == 0:\n            pref1[j][i] = pref2[j][i]\n        else:\n            pref1[j][i] = pref1[j - 1][i] + pref2[j][i]\nfor i in range(n):\n    for j in range(m):\n        if j == 0:\n            add[i][j] += pref1[i][j]\n        else:\n            add[i][j] = add[i][j - 1] + pref1[i][j]\nfor i in range(n):\n    for j in range(m):\n        arr[i][j] += add[i][j]\n        arr[i][j] %= 2\nfor i in range(n):\n    for j in range(m):\n        print(arr[i][j], end='')\n    print('')", "import os.path\nimport sys\nfrom math import *\nfrom math import floor, gcd, fabs, factorial, fmod, sqrt, inf, log\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef inp():\n    return sys.stdin.readline().strip()\n(n, m) = map(int, inp().split())\ndp = [[0 for j in range(m + 2)] for k in range(n + 2)]\na = []\nfor j in range(n):\n    t = inp()\n    a.append(list(t))\nq = int(inp())\nfor j in range(0, q):\n    (x1, y1, x2, y2) = map(int, inp().split())\n    dp[x1][y1] += 1\n    dp[x2 + 1][y2 + 1] += 1\n    dp[x1][y2 + 1] -= 1\n    dp[x2 + 1][y1] -= 1\nfor j in range(1, n + 1):\n    for k in range(1, m + 1):\n        dp[j][k] = dp[j][k] + dp[j - 1][k] + dp[j][k - 1] - dp[j - 1][k - 1]\n        if dp[j][k] % 2 != 0:\n            a[j - 1][k - 1] = int(a[j - 1][k - 1]) ^ 1\nfor j in range(n):\n    print(''.join(map(str, a[j])))", "(n, m) = map(int, input().split())\nmat = []\nfor x in range(n):\n    row = input()\n    mat.append(list(row))\nq = int(input())\npref = [[0 for _ in range(m)] for _ in range(n)]\nfor _ in range(q):\n    (x1, y1, x2, y2) = map(int, input().split())\n    x1 -= 1\n    x2 -= 1\n    y1 -= 1\n    y2 -= 1\n    pref[x1][y1] += 1\n    if x2 + 1 < n and y2 + 1 < m:\n        pref[x2 + 1][y2 + 1] += 1\n    if x2 + 1 < n:\n        pref[x2 + 1][y1] -= 1\n    if y2 + 1 < m:\n        pref[x1][y2 + 1] -= 1\nfor i in range(m):\n    for j in range(1, n):\n        pref[j][i] += pref[j - 1][i]\nfor i in range(n):\n    for j in range(1, m):\n        pref[i][j] += pref[i][j - 1]\nfor x in range(n):\n    for y in range(m):\n        if pref[x][y] % 2:\n            mat[x][y] = str(int(mat[x][y]) ^ 1)\nfor x in mat:\n    print(''.join(x))", "import os.path\nimport sys\nfrom math import *\nfrom math import floor, gcd, fabs, factorial, fmod, sqrt, inf, log\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef inp():\n    return sys.stdin.readline().strip()\n(n, m) = map(int, inp().split())\ndp = [[0 for j in range(m + 2)] for k in range(n + 2)]\na = []\nfor j in range(n):\n    t = inp()\n    a.append(list(t))\nq = int(inp())\nfor j in range(0, q):\n    (x1, y1, x2, y2) = map(int, inp().split())\n    dp[x1][y1] += 1\n    dp[x2 + 1][y2 + 1] += 1\n    dp[x1][y2 + 1] -= 1\n    dp[x2 + 1][y1] -= 1\nfor j in range(1, n + 1):\n    for k in range(1, m + 1):\n        dp[j][k] = dp[j][k] + dp[j - 1][k] + dp[j][k - 1] - dp[j - 1][k - 1]\n        if dp[j][k] % 2 != 0:\n            a[j - 1][k - 1] = int(a[j - 1][k - 1]) ^ 1\nfor j in range(n):\n    print(''.join(map(str, a[j])))", "(n, m) = map(int, input().split())\narr = []\nfor _ in range(n):\n    s = input()\n    a = [int(x) for x in s]\n    arr.append(a)\nQ = int(input())\nans = [[0 for i in range(m + 1)] for j in range(n + 1)]\nfor i in range(Q):\n    (x1, y1, x2, y2) = map(int, input().split())\n    x1 -= 1\n    y1 -= 1\n    x2 -= 1\n    y2 -= 1\n    ans[x1][y1] += 1\n    ans[x2 + 1][y2 + 1] += 1\n    ans[x2 + 1][y1] -= 1\n    ans[x1][y2 + 1] -= 1\nfor j in range(m + 1):\n    for i in range(1, n + 1):\n        ans[i][j] = ans[i - 1][j] + ans[i][j]\nfor i in range(n + 1):\n    for j in range(1, m + 1):\n        ans[i][j] = ans[i][j - 1] + ans[i][j]\nfor i in range(n):\n    for j in range(m):\n        arr[i][j] = (ans[i][j] + arr[i][j]) % 2\nfor i in range(n):\n    for j in range(m):\n        print(arr[i][j], end='')\n    print()", "import sys, os, io, time, copy, math, queue, bisect\nfrom collections import deque\nfrom functools import lru_cache\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nsys.setrecursionlimit(100000000)\n\ndef main():\n    (n, m) = map(int, input().split())\n    mat = []\n    for _ in range(n):\n        s = input()\n        a = []\n        for i in s:\n            a.append(int(i))\n        mat.append(a)\n    Q = int(input())\n    ans = [[0 for i in range(m + 1)] for j in range(n + 1)]\n    for i in range(Q):\n        (x1, y1, x2, y2) = map(int, input().split())\n        x1 -= 1\n        y1 -= 1\n        x2 -= 1\n        y2 -= 1\n        ans[x1][y1] += 1\n        ans[x2 + 1][y1] -= 1\n        ans[x1][y2 + 1] -= 1\n        ans[x2 + 1][y2 + 1] += 1\n    for j in range(m + 1):\n        for i in range(1, n + 1):\n            ans[i][j] = ans[i - 1][j] + ans[i][j]\n    for i in range(n + 1):\n        for j in range(1, m + 1):\n            ans[i][j] = ans[i][j - 1] + ans[i][j]\n    for i in range(n):\n        for j in range(m):\n            mat[i][j] = (ans[i][j] + mat[i][j]) % 2\n    for m in mat:\n        for i in m:\n            print(i, end='')\n        print('')\nmain()", "def issafe(a, b, n, m):\n    if 0 <= a < n and 0 <= b < m:\n        return True\n    return False\n\ndef main():\n    (n, m) = map(int, input().split())\n    mat = [list(map(int, list(input()))) for i in range(n)]\n    qmat = [[0 for i in range(m)] for j in range(n)]\n    q = int(input())\n    query = [list(map(int, input().split())) for i in range(q)]\n    for k in query:\n        (i1, j1, i2, j2) = map(lambda x: x - 1, k)\n        qmat[i1][j1] += 1\n        if issafe(i2 + 1, j2 + 1, n, m):\n            qmat[i2 + 1][j2 + 1] += 1\n        if issafe(i1, j2 + 1, n, m):\n            qmat[i1][j2 + 1] += -1\n        if issafe(i2 + 1, j1, n, m):\n            qmat[i2 + 1][j1] += -1\n    for i in range(n - 1):\n        for j in range(m):\n            qmat[i + 1][j] += qmat[i][j]\n    for i in range(n):\n        for j in range(m - 1):\n            qmat[i][j + 1] += qmat[i][j]\n    for i in range(n):\n        for j in range(m):\n            qmat[i][j] = (qmat[i][j] + mat[i][j]) % 2\n    for i in qmat:\n        print(*i, sep='')\nmain()", "def issafe(a, b, n, m):\n    if 0 <= a < n and 0 <= b < m:\n        return True\n    return False\n\ndef main():\n    (n, m) = map(int, input().split())\n    mat = [list(map(int, list(input()))) for i in range(n)]\n    qmat = [[0 for i in range(m)] for j in range(n)]\n    q = int(input())\n    query = [list(map(int, input().split())) for i in range(q)]\n    for k in query:\n        (i1, j1, i2, j2) = map(lambda x: x - 1, k)\n        qmat[i1][j1] += 1\n        if issafe(i2 + 1, j2 + 1, n, m):\n            qmat[i2 + 1][j2 + 1] += 1\n        if issafe(i1, j2 + 1, n, m):\n            qmat[i1][j2 + 1] += -1\n        if issafe(i2 + 1, j1, n, m):\n            qmat[i2 + 1][j1] += -1\n    for i in range(n - 1):\n        for j in range(m):\n            qmat[i + 1][j] += qmat[i][j]\n    for i in range(n):\n        for j in range(m - 1):\n            qmat[i][j + 1] += qmat[i][j]\n    for i in range(n):\n        for j in range(m):\n            qmat[i][j] = (qmat[i][j] + mat[i][j]) % 2\n    for i in qmat:\n        print(*i, sep='')\nmain()", "def issafe(a, b, n, m):\n    if 0 <= a < n and 0 <= b < m:\n        return True\n    return False\n\ndef main():\n    (n, m) = map(int, input().split())\n    mat = [list(map(int, list(input()))) for i in range(n)]\n    qmat = [[0 for i in range(m)] for j in range(n)]\n    q = int(input())\n    query = [list(map(int, input().split())) for i in range(q)]\n    for k in query:\n        (i1, j1, i2, j2) = map(lambda x: x - 1, k)\n        qmat[i1][j1] += 1\n        if issafe(i2 + 1, j2 + 1, n, m):\n            qmat[i2 + 1][j2 + 1] += 1\n        if issafe(i1, j2 + 1, n, m):\n            qmat[i1][j2 + 1] += -1\n        if issafe(i2 + 1, j1, n, m):\n            qmat[i2 + 1][j1] += -1\n    for i in range(n - 1):\n        for j in range(m):\n            qmat[i + 1][j] += qmat[i][j]\n    for i in range(n):\n        for j in range(m - 1):\n            qmat[i][j + 1] += qmat[i][j]\n    for i in range(n):\n        for j in range(m):\n            qmat[i][j] = (qmat[i][j] + mat[i][j]) % 2\n    for i in qmat:\n        print(*i, sep='')\nmain()", "import sys\ntry:\n\n    def main():\n        t = 1\n        while t:\n            (n, m) = [int(x) for x in sys.stdin.readline().split()]\n            a = []\n            update = []\n            for i in range(n):\n                tmp = sys.stdin.readline()\n                a.append(tmp)\n                update.append([0 for j in range(m + 1)])\n            update.append([0 for j in range(m + 1)])\n            q = int(sys.stdin.readline())\n            while q:\n                (x1, y1, x2, y2) = [int(z) for z in sys.stdin.readline().split()]\n                update[x1][y1] += 1\n                if x2 < n:\n                    update[x2 + 1][y1] += -1\n                if y2 < m:\n                    update[x1][y2 + 1] += -1\n                if x2 < n and y2 < m:\n                    update[x2 + 1][y2 + 1] += 1\n                q -= 1\n            for i in range(1, n + 1):\n                for j in range(1, m + 1):\n                    update[i][j] += update[i][j - 1]\n            for j in range(1, m + 1):\n                for i in range(1, n + 1):\n                    update[i][j] += update[i - 1][j]\n            for i in range(1, n + 1):\n                for j in range(1, m + 1):\n                    if update[i][j] % 2 == 0:\n                        sys.stdout.write(a[i - 1][j - 1])\n                    else:\n                        sys.stdout.write(str(1 - (ord(a[i - 1][j - 1]) - 48)))\n                sys.stdout.write('\\n')\n            t -= 1\n    main()\nexcept Exception as e:\n    sys.stdout.write('ErrOR : ' + str(e))", "def flip(dp, x1, y1, x2, y2, n, m):\n    dp[x1][y1] += 1\n    if y2 + 1 < m:\n        dp[x1][y2 + 1] -= 1\n    if x2 + 1 < n:\n        dp[x2 + 1][y1] -= 1\n    if x2 + 1 < n and y2 + 1 < m:\n        dp[x2 + 1][y2 + 1] += 1\n\ndef main():\n    (n, m) = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input())))\n    dp = [[0 for j in range(m)] for i in range(n)]\n    q = int(input())\n    for i in range(q):\n        (x1, y1, x2, y2) = map(int, input().split())\n        x1 -= 1\n        y1 -= 1\n        x2 -= 1\n        y2 -= 1\n        flip(dp, x1, y1, x2, y2, n, m)\n    for i in range(n):\n        for j in range(1, m):\n            dp[i][j] += dp[i][j - 1]\n    for i in range(1, n):\n        for j in range(m):\n            dp[i][j] += dp[i - 1][j]\n    for i in range(n):\n        for j in range(m):\n            if dp[i][j] % 2 == 0:\n                print(matrix[i][j], end='')\n            else:\n                print(int(not matrix[i][j]), end='')\n        print()\nmain()", "(r, c) = list(map(int, input().split()))\nA = []\ndp = [[0 for i in range(c + 1)] for j in range(r + 1)]\nfor i in range(r):\n    A.append([int(j) for j in list(input())])\nq = int(input())\nfor i in range(q):\n    (x1, y1, x2, y2) = list(map(int, input().split()))\n    (x1, y1, x2, y2) = (x1 - 1, y1 - 1, x2 - 1, y2 - 1)\n    dp[x1][y1] += 1\n    dp[x2 + 1][y2 + 1] += 1\n    dp[x1][y2 + 1] -= 1\n    dp[x2 + 1][y1] -= 1\nfor (i, v1) in enumerate(A):\n    for (j, v2) in enumerate(v1):\n        if i == 0 and j == 0:\n            pass\n        elif i == 0:\n            dp[i][j] += dp[i][j - 1]\n        elif j == 0:\n            dp[i][j] += dp[i - 1][j]\n        else:\n            dp[i][j] += dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n        if dp[i][j] % 2 != 0:\n            A[i][j] = 1 - A[i][j]\nfor i in A:\n    for j in i:\n        print(j, end='')\n    print()", "import sys\n(n, m) = map(int, sys.stdin.readline().strip().split())\narr = []\nfor i in range(n):\n    s = input() + '0'\n    temp = []\n    for x in s:\n        temp += [int(x)]\n    arr += [temp]\narr += [[0] * (m + 1)]\nadd = [[0 for i in range(m + 1)] for j in range(n + 1)]\npref1 = [[0 for i in range(m + 1)] for j in range(n + 1)]\npref2 = [[0 for i in range(m + 1)] for j in range(n + 1)]\nq = int(sys.stdin.readline().strip())\nfor _ in range(q):\n    (x1, y1, x2, y2) = map(int, sys.stdin.readline().strip().split())\n    x1 -= 1\n    y1 -= 1\n    x2 -= 1\n    y2 -= 1\n    pref2[x1][y1] += 1\n    pref2[x2 + 1][y1] -= 1\n    pref2[x1][y2 + 1] += -1\n    pref2[x2 + 1][y2 + 1] -= -1\nfor i in range(m):\n    for j in range(n):\n        if j == 0:\n            pref1[j][i] = pref2[j][i]\n        else:\n            pref1[j][i] = pref1[j - 1][i] + pref2[j][i]\nfor i in range(n):\n    for j in range(m):\n        if j == 0:\n            add[i][j] += pref1[i][j]\n        else:\n            add[i][j] = add[i][j - 1] + pref1[i][j]\nfor i in range(n):\n    for j in range(m):\n        arr[i][j] += add[i][j]\n        arr[i][j] %= 2\nfor i in range(n):\n    for j in range(m):\n        print(arr[i][j], end='')\n    print('')", "(n, m) = map(int, input().split())\nmat = []\nfor _ in range(n):\n    s = input()\n    l = list(map(int, s))\n    mat.append(l)\npref = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\np = [[0 for _ in range(m)] for _ in range(n)]\nadd = [[0 for _ in range(m)] for _ in range(n)]\nfor _ in range(int(input())):\n    (x1, y1, x2, y2) = map(int, input().split())\n    pref[x1 - 1][y1 - 1] += 1\n    pref[x2][y1 - 1] -= 1\n    pref[x1 - 1][y2] -= 1\n    pref[x2][y2] += 1\nfor i in range(n):\n    for j in range(m):\n        if i == 0:\n            p[i][j] = pref[i][j]\n        else:\n            p[i][j] = p[i - 1][j] + pref[i][j]\nfor i in range(n):\n    for j in range(m):\n        if j == 0:\n            add[i][j] = p[i][j]\n        else:\n            add[i][j] = add[i][j - 1] + p[i][j]\nfor i in range(n):\n    for j in range(m):\n        mat[i][j] += add[i][j]\n        mat[i][j] %= 2\nfor i in range(n):\n    for j in range(m):\n        print(mat[i][j], end='')\n    print()", "(n, m) = map(int, input().split())\na = []\nb = [0] * (m + 1)\nfor i in range(n + 1):\n    a.append(b[:])\np = []\nfor i in range(n):\n    r = input()\n    q = []\n    for j in range(len(r)):\n        q.append(int(r[j]))\n    p.append(q[:])\nq = int(input())\nwhile q:\n    (i, j, k, l) = map(int, input().split())\n    a[i - 1][j - 1] += 1\n    a[i - 1][l] -= 1\n    a[k][j - 1] -= 1\n    a[k][l] += 1\n    q -= 1\nc = 0\nfor j in range(m + 1):\n    for i in range(n + 1):\n        c += a[i][j]\n        a[i][j] = c\nfor i in range(n):\n    for j in range(m):\n        c += a[i][j]\n        if c % 2 == 1:\n            if p[i][j] == 1:\n                p[i][j] = 0\n            else:\n                p[i][j] = 1\n    c += a[i][m]\nfor i in range(n):\n    for j in range(m):\n        print(p[i][j], end='')\n    print()", "import sys\n(n, m) = map(int, sys.stdin.readline().strip().split())\narr = []\nfor i in range(n):\n    s = input() + '0'\n    temp = []\n    for x in s:\n        temp += [int(x)]\n    arr += [temp]\narr += [[0] * (m + 1)]\nadd = [[0 for i in range(m + 1)] for j in range(n + 1)]\npref1 = [[0 for i in range(m + 1)] for j in range(n + 1)]\npref2 = [[0 for i in range(m + 1)] for j in range(n + 1)]\nq = int(sys.stdin.readline().strip())\nfor _ in range(q):\n    (x1, y1, x2, y2) = map(int, sys.stdin.readline().strip().split())\n    x1 -= 1\n    y1 -= 1\n    x2 -= 1\n    y2 -= 1\n    pref2[x1][y1] += 1\n    pref2[x2 + 1][y1] -= 1\n    pref2[x1][y2 + 1] += -1\n    pref2[x2 + 1][y2 + 1] -= -1\nfor i in range(m):\n    for j in range(n):\n        if j == 0:\n            pref1[j][i] = pref2[j][i]\n        else:\n            pref1[j][i] = pref1[j - 1][i] + pref2[j][i]\nfor i in range(n):\n    for j in range(m):\n        if j == 0:\n            add[i][j] += pref1[i][j]\n        else:\n            add[i][j] = add[i][j - 1] + pref1[i][j]\nfor i in range(n):\n    for j in range(m):\n        arr[i][j] += add[i][j]\n        arr[i][j] %= 2\nfor i in range(n):\n    for j in range(m):\n        print(arr[i][j], end='')\n    print('')", "import sys\n(n, m) = map(int, sys.stdin.readline().strip().split())\narr = []\nfor i in range(n):\n    s = input() + '0'\n    temp = []\n    for x in s:\n        temp += [int(x)]\n    arr += [temp]\narr += [[0] * (m + 1)]\nadd = [[0 for i in range(m + 1)] for j in range(n + 1)]\npref1 = [[0 for i in range(m + 1)] for j in range(n + 1)]\npref2 = [[0 for i in range(m + 1)] for j in range(n + 1)]\nq = int(sys.stdin.readline().strip())\nfor _ in range(q):\n    (x1, y1, x2, y2) = map(int, sys.stdin.readline().strip().split())\n    x1 -= 1\n    y1 -= 1\n    x2 -= 1\n    y2 -= 1\n    pref2[x1][y1] += 1\n    pref2[x2 + 1][y1] -= 1\n    pref2[x1][y2 + 1] += -1\n    pref2[x2 + 1][y2 + 1] -= -1\nfor i in range(m):\n    for j in range(n):\n        if j == 0:\n            pref1[j][i] = pref2[j][i]\n        else:\n            pref1[j][i] = pref1[j - 1][i] + pref2[j][i]\nfor i in range(n):\n    for j in range(m):\n        if j == 0:\n            add[i][j] += pref1[i][j]\n        else:\n            add[i][j] = add[i][j - 1] + pref1[i][j]\nfor i in range(n):\n    for j in range(m):\n        arr[i][j] += add[i][j]\n        arr[i][j] %= 2\nfor i in range(n):\n    for j in range(m):\n        print(arr[i][j], end='')\n    print('')", "R = lambda : map(int, input().split())\n(n, m) = R()\na = [input() for _ in range(n)]\nb = [[0] * (m + 2) for _ in range(n + 1)]\n(q,) = R()\nfor _ in range(q):\n    (x1, y1, x2, y2) = R()\n    for x in (x1 - 1, x2):\n        b[x][y1] ^= 1\n        b[x][y2 + 1] ^= 1\np = [0] * (m + 1)\nfor (r, d) in zip(a, b):\n    for i in range(m):\n        d[i + 1] ^= p[i] ^ p[i + 1] ^ d[i]\n    p = d\n    print(*(int(x) ^ y for (x, y) in zip(r, d[1:])), sep='')", "import sys\nimport bisect\nt = 1\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    arr = [[0 for j in range(m + 2)] for i in range(n + 2)]\n    for i in range(n):\n        l.append(input())\n    q = int(input())\n    for __ in range(q):\n        (x1, y1, x2, y2) = map(int, input().split())\n        arr[x1][y1] += 1\n        arr[x2 + 1][y1] -= 1\n        arr[x1][y2 + 1] -= 1\n        arr[x2 + 1][y2 + 1] += 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x1 = arr[i - 1][j] + arr[i][j - 1]\n            y1 = x1 - arr[i - 1][j - 1]\n            arr[i][j] = arr[i][j] + y1\n            print((arr[i][j] + int(l[i - 1][j - 1])) % 2, end='')\n        print()\n    print()", "(n, m) = map(int, input().split())\nmat = []\nfor i in range(n):\n    me = [int(i) for i in list(input())]\n    mat.append(me)\ndummy = [[0 for i in range(m + 1)] for j in range(n + 1)]\nq = int(input())\nfor i in range(q):\n    (x1, y1, x2, y2) = map(int, input().split())\n    dummy[x1 - 1][y1 - 1] += 1\n    dummy[x2][y1 - 1] -= 1\n    dummy[x2][y2] += 1\n    dummy[x1 - 1][y2] -= 1\nfor i in range(n + 1):\n    for j in range(m + 1):\n        if j == 0:\n            continue\n        else:\n            dummy[i][j] += dummy[i][j - 1]\nfor j in range(m + 1):\n    for i in range(n + 1):\n        if i == 0:\n            continue\n        else:\n            dummy[i][j] += dummy[i - 1][j]\nfor i in range(n):\n    for j in range(m):\n        print((mat[i][j] + dummy[i][j] + 2) % 2, end='')\n    print()\nprint()", "(n, m) = map(int, input().split())\nMX = list()\nfor i in range(n):\n    YYY = str(input())\n    yy = list(YYY)\n    a = []\n    for j in range(m):\n        a.append(yy[j])\n    MX.append(a)\nq = int(input())\ndp = [[0 for i in range(m)] for i in range(n)]\nfor _ in range(q):\n    (x, y, x2, y2) = map(int, input().split())\n    dp[x - 1][y - 1] += 1\n    if x2 < n:\n        dp[x2][y - 1] -= 1\n    if y2 < m:\n        dp[x - 1][y2] -= 1\n    if x2 < n and y2 < m:\n        dp[x2][y2] -= 1\nfor i in range(n):\n    for j in range(1, m):\n        dp[i][j] += dp[i][j - 1]\nfor i in range(m):\n    for j in range(1, n):\n        dp[j][i] += dp[j - 1][i]\nfor i in range(n):\n    for j in range(m):\n        if dp[i][j] % 2 == 1:\n            if MX[i][j] == '0':\n                MX[i][j] = '1'\n            else:\n                MX[i][j] = '0'\nfor i in range(n):\n    for j in range(m):\n        print(MX[i][j], end='')\n    print()", "import sys\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef input():\n    return sys.stdin.readline().strip()\nimport math\nfrom collections import defaultdict\n(n, m) = get_ints()\na = []\narr = [[0 for _ in range(m + 2)] for _ in range(n + 2)]\nfor _ in range(n):\n    t = list(input())\n    a.append(t)\nfor i in range(n):\n    for j in range(m):\n        a[i][j] = int(a[i][j])\nq = int(input())\nfor _ in range(q):\n    (x1, y1, x2, y2) = get_ints()\n    arr[x1][y1] += 1\n    arr[x2 + 1][y2 + 1] += 1\n    arr[x1][y2 + 1] -= 1\n    arr[x2 + 1][y1] -= 1\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        arr[i][j] += arr[i - 1][j] + arr[i][j - 1] - arr[i - 1][j - 1]\n        if a[i - 1][j - 1] == 0 and arr[i][j] % 2 == 0:\n            a[i - 1][j - 1] = 0\n        elif a[i - 1][j - 1] == 1 and arr[i][j] % 2 == 0:\n            a[i - 1][j - 1] = 1\n        elif a[i - 1][j - 1] == 0 and arr[i][j] % 2 == 1:\n            a[i - 1][j - 1] = 1\n        elif a[i - 1][j - 1] == 1 and arr[i][j] % 2 == 1:\n            a[i - 1][j - 1] = 0\nfor i in range(n):\n    print(''.join(map(str, a[i])))", "import sys\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef input():\n    return sys.stdin.readline().strip()\nimport math\nfrom collections import defaultdict\n(n, m) = get_ints()\na = []\narr = [[0 for _ in range(m + 2)] for _ in range(n + 2)]\nfor _ in range(n):\n    t = list(input())\n    a.append(t)\nfor i in range(n):\n    for j in range(m):\n        a[i][j] = int(a[i][j])\nq = int(input())\nfor _ in range(q):\n    (x1, y1, x2, y2) = get_ints()\n    arr[x1][y1] += 1\n    arr[x2 + 1][y2 + 1] += 1\n    arr[x1][y2 + 1] -= 1\n    arr[x2 + 1][y1] -= 1\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        arr[i][j] += arr[i - 1][j] + arr[i][j - 1] - arr[i - 1][j - 1]\n        if a[i - 1][j - 1] == 0 and arr[i][j] % 2 == 0:\n            a[i - 1][j - 1] = 0\n        elif a[i - 1][j - 1] == 1 and arr[i][j] % 2 == 0:\n            a[i - 1][j - 1] = 1\n        elif a[i - 1][j - 1] == 0 and arr[i][j] % 2 == 1:\n            a[i - 1][j - 1] = 1\n        elif a[i - 1][j - 1] == 1 and arr[i][j] % 2 == 1:\n            a[i - 1][j - 1] = 0\nfor i in range(n):\n    for j in range(m):\n        print(a[i][j], end='')\n    print()", "import sys\n(n, m) = map(int, input().split())\ndp = [[0 for j in range(m + 2)] for k in range(n + 2)]\na = []\nfor j in range(n):\n    t = sys.stdin.readline().strip()\n    a.append(list(t))\nq = int(input())\nfor j in range(0, q):\n    (x1, y1, x2, y2) = map(int, sys.stdin.readline().split())\n    dp[x1][y1] += 1\n    dp[x2 + 1][y2 + 1] += 1\n    dp[x1][y2 + 1] -= 1\n    dp[x2 + 1][y1] -= 1\nfor j in range(1, n + 1):\n    for k in range(1, m + 1):\n        dp[j][k] = dp[j][k] + dp[j - 1][k] + dp[j][k - 1] - dp[j - 1][k - 1]\n        if dp[j][k] % 2 != 0:\n            a[j - 1][k - 1] = int(a[j - 1][k - 1]) ^ 1\nfor j in range(n):\n    print(''.join(map(str, a[j])))", "R = lambda : map(int, input().split())\n(n, m) = R()\na = [input() for _ in range(n)]\nb = [[0] * (m + 2) for _ in range(n + 1)]\n(q,) = R()\nfor _ in range(q):\n    (x1, y1, x2, y2) = R()\n    for x in (x1 - 1, x2):\n        for y in (y1, y2 + 1):\n            b[x][y] ^= 1\np = [0] * (m + 1)\nfor (r, d) in zip(a, b):\n    for i in range(m):\n        d[i + 1] ^= p[i] ^ p[i + 1] ^ d[i]\n    p = d\n    print(*(int(x) ^ y for (x, y) in zip(r, d[1:])), sep='')", "import sys\n(n, m) = map(int, input().split())\ndp = [[0 for j in range(m + 2)] for k in range(n + 2)]\na = []\nfor j in range(n):\n    t = sys.stdin.readline().strip()\n    a.append(list(t))\nq = int(input())\nfor j in range(0, q):\n    (x1, y1, x2, y2) = map(int, sys.stdin.readline().split())\n    dp[x1][y1] += 1\n    dp[x2 + 1][y2 + 1] += 1\n    dp[x1][y2 + 1] -= 1\n    dp[x2 + 1][y1] -= 1\nfor j in range(1, n + 1):\n    for k in range(1, m + 1):\n        dp[j][k] = dp[j][k] + dp[j - 1][k] + dp[j][k - 1] - dp[j - 1][k - 1]\n        if dp[j][k] % 2 != 0:\n            a[j - 1][k - 1] = int(a[j - 1][k - 1]) ^ 1\nfor j in range(n):\n    print(''.join(map(str, a[j])))", "import math\nimport sys, collections\nfrom sys import stdin, stdout\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef file():\n    sys.stdin = open('input.py', 'r')\n    sys.stdout = open('output.py', 'w')\n\ndef is_subsequence(x, y):\n    x = list(x)\n    for letter in y:\n        if x and x[0] == letter:\n            x.pop(0)\n    return not x\n\ndef sieve():\n    spf[1] = 1\n    for i in range(2, MAXN):\n        spf[i] = i\n    for i in range(4, MAXN, 2):\n        spf[i] = 2\n    for i in range(3, mt.ceil(mt.sqrt(MAXN))):\n        if spf[i] == i:\n            for j in range(i * i, MAXN, i):\n                if spf[j] == j:\n                    spf[j] = i\n\ndef getFactorization(x):\n    ret = list()\n    while x != 1:\n        ret.append(spf[x])\n        x = x // spf[x]\n    return ret\n\ndef getFloor(A, x):\n    (left, right) = (0, len(A) - 1)\n    (ind, floor) = (-1, -1)\n    while left <= right:\n        mid = (left + right) // 2\n        if x < A[mid]:\n            right = mid - 1\n        else:\n            floor = A[mid]\n            ind = mid\n            left = mid + 1\n    return ind\nmod = 10 ** 9 + 7\n\ndef main():\n    (n, m) = get_ints()\n    arr = []\n    for i in range(n):\n        s = input()\n        arr.append(list(s))\n    for i in range(n):\n        for j in range(m):\n            arr[i][j] = int(arr[i][j])\n    temp = [[0 for i in range(m + 1)] for j in range(n + 1)]\n    for que in range(int(input())):\n        (x1, y1, x2, y2) = get_ints()\n        temp[x1 - 1][y1 - 1] += 1\n        temp[x2][y2] += 1\n        temp[x1 - 1][y2] -= 1\n        temp[x2][y1 - 1] -= 1\n    for i in range(n + 1):\n        for j in range(1, m + 1):\n            temp[i][j] += temp[i][j - 1]\n    for i in range(m + 1):\n        for j in range(1, n + 1):\n            temp[j][i] += temp[j - 1][i]\n    for i in range(n):\n        for j in range(m):\n            if temp[i][j] % 2 == 0:\n                print(arr[i][j], end='')\n            elif arr[i][j] == 1:\n                print(0, end='')\n            else:\n                print(1, end='')\n        print()\nmain()", "import math\nimport sys, collections\nfrom sys import stdin, stdout\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef file():\n    sys.stdin = open('input.py', 'r')\n    sys.stdout = open('output.py', 'w')\n\ndef is_subsequence(x, y):\n    x = list(x)\n    for letter in y:\n        if x and x[0] == letter:\n            x.pop(0)\n    return not x\n\ndef sieve():\n    spf[1] = 1\n    for i in range(2, MAXN):\n        spf[i] = i\n    for i in range(4, MAXN, 2):\n        spf[i] = 2\n    for i in range(3, mt.ceil(mt.sqrt(MAXN))):\n        if spf[i] == i:\n            for j in range(i * i, MAXN, i):\n                if spf[j] == j:\n                    spf[j] = i\n\ndef getFactorization(x):\n    ret = list()\n    while x != 1:\n        ret.append(spf[x])\n        x = x // spf[x]\n    return ret\n\ndef getFloor(A, x):\n    (left, right) = (0, len(A) - 1)\n    (ind, floor) = (-1, -1)\n    while left <= right:\n        mid = (left + right) // 2\n        if x < A[mid]:\n            right = mid - 1\n        else:\n            floor = A[mid]\n            ind = mid\n            left = mid + 1\n    return ind\nmod = 10 ** 9 + 7\n\ndef main():\n    (n, m) = get_ints()\n    arr = []\n    for i in range(n):\n        s = input()\n        arr.append(list(s))\n    for i in range(n):\n        for j in range(m):\n            arr[i][j] = int(arr[i][j])\n    temp = [[0 for i in range(m + 1)] for j in range(n + 1)]\n    for que in range(int(input())):\n        (x1, y1, x2, y2) = get_ints()\n        temp[x1 - 1][y1 - 1] += 1\n        temp[x2][y2] += 1\n        temp[x1 - 1][y2] -= 1\n        temp[x2][y1 - 1] -= 1\n    for i in range(n):\n        for j in range(1, m):\n            temp[i][j] += temp[i][j - 1]\n    for i in range(1, n):\n        for j in range(m):\n            temp[i][j] += temp[i - 1][j]\n    for i in range(n):\n        for j in range(m):\n            arr[i][j] += temp[i][j]\n            arr[i][j] %= 2\n        print(''.join((str(k) for k in arr[i])))\nmain()", "import math\nimport sys, collections\nfrom sys import stdin, stdout\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef file():\n    sys.stdin = open('input.py', 'r')\n    sys.stdout = open('output.py', 'w')\n\ndef is_subsequence(x, y):\n    x = list(x)\n    for letter in y:\n        if x and x[0] == letter:\n            x.pop(0)\n    return not x\n\ndef sieve():\n    spf[1] = 1\n    for i in range(2, MAXN):\n        spf[i] = i\n    for i in range(4, MAXN, 2):\n        spf[i] = 2\n    for i in range(3, mt.ceil(mt.sqrt(MAXN))):\n        if spf[i] == i:\n            for j in range(i * i, MAXN, i):\n                if spf[j] == j:\n                    spf[j] = i\n\ndef getFactorization(x):\n    ret = list()\n    while x != 1:\n        ret.append(spf[x])\n        x = x // spf[x]\n    return ret\n\ndef getFloor(A, x):\n    (left, right) = (0, len(A) - 1)\n    (ind, floor) = (-1, -1)\n    while left <= right:\n        mid = (left + right) // 2\n        if x < A[mid]:\n            right = mid - 1\n        else:\n            floor = A[mid]\n            ind = mid\n            left = mid + 1\n    return ind\nmod = 10 ** 9 + 7\n\ndef main():\n    (n, m) = get_ints()\n    arr = []\n    for i in range(n):\n        s = input()\n        arr.append(list(s))\n    for i in range(n):\n        for j in range(m):\n            arr[i][j] = int(arr[i][j])\n    temp = [[0 for i in range(m + 1)] for j in range(n + 1)]\n    for que in range(int(input())):\n        (x1, y1, x2, y2) = get_ints()\n        temp[x1 - 1][y1 - 1] += 1\n        temp[x2][y2] += 1\n        temp[x1 - 1][y2] -= 1\n        temp[x2][y1 - 1] -= 1\n    for i in range(n + 1):\n        for j in range(1, m + 1):\n            temp[i][j] += temp[i][j - 1]\n    for i in range(1, n + 1):\n        for j in range(m + 1):\n            temp[i][j] += temp[i - 1][j]\n    for i in range(n):\n        for j in range(m):\n            arr[i][j] += temp[i][j]\n            arr[i][j] %= 2\n        print(''.join((str(k) for k in arr[i])))\nmain()", "(n, m) = map(int, input().split())\na = [[int(i) for i in str(input())] for j in range(n)]\nb = [[0 for i in range(m + 1)] for j in range(n + 1)]\nfor q in range(int(input())):\n    (x1, y1, x2, y2) = map(int, input().split())\n    b[x1 - 1][y1 - 1] += 1\n    b[x1 - 1][y2] -= 1\n    b[x2][y1 - 1] -= 1\n    b[x2][y2] += 1\nfor i in range(n + 1):\n    for j in range(1, m + 1):\n        b[i][j] += b[i][j - 1]\nfor i in range(1, n + 1):\n    for j in range(m + 1):\n        b[i][j] += b[i - 1][j]\nfor i in range(n):\n    for j in range(m):\n        a[i][j] += b[i][j]\n        a[i][j] %= 2\n    print(''.join((str(k) for k in a[i])))", "R = lambda : map(int, input().split())\n(n, m) = R()\na = [input() for _ in range(n)]\nb = [[0] * (m + 2) for _ in range(n + 1)]\n(q,) = R()\nfor _ in range(q):\n    (x1, y1, x2, y2) = R()\n    for x in (x1 - 1, x2):\n        for y in (y1, y2 + 1):\n            b[x][y] ^= 1\np = [0] * (m + 1)\nfor (r, d) in zip(a, b):\n    for i in range(m):\n        d[i + 1] ^= p[i] ^ p[i + 1] ^ d[i]\n    p = d\n    print(*(int(x) ^ y for (x, y) in zip(r, d[1:])), sep='')", "import sys\nI = sys.stdin.readline\nR = lambda : map(int, I().split())\n(n, m) = R()\na = [I()[:-1] for _ in range(n)]\nb = [[0] * (m + 2) for _ in range(n + 1)]\n(q,) = R()\nfor _ in range(q):\n    (x1, y1, x2, y2) = R()\n    x1 -= 1\n    y2 += 1\n    for x in (x1, x2):\n        for y in (y1, y2):\n            b[x][y] ^= 1\ndp = [0] * (m + 1)\nfor (r, d) in zip(a, b):\n    for i in range(m):\n        d[i + 1] ^= dp[i] ^ dp[i + 1] ^ d[i]\n    dp = d\n    print(''.join((str(int(x) ^ y) for (x, y) in zip(r, d[1:]))))", "R = lambda : map(int, input().split())\n(n, m) = R()\na = [input() for _ in range(n)]\nb = [[0] * (m + 2) for _ in range(n + 1)]\n(q,) = R()\nfor _ in range(q):\n    (x1, y1, x2, y2) = R()\n    x1 -= 1\n    y2 += 1\n    for x in (x1, x2):\n        for y in (y1, y2):\n            b[x][y] ^= 1\ndp = [0] * (m + 1)\nfor (r, d) in zip(a, b):\n    for i in range(m):\n        d[i + 1] ^= dp[i] ^ dp[i + 1] ^ d[i]\n    dp = d\n    print(''.join((str(int(x) ^ y) for (x, y) in zip(r, d[1:]))))", "R = lambda : map(int, input().split())\n(n, m) = R()\na = [input() for _ in range(n)]\nb = [[0] * (m + 2) for _ in range(n + 1)]\n(q,) = R()\nfor _ in range(q):\n    (x1, y1, x2, y2) = R()\n    x1 -= 1\n    y2 += 1\n    for x in (x1, x2):\n        for y in (y1, y2):\n            b[x][y] ^= 1\ndp = [0] * (m + 1)\nfor (r, d) in zip(a, b):\n    for i in range(m):\n        d[i + 1] ^= dp[i] ^ dp[i + 1] ^ d[i]\n    dp = d\n    print(*(int(x) ^ y for (x, y) in zip(r, d[1:])), sep='')", "import sys\n(n, m) = map(int, sys.stdin.readline().strip().split())\narr = []\nfor i in range(n):\n    s = input() + '0'\n    temp = []\n    for x in s:\n        temp += [int(x)]\n    arr += [temp]\narr += [[0] * (m + 1)]\nadd = [[0 for i in range(m + 1)] for j in range(n + 1)]\npref1 = [[0 for i in range(m + 1)] for j in range(n + 1)]\npref2 = [[0 for i in range(m + 1)] for j in range(n + 1)]\nq = int(sys.stdin.readline().strip())\nfor _ in range(q):\n    (x1, y1, x2, y2) = map(int, sys.stdin.readline().strip().split())\n    x1 -= 1\n    y1 -= 1\n    x2 -= 1\n    y2 -= 1\n    pref2[x1][y1] += 1\n    pref2[x2 + 1][y1] -= 1\n    pref2[x1][y2 + 1] += -1\n    pref2[x2 + 1][y2 + 1] -= -1\nfor i in range(m):\n    for j in range(n):\n        if j == 0:\n            pref1[j][i] = pref2[j][i]\n        else:\n            pref1[j][i] = pref1[j - 1][i] + pref2[j][i]\nfor i in range(n):\n    for j in range(m):\n        if j == 0:\n            add[i][j] += pref1[i][j]\n        else:\n            add[i][j] = add[i][j - 1] + pref1[i][j]\nfor i in range(n):\n    for j in range(m):\n        arr[i][j] += add[i][j]\n        arr[i][j] %= 2\nfor i in range(n):\n    for j in range(m):\n        print(arr[i][j], end='')\n    print('')", "from sys import stdin\n(n, m) = map(int, stdin.readline().split())\nl = [list(map(int, stdin.readline().strip())) for _ in range(n)]\ndp = [[0] * m for _ in range(n)]\nfor _ in range(int(stdin.readline())):\n    (x1, y1, x2, y2) = map(int, stdin.readline().split())\n    x1 -= 1\n    y1 -= 1\n    x2 -= 1\n    y2 -= 1\n    dp[x1][y1] += 1\n    if x2 + 1 < n:\n        dp[x2 + 1][y1] -= 1\n    if y2 + 1 < m:\n        dp[x1][y2 + 1] -= 1\n    if x2 + 1 < n and y2 + 1 < m:\n        dp[x2 + 1][y2 + 1] += 1\nfor i in range(1, n):\n    for j in range(m):\n        dp[i][j] += dp[i - 1][j]\nfor i in range(n):\n    for j in range(1, m):\n        dp[i][j] += dp[i][j - 1]\nfor i in range(n):\n    for j in range(m):\n        print((dp[i][j] + l[i][j]) % 2, end='')\n    print()", "from sys import stdin\ninput = stdin.readline\n(n, m) = map(int, input().split())\nl = [list(map(int, input().strip())) for _ in range(n)]\npre = [[0] * m for _ in range(n)]\nfor _ in range(int(input())):\n    (x1, y1, x2, y2) = map(int, input().split())\n    x1 -= 1\n    y1 -= 1\n    x2 -= 1\n    y2 -= 1\n    pre[x1][y1] += 1\n    if x2 + 1 < n:\n        pre[x2 + 1][y1] -= 1\n    if y2 + 1 < m:\n        pre[x1][y2 + 1] -= 1\n    if x2 + 1 < n and y2 + 1 < m:\n        pre[x2 + 1][y2 + 1] += 1\nfor i in range(1, n):\n    for j in range(m):\n        pre[i][j] += pre[i - 1][j]\nfor i in range(n):\n    for j in range(1, m):\n        pre[i][j] += pre[i][j - 1]\nfor i in range(n):\n    for j in range(m):\n        print((pre[i][j] + l[i][j]) % 2, end='')\n    print()", "(n, m) = map(int, input().split())\nl = [list(map(int, input())) for _ in range(n)]\npre = [[0] * m for _ in range(n)]\nfor _ in range(int(input())):\n    (x1, y1, x2, y2) = map(int, input().split())\n    x1 -= 1\n    y1 -= 1\n    x2 -= 1\n    y2 -= 1\n    pre[x1][y1] += 1\n    if x2 + 1 < n:\n        pre[x2 + 1][y1] -= 1\n    if y2 + 1 < m:\n        pre[x1][y2 + 1] -= 1\n    if x2 + 1 < n and y2 + 1 < m:\n        pre[x2 + 1][y2 + 1] += 1\nfor i in range(1, n):\n    for j in range(m):\n        pre[i][j] += pre[i - 1][j]\nfor i in range(n):\n    for j in range(1, m):\n        pre[i][j] += pre[i][j - 1]\nfor i in range(n):\n    for j in range(m):\n        print((pre[i][j] + l[i][j]) % 2, end='')\n    print()", "import sys\n(n, m) = map(int, sys.stdin.readline().strip().split())\narr = []\nfor i in range(n):\n    arr.append(list(input()))\ntemp = [[0 for i in range(m + 1)] for j in range(n + 1)]\nq = int(sys.stdin.readline())\nwhile q:\n    q -= 1\n    (x1, y1, x2, y2) = map(int, sys.stdin.readline().strip().split())\n    x1 -= 1\n    x2 -= 1\n    y1 -= 1\n    y2 -= 1\n    temp[x1][y1] += 1\n    temp[x1][y2 + 1] -= 1\n    temp[x2 + 1][y1] -= 1\n    temp[x2 + 1][y2 + 1] += 1\nfor i in range(n + 1):\n    for j in range(m + 1):\n        if j == 0:\n            temp[i][j] = temp[i][j]\n        else:\n            temp[i][j] += temp[i][j - 1]\nfor j in range(m + 1):\n    for i in range(n + 1):\n        if i == 0:\n            temp[i][j] = temp[i][j]\n        else:\n            temp[i][j] += temp[i - 1][j]\nfor i in range(n):\n    for j in range(m):\n        if temp[i][j] % 2 == 1:\n            if arr[i][j] == '0':\n                print('1', end='')\n            else:\n                print('0', end='')\n        else:\n            print(arr[i][j], end='')\n    print()", "def method_1(dp, x1, y1, x2, y2, m, n):\n    dp[x1][y1] += 1\n    if y2 + 1 < m:\n        dp[x1][y2 + 1] -= 1\n    if x2 + 1 < n:\n        dp[x2 + 1][y1] -= 1\n    if x2 + 1 < n and y2 + 1 < m:\n        dp[x2 + 1][y2 + 1] += 1\n\ndef main():\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input())))\n    t = int(input())\n    dp = [[0 for j in range(m)] for i in range(n)]\n    for _ in range(t):\n        (x1, y1, x2, y2) = map(int, input().split())\n        x1 -= 1\n        y1 -= 1\n        x2 -= 1\n        y2 -= 1\n        method_1(dp, x1, y1, x2, y2, m, n)\n    for i in range(n):\n        for j in range(1, m):\n            dp[i][j] += dp[i][j - 1]\n    for i in range(1, n):\n        for j in range(m):\n            dp[i][j] += dp[i - 1][j]\n    for i in range(n):\n        for j in range(m):\n            if dp[i][j] % 2 == 0:\n                print(arr[i][j], end='')\n            else:\n                print(int(not arr[i][j]), end='')\n        print()\nmain()", "def flip(dp, x1, y1, x2, y2, n, m):\n    dp[x1][y1] += 1\n    if y2 + 1 < m:\n        dp[x1][y2 + 1] -= 1\n    if x2 + 1 < n:\n        dp[x2 + 1][y1] -= 1\n    if x2 + 1 < n and y2 + 1 < m:\n        dp[x2 + 1][y2 + 1] += 1\n\ndef main():\n    (n, m) = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input())))\n    dp = [[0 for j in range(m)] for i in range(n)]\n    q = int(input())\n    for i in range(q):\n        (x1, y1, x2, y2) = map(int, input().split())\n        x1 -= 1\n        y1 -= 1\n        x2 -= 1\n        y2 -= 1\n        flip(dp, x1, y1, x2, y2, n, m)\n    for i in range(n):\n        for j in range(1, m):\n            dp[i][j] += dp[i][j - 1]\n    for i in range(1, n):\n        for j in range(m):\n            dp[i][j] += dp[i - 1][j]\n    for i in range(n):\n        for j in range(m):\n            if dp[i][j] % 2 == 0:\n                print(matrix[i][j], end='')\n            else:\n                print(int(not matrix[i][j]), end='')\n        print()\nmain()", "def method_1(dp, x1, y1, x2, y2):\n    dp[x1][y1] += 1\n    if y2 + 1 < m:\n        dp[x1][y2 + 1] -= 1\n    if x2 + 1 < n:\n        dp[x2 + 1][y1] -= 1\n    if x2 + 1 < n and y2 + 1 < m:\n        dp[x2 + 1][y2 + 1] += 1\n(n, m) = map(int, input().split())\narr = []\nfor i in range(n):\n    arr.append(list(map(int, input())))\nt = int(input())\ndp = [[0 for j in range(m)] for i in range(n)]\nfor _ in range(t):\n    (x1, y1, x2, y2) = map(int, input().split())\n    x1 -= 1\n    y1 -= 1\n    x2 -= 1\n    y2 -= 1\n    method_1(dp, x1, y1, x2, y2)\nfor i in range(n):\n    for j in range(1, m):\n        dp[i][j] += dp[i][j - 1]\nfor i in range(1, n):\n    for j in range(m):\n        dp[i][j] += dp[i - 1][j]\nfor i in range(n):\n    for j in range(m):\n        if dp[i][j] % 2 == 0:\n            print(arr[i][j], end='')\n        else:\n            print(int(not arr[i][j]), end='')\n    print()", "def method_1(dp, x1, y1, x2, y2):\n    dp[x1][y1] += 1\n    if y2 + 1 < m:\n        dp[x1][y2 + 1] -= 1\n    if x2 + 1 < n:\n        dp[x2 + 1][y1] -= 1\n    if x2 + 1 < n and y2 + 1 < m:\n        dp[x2 + 1][y2 + 1] += 1\nnm = list(map(int, input().split()))\nn = nm[0]\nm = nm[1]\narr = []\nfor i in range(n):\n    arr.append(list(map(int, input())))\nt = int(input())\ndp = [[0 for j in range(m)] for i in range(n)]\nfor _ in range(t):\n    (x1, y1, x2, y2) = map(int, input().split())\n    x1 -= 1\n    y1 -= 1\n    x2 -= 1\n    y2 -= 1\n    method_1(dp, x1, y1, x2, y2)\nfor i in range(n):\n    for j in range(1, m):\n        dp[i][j] += dp[i][j - 1]\nfor i in range(1, n):\n    for j in range(m):\n        dp[i][j] += dp[i - 1][j]\nfor i in range(n):\n    for j in range(m):\n        if dp[i][j] % 2 == 0:\n            print(arr[i][j], end='')\n        else:\n            print(int(not arr[i][j]), end='')\n    print()", "def method_1(dp, x1, y1, x2, y2):\n    dp[x1][y1] += 1\n    if y2 + 1 < m:\n        dp[x1][y2 + 1] -= 1\n    if x2 + 1 < n:\n        dp[x2 + 1][y1] -= 1\n    if x2 + 1 < n and y2 + 1 < m:\n        dp[x2 + 1][y2 + 1] += 1\nnm = list(map(int, input().split()))\nn = nm[0]\nm = nm[1]\narr = []\nfor i in range(n):\n    temp = list(map(int, input()))\n    arr.append(temp)\nt = int(input())\ndp = [[0 for j in range(m)] for i in range(n)]\nfor _ in range(t):\n    lst = list(map(int, input().split()))\n    x1 = lst[0] - 1\n    y1 = lst[1] - 1\n    x2 = lst[2] - 1\n    y2 = lst[3] - 1\n    method_1(dp, x1, y1, x2, y2)\nfor i in range(n):\n    for j in range(1, m):\n        dp[i][j] += dp[i][j - 1]\nfor i in range(1, n):\n    for j in range(m):\n        dp[i][j] += dp[i - 1][j]\nfor i in range(n):\n    for j in range(m):\n        if dp[i][j] % 2 == 0:\n            print(arr[i][j], end='')\n        else:\n            print(int(not arr[i][j]), end='')\n    print()", "def method_1(dp, lst):\n    x1 = lst[0] - 1\n    y1 = lst[1] - 1\n    x2 = lst[2] - 1\n    y2 = lst[3] - 1\n    dp[x1][y1] += 1\n    if y2 + 1 < m:\n        dp[x1][y2 + 1] -= 1\n    if x2 + 1 < n:\n        dp[x2 + 1][y1] -= 1\n    if x2 + 1 < n and y2 + 1 < m:\n        dp[x2 + 1][y2 + 1] += 1\nnm = list(map(int, input().split()))\nn = nm[0]\nm = nm[1]\narr = []\nfor i in range(n):\n    temp = list(map(int, input()))\n    arr.append(temp)\nt = int(input())\ndp = [[0 for j in range(m)] for i in range(n)]\nfor _ in range(t):\n    lst = list(map(int, input().split()))\n    method_1(dp, lst)\nfor i in range(n):\n    for j in range(1, m):\n        dp[i][j] += dp[i][j - 1]\nfor i in range(1, n):\n    for j in range(m):\n        dp[i][j] += dp[i - 1][j]\nfor i in range(n):\n    for j in range(m):\n        if dp[i][j] % 2 == 0:\n            print(arr[i][j], end='')\n        else:\n            print(int(not arr[i][j]), end='')\n    print()", "import sys\n(n, m) = map(int, sys.stdin.readline().strip().split())\narr = []\nfor i in range(n):\n    s = input() + '0'\n    temp = []\n    for x in s:\n        temp += [int(x)]\n    arr += [temp]\narr += [[0] * (m + 1)]\nadd = [[0 for i in range(m + 1)] for j in range(n + 1)]\npref1 = [[0 for i in range(m + 1)] for j in range(n + 1)]\npref2 = [[0 for i in range(m + 1)] for j in range(n + 1)]\nq = int(sys.stdin.readline().strip())\nfor _ in range(q):\n    (x1, y1, x2, y2) = map(int, sys.stdin.readline().strip().split())\n    x1 -= 1\n    y1 -= 1\n    x2 -= 1\n    y2 -= 1\n    pref2[x1][y1] += 1\n    pref2[x2 + 1][y1] -= 1\n    pref2[x1][y2 + 1] += -1\n    pref2[x2 + 1][y2 + 1] -= -1\nfor i in range(m):\n    for j in range(n):\n        if j == 0:\n            pref1[j][i] = pref2[j][i]\n        else:\n            pref1[j][i] = pref1[j - 1][i] + pref2[j][i]\nfor i in range(n):\n    for j in range(m):\n        if j == 0:\n            add[i][j] += pref1[i][j]\n        else:\n            add[i][j] = add[i][j - 1] + pref1[i][j]\nfor i in range(n):\n    for j in range(m):\n        arr[i][j] += add[i][j]\n        arr[i][j] %= 2\nfor i in range(n):\n    for j in range(m):\n        print(arr[i][j], end='')\n    print('')", "import sys\n(n, m) = map(int, input().split())\ndp = [[0 for j in range(m + 2)] for k in range(n + 2)]\na = []\nfor j in range(n):\n    t = sys.stdin.readline().strip()\n    a.append(list(t))\nq = int(input())\nfor j in range(0, q):\n    (x1, y1, x2, y2) = map(int, sys.stdin.readline().split())\n    dp[x1][y1] += 1\n    dp[x2 + 1][y2 + 1] += 1\n    dp[x1][y2 + 1] -= 1\n    dp[x2 + 1][y1] -= 1\nfor j in range(1, n + 1):\n    for k in range(1, m + 1):\n        dp[j][k] = dp[j][k] + dp[j - 1][k] + dp[j][k - 1] - dp[j - 1][k - 1]\n        if dp[j][k] % 2 != 0:\n            a[j - 1][k - 1] = int(a[j - 1][k - 1]) ^ 1\nfor j in range(n):\n    print(''.join(map(str, a[j])))", "from sys import stdin, stdout, setrecursionlimit\nfrom math import gcd, ceil, sqrt\nfrom collections import Counter, deque\nfrom bisect import bisect_left, bisect_right\nii1 = lambda : int(stdin.readline().strip())\nis1 = lambda : stdin.readline().strip()\niia = lambda : list(map(int, stdin.readline().strip().split()))\nisa = lambda : stdin.readline().strip().split()\nsetrecursionlimit(100000)\nmod = 1000000007\n(n, m) = iia()\narr = []\nfor i in range(n):\n    arr.append(list(map(int, list(is1()))))\nq = ii1()\ntemp = [[0 for i in range(m)] for j in range(n)]\nfor i in range(q):\n    (x, y, x1, y1) = iia()\n    temp[x - 1][y - 1] += 1\n    if x1 < n:\n        temp[x1][y - 1] -= 1\n    if y1 < m:\n        temp[x - 1][y1] -= 1\n    if x1 < n and y1 < m:\n        temp[x1][y1] -= 1\nfor i in range(n):\n    for j in range(1, m):\n        temp[i][j] += temp[i][j - 1]\nfor i in range(m):\n    for j in range(1, n):\n        temp[j][i] += temp[j - 1][i]\nfor i in range(n):\n    for j in range(m):\n        if temp[i][j] % 2 == 1:\n            arr[i][j] = '0' if arr[i][j] == 1 else '1'\n        else:\n            arr[i][j] = str(arr[i][j])\nfor i in arr:\n    print(''.join(i))", "import sys\nimport math\nfrom math import *\nfrom collections import Counter, defaultdict\n\ndef main():\n    (n, m) = list(map(int, input().split()))\n    arr = []\n    temp = [[0 for i in range(m + 1)] for j in range(n + 1)]\n    for _ in range(n):\n        arr.append(list(map(int, list(input()))) + [0])\n    arr.append([0 for j in range(m + 1)])\n    for _ in range(int(input())):\n        (a, b, c, d) = list(map(int, input().split()))\n        temp[a - 1][b - 1] += 1\n        temp[a - 1][d] += 1\n        temp[c][b - 1] -= 1\n        temp[c][d] -= 1\n    prev = 0\n    for i in range(m + 1):\n        for j in range(1, n + 1):\n            temp[j][i] += temp[j - 1][i]\n    for i in range(n):\n        for j in range(0, m + 1):\n            prev += temp[i][j]\n            arr[i][j] += prev\n    for i in range(n):\n        for j in range(m):\n            arr[i][j] %= 2\n    for i in range(n):\n        print(''.join(map(str, arr[i][:-1])))\nmain()", "(n, m) = map(int, input().split())\nmatrix = []\nfor _ in range(n):\n    matrix.append(list(map(int, list(input()))))\nextra = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\nfor _ in range(int(input())):\n    (x1, y1, x2, y2) = map(int, input().split())\n    extra[x1 - 1][y1 - 1] += 1\n    extra[x1 - 1][y2] -= 1\n    extra[x2][y2] += 1\n    extra[x2][y1 - 1] -= 1\nfor j in range(m):\n    for i in range(1, n):\n        extra[i][j] += extra[i - 1][j]\nfor i in range(n):\n    for j in range(1, m):\n        extra[i][j] += extra[i][j - 1]\nfor i in range(n):\n    for j in range(m):\n        matrix[i][j] += extra[i][j]\n        matrix[i][j] %= 2\n        print(matrix[i][j], end='')\n    print()", "import sys\nimport bisect\nt = 1\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    arr = [[0 for j in range(m + 2)] for i in range(n + 2)]\n    for i in range(n):\n        l.append(input())\n    q = int(input())\n    for __ in range(q):\n        (x1, y1, x2, y2) = map(int, input().split())\n        arr[x1][y1] += 1\n        arr[x2 + 1][y1] -= 1\n        arr[x1][y2 + 1] -= 1\n        arr[x2 + 1][y2 + 1] += 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x1 = arr[i - 1][j] + arr[i][j - 1]\n            y1 = x1 - arr[i - 1][j - 1]\n            arr[i][j] = arr[i][j] + y1\n            print((arr[i][j] + int(l[i - 1][j - 1])) % 2, end='')\n        print()\n    print()", "import sys\nimport math\nfrom collections import defaultdict, Counter\n(n, m) = map(int, input().split())\nl = []\nfor i in range(n):\n    s = input()\n    l.append(s)\nrow = [[0] * m for i in range(n)]\nq = int(input())\nfor j in range(q):\n    (x1, y1, x2, y2) = map(int, input().split())\n    row[x1 - 1][y1 - 1] += 1\n    if y2 != m:\n        row[x1 - 1][y2] -= 1\n    if x2 != n:\n        row[x2][y1 - 1] -= 1\n        if y2 != m:\n            row[x2][y2] -= 1\nfor i in range(n):\n    for j in range(1, m):\n        row[i][j] += row[i][j - 1]\nfor i in range(m):\n    for j in range(1, n):\n        row[j][i] += row[j - 1][i]\nfor i in range(n):\n    s1 = ''\n    for j in range(m):\n        if row[i][j] & 1:\n            s1 += str(int(l[i][j]) ^ 1)\n        else:\n            s1 += l[i][j]\n    print(s1)", "def flip(dp, x1, y1, x2, y2, n, m):\n    dp[x1][y1] += 1\n    if y2 + 1 < m:\n        dp[x1][y2 + 1] -= 1\n    if x2 + 1 < n:\n        dp[x2 + 1][y1] -= 1\n    if x2 + 1 < n and y2 + 1 < m:\n        dp[x2 + 1][y2 + 1] += 1\n\ndef main():\n    (n, m) = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input())))\n    dp = [[0 for j in range(m)] for i in range(n)]\n    q = int(input())\n    for i in range(q):\n        (x1, y1, x2, y2) = map(int, input().split())\n        x1 -= 1\n        y1 -= 1\n        x2 -= 1\n        y2 -= 1\n        flip(dp, x1, y1, x2, y2, n, m)\n    for i in range(n):\n        for j in range(1, m):\n            dp[i][j] += dp[i][j - 1]\n    for i in range(1, n):\n        for j in range(m):\n            dp[i][j] += dp[i - 1][j]\n    for i in range(n):\n        for j in range(m):\n            if dp[i][j] % 2 == 0:\n                print(matrix[i][j], end='')\n            else:\n                print(int(not matrix[i][j]), end='')\n        print()\nmain()"]