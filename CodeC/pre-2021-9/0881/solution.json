["def snek(s, k):\n    if len(set(s)) == 1:\n        return k\n    if len(s) == 1:\n        return k\n    if len(s) % 2 == 1:\n        return float('inf')\n    m = (0 + len(s) - 1) // 2\n    return min(snek(s[:m + 1], k + 1), snek(s[m + 1:], k + 1))\nt = int(input())\nfor i in range(t):\n    k = 0\n    s = input()\n    if len(set(s)) == 1:\n        print(0)\n    elif len(s) % 2 == 1:\n        print(-1)\n    else:\n        ans = snek(s, k)\n        if ans == float('inf'):\n            print(-1)\n        else:\n            print(ans)", "def snek(s, k):\n    if len(set(s)) == 1:\n        return k\n    if len(s) == 1:\n        return k\n    if len(s) % 2 == 1:\n        return float('inf')\n    m = (0 + len(s) - 1) // 2\n    return min(snek(s[:m + 1], k + 1), snek(s[m + 1:], k + 1))\nt = int(input())\nfor i in range(t):\n    k = 0\n    s = input()\n    if len(set(s)) == 1:\n        print(0)\n    elif len(s) % 2 == 1:\n        print(-1)\n    else:\n        ans = snek(s, k)\n        if ans == float('inf'):\n            print(-1)\n        else:\n            print(ans)", "def snek(s, k):\n    if len(set(s)) == 1:\n        return k\n    if len(s) == 1:\n        return k\n    if len(s) % 2 == 1:\n        return float('inf')\n    m = (0 + len(s) - 1) // 2\n    return min(snek(s[:m + 1], k + 1), snek(s[m + 1:], k + 1))\nt = int(input())\nfor i in range(t):\n    k = 0\n    s = input()\n    if len(set(s)) == 1:\n        print(0)\n    elif len(s) % 2 == 1:\n        print(-1)\n    else:\n        ans = snek(s, k)\n        if ans == float('inf'):\n            print(-1)\n        else:\n            print(ans)", "def snek(s, k):\n    if len(set(s)) == 1:\n        return k\n    if len(s) == 1:\n        return k\n    if len(s) % 2 == 1:\n        return float('inf')\n    m = (0 + len(s) - 1) // 2\n    return min(snek(s[:m + 1], k + 1), snek(s[m + 1:], k + 1))\nt = int(input())\nfor i in range(t):\n    k = 0\n    s = input()\n    if len(set(s)) == 1:\n        print(0)\n    elif len(s) % 2 == 1:\n        print(-1)\n    else:\n        ans = snek(s, k)\n        if ans == float('inf'):\n            print(-1)\n        else:\n            print(ans)", "def snek(s, k):\n    if len(set(s)) == 1:\n        return k\n    if len(s) == 1:\n        return k\n    if len(s) % 2 == 1:\n        return float('inf')\n    m = (0 + len(s) - 1) // 2\n    return min(snek(s[:m + 1], k + 1), snek(s[m + 1:], k + 1))\nt = int(input())\nfor i in range(t):\n    k = 0\n    s = input()\n    if len(set(s)) == 1:\n        print(0)\n    elif len(s) % 2 == 1:\n        print(-1)\n    else:\n        ans = snek(s, k)\n        if ans == float('inf'):\n            print(-1)\n        else:\n            print(ans)", "def func(s, k):\n    if len(set(s)) == 1:\n        return k\n    if len(s) == 1:\n        return k\n    if len(s) % 2 == 1:\n        return float('inf')\n    m = (0 + len(s) - 1) // 2\n    return min(func(s[:m + 1], k + 1), func(s[m + 1:], k + 1))\nt = int(input())\nfor tc in range(t):\n    k = 0\n    s = input()\n    if len(set(s)) == 1:\n        print(0)\n    elif len(s) % 2 == 1:\n        print(-1)\n    else:\n        ans = func(s, k)\n        if ans == float('inf'):\n            print(-1)\n        else:\n            print(ans)", "def get_divided_string(s):\n    n = len(s)\n    return (s[:n // 2], s[n // 2:])\nmaxi = 10 ** 10\n\ndef solve(l, min_steps):\n    n = len(l)\n    if len(set(l)) == 1:\n        return min_steps\n    if n % 2 == 1:\n        return maxi\n    else:\n        (x, y) = get_divided_string(l)\n        a = solve(x, min_steps + 1)\n        b = solve(y, min_steps + 1)\n        return min(a, b)\nfor _ in range(int(input())):\n    l = input()\n    if len(l) == 1:\n        print(0)\n        continue\n    ans = solve(l, 0)\n    print(-1 if ans == maxi else ans)", "from math import *\n\ndef check(s):\n    if len(set(s)) == 1:\n        return len(s)\n    if len(s) % 2 == 1:\n        return -1\n    return 0\n\ndef f(s):\n    l = len(s)\n    if check(s) != 0:\n        return check(s)\n    return max(f(s[0:l // 2]), f(s[l // 2:]))\nfor _ in range(int(input())):\n    s = input()\n    ans = f(s)\n    if ans == -1:\n        print('-1')\n    else:\n        print(int(log(len(s), 2)) - int(log(ans, 2)))", "def solve(str, l, r):\n    if len(set(list(str[l:r + 1]))) == 1:\n        return 0\n    if (r - l + 1) % 2:\n        return 100000\n    mid = (l + r) // 2\n    return min(100000, min(solve(str, l, mid), solve(str, mid + 1, r)) + 1)\nfor _ in range(int(input())):\n    str = input()\n    l = len(str)\n    ans = solve(str, 0, l - 1)\n    if ans == 100000:\n        print(-1)\n    else:\n        print(ans)", "def solve(s, l, r, n, cnt):\n    if len(set(list(s[l:r + 1]))) == 1:\n        return cnt\n    elif (r - l + 1) % 2 == 1:\n        return 1000000\n    mid = (l + r) // 2\n    a = solve(s, l, mid, n, cnt + 1)\n    b = solve(s, mid + 1, r, n, cnt + 1)\n    return min(a, b)\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    x = solve(s, 0, n - 1, n, 0)\n    if x == 1000000:\n        print(-1)\n    else:\n        print(x)", "T = int(input().strip())\nfor t in range(T):\n    s = input().strip()\n    l = len(s)\n    n = l\n    k = 0\n    while n & 1 == 0:\n        n //= 2\n        k += 1\n    temp = []\n    for i in range(0, l, n):\n        if len(set(s[i:i + n])) == 1:\n            temp.append(s[i])\n        else:\n            temp.append(None)\n    if any(temp):\n        while k:\n            temp = [temp[i] if temp[i] and temp[i] == temp[i + 1] else None for i in range(0, len(temp), 2)]\n            if any(temp):\n                k -= 1\n            else:\n                break\n        print(k)\n    else:\n        print(-1)", "def is_good(num):\n    r = num[0]\n    for i in range(len(num)):\n        if r != num[i]:\n            return False\n    return True\n\ndef count_pal(S, cnt):\n    if is_good(S):\n        return cnt\n    elif len(S) % 2 == 1:\n        return -1\n    else:\n        r1 = count_pal(S[:len(S) // 2], cnt + 1)\n        r2 = count_pal(S[len(S) // 2:], cnt + 1)\n        mini = min(r1, r2)\n        if mini == -1:\n            return max(r1, r2)\n        else:\n            return min(r1, r2)\nT = int(input())\nfor i in range(T):\n    S = input()\n    print(count_pal(S, 0))", "from collections import Counter\n\ndef all_same(s):\n    if len(Counter(s)) != 1:\n        return False\n    return True\nfor i in range(int(input())):\n    s = input()\n    if len(Counter(s)) == 1:\n        print(0)\n        continue\n    if len(s) % 2 != 0:\n        print(-1)\n        continue\n    count = 1\n    queue = [s[:len(s) // 2], s[len(s) // 2:]]\n    breakit = False\n    while queue:\n        for st in queue:\n            if all_same(st):\n                print(count)\n                breakit = True\n                break\n        if breakit is True:\n            break\n        nq = []\n        for st in queue:\n            if len(st) % 2 == 0:\n                nq.append(st[:len(st) // 2])\n                nq.append(st[len(st) // 2:])\n        queue = nq\n        count += 1\n    if breakit:\n        continue\n    print(-1)", "def func(a, num):\n    if len(set(a)) == 1:\n        return num\n    if len(a) % 2:\n        return 100000000000.0\n    return min(func(a[:len(a) // 2], num + 1), func(a[len(a) // 2:], num + 1))\nt = int(input())\nwhile t:\n    t -= 1\n    a = input()\n    ans = func(a, 0)\n    if ans == 100000000000.0:\n        print(-1)\n    else:\n        print(ans)", "def all_same(s, i, j):\n    u = s[i]\n    for it in range(i + 1, j + 1):\n        if s[it] != u:\n            return False\n    return True\n\ndef div(s, i, j, d):\n    if i > j:\n        return None\n    if all_same(s, i, j):\n        return d\n    if (j - i + 1) % 2 != 0:\n        return None\n    m = (i + j) // 2\n    l = div(s, i, m, d + 1)\n    r = div(s, m + 1, j, d + 1)\n    if l == None and r == None:\n        return None\n    if l == None:\n        return r\n    if r == None:\n        return l\n    return min(l, r)\nfor t in range(int(input())):\n    s = input()\n    ans = div(s, 0, len(s) - 1, 0)\n    if ans == None:\n        print(-1)\n    else:\n        print(ans)"]