["import math\n\ndef squareSum(N):\n    return N * (N + 1) * (2 * N + 1) // 6\n\ndef linearSum(N):\n    return N * (N + 1) // 2\n\ndef getFunctionValue(A, B, C, L, R):\n    if R < L:\n        return 0\n    dxx = squareSum(R) - squareSum(L - 1)\n    dx = linearSum(R) - linearSum(L - 1)\n    d = R - (L - 1)\n    return A * dxx + B * dx + C * d\n\ndef phawinRoundDown(v):\n    l = int(v)\n    r = l + 1\n    if r - v < 1e-06:\n        return r\n    else:\n        return l\n\ndef phawinRoundUp(v):\n    l = int(v)\n    r = l + 1\n    if v - l < 1e-06:\n        return l\n    else:\n        return r\n\ndef solve(L, R):\n    ALL = linearSum(R) - linearSum(L - 1)\n    N = R - L + 1\n    A = 1\n    B = -(N + 1)\n    C = L + N - 1\n    if B * B - 4 * A * C <= 0:\n        fv = getFunctionValue(A, B, C, 1, N)\n        return ALL - fv\n    else:\n        sq = math.sqrt(B * B - 4 * A * C)\n        k1 = (-B - sq) / 2\n        k2 = (-B + sq) / 2\n        k1 = min(phawinRoundDown(k1), N)\n        k2 = max(phawinRoundUp(k2), 1)\n        r1 = getFunctionValue(A, B, C, 1, k1)\n        r2 = getFunctionValue(A, B, C, k2, N)\n        return ALL - (r1 + r2)\n\ndef driver():\n    TC = int(input())\n    for run_id in range(TC):\n        data = input().split()\n        L = int(data[0])\n        R = int(data[1])\n        ans = solve(L, R)\n        print(ans)\ndriver()", "import math\n\ndef squareSum(N):\n    return N * (N + 1) * (2 * N + 1) // 6\n\ndef linearSum(N):\n    return N * (N + 1) // 2\n\ndef getFunctionValue(A, B, C, L, R):\n    if R < L:\n        return 0\n    dxx = squareSum(R) - squareSum(L - 1)\n    dx = linearSum(R) - linearSum(L - 1)\n    d = R - (L - 1)\n    return A * dxx + B * dx + C * d\n\ndef phawinRoundDown(v):\n    l = int(v)\n    r = l + 1\n    if r - v < 1e-06:\n        return r\n    else:\n        return l\n\ndef phawinRoundUp(v):\n    l = int(v)\n    r = l + 1\n    if v - l < 1e-06:\n        return l\n    else:\n        return r\n\ndef solve(L, R):\n    ALL = linearSum(R) - linearSum(L - 1)\n    N = R - L + 1\n    A = 1\n    B = -(N + 1)\n    C = L + N - 1\n    if B * B - 4 * A * C <= 0:\n        fv = getFunctionValue(A, B, C, 1, N)\n        return ALL - fv\n    else:\n        sq = math.sqrt(B * B - 4 * A * C)\n        k1 = (-B - sq) / 2\n        k2 = (-B + sq) / 2\n        k1 = min(phawinRoundDown(k1), N)\n        k2 = max(phawinRoundUp(k2), 1)\n        r1 = getFunctionValue(A, B, C, 1, k1)\n        r2 = getFunctionValue(A, B, C, k2, N)\n        return ALL - (r1 + r2)\n\ndef driver():\n    TC = int(input())\n    for run_id in range(TC):\n        data = input().split()\n        L = int(data[0])\n        R = int(data[1])\n        ans = solve(L, R)\n        print(ans)\ndriver()", "import sys\ninput = iter(sys.stdin.read().splitlines()).__next__\n\ndef Choose3(n):\n    return n * (n - 1) * (n - 2) // 6\n\ndef A000125(n):\n    return Choose3(n + 1) + n + 1\n\ndef sum_1toN(n):\n    return n * (n + 1) // 2\n\ndef sum_1toN_squared(n):\n    return n * (n + 1) * (2 * n + 1) // 6\n\ndef sum_odd_squares(n):\n    return n * (4 * n * n - 1) // 3\n\ndef get_min_start(LEN):\n    if LEN % 2 == 0:\n        i = (LEN - 2) // 2\n        return i * i + i + 1\n    else:\n        i = (LEN - 1) // 2\n        return i * i + 1\n\ndef solve(L, R):\n    assert L <= R\n    LEN = R - L + 1\n    if LEN == 1:\n        return 2 - 1\n    if LEN == 2:\n        return 4 - 1\n    res = A000125(LEN)\n    min_start = get_min_start(LEN)\n    if L < min_start:\n        dif = min_start - L\n        if LEN % 2 == 0:\n            (lo, hi) = (1, 1000000000000000000)\n            bs_res = 0\n            while lo <= hi:\n                mid = lo + (hi - lo) // 2\n                if 2 * sum_1toN(mid) <= dif:\n                    lo = mid + 1\n                    bs_res = mid\n                else:\n                    hi = mid - 1\n            res -= 4 * sum_1toN_squared(bs_res)\n            idx = min_start - 2 * sum_1toN(bs_res)\n            step = (bs_res + 1) * 2\n            res -= (idx - L) * step\n        else:\n            (lo, hi) = (1, 1000000000000000000)\n            bs_res = 0\n            while lo <= hi:\n                mid = lo + (hi - lo) // 2\n                if mid * mid <= dif:\n                    lo = mid + 1\n                    bs_res = mid\n                else:\n                    hi = mid - 1\n            res -= sum_odd_squares(bs_res)\n            idx = min_start - bs_res * bs_res\n            step = (bs_res + 1) * 2 - 1\n            res -= (idx - L) * step\n    res -= 1\n    return res\nTC = int(input())\nfor tc in range(TC):\n    (L, R) = map(int, input().split())\n    res = solve(L, R)\n    print(res)", "import math\n\ndef squareSum(N):\n    return N * (N + 1) * (2 * N + 1) // 6\n\ndef linearSum(N):\n    return N * (N + 1) // 2\n\ndef getFunctionValue(A, B, C, L, R):\n    if R < L:\n        return 0\n    dxx = squareSum(R) - squareSum(L - 1)\n    dx = linearSum(R) - linearSum(L - 1)\n    d = R - (L - 1)\n    return A * dxx + B * dx + C * d\n\ndef phawinRoundDown(v):\n    l = int(v)\n    r = l + 1\n    if r - v < 1e-06:\n        return r\n    else:\n        return l\n\ndef phawinRoundUp(v):\n    l = int(v)\n    r = l + 1\n    if v - l < 1e-06:\n        return l\n    else:\n        return r\n\ndef solve(L, R):\n    ALL = linearSum(R) - linearSum(L - 1)\n    N = R - L + 1\n    A = 1\n    B = -(N + 1)\n    C = L + N - 1\n    if B * B - 4 * A * C <= 0:\n        fv = getFunctionValue(A, B, C, 1, N)\n        return ALL - fv\n    else:\n        sq = math.sqrt(B * B - 4 * A * C)\n        k1 = (-B - sq) / 2\n        k2 = (-B + sq) / 2\n        k1 = min(phawinRoundDown(k1), N)\n        k2 = max(phawinRoundUp(k2), 1)\n        r1 = getFunctionValue(A, B, C, 1, k1)\n        r2 = getFunctionValue(A, B, C, k2, N)\n        return ALL - (r1 + r2)\n\ndef driver():\n    TC = int(input())\n    for run_id in range(TC):\n        data = input().split()\n        L = int(data[0])\n        R = int(data[1])\n        ans = solve(L, R)\n        print(ans)\ndriver()", "def ar(a, n):\n    return (a + a + n - 1) * n // 2\n\ndef pref(l, r, ile):\n    return ar(l, ile)\n\ndef suf(l, r, ile):\n    return ar(r - ile + 1, ile)\n\ndef sumka(b, a, n):\n    add = a * b * n\n    add += n\n    add -= n * (n - 1) * (2 * n - 1) // 6\n    heh = b - a\n    add += heh * (n - 1) * n // 2\n    return add\n\ndef find_left(l, r, md):\n    left = 1\n    right = md + 1\n    while left < right:\n        mid = (left + right) // 2\n        if pref(l, r, mid + 1) > suf(l, r, mid):\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\ndef find_right(l, r, md):\n    left = md\n    right = r - l + 1\n    while left < right:\n        mid = (left + right) // 2\n        if pref(l, r, mid + 1) > suf(l, r, mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n\ndef xdd(l, r, a, b):\n    if b < a:\n        return 0\n    ile = b - a + 1\n    s1 = r - a + 1 - l\n    ile1 = a\n    return sumka(s1, ile1, ile)\nt = int(input())\nfor asd in range(t):\n    (l, r) = map(int, input().split())\n    if l == r:\n        print(1)\n        continue\n    md = (r - l + 1) // 2\n    a = find_left(l, r, md)\n    b = find_right(l, r, md)\n    if a <= b:\n        ans = 0\n        ans += suf(l, r, b)\n        ans -= pref(l, r, a) - 1\n        ans += xdd(l, r, 1, a - 1)\n        ans += xdd(l, r, b + 1, r - l + 1)\n    else:\n        ans = xdd(l, r, 1, r - l + 1)\n    print(ans)"]