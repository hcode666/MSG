["for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    rows = set()\n    cols = set()\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        rows.add(r)\n        cols.add(c)\n    res_rows = []\n    res_cols = []\n    for i in range(1, n + 1):\n        if i not in rows:\n            res_rows.append(i)\n        if i not in cols:\n            res_cols.append(i)\n    print(min(len(res_rows), len(res_cols)), end=' ')\n    for i in range(len(res_rows)):\n        print(res_rows[i], res_cols[i], end=' ')\n    print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    rows = set()\n    cols = set()\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        rows.add(r)\n        cols.add(c)\n    res_rows = []\n    res_cols = []\n    for i in range(1, n + 1):\n        if i not in rows:\n            res_rows.append(i)\n        if i not in cols:\n            res_cols.append(i)\n    print(min(len(res_rows), len(res_cols)), end=' ')\n    for i in range(len(res_rows)):\n        print(res_rows[i], res_cols[i], end=' ')\n    print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    rows = set()\n    cols = set()\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        rows.add(r)\n        cols.add(c)\n    res_rows = []\n    res_cols = []\n    for i in range(1, n + 1):\n        if i not in rows:\n            res_rows.append(i)\n        if i not in cols:\n            res_cols.append(i)\n    print(len(res_rows), end=' ')\n    for i in range(len(res_rows)):\n        print(res_rows[i], res_cols[i], end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    rows = set(range(n))\n    cols = set(range(n))\n    for _ in range(k):\n        (r, c) = map(int, input().split())\n        rows.remove(r - 1)\n        cols.remove(c - 1)\n    p = min(len(rows), len(cols))\n    result = [p]\n    rl = list(rows)\n    rl.sort()\n    cl = list(cols)\n    cl.sort()\n    for i in range(p):\n        result.append(rl[i] + 1)\n        result.append(cl[i] + 1)\n    print(*result)", "import bisect\nfor _ in range(int(input())):\n    (N, K) = list(map(int, input().split()))\n    rows = [i + 1 for i in range(N)]\n    columns = [i + 1 for i in range(N)]\n    popcols = []\n    poprows = []\n    for i in range(K):\n        (r, c) = list(map(int, input().split()))\n        bisect.insort(poprows, r - 1)\n        bisect.insort(popcols, c - 1)\n    popcols = popcols[::-1]\n    poprows = poprows[::-1]\n    for i in popcols:\n        columns.pop(i)\n    for i in poprows:\n        rows.pop(i)\n    columns = columns[::-1]\n    rows = rows[::-1]\n    return_thing = []\n    while len(columns) != 0 and len(rows) != 0:\n        return_thing.append(rows[-1])\n        return_thing.append(columns[-1])\n        rows.pop()\n        columns.pop()\n    print(len(return_thing) // 2, *return_thing)", "T = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    row = [0] * (n + 1)\n    col = [0] * (n + 1)\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        row[r] = col[c] = 1\n    M = []\n    i = 1\n    j = 1\n    while i <= n and j <= n:\n        if row[i]:\n            i += 1\n        elif col[j]:\n            j += 1\n        else:\n            M.append(i)\n            M.append(j)\n            i += 1\n            j += 1\n    M.insert(0, len(M) // 2)\n    print(*M)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    visited1 = [0] * (n + 1)\n    visited2 = [0] * (n + 1)\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        visited1[r] = 1\n        visited2[c] = 1\n    ans = [n - k]\n    count = 0\n    i = 1\n    j = 1\n    for s in range(n - k):\n        while visited1[i]:\n            i += 1\n        while visited2[j]:\n            j += 1\n        ans.append(i)\n        ans.append(j)\n        i += 1\n        j += 1\n    print(*ans)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    rli = set(list(range(1, n + 1)))\n    cli = rli\n    r1 = set()\n    c1 = set()\n    for i in range(k):\n        (a, b) = map(int, input().split())\n        r1.add(a)\n        c1.add(b)\n    rli = rli.difference(r1)\n    cli = cli.difference(c1)\n    rli = list(rli)\n    rli.sort()\n    cli = list(cli)\n    cli.sort()\n    ans = n - k\n    ansli = list()\n    for j in range(ans):\n        ansli.append(rli[j])\n        ansli.append(cli[j])\n    print(ans, *ansli)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    visited1 = [0] * (n + 1)\n    visited2 = [0] * (n + 1)\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        visited1[r] = 1\n        visited2[c] = 1\n    ans = [n - k]\n    count = 0\n    i = 1\n    j = 1\n    for s in range(n - k):\n        while visited1[i]:\n            i += 1\n        while visited2[j]:\n            j += 1\n        ans.append(i)\n        ans.append(j)\n        i += 1\n        j += 1\n    print(*ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = [0] * (n + 1)\n    b = [0] * (n + 1)\n    for j in range(k):\n        (r, c) = map(int, input().split())\n        a[r] = b[c] = 1\n    m = []\n    x = 1\n    y = 1\n    while x <= n and y <= n:\n        if a[x]:\n            x += 1\n        elif b[y]:\n            y += 1\n        else:\n            m.append(x)\n            m.append(y)\n            x += 1\n            y += 1\n    m.insert(0, len(m) // 2)\n    print(*m)", "def solve():\n    res = []\n    free_col = []\n    free_row = []\n    for i in range(n - 1, -1, -1):\n        if i not in rows:\n            free_row.append(i)\n        if i not in cols:\n            free_col.append(i)\n    for i in range(n - k):\n        res.append(free_row.pop() + 1)\n        res.append(free_col.pop() + 1)\n    print(len(res) // 2, *res)\nt = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    rows = set()\n    cols = set()\n    for i in range(k):\n        (r, c) = list(map(int, input().split()))\n        rows.add(r - 1)\n        cols.add(c - 1)\n    solve()", "def solve():\n    res = []\n    free_col = []\n    free_row = []\n    for i in range(n - 1, -1, -1):\n        if i not in rows:\n            free_row.append(i)\n        if i not in cols:\n            free_col.append(i)\n    for i in range(n - k):\n        res.append(free_row.pop() + 1)\n        res.append(free_col.pop() + 1)\n    print(len(res) // 2, *res)\nt = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    rows = set()\n    cols = set()\n    for i in range(k):\n        (r, c) = list(map(int, input().split()))\n        rows.add(r - 1)\n        cols.add(c - 1)\n    solve()", "T = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    row = [0] * (n + 1)\n    col = [0] * (n + 1)\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        row[r] = col[c] = 1\n    M = []\n    i = 1\n    j = 1\n    while i <= n and j <= n:\n        if row[i]:\n            i += 1\n        elif col[j]:\n            j += 1\n        else:\n            M.append(i)\n            M.append(j)\n            i += 1\n            j += 1\n    M.insert(0, len(M) // 2)\n    print(*M)", "T = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    row = [0] * (n + 1)\n    col = [0] * (n + 1)\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        row[r] = col[c] = 1\n    M = []\n    i = 1\n    j = 1\n    while i <= n and j <= n:\n        if row[i]:\n            i += 1\n        elif col[j]:\n            j += 1\n        else:\n            M.append(i)\n            M.append(j)\n            i += 1\n            j += 1\n    M.insert(0, len(M) // 2)\n    print(*M)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    row = [0] * (n + 1)\n    col = [0] * (n + 1)\n    for i in range(k):\n        (a, b) = map(int, input().split())\n        row[a] = col[b] = 1\n    print(n - k, end=' ')\n    i = 1\n    j = 1\n    while i <= n and j <= n:\n        if row[i]:\n            i += 1\n        elif col[j]:\n            j += 1\n        else:\n            print(i, j, end=' ')\n            i += 1\n            j += 1\n    print()", "import sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil\nfrom collections import deque, defaultdict\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\n\nclass SegmentTree:\n\n    def __init__(self, arr):\n        self.narr = [-1]\n        narr = [-1]\n        for l in rg(1, 2 * len(arr) + 1 + 1):\n            self.narr.append(-1)\n        self.arr = arr\n\n    def buildTree(self, i, j, l):\n        if i == j:\n            self.narr[l] = self.arr[i]\n            return self.arr[i]\n        mid = (i + j) // 2\n        lt = self.buildTree(self.narr, self.arr, i, mid, 2 * l)\n        ri = self.buildTree(self.narr, self.arr, mid + 1, j, 2 * l + 1)\n        self.narr[l] = lt + ri\n        return lt + ri\n\n    def rangeUpdate(self, i, j, L, R, l, val):\n        mid = (i + j) // 2\n        if L <= i and j <= R:\n            self.narr[l] += val\n            return\n        if L <= i:\n            self.rangeUpdate(i, mid, L, R, 2 * l, val)\n        if mid + 1 <= R:\n            self.rangeUpdate(mid + 1, j, L, R, 2 * l + 1, val)\n\n    def rangeQuery(self, i, j, L, R, l):\n        if L <= i and j <= R:\n            return self.narr[l]\n        mid = (i + j) // 2\n        ans = 0\n        if L <= mid:\n            ans += self.rangeQuery(i, mid, L, R, 2 * l)\n        if mid + 1 <= R:\n            ans += self.rangeQuery(mid + 1, j, L, R, 2 * l + 1)\n        return ans\nmod = 1000000000 + 7\nfor _ in range(ii()):\n    (n, k) = il()\n    r = set()\n    c = set()\n    for l in range(1, n + 1):\n        r.add(l)\n        c.add(l)\n    for t in range(k):\n        (rk, ck) = il()\n        r.remove(rk)\n        c.remove(ck)\n    r = sorted(list(r))\n    c = sorted(list(c))\n    print(len(r), end=' ')\n    for l in range(len(r)):\n        print(r[l], c[l], end=' ')\n    print()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nimport bisect\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)) + '\\n')\n\ndef wline():\n    return stdin.read().split()\n\ndef main():\n    for _ in tr():\n        (n, k) = sm()\n        rows = set(range(1, n + 1))\n        cols = set(range(1, n + 1))\n        for i in range(k):\n            (r, c) = sm()\n            rows.remove(r)\n            cols.remove(c)\n        print(n - k, end=' ')\n        while rows:\n            print(rows.pop(), end=' ')\n            print(cols.pop(), end=' ')\n        print('')\nmain()", "def index(lst, k, n):\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if lst[mid] == k:\n            return mid\n        elif lst[mid] < k:\n            low = mid + 1\n        else:\n            high = mid - 1\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    rows = [i for i in range(1, n + 1)]\n    cols = [i for i in range(1, n + 1)]\n    if k > 0:\n        for t in range(k):\n            (i, j) = map(int, input().split())\n            rows.pop(index(rows, i, n - t))\n            cols.pop(index(cols, j, n - t))\n    print(n - k, end=' ')\n    for (i, j) in zip(rows, cols):\n        print(i, j, end=' ')\n    print('\\n', end='')", "def index(lst, k, n):\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if lst[mid] == k:\n            return mid\n        elif lst[mid] < k:\n            low = mid + 1\n        else:\n            high = mid - 1\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    rows = [i for i in range(1, n + 1)]\n    cols = [i for i in range(1, n + 1)]\n    if k > 0:\n        for t in range(k):\n            (i, j) = map(int, input().split())\n            rows.pop(index(rows, i, n - t))\n            cols.pop(index(cols, j, n - t))\n    print(n - k, end=' ')\n    for (i, j) in zip(rows, cols):\n        print(i, j, end=' ')\n    print('\\n', end='')", "def index(lst, k, n):\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if lst[mid] == k:\n            return mid\n        elif lst[mid] < k:\n            low = mid + 1\n        else:\n            high = mid - 1\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    rows = [i for i in range(1, n + 1)]\n    cols = [i for i in range(1, n + 1)]\n    if k > 0:\n        for t in range(k):\n            (i, j) = map(int, input().split())\n            rows.pop(index(rows, i, n - t))\n            cols.pop(index(cols, j, n - t))\n    print(n - k, end=' ')\n    for (i, j) in zip(rows, cols):\n        print(i, j, end=' ')\n    print('\\n', end='')", "def index(lst, k, n):\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if lst[mid] == k:\n            return mid\n        elif lst[mid] < k:\n            low = mid + 1\n        else:\n            high = mid - 1\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    rows = [i for i in range(1, n + 1)]\n    cols = [i for i in range(1, n + 1)]\n    if k > 0:\n        for t in range(k):\n            (i, j) = map(int, input().split())\n            rows.pop(index(rows, i, n - t))\n            cols.pop(index(cols, j, n - t))\n    print(n - k, end=' ')\n    for (i, j) in zip(rows, cols):\n        print(i, j, end=' ')\n    print('\\n', end='')", "def index(lst, k, n):\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if lst[mid] == k:\n            return mid\n        elif lst[mid] < k:\n            low = mid + 1\n        else:\n            high = mid - 1\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    rows = [i for i in range(1, n + 1)]\n    cols = [i for i in range(1, n + 1)]\n    if k > 0:\n        for t in range(k):\n            (i, j) = map(int, input().split())\n            rows.pop(index(rows, i, n - t))\n            cols.pop(index(cols, j, n - t))\n    print(n - k, end=' ')\n    for (i, j) in zip(rows, cols):\n        print(i, j, end=' ')\n    print('\\n', end='')", "def index(lst, k, n):\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if lst[mid] == k:\n            return mid\n        elif lst[mid] < k:\n            low = mid + 1\n        else:\n            high = mid - 1\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    rows = [i for i in range(1, n + 1)]\n    cols = [i for i in range(1, n + 1)]\n    if k > 0:\n        for t in range(k):\n            (i, j) = map(int, input().split())\n            rows.pop(index(rows, i, n - t))\n            cols.pop(index(cols, j, n - t))\n    print(n - k, end=' ')\n    for (i, j) in zip(rows, cols):\n        print(i, j, end=' ')\n    print('\\n', end='')", "def index(lst, k, n):\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if lst[mid] == k:\n            return mid\n        elif lst[mid] < k:\n            low = mid + 1\n        else:\n            high = mid - 1\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    rows = [i for i in range(1, n + 1)]\n    cols = [i for i in range(1, n + 1)]\n    if k > 0:\n        for t in range(k):\n            (i, j) = map(int, input().split())\n            rows.pop(index(rows, i, n - t))\n            cols.pop(index(cols, j, n - t))\n    print(n - k, end=' ')\n    for (i, j) in zip(rows, cols):\n        print(i, j, end=' ')\n    print('\\n', end='')", "def index(lst, k, n):\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if lst[mid] == k:\n            return mid\n        elif lst[mid] < k:\n            low = mid + 1\n        else:\n            high = mid - 1\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    rows = [i for i in range(1, n + 1)]\n    cols = [i for i in range(1, n + 1)]\n    if k > 0:\n        for t in range(k):\n            (i, j) = map(int, input().split())\n            rows.pop(index(rows, i, n - t))\n            cols.pop(index(cols, j, n - t))\n    print(n - k, end=' ')\n    for (i, j) in zip(rows, cols):\n        print(i, j, end=' ')\n    print('\\n', end='')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    row = set([x for x in range(1, n + 1)])\n    col = row.copy()\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        row -= {r}\n        col -= {c}\n    r = len(row)\n    res = str(r) + ' '\n    row = list(row)\n    col = list(col)\n    row.sort()\n    col.sort()\n    for i in range(r):\n        res += str(row[i]) + ' ' + str(col[i]) + ' '\n    print(res)", "t = int(input())\nfor tc in range(t):\n    (n, k) = map(int, input().split())\n    row = set([x for x in range(1, n + 1)])\n    col = row.copy()\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        row -= {r}\n        col -= {c}\n    res = len(row)\n    restr = str(res) + ' '\n    row = list(row)\n    col = list(col)\n    row.sort()\n    col.sort()\n    for i in range(res):\n        restr += str(row[i]) + ' ' + str(col[i]) + ' '\n    print(restr.strip())", "T = int(input())\nfor i in range(T):\n    (n, k) = map(int, input().split())\n    row = set()\n    col = set()\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        row.add(r)\n        col.add(c)\n    fullrow = [i for i in range(1, n + 1)]\n    rows = set(fullrow) - row\n    cols = set(fullrow) - col\n    rows = sorted(list(rows))\n    cols = sorted(list(cols))\n    print(len(rows), end=' ')\n    for i in range(len(rows)):\n        print(rows[i], cols[i], end=' ')", "T = int(input())\nfor i in range(T):\n    (n, k) = map(int, input().split())\n    row = set()\n    col = set()\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        row.add(r)\n        col.add(c)\n    fullrow = [i for i in range(1, n + 1)]\n    rows = set(fullrow) - row\n    cols = set(fullrow) - col\n    rows = sorted(list(rows))\n    cols = sorted(list(cols))\n    print(len(rows), end=' ')\n    for i in range(len(rows)):\n        print(rows[i], cols[i], end=' ')", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    row = set()\n    col = set()\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        row.add(r)\n        col.add(c)\n    fullrow = [i for i in range(1, n + 1)]\n    rows = set(fullrow) - row\n    cols = set(fullrow) - col\n    rows = sorted(list(rows))\n    cols = sorted(list(cols))\n    print(len(rows), end=' ')\n    for i in range(len(rows)):\n        print(rows[i], cols[i], end=' ')\n    print()\n    t -= 1", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    row = set()\n    col = set()\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        row.add(r)\n        col.add(c)\n    fullrow = [i for i in range(1, n + 1)]\n    rows = set(fullrow) - row\n    cols = set(fullrow) - col\n    rows = sorted(list(rows))\n    cols = sorted(list(cols))\n    print(len(rows), end=' ')\n    for i in range(len(rows)):\n        print(rows[i], cols[i], end=' ')\n    print()\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    uc = set()\n    ur = set()\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        ur.add(r)\n        uc.add(c)\n    g = [i for i in range(1, n + 1)]\n    row = set(g) - ur\n    col = set(g) - uc\n    row = sorted(list(row))\n    col = sorted(list(col))\n    print(len(row), end=' ')\n    for i in range(len(row)):\n        print(row[i], col[i], end=' ')\n    print()", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    lst_r = []\n    lst_c = []\n    for i in range(K):\n        (r, c) = map(int, input().split())\n        lst_r.append(r)\n        lst_c.append(c)\n    setm = set((i for i in range(1, N + 1)))\n    set_r = set(lst_r)\n    set_c = set(lst_c)\n    r = list(setm ^ set_r)\n    s = list(setm ^ set_c)\n    print(N - K, end=' ')\n    for i in range(len(r)):\n        print(r[i], s[i], end=' ')\n    print('')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    a = []\n    b = []\n    nnn = list(range(1, n + 1))\n    for i in range(k):\n        (x, y) = map(int, input().split(' '))\n        a.append(x)\n        b.append(y)\n    q = list(set(nnn) ^ set(a))\n    w = list(set(nnn) ^ set(b))\n    print(len(q), end=' ')\n    for i in range(len(q)):\n        print(q[i], w[i], end=' ')\n    print('')", "T = int(input())\nans = []\nfor _ in range(T):\n    (N, K) = [int(i) for i in input().split()]\n    R = [False for i in range(N)]\n    C = [False for i in range(N)]\n    for i in range(K):\n        (r, c) = [int(i) for i in input().split()]\n        R[r - 1] = True\n        C[c - 1] = True\n    P = N - K\n    pr = 0\n    pc = 0\n    s = str(P)\n    while True:\n        while pr < N and R[pr] == True:\n            pr += 1\n        while pc < N and C[pc] == True:\n            pc += 1\n        if pr == N or pc == N:\n            break\n        s += ' {} {}'.format(pr + 1, pc + 1)\n        R[pr] = True\n        C[pc] = True\n    ans.append(s)\nfor i in ans:\n    print(i)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    r = [0] * (n + 1)\n    c = [0] * (n + 1)\n    for i in range(k):\n        (r1, c1) = list(map(int, input().split()))\n        r[r1] = 1\n        c[c1] = 1\n    r2 = []\n    c2 = []\n    for i in range(1, n + 1):\n        if r[i] == 0:\n            r2.append(i)\n        if c[i] == 0:\n            c2.append(i)\n    print(n - k, end=' ')\n    for i in range(n - k):\n        print(r2[i], c2[i], end=' ')\n    print('')", "from math import ceil\nfor i in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    data = [0] * (n + 1)\n    memo = [0] * (n + 1)\n    for j in range(k):\n        (x, y) = map(int, input().split())\n        data[x] = True\n        memo[y] = True\n    print(n - k, end=' ')\n    k = 1\n    for j in range(1, n + 1):\n        if data[j] == False:\n            for l in range(k, n + 1):\n                if memo[l] == False:\n                    print(j, l, end=' ')\n                    data[j] = True\n                    memo[l] = True\n                    k = l + 1\n                    break\n    print('')", "test = int(input())\nfor _ in range(test):\n    (n, k) = map(int, input().split())\n    row = [0 for i in range(n + 1)]\n    column = [0 for i in range(n + 1)]\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        row[r] = 1\n        column[c] = 1\n    print(n - k, end=' ')\n    column1 = []\n    row1 = []\n    for i in range(1, n + 1):\n        if row[i] == 0:\n            row1.append(i)\n        if column[i] == 0:\n            column1.append(i)\n    for i in range(n - k):\n        print(row1[i], column1[i], end=' ')\n    print()", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    row = [0 for i in range(n + 1)]\n    column = [0 for i in range(n + 1)]\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        row[r] = 1\n        column[c] = 1\n    print(n - k, end=' ')\n    column1 = []\n    row1 = []\n    for i in range(1, n + 1):\n        if row[i] == 0:\n            row1.append(i)\n        if column[i] == 0:\n            column1.append(i)\n    for i in range(n - k):\n        print(row1[i], column1[i], end=' ')\n    print()", "for _ in range(int(input())):\n    (N, K) = [int(x) for x in input().split()]\n    r = []\n    c = []\n    for i in range(K):\n        raw = input().split()\n        r.append(int(raw[0]))\n        c.append(int(raw[1]))\n    full_set = set((x for x in range(1, N + 1)))\n    rinp_set = set(r)\n    cinp_set = set(c)\n    rout_set = full_set - rinp_set\n    cout_set = full_set - cinp_set\n    rook_pos = []\n    for (r, c) in zip(sorted(list(rout_set)), sorted(list(cout_set))):\n        rook_pos.append(str(r))\n        rook_pos.append(str(c))\n    print(N - K, ' '.join(rook_pos))", "for t in range(int(input())):\n    a = input().split()\n    (n, k) = (int(a[0]), int(a[1]))\n    row = column = set((i + 1 for i in range(n)))\n    (x, y) = (set(), set())\n    for i in range(k):\n        a = input().split()\n        x.add(int(a[0]))\n        y.add(int(a[1]))\n    row = list(row - x)\n    column = list(column - y)\n    row.sort()\n    column.sort()\n    print(n - k, end=' ')\n    for i in range(n - k):\n        print(row[i], column[i], end=' ')", "tc = int(input())\nfor _ in range(tc):\n    (n, k) = list(map(int, input().split()))\n    (rows, cols) = (set(), set())\n    cfull = rfull = set((i for i in range(1, n + 1)))\n    for kk in range(k):\n        (x, y) = list(map(int, input().split()))\n        rows.add(x)\n        cols.add(y)\n    rfull = list(rfull - rows)\n    cfull = list(cfull - cols)\n    rfull.sort()\n    cfull.sort()\n    ans = []\n    for i in range(len(rfull)):\n        ans.append(rfull[i])\n        ans.append(cfull[i])\n    ans.insert(0, len(rfull))\n    ans = list(map(str, ans))\n    print(' '.join(ans))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    rows = [0] * n\n    cols = [0] * n\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        rows[r - 1] = 1\n        cols[c - 1] = 1\n    r = 0\n    c = 0\n    ans = []\n    s = ''\n    while r < n and c < n:\n        if rows[r] == 0 and cols[c] == 0:\n            ans.append((r + 1, c + 1))\n            s += ' ' + str(r + 1) + ' ' + str(c + 1)\n            r += 1\n            c += 1\n        else:\n            if rows[r] == 1:\n                r += 1\n            if cols[c] == 1:\n                c += 1\n    print(str(len(ans)) + s)", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    R = [False] * (N + 1)\n    C = [False] * (N + 1)\n    for i in range(K):\n        (r, c) = map(int, input().split())\n        R[r] = True\n        C[c] = True\n    remainingRows = []\n    remainingColumns = []\n    for i in range(1, N + 1):\n        if not R[i]:\n            remainingRows.append(i)\n        if not C[i]:\n            remainingColumns.append(i)\n    P = len(remainingRows)\n    S = str(P)\n    for i in range(P):\n        S += ' ' + str(remainingRows[i]) + ' ' + str(remainingColumns[i])\n    print(S)", "try:\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        rows = [0] * n\n        cols = [0] * n\n        for i in range(k):\n            (r, c) = map(int, input().split())\n            rows[r - 1] = 1\n            cols[c - 1] = 1\n        r = 0\n        c = 0\n        ans = []\n        s = ''\n        while r < n and c < n:\n            if rows[r] == 0 and cols[c] == 0:\n                ans.append((r + 1, c + 1))\n                s += ' ' + str(r + 1) + ' ' + str(c + 1)\n                r += 1\n                c += 1\n            else:\n                if rows[r] == 1:\n                    r += 1\n                if cols[c] == 1:\n                    c += 1\n        print(str(len(ans)) + s)\nexcept:\n    pass", "for _ in range(int(input())):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    rows = [0] * n\n    cols = [0] * n\n    p = k\n    while k:\n        (a, b) = input().split()\n        a = int(a)\n        b = int(b)\n        rows[a - 1] = 1\n        cols[b - 1] = 1\n        k -= 1\n    if p == n:\n        print(0)\n    else:\n        print(n - p, end=' ')\n        r = []\n        c = []\n        for i in range(len(rows)):\n            if rows[i] != 1:\n                r.append(i + 1)\n        for i in range(len(cols)):\n            if cols[i] != 1:\n                c.append(i + 1)\n        for i in range(len(r) - 1):\n            print(r[i], c[i], end=' ')\n        print(r[-1], c[-1])", "for _ in range(int(input())):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    rows = [0] * n\n    cols = [0] * n\n    p = k\n    while k:\n        (a, b) = input().split()\n        a = int(a)\n        b = int(b)\n        rows[a - 1] = 1\n        cols[b - 1] = 1\n        k -= 1\n    if p == n:\n        print(0)\n    else:\n        print(n - p, end=' ')\n        r = []\n        c = []\n        for i in range(len(rows)):\n            if rows[i] != 1:\n                r.append(i + 1)\n        for i in range(len(cols)):\n            if cols[i] != 1:\n                c.append(i + 1)\n        for i in range(len(r) - 1):\n            print(r[i], c[i], end=' ')\n        print(r[-1], c[-1])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    markr = [1] * n\n    markc = [1] * n\n    ans_list = []\n    for _ in range(k):\n        (a, b) = map(int, input().split())\n        markr[a - 1] = 0\n        markc[b - 1] = 0\n    (row, col) = ([], [])\n    for i in range(n):\n        if markr[i] == 1:\n            row.append(i + 1)\n        if markc[i] == 1:\n            col.append(i + 1)\n    print(len(row), end=' ')\n    for i in range(len(row)):\n        print(row[i], col[i], end=' ')\n    print()", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    a = [x for x in range(1, n + 1)]\n    b = [x for x in range(1, n + 1)]\n    for i in range(m):\n        (x, y) = [int(x) for x in input().split()]\n        a[x - 1] = 0\n        b[y - 1] = 0\n    ss = n - m\n    print(ss, end=' ')\n    i = 0\n    j = 0\n    while ss:\n        while a[i] == 0:\n            i += 1\n        while b[j] == 0:\n            j += 1\n        print(a[i], b[j], end=' ')\n        i += 1\n        j += 1\n        ss -= 1\n    print()", "import collections\nt = input()\nfor _ in range(int(t)):\n    (n, k) = map(int, input().split())\n    pres_row = collections.defaultdict(lambda : 0)\n    pres_col = collections.defaultdict(lambda : 0)\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        pres_row[r] = 1\n        pres_col[c] = 1\n    (rowlist, collist) = ([], [])\n    for i in range(1, n + 1):\n        if pres_row[i] == 0:\n            rowlist.append(i)\n        if pres_col[i] == 0:\n            collist.append(i)\n    print(len(rowlist), end=' ')\n    for i in range(len(rowlist)):\n        print(f'{rowlist[i]} {collist[i]}', end=' ')\n    print('')", "T = int(input())\nfor i in range(T):\n    (N, K) = list(map(int, input().split()))\n    r1 = c1 = set([i for i in range(N)])\n    c2 = set()\n    r2 = set()\n    for j in range(K):\n        (r, c) = list(map(int, input().split()))\n        r2.add(r - 1)\n        c2.add(c - 1)\n    c3 = sorted(list(c1 - c2))\n    r3 = sorted(list(r1 - r2))\n    ans = list(zip(r3, c3))\n    s = []\n    for i in ans:\n        for j in i:\n            s.append(str(j + 1))\n    print(len(s) // 2, ' '.join(s))", "for _ in range(int(input())):\n    (N, K) = list(map(int, input().split()))\n    all_rows = all_cols = set([i for i in range(N)])\n    blk_col = set()\n    blk_row = set()\n    for j in range(K):\n        (r, c) = list(map(int, input().split()))\n        blk_row.add(r - 1)\n        blk_col.add(c - 1)\n    av_col = sorted(list(all_cols - blk_col))\n    av_row = sorted(list(all_rows - blk_row))\n    ans = list(zip(av_row, av_col))\n    pr = []\n    for i in ans:\n        for j in i:\n            pr.append(str(j + 1))\n    print(len(pr) // 2, ' '.join(pr))", "from math import *\n\ndef main():\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        print(n - k, end=' ')\n        pos = []\n        x = 1\n        y = 1\n        rows = [0 for i in range(n + 1)]\n        cols = [0 for i in range(n + 1)]\n        for i in range(k):\n            (r, c) = map(int, input().split())\n            pos.append((r, c))\n            rows[r] = 1\n            cols[c] = 1\n        for i in range(n - k):\n            rr = 0\n            cc = 0\n            for j in range(x, n + 1):\n                if rows[j] == 0:\n                    rr = j\n                    rows[j] = 1\n                    x = j\n                    break\n            for j in range(y, n + 1):\n                if cols[j] == 0:\n                    cc = j\n                    cols[j] = 1\n                    y = j\n                    break\n            print(rr, end=' ')\n            print(cc, end=' ')\n        print()\nmain()", "import itertools\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    fr = {}\n    fc = {}\n    for i in range(1, n + 1):\n        fr[i] = 1\n        fc[i] = 1\n    ocr = []\n    occ = []\n    for i in range(k):\n        (a, b) = map(int, input().split())\n        ocr.append(a)\n        occ.append(b)\n    for i in ocr:\n        del fr[i]\n    for i in occ:\n        del fc[i]\n    print(n - k, end=' ')\n    for (i, j) in zip(fr, fc):\n        print(i, j, end=' ')\n    print()", "import itertools\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    fr = {}\n    fc = {}\n    for i in range(1, n + 1):\n        fr[i] = 1\n        fc[i] = 1\n    ocr = []\n    occ = []\n    for i in range(k):\n        (a, b) = map(int, input().split())\n        ocr.append(a)\n        occ.append(b)\n    for i in ocr:\n        del fr[i]\n    for i in occ:\n        del fc[i]\n    print(n - k, end=' ')\n    for (i, j) in zip(fr, fc):\n        print(i, j, end=' ')\n    print()", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    l3 = []\n    l4 = []\n    l1 = {}\n    l2 = {}\n    for i in range(n):\n        l1[i + 1] = 1\n    for i in range(n):\n        l2[i + 1] = 1\n    for i in range(k):\n        (a, b) = map(int, input().split())\n        if a in l1:\n            l1[a] = 0\n        if b in l2:\n            l2[b] = 0\n    print(n - k, end=' ')\n    for i in l1:\n        if l1[i] != 0:\n            l3.append(i)\n    for i in l2:\n        if l2[i] != 0:\n            l4.append(i)\n    for i in range(n - k):\n        print(l3[i], l4[i], end=' ')\n    print()", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    column = [0] * N\n    row = [0] * N\n    for i in range(K):\n        (r, c) = map(int, input().split())\n        column[c - 1] = 1\n        row[r - 1] = 1\n    column_left = []\n    row_left = []\n    for i in range(N):\n        if column[i] == 0:\n            column_left.append(i + 1)\n        if row[i] == 0:\n            row_left.append(i + 1)\n    print(len(column_left), end=' ')\n    for i in range(len(column_left)):\n        print(row_left[i], column_left[i], end=' ')", "import sys\nfrom math import ceil, floor\nRI = lambda : [int(x) for x in sys.stdin.readline().split()]\nrw = lambda : sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    (n, m) = RI()\n    row = [False] * n\n    col = [False] * n\n    r = {}\n    c = {}\n    for i in range(n):\n        r[i] = 1\n    for i in range(n):\n        c[i] = 1\n    for i in range(m):\n        (a, b) = RI()\n        a -= 1\n        b -= 1\n        r.pop(a)\n        c.pop(b)\n    ans = []\n    r = list(r.keys())\n    c = list(c.keys())\n    for i in range(n - m):\n        ans.append(r[i] + 1)\n        ans.append(c[i] + 1)\n    print(len(ans) // 2, end=' ')\n    for i in ans:\n        print(i, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = n - k\n    r = [0]\n    c = [0]\n    for i in range(n):\n        r.append(0)\n        c.append(0)\n    for i in range(k):\n        (y, z) = map(int, input().split())\n        r[y] = 1\n        c[z] = 1\n    y = []\n    z = []\n    for i in range(1, n + 1):\n        if r[i] == 0:\n            y.append(i)\n        if c[i] == 0:\n            z.append(i)\n    print(a, end=' ')\n    for i in range(a):\n        print(y[i], z[i], end=' ')\n    print()", "t = int(input())\nfor you in range(t):\n    l = input().split()\n    n = int(l[0])\n    k = int(l[1])\n    row = [0 for i in range(n)]\n    col = [0 for i in range(n)]\n    for i in range(k):\n        l = input().split()\n        row[int(l[0]) - 1] = 1\n        col[int(l[1]) - 1] = 1\n    count = 0\n    i = 0\n    j = 0\n    print(n - k, end=' ')\n    while count < n - k:\n        while i < n and row[i]:\n            i += 1\n        while j < n and col[j]:\n            j += 1\n        print(i + 1, end=' ')\n        i += 1\n        print(j + 1, end=' ')\n        j += 1\n        count += 1\n    print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s1 = set(range(n))\n    s2 = set(range(n))\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        s1.remove(r - 1)\n        s2.remove(c - 1)\n    (l1, l2) = (list(s1), list(s2))\n    print(n - k, end=' ')\n    for i in range(len(l1)):\n        print(l1[i] + 1, l2[i] + 1, end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    result = []\n    (n, k) = map(int, input().split())\n    Rows = {i: False for i in range(n)}\n    Columns = {i: False for i in range(n)}\n    for i in range(k):\n        (a, b) = map(int, input().split())\n        Rows[a - 1] = True\n        Columns[b - 1] = True\n    result = []\n    rookToPlaceInRow = [d for d in Rows if Rows[d] == False]\n    rookToPlaceInColumn = [d for d in Columns if Columns[d] == False]\n    result.append(n - k)\n    for i in range(n - k):\n        result.append(rookToPlaceInRow[i] + 1)\n        result.append(rookToPlaceInColumn[i] + 1)\n    for i in range(len(result)):\n        print(result[i], end=' ')\n    print(' ')", "t = int(input())\nfor test in range(t):\n    (n, k) = map(int, input().split())\n    row = [False for i in range(n + 1)]\n    col = [False for i in range(n + 1)]\n    p = n - k\n    print(p, end=' ')\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        row[r] = True\n        col[c] = True\n    (i, j, k) = (1, 1, 1)\n    while k <= p:\n        if row[i]:\n            i += 1\n        elif col[j]:\n            j += 1\n        else:\n            print(i, j, end=' ')\n            k += 1\n            i += 1\n            j += 1\n    print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    sr = set()\n    sc = set()\n    for i in range(k):\n        (a, b) = map(int, input().split())\n        sr.add(a)\n        sc.add(b)\n    ans = [n - k]\n    a = 1\n    b = 1\n    for i in range(n - k):\n        while True:\n            if a not in sr:\n                sr.add(a)\n                break\n            a += 1\n        while True:\n            if b not in sc:\n                sc.add(b)\n                break\n            b += 1\n        ans.append(a)\n        ans.append(b)\n    for i in ans:\n        print(i, end=' ')", "def singleRooks(n, rooks):\n    rows = set((rook[0] for rook in rooks))\n    cols = set((rook[1] for rook in rooks))\n    result = [0]\n    node = [1, 1]\n    while node[0] <= n and node[1] <= n:\n        if node[0] in rows:\n            node[0] += 1\n        elif node[1] in cols:\n            node[1] += 1\n        else:\n            result[0] += 1\n            result.extend(node)\n            node = [node[0] + 1, node[1] + 1]\n    return result\nfor _ in range(int(input())):\n    (n, placedRooks) = [int(i) for i in input().split()]\n    rooks = []\n    for _ in range(placedRooks):\n        rooks.append([int(i) for i in input().split()])\n    print(*singleRooks(n, rooks))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    row = {}\n    col = {}\n    for i in range(1, n + 1):\n        row[i] = 0\n        col[i] = 0\n    for i in range(k):\n        (a, b) = map(int, input().split())\n        row[a] = 1\n        col[b] = 1\n    x = []\n    for i in range(1, n + 1):\n        if not col[i]:\n            x.append(i)\n    ans = []\n    j = 0\n    for i in range(1, n + 1):\n        if not row[i]:\n            ans += [i, x[j]]\n            j += 1\n    print(n - k, *ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l1 = [0] * n\n    l2 = [0] * n\n    for i in range(k):\n        (a, b) = map(int, input().split())\n        l1[a - 1] = 1\n        l2[b - 1] = 1\n    print(n - k, end=' ')\n    p1 = 0\n    p2 = 0\n    for i in range(n - k):\n        while l1[p1] != 0:\n            p1 = p1 + 1\n        while l2[p2] != 0:\n            p2 = p2 + 1\n        p1 += 1\n        p2 += 1\n        print(p1, p2, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    rows = [0] * n\n    cols = [0] * n\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        rows[r - 1] = 1\n        cols[c - 1] = 1\n    r = 0\n    c = 0\n    ans = []\n    s = ''\n    while r < n and c < n:\n        if rows[r] == 0 and cols[c] == 0:\n            ans.append((r + 1, c + 1))\n            s += ' ' + str(r + 1) + ' ' + str(c + 1)\n            r += 1\n            c += 1\n        else:\n            if rows[r] == 1:\n                r += 1\n            if cols[c] == 1:\n                c += 1\n    print(str(len(ans)) + s)", "t = int(input())\nfor _ in range(t):\n    s = input().split(' ')\n    (n, k) = (int(s[0]), int(s[1]))\n    x = []\n    y = []\n    r = {}\n    c = {}\n    for _ in range(k):\n        s = input().split(' ')\n        r[int(s[0])] = 'T'\n        c[int(s[1])] = 'T'\n    for i in range(1, n + 1):\n        if i not in r:\n            x.append(i)\n        if i not in c:\n            y.append(i)\n    l = []\n    l.append(int(len(x)))\n    for i in range(len(x)):\n        l.append(x[i])\n        l.append(y[i])\n    print(*l)", "import numpy as np\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    d = list()\n    e = list()\n    total_rows = []\n    total_col = []\n    for j in range(n):\n        total_rows.append(j + 1)\n        total_col.append(j + 1)\n    rook_rows = []\n    rook_columns = []\n    for j in range(k):\n        (e, f) = map(int, input().split())\n        x = (e, f)\n        rook_rows.append(e)\n        rook_columns.append(f)\n        d.append(x)\n    rows_diff = np.setdiff1d(total_rows, rook_rows)\n    col_diff = np.setdiff1d(total_col, rook_columns)\n    if len(rows_diff) == len(col_diff):\n        print(len(rows_diff), end=' ')\n        for j in range(len(rows_diff)):\n            print(rows_diff[j], end=' ')\n            print(col_diff[j], end=' ')\n    print('')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = []\n    b = []\n    c = [w for w in range(1, n + 1)]\n    d = [w for w in range(1, n + 1)]\n    for i in range(k):\n        (x, y) = map(int, input().split())\n        a.append(x)\n        b.append(y)\n    if n == k:\n        print(0)\n        continue\n    else:\n        c = list(set(c) - set(a))\n        d = list(set(d) - set(b))\n        c.sort()\n        d.sort()\n        print(len(c), end=' ')\n        for i in range(len(c) - 1):\n            print(c[i], d[i], end=' ')\n        print(c[len(c) - 1], d[len(c) - 1])", "from collections import defaultdict as dd\nt = int(input())\nfor _ in range(t):\n    d1 = dd(int)\n    d2 = dd(int)\n    ans = []\n    (n, k) = map(int, input().strip().split(' '))\n    row = set()\n    col = set()\n    for i in range(k):\n        (r, c) = map(int, input().strip().split(' '))\n        d1[r] = 1\n        d2[c] = 1\n    d2next = 1\n    for i in range(1, n + 1):\n        if d1[i] == 0:\n            while d2[d2next] != 0:\n                d2next += 1\n            if d2next <= n:\n                ans.append(i)\n                d1[i] = 1\n                ans.append(d2next)\n                d2[d2next] = 1\n            else:\n                break\n    print(len(ans) // 2, *ans)", "def Diff(li1, li2):\n    return list(set(li1) - set(li2))\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = []\n    b = []\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        a.append(r)\n        b.append(c)\n    c = list(range(1, n + 1))\n    d = list(range(1, n + 1))\n    c = Diff(c, a)\n    d = Diff(d, b)\n    c.sort()\n    d.sort()\n    print(len(c), end=' ')\n    for i in range(len(c)):\n        print(c[i], d[i], end=' ')\n    print()", "t = int(input())\nfor T in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    (p, j) = (n - k, 1)\n    ans = [0] * (2 * p + 1)\n    ans[0] = p\n    r = [0] * k\n    c = [0] * k\n    for i in range(k):\n        (r[i], c[i]) = [int(x) for x in input().split()]\n    r1 = set(r)\n    c1 = set(c)\n    for i in range(1, n + 1):\n        if j > 2 * p - 1:\n            break\n        if i not in r1:\n            ans[j] = i\n            j += 2\n    j = 2\n    for i in range(1, n + 1):\n        if j > 2 * p:\n            break\n        if i not in c1:\n            ans[j] = i\n            j += 2\n    print(*ans)", "T = int(input())\nfor i in range(T):\n    (N, K) = [int(x) for x in input().split()]\n    diff = N - K\n    Row = []\n    Col = []\n    L_Row = []\n    L_Col = []\n    for i in range(1, N + 1):\n        L_Row.append(i)\n        L_Col.append(i)\n    for i in range(K):\n        (a, b) = [int(x) for x in input().split()]\n        Row.append(a)\n        Col.append(b)\n    S_Row = set(L_Row)\n    S_Col = set(L_Col)\n    I_Row = set(Row)\n    I_Col = set(Col)\n    A1 = S_Row - I_Row\n    A2 = S_Col - I_Col\n    Q1 = list(A1)\n    Q2 = list(A2)\n    Q1.sort()\n    Q2.sort()\n    PT = [diff]\n    for i in range(diff):\n        PT.append(Q1[i])\n        PT.append(Q2[i])\n    print(*PT)", "t = int(input())\nfor _ in range(t):\n    kk = list(map(int, input().split()))\n    n = kk[0]\n    q = kk[1]\n    a0 = []\n    a1 = []\n    a = []\n    for __ in range(q):\n        k = list(map(int, input().split()))\n        a.append(k)\n        a0.append(k[0])\n        a1.append(k[1])\n    b0 = [0] * (n + 1)\n    b1 = [0] * (n + 1)\n    l = n - len(a)\n    s = str(l)\n    s += ' '\n    for i in range(q):\n        b0[a0[i]] = 1\n        b1[a1[i]] = 1\n    ans0 = []\n    ans1 = []\n    for i in range(1, n + 1):\n        if b0[i] == 0:\n            ans0.append(i)\n        if b1[i] == 0:\n            ans1.append(i)\n    for i in range(len(ans1)):\n        s += str(ans0[i])\n        s += ' '\n        s += str(ans1[i])\n        s += ' '\n    if s[len(s) - 1] == ' ':\n        s = s[0:len(s) - 1]\n    print(s)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    (row, col) = ([], [])\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        (row.append(r), col.append(c))\n    print(n - k, end=' ')\n    (lr, lc, row, col) = ([], [], set(row), set(col))\n    for i in range(1, n + 1):\n        if i not in row:\n            lr.append(i)\n        if i not in col:\n            lc.append(i)\n    for i in range(n - k):\n        if i == n - k - 1:\n            print(lr[i], lc[i])\n        else:\n            print(lr[i], lc[i], end=' ')", "t = int(input())\nfor i in range(0, t):\n    (n, k) = map(int, input().split())\n    row = [1] * n\n    column = [1] * n\n    for j in range(0, k):\n        (a, b) = map(int, input().split())\n        row[a - 1] = 0\n        column[b - 1] = 0\n    print(n - k, end=' ')\n    r = 0\n    c = 0\n    for p in range(0, n - k):\n        while row[r] == 0:\n            r += 1\n        while column[c] == 0:\n            c += 1\n        print(r + 1, c + 1, end=' ')\n        row[r] = 0\n        column[c] = 0", "t = int(input())\nfor j in range(t):\n    (n, k) = map(int, input().split())\n    r = set()\n    c = set()\n    for i in range(n):\n        r.add(i + 1)\n        c.add(i + 1)\n    for i in range(k):\n        (rw, col) = map(int, input().split())\n        r.remove(rw)\n        c.remove(col)\n    ll = len(r)\n    print(ll, end=' ')\n    for i in range(ll):\n        r1 = r.pop()\n        c1 = c.pop()\n        print(r1, c1, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    rows = [0] * (n + 1)\n    cols = [0] * (n + 1)\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        rows[r] = 1\n        cols[c] = 1\n    r = 1\n    c = 1\n    s = ''\n    count = 0\n    while c <= n and r <= n:\n        if rows[r] == 0 and cols[c] == 0:\n            rows[r] = 1\n            cols[c] = 1\n            s += ' ' + str(r) + ' ' + ' ' + str(c) + ' '\n            count += 1\n            r += 1\n            c += 1\n        else:\n            if rows[r] == 1:\n                r += 1\n            if cols[c] == 1:\n                c += 1\n    print(str(count) + s)", "test_cases = int(input())\nwhile test_cases > 0:\n    (row, col) = map(int, input().strip().split())\n    nclis = []\n    nrlis = []\n    rlis = [0] * row\n    clis = [0] * row\n    if col == 0:\n        print(row, end=' ')\n        for i in range(1, row + 1):\n            print(i, i, end=' ')\n    else:\n        while col > 0:\n            (a, b) = map(int, input().strip().split())\n            rlis[a - 1] = 1\n            clis[b - 1] = 1\n            col -= 1\n        for i in range(row):\n            if rlis[i] == 0:\n                rlis[i] = 1\n                nrlis.append(i + 1)\n            if clis[i] == 0:\n                clis[i] = 1\n                nclis.append(i + 1)\n        print(len(nrlis), end=' ')\n        for i in range(len(nrlis)):\n            print(nrlis[i], nclis[i], end=' ')\n    test_cases -= 1", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    r = [0] * n\n    c = [0] * n\n    for i in range(k):\n        (a, b) = map(int, input().split())\n        r[a - 1] = 1\n        c[b - 1] = 1\n    print(n - k, end=' ')\n    i = j = 0\n    while i < n and j < n:\n        if r[i] == 0 and c[j] == 0:\n            print(i + 1, j + 1, end=' ')\n            i += 1\n            j += 1\n        elif r[i] == 1:\n            i += 1\n        elif c[j] == 1:\n            j += 1\n    print()", "a = int(input())\nfor i in range(a):\n    k = set()\n    l = set()\n    c = 0\n    (x, y) = map(int, input().split())\n    for i in range(x):\n        k.add(i + 1)\n        l.add(i + 1)\n    for i in range(y):\n        (p, q) = map(int, input().split())\n        k.remove(p)\n        l.remove(q)\n    m = ''\n    m = m + str(x - y) + ' '\n    k = list(k)\n    l = list(l)\n    for i in range(len(k)):\n        m = m + str(k[i]) + ' ' + str(l[i]) + ' '\n    print(m)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    R = []\n    C = []\n    for j in range(k):\n        (r, c) = map(int, input().split())\n        R.append(r)\n        C.append(c)\n    print(n - k, end=' ')\n    K = list(range(1, n + 1))\n    r = sorted(list(set(K) - set(R)))\n    c = sorted(list(set(K) - set(C)))\n    for (x, y) in zip(r, c):\n        print(x, y, end=' ')\n    print()", "a = int(input())\nfor i in range(a):\n    (b, c) = map(int, input().split())\n    e = []\n    f = []\n    for j in range(c):\n        (g, h) = map(int, input().split())\n        e.append(g)\n        f.append(h)\n    k = list(range(1, b + 1))\n    p = sorted(list(set(k) - set(e)))\n    l = sorted(list(set(k) - set(f)))\n    print(b - c, end=' ')\n    for (x, y) in zip(p, l):\n        print(x, y, end=' ')", "try:\n    t = int(input())\n    for case in range(t):\n        l = input().split()\n        n = int(l[0])\n        k = int(l[1])\n        rows = []\n        columns = []\n        for rook in range(k):\n            l = input().split()\n            rows.append(int(l[0]))\n            columns.append(int(l[1]))\n        p = n - k\n        rows.sort()\n        columns.sort()\n        finstring = ''\n        finstring += str(p) + ' '\n        rindex = 0\n        cindex = 0\n        i = 1\n        j = 1\n        rowsfree = False\n        colsfree = False\n        while i <= n:\n            if rowsfree and colsfree:\n                finstring += str(i) + ' ' + str(j) + ' '\n                i += 1\n                j += 1\n            elif rowsfree:\n                while cindex < k and columns[cindex] < j:\n                    cindex += 1\n                if cindex == k:\n                    colsfree = True\n                elif columns[cindex] == j:\n                    j += 1\n                else:\n                    finstring += str(i) + ' ' + str(j) + ' '\n                    i += 1\n                    j += 1\n            elif colsfree:\n                while rindex < k and rows[rindex] < i:\n                    rindex += 1\n                if rindex == k:\n                    rowsfree = True\n                elif rows[rindex] > i:\n                    finstring += str(i) + ' ' + str(j) + ' '\n                    j += 1\n                    i += 1\n                else:\n                    i += 1\n            else:\n                while rindex < k and rows[rindex] < i:\n                    rindex += 1\n                if rindex == k:\n                    rowsfree = True\n                elif rows[rindex] > i:\n                    while cindex < k and columns[cindex] < j:\n                        cindex += 1\n                    if cindex == k:\n                        colsfree = True\n                    elif columns[cindex] == j:\n                        j += 1\n                    else:\n                        finstring += str(i) + ' ' + str(j) + ' '\n                        i += 1\n                        j += 1\n                else:\n                    i += 1\n        print(finstring)\nexcept EOFError:\n    pass", "for i in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    r = set()\n    c = set()\n    t = k\n    for i in range(1, n + 1):\n        r.add(i)\n        c.add(i)\n    for i in range(k):\n        (a, b) = map(int, input().strip().split())\n        r.remove(a)\n        c.remove(b)\n    print(n - k, end=' ')\n    u = []\n    v = []\n    for i in r:\n        u.append(i)\n    for i in c:\n        v.append(i)\n    l = []\n    for i in range(len(r)):\n        l.append(u[i])\n        l.append(v[i])\n    for i in l:\n        print(i, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    (lr, lc) = ([], [])\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        lr.append(r)\n        lc.append(c)\n    (row, col) = ([], [])\n    a = set(lr)\n    b = set(lc)\n    for i in range(1, n + 1):\n        if i not in a:\n            row.append(i)\n        if i not in b:\n            col.append(i)\n    print(len(row), end=' ')\n    for i in range(len(row)):\n        print(row[i], col[i], end=' ')", "def findNone(index, arr):\n    for i in range(index + 1, len(arr)):\n        if arr[i] == None:\n            return i\n    return -1\ntestCase = int(input(''))\nfor i in range(0, testCase):\n    line = input('').split(' ')\n    (N, K) = (int(line[0]), int(line[1]))\n    r = [None] * N\n    c = [None] * N\n    for j in range(0, K):\n        line1 = input('').split(' ')\n        (r[int(line1[0]) - 1], c[int(line1[1]) - 1]) = (1, 1)\n    ans = str(N - K) + ''\n    (cI, cJ) = (findNone(-1, r), findNone(-1, c))\n    while cI != -1:\n        ans = ans + ' ' + str(cI + 1) + ' ' + str(cJ + 1)\n        (cI, cJ) = (findNone(cI, r), findNone(cJ, c))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    x = [1 for i in range(n)]\n    y = [1 for i in range(n)]\n    for i in range(k):\n        (a, b) = map(int, input().split())\n        x[a - 1] = 0\n        y[b - 1] = 0\n    print(n - k, end=' ')\n    (j, l) = (0, 0)\n    for i in range(n - k):\n        while x[j] == 0:\n            j += 1\n        print(j + 1, end=' ')\n        j += 1\n        while y[l] == 0:\n            l += 1\n        print(l + 1, end=' ')\n        l += 1\n    print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    rows = [0] * n\n    cols = [0] * n\n    ans = [n - k]\n    for i in range(k):\n        (r, c) = map(int, input().split())\n        rows[r - 1] = 1\n        cols[c - 1] = 1\n    r = 0\n    c = 0\n    while r < n and c < n:\n        if rows[r] == 0 and cols[c] == 0:\n            ans.append(r + 1)\n            ans.append(c + 1)\n            r += 1\n            c += 1\n        else:\n            if rows[r] == 1:\n                r += 1\n            if cols[c] == 1:\n                c += 1\n    print(*ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    x = [1 for i in range(n)]\n    y = [1 for i in range(n)]\n    for i in range(k):\n        (a, b) = map(int, input().split())\n        x[a - 1] = 0\n        y[b - 1] = 0\n    print(n - k, end=' ')\n    (j, l) = (0, 0)\n    for i in range(n - k):\n        while x[j] == 0:\n            j += 1\n        print(j + 1, end=' ')\n        j += 1\n        while y[l] == 0:\n            l += 1\n        print(l + 1, end=' ')\n        l += 1\n    print()", "for x in range(int(input())):\n    f = input().split()\n    n = int(f[0])\n    k = int(f[1])\n    r = []\n    c = []\n    p = []\n    ans = str(n - k) + ' '\n    for q in range(k):\n        s = input().split()\n        r.append(int(s[0]))\n        c.append(int(s[1]))\n    for q in range(n):\n        p.append(q + 1)\n    fr = set(r) ^ set(p)\n    fc = set(c) ^ set(p)\n    fc = list(fc)\n    fr = list(fr)\n    for d in range(n - k):\n        ans += str(fr[d]) + ' ' + str(fc[d]) + ' '\n    print(ans)"]