["import heapq\nfor t in range(int(input())):\n    (N, M) = map(int, input().split())\n    Z = list(map(int, input().split()))\n    C = [[] for i in range(N)]\n    for i in range(M):\n        (L, R, K) = map(int, input().split())\n        C[L - 1].append((R - 1, K))\n    D = [0] * (N + 1)\n    heap = []\n    ans = dmg = 0\n    for i in range(N):\n        dmg -= D[i]\n        for (R, K) in C[i]:\n            heapq.heappush(heap, (-R, K))\n        Z[i] -= dmg\n        while Z[i] > 0:\n            if not heap or -heap[0][0] < i:\n                ans = -1\n                break\n            (R, K) = heapq.heappop(heap)\n            R = -R\n            d = min(K, Z[i])\n            Z[i] -= d\n            K -= d\n            ans += d\n            dmg += d\n            D[R + 1] += d\n            if K:\n                heapq.heappush(heap, (-R, K))\n        if ans == -1:\n            break\n    if ans == -1:\n        print('NO')\n    else:\n        print('YES', ans)", "import heapq\nfor t in range(int(input())):\n    (N, M) = map(int, input().split())\n    Z = list(map(int, input().split()))\n    C = [[] for i in range(N)]\n    for i in range(M):\n        (L, R, K) = map(int, input().split())\n        C[L - 1].append((R - 1, K))\n    D = [0] * (N + 1)\n    heap = []\n    ans = dmg = 0\n    for i in range(N):\n        dmg -= D[i]\n        for (R, K) in C[i]:\n            heapq.heappush(heap, (-R, K))\n        Z[i] -= dmg\n        while Z[i] > 0:\n            if not heap or -heap[0][0] < i:\n                ans = -1\n                break\n            (R, K) = heapq.heappop(heap)\n            R = -R\n            d = min(K, Z[i])\n            Z[i] -= d\n            K -= d\n            ans += d\n            dmg += d\n            D[R + 1] += d\n            if K:\n                heapq.heappush(heap, (-R, K))\n        if ans == -1:\n            break\n    if ans == -1:\n        print('NO')\n    else:\n        print('YES', ans)", "import heapq\nfor t in range(int(input())):\n    (N, M) = map(int, input().split())\n    Z = list(map(int, input().split()))\n    C = [[] for i in range(N)]\n    for i in range(M):\n        (L, R, K) = map(int, input().split())\n        C[L - 1].append((R - 1, K))\n    D = [0] * (N + 1)\n    heap = []\n    ans = dmg = 0\n    for i in range(N):\n        dmg -= D[i]\n        for (R, K) in C[i]:\n            heapq.heappush(heap, (-R, K))\n        Z[i] -= dmg\n        while Z[i] > 0:\n            if not heap or -heap[0][0] < i:\n                ans = -1\n                break\n            (R, K) = heapq.heappop(heap)\n            R = -R\n            d = min(K, Z[i])\n            Z[i] -= d\n            K -= d\n            ans += d\n            dmg += d\n            D[R + 1] += d\n            if K:\n                heapq.heappush(heap, (-R, K))\n        if ans == -1:\n            break\n    if ans == -1:\n        print('NO')\n    else:\n        print('YES', ans)", "import heapq\nfor t in range(int(input())):\n    (N, M) = map(int, input().split())\n    Z = list(map(int, input().split()))\n    C = [[] for i in range(N)]\n    for i in range(M):\n        (L, R, K) = map(int, input().split())\n        C[L - 1].append((R - 1, K))\n    D = [0] * (N + 1)\n    heap = []\n    ans = dmg = 0\n    for i in range(N):\n        dmg -= D[i]\n        for (R, K) in C[i]:\n            heapq.heappush(heap, (-R, K))\n        Z[i] -= dmg\n        while Z[i] > 0:\n            if not heap or -heap[0][0] < i:\n                ans = -1\n                break\n            (R, K) = heapq.heappop(heap)\n            R = -R\n            d = min(K, Z[i])\n            Z[i] -= d\n            K -= d\n            ans += d\n            dmg += d\n            D[R + 1] += d\n            if K:\n                heapq.heappush(heap, (-R, K))\n        if ans == -1:\n            break\n    if ans == -1:\n        print('NO')\n    else:\n        print('YES', ans)"]