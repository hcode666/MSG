["from functools import reduce\n\ndef pfs(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            while n % i == 0:\n                n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef gcd(a, b):\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    g = reduce(gcd, a)\n    if len(pfs(g)) == 0:\n        print('YES')\n    elif max(pfs(g)) > k:\n        print('NO')\n    else:\n        print('YES')", "from functools import reduce\n\ndef pfs(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            while n % i == 0:\n                n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef gcd(a, b):\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    g = reduce(gcd, a)\n    if len(pfs(g)) == 0:\n        print('YES')\n    elif max(pfs(g)) > k:\n        print('NO')\n    else:\n        print('YES')", "import numpy as np\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef gcd_arr(arr, size):\n    result = arr[0]\n    for i in range(1, size):\n        result = gcd(result, arr[i])\n    return result\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    gcdArray = gcd_arr(arr, n)\n    prime_max = 1\n    i = 2\n    while i < gcdArray ** 0.5:\n        while gcdArray % i == 0:\n            gcdArray /= i\n            prime_max = max(prime_max, i)\n        i += 1\n    prime_max = max(prime_max, gcdArray)\n    if prime_max < k + 1:\n        print('YES')\n    else:\n        print('NO')", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if n == 1:\n        print('YES')\n    else:\n        g = gcd(l[0], l[1])\n        for j in range(2, n):\n            g = gcd(g, l[j])\n    if g == 1:\n        print('YES')\n    else:\n        a = []\n        z = 2\n        while z * z <= g:\n            if g % z == 0:\n                while g % z == 0:\n                    a.append(z)\n                    g //= z\n            z += 1\n        if g > 1:\n            a.append(g)\n        m = max(a)\n        print('YES' if m <= k else 'NO')", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if n == 1:\n        print('YES')\n    else:\n        g = gcd(l[0], l[1])\n        for j in range(2, n):\n            g = gcd(g, l[j])\n    if g == 1:\n        print('YES')\n    else:\n        a = []\n        z = 2\n        while z * z <= g:\n            if g % z == 0:\n                while g % z == 0:\n                    a.append(z)\n                    g //= z\n            z += 1\n        if g > 1:\n            a.append(g)\n        m = max(a)\n        print('YES' if m <= k else 'NO')", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor j in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        print('YES')\n    else:\n        g = gcd(arr[0], arr[1])\n        for i in range(2, n):\n            g = gcd(g, arr[i])\n    if g == 1:\n        print('YES')\n    else:\n        a = []\n        i = 2\n        while i * i <= g:\n            if g % i == 0:\n                while g % i == 0:\n                    a.append(i)\n                    g = g // i\n            i += 1\n        if g > 1:\n            a.append(g)\n        m = max(a)\n        if m <= k:\n            print('YES')\n        else:\n            print('NO')", "import math\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef getGCD(num):\n    if len(num) == 2:\n        return gcd(num[0], num[1])\n    if len(num) == 1:\n        return num[0]\n    left = getGCD(num[:len(num) // 2])\n    right = getGCD(num[len(num) // 2:])\n    return gcd(left, right)\n\ndef largestprime(n):\n    maxprime = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n = n // i\n            maxprime = max(maxprime, i)\n    return maxprime\nfor _ in range(int(input())):\n    (n, k) = input().split()\n    num = [int(i) for i in input().split()]\n    if len(num) == 1:\n        print('YES')\n    else:\n        gcdNum = getGCD(num)\n        if gcdNum <= int(k):\n            print('YES')\n        elif largestprime(gcdNum) == 1:\n            print('NO')\n        elif largestprime(gcdNum) <= int(k):\n            print('YES')\n        else:\n            print('NO')", "from math import *\n\ndef maxPrimeFactors(n, k):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    while n % 3 == 0:\n        maxPrime = 3\n        n = n / 3\n    if maxPrime > k:\n        return False\n    for i in range(5, int(sqrt(n)) + 1, 6):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n        if maxPrime > k:\n            return False\n        while n % (i + 2) == 0:\n            maxPrime = i + 2\n            n = n / (i + 2)\n            if maxPrime > k:\n                return False\n    if n > 4:\n        maxPrime = n\n    if maxPrime > k:\n        return False\n    return True\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    g = a[0]\n    for i in range(1, n):\n        g = gcd(a[i], g)\n    if maxPrimeFactors(g, k):\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef factor(n):\n    mmax = 1\n    cp = n\n    if cp % 2 == 0:\n        mmax = 2\n    while cp % 2 == 0:\n        cp /= 2\n    for i in range(3, int(math.sqrt(cp)), 2):\n        if cp % i == 0:\n            mmax = i\n        while cp % i == 0:\n            cp /= i\n    if cp > 2:\n        return int(cp)\n    else:\n        return int(mmax)\n\ndef solve(ar, k):\n    hcf = ar[0]\n    for n in ar[1:]:\n        hcf = gcd(n, hcf)\n    if factor(hcf) <= k:\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    (_, k) = (int(i) for i in input().split())\n    ar = [int(i) for i in input().split()]\n    solve(ar, k)", "import math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef highest_prime_factor(n):\n    mmax = 1\n    cp = n\n    if cp % 2 == 0:\n        mmax = 2\n    while cp % 2 == 0:\n        cp /= 2\n    for i in range(3, int(math.sqrt(cp)), 2):\n        if cp % i == 0:\n            mmax = i\n        while cp % i == 0:\n            cp /= i\n    if cp > 2:\n        return int(cp)\n    else:\n        return int(mmax)\n\ndef solve(ar, k):\n    hcf = ar[0]\n    for n in ar[1:]:\n        hcf = gcd(n, hcf)\n    if highest_prime_factor(hcf) <= k:\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    (_, k) = (int(i) for i in input().split())\n    ar = [int(i) for i in input().split()]\n    solve(ar, k)", "from fractions import gcd\nT = int(input())\nfor i in range(T):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    x = l[0]\n    for u in range(1, n):\n        x = gcd(x, l[u])\n    y = int(x ** 0.5)\n    for i in range(2, y + 1):\n        if i > k:\n            break\n        while x % i == 0:\n            x /= i\n        if x <= k:\n            x = 1\n            break\n    if x == 1:\n        print('YES')\n    else:\n        print('NO')", "from fractions import gcd\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    x = l[0]\n    for u in range(1, n):\n        x = gcd(x, l[u])\n    y = int(x ** 0.5)\n    for i in range(2, y + 1):\n        if i > k:\n            break\n        while x % i == 0:\n            x /= i\n        if x <= k:\n            x = 1\n            break\n    if x == 1:\n        print('YES')\n    else:\n        print('NO')", "from fractions import gcd\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    x = l[0]\n    for u in range(1, n):\n        x = gcd(x, l[u])\n    y = int(x ** 0.5) + 1\n    for i in range(2, y + 1):\n        if i > k:\n            break\n        while x % i == 0:\n            x /= i\n        if x <= k:\n            x = 1\n            break\n    if x == 1:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef gcdMeth(a, b):\n    if b == 0:\n        return a\n    return gcdMeth(b, a % b)\n\ndef possibleCoPrimeArray(n, k, lst):\n    g = lst[0]\n    ans = 1\n    for i in range(1, n):\n        g = gcdMeth(g, lst[i])\n    if n == 1:\n        return 'YES'\n    elif g == 1:\n        return 'YES'\n    else:\n        for i in range(2, int(math.sqrt(g) + 1)):\n            while g % i == 0:\n                g /= i\n                ans = max(ans, i)\n        ans = max(ans, g)\n        if ans <= k:\n            return 'YES'\n    return 'NO'\n\ndef main():\n    for i in range(int(input().strip())):\n        (n, k) = map(int, input().strip().split(' '))\n        lst = list(map(int, input().strip().split(' ')))\n        print('{0}'.format(possibleCoPrimeArray(n, k, lst)))\nmain()", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    (c, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    g = a[0]\n    for i in range(1, len(a)):\n        g = gcd(g, a[i])\n    if len(a) == 1:\n        print('YES')\n    elif g == 1:\n        print('YES')\n    else:\n        i = 2\n        max_num = 0\n        while i * i < g:\n            if g % i == 0:\n                while g % i == 0:\n                    g = g // i\n                    max_num = max(max_num, i)\n            i += 1\n        max_num = max(max_num, g)\n        if max_num <= k:\n            print('YES')\n        else:\n            print('NO')", "from math import sqrt, gcd\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    a = l[0]\n    b = l[1]\n    g = gcd(a, b)\n    m = 1\n    for i in range(2, n):\n        g = gcd(g, l[i])\n        if g == 1:\n            break\n    for i in range(2, int(sqrt(g)) + 1):\n        while g % i == 0:\n            g = g // i\n            m = max(i, m)\n    print('YES') if max(m, g) <= k else print('NO')", "from math import gcd, sqrt\n\ndef primeFactors(n):\n    pf = []\n    while n % 2 == 0:\n        n = n // 2\n        pf.append(2)\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        while n % i == 0:\n            n = n // i\n            pf.append(i)\n    if n > 2:\n        pf.append(n)\n    return pf\nT = int(input())\nans = []\nfor _ in range(T):\n    (N, K) = [int(i) for i in input().split()]\n    A = [int(i) for i in input().split()]\n    g = A[0]\n    for i in range(1, N):\n        g = gcd(A[i], g)\n    x = primeFactors(g)\n    for i in x:\n        if i > K:\n            ans.append('NO')\n            break\n    else:\n        ans.append('YES')\nfor i in ans:\n    print(i)", "import math\n\ndef _factor(n):\n    r = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            r = i\n            while n % i == 0:\n                n = n / i\n        i += 1\n    if n != 1:\n        r = n\n    return r\n\ndef gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef Solution(arr, n, m):\n    g = 0\n    for i in range(len(arr)):\n        g = gcd(g, arr[i])\n    if g == 1:\n        return 'YES'\n    ft = _factor(g)\n    if ft <= m:\n        return 'YES'\n    return 'NO'\nfor t in range(int(input())):\n    (N, M) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(Solution(arr, N, M))", "from math import *\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for i in range(1, n):\n        g = gcd(l[i], g)\n        if g == 1:\n            break\n    m = 1\n    for i in range(2, int(sqrt(g)) + 1):\n        while g % i == 0:\n            g = g // i\n            m = max(i, m)\n    m = max(g, m)\n    if m <= k:\n        print('YES')\n    else:\n        print('NO')", "from math import *\nfor u in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for i in range(1, n):\n        g = gcd(l[i], g)\n        if g == 1:\n            break\n    m = 1\n    for i in range(2, int(sqrt(g)) + 1):\n        while g % i == 0:\n            g = g // i\n            m = max(i, m)\n    m = max(g, m)\n    if m <= k:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    a = l[0]\n    b = l[1]\n    g = math.gcd(a, b)\n    for i in range(2, n):\n        g = math.gcd(g, l[i])\n        if g == 1:\n            break\n    m = 1\n    for i in range(2, int(math.sqrt(g)) + 1):\n        while g % i == 0:\n            g = g // i\n            m = max(i, m)\n    m = max(m, g)\n    if m <= k:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef gcd(a, b):\n    while a % b != 0:\n        (a, b) = (b, a % b)\n    return b\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    g = arr[0]\n    i = 1\n    while i < n:\n        g = gcd(arr[i], g)\n        i += 1\n    if g <= k:\n        print('YES')\n    else:\n        i = 2\n        while i <= int(math.sqrt(g)) and g != 1:\n            if i > k:\n                break\n            elif g % i == 0:\n                g = g // i\n            else:\n                i += 1\n        if g > k:\n            print('NO')\n        else:\n            print('YES')", "import sys\ninput = sys.stdin.readline\n\ndef gcd(x, y):\n    if x % y == 0:\n        return y\n    return gcd(y, x % y)\nt = int(input())\nfor you in range(t):\n    l = input().split()\n    n = int(l[0])\n    k = int(l[1])\n    l = input().split()\n    li = [int(i) for i in l]\n    g = li[0]\n    for i in li:\n        g = gcd(g, i)\n    if g == 1:\n        print('YES')\n        continue\n    l = []\n    i = 2\n    while i * i <= g:\n        if g % i == 0:\n            l.append(i)\n            while g % i == 0:\n                g = g // i\n        i += 1\n    if g != 1:\n        l.append(g)\n    poss = 1\n    for i in l:\n        if i > k:\n            poss = 0\n            break\n    if poss:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef gcd(a, b):\n    while a % b != 0:\n        (a, b) = (b, a % b)\n    return b\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    g = arr[0]\n    i = 1\n    while i < n:\n        g = gcd(arr[i], g)\n        i += 1\n    if g <= k:\n        print('YES')\n    else:\n        i = 2\n        while i <= int(math.sqrt(g)) and g != 1:\n            if i > k:\n                break\n            elif g % i == 0:\n                g = g // i\n            else:\n                i += 1\n        if g > k:\n            print('NO')\n        else:\n            print('YES')", "def gcd(x, y):\n    if x > y:\n        (x, y) = (x, y)\n    else:\n        (x, y) = (y, x)\n    while y != 0:\n        a = x\n        x = y\n        y = a % y\n    return x\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    i = 1\n    m = arr[0]\n    while i < len(arr):\n        m = gcd(m, arr[i])\n        i += 1\n    loli = 0\n    while primes[loli] <= m:\n        if primes[loli] > k or m == 1:\n            break\n        if m % primes[loli] == 0:\n            m //= primes[loli]\n        if m % primes[loli] != 0:\n            loli += 1\n        if m % primes[loli] != 0 and loli == 167:\n            break\n    if m == 1:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nfrom math import sqrt\n\ndef primeFactors(n, k):\n    flag = 1\n    while n % 2 == 0:\n        if k < 2:\n            flag = 0\n            break\n        n = n / 2\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        while n % i == 0:\n            if i > k:\n                flag = 0\n                break\n            n = n / i\n        if flag == 0:\n            break\n    if n > 2:\n        if n > k:\n            flag = 0\n    if flag == 0:\n        print('NO')\n    else:\n        print('YES')\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    g = gcd(l[0], l[1])\n    for i in range(2, n):\n        g = gcd(g, l[i])\n    primeFactors(g, k)", "import math\n\ndef primeFactors(n):\n    maxi = -1\n    while n % 2 == 0:\n        maxi = 2\n        n /= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxi = i\n            n = n / i\n    if n > 2:\n        maxi = n\n    return int(maxi)\n\ndef gcdarray(l):\n    x = l[0]\n    for i in range(len(l)):\n        x = math.gcd(x, l[i])\n    return x\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    array = list(map(int, input().split()))\n    gc = gcdarray(array)\n    maximum = primeFactors(gc)\n    if maximum <= k:\n        print('YES')\n    else:\n        print('NO')", "import math\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    hcf = a[0]\n    max_prime = 1\n    for i in range(1, n):\n        hcf = math.gcd(a[i], hcf)\n    for j in range(2, int(math.sqrt(hcf))):\n        while hcf % j == 0:\n            hcf /= j\n            max_prime = max(max_prime, j)\n    max_prime = max(max_prime, hcf)\n    if max_prime <= k:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef fun(n):\n    maxi = -1\n    while n % 2 == 0:\n        maxi = 2\n        n /= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxi = i\n            n = n / i\n    if n > 2:\n        maxi = n\n    return int(maxi)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    hak = a[0]\n    for i in range(1, n):\n        hak = math.gcd(hak, a[i])\n        if hak == 1:\n            break\n    hak = fun(hak)\n    if hak <= k:\n        print('YES')\n    else:\n        print('NO')", "def gcd(a, b):\n    if a % b == 0:\n        return b\n    return gcd(b, a % b)\nt = int(input())\nfor you in range(t):\n    l = input().split()\n    n = int(l[0])\n    k = int(l[1])\n    l = input().split()\n    li = [int(i) for i in l]\n    gcdo = li[0]\n    for i in li:\n        gcdo = gcd(gcdo, i)\n    if gcdo == 1:\n        print('YES')\n    else:\n        lfi = []\n        i = 2\n        while i * i <= gcdo:\n            if gcdo % i == 0:\n                lfi.append(i)\n                while gcdo % i == 0:\n                    gcdo = gcdo // i\n            i += 1\n        if gcdo != 1:\n            lfi.append(gcdo)\n        if lfi == [] or max(lfi) <= k:\n            print('YES')\n        else:\n            print('NO')", "import math as m\n\ndef max_prime_fact(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n /= 2\n    for i in range(3, int(m.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return maxPrime\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    a = A[0]\n    for j in range(1, len(A)):\n        x = m.gcd(a, A[j])\n        a = x\n    Max = max_prime_fact(a)\n    if Max > K:\n        print('NO')\n    else:\n        print('YES')", "def gcd(a, b):\n    if a % b == 0:\n        return b\n    elif b % a == 0:\n        return a\n    elif a > b:\n        return gcd(b, a % b)\n    elif b > a:\n        return gcd(a, b % a)\nt = int(input())\nfor z in range(t):\n    inp = list(map(int, input().split()))\n    n = inp[0]\n    k = inp[1]\n    inp = list(map(int, input().split()))\n    g = inp[0]\n    for c in range(1, len(inp)):\n        g = gcd(g, inp[c])\n    if g == 1:\n        print('YES')\n    else:\n        l = gcd(g, k)\n        while l != 1:\n            while g % l == 0:\n                g = g // l\n            l = gcd(g, k)\n        if g <= k:\n            print('YES')\n        else:\n            print('NO')", "import functools\nimport math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    g = functools.reduce(math.gcd, l)\n    if g <= m:\n        print('YES')\n    elif math.gcd(g, m) == 1:\n        print('NO')\n    else:\n        print('YES')", "import math\nt = int(input())\n\ndef maxPrimeFactors(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\n\ndef gcd(l):\n    x = l[0]\n    for i in range(len(l)):\n        x = math.gcd(x, l[i])\n    return x\nfor ii in range(t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    l = input().split()\n    for i in range(len(l)):\n        l[i] = int(l[i])\n    if maxPrimeFactors(gcd(l)) <= k:\n        print('YES')\n    else:\n        print('NO')", "import math\nt = int(input())\n\ndef maxPrimeFactors(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\n\ndef gcd(l):\n    x = l[0]\n    for i in range(len(l)):\n        x = math.gcd(x, l[i])\n    return x\nfor ii in range(t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    l = input().split()\n    for i in range(len(l)):\n        l[i] = int(l[i])\n    if maxPrimeFactors(gcd(l)) <= k:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef gcdd(a):\n    x = 0\n    for i in a:\n        x = math.gcd(x, i)\n    return x\nt = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    y = gcdd(a)\n    if y <= k:\n        print('YES')\n    else:\n        while y % 2 == 0 and k != 1:\n            y = y // 2\n        for i in range(3, min(k + 1, int(y ** 0.5) + 1), 2):\n            if i > y or y == 1:\n                break\n            while y % i == 0:\n                y = y // i\n        if y == 1:\n            print('YES')\n        else:\n            print('NO')", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    gcd = math.gcd(a[0], a[1])\n    for i in range(2, n):\n        gcd = math.gcd(gcd, a[i])\n    res = 0\n    for i in range(2, int(math.sqrt(gcd)) + 1):\n        while gcd % i == 0:\n            gcd /= i\n            res = max(i, res)\n    res = max(gcd, res)\n    if res > k:\n        print('NO')\n    else:\n        print('YES')", "import math\n\ndef prime(r):\n    abc = 1\n    for i in range(2, int(math.sqrt(r)) + 1):\n        while r % i == 0:\n            r /= i\n            abc = max(abc, i)\n    return max(abc, r)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    r = l[0]\n    for i in l:\n        r = math.gcd(r, i)\n    x = prime(r)\n    if x <= k:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef fact(gcd, k):\n    prfact = 1\n    for i in range(2, int(math.sqrt(gcd))):\n        while gcd % i == 0:\n            gcd /= i\n            prfact = max(prfact, i)\n    prfact = max(prfact, gcd)\n    print('YES' if prfact <= k else 'NO')\n    return\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    gcd = ar[0]\n    for i in ar:\n        gcd = math.gcd(gcd, i)\n    fact(gcd, k)", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    it = list(map(int, input().split()))\n    g = it[0]\n    for i in it[1:]:\n        g = gcd(g, i)\n    if k >= g:\n        g = 1\n    else:\n        while g % 2 == 0 and k >= 2:\n            g = g // 2\n        for i in range(3, min(k + 1, int(g ** 0.5) + 1), 2):\n            if g == 1 or i > g:\n                break\n            while g % i == 0:\n                g = g // i\n    if g != 1:\n        print('NO')\n    else:\n        print('YES')", "import math\nfrom math import gcd\n\ndef primeFactors(n):\n    la = []\n    while n % 2 == 0:\n        la.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            la.append(i)\n            n = n // i\n    if n > 2:\n        la.append(n)\n    return la\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    k1 = 0\n    for i in l:\n        k1 = gcd(i, k1)\n    if k1 <= k:\n        print('YES')\n    else:\n        z = primeFactors(k1)\n        flag = 0\n        for i in z:\n            if i > k:\n                flag = 1\n                break\n        if flag == 0:\n            print('YES')\n        else:\n            print('NO')", "import math\n\ndef f(p):\n    ma = 1\n    for i in range(2, int(math.sqrt(p)) + 1):\n        while p % i == 0:\n            p //= i\n            ma = max(ma, i)\n    ma = max(ma, p)\n    return ma\nR = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    (n, k) = R()\n    L = list(R())\n    g = L[0]\n    for i in range(1, n):\n        g = math.gcd(g, L[i])\n    if f(g) <= k:\n        print('YES')\n    else:\n        print('NO')", "def largest_prime_factors(n):\n    s = set()\n    limit = int(n ** 0.5) + 2\n    for i in range(2, limit):\n        while n % i == 0:\n            n = n // i\n            s.add(i)\n    if n:\n        s.add(n)\n    return max(s)\nfrom math import gcd\n\ndef fun():\n    test = int(input())\n    for t in range(test):\n        (n, k) = map(int, input().split())\n        arr = list(map(int, input().split()))\n        g = arr[0]\n        for i in arr:\n            g = gcd(g, i)\n        pf = largest_prime_factors(g)\n        if pf > k:\n            print('NO')\n        else:\n            print('YES')\nfun()", "from math import *\nfrom functools import *\n\ndef maxPrimeFactors(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    GCD = reduce(gcd, l)\n    if GCD == 1 or GCD <= k:\n        print('YES')\n    else:\n        print('YES' if maxPrimeFactors(GCD) <= k else 'NO')", "from math import *\nfrom functools import *\n\ndef maxPrimeFactors(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    GCD = reduce(gcd, l)\n    print('YES' if maxPrimeFactors(GCD) <= k else 'NO')", "import math\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = list(map(int, input().split()))\n    res = 'YES'\n    gcd_all = min(c)\n    d = 0\n    if gcd_all == 1:\n        print('YES')\n    else:\n        store = -1\n        if gcd_all % 2 == 0:\n            store = 2\n        while gcd_all % 2 == 0:\n            gcd_all = gcd_all // 2\n        for i in range(3, int(math.sqrt(gcd_all)) + 1, 2):\n            if i > gcd_all:\n                break\n            if gcd_all % i == 0:\n                store = i\n            while gcd_all % i == 0:\n                gcd_all = gcd_all // i\n        if store == -1 and gcd_all > b:\n            print('NO')\n        elif store <= b:\n            print('YES')\n        else:\n            print('NO')", "from math import gcd\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for i in range(1, n):\n        g = gcd(g, l[i])\n    x = 1\n    for i in range(2, int(g ** 0.5) + 1):\n        while g % i == 0:\n            g //= i\n            x = max(x, i)\n    x = max(x, g)\n    if x <= k:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef primeFactors(n):\n    l = []\n    if n % 2 == 0:\n        l += [2]\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            l += [i]\n        while n % i == 0:\n            n = n / i\n    if n > 2:\n        l += [n]\n    return l\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    gc = l[0]\n    for i in range(1, n):\n        gc = math.gcd(gc, l[i])\n    l1 = primeFactors(gc)\n    fl = 1\n    for x in l1:\n        if x > k:\n            fl = 0\n    if fl == 1:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for i in range(1, n):\n        g = gcd(g, l[i])\n    x = 1\n    for i in range(2, int(g ** 0.5) + 1):\n        while g % i == 0:\n            g //= i\n            x = max(x, i)\n    x = max(x, g)\n    if x <= k:\n        print('YES')\n    else:\n        print('NO')", "from math import sqrt as S\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = [int(i) for i in input().split()]\n\n    def gcd(a, b):\n        return a if b == 0 else gcd(b, a % b)\n    g = l[0]\n    for i in range(1, n):\n        g = gcd(g, l[i])\n    maxip = 0\n    for i in range(2, int(S(g))):\n        if g % i == 0:\n            maxip = max(maxip, i)\n            while g % i == 0:\n                g //= i\n    if g > 1:\n        maxip = max(maxip, g)\n    print('YES' if maxip <= k else 'NO')", "from math import sqrt\n\ndef cal_gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\ntc = int(input())\nfor _ in range(tc):\n    (n, k) = map(int, input().strip().split(' '))\n    arr = list(map(int, input().strip().split(' ')))\n    t1 = arr[0]\n    t2 = arr[1]\n    gcd = cal_gcd(t1, t2)\n    for i in range(2, n):\n        gcd = cal_gcd(gcd, arr[i])\n    flag = True\n    r = int(sqrt(gcd))\n    for i in range(2, r):\n        while gcd % i == 0:\n            if i > k:\n                flag = False\n            gcd //= i\n    if gcd > k:\n        flag = False\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "from fractions import gcd\nfrom math import sqrt\nfor _ in range(int(input())):\n    (n, k) = map(int, input().strip().split(' '))\n    a = [int(i) for i in input().split()]\n    d = a[0]\n    for i in range(1, n):\n        d = gcd(d, a[i])\n    s = int(sqrt(d)) + 2\n    for i in range(2, s + 1):\n        if i > k:\n            break\n        while d % i == 0:\n            d /= i\n        if d <= k:\n            d = 1\n            break\n    if d == 1:\n        print('YES')\n    else:\n        print('NO')", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n    if n == 1:\n        print('NO')\n        exit()\n    while True:\n        a = A[0]\n        for ele in A[1:]:\n            a = gcd(a, ele)\n        if a == 1:\n            print('YES')\n            break\n        elif a > k:\n            if a % 2 == 0:\n                if k == 1:\n                    print('NO')\n                    break\n                while a > k:\n                    a = a // 2\n                for i in range(n):\n                    A[i] = A[i] // a\n            else:\n                print('NO')\n                break\n        else:\n            for i in range(n):\n                A[i] = A[i] // a", "from math import gcd\nt = int(input())\nwhile t:\n    t -= 1\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    hcf = a[0]\n    for i in a[1:]:\n        hcf = gcd(hcf, i)\n    f = 1\n    while hcf > 1:\n        divisor = 2\n        noDivisor = True\n        while divisor * divisor <= hcf:\n            if hcf % divisor == 0:\n                noDivisor = False\n                if divisor > k:\n                    f = 0\n                hcf //= divisor\n                break\n            divisor += 1\n        if f == 0 or noDivisor:\n            break\n    if f and hcf <= k:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    x = a[0]\n    for i in range(1, n):\n        x = math.gcd(x, a[i])\n    if k > 1:\n        while True:\n            if x % 2 == 0:\n                x //= 2\n            else:\n                break\n    for i in range(3, int(math.sqrt(x) + 2), 2):\n        while x % i == 0 and i <= k:\n            x //= i\n        if i >= k:\n            break\n    if n == 1:\n        if a[0] == 1:\n            print('YES')\n        else:\n            print('NO')\n    elif x <= k:\n        print('YES')\n    else:\n        print('NO')", "def prime_factors(n):\n    ans_list = set()\n    while n > 0:\n        limit = int(pow(n, 0.5)) + 1\n        for i in range(2, limit):\n            if n % i == 0:\n                n = n // i\n                ans_list.add(i)\n                break\n        else:\n            ans_list.add(n)\n            break\n    return ans_list\nfrom math import gcd\ntest = int(input())\nfor i in range(test):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    g = arr[0]\n    for i in range(1, n):\n        g = gcd(g, arr[i])\n    pf_list = prime_factors(g)\n    m = max(pf_list)\n    if m <= k:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\n\ndef primeFactor(num):\n    res = []\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            res.append(i)\n            num //= i\n        else:\n            i += 1\n    if num > 1:\n        res.append(num)\n    return res\nt = int(input())\nfor h in range(t):\n    (n, k) = map(int, input().split())\n    array = list(map(int, input().split()))\n    g = array[0]\n    for i in range(1, n):\n        g = gcd(g, array[i])\n    if g <= k:\n        print('YES')\n    else:\n        flag = primeFactor(g)\n        if max(flag) > k:\n            print('NO')\n        else:\n            print('YES')", "import math\n\ndef maxPrimeFactors1(n):\n    maxPrime = -1\n    if n == 1:\n        return 1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\n\ndef maxPrimeFactors2(n):\n    maxPrime = -1\n    if n == 1:\n        return 1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(k, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    ar = list(map(int, input().split()))\n    b = True\n    for elem in ar:\n        if n <= 100 and k <= 100:\n            maxPrimeFact = maxPrimeFactors1(elem)\n        else:\n            maxPrimeFact = maxPrimeFactors2(elem)\n        if maxPrimeFact > k:\n            b = False\n            break\n    if b == True:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef maxPrimeFactors1(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\n\ndef maxPrimeFactors2(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(k, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    ar = list(map(int, input().split()))\n    b = True\n    for elem in ar:\n        if n <= 100 and k <= 100:\n            maxPrimeFact = maxPrimeFactors1(elem)\n        else:\n            maxPrimeFact = maxPrimeFactors2(elem)\n        if maxPrimeFact > k:\n            b = False\n            break\n    if b == True:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef maxPrimeFactors1(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(3, n, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\n\ndef maxPrimeFactors2(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(k, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    ar = list(map(int, input().split()))\n    b = True\n    for elem in ar:\n        if n <= 100 and k <= 100:\n            maxPrimeFact = maxPrimeFactors1(elem)\n        else:\n            maxPrimeFact = maxPrimeFactors2(elem)\n        if maxPrimeFact > k:\n            b = False\n            break\n    if b == True:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef maxPrimeFactors1(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\n\ndef maxPrimeFactors2(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(k, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    ar = list(map(int, input().split()))\n    b = True\n    for elem in ar:\n        if n <= 100 and k <= 100:\n            maxPrimeFact = maxPrimeFactors1(elem)\n        else:\n            maxPrimeFact = maxPrimeFactors2(elem)\n        if maxPrimeFact > k:\n            b = False\n            break\n    if b == True:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef maxPrimeFactors1(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\n\ndef maxPrimeFactors2(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(k, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    ar = list(map(int, input().split()))\n    b = True\n    for elem in ar:\n        if n <= 100 and k <= 100:\n            maxPrimeFact = maxPrimeFactors1(elem)\n        else:\n            maxPrimeFact = maxPrimeFactors2(elem)\n        if maxPrimeFact > k:\n            b = False\n            break\n    if b == True:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef maxPrimeFactors1(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\n\ndef maxPrimeFactors2(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(k, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\nt = int(input())\nwhile t > 0:\n    (n, k) = list(map(int, input().split()))\n    ar = list(map(int, input().split()))\n    b = True\n    for elem in ar:\n        if n <= 100 and k <= 100:\n            maxPrimeFact = maxPrimeFactors1(elem)\n        else:\n            maxPrimeFact = maxPrimeFactors2(elem)\n        if maxPrimeFact > k:\n            b = False\n            break\n    if b == True:\n        print('YES')\n    else:\n        print('NO')\n    t = t - 1", "from math import gcd\n\ndef ii():\n    return int(input())\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(map(int, input().split()))\n\ndef primeFactor(n):\n    A = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            A.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        A.append(n)\n    return A\nfor i in range(ii()):\n    (n, k) = mi()\n    A = li()\n    g = A[0]\n    for i in range(1, n):\n        g = gcd(g, A[i])\n    if g <= k:\n        print('YES')\n    else:\n        Z = primeFactor(g)\n        if max(Z) > k:\n            print('NO')\n        else:\n            print('YES')", "from fractions import gcd\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if k >= max(a):\n        print('YES')\n    else:\n        g = 0\n        flag = 0\n        for i in range(n):\n            g = gcd(g, a[i])\n        if g <= k and k != 1:\n            print('YES')\n        elif g % k == 0 and k != 1:\n            print('YES')\n        else:\n            print('NO')", "from fractions import gcd\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if k >= max(a):\n        print('YES')\n    else:\n        g = 0\n        flag = 0\n        for i in range(n):\n            g = gcd(g, a[i])\n        if g <= k and k != 1:\n            print('YES')\n        elif g % k == 0 and k != 1:\n            print('YES')\n        else:\n            print('NO')", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor i in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    nums = [int(x) for x in input().split()]\n    gcd_all = nums[0]\n    for i in nums[1:]:\n        gcd_all = gcd(gcd_all, i)\n    if gcd_all <= k:\n        print('YES')\n    elif gcd_all % k == 0 and k != 1:\n        print('YES')\n    else:\n        print('NO')", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor i in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    nums = [int(x) for x in input().split()]\n    gcd_all = nums[0]\n    for i in nums[1:]:\n        gcd_all = gcd(gcd_all, i)\n    if gcd_all <= k:\n        print('YES')\n    elif gcd_all % k == 0 and k != 1:\n        print('YES')\n    else:\n        print('NO')", "from functools import reduce\nfrom math import gcd\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = reduce(gcd, a)\n    print('YES' if d <= k or gcd(d, k) != 1 else 'NO')", "import math\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\n\ndef maxPrimeFactors(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    g = 0\n    k = 0\n    for i in a:\n        g = math.gcd(g, i)\n    if isPrime(g):\n        k = g\n    else:\n        k = maxPrimeFactors(g)\n    if k <= m:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef primeFactors(n):\n    s = set()\n    while n % 2 == 0:\n        s.add(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            s.add(i)\n            n = n // i\n    if n > 2:\n        s.add(n)\n    return s\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    g = arr[0]\n    for i in arr:\n        g = gcd(g, i)\n    s = primeFactors(g)\n    flag = 1\n    for i in s:\n        if i > k:\n            flag = 0\n            break\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "def comp(a, b):\n    if b == 0:\n        return a\n    else:\n        return comp(b, a % b)\n\ndef primes(n):\n    primfac = []\n    d = 2\n    while d * d <= n:\n        while n % d == 0:\n            primfac.append(int(d))\n            n = n / d\n        d = d + 1\n    if n > 1:\n        primfac.append(int(n))\n    return primfac\nt = int(input())\nwhile t:\n    t = t - 1\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    f = 0\n    a = list(map(int, input().split()))\n    a.sort()\n    x = a[0]\n    for i in range(1, n):\n        x = comp(x, a[i])\n    if x > 1:\n        b = primes(x)\n        if max(b) > k:\n            f = 1\n    if f == 0:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef get_input():\n    ip = input().split()\n    return [int(i) for i in ip]\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    (n, k) = get_input()\n    A = get_input()\n    res = A[0]\n    for c in A[1:]:\n        res = gcd(res, c)\n    while res >= k:\n        a1 = gcd(res, k)\n        res = res / a1\n        if a1 == 1:\n            break\n    if res <= k:\n        print('YES')\n    else:\n        print('NO')", "from fractions import gcd\nfrom math import sqrt\n\ndef GCD(a, n1):\n    ans = 0\n    for i in range(n1):\n        ans = gcd(ans, a[i])\n    return ans\n\ndef pfact_max(n):\n    maxprime = 0\n    if n == 1:\n        maxprime = 1\n    while n % 2 == 0:\n        maxprime = 2\n        n = n / 2\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxprime = i\n            n = n / i\n    if n > 2:\n        maxprime = n\n    return maxprime\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    g = GCD(arr, n)\n    maxp = pfact_max(g)\n    if maxp <= k:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input().strip())):\n    (n, k) = map(int, input().split(' '))\n    a = [int(x) for x in input().split(' ')]\n    gcd = a[0]\n    for i in range(1, n - 1):\n        gcd = find_gcd(gcd, a[i])\n    while True and k != 1:\n        if gcd % 2 == 0:\n            gcd = gcd / 2\n        else:\n            break\n    for i in range(3, int(math.sqrt(gcd) + 2), 2):\n        if i <= k and gcd % i == 0:\n            while gcd % i == 0:\n                gcd = int(gcd / i)\n        elif i > k:\n            break\n    if n == 1:\n        if a[0] == 1:\n            print('YES')\n        else:\n            print('NO')\n    elif gcd > k and gcd != 1:\n        print('NO')\n    else:\n        print('YES')", "import math\n\ndef maxPrimeFactors1(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\n\ndef maxPrimeFactors2(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(k, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if n <= 100 and k <= 100:\n            x = maxPrimeFactors1(a[i])\n        else:\n            x = maxPrimeFactors2(a[i])\n        if x <= k:\n            print('YES')\n            break\n    else:\n        print('NO')", "import math\n\ndef find_gcd_array(ip):\n    result = ip[0]\n    for i in ip[1:]:\n        result = math.gcd(result, i)\n    return result\n\ndef find_factors(n, factors):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if n / i == i:\n                factors.append(i)\n            else:\n                factors.append(i)\n                factors.append(n / i)\nt = int(input())\nwhile t > 0:\n    st = input().split()\n    n = int(st[0])\n    k = int(st[1])\n    ip = list(map(int, input().split()))\n    result = find_gcd_array(ip)\n    factors = [result]\n    find_factors(result, factors)\n    flag = False\n    for i in factors:\n        if i <= k:\n            print('YES')\n            flag = True\n            break\n    if not flag:\n        print('NO')\n    t -= 1", "from functools import reduce\nfrom fractions import gcd\nt = int(input())\nfor z in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    mina = 10 ** 9\n    odda = 0\n    evena = 0\n    for i in range(len(a)):\n        if a[i] < mina:\n            mina = a[i]\n        if a[i] & 1 == 1:\n            odda = 1\n        else:\n            evena = 1\n    if n == 1 or mina <= k:\n        print('YES')\n        continue\n    ans = reduce(gcd, a)\n    if ans > k:\n        for i in range(2, min(int((ans + 1) ** 0.5) + 1, k + 1)):\n            while ans % i == 0:\n                ans = ans // i\n            if not ans:\n                break\n    if ans <= k:\n        print('YES')\n    else:\n        print('NO')", "def isPrime(n):\n    if n <= 11:\n        return n in [2, 3, 5, 7, 11]\n    (r, d) = (0, n - 1)\n    while d % 2 == 0:\n        r += 1\n        d //= 2\n    for a in [2, 3, 5, 7, 11]:\n        (probablePrime, b0) = (False, pow(a, d, n))\n        if b0 in [1, n - 1]:\n            probablePrime = True\n            continue\n        bi = b0\n        for i in range(1, r):\n            bi = bi ** 2 % n\n            if bi == 1:\n                probablePrime = False\n                break\n            if bi == n - 1:\n                probablePrime = True\n                break\n        if probablePrime == False:\n            return False\n    return True\n\ndef getSmallPrimes(smallPrimeLimit):\n    smallPrimes = [False, False] + [True for n in range(2, smallPrimeLimit + 1)]\n    for i in range(smallPrimeLimit):\n        if smallPrimes[i]:\n            for multiple in range(2 * i, smallPrimeLimit + 1, i):\n                smallPrimes[multiple] = False\n    return smallPrimes\nsmallPrimeLimit = 10 ** 1\nsmallPrimes = getSmallPrimes(smallPrimeLimit)\ndel smallPrimeLimit, getSmallPrimes\n\ndef getPrimeFactors(n):\n    if n % 2 == 0:\n        primeFactors = [2]\n        n //= 2\n        while n % 2 == 0:\n            primeFactors.append(2)\n            n //= 2\n    else:\n        primeFactors = []\n    factor = 3\n    if isPrime(n):\n        primeFactors.append(n)\n        n = 1\n    while n != 1:\n        if n % factor == 0 and isPrime(factor):\n            primeFactors.append(factor)\n            n //= factor\n            while n % factor == 0:\n                primeFactors.append(factor)\n                n //= factor\n            if isPrime(n):\n                primeFactors.append(n)\n                n = 1\n        factor += 2\n    return primeFactors\nT = int(input())\nfor _ in range(T):\n    (N, K) = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n    firstPrimes = getPrimeFactors(A[0])\n    firstPrimes = [factor for factor in firstPrimes if factor > K]\n    for prime in firstPrimes:\n        for a in A[1:]:\n            if a % prime != 0:\n                break\n        else:\n            print('NO')\n            break\n    else:\n        print('YES')", "from fractions import gcd\nt = int(input())\n\ndef largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\nfor _ in range(t):\n    (n, k) = input().strip().split(' ')\n    (n, k) = (int(n), int(k))\n    MyList = list(map(int, input().strip().split(' ')))\n    temp = gcd(MyList[0], MyList[1])\n    for i in range(2, len(MyList)):\n        temp = gcd(temp, MyList[i])\n    Mygcd = temp\n    if largest_prime_factor(Mygcd) <= k:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef div(n):\n    d = []\n    while n % 2 == 0:\n        d.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            d.append(i)\n            n = n // i\n    if n > 2:\n        d.append(n)\n    return set(d)\nfor test in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = div(min(l))\n    check = 0\n    for i in d:\n        count = 0\n        if i > k:\n            for j in range(n):\n                if l[j] % i == 0:\n                    count += 1\n                else:\n                    break\n            if count == n:\n                print('NO')\n                check = 1\n                break\n    if check == 0:\n        print('YES')", "from functools import reduce\nfrom fractions import gcd\nimport math\n\ndef maxPrimeFactor(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n /= i\n    if n > 2:\n        maxPrime = n\n    return maxPrime\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = reduce(gcd, a)\n    p = maxPrimeFactor(s)\n    if p <= k:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor j in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    if n >= 2:\n        while 1:\n            x = math.gcd(a[0], a[1])\n            for i in range(2, n):\n                x = math.gcd(x, a[i])\n            if x == 1:\n                print('YES')\n                break\n            elif x <= k:\n                for i in range(n):\n                    a[i] = a[i] // x\n            elif x % 2 != 0:\n                print('NO')\n                break\n            else:\n                while x > k:\n                    x = x // 2\n                if x == 1:\n                    print('NO')\n                    break\n                for i in range(n):\n                    a[i] = a[i] // x\n    else:\n        print('NO')", "from math import gcd\n\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\nfor _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split(' ')]\n    A = [int(x) for x in input().split(' ')]\n    g = A[0]\n    for a in A[1:]:\n        g = gcd(g, a)\n    b = True\n    for a in prime_factors(g):\n        if a > k:\n            print('NO')\n            b = False\n            break\n    if b:\n        print('YES')", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfrom functools import reduce\n\ndef factors(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(pow(n, 0.5) + 1)) if n % i == 0)))\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n > 1:\n        num1 = a[0]\n        num2 = a[1]\n        gcd = find_gcd(num1, num2)\n        for i in range(2, n):\n            gcd = find_gcd(gcd, a[i])\n    else:\n        gcd = a[0]\n    if gcd <= k:\n        print('YES')\n    else:\n        s1 = factors(gcd)\n        l = list(s1)\n        l.sort()\n        pos = 1\n        r = set()\n        if l != None:\n            l.remove(1)\n            for x in l:\n                while gcd / x == gcd // x:\n                    r.add(x)\n                    gcd /= x\n            for x in r:\n                if x > k:\n                    print('NO')\n                    pos = 0\n                    break\n        else:\n            pos = 0\n            print('NO')\n        if pos == 1:\n            print('YES')", "import math\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef check(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\nt = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    count = 0\n    for i in range(n):\n        if a[i] <= k or a[i] == 1:\n            count = 1\n            break\n    if count == 1:\n        print('YES')\n    elif k == 1:\n        print('NO')\n    else:\n        num1 = a[0]\n        num2 = a[1]\n        gcd = find_gcd(num1, num2)\n        for i in range(2, len(a)):\n            gcd = find_gcd(gcd, a[i])\n        if check(gcd) == 0:\n            mainanswer = gcd\n        else:\n            mainanswer = check(gcd)\n        if mainanswer <= k:\n            print('YES')\n        else:\n            print('NO')\n    t = t - 1", "def pfac(n):\n    ar = []\n    if n % 2 == 0:\n        ar.append(2)\n    while n % 2 == 0:\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            ar.append(i)\n        while n % i == 0:\n            n //= i\n    if n > 2:\n        ar.append(n)\n    return ar\nimport math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    if n == 1:\n        print('YES')\n    else:\n        g = math.gcd(ar[0], ar[1])\n        for i in range(2, n):\n            g = math.gcd(g, ar[i])\n        if g <= k:\n            print('YES')\n        else:\n            gar = pfac(g)\n            flag = 1\n            for i in range(len(gar)):\n                if gar[i] > k:\n                    flag = 0\n                    break\n            if flag == 1:\n                print('YES')\n            else:\n                print('NO')", "from math import gcd\nR = lambda : map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, k) = R()\n    a = R()\n    g = next(a)\n    for x in a:\n        g = gcd(g, x)\n    i = 2\n    while i <= min(int(g ** 0.5), k):\n        while g % i == 0:\n            g //= i\n        i += 1\n    print(('YES', 'NO')[g > k])", "from math import gcd\nfrom collections import deque\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    res = arr[0]\n    for num in arr[1:]:\n        res = gcd(res, num)\n    ans = 'YES'\n    pf = []\n    store_res = res\n    while res % 2 == 0:\n        res = res // 2\n        pf.append(2)\n    for i in range(3, int(res ** 0.5) + 1, 2):\n        while res % i == 0:\n            res = res // i\n            pf.append(i)\n    pf.append(res)\n    pf = deque(pf)\n    res = store_res\n    while res > 1:\n        res1 = res\n        while pf:\n            if pf[0] > k:\n                break\n            if res % pf[0] == 0 and pf[0] <= k:\n                res = res // pf[0]\n                pf.popleft()\n                break\n        if res == res1:\n            ans = 'NO'\n            break\n    print(ans)", "from fractions import gcd\nfrom functools import reduce\nfrom math import sqrt\nfrom itertools import count, islice\n\ndef isPrime(n):\n    return n > 1 and all((n % i for i in islice(count(2), int(sqrt(n) - 1))))\n\ndef maxPrime(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\nT = int(input())\nfor i in range(T):\n    (N, K) = map(int, input().split())\n    Alist = list(map(int, input().split()))\n    z = reduce(gcd, Alist)\n    if z <= K:\n        print('YES')\n    elif maxPrime(z) > K:\n        print('NO')\n    else:\n        print('YES')", "from math import gcd\nR = lambda : map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, k) = R()\n    a = R()\n    g = next(a)\n    for x in a:\n        g = gcd(g, x)\n    for i in range(2, min(int(g ** 0.5), k) + 1):\n        while g % i == 0:\n            g //= i\n    print(('YES', 'NO')[g > k])", "def ii():\n    return int(input())\n\ndef mi():\n    return map(int, input().split())\n\ndef si():\n    return input()\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef lpf(n):\n    d = 2\n    temp = d\n    while d * d <= n:\n        while n % d == 0:\n            if d > temp:\n                temp = d\n            n //= d\n        d += 1\n    if n > temp:\n        temp = n\n    return temp\n\ndef sol():\n    (n, k) = mi()\n    if n == 1:\n        print('NO')\n        return\n    arr = list(mi())\n    a = arr[0]\n    for i in range(n - 1):\n        a = gcd(a, arr[i])\n    b = lpf(a)\n    if a == 1:\n        print('YES')\n    elif b > k:\n        print('NO')\n    else:\n        print('YES')\nfor _ in range(ii()):\n    sol()", "def ip():\n    return int(input())\n\ndef ipp():\n    return map(int, input().split())\n\ndef sar():\n    return list(ipp())\n\ndef pars(a):\n    print(' '.join(list(map(str, a))))\n    print('\\r')\n\ndef parl(a):\n    print('\\r'.join(list(map(str, a))))\n    print('\\r')\nimport fractions, math\n\ndef maxPrimeFactors(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\nT = 1\nT = int(input().strip())\nfor _ in range(T):\n    (n, k) = ipp()\n    a = []\n    a = sar()\n    if n == 1:\n        if a[0] <= k:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        gd = fractions.gcd(a[0], a[1])\n        for i in range(3, n):\n            gd = fractions.gcd(a[i], gd)\n        p = maxPrimeFactors(gd)\n        if p <= k:\n            print('YES')\n        else:\n            print('NO')"]