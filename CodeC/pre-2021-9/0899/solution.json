["def divisor(num):\n    a = ()\n    div = list(a)\n    i = 1\n    while i * i < num:\n        if num % i == 0:\n            div.append(i)\n            div.append(num // i)\n        i += 1\n    if i * i == num:\n        div.append(i)\n    return div\ntest = int(input())\nwhile test:\n    (n, a, b, c) = map(int, input().split())\n    d = divisor(n)\n    ct = 0\n    for i in d:\n        if i <= a:\n            for j in d:\n                if j <= b:\n                    if n % (i * j) == 0 and n // (i * j) <= c:\n                        ct += 1\n    print(ct)\n    test -= 1", "from collections import *\nfrom itertools import *\nq = defaultdict(set)\n\ndef divc(i):\n    for j in range(1, int(i ** 0.5) + 1):\n        if i % j == 0:\n            q[i].add(j)\n            q[i].add(i // j)\n\ndef cnt(i, j):\n    ans = 0\n    for k in q[j]:\n        o = j // k\n        for (x, y, z) in per:\n            if i <= x and k <= y and (o <= z):\n                ans += 1\n    return ans\nfor _ in range(int(input())):\n    (n, a, b, c) = map(int, input().split())\n    per = set(permutations([a, b, c], 3))\n    l = set()\n    for j in range(1, int(n ** 0.5) + 1):\n        if n % j == 0:\n            if j not in q:\n                divc(j)\n            if n // j not in q:\n                divc(n // j)\n            l.add(j)\n            l.add(n // j)\n    ans = 0\n    for i in l:\n        ans += cnt(i, n // i)\n    print(ans // [0, 1, 2, 6][len({a, b, c})])", "from collections import *\nfrom itertools import *\nq = defaultdict(set)\n\ndef divc(i):\n    for j in range(1, int(i ** 0.5) + 1):\n        if i % j == 0:\n            q[i].add(j)\n            q[i].add(i // j)\n\ndef cnt(i, j):\n    ans = 0\n    for k in q[j]:\n        o = j // k\n        for (x, y, z) in per:\n            if i <= x and k <= y and (o <= z):\n                ans += 1\n    return ans\nfor _ in range(int(input())):\n    (n, a, b, c) = map(int, input().split())\n    per = set(permutations([a, b, c], 3))\n    l = set()\n    for j in range(1, int(n ** 0.5) + 1):\n        if n % j == 0:\n            if j not in q:\n                divc(j)\n            if n // j not in q:\n                divc(n // j)\n            l.add(j)\n            l.add(n // j)\n    ans = 0\n    for i in l:\n        ans += cnt(i, n // i)\n    print(ans // [0, 1, 2, 6][len({a, b, c})])", "import math\nt = int(input())\nfor i in range(t):\n    (n, a, b, c) = map(int, input().split())\n    s = 0\n    d = [1]\n    k = 2\n    while k <= math.sqrt(n):\n        if n % k == 0:\n            if n // k == k:\n                d.append(k)\n            else:\n                d.append(k)\n                d.append(n // k)\n        k += 1\n    d.sort()\n    for x in d:\n        if x <= a:\n            for y in d:\n                if y <= b:\n                    if n % (x * y) == 0 and n // (x * y) <= c:\n                        s += 1\n                else:\n                    break\n        else:\n            break\n    print(s)", "import math\nt = int(input())\nfor i in range(t):\n    (n, a, b, c) = map(int, input().split())\n    s = 0\n    d = [1]\n    k = 2\n    while k <= math.sqrt(n):\n        if n % k == 0:\n            if n // k == k:\n                d.append(k)\n            else:\n                d.append(k)\n                d.append(n // k)\n        k += 1\n    d.sort()\n    for x in d:\n        if x <= a:\n            for y in d:\n                if y <= b:\n                    if n % (x * y) == 0 and n // (x * y) <= c:\n                        s += 1\n                else:\n                    break\n        else:\n            break\n    print(s)", "import math\nfor tc in range(int(input())):\n    (n, a, b, c) = map(int, input().split(' '))\n    count = 0\n    div = [1]\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                div.append(i)\n            else:\n                div.append(i)\n                div.append(n // i)\n        i += 1\n    div.sort()\n    for x in div:\n        if x <= a:\n            for y in div:\n                if y <= b:\n                    if n % (x * y) == 0 and n // (x * y) <= c:\n                        count += 1\n                else:\n                    break\n        else:\n            break\n    print(count)", "import math\nfor tc in range(int(input())):\n    (n, a, b, c) = map(int, input().split(' '))\n    count = 0\n    div = [1]\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                div.append(i)\n            else:\n                div.append(i)\n                div.append(n // i)\n        i += 1\n    div.sort()\n    for x in div:\n        if x <= a:\n            for y in div:\n                if y <= b:\n                    if n % (x * y) == 0 and n // (x * y) <= c:\n                        count += 1\n                else:\n                    break\n        else:\n            break\n    print(count)", "import math\nfor _ in range(int(input())):\n    (n, a, b, c) = map(int, input().split())\n    div = [1]\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                div.append(i)\n            else:\n                div.extend([i, n // i])\n        i += 1\n    div.sort()\n    cnt = 0\n    for i in div:\n        if i <= a:\n            for j in div:\n                if j <= b:\n                    if n % (i * j) == 0 and n // (i * j) <= c:\n                        cnt += 1\n                else:\n                    break\n        else:\n            break\n    print(cnt)", "import math\nfor l in range(int(input())):\n    (n, a, b, c) = map(int, input().split(' '))\n    count = 0\n    div = [1]\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                div.append(i)\n            else:\n                div.append(i)\n                div.append(n // i)\n        i += 1\n    div.sort()\n    for x in div:\n        if x <= a:\n            for y in div:\n                if y <= b:\n                    if n % (x * y) == 0 and n // (x * y) <= c:\n                        count += 1\n                else:\n                    break\n        else:\n            break\n    print(count)", "import math\nfor l in range(int(input())):\n    (n, a, b, c) = map(int, input().split(' '))\n    count = 0\n    div = [1]\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                div.append(i)\n            else:\n                div.append(i)\n                div.append(n // i)\n        i += 1\n    div.sort()\n    for x in div:\n        if x <= a:\n            for y in div:\n                if y <= b:\n                    if n % (x * y) == 0 and n // (x * y) <= c:\n                        count += 1\n                else:\n                    break\n        else:\n            break\n    print(count)", "import math\nfor l in range(int(input())):\n    (n, a, b, c) = map(int, input().split(' '))\n    count = 0\n    div = [1]\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                div.append(i)\n            else:\n                div.append(i)\n                div.append(n // i)\n        i += 1\n    div.sort()\n    for x in div:\n        if x <= a:\n            for y in div:\n                if y <= b:\n                    if n % (x * y) == 0 and n // (x * y) <= c:\n                        count += 1\n                else:\n                    break\n        else:\n            break\n    print(count)", "import math\nfor l in range(int(input())):\n    (n, a, b, c) = map(int, input().split(' '))\n    count = 0\n    div = [1]\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                div.append(i)\n            else:\n                div.append(i)\n                div.append(n // i)\n        i += 1\n    div.sort()\n    for x in div:\n        if x <= a:\n            for y in div:\n                if y <= b:\n                    if n % (x * y) == 0 and n // (x * y) <= c:\n                        count += 1\n                else:\n                    break\n        else:\n            break\n    print(count)", "import math\nfor l in range(int(input())):\n    (n, a, b, c) = [int(s) for s in input().split(' ')]\n    count = 0\n    div = [1]\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                div.append(i)\n            else:\n                div.append(i)\n                div.append(n // i)\n        i += 1\n    div.sort()\n    for x in div:\n        if x <= a:\n            for y in div:\n                if y <= b:\n                    if n % (x * y) == 0 and n // (x * y) <= c:\n                        count += 1\n                else:\n                    break\n        else:\n            break\n    print(count)", "from math import sqrt\nt = int(input())\nfor i in range(t):\n    l1 = [int(i) for i in input().split()]\n    n = l1[0]\n    l1.pop(0)\n    if n == 1:\n        print(1)\n    else:\n        (a, c) = (min(l1), max(l1))\n        b = sum(l1) - a - c\n        seta = set()\n        setb = set()\n        upper = min(b + 1, int(sqrt(n)) + 1)\n        for i in range(1, upper):\n            if n % i == 0:\n                (n1, n2) = (i, n // i)\n                if n1 < a:\n                    seta.add(n1)\n                if n1 < b:\n                    setb.add(n1)\n                if n2 < a:\n                    seta.add(n2)\n                if n2 < b:\n                    setb.add(n2)\n        count = 0\n        for i in seta:\n            for j in setb:\n                if n % (i * j) == 0 and n // (i * j) < c:\n                    count += 1\n        print(count)", "import math\nfor l in range(int(input())):\n    (n, a, b, c) = map(int, input().split(' '))\n    count = 0\n    div = [1]\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                div.append(i)\n            else:\n                div.append(i)\n                div.append(n // i)\n        i += 1\n    div.sort()\n    for x in div:\n        if x <= a:\n            for y in div:\n                if y <= b:\n                    if n % (x * y) == 0 and n // (x * y) <= c:\n                        count += 1\n                else:\n                    break\n        else:\n            break\n    print(count)", "import math\n\ndef findDiv(n):\n    i = 1\n    div = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                div.append(i)\n            else:\n                div.append(i)\n                div.append(n // i)\n        i += 1\n    return div\nt = int(input())\nfor _ in range(t):\n    (n, a, b, c) = [int(s) for s in input().split(' ')]\n    div = findDiv(n)\n    x = [ele for ele in div if ele <= a]\n    y = [ele for ele in div if ele <= b]\n    cnt = 0\n    for xVal in x:\n        for yVal in y:\n            mod = n % (xVal * yVal)\n            if mod == 0 and n // (xVal * yVal) <= c:\n                cnt += 1\n    print(cnt)", "def divisor(num):\n    div = []\n    i = 1\n    while i * i < num:\n        if num % i == 0:\n            div.append(i)\n            div.append(num // i)\n        i += 1\n    if i * i == num:\n        div.append(i)\n    return div\ntest = int(input())\nwhile test:\n    (n, a, b, c) = map(int, input().split())\n    d = divisor(n)\n    ct = 0\n    for i in d:\n        if i <= a:\n            for j in d:\n                if j <= b:\n                    if n % (i * j) == 0 and n // (i * j) <= c:\n                        ct += 1\n    print(ct)\n    test -= 1", "def divisor(num):\n    div = []\n    i = 1\n    while i * i < num:\n        if num % i == 0:\n            div.append(i)\n            div.append(num // i)\n        i += 1\n    if i * i == num:\n        div.append(i)\n    return div\ntest = int(input())\nwhile test:\n    (n, a, b, c) = map(int, input().split())\n    d = divisor(n)\n    ct = 0\n    for i in d:\n        if i <= a:\n            for j in d:\n                if j <= b:\n                    if n % (i * j) == 0 and n // (i * j) <= c:\n                        ct += 1\n    print(ct)\n    test -= 1", "def divisor(num):\n    div = []\n    i = 1\n    while i * i < num:\n        if num % i == 0:\n            div.append(i)\n            div.append(num // i)\n        i += 1\n    if i * i == num:\n        div.append(i)\n    return div\ntest = int(input())\nwhile test:\n    (n, a, b, c) = map(int, input().split())\n    d = divisor(n)\n    ct = 0\n    for i in d:\n        if i <= a:\n            for j in d:\n                if j <= b:\n                    if n % (i * j) == 0 and n // (i * j) <= c:\n                        ct += 1\n    print(ct)\n    test -= 1", "from math import sqrt\nt = int(input())\nfor i in range(t):\n    l1 = [int(i) for i in input().split()]\n    n = l1[0]\n    l1.pop(0)\n    if n == 1:\n        print(1)\n    else:\n        (a, c) = (min(l1), max(l1))\n        b = sum(l1) - a - c\n        seta = set()\n        setb = set()\n        upper = min(b + 1, int(sqrt(n)) + 1)\n        for i in range(1, upper):\n            if n % i == 0:\n                (n1, n2) = (i, n // i)\n                if n1 < a:\n                    seta.add(n1)\n                if n1 < b:\n                    setb.add(n1)\n                if n2 < a:\n                    seta.add(n2)\n                if n2 < b:\n                    setb.add(n2)\n        count = 0\n        for i in seta:\n            for j in setb:\n                if n % (i * j) == 0 and n // (i * j) < c:\n                    count += 1\n        print(count)", "from math import *\nfor j in range(int(input())):\n    (n, a, b, c) = map(int, input().split())\n    x = [1]\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                x.append(i)\n            else:\n                x.append(n // i)\n                x.append(i)\n    am = 0\n    for i in x:\n        if i <= a:\n            for j in x:\n                if j <= b:\n                    if n % (i * j) == 0:\n                        if n // (i * j) <= c:\n                            am += 1\n    print(am)", "from math import *\nfor j in range(int(input())):\n    (n, a, b, c) = map(int, input().split())\n    x = [1]\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                x.append(i)\n            else:\n                x.append(n // i)\n                x.append(i)\n    am = 0\n    for i in x:\n        if i <= a:\n            for j in x:\n                if j <= b:\n                    if n % (i * j) == 0:\n                        if n // (i * j) <= c:\n                            am += 1\n    print(am)", "from math import *\nfor j in range(int(input())):\n    (n, a, b, c) = map(int, input().split())\n    x = [1]\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                x.append(i)\n            else:\n                x.append(n // i)\n                x.append(i)\n    am = 0\n    for i in x:\n        if i <= a:\n            for j in x:\n                if j <= b:\n                    if n % (i * j) == 0:\n                        if n // (i * j) <= c:\n                            am += 1\n    print(am)", "from math import *\nfor j in range(int(input())):\n    (n, a, b, c) = map(int, input().split())\n    x = [1]\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                x.append(i)\n            else:\n                x.append(n // i)\n                x.append(i)\n    am = 0\n    for i in x:\n        if i <= a:\n            for j in x:\n                if j <= b:\n                    if n % (i * j) == 0:\n                        if n // (i * j) <= c:\n                            am += 1\n    print(am)", "from math import *\nfor j in range(int(input())):\n    (n, a, b, c) = map(int, input().split())\n    x = [1]\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                x.append(i)\n            else:\n                x.append(n // i)\n                x.append(i)\n    am = 0\n    for i in x:\n        if i <= a:\n            for j in x:\n                if j <= b:\n                    if n % (i * j) == 0:\n                        if n // (i * j) <= c:\n                            am += 1\n    print(am)", "from math import *\nfor j in range(int(input())):\n    (n, a, b, c) = map(int, input().split())\n    x = [1]\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                x.append(i)\n            else:\n                x.append(n // i)\n                x.append(i)\n    am = 0\n    for i in x:\n        if i <= a:\n            for j in x:\n                if j <= b:\n                    if n % (i * j) == 0:\n                        if n // (i * j) <= c:\n                            am += 1\n    print(am)", "import math\nt = int(input())\nfor i in range(t):\n    (N, a, b, c) = map(int, input().split())\n    l1 = [1]\n    l2 = [1]\n    for j in range(2, int(math.sqrt(N)) + 1):\n        if N % j == 0:\n            if N // j == j:\n                if j <= a:\n                    l1.append(j)\n                if j <= b:\n                    l2.append(j)\n            else:\n                if j <= a:\n                    l1.append(j)\n                if N // j <= a:\n                    l1.append(N // j)\n                if j <= b:\n                    l2.append(j)\n                if N // j <= b:\n                    l2.append(N // j)\n    count = 0\n    for i in l1:\n        if N % i == 0:\n            q = N // i\n            for j in l2:\n                if q % j == 0:\n                    z = q // j\n                    if z <= c:\n                        count += 1\n    print(count)", "from math import sqrt\nt = int(input())\nfor test in range(t):\n    (n, a, b, c) = map(int, input().split())\n    l1 = [1]\n    l2 = [1]\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                if i <= a:\n                    l1.append(i)\n                if i <= b:\n                    l2.append(i)\n            else:\n                if i <= a:\n                    l1.append(i)\n                if i <= b:\n                    l2.append(i)\n                if n // i <= a:\n                    l1.append(n // i)\n                if n // i <= b:\n                    l2.append(n // i)\n    counter = 0\n    for i in l1:\n        if n % i == 0:\n            p = n // i\n            for j in l2:\n                if p % j == 0:\n                    z = p // j\n                    if z <= c:\n                        counter += 1\n    print(counter)", "import math\n\ndef fcts(n):\n    s = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            s.add(i)\n            s.add(n // i)\n    return sorted(list(set(s)))\nfor _ in range(int(input())):\n    (n, a, b, c) = map(int, input().split())\n    l = fcts(n)\n    cc = 0\n    for i in range(len(l)):\n        if l[i] <= a:\n            newli = fcts(n // l[i])\n            newnum = n // l[i]\n            for j in range(len(newli)):\n                if newli[j] <= b and newnum // newli[j] <= c:\n                    cc += 1\n    print(cc)", "import math\n\ndef Divisors(n, l):\n    i = 1\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                l.append(i)\n            else:\n                l.append(i)\n                l.append(n // i)\n        i = i + 1\nt = int(input())\nfor _ in range(t):\n    (n, a, b, c) = map(int, input().strip().split())\n    la = []\n    lb = []\n    lc = []\n    l = []\n    Divisors(n, l)\n    for i in l:\n        if i <= a:\n            la.append(i)\n        if i <= b:\n            lb.append(i)\n        if i <= c:\n            lc.append(i)\n    la = sorted(la)\n    lb = sorted(lb)\n    lc = sorted(lc)\n    dict_c = {}\n    for i in lc:\n        dict_c[i] = 1\n    cnt = 0\n    for i in la:\n        for j in lb:\n            if n % (i * j) == 0:\n                if dict_c.get(n // (i * j)) != None:\n                    cnt += 1\n    print(cnt)", "from math import sqrt\nx = int(input())\nfor __ in range(x):\n    (n, a, b, c) = map(int, input().split())\n    lol = [1]\n    yo = [1]\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                if i <= a:\n                    lol.append(i)\n                if i <= b:\n                    yo.append(i)\n            else:\n                if i <= a:\n                    lol.append(i)\n                if i <= b:\n                    yo.append(i)\n                if n // i <= a:\n                    lol.append(n // i)\n                if n // i <= b:\n                    yo.append(n // i)\n    k = 0\n    for i in lol:\n        if n % i == 0:\n            l = n // i\n            for j in yo:\n                if l % j == 0:\n                    zo = l // j\n                    if zo <= c:\n                        k += 1\n    print(k)", "from math import sqrt\nx = int(input())\nfor __ in range(x):\n    (n, a, b, c) = map(int, input().split())\n    lol = [1]\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                lol.append(i)\n            else:\n                lol.append(n // i)\n                lol.append(i)\n    k = 0\n    for i in lol:\n        if i <= a:\n            for j in lol:\n                if j <= b:\n                    if n % (i * j) == 0:\n                        if n // (i * j) <= c:\n                            k += 1\n    print(k)", "for t in range(int(input())):\n    (n, a, b, c) = map(int, input().split())\n    factors = []\n    for i in range(1, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if i * i != n:\n                factors.append(n // i)\n    factors.sort()\n    count = 0\n    for i in factors:\n        if i <= a:\n            rem = n // i\n            for j in factors:\n                if j <= b and rem % j == 0:\n                    if rem // j <= c:\n                        count += 1\n    print(count)", "import math\nfrom functools import reduce\n\ndef factors(n, l):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(pow(n, 0.5) + 1)) if n % i == 0 and i <= max(l))))\nt = int(input())\nfor i in range(t):\n    k = 0\n    (n, a, b, c) = [int(x) for x in input().split()]\n    l = [a, b, c]\n    ar = list(factors(n, l))\n    k = 0\n    for i in ar:\n        if n % i == 0 and i <= a:\n            p = int(n / i)\n            for j in ar:\n                if p % j == 0 and j <= b:\n                    if int(p / j) <= c:\n                        k += 1\n    print(k)", "t = int(input())\nwhile t > 0:\n    string = input().split()\n    n = int(string[0])\n    a = int(string[1])\n    b = int(string[2])\n    c = int(string[3])\n    ans = 0\n    factor = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factor.append(i)\n            if n // i != i:\n                factor.append(n // i)\n    factor.sort()\n    for i in factor:\n        if i <= a:\n            rem = n // i\n            for j in factor:\n                if rem % j == 0 and j <= b:\n                    if rem // j <= c:\n                        ans += 1\n    print(ans)\n    t -= 1", "from functools import reduce\n\ndef factorial(n, m):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1, 2 if n % 2 else 1) if n % i == 0 if i <= m)))\nfor T in range(int(input())):\n    (N, a, b, c) = map(int, input().split())\n    count = 0\n    factors = sorted(factorial(N, max(a, b, c)))\n    for x in factors:\n        if x > N:\n            break\n        if x > a:\n            break\n        for y in factors:\n            if y > N:\n                break\n            if y > b:\n                break\n            z = x * y\n            if z > N:\n                break\n            if N % z == 0 and N // z <= c:\n                count += 1\n    print(count)", "from functools import reduce\n\ndef factorial(n, m):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1, 2 if n % 2 else 1) if n % i == 0 if i <= m)))\nfor T in range(int(input())):\n    (N, a, b, c) = map(int, input().split())\n    count = 0\n    factors = sorted(factorial(N, max(a, b, c)))\n    for x in factors:\n        if x > N:\n            break\n        if x > a:\n            break\n        for y in factors:\n            if y > N:\n                break\n            if y > b:\n                break\n            z = x * y\n            if z > N:\n                break\n            if N % z == 0 and N // z <= c:\n                count += 1\n    print(count)", "from functools import reduce\n\ndef factorial(n, m):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(pow(n, 0.5)) + 1, 2 if n % 2 else 1) if n % i == 0 if i <= m)))\nfor T in range(int(input())):\n    (N, a, b, c) = map(int, input().split())\n    count = 0\n    factors = sorted(factorial(N, max(a, b, c)))\n    for x in factors:\n        if x > N:\n            break\n        if x > a:\n            break\n        for y in factors:\n            if y > N:\n                break\n            if y > b:\n                break\n            z = x * y\n            if z > N:\n                break\n            if N % z == 0 and N // z <= c:\n                count += 1\n    print(count)", "from functools import reduce\n\ndef factorial(n, m):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(pow(n, 0.5)) + 1, 2 if n % 2 else 1) if n % i == 0 if i <= m)))\nfor T in range(int(input())):\n    (N, a, b, c) = map(int, input().split())\n    count = 0\n    factors = sorted(factorial(N, max(a, b, c)))\n    for x in factors:\n        if x > N:\n            break\n        if x > a:\n            break\n        for y in factors:\n            if y > N:\n                break\n            if y > b:\n                break\n            z = x * y\n            if z > N:\n                break\n            if N % z == 0 and N // z <= c:\n                count += 1\n    print(count)", "def fact(arg, m):\n    result = set([1])\n    for i in range(1, int(arg ** 0.5) + 1):\n        if arg % i == 0:\n            result.add(i)\n            if int(arg / i) <= m:\n                result.add(int(arg / i))\n    return result\nfor i in range(int(input())):\n    (N, a, b, c) = input().split()\n    N = int(N)\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    dummy = sorted(fact(N, max(a, b, c)))\n    l1 = sorted(list((x for x in dummy if x <= a)))\n    l2 = sorted(list((x for x in dummy if x <= b)))\n    count = 0\n    for x in l1:\n        for y in l2:\n            z = x * y\n            if z > N:\n                break\n            if N % z == 0 and N // z <= c:\n                count += 1\n    print(count)", "from functools import reduce\n\ndef factorial(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(pow(n, 0.5)) + 1, 2 if n % 2 else 1) if n % i == 0)))\nfor T in range(int(input())):\n    (N, a, b, c) = map(int, input().split())\n    count = 0\n    factors = sorted(factorial(N))\n    for x in factors:\n        if x > N:\n            break\n        if x > a:\n            break\n        for y in factors:\n            if y > N:\n                break\n            if y > b:\n                break\n            z = x * y\n            if z > N:\n                break\n            if N % z == 0 and N // z <= c:\n                count += 1\n    print(count)", "from functools import reduce\n\ndef factorial(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(pow(n, 0.5)) + 1, 2 if n % 2 else 1) if n % i == 0)))\nfor T in range(int(input())):\n    (N, a, b, c) = map(int, input().split())\n    count = 0\n    factors = sorted(factorial(N))\n    for x in factors:\n        if x > N:\n            break\n        if x > a:\n            break\n        for y in factors:\n            if y > N:\n                break\n            if y > b:\n                break\n            z = x * y\n            if z > N:\n                break\n            if N % z == 0 and N // z <= c:\n                count += 1\n    print(count)", "def fact(arg, m):\n    result = set([1])\n    for i in range(1, int(arg ** 0.5) + 1):\n        if arg % i == 0:\n            result.add(i)\n            if int(arg / i) <= m:\n                result.add(int(arg / i))\n    return result\nfor i in range(int(input())):\n    (N, a, b, c) = input().split()\n    N = int(N)\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    dummy = sorted(fact(N, max(a, b, c)))\n    l1 = sorted(list((x for x in dummy if x <= a)))\n    l2 = sorted(list((x for x in dummy if x <= b)))\n    count = 0\n    for x in l1:\n        for y in l2:\n            z = x * y\n            if z > N:\n                break\n            if N % z == 0 and N // z <= c:\n                count += 1\n    print(count)", "from functools import reduce\n\ndef factorial(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(pow(n, 0.5)) + 1, 2 if n % 2 else 1) if n % i == 0)))\nfor T in range(int(input())):\n    (N, a, b, c) = map(int, input().split())\n    count = 0\n    factors = sorted(factorial(N))\n    for x in factors:\n        if x > N:\n            break\n        if x > a:\n            break\n        for y in factors:\n            if y > N:\n                break\n            if y > b:\n                break\n            z = x * y\n            if z > N:\n                break\n            if N % z == 0 and N // z <= c:\n                count += 1\n    print(count)", "from math import *\nt = int(input())\nfor a0 in range(t):\n    count = 0\n    (n, a, b, c) = input().split()\n    (n, a, b, c) = [int(n), int(a), int(b), int(c)]\n    k = sqrt(n)\n    k = int(k)\n    arr = []\n    for i in range(1, k + 1):\n        if n % i == 0:\n            arr.append(i)\n            if n // i != i:\n                arr.append(n // i)\n    count = 0\n    for i in arr:\n        if i <= a:\n            x = n / i\n            for j in arr:\n                if x % j == 0 and j <= b:\n                    y = x / j\n                    if y <= c:\n                        count += 1\n    print(count)", "import math\n\ndef fact(n):\n    factors = []\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            factors.append(i)\n            if not n // i == i:\n                factors.append(n // i)\n    return factors\nt = int(input())\nans = []\nwhile t > 0:\n    t -= 1\n    (n, a, b, c) = map(int, input().split())\n    count = 0\n    factors = fact(n)\n    count = 0\n    for i in factors:\n        if i <= a:\n            r = n // i\n            for j in factors:\n                if r % j == 0 and j <= b:\n                    s = r // j\n                    if s <= c:\n                        count += 1\n    ans.append(count)\nprint('\\n'.join(map(str, ans)))", "def fact(n):\n    k = 0\n    a = []\n    for i in range(1, int(n ** (1 / 2)) + 2):\n        if n % i == 0 and i not in a:\n            if i != int(n / i):\n                k += 2\n                a.append(i)\n                a.append(int(n / i))\n            else:\n                k += 1\n                a.append(i)\n    return a\nt = int(input())\nwhile t > 0:\n    (n, a, b, c) = list(map(int, input().split()))\n    k = 0\n    li = fact(n)\n    for i in li:\n        if n % i == 0 and i <= a:\n            p = n // i\n            for j in li:\n                if p % j == 0 and j <= b:\n                    if p // j <= c:\n                        k += 1\n    print(k)\n    t -= 1", "import math\n\ndef findfact(n, l):\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0 and i not in l:\n            if n / i == i:\n                l.append(i)\n            else:\n                l.append(i)\n                l.append(int(int(n) / int(i)))\nt = int(input())\nfor c in range(t):\n    (n, a, b, c) = [int(p) for p in input().split()]\n    l = []\n    findfact(n, l)\n    count = 0\n    dontgo = 0\n    if n == 1 and a > 0 and (b > 0) and (c > 0):\n        print('1')\n    else:\n        for j in range(0, len(l)):\n            if l[j] <= a:\n                k = int(n / l[j])\n                for i in range(0, len(l)):\n                    if k % l[i] == 0 and int(int(n) / int(l[i] * l[j])) <= c and (l[i] <= b):\n                        count += 1\n        print(count)", "import math\n\ndef fact(n):\n    factors = []\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            factors.append(i)\n            if not n // i == i:\n                factors.append(n // i)\n    return factors\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, a, b, c) = map(int, input().split())\n    count = 0\n    factors = fact(n)\n    count = 0\n    for i in factors:\n        if i <= a:\n            r = n // i\n            for j in factors:\n                if r % j == 0 and j <= b:\n                    s = r // j\n                    if s <= c:\n                        count += 1\n    print(count)", "from math import floor, sqrt\n\ndef eratosthenes(n):\n    is_comp = bytearray((n - 1) // 2)\n    for p in range(3, floor(sqrt(n)) + 1, 2):\n        if is_comp[(p - 3) // 2]:\n            continue\n        is_comp[(p ** 2 - 3) // 2::p] = b'\\x01' * ((n - p ** 2) // (2 * p) + 1)\n    return [2] + [2 * i + 3 for i in range((n - 1) // 2) if not is_comp[i]]\nprimes = eratosthenes(10 ** 5)\n\ndef factorize(N):\n    if N == 1:\n        return []\n    facts = []\n    for p in primes:\n        if N % p == 0:\n            m = 1\n            N //= p\n            while N % p == 0:\n                m += 1\n                N //= p\n            facts.append((p, m))\n            if N == 1:\n                return facts\n        elif p ** 2 > N:\n            return facts + [(N, 1)]\n\ndef solve_part(rem, M, bound1, bound2):\n    divs = [1]\n    for p in rem:\n        m = rem[p]\n        divs += [d * p ** i for i in range(1, m + 1) for d in divs if d * p ** i <= bound1]\n    count = 0\n    for d in divs:\n        if d * bound2 >= M:\n            count += 1\n    return count\n\ndef solve(N, a, b, c):\n    res = 0\n    facts = factorize(N)\n    divs = [(1, tuple())]\n    for (p, m) in facts:\n        divs = [(r * p ** i, t + ((p, i),)) for (r, t) in divs for i in range(1, m + 1) if r * p ** i <= a] + divs\n    for (d, t) in divs:\n        rem = {facts[i][0]: facts[i][1] for i in range(len(facts))}\n        for (p, m) in t:\n            rem[p] -= m\n            if rem[p] == 0:\n                del rem[p]\n        res += solve_part(rem, N // d, b, c)\n    return res\nT = int(input())\nfor query in range(T):\n    (N, a, b, c) = [int(v) for v in input().split()]\n    (a, b, c) = sorted([a, b, c])\n    print(solve(N, a, b, c))", "def fact(n):\n    A = []\n    for i in range(1, int(pow(n, 1 / 2)) + 1):\n        if n % i == 0 and i not in A:\n            A.append(i)\n            if i != n // i:\n                A.append(n // i)\n    return A\nfor _ in range(int(input())):\n    (N, a, b, c) = [int(x) for x in input().split()]\n    L = fact(N)\n    k = 0\n    for i in range(len(L)):\n        if N % L[i] == 0 and L[i] <= a:\n            p = N // L[i]\n            for j in range(len(L)):\n                if p % L[j] == 0 and L[j] <= b:\n                    if p // L[j] <= c:\n                        k += 1\n    print(k)", "import math as m\n\ndef fact(n):\n    a = []\n    for i in range(1, int(n ** (1 / 2)) + 2):\n        if n % i == 0 and i not in a:\n            if i != n // i:\n                a.append(i)\n                a.append(n // i)\n            else:\n                a.append(i)\n    return a\nt = int(input())\nfor i in range(0, t):\n    (N, a, b, c) = map(int, input().split())\n    arr = fact(N)\n    k = 0\n    for i in arr:\n        if i <= a:\n            p = N // i\n            for j in arr:\n                if p % j == 0 and j <= b:\n                    if p // j <= c:\n                        k += 1\n    print(k)", "import math\n\ndef tryComb(a, b, c, x, y, z):\n    res = 0\n    if a < x and b < y and (c < z):\n        res += 1\n    if a < x and b < z and (c < y):\n        res += 1\n    if a < y and b < x and (c < z):\n        res += 1\n    if a < y and b < z and (c < x):\n        res += 1\n    if a < z and b < z and (c < x):\n        res += 1\n    if a < z and b < x and (c < y):\n        res += 1\n    return res\n\ndef helper(a, b, x, y, z):\n    res = 0\n    if a < x and a < y and (b < z):\n        res += 1\n    if a < x and a < z and (b < y):\n        res += 1\n    if a < y and a < z and (b < x):\n        res += 1\n    return res\n\ndef try2Comb(a, b, c, x, y, z):\n    res = 0\n    if a == b:\n        res += helper(a, c, x, y, z)\n    elif b == c:\n        res += helper(b, a, x, y, z)\n    else:\n        res += helper(a, b, x, y, z)\n    return res\nt = int(input())\nfor _ in range(t):\n    li = list(map(int, input().strip().split(' ')))\n    (n, x, y, z) = li\n    q = math.floor(math.sqrt(n))\n    l = []\n    for i in range(1, q + 1):\n        if n % i == 0:\n            if i == n / i:\n                l.append(i)\n            else:\n                l.append(i)\n                l.append(n // i)\n    l.sort()\n    i = 0\n    c = 0\n    while i < len(l) and l[i] * l[i] * l[i] <= n:\n        j = i\n        k = len(l) - 1\n        while k >= 0 and j <= k:\n            if l[i] * l[j] * l[k] == n:\n                if max(l[i], l[j], l[k]) <= max(x, y, z):\n                    if l[i] != l[j] != l[k]:\n                        c += tryComb(l[i], l[j], l[k], x, y, z)\n                    elif l[i] == l[j] == l[k]:\n                        c += 1\n                    elif l[i] == l[j] or l[j] == l[k] or l[i] == l[k]:\n                        c += try2Comb(l[i], l[j], l[k], x, y, z)\n                j += 1\n                k -= 1\n            elif l[i] * l[j] * l[k] < n:\n                j += 1\n            else:\n                k -= 1\n        i += 1\n    print(c)", "import math\nT = int(input())\nfor _ in range(T):\n    (N, a, b, c) = map(int, input().split())\n    div = []\n    for i in range(1, int(math.sqrt(N)) + 1):\n        if N % i == 0:\n            if N / i == i:\n                div.append(i)\n            else:\n                div.append(i)\n                div.append(N / i)\n    (f, s, t) = ([], [], [])\n    for i in div:\n        if i <= a:\n            f.append(i)\n        if i <= b:\n            s.append(i)\n        if i <= c:\n            t.append(i)\n    ans = 0\n    for i in f:\n        for j in s:\n            if N % (i * j) == 0 and N / (i * j) <= c:\n                ans += 1\n    print(ans)", "t = int(input())\n\ndef fac(n):\n    s = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            s.add(i)\n            s.add(n // i)\n    return sorted(list(s))\nfor I in range(t):\n    (n, a, b, c) = [int(i) for i in input().split()]\n    lis = fac(n)\n    ans = 0\n    for i in range(len(lis)):\n        if lis[i] <= a:\n            new_lis = fac(n // lis[i])\n            new_num = n // lis[i]\n            for j in range(len(new_lis)):\n                if new_lis[j] <= b and new_num // new_lis[j] <= c:\n                    ans += 1\n    print(ans)", "def Factors(n):\n    k = 0\n    arr = []\n    for i in range(1, int(n ** 0.5) + 2):\n        if n % i == 0 and i not in arr:\n            if i != int(n / i):\n                arr.append(i)\n                arr.append(int(n / i))\n            else:\n                arr.append(i)\n    return arr\nt = int(input())\nfor i4 in range(t):\n    (n, a, b, c) = map(int, input().split())\n    arr = Factors(n)\n    count = 0\n    for i in range(len(arr)):\n        if n % arr[i] == 0 and arr[i] <= a:\n            p = int(n / arr[i])\n            for j in range(len(arr)):\n                if p % arr[j] == 0 and arr[j] <= b:\n                    if int(p / arr[j]) <= c:\n                        count += 1\n    print(count)", "def Factors(n):\n    k = 0\n    arr = []\n    for i in range(1, int(n ** 0.5) + 2):\n        if n % i == 0 and i not in arr:\n            if i != int(n / i):\n                k += 2\n                arr.append(i)\n                arr.append(int(n / i))\n            else:\n                k += 1\n                arr.append(i)\n    return arr\nt = int(input())\nfor i4 in range(t):\n    (n, a, b, c) = map(int, input().split())\n    arr = Factors(n)\n    count = 0\n    for i in range(len(arr)):\n        if n % arr[i] == 0 and arr[i] <= a:\n            p = int(n / arr[i])\n            for j in range(len(arr)):\n                if p % arr[j] == 0 and arr[j] <= b:\n                    if int(p / arr[j]) <= c:\n                        count += 1\n    print(count)", "def factors(n):\n    (l1, l2) = ([], [])\n    for i in range(1, int(n ** 0.5) + 1):\n        (q, r) = (n // i, n % i)\n        if r == 0:\n            l1.append(i)\n            l2.append(q)\n    if l1[-1] == l2[-1]:\n        l1.pop()\n    l2.reverse()\n    return l1 + l2\nfor _ in range(int(input())):\n    (n, a, b, c) = map(int, input().split())\n    l = factors(n)\n    ans = 0\n    for i in l:\n        if i <= a:\n            p = n // i\n            for j in l:\n                if p % j == 0 and j <= b:\n                    if p // j <= c:\n                        ans += 1\n    print(ans)", "def fact(n):\n    k = 0\n    a = []\n    for i in range(1, int(n ** (1 / 2)) + 2):\n        if n % i == 0 and i not in a:\n            if i != int(n / i):\n                k += 2\n                a.append(i)\n                a.append(int(n / i))\n            else:\n                k += 1\n                a.append(i)\n    return a\nt = int(input())\nfor i in range(t):\n    k = 0\n    (n, a, b, c) = [int(x) for x in input().split()]\n    ar = fact(n)\n    k = 0\n    for i in ar:\n        if n % i == 0 and i <= a:\n            p = int(n / i)\n            for j in ar:\n                if p % j == 0 and j <= b:\n                    if int(p / j) <= c:\n                        k += 1\n    print(k)", "def fact(n):\n    k = 0\n    a = []\n    for i in range(1, int(n ** (1 / 2)) + 2):\n        if n % i == 0 and i not in a:\n            if i != int(n / i):\n                k += 2\n                a.append(i)\n                a.append(int(n / i))\n            else:\n                k += 1\n                a.append(i)\n    return a\nt = int(input())\nfor i in range(t):\n    k = 0\n    (n, a, b, c) = [int(x) for x in input().split()]\n    ar = fact(n)\n    k = 0\n    for i in ar:\n        if n % i == 0 and i <= a:\n            p = int(n / i)\n            for j in ar:\n                if p % j == 0 and j <= b:\n                    if int(p / j) <= c:\n                        k += 1\n    print(k)", "from time import time\nstartTime = time()\n\ndef isPrime(n):\n    if n <= 11:\n        return n in [2, 3, 5, 7, 11]\n    (r, d) = (0, n - 1)\n    while d % 2 == 0:\n        r += 1\n        d //= 2\n    for a in [2, 3, 5, 7, 11]:\n        (probablePrime, b0) = (False, pow(a, d, n))\n        if b0 in [1, n - 1]:\n            probablePrime = True\n            continue\n        bi = b0\n        for i in range(1, r):\n            bi = bi ** 2 % n\n            if bi == 1:\n                probablePrime = False\n                break\n            if bi == n - 1:\n                probablePrime = True\n                break\n        if probablePrime == False:\n            return False\n    return True\n\ndef getPrimeFactors(n):\n    if n % 2 == 0:\n        primeFactors = [2]\n        n //= 2\n        while n % 2 == 0:\n            primeFactors.append(2)\n            n //= 2\n    else:\n        primeFactors = []\n    factor = 3\n    if isPrime(n):\n        primeFactors.append(n)\n        n = 1\n    while n != 1:\n        if n % factor == 0 and isPrime(factor):\n            primeFactors.append(factor)\n            n //= factor\n            while n % factor == 0:\n                primeFactors.append(factor)\n                n //= factor\n            if isPrime(n):\n                primeFactors.append(n)\n                n = 1\n        factor += 2\n    from itertools import groupby\n    primeFactors = [[v, len(list(q))] for (v, q) in groupby(primeFactors)]\n    return primeFactors\n\ndef iterate(factors, a, b, c):\n    waysFound = 0\n    (currentFactor, currentFactorAmount) = (factors[0][0], factors[0][1])\n    for ai in range(0, currentFactorAmount + 1):\n        if a * currentFactor ** ai > A:\n            continue\n        for bi in range(0, currentFactorAmount - ai + 1):\n            ci = currentFactorAmount - ai - bi\n            if b * currentFactor ** bi > B:\n                continue\n            if c * currentFactor ** ci > C:\n                continue\n            if len(factors) > 1:\n                waysFound += iterate(factors[1:], a * currentFactor ** ai, b * currentFactor ** bi, c * currentFactor ** ci)\n            else:\n                waysFound += 1\n    return waysFound\nT = int(input())\nfor _ in range(T):\n    (N, A, B, C) = [int(x) for x in input().split()]\n    if N == 1:\n        print(1)\n        continue\n    factors = getPrimeFactors(N)\n    waysFound = iterate(factors, 1, 1, 1)\n    print(waysFound)\nimport sys\nprint('Time taken =', time() - startTime, 'seconds', file=sys.stderr)\ndel sys", "import sys\nimport math\nfrom functools import reduce\nfrom bisect import *\nm = 1000000007\n\ndef find_ge(a, x):\n    i = bisect_left(a, x)\n    if i != len(a):\n        return a[i]\n    raise ValueError\n\ndef find_le(a, x):\n    i = bisect_right(a, x)\n    if i:\n        return a[i - 1]\n    raise ValueError\n\ndef fact(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(pow(n, 0.5) + 1)) if n % i == 0)))\nt = int(input())\nfor i in range(t):\n    (n, p, q, r) = map(int, sys.stdin.readline().split(' '))\n    l = [p, q, r]\n    a = l[0]\n    b = l[1]\n    c = l[2]\n    f = fact(n)\n    ma = math.ceil(n / (b * c))\n    setx = []\n    count = 0\n    for num in f:\n        if num >= ma and num <= a:\n            setx.append(num)\n    for num in setx:\n        d = n // num\n        fd = sorted(fact(d))\n        mb = math.ceil(d / c)\n        i1 = fd.index(find_ge(fd, mb))\n        i2 = fd.index(find_le(fd, b))\n        count += i2 - i1 + 1\n    print(count)", "import math\n\ndef factors(n):\n    i = 1\n    ans = []\n    while i <= math.sqrt(n) + 1:\n        if n % i == 0:\n            if n / i == i:\n                ans.append(int(i))\n            else:\n                ans.append(int(i))\n                ans.append(int(n / i))\n        i = i + 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, a, b, c) = map(int, input().split())\n    l_temp = [a, b, c]\n    l_temp.sort()\n    l1 = range(1, l_temp[0] + 1)\n    l2 = range(1, l_temp[1] + 1)\n    l3 = range(1, l_temp[2] + 1)\n    lf = factors(n)\n    l1r = [val for val in lf if val in l1]\n    l2r = [val for val in lf if val in l2]\n    l3r = [val for val in lf if val in l3]\n    hasher = [0] * 1000000\n    for ele in l3r:\n        hasher[ele] = 1\n    cnt = 0\n    for e1 in l1r:\n        for e2 in l2r:\n            if n % (e1 * e2) == 0 and n // (e1 * e2) < l_temp[2] and (hasher[n // (e1 * e2)] == 1):\n                cnt += 1\n    print(cnt)", "from functools import reduce\n\ndef factors(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(pow(n, 0.5) + 1)) if n % i == 0)))\nt = int(input())\nfor z in range(t):\n    (n, a, b, c) = [int(x) for x in input().split()]\n    factor = list(factors(n))\n    factor.sort()\n    ans = 0\n    for i in factor:\n        if i > a:\n            break\n        for j in factor:\n            if j > b:\n                break\n            part = i * j\n            if n % part == 0 and n // part <= c:\n                ans += 1\n    print(ans)"]