["import sys\n\nclass LuckyStars:\n    bit = []\n    n = 0\n\n    def update(self, i, v):\n        global bit\n        global n\n        i += 1\n        while i <= n:\n            bit[i] += 1\n            i += i & -i\n\n    def query(self, i):\n        global bit\n        global n\n        r = 0\n        i += 1\n        while i:\n            r += bit[i]\n            i -= i & -i\n        return r\n\n    def solve(self, ls):\n        global bit\n        global n\n        n = len(ls)\n        stack = []\n        time = [None] * n\n        for (i, j) in enumerate(ls):\n            if j == '7':\n                if stack and stack[-1][0] == '4':\n                    (_, k, t) = stack.pop()\n                    time[k] = t\n                    if stack and stack[-1][0] == '4':\n                        stack[-1][-1] = max(stack[-1][-1], t + 1)\n                else:\n                    stack.append([j, i, 0])\n            else:\n                stack.append([j, i, 0])\n        bit = [0] * (n + 1)\n        res = 0\n        for (i, j) in enumerate(time, 1):\n            if j != None:\n                res += i - 2 * self.query(j - 1)\n                self.update(j, 1)\n        return res\ncases = int(sys.stdin.readline().strip())\nsolver = LuckyStars()\nresults = []\nfor _ in range(cases):\n    length = int(sys.stdin.readline().strip())\n    lucky_string = sys.stdin.readline().strip()\n    results.append(solver.solve(lucky_string))\nfor result in results:\n    print(result)", "import sys\n\nclass LuckyStars:\n    bit = []\n    n = 0\n\n    def update(self, i, v):\n        global bit\n        global n\n        i += 1\n        while i <= n:\n            bit[i] += 1\n            i += i & -i\n\n    def query(self, i):\n        global bit\n        global n\n        r = 0\n        i += 1\n        while i:\n            r += bit[i]\n            i -= i & -i\n        return r\n\n    def solve(self, ls):\n        global bit\n        global n\n        n = len(ls)\n        stack = []\n        time = [None] * n\n        for (i, j) in enumerate(ls):\n            if j == '7':\n                if stack and stack[-1][0] == '4':\n                    (_, k, t) = stack.pop()\n                    time[k] = t\n                    if stack and stack[-1][0] == '4':\n                        stack[-1][-1] = max(stack[-1][-1], t + 1)\n                else:\n                    stack.append([j, i, 0])\n            else:\n                stack.append([j, i, 0])\n        bit = [0] * (n + 1)\n        res = 0\n        for (i, j) in enumerate(time, 1):\n            if j != None:\n                res += i - 2 * self.query(j - 1)\n                self.update(j, 1)\n        return res\ncases = int(sys.stdin.readline().strip())\nsolver = LuckyStars()\nresults = []\nfor _ in range(cases):\n    length = int(sys.stdin.readline().strip())\n    lucky_string = sys.stdin.readline().strip()\n    results.append(solver.solve(lucky_string))\nfor result in results:\n    print(result)"]