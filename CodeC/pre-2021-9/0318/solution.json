["check = [2, 3, 4]\nfor _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    ans = 'Stable'\n    for j in range(m):\n        a = [int(x) for x in input().split()]\n        if ans == 'Stable':\n            if j in {0, m - 1}:\n                (b, c) = (check[0], check[1])\n            else:\n                (b, c) = (check[1], check[2])\n            for i in range(n):\n                if i in {0, n - 1}:\n                    if a[i] >= b:\n                        ans = 'Unstable'\n                        break\n                elif a[i] >= c:\n                    ans = 'Unstable'\n                    break\n    print(ans)", "t = int(input())\nfor ni in range(t):\n    (r, c) = map(int, input().split())\n    l = list()\n    for nj in range(r):\n        a = list(map(int, input().split()))\n        l.append(a)\n    count = 0\n    adj = 3\n    for i in range(r):\n        for j in range(c):\n            if i == 0 and j == 0 or (i == 0 and j == c - 1) or (j == 0 and i == r - 1) or (i == r - 1 and j == c - 1):\n                adj = 2\n            elif i == 0 or i == r - 1 or j == 0 or (j == c - 1):\n                adj = 3\n            else:\n                adj = 4\n            if l[i][j] >= adj:\n                count = 1\n                break\n    if count == 0:\n        print('Stable')\n    else:\n        print('Unstable')", "check = [2, 3, 4]\nfor _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    ans = 'Stable'\n    for j in range(m):\n        a = [int(x) for x in input().split()]\n        if ans == 'Stable':\n            if j in {0, m - 1}:\n                (b, c) = (check[0], check[1])\n            else:\n                (b, c) = (check[1], check[2])\n            for i in range(n):\n                if i in {0, n - 1}:\n                    if a[i] >= b:\n                        ans = 'Unstable'\n                        break\n                elif a[i] >= c:\n                    ans = 'Unstable'\n                    break\n    print(ans)", "t = int(input())\nfor i in range(t):\n    matrix = list()\n    (r, c) = list(map(int, input().split()))\n    for j in range(r):\n        row = list(map(int, input().split()))\n        matrix.append(row)\n    count = 0\n    for j in range(r):\n        for k in range(c):\n            if j == 0 and k in [0, c - 1] or (j == r - 1 and k in [0, c - 1]):\n                if matrix[j][k] < 2:\n                    count += 1\n            elif 0 < k < c - 1 and j in [0, r - 1] or (0 < j < r - 1 and k in [0, c - 1]):\n                if matrix[j][k] < 3:\n                    count += 1\n            elif matrix[j][k] < 4:\n                count += 1\n    if count == r * c:\n        print('Stable')\n    else:\n        print('Unstable')", "for tc in range(int(input())):\n    (r, c) = map(int, input().split())\n    grid = []\n    for i in range(r):\n        grid.append(list(map(int, input().split())))\n    ans = 'Stable'\n    for i in range(1, r + 1):\n        for j in range(1, c + 1):\n            adj = 2 - (j == 1) - (j == c) + 2 - (i == 1) - (i == r)\n            if grid[i - 1][j - 1] >= adj:\n                ans = 'Unstable'\n                break\n    print(ans)", "for _ in range(int(input())):\n    (r, c) = [int(i) for i in input().split()]\n    arr = []\n    for i in range(r):\n        arr.append([int(i) for i in input().split()])\n    flag = 1\n    for i in range(r):\n        for j in range(c):\n            if (i < r - 1 and i > 0) and (j < c - 1 and j > 0):\n                if arr[i][j] > 3:\n                    flag = 0\n                    break\n            elif i == 0 and (j == 0 or j == c - 1) or (i == r - 1 and (j == 0 or j == c - 1)):\n                if arr[i][j] > 1:\n                    flag = 0\n                    break\n            elif arr[i][j] > 2:\n                flag = 0\n                break\n    if flag == 1:\n        print('Stable')\n    else:\n        print('Unstable')", "t = int(input())\nfor t in range(t):\n    (r, c) = [int(i) for i in input().split()]\n    arr = []\n    for i in range(r):\n        arr.append([int(i) for i in input().split()])\n    flag = 1\n    for i in range(r):\n        for j in range(c):\n            if (i < r - 1 and i > 0) and (j < c - 1 and j > 0):\n                if arr[i][j] > 3:\n                    flag = 0\n                    break\n            elif i == 0 and (j == 0 or j == c - 1) or (i == r - 1 and (j == 0 or j == c - 1)):\n                if arr[i][j] > 1:\n                    flag = 0\n                    break\n            elif arr[i][j] > 2:\n                flag = 0\n                break\n    if flag == 1:\n        print('Stable')\n    else:\n        print('Unstable')", "for _ in range(int(input())):\n    (R, C) = map(int, input().split())\n    mx = []\n    for i in range(R):\n        mx.append(list(map(int, input().split())))\n    f = 1\n    for r in range(R):\n        for c in range(C):\n            if r - 1 < 0 and c - 1 < 0 or (r - 1 < 0 and c + 1 == C) or (r + 1 == R and c - 1 < 0) or (r + 1 == R and c + 1 == C):\n                if mx[r][c] >= 2:\n                    f = 0\n            elif r - 1 < 0 or r + 1 == R or c - 1 < 0 or (c + 1 == C):\n                if mx[r][c] >= 3:\n                    f = 0\n            elif mx[r][c] >= 4:\n                f = 0\n    if f:\n        print('Stable')\n    else:\n        print('Unstable')", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    ar = []\n    for i in range(r):\n        l = list(map(int, input().split()))\n        ar.append(l)\n    cond = True\n    for i in range(r):\n        for j in range(c):\n            n = 0\n            if i + 1 in range(r):\n                n += 1\n            if i - 1 in range(r):\n                n += 1\n            if j + 1 in range(c):\n                n += 1\n            if j - 1 in range(c):\n                n += 1\n            if ar[i][j] >= n:\n                cond = False\n                break\n    if cond:\n        print('Stable')\n    else:\n        print('Unstable')", "t = int(input())\nwhile t != 0:\n    (r, c) = map(int, input().split())\n    l = []\n    f = 0\n    for x in range(r):\n        ls = list(map(int, input().split()))\n        l.append(ls)\n    for i in range(r):\n        for j in range(c):\n            if i == 0 or i == r - 1 or j == 0 or (j == c - 1):\n                if (i == 0 or i == r - 1) and (j == 0 or j == c - 1):\n                    if l[i][j] > 1:\n                        f = 1\n                        break\n                elif l[i][j] > 2:\n                    f = 1\n                    break\n            elif l[i][j] > 3:\n                f = 1\n                break\n        if f == 1:\n            break\n    if f == 0:\n        print('Stable')\n    else:\n        print('Unstable')\n    t -= 1", "t = int(input())\nwhile t != 0:\n    (r, c) = map(int, input().split())\n    l = []\n    f = 0\n    for x in range(r):\n        ls = list(map(int, input().split()))\n        l.append(ls)\n    for i in range(r):\n        for j in range(c):\n            if i == 0 or i == r - 1 or j == 0 or (j == c - 1):\n                if (i == 0 or i == r - 1) and (j == 0 or j == c - 1):\n                    if l[i][j] > 1:\n                        f = 1\n                        break\n                elif l[i][j] > 2:\n                    f = 1\n                    break\n            elif l[i][j] > 3:\n                f = 1\n                break\n        if f == 1:\n            break\n    if f == 0:\n        print('Stable')\n    else:\n        print('Unstable')\n    t -= 1", "t = int(input())\nwhile t != 0:\n    (r, c) = map(int, input().split())\n    l = []\n    f = 0\n    for x in range(r):\n        ls = list(map(int, input().split()))\n        l.append(ls)\n    for i in range(r):\n        for j in range(c):\n            if i == 0 or i == r - 1 or j == 0 or (j == c - 1):\n                if (i == 0 or i == r - 1) and (j == 0 or j == c - 1):\n                    if l[i][j] > 1:\n                        f = 1\n                        break\n                elif l[i][j] > 2:\n                    f = 1\n                    break\n            elif l[i][j] > 3:\n                f = 1\n                break\n        if f == 1:\n            break\n    if f == 0:\n        print('Stable')\n    else:\n        print('Unstable')\n    t -= 1", "def fun(a, r, c):\n    s = 'Unstable'\n    for i in range(r):\n        for j in range(c):\n            if i == 0 and (j == c - 1 or j == 0):\n                if a[i][j] > 1:\n                    return s\n                else:\n                    continue\n            elif i == 0:\n                if a[i][j] > 2:\n                    return s\n                else:\n                    continue\n            elif i == r - 1 and (j == c - 1 or j == 0):\n                if a[i][j] > 1:\n                    return s\n                else:\n                    continue\n            elif i == r - 1:\n                if a[i][j] > 2:\n                    return s\n                else:\n                    continue\n            elif j == 0 or j == c - 1:\n                if a[i][j] > 2:\n                    return s\n                else:\n                    continue\n            elif a[i][j] > 3:\n                return s\n    s = 'Stable'\n    return s\nfor i in range(int(input())):\n    (r, c) = [int(x) for x in input().split()]\n    a = []\n    for i in range(r):\n        b = [int(x) for x in input().split()]\n        a.append(b)\n    print(fun(a, r, c))", "t = int(input())\nwhile t != 0:\n    (r, c) = map(int, input().split())\n    l = []\n    f = 0\n    for x in range(r):\n        ls = list(map(int, input().split()))\n        l.append(ls)\n    for i in range(r):\n        for j in range(c):\n            if i == 0 or i == r - 1 or j == 0 or (j == c - 1):\n                if (i == 0 or i == r - 1) and (j == 0 or j == c - 1):\n                    if l[i][j] > 1:\n                        f = 1\n                        break\n                elif l[i][j] > 2:\n                    f = 1\n                    break\n            elif l[i][j] > 3:\n                f = 1\n                break\n        if f == 1:\n            break\n    if f == 0:\n        print('Stable')\n    else:\n        print('Unstable')\n    t -= 1", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    L = []\n    flag = True\n    for i in range(r):\n        a = list(map(int, input().split()))\n        L.append(a)\n    for i in range(r):\n        for j in range(c):\n            count = 4\n            if i == 0:\n                count -= 1\n            if j == 0:\n                count -= 1\n            if i == r - 1:\n                count -= 1\n            if j == c - 1:\n                count -= 1\n            if count <= L[i][j]:\n                flag = False\n                break\n    if flag:\n        print('Stable')\n    else:\n        print('Unstable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    L = []\n    flag = True\n    for i in range(r):\n        a = list(map(int, input().split()))\n        L.append(a)\n    for i in range(r):\n        for j in range(c):\n            count = 4\n            if i == 0:\n                count -= 1\n            if j == 0:\n                count -= 1\n            if i == r - 1:\n                count -= 1\n            if j == c - 1:\n                count -= 1\n            if count <= L[i][j]:\n                flag = False\n                break\n    if flag:\n        print('Stable')\n    else:\n        print('Unstable')", "t = input()\nfor c in range(0, int(t)):\n    (ROWS, COLS) = map(int, input().split(' '))\n    grid = []\n    for r in range(ROWS):\n        rr = map(int, input().split(' '))\n        grid.append(list(rr))\n    stable = True\n    for r in range(ROWS):\n        for c in range(COLS):\n            n_adj = 0\n            if r + 1 in range(ROWS):\n                n_adj += 1\n            if r - 1 in range(ROWS):\n                n_adj += 1\n            if c + 1 in range(COLS):\n                n_adj += 1\n            if c - 1 in range(COLS):\n                n_adj += 1\n            if grid[r][c] >= n_adj:\n                stable = False\n                break\n    if stable:\n        print('Stable')\n    else:\n        print('Unstable')", "T = int(input())\nfor _ in range(T):\n    (ROWS, COLS) = map(int, input().split(' '))\n    grid = []\n    for r in range(ROWS):\n        rr = map(int, input().split(' '))\n        grid.append(list(rr))\n    stable = True\n    for r in range(ROWS):\n        for c in range(COLS):\n            n_adj = 0\n            if r + 1 in range(ROWS):\n                n_adj += 1\n            if r - 1 in range(ROWS):\n                n_adj += 1\n            if c + 1 in range(COLS):\n                n_adj += 1\n            if c - 1 in range(COLS):\n                n_adj += 1\n            if grid[r][c] >= n_adj:\n                stable = False\n                break\n    if stable:\n        print('Stable')\n    else:\n        print('Unstable')", "T = int(input())\nfor _ in range(T):\n    (ROWS, COLS) = map(int, input().split(' '))\n    grid = []\n    for r in range(ROWS):\n        rr = map(int, input().split(' '))\n        grid.append(list(rr))\n    stable = True\n    for r in range(ROWS):\n        for c in range(COLS):\n            n_adj = 0\n            if r + 1 in range(ROWS):\n                n_adj += 1\n            if r - 1 in range(ROWS):\n                n_adj += 1\n            if c + 1 in range(COLS):\n                n_adj += 1\n            if c - 1 in range(COLS):\n                n_adj += 1\n            if grid[r][c] >= n_adj:\n                stable = False\n                break\n    if stable:\n        print('Stable')\n    else:\n        print('Unstable')", "T = int(input())\nfor _ in range(T):\n    (ROWS, COLS) = map(int, input().split(' '))\n    grid = []\n    for r in range(ROWS):\n        rr = map(int, input().split(' '))\n        grid.append(list(rr))\n    stable = True\n    for r in range(ROWS):\n        for c in range(COLS):\n            n_adj = 0\n            if r + 1 in range(ROWS):\n                n_adj += 1\n            if r - 1 in range(ROWS):\n                n_adj += 1\n            if c + 1 in range(COLS):\n                n_adj += 1\n            if c - 1 in range(COLS):\n                n_adj += 1\n            if grid[r][c] >= n_adj:\n                stable = False\n                break\n    if stable:\n        print('Stable')\n    else:\n        print('Unstable')", "T = int(input())\nfor _ in range(T):\n    (ROWS, COLS) = map(int, input().split(' '))\n    grid = []\n    for r in range(ROWS):\n        rr = map(int, input().split(' '))\n        grid.append(list(rr))\n    stable = True\n    for r in range(ROWS):\n        for c in range(COLS):\n            n_adj = 0\n            if r + 1 in range(ROWS):\n                n_adj += 1\n            if r - 1 in range(ROWS):\n                n_adj += 1\n            if c + 1 in range(COLS):\n                n_adj += 1\n            if c - 1 in range(COLS):\n                n_adj += 1\n            if grid[r][c] >= n_adj:\n                stable = False\n                break\n    if stable:\n        print('Stable')\n    else:\n        print('Unstable')", "for i in range(int(input())):\n    rc = list(map(int, input().split()))\n    matrix = []\n    for i in range(rc[0]):\n        row = list(map(int, input().split()))\n        matrix.append(row)\n        x = 0\n        y = 0\n        counter = 0\n    for i in range(rc[0] * rc[1]):\n        cell = matrix[y][x]\n        if y == 0 and x == 0 or (y == 0 and x == rc[1] - 1) or (y == rc[0] - 1 and x == 0) or (y == rc[0] - 1 and x == rc[1] - 1):\n            if cell < 2:\n                counter += 1\n        if y == 0 and x < rc[1] - 1 and (x > 0) or (y > 0 and y < rc[0] - 1 and (x == 0)) or (x == rc[1] - 1 and y > 0 and (y < rc[0] - 1)) or (y == rc[0] - 1 and x > 0 and (x < rc[1] - 1)):\n            if cell < 3:\n                counter += 1\n        if y > 0 and y < rc[0] - 1 and (x > 0) and (x < rc[1] - 1):\n            if cell < 4:\n                counter += 1\n        x += 1\n        if x == rc[1]:\n            x = 0\n            y += 1\n    if counter == rc[0] * rc[1]:\n        print('Stable')\n    else:\n        print('Unstable')", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    l = []\n    for i in range(a):\n        l.append(list(map(int, input().split())))\n    for i in range(a):\n        for j in range(b):\n            if i == 0 or i == a - 1 or j == 0 or (j == b - 1):\n                if (i == 0 or i == a - 1) and j == 0 or ((i == 0 or i == a - 1) and j == b - 1):\n                    k = 2\n                else:\n                    k = 3\n            else:\n                k = 4\n            if l[i][j] >= k:\n                k = -1\n                break\n        if k == -1:\n            print('Unstable')\n            break\n    else:\n        print('Stable')", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    l = []\n    for i in range(a):\n        l.append(list(map(int, input().split())))\n    for i in range(a):\n        for j in range(b):\n            if i == 0 or i == a - 1 or j == 0 or (j == b - 1):\n                if (i == 0 or i == a - 1) and j == 0 or ((i == 0 or i == a - 1) and j == b - 1):\n                    k = 2\n                else:\n                    k = 3\n            else:\n                k = 4\n            if l[i][j] >= k:\n                k = -1\n                break\n        if k == -1:\n            print('Unstable')\n            break\n    else:\n        print('Stable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    p = 0\n    ar = list(map(int, input().split()))\n    for i in range(1, c - 1):\n        if ar[0] > 1 or ar[c - 1] > 1:\n            p = 1\n        elif ar[i] > 2:\n            p = 1\n    for j in range(1, r - 1):\n        ar = list(map(int, input().split()))\n        if ar[0] > 2 or ar[c - 1] > 2:\n            p = 1\n        for k in range(1, c - 1):\n            if ar[k] > 3:\n                p = 1\n    ar = list(map(int, input().split()))\n    for l in range(1, c - 1):\n        if ar[l] > 2:\n            p = 1\n    if ar[0] > 1 or ar[c - 1] > 1:\n        p = 1\n    if p == 1:\n        print('Unstable')\n    else:\n        print('Stable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    p = 0\n    ar = list(map(int, input().split()))\n    for i in range(1, c - 1):\n        if ar[0] > 1 or ar[c - 1] > 1:\n            p = 1\n        elif ar[i] > 2:\n            p = 1\n    for j in range(1, r - 1):\n        ar = list(map(int, input().split()))\n        if ar[0] > 2 or ar[c - 1] > 2:\n            p = 1\n        for k in range(1, c - 1):\n            if ar[k] > 3:\n                p = 1\n    ar = list(map(int, input().split()))\n    for l in range(1, c - 1):\n        if ar[l] > 2:\n            p = 1\n    if ar[0] > 1 or ar[c - 1] > 1:\n        p = 1\n    if p == 1:\n        print('Unstable')\n    else:\n        print('Stable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    p = 0\n    ar = list(map(int, input().split()))\n    for i in range(1, c - 1):\n        if ar[0] > 1 or ar[c - 1] > 1:\n            p = 1\n        elif ar[i] > 2:\n            p = 1\n    for j in range(1, r - 1):\n        ar = list(map(int, input().split()))\n        if ar[0] > 2 or ar[c - 1] > 2:\n            p = 1\n        for k in range(1, c - 1):\n            if ar[k] > 3:\n                p = 1\n    ar = list(map(int, input().split()))\n    for l in range(1, c - 1):\n        if ar[l] > 2:\n            p = 1\n    if ar[0] > 1 or ar[c - 1] > 1:\n        p = 1\n    if p == 1:\n        print('Unstable')\n    else:\n        print('Stable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    p = 0\n    ar = list(map(int, input().split()))\n    for i in range(1, c - 1):\n        if ar[0] > 1 or ar[c - 1] > 1:\n            p = 1\n        elif ar[i] > 2:\n            p = 1\n    for j in range(1, r - 1):\n        ar = list(map(int, input().split()))\n        if ar[0] > 2 or ar[c - 1] > 2:\n            p = 1\n        for k in range(1, c - 1):\n            if ar[k] > 3:\n                p = 1\n    ar = list(map(int, input().split()))\n    for l in range(1, c - 1):\n        if ar[l] > 2:\n            p = 1\n    if ar[0] > 1 or ar[c - 1] > 1:\n        p = 1\n    if p == 1:\n        print('Unstable')\n    else:\n        print('Stable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    p = 0\n    ar = list(map(int, input().split()))\n    for i in range(1, c - 1):\n        if ar[0] > 1 or ar[c - 1] > 1:\n            p = 1\n        elif ar[i] > 2:\n            p = 1\n    for j in range(1, r - 1):\n        ar = list(map(int, input().split()))\n        if ar[0] > 2 or ar[c - 1] > 2:\n            p = 1\n        for k in range(1, c - 1):\n            if ar[k] > 3:\n                p = 1\n    ar = list(map(int, input().split()))\n    for l in range(1, c - 1):\n        if ar[l] > 2:\n            p = 1\n    if ar[0] > 1 or ar[c - 1] > 1:\n        p = 1\n    if p == 1:\n        print('Unstable')\n    else:\n        print('Stable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    p = 0\n    ar = list(map(int, input().split()))\n    for i in range(1, c - 1):\n        if ar[0] > 1 or ar[c - 1] > 1:\n            p = 1\n        elif ar[i] > 2:\n            p = 1\n    for j in range(1, r - 1):\n        ar = list(map(int, input().split()))\n        if ar[0] > 2 or ar[c - 1] > 2:\n            p = 1\n        for k in range(1, c - 1):\n            if ar[k] > 3:\n                p = 1\n    ar = list(map(int, input().split()))\n    for l in range(1, c - 1):\n        if ar[l] > 2:\n            p = 1\n    if ar[0] > 1 or ar[c - 1] > 1:\n        p = 1\n    if p == 1:\n        print('Unstable')\n    else:\n        print('Stable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    p = 0\n    ar = list(map(int, input().split()))\n    for i in range(1, c - 1):\n        if ar[0] > 1 or ar[c - 1] > 1:\n            p = 1\n        elif ar[i] > 2:\n            p = 1\n    for j in range(1, r - 1):\n        ar = list(map(int, input().split()))\n        if ar[0] > 2 or ar[c - 1] > 2:\n            p = 1\n        for k in range(1, c - 1):\n            if ar[k] > 3:\n                p = 1\n    ar = list(map(int, input().split()))\n    for l in range(1, c - 1):\n        if ar[l] > 2:\n            p = 1\n            break\n    if ar[0] > 1 or ar[c - 1] > 1:\n        p = 1\n    if p == 1:\n        print('Unstable')\n    else:\n        print('Stable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    a = []\n    flag = False\n    for i in range(r):\n        a.append([int(i) for i in input().split()])\n    for i in [0, r - 1]:\n        for j in range(c):\n            if j in [0, c - 1]:\n                if a[i][j] > 1:\n                    flag = True\n                    break\n            elif a[i][j] > 2:\n                flag = True\n                break\n        if flag:\n            break\n    if flag:\n        print('Unstable')\n    else:\n        for i in range(1, r - 1):\n            for j in range(c):\n                if j in [0, c - 1]:\n                    if a[i][j] > 2:\n                        flag = True\n                        break\n                elif a[i][j] > 3:\n                    flag = True\n                    break\n            if flag:\n                break\n        if flag:\n            print('Unstable')\n        else:\n            print('Stable')", "def isStable(l):\n    for i in range(r):\n        for j in range(c):\n            cnt = 0\n            if i + 1 < r:\n                cnt += 1\n            if i - 1 >= 0:\n                cnt += 1\n            if j + 1 < c:\n                cnt += 1\n            if j - 1 >= 0:\n                cnt += 1\n            if l[i][j] >= cnt:\n                return False\n    return True\nt = int(input())\nwhile t:\n    (r, c) = [int(i) for i in input().split()]\n    l = []\n    for j in range(r):\n        l.append([int(i) for i in input().split()])\n    print('Stable') if isStable(l) else print('Unstable')\n    t -= 1", "def isStable(l):\n    for i in range(r):\n        for j in range(c):\n            cnt = 0\n            if i + 1 < r:\n                cnt += 1\n            if i - 1 >= 0:\n                cnt += 1\n            if j + 1 < c:\n                cnt += 1\n            if j - 1 >= 0:\n                cnt += 1\n            if l[i][j] >= cnt:\n                return False\n    return True\nt = int(input())\nwhile t:\n    (r, c) = [int(i) for i in input().split()]\n    l = []\n    for j in range(r):\n        l.append([int(i) for i in input().split()])\n    print('Stable') if isStable(l) else print('Unstable')\n    t -= 1", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    a = []\n    for x in range(r):\n        temp = list(map(int, input().split()))\n        a.append(temp)\n    ans = True\n    for i in range(r):\n        for j in range(c):\n            count = 0\n            if i + 1 < r:\n                count += 1\n            if j + 1 < c:\n                count += 1\n            if i - 1 >= 0:\n                count += 1\n            if j - 1 >= 0:\n                count += 1\n            if count > a[i][j]:\n                continue\n            else:\n                ans = False\n                break\n    if ans:\n        print('Stable')\n    else:\n        print('Unstable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    a = []\n    for x in range(r):\n        temp = list(map(int, input().split()))\n        a.append(temp)\n    ans = True\n    for i in range(r):\n        for j in range(c):\n            count = 0\n            if i + 1 < r:\n                count += 1\n            if j + 1 < c:\n                count += 1\n            if i - 1 >= 0:\n                count += 1\n            if j - 1 >= 0:\n                count += 1\n            if count > a[i][j]:\n                continue\n            else:\n                ans = False\n                break\n    if ans:\n        print('Stable')\n    else:\n        print('Unstable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    a = []\n    for x in range(r):\n        temp = list(map(int, input().split()))\n        a.append(temp)\n    ans = True\n    for i in range(r):\n        for j in range(c):\n            count = 0\n            if i + 1 < r:\n                count += 1\n            if j + 1 < c:\n                count += 1\n            if i - 1 >= 0:\n                count += 1\n            if j - 1 >= 0:\n                count += 1\n            if count > a[i][j]:\n                continue\n            else:\n                ans = False\n                break\n    if ans:\n        print('Stable')\n    else:\n        print('Unstable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    grid = []\n    for i in range(r):\n        grid.append(list(map(int, input().split())))\n    flag = 1\n    for i in range(r):\n        for j in range(c):\n            if (i == 0 or i == r - 1) and (j == 0 or j == c - 1):\n                if grid[i][j] >= 2:\n                    flag = 0\n                    break\n            elif i == 0 or i == r - 1 or j == 0 or (j == c - 1):\n                if grid[i][j] >= 3:\n                    flag = 0\n                    break\n            elif grid[i][j] >= 4:\n                flag = 0\n                break\n    if flag:\n        print('Stable')\n    else:\n        print('Unstable')", "T = int(input())\nfor tj in range(T):\n    (R, C) = map(int, input().split())\n    grid = []\n    for i in range(R):\n        grid.append(list(map(int, input().split())))\n    flag = True\n    for i in range(R):\n        for j in range(C):\n            if (i == 0 or i == R - 1) and (j == 0 or j == C - 1):\n                if grid[i][j] >= 2:\n                    flag = False\n                    break\n            elif i == 0 or i == R - 1 or j == 0 or (j == C - 1):\n                if grid[i][j] >= 3:\n                    flag = False\n                    break\n            elif grid[i][j] >= 4:\n                flag = False\n                break\n    if flag:\n        print('Stable')\n    else:\n        print('Unstable')", "T = int(input())\nfor tj in range(T):\n    (R, C) = map(int, input().split())\n    grid = []\n    for i in range(R):\n        grid.append(list(map(int, input().split())))\n    flag = True\n    for i in range(R):\n        for j in range(C):\n            if (i == 0 or i == R - 1) and (j == 0 or j == C - 1):\n                if grid[i][j] >= 2:\n                    flag = False\n                    break\n            elif i == 0 or i == R - 1 or j == 0 or (j == C - 1):\n                if grid[i][j] >= 3:\n                    flag = False\n                    break\n            elif grid[i][j] >= 4:\n                flag = False\n                break\n    if flag:\n        print('Stable')\n    else:\n        print('Unstable')", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    a = []\n    for i in range(r):\n        temp = list(map(int, input().split()))\n        a.append(temp)\n    flag = True\n    for i in range(r):\n        for j in range(c):\n            count = 0\n            if i + 1 < r:\n                count += 1\n            if j + 1 < c:\n                count += 1\n            if i - 1 >= 0:\n                count += 1\n            if j - 1 >= 0:\n                count += 1\n            if count > a[i][j]:\n                pass\n            else:\n                flag = False\n    if flag:\n        ans = 'Stable'\n    else:\n        ans = 'Unstable'\n    print(ans)", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    L = []\n    flag = True\n    for i in range(r):\n        a = list(map(int, input().split()))\n        L.append(a)\n    for i in range(r):\n        for j in range(c):\n            count = 4\n            if i == 0:\n                count -= 1\n            if j == 0:\n                count -= 1\n            if i == r - 1:\n                count -= 1\n            if j == c - 1:\n                count -= 1\n            if count <= L[i][j]:\n                flag = False\n                break\n    if flag:\n        print('Stable')\n    else:\n        print('Unstable')", "t = int(input())\nfor _ in range(t):\n    (m, n) = map(int, input().split())\n    a = [[0] * n] * m\n    s = [0] * n\n    s1 = [0] * n\n    for j in range(n):\n        if j == 0 or j == n - 1:\n            s[j] = 2\n            s1[j] = 3\n        else:\n            s[j] = 3\n            s1[j] = 4\n    for i in range(m):\n        if i == 0 or i == m - 1:\n            a[i] = s\n        else:\n            a[i] = s1\n    flag = True\n    inp = [[0] * n] * m\n    for i in range(m):\n        inp[i] = list(map(int, input().split()))\n    for i in range(m):\n        for j in range(n):\n            if a[i][j] <= inp[i][j]:\n                flag = False\n                break\n    if flag:\n        print('Stable')\n    else:\n        print('Unstable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    l = []\n    flag = True\n    for i in range(r):\n        a = list(map(int, input().split()))\n        l.append(a)\n    for i in range(r):\n        for j in range(c):\n            count = 4\n            if i == 0:\n                count -= 1\n            if j == 0:\n                count -= 1\n            if i == r - 1:\n                count -= 1\n            if j == c - 1:\n                count -= 1\n            if count <= l[i][j]:\n                flag = False\n                break\n    if flag:\n        print('Stable')\n    else:\n        print('Unstable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    l = []\n    flag = True\n    for i in range(r):\n        a = list(map(int, input().split()))\n        l.append(a)\n    for i in range(r):\n        for j in range(c):\n            count = 4\n            if i == 0:\n                count -= 1\n            if j == 0:\n                count -= 1\n            if i == r - 1:\n                count -= 1\n            if j == c - 1:\n                count -= 1\n            if count <= l[i][j]:\n                flag = False\n                break\n    if flag:\n        print('Stable')\n    else:\n        print('Unstable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    l = []\n    flag = True\n    for i in range(r):\n        a = list(map(int, input().split()))\n        l.append(a)\n    for i in range(r):\n        for j in range(c):\n            count = 4\n            if i == 0:\n                count -= 1\n            if j == 0:\n                count -= 1\n            if i == r - 1:\n                count -= 1\n            if j == c - 1:\n                count -= 1\n            if count <= l[i][j]:\n                flag = False\n                break\n    if flag:\n        print('Stable')\n    else:\n        print('Unstable')", "t = int(input())\nwhile t:\n    f = 1\n    (r, c) = map(int, input().split())\n    mat = list()\n    for i in range(r):\n        temp = list(map(int, input().split()))\n        mat.append(temp)\n    for i in range(r):\n        for j in range(c):\n            Count = 4\n            if i == 0:\n                Count -= 1\n            if j == 0:\n                Count -= 1\n            if i == r - 1:\n                Count -= 1\n            if j == c - 1:\n                Count -= 1\n            if Count <= mat[i][j]:\n                f = 0\n                break\n        if j != c - 1:\n            break\n    if f:\n        print('Stable')\n    else:\n        print('Unstable')\n    t -= 1", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    l = []\n    flag = True\n    for i in range(r):\n        a = list(map(int, input().split()))\n        l.append(a)\n    for i in range(r):\n        for j in range(c):\n            count = 4\n            if i == 0:\n                count -= 1\n            if j == 0:\n                count -= 1\n            if i == r - 1:\n                count -= 1\n            if j == c - 1:\n                count -= 1\n            if count <= l[i][j]:\n                flag = False\n                break\n    if flag:\n        print('Stable')\n    else:\n        print('Unstable')", "from math import *\nimport sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\nfor _ in range(int(input())):\n    (r, c) = list(map(int, input().split()))\n    l1 = []\n    l2 = []\n    for i in range(r):\n        l = list(map(int, input().split()))\n        l1.append(l)\n        if i == 0 or i == r - 1:\n            l2.append([2] + [3] * (c - 2) + [2])\n        else:\n            l2.append([3] + [4] * (c - 2) + [3])\n    proceed = True\n    for i in range(r):\n        for j in range(c):\n            if l1[i][j] >= l2[i][j]:\n                proceed = False\n    if proceed == False:\n        print('Unstable')\n    else:\n        print('Stable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    a = []\n    for i in range(r):\n        a += [list(map(int, input().split()))]\n    b = 0\n    for i in range(r):\n        for j in range(c):\n            if i == 0 and j == 0 or (i == 0 and j == c - 1) or (i == r - 1 and j == 0) or (i == r - 1 and j == c - 1):\n                if a[i][j] > 1:\n                    b = 1\n                    break\n            elif i == 0 or j == 0 or i == r - 1 or (j == c - 1):\n                if a[i][j] > 2:\n                    b = 1\n                    break\n            elif a[i][j] > 3:\n                b = 1\n                break\n        if b == 1:\n            print('Unstable')\n            break\n    else:\n        print('Stable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    l = []\n    flag = True\n    for i in range(r):\n        a = list(map(int, input().split()))\n        l.append(a)\n    for i in range(r):\n        for j in range(c):\n            count = 4\n            if i == 0:\n                count -= 1\n            if j == 0:\n                count -= 1\n            if i == r - 1:\n                count -= 1\n            if j == c - 1:\n                count -= 1\n            if count <= l[i][j]:\n                flag = False\n                break\n    if flag:\n        print('Stable')\n    else:\n        print('Unstable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    l = []\n    flag = True\n    for i in range(r):\n        a = list(map(int, input().split()))\n        l.append(a)\n    for i in range(r):\n        for j in range(c):\n            count = 4\n            if i == 0:\n                count -= 1\n            if j == 0:\n                count -= 1\n            if i == r - 1:\n                count -= 1\n            if j == c - 1:\n                count -= 1\n            if count <= l[i][j]:\n                flag = False\n                break\n    if flag:\n        print('Stable')\n    else:\n        print('Unstable')", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    ans = 'Stable'\n    for j in range(n):\n        l = list(map(int, input().split()))\n        if j == n - 1 or j == 0:\n            for z in range(k):\n                if z == k - 1 or z == 0:\n                    if l[z] >= 2:\n                        ans = 'Unstable'\n                        break\n                elif l[z] >= 3:\n                    ans = 'Unstable'\n                    break\n        else:\n            for x in range(k):\n                if x == 0 or x == k - 1:\n                    if l[x] >= 3:\n                        ans = 'Unstable'\n                        break\n                elif l[x] >= 4:\n                    ans = 'Unstable'\n                    break\n    print(ans)", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    ans = 'Stable'\n    for i in range(r):\n        x = list(map(int, input().split()))\n        if i == 0 or i == r - 1:\n            for j in range(c):\n                if j == 0 or j == c - 1:\n                    if x[j] >= 2:\n                        ans = 'Unstable'\n                        break\n                elif x[j] >= 3:\n                    ans = 'Unstable'\n                    break\n        else:\n            for j in range(c):\n                if j == 0 or j == c - 1:\n                    if x[j] >= 3:\n                        ans = 'Unstable'\n                        break\n                elif x[j] >= 4:\n                    ans = 'Unstable'\n                    break\n    print(ans)", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    l = []\n    flag = True\n    for i in range(r):\n        a = list(map(int, input().split()))\n        l.append(a)\n    for i in range(r):\n        for j in range(c):\n            count = 4\n            if i == 0:\n                count -= 1\n            if j == 0:\n                count -= 1\n            if i == r - 1:\n                count -= 1\n            if j == c - 1:\n                count -= 1\n            if count <= l[i][j]:\n                flag = False\n                break\n    if flag:\n        print('Stable')\n    else:\n        print('Unstable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    l = []\n    flag = True\n    for i in range(r):\n        a = list(map(int, input().split()))\n        l.append(a)\n    for i in range(r):\n        for j in range(c):\n            count = 4\n            if i == 0:\n                count -= 1\n            if j == 0:\n                count -= 1\n            if i == r - 1:\n                count -= 1\n            if j == c - 1:\n                count -= 1\n            if count <= l[i][j]:\n                flag = False\n                break\n    if flag:\n        print('Stable')\n    else:\n        print('Unstable')", "from itertools import chain\ntc = int(input())\n\ndef solve(arr, row, column):\n    if arr[0][0] >= 2 or arr[0][column - 1] >= 2 or arr[row - 1][0] >= 2 or (arr[row - 1][column - 1] >= 2):\n        return 'Unstable'\n    elif max(arr[0]) >= 3 or max(arr[-1]) >= 3 or max((arr[n][0] for n in range(row))) >= 3 or (max((arr[n][-1] for n in range(row))) >= 3):\n        return 'Unstable'\n    elif max(chain(*arr)) >= 4:\n        return 'Unstable'\n    return 'Stable'\nfor _ in range(tc):\n    (r, c) = map(int, input().split())\n    arr = [list(map(int, input().split())) for _ in range(r)]\n    print(solve(arr, r, c))", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    l = []\n    flag = True\n    for i in range(r):\n        a = list(map(int, input().split()))\n        l.append(a)\n    for i in range(r):\n        for j in range(c):\n            count = 4\n            if i == 0:\n                count -= 1\n            if j == 0:\n                count -= 1\n            if i == r - 1:\n                count -= 1\n            if j == c - 1:\n                count -= 1\n            if count <= l[i][j]:\n                flag = False\n                break\n    if flag:\n        print('Stable')\n    else:\n        print('Unstable')", "import pandas as pd\nsubtask = int(input())\nfor _ in range(subtask):\n    data = []\n    (R, C) = [int(i) for i in input().split()]\n    for i in range(R):\n        data.append([int(i) for i in input().split()])\n    F = 0\n    for i in [[0, 0], [0, C - 1], [R - 1, 0], [R - 1, C - 1]]:\n        if data[i[0]][i[1]] > 1:\n            F = 1\n            break\n    if F == 0:\n        for i in [0, R - 1]:\n            for j in range(1, C):\n                if data[i][j] > 2:\n                    F = 1\n                    break\n    if F == 0:\n        for i in [0, C - 1]:\n            for j in range(1, R):\n                if data[j][i] > 2:\n                    F = 1\n                    break\n    if F == 0:\n        for i in range(1, R):\n            for j in range(1, C):\n                if data[i][j] > 3:\n                    F = 1\n                    break\n    if F == 0:\n        print('Stable')\n    else:\n        print('Unstable')", "import pandas as pd\nsubtask = int(input())\nfor _ in range(subtask):\n    list_items = []\n    (R, C) = [int(i) for i in input().split()]\n    for i in range(R):\n        list_items.append([int(i) for i in input().split()])\n    data = list_items\n    F = 0\n    for i in [[0, 0], [0, C - 1], [R - 1, 0], [R - 1, C - 1]]:\n        if data[i[0]][i[1]] > 1:\n            F = 1\n            break\n    if F == 0:\n        for i in [0, R - 1]:\n            for j in range(1, C):\n                if data[i][j] > 2:\n                    F = 1\n                    break\n    if F == 0:\n        for i in [0, C - 1]:\n            for j in range(1, R):\n                if data[j][i] > 2:\n                    F = 1\n                    break\n    if F == 0:\n        for i in range(1, R):\n            for j in range(1, C):\n                if data[i][j] > 3:\n                    F = 1\n                    break\n    if F == 0:\n        print('Stable')\n    else:\n        print('Unstable')", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    l = []\n    flag = True\n    for i in range(r):\n        a = list(map(int, input().split()))\n        l.append(a)\n    for i in range(r):\n        for j in range(c):\n            count = 4\n            if i == 0:\n                count -= 1\n            if j == 0:\n                count -= 1\n            if i == r - 1:\n                count -= 1\n            if j == c - 1:\n                count -= 1\n            if count <= l[i][j]:\n                flag = False\n                break\n    if flag:\n        print('Stable')\n    else:\n        print('Unstable')", "t = int(input())\nfor i in range(t):\n    (r, c) = map(int, input().split())\n    l = []\n    flag = True\n    for i in range(r):\n        a = list(map(int, input().split()))\n        l.append(a)\n    for i in range(r):\n        for j in range(c):\n            count = 4\n            if i == 0:\n                count -= 1\n            if j == 0:\n                count -= 1\n            if i == r - 1:\n                count -= 1\n            if j == c - 1:\n                count -= 1\n            if count <= l[i][j]:\n                flag = False\n                break\n    if flag:\n        print('Stable')\n    else:\n        print('Unstable')", "t = int(input())\nfor i in range(t):\n    (r, c) = map(int, input().split())\n    flag = True\n    l = []\n    for i in range(r):\n        a = list(map(int, input().split()))\n        l.append(a)\n    for i in range(r):\n        for j in range(c):\n            count = 4\n            if i == 0:\n                count -= 1\n            if j == 0:\n                count -= 1\n            if i == r - 1:\n                count -= 1\n            if j == c - 1:\n                count -= 1\n            if count <= l[i][j]:\n                flag = False\n                break\n    if flag == True:\n        print('Stable')\n    else:\n        print('Unstable')", "def readints():\n    s = input()\n    return list(map(int, s.split()))\nT = int(input())\nfor i in range(T):\n    (r, c) = readints()\n    m = [readints() for i in range(r)]\n    b = True\n    for i in range(r):\n        for j in range(c):\n            nbs = 0\n            if i + 1 < r:\n                nbs += 1\n            if i - 1 >= 0:\n                nbs += 1\n            if j + 1 < c:\n                nbs += 1\n            if j - 1 >= 0:\n                nbs += 1\n            b = b and m[i][j] < nbs\n    if b:\n        print('Stable')\n    else:\n        print('Unstable')", "def readints():\n    s = input()\n    return list(map(int, s.split()))\nT = int(input())\nfor i in range(T):\n    (r, c) = readints()\n    m = [readints() for i in range(r)]\n    b = m[0][0] < 2 and m[0][c - 1] < 2 and (m[r - 1][0] < 2) and (m[r - 1][c - 1] < 2)\n    for j in range(1, c - 1):\n        b = b and m[0][j] < 3\n        b = b and m[r - 1][j] < 3\n    for i in range(1, r - 1):\n        b = b and m[i][0] < 3\n        b = b and m[i][c - 1] < 3\n    for i in range(1, r - 1):\n        for j in range(1, c - 1):\n            b = b and m[i][j] < 4\n    if b:\n        print('Stable')\n    else:\n        print('Unstable')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    flag = 0\n    for i in range(n):\n        for j in range(m):\n            c = 0\n            if i - 1 >= 0:\n                c += 1\n            if i + 1 < n:\n                c += 1\n            if j - 1 >= 0:\n                c += 1\n            if j + 1 < m:\n                c += 1\n            if l[i][j] >= c:\n                flag = 1\n                break\n        if flag:\n            break\n    if flag:\n        print('Unstable')\n    else:\n        print('Stable')", "def answer():\n    for i in range(n):\n        for j in range(m):\n            adj = 0\n            if i - 1 >= 0:\n                adj += 1\n            if i + 1 < n:\n                adj += 1\n            if j - 1 >= 0:\n                adj += 1\n            if j + 1 < m:\n                adj += 1\n            if a[i][j] >= adj:\n                return 'Unstable'\n    return 'Stable'\nfor T in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    print(answer())", "for _ in range(int(input())):\n    (R, C) = map(int, input().split())\n    A = []\n    S = []\n    for _ in range(R):\n        S = list(map(int, input().split()))\n        A.append(S)\n    F = True\n    for i in range(R):\n        for j in range(C):\n            if (i == 0 or i == R - 1) and (j == 0 or j == C - 1) and (A[i][j] > 1):\n                F = False\n                break\n            elif (i == 0 or i == R - 1) and 0 < j < C - 1 and (A[i][j] > 2):\n                F = False\n                break\n            elif (j == 0 or j == C - 1) and 0 < i < R - 1 and (A[i][j] > 2):\n                F = False\n                break\n            elif 0 < j < C - 1 and 0 < i < R - 1 and (A[i][j] > 3):\n                F = False\n                break\n    if F:\n        print('Stable')\n    else:\n        print('Unstable')", "T = int(input())\nfor i in range(T):\n    (n, m) = map(int, input().split())\n    mat = []\n    for i in range(n):\n        mat.append(list(map(int, input().split())))\n    flag = 0\n    for i in range(n):\n        for j in range(m):\n            c = 0\n            if i - 1 >= 0 and i - 1 < n:\n                c = c + 1\n            if i + 1 > 0 and i + 1 < n:\n                c = c + 1\n            if j - 1 >= 0 and j - 1 < m:\n                c = c + 1\n            if j + 1 > +0 and j + 1 < m:\n                c = c + 1\n            if c <= mat[i][j]:\n                flag = 1\n                break\n        if flag == 1:\n            break\n    if flag == 1:\n        print('Unstable')\n    else:\n        print('Stable')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mat = []\n    for i in range(n):\n        mat.append(list(map(int, input().split())))\n    flag = 0\n    for i in range(n):\n        for j in range(m):\n            c = 0\n            if i - 1 >= 0 and i - 1 < n:\n                c = c + 1\n            if i + 1 > 0 and i + 1 < n:\n                c = c + 1\n            if j - 1 >= 0 and j - 1 < m:\n                c = c + 1\n            if j + 1 > +0 and j + 1 < m:\n                c = c + 1\n            if c <= mat[i][j]:\n                flag = 1\n                break\n        if flag == 1:\n            break\n    if flag == 1:\n        print('Unstable')\n    else:\n        print('Stable')", "t = int(input())\nfor _ in range(t):\n    (r, c) = [int(x) for x in input().split()]\n    a = []\n    for i in range(r):\n        temp = [int(x) for x in input().split()]\n        a.append(temp)\n    b = []\n    for i in range(r):\n        temp = [0] * c\n        b.append(temp)\n    for i in range(r):\n        for j in range(c):\n            if i == 0 or i == r - 1 or j == 0 or (j == c - 1):\n                b[i][j] = 3\n    b[0][0] -= 1\n    b[0][c - 1] -= 1\n    b[r - 1][c - 1] -= 1\n    b[r - 1][0] -= 1\n    for i in range(r):\n        for j in range(c):\n            if b[i][j] == 0:\n                b[i][j] = 4\n    f = 0\n    for i in range(r):\n        for j in range(c):\n            if a[i][j] >= b[i][j]:\n                f = 1\n                break\n        if f == 1:\n            break\n    if f == 1:\n        print('Unstable')\n    else:\n        print('Stable')", "def isvalid(i, j, r, c):\n    if i >= 0 and i < r and (j >= 0) and (j < c):\n        return True\n    return False\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (r, c) = [int(x) for x in input().split()]\n    (matrix, flag) = ([], False)\n    for i in range(r):\n        matrix.append([int(x) for x in input().split()])\n    for i in range(r):\n        for j in range(c):\n            count = 0\n            if isvalid(i - 1, j, r, c):\n                count += 1\n            if isvalid(i, j - 1, r, c):\n                count += 1\n            if isvalid(i + 1, j, r, c):\n                count += 1\n            if isvalid(i, j + 1, r, c):\n                count += 1\n            if matrix[i][j] >= count:\n                flag = True\n                break\n        if flag:\n            break\n    print('Unstable') if flag else print('Stable')", "t = int(input())\nfor kk in range(0, t):\n    (r, c) = map(int, input().split())\n    grid = []\n    condition = True\n    for jj in range(0, r):\n        grid = list(map(int, input().split()))\n        if condition:\n            if jj == 0 or jj == r - 1:\n                if grid[0] > 1 or grid[c - 1] > 1:\n                    condition = False\n                for j in range(1, c - 1):\n                    if grid[j] > 2:\n                        condition = False\n            else:\n                if grid[0] > 2 or grid[c - 1] > 2:\n                    condition = False\n                for j in range(1, c - 1):\n                    if grid[j] > 3:\n                        condition = False\n    if condition:\n        print('Stable')\n    else:\n        print('Unstable')", "t = int(input())\nfor kk in range(0, t):\n    (r, c) = map(int, input().split())\n    grid = []\n    condition = True\n    for jj in range(0, r):\n        grid = list(map(int, input().split()))\n        if condition:\n            if jj == 0 or jj == r - 1:\n                if grid[0] > 1 or grid[c - 1] > 1:\n                    condition = False\n                for j in range(1, c - 1):\n                    if grid[j] > 2:\n                        condition = False\n            else:\n                if grid[0] > 2 or grid[c - 1] > 2:\n                    condition = False\n                for j in range(1, c - 1):\n                    if grid[j] > 3:\n                        condition = False\n    if condition:\n        print('Stable')\n    else:\n        print('Unstable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    l = []\n    for k in range(r):\n        a = list(map(int, input().split()))\n        l.append(a)\n    ans = 'Stable'\n    for i in range(r):\n        for j in range(c):\n            p = l[i][j]\n            count = 0\n            if i - 1 >= 0 and j >= 0:\n                count += 1\n            if i >= 0 and j - 1 >= 0:\n                count += 1\n            if i + 1 <= r - 1 and j <= c - 1:\n                count += 1\n            if i <= r - 1 and j + 1 <= c - 1:\n                count += 1\n            if count <= p:\n                ans = 'Unstable'\n                break\n    print(ans)", "def checkStability(inp_arr, R, C, i, j):\n    cell_cnt = 0\n    for coordinates in ((i, j - 1), (i, j + 1), (i - 1, j), (i + 1, j)):\n        (r, c) = coordinates\n        if r >= 0 and c >= 0 and (r < R) and (c < C):\n            cell_cnt += 1\n    if inp_arr[i][j] >= cell_cnt:\n        return False\n    return True\nfor _ in range(int(input())):\n    (R, C) = (int(i) for i in input().strip(' ').split(' '))\n    inp_arr = []\n    stableFlag = True\n    printStr = 'Stable'\n    for i in range(R):\n        inp_arr.append(tuple((int(i) for i in input().strip(' ').split(' '))))\n    for i in range(R):\n        if stableFlag == True:\n            for j in range(C):\n                stableFlag = checkStability(inp_arr, R, C, i, j)\n                if stableFlag == False:\n                    printStr = 'Unstable'\n                    break\n    print(printStr)", "t = int(input())\nfor case in range(t):\n    (r, c) = [int(i) for i in input().split()]\n    mat = []\n    for i in range(r):\n        mat.append([int(i) for i in input().split()])\n    unstable = False\n    for row in range(r):\n        if unstable:\n            break\n        for col in range(c):\n            if row == 0 and col == 0 or (row == 0 and col == c - 1) or (row == r - 1 and col == 0) or (row == r - 1 and col == c - 1):\n                if mat[row][col] > 1:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif row == 0 or row == r - 1 or col == 0 or (col == c - 1):\n                if mat[row][col] > 2:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif mat[row][col] > 3:\n                unstable = True\n                print('Unstable')\n                break\n    if not unstable:\n        print('Stable')", "t = int(input())\nfor case in range(t):\n    (r, c) = [int(i) for i in input().split()]\n    mat = []\n    for i in range(r):\n        mat.append([int(i) for i in input().split()])\n    unstable = False\n    for row in range(r):\n        if unstable:\n            break\n        for col in range(c):\n            if row == 0 and col == 0 or (row == 0 and col == c - 1) or (row == r - 1 and col == 0) or (row == r - 1 and col == c - 1):\n                if mat[row][col] > 1:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif row == 0 or row == r - 1 or col == 0 or (col == c - 1):\n                if mat[row][col] > 2:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif mat[row][col] > 3:\n                unstable = True\n                print('Unstable')\n                break\n    if not unstable:\n        print('Stable')", "t = int(input())\nfor case in range(t):\n    (r, c) = [int(i) for i in input().split()]\n    mat = []\n    for i in range(r):\n        mat.append([int(i) for i in input().split()])\n    unstable = False\n    for row in range(r):\n        if unstable:\n            break\n        for col in range(c):\n            if row == 0 and col == 0 or (row == 0 and col == c - 1) or (row == r - 1 and col == 0) or (row == r - 1 and col == c - 1):\n                if mat[row][col] > 1:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif row == 0 or row == r - 1 or col == 0 or (col == c - 1):\n                if mat[row][col] > 2:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif mat[row][col] > 3:\n                unstable = True\n                print('Unstable')\n                break\n    if not unstable:\n        print('Stable')", "def adjacent(i, j, r, c):\n    if i == 0 or i == r - 1:\n        if j == 0 or j == c - 1:\n            return 2\n        else:\n            return 3\n    elif j == 0 or j == c - 1:\n        return 3\n    else:\n        return 4\nfor _ in range(int(input())):\n    (r, c) = map(int, input().split(' '))\n    grid = []\n    flag = 0\n    for i in range(r):\n        grid.append(list(map(int, input().split(' '))))\n    for i in range(r):\n        for j in range(c):\n            if adjacent(i, j, r, c) <= grid[i][j]:\n                flag = 1\n                break\n        if flag == 1:\n            break\n    if flag == 1:\n        print('Unstable')\n    else:\n        print('Stable')", "from collections import Counter\nfor _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(m)]\n    if max(a[0][0], a[0][n - 1], a[m - 1][0], a[m - 1][n - 1]) < 2:\n        if max([a[0][i] for i in range(1, n)] + [a[m - 1][i] for i in range(1, n)] + [a[i][0] for i in range(1, m)] + [a[i][n - 1] for i in range(1, m)]) < 3:\n            if max((a[i][j] for i in range(1, m) for j in range(1, n))) < 4:\n                print('Stable')\n            else:\n                print('Unstable')\n        else:\n            print('Unstable')\n    else:\n        print('Unstable')", "t = int(input())\nfor case in range(t):\n    (r, c) = [int(i) for i in input().split()]\n    mat = []\n    for i in range(r):\n        mat.append([int(i) for i in input().split()])\n    unstable = False\n    for row in range(r):\n        if unstable:\n            break\n        for col in range(c):\n            if row == 0 and col == 0 or (row == 0 and col == c - 1) or (row == r - 1 and col == 0) or (row == r - 1 and col == c - 1):\n                if mat[row][col] > 1:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif row == 0 or row == r - 1 or col == 0 or (col == c - 1):\n                if mat[row][col] > 2:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif mat[row][col] > 3:\n                unstable = True\n                print('Unstable')\n                break\n    if not unstable:\n        print('Stable')", "t = int(input())\nfor case in range(t):\n    (r, c) = [int(i) for i in input().split()]\n    mat = []\n    for i in range(r):\n        mat.append([int(i) for i in input().split()])\n    unstable = False\n    for row in range(r):\n        if unstable:\n            break\n        for col in range(c):\n            if row == 0 and col == 0 or (row == 0 and col == c - 1) or (row == r - 1 and col == 0) or (row == r - 1 and col == c - 1):\n                if mat[row][col] > 1:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif row == 0 or row == r - 1 or col == 0 or (col == c - 1):\n                if mat[row][col] > 2:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif mat[row][col] > 3:\n                unstable = True\n                print('Unstable')\n                break\n    if not unstable:\n        print('Stable')", "t = int(input())\nfor case in range(t):\n    (r, c) = [int(i) for i in input().split()]\n    mat = []\n    for i in range(r):\n        mat.append([int(i) for i in input().split()])\n    unstable = False\n    for row in range(r):\n        if unstable:\n            break\n        for col in range(c):\n            if row == 0 and col == 0 or (row == 0 and col == c - 1) or (row == r - 1 and col == 0) or (row == r - 1 and col == c - 1):\n                if mat[row][col] > 1:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif row == 0 or row == r - 1 or col == 0 or (col == c - 1):\n                if mat[row][col] > 2:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif mat[row][col] > 3:\n                unstable = True\n                print('Unstable')\n                break\n    if not unstable:\n        print('Stable')", "import numpy as np\nt = int(input())\nfor t in range(0, t):\n    q = list(map(int, input().rstrip().split()))\n    r = q[0]\n    c = q[1]\n    sum = 0\n    a = np.array([[int(x) for x in input().split()] for i in range(r)])\n    if a[0][0] < 2 and a[0][c - 1] < 2 and (a[r - 1][0] < 2) and (a[r - 1][c - 1] < 2):\n        sum += 4\n    for j in range(1, c - 1):\n        if a[0][j] < 3 and a[r - 1][j] < 3:\n            sum = sum + 2\n    for i in range(1, r - 1):\n        if a[i][0] < 3 and a[i][c - 1] < 3:\n            sum = sum + 2\n    for j in range(1, r - 1):\n        for i in range(1, c - 1):\n            if a[j][i] < 4:\n                sum = sum + 1\n    if sum == r * c:\n        print('Stable')\n    else:\n        print('Unstable')", "import math\nt = int(input())\nfor i in range(t):\n    (r, c) = map(int, input().split())\n    res = []\n    for j in range(r):\n        l = list(map(int, input().split()))\n        res.append(l)\n    flag = 1\n    for a in range(r):\n        for b in range(c):\n            adj = 4\n            if a == 0 or a == r - 1:\n                adj -= 1\n            if b == 0 or b == c - 1:\n                adj -= 1\n            if res[a][b] >= adj:\n                flag = 0\n                break\n    if flag:\n        print('Stable')\n    else:\n        print('Unstable')", "t = int(input())\nfor case in range(t):\n    (r, c) = [int(i) for i in input().split()]\n    mat = []\n    for i in range(r):\n        mat.append([int(i) for i in input().split()])\n    unstable = False\n    for row in range(r):\n        if unstable:\n            break\n        for col in range(c):\n            if row == 0 and col == 0 or (row == 0 and col == c - 1) or (row == r - 1 and col == 0) or (row == r - 1 and col == c - 1):\n                if mat[row][col] > 1:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif row == 0 or row == r - 1 or col == 0 or (col == c - 1):\n                if mat[row][col] > 2:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif mat[row][col] > 3:\n                unstable = True\n                print('Unstable')\n                break\n    if not unstable:\n        print('Stable')", "t = int(input())\nfor case in range(t):\n    (r, c) = [int(i) for i in input().split()]\n    mat = []\n    for i in range(r):\n        mat.append([int(i) for i in input().split()])\n    unstable = False\n    for row in range(r):\n        if unstable:\n            break\n        for col in range(c):\n            if row == 0 and col == 0 or (row == 0 and col == c - 1) or (row == r - 1 and col == 0) or (row == r - 1 and col == c - 1):\n                if mat[row][col] > 1:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif row == 0 or row == r - 1 or col == 0 or (col == c - 1):\n                if mat[row][col] > 2:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif mat[row][col] > 3:\n                unstable = True\n                print('Unstable')\n                break\n    if not unstable:\n        print('Stable')", "t = int(input())\nfor case in range(t):\n    (r, c) = [int(i) for i in input().split()]\n    mat = []\n    for i in range(r):\n        mat.append([int(i) for i in input().split()])\n    unstable = False\n    for row in range(r):\n        if unstable:\n            break\n        for col in range(c):\n            if row == 0 and col == 0 or (row == 0 and col == c - 1) or (row == r - 1 and col == 0) or (row == r - 1 and col == c - 1):\n                if mat[row][col] > 1:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif row == 0 or row == r - 1 or col == 0 or (col == c - 1):\n                if mat[row][col] > 2:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif mat[row][col] > 3:\n                unstable = True\n                print('Unstable')\n                break\n    if not unstable:\n        print('Stable')", "t = int(input())\nfor case in range(t):\n    (r, c) = [int(i) for i in input().split()]\n    mat = []\n    for i in range(r):\n        mat.append([int(i) for i in input().split()])\n    unstable = False\n    for row in range(r):\n        if unstable:\n            break\n        for col in range(c):\n            if row == 0 and col == 0 or (row == 0 and col == c - 1) or (row == r - 1 and col == 0) or (row == r - 1 and col == c - 1):\n                if mat[row][col] > 1:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif row == 0 or row == r - 1 or col == 0 or (col == c - 1):\n                if mat[row][col] > 2:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif mat[row][col] > 3:\n                unstable = True\n                print('Unstable')\n                break\n    if not unstable:\n        print('Stable')", "t = int(input())\nfor case in range(t):\n    (r, c) = [int(i) for i in input().split()]\n    mat = []\n    for i in range(r):\n        mat.append([int(i) for i in input().split()])\n    unstable = False\n    for row in range(r):\n        if unstable:\n            break\n        for col in range(c):\n            if row == 0 and col == 0 or (row == 0 and col == c - 1) or (row == r - 1 and col == 0) or (row == r - 1 and col == c - 1):\n                if mat[row][col] > 1:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif row == 0 or row == r - 1 or col == 0 or (col == c - 1):\n                if mat[row][col] > 2:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif mat[row][col] > 3:\n                unstable = True\n                print('Unstable')\n                break\n    if not unstable:\n        print('Stable')", "t = int(input())\nfor case in range(t):\n    (r, c) = [int(i) for i in input().split()]\n    mat = []\n    for i in range(r):\n        mat.append([int(i) for i in input().split()])\n    unstable = False\n    for row in range(r):\n        if unstable:\n            break\n        for col in range(c):\n            if row == 0 and col == 0 or (row == 0 and col == c - 1) or (row == r - 1 and col == 0) or (row == r - 1 and col == c - 1):\n                if mat[row][col] > 1:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif row == 0 or row == r - 1 or col == 0 or (col == c - 1):\n                if mat[row][col] > 2:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif mat[row][col] > 3:\n                unstable = True\n                print('Unstable')\n                break\n    if not unstable:\n        print('Stable')", "t = int(input())\nfor case in range(t):\n    (r, c) = [int(i) for i in input().split()]\n    mat = []\n    for i in range(r):\n        mat.append([int(i) for i in input().split()])\n    unstable = False\n    for row in range(r):\n        if unstable:\n            break\n        for col in range(c):\n            if row == 0 and col == 0 or (row == 0 and col == c - 1) or (row == r - 1 and col == 0) or (row == r - 1 and col == c - 1):\n                if mat[row][col] > 1:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif row == 0 or row == r - 1 or col == 0 or (col == c - 1):\n                if mat[row][col] > 2:\n                    unstable = True\n                    print('Unstable')\n                    break\n            elif mat[row][col] > 3:\n                unstable = True\n                print('Unstable')\n                break\n    if not unstable:\n        print('Stable')", "def check(r, c, a):\n    for i in range(r):\n        for j in range(c):\n            adj = 4\n            if i == 0 or i == r - 1:\n                adj -= 1\n            if j == 0 or j == c - 1:\n                adj -= 1\n            if a[i][j] >= adj:\n                return 'Unstable'\n    return 'Stable'\nfor _ in range(int(input())):\n    d = input().split()\n    r = int(d[0])\n    c = int(d[1])\n    a = []\n    for i in range(r):\n        a.append(list(map(int, input().split())))\n    print(check(r, c, a))", "for _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    L = []\n    for i in range(N):\n        L.append(list(map(int, input().split())))\n    flag = True\n    for i in range(N):\n        for j in range(M):\n            k = 0\n            if i - 1 >= 0:\n                k += 1\n            if i + 1 < N:\n                k += 1\n            if j - 1 >= 0:\n                k += 1\n            if j + 1 < M:\n                k += 1\n            if k <= L[i][j]:\n                flag = False\n                break\n        if not flag:\n            break\n    print('Stable' if flag else 'Unstable')", "from collections import Counter\nfor _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(m)]\n    if max(a[0][0], a[0][n - 1], a[m - 1][0], a[m - 1][n - 1]) < 2:\n        if max([a[0][i] for i in range(1, n)] + [a[m - 1][i] for i in range(1, n)] + [a[i][0] for i in range(1, m)] + [a[i][n - 1] for i in range(1, m)]) < 3:\n            if max((a[i][j] for i in range(1, m) for j in range(1, n))) < 4:\n                print('Stable')\n            else:\n                print('Unstable')\n        else:\n            print('Unstable')\n    else:\n        print('Unstable')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arr = []\n    for _ in range(n):\n        a = list(map(int, input().split()))\n        arr.append(a)\n    f = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0 or (i == 0 and j == m - 1) or (i == n - 1 and j == 0) or (i == n - 1 and j == m - 1):\n                if arr[i][j] < 2:\n                    f = 0\n                else:\n                    f = 1\n                    break\n            elif i == 0 or i == n - 1 or j == 0 or (j == m - 1):\n                if arr[i][j] < 3:\n                    f = 0\n                else:\n                    f = 1\n                    break\n            elif arr[i][j] < 4:\n                f = 0\n            else:\n                f = 1\n                break\n        if f == 1:\n            break\n    if f == 1:\n        print('Unstable')\n    else:\n        print('Stable')", "t = int(input())\n\ndef numOfCordinates(arr, raw_arr, r, c):\n    num = 0\n    possibleCords = [[r - 1, c], [r + 1, c], [r, c + 1], [r, c - 1]]\n    for cords in possibleCords:\n        if cords in raw_arr:\n            num += 1\n    return num\nfor _ in range(1, t + 1):\n    (r, c) = map(int, input().split(' '))\n    arr = []\n    for i in range(r):\n        ri = list(map(int, input().split(' ')))[:c]\n        arr.append(ri)\n    raw_arr = []\n    for ri in range(r):\n        for ci in range(c):\n            raw_arr.append([ri, ci])\n    for r in range(len(arr)):\n        for c in range(len(arr[r])):\n            no_cords = numOfCordinates(arr, raw_arr, r, c)\n            if no_cords == -1:\n                arr[r][c] = -1\n            elif arr[r][c] < no_cords:\n                arr[r][c] = 0\n            else:\n                arr[r][c] = -1\n    s = 0\n    for ls in arr:\n        s += sum(ls)\n    if s == 0:\n        print('Stable')\n    else:\n        print('Unstable')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    a = []\n    for i in range(r):\n        a.append(list(map(int, input().split())))\n    cont = True\n    for i in range(r):\n        for j in range(c):\n            if i == 0 and j == c - 1 or (i == r - 1 and j == 0) or (i == r - 1 and j == c - 1) or (i == 0 and j == 0):\n                if a[i][j] > 1:\n                    cont = False\n                    break\n            elif i == 0 or i == r - 1 or j == 0 or (j == c - 1):\n                if a[i][j] > 2:\n                    cont = False\n                    break\n            elif a[i][j] > 3:\n                cont = False\n                break\n        if cont == False:\n            print('Unstable')\n            break\n    else:\n        print('Stable')"]