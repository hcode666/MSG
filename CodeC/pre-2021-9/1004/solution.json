["from collections import Counter, defaultdict\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    coun = Counter(arr)\n    check = True\n    for j in coun:\n        if coun[j] > n // 2:\n            print('No')\n            check = False\n            break\n    if check == True:\n        print('Yes')\n        narr = sorted(arr)\n        dic = defaultdict()\n        j = 0\n        for j in range(len(narr)):\n            if narr[j] not in dic:\n                dic[narr[j]] = j\n        ans = [0] * n\n        for j in range(len(arr)):\n            ans[j] = narr[(dic[arr[j]] + n // 2) % n]\n            if coun[arr[j]] != 1:\n                dic[arr[j]] += 1\n        print(*ans)", "from collections import Counter, defaultdict\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    coun = Counter(arr)\n    check = True\n    for j in coun:\n        if coun[j] > n // 2:\n            print('No')\n            check = False\n            break\n    if check == True:\n        print('Yes')\n        narr = sorted(arr)\n        dic = defaultdict()\n        j = 0\n        for j in range(len(narr)):\n            if narr[j] not in dic:\n                dic[narr[j]] = j\n        ans = [0] * n\n        for j in range(len(arr)):\n            ans[j] = narr[(dic[arr[j]] + n // 2) % n]\n            if coun[arr[j]] != 1:\n                dic[arr[j]] += 1\n        print(*ans)", "from collections import Counter, defaultdict\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    coun = Counter(arr)\n    check = True\n    for j in coun:\n        if coun[j] > n // 2:\n            print('No')\n            check = False\n            break\n    if check == True:\n        print('Yes')\n        narr = sorted(arr)\n        dic = defaultdict()\n        j = 0\n        for j in range(len(narr)):\n            if narr[j] not in dic:\n                dic[narr[j]] = j\n        ans = [0] * n\n        for j in range(len(arr)):\n            ans[j] = narr[(dic[arr[j]] + n // 2) % n]\n            if coun[arr[j]] != 1:\n                dic[arr[j]] += 1\n        print(*ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(lambda x: int(x), input().split()))\n    b = []\n    for i in range(0, len(a)):\n        b.append((a[i], i))\n    b.sort(key=lambda x: x[0])\n    hashmap = {}\n    maximum = 0\n    for i in range(0, len(a)):\n        if a[i] not in hashmap:\n            hashmap[a[i]] = 0\n        hashmap[a[i]] += 1\n        if hashmap[a[i]] > maximum:\n            maximum = hashmap[a[i]]\n    if maximum > n - maximum:\n        print('No')\n    else:\n        print('Yes')\n        c = []\n        for i in range(0, len(b)):\n            c.append(b[(i + maximum) % n])\n        d = [0 for _ in range(n)]\n        for i in range(0, len(b)):\n            d[b[i][1]] = c[i][0]\n        for i in d:\n            print(i, end=' ')\n        print()", "for q in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = []\n    for i in range(len(l)):\n        d.append((l[i], i))\n    l.sort()\n    d.sort()\n    i = 0\n    count = []\n    while i < n:\n        x = l[i]\n        j = 0\n        c = 0\n        while i + j < n and l[i + j] == x:\n            c += 1\n            j += 1\n        count.append(c)\n        i += j\n    c = max(count)\n    if c > n // 2:\n        print('No')\n    else:\n        ans = [0] * n\n        for i in range(len(l)):\n            ans[d[i][1]] = d[i - c][0]\n        print('Yes')\n        print(*ans)", "from collections import Counter\ntc = int(input())\nwhile tc > 0:\n    n = int(input())\n    lis = list(map(int, input().split()))\n    l1 = [(x, y) for (y, x) in enumerate(lis)]\n    lis.sort()\n    l1.sort()\n    i = 0\n    c_l = []\n    while i < n:\n        x = lis[i]\n        j = 0\n        c = 0\n        while i + j < n and lis[i + j] == x:\n            c += 1\n            j += 1\n        c_l.append(c)\n        i += j\n    c = max(c_l)\n    if c > n // 2:\n        print('No')\n    else:\n        ans = [0] * n\n        for i in range(len(lis)):\n            ans[l1[i][1]] = l1[i - c][0]\n        print('Yes')\n        print(*ans)\n    tc -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = [(x, i) for (i, x) in enumerate(l)]\n    l.sort()\n    l1.sort()\n    i = 0\n    count = []\n    while i < n:\n        x = l[i]\n        j = 0\n        c = 0\n        while i + j < n and l[i + j] == x:\n            c += 1\n            j += 1\n        count.append(c)\n        i += j\n    c = max(count)\n    if c > n // 2:\n        print('No')\n    else:\n        ans = [0] * n\n        for i in range(len(l)):\n            ans[l1[i][1]] = l1[i - c][0]\n        print('Yes')\n        print(*ans)", "from collections import defaultdict\n\ndef caps(a):\n    d = defaultdict(list)\n    for i in range(len(a)):\n        d[a[i]].append(i)\n        if len(d[a[i]]) > len(a) // 2:\n            return ('No', [])\n    arr = []\n    for i in d.keys():\n        arr += [i] * len(d[i])\n    arr2 = [i for i in arr]\n    arr2 = arr2[len(a) // 2:] + arr2[:len(a) // 2]\n    for i in range(len(arr2)):\n        di = arr[i]\n        vi = arr2[i]\n        a[d[di][0]] = vi\n        d[di].remove(d[di][0])\n    return ('Yes', a)\nt = int(input())\nfor _ in range(t):\n    n = input()\n    a = input().split()\n    (ans, arr) = caps(a)\n    print(ans)\n    if ans == 'Yes':\n        st = ''\n        for i in arr:\n            st += i + ' '\n        print(st)", "for z in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dict_count = {}\n    for num in a:\n        if num in dict_count:\n            dict_count[num] += 1\n        else:\n            dict_count[num] = 1\n    possible = 1\n    for key in dict_count:\n        if dict_count[key] > n // 2:\n            possible = 0\n            break\n    if possible:\n        print('Yes')\n        a_index = [(a[i], i) for i in range(n)]\n        a_index.sort()\n        cap_dict = {i: -1 for i in range(n)}\n        h = n // 2\n        for i in range(n):\n            cap_dict[a_index[i][1]] = a_index[(i + h) % n][0]\n        caps = [str(cap_dict[i]) for i in range(n)]\n        print(' '.join(caps))\n    else:\n        print('No')", "R = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    n = int(input())\n    L1 = list(R())\n    L = sorted(L1)\n    d = {}\n    f = 0\n    p = n // 2\n    for i in range(n):\n        if L[i] not in d:\n            d[L[i]] = [0, []]\n        d[L[i]][0] += 1\n        d[L[i]][1] += [i]\n        if d[L[i]][0] > p:\n            f = 1\n            break\n    if f:\n        print('No')\n    else:\n        print('Yes')\n        res = []\n        for i in L1:\n            ind = d[i][1].pop()\n            if n % 2 and ind == n - 1:\n                res.append(L[0])\n                continue\n            if ind + p < n:\n                res.append(L[ind + p])\n            elif ind - p >= 0:\n                res.append(L[ind - p])\n        print(*res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    f = {}\n    poss = 1\n    A = [[a[i], i] for i in range(n)]\n    for i in range(n):\n        if a[i] in f:\n            f[a[i]] += 1\n        else:\n            f[a[i]] = 1\n    for i in f.values():\n        if i > n // 2:\n            poss = 0\n    if poss:\n        A.sort()\n        ans = [0] * n\n        j = max(f.values())\n        B = A[j:] + A[:j]\n        for i in range(n):\n            ans[A[i][1]] = B[i][0]\n        print('Yes')\n        print(*ans)\n    else:\n        print('No')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    f = {}\n    poss = 1\n    A = [[a[i], i] for i in range(n)]\n    for i in range(n):\n        if a[i] in f:\n            f[a[i]] += 1\n        else:\n            f[a[i]] = 1\n    for i in f.values():\n        if i > n // 2:\n            poss = 0\n    if poss:\n        A.sort()\n        ans = [0] * n\n        j = max(f.values())\n        B = A[j:] + A[:j]\n        for i in range(n):\n            ans[A[i][1]] = B[i][0]\n        print('Yes')\n        print(*ans)\n    else:\n        print('No')", "from collections import Counter as cp\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = input().split()\n    l = cp(p)\n    r = int(n / 2)\n    if l.most_common(1)[0][1] <= r:\n        print('Yes')\n    else:\n        print('No')\n        continue\n    counter_list = []\n    t_list = []\n    for j in range(n):\n        counter_list.append(int(p[j]))\n        t_list.append((j, int(p[j])))\n    t_list.sort(key=lambda x: x[1])\n    for k in range(n):\n        q = t_list[k]\n        s = t_list[(k + r) % n]\n        counter_list[q[0]] = s[1]\n    for k in range(n - 1):\n        print(counter_list[k], end=' ')\n    print(counter_list[n - 1])", "from collections import Counter\nfrom copy import copy\nimport random\n\ndef derange(arr, max_freq):\n    new_arr = copy(arr)\n    dis = []\n    for (index, item) in enumerate(new_arr):\n        dis.append((item, index))\n    dis.sort()\n    (item, index) = ([a for (a, b) in dis], [b for (a, b) in dis])\n    item = item[-max_freq:] + item[:-max_freq]\n    dis = zip(item, index)\n    new_arr = [0] * len(new_arr)\n    for (a, b) in dis:\n        new_arr[b] = a\n    return new_arr\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    freq = Counter(arr)\n    flag = 1\n    val = freq.values()\n    for i in val:\n        if 2 * i > n:\n            flag = 0\n    if flag != 0:\n        print('Yes')\n        new = derange(arr, max(val))\n        print(*new)\n    else:\n        print('No')", "from collections import Counter\nfor z in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    for j in range(n):\n        b.append((a[j], j))\n    c = Counter(a)\n    m = 0\n    for (x, y) in c.items():\n        m = max(y, m)\n    if m > n - m:\n        print('No')\n    else:\n        d = [0] * n\n        b.sort()\n        for i in range(n):\n            d[b[i][1]] = b[i - m][0]\n        print('Yes')\n        for i in d:\n            print(i, end=' ')\n        print()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    hash = {}\n    l = list(map(int, input().split()))\n    for j in range(n):\n        try:\n            hash[l[j]]\n        except:\n            hash[l[j]] = 1\n        else:\n            hash[l[j]] += 1\n    flag = 0\n    max = 0\n    for j in range(n):\n        if hash[l[j]] > n // 2:\n            flag = 1\n            break\n        elif hash[l[j]] > max:\n            max = hash[l[j]]\n    v = sorted(range(len(l)), key=lambda k: l[k])\n    u = sorted(l)\n    ans = [0] * n\n    if flag == 0:\n        print('Yes')\n        z = u[max:] + u[:max]\n        for i in range(n):\n            ans[v[i]] = z[i]\n        print(*ans)\n    else:\n        print('No')", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    li = [int(x) for x in input().split()]\n    inp_ord = list(enumerate(li))\n    cow = Counter(li)\n    max_freq = cow.most_common(1)[0][1]\n    if max_freq > n - max_freq:\n        print('No')\n    else:\n        sorted_input = sorted(inp_ord, key=lambda x: x[1])\n        foo = n - max_freq\n        for i in range(foo):\n            current_element = sorted_input[i][1]\n            curr_pos = sorted_input[i][0]\n            toSwapIndex = i + max_freq\n            swap_partner = sorted_input[toSwapIndex][1]\n            swap_position = sorted_input[toSwapIndex][0]\n            sorted_input[i] = (curr_pos, swap_partner)\n            sorted_input[toSwapIndex] = (swap_position, current_element)\n        op_list = sorted(sorted_input, key=lambda x: x[0])\n        bar = [y for (x, y) in op_list]\n        print('Yes')\n        print(*bar)", "for test in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mp = []\n    for i in range(n):\n        mp.append([arr[i], i])\n    mp.sort(key=lambda x: x[0])\n    prev = -1\n    max = -1\n    count = 1\n    for i in range(n):\n        if prev == mp[i][0]:\n            count += 1\n        else:\n            count = 1\n        if count > max:\n            max = count\n        prev = mp[i][0]\n    if 2 * max > n:\n        print('No')\n    else:\n        print('Yes')\n        x = [0] * n\n        for i in range(n):\n            x[(i + max) % n] = mp[i][0]\n        y = [0] * n\n        for i in range(n):\n            y[mp[i][1]] = x[i]\n        for i in range(n):\n            print(y[i], end=' ')\n        print()", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    arr = []\n    mm = 0\n    for (key, value) in d.items():\n        mm = max(mm, value)\n    for i in range(len(a)):\n        arr.append([a[i], i])\n    ans = [0] * n\n    if mm > n // 2:\n        print('No')\n    else:\n        print('Yes')\n        arr = sorted(arr, key=lambda item: item[0])\n        for i in range(n):\n            ans[arr[(i + mm) % n][1]] = arr[i][0]\n        for i in ans:\n            print(i, end=' ')\n        print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = list()\n    for (id, x) in enumerate(a):\n        b.append([x, id])\n    b.sort()\n    a.sort()\n    counter = list()\n    count = 1\n    c_max = 1\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            count += 1\n        else:\n            counter.append(count)\n            c_max = max(c_max, counter[-1])\n            count = 1\n    counter.append(count)\n    c_max = max(c_max, counter[-1])\n    if c_max > n // 2:\n        print('No')\n    else:\n        print('Yes')\n        c = [0] * n\n        for i in range(n):\n            c[b[i][1]] = b[(i + c_max) % n][0]\n        for x in c:\n            print(x, end=' ')\n        print('')", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    L = list(map(int, input().split()))\n    M = list(range(1, N + 1))\n    Z = [0] * N\n    (L, M) = (list(t) for t in zip(*sorted(zip(L, M))))\n    cout = (N + 1) // 2\n    mybool = True\n    for i in range(N):\n        Z[i] = L[(i + cout) % N]\n        if Z[i] == L[i]:\n            print('No')\n            mybool = False\n            break\n    if mybool:\n        print('Yes')\n        (M, Z) = (list(t) for t in zip(*sorted(zip(M, Z))))\n        for i in range(N):\n            print(Z[i], end=' ')\n        print()", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    b = [0] * n\n    g = {}\n    h = {}\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] in d:\n            d[a[i]] += 1\n            h[a[i]].append(i)\n        else:\n            d[a[i]] = 1\n            h[a[i]] = [i]\n    x = list(map(list, sorted(d.items(), key=lambda y: y[1])))\n    l = 0\n    r = len(x) - 1\n    for i in d:\n        g[i] = []\n    while l < r:\n        if x[r][1] >= x[l][1]:\n            g[x[r][0]].append([x[l][0], x[l][1]])\n            g[x[l][0]].append([x[r][0], x[l][1]])\n            x[r][1] -= x[l][1]\n            x[l][1] = 0\n            l += 1\n        else:\n            if x[r][1] > 0:\n                g[x[r][0]].append([x[l][0], x[r][1]])\n                g[x[l][0]].append([x[r][0], x[r][1]])\n                x[l][1] -= x[r][1]\n                x[r][1] = 0\n            r -= 1\n    s = []\n    m = x[-1][0]\n    k = -1\n    for i in range(n):\n        if g[a[i]] != []:\n            b[i] = g[a[i]][-1][0]\n            g[a[i]][-1][1] -= 1\n            if g[a[i]][-1][1] == 0:\n                g[a[i]].pop()\n        else:\n            s.append(i)\n            k = a[i]\n    if k == m:\n        print('No')\n    else:\n        for i in h[m]:\n            if b[i] != k:\n                if s != []:\n                    b[s.pop()] = b[i]\n                    b[i] = k\n        print('Yes')\n        print(*b)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [[a[i], i] for i in range(n)]\n    b.sort()\n    c = [0] * n\n    for i in range(n):\n        x = b[i][0]\n        if a[b[(i + n // 2) % n][1]] == x:\n            print('No')\n            break\n        else:\n            c[b[(i + n // 2) % n][1]] = x\n    else:\n        print('Yes')\n        print(*c)", "def arrange(n, l):\n    list1 = [0] * n\n    i = 0\n    list2 = [-1] * n\n    for j in range(n):\n        if i != j:\n            if i < n and list1[i] == 1:\n                for k in range(i, n):\n                    i += 1\n                    if i < n and list1[i] != 1:\n                        break\n            if i == n:\n                break\n            elif l[j] != l[i]:\n                list2[i] = l[j]\n                list2[j] = l[i]\n                list1[i] = 1\n                list1[j] = 1\n                i += 1\n    if i != n:\n        for j in range(0, i):\n            if i < n and list1[i] == 1:\n                for k in range(i, n):\n                    i += 1\n                    if i < n and list1[i] != 1:\n                        break\n            if i == n:\n                break\n            elif l[j] != l[i] and list2[j] != l[i]:\n                list2[i] = list2[j]\n                list2[j] = l[i]\n                list1[i] = 1\n                i += 1\n    if i != n:\n        print('No')\n    else:\n        print('Yes')\n        for j in list2:\n            print(j, end=' ')\n        print()\nt = int(input())\nfor i in range(t):\n    N = int(input())\n    l = []\n    s = input().split(' ')\n    for j in range(N):\n        l.append(int(s[j]))\n    arrange(N, l)", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    b = [0] * n\n    g = {}\n    h = {}\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] in d:\n            d[a[i]] += 1\n            h[a[i]].append(i)\n        else:\n            d[a[i]] = 1\n            h[a[i]] = [i]\n    x = list(map(list, sorted(d.items(), key=lambda y: y[1])))\n    l = 0\n    r = len(x) - 1\n    for i in d:\n        g[i] = []\n    while l < r:\n        if x[r][1] >= x[l][1]:\n            g[x[r][0]].append([x[l][0], x[l][1]])\n            g[x[l][0]].append([x[r][0], x[l][1]])\n            x[r][1] -= x[l][1]\n            x[l][1] = 0\n            l += 1\n        else:\n            if x[r][1] > 0:\n                g[x[r][0]].append([x[l][0], x[r][1]])\n                g[x[l][0]].append([x[r][0], x[r][1]])\n                x[l][1] -= x[r][1]\n                x[r][1] = 0\n            r -= 1\n    s = []\n    m = x[-1][0]\n    k = -1\n    for i in range(n):\n        if g[a[i]] != []:\n            b[i] = g[a[i]][-1][0]\n            g[a[i]][-1][1] -= 1\n            if g[a[i]][-1][1] == 0:\n                g[a[i]].pop()\n        else:\n            s.append(i)\n            k = a[i]\n    if k == m:\n        print('No')\n    else:\n        for i in h[m]:\n            if b[i] != k:\n                if s != []:\n                    b[s.pop()] = b[i]\n                    b[i] = k\n        print('Yes')\n        print(*b)", "import sys\nfrom collections import Counter\nsys.setrecursionlimit(10 ** 5 + 1)\ninf = int(10 ** 20)\nmax_val = inf\nmin_val = -inf\nRW = lambda : sys.stdin.readline().strip()\nRI = lambda : int(RW())\nRMI = lambda : [int(x) for x in sys.stdin.readline().strip().split()]\nRWI = lambda : [x for x in sys.stdin.readline().strip().split()]\nnb_Test = RI()\nfor _ in range(nb_Test):\n    nb_elem = RI()\n    elem = RMI()\n    elems = [(v, i) for (i, v) in enumerate(elem)]\n    elemc = Counter(elem)\n    maxs = max(elemc.values())\n    if maxs * 2 > nb_elem:\n        print('No')\n    else:\n        elems = sorted(elems)\n        res = [0] * nb_elem\n        for i in range(nb_elem):\n            res[elems[(i + nb_elem // 2) % nb_elem][1]] = elems[i][0]\n        print('Yes')\n        print(*res)", "from collections import Counter\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    ls = list(map(int, input().split()))\n    d = dict(Counter(ls))\n    s = set(ls)\n    p = []\n    indices = {}\n    for i in range(N):\n        try:\n            indices[ls[i]].append(i)\n        except:\n            indices[ls[i]] = [i]\n    for i in s:\n        p.append((i, d[i]))\n    res1 = []\n    p.sort(key=lambda x: x[1])\n    p.reverse()\n    for i in p:\n        res1.extend(indices[i[0]])\n    if p[0][1] > sum([i[1] for i in p[1:]]):\n        print('No')\n    else:\n        p = p[1:] + [p[0]]\n        print('Yes')\n        res2 = []\n        for i in p:\n            for j in range(i[1]):\n                res2.append(i[0])\n        res = [0] * N\n        for i in range(N):\n            res[res1[i]] = res2[i]\n        for i in res:\n            print(i, end=' ')\n        print()", "from collections import Counter\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    ls = list(map(int, input().split()))\n    d = dict(Counter(ls))\n    s = set(ls)\n    p = []\n    indices = {}\n    for i in range(N):\n        try:\n            indices[ls[i]].append(i)\n        except:\n            indices[ls[i]] = [i]\n    for i in s:\n        p.append((i, d[i]))\n    res1 = []\n    p.sort(key=lambda x: x[1])\n    p.reverse()\n    for i in p:\n        res1.extend(indices[i[0]])\n    if p[0][1] > sum([i[1] for i in p[1:]]):\n        print('No')\n    else:\n        p = p[1:] + [p[0]]\n        print('Yes')\n        res2 = []\n        for i in p:\n            for j in range(i[1]):\n                res2.append(i[0])\n        res = [0] * N\n        for i in range(N):\n            res[res1[i]] = res2[i]\n        for i in res:\n            print(i, end=' ')\n        print()", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    l = []\n    p = []\n    dict = {}\n    for i in range(n):\n        if dict.get(s[i]) == None:\n            dict[s[i]] = 1\n            l.append(s[i])\n        else:\n            dict[s[i]] += 1\n    flag = 0\n    for i in range(len(l)):\n        p.append((l[i], dict[l[i]]))\n    if 1:\n        flag = 0\n        p.sort(key=lambda x: x[1])\n        p = p[::-1]\n        l = []\n        max = p[0][1]\n        for i in range(len(p)):\n            for j in range(p[i][1]):\n                l.append(p[i][0])\n        p = []\n        p = l[max:] + l[0:max]\n        pict = {}\n        for i in range(len(l)):\n            if pict.get(l[i]) == None:\n                pict[l[i]] = []\n            pict[l[i]].append(p[i])\n            if l[i] == p[i]:\n                flag = 1\n                break\n        if flag == 0:\n            print('Yes')\n            for i in range(len(l)):\n                x = pict[s[i]].pop()\n                print(x, end=' ')\n            print('')\n        else:\n            print('No')", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a[:]\n    sa = set(a)\n    ss1 = list(sa)\n    gg = defaultdict(list)\n    dic = {}\n    for i in ss1:\n        dic[i] = 0\n    for i in range(n):\n        dic[b[i]] += 1\n        gg[b[i]].append(i)\n    flg = 0\n    for k in dic:\n        if dic[k] > n // 2:\n            flg = 1\n            break\n    ma = 0\n    if flg:\n        print('No')\n    else:\n        for k in dic:\n            ma = max(ma, dic[k])\n        c = []\n        e = []\n        d = [0 for i in range(n)]\n        for k in gg:\n            c += gg[k]\n        e = c[ma:] + c[:ma]\n        for i in range(n):\n            d[c[i]] = b[e[i]]\n        print('Yes')\n        print(*d)", "import collections\ncount = 0\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dic = {}\n    flag = False\n    for i in range(n):\n        if a[i] not in dic:\n            dic[a[i]] = [i]\n        else:\n            dic[a[i]].append(i)\n            if len(dic[a[i]]) > n // 2:\n                flag = True\n    if flag:\n        print('No')\n    else:\n        print('Yes')\n        queue = []\n        for i in dic.keys():\n            for j in dic[i]:\n                queue.append([i, i, j])\n        queue = collections.deque(queue)\n        while queue[0][0] == queue[0][1]:\n            l = []\n            m = []\n            c = 0\n            while c == 0 or queue[0][0] == l[0][0]:\n                c += 1\n                count += 1\n                l.append(queue.popleft())\n            for i in range(c):\n                count += 1\n                m.append(queue.popleft())\n                if l[i][0] == m[i][0]:\n                    flag = True\n                    break\n                (m[i][0], l[i][0]) = (l[i][0], m[i][0])\n            if flag:\n                break\n            for i in range(c):\n                count += 1\n                queue.append(l[i])\n            for i in range(len(m)):\n                count += 1\n                queue.append(m[i])\n        ans = [-1] * n\n        for i in queue:\n            count += 1\n            ans[i[2]] = i[0]\n        for i in ans:\n            print(i, end=' ')\n        print('')", "import sys\nraw_input = input\nget_ints = lambda : map(int, raw_input().split())\nget_arr = lambda : list(map(int, raw_input().split()))\nget_int = lambda : int(raw_input())\nget_str = lambda : raw_input()\nget_strs = lambda : raw_input().split()\nfrom copy import deepcopy\nfor _ in range(get_int()):\n    n = get_int()\n    A = get_arr()\n    d = {}\n    flag = False\n    for i in range(n):\n        if A[i] in d:\n            d[A[i]][0] += 1\n            d[A[i]][1] += [i]\n        else:\n            d[A[i]] = [1, [i]]\n        if d[A[i]][0] > n // 2:\n            flag = True\n            break\n    if flag:\n        print('No')\n    else:\n        print('Yes')\n        C = []\n        for i in d:\n            C.append([i, d[i]])\n        C = sorted(C, key=lambda x: -x[1][0])\n        B = []\n        for i in C:\n            for j in i[1][1]:\n                B.append([i[0], j])\n        (l, r) = (0, 1)\n        while r < n:\n            while r < n and B[l][0] == B[r][0]:\n                r += 1\n            if r < n:\n                (B[l][0], B[r][0]) = (B[r][0], B[l][0])\n                l += 1\n                r += 1\n        B = sorted(B, key=lambda x: x[1])\n        for i in B:\n            print(i[0], end=' ')\n        print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dic = dict()\n    for x in a:\n        if x in dic:\n            dic[x] += 1\n        else:\n            dic[x] = 1\n    maxi = max(dic.values())\n    if 2 * maxi <= n:\n        print('Yes')\n        indexed = []\n        for i in range(n):\n            indexed.append((a[i], i))\n        indexed.sort(key=lambda x: x[0])\n        final = []\n        for i in range(n):\n            if i + maxi > n - 1:\n                final.append((indexed[i + maxi - n][0], indexed[i][1]))\n            else:\n                final.append((indexed[i + maxi][0], indexed[i][1]))\n        new = [0] * n\n        for ele in final:\n            new[ele[1]] = ele[0]\n        for x in new:\n            print(x, end=' ')\n        print()\n    else:\n        print('No')", "for i in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = []\n    for i in range(0, n):\n        l2.append((l1[i], i))\n    l2.sort()\n    l1.sort()\n    d1 = {}\n    flag = 0\n    counts = []\n    c = 0\n    for i in range(0, n):\n        if i == 0:\n            c += 1\n            f = l1[0]\n        elif l1[i] == l1[i - 1]:\n            c += 1\n        else:\n            counts.append(c)\n            c = 1\n    counts.append(c)\n    shift = max(counts)\n    if shift > n // 2:\n        flag = 1\n    if flag == 0:\n        print('Yes')\n        ans = [0] * n\n        for i in range(0, n):\n            ans[l2[i][1]] = l2[i - shift][0]\n        print(' '.join((str(x) for x in ans)))\n    else:\n        print('No')"]