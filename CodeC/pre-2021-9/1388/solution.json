["from bisect import bisect\nfrom copy import copy\nfrom operator import itemgetter\nINF = 1000000000.0\n\ndef solve(n, aclr):\n    aclr.sort()\n    aclr.sort(key=itemgetter(1))\n    alrv = [(a * n - i, l * n - i, r * n - i) for (i, (a, _, l, r)) in enumerate(aclr)]\n    costs = [n + 1, 0]\n    qual = [0]\n    for (a, l, r) in alrv:\n        pl = bisect(qual, l)\n        if pl > 0:\n            qual = [l] + qual[pl:]\n            costs = [n + 1] + costs[pl:]\n        pa = bisect(qual, a)\n        if pa != 0:\n            if pa < len(qual):\n                qual[pa] = a\n            else:\n                qual.append(a)\n                costs.append(costs[-1] - 1)\n        pr = bisect(qual, r)\n        if pr < len(qual):\n            qual = qual[:pr]\n            costs = costs[:pr + 1]\n    res = min(costs) + n\n    if res > n:\n        return -1\n    else:\n        return res\nfor _ in range(int(input())):\n    n = int(input())\n    print(solve(n, [[int(a) for a in input().split()] for _ in range(n)]))", "from bisect import bisect\nfrom copy import copy\nfrom operator import itemgetter\nINF = 1000000000.0\n\ndef solve(n, aclr):\n    aclr.sort()\n    aclr.sort(key=itemgetter(1))\n    alrv = [(a * n - i, l * n - i, r * n - i) for (i, (a, _, l, r)) in enumerate(aclr)]\n    costs = [n + 1, 0]\n    qual = [0]\n    for (a, l, r) in alrv:\n        pl = bisect(qual, l)\n        if pl > 0:\n            qual = [l] + qual[pl:]\n            costs = [n + 1] + costs[pl:]\n        pa = bisect(qual, a)\n        if pa != 0:\n            if pa < len(qual):\n                qual[pa] = a\n            else:\n                qual.append(a)\n                costs.append(costs[-1] - 1)\n        pr = bisect(qual, r)\n        if pr < len(qual):\n            qual = qual[:pr]\n            costs = costs[:pr + 1]\n    res = min(costs) + n\n    if res > n:\n        return -1\n    else:\n        return res\nfor _ in range(int(input())):\n    n = int(input())\n    print(solve(n, [[int(a) for a in input().split()] for _ in range(n)]))", "from bisect import bisect\nfrom copy import copy\nfrom operator import itemgetter\nINF = 1000000000.0\n\ndef solve(n, aclr):\n    aclr.sort()\n    aclr.sort(key=itemgetter(1))\n    alrv = [(a * n - i, l * n - i, r * n - i) for (i, (a, _, l, r)) in enumerate(aclr)]\n    costs = [n + 1, 0]\n    qual = [0]\n    for (a, l, r) in alrv:\n        pl = bisect(qual, l)\n        if pl > 0:\n            qual = [l] + qual[pl:]\n            costs = [n + 1] + costs[pl:]\n        pa = bisect(qual, a)\n        if pa != 0:\n            if pa < len(qual):\n                qual[pa] = a\n            else:\n                qual.append(a)\n                costs.append(costs[-1] - 1)\n        pr = bisect(qual, r)\n        if pr < len(qual):\n            qual = qual[:pr]\n            costs = costs[:pr + 1]\n    res = min(costs) + n\n    if res > n:\n        return -1\n    else:\n        return res\nfor _ in range(int(input())):\n    n = int(input())\n    print(solve(n, [[int(a) for a in input().split()] for _ in range(n)]))", "from bisect import bisect\nfrom copy import copy\nfrom operator import itemgetter\nINF = 1000000000.0\n\ndef solve(n, aclr):\n    aclr.sort()\n    aclr.sort(key=itemgetter(1))\n    alrv = [(a * n - i, l * n - i, r * n - i) for (i, (a, _, l, r)) in enumerate(aclr)]\n    costs = [n + 1, 0]\n    qual = [0]\n    for (a, l, r) in alrv:\n        pl = bisect(qual, l)\n        if pl > 0:\n            qual = [l] + qual[pl:]\n            costs = [n + 1] + costs[pl:]\n        pa = bisect(qual, a)\n        if pa != 0:\n            if pa < len(qual):\n                qual[pa] = a\n            else:\n                qual.append(a)\n                costs.append(costs[-1] - 1)\n        pr = bisect(qual, r)\n        if pr < len(qual):\n            qual = qual[:pr]\n            costs = costs[:pr + 1]\n    res = min(costs) + n\n    if res > n:\n        return -1\n    else:\n        return res\nfor _ in range(int(input())):\n    n = int(input())\n    print(solve(n, [[int(a) for a in input().split()] for _ in range(n)]))", "from bisect import bisect\nfrom copy import copy\nfrom operator import itemgetter\nINF = 1000000000.0\n\ndef solve(n, aclr):\n    aclr.sort()\n    aclr.sort(key=itemgetter(1))\n    alrv = [(a * n - i, l * n - i, r * n - i) for (i, (a, _, l, r)) in enumerate(aclr)]\n    costs = [n + 1, 0]\n    qual = [0]\n    for (a, l, r) in alrv:\n        pl = bisect(qual, l)\n        if pl > 0:\n            qual = [l] + qual[pl:]\n            costs = [n + 1] + costs[pl:]\n        pa = bisect(qual, a)\n        if pa != 0:\n            if pa < len(qual):\n                qual[pa] = a\n            else:\n                qual.append(a)\n                costs.append(costs[-1] - 1)\n        pr = bisect(qual, r)\n        if pr < len(qual):\n            qual = qual[:pr]\n            costs = costs[:pr + 1]\n    res = min(costs) + n\n    if res > n:\n        return -1\n    else:\n        return res\nfor _ in range(int(input())):\n    n = int(input())\n    print(solve(n, [[int(a) for a in input().split()] for _ in range(n)]))", "from bisect import bisect\nfrom copy import copy\nfrom operator import itemgetter\nINF = 1000000000.0\n\ndef solve(n, aclr):\n    aclr.sort()\n    aclr.sort(key=itemgetter(1))\n    alrv = [(a * n - i, l * n - i, r * n - i) for (i, (a, _, l, r)) in enumerate(aclr)]\n    costs = [n + 1, 0]\n    qual = [0]\n    for (a, l, r) in alrv:\n        pl = bisect(qual, l)\n        if pl > 0:\n            qual = [l] + qual[pl:]\n            costs = [n + 1] + costs[pl:]\n        pa = bisect(qual, a)\n        if pa != 0:\n            if pa < len(qual):\n                qual[pa] = a\n            else:\n                qual.append(a)\n                costs.append(costs[-1] - 1)\n        pr = bisect(qual, r)\n        if pr < len(qual):\n            qual = qual[:pr]\n            costs = costs[:pr + 1]\n    res = min(costs) + n\n    return -1 if res > n else res\nfor _ in range(int(input())):\n    n = int(input())\n    print(solve(n, [[int(a) for a in input().split()] for _ in range(n)]))", "from bisect import bisect\nfrom copy import copy\nfrom operator import itemgetter\nINF = 1000000000.0\n\ndef solve(n, aclr):\n    aclr.sort()\n    aclr.sort(key=itemgetter(1))\n    alrv = [(a * n - i, l * n - i, r * n - i) for (i, (a, _, l, r)) in enumerate(aclr)]\n    costs = [n + 1, 0]\n    qual = [0]\n    for (a, l, r) in alrv:\n        pl = bisect(qual, l)\n        if pl > 0:\n            qual = [l] + qual[pl:]\n            costs = [n + 1] + costs[pl:]\n        pa = bisect(qual, a)\n        if pa != 0:\n            if pa < len(qual):\n                qual[pa] = a\n            else:\n                qual.append(a)\n                costs.append(costs[-1] - 1)\n        pr = bisect(qual, r)\n        if pr < len(qual):\n            qual = qual[:pr]\n            costs = costs[:pr + 1]\n    res = min(costs) + n\n    if res > n:\n        return -1\n    else:\n        return res\nfor _ in range(int(input())):\n    n = int(input())\n    print(solve(n, [[int(a) for a in input().split()] for _ in range(n)]))"]