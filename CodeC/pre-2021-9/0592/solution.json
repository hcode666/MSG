["from typing import List\n\ndef soln(x: int, arr: List[int]) -> int:\n    negs = [-1 * i for i in arr if i < 0]\n    if not negs:\n        return 0\n    if x <= 1:\n        return x * min(negs)\n    negs.sort()\n    minm = op1 = sum(negs)\n    n = len(negs)\n    diff = 0\n    for i in negs:\n        op1 -= (i - diff) * n\n        n -= 1\n        diff += i - diff\n        minm = min(minm, op1 + diff * x)\n    return minm\nn = int(input())\narr = list(map(int, input().split()))\nx = int(input())\nprint(soln(x, arr))", "from typing import List\n\ndef soln(x: int, arr: List[int]) -> int:\n    negs = [-1 * i for i in arr if i < 0]\n    if not negs:\n        return 0\n    if x <= 1:\n        return x * min(negs)\n    negs.sort()\n    minm = op1 = sum(negs)\n    n = len(negs)\n    diff = 0\n    for i in negs:\n        op1 -= (i - diff) * n\n        n -= 1\n        diff += i - diff\n        minm = min(minm, op1 + diff * x)\n    return minm\nn = int(input())\narr = list(map(int, input().split()))\nx = int(input())\nprint(soln(x, arr))", "from typing import List\n\ndef soln(x: int, arr: List[int]) -> int:\n    negs = [-1 * i for i in arr if i < 0]\n    if not negs:\n        return 0\n    if x <= 1:\n        return x * min(negs)\n    negs.sort()\n    minm = op1 = sum(negs)\n    n = len(negs)\n    mul = cur = diff = 0\n    for i in negs:\n        op1 -= (i - diff) * n\n        n -= 1\n        cur = i - diff\n        diff += cur\n        minm = min(minm, op1 + diff * x)\n    return minm\nn = int(input())\narr = list(map(int, input().split()))\nx = int(input())\nprint(soln(x, arr))", "n = int(input())\na = list(map(int, input().split()))\nx = int(input())\nlst = []\nfor i in a:\n    if i < 0:\n        lst.append(i)\nlst.sort()\nif -sum(lst) < x:\n    print(-sum(lst))\nelse:\n    print(-sum(lst[:x]))", "n = int(input())\na = list(map(int, input().split()))\nx = int(input())\nlst = []\nfor i in a:\n    if i < 0:\n        lst.append(i)\nlst.sort()\nif -sum(lst) < x:\n    print(-sum(lst))\nelse:\n    print(-sum(lst[:x]))", "import bisect\n\ndef solve(n, arr, x):\n    if x == 0:\n        return 0\n    num_negative = 0\n    negative_sorted = []\n    sum_negative = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            sum_negative += arr[i]\n            bisect.insort(negative_sorted, arr[i])\n    if x >= len(negative_sorted):\n        return -1 * sum_negative\n    z = len(negative_sorted) - x\n    sum_negative -= negative_sorted[z] * x\n    sum_negative += negative_sorted[z] * x\n    for i in range(0, z):\n        sum_negative -= negative_sorted[-i - 1]\n    return -1 * sum_negative\nN = input()\nArr = list(map(int, input().split()))\nX = int(input())\nprint(solve(N, Arr, X))", "import math\nn = int(input())\na = list(map(int, input().split()))\nx = int(input())\nlst = []\nfor i in a:\n    if i < 0:\n        lst.append(i)\nlst.sort()\nif -sum(lst) < x:\n    print(-sum(lst))\nelse:\n    print(-sum(lst[:x]))", "import math\nn = int(input())\na = list(map(int, input().split()))\nx = int(input())\nlst = []\nfor i in a:\n    if i < 0:\n        lst.append(i)\nlst.sort()\nif -sum(lst) < x:\n    print(-sum(lst))\nelse:\n    print(-sum(lst[:x]))", "n = int(input())\nl = map(int, input().split())\nx = int(input())\nl = [i for i in l if i < 0]\nl.sort()\nprint(-sum(l) if -sum(l) <= x else -sum(l[:x]))", "n = int(input())\nl = map(int, input().split())\nx = int(input())\nl = [i for i in l if i < 0]\nl.sort()\nprint(-sum(l) if -sum(l) <= x else -sum(l[:x]))", "import math\nn = int(input())\na = list(map(int, input().split()))\nx = int(input())\nlst = []\nfor i in a:\n    if i < 0:\n        lst.append(i)\nlst.sort()\nif -sum(lst) < x:\n    print(-sum(lst))\nelse:\n    print(-sum(lst[:x]))", "n = int(input())\nl = map(int, input().split())\nx = int(input())\nl = [i for i in l if i < 0]\nl.sort()\nprint(-sum(l) if -sum(l) <= x else -sum(l[:x]))", "n = int(input())\nl = map(int, input().split())\nx = int(input())\nl = [i for i in l if i < 0]\nl.sort()\nprint(-sum(l) if -sum(l) <= x else -sum(l[:x]))", "n = int(input())\nlis = map(int, input().split())\nx = int(input())\nlis = [i for i in lis if i < 0]\nlis.sort()\nif -sum(lis) <= x:\n    print(-sum(lis))\nelse:\n    print(-sum(lis[:x]))", "n = int(input())\nlis = map(int, input().split())\nx = int(input())\nlis = [i for i in lis if i < 0]\nlis.sort()\nif -sum(lis) <= x:\n    print(-sum(lis))\nelse:\n    print(-sum(lis[:x]))", "n = int(input())\nlis = map(int, input().split())\nx = int(input())\nlis = [i for i in lis if i < 0]\nlis.sort()\nif -sum(lis) <= x:\n    print(-sum(lis))\nelse:\n    print(-sum(lis[:x]))", "n = int(input())\nlist1 = list(map(int, input().split()))\nk = int(input())\nsumm = 0\ncount = 0\nlist2 = []\nfor i in list1:\n    if i < 0:\n        count += 1\n        summ += i\n        list2.append(i)\nlist2 = sorted(list2, reverse=True)\nif k > 1:\n    if k < count:\n        l = count - k\n        m = list2[l - 1]\n        print(abs(sum(list2[l:])))\n    else:\n        print(abs(summ))\nelse:\n    print(abs(list2[count - 1]) * k)", "n = int(input())\nlist_int = [int(i) for i in input().split()]\nx = int(input())\n\ndef Negative(List):\n    return [num for num in List if num < 0]\nl = Negative(list_int)\nl.sort()\nlist_sum = sum(l)\nif x == 0:\n    print(0)\nelif x == 1:\n    print(-l[0])\nelif x < len(l):\n    cost = -sum(l[:x])\n    print(cost)\nelse:\n    cost = -list_sum\n    print(cost)", "n = int(input())\nlist_int = [int(i) for i in input().split()]\nx = int(input())\n\ndef Negative(List):\n    return [num for num in List if num < 0]\nl = Negative(list_int)\nl.sort()\nlist_sum = sum(l)\nif x == 0:\n    print(0)\nelif x == 1:\n    print(-l[0])\nelif x < len(l):\n    cost = -sum(l[:x])\n    print(cost)\nelse:\n    cost = -list_sum\n    print(cost)", "n = int(input())\nlist_int = [int(i) for i in input().split()]\nx = int(input())\n\ndef Negative(List):\n    return [num for num in List if num < 0]\nl = Negative(list_int)\nl.sort()\nlist_sum = sum(l)\nif x == 0:\n    print(0)\nelif x == 1:\n    print(-l[0])\nelif x < len(l):\n    cost = -sum(l[:x])\n    print(cost)\nelse:\n    cost = -list_sum\n    print(cost)", "n = int(input())\nlist_int = [int(i) for i in input().split()]\nx = int(input())\n\ndef Negative(List):\n    return [num for num in List if num < 0]\nl = Negative(list_int)\nl.sort()\nlist_sum = sum(l)\nif x == 0:\n    print(0)\nelif x == 1:\n    print(-l[0])\nelif x < len(l):\n    cost = -sum(l[:x])\n    print(cost)\nelse:\n    cost = -list_sum\n    print(cost)", "n = int(input())\nlis = map(int, input().split())\nx = int(input())\nlis = [i for i in lis if i < 0]\nlis.sort()\nif -sum(lis) <= x:\n    print(-sum(lis))\nelse:\n    print(-sum(lis[:x]))", "n = int(input())\nlist_int = [int(i) for i in input().split()]\nx = int(input())\n\ndef Negative(List):\n    return [num for num in List if num < 0]\nl = Negative(list_int)\nl.sort()\nlist_sum = sum(l)\nif x == 0:\n    print(0)\nelif x == 1:\n    print(-l[0])\nelif x < len(l):\n    cost = -sum(l[:x])\n    print(cost)\nelse:\n    cost = -list_sum\n    print(cost)", "n = int(input())\nlis = map(int, input().split())\nx = int(input())\nlis = [i for i in lis if i < 0]\nlis.sort()\nif -sum(lis) <= x:\n    print(-sum(lis))\nelse:\n    print(-sum(lis[:x]))", "n = int(input())\nlis = map(int, input().split())\nx = int(input())\nlis = [i for i in lis if i < 0]\nlis.sort()\nif -sum(lis) <= x:\n    print(-sum(lis))\nelse:\n    print(-sum(lis[:x]))", "n = int(input())\narr = list(map(int, input().split()))\nx = int(input())\nflag = 0\nfor i in range(len(arr)):\n    if arr[i] < 0:\n        arr[flag] = arr[i]\n        flag += 1\ndel arr[flag:]\narr.sort(reverse=False)\nif len(arr) > 0:\n    print(-sum(arr[:x]))\nelse:\n    print(0)", "import numpy as np\nn = int(input())\nl1 = list(map(int, input().split()))\nx = int(input())\nl1 = np.array(l1)\nl1.sort()\nl1 = l1[l1 < 0]\nans = 0\nwhile len(l1) > 0:\n    if len(l1) >= x:\n        ans += x * -l1[-1]\n        l1 += -l1[-1]\n        l1 = l1[l1 < 0]\n    else:\n        ans += -sum(l1)\n        break\nprint(ans)", "n = int(input())\narr = list(map(int, input().split()))\nx = int(input())\nflag = 0\nfor i in range(len(arr)):\n    if arr[i] < 0:\n        arr[flag] = arr[i]\n        flag += 1\ndel arr[flag:]\narr.sort(reverse=False)\nif len(arr) > 0:\n    if -sum(arr) < 0:\n        print(sum(arr))\n    else:\n        print(-sum(arr[:x]))\nelse:\n    print(0)", "n = int(input())\na = list(map(int, input().split()))\nx = int(input())\nl = []\nfor i in a:\n    if i < 0:\n        l.append(-i)\nl.sort()\nm = len(l)\nans = 0\nif l:\n    if x > n:\n        ans = sum(l)\n    else:\n        ans = sum(l[m - x:])\nprint(ans)", "n = int(input())\nk = n + 1\ntotal = 0\na = list(map(int, input().split()))\nx = int(input())\na.sort(reverse=True)\nfor i in range(n):\n    if a[i] < 0:\n        k = i\n        break\na = a[k:]\nif a:\n    n = len(a)\n    if x > n:\n        total -= sum(a)\n    else:\n        total -= sum(a[n - x:])\nprint(total)", "n = int(input())\nk = n + 1\ntotal = 0\na = list(map(int, input().split()))\nx = int(input())\na.sort(reverse=True)\nfor i in range(n):\n    if a[i] < 0:\n        k = i\n        break\na = a[k:]\nif a:\n    n = len(a)\n    if x > n:\n        total -= sum(a)\n    else:\n        total -= sum(a[n - x:])\nprint(total)", "n = int(input())\na = list(map(int, input().split(' ')))\nx = int(input())\na.sort()\nans = 0\nif x == 0:\n    ans = 0\nelif x < n:\n    op1 = max(0, -a[x - 1])\n    ans += op1 * x\n    for i in range(x - 1):\n        ans += max(0, -(a[i] + op1))\nelse:\n    for i in range(n):\n        if a[i] < 0:\n            ans += -a[i]\nprint(ans)", "n = int(input())\na = [int(i) for i in input().split(' ')]\nx = int(input())\na.sort(reverse=True)\nfinal = 0\nif x == 0 or a[n - 1] >= 0:\n    print(0)\nelif x < n and a[n - x - 1] < 0:\n    p = abs(a[n - x - 1])\n    final = p * x\n    for i in range(n - x, n):\n        final += abs(a[i]) - p\n    print(final)\nelse:\n    for i in a:\n        if i < 0:\n            final += abs(i)\n    print(final)", "from sys import stdin\n\ndef solve():\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    x = int(stdin.readline())\n    a.sort()\n    ans = 0\n    if x == 0:\n        ans = 0\n    elif x < n:\n        op1 = max(0, -a[x - 1])\n        ans += op1 * x\n        for i in range(x - 1):\n            ans += max(0, -(a[i] + op1))\n    else:\n        for i in range(n):\n            if a[i] < 0:\n                ans += -a[i]\n    print(ans)\nsolve()", "n = int(input())\na = list(map(int, input().split()))\nx = int(input())\nl1 = [i for i in a if i < 0]\nl1.sort()\nl1.reverse()\nif len(l1) > x and x > 0:\n    i = len(l1) - x\n    l2 = l1[0:i]\n    l1 = l1[i:]\n    cnt1 = abs(sum(l2)) * x - abs(sum(l2[0:i - 1]) * x)\n    cnt2 = abs(sum(l1)) - cnt1 // x * len(l1)\n    cnt = cnt1 + cnt2\n    print(cnt)\nelif x == 0:\n    print(0)\nelse:\n    print(abs(sum(l1)))", "n = int(input())\narr = list(map(int, input().split()))\nx = int(input())\nl = []\nfor i in arr:\n    if i < 0:\n        l.append(i)\nl.sort(reverse=True)\ns = 0\ninc = 0\nz = len(l)\nfor i in range(len(l)):\n    if x <= z:\n        l[i] += inc\n        s += abs(l[i]) * x\n        inc += abs(l[i])\n        z -= 1\n    else:\n        l[i] += inc\n        s += abs(l[i])\nprint(s)", "n = int(input())\nl = [int(i) for i in input().split()]\nx = int(input())\nl.sort()\nif l[0] >= 0:\n    print(0)\nelse:\n    cnt = 0\n    cost = 0\n    for i in l:\n        if i < 0:\n            cnt += 1\n        else:\n            break\n    l = l[0:cnt]\n    if x >= len(l):\n        print(sum(l) * -1)\n    else:\n        k = min(l[x:len(l)])\n        cost += -1 * k * x\n        tmp = l[0:x]\n        tmp = [i - k for i in tmp]\n        for i in tmp:\n            cost += max(0, -1 * i)\n        print(cost)", "n = int(input())\nl = [int(i) for i in input().split()]\nx = int(input())\nl.sort()\nif l[0] >= 0:\n    print(0)\nelse:\n    cnt = 0\n    cost = 0\n    for i in l:\n        if i < 0:\n            cnt += 1\n        else:\n            break\n    l = l[0:cnt]\n    if x >= len(l):\n        print(sum(l) * -1)\n    else:\n        k = min(l[x:len(l)])\n        cost += -1 * k * x\n        tmp = l[0:x]\n        tmp = [i - k for i in tmp]\n        for i in tmp:\n            cost += max(0, -1 * i)\n        print(cost)", "n = int(input())\nl = [int(i) for i in input().split()]\nx = int(input())\nl.sort()\nif l[0] >= 0:\n    print(0)\nelse:\n    cnt = 0\n    cost = 0\n    for i in l:\n        if i < 0:\n            cnt += 1\n        else:\n            break\n    l = l[0:cnt]\n    if x >= len(l):\n        print(sum(l) * -1)\n    else:\n        k = min(l[x:len(l)])\n        cost += -1 * k * x\n        tmp = l[0:x]\n        tmp = [i - k for i in tmp]\n        for i in tmp:\n            cost += max(0, -1 * i)\n        print(cost)", "n = int(input())\nl = list(map(int, input().split()))\nx = int(input())\nk = []\nfor i in l:\n    if i < 0:\n        k.append(i)\nc = len(k)\nans = 0\nif c >= x:\n    if x == 0:\n        print(0)\n    else:\n        k.sort()\n        m = k[x - 1]\n        ans += -1 * m * x\n        for j in range(len(k)):\n            k[j] += -1 * m\n        for j in k:\n            if j < 0:\n                ans += -1 * j\n        print(ans)\nelse:\n    ans += -1 * sum(k)\n    print(ans)", "n = int(input())\narr = list(map(int, input().split()))\nx = int(input())\nl = []\nfor i in arr:\n    if i < 0:\n        l.append(i)\nl.sort(reverse=True)\ns = 0\ninc = 0\nz = len(l)\nfor i in range(len(l)):\n    if x <= z:\n        l[i] += inc\n        s += abs(l[i]) * x\n        inc += abs(l[i])\n        z -= 1\n    else:\n        l[i] += inc\n        s += abs(l[i])\nprint(s)", "n = int(input())\na = [int(x) for x in input().split()]\nx = int(input())\nl = []\nc = 0\nfor i in range(n):\n    if a[i] < 0:\n        l.append(-a[i])\nl.sort()\nll = len(l)\nnum = ll - x\nans = 0\nfor i in range(len(l)):\n    l[i] = c - l[i]\n    if ll > x:\n        ans += abs(l[i] * x)\n        c += abs(l[i])\n    else:\n        ans += abs(l[i] * ll)\n        c += abs(l[i])\n    ll -= 1\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\nx = int(input())\nl1 = [i for i in a if i < 0]\nl1.sort()\nl1.reverse()\nif len(l1) > x and x > 0:\n    i = len(l1) - x\n    l2 = l1[0:i]\n    l1 = l1[i:]\n    cnt1 = abs(sum(l2)) * x - abs(sum(l2[0:i - 1]) * x)\n    cnt2 = abs(sum(l1)) - cnt1 // x * len(l1)\n    cnt = cnt1 + cnt2\n    print(cnt)\nelif x == 0:\n    print(0)\nelse:\n    print(abs(sum(l1)))", "def pos(lst):\n    return [x for x in lst if x < 0]\nN = int(input())\nList1 = [int(x) for x in input().split()]\nX = int(input())\nSum = 0\nList = pos(List1)\nList.sort()\nif len(List) > X:\n    Sum += -1 * List[X] * X\n    for i in range(X):\n        Sum += -1 * List[i] + List[X]\nelse:\n    Sum += -1 * sum(List)\nprint(Sum)", "n = int(input())\nl = list(map(int, input().split()))\nx = int(input())\ncount = 0\nk = []\nfor i in range(n):\n    if l[i] < 0:\n        count += 1\n        k.append(l[i])\ny = count\nk.sort()\nz = y - x\nk.reverse()\nsum = 0\nh = 0\nfor i in range(len(k)):\n    k[i] += h\n    if y > x:\n        sum += abs(k[i] * x)\n        h += abs(k[i])\n    else:\n        sum += abs(k[i] * y)\n        h += abs(k[i])\n    y -= 1\nprint(sum)", "n = int(input())\nlist_int = [int(i) for i in input().split()]\nx = int(input())\n\ndef Negative(List):\n    return [num for num in List if num < 0]\nl = Negative(list_int)\nl.sort()\nlist_sum = sum(l)\nif x == 0:\n    print(0)\nelif x == 1:\n    print(-l[0])\nelif x < len(l):\n    cost = -sum(l[:x])\n    print(cost)\nelse:\n    cost = -list_sum\n    print(cost)", "n = int(input())\nlist_int = [int(i) for i in input().split()]\nx = int(input())\n\ndef Negative(List):\n    return [num for num in List if num < 0]\nl = Negative(list_int)\nl.sort()\nlist_sum = sum(l)\nif x == 0:\n    print(0)\nelif x == 1:\n    print(-l[0])\nelif x < len(l):\n    cost = 0\n    cost1 = -l[x] * x\n    cost2 = -(sum(l[:x]) + cost1)\n    cost = cost1 + cost2\n    print(cost)\nelse:\n    cost = -list_sum\n    print(cost)", "n = int(input())\nl = [int(i) for i in input().split()]\nx = int(input())\nl1 = sorted([i for i in l if i < 0])\nk = sum((i < 0 for i in l))\nif k <= x:\n    print(-sum((i for i in l if i < 0)))\nelse:\n    elem = -l1[x - 1]\n    ans = elem * x\n    for i in range(x - 1):\n        ans += abs(l1[i]) - elem\n    print(ans)", "n = int(input())\na = [int(i) for i in input().split() if int(i) < 0]\nx = int(input())\na.sort(reverse=True)\nna = len(a)\nif x == 0:\n    print(0)\nelif x <= na:\n    c = na - x\n    print(-a[c] * x + sum([a[c] - i for i in a[c + 1:]]))\nelse:\n    print(-sum(a))", "N = int(input())\nA = list(filter(lambda x: x < 0, map(int, input().split())))\nX = int(input())\ncoins = 0\nif len(A) <= X:\n    coins += abs(sum(A))\nelse:\n    A.sort(reverse=True)\n    coins = abs(sum(A[len(A) - X:]))\nprint(coins)", "n = int(input())\na = list(map(int, input().split()))\nx = int(input())\nc = 0\ns = 0\nans = 0\nb = []\nfor i in range(n):\n    if a[i] < 0:\n        c += 1\n        s += a[i]\n        b.append(abs(a[i]))\nif c <= x:\n    print(abs(s))\nelse:\n    b.sort()\n    for i in range(0, x):\n        ans += b[len(b) - 1 - i]\n    print(ans)", "n = int(input())\na = list(map(int, input().split()))\nx = int(input())\nif min(a) >= 0:\n    print(0)\nelse:\n    temp = []\n    for i in a:\n        if i < 0:\n            temp.append(i)\n    l = len(temp)\n    temp.sort(reverse=True)\n    ops = 0\n    rem = l\n    i = 0\n    while i < l and rem > x:\n        if ops >= abs(temp[i]):\n            rem -= 1\n            i += 1\n            continue\n        else:\n            opsneed = abs(temp[i]) - ops\n            ops += opsneed\n            rem -= 1\n            i += 1\n            continue\n    ans = ops * x\n    i = l - rem\n    while i < l:\n        ans += abs(temp[i]) - ops\n        i += 1\n    print(ans)", "n = int(input())\na = list(map(int, input().strip().split(' ')))\nx = int(input())\nc = []\nnumberofnegative = 0\nfor i in a:\n    if i < 0:\n        numberofnegative += 1\n        c.append(i)\nt = len(c)\nif numberofnegative < x:\n    s = sum(c[:])\n    print(-1 * s)\nelse:\n    c.sort()\n    s = sum(c[:x])\n    print(-1 * s)", "n = int(input())\nL = list(map(int, input().split()))\nx = int(input())\nA = []\nfor i in L:\n    if i < 0:\n        A.append(abs(i))\nif len(A) <= x:\n    ans = sum(A)\n    print(ans)\nelif x == 0:\n    print(0)\nelse:\n    A.sort()\n    a = A[len(A) - x]\n    ans = a * x\n    for i in range(len(A) - x + 1, len(A)):\n        ans += A[i] - a\n    print(ans)", "n = int(input())\narr = list(map(int, input().split()))\nx = int(input())\narr.sort()\nsumi = 0\nif x == 0:\n    print(0)\nelif x > n:\n    for i in range(n):\n        if arr[i] < 0:\n            sumi += arr[i]\n        else:\n            break\n    print(abs(sumi))\nelif arr[x - 1] < 0:\n    print(abs(sum(arr[:x])))\nelse:\n    for i in range(n):\n        if arr[i] < 0:\n            sumi += arr[i]\n        else:\n            break\n    print(abs(sumi))", "T = int(input())\nA = map(lambda a: -int(a), input().split())\nA = list(filter(lambda a: a > 0, A))\nA.sort()\nX = int(input())\nminimal_cost = 0\nif X == 0:\n    pass\nelif X <= len(A):\n    minimal_cost = A[len(A) - X] * X\n    for i in range(len(A) - X + 1, len(A)):\n        minimal_cost += A[i] - A[len(A) - X]\nelse:\n    for i in range(0, len(A)):\n        minimal_cost += A[i]\nprint(minimal_cost)", "__author__ = 'TheCodeBuster'\nn = int(input())\na = input().split()\nx = int(input())\na = list(map(int, a))\nb = []\ntotalcost = 0\nfor each in a:\n    if each < 0:\n        b.append(each)\nb = sorted(b)\nif len(b) >= x:\n    totalcost = b[x] * x\n    d = b[0:x]\n    d = list(map(lambda w: w - b[x], d))\nelse:\n    d = b[0:]\nfor j in d:\n    totalcost = totalcost + j\ntotalcost = abs(totalcost)\nprint(totalcost)", "n = int(input())\na = list(map(int, input().split()))\nx = int(input())\nb = [x for x in a if x < 0]\n(j, minimum) = (len(b), 0)\nb.sort(reverse=True)\nif x == 0:\n    minimum = 0\nelif x >= j:\n    minimum = -sum(b)\nelse:\n    k = j - x\n    minimum = b[k] * (j - 1 - k - x) - sum(b[k + 1:])\nprint(minimum)", "import sys\nw = int(input())\nnum = list(map(int, sys.stdin.readline().split()))\nn = int(input())\nnum.sort()\nadd = 0\ncoin1 = 0\ncoin = 0\nfor i in range(w):\n    if num[i] < 0:\n        coin1 += num[i]\n        add += 1\nif add <= n:\n    print(abs(coin1))\nelse:\n    coin = abs(num[n - 1]) * n\n    for i in range(n - 1):\n        coin += abs(num[i]) - abs(num[n - 1])\n    print(coin)", "import sys\nf = sys.stdin\nN = int(f.readline())\nA = list(map(int, f.readline().split()))\nX = int(f.readline())\nAA = []\nfor item in A:\n    if item < 0:\n        AA.append(-1 * item)\nL = len(AA)\nif L == 0 or X == 0:\n    print(0)\nelse:\n    AA.sort()\n    i = L - X\n    ans = sum(AA[i:i + X])\n    print(ans)", "import sys\nn = int(sys.stdin.readline())\naa = [int(a) for a in sys.stdin.readline().split()]\nx = int(sys.stdin.readline())\naa.extend((0, 1))\naa.sort()\nrest = 0\nkx = -aa[0]\nj = 0\ncost = []\nwhile kx >= 0:\n    cost.append(kx * x + rest)\n    j += 1\n    rest += j * (kx + aa[j])\n    kx = -aa[j]\nprint(min(cost) if cost else 0)", "n = int(input())\nnumber = input()\nx = int(input())\nnumber = number.split(' ')\nnum = []\nfor i in range(0, n):\n    temp = int(number[i])\n    if temp < 0:\n        num.append(temp)\nnum.sort()\nn = len(num)\nmin_cost = 0\ncost = 0\nfor i in range(0, n):\n    if i == 0:\n        min_cost = abs(num[i]) * x\n    else:\n        cost = abs(num[i]) * x + abs(num[i - 1] - num[i] * i)\n        if cost < min_cost:\n            min_cost = cost\n        num[i] = num[i - 1] + num[i]\nif abs(num[n - 1]) < min_cost:\n    min_cost = abs(num[n - 1])\nprint(min_cost)", "input()\nnumbers = sorted([-int(x) for x in input().split() if int(x) < 0])\nflash_cost = int(input())\nflash_count = numbers[len(numbers) - flash_cost - 1] if flash_cost <= len(numbers) else 0\nprint(flash_count * flash_cost + sum([x - flash_count for x in numbers if x - flash_count > 0]))", "nums = int(input())\nnumbers = input().split(' ')\nnumbers = [int(x) for x in numbers]\nx = int(input())\nnumbers.append(0)\nnumbers = sorted(numbers)\ninc = 0\ncost = 0\nnegative_nums = 0\nmax_negative = 0\nfor n in numbers:\n    if n + inc < 0:\n        negative_nums += 1\n        max_negative = n + inc\nwhile negative_nums > x:\n    cost += x * abs(numbers[x - 1])\n    inc += abs(numbers[x - 1])\n    negative_nums = 0\n    max_negative = 0\n    for n in numbers:\n        if n + inc < 0:\n            negative_nums += 1\n            max_negative = n + inc\nif negative_nums <= x:\n    for n in numbers:\n        if n + inc < 0:\n            cost += (n + inc) * -1\nprint(cost)", "import sys\nimport heapq\n\ndef main():\n    from sys import stdin, stdout\n    f = stdin.readline().strip()\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    n = heapq.nsmallest(int(t), [int(x) for x in s.split(' ') if int(x) < 0])\n    if len(n) > int(t):\n        heapq.heapify(n)\n        r = heapq.heappop(n) * -1\n        stdout.write(str(int(t) * r + sum([x + r for x in n]) * -1) + '\\n')\n    else:\n        stdout.write(str(sum(n) * -1) + '\\n')\n    return 0\nmain()", "N = int(input())\nA = list(map(int, input().split()))\nX = int(input())\nNeg = [_ for _ in A if _ < 0]\nNeg.sort(reverse=True)\nneg_len = len(Neg)\nnegative_tot = abs(sum(Neg))\nx_count = 0\nmax_neg = abs(min(Neg))\nif X == 0:\n    print(0)\nelif len(Neg) <= X:\n    print(negative_tot)\nelse:\n    x_count = abs(Neg[-X - 1])\n    rem = abs(sum(Neg[-X:])) - x_count * X\n    print(x_count * X + rem)", "import sys\nimport math\n\ndef f(x):\n    if x >= 0:\n        return 10 ** 10\n    return math.fabs(x)\nN = int(sys.stdin.readline())\nL = list(map(int, sys.stdin.readline().split()))\nX = int(sys.stdin.readline())\nL.sort(key=f)\nj = N\ns = 0\nSums = []\nfor i in range(N):\n    if L[i] >= 0:\n        j = i\n        break\n    s += math.fabs(L[i])\n    Sums.append(s)\nif X == 0:\n    print(0)\nelse:\n    c = j - X + 1\n    ans = 0\n    if c > 0:\n        ans += math.fabs(L[c - 1]) * X\n        ans += s - Sums[c - 1] - math.fabs(L[c - 1]) * (j - c)\n    else:\n        ans += s\n    sys.stdout.write(str(int(ans)))"]