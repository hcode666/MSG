["s = int(input())\nfor i in range(s):\n    n = int(input())\n    m = dict()\n    for i in range(n):\n        sum = input().split()\n        if int(sum[1]) in m:\n            m[int(sum[1])].append(sum[0])\n        else:\n            m[int(sum[1])] = [sum[0]]\n    l = sorted(m.keys())\n    s1 = 'Nobody wins.'\n    for i in l:\n        if len(m[i]) == 1:\n            s1 = m[i][0]\n            break\n    print(s1)", "for _ in range(int(input())):\n    dic = {}\n    for i in range(int(input())):\n        (s, i) = input().split()\n        e = int(i)\n        if dic.get(e) == None:\n            dic[e] = ['', 0]\n        dic[e][0] = s\n        dic[e][1] += 1\n    q = 'Nobody wins.'\n    mi = 10 ** 10\n    for i in dic:\n        if dic[i][1] == 1:\n            if i < mi:\n                mi = i\n                q = dic[i][0]\n    print(q)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = []\n    d = {}\n    while n:\n        n -= 1\n        l = input().split()\n        v = int(l[1])\n        if d.get(v) == None:\n            d[v] = ['', 0]\n        d[v][0] = l[0]\n        d[v][1] += 1\n    mini = float('inf')\n    s = 'Nobody wins.'\n    for i in d:\n        if d[i][1] == 1:\n            if mini > i:\n                mini = i\n                s = d[i][0]\n    print(s)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    d = dict()\n    for i in range(n):\n        s = input().split()\n        if int(s[1]) in d:\n            d[int(s[1])].append(s[0])\n        else:\n            d[int(s[1])] = [s[0]]\n    l = sorted(d.keys())\n    ans = 'Nobody wins.'\n    for i in l:\n        if len(d[i]) == 1:\n            ans = d[i][0]\n            break\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    d = dict()\n    for i in range(n):\n        s = input().split()\n        if int(s[1]) in d:\n            d[int(s[1])].append(s[0])\n        else:\n            d[int(s[1])] = [s[0]]\n    l = sorted(d.keys())\n    ans = 'Nobody wins.'\n    for i in l:\n        if len(d[i]) == 1:\n            ans = d[i][0]\n            break\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    players = {}\n    for i in range(n):\n        (name, number) = input().split()\n        number = int(number)\n        if number in players:\n            players[number].append(name)\n        else:\n            players[number] = [name]\n    smallest_unique = float('inf')\n    for number in players:\n        if len(players[number]) == 1 and number < smallest_unique:\n            smallest_unique = number\n    if smallest_unique == float('inf'):\n        print('Nobody wins.')\n    else:\n        print(players[smallest_unique][0])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    players = {}\n    for i in range(n):\n        (name, number) = input().split()\n        number = int(number)\n        if number in players:\n            players[number].append(name)\n        else:\n            players[number] = [name]\n    smallest_unique = float('inf')\n    for number in players:\n        if len(players[number]) == 1 and number < smallest_unique:\n            smallest_unique = number\n    if smallest_unique == float('inf'):\n        print('Nobody wins.')\n    else:\n        print(players[smallest_unique][0])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    d = {}\n    c = 0\n    for j in range(n):\n        (a, b) = input().split()\n        b = int(b)\n        if b not in d.keys():\n            d[b] = a\n        else:\n            d[b] = ''\n    for k in sorted(d.keys()):\n        if d[k] != '':\n            print(d[k])\n            c += 1\n            break\n    if c == 0:\n        print('Nobody wins.')", "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    players = dict()\n    for i in range(n):\n        inputTmp = input().split(' ')\n        name = inputTmp[0]\n        num = int(inputTmp[1])\n        if num not in players:\n            players[num] = name\n        else:\n            players[num] = 0\n    winner = False\n    for num in sorted(players.keys()):\n        if players[num] != 0:\n            print(players[num])\n            winner = True\n            break\n    if not winner:\n        print('Nobody wins.')", "import math\nalf = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\n\ndef createDic(nums):\n    dic = dict()\n    for i in nums:\n        if not i in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    return dic\n\ndef subarray_sum_max(nums):\n    array = []\n    suma_parcial = 0\n    max_sum = 0\n    index = 0\n    se_refresco = True\n    for i in range(len(nums)):\n        suma_parcial += nums[i]\n        if max_sum < suma_parcial:\n            if se_refresco:\n                array = []\n                se_refresco = False\n                index = i\n            max_sum = suma_parcial\n        if suma_parcial < 0:\n            suma_parcial = 0\n            se_refresco = True\n        elif not se_refresco:\n            array.append(nums[i])\n    return (array, index, max_sum)\n\ndef particiones(nums, index, array):\n    if index == len(nums):\n        count = 0\n    else:\n        for i in array:\n            i.append(nums[index])\n            particiones(nums, index + 1, array)\n            i.pop(len(i) - 1)\n        array.append([])\n        array[len(array) - 1].append(nums[index])\n        particiones(nums, index + 1, array)\n        array.pop(len(array) - 1)\n\ndef busqueda_binaria(nums, x, a_insertar):\n    izq = 0\n    der = len(nums) - 1\n    while izq <= der:\n        medio = int((izq + der) / 2)\n        if nums[medio] == x:\n            return medio\n        elif nums[medio] > x:\n            der = medio - 1\n        else:\n            izq = medio + 1\n    if a_insertar:\n        nums.insert(medio + 1, x)\n    return -1\n\ndef solve():\n    n = int(input())\n    A = []\n    nums = []\n    for i in range(n):\n        (a, b) = map(str, input().split())\n        A.append((a, int(b)))\n        nums.append(int(b))\n    nums.sort()\n    dic = createDic(nums)\n    key = -1\n    for i in dic:\n        if dic[i] == 1:\n            key = i\n            break\n    if key == -1:\n        print('Nobody wins.')\n    else:\n        for i in range(len(A)):\n            if A[i][1] == key:\n                print(A[i][0])\n                return\ntest = int(input())\nwhile test != 0:\n    solve()\n    test -= 1", "for i in range(int(input())):\n    n = int(input())\n    di = {}\n    king = 0\n    for j in range(n):\n        (name, num) = input().split()\n        num = int(num)\n        if num not in di.keys():\n            di[num] = name\n        else:\n            di[num] = ''\n    for k in sorted(di.keys()):\n        if di[k] != '':\n            print(di[k])\n            king += 1\n            break\n    if king == 0:\n        print('Nobody wins.')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    d = {}\n    c = 0\n    for j in range(n):\n        (a, b) = input().split()\n        b = int(b)\n        if b not in d.keys():\n            d[b] = a\n        else:\n            d[b] = ''\n    for k in sorted(d.keys()):\n        if d[k] != '':\n            print(d[k])\n            c += 1\n            break\n    if c == 0:\n        print('Nobody wins.')", "from bisect import bisect_left\nfrom code import interact\nfrom heapq import heapify, heappush, heappop\nfrom collections import deque\nfrom pydoc import plain\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\ninput = sys.stdin.readline\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\ndx = [-1, -2, 1, 2, 2, -2, -1, 1]\ndy = [2, 1, 2, 1, -1, -1, -2, -2]\nfor _ in range(ii()):\n    n = ii()\n    d = {}\n    for __ in range(n):\n        (name, val) = input().split()\n        if int(val) in d:\n            d[int(val)].append(name)\n        else:\n            d[int(val)] = [name]\n    ans = sorted(d)\n    f = False\n    for ele in ans:\n        if len(d[ele]) == 1:\n            f = True\n            print(d[ele][0])\n            break\n    if not f:\n        print('Nobody wins.')", "for i in range(int(input())):\n    n = int(input())\n    di = {}\n    king = 0\n    for j in range(n):\n        (name, num) = input().split()\n        num = int(num)\n        if num not in di.keys():\n            di[num] = name\n        else:\n            di[num] = ''\n    for k in sorted(di.keys()):\n        if di[k] != '':\n            print(di[k])\n            king += 1\n            break\n    if king == 0:\n        print('Nobody wins.')", "for i in range(int(input())):\n    n = int(input())\n    di = {}\n    king = 0\n    for j in range(n):\n        (name, num) = input().split()\n        num = int(num)\n        if num not in di.keys():\n            di[num] = name\n        else:\n            di[num] = ''\n    for k in sorted(di.keys()):\n        if di[k] != '':\n            print(di[k])\n            king += 1\n            break\n    if king == 0:\n        print('Nobody wins.')", "for i in range(int(input())):\n    n = int(input())\n    di = {}\n    king = 0\n    for j in range(n):\n        (name, num) = input().split()\n        num = int(num)\n        if num not in di.keys():\n            di[num] = name\n        else:\n            di[num] = ''\n    for k in sorted(di.keys()):\n        if di[k] != '':\n            print(di[k])\n            king += 1\n            break\n    if king == 0:\n        print('Nobody wins.')", "for i in range(int(input())):\n    n = int(input())\n    di = {}\n    king = 0\n    for j in range(n):\n        (name, num) = input().split()\n        num = int(num)\n        if num not in di.keys():\n            di[num] = name\n        else:\n            di[num] = ''\n    for k in sorted(di.keys()):\n        if di[k] != '':\n            print(di[k])\n            king += 1\n            break\n    if king == 0:\n        print('Nobody wins.')", "for i in range(int(input())):\n    n = int(input())\n    di = {}\n    king = 0\n    for j in range(n):\n        (name, num) = input().split()\n        num = int(num)\n        if num not in di.keys():\n            di[num] = name\n        else:\n            di[num] = ''\n    for k in sorted(di.keys()):\n        if di[k] != '':\n            print(di[k])\n            king += 1\n            break\n    if king == 0:\n        print('Nobody wins.')", "for i in range(int(input())):\n    n = int(input())\n    di = {}\n    king = 0\n    for j in range(n):\n        (name, num) = input().split()\n        num = int(num)\n        if num not in di.keys():\n            di[num] = name\n        else:\n            di[num] = ''\n    for k in sorted(di.keys()):\n        if di[k] != '':\n            print(di[k])\n            king += 1\n            break\n    if king == 0:\n        print('Nobody wins.')", "import sys\ninput = sys.stdin.readline\n\ndef rii():\n    return range(int(input().strip()))\n\ndef ii():\n    return int(input().strip())\n\ndef mii():\n    return map(int, input().strip().split(' '))\n\ndef lmii():\n    return list(map(int, input().strip().split(' ')))\n\ndef si():\n    return str(input().strip())\nfrom itertools import groupby\nfailure = 'Nobody wins.'\n\nclass Guess:\n\n    def __init__(self, name, number):\n        self.s = name\n        self.n = int(number)\n\n    def __lt__(self, other):\n        return self.n < other.n\n\n    def __gt__(self, other):\n        return self.n > other.n\n\n    def __le__(self, other):\n        return self.n <= other.n\n\n    def __ge__(self, other):\n        return self.n >= other.n\n\n    def __eq__(self, other):\n        return self.n == other.n\n\ndef solve(*args):\n    (n, players) = args\n    uniques = [name for (freq, name) in [(len(list(y)), x.s) for (x, y) in groupby(players)] if freq == 1]\n    return uniques[0] if len(uniques) > 0 else failure\n\ndef do_codechef():\n    for t in rii():\n        n = ii()\n        players = list()\n        for _ in range(n):\n            players.append(Guess(*si().split(' ')))\n        players.sort()\n        print(solve(n, players))\ndo_codechef()\nexit()", "for i in range(int(input())):\n    n = int(input())\n    x = {}\n    for i in range(n):\n        (s, a) = input().split()\n        a = int(a)\n        if a not in x.keys():\n            x[a] = s\n        else:\n            x[a] = '-1'\n    ans = 'Nobody wins.'\n    m = 200000000001\n    for i in x.keys():\n        if i < m and x[i] != '-1':\n            ans = x[i]\n            m = i\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    dic = {}\n    for i in range(n):\n        (s, a) = input().split()\n        a = int(a)\n        if a not in dic.keys():\n            dic[a] = s\n        else:\n            dic[a] = '-1'\n    result = 'Nobody wins.'\n    minimo = 2000000001\n    for i in dic.keys():\n        if i < minimo and dic[i] != '-1':\n            result = dic[i]\n            minimo = i\n    print(result)", "t = int(input())\nwhile t:\n    n = int(input())\n    d = {}\n    c = {}\n    for i in range(n):\n        (a, b) = input().split()\n        d[a] = int(b)\n        c[int(b)] = c.get(int(b), 0) + 1\n    l = []\n    for i in c:\n        if c[i] == 1:\n            l.append(i)\n    if len(l) == 0:\n        print('Nobody wins.')\n    else:\n        mini = min(l)\n        for i in d:\n            if d[i] == mini:\n                print(i)\n                break\n    t -= 1", "try:\n    t = int(input())\n    while t:\n        t -= 1\n        n = int(input())\n        arr = []\n        obj = {}\n        for i in range(n):\n            (x, y) = input().split()\n            y = int(y)\n            arr.append([x, y])\n            if y in obj:\n                obj[y].append(x)\n            else:\n                obj[y] = [x]\n        arr.sort(key=lambda i: i[1], reverse=True)\n        while len(arr) and len(obj[arr[-1][1]]) > 1:\n            arr.pop()\n        if len(arr) == 0:\n            print('Nobody wins.')\n        else:\n            print(arr.pop()[0])\nexcept:\n    pass", "from collections import defaultdict\n\ndef call_value():\n    return 0\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        (s, m) = input().split()\n        m = int(m)\n        arr.append([s, m])\n    dic = defaultdict(call_value)\n    for i in arr:\n        dic[i[1]] += 1\n    ans = []\n    for i in dic:\n        if dic[i] == 1:\n            ans.append(i)\n    if len(ans) == 0:\n        print('Nobody wins.')\n    else:\n        mini = min(ans)\n        for i in arr:\n            if i[1] == mini:\n                print(i[0])\n                break\n    t -= 1", "def comp(a, b):\n    if len(a) > len(b):\n        return b\n    elif len(b) > len(a):\n        return a\n    else:\n        i = 0\n        while True:\n            if a[i] > b[i]:\n                return b\n            elif b[i] > a[i]:\n                return a\n            i += 1\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    b = []\n    c = []\n    for i in range(n):\n        (name, score) = map(str, input().split())\n        a.append([name, score])\n        if score not in c:\n            if score in b:\n                b.remove(score)\n                c.append(score)\n            else:\n                b.append(score)\n    if len(b) == 0:\n        print('Nobody wins.')\n    else:\n        ans = b[0]\n        for i in range(1, len(b)):\n            ans = comp(ans, b[i])\n        for i in range(len(a)):\n            if a[i][1] == ans:\n                print(a[i][0])", "from operator import itemgetter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    di = {}\n    for i in range(n):\n        (a, b) = input().split()\n        b = int(b)\n        di.setdefault(b, [])\n        di[b].append(a)\n    f = 0\n    for item in sorted(di):\n        if len(di[item]) == 1:\n            print(di[item][0])\n            f = 1\n            break\n    if f == 0:\n        print('Nobody wins.')", "from collections import OrderedDict\nfor _ in range(int(input())):\n    a = []\n    min = 10000\n    n = int(input())\n    s = [0] * n\n    l = [0] * n\n    flag = 0\n    for i in range(n):\n        (s[i], t) = input().split()\n        t = int(t)\n        a.append(t)\n    l = a.copy()\n    a.sort()\n    for x in range(len(a)):\n        if a.count(a[x]) == 1:\n            m = x\n            flag = 1\n            break\n    if flag == 0:\n        print('Nobody wins.')\n    else:\n        h = l.index(a[m])\n        print(s[h])", "T = int(input())\nfor t in range(0, T):\n    n = int(input())\n    s = [0] * n\n    np = [0] * n\n    for i in range(0, n):\n        (s[i], np[i]) = input().split()\n        np[i] = int(np[i])\n    no = np[:]\n    no.sort()\n    ans = '-1'\n    if no[0] != no[1]:\n        ans = no[0]\n    else:\n        for i in range(1, n - 1):\n            if no[i] != no[i - 1] and no[i] != no[i + 1]:\n                ans = no[i]\n                break\n            else:\n                continue\n        if ans == '-1' and no[n - 2] != no[n - 1]:\n            ans = no[n - 1]\n    for i in range(0, n):\n        if ans == np[i]:\n            ans = int(i)\n            break\n    if ans == '-1':\n        print('Nobody wins.')\n    else:\n        print(s[ans])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = []\n    hash = {}\n    for i in range(n):\n        (a, b) = map(str, input().split())\n        l.append([a, b])\n        try:\n            hash[b]\n        except:\n            hash[b] = 1\n        else:\n            hash[b] += 1\n    ans = []\n    for i in l:\n        (a, b) = i\n        if hash[b] == 1:\n            ans.append([int(b), a])\n    ans.sort()\n    if ans != []:\n        print(ans[0][1])\n    else:\n        print('Nobody wins.')", "t = int(input())\nwhile t:\n    re = []\n    st = {}\n    m = {}\n    for _ in range(int(input())):\n        (a, b) = input().split()\n        b = int(b)\n        if b in list(st.keys()):\n            st[b] += 1\n        else:\n            st[b] = 1\n            m[b] = a\n        re.append(int(b))\n    count = 0\n    re = list(set(re))\n    re.sort()\n    ind = 0\n    for i in re:\n        if st[i] == 1:\n            count += 1\n            ind = i\n            break\n    if count == 1:\n        print(m[ind])\n    else:\n        print('Nobody wins.')\n    t -= 1", "from collections import Counter\nT = int(input())\nfor i in range(T):\n    NM = []\n    A = []\n    z = 0\n    N = int(input())\n    for j in range(N):\n        (nm, a) = input().split()\n        NM.append(nm)\n        A.append(int(a))\n    D = Counter(A)\n    K = sorted(D.keys())\n    for k in K:\n        if D[k] == 1:\n            z = k\n            break\n        else:\n            pass\n    if z == 0:\n        print('Nobody wins.')\n    else:\n        print(NM[A.index(z)])", "for _ in range(int(input())):\n    q = []\n    for __ in range(int(input())):\n        (a, b) = list(input().split())\n        b = int(b)\n        q.append((a, b))\n    q = sorted(q, key=lambda x: x[1])\n    i = 0\n    win = ''\n    if len(q) == 1:\n        continue\n    while i < len(q):\n        t = q[i][1]\n        if i == len(q) - 1 or q[i][1] != q[i + 1][1]:\n            win = q[i][0]\n            break\n        while i < len(q) and q[i][1] == t:\n            i += 1\n        if i == len(q):\n            break\n    if win == '':\n        print('Nobody wins.')\n    else:\n        print(win)", "for _ in range(int(input())):\n    n = int(input())\n    goes = []\n    for u in range(n):\n        z = input().split()\n        goes.append((int(z[1]), z[0]))\n    goes.sort()\n    res = 'Nobody wins.'\n    last = goes[0][0] - 1\n    win = False\n    for (val, nm) in goes:\n        if val == last:\n            win = False\n        else:\n            if win:\n                res = lastnm\n                break\n            win = True\n            lastnm = nm\n            last = val\n    if win:\n        res = lastnm\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    goes = []\n    for _ in range(n):\n        z = input().split()\n        goes.append((int(z[1]), z[0]))\n    goes.sort()\n    res = 'Nobody wins.'\n    last = goes[0][0] - 1\n    win = False\n    for (val, nm) in goes:\n        if val == last:\n            win = False\n        else:\n            if win:\n                res = lastnm\n                break\n            win = True\n            lastnm = nm\n            last = val\n    if win:\n        res = lastnm\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = {}\n    b = {}\n    c = {}\n    for _ in range(n):\n        (x, y) = input().split()\n        y = int(y)\n        a[x] = y\n        b[y] = x\n        try:\n            c[y] += 1\n        except:\n            c[y] = 1\n    ans = 1000000000000000000\n    for i in c:\n        if c[i] == 1:\n            ans = min(ans, i)\n    if ans == 1000000000000000000:\n        print('Nobody wins.')\n    else:\n        print(b[ans])", "for t in range(int(input())):\n    n = int(input())\n    s = input().split()\n    num = int(s[1])\n    s = s[0]\n    d = dict()\n    d1 = dict()\n    d[num] = s\n    d1[num] = s\n    for i in range(1, n):\n        s = input().split()\n        num = int(s[1])\n        s = s[0]\n        if num in d:\n            d[num] = None\n            d1[num] = None\n        else:\n            d[num] = s\n            d1[None] = s\n    for i in d1:\n        if d1[i] == None:\n            d.pop(i)\n    if len(d) == 0:\n        print('Nobody wins.')\n    else:\n        print(d[min(d)])", "import collections\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = dict()\n    l1 = list()\n    d1 = dict()\n    l2 = list()\n    for _ in range(n):\n        l = [x for x in input().split()]\n        d[l[0]] = l[1]\n        l1.append(int(l[1]))\n    d1 = collections.Counter(l1)\n    l1 = list()\n    l2 = list(d1.keys())\n    for x in range(len(l2)):\n        if d1[l2[x]] == 1:\n            l1.append(l2[x])\n    if len(l1) == 0:\n        print('Nobody wins.')\n    else:\n        for x in d:\n            if d[x] == str(min(l1)):\n                print(x)\n                break", "for _ in range(int(input())):\n    np = int(input())\n    dict = {}\n    for i in range(np):\n        (name, num) = input().split()\n        num = int(num)\n        if dict.get(num, -1) == -1:\n            dict[num] = name\n        else:\n            dict[num] = 0\n    arr = []\n    for key in dict:\n        arr.append(key)\n    arr.sort()\n    ans = -1\n    for i in arr:\n        if dict[i] != 0:\n            ans = i\n            break\n    if ans != -1:\n        print(dict[ans])\n    else:\n        print('Nobody wins.')", "def unique_number(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    for i in range(1, n - 1):\n        if arr[i - 1] != arr[i] and arr[i] != arr[i + 1]:\n            return arr[i]\n    if arr[-2] != arr[-1]:\n        return arr[-1]\n    return 0\nt = int(input())\nfor it in range(t):\n    n = int(input())\n    arr = []\n    mymap = {}\n    for i in range(n):\n        (name, num) = input().split()\n        num = int(num)\n        arr.append(num)\n        mymap[num] = name\n    arr = sorted(arr)\n    smun = unique_number(arr)\n    if smun == 0:\n        print('Nobody wins.')\n    else:\n        print(mymap[smun])", "def unique_number(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    for i in range(n - 1):\n        if arr[i - 1] != arr[i] and arr[i] != arr[i + 1]:\n            return arr[i]\n    if arr[-2] != arr[-1]:\n        return arr[-1]\n    return 0\nt = int(input())\nfor it in range(t):\n    n = int(input())\n    arr = []\n    mymap = {}\n    for i in range(n):\n        (name, num) = input().split()\n        num = int(num)\n        arr.append(num)\n        mymap[num] = name\n    arr = sorted(arr)\n    smun = unique_number(arr)\n    if smun == 0:\n        print('Nobody wins.')\n    else:\n        print(mymap[smun])", "t = int(input())\nlist1 = []\nlist2 = []\nnewlist = []\nfor i in range(t):\n    p = int(input())\n    list1 = []\n    list2 = []\n    list3 = []\n    newlist = []\n    for j in range(p):\n        s = input()\n        (name, number) = s.split()\n        number = int(number)\n        list1.append(number)\n        list2.append(name)\n    for n in list1:\n        if n not in newlist:\n            newlist.append(n)\n        elif n in newlist:\n            list3.append(n)\n    for m in list3:\n        if m in newlist:\n            newlist.remove(m)\n    newlist.sort()\n    if len(newlist) == 0:\n        print('Nobody wins.')\n    else:\n        z = newlist[0]\n        print(list2[list1.index(z)])"]