["def gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    arr = []\n    arr = list(map(int, input().split()))\n    arr.sort()\n    a.append(arr[0])\n    for i in range(1, n):\n        if arr[i] != arr[i - 1]:\n            a.append(arr[i])\n    n = len(a)\n    g = a[0]\n    for i in range(1, n - 2):\n        g = gcd(g, a[i])\n    if gcd(g, a[n - 1]) + a[n - 2] > gcd(g, a[n - 2]) + a[n - 1]:\n        print(gcd(g, a[n - 1]) + a[n - 2])\n    else:\n        print(gcd(g, a[n - 2]) + a[n - 1])", "def gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    arr = []\n    arr = list(map(int, input().split()))\n    arr.sort()\n    a.append(arr[0])\n    for i in range(1, n):\n        if arr[i] != arr[i - 1]:\n            a.append(arr[i])\n    n = len(a)\n    g = a[0]\n    for i in range(1, n - 2):\n        g = gcd(g, a[i])\n    if gcd(g, a[n - 1]) + a[n - 2] > gcd(g, a[n - 2]) + a[n - 1]:\n        print(gcd(g, a[n - 1]) + a[n - 2])\n    else:\n        print(gcd(g, a[n - 2]) + a[n - 1])", "def gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    a = list(map(int, input().split()))\n    a.sort()\n    i = 0\n    for j in range(1, n):\n        if a[i] == a[j]:\n            continue\n        else:\n            i += 1\n            a[i] = a[j]\n    n = i + 1\n    g = a[0]\n    for i in range(1, n - 2):\n        g = gcd(g, a[i])\n    if gcd(g, a[n - 1]) + a[n - 2] > gcd(g, a[n - 2]) + a[n - 1]:\n        print(gcd(g, a[n - 1]) + a[n - 2])\n    else:\n        print(gcd(g, a[n - 2]) + a[n - 1])", "def gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 2:\n        print(arr[0] + arr[1])\n        continue\n    arr.sort()\n    i = 0\n    for j in range(1, n):\n        if arr[i] == arr[j]:\n            continue\n        else:\n            i += 1\n            arr[i] = arr[j]\n    n = i + 1\n    curr_gcd = arr[0]\n    for i in range(1, n - 2):\n        curr_gcd = gcd(curr_gcd, arr[i])\n    a = gcd(curr_gcd, arr[n - 2]) + arr[n - 1]\n    b = gcd(curr_gcd, arr[n - 1]) + arr[n - 2]\n    if a > b:\n        print(a)\n    else:\n        print(b)", "def gcd(x, y):\n    if y == 0:\n        return x\n    if x >= y:\n        return gcd(y, x % y)\n    else:\n        return gcd(x, y % x)\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    s = [_ for _ in set(s)]\n    n = len(s)\n    if n == 1:\n        print(s[0] * 2)\n    else:\n        gcd_ord = []\n        gcd_rev = []\n        result = []\n        gcd_ord.append(s[0])\n        gcd_rev.append(s[-1])\n        for i in range(1, n):\n            gcd_ord.append(gcd(s[i], gcd_ord[-1]))\n        for i in range(n - 2, -1, -1):\n            gcd_rev.append(gcd(s[i], gcd_rev[-1]))\n        gcd_rev.reverse()\n        result.append(s[0] + gcd_rev[1])\n        result.append(s[-1] + gcd_ord[-2])\n        for i in range(1, n - 1):\n            result.append(s[i] + gcd(gcd_ord[i - 1], gcd_rev[i + 1]))\n        print(max(result))", "def gcd(x, y):\n    if y == 0:\n        return x\n    if x >= y:\n        return gcd(y, x % y)\n    else:\n        return gcd(x, y % x)\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    s = [_ for _ in set(s)]\n    n = len(s)\n    if n == 1:\n        print(s[0] * 2)\n    else:\n        gcd_ord = []\n        gcd_rev = []\n        result = []\n        gcd_ord.append(s[0])\n        gcd_rev.append(s[-1])\n        for i in range(1, n):\n            gcd_ord.append(gcd(s[i], gcd_ord[-1]))\n        for i in range(n - 2, -1, -1):\n            gcd_rev.append(gcd(s[i], gcd_rev[-1]))\n        gcd_rev.reverse()\n        result.append(s[0] + gcd_rev[1])\n        result.append(s[-1] + gcd_ord[-2])\n        for i in range(1, n - 1):\n            result.append(s[i] + gcd(gcd_ord[i - 1], gcd_rev[i + 1]))\n        print(max(result))", "def gcd(x, y):\n    if y == 0:\n        return x\n    if x >= y:\n        return gcd(y, x % y)\n    else:\n        return gcd(x, y % x)\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    s = [_ for _ in set(s)]\n    n = len(s)\n    if n == 1:\n        print(s[0] * 2)\n    else:\n        gcd_ord = []\n        gcd_rev = []\n        result = []\n        gcd_ord.append(s[0])\n        gcd_rev.append(s[-1])\n        for i in range(1, n):\n            gcd_ord.append(gcd(s[i], gcd_ord[-1]))\n        for i in range(n - 2, -1, -1):\n            gcd_rev.append(gcd(s[i], gcd_rev[-1]))\n        gcd_rev.reverse()\n        result.append(s[0] + gcd_rev[1])\n        result.append(s[-1] + gcd_ord[-2])\n        for i in range(1, n - 1):\n            result.append(s[i] + gcd(gcd_ord[i - 1], gcd_rev[i + 1]))\n        print(max(result))", "from math import *\nt = int(input())\n\ndef func(l, large, large2):\n    gcdVal = 0\n    for x in range(0, n - 2):\n        gcdVal = gcd(gcdVal, l[x])\n    value1 = gcd(gcdVal, large)\n    value2 = gcd(gcdVal, large2)\n    ans = max(large + value2, large2 + value1)\n    return ans\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l = sorted(list(set(l)))\n    n = len(l)\n    if n == 1:\n        ans = 2 * l[0]\n    else:\n        large = l[n - 1]\n        large2 = l[n - 2]\n        ans = func(l, large, large2)\n    print(ans)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = list(set(map(int, input().split())))\n    a.sort()\n    c = len(a)\n    if c == 1:\n        print(2 * a[0])\n    else:\n        x = a[0]\n        y = a[-1]\n        for j in range(c):\n            x1 = math.gcd(x, a[j])\n            x2 = math.gcd(y, a[j])\n            z = math.gcd(x, y)\n            o1 = x1 + y\n            o2 = x2 + x\n            o3 = z + a[j]\n            m = max(o1, o2, o3)\n            if o1 == m:\n                x = x1\n            elif o2 == m:\n                y = x2\n            else:\n                x = z\n                y = a[j]\n        print(x + y)", "import math\nfor i in range(int(input())):\n    p = int(input())\n    a = list(set(map(int, input().split())))\n    a.sort()\n    c = len(a)\n    if c == 1:\n        print(2 * a[0])\n    else:\n        x = a[0]\n        y = a[-1]\n        for j in range(c):\n            x1 = math.gcd(x, a[j])\n            x2 = math.gcd(y, a[j])\n            z = math.gcd(x, y)\n            o1 = x1 + y\n            o2 = x2 + x\n            o3 = z + a[j]\n            m = max(o1, o2, o3)\n            if o1 == m:\n                x = x1\n            elif o2 == m:\n                y = x2\n            else:\n                x = z\n                y = a[j]\n        print(x + y)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = list(set(map(int, input().split())))\n    a.sort()\n    c = len(a)\n    if c == 1:\n        print(2 * a[0])\n    else:\n        x = a[0]\n        y = a[-1]\n        for j in range(c):\n            x1 = math.gcd(x, a[j])\n            x2 = math.gcd(y, a[j])\n            z = math.gcd(x, y)\n            o1 = x1 + y\n            o2 = x2 + x\n            o3 = z + a[j]\n            m = max(o1, o2, o3)\n            if o1 == m:\n                x = x1\n            elif o2 == m:\n                y = x2\n            else:\n                x = z\n                y = a[j]\n        print(x + y)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = list(set(map(int, input().split())))\n    a.sort()\n    c = len(a)\n    if c == 1:\n        print(2 * a[0])\n    else:\n        x = a[0]\n        y = a[-1]\n        for j in range(c):\n            x1 = math.gcd(x, a[j])\n            x2 = math.gcd(y, a[j])\n            z = math.gcd(x, y)\n            o1 = x1 + y\n            o2 = x2 + x\n            o3 = z + a[j]\n            m = max(o1, o2, o3)\n            if o1 == m:\n                x = x1\n            elif o2 == m:\n                y = x2\n            else:\n                x = z\n                y = a[j]\n        print(x + y)", "import math\nk = int(input())\nfor i in range(k):\n    n = int(input())\n    a = list(set(map(int, input().split())))\n    a.sort()\n    c = len(a)\n    if c == 1:\n        print(2 * a[0])\n    else:\n        x = a[0]\n        y = a[-1]\n        for j in range(c):\n            x1 = math.gcd(x, a[j])\n            x2 = math.gcd(y, a[j])\n            z = math.gcd(x, y)\n            o1 = x1 + y\n            o2 = x2 + x\n            o3 = z + a[j]\n            m = max(o1, o2, o3)\n            if o1 == m:\n                x = x1\n            elif o2 == m:\n                y = x2\n            else:\n                x = z\n                y = a[j]\n        print(x + y)", "import math\nf = int(input())\nfor i in range(f):\n    n = int(input())\n    a = list(set(map(int, input().split())))\n    a.sort()\n    c = len(a)\n    if c == 1:\n        print(2 * a[0])\n    else:\n        x = a[0]\n        y = a[-1]\n        for j in range(c):\n            x1 = math.gcd(x, a[j])\n            x2 = math.gcd(y, a[j])\n            z = math.gcd(x, y)\n            o1 = x1 + y\n            o2 = x2 + x\n            o3 = z + a[j]\n            m = max(o1, o2, o3)\n            if o1 == m:\n                x = x1\n            elif o2 == m:\n                y = x2\n            else:\n                x = z\n                y = a[j]\n        print(x + y)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(set(map(int, input().split())))\n    a.sort()\n    c = len(a)\n    if c == 1:\n        print(2 * a[0])\n    else:\n        x = a[0]\n        y = a[-1]\n        for j in range(c):\n            x1 = math.gcd(x, a[j])\n            x2 = math.gcd(y, a[j])\n            z = math.gcd(x, y)\n            o1 = x1 + y\n            o2 = x2 + x\n            o3 = z + a[j]\n            m = max(o1, o2, o3)\n            if o1 == m:\n                x = x1\n            elif o2 == m:\n                y = x2\n            else:\n                x = z\n                y = a[j]\n        print(x + y)", "import math\nT = int(input())\nfor j in range(T):\n    n = int(input())\n    A = list(set(map(int, input().split())))\n    A.sort()\n    n_1 = len(A)\n    if n_1 == 1:\n        print(2 * A[0])\n    elif n_1 == 2:\n        print(A[0] + A[1])\n    else:\n        gcd_a = A[-1]\n        gcd_b = A[-2]\n        gcd_c = 0\n        for i in range(0, n_1 - 2):\n            gcd_c = math.gcd(gcd_c, A[i])\n        op1 = gcd_a + math.gcd(gcd_c, gcd_b)\n        op2 = gcd_b + math.gcd(gcd_c, gcd_a)\n        print(max(op1, op2))", "import math\nT = int(input())\nfor j in range(T):\n    n = int(input())\n    A = list(set(map(int, input().split())))\n    A.sort()\n    n_1 = len(A)\n    if n_1 == 1:\n        print(2 * A[0])\n    else:\n        gcd_a = A[0]\n        gcd_b = A[-1]\n        for i in range(1, n_1):\n            gca_A_a = math.gcd(gcd_a, A[i])\n            gca_B_b = math.gcd(gcd_b, A[i])\n            gca_c = math.gcd(gcd_a, gcd_b)\n            op1 = gca_A_a + gcd_b\n            op2 = gca_B_b + gcd_a\n            op3 = gca_c + A[i]\n            max_op = max(op1, op2, op3)\n            if op1 == max_op:\n                gcd_a = gca_A_a\n            elif op2 == max_op:\n                gcd_b = gca_B_b\n            else:\n                gcd_a = gca_c\n                gcd_b = A[i]\n        print(gcd_a + gcd_b)", "import math\nT = int(input())\nfor j in range(T):\n    n = int(input())\n    A = list(set(map(int, input().split(' '))))\n    A.sort()\n    n_1 = len(A)\n    if n_1 == 1:\n        print(2 * A[0])\n    else:\n        gcd_a = A[0]\n        gcd_b = A[-1]\n        for i in range(0, n_1):\n            gca_A_a = math.gcd(gcd_a, A[i])\n            gca_B_b = math.gcd(gcd_b, A[i])\n            gca_c = math.gcd(gcd_a, gcd_b)\n            op1 = gca_A_a + gcd_b\n            op2 = gca_B_b + gcd_a\n            op3 = gca_c + A[i]\n            max_op = max(op1, op2, op3)\n            if op1 == max_op:\n                gcd_a = gca_A_a\n            elif op2 == max_op:\n                gcd_b = gca_B_b\n            else:\n                gcd_a = gca_c\n                gcd_b = A[i]\n        print(gcd_a + gcd_b)", "import math\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(set(a)) == 1:\n        print(2 * a[0])\n    else:\n        a = list(set(a))\n        (x, p) = (0, 0)\n        z = max(a)\n        a.remove(z)\n        for i in range(len(a)):\n            x = math.gcd(x, a[i])\n        y = max(a)\n        a.append(z)\n        a.remove(y)\n        for i in range(len(a)):\n            p = math.gcd(p, a[i])\n        print(max(z + x, p + y))", "import math\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(set(a)) == 1:\n        print(2 * a[0])\n    else:\n        a = list(set(a))\n        (x, p) = (0, 0)\n        z = max(a)\n        a.remove(z)\n        for i in range(len(a)):\n            x = math.gcd(x, a[i])\n        y = max(a)\n        a.append(z)\n        a.remove(y)\n        for i in range(len(a)):\n            p = math.gcd(p, a[i])\n        print(max(z + x, p + y))", "from math import *\nt = int(input())\n\ndef func(l, large, large2):\n    gcdVal = 0\n    for x in range(0, n - 2):\n        gcdVal = gcd(gcdVal, l[x])\n    value1 = gcd(gcdVal, large)\n    value2 = gcd(gcdVal, large2)\n    ans = max(large + value2, large2 + value1)\n    return ans\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l = sorted(list(set(l)))\n    n = len(l)\n    if n == 1:\n        ans = 2 * l[0]\n    else:\n        large = l[n - 1]\n        large2 = l[n - 2]\n        ans = func(l, large, large2)\n    print(ans)", "import math\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(set(a)) == 1:\n        print(2 * a[0])\n    else:\n        a = list(set(a))\n        (x, p) = (0, 0)\n        z = max(a)\n        a.remove(z)\n        for i in range(len(a)):\n            x = math.gcd(x, a[i])\n        y = max(a)\n        a.append(z)\n        a.remove(y)\n        for i in range(len(a)):\n            p = math.gcd(p, a[i])\n        print(max(z + x, p + y))", "from math import gcd\n__author__ = 'Prateek'\n\ndef test():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = list(set(a))\n    n = len(a)\n    if len(a) == 1:\n        print(2 * a[0])\n        return\n    g1 = [0 for i in range(n)]\n    g2 = [0 for i in range(n)]\n    g1[0] = a[0]\n    g2[n - 1] = a[n - 1]\n    for i in range(1, n):\n        g1[i] = gcd(g1[i - 1], a[i])\n    for i in range(n - 2, -1, -1):\n        g2[i] = gcd(g2[i + 1], a[i])\n    ans = 0\n    for i in range(n):\n        if i == 0:\n            ans = max(ans, g2[i + 1] + a[i])\n        elif i == n - 1:\n            ans = max(ans, g1[i - 1] + a[i])\n        else:\n            ans = max(ans, gcd(g1[i - 1], g2[i + 1]) + a[i])\n    print(ans)\nif __author__ == 'Prateek':\n    t = int(input())\n    for _ in range(t):\n        test()", "from math import *\nt = int(input())\n\ndef func(l, large, large2):\n    gcdVal = 0\n    for x in range(0, n - 2):\n        gcdVal = gcd(gcdVal, l[x])\n    value1 = gcd(gcdVal, large)\n    value2 = gcd(gcdVal, large2)\n    ans = max(large + value2, large2 + value1)\n    return ans\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l = sorted(list(set(l)))\n    n = len(l)\n    if n == 1:\n        ans = 2 * l[0]\n    else:\n        large = l[n - 1]\n        large2 = l[n - 2]\n        ans = func(l, large, large2)\n    print(ans)", "from math import *\nt = int(input())\n\ndef func(l, large, large2):\n    gcdVal = 0\n    for x in range(0, n - 2):\n        gcdVal = gcd(gcdVal, l[x])\n    value1 = gcd(gcdVal, large)\n    value2 = gcd(gcdVal, large2)\n    ans = max(large + value2, large2 + value1)\n    return ans\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l = sorted(list(set(l)))\n    n = len(l)\n    if n == 1:\n        ans = 2 * l[0]\n    else:\n        large = l[n - 1]\n        large2 = l[n - 2]\n        ans = func(l, large, large2)\n    print(ans)", "from math import *\nt = int(input())\n\ndef func(l, large, large2):\n    gcdVal = 0\n    for x in range(0, n - 2):\n        gcdVal = gcd(gcdVal, l[x])\n    value1 = gcd(gcdVal, large)\n    value2 = gcd(gcdVal, large2)\n    ans = max(large + value2, large2 + value1)\n    return ans\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l = sorted(list(set(l)))\n    n = len(l)\n    if n == 1:\n        ans = 2 * l[0]\n    else:\n        large = l[n - 1]\n        large2 = l[n - 2]\n        ans = func(l, large, large2)\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    newa = list(set(a))\n    if len(newa) == 1:\n        print(newa[0] * 2)\n    elif len(newa) == 2:\n        print(sum(newa))\n    else:\n        newa.sort()\n        m1 = newa.pop()\n        m2 = newa.pop()\n        gcd = newa[0]\n        for i in range(1, len(newa)):\n            gcd = math.gcd(gcd, newa[i])\n            if gcd == 1:\n                break\n        s1 = math.gcd(gcd, m1)\n        s2 = math.gcd(gcd, m2)\n        print(max(s1 + m2, s2 + m1))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    newa = list(set(a))\n    if len(newa) == 1:\n        print(newa[0] * 2)\n    elif len(newa) == 2:\n        print(sum(newa))\n    else:\n        newa.sort()\n        m1 = newa.pop()\n        m2 = newa.pop()\n        gcd = newa[0]\n        for i in range(1, len(newa)):\n            gcd = math.gcd(gcd, newa[i])\n            if gcd == 1:\n                break\n        s1 = math.gcd(gcd, m1)\n        s2 = math.gcd(gcd, m2)\n        print(max(s1 + m2, s2 + m1))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    newa = list(set(a))\n    if len(newa) == 1:\n        print(newa[0] * 2)\n    elif len(newa) == 2:\n        print(sum(newa))\n    else:\n        newa.sort()\n        m1 = newa.pop()\n        m2 = newa.pop()\n        gcd = newa[0]\n        for i in range(1, len(newa)):\n            gcd = math.gcd(gcd, newa[i])\n            if gcd == 1:\n                break\n        s1 = math.gcd(gcd, m1)\n        s2 = math.gcd(gcd, m2)\n        print(max(s1 + m2, s2 + m1))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    newa = list(set(a))\n    if len(newa) == 1:\n        print(newa[0] * 2)\n    elif len(newa) == 2:\n        print(sum(newa))\n    else:\n        newa.sort()\n        m1 = newa.pop()\n        m2 = newa.pop()\n        gcd = newa[0]\n        for i in range(1, len(newa)):\n            gcd = math.gcd(gcd, newa[i])\n            if gcd == 1:\n                break\n        s1 = math.gcd(gcd, m1)\n        s2 = math.gcd(gcd, m2)\n        print(max(s1 + m2, s2 + m1))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    newa = list(set(a))\n    if len(newa) == 1:\n        print(newa[0] * 2)\n    elif len(newa) == 2:\n        print(sum(newa))\n    else:\n        newa.sort()\n        m1 = newa.pop()\n        m2 = newa.pop()\n        gcd = newa[0]\n        for i in range(1, len(newa)):\n            gcd = math.gcd(gcd, newa[i])\n            if gcd == 1:\n                break\n        s1 = math.gcd(gcd, m1)\n        s2 = math.gcd(gcd, m2)\n        print(max(s1 + m2, s2 + m1))", "import math as m\nfor _ in range(int(input())):\n    length = int(input())\n    arr = list(map(int, input().split()))\n    if length == 2:\n        print(arr[0] + arr[1])\n    else:\n        tmparr = list(set(arr))\n        tmparr.sort()\n        fmax = tmparr.pop()\n        smax = tmparr.pop()\n        p = len(tmparr)\n        if p == 0:\n            print(fmax + smax)\n        else:\n            result = tmparr[0]\n            for i in range(1, p):\n                result = m.gcd(tmparr[i], result)\n            gcd0 = result\n            gcdH = m.gcd(gcd0, fmax)\n            gcdSH = m.gcd(gcd0, smax)\n            case11 = fmax + gcdSH\n            case22 = smax + gcdH\n            print(max(case11, case22))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(set(a)) == 1:\n        print(2 * a[0])\n    else:\n        a = list(set(a))\n        (x, p) = (0, 0)\n        z = max(a)\n        a.remove(z)\n        for i in range(len(a)):\n            x = math.gcd(x, a[i])\n        y = max(a)\n        a.append(z)\n        a.remove(y)\n        for i in range(len(a)):\n            p = math.gcd(p, a[i])\n        print(max(z + x, p + y))", "from math import gcd\n\ndef gh(a, b):\n    if len(a) and len(b):\n        x = a[0]\n        y = b[0]\n        for i in a[1:]:\n            x = gcd(x, i)\n        for i in b[1:]:\n            y = gcd(y, i)\n        return x + y\n    return 0\n\ndef abc(l):\n    s = 2 ** len(l)\n    i = 0\n    d = '{0:0' + str(len(l)) + 'b}'\n    ans = 0\n    while i < s:\n        x = d.format(i)\n        a = []\n        b = []\n        for j in range(len(l)):\n            if x[j] == '1':\n                a.append(l[j])\n            else:\n                b.append(l[j])\n        ans = max(ans, gh(a, b))\n        i += 1\n    return ans\nimport random\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in l:\n        try:\n            d[i] += 1\n        except:\n            d[i] = 1\n    x = list(d.keys())\n    x.sort()\n    if len(x) == 1:\n        print(2 * l[0])\n    else:\n        ans = x[-1]\n        c = x[0]\n        for i in range(len(x) - 1):\n            c = gcd(c, x[i])\n        vy = ans + c\n        ans = x[-2]\n        c = 0\n        for i in range(len(x) - 2):\n            c = gcd(c, x[i])\n        c = gcd(c, x[-1])\n        vx = ans + c\n        print(max(vx, vy))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(set(map(int, input().split())))\n    n = len(a)\n    flag = 0\n    if n == 1:\n        print(a[0] * 2)\n    else:\n        Lgcd = [0]\n        Rgcd = [0]\n        for i in range(n):\n            gcd = math.gcd(Lgcd[i], a[i])\n            Lgcd.append(gcd)\n        a = a[::-1]\n        for i in range(n):\n            gcd = math.gcd(Rgcd[i], a[i])\n            Rgcd.append(gcd)\n        Rgcd = Rgcd[::-1]\n        a = a[::-1]\n        ans = []\n        for i in range(n):\n            gcd = a[i] + math.gcd(Lgcd[i], Rgcd[i + 1])\n            ans.append(gcd)\n        print(max(ans))", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef gcdlist(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        num1 = l[0]\n        num2 = l[1]\n        gcdfinal = gcd(num1, num2)\n        for i in range(2, len(l)):\n            gcdfinal = gcd(gcdfinal, l[i])\n        return gcdfinal\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(a[0])\n    elif n == 2:\n        print(a[0] + a[1])\n    else:\n        max1 = 0\n        max2 = 0\n        for i in range(1, n):\n            if a[i] > max1:\n                max2 = max1\n                max1 = a[i]\n            elif a[i] > max2 and a[i] != max1:\n                max2 = a[i]\n        a1 = []\n        a2 = []\n        for i in range(n):\n            if a[i] != max1:\n                a1.append(a[i])\n            if a[i] != max2:\n                a2.append(a[i])\n        if len(a1) == 0:\n            print(a[0])\n        else:\n            g1 = gcdlist(a1)\n            g2 = gcdlist(a2)\n            print(max(g1 + max1, g2 + max2))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(set(a)) == 1:\n        print(2 * a[0])\n    else:\n        a = list(set(a))\n        (x, p) = (0, 0)\n        z = max(a)\n        a.remove(z)\n        for i in range(len(a)):\n            x = math.gcd(x, a[i])\n        y = max(a)\n        a.append(z)\n        a.remove(y)\n        for i in range(len(a)):\n            p = math.gcd(p, a[i])\n        print(max(z + x, p + y))", "import math\nfrom fractions import gcd\nfrom functools import reduce\n\ndef find_gcd(list):\n    x = reduce(gcd, list)\n    return x\nt = int(input(''))\nfin = []\nsums = [0, 0, 0]\nfor v in range(t):\n    n = int(input(''))\n    a = input('').split(' ')\n    rmap = map(int, a)\n    a = list(rmap)\n    a.sort()\n    t = a[0]\n    o = []\n    o.append(t)\n    for i in range(n):\n        if t != a[i]:\n            o.append(a[i])\n            t = a[i]\n    N = len(o)\n    if len(o) == 1:\n        fin.append(2 * o[0])\n    elif len(o) == 2:\n        fin.append(o[0] + o[1])\n    else:\n        g = find_gcd(o[0:len(o) - 2])\n        fin.append(max(o[N - 1] + gcd(g, o[N - 2]), o[N - 2] + gcd(g, o[N - 1])))\nfor i in fin:\n    print(i)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(set(a)) == 1:\n        print(2 * a[0])\n    else:\n        a = list(set(a))\n        (x, p) = (0, 0)\n        z = max(a)\n        a.remove(z)\n        for i in range(len(a)):\n            x = math.gcd(x, a[i])\n        y = max(a)\n        a.append(z)\n        a.remove(y)\n        for i in range(len(a)):\n            p = math.gcd(p, a[i])\n        print(max(z + x, p + y))", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l = list(set(l))\n    n = len(l)\n    if len(l) == 1:\n        print(l[0] * 2)\n        continue\n    p = [0 for x in range(n)]\n    s = [0 for x in range(n)]\n    ans1 = 0\n    p[0] = l[0]\n    for i in range(1, n):\n        p[i] = gcd(l[i], p[i - 1])\n    s[n - 1] = l[n - 1]\n    for i in range(n - 2, -1, -1):\n        s[i] = gcd(l[i], s[i + 1])\n    for i in range(n):\n        if i == 0:\n            ans = s[i + 1] + l[0]\n        elif i == n - 1:\n            ans = p[n - 2] + l[n - 1]\n        else:\n            ans = gcd(p[i - 1], s[i + 1]) + l[i]\n        ans1 = max(ans1, ans)\n    print(ans1)", "from math import gcd\nfor _ in range(int(input())):\n    input()\n    li = sorted(list(set(list((int(i) for i in input().split())))))\n    if len(li) == 1:\n        print(2 * li[0])\n    elif len(li) == 2:\n        print(sum(li))\n    else:\n        g = li[0]\n        for i in range(1, len(li) - 2):\n            g = gcd(li[i], g)\n        m = gcd(g, li[-2]) + li[-1]\n        n = gcd(g, li[-1]) + li[-2]\n        print(max(m, n))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    arr = list(dict.fromkeys(arr))\n    arr.sort(reverse=True)\n    if len(arr) == 1:\n        ans = 2 * arr[0]\n        print(ans)\n        continue\n    n = len(arr)\n    b = arr[0]\n    c = arr[1]\n    if n >= 3:\n        temp = arr[2]\n        for i in range(2, n):\n            temp = math.gcd(temp, arr[i])\n        bval = math.gcd(b, temp)\n        cval = math.gcd(c, temp)\n        ans = max(bval + c, b + cval)\n    else:\n        ans = b + c\n    print(ans)", "hm = {}\n\ndef gcd(a, b):\n    if b > a:\n        (a, b) = (b, a)\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef gcd_list(l, n):\n    gcd1 = l[0]\n    for i in range(1, n):\n        gcd1 = gcd(gcd1, l[i])\n    return gcd1\nfor _ in range(int(input())):\n    n = int(input())\n    x = [int(n) for n in input().split()]\n    l2 = []\n    l = list(set(x))\n    n = len(l)\n    if n > 2:\n        hm = {}\n        temp = []\n        max1 = max(l[0], l[1])\n        max2 = min(l[0], l[1])\n        for i in range(2, len(l)):\n            if l[i] > max1:\n                max2 = max1\n                max1 = l[i]\n            elif l[i] > max2:\n                max2 = l[i]\n        m1 = max1\n        m2 = max2\n        l.remove(m1)\n        l.remove(m2)\n        gcd_1 = l[0]\n        for i in range(1, n - 2):\n            gcd_1 = gcd(gcd_1, l[i])\n        s1 = gcd(gcd_1, m2) + m1\n        s2 = gcd(gcd_1, m1) + m2\n        print(max(s1, s2))\n    elif n == 1:\n        print(l[0] * 2)\n    else:\n        print(sum(l))", "import math\n\ndef cal_gcd(a):\n    first = a[0]\n    for i in range(1, len(a)):\n        first = math.gcd(first, a[i])\n    return first\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(set(map(int, input().split())))\n    n = len(a)\n    if n == 1:\n        print(2 * a[0])\n    else:\n        a.sort(reverse=True)\n        b1 = a[0]\n        b2 = a[1]\n        if n >= 3:\n            first = a[2]\n            for i in range(3, len(a)):\n                first = math.gcd(first, a[i])\n            print(max(b1 + math.gcd(first, b2), b2 + math.gcd(first, b1)))\n        else:\n            print(b1 + b2)", "import math\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = sorted(list(set(list(map(int, input().split())))))\n        n = len(a)\n        if n == 1:\n            ans = a[0] + a[0]\n        elif n == 2:\n            ans = a[0] + a[1]\n        else:\n            temp = 0\n            p1 = a[n - 1]\n            p2 = a[n - 2]\n            for i in range(n - 2):\n                temp = math.gcd(temp, a[i])\n            a1 = math.gcd(temp, p1)\n            a2 = math.gcd(temp, p2)\n            ans = max(a1 + p2, a2 + p1)\n        print(ans)\nexcept:\n    pass", "import sys\nimport math\nstrInp = lambda : input().strip().split()\nintInp = lambda : list(map(int, strInp()))\n\ndef GCD(x, y):\n    return math.gcd(x, y)\nfor t in range(int(input())):\n    n = int(input())\n    arr = list(set(intInp()))\n    if len(arr) == 1:\n        print(arr[0] * 2)\n    else:\n        prefixGcd = [arr[0]]\n        for i in range(1, len(arr)):\n            prefixGcd.append(GCD(prefixGcd[-1], arr[i]))\n        suffixGcd = [arr[-1]]\n        for i in range(len(arr) - 1, -1, -1):\n            suffixGcd.append(GCD(suffixGcd[-1], arr[i]))\n        suffixGcd.reverse()\n        m = arr[0] + suffixGcd[1]\n        m = max(m, arr[-1] + prefixGcd[-2])\n        for i in range(1, len(arr) - 1):\n            m = max(m, arr[i] + GCD(prefixGcd[i - 1], suffixGcd[i + 1]))\n        print(m)", "def hcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return hcf(b, a % b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(set(map(int, input().split())))\n    l.sort(reverse=True)\n    n = len(l)\n    if len(l) == 1:\n        print(2 * l[0])\n    else:\n        g = l[0]\n        h = l[1]\n        if n >= 3:\n            hc = l[2]\n            for j in range(3, n):\n                hc = hcf(hc, l[j])\n            print(max(hcf(g, hc) + h, g + hcf(h, hc)))\n        else:\n            print(g + h)", "def hcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return hcf(b, a % b)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(set(map(int, input().split())))\n    l.sort(reverse=True)\n    n = len(l)\n    if len(l) == 1:\n        print(2 * l[0])\n    else:\n        g = l[0]\n        h = l[1]\n        if n >= 3:\n            hc = l[2]\n            for j in range(3, n):\n                hc = hcf(hc, l[j])\n            print(max(hcf(g, hc) + h, g + hcf(h, hc)))\n        else:\n            print(g + h)", "from math import gcd\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    li = list(map(int, input().split()))\n    li = list(set(li))\n    li.sort()\n    if len(li) == 1:\n        print(2 * li[0])\n    elif len(li) == 2:\n        print(li[0] + li[1])\n    else:\n        mx1 = li[-1]\n        mx2 = li[-2]\n        gcdd = 0\n        for i in range(len(li) - 2):\n            gcdd = gcd(li[i], gcdd)\n        print(max(mx1 + gcd(gcdd, mx2), mx2 + gcd(gcdd, mx1)))\n    t = t - 1", "from math import gcd\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    li = list(map(int, input().split()))\n    li = list(set(li))\n    li.sort()\n    if len(li) == 1:\n        print(2 * li[0])\n    elif len(li) == 2:\n        print(li[0] + li[1])\n    else:\n        mx1 = li[-1]\n        mx2 = li[-2]\n        gcdd = 0\n        for i in range(len(li) - 2):\n            gcdd = gcd(li[i], gcdd)\n        print(max(mx1 + gcd(gcdd, mx2), mx2 + gcd(gcdd, mx1)))\n    t = t - 1", "from math import gcd\nfor t in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    li = list(set(li))\n    li.sort()\n    if len(li) == 1:\n        print(2 * li[0])\n    elif len(li) == 2:\n        print(li[0] + li[1])\n    else:\n        mx1 = li[-1]\n        mx2 = li[-2]\n        gcdd = 0\n        for i in range(len(li) - 2):\n            gcdd = gcd(gcdd, li[i])\n        print(max(mx1 + gcd(gcdd, mx2), mx2 + gcd(gcdd, mx1)))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(set(map(int, input().split())))\n    n = len(l)\n    if n == 1:\n        print(l[0] * 2)\n        continue\n    pregcd = [0] * n\n    postgcd = [0] * n\n    pregcd[0] = l[0]\n    postgcd[-1] = l[-1]\n    for i in range(1, n):\n        pregcd[i] = gcd(pregcd[i - 1], l[i])\n    for i in range(n - 2, -1, -1):\n        postgcd[i] = gcd(postgcd[i + 1], l[i])\n    ans = l[0] + postgcd[1]\n    for i in range(1, n - 1):\n        sum1 = l[i] + gcd(pregcd[i - 1], postgcd[i + 1])\n        if sum1 > ans:\n            ans = sum1\n    sum1 = l[n - 1] + pregcd[n - 2]\n    if sum1 > ans:\n        ans = sum1\n    print(ans)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(set(map(int, input().split())))\n    n = len(l)\n    if n == 1:\n        print(l[0] * 2)\n        continue\n    pregcd = [0] * n\n    postgcd = [0] * n\n    pregcd[0] = l[0]\n    postgcd[-1] = l[-1]\n    for i in range(1, n):\n        pregcd[i] = gcd(pregcd[i - 1], l[i])\n    for i in range(n - 2, -1, -1):\n        postgcd[i] = gcd(postgcd[i + 1], l[i])\n    ans = l[0] + postgcd[1]\n    for i in range(1, n - 1):\n        sum1 = l[i] + gcd(pregcd[i - 1], postgcd[i + 1])\n        if sum1 > ans:\n            ans = sum1\n    sum1 = l[n - 1] + pregcd[n - 2]\n    if sum1 > ans:\n        ans = sum1\n    print(ans)", "from math import gcd\nfor t in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    li = list(set(li))\n    li.sort()\n    if len(li) == 1:\n        print(2 * li[0])\n    elif len(li) == 2:\n        print(li[0] + li[1])\n    else:\n        mx1 = li[-1]\n        mx2 = li[-2]\n        gcdd = 0\n        for i in range(len(li) - 2):\n            gcdd = gcd(gcdd, li[i])\n        print(max(mx1 + gcd(gcdd, mx2), mx2 + gcd(gcdd, mx1)))", "import math\nimport bisect\n\ndef power(x, y, p):\n    res = 1\n    x = x % p\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\n\ndef inn():\n    return int(input())\n\ndef inl():\n    return list(map(int, input().split()))\nMOD = 10 ** 9 + 7\nINF = inf = 10 ** 18 + 5\nfor t in range(int(input())):\n    n = inn()\n    a = list(map(int, input().split()))\n    a = list(set(a))\n    n = len(a)\n    if n == 1:\n        print(2 * a[0])\n        continue\n    pre_gcd = [1] * n\n    suf_gcd = [1] * n\n    pre_gcd[0] = a[0]\n    for i in range(1, n):\n        pre_gcd[i] = math.gcd(pre_gcd[i - 1], a[i])\n    suf_gcd[n - 1] = a[n - 1]\n    for i in range(n - 2, -1, -1):\n        suf_gcd[i] = math.gcd(suf_gcd[i + 1], a[i])\n    mgcd = max(a[0] + suf_gcd[1], a[n - 1] + pre_gcd[n - 2])\n    for i in range(1, n - 1):\n        mgcd = max(mgcd, a[i] + math.gcd(pre_gcd[i - 1], suf_gcd[i + 1]))\n    print(mgcd)", "from math import gcd\nfrom functools import reduce\nfor testcases in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    if A.count(A[0]) == N:\n        print(A[0] * 2)\n    else:\n        A = list(set(A))\n        Highest = max(A)\n        A.remove(Highest)\n        gcdA_1 = reduce(gcd, A)\n        IIHighest = max(A)\n        A.append(Highest)\n        A.remove(IIHighest)\n        gcdA_2 = reduce(gcd, A)\n        GCDwHighest = gcdA_1 + Highest\n        GCDiiHighest = gcdA_2 + IIHighest\n        print(GCDwHighest if GCDwHighest > GCDiiHighest else GCDiiHighest)", "import math\nR = lambda : map(int, input().strip().split())\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\nfor _ in range(int(input())):\n    input()\n    lst = list(set(list(R())))\n    n = len(lst)\n    if n == 1:\n        print(2 * lst[0])\n    elif n == 2:\n        print(lst[0] + lst[1])\n    else:\n        lst.sort()\n        lst_gcd = lst[0]\n        for i in range(1, n - 2):\n            lst_gcd = gcd(lst_gcd, lst[i])\n        print(max(gcd(lst_gcd, lst[n - 2]) + lst[n - 1], gcd(lst_gcd, lst[n - 1]) + lst[n - 2]))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(set(map(int, input().split())))\n    if len(a) == 1:\n        print(a[0] * 2)\n    elif len(a) == 2:\n        print(a[0] + a[1])\n    else:\n        a.sort()\n        b = a[-1]\n        gcd = math.gcd(a[0], a[1])\n        for i in range(2, len(a) - 1):\n            gcd = math.gcd(gcd, a[i])\n        l1 = b + gcd\n        b = a[len(a) - 2]\n        a.remove(b)\n        gcd = math.gcd(a[0], a[1])\n        for i in range(2, len(a) - 1):\n            gcd = math.gcd(gcd, a[i])\n        l2 = b + gcd\n        if l1 > l2:\n            print(l1)\n        else:\n            print(l2)", "t = int(input())\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    if b % a == 0:\n        return a\n    return gcd(b % a, a)\nwhile t:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    ls = list(dict.fromkeys(l))\n    ls.sort(reverse=True)\n    if len(ls) == 1:\n        print(2 * ls[0])\n    elif len(ls) == 2:\n        print(ls[0] + ls[1])\n    else:\n        ans1 = ls[0]\n        ans2 = ls[1]\n        for i in range(2, len(ls)):\n            ans1 = gcd(ans1, ls[i])\n        for i in range(2, len(ls)):\n            ans2 = gcd(ans2, ls[i])\n        print(max(ans1 + ls[1], ans2 + ls[0]))\n    t = t - 1", "import math\n\ndef gcd(a):\n    b = min(a)\n    c = int(math.sqrt(b))\n    d = []\n    for i in range(1, c + 1):\n        if b % i == 0:\n            d.append(i)\n            d.append(b / i)\n    d = set(d)\n    d = list(d)\n    d.sort()\n    for i in range(len(d) - 1, -1, -1):\n        j = 0\n        while j < len(a):\n            if a[j] % d[i] != 0:\n                break\n            j = j + 1\n        if j == len(a):\n            r = int(d[i])\n            break\n    return r\nT = int(input())\nfor qwerr in range(T):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = set(a)\n    b = list(b)\n    b.sort()\n    l = len(b)\n    if l == 1:\n        print(2 * b[0])\n    else:\n        an = []\n        x = b[0:l - 1]\n        y = gcd(x)\n        z = b[l - 1]\n        an.append(y + z)\n        x = b[0:l - 2] + b[l - 1:l]\n        y = gcd(x)\n        z = b[l - 2]\n        an.append(y + z)\n        print(max(an))", "from math import gcd\nfrom functools import reduce\nt = int(input())\nfor i in range(0, t):\n    m = 0\n    m2 = 0\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    m = max(a)\n    b = list(filter(lambda x: x != m, a))\n    if b != []:\n        m2 = max(b)\n    c = list(filter(lambda x: x != m2, b))\n    if m2 == 0:\n        print(2 * m)\n    else:\n        g = 0\n        if c != []:\n            g = reduce(gcd, c)\n        l = gcd(g, m)\n        r = gcd(g, m2)\n        print(max(l + m2, r + m))", "import sys\nfrom math import gcd\n\ndef read_line():\n    return sys.stdin.readline().split()\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_int_line():\n    return [int(v) for v in sys.stdin.readline().split()]\nt = read_int()\nfor test in range(t):\n    read_int()\n    a = {int(x) for x in read_line()}\n    a = list(a)\n    n = len(a)\n    pre = []\n    post = []\n    gcdPre = 0\n    pre.append(0)\n    for i in range(1, n):\n        gcdPre = gcd(gcdPre, a[i - 1])\n        pre.append(gcdPre)\n    gcdPost = 0\n    post.append(0)\n    for i in range(n - 2, -1, -1):\n        gcdPost = gcd(gcdPost, a[i + 1])\n        post.append(gcdPost)\n    post.reverse()\n    gcd1 = 0\n    gcdMax = 0\n    for i in range(n):\n        gcdMax = max(gcdMax, a[i] + gcd(pre[i], post[i]))\n    if n == 1:\n        print(2 * gcdMax)\n    else:\n        print(gcdMax)", "from math import gcd\nfrom functools import reduce\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ll = list(map(int, input().split()))\n    ss = set(ll)\n    mx = max(ss)\n    ns = ss - {mx}\n    if len(ll) >= 2 and len(ss) == 1:\n        print(mx * 2)\n    elif len(ll) >= 2 and len(ss) == 2:\n        print(sum(ss))\n    else:\n        (a, b) = (list(sorted(ss))[-1], list(sorted(ss))[-2])\n        print(max(reduce(gcd, ss - {a}) + a, reduce(gcd, ss - {b}) + b))", "def gcd(a, b):\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    nums.sort()\n    if len(nums) == 2:\n        print(nums[0] + nums[1])\n        continue\n    sec = [nums[0]]\n    pt = 0\n    for j in nums:\n        if j != sec[pt]:\n            sec.append(j)\n            pt += 1\n    if len(sec) == 2:\n        print(sum(sec))\n        continue\n    elif len(sec) == 1:\n        print(sec[0] * 2)\n        continue\n    final = sec[-1]\n    initial = sec[0]\n    for a in range(1, len(sec) - 1):\n        q = gcd(initial, sec[a])\n        initial = q\n    final += q\n    if sec[0] == 1:\n        print(final)\n        continue\n    start = 0\n    end = len(sec) - 1\n    while start < end:\n        if sec[end] % sec[start] == 0:\n            end -= 1\n        else:\n            start += 1\n    fin2 = sec[end]\n    initial = sec[0]\n    if initial == fin2:\n        initial = sec[1]\n    for b in range(0, len(sec)):\n        if sec[b] != fin2:\n            q = gcd(initial, sec[b])\n            initial = q\n    fin2 += q\n    ini = sec[0]\n    for qw in range(1, len(sec) - 2):\n        ini = gcd(ini, sec[qw])\n    g1 = gcd(ini, sec[-2]) + sec[-1]\n    g2 = gcd(ini, sec[-1]) + sec[-2]\n    print(max(g1, g2, fin2, final))", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = list(set(a))\n    a.sort()\n    g = a[0]\n    if len(a) == 1:\n        print(a[0] + a[0])\n        continue\n    elif len(a) == 2:\n        print(a[0] + a[-1])\n        continue\n    else:\n        for i in range(1, len(a) - 2):\n            g = gcd(g, a[i])\n        g = max(gcd(g, a[-2]) + a[-1], gcd(g, a[-1]) + a[-2])\n    print(g)", "import math\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = set(l)\n    l1 = list(l1)\n    n1 = len(l1)\n    m1 = min(l1)\n    m2 = max(l1)\n    l1.sort()\n    if n1 == 1:\n        print(2 * m2)\n    elif n1 == 2:\n        print(m1 + m2)\n    else:\n        for j in range(n1 - 1, -1, -1):\n            if l1[j] != m2:\n                m3 = l1[j]\n                break\n        g1 = l1[0]\n        for j in range(0, n1):\n            if l1[j] != m3:\n                g1 = math.gcd(g1, l1[j])\n        g1 += m3\n        g = l1[0]\n        for j in range(0, n1):\n            if l1[j] != m2:\n                g = math.gcd(g, l1[j])\n        g += m2\n        if g > g1:\n            print(g)\n        else:\n            print(g1)", "import math\nl = []\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    x = list(map(int, input().split()))\n    x = sorted(list(set(x)))\n    if len(x) == 1:\n        print(2 * x[0])\n    elif len(x) == 2:\n        print(sum(x))\n    else:\n        a = len(x)\n        q = x[0]\n        for i in range(1, a - 2):\n            q = math.gcd(q, x[i])\n        c = math.gcd(q, x[-2]) + x[-1]\n        d = math.gcd(q, x[-1]) + x[-2]\n        print(max(c, d))", "def gcd(num1, num2):\n    if num2 == 0:\n        return num1\n    return gcd(num2, num1 % num2)\ntests = int(input())\nfor test in range(tests):\n    n = int(input())\n    numList = list(set(map(int, input().strip().split())))\n    leftList = []\n    rightList = []\n    if len(numList) == 1 and len(numList) != n:\n        print(numList[0] * 2)\n    else:\n        leftList.append(numList[0])\n        rightList.append(numList[::-1][0])\n        for i in range(len(numList) - 1):\n            leftList.append(gcd(leftList[i], numList[i + 1]))\n        numList.reverse()\n        for i in range(len(numList) - 1):\n            rightList.append(gcd(rightList[i], numList[i + 1]))\n        numList.reverse()\n        rightList.reverse()\n        temp = 0\n        maxGCD = 0\n        j = k = 0\n        for i in range(len(numList)):\n            if i == 0:\n                temp = numList[i] + rightList[i + 1]\n            elif i == len(numList) - 1:\n                temp = numList[i] + leftList[i - 1]\n            else:\n                temp = numList[i] + gcd(leftList[i - 1], rightList[i + 1])\n            if temp > maxGCD:\n                maxGCD = temp\n        print(maxGCD)", "import math\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    ar = list(map(int, input().split()))\n    ar = sorted(list(set(ar)))\n    if len(ar) == 1:\n        m = 2 * ar[0]\n    elif len(ar) == 2:\n        m = ar[0] + ar[1]\n    else:\n        highest = ar[len(ar) - 1]\n        shighest = ar[len(ar) - 2]\n        g_0 = 0\n        for x in range(0, len(ar) - 2):\n            g_0 = math.gcd(g_0, ar[x])\n        gh1 = math.gcd(g_0, highest)\n        gh2 = math.gcd(g_0, shighest)\n        m = max(highest + gh2, shighest + gh1)\n    print(m)", "def f_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = set(a)\n    l = list(s)\n    if len(l) == 2:\n        g = l[0] + l[1]\n    elif len(l) == 1:\n        g = 2 * l[0]\n    else:\n        m = max(l)\n        l.remove(m)\n        m1 = max(l)\n        l.remove(m1)\n        num1 = l[0]\n        gcd = f_gcd(num1, num1)\n        for i in range(1, len(l)):\n            gcd = f_gcd(gcd, l[i])\n        g1 = f_gcd(gcd, m)\n        g2 = f_gcd(gcd, m1)\n        g = max(m1 + g1, m + g2)\n    print(g)", "from functools import reduce\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    var1 = max(A)\n    r1 = A.count(var1)\n    if r1 == N:\n        print(2 * var1)\n    else:\n        s1 = set()\n        for j in A:\n            s1.add(j)\n        s1.remove(var1)\n        g1 = reduce(lambda x, y: gcd(x, y), s1)\n        ans1 = var1 + g1\n        var2 = max(s1)\n        s1.remove(var2)\n        s1.add(var1)\n        g2 = reduce(lambda x, y: gcd(x, y), s1)\n        ans2 = var2 + g2\n        if ans1 >= ans2:\n            print(ans1)\n        else:\n            print(ans2)", "import itertools\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nt = int(input())\nwhile t:\n    n = int(input())\n    l = list(map(int, input().split()))\n    ma = 0\n    if len(set(l)) == 1:\n        print(l[0] * 2)\n    else:\n        k = list(set(l))\n        k = sorted(k)\n        for i in range(len(k) - 2, len(k)):\n            j = k[i]\n            b = []\n            for o in range(0, len(k)):\n                if k[o] != j:\n                    b.append(k[o])\n            if len(b) == 1:\n                v = b[0]\n            else:\n                num1 = b[0]\n                num2 = b[1]\n                v = find_gcd(num1, num2)\n                for p in range(2, len(b)):\n                    v = find_gcd(v, b[p])\n            ma = max(ma, v + j)\n        print(ma)\n    t -= 1", "def gcd(a, b):\n    if a == 0 or b == 0:\n        return a + b\n    return gcd(b, a % b)\n\ndef checkallsame(a):\n    s = a[0]\n    for i in range(1, len(a)):\n        if a[i] != s:\n            return False\n    return True\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    if checkallsame(a):\n        print(2 * a[0])\n        continue\n    a = list(set(a))\n    prefixgcd = [0 for i in range(len(a))]\n    suffixgcd = [0 for i in range(len(a))]\n    prefixgcd[0] = a[0]\n    suffixgcd[-1] = a[-1]\n    for i in range(1, len(a)):\n        prefixgcd[i] = gcd(a[i], prefixgcd[i - 1])\n    for i in range(len(a) - 2, -1, -1):\n        suffixgcd[i] = gcd(a[i], suffixgcd[i + 1])\n    ans = -1\n    for i in range(len(a)):\n        X = a[i]\n        Y = 0\n        if i > 0:\n            Y += prefixgcd[i - 1]\n        if i < len(a) - 1:\n            Y = gcd(Y, suffixgcd[i + 1])\n        ans = max(ans, X + Y)\n    print(ans)", "from math import gcd\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    L = sorted(list(set(A)))\n    if len(L) == 1:\n        print(2 * L[0])\n    elif len(L) == 2:\n        print(L[0] + L[1])\n    else:\n        a1 = L[-1]\n        a2 = L[-2]\n        GCD = L[0]\n        for i in range(1, len(L) - 2):\n            GCD = gcd(GCD, L[i])\n        r1 = gcd(GCD, a1) + a2\n        r2 = gcd(GCD, a2) + a1\n        print(max(r1, r2))", "def gc(a, b):\n    if b == 0:\n        return a\n    return gc(b, a % b)\nfor i in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    b = list(set(b))\n    b.sort()\n    if len(b) == 1:\n        print(2 * b[0])\n    elif len(b) == 2:\n        print(b[0] + b[1])\n    else:\n        m = b[-1]\n        s = b[-2]\n        g = 0\n        for j in range(0, len(b) - 2):\n            g = gc(g, b[j])\n        maxi1 = gc(g, m)\n        maxi2 = gc(g, s)\n        print(max(maxi1 + s, maxi2 + m))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l = set(l)\n    l = list(l)\n    l.sort()\n    if len(l) == 1:\n        print(2 * l[0])\n    elif len(l) == 2:\n        print(l[0] + l[1])\n    else:\n        gcd1 = l[0]\n        for i in range(1, len(l) - 2):\n            gcd1 = math.gcd(gcd1, l[i])\n        result1 = math.gcd(gcd1, l[-2]) + l[-1]\n        result2 = math.gcd(gcd1, l[-1]) + l[-2]\n        if result1 > result2:\n            print(result1)\n        else:\n            print(result2)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    ar = sorted(list(set(ar)))\n    if len(ar) == 1:\n        m = 2 * ar[0]\n    elif len(ar) == 2:\n        m = ar[0] + ar[1]\n    else:\n        highest = ar[len(ar) - 1]\n        shighest = ar[len(ar) - 2]\n        g_0 = 0\n        for x in range(len(ar) - 2):\n            g_0 = math.gcd(g_0, ar[x])\n        gh1 = math.gcd(g_0, highest)\n        gh2 = math.gcd(g_0, shighest)\n        m = max(highest + gh2, shighest + gh1)\n    print(m)", "import math\ntestcase = int(input())\nfor i in range(testcase):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    l = sorted(list(set(l)))\n    if len(l) == 1:\n        print(2 * l[0])\n    elif len(l) == 2:\n        print(l[0] + l[1])\n    else:\n        res = l[0]\n        for i in range(0, len(l) - 2):\n            res = math.gcd(res, l[i])\n        a = math.gcd(res, l[-1]) + l[-2]\n        b = math.gcd(res, l[-2]) + l[-1]\n        print(max(a, b))", "import math\ntestcase = int(input())\nfor i in range(testcase):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    l = sorted(list(set(l)))\n    if len(l) == 1:\n        print(2 * l[0])\n    elif len(l) == 2:\n        print(l[0] + l[1])\n    else:\n        res = 0\n        for i in range(0, len(l) - 2):\n            res = math.gcd(res, l[i])\n        a = math.gcd(res, l[-1]) + l[-2]\n        b = math.gcd(res, l[-2]) + l[-1]\n        print(max(a, b))", "import math\n\ndef listgcd(l):\n    g = l[0]\n    for i in range(1, len(l)):\n        g = math.gcd(l[i], g)\n    return g\nfor _ in range(int(input())):\n    n = int(input())\n    s = set(map(int, input().split()))\n    ll = list(s)\n    if len(ll) == 1:\n        print(2 * ll[0])\n    else:\n        max1 = max(ll)\n        ll.remove(max1)\n        max2 = max(ll)\n        gd = max1 + listgcd(ll)\n        ll.append(max1)\n        ll.remove(max2)\n        gd1 = max2 + listgcd(ll)\n        if gd >= gd1:\n            print(gd)\n        else:\n            print(gd1)", "def gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\nfor t in range(int(input())):\n    n = int(input())\n    a = set(map(int, input().strip().split(' ')))\n    a = list(a)\n    if len(a) == 1:\n        print(2 * a[0])\n    else:\n        l = a\n        l.sort()\n        maxvalue1 = l[len(l) - 1]\n        result = a[0]\n        for i in range(1, len(a)):\n            if a[i] != maxvalue1:\n                result = gcd(a[i], result)\n        maxvalue1 = maxvalue1 + result\n        maxvalue2 = l[len(l) - 2]\n        result = a[0]\n        for i in range(1, len(a)):\n            if a[i] != maxvalue2:\n                result = gcd(a[i], result)\n        maxvalue2 = maxvalue2 + result\n        print(max(maxvalue1, maxvalue2))", "def gcd(a, b):\n    if b == 0:\n        return a\n    elif a == b:\n        return b\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    A = list(set(A))\n    n = len(A)\n    if len(A) < 2:\n        print(A[0] * 2)\n    else:\n        fgcd = [0 for i in range(n)]\n        bgcd = [0 for i in range(n)]\n        fgcd[0] = A[0]\n        for i in range(1, n):\n            fgcd[i] = gcd(fgcd[i - 1], A[i])\n        bgcd[-1] = A[-1]\n        for i in range(n - 2, -1, -1):\n            bgcd[i] = gcd(bgcd[i + 1], A[i])\n        temp = bgcd[-1] + fgcd[n - 2]\n        for i in range(n - 2, 0, -1):\n            if temp < A[i] + gcd(fgcd[i - 1], bgcd[i + 1]):\n                temp = A[i] + gcd(fgcd[i - 1], bgcd[i + 1])\n        if temp < A[0] + bgcd[1]:\n            temp = A[0] + bgcd[1]\n        print(temp)", "def gcd(a, b):\n    if b == 0:\n        return a\n    elif a == b:\n        return b\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    A = list(set(A))\n    n = len(A)\n    A.sort()\n    if len(A) < 2:\n        print(A[0] * 2)\n    else:\n        fgcd = [0 for i in range(n)]\n        bgcd = [0 for i in range(n)]\n        fgcd[0] = A[0]\n        for i in range(1, n):\n            fgcd[i] = gcd(fgcd[i - 1], A[i])\n        bgcd[-1] = A[-1]\n        for i in range(n - 2, -1, -1):\n            bgcd[i] = gcd(bgcd[i + 1], A[i])\n        temp = bgcd[-1] + fgcd[n - 2]\n        for i in range(n - 2, 0, -1):\n            if temp < A[i] + gcd(fgcd[i - 1], bgcd[i + 1]):\n                temp = A[i] + gcd(fgcd[i - 1], bgcd[i + 1])\n        if temp < A[0] + bgcd[1]:\n            temp = A[0] + bgcd[1]\n        print(temp)", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef maxsol(a):\n    if len(a) <= 2:\n        return sum(a)\n    a = list(set(a))\n    a.sort()\n    k = len(a) - 1\n    gcd = a[0]\n    for i in range(1, len(a) - 2):\n        gcd = find_gcd(gcd, a[i])\n    ans1 = find_gcd(gcd, a[-1]) + a[-2]\n    ans2 = find_gcd(gcd, a[-2]) + a[-1]\n    return max(ans1, ans2)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(maxsol(a))", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    b = []\n    for i in range(n - 1):\n        if a[i] != a[i + 1]:\n            b.append(a[i])\n    b.append(a[n - 1])\n    hcf = b[0]\n    l = len(b)\n    for i in range(1, l - 1):\n        hcf = gcd(hcf, b[i])\n        if hcf == 1:\n            break\n    mx = b[l - 1] + hcf\n    b[l - 1] += b[l - 2]\n    b[l - 2] = b[l - 1] - b[l - 2]\n    b[l - 1] = b[l - 1] - b[l - 2]\n    hcf = b[0]\n    for i in range(1, l - 1):\n        hcf = gcd(hcf, b[i])\n        if hcf == 1:\n            break\n    if mx > b[l - 1] + hcf:\n        print(mx)\n    else:\n        print(b[l - 1] + hcf)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = sorted(list(set(map(int, input().strip().split()))))\n    length = len(arr)\n    if length == 1:\n        print(2 * arr[0])\n    elif length == 2:\n        print(arr[0] + arr[1])\n    else:\n        g_0 = arr[0]\n        highest = arr[-1]\n        shighest = arr[-2]\n        for i in arr[:length - 2]:\n            g_0 = math.gcd(g_0, i)\n        gh1 = math.gcd(g_0, highest) + shighest\n        gh2 = math.gcd(g_0, shighest) + highest\n        print(max(gh1, gh2))", "import math\n\ndef gc(my_list):\n    result = my_list[0]\n    for x in my_list[1:]:\n        if result < x:\n            temp = result\n            result = x\n            x = temp\n        while x != 0:\n            temp = x\n            x = result % x\n            result = temp\n    return result\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l = list(set(l))\n    l.sort()\n    if len(l) == 1:\n        result = 2 * l[0]\n    elif len(l) == 2:\n        result = l[1] + l[0]\n    else:\n        a = l[-1]\n        b = l[-2]\n        l.remove(a)\n        l.remove(b)\n        p = gc(l)\n        g1 = math.gcd(a, p)\n        g2 = math.gcd(b, p)\n        result = max(a + g2, b + g1)\n    print(result)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(set([int(i) for i in input().split()]))\n    a.sort()\n    max_gcd = []\n    if len(a) == 1:\n        print(2 * a[0])\n    elif len(a) == 2:\n        print(a[0] + a[1])\n    else:\n        f = b = a[-1]\n        s = c = a[-2]\n        for i in range(0, len(a) - 2):\n            b = math.gcd(b, a[i])\n            c = math.gcd(c, a[i])\n        print(max(b + s, f + c))", "import sys\n\ndef read_line():\n    return sys.stdin.readline().split()\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_int_line():\n    return [int(v) for v in sys.stdin.readline().split()]\n\ndef gcd(x, y):\n    while x != 0 and y != 0:\n        z = y\n        y = x % y\n        x = z\n    return x + y\n\ndef compute_other_gcd(A, gcd1):\n    ret = 0\n    for x in A:\n        if x % gcd1 != 0:\n            ret = gcd(ret, x)\n    if ret == 0:\n        return A[-1]\n    return ret\nT = read_int()\nfor _test in range(T):\n    N = read_int()\n    A = read_int_line()\n    A.sort()\n    d = 1\n    answer = 0\n    while d * d <= A[0]:\n        if A[0] % d == 0:\n            answer = max(answer, d + compute_other_gcd(A, d))\n            answer = max(answer, A[0] // d + compute_other_gcd(A, A[0] // d))\n        d += 1\n    print(answer)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = list(set(a))\n    a.sort()\n    g = a[0]\n    if len(a) == 1:\n        print(a[0] + a[0])\n        continue\n    elif len(a) == 2:\n        print(a[0] + a[-1])\n        continue\n    else:\n        for i in range(1, len(a) - 2):\n            g = gcd(g, a[i])\n        g = max(gcd(g, a[-2]) + a[-1], gcd(g, a[-1]) + a[-2])\n    print(g)", "import math\nq = int(input())\nwhile q != 0:\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    x = set(a)\n    if len(x) == 1:\n        print(2 * a[0])\n    else:\n        b = list(x)\n        k = max(b)\n        b.remove(max(b))\n        m = b[0]\n        for i in range(len(b)):\n            m = math.gcd(m, b[i])\n        j = max(b)\n        b.remove(max(b))\n        b.append(k)\n        t = b[0]\n        for i in range(len(b)):\n            t = math.gcd(t, b[i])\n        print(max(m + k, t + j))\n    q = q - 1", "import math\nq = int(input())\nwhile q != 0:\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    x = set(a)\n    if len(x) == 1:\n        print(2 * a[0])\n    else:\n        b = list(x)\n        k = max(b)\n        b.remove(max(b))\n        m = b[0]\n        for i in range(len(b)):\n            m = math.gcd(m, b[i])\n        j = max(b)\n        b.remove(max(b))\n        b.append(k)\n        t = b[0]\n        for i in range(len(b)):\n            t = math.gcd(t, b[i])\n        print(max(m + k, t + j))\n    q = q - 1"]