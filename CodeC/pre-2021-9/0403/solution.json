["def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    N = int(input())\n    L = list(map(int, input().split()))\n    min_lcm = -1\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            l = lcm(L[i], L[j])\n            if l < min_lcm or min_lcm == -1:\n                min_lcm = l\n    print(min_lcm)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    N = int(input())\n    L = list(map(int, input().split()))\n    min_lcm = -1\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            l = lcm(L[i], L[j])\n            if l < min_lcm or min_lcm == -1:\n                min_lcm = l\n    print(min_lcm)", "def compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nt = input()\nfor c in range(0, int(t)):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    mini = 1e+18\n    for j in range(0, len(l1)):\n        for k in range(j + 1, len(l1)):\n            mini = min(compute_lcm(l1[j], l1[k]), mini)\n    print(mini)", "def compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nt = input()\nfor c in range(0, int(t)):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    mini = 1e+18\n    for j in range(0, len(l1)):\n        for k in range(j + 1, len(l1)):\n            mini = min(compute_lcm(l1[j], l1[k]), mini)\n    print(mini)", "Y = int(input())\n\ndef compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nfor i in range(Y):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    mini = 1e+18\n    for j in range(0, len(l1)):\n        for k in range(j + 1, len(l1)):\n            mini = min(compute_lcm(l1[j], l1[k]), mini)\n    print(mini)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    freeze = -1\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            l = lcm(a[i], a[j])\n            if l < freeze or freeze == -1:\n                freeze = l\n    print(freeze)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    freeze = -1\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            l = lcm(a[i], a[j])\n            if l < freeze or freeze == -1:\n                freeze = l\n    print(freeze)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    N = int(input())\n    L = list(map(int, input().split()))\n    min_lcm = -1\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            l = lcm(L[i], L[j])\n            if l < min_lcm or min_lcm == -1:\n                min_lcm = l\n    print(min_lcm)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    N = int(input())\n    L = list(map(int, input().split()))\n    min_lcm = -1\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            l = lcm(L[i], L[j])\n            if l < min_lcm or min_lcm == -1:\n                min_lcm = l\n    print(min_lcm)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    N = int(input())\n    L = list(map(int, input().split()))\n    min_lcm = -1\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            l = lcm(L[i], L[j])\n            if l < min_lcm or min_lcm == -1:\n                min_lcm = l\n    print(min_lcm)", "from sys import maxsize\nfrom math import gcd\n\ndef lcm(a: int, b: int) -> int:\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    n = int(input())\n    sensors = list(map(int, input().split()))\n    min_lcm = maxsize\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            min_lcm = min(lcm(sensors[i], sensors[j]), min_lcm)\n    print(min_lcm)", "from math import gcd\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\nfor _ in range(int(input())):\n    n = int(input())\n    res = 9223372036854775807\n    l = list(map(int, input().split()))\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            res = min(res, lcm(l[i], l[j]))\n    print(res)", "from math import gcd\nimport sys\ninf = 10 ** 20\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    x = int(input())\n    ans = inf\n    l = list(map(int, input().split()))\n    for i in range(x - 1):\n        for j in range(i + 1, x):\n            ans = min(ans, lcm(l[i], l[j]))\n    print(ans)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return abs(a * b) // gcd(a, b)\nT = int(input())\nfor x in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    an = lcm(a[0], a[1])\n    for i in range(n - 1):\n        if a[i] < an:\n            for j in range(i + 1, n):\n                if lcm(a[i], a[j]) < an:\n                    an = lcm(a[i], a[j])\n        else:\n            break\n    print(an)", "import math\n\ndef l(a, b):\n    return a * b // math.gcd(a, b)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    for j in range(n - 1):\n        for k in range(j + 1, n):\n            b += [l(a[j], a[k])]\n    print(min(b))", "from math import gcd\nfrom sys import maxsize\nfor _ in range(int(input())):\n    n = int(input())\n    time = list(map(int, input().split()))\n    mi_gcd = maxsize\n    for i in range(n):\n        for j in range(i + 1, n):\n            mi_gcd = min(mi_gcd, time[i] * time[j] // gcd(time[i], time[j]))\n    print(mi_gcd)", "Y = int(input())\n\ndef compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nfor i in range(Y):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    mini = 1e+18\n    for j in range(0, len(l1)):\n        for k in range(j + 1, len(l1)):\n            mini = min(compute_lcm(l1[j], l1[k]), mini)\n    print(mini)", "import math\n\ndef l(a, b):\n    return a * b // math.gcd(a, b)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    for j in range(n - 1):\n        for k in range(j + 1, n):\n            b += [l(a[j], a[k])]\n    print(min(b))", "Y = int(input())\n\ndef compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nfor i in range(Y):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    mini = 1e+18\n    for j in range(0, len(l1)):\n        for k in range(j + 1, len(l1)):\n            mini = min(compute_lcm(l1[j], l1[k]), mini)\n    print(mini)", "from math import gcd\nfor _ in range(int(input())):\n    lcm = lambda a, b: a * b // gcd(a, b)\n    N = int(input())\n    A = [int(s) for s in input().split()]\n    print(min((lcm(A[i], A[j]) for i in range(N) for j in range(i))))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    l = []\n    arr.sort()\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            l.append(arr[i] * arr[j] // math.gcd(arr[i], arr[j]))\n    print(min(l))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    l = []\n    arr.sort()\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            l.append(arr[i] * arr[j] // math.gcd(arr[i], arr[j]))\n    print(min(l))", "from math import gcd\nimport sys\ninf = 10 ** 20\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    x = int(input())\n    ans = inf\n    l = list(map(int, input().split()))\n    for i in range(x - 1):\n        for j in range(i + 1, x):\n            ans = min(ans, lcm(l[i], l[j]))\n    print(ans)", "from math import gcd\nimport sys\ninf = 10 ** 20\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    x = int(input())\n    ans = inf\n    l = list(map(int, input().split()))\n    for i in range(x - 1):\n        for j in range(i + 1, x):\n            ans = min(ans, lcm(l[i], l[j]))\n    print(ans)", "from math import gcd\nimport sys\ninf = 10 ** 20\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    x = int(input())\n    ans = inf\n    l = list(map(int, input().split()))\n    for i in range(x - 1):\n        for j in range(i + 1, x):\n            ans = min(ans, lcm(l[i], l[j]))\n    print(ans)", "from math import gcd\n\ndef lcm(x, y):\n    r = x * y // gcd(x, y)\n    return r\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    m = lcm(a[0], a[1])\n    for i in range(n - 1):\n        for k in range(i + 1, n):\n            v = lcm(a[i], a[k])\n            m = min(m, v)\n    print(m)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor t in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l1.sort()\n    f = 2 ** 100\n    for i in range(n):\n        for j in range(i + 1, n):\n            f = min(f, lcm(l1[i], l1[j]))\n    print(f)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor t in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    f = 2 ** 100\n    for i in range(n):\n        for j in range(i + 1, n):\n            f = min(f, lcm(l1[i], l1[j]))\n    print(f)", "Y = int(input())\n\ndef compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nfor i in range(Y):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    mini = 1e+18\n    for j in range(0, len(l1)):\n        for k in range(j + 1, len(l1)):\n            mini = min(compute_lcm(l1[j], l1[k]), mini)\n    print(mini)", "def get_hcf(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef get_lcm(a, b):\n    return a * b // get_hcf(a, b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    minn = get_lcm(arr[0], arr[1])\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            var2 = get_lcm(arr[i], arr[j])\n            minn = min(minn, var2)\n    print(minn)", "t = int(input())\n\ndef compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nfor i in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    mini = 1e+18\n    for j in range(0, len(l1)):\n        for k in range(j + 1, len(l1)):\n            mini = min(compute_lcm(l1[j], l1[k]), mini)\n    print(mini)", "def get_hcf(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef get_lcm(a, b):\n    return a * b // get_hcf(a, b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    minn = get_lcm(arr[0], arr[1])\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            var2 = get_lcm(arr[i], arr[j])\n            minn = min(minn, var2)\n    print(minn)", "t = int(input())\n\ndef compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nfor i in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    mini = 1e+18\n    for j in range(0, len(l1)):\n        for k in range(j + 1, len(l1)):\n            mini = min(compute_lcm(l1[j], l1[k]), mini)\n    print(mini)", "t = int(input())\n\ndef compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nfor i in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    mini = 1e+18\n    for j in range(0, len(l1)):\n        for k in range(j + 1, len(l1)):\n            mini = min(compute_lcm(l1[j], l1[k]), mini)\n    print(mini)", "t = int(input())\n\ndef compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nfor i in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    mini = 1e+18\n    for j in range(0, len(l1)):\n        for k in range(j + 1, len(l1)):\n            mini = min(compute_lcm(l1[j], l1[k]), mini)\n    print(mini)", "t = int(input())\n\ndef compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nfor i in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    mini = 1e+18\n    for j in range(0, len(l1)):\n        for k in range(j + 1, len(l1)):\n            mini = min(compute_lcm(l1[j], l1[k]), mini)\n    print(mini)", "t = int(input())\n\ndef compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nfor i in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    mini = 1e+18\n    for j in range(0, len(l1)):\n        for k in range(j + 1, len(l1)):\n            mini = min(compute_lcm(l1[j], l1[k]), mini)\n    print(mini)", "t = int(input())\n\ndef compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nfor i in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    mini = 1e+18\n    for j in range(0, len(l1)):\n        for k in range(j + 1, len(l1)):\n            mini = min(compute_lcm(l1[j], l1[k]), mini)\n    print(mini)", "t = int(input())\n\ndef compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nfor i in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    mini = 1e+18\n    for j in range(0, len(l1)):\n        for k in range(j + 1, len(l1)):\n            mini = min(compute_lcm(l1[j], l1[k]), mini)\n    print(mini)", "t = int(input())\n\ndef compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nfor i in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    mini = 1e+18\n    for j in range(0, len(l1)):\n        for k in range(j + 1, len(l1)):\n            mini = min(compute_lcm(l1[j], l1[k]), mini)\n    print(mini)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    lcm = a * b // gcd(a, b)\n    return lcm\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    m = list(map(int, input().split()))\n    mini = 1e+18\n    for j in range(0, len(m)):\n        for k in range(j + 1, len(m)):\n            mini = min(lcm(m[j], m[k]), mini)\n    print(int(mini))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    lcm = a * b // gcd(a, b)\n    return lcm\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    m = list(map(int, input().split()))\n    mini = 1e+18\n    for j in range(0, len(m)):\n        for k in range(j + 1, len(m)):\n            mini = min(lcm(m[j], m[k]), mini)\n    print(int(mini))", "import math\nt = int(input().strip())\nfor i in range(0, t):\n    n = int(input().strip())\n    ans = 10000000000000000000000000000000000000000000\n    arr = input().strip().split()\n    for i in range(0, n):\n        arr[i] = int(arr[i])\n    for k in range(n):\n        for j in range(k + 1, n):\n            lcmm = arr[k] * arr[j] // math.gcd(arr[k], arr[j])\n            ans = min(ans, lcmm)\n    print(ans)", "def gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\nT = int(input())\nfor tj in range(T):\n    N = int(input())\n    frequencies = list(map(int, input().split()))\n    min_v = 10 ** 18 + 1\n    for i in range(N):\n        for j in range(i + 1, N):\n            lcm = frequencies[i] * frequencies[j] // gcd(frequencies[i], frequencies[j])\n            min_v = min(lcm, min_v)\n    print(min_v)", "from math import *\nimport sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\ninf = 10 ** 20\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = inf\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans = min(ans, lcm(l[i], l[j]))\n    print(ans)", "from math import *\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = inf\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans = min(ans, lcm(l[i], l[j]))\n    print(ans)", "from math import *\nimport sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\ninf = 10 ** 20\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = inf\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans = min(ans, lcm(l[i], l[j]))\n    print(ans)", "def gcd(x, y):\n    while x > 0:\n        (x, y) = (y % x, x)\n    return y\nfor _ in range(int(input())):\n    n = int(input())\n    x = sorted(list(map(int, input().split())))\n    ans = 1e+18\n    for i in range(n - 1):\n        if ans < x[i]:\n            break\n        for j in range(i + 1, n):\n            if ans < x[j]:\n                break\n            temp = gcd(x[i], x[j])\n            temp = x[i] * x[j] // temp\n            if temp < ans:\n                ans = temp\n    print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    s = []\n    for j in range(n):\n        for k in range(j + 1, n):\n            s.append(l[j] * l[k] // math.gcd(l[j], l[k]))\n    print(min(s))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    s = []\n    for j in range(n):\n        for k in range(j + 1, n):\n            s.append(l[j] * l[k] // math.gcd(l[j], l[k]))\n    print(min(s))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    a = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            a.append(l[i] * l[j] // math.gcd(l[i], l[j]))\n    print(min(a))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    a = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            a.append(l[i] * l[j] // math.gcd(l[i], l[j]))\n    print(min(a))", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            k = l[i] * l[j] // gcd(l[i], l[j])\n            l1.append(k)\n    print(min(l1))", "from math import gcd\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            k = l[i] * l[j] // gcd(l[i], l[j])\n            l1.append(k)\n    print(min(l1))", "def hcf(a, b):\n    if b == 0:\n        return a\n    return hcf(b, a % b)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    p = a[0] * a[1] // hcf(a[0], a[1])\n    mi = p\n    for i in range(n):\n        for j in range(i + 1, n):\n            p = a[i] * a[j] // hcf(a[i], a[j])\n            if mi > p:\n                mi = p\n    print(mi)", "def hcf(a, b):\n    if b == 0:\n        return a\n    return hcf(b, a % b)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    p = a[0] * a[1] // hcf(a[0], a[1])\n    mi = p\n    for i in range(n):\n        for j in range(i + 1, n):\n            p = a[i] * a[j] // hcf(a[i], a[j])\n            if mi > p:\n                mi = p\n    print(int(mi))", "def hcf(a, b):\n    if b == 0:\n        return a\n    return hcf(b, a % b)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    p = a[0] * a[1] // hcf(a[0], a[1])\n    mi = p\n    for i in range(n):\n        for j in range(i + 1, n):\n            p = a[i] * a[j] // hcf(a[i], a[j])\n            if mi > p:\n                mi = p\n    print(int(mi))", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            p = l[i] * l[j] // gcd(l[i], l[j])\n            l1.append(p)\n    print(min(l1))", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            p = l[i] * l[j] // gcd(l[i], l[j])\n            l1.append(p)\n    print(min(l1))", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            a = l[i] * l[j] // gcd(l[i], l[j])\n            l1.append(a)\n    print(min(l1))", "t = int(input())\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(t):\n    n = int(input())\n    a = [int(v) for v in input().split()]\n    minLcm = 10000000000 ** 2 + 1\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            lcm = a[i] * a[j] // gcd(a[i], a[j])\n            if lcm < minLcm:\n                minLcm = lcm\n    print(minLcm)", "def HcmLcm(a, b):\n    if a == b:\n        return a\n    else:\n        c = a\n        d = b\n        while b % a > 0:\n            r = b % a\n            b = a\n            a = r\n        return c * d // a\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    l = []\n    for i in range(n - 1):\n        for j in range(i + 1, n, 1):\n            l.append(HcmLcm(a[i], a[j]))\n    l.sort()\n    print(l[0])", "import sys\nfrom math import gcd\nsys.setrecursionlimit(10 ** 5 + 1)\ninf = int(10 ** 20)\nmax_val = inf\nmin_val = -inf\nRW = lambda : sys.stdin.readline().strip()\nRI = lambda : int(RW())\nRMI = lambda : [int(x) for x in sys.stdin.readline().strip().split()]\nRWI = lambda : [x for x in sys.stdin.readline().strip().split()]\n\ndef LCM(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(RI()):\n    lens = RI()\n    arrs = RMI()\n    ans = int(10 ** 18) + 10\n    for i in range(lens):\n        for j in range(i + 1, lens):\n            ans = min(ans, LCM(arrs[i], arrs[j]))\n    print(ans)", "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = []\n    for i in range(len(l1)):\n        for j in range(i + 1, len(l1)):\n            l2.append(lcm(l1[i], l1[j]))\n    l2.sort()\n    print(l2[0])", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef LCM(a, b):\n    return a * b // gcd(a, b)\n\ndef Multiples(Freqs, N):\n    List = []\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            List.append(LCM(Freqs[i], Freqs[j]))\n    List.sort()\n    return List\nfor _ in range(int(input())):\n    N = int(input())\n    Freqs = [int(s) for s in input().split()]\n    Freqs.sort()\n    least = Multiples(Freqs, N)\n    print(least[0])", "def gcd(m, n):\n    if n == 0:\n        return m\n    else:\n        return gcd(n, m % n)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    m = pow(10, 20)\n    for j in range(1, n):\n        for x in range(0, j):\n            temp = l[j] * l[x] // gcd(l[j], l[x])\n            if m > temp:\n                m = temp\n    print(m)", "def gcd(m, n):\n    if n == 0:\n        return m\n    else:\n        return gcd(n, m % n)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l = sorted(l)\n    m = pow(10, 20)\n    for j in range(1, n):\n        for x in range(0, j):\n            temp = l[j] * l[x] // gcd(l[j], l[x])\n            if m > temp:\n                m = temp\n    print(m)", "import math\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 1e+19\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans = min(ans, lcm(a[i], a[j]))\n    print(ans)", "import math\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 1e+19\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans = min(ans, lcm(a[i], a[j]))\n    print(ans)", "def hcf(a, b):\n    if b == 0:\n        return a\n    return hcf(b, a % b)\n\ndef lcm(a, b):\n    return a * b // hcf(a, b)\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    lt = list(map(int, input().split()))\n    ans = 1e+19\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans = min(ans, lcm(lt[i], lt[j]))\n    print(ans)", "from math import gcd\ntest_case = int(input())\nfor i in range(test_case):\n    size = int(input())\n    elements = list(map(int, input().split()))\n    empty = []\n    for j in range(size - 1):\n        for k in range(j + 1, size):\n            lcm = elements[j] * elements[k] // gcd(elements[j], elements[k])\n            empty.append(lcm)\n    print(min(empty))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    for j in range(n - 1):\n        for k in range(j + 1, n):\n            lcm = a[j] * a[k] // math.gcd(a[j], a[k])\n            b.append(lcm)\n    print(min(b))", "import math\n\ndef lcm(a, b):\n    l = a * b // math.gcd(a, b)\n    return l\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    k = [int(n) for n in input().split()]\n    li = []\n    for i in range(0, n - 1):\n        for j in range(i + 1, n):\n            l = lcm(k[i], k[j])\n            li.append(l)\n    print(min(li))", "import math\nfrom itertools import combinations\n\ndef lcm(pair):\n    return pair[0] * pair[1] // math.gcd(pair[0], pair[1])\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pairs = list(combinations(arr, 2))\n    res = min(pairs, key=lcm)\n    print(lcm(res))", "import math\n\ndef lcm(a, b):\n    l = a * b // math.gcd(a, b)\n    return l\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    k = [int(n) for n in input().split()]\n    li = []\n    for i in range(0, n - 1):\n        for j in range(i + 1, n):\n            l = lcm(k[i], k[j])\n            li.append(l)\n    print(min(li))", "import math\nfrom itertools import combinations\n\ndef lcm(pair):\n    return pair[0] * pair[1] // math.gcd(pair[0], pair[1])\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pairs = list(combinations(arr, 2))\n    res = min(pairs, key=lcm)\n    print(lcm(res))", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().strip().split()))[:n]\n    LCM = []\n    i = 0\n    for j in range(i, n):\n        for k in range(n):\n            if j == k:\n                pass\n            else:\n                LCM.append(A[j] * A[k] // gcd(A[j], A[k]))\n    print(min(LCM))", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().strip().split()))[:n]\n    LCM = []\n    i = 0\n    for j in range(i, n):\n        for k in range(n):\n            if j == k:\n                pass\n            else:\n                LCM.append(A[j] * A[k] // gcd(A[j], A[k]))\n    print(min(LCM))", "from itertools import combinations\nfrom functools import lru_cache\n\n@lru_cache(None)\ndef gcd(a, b):\n    if a > 0:\n        return gcd(b % a, a)\n    return b\n\n@lru_cache(None)\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    n = int(input())\n    res_arr = []\n    inp_arr = [int(i) for i in input().strip().split()]\n    for tup in combinations(inp_arr, 2):\n        res_arr.append(lcm(*sorted(tup)))\n    print(min(res_arr))", "from itertools import combinations\nfrom functools import lru_cache\n\n@lru_cache(None)\ndef gcd(a, b):\n    if a > 0:\n        return gcd(b % a, a)\n    return b\n\n@lru_cache(None)\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    n = int(input())\n    res_arr = []\n    inp_arr = [int(i) for i in input().strip().split()]\n    for tup in combinations(inp_arr, 2):\n        res_arr.append(lcm(*sorted(tup)))\n    print(min(res_arr))"]