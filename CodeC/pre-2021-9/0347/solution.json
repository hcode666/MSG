["for t in range(int(input())):\n    input()\n    ai = [int(i) for i in input().split()]\n    mi = min(ai)\n    print(mi * (sum(ai) - mi))", "test = int(input())\nfor i in range(test):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    sum = 0\n    for i in range(1, len(a)):\n        sum += a[0] * a[i]\n    print(sum)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print((sum(l) - min(l)) * min(l))", "i = int(input())\nlistk = []\nfor _ in range(i):\n    p = int(input())\n    kk = input().split()\n    kk2 = []\n    for ele in kk:\n        kk2.append(int(ele))\n    listk.append(min(kk2) * (sum(kk2) - min(kk2)))\nfor ele in listk:\n    print(ele)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a = sorted(a)\n    ans = 0\n    for i in range(1, n):\n        ans += a[0] * a[i]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mn = min(l)\n    idx = l.index(mn)\n    l.pop(idx)\n    s = sum(l)\n    p = s * mn\n    print(p)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    count = 0\n    for i in range(1, n):\n        count += l[0] * l[i]\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mn = min(l)\n    l.remove(mn)\n    cnt = 0\n    for i in range(n - 1):\n        cnt += l[i] * mn\n    print(cnt)", "for _ in range(int(input())):\n    result = 0\n    n = int(input())\n    list_a = list(map(int, input().split()))\n    x = min(list_a)\n    list_a.remove(x)\n    for i in list_a:\n        result = result + i * x\n    print(result)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    sc = min(l)\n    l.remove(sc)\n    count = 0\n    for i in range(n - 1):\n        count += l[i] * sc\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    sc = min(l)\n    l.remove(sc)\n    count = 0\n    for i in range(n - 1):\n        count += l[i] * sc\n    print(count)", "t = int(input())\nfor t in range(t):\n    n = int(input())\n    p = sorted([int(i) for i in input().split()])\n    cost = 0\n    for j in range(1, n):\n        cost += p[0] * p[j]\n    print(cost)", "for _ in range(int(input())):\n    n = int(input())\n    n_list = sorted(list(map(int, input().split())))\n    road = 0\n    for i in range(1, n):\n        road += n_list[0] * n_list[i]\n    print(road)", "t = int(input())\nfor t in range(t):\n    n = int(input())\n    p = sorted([int(i) for i in input().split()])\n    cost = 0\n    for j in range(1, n):\n        cost += p[0] * p[j]\n    print(cost)", "for t in range(int(input())):\n    input()\n    ai = [int(i) for i in input().split()]\n    mi = min(ai)\n    print(mi * (sum(ai) - mi))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    s = 0\n    p = l[0]\n    for i in range(1, n):\n        s = s + p * l[i]\n    print(s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    s = 0\n    p = l[0]\n    for i in range(1, n):\n        s = s + p * l[i]\n    print(s)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    population = sorted(list(map(int, input().split())))\n    total = sum(population) - population[0]\n    road_cost = total * population[0]\n    print(road_cost)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    cost = 0\n    for e in a[1:]:\n        cost += e * a[0]\n    print(cost)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    cost = 0\n    for e in a[1:]:\n        cost += e * a[0]\n    print(cost)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    cost = 0\n    for e in a[1:]:\n        cost += e * a[0]\n    print(cost)", "for t in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    m = min(p)\n    print((sum(p) - m) * m)", "T = int(input())\nfor _ in range(0, T):\n    n = int(input())\n    p = list(map(int, input().split()))\n    p = sorted(p)\n    p1 = p[0]\n    cost = 0\n    for i in range(1, len(p)):\n        cost += p1 * p[i]\n    print(cost)", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    cities = list(map(int, input().split()))\n    minCity = min(cities)\n    sol = sum((city * minCity for city in cities)) - minCity ** 2\n    print(sol)", "for val in range(int(input())):\n    x = int(input())\n    y = list(map(int, input().split()))\n    a = min(y)\n    y.remove(a)\n    mul = 0\n    for val in y:\n        mul += a * val\n    print(mul)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr = sorted(arr)\n    x = arr[0]\n    l = arr[1:]\n    s = 0\n    for i in l:\n        s = s + x * i\n    print(s)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = min(a)\n    a.remove(x)\n    print(sum(a) * x)", "for i in range(int(input())):\n    N = int(input())\n    R = list(map(int, input().split()))\n    R.sort()\n    a = 0\n    for j in range(1, N):\n        a = a + R[0] * R[j]\n    print(a)", "def merge(A, B):\n    (C, i, j) = ([], 0, 0)\n    while len(C) < len(A) + len(B):\n        if A[i] < B[j]:\n            C.append(A[i])\n            i += 1\n            if i == len(A):\n                C.extend(B[j:])\n        else:\n            C.append(B[j])\n            j += 1\n            if j == len(B):\n                C.extend(A[i:])\n    return C\n\ndef merge_sort(L):\n    n = len(L)\n    if n <= 1:\n        return L\n    A = merge_sort(L[:n // 2])\n    B = merge_sort(L[n // 2:])\n    C = merge(A, B)\n    return C\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    l = merge_sort(l)\n    m = l[0]\n    su = sum(l[1:])\n    print(m * su)", "t = int(input())\nfor _ in range(t):\n    n = int(input().strip())\n    arr = [int(i) for i in input().strip().split()]\n    smol = min(arr)\n    cos = 0\n    for i in range(0, n):\n        if arr[i] != smol:\n            cos += arr[i] * smol\n    print(cos)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    m = min(l)\n    l.remove(m)\n    sum = 0\n    for x in l:\n        sum += x * m\n    print(sum)", "for t in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    q = min(p)\n    s = sum(p)\n    print((s - q) * q)", "n = int(input())\nfor i in range(n):\n    t = int(input())\n    lst = [int(i) for i in input().split(' ')][:t]\n    mul = min(lst)\n    lst.remove(mul)\n    cost = 0\n    for i in lst:\n        cost += mul * i\n    print(cost)", "for _ in range(int(input())):\n    N = int(input())\n    L = list(map(int, input().split()))\n    m = min(L)\n    L.remove(m)\n    dist = 0\n    for i in L:\n        dist += m * i\n    print(dist)", "(t, i) = (int(input()), 1)\ncost = 0\nwhile i <= t:\n    c = int(input())\n    p = list(map(int, input().split()))\n    p.sort()\n    for j in range(len(p) - 1, 0, -1):\n        cost += p[j] * p[0]\n    print(cost)\n    cost = 0\n    i += 1", "(t, i) = (int(input()), 1)\ncost = 0\nwhile i <= t:\n    c = int(input())\n    p = list(map(int, input().split()))\n    p.sort()\n    for j in range(len(p) - 1, 0, -1):\n        cost += p[j] * p[0]\n    print(cost)\n    cost = 0\n    i += 1", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = min(a)\n    s = sum(a) - m\n    print(s * m)", "def solve():\n    n = int(input())\n    l1 = [int(i) for i in input().split()]\n    mini = min(l1)\n    l1.remove(mini)\n    temp = 0\n    for i in range(n - 1):\n        temp += mini * l1[i]\n    return temp\nt = int(input())\nfor i in range(t):\n    print(solve())", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    cnt = 0\n    l.sort()\n    if n == 1:\n        print(0)\n    else:\n        for i in range(1, n):\n            cnt = cnt + l[0] * l[i]\n        print(cnt)", "t = input()\nfor c in range(0, int(t)):\n    n = input()\n    p = input().split()\n    arr = []\n    for x in p:\n        arr.append(int(x))\n    arr.sort()\n    total = 0\n    for y in range(1, int(n)):\n        total = total + arr[0] * arr[y]\n    print(total)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    s = 0\n    for i in range(1, n):\n        s = s + l[0] * l[i]\n    print(s)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    x = l[0]\n    ans = 0\n    for i in range(1, len(l)):\n        ans += l[i] * x\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = min(a)\n    s = sum(a)\n    s = s * m - m * m\n    print(s)", "t = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    x = list(map(int, input().split()))\n    m = min(x)\n    ans = 0\n    x.remove(m)\n    ans = m * sum(x)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    res = 0\n    a = min(l)\n    l.remove(a)\n    for i in l:\n        res += i * a\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mini = min(l)\n    print((sum(l) - mini) * mini)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    num1 = list(map(int, input().split(' ')))\n    val = 0\n    minVal = min(num1)\n    for i in num1:\n        val += minVal * i\n    val -= minVal * minVal\n    print(val)", "for i in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split(' ')))\n    li.sort()\n    sum = 0\n    for i in range(1, n):\n        sum += li[i] * li[0]\n    print(sum)", "for _ in range(int(input())):\n    n = int(input())\n    m = list(map(int, input().split()))\n    m.sort()\n    ans = 0\n    for i in range(1, n):\n        ans += m[i] * m[0]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    p.sort()\n    cost = 0\n    for i in range(1, len(p)):\n        cost += p[0] * p[i]\n    print(cost)", "for _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    mi = min(li)\n    su = sum(li) - mi\n    print(mi * su)", "def main():\n    for _ in range(int(input())):\n        n = input()\n        lst = [int(i) for i in input().split()]\n        lst.sort()\n        sm = 0\n        for j in range(1, len(lst)):\n            sm += lst[0] * lst[j]\n        print(sm)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(j) for j in input().split()]\n    a = sorted(a)\n    ans = 0\n    for i in range(1, n):\n        ans += a[i] * a[0]\n    print(ans)", "tests = int(input())\nfor i in range(tests):\n    length = int(input())\n    arr = list(map(int, input().split()))\n    minimum = min(arr)\n    ans = 0\n    for j in arr:\n        ans += minimum * j\n    print(ans - minimum ** 2)", "def main():\n    from sys import stdin, stdout\n    from collections import Counter\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        l = list((int(x) for x in stdin.readline().split()))\n        t = min(l)\n        stdout.write(str(t * (sum(l) - t)) + '\\n')\nmain()", "def main():\n    from sys import stdin, stdout\n    from collections import Counter\n    t = int(stdin.readline())\n\n    def f(c, n):\n        t = min(c)\n        return sum((t * i for i in c if i != t))\n    for i in range(t):\n        n = int(stdin.readline())\n        (*l,) = map(int, stdin.readline().split())\n        stdout.write(str(f(l, n)) + '\\n')\nmain()", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    mini = a[0]\n    cost = 0\n    for i in range(1, n):\n        cost += mini * a[i]\n    print(cost)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    mini = a[0]\n    a.remove(a[0])\n    cost = 0\n    for i in range(n - 1):\n        cost += mini * a[i]\n    print(cost)", "for _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    lis.sort()\n    mi = lis[0]\n    ans = 0\n    for i in lis[1:]:\n        ans += mi * i\n    print(ans)", "t = int(input())\nfor i in range(0, t):\n    sum1 = 0\n    n = int(input())\n    p = list(map(int, input().split()))\n    p.sort()\n    for j in range(1, n):\n        sum1 += p[0] * p[j]\n    print(sum1)", "def argmin(arr):\n    min_idx = 0\n    min_val = float('inf')\n    for (idx, val) in enumerate(arr):\n        if val < min_val:\n            min_val = val\n            min_idx = idx\n    return min_idx\n\ndef getTotalCost(p):\n    total_cost = 0\n    min_idx = argmin(p)\n    for (idx, population) in enumerate(p):\n        if idx == min_idx:\n            continue\n        total_cost += population * p[min_idx]\n    return total_cost\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    total_cost = getTotalCost(p)\n    print(total_cost)", "t = int(input())\nfor i in range(0, t):\n    sum1 = 0\n    n = int(input())\n    p = list(map(int, input().split()))\n    p.sort()\n    for j in range(1, n):\n        sum1 += p[0] * p[j]\n    print(sum1)", "for i in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    print(min(l) * (sum(l) - min(l)))", "for _ in range(int(input())):\n    n = int(input())\n    list1 = sorted([int(x) for x in input().split()])\n    list2 = [0, 1]\n    l = len(list1)\n    if l not in list2:\n        print(sum(list1[1:len(list1)]) * list1[0])\n    else:\n        print(0)", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    a = [int(d) for d in input().split()]\n    a.sort()\n    n = a[0]\n    summ = 0\n    for i in range(1, len(a)):\n        summ = summ + n * a[i]\n    print(summ)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(sum(arr) * min(arr) - min(arr) * min(arr))", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = min(arr)\n    ans = x * (sum(arr) - x)\n    print(ans)\n    t = t - 1", "def solve(num, l):\n    l.sort()\n    su = 0\n    for i in range(1, num):\n        su += l[0] * l[i]\n    return su\nn = int(input())\nresults = []\nfor i in range(0, n):\n    num = int(input())\n    l = list(map(int, input().split()))\n    out = solve(num, l)\n    results.append(out)\nfor j in results:\n    print(j)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (mi, s) = (min(l), 0)\n    for i in l:\n        if i == mi:\n            continue\n        else:\n            s += mi * i\n    print(s)", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    a = [int(d) for d in input().split()]\n    a.sort()\n    n = a[0]\n    summ = 0\n    for i in range(1, len(a)):\n        summ = summ + n * a[i]\n    print(summ)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (mi, s) = (min(l), 0)\n    for i in l:\n        if i == mi:\n            continue\n        else:\n            s += mi * i\n    print(s)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (mi, s) = (min(l), 0)\n    for i in l:\n        if i == mi:\n            continue\n        else:\n            s += mi * i\n    print(s)", "for i in range(int(input())):\n    N = int(input())\n    P = []\n    for word in input().split():\n        P.append(int(word))\n    P.sort()\n    cost = 0\n    for i in range(len(P)):\n        if i != 0:\n            cost_of_this_road = int(P[0]) * int(P[i])\n            cost = cost_of_this_road + cost\n    print(cost)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    cities = list(map(int, input().split()))\n    m = min(cities)\n    s = 0\n    for i in range(n):\n        s += cities[i] * m\n    s -= m * m\n    print(s)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    sum = 0\n    for i in range(1, n):\n        sum += a[0] * a[i]\n    print(sum)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mr = min(l)\n    cost = 0\n    for i in l:\n        if i != mr:\n            cost += mr * i\n    print(cost)", "for i in range(int(input())):\n    n = map(int, input().split())\n    p = [int(i) for i in input().split()]\n    ans = 0\n    m = min(p)\n    for i in p:\n        if i != m:\n            ans += i * m\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    sum = 0\n    for i in range(1, n):\n        sum += l[0] * l[i]\n    print(sum)", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    p.sort()\n    c = 1\n    a = p.pop(0)\n    for i in range(n - 1):\n        c += a * p[i]\n    print(c - 1)", "T = int(input())\nfor i in range(T):\n    input()\n    citiesPopulation = list(map(int, input().split()))\n    min = citiesPopulation[0]\n    for j in citiesPopulation:\n        if j < min:\n            min = j\n    budget = 0\n    for j in citiesPopulation:\n        budget = budget + min * j\n    budget = budget - min * min\n    print(budget)", "T = int(input())\nfor i in range(T):\n    input()\n    citiesPopulation = list(map(int, input().split()))\n    min = citiesPopulation[0]\n    for j in citiesPopulation:\n        if j < min:\n            min = j\n    budget = 0\n    for j in citiesPopulation:\n        budget = budget + min * j\n    budget = budget - min * min\n    print(budget)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    maspeque = l.pop(0)\n    print(maspeque * sum(l))", "for i in range(int(input())):\n    input()\n    cities = list(map(int, input().split()))\n    minCity = min(cities)\n    print((sum(cities) - minCity) * minCity)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = list(map(int, input().split()))\n    mul = min(x)\n    x.remove(mul)\n    resp = 0\n    for i in range(len(x)):\n        resp += x[i] * mul\n    print(resp)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    arrP = [int(char) for char in input().split()]\n    arrP.sort()\n    s = arrP[0]\n    arrP.remove(s)\n    l = sum(arrP)\n    print(l * s)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    l.reverse()\n    m = 0\n    for i in range(len(l[:n - 1])):\n        m = m + l[n - 1] * l[i]\n    print(m)", "for i in range(int(input())):\n    N = int(input())\n    C = list(map(int, input().split(' ')))\n    C.sort()\n    x = 0\n    for j in range(1, N):\n        x += C[0] * C[j]\n    print(x)", "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    op = list(map(int, input().split()))\n    minu = min(op)\n    op.pop(op.index(min(op)))\n    hena = 0\n    for aw in op:\n        hena += minu * aw\n    print(hena)", "for _ in range(int(input())):\n    num_cities = int(input())\n    population = list(map(int, input().split()))\n    population = sorted(population)\n    p = population[0]\n    ans = 0\n    for i in range(1, num_cities):\n        ans += p * population[i]\n    print(ans)", "for _ in range(int(input())):\n    num_cities = int(input())\n    population = list(map(int, input().split()))\n    population = sorted(population)\n    p = population[0]\n    ans = 0\n    for i in range(1, num_cities):\n        ans += p * population[i]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    l = sorted(p)\n    x = l[0]\n    sum1 = 0\n    for i in range(1, n):\n        sum1 += x * l[i]\n    print(sum1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    s = 0\n    p = l[0]\n    for j in range(1, n, 1):\n        s = s + p * l[j]\n    print(s)", "t = int(input())\nfor i in range(t):\n    n = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    arr.sort()\n    print(arr[0] * sum(arr[1:]))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    arr.sort()\n    ans = arr[0] * sum(arr[1:n])\n    print(ans)", "n = int(input())\nfor i in range(n):\n    t1 = int(input())\n    l = [int(i) for i in input().split()]\n    l.sort()\n    sum = 0\n    for i in range(1, len(l)):\n        sum = sum + l[0] * l[i]\n    print(sum)", "n = int(input())\nfor i in range(n):\n    l = []\n    t1 = int(input())\n    t2 = str(input()).split()\n    for item in t2:\n        l.append(int(item))\n    l.sort()\n    sum = 0\n    for i in range(1, len(l)):\n        sum = sum + l[0] * l[i]\n    print(sum)", "from bisect import bisect_left, bisect_right\nfrom heapq import heapify, heappush, heappop\nfrom cmath import pi\nfrom distutils import extension\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\nfrom collections import deque, defaultdict\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\nfor _ in range(ii()):\n    n = ii()\n    arr = il()\n    mi = min(arr)\n    ans = 0\n    f = True\n    for l in arr:\n        if l == mi and f:\n            f = not f\n            continue\n        ans += mi * l\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    y = x.index(min(x))\n    z = min(x)\n    sum1 = 0\n    for j in range(len(x)):\n        if j != y:\n            sum1 = sum1 + z * x[j]\n    print(sum1)", "t = int(input())\nwhile t:\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    m = min(a)\n    c = 0\n    for i in a:\n        c += m * i\n    print(c - m * m)\n    t -= 1"]