["def prob(x, pi, st):\n    return 0 if st[16 - x] == '1' else pi\n\ndef solve(n, st, a, b, p, dp):\n    if n == 0:\n        dp[n][st] = 1.0\n    elif st not in dp[n]:\n        pa = prob(a[n - 1], p[n - 1], st)\n        ast = ''.join(('1' if i == 16 - a[n - 1] else st[i] for i in range(16)))\n        dp = solve(n - 1, ast, a, b, p, dp)\n        pa *= dp[n - 1][ast]\n        pb = prob(b[n - 1], 1 - p[n - 1], st)\n        bst = ''.join(('1' if i == 16 - b[n - 1] else st[i] for i in range(16)))\n        dp = solve(n - 1, bst, a, b, p, dp)\n        pb *= dp[n - 1][bst]\n        dp[n][st] = pa + pb\n    return dp\nTet = int(input().strip())\nfor _ in range(Tet):\n    n = int(input().strip())\n    (a, b, p) = ([], [], [])\n    for i in range(n):\n        (pi, ai, bi) = map(int, input().strip().split())\n        a.append(ai)\n        b.append(bi)\n        p.append(pi / 100)\n    st = '0' * 16\n    dp = solve(n, st, a, b, p, [{} for i in range(n + 1)])\n    print(dp[n][st])", "def prob(x, pi, st):\n    return 0 if st[16 - x] == '1' else pi\n\ndef solve(n, st, a, b, p, dp):\n    if n == 0:\n        dp[n][st] = 1.0\n    elif st not in dp[n]:\n        pa = prob(a[n - 1], p[n - 1], st)\n        ast = ''.join(('1' if i == 16 - a[n - 1] else st[i] for i in range(16)))\n        dp = solve(n - 1, ast, a, b, p, dp)\n        pa *= dp[n - 1][ast]\n        pb = prob(b[n - 1], 1 - p[n - 1], st)\n        bst = ''.join(('1' if i == 16 - b[n - 1] else st[i] for i in range(16)))\n        dp = solve(n - 1, bst, a, b, p, dp)\n        pb *= dp[n - 1][bst]\n        dp[n][st] = pa + pb\n    return dp\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    (a, b, p) = ([], [], [])\n    for i in range(n):\n        (pi, ai, bi) = map(int, input().strip().split())\n        a.append(ai)\n        b.append(bi)\n        p.append(pi / 100)\n    st = '0' * 16\n    dp = solve(n, st, a, b, p, [{} for i in range(n + 1)])\n    print(dp[n][st])", "def prob(x, pi, st):\n    return 0 if st[16 - x] == '1' else pi\n\ndef solve(n, st, a, b, p, dp):\n    if n == 0:\n        dp[n][st] = 1.0\n    elif st not in dp[n]:\n        pa = prob(a[n - 1], p[n - 1], st)\n        ast = ''.join(('1' if i == 16 - a[n - 1] else st[i] for i in range(16)))\n        dp = solve(n - 1, ast, a, b, p, dp)\n        pa *= dp[n - 1][ast]\n        pb = prob(b[n - 1], 1 - p[n - 1], st)\n        bst = ''.join(('1' if i == 16 - b[n - 1] else st[i] for i in range(16)))\n        dp = solve(n - 1, bst, a, b, p, dp)\n        pb *= dp[n - 1][bst]\n        dp[n][st] = pa + pb\n    return dp\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    (a, b, p) = ([], [], [])\n    for i in range(n):\n        (pi, ai, bi) = map(int, input().strip().split())\n        a.append(ai)\n        b.append(bi)\n        p.append(pi / 100)\n    st = '0' * 16\n    dp = solve(n, st, a, b, p, [{} for i in range(n + 1)])\n    print(dp[n][st])", "def prob(x, pi, st):\n    return 0 if st[16 - x] == '1' else pi\n\ndef solve(n, st, a, b, p, dp):\n    if n == 0:\n        dp[n][st] = 1.0\n    elif st not in dp[n]:\n        pa = prob(a[n - 1], p[n - 1], st)\n        ast = ''.join(('1' if i == 16 - a[n - 1] else st[i] for i in range(16)))\n        dp = solve(n - 1, ast, a, b, p, dp)\n        pa *= dp[n - 1][ast]\n        pb = prob(b[n - 1], 1 - p[n - 1], st)\n        bst = ''.join(('1' if i == 16 - b[n - 1] else st[i] for i in range(16)))\n        dp = solve(n - 1, bst, a, b, p, dp)\n        pb *= dp[n - 1][bst]\n        dp[n][st] = pa + pb\n    return dp\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    (a, b, p) = ([], [], [])\n    for i in range(n):\n        (pi, ai, bi) = map(int, input().strip().split())\n        a.append(ai)\n        b.append(bi)\n        p.append(pi / 100)\n    DP = [{} for i in range(n + 1)]\n    st = '0' * 16\n    dp = solve(n, st, a, b, p, DP)\n    print(dp[n][st])", "def prob(x, pi, st):\n    return 0 if st[16 - x] == '1' else pi\n\ndef solve(n, st, a, b, p, dp):\n    if n == 0:\n        dp[n][st] = 1.0\n    elif st not in dp[n]:\n        pa = prob(a[n - 1], p[n - 1], st)\n        ast = ''.join(('1' if i == 16 - a[n - 1] else st[i] for i in range(16)))\n        (ares, dp) = solve(n - 1, ast, a, b, p, dp)\n        pa *= ares\n        pb = prob(b[n - 1], 1 - p[n - 1], st)\n        bst = ''.join(('1' if i == 16 - b[n - 1] else st[i] for i in range(16)))\n        (bres, dp) = solve(n - 1, bst, a, b, p, dp)\n        pb *= bres\n        dp[n][st] = pa + pb\n    return (dp[n][st], dp)\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    (a, b, p) = ([], [], [])\n    for i in range(n):\n        (pi, ai, bi) = map(int, input().strip().split())\n        a.append(ai)\n        b.append(bi)\n        p.append(pi / 100)\n    DP = [{} for i in range(n + 1)]\n    st = '0' * 16\n    (res, dp) = solve(n, st, a, b, p, DP)\n    print(res)", "def bit2int(bits):\n    return int(''.join(map(str, bits)), 2)\n\ndef int2bit(n):\n    binary = bin(n)[2:]\n    binary = '0' * (16 - len(binary)) + binary\n    return list(map(int, binary))\n\ndef prob(x, pi, st):\n    return 0 if st[16 - x] == '1' else pi\n\ndef solve(n, st, a, b, p, dp):\n    if n == 0:\n        dp[n][st] = 1.0\n    elif st not in dp[n]:\n        pa = prob(a[n - 1], p[n - 1], st)\n        ast = ''.join(('1' if i == 16 - a[n - 1] else st[i] for i in range(16)))\n        (ares, dp) = solve(n - 1, ast, a, b, p, dp)\n        pa *= ares\n        pb = prob(b[n - 1], 1 - p[n - 1], st)\n        bst = ''.join(('1' if i == 16 - b[n - 1] else st[i] for i in range(16)))\n        (bres, dp) = solve(n - 1, bst, a, b, p, dp)\n        pb *= bres\n        dp[n][st] = pa + pb\n    return (dp[n][st], dp)\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    (a, b, p) = ([], [], [])\n    for i in range(n):\n        (pi, ai, bi) = map(int, input().strip().split())\n        a.append(ai)\n        b.append(bi)\n        p.append(pi / 100)\n    DP = [{} for i in range(n + 1)]\n    st = '0' * 16\n    (res, dp) = solve(n, st, a, b, p, DP)\n    print(res)", "import copy\nfor _ in range(int(input())):\n    dp = [[1, {}]]\n    val = []\n    n = int(input())\n    for i in range(n):\n        (p, a, b) = map(int, input().split())\n        val.append((p / 100, a, b))\n    for i in range(len(val)):\n        ndp = []\n        for j in range(len(dp)):\n            if dp[j][0] == 0:\n                continue\n            if val[i][1] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][1]] = 0\n                ndp.append([dp[j][0] * val[i][0], x])\n            if val[i][2] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][2]] = 0\n                ndp.append([dp[j][0] * (1 - val[i][0]), x])\n        dp = ndp\n    ans = 0\n    for val in dp:\n        ans += val[0]\n    print(ans)", "def solve(i, used, prob):\n    if i == n:\n        return prob\n    ans = 0.0\n    for (l, pp) in [(a[i], p[i]), (b[i], 100 - p[i])]:\n        if used[l - 1] == True:\n            continue\n        used[l - 1] = True\n        ans += solve(i + 1, used, prob * pp / 100)\n        used[l - 1] = False\n    return ans\ncases = int(input())\nwhile cases:\n    cases -= 1\n    a = []\n    p = []\n    b = []\n    n = int(input())\n    for i in range(n):\n        (a1, a2, a3) = map(int, input().split())\n        p.append(a1)\n        a.append(a2)\n        b.append(a3)\n    if n > 16:\n        print(0)\n        continue\n    lab = [False] * 16\n    print(solve(0, lab, 1.0))", "def solve(i, used, prob):\n    if i == n:\n        return prob\n    ans = 0.0\n    for (l, pp) in [(a[i], p[i]), (b[i], 100 - p[i])]:\n        if used[l - 1] == True:\n            continue\n        used[l - 1] = True\n        ans += solve(i + 1, used, prob * pp / 100)\n        used[l - 1] = False\n    return ans\ncases = int(input())\nwhile cases:\n    cases -= 1\n    a = []\n    p = []\n    b = []\n    n = int(input())\n    for i in range(n):\n        (a1, a2, a3) = map(int, input().split())\n        p.append(a1)\n        a.append(a2)\n        b.append(a3)\n    if n > 16:\n        print(0)\n        continue\n    lab = [False] * 16\n    print(solve(0, lab, 1.0))", "def solve(i, used, prob):\n    if i == n:\n        return prob\n    ans = 0.0\n    for (l, pp) in [(a[i], p[i]), (b[i], 100 - p[i])]:\n        if used[l - 1] == True:\n            continue\n        used[l - 1] = True\n        ans += solve(i + 1, used, prob * pp / 100)\n        used[l - 1] = False\n    return ans\ncases = int(input())\nwhile cases:\n    cases -= 1\n    a = []\n    p = []\n    b = []\n    n = int(input())\n    for i in range(n):\n        (a1, a2, a3) = map(int, input().split())\n        p.append(a1)\n        a.append(a2)\n        b.append(a3)\n    if n > 16:\n        print(0)\n        continue\n    lab = [False] * 16\n    print(solve(0, lab, 1.0))", "import copy\nfor _ in range(int(input())):\n    dp = [[1, {}]]\n    val = []\n    n = int(input())\n    for i in range(n):\n        (p, a, b) = map(int, input().split())\n        val.append((p / 100, a, b))\n    for i in range(len(val)):\n        ndp = []\n        for j in range(len(dp)):\n            if dp[j][0] == 0:\n                continue\n            if val[i][1] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][1]] = 0\n                ndp.append([dp[j][0] * val[i][0], x])\n            if val[i][2] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][2]] = 0\n                ndp.append([dp[j][0] * (1 - val[i][0]), x])\n        dp = ndp\n    ans = 0\n    for val in dp:\n        ans += val[0]\n    print(ans)", "import copy\nfor _ in range(int(input())):\n    dp = [[1, {}]]\n    val = []\n    n = int(input())\n    for i in range(n):\n        (p, a, b) = map(int, input().split())\n        val.append((p / 100, a, b))\n    for i in range(len(val)):\n        ndp = []\n        for j in range(len(dp)):\n            if dp[j][0] == 0:\n                continue\n            if val[i][1] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][1]] = 0\n                ndp.append([dp[j][0] * val[i][0], x])\n            if val[i][2] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][2]] = 0\n                ndp.append([dp[j][0] * (1 - val[i][0]), x])\n        dp = ndp\n    ans = 0\n    for val in dp:\n        ans += val[0]\n    print(ans)", "import copy\nfor _ in range(int(input())):\n    dp = [[1, {}]]\n    val = []\n    n = int(input())\n    for i in range(n):\n        (p, a, b) = map(int, input().split())\n        val.append((p / 100, a, b))\n    for i in range(len(val)):\n        ndp = []\n        for j in range(len(dp)):\n            if dp[j][0] == 0:\n                continue\n            if val[i][1] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][1]] = 0\n                ndp.append([dp[j][0] * val[i][0], x])\n            if val[i][2] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][2]] = 0\n                ndp.append([dp[j][0] * (1 - val[i][0]), x])\n        dp = ndp\n    ans = 0\n    for val in dp:\n        ans += val[0]\n    print(ans)", "import copy\nfor _ in range(int(input())):\n    dp = [[1, {}]]\n    val = []\n    n = int(input())\n    for i in range(n):\n        (p, a, b) = map(int, input().split())\n        val.append((p / 100, a, b))\n    for i in range(len(val)):\n        ndp = []\n        for j in range(len(dp)):\n            if dp[j][0] == 0:\n                continue\n            if val[i][1] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][1]] = 0\n                ndp.append([dp[j][0] * val[i][0], x])\n            if val[i][2] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][2]] = 0\n                ndp.append([dp[j][0] * (1 - val[i][0]), x])\n        dp = ndp\n    ans = 0\n    for val in dp:\n        ans += val[0]\n    print(ans)", "import copy\nfor _ in range(int(input())):\n    dp = [[1, {}]]\n    val = []\n    n = int(input())\n    for i in range(n):\n        (p, a, b) = map(int, input().split())\n        val.append((p / 100, a, b))\n    for i in range(len(val)):\n        ndp = []\n        for j in range(len(dp)):\n            if dp[j][0] == 0:\n                continue\n            if val[i][1] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][1]] = 0\n                ndp.append([dp[j][0] * val[i][0], x])\n            if val[i][2] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][2]] = 0\n                ndp.append([dp[j][0] * (1 - val[i][0]), x])\n        dp = ndp\n    ans = 0\n    for val in dp:\n        ans += val[0]\n    print(ans)", "import copy\nfor _ in range(int(input())):\n    dp = [[1, {}]]\n    val = []\n    n = int(input())\n    for i in range(n):\n        (p, a, b) = map(int, input().split())\n        val.append((p / 100, a, b))\n    for i in range(len(val)):\n        ndp = []\n        for j in range(len(dp)):\n            if dp[j][0] == 0:\n                continue\n            if val[i][1] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][1]] = 0\n                ndp.append([dp[j][0] * val[i][0], x])\n            if val[i][2] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][2]] = 0\n                ndp.append([dp[j][0] * (1 - val[i][0]), x])\n        dp = ndp\n    ans = 0\n    for val in dp:\n        ans += val[0]\n    print(ans)", "import copy\nfor _ in range(int(input())):\n    dp = [[1, {}]]\n    val = []\n    n = int(input())\n    for i in range(n):\n        (p, a, b) = map(int, input().split())\n        val.append((p / 100, a, b))\n    for i in range(len(val)):\n        ndp = []\n        for j in range(len(dp)):\n            if dp[j][0] == 0:\n                continue\n            if val[i][1] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][1]] = 0\n                ndp.append([dp[j][0] * val[i][0], x])\n            if val[i][2] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][2]] = 0\n                ndp.append([dp[j][0] * (1 - val[i][0]), x])\n        dp = ndp\n    ans = 0\n    for val in dp:\n        ans += val[0]\n    print(ans)", "import copy\nfor _ in range(int(input())):\n    dp = [[1, {}]]\n    val = []\n    n = int(input())\n    for i in range(n):\n        (p, a, b) = map(int, input().split())\n        val.append((p / 100, a, b))\n    for i in range(len(val)):\n        ndp = []\n        for j in range(len(dp)):\n            if dp[j][0] == 0:\n                continue\n            if val[i][1] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][1]] = 0\n                ndp.append([dp[j][0] * val[i][0], x])\n            if val[i][2] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][2]] = 0\n                ndp.append([dp[j][0] * (1 - val[i][0]), x])\n        dp = ndp\n    ans = 0\n    for val in dp:\n        ans += val[0]\n    print(ans)", "import copy\nfor _ in range(int(input())):\n    dp = [[1, {}]]\n    val = []\n    n = int(input())\n    for i in range(n):\n        (p, a, b) = map(int, input().split())\n        val.append((p / 100, a, b))\n    for i in range(len(val)):\n        ndp = []\n        for j in range(len(dp)):\n            if dp[j][0] == 0:\n                continue\n            if val[i][1] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][1]] = 0\n                ndp.append([dp[j][0] * val[i][0], x])\n            if val[i][2] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][2]] = 0\n                ndp.append([dp[j][0] * (1 - val[i][0]), x])\n        dp = ndp\n    ans = 0\n    for val in dp:\n        ans += val[0]\n    print(ans)", "import copy\nfor _ in range(int(input())):\n    dp = [[1, {}]]\n    val = []\n    n = int(input())\n    for i in range(n):\n        (p, a, b) = map(int, input().split())\n        val.append((p / 100, a, b))\n    for i in range(len(val)):\n        ndp = []\n        for j in range(len(dp)):\n            if dp[j][0] == 0:\n                continue\n            if val[i][1] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][1]] = 0\n                ndp.append([dp[j][0] * val[i][0], x])\n            if val[i][2] not in dp[j][1].keys():\n                x = {}\n                x = copy.deepcopy(dp[j][1])\n                x[val[i][2]] = 0\n                ndp.append([dp[j][0] * (1 - val[i][0]), x])\n        dp = ndp\n    ans = 0\n    for val in dp:\n        ans += val[0]\n    print(ans)", "import sys\nimport math\n\ndef find_prob(bolean, arr, ans, idx):\n    if idx == len(arr):\n        return ans\n    (prob, a, b) = arr[idx]\n    (x, y) = (0, 0)\n    if not bolean[a]:\n        bolean[a] = True\n        x = find_prob(bolean, arr, ans * prob / 100, idx + 1)\n        bolean[a] = False\n    if not bolean[b]:\n        bolean[b] = True\n        y = find_prob(bolean, arr, ans * (1 - prob / 100), idx + 1)\n        bolean[b] = False\n    if bolean[a] and bolean[b]:\n        return 0\n    return x + y\n\ndef main(arr):\n    ans = 1\n    boolean = [False] * 17\n    print(find_prob(boolean, arr, ans, 0))\nfor _ in range(int(input())):\n    arr = []\n    for j in range(int(input())):\n        arr.append(list(map(int, input().split())))\n    main(arr)", "import sys\nimport math\n\ndef find_prob(bolean, arr, ans, idx):\n    if idx == len(arr):\n        return ans\n    (prob, a, b) = arr[idx]\n    (x, y) = (0, 0)\n    if not bolean[a]:\n        bolean[a] = True\n        x = find_prob(bolean, arr, ans * prob / 100, idx + 1)\n        bolean[a] = False\n    if not bolean[b]:\n        bolean[b] = True\n        y = find_prob(bolean, arr, ans * (1 - prob / 100), idx + 1)\n        bolean[b] = False\n    if bolean[a] and bolean[b]:\n        return 0\n    return x + y\n\ndef main(arr):\n    ans = 1\n    boolean = [False] * 17\n    print(find_prob(boolean, arr, ans, 0))\nfor _ in range(int(input())):\n    arr = []\n    for j in range(int(input())):\n        arr.append(list(map(int, input().split())))\n    main(arr)", "def solve(i, used, prob):\n    if i == n:\n        return prob\n    ans = 0.0\n    for (l, pp) in [(a[i], p[i]), (b[i], 100 - p[i])]:\n        if used[l - 1] == True:\n            continue\n        used[l - 1] = True\n        ans += solve(i + 1, used, prob * pp / 100)\n        used[l - 1] = False\n    return ans\ncases = int(input())\nwhile cases:\n    cases -= 1\n    a = []\n    p = []\n    b = []\n    n = int(input())\n    for i in range(n):\n        (a1, a2, a3) = map(int, input().split())\n        p.append(a1)\n        a.append(a2)\n        b.append(a3)\n    if n > 16:\n        print(0)\n        continue\n    lab = [False] * 16\n    print(solve(0, lab, 1.0))", "def solve(i, used, prob):\n    if i == n:\n        return prob\n    ans = 0.0\n    for (l, pp) in [(a[i], p[i]), (b[i], 100 - p[i])]:\n        if used[l - 1] == True:\n            continue\n        used[l - 1] = True\n        ans += solve(i + 1, used, prob * pp / 100)\n        used[l - 1] = False\n    return ans\ncases = int(input())\nwhile cases:\n    cases -= 1\n    a = []\n    p = []\n    b = []\n    n = int(input())\n    for i in range(n):\n        (a1, a2, a3) = map(int, input().split())\n        p.append(a1)\n        a.append(a2)\n        b.append(a3)\n    if n > 16:\n        print(0)\n        continue\n    lab = [False] * 16\n    print(solve(0, lab, 1.0))", "def mk(i, u, pr):\n    if i == n:\n        return pr\n    else:\n        t = 0.0\n        for (l, pp) in [(a[i], p1[i]), (b[i], 100 - p1[i])]:\n            if u[l - 1] == True:\n                continue\n            u[l - 1] = True\n            t += mk(i + 1, u, pr * pp / 100)\n            u[l - 1] = False\n    return t\nt = int(input())\nfor i in range(t):\n    a = []\n    p1 = []\n    b = []\n    n = int(input())\n    for i in range(n):\n        (a1, a2, a3) = map(int, input().split())\n        p1.append(a1)\n        a.append(a2)\n        b.append(a3)\n    if n > 16:\n        print(0)\n        continue\n    lab = [False] * 16\n    x = str(mk(0, lab, 1.0))\n    x = x.split('.')\n    temp = 9 - len(x[1])\n    for j in range(temp):\n        x[1] += '0'\n    print('.'.join(x))", "def solve(i, used, prob):\n    if i == n:\n        return prob\n    ans = 0.0\n    for (l, pp) in [(a[i], p[i]), (b[i], 100 - p[i])]:\n        if used[l - 1] == True:\n            continue\n        used[l - 1] = True\n        ans += solve(i + 1, used, prob * pp / 100)\n        used[l - 1] = False\n    return ans\ncases = int(input())\nwhile cases:\n    cases -= 1\n    a = []\n    p = []\n    b = []\n    n = int(input())\n    for i in range(n):\n        (a1, a2, a3) = map(int, input().split())\n        p.append(a1)\n        a.append(a2)\n        b.append(a3)\n    if n > 16:\n        print(0)\n        continue\n    lab = [False] * 16\n    print(solve(0, lab, 1.0))", "P = [0.0] * 51\nA = [0] * 51\nB = [0] * 51\nlst = [0] * 51\n\ndef cal_pro(row):\n    i = int(row)\n    if i > n - 1:\n        return 1\n    if (P[i] == 1 or A[i] == B[i]) and lst[A[i]] == 0:\n        lst[A[i]] += 1\n        temp1 = cal_pro(i + 1)\n        lst[A[i]] -= 1\n        return temp1\n    elif P[i] == 0 and lst[B[i]] == 0:\n        lst[B[i]] += 1\n        temp2 = cal_pro(i + 1)\n        lst[B[i]] -= 1\n        return temp2\n    else:\n        if lst[A[i]] == 0:\n            lst[A[i]] += 1\n            temp1 = P[i] * cal_pro(i + 1)\n            lst[A[i]] -= 1\n        else:\n            temp1 = 0\n        if lst[B[i]] == 0:\n            lst[B[i]] += 1\n            temp2 = (1 - P[i]) * cal_pro(i + 1)\n            lst[B[i]] -= 1\n        else:\n            temp2 = 0\n        return temp1 + temp2\nT = int(input())\nwhile T:\n    T -= 1\n    n = int(input())\n    for i in range(0, n):\n        str = input().split()\n        P[i] = float(str[0]) / 100.0\n        A[i] = int(str[1])\n        B[i] = int(str[2])\n        ans = 0.0\n        ans = cal_pro(0)\n    print('%.6f' % ans)", "def explore(progress, tickets, result_p):\n    if len(progress) is len(tickets):\n        result_p.append(progress[-1][1])\n        return\n    ticket = tickets[len(progress)]\n    (p, a, b) = (ticket[0] / 100, ticket[1], ticket[2])\n    prev_p = 1 if len(progress) is 0 else progress[-1][1]\n    if a not in [x[0] for x in progress]:\n        progress.append([a, p * prev_p])\n        explore(progress, tickets, result_p)\n        progress.pop()\n    if b not in [x[0] for x in progress]:\n        progress.append([b, (1 - p) * prev_p])\n        explore(progress, tickets, result_p)\n        progress.pop()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n > 16:\n        [input() for x in range(n)]\n        print('%.9f' % 0.0)\n    else:\n        tickets = [[int(y) for y in input().split()] for x in range(n)]\n        result_p = []\n        explore([], tickets, result_p)\n        print('%.9f' % sum(result_p))", "import sys\nMAX_N = 16\n\ndef produce_ints():\n    for line in sys.stdin:\n        for word in line.split():\n            yield int(word)\n\ndef next_int():\n    return next(produce_ints())\n\ndef test(x, bit):\n    return x >> bit & 1\n\ndef one_test():\n    n = next_int()\n    a = tuple((tuple(map(int, input().split())) for i in range(n)))\n    if n > MAX_N:\n        return 0\n    dp = {0: 1.0}\n    for (pr, a, b) in a:\n        pr_a = 0.01 * pr\n        pr_b = 1 - pr_a\n        a -= 1\n        b -= 1\n        next_dp = {}\n        for (mask, prob) in dp.items():\n            if not test(mask, a):\n                next_mask = mask | 1 << a\n                next_dp[next_mask] = next_dp.get(next_mask, 0) + prob * pr_a\n            if not test(mask, b):\n                next_mask = mask | 1 << b\n                next_dp[next_mask] = next_dp.get(next_mask, 0) + prob * pr_b\n        dp = next_dp\n    return sum(dp.values())\nt = next_int()\nfor i in range(t):\n    print('{:.7f}'.format(one_test()))", "import sys\n\ndef Prob(Taken, i):\n    if i == N[0]:\n        return 1\n    if (Taken, i) not in Mem:\n        if A[i] in Taken:\n            x = 0\n        else:\n            x = Prob(tuple(sorted(Taken + (A[i],))), i + 1) * (P[i] / 100)\n        if B[i] in Taken:\n            y = 0\n        else:\n            y = Prob(tuple(sorted(Taken + (B[i],))), i + 1) * ((100 - P[i]) / 100)\n        Mem[Taken, i] = x + y\n    return Mem[Taken, i]\nT = int(sys.stdin.readline())\nAns = ''\nfor t in range(T):\n    Mem = {}\n    N = [int(sys.stdin.readline())]\n    (A, B, P) = ([], [], [])\n    for i in range(N[0]):\n        (p, a, b) = map(int, sys.stdin.readline().split())\n        P.append(p)\n        A.append(a)\n        B.append(b)\n    Ans += str(Prob((), 0)) + '\\n'\nsys.stdout.write(Ans)"]