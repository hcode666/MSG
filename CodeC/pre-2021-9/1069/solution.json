["t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n & n - 1 == 0:\n        print(-1)\n    else:\n        count = (n - 1) // 2\n        cost = 2\n        while cost < n:\n            count += (n - cost) // (2 * cost) * cost + cost\n            cost <<= 1\n        print(count)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n & n - 1 == 0:\n        print(-1)\n    else:\n        count = (n - 1) // 2\n        cost = 2\n        while cost < n:\n            count += (n - cost) // (2 * cost) * cost + cost\n            cost <<= 1\n        print(count)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n & n - 1 == 0:\n        print(-1)\n    else:\n        count = (n - 1) // 2\n        cost = 2\n        while cost < n:\n            count += (n - cost) // (2 * cost) * cost + cost\n            cost <<= 1\n        print(count)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n & n - 1 == 0:\n        print(-1)\n    else:\n        count = (n - 1) // 2\n        cost = 2\n        while cost < n:\n            count += (n - cost) // (2 * cost) * cost + cost\n            cost <<= 1\n        print(count)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n & n - 1 == 0:\n        print(-1)\n    else:\n        count = (n - 1) // 2\n        cost = 2\n        while cost < n:\n            count += (n - cost) // (2 * cost) * cost + cost\n            cost <<= 1\n        print(count)", "l = [2 ** x for x in range(32)]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    x = 30\n    v = 0\n    f = 1\n    while x > 0:\n        if l[x] == n:\n            print(-1)\n            f = 0\n            break\n        v += l[x] * (n // l[x] - n // l[x + 1])\n        x -= 1\n    if n % 2 == 0:\n        v += n // 2 - 1\n    else:\n        v += n // 2\n    if f != 0:\n        print(v)", "l = [2 ** x for x in range(32)]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    x = 30\n    v = 0\n    f = 1\n    while x > 0:\n        if l[x] == n:\n            print(-1)\n            f = 0\n            break\n        v += l[x] * (n // l[x] - n // l[x + 1])\n        x -= 1\n    if n % 2 == 0:\n        v += n // 2 - 1\n    else:\n        v += n // 2\n    if f != 0:\n        print(v)", "li = [pow(2, x) for x in range(32)]\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    x = 30\n    val = 0\n    flag = 1\n    prev = n // li[x + 1]\n    while x > 0:\n        if li[x] == n:\n            print(-1)\n            flag = 0\n            break\n        now = n // li[x]\n        val = val + li[x] * (now - prev)\n        prev = now\n        x -= 1\n    if n % 2 == 0:\n        val = val + n // 2 - 1\n    else:\n        val = val + n // 2\n    if flag != 0:\n        print(val)", "li = [2 ** x for x in range(32)]\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    x = 30\n    val = 0\n    flag = 1\n    prev = n // li[x + 1]\n    while x > 0:\n        if li[x] == n:\n            print(-1)\n            flag = 0\n            break\n        now = n // li[x]\n        val = val + li[x] * (now - prev)\n        prev = now\n        x -= 1\n    if n % 2 == 0:\n        val = val + n // 2 - 1\n    else:\n        val = val + n // 2\n    if flag != 0:\n        print(val)", "li = [2 ** x for x in range(32)]\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    x = 30\n    val = 0\n    flag = 1\n    while x > 0:\n        if li[x] == n:\n            print(-1)\n            flag = 0\n            break\n        val = val + li[x] * (n // li[x] - n // li[x + 1])\n        x -= 1\n    if n % 2 == 0:\n        val = val + n // 2 - 1\n    else:\n        val = val + n // 2\n    if flag != 0:\n        print(val)", "case = int(input())\nfor r in range(case):\n    n = int(input())\n    if n == 2:\n        print(-1)\n        continue\n    if n & n - 1 == 0:\n        print(-1)\n        continue\n    summ = n - 1 - n // 2\n    pw = 1\n    while pow(2, pw) <= n:\n        pw += 1\n    for i in range(1, pw):\n        nu = pow(2, i)\n        summ += ((n - nu) // (2 * nu) + 1) * nu\n    print(summ)", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    ans = -1\n    curr = 1\n    while True:\n        if curr == n:\n            ans = -1\n            break\n        elif curr > n:\n            break\n        ans += curr * ((n + curr) // (2 * curr))\n        curr *= 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ans = -1\n    curr = 1\n    while True:\n        if curr == n:\n            ans = -1\n            break\n        elif curr > n:\n            break\n        ans += curr * ((n + curr) // (2 * curr))\n        curr *= 2\n    print(ans)", "test = int(input())\nfor _ in range(test):\n    n = int(input())\n    ans = -1\n    curr = 1\n    while True:\n        if curr == n:\n            ans = -1\n            break\n        elif curr > n:\n            break\n        ans += curr * ((n + curr) // (2 * curr))\n        curr *= 2\n    print(ans)", "import sys\nimport math\n\ndef fout(s, end='\\n'):\n    sys.stdout.write(str(s) + end)\n\ndef fin():\n    return sys.stdin.readline().strip()\n\ndef dfsutil(curr):\n    visit[curr] = True\n    for item in graph[curr]:\n        if not visit[item]:\n            graph[item].remove(curr)\n            dfs(item)\n\ndef dfs(start, end):\n    for i in range(start, end + 1):\n        if not visit[i]:\n            dfsutil(i)\n\ndef bfs(start):\n    q = deque([start])\n    visit[start] = True\n    while len(q) > 0:\n        curr = q.popleft()\n        for item in graph[curr]:\n            if not visit[curr]:\n                q.append(item)\n                visit[item] = True\nepsilon = 10 ** (-6)\n\ndef check():\n    pass\n\ndef bin(start, end):\n    ans = end\n    while end - start > epsilon:\n        mid = start + (end - start) // 2\n        if check(mid):\n            ans = mid\n            start = mid + epsilon\n        else:\n            end = mid - epsilon\n    return ans\nt = int(fin())\nwhile t > 0:\n    t -= 1\n    n = int(fin())\n    if n & n - 1 == 0:\n        print(-1)\n        continue\n    ans = n // 2 - 1\n    if n % 2:\n        ans += 1\n    bits = math.ceil(math.log(n, 2))\n    for i in range(1, bits):\n        temp = 2 ** i\n        ans += temp * ((n + temp) // (temp * 2) - 1)\n        ans += temp\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ans = -1\n    curr = 1\n    while True:\n        if curr == n:\n            ans = -1\n            break\n        elif curr > n:\n            break\n        ans += curr * ((n + curr) // (2 * curr))\n        curr *= 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ans = -1\n    curr = 1\n    while True:\n        if curr == n:\n            ans = -1\n            break\n        elif curr > n:\n            break\n        ans += curr * ((n + curr) // (2 * curr))\n        curr *= 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ans = -1\n    curr = 1\n    while True:\n        if curr == n:\n            ans = -1\n            break\n        elif curr > n:\n            break\n        ans += curr * ((n + curr) // (2 * curr))\n        curr *= 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ans = -1\n    curr = 1\n    while True:\n        if curr == n:\n            ans = -1\n            break\n        elif curr > n:\n            break\n        ans += curr * ((n + curr) // (2 * curr))\n        curr *= 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = -1\n    curr = 1\n    while True:\n        if curr == n:\n            ans = -1\n            break\n        elif curr > n:\n            break\n        ans += curr * ((n + curr) // (2 * curr))\n        curr *= 2\n    print(ans)", "t = int(input())\narr = [2 ** i for i in range(1, 32)]\nfor _ in range(t):\n    d = int(input())\n    if d in arr:\n        print(-1)\n    elif d == 3:\n        print(3)\n    else:\n        sum = (d - 1) // 2\n        i = 2\n        while i < d:\n            m = d // i\n            sum += (m + 1) // 2 * i\n            i = i * 2\n        print(sum)", "t = int(input())\nfor _ in range(t):\n    d = int(input())\n    arr = []\n    i = 2\n    while i <= d:\n        arr.append(i)\n        i = i * 2\n    if arr[-1] == d:\n        print(-1)\n    elif d == 3:\n        print(3)\n    else:\n        sum = (d - 1) // 2\n        i = 2\n        while i < d:\n            m = d // i\n            sum += (m + 1) // 2 * i\n            i = i * 2\n        print(sum)", "t = int(input())\narr = [2 ** i for i in range(1, 32)]\nfor _ in range(t):\n    d = int(input())\n    if d in arr:\n        print(-1)\n    elif d == 3:\n        print(3)\n    else:\n        sum = (d - 1) // 2\n        i = 2\n        while i < d:\n            m = d // i\n            sum += (m + 1) // 2 * i\n            i = i * 2\n        print(sum)", "def land(n):\n    sum = (n + 1) // 2\n    k = 2\n    while True:\n        c = (n + k) // (2 * k)\n        if c == 0:\n            return sum - 1\n        sum += c * k\n        k = k * 2\nfrom math import log2\nfor _ in range(int(input())):\n    n = int(input())\n    if pow(2, int(log2(n))) == n:\n        print(-1)\n    else:\n        print(land(n))", "def land(n):\n    sum = (n + 1) // 2\n    k = 2\n    while True:\n        c = (n + k) // (2 * k)\n        sum += c * k\n        if c <= 0:\n            return sum - 1\n        k = k * 2\nfrom math import log2\nfor _ in range(int(input())):\n    n = int(input())\n    if pow(2, int(log2(n))) == n:\n        print(-1)\n    else:\n        print(land(n))", "from math import log2\nfor _ in range(int(input())):\n    n = int(input())\n    if pow(2, int(log2(n))) == n:\n        print('-1')\n    else:\n        ans = 0\n        i = 1\n        while i < n:\n            ans += (n - i) // (i << 1) * i\n            i <<= 1\n        i = 2\n        while i < n:\n            ans += i\n            i <<= 1\n        print(ans)", "from math import log2\nfor _ in range(int(input())):\n    n = int(input())\n    if pow(2, int(log2(n))) == n:\n        print('-1')\n    else:\n        ans = 0\n        i = 1\n        while i < n:\n            ans += (n - i) // (i << 1) * i\n            i <<= 1\n        i = 2\n        while i < n:\n            ans += i\n            i <<= 1\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n & n - 1 == 0:\n        print(-1)\n    else:\n        count = (n - 1) // 2\n        cost = 2\n        while cost < n:\n            count += (n - cost) // (2 * cost) * cost + cost\n            cost <<= 1\n        print(count)", "t = int(input())\nans = []\nfor ti in range(t):\n    n = int(input())\n    ansi = 0\n    lsb = 1\n    fake_n = n\n    while fake_n % 2 == 0:\n        fake_n //= 2\n        lsb *= 2\n    if lsb == n:\n        ans.append(-1)\n    else:\n        fake_n = n\n        msb = 1\n        while fake_n > 1:\n            msb *= 2\n            fake_n //= 2\n        ansi += (n + 1) // 2 - 1\n        x = 2\n        while x <= msb:\n            y = (n - x) // (2 * x) + 1\n            ansi += y * x\n            x *= 2\n        ans.append(ansi)\nfor ansi in ans:\n    print(ansi)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n & n - 1 == 0:\n        print(-1)\n    else:\n        cost = 0\n        oddCtr = (n + 1) // 2\n        cost += oddCtr - 1\n        curCost = 2\n        while curCost < n:\n            cost += (n - curCost) // (curCost * 2) * curCost + curCost\n            curCost = curCost << 1\n        print(cost)", "from math import log2, ceil\n\ndef solve(N):\n    if not N & N - 1:\n        return -1\n    res = 0\n    bits = int(ceil(log2(N + 1)))\n    for b in range(bits):\n        size = (N - (1 << b)) // (1 << b + 1) + 1\n        res += (1 << b) * (size - 1)\n        if b < bits - 1:\n            res += 1 << b + 1\n    return res\n\ndef main():\n    from sys import stdin\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        N = int(stdin.readline().strip())\n        out = solve(N)\n        print(out)\nmain()", "from math import floor, log2\n\ndef checkPower(n):\n    cur = 1\n    while cur < n:\n        cur *= 2\n    if n == 1:\n        return True\n    res = cur - n\n    if res:\n        return True\n    return False\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        if checkPower(n):\n            res = floor(log2(n))\n            totalCost = 0\n            f = False\n            for i in range(res + 1):\n                cost = 2 ** i\n                v = (n + cost) // (cost * 2)\n                totalCost += (v - 1) * cost\n                if f:\n                    totalCost += cost\n                f = True\n            print(totalCost)\n        else:\n            print(-1)\nmain()", "import math\n\ndef get_ans(n):\n    if n & n - 1 == 0:\n        print(-1)\n        return\n    ans = 0\n    for i in range(math.floor(math.log2(n)) + 1):\n        s = pow(2, i)\n        l = (n + s) // (s * 2)\n        ans += (l - 1) * s\n        if i != 0:\n            ans += s & s + 1\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    get_ans(n)", "import math\n\ndef get_ans(n):\n    if n & n - 1 == 0:\n        print(-1)\n        return\n    ans = -1\n    for i in range(math.floor(math.log2(n)) + 1):\n        s = pow(2, i)\n        l = (n + s) // (s * 2)\n        ans += (l - 1) * s\n        ans += s\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    get_ans(n)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    s = math.log2(n)\n    f = math.floor(s)\n    if s - f == 0:\n        print(-1)\n        continue\n    s = -1\n    for i in range(f + 1):\n        x = 2 ** i\n        c = (n + x) // (x * 2)\n        s += (c - 1) * x + x\n    print(s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    answer = -1\n    currentVal = 1\n    while True:\n        if currentVal == n:\n            answer = -1\n            break\n        elif currentVal > n:\n            break\n        answer += currentVal * ((n + currentVal) // (2 * currentVal))\n        currentVal *= 2\n    print(answer)", "import sys\ninput = sys.stdin.readline\nimport math\nfor _ in range(int(input())):\n    N = int(input())\n    f = 0\n    if 2 ** 30 % N == 0:\n        f = 1\n    answer = (N - 1) // 2\n    p = 2\n    total = int(math.log(N, 2))\n    for j in range(0, total):\n        ans = (N // p - N // (2 * p)) * p\n        answer += ans\n        p = p * 2\n    if f == 1:\n        print(-1)\n    else:\n        print(answer)", "from math import log2\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    if log2(n) - int(log2(n)) == 0:\n        print(-1)\n        continue\n    m = int(log2(n))\n    cost = 0\n    cost = cost + int((n + 1) / 2) - 1\n    for j in range(1, m + 1):\n        p = pow(2, j)\n        cost = cost + p * int((n + p) / (2 * p))\n    print(cost)", "from math import log2\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    if log2(n) - int(log2(n)) == 0:\n        print('-1')\n        continue\n    max = int(log2(n))\n    ans = 0\n    ans += int((n + 1) / 2) - 1\n    for i in range(1, max + 1):\n        p = pow(2, i)\n        ans += p * int((n + p) / (2 * p))\n    print(ans)", "from math import log2\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    if log2(n) - int(log2(n)) == 0:\n        print('-1')\n        continue\n    max = int(log2(n))\n    ans = 0\n    ans += int((n + 1) / 2) - 1\n    for i in range(1, max + 1):\n        p = pow(2, i)\n        ans += p * int((n + p) / (2 * p))\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 2 or n & n - 1 == 0:\n        print(-1)\n        continue\n    ans = 0\n    ans = ans + n - n // 2\n    for i in range(1, math.ceil(math.log2(n)) + 1):\n        diff = 1 << i + 1\n        first_term = 1 << i\n        group_i = (n - first_term) // diff + 1\n        ans = ans + group_i * first_term\n    print(int(ans - 1))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    if not n & n - 1:\n        print(-1)\n        continue\n    count = (n - 1) // 2\n    i = 2\n    while i < n:\n        count += ((n - i) // (2 * i) + 1) * i\n        i <<= 1\n    print(count)", "import math\nfor _ in range(int(input())):\n    N = int(input())\n    f = 0\n    if 2 ** 30 % N == 0:\n        f = 1\n    answer = (N - 1) // 2\n    p = 2\n    total = int(math.log(N, 2))\n    for j in range(0, total):\n        ans = (N // p - N // (2 * p)) * p\n        answer += ans\n        p = p * 2\n    if f == 1:\n        print(-1)\n    else:\n        print(answer)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    if not n & n - 1:\n        print(-1)\n    else:\n        count = (n - 1) // 2\n        i = 1\n        while True:\n            m = 2 ** i\n            if m < n:\n                v = (n - m) // (2 * m) + 1\n                count += v * m\n                i += 1\n            else:\n                break\n        print(count)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    cn = n\n    bits = int(math.log(n) / math.log(2))\n    if 2 ** bits == n:\n        print(-1)\n    else:\n        odd = math.ceil(n / 2) - 1\n        sums = 2 ** (bits + 1) - 2\n        xsum = 0\n        x = 0\n        length = int(math.log(n) / math.log(2) + 1)\n        index = length - 1\n        for i in range(length):\n            val = n % 2\n            cn = cn >> 1\n            if val == 1:\n                xsum = xsum + (cn + 1) * 2 ** i\n            else:\n                xsum = xsum + cn * 2 ** i\n            n = n // 2\n        print(int(xsum - 1))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    cn = n\n    bits = int(math.log(n) / math.log(2))\n    if 2 ** bits == n:\n        print(-1)\n    else:\n        odd = math.ceil(n / 2) - 1\n        sums = 2 ** (bits + 1) - 2\n        xsum = 0\n        x = 0\n        length = int(math.log(n) / math.log(2) + 1)\n        index = length - 1\n        for i in range(length):\n            val = n % 2\n            cn = cn >> 1\n            if val == 1:\n                xsum = xsum + cn * 2 ** i\n            else:\n                xsum = xsum + (cn - 1) * 2 ** i\n            n = n // 2\n        print(int(xsum + sums))", "def main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        if N & N - 1 == 0:\n            print(-1)\n        else:\n            counter = (N + 1) // 2 - 1\n            nextCost = 2\n            while nextCost < N:\n                counter += (N - nextCost) // (2 * nextCost) * nextCost + nextCost\n                nextCost <<= 1\n            print(counter)\nmain()", "def main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        if N & N - 1 == 0:\n            print(-1)\n        else:\n            counter = (N + 1) // 2 - 1\n            nextCost = 2\n            group = 2\n            while nextCost < N:\n                counter += (N - nextCost) // (2 * nextCost) * nextCost + nextCost\n                nextCost <<= 1\n            print(counter)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    if not n & n - 1:\n        print(-1)\n    else:\n        count = (n - 1) // 2\n        i = 1\n        while True:\n            m = 2 ** i\n            if m < n:\n                v = (n - m) // (2 * m) + 1\n                count += v * m\n                i += 1\n            else:\n                break\n        print(count)", "t = int(input())\nanswer = ''\nfor _ in range(t):\n    n = int(input())\n    if not n & n - 1:\n        answer += '-1\\n'\n        continue\n    oddNumCnt = (n + 1) // 2\n    cost = oddNumCnt - 1\n    currCost = 2\n    while currCost < n:\n        cost += (n - currCost) // (2 * currCost) * currCost + currCost\n        currCost <<= 1\n    answer += str(cost) + '\\n'\nprint(answer)", "for _ in range(int(input())):\n    n = int(input())\n    if not n & n - 1:\n        print(-1)\n    else:\n        count = (n - 1) // 2\n        i = 2\n        while i < n:\n            v = (n - i) // (2 * i) + 1\n            count += v * i\n            i <<= 1\n        print(count)", "import math\n\ndef funn(a, b, n):\n    count = a * ((n - a) // (2 * a)) + b\n    count = count + a\n    return count\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    if math.log2(n).is_integer():\n        print('-1')\n    else:\n        count = 0\n        j = 0\n        while 2 ** j < n:\n            count = funn(2 ** j, count, n)\n            j += 1\n        print(count - 1)", "import math\n\ndef funn(a, b, n):\n    count = a * ((n - a) // (2 * a)) + b\n    count = count + a\n    return count\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    if math.log2(n).is_integer():\n        print('-1')\n    else:\n        count = 0\n        j = 0\n        while 2 ** j < n:\n            count = funn(2 ** j, count, n)\n            j += 1\n        print(count - 1)", "def sol(n):\n    i = 1\n    ans = 0\n    while i <= n:\n        ans += (n - i) // (i << 1) * i\n        i <<= 1\n    i = 2\n    while i < n:\n        ans += i\n        i <<= 1\n    return ans\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n & n - 1 == 0:\n        print(-1)\n    else:\n        print(sol(n))", "for _ in range(int(input())):\n    n = int(input())\n    answer = 0\n    if n % 2 == 0:\n        answer += n // 2 - 1\n    else:\n        answer += n // 2\n    x = 2\n    while 1:\n        if x == n:\n            answer = -1\n            break\n        else:\n            q = n // x\n            if q == 0:\n                break\n            if q % 2 == 0:\n                answer += x * (q // 2)\n            else:\n                answer += x * (q // 2 + 1)\n        x = x * 2\n    print(answer)", "from sys import *\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    a = bin(n)\n    if a.count('1') == 1:\n        print(-1)\n        continue\n    if n == 2:\n        print(-1)\n        continue\n    if n == 3:\n        print(3)\n        continue\n    if n % 2 == 0:\n        x = n // 2\n    else:\n        x = n // 2 + 1\n    count = x - 1\n    i = 2\n    while i <= n:\n        l = 0\n        k = n // i\n        if k % 2 == 0:\n            l = k // 2\n        else:\n            l = k // 2 + 1\n        count = count + i * l\n        i = i * 2\n    print(count)", "from sys import *\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    a = bin(n)\n    if a.count('1') == 1:\n        print(-1)\n        continue\n    if n == 2:\n        print(-1)\n        continue\n    if n == 3:\n        print(3)\n        continue\n    if n % 2 == 0:\n        x = n // 2\n    else:\n        x = n // 2 + 1\n    count = x - 1\n    i = 2\n    while i <= n:\n        l = 0\n        k = n // i\n        if k % 2 == 0:\n            l = k // 2\n        else:\n            l = k // 2 + 1\n        count = count + i * l\n        i = i * 2\n    print(count)", "from math import *\nt = int(input())\nwhile t != 0:\n    t = t - 1\n    n = int(input())\n    l = log2(n)\n    if ceil(l) == floor(l):\n        print('-1')\n    else:\n        sum = -1\n        temp = 1\n        for i in range(ceil(l)):\n            if (n - temp) // (2 * temp) == 0:\n                sum = sum + temp\n            else:\n                sum = sum + (n + temp) // (2 * temp) * temp\n            temp = temp * 2\n        print(sum)", "L = [1 << i for i in range(31)]\nfor _ in range(int(input())):\n    n = int(input())\n    t = n\n    c = 0\n    while t:\n        c += 1\n        t = t & t - 1\n        if c > 1:\n            break\n    if c == 1:\n        print(-1)\n        continue\n    (res, t, k) = (0, 0, 0)\n    while L[t] < n:\n        t += 1\n    for l in range(t - 1, -1, -1):\n        res += L[l] * (int(n / L[l]) - k)\n        k = int(n / L[l])\n    print(res - 1)", "t = int(input())\nanswer = ''\nfor _ in range(t):\n    n = int(input())\n    if not n & n - 1:\n        answer += '-1\\n'\n        continue\n    oddNumCnt = (n + 1) // 2\n    cost = oddNumCnt - 1\n    currCost = 2\n    while currCost < n:\n        cost += (n - currCost) // (2 * currCost) * currCost + currCost\n        currCost <<= 1\n    answer += str(cost) + '\\n'\nprint(answer)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    pown = math.log2(n)\n    count = -1\n    if pown == round(pown):\n        print(count)\n    else:\n        powii = 1\n        for i in range(int(pown) + 1):\n            powi = powii\n            powii = pow(2, i + 1)\n            count += powi * (n // powi - n // powii)\n        print(count)", "import math\nt = int(input())\nwhile t:\n    n = int(input())\n    m = math.log2(n)\n    if m == int(m):\n        print(-1)\n    else:\n        m = int(m)\n        res = 0\n        i = 0\n        while n:\n            res = res + 2 ** i * math.ceil(n / 2)\n            i = i + 1\n            n = n // 2\n        print(res - 1)\n    t = t - 1", "ipnl = lambda n: [int(input()) for _ in range(n)]\ninp = lambda : int(input())\nip = lambda : [int(w) for w in input().split()]\nfor _ in range(inp()):\n    n = inp()\n    if n and (not n & n - 1):\n        print(-1)\n        continue\n    cost = -1\n    i = 0\n    while n:\n        ct = (n - 1) // 2 + 1\n        cost += ct * pow(2, i)\n        n //= 2\n        i += 1\n    print(cost)", "t = int(input())\nwhile t:\n    t = t - 1\n    n = int(input())\n    pw = 1\n    ans = 0\n    if n & n - 1 == 0:\n        print(-1)\n        continue\n    while pw <= n:\n        ans = ans + (int(n / pw) - int(n / (2 * pw))) * pw\n        pw = pw * 2\n    print(ans - 1)", "l1 = int(input())\nfor _ in range(l1):\n    n = int(input())\n    sumi = 0\n    if n & n - 1 == 0:\n        print(-1)\n    else:\n        sumi += (n - 1) // 2\n        i = 2\n        while i <= n:\n            temp = n // i\n            temp2 = temp + 1\n            temp3 = temp2 // 2\n            sumi += i * temp3\n            i *= 2\n        print(sumi)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = -1\n    curr = 1\n    while True:\n        if curr == n:\n            ans = -1\n            break\n        elif curr > n:\n            break\n        ans += curr * ((n + curr) // (2 * curr))\n        curr *= 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = -1\n    curr = 1\n    while True:\n        if curr == n:\n            ans = -1\n            break\n        elif curr > n:\n            break\n        ans += curr * ((n + curr) // (2 * curr))\n        curr *= 2\n    print(ans)", "power = []\nval = 1\nwhile val < 1000000000:\n    power.append(val)\n    val *= 2\npower.append(val)\nt = int(input())\nfor T in range(t):\n    n = int(input())\n    bn = bin(n)[2:]\n    if bn.count('1') == 1:\n        print(-1)\n        continue\n    ans = 0\n    for i in range(len(power)):\n        if power[i] > n:\n            break\n        ans += power[i] * ((n + power[i]) // (2 * power[i]))\n    print(ans - 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    answer = -1\n    currentVal = 1\n    while True:\n        if currentVal == n:\n            answer = -1\n            break\n        elif currentVal > n:\n            break\n        answer += currentVal * ((n + currentVal) // (2 * currentVal))\n        currentVal *= 2\n    print(answer)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    now = 1\n    while now < n:\n        l.append(now)\n        now = now << 1\n    l.append(now << 1)\n    if now == n:\n        print(-1)\n        continue\n    ans = 0\n    for i in range(len(l) - 1):\n        ans += l[i] * ((n - l[i]) // l[i + 1])\n        ans += l[i] & l[i] + 1\n    print(ans)", "import math\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    if n & n - 1 == 0:\n        print(-1)\n        continue\n    sum = 0\n    i = 1\n    while (n + i) // (i * 2) > 0:\n        sum += (n + i) // (i * 2) * i\n        i *= 2\n    print(sum - 1)", "for _ in range(int(input())):\n    n = int(input())\n    x = 1\n    if n & n - 1 == 0:\n        print(-1)\n    else:\n        tot = 0\n        while x <= n:\n            m = n // x\n            t = (m + 1) // 2\n            if x > 1:\n                c = t * x\n            else:\n                c = (t - 1) * x\n            tot += c\n            x <<= 1\n        print(tot)", "def roads(n):\n    res = 0\n    if n % 2 == 1:\n        res += n // 2\n    else:\n        res += n // 2 - 1\n    i = 2\n    while n > 0:\n        n //= 2\n        if n % 2 == 0:\n            res += i * (n // 2)\n        else:\n            res += i * (n // 2 + 1)\n        i <<= 1\n    return res\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    (k, c) = (n, 0)\n    while k > 0:\n        if k & 1 == 1:\n            c += 1\n        k = k >> 1\n    if c == 1:\n        print(-1)\n    else:\n        print(roads(n))\n    t -= 1", "from math import ceil\nfrom sys import stdin, stdout\n\ndef input():\n    return stdin.readline()\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        if n & n - 1 == 0:\n            print(-1)\n            continue\n        else:\n            i = 0\n            ans = 0\n            while n > 0:\n                d = ceil(n / 2)\n                ans += 2 ** i * d\n                i = i + 1\n                n = n - d\n        print(ans - 1)\nmain()", "from math import ceil\nfrom sys import stdin, stdout\n\ndef input():\n    return stdin.readline()\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        if n & n - 1 == 0:\n            print(-1)\n            continue\n        else:\n            i = 0\n            ans = 0\n            while n > 0:\n                d = ceil(n / 2)\n                ans += 2 ** i * d\n                i = i + 1\n                n = n // 2\n        print(ans - 1)\nmain()", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    if n & n - 1 == 0:\n        print(-1)\n        continue\n    else:\n        i = 0\n        ans = 0\n        while n > 0:\n            d = ceil(n / 2)\n            ans += 2 ** i * d\n            i = i + 1\n            n = n // 2\n    print(ans - 1)", "pow2 = [1]\nfor i in range(1, 31):\n    pow2.append((pow2[-1] << 1) + 1)\npow21 = [1]\nfor i in range(1, 32):\n    pow21.append(pow21[-1] << 1)\n\ndef cost(n):\n    if n == 0:\n        return 0\n    idx = 0\n    for i in range(31):\n        if pow2[i] > n:\n            idx = i - 1\n            break\n    tmp = pow2[idx]\n    ans = int((tmp + 1) // 2) * (idx + 1)\n    if n > tmp:\n        ans += tmp + 1\n    ansnew = 0\n    if n > tmp:\n        ansnew = cost(n - tmp - 1)\n    return ans + ansnew\nfor i in range(int(input())):\n    n = int(input())\n    if n in pow21:\n        print(-1)\n    else:\n        idx = 0\n        for i in range(31):\n            if pow2[i] > n:\n                idx = i - 1\n                break\n        tmp = pow2[idx]\n        if n == tmp + 1:\n            print(cost(n))\n        else:\n            print(cost(n) - 1)", "try:\n    n = int(input())\n    for i in range(n):\n        t = int(input())\n        a = 0\n        s = 1\n        if t & t - 1 == 0:\n            print('-1')\n            continue\n        while s <= t:\n            a = a + (int(t / s) - int(t / (s * 2))) * s\n            s = s * 2\n        print(a - 1)\nexcept:\n    pass", "import math\narr = []\nb = math.log2(10 ** 9) + 1\nfor i in range(int(b) + 1):\n    arr.append(2 ** i)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = math.log2(n)\n    if int(a) == a:\n        print(-1)\n    else:\n        ans = 0\n        for i in range(int(a) + 1):\n            ans += (n // arr[i] - n // arr[i + 1]) * arr[i]\n        print(ans - 1)", "t = int(input())\nfor xx in range(t):\n    n = int(input())\n    if n & n - 1 == 0:\n        print(-1)\n        continue\n    res = 0\n    if n % 2 == 1:\n        res += (n - 1) // 2\n        n = res\n    else:\n        res += n // 2 - 1\n        n = n // 2\n    i = 2\n    while n != 1:\n        if n % 2 == 1:\n            res += (n + 1) // 2 * i\n        else:\n            res += n // 2 * i\n        n = n // 2\n        i = i * 2\n    res += i\n    print(res)", "def isPowerOfTwo(x):\n    return x and (not x & x - 1)\n\ndef dp(n):\n    if isPowerOfTwo(n):\n        return -1\n    b = bin(n)[2:]\n    c = 0\n    for i in range(1, len(b)):\n        mul = int(b[:i], 2) + 1\n        if b[i] == '0':\n            mul -= 1\n        c += mul * pow(2, len(b) - 1 - i)\n    c += pow(2, len(b) - 1)\n    return c - 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(dp(n))", "t = int(input())\nwhile t:\n    t = t - 1\n    n = int(input())\n    pw = 1\n    ans = 0\n    if n & n - 1 == 0:\n        print(-1)\n        continue\n    while pw <= n:\n        ans = ans + (int(n / pw) - int(n / (2 * pw))) * pw\n        pw = pw * 2\n    print(ans - 1)", "for _ in range(int(input())):\n    n = int(input())\n    answer = -1\n    currentVal = 1\n    while True:\n        if currentVal == n:\n            answer = -1\n            break\n        elif currentVal > n:\n            break\n        answer += currentVal * ((n + currentVal) // (2 * currentVal))\n        currentVal *= 2\n    print(answer)", "for t in range(int(input())):\n    n = int(input())\n    b_n = bin(n)[2:]\n    if b_n.count('1') == 1:\n        print(-1)\n        continue\n    a = n // 2 - (n % 2 == 0)\n    q = 2\n    while q <= n:\n        x = n // q - n // (2 * q)\n        a += q * x\n        q = q * 2\n    print(a)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    answer = -1\n    currentVal = 1\n    while True:\n        if currentVal == n:\n            answer = -1\n            break\n        elif currentVal > n:\n            break\n        answer += currentVal * ((n + currentVal) // (2 * currentVal))\n        currentVal *= 2\n    print(answer)", "import sys\ninput = sys.stdin.readline\nimport math\nfor _ in range(int(input())):\n    N = int(input())\n    odd = math.ceil(N / 2)\n    even = N // 2\n    f = 0\n    if 2 ** 30 % N == 0:\n        f = 1\n    answer = odd - 1\n    i = 2\n    while even != 0:\n        answer += math.ceil(even / 2) * i\n        i = i * 2\n        even = even // 2\n    if f == 1:\n        print(-1)\n    else:\n        print(answer)", "import sys\ninput = sys.stdin.readline\nimport math\nfor _ in range(int(input())):\n    N = int(input())\n    odd = math.ceil(N / 2)\n    even = N // 2\n    f = 0\n    if 2 ** 30 % N == 0:\n        f = 1\n    answer = odd - 1\n    i = 2\n    while even != 0:\n        answer += math.ceil(even / 2) * i\n        i = i * 2\n        even = even // 2\n    if f == 1:\n        print(-1)\n    else:\n        print(answer)", "import math as mt\nimport sys, string\ninput = sys.stdin.readline\nfrom collections import defaultdict\nL = lambda : list(map(int, input().split()))\nLs = lambda : list(input().split())\nM = lambda : map(int, input().split())\nI = lambda : int(input())\n\ndef ap(n, a):\n    d = a * 2\n    terms = (n - a) // d + 1\n    return terms * a\n\ndef ispower(n):\n    s = bin(n)[2:]\n    if s.count('1') == 1:\n        return True\n    return False\n\ndef la(n):\n    k = 1\n    s = 0\n    while k < n:\n        s += ap(n, k)\n        k *= 2\n    return s\nt = I()\nfor i in range(t):\n    n = I()\n    if ispower(n):\n        print(-1)\n    else:\n        print(la(n) - 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    answer = -1\n    currentVal = 1\n    while True:\n        if currentVal == n:\n            answer = -1\n            break\n        elif currentVal > n:\n            break\n        answer += currentVal * ((n + currentVal) // (2 * currentVal))\n        currentVal *= 2\n    print(answer)", "import sys\ninput = sys.stdin.readline\nimport math\nfor _ in range(int(input())):\n    N = int(input())\n    f = 0\n    if 2 ** 30 % N == 0:\n        f = 1\n    answer = (N - 1) // 2\n    p = 2\n    total = int(math.log(N, 2))\n    for j in range(0, total):\n        ans = (N // p - N // (2 * p)) * p\n        answer += ans\n        p = p * 2\n    if f == 1:\n        print(-1)\n    else:\n        print(answer)", "from sys import *\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    a = bin(n)\n    if a.count('1') == 1:\n        print(-1)\n        continue\n    if n == 2:\n        print(-1)\n        continue\n    if n == 3:\n        print(3)\n        continue\n    if n % 2 == 0:\n        x = n // 2\n    else:\n        x = n // 2 + 1\n    count = x - 1\n    i = 2\n    while i <= n:\n        l = 0\n        k = n // i\n        if k % 2 == 0:\n            l = k // 2\n        else:\n            l = k // 2 + 1\n        count = count + i * l\n        i = i * 2\n    print(count)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    answer = -1\n    currentVal = 1\n    while True:\n        if currentVal == n:\n            answer = -1\n            break\n        elif currentVal > n:\n            break\n        answer += currentVal * ((n + currentVal) // (2 * currentVal))\n        currentVal *= 2\n    print(answer)", "t = int(input())\nans = []\nfor ti in range(t):\n    n = int(input())\n    ansi = 0\n    lsb = 1\n    fake_n = n\n    while fake_n % 2 == 0:\n        fake_n //= 2\n        lsb *= 2\n    if lsb == n:\n        ans.append(-1)\n    else:\n        fake_n = n\n        msb = 1\n        while fake_n > 1:\n            msb *= 2\n            fake_n //= 2\n        ansi += (n + 1) // 2 - 1\n        x = 2\n        while x <= msb:\n            y = (n - x) // (2 * x) + 1\n            ansi += y * x\n            x *= 2\n        ans.append(ansi)\nfor ansi in ans:\n    print(ansi)", "dp = []\nx = 2\nwhile x <= 10 ** 9:\n    dp.append(x)\n    x = x << 1\nfor T in range(int(input())):\n    n = int(input())\n    if n in dp:\n        print(-1)\n    else:\n        res = 0\n        for i in range(len(dp)):\n            if dp[i] > n:\n                break\n            num = n // dp[i]\n            if num % 2 == 0:\n                gr = num // 2\n            else:\n                gr = (num + 1) // 2\n            res += gr * dp[i]\n        if n % 2 == 0:\n            e = n // 2 - 1\n        else:\n            e = n // 2\n        print(res + e)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    pown = math.log2(n)\n    count = -1\n    if pown == round(pown):\n        print(count)\n    else:\n        powii = 1\n        for i in range(int(pown) + 1):\n            powi = powii\n            powii = pow(2, i + 1)\n            count += powi * (n // powi - n // powii)\n        print(count)", "import sys\nfrom sys import stdin, stdout\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    if n == 2:\n        print(-1)\n        continue\n    if n == 3:\n        print(3)\n        continue\n    if n % 2 == 0:\n        x = n // 2\n    else:\n        x = n // 2 + 1\n    ans = x - 1\n    bn = bin(n)\n    if bn.count('1') == 1:\n        print(-1)\n        continue\n    p = 2\n    while p <= n:\n        q = n // p\n        if q % 2 == 0:\n            l = q // 2\n        else:\n            l = q // 2 + 1\n        ans += l * p\n        p *= 2\n    print(ans)", "from collections import *\nfrom bisect import *\nfrom math import *\nfrom heapq import *\nimport sys\ninput = sys.stdin.readline\nt = int(input())\npre = [2]\nfor i in range(30):\n    pre.append(pre[-1] * 2)\nwhile t:\n    t -= 1\n    n = int(input())\n    v = bin(n)[2:]\n    if v.count('1') == 1:\n        print(-1)\n        continue\n    s = (n + 1) // 2\n    s -= 1\n    pp = 0\n    while pre[pp] <= n:\n        s1 = n // pre[pp]\n        s2 = n // pre[pp + 1]\n        s3 = max(1, s1 - s2)\n        if s3 == 1:\n            s += int(pre[pp])\n        else:\n            s += s3 * pre[pp]\n        pp += 1\n    print(int(s))"]