["from collections import defaultdict\ns = '#' + input().strip()\nabdiff = 0\nacdiff = 0\nsims = defaultdict(int)\nfor ch in s:\n    if ch == 'A':\n        abdiff += 1\n        acdiff += 1\n    else:\n        abdiff -= ch == 'B'\n        acdiff -= ch == 'C'\n    sims[abdiff, acdiff] += 1\nres = 0\nfor v in sims.values():\n    res += v * (v - 1) // 2\nprint(res)", "from collections import defaultdict\ns = '#' + input().strip()\nabdiff = 0\nacdiff = 0\nsims = defaultdict(int)\nfor ch in s:\n    if ch == 'A':\n        abdiff += 1\n        acdiff += 1\n    else:\n        abdiff -= ch == 'B'\n        acdiff -= ch == 'C'\n    sims[abdiff, acdiff] += 1\nres = 0\nfor v in sims.values():\n    res += v * (v - 1) // 2\nprint(res)", "s = input()\ndicti = {}\ndicti[0, 0] = 1\na = b = c = 0\nres = 0\nfor i in s:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    elif i == 'C':\n        c += 1\n    ans = (a - b, a - c)\n    if ans in dicti:\n        res += dicti[ans]\n    dicti[ans] = dicti.get(ans, 0) + 1\nprint(res)", "st = input()\nd = {}\nd[0, 0] = 1\na = b = c = 0\nres = 0\nfor i in st:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    elif i == 'C':\n        c += 1\n    val = (a - b, a - c)\n    if val in d:\n        res += d[val]\n    d[val] = d.get(val, 0) + 1\nprint(res)", "n = input()\na = b = c = 0\nd = {}\nd[0, 0] = 1\nk = 0\nfor i in n:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    elif i == 'C':\n        c += 1\n    m = (a - b, a - c)\n    if m in d:\n        k += d[m]\n        d[m] += 1\n    else:\n        d[m] = 1\nprint(k)", "st = input()\nd = {}\nd[0, 0] = 1\na = b = c = 0\nres = 0\nfor i in st:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    elif i == 'C':\n        c += 1\n    val = (a - b, a - c)\n    if val in d:\n        res += d[val]\n    d[val] = d.get(val, 0) + 1\nprint(res)", "s = input()\ndict = {}\na = 0\nb = 0\nc = 0\nans = 0\ndict[0, 0, 0] = 1\nfor i in range(0, len(s)):\n    if s[i] == 'A':\n        a += 1\n    if s[i] == 'B':\n        b += 1\n    if s[i] == 'C':\n        c += 1\n    mi = min(a, min(b, c))\n    if (a - mi, b - mi, c - mi) in dict.keys():\n        ans += dict[a - mi, b - mi, c - mi]\n        dict[a - mi, b - mi, c - mi] += 1\n    else:\n        dict[a - mi, b - mi, c - mi] = 1\nprint(ans)", "x = str(input())\ndic = {(0, 0): 1}\na = b = c = 0\nans = 0\nfor i in x:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    else:\n        c += 1\n    if (a - b, a - c) not in dic:\n        dic[a - b, a - c] = 1\n    else:\n        dic[a - b, a - c] += 1\nfor i in dic.values():\n    ans += i * (i - 1) // 2\nprint(ans)", "from sys import stdin\ninput = stdin.readline\ns = input().strip()\nn = len(s)\n(pa, pb, pc) = ([0], [0], [0])\nfor i in range(n):\n    pa.append(pa[-1] + (s[i] == 'A'))\n    pb.append(pb[-1] + (s[i] == 'B'))\n    pc.append(pc[-1] + (s[i] == 'C'))\nd = dict()\nfor i in range(n + 1):\n    (x, y, z) = (pa[i] - pb[i], pb[i] - pc[i], pc[i] - pa[i])\n    d[x, y, z] = d.get((x, y, z), 0) + 1\nans = 0\nfor x in d.values():\n    ans += x * (x - 1) // 2\nprint(ans)", "from sys import stdin\ninput = stdin.readline\n\ndef answer():\n    (pa, pb, pc) = ([0], [0], [0])\n    for i in range(n):\n        pa.append(pa[-1] + (s[i] == 'A'))\n        pb.append(pb[-1] + (s[i] == 'B'))\n        pc.append(pc[-1] + (s[i] == 'C'))\n    d = dict()\n    for i in range(n + 1):\n        (x, y, z) = (pa[i] - pb[i], pb[i] - pc[i], pc[i] - pa[i])\n        d[x, y, z] = d.get((x, y, z), 0) + 1\n    ans = 0\n    for x in d.values():\n        ans += x * (x - 1) // 2\n    return ans\nfor T in range(1):\n    s = input().strip()\n    n = len(s)\n    print(answer())", "s = input().strip()\nfrom collections import defaultdict\nseen = defaultdict(int)\nans = 0\nprev = [0, 0]\nseen[0, 0] = 1\nfor (i, elem) in enumerate(s):\n    if elem == 'A':\n        prev[0] += 1\n        prev[1] += 1\n    elif elem == 'B':\n        prev[0] -= 1\n    else:\n        prev[1] -= 1\n    ans += seen[prev[0], prev[1]]\n    seen[prev[0], prev[1]] += 1\nprint(ans)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom sys import maxsize\n\ndef solve():\n    s = get_string()\n    n = len(s)\n    d = dict()\n    d[0, 0] = 1\n    (a, b, c) = (0, 0, 0)\n    ans = 0\n    for i in range(n):\n        if s[i] == 'A':\n            a += 1\n        elif s[i] == 'B':\n            b += 1\n        else:\n            c += 1\n        other = (a - b, a - c)\n        if other in d:\n            ans += d[other]\n            d[other] += 1\n        else:\n            d[other] = 1\n    get_print_int(ans)\nsolve()", "s = input()\nn = len(s)\ncount_A = [0] * n\ncount_B = [0] * n\ncount_C = [0] * n\nfor i in range(n):\n    if s[i] == 'A':\n        count_A[i] += 1\n    elif s[i] == 'B':\n        count_B[i] += 1\n    else:\n        count_C[i] += 1\nfor i in range(1, n):\n    (a, b, c) = (count_A[i] + count_A[i - 1], count_B[i] + count_B[i - 1], count_C[i] + count_C[i - 1])\n    x = min(a, b, c)\n    (count_A[i], count_B[i], count_C[i]) = (a - x, b - x, c - x)\ncounts = {}\ncounts[0, 0, 0] = 1\nfor i in range(n):\n    key = (count_A[i], count_B[i], count_C[i])\n    counts[key] = counts.get(key, 0) + 1\nans = 0\nfor v in counts.values():\n    if v:\n        ans += v * (v - 1) // 2\nprint(ans)", "z = input()\n(a, b, c) = (0, 0, 0)\nr = 0\ndict = {}\ndict[0, 0] = 1\nfor i in z:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    elif i == 'C':\n        c += 1\n    k = (c - a, c - b)\n    if k in dict:\n        r += dict[k]\n    dict[k] = dict.get(k, 0) + 1\nprint(r)", "s = input()\n(a, b, c) = (0, 0, 0)\nd = {}\nd[0, 0] = 1\nk = 0\nfor i in s:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    elif i == 'C':\n        c += 1\n    m = (a - b, a - c)\n    if m in d:\n        k += d[m]\n        d[m] += 1\n    else:\n        d[m] = 1\nprint(k)", "z = input()\n(a, b, c) = (0, 0, 0)\nres = 0\ndict = {}\ndict[0, 0] = 1\nfor i in z:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    elif i == 'C':\n        c += 1\n    k = (c - a, c - b)\n    if k in dict:\n        res += dict[k]\n    dict[k] = dict.get(k, 0) + 1\nprint(res)", "s = input()\n(a, b, c, ans) = (0, 0, 0, 0)\nd = {}\nd[0, 0] = 1\nfor i in s:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    elif i == 'C':\n        c += 1\n    k = (a - b, a - c)\n    if k in d:\n        ans += d[k]\n        d[k] += 1\n    else:\n        d[k] = 1\nprint(ans)", "s = input()\nfrom collections import defaultdict\nmp = defaultdict(int)\nmp[0, 0] = 1\ncount = 0\n(a, b, c) = (0, 0, 0)\nfor i in s:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    else:\n        c += 1\n    m = (a - b, a - c)\n    count += mp[m]\n    mp[m] += 1\nprint(count)", "s = input()\nfrom collections import defaultdict\nm = defaultdict(int)\nm[0, 0] = 1\nans = 0\n(a, b, c) = (0, 0, 0)\nfor i in s:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    else:\n        c += 1\n    k = (a - b, a - c)\n    ans += m[k]\n    m[k] += 1\nprint(ans)", "s = input()\n(a, b, c) = (0, 0, 0)\nans = 0\ndict = {}\ndict[0, 0] = 1\nfor i in s:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    elif i == 'C':\n        c += 1\n    k = (c - a, c - b)\n    if k in dict:\n        ans += dict[k]\n        dict[k] += 1\n    else:\n        dict[k] = 1\nprint(ans)", "str = input()\n(a, b, c) = (0, 0, 0)\nans = 0\ndict = {}\ndict[0, 0] = 1\nfor i in str:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    elif i == 'C':\n        c += 1\n    k = (c - a, c - b)\n    if k in dict:\n        ans += dict[k]\n        dict[k] += 1\n    else:\n        dict[k] = 1\nprint(ans)", "s = input()\n(a, b, c) = (0, 0, 0)\nans = 0\ndict = {}\ndict[0, 0] = 1\nfor i in s:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    elif i == 'C':\n        c += 1\n    k = (c - a, c - b)\n    if k in dict:\n        ans += dict[k]\n        dict[k] += 1\n    else:\n        dict[k] = 1\nprint(ans)", "s = input()\n(a, b, c) = (0, 0, 0)\nans = 0\ndict = {}\ndict[0, 0] = 1\nfor i in s:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    elif i == 'C':\n        c += 1\n    k = (c - a, c - b)\n    if k in dict:\n        ans += dict[k]\n    dict[k] = dict.get(k, 0) + 1\nprint(ans)", "s = input()\n(a, b, c) = (0, 0, 0)\nans = 0\ndict = {}\ndict[0, 0] = 1\nfor i in s:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    elif i == 'C':\n        c += 1\n    k = (c - a, c - b)\n    if k in dict:\n        ans += dict[k]\n        dict[k] += 1\n    else:\n        dict[k] = 1\nprint(ans)", "s = input()\n(a, b, c) = (0, 0, 0)\nres = 0\nf = {}\nf[0, 0] = 1\nfor i in s:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    elif i == 'C':\n        c += 1\n    x = (c - a, c - b)\n    if x in f:\n        res += f[x]\n        f[x] += 1\n    else:\n        f[x] = 1\nprint(res)", "p = input()\n\ndef fun(p):\n    i = 0\n    j = 1\n    c = 0\n    m = {}\n    m[0, 0] = 1\n    (a, b, c, t) = (0, 0, 0, 0)\n    res = 0\n    for i in p:\n        if i == 'A':\n            a += 1\n        elif i == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t not in m:\n            res += 0\n        else:\n            res += m[t]\n        if t not in m:\n            m[t] = 1\n        else:\n            m[t] += 1\n    return res\nprint(fun(p))", "n = input()\n(a, b, c) = (0, 0, 0)\nf = {}\nans = 0\nf[0, 0] = 1\nfor i in n:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    elif i == 'C':\n        c += 1\n    x = (c - a, c - b)\n    if x in f:\n        ans += f[x]\n        f[x] += 1\n    else:\n        f[x] = 1\nprint(ans)", "s = input()\ncount = 0\nmap = {}\nmap[0, 0] = 1\n(A, B, C) = (0, 0, 0)\nans = 0\nfor i in s:\n    if i == 'A':\n        A += 1\n    elif i == 'B':\n        B += 1\n    elif i == 'C':\n        C += 1\n    temp = (C - A, C - B)\n    if temp in map:\n        ans += map[temp]\n        map[temp] += 1\n    else:\n        map[temp] = 1\nprint(ans)", "s = input()\n\ndef fun(s):\n    i = 0\n    j = 1\n    c = 0\n    m = {}\n    m[0, 0] = 1\n    (a, b, c, t) = (0, 0, 0, 0)\n    res = 0\n    for i in s:\n        if i == 'A':\n            a += 1\n        elif i == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t not in m:\n            res += 0\n        else:\n            res += m[t]\n        if t not in m:\n            m[t] = 1\n        else:\n            m[t] += 1\n    return res\nprint(fun(s))", "s = input()\nfrom collections import defaultdict\nmp = defaultdict(int)\nmp[0, 0] = 1\ncount = 0\n(a, b, c) = (0, 0, 0)\nfor i in s:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    else:\n        c += 1\n    m = (a - b, a - c)\n    count += mp[m]\n    mp[m] += 1\nprint(count)", "from os import path\nimport sys\ntry:\n    strr = input()\n    d = {(0, 0): 1}\n    (a, b, c, count) = (0, 0, 0, 0)\n    for s in strr:\n        if s == 'A':\n            a += 1\n        elif s == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t in d:\n            count += d[t]\n            d[t] += 1\n        else:\n            d[t] = 1\n    print(count)\nexcept:\n    pass", "s = input()\n\ndef fun(s):\n    i = 0\n    j = 1\n    c = 0\n    mp = {}\n    mp[0, 0] = 1\n    a = 0\n    b = 0\n    c = 0\n    t = 0\n    res = 0\n    for i in s:\n        if i == 'A':\n            a += 1\n        elif i == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t not in mp:\n            res += 0\n        else:\n            res += mp[t]\n        if t not in mp:\n            mp[t] = 1\n        else:\n            mp[t] += 1\n    return res\nprint(fun(s))", "s = input()\nfrom collections import defaultdict\nmp = defaultdict(int)\nmp[0, 0] = 1\ncount = 0\n(a, b, c) = (0, 0, 0)\nfor i in s:\n    if i == 'A':\n        a += 1\n    elif i == 'B':\n        b += 1\n    else:\n        c += 1\n    m = (a - b, a - c)\n    count += mp[m]\n    mp[m] += 1\nprint(count)", "string = input()\n(a, b, c) = (0, 0, 0)\nsubstr = dict()\nsubstr[0, 0, 0] = 1\nfor char in string:\n    (a, b, c) = (a + (char == 'A'), b + (char == 'B'), c + (char == 'C'))\n    new_sub = (a - min(a, b, c), b - min(a, b, c), c - min(a, b, c))\n    if new_sub in substr:\n        substr[new_sub] += 1\n    else:\n        substr[new_sub] = 1\nsolution = sum(map(lambda x: x * (x - 1) // 2, substr.values()))\nprint(solution)", "from os import path\nimport sys\ntry:\n    strr = input()\n    d = {(0, 0): 1}\n    (a, b, c, count) = (0, 0, 0, 0)\n    for s in strr:\n        if s == 'A':\n            a += 1\n        elif s == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t in d:\n            count += d[t]\n            d[t] += 1\n        else:\n            d[t] = 1\n    print(count)\nexcept:\n    pass", "from math import ceil, sqrt, log, gcd\nfrom collections import deque, defaultdict as dd\nfrom os import path\nimport sys\ntry:\n    str = input()\n    d = {(0, 0): 1}\n    (a, b, c, r) = (0, 0, 0, 0)\n    for s in str:\n        if s == 'A':\n            a += 1\n        elif s == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t in d:\n            r += d[t]\n            d[t] += 1\n        else:\n            d[t] = 1\n    print(r)\nexcept:\n    pass", "from math import ceil, sqrt, log, gcd\nfrom collections import deque, defaultdict as dd\nfrom os import path\nimport sys\ntry:\n    str = input()\n    dictk = {(0, 0): 1}\n    (a, b, c, res) = (0, 0, 0, 0)\n    for s in str:\n        if s == 'A':\n            a += 1\n        elif s == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t in dictk:\n            res += dictk[t]\n            dictk[t] += 1\n        else:\n            dictk[t] = 1\n    print(res)\nexcept:\n    pass", "from math import ceil, sqrt, log, gcd\nfrom collections import deque, defaultdict as dd\nfrom os import path\nimport sys\ntry:\n    string = input()\n    dictk = {(0, 0): 1}\n    (a, b, c, res) = (0, 0, 0, 0)\n    for s in string:\n        if s == 'A':\n            a += 1\n        elif s == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t in dictk:\n            res += dictk[t]\n            dictk[t] += 1\n        else:\n            dictk[t] = 1\n    print(res)\nexcept:\n    pass", "from math import ceil, sqrt, log, gcd\nfrom collections import deque, defaultdict as dd\nfrom os import path\nimport sys\ntry:\n    string = input()\n    dictk = {(0, 0): 1}\n    a = 0\n    b = 0\n    c = 0\n    res = 0\n    for s in string:\n        if s == 'A':\n            a += 1\n        elif s == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t in dictk:\n            res += dictk[t]\n            dictk[t] += 1\n        else:\n            dictk[t] = 1\n    print(res)\nexcept:\n    pass", "s = input()\nd = {}\n(a, b, c) = (0, 0, 0)\nd[0, 0, 0] = 1\ncount = 0\nfor i in range(len(s)):\n    if s[i] == 'A':\n        a += 1\n    if s[i] == 'B':\n        b += 1\n    if s[i] == 'C':\n        c += 1\n    mi = min(a, b, c)\n    if (a - mi, b - mi, c - mi) in d.keys():\n        count += d[a - mi, b - mi, c - mi]\n        d[a - mi, b - mi, c - mi] += 1\n    else:\n        d[a - mi, b - mi, c - mi] = 1\nprint(count)", "try:\n    s = input()\n    d = {(0, 0): 1}\n    (a, b, c, r) = (0, 0, 0, 0)\n    for i in s:\n        if i == 'A':\n            a += 1\n        elif i == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t in d:\n            r += d[t]\n            d[t] += 1\n        else:\n            d[t] = 1\n    print(r)\nexcept:\n    pass", "import sys\nfrom collections import Counter\nimport numpy as np\nimport math\ntest = False\nanswer = 0\nprev = {}\ncurrent_count = [0, 0, 0]\nprev[tuple(current_count)] = 1\nS = input().strip()\nfor letter in S:\n    if letter == 'A':\n        current_count = [current_count[0] + 1, current_count[1] + 1, current_count[2]]\n    elif letter == 'B':\n        current_count = [current_count[0] - 1, current_count[1], current_count[2] + 1]\n    else:\n        current_count = [current_count[0], current_count[1] - 1, current_count[2] - 1]\n    current_count = tuple(current_count)\n    if current_count in prev:\n        answer += prev[current_count]\n        prev[current_count] += 1\n        if test:\n            print(current_count)\n    else:\n        prev[current_count] = 1\nprint(answer)\nif test:\n    print(' ')", "s = input()\nd = {}\nd[0, 0] = 1\nans = 0\na = b = c = 0\nfor i in s:\n    if i == 'A':\n        a += 1\n    if i == 'B':\n        b += 1\n    if i == 'C':\n        c += 1\n    if (a - b, b - c) not in d:\n        d[a - b, b - c] = 0\n    else:\n        ans += d[a - b, b - c]\n    d[a - b, b - c] += 1\nprint(ans)", "s = input()\nd = {}\nd[0, 0] = 1\nans = 0\na = b = c = 0\nfor i in s:\n    if i == 'A':\n        a += 1\n    if i == 'B':\n        b += 1\n    if i == 'C':\n        c += 1\n    if (a - b, b - c) not in d:\n        d[a - b, b - c] = 0\n    else:\n        ans += d[a - b, b - c]\n    d[a - b, b - c] += 1\nprint(ans)", "try:\n    string = input()\n    dictk = {(0, 0): 1}\n    a = 0\n    b = 0\n    c = 0\n    res = 0\n    for s in string:\n        if s == 'A':\n            a += 1\n        elif s == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t in dictk:\n            res += dictk[t]\n            dictk[t] += 1\n        else:\n            dictk[t] = 1\n    print(res)\nexcept:\n    pass", "try:\n    string = input()\n    dictk = {(0, 0): 1}\n    a = 0\n    b = 0\n    c = 0\n    res = 0\n    for s in string:\n        if s == 'A':\n            a += 1\n        elif s == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t in dictk:\n            res += dictk[t]\n            dictk[t] += 1\n        else:\n            dictk[t] = 1\n    print(res)\nexcept:\n    pass", "try:\n    string = input()\n    dictk = {(0, 0): 1}\n    a = 0\n    b = 0\n    c = 0\n    res = 0\n    for s in string:\n        if s == 'A':\n            a += 1\n        elif s == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t in dictk:\n            res += dictk[t]\n            dictk[t] += 1\n        else:\n            dictk[t] = 1\n    print(res)\nexcept:\n    pass", "try:\n    string = input()\n    dictk = {(0, 0): 1}\n    a = 0\n    b = 0\n    c = 0\n    res = 0\n    for s in string:\n        if s == 'A':\n            a += 1\n        elif s == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t in dictk:\n            res += dictk[t]\n            dictk[t] += 1\n        else:\n            dictk[t] = 1\n    print(res)\nexcept:\n    pass", "try:\n    string = input()\n    dictk = {(0, 0): 1}\n    a = 0\n    b = 0\n    c = 0\n    res = 0\n    for s in string:\n        if s == 'A':\n            a += 1\n        elif s == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t in dictk:\n            res += dictk[t]\n            dictk[t] += 1\n        else:\n            dictk[t] = 1\n    print(res)\nexcept:\n    pass", "try:\n    string = input()\n    dictk = {(0, 0): 1}\n    a = 0\n    b = 0\n    c = 0\n    res = 0\n    for s in string:\n        if s == 'A':\n            a += 1\n        elif s == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t in dictk:\n            res += dictk[t]\n            dictk[t] += 1\n        else:\n            dictk[t] = 1\n    print(res)\nexcept:\n    pass", "try:\n    string = input()\n    dictk = {(0, 0): 1}\n    a = 0\n    b = 0\n    c = 0\n    res = 0\n    for s in string:\n        if s == 'A':\n            a += 1\n        elif s == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t in dictk:\n            res += dictk[t]\n            dictk[t] += 1\n        else:\n            dictk[t] = 1\n    print(res)\nexcept:\n    pass", "try:\n    string = input()\n    dictk = {(0, 0): 1}\n    a = 0\n    b = 0\n    c = 0\n    res = 0\n    for s in string:\n        if s == 'A':\n            a += 1\n        elif s == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t in dictk:\n            res += dictk[t]\n            dictk[t] += 1\n        else:\n            dictk[t] = 1\n    print(res)\nexcept:\n    pass", "s = input()\n\ndef fun(s):\n    i = 0\n    j = 1\n    c = 0\n    mp = {}\n    mp[0, 0] = 1\n    a = 0\n    b = 0\n    c = 0\n    t = 0\n    res = 0\n    for i in s:\n        if i == 'A':\n            a += 1\n        elif i == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t not in mp:\n            res += 0\n        else:\n            res += mp[t]\n        if t not in mp:\n            mp[t] = 1\n        else:\n            mp[t] += 1\n    return res\nprint(fun(s))", "s = input()\n\ndef fun(s):\n    i = 0\n    j = 1\n    c = 0\n    mp = {}\n    mp[0, 0] = 1\n    a = 0\n    b = 0\n    c = 0\n    t = 0\n    res = 0\n    for i in s:\n        if i == 'A':\n            a += 1\n        elif i == 'B':\n            b += 1\n        else:\n            c += 1\n        t = (c - a, c - b)\n        if t not in mp:\n            res += 0\n        else:\n            res += mp[t]\n        if t not in mp:\n            mp[t] = 1\n        else:\n            mp[t] += 1\n    return res\nprint(fun(s))", "s = input()\nd = {}\n(a, b, c) = (0, 0, 0)\nd[0, 0, 0] = 1\ncount = 0\nfor i in range(len(s)):\n    if s[i] == 'A':\n        a += 1\n    if s[i] == 'B':\n        b += 1\n    if s[i] == 'C':\n        c += 1\n    mi = min(a, b, c)\n    if (a - mi, b - mi, c - mi) in d.keys():\n        count += d[a - mi, b - mi, c - mi]\n        d[a - mi, b - mi, c - mi] += 1\n    else:\n        d[a - mi, b - mi, c - mi] = 1\nprint(count)", "s = input()\ndic = {(0, 0): 1}\ncount = 0\nac = 0\nbc = 0\ncc = 0\nfor i in range(len(s)):\n    if s[i] == 'A':\n        ac += 1\n    elif s[i] == 'B':\n        bc += 1\n    else:\n        cc += 1\n    pair = (ac - bc, ac - cc)\n    count += dic.get(pair, 0)\n    dic[pair] = dic.get(pair, 0) + 1\nprint(count)", "string = list(input())\nma = {}\nma[0, 0, 0] = 1\na = 0\nb = 0\nc = 0\ncnt = 0\nfor i in range(len(string)):\n    if string[i] == 'A':\n        a += 1\n    if string[i] == 'B':\n        b += 1\n    if string[i] == 'C':\n        c += 1\n    mi = min(a, b, c)\n    if (a - mi, b - mi, c - mi) in ma.keys():\n        cnt += ma[a - mi, b - mi, c - mi]\n        ma[a - mi, b - mi, c - mi] += 1\n    else:\n        ma[a - mi, b - mi, c - mi] = 1\nprint(cnt)", "t = list(input())\ncount = 0\nk = {}\nk[0, 0, 0] = 1\na = 0\nb = 0\nc = 0\nfor i in range(len(t)):\n    if t[i] == 'A':\n        a += 1\n    elif t[i] == 'B':\n        b += 1\n    elif t[i] == 'C':\n        c += 1\n    mi = min(a, b, c)\n    if (a - mi, b - mi, c - mi) in k.keys():\n        count += k[a - mi, b - mi, c - mi]\n        k[a - mi, b - mi, c - mi] += 1\n    else:\n        k[a - mi, b - mi, c - mi] = 1\nprint(count)", "s = input()\ndict = {}\na = 0\nb = 0\nc = 0\nans = 0\ndict[0, 0, 0] = 1\nfor i in range(0, len(s)):\n    if s[i] == 'A':\n        a += 1\n    if s[i] == 'B':\n        b += 1\n    if s[i] == 'C':\n        c += 1\n    mi = min(a, min(b, c))\n    if (a - mi, b - mi, c - mi) in dict.keys():\n        ans += dict[a - mi, b - mi, c - mi]\n        dict[a - mi, b - mi, c - mi] += 1\n    else:\n        dict[a - mi, b - mi, c - mi] = 1\nprint(ans)", "s = '#' + input().strip()\nn = len(s)\nd = {}\nsm = 0\na = 0\nb = 0\nc = 0\nfor i in range(n):\n    if s[i] == 'A':\n        a += 1\n    if s[i] == 'B':\n        b += 1\n    if s[i] == 'C':\n        c += 1\n    sm += d.get((a - b, a - c), 0)\n    d[a - b, a - c] = d.get((a - b, a - c), 0) + 1\nprint(sm)", "from collections import defaultdict\ns = '#' + input().strip()\nabdiff = 0\nacdiff = 0\nsims = defaultdict(int)\nfor ch in s:\n    if ch == 'A':\n        abdiff += 1\n        acdiff += 1\n    else:\n        abdiff -= ch == 'B'\n        acdiff -= ch == 'C'\n    sims[abdiff, acdiff] += 1\nres = 0\nfor v in sims.values():\n    res += v * (v - 1) // 2\nprint(res)", "from collections import defaultdict\ns = '#' + input().strip()\nabdiff = 0\nacdiff = 0\nsims = defaultdict(int)\nfor ch in s:\n    if ch == 'A':\n        abdiff += 1\n        acdiff += 1\n    else:\n        abdiff -= ch == 'B'\n        acdiff -= ch == 'C'\n    sims[abdiff, acdiff] += 1\nres = 0\nfor v in sims.values():\n    res += v * (v - 1) // 2\nprint(res)", "from collections import defaultdict\ns = input().strip()\nls = len(s)\nca = 0\ncb = 0\ncc = 0\nc = [[ca, cb, cc]]\nfor i in s:\n    if i == 'A':\n        ca += 1\n    if i == 'B':\n        cb += 1\n    if i == 'C':\n        cc += 1\n    c.append([ca, cb, cc])\ng = defaultdict(int)\nfor i in range(ls + 1):\n    mini = min(c[i])\n    c[i] = [j - mini for j in c[i]]\n    g[tuple(c[i])] += 1\nans = 0\nfor i in g:\n    temp = g[i]\n    if temp > 1:\n        ans += temp * (temp - 1) // 2\nprint(ans)", "from collections import defaultdict\ns = '#' + input().strip()\nabdiff = 0\nacdiff = 0\nsims = defaultdict(int)\nfor ch in s:\n    if ch == 'A':\n        abdiff += 1\n        acdiff += 1\n    else:\n        abdiff -= ch == 'B'\n        acdiff -= ch == 'C'\n    sims[abdiff, acdiff] += 1\nres = 0\nfor v in sims.values():\n    res += v * (v - 1) // 2\nprint(res)", "def list_int_input():\n    return [int(val) for val in input().split()]\nst = input()\nfreq = [0, 0, 0]\nmp = {}\nmp[0, 0] = 1\nans = 0\nfor ix in range(len(st)):\n    cur_ix = 0 if st[ix] == 'A' else 1 if st[ix] == 'B' else 2\n    freq[cur_ix] += 1\n    pair = (freq[0] - freq[1], freq[1] - freq[2])\n    count = mp.get(pair, 0)\n    ans += count\n    mp[pair] = mp.get(pair, 0) + 1\nprint(ans)", "def list_int_input():\n    return [int(val) for val in input().split()]\nst = input()\nfreq = [0, 0, 0]\nmp = {}\nmp[0, 0] = 1\nans = 0\nfor ix in range(len(st)):\n    cur_ix = 0 if st[ix] == 'A' else 1 if st[ix] == 'B' else 2\n    freq[cur_ix] += 1\n    pair = (freq[0] - freq[1], freq[1] - freq[2])\n    count = mp.get(pair, 0)\n    ans += count\n    mp[pair] = mp.get(pair, 0) + 1\nprint(ans)", "from collections import defaultdict\ns = '#' + input().strip()\nabdiff = 0\nacdiff = 0\nsims = defaultdict(int)\nfor ch in s:\n    if ch == 'A':\n        abdiff += 1\n        acdiff += 1\n    else:\n        abdiff -= ch == 'B'\n        acdiff -= ch == 'C'\n    sims[abdiff, acdiff] += 1\nres = 0\nfor v in sims.values():\n    res += v * (v - 1) // 2\nprint(res)", "s = list(input())\nl = len(s)\na = [0] * (l + 1)\nb = [0] * (l + 1)\nc = [0] * (l + 1)\nd = {}\ncounta = 0\ncountb = 0\ncountc = 0\nfor i in range(l):\n    if s[i] == 'A':\n        counta += 1\n    elif s[i] == 'B':\n        countb += 1\n    else:\n        countc += 1\n    a[i + 1] = counta\n    b[i + 1] = countb\n    c[i + 1] = countc\nans = 0\nfor i in range(l + 1):\n    d[a[i] - b[i], a[i] - c[i]] = d.get((a[i] - b[i], a[i] - c[i]), 0) + 1\n    ans += d[a[i] - b[i], a[i] - c[i]] - 1\nprint(ans)", "def dostuff(s):\n    d = {'0,0': 1}\n    ans = 0\n    ta = 0\n    tb = 0\n    tc = 0\n    for i in range(len(s)):\n        t = s[i]\n        if t == 'A':\n            ta += 1\n        if t == 'B':\n            tb += 1\n        if t == 'C':\n            tc += 1\n        k = str(ta - tb) + ',' + str(ta - tc)\n        if k in d:\n            ans += d[k]\n            d[k] += 1\n        else:\n            d[k] = 1\n    print(ans)\ns = input()\ndostuff(s)", "s = input()\nkfreq = {(0, 0): 1}\nai = bi = ci = 0\nfor ch in s:\n    if ch == 'A':\n        ai += 1\n    elif ch == 'B':\n        bi += 1\n    elif ch == 'C':\n        ci += 1\n    ki = (ai - bi, ai - ci)\n    if ki in kfreq:\n        kfreq[ki] += 1\n    else:\n        kfreq[ki] = 1\nways = 0\nfor freq in kfreq.values():\n    kfc2 = freq * (freq - 1) // 2\n    ways += kfc2\nprint(ways)", "s = input()\nkfreq = {(0, 0): 1}\nai = bi = ci = 0\nfor ch in s:\n    if ch == 'A':\n        ai += 1\n    elif ch == 'B':\n        bi += 1\n    elif ch == 'C':\n        ci += 1\n    ki = (ai - bi, ai - ci)\n    if ki in kfreq:\n        kfreq[ki] += 1\n    else:\n        kfreq[ki] = 1\nways = 0\nfor freq in kfreq.values():\n    kfc2 = freq * (freq - 1) // 2\n    ways += kfc2\nprint(ways)", "from sys import stdin\nfrom collections import defaultdict\ns = stdin.readline()\nd = {}\nd[0, 0] = 1\ncnt = {}\ncnt['A'] = cnt['B'] = cnt['C'] = 0\nres = 0\nfor c in s[:-1]:\n    cnt[c] += 1\n    dif = (cnt['B'] - cnt['A'], cnt['C'] - cnt['A'])\n    if dif in d:\n        res += d[dif]\n        d[dif] += 1\n    else:\n        d[dif] = 1\nprint(res)"]