["for _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort(reverse=True)\n    ans = A[-1] - A[0]\n    val = 1\n    for i in range(len(A) - 2, -1, -1):\n        ans += A[i] * (val + 1) % 1000000007\n        ans -= A[-i - 1] * (val + 1) % 1000000007\n        val = (2 * val + 1) % 1000000007\n    print(ans % 1000000007)", "for _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort(reverse=True)\n    ans = A[-1] - A[0]\n    val = 1\n    for i in range(len(A) - 2, -1, -1):\n        ans += A[i] * (val + 1) % 1000000007\n        ans -= A[-i - 1] * (val + 1) % 1000000007\n        val = (2 * val + 1) % 1000000007\n    print(ans % 1000000007)", "for _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort(reverse=True)\n    ans = A[-1] - A[0]\n    val = 1\n    for i in range(len(A) - 2, -1, -1):\n        ans += A[i] * (val + 1) % 1000000007\n        ans -= A[-i - 1] * (val + 1) % 1000000007\n        val = (2 * val + 1) % 1000000007\n    print(ans % 1000000007)", "def li():\n    return list(map(int, input().split()))\n    return a\n\ndef ii():\n    return int(input())\nfor tastcas in range(int(input())):\n    n = ii()\n    nn = n - 1\n    a = li()\n    a.sort()\n    mins = maxs = 0\n    inf = 1000000007\n    for i in range(n):\n        mins = (2 * mins + a[i]) % inf\n        maxs = (2 * maxs + a[nn - i]) % inf\n    print((maxs - mins) % inf)", "from math import gcd, sqrt\nt = int(input())\nmod = 10 ** 9 + 7\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    m1 = 0\n    m2 = 0\n    for j in range(n):\n        m2 += a[j] * pow(2, n - j - 1, mod)\n        m2 %= mod\n    for k in range(n - 1, -1, -1):\n        m1 += a[k] * pow(2, k, mod)\n        m1 %= mod\n    ans = (m1 - m2) % mod\n    print(ans)", "p = 1000000000 + 7\npower = [1] * (100000 + 1)\nfor i in range(1, 100000 + 1):\n    power[i] = power[i - 1] % p * 2 % p\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    array = list(map(int, input().split()))\n    array.sort()\n    max_sum = 0\n    min_sum = 0\n    for i in range(n):\n        max_sum += array[i] % p * power[i] % p % p\n        min_sum += array[i] % p * power[n - 1 - i] % p % p\n    print((max_sum + p - min_sum) % p)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    p = 0\n    q = 0\n    mod = 1000000007\n    n = int(input())\n    lst = input().split(' ')\n    data = [int(i) for i in lst]\n    data.sort()\n    for i in range(n):\n        p = 2 * p + data[i] % mod\n        q = 2 * q + data[n - i - 1] % mod\n    result = (q - p) % mod\n    print(result)", "t = int(input())\nfor _ in range(t):\n    p = 0\n    q = 0\n    mod = 1000000007\n    n = int(input())\n    lst = input().split(' ')\n    data = [int(i) for i in lst]\n    data.sort()\n    for i in range(n):\n        p = 2 * p + data[i] % mod\n        q = 2 * q + data[n - i - 1] % mod\n    result = (q - p + mod) % mod\n    print(result)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    hash = {}\n    p = 0\n    q = 0\n    m = 10 ** 9 + 7\n    l.sort()\n    for j in range(n):\n        p += pow(2, n - (j + 1), m) * (l[j] % m) % m\n        q += pow(2, j, m) * (l[j] % m) % m\n    print((q % m - p % m) % m)", "e = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    ans = 0\n    x = (pow(2, n - 1, e) - 1) % e\n    x = x * -1\n    c = 1\n    d = pow(2, n - 2, e)\n    m = pow(2, e - 2, e)\n    for i in l:\n        ans = (ans + x * i) % e\n        x = (x + d + c) % e\n        c = c * 2 % e\n        d = d * m % e\n    print(ans)", "t = int(input())\nmod = 10 ** 9 + 7\nfor i in range(t):\n    n = int(input())\n    n1 = [int(x) for x in input().split()]\n    n1.sort()\n    (mi, ma) = (0, 0)\n    for i in range(n):\n        mi = (2 * mi + n1[i]) % mod\n        ma = (2 * ma + n1[n - i - 1]) % mod\n        di = ma - mi\n    print((mod + di) % mod)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    hash = {}\n    p = 0\n    q = 0\n    m = 10 ** 9 + 7\n    l.sort()\n    for j in range(n):\n        p += pow(2, n - (j + 1), m) * (l[j] % m) % m\n        q += pow(2, j, m) * (l[j] % m) % m\n    print((q % m - p % m) % m)", "m = 10 ** 9 + 7\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    minn = 2 * a[0]\n    for i in range(1, n - 1):\n        minn += a[i]\n        minn *= 2\n        minn %= m\n    minn += a[n - 1]\n    minn %= m\n    a.reverse()\n    maxx = 2 * a[0]\n    for i in range(1, n - 1):\n        maxx += a[i]\n        maxx *= 2\n        maxx %= m\n    maxx += a[n - 1]\n    maxx %= m\n    ans = maxx - minn\n    if ans >= 0:\n        ans = ans % m\n    else:\n        while ans < 0:\n            ans += m\n        ans = ans % m\n    print(ans)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    (mini, maxi) = (0, 0)\n    for i in range(n):\n        mini = (2 * mini + arr[i]) % mod\n        maxi = (2 * maxi + arr[n - i - 1]) % mod\n    print((mod + maxi - mini) % mod)", "(base, mod) = ([1], 1000000007)\nfor i in range(100005):\n    base.append(base[-1] * 2 % mod)\nfor kase in range(int(input())):\n    (_, res, v) = (input(), 0, sorted([int(i) for i in input().split()]))\n    for i in range(len(v)):\n        res = (res + v[i] * (base[i] - base[len(v) - i - 1])) % mod\n    print((res + mod) % mod)", "(base, mod) = ([1], 1000000007)\nfor i in range(100005):\n    base.append(base[-1] * 2 % mod)\nfor kase in range(int(input())):\n    (_, res, v) = (input(), 0, sorted([int(i) for i in input().split()]))\n    for i in range(len(v)):\n        res = (res + v[i] * (base[i] - base[len(v) - i - 1])) % mod\n    print((res + mod) % mod)", "mbase = 1000000007\nt = int(input())\nfor it in range(t):\n    n = int(input())\n    a = sorted([int(word) for word in input().split()])\n    mysum = 0\n    pwr2 = 1\n    for i in range(n):\n        mysum += (a[i] - a[n - 1 - i]) * pwr2\n        mysum %= mbase\n        pwr2 = pwr2 * 2 % mbase\n    print(mysum)", "def calc():\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    mod = 1000000007\n    x = 0\n    y = 0\n    for i in range(n):\n        x = (2 * x + a[i]) % mod\n        y = (2 * y + a[n - i - 1]) % mod\n    print((y + mod - x) % mod)\nt = int(input())\nfor i in range(t):\n    calc()", "T = int(input())\nm = 10 ** 9 + 7\nb = [1]\nfor t in range(T):\n    N = int(input())\n    l = input().split()\n    for i in range(N):\n        l.append(int(l[i]))\n    l = l[N:]\n    l.sort()\n    i = len(b)\n    while i <= N:\n        b.append(b[i - 1] * 2 % m)\n        i += 1\n    sum = 0\n    for i in range(N):\n        sum += (b[i] - b[N - i - 1]) * l[i]\n        if sum > 0:\n            sum = sum % m\n    print(sum % m)", "t = int(input())\npow = [0] * 100002\nmod = 1000000007\npow[0] = 1\npow[1] = 2\nfor j in range(2, 100002, 1):\n    pow[j] = pow[j - 1] * 2 % mod\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for j in range(n):\n        ans += a[j] * (pow[j] - pow[n - j - 1])\n        if ans > 0:\n            ans %= mod\n    print(ans % mod)", "t = int(input())\nm = 1000000007\nwhile t:\n    t -= 1\n    total = 0\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    y = a[n - 1] - a[0]\n    i = 1\n    j = n - 2\n    k = 1\n    b = 0\n    while b < n - 1:\n        total = total + k * y\n        y -= a[i] - a[j]\n        i += 1\n        j -= 1\n        k *= 2\n        b += 1\n        if k > m:\n            k = k % m\n    print(total % m)", "from math import *\nt = int(input())\nh = [1]\ni = 0\ny = 10 ** 9 + 7\nwhile i <= 100000:\n    h += [h[i] * 2 % y]\n    i += 1\nfor z in range(t):\n    n = int(input())\n    a = input().split()\n    s = []\n    for x in a:\n        s += [int(x)]\n    s.sort()\n    v = 0\n    for i in range(n):\n        v += (-h[n - 1 - i] + h[i]) * s[i]\n        v = v % y\n    print(v)", "from fractions import gcd\nt = int(input())\nb = [0] * 100000\nb[0] = 1\nfor i in range(1, 100000):\n    b[i] = b[i - 1] * 2 % 1000000007\nwhile t > 0:\n    n = int(input())\n    a = []\n    a = [int(x) for x in input().split()]\n    r = 0\n    a.sort()\n    n = len(a)\n    for i in range(n // 2):\n        r = r + (a[i] - a[n - i - 1]) * (b[i] - b[n - i - 1])\n    print(r % 1000000007)\n    t = t - 1", "t = int(input())\nm = 1000000007\npo = [1]\nht = 10 ** 5\nnum = 1\nfor g in range(1, ht):\n    po.append(po[g - 1] * 2 % m)\nfor j in range(t):\n    n = int(input())\n    k = input()\n    a = list(k.split())\n    for y in range(n):\n        a[y] = int(a[y])\n    a = sorted(a)\n    sum = 0\n    l = n - 1\n    k = 0\n    for i in range(n):\n        t1 = po[l]\n        t2 = po[k]\n        sum = (sum + a[i] * t2) % m\n        sum = (sum - a[i] * t1) % m\n        l = l - 1\n        k = k + 1\n    print(sum % m)", "MOD = 1000000007\npower = []\npower.append(1)\nfor i in range(1, 100001):\n    power.append(power[i - 1] * 2 % MOD)\nt = input()\nt = int(t)\nwhile t > 0:\n    n = input()\n    n = int(n)\n    lis = []\n    k = input()\n    lis = list(k.split())\n    for i in range(n):\n        lis[i] = int(lis[i])\n    SUM = 0\n    lis = sorted(lis)\n    for i in range(n):\n        p = power[i]\n        q = power[n - i - 1]\n        o = (p - q) % MOD\n        k = lis[i] % MOD * o % MOD\n        SUM = (SUM % MOD + k) % MOD\n    print(SUM)\n    t = t - 1", "import math\np = int(math.pow(10, 9) + 7)\nt = int(input())\ntwos = [1]\nfor i in range(t):\n    n = int(input())\n    if len(twos) < n:\n        for i in range(len(twos), n):\n            twos.append(int(twos[-1] * 2 % p))\n    x = [int(i) for i in input().split()]\n    x.sort()\n    res = 0\n    for i in range(n):\n        res += x[i] * (twos[i] - twos[n - 1 - i])\n        res = res % p\n    if res < 0:\n        res += p\n    print(res)", "import sys\n\ndef foo(ns):\n    su = 0\n    for n in ns:\n        su = (su * 2 + n) % 1000000007\n    return su\nfor _ in range(int(sys.stdin.readline())):\n    N = int(sys.stdin.readline())\n    ns = tuple((int(i) for i in sys.stdin.readline().split()))\n    assert N == len(ns)\n    ns = sorted(ns)\n    print((1000000007 - foo(ns) + foo(reversed(ns))) % 1000000007)", "import sys\nT = int(sys.stdin.readline())\nmod = 10 ** 9 + 7\nwhile T:\n    N = int(sys.stdin.readline())\n    A = list(map(int, sys.stdin.readline().split(' ')))\n    A.sort(reverse=True)\n    ans = 0\n    for (idx, num) in enumerate(A, 1):\n        ans = (ans + num * (pow(2, N - idx, mod) - 1) - num * (pow(2, idx - 1, mod) - 1)) % mod\n    print(ans)\n    T = T - 1", "import sys\nt = int(sys.stdin.readline())\nwhile t > 0:\n    t -= 1\n    n = int(sys.stdin.readline())\n    a = [int(x) for x in sys.stdin.readline().split()]\n    a.sort()\n    s = 0\n    m = 1\n    for i in range(n):\n        s = (s + (a[i] - a[n - i - 1]) * m % 1000000007) % 1000000007\n        m = (m << 1) % 1000000007\n    print(s)", "M = 1000000007\nN = 100001\np = [0] * N\np[0] = 1\nfor i in range(1, N):\n    p[i] = p[i - 1] * 2\n    p[i] %= M\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    s = 0\n    for i in range(n):\n        s += a[i] * (p[n - i - 1] - p[i])\n        s %= M\n    print(s)", "b1 = [None] * 100005\nb1[0] = 1\nfor i in range(1, 100005):\n    b1[i] = 2 * b1[i - 1] % 1000000007\nt = int(input())\nwhile t > 0:\n    t -= 1\n    b = int(input())\n    c = input()\n    d = [int(n) for n in c.split()]\n    d.sort()\n    sum = 0\n    e = len(d)\n    for i in range(1, e):\n        sum = sum + (b1[e - i] - 1) * (d[e - i] - d[i - 1])\n        sum %= 1000000007\n    print(sum)", "def heapsort(a):\n    length1 = len(a) - 1\n    leastParent = int(length1 / 2)\n    for i in range(leastParent, -1, -1):\n        moveDown(a, i, length1)\n    for i in range(length1, 0, -1):\n        if a[0] > a[i]:\n            swap(a, 0, i)\n            moveDown(a, 0, i - 1)\n\ndef moveDown(aList, first, last):\n    largest1 = 2 * first + 1\n    while largest1 <= last:\n        if largest1 < last and aList[largest1] < aList[largest1 + 1]:\n            largest1 += 1\n        if aList[largest1] > aList[first]:\n            swap(aList, largest1, first)\n            first = largest1\n            largest1 = 2 * first + 1\n        else:\n            return\n\ndef swap(A, x, y):\n    tmp = A[x]\n    A[x] = A[y]\n    A[y] = tmp\nb1 = [None] * 100005\nb1[0] = 1\nfor i in range(1, 100005):\n    b1[i] = 2 * b1[i - 1] % 1000000007\nt = int(input())\nwhile t > 0:\n    t -= 1\n    b = int(input())\n    c = input()\n    d = [int(n) for n in c.split()]\n    d.sort()\n    sum = 0\n    e = len(d)\n    for i in range(1, e):\n        sum = sum + (b1[e - i] - 1) * (d[e - i] - d[i - 1])\n        sum %= 1000000007\n    print(sum)", "__author__ = 'huash'\nimport sys\nimport os\nimport random\nimport datetime\nimport math\nSOLVE2 = False\nMOD = 1000000007\nPOWER2 = [0] * 100000\nPOWER2[0] = 1\nfor i in range(1, 100000):\n    v = POWER2[i - 1] << 1\n    POWER2[i] = v % MOD\n\ndef solve1(N, S):\n    if len(S) <= 1:\n        return 0\n    S = sorted(S)\n    res = 0\n    for l in range(N):\n        for r in range(l + 1, N):\n            tmp = S[r] - S[l]\n            tmp *= pow(2, r - l - 1)\n            res = (res + tmp % MOD) % MOD\n    return res\n\ndef solve2(N, S):\n    if len(S) <= 1:\n        return 0\n    S = sorted(S)\n    res = 0\n    res = S[0] * ((pow(2, N - 1) - 1) % MOD)\n    res %= MOD\n    res = -res\n    res += S[N - 1] * ((pow(2, N - 1) - 1) % MOD)\n    for i in range(1, N - 1):\n        v = S[i]\n        tmp = 0\n        if N - i - 1 < i:\n            tmp = S[i] * (pow(2, N - i - 1) % MOD) * ((pow(2, 2 * i - N + 1) - 1) % MOD)\n            tmp %= MOD\n        elif N - i - 1 > i:\n            tmp = S[i] * (pow(2, i) % MOD) * ((pow(2, N - 2 * i - 1) - 1) % MOD)\n            tmp = 0 - tmp\n        res = (res + tmp) % MOD\n    return res\n\ndef solve3(N, S):\n    if len(S) <= 1:\n        return 0\n    startTime = datetime.datetime.now()\n    smin = min(S)\n    smax = max(S)\n    bucketSize = int(math.ceil((smax - smin) / (len(set(S)) - 1)))\n    buckets = [[] for i in range((smax - smin) // bucketSize + 1)]\n    for v in S:\n        buckets[(v - smin) // bucketSize].append(v)\n    for bucket in buckets:\n        bucket.sort()\n    partitionTime = datetime.datetime.now() - startTime\n    sys.stderr.write('Partition Time:{}\\n'.format(partitionTime))\n    startTime = datetime.datetime.now()\n    res = 0\n    res = smin * ((pow(2, N - 1) - 1) % MOD)\n    res %= MOD\n    res = -res\n    res += smax * ((pow(2, N - 1) - 1) % MOD)\n    i = -1\n    for bucket in buckets:\n        for (bi, bv) in enumerate(bucket):\n            i += 1\n            if i <= 0 or i >= N - 1:\n                continue\n            tmp = 0\n            if N - i - 1 < i:\n                tmp = bv * POWER2[N - i - 1] * (POWER2[2 * i - N + 1] - 1)\n                tmp %= MOD\n            elif N - i - 1 > i:\n                tmp = bv * POWER2[i] * (POWER2[N - 2 * i - 1] - 1)\n                tmp = 0 - tmp\n            res = (res + tmp) % MOD\n    calTime = datetime.datetime.now() - startTime\n    sys.stderr.write('Calculationg Time:{}, %{}\\n'.format(calTime, 100 * calTime / (calTime + partitionTime)))\n    return res\n\ndef caseGenerator(caseCount, caseSize, maxV, name):\n    f = open('input/{}.txt'.format(name), mode='w')\n    f.write(str(caseCount))\n    f.write('\\n')\n    for i in range(caseCount):\n        N = random.randint(caseSize // 2 + 1, caseSize)\n        f.write(str(N))\n        f.write('\\n')\n        sys.stderr.write('Case {}, N={}\\n'.format(i + 1, N))\n        count = -1\n        for j in range(N):\n            f.write(str(random.randint(0, maxV)))\n            f.write(' ')\n            if j - count >= 100:\n                count = j\n                sys.stderr.write('Generated {}...\\n'.format(j + 1))\n        f.write('\\n')\n    sys.stderr.write('Case generate finished')\nT = int(input())\nfor ti in range(1, T + 1):\n    N = int(input())\n    readStart = datetime.datetime.now()\n    S = map(int, input().split())\n    sys.stderr.write('Read Cost: {}\\n'.format(datetime.datetime.now() - readStart))\n    if SOLVE2:\n        print(solve2(N, S))\n    else:\n        res = solve3(N, list(S))\n        print(res)\n        sys.stderr.write('Time Cose:{}, answer: {}\\n'.format(datetime.datetime.now() - readStart, res))", "Z = 1000000007\n\ndef e(a, b, c):\n    x = 1\n    while b > 0:\n        if b & 1 == 1:\n            x = x * a % c\n        a = a * a % c\n        b >>= 1\n    return x % c\nt = int(input())\nwhile t:\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    x = [a[n - 1 - i] - a[i] for i in range(n // 2)]\n    m = len(x)\n    s = 0\n    i = 0\n    while i < m:\n        s = (s + x[i] * ((e(2, n - i - 1, Z) - e(2, i, Z) + Z) % Z) % Z) % Z\n        i += 1\n    print(s)\n    t -= 1", "mod = 1000000000 + 7\n\ndef modpow(a, n, mod):\n    a %= mod\n    ans = 1\n    while n > 0:\n        if n % 2 == 1:\n            ans = ans * a % mod\n        a = a * a % mod\n        n = n >> 1\n    return ans\nt = int(input())\nfor test_case in range(t):\n    n = int(input())\n    nums = sorted([int(x) for x in input().split()])\n    ans = 0\n    for i in range(n):\n        ans += modpow(2, n - i - 1, mod) * ((nums[n - i - 1] - nums[i]) % mod) % mod\n        ans = ans % mod\n    print(ans)", "def solve(l, m):\n    n = len(l)\n    s = 0\n    for i in range(n):\n        t = (pow(2, n - i - 1, m) - 1) % m\n        if t > 0:\n            s += l[n - 1 - i] * t\n            s -= l[i] * t\n        else:\n            break\n    print(s % m)\nfor t in range(int(input())):\n    n = int(input())\n    data = sorted([int(x) for x in input().split()])\n    solve(data, 10 ** 9 + 7)", "p = int(1000000000.0 + 7)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    l.sort()\n    ans = 0\n    for i in range(n):\n        ans += l[i] * (pow(2, i, p) - pow(2, n - i - 1, p))\n        ans %= p\n    print(ans)"]