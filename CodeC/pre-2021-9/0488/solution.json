["for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    ans = []\n    lvl2 = []\n    for i in range(n):\n        if lis[i] >= m:\n            ans.append(i + 1)\n        else:\n            lvl2.append((lis[i], i + 1))\n    if len(ans) >= x:\n        print(len(ans), *ans)\n    else:\n        lvl2.sort(reverse=True)\n        l = [lvl2[i][1] for i in range(x - len(ans))]\n        ans += l\n        ans.sort()\n        print(x, *ans)", "(p, o) = (0, 1)\nk = int(input())\nfor z in range(k):\n    (n, n1, n2) = map(int, input().split())\n    A = list(map(int, input().split()))\n    s = []\n    for i in range(n):\n        if A[i] >= n1:\n            s.append(i + 1)\n    if len(s) < n2:\n        flag = [[A[i], i + 1] for i in range(n) if A[i] < n1]\n        flag.sort(key=lambda n2: (n2[0], n2[1]))\n        flag = flag[::-1]\n        i = 0\n        while len(s) < n2:\n            s.append(flag[i][1])\n            i += 1\n    s.sort()\n    print(len(s), *s)", "test = int(input())\nfor z in range(test):\n    (n, m, x) = map(int, input().split())\n    A = list(map(int, input().split()))\n    ans = []\n    for i in range(n):\n        if A[i] >= m:\n            ans.append(i + 1)\n    if len(ans) < x:\n        temp = [[A[i], i + 1] for i in range(n) if A[i] < m]\n        temp.sort(key=lambda x: (x[0], x[1]))\n        temp = temp[::-1]\n        i = 0\n        while len(ans) < x:\n            ans.append(temp[i][1])\n            i += 1\n    ans.sort()\n    print(len(ans), *ans)", "t = int(input())\nfor i in range(t):\n    (n, m, x) = map(int, input().split())\n    list1 = list(map(int, input().split()))\n    list2 = []\n    list3 = []\n    quali_pl = 0\n    for j in range(n):\n        if list1[j] >= m:\n            list2.append(j + 1)\n        else:\n            list3.append([list1[j], j + 1])\n    quali_pl = len(list2)\n    if quali_pl < x:\n        list3.sort(reverse=True)\n        for j in range(x - quali_pl):\n            list2.append(list3[j][1])\n    quali_pl = len(list2)\n    list2.sort()\n    print(quali_pl, end=' ')\n    for item in list2:\n        print(item, end=' ')\n    print()", "a = int(input())\nfor i in range(a):\n    (b, c, d) = map(int, input().split())\n    e = list(map(int, input().split()))\n    f = 0\n    h = []\n    z = 0\n    for i in range(len(e)):\n        if e[i] >= c:\n            f = f + 1\n            h.append(i + 1)\n    if f < d:\n        for i in range(d - f):\n            k = 0\n            hh = 0\n            for j in range(b):\n                if e[j] < c and e[j] > k:\n                    k = e[j]\n                    hh = j\n            e[hh] = -668888\n            h.append(hh + 1)\n    if f > d:\n        z = f\n    else:\n        z = d\n    print(z, end=' ')\n    h.sort()\n    print(*h)", "for i in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    q = []\n    f = []\n    for i in range(n):\n        if a[i] >= m:\n            q.append(i + 1)\n        else:\n            f.append([a[i], i + 1])\n    if len(q) < x:\n        f.sort(reverse=True)\n        x -= len(q)\n        for i in range(x):\n            q.append(f[i][1])\n    q.sort()\n    print(len(q), *q)", "t = int(input())\nwhile t > 0:\n    (n, m, x) = map(int, input().split())\n    list1 = list(map(int, input().split()))\n    list4 = []\n    list5 = []\n    list6 = []\n    for i in range(0, len(list1)):\n        if list1[i] >= m:\n            list4.append(i + 1)\n        elif list1[i] < m:\n            list5.append(list1[i])\n    if len(list4) < x:\n        k = len(list4)\n        while k < x:\n            if len(list5) > 0:\n                maxx = max(list5)\n                ind = 0\n                for i in range(0, len(list1)):\n                    if list1[i] == maxx:\n                        ind = i\n                        list1[i] = -1\n                        break\n                list4.append(ind + 1)\n                list5.remove(maxx)\n            k = k + 1\n    print(len(list4), end=' ')\n    list4.sort()\n    for i in list4:\n        print(i, end=' ')\n    print()\n    t = t - 1", "for _ in range(int(input())):\n    (n, m, x) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    for i in range(1, n + 1):\n        l[i - 1] = [l[i - 1], i]\n    l.sort(reverse=True)\n    ans = []\n    for i in range(x):\n        if x > len(ans):\n            ans.append(l[i][1])\n    while x < len(l) and l[x][0] >= m:\n        ans.append(l[x][1])\n        x += 1\n    ans.sort()\n    print(len(ans), *ans)", "import sys\nfor i in range(int(input())):\n    (n, m, xx) = map(int, input().split())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    selected = []\n    x = 0\n    a = list(enumerate(a))\n    a.sort(key=lambda x: x[1], reverse=True)\n    r = []\n    x = 0\n    while x < n and a[x][1] >= m:\n        r += [a[x]]\n        x += 1\n    if len(r) < xx:\n        while len(r) < xx:\n            r += [a[x]]\n            x += 1\n    r.sort(key=lambda x: x[0])\n    print(len(r), *[el[0] + 1 for el in r])", "for i in range(int(input())):\n    (n, m, xx) = map(int, input().split())\n    a = list(map(int, input().split()))\n    selected = []\n    x = 0\n    a = list(enumerate(a))\n    a.sort(key=lambda x: x[1], reverse=True)\n    r = []\n    x = 0\n    while x < n and a[x][1] >= m:\n        r += [a[x]]\n        x += 1\n    if len(r) < xx:\n        while len(r) < xx:\n            r += [a[x]]\n            x += 1\n    r.sort(key=lambda x: x[0])\n    print(len(r), *[el[0] + 1 for el in r])", "t = int(input())\nfor tstcases in range(t):\n    (n, m, x) = map(int, input().split())\n    l1 = []\n    l2 = []\n    count = 0\n    A = list(map(int, input().split()))\n    for i in range(len(A)):\n        if A[i] >= m:\n            l1.append(i + 1)\n            count += 1\n        else:\n            l2.append(A[i])\n    l2.sort(reverse=True)\n    if len(l1) == x:\n        print(count, *l1)\n    else:\n        for j in range(x - len(l1)):\n            count += 1\n            l1.append(A.index(l2[j]) + 1)\n        l1.sort()\n        print(count, *l1)", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    res = {k: v + 1 for (v, k) in enumerate(arr)}\n    arr.sort(reverse=True)\n    ans = []\n    for i in arr:\n        if i >= m:\n            ans.append(res.get(i))\n            x -= 1\n        elif x > 0:\n            ans.append(res.get(i))\n            x -= 1\n        else:\n            break\n    ans.sort()\n    print(len(ans), *ans)", "T = int(input())\nfor x in range(T):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = a.copy()\n    l.sort(reverse=True)\n    ans = []\n    nans = []\n    for i in range(n):\n        if l[i] >= m:\n            ans.append(a.index(l[i]) + 1)\n        else:\n            nans.append(a.index(l[i]) + 1)\n    if len(ans) != x:\n        for i in range(x - len(ans)):\n            ans.append(nans[i])\n    ans.sort()\n    print(len(ans), *ans, end=' ')\n    print()", "T = int(input())\nfor x in range(T):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = a.copy()\n    l.sort(reverse=True)\n    ans = []\n    nans = []\n    for i in range(n):\n        if l[i] >= m:\n            ans.append(a.index(l[i]) + 1)\n        else:\n            nans.append(a.index(l[i]) + 1)\n    if len(ans) != x:\n        for i in range(x - len(ans)):\n            ans.append(nans[i])\n    ans.sort()\n    print(len(ans), *ans, end=' ')\n    print()", "for i in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    nl = l.copy()\n    nl.sort(reverse=True)\n    ans = []\n    nans = []\n    for i in range(n):\n        if nl[i] >= m:\n            ans.append(l.index(nl[i]) + 1)\n        else:\n            nans.append(l.index(nl[i]) + 1)\n    if len(ans) != x:\n        for i in range(x - len(ans)):\n            ans.append(nans[i])\n    ans.sort()\n    print(len(ans), *ans, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    res = {k: v + 1 for (v, k) in enumerate(arr)}\n    arr.sort(reverse=True)\n    ans = []\n    for i in arr:\n        if i >= m:\n            ans.append(res.get(i))\n            x -= 1\n        elif x > 0:\n            ans.append(res.get(i))\n            x -= 1\n        else:\n            break\n    ans.sort()\n    print(len(ans), *ans)", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    res = {k: v + 1 for (v, k) in enumerate(arr)}\n    arr.sort(reverse=True)\n    ans = []\n    for i in arr:\n        if i >= m:\n            ans.append(res.get(i))\n            x -= 1\n        elif x > 0:\n            ans.append(res.get(i))\n            x -= 1\n        else:\n            break\n    ans.sort()\n    print(len(ans), *ans)", "for i in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = []\n    c = []\n    for j in range(n):\n        if a[j] >= m:\n            b.append(j + 1)\n        else:\n            c.append([a[j], j + 1])\n    if len(b) < x:\n        c.sort(reverse=True)\n        x -= len(b)\n        for z in range(x):\n            b.append(c[z][1])\n    b.sort()\n    print(len(b), *b)", "for i in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    q = []\n    f = []\n    for i in range(n):\n        if a[i] >= m:\n            q.append(i + 1)\n        else:\n            f.append([a[i], i + 1])\n    if len(q) < x:\n        f.sort(reverse=True)\n        x -= len(q)\n        for i in range(x):\n            q.append(f[i][1])\n    q.sort()\n    print(len(q), *q)", "for i in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    q = []\n    f = []\n    for i in range(n):\n        if a[i] >= m:\n            q.append(i + 1)\n        else:\n            f.append([a[i], i + 1])\n    if len(q) < x:\n        f.sort(reverse=True)\n        x -= len(q)\n        for i in range(x):\n            q.append(f[i][1])\n    q.sort()\n    print(len(q), *q)", "tests = int(input())\nfor i in range(tests):\n    (n, m, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dict1 = {}\n    players = 0\n    for j in range(n):\n        dict1[arr[j]] = j\n    ans = []\n    sorted_arr = sorted(list(dict1.keys()), reverse=True)\n    for j in sorted_arr:\n        if players < x or j >= m:\n            players += 1\n            ans.append(dict1[j] + 1)\n    ans.sort()\n    print(players, *ans)", "tests = int(input())\nfor i in range(tests):\n    (n, m, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    unique_dict = {}\n    players = 0\n    for j in range(n):\n        unique_dict[arr[j]] = j\n    ans = []\n    sorted_arr = sorted(list(unique_dict.keys()), reverse=True)\n    for j in sorted_arr:\n        if players < x or j >= m:\n            players += 1\n            ans.append(unique_dict[j] + 1)\n    ans.sort()\n    print(players, *ans)", "for _ in range(int(input())):\n    (N, M, X) = map(int, input().split())\n    A = list(map(int, input().split()))\n    d = {}\n    for i in range(N):\n        d[A[i]] = i + 1\n    totalPlayers = 0\n    A.sort()\n    A.reverse()\n    l = []\n    for i in range(N):\n        if A[i] >= M:\n            l.append(d[A[i]])\n            totalPlayers += 1\n    if len(l) < X:\n        for i in range(len(l), N):\n            if totalPlayers == X:\n                break\n            l.append(d[A[i]])\n            totalPlayers += 1\n    l.sort()\n    print(len(l), end=' ')\n    for x in l:\n        print(x, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, m, x) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    an = a.copy()\n    an.sort(reverse=True)\n    p = []\n    q = []\n    for i in range(n):\n        if an[i] >= m:\n            p.append(a.index(an[i]) + 1)\n        else:\n            q.append(a.index(an[i]) + 1)\n    if len(p) != x:\n        for i in range(x - len(p)):\n            p.append(q[i])\n    p.sort()\n    print(len(p), *p)", "def soln(n, m, x, arr):\n    inds = {arr[i]: i + 1 for i in range(n)}\n    arr.sort()\n    res = []\n    while arr and arr[-1] >= m:\n        res.append(inds[arr.pop()])\n    while arr and len(res) < x:\n        res.append(inds[arr.pop()])\n    return [len(res)] + sorted(res)\nfor _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(*soln(n, m, x, arr))", "for _ in range(int(input())):\n    (n, m, x) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    an = a.copy()\n    an.sort(reverse=True)\n    p = []\n    q = []\n    for i in range(n):\n        if an[i] >= m:\n            p.append(a.index(an[i]) + 1)\n        else:\n            q.append(a.index(an[i]) + 1)\n    if len(p) != x:\n        for i in range(x - len(p)):\n            p.append(q[i])\n    p.sort()\n    print(len(p), *p)", "for i in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    nl = l.copy()\n    nl.sort(reverse=True)\n    ans = []\n    nans = []\n    for i in range(n):\n        if nl[i] >= m:\n            ans.append(l.index(nl[i]) + 1)\n        else:\n            nans.append(l.index(nl[i]) + 1)\n    if len(ans) != x:\n        for i in range(x - len(ans)):\n            ans.append(nans[i])\n    ans.sort()\n    print(len(ans), *ans, end=' ')\n    print()", "for i in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    nl = l.copy()\n    nl.sort(reverse=True)\n    ans = []\n    nans = []\n    for i in range(n):\n        if nl[i] >= m:\n            ans.append(l.index(nl[i]) + 1)\n        else:\n            nans.append(l.index(nl[i]) + 1)\n    if len(ans) != x:\n        for i in range(x - len(ans)):\n            ans.append(nans[i])\n    ans.sort()\n    print(len(ans), *ans, end=' ')\n    print()", "for i in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    nl = l.copy()\n    nl.sort(reverse=True)\n    ans = []\n    nans = []\n    for i in range(n):\n        if nl[i] >= m:\n            ans.append(l.index(nl[i]) + 1)\n        else:\n            nans.append(nl[i])\n    if len(ans) != x:\n        for i in range(x - len(ans)):\n            ans.append(l.index(nans[i]) + 1)\n    ans.sort()\n    print(len(ans), *ans, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, mark, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = {}\n    for i in range(n):\n        b[a[i]] = i + 1\n    a.sort()\n    c = []\n    for i in range(n):\n        if a[-1] < mark:\n            c = a[n - x:]\n            break\n        if a[i] >= mark:\n            if n - i < x:\n                c = a[n - x:]\n            else:\n                c = a[i:]\n            break\n    for i in range(len(c)):\n        c[i] = b[c[i]]\n    c.sort()\n    print(len(c), *c)", "from sys import stdin\nip = stdin.readline\nfrom operator import itemgetter\nfor _ in range(int(ip())):\n    (n, m, x) = map(int, ip().split())\n    li = list(map(int, ip().split()))\n    ad = [(i + 1, li[i]) for i in range(n)]\n    ad = sorted(ad, key=itemgetter(1))\n    ad = ad[::-1]\n    ans = []\n    for i in ad:\n        if i[1] >= m:\n            ans.append(i[0])\n        elif len(ans) < x:\n            ans.append(i[0])\n    ans.sort()\n    print(len(ans), *ans, sep=' ')", "class Node:\n\n    def __init__(self, value, id):\n        self.value = value\n        self.id = id\n        self.left = None\n        self.right = None\n\nclass BinarySeachTree:\n\n    def __init__(self):\n        self.root = None\n\n    def insert(self, value, id):\n        new_node = Node(value, id)\n        if not self.root:\n            self.root = new_node\n        else:\n            current_node = self.root\n            while True:\n                if value < current_node.value:\n                    if current_node.left:\n                        current_node = current_node.left\n                    else:\n                        current_node.left = new_node\n                        break\n                elif current_node.right:\n                    current_node = current_node.right\n                else:\n                    current_node.right = new_node\n                    break\n\n    def remove(self, value):\n        if not self.root:\n            return 'No nodes exist in tree.'\n        current_node = self.root\n        parent_node = None\n        while current_node:\n            if value < current_node.value:\n                parent_node = current_node\n                current_node = current_node.left\n            elif value > current_node.value:\n                parent_node = current_node\n                current_node = current_node.right\n            elif value == current_node.value:\n                if not current_node.right:\n                    if not parent_node:\n                        self.root = current_node.left\n                    elif current_node.value < parent_node.value:\n                        parent_node.left = current_node.left\n                    elif current_node.value > parent_node.value:\n                        parent_node.right = current_node.left\n                elif current_node.right and (not current_node.right.left):\n                    if not parent_node:\n                        current_node.right.left = self.root.left\n                        self.root = current_node.right\n                    elif current_node.value < parent_node.value:\n                        current_node.right.left = current_node.left\n                        parent_node.left = current_node.right\n                    elif current_node.value > parent_node.value:\n                        current_node.right.left = current_node.left\n                        parent_node.right = current_node.right\n                elif current_node.right and current_node.right.left:\n                    replace = current_node.right.left\n                    replace_parent = current_node.right\n                    while replace.left:\n                        replace_parent = replace\n                        replace = replace.left\n                    replace_parent.left = replace.right\n                    replace.left = current_node.left\n                    replace.right = current_node.right\n                    if not parent_node:\n                        self.root = replace\n                    elif replace.value < parent_node.value:\n                        parent_node.left = replace\n                    elif replace.value > parent_node.value:\n                        parent_node.right = replace\n                return 'Removed ' + str(value)\n        return 'Node ' + str(value) + ' Not Found'\n\n    def extract_max(self):\n        current = self.root\n        while current.right:\n            current = current.right\n        self.remove(current.value)\n        return current\n\n    def print(self, current=None):\n        if not current:\n            current = self.root\n        if current.left:\n            self.print(current=current.left)\n        print(current.value, current.id, end=' ')\n        if current.right:\n            self.print(current=current.right)\nfor _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    d = list(map(int, input().split()))\n    k = 0\n    a = []\n    bst = BinarySeachTree()\n    for i in range(len(d)):\n        bst.insert(d[i], i)\n    while k < len(d):\n        max = bst.extract_max()\n        if max.value >= m or len(a) < x:\n            a.append(max.id + 1)\n            k += 1\n        else:\n            break\n    a.sort()\n    print(k, end=' ')\n    for j in a:\n        print(j, end=' ')\n    print()", "class Node:\n\n    def __init__(self, value, id):\n        self.value = value\n        self.id = id\n        self.left = None\n        self.right = None\n\nclass BinarySeachTree:\n\n    def __init__(self):\n        self.root = None\n\n    def insert(self, value, id):\n        new_node = Node(value, id)\n        if not self.root:\n            self.root = new_node\n        else:\n            current_node = self.root\n            while True:\n                if value < current_node.value:\n                    if current_node.left:\n                        current_node = current_node.left\n                    else:\n                        current_node.left = new_node\n                        break\n                elif current_node.right:\n                    current_node = current_node.right\n                else:\n                    current_node.right = new_node\n                    break\n\n    def remove(self, value):\n        if not self.root:\n            return 'No nodes exist in tree.'\n        current_node = self.root\n        parent_node = None\n        while current_node:\n            if value < current_node.value:\n                parent_node = current_node\n                current_node = current_node.left\n            elif value > current_node.value:\n                parent_node = current_node\n                current_node = current_node.right\n            elif value == current_node.value:\n                if not current_node.right:\n                    if not parent_node:\n                        self.root = current_node.left\n                    elif current_node.value < parent_node.value:\n                        parent_node.left = current_node.left\n                    elif current_node.value > parent_node.value:\n                        parent_node.right = current_node.left\n                elif current_node.right and (not current_node.right.left):\n                    if not parent_node:\n                        current_node.right.left = self.root.left\n                        self.root = current_node.right\n                    elif current_node.value < parent_node.value:\n                        current_node.right.left = current_node.left\n                        parent_node.left = current_node.right\n                    elif current_node.value > parent_node.value:\n                        current_node.right.left = current_node.left\n                        parent_node.right = current_node.right\n                elif current_node.right and current_node.right.left:\n                    replace = current_node.right.left\n                    replace_parent = current_node.right\n                    while replace.left:\n                        replace_parent = replace\n                        replace = replace.left\n                    replace_parent.left = replace.right\n                    replace.left = current_node.left\n                    replace.right = current_node.right\n                    if not parent_node:\n                        self.root = replace\n                    elif replace.value < parent_node.value:\n                        parent_node.left = replace\n                    elif replace.value > parent_node.value:\n                        parent_node.right = replace\n                return 'Removed ' + str(value)\n        return 'Node ' + str(value) + ' Not Found'\n\n    def extract_max(self):\n        current = self.root\n        while current.right:\n            current = current.right\n        self.remove(current.value)\n        return current\n\n    def print(self, current=None):\n        if not current:\n            current = self.root\n        if current.left:\n            self.print(current=current.left)\n        print(current.value, current.id, end=' ')\n        if current.right:\n            self.print(current=current.right)\nfor _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    d = list(map(int, input().split()))\n    k = 0\n    a = []\n    bst = BinarySeachTree()\n    for i in range(len(d)):\n        bst.insert(d[i], i)\n    while k < len(d):\n        max = bst.extract_max()\n        if max.value >= m or len(a) < x:\n            a.append(max.id + 1)\n            k += 1\n        else:\n            break\n    a.sort()\n    print(k, end=' ')\n    for j in a:\n        print(j, end=' ')\n    print()", "def player_list(N, M, X, tr):\n    pl_id = list()\n    re = list()\n    fre_id = dict()\n    mi = min(tr)\n    if mi >= M:\n        return [i + 1 for i in range(N)]\n    for i in range(N):\n        fre_id[tr[i]] = i + 1\n    tr = sorted(tr, reverse=True)\n    c = 0\n    for i in range(N):\n        if tr[i] >= M:\n            pl_id.append(fre_id[tr[i]])\n            c += 1\n        else:\n            re.append(fre_id[tr[i]])\n    if c < X:\n        for i in range(X - c):\n            pl_id.append(re[i])\n    return sorted(pl_id)\nT = int(input())\nfor _ in range(T):\n    (N, M, X) = list(map(int, input().split()))\n    tr = list(map(int, input().split()))\n    idq = player_list(N, M, X, tr)\n    print(len(idq), *idq)", "def player_list(N, M, X, tr):\n    pl_id = list()\n    re = list()\n    fre_id = dict()\n    mi = min(tr)\n    if mi >= M:\n        return [i + 1 for i in range(N)]\n    for i in range(N):\n        fre_id[tr[i]] = i + 1\n    tr = sorted(tr, reverse=True)\n    c = 0\n    for i in range(N):\n        if tr[i] >= M:\n            pl_id.append(fre_id[tr[i]])\n            c += 1\n        else:\n            re.append(fre_id[tr[i]])\n    if c < X:\n        for i in range(X - c):\n            pl_id.append(re[i])\n    return sorted(pl_id)\nT = int(input())\nfor _ in range(T):\n    (N, M, X) = list(map(int, input().split()))\n    tr = list(map(int, input().split()))\n    idq = player_list(N, M, X, tr)\n    print(len(idq), *idq)", "def player_list(N, M, X, tr):\n    pl_id = list()\n    re = list()\n    fre_id = dict()\n    mi = min(tr)\n    if mi >= M:\n        return [i + 1 for i in range(N)]\n    for i in range(N):\n        fre_id[tr[i]] = i + 1\n    tr = sorted(tr, reverse=True)\n    c = 0\n    for i in range(N):\n        if tr[i] >= M:\n            pl_id.append(fre_id[tr[i]])\n            c += 1\n        else:\n            re.append(fre_id[tr[i]])\n    if c < X:\n        for i in range(X - c):\n            pl_id.append(re[i])\n    return sorted(pl_id)\nT = int(input())\nfor _ in range(T):\n    (N, M, X) = list(map(int, input().split()))\n    tr = list(map(int, input().split()))\n    idq = player_list(N, M, X, tr)\n    print(len(idq), *idq)", "t = int(input())\nfor _ in range(t):\n    (n, m, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    f = list(filter(lambda z: z >= m, l))\n    if len(f) < x:\n        a = sorted(l)[n - x:]\n        res = str(x)\n        for i in list(filter(lambda y: y in a, l)):\n            res += ' ' + str(l.index(i) + 1)\n    else:\n        res = str(len(f))\n        for j in f:\n            res += ' ' + str(l.index(j) + 1)\n    print(res)", "testCases = int(input())\nfor testCase in range(testCases):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {k: v + 1 for (v, k) in enumerate(a)}\n    a.sort(reverse=True)\n    ans = []\n    for i in a:\n        if i >= m:\n            ans.append(d.get(i))\n            x -= 1\n        elif x > 0:\n            ans.append(d.get(i))\n            x -= 1\n        else:\n            break\n    ans.sort()\n    print(len(ans), *ans)", "testCases = int(input())\nfor testCase in range(testCases):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {k: v + 1 for (v, k) in enumerate(a)}\n    q = []\n    nq = []\n    for i in a:\n        if i >= m:\n            q.append(i)\n        else:\n            nq.append(i)\n    if len(q) < x:\n        l = len(q)\n        for i in range(x - l):\n            maxi = max(nq)\n            q.append(maxi)\n            nq.remove(maxi)\n        ans = [d.get(i) for i in q]\n        ans.sort()\n        print(len(q), *ans)\n    else:\n        ans = [d.get(i) for i in q]\n        ans.sort()\n        print(len(q), *ans)", "t = int(input())\nwhile t != 0:\n    list1 = list(map(int, input().split()))\n    list2 = list(map(int, input().split()))\n    qualified = []\n    ids = []\n    n = list1[0]\n    m = list1[1]\n    x = list1[2]\n    p = 0\n    dic = {}\n    for k in range(1, n + 1):\n        a = list2[k - 1]\n        dic[a] = k\n    dic1 = sorted(dic.keys(), reverse=True)\n    for k in dic1:\n        if k >= m or x > 0:\n            qualified.append(k)\n            p += 1\n            x -= 1\n    for k in qualified:\n        for (g, h) in dic.items():\n            if g == k:\n                ids.append(h)\n    ids.sort()\n    ids.insert(0, p)\n    for k in range(p + 1):\n        print(ids[k], end=' ')\n    print('\\n')\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, m, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    f = list(filter(lambda z: z >= m, l))\n    if len(f) < x:\n        a = sorted(l)[n - x:]\n        res = str(x)\n        for i in list(filter(lambda y: y in a, l)):\n            res += ' ' + str(l.index(i) + 1)\n    else:\n        res = str(len(f))\n        for j in f:\n            res += ' ' + str(l.index(j) + 1)\n    print(res)", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    arr = list(map(int, input().lstrip().split()))\n    li = []\n    count = 0\n    for i in range(n):\n        if arr[i] >= m:\n            li.append(i + 1)\n            arr.pop(i)\n            arr.insert(i, 0)\n            count += 1\n    if count < x:\n        q = max(arr)\n        i = 0\n        while count != x:\n            if i == n:\n                i = 0\n            elif arr[i] == q and count < x:\n                li.append(i + 1)\n                arr.pop(i)\n                arr.insert(i, 0)\n                count += 1\n                i += 1\n                q = max(arr)\n            else:\n                i += 1\n    li.sort()\n    li.insert(0, len(li))\n    print(*li, sep=' ')", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    s = list(map(int, input().split()))\n    dic = []\n    for i in range(n):\n        if s[i] >= m:\n            dic.append(i + 1)\n    if len(dic) < x:\n        se = list(enumerate(s))\n        se.sort(key=lambda x: x[1], reverse=True)\n        rs = x - len(dic)\n        for (i, j) in se:\n            if rs != 0 and j < m:\n                dic.append(i + 1)\n                rs -= 1\n    dic.sort()\n    print(len(dic), *dic)", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    s = list(map(int, input().split()))\n    dic = []\n    for i in range(n):\n        if s[i] >= m:\n            dic.append(i + 1)\n    if len(dic) < x:\n        se = list(enumerate(s))\n        se.sort(key=lambda x: x[1], reverse=True)\n        rs = x - len(dic)\n        for (i, j) in se:\n            if rs != 0 and j < m:\n                dic.append(i + 1)\n                rs -= 1\n    dic.sort()\n    print(len(dic), *dic)", "from math import gcd, sqrt, ceil, floor, log10, log2\nfrom heapq import heapify, heappop, heappush, nsmallest, nlargest\nfrom collections import Counter, deque, OrderedDict, defaultdict\nfrom itertools import combinations, permutations, zip_longest\nfrom bisect import bisect_left, bisect_right\nfrom functools import lru_cache, reduce\nimport sys\nimport time\nimport string\nimport operator\nRECURSION_LIMIT = int(10000000.0)\nINT_MAX = float('inf')\nINT_MIN = float('-inf')\nMOD = int(1000000000.0) + 7\nNEWLINE = '\\n'\nSPACE = ' '\nsys.setrecursionlimit(RECURSION_LIMIT)\ninp = lambda fn: fn(input())\ninp_vars = lambda fn, delim, convert_to=list: convert_to(map(fn, input().split(delim)))\n\ndef inp_graph(n, adj, gtype=0):\n    pass\n\ndef solve(*args, **kwargs):\n    (n, m, x) = args[0]\n    arr = args[1]\n    mp = {p: val for (p, val) in enumerate(arr, 1) if val >= m}\n    if len(mp) >= x:\n        return [len(mp)] + sorted(mp.keys())\n    x -= len(mp)\n    rem = sorted(((p, val) for (p, val) in enumerate(arr, 1) if p not in mp), key=lambda x: x[1])\n    return [x + len(mp)] + sorted(list(mp.keys()) + [p for (p, _) in rem[-x:]])\n\ndef main(*args, **kwargs):\n    for _ in range(int(input())):\n        arg2 = inp_vars(int, SPACE)\n        arg3 = inp_vars(int, SPACE)\n        res = solve(*(arg2, arg3))\n        if type(res) in {list, tuple, set}:\n            print(*res, sep=' ')\n        else:\n            print(res)\nmain()", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = []\n    for i in a:\n        if i >= m:\n            s.append(a.index(i) + 1)\n    l = len(s)\n    if l >= x:\n        s.insert(0, l)\n        print(*s)\n    else:\n        y = []\n        for i in a:\n            y.append(i)\n        t = x - l\n        a.sort(reverse=True)\n        for i in range(t):\n            for j in a:\n                if j < m:\n                    s.append(y.index(j) + 1)\n                    m = j\n                    break\n        s.sort()\n        s.insert(0, len(s))\n        print(*s)", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    s = list(map(int, input().split()))\n    dic = []\n    for i in range(n):\n        if s[i] >= m:\n            dic.append(i + 1)\n    if len(dic) < x:\n        se = list(enumerate(s))\n        se.sort(key=lambda x: x[1], reverse=True)\n        rs = x - len(dic)\n        for (i, j) in se:\n            if rs != 0 and j < m:\n                dic.append(i + 1)\n                rs -= 1\n    dic.sort()\n    print(len(dic), *dic)", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    s = list(map(int, input().split()))\n    dic = []\n    for i in range(n):\n        if s[i] >= m:\n            dic.append(i + 1)\n    if len(dic) < x:\n        se = list(enumerate(s))\n        se.sort(key=lambda x: x[1], reverse=True)\n        rs = x - len(dic)\n        for (i, j) in se:\n            if rs != 0 and j < m:\n                dic.append(i + 1)\n                rs -= 1\n    dic.sort()\n    print(len(dic), *dic)", "t = int(input())\nfor _ in range(t):\n    (n, m, x) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    ans = []\n    for i in range(n):\n        if arr[i] >= m:\n            ans.append(i + 1)\n            arr[i] = -1\n    while len(ans) < x:\n        ind = 0\n        jnd = 0\n        while ind < n:\n            if arr[ind] > arr[jnd]:\n                jnd = ind\n            ind += 1\n        ans.append(jnd + 1)\n        arr[jnd] = -1\n    res = []\n    res.append(len(ans))\n    ans.sort()\n    for i in ans:\n        res.append(i)\n    print(*res)", "import collections as clts\nimport math\nimport heapq\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\ndef lcm(x, y):\n    return int(x / gcd(x, y) * y)\n\ndef take_input(type='int'):\n    if type == 'int':\n        return int(input())\n    elif type == 'str':\n        return input()\n    elif type == 'list-int':\n        return list(map(int, input().split()))\n    elif type == 'list-float':\n        return list(map(float, input().split()))\n    else:\n        return None\nfor _ in range(int(input())):\n    (N, M, X) = take_input('list-int')\n    A = take_input('list-int')\n    quals = []\n    idMap = clts.defaultdict(clts.deque)\n    for i in range(N):\n        if A[i] >= M:\n            quals.append(i + 1)\n            A[i] = 0\n        idMap[A[i]].append(i + 1)\n    if len(quals) < X:\n        j = len(quals)\n        A = sorted(A, reverse=True)\n        i = 0\n        while j < X:\n            quals.append(idMap[A[i]].popleft())\n            i += 1\n            j += 1\n    quals = sorted(quals)\n    quals = list(map(str, quals))\n    print(len(quals), ' '.join(quals))", "for _ in range(int(input())):\n    (n, m, x) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    d = {a[i]: i + 1 for i in range(n)}\n    c = 0\n    s = set()\n    ds = sorted(d)\n    while ds:\n        if ds[-1] >= m:\n            ele = ds.pop()\n            s.add(d[ele])\n            c += 1\n        else:\n            break\n    if c < x:\n        while c - x:\n            ele = ds.pop()\n            s.add(d[ele])\n            c += 1\n    print(len(s), *sorted(s))", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    f = list(filter(lambda z: z >= m, l))\n    if len(f) < x:\n        a = sorted(l)[n - x:]\n        res = str(x)\n        for i in list(filter(lambda y: y in a, l)):\n            res += ' ' + str(l.index(i) + 1)\n    else:\n        res = str(len(f))\n        for j in f:\n            res += ' ' + str(l.index(j) + 1)\n    print(res)", "t = int(input())\nfor _ in range(t):\n    (n, m, x) = map(int, input().split())\n    b = list(map(int, input().split()))\n    a = sorted(b)\n    a.reverse()\n    i = x\n    while i < n and a[i] >= m:\n        i += 1\n    c = a[i - 1]\n    print(i, end=' ')\n    for j in range(n):\n        if b[j] >= c:\n            print(j + 1, end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    (n, m, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    f = list(filter(lambda z: z >= m, l))\n    if len(f) < x:\n        a = sorted(l)[n - x:]\n        res = str(x)\n        for i in list(filter(lambda y: y in a, l)):\n            res += ' ' + str(l.index(i) + 1)\n    else:\n        res = str(len(f))\n        for j in f:\n            res += ' ' + str(l.index(j) + 1)\n    print(res)", "def merge(listt, num):\n    for i in range(len(listt)):\n        if listt[i] > num:\n            new_list = listt[:i] + [num] + listt[i:]\n            break\n    else:\n        new_list = listt + [num]\n    return new_list\nt = int(input())\nfor i in range(t):\n    x = input()\n    x = x.split()\n    a = input()\n    a = a.split()\n    n = int(x[0])\n    m = int(x[1])\n    X = int(x[2])\n    listt = []\n    listt2 = []\n    for j in range(n):\n        if int(a[j]) >= m:\n            listt.append(int(a[j]))\n        else:\n            listt2.append(int(a[j]))\n    if len(listt) < X:\n        for i in range(len(listt), X):\n            listt = merge(listt, max(listt2))\n            listt2.remove(max(listt2))\n    print(len(listt), end=' ')\n    listt2 = []\n    for u in listt:\n        listt2 = merge(listt2, int(a.index(str(u))))\n    for u in listt2:\n        print(u + 1, end=' ')\n    print()", "def merge(listt, num):\n    for i in range(len(listt)):\n        if listt[i] > num:\n            new_list = listt[:i] + [num] + listt[i:]\n            break\n    else:\n        new_list = listt + [num]\n    return new_list\nt = int(input())\nfor i in range(t):\n    x = input()\n    x = x.split()\n    a = input()\n    a = a.split()\n    n = int(x[0])\n    m = int(x[1])\n    X = int(x[2])\n    listt = []\n    listt2 = []\n    for j in range(n):\n        if int(a[j]) >= m:\n            listt.append(int(a[j]))\n        else:\n            listt2.append(int(a[j]))\n    if len(listt) < X:\n        for i in range(len(listt), X):\n            listt = merge(listt, max(listt2))\n            listt2.remove(max(listt2))\n    print(len(listt), end=' ')\n    listt2 = []\n    for u in listt:\n        listt2 = merge(listt2, int(a.index(str(u))))\n    for u in listt2:\n        print(u + 1, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = {}\n    p = []\n    for i in range(n):\n        d[l[i]] = i + 1\n    l.sort(reverse=True)\n    for i in range(n):\n        if l[i] >= m:\n            p.append(d[l[i]])\n            x -= 1\n        elif x > 0:\n            p.append(d[l[i]])\n            x -= 1\n        else:\n            break\n    p.sort()\n    print(len(p), *p)", "t = int(input())\nfor i in range(t):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    gg = []\n    for i in range(len(a)):\n        gg.append([a[i], i + 1])\n    gg.sort(key=lambda x: x[0])\n    gg = gg[::-1]\n    ans = []\n    c = 0\n    for i in range(len(gg)):\n        c += 1\n        if gg[i][0] >= m:\n            ans.append(gg[i][1])\n        elif c <= x:\n            ans.append(gg[i][1])\n        elif c == x:\n            break\n    ans.sort()\n    ans.insert(0, len(ans))\n    for i in range(len(ans)):\n        if i == len(ans) - 1:\n            print(ans[i])\n        else:\n            print(ans[i], end=' ')", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = []\n    for i in range(n):\n        if a[i] >= m:\n            res.append([a[i], i + 1])\n    if len(res) < x:\n        res.extend(sorted(zip(a, range(1, n + 1)), reverse=True)[len(res):x])\n    ans = str(len(res)) + ' '\n    res = list(zip(*res))[1]\n    ans += ' '.join(list(map(str, sorted(list(res)))))\n    print(ans)", "from heapq import heappop, heappush, heapify\nt = int(input())\nfor _ in range(t):\n    (n, m, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    res = []\n    heap = []\n    for (i, j) in enumerate(arr):\n        heap.append((-1 * j, i + 1))\n    heapify(heap)\n    while len(heap):\n        (a, b) = heappop(heap)\n        if a * -1 >= m or len(res) < x:\n            res.append(b)\n    res.sort()\n    print(len(res), *res)", "from heapq import heappop, heappush, heapify\nt = int(input())\nfor _ in range(t):\n    (n, m, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    res = []\n    heap = []\n    for (i, j) in enumerate(arr):\n        heap.append((-1 * j, i + 1))\n    heapify(heap)\n    while len(heap):\n        (a, b) = heappop(heap)\n        if a * -1 >= m or len(res) < x:\n            res.append(b)\n    res.sort()\n    print(len(res), *res)", "from heapq import heappop, heappush, heapify\nt = int(input())\nfor _ in range(t):\n    (n, m, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    res = []\n    heap = []\n    for (i, j) in enumerate(arr):\n        heap.append((-1 * j, i + 1))\n    heapify(heap)\n    while len(heap):\n        (a, b) = heappop(heap)\n        if a * -1 >= m or len(res) < x:\n            res.append(b)\n    res.sort()\n    print(len(res), *res)", "from heapq import heappop, heappush, heapify\nt = int(input())\nfor _ in range(t):\n    (n, m, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    res = []\n    heap = []\n    for (i, j) in enumerate(arr):\n        heap.append((-1 * j, i + 1))\n    heapify(heap)\n    while len(heap):\n        (a, b) = heappop(heap)\n        if a * -1 >= m or len(res) < x:\n            res.append(b)\n    res.sort()\n    print(len(res), *res)", "def solve_case():\n    (n, m, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    with_ids = [(x, i + 1) for (i, x) in enumerate(a)]\n    answer = []\n    for (v, i) in sorted(with_ids, reverse=True):\n        if len(answer) < k or v >= m:\n            answer.append(i)\n    print(len(answer), *sorted(answer))\ncases = int(input())\nfor _ in range(cases):\n    solve_case()", "q = int(input())\nwhile q > 0:\n    q -= 1\n    (x, y, z) = list(map(int, input().split()))\n    result2 = list(map(int, input().split()))\n    result = []\n    l = list(result2)\n    result3 = []\n    count = 0\n    l.sort(reverse=True)\n    for i in l:\n        if i >= y:\n            count += 1\n            result.append(i)\n        else:\n            break\n    while count < z:\n        result.append(l[count])\n        count += 1\n    for i in result:\n        result3.append(result2.index(i) + 1)\n    result3.sort()\n    print(count, end=' ')\n    for i in result3:\n        print(i, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = []\n    for i in range(n):\n        if a[i] >= m:\n            res.append([a[i], i + 1])\n    if len(res) < x:\n        res.extend(sorted(zip(a, range(1, n + 1)), reverse=True)[len(res):x])\n    ans = str(len(res)) + ' '\n    res = list(zip(*res))[1]\n    ans += ' '.join(list(map(str, sorted(list(res)))))\n    print(ans)", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    players = [(x, i + 1) for (i, x) in enumerate(a)]\n    ans = []\n    for (v, i) in sorted(players, reverse=True):\n        if len(ans) < x or v >= m:\n            ans.append(i)\n    print(len(ans), *sorted(ans))", "import sys\nt = int(input())\nwhile t:\n    (n, m, x) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    a.insert(0, -1)\n    final = []\n    i = 0\n    for i in range(len(a)):\n        if a[i] >= m:\n            final.append(i)\n    result = len(final)\n    if result < x:\n        mapping = {}\n        check = set(final[:])\n        for k in range(1, len(a)):\n            if k in check:\n                continue\n            else:\n                mapping[k] = a[k]\n        mapping = {k: v for (k, v) in sorted(mapping.items(), key=lambda item: item[1])}\n        b = list(mapping.keys()).copy()\n        final.extend(b[result - x:])\n    final.sort()\n    final.insert(0, len(final))\n    for item in final:\n        print(item, end=' ')\n    print()\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, m, x) = list(map(int, input().split()))\n    ar = list(map(int, input().split()))\n    arr = [0 for i in range(n)]\n    res = 0\n    d = {}\n    for i in range(n):\n        if ar[i] >= m:\n            res += 1\n            arr[i] = ar[i]\n        else:\n            d[ar[i]] = i\n    if res < x:\n        for i in sorted(d, reverse=True):\n            arr[d[i]] = ar[d[i]]\n            res += 1\n            if res == x:\n                break\n    print(res, end=' ')\n    for i in range(n):\n        if arr[i] > 0:\n            print(i + 1, end=' ')\n    print()", "T = int(input())\nfor i in range(T):\n    (N, M, X) = map(int, input().split())\n    A = list(map(int, input().split()))\n    l = sorted(A, reverse=True)\n    ans = []\n    x = 0\n    for j in l:\n        if j >= M:\n            ans.append(A.index(j) + 1)\n            X = X - 1\n        elif X > 0:\n            ans.append(A.index(j) + 1)\n            X -= 1\n        else:\n            break\n    ans = sorted(ans)\n    print(len(ans), end=' ')\n    for k in ans:\n        print(k, end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    (n, m, x) = map(int, input().split())\n    arr = [int(item) for item in input().split()]\n    count = 0\n    for j in range(n - 1, -1, -1):\n        if arr[j] >= m:\n            count += 1\n            arr[j] = -1\n    while x > count:\n        pmax = 0\n        ind = 0\n        for i in range(n):\n            if arr[i] > pmax:\n                ind = i\n                pmax = arr[i]\n        arr[ind] = -1\n        count += 1\n    print(count, end=' ')\n    j = 0\n    for i in range(n):\n        if arr[i] == -1:\n            j += 1\n            if count > j:\n                print(i + 1, end=' ')\n            else:\n                print(i + 1)", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    players = [(x, i + 1) for (i, x) in enumerate(a)]\n    ans = []\n    for (v, i) in sorted(players, reverse=True):\n        if len(ans) < x or v >= m:\n            ans.append(i)\n    print(len(ans), *sorted(ans))", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    players = [(x, i + 1) for (i, x) in enumerate(a)]\n    ans = []\n    for (v, i) in sorted(players, reverse=True):\n        if len(ans) < x or v >= m:\n            ans.append(i)\n    print(len(ans), *sorted(ans))", "t = int(input())\nfor _ in range(t):\n    (n, m, x) = list(map(int, input().split()))\n    ar = list(map(int, input().split()))\n    arr = [0 for i in range(n)]\n    res = 0\n    d = {}\n    for i in range(n):\n        if ar[i] >= m:\n            res += 1\n            arr[i] = ar[i]\n        else:\n            d[ar[i]] = i\n    if res < x:\n        for i in sorted(d, reverse=True):\n            arr[d[i]] = ar[d[i]]\n            res += 1\n            if res == x:\n                break\n    print(res, end=' ')\n    for i in range(n):\n        if arr[i] > 0:\n            print(i + 1, end=' ')\n    print()", "def solve_case():\n    (n, m, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    with_ids = [(x, i + 1) for (i, x) in enumerate(a)]\n    answer = []\n    for (v, i) in sorted(with_ids, reverse=True):\n        if len(answer) < k or v >= m:\n            answer.append(i)\n    print(len(answer), *sorted(answer))\ncases = int(input())\nfor _ in range(cases):\n    solve_case()", "for i in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    arr = sorted(a, reverse=True)\n    ans = []\n    cx = 0\n    for i in arr:\n        if i >= m:\n            ans.append(a.index(i) + 1)\n            x -= 1\n        elif x > 0:\n            ans.append(a.index(i) + 1)\n            x -= 1\n        else:\n            break\n    ans.sort()\n    print(len(ans), end=' ')\n    for i in ans:\n        print(i, end=' ')\n    print()", "for i in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = sorted(l)\n    c = 0\n    ans = []\n    elem = []\n    for i in l:\n        if i >= m:\n            c += 1\n            ans.append(l.index(i) + 1)\n            elem.append(i)\n    if len(ans) == n:\n        ans.sort()\n        print(c, ' ', ' '.join((str(i) for i in ans)))\n    elif len(ans) < n:\n        if len(ans) == 0:\n            w = []\n            u = s[::-1]\n            for i in range(x):\n                w.append(l.index(u[i]) + 1)\n            w.sort()\n            print(len(w), ' ', ' '.join((str(i) for i in w)))\n        else:\n            z = []\n            pos = []\n            for i in s:\n                if i not in elem:\n                    z.append(i)\n                if i in elem:\n                    pos.append(l.index(i) + 1)\n            sorted_z = sorted(z)[::-1]\n            if len(ans) == x:\n                y = sorted(pos)\n                print(len(y), ' ', ' '.join((str(i) for i in y)))\n            elif len(ans) < x:\n                s = s[::-1]\n                y = []\n                for i in range(x):\n                    y.append(l.index(s[i]) + 1)\n                y.sort()\n                print(len(y), ' ', ' '.join((str(i) for i in y)))\n            elif len(ans) > x:\n                w = []\n                for i in range(len(elem)):\n                    w.append(l.index(elem[i]) + 1)\n                w.sort()\n                print(len(w), ' ', ' '.join((str(i) for i in w)))", "from collections import Counter\nimport operator\nfor _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = []\n    ans = []\n    for i in range(len(a)):\n        if a[i] >= m:\n            ans.append(i + 1)\n            x -= 1\n        else:\n            b.append([a[i], i + 1])\n    if x > 0:\n        b.sort()\n        j = len(b) - 1\n        while x > 0:\n            ans.append(b[j][1])\n            x -= 1\n            j -= 1\n    ans.sort()\n    print(len(ans), end=' ')\n    for i in ans:\n        print(i, end=' ')\n    print('')", "from bisect import *\nfor i in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = []\n    for i in range(len(a)):\n        b.append((-a[i], i + 1))\n    b.sort()\n    l = bisect(b, (-m, float('inf')))\n    la = max(l, x)\n    ans = []\n    for i in range(la):\n        ans.append(b[i][1])\n    ans.sort()\n    print(len(ans), *ans)", "try:\n    t = int(input())\n    for _ in range(t):\n        (p, l, k) = list(map(int, input().split()))\n        arr = list(map(int, input().split()))\n        iarr = [[arr[i], i + 1] for i in range(p)]\n        iarr.sort(reverse=True)\n        ans = []\n        for i in iarr:\n            if i[0] >= l:\n                ans.append(i[1])\n        d = len(ans)\n        if d < k:\n            ans.extend([iarr[i][1] for i in range(d, k)])\n        ans.sort()\n        ans.insert(0, len(ans))\n        print(' '.join((str(i) for i in ans)))\nexcept:\n    pass", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    li = list(map(int, input().split()))\n    dict = {}\n    for i in range(n):\n        if li[i] in dict:\n            continue\n        else:\n            dict[li[i]] = i + 1\n    li.sort()\n    final = li[n - x:]\n    for i in range(n - x):\n        if li[n - x - 1 - i] >= m:\n            final.insert(0, li[n - x - 1 - i])\n        else:\n            break\n    temp = []\n    print(len(final), end=' ')\n    for j in final:\n        temp.append(dict[j])\n        dict[j] += 1\n    temp.sort()\n    print(*temp)", "t = int(input())\nfor i in range(t):\n    (n, m, x) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = []\n    ans = []\n    for i in range(len(a)):\n        if a[i] >= m:\n            ans.append(i + 1)\n            x -= 1\n        else:\n            b.append([a[i], i + 1])\n    if x > 0:\n        b.sort()\n        j = len(b) - 1\n        while x > 0:\n            ans.append(b[j][1])\n            x -= 1\n            j -= 1\n    ans.sort()\n    print(len(ans), end=' ')\n    for i in ans:\n        print(i, end=' ')\n    print('')", "for i in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {a[i]: i for i in range(n)}\n    a.sort(reverse=True)\n    c = 0\n    i = 0\n    ans = []\n    while c < x or (i < n and a[i] >= m):\n        ans.append(d[a[i]] + 1)\n        i += 1\n        c += 1\n    ans.sort()\n    print(c, *ans)", "for tc in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {a[i]: i for i in range(n)}\n    a.sort(reverse=True)\n    c = 0\n    i = 0\n    l = []\n    while c < x or (i < n and a[i] >= m):\n        l.append(d[a[i]])\n        i += 1\n        c += 1\n    print(c, end=' ')\n    l.sort()\n    for i in l:\n        print(i + 1, end=' ')\n    print('\\n')", "for tc in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {a[i]: i for i in range(n)}\n    a.sort(reverse=True)\n    c = 0\n    i = 0\n    l = []\n    while c < x or (i < n and a[i] >= m):\n        l.append(d[a[i]])\n        i += 1\n        c += 1\n    print(c, end=' ')\n    l.sort()\n    for i in l:\n        print(i + 1, end=' ')\n    print('\\n')", "for tc in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {a[i]: i for i in range(n)}\n    a.sort(reverse=True)\n    c = 0\n    i = 0\n    l = []\n    while c < x or (i < n and a[i] >= m):\n        l.append(d[a[i]])\n        i += 1\n        c += 1\n    print(c, end=' ')\n    l.sort()\n    for i in l:\n        print(i + 1, end=' ')\n    print('\\n')", "for tc in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {a[i]: i for i in range(n)}\n    a.sort(reverse=True)\n    c = 0\n    i = 0\n    l = []\n    while c < x or (i < n and a[i] >= m):\n        l.append(d[a[i]])\n        i += 1\n        c += 1\n    print(c, end=' ')\n    l.sort()\n    for i in l:\n        print(i + 1, end=' ')\n    print('\\n')", "for tc in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {a[i]: i for i in range(n)}\n    a.sort(reverse=True)\n    c = 0\n    i = 0\n    l = []\n    while c < x or (i < n and a[i] >= m):\n        l.append(d[a[i]])\n        i += 1\n        c += 1\n    print(c, end=' ')\n    l.sort()\n    for i in l:\n        print(i + 1, end=' ')\n    print('\\n')", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {a[i]: i for i in range(n)}\n    a.sort(reverse=True)\n    c = 0\n    ans = []\n    i = 0\n    while c < x or (i < n and a[i] >= m):\n        ans.append(d[a[i]] + 1)\n        c += 1\n        i += 1\n    ans.sort()\n    print(c, end=' ')\n    for i in ans:\n        print(i, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    A = list(map(int, input().split()))[:n]\n    b = []\n    for i in range(n):\n        if A[i] >= m:\n            b.append(i + 1)\n            A[i] = 0\n    while len(b) < x:\n        b.append(A.index(max(A)) + 1)\n        A[A.index(max(A))] = 0\n    b.sort()\n    p = []\n    p.append(len(b))\n    for j in range(len(b)):\n        p.append(b[j])\n    for x in p:\n        print(x, end=' ')\n    print(end='\\n')", "for _ in range(int(input())):\n    (n, m, x) = map(int, input().split())\n    A = list(map(int, input().split()))[:n]\n    b = []\n    for i in range(n):\n        if A[i] >= m:\n            b.append(i + 1)\n            A[i] = 0\n    while len(b) < x:\n        b.append(A.index(max(A)) + 1)\n        A[A.index(max(A))] = 0\n    b.sort()\n    p = []\n    p.append(len(b))\n    for j in range(len(b)):\n        p.append(b[j])\n    for x in p:\n        print(x, end=' ')\n    print(end='\\n')", "t = int(input())\nfor _ in range(t):\n    (n, m, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ids = []\n    non = []\n    for i in range(n):\n        if a[i] >= m:\n            ids.append(i + 1)\n        else:\n            non.append(a[i])\n    rem = x - len(ids)\n    non.sort(reverse=True)\n    for i in range(rem):\n        ids.append(a.index(non[i]) + 1)\n    ids.sort(reverse=True)\n    ids.append(len(ids))\n    ids.reverse()\n    print(*ids, sep=' ')", "test_cases = int(input())\nfor i in range(test_cases):\n    (N, M, X) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dictt = {}\n    for j in range(1, N + 1):\n        dictt[arr[j - 1]] = j\n    arr.sort(reverse=True)\n    new_arr = []\n    k = arr[X - 1]\n    r = min(k, M)\n    for a in range(N):\n        if arr[a] >= r:\n            new_arr.append(dictt.get(arr[a]))\n    new_arr.sort()\n    print(len(new_arr), end=' ')\n    for ele in new_arr:\n        print(ele, end=' ')\n    print('\\n')", "t = int(input())\nfor _ in range(t):\n    (n, m, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = []\n    us = []\n    for i in range(len(l)):\n        if l[i] >= m:\n            s.append(i + 1)\n        else:\n            us.append(l[i])\n    while len(s) < x:\n        maxVal = max(us)\n        p = l.index(maxVal)\n        s.append(p + 1)\n        q = us.index(maxVal)\n        us.pop(q)\n    s.sort()\n    print(len(s), end=' ')\n    for i in s:\n        print(i, end=' ')\n    print()"]