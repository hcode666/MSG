["def check(k, n, x1, d, g):\n    if k == n:\n        x1 += [d[n]]\n        return\n    for i in range(1, n + 1):\n        if g[k][i] != 0 and d[i] == -1:\n            d[i] = d[k] + g[k][i]\n            check(i, n, x1, d, g)\n            d[i] = -1\ntestCases = int(input())\nwhile testCases > 0:\n    testCases = testCases - 1\n    dimension = list(map(int, input().strip().split(' ')))\n    v = dimension[0]\n    e = dimension[1]\n    graph = [[0 for i in range(11)] for j in range(11)]\n    for i in range(e):\n        (a, b, c) = map(int, input().split())\n        graph[a][b] = c\n        graph[b][a] = c\n    x1 = []\n    d = [-1] * (v + 1)\n    d[1] = 0\n    check(1, v, x1, d, graph)\n    x1.sort()\n    r = x1[0]\n    s = 0\n    for i in range(len(x1)):\n        if r == x1[i]:\n            s += 1\n    print(s)", "def check(k, n, x1, d, g):\n    if k == n:\n        x1 += [d[n]]\n        return\n    for i in range(1, n + 1):\n        if g[k][i] != 0 and d[i] == -1:\n            d[i] = d[k] + g[k][i]\n            check(i, n, x1, d, g)\n            d[i] = -1\ntestCases = int(input())\nwhile testCases > 0:\n    testCases = testCases - 1\n    dimension = list(map(int, input().strip().split(' ')))\n    v = dimension[0]\n    e = dimension[1]\n    graph = [[0 for i in range(11)] for j in range(11)]\n    for i in range(e):\n        (a, b, c) = map(int, input().split())\n        graph[a][b] = c\n        graph[b][a] = c\n    x1 = []\n    d = [-1] * (v + 1)\n    d[1] = 0\n    check(1, v, x1, d, graph)\n    x1.sort()\n    r = x1[0]\n    s = 0\n    for i in range(len(x1)):\n        if r == x1[i]:\n            s += 1\n    print(s)", "def differ(k, n, x, dist, graph):\n    if k == n:\n        x += [dist[n]]\n        return\n    for i in range(1, n + 1):\n        if graph[k][i] != 0 and dist[i] == -1:\n            dist[i] = dist[k] + graph[k][i]\n            differ(i, n, x, dist, graph)\n            dist[i] = -1\nt = int(input())\nfor _ in range(t):\n    graph = [[0 for i in range(11)] for j in range(11)]\n    (v, e) = map(int, input().split())\n    for i in range(e):\n        (x, y, w) = map(int, input().split())\n        graph[x][y] = w\n        graph[y][x] = w\n    x = []\n    dist = [-1] * (v + 1)\n    dist[1] = 0\n    differ(1, v, x, dist, graph)\n    x.sort()\n    val = x[0]\n    ans = 0\n    for i in range(len(x)):\n        if val == x[i]:\n            ans += 1\n    print(ans)", "def differ(k, n, x, dist, graph):\n    if k == n:\n        x += [dist[n]]\n        return\n    for i in range(1, n + 1):\n        if graph[k][i] != 0 and dist[i] == -1:\n            dist[i] = dist[k] + graph[k][i]\n            differ(i, n, x, dist, graph)\n            dist[i] = -1\nt = int(input())\nfor _ in range(t):\n    graph = [[0 for i in range(11)] for j in range(11)]\n    (v, e) = map(int, input().split())\n    for i in range(e):\n        (x, y, w) = map(int, input().split())\n        graph[x][y] = w\n        graph[y][x] = w\n    x = []\n    dist = [-1] * (v + 1)\n    dist[1] = 0\n    differ(1, v, x, dist, graph)\n    x.sort()\n    val = x[0]\n    ans = 0\n    for i in range(len(x)):\n        if val == x[i]:\n            ans += 1\n    print(ans)", "t = int(input())\n\ndef check(start, n, path, dis, adj):\n    if start == n:\n        path += [dis[n]]\n        return\n    for i in range(1, n + 1):\n        if adj[start][i] != 0 and dis[i] == -1:\n            dis[i] = dis[start] + adj[start][i]\n            check(i, n, path, dis, adj)\n            dis[i] = -1\nfor i in range(t):\n    (v, e) = map(int, input().split())\n    adj = [[0 for i in range(11)] for j in range(11)]\n    for i in range(e):\n        (x, y, w) = map(int, input().split())\n        adj[x][y] = w\n        adj[y][x] = w\n    path = []\n    dis = [-1] * (v + 1)\n    dis[1] = 0\n    check(1, v, path, dis, adj)\n    path.sort()\n    maxi = path[0]\n    result = 0\n    for i in range(len(path)):\n        if maxi == path[i]:\n            result += 1\n    print(result)", "t = int(input())\n\ndef check(k, n, x1, d, g):\n    if k == n:\n        x1 += [d[n]]\n        return\n    for i in range(1, n + 1):\n        if g[k][i] != 0 and d[i] == -1:\n            d[i] = d[k] + g[k][i]\n            check(i, n, x1, d, g)\n            d[i] = -1\nfor i in range(t):\n    (v, e) = map(int, input().split())\n    g = [[0 for i in range(11)] for j in range(11)]\n    for i in range(e):\n        (x, y, w) = map(int, input().split())\n        g[x][y] = w\n        g[y][x] = w\n    x1 = []\n    d = [-1] * (v + 1)\n    d[1] = 0\n    check(1, v, x1, d, g)\n    x1.sort()\n    r = x1[0]\n    s = 0\n    for i in range(len(x1)):\n        if r == x1[i]:\n            s += 1\n    print(s)", "def snek(k, n, x, d, g):\n    if k == n:\n        x += [d[n]]\n        return\n    for i in range(1, n + 1):\n        if g[k][i] != 0 and d[i] == -1:\n            d[i] = d[k] + g[k][i]\n            snek(i, n, x, d, g)\n            d[i] = -1\nt = int(input())\nfor i in range(t):\n    g = [[0 for i in range(11)] for j in range(11)]\n    (v, e) = map(int, input().split())\n    for j in range(e):\n        (x, y, w) = map(int, input().split())\n        g[x][y] = w\n        g[y][x] = w\n    x = []\n    d = [-1] * (v + 1)\n    d[1] = 0\n    snek(1, v, x, d, g)\n    x.sort()\n    r = x[0]\n    ans = 0\n    for z in range(len(x)):\n        if r == x[z]:\n            ans += 1\n    print(ans)", "def snek(k, n, x, d, g):\n    if k == n:\n        x += [d[n]]\n        return\n    for i in range(1, n + 1):\n        if g[k][i] != 0 and d[i] == -1:\n            d[i] = d[k] + g[k][i]\n            snek(i, n, x, d, g)\n            d[i] = -1\nt = int(input())\nfor i in range(t):\n    g = [[0 for i in range(11)] for j in range(11)]\n    (v, e) = map(int, input().split())\n    for j in range(e):\n        (x, y, w) = map(int, input().split())\n        g[x][y] = w\n        g[y][x] = w\n    x = []\n    d = [-1] * (v + 1)\n    d[1] = 0\n    snek(1, v, x, d, g)\n    x.sort()\n    r = x[0]\n    ans = 0\n    for z in range(len(x)):\n        if r == x[z]:\n            ans += 1\n    print(ans)", "def DFS(start, n, path_w, dist, adj):\n    if start == n:\n        path_w += [dist[n]]\n        return\n    for i in range(1, n + 1):\n        if adj[start][i] != 0 and dist[i] == -1:\n            dist[i] = dist[start] + adj[start][i]\n            DFS(i, n, path_w, dist, adj)\n            dist[i] = -1\n\ndef func():\n    (n, m) = map(int, input().split(' '))\n    adj = [[0 for j in range(n + 1)] for i in range(n + 1)]\n    dist = [-1 for i in range(n + 1)]\n    path_w = []\n    for i in range(m):\n        (x, y, w) = map(int, input().split(' '))\n        adj[x][y] = w\n        adj[y][x] = w\n    dist[1] = 0\n    DFS(1, n, path_w, dist, adj)\n    path_w.sort()\n    maxm = path_w[0]\n    ans = path_w.count(maxm)\n    print(ans)\nt = int(input())\nwhile t:\n    func()\n    t -= 1", "t = int(input())\n\ndef func(k, n, x, dist, graph):\n    if k == n:\n        x += [dist[n]]\n        return\n    for i in range(1, n + 1):\n        if graph[k][i] != 0 and dist[i] == -1:\n            dist[i] = dist[k] + graph[k][i]\n            func(i, n, x, dist, graph)\n            dist[i] = -1\nwhile t:\n    graph = [[0 for i in range(11)] for j in range(11)]\n    (v, e) = map(int, input().split())\n    for i in range(e):\n        (x, y, w) = map(int, input().split())\n        graph[x][y] = w\n        graph[y][x] = w\n    x = []\n    dist = [-1] * (v + 1)\n    dist[1] = 0\n    func(1, v, x, dist, graph)\n    x.sort()\n    val = x[0]\n    ans = 0\n    for i in range(len(x)):\n        if val == x[i]:\n            ans += 1\n    print(ans)\n    t -= 1"]