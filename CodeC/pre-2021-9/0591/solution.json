["fact = [1] * 505\nmod = 10 ** 9 + 7\nfor i in range(1, 505):\n    fact[i] = fact[i - 1] * (i + 1)\nt = int(input())\nfor _ in range(0, t):\n    s = input()\n    n = len(s)\n    mp = {}\n    for ch in s:\n        if ch in mp:\n            mp[ch] += 1\n        else:\n            mp[ch] = 1\n    ans = 1\n    for p in mp:\n        ans = ans * fact[mp[p] - 1]\n    print(fact[n - 1] // ans % mod)", "import math\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    a = []\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    for let in letters:\n        a.append(s.count(let))\n    num = math.factorial(n)\n    den = 1\n    for number in a:\n        if number != 0:\n            den = den * math.factorial(number)\n    print(num // den % (10 ** 9 + 7))", "import math\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    a = []\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    for let in letters:\n        a.append(s.count(let))\n    num = math.factorial(n)\n    den = 1\n    for number in a:\n        if number != 0:\n            den = den * math.factorial(number)\n    print(num // den % (10 ** 9 + 7))", "from math import factorial\nfrom collections import Counter\nmod = 10 ** 9 + 7\nfacts = [1, 1]\nfor i in range(2, 1000):\n    facts.append(facts[-1] * i)\n\ndef soln(s):\n    counts = Counter(s)\n    cur = facts[len(s)]\n    div = 1\n    for val in counts.values():\n        div *= facts[val]\n    return cur // div % mod\nfor _ in range(int(input())):\n    s = input()\n    print(soln(s))", "mod = 10 ** 9 + 7\n\ndef perm(n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans *= i\n    return ans\nfor _ in range(int(input())):\n    strli = list(input())\n    n = len(strli)\n    res = perm(n)\n    setli = set(strli)\n    for a in setli:\n        cnt = strli.count(a)\n        temp = perm(cnt)\n        res //= temp\n    print(res % mod)", "mod = 10 ** 9 + 7\n\ndef perm(n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans *= i\n    return ans\nfor _ in range(int(input())):\n    strli = list(input())\n    n = len(strli)\n    res = perm(n)\n    setli = set(strli)\n    for a in setli:\n        cnt = strli.count(a)\n        temp = perm(cnt)\n        res //= temp\n    print(res % mod)", "from collections import Counter\nmx = 502\nf = [0] * mx\nfi = [0] * mx\nf[0] = 1\nfi[0] = 1\nm = 10 ** 9 + 7\nfor i in range(1, mx):\n    f[i] = f[i - 1] * i % m\n    fi[i] = fi[i - 1] * pow(i, m - 2, m) % m\nfor _ in range(int(input())):\n    s = input()\n    d = Counter(s).values()\n    ans = f[len(s)]\n    for x in d:\n        ans *= fi[x]\n        ans %= m\n    print(ans)", "mod = 10 ** 9 + 7\nfactorial = [1] + [0] * 500\nfor i in range(1, 501):\n    factorial[i] = i * factorial[i - 1] % mod\nfor _ in range(int(input())):\n    S = input()\n    N = len(S)\n    alphabet = [0] * 53\n    for i in range(N):\n        x = ord(S[i].lower()) - 97\n        if S[i].isupper():\n            x += 26\n        alphabet[x] += 1\n    sol = factorial[N]\n    for i in alphabet:\n        if i > 1:\n            sol = pow(factorial[i], mod - 2, mod) * (sol % mod) % mod\n    print(sol)", "import math\nmod = 10 ** 9 + 7\nfactorial = [1] + [0] * 500\n\ndef modInverse(b, m):\n    g = math.gcd(b, m)\n    return pow(b, m - 2, m)\n\ndef modDivide(a, b, m):\n    a = a % m\n    inv = modInverse(b, m)\n    return inv * a % m\n\ndef char_position(letter):\n    return ord(letter) - 97\nfor i in range(1, 501):\n    factorial[i] = i * factorial[i - 1] % mod\nfor _ in range(int(input())):\n    S = input()\n    N = len(S)\n    alphabet = [0] * 53\n    for i in range(N):\n        x = char_position(S[i].lower())\n        if S[i].isupper():\n            x += 26\n        alphabet[x] += 1\n    sol = factorial[N]\n    for i in alphabet:\n        if i > 1:\n            sol = modDivide(sol, factorial[i], mod)\n    print(sol)", "def integer_list():\n    return list(map(int, input().split()))\n\ndef string_list():\n    return list(map(str, input().split()))\n\ndef hetro_list():\n    return list(input().split())\nimport math\nfrom collections import Counter\nmaxn = 502\nfact = [0] * maxn\nifact = [0] * maxn\nfact[0] = 1\nifact[0] = 1\nmod = 10 ** 9 + 7\nfor i in range(1, maxn):\n    fact[i] = fact[i - 1] * i % mod\n    ifact[i] = ifact[i - 1] * pow(i, mod - 2, mod) % mod\n\ndef main():\n    pass\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dct = Counter(s)\n    ans = fact[len(s)]\n    for ele in dct:\n        ans *= ifact[dct[ele]]\n        ans %= mod\n    print(ans)", "def integer_list():\n    return list(map(int, input().split()))\n\ndef string_list():\n    return list(map(str, input().split()))\n\ndef hetro_list():\n    return list(input().split())\nimport math\nfrom collections import Counter\nmaxn = 502\nfact = [0] * maxn\nifact = [0] * maxn\nfact[0] = 1\nifact[0] = 1\nmod = 10 ** 9 + 7\nfor i in range(1, maxn):\n    fact[i] = fact[i - 1] * i % mod\n    ifact[i] = ifact[i - 1] * pow(i, mod - 2, mod) % mod\n\ndef main():\n    pass\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dct = Counter(s)\n    ans = fact[len(s)]\n    for ele in dct:\n        ans *= ifact[dct[ele]]\n        ans %= mod\n    print(ans)", "def fac(m):\n    ans = 1\n    for i in range(1, m + 1):\n        ans *= i\n    return ans\nT = int(input())\nfor _ in range(T):\n    L = list(input())\n    n = len(L)\n    S = set(L)\n    d = {}\n    for i in S:\n        d[i] = 0\n    for i in range(len(L)):\n        d[L[i]] += 1\n    ans = fac(n)\n    for i in d:\n        ans //= fac(d[i])\n    print(ans % (10 ** 9 + 7))", "import math\nfor i in range(int(input())):\n    s = input()\n    freq = {}\n    l = len(s)\n    denom = 1\n    ans = 0\n    mod = 10 ** 9 + 7\n    for x in s:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    for x in freq.keys():\n        denom *= math.factorial(freq[x])\n    print(math.factorial(l) // denom % mod)", "import math\nm = 7 + 10 ** 9\nfor z in range(int(input())):\n    s = input()\n    d = {}\n    n = len(s)\n    for x in s:\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n    f = 1\n    for x in d.keys():\n        f *= math.factorial(d[x])\n    print(math.factorial(n) // f % m)", "mod = 1000000007\nread_int = lambda : int(input().strip())\nread_str = lambda : input().strip()\nread_str_arr = lambda : input().strip().split()\nread_int_arr = lambda : [int(x) for x in input().strip().split()]\nfact = [1] * 501\nfor i in range(2, 501):\n    fact[i] = i * fact[i - 1] % mod\n\ndef solve():\n    s = read_str()\n    freq = {}\n    for e in s:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    ans = fact[len(s)]\n    for f in freq:\n        inv = pow(fact[freq[f]], mod - 2, mod)\n        ans = ans * inv % mod\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "mod = 1000000007\nread_int = lambda : int(input().strip())\nread_str = lambda : input().strip()\nread_str_arr = lambda : input().strip().split()\nread_int_arr = lambda : [int(x) for x in input().strip().split()]\nfact = [1] * 501\nfor i in range(2, 501):\n    fact[i] = i * fact[i - 1] % mod\n\ndef solve():\n    s = read_str()\n    freq = {}\n    for e in s:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    ans = fact[len(s)]\n    for f in freq:\n        inv = pow(fact[freq[f]], mod - 2, mod)\n        ans = ans * inv % mod\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "import math\n\ndef snek(string):\n    l = list(string)\n    u = list(set(l))\n    c = []\n    for i in range(len(u)):\n        count = l.count(u[i])\n        c.append(count)\n    return c\nt = int(input())\nfor i in range(t):\n    n = input()\n    c = snek(n)\n    ans = math.factorial(len(n))\n    d = 1\n    for j in range(len(c)):\n        d *= math.factorial(c[j])\n    ans //= d\n    print(ans % (10 ** 9 + 7))", "import math as m\nt = int(input())\nfor i in range(t):\n    s = input()\n    l = len(s)\n    p = set(s)\n    r = {j: s.count(j) for j in set(s)}\n    d = 1\n    for k in r.values():\n        d *= m.factorial(k)\n    print(m.factorial(l) // d % (10 ** 9 + 7))", "def integer_list():\n    return list(map(int, input().split()))\n\ndef string_list():\n    return list(map(str, input().split()))\n\ndef hetro_list():\n    return list(input().split())\nimport math\nfrom collections import Counter\nmaxn = 502\nfact = [0] * maxn\nifact = [0] * maxn\nfact[0] = 1\nifact[0] = 1\nmod = 10 ** 9 + 7\nfor i in range(1, maxn):\n    fact[i] = fact[i - 1] * i % mod\n    ifact[i] = ifact[i - 1] * pow(i, mod - 2, mod) % mod\n\ndef main():\n    pass\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dct = Counter(s)\n    ans = fact[len(s)]\n    for ele in dct:\n        ans *= ifact[dct[ele]]\n        ans %= mod\n    print(ans)", "def fac(m):\n    ans = 1\n    for i in range(1, m + 1):\n        ans *= i\n    return ans\nT = int(input())\nfor _ in range(T):\n    L = list(input())\n    n = len(L)\n    S = set(L)\n    d = {}\n    for i in S:\n        d[i] = 0\n    for i in range(len(L)):\n        d[L[i]] += 1\n    ans = fac(n)\n    for i in d:\n        ans //= fac(d[i])\n    print(ans % (10 ** 9 + 7))", "def fac(m):\n    ans = 1\n    for i in range(1, m + 1):\n        ans *= i\n    return ans\nT = int(input())\nfor _ in range(T):\n    L = list(input())\n    n = len(L)\n    S = set(L)\n    d = {}\n    for i in S:\n        d[i] = 0\n    for i in range(len(L)):\n        d[L[i]] += 1\n    ans = fac(n)\n    for i in d:\n        ans //= fac(d[i])\n    print(ans % (10 ** 9 + 7))", "import math\n\ndef count(s):\n    d = {}\n    k = set(s)\n    for y in k:\n        d[y] = 0\n    for y in s:\n        d[y] += 1\n    ans = math.factorial(len(s))\n    for y in d.keys():\n        ans = ans // math.factorial(d[y])\n    return int(ans) % (10 ** 9 + 7)\ntest_cases = int(input())\nwhile test_cases != 0:\n    data = input()\n    print(count(data))\n    test_cases -= 1", "from collections import Counter as Cn\nfrom math import factorial as F\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    s = input()\n    X = Cn(s)\n    R = 1\n    for i in X:\n        R *= F(X[i] % mod) % mod\n    print(F(len(s)) // R % mod)", "from collections import Counter as Cn\nfrom math import factorial as F\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    s = input()\n    X = Cn(s)\n    R = 1\n    for i in X:\n        R *= F(X[i] % mod) % mod\n    print(F(len(s)) // R % mod)", "from collections import Counter as Cn\nfrom math import factorial as F\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    s = input()\n    X = Cn(s)\n    R = 1\n    for i in X:\n        R *= F(X[i] % mod) % mod\n    print(F(len(s)) // R % mod)", "from collections import Counter as Cn\nfrom math import factorial as F\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    s = input()\n    X = Cn(s)\n    R = 1\n    for i in X:\n        R *= F(X[i] % mod) % mod\n    print(F(len(s)) // R % mod)", "import math\nmod = 1000000007\nfor i in range(int(input())):\n    s = input()\n    cnt = math.factorial(len(s))\n    d = dict()\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        cnt = cnt // math.factorial(d[i])\n    print(cnt % mod)", "from math import *\nfor _ in range(int(input())):\n    st = input()\n    d = {}\n    for x in st:\n        if x not in d:\n            d[x] = 1\n        else:\n            d[x] += 1\n    d1 = {}\n    ans = factorial(len(st))\n    for i in range(len(st)):\n        if st[i] not in d1:\n            ans //= factorial(d[st[i]])\n            d1[st[i]] = 3\n    ans %= 1000000007\n    print(ans)", "from math import *\nT = int(input())\nfor i in range(T):\n    st = input()\n    d = {}\n    for x in st:\n        if x not in d:\n            d[x] = 1\n        else:\n            d[x] += 1\n    d1 = {}\n    ans = factorial(len(st))\n    for i in range(len(st)):\n        if st[i] not in d1:\n            ans //= factorial(d[st[i]])\n            d1[st[i]] = 1\n    ans %= 1000000007\n    print(ans)", "t = int(input())\nmod = 1000000007\n\ndef fac(num):\n    if num == 1:\n        return 1\n    return num * fac(num - 1)\nfor _ in range(t):\n    s = input()\n    ans = fac(len(s))\n    d = dict()\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        ans = ans // fac(d[i])\n    print(ans % mod)", "t = int(input())\nmod = 1000000007\n\ndef fac(num):\n    if num == 1:\n        return 1\n    return num * fac(num - 1)\nfor _ in range(t):\n    s = input()\n    ans = fac(len(s))\n    d = dict()\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] != 0:\n            ans = ans // fac(d[i])\n    print(ans % mod)", "import math\nt = int(input())\nmod = 1000000007\nfor _ in range(t):\n    s = input()\n    ans = math.factorial(len(s))\n    d = dict()\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        ans = ans // math.factorial(d[i])\n    print(ans % mod)", "from math import *\nt = int(input())\nfor _ in range(t):\n    st = input()\n    d = {}\n    for x in st:\n        if x not in d:\n            d[x] = 1\n        else:\n            d[x] += 1\n    d1 = {}\n    ans = factorial(len(st))\n    for i in range(len(st)):\n        if st[i] not in d1:\n            ans //= factorial(d[st[i]])\n            d1[st[i]] = 1\n    ans %= 1000000007\n    print(ans)", "from collections import Counter\nfrom math import factorial\nfor _ in range(int(input())):\n    s = input()\n    c = Counter(s)\n    k = factorial(len(s))\n    for value in c.values():\n        if value > 1:\n            k = k // factorial(value)\n    print(k % (10 ** 9 + 7))", "from collections import Counter\nfrom math import factorial\nfor _ in range(int(input())):\n    s = input()\n    c = Counter(s)\n    k = factorial(len(s))\n    for value in c.values():\n        if value > 1:\n            k = k // factorial(value)\n    print(k % (10 ** 9 + 7))", "from collections import Counter\nimport math\ntc = int(input())\nwhile tc > 0:\n    s = input()\n    k = math.factorial(s.__len__())\n    x = Counter(s)\n    for val in x.values():\n        if val > 1:\n            k = k // math.factorial(val)\n    k = int(k)\n    k = k % (10 ** 9 + 7)\n    print(k)\n    tc -= 1", "from math import *\nfor u in range(int(input())):\n    s = input()\n    n = len(s)\n    l = factorial(n)\n    d = set(s)\n    for i in d:\n        l = l // factorial(s.count(i))\n    print(l % (10 ** 9 + 7))", "from collections import Counter\nfrom math import factorial\nfor _ in range(int(input())):\n    s = input()\n    c = Counter(s)\n    k = factorial(len(s))\n    for value in c.values():\n        if value > 1:\n            k = k // factorial(value)\n    print(k % (10 ** 9 + 7))", "MOD = 1000000007\nfact_mods = [0] * 501\n(fact_mods[0], fact_mods[1]) = (1, 1)\nfor i in range(2, 501):\n    fact_mods[i] = fact_mods[i - 1] * i % MOD\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    counts = {}\n    denom = 1\n    for ch in s:\n        counts[ch] = counts.get(ch, 0) + 1\n    for ch in counts:\n        denom = denom * fact_mods[counts[ch]] % MOD\n    print(fact_mods[n] * pow(denom, MOD - 2, MOD) % MOD)", "def fact(N):\n    c = 1\n    if N == 0:\n        return 1\n    for i in range(1, N + 1):\n        c *= i\n    return c\nfrom collections import Counter\nfor _ in range(int(input())):\n    s = list(input())\n    d = Counter(s)\n    p = 10 ** 9 + 7\n    m = 1\n    for v in d.values():\n        m *= fact(v)\n    print(fact(len(s)) // m % p)", "from collections import Counter\nimport math\nmod = pow(10, 9) + 7\nt = int(input())\nfor _ in range(t):\n    s = input()\n    p = 1\n    count = dict(Counter(s))\n    for i in count:\n        p = p * math.factorial(count[i])\n    x = math.factorial(len(s)) // p\n    x = x % mod\n    print(x)", "a = pow(10, 9) + 7\nimport math\nt = int(input())\nfor i in range(t):\n    s = input()\n    x = len(s)\n    p = 1\n    l = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    for j in l:\n        p = p * math.factorial(s.count(j))\n    x = math.factorial(x) // p\n    x = x % a\n    print(x)", "a = pow(10, 9) + 7\nimport math\nt = int(input())\nfor i in range(t):\n    s = input()\n    x = len(s)\n    p = 1\n    l = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    for j in l:\n        p = p * math.factorial(s.count(j))\n    z = math.factorial(x) // p\n    q = z % a\n    print(q)", "a = pow(10, 9) + 7\nimport math\nt = int(input())\nfor i in range(t):\n    s = input()\n    x = len(s)\n    p = 1\n    l = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    for j in l:\n        p = p * math.factorial(s.count(j))\n    z = math.factorial(x) // p\n    q = z % a\n    print(q)", "mod = 1000000007\n\ndef fact(n):\n    if n <= 1:\n        return 1\n    else:\n        i = 1\n        for p in range(2, n + 1):\n            i *= p\n        return i\nfor _ in range(int(input())):\n    S = input()\n    N = len(S)\n    dic = {}\n    for i in range(N):\n        p = S[i]\n        if p in dic.keys():\n            dic[p] += 1\n        else:\n            dic[p] = 1\n    f = fact(N)\n    for t in dic.keys():\n        f = f // fact(dic[t])\n    print(f % mod)", "import math\nt = int(input())\nfor i in range(t):\n    s = input()\n    l = list(s)\n    seti = set(l)\n    deno = 1\n    for i in seti:\n        deno *= math.factorial(l.count(i))\n    leng = len(l)\n    ans = math.factorial(leng) // deno % 1000000007\n    print(int(ans))", "import math\nt = int(input())\nfor i in range(t):\n    s = input()\n    st = set(s)\n    l = []\n    for j in st:\n        l.append(s.count(j))\n    f = math.factorial(len(s))\n    r = 1\n    for j in l:\n        r = r * math.factorial(j)\n    print(f // r % (10 ** 9 + 7))", "from math import factorial\nfrom collections import Counter\nfrom functools import reduce\nimport operator as op\nmod = 1000000007\nfor _ in range(int(input())):\n    s = input()\n    c = Counter(s)\n    num = factorial(len(s))\n    den = 1\n    for k in c:\n        den *= factorial(c[k])\n    print(num // den % mod)", "import math\nfor _ in range(int(input())):\n    s = input()\n    a = [0] * 26\n    b = [0] * 26\n    for i in range(len(s)):\n        if s[i].islower():\n            a[97 - ord(s[i])] += 1\n        else:\n            b[65 - ord(s[i])] += 1\n    sum = math.factorial(len(s))\n    su = sum\n    for i in range(26):\n        su = su // (math.factorial(a[i]) * math.factorial(b[i]))\n    print(su % (10 ** 9 + 7))", "from collections import defaultdict\n\ndef fac(num, modulo):\n    ans = 1\n    for i in range(2, num + 1):\n        ans = ans * i % modulo\n    return ans\n\ndef fast_expo(num, p, modulo):\n    num %= modulo\n    exxp = 1\n    while p > 0:\n        if p & 1:\n            exxp = exxp * num % modulo\n        num = num * num % modulo\n        p >>= 1\n    return exxp\nmodulo = 1000000007\nt = int(input())\nfor i in range(t):\n    s = input().strip()\n    mp = defaultdict(int)\n    for si in s:\n        mp[si] += 1\n    denom = 1\n    for alpha in mp.keys():\n        denom = denom * fac(mp[alpha], modulo)\n    denom = fast_expo(denom, modulo - 2, modulo)\n    nfac = fac(len(s), modulo)\n    nfac = nfac * denom % modulo\n    print(int(nfac))", "e = 10 ** 9 + 7\n\ndef fact(n):\n    ans = 1\n    for i in range(2, n + 1):\n        ans = ans * i % e\n    return ans\nt = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    d = {}\n    for i in s:\n        try:\n            d[i] += 1\n        except:\n            d[i] = 1\n    x = fact(n)\n    for i in d.values():\n        y = fact(i)\n        y = pow(y, e - 2, e)\n        x = x * y % e\n    print(x)", "from collections import Counter\n\ndef fact(num):\n    factorial = 1\n    for i in range(1, num + 1):\n        factorial = factorial * i\n    return factorial\nt = int(input())\nfor _ in range(t):\n    done = dict()\n    strr = str(input())\n    ans = fact(len(strr))\n    res = Counter(strr)\n    for i in res:\n        done[i] = 0\n    l = 1\n    for i in res:\n        if done[i] == 0:\n            l = l * fact(res[i])\n            done[i] = 1\n    ans = ans // l\n    ans = ans % 1000000007\n    print(ans)", "a = pow(10, 9) + 7\nimport math\nt = int(input())\nfor i in range(0, t):\n    s = input()\n    x = len(s)\n    p = 1\n    list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    for j in list:\n        p = p * math.factorial(s.count(j))\n    z = math.factorial(x) // p\n    q = z % a\n    print(q)", "import math\nfrom math import *\nt = int(input())\nwhile t > 0:\n    str = input()\n    sum = 1\n    list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    for i in list:\n        sum = sum * math.factorial(str.count(i))\n    z = math.factorial(len(str)) // sum\n    print(z % 1000000007)\n    t = t - 1", "from math import factorial\nt = int(input())\nfor i in range(t):\n    s = input()\n    hash = {}\n    for j in s:\n        try:\n            hash[j]\n        except:\n            hash[j] = 1\n        else:\n            hash[j] += 1\n    z = factorial(len(s))\n    m = 10 ** 9 + 7\n    k = 1\n    for j in hash.keys():\n        k *= factorial(hash[j])\n    print(z // k % m)", "import collections\nfact = [1] * 510\nMOD = 10 ** 9 + 7\nfor i in range(2, 502):\n    fact[i] = fact[i - 1] * i % MOD\nfor _ in range(int(input())):\n    s = input()\n    d = collections.Counter(s)\n    n = len(s)\n    num = fact[n]\n    den = 1\n    for i in d:\n        den = den * fact[d[i]] % MOD\n    inv = pow(den, MOD - 2, MOD)\n    print(num * inv % MOD)", "from math import factorial\nt = int(input())\nfor _ in range(t):\n    line = input()\n    char = []\n    for i in line:\n        char.append(i)\n    char.sort()\n    same = []\n    current = char[0]\n    k = 0\n    for i in char:\n        if i == current:\n            k += 1\n        else:\n            current = i\n            if k > 1:\n                same.append(k)\n            k = 1\n    same.append(k)\n    ans = factorial(len(char))\n    for i in same:\n        ans //= factorial(i)\n    print(ans % 1000000007)", "MOD = 10 ** 9 + 7\np = 10 ** 3 + 3\nfact = [1] * p\nfor i in range(1, p):\n    fact[i] = fact[i - 1] * i % MOD\n\ndef MI(a, m):\n    return pow(a, m - 2, m)\nfrom collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    c = Counter(s)\n    ans = fact[n]\n    for i in c:\n        if c[i] >= 1:\n            ans = ans * MI(fact[c[i]], MOD) % MOD\n    print(ans % MOD)", "import math\nimport os\nfor __ in range(int(input())):\n    s = input()\n    n = len(s)\n    summ = math.factorial(n)\n    l = []\n    summ2 = 1\n    for x in range(n):\n        if s.count(s[x]) > 1 and s[x] not in l:\n            summ2 = math.factorial(s.count(s[x]))\n            summ //= summ2\n            l.append(s[x])\n    print(summ % 1000000007)", "def fat(i):\n    if i <= 1:\n        return 1\n    return i * fat(i - 1)\nfor _ in range(int(input())):\n    s = input()\n    l = len(s)\n    nt = [0] * 52\n    x = ord('a')\n    y = ord('z')\n    for i in s:\n        z = ord(i)\n        if z >= x and z <= y:\n            nt[z - x] += 1\n        else:\n            nt[z - ord('A') + 26] += 1\n    a = fat(l)\n    for i in nt:\n        a //= fat(i)\n    print(a % 1000000007)", "import math\nn = int(input())\nMOD = pow(10, 9) + 7\nwhile n != 0:\n    s = input()\n    a = [0 for i in range(26)]\n    A = [0 for i in range(26)]\n    for i in s:\n        if i >= 'a' and i <= 'z':\n            a[ord(i) - 97] += 1\n        else:\n            A[ord(i) - 65] += 1\n    N = math.factorial(len(s))\n    for i in range(26):\n        N = N // math.factorial(a[i])\n        N = N // math.factorial(A[i])\n    print(N % MOD)\n    n -= 1", "fact = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]\nMOD = 1000000007\n\ndef fastExpo(base, exp):\n    ans = 1\n    base %= MOD\n    while exp:\n        if exp % 2:\n            ans *= base\n            ans %= MOD\n        exp //= 2\n        base *= base\n        base %= MOD\n    return ans\nt = int(input())\nfor testcase in range(0, t):\n    s = input()\n    l = len(s)\n    d = {}\n    for c in s:\n        if c in d.keys():\n            d[c] += 1\n        else:\n            d[c] = 1\n    den = 1\n    for num in d.values():\n        den *= fact[num]\n    den = fastExpo(den, MOD - 2)\n    numfact = 1\n    for i in range(2, l + 1):\n        numfact *= i\n        numfact %= MOD\n    ans = numfact * den % MOD\n    print(ans)", "def factl(a):\n    b = 1\n    while a > 1:\n        b *= a\n        a -= 1\n    return b\nmdl = 1000000007\nalph = 'abcdefghijklmnopqrstuvwxyz'\nalph += alph.upper()\nlct = list(map(lambda x: (x, 0), list(alph)))\nfor _ in range(int(input())):\n    dct = dict(lct)\n    ltrs = list(input().strip())\n    for c in ltrs:\n        dct[c] += 1\n    prof = list(dct.values())\n    prof.sort(reverse=True)\n    perm = factl(sum(prof))\n    for c in prof:\n        if c < 2:\n            break\n        perm //= factl(c)\n    print(perm % mdl)", "from collections import Counter\nfrom operator import mul\nfrom functools import reduce\nfrom math import factorial\n\ndef Main():\n    T = int(input())\n    for n in range(T):\n        S = input()\n        print(factorial(len(S)) // reduce(mul, [factorial(i) for i in Counter(S).values()]) % (10 ** 9 + 7))\nMain()", "from collections import Counter\nfrom math import factorial\nnum = 10 ** 9 + 7\nfor _ in range(int(input())):\n    string = input()\n    count = Counter(string)\n    f = factorial(len(string))\n    x = 1\n    for i in count.values():\n        if i > 1:\n            x *= factorial(i)\n    print(f // x % num)", "from collections import Counter\nfrom math import factorial\nnum = 10 ** 9 + 7\nfor _ in range(int(input())):\n    string = input()\n    count = Counter(string)\n    f = factorial(len(string))\n    x = 1\n    for i in count.values():\n        if i > 1:\n            x *= factorial(i)\n    print(f // x % num)", "import collections\nfrom math import factorial\nm = 10 ** 9 + 7\nfor _ in range(int(input())):\n    s = input()\n    count = collections.Counter(s)\n    y = factorial(len(s))\n    x = 1\n    for i in count.values():\n        if i > 1:\n            x *= factorial(i)\n    print(y // x % m)", "from math import factorial\n\ndef ans(s):\n    l = list(s)\n    a = list(set(l))\n    z = [factorial(l.count(x)) for x in a if l.count(x) > 1]\n    mul = 1\n    for i in range(len(z)):\n        mul = mul * z[i]\n    return mul\nfor i in range(int(input())):\n    s = input()\n    x = ans(s)\n    print(factorial(len(s)) // x % 1000000007)", "def factorial(n):\n    p = 1\n    for i in range(n, 0, -1):\n        p = p * i\n    return p\n\ndef count(s):\n    l4 = []\n    l = []\n    for i in range(len(s)):\n        c = 0\n        if s[i] not in l:\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    l.append(s[i])\n                    c += 1\n            l4.append(c)\n    return l4\nt = int(input())\nfor x in range(t):\n    s = input()\n    l = len(s)\n    k = count(s)\n    pro = 1\n    for i in range(len(k)):\n        y = factorial(k[i])\n        if y != 0:\n            pro = pro * y\n    print(factorial(l) // pro % (10 ** 9 + 7))", "import math\nm = 10 ** 9 + 7\nfor t in range(int(input())):\n    s = input()\n    l = len(s)\n    h = []\n    for i in range(256):\n        h.append(0)\n    for i in range(l):\n        h[ord(s[i])] += 1\n    ans = 1\n    for i in range(256):\n        ans *= math.factorial(h[i])\n    x = math.factorial(l)\n    x = x // ans\n    print(x % m)", "import math\nt = int(input())\nfor i in range(t):\n    s = input()\n    A = [0] * 26\n    B = [0] * 26\n    for j in range(len(s)):\n        if 65 <= ord(s[j]) <= 90:\n            A[ord(s[j]) % 65] += 1\n        elif 97 <= ord(s[j]) <= 122:\n            B[ord(s[j]) % 97] += 1\n    ans = math.factorial(len(s))\n    for j in A:\n        if j > 1:\n            ans //= math.factorial(j)\n    for j in B:\n        if j > 1:\n            ans //= math.factorial(j)\n    while ans >= 1000000007:\n        ans = ans % 1000000007\n    print(ans)", "def factorial(n):\n    f = 1\n    for i in range(1, n + 1):\n        f = f * i\n    return f\nt = int(input())\nfor j in range(0, t):\n    s = input()\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    a = factorial(len(s))\n    b = 1\n    for k in d:\n        if d[k] > 1:\n            b = b * factorial(d[k])\n    print(a // b % 1000000007)", "import math\n\ndef find(s):\n    l = len(s)\n    dic = {}\n    for j in s:\n        if j not in dic:\n            dic[j] = 1\n        else:\n            dic[j] += 1\n    p = math.factorial(l)\n    for j in dic:\n        if dic[j] > 1:\n            p = p // math.factorial(dic[j])\n    print(p % (10 ** 9 + 7))\nt = int(input())\nfor i in range(t):\n    find(input())", "def factorial(n):\n    f = 1\n    for i in range(1, n + 1):\n        f = f * i\n    return f\nt = int(input())\nfor j in range(0, t):\n    s = input()\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    a = factorial(len(s))\n    b = 1\n    for k in d:\n        if d[k] > 1:\n            b = b * factorial(d[k])\n    print(a // b % 1000000007)", "def f(s):\n    a = {}\n    l = len(s)\n    for i in s:\n        a[i] = a.get(i, 0) + 1\n    p = fact(l)\n    for i in a:\n        p //= fact(a[i])\n    return p % 1000000007\n\ndef fact(n):\n    p = 1\n    for i in range(2, n + 1):\n        p *= i\n    return p\nt = int(input())\nfor i in range(t):\n    s = input()\n    print(f(s))", "t = int(input())\n\ndef fact(n):\n    i = 1\n    for j in range(2, n + 1):\n        i *= j\n    return i\n\ndef foo(word):\n    t = {}\n    for i in word:\n        if i not in t:\n            t[i] = 0\n        t[i] = t[i] + 1\n    initial = fact(len(word))\n    for i in t:\n        initial //= fact(t[i])\n    print(initial % 1000000007)\nwhile t != 0:\n    t = t - 1\n    word = input()\n    foo(word)", "def main():\n    from sys import stdin, stdout\n    from math import factorial\n    t = int(stdin.readline())\n    while t:\n        s = stdin.readline().strip()\n        dic = {}\n        for ele in s:\n            if ele in dic.keys():\n                dic[ele] += 1\n            else:\n                dic[ele] = 1\n        a = factorial(len(s))\n        for key in dic.keys():\n            a //= factorial(dic[key])\n        stdout.write(str(a % 1000000007) + '\\n')\n        t -= 1\nmain()", "def main():\n    from sys import stdin, stdout\n    from math import factorial\n    for _ in range(int(stdin.readline())):\n        s = stdin.readline().strip()\n        count = factorial(len(s))\n        while len(s):\n            count //= factorial(s.count(s[0]))\n            s = s.replace(s[0], '')\n        stdout.write(str(count % 1000000007) + '\\n')\nmain()", "from math import factorial\nfrom collections import Counter\nt = int(input())\n\ndef wordCount(s):\n    a = set(s)\n    d = Counter(s)\n    n = len(s)\n    x = factorial(n)\n    for i in a:\n        x //= factorial(d[i])\n    return x\nwhile t:\n    t -= 1\n    s = input()\n    print(wordCount(s) % (10 ** 9 + 7))", "def pulverize(a, b):\n    apair = [1, 0]\n    bpair = [0, 1]\n    while True:\n        if a == 0:\n            return (bpair[0], bpair[1])\n        else:\n            q = b // a\n            b %= a\n            bpair[0] -= apair[0] * q\n            bpair[1] -= apair[1] * q\n        if b == 0:\n            return (apair[0], apair[1])\n        else:\n            q = a // b\n            a %= b\n            apair[0] -= bpair[0] * q\n            apair[1] -= bpair[1] * q\n\ndef inverse(a, m):\n    (x, k) = pulverize(a, m)\n    g = a * x + m * k\n    if g != 1:\n        return 0\n    if x < 0:\n        x += m\n    return x\nmbase = 1000000007\nfact = [1]\nfor i in range(500):\n    fact.append((i + 1) * fact[i] % mbase)\nt = int(input())\nfor it in range(t):\n    s = sorted(input())\n    cfreq = 1\n    freqs = []\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            cfreq += 1\n        else:\n            freqs.append(cfreq)\n            cfreq = 1\n    freqs.append(cfreq)\n    den = 1\n    for f in freqs:\n        den *= fact[f]\n        den %= mbase\n    num = fact[len(s)]\n    ans = num * inverse(den, mbase) % mbase\n    print(ans)", "def fact(n):\n    f = 1\n    for i in range(1, n + 1):\n        f = f * i\n    return f\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        D = {}\n        x = input()\n        for j in x:\n            if j in D:\n                D[j] += 1\n            else:\n                D[j] = 1\n        ans = fact(len(x))\n        for j in D.values():\n            if j > 1:\n                ans = ans // fact(j)\n        print(ans % 1000000007)\nmain()", "import sys\nimport math\nfrom time import time\nfrom itertools import permutations, combinations\nimport collections\nimport functools\nfrom fractions import gcd, Fraction\nimport string\nimport operator\nimport bisect\n\nclass timed(object):\n\n    def __init__(self, func):\n        self.func = func\n\n    def __call__(self, *args):\n        t1 = time()\n        ret = self.func(*args)\n        dif_time = time() - t1\n        print('%s: returned %s in %f seconds' % (self.func.__name__, ret, dif_time))\n        return ret\n\ndef comp(f1, f2, *args):\n    t1 = time()\n    r1 = f1(*args) if f1 is not None else None\n    t2 = time()\n    r2 = f2(*args) if f2 is not None else None\n    t3 = time()\n    res = '%5s: %s in %f\\n%5s: %s in %f' % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)\n    if r1 != r2:\n        dr = '!! DIFFERENT RESULTS !!'\n        res = dr + '\\n' + res + '\\n' + dr\n    print(res)\n    return r1 if r1 == r2 else None\nMODULO = 1000000007\n\ndef choose(n, k):\n    if 0 <= k <= n:\n        ntok = 1\n        ktok = 1\n        for t in range(1, min(k, n - k) + 1):\n            ntok *= n\n            ktok *= t\n            n -= 1\n        return ntok // ktok\n    else:\n        return 0\n\ndef alg(s):\n    counts = [(a, s.count(a)) for a in set(s)]\n    res = 1\n    remaining_spots = len(s)\n    for (ch, nb) in counts:\n        res *= choose(remaining_spots, nb)\n        res %= MODULO\n        remaining_spots -= nb\n    return res\n\ndef main():\n    data = sys.stdin\n    nb = int(data.readline())\n    for icase in range(nb):\n        s = data.readline().strip()\n        res = alg(s)\n        print(res)\nmain()", "def fact(n):\n    ans = 1\n    for j in range(1, n + 1):\n        ans *= j\n    return ans\ntest = int(input())\nfor i in range(test):\n    s = input()\n    dic = {}\n    for i in s:\n        if i in dic:\n            dic[i] = dic[i] + 1\n        else:\n            dic[i] = 1\n    ans = fact(len(s))\n    for j in dic:\n        ans = ans // fact(dic.get(j))\n    print(ans % 1000000007)", "n = int(input())\nFac = [1]\np = 1\nfor i in range(1, 501):\n    p *= i\n    p %= 10 ** 9 + 7\n    Fac.append(p)\nfor i in range(n):\n    E = {}\n    s = input()\n    for item in s:\n        if item in E:\n            E[item] += 1\n        else:\n            E[item] = 1\n    a = Fac[len(s)]\n    b = 1\n    for item in E:\n        b *= Fac[E[item]]\n        b %= 10 ** 9 + 7\n    b = pow(b, 10 ** 9 + 5, 10 ** 9 + 7)\n    print(a * b % (10 ** 9 + 7))", "from math import *\n\ndef permRep(n):\n    low = 1\n    sum = 0\n    for x in n:\n        low *= factorial(x)\n        sum += x\n    return factorial(sum) // low % 1000000007\n\ndef isUpper(n):\n    if n >= 'A' and n <= 'Z':\n        return True\n    return False\nt = int(input())\nwhile t > 0:\n    t -= 1\n    line = input()\n    arr = [0] * 127\n    for c in line:\n        if isUpper(c):\n            arr[ord(c)] += 1\n        else:\n            arr[ord(c)] += 1\n    print(permRep(arr))", "def fact(x):\n    result = 1\n    for i in range(2, x + 1):\n        result *= i\n    return result\n\ndef comb(n, k):\n    if k > n - k:\n        k = n - k\n    result = 1\n    for i in range(n - k + 1, n + 1):\n        result *= i\n    for i in range(1, k + 1):\n        result //= i\n    return result\nn = int(input(''))\nfor i in range(n):\n    s = input('')\n    s = list(s)\n    length = len(s)\n    result = 1\n    dict = {}\n    for i in s:\n        try:\n            a = dict[i]\n            dict[i] += 1\n        except:\n            dict[i] = 1\n    sum = 0\n    for i in dict.values():\n        sum += i\n        result *= comb(sum, i)\n    print(result % (10 ** 9 + 7))", "def fact(a):\n    f = 1\n    for i in range(2, a + 1):\n        f = f * i\n    return f\nfactorial = [1] * 11\nd = 1\nfor k in range(1, 11):\n    d = d * k\n    factorial[k] = d\n\ndef main():\n    t = int(input())\n    for z in range(0, t):\n        lis = [0] * 150\n        st = input()\n        for i in range(0, len(st)):\n            lis[ord(st[i])] = lis[ord(st[i])] + 1\n        denom = 1\n        for j in range(0, 150):\n            if lis[j] > 0:\n                denom *= factorial[lis[j]]\n        ans = fact(len(st)) // denom\n        ans %= 1000000007\n        print(ans)\nmain()", "def invmodp(a, p):\n    r = a\n    d = 1\n    for count in range(p):\n        d = (p // r + 1) * d % p\n        r = d * a % p\n        if r == 1:\n            break\n    else:\n        raise ValueError('%d has no inverse mod %d' % (a, p))\n    return d\n\ndef main():\n    _mod = 10 ** 9 + 7\n    f = [1]\n    for i in range(1, 600):\n        f.append(f[i - 1] * i % _mod)\n    from collections import Counter\n    import sys\n    t = int(sys.stdin.readline().strip())\n    for i in range(t):\n        _list = sys.stdin.readline().strip()\n        c = Counter(_list)\n        _ans = f[len(_list)]\n        c2 = Counter(c.values())\n        for i in c2:\n            k = invmodp(f[i], _mod)\n            k2 = k\n            for j in range(c2[i] - 1):\n                k = k * k2 % _mod\n            _ans = _ans * k % _mod\n        print('%s' % _ans)\nmain()", "dic = {0: 1, 1: 1}\n\ndef fact(n):\n    if n in dic:\n        return dic[n]\n    else:\n        dic[n] = n * fact(n - 1)\n        return dic[n]\ncases = int(input())\nwhile cases > 0:\n    cases -= 1\n    s = input()\n    out = fact(len(s))\n    while len(s):\n        c = s.count(s[0])\n        s = s.replace(s[0], '')\n        out //= fact(c)\n    print(out % (10 ** 9 + 7))"]