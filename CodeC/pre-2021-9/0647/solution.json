["t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    best = float('inf')\n    extra = 0\n    if arr[0] != 1:\n        prev = arr[0]\n        for i in range(n):\n            if i == 0:\n                continue\n            if arr[i] < prev:\n                extra += prev - arr[i]\n            else:\n                extra += (arr[0] - arr[i] % arr[0]) % arr[0]\n                prev = arr[i] + (arr[0] - arr[i] % arr[0]) % arr[0]\n        best = extra\n    for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:\n        extra = 0\n        prev = arr[0]\n        for i in range(n):\n            if i == 0:\n                extra += (p - arr[i] % p) % p\n                prev += (p - arr[i] % p) % p\n                continue\n            if arr[i] < prev:\n                extra += prev - arr[i]\n            else:\n                extra += (p - arr[i] % p) % p\n                prev = arr[i] + (p - arr[i] % p) % p\n        best = min(best, extra)\n    print(best)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    best = float('inf')\n    extra = 0\n    if arr[0] != 1:\n        prev = arr[0]\n        for i in range(n):\n            if i == 0:\n                continue\n            if arr[i] < prev:\n                extra += prev - arr[i]\n            else:\n                extra += (arr[0] - arr[i] % arr[0]) % arr[0]\n                prev = arr[i] + (arr[0] - arr[i] % arr[0]) % arr[0]\n        best = extra\n    for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:\n        extra = 0\n        prev = arr[0]\n        for i in range(n):\n            if i == 0:\n                extra += (p - arr[i] % p) % p\n                prev += (p - arr[i] % p) % p\n                continue\n            if arr[i] < prev:\n                extra += prev - arr[i]\n            else:\n                extra += (p - arr[i] % p) % p\n                prev = arr[i] + (p - arr[i] % p) % p\n        best = min(best, extra)\n    print(best)", "inf = 10 ** 10\nsz = 10 ** 4 + 1\nstat = [0] * sz\nstat[0] = 1\nstat[1] = 1\nprime = []\nfor i in range(2, int(sz ** 0.5 + 1)):\n    if stat[i] == 0:\n        for j in range(i * i, sz, i):\n            stat[j] = 1\nfor i in range(sz):\n    if stat[i] == 0:\n        prime.append(i)\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = len(l) * 2\n    t = 0\n    for i in range(1, n):\n        if l[i] < l[i - 1]:\n            t += l[i - 1] - l[i]\n            l[i] = l[i - 1]\n    m = max(l)\n    for i in prime:\n        temp = 0\n        for j in l:\n            if j % i != 0:\n                temp += i - j % i\n            if temp > ans:\n                break\n        ans = min(ans, temp)\n        if i > m:\n            break\n    print(ans + t)", "inf = 10 ** 10\nsz = 10 ** 4 + 1\nstat = [0] * sz\nstat[0] = 1\nstat[1] = 1\nprime = []\nfor i in range(2, int(sz ** 0.5 + 1)):\n    if stat[i] == 0:\n        for j in range(i * i, sz, i):\n            stat[j] = 1\nfor i in range(sz):\n    if stat[i] == 0:\n        prime.append(i)\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = len(l) * 2\n    t = 0\n    for i in range(1, n):\n        if l[i] < l[i - 1]:\n            t += l[i - 1] - l[i]\n            l[i] = l[i - 1]\n    m = max(l)\n    for i in prime:\n        temp = 0\n        for j in l:\n            if j % i != 0:\n                temp += i - j % i\n            if temp > ans:\n                break\n        ans = min(ans, temp)\n        if i > m:\n            break\n    print(ans + t)", "prime = [1] * 10003\nprimes = []\n\ndef seive():\n    for i in range(2, 10003):\n        if prime[i]:\n            for j in range(i * i, 10003, i):\n                prime[j] = False\n            primes.append(i)\nt = int(input())\nseive()\nfor testcase in range(t):\n    n = int(input())\n    v = list(map(int, input().split()))\n    count = 0\n    for i in range(1, n):\n        if v[i] < v[i - 1]:\n            count += v[i - 1] - v[i]\n            v[i] = v[i - 1]\n    ans = 10 ** 9\n    for i in primes:\n        if i > v[-1]:\n            break\n        required = 0\n        tempans = count\n        for j in v:\n            if required < j:\n                required = (j + i - 1) // i * i\n            tempans += required - j\n            if tempans > ans:\n                break\n        if ans > tempans:\n            ans = tempans\n    print(n) if v[-1] < 2 else print(ans)", "from cmath import inf\np = []\nprimes = [1] * (10 ** 4 + 1)\nprimes[0] = primes[1] = 0\nfor i in range(2, 10 ** 4 + 1):\n    if primes[i]:\n        p.append(i)\n        x = 2\n        while i * x <= 10 ** 4:\n            primes[i * x] = 0\n            x += 1\nfor _ in range(int(input())):\n    n = int(input())\n    v = list(map(int, input().split()))\n    count = 0\n    for i in range(1, n):\n        if v[i] < v[i - 1]:\n            count += v[i - 1] - v[i]\n            v[i] = v[i - 1]\n    ans = inf\n    for i in p:\n        if i > v[-1]:\n            break\n        required = 0\n        tempans = count\n        for j in v:\n            if required < j:\n                required = (j + i - 1) // i * i\n            tempans += required - j\n            if tempans > ans:\n                break\n        if ans > tempans:\n            ans = tempans\n    print(n) if v[-1] < 2 else print(ans)", "from cmath import inf\np = []\nprimes = [1] * (10 ** 4 + 1)\nprimes[0] = primes[1] = 0\nfor i in range(2, 10 ** 4 + 1):\n    if primes[i]:\n        p.append(i)\n        x = 2\n        while i * x <= 10 ** 4:\n            primes[i * x] = 0\n            x += 1\nfor _ in range(int(input())):\n    n = int(input())\n    v = list(map(int, input().split()))\n    count = 0\n    for i in range(1, n):\n        if v[i] < v[i - 1]:\n            count += v[i - 1] - v[i]\n            v[i] = v[i - 1]\n    ans = inf\n    for i in p:\n        if i > v[-1]:\n            break\n        required = 0\n        tempans = count\n        for j in v:\n            if required < j:\n                required = (j + i - 1) // i * i\n            tempans += required - j\n            if tempans > ans:\n                break\n        if ans > tempans:\n            ans = tempans\n    print(n) if v[-1] < 2 else print(ans)", "prime = [1] * 10003\nprimes = []\n\ndef seive():\n    for i in range(2, 10003):\n        if prime[i]:\n            for j in range(i * i, 10003, i):\n                prime[j] = False\n            primes.append(i)\nt = int(input())\nseive()\nfor testcase in range(t):\n    n = int(input())\n    v = list(map(int, input().split()))\n    count = 0\n    for i in range(1, n):\n        if v[i] < v[i - 1]:\n            count += v[i - 1] - v[i]\n            v[i] = v[i - 1]\n    ans = 10 ** 9\n    for i in primes:\n        if i > v[-1]:\n            break\n        required = 0\n        tempans = count\n        for j in v:\n            if required < j:\n                required = (j + i - 1) // i * i\n            tempans += required - j\n            if tempans > ans:\n                break\n        if ans > tempans:\n            ans = tempans\n    print(n) if v[-1] < 2 else print(ans)", "prime = [1] * 10003\nprimes = []\n\ndef seive():\n    for i in range(2, 10003):\n        if prime[i]:\n            for j in range(i * i, 10003, i):\n                prime[j] = False\n            primes.append(i)\nt = int(input())\nseive()\nfor testcase in range(t):\n    n = int(input())\n    v = list(map(int, input().split()))\n    count = 0\n    for i in range(1, n):\n        if v[i] < v[i - 1]:\n            count += v[i - 1] - v[i]\n            v[i] = v[i - 1]\n    ans = 10 ** 9\n    for i in primes:\n        if i > v[-1]:\n            break\n        required = 0\n        tempans = count\n        for j in v:\n            if required < j:\n                required = (j + i - 1) // i * i\n            tempans += required - j\n            if tempans > ans:\n                break\n        if ans > tempans:\n            ans = tempans\n    print(n) if v[-1] < 2 else print(ans)", "from math import gcd as hcf\nfrom functools import reduce\n(pf, spf) = ([], [False] * 102)\nfor i in range(2, 102):\n    if spf[i] == False:\n        pf.append(i)\n        for j in range(i ** 2, 102, i):\n            spf[j] = i\nfor _ in range(int(input())):\n    (n, ans) = (int(input()), 0)\n    arr = [int(i) for i in input().split()]\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            ans += arr[i - 1] - arr[i]\n            arr[i] += arr[i - 1] - arr[i]\n    gcd = reduce(hcf, arr)\n    if gcd != 1:\n        print(ans)\n        continue\n    min_ = float('inf')\n    for i in pf:\n        (ct, minballs) = (0, 0)\n        for j in range(n):\n            minballs = max((arr[j] + i - 1) // i * i, minballs)\n            ct += minballs - arr[j]\n        min_ = min(ct, min_)\n    print(ans + min_)", "from functools import *\nfrom math import *\nfrom collections import *\nprime = []\n\ndef isprime(n):\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0 or n <= 1:\n        return False\n    x = 5\n    while x * x <= n:\n        if n % x == 0 or n % (x + 2) == 0:\n            return False\n        x += 6\n    return True\nfor i in range(1, 1002):\n    if isprime(i):\n        prime.append(i)\nfor _ in range(int(input().strip())):\n    n = int(input().strip())\n    l = list(map(int, input().strip().split()))\n    ans1 = 0\n    for i in range(1, n):\n        if l[i] < l[i - 1]:\n            ans1 += l[i - 1] - l[i]\n            l[i] += l[i - 1] - l[i]\n    gc = reduce(gcd, l)\n    if gc != 1:\n        print(ans1)\n        continue\n    else:\n        ans = 10 ** 6\n        for i in range(len(prime)):\n            x = 0\n            for j in range(n):\n                y = l[j] % prime[i]\n                if y != 0:\n                    x += prime[i] - y\n            ans = min(ans, x)\n        print(ans + ans1)", "def test():\n    n = int(input())\n    a = [int(i) for i in input().split(' ')]\n    for_sure = 0\n    for i in range(1, len(a)):\n        if a[i] < a[i - 1]:\n            for_sure += a[i - 1] - a[i]\n            a[i] = a[i - 1]\n    maybe = sum((i % 2 for i in a))\n    ln = a[0] + maybe\n    prost = [1 for i in range(ln + 1)]\n    prost[0] = 0\n    prost[1] = 0\n    for i in range(2, int(ln ** 0.5) + 1):\n        if prost[i]:\n            for j in range(2 * i, ln + 1, i):\n                prost[j] = 0\n    prost = [i for i in range(3, ln + 1) if prost[i]]\n    for i in prost:\n        try_maybe = 0\n        for j in a:\n            try_maybe += 0 if j % i == 0 else i - j % i\n            if try_maybe >= maybe:\n                break\n        else:\n            maybe = try_maybe\n    return for_sure + maybe\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        print(test())\nmain()"]