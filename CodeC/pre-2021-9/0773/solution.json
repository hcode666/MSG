["T = int(input())\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\nfor t in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    ans = 1\n    s = set()\n    for i in range(N):\n        cnt = 0\n        while i not in s:\n            s.add(i)\n            cnt += 1\n            i = A[i] - 1\n        if cnt > 0:\n            ans = ans * cnt // gcd(ans, cnt)\n    print(ans % 1000000007)", "import math\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    N = int(input())\n    A = [int(x) - 1 for x in input().split()]\n    if N == 1:\n        print(1)\n        continue\n    lengths = []\n    visited = [False] * N\n    for i in range(N):\n        if not visited[i]:\n            j = i\n            length = 0\n            while not visited[j]:\n                visited[j] = True\n                j = A[j]\n                length += 1\n            lengths.append(length)\n    lcm = 1\n    for i in lengths:\n        lcm = lcm * i // math.gcd(lcm, i)\n    print(lcm % mod)", "import math\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    N = int(input())\n    A = [int(x) - 1 for x in input().split()]\n    if N == 1:\n        print(1)\n        continue\n    lengths = []\n    visited = [False] * N\n    for i in range(N):\n        if not visited[i]:\n            j = i\n            length = 0\n            while not visited[j]:\n                visited[j] = True\n                j = A[j]\n                length += 1\n            lengths.append(length)\n    lcm = 1\n    for i in lengths:\n        lcm = lcm * i // math.gcd(lcm, i)\n    print(lcm % mod)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nMOD = 10 ** 9 + 7\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    w = 1\n    n = int(input())\n    A = [int(x) - 1 for x in input().split()]\n    visited = [False] * n\n    for i in range(n):\n        if visited[i]:\n            continue\n        ans = 1\n        pos = A[i]\n        visited[i] = True\n        while pos != i:\n            visited[pos] = True\n            ans = ans + 1\n            pos = A[pos]\n        w = lcm(w, ans)\n    print(w % MOD)", "MOD = int(1000000000.0) + 7\n\ndef factorize(n: int, i: int) -> dict:\n    p = 0\n    while n % i == 0:\n        p += 1\n        n //= i\n    return {i: p}\n\ndef fill_factors(n: int) -> list:\n    factors = [{} for i in range(n + 1)]\n    for i in range(2, n):\n        if factors[i] == {}:\n            for j in range(1, n // i + 1):\n                factors[i * j].update(factorize(j * i, i))\n    return factors\nFACTORS = fill_factors(100000)\n\ndef mod_mul(a: list, mod: int) -> int:\n    n = len(a)\n    if n == 1:\n        return a[0]\n    return mod_mul(a[:n // 2], mod) * mod_mul(a[n // 2:], mod) % mod\n\ndef mod_power(a: int, p: int, mod: int) -> int:\n    if a == 1 or p == 0:\n        return 1\n    if p == 1:\n        return a\n    m = mod_power(a, p // 2, mod)\n    return mod_mul([m, m, mod_power(a, p % 2, mod)], mod)\n\ndef lcm(loops: list) -> int:\n    n = len(loops)\n    if n == 0:\n        return 1\n    if n == 1:\n        return loops[0]\n    primes = {}\n    for loop in loops:\n        for (prime, power) in FACTORS[loop].items():\n            if prime not in primes:\n                primes[prime] = power\n            else:\n                primes[prime] = max(primes[prime], power)\n    return mod_mul([mod_power(prime, power, MOD) for (prime, power) in primes.items()], MOD)\n\ndef get_loops(n: int, a: list) -> list:\n    covered = [0] * n\n    loops = []\n    for i in range(n):\n        if covered[i] == 0:\n            (st, end) = (i, i)\n            loop = 0\n            while True:\n                loop += 1\n                end = a[end]\n                covered[end] = 1\n                if st == end:\n                    break\n            if loop > 1:\n                loops.append(loop)\n    return loops\n\ndef solve(n: int, a: list) -> int:\n    loops = get_loops(n, a)\n    return lcm(loops)\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    a = [int(i) - 1 for i in input().strip().split()]\n    print(solve(n, a))", "import math\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    N = int(input())\n    A = [int(x) - 1 for x in input().split()]\n    if N == 1:\n        print(1)\n        continue\n    lengths = []\n    visited = [False] * N\n    for i in range(N):\n        if not visited[i]:\n            j = i\n            length = 0\n            while not visited[j]:\n                visited[j] = True\n                j = A[j]\n                length += 1\n            lengths.append(length)\n    lcm = 1\n    for i in lengths:\n        lcm = lcm * i // math.gcd(lcm, i)\n    print(lcm % mod)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nMOD = 10 ** 9 + 7\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    w = 1\n    n = int(input())\n    A = [int(x) - 1 for x in input().split()]\n    visited = [False] * n\n    for i in range(n):\n        if visited[i]:\n            continue\n        ans = 1\n        pos = A[i]\n        visited[i] = True\n        while pos != i:\n            visited[pos] = True\n            ans = ans + 1\n            pos = A[pos]\n        w = lcm(w, ans)\n    print(w % MOD)", "from fractions import gcd\nT = int(input())\nfor i in range(1, T + 1):\n    N = int(input())\n    l = [int(i) - 1 for i in input().split()]\n    ls = [0] * N\n    cycle = []\n    for i in range(0, N):\n        if ls[i] == 0:\n            ls[i] = 1\n            (c, d) = (l[i], 1)\n            while c != i:\n                ls[c] = 1\n                c = l[c]\n                d += 1\n            cycle.append(d)\n    lcm = 1\n    for i in cycle:\n        lcm = lcm * i // gcd(i, lcm)\n    print(lcm % (10 ** 9 + 7))", "def find_set(x):\n    if fa[x] != x:\n        fa[x] = find_set(fa[x])\n    return fa[x]\n\ndef gcd(x, y):\n    if x == 0:\n        return y\n    return gcd(y % x, x)\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\nfa = [0 for i in range(100001)]\nncase = int(input())\nwhile ncase > 0:\n    ncase -= 1\n    n = int(input())\n    a = input().split(' ')\n    for i in range(n):\n        fa[i + 1] = i + 1\n    for i in range(n):\n        x = int(a[i])\n        fx = find_set(x)\n        fy = find_set(i + 1)\n        if fx != fy:\n            fa[fx] = fy\n    sz = [0 for i in range(n + 1)]\n    for i in range(n):\n        sz[find_set(i + 1)] += 1\n    ans = 1\n    for i in range(n):\n        if sz[i + 1] > 1:\n            ans = lcm(ans, sz[i + 1])\n    print(ans % 1000000007)", "import sys\nfrom fractions import gcd\nT = int(sys.stdin.readline())\nC = 10 ** 9 + 7\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\ndicta = {}\nfor _ in range(T):\n    N = int(sys.stdin.readline())\n    lsta = [int(x) for x in sys.stdin.readline().split()]\n    (out, i, elms, count, Counter, Low) = (-1, 0, 0, 1, 0, -1)\n    while True:\n        Low = i\n        if lsta[i] != -1:\n            elms += 1\n            t = i\n            Counter += 1\n            i = lsta[i] - 1\n            lsta[t] = -1\n        else:\n            if tuple([count, Counter]) in dicta:\n                count = dicta[tuple([count, Counter])]\n            else:\n                x = lcm(count, Counter)\n                dicta[tuple([count, Counter])] = x\n                count = x\n            if elms == N:\n                break\n            for k in range(Low, N):\n                if lsta[k] != -1:\n                    i = k\n                    break\n            Counter = 0\n    if count < C:\n        print(count)\n    else:\n        print(count % C)", "from fractions import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    n = int(input())\n    swap = [int(x) for x in input().split()]\n    swap_dict = {i: True for i in range(1, n + 1)}\n    lcm_set = set()\n    for i in range(1, n + 1):\n        if swap_dict[i]:\n            cycle = 1\n            nextt = swap[i - 1]\n            while nextt != i:\n                swap_dict[nextt] = False\n                nextt = swap[nextt - 1]\n                cycle += 1\n            swap_dict[i] = False\n            lcm_set.add(cycle)\n    whistles = 1\n    for i in lcm_set:\n        whistles = lcm(i, whistles)\n    mod = 10 ** 9 + 7\n    print(whistles % mod)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    tot = 1\n    n = int(input())\n    position = input()\n    pos = position.split(' ')\n    b = []\n    b = [False] * n\n    for i in range(n):\n        pos[i] = int(pos[i]) - 1\n    for i in range(n):\n        temp = 0\n        if b[i] == True:\n            continue\n        init = pos[i]\n        dup = init\n        while True:\n            temp = temp + 1\n            dup = pos[dup]\n            b[dup] = True\n            if dup == init:\n                break\n        tot = lcm(tot, temp)\n    print(int(tot % 1000000007))", "def gcd(a, b):\n    while b != 0:\n        r = a % b\n        a = b\n        b = r\n    return a\nmodulo = 1000000007\nT = int(input())\narr = [None] * 100000\nseen = [None] * 100000\nstep = [None] * 100000\nwhile T > 0:\n    T = T - 1\n    N = int(input())\n    for i in range(N):\n        seen[i] = False\n    arr[:] = map(int, input().split())\n    s = 0\n    for i in range(N):\n        if seen[i]:\n            continue\n        count = 1\n        index = arr[i]\n        seen[index - 1] = True\n        while index != i + 1:\n            count = count + 1\n            index = arr[index - 1]\n            seen[index - 1] = True\n        step[s] = count\n        s = s + 1\n    lcm = 1\n    for i in range(s):\n        lcm = lcm * step[i] // gcd(lcm, step[i])\n    print(lcm % modulo)", "import fractions\ntest = int(input())\nfor i in range(test):\n    n = int(input())\n    array = [int(x) for x in input().split()]\n    array.insert(0, 0)\n    count = []\n    seen = {}\n    toSee = 0\n    for i in range(1, n + 1):\n        j = 1\n        x = array[i]\n        if x not in seen:\n            seen[x] = None\n            while x != i:\n                x = array[x]\n                seen[x] = None\n                j += 1\n            count.append(j)\n            toSee += 1\n    lcm = 1\n    for i in range(toSee):\n        lcm = lcm * count[i] // fractions.gcd(lcm, count[i])\n    print(lcm % (10 ** 9 + 7))", "import fractions\ntest = int(input())\nfor i in range(test):\n    n = int(input())\n    array = [int(x) for x in input().split()]\n    array.insert(0, 0)\n    count = []\n    seen = {}\n    toSee = 0\n    for i in range(1, n + 1):\n        j = 1\n        x = array[i]\n        if x not in seen:\n            seen[x] = None\n            while x != i:\n                x = array[x]\n                seen[x] = None\n                j += 1\n            count.append(j)\n            toSee += 1\n    lcm = 1\n    for i in range(toSee):\n        lcm = lcm * count[i] // fractions.gcd(lcm, count[i])\n    print(lcm % (10 ** 9 + 7))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return int(gcd(b, a % b))\n\ndef fun(a, b):\n    _gcd = gcd(a, b)\n    product = a // _gcd * b\n    return int(product)\nT = int(input())\nwhile T > 0:\n    n = int(input())\n    num = [0]\n    vis = [0]\n    x = input()\n    for i in x.split():\n        num.append(int(i))\n        vis.append(0)\n    div = []\n    st = 1\n    while st <= n:\n        if vis[st] == 0:\n            mark = st\n            vis[st] = 1\n            cnt = 1\n            nx = num[st]\n            while mark != nx:\n                vis[nx] = 1\n                nx = num[nx]\n                cnt += 1\n            if cnt not in div:\n                div.append(cnt)\n        st += 1\n    ans = 1\n    for each in div:\n        ans = fun(ans, each)\n    print(int(ans % 1000000007))\n    T -= 1", "def gcd(a, b):\n    if b == 0:\n        return a\n    return int(gcd(b, a % b))\n\ndef fun(a, b):\n    _gcd = gcd(a, b)\n    product = a * b // _gcd\n    return int(product)\nT = int(input())\nwhile T > 0:\n    n = int(input())\n    num = [0]\n    vis = [0]\n    x = input()\n    for i in x.split():\n        num.append(int(i))\n        vis.append(0)\n    div = []\n    st = 1\n    while st <= n:\n        if vis[st] == 0:\n            mark = st\n            vis[st] = 1\n            cnt = 1\n            nx = num[st]\n            while mark != nx:\n                vis[nx] = 1\n                nx = num[nx]\n                cnt += 1\n            if cnt not in div:\n                div.append(cnt)\n        st += 1\n    ans = 1\n    for each in div:\n        ans = fun(ans, each)\n    print(int(ans % 1000000007))\n    T -= 1", "from fractions import gcd\nMOD = 10 ** 9 + 7\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    ans = 1\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr[:] = [x - 1 for x in arr]\n    dups = n * [False]\n    for i in range(n):\n        cnt = 0\n        if dups[i]:\n            continue\n        a = arr[i]\n        b = a\n        while 1:\n            b = arr[b]\n            dups[b] = True\n            cnt += 1\n            if a == b:\n                break\n        ans = lcm(ans, cnt)\n    print(ans % MOD)", "def hcf(a, b):\n    if a % b == 0:\n        return b\n    else:\n        return hcf(b, a % b)\n\ndef lcm(a, b):\n    return a * b // hcf(a, b)\nMOD = 10 ** 9 + 7\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = [0] * (n + 1)\n    visited = [False] * (n + 1)\n    temp = input().split(' ')\n    for i in range(1, n + 1):\n        arr[i] = int(temp[i - 1])\n    allCounts = []\n    for i in range(1, n + 1):\n        if visited[i] == False:\n            j = i\n            count = 0\n            while visited[j] == False:\n                visited[j] = True\n                j = arr[j]\n                count += 1\n            allCounts.append(count)\n    ans = allCounts[0]\n    for i in range(1, len(allCounts)):\n        ans = lcm(ans, allCounts[i])\n    print(ans % MOD)\n    t -= 1", "def hcf(a, b):\n    if a % b == 0:\n        return b\n    else:\n        return hcf(b, a % b)\n\ndef lcm(a, b):\n    return a * b // hcf(a, b)\nMOD = 10 ** 9 + 7\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = [0] * (n + 1)\n    visited = [False] * (n + 1)\n    temp = input().split(' ')\n    for i in range(1, n + 1):\n        arr[i] = int(temp[i - 1])\n    allCounts = []\n    for i in range(1, n + 1):\n        if visited[i] == False:\n            j = i\n            count = 0\n            while visited[j] == False:\n                visited[j] = True\n                j = arr[j]\n                count += 1\n            allCounts.append(count)\n    ans = allCounts[0]\n    for i in range(1, len(allCounts)):\n        ans = lcm(ans, allCounts[i])\n    print(ans % MOD)\n    t -= 1", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    tot = 1\n    n = int(input())\n    position = input()\n    pos = position.split(' ')\n    b = []\n    b = [False] * n\n    for i in range(n):\n        pos[i] = int(pos[i]) - 1\n    for i in range(n):\n        temp = 0\n        if b[i] == True:\n            continue\n        init = pos[i]\n        dup = init\n        while True:\n            temp = temp + 1\n            dup = pos[dup]\n            b[dup] = True\n            if dup == init:\n                break\n        tot = lcm(tot, temp)\n    print(int(tot % 1000000007))", "import math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    tot = 1\n    n = int(input())\n    position = input()\n    pos = position.split(' ')\n    b = []\n    b = [False] * n\n    for i in range(n):\n        pos[i] = int(pos[i]) - 1\n    for i in range(n):\n        temp = 0\n        if b[i] == True:\n            continue\n        init = pos[i]\n        dup = init\n        while True:\n            temp = temp + 1\n            dup = pos[dup]\n            b[dup] = True\n            if dup == init:\n                break\n        tot = lcm(tot, temp)\n    print(int(tot % 1000000007))", "from fractions import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(input())):\n    n = int(input())\n    swap = [int(x) for x in input().split()]\n    swap_dict = {i: True for i in range(1, n + 1)}\n    lcm_set = set()\n    for i in range(1, n + 1):\n        if swap_dict[i]:\n            cycle = 1\n            nextt = swap[i - 1]\n            while nextt != i:\n                swap_dict[nextt] = False\n                nextt = swap[nextt - 1]\n                cycle += 1\n            swap_dict[i] = False\n            lcm_set.add(cycle)\n    whistles = 1\n    for i in lcm_set:\n        whistles = lcm(i, whistles)\n    mod = 10 ** 9 + 7\n    print(whistles % mod)", "from array import *\nt = int(input())\nwhile t > 0:\n    ar = array('i', [0])\n    br = array('i', [0])\n    n = int(input())\n    c = input()\n    for i in c.split(' '):\n        ar.append(int(i))\n        br.append(0)\n    j = 1\n    lcm = 1\n    while j <= n:\n        count = 0\n        while br[j] != 1:\n            br[j] = 1\n            j = ar[j]\n            count = count + 1\n        j = j + 1\n        if count == 0:\n            continue\n        a = count\n        b = lcm\n        while b != 0:\n            g = a % b\n            a = b\n            b = g\n        lcm = count * lcm\n        lcm = lcm // a\n    print(lcm % 1000000007)\n    t = t - 1", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * (b // gcd(a, b))\nmod = 1000000007\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    v = input().split()\n    for j in range(len(v)):\n        v[j] = int(v[j])\n    used = [False for j in range(N)]\n    ans = 1\n    for j in range(N):\n        if used[j] == False:\n            times = 1\n            current = v[j]\n            used[j] = True\n            while current - 1 != j:\n                used[current - 1] = True\n                current = v[current - 1]\n                times += 1\n            ans = lcm(ans, times)\n    print(ans % mod)", "import fractions\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    a = []\n    v = []\n    nm = []\n    tm = input().split()\n    for i in range(n):\n        a.append(int(tm[i]))\n        a[i] -= 1\n        v.append(False)\n    for i in range(n):\n        cm = int(1)\n        if v[i] == False:\n            k = a[i]\n            v[i] = True\n            while k != i:\n                v[k] = True\n                k = a[k]\n                cm = cm + 1\n        if cm > 1:\n            nm.append(int(cm))\n    if len(nm) < 1:\n        ansr = 1\n    else:\n        ansr = int(nm[0])\n    for i in range(1, len(nm)):\n        ansr = ansr * int(nm[i]) // int(fractions.gcd(ansr, nm[i]))\n    ansr = int(ansr)\n    ansr = ansr % 1000000007\n    print(ansr)", "def gcd(x, y):\n    if y == 0:\n        return x\n    return gcd(y, x % y)\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef solve(vals):\n    ans = 1\n    for v in vals:\n        ans = lcm(ans, v)\n    return ans % (10 ** 9 + 7)\nT = int(input())\nfor i in range(T):\n    input()\n    arr = [int(x) - 1 for x in input().rstrip().split(' ')]\n    vis = [0] * len(arr)\n    vals = []\n    for j in range(len(arr)):\n        cnt = 0\n        t = j\n        while vis[t] != 1:\n            cnt += 1\n            vis[t] = 1\n            t = arr[t]\n        if cnt > 1:\n            vals.append(cnt)\n    print(solve(vals))", "T = int(input())\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\nfor t in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    ans = 1\n    s = set()\n    for i in range(N):\n        cnt = 0\n        while i not in s:\n            s.add(i)\n            cnt += 1\n            i = A[i] - 1\n        if cnt > 0:\n            ans = ans * cnt // gcd(ans, cnt)\n    print(ans % 1000000007)", "from functools import reduce\n\ndef gcd(a, b):\n    if b > a:\n        return gcd(b, a)\n    elif b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        shuffle = [0] + list(map(int, input().split()))\n        visited = [False] * (n + 1)\n        cycles = []\n        for x in range(1, n + 1):\n            if not visited[x]:\n                cycle = 0\n                while not visited[x]:\n                    cycle += 1\n                    visited[x] = True\n                    x = shuffle[x]\n                cycles.append(cycle)\n        print(reduce(lambda x, y: x * y // gcd(x, y), cycles) % 1000000007)\nmain()", "import fractions\nimport math\n\ndef gcd(a, b):\n    return fractions.gcd(a, b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nr = int(input(''))\nfor g in range(r):\n    MOD = pow(10, 9) + 7\n    x = int(input(''))\n    y = input('').split(' ')\n    y = [int(x) for x in y]\n    dict = {}\n    visited = {}\n    for t in range(len(y)):\n        dict[t + 1] = y[t]\n    ans = 1\n    for r in range(1, x + 1):\n        if r not in visited:\n            visited[r] = 1\n            k = r\n            xx = 0\n            length = 0\n            while k != r or xx == 0:\n                xx = 1\n                k = dict[k]\n                visited[k] = 1\n                length += 1\n            ans = lcm(ans, length)\n    print(int(ans % MOD))", "import fractions\nimport math\n\ndef gcd(a, b):\n    return fractions.gcd(a, b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nr = int(input(''))\nfor g in range(r):\n    MOD = pow(10, 9) + 7\n    x = int(input(''))\n    y = input('').split(' ')\n    y = [int(x) for x in y]\n    dict = {}\n    visited = {}\n    for t in range(len(y)):\n        dict[y[t]] = t + 1\n    ans = 1\n    for r in range(1, x + 1):\n        if r not in visited:\n            visited[r] = 1\n            k = r\n            xx = 0\n            length = 0\n            while k != r or xx == 0:\n                xx = 1\n                k = dict[k]\n                visited[k] = 1\n                length += 1\n            ans = lcm(ans, length)\n    print(int(ans % MOD))", "def gcd(a, b):\n    x = min(a, b)\n    y = max(a, b)\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef lcm(x, y):\n    lcm = x * y // gcd(x, y)\n    return lcm\n\ndef main():\n    t = int(input())\n    for test in range(t):\n        n = int(input())\n        arr = list(map(int, input().split(' ')))\n        for i in range(n):\n            arr[i] -= 1\n        done = [0] * n\n        res = 1\n        for i in range(n):\n            if done[i] != 1:\n                j = i\n                done[j] = 1\n                cycle = 1\n                j = arr[j]\n                while j != i:\n                    done[j] = 1\n                    cycle += 1\n                    j = arr[j]\n            res = lcm(res, cycle)\n        print(res % 1000000007)\nmain()"]