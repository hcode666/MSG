["for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    i = 0\n    while i < n - 1 and a[i] < a[i + 1]:\n        i += 1\n    j = n - 1\n    while j > 0 and a[j - 1] < a[j]:\n        j -= 1\n    if i == n - 1:\n        assert j == 0\n        print(n * (n + 1) // 2 - 1)\n        continue\n    assert i < j\n    tot = n - j\n    for k in range(0, i + 1):\n        while j < n and a[j] <= a[k]:\n            j = j + 1\n        tot += n + 1 - j\n    print(tot)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    i = 0\n    while i < n - 1 and a[i] < a[i + 1]:\n        i += 1\n    j = n - 1\n    while j > 0 and a[j - 1] < a[j]:\n        j -= 1\n    if i == n - 1:\n        assert j == 0\n        print(n * (n + 1) // 2 - 1)\n        continue\n    assert i < j\n    tot = n - j\n    for k in range(0, i + 1):\n        while j < n and a[j] <= a[k]:\n            j = j + 1\n        tot += n + 1 - j\n    print(tot)", "import bisect\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    Arr = [0] * N\n    Arr[-1] = N - 1\n    z = 1\n    for i in range(N - 2, -1, -1):\n        if A[i] < A[i + 1]:\n            Arr[i] = Arr[i + 1]\n            if Arr[i] == N - 1:\n                z += 1\n        else:\n            Arr[i] = i\n    ans = Arr[0] + 1 + z\n    if Arr[0] == N - 1:\n        ans -= 2\n    bi = [A[i] for i in range(N) if Arr[i] == N - 1]\n    for i in range(Arr[0] == N - 1, N - (Arr[0] == N - 1)):\n        if Arr[i] == Arr[0]:\n            ans += z - bisect.bisect_right(bi, A[i])\n        else:\n            break\n    print(ans)", "import bisect\n\ndef pre(a):\n    for p in range(n - 1):\n        if a[p] >= a[p + 1]:\n            return p\n    return n - 1\n\ndef suf(a):\n    for s in range(1, n):\n        if a[n - s] <= a[n - s - 1]:\n            return n - s\n    return 0\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = pre(a)\n    s = suf(a)\n    b = a[s:n]\n    count = 0\n    for i in range(p + 1):\n        k = bisect.bisect(b, a[i])\n        k += s\n        count += n - k + 1\n    if s == 0:\n        print(n * (n + 1) // 2 - 1)\n    else:\n        print(count + n - s)", "import bisect\n\ndef pre(a):\n    for p in range(n - 1):\n        if a[p] >= a[p + 1]:\n            return p\n    return n - 1\n\ndef suf(a):\n    for s in range(1, n):\n        if a[n - s] <= a[n - s - 1]:\n            return n - s\n    return 0\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = pre(a)\n    s = suf(a)\n    b = a[s:n]\n    count = 0\n    for i in range(p + 1):\n        k = bisect.bisect(b, a[i])\n        k += s\n        count += n - k + 1\n    if s == 0:\n        print(n * (n + 1) // 2 - 1)\n    else:\n        print(count + n - s)", "import bisect\n\ndef pre(a):\n    for p in range(n - 1):\n        if a[p] >= a[p + 1]:\n            return p\n    return n - 1\n\ndef suf(a):\n    for s in range(1, n):\n        if a[n - s] <= a[n - s - 1]:\n            return n - s\n    return 0\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = pre(a)\n    s = suf(a)\n    b = a[s:n]\n    count = 0\n    for i in range(p + 1):\n        k = bisect.bisect(b, a[i])\n        k += s\n        count += n - k + 1\n    if s == 0:\n        print(n * (n + 1) // 2 - 1)\n    else:\n        print(count + n - s)", "def dels(a, n):\n    fin = []\n    fin1 = []\n    for i in range(n):\n        if a[i] < a[i + 1]:\n            fin1.append(i)\n        else:\n            fin1.append(i)\n            fin.append(fin1)\n            fin1 = []\n    if len(fin) == 1:\n        return n * (n + 1) // 2 - 1\n    lptr = len(fin[0])\n    rptr = fin[-1][0]\n    temp = n\n    res = 0\n    res += lptr + (n - rptr)\n    while temp >= rptr + 1 and lptr > 0:\n        if a[lptr - 1] >= a[temp - 1]:\n            lptr -= 1\n            continue\n        res += lptr\n        temp -= 1\n    return res\nt = int(input())\nf = -(10 ** 9 + 1)\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.append(f)\n    print(dels(a, n))", "import bisect\n\ndef pre(a):\n    for p in range(n - 1):\n        if a[p] >= a[p + 1]:\n            return p\n    return n - 1\n\ndef suf(a):\n    for s in range(1, n):\n        if a[n - s] <= a[n - s - 1]:\n            return n - s\n    return 0\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = pre(a)\n    s = suf(a)\n    b = a[s:n]\n    count = 0\n    for i in range(p + 1):\n        k = bisect.bisect(b, a[i])\n        k += s\n        count += n - k + 1\n    if s == 0:\n        print(n * (n + 1) // 2 - 1)\n    else:\n        print(count + n - s)", "import bisect\n\ndef pre(a):\n    for p in range(n - 1):\n        if a[p] >= a[p + 1]:\n            return p\n    return n - 1\n\ndef suf(a):\n    for s in range(1, n):\n        if a[n - s] <= a[n - s - 1]:\n            return n - s\n    return 0\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = pre(a)\n    s = suf(a)\n    b = a[s:n]\n    count = 0\n    for i in range(p + 1):\n        k = bisect.bisect(b, a[i])\n        k += s\n        count += n - k + 1\n    if s == 0:\n        print(n * (n + 1) // 2 - 1)\n    else:\n        print(count + n - s)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    first_index = 0\n    last_index = 0\n    curr_index = 0\n    indexes = [[0, 0]]\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            last_index = i\n        else:\n            indexes[curr_index][1] = last_index\n            curr_index += 1\n            last_index += 1\n            first_index = last_index\n            indexes.append([first_index, last_index])\n    indexes[curr_index][1] = last_index\n    res = 0\n    if len(indexes) > 1:\n        res = indexes[0][1] - indexes[0][0] + 1\n        res += indexes[-1][1] - indexes[-1][0] + 1\n        first_range_last_index = indexes[0][1]\n        last_range_first_index = indexes[-1][0]\n        n -= 1\n        while first_range_last_index >= 0 and n >= last_range_first_index:\n            if a[n] <= a[first_range_last_index]:\n                res += len(a) - (n + 1)\n                first_range_last_index -= 1\n            else:\n                n -= 1\n        if first_range_last_index >= 0:\n            res += (first_range_last_index + 1) * (len(a) - (n + 1))\n    else:\n        res = n * (n + 1) // 2 - 1\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    e = n - 1\n    for i in range(n - 2, -1, -1):\n        if a[i + 1] > a[i]:\n            e = i\n        else:\n            break\n    cnt = 0\n    for i in range(n):\n        if i - 2 >= 0 and a[i - 2] >= a[i - 1]:\n            break\n        if e <= i:\n            e = i + 1\n        while e < n and i - 1 >= 0 and (a[i - 1] >= a[e]):\n            e += 1\n        cnt += n - e + 1\n    print(cnt - 1)", "def dels(a, n):\n    fin = []\n    fin1 = []\n    for i in range(n):\n        if a[i] < a[i + 1]:\n            fin1.append(i)\n        else:\n            fin1.append(i)\n            fin.append(fin1)\n            fin1 = []\n    if len(fin) == 1:\n        return n * (n + 1) // 2 - 1\n    lptr = len(fin[0])\n    rptr = fin[-1][0]\n    temp = n\n    res = 0\n    res += lptr + (n - rptr)\n    while temp >= rptr + 1 and lptr > 0:\n        if a[lptr - 1] >= a[temp - 1]:\n            lptr -= 1\n            continue\n        res += lptr\n        temp -= 1\n    return res\nt = int(input())\nf = -(10 ** 9 + 1)\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.append(f)\n    print(dels(a, n))", "for _ in range(int(input())):\n    n = int(input())\n    seq = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n        continue\n    (pref, suff) = (0, n - 1)\n    for i in range(1, n):\n        if seq[i] > seq[i - 1]:\n            pref = i\n        else:\n            break\n    for i in range(n - 2, -1, -1):\n        if seq[i] < seq[i + 1]:\n            suff = i\n        else:\n            break\n    (l, r, ans) = (0, suff, 0)\n    while r < n and l <= pref:\n        if seq[l] < seq[r]:\n            ans += n - r\n            l += 1\n        else:\n            r += 1\n    if suff < pref:\n        print(n * (n + 1) // 2 - 1)\n        continue\n    print(ans + (pref + 1) + (n - suff))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    data = list(map(int, input().strip().split()))\n    prefix = [False] * n\n    suffix = [False] * n\n    prefix[0] = True\n    for i in range(1, n):\n        if data[i] > data[i - 1]:\n            prefix[i] = True\n        else:\n            break\n    suffix[n - 1] = True\n    for i in range(n - 2, -1, -1):\n        if data[i] < data[i + 1]:\n            suffix[i] = True\n        else:\n            break\n    ans = 0\n    if prefix.count(True) == n:\n        ans = n * (n - 1) / 2 + (n - 1)\n    else:\n        for i in range(n):\n            if prefix[i]:\n                low = i\n                high = n\n                while high - low > 1:\n                    mid = (low + high) // 2\n                    if suffix[mid] and data[i] < data[mid]:\n                        high = mid\n                    else:\n                        low = mid\n                ans += n - high\n            else:\n                break\n        ans += suffix.count(True)\n        ans += prefix.count(True)\n    print(int(ans))", "def bin(arr, l, r, val, n):\n    ans = n\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] <= val:\n            l = mid + 1\n        else:\n            ans = mid\n            r = mid - 1\n    return ans\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().strip().split(' ')))\n    pre = []\n    suff = [0] * n\n    pre.append(1)\n    for i in range(1, n):\n        if arr[i] > arr[i - 1] and pre[i - 1] == 1:\n            pre.append(1)\n        else:\n            pre.append(0)\n    flag = 0\n    temp = 0\n    for i in range(n - 1, -1, -1):\n        if i == n - 1:\n            suff[i] = 1\n        elif arr[i] < arr[i + 1] and suff[i + 1] == 1:\n            suff[i] = 1\n        elif flag == 0:\n            temp = i + 1\n            suff[i] = 0\n            flag = 1\n        else:\n            suff[i] = 0\n    count = 0\n    y = n\n    for i in range(n):\n        y = n\n        if pre[i] == 1:\n            count += 1\n            if temp > i + 1:\n                y = bin(arr, temp, n - 1, arr[i], n)\n            elif i + 2 < n:\n                y = bin(arr, i + 2, n - 1, arr[i], n)\n            count += n - y\n    count += n - temp\n    if pre[temp] == 1:\n        count -= 2\n    print(count)\n    t -= 1", "T = int(input())\nwhile T > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    prefix = [True for k in range(n)]\n    suffix = [True for k in range(n)]\n    for i in range(1, n):\n        prefix[i] = prefix[i - 1] and a[i] > a[i - 1]\n    for i in range(n - 2, -1, -1):\n        suffix[i] = suffix[i + 1] and a[i] < a[i + 1]\n    lo = 0\n    hi = n - 1\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if suffix[mid]:\n            hi = mid\n        else:\n            lo = mid + 1\n    ans = n - lo\n    for i in range(n - 1):\n        if prefix[i]:\n            lo = i + 1\n            hi = n - 1\n            while lo < hi:\n                mid = (lo + hi) // 2\n                if suffix[mid] and a[mid] > a[i]:\n                    hi = mid\n                else:\n                    lo = mid + 1\n            ans += n - lo + 1\n            if lo == i + 1 or (lo == n - 1 and a[lo] < a[i]):\n                ans -= 1\n        else:\n            break\n    if prefix[-1]:\n        ans -= 1\n    print(ans)\n    T -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    start = -1\n    for i in range(len(a) - 1):\n        if a[i] >= a[i + 1]:\n            start = i\n            break\n    end = -1\n    for i in range(len(a) - 1, 0, -1):\n        if a[i] <= a[i - 1]:\n            end = i\n            break\n    if start == -1:\n        ans = n * (n + 1) // 2 - 1\n        print(ans)\n    else:\n        j = len(a) - 1\n        k = 0\n        c = 1\n        for i in range(start, -1, -1):\n            while a[j] > a[i] and j >= end:\n                j -= 1\n                c += 1\n            k += c\n        k += len(a) - end\n        print(k)", "import bisect\nfor t in range(int(input())):\n    n = int(input())\n    arr = [int(a) for a in input().split()]\n    prifix = list()\n    prefix = [False for _ in range(n)]\n    for i in range(0, n):\n        if i == 0:\n            prefix[i] = True\n        elif arr[i] > arr[i - 1]:\n            prefix[i] = True\n        else:\n            break\n    sufix = list()\n    sufix = [False for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        if i == n - 1:\n            sufix[i] = True\n        elif arr[i] < arr[i + 1]:\n            sufix[i] = True\n        else:\n            break\n    left = 0\n    right = 0\n    for i in range(n):\n        if prefix[i] == True:\n            left = i\n    for i in range(n - 1, -1, -1):\n        if sufix[i] == True:\n            right = i\n    ans = 0\n    if right == 0 and left == n - 1:\n        ans = n * (n + 1) // 2 - 1\n    else:\n        i = 0\n        while prefix[i] == True:\n            if arr[i] > arr[n - 1]:\n                ans += 1\n            else:\n                k = bisect.bisect_left(arr, arr[i], right, n - 1)\n                ans += n - k + 1\n                if arr[k] == arr[i]:\n                    ans -= 1\n            i += 1\n        ans += n - right\n    print(ans)", "T = int(input())\n\ndef bSearch(A, suff, k, i, j):\n    if i >= len(A):\n        return\n    if i == j:\n        if suff[i] == False or A[j] <= A[k]:\n            return\n        return i\n    mid = (i + j) // 2\n    if mid <= k:\n        return bSearch(A, suff, k, mid + 1, j)\n    elif A[mid] <= A[k] or suff[mid] == False:\n        return bSearch(A, suff, k, mid + 1, j)\n    else:\n        return bSearch(A, suff, k, i, mid)\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    pref = [False for _ in range(N)]\n    suff = [False for _ in range(N)]\n    pref[0] = True\n    suff[-1] = True\n    for i in range(1, N):\n        if A[i] > A[i - 1]:\n            pref[i] = True\n        else:\n            break\n    for i in reversed(range(N - 1)):\n        if A[i] < A[i + 1]:\n            suff[i] = True\n        else:\n            break\n    count = 0\n    for i in range(N):\n        if pref[i] == True:\n            j = bSearch(A, suff, i, i + 1, N - 1)\n            if j == None:\n                if i < N - 1:\n                    count += 1\n            elif j == i + 1:\n                count += N - j\n            else:\n                count += N - j + 1\n    for i in range(1, N):\n        if suff[i] == True:\n            count += 1\n    print(count)", "def bin_search1(arr, x):\n    s = 0\n    e = len(arr) - 1\n    while s <= e:\n        m = (s + e) // 2\n        if arr[m] > x:\n            e = m - 1\n        else:\n            s = m + 1\n    return s\n\ndef bin_search2(arr, x):\n    s = 0\n    e = len(arr) - 1\n    while s <= e:\n        m = (s + e) // 2\n        if arr[m] >= x:\n            e = m - 1\n        else:\n            s = m + 1\n    return s\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(j) for j in input().split()]\n    var = 0\n    flag = 0\n    for i in range(n - 1):\n        if arr[i + 1] <= arr[i]:\n            var = 1\n            ind1 = i\n            break\n    if var == 0:\n        print(n * (n + 1) // 2 - 1)\n        continue\n    for i in range(n - 1, 0, -1):\n        if arr[i - 1] >= arr[i]:\n            ind2 = i\n            break\n    arr1 = arr[:ind1 + 1]\n    arr2 = arr[ind2:]\n    count = len(arr1) + len(arr2)\n    for i in range(len(arr1)):\n        x = bin_search1(arr2, arr1[i])\n        count += len(arr2) + 1 - x\n    for i in range(len(arr2)):\n        x = bin_search1(arr1, arr2[i])\n        count += x + 1\n    print(count // 2)", "def bin_search1(arr, x):\n    s = 0\n    e = len(arr) - 1\n    while s <= e:\n        m = (s + e) // 2\n        if arr[m] > x:\n            e = m - 1\n        else:\n            s = m + 1\n    return s\n\ndef bin_search2(arr, x):\n    s = 0\n    e = len(arr) - 1\n    while s <= e:\n        m = (s + e) // 2\n        if arr[m] >= x:\n            e = m - 1\n        else:\n            s = m + 1\n    return s\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(j) for j in input().split()]\n    var = 0\n    flag = 0\n    for i in range(n - 1):\n        if arr[i + 1] <= arr[i]:\n            var = 1\n            ind1 = i\n            break\n    if var == 0:\n        print(n * (n + 1) // 2 - 1)\n        continue\n    for i in range(n - 1, 0, -1):\n        if arr[i - 1] >= arr[i]:\n            ind2 = i\n            break\n    arr1 = arr[:ind1 + 1]\n    arr2 = arr[ind2:]\n    count = len(arr1) + len(arr2)\n    for i in range(len(arr1)):\n        x = bin_search1(arr2, arr1[i])\n        count += len(arr2) + 1 - x\n    for i in range(len(arr2)):\n        x = bin_search2(arr1, arr2[i])\n        count += x + 1\n    print(count // 2)", "from sys import stdin\ninput = stdin.readline\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if all((a[i] < a[i + 1] for i in range(n - 1))):\n        print(n * (n + 1) // 2 - 1)\n        continue\n    for i in range(1, n):\n        if a[i - 1] >= a[i]:\n            arr1 = a[:i]\n            break\n    for j in range(n - 1, 0, -1):\n        if a[j - 1] >= a[j]:\n            arr2 = a[j:]\n            break\n    ans = len(arr1) + len(arr2)\n    le = len(arr2)\n    x = 0\n    for i in arr1:\n        while x < len(arr2) and arr2[x] <= i:\n            x += 1\n            le -= 1\n        if x == len(arr2):\n            break\n        ans += le\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    front = [0 for i in range(n)]\n    back = [n - 1 for i in range(n)]\n    for i in range(1, n):\n        if front[i - 1] == i - 1 and arr[i] > arr[i - 1]:\n            front[i] = i\n        else:\n            front[i] = front[i - 1]\n    for i in range(n - 2, -1, -1):\n        if back[i + 1] == i + 1 and arr[i] < arr[i + 1]:\n            back[i] = i\n        else:\n            back[i] = back[i + 1]\n    ans = n - back[0]\n    for i in range(1, n):\n        if front[i - 1] == i - 1:\n            ans += 1\n            key = arr[i - 1]\n            low = back[i]\n            high = n - 1\n            if arr[high] > key:\n                flag = False\n                while low < high:\n                    mid = (low + high) // 2\n                    if arr[mid] > key:\n                        high = mid\n                    else:\n                        low = mid\n                    if low + 1 == high:\n                        if flag:\n                            high -= 1\n                        flag = True\n                mid = (low + high) // 2\n                if arr[mid] <= key:\n                    mid += 1\n                ans += n - mid\n    if back[0] == 0:\n        ans -= n\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    front = [0 for i in range(n)]\n    back = [n - 1 for i in range(n)]\n    for i in range(1, n):\n        if front[i - 1] == i - 1 and arr[i] > arr[i - 1]:\n            front[i] = i\n        else:\n            front[i] = front[i - 1]\n    for i in range(n - 2, -1, -1):\n        if back[i + 1] == i + 1 and arr[i] < arr[i + 1]:\n            back[i] = i\n        else:\n            back[i] = back[i + 1]\n    if back[0] == 0:\n        print(2 * n - 2 + (n - 2) * (n - 1) // 2)\n    else:\n        ans = n - back[0]\n        for i in range(1, n):\n            if front[i - 1] == i - 1:\n                ans += 1\n                key = arr[i - 1]\n                low = back[i]\n                high = n - 1\n                if arr[high] > key:\n                    flag = False\n                    while low < high:\n                        mid = (low + high) // 2\n                        if arr[mid] > key:\n                            high = mid\n                        else:\n                            low = mid\n                        if low + 1 == high:\n                            if flag:\n                                high -= 1\n                            flag = True\n                    mid = (low + high) // 2\n                    if arr[mid] <= key:\n                        mid += 1\n                    ans += n - mid\n        print(ans)", "t = int(input())\ni = 0\nwhile i < t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    j = 1\n    leftend = 0\n    while j < n and a[j] > a[j - 1]:\n        leftend += 1\n        j += 1\n    rightend = n - 1\n    j = n - 2\n    while j >= 0 and a[j] < a[j + 1]:\n        j -= 1\n        rightend -= 1\n    if n == 1:\n        print(0)\n    elif rightend == 0 and leftend == n - 1:\n        print(int(n * (n - 1) / 2 + n - 1))\n    else:\n        k = 0\n        s = 0\n        while k <= leftend:\n            l = rightend\n            posi = 0\n            notFound = True\n            while l < n and notFound:\n                if a[l] > a[k]:\n                    posi = l\n                    notFound = False\n                l += 1\n            if notFound:\n                s += n - l + 1\n            if not notFound:\n                s += n - posi + 1\n            k += 1\n        s += n - rightend\n        print(s)\n    i += 1", "for _t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if all((a[i] < a[i + 1] for i in range(n - 1))):\n        print(n * (n + 1) // 2 - 1)\n        continue\n    for i in range(1, n):\n        if a[i - 1] >= a[i]:\n            sorted_beg = a[:i]\n            break\n    for i in range(n - 1, 0, -1):\n        if a[i - 1] >= a[i]:\n            sorted_end = a[i:]\n            break\n    numways = len(sorted_beg) + len(sorted_end)\n    le = len(sorted_end)\n    for beg in sorted_beg:\n        try:\n            while sorted_end[0] <= beg:\n                del sorted_end[0]\n                le -= 1\n        except IndexError:\n            break\n        numways += le\n    print(numways)", "import io, sys, atexit, os\nimport math as ma\nfrom sys import exit\nfrom decimal import Decimal as dec\nfrom itertools import permutations\nfrom itertools import combinations\n\ndef li():\n    return list(map(int, input().split()))\n\ndef num():\n    return map(int, input().split())\n\ndef nu():\n    return int(input())\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef lcm(x, y):\n    gg = find_gcd(x, y)\n    return x * y // gg\nmm = 1000000007\nyp = 0\n\ndef solve():\n    t = nu()\n    for tt in range(t):\n        n = nu()\n        a = li()\n        fr = [0] * n\n        back = [0] * n\n        fr[0] = 1\n        for i in range(1, n):\n            if a[i] <= a[i - 1]:\n                break\n            fr[i] = 1\n        back[n - 1] = 1\n        for i in range(n - 2, -1, -1):\n            if a[i] >= a[i + 1]:\n                break\n            back[i] = 1\n        if back[0] == 1:\n            print(2 * n - 2 + (n - 2) * (n - 1) // 2)\n        else:\n            bk = -1\n            ans = 0\n            for i in range(n - 1, -1, -1):\n                if back[i] == 1:\n                    bk = i\n            fg = -1\n            op = bk\n            ans += n - bk\n            for i in range(n):\n                if fr[i] == 0:\n                    fg = i - 1\n                    break\n                while bk < n and a[i] >= a[bk]:\n                    bk += 1\n                if bk == n:\n                    continue\n                ans += n - bk\n            ans += fg + 1\n            print(ans)\nsolve()", "def bsearch(left, right, val, A):\n    mid = (left + right) // 2\n    if left == right:\n        if A[left] <= val:\n            return 10 ** 9 + 7\n        else:\n            return left\n    elif A[mid] <= val:\n        return bsearch(mid + 1, right, val, A)\n    else:\n        return min(bsearch(left, mid, val, A), mid)\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(s) for s in input().split()]\n    (i, j) = (1, n - 2)\n    while i < n and a[i] > a[i - 1]:\n        i += 1\n    i -= 1\n    while j >= 0 and a[j] < a[j + 1]:\n        j -= 1\n    j += 1\n    if i < j:\n        ans = i + 1 + n - j\n        for i1 in range(i + 1):\n            i2 = bsearch(j, n - 1, a[i1], a)\n            if i2 != 10 ** 9 + 7:\n                ans += n - i2\n        print(ans)\n    else:\n        print(n * (n + 1) // 2 - 1)", "import sys, bisect\nsys.setrecursionlimit(10 ** 9)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    it = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n        continue\n    if n == 2:\n        print(2)\n        continue\n    if n > 2:\n        ss = [[0]]\n        for i in range(1, n):\n            if it[i] > it[i - 1]:\n                ss[-1].append(i)\n            else:\n                ss.append([i])\n        if len(ss) == 1:\n            print(n * (n - 1) // 2 + n - 1)\n            continue\n        tot = 0\n        ind = len(ss[0]) - 1\n        ind2 = len(ss[-1]) - 1\n        aa = ss[0]\n        bb = ss[-1]\n        tot = 0\n        while ind >= 0 and ind2 >= 0:\n            if it[bb[ind2]] > it[aa[ind]]:\n                tot += ind + 1\n                ind2 -= 1\n            else:\n                ind -= 1\n        tot += len(aa)\n        tot += len(bb)\n        print(tot)"]