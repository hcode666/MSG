["from typing import List\nfrom collections import Counter\n\ndef palin_perm(s: str) -> List[int]:\n    n = len(s)\n    counts = Counter(s)\n    odds = 0\n    for count in counts.values():\n        if count & 1:\n            odds += 1\n    if n & 1 and odds > 1 or (not n & 1 and odds > 0):\n        return [-1]\n    inds = {i: [] for i in s}\n    for i in range(n):\n        inds[s[i]].append(i + 1)\n    res = [-1] * n\n    if n & 1:\n        for (key, val) in counts.items():\n            if val & 1:\n                let = key\n                poses = inds[key]\n                del inds[key]\n        i = 0\n        for pos in inds.values():\n            while pos:\n                res[i] = pos.pop()\n                res[n - i - 1] = pos.pop()\n                i += 1\n        for x in poses:\n            res[i] = x\n            i += 1\n    else:\n        i = 0\n        for pos in inds.values():\n            while pos:\n                res[i] = pos.pop()\n                res[n - i - 1] = pos.pop()\n                i += 1\n    return res\nfor _ in range(int(input())):\n    s = input()\n    print(*palin_perm(s))", "for _ in range(int(input())):\n    srng = input()\n    srli = list(srng)\n    n = len(srli)\n    lst = list()\n    odd = 0\n    oddli = []\n    dct = {}\n    psbl = True\n    for i in range(n):\n        if srli[i] in dct.keys():\n            dct[srli[i]].append(i + 1)\n        else:\n            dct[srli[i]] = [i + 1]\n    for (key, value) in dct.items():\n        if len(value) % 2 == 0:\n            md = len(lst) // 2\n            lst = lst[:md] + value + lst[md:]\n        else:\n            odd += 1\n            oddli = value\n            if odd > 1:\n                psbl = False\n                break\n    if psbl:\n        if odd == 0:\n            print(*lst)\n        else:\n            md = len(lst) // 2\n            lst = lst[:md] + oddli + lst[md:]\n            print(*lst)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    srng = input()\n    srli = list(srng)\n    n = len(srli)\n    lst = list()\n    odd = 0\n    oddli = []\n    dct = {}\n    psbl = True\n    for i in range(n):\n        if srli[i] in dct.keys():\n            dct[srli[i]].append(i + 1)\n        else:\n            dct[srli[i]] = [i + 1]\n    for (key, value) in dct.items():\n        if len(value) % 2 == 0:\n            md = len(lst) // 2\n            lst = lst[:md] + value + lst[md:]\n        else:\n            odd += 1\n            oddli = value\n            if odd > 1:\n                psbl = False\n                break\n    if psbl:\n        if odd == 0:\n            print(*lst)\n        else:\n            md = len(lst) // 2\n            lst = lst[:md] + oddli + lst[md:]\n            print(*lst)\n    else:\n        print(-1)", "for z in range(int(input())):\n    s = input()\n    n = len(s)\n    d = {i: [] for i in range(26)}\n    for i in range(len(s)):\n        d[ord(s[i]) - 97].append(i)\n    j = -1\n    k = 0\n    for x in d.keys():\n        if len(d[x]) % 2 != 0:\n            j = x\n            k += 1\n    if k > 1:\n        print(-1)\n        continue\n    l = 0\n    r = n - 1\n    b = [0] * n\n    if k == 1:\n        b[n // 2] = str(1 + d[j][0])\n        d[j].pop(0)\n    k = 0\n    while l < r:\n        for i in range(0, len(d[k]) - 1, 2):\n            b[l] = str(1 + d[k][i])\n            b[r] = str(1 + d[k][i + 1])\n            l += 1\n            r -= 1\n            if l >= r:\n                break\n        k += 1\n    print(' '.join(b))", "for z in range(int(input())):\n    s = input()\n    n = len(s)\n    d = {i: [] for i in range(26)}\n    for i in range(len(s)):\n        d[ord(s[i]) - 97].append(i)\n    j = -1\n    k = 0\n    for x in d.keys():\n        if len(d[x]) % 2 != 0:\n            j = x\n            k += 1\n    if k > 1:\n        print(-1)\n        continue\n    l = 0\n    r = n - 1\n    b = [0] * n\n    if k == 1:\n        b[n // 2] = str(1 + d[j][0])\n        d[j].pop(0)\n    k = 0\n    while l < r:\n        for i in range(0, len(d[k]) - 1, 2):\n            b[l] = str(1 + d[k][i])\n            b[r] = str(1 + d[k][i + 1])\n            l += 1\n            r -= 1\n            if l >= r:\n                break\n        k += 1\n    print(' '.join(b))", "for z in range(int(input())):\n    s = input()\n    n = len(s)\n    d = {i: [] for i in range(26)}\n    for i in range(len(s)):\n        d[ord(s[i]) - 97].append(i)\n    j = -1\n    k = 0\n    for x in d.keys():\n        if len(d[x]) % 2 != 0:\n            j = x\n            k += 1\n    if k > 1:\n        print(-1)\n        continue\n    l = 0\n    r = n - 1\n    b = [0] * n\n    if k == 1:\n        b[n // 2] = str(1 + d[j][0])\n        d[j].pop(0)\n    k = 0\n    while l < r:\n        for i in range(0, len(d[k]) - 1, 2):\n            b[l] = str(1 + d[k][i])\n            b[r] = str(1 + d[k][i + 1])\n            l += 1\n            r -= 1\n            if l >= r:\n                break\n        k += 1\n    print(' '.join(b))", "n = int(input())\nfor p in range(n):\n    s = input()\n    d = {}\n    for i in range(len(s)):\n        lst = []\n        if s[i] in d:\n            lst = d[s[i]]\n            lst.append(i)\n        else:\n            lst = [i]\n            d.update({s[i]: lst})\n    ans = [0] * len(s)\n    i = 0\n    j = len(s) - 1\n    count_o = 0\n    count_e = 0\n    for i in d.keys():\n        if len(d[i]) % 2 == 0:\n            count_e += 1\n        else:\n            count_o += 1\n    if count_o > 1:\n        print(-1)\n    else:\n        i = 0\n        j = len(s) - 1\n        for l in range(len(s)):\n            lst = d[s[l]]\n            if len(lst) % 2 == 0:\n                k = 0\n                while k < len(lst):\n                    ans[i] = lst[k] + 1\n                    k += 1\n                    ans[j] = lst[k] + 1\n                    k += 1\n                    i += 1\n                    j -= 1\n                lst = []\n                d[s[l]] = lst\n            else:\n                k = 1\n                while k < len(lst):\n                    ans[i] = lst[k - 1] + 1\n                    k += 1\n                    ans[j] = lst[k - 1] + 1\n                    k += 1\n                    i += 1\n                    j -= 1\n                ans[len(s) // 2] = lst[len(lst) - 1] + 1\n                lst = []\n                d[s[l]] = lst\n        print(*ans)", "n = int(input())\nfor p in range(n):\n    s = input()\n    d = {}\n    for i in range(len(s)):\n        lst = []\n        if s[i] in d:\n            lst = d[s[i]]\n            lst.append(i)\n        else:\n            lst = [i]\n            d.update({s[i]: lst})\n    ans = [0] * len(s)\n    i = 0\n    j = len(s) - 1\n    count_o = 0\n    count_e = 0\n    for i in d.keys():\n        if len(d[i]) % 2 == 0:\n            count_e += 1\n        else:\n            count_o += 1\n    if count_o > 1:\n        print(-1)\n    else:\n        i = 0\n        j = len(s) - 1\n        for l in range(len(s)):\n            lst = d[s[l]]\n            if len(lst) % 2 == 0:\n                k = 0\n                while k < len(lst):\n                    ans[i] = lst[k] + 1\n                    k += 1\n                    ans[j] = lst[k] + 1\n                    k += 1\n                    i += 1\n                    j -= 1\n                lst = []\n                d[s[l]] = lst\n            else:\n                k = 1\n                while k < len(lst):\n                    ans[i] = lst[k - 1] + 1\n                    k += 1\n                    ans[j] = lst[k - 1] + 1\n                    k += 1\n                    i += 1\n                    j -= 1\n                ans[len(s) // 2] = lst[len(lst) - 1] + 1\n                lst = []\n                d[s[l]] = lst\n        print(*ans)", "n = int(input())\nfor p in range(n):\n    s = input()\n    d = {}\n    for i in range(len(s)):\n        lst = []\n        if s[i] in d:\n            lst = d[s[i]]\n            lst.append(i)\n        else:\n            lst = [i]\n            d.update({s[i]: lst})\n    ans = [0] * len(s)\n    i = 0\n    j = len(s) - 1\n    count_o = 0\n    count_e = 0\n    for i in d.keys():\n        if len(d[i]) % 2 == 0:\n            count_e += 1\n        else:\n            count_o += 1\n    if count_o > 1:\n        print(-1)\n    else:\n        i = 0\n        j = len(s) - 1\n        for l in range(len(s)):\n            lst = d[s[l]]\n            if len(lst) % 2 == 0:\n                k = 0\n                while k < len(lst):\n                    ans[i] = lst[k] + 1\n                    k += 1\n                    ans[j] = lst[k] + 1\n                    k += 1\n                    i += 1\n                    j -= 1\n                lst = []\n                d[s[l]] = lst\n            else:\n                k = 1\n                while k < len(lst):\n                    ans[i] = lst[k - 1] + 1\n                    k += 1\n                    ans[j] = lst[k - 1] + 1\n                    k += 1\n                    i += 1\n                    j -= 1\n                ans[len(s) // 2] = lst[len(lst) - 1] + 1\n                lst = []\n                d[s[l]] = lst\n        print(*ans)", "from collections import Counter, defaultdict\n\ndef check(c):\n    f = False\n    o = -1\n    for (k, v) in c.items():\n        if v % 2:\n            if f:\n                return False\n            f = True\n            o = k\n    return o\nfor _ in range(int(input())):\n    l = list(input())\n    n = len(l)\n    c = Counter(l)\n    o = check(c)\n    if not o:\n        print(-1)\n    else:\n        d = defaultdict(list)\n        for i in range(n):\n            d[l[i]].append(i)\n        (f, b) = ([], [])\n        for (k, v) in d.items():\n            if k != o:\n                nv = len(v)\n                for i in range(nv // 2):\n                    f.append(v[i] + 1)\n                for i in range(nv // 2, nv):\n                    b.append(v[i] + 1)\n        if o != -1:\n            for i in d[o]:\n                f.append(i + 1)\n        ans = f + b[::-1]\n        print(*ans)", "from collections import Counter, defaultdict\n\ndef check(c):\n    f = False\n    o = -1\n    for (k, v) in c.items():\n        if v % 2:\n            if f:\n                return False\n            f = True\n            o = k\n    return o\nfor _ in range(int(input())):\n    l = list(input())\n    n = len(l)\n    c = Counter(l)\n    o = check(c)\n    if not o:\n        print(-1)\n    else:\n        d = defaultdict(list)\n        for i in range(n):\n            d[l[i]].append(i)\n        (f, b) = ([], [])\n        for (k, v) in d.items():\n            if k != o:\n                nv = len(v)\n                for i in range(nv // 2):\n                    f.append(v[i] + 1)\n                for i in range(nv // 2, nv):\n                    b.append(v[i] + 1)\n        if o != -1:\n            for i in d[o]:\n                f.append(i + 1)\n        ans = f + b[::-1]\n        print(*ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    ip = input()\n    count = [0] * 26\n    mp = defaultdict(list)\n    for i in range(len(ip)):\n        count[ord(ip[i]) - ord('a')] += 1\n        mp[ip[i]].append(i + 1)\n    odd_count = 0\n    for i in range(26):\n        if count[i] % 2 == 1:\n            odd_count += 1\n    if odd_count > 1:\n        print(-1)\n        continue\n    emp = [0] * len(ip)\n    l = 0\n    r = len(emp) - 1\n    startIndex = 0\n    for i in range(26):\n        if count[i] % 2 != 1 and count[i] > 0:\n            currcount = count[i]\n            for j in range(0, currcount, 2):\n                emp[startIndex] = mp[chr(i + ord('a'))][j]\n                emp[len(emp) - startIndex - 1] = mp[chr(i + ord('a'))][j + 1]\n                startIndex += 1\n    for i in range(26):\n        if count[i] % 2 == 1:\n            currcount = count[i]\n            for j in range(currcount):\n                emp[startIndex] = mp[chr(i + ord('a'))][j]\n                startIndex += 1\n    print(*emp)", "def printPalindromicStr(s):\n    d = {}\n    n = 0\n    for i in s:\n        if d.get(i) == None:\n            d[i] = []\n        d[i].append(n)\n        n += 1\n    oddfreq = 0\n    for i in d:\n        if len(d[i]) % 2 != 0:\n            oddfreq += 1\n    if oddfreq > 1:\n        print('-1')\n        return\n    ans = [0 for i in range(n)]\n    si = 0\n    li = n - 1\n    for i in d:\n        l = len(d[i])\n        if l % 2 != 0:\n            ans[n // 2] = d[i][-1]\n            l -= 1\n        for j in range(0, l, 2):\n            ans[si] = d[i][j]\n            ans[li] = d[i][j + 1]\n            si += 1\n            li -= 1\n    for i in ans:\n        print(i + 1, end=' ')\n    print()\n    return\nt = int(input())\nwhile t:\n    t -= 1\n    printPalindromicStr(input())", "def printPalindromicStr(s):\n    d = {}\n    n = 0\n    for i in s:\n        if d.get(i) == None:\n            d[i] = []\n        d[i].append(n)\n        n += 1\n    oddfreq = 0\n    for i in d:\n        if len(d[i]) % 2 != 0:\n            oddfreq += 1\n    if oddfreq > 1:\n        print('-1')\n        return\n    ans = [0 for i in range(n)]\n    si = 0\n    li = n - 1\n    for i in d:\n        l = len(d[i])\n        if l % 2 != 0:\n            ans[n // 2] = d[i][-1]\n            l -= 1\n        for j in range(0, l, 2):\n            ans[si] = d[i][j]\n            ans[li] = d[i][j + 1]\n            si += 1\n            li -= 1\n    for i in ans:\n        print(i + 1, end=' ')\n    print()\n    return\nt = int(input())\nwhile t:\n    t -= 1\n    printPalindromicStr(input())", "from heapq import heapify, heappush, heappop\nfrom cmath import pi\nfrom distutils import extension\nfrom pickle import FALSE\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil\nfrom collections import deque, defaultdict\nfrom tkinter.tix import Tree\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\nfor _ in rg(ii()):\n    s = ip()\n    d = {}\n    for l in range(len(s)):\n        if s[l] in d:\n            d[s[l]].append(l + 1)\n        else:\n            d[s[l]] = [l + 1]\n    odd = False\n    ans = False\n    for k in d:\n        if len(d[k]) % 2 != 0:\n            if odd:\n                ans = True\n                print(-1)\n                break\n            else:\n                odd = not odd\n    res1 = []\n    res2 = []\n    o = []\n    if not ans:\n        for k in d:\n            if len(d[k]) % 2 == 0:\n                while len(d[k]) > 0:\n                    res1.append(d[k].pop())\n                    res2.append(d[k].pop())\n            else:\n                while len(d[k]) > 0:\n                    o.append(d[k].pop())\n        res = res1 + o + res2[::-1]\n        print(*res)", "def makestring(arr, n):\n    dic = {}\n    for i in range(n):\n        if dic.get(arr[i], -1) == -1:\n            dic[arr[i]] = [i + 1]\n        else:\n            dic[arr[i]] = dic[arr[i]] + [i + 1]\n    odd = 0\n    char = False\n    for i in dic:\n        if len(dic[i]) % 2 != 0:\n            odd += 1\n            char = i\n    if odd > 1:\n        return [-1]\n    strg = []\n    if char:\n        strg = dic[char]\n    for i in dic:\n        if i is not char:\n            length = len(dic[i]) // 2\n            strg = dic[i][:length] + strg + dic[i][length:]\n    return strg\nt = int(input())\nfor _ in range(t):\n    arr = input()\n    strg = makestring(arr, len(arr))\n    print(*strg)", "def makedic(arr):\n    dic = {}\n    for i in range(len(arr)):\n        if dic.get(arr[i], -1) == -1:\n            dic[arr[i]] = [i + 1]\n        else:\n            dic[arr[i]] = dic[arr[i]] + [i + 1]\n    return dic\n\ndef check(dic):\n    odd = 0\n    char = True\n    for i in dic:\n        if len(dic[i]) % 2 != 0:\n            odd += 1\n            char = i\n    if odd > 1:\n        char = False\n    return char\n\ndef makestring(char, dic, n):\n    if char == False:\n        return [-1]\n    else:\n        strg = []\n        if char != True:\n            strg = strg + dic[char]\n        for i in dic:\n            if i is not char:\n                length = len(dic[i]) // 2\n                strg = dic[i][:length] + strg + dic[i][length:]\n    return strg\nt = int(input())\nfor _ in range(t):\n    arr = input()\n    dic = makedic(arr)\n    char = check(dic)\n    strg = makestring(char, dic, len(arr))\n    print(*strg)", "def makedic(arr):\n    dic = {}\n    for i in range(len(arr)):\n        if dic.get(arr[i], -1) == -1:\n            dic[arr[i]] = [i + 1]\n        else:\n            dic[arr[i]] = dic[arr[i]] + [i + 1]\n    return dic\n\ndef check(dic):\n    odd = 0\n    char = True\n    for i in dic:\n        if len(dic[i]) % 2 != 0:\n            odd += 1\n            char = i\n    if odd > 1:\n        char = False\n    return char\n\ndef makestring(char, dic, n):\n    if char == False:\n        return -1\n    else:\n        strg = []\n        if char != True:\n            strg = strg + dic[char]\n        for i in dic:\n            if i is not char:\n                length = len(dic[i]) // 2\n                strg = dic[i][:length] + strg + dic[i][length:]\n    return strg\nt = int(input())\nfor _ in range(t):\n    arr = input()\n    dic = makedic(arr)\n    char = check(dic)\n    strg = makestring(char, dic, len(arr))\n    if strg == -1:\n        print(strg)\n    else:\n        print(*strg)", "def makedic(arr):\n    dic = {}\n    for i in range(len(arr)):\n        if dic.get(arr[i], -1) == -1:\n            dic[arr[i]] = [i + 1]\n        else:\n            dic[arr[i]] = dic[arr[i]] + [i + 1]\n    return dic\n\ndef check(dic):\n    odd = 0\n    char = True\n    for i in dic:\n        if len(dic[i]) % 2 != 0:\n            odd += 1\n            char = i\n    if odd > 1:\n        char = False\n    return char\n\ndef makestring(char, dic, n):\n    if char == False:\n        return -1\n    else:\n        strg = []\n        if char != True:\n            strg = strg + dic[char]\n            del dic[char]\n        for i in dic:\n            length = len(dic[i]) // 2\n            strg = dic[i][:length] + strg + dic[i][length:]\n    return strg\nt = int(input())\nfor _ in range(t):\n    arr = input()\n    dic = makedic(arr)\n    char = check(dic)\n    strg = makestring(char, dic, len(arr))\n    if strg == -1:\n        print(strg)\n    else:\n        print(*strg)", "def makedic(arr):\n    dic = {}\n    for i in range(len(arr)):\n        if dic.get(arr[i], -1) == -1:\n            dic[arr[i]] = [i + 1]\n        else:\n            dic[arr[i]] = dic[arr[i]] + [i + 1]\n    return dic\n\ndef check(dic):\n    odd = 0\n    char = True\n    for i in dic:\n        if len(dic[i]) % 2 != 0:\n            odd += 1\n            char = i\n    if odd > 1:\n        char = False\n    return char\n\ndef makestring(char, dic, n):\n    if char == False:\n        return -1\n    else:\n        strg = []\n        if char != True:\n            strg = strg + dic[char]\n            del dic[char]\n        for i in dic:\n            length = len(dic[i]) // 2\n            left = dic[i][:length]\n            right = dic[i][length:]\n            strg = left + strg + right\n    return strg\nt = int(input())\nfor _ in range(t):\n    arr = input()\n    dic = makedic(arr)\n    char = check(dic)\n    strg = makestring(char, dic, len(arr))\n    if strg == -1:\n        print(strg)\n    else:\n        print(*strg)", "import sys\nimport math\nfrom collections import defaultdict, Counter, deque\nfrom bisect import *\nfrom string import ascii_lowercase\nfrom heapq import *\n\ndef readInts():\n    x = list(map(int, sys.stdin.readline().rstrip().split()))\n    return x[0] if len(x) == 1 else x\n\ndef readList(type=int):\n    x = sys.stdin.readline()\n    x = list(map(type, x.rstrip('\\n\\r').split()))\n    return x\n\ndef readStr():\n    x = sys.stdin.readline().rstrip('\\r\\n')\n    return x\nwrite = sys.stdout.write\nread = sys.stdin.readline\n\ndef dist(x1, x2, y1, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\ndef mergeSort(arr, check=lambda a, b: a < b, reverse=False):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        mergeSort(L, check, reverse)\n        mergeSort(R, check, reverse)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if check(L[i], R[j]):\n                if not reverse:\n                    arr[k] = L[i]\n                    i += 1\n                else:\n                    arr[k] = R[j]\n                    j += 1\n            elif not reverse:\n                arr[k] = R[j]\n                j += 1\n            else:\n                arr[k] = L[i]\n                i += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\ndef maxSum(arr):\n    max_sum = float('-inf')\n    max_cur = 0\n    for num in ar:\n        max_cur = max(max_cur + num, num)\n        if max_cur > max_sum:\n            max_sum = max_cur\n    return max_sum\n\ndef hcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return hcf(b, b % a)\n\ndef get_power(n, m):\n    i = 1\n    p = -1\n    while i <= n:\n        i = i * m\n        p += 1\n    return p\n\ndef fact(n):\n    f = 1\n    for i in range(2, n + 1):\n        f *= i\n    return f\n\ndef find_closest(num, ar):\n    min_d = float('inf')\n    for num2 in ar:\n        d = abs(num2 - num)\n        if d < min_d:\n            min_d = d\n    return min_d\n\ndef check_pal(n):\n    s = str(n)\n    l = len(s)\n    i = 0\n    j = l - 1\n    while i < j:\n        if s[i] != s[j]:\n            return False\n        else:\n            i += 1\n            j -= 1\n    return True\n\ndef solve(t):\n    s = readStr()\n    n = len(s)\n    ind = {}\n    res = ['' for _ in range(n)]\n    for i in range(n):\n        c = s[i]\n        if c in ind:\n            ind[c].append(i + 1)\n        else:\n            ind[c] = [i + 1]\n    flag = False\n    k = 0\n    for char in ind:\n        if len(ind[char]) & 1 and (not len(ind[char]) & 1 or flag):\n            print(-1)\n            return None\n        if not len(ind[char]) & 1:\n            for i in range(0, len(ind[char]), 2):\n                res[k] = ind[char][i]\n                res[n - k - 1] = ind[char][i + 1]\n                k += 1\n        else:\n            for i in range(0, len(ind[char]) - 1, 2):\n                res[k] = ind[char][i]\n                res[n - k - 1] = ind[char][i + 1]\n                k += 1\n            res[n // 2] = ind[char][-1]\n            flag = True\n    print(*res)\n\ndef main():\n    t = 1\n    sys.setrecursionlimit(12000)\n    t = readInts()\n    for i in range(t):\n        solve(i + 1)\nmain()", "def solve(string):\n    counts = [0] * 26\n    ans = [None] * len(string)\n    hashmap = {}\n    odd = 0\n    for i in range(len(string)):\n        if string[i] not in hashmap:\n            hashmap[string[i]] = [i + 1]\n        else:\n            hashmap[string[i]].append(i + 1)\n        counts[ord(string[i]) - ord('a')] += 1\n    for i in range(len(counts)):\n        if counts[i] & 1:\n            odd += 1\n        if odd > 1:\n            return [-1]\n    left = 0\n    right = len(string) - 1\n    for i in hashmap:\n        if len(hashmap[i]) & 1:\n            start_index = len(string) // 2 - len(hashmap[i]) // 2\n            for j in range(len(hashmap[i])):\n                ans[start_index] = hashmap[i][j]\n                start_index += 1\n        else:\n            for j in range(len(hashmap[i]) // 2):\n                ans[left] = hashmap[i][j]\n                ans[right] = hashmap[i][len(hashmap[i]) - 1 - j]\n                left += 1\n                right -= 1\n    return ans\nt = int(input())\nwhile t > 0:\n    strings = input()\n    for i in solve(strings):\n        print(i, end=' ')\n    print('\\n')\n    t -= 1", "def solve(string):\n    counts = [0] * 26\n    ans = [None] * len(string)\n    hashmap = {}\n    odd = 0\n    for i in range(len(string)):\n        if string[i] not in hashmap:\n            hashmap[string[i]] = [i + 1]\n        else:\n            hashmap[string[i]].append(i + 1)\n        counts[ord(string[i]) - ord('a')] += 1\n    for i in range(len(counts)):\n        if counts[i] & 1:\n            odd += 1\n        if odd > 1:\n            return [-1]\n    left = 0\n    right = len(string) - 1\n    for i in hashmap:\n        if len(hashmap[i]) & 1:\n            start_index = len(string) // 2 - len(hashmap[i]) // 2\n            for j in range(len(hashmap[i])):\n                ans[start_index] = hashmap[i][j]\n                start_index += 1\n        else:\n            for j in range(len(hashmap[i]) // 2):\n                ans[left] = hashmap[i][j]\n                ans[right] = hashmap[i][len(hashmap[i]) - 1 - j]\n                left += 1\n                right -= 1\n    return ans\nt = int(input())\nwhile t > 0:\n    strings = input()\n    for i in solve(strings):\n        print(i, end=' ')\n    print('\\n')\n    t -= 1", "def solve(string):\n    counts = [0] * 26\n    ans = [None] * len(string)\n    hashmap = {}\n    odd = 0\n    for i in range(len(string)):\n        if string[i] not in hashmap:\n            hashmap[string[i]] = [i + 1]\n        else:\n            hashmap[string[i]].append(i + 1)\n        counts[ord(string[i]) - ord('a')] += 1\n    for i in range(len(counts)):\n        if counts[i] & 1:\n            odd += 1\n        if odd > 1:\n            return [-1]\n    left = 0\n    right = len(string) - 1\n    for i in hashmap:\n        if len(hashmap[i]) & 1:\n            start_index = len(string) // 2 - len(hashmap[i]) // 2\n            for j in range(len(hashmap[i])):\n                ans[start_index] = hashmap[i][j]\n                start_index += 1\n        else:\n            for j in range(len(hashmap[i]) // 2):\n                ans[left] = hashmap[i][j]\n                ans[right] = hashmap[i][len(hashmap[i]) - 1 - j]\n                left += 1\n                right -= 1\n    return ans\nt = int(input())\nwhile t > 0:\n    strings = input()\n    for i in solve(strings):\n        print(i, end=' ')\n    print('\\n')\n    t -= 1", "t = int(input())\nwhile t > 0:\n    st = input()\n    n = len(st)\n    co = [0] * 27\n    ne = [0] * n\n    ind = [0] * n\n    ma = [0] * n\n    for i in range(n):\n        x = ord(st[i]) - 97\n        co[x] += 1\n    c1 = 0\n    c2 = 0\n    for i in range(26):\n        if co[i] % 2 == 0:\n            c2 += 1\n        else:\n            c1 += 1\n    if n % 2 == 0:\n        if c1 > 0:\n            print('-1')\n        else:\n            ar = [[] for i in range(26)]\n            new = [0] * n\n            for i in range(n):\n                x = ord(st[i]) - 97\n                ar[x].append(i + 1)\n            j = 0\n            le = 0\n            for i in range(26):\n                while len(ar[j]) > 1:\n                    x = ar[j].pop()\n                    new[le] = x\n                    x = ar[j].pop()\n                    new[n - le - 1] = x\n                    le = le + 1\n                j = j + 1\n            for i in range(n):\n                print(new[i], end=' ')\n            print()\n    elif n % 2 == 1:\n        if c1 > 1:\n            print('-1')\n        else:\n            ar = [[] for i in range(26)]\n            new = [0] * n\n            for i in range(n):\n                x = ord(st[i]) - 97\n                ar[x].append(i + 1)\n            j = 0\n            le = 0\n            for i in range(26):\n                while len(ar[j]) > 1:\n                    x = ar[j].pop()\n                    new[le] = x\n                    x = ar[j].pop()\n                    new[n - le - 1] = x\n                    le = le + 1\n                j = j + 1\n            for i in range(26):\n                if len(ar[i]) == 1:\n                    x = ar[i].pop()\n                    break\n            new[n // 2] = x\n            for i in range(n):\n                print(new[i], end=' ')\n            print()\n    t = t - 1", "def form_palindrome(frequencies, indices):\n    length = sum(frequencies.values())\n    frequencies = dict(sorted(frequencies.items(), key=lambda x: x[1], reverse=True))\n    odd = None\n    for (key, value) in frequencies.items():\n        if value % 2:\n            odd = key\n    new_string = [' '] * sum(frequencies.values())\n    indexes = [None for _ in range(length)]\n    current = 0\n    for (key, value) in frequencies.items():\n        for j in range(value // 2):\n            new_string[current] = key\n            new_string[length - current - 1] = key\n            indexes[current] = str(indices[key][0] + 1)\n            indexes[length - current - 1] = str(indices[key][1] + 1)\n            del indices[key][0]\n            del indices[key][0]\n            current += 1\n    if odd:\n        indexes[current] = str(indices[odd][0] + 1)\n    return ' '.join(indexes)\nfor _ in range(int(input())):\n    s = input()\n    frequencies = {}\n    index_frequencies = {}\n    for (i, char) in enumerate(s):\n        if frequencies.get(char):\n            frequencies[char] += 1\n        else:\n            frequencies[char] = 1\n        if index_frequencies.get(char):\n            index_frequencies[char].append(i)\n        else:\n            index_frequencies[char] = [i]\n    values = list(frequencies.values())\n    if len(s) % 2:\n        odd_values = list(filter(lambda x: x % 2, values))\n        if len(odd_values) == 1:\n            print(form_palindrome(frequencies, index_frequencies))\n        else:\n            print(-1)\n    else:\n        odd_values = list(filter(lambda x: x % 2, values))\n        if len(odd_values):\n            print(-1)\n        else:\n            print(form_palindrome(frequencies, index_frequencies))", "def form_palindrome(frequencies, indices):\n    length = sum(frequencies.values())\n    frequencies = dict(sorted(frequencies.items(), key=lambda x: x[1], reverse=True))\n    odd = None\n    for (key, value) in frequencies.items():\n        if value % 2:\n            odd = key\n    new_string = [' '] * sum(frequencies.values())\n    indexes = [None for _ in range(length)]\n    current = 0\n    for (key, value) in frequencies.items():\n        for j in range(value // 2):\n            new_string[current] = key\n            new_string[length - current - 1] = key\n            indexes[current] = str(indices[key][0] + 1)\n            indexes[length - current - 1] = str(indices[key][1] + 1)\n            del indices[key][0]\n            del indices[key][0]\n            current += 1\n    if odd:\n        indexes[current] = str(indices[odd][0] + 1)\n    return ' '.join(indexes)\nfor _ in range(int(input())):\n    s = input()\n    frequencies = {}\n    index_frequencies = {}\n    for (i, char) in enumerate(s):\n        if frequencies.get(char):\n            frequencies[char] += 1\n        else:\n            frequencies[char] = 1\n        if index_frequencies.get(char):\n            index_frequencies[char].append(i)\n        else:\n            index_frequencies[char] = [i]\n    values = list(frequencies.values())\n    if len(s) % 2:\n        odd_values = list(filter(lambda x: x % 2, values))\n        if len(odd_values) == 1:\n            print(form_palindrome(frequencies, index_frequencies))\n        else:\n            print(-1)\n    else:\n        odd_values = list(filter(lambda x: x % 2, values))\n        if len(odd_values):\n            print(-1)\n        else:\n            print(form_palindrome(frequencies, index_frequencies))", "for _ in range(int(input())):\n    s = input()\n    if s == s[::-1]:\n        print(*list(range(1, len(s) + 1)))\n    else:\n        d = {}\n        for i in range(len(s)):\n            if s[i] not in d.keys():\n                d[s[i]] = [i + 1]\n            else:\n                d[s[i]].append(i + 1)\n        cnt = 0\n        for i in d.values():\n            if len(i) % 2 == 1:\n                cnt += 1\n        if cnt >= 2:\n            print(-1)\n        else:\n            p = [0] * len(s)\n            index = 0\n            for l in d.values():\n                if len(l) % 2 == 0:\n                    for j in range(0, len(l), 2):\n                        p[index] = l[j]\n                        p[len(p) - 1 - index] = l[j + 1]\n                        index += 1\n                else:\n                    odd = l\n            if cnt == 1:\n                mid = (len(s) - len(odd)) // 2\n                p = p[0:mid:1] + odd + p[mid + len(odd):]\n            print(*p)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    inp_str = input().strip()\n    mp = defaultdict(int)\n    mp_ix = defaultdict(list)\n    for (i, c) in enumerate(inp_str):\n        mp[c] += 1\n        mp_ix[c].append(i)\n    ec = 0\n    oc = 0\n    for (_, v) in mp.items():\n        ec += 1 if v % 2 == 0 else 0\n        oc += 0 if v % 2 == 0 else 1\n    if oc > 1:\n        print(-1)\n        continue\n    else:\n        left = []\n        right = []\n        k1 = ''\n        v1 = 0\n        for (k, v) in mp.items():\n            if v % 2 == 0:\n                for _ in range(v // 2):\n                    left.append(k)\n                    right.append(k)\n            else:\n                (k1, v1) = (k, v)\n        if v1 % 2 == 1:\n            for _ in range(v1 // 2):\n                left.append(k1)\n                right.append(k1)\n            right.append(k1)\n        perm = []\n        pallin = left + right[::-1]\n        for c in pallin:\n            perm.append(mp_ix[c][0] + 1)\n            mp_ix[c].pop(0)\n        print(*perm, sep=' ')", "import math as m\nt = int(input())\nfor _ in range(t):\n    word = input()\n    length = len(word)\n    count = {}\n    position = {}\n    for index in range(len(word)):\n        character = word[index]\n        count[character] = count.get(character, 0) + 1\n        if position.get(character, False) == False:\n            position[character] = [index]\n        else:\n            position[character].append(index)\n    oddCount = 0\n    oddCharacter = ''\n    for index in range(26):\n        currCharacter = chr(index + 97)\n        if count.get(currCharacter, 0) % 2 == 1:\n            oddCount += 1\n            oddCharacter = currCharacter\n    if oddCount >= 2:\n        print(-1)\n        continue\n    pal = [None] * length\n    startIndex = 0\n    for ascii in range(97, 123):\n        currCharacter = chr(ascii)\n        countOfCurrent = count.get(currCharacter, 0)\n        if countOfCurrent % 2 == 0 and countOfCurrent > 0:\n            currLen = len(position[currCharacter])\n            for j in range(0, currLen, 2):\n                pal[startIndex] = position[currCharacter][j]\n                pal[length - startIndex - 1] = position[currCharacter][j + 1]\n                startIndex += 1\n    if oddCount == 1:\n        size = len(position[oddCharacter])\n        for j in range(0, size):\n            pal[startIndex] = position[oddCharacter][j]\n            startIndex += 1\n    for value in pal:\n        print(value + 1, end=' ')\n    print()", "import math as m\nt = int(input())\nfor _ in range(t):\n    word = input()\n    length = len(word)\n    count = {}\n    position = {}\n    for index in range(len(word)):\n        character = word[index]\n        count[character] = count.get(character, 0) + 1\n        if position.get(character, False) == False:\n            position[character] = [index]\n        else:\n            position[character].append(index)\n    oddCount = 0\n    oddCharacter = ''\n    for index in range(26):\n        currCharacter = chr(index + 97)\n        if count.get(currCharacter, 0) % 2 == 1:\n            oddCount += 1\n            oddCharacter = currCharacter\n    if oddCount >= 2:\n        print(-1)\n        continue\n    pal = [None] * length\n    startIndex = 0\n    for ascii in range(97, 123):\n        currCharacter = chr(ascii)\n        countOfCurrent = count.get(currCharacter, 0)\n        if countOfCurrent % 2 == 0 and countOfCurrent > 0:\n            currLen = len(position[currCharacter])\n            for j in range(0, currLen, 2):\n                pal[startIndex] = position[currCharacter][j]\n                pal[length - startIndex - 1] = position[currCharacter][j + 1]\n                startIndex += 1\n    if oddCount == 1:\n        size = len(position[oddCharacter])\n        for j in range(0, size):\n            pal[startIndex] = position[oddCharacter][j]\n            startIndex += 1\n    for value in pal:\n        print(value + 1, end=' ')\n    print()", "n = int(input())\nfor p in range(n):\n    s = input()\n    d = {}\n    for i in range(len(s)):\n        lst = []\n        if s[i] in d:\n            lst = d[s[i]]\n            lst.append(i)\n        else:\n            lst = [i]\n            d.update({s[i]: lst})\n    ans = [0] * len(s)\n    i = 0\n    j = len(s) - 1\n    count_o = 0\n    count_e = 0\n    for i in d.keys():\n        if len(d[i]) % 2 == 0:\n            count_e += 1\n        else:\n            count_o += 1\n    if count_o > 1:\n        print(-1)\n    else:\n        i = 0\n        j = len(s) - 1\n        for l in range(len(s)):\n            lst = d[s[l]]\n            if len(lst) % 2 == 0:\n                k = 0\n                while k < len(lst):\n                    ans[i] = lst[k] + 1\n                    k += 1\n                    ans[j] = lst[k] + 1\n                    k += 1\n                    i += 1\n                    j -= 1\n                lst = []\n                d[s[l]] = lst\n            else:\n                k = 1\n                while k < len(lst):\n                    ans[i] = lst[k - 1] + 1\n                    k += 1\n                    ans[j] = lst[k - 1] + 1\n                    k += 1\n                    i += 1\n                    j -= 1\n                ans[len(s) // 2] = lst[len(lst) - 1] + 1\n                lst = []\n                d[s[l]] = lst\n        print(*ans)", "def permutation(string):\n    dic = {}\n    c = 0\n    n = len(string)\n    for (i, j) in enumerate(string):\n        try:\n            dic[j].append(i + 1)\n        except:\n            dic[j] = [i + 1]\n    for i in dic:\n        if len(dic[i]) % 2 != 0:\n            c += 1\n    if c >= 2:\n        return -1\n    end = n - 1\n    ans = list(range(n))\n    start = 0\n    string = 'abcdefghijklmnopqrstuvwxyz'\n    for i in string:\n        try:\n            if len(dic[i]) % 2 != 0:\n                ans[n // 2 - len(dic[i]) // 2:n // 2 - len(dic[i]) // 2 + len(dic[i])] = dic[i]\n                continue\n            for j in range(0, len(dic[i]), 2):\n                ans[start] = dic[i][j]\n                ans[end] = dic[i][j + 1]\n                start += 1\n                end -= 1\n        except:\n            continue\n    return ans\nt = int(input())\nwhile t > 0:\n    t -= 1\n    string = input()\n    out = permutation(string)\n    if out == -1:\n        print(-1)\n    else:\n        for i in out[:-1]:\n            print(i, end=' ')\n        print(out[-1])", "def printpalin(s):\n    n = len(s)\n    m = dict()\n    for i in range(n):\n        if s[i] in m:\n            m[s[i]].append(i)\n        else:\n            m[s[i]] = [i]\n    odd_count = 0\n    for i in m.values():\n        if len(i) % 2 == 1:\n            odd_count += 1\n            if odd_count >= 2:\n                print(-1)\n                return\n    arr = [0] * n\n    x = 0\n    y = n - 1\n    for i in m.values():\n        for j in range(0, len(i), 2):\n            if len(i) - j == 1:\n                arr[n // 2] = i[j] + 1\n                continue\n            arr[x] = i[j] + 1\n            arr[y] = i[j + 1] + 1\n            x += 1\n            y -= 1\n    for i in arr:\n        print(i, end=' ')\n    print()\n    return\nt = int(input())\nfor _ in range(t):\n    s = input()\n    printpalin(s)", "def permutation(s):\n    ref = [0 for i in range(26)]\n    index = [[] for i in range(26)]\n    iter = 0\n    for i in s:\n        iter += 1\n        ref[ord(i) - 97] += 1\n        index[ord(i) - 97].append(iter)\n    first_odd = -1\n    for i in range(26):\n        if ref[i] % 2 == 1:\n            if first_odd != -1 or len(s) % 2 == 0:\n                return [-1]\n            else:\n                first_odd = i\n    ans_forward = []\n    ans_reverse = []\n    for i in range(26):\n        if i != first_odd:\n            for j in range(0, len(index[i]), 2):\n                ans_forward.append(index[i][j])\n                ans_reverse.append(index[i][j + 1])\n    if first_odd != -1:\n        if ref[first_odd] == 1:\n            ans_forward.append(index[first_odd][0])\n        else:\n            for j in range(0, len(index[first_odd]) - 1, 2):\n                ans_forward.append(index[first_odd][j])\n                ans_reverse.append(index[first_odd][j + 1])\n            ans_forward.append(index[first_odd][-1])\n    return ans_forward + ans_reverse[::-1]\nimport sys\nc = 0\nfor line in sys.stdin:\n    if c == 0:\n        t = int(line.strip())\n        c = 2\n    else:\n        qn = line.strip()\n        c += 1\n        print(*permutation(qn))", "from collections import defaultdict, deque\ntry:\n    for _ in range(int(input())):\n        inpText = input()\n        length = len(inpText)\n        count = defaultdict(deque)\n        for idx in range(len(inpText)):\n            count[inpText[idx]].append(str(idx + 1))\n        oddChars = list(filter(lambda char: len(count[char]) % 2 != 0, count.keys()))\n        if length % 2 == 0:\n            if len(oddChars) != 0:\n                print(-1)\n                continue\n            keys = deque(count.keys())\n            outputSeq = deque(count.pop(keys.popleft()))\n            for key in keys:\n                pos = count[key]\n                while len(pos) != 0:\n                    outputSeq.appendleft(pos.popleft())\n                    outputSeq.append(pos.pop())\n        else:\n            if len(oddChars) > 1:\n                print(-1)\n                continue\n            outputSeq = deque(count.pop(oddChars[0]))\n            keys = deque(count.keys())\n            for key in keys:\n                pos = count[key]\n                while len(pos) != 0:\n                    outputSeq.appendleft(pos.popleft())\n                    outputSeq.append(pos.pop())\n        outputSeq = ' '.join(outputSeq)\n        print(outputSeq)\nexcept EOFError:\n    pass", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    s = input()\n    h = defaultdict(list)\n    for i in range(len(s)):\n        h[s[i]].append(i + 1)\n    c = 0\n    for i in set(s):\n        if len(h[i]) % 2 == 1:\n            c = c + 1\n    r1 = []\n    r2 = []\n    o = []\n    if c <= 1:\n        for i in set(s):\n            l = h[i]\n            if len(l) % 2 == 0:\n                r1 = r1 + l[:len(l) // 2]\n                r2 = r2 + l[len(l) // 2:]\n            else:\n                o = o + h[i]\n        print(*r1[::-1] + o + r2)\n    else:\n        print(-1)", "T = int(input())\nfor i in range(T):\n    s = input()\n    h = {}\n    r = [0] * len(s)\n    n = len(s)\n    for i in range(len(s)):\n        if s[i] in h:\n            h[s[i]].append(i + 1)\n        else:\n            h[s[i]] = []\n            h[s[i]].append(i + 1)\n    c = 0\n    for i in h:\n        if len(h[i]) % 2 == 1:\n            c += 1\n    k = 0\n    if c == 1 or c == 0:\n        for i in h:\n            x = h[i]\n            m = len(x) // 2\n            j = 0\n            while m:\n                r[k] = x[j]\n                r[-k - 1] = x[-j - 1]\n                j += 1\n                k += 1\n                m = m - 1\n            if len(x) % 2 == 1:\n                r[n // 2] = x[len(x) // 2]\n        print(*r)\n    else:\n        print(-1)", "T = int(input())\nfor i in range(T):\n    s = input()\n    h = {}\n    r = [0] * len(s)\n    n = len(s)\n    for i in range(len(s)):\n        if s[i] in h:\n            h[s[i]].append(i + 1)\n        else:\n            h[s[i]] = []\n            h[s[i]].append(i + 1)\n    c = 0\n    for i in h:\n        if len(h[i]) % 2 == 1:\n            c += 1\n    k = 0\n    if c == 1 or c == 0:\n        for i in h:\n            x = h[i]\n            m = len(x) // 2\n            j = 0\n            while m:\n                r[k] = x[j]\n                r[-k - 1] = x[-j - 1]\n                j += 1\n                k += 1\n                m = m - 1\n            if len(x) % 2 == 1:\n                r[n // 2] = x[len(x) // 2]\n        print(*r)\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    h = {}\n    r = [0] * len(s)\n    n = len(s)\n    for i in range(len(s)):\n        if s[i] in h:\n            h[s[i]].append(i + 1)\n        else:\n            h[s[i]] = []\n            h[s[i]].append(i + 1)\n    c = 0\n    for i in h:\n        if len(h[i]) % 2 == 1:\n            c += 1\n    k = 0\n    if c == 1 or c == 0:\n        for i in h:\n            x = h[i]\n            m = len(x) // 2\n            j = 0\n            while m:\n                r[k] = x[j]\n                r[-k - 1] = x[-j - 1]\n                j += 1\n                k += 1\n                m = m - 1\n            if len(x) % 2 == 1:\n                r[n // 2] = x[len(x) // 2]\n        print(*r)\n    else:\n        print(-1)", "n = int(input())\nfor t in range(n):\n    string = input()\n    ansDict = {}\n    indexDict = {}\n    for idx in range(len(string)):\n        char = string[idx]\n        ansDict[char] = ansDict.get(char, 0) + 1\n        if indexDict.get(char) is None:\n            charList = [idx]\n            indexDict[char] = charList\n        else:\n            indexDict[char].append(idx)\n    oddCount = 0\n    oddChar = None\n    for (char, freq) in ansDict.items():\n        if freq % 2 != 0:\n            oddCount += 1\n            oddChar = char\n    if oddCount == 0 or oddCount == 1:\n        (i, j) = (0, -1)\n        ansList = [-1] * len(string)\n        for (char, value) in indexDict.items():\n            li = indexDict[char]\n            if ansDict[char] % 2 == 0:\n                for k in range(0, len(li), 2):\n                    ansList[i] = li[k]\n                    ansList[j] = li[k + 1]\n                    i += 1\n                    j -= 1\n        if oddCount == 1:\n            li = indexDict[oddChar]\n            for k in range(0, len(li)):\n                if ansList[i] == -1:\n                    ansList[i] = li[k]\n                    i += 1\n        for ele in ansList:\n            print(ele + 1, end=' ')\n        print()\n    else:\n        print(-1)", "for _ in range(int(input())):\n    s = list(input())\n    n = len(s)\n    p = [i for i in range(1, n + 1)]\n    i = 0\n    j = n - 1\n    flag = True\n    while i <= j:\n        if s[i] != s[j]:\n            f = -1\n            for k in range(i + 1, j):\n                if s[k] == s[j]:\n                    pos = k\n                    f = 0\n                    break\n                if s[k] == s[i]:\n                    pos = k\n                    f = 1\n                    break\n            if f == -1:\n                flag = False\n            if f == 0:\n                (p[i], p[k]) = (p[k], p[i])\n                (s[i], s[k]) = (s[k], s[i])\n            if f == 1:\n                (p[j], p[k]) = (p[k], p[j])\n                (s[j], s[k]) = (s[k], s[j])\n        i += 1\n        j -= 1\n    if flag:\n        print(*p, sep=' ')\n    else:\n        print('-1')", "t = int(input())\nfor _ in range(t):\n    s = input()\n    lst = {}\n    n = len(s)\n    for i in range(len(s)):\n        if lst.get(s[i]) == None:\n            lst[s[i]] = [i + 1]\n        else:\n            lst[s[i]].append(i + 1)\n    count = 0\n    for k in lst:\n        if len(lst[k]) % 2 == 1:\n            count += 1\n    if count > 1:\n        print(-1)\n    else:\n        ans = [0] * n\n        i = 0\n        j = n - 1\n        for k in lst:\n            if len(lst[k]) % 2 == 0:\n                for ind in range(len(lst[k]) // 2):\n                    ans[i] = lst[k][ind]\n                    i += 1\n                for ind in range(len(lst[k]) // 2, len(lst[k])):\n                    ans[j] = lst[k][ind]\n                    j -= 1\n            else:\n                mid = n // 2\n                temp = mid - 1\n                ans[mid] = lst[k][0]\n                mid += 1\n                l = len(lst[k])\n                for ind in range(1, l // 2 + 1):\n                    ans[mid] = lst[k][ind]\n                    mid += 1\n                for ind in range(l // 2 + 1, len(lst[k])):\n                    ans[temp] = lst[k][ind]\n                    temp -= 1\n        print(*ans)", "from collections import deque\n\ndef solve(d):\n    flag = True\n    odd_list = []\n    skip_key = ''\n    for (key, ele) in d.items():\n        if len(ele) % 2 != 0:\n            if flag == False:\n                print(-1)\n                return\n            else:\n                flag = False\n                odd_list = ele\n                skip_key = key\n    l = deque(odd_list)\n    for ele in d:\n        if ele == skip_key:\n            continue\n        for i in range(len(d[ele]) // 2):\n            l.appendleft(d[ele][i])\n            l.append(d[ele][len(d[ele]) - 1 - i])\n    for i in range(len(l) - 1):\n        print(l[i], end=' ')\n    print(l[-1])\nT = int(input())\nfor i in range(T):\n    s = input()\n    d = {}\n    for j in range(len(s)):\n        if s[j] not in d:\n            d[s[j]] = []\n        d[s[j]].append(j + 1)\n    solve(d)", "def makeMap(st):\n    map = {}\n    for i in range(len(st)):\n        lis = [i]\n        if st[i] not in map:\n            map[st[i]] = lis\n        else:\n            map[st[i]] = map[st[i]] + lis\n    return map\n\ndef makePallindrome(st):\n    n = len(st)\n    map = makeMap(st)\n    odd_count = 0\n    for ele in map:\n        if len(map[ele]) % 2 != 0:\n            odd_count += 1\n    if odd_count >= 2:\n        print(-1)\n        return\n    ans = [-1] * n\n    start = 0\n    end = n - 1\n    for ele in map:\n        for j in range(0, len(map[ele]), 2):\n            if len(map[ele]) - j == 1:\n                ans[len(st) // 2] = map[ele][j]\n                continue\n            ans[start] = map[ele][j]\n            ans[end] = map[ele][j + 1]\n            start += 1\n            end -= 1\n    for ele in ans:\n        print(ele + 1, end=' ')\nt = int(input())\nfor i in range(t):\n    st = input()\n    makePallindrome(st)\n    print()", "def makeMap(st):\n    map = {}\n    for i in range(len(st)):\n        lis = [i]\n        if st[i] not in map:\n            map[st[i]] = lis\n        else:\n            map[st[i]] = map[st[i]] + lis\n    return map\n\ndef makePallindrome(st):\n    n = len(st)\n    map = makeMap(st)\n    odd_count = 0\n    for ele in map:\n        if len(map[ele]) % 2 != 0:\n            odd_count += 1\n    if odd_count >= 2:\n        print(-1)\n        return\n    ans = [-1] * n\n    start = 0\n    end = n - 1\n    for ele in map:\n        for j in range(0, len(map[ele]), 2):\n            if len(map[ele]) - j == 1:\n                ans[len(st) // 2] = map[ele][j]\n                continue\n            ans[start] = map[ele][j]\n            ans[end] = map[ele][j + 1]\n            start += 1\n            end -= 1\n    for ele in ans:\n        print(ele + 1, end=' ')\nt = int(input())\nfor i in range(t):\n    st = input()\n    makePallindrome(st)\n    print()", "def makeMap(st):\n    map = {}\n    for i in range(len(st)):\n        lis = [i]\n        if st[i] not in map:\n            map[st[i]] = lis\n        else:\n            map[st[i]] = map[st[i]] + lis\n    return map\n\ndef makePallindrome(st):\n    n = len(st)\n    map = makeMap(st)\n    odd_count = 0\n    for ele in map:\n        if len(map[ele]) % 2 != 0:\n            odd_count += 1\n    if odd_count >= 2:\n        print(-1)\n        return\n    ans = [-1] * n\n    start = 0\n    end = n - 1\n    for ele in map:\n        for j in range(0, len(map[ele]), 2):\n            if len(map[ele]) - j == 1:\n                ans[len(st) // 2] = map[ele][j]\n                continue\n            ans[start] = map[ele][j]\n            ans[end] = map[ele][j + 1]\n            start += 1\n            end -= 1\n    for ele in ans:\n        print(ele + 1, end=' ')\nt = int(input())\nfor i in range(t):\n    st = input()\n    makePallindrome(st)\n    print()", "def window(string):\n    ref = []\n    start = []\n    stop = []\n    iter = -1\n    for i in string:\n        iter += 1\n        ref.append([i, iter])\n    refer = {}\n    count = {}\n    for i in ref:\n        if i[0] in refer.keys():\n            refer[i[0]].append(i[1])\n            count[i[0]] += 1\n        else:\n            refer[i[0]] = [i[1]]\n            count[i[0]] = 1\n    check = 0\n    for (key, val) in refer.items():\n        if check > 1:\n            return [-1]\n        if len(val) % 2 == 1:\n            check += 1\n            track = key\n        else:\n            for i in range(0, int(len(val) / 2)):\n                start.append(val[i] + 1)\n            for i in range(int(len(val) / 2), len(val)):\n                stop.append(val[i] + 1)\n    if len(string) % 2 == 1:\n        for i in range(0, int(len(refer[track]) / 2)):\n            start.append(refer[track][i] + 1)\n        for i in range(int(len(refer[track]) / 2), len(refer[track]) - 1):\n            stop.append(refer[track][i] + 1)\n        start.append(refer[track][-1] + 1)\n    if len(start) + len(stop) != len(string):\n        return [-1]\n    return start + stop[::-1]\nimport sys\nc = 0\nfor line in sys.stdin:\n    if c == 0:\n        t = int(line.strip())\n        c = 2\n    else:\n        qn = line.strip()\n        c += 1\n        print(*window(qn))", "from collections import deque\n\ndef window(string):\n    ref = {}\n    iter = -1\n    for i in string:\n        iter += 1\n        ref.setdefault(i, []).append(iter + 1)\n    left = deque([])\n    right = []\n    extra = -1\n    error = False\n    for (key, value) in ref.items():\n        if len(value) % 2 == 1:\n            if iter % 2 == 0 and extra == -1:\n                extra = value.pop()\n            else:\n                error = True\n                break\n        switch = True\n        for item in value:\n            if switch:\n                left.appendleft(item)\n            else:\n                right.append(item)\n            switch = not switch\n    if error:\n        return [-1]\n    if extra == -1:\n        return list(left) + right\n    return list(left) + [extra] + right\nimport sys\nc = 0\nfor line in sys.stdin:\n    if c == 0:\n        t = int(line.strip())\n        c = 2\n    else:\n        qn = line.strip()\n        c += 1\n        print(*window(qn))", "test = int(input())\nfor _ in range(test):\n    s = input()\n    dic = {}\n    for u in range(len(s)):\n        if s[u] not in dic:\n            dic[s[u]] = [u + 1]\n        else:\n            dic[s[u]] += [u + 1]\n    c = 0\n    for u in dic.values():\n        if len(u) % 2 != 0:\n            c += 1\n    if c > 1:\n        print(-1)\n    else:\n        k = []\n        c = []\n        cc = list(dic.values())\n        for u in cc:\n            if len(u) % 2 != 0:\n                k = u.copy()\n            else:\n                c += u[:len(u) // 2]\n        c += k.copy()\n        cc.reverse()\n        for u in cc:\n            if len(u) % 2 != 0:\n                continue\n            else:\n                c += u[len(u) // 2:]\n        print(*c)", "for _ in range(int(input())):\n    s = input()\n    dic = {}\n    for u in range(len(s)):\n        if s[u] not in dic:\n            dic[s[u]] = [u + 1]\n        else:\n            dic[s[u]] += [u + 1]\n    c = 0\n    for u in dic.values():\n        if len(u) % 2 != 0:\n            c += 1\n    if c > 1:\n        print(-1)\n    else:\n        k = []\n        c = []\n        cc = list(dic.values())\n        for u in cc:\n            if len(u) % 2 != 0:\n                k = u.copy()\n            else:\n                c += u[:len(u) // 2]\n        c += k.copy()\n        cc.reverse()\n        for u in cc:\n            if len(u) % 2 != 0:\n                continue\n            else:\n                c += u[len(u) // 2:]\n        print(*c)", "for _ in range(int(input())):\n    s = input()\n    dic = {}\n    for u in range(len(s)):\n        if s[u] not in dic:\n            dic[s[u]] = [u + 1]\n        else:\n            dic[s[u]] += [u + 1]\n    c = 0\n    for u in dic.values():\n        if len(u) % 2 != 0:\n            c += 1\n    if c > 1:\n        print(-1)\n    else:\n        k = []\n        c = []\n        cc = list(dic.values())\n        for u in cc:\n            if len(u) % 2 != 0:\n                k = u.copy()\n            else:\n                c += u[:len(u) // 2]\n        c += k.copy()\n        cc.reverse()\n        for u in cc:\n            if len(u) % 2 != 0:\n                continue\n            else:\n                c += u[len(u) // 2:]\n        print(*c)", "t = int(input())\nwhile t > 0:\n    a = list(input())\n    n = len(a)\n    s = set(a)\n    q = c = 0\n    l = [0] * n\n    w = ''\n    for i in s:\n        if a.count(i) % 2 != 0:\n            w = a.index(i)\n            c += 1\n        if c > 1:\n            print(-1)\n            q = 1\n            break\n    if q == 0:\n        s = 'abcdefghijklmnopqrstuvwxyz'\n        k = 0\n        if n % 2 != 0:\n            l[n // 2] = w + 1\n            a[w] = 9\n        for i in s:\n            c = 0\n            for j in range(n):\n                if a[j] == i:\n                    if c % 2 == 0:\n                        l[k] = j + 1\n                    else:\n                        l[n - k - 1] = j + 1\n                        k += 1\n                    c += 1\n        print(*l)\n    t -= 1", "from collections import deque\nt = int(input())\nwhile t > 0:\n    s = input()\n    n = len(s)\n    ans = ['' for i in range(n)]\n    count = [0 for i in range(26)]\n    for i in s:\n        count[ord(i) - ord('a')] += 1\n    count_odd = 0\n    for i in count:\n        if i % 2 != 0:\n            count_odd += 1\n    if count_odd > 1:\n        print(-1)\n    else:\n        arr = list(s)\n        arr.sort()\n        i = 0\n        j = 0\n        while i < n:\n            if count[ord(arr[i]) - ord('a')] % 2 == 0 and count[ord(arr[i]) - ord('a')] > 0:\n                ans[j] = arr[i]\n                ans[n - j - 1] = arr[i]\n                count[ord(arr[i]) - ord('a')] -= 2\n                j += 1\n                i += 2\n            else:\n                ans[n // 2] = arr[i]\n                count[ord(arr[i]) - ord('a')] -= 1\n                i += 1\n        temp = ''.join(ans)\n        obj = {}\n        for i in range(n):\n            if s[i] in obj:\n                obj[s[i]].append(i)\n            else:\n                q = deque()\n                q.append(i)\n                obj[s[i]] = q\n        finalAns = []\n        for i in temp:\n            print(obj[i].popleft() + 1, end=' ')\n        print()\n    t -= 1", "from collections import Counter\n\ndef permpal(s):\n    n = len(s)\n    c = Counter(s)\n    t = [0, 0]\n    for v in c.values():\n        t[v % 2] += 1\n    if n % 2:\n        if t[1] != 1:\n            return -1\n    if not n % 2:\n        if t[1] != 0:\n            return -1\n    p = [0 for i in range(n)]\n    pos = {}\n    for (i, char) in enumerate(s):\n        if char not in pos:\n            pos[char] = [i + 1]\n        else:\n            pos[char].append(i + 1)\n    if n % 2:\n        (i, j) = (n // 2 - 1, n // 2 + 1)\n    else:\n        (i, j) = (n // 2 - 1, n // 2)\n    if n % 2:\n        for char in pos:\n            if len(pos[char]) % 2:\n                p[n // 2] = pos[char].pop()\n            while pos[char]:\n                (p[i], p[j]) = (pos[char].pop(), pos[char].pop())\n                i -= 1\n                j += 1\n    else:\n        for char in pos:\n            while pos[char]:\n                (p[i], p[j]) = (pos[char].pop(), pos[char].pop())\n                i -= 1\n                j += 1\n    return ' '.join(map(str, p))\nt = int(input())\nfor _ in range(t):\n    s = input()\n    print(permpal(s))", "t = int(input())\nfor _ in range(t):\n    s = input()\n    d = {}\n    for i in range(len(s)):\n        try:\n            d[s[i]] += [i + 1]\n        except:\n            d[s[i]] = [i + 1]\n    ans = 0\n    for i in d.values():\n        if len(i) % 2:\n            ans += 1\n    if ans <= 1:\n        x = []\n        for i in d.keys():\n            if len(d[i]) % 2:\n                x = d[i]\n                del d[i]\n                break\n        ans = []\n        k = []\n        for i in d.keys():\n            ans += d[i][:len(d[i]) // 2]\n            k += d[i][len(d[i]) // 2:]\n        ans += x\n        k.reverse()\n        ans += k\n        print(*ans)\n    else:\n        print(-1)", "from collections import defaultdict\n\ndef perm_palin(s):\n    chars = defaultdict(list)\n    for (index, ch) in enumerate(s, start=1):\n        chars[ch].append(index)\n    odd_count = 0\n    odd_item = None\n    for (item, count) in chars.items():\n        if len(count) % 2 == 1:\n            odd_count += 1\n            odd_item = item\n    if odd_count >= 2:\n        return [-1]\n    ans = []\n    for (item, count) in chars.items():\n        if item != odd_item:\n            x = len(ans) // 2\n            ans = ans[:x] + count + ans[x:]\n    x = len(ans) // 2\n    ans = ans[:x] + chars[odd_item] + ans[x:]\n    return ans\n\ndef main():\n    for _ in range(int(input())):\n        s = input()\n        print(*perm_palin(s))\nmain()", "test_case = int(input())\n\ndef assign_res(front, end_st, arr, st1, end1, val):\n    i = 0\n    st = st1\n    end = end1\n    while i < len(val):\n        arr[st] = val[i] + 1\n        front += str(val[i] + 1) + ' '\n        arr[end] = val[i + 1] + 1\n        end_st = ' ' + str(val[i + 1] + 1)\n        st += 1\n        end -= 1\n        i += 2\n    return\n\ndef pal_permu(stt):\n    freq = {}\n    res = [0] * len(stt)\n    for i in range(len(stt)):\n        if stt[i] in freq.keys():\n            freq[stt[i]].append(i)\n        else:\n            freq[stt[i]] = [i]\n    odd = 0\n    even = 0\n    start = -1\n    end = 0\n    front = ''\n    end_st = ''\n    mid_str = ''\n    for (key, value) in freq.items():\n        if len(value) % 2 == 0:\n            start += 1\n            end -= 1\n            i = 0\n            while i < len(value):\n                front += str(value[i] + 1) + ' '\n                end_st = str(value[i + 1] + 1) + ' ' + end_st\n                i += 2\n            even += 1\n        else:\n            odd += 1\n    if odd != 1 and odd != 0:\n        print('-1')\n        return\n    for (key, value) in freq.items():\n        if len(value) % 2 != 0:\n            mid_str = ''\n            for i in value:\n                mid_str += str(i + 1) + ' '\n    mid_str = mid_str[:-1]\n    if mid_str != '':\n        print(front.strip() + ' ' + mid_str.strip() + ' ' + end_st.strip())\n    else:\n        print(front.strip() + ' ' + end_st.strip())\n    return\nfor i in range(test_case):\n    pal_permu(input())", "t = int(input())\nfor _ in range(t):\n    s = input()\n    d = {}\n    for i in range(len(s)):\n        if s[i] not in d:\n            d[s[i]] = [i]\n        else:\n            d[s[i]].append(i)\n    odd_count = 0\n    flag = False\n    for i in d:\n        if len(d[i]) % 2 != 0:\n            odd_count += 1\n            if odd_count >= 2:\n                flag = True\n                break\n    if flag:\n        print(-1)\n    else:\n        result = [None] * len(s)\n        start = 0\n        end = len(s) - 1\n        for i in d:\n            if len(d[i]) % 2 == 0:\n                x = len(d[i]) // 2\n                r = -1\n                for j in range(x):\n                    result[start] = d[i][j]\n                    result[end] = d[i][r]\n                    r -= 1\n                    start += 1\n                    end -= 1\n            elif len(d[i]) == 1:\n                result[len(s) // 2] = d[i][0]\n            else:\n                x = len(d[i]) // 2\n                r = -1\n                for j in range(x):\n                    result[start] = d[i][j]\n                    result[end] = d[i][r]\n                    r -= 1\n                    if len(s) + r == j:\n                        break\n                    start += 1\n                    end -= 1\n                result[len(s) // 2] = d[i][r]\n        for i in result:\n            print(i + 1, end=' ')\n        print()", "for i in range(int(input())):\n    stg = list(input())\n    x = {}\n    for i in range(len(stg)):\n        if stg[i] not in x:\n            x[stg[i]] = 1\n        else:\n            x[stg[i]] += 1\n    count = 0\n    for i in x:\n        if x[i] % 2 == 1:\n            count += 1\n            if count == 2:\n                break\n    if count == 2:\n        print('-1')\n    else:\n        m = dict()\n        for i in range(len(stg)):\n            if stg[i] in m:\n                m[stg[i]].append(i + 1)\n            else:\n                m[stg[i]] = [i + 1]\n        A = []\n        for i in m:\n            A.append(m[i])\n        (x1, f) = ([], '')\n        for i in range(len(A)):\n            d0 = len(A[i]) // 2\n            if d0 == 0:\n                f = A[i][d0]\n                continue\n            a = [str(j) for j in A[i][0:d0]]\n            z = ' '.join(a)\n            x1.append(z)\n            if len(A[i]) % 2 == 1:\n                f = A[i][d0]\n        if f != '':\n            x1.append(f)\n        for i in range(len(A) - 1, -1, -1):\n            d0 = len(A[i]) // 2\n            if len(A[i]) // 2 == 0:\n                continue\n            if len(A[i]) % 2 == 0:\n                a = [str(j) for j in A[i][d0:len(A[i])]]\n                z = ' '.join(a)\n                x1.append(z)\n            else:\n                a = [str(j) for j in A[i][d0 + 1:len(A[i])]]\n                z = ' '.join(a)\n                x1.append(z)\n        q = [str(i) for i in x1]\n        z = ' '.join(q)\n        print(z)", "for i in range(int(input())):\n    stg = list(input())\n    x = {}\n    for i in range(len(stg)):\n        if stg[i] not in x:\n            x[stg[i]] = 1\n        else:\n            x[stg[i]] += 1\n    count = 0\n    for i in x:\n        if x[i] % 2 == 1:\n            count += 1\n            if count == 2:\n                break\n    if count == 2:\n        print('-1')\n    else:\n        m = dict()\n        for i in range(len(stg)):\n            if stg[i] in m:\n                m[stg[i]].append(i + 1)\n            else:\n                m[stg[i]] = [i + 1]\n        A = []\n        for i in m:\n            A.append(m[i])\n        (x1, f) = ([], '')\n        for i in range(len(A)):\n            d0 = len(A[i]) // 2\n            if d0 == 0:\n                f = A[i][d0]\n                continue\n            a = [str(j) for j in A[i][0:d0]]\n            z = ' '.join(a)\n            x1.append(z)\n            if len(A[i]) % 2 == 1:\n                f = A[i][d0]\n        if f != '':\n            x1.append(f)\n        for i in range(len(A) - 1, -1, -1):\n            d0 = len(A[i]) // 2\n            if len(A[i]) // 2 == 0:\n                continue\n            if len(A[i]) % 2 == 0:\n                a = [str(j) for j in A[i][d0:len(A[i])]]\n                z = ' '.join(a)\n                x1.append(z)\n            else:\n                a = [str(j) for j in A[i][d0 + 1:len(A[i])]]\n                z = ' '.join(a)\n                x1.append(z)\n        q = [str(i) for i in x1]\n        z = ' '.join(q)\n        print(z)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    d = {}\n    for i in range(len(s)):\n        if s[i] not in d:\n            d[s[i]] = [i]\n        else:\n            d[s[i]].append(i)\n    odd_count = 0\n    flag = False\n    for i in d:\n        if len(d[i]) % 2 != 0:\n            odd_count += 1\n            if odd_count >= 2:\n                flag = True\n                break\n    if flag:\n        print(-1)\n    else:\n        result = [None] * len(s)\n        start = 0\n        end = len(s) - 1\n        for i in d:\n            if len(d[i]) % 2 == 0:\n                x = len(d[i]) // 2\n                r = -1\n                for j in range(x):\n                    result[start] = d[i][j]\n                    result[end] = d[i][r]\n                    r -= 1\n                    start += 1\n                    end -= 1\n            elif len(d[i]) == 1:\n                result[len(s) // 2] = d[i][0]\n            else:\n                x = len(d[i]) // 2\n                r = -1\n                for j in range(x):\n                    result[start] = d[i][j]\n                    result[end] = d[i][r]\n                    r -= 1\n                    if len(s) + r == j:\n                        break\n                    start += 1\n                    end -= 1\n                result[len(s) // 2] = d[i][r]\n        for i in result:\n            print(i + 1, end=' ')\n        print()", "for _ in range(int(input())):\n    s = input()\n    d = {}\n    for i in range(len(s)):\n        if s[i] not in d:\n            l = [i + 1]\n            d.update({s[i]: l})\n        else:\n            d[s[i]].append(i + 1)\n    o = 0\n    l1 = [0] * len(s)\n    start = 0\n    end = len(s) - 1\n    for i in d.keys():\n        if len(d[i]) % 2 == 1:\n            o += 1\n    if o > 1:\n        print(-1)\n    else:\n        for i in d.keys():\n            x = len(d[i])\n            c = 0\n            if x % 2 == 0:\n                while x != 0:\n                    l1[start] = d[i][c]\n                    start += 1\n                    c += 1\n                    l1[end] = d[i][c]\n                    end -= 1\n                    c += 1\n                    x -= 2\n            else:\n                l1[len(s) // 2] = d[i][c]\n                c += 1\n                x -= 1\n                while x != 0:\n                    l1[start] = d[i][c]\n                    start += 1\n                    c += 1\n                    l1[end] = d[i][c]\n                    end -= 1\n                    c += 1\n                    x -= 2\n        print(*l1)", "n = int(input())\nfor t in range(0, n):\n    s = input()\n    d = dict()\n    d1 = dict()\n    for i in range(0, len(s)):\n        if s[i] not in d:\n            d[s[i]] = 1\n            d1[s[i]] = [i + 1]\n        else:\n            d[s[i]] = d[s[i]] + 1\n            d1[s[i]].append(i + 1)\n    codd = 0\n    x = 0\n    for i in d.keys():\n        y = d[i]\n        if y % 2 == 1:\n            codd = codd + 1\n            x = i\n    if codd > 1:\n        print(-1)\n    else:\n        p = ''\n        l = len(s)\n        rl = l // 2\n        if l % 2 == 1:\n            rl = rl + 1\n        for i in d.keys():\n            y = d[i]\n            p = p + i * (y // 2)\n        s1 = p[::-1]\n        if codd == 1:\n            p = p + x\n        p = p + s1\n        f = []\n        d2 = dict()\n        for i in range(0, len(p)):\n            if p[i] not in d2:\n                d2[p[i]] = [i + 1]\n            else:\n                d2[p[i]].append(i + 1)\n        for i in p:\n            y = d1[i]\n            f.append(y[-1])\n            y.pop()\n        print(*f)", "for T in range(int(input())):\n    s = input()\n    N = len(s)\n    setS = set(s)\n    k = sorted(setS)\n    c = {ch: list() for ch in k}\n    for i in range(N):\n        c[s[i]].append(i + 1)\n    P = list()\n    Podd = list()\n    odd = 0\n    for key in k:\n        L = len(c[key])\n        if L % 2 != 0:\n            odd += 1\n            Podd = c[key]\n        else:\n            P += c[key][:L // 2]\n    k.reverse()\n    P += Podd\n    for key in k:\n        L = len(c[key])\n        if L % 2 == 0:\n            P += c[key][L // 2:]\n    if odd <= 1:\n        print(*P)\n    else:\n        print(-1)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    hash = defaultdict(int)\n    ho = defaultdict(list)\n    s = input()\n    n = len(s)\n    for i in s:\n        hash[i] += 1\n    for i in range(n):\n        ho[s[i]].append(i + 1)\n    if n % 2 == 0:\n        flag = 0\n        ans = [-1] * n\n        for i in hash.keys():\n            if hash[i] % 2 != 0:\n                flag = 1\n                break\n        if flag == 1:\n            print(-1)\n        else:\n            i = 0\n            la = list(hash.keys())\n            a = 0\n            b = n - 1\n            while i < len(hash.keys()):\n                k = la[i]\n                x = 0\n                for j in range(hash[k] // 2):\n                    (ans[a], ans[b]) = (ho[k][x], ho[k][x + 1])\n                    a += 1\n                    b -= 1\n                    x += 2\n                i += 1\n            print(*ans)\n    else:\n        ans = [-1] * n\n        count = 0\n        do = ''\n        for i in hash.keys():\n            if hash[i] % 2 != 0:\n                do = i\n                count += 1\n        if count == 1:\n            i = 0\n            la = list(hash.keys())\n            a = 0\n            b = n - 1\n            while i < len(hash.keys()):\n                k = la[i]\n                x = 0\n                if k != do:\n                    for j in range(hash[k] // 2):\n                        (ans[a], ans[b]) = (ho[k][x], ho[k][x + 1])\n                        a += 1\n                        b -= 1\n                        x += 2\n                i += 1\n            x = 0\n            for j in range(hash[do] // 2):\n                (ans[a], ans[b]) = (ho[do][x], ho[do][x + 1])\n                a += 1\n                b -= 1\n                x += 2\n            ans[len(ans) // 2] = ho[do][x]\n            print(*ans)\n        else:\n            print(-1)", "for T in range(int(input())):\n    s = input()\n    N = len(s)\n    setS = set(s)\n    k = sorted(setS)\n    c = {ch: list() for ch in k}\n    for i in range(N):\n        c[s[i]].append(i + 1)\n    P = list()\n    Podd = list()\n    odd = 0\n    for key in k:\n        L = len(c[key])\n        if L % 2 != 0:\n            odd += 1\n            Podd = c[key]\n        else:\n            P += c[key][:L // 2]\n    k.reverse()\n    P += Podd\n    for key in k:\n        L = len(c[key])\n        if L % 2 == 0:\n            P += c[key][L // 2:]\n    if odd <= 1:\n        print(*P)\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    d = {}\n    for i in range(len(s)):\n        try:\n            d[s[i]] += [i + 1]\n        except:\n            d[s[i]] = [i + 1]\n    k = 0\n    for i in d.values():\n        if len(i) % 2 != 0:\n            k += 1\n    if k > 1:\n        print(-1)\n    else:\n        k = []\n        c = []\n        x = list(d.values())\n        for i in x:\n            if len(i) % 2 != 0:\n                k = i.copy()\n            else:\n                c += i[:len(i) // 2]\n        c += k.copy()\n        x.reverse()\n        for i in x:\n            if len(i) % 2 != 0:\n                continue\n            else:\n                c += i[len(i) // 2:]\n        print(*c)", "import collections\n\ndef find_all_indices(l, a):\n    indices = []\n    for i in range(len(l)):\n        if l[i] == a:\n            indices.append(i)\n    return indices\n\ndef solve_for(s):\n    freq = collections.Counter(s)\n    (odd_parity_chars, even_parity_chars) = ([], [])\n    for (c, c_count) in freq.items():\n        if c_count % 2 == 0:\n            even_parity_chars.append(find_all_indices(s, c))\n        else:\n            odd_parity_chars.append(find_all_indices(s, c))\n    if len(odd_parity_chars) > 1:\n        return '-1'\n    (left, right, middle) = ([], [], [])\n    for indices in even_parity_chars:\n        even = True\n        for i in indices:\n            if even:\n                left.append(str(i + 1))\n            else:\n                right.insert(0, str(i + 1))\n            even = not even\n    if len(odd_parity_chars) == 1:\n        for i in odd_parity_chars[0]:\n            middle.append(str(i + 1))\n    return ' '.join(left + middle + right)\nT = int(input())\nfor i in range(T):\n    print(solve_for(input().strip()))", "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    res = [None] * n\n    c = Counter(s)\n    f = 1\n    biksha = 0\n    for i in c:\n        if c[i] & 1:\n            biksha += 1\n        if biksha > 1:\n            f = 0\n            break\n    if f == 0:\n        print(-1)\n    else:\n        d = {}\n        for i in range(len(s)):\n            if s[i] not in d:\n                d[s[i]] = [i + 1]\n            else:\n                d[s[i]].append(i + 1)\n        ind = 0\n        for i in range(0, 26):\n            k = chr(i + 97)\n            if c[k] > 0 and c[k] & 1:\n                res[n // 2] = d[k].pop()\n                c[k] -= 1\n            if c[k] and c[k] % 2 == 0:\n                while c[k]:\n                    res[ind] = d[k].pop()\n                    res[n - ind - 1] = d[k].pop()\n                    ind += 1\n                    c[k] -= 2\n        print(*res, sep=' ')", "n = int(input())\ns = [input().strip() for _ in range(n)]\nfor astr in s:\n    lfq = dict()\n    for ltr in astr:\n        if ltr in lfq:\n            lfq[ltr] += 1\n        else:\n            lfq[ltr] = 1\n    mid = ''\n    tgt = []\n    for (ltr, fq) in lfq.items():\n        if fq % 2 == 1:\n            mid = mid + ltr\n        if fq > 1:\n            tgt += [ltr] * (fq // 2)\n    if len(mid) > 1:\n        print(-1)\n    else:\n        if len(mid) == 1:\n            tgt += [mid] + list(reversed(tgt))\n        else:\n            tgt += list(reversed(tgt))\n        perm = [0] * len(tgt)\n        floc = {ltr: 0 for ltr in lfq}\n        for (p, ltr) in enumerate(astr):\n            outp = tgt.index(ltr, floc[ltr])\n            perm[outp] = p + 1\n            floc[ltr] = outp + 1\n        print(*perm)", "for _ in range(int(input())):\n    s = input()\n    l1 = [e for e in range(1, len(s) + 1)]\n    m = set(s)\n    l = list(s)\n    k = 0\n    q = 0\n    if len(m) == 1:\n        print(*l1)\n    else:\n        for i in m:\n            p = s.count(i)\n            x = 0\n            if s.count(i) % 2 != 0:\n                k += 1\n                x = 0\n                x = l.index(i, x)\n                x += 1\n                l1[len(s) // 2] = x\n                if s.count(i) > 1:\n                    p = s.count(i) - 1\n                else:\n                    p = 0\n            for e in range(0, p, 2):\n                x = l.index(i, x)\n                x += 1\n                l1[q] = x\n                x = l.index(i, x)\n                x += 1\n                l1[len(s) - q - 1] = x\n                q += 1\n        if k > 1:\n            print(-1)\n        else:\n            print(*l1)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    count = False\n    order = []\n    a = sorted(set(s))\n    temp = []\n    for i in range(len(a)):\n        temp.append([])\n        for j in range(len(s)):\n            if a[i] == s[j]:\n                temp[i].append(j)\n    for i in temp:\n        if len(i) % 2 != 0:\n            if count == True:\n                order = [-2]\n            count = True\n    if order != [-2]:\n        for i in temp:\n            if len(i) % 2 == 0:\n                for j in range(len(i)):\n                    if j % 2 == 0:\n                        order.insert(0, i[j])\n                    else:\n                        order.insert(len(order), i[j])\n            else:\n                for j in range(len(i) - 1):\n                    if j % 2 == 0:\n                        order.insert(0, i[j])\n                    else:\n                        order.insert(len(order), i[j])\n                order.insert(int(len(order) / 2), i[len(i) - 1])\n    for i in order:\n        print(i + 1, '', end='')\n    print()", "def getidxfreq(string):\n    arr = [[] for _ in range(26)]\n    for (i, l) in enumerate(string):\n        arr[ord(l) - 97].append(i)\n    return arr\nfor n in range(int(input())):\n    s = input()\n    L = len(s)\n    P = [None for _ in range(L)]\n    arr = getidxfreq(s)\n    countodd = sum([1 for x in arr if len(x) % 2 == 1])\n    if countodd > 1:\n        print('-1')\n    else:\n        (odd, k) = ('', 0)\n        letters = [l for l in 'abcdefghijklmnopqrstuvwxyz' if len(arr[ord(l) - 97]) > 0]\n        for l in letters:\n            if len(arr[ord(l) - 97]) % 2 == 1:\n                odd = l\n            else:\n                where = arr[ord(l) - 97]\n                for i in range(0, len(arr[ord(l) - 97]), 2):\n                    P[k] = where[i]\n                    P[L - k - 1] = where[i + 1]\n                    k += 1\n        if odd != '':\n            where = arr[ord(odd) - 97]\n            for w in where:\n                P[k] = w\n                k += 1\n        print(' '.join([str(i + 1) for i in P]))", "tt = int(input())\nfor a0 in range(tt):\n    s = input()\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    t1 = 0\n    t2 = 0\n    for i in d:\n        if d[i] & 1 and t1 == 1:\n            t2 = -1\n            break\n        if d[i] & 1:\n            t1 += 1\n    if t2 == -1:\n        print('-1')\n        continue\n    f = {}\n    for i in range(len(s)):\n        if s[i] in f:\n            f[s[i]].append(i + 1)\n        else:\n            f[s[i]] = [i + 1]\n    t1 = ''\n    t2 = 1\n    lh = []\n    rh = []\n    for (i, j) in f.items():\n        l = len(j)\n        if l & 1:\n            t1 = j\n            t2 = -1\n            continue\n        for i in range(l):\n            if i & 1 == 1:\n                lh.append(j[i])\n            else:\n                rh.insert(0, j[i])\n    if t2 == -1:\n        finalarr = lh + t1 + rh\n    else:\n        finalarr = lh + rh\n    for i in finalarr:\n        print(i, end=' ')\n    print()", "for _ in range(int(input())):\n    s = input()\n    cnt = 0\n    p = 0\n    q = len(s) - 1\n    ans = [0 for x in range(q + 1)]\n    pos = 0\n    v = [[] for i in range(26)]\n    for i in range(len(s)):\n        a = ord(s[i]) - 97\n        v[a].append(i + 1)\n    for i in range(26):\n        if len(v[i]) % 2 == 1:\n            cnt += 1\n            pos = i\n    if cnt > 1:\n        print('-1')\n        continue\n    elif cnt == 1:\n        for i in range(26):\n            if len(v[i]) > 0 and len(v[i]) % 2 == 0:\n                for j in range(0, len(v[i]), 2):\n                    ans[p] = v[i][j]\n                    p += 1\n                    ans[q] = v[i][j + 1]\n                    q -= 1\n        for i in range(len(v[pos])):\n            ans[p] = v[pos][i]\n            p += 1\n    else:\n        for i in range(26):\n            if len(v[i]) > 0:\n                for j in range(0, len(v[i]), 2):\n                    ans[p] = v[i][j]\n                    p += 1\n                    ans[q] = v[i][j + 1]\n                    q -= 1\n    for i in range(len(s)):\n        print(ans[i], end=' ')\n    print(end='\\n')", "for _ in range(int(input())):\n    s = input()\n    cnt = 0\n    p = 0\n    q = len(s) - 1\n    ans = [0 for x in range(q + 1)]\n    pos = 0\n    v = [[] for i in range(26)]\n    for i in range(len(s)):\n        a = ord(s[i]) - 97\n        v[a].append(i + 1)\n    for i in range(26):\n        if len(v[i]) % 2 == 1:\n            cnt += 1\n            pos = i\n    if cnt > 1:\n        print('-1')\n        continue\n    elif cnt == 1:\n        for i in range(26):\n            if len(v[i]) > 0 and len(v[i]) % 2 == 0:\n                for j in range(0, len(v[i]), 2):\n                    ans[p] = v[i][j]\n                    p += 1\n                    ans[q] = v[i][j + 1]\n                    q -= 1\n        for i in range(len(v[pos])):\n            ans[p] = v[pos][i]\n            p += 1\n    else:\n        for i in range(26):\n            if len(v[i]) > 0:\n                for j in range(0, len(v[i]), 2):\n                    ans[p] = v[i][j]\n                    p += 1\n                    ans[q] = v[i][j + 1]\n                    q -= 1\n    for i in range(len(s)):\n        print(ans[i], end=' ')\n    print(end='\\n')", "from collections import Counter, defaultdict\nfor i in range(int(input())):\n    words = input()\n    word = Counter(words)\n    wl = len(words)\n    result = []\n    oneOdd = 0\n    notPalidrome = 0\n    for i in word:\n        if word[i] % 2 and oneOdd:\n            notPalidrome = 1\n            break\n        if word[i] % 2:\n            oneOdd = 1\n    if notPalidrome:\n        print('-1')\n    else:\n        d = defaultdict(list)\n        for i in range(len(words)):\n            d[words[i]].append(i + 1)\n        right = ''\n        left = ''\n        middle = ' '\n        for (k, v) in d.items():\n            length = len(v)\n            if length & 1:\n                middle = ' ' + str(v[-1]) + ' '\n                length -= 1\n            left += '' + ' '.join(map(str, v[:length:2])) + ' '\n            right = ' ' + ' '.join(map(str, v[1:length:2])) + right\n        total = left.strip() + middle + right.strip()\n        print(total.strip())", "for _ in range(int(input())):\n    s = input()\n    s = list(s)\n    l = sorted(list(set(s)))\n    o = []\n    c = 0\n    p = ''\n    for i in l:\n        if s.count(i) % 2 != 0:\n            c += 1\n            p = i\n    if c > 1:\n        print('-1')\n    elif c <= 1:\n        if c == 1:\n            l.remove(p)\n        for q in range(len(s)):\n            if p == s[q]:\n                o.append(str(q + 1))\n        for j in l:\n            w = s.count(j)\n            pa = 0\n            crawl = 0\n            for cr in range(len(s)):\n                if j == s[cr] and crawl < w // 2:\n                    o.insert(pa, str(cr + 1))\n                    pa += 1\n                    crawl += 1\n                elif j == s[cr] and w // 2 <= crawl < w:\n                    o.append(str(cr + 1))\n        print(*o)", "t = int(input())\nwhile t > 0:\n    st = input()\n    n = len(st)\n    co = [0] * 27\n    ne = [0] * n\n    ind = [0] * n\n    ma = [0] * n\n    for i in range(n):\n        x = ord(st[i]) - 97\n        co[x] += 1\n    c1 = 0\n    c2 = 0\n    for i in range(26):\n        if co[i] % 2 == 0:\n            c2 += 1\n        else:\n            c1 += 1\n    if n % 2 == 0:\n        if c1 > 0:\n            print('-1')\n        else:\n            ar = [[] for i in range(26)]\n            new = [0] * n\n            for i in range(n):\n                x = ord(st[i]) - 97\n                ar[x].append(i + 1)\n            j = 0\n            le = 0\n            for i in range(26):\n                while len(ar[j]) > 1:\n                    x = ar[j].pop()\n                    new[le] = x\n                    x = ar[j].pop()\n                    new[n - le - 1] = x\n                    le = le + 1\n                j = j + 1\n            for i in range(n):\n                print(new[i], end=' ')\n            print()\n    elif n % 2 == 1:\n        if c1 > 1:\n            print('-1')\n        else:\n            ar = [[] for i in range(26)]\n            new = [0] * n\n            for i in range(n):\n                x = ord(st[i]) - 97\n                ar[x].append(i + 1)\n            j = 0\n            le = 0\n            for i in range(26):\n                while len(ar[j]) > 1:\n                    x = ar[j].pop()\n                    new[le] = x\n                    x = ar[j].pop()\n                    new[n - le - 1] = x\n                    le = le + 1\n                j = j + 1\n            for i in range(26):\n                if len(ar[i]) == 1:\n                    x = ar[i].pop()\n                    break\n            new[n // 2] = x\n            for i in range(n):\n                print(new[i], end=' ')\n            print()\n    t = t - 1", "for test in range(int(input())):\n    string = input()\n    alpha = [[] for i in range(26)]\n    for j in range(len(string)):\n        a = ord(string[j]) - 97\n        alpha[a].append(j + 1)\n    (s1, s2, s3) = ([], [], [])\n    (signal, sig) = (2, -1)\n    for i in range(26):\n        if len(alpha[i]) % 2 != 0:\n            signal -= 1\n            sig = i\n        if signal == 0:\n            break\n    if signal == 0:\n        print('-1')\n        continue\n    for i in range(26):\n        if i != sig:\n            s1 += alpha[i][:len(alpha[i]) // 2]\n            s2 += alpha[i][len(alpha[i]) // 2:]\n    if sig != -1:\n        s3 = alpha[sig]\n    s1 = s1 + s3 + s2[::-1]\n    for k in s1:\n        print(k, end=' ')\n    print('')", "q = int(input())\nfor qq in range(q):\n    s = input()\n    n = len(s)\n    a = [(ord(s[i]) - ord('a'), i + 1) for i in range(n)]\n    counts = [0] * 26\n    for x in a:\n        counts[x[0]] += 1\n    odd = 0\n    for i in range(26):\n        if counts[i] % 2 == 1:\n            odd += 1\n    if odd > 1:\n        print(-1)\n        continue\n    a.sort(key=lambda x: x[0])\n    perm = [-1] * n\n    i = 0\n    while i < n:\n        if i == n - 1:\n            perm[i // 2] = a[i][1]\n            break\n        if a[i][0] != a[i + 1][0] and i % 2 == 0:\n            tmp = a[i]\n            a.pop(i)\n            a.append(tmp)\n            continue\n        perm[i // 2] = a[i][1]\n        perm[n - 1 - i // 2] = a[i + 1][1]\n        i += 2\n    for x in perm:\n        print(x, end=' ')\n    print('')", "for i in range(int(input())):\n    s = input()\n    w = set(s)\n    l = list(w)\n    l.sort()\n    o = []\n    odd = 0\n    p = ''\n    u = 0\n    for k in l:\n        c = s.count(k)\n        if c % 2 != 0:\n            odd = odd + 1\n            p = k\n    if odd > 1:\n        print(-1)\n    elif odd == 0 or odd == 1:\n        if odd == 1:\n            l.remove(p)\n        for q in range(len(s)):\n            if p == s[q]:\n                o.append(str(q + 1))\n        for q in l:\n            e = s.count(q)\n            y = 0\n            u = 0\n            for r in range(len(s)):\n                if q == s[r] and u < e // 2:\n                    o.insert(y, str(r + 1))\n                    u = u + 1\n                    y = y + 1\n                elif q == s[r] and e // 2 <= u < e:\n                    o.append(str(r + 1))\n        print(' '.join(o))", "for i in range(int(input())):\n    s = input()\n    w = set(s)\n    l = list(w)\n    l.sort()\n    o = []\n    odd = 0\n    p = ''\n    u = 0\n    for k in l:\n        c = s.count(k)\n        if c % 2 != 0:\n            odd = odd + 1\n            p = k\n    if odd > 1:\n        print(-1)\n    elif odd == 0 or odd == 1:\n        if odd == 1:\n            l.remove(p)\n        for q in range(len(s)):\n            if p == s[q]:\n                o.append(str(q + 1))\n        for q in l:\n            e = s.count(q)\n            y = 0\n            u = 0\n            for r in range(len(s)):\n                if q == s[r] and u < e // 2:\n                    o.insert(y, str(r + 1))\n                    u = u + 1\n                    y = y + 1\n                elif q == s[r] and e // 2 <= u < e:\n                    o.append(str(r + 1))\n        print(' '.join(o))", "t = int(input())\nwhile t:\n    st = input()\n    alp = []\n    n = len(st)\n    ans = [0] * n\n    mid = n // 2\n    alph = 'abcdefghijklmnopqrstuvwxyz'\n    for p in alph:\n        arr2 = []\n        for i in range(n):\n            if p == st[i]:\n                arr2.append(i + 1)\n        alp.append(arr2)\n    odd = 0\n    m = 0\n    for i in range(26):\n        if len(alp[i]) % 2 != 0:\n            odd += 1\n            m = i\n            if odd > 1:\n                break\n    if odd > 1:\n        print('-1')\n    else:\n        if odd == 1:\n            ans[mid] = alp[m][0]\n            alp[m].pop(0)\n        j = 0\n        flag = 0\n        ind = 0\n        te = list()\n        for y in alp:\n            if len(y) != 0 and j <= n // 2:\n                temp = len(y)\n                for i in range(temp // 2):\n                    ans[j] = y[i]\n                    ind = j\n                    j += 1\n                    ans[n - 1 - ind] = y[temp - 1 - i]\n        for z in ans:\n            print(z, end=' ')\n        print()\n    t -= 1", "testcases = int(input())\nfor q in range(testcases):\n    input_string = input()\n    alphabet = {}\n    alphabet_order = []\n    final_string = []\n    for i in range(0, len(input_string)):\n        try:\n            alphabet[input_string[i]].append(i + 1)\n        except:\n            alphabet[input_string[i]] = []\n            alphabet_order.append(input_string[i])\n            alphabet[input_string[i]].append(i + 1)\n    odd_index = list()\n    for (key, value) in alphabet.items():\n        if len(value) % 2 == 1:\n            odd_index.append(key)\n    if len(odd_index) > 1:\n        print('-1')\n        continue\n    elif len(odd_index) == 1:\n        for i in alphabet_order:\n            if len(alphabet.get(i)) % 2 == 1:\n                continue\n            half_len = int(len(alphabet.get(i)) / 2)\n            for j in range(0, half_len):\n                final_string.append(alphabet.get(i).pop(j))\n        for i in range(0, len(alphabet.get(odd_index[0]))):\n            final_string.append(alphabet.get(odd_index[0])[i])\n        alphabet_order.pop(alphabet_order.index(odd_index[0]))\n        for i in reversed(alphabet_order):\n            for j in range(0, len(alphabet.get(i))):\n                final_string.append(alphabet.get(i)[j])\n        print(' '.join([str(x) for x in final_string]))\n    else:\n        for i in alphabet_order:\n            half_len = int(len(alphabet.get(i)) / 2)\n            for j in range(0, half_len):\n                final_string.append(alphabet.get(i).pop(j))\n        for i in reversed(alphabet_order):\n            for j in range(0, len(alphabet.get(i))):\n                final_string.append(alphabet.get(i)[j])\n        print(' '.join([str(x) for x in final_string]))", "from collections import Counter, defaultdict\nt = int(input())\nwhile t > 0:\n    s = input()\n    c = Counter(s)\n    temp = [count for count in c.values() if count % 2 == 1]\n    if len(temp) <= 1:\n        freq = defaultdict(list)\n        for (idx, char) in enumerate(s):\n            freq[char].append(idx + 1)\n        leftPart = ''\n        middlePart = ' '\n        rightPart = ''\n        for (k, v) in freq.items():\n            length = len(v)\n            if len(v) % 2 == 1:\n                middlePart = ' ' + str(v[-1]) + ' '\n                length -= 1\n            leftPart += ' ' + ' '.join(map(str, v[:length:2]))\n            rightPart = ' '.join(map(str, v[1:length:2])) + ' ' + rightPart\n        answer = leftPart.strip() + middlePart + rightPart.strip()\n        print(answer.strip())\n    else:\n        print('-1')\n    t -= 1", "for k in range(int(input())):\n    s = list(input())\n    l = list(set(s))\n    l.sort()\n    n = len(l)\n    t = []\n    mark = 2\n    flag = 0\n    pos = 0\n    chk = -1\n    for i in range(n):\n        total_alpha = 0\n        for j in range(len(s)):\n            if l[i] == s[j]:\n                if mark == 2:\n                    pos = i\n                    t.insert(len(t) // 2, j + 1)\n                total_alpha = total_alpha + 1\n        if total_alpha % 2 != 0:\n            mark = mark - 1\n            chk = pos\n        if mark == 0:\n            flag = 1\n            break\n    if flag == 0 and chk != -1:\n        for i in range(chk + 1, n):\n            cnt = s.count(l[i])\n            pointer = 1\n            for j in range(len(s)):\n                if l[i] == s[j] and pointer <= cnt // 2:\n                    t.insert(0, j + 1)\n                    pointer = pointer + 1\n                elif l[i] == s[j] and pointer > cnt // 2:\n                    t.insert(len(t), j + 1)\n                    pointer = pointer + 1\n    if flag == 1:\n        print('-1')\n    else:\n        string = ' '.join(map(str, t))\n        print(string)", "test = int(input())\nfor tt in range(test):\n    text = input()\n    data = {}\n    data_len = len(text)\n    ans = [0] * data_len\n    i = 1\n    for c in text:\n        if c not in data:\n            data[c] = []\n        data[c].append(i)\n        i += 1\n    odd_chars = 0\n    the_final_index = 0\n    the_odd_key = -1\n    the_length = data_len - 1\n    for (key, value) in data.items():\n        if len(value) & 1:\n            the_odd_key = key\n            odd_chars += 1\n    if odd_chars >= 2:\n        print('-1')\n    else:\n        if the_odd_key != -1:\n            ans[data_len // 2] = data[the_odd_key].pop()\n        for (key, value) in data.items():\n            temp = 0\n            for item in value:\n                if temp & 1:\n                    ans[the_final_index] = item\n                    the_final_index += 1\n                else:\n                    ans[the_length - the_final_index] = item\n                temp += 1\n        print(*ans)", "from collections import deque\nstr = 'abcdefghijklmnopqrstuvwxyz'\nfor i in range(int(input())):\n    x = input()\n    ls = deque()\n    odd = 0\n    con = []\n    z = -1\n    flag = 0\n    if len(x) == 1:\n        print('1')\n    else:\n        for k in str:\n            y = x.count(k)\n            if y % 2:\n                odd = odd + 1\n                z = k\n            con.append(y)\n        if odd > 1:\n            flag = 1\n        else:\n            if z != -1:\n                m = ord(z) - 97\n                e = x.find(chr(m + 97))\n                ls.append(e + 1)\n                con[m] -= 1\n                while con[m] > 0:\n                    e = x.find(chr(m + 97), e + 1)\n                    ls.append(e + 1)\n                    e = x.find(chr(m + 97), e + 1)\n                    ls.append(e + 1)\n                    con[m] -= 2\n            for l in x:\n                m = ord(l) - 97\n                if con[m] % 2 == 0 and con[m] > 1:\n                    f = 0\n                    while con[m] > 0:\n                        e = x.find(chr(m + 97), f)\n                        ls.appendleft(e + 1)\n                        e = x.find(chr(m + 97), e + 1)\n                        ls.append(e + 1)\n                        f = e + 1\n                        con[m] -= 2\n        if flag:\n            print('-1')\n        else:\n            for do in range(len(ls) - 1):\n                print(ls[do], end=' ')\n            print(ls[do + 1])", "from collections import Counter\nfor _ in range(int(input())):\n    s = str(input())\n    fs = s\n    t = 26\n    L = []\n    odd = []\n    ev = []\n    S = [0] * len(s)\n    while t:\n        L.append(0)\n        t = t - 1\n    if sum((v % 2 for v in Counter(s).values())) <= 1:\n        for i in s:\n            L[ord(i) - ord('a')] += 1\n        for i in L:\n            k = i\n            g = L.index(i)\n            chi = chr(g + 97)\n            L[g] = -1\n            chi = str(chi)\n            if k % 2 == 0:\n                while k:\n                    ev.append(chi)\n                    k -= 1\n            else:\n                while k:\n                    odd.append(chi)\n                    k -= 1\n        if len(s) % 2 != 0:\n            S[(len(s) - 1) // 2] = odd[0]\n            st = (len(s) - 1) // 2 - 1\n            ed = (len(s) - 1) // 2 + 1\n            tt = len(odd) - 1\n            ee = len(ev)\n            co = 0\n            while tt:\n                tt -= 2\n                S[st] = odd[0]\n                S[ed] = odd[0]\n                st -= 1\n                ed += 1\n            while ee:\n                ee -= 2\n                S[st] = ev[co]\n                co += 1\n                S[ed] = ev[co]\n                co += 1\n                st -= 1\n                ed += 1\n        else:\n            st = len(s) // 2 - 1\n            ed = st + 1\n            ee = len(ev)\n            co = 0\n            while ee:\n                ee -= 2\n                S[st] = ev[co]\n                co += 1\n                S[ed] = ev[co]\n                co += 1\n                st -= 1\n                ed += 1\n        ans = []\n        fS = S\n        for ii in fS:\n            A = fs.index(ii)\n            ans.append(A + 1)\n            fs = fs.replace(ii, 'Z', 1)\n        print(*ans)\n    else:\n        print(-1)", "t = int(input())\nfor r in range(t):\n    st = list(input().strip())\n    pal = {}\n    for i in range(len(st)):\n        if st[i] in pal:\n            pal[st[i]].append(str(i + 1))\n        else:\n            pal[st[i]] = [str(i + 1)]\n    v = sorted(pal.items(), key=lambda x: len(x[1]), reverse=True)\n    (o, e) = ([], [])\n    for k in range(len(v)):\n        if len(v[k][1]) % 2:\n            o.append(v[k][1])\n        else:\n            e.append(v[k][1])\n    if len(o) > 1:\n        print('-1')\n    elif len(e) != 0:\n        st = list(e[0])\n        for i in range(1, len(e)):\n            l = len(st)\n            st[l // 2:l // 2] = e[i]\n        if len(o) == 1:\n            l = len(st)\n            st[l // 2:l // 2] = o[0]\n        print(' '.join(st))\n    else:\n        print(' '.join(o[0]))", "from collections import defaultdict\n\ndef solve():\n    t = int(input())\n    for z in range(t):\n        a = input().strip()\n        charArr = defaultdict(list)\n        for i in range(len(a)):\n            charArr[a[i]].append(i)\n        oddChars = 0\n        oddChar = ''\n        for i in charArr.keys():\n            charArr[i].sort()\n            if len(charArr[i]) % 2 != 0:\n                oddChars += 1\n                oddChar = i\n        if oddChars > len(a) % 2:\n            print(-1)\n            continue\n        pos = [-1] * len(a)\n        ptr = 0\n        keyList = list(charArr.keys())\n        keyList.sort()\n        while ptr < len(a) // 2:\n            for i in keyList:\n                for j in range(len(charArr[i]) // 2):\n                    pos[charArr[i][j]] = ptr + 1\n                    pos[charArr[i][0 - j - 1]] = len(a) - ptr\n                    ptr += 1\n        if oddChars:\n            pos[charArr[oddChar][(len(charArr[oddChar]) - 1) // 2]] = ptr + 1\n        ans = [0] * len(a)\n        for i in range(len(a)):\n            ans[pos[i] - 1] = i + 1\n        print(' '.join([str(i) for i in ans]))\nsolve()", "from collections import defaultdict\nt = int(input())\nfor k in range(t):\n    s = input()\n    freq = defaultdict(int)\n    for letter in s:\n        freq[letter] += 1\n    odd = 0\n    for item in freq.values():\n        if item % 2 == 1:\n            odd += 1\n    if odd == 1 and len(s) % 2 == 1 or (odd == 0 and len(s) % 2 == 0):\n        arr = defaultdict(list)\n        for (i, value) in enumerate(s):\n            arr[value].append(i)\n        alpha = 'abcdefghijklmnopqrstuvwxyz'\n        t = ''\n        oddletter = ''\n        for letter in alpha:\n            if freq[letter] % 2 == 1:\n                oddletter = letter\n            if freq[letter] != 0:\n                t += letter * int(freq[letter] / 2)\n        T = t\n        if len(oddletter) > 0:\n            T += oddletter\n        T += t[::-1]\n        ans = ''\n        for letter in T:\n            ans += str(arr[letter].pop(0) + 1) + ' '\n        print(ans)\n    else:\n        print('-1')", "from collections import defaultdict\nt = int(input())\nfor k in range(t):\n    s = input()\n    freq = defaultdict(int)\n    for letter in s:\n        freq[letter] += 1\n    odd = 0\n    for item in freq.values():\n        if item % 2 == 1:\n            odd += 1\n    if odd == 1 and len(s) % 2 == 1 or (odd == 0 and len(s) % 2 == 0):\n        arr = defaultdict(list)\n        for (i, value) in enumerate(s):\n            arr[value].append(i)\n        alpha = 'abcdefghijklmnopqrstuvwxyz'\n        t = ''\n        oddletter = ''\n        for letter in alpha:\n            if freq[letter] % 2 == 1:\n                oddletter = letter\n            if freq[letter] != 0:\n                t += letter * int(freq[letter] / 2)\n        T = t\n        if len(oddletter) > 0:\n            T += oddletter\n        T += t[::-1]\n        ans = ''\n        for letter in T:\n            ans += str(arr[letter].pop(0) + 1) + ' '\n        print(ans)\n    else:\n        print('-1')"]