["def heler_kadane(arr, n):\n    max1 = arr[0]\n    max_point = arr[0]\n    for i in range(1, n):\n        max1 = max(arr[i], max1 + arr[i])\n        max_point = max(max1, max_point)\n    return max_point\nt = int(input())\nfor i in range(0, t):\n    l = list(map(int, input().split()))\n    n = l[0]\n    k = l[1]\n    arr = list(map(int, input().split()))\n    arrb = []\n    if k == 1:\n        maxsum = heler_kadane(arr, n)\n    elif k == 2:\n        for j in range(0, 2 * n):\n            arrb.append(arr[j % n])\n        maxsum = heler_kadane(arrb, 2 * n)\n    elif k == 3:\n        for j in range(0, 3 * n):\n            arrb.append(arr[j % n])\n        maxsum = heler_kadane(arrb, 3 * n)\n    else:\n        sum = 0\n        for j in range(0, n):\n            sum = sum + arr[j]\n        for j in range(0, 2 * n):\n            arrb.append(arr[j % n])\n        for j in range(0, k - 3):\n            arrb.append(sum)\n        for j in range(0, n):\n            arrb.append(arr[j])\n        maxsum = heler_kadane(arrb, k - 3 + 3 * n)\n    print(maxsum)", "def heler_kadane(arr, n):\n    max1 = arr[0]\n    max_point = arr[0]\n    for i in range(1, n):\n        max1 = max(arr[i], max1 + arr[i])\n        max_point = max(max1, max_point)\n    return max_point\nt = int(input())\nfor i in range(0, t):\n    l = list(map(int, input().split()))\n    n = l[0]\n    k = l[1]\n    arr = list(map(int, input().split()))\n    arrb = []\n    if k == 1:\n        maxsum = heler_kadane(arr, n)\n    elif k == 2:\n        for j in range(0, 2 * n):\n            arrb.append(arr[j % n])\n        maxsum = heler_kadane(arrb, 2 * n)\n    elif k == 3:\n        for j in range(0, 3 * n):\n            arrb.append(arr[j % n])\n        maxsum = heler_kadane(arrb, 3 * n)\n    else:\n        sum = 0\n        for j in range(0, n):\n            sum = sum + arr[j]\n        for j in range(0, 2 * n):\n            arrb.append(arr[j % n])\n        for j in range(0, k - 3):\n            arrb.append(sum)\n        for j in range(0, n):\n            arrb.append(arr[j])\n        maxsum = heler_kadane(arrb, k - 3 + 3 * n)\n    print(maxsum)", "import sys\n\ndef kadane(arr):\n    cur = 0\n    ans = -sys.maxsize\n    for i in arr:\n        cur = max(i, cur + i)\n        ans = max(cur, ans)\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    s = 0\n    for i in a:\n        s += i\n    if k == 1:\n        ans = kadane(a)\n    else:\n        b = []\n        for i in range(2):\n            for i in a:\n                b.append(i)\n        ans = kadane(b)\n        if s >= 0:\n            ans += (k - 2) * s\n    print(ans)", "import sys\n\ndef kadane(arr):\n    cur = 0\n    ans = -sys.maxsize\n    for i in arr:\n        cur = max(i, cur + i)\n        ans = max(cur, ans)\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    s = 0\n    for i in a:\n        s += i\n    if k == 1:\n        ans = kadane(a)\n    else:\n        b = []\n        for i in range(2):\n            for i in a:\n                b.append(i)\n        ans = kadane(b)\n        if s >= 0:\n            ans += (k - 2) * s\n    print(ans)", "import sys\n\ndef kadane(arr):\n    cur = 0\n    ans = -sys.maxsize\n    for i in arr:\n        cur = max(i, cur + i)\n        ans = max(cur, ans)\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    s = 0\n    for i in a:\n        s += i\n    if k == 1:\n        ans = kadane(a)\n    else:\n        b = []\n        for i in range(2):\n            for i in a:\n                b.append(i)\n        ans = kadane(b)\n        if s >= 0:\n            ans += (k - 2) * s\n    print(ans)", "import sys\n\ndef kadane(arr):\n    cur = 0\n    ans = -sys.maxsize\n    for i in arr:\n        cur = max(i, cur + i)\n        ans = max(cur, ans)\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    s = 0\n    for i in a:\n        s += i\n    if k == 1:\n        ans = kadane(a)\n    else:\n        b = []\n        for i in range(2):\n            for i in a:\n                b.append(i)\n        ans = kadane(b)\n        if s >= 0:\n            ans += (k - 2) * s\n    print(ans)", "import sys\n\ndef kadane(arr):\n    cur = 0\n    ans = -sys.maxsize\n    for i in arr:\n        cur = max(i, cur + i)\n        ans = max(cur, ans)\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    s = 0\n    for i in a:\n        s += i\n    if k == 1:\n        ans = kadane(a)\n    else:\n        b = []\n        for i in range(2):\n            for i in a:\n                b.append(i)\n        ans = kadane(b)\n        if s >= 0:\n            ans += (k - 2) * s\n    print(ans)", "import sys\n\ndef kadane(arr):\n    cur = 0\n    ans = -sys.maxsize\n    for i in arr:\n        cur = max(i, cur + i)\n        ans = max(cur, ans)\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    s = 0\n    for i in a:\n        s += i\n    if k == 1:\n        ans = kadane(a)\n    else:\n        b = []\n        for i in range(2):\n            for i in a:\n                b.append(i)\n        ans = kadane(b)\n        if s >= 0:\n            ans += (k - 2) * s\n    print(ans)", "def kadane(arr: list) -> int:\n    current_sum = 0\n    max_sum = arr[0]\n    for num in arr:\n        current_sum += num\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n\ndef max_subarr_sum(arr: list, n: int, k: int) -> int:\n    kadane_sum = kadane(arr)\n    if k == 1:\n        return kadane_sum\n    current_prefix_sum = 0\n    current_suffix_sum = 0\n    max_prefix_sum = arr[0]\n    for num in arr:\n        current_prefix_sum += num\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    max_suffix_sum = arr[-1]\n    total_sum = current_prefix_sum\n    for num in arr[::-1]:\n        current_suffix_sum += num\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    if total_sum < 0:\n        return max(max_suffix_sum + max_prefix_sum, kadane_sum)\n    else:\n        return max(max_suffix_sum + max_prefix_sum + total_sum * (k - 2), kadane_sum)\nt = int(input())\nfor x in range(t):\n    n_k = list(map(int, input().split()))\n    n = n_k[0]\n    k = n_k[1]\n    arr = list(map(int, input().split()))\n    print(max_subarr_sum(arr, n, k))", "def kadane(arr: list) -> int:\n    current_sum = 0\n    max_sum = arr[0]\n    for num in arr:\n        current_sum += num\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n\ndef max_subarr_sum(arr: list, n: int, k: int) -> int:\n    kadane_sum = kadane(arr)\n    if k == 1:\n        return kadane_sum\n    current_prefix_sum = 0\n    current_suffix_sum = 0\n    max_prefix_sum = arr[0]\n    for num in arr:\n        current_prefix_sum += num\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    max_suffix_sum = arr[-1]\n    total_sum = current_prefix_sum\n    for num in arr[::-1]:\n        current_suffix_sum += num\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    if total_sum < 0:\n        return max(max_suffix_sum + max_prefix_sum, kadane_sum)\n    else:\n        return max(max_suffix_sum + max_prefix_sum + total_sum * (k - 2), kadane_sum)\nt = int(input())\nfor x in range(t):\n    n_k = list(map(int, input().split()))\n    n = n_k[0]\n    k = n_k[1]\n    arr = list(map(int, input().split()))\n    print(max_subarr_sum(arr, n, k))", "import sys\n\ndef kadane(arr):\n    cur = 0\n    ans = -sys.maxsize\n    for i in arr:\n        cur = max(i, cur + i)\n        ans = max(cur, ans)\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    s = 0\n    for i in a:\n        s += i\n    if k == 1:\n        ans = kadane(a)\n    else:\n        b = []\n        for i in range(2):\n            for i in a:\n                b.append(i)\n        ans = kadane(b)\n        if s >= 0:\n            ans += (k - 2) * s\n    print(ans)", "import sys\n\ndef kadane(arr):\n    cur = 0\n    ans = -sys.maxsize\n    for i in arr:\n        cur = max(i, cur + i)\n        ans = max(cur, ans)\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    s = 0\n    for i in a:\n        s += i\n    if k == 1:\n        ans = kadane(a)\n    else:\n        b = []\n        for i in range(2):\n            for i in a:\n                b.append(i)\n        ans = kadane(b)\n        if s >= 0:\n            ans += (k - 2) * s\n    print(ans)", "def mxarr(arr):\n    max1 = arr[0]\n    maxpo = arr[0]\n    for i in range(1, len(arr)):\n        max1 = max(arr[i], arr[i] + max1)\n        maxpo = max(max1, maxpo)\n    return maxpo\nt = int(input())\nfor i in range(t):\n    l = list(map(int, input().split()))\n    n = l[0]\n    k = l[1]\n    arr = list(map(int, input().split()))\n    if k == 1:\n        maxpo = mxarr(arr)\n    else:\n        sum = 0\n        for i in range(len(arr)):\n            sum += arr[i]\n        newarr = arr\n        for i in range(len(arr)):\n            newarr.append(arr[i])\n        maxpo = max(mxarr(newarr), mxarr(newarr) + sum * (k - 2))\n    print(maxpo)", "def mxarr(arr):\n    max1 = arr[0]\n    maxpo = arr[0]\n    for i in range(1, len(arr)):\n        max1 = max(arr[i], arr[i] + max1)\n        maxpo = max(max1, maxpo)\n    return maxpo\nt = int(input())\nfor i in range(t):\n    l = list(map(int, input().split()))\n    n = l[0]\n    k = l[1]\n    arr = list(map(int, input().split()))\n    if k == 1:\n        maxpo = mxarr(arr)\n    else:\n        sum = 0\n        for i in range(len(arr)):\n            sum += arr[i]\n        newarr = arr\n        for i in range(len(arr)):\n            newarr.append(arr[i])\n        maxpo = max(mxarr(newarr), mxarr(newarr) + sum * (k - 2))\n    print(maxpo)", "def solve(a, n, m):\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in range(1, m):\n        curr_max = max(a[i % n], curr_max + a[i % n])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = [int(x) for x in input().split()]\n    if k == 1:\n        print(solve(l, n, n))\n    else:\n        subSum = solve(l, n, 2 * n)\n        s = 0\n        for i in l:\n            s += i\n        print(max(subSum, subSum + s * (k - 2)))", "def li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\n\ndef maxum(a, n):\n    max_so_far = -1e+19\n    curr_max = 0\n    for i in range(n):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\nfor tastcas in range(int(input())):\n    (n, k) = li()\n    a = li()\n    if k == 1:\n        print(maxum(a, n))\n        continue\n    s = sum(a)\n    ans = maxum(a + a, 2 * n)\n    if s >= 0:\n        ans += (k - 2) * s\n    print(ans)", "import sys\n\ndef kadane(a):\n    cur = 0\n    ans = -sys.maxsize\n    for i in a:\n        cur = max(cur + i, i)\n        ans = max(cur, ans)\n    return ans\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    if k == 1:\n        t = kadane(a)\n        print(t)\n        continue\n    s = 0\n    for i in a:\n        s += i\n    b = []\n    for i in range(2):\n        for i in a:\n            b.append(i)\n    t = kadane(b)\n    if s >= 0:\n        t += (k - 2) * s\n    print(t)", "def KADANE_s(a):\n    curr_sum = 0\n    best_sum = float('-inf')\n    for i in a:\n        curr_sum += i\n        if best_sum < curr_sum:\n            best_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return best_sum\n\ndef maxSubarrSum(a, n, k):\n    k_sum = KADANE_s(a)\n    if k == 1:\n        return k_sum\n    (suffix_sum, max_suffix_sum) = (0, float('-inf'))\n    (prefix_sum, max_prefix_sum) = (0, float('-inf'))\n    for i in range(n - 1, -1, -1):\n        suffix_sum += a[i]\n        if max_suffix_sum < suffix_sum:\n            max_suffix_sum = suffix_sum\n    for i in a:\n        prefix_sum += i\n        if max_prefix_sum < prefix_sum:\n            max_prefix_sum = prefix_sum\n    total_sum = prefix_sum\n    if total_sum < 0:\n        ans = max(max_prefix_sum + max_suffix_sum, k_sum)\n    else:\n        ans = max(max_prefix_sum + max_suffix_sum + total_sum * (k - 2), k_sum)\n    return ans\nt = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = maxSubarrSum(a, n, k)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    pr = [0] * n\n    suf = [0] * n\n    bs = suf[-1] = a[-1]\n    bp = pr[0] = a[0]\n    for i in range(1, n):\n        pr[i] = pr[i - 1] + a[i]\n        suf[-(i + 1)] = suf[-i] + a[-(i + 1)]\n        if bp < pr[i]:\n            bp = pr[i]\n        if bs < suf[-(i + 1)]:\n            bs = suf[-(i + 1)]\n    kad = a[0]\n    cs = a[0]\n    for i in range(1, n):\n        cs += a[i]\n        if cs > kad:\n            kad = cs\n        if cs <= 0:\n            cs = 0\n    res = 0\n    if k == 1:\n        res = kad\n    elif pr[-1] >= 0 and k >= 2:\n        res = (k - 2) * pr[-1] + bp + bs\n    else:\n        res = max(bp + bs, kad)\n    print(res)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    pr = [0] * n\n    suf = [0] * n\n    bs = suf[-1] = a[-1]\n    bp = pr[0] = a[0]\n    for i in range(1, n):\n        pr[i] = pr[i - 1] + a[i]\n        suf[-(i + 1)] = suf[-i] + a[-(i + 1)]\n        if bp < pr[i]:\n            bp = pr[i]\n        if bs < suf[-(i + 1)]:\n            bs = suf[-(i + 1)]\n    kad = a[0]\n    cs = a[0]\n    for i in range(1, n):\n        cs += a[i]\n        if cs > kad:\n            kad = cs\n        if cs <= 0:\n            cs = 0\n    res = 0\n    if k == 1:\n        res = kad\n    elif pr[-1] >= 0 and k >= 2:\n        res = (k - 2) * pr[-1] + bp + bs\n    else:\n        res = max(bp + bs, kad)\n    print(res)", "import sys\n\ndef kadane(arr):\n    if len(arr) == 0:\n        return 0\n    ans = -sys.maxsize\n    cur = 0\n    for i in arr:\n        cur = max(cur + i, i)\n        ans = max(cur, ans)\n    return ans\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    if k == 1:\n        ans = kadane(a)\n        print(ans)\n        continue\n    s = sum(a)\n    b = []\n    for i in range(2):\n        for j in a:\n            b.append(j)\n    if s < 0:\n        ans = kadane(b)\n        print(ans)\n    else:\n        ans = kadane(b)\n        ans += (k - 2) * s\n        print(ans)", "def KADANE_s(a):\n    curr_sum = 0\n    best_sum = float('-inf')\n    for i in a:\n        curr_sum += i\n        if best_sum < curr_sum:\n            best_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return best_sum\n\ndef maxSubarrSum(a, n, k):\n    k_sum = KADANE_s(a)\n    if k == 1:\n        return k_sum\n    (suffix_sum, max_suffix_sum) = (0, float('-inf'))\n    (prefix_sum, max_prefix_sum) = (0, float('-inf'))\n    for i in range(n - 1, -1, -1):\n        suffix_sum += a[i]\n        if max_suffix_sum < suffix_sum:\n            max_suffix_sum = suffix_sum\n    for i in a:\n        prefix_sum += i\n        if max_prefix_sum < prefix_sum:\n            max_prefix_sum = prefix_sum\n    total_sum = prefix_sum\n    if total_sum < 0:\n        ans = max(max_prefix_sum + max_suffix_sum, k_sum)\n    else:\n        ans = max(max_prefix_sum + max_suffix_sum + total_sum * (k - 2), k_sum)\n    return ans\nt = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = maxSubarrSum(a, n, k)\n    print(ans)", "import sys\n\ndef kadane(arr):\n    if len(arr) == 0:\n        return 0\n    ans = -sys.maxsize\n    cur = 0\n    for i in arr:\n        cur = max(cur + i, i)\n        ans = max(cur, ans)\n    return ans\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    if k == 1:\n        ans = kadane(a)\n        print(ans)\n        continue\n    s = sum(a)\n    b = []\n    for i in range(2):\n        for j in a:\n            b.append(j)\n    if s < 0:\n        ans = kadane(b)\n        print(ans)\n    else:\n        ans = kadane(b)\n        ans += (k - 2) * s\n        print(ans)", "import sys\n\ndef kadane(arr):\n    if len(arr) == 0:\n        return 0\n    ans = -sys.maxsize\n    cur = 0\n    for i in arr:\n        cur = max(cur + i, i)\n        ans = max(ans, cur)\n    return ans\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    s = sum(a)\n    if k == 1:\n        ans = kadane(a)\n        print(ans)\n        continue\n    b = []\n    for i in range(2):\n        for j in a:\n            b.append(j)\n    ans = kadane(b)\n    if s < 0:\n        print(ans)\n    else:\n        ans = ans + (k - 2) * s\n        print(ans)", "def kadanes(nums):\n    currentSum = float('-inf')\n    overallSum = float('-inf')\n    for x in range(len(nums)):\n        tempSum = currentSum + nums[x]\n        if nums[x] < tempSum:\n            currentSum = tempSum\n        else:\n            currentSum = nums[x]\n        if currentSum > overallSum:\n            overallSum = currentSum\n    return overallSum\nT = int(input())\nwhile T > 0:\n    T -= 1\n    (N, K) = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n    if K == 1:\n        print(kadanes(A))\n    else:\n        arrSum = sum(A)\n        A = 2 * A\n        if arrSum < 0:\n            print(kadanes(A))\n        else:\n            print(kadanes(A) + (K - 2) * arrSum)", "def subarr(arr):\n    m = float('-inf')\n    s = 0\n    for i in arr:\n        s = s + i\n        m = max(m, s)\n        if s < 0:\n            s = 0\n    return m\nt = int(input())\nout = []\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    z = subarr(arr)\n    s = sum(arr)\n    arr = arr + arr\n    c = subarr(arr)\n    if k == 1:\n        out.append(z)\n    elif s >= 0:\n        out.append(c + s * (k - 2))\n    else:\n        out.append(c)\nfor i in out:\n    print(i)", "def subarr(arr):\n    m = float('-inf')\n    s = 0\n    for i in arr:\n        s = s + i\n        m = max(m, s)\n        if s < 0:\n            s = 0\n    return m\nt = int(input())\nout = []\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    z = subarr(arr)\n    s = sum(arr)\n    arr = arr + arr\n    c = subarr(arr)\n    if k == 1:\n        out.append(z)\n    elif s >= 0:\n        out.append(c + s * (k - 2))\n    else:\n        out.append(c)\nfor i in out:\n    print(i)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    pre = [0] * n\n    suf = [0] * n\n    bs = suf[-1] = a[-1]\n    bp = pre[0] = a[0]\n    for i in range(1, n):\n        pre[i] = pre[i - 1] + a[i]\n        suf[-(i + 1)] = suf[-i] + a[-(i + 1)]\n        if bp < pre[i]:\n            bp = pre[i]\n        if bs < suf[-(i + 1)]:\n            bs = suf[-(i + 1)]\n    kad = a[0]\n    cs = a[0]\n    for i in range(1, n):\n        cs += a[i]\n        if cs > kad:\n            kad = cs\n        if cs <= 0:\n            cs = 0\n    res = 0\n    if k == 1:\n        res = kad\n    elif pre[-1] >= 0 and k >= 2:\n        res = (k - 2) * pre[-1] + bp + bs\n    else:\n        res = max(bp + bs, kad)\n    print(res)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    pre = [0] * n\n    suf = [0] * n\n    bs = suf[-1] = a[-1]\n    bp = pre[0] = a[0]\n    for i in range(1, n):\n        pre[i] = pre[i - 1] + a[i]\n        suf[-(i + 1)] = suf[-i] + a[-(i + 1)]\n        if bp < pre[i]:\n            bp = pre[i]\n        if bs < suf[-(i + 1)]:\n            bs = suf[-(i + 1)]\n    kad = a[0]\n    cs = a[0]\n    for i in range(1, n):\n        cs += a[i]\n        if cs > kad:\n            kad = cs\n        if cs <= 0:\n            cs = 0\n    res = 0\n    if pre[-1] >= 0 and k >= 2:\n        res = (k - 2) * pre[-1] + bp + bs\n    elif pre[-1] < 0 and k >= 2:\n        res = max(bp + bs, kad)\n    else:\n        res = kad\n    print(res)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    pre = [0] * n\n    suf = [0] * n\n    bs = suf[-1] = a[-1]\n    bp = pre[0] = a[0]\n    for i in range(1, n):\n        pre[i] = pre[i - 1] + a[i]\n        suf[-(i + 1)] = suf[-i] + a[-(i + 1)]\n        if bp < pre[i]:\n            bp = pre[i]\n        if bs < suf[-(i + 1)]:\n            bs = suf[-(i + 1)]\n    kad = a[0]\n    cs = a[0]\n    for i in range(1, n):\n        cs += a[i]\n        if cs > kad:\n            kad = cs\n        if cs <= 0:\n            cs = 0\n    res = 0\n    if pre[-1] >= 0 and k >= 2:\n        res = (k - 2) * pre[-1] + bp + bs\n    elif pre[-1] < 0 and k >= 2:\n        res = max(bp + bs, kad)\n    else:\n        res = kad\n    print(res)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    pre = [0] * n\n    suf = [0] * n\n    bs = suf[-1] = a[-1]\n    bp = pre[0] = a[0]\n    for i in range(1, n):\n        pre[i] = pre[i - 1] + a[i]\n        suf[-(i + 1)] = suf[-i] + a[-(i + 1)]\n        if bp < pre[i]:\n            bp = pre[i]\n        if bs < suf[-(i + 1)]:\n            bs = suf[-(i + 1)]\n    kad = a[0]\n    cs = a[0]\n    for i in range(1, n):\n        cs += a[i]\n        if cs > kad:\n            kad = cs\n        if cs <= 0:\n            cs = 0\n    res = 0\n    if pre[-1] >= 0 and k >= 2:\n        res = (k - 2) * pre[-1] + bp + bs\n    elif pre[-1] < 0 and k >= 2:\n        res = max(bp + bs, kad)\n    else:\n        res = kad\n    print(res)", "T = int(input())\n\ndef kadane(arr, n):\n    (cur_sum, min_sum) = (0, minn)\n    for i in range(n):\n        cur_sum += arr[i]\n        if min_sum < cur_sum:\n            min_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = 0\n    return min_sum\nfor _ in range(T):\n    (n, k) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    minn = min(arr)\n    cur_sum = sum(arr)\n    kad = kadane(arr, n)\n    if k == 1:\n        print(kad)\n    else:\n        (cur_pre, cur_suf) = (0, 0)\n        (max_pre, max_suf) = (minn, minn)\n        for i in range(n):\n            cur_suf += arr[i]\n            max_suf = max(cur_suf, max_suf)\n        suf = max_suf\n        for i in range(n - 1, -1, -1):\n            cur_pre += arr[i]\n            max_pre = max(cur_pre, max_pre)\n        pre = max_pre\n        if cur_sum < 0:\n            print(max(suf + pre, kad))\n        elif cur_sum >= 0:\n            a1 = pre + suf + cur_sum * (k - 2)\n            print(max(a1, kad))", "import sys\nminn = -sys.maxsize - 1\nT = int(input())\n\ndef kadane(arr, n):\n    (cur_sum, min_sum) = (0, minn)\n    for i in range(n):\n        cur_sum += arr[i]\n        if min_sum < cur_sum:\n            min_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = 0\n    return min_sum\nfor _ in range(T):\n    (n, k) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    cur_sum = sum(arr)\n    kad = kadane(arr, n)\n    if k == 1:\n        print(kad)\n    else:\n        (cur_pre, cur_suf) = (0, 0)\n        (max_pre, max_suf) = (minn, minn)\n        for i in range(n):\n            cur_suf += arr[i]\n            max_suf = max(cur_suf, max_suf)\n        suf = max_suf\n        for i in range(n - 1, -1, -1):\n            cur_pre += arr[i]\n            max_pre = max(cur_pre, max_pre)\n        pre = max_pre\n        if cur_sum < 0:\n            print(max(suf + pre, kad))\n        elif cur_sum >= 0:\n            a1 = pre + suf + cur_sum * (k - 2)\n            print(max(a1, kad))", "import sys\nminn = -sys.maxsize - 1\nT = int(input())\n\ndef kadane(arr, n):\n    (cur_sum, min_sum) = (0, minn)\n    for i in range(n):\n        cur_sum += arr[i]\n        if min_sum < cur_sum:\n            min_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = 0\n    return min_sum\nfor _ in range(T):\n    (n, k) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    cur_sum = sum(arr)\n    kad = kadane(arr, n)\n    if k == 1:\n        print(kad)\n    else:\n        (cur_pre, cur_suf) = (0, 0)\n        (max_pre, max_suf) = (minn, minn)\n        for i in range(n):\n            cur_suf += arr[i]\n            max_suf = max(cur_suf, max_suf)\n        suf = max_suf\n        for i in range(n - 1, -1, -1):\n            cur_pre += arr[i]\n            max_pre = max(cur_pre, max_pre)\n        pre = max_pre\n        if cur_sum < 0:\n            print(max(suf + pre, kad))\n        elif cur_sum >= 0:\n            a1 = pre + suf + cur_sum * (k - 2)\n            print(max(a1, kad))", "from sys import stdin, stdout\ninput = stdin.readline\n\ndef func(arr):\n    n = len(arr)\n    (maxsum, total) = (0, 0)\n    neg_arr = [arr[i] for i in range(n) if arr[i] < 0]\n    neg = len(neg_arr)\n    if neg == n:\n        return max(arr)\n    for i in range(n):\n        total += arr[i]\n        if total < 0:\n            total = 0\n        else:\n            maxsum = max(maxsum, total)\n    return maxsum\nt = int(input().strip())\nfor _ in range(t):\n    (n, k) = list(map(int, input().strip().split()))\n    arr = list(map(int, input().strip().split()))\n    if k == 1:\n        print(func(arr))\n    elif k == 2:\n        a = func(arr)\n        b = func(arr + arr)\n        print(b)\n    else:\n        a = func(arr)\n        b = func(arr + arr)\n        c = func(arr + arr + arr)\n        ans = b + (k - 2) * (c - b)\n        print(ans)", "from sys import stdin, stdout\ninput = stdin.readline\n\ndef func(arr):\n    n = len(arr)\n    (maxsum, total) = (0, 0)\n    neg_arr = [arr[i] for i in range(n) if arr[i] < 0]\n    neg = len(neg_arr)\n    if neg == n:\n        return max(arr)\n    for i in range(n):\n        total += arr[i]\n        if total < 0:\n            total = 0\n        else:\n            maxsum = max(maxsum, total)\n    return maxsum\nt = int(input().strip())\nfor _ in range(t):\n    (n, k) = list(map(int, input().strip().split()))\n    arr = list(map(int, input().strip().split()))\n    if k == 1:\n        print(func(arr))\n    elif k == 2:\n        a = func(arr)\n        b = func(arr + arr)\n        print(max(a, b))\n    else:\n        a = func(arr)\n        b = func(arr + arr)\n        c = func(arr + arr + arr)\n        diff1 = b - a\n        diff2 = c - b\n        ans = b + (k - 2) * diff2\n        print(ans)", "from sys import stdin, stdout\ninput = stdin.readline\n\ndef func(arr):\n    n = len(arr)\n    (maxsum, total) = (0, 0)\n    neg_arr = [arr[i] for i in range(n) if arr[i] < 0]\n    neg = len(neg_arr)\n    if neg == n:\n        return max(arr)\n    for i in range(n):\n        total += arr[i]\n        if total < 0:\n            total = 0\n        else:\n            maxsum = max(maxsum, total)\n    return maxsum\nt = int(input().strip())\nfor _ in range(t):\n    (n, k) = list(map(int, input().strip().split()))\n    arr = list(map(int, input().strip().split()))\n    if k == 1:\n        print(func(arr))\n    elif k == 2:\n        a = func(arr)\n        b = func(arr + arr)\n        print(max(a, b))\n    else:\n        a = func(arr)\n        b = func(arr + arr)\n        c = func(arr + arr + arr)\n        diff1 = b - a\n        diff2 = c - b\n        ans = b + (k - 2) * diff2\n        print(ans)", "import sys, math\nsys.setrecursionlimit(10 ** 5)\n\ndef pro(arr, k):\n    n = len(arr)\n    s = sum(arr)\n    ans = kadane(arr)\n    if k == 1:\n        print(ans)\n        return\n    t1 = -math.inf\n    c = 0\n    for i in range(n):\n        c += arr[i]\n        t1 = max(t1, c)\n    t2 = -math.inf\n    c = 0\n    for i in range(n - 1, -1, -1):\n        c += arr[i]\n        t2 = max(t2, c)\n    ans = max(ans, t1 + t2, t1 + t2 + (k - 2) * s)\n    print(ans)\n\ndef kadane(arr):\n    n = len(arr)\n    maxi = -math.inf\n    curr = 0\n    for i in range(n):\n        curr = max(curr + arr[i], arr[i])\n        maxi = max(maxi, curr)\n    return maxi\nn = int(input())\nfor i in range(n):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    pro(arr, k)", "def mxarr(arr):\n    max1 = arr[0]\n    maxpo = arr[0]\n    for i in range(1, len(arr)):\n        max1 = max(arr[i], arr[i] + max1)\n        maxpo = max(max1, maxpo)\n    return maxpo\nt = int(input())\nfor i in range(t):\n    l = list(map(int, input().split()))\n    n = l[0]\n    k = l[1]\n    arr = list(map(int, input().split()))\n    if k == 1:\n        maxpo = mxarr(arr)\n    else:\n        sum = 0\n        for i in range(len(arr)):\n            sum += arr[i]\n        newarr = arr\n        for i in range(len(arr)):\n            newarr.append(arr[i])\n        maxpo = max(mxarr(newarr), mxarr(newarr) + sum * (k - 2))\n    print(maxpo)", "def kadane(k):\n    max_so_far = k[0]\n    curr_so_far = k[0]\n    for j in range(1, len(k)):\n        curr_so_far = max(k[j], curr_so_far + k[j])\n        max_so_far = max(max_so_far, curr_so_far)\n    return max_so_far\nx = int(input())\nfor i in range(x):\n    (y, z) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    if z == 1:\n        print(kadane(ar))\n    elif sum(ar) < 0:\n        print(kadane(ar * 2))\n    else:\n        temp = kadane(ar * 2) + (z - 2) * sum(ar)\n        print(temp)", "t = int(input())\n\ndef sum1(a):\n    max1 = a[0]\n    maxpo = a[0]\n    for i in range(1, len(a)):\n        max1 = max(a[i], a[i] + max1)\n        maxpo = max(max1, maxpo)\n        i += 1\n    return maxpo\nfor i in range(t):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    if K == 1:\n        max_sum = sum1(A)\n    else:\n        s = 0\n        for i in range(len(A)):\n            s += A[i]\n        A1 = A\n        for i in range(len(A)):\n            A1.append(A[i])\n        max_sum = max(sum1(A1), sum1(A1) + s * (K - 2))\n    print(max_sum)", "t = int(input())\n\ndef sum1(a):\n    max1 = a[0]\n    maxpo = a[0]\n    for i in range(1, len(a)):\n        max1 = max(a[i], a[i] + max1)\n        maxpo = max(max1, maxpo)\n        i += 1\n    return maxpo\nfor i in range(t):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    if K == 1:\n        max_sum = sum1(A)\n    else:\n        s = 0\n        for i in range(len(A)):\n            s += A[i]\n        A1 = A\n        for i in range(len(A)):\n            A1.append(A[i])\n        max_sum = max(sum1(A1), sum1(A1) + s * (K - 2))\n    print(max_sum)", "def mxarr(arr):\n    max1 = arr[0]\n    maxpo = arr[0]\n    for i in range(1, len(arr)):\n        max1 = max(arr[i], arr[i] + max1)\n        maxpo = max(max1, maxpo)\n        i += 1\n    return maxpo\nt = int(input())\nfor i in range(t):\n    l = list(map(int, input().split()))\n    n = l[0]\n    k = l[1]\n    arr = list(map(int, input().split()))\n    if k == 1:\n        maxpo = mxarr(arr)\n    else:\n        sum = 0\n        for i in range(len(arr)):\n            sum += arr[i]\n        newarr = arr\n        for i in range(len(arr)):\n            newarr.append(arr[i])\n        maxpo = max(mxarr(newarr), mxarr(newarr) + sum * (k - 2))\n    print(maxpo)", "def mxarr(arr):\n    max1 = arr[0]\n    maxpo = arr[0]\n    for i in range(1, len(arr)):\n        max1 = max(arr[i], arr[i] + max1)\n        maxpo = max(max1, maxpo)\n        i += 1\n    return maxpo\nt = int(input())\nfor i in range(t):\n    l = list(map(int, input().split()))\n    n = l[0]\n    k = l[1]\n    arr = list(map(int, input().split()))\n    if k == 1:\n        maxpo = mxarr(arr)\n    else:\n        sum = 0\n        for i in range(len(arr)):\n            sum += arr[i]\n        newarr = arr\n        for i in range(len(arr)):\n            newarr.append(arr[i])\n        maxpo = max(mxarr(newarr), mxarr(newarr) + sum * (k - 2))\n    print(maxpo)", "def mgc(arr, n, k):\n    s = sum(arr)\n    b = []\n    if k == 1:\n        b.extend(arr)\n    else:\n        b.extend(arr)\n        if s * (k - 2) > 0:\n            b.append(s * (k - 2))\n        b.extend(arr)\n    s = b[0]\n    gs = b[0]\n    for i in b[1:]:\n        s = max(i, s + i)\n        gs = max(s, gs)\n    return gs\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(mgc(arr, n, k))", "import sys\n\ndef maxsum(l):\n    ans = -sys.maxsize - 1\n    cur = 0\n    for i in l:\n        cur = max(cur + i, i)\n        ans = max(ans, cur)\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    s = 0\n    for i in a:\n        s += i\n    if k == 1:\n        ans = maxsum(a)\n        print(ans)\n    elif s < 0:\n        b = []\n        for i in range(2):\n            for j in a:\n                b.append(j)\n        print(maxsum(b))\n    else:\n        b = []\n        for i in range(2):\n            for j in a:\n                b.append(j)\n        t = maxsum(b)\n        print(t + (k - 2) * s)", "def mgc(arr, n, k):\n    s = sum(arr)\n    b = []\n    if k == 1:\n        b.extend(arr)\n    else:\n        b.extend(arr)\n        if s * (k - 2) > 0:\n            b.append(s * (k - 2))\n        b.extend(arr)\n    s = b[0]\n    gs = b[0]\n    for i in b[1:]:\n        s = max(i, s + i)\n        gs = max(s, gs)\n    return gs\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(mgc(arr, n, k))", "def heler_kadane(arr, n):\n    max1 = arr[0]\n    max_point = arr[0]\n    for i in range(1, n):\n        max1 = max(arr[i], max1 + arr[i])\n        max_point = max(max1, max_point)\n    return max_point\nt = int(input())\nfor i in range(0, t):\n    l = list(map(int, input().split()))\n    n = l[0]\n    k = l[1]\n    arr = list(map(int, input().split()))\n    arrb = []\n    if k == 1:\n        maxsum = heler_kadane(arr, n)\n    elif k == 2:\n        for j in range(0, 2 * n):\n            arrb.append(arr[j % n])\n        maxsum = heler_kadane(arrb, 2 * n)\n    elif k == 3:\n        for j in range(0, 3 * n):\n            arrb.append(arr[j % n])\n        maxsum = heler_kadane(arrb, 3 * n)\n    else:\n        sum = 0\n        for j in range(0, n):\n            sum = sum + arr[j]\n        for j in range(0, 2 * n):\n            arrb.append(arr[j % n])\n        for j in range(0, k - 3):\n            arrb.append(sum)\n        for j in range(0, n):\n            arrb.append(arr[j])\n        maxsum = heler_kadane(arrb, k - 3 + 3 * n)\n    print(maxsum)", "def kcon(n, k, arr):\n    if k < 3:\n        return maxSubArray(arr * k)\n    sum_arr = sum(arr)\n    max_sum_2_kcon = maxSubArray(arr * 2)\n    if sum_arr < 0:\n        return max_sum_2_kcon\n    return max_sum_2_kcon + sum_arr * (k - 2)\n\ndef maxSubArray(nums):\n    if not nums:\n        return 0\n    curr_sum = max_sum = nums[0]\n    for i in range(1, len(nums)):\n        curr_sum = max(nums[i], curr_sum + nums[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\nt = int(input())\nfor i in range(t):\n    (N, K) = map(int, input().split())\n    Arr = list(map(int, input().split()))\n    res = kcon(N, K, Arr)\n    print(res)", "def maxSubArraySum(array):\n    currentSum = array[0]\n    answer = array[0]\n    for x in array[1:]:\n        currentSum = max(currentSum + x, x)\n        answer = max(answer, currentSum)\n    return answer\nt = int(input())\nwhile t != 0:\n    t -= 1\n    (n, k) = list(map(int, input().split(' ')))\n    array = list(map(int, input().split(' ')))\n    s = sum(array)\n    if k == 1:\n        print(maxSubArraySum(array))\n    else:\n        temp = array + array\n        if s >= 0:\n            print(s * (k - 2) + maxSubArraySum(temp))\n        else:\n            print(maxSubArraySum(temp))", "import sys\ninpu = sys.stdin.readline\nprin = sys.stdout.write\nfor _ in range(int(inpu())):\n    (n, k) = map(int, inpu().split())\n    nums = list(map(int, inpu().split(' ')))\n    ms = nums[0]\n    cs = nums[0]\n    s = nums[0]\n    check = nums[0]\n    for i in range(1, n):\n        s += nums[i]\n        check = max(check, s)\n        if cs < 0:\n            cs = 0\n        cs += nums[i]\n        ms = max(cs, ms)\n    if k == 1:\n        prin(str(ms) + '\\n')\n        continue\n    q = nums[::-1]\n    ch = q[0]\n    ss = q[0]\n    for i in range(1, n):\n        ss += q[i]\n        ch = max(ch, ss)\n    a = nums * 2\n    mp = ms\n    for i in range(n, len(a)):\n        if cs < 0:\n            cs = 0\n        cs += a[i]\n        mp = max(cs, mp)\n    ch += s * (k - 2) + check\n    prin(str(max(mp, ms, ch)) + '\\n')", "import sys\ninpu = sys.stdin.readline\nprin = sys.stdout.write\nfor _ in range(int(inpu())):\n    (n, k) = map(int, inpu().split())\n    nums = list(map(int, inpu().split(' ')))\n    ms = nums[0]\n    cs = nums[0]\n    s = nums[0]\n    check = nums[0]\n    for i in range(1, n):\n        s += nums[i]\n        check = max(check, s)\n        if cs < 0:\n            cs = 0\n        cs += nums[i]\n        ms = max(cs, ms)\n    q = nums[::-1]\n    ch = q[0]\n    ss = q[0]\n    for i in range(1, n):\n        ss += q[i]\n        ch = max(ch, ss)\n    if k == 1:\n        prin(str(ms) + '\\n')\n        continue\n    a = nums * 2\n    mp = ms\n    for i in range(n, len(a)):\n        if cs < 0:\n            cs = 0\n        cs += a[i]\n        mp = max(cs, mp)\n    ch += s * (k - 2) + check\n    prin(str(max(mp, ms, ch)) + '\\n')", "import sys\ninpu = sys.stdin.readline\nfor _ in range(int(inpu())):\n    (n, k) = map(int, inpu().split())\n    nums = list(map(int, inpu().split(' ')))\n    ms = nums[0]\n    cs = nums[0]\n    s = nums[0]\n    check = nums[0]\n    for i in range(1, n):\n        s += nums[i]\n        check = max(check, s)\n        if cs < 0:\n            cs = 0\n        cs += nums[i]\n        ms = max(cs, ms)\n    q = nums[::-1]\n    ch = q[0]\n    ss = q[0]\n    for i in range(1, n):\n        ss += q[i]\n        ch = max(ch, ss)\n    if k == 1:\n        print(ms)\n        continue\n    a = nums * 2\n    mp = ms\n    for i in range(n, len(a)):\n        if cs < 0:\n            cs = 0\n        cs += a[i]\n        mp = max(cs, mp)\n    ch += s * (k - 2) + check\n    print(max(mp, ms, ch))", "def kadanes(seq):\n    (max_global, max_current) = (seq[0], seq[0])\n    for i in range(1, len(seq)):\n        max_current = max(seq[i] + max_current, seq[i])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if K == 1:\n        m = kadanes(arr)\n        print(m)\n        continue\n    else:\n        m = kadanes(arr + arr)\n        sum_arr = sum(arr)\n        if sum_arr < 0:\n            print(m)\n        else:\n            print(m + sum_arr * (K - 2))", "def kadanes_algo(arr):\n    dparr = [0] * len(arr)\n    ans = dparr[0] = arr[0]\n    for i in range(1, len(arr)):\n        dparr[i] = max(arr[i], arr[i] + dparr[i - 1])\n        ans = max(ans, dparr[i])\n    return ans\n\ndef solve(arr, k):\n    if k == 1:\n        print(kadanes_algo(arr))\n    else:\n        summ = sum(arr)\n        newarr = arr * 2\n        print(max(kadanes_algo(newarr), kadanes_algo(newarr) + summ * (k - 2)))\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        (n, k) = map(int, input().split(' '))\n        arr = list(map(int, input().split(' ')))\n        solve(arr, k)\nmain()", "for i in range(int(input())):\n    import sys\n    x = input().split(' ')\n    n = int(x[0])\n    k = int(x[1])\n    data = [int(num) for num in input().split(' ')]\n    datas = data * 2 if k > 1 else data\n    cs = 0\n    ms = -sys.maxsize\n    for num in datas:\n        cs += num\n        ms = max(ms, cs)\n        if cs < 0:\n            cs = 0\n    print(ms + (k - 2) * sum(data) if sum(data) > 0 and k > 1 else ms)", "from math import inf\n\ndef kadanes_algo(arr):\n    max_so_far = -inf\n    curr_sum = 0\n    for i in arr:\n        curr_sum = curr_sum + i\n        if max_so_far < curr_sum:\n            max_so_far = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_so_far\n\ndef maxarraysum(arr, n, k):\n    kadanes_sum = kadanes_algo(arr)\n    if k == 1:\n        return kadanes_sum\n    (curr_preffix_sum, curr_suffix_sum) = (0, 0)\n    (max_priffix_sum, max_suffix_sum) = (-inf, -inf)\n    for i in range(n):\n        curr_preffix_sum = curr_preffix_sum + arr[i]\n        max_priffix_sum = max(max_priffix_sum, curr_preffix_sum)\n    total_sum = curr_preffix_sum\n    for i in range(n - 1, -1, -1):\n        curr_suffix_sum = curr_suffix_sum + arr[i]\n        max_suffix_sum = max(max_suffix_sum, curr_suffix_sum)\n    if total_sum < 0:\n        return max(max_priffix_sum + max_suffix_sum, kadanes_sum)\n    else:\n        return max(max_priffix_sum + max_suffix_sum + total_sum * (k - 2), kadanes_sum)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(maxarraysum(arr, n, k))", "def getMax(arr):\n    max_elem = arr[0]\n    for elem in arr:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem\n\ndef getBestPrefixSum(arr, n):\n    prefix_sum = [elem for elem in arr]\n    for i in range(1, n):\n        prefix_sum[i] += prefix_sum[i - 1]\n    return getMax(prefix_sum)\n\ndef getBestSuffixSum(arr, n):\n    suffix_sum = [elem for elem in arr]\n    for i in range(n - 2, -1, -1):\n        suffix_sum[i] += suffix_sum[i + 1]\n    return getMax(suffix_sum)\n\ndef getKadaneMaxSum(arr, n):\n    current_sum = 0\n    best_sum = arr[0]\n    for i in range(n):\n        current_sum += arr[i]\n        if best_sum < current_sum:\n            best_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return best_sum\n\ndef getEntireArrSum(arr):\n    sum = 0\n    for elem in arr:\n        sum += elem\n    return sum\n\ndef solve(arr, n, k):\n    answer = 0\n    if k == 1:\n        answer = getKadaneMaxSum(arr, n)\n    elif k == 2:\n        answer = max(getKadaneMaxSum(arr, n), getBestPrefixSum(arr, n) + getBestSuffixSum(arr, n))\n    else:\n        array_sum = getEntireArrSum(arr)\n        if array_sum > 0:\n            answer = max(getKadaneMaxSum(arr, n), getBestPrefixSum(arr, n) + (k - 2) * array_sum + getBestSuffixSum(arr, n))\n        else:\n            answer = max(getKadaneMaxSum(arr, n), getBestPrefixSum(arr, n) + getBestSuffixSum(arr, n))\n    return answer\n\ndef main():\n    t = int(input())\n    while t:\n        (n, k) = (int(x) for x in input().split())\n        arr = [int(elem) for elem in input().split()]\n        print(solve(arr, n, k))\n        t -= 1\n    return\nmain()", "for t in range(0, int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))[:n]\n    t = 0\n    total = 0\n    dp = []\n    if k == 1:\n        new_arr = arr\n    else:\n        new_arr = arr * 2\n    for i in range(0, len(new_arr)):\n        if total < 0:\n            total = 0\n        total += new_arr[i]\n        dp.append(total)\n        t = 1\n    if k == 1:\n        print(max(dp))\n    elif sum(arr) > 0:\n        print(max(dp) + sum(arr) * (k - 2))\n    else:\n        print(max(dp))", "def solve(arr, size):\n    maxans = -10 ** 9\n    pref = 0\n    for i in range(size):\n        pref += arr[i]\n        maxans = max(maxans, pref)\n        if pref < 0:\n            pref = 0\n    return maxans\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    if k == 1:\n        print(solve(arr, n))\n    else:\n        summ = sum(arr)\n        if summ <= 0:\n            print(solve(arr + arr, n * 2))\n        else:\n            print(solve(arr + arr, n * 2) + (k - 2) * summ)", "import sys\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if k == 1:\n        globmax = sys.maxsize * -1\n        curmax = 0\n        for i in range(0, len(a)):\n            curmax = curmax + a[i]\n            if curmax > globmax:\n                globmax = curmax\n            if curmax < 0:\n                curmax = 0\n        print(globmax)\n    else:\n        summ = sum(a)\n        if summ < 0:\n            b = []\n            for i in range(0, 2):\n                for j in range(0, len(a)):\n                    b.append(a[j])\n            globmax = sys.maxsize * -1\n            curmax = 0\n            for i in range(0, len(b)):\n                curmax = curmax + b[i]\n                if curmax > globmax:\n                    globmax = curmax\n                if curmax < 0:\n                    curmax = 0\n            print(globmax)\n        else:\n            b = []\n            for i in range(0, 2):\n                for j in range(0, len(a)):\n                    b.append(a[j])\n            globmax = sys.maxsize * -1\n            curmax = 0\n            for i in range(0, len(b)):\n                curmax = curmax + b[i]\n                if curmax > globmax:\n                    globmax = curmax\n                if curmax < 0:\n                    curmax = 0\n            ans = globmax + (k - 2) * summ\n            print(ans)", "def maxSubarraySum(arr):\n    (maxSum, currSum) = (float('-inf'), 0)\n    for i in arr:\n        if currSum < 0:\n            currSum = i\n        else:\n            currSum += i\n        maxSum = max(maxSum, currSum)\n    return maxSum\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    arr = l[:]\n    for i in range(1, 2):\n        arr.extend(l)\n    s1 = maxSubarraySum(arr)\n    s2 = sum(l)\n    if k == 1:\n        print(maxSubarraySum(l))\n    elif s2 < 0:\n        print(s1)\n    else:\n        print(s1 + (k - 2) * s2)", "import sys\n\ndef kadane(arr):\n    max_so_far = arr[0]\n    curr_sum = arr[0]\n    for i in range(1, len(arr)):\n        curr_sum = max(arr[i], curr_sum + arr[i])\n        max_so_far = max(curr_sum, max_so_far)\n    return max_so_far\n\ndef max_sum(arr, kadane_sum, k):\n    if k <= 0:\n        return 0\n    if k == 1:\n        return kadane_sum\n    curr_pre_sum = 0\n    curr_suf_sum = 0\n    max_pre_sum = sys.maxsize * -1\n    max_suf_sum = sys.maxsize * -1\n    total_sum = 0\n    for i in range(len(arr)):\n        curr_pre_sum += arr[i]\n        max_pre_sum = max(curr_pre_sum, max_pre_sum)\n    total_sum = curr_pre_sum\n    for i in range(len(arr) - 1, -1, -1):\n        curr_suf_sum += arr[i]\n        max_suf_sum = max(curr_suf_sum, max_suf_sum)\n    if total_sum < 0:\n        return max(max_pre_sum + max_suf_sum, kadane_sum)\n    else:\n        return max(max_pre_sum + max_suf_sum + total_sum * (k - 2), kadane_sum)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    kadane_sum = kadane(arr)\n    ans = max_sum(arr, kadane_sum, k)\n    print(ans)", "def Kandans(arr):\n    m = arr[0]\n    m1 = arr[0]\n    for x in arr[1:]:\n        m = max(x, m + x)\n        m1 = max(m, m1)\n    return m1\nfor x in range(int(input())):\n    (N, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    s = sum(arr)\n    if k == 1:\n        print(Kandans(arr))\n    elif s <= 0:\n        print(Kandans(arr + arr))\n    else:\n        print(Kandans(arr + arr) + (k - 2) * s)", "def kadanes(arr):\n    c_m = arr[0]\n    o_m = arr[0]\n    s = arr[0]\n    for i in range(1, len(arr)):\n        s += arr[i]\n        if arr[i] >= s:\n            c_m = arr[i]\n            s = arr[i]\n        else:\n            c_m = s\n        o_m = max(c_m, o_m)\n    return o_m\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    if k == 1:\n        print(kadanes(arr))\n        continue\n    s = sum(arr)\n    if s < 0:\n        print(kadanes(arr + arr))\n        continue\n    else:\n        print(kadanes(arr + arr) + (k - 2) * s)\n        continue", "def kadane(arr):\n    c_m = arr[0]\n    o_m = arr[0]\n    s = arr[0]\n    for i in range(1, len(arr)):\n        s += arr[i]\n        if arr[i] >= s:\n            c_m = arr[i]\n            s = arr[i]\n            o_m = max(c_m, o_m)\n        else:\n            c_m = s\n            o_m = max(c_m, o_m)\n    return o_m\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    sumofarr = sum(arr)\n    if k == 1:\n        print(kadane(arr))\n    elif sumofarr < 0:\n        print(kadane(arr * 2))\n    else:\n        temp = kadane(arr * 2) + (k - 2) * sumofarr\n        print(temp)", "def kadane(k):\n    max_so_far = k[0]\n    curr_so_far = k[0]\n    for j in range(1, len(k)):\n        curr_so_far = max(k[j], curr_so_far + k[j])\n        max_so_far = max(max_so_far, curr_so_far)\n    return max_so_far\nx = int(input())\nfor i in range(x):\n    (y, z) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    if z == 1:\n        print(kadane(ar))\n    elif sum(ar) < 0:\n        print(kadane(ar * 2))\n    else:\n        temp = kadane(ar * 2) + (z - 2) * sum(ar)\n        print(temp)", "mod = 1000000007\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    om = a[0]\n    cm = a[0]\n    if k == 1:\n        for i in range(1, n, 1):\n            cm = max(a[i % n], cm + a[i % n])\n            om = max(om, cm)\n        print(om)\n    else:\n        c = 0\n        for i in range(n):\n            c = c + a[i]\n        if c <= 0:\n            a = a * 2\n            for i in range(1, n * 2, 1):\n                cm = max(a[i % n], cm + a[i % n])\n                om = max(om, cm)\n            print(om)\n        else:\n            a = a * 2\n            for i in range(1, n * 2, 1):\n                cm = max(a[i % n], cm + a[i % n])\n                om = max(om, cm)\n            print(om + (k - 2) * c)", "def kadane(k):\n    max_so_far = k[0]\n    curr_so_far = k[0]\n    for j in range(1, len(k)):\n        curr_so_far = max(k[j], curr_so_far + k[j])\n        max_so_far = max(max_so_far, curr_so_far)\n    return max_so_far\nx = int(input())\nfor i in range(x):\n    (y, z) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    if z == 1:\n        print(kadane(ar))\n    elif sum(ar) < 0:\n        print(kadane(ar * 2))\n    else:\n        temp = kadane(ar * 2) + (z - 2) * sum(ar)\n        print(temp)", "def solve(arr, k):\n\n    def kadanes(arr):\n        (curr, msf) = (arr[0], arr[0])\n        for i in range(1, len(arr)):\n            curr = max(curr + arr[i], arr[i])\n            msf = max(msf, curr)\n        return msf\n    S = sum(arr)\n    if k == 1:\n        return kadanes(arr)\n    sumConcat = kadanes(2 * arr)\n    if S > 0:\n        return sumConcat + (k - 2) * S\n    else:\n        return sumConcat\ntc = int(input())\nwhile tc:\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    print(solve(arr, k))\n    tc -= 1", "import sys\nt = int(input())\nwhile t > 0:\n    list1 = list(map(int, input().split()))\n    list2 = list(map(int, input().split()))\n    n = list1[0]\n    k = list1[1]\n\n    def kadane(li):\n        max_so_far = 0\n        max_ending_here = -sys.maxsize\n        for x in li:\n            max_so_far += x\n            if max_so_far > max_ending_here:\n                max_ending_here = max_so_far\n            if max_so_far < 0:\n                max_so_far = 0\n        return max_ending_here\n    li = []\n    sum = 0\n    for x in list2:\n        li.append(x)\n    for x in list2:\n        sum += x\n        li.append(x)\n    if k == 1:\n        ans = kadane(list2)\n    elif sum >= 0:\n        ans = kadane(li)\n        ans += (k - 2) * sum\n    elif sum < 0:\n        ans = kadane(li)\n    print(ans)\n    t -= 1", "def kanade(a, size):\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in range(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if k == 1:\n        print(kanade(arr, len(arr)))\n    elif sum(arr) < 0:\n        print(kanade(2 * arr, len(2 * arr)))\n    else:\n        temp = kanade(2 * arr, len(2 * arr)) + (k - 2) * sum(arr)\n        print(temp)", "def kanade(a, size):\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in range(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if k == 1:\n        print(kanade(arr, len(arr)))\n    elif sum(arr) < 0:\n        print(kanade(2 * arr, len(2 * arr)))\n    else:\n        temp = kanade(2 * arr, len(2 * arr)) + (k - 2) * sum(arr)\n        print(temp)", "import sys\ntt = int(input())\nfor _ in range(0, tt):\n    l = list(map(int, input().split()))\n    k = l[1]\n    darr = list(map(int, input().split()))\n    n = len(darr)\n    maxsofar = -999999\n    maxuphere = 0\n    for i in range(0, n * min(k, 2)):\n        maxuphere += darr[i % n]\n        if maxsofar < maxuphere:\n            maxsofar = maxuphere\n        if maxuphere < 0:\n            maxuphere = 0\n    if sum(darr) > 0:\n        if k == 1:\n            print(maxsofar)\n        else:\n            print(maxsofar + sum(darr) * (k - 2))\n    else:\n        print(maxsofar)", "import sys\nt = int(input())\nwhile t > 0:\n    list1 = list(map(int, input().split()))\n    list2 = list(map(int, input().split()))\n    n = list1[0]\n    k = list1[1]\n\n    def kadane(li):\n        max_so_far = 0\n        max_ending_here = -sys.maxsize\n        for x in li:\n            max_so_far += x\n            if max_so_far > max_ending_here:\n                max_ending_here = max_so_far\n            if max_so_far < 0:\n                max_so_far = 0\n        return max_ending_here\n    li = []\n    sum = 0\n    for x in list2:\n        li.append(x)\n    for x in list2:\n        sum += x\n        li.append(x)\n    if k == 1:\n        ans = kadane(list2)\n    elif sum >= 0:\n        ans = kadane(li)\n        ans += (k - 2) * sum\n    elif sum < 0:\n        ans = kadane(li)\n    print(ans)\n    t -= 1", "import sys\nt = int(input())\nwhile t > 0:\n    list1 = list(map(int, input().split()))\n    list2 = list(map(int, input().split()))\n    n = list1[0]\n    k = list1[1]\n\n    def kadane(li):\n        max_so_far = 0\n        max_ending_here = -sys.maxsize\n        for x in li:\n            max_so_far += x\n            if max_so_far > max_ending_here:\n                max_ending_here = max_so_far\n            if max_so_far < 0:\n                max_so_far = 0\n        return max_ending_here\n    li = []\n    sum = 0\n    for x in list2:\n        li.append(x)\n    for x in list2:\n        sum += x\n        li.append(x)\n    if k == 1:\n        ans = kadane(list2)\n    elif sum >= 0:\n        ans = kadane(li)\n        ans += (k - 2) * sum\n    elif sum < 0:\n        ans = kadane(li)\n    print(ans)\n    t -= 1", "T = int(input())\nfor i in range(T):\n    (n, k) = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    aa = sum(l)\n    if k == 1:\n        a = l[:]\n        maxi = -999999999\n        sumn = 0\n        for i in a:\n            sumn += i\n            if maxi < sumn:\n                maxi = sumn\n            if sumn < 0:\n                sumn = 0\n        print(maxi)\n        continue\n    if aa > 0:\n        a = l[:] * 2\n        maxi = -999999999\n        sumn = 0\n        for i in a:\n            sumn += i\n            if maxi < sumn:\n                maxi = sumn\n            if sumn < 0:\n                sumn = 0\n        print(maxi + (k - 2) * aa)\n        continue\n    else:\n        a = l[:] * 2\n        maxi = -999999999\n        sumn = 0\n        for i in a:\n            sumn += i\n            if maxi < sumn:\n                maxi = sumn\n            if sumn < 0:\n                sumn = 0\n        print(maxi)", "T = int(input())\nfor i in range(T):\n    (n, k) = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    aa = sum(l)\n    if k == 1:\n        a = l[:]\n        maxi = -999999999\n        sumn = 0\n        for i in a:\n            sumn += i\n            if maxi < sumn:\n                maxi = sumn\n            if sumn < 0:\n                sumn = 0\n        print(maxi)\n        continue\n    if aa > 0:\n        a = l[:] * 2\n        maxi = -999999999\n        sumn = 0\n        for i in a:\n            sumn += i\n            if maxi < sumn:\n                maxi = sumn\n            if sumn < 0:\n                sumn = 0\n        print(maxi + (k - 2) * aa)\n        continue\n    else:\n        a = l[:] * 2\n        maxi = -999999999\n        sumn = 0\n        for i in a:\n            sumn += i\n            if maxi < sumn:\n                maxi = sumn\n            if sumn < 0:\n                sumn = 0\n        print(maxi)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    curMax = maxSum = total = l[0]\n    for i in range(1, n * min(k, 2)):\n        curMax = max(curMax + l[i % n], l[i % n])\n        maxSum = max(maxSum, curMax)\n        if i < n:\n            total += l[i]\n    if total > 0 and k > 2:\n        maxSum += total * (k - 2)\n    print(maxSum)", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    aa = sum(l)\n    if k == 1:\n        a = l[:]\n        maxi = -999999999\n        sumn = 0\n        for i in a:\n            sumn += i\n            if maxi < sumn:\n                maxi = sumn\n            if sumn < 0:\n                sumn = 0\n        print(maxi)\n        continue\n    if aa > 0:\n        a = l[:] * 2\n        maxi = -999999999\n        sumn = 0\n        for i in a:\n            sumn += i\n            if maxi < sumn:\n                maxi = sumn\n            if sumn < 0:\n                sumn = 0\n        print(maxi + (k - 2) * aa)\n        continue\n    else:\n        a = l[:] * 2\n        maxi = -999999999\n        sumn = 0\n        for i in a:\n            sumn += i\n            if maxi < sumn:\n                maxi = sumn\n            if sumn < 0:\n                sumn = 0\n        print(maxi)", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    aa = sum(l)\n    if k == 1:\n        a = l[:]\n        maxi = -999999999\n        sumn = 0\n        for i in a:\n            sumn += i\n            if maxi < sumn:\n                maxi = sumn\n            if sumn < 0:\n                sumn = 0\n        print(maxi)\n        continue\n    if aa > 0:\n        a = l[:] * 2\n        maxi = -999999999\n        sumn = 0\n        for i in a:\n            sumn += i\n            if maxi < sumn:\n                maxi = sumn\n            if sumn < 0:\n                sumn = 0\n        print(maxi + (k - 2) * aa)\n        continue\n    else:\n        a = l[:] * 2\n        maxi = -999999999\n        sumn = 0\n        for i in a:\n            sumn += i\n            if maxi < sumn:\n                maxi = sumn\n            if sumn < 0:\n                sumn = 0\n        print(maxi)", "t = int(input())\nfor test in range(t):\n    (n, k) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    s = sum(l)\n    maxSum = l[0]\n    curSum = l[0]\n    i = 1\n    while i < len(l):\n        curSum = max(curSum + l[i], l[i])\n        if curSum > maxSum:\n            maxSum = curSum\n        i += 1\n    if maxSum == sum(l):\n        print(maxSum * k)\n    elif k == 1:\n        print(maxSum)\n    else:\n        ms = maxSum\n        maxSum = l[0]\n        curSum = l[0]\n        i = 1\n        l *= 2\n        while i < len(l):\n            curSum = max(curSum + l[i], l[i])\n            if curSum > maxSum:\n                maxSum = curSum\n            i += 1\n        if s > 0:\n            print((k - 2) * s + maxSum)\n        else:\n            print(maxSum)", "for _ in range(int(input())):\n    nk = input()\n    nk = list(map(int, nk.split()))\n    n = nk[0]\n    k = nk[1]\n    arr = input()\n    arr = list(map(int, arr.split()))\n    S = sum(arr)\n    maxSum = -2 ** 31\n    tempsum = 0\n    for i in range(len(arr)):\n        tempsum += arr[i]\n        tempsum = max(tempsum, arr[i])\n        maxSum = max(tempsum, maxSum)\n    baseSum = maxSum\n    if maxSum == S:\n        print(k * S)\n    elif k == 1:\n        print(maxSum)\n    else:\n        karr = 2 * arr\n        maxSum = -2 ** 31\n        tempsum = 0\n        for i in range(len(karr)):\n            tempsum += karr[i]\n            tempsum = max(tempsum, karr[i])\n            maxSum = max(tempsum, maxSum)\n        if S > 0:\n            print((k - 2) * S + maxSum)\n        else:\n            print(maxSum)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    g_max = l1[0]\n    c_max = l1[0]\n    total = sum(l1)\n    if k == 1:\n        for i in range(1, len(l1)):\n            c_max = max(l1[i], c_max + l1[i])\n            if c_max > g_max:\n                g_max = c_max\n        print(g_max)\n    elif k > 1 and sum(l1) <= 0:\n        l1 = l1 * 2\n        for i in range(1, len(l1)):\n            c_max = max(l1[i], c_max + l1[i])\n            if c_max > g_max:\n                g_max = c_max\n        print(g_max)\n    elif sum(l1) > 0:\n        l1 = l1 * 2\n        for i in range(1, len(l1)):\n            c_max = max(l1[i], c_max + l1[i])\n            if c_max > g_max:\n                g_max = c_max\n        print(g_max + (k - 2) * total)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    g_max = l1[0]\n    c_max = l1[0]\n    total = sum(l1)\n    if k == 1:\n        for i in range(1, len(l1)):\n            c_max = max(l1[i], c_max + l1[i])\n            if c_max > g_max:\n                g_max = c_max\n        print(g_max)\n    elif k > 1 and sum(l1) <= 0:\n        l1 = l1 * 2\n        for i in range(1, len(l1)):\n            c_max = max(l1[i], c_max + l1[i])\n            if c_max > g_max:\n                g_max = c_max\n        print(g_max)\n    elif sum(l1) > 0:\n        l1 = l1 * 2\n        for i in range(1, len(l1)):\n            c_max = max(l1[i], c_max + l1[i])\n            if c_max > g_max:\n                g_max = c_max\n        print(g_max + (k - 2) * total)", "def KCon(arr):\n    (flag, temp) = (arr[0], arr[0])\n    for i in range(1, len(arr)):\n        if flag >= 0:\n            flag += arr[i]\n        else:\n            flag = arr[i]\n        temp = max(flag, temp)\n    return temp\nT = int(input())\nres = []\nfor _ in range(T):\n    (N, K) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    if K == 1:\n        res.append(KCon(A))\n    elif sum(A) < 0:\n        res.append(KCon(A * 2))\n    else:\n        res.append(KCon(A * 2) + (K - 2) * sum(A))\nfor i in res:\n    print(i)", "def kadanes(arr):\n    cursum = arr[0]\n    maxsum = arr[0]\n    for i in range(1, len(arr)):\n        if cursum >= 0:\n            cursum += arr[i]\n        else:\n            cursum = arr[i]\n        maxsum = max(maxsum, cursum)\n    return maxsum\n\ndef kadanesOftwo(arr):\n    narr = arr[:] + arr[:]\n    return kadanes(narr)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr_sum = sum(arr)\n    if k == 1:\n        print(kadanes(arr))\n    elif arr_sum < 0:\n        print(kadanesOftwo(arr))\n    else:\n        print(kadanesOftwo(arr) + (k - 2) * arr_sum)", "def kadne_sum(arr, n):\n    currSum = 0\n    maxSum = float('-inf')\n    for i in range(n):\n        currSum += arr[i]\n        if maxSum < currSum:\n            maxSum = currSum\n        if currSum < 0:\n            currSum = 0\n    return maxSum\n\ndef max_subarray_sum(arr, n, k):\n    kadne_sum_value = kadne_sum(arr, n)\n    if k == 1:\n        return kadne_sum_value\n    curr_prefix_sum = 0\n    curr_suffix_sum = 0\n    prefix_sum = float('-inf')\n    suffix_sum = float('-inf')\n    for i in range(n):\n        curr_prefix_sum += arr[i]\n        prefix_sum = max(curr_prefix_sum, prefix_sum)\n    li_sum = curr_prefix_sum\n    for i in range(n - 1, -1, -1):\n        curr_suffix_sum += arr[i]\n        suffix_sum = max(suffix_sum, curr_suffix_sum)\n    ans = 0\n    if li_sum < 0:\n        ans = max(suffix_sum + prefix_sum, kadne_sum_value)\n    else:\n        ans = max(suffix_sum + prefix_sum + (k - 2) * li_sum, kadne_sum_value)\n    return ans\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    li = list(map(int, input().split()))\n    print(max_subarray_sum(li, n, k))", "import sys\n\ndef kadane(arr, n):\n    (curr_sum, max_sum) = (0, max(arr))\n    for i in range(n):\n        if curr_sum + arr[i] >= 0:\n            curr_sum += arr[i]\n            max_sum = max(max_sum, curr_sum)\n        else:\n            curr_sum = 0\n    return max_sum\nfor __ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = kadane(a + a, 2 * n) if k > 1 else kadane(a, n)\n    if k > 2:\n        ans = max(ans, ans + (k - 2) * sum(a))\n    print(ans)", "def findMaxSubArray(arr, mx):\n    MSA = mx\n    sm = 0\n    for x in arr:\n        if sm + x > 0:\n            sm += x\n            MSA = max(MSA, sm)\n        else:\n            sm = 0\n    return MSA\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    mx = max(arr)\n    mx = max(mx, findMaxSubArray(arr, mx))\n    if k > 1:\n        mx = max(mx, findMaxSubArray(arr + arr, mx))\n        if k > 2:\n            mx = max(mx, mx + sum(arr) * (k - 2))\n    print(mx)", "import sys\n\ndef kadane(arr, n):\n    (curr_sum, max_sum) = (0, max(arr))\n    for i in range(n):\n        if curr_sum + arr[i] >= 0:\n            curr_sum += arr[i]\n            max_sum = max(max_sum, curr_sum)\n        else:\n            curr_sum = 0\n    return max_sum\nfor __ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = kadane(a + a, 2 * n) if k > 1 else kadane(a, n)\n    if k > 2:\n        ans = max(ans, ans + (k - 2) * sum(a))\n    print(ans)", "def max_sum_array(a):\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(len(a)):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\nfor _ in range(int(input())):\n    (N, K) = list(map(int, input().split()))\n    array = list(map(int, input().split()))\n    max_array = max_sum_array(array)\n    max_double_array = max_sum_array(array + array)\n    sum_array = sum(array)\n    max_starting_0 = 0\n    max_ending_here = 0\n    for i in range(len(array)):\n        max_ending_here = max_ending_here + array[i]\n        if max_ending_here > max_starting_0:\n            max_starting_0 = max_ending_here\n    max_ending_j = 0\n    max_ending_here = 0\n    j = len(array) - 1\n    while j >= 0:\n        max_ending_here = max_ending_here + array[j]\n        if max_ending_here > max_ending_j:\n            max_ending_j = max_ending_here\n        j = j - 1\n    max_sum = max_array\n    if max_sum < max_double_array:\n        max_sum = max_double_array\n    if max_sum < K * sum_array:\n        max_sum = K * sum_array\n    if max_sum < max_ending_j + (K - 2) * sum_array + max_starting_0:\n        max_sum = max_ending_j + (K - 2) * sum_array + max_starting_0\n    flag = 0\n    max_element = array[0]\n    for i in range(len(array)):\n        if array[i] > 0:\n            flag = 1\n        if max_element < array[i]:\n            max_element = array[i]\n    if flag == 0:\n        max_sum = max_element\n        max_array = max_element\n    if K > 1:\n        print(max_sum)\n    else:\n        print(max_array)", "def kadanes_algo(arr):\n    max_sum = 0\n    curr_sum = 0\n    n = len(arr)\n    if max(arr) < 0:\n        max_sum = max(arr)\n        return max_sum\n    i = 0\n    while i < n:\n        if curr_sum + arr[i] > 0:\n            curr_sum += arr[i]\n        else:\n            curr_sum = 0\n        i += 1\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\nt = int(input())\nfor j in range(0, t):\n    l1 = [int(x) for x in input().split()]\n    n = l1[0]\n    k = l1[1]\n    a = [int(x) for x in input().split()]\n    val1 = kadanes_algo(a)\n    if k == 1:\n        print(val1)\n    else:\n        sum_a = 0\n        for i in a:\n            sum_a += i\n        max_right = a[n - 1]\n        val = a[n - 1]\n        for i in range(n - 2, -1, -1):\n            val += a[i]\n            max_right = max(val, max_right)\n        max_left = a[0]\n        val = a[0]\n        for i in range(1, n):\n            val += a[i]\n            max_left = max(val, max_left)\n        val2 = max_right + sum_a * (k - 2) + max_left\n        val3 = max_left + max_right\n        ans = max(val1, val2, val3)\n        print(ans)", "def sum_of_arr(l2):\n    res = 0\n    for i in l2:\n        res += i\n    return res\nt = int(input())\nfor j in range(0, t):\n    l1 = [int(x) for x in input().split()]\n    n = l1[0]\n    k = l1[1]\n    l2 = [int(x) for x in input().split()]\n    l3 = []\n    for i in l2:\n        l3.append(i)\n    if k == 1:\n        max_sum = 0\n        curr_sum = 0\n        for i in range(0, n):\n            if curr_sum + l2[i] > 0:\n                curr_sum += l2[i]\n            else:\n                curr_sum = 0\n            max_sum = max(max_sum, curr_sum)\n        max_sum = max(max_sum, curr_sum)\n        if max(l2) < 0:\n            max_sum = max(l2)\n        ans = max_sum\n    else:\n        l2 += l2\n        max_sum = 0\n        curr_sum = 0\n        for i in range(0, 2 * n):\n            if curr_sum + l2[i] > 0:\n                curr_sum += l2[i]\n            else:\n                curr_sum = 0\n            max_sum = max(max_sum, curr_sum)\n        max_sum = max(max_sum, curr_sum)\n        if max(l2) < 0:\n            max_sum = max(l2)\n        ans = max_sum + max(0, sum_of_arr(l3)) * (k - 2)\n    print(ans)", "def heler_kadane(arr, n):\n    max1 = arr[0]\n    max_point = arr[0]\n    for i in range(1, n):\n        max1 = max(arr[i], max1 + arr[i])\n        max_point = max(max1, max_point)\n    return max_point\nt = int(input())\nfor i in range(0, t):\n    l = list(map(int, input().split()))\n    n = l[0]\n    k = l[1]\n    arr = list(map(int, input().split()))\n    arrb = []\n    if k == 1:\n        maxsum = heler_kadane(arr, n)\n    elif k == 2:\n        for j in range(0, 2 * n):\n            arrb.append(arr[j % n])\n        maxsum = heler_kadane(arrb, 2 * n)\n    elif k == 3:\n        for j in range(0, 3 * n):\n            arrb.append(arr[j % n])\n        maxsum = heler_kadane(arrb, 3 * n)\n    else:\n        sum = 0\n        for j in range(0, n):\n            sum = sum + arr[j]\n        for j in range(0, 2 * n):\n            arrb.append(arr[j % n])\n        for j in range(0, k - 3):\n            arrb.append(sum)\n        for j in range(0, n):\n            arrb.append(arr[j])\n        maxsum = heler_kadane(arrb, k - 3 + 3 * n)\n    print(maxsum)", "def kConcatination(B):\n    maxSum = -10000000000.0\n    tempSum = 0\n    for i in range(len(B)):\n        tempSum = max(tempSum + B[i], B[i])\n        maxSum = max(maxSum, tempSum)\n    return maxSum\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    if k == 1:\n        print(kConcatination(A))\n    else:\n        tSum = sum(A)\n        maxSum = kConcatination(2 * A)\n        if tSum > 0:\n            maxSum += tSum * (k - 2)\n        print(maxSum)", "def kadane_solution(A):\n    curr_sum = 0\n    max_sum = float('-inf')\n    for i in range(len(A)):\n        if curr_sum < 0:\n            curr_sum = 0\n        curr_sum += A[i]\n        max_sum = max(curr_sum, max_sum)\n    return max_sum\nt = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))[:n]\n    res = 0\n    if k < 2:\n        print(kadane_solution(a), end='\\n')\n    else:\n        k_res = kadane_solution(a + a)\n        s = sum(a)\n        if s >= 0:\n            res = k_res + (k - 2) * s\n        else:\n            res = k_res\n        print(res, end='\\n')\n    t -= 1", "def kadane_solution(A):\n    curr_sum = 0\n    max_sum = float('-inf')\n    for i in range(len(A)):\n        if curr_sum < 0:\n            curr_sum = 0\n        curr_sum += A[i]\n        max_sum = max(curr_sum, max_sum)\n    return max_sum\nt = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))[:n]\n    res = 0\n    if k < 2:\n        print(kadane_solution(a), end='\\n')\n    else:\n        k_res = kadane_solution(a + a)\n        s = sum(a)\n        if s >= 0:\n            res = k_res + (k - 2) * s\n        else:\n            res = k_res\n        print(res, end='\\n')\n    t -= 1", "def Kadanes(A, n):\n    current_sum = 0\n    best_sum = -2 ** 31\n    for i in range(n):\n        current_sum = current_sum + A[i]\n        if best_sum < current_sum:\n            best_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return best_sum\n\ndef K_concatenation(A, n, k):\n    Sum = Kadanes(A, n)\n    if k == 1:\n        return Sum\n    curr_prefix_sum = 0\n    curr_suffix_sum = 0\n    max_prefix_sum = -2 ** 31\n    max_suffix_sum = -2 ** 31\n    for i in range(n):\n        curr_prefix_sum = curr_prefix_sum + A[i]\n        max_prefix_sum = max(max_prefix_sum, curr_prefix_sum)\n    totalSum = curr_prefix_sum\n    for i in range(n - 1, -1, -1):\n        curr_suffix_sum = curr_suffix_sum + A[i]\n        max_suffix_sum = max(max_suffix_sum, curr_suffix_sum)\n    if totalSum < 0:\n        ans = max(max_suffix_sum + max_prefix_sum, Sum)\n    else:\n        ans = max(max_suffix_sum + max_prefix_sum + totalSum * (k - 2), Sum)\n    return ans\n\ndef TakeInput():\n    arr1 = [int(x) for x in input().split()]\n    n = arr1[0]\n    k = arr1[1]\n    A = [int(y) for y in input().split()]\n    return (n, k, A)\nt = int(input())\nfor i in range(t):\n    (n, k, A) = TakeInput()\n    ans = K_concatenation(A, n, k)\n    print(ans)"]