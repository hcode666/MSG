["from itertools import accumulate, islice\nMOD = 10 ** 9 + 7\n\ndef R():\n    return map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, m) = R()\n    cmds = [tuple(R()) for _ in range(m)]\n    da = [0] * (n + 1)\n    dc = [0] * m\n    d = 1\n    for (i, (op, l, r)) in zip(reversed(range(m)), reversed(cmds)):\n        if op == 1:\n            da[l - 1] += d\n            da[r] -= d\n        else:\n            dc[l - 1] -= d\n            dc[r] += d\n        d += dc[i]\n    da[0] %= MOD\n    print(*accumulate(islice(da, n), lambda x, y: (x + y) % MOD))", "from itertools import accumulate, islice\nMOD = 10 ** 9 + 7\n\ndef R():\n    return map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, m) = R()\n    cmds = [tuple(R()) for _ in range(m)]\n    da = [0] * (n + 1)\n    dc = [0] * m\n    d = 1\n    for (i, (op, l, r)) in zip(reversed(range(m)), reversed(cmds)):\n        if op == 1:\n            da[l - 1] += d\n            da[r] -= d\n        else:\n            dc[l - 1] -= d\n            dc[r] += d\n        d += dc[i]\n    da[0] %= MOD\n    print(*accumulate(islice(da, n), lambda x, y: (x + y) % MOD))", "from itertools import accumulate, islice\nMOD = 10 ** 9 + 7\n\ndef R():\n    return map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, m) = R()\n    cmds = [tuple(R()) for _ in range(m)]\n    da = [0] * (n + 1)\n    dc = [0] * m\n    d = 1\n    for (i, (op, l, r)) in zip(reversed(range(m)), reversed(cmds)):\n        if op == 1:\n            da[l - 1] += d\n            da[r] -= d\n        else:\n            dc[l - 1] -= d\n            dc[r] += d\n        d += dc[i]\n    da[0] %= MOD\n    print(*accumulate(islice(da, n), lambda x, y: (x + y) % MOD))", "from itertools import accumulate, islice\nMODE = 10 ** 9 + 7\n\ndef R():\n    return map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, m) = R()\n    cmds = [tuple(R()) for _ in range(m)]\n    da = [0] * (n + 1)\n    dc = [0] * m\n    d = 1\n    for (i, (op, l, r)) in zip(reversed(range(m)), reversed(cmds)):\n        if op == 1:\n            da[l - 1] += d\n            da[r] -= d\n        else:\n            dc[l - 1] -= d\n            dc[r] += d\n        d += dc[i]\n    da[0] %= MODE\n    print(*accumulate(islice(da, n), lambda x, y: (x + y) % MODE))", "from itertools import accumulate, islice\nMOD = 10 ** 9 + 7\n\ndef R():\n    return map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, m) = R()\n    cmds = [tuple(R()) for _ in range(m)]\n    da = [0] * (n + 1)\n    dc = [0] * m\n    d = 1\n    for (i, (op, l, r)) in zip(reversed(range(m)), reversed(cmds)):\n        if op == 1:\n            da[l - 1] += d\n            da[r] -= d\n        else:\n            dc[l - 1] -= d\n            dc[r] += d\n        d += dc[i]\n    da[0] %= MOD\n    print(*accumulate(islice(da, n), lambda x, y: (x + y) % MOD))", "from itertools import accumulate, islice\nMOD = 10 ** 9 + 7\n\ndef R():\n    return map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, m) = R()\n    cmds = [tuple(R()) for _ in range(m)]\n    da = [0] * (n + 1)\n    dc = [0] * m\n    d = 1\n    for (i, (op, l, r)) in zip(reversed(range(m)), reversed(cmds)):\n        if op == 1:\n            da[l - 1] += d\n            da[r] -= d\n        else:\n            dc[l - 1] -= d\n            dc[r] += d\n        d += dc[i]\n    da[0] %= MOD\n    print(*accumulate(islice(da, n), lambda x, y: (x + y) % MOD))", "from itertools import accumulate, islice\nMOD = 10 ** 9 + 7\n\ndef R():\n    return map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, m) = R()\n    cmds = [tuple(R()) for _ in range(m)]\n    da = [0] * (n + 1)\n    dc = [0] * m\n    d = 1\n    for (i, (op, l, r)) in zip(reversed(range(m)), reversed(cmds)):\n        if op == 1:\n            da[l - 1] += d\n            da[r] -= d\n        else:\n            dc[l - 1] -= d\n            dc[r] += d\n        d += dc[i]\n    da[0] %= MOD\n    print(*accumulate(islice(da, n), lambda x, y: (x + y) % MOD))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    commands = []\n    for i in range(m):\n        com = list(map(int, input().split()))\n        commands.append(com)\n    freq = [0] * m\n    prefix = [0] * (n + 1)\n    ini_freq = 1\n    for i in range(m - 1, -1, -1):\n        t = commands[i][0]\n        l = commands[i][1]\n        r = commands[i][2]\n        ini_freq += freq[i]\n        if t == 1:\n            prefix[l - 1] += ini_freq\n            prefix[r] -= ini_freq\n        elif l == 1:\n            freq[r - 1] += ini_freq\n        else:\n            freq[r - 1] += ini_freq\n            freq[l - 2] -= ini_freq\n    a = []\n    p_sum = 0\n    mod = 10 ** 9 + 7\n    for i in range(n):\n        p_sum += prefix[i]\n        p_sum %= mod\n        a.append(p_sum)\n    print(*a)", "mod = 1000000007\nfor _ in range(int(input())):\n    (n, m) = map(int, input().strip().split())\n    query = [list(map(int, input().strip().split())) for _ in range(m)]\n    a = [0] * (m + 1)\n    for i in range(m):\n        (typ, l, r) = query[i]\n        if typ == 2:\n            a[l - 1] = (a[l - 1] + 1) % mod\n            a[r] = (a[r] - 1) % mod\n    x = 0\n    for i in range(m - 1, -1, -1):\n        x = (x - a[i + 1]) % mod\n        (typ, l, r) = query[i]\n        if typ == 2:\n            a[l - 1] = (a[l - 1] + x) % mod\n            a[r] = (a[r] - x) % mod\n    b = [0] * (n + 1)\n    x = 0\n    for i in range(m):\n        x = (x + a[i]) % mod\n        (typ, l, r) = query[i]\n        if typ == 1:\n            b[l - 1] = (b[l - 1] + x + 1) % mod\n            b[r] = (b[r] - x - 1) % mod\n    ans = [0] * n\n    x = 0\n    for i in range(n):\n        x = (x + b[i]) % mod\n        ans[i] = x\n    print(' '.join(map(str, ans)))", "MOD = 1000000000.0 + 7\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ranges = [0] * (m + 1)\n    sums = [0] * (m + 1)\n    query = []\n    for i in range(m):\n        (a, b, c) = map(int, input().split())\n        query.append((a, b, c))\n    query = [0] + query\n    t = 0\n    for i in range(m, 0, -1):\n        t += int(ranges[i] % MOD)\n        if query[i][0] == 2:\n            ranges[query[i][2]] += t + 1\n            ranges[query[i][1] - 1] -= t + 1\n    sums[m] = ranges[m] % MOD\n    for i in range(m - 1, 0, -1):\n        sums[i] = sums[i + 1] + ranges[i]\n        sums[i] %= MOD\n        int(sums[i])\n        if sums[i] < 0:\n            sums[i] += MOD\n    ranges = [0] * (n + 1)\n    for i in range(1, m + 1):\n        if query[i][0] == 1:\n            sums[i] += 1\n            ranges[query[i][1]] += sums[i]\n            if query[i][2] < n:\n                ranges[query[i][2] + 1] -= sums[i]\n    sums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        sums[i] = sums[i - 1] + ranges[i]\n        sums[i] %= MOD\n        sums[i] = int(sums[i])\n    print(*sums[1:])", "T = int(input())\nmod = 10 ** 9 + 7\nfor t in range(T):\n    (n, m) = [int(i) for i in input().split()]\n    queries = []\n    diff = [0] * (n + 1)\n    query1 = [0] * (m + 1)\n    query1[m] = 1\n    for i in range(m):\n        queries.append([int(i) for i in input().split()])\n    cur = 0\n    for i in range(m, 0, -1):\n        cur = (cur + query1[i]) % mod\n        if queries[i - 1][0] == 2:\n            query1[queries[i - 1][2]] += cur\n            query1[queries[i - 1][1] - 1] -= cur\n        else:\n            diff[queries[i - 1][1] - 1] += cur\n            diff[queries[i - 1][2]] -= cur\n    cur = 0\n    for i in range(n):\n        cur = (cur + diff[i]) % mod\n        print(cur, end=' ')\n    print()", "MOD = 10 ** 9 + 7\n\nclass SegTree:\n\n    def __init__(self, n):\n        self.N = 1 << n.bit_length()\n        self.tree = [0] * (self.N << 1)\n\n    def update(self, i, j, v):\n        i += self.N\n        j += self.N\n        while i <= j:\n            if i % 2 == 1:\n                self.tree[i] += v\n            if j % 2 == 0:\n                self.tree[j] += v\n            (i, j) = (i + 1 >> 1, j - 1 >> 1)\n\n    def query(self, i):\n        v = 0\n        i += self.N\n        while i > 0:\n            v += self.tree[i]\n            i >>= 1\n        return v\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    sa = SegTree(n)\n    sq = SegTree(m)\n    Q = [list(map(int, input().split())) for i in range(m)]\n    for i in range(m, 0, -1):\n        (t, l, r) = Q[i - 1]\n        c = sq.query(i) + 1\n        if t == 1:\n            sa.update(l, r, c)\n        else:\n            sq.update(l, r, c)\n    a = [sa.query(i) % MOD for i in range(1, n + 1)]\n    print(*a)", "MOD = 10 ** 9 + 7\n\nclass SegTree:\n\n    def __init__(self, n):\n        self.N = 1 << n.bit_length()\n        self.tree = [0] * (self.N << 1)\n\n    def update(self, i, j, v):\n        i += self.N\n        j += self.N\n        while i <= j:\n            if i % 2 == 1:\n                self.tree[i] += v\n            if j % 2 == 0:\n                self.tree[j] += v\n            (i, j) = (i + 1 >> 1, j - 1 >> 1)\n\n    def query(self, i):\n        v = 0\n        i += self.N\n        while i > 0:\n            v += self.tree[i]\n            i >>= 1\n        return v\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    sa = SegTree(n)\n    sq = SegTree(m)\n    Q = [None] + [list(map(int, input().split())) for i in range(m)]\n    for i in range(m, 0, -1):\n        (t, l, r) = Q[i]\n        c = sq.query(i) + 1\n        if t == 1:\n            sa.update(l, r, c)\n        else:\n            sq.update(l, r, c)\n    a = [sa.query(i) % MOD for i in range(1, n + 1)]\n    print(*a)", "import numpy as np\nbase = 1000000000 + 7\nnum_cases = input()\nfor ii in range(0, int(num_cases)):\n    (n, m) = map(int, input().split())\n    A = np.zeros(n, dtype=int)\n    B = np.ones([m, 4], dtype=int)\n    for kk in range(0, m):\n        (B[kk, 0], B[kk, 1], B[kk, 2]) = input().split()\n    for kk in range(m - 1, -1, -1):\n        if B[kk, 0] == 1:\n            A[B[kk, 1] - 1:B[kk, 2]] += B[kk, 3] % base\n        else:\n            B[B[kk, 1] - 1:B[kk, 2], 3] += B[kk, 3] % base\n    ll = ' '.join((str(int(x % base)) for x in A))\n    print(ll)", "mod = 1000000007\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    val = []\n    l = []\n    r = []\n    inc = []\n    dec = []\n    inc_v = []\n    dec_v = []\n    for i in range(0, max(m + 5, n + 5)):\n        inc.append(0)\n        dec.append(0)\n        inc_v.append(0)\n        dec_v.append(0)\n    inc[m + 1] = 1\n    val.append(0)\n    l.append(0)\n    r.append(0)\n    for i in range(m):\n        (x, y, z) = map(int, input().split())\n        val.append(x)\n        l.append(y)\n        r.append(z)\n    for i in range(m, 0, -1):\n        inc[i] = dec[i] + inc[i + 1]\n        if val[i] == 2:\n            dec[l[i] - 1] -= inc[i]\n            dec[r[i]] += inc[i]\n    for i in range(1, m + 1):\n        if val[i] == 1:\n            inc_v[l[i]] += inc[i]\n            dec_v[r[i] + 1] -= inc[i]\n    ci = 0\n    for i in range(1, n + 1):\n        ci = ci + (inc_v[i] + dec_v[i])\n        print(ci % mod, end=' ')\n    print(' ')", "mod = 1000000007\n\nclass SegmentTree:\n\n    def __init__(self, n):\n        self.data = [0] + [0] * (2 * n)\n        self.n = n\n\n    def query(self, idx):\n        idx += self.n + 1\n        a = 0\n        while idx > 1:\n            a += self.data[idx]\n            idx //= 2\n        return a\n\n    def update(self, left, right, a):\n        left += self.n\n        right += self.n\n        while left <= right:\n            if left % 2 == 1:\n                self.data[left] += a\n            if right % 2 == 0:\n                self.data[right] += a\n            left = left + 1 >> 1\n            right = right - 1 >> 1\nfor t in range(int(input().strip())):\n    (n, m) = map(int, input().strip().split())\n    sa = SegmentTree(n)\n    sq = SegmentTree(m)\n    q = [list(map(int, input().strip().split())) for i in range(m)]\n    for i in reversed(range(m)):\n        (t, l, r) = q[i]\n        c = sq.query(i) + 1\n        if t == 1:\n            sa.update(l, r, c)\n        else:\n            sq.update(l, r, c)\n    ans = [sa.query(i) % mod for i in range(n)]\n    print(*ans)", "p = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, m) = [int(i) for i in input().split()]\n    a = [0] * (n + 2)\n    b = [0]\n    cmd = [1] * (m + 1)\n    d = [0] * (m + 2)\n    for i in range(1, m + 1):\n        b.append([int(i) for i in input().split()])\n    for i in range(m, 0, -1):\n        d[i] = d[i] + d[i + 1]\n        cmd[i] = cmd[i] + d[i]\n        if b[i][0] == 2:\n            d[b[i][2]] = d[b[i][2]] + cmd[i]\n            d[b[i][1] - 1] = d[b[i][1] - 1] - cmd[i]\n    for i in range(1, m + 1):\n        if b[i][0] == 1:\n            a[b[i][1]] = a[b[i][1]] + cmd[i]\n            a[b[i][2] + 1] = a[b[i][2] + 1] - cmd[i]\n    for i in range(1, n + 1):\n        a[i] = (a[i] + a[i - 1]) % p\n        print(a[i], end=' ')\n    print()", "for _ in range(int(input())):\n    (n, q) = [int(i) for i in input().split()]\n    l = []\n    for i in range(q):\n        l.append([int(i) for i in input().split()])\n    subs = [0] * (q + 1)\n    arr = [0] * (n + 1)\n    subs[q] += 1\n    ini = 0\n    for i in range(q, 0, -1):\n        ini += subs[i]\n        ini %= 10 ** 9 + 7\n        le = l[i - 1][1]\n        r = l[i - 1][2]\n        if l[i - 1][0] == 1:\n            arr[le - 1] += ini\n            arr[r] -= ini\n        else:\n            subs[r] += ini\n            if le - 1 >= 0:\n                subs[le - 1] -= ini\n    m = 10 ** 9 + 7\n    arr[0] = arr[0] % m\n    for i in range(1, len(arr)):\n        arr[i] = arr[i - 1] + arr[i]\n        arr[i] = arr[i] % m\n    print(*arr[:n])", "T = int(input())\np = int(pow(10, 9)) + 7\nfor _ in range(T):\n    (n, m) = (int(i) for i in input().split())\n    (commands, com_count, a, d_com_count, d_a) = ([0], [0] * (m + 2), [0] * (n + 2), [0] * (m + 2), [0] * (n + 2))\n    for i in range(m):\n        commands.append([int(i) for i in input().split()])\n    com_count[m + 1] = 1\n    for i in range(m, 0, -1):\n        c = commands[i]\n        com_count[i] = d_com_count[i + 1] + com_count[i + 1]\n        if c[0] == 2:\n            d_com_count[c[2] + 1] += com_count[i]\n            d_com_count[c[1]] -= com_count[i]\n    for i in range(1, m + 1):\n        c = commands[i]\n        if c[0] == 1:\n            d_a[c[1] - 1] += com_count[i]\n            d_a[c[2]] -= com_count[i]\n    for i in range(1, n + 1):\n        a[i] = a[i - 1] + d_a[i - 1]\n        print(a[i] % p, end=' ')\n    print()", "MOD = 10 ** 9 + 7\nT = int(input())\nfor t in range(T):\n    (N, M) = map(int, input().split())\n    OPS = []\n    for m in range(M):\n        (op, l, r) = map(int, input().split())\n        OPS.append((op, l, r))\n    ans = [0] * (N + 2)\n    acc_ans = [0] * (N + 2)\n    mult = [1] * (M + 2)\n    acc_mult = [0] * (M + 2)\n    for i in range(M - 1, -1, -1):\n        (op, l, r) = OPS[i]\n        index = i + 1\n        mult[index] = (acc_mult[index] + mult[index + 1] + MOD) % MOD\n        if op == 2:\n            acc_mult[r] += mult[index]\n            acc_mult[l - 1] -= mult[index]\n            acc_mult[r] %= MOD\n            acc_mult[l - 1] %= MOD\n        else:\n            acc_ans[l] += mult[index]\n            acc_ans[l] %= MOD\n            acc_ans[r + 1] -= mult[index]\n            acc_ans[r + 1] %= MOD\n    for i in range(1, N + 1):\n        acc_ans[i] += acc_ans[i - 1]\n        acc_ans[i] %= MOD\n    print(' '.join((str(x) for x in acc_ans[1:N + 1])))", "mod = 1000000007\n\ndef push(node):\n    if tree[node] == 0:\n        return\n    tree[node * 2] = (tree[node * 2] + tree[node]) % mod\n    tree[node * 2 + 1] = (tree[node * 2 + 1] + tree[node]) % mod\n    tree[node] = 0\n\ndef updateRange(node, start, end, l, r, val):\n    if l <= start and end <= r:\n        tree[node] = (tree[node] + val) % mod\n        return\n    mid = (start + end) // 2\n    push(node)\n    if l <= mid:\n        updateRange(node * 2, start, mid, l, r, val)\n    if r > mid:\n        updateRange(node * 2 + 1, mid + 1, end, l, r, val)\n\ndef queryRange(node, start, end, l):\n    if start == end:\n        return tree[node] % mod\n    push(node)\n    mid = (start + end) // 2\n    if l <= mid:\n        return queryRange(node * 2, start, mid, l)\n    else:\n        return queryRange(node * 2 + 1, mid + 1, end, l)\nt = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    temp = [0] * (n + 2)\n    tree = [0] * 262150\n    here = 0\n    B = [[] for i in range(q + 1)]\n    pq = 1\n    q1 = q\n    while q1 > 0:\n        (a, b, c) = input().split()\n        B[pq] = [int(a), int(b), int(c)]\n        pq += 1\n        q1 = q1 - 1\n    for j in range(q, 0, -1):\n        here = queryRange(1, 1, q, j)\n        if B[j][0] == 2:\n            updateRange(1, 1, q, B[j][1], B[j][2], here + 1)\n        else:\n            temp[B[j][1]] = temp[B[j][1]] + (here + 1)\n            temp[B[j][2] + 1] = temp[B[j][2] + 1] - (here + 1)\n    ans = 0\n    for j in range(1, n + 1):\n        ans = (ans + temp[j]) % mod\n        print(ans, end=' ')\n    print('\\n')", "mod = 1000000007\n\ndef getsum(BITTree, i):\n    s = 0\n    i = i + 1\n    while i > 0:\n        s += BITTree[i]\n        i -= i & -i\n    return s\n\ndef updatebit(BITTree, n, i, v):\n    i += 1\n    while i <= n:\n        BITTree[i] += v\n        i += i & -i\n\ndef updaterange(BITTree, l, r, n, val):\n    updatebit(BITTree, n, l, val)\n    updatebit(BITTree, n, r + 1, -val)\n\ndef construct(arr, n):\n    BITTree = [0] * (n + 1)\n    for i in range(n):\n        updatebit(BITTree, n, i, arr[i])\n    return BITTree\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    freq = [0] * m\n    ans = [0] * n\n    data = []\n    cnt = [1] * m\n    BITTree = construct(freq, len(freq))\n    for i in range(m):\n        data.append(list(map(int, input().split())))\n    for i in range(m - 1, -1, -1):\n        x = getsum(BITTree, i)\n        cnt[i] = x + 1\n        if data[i][0] == 2:\n            updaterange(BITTree, data[i][1] - 1, data[i][2] - 1, len(freq), x + 1)\n    BITTree = construct(ans, len(ans))\n    for i in range(m):\n        if data[i][0] == 1:\n            updaterange(BITTree, data[i][1] - 1, data[i][2] - 1, len(ans), cnt[i])\n    for i in range(n):\n        ans[i] = getsum(BITTree, i) % mod\n        print(ans[i], end=' ')\n    print()", "from itertools import accumulate, islice\nMOD = 10 ** 9 + 7\n\ndef R():\n    return map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, m) = R()\n    cmds = [tuple(R()) for _ in range(m)]\n    da = [0] * (n + 1)\n    dc = [0] * m\n    d = 1\n    for (i, (op, l, r)) in zip(reversed(range(m)), reversed(cmds)):\n        if op == 1:\n            da[l - 1] += d\n            da[r] -= d\n        else:\n            dc[l - 1] -= d\n            dc[r] += d\n        d += dc[i]\n    da[0] %= MOD\n    print(*accumulate(islice(da, n), lambda x, y: (x + y) % MOD))", "from itertools import accumulate\nMOD = 10 ** 9 + 7\n\ndef R():\n    return map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, m) = R()\n    cmds = [tuple(R()) for _ in range(m)]\n    da = [0] * (n + 1)\n    dc = [0] * m\n    d = 1\n    for (i, (op, l, r)) in zip(reversed(range(m)), reversed(cmds)):\n        if op == 1:\n            da[l - 1] += d\n            da[r] -= d\n        else:\n            dc[l - 1] -= d\n            dc[r] += d\n        d += dc[i]\n    da[0] %= MOD\n    print(*accumulate(da[:n], lambda x, y: (x + y) % MOD))", "from itertools import accumulate, islice\nMOD = 10 ** 9 + 7\n\ndef R():\n    return map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, m) = R()\n    cmds = [tuple(R()) for _ in range(m)]\n    da = [0] * (n + 1)\n    dc = [0] * m\n    d = 1\n    for (i, (op, l, r)) in zip(reversed(range(m)), reversed(cmds)):\n        if op == 1:\n            da[l - 1] += d\n            da[r] -= d\n        else:\n            dc[l - 1] -= d\n            dc[r] += d\n        d += dc[i]\n    da[0] %= MOD\n    print(*accumulate(islice(da, n), lambda x, y: (x + y) % MOD))", "MOD = 10 ** 9 + 7\nfor t in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    commands = {}\n    keys = []\n    for i in range(1, m + 1):\n        ar = [int(x) for x in input().split()]\n        commands[i] = ar\n        if ar[0] == 1:\n            keys.append(i)\n    b = [0] * (m + 2)\n    b[m] = 1\n    for i in range(m - 1, -1, -1):\n        b[i + 1] = b[i + 1] + b[i + 2]\n        if commands[i + 1][0] == 2:\n            b[commands[i + 1][2]] += b[i + 1]\n            b[commands[i + 1][1] - 1] -= b[i + 1]\n    ans = []\n    for i in range(100005):\n        ans.append(0)\n    for i in range(1, m + 1):\n        if commands[i][0] == 1:\n            ans[commands[i][1]] = ans[commands[i][1]] + b[i]\n            ans[commands[i][2] + 1] = ans[commands[i][2] + 1] - b[i]\n    for i in range(1, n + 1):\n        ans[i] += ans[i - 1]\n        print(str(ans[i] % 1000000007), end=' ')\n    print()", "from itertools import accumulate\nMOD = 10 ** 9 + 7\n\ndef R():\n    return map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, m) = R()\n    cmds = [tuple(R()) for _ in range(m)]\n    da = [0] * (n + 1)\n    dc = [0] * m\n    d = 1\n    for (i, (op, l, r)) in zip(reversed(range(m)), reversed(cmds)):\n        if op == 1:\n            da[l - 1] += d\n            da[r] -= d\n        else:\n            dc[l - 1] -= d\n            dc[r] += d\n        d += dc[i]\n    da[0] %= MOD\n    print(*accumulate(da[:-1], lambda x, y: (x + y) % MOD))", "from itertools import accumulate\nMOD = 10 ** 9 + 7\n\ndef R():\n    return map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, m) = R()\n    cmds = [tuple(R()) for _ in range(m)]\n    da = [0] * (n + 1)\n    dc = [0] * m\n    x = 1\n    for (i, (op, l, r)) in zip(reversed(range(m)), reversed(cmds)):\n        if op == 1:\n            da[l - 1] += x\n            da[r] -= x\n        else:\n            dc[l - 1] -= x\n            dc[r] += x\n        x += dc[i]\n    da[0] %= MOD\n    print(*accumulate(da[:-1], lambda x, y: (x + y) % MOD))", "from itertools import accumulate\nMOD = 10 ** 9 + 7\n\ndef mod_add(a, b):\n    a += b\n    return a if a < MOD else a - MOD\n\ndef mod_sub(a, b):\n    a -= b\n    return a + MOD if a < 0 else a\n\ndef R():\n    return map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, m) = R()\n    cmds = [tuple(R()) for _ in range(m)]\n    da = [0] * (n + 1)\n    dc = [0] * m\n    x = 1\n    for (i, (op, l, r)) in zip(reversed(range(m)), reversed(cmds)):\n        if op == 1:\n            da[l - 1] = mod_add(da[l - 1], x)\n            da[r] = mod_sub(da[r], x)\n        else:\n            dc[l - 1] = mod_sub(dc[l - 1], x)\n            dc[r] = mod_add(dc[r], x)\n        x = mod_add(x, dc[i])\n    print(*accumulate(da[:-1], mod_add))", "from itertools import accumulate\nMOD = 10 ** 9 + 7\n\ndef R():\n    return map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, m) = R()\n    cmds = [tuple(R()) for _ in range(m)]\n    da = [0] * (n + 1)\n    dc = [0] * m\n    x = 1\n    for (i, (op, l, r)) in zip(reversed(range(m)), reversed(cmds)):\n        if op == 1:\n            da[l - 1] += x\n            da[r] -= x\n        else:\n            dc[l - 1] -= x\n            dc[r] += x\n        x += dc[i]\n    da[0] %= MOD\n    print(*accumulate(da[:-1], lambda x, y: (x + y) % MOD))", "from itertools import accumulate\nMOD = 10 ** 9 + 7\n\ndef R():\n    return map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, m) = R()\n    cmds = [tuple(R()) for _ in range(m)]\n    da = [0] * (n + 1)\n    dc = [0] * m\n    d = 1\n    for (i, (op, l, r)) in zip(reversed(range(m)), reversed(cmds)):\n        if op == 1:\n            da[l - 1] += d\n            da[r] -= d\n        else:\n            dc[l - 1] -= d\n            dc[r] += d\n        d += dc[i]\n    da.pop()\n    print(*map(lambda x: x % MOD, accumulate(da)))", "from itertools import accumulate\nMOD = 10 ** 9 + 7\n\ndef R():\n    return map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, m) = R()\n    cmds = [tuple(R()) for _ in range(m)]\n    da = [0] * (n + 1)\n    dc = [0] * m\n    d = 1\n    for (i, (op, l, r)) in zip(reversed(range(m)), reversed(cmds)):\n        if op == 1:\n            da[l - 1] += d\n            da[r] -= d\n        else:\n            dc[l - 1] -= d\n            dc[r] += d\n        d += dc[i]\n    print(*map(lambda x: x % MOD, accumulate(da[:-1])))", "from itertools import accumulate\nMOD = 10 ** 9 + 7\n\ndef R():\n    return map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, m) = R()\n    cmds = [tuple(R()) for _ in range(m)]\n    da = [0] * (n + 1)\n    dc = [0] * m\n    x = 1\n    for (i, (op, l, r)) in zip(reversed(range(m)), reversed(cmds)):\n        if op == 1:\n            da[l - 1] += x\n            da[r] -= x\n        else:\n            dc[l - 1] -= x\n            dc[r] += x\n        x += dc[i]\n    print(*map(lambda x: x % MOD, accumulate(da[:-1])))", "import numpy as np\nmod = 1000000007\nt = int(input())\nwhile t != 0:\n    (n, q) = [int(x) for x in input().split()]\n    A = np.zeros(shape=(100005, 4))\n    sum = 0\n    Ans = 0\n    answer = np.zeros(shape=n + 2)\n    H = np.zeros(shape=q + 2)\n    for i in range(1, q + 1):\n        (ty, l, r) = [int(x) for x in input().split()]\n        A[i][1] = ty\n        A[i][2] = l\n        A[i][3] = r\n        left = int(A[i][2])\n        right = int(A[i][3])\n        if ty == 1:\n            answer[left] = (answer[left] % mod + 1) % mod\n            answer[right + 1] = (answer[right + 1] % mod - 1 + mod) % mod\n        else:\n            H[left - 1] = (H[left - 1] % mod - 1 + mod) % mod\n            H[right] = (H[right] % mod + 1) % mod\n    for i in range(q, 0, -1):\n        sum = (int(sum) % mod + int(H[i]) % mod) % mod\n        if sum != 0:\n            left = int(A[i][2])\n            right = int(A[i][3])\n            if A[i][1] == 1:\n                answer[left] = (answer[left] % mod + sum) % mod\n                answer[right + 1] = (answer[right + 1] % mod - sum + mod) % mod\n            else:\n                H[left - 1] = (H[left - 1] % mod - sum + mod) % mod\n                H[right] = (H[right] % mod + sum) % mod\n    for rt in range(1, n + 1):\n        Ans = (Ans + int(answer[rt]) % mod) % mod\n        print(Ans, end=' ')\n    print()\n    t = t - 1", "T = int(input())\ni = 0\nwhile i < T:\n    (n, m) = [int(x) for x in input().split(' ')]\n    q = []\n    ans = []\n    sumi = [0 for x in range(n + 1)]\n    ans = [0 for x in range(m + 2)]\n    q = [0 for x in range(m + 1)]\n    for x in range(1, m + 1):\n        q[x] = [int(x) for x in input().split(' ')]\n    j = m\n    qe = 0\n    suff = [0 for x in range(m + 2)]\n    while j != 0:\n        if q[j][0] == 2:\n            suff[j] = suff[j + 1] + ans[j]\n            qe = suff[j]\n            qe += 1\n            ans[q[j][1] - 1] += -qe\n            ans[q[j][2]] += qe\n        else:\n            suff[j] = suff[j + 1] + ans[j]\n            ans[j] = suff[j]\n            ans[j] += 1\n        j -= 1\n    for x in range(1, m + 1):\n        if q[x][0] == 1:\n            sumi[q[x][1]] += ans[x]\n            if q[x][2] < n:\n                sumi[q[x][2] + 1] += -ans[x]\n    for x in range(1, n + 1):\n        sumi[x] = (sumi[x] + sumi[x - 1]) % 1000000007\n    print(' '.join((str(x) for x in sumi[1:])))\n    i += 1", "class soochna:\n    pehla = 0\n    dusra = 0\n    tesra = 0\n\nclass barbar:\n    shuruat = 0\n    aant = 0\nexam = int(input())\nfor i in range(exam):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    aksh = [soochna() for i in range(m + 1)]\n    princy = [barbar() for i in range(m + 1)]\n    veera = [barbar() for i in range(n + 1)]\n    for i in range(1, n + 1):\n        veera[i].shuruat = 0\n        veera[i].aant = 0\n    for i in range(1, m + 1):\n        princy[i].shuruat = 0\n        princy[i].aant = 0\n    for i in range(1, m + 1):\n        (s, f, j) = input().split()\n        aksh[i].pehla = int(s)\n        aksh[i].dusra = int(f)\n        aksh[i].tesra = int(j)\n    chandra = 1\n    for i in range(m, 0, -1):\n        chandra = chandra + princy[i].aant\n        if aksh[i].pehla == 2:\n            princy[aksh[i].dusra].shuruat = princy[aksh[i].dusra].shuruat + chandra\n            princy[aksh[i].tesra].aant = princy[aksh[i].tesra].aant + chandra\n        chandra = chandra - princy[i].shuruat\n    chandra = 1\n    for i in range(1, m + 1):\n        chandra = chandra + princy[i].shuruat\n        if aksh[i].pehla == 1:\n            veera[aksh[i].dusra].shuruat = veera[aksh[i].dusra].shuruat + chandra\n            veera[aksh[i].tesra].aant = veera[aksh[i].tesra].aant + chandra\n        chandra = chandra - princy[i].aant\n    chandra = 0\n    u = 0\n    for i in range(1, n + 1):\n        chandra = chandra + veera[i].shuruat\n        u = chandra % 1000000007\n        print(u, end=' ')\n        chandra = chandra - veera[i].aant\n    print()", "mo = 10 ** 9 + 7\nfor t in range(int(input())):\n    temp = list(map(int, input().split()))\n    n = temp[0]\n    m = temp[1]\n    a = list()\n    for i in range(n):\n        a.append(0)\n    s = 0\n    b = list()\n    last = list()\n    q = list()\n    for i in range(m):\n        b.append(0)\n        last.append(0)\n        q.append(list(map(int, input().split())))\n    i = m - 1\n    lastl = -1\n    lastr = -1\n    while i >= 0:\n        if lastl != -1 and lastr != -1:\n            last[l] = b[lastl]\n            last[r + 1] = b[lastr]\n        t = q[i][0]\n        l = q[i][1] - 1\n        r = q[i][2] - 1\n        val = s + 1\n        if t == 1:\n            a[l] += val\n            if r + 1 < n:\n                a[r + 1] -= val\n            s -= last[i]\n            lastl = -1\n            lastr = -1\n        elif t == 2:\n            last[l] = b[l]\n            b[l] += val\n            lastl = l\n            if r + 1 < m:\n                last[r + 1] = b[r + 1]\n                b[r + 1] -= val\n                lastr = r + 1\n                s -= last[i]\n                if lastl <= i - 1 and lastr <= i - 1:\n                    tooth = 2\n                else:\n                    s += val\n            elif r + 1 >= m:\n                lastr = -1\n        i -= 1\n    s = 0\n    for i in range(n):\n        s += a[i]\n        print(s % mo, end=' ')\n    print()", "mo = 10 ** 9 + 7\nfor t in range(int(input())):\n    temp = list(map(int, input().split()))\n    n = temp[0]\n    m = temp[1]\n    a = list()\n    for i in range(n):\n        a.append(0)\n    s = 0\n    b = list()\n    last = list()\n    q = list()\n    for i in range(m):\n        b.append(0)\n        last.append(0)\n        q.append(list(map(int, input().split())))\n    i = m - 1\n    lastl = -1\n    lastr = -1\n    while i >= 0:\n        if lastl != -1 and lastr != -1:\n            last[l] = b[lastl]\n            last[r + 1] = b[lastr]\n        t = q[i][0]\n        l = q[i][1] - 1\n        r = q[i][2] - 1\n        val = s + 1\n        if t == 1:\n            a[l] += val\n            if r + 1 < n:\n                a[r + 1] -= val\n            s -= last[i]\n            lastl = -1\n            lastr = -1\n        elif t == 2:\n            last[l] = b[l]\n            b[l] += val\n            lastl = l\n            if r + 1 < m:\n                last[r + 1] = b[r + 1]\n                b[r + 1] -= val\n                lastr = r + 1\n                s -= last[i]\n                if lastl <= i - 1 and lastr <= i - 1:\n                    tooth = 2\n                else:\n                    s += val\n            elif r + 1 >= m:\n                lastr = -1\n        i -= 1\n    s = 0\n    for i in range(n):\n        s += a[i]\n        print(s % mo, end=' ')\n    print()", "class niharika:\n    index = 0\n    l = 0\n    r = 0\n\nclass anjali:\n    shrutee = 0\n    lakshita = 0\npapa = int(input())\nwhile papa:\n    papa = papa - 1\n    (n, m) = input().split()\n    m = int(m)\n    n = int(n)\n    a = [niharika() for i in range(m + 1)]\n    c = [anjali() for i in range(m + 1)]\n    v = [anjali() for i in range(n + 1)]\n    for i in range(1, n + 1):\n        v[i].shrutee = 0\n        v[i].lakshita = 0\n    for i in range(1, m + 1):\n        c[i].shrutee = 0\n        c[i].lakshita = 0\n    for i in range(1, m + 1):\n        (x, y, z) = input().split()\n        a[i].index = int(x)\n        a[i].l = int(y)\n        a[i].r = int(z)\n    sid = 1\n    for i in range(m, 0, -1):\n        sid = sid + c[i].lakshita\n        if a[i].index == 2:\n            c[a[i].l].shrutee = c[a[i].l].shrutee + sid\n            c[a[i].r].lakshita = c[a[i].r].lakshita + sid\n        sid = sid - c[i].shrutee\n    sid = 1\n    for i in range(1, m + 1):\n        sid = sid + c[i].shrutee\n        if a[i].index == 1:\n            v[a[i].l].shrutee = v[a[i].l].shrutee + sid\n            v[a[i].r].lakshita = v[a[i].r].lakshita + sid\n        sid = sid - c[i].lakshita\n    sid = 0\n    p = 0\n    tank = 1000000007\n    for i in range(1, n + 1):\n        sid = sid + v[i].shrutee\n        p = sid % tank\n        print(p, end=' ')\n        sid = sid - v[i].lakshita\n    print()", "class sujeet:\n    key = 0\n    l = 0\n    r = 0\n\nclass manit:\n    start = 0\n    end = 0\nt = int(input())\nwhile t:\n    t = t - 1\n    (n, m) = input().split()\n    m = int(m)\n    n = int(n)\n    a = [sujeet() for i in range(m + 1)]\n    c = [manit() for i in range(m + 1)]\n    v = [manit() for i in range(n + 1)]\n    for i in range(1, n + 1):\n        v[i].start = 0\n        v[i].end = 0\n    for i in range(1, m + 1):\n        c[i].start = 0\n        c[i].end = 0\n    for i in range(1, m + 1):\n        (x, y, z) = input().split()\n        a[i].key = int(x)\n        a[i].l = int(y)\n        a[i].r = int(z)\n    sid = 1\n    for i in range(m, 0, -1):\n        sid = sid + c[i].end\n        if a[i].key == 2:\n            c[a[i].l].start = c[a[i].l].start + sid\n            c[a[i].r].end = c[a[i].r].end + sid\n        sid = sid - c[i].start\n    sid = 1\n    for i in range(1, m + 1):\n        sid = sid + c[i].start\n        if a[i].key == 1:\n            v[a[i].l].start = v[a[i].l].start + sid\n            v[a[i].r].end = v[a[i].r].end + sid\n        sid = sid - c[i].end\n    sid = 0\n    p = 0\n    for i in range(1, n + 1):\n        sid = sid + v[i].start\n        p = sid % 1000000007\n        print(p, end=' ')\n        sid = sid - v[i].end\n    print()", "t = input()\nx = ' '\nwhile int(t) > 0:\n    (n, q) = map(int, input().split())\n    A = [[0 for x in range(3)] for y in range(q + 1)]\n    b = [0] * 100001\n    e = [0] * 1000001\n    for i in range(1, q + 1, 1):\n        (A[i][0], A[i][1], A[i][2]) = map(int, input().split())\n    c = 1\n    for i in range(q, 0, -1):\n        c = c + b[i]\n        b[i] = c\n        if A[i][0] == 2:\n            b[A[i][1] - 1] = b[A[i][1] - 1] - c\n            b[A[i][2]] = b[A[i][2]] + c\n        else:\n            e[A[i][1]] = e[A[i][1]] + b[i]\n            e[A[i][2] + 1] = e[A[i][2] + 1] - b[i]\n    d = 0\n    for i in range(1, n + 1, 1):\n        d = d + e[i]\n        e[i] = d\n        print(e[i] % 1000000007, x, end='')\n    print()\n    t = int(t) - 1", "t = int(input())\nfor i in range(t):\n    alte = []\n    comm = []\n    c = []\n    a = []\n    tmp = []\n    sum = 0\n    (n, m) = [int(i) for i in input().split(' ')]\n    for j in range(0, n + 20):\n        a.append(0)\n    for j in range(0, m + 20):\n        c.append(1)\n        alte.append(0)\n    tmp = [0, 0, 0]\n    comm.append(tmp)\n    for j in range(1, m + 1):\n        tmp = [int(i) for i in input().split(' ')]\n        comm.append(tmp)\n    tmp = [0, 0, 0]\n    comm.append(tmp)\n    comm.append(tmp)\n    comm.append(tmp)\n    for j in range(m, 0, -1):\n        alte[j] = alte[j] + sum\n        sum = alte[j]\n        c[j] = c[j] + alte[j]\n        if comm[j][0] == 2:\n            alte[comm[j][2]] += c[j]\n            alte[comm[j][1] - 1] -= c[j]\n    for j in range(1, m + 2):\n        if comm[j][0] == 1:\n            a[comm[j][1]] = a[comm[j][1]] + c[j]\n            a[comm[j][2] + 1] = a[comm[j][2] + 1] - c[j]\n    sum = 0\n    for j in range(1, n + 2):\n        a[j] += sum\n        sum = a[j]\n    for j in range(1, n + 1):\n        print(a[j] % 1000000007, end=' ')\n    print()", "tc = int(input())\nmod = 1000000007\nfor t in range(tc):\n    (n, m) = map(int, input().split())\n    type1 = []\n    l = []\n    r = []\n    d = []\n    ans = []\n    for i in range(m + 5):\n        d.append(0)\n    for i in range(m):\n        (x, y, z) = map(int, input().split())\n        type1.append(x)\n        l.append(y)\n        r.append(z)\n    for i in range(5):\n        type1.append(0)\n        l.append(0)\n        r.append(0)\n    for i in range(m - 1, -1, -1):\n        d[i] = d[i] + d[i + 1]\n        if type1[i] == 2:\n            if l[i] - 2 > -1:\n                d[l[i] - 2] = d[l[i] - 2] - (d[i] + 1)\n            d[r[i] - 1] = d[r[i] - 1] + (d[i] + 1)\n    for i in range(n + 2):\n        ans.append(0)\n    for i in range(m):\n        if type1[i] == 1:\n            ans[r[i]] = ans[r[i]] - (d[i] + 1)\n            ans[l[i] - 1] = ans[l[i] - 1] + (d[i] + 1)\n    for i in range(1, n):\n        ans[i] = ans[i] + ans[i - 1]\n    for i in range(n):\n        print(ans[i] % mod, end=' ')\n    print()", "T = input()\nspace = ' '\nm = 1000000007\nwhile int(T) > 0:\n    (arr_len, queries) = map(int, input().split())\n    inp = [[0 for x in range(3)] for y in range(queries + 1)]\n    ans = [0] * 1000001\n    arr_query = [0] * 100001\n    for a0 in range(1, queries + 1, 1):\n        (inp[a0][0], inp[a0][1], inp[a0][2]) = map(int, input().split())\n    repeat = 1\n    for i in range(queries, 0, -1):\n        repeat = repeat + arr_query[i]\n        arr_query[i] = repeat\n        if inp[i][0] == 1:\n            ans[inp[i][1]] = (ans[inp[i][1]] % m + arr_query[i] % m) % m\n            ans[inp[i][2] + 1] = (ans[inp[i][2] + 1] % m - arr_query[i] % m) % m\n        else:\n            arr_query[inp[i][2]] = (arr_query[inp[i][2]] % m + repeat % m) % m\n            arr_query[inp[i][1] - 1] = (arr_query[inp[i][1] - 1] % m - repeat % m) % m\n    d = 0\n    for i in range(1, arr_len + 1, 1):\n        d = d + ans[i]\n        ans[i] = d % m\n        print(ans[i] % m, space, end='')\n    print()\n    T = int(T) - 1", "def updatebit(BITTree, n, i, v):\n    i += 1\n    while i <= n:\n        BITTree[i] = (BITTree[i] + v) % 1000000007\n        if BITTree[i] < 0:\n            BITTree[i] = 1000000007 + BITTree[i]\n        i += i & -i\n\ndef construct(arr, n):\n    BITTree = [0] * (n + 1)\n    for i in range(n):\n        updatebit(BITTree, n, i, arr[i])\n    return BITTree\n\ndef getsum(BITTree, i):\n    s = 0\n    i = i + 1\n    while i > 0:\n        s += BITTree[i]\n        s %= 1000000007\n        i -= i & -i\n    return s\n\ndef update(BITTree, l, r, n, v):\n    updatebit(BITTree, n, l, v)\n    updatebit(BITTree, n, r + 1, -v)\ntc = int(input())\nwhile tc > 0:\n    (n, q) = map(int, input().split())\n    a = []\n    b = []\n    c = []\n    for i in range(q):\n        (a1, b1, c1) = map(int, input().split())\n        a.append(a1)\n        b.append(b1)\n        c.append(c1)\n    arr = [0] * q\n    BITTree = construct(arr, q)\n    update(BITTree, 0, q - 1, q, 1)\n    for i in range(q - 1, -1, -1):\n        if a[i] == 2:\n            update(BITTree, b[i] - 1, c[i] - 1, q, getsum(BITTree, i))\n    arr1 = [0] * n\n    BITTree1 = construct(arr1, n)\n    for i in range(q):\n        if a[i] == 1:\n            update(BITTree1, b[i] - 1, c[i] - 1, n, getsum(BITTree, i))\n    res = []\n    for i in range(n):\n        x = getsum(BITTree1, i)\n        res.append(x)\n    print(' '.join(map(str, res)))\n    tc -= 1", "MOD = 1000000007\n\nclass Update:\n    __slots__ = ['qtype', 'left', 'right']\n\n    def __init__(self, qtype, left, right):\n        self.qtype = qtype\n        self.left = left\n        self.right = right\n\n    def execute(self, rep, nums, pos):\n        if self.qtype == 1:\n            nums[self.left] += 1 + rep[pos]\n            if self.right + 1 < len(nums):\n                nums[self.right + 1] -= 1 + rep[pos]\n            return\n        rep[self.right] += 1 + rep[pos]\n        if self.left > 0:\n            rep[self.left - 1] -= 1 + rep[pos]\n\ndef read_updates(size):\n    updates = []\n    for i in range(size):\n        (qtype, left, right) = map(int, input().split())\n        updates.append(Update(qtype, left - 1, right - 1))\n    return updates\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        (n, q) = map(int, input().split())\n        updates = read_updates(q)\n        nums = [0 for i in range(n)]\n        rep = [0 for i in range(q)]\n        for j in range(q - 1, -1, -1):\n            if j + 1 < q:\n                rep[j] += rep[j + 1]\n            updates[j].execute(rep, nums, j)\n        for j in range(n):\n            nums[j] %= MOD\n            if j > 0:\n                nums[j] += nums[j - 1]\n                nums[j] %= MOD\n            print(nums[j], end=' ')\n        print()\nmain()", "t = int(input())\nMOD = 10 ** 9 + 7\n\ndef modulo(a, b, c):\n    return (a % c + b % c) % c\nwhile t:\n    t = t - 1\n    (n, m) = map(int, input().strip(' ').split(' '))\n    freq = [0] * (n + 2)\n    count = [0] * (m + 2)\n    a = [[]] * (m + 2)\n    for i in range(1, m + 1):\n        a[i] = [int(x) for x in input().split(' ')]\n    count[m] = 1\n    count[0] = -1\n    for i in range(m, 0, -1):\n        count[i] += count[i + 1]\n        if a[i][0] == 2:\n            count[a[i][1] - 1] -= count[i]\n            count[a[i][2]] += count[i]\n        else:\n            freq[a[i][1]] += count[i]\n            freq[a[i][2] + 1] -= count[i]\n    ans = []\n    for i in range(1, n + 1):\n        freq[i] = modulo(freq[i - 1], freq[i], MOD)\n        ans.append(freq[i])\n    print(*ans)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = []\n    ccc = []\n    d = []\n    k = 0\n    while k <= m:\n        ccc.append(0)\n        k += 1\n    k = 0\n    while k <= n:\n        arr.append(0)\n        k += 1\n    k = 1\n    while k <= m:\n        (a, b, c) = map(int, input().split())\n        d.append([a, b, c])\n        k += 1\n    count = 0\n    k = m\n    while k >= 1:\n        if d[k - 1][0] == 1:\n            count = count + ccc[k]\n            arr[d[k - 1][1] - 1] += count + 1\n            arr[d[k - 1][2]] -= count + 1\n        else:\n            count = count + ccc[k]\n            ccc[d[k - 1][1] - 1] -= count + 1\n            ccc[d[k - 1][2]] += count + 1\n        k -= 1\n    sum = 0\n    k = 0\n    while k < n:\n        sum += arr[k]\n        print(sum % (10 ** 9 + 7), end=' ')\n        k += 1\n    print('')", "class commands:\n    query = 0\n    l = 0\n    r = 0\n\nclass two_query:\n    first = 0\n    last = 0\n\nclass one_query:\n    first = 0\n    last = 0\nt = int(input())\nfor i in range(t):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    data = [commands() for i in range(m + 1)]\n    bot_top = [two_query() for i in range(m + 1)]\n    top_bot = [one_query() for i in range(n + 1)]\n    for i in range(1, m + 1):\n        (e, f, g) = input().split()\n        data[i].query = int(e)\n        data[i].l = int(f)\n        data[i].r = int(g)\n    flag = 1\n    for i in range(m, 0, -1):\n        flag = flag + bot_top[i].last\n        if data[i].query == 2:\n            a = data[i].l\n            b = data[i].r\n            bot_top[a].first = bot_top[a].first + flag\n            bot_top[b].last = bot_top[b].last + flag\n        flag = flag - bot_top[i].first\n    flag = 1\n    for i in range(1, m + 1):\n        flag = flag + bot_top[i].first\n        if data[i].query == 1:\n            a = data[i].l\n            b = data[i].r\n            top_bot[a].first = top_bot[a].first + flag\n            top_bot[b].last = top_bot[b].last + flag\n        flag = flag - bot_top[i].last\n    flag = 0\n    for i in range(1, n + 1):\n        flag = flag + top_bot[i].first\n        print(flag % 1000000007, end=' ')\n        flag = flag - top_bot[i].last\n    print()", "def modify(tree, l, r, val, n):\n    l += n\n    r += n\n    while l < r:\n        if l & 1:\n            tree[l] += val % 1000000007\n            l += 1\n        if r & 1:\n            r -= 1\n            tree[r] += val % 1000000007\n        l >>= 1\n        r >>= 1\n\ndef query(tree, p, n):\n    res = 0\n    p += n\n    while p > 0:\n        res += tree[p] % 1000000007\n        p >>= 1\n    return res\n\ndef push(tree, n):\n    for i in range(1, n):\n        tree[i << 1] += tree[i] % 1000000007\n        tree[i << 1 | 1] += tree[i] % 1000000007\n        tree[i] = 0\ntc = int(input())\nfor test in range(tc):\n    (n, m) = map(int, input().split())\n    (type1, type2) = ([], [])\n    tree = [0] * (2 * n)\n    for _ in range(m):\n        (t, l, r) = map(int, input().split())\n        if t == 1:\n            type1.append(list([_, l - 1, r]))\n        else:\n            type2.append(list([_, l - 1, r]))\n    cmd = [0] * m + [1] * m\n    for tty in range(len(type2) - 1, -1, -1):\n        val = query(cmd, type2[tty][0], m)\n        modify(cmd, type2[tty][1], type2[tty][2], val, m)\n    push(cmd, m)\n    for x in range(len(type1)):\n        value = query(cmd, type1[x][0], m)\n        modify(tree, type1[x][1], type1[x][2], value, n)\n    push(tree, n)\n    tree = list([x % 1000000007 for x in tree[n:]])\n    print(' '.join(list(map(str, tree))))", "tn = int(input().rstrip())\nfor ti in range(tn):\n    (n, m) = map(int, input().split())\n    a = [0] * n\n    d = {}\n    t = []\n    (tl, tr) = ({}, {})\n    for i in range(m):\n        (ty, l, r) = map(int, input().split())\n        l -= 1\n        t += [[(ty, l, r), 1]]\n        if ty == 1:\n            d[l] = d.get(l, []) + [i]\n            d[r] = d.get(r, []) + [i]\n        else:\n            tl[l] = tl.get(l, []) + [i]\n            tr[r] = tr.get(r, []) + [i]\n    activ = {}\n    s = 1\n    for i in range(m - 1, -1, -1):\n        (ty, l, r) = t[i][0]\n        t[i][1] = s\n        if activ:\n            for j in tl.get(i, ()):\n                del activ[j]\n                s -= t[j][1]\n        for j in tr.get(i, ()):\n            activ[j] = True\n            s += t[j][1]\n    activ = {}\n    s = 0\n    l = -1\n    for r in sorted(d.keys()):\n        activ_b = bool(activ)\n        s_temp = 0\n        for i in d[r]:\n            if activ.get(i, False):\n                del activ[i]\n                s_temp -= t[i][1]\n            else:\n                activ[i] = True\n                s_temp += t[i][1]\n        if activ_b:\n            for k in range(l, r):\n                a[k] = s % (10 ** 9 + 7)\n        l = r\n        s += s_temp\n    print(' '.join(map(str, a)))", "tn = int(input().rstrip())\nfor ti in range(tn):\n    (n, m) = map(int, input().split())\n    a = [0] * n\n    dk = []\n    (dl, dr) = ({}, {})\n    t = []\n    (tl, tr) = ({}, {})\n    for i in range(m):\n        (ty, l, r) = map(int, input().split())\n        l -= 1\n        t += [[(ty, l, r), 1]]\n        if ty == 1:\n            dk += [l, r]\n            dl[l] = dl.get(l, []) + [i]\n            dr[r] = dr.get(r, []) + [i]\n        else:\n            tl[l] = tl.get(l, []) + [i]\n            tr[r] = tr.get(r, []) + [i]\n    activ = {}\n    s = 1\n    for i in range(m - 1, -1, -1):\n        (ty, l, r) = t[i][0]\n        t[i][1] = s\n        if activ:\n            for j in tl.get(i, ()):\n                del activ[j]\n                s -= t[j][1]\n        for j in tr.get(i, ()):\n            activ[j] = True\n            s += t[j][1]\n    activ = {}\n    s = 0\n    last = -1\n    for j in sorted(dk):\n        if j == last:\n            continue\n        if activ:\n            for k in range(last, j):\n                a[k] = s % (10 ** 9 + 7)\n            for i in dr.get(j, ()):\n                del activ[i]\n                s -= t[i][1]\n        for i in dl.get(j, ()):\n            activ[i] = True\n            s += t[i][1]\n        last = j\n    print(' '.join(map(str, a)))", "tn = int(input().rstrip())\nfor ti in range(tn):\n    (n, m) = map(int, input().split())\n    a = [0] * n\n    d = {}\n    t = []\n    (tl, tr) = ({}, {})\n    for i in range(m):\n        (ty, l, r) = map(int, input().split())\n        l -= 1\n        t += [[(ty, l, r), 1]]\n        if ty == 1:\n            d[l] = d.get(l, []) + [i]\n            d[r] = d.get(r, []) + [i]\n        else:\n            tl[l] = tl.get(l, []) + [i]\n            tr[r] = tr.get(r, []) + [i]\n    activ = {}\n    s = 1\n    for i in range(m - 1, -1, -1):\n        (ty, l, r) = t[i][0]\n        t[i][1] = s\n        if activ:\n            for j in tl.get(i, ()):\n                del activ[j]\n                s -= t[j][1]\n        for j in tr.get(i, ()):\n            activ[j] = True\n            s += t[j][1]\n    activ = {}\n    s = 0\n    l = -1\n    for r in sorted(d.keys()):\n        activ_b = bool(activ)\n        s_temp = 0\n        for i in d[r]:\n            if activ.get(i, False):\n                del activ[i]\n                s_temp -= t[i][1]\n            else:\n                activ[i] = True\n                s_temp += t[i][1]\n        if activ_b:\n            for k in range(l, r):\n                a[k] = s % (10 ** 9 + 7)\n        l = r\n        s += s_temp\n    print(' '.join(map(str, a)))", "from sys import stdin\nfrom itertools import accumulate\n\ndef nextpower(x):\n    count = 0\n    while x > 0:\n        count += 1\n        x >>= 1\n    return 1 << count\n\ndef construct_tree(ar, seg, low, high, pos):\n    if low == high:\n        seg[pos] = count[low]\n        return\n    mid = (low + high) // 2\n    construct_tree(ar, seg, low, mid, 2 * pos + 1)\n    construct_tree(ar, seg, mid + 1, high, 2 * pos + 2)\n    seg[pos] = 0\n\ndef traverse(seg, node, low, high, pos):\n    if low == high and low == node:\n        return seg[pos]\n    mid = (low + high) // 2\n    if seg[pos] != 0:\n        seg[2 * pos + 1] += seg[pos]\n        seg[2 * pos + 2] += seg[pos]\n        seg[pos] = 0\n    if node > mid:\n        return traverse(seg, node, mid + 1, high, 2 * pos + 2)\n    else:\n        return traverse(seg, node, low, mid, 2 * pos + 1)\n\ndef count_query(seg, qlow, qhigh, low, high, pos, val):\n    if qlow <= low and qhigh >= high:\n        seg[pos] += val\n        return\n    if qlow > high or qhigh < low:\n        return\n    mid = (low + high) // 2\n    seg[2 * pos + 1] += seg[pos]\n    seg[2 * pos + 2] += seg[pos]\n    seg[pos] = 0\n    count_query(seg, qlow, qhigh, low, mid, 2 * pos + 1, val)\n    count_query(seg, qlow, qhigh, mid + 1, high, 2 * pos + 2, val)\nmod = 10 ** 9 + 7\nT = int(stdin.readline())\nwhile T:\n    T -= 1\n    (n, m) = map(int, stdin.readline().split())\n    a = []\n    for i in range(m):\n        a.append(tuple(map(int, stdin.readline().split())))\n    count = [1] * m\n    if m & m - 1 == 0:\n        seg = [0] * (2 * m - 1)\n    else:\n        seg = [0] * (2 * nextpower(m) - 1)\n    construct_tree(count, seg, 0, m - 1, 0)\n    for (index, query) in enumerate(reversed(a)):\n        count[m - index - 1] = traverse(seg, m - index - 1, 0, m - 1, 0)\n        if query[0] == 2:\n            count_query(seg, query[1] - 1, query[2] - 1, 0, m - 1, 0, count[m - index - 1])\n    ans = [0] * (n + 1)\n    for (index, query) in enumerate(a):\n        if query[0] == 1:\n            ans[query[1] - 1] += count[index]\n            ans[query[2]] -= count[index]\n    ans = list(accumulate(ans))[:-1]\n    for i in ans:\n        print(i % mod, end=' ')\n    print()", "mod = 1000000007\n\ndef gsum(bit, i):\n    sum = 0\n    while i > 0:\n        sum += bit[i]\n        i -= i & -i\n    return sum\n\ndef take_input(q, m):\n    for _ in range(m):\n        (type, x, y) = map(int, input().split())\n        q.append([type, [x, y]])\n\ndef solve(q, m, v):\n    for z in range(m, 0, -1):\n        x = q[z][1][1]\n        type = q[z][0]\n        y = q[z][1][0]\n        if type == 2:\n            lala = gsum(bit, z)\n            f(bit, y, x, lala)\n        else:\n            lala = gsum(bit, z)\n            v[y] += lala\n            v[x + 1] -= lala\n\ndef f(bit, y, x, val):\n    ubit(bit, m, y, val)\n    ubit(bit, m, x + 1, -val)\n\ndef print_ans(ans):\n    print(*ans)\n\ndef ubit(bit, n, i, val):\n    while i <= n:\n        bit[i] += val\n        i += i & -i\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    bit = [0] * (m + 5)\n    v = [0] * (n + 5)\n    q = [0]\n    ubit(bit, m, 1, 1)\n    take_input(q, m)\n    solve(q, m, v)\n    ans = []\n    for i in range(1, n + 1):\n        v[i] = (v[i] + v[i - 1]) % mod\n        ans.append(v[i])\n    print_ans(ans)", "t = int(input())\nmod = 1000000007\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    q = []\n    ctr = []\n    dp = []\n    for i in range(m):\n        ctr.append(1)\n        dp.append(0)\n    for i in range(m):\n        (type, l, r) = [int(x) for x in input().split()]\n        q.append([type, l, r])\n    i = m - 1\n    if q[i][0] == 2:\n        dp[q[i][2] - 1] += ctr[i]\n        if q[i][1] - 2 >= 0:\n            dp[q[i][1] - 2] -= ctr[i]\n    for i in range(m - 2, -1, -1):\n        dp[i] += dp[i + 1]\n        ctr[i] += dp[i]\n        if q[i][0] == 2:\n            dp[q[i][2] - 1] += ctr[i]\n            if q[i][1] - 2 >= 0:\n                dp[q[i][1] - 2] -= ctr[i]\n    dp = []\n    for i in range(n):\n        dp.append(0)\n    for i in range(m):\n        if q[i][0] == 1:\n            dp[q[i][1] - 1] += ctr[i]\n            if q[i][2] < n:\n                dp[q[i][2]] -= ctr[i]\n    print(dp[0] % mod, end=' ')\n    for i in range(1, n):\n        dp[i] += dp[i - 1]\n        print(dp[i] % mod, end=' ')\n    print('')", "class data:\n    key = 0\n    l = 0\n    r = 0\n\nclass rep:\n    start = 0\n    end = 0\ntest = int(input())\nfor i in range(test):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    arr = [data() for i in range(m + 1)]\n    comp = [rep() for i in range(m + 1)]\n    val = [rep() for i in range(n + 1)]\n    for i in range(1, n + 1):\n        val[i].start = 0\n        val[i].end = 0\n    for i in range(1, m + 1):\n        comp[i].start = 0\n        comp[i].end = 0\n    for i in range(1, m + 1):\n        (x, y, z) = input().split()\n        arr[i].key = int(x)\n        arr[i].l = int(y)\n        arr[i].r = int(z)\n    temp = 1\n    for i in range(m, 0, -1):\n        temp = temp + comp[i].end\n        if arr[i].key == 2:\n            comp[arr[i].l].start = comp[arr[i].l].start + temp\n            comp[arr[i].r].end = comp[arr[i].r].end + temp\n        temp = temp - comp[i].start\n    temp = 1\n    for i in range(1, m + 1):\n        temp = temp + comp[i].start\n        if arr[i].key == 1:\n            val[arr[i].l].start = val[arr[i].l].start + temp\n            val[arr[i].r].end = val[arr[i].r].end + temp\n        temp = temp - comp[i].end\n    temp = 0\n    for i in range(1, n + 1):\n        temp = temp + val[i].start\n        ans = temp % 1000000007\n        print(ans, end=' ')\n        temp = temp - val[i].end\n    print()", "mod = 10 ** 9 + 7\nt = int(input())\ntd = dict()\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    queries = []\n    ass = [0] * (n + 1)\n    for i in range(m):\n        (a, b, c) = map(int, input().split())\n        queries.append((a, b, c))\n        if a == 1:\n            ass[b - 1] += 1\n            ass[c] -= 1\n    queries = queries[::-1]\n    stk = [0] * (2 * m)\n    stc = 0\n    for q in range(m):\n        (a, b, c) = (queries[q][0], queries[q][1], queries[q][2])\n        if a == 1:\n            ass[b - 1] += stc + stk[q]\n            ass[c] -= stc + stk[q]\n        else:\n            stk[m - c] += stk[q] + 1 + stc\n            stk[m - b + 1] -= stk[q] + 1 + stc\n        stc += stk[q]\n    arr = [0] * n\n    l = 0\n    for i in range(n):\n        l += ass[i]\n        if l > 0:\n            arr[i] = l % mod\n    print(*arr)", "mod = 10 ** 9 + 7\nt = int(input())\ntd = dict()\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    ones = dict()\n    queries = []\n    for i in range(m):\n        (a, b, c) = map(int, input().split())\n        queries.append((a, b, c))\n        if a == 1:\n            if (b, c) in ones.keys():\n                ones[b, c] += 1\n            else:\n                ones[b, c] = 1\n    queries = queries[::-1]\n    stk = [0] * (2 * m)\n    stc = 0\n    pre = 0\n    flag = 0\n    brk = 1\n    for q in range(m):\n        (a, b, c) = (queries[q][0], queries[q][1], queries[q][2])\n        if a == 1:\n            ones[b, c] += stc + stk[q]\n        else:\n            stk[m - c] += stk[q] + 1 + stc\n            stk[m - b + 1] -= stk[q] + 1 + stc\n        stc += stk[q]\n    ass = [0] * (n + 1)\n    arr = [0] * n\n    for i in ones.keys():\n        ass[i[0] - 1] += ones[i]\n        ass[i[1]] -= ones[i]\n    l = 0\n    for i in range(n):\n        l += ass[i]\n        if l > 0:\n            arr[i] = l % mod\n    print(*arr)", "t = int(input())\nans = []\nfor i in range(t):\n    (n, m) = list(map(int, input().split()))\n    commands = []\n    for j in range(m):\n        (t, l, r) = list(map(int, input().split()))\n        commands.append((t, l, r))\n    actual_repetition_count = [0 for j in range(m)]\n    pseudo_repetition_count = [0 for j in range(m)]\n    for j in range(m - 1, -1, -1):\n        (t, l, r) = commands[j]\n        l -= 1\n        r -= 1\n        if j < m - 1:\n            pseudo_repetition_count[j] += pseudo_repetition_count[j + 1]\n        if t == 2:\n            actual_repetition_count[j] += pseudo_repetition_count[j] + 1\n            inc = actual_repetition_count[j]\n            pseudo_repetition_count[r] += inc\n            if l > 0:\n                pseudo_repetition_count[l - 1] -= inc\n        else:\n            actual_repetition_count[j] += pseudo_repetition_count[j] + 1\n    final_list = [0 for j in range(n)]\n    for j in range(m):\n        (t, l, r) = commands[j]\n        l -= 1\n        r -= 1\n        if t == 1:\n            inc = actual_repetition_count[j]\n            final_list[l] += inc\n            if r < n - 1:\n                final_list[r + 1] -= inc\n    for j in range(1, n):\n        final_list[j] += final_list[j - 1]\n    for j in range(0, n):\n        final_list[j] = final_list[j] % 1000000007\n    ans.append(final_list)\nfor x in ans:\n    for (idx, ele) in enumerate(x):\n        if idx < len(x) - 1:\n            print(str(ele) + ' ', end='')\n        else:\n            print(str(ele) + '\\n', end='')", "for tcc in range(int(input())):\n    (n, m) = map(int, input().split())\n    start = [0 for i in range(m + 1)]\n    end = [0 for i in range(m + 1)]\n    freq = [1 for i in range(m + 1)]\n    cmdlist = []\n    newcmdlist = {}\n    for mit in range(m):\n        cmdlist.append(input())\n    co = 0\n    for index in range(m):\n        lcmd = cmdlist.pop()\n        (t, l, r) = map(int, lcmd.split())\n        zz = m - index\n        co = co + start[zz]\n        freq[zz] = freq[zz] + co\n        if t == 2:\n            start[r] = start[r] + freq[zz]\n            end[l] = end[l] + freq[zz]\n        else:\n            newcmdlist[m - index] = lcmd\n        co = co - end[zz]\n    start = [0 for i in range(n + 1)]\n    end = [0 for i in range(n + 1)]\n    val = [0 for i in range(n + 1)]\n    co = 0\n    for i in range(1, m + 1):\n        if i in newcmdlist:\n            (t, l, r) = map(int, newcmdlist[i].split())\n            start[l] = start[l] + freq[i]\n            end[r] = end[r] + freq[i]\n    for i in range(1, n + 1):\n        co = co + start[i]\n        val[i] = co\n        co = co - end[i]\n        print(val[i] % 1000000007, end=' ')\n    print()", "class data:\n    key = 0\n    l = 0\n    r = 0\n\nclass repete:\n    start = 0\n    end = 0\ntest = int(input())\nfor i in range(test):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    arr = [data() for i in range(m + 1)]\n    com = [repete() for i in range(m + 1)]\n    val = [repete() for i in range(n + 1)]\n    for i in range(1, n + 1):\n        val[i].start = 0\n        val[i].end = 0\n    for i in range(1, m + 1):\n        com[i].start = 0\n        com[i].end = 0\n    for i in range(1, m + 1):\n        (x, y, z) = input().split()\n        arr[i].key = int(x)\n        arr[i].l = int(y)\n        arr[i].r = int(z)\n    temp = 1\n    for i in range(m, 0, -1):\n        temp = temp + com[i].end\n        if arr[i].key == 2:\n            com[arr[i].l].start = com[arr[i].l].start + temp\n            com[arr[i].r].end = com[arr[i].r].end + temp\n        temp = temp - com[i].start\n    temp = 1\n    for i in range(1, m + 1):\n        temp = temp + com[i].start\n        if arr[i].key == 1:\n            val[arr[i].l].start = val[arr[i].l].start + temp\n            val[arr[i].r].end = val[arr[i].r].end + temp\n        temp = temp - com[i].end\n    temp = 0\n    p = 0\n    for i in range(1, n + 1):\n        temp = temp + val[i].start\n        p = temp % 1000000007\n        print(p, end=' ')\n        temp = temp - val[i].end\n    print()", "t = input()\ns = ' '\nwhile int(t) > 0:\n    (n, q) = map(int, input().split())\n    A = [[0 for x in range(3)] for y in range(q + 1)]\n    b = [0] * 100001\n    G = [0] * 1000001\n    for i in range(1, q + 1, 1):\n        (A[i][0], A[i][1], A[i][2]) = map(int, input().split())\n    c = 1\n    for i in range(q, 0, -1):\n        c = c + b[i]\n        b[i] = c\n        if A[i][0] == 2:\n            b[A[i][1] - 1] = b[A[i][1] - 1] - c\n            b[A[i][2]] = b[A[i][2]] + c\n        else:\n            G[A[i][1]] = G[A[i][1]] + b[i]\n            G[A[i][2] + 1] = G[A[i][2] + 1] - b[i]\n    e = 0\n    for i in range(1, n + 1, 1):\n        e = e + G[i]\n        G[i] = e\n        print(G[i] % 1000000007, s, end='')\n    print()\n    t = int(t) - 1", "t = input()\nx = ' '\nwhile int(t) > 0:\n    (n, q) = map(int, input().split())\n    A = [[0 for x in range(3)] for y in range(q + 1)]\n    b = [0] * 100001\n    e = [0] * 1000001\n    for i in range(1, q + 1, 1):\n        (A[i][0], A[i][1], A[i][2]) = map(int, input().split())\n    c = 1\n    for i in range(q, 0, -1):\n        c = c + b[i]\n        b[i] = c\n        if A[i][0] == 2:\n            b[A[i][1] - 1] = b[A[i][1] - 1] - c\n            b[A[i][2]] = b[A[i][2]] + c\n        else:\n            e[A[i][1]] = e[A[i][1]] + b[i]\n            e[A[i][2] + 1] = e[A[i][2] + 1] - b[i]\n    d = 0\n    for i in range(1, n + 1, 1):\n        d = d + e[i]\n        e[i] = d\n        print(e[i] % 1000000007, x, end='')\n    print()\n    t = int(t) - 1", "t = input()\nx = ' '\nwhile int(t) > 0:\n    (n, q) = map(int, input().split())\n    A = [[0 for x in range(3)] for y in range(q + 1)]\n    b = [0] * 100001\n    e = [0] * 1000001\n    for i in range(1, q + 1, 1):\n        (A[i][0], A[i][1], A[i][2]) = map(int, input().split())\n    c = 1\n    for i in range(q, 0, -1):\n        c = c + b[i]\n        b[i] = c\n        if A[i][0] == 2:\n            b[A[i][1] - 1] = b[A[i][1] - 1] - c\n            b[A[i][2]] = b[A[i][2]] + c\n        else:\n            e[A[i][1]] = e[A[i][1]] + b[i]\n            e[A[i][2] + 1] = e[A[i][2] + 1] - b[i]\n    d = 0\n    for i in range(1, n + 1, 1):\n        d = d + e[i]\n        e[i] = d\n        print(e[i] % 1000000007, x, end='')\n    print()\n    t = int(t) - 1", "T = int(input().strip())\nwhile T > 0:\n    T -= 1\n    (N, M) = list(map(int, input().strip().split()))\n    commands = [None]\n    incur = [0] * (M + 2)\n    ans = [0] * (N + 2)\n    for i in range(1, M + 1):\n        commands.append(list(map(int, input().strip().split())))\n    inc = 0\n    for i in range(M, 0, -1):\n        if commands[i][0] == 1:\n            ans[commands[i][1]] += inc + 1\n            ans[commands[i][2] + 1] -= inc + 1\n            inc -= incur[i]\n        else:\n            inc += 1\n            prev_incur = incur[i]\n            incur[commands[i][1]] += inc\n            incur[commands[i][2] + 1] -= inc\n            tc = 0\n            if commands[i][1] <= i - 1:\n                tc += inc\n            if commands[i][2] + 1 <= i - 1:\n                tc -= inc\n            inc += tc - prev_incur - 1\n    res = [ans[1]]\n    for i in range(2, N + 2):\n        res.append(res[-1] + ans[i])\n    print(' '.join((str(res[i] % (10 ** 9 + 7)) for i in range(N))))", "from collections import defaultdict\n\ndef printResult(result, n):\n    current = 0\n    for i in range(n):\n        current += result[i]\n        current %= 10 ** 9 + 7\n        print(current, end=' ')\n    print()\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    result = defaultdict(int)\n    repeats = defaultdict(int)\n    queries = []\n    current_query = m\n    repeat = 0\n    for i in range(m):\n        queries.append(list(map(int, input().split())))\n    for (t, l, r) in reversed(queries):\n        current_query -= 1\n        repeat += repeats[current_query]\n        if t == 2:\n            repeats[r - 1] += repeat + 1\n            repeats[l - 2] -= repeat + 1\n        else:\n            result[l - 1] += repeat + 1\n            result[r] -= repeat + 1\n    printResult(result, n)", "T = int(input().strip())\nfor _ in range(T):\n    (n, m) = input().strip().split(' ')\n    (n, m) = [int(n), int(m)]\n    com = [0] * (m + 1)\n    for y in range(1, m + 1):\n        (t, l, r) = input().strip().split(' ')\n        (t, l, r) = [int(t), int(l), int(r)]\n        com[y] = [t, l, r]\n    a = [1] * (m + 1)\n    b = [0] * (m + 1)\n    for i in range(m, 0, -1):\n        if i <= m - 1:\n            b[i] = b[i] + b[i + 1]\n        if com[i][0] == 2:\n            b[com[i][2]] += b[i] + 1\n            if com[i][1] - 1 >= 1:\n                b[com[i][1] - 1] -= b[i] + 1\n    summ = [0] * (n + 1)\n    for i in range(1, m + 1):\n        if com[i][0] == 1:\n            summ[com[i][1]] = summ[com[i][1]] + (b[i] + 1)\n            if com[i][2] + 1 <= n:\n                summ[com[i][2] + 1] = summ[com[i][2] + 1] - (b[i] + 1)\n    print(summ[1] % 1000000007, end=' ')\n    for i in range(2, n + 1):\n        summ[i] = (summ[i] % 1000000007 + summ[i - 1] % 1000000007) % 1000000007\n        print(summ[i] % 1000000007, end=' ')\n    print()", "t = input()\nwhile int(t) > 0:\n    k = 1\n    l = 0\n    (n, q) = map(int, input().split())\n    t1 = [[0 for x in range(3)] for y in range(q + 1)]\n    t2 = [0] * 100001\n    t3 = [0] * 1000001\n    for i in range(1, q + 1, 1):\n        (t1[i][0], t1[i][1], t1[i][2]) = map(int, input().split())\n    for i in range(q, 0, -1):\n        k = k + t2[i]\n        t2[i] = k\n        if t1[i][0] == 1:\n            t3[t1[i][2] + 1] = t3[t1[i][2] + 1] - t2[i]\n            t3[t1[i][1]] = t3[t1[i][1]] + t2[i]\n        else:\n            t2[t1[i][2]] = t2[t1[i][2]] + k\n            t2[t1[i][1] - 1] = t2[t1[i][1] - 1] - k\n    for i in range(1, n + 1, 1):\n        l = l + t3[i]\n        t3[i] = l\n        print(t3[i] % 1000000007, '', end='')\n    print()\n    t = int(t) - 1", "t = input()\nx = ' '\nwhile int(t) > 0:\n    k = 1\n    l = 0\n    (n, q) = map(int, input().split())\n    a = [[0 for x in range(3)] for y in range(q + 1)]\n    B = [0] * 100001\n    c = [0] * 1000001\n    for i in range(1, q + 1, 1):\n        (a[i][0], a[i][1], a[i][2]) = map(int, input().split())\n    for i in range(q, 0, -1):\n        k = k + B[i]\n        B[i] = k\n        if a[i][0] == 1:\n            c[a[i][2] + 1] = c[a[i][2] + 1] - B[i]\n            c[a[i][1]] = c[a[i][1]] + B[i]\n        else:\n            B[a[i][2]] = B[a[i][2]] + k\n            B[a[i][1] - 1] = B[a[i][1] - 1] - k\n    for i in range(1, n + 1, 1):\n        l = l + c[i]\n        c[i] = l\n        print(c[i] % 1000000007, x, end='')\n    print()\n    t = int(t) - 1", "t = input()\nx = ' '\nwhile int(t) > 0:\n    (n, q) = map(int, input().split())\n    a = [[0 for x in range(3)] for y in range(q + 1)]\n    B = [0] * 100001\n    C = [0] * 1000001\n    for i in range(1, q + 1, 1):\n        (a[i][0], a[i][1], a[i][2]) = map(int, input().split())\n    c = 1\n    for i in range(q, 0, -1):\n        c = c + B[i]\n        B[i] = c\n        if a[i][0] == 2:\n            B[a[i][1] - 1] = B[a[i][1] - 1] - c\n            B[a[i][2]] = B[a[i][2]] + c\n        else:\n            C[a[i][1]] = C[a[i][1]] + B[i]\n            C[a[i][2] + 1] = C[a[i][2] + 1] - B[i]\n    d = 0\n    for i in range(1, n + 1, 1):\n        d = d + C[i]\n        C[i] = d\n        print(C[i] % 1000000007, x, end='')\n    print()\n    t = int(t) - 1", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    p = []\n    for j in range(m):\n        l = list(map(int, input().split()))\n        p.append(l)\n    q = [0] * m\n    q[0] = 1\n    d = []\n    r = 1\n    for k in range(m - 1, -1, -1):\n        if p[k][0] == 2:\n            a = p[k][1]\n            b = p[k][2]\n            q[a - 1] = q[a - 1] + r\n            q[b] = q[b] - r\n        else:\n            d.append(k)\n        r = r - q[k]\n    for j in range(1, m):\n        q[j] = q[j] + q[j - 1]\n    s = [0] * n\n    for h in d:\n        a = p[h][1]\n        b = p[h][2]\n        s[a - 1] = s[a - 1] + q[h]\n        if b != n:\n            s[b] = s[b] - q[h]\n    print(s[0] % 1000000007, end=' ')\n    for l in range(1, n):\n        s[l] = s[l] + s[l - 1]\n        print(s[l] % 1000000007, end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    p = []\n    for j in range(m):\n        l = list(map(int, input().split()))\n        p.append(l)\n    q = [0] * m\n    q[0] = 1\n    d = []\n    r = 1\n    for k in range(m - 1, -1, -1):\n        if p[k][0] == 2:\n            a = p[k][1]\n            b = p[k][2]\n            q[a - 1] = q[a - 1] + r\n            q[b] = q[b] - r\n        else:\n            d.append(k)\n        r = r - q[k]\n    for j in range(1, m):\n        q[j] = q[j] + q[j - 1]\n    s = [0] * n\n    for h in d:\n        a = p[h][1]\n        b = p[h][2]\n        s[a - 1] = s[a - 1] + q[h]\n        if b != n:\n            s[b] = s[b] - q[h]\n    print(s[0] % 1000000007, end=' ')\n    for l in range(1, n):\n        s[l] = s[l] + s[l - 1]\n        print(s[l] % 1000000007, end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    finalarr = [0] * n\n    command = []\n    times = [0] * (m + 1)\n    times[m] = 1\n    times[0] = -1\n    for j in range(m):\n        l = list(map(int, input().split()))\n        command.append(l)\n    s = 0\n    for j in range(m, -1, -1):\n        if j - 1 >= 0:\n            initial = command[j - 1][1]\n            final = command[j - 1][2]\n        s = s + times[j]\n        times[j] = s\n        if j - 1 >= 0 and command[j - 1][0] == 2:\n            if initial - 1 >= 0:\n                times[initial - 1] = times[initial - 1] - s\n            times[final] = times[final] + s\n    times = times[1:]\n    s = 0\n    for j in range(m - 1, -1, -1):\n        initial = command[j][1] - 1\n        final = command[j][2] - 1\n        if command[j][0] == 1:\n            finalarr[initial] = finalarr[initial] + times[j]\n            if final + 1 < n:\n                finalarr[final + 1] = finalarr[final + 1] - times[j]\n    S = ''\n    s = 0\n    for j in range(n):\n        s = (s + finalarr[j]) % 1000000007\n        S = S + str(s) + ' '\n    print(S)", "def getsum(BITTree, i):\n    s = 0\n    while i > 0:\n        s += BITTree[i]\n        i -= i & -i\n    return s\n\ndef updatebit(BITTree, n, i, v):\n    while i <= n:\n        BITTree[i] += v\n        i += i & -i\n\ndef fun(BITTree, a, b, v):\n    updatebit(BITTree, m, a, v)\n    updatebit(BITTree, m, b + 1, -v)\nt = int(input())\nfor x in range(t):\n    (n, m) = map(int, input().split())\n    BITTree = [0] * (m + 10)\n    v = [0] * (n + 5)\n    updatebit(BITTree, m, 1, 1)\n    q = [0]\n    for z in range(m):\n        (ty, a, b) = map(int, input().split())\n        q.append([ty, [a, b]])\n    for z in range(m, 0, -1):\n        ty = q[z][0]\n        a = q[z][1][0]\n        b = q[z][1][1]\n        if ty == 1:\n            inc = getsum(BITTree, z)\n            v[a] += inc\n            v[b + 1] -= inc\n        else:\n            inc = getsum(BITTree, z)\n            fun(BITTree, a, b, inc)\n    ans = []\n    for i in range(1, n + 1):\n        v[i] = v[i] + v[i - 1]\n        v[i] = v[i] % 1000000007\n        ans.append(v[i])\n    print(*ans)", "class BIT(object):\n\n    def __init__(self, arr):\n        self.arr = [0] * (len(arr) + 1)\n\n    def update(self, idx, val):\n        idx += 1\n        while idx < len(self.arr):\n            self.arr[idx] = self.arr[idx] + val\n            idx += idx & -idx\n\n    def update_(self, l, r, val):\n        self.update(l, val)\n        self.update(r + 1, -val)\n\n    def prefixQuery(self, end):\n        res = 0\n        end += 1\n        while end > 0:\n            res = (self.arr[end] + res) % 1000000007\n            end -= end & -end\n        return res % 1000000007\n\n    def rangeQuery(self, from_, to):\n        return self.prefixQuery(to) - self.prefixQuery(from_ - 1)\n\ndef solve(qs, n):\n    a = [0 for i in range(n)]\n    f = [1 for i in range(len(qs))]\n    queries = BIT(f)\n    array = BIT(a)\n    i = len(qs) - 1\n    for (t, l, r) in reversed(qs):\n        if t == 2:\n            num = queries.prefixQuery(i)\n            f[i] = (f[i] + num) % 1000000007\n            queries.update_(l - 1, r - 1, f[i])\n        else:\n            num = queries.prefixQuery(i)\n            array.update_(l - 1, r - 1, num + f[i])\n        i -= 1\n    for i in range(n):\n        num = array.prefixQuery(i)\n        print(num, end=' ')\n    print()\nfrom sys import stdin, stdout\nfor _ in range(int(stdin.readline().strip())):\n    (n, m) = map(int, stdin.readline().strip().split())\n    qs = []\n    while m:\n        (t, l, r) = map(int, stdin.readline().strip().split())\n        qs.append((t, l, r))\n        m -= 1\n    solve(qs, n)", "mod = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    calls = [0 for i in range(q)]\n    prefixsum = [0 for i in range(n)]\n    queries = []\n    curr = 0\n    for i in range(q):\n        (m, l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        queries.append((m, l, r))\n    for i in range(q - 1, -1, -1):\n        (tempm, templ, tempr) = (queries[i][0], queries[i][1], queries[i][2])\n        curr += calls[i]\n        if tempm == 2:\n            calls[tempr] += curr + 1\n            if templ > 0:\n                calls[templ - 1] -= curr + 1\n        else:\n            prefixsum[templ] += curr + 1\n            if tempr < n - 1:\n                prefixsum[tempr + 1] -= curr + 1\n    answer = []\n    temp = 0\n    for i in prefixsum:\n        temp += i\n        answer.append(temp % mod)\n    print(*answer)", "t = int(input().strip())\nfor a0 in range(t):\n    (n, m) = [int(_) for _ in input().strip().split()]\n    a = [0] * n\n    l1 = []\n    for b0 in range(m):\n        (e, p, q) = [int(_) for _ in input().strip().split()]\n        l1.append([e, p, q])\n    l2 = l1\n    step = [0] * m\n    y = 1\n    l2.reverse()\n    for i in range(m):\n        y += step[i]\n        if l2[i][0] == 1:\n            a[l2[i][1] - 1] += y\n            if l2[i][2] < n:\n                a[l2[i][2]] -= y\n        else:\n            step[m - l2[i][2]] += y\n            if m - l2[i][1] + 1 < m:\n                step[m - l2[i][1] + 1] -= y\n    x = 0\n    for i in range(n - 1):\n        x += a[i]\n        x = x % 1000000007\n        print(x, end=' ')\n    print((x + a[n - 1]) % 1000000007)", "def main():\n    T = int(input())\n    for t in range(T):\n        li = list(map(int, input().strip().split()))\n        n = li[0]\n        m = li[1]\n        arr = []\n        for i in range(n):\n            arr.append(0)\n        quer = []\n        for i in range(m):\n            (t, l, r) = map(int, input().strip().split())\n            quer.append([t, l - 1, r - 1, []])\n        ans = 1\n        for i in range(m - 1, -1, -1):\n            for j in range(len(quer[i][3])):\n                ans += quer[i][3][j][0] * quer[i][3][j][1]\n            if quer[i][0] == 1:\n                arr[quer[i][1]] += ans\n                if quer[i][2] + 1 < n:\n                    arr[quer[i][2] + 1] -= ans\n            else:\n                if quer[i][1] - 1 >= 0:\n                    quer[quer[i][1] - 1][3].append([-1, ans])\n                quer[quer[i][2]][3].append([1, ans])\n        sumer = 0\n        for i in range(n):\n            sumer += arr[i]\n            print(sumer % (10 ** 9 + 7), end=' ')\n        print('')\nmain()", "T = int(input())\nfor x in range(T):\n    [n, m] = [int(y) for y in input().split()]\n    l1 = []\n    A = []\n    l2 = []\n    for j in range(n):\n        A.append(0)\n    for j in range(m):\n        l1.append([int(y) for y in input().split()])\n        l1[j].append([])\n    ans = 1\n    for j in range(m - 1, -1, -1):\n        for k in range(len(l1[j][3])):\n            ans += l1[j][3][k][0] * l1[j][3][k][1]\n        if l1[j][0] == 2:\n            if l1[j][1] - 2 >= 0:\n                l1[l1[j][1] - 2][3].append([-1, ans])\n            l1[l1[j][2] - 1][3].append([1, ans])\n        else:\n            A[l1[j][1] - 1] += ans\n            if l1[j][2] < len(A):\n                A[l1[j][2]] -= ans\n    s = 0\n    for j in range(n):\n        s += A[j]\n        print(s % (7 + 10 ** 9), end=' ')\n    print()", "T = int(input())\nfor x in range(T):\n    [n, m] = [int(y) for y in input().split()]\n    l1 = []\n    A = []\n    l2 = []\n    for j in range(n):\n        A.append(0)\n    for j in range(m):\n        l1.append([int(y) for y in input().split()])\n        l1[j].append([])\n        if l1[j][0] == 1:\n            l2.append(j)\n    ans = 1\n    for j in range(m - 1, -1, -1):\n        s = 0\n        for k in range(len(l1[j][3])):\n            s += l1[j][3][k][0] * l1[j][3][k][1]\n        ans += s\n        if l1[j][0] == 2:\n            if l1[j][1] - 2 >= 0:\n                l1[l1[j][1] - 2][3].append([-1, ans])\n            l1[l1[j][2] - 1][3].append([1, ans])\n        else:\n            l1[j][3].append(ans)\n            A[l1[j][1] - 1] += l1[j][3][-1]\n            if l1[j][2] < len(A):\n                A[l1[j][2]] -= l1[j][3][-1]\n    s = 0\n    for j in range(n):\n        s += A[j]\n        print(s % (7 + 10 ** 9), end=' ')\n    print()", "T = int(input())\nfor x in range(T):\n    [n, m] = [int(y) for y in input().split()]\n    l1 = []\n    A = []\n    l2 = []\n    for j in range(n):\n        A.append(0)\n    for j in range(m):\n        l1.append([int(y) for y in input().split()])\n        l1[j].append([])\n        if l1[j][0] == 1:\n            l2.append(j)\n    ans = 1\n    for j in range(m - 1, -1, -1):\n        s = 0\n        for k in range(len(l1[j][3])):\n            s += l1[j][3][k][0] * l1[j][3][k][1]\n        ans += s\n        if l1[j][0] == 2:\n            if l1[j][1] - 2 >= 0:\n                l1[l1[j][1] - 2][3].append([-1, ans])\n            l1[l1[j][2] - 1][3].append([1, ans])\n        else:\n            l1[j][3].append(ans)\n    for j in range(len(l2)):\n        A[l1[l2[j]][1] - 1] += l1[l2[j]][3][-1]\n        if l1[l2[j]][2] < len(A):\n            A[l1[l2[j]][2]] -= l1[l2[j]][3][-1]\n    s = 0\n    for j in range(n):\n        s += A[j]\n        print(s % (7 + 10 ** 9), end=' ')\n    print()", "from sys import stdin\ninput = stdin.readline\nM = 1000000007\n\ndef update1(x, y):\n    while x <= n:\n        power[x] = power[x] + y\n        x += x & -x\n\ndef update2(x, y):\n    while x <= m:\n        query[x] = query[x] + y\n        x += x & -x\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    queries = [0]\n    size = max(m, n) + 1\n    (power, query) = ([0] * size, [0] * size)\n    for tc in range(1, m + 1):\n        queries.append(list(map(int, input().split())))\n        update2(tc, 1)\n        update2(tc + 1, -1)\n    for i in range(m, 0, -1):\n        (p, x) = (0, i)\n        while x:\n            p = p + query[x]\n            x -= x & -x\n        if queries[i][0] == 1:\n            update1(queries[i][1], p)\n            update1(queries[i][2] + 1, -p)\n        else:\n            update2(queries[i][1], p)\n            update2(queries[i][2] + 1, -p)\n\n    def ans(x):\n        a = 0\n        while x:\n            a = a + power[x]\n            x -= x & -x\n        return a % M\n    print(' '.join(map(str, map(lambda x: ans(x), range(1, n + 1)))))", "from sys import stdin\ninput = stdin.readline\nM = 10 ** 9 + 7\n\ndef update1(x, y):\n    while x <= n:\n        power[x] = power[x] + y\n        x += x & -x\n\ndef update2(x, y):\n    while x <= m:\n        query[x] = query[x] + y\n        x += x & -x\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    queries = [0]\n    size = max(m, n) + 1\n    (power, query) = ([0] * size, [0] * size)\n    for tc in range(1, m + 1):\n        queries.append(list(map(int, input().split())))\n        update2(tc, 1)\n        update2(tc + 1, -1)\n    for i in range(m, 0, -1):\n        (p, x) = (0, i)\n        while x:\n            p = p + query[x]\n            x -= x & -x\n        if queries[i][0] == 1:\n            update1(queries[i][1], p)\n            update1(queries[i][2] + 1, -p)\n        else:\n            update2(queries[i][1], p)\n            update2(queries[i][2] + 1, -p)\n\n    def ans(x):\n        a = 0\n        while x:\n            a = (a + power[x]) % M\n            x -= x & -x\n        return a\n    print(' '.join(map(str, map(lambda x: ans(x), range(1, n + 1)))))", "from sys import stdin\ninput = stdin.readline\nM = 10 ** 9 + 7\n\ndef update1(x, y):\n    while x <= n:\n        power[x] = (power[x] + y) % M\n        x += x & -x\n\ndef update2(x, y):\n    while x <= m:\n        query[x] = (query[x] + y) % M\n        x += x & -x\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    queries = [0]\n    size = max(m, n) + 1\n    (power, query) = ([0] * size, [0] * size)\n    for tc in range(1, m + 1):\n        queries.append(list(map(int, input().split())))\n        update2(tc, 1)\n        update2(tc + 1, -1)\n    for i in range(m, 0, -1):\n        (p, x) = (0, i)\n        while x:\n            p = (p + query[x]) % M\n            x -= x & -x\n        if queries[i][0] == 1:\n            update1(queries[i][1], p % M)\n            update1(queries[i][2] + 1, -p % M)\n        else:\n            update2(queries[i][1], p % M)\n            update2(queries[i][2] + 1, -p % M)\n\n    def ans(x):\n        a = 0\n        while x:\n            a = (a + power[x]) % M\n            x -= x & -x\n        return a\n    print(' '.join(map(str, map(lambda x: ans(x), range(1, n + 1)))))", "MOD = 10 ** 9 + 7\nT = int(input())\nfor t in range(T):\n    (N, M) = map(int, input().split())\n    OPS = []\n    for m in range(M):\n        (op, l, r) = map(int, input().split())\n        OPS.append((op, l, r))\n    ans = [0] * (N + 2)\n    acc_ans = [0] * (N + 2)\n    mult = [1] * (M + 2)\n    acc_mult = [0] * (M + 2)\n    for i in range(M - 1, -1, -1):\n        (op, l, r) = OPS[i]\n        index = i + 1\n        mult[index] = (acc_mult[index] + mult[index + 1] + MOD) % MOD\n        if op == 2:\n            acc_mult[r] += mult[index]\n            acc_mult[l - 1] -= mult[index]\n            acc_mult[r] %= MOD\n            acc_mult[l - 1] %= MOD\n        else:\n            acc_ans[l] += mult[index]\n            acc_ans[l] %= MOD\n            acc_ans[r + 1] -= mult[index]\n            acc_ans[r + 1] %= MOD\n    for i in range(1, N + 1):\n        acc_ans[i] += acc_ans[i - 1]\n        acc_ans[i] %= MOD\n    print(' '.join((str(x) for x in acc_ans[1:N + 1])))", "T = int(input())\nfor x in range(T):\n    [n, m] = [int(y) for y in input().split()]\n    l1 = []\n    A = []\n    l2 = []\n    for j in range(n):\n        A.append(0)\n    for j in range(m):\n        l1.append([int(y) for y in input().split()])\n        l1[j].append([[1, 1]])\n        if l1[j][0] == 1:\n            l2.append(j)\n    ans = 0\n    for j in range(m - 1, -1, -1):\n        s = 0\n        for k in range(len(l1[j][3])):\n            s += l1[j][3][k][0] * l1[j][3][k][1]\n        ans += s\n        if l1[j][0] == 2:\n            if l1[j][1] - 2 >= 0:\n                l1[l1[j][1] - 2][3].append([-1, ans])\n            l1[l1[j][2] - 1][3].append([1, ans])\n        else:\n            l1[j][3].append(ans)\n        ans -= 1\n    for j in range(len(l2)):\n        A[l1[l2[j]][1] - 1] += l1[l2[j]][3][-1]\n        if l1[l2[j]][2] < len(A):\n            A[l1[l2[j]][2]] -= l1[l2[j]][3][-1]\n    s = 0\n    for j in range(n):\n        s += A[j]\n        print(s % (7 + 10 ** 9), end=' ')\n    print()", "import numpy as np\nt = int(input())\nwhile t:\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    arr = np.zeros(n + 2, dtype='object')\n    tasks = np.zeros((m + 1, 4), dtype='object')\n    i = 1\n    while i <= m:\n        (task_type, left, right) = input().split()\n        task_type = int(task_type)\n        left = int(left)\n        right = int(right)\n        tasks[i] = [task_type, left, right, 1]\n        i += 1\n    inc = np.zeros(m + 1, dtype='object')\n    i = m\n    inc_curr = 0\n    while i > 0:\n        if tasks[i, 0] == 2:\n            inc_curr += inc[i]\n            tasks[i, 3] = 1 + inc_curr\n            inc[tasks[i, 2]] += tasks[i, 3]\n            inc[tasks[i, 1] - 1] -= tasks[i, 3]\n        else:\n            inc_curr += inc[i]\n            tasks[i, 3] = 1 + inc_curr\n            arr[tasks[i, 1]] += tasks[i, 3]\n            arr[tasks[i, 2] + 1] -= tasks[i, 3]\n        i -= 1\n    curr = 0\n    i = 1\n    print()\n    while i <= n:\n        curr = (curr + arr[i]) % 1000000007\n        print(curr, end=' ')\n        i += 1\n    t -= 1", "class obj:\n\n    def __init__(self, val):\n        self.value = val\n\ndef func():\n    a = input().split()\n    n = int(a[0])\n    m = int(a[1])\n    g_data = []\n    list2 = []\n    list1 = []\n    data = [0 for i in range(n + 1)]\n    freq = [0 for i in range(m)]\n    temp = [[] for i in range(m)]\n    obarr = [obj(1) for i in range(m)]\n    mod = 1000000007\n    for f in range(m):\n        a = input().split()\n        i = int(a[0])\n        j = int(a[1])\n        k = int(a[2])\n        g_data.append([j - 1, k - 1])\n        if i == 2:\n            list2.append(f)\n        elif i == 1:\n            list1.append(f)\n            freq[f] = 1\n    for i in reversed(list2):\n        start = g_data[i][0]\n        end = g_data[i][1]\n        if start != 0:\n            temp[start - 1].append([-1, obarr[i]])\n        temp[end].append([1, obarr[i]])\n    ans = 0\n    for i in range(temp.__len__() - 1, -1, -1):\n        for j in temp[i]:\n            ans += j[0] * j[1].value\n        obarr[i].value += ans\n        freq[i] += ans\n    for i in list1:\n        start = g_data[i][0]\n        end = g_data[i][1]\n        val = freq[i]\n        data[start] += val\n        data[start] %= mod\n        data[end + 1] -= val\n    ans = 0\n    for i in data[0:-1]:\n        ans += i\n        ans %= mod\n        print(ans, end=' ')\nt = int(input())\nfor i in range(t):\n    func()\n    print('')", "class obj:\n\n    def __init__(self, val):\n        self.value = val\n\n    def __repr__(self):\n        return str(self.value)\n\ndef func():\n    a = input().split()\n    n = int(a[0])\n    m = int(a[1])\n    g_data = []\n    list2 = []\n    list1 = []\n    data = [0 for i in range(n + 1)]\n    freq = [0 for i in range(m)]\n    temp = [[] for i in range(m)]\n    obarr = [obj(1) for i in range(m)]\n    mod = 1000000007\n    for f in range(m):\n        a = input().split()\n        i = int(a[0])\n        j = int(a[1])\n        k = int(a[2])\n        g_data.append([j - 1, k - 1])\n        if i == 2:\n            list2.append(f)\n        elif i == 1:\n            list1.append(f)\n            freq[f] = 1\n    for i in reversed(list2):\n        start = g_data[i][0]\n        end = g_data[i][1]\n        if start != 0:\n            temp[start - 1].append([-1, obarr[i]])\n        temp[end].append([1, obarr[i]])\n    ans = 0\n    for i in range(temp.__len__() - 1, -1, -1):\n        for j in temp[i]:\n            ans += j[0] * j[1].value\n        obarr[i].value += ans\n        freq[i] += ans\n    for i in list1:\n        start = g_data[i][0]\n        end = g_data[i][1]\n        val = freq[i]\n        data[start] += val\n        data[start] %= mod\n        data[end + 1] -= val\n    ans = 0\n    for i in data[0:-1]:\n        ans += i\n        ans %= mod\n        print(ans, end=' ')\nt = int(input())\nfor i in range(t):\n    func()\n    print('')\n\ndef binary(l, key, opt):\n    left = 0\n    right = l.__len__()\n    while left < right:\n        mid = (left + right) // 2\n        if l[mid] > key:\n            right = mid - 1\n        elif l[mid] == key:\n            return mid\n        else:\n            left = mid + 1\n    if opt == 1:\n        return mid + 1\n    else:\n        return mid - 1", "for _ in range(int(input())):\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    Ar = [[0]] * (m + 1)\n    for i in range(1, m + 1):\n        Ar[i] = list(map(int, input().split()))\n    A = [0] * (n + 2)\n    B = [0] * (m + 2)\n    sm = 0\n    for i in range(m, 0, -1):\n        sm = sm + B[i]\n        if Ar[i][0] == 2:\n            B[Ar[i][2]] += sm + 1\n            B[Ar[i][1] - 1] -= sm + 1\n        else:\n            A[Ar[i][1]] += sm + 1\n            A[Ar[i][2] + 1] -= sm + 1\n    sm = 0\n    for i in range(1, n + 1):\n        sm += A[i]\n        print(sm % 1000000007, end=' ')\n    print()", "MOD = 10 ** 9 + 7\n\nclass SegTree:\n\n    def __init__(self, n):\n        self.N = 1 << n.bit_length()\n        self.tree = [0] * (self.N << 1)\n\n    def update(self, i, j, v):\n        i += self.N\n        j += self.N\n        while i <= j:\n            if i % 2 == 1:\n                self.tree[i] += v\n            if j % 2 == 0:\n                self.tree[j] += v\n            (i, j) = (i + 1 >> 1, j - 1 >> 1)\n\n    def query(self, i):\n        v = 0\n        i += self.N\n        while i > 0:\n            v += self.tree[i]\n            i >>= 1\n        return v\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    sa = SegTree(n)\n    sq = SegTree(m)\n    Q = [None] + [list(map(int, input().split())) for i in range(m)]\n    for i in range(m, 0, -1):\n        (t, l, r) = Q[i]\n        c = sq.query(i) + 1\n        if t == 1:\n            sa.update(l, r, c)\n        else:\n            sq.update(l, r, c)\n    a = [sa.query(i) % MOD for i in range(1, n + 1)]\n    print(*a)", "MOD = 10 ** 9 + 7\n\nclass SegTree:\n\n    def __init__(self, n):\n        self.N = 1 << n.bit_length()\n        self.tree = [0] * (self.N << 1)\n\n    def update(self, i, j, v):\n        i += self.N\n        j += self.N\n        while i <= j:\n            if i % 2 == 1:\n                self.tree[i] = (self.tree[i] + v) % MOD\n            if j % 2 == 0:\n                self.tree[j] = (self.tree[j] + v) % MOD\n            (i, j) = (i + 1 >> 1, j - 1 >> 1)\n\n    def query(self, i):\n        v = 0\n        i += self.N\n        while i > 0:\n            v = (v + self.tree[i]) % MOD\n            i >>= 1\n        return v\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    sa = SegTree(n)\n    sq = SegTree(m)\n    Q = [None] + [list(map(int, input().split())) for i in range(m)]\n    for i in range(m, 0, -1):\n        (t, l, r) = Q[i]\n        c = sq.query(i) + 1\n        if t == 1:\n            sa.update(l, r, c)\n        else:\n            sq.update(l, r, c)\n    a = [sa.query(i) for i in range(1, n + 1)]\n    print(*a)", "t = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split(' '))\n    a = []\n    q0 = [0]\n    q1 = [0]\n    q2 = [0]\n    q3 = [0]\n    for i in range(1, m + 1):\n        (x, y, z) = map(int, input().split(' '))\n        q0.append(x)\n        q1.append(y)\n        q2.append(z)\n        q3.append(0)\n    if q0[m] == 2:\n        q3[q2[m]] += q3[m] + 1\n        q3[q1[m] - 1] -= q3[m] + 1\n    for i in range(2, m + 1):\n        q3[-i] += q3[-(i - 1)]\n        if q0[-i] == 2:\n            q3[q1[-i] - 1] -= q3[-i] + 1\n            q3[q2[-i]] += q3[-i] + 1\n    for i in range(1, n + 3):\n        a.append(0)\n    for i in range(1, m + 1):\n        if q0[i] == 1:\n            a[q1[i]] += q3[i] + 1\n            a[q2[i] + 1] -= q3[i] + 1\n    for i in range(1, n + 1):\n        a[i] += a[i - 1]\n    for i in range(1, n + 1):\n        a[i] %= 1000000007\n    for i in range(1, n + 1):\n        print(a[i], end=' ')\n    print()\n    t -= 1"]