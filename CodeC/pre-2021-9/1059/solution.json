["import sys\ninput = sys.stdin.readline\nimport numpy as np\nimport math\n\ndef solution(N, Q, M, A, queries):\n    sol = 0\n    lcm_ = A[0]\n    minus_ = {}\n    plus_ = {}\n    for [i, j] in queries:\n        lcm_ = lcm_ * (A[i - 1] + A[j - 1]) // math.gcd(lcm_, A[i - 1] + A[j - 1])\n        if lcm_ > M:\n            break\n    if lcm_ < M:\n        M = lcm_\n    diffs = np.array([0 for _ in range(M + 1)])\n    for [i, j] in queries:\n        minus_[A[i - 1] + A[j - 1]] = minus_.get(A[i - 1] + A[j - 1], 0) + 1\n    for [i, j] in queries:\n        plus_[A[i - 1], A[i - 1] + A[j - 1]] = plus_.get((A[i - 1], A[i - 1] + A[j - 1]), 0) + 1\n    for (val, count) in minus_.items():\n        diffs[val:M + 1:val] -= count\n    for ((s, b), count) in plus_.items():\n        diffs[s:M + 1:b] += count\n    cur = 0\n    for diff in diffs[1:]:\n        cur += diff\n        sol = max(sol, cur)\n    print(sol)\nT = int(input())\nfor t in range(T):\n    (N, Q, M) = map(int, input().split())\n    A = list(map(int, input().split()))\n    queries = [list(map(int, input().split())) for _ in range(Q)]\n    solution(N, Q, M, A, queries)", "import sys\ninput = sys.stdin.readline\nimport numpy as np\nimport math\n\ndef solution(N, Q, M, A, queries):\n    sol = 0\n    lcm_ = A[0]\n    minus_ = {}\n    plus_ = {}\n    for [i, j] in queries:\n        lcm_ = lcm_ * (A[i - 1] + A[j - 1]) // math.gcd(lcm_, A[i - 1] + A[j - 1])\n        if lcm_ > M:\n            break\n    if lcm_ < M:\n        M = lcm_\n    diffs = np.array([0 for _ in range(M + 1)])\n    for [i, j] in queries:\n        minus_[A[i - 1] + A[j - 1]] = minus_.get(A[i - 1] + A[j - 1], 0) + 1\n    for [i, j] in queries:\n        plus_[A[i - 1], A[i - 1] + A[j - 1]] = plus_.get((A[i - 1], A[i - 1] + A[j - 1]), 0) + 1\n    for (val, count) in minus_.items():\n        diffs[val:M + 1:val] -= count\n    for ((s, b), count) in plus_.items():\n        diffs[s:M + 1:b] += count\n    cur = 0\n    for diff in diffs[1:]:\n        cur += diff\n        sol = max(sol, cur)\n    print(sol)\nT = int(input())\nfor t in range(T):\n    (N, Q, M) = map(int, input().split())\n    A = list(map(int, input().split()))\n    queries = [list(map(int, input().split())) for _ in range(Q)]\n    solution(N, Q, M, A, queries)", "t = int(input())\nwhile t > 0:\n    (n, q, m) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    from collections import defaultdict\n    d = defaultdict(int)\n    dp = defaultdict(int)\n    arrr = [0] * (m + 2)\n    mmx = 0\n    for i in range(q):\n        (l, r) = [int(i) for i in input().split()]\n        l -= 1\n        r -= 1\n        dp[l, r] += 1\n        mmx = max(mmx, arr[r])\n    ans = 0\n    for (i, j) in dp.items():\n        l = min(i)\n        r = max(i)\n        x = arr[r]\n        y = arr[l]\n        xx = arr[l] + 1\n        while True:\n            if y > m or y > mmx + 1000:\n                break\n            arrr[y] += j\n            if y + x > m:\n                break\n            arrr[y + x] -= j\n            y += x + xx - 1\n    for i in range(1, m + 2):\n        arrr[i] += arrr[i - 1]\n        ans = max(ans, arrr[i])\n    print(ans)\n    t -= 1", "import sys\ninput = sys.stdin.readline\nimport numpy as np\nimport math\n\ndef solution(N, Q, M, A, queries):\n    sol = 0\n    lcm_ = A[0]\n    minus_ = {}\n    plus_ = {}\n    for [i, j] in queries:\n        lcm_ = lcm_ * (A[i - 1] + A[j - 1]) // math.gcd(lcm_, A[i - 1] + A[j - 1])\n        if lcm_ > M:\n            break\n    if lcm_ < M:\n        M = lcm_\n    diffs = np.array([0 for _ in range(M + 1)])\n    for [i, j] in queries:\n        minus_[A[i - 1] + A[j - 1]] = minus_.get(A[i - 1] + A[j - 1], 0) + 1\n    for [i, j] in queries:\n        plus_[A[i - 1], A[i - 1] + A[j - 1]] = plus_.get((A[i - 1], A[i - 1] + A[j - 1]), 0) + 1\n    for (val, count) in minus_.items():\n        diffs[val:M + 1:val] -= count\n    for ((s, b), count) in plus_.items():\n        diffs[s:M + 1:b] += count\n    cur = 0\n    for diff in diffs[1:]:\n        cur += diff\n        sol = max(sol, cur)\n    print(sol)\nT = int(input())\nfor t in range(T):\n    (N, Q, M) = map(int, input().split())\n    A = list(map(int, input().split()))\n    queries = [list(map(int, input().split())) for _ in range(Q)]\n    solution(N, Q, M, A, queries)"]