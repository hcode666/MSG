["T = int(input())\nfor _ in range(T):\n    (N, M) = list(map(int, input().split()))\n    P = list(map(int, input().split()))\n    pairs = []\n    for _ in range(M):\n        pairs.append(list(map(int, input().split())))\n    pairs.sort()\n    merged_pairs = []\n    for (start, end) in pairs:\n        if not merged_pairs:\n            merged_pairs.append((start, end))\n        else:\n            (prevS, prevE) = merged_pairs[-1]\n            if start <= prevE:\n                merged_pairs.pop()\n                merged_pairs.append((prevS, max(end, prevE)))\n            else:\n                merged_pairs.append((start, end))\n    for (start, end) in merged_pairs:\n        P[start - 1:end] = sorted(P[start - 1:end])\n    possible = True\n    for i in range(N):\n        if P[i] != i + 1:\n            possible = False\n            break\n    if possible:\n        print('Possible')\n    else:\n        print('Impossible')", "T = int(input())\nfor _ in range(T):\n    (N, M) = list(map(int, input().split()))\n    P = list(map(int, input().split()))\n    pairs = []\n    for _ in range(M):\n        pairs.append(list(map(int, input().split())))\n    pairs.sort()\n    merged_pairs = []\n    for (start, end) in pairs:\n        if not merged_pairs:\n            merged_pairs.append((start, end))\n        else:\n            (prevS, prevE) = merged_pairs[-1]\n            if start <= prevE:\n                merged_pairs.pop()\n                merged_pairs.append((prevS, max(end, prevE)))\n            else:\n                merged_pairs.append((start, end))\n    for (start, end) in merged_pairs:\n        P[start - 1:end] = sorted(P[start - 1:end])\n    possible = True\n    for i in range(N):\n        if P[i] != i + 1:\n            possible = False\n            break\n    if possible:\n        print('Possible')\n    else:\n        print('Impossible')", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = []\n    for j in range(m):\n        (a, b) = map(int, input().split())\n        d.append([a, b])\n    d.sort()\n    c = []\n    f = 1\n    x = d[0][0]\n    y = d[0][1]\n    for j in d[1:]:\n        if j[0] <= y:\n            y = max(y, j[1])\n        else:\n            c.append([x - 1, y - 1])\n            x = j[0]\n            y = j[1]\n    c.append([x - 1, y - 1])\n    m = []\n    j = 0\n    for k in c:\n        while j < k[0]:\n            m.append(l[j])\n            j += 1\n        x = l[k[0]:k[1] + 1]\n        m += sorted(x)\n        j = k[1] + 1\n    while j < n:\n        m.append(l[j])\n        j += 1\n    print('Possible' if m == sorted(l) else 'Impossible')", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = []\n    for j in range(m):\n        (a, b) = map(int, input().split())\n        d.append([a, b])\n    d.sort()\n    c = []\n    f = 1\n    x = d[0][0]\n    y = d[0][1]\n    for j in d[1:]:\n        if j[0] <= y:\n            y = max(y, j[1])\n        else:\n            c.append([x - 1, y - 1])\n            x = j[0]\n            y = j[1]\n    c.append([x - 1, y - 1])\n    m = []\n    j = 0\n    for k in c:\n        while j < k[0]:\n            m.append(l[j])\n            j += 1\n        x = l[k[0]:k[1] + 1]\n        m += sorted(x)\n        j = k[1] + 1\n    while j < n:\n        m.append(l[j])\n        j += 1\n    print('Possible' if m == sorted(l) else 'Impossible')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    k = []\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        k.append([a, b])\n    k.sort()\n    c = []\n    flag = 1\n    x = k[0][0]\n    y = k[0][1]\n    for i in k[1:]:\n        if i[0] <= y:\n            y = max(y, i[1])\n        else:\n            c.append([x - 1, y - 1])\n            x = i[0]\n            y = i[1]\n    c.append([x - 1, y - 1])\n    m = []\n    j = 0\n    for i in c:\n        while j < i[0]:\n            m.append(l[j])\n            j += 1\n        x = l[i[0]:i[1] + 1]\n        m += sorted(x)\n        j = i[1] + 1\n    while j < n:\n        m.append(l[j])\n        j += 1\n    if m == sorted(l):\n        print('Possible')\n    else:\n        print('Impossible')", "def solution(R, L):\n    R.sort(key=lambda x: x[0])\n    low = R[0][0]\n    high = R[0][1]\n    New = []\n    for a in R:\n        if a[0] <= high:\n            high = max(high, a[1])\n        else:\n            temp = [low, high]\n            New.append(temp)\n            low = a[0]\n            high = a[1]\n    temp = [low, high]\n    New.append(temp)\n    for a in New:\n        for i in range(a[0] - 1, a[1]):\n            if L[i] < a[0] or L[i] > a[1]:\n                return 'Impossible'\n    return 'Possible'\nT = int(input())\nfor t in range(T):\n    (N, M) = map(int, input().split())\n    L = list(map(int, input().split()))\n    R = []\n    a = []\n    for m in range(M):\n        a = list(map(int, input().split()))\n        R.append(a)\n    print(solution(R, L))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    arr3 = []\n    for j in range(n):\n        arr3.append(j)\n    for j in range(m):\n        (x, y) = map(int, input().split())\n        if x < y:\n            if arr3[x - 1] < y - 1:\n                arr3[x - 1] = y - 1\n        elif y > x:\n            if arr3[y - 1] < x - 1:\n                arr3[y - 1] = x - 1\n    j = 0\n    while j < n:\n        x = j\n        if x == arr3[x]:\n            j += 1\n        else:\n            max1 = arr3[x]\n            flag = 0\n            while 1:\n                if flag == 0:\n                    flag = 1\n                    for k in range(x + 1, arr3[x] + 1):\n                        if max1 < arr3[k]:\n                            max1 = arr3[k]\n                    if max1 == arr3[x]:\n                        break\n                    else:\n                        prevmax = arr3[x]\n                else:\n                    y = max1\n                    for k in range(prevmax, y + 1):\n                        if max1 < arr3[k]:\n                            max1 = arr3[k]\n                    if prevmax == max1:\n                        break\n                    else:\n                        prevmax = y\n            for k in range(x, max1 + 1):\n                arr3[k] = max1\n            j = max1 + 1\n    count = 0\n    for j in range(n):\n        if arr[j] - 1 == j:\n            count += 1\n        elif j < arr[j] - 1:\n            if arr3[j] >= arr[j] - 1:\n                count += 1\n        elif arr3[arr[j] - 1] >= j:\n            count += 1\n    if count == n:\n        print('Possible')\n    else:\n        print('Impossible')", "T = int(input())\nfor cases in range(T):\n    inp = input().split()\n    N = int(inp[0])\n    M = int(inp[1])\n    P = input().split()\n    for i in range(N):\n        P[i] = int(P[i])\n    pairs = []\n    for i in range(M):\n        inp = input().split()\n        pair1 = int(inp[0])\n        pair2 = int(inp[1])\n        (pair1, pair2) = (min(pair1, pair2), max(pair1, pair2))\n        pairs.append((pair1, pair2))\n    pairs = sorted(pairs, key=lambda x: x[0])\n    it = 1\n    while it < len(pairs):\n        start1 = pairs[it - 1][0]\n        last1 = pairs[it - 1][1]\n        start2 = pairs[it][0]\n        last2 = pairs[it][1]\n        if start2 <= last1:\n            pairs[it - 1] = (start1, max(last1, last2))\n            del pairs[it]\n        else:\n            it += 1\n    for i in range(len(pairs)):\n        (init, fin) = (pairs[i][0] - 1, pairs[i][1])\n        P[init:fin] = sorted(P[init:fin])\n    verdict = 'Possible'\n    for i in range(N):\n        if P[i] != i + 1:\n            verdict = 'Impossible'\n            break\n    print(verdict)", "def search(new, lb, ub, a, b):\n    while lb <= ub:\n        mb = lb + (ub - lb) // 2\n        if new[mb][0] <= a and new[mb][0] <= b and (new[mb][1] >= a) and (new[mb][1] >= b):\n            return 1\n        elif new[mb][0] >= a and new[mb][0] >= b:\n            ub = mb - 1\n        elif new[mb][1] <= a and new[mb][1] <= b:\n            lb = mb + 1\n        else:\n            return -1\n    return -1\nfor t in range(int(input())):\n    temp = list(map(int, input().split()))\n    n = temp[0]\n    m = temp[1]\n    a = list(map(int, input().split()))\n    pairs = []\n    for i in range(m):\n        temp = list(map(int, input().split()))\n        temp[0] -= 1\n        temp[1] -= 1\n        if temp[0] != temp[1]:\n            pairs.append(temp[:])\n    pairs.sort()\n    if n == 1:\n        print('Possible')\n        continue\n    flag = 0\n    for i in range(n):\n        if a[i] != i + 1:\n            flag = 1\n            break\n    if flag == 0:\n        print('Possible')\n        continue\n    if len(pairs) == 0:\n        print('Impossible')\n        continue\n    new = []\n    new.append(pairs[0][:])\n    l = len(pairs)\n    for i in range(1, l):\n        if pairs[i][0] <= new[-1][1]:\n            new[-1][1] = max(pairs[i][1], new[-1][1])\n        else:\n            new.append(pairs[i][:])\n    flag = 0\n    l = len(new)\n    for i in range(n):\n        if a[i] == i + 1:\n            continue\n        else:\n            ans = search(new, 0, l - 1, i, a[i] - 1)\n            if ans == -1:\n                flag = 1\n                break\n    if flag == 1:\n        print('Impossible')\n    else:\n        print('Possible')"]