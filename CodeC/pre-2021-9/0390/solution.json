["(n, m) = map(int, input().split())\nfor _ in range(m):\n    q = int(input())\n    if q < n + 2:\n        print(0)\n        continue\n    print(max(0, n - abs(q - 2 * n - 1)))", "(n, m) = map(int, input().split())\nfor _ in range(m):\n    a = int(input())\n    if a < n + 2 or a > 3 * n:\n        print(0)\n    elif a <= 2 * n + 1:\n        print(a - n - 1)\n    else:\n        print(3 * n + 1 - a)", "(n, m) = map(int, input().split())\n(mn, mx) = (n + 2, n * 3)\nfor i in range(m):\n    q = int(input())\n    if mn <= q <= mx:\n        mf = (mn + mx) // 2\n        diff = abs(mf - q)\n        print(n - diff)\n    else:\n        print(0)", "(x, y) = map(int, input().split())\nfor i in range(y):\n    lund = int(input())\n    if lund <= 3 * x and lund >= x + 1:\n        print(x - abs(2 * x + 1 - lund))\n    else:\n        print(0)", "(n, m) = map(int, input().split())\nf1 = n + 2\nf2 = n + 2 * n\nfor _ in range(m):\n    q = int(input())\n    if q >= f1 and q <= f2:\n        fx = n + n + 1\n        v = abs(q - fx)\n        print(n - v)\n    else:\n        print(0)", "(n, m) = map(int, input().split())\nfor _ in range(m):\n    p = int(input())\n    if p < n + 2:\n        print(0, end='\\n')\n    elif p <= 2 * n + 1:\n        print(p - n - 1, end='\\n')\n    else:\n        print(3 * n - p + 1, end='\\n')", "(n, m) = map(int, input().split())\nfor _ in range(m):\n    q = int(input())\n    minsum = n + 2\n    maxsum = 3 * n\n    if q < minsum or q > maxsum:\n        print(0)\n    elif q - minsum < maxsum - q:\n        print(q - minsum + 1)\n    else:\n        print(maxsum - q + 1)", "(n, m) = map(int, input().split())\nfor i in range(m):\n    q = int(input())\n    ma = n + (n + 1)\n    max_count = n\n    count = 0\n    if q < n + 2 or q > 2 * n + n:\n        print(0)\n    else:\n        count = max_count - abs(ma - q)\n        print(count)", "(n, m) = map(int, input().split())\nfor i in range(m):\n    q = int(input())\n    if n + 2 <= q <= 3 * n:\n        index = q - n\n        if index <= n + 1:\n            print(index - 1)\n        else:\n            print(2 * n + 1 - index)\n    else:\n        print(0)", "(n, m) = map(int, input().split())\nfor i in range(m):\n    q = int(input())\n    if q < n + 2:\n        print(0)\n        continue\n    print(max(0, n - abs(q - 2 * n - 1)))", "(n, m) = map(int, input().split())\nfor i in range(m):\n    q = int(input())\n    if q < n + 2:\n        print(0)\n        continue\n    print(max(0, n - abs(q - 2 * n - 1)))", "(n, m) = map(int, input().split())\nfor i in range(m):\n    q = int(input())\n    if n + 2 <= q <= 3 * n:\n        index = q - n\n        if index <= n + 1:\n            print(index - 1)\n        else:\n            print(2 * n + 1 - index)\n    else:\n        print(0)", "(n, m) = map(int, input().split())\nfor i in range(m):\n    q = int(input())\n    if n + 2 <= q <= 3 * n:\n        index = q - n\n        if index <= n + 1:\n            print(index - 1)\n        else:\n            print(2 * n + 1 - index)\n    else:\n        print(0)", "(n, m) = map(int, input().split())\nfor i in range(m):\n    q = int(input())\n    if n + 2 <= q <= 3 * n:\n        index = q - n\n        if index <= n + 1:\n            print(index - 1)\n        else:\n            print(2 * n + 1 - index)\n    else:\n        print(0)", "(n, m) = map(int, input().split())\nstart = n + 2\nend = 3 * n\nmid = (start + end) / 2\nfor i in range(m):\n    q = int(input())\n    if q > end or q < start:\n        print(0)\n    elif q < mid:\n        print(q - start + 1)\n    else:\n        print(end - q + 1)", "(n, m) = map(int, input().split())\nstart = n + 2\nend = 3 * n\nmid = (start + end) / 2\nfor i in range(m):\n    q = int(input())\n    if q > end or q < start:\n        print(0)\n    elif q < mid:\n        print(q - start + 1)\n    else:\n        print(end - q + 1)", "(n, m) = map(int, input().split())\nfor i in range(m):\n    q = int(input())\n    if q < n + 2 or q > 3 * n:\n        print(0)\n    elif (q - n - 2) // n == 0:\n        print(q - n - 1)\n    elif (q - n - 2) // n == 1:\n        print(3 * n - q + 1)", "(n, m) = map(int, input().split())\nfor i in range(m):\n    q = int(input())\n    if q < n + 2 or q > 3 * n:\n        print(0)\n    elif (q - n - 2) // n == 0:\n        print(q - n - 1)\n    elif (q - n - 2) // n == 1:\n        print(3 * n - q + 1)", "(n, m) = map(int, input().split())\nfor i in range(m):\n    q = int(input())\n    if n + 2 <= q <= 3 * n:\n        index = q - n\n        if index <= n + 1:\n            print(index - 1)\n        else:\n            print(2 * n + 1 - index)\n    else:\n        print(0)", "(n, m) = map(int, input().split())\nlower = n + 2\nhigher = n + n + n\nlist1 = []\nfor x in range(m):\n    z = int(input())\n    if z <= n * 2 + 1 and lower <= z < higher:\n        print(z - n - 1)\n    elif z > n * 2 + 1 and lower <= z < higher:\n        print(n - z % n + 1)\n    elif z == higher:\n        print(1)\n    else:\n        print(0)", "(n, m) = list(map(int, input().split()))\nnum = 2 * n - 1\nmid = num // 2 + 1\nfor _ in range(m):\n    q = int(input())\n    if n + 2 <= q and 3 * n >= q:\n        d = q - n - 1\n        if d <= mid:\n            print(d)\n        else:\n            print(2 * mid - d)\n    else:\n        print(0)", "(n, m) = map(int, input().split())\nfor i in range(m):\n    q = int(input())\n    l = max(q - n, n + 1)\n    r = min(q - 1, 2 * n)\n    if l > r:\n        print(0)\n    else:\n        print(r - l + 1)", "(n, m) = map(int, input().split())\nfor i in range(m):\n    q = int(input())\n    if n + 2 <= q <= 3 * n:\n        index = q - n\n        if index <= n + 1:\n            print(index - 1)\n        else:\n            print(2 * n + 1 - index)\n    else:\n        print(0)", "(a, b) = map(int, input().split())\nfor x in range(b):\n    no = int(input())\n    if 2 * a < no:\n        print(a - (no - 2 * a - 1))\n    elif no > a:\n        print(min(a, no - a - 1))\n    else:\n        print(0)", "(n, m) = map(int, input().split())\nfor i in range(m):\n    q = int(input())\n    if n + 2 <= q <= 3 * n:\n        index = q - n\n        if index <= n + 1:\n            print(index - 1)\n        else:\n            print(2 * n + 1 - index)\n    else:\n        print(0)", "(N, M) = list(map(int, input().split()))\nmn = 2 + N\nmx = N + 2 * N\nfor _ in range(M):\n    q = int(input())\n    if q > mx or q < mn:\n        print(0)\n        continue\n    print(min(abs(mx - q), abs(mn - q)) + 1)", "(N, M) = list(map(int, input().split()))\nmn = 2 + N\nmx = N + 2 * N\nfor _ in range(M):\n    q = int(input())\n    if q > mx or q < mn:\n        print(0)\n        continue\n    print(min(abs(mx - q), abs(mn - q)) + 1)", "(n, m) = map(int, input().split())\nfor _ in range(m):\n    a = int(input())\n    if a < n + 2 or a > 3 * n:\n        print(0)\n    else:\n        print(n - abs((n + 2 + 3 * n) // 2 - a))", "(n, m) = map(int, input().split())\nfor _ in range(m):\n    a = int(input())\n    if a < n + 2 or a > 3 * n:\n        print(0)\n    else:\n        mid = (n + 2 + 3 * n) // 2\n        print(n - abs(mid - a))", "(n, m) = map(int, input().split())\nfor i in range(m):\n    q = int(input())\n    if q < n + 2:\n        print(0)\n    elif q >= n + 2 and q <= 2 * n:\n        print(q - n - 1)\n    elif q > 2 * n and q <= 3 * n:\n        print(3 * n - q + 1)\n    else:\n        print(0)", "(n, m) = map(int, input().split())\nfor i in range(m):\n    q = int(input())\n    if q < n + 2:\n        print(0)\n    elif q >= n + 2 and q <= 2 * n:\n        print(q - n - 1)\n    elif q > 2 * n and q <= 3 * n:\n        print(3 * n - q + 1)\n    else:\n        print(0)", "(a, b) = map(int, input().split())\nfor _ in range(b):\n    no = int(input())\n    if 2 * a < no:\n        print(a - (no - 2 * a - 1))\n    elif no > a:\n        print(min(a, no - a - 1))\n    else:\n        print(0)", "(n, m) = map(int, input().split())\nminVal = n + 2\nmaxVal = 3 * n\nfor _ in range(m):\n    q = int(input())\n    if q >= minVal and q <= maxVal:\n        if q - minVal + 1 <= n:\n            print(q - minVal + 1)\n        else:\n            midVal = minVal + n - 1\n            print(n - (q - midVal))\n    else:\n        print(0)", "from collections import Counter, UserString\nmod = lambda n: n % (10 ** 9 + 7)\nfc_ = [1]\nfor i in range(1, 1000001):\n    fc_.append(i * fc_[i - 1])\n    fc_[i] = mod(fc_[i])\n\ndef fact(n):\n    return fc_[n]\n\ndef printm(n):\n    print(mod(n))\n\ndef isPrime(n):\n    if n > 1:\n        for i in range(2, int(n ** 0.5) + 1):\n            if not n % i:\n                return False\n        else:\n            return True\n    return True\n\nclass mutableStr(UserString):\n\n    def ins(self, n, s):\n        if n < 0:\n            self.data = self.data = ''.join(list(self.data)[:n + 1]) + s + ''.join(list(self.data)[n + 1:])\n        else:\n            self.data = ''.join(list(self.data)[:n]) + s + ''.join(list(self.data)[n:])\n\n    def rem(self, s):\n        self.data = self.data.replace(s, '')\nalphabetOrd = [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]\nalphabet = list('abcdefghijklmnopqrstuvwxyz')\nr1 = lambda n: range(n)\nr2 = lambda n: range(1, n + 1)\nalph = lambda s: s.isalpha()\nsl = lambda l: list(set(l))\ninf = float('inf')\nsoi = lambda : sorted(input())\nii = lambda : int(input())\nli = lambda : list(map(int, input().split()))\nsi = lambda : mutableStr(input())\nlsi = lambda : list(input())\nsepi = lambda : map(int, input().split())\nseti = lambda : set(map(int, input().split()))\n(n, m) = sepi()\nl1 = range(1, n + 1)\nl2 = range(n + 1, 2 * n)\nfor i in r2(m):\n    q = ii()\n    mi = abs(q - l2[0] - l1[-1])\n    print(max(n - mi, 0))", "(n, m) = list(map(int, input().split()))\nfor i in range(m):\n    q = int(input())\n    if q >= n + 2 and q <= 3 * n:\n        if q <= 2 * n + 1:\n            print(q - n - 1)\n        else:\n            print(3 * n + 1 - q)\n    else:\n        print('0')", "(n, m) = map(int, input().split())\nfor _ in range(m):\n    q = int(input())\n    k = q - n\n    if k <= 0:\n        print(0)\n    else:\n        print(min(k - 1, n) - max(k - n, 1) + 1)", "(N, M) = map(int, input().split())\nfor _ in range(M):\n    q = int(input())\n    k = q - N\n    if k <= 0:\n        print(0)\n    else:\n        print(min(k - 1, N) - max(k - N, 1) + 1)", "(N, M) = map(int, input().split())\nfor _ in range(M):\n    q = int(input())\n    k = q - N\n    if k <= 0:\n        print(0)\n    else:\n        print(min(k - 1, N) - max(k - N, 1) + 1)", "(N, M) = map(int, input().split())\nfor _ in range(M):\n    q = int(input())\n    k = q - N\n    if k <= 0:\n        print(0)\n    else:\n        print(min(k - 1, N) - max(k - N, 1) + 1)", "(n, m) = map(int, input().split())\nfor i in range(m):\n    a = int(input())\n    if a < n + 2 or a > 3 * n:\n        print(0)\n    elif a <= 2 * n + 1:\n        print(a - n - 1)\n    else:\n        print(3 * n - a + 1)", "(n, m) = map(int, input().split())\nmid = n * 2 + 1\nmid_f = n\nres = 0\nfor i in range(m):\n    q = int(input())\n    if q < n + 2 or q > mid + mid_f - 1:\n        print(0)\n    else:\n        res = mid_f - abs(mid - q)\n        print(res)", "(n, m) = map(int, input().split())\nfor i in range(m):\n    q = int(input())\n    if q <= n + 1:\n        print(0)\n    elif q <= 2 * n + 1:\n        print(q - n - 1)\n    else:\n        print(n - (q - (2 * n + 1)))", "(n, m) = map(int, input().split())\nfor i in range(m):\n    q = int(input())\n    if q <= n + 1:\n        print(0)\n    elif q <= 2 * n + 1:\n        print(q - n - 1)\n    else:\n        print(n - (q - (2 * n + 1)))", "(n, m) = map(int, input().split())\nfor i in range(m):\n    q = int(input())\n    if q <= n + 1:\n        print(0)\n    elif q <= 2 * n + 1:\n        print(q - n - 1)\n    else:\n        print(n - (q - (2 * n + 1)))", "from bisect import bisect_left, bisect_right\nimport math\nfrom bisect import bisect_left\nfrom heapq import heapify, heappush, heappop\nfrom collections import deque\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\nfrom collections import deque, defaultdict\ninput = sys.stdin.readline\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\ndx = [-1, -2, 1, 2, 2, -2, -1, 1]\ndy = [2, 1, 2, 1, -1, -1, -2, -2]\n(n, m) = il()\n(min, max) = (1 + n + 1, n + 2 * n)\nmid = (min + max) / 2\nfor _ in range(m):\n    t = ii()\n    if t == mid:\n        print(n)\n    elif t < mid and t >= min:\n        print(t - min + 1)\n    elif t > mid and t <= max:\n        print(max - t + 1)\n    else:\n        print(0)", "(N, M) = map(int, input().split())\nfor i in range(M):\n    k = int(input())\n    if k < N + 2 or k > 3 * N:\n        print(0)\n    else:\n        print(N - abs(k - 2 * N - 1))", "d = list(map(int, input().split()))\nfor i in range(d[1]):\n    check = int(input())\n    if check > 3 * d[0] or check < d[0] + 2:\n        print(0)\n    else:\n        print(d[0] - abs(check - 2 * d[0] - 1))", "data = list(map(int, input().split()))\nmylist = []\nfor i in range(data[1]):\n    check = int(input())\n    if check > 3 * data[0] or check < data[0] + 2:\n        print(0)\n    else:\n        print(data[0] - abs(check - 2 * data[0] - 1))", "input_arr = str(input()).split(' ')\nN = int(input_arr[0])\nM = int(input_arr[1])\nfor m in range(M):\n    q = int(input())\n    a = N + 1\n    b = 2 * N + 1\n    c = 2 * N + 1 + (N - 1)\n    if q <= a:\n        print(0)\n    elif q <= b:\n        print(q - N - 1)\n    elif q <= c:\n        print(c - q + 1)\n    else:\n        print(0)", "input_arr = str(input()).split(' ')\nN = int(input_arr[0])\nM = int(input_arr[1])\nfor m in range(M):\n    q = int(input())\n    a = N + 1\n    b = 2 * N + 1\n    c = 2 * N + 1 + (N - 1)\n    if q <= a:\n        print(0)\n    elif q <= b:\n        print(q - N - 1)\n    elif q <= c:\n        print(c - q + 1)\n    else:\n        print(0)", "(n, m) = map(int, input().split())\nmid = n * 2 + 1\nfor i in range(m):\n    q = int(input())\n    if q < n + 2 or q > mid + n - 1:\n        print(0)\n    else:\n        print(n - abs(mid - q))", "(n, m) = map(int, input().split())\nmid = n * 2 + 1\nmid_f = n\nres = 0\nfor i in range(m):\n    q = int(input())\n    if q < n + 2 or q > mid + mid_f - 1:\n        print(0)\n    else:\n        res = mid_f - abs(mid - q)\n        print(res)", "(n, m) = map(int, input().split())\nmaxi = n + 2 * n\nmini = 2 + n\navg = (maxi + mini) // 2\nfor _ in range(m):\n    q = int(input())\n    if mini <= q <= maxi:\n        if q <= avg:\n            print(q - mini + 1)\n        else:\n            print(maxi - q + 1)\n    else:\n        print(0)", "(a, b) = map(int, input().split())\nfor _ in range(b):\n    n = int(input())\n    c = 0\n    if n < a + 2 or n > 3 * a:\n        print('0')\n    else:\n        m = 1 + a * 2\n        c = a - abs(m - n)\n        print(c)", "(n, m) = map(int, input().split())\nfor i in range(m):\n    s = int(input())\n    count = 0\n    if s > n and s <= 2 * n + 1:\n        count = s - n - 1\n    elif s > 2 * n + 1 and s <= 3 * n:\n        count = 3 * n - s + 1\n    print(count)", "(n, m) = map(int, input().split())\nminVal = n + 2\nmaxVal = 3 * n\nfor _ in range(m):\n    q = int(input())\n    if q >= minVal and q <= maxVal:\n        if q - minVal + 1 <= n:\n            print(q - minVal + 1)\n        else:\n            midVal = minVal + n - 1\n            print(n - (q - midVal))\n    else:\n        print(0)", "(n, m) = map(int, input().split())\nminVal = n + 2\nmaxVal = 3 * n\nfor _ in range(m):\n    q = int(input())\n    if q >= minVal and q <= maxVal:\n        if q - minVal + 1 <= n:\n            print(q - minVal + 1)\n        else:\n            midVal = minVal + n - 1\n            print(n - (q - midVal))\n    else:\n        print(0)", "s = input().split()\nn = int(s[0])\nm = int(s[1])\nfor i in range(m):\n    q = int(input())\n    count = 0\n    if q <= 2 * n and q > n:\n        count = q - n - 1\n    if q > 2 * n and q <= 3 * n:\n        count = n - (q - 2 * n - 1)\n    if q == 2 * n + 1:\n        count = n\n    print(count)", "(N, M) = [int(s) for s in input().split()]\nfor _ in range(M):\n    q = int(input())\n    print(max(min(q - N - 1, 3 * N + 1 - q), 0))", "import sys\nimport math\nimport bisect\nimport numpy as np\nfrom sys import stdin, stdout\nfrom itertools import accumulate, chain, combinations, groupby, permutations, product\nfrom collections import deque, Counter\nfrom bisect import bisect_left, bisect_right\nfrom math import gcd, sqrt, sin, cos, tan, degrees, radians\nfrom fractions import Fraction\nfrom decimal import Decimal\nimport sys\nMOD = 10 ** 9 + 7\nINF = 10 ** 20\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\n\ndef solve():\n    (n, m) = map(int, input().split())\n    p = n + 2\n    q = 3 * n\n    m1 = 2 * n + 1\n    for i in range(m):\n        g = int(input())\n        if g not in range(p, q + 1):\n            print(0)\n        else:\n            print(n - abs(m1 - g))\nsolve()", "(n, m) = list(map(int, input().split()))\n\ndef ans(n, q):\n    if q not in range(n + 1, 3 * n + 1):\n        return 0\n    at_max = 2 * n + 1\n    diverge = abs(q - at_max)\n    return n - diverge\nfor _ in range(m):\n    q = int(input())\n    print(ans(n, q))", "(n, m) = map(int, input().split())\nfor i in range(m):\n    q = int(input())\n    l = n + 2\n    r = 3 * n\n    mid = 2 * n + 1\n    if q not in range(l, r + 1):\n        print(0)\n    else:\n        print(n - abs(mid - q))", "(n, m) = map(int, input().split())\nl = n + 2\nr = 3 * n\nmid = 2 * n + 1\nfor i in range(m):\n    q = int(input())\n    if q not in range(l, r + 1):\n        print(0)\n    else:\n        print(n - abs(mid - q))", "(n, m) = map(int, input().split())\nl = n + 2\nr = 3 * n\nmid = (l + r) // 2\nfor i in range(m):\n    q = int(input())\n    if q not in range(n + 2, 3 * n + 1):\n        print(0)\n    elif q == mid:\n        print(n)\n    elif q < mid:\n        print(q - n - 1)\n    else:\n        print(3 * n - q + 1)", "(N, M) = input().split()\nN = int(N)\nM = int(M)\nfirst = N + 2\nlast = 3 * N\nmid = (first + last) // 2\nfor i in range(0, M):\n    a = int(input())\n    if a > last or a < first:\n        print(0)\n    elif a < mid:\n        print(a - first + 1)\n    elif a > mid:\n        print(last - a + 1)\n    elif a == mid:\n        print(N)", "tc = 1\nfor _ in range(1, 1 + tc):\n    (n, m) = map(int, input().split())\n    for __ in range(m):\n        v = int(input())\n        ans = 0\n        if v < n + 2 or v > n + 2 * n:\n            print(ans)\n            continue\n        half = v // 2\n        if v % 2 == 0:\n            i = half - 1\n            j = half + 1\n        else:\n            i = half\n            j = half + 1\n        ans += min(i, 1 + 2 * n - j) + min(j - n, n - i + 1) - 1\n        print(ans)", "(n, m) = map(int, input().split())\nfor i in range(m):\n    x = int(input())\n    avg = (4 * n + 2) // 2\n    if x in range(n + 2, 3 * n + 1):\n        ans = n - abs(avg - x)\n        print(ans)\n    else:\n        print(0)", "(n, m) = map(int, input().split())\nfor k in range(m):\n    q = int(input())\n    if n + 2 <= q <= 3 * n:\n        if q <= 2 * n:\n            print(q - n - 1)\n        else:\n            print(3 * n - q + 1)\n    else:\n        print(0)", "(n, m) = map(int, input().split())\nfor _ in range(m):\n    ele = int(input())\n    if ele < n + 1 or ele > n + n * 2:\n        print(0)\n    else:\n        min_val = 1 + n + 1\n        max_val = n + n * 2\n        ans = min(ele - min_val, max_val - ele) + 1\n        print(ans)", "(n, m) = map(int, input().split())\nstart = n + 2\nend = n * 3\nfor _ in range(m):\n    q = int(input())\n    if q < start or q > end:\n        print(0)\n    else:\n        print(min(end - q, q - start) + 1)", "(a, b) = map(int, input().split())\nx = a + 2\ny = 3 * a\nfor i in range(b):\n    m = int(input())\n    if m < x or m > y:\n        print('0')\n    elif m == x or m == y:\n        print('1')\n    else:\n        print(min(m - x, y - m) + 1)", "(n, m) = map(int, input().split())\nfor _ in range(m):\n    ele = int(input())\n    if ele < n + 1 or ele > n + n * 2:\n        print(0)\n    else:\n        min_val = 1 + n + 1\n        max_val = n + n * 2\n        ans = min(ele - min_val, max_val - ele) + 1\n        print(ans)", "(a, b) = map(int, input().split())\nx = a + 2\ny = 3 * a\nfor i in range(b):\n    m = int(input())\n    if m < x or m > y:\n        print('0')\n    elif m == x or m == y:\n        print('1')\n    else:\n        print(min(m - x, y - m) + 1)", "(n, m) = map(int, input().split())\nfor i in range(m):\n    N = int(input())\n    if N < n + 2 or N > 3 * n:\n        print('0')\n    else:\n        print(n - abs(2 * n + 1 - N))", "(n, m) = map(int, input().split())\nfor i in range(m):\n    inp = int(input())\n    if inp <= n + 1 or inp > 3 * n + 1:\n        print(0)\n    elif inp > n + 1 and inp <= 2 * n + 1:\n        print(inp - n - 1)\n    else:\n        print(n - (inp - (2 * n + 1)))", "from collections import Counter\nimport numpy as np\n(n, m) = map(int, input().split())\nfor i in range(m):\n    inp = int(input())\n    if inp <= n + 1 or inp > 3 * n + 1:\n        print(0)\n    elif inp > n + 1 and inp <= 2 * n + 1:\n        print(inp - n - 1)\n    else:\n        print(n - (inp - (2 * n + 1)))", "(n, m) = map(int, input().split())\nfor i in range(m):\n    num = int(input())\n    if num < n + 2 or num > 3 * n:\n        print('0')\n    else:\n        print(n - abs(2 * n + 1 - num))", "(n, m) = map(int, input().split())\nfor i in range(m):\n    num = int(input())\n    if num < n + 2 or num > 3 * n:\n        print('0')\n    else:\n        print(n - abs(2 * n + 1 - num))", "(n, m) = [int(i) for i in input().split()]\nfor i in range(m):\n    q = int(input())\n    if q <= 3 * n and q >= n + 2:\n        x = n + 2\n        mx = n\n        ans = abs(x - q) + 1\n        if ans > mx:\n            ans = mx - (ans - mx)\n    else:\n        ans = 0\n    print(ans)", "(n, m) = [int(i) for i in input().split()]\nfor i in range(m):\n    q = int(input())\n    if q <= 3 * n and q >= n + 2:\n        x = n + 2\n        mx = n\n        ans = abs(x - q) + 1\n        if ans > mx:\n            ans = mx - (ans - mx)\n    else:\n        ans = 0\n    print(ans)", "(n, m) = map(int, input().split())\nfor j in range(m):\n    q = int(input())\n    if q < n + 2 or q > 3 * n:\n        print(0)\n    else:\n        print(n - abs(2 * n + 1 - q))", "(n, m) = map(int, input().split())\nfor i in range(m):\n    num = int(input())\n    if num < n + 2 or num > 3 * n:\n        print('0')\n    else:\n        print(n - abs(2 * n + 1 - num))", "(n, q) = map(int, input().split())\nfor i in range(q):\n    num = int(input())\n    if num < n + 2 or num > 3 * n:\n        print('0')\n    else:\n        print(n - abs(2 * n + 1 - num))", "(x, y) = map(int, input().split())\nfor k in range(y):\n    a = int(input())\n    if a < x + 2 or a > 3 * x:\n        print('0')\n    else:\n        print(x - abs(2 * x + 1 - a))", "(n, q) = map(int, input().split())\nfor i in range(q):\n    num = int(input())\n    if num < n + 2 or num > 3 * n:\n        print('0')\n    else:\n        print(n - abs(2 * n + 1 - num))", "(n, q) = map(int, input().split())\nfor i in range(q):\n    num = int(input())\n    if num < n + 2 or num > 3 * n:\n        print('0')\n    else:\n        print(n - abs(2 * n + 1 - num))", "(n, q) = map(int, input().split())\nfor i in range(q):\n    num = int(input())\n    if num < n + 2 or num > 3 * n:\n        print('0')\n    else:\n        print(n - abs(2 * n + 1 - num))", "(n, m) = map(int, input().split())\nf = 1 + n + 1\nl = n + 2 * n\nfor i in range(m):\n    m1 = int(input())\n    if m1 < f or m1 > l:\n        print(0)\n    elif m1 == f or m1 == l:\n        print(1)\n    else:\n        print(min(m1 - f, l - m1) + 1)", "(n, m) = map(int, input().split())\nf = 1 + n + 1\nl = n + 2 * n\nfor i in range(m):\n    m1 = int(input())\n    if m1 < f or m1 > l:\n        print(0)\n    elif m1 == f or m1 == l:\n        print(1)\n    else:\n        print(min(m1 - f, l - m1) + 1)", "(n, m) = map(int, input().split())\nf = 1 + n + 1\nl = n + 2 * n\nfor i in range(m):\n    m1 = int(input())\n    if m1 < f or m1 > l:\n        print(0)\n    elif m1 == f or m1 == l:\n        print(1)\n    else:\n        print(min(m1 - f, l - m1) + 1)", "(n, m) = map(int, input().split())\nf = 1 + n + 1\nl = n + 2 * n\nfor i in range(m):\n    m1 = int(input())\n    if m1 < f or m1 > l:\n        print(0)\n    elif m1 == f or m1 == l:\n        print(1)\n    else:\n        print(min(m1 - f, l - m1) + 1)", "(n, m) = map(int, input().split())\nf = 1 + n + 1\nl = n + 2 * n\nfor i in range(m):\n    m1 = int(input())\n    if m1 < f or m1 > l:\n        print(0)\n    elif m1 == f or m1 == l:\n        print(1)\n    else:\n        print(min(m1 - f, l - m1) + 1)", "(n, m) = map(int, input().split())\nf = 1 + n + 1\nl = n + 2 * n\nfor i in range(m):\n    m1 = int(input())\n    if m1 < f or m1 > l:\n        print(0)\n    elif m1 == f or m1 == l:\n        print(1)\n    else:\n        print(min(m1 - f, l - m1) + 1)", "(n, m) = map(int, input().split())\nfirst = 1 + n + 1\nlast = n + 2 * n\nfor i in range(m):\n    a = int(input())\n    if a < first or a > last:\n        print(0)\n    elif a == first or a == last:\n        print(1)\n    else:\n        print(min(a - first, last - a) + 1)", "(n, m) = map(int, input().split())\nmax_number = n * 2 + 1\nmax_value = n\nmin_limit = n + 1\nmax_limit = n * 3 + 1\nfor _ in range(m):\n    query = int(input())\n    if query <= min_limit or query >= max_limit:\n        print(0)\n    else:\n        difference = abs(max_number - query)\n        print(max_value - difference)", "(n, m) = map(int, input().split())\nfirst = 1 + n + 1\nlast = n + 2 * n\nfor i in range(m):\n    a = int(input())\n    if a < first or a > last:\n        print(0)\n    elif a == first or a == last:\n        print(1)\n    else:\n        print(min(a - first, last - a) + 1)", "(a, b) = map(int, input().split())\nx = a + 2\ny = 3 * a\nfor i in range(b):\n    m = int(input())\n    if m < x or m > y:\n        print('0')\n    elif m == x or m == y:\n        print('1')\n    else:\n        print(min(m - x, y - m) + 1)", "(n, m) = map(int, input().split())\nfirst = 1 + n + 1\nlast = n + 2 * n\nfor i in range(m):\n    a = int(input())\n    if a < first or a > last:\n        print(0)\n    elif a == first or a == last:\n        print(1)\n    else:\n        print(min(a - first, last - a) + 1)", "(n, m) = map(int, input().split())\nfirst = 1 + n + 1\nlast = n + 2 * n\nfor i in range(m):\n    a = int(input())\n    if a < first or a > last:\n        print(0)\n    elif a == first or a == last:\n        print(1)\n    else:\n        print(min(a - first, last - a) + 1)"]