["import numpy as np\nfrom sys import stdin\nmod = 10 ** 9 + 7\n\ndef count(cur_pos, cur_cnt, cur_k, any_num_flag, num_lst, d, k):\n    global dp\n    if cur_pos == len(num_lst):\n        if cur_k > 0 and cur_k - cur_cnt <= 0:\n            return 1\n        return 0\n    if dp[cur_pos][cur_cnt][cur_k][any_num_flag] != -1:\n        return dp[cur_pos][cur_cnt][cur_k][any_num_flag]\n    ans = 0\n    if any_num_flag:\n        limit = 9\n    else:\n        limit = num_lst[cur_pos]\n    for dig in range(limit + 1):\n        tmp_cur_cnt = cur_cnt\n        tmp_cur_k = cur_k\n        if dig == d:\n            tmp_cur_cnt += 1\n        if dig < d:\n            tmp_cur_k -= 1\n        tmp_any_num_flag = any_num_flag\n        if dig < num_lst[cur_pos]:\n            tmp_any_num_flag = 1\n        ans = (ans + count(cur_pos + 1, tmp_cur_cnt, max(0, tmp_cur_k), tmp_any_num_flag, num_lst, d, k)) % mod\n    dp[cur_pos][cur_cnt][cur_k][any_num_flag] = ans\n    return dp[cur_pos][cur_cnt][cur_k][any_num_flag]\nM = 20\ndp = None\n\ndef get_count_dct(num, max_len):\n    global dp\n    M = max_len + 1\n    num_lst = []\n    while num:\n        num_lst.append(num % 10)\n        num //= 10\n    num_lst = num_lst + [0] * (max_len - len(num_lst))\n    num_lst = num_lst[::-1]\n    digit_loc_cnt = {}\n    for i in range(10):\n        dp = np.full((M, M, M, 2), -1).tolist()\n        for j in range(max_len):\n            digit_loc_cnt[i, j] = count(0, 0, j + 1, 0, num_lst, i, j + 1)\n    return digit_loc_cnt\nprev_cnt = {}\nfor _ in range(int(stdin.readline())):\n    (l, r) = map(int, stdin.readline().split())\n    max_len = len(str(r))\n    if (l, max_len) in prev_cnt:\n        l_count = prev_cnt[l, max_len]\n    else:\n        l_count = get_count_dct(l - 1, max_len)\n        prev_cnt[l, max_len] = l_count\n    if (r, max_len) in prev_cnt:\n        r_count = prev_cnt[r, max_len]\n    else:\n        r_count = get_count_dct(r, max_len)\n        prev_cnt[r, max_len] = r_count\n    fin_count = {}\n    for x in l_count:\n        fin_count[x] = r_count[x] - l_count[x]\n    ans = 0\n    for i in range(10):\n        for j in range(10):\n            for k in range(max_len):\n                ans = (ans + fin_count[i, k] * fin_count[j, k] * abs(i - j)) % mod\n    print(ans % mod)", "import numpy as np\nfrom sys import stdin\nmod = 10 ** 9 + 7\n\ndef count(cur_pos, cur_cnt, cur_k, any_num_flag, num_lst, d, k):\n    global dp\n    if cur_pos == len(num_lst):\n        if cur_k > 0 and cur_k - cur_cnt <= 0:\n            return 1\n        return 0\n    if dp[cur_pos][cur_cnt][cur_k][any_num_flag] != -1:\n        return dp[cur_pos][cur_cnt][cur_k][any_num_flag]\n    ans = 0\n    if any_num_flag:\n        limit = 9\n    else:\n        limit = num_lst[cur_pos]\n    for dig in range(limit + 1):\n        tmp_cur_cnt = cur_cnt\n        tmp_cur_k = cur_k\n        if dig == d:\n            tmp_cur_cnt += 1\n        if dig < d:\n            tmp_cur_k -= 1\n        tmp_any_num_flag = any_num_flag\n        if dig < num_lst[cur_pos]:\n            tmp_any_num_flag = 1\n        ans = (ans + count(cur_pos + 1, tmp_cur_cnt, max(0, tmp_cur_k), tmp_any_num_flag, num_lst, d, k)) % mod\n    dp[cur_pos][cur_cnt][cur_k][any_num_flag] = ans\n    return dp[cur_pos][cur_cnt][cur_k][any_num_flag]\nM = 20\ndp = None\n\ndef get_count_dct(num, max_len):\n    global dp\n    M = max_len + 1\n    num_lst = []\n    while num:\n        num_lst.append(num % 10)\n        num //= 10\n    num_lst = num_lst + [0] * (max_len - len(num_lst))\n    num_lst = num_lst[::-1]\n    digit_loc_cnt = {}\n    for i in range(10):\n        dp = np.full((M, M, M, 2), -1).tolist()\n        for j in range(max_len):\n            digit_loc_cnt[i, j] = count(0, 0, j + 1, 0, num_lst, i, j + 1)\n    return digit_loc_cnt\nprev_cnt = {}\nfor _ in range(int(stdin.readline())):\n    (l, r) = map(int, stdin.readline().split())\n    max_len = len(str(r))\n    if (l, max_len) in prev_cnt:\n        l_count = prev_cnt[l, max_len]\n    else:\n        l_count = get_count_dct(l - 1, max_len)\n        prev_cnt[l, max_len] = l_count\n    if (r, max_len) in prev_cnt:\n        r_count = prev_cnt[r, max_len]\n    else:\n        r_count = get_count_dct(r, max_len)\n        prev_cnt[r, max_len] = r_count\n    fin_count = {}\n    for x in l_count:\n        fin_count[x] = r_count[x] - l_count[x]\n    ans = 0\n    for i in range(10):\n        for j in range(10):\n            for k in range(max_len):\n                ans = (ans + fin_count[i, k] * fin_count[j, k] * abs(i - j)) % mod\n    print(ans % mod)"]