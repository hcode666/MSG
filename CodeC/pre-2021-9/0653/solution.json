["case = int(input())\nfor _ in range(case):\n    (n, k) = map(int, input().split(' '))\n    s = input()\n    arr = []\n    if n & 1 == 1:\n        value = n // 2\n        for i in range(value):\n            arr.append(i + 1)\n        for i in range(value, n):\n            arr.append(value)\n            value -= 1\n    else:\n        value = n // 2\n        for i in range(value):\n            arr.append(i + 1)\n        for i in range(value, n):\n            value -= 1\n            arr.append(value)\n    ans = 0\n    if k <= n // 2:\n        ans = k\n    else:\n        ans = n - k\n    res = 0\n    for i in range(n - 1):\n        if s[i] != s[i + 1]:\n            if arr[i] <= ans:\n                res += arr[i]\n            else:\n                res += ans\n    print(res)", "case = int(input())\nfor _ in range(case):\n    (n, k) = map(int, input().split(' '))\n    s = input()\n    arr = []\n    if n & 1 == 1:\n        value = n // 2\n        for i in range(value):\n            arr.append(i + 1)\n        for i in range(value, n):\n            arr.append(value)\n            value -= 1\n    else:\n        value = n // 2\n        for i in range(value):\n            arr.append(i + 1)\n        for i in range(value, n):\n            value -= 1\n            arr.append(value)\n    ans = 0\n    if k <= n // 2:\n        ans = k\n    else:\n        ans = n - k\n    res = 0\n    for i in range(n - 1):\n        if s[i] != s[i + 1]:\n            if arr[i] <= ans:\n                res += arr[i]\n            else:\n                res += ans\n    print(res)", "case = int(input())\nfor _ in range(case):\n    (n, k) = map(int, input().split(' '))\n    s = input()\n    arr = []\n    if n & 1 == 1:\n        value = n // 2\n        for i in range(value):\n            arr.append(i + 1)\n        for i in range(value, n):\n            arr.append(value)\n            value -= 1\n    else:\n        value = n // 2\n        for i in range(value):\n            arr.append(i + 1)\n        for i in range(value, n):\n            value -= 1\n            arr.append(value)\n    ans = 0\n    if k <= n // 2:\n        ans = k\n    else:\n        ans = n - k\n    res = 0\n    for i in range(n - 1):\n        if s[i] != s[i + 1]:\n            if arr[i] <= ans:\n                res += arr[i]\n            else:\n                res += ans\n    print(res)", "case = int(input())\nfor _ in range(case):\n    (n, k) = map(int, input().split(' '))\n    s = input()\n    arr = []\n    if n & 1 == 1:\n        value = n // 2\n        for i in range(value):\n            arr.append(i + 1)\n        for i in range(value, n):\n            arr.append(value)\n            value -= 1\n    else:\n        value = n // 2\n        for i in range(value):\n            arr.append(i + 1)\n        for i in range(value, n):\n            value -= 1\n            arr.append(value)\n    ans = 0\n    if k <= n // 2:\n        ans = k\n    else:\n        ans = n - k\n    res = 0\n    for i in range(n - 1):\n        if s[i] != s[i + 1]:\n            if arr[i] <= ans:\n                res += arr[i]\n            else:\n                res += ans\n    print(res)", "from collections import deque\n\ndef ans(k, s):\n    if k == 1:\n        cnt = 0\n        for i in range(0, len(s) - 1):\n            if s[i + 1] != s[i]:\n                cnt += 1\n        return cnt\n    else:\n        s = list(s)\n        i = 0\n        j = k - 1\n        d = deque(s[i:j + 1])\n        ncons = 0\n        for i in range(0, len(d) - 1):\n            if d[i + 1] != d[i]:\n                ncons += 1\n        cnt = 0\n        while j < len(s) - 1:\n            cnt += ncons\n            t1 = d.popleft()\n            d.append(s[j + 1])\n            if d[-2] != d[-1]:\n                cnt += 1\n                ncons += 1\n            if t1 != d[0]:\n                ncons -= 1\n            j += 1\n        return cnt\ntest_cases = int(input())\nwhile test_cases != 0:\n    d = list(map(int, input().split()))\n    d2 = input()\n    print(ans(d[-1], d2))\n    test_cases -= 1", "from collections import deque\n\ndef ans(k, s):\n    if k == 1:\n        cnt = 0\n        for i in range(0, len(s) - 1):\n            if s[i + 1] != s[i]:\n                cnt += 1\n        return cnt\n    else:\n        s = list(s)\n        i = 0\n        j = k - 1\n        d = deque(s[i:j + 1])\n        ncons = 0\n        for i in range(0, len(d) - 1):\n            if d[i + 1] != d[i]:\n                ncons += 1\n        cnt = 0\n        while j < len(s) - 1:\n            cnt += ncons\n            t1 = d.popleft()\n            d.append(s[j + 1])\n            if d[-2] != d[-1]:\n                cnt += 1\n                ncons += 1\n            if t1 != d[0]:\n                ncons -= 1\n            j += 1\n        return cnt\ntest_cases = int(input())\nwhile test_cases != 0:\n    d = list(map(int, input().split()))\n    d2 = input()\n    print(ans(d[-1], d2))\n    test_cases -= 1", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    s = input()\n    diff = [0] * n\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            diff[i] = 1\n    sum = 0\n    for i in range(k):\n        if diff[i] == 1:\n            sum += 1\n    ans = 0\n    for i in range(1, n - k + 1):\n        sum += diff[i + k - 1] - diff[i - 1]\n        ans += sum\n    print(ans)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    s = input()\n    diff = [0] * n\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            diff[i] = 1\n    sum = 0\n    for i in range(k):\n        if diff[i] == 1:\n            sum += 1\n    ans = 0\n    for i in range(1, n - k + 1):\n        sum += diff[i + k - 1] - diff[i - 1]\n        ans += sum\n    print(ans)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    s = input()\n    diff = [0] * n\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            diff[i] = 1\n    sum = 0\n    for i in range(k):\n        if diff[i] == 1:\n            sum += 1\n    ans = 0\n    for i in range(1, n - k + 1):\n        sum += diff[i + k - 1] - diff[i - 1]\n        ans += sum\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = str(input())\n    steps = [0 for i in range(k)]\n    for j in range(n - k):\n        if s[j] != s[j + 1]:\n            steps[0] += 1\n    for l in range(1, k):\n        steps[l] = steps[l - 1]\n        old = l\n        new = l + n - k\n        if s[old] != s[old - 1]:\n            steps[l] -= 1\n        if s[new] != s[new - 1]:\n            steps[l] += 1\n    print(sum(steps))", "def FindPower(arr, n, k):\n    change_arr = [1 if arr[i] != arr[i + 1] else 0 for i in range(n - 1)]\n    summ = sum(change_arr[:k])\n    res = 0\n    res += summ\n    for i in range(1, n - k):\n        summ += change_arr[k + i - 1]\n        summ -= change_arr[i - 1]\n        res += summ\n    return res\nfor i in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    arr = input()\n    print(FindPower(arr, n, k))", "for _ in range(int(input())):\n    (N, K) = list(map(int, input().split()))\n    S = input()\n    dp = [0] + [1 if S[i] != S[i - 1] else 0 for i in range(1, N)]\n    ans = 0\n    i = 1\n    sum_ = sum(dp[1:K + 1])\n    ans += sum_\n    while i + K < len(S):\n        sum_ += dp[i + K]\n        sum_ -= dp[i]\n        ans += sum_\n        i = i + 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    cnt = [0] * n\n    sm = 0\n    for i in range(0, n - 1):\n        if s[i] != s[i + 1]:\n            cnt[i] = 1\n    psum = [0] * (n + 1)\n    psum[0] = 0\n    for i in range(1, n + 1):\n        psum[i] = psum[i - 1] + cnt[i - 1]\n    for i in range(n - k):\n        sm += psum[i + k] - psum[i]\n    print(sm)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    cnt = [0] * n\n    sm = 0\n    for i in range(0, n - 1):\n        if s[i] != s[i + 1]:\n            cnt[i] = 1\n    psum = [0] * (n + 1)\n    psum[0] = 0\n    for i in range(1, n + 1):\n        psum[i] = psum[i - 1] + cnt[i - 1]\n    for i in range(n - k):\n        sm += psum[i + k] - psum[i]\n    print(sm)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    cnt = [0] * n\n    sm = 0\n    for i in range(0, n - 1):\n        if s[i] != s[i + 1]:\n            cnt[i] = 1\n    psum = [0] * (n + 1)\n    psum[0] = 0\n    for i in range(1, n + 1):\n        psum[i] = psum[i - 1] + cnt[i - 1]\n    for i in range(n - k):\n        sm += psum[i + k] - psum[i]\n    print(sm)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    sm = 0\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            sm += min(i, k, n - k, n - i)\n    print(sm)", "import math\n\ndef get_power(a, b):\n    if a == b:\n        return 0\n    return 1\n\ndef sum_power(x, N, K):\n    sum = 0\n    end = math.ceil(N / 2)\n    max_prod = K if K <= end else N - K + 1\n    for i in range(1, end + 1):\n        temp = i\n        if i > max_prod:\n            temp = max_prod\n        sum += temp * x[i - 1] + temp * x[N - i]\n    if N % 2 == 1:\n        sum -= temp * x[i - 1]\n    return sum\n\ndef find_sum_power(S, N, K):\n    consecutive_cell_power = []\n    for i in range(N - 1):\n        consecutive_cell_power.append(get_power(S[i], S[i + 1]))\n    return sum_power(consecutive_cell_power, N - 1, K)\nfor i in range(int(input())):\n    (N, K) = map(int, input().split())\n    S = input()\n    print(find_sum_power(S, N, K))", "def con(a, b):\n    cou = 0\n    for i in range(1, a[0]):\n        if b[i - 1] != b[i]:\n            if i > a[1] - 1 and i < a[0] - a[1]:\n                cou += a[1]\n            elif i - a[1] < 0:\n                if a[0] - i > a[1]:\n                    cou += i\n                else:\n                    cou += min(a[0] - i - 1, a[0] - a[1])\n            else:\n                cou += a[0] - i\n    print(cou)\nfor _ in range(int(input())):\n    con(list(map(int, input().split(' '))), input())", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    (n, k) = lisin()\n    a = input()\n    ch = [0] * k\n    kk = k - 1\n    nn = n - 1\n    for i in range(k):\n        if a[i] == a[i + 1]:\n            ch[i] = 1\n    need = ch.count(0)\n    pow = 0\n    while k < nn:\n        pow += need\n        if ch[0] == 0:\n            need -= 1\n        if a[k] == a[k + 1]:\n            ch.append(1)\n            ch.pop(0)\n        else:\n            ch.append(0)\n            ch.pop(0)\n            need += 1\n        k += 1\n    print(pow + need)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    (n, k) = lisin()\n    a = input()\n    ch = [0] * k\n    kk = k - 1\n    nn = n - 1\n    for i in range(k):\n        if a[i] == a[i + 1]:\n            ch[i] = 1\n    need = ch.count(0)\n    pow = 0\n    while k < nn:\n        pow += need\n        if ch[0] == 0:\n            need -= 1\n        if a[k] == a[k + 1]:\n            ch.append(1)\n            ch.pop(0)\n        else:\n            ch.append(0)\n            ch.pop(0)\n            need += 1\n        k += 1\n    print(pow + need)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    (n, k) = lisin()\n    a = input()\n    ch = [0] * k\n    kk = k - 1\n    nn = n - 1\n    for i in range(k):\n        if a[i] == a[i + 1]:\n            ch[i] = 1\n    need = ch.count(0)\n    pow = 0\n    while k < nn:\n        pow += need\n        if ch[0] == 0:\n            need -= 1\n        if a[k] == a[k + 1]:\n            ch.append(1)\n            ch.pop(0)\n        else:\n            ch.append(0)\n            ch.pop(0)\n            need += 1\n        k += 1\n    print(pow + need)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    (n, k) = lisin()\n    a = input()\n    ch = [0] * k\n    kk = k - 1\n    nn = n - 1\n    for i in range(k):\n        if a[i] == a[i + 1]:\n            ch[i] = 1\n    need = ch.count(0)\n    pow = 0\n    while k < nn:\n        pow += need\n        if ch[0] == 0:\n            need -= 1\n        if a[k] == a[k + 1]:\n            ch.append(1)\n            ch.pop(0)\n        else:\n            ch.append(0)\n            ch.pop(0)\n            need += 1\n        k += 1\n    print(pow + need)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    (n, k) = lisin()\n    a = input()\n    ch = [0] * k\n    kk = k - 1\n    nn = n - 1\n    for i in range(k):\n        if a[i] == a[i + 1]:\n            ch[i] = 1\n    need = ch.count(0)\n    pow = 0\n    while k < nn:\n        pow += need\n        if ch[0] == 0:\n            need -= 1\n        if a[k] == a[k + 1]:\n            ch.append(1)\n            ch.pop(0)\n        else:\n            ch.append(0)\n            ch.pop(0)\n            need += 1\n        k += 1\n    print(pow + need)", "cases_num = int(input())\nfor _ in range(cases_num):\n    (str_len, board_len) = [int(num) for num in input().split()]\n    string = input()\n    power_req = 0\n    repeats = 0\n    for i in range(1, str_len):\n        if string[i] == string[i - 1]:\n            repeats += 1\n        if i - board_len > 0 and string[i - board_len - 1] == string[i - board_len]:\n            repeats -= 1\n        if i >= board_len:\n            power_req += board_len - repeats\n    print(power_req)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    (n, k) = lisin()\n    a = input()\n    ch = [0] * k\n    kk = k - 1\n    nn = n - 1\n    for i in range(k):\n        if a[i] == a[i + 1]:\n            ch[i] = 1\n    need = ch.count(0)\n    pow = 0\n    while k < nn:\n        pow += need\n        if ch[0] == 0:\n            need -= 1\n        if a[k] == a[k + 1]:\n            ch.append(1)\n            ch.pop(0)\n        else:\n            ch.append(0)\n            ch.pop(0)\n            need += 1\n        k += 1\n    print(pow + need)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    (n, k) = lisin()\n    a = input()\n    ch = [0] * k\n    kk = k - 1\n    nn = n - 1\n    for i in range(k):\n        if a[i] == a[i + 1]:\n            ch[i] = 1\n    need = ch.count(0)\n    pow = 0\n    while k < nn:\n        pow += need\n        if ch[0] == 0:\n            need -= 1\n        if a[k] == a[k + 1]:\n            ch.append(1)\n            ch.pop(0)\n        else:\n            ch.append(0)\n            ch.pop(0)\n            need += 1\n        k += 1\n    print(pow + need)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    (n, k) = lisin()\n    a = input()\n    ch = [0] * k\n    kk = k - 1\n    nn = n - 1\n    for i in range(k):\n        if a[i] == a[i + 1]:\n            ch[i] = 1\n    need = ch.count(0)\n    pow = 0\n    while k < nn:\n        pow += need\n        if ch[0] == 0:\n            need -= 1\n        if a[k] == a[k + 1]:\n            ch.append(1)\n            ch.pop(0)\n        else:\n            ch.append(0)\n            ch.pop(0)\n            need += 1\n        k += 1\n    print(pow + need)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    (n, k) = lisin()\n    a = input()\n    ch = [0] * k\n    kk = k - 1\n    nn = n - 1\n    for i in range(k):\n        if a[i] == a[i + 1]:\n            ch[i] = 1\n    need = ch.count(0)\n    pow = 0\n    while k < nn:\n        pow += need\n        if ch[0] == 0:\n            need -= 1\n        if a[k] == a[k + 1]:\n            ch.append(1)\n            ch.pop(0)\n        else:\n            ch.append(0)\n            ch.pop(0)\n            need += 1\n        k += 1\n    print(pow + need)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    (n, k) = lisin()\n    a = input()\n    ch = [0] * k\n    kk = k - 1\n    nn = n - 1\n    for i in range(k):\n        if a[i] == a[i + 1]:\n            ch[i] = 1\n    need = ch.count(0)\n    pow = 0\n    while k < nn:\n        pow += need\n        if ch[0] == 0:\n            need -= 1\n        if a[k] == a[k + 1]:\n            ch.append(1)\n            ch.pop(0)\n        else:\n            ch.append(0)\n            ch.pop(0)\n            need += 1\n        k += 1\n    print(pow + need)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    (n, k) = lisin()\n    a = input()\n    ch = [0] * k\n    kk = k - 1\n    nn = n - 1\n    for i in range(k):\n        if a[i] == a[i + 1]:\n            ch[i] = 1\n    need = ch.count(0)\n    pow = 0\n    while k < nn:\n        pow += need\n        if ch[0] == 0:\n            need -= 1\n        if a[k] == a[k + 1]:\n            ch.append(1)\n            ch.pop(0)\n        else:\n            ch.append(0)\n            ch.pop(0)\n            need += 1\n        k += 1\n    print(pow + need)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    (n, k) = lisin()\n    a = input()\n    ch = [0] * k\n    kk = k - 1\n    nn = n - 1\n    for i in range(k):\n        if a[i] == a[i + 1]:\n            ch[i] = 1\n    need = ch.count(0)\n    pow = 0\n    while k < nn:\n        pow += need\n        if ch[0] == 0:\n            need -= 1\n        if a[k] == a[k + 1]:\n            ch.append(1)\n            ch.pop(0)\n        else:\n            ch.append(0)\n            ch.pop(0)\n            need += 1\n        k += 1\n    print(pow + need)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    (n, k) = lisin()\n    a = input()\n    ch = [0] * k\n    kk = k - 1\n    nn = n - 1\n    for i in range(k):\n        if a[i] == a[i + 1]:\n            ch[i] = 1\n    need = ch.count(0)\n    pow = 0\n    while k < nn:\n        pow += need\n        if ch[0] == 0:\n            need -= 1\n        if a[k] == a[k + 1]:\n            ch.append(1)\n            ch.pop(0)\n        else:\n            ch.append(0)\n            ch.pop(0)\n            need += 1\n        k += 1\n    print(pow + need)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    m = min(n - k, k)\n    sc = 0\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            sc += min(i, m, n - i) * 1\n    print(sc)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    m = min(n - k, k)\n    sc = 0\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            sc += min(i, m, n - i) * 1\n    print(sc)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    d = [0] * n\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            d[i] = 1\n    for i in range(1, n):\n        d[i] += d[i - 1]\n    res = 0\n    for i in range(k):\n        res += d[i + (n - k)] - d[i]\n    print(res)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    d = [0] * n\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            d[i] = 1\n    for i in range(1, n):\n        d[i] += d[i - 1]\n    res = 0\n    for i in range(k):\n        res += d[i + (n - k)] - d[i]\n    print(res)", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)) + '\\n')\n\ndef main():\n    for _ in tr():\n        (n, k) = sm()\n        string = line()\n        saved = 0\n        for i in range(n - 1):\n            if string[i + 1] == string[i]:\n                saved += min(n - k, i + 1, n - i - 1, k)\n        print(k * (n - k) - saved)\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)) + '\\n')\n\ndef main():\n    for _ in tr():\n        (n, k) = sm()\n        string = line()\n        saved = 0\n        for i in range(n - 1):\n            if string[i + 1] == string[i]:\n                saved += min(n - k, i + 1, n - i - 1, k)\n        print(k * (n - k) - saved)\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)) + '\\n')\n\ndef main():\n    for _ in tr():\n        (n, k) = sm()\n        string = line()\n        temp = 0\n        for i in range(n - 1):\n            if string[i + 1] != string[i]:\n                temp += min(n - k, i + 1, n - i - 1, k)\n        print(temp)\nmain()", "T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    S = input()\n    res = 0\n    diff = [0] * N\n    for i in range(1, N):\n        if S[i - 1] != S[i]:\n            diff[i] = 1\n        else:\n            diff[i] = 0\n    for i in range(1, N):\n        diff[i] += diff[i - 1]\n    for i in range(K):\n        res += diff[i + (N - K)] - diff[i]\n    print(res)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    ans = 0\n    size = n - k + 1\n    last = -1\n    lastcnt = 0\n    for i in range(size):\n        if last == -1:\n            last = s[i]\n        elif last != s[i]:\n            lastcnt += 1\n            last = s[i]\n    ans += lastcnt\n    for i in range(size, n):\n        if s[i - size] != s[i - size + 1]:\n            lastcnt -= 1\n        if last != s[i]:\n            lastcnt = lastcnt + 1\n        ans += lastcnt\n        last = s[i]\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    d = 0\n    for i in range(1, k + 1):\n        if s[i] != s[i - 1]:\n            d += 1\n    ans = d\n    for i in range(k + 1, n):\n        if s[i] != s[i - 1]:\n            d += 1\n        if s[i - k] != s[i - k - 1]:\n            d -= 1\n        ans += d\n    print(ans)", "def solve(board_size: int, word_size: int, word: str) -> int:\n    changes = 0\n    for i in range(1, word_size):\n        if word[i] != word[i - 1]:\n            changes += board_size - max(board_size - i, 0) - max(i - (word_size - board_size), 0)\n    return changes\n\ndef main():\n    tests = int(input())\n    for _ in range(tests):\n        sizes = input().split()\n        word_size = int(sizes[0])\n        board_size = int(sizes[1])\n        word = input()\n        changes = solve(board_size, word_size, word)\n        print(changes)\nmain()", "tc = input()\nfor q in range(int(tc)):\n    (n, k) = map(int, input().split())\n    s = input()\n    i = 1\n    SUMPOWER = 0\n    while i != n:\n        if s[i] == s[i - 1]:\n            i += 1\n            continue\n        elif i <= k - 1:\n            SUMPOWER += min(i, n - k)\n        elif i >= n - k:\n            SUMPOWER += min(n - i, n - k)\n        else:\n            SUMPOWER += k\n        i += 1\n    print(SUMPOWER)", "from sys import stdin, stdout\ninput = stdin.readline\nt = int(input().strip())\nfor _ in range(t):\n    (n, k) = list(map(int, input().strip().split()))\n    s = input().strip()\n    arr = list()\n    psum = list()\n    total = 0\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            arr.append(0)\n        else:\n            arr.append(1)\n        total += arr[i]\n        psum.append(total)\n    ans = psum[k - 1]\n    for i in range(k, n - 1):\n        ans += psum[i] - psum[i - k]\n    print(ans)", "from sys import stdin, stdout\ninput = stdin.readline\nt = int(input().strip())\nfor _ in range(t):\n    (n, k) = list(map(int, input().strip().split()))\n    s = input().strip()\n    arr = list()\n    psum = list()\n    total = 0\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            arr.append(0)\n        else:\n            arr.append(1)\n        total += arr[i]\n        psum.append(total)\n    ans = psum[k - 1]\n    for i in range(k, n - 1):\n        ans += psum[i] - psum[i - k]\n    print(ans)", "from sys import stdin, stdout\ninput = stdin.readline\nt = int(input().strip())\nfor _ in range(t):\n    (n, k) = list(map(int, input().strip().split()))\n    s = input().strip()\n    arr = list()\n    psum = list()\n    total = 0\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            arr.append(0)\n        else:\n            arr.append(1)\n        total += arr[i]\n        psum.append(total)\n    ans = psum[k - 1]\n    for i in range(k, n - 1):\n        ans += psum[i] - psum[i - k]\n    print(ans)", "import sys\nsys.setrecursionlimit(10 ** 5)\n\ndef pro(arr, k):\n    n = len(arr)\n    lst = [0] * (n - 1)\n    for i in range(n - 1):\n        if arr[i] != arr[i + 1]:\n            lst[i] = 1\n    i = 0\n    c = 0\n    j = 0\n    k1 = k\n    while k1:\n        c += lst[j]\n        j += 1\n        k1 -= 1\n    ans = c\n    j = k - 1\n    while j < len(lst) - 1:\n        if lst[i]:\n            c -= 1\n        if j + 1 < len(lst) and lst[j + 1]:\n            c += 1\n        ans += c\n        i += 1\n        j += 1\n    print(ans)\nn = int(input())\nfor i in range(n):\n    (n, k) = list(map(int, input().split()))\n    arr = list(input())\n    pro(arr, k)", "from sys import stdin, stdout\ninput = stdin.readline\nt = int(input().strip())\nfor _ in range(t):\n    (n, k) = list(map(int, input().strip().split()))\n    s = input().strip()\n    arr = list()\n    psum = list()\n    total = 0\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            arr.append(0)\n        else:\n            arr.append(1)\n        total += arr[i]\n        psum.append(total)\n    ans = psum[k - 1]\n    for i in range(k, n - 1):\n        ans += psum[i] - psum[i - k]\n    print(ans)", "t = int(input())\nfor tc in range(t):\n    (n, k) = map(int, input().split())\n    string = input()\n    result = 0\n    for i in range(n - 1):\n        if string[i + 1] == string[i]:\n            result += min(n - k, i + 1, n - 1 - i, k)\n    print(k * (n - k) - result)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = str(input())\n    temp_ans = [False] * k\n    for i in range(k):\n        if s[i] == s[i + 1]:\n            temp_ans[i] = True\n    ans_arr = []\n    count = 0\n    for i in temp_ans:\n        if not i:\n            count += 1\n    a = count\n    for i in range(k, n - 1):\n        temp = temp_ans.pop(0)\n        if not temp:\n            count -= 1\n        if s[i] != s[i + 1]:\n            temp_ans.append(False)\n            count += 1\n        else:\n            temp_ans.append(True)\n        a += count\n    print(a)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = str(input())\n    temp_ans = [False] * k\n    for i in range(k):\n        if s[i] == s[i + 1]:\n            temp_ans[i] = True\n    ans_arr = []\n    count = 0\n    for i in temp_ans:\n        if not i:\n            count += 1\n    ans_arr.append(count)\n    for i in range(k, n - 1):\n        temp = temp_ans.pop(0)\n        if not temp:\n            count -= 1\n        if s[i] != s[i + 1]:\n            temp_ans.append(False)\n            count += 1\n        else:\n            temp_ans.append(True)\n        ans_arr.append(count)\n    print(sum(ans_arr))", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = str(input())\n    a = 0\n    v = [0]\n    for j in range(n - 1):\n        if s[j] != s[j + 1]:\n            a += 1\n        v.append(a)\n    (x, y) = (0, k)\n    ans = 0\n    for i in range(k, n):\n        ans += abs(v[x] - v[i])\n        x += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = str(input())\n    a = 0\n    v = [0]\n    for j in range(n - 1):\n        if s[j] != s[j + 1]:\n            a += 1\n        v.append(a)\n    (x, y) = (0, k)\n    ans = 0\n    while y != 0:\n        ans += v[-y] - v[x]\n        x += 1\n        y -= 1\n    print(ans)", "T = int(input())\nfor i in range(T):\n    (N, K) = map(lambda x: int(x), str(input()).split(' '))\n    S = str(input())\n    hmuch = []\n    value = 0\n    for j in range(N - 1):\n        if S[j] == S[j + 1]:\n            value = value + 1\n        hmuch.append(value)\n    answer = 0\n    for j in range(N - K):\n        if j == 0:\n            answer = answer + (K - hmuch[K - 1])\n        else:\n            answer = answer + (K - (hmuch[j + K - 1] - hmuch[j - 1]))\n    print(answer)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = str(input())\n    add = 0\n    v = [0]\n    for i in range(n - 1):\n        if s[i] != s[i + 1]:\n            add += 1\n        v.append(add)\n    (i, j) = (0, k)\n    ans = 0\n    while j != 0:\n        ans += v[-j] - v[i]\n        i += 1\n        j -= 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    power = 0\n    for i in range(n - 1):\n        if s[i + 1] != s[i]:\n            power += min(i + 1, k, n - i - 1, n - k)\n    print(power)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    data = input()\n    pre = [0] * n\n    for i in range(1, n):\n        pre[i] = pre[i - 1]\n        if data[i] != data[i - 1]:\n            pre[i] += 1\n    total = 0\n    column = n - k\n    for i in range(k):\n        cost = pre[i + column] - pre[i]\n        total += cost\n    print(total)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    currcost = 0\n    for i in range(1, k):\n        if s[i] != s[i - 1]:\n            currcost += 1\n    ans = 0\n    for j in range(k, n):\n        if s[j] != s[j - 1]:\n            currcost += 1\n        if j - k != 0 and s[j - k] != s[j - k - 1]:\n            currcost -= 1\n        ans += currcost\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    check = []\n    check.append(0)\n    currcost = 0\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            check.append(1)\n            if i < k:\n                currcost += 1\n        else:\n            check.append(0)\n    ans = 0\n    for j in range(k, n):\n        if check[j - k] == 1:\n            currcost -= 1\n        if check[j] == 1:\n            currcost += 1\n        ans += currcost\n    print(ans)", "t = int(input())\nfor tc in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    arr = []\n    for i in range(n - 1):\n        arr.append(int(s[i] != s[i + 1]))\n    sm = sum(arr[:k])\n    res = sm\n    for i in range(n - k - 1):\n        sm = sm - arr[i] + arr[i + k]\n        res += sm\n    print(res)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    pre = [0] * n\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            pre[i] = pre[i - 1] + 1\n        else:\n            pre[i] = pre[i - 1]\n    count = 0\n    for i in range(k, n):\n        count += pre[i] - pre[i - k]\n    print(count)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    result = 0\n    diff = [0] * n\n    for i in range(n - 1):\n        if s[i] != s[i + 1]:\n            diff[i] = 1\n        else:\n            diff[i] = 0\n    cost = 0\n    for i in range(k):\n        cost += diff[i]\n    result += cost\n    for i in range(n - k - 1):\n        cost -= diff[i]\n        cost += diff[i + k]\n        result += cost\n    print(result)", "import math\nfrom collections import Counter, defaultdict\nimport sys\nmod = 10 ** 9 + 7\ninput = sys.stdin.readline\nreadInt = lambda : int(input().strip())\nreadfloat = lambda : float(input().strip())\nreadStr = lambda : input().strip()\nintList = lambda : list(map(int, input().strip().split()))\nintMap = lambda : map(int, input().strip().split())\nfloatList = lambda : list(map(float, input().strip().split()))\nfloatMap = lambda : map(float, input().strip().split())\nstrList = lambda : list(input().strip().split())\n\ndef print(*args, end='\\n', sep=' '):\n    for i in args:\n        sys.stdout.write(str(i))\n        sys.stdout.write(sep)\n    sys.stdout.write(end)\n\ndef solve():\n    res = i = equals = 0\n    for j in range(1, k):\n        if s[j] == s[j - 1]:\n            equals += 1\n    for j in range(k, n):\n        if j > i and s[j] == s[j - 1]:\n            equals += 1\n        if j - i == k:\n            res += k - equals\n        if j - i == k:\n            if i < j and s[i] == s[i + 1]:\n                equals -= 1\n            i += 1\n    return res\nfor _ in range(readInt()):\n    (n, k) = intMap()\n    s = list(input().strip())\n    print(solve())", "for _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    s = input()\n    start = 0\n    end = 0\n    val = 0\n    string = ''\n    diff = [0] * n\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            diff[i] = 1\n        else:\n            diff[i] = 0\n    for i in range(1, n):\n        diff[i] += diff[i - 1]\n    ans = 0\n    for i in range(k):\n        ans += diff[i + (n - k)] - diff[i]\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    s = input()\n    start = 0\n    end = 0\n    val = 0\n    string = ''\n    diff = [0] * n\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            diff[i] = 1\n        else:\n            diff[i] = 0\n    for i in range(1, n):\n        diff[i] += diff[i - 1]\n    ans = 0\n    for i in range(k):\n        ans += diff[i + (n - k)] - diff[i]\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    pre_sum = [0] * (n + 1)\n    for j in range(n):\n        if j == 0:\n            pre_sum[j + 1] += 1\n        elif s[j] == s[j - 1]:\n            pre_sum[j + 1] = pre_sum[j]\n        else:\n            pre_sum[j + 1] = pre_sum[j] + 1\n    power = 0\n    cnt = 0\n    for j in range(1, n + 1):\n        if cnt == k:\n            power += pre_sum[j] - pre_sum[j - k]\n            cnt -= 1\n        cnt += 1\n    print(power)", "T = int(input())\nfor i in range(T):\n    (n, k) = map(int, input().split())\n    s = input()\n    pre_sum = [0] * (n + 1)\n    for j in range(n):\n        if j == 0:\n            pre_sum[j + 1] += 1\n        elif s[j] == s[j - 1]:\n            pre_sum[j + 1] = pre_sum[j]\n        else:\n            pre_sum[j + 1] = pre_sum[j] + 1\n    power = 0\n    cnt = 0\n    for j in range(1, n + 1):\n        if cnt == k:\n            power += pre_sum[j] - pre_sum[j - k]\n            cnt -= 1\n        cnt += 1\n    print(power)", "def switch_power(s, n, k):\n    power = 0\n    for i in range(1, n):\n        if i < k and n - 1 - i < k and (s[i] != s[i - 1]):\n            power += n - k\n            continue\n        if i < k and s[i] != s[i - 1]:\n            power += i\n            continue\n        if n - 1 - i < k and s[i] != s[i - 1]:\n            power += n - i\n            continue\n        if s[i] != s[i - 1]:\n            power += k\n        else:\n            continue\n    return power\nT = int(input())\nfor t in range(T):\n    (n, k) = map(int, input().strip().split())\n    S = input()\n    power = switch_power(S, n, k)\n    print(power)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    pre_sum = [0] * (n + 1)\n    for j in range(n):\n        if j == 0:\n            pre_sum[j + 1] += 1\n        elif s[j] == s[j - 1]:\n            pre_sum[j + 1] = pre_sum[j]\n        else:\n            pre_sum[j + 1] = pre_sum[j] + 1\n    power = 0\n    cnt = 0\n    for j in range(1, n + 1):\n        if cnt == k:\n            power += pre_sum[j] - pre_sum[j - k]\n            cnt -= 1\n        cnt += 1\n    print(power)", "for i in range(int(input())):\n    (N, K) = map(int, input().split())\n    S = input()\n    tot = 0\n    s = N - K\n    s = min(s, K)\n    if N >= 2 * s:\n        for p in range(1, s + 1):\n            if S[p] != S[p - 1]:\n                tot += p\n        for p in range(s + 1, N - s + 1):\n            if S[p] != S[p - 1]:\n                tot += s\n        for p in range(N - s + 1, N):\n            if S[p] != S[p - 1]:\n                tot += N - p\n    else:\n        mx = N / 2\n        for p in range(1, mx + 1):\n            if S[p] != S[p - 1]:\n                tot += p\n        for p in range(mx + 1, N):\n            if S[p] != S[p - 1]:\n                tot += N - p\n    print(tot)", "for i in range(int(input())):\n    (N, K) = map(int, input().split())\n    S = input()\n    tot = 0\n    s = N - K\n    s = min(s, K)\n    if N >= 2 * s:\n        for p in range(1, s + 1):\n            if S[p] != S[p - 1]:\n                tot += p\n        for p in range(s + 1, N - s + 1):\n            if S[p] != S[p - 1]:\n                tot += s\n        for p in range(N - s + 1, N):\n            if S[p] != S[p - 1]:\n                tot += N - p\n    else:\n        mx = N / 2\n        for p in range(1, mx + 1):\n            if S[p] != S[p - 1]:\n                tot += p\n        for p in range(mx + 1, N):\n            if S[p] != S[p - 1]:\n                tot += N - p\n    print(tot)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = 0\n    l = n - k\n    h = min(l, k)\n    for i in range(1, h):\n        if s[i] != s[i - 1]:\n            a += i\n    for i in range(h, n - h + 1):\n        if s[i] != s[i - 1]:\n            a += h\n    for i in range(n - h + 1, n):\n        if s[i] != s[i - 1]:\n            a += n - i\n    print(a)", "for _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    s = input()\n    start = 0\n    end = 0\n    val = 0\n    string = ''\n    diff = [0] * n\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            diff[i] = 1\n        else:\n            diff[i] = 0\n    for i in range(1, n):\n        diff[i] += diff[i - 1]\n    ans = 0\n    for i in range(k):\n        ans += diff[i + (n - k)] - diff[i]\n    print(ans)", "t = int(input())\nfor h in range(t):\n    (n, k) = map(int, input().split())\n    x = list(input())\n    c = 0\n    for i in range(1, k):\n        if x[i] != x[i - 1]:\n            c += 1\n    i = 1\n    j = k\n    s = 0\n    while j < n:\n        if x[j] != x[j - 1]:\n            c += 1\n        s += c\n        if x[i] != x[i - 1]:\n            c -= 1\n        i += 1\n        j += 1\n    print(s)", "t = int(input())\nfor _t in range(t):\n    (s, w) = map(int, input().split())\n    p = input()\n    a = [0 for i in range(s)]\n    for i in range(1, s):\n        if p[i] != p[i - 1]:\n            a[i] = 1\n    for i in range(1, s):\n        a[i] = a[i] + a[i - 1]\n    ans = 0\n    for i in range(w):\n        ans += a[s - w + i] - a[i]\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (s, w) = map(int, input().split())\n    p = input()\n    array = [0 for i in range(s)]\n    for i in range(1, s):\n        if p[i] != p[i - 1]:\n            array[i] = 1\n    for i in range(1, s):\n        array[i] = array[i] + array[i - 1]\n    ans = 0\n    for i in range(w):\n        ans += array[s - w + i] - array[i]\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = [0]\n    p = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            p += 1\n        l.append(p)\n    i = 0\n    ans = 0\n    while i < len(s):\n        try:\n            ans += l[k + i] - l[i]\n        except:\n            break\n        i += 1\n    print(ans)", "T = int(input())\nans = []\nfor _ in range(T):\n    (N, K) = [int(i) for i in input().split()]\n    S = input()\n    pairs = [0]\n    p = 0\n    for i in range(1, N):\n        if S[i - 1] == S[i]:\n            p += 1\n        pairs.append(p)\n    sum = 0\n    for i in range(N - K):\n        sum += K - (pairs[i + K] - pairs[i])\n    ans.append(sum)\nfor i in ans:\n    print(i)", "t = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    i = 1\n    j = 1\n    ans = 0\n    sumi = 0\n    while i < n and j < n:\n        if s[j] != s[j - 1]:\n            sumi += 1\n        j += 1\n        if j - i == k:\n            ans += sumi\n            if s[i] != s[i - 1]:\n                sumi -= 1\n            i += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    adj = [0] * n\n    r = min(k, n - k)\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            adj[i] = 1\n    ans = 0\n    for i in range(n):\n        ans += adj[i] * min(min(i, r), min(n - i, r))\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    dif = [0] * n\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            dif[i] = dif[i - 1] + 1\n        else:\n            dif[i] = dif[i - 1]\n    for i in range(0, k):\n        ans += dif[i + (n - k)] - dif[i]\n    print(ans)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = input()\n    store = [1 for i in range(n)]\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            store[i] = 0\n    prev = sum(store[:k])\n    ans = 0\n    for i in range(1, n - k + 1):\n        prev += store[i + k - 1] - store[i - 1]\n        ans += prev\n    print(ans)", "import sys, os, io, time, copy, math\nfrom collections import deque\n\ndef main():\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        string = input()\n        arr = [0]\n        for i in range(1, n):\n            if string[i] != string[i - 1]:\n                arr.append(1)\n            else:\n                arr.append(0)\n        for i in range(1, n):\n            arr[i] = arr[i - 1] + arr[i]\n        k = n - k + 1\n        result = arr[k - 1]\n        for i in range(k, n):\n            x = arr[i] - arr[i - k + 1]\n            result += x\n        print(result)\nmain()", "def sumpower(s, k):\n    diff = len(s) * [0]\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            diff[i] = 1\n    for i in range(1, len(diff)):\n        diff[i] += diff[i - 1]\n    ans = 0\n    for i in range(0, k):\n        ans += diff[n - k + i] - diff[i]\n    return ans\nt = int(input())\nfor i in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    print(sumpower(s, k))", "try:\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        s = input()\n        ref = [0] * n\n        for i in range(1, n):\n            if s[i] == s[i - 1]:\n                ref[i] = True\n            else:\n                ref[i] = False\n        points = 0\n        ts = 0\n        fs = 0\n        for i in range(k):\n            if ref[i]:\n                ts += 1\n            else:\n                fs += 1\n        l = 0\n        r = k - 1\n        while r != n - 1:\n            if ref[l]:\n                ts -= 1\n            else:\n                fs -= 1\n            l += 1\n            r += 1\n            if ref[r]:\n                ts += 1\n            else:\n                fs += 1\n            points += fs\n        print(points)\nexcept:\n    pass", "s = ''\nn = 0\nk = 0\n\ndef fun():\n    res = 0\n    for i in range(1, n):\n        if i <= n - k:\n            if s[i] != s[i - 1]:\n                if i >= k:\n                    res += k\n                else:\n                    res += i\n        elif s[i] != s[i - 1]:\n            if k - 1 < i:\n                res += n - i\n            else:\n                res += n - k\n    print(res)\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    s = input()\n    fun()\n    t -= 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    dif = [0] * n\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            dif[i] = 1\n    for i in range(1, n):\n        dif[i] = dif[i] + dif[i - 1]\n    c = 0\n    for i in range(m):\n        c += dif[n - m + i] - dif[i]\n    print(c)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    dif = [0] * n\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            dif[i] = 1\n    for i in range(1, n):\n        dif[i] = dif[i] + dif[i - 1]\n    c = 0\n    for i in range(m):\n        c += dif[n - m + i] - dif[i]\n    print(c)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    res = 0\n    output = 0\n    s = input()\n    arr = [int(s[i] != s[i + 1]) for i in range(n - 1)]\n    res += sum(arr[:k])\n    output += res\n    for i in range(n - k - 1):\n        res += arr[i + k] - arr[i]\n        output += res\n    print(output)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split(' '))\n    string = input()\n    final = 0\n    for i in range(n - 1):\n        required = min(i, k - 1)\n        p = max(1, i - k + 2)\n        remaining = n - k - p\n        l = min(required, remaining)\n        if string[i] != string[i + 1]:\n            final += l + 1\n    print(final)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    prev = s[0]\n    c = 0\n    dp = [0] * n\n    for i in range(1, n):\n        if prev != s[i]:\n            dp[i] = dp[i - 1] + 1\n        else:\n            dp[i] = dp[i - 1]\n        prev = s[i]\n    for i in range(k):\n        c += dp[i + (n - k)] - dp[i]\n    print(c)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    s = list(s)\n    c = 0\n    l = []\n    if n % 2 == 0:\n        for i in range(1, n // 2 + 1):\n            d = min(n - k, k, i)\n            l.append(d)\n        for i in range(n // 2 - 1, 0, -1):\n            d = min(n - k, k, i)\n            l.append(d)\n    else:\n        for i in range(1, n // 2 + 1):\n            d = min(n - k, k, i)\n            l.append(d)\n        for i in range(n // 2, 0, -1):\n            d = min(n - k, k, i)\n            l.append(d)\n    for i in range(n - 1):\n        if s[i] != s[i + 1]:\n            c += l[i]\n    print(c)", "t = int(input())\nfor _ in range(t):\n    inp = input().split()\n    n = int(inp[0])\n    k = int(inp[1])\n    a = input()\n    c = 0\n    ans = 0\n    for i in range(k):\n        if a[i] != a[i + 1]:\n            c += 1\n    for i in range(n - k):\n        ans += c\n        if not a[i] == a[i + 1]:\n            c -= 1\n        if i + k + 1 == n:\n            break\n        if not a[i + k] == a[i + k + 1]:\n            c += 1\n    print(ans)", "e = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = [0]\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            l.append(1 + l[-1])\n        else:\n            l.append(l[-1])\n    ans = 0\n    for i in range(k, n):\n        ans += l[i] - l[i - k]\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(input())\n    val = [0] * n\n    val[0] = 1\n    for i in range(1, n):\n        if l[i] != l[i - 1]:\n            val[i] = val[i - 1] + 1\n        else:\n            val[i] = val[i - 1]\n    ans = 0\n    for i in range(0, n - k, 1):\n        ans += val[i + k] - val[i]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    (tot, prev) = (0, 0)\n    i = 1\n    wind = 0\n    while i < n:\n        if i == 1 and wind == 0:\n            for j in range(i, i + k):\n                if s[j] != s[j - 1]:\n                    tot += 1\n            i += k\n            wind += 1\n            prev = tot\n        else:\n            init = tot\n            if s[wind] != s[wind - 1]:\n                tot += prev - 1\n            else:\n                tot += prev\n            if s[i] != s[i - 1]:\n                tot += 1\n            prev = tot - init\n            wind += 1\n            i += 1\n    print(tot)"]