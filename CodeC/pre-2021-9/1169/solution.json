["def bestscore(exp):\n    elen = len(exp)\n    nmin = exp.count('-')\n    if nmin == 0:\n        return sum(exp[::2])\n    else:\n        mpos = exp.index('-')\n        ival = sum(exp[:mpos:2])\n        mval = exp[mpos + 1]\n        if nmin == 1:\n            rval = sum(exp[mpos + 3::2])\n            return ival - mval + rval\n        m2pos = exp.index('-', mpos + 1)\n        rval = sum(exp[m2pos + 1::2])\n        if m2pos == mpos + 2:\n            return ival - mval + rval\n        m2val = sum(exp[mpos + 1:m2pos:2])\n        return max(ival - m2val + rval, ival - mval + bestscore(exp[mpos + 3:]))\nfor _ in range(int(input())):\n    n = int(input())\n    atm = 2 * n - 1\n    z = input().split()\n    a = list(z[:atm])\n    for el in range(0, atm, 2):\n        a[el] = int(a[el])\n    print(bestscore(a))", "def bestscore(exp):\n    elen = len(exp)\n    nmin = exp.count('-')\n    if nmin == 0:\n        return sum(exp[::2])\n    else:\n        mpos = exp.index('-')\n        ival = sum(exp[:mpos:2])\n        mval = exp[mpos + 1]\n        if nmin == 1:\n            rval = sum(exp[mpos + 3::2])\n            return ival - mval + rval\n        m2pos = exp.index('-', mpos + 1)\n        rval = sum(exp[m2pos + 1::2])\n        if m2pos == mpos + 2:\n            return ival - mval + rval\n        m2val = sum(exp[mpos + 1:m2pos:2])\n        return max(ival - m2val + rval, ival - mval + bestscore(exp[mpos + 3:]))\nfor _ in range(int(input())):\n    n = int(input())\n    atm = 2 * n - 1\n    z = input().split()\n    a = list(z[:atm])\n    for el in range(0, atm, 2):\n        a[el] = int(a[el])\n    print(bestscore(a))"]