["for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    t = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        d = {}\n        q = i\n        while q < n:\n            if t[q] not in d:\n                d[t[q]] = 1\n            else:\n                d[t[q]] += 1\n            q += k\n        l = list(d.values())\n        s = sum(l)\n        mx = max(l)\n        ans += s - mx\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    t = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        d = {}\n        q = i\n        while q < n:\n            if t[q] not in d:\n                d[t[q]] = 1\n            else:\n                d[t[q]] += 1\n            q += k\n        l = list(d.values())\n        s = sum(l)\n        mx = max(l)\n        ans += s - mx\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    t = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        d = {}\n        q = i\n        while q < n:\n            if t[q] not in d:\n                d[t[q]] = 1\n            else:\n                d[t[q]] += 1\n            q += k\n        l = list(d.values())\n        s = sum(l)\n        mx = max(l)\n        ans += s - mx\n    print(ans)", "from collections import Counter as cc\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    c = [0 for _ in range(k)]\n    freq = [cc() for _ in range(k)]\n    for i in range(n):\n        freq[i % k][l[i]] += 1\n        c[i % k] += 1\n    t = 0\n    for (i, d) in enumerate(freq):\n        t += c[i] - d.most_common(1)[0][1]\n    print(t)", "from collections import Counter as cc\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    c = [0 for _ in range(k)]\n    freq = [cc() for _ in range(k)]\n    for i in range(n):\n        freq[i % k][l[i]] += 1\n        c[i % k] += 1\n    t = 0\n    for (i, d) in enumerate(freq):\n        t += c[i] - d.most_common(1)[0][1]\n    print(t)", "from collections import Counter as cc\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    c = [0 for _ in range(k)]\n    freq = [cc() for _ in range(k)]\n    for i in range(n):\n        freq[i % k][l[i]] += 1\n        c[i % k] += 1\n    t = 0\n    for (i, d) in enumerate(freq):\n        t += c[i] - d.most_common(1)[0][1]\n    print(t)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = 0\n    for j in range(k):\n        s = {}\n        if l[j] in s:\n            s[l[j]] += 1\n        else:\n            s[l[j]] = 1\n        z = j + k\n        c = 1\n        while z < n:\n            if l[z] in s:\n                s[l[z]] += 1\n            else:\n                s[l[z]] = 1\n            z += k\n            c += 1\n        m = 0\n        for (keys, v) in s.items():\n            m = max(m, v)\n        ans += c - m\n    print(ans)", "from collections import defaultdict\nlinp = lambda : list(map(int, input().split()))\niinp = lambda : int(input())\ntinp = lambda : map(int, input().split())\nrinp = lambda : range(int(input()))\ndct = lambda : defaultdict(lambda : 0)\nfrom collections import Counter\nfor _ in rinp():\n    (n, k) = tinp()\n    l = linp()\n    z = [[] for _ in range(k)]\n    for (i, e) in enumerate(l):\n        m = (i + 1) % k\n        z[m].append(e)\n    ans = 0\n    for ar in z:\n        l = len(ar)\n        if l == 0:\n            continue\n        c = Counter(ar).most_common(1)[0]\n        c = c[1]\n        ans += l - c\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        S = {}\n        if arr[i] in S:\n            S[arr[i]] += 1\n        else:\n            S[arr[i]] = 1\n        j = i + k\n        cnt = 1\n        while j < n:\n            if arr[j] in S:\n                S[arr[j]] += 1\n            else:\n                S[arr[j]] = 1\n            j += k\n            cnt += 1\n        mx = 0\n        for (keys, v) in S.items():\n            mx = max(mx, v)\n        ans += cnt - mx\n    print(ans)", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    i = 0\n    oper = 0\n    while i < K:\n        d = dict()\n        for j in range(i, N, K):\n            if A[j] in d.keys():\n                d[A[j]] += 1\n            else:\n                d[A[j]] = 1\n        oper += sum(d.values()) - max(d.values())\n        i = i + 1\n    print(oper)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    t = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        d = {}\n        q = i\n        while q < n:\n            if t[q] not in d:\n                d[t[q]] = 1\n            else:\n                d[t[q]] += 1\n            q += k\n        l = list(d.values())\n        s = sum(l)\n        mx = max(l)\n        ans += s - mx\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    x = {i: defaultdict(int) for i in range(k)}\n    for i in range(n):\n        x[i % k][a[i]] += 1\n    ans = 0\n    for i in x.values():\n        ans += sum(i.values()) - max(i.values())\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        tem = 0\n        mod = 0\n        dit = defaultdict(int)\n        for j in range(i, n, k):\n            dit[a[j]] += 1\n            tem = max(tem, dit[a[j]])\n            mod += 1\n        ans += mod - tem\n    print(ans)", "import sys\nt = int(input())\nmod = 10 ** 9 + 7\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    res = 0\n    for i in range(k):\n        h = {}\n        cnt = 1\n        if l[i] in h:\n            h[l[i]] += 1\n        else:\n            h[l[i]] = 1\n        j = i + k\n        while j < n:\n            if l[j] in h:\n                h[l[j]] += 1\n            else:\n                h[l[j]] = 1\n            cnt += 1\n            j += k\n        ma = 0\n        for i in h:\n            ma = max(ma, h[i])\n        res += cnt - ma\n    print(res)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    arr = list(map(int, input().strip().split()))\n    changes = 0\n    for i in range(k):\n        mx = 0\n        cnt = 0\n        ddict = defaultdict(int)\n        for j in range(i, n, k):\n            ddict[arr[j]] += 1\n            mx = max(mx, ddict[arr[j]])\n            cnt += 1\n        changes += cnt - mx\n    print(changes)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = 0\n    for i in range(k):\n        p = {}\n        c = 0\n        for j in range(i, n, k):\n            if l[j] not in p:\n                p[l[j]] = 1\n            else:\n                p[l[j]] += 1\n            c = max(c, p[l[j]])\n        s += c\n    print(n - s)", "def lin():\n    return list(map(int, input().strip().split()))\ntest = int(input().strip())\nfor _ in range(test):\n    (n, k) = lin()\n    arr = lin()\n    common_grps = [[] for i in range(k)]\n    for i in range(n):\n        common_grps[i % k].append(arr[i])\n    ans = 0\n    for row in common_grps:\n        count = {}\n        for item in row:\n            if not count.get(item):\n                count[item] = 0\n            count[item] += 1\n        maxi = 0\n        for (val, val_count) in count.items():\n            maxi = max(maxi, val_count)\n        ans += len(row) - maxi\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dp = [0 for i in range(len(arr))]\n    ans = 0\n    for i in range(k):\n        mapp = {}\n        count = 0\n        for j in range(i, n, k):\n            if arr[j] not in mapp:\n                mapp[arr[j]] = 1\n            else:\n                mapp[arr[j]] += 1\n            m = int(mapp[arr[j]])\n            count = max(count, m)\n        ans += count\n    print(n - ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        temp = {}\n        count = 1\n        if arr[i] in temp:\n            temp[arr[i]] += 1\n        else:\n            temp[arr[i]] = 1\n        j = i + k\n        while j < n:\n            if arr[j] in temp:\n                temp[arr[j]] += 1\n            else:\n                temp[arr[j]] = 1\n            count += 1\n            j += k\n        max_ = 0\n        for i in temp:\n            max_ = max(max_, temp[i])\n        ans += count - max_\n    print(ans)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        temp = {}\n        count = 1\n        if arr[i] in temp:\n            temp[arr[i]] += 1\n        else:\n            temp[arr[i]] = 1\n        j = i + k\n        while j < n:\n            if arr[j] in temp:\n                temp[arr[j]] += 1\n            else:\n                temp[arr[j]] = 1\n            count += 1\n            j += k\n        max_ = 0\n        for i in temp:\n            max_ = max(max_, temp[i])\n        ans += count - max_\n    print(ans)", "from collections import Counter\nimport math\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if k >= n:\n        print(0)\n        continue\n    ans = 0\n    for i in range(k):\n        idx = i\n        l = []\n        while idx < n:\n            l.append(arr[idx])\n            idx = idx + k\n        c = Counter(l)\n        max_count = -1\n        for (item, count) in c.items():\n            if count > max_count:\n                max_count = count\n                maxi = item\n        m = 0\n        for i in range(len(l)):\n            if l[i] != maxi:\n                m = m + 1\n        ans = ans + m\n    print(ans)", "import statistics\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (N, K) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    sum = 0\n    l = [[] for i in range(K)]\n    for i in range(len(lst)):\n        m = (i + 1) % K\n        l[m].append(lst[i])\n    for i in range(K):\n        if len(l[i]) <= 1:\n            continue\n        res = max(set(l[i]), key=l[i].count)\n        sum = sum + len(l[i]) - l[i].count(res)\n    print(sum)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    freq = [dict() for i in range(k)]\n    for i in range(n):\n        if arr[i] not in freq[i % k]:\n            freq[i % k][arr[i]] = 1\n        else:\n            freq[i % k][arr[i]] += 1\n    ans = 0\n    for i in range(k):\n        total = 0\n        maxx = -1\n        for (a, b) in freq[i].items():\n            total += b\n            maxx = max(maxx, b)\n        ans += total - maxx\n    print(ans)", "def printModifs(l, N, K):\n    modif = 0\n    if K >= N:\n        print(modif)\n    else:\n        for i in range(0, K):\n            d = {}\n            max = [l[i], 1]\n            while i < N:\n                if l[i] not in d:\n                    d[l[i]] = 1\n                else:\n                    d[l[i]] += 1\n                    if d[l[i]] > max[1]:\n                        max = [l[i], d[l[i]]]\n                i += K\n            for x in d:\n                if x != max[0]:\n                    modif += d[x]\n        print(modif)\nnt = int(input())\nfor i in range(0, nt):\n    j = list(map(int, input().strip().split(' ')))\n    N = j[0]\n    K = j[1]\n    l = list(map(int, input().strip().split(' ')))\n    printModifs(l, N, K)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for j in range(0, k):\n        freq = {}\n        m = 1\n        for l in range(j, n, k):\n            if a[l] not in freq:\n                freq[a[l]] = 1\n            else:\n                freq[a[l]] += 1\n                if freq[a[l]] > m:\n                    m = freq[a[l]]\n        ans += n // k + (1 if n % k >= j + 1 else 0) - m\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    c = 0\n    for i in range(k):\n        l1 = l[i:n:k]\n        d = {}\n        for i in l1:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        c += len(l1) - max(d.values())\n    print(c)", "T = int(input())\nfor i in range(T):\n    a = [int(s) for s in input().split()]\n    (N, K) = (a[0], a[1])\n    arr = [int(s) for s in input().split()]\n    ans = 0\n    for j in range(K):\n        cur = j\n        d = {}\n        d[arr[cur]] = 0\n        while cur < N:\n            if arr[cur] in d.keys():\n                d[arr[cur]] += 1\n            else:\n                d[arr[cur]] = 1\n            cur += K\n        maxi = max(d.values())\n        ans += sum(list(d.values())) - maxi\n    print(ans)", "T = int(input())\nfor i in range(T):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    freq = [dict() for i in range(k)]\n    for i in range(n):\n        if arr[i] not in freq[i % k]:\n            freq[i % k][arr[i]] = 1\n        else:\n            freq[i % k][arr[i]] += 1\n    ans = 0\n    for i in range(k):\n        total = 0\n        maxx = -1\n        for (a, b) in freq[i].items():\n            total += b\n            maxx = max(maxx, b)\n        ans += total - maxx\n    print(ans)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    freq = [dict() for i in range(k)]\n    for i in range(n):\n        if arr[i] not in freq[i % k]:\n            freq[i % k][arr[i]] = 1\n        else:\n            freq[i % k][arr[i]] += 1\n    ans = 0\n    for i in range(k):\n        total = 0\n        maxx = -1\n        for (a, b) in freq[i].items():\n            total += b\n            maxx = max(maxx, b)\n        ans += total - maxx\n    print(ans)", "from collections import defaultdict\nt = int(input())\nfor i in range(t):\n    (n, k) = [int(j) for j in input().split()]\n    ar = [int(j) for j in input().split()]\n    c = 0\n    if n <= k:\n        pass\n    else:\n        st = 0\n        while st < k:\n            dt = defaultdict(lambda : 0)\n            cnt = 0\n            for idx in range(st, n, k):\n                dt[ar[idx]] += 1\n                cnt += 1\n            c += cnt - dt[max(dt, key=lambda x: dt[x])]\n            st += 1\n    print(c)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        c = 0\n        has = dict()\n        for j in range(i, len(a), k):\n            if a[j] not in has:\n                has[a[j]] = 1\n            else:\n                has[a[j]] += 1\n            c = max(c, has[a[j]])\n        ans += c\n    print(n - ans)", "try:\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        arr = list(map(int, input().split()))\n        table = {}\n        for i in range(k):\n            table[i % k] = {}\n            j = i\n            while j < n:\n                if arr[j] in table[i % k].keys():\n                    table[i % k][arr[j]] += 1\n                else:\n                    table[i % k][arr[j]] = 1\n                j += k\n        ans = 0\n        for i in range(k):\n            total = 0\n            maxx = -1\n            for (num, cnt) in table[i].items():\n                total += cnt\n                maxx = max(maxx, cnt)\n            ans += total - maxx\n        print(ans)\nexcept:\n    pass", "T = int(input())\nfor testcases in range(T):\n    [N, K] = [int(x) for x in input().split()]\n    A = [-1]\n    A.extend([int(x) for x in input().split()])\n    ret = 0\n    for i in range(1, K + 1):\n        j = i\n        D = dict()\n        ctr = maxx = 0\n        while j <= N:\n            D[A[j]] = D.get(A[j], 0) + 1\n            ctr += 1\n            maxx = max(maxx, D[A[j]])\n            j += K\n        ret += ctr - maxx\n    print(ret)", "from collections import Counter\nt = int(input())\nfor r in range(t):\n    (n, k) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    s = len(set(l))\n    c = 0\n    j = 0\n    while j < k:\n        q = []\n        for i in range(j, n, k):\n            q.append(l[i])\n        z = Counter(q)\n        c += len(q) - max(z.values())\n        j += 1\n    print(c)", "from sys import stdin, stdout\ninput = stdin.readline\n\ndef im():\n    return map(int, input().split())\n\ndef ii():\n    return int(input())\n\ndef il():\n    return list(map(int, input().split()))\n\ndef ins():\n    return input()[:-1]\nfor _ in range(ii()):\n    (n, k) = im()\n    lis = il()\n    count = 0\n    for i in range(k):\n        s = []\n        j = i\n        while j < n:\n            s.append(lis[j])\n            j += k\n        mx = 0\n        for i in s:\n            mx = max(mx, s.count(i))\n        count += len(s) - mx\n    print(count)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    count = 0\n    for i in range(0, k):\n        list1 = []\n        dict1 = {}\n        while i <= n - 1:\n            list1.append(arr[i])\n            i += k\n        a = set(list1)\n        for qq in a:\n            dict1[list1.count(qq)] = qq\n        count += len(list1) - max(dict1)\n    print(count)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        d = {}\n        maxCount = 0\n        c = 0\n        for j in range(i, n, k):\n            try:\n                d[a[j]] += 1\n            except:\n                d[a[j]] = 1\n            maxCount = max(maxCount, d[a[j]])\n            c += 1\n        ans += c - maxCount\n    print(ans)", "from sys import stdin, stdout\n\ndef find(dic):\n    li = sorted(dic.values())\n    return sum(li[0:-1])\n\ndef eva(arr, n, k):\n    count = 0\n    j = 0\n    while j < k and k < n:\n        i = j\n        dic = {}\n        while i < n:\n            if arr[i] in dic:\n                dic[arr[i]] += 1\n            else:\n                dic[arr[i]] = 1\n            i += k\n        else:\n            count += find(dic)\n            j += 1\n    print(count)\nfor _ in range(int(stdin.readline())):\n    (n, k) = map(int, stdin.readline().split())\n    arr = stdin.readline().split()\n    eva(arr, n, k)", "for _ in range(int(input())):\n    l = input().split()\n    (n, k) = (int(l[0]), int(l[1]))\n    arr = [int(i) for i in input().split()]\n    ans = 0\n    if k == n:\n        print(0)\n        continue\n    for i in range(k):\n        d = {}\n        for j in range(i, n, k):\n            d[arr[j]] = d.get(arr[j], 0) + 1\n        sums = sum(d.values())\n        maxs = max(d.values())\n        ans += sums - maxs\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n == k:\n        print(0)\n        continue\n    ans = 0\n    for i in range(k):\n        dic = {}\n        count = 0\n        while i < n:\n            count += 1\n            if a[i] in dic:\n                dic[a[i]] += 1\n            else:\n                dic[a[i]] = 1\n            i += k\n        ans += count - max(dic.values())\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    count = [{} for i in range(k)]\n    for i in range(len(arr)):\n        if arr[i] in count[i % k]:\n            count[i % k][arr[i]] += 1\n        else:\n            count[i % k][arr[i]] = 1\n    total = 0\n    for i in range(k):\n        t = len(count[i])\n        maxi = 0\n        sumi = 0\n        for key in count[i]:\n            sumi += count[i][key]\n            maxi = max(maxi, count[i][key])\n        total += sumi - maxi\n    print(total)", "import statistics\nT = int(input())\nfor i in range(T):\n    (N, K) = input().split()\n    N = int(N)\n    K = int(K)\n    A = list(map(int, input().split()))\n    ffans = 0\n    L = [[] for i in range(K)]\n    for i in range(N):\n        L[i % K].append(A[i])\n    for i in L:\n        b = len(i)\n        D = {}\n        for j in i:\n            if j not in D:\n                D[j] = 1\n            else:\n                D[j] += 1\n        c = max(D.values())\n        ffans += b - c\n    print(ffans)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    c = list(map(int, input().split()))\n    count = 0\n    for j in range(k):\n        dict = {}\n        d_key = 0\n        for i in range(j, n, k):\n            s = str(c[i])\n            if s in dict.keys():\n                dict[s] += 1\n            else:\n                d_key += 1\n                dict[s] = 1\n        count += sum(dict.values()) - max(dict.values())\n    if n == k:\n        count = 0\n    print(count)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = [int(i) for i in input().split()]\n    ans = 0\n    for i in range(k):\n        total = max_val = mm = 0\n        d = {}\n        for j in range(i, n, k):\n            if x[j] not in d:\n                d[x[j]] = 1\n            else:\n                d[x[j]] += 1\n        for key in d.keys():\n            total += d[key]\n            max_val = max(max_val, d[key])\n        mm = total - max_val\n        ans += mm\n    print(ans)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = [int(i) for i in input().split()]\n    ans = 0\n    for i in range(k):\n        total = max_val = mm = 0\n        d = {}\n        for j in range(i, n, k):\n            if x[j] not in d:\n                d[x[j]] = 1\n            else:\n                d[x[j]] += 1\n        for key in d.keys():\n            total += d[key]\n            max_val = max(max_val, d[key])\n        mm = total - max_val\n        ans += mm\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        dt = dict()\n        for j in range(i, n, k):\n            if l[j] not in dt:\n                dt[l[j]] = 1\n            else:\n                dt[l[j]] += 1\n        mx = max(list(dt.values()))\n        sm = sum(list(dt.values()))\n        ans += sm - mx\n    print(ans)", "from collections import Counter\n\ndef subarray(l, k):\n    count = 0\n    if len(l) == k:\n        return 0\n    d = {}\n    for i in range(k):\n        d[i] = []\n    for i in range(len(l)):\n        d[i % k].append(l[i])\n    for i in d:\n        c = Counter(d[i])\n        max_key = max(c, key=c.get)\n        count += len(d[i]) - c[max_key]\n    return count\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    print(subarray(l, k))", "from math import *\nfrom collections import defaultdict\nR = lambda : list(map(int, input().split()))\nMOD = 1000000007\nfor _ in range(int(input())):\n    (n, k) = R()\n    a = R()\n    d = defaultdict(lambda : defaultdict(lambda : 0))\n    for i in range(n):\n        m = i % k\n        d[m][a[i]] += 1\n    ans = 0\n    for (k, v) in d.items():\n        (sm, mx) = (0, 0)\n        for (x, y) in v.items():\n            sm += v[x]\n            mx = max(mx, v[x])\n        ans += sm - mx\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        d = {}\n        c = 0\n        for j in range(i, n, k):\n            c += 1\n            if l[j] not in d.keys():\n                d[l[j]] = 1\n            else:\n                d[l[j]] += 1\n        x = max(d.values())\n        ans += c - x\n    print(ans)", "from itertools import combinations\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = 0\n    for j in range(k):\n        w = {}\n        p = j\n        while p < n:\n            if a[p] not in w:\n                w[a[p]] = 1\n            else:\n                w[a[p]] += 1\n            p += k\n        s = list(w.values())\n        r = sum(s)\n        d = max(s)\n        c = c + r - d\n    print(c)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    list1 = list(map(int, input().split()))\n    b = 0\n    for i in range(k):\n        c = 0\n        freq = {}\n        for j in range(i, n, k):\n            c = c + 1\n            m = list1[j]\n            if m in freq:\n                freq[m] += 1\n            else:\n                freq[m] = 1\n        a = max(freq, key=freq.get)\n        b = b + (c - freq.get(a))\n    print(b)", "from collections import Counter\n\ndef sol(a, n, k):\n    (d, change) = ({i: a[i::k] for i in range(k)}, 0)\n    for i in range(k):\n        change += len(d[i]) - Counter(d[i]).most_common()[0][1]\n    return change\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(sol(a, n, k))", "from collections import defaultdict, Counter\n\ndef sol(a, n, k):\n    (d, change) = ({i: a[i::k] for i in range(k)}, 0)\n    for i in range(k):\n        t = d[i]\n        C = Counter(t).most_common()[0]\n        change += len(t) - C[1]\n    return change\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(sol(a, n, k))", "from collections import defaultdict, Counter\n\ndef sol(a, n, k):\n    (d, change) = (defaultdict(list), 0)\n    for i in range(n):\n        d[i % k].append(a[i])\n    for i in range(k):\n        t = d[i]\n        C = Counter(t).most_common()[0]\n        change += len(t) - C[1]\n    return change\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(sol(a, n, k))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    coun = 0\n    l = []\n    for u in range(k):\n        l.append([])\n    for i in range(n):\n        l[i % k].append(a[i])\n    for q in range(k):\n        res = max(set(l[q]), key=l[q].count)\n        b = l[q].count(res)\n        coun += len(l[q]) - b\n    print(coun)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    count = 0\n    for i in range(k):\n        j = 0\n        frequency = {}\n        total = 0\n        while i + j * k < n:\n            frequency[l[i + j * k]] = frequency.get(l[i + j * k], 0) + 1\n            total = total + 1\n            j += 1\n        count += total - max(list(frequency.values()))\n    print(count)", "from sys import stdin, stdout\n\ndef csubs(n, k, arr):\n    d = dict()\n    for i in range(n):\n        d[i % k] = {}\n    for i in range(n):\n        curr = arr[i]\n        d[i % k][curr] = d[i % k].get(curr, 0) + 1\n    ans = 0\n    for i in range(k):\n        (total, m) = (0, -1)\n        for j in d[i]:\n            total += d[i][j]\n            m = max(d[i][j], m)\n        ans += total - m\n    return ans\nt = int(stdin.readline().strip())\n\ndef takeInput():\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    return arr\nfor i in range(t):\n    arr = takeInput()\n    (n, k) = (arr[0], arr[1])\n    arr = takeInput()\n    print(csubs(n, k, arr))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    i = 0\n    while i < k:\n        d = dict()\n        j = i\n        while j < n:\n            d[a[j]] = 0\n            j += k\n        j = i\n        maxx = 0\n        while j < n:\n            d[a[j]] += 1\n            if maxx < d[a[j]]:\n                maxx = d[a[j]]\n            j += k\n        tot = (n - i - 1) // k + 1\n        ans += tot - maxx\n        i += 1\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        freq = {}\n        total = 0\n        for j in range(i, n, k):\n            freq[a[j]] = freq.get(a[j], 0) + 1\n            total = total + 1\n        max_freq = max(freq.values())\n        ans = ans + (total - max_freq)\n    print(ans)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    ar = [int(i) for i in input().split()]\n    d = [[] for i in range(k)]\n    for i in range(n):\n        d[i % k].append(ar[i])\n    ans = 0\n    for i in range(k):\n        (maxi, arr) = (0, d[i])\n        temp = {}\n        for j in arr:\n            if j in temp:\n                temp[j] += 1\n            else:\n                temp[j] = 1\n            maxi = max(maxi, temp[j])\n        ans += len(arr) - maxi\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        freq = {}\n        total = 0\n        max_freq = 0\n        for j in range(i, n, k):\n            freq[a[j]] = freq.get(a[j], 0) + 1\n            total = total + 1\n            max_freq = max(max_freq, freq[a[j]])\n        ans = ans + (total - max_freq)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        cnt = 1\n        dic = {arr[i]: 1}\n        for j in range(i + k, n, k):\n            if arr[j] in dic:\n                dic[arr[j]] += 1\n            else:\n                dic[arr[j]] = 1\n            cnt += 1\n        f = max(dic.values())\n        ans += cnt - f\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        cnt = 1\n        dic = {arr[i]: 1}\n        for j in range(i + k, n, k):\n            if arr[j] in dic:\n                dic[arr[j]] += 1\n            else:\n                dic[arr[j]] = 1\n            cnt += 1\n        f = max(dic.values())\n        ans += cnt - f\n    print(ans)", "def find(start, arr):\n    d = {}\n    for i in range(start, n, k):\n        if arr[i] in d.keys():\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n    return d\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    res = 0\n    for i in range(k):\n        dic = find(i, arr)\n        res += sum(dic.values()) - max(dic.values())\n    print(res)", "for t in range(int(input())):\n    (n, k) = tuple(map(int, input().strip().split()))\n    a = tuple(map(int, input().strip().split()))\n    s = [[] for i in range(k)]\n    for i in range(n):\n        s[i % k].append(a[i])\n    ans = 0\n    for sa in s:\n        d = dict()\n        for v in sa:\n            if v not in d:\n                d[v] = 0\n            d[v] += 1\n        f = 0\n        for i in d:\n            f = max(f, d[i])\n        ans += len(sa) - f\n    print(ans)", "t = int(input())\nwhile t:\n    ans = 0\n    (n, k) = [int(x) for x in input().split()]\n    d = {}\n    l = [int(x) for x in input().split()]\n    for i in range(n):\n        if i % k in d:\n            d[i % k].append(l[i])\n        else:\n            d[i % k] = [l[i]]\n    for x in d.keys():\n        maxx = 0\n        for i in range(len(d[x])):\n            p = d[x].count(d[x][i])\n            maxx = max(p, maxx)\n        ans += len(d[x]) - maxx\n    print(ans)\n    t = t - 1", "def csubs(n, k, arr):\n    ans = 0\n    for i in range(0, k):\n        d = {}\n        c = 0\n        for j in range(i, n, k):\n            if arr[j] not in d:\n                d[arr[j]] = 1\n            else:\n                d[arr[j]] += 1\n            c += 1\n        m = max(d.values())\n        ans += c - m\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    a = list(map(int, input().split()))\n    n = a[0]\n    k = a[1]\n    arr = list(map(int, input().split()))\n    csubs(n, k, arr)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        j = i\n        h = {}\n        c = 0\n        while j < n:\n            try:\n                h[l[j]] += 1\n            except:\n                h[l[j]] = 1\n            c += 1\n            j += k\n        m = 0\n        for i in h.values():\n            if i > m:\n                m = i\n        ans += c - m\n    print(ans)", "t = int(input())\nfor test in range(t):\n    (n, k) = list(map(int, input().split()))\n    num = list(map(int, input().split()))\n    maxN = max(num)\n    l = [{} for i in range(k)]\n    for i in range(n):\n        if l[i % k].get(num[i]) is None:\n            l[i % k][num[i]] = 1\n        else:\n            l[i % k][num[i]] += 1\n    minI = 0\n    for i in l:\n        val = i.values()\n        maxC = max(val)\n        total = sum(val)\n        minI += total - maxC\n    print(minI)", "from collections import defaultdict, Counter\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    d = defaultdict(list)\n    ans = 0\n    for j in range(n):\n        d[j % k].append(arr[j])\n    for j in range(k):\n        ans += len(d[j]) - max(Counter(d[j]).values())\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        tmp = []\n        j = i\n        while j < n:\n            tmp.append(l[j])\n            j += k\n        maxi = 0\n        for i in set(tmp):\n            maxi = max(maxi, tmp.count(i))\n        ans += len(tmp) - maxi\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        tmp = []\n        j = i\n        while j < n:\n            tmp.append(l[j])\n            j += k\n        maxi = 0\n        for i in set(tmp):\n            maxi = max(maxi, tmp.count(i))\n        ans += len(tmp) - maxi\n    print(ans)", "def modular_exponentiation(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\ntry:\n    t = int(input())\n    p = 10 ** 9 + 7\n    while t:\n        t -= 1\n        (n, k) = map(int, input().split())\n        arr = list(map(int, input().split()))\n        cnt = 0\n        for i in range(k):\n            dic = {}\n            if arr[i] in dic:\n                dic[arr[i]] += 1\n            else:\n                dic[arr[i]] = 1\n            j = i + k\n            cnt += 1\n            a = arr[i]\n            a_freq = dic[arr[i]]\n            while j < n:\n                if arr[j] in dic:\n                    dic[arr[j]] += 1\n                    cnt += 1\n                else:\n                    dic[arr[j]] = 1\n                    cnt += 1\n                if a_freq < dic[arr[j]]:\n                    a = arr[j]\n                    a_freq = dic[arr[j]]\n                j += k\n            cnt -= a_freq\n        print(cnt)\nexcept:\n    pass", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    lst = [[] for j in range(k)]\n    for j in range(n):\n        lst[j % k].append(arr[j])\n    ans = 0\n    for j in range(k):\n        ans += len(lst[j]) - lst[j].count(max(set(lst[j]), key=lst[j].count))\n    print(ans)", "from collections import defaultdict\nT = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n == k:\n        print(0)\n        continue\n    ans = 0\n    for i in range(k):\n        d = defaultdict(int)\n        count = 0\n        for j in range(i, n, k):\n            count += 1\n            d[a[j]] += 1\n        ans += count - max(d.values())\n    print(ans)", "from collections import Counter\ntry:\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        l = list(map(int, input().split()))\n        c = 0\n        for x in range(k):\n            l1 = []\n            for y in range(x, n, k):\n                l1.append(l[y])\n            res = Counter(l1).most_common(1)[0][0]\n            c += len(l1) - l1.count(res)\n        print(c)\nexcept:\n    pass", "t = int(input())\nfor q in range(t):\n    (n, k) = map(int, input().split())\n    a = tuple(map(int, input().split()))\n    if k == n:\n        print(0)\n    else:\n        dic = {}\n        cnt = 0\n        element = 0\n        maxi = 0\n        i = 0\n        while i < k:\n            j = i\n            dic = {}\n            element = 0\n            maxi = 0\n            while j < n:\n                if a[j] not in dic:\n                    dic[a[j]] = 1\n                else:\n                    dic[a[j]] += 1\n                if dic[a[j]] > maxi:\n                    maxi = dic[a[j]]\n                element += 1\n                j += k\n            cnt += element - maxi\n            i += 1\n        print(cnt)", "from collections import *\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    store = defaultdict(list)\n    for i in range(n):\n        store[i % k].append(arr[i])\n    ans = 0\n    for i in range(k):\n        ll = store[i]\n        ct = Counter(ll)\n        mc = ct.most_common(1)[0][1]\n        ans += len(ll) - mc\n    print(ans)", "import math\nfrom collections import deque, defaultdict\nT = int(input())\nfor _ in range(T):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    d = defaultdict(list)\n    for i in range(n):\n        d[i % k].append(a[i])\n    ans = 0\n    for i in range(k):\n        res = max(set(d[i]), key=d[i].count)\n        ans += len(d[i]) - d[i].count(res)\n    print(ans)", "def get_max_freq(arr):\n    max_freq = 0\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n        max_freq = max(max_freq, freq[num])\n    return max_freq\ntest_cases = int(input())\nfor test in range(test_cases):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    result = 0\n    for i in range(k):\n        sub_arr = arr[i::k]\n        max_freq = get_max_freq(sub_arr)\n        result += len(sub_arr) - max_freq\n    print(result)", "def calOperations(dic):\n    (Sum, Max) = (0, 0)\n    for (num, value) in dic.items():\n        if Max < value:\n            Max = value\n        Sum += value\n    return Sum - Max\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    opr = 0\n    for i in range(k):\n        dic = {}\n        for j in range(i, n, k):\n            if arr[j] not in dic:\n                dic[arr[j]] = 0\n            dic[arr[j]] += 1\n        opr += calOperations(dic)\n    print(opr)", "from collections import defaultdict\nT = int(input())\nfor t in range(T):\n    (N, K) = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n    counts = [defaultdict(int) for i in range(K)]\n    for i in range(N):\n        counts[i % K][A[i]] += 1\n    replacements = 0\n    for i in range(K):\n        max_count = -1\n        total = 0\n        for (key, value) in counts[i].items():\n            total += value\n            if value > max_count:\n                max_count = value\n        replacements += total - max_count\n    print(replacements)", "from collections import defaultdict\nT = int(input())\nfor t in range(T):\n    (N, K) = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n    counts = [defaultdict(int) for i in range(K)]\n    for i in range(N):\n        counts[i % K][A[i]] += 1\n    replacements = 0\n    for i in range(K):\n        max_count = -1\n        total = 0\n        for (key, value) in counts[i].items():\n            total += value\n            if value > max_count:\n                max_count = value\n        replacements += total - max_count\n    print(replacements)", "from itertools import groupby\nfrom collections import defaultdict, Counter\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if n == k:\n        print(0)\n        continue\n    ans = 0\n    d = defaultdict(list)\n    for i in range(k):\n        j = i\n        while j < n:\n            d[i].append(l[j])\n            j += k\n    for i in d:\n        f = defaultdict(int)\n        mx = 0\n        c = 0\n        for j in d[i]:\n            f[j] += 1\n            mx = max(mx, f[j])\n            c += 1\n        ans += c - mx\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    l = [{} for r in range(k)]\n    for j in range(n):\n        if arr[j] in l[j % k]:\n            l[j % k][arr[j]] += 1\n        else:\n            l[j % k][arr[j]] = 1\n    count = 0\n    for d in l:\n        count += sum(d.values()) - max(d.values())\n    print(count)", "t = int(input())\nfor i in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    A = [int(i) for i in input().split()]\n    s = 0\n    for i in range(k):\n        j = i + k\n        frq = {}\n        frq[A[i]] = 1\n        t = 1\n        while j < n:\n            frq[A[j]] = frq.get(A[j], 0) + 1\n            j += k\n            t += 1\n        l = max(frq.values())\n        s += t - l\n    print(s)", "def fun1(S):\n    R = list(set(S))\n    res = []\n    for i in range(0, len(R)):\n        y = S.count(R[i])\n        res.append(y)\n    x = max(res)\n    res.remove(x)\n    return sum(res)\n\ndef fun(A, K):\n    res = []\n    cnt = 0\n    for i in range(0, K):\n        S = []\n        j = i\n        while j < len(A):\n            S.append(A[j])\n            j += K\n        cnt += fun1(S)\n    return cnt\nT = int(input())\nfor i in range(0, T):\n    (N, K) = map(int, input().split())\n    A = [int(x) for x in input().split()]\n    print(fun(A, K))", "t = int(input())\nwhile t:\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    d = {}\n    changes = 0\n    for i in range(N):\n        if i % K in d.keys():\n            if A[i] in d[i % K].keys():\n                d[i % K][A[i]] += 1\n            else:\n                d[i % K][A[i]] = 1\n        else:\n            d[i % K] = {}\n            d[i % K][A[i]] = 1\n    d2 = {}\n    for key in d.keys():\n        maxoccur = 0\n        value = 0\n        for subkey in d[key].keys():\n            if maxoccur < d[key][subkey]:\n                maxoccur = d[key][subkey]\n                value = subkey\n        d2[key] = value\n    for i in range(N):\n        if A[i] != d2[i % K]:\n            changes += 1\n    print(changes)\n    t -= 1", "import sys\nsys.setrecursionlimit(10 ** 5 + 1)\ninf = int(10 ** 20)\nmax_val = inf\nmin_val = -inf\nRW = lambda : sys.stdin.readline().strip()\nRI = lambda : int(RW())\nRMI = lambda : [int(x) for x in sys.stdin.readline().strip().split()]\nRWI = lambda : [x for x in sys.stdin.readline().strip().split()]\nfrom collections import defaultdict, Counter\nfor _ in range(RI()):\n    (N, K) = RMI()\n    vals = RMI()\n    if N <= K:\n        print(0)\n    else:\n        x = 0\n        for i in range(K):\n            curr = vals[i::K]\n            currc = Counter(curr)\n            x += len(curr) - currc[currc.most_common(1)[0][0]]\n        print(x)", "import sys\ninput = sys.stdin.readline\nimport math\nmod = 10 ** 9 + 7\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nfor _ in range(inp()):\n    (n, k) = invr()\n    l = inlt()\n    c = 0\n    s = 0\n    for i in range(k):\n        d = {}\n        o = 0\n        for j in range(i, n, k):\n            o += 1\n            if l[j] not in d:\n                d[l[j]] = 1\n            else:\n                d[l[j]] += 1\n        m = 0\n        for i in d:\n            if d[i] > m:\n                m = d[i]\n        c += o - m\n    print(c)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(k):\n        d = {}\n        max_so_far = 1\n        total = 0\n        for j in range(i, n, k):\n            total += 1\n            if arr[j] in d:\n                d[arr[j]] += 1\n                max_so_far = max(max_so_far, d[arr[j]])\n            else:\n                d[arr[j]] = 1\n        ans += total - max_so_far\n    print(ans)", "from collections import defaultdict\n\ndef minchange(arr, n, k):\n    if n == k:\n        return 0\n    ans = 0\n    for i in range(k):\n        mp = defaultdict(int)\n        count = 0\n        for j in range(i, n, k):\n            mp[arr[j]] += 1\n            count = max(count, mp[arr[j]])\n        ans += count\n    return n - ans\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    print(minchange(arr, n, k))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    nos = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        x = i % k\n        if x in d:\n            if nos[i] in d[x]:\n                d[x][nos[i]] += 1\n            else:\n                d[x][nos[i]] = 1\n        else:\n            d[x] = {}\n            d[x][nos[i]] = 1\n    for i in range(k):\n        x = -1\n        rep = -1\n        for candidate in d[i]:\n            if d[i][candidate] > x:\n                rep = candidate\n                x = d[i][candidate]\n        d[i] = rep\n    ans = 0\n    for i in range(n):\n        if nos[i] != d[i % k]:\n            ans += 1\n    print(ans)", "from collections import defaultdict\n\ndef minchange(arr, n, k):\n    ans = 0\n    for i in range(k):\n        mp = defaultdict(int)\n        count = 0\n        for j in range(i, n, k):\n            mp[arr[j]] += 1\n            count = max(count, mp[arr[j]])\n        ans += count\n    return n - ans\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    print(minchange(arr, n, k))"]