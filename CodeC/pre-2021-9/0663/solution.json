["for _ in range(int(input())):\n    (N, K, L) = list(map(int, input().split()))\n    L -= 1\n    digits = []\n    while L:\n        digits.append(int(L % K))\n        L //= K\n    digits = digits[::-1]\n    digits = [1] * (N - len(digits)) + [1 + i for i in digits]\n    print(*digits)", "for _ in range(int(input())):\n    (N, K, L) = list(map(int, input().split()))\n    L -= 1\n    digits = []\n    while L:\n        digits.append(int(L % K))\n        L //= K\n    digits = digits[::-1]\n    digits = [1] * (N - len(digits)) + [1 + i for i in digits]\n    print(*digits)", "def get_arr(l, k):\n    ans = []\n    while l > 0:\n        ans.append(l % k)\n        l = l // k\n    ans.reverse()\n    return [i + 1 for i in ans]\nfor _ in range(int(input())):\n    (n, k, l) = map(int, input().split())\n    if k == 1:\n        print(1)\n    else:\n        ans = get_arr(l - 1, k)\n        arr = [1] * (n - len(ans)) + ans\n        print(*arr)", "def get_arr(l, k):\n    ans = []\n    while l > 0:\n        ans.append(l % k)\n        l = l // k\n    ans.reverse()\n    return [i + 1 for i in ans]\nfor _ in range(int(input())):\n    (n, k, l) = map(int, input().split())\n    if k == 1:\n        print(1)\n    else:\n        ans = get_arr(l - 1, k)\n        arr = [1] * (n - len(ans)) + ans\n        print(*arr)", "def get_arr(l, k):\n    ans = []\n    while l > 0:\n        ans.append(l % k)\n        l = l // k\n    ans.reverse()\n    return [i + 1 for i in ans]\nfor _ in range(int(input())):\n    (n, k, l) = map(int, input().split())\n    if k == 1:\n        print(1)\n    else:\n        ans = get_arr(l - 1, k)\n        arr = [1] * (n - len(ans)) + ans\n        print(*arr)", "def get_arr(l, k):\n    ans = []\n    while l > 0:\n        ans.append(l % k)\n        l = l // k\n    ans.reverse()\n    return [i + 1 for i in ans]\n\ndef solve():\n    (n, k, l) = map(int, input().split())\n    if k == 1:\n        print(1)\n    else:\n        ans = get_arr(l - 1, k)\n        arr = [1] * (n - len(ans)) + ans\n        print(*arr)\nfor _ in range(int(input())):\n    solve()", "def getAnsw(l, k):\n    ans = []\n    while l > 0:\n        ans.append(l % k)\n        l = l // k\n    ans.reverse()\n    return [i + 1 for i in ans]\n\ndef solve():\n    (n, k, l) = map(int, input().split())\n    if k == 1:\n        print(1)\n    else:\n        ans = getAnsw(l - 1, k)\n        arr = [1] * (n - len(ans)) + ans\n        print(*arr)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    (n, k, l) = map(int, input().split())\n    l -= 1\n    f = [1 for i in range(n)]\n    i = n - 1\n    while l != 0:\n        f[i] += l % k\n        i -= 1\n        l //= k\n    for i in f:\n        print(i, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, k, l) = map(int, input().split())\n    l -= 1\n    f = [1 for i in range(n)]\n    i = n - 1\n    while l != 0:\n        f[i] += l % k\n        i -= 1\n        l //= k\n    for i in f:\n        print(i, end=' ')\n    print()", "import sys\nsys.setrecursionlimit(10 ** 6)\nfor _ in range(int(input())):\n    (n, k, l) = [int(x) for x in input().split()]\n    l = l - 1\n    ans = []\n    while l:\n        ans.append(l % k)\n        l = l // k\n    while len(ans) != n:\n        ans.append(0)\n    ans = ans[::-1]\n    ans = [x + 1 for x in ans]\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 6)\nfor _ in range(int(input())):\n    (n, k, l) = [int(x) for x in input().split()]\n    l = l - 1\n    ans = []\n    while l:\n        ans.append(l % k)\n        l = l // k\n    while len(ans) != n:\n        ans.append(0)\n    ans = ans[::-1]\n    ans = [x + 1 for x in ans]\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 6)\nfor _ in range(int(input())):\n    (n, k, l) = [int(x) for x in input().split()]\n    l = l - 1\n    ans = []\n    while l:\n        ans.append(l % k)\n        l = l // k\n    while len(ans) != n:\n        ans.append(0)\n    ans = ans[::-1]\n    ans = [x + 1 for x in ans]\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 6)\nfor _ in range(int(input())):\n    (n, k, l) = [int(x) for x in input().split()]\n    l = l - 1\n    ans = []\n    while l:\n        ans.append(l % k)\n        l = l // k\n    while len(ans) != n:\n        ans.append(0)\n    ans = ans[::-1]\n    ans = [x + 1 for x in ans]\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 6)\nfor _ in range(int(input())):\n    (n, k, l) = [int(x) for x in input().split()]\n    l = l - 1\n    ans = []\n    while l:\n        ans.append(l % k)\n        l = l // k\n    while len(ans) != n:\n        ans.append(0)\n    ans = ans[::-1]\n    ans = [x + 1 for x in ans]\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 6)\nfor _ in range(int(input())):\n    (n, k, l) = [int(x) for x in input().split()]\n    l = l - 1\n    ans = []\n    while l:\n        ans.append(l % k)\n        l = l // k\n    while len(ans) != n:\n        ans.append(0)\n    ans = ans[::-1]\n    ans = [x + 1 for x in ans]\n    print(*ans)", "from math import log, ceil\nt = int(input())\nfor _ in range(t):\n    (n, k, l) = map(int, input().split())\n    p = int(log(l, k)) + 1\n    power = pow(k, p)\n    ans = [1] * n\n    x = n - p - 1\n    while power != 0:\n        ans[x] = ceil(l / power) if ceil(l / power) != 0 else k\n        l = l - l // power * power\n        power //= k\n        x += 1\n    print(*ans)", "from math import log, ceil\nt = int(input())\nfor _ in range(t):\n    (n, k, l) = map(int, input().split())\n    p = int(log(l, k)) + 1\n    power = pow(k, p)\n    ans = [1] * n\n    x = n - p - 1\n    while power != 0:\n        ans[x] = ceil(l / power) if ceil(l / power) != 0 else k\n        l = l - l // power * power\n        power //= k\n        x += 1\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 6)\nfor _ in range(int(input())):\n    (n, k, l) = [int(x) for x in input().split()]\n    l = l - 1\n    ans = []\n    while l:\n        ans.append(l % k)\n        l = l // k\n    while len(ans) != n:\n        ans.append(0)\n    ans = ans[::-1]\n    ans = [x + 1 for x in ans]\n    print(*ans)", "def li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\nfor tastcas in range(int(input())):\n    (n, k, l) = li()\n    l -= 1\n    ans = []\n    while l != 0:\n        ans.append((0, l % k))\n        l //= k\n    m = len(ans)\n    while m != n:\n        ans.append((0, 0))\n        m += 1\n    for i in range(n - 1, -1, -1):\n        print(ans[i][1] + 1, end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    (n, k, l) = map(int, input().split())\n    l -= 1\n    a = []\n    while l != 0:\n        a.insert(0, l % k)\n        l //= k\n    while len(a) != n:\n        a.insert(0, 0)\n    for j in a:\n        print(j + 1, end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    (n, k, l) = map(int, input().split())\n    l -= 1\n    a = []\n    while l != 0:\n        a.insert(0, l % k)\n        l //= k\n    while len(a) != n:\n        a.insert(0, 0)\n    for j in a:\n        print(j + 1, end=' ')\n    print()", "class Dish:\n\n    def __init__(self, number_of_ingredients, maximum_quantity):\n        self.n = number_of_ingredients\n        self.k = maximum_quantity\n\n    def cook_dish(self, l):\n        outp = list()\n        l -= 1\n        while l > 0:\n            next_digit = l % self.k\n            l = (l - next_digit) // self.k\n            outp.append(next_digit)\n        outp.extend([0] * (self.n - len(outp)))\n        return outp[::-1]\n\ndef solve(*args):\n    (n, k, l) = args\n    d = Dish(n, k)\n    return d.cook_dish(l)\n\ndef do_codechef():\n    for t in range(int(input())):\n        (n, k, l) = map(int, input().split(' '))\n        print(*[x + 1 for x in solve(n, k, l)])\ndo_codechef()\nexit()", "for _ in range(int(input())):\n    (n, k, l) = map(int, input().split())\n    l = l - 1\n    arr = []\n    while l != 0:\n        arr.insert(0, l % k)\n        l = l // k\n    while len(arr) != n:\n        arr.insert(0, 0)\n    for item in arr:\n        print(item + 1, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, k, l) = map(int, input().split())\n    l = l - 1\n    arr = []\n    while l != 0:\n        arr.insert(0, l % k)\n        l = l // k\n    while len(arr) != n:\n        arr.insert(0, 0)\n    for item in arr:\n        print(item + 1, end=' ')\n    print()", "def getAnsw(l, k):\n    answ = []\n    while l > 0:\n        answ.append(l % k)\n        l = l // k\n    answ.reverse()\n    return [i + 1 for i in answ]\nu = int(input())\nfor _ in range(u):\n    (n, k, l) = map(int, input().split())\n    if k == 1:\n        print(1)\n    else:\n        answ = getAnsw(l - 1, k)\n        arr = [1] * (n - len(answ)) + answ\n        print(*arr)", "def getAnsw(l, k):\n    answ = []\n    while l > 0:\n        answ.append(l % k)\n        l = l // k\n    answ.reverse()\n    return [i + 1 for i in answ]\nu = int(input())\nfor _ in range(u):\n    (n, k, l) = map(int, input().split())\n    if k == 1:\n        print(1)\n    else:\n        answ = getAnsw(l - 1, k)\n        arr = [1] * (n - len(answ)) + answ\n        print(*arr)", "def getAns(l, k):\n    ans = []\n    while l > 0:\n        ans.append(l % k)\n        l = l // k\n    ans.reverse()\n    return [i + 1 for i in ans]\nt = int(input())\nfor _ in range(t):\n    (n, k, l) = map(int, input().split())\n    if k == 1:\n        print(1)\n    else:\n        ans = getAns(l - 1, k)\n        arr = [1] * (n - len(ans)) + ans\n        print(*arr)", "def getAns(l, k):\n    ans = []\n    while l > 0:\n        ans.append(l % k)\n        l = l // k\n    ans.reverse()\n    return [i + 1 for i in ans]\nt = int(input())\nfor _ in range(t):\n    (n, k, l) = map(int, input().split())\n    if k == 1:\n        print(1)\n    else:\n        ans = getAns(l - 1, k)\n        arr = [1] * (n - len(ans)) + ans\n        print(*arr)", "t = int(input())\nfor i in range(t):\n    nkl = input().split(' ')\n    (n, k, l) = (int(nkl[0]), int(nkl[1]), int(nkl[2]))\n    pows = []\n    temp = k\n    for j in range(n - 1):\n        pows.append(temp)\n        temp *= k\n    pows.reverse()\n    ans = []\n    rank = 0\n    for j in range(n - 1):\n        for itr in range(1, k + 1):\n            if l <= rank + pows[j]:\n                ans.append(str(itr))\n                break\n            elif l > rank + pows[j]:\n                rank += pows[j]\n    for itr in range(1, k + 1):\n        if l == rank + itr:\n            ans.append(str(itr))\n            break\n    print(' '.join(ans))", "for _ in range(int(input())):\n    (n, k, l) = map(int, input().split())\n    ans = []\n    l -= 1\n    for i in range(n):\n        v = pow(k, n - 1 - i)\n        p = 0\n        while v * (p + 1) <= l:\n            p += 1\n        l -= v * p\n        ans.append(p + 1)\n    print(*ans)", "def str_base(number, base):\n    (d, m) = divmod(number, base)\n    if d > 0:\n        return str_base(d, base) + [m]\n    return [m]\nfor t in range(int(input())):\n    (n, k, l) = map(int, input().split())\n    cb = str_base(l - 1, k)\n    ans = [1] * n\n    for i in range(-1, -len(cb) - 1, -1):\n        ans[i] += cb[i]\n    print(' '.join(map(str, ans)))"]