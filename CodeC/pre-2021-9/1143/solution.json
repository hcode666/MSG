["from math import ceil, floor\nfor _ in range(int(input())):\n    (p, q, n) = list(map(int, input().split()))\n    r = floor(q * (n - 1) / (abs(p - q) * 2)) + 1\n    print(r)", "for _ in range(int(input())):\n    (p, q, n) = map(int, input().split())\n    print(int(0.5 * q * (n - 1) / abs(p - q)) + 1)", "from math import ceil, floor\nfor _ in range(int(input())):\n    (p, q, n) = list(map(int, input().split()))\n    r = floor(q * (n - 1) / (abs(p - q) * 2)) + 1\n    print(r)", "t = int(input())\nfor _ in range(t):\n    kn = list(map(int, input().split()))\n    p = kn[0]\n    q = kn[1]\n    n = kn[2]\n    ans = q * 12 * (n - 1) // (abs(q - p) * 24)\n    print(ans + 1)", "from math import gcd\n\nclass fraction:\n\n    def __init__(self, n, d=1):\n        if not (type(n) == int and type(d) == int):\n            raise ArithmeticError()\n        sign = 1 if n * d > 0 else -1\n        self.num = sign * abs(n)\n        self.den = abs(d)\n\n    def __add__(self, o):\n        return fraction(self.num * o.den + self.den * o.num, self.den * o.den)\n\n    def __neg__(self):\n        return fraction(-1 * self.num, self.den)\n\n    def __sub__(self, o):\n        return fraction(self.num * o.den - self.den * o.num, self.den * o.den)\n\n    def __mul__(self, o):\n        return fraction(self.num * o.num, self.den * o.den)\n\n    def __truediv__(self, o):\n        return fraction(self.num * o.den, self.den * o.num)\n\n    def __floordiv__(self, o):\n        f = self / o\n        return fraction(f.num // f.den)\n\n    def simplify(self):\n        g = gcd(self.num, self.den)\n        self.num /= g\n        self.den /= g\n\n    def abs(self):\n        return fraction(abs(self.num), self.den)\n\n    def value(self):\n        if self.den == 1:\n            return self.num\n        return self.num / self.den\n\n    def __str__(self):\n        return str(self.num) + '/' + str(self.den)\n\ndef main():\n    t = int(input())\n    while t > 0:\n        ONE = fraction(1)\n        ZERO = fraction(0)\n        t -= 1\n        (a, b, k) = [fraction(int(i)) for i in input().split()]\n        relSpd = (a / b - ONE).abs()\n        k -= ONE\n        timeForOneCycle = ONE / relSpd * fraction(12)\n        totTimeinHrs = timeForOneCycle * k\n        print((totTimeinHrs // fraction(24) + ONE).value())\nmain()", "for t in range(int(input())):\n    s = input().split()\n    p = int(s[0])\n    q = int(s[1])\n    n = int(s[2])\n    t = (n - 1) * q / 2\n    if p - q > 0:\n        t = t // (p - q)\n    else:\n        t = t * -1 // (p - q)\n    print(int(t + 1))", "from math import gcd\nfor _ in range(int(input())):\n    (p, q, n) = map(int, input().split())\n    ans = (n - 1) * 12 * q // (abs(p - q) * 24) + 1\n    print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    (p, q, n) = map(int, input().split())\n    n -= 1\n    val = n * q\n    val /= abs(p - q)\n    val /= 2\n    if val - math.floor(val) < 1e-06:\n        val += 1\n    print(math.ceil(val))", "import math\nt = int(input())\nfor i in range(t):\n    (p, q, n) = map(int, input().split())\n    n -= 1\n    val = n * q\n    val /= abs(p - q)\n    val /= 2\n    if val - math.floor(val) < 1e-06:\n        val += 1\n    print(math.ceil(val))", "from math import floor\nfrom fractions import Fraction as F\nt = int(input())\nfor case in range(t):\n    (p, q, N) = map(int, input().split())\n    speed = abs(1 - F(p, q))\n    time = F(1, 2) / speed * (N - 1)\n    print(floor(time + 1))", "import math\nt = int(input())\nfor i in range(t):\n    (p, q, n) = map(int, input().split())\n    n -= 1\n    val = n * q\n    val /= abs(p - q)\n    val /= 2\n    if val - math.floor(val) < 1e-06:\n        val += 1\n    print(math.ceil(val))", "import math\n_ = int(input())\nfor __ in range(_):\n    (p, q, n) = map(int, input().split())\n    n -= 1\n    val = n * q\n    val /= abs(p - q)\n    val /= 2\n    if val - math.floor(val) < 1e-06:\n        val += 1\n    print(math.ceil(val))", "import math\nt = int(input())\nfor tst in range(t):\n    (p, q, n) = map(int, input().split())\n    k = p / q\n    x = math.floor(abs(q * (12 * (n - 1)) / (q - p)) / 24 + 1)\n    print(x)", "from math import floor\nfrom fractions import Fraction as F\nt = int(input())\nfor case in range(t):\n    (p, q, N) = map(int, input().split())\n    speed = abs(1 - F(p, q))\n    time = F(1, 2) / speed * (N - 1)\n    print(floor(time + 1))", "t = int(input())\nwhile t:\n    (p, q, N) = map(int, input().split())\n    upp = q * 12 * (N - 1)\n    down = abs(q - p)\n    ans = upp // down // 24 + 1\n    print(ans)\n    t -= 1", "import math\nfor __ in range(int(input())):\n    (p, q, n) = map(int, input().split())\n    print(math.floor(abs(12 * (n - 1) * q / (q - p)) / 24) + 1)", "import math\n\ndef main():\n    for x in range(int(input())):\n        testcases()\n\ndef testcases():\n    (p, q, N) = [int(x) for x in input().split()]\n    k = N - 1\n    t = 12 * k * q / (q - p)\n    print(math.floor(abs(t) / 24) + 1)\nmain()"]