["left = [[0] * 1024 for _ in range(1024)]\nright = [[0] * 1024 for _ in range(1024)]\n\ndef solveCase(N, X, Y, a):\n    for i in range(N + 2):\n        left[0][i] = right[0][i] = 0\n    left[0][0] = 1\n    right[0][N] = (1 << Y + 1) - (1 << X)\n    max_mask = (1 << Y + 1) - 1\n    for missed in range(N // 2 + 1):\n        left[missed + 1][0] = 0\n        for i in range(N):\n            left[missed][i + 1] |= left[missed][i] << a[i] & max_mask\n            left[missed + 1][i + 1] = left[missed][i]\n        right[missed + 1][N] = 0\n        for i in range(N, 0, -1):\n            right[missed + 1][i - 1] = right[missed][i] >> a[i - 1]\n            right[missed][i - 1] |= right[missed][i]\n        if any((right[missed][i] & left[missed][i] for i in range(1, N + 1))):\n            return missed\n    return -1\nT = int(input())\nfor _ in range(T):\n    (N, X, Y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solveCase(N, X, Y, a))", "left = [[0] * 1024 for _ in range(1024)]\nright = [[0] * 1024 for _ in range(1024)]\n\ndef solveCase(N, X, Y, a):\n    for i in range(N + 2):\n        left[0][i] = right[0][i] = 0\n    left[0][0] = 1\n    right[0][N] = (1 << Y + 1) - (1 << X)\n    max_mask = (1 << Y + 1) - 1\n    for missed in range(N // 2 + 1):\n        left[missed + 1][0] = 0\n        for i in range(N):\n            left[missed][i + 1] |= left[missed][i] << a[i] & max_mask\n            left[missed + 1][i + 1] = left[missed][i]\n        right[missed + 1][N] = 0\n        for i in range(N, 0, -1):\n            right[missed + 1][i - 1] = right[missed][i] >> a[i - 1]\n            right[missed][i - 1] |= right[missed][i]\n        if any((right[missed][i] & left[missed][i] for i in range(1, N + 1))):\n            return missed\n    return -1\nT = int(input())\nfor _ in range(T):\n    (N, X, Y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solveCase(N, X, Y, a))", "left = [[0] * 1024 for _ in range(1024)]\nright = [[0] * 1024 for _ in range(1024)]\n\ndef solveCase(N, X, Y, a):\n    for i in range(N + 2):\n        left[0][i] = right[0][i] = 0\n    left[0][0] = 1\n    right[0][N] = (1 << Y + 1) - (1 << X)\n    max_mask = (1 << Y + 1) - 1\n    for missed in range(N // 2 + 1):\n        left[missed + 1][0] = 0\n        for i in range(N):\n            left[missed][i + 1] |= left[missed][i] << a[i] & max_mask\n            left[missed + 1][i + 1] = left[missed][i]\n        right[missed + 1][N] = 0\n        for i in range(N, 0, -1):\n            right[missed + 1][i - 1] = right[missed][i] >> a[i - 1]\n            right[missed][i - 1] |= right[missed][i]\n        if any((right[missed][i] & left[missed][i] for i in range(1, N + 1))):\n            return missed\n    return -1\nT = int(input())\nfor _ in range(T):\n    (N, X, Y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solveCase(N, X, Y, a))", "left = [[0] * 1024 for _ in range(1024)]\nright = [[0] * 1024 for _ in range(1024)]\n\ndef solveCase(N, X, Y, a):\n    for i in range(N + 2):\n        left[0][i] = right[0][i] = 0\n    left[0][0] = 1\n    right[0][N] = (1 << Y + 1) - (1 << X)\n    max_mask = (1 << Y + 1) - 1\n    for missed in range(N // 2 + 1):\n        left[missed + 1][0] = 0\n        for i in range(N):\n            left[missed][i + 1] |= left[missed][i] << a[i] & max_mask\n            left[missed + 1][i + 1] = left[missed][i]\n        right[missed + 1][N] = 0\n        for i in range(N, 0, -1):\n            right[missed + 1][i - 1] = right[missed][i] >> a[i - 1]\n            right[missed][i - 1] |= right[missed][i]\n        if any((right[missed][i] & left[missed][i] for i in range(1, N + 1))):\n            return missed\n    return -1\nT = int(input())\nfor _ in range(T):\n    (N, X, Y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solveCase(N, X, Y, a))", "left = [[0] * 1024 for _ in range(1024)]\nright = [[0] * 1024 for _ in range(1024)]\n\ndef solveCase(N, X, Y, a):\n    for i in range(N + 2):\n        left[0][i] = right[0][i] = 0\n    left[0][0] = 1\n    right[0][N] = (1 << Y + 1) - (1 << X)\n    max_mask = (1 << Y + 1) - 1\n    for missed in range(N // 2 + 1):\n        left[missed + 1][0] = 0\n        for i in range(N):\n            left[missed][i + 1] |= left[missed][i] << a[i] & max_mask\n            left[missed + 1][i + 1] = left[missed][i]\n        right[missed + 1][N] = 0\n        for i in range(N, 0, -1):\n            right[missed + 1][i - 1] = right[missed][i] >> a[i - 1]\n            right[missed][i - 1] |= right[missed][i]\n        if any((right[missed][i] & left[missed][i] for i in range(1, N + 1))):\n            return missed\n    return -1\nT = int(input())\nfor _ in range(T):\n    (N, X, Y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solveCase(N, X, Y, a))", "left = [[0] * 1024 for _ in range(1024)]\nright = [[0] * 1024 for _ in range(1024)]\n\ndef solveCase(N, X, Y, a):\n    for i in range(N + 2):\n        left[0][i] = right[0][i] = 0\n    left[0][0] = 1\n    right[0][N] = (2 << Y) - (1 << X)\n    max_mask = (2 << Y) - 1\n    for missed in range(N // 2 + 1):\n        left[missed + 1][0] = 0\n        for i in range(N):\n            left[missed][i + 1] |= left[missed][i] << a[i] & max_mask\n            left[missed + 1][i + 1] = left[missed][i]\n        right[missed + 1][N] = 0\n        for i in range(N, 0, -1):\n            right[missed + 1][i - 1] = right[missed][i] >> a[i - 1]\n            right[missed][i - 1] |= right[missed][i]\n        if any((right[missed][i] & left[missed][i] for i in range(1, N + 1))):\n            return missed\n    return -1\nT = int(input())\nfor _ in range(T):\n    (N, X, Y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solveCase(N, X, Y, a))", "def solveCase(N, X, Y, a):\n    (left_cur, left_next) = ([0] * (N + 1), [0] * (N + 1))\n    (right_cur, right_next) = ([0] * (N + 1), [0] * (N + 1))\n    left_cur[0] = 1\n    right_cur[N] = (2 << Y) - (1 << X)\n    max_mask = (2 << Y) - 1\n    for missed in range(N // 2 + 1):\n        for i in range(N):\n            left_cur[i + 1] |= left_cur[i] << a[i] & max_mask\n            left_next[i + 1] = left_cur[i]\n        for i in range(N, 0, -1):\n            right_next[i - 1] = right_cur[i] >> a[i - 1]\n            right_cur[i - 1] |= right_cur[i]\n        if any((right_cur[i] & left_cur[i] for i in range(1, N + 1))):\n            return missed\n        (left_cur, left_next) = (left_next, left_cur)\n        (right_cur, right_next) = (right_next, right_cur)\n    return -1\nT = int(input())\nfor _ in range(T):\n    (N, X, Y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solveCase(N, X, Y, a))"]