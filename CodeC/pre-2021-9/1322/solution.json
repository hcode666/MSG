["from collections import deque\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    q = deque([])\n    if n == k:\n        print(0)\n    else:\n        for i in range(k + 1):\n            while q and a[i] <= a[q[-1]]:\n                q.pop()\n            q.append(i)\n        for i in range(k + 1, n):\n            a[i] += a[q[0]]\n            while q and q[0] <= i - (k + 1):\n                q.popleft()\n            while q and a[i] <= a[q[-1]]:\n                q.pop()\n            q.append(i)\n        print(str(min(a[n - k - 1:n])))", "from collections import deque\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    q = deque([])\n    if n == k:\n        print(0)\n    else:\n        for i in range(k + 1):\n            while q and a[i] <= a[q[-1]]:\n                q.pop()\n            q.append(i)\n        for i in range(k + 1, n):\n            a[i] += a[q[0]]\n            while q and q[0] <= i - (k + 1):\n                q.popleft()\n            while q and a[i] <= a[q[-1]]:\n                q.pop()\n            q.append(i)\n        print(str(min(a[n - k - 1:n])))", "import sys\nfrom collections import deque\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    q = deque([])\n    if n == k:\n        print(0)\n    else:\n        for i in range(k + 1):\n            while q and a[i] <= a[q[-1]]:\n                q.pop()\n            q.append(i)\n        for i in range(k + 1, n):\n            a[i] += a[q[0]]\n            while q and q[0] <= i - (k + 1):\n                q.popleft()\n            while q and a[i] <= a[q[-1]]:\n                q.pop()\n            q.append(i)\n        print(str(min(a[n - k - 1:n])))", "import sys\nfrom collections import deque\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    q = deque([])\n    if n == k:\n        print(0)\n    else:\n        for i in range(k + 1):\n            while q and a[i] <= a[q[-1]]:\n                q.pop()\n            q.append(i)\n        for i in range(k + 1, n):\n            a[i] += a[q[0]]\n            while q and q[0] <= i - (k + 1):\n                q.popleft()\n            while q and a[i] <= a[q[-1]]:\n                q.pop()\n            q.append(i)\n        sys.stdout.write(str(min(a[n - k - 1:n])) + '\\n')", "from collections import deque\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if k >= n:\n        print('0')\n        continue\n    if k == 0:\n        print(sum(arr))\n        continue\n    dp = []\n    deq = deque([])\n    for i in range(k + 1):\n        dp.append(arr[i])\n        while deq and deq[-1][0] > dp[i]:\n            deq.pop()\n        deq.append([dp[i], i])\n    for i in range(k + 1, n):\n        if deq and deq[0][1] < i - k - 1:\n            deq.popleft()\n        if deq:\n            dp.append(arr[i] + deq[0][0])\n        else:\n            dp.append(arr[i])\n        while deq and deq[-1][0] > dp[i]:\n            deq.pop()\n        deq.append([dp[i], i])\n    print(min(dp[n - k - 1:]))", "def E():\n    from bisect import bisect, insort\n    from collections import deque\n    for _ in range(int(input())):\n        (n, k) = [int(x) for x in input().split()]\n        H = [int(x) for x in input().split()]\n        dq = deque()\n        dq.append([0, -1])\n        for i in range(n):\n            while len(dq) and dq[0][1] < i - k - 1:\n                dq.popleft()\n            ans = H[i] + dq[0][0] if len(dq) else 0\n            while len(dq) and dq[-1][0] >= ans:\n                dq.pop()\n            dq.append([ans, i])\n        while len(dq) and dq[0][1] < n - k - 1:\n            dq.popleft()\n        print(dq[0][0] if len(dq) else 0)\nE()", "import heapq\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    if k == n:\n        print(0)\n    else:\n        dp = [0] * n\n        heap = []\n        for i in range(k + 1):\n            dp[i] = h[i]\n            heapq.heappush(heap, (dp[i], i))\n        for i in range(k + 1, n):\n            mini = -1\n            while True:\n                (x, y) = heapq.heappop(heap)\n                if y >= i - k - 1:\n                    mini = x\n                    if y > i - k - 1:\n                        heapq.heappush(heap, (x, y))\n                    break\n            dp[i] = h[i] + mini\n            heapq.heappush(heap, (dp[i], i))\n        print(min(dp[-k - 1:]))", "from collections import deque\nfrom sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    if k == n:\n        print(0)\n    else:\n        dp = [0] * n\n        dq = deque()\n        for i in range(k + 1):\n            dp[i] = h[i]\n            while dq and dq[-1][0] > dp[i]:\n                dq.pop()\n            dq.append((dp[i], i))\n        for i in range(k + 1, n):\n            if dq and dq[0][1] < i - k - 1:\n                dq.popleft()\n            mini = dq[0][0]\n            dp[i] = h[i] + mini\n            while dq and dq[-1][0] > dp[i]:\n                dq.pop()\n            dq.append((dp[i], i))\n        print(min(dp[-k - 1:]))", "from collections import deque\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    if k == n:\n        print(0)\n    else:\n        dp = [0] * n\n        dq = deque()\n        for i in range(k + 1):\n            dp[i] = h[i]\n            while dq and dq[-1][0] > dp[i]:\n                dq.pop()\n            dq.append((dp[i], i))\n        for i in range(k + 1, n):\n            if dq and dq[0][1] < i - k - 1:\n                dq.popleft()\n            mini = dq[0][0]\n            dp[i] = h[i] + mini\n            while dq and dq[-1][0] > dp[i]:\n                dq.pop()\n            dq.append((dp[i], i))\n        print(min(dp[-k - 1:]))", "import collections\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    q = collections.deque([(0, -1)])\n    for (i, h) in enumerate(map(int, input().split())):\n        new = q[0][0] + h\n        if q[0][1] == i - (k + 1):\n            q.popleft()\n        while q and q[-1][0] > new:\n            q.pop()\n        q.append((new, i))\n    print(q[0][0])", "import sys\nfrom collections import deque\n\ndef read(lst=False):\n    line = sys.stdin.readline().rstrip()\n    if ' ' in line or lst:\n        return map(int, line.split())\n    return line\n\ndef solver():\n    if K >= N:\n        return 0\n    q = deque([0])\n    for i in range(1, N):\n        if i > K:\n            arr[i] += arr[q[0]]\n        if q[0] == i - K - 1:\n            q.popleft()\n        while q and arr[i] <= arr[q[-1]]:\n            q.pop()\n        q.append(i)\n    return min(arr[N - K - 1], arr[q[0]])\nT = int(read())\nfor t in range(T):\n    (N, K) = read()\n    arr = list(read(True))\n    print(solver())\nsys.exit()", "from collections import deque\nt = int(input())\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    effort = [int(x) for x in input().split()]\n    if n <= k:\n        print(0)\n        continue\n    minQueue = deque()\n    dp = []\n    for i in range(k + 1):\n        dp.append(effort[i])\n        while len(minQueue) > 0 and dp[minQueue[-1]] > dp[i]:\n            minQueue.pop()\n        minQueue.append(i)\n    for i in range(k + 1, n):\n        if len(minQueue) > 0 and minQueue[0] < i - (k + 1):\n            minQueue.popleft()\n        dp.append(dp[minQueue[0]] + effort[i])\n        while len(minQueue) > 0 and dp[minQueue[-1]] > dp[i]:\n            minQueue.pop()\n        minQueue.append(i)\n    print(min(dp[n - k - 1:n]))", "import sys\nfrom collections import deque\n\ndef read(lst=False):\n    line = sys.stdin.readline().rstrip()\n    if ' ' in line or lst:\n        return map(int, line.split())\n    return line\n\ndef solver():\n    if K >= N:\n        return 0\n    q = deque([0])\n    for i in range(1, N):\n        if i > K:\n            arr[i] += arr[q[0]]\n        if q[0] == i - K - 1:\n            q.popleft()\n        while q and arr[i] <= arr[q[-1]]:\n            q.pop()\n        q.append(i)\n    return min(arr[N - K - 1], arr[q[0]])\nT = int(read())\nfor t in range(T):\n    (N, K) = read()\n    arr = list(read(True))\n    print(solver())\nsys.exit()", "import heapq\n\ndef answer():\n    dp = [0] + [a[i] for i in range(n)]\n    m = []\n    done = [False] * (n + 1)\n    j = 0\n    for i in range(k + 1):\n        heapq.heappush(m, (dp[i], i))\n    for i in range(k + 1, n + 1):\n        x = heapq.heappop(m)\n        while done[x[1]]:\n            x = heapq.heappop(m)\n        dp[i] += x[0]\n        heapq.heappush(m, x)\n        heapq.heappush(m, (dp[i], i))\n        done[j] = True\n        j += 1\n    x = heapq.heappop(m)\n    while done[x[1]]:\n        x = heapq.heappop(m)\n    return x[0]\nfor T in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(answer())", "from collections import deque\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    h = list(map(int, input().split()))\n    dq = deque()\n    dp = [[0, 0] for i in range(n + 2)]\n    dq.append([0, -1])\n    for i in range(n):\n        while len(dq) and dq[0][1] < i - k - 1:\n            dq.popleft()\n        dp[i][0] = h[i]\n        if dq:\n            dp[i][0] += dq[0][0]\n        dp[i][1] = i\n        while len(dq) and dq[-1][0] >= dp[i][0]:\n            dq.pop()\n        dq.append(dp[i])\n    while len(dq) and dq[0][1] < n - k - 1:\n        dq.popleft()\n    if dq:\n        print(dq[0][0])\n    else:\n        print(0)", "from sys import stdin\ninput = stdin.readline\nimport heapq\n\ndef answer():\n    dp = [0]\n    for i in range(n):\n        dp.append(a[i])\n    m = []\n    for i in range(k + 1):\n        heapq.heappush(m, (dp[i], i))\n    done = [False] * (n + 1)\n    j = 0\n    for i in range(k + 1, n + 1):\n        x = heapq.heappop(m)\n        while done[x[1]]:\n            x = heapq.heappop(m)\n        dp[i] += x[0]\n        heapq.heappush(m, x)\n        heapq.heappush(m, (dp[i], i))\n        done[j] = True\n        j += 1\n    x = heapq.heappop(m)\n    while done[x[1]]:\n        x = heapq.heappop(m)\n    return x[0]\nfor T in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(answer())", "from sys import stdin\ninput = stdin.readline\nimport heapq\n\ndef answer():\n    dp = [0]\n    for i in range(n):\n        dp.append(a[i])\n    m = []\n    for i in range(k + 1):\n        heapq.heappush(m, (dp[i], i))\n    done = [False] * (n + 1)\n    j = 0\n    for i in range(k + 1, n + 1):\n        x = heapq.heappop(m)\n        while done[x[1]]:\n            x = heapq.heappop(m)\n        dp[i] += x[0]\n        heapq.heappush(m, x)\n        heapq.heappush(m, (dp[i], i))\n        done[j] = True\n        j += 1\n    x = heapq.heappop(m)\n    while done[x[1]]:\n        x = heapq.heappop(m)\n    return x[0]\nfor T in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(answer())", "from sys import stdin\nfrom collections import deque\ninput = stdin.readline\n\ndef func():\n    if n == k:\n        print(0)\n        return\n    dq = deque()\n    dp = [0 for x in range(n)]\n    for i in range(k + 1):\n        dp[i] = h[i]\n        while dq and dq[-1][0] > dp[i]:\n            dq.pop()\n        dq.append((dp[i], i))\n    for i in range(k + 1, n):\n        if dq and dq[0][1] < i - k - 1:\n            dq.popleft()\n        pref_min = dq[0][0]\n        dp[i] = h[i] + pref_min\n        while dq and dq[-1][0] > dp[i]:\n            dq.pop()\n        dq.append((dp[i], i))\n    print(min(dp[-k - 1:]))\nfor _ in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    h = list(map(int, input().split()))\n    func()", "import heapq\nn_testcase = int(input())\nfor testcase in range(n_testcase):\n    (n, k) = (int(x) for x in input().split())\n    homeworks = [int(x) for x in input().split()]\n    if k == n:\n        print(0)\n        continue\n    min_spent_times = homeworks[:k + 1]\n    heap = homeworks[:k + 1]\n    heapq.heapify(heap)\n    pop_heap = []\n    for (i, homework) in enumerate(homeworks[k + 1:], start=k + 1):\n        min_spent_time = heap[0] + homework\n        min_spent_times.append(min_spent_time)\n        heapq.heappush(heap, min_spent_time)\n        heapq.heappush(pop_heap, min_spent_times[i - (k + 1)])\n        while pop_heap and pop_heap[0] == heap[0]:\n            heapq.heappop(pop_heap)\n            heapq.heappop(heap)\n    print(min(min_spent_times[-k - 1:]))", "import heapq\n\ndef minSum(arr, n, k):\n    dp = [0] * n\n    if n < k:\n        return 0\n    elif n == k:\n        return min(arr)\n    h = [(arr[i], i) for i in range(k)]\n    heapq.heapify(h)\n    m = h[0]\n    for i in range(k, n):\n        uv = arr[i] + m[0]\n        heapq.heappush(h, (uv, i))\n        if m[1] == i - k:\n            heapq.heappop(h)\n            while h[0][1] < i - k:\n                heapq.heappop(h)\n            m = h[0]\n    while h[0][1] < n - k:\n        heapq.heappop(h)\n    return h[0][0]\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    H = list(map(int, input().split()))\n    print(minSum(H, n, k + 1))", "import sys\nfrom collections import deque\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    q = deque([])\n    if n == k:\n        print(0)\n    else:\n        for i in range(k + 1):\n            while q and a[i] <= a[q[-1]]:\n                q.pop()\n            q.append(i)\n        for i in range(k + 1, n):\n            a[i] += a[q[0]]\n            while q and q[0] <= i - (k + 1):\n                q.popleft()\n            while q and a[i] <= a[q[-1]]:\n                q.pop()\n            q.append(i)\n        sys.stdout.write(str(min(a[n - k - 1:n])) + '\\n')", "from collections import deque\n\ndef f(nums, k):\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    d = deque([(nums[0], 0)])\n    for i in range(1, len(nums)):\n        dp[i] = nums[i] + d[0][0]\n        while d and d[-1][0] < dp[i]:\n            d.pop()\n        d.append((dp[i], i))\n        if i - k == d[0][1]:\n            d.popleft()\n    return dp[-1]\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    nums = [0] + [-i for i in l] + [0]\n    print(-f(nums, k + 1))"]