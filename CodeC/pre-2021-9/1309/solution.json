["def max_clique(g):\n    n = 0\n    for x in g:\n        n = max(n, len(x))\n    l = [set() for _ in range(n + 1)]\n    s = [0] * len(g)\n    for (i, x) in enumerate(g):\n        ll = len(x)\n        l[ll].add(i)\n        s[i] = ll\n    m = 0\n    for _ in range(len(g)):\n        for i in range(n + 1):\n            if len(l[i]) > 0:\n                x = l[i].pop()\n                m = max(m, i)\n                s[x] = 0\n                for k in g[x]:\n                    if s[k] > 0:\n                        l[s[k]].remove(k)\n                        s[k] -= 1\n                        l[s[k]].add(k)\n                break\n    return m + 1\n\ndef dfs(s, b, u):\n    s.add(u)\n    b[u] = True\n    for v in g[u]:\n        if b[v]:\n            continue\n        dfs(s, b, v)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    g = [list() for _ in range(n)]\n    for _ in range(m):\n        (u, v) = map(int, input().split())\n        g[u - 1].append(v - 1)\n        g[v - 1].append(u - 1)\n    print(max_clique(g))", "def max_clique(g):\n    n = 0\n    for x in g:\n        n = max(n, len(x))\n    l = [set() for _ in range(n + 1)]\n    s = [0] * len(g)\n    for (i, x) in enumerate(g):\n        ll = len(x)\n        l[ll].add(i)\n        s[i] = ll\n    m = 0\n    for _ in range(len(g)):\n        for i in range(n + 1):\n            if len(l[i]) > 0:\n                x = l[i].pop()\n                m = max(m, i)\n                s[x] = 0\n                for k in g[x]:\n                    if s[k] > 0:\n                        l[s[k]].remove(k)\n                        s[k] -= 1\n                        l[s[k]].add(k)\n                break\n    return m + 1\n\ndef dfs(s, b, u):\n    s.add(u)\n    b[u] = True\n    for v in g[u]:\n        if b[v]:\n            continue\n        dfs(s, b, v)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    g = [list() for _ in range(n)]\n    for _ in range(m):\n        (u, v) = map(int, input().split())\n        g[u - 1].append(v - 1)\n        g[v - 1].append(u - 1)\n    print(max_clique(g))", "def max_clique(g):\n    n = 0\n    for x in g:\n        n = max(n, len(x))\n    l = [set() for _ in range(n + 1)]\n    s = [0] * len(g)\n    for (i, x) in enumerate(g):\n        ll = len(x)\n        l[ll].add(i)\n        s[i] = ll\n    m = 0\n    for _ in range(len(g)):\n        for i in range(n + 1):\n            if len(l[i]) > 0:\n                x = l[i].pop()\n                m = max(m, i)\n                s[x] = 0\n                for k in g[x]:\n                    if s[k] > 0:\n                        l[s[k]].remove(k)\n                        s[k] -= 1\n                        l[s[k]].add(k)\n                break\n    return m + 1\n\ndef dfs(s, b, u):\n    s.add(u)\n    b[u] = True\n    for v in g[u]:\n        if b[v]:\n            continue\n        dfs(s, b, v)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    g = [list() for _ in range(n)]\n    for _ in range(m):\n        (u, v) = map(int, input().split())\n        g[u - 1].append(v - 1)\n        g[v - 1].append(u - 1)\n    print(max_clique(g))", "def max_clique(g):\n    n = 0\n    for x in g:\n        n = max(n, len(x))\n    l = [set() for _ in range(n + 1)]\n    s = [0] * len(g)\n    for (i, x) in enumerate(g):\n        ll = len(x)\n        l[ll].add(i)\n        s[i] = ll\n    m = 0\n    for _ in range(len(g)):\n        for i in range(n + 1):\n            if len(l[i]) > 0:\n                x = l[i].pop()\n                m = max(m, i)\n                s[x] = 0\n                for k in g[x]:\n                    if s[k] > 0:\n                        l[s[k]].remove(k)\n                        s[k] -= 1\n                        l[s[k]].add(k)\n                break\n    return m + 1\n\ndef dfs(s, b, u):\n    s.add(u)\n    b[u] = True\n    for v in g[u]:\n        if b[v]:\n            continue\n        dfs(s, b, v)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    g = [list() for _ in range(n)]\n    for _ in range(m):\n        (u, v) = map(int, input().split())\n        g[u - 1].append(v - 1)\n        g[v - 1].append(u - 1)\n    print(max_clique(g))", "def max_clique(g):\n    n = 0\n    for x in g:\n        n = max(n, len(x))\n    l = [set() for _ in range(n + 1)]\n    s = [0] * len(g)\n    for (i, x) in enumerate(g):\n        ll = len(x)\n        l[ll].add(i)\n        s[i] = ll\n    m = 0\n    for _ in range(len(g)):\n        for i in range(n + 1):\n            if len(l[i]) > 0:\n                x = l[i].pop()\n                m = max(m, i)\n                s[x] = 0\n                for k in g[x]:\n                    if s[k] > 0:\n                        l[s[k]].remove(k)\n                        s[k] -= 1\n                        l[s[k]].add(k)\n                break\n    return m + 1\n\ndef dfs(s, b, u):\n    s.add(u)\n    b[u] = True\n    for v in g[u]:\n        if b[v]:\n            continue\n        dfs(s, b, v)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    g = [list() for _ in range(n)]\n    for _ in range(m):\n        (u, v) = map(int, input().split())\n        g[u - 1].append(v - 1)\n        g[v - 1].append(u - 1)\n    print(max_clique(g))", "def max_clique(g):\n    n = 0\n    for x in g:\n        n = max(n, len(x))\n    l = [set() for _ in range(n + 1)]\n    s = [0] * len(g)\n    for (i, x) in enumerate(g):\n        ll = len(x)\n        l[ll].add(i)\n        s[i] = ll\n    m = 0\n    for _ in range(len(g)):\n        for i in range(n + 1):\n            if len(l[i]) > 0:\n                x = l[i].pop()\n                m = max(m, i)\n                s[x] = 0\n                for k in g[x]:\n                    if s[k] > 0:\n                        l[s[k]].remove(k)\n                        s[k] -= 1\n                        l[s[k]].add(k)\n                break\n    return m + 1\n\ndef dfs(s, b, u):\n    s.add(u)\n    b[u] = True\n    for v in g[u]:\n        if b[v]:\n            continue\n        dfs(s, b, v)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    g = [list() for _ in range(n)]\n    for _ in range(m):\n        (u, v) = map(int, input().split())\n        g[u - 1].append(v - 1)\n        g[v - 1].append(u - 1)\n    print(max_clique(g))", "def max_clique(g):\n    n = 0\n    for x in g:\n        n = max(n, len(x))\n    l = [set() for _ in range(n + 1)]\n    s = [0] * len(g)\n    for (i, x) in enumerate(g):\n        ll = len(x)\n        l[ll].add(i)\n        s[i] = ll\n    m = 0\n    for _ in range(len(g)):\n        for i in range(n + 1):\n            if len(l[i]) > 0:\n                x = l[i].pop()\n                m = max(m, i)\n                s[x] = 0\n                for k in g[x]:\n                    if s[k] > 0:\n                        l[s[k]].remove(k)\n                        s[k] -= 1\n                        l[s[k]].add(k)\n                break\n    return m + 1\n\ndef dfs(s, b, u):\n    s.add(u)\n    b[u] = True\n    for v in g[u]:\n        if b[v]:\n            continue\n        dfs(s, b, v)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    g = [list() for _ in range(n)]\n    for _ in range(m):\n        (u, v) = map(int, input().split())\n        g[u - 1].append(v - 1)\n        g[v - 1].append(u - 1)\n    print(max_clique(g))"]