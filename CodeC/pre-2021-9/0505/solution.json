["for i in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    bus = set()\n    consistent = True\n    for x in range(q):\n        e = input()\n        s = e[0]\n        e = int(e[1:])\n        if s == '-':\n            if e not in bus:\n                consistent = False\n            else:\n                bus.remove(e)\n        elif e in bus:\n            consistent = False\n        else:\n            bus.add(e)\n            if len(bus) > m:\n                consistent = False\n    if consistent:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    status = set()\n    bl = False\n    for j in range(q):\n        (ch, i) = input().split()\n        i = int(i)\n        if ch == '+':\n            status.add(i)\n        elif i in status:\n            status.remove(i)\n        else:\n            bl = True\n        if len(status) > m:\n            bl = True\n    if bl:\n        print('Inconsistent')\n    else:\n        print('Consistent')", "tests = int(input())\nfor i in range(tests):\n    (n, m, q) = map(int, input().split())\n    in_bus = set()\n    ans = 'Consistent'\n    for j in range(q):\n        (operation, person) = input().strip().split()\n        if operation == '+':\n            in_bus.add(person)\n        elif person in in_bus:\n            in_bus.remove(person)\n        else:\n            ans = 'Inconsistent'\n        if len(in_bus) > m:\n            ans = 'Inconsistent'\n    print(ans)", "for _ in range(int(input())):\n    (N, M, Q) = map(int, input().split())\n    l = [0] * (N + 1)\n    currCount = 0\n    flag = 1\n    for i in range(Q):\n        (ch1, ch2) = map(str, input().split())\n        ch2 = int(ch2)\n        if flag == 0:\n            continue\n        if ch1 == '+':\n            l[ch2] += 1\n            currCount += 1\n            if currCount > M:\n                flag = 0\n        elif l[ch2] == 0:\n            flag = 0\n        else:\n            l[ch2] -= 1\n            currCount -= 1\n    if flag:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for _ in range(int(input())):\n    (N, M, Q) = [int(x) for x in input().split()]\n    l = [0] * (N + 1)\n    currCount = 0\n    flag = 1\n    for i in range(Q):\n        (ch1, ch2) = [x for x in input().split()]\n        ch2 = int(ch2)\n        if flag == 0:\n            continue\n        if ch1 == '+':\n            l[ch2] += 1\n            currCount += 1\n            if currCount > M:\n                flag = 0\n        elif l[ch2] == 0:\n            flag = 0\n        else:\n            l[ch2] -= 1\n            currCount -= 1\n    if flag:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for _ in range(int(input())):\n    (N, M, Q) = [int(x) for x in input().split()]\n    l = [0] * (N + 1)\n    currCount = 0\n    flag = 1\n    for i in range(Q):\n        (ch1, ch2) = [x for x in input().split()]\n        ch2 = int(ch2)\n        if flag == 0:\n            continue\n        if ch1 == '+':\n            l[ch2] += 1\n            currCount += 1\n            if currCount > M:\n                flag = 0\n        elif l[ch2] == 0:\n            flag = 0\n        else:\n            l[ch2] -= 1\n            currCount -= 1\n    if flag:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for z in range(int(input())):\n    (n, m, q) = [int(x) for x in input().split()]\n    v = set()\n    r = 0\n    for i in range(q):\n        (a, b) = [x for x in input().split()]\n        if a == '+':\n            v.add(int(b))\n            if len(v) > m:\n                r = 1\n        elif int(b) not in v:\n            r = 1\n        else:\n            v.remove(int(b))\n    if r == 0:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for z in range(int(input())):\n    (n, m, q) = [int(x) for x in input().split()]\n    v = set()\n    r = 0\n    for i in range(q):\n        (a, b) = [x for x in input().split()]\n        if a == '+':\n            v.add(int(b))\n            if len(v) > m:\n                r = 1\n        elif int(b) not in v:\n            r = 1\n        else:\n            v.remove(int(b))\n    if r == 0:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for z in range(int(input())):\n    (n, m, q) = [int(x) for x in input().split()]\n    v = set()\n    r = 0\n    for i in range(q):\n        (a, b) = [x for x in input().split()]\n        if a == '+':\n            v.add(int(b))\n            if len(v) > m:\n                r = 1\n        elif int(b) not in v:\n            r = 1\n        else:\n            v.remove(int(b))\n    if r == 0:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for z in range(int(input())):\n    (n, m, q) = [int(x) for x in input().split()]\n    v = set()\n    r = 0\n    for i in range(q):\n        (a, b) = [x for x in input().split()]\n        if a == '+':\n            v.add(int(b))\n            if len(v) > m:\n                r = 1\n        elif int(b) not in v:\n            r = 1\n        else:\n            v.remove(int(b))\n    if r == 0:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for i in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    l1 = []\n    check = True\n    while q > 0:\n        (ch, s) = map(str, input().split())\n        if ch == '+':\n            if s in l1:\n                check = False\n            else:\n                l1.append(s)\n                if len(l1) > m:\n                    check = False\n        elif ch == '-':\n            if s not in l1:\n                check = False\n            else:\n                l1.remove(s)\n        q -= 1\n    if not check:\n        print('Inconsistent')\n    else:\n        print('Consistent')", "for i in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    l1 = []\n    check = True\n    while q > 0:\n        (ch, s) = map(str, input().split())\n        if ch == '+':\n            if s in l1:\n                check = False\n            else:\n                l1.append(s)\n                if len(l1) > m:\n                    check = False\n        elif ch == '-':\n            if s not in l1:\n                check = False\n            else:\n                l1.remove(s)\n        q -= 1\n    if not check:\n        print('Inconsistent')\n    else:\n        print('Consistent')", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    c = 0\n    dictionary = dict()\n    flag = True\n    for j in range(q):\n        (sign, i) = map(str, input().split())\n        if sign == '-':\n            if i not in dictionary:\n                flag = False\n            c -= 1\n        if sign == '+':\n            c += 1\n            if c > m:\n                flag = False\n            dictionary[i] = sign\n    if flag:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    bus = []\n    inconsistent = False\n    for i in range(q):\n        (act, person) = map(str, input().split())\n        if act == '+':\n            if len(bus) == m:\n                inconsistent = True\n            else:\n                bus.append(person)\n        elif person in bus:\n            bus.remove(person)\n        else:\n            inconsistent = True\n    if inconsistent:\n        print('Inconsistent')\n    else:\n        print('Consistent')", "for i in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    c = 0\n    flag = 0\n    l = []\n    for i in range(q):\n        (a, b) = map(str, input().split())\n        if a == '+':\n            c += 1\n            r = int(b)\n            if i == 0:\n                l.append(r)\n            elif r in l:\n                flag = 1\n            elif r not in l:\n                l.append(r)\n            if c > m:\n                flag = 1\n        elif a == '-':\n            c = c - 1\n            r = int(b)\n            if c < 0 or r not in l:\n                flag = 1\n            if r in l:\n                l.remove(r)\n    if flag == 1:\n        print('Inconsistent')\n    else:\n        print('Consistent')", "t = int(input())\nfor i in range(t):\n    (N, M, Q) = map(int, input().split())\n    queue = []\n    inconsistent = 0\n    for j in range(Q):\n        (operator, operand) = map(str, input().split())\n        operand = int(operand)\n        if operator == '+':\n            if len(queue) >= M:\n                inconsistent = 1\n            elif operand in queue:\n                inconsistent = 1\n            else:\n                queue.append(operand)\n        elif len(queue) == 0:\n            inconsistent = 1\n        elif operand not in queue:\n            inconsistent = 1\n        else:\n            queue.remove(operand)\n    if inconsistent:\n        print('Inconsistent')\n    else:\n        print('Consistent')", "for i in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    l1 = []\n    check = True\n    while q > 0:\n        (ch, s) = map(str, input().split())\n        if ch == '+':\n            if s in l1:\n                check = False\n            else:\n                l1.append(s)\n                if len(l1) > m:\n                    check = False\n        elif ch == '-':\n            if s not in l1:\n                check = False\n            else:\n                l1.remove(s)\n        q -= 1\n    if not check:\n        print('Inconsistent')\n    else:\n        print('Consistent')", "for i in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    l1 = []\n    check = True\n    while q > 0:\n        (ch, s) = map(str, input().split())\n        if ch == '+':\n            if s in l1:\n                check = False\n            else:\n                l1.append(s)\n                if len(l1) > m:\n                    check = False\n        elif ch == '-':\n            if s not in l1:\n                check = False\n            else:\n                l1.remove(s)\n        q -= 1\n    if not check:\n        print('Inconsistent')\n    else:\n        print('Consistent')", "t = int(input())\nfor j in range(t):\n    (n, m, q) = tuple(map(int, input().split()))\n    d = []\n    f = 1\n    for k in range(q):\n        (a, b) = input().split()\n        if a == '+':\n            if b in d:\n                f = 0\n            else:\n                d.append(b)\n                if len(d) > m:\n                    f = 0\n        if a == '-':\n            if b not in d:\n                f = 0\n            else:\n                d.remove(b)\n    if f == 1:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for i in range(int(input())):\n    (n, m, q) = tuple(map(int, input().split()))\n    bl = []\n    flag = True\n    for x in range(q):\n        (ch, a) = input().split()\n        if ch == '+':\n            if a in bl:\n                flag = False\n            else:\n                bl.append(a)\n                if len(bl) > m:\n                    flag = False\n        if ch == '-':\n            if a not in bl:\n                flag = False\n            else:\n                bl.remove(a)\n    if flag:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for i in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    l1 = []\n    check = True\n    while q > 0:\n        (ch, s) = map(str, input().split())\n        if ch == '+':\n            if s in l1:\n                check = False\n            else:\n                l1.append(s)\n                if len(l1) > m:\n                    check = False\n        elif ch == '-':\n            if s not in l1:\n                check = False\n            else:\n                l1.remove(s)\n        q -= 1\n    if not check:\n        print('Inconsistent')\n    else:\n        print('Consistent')", "t = int(input())\nfor i in range(t):\n    (n, m, q) = map(int, input().split())\n    peopleArray = [0] * n\n    flag = 0\n    count = 0\n    for j in range(q):\n        s = input().split()\n        f = int(s[1])\n        if s[0] == '-':\n            f = -1 * f\n            peopleArray[abs(f) - 1] -= 1\n            count -= 1\n        else:\n            peopleArray[f - 1] += 1\n            count += 1\n        if count > m or count < 0:\n            flag = 1\n        if peopleArray[abs(f) - 1] < 0 or peopleArray[abs(f) - 1] > 1:\n            flag = 1\n    if flag == 0:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "t = int(input())\nfor i in range(t):\n    (n, m, q) = map(int, input().split())\n    peopleArray = [0] * n\n    flag = 0\n    count = 0\n    for j in range(q):\n        s = input().split()\n        f = int(s[1])\n        if s[0] == '-':\n            f = -1 * f\n            peopleArray[abs(f) - 1] -= 1\n            count -= 1\n        else:\n            peopleArray[f - 1] += 1\n            count += 1\n        if count > m or count < 0:\n            flag = 1\n        if peopleArray[abs(f) - 1] < 0 or peopleArray[abs(f) - 1] > 1:\n            flag = 1\n    if flag == 0:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for i in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    l1 = []\n    check = True\n    while q > 0:\n        (ch, s) = map(str, input().split())\n        if ch == '+':\n            if s in l1:\n                check = False\n            else:\n                l1.append(s)\n                if len(l1) > m:\n                    check = False\n        elif ch == '-':\n            if s not in l1:\n                check = False\n            else:\n                l1.remove(s)\n        q -= 1\n    if not check:\n        print('Inconsistent')\n    else:\n        print('Consistent')", "a = int(input())\nfor j in range(a):\n    (n, m, q) = map(int, input().split())\n    a = [0] * (n + 1)\n    corin = 0\n    people = 0\n    for i in range(q):\n        (pm, person) = input().split()\n        person = int(person)\n        if pm == '+':\n            a[person] += 1\n            people += 1\n            if people > m:\n                corin = -1\n        else:\n            a[person] -= 1\n            people -= 1\n            if a[person] == -1:\n                corin = -1\n    if corin == -1:\n        print('Inconsistent')\n    else:\n        print('Consistent')", "def solve():\n    (n, m, q) = map(int, input().split())\n    from collections import defaultdict\n    di = defaultdict(int)\n    cnt = 0\n    flag = True\n    que = list()\n    for i in range(q):\n        s = input()\n        s = s.split()\n        que.append(s)\n    for i in range(q):\n        s = que[i]\n        if s[0] == '+':\n            cnt += 1\n            di[int(s[1])] += 1\n            if cnt > m:\n                flag = False\n                break\n        else:\n            cnt -= 1\n            di[int(s[1])] -= 1\n            if di[int(s[1])] < 0:\n                flag = False\n                break\n    if not flag:\n        print('Inconsistent')\n    else:\n        print('Consistent')\nfor _ in range(int(input())):\n    solve()", "def solve():\n    (n, m, q) = map(int, input().split())\n    from collections import defaultdict\n    di = defaultdict(int)\n    cnt = 0\n    flag = True\n    que = list()\n    for i in range(q):\n        s = input()\n        s = s.split()\n        que.append(s)\n    for i in range(q):\n        s = que[i]\n        if s[0] == '+':\n            cnt += 1\n            di[int(s[1])] += 1\n            if cnt > m:\n                flag = False\n                break\n        else:\n            cnt -= 1\n            di[int(s[1])] -= 1\n            if di[int(s[1])] < 0:\n                flag = False\n                break\n    if not flag:\n        print('Inconsistent')\n    else:\n        print('Consistent')\nfor _ in range(int(input())):\n    solve()", "for i in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    c = 0\n    flag = 0\n    l = []\n    for i in range(q):\n        (a, b) = map(str, input().split())\n        if a == '+':\n            c += 1\n            r = int(b)\n            if i == 0:\n                l.append(r)\n            elif r in l:\n                flag = 1\n            elif r not in l:\n                l.append(r)\n            if c > m:\n                flag = 1\n        elif a == '-':\n            c = c - 1\n            r = int(b)\n            if c < 0 or r not in l:\n                flag = 1\n            if r in l:\n                l.remove(r)\n    if flag == 1:\n        print('Inconsistent')\n    else:\n        print('Consistent')", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    l = []\n    bus = []\n    for i in range(q):\n        (s, num) = input().split()\n        l.append((s, num))\n    ans = 1\n    for (s, num) in l:\n        if s == '+':\n            if len(bus) >= m:\n                ans = 0\n                break\n            else:\n                bus.append(num)\n        elif len(bus) == 0 or num not in bus:\n            ans = 0\n            break\n        else:\n            bus.remove(num)\n    if ans == 1:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "try:\n    T = int(input())\n    while T:\n        (N, M, Q) = map(int, input().split())\n        sign = [''] * Q\n        n = [0] * Q\n        arr = [0] * N\n        flag = 1\n        for i in range(Q):\n            (sign[i], n[i]) = input().split()\n        count = 0\n        for i in range(Q):\n            if sign[i] == '+':\n                arr[int(n[i]) - 1] = 1\n                count += 1\n            elif arr[int(n[i]) - 1] == 0:\n                print('Inconsistent')\n                flag = 0\n                break\n            else:\n                arr[int(n[i]) - 1] = 0\n                count -= 1\n            if count < 0 or count > M:\n                print('Inconsistent')\n                flag = 0\n                break\n        if flag:\n            print('Consistent')\n        T -= 1\nexcept:\n    pass", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    cnst = True\n    bsli = []\n    for i in range(q):\n        (sgn, ni) = map(str, input().split())\n        ni = int(ni)\n        if sgn == '+':\n            bsli.append(ni)\n        elif ni in bsli:\n            bsli.remove(ni)\n        else:\n            cnst = False\n        if len(bsli) > m:\n            cnst = False\n    if cnst:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "import sys\ninput = sys.stdin.readline\n\ndef rii():\n    return range(int(input().strip()))\n\ndef ii():\n    return int(input().strip())\n\ndef mii():\n    return map(int, input().strip().split(' '))\n\ndef lmii():\n    return list(map(int, input().strip().split(' ')))\n\ndef si():\n    return str(input().strip())\nsuccess = 'Consistent'\nfailure = 'Inconsistent'\n\nclass Bus:\n\n    def __init__(self, population, capacity):\n        self.m = capacity\n        self.n = population\n        self.o = 0\n        self.joined = set()\n\n    def process_event(self, event):\n        (action, number) = event.split(' ')\n        n = int(number)\n        if action == '+':\n            self.o += 1\n            self.joined.add(n)\n        elif action == '-':\n            self.o -= 1\n            if n not in self.joined:\n                return False\n            else:\n                self.joined.remove(n)\n        if any([self.o > self.m, self.o < 0]):\n            return False\n        return True\n\ndef solve(*args):\n    (n, m, events) = args\n    b = Bus(n, m)\n    while len(events) > 0:\n        if b.process_event(events.pop(0)) == False:\n            return failure\n    return success\n\ndef do_codechef():\n    for t in rii():\n        (n, m, q) = mii()\n        events = list()\n        for _ in range(q):\n            events.append(si())\n        print(solve(n, m, events))\ndo_codechef()\nexit()", "try:\n    for _ in range(int(input())):\n        p = [int(i) for i in input().split()]\n        n = p[0]\n        m = p[1]\n        q = p[2]\n        t = []\n        l = set()\n        t = True\n        count = 0\n        for i in range(q):\n            p = [str(i) for i in input().split()]\n            if p[0] == '+':\n                if m > 0 and p[1] not in l:\n                    m -= 1\n                    l.add(p[1])\n                else:\n                    t = False\n            elif p[0] == '-':\n                if p[1] not in l:\n                    t = False\n                else:\n                    l.remove(p[1])\n                    m += 1\n        if t:\n            print('Consistent')\n        else:\n            print('Inconsistent')\nexcept Exception:\n    pass", "try:\n    for _ in range(int(input())):\n        p = [int(i) for i in input().split()]\n        n = p[0]\n        m = p[1]\n        q = p[2]\n        t = []\n        l = set()\n        t = True\n        count = 0\n        for i in range(q):\n            p = [str(i) for i in input().split()]\n            if p[0] == '+':\n                if m > 0 and p[1] not in l:\n                    m -= 1\n                    l.add(p[1])\n                else:\n                    t = False\n            elif p[0] == '-':\n                if p[1] not in l:\n                    t = False\n                else:\n                    l.remove(p[1])\n                    m += 1\n        if t:\n            print('Consistent')\n        else:\n            print('Inconsistent')\nexcept Exception:\n    pass", "t = int(input())\nfor i in range(t):\n    (n, m, q) = map(int, input().split())\n    l = []\n    b = []\n    for j in range(q):\n        (s, k) = input().split()\n        l.append((s, k))\n    ans = 1\n    for (s, k) in l:\n        if s == '+':\n            if len(b) >= m:\n                ans = 0\n                break\n            else:\n                b.append(k)\n        elif len(b) == 0 or k not in b:\n            ans = 0\n            break\n        else:\n            b.remove(k)\n    print('Consistent' if ans == 1 else 'Inconsistent')", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    l = []\n    bus = []\n    for i in range(q):\n        (s, num) = input().split()\n        l.append((s, num))\n    ans = 1\n    for (s, num) in l:\n        if s == '+':\n            if len(bus) >= m:\n                ans = 0\n                break\n            else:\n                bus.append(num)\n        elif len(bus) == 0 or num not in bus:\n            ans = 0\n            break\n        else:\n            bus.remove(num)\n    if ans == 1:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for t in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    d = {}\n    flag = 1\n    for i in range(0, q):\n        l = list(map(str, input().split()))\n        if l[0] == '-' and l[1] not in d:\n            flag = 0\n        elif l[0] == '-' and l[1] in d:\n            del d[l[1]]\n        elif l[0] == '+' and l[1] in d:\n            flag = 0\n        elif l[0] == '+' and l[1] not in d:\n            d[l[1]] = '+'\n            if len(d) > m:\n                flag = 0\n    if flag == 0:\n        print('Inconsistent')\n    else:\n        print('Consistent')", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    res = []\n    pin = []\n    for __ in range(q):\n        (ch, pi) = input().split()\n        if pi not in pin and ch == '-' or len(pin) > m or (ch == '+' and len(pin) >= m):\n            res.append(0)\n        if ch == '+':\n            pin.append(pi)\n        elif ch == '-':\n            if pi not in pin:\n                res.append(0)\n            else:\n                pin.remove(pi)\n    if len(res) == 0:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    p = []\n    count = True\n    for _ in range(q):\n        chi = input().split()\n        ch = str(chi[0])\n        i = int(chi[1])\n        if ch == '+':\n            p.append(i)\n            if len(p) > m:\n                count = False\n        elif ch == '-' and i not in p:\n            count = False\n        elif ch == '-' and i in p:\n            p.remove(i)\n    if count:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().strip().split())\n    signaa = []\n    yaa = []\n    ans = []\n    remaining = m\n    f = 0\n    for i in range(q):\n        x = input().strip().split()\n        signaa.append(x[0])\n        yaa.append(int(x[1]))\n    for i in range(len(yaa)):\n        sign = signaa[i]\n        y = yaa[i]\n        if sign == '+':\n            if remaining > 0:\n                ans.append(y)\n                remaining -= 1\n            else:\n                f = 1\n                print('Inconsistent')\n                break\n        elif y in ans:\n            ii = ans.index(y)\n            ans.pop(ii)\n            remaining += 1\n        else:\n            f = 1\n            print('Inconsistent')\n            break\n    if f == 0:\n        print('Consistent')", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split(' '))\n    l = []\n    flag = 1\n    for __ in range(q):\n        (c, i) = input().split(' ')\n        i = int(i)\n        if c == '-' and i not in l:\n            flag = 0\n            continue\n        if c == '+' and len(l) >= m:\n            flag = 0\n            continue\n        if c == '+' and (i not in l and len(l) < m):\n            l.append(i)\n        if c == '-' and i in l:\n            l.remove(i)\n    if flag == 1:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "t = int(input())\nwhile t:\n    (n, m, q) = map(int, input().split())\n    a = [False for _ in range(n + 1)]\n    ans = 'Consistent'\n    cnt = 0\n    while q:\n        (c, num) = map(str, input().split())\n        nu = int(num)\n        if c == '+' and a[nu]:\n            ans = 'Inconsistent'\n        elif c == '+':\n            a[nu] = True\n            cnt += 1\n        if c == '-' and (not a[nu]):\n            ans = 'Inconsistent'\n        elif c == '-':\n            a[nu] = False\n            cnt -= 1\n        if cnt > m:\n            ans = 'Inconsistent'\n        q -= 1\n    print(ans)\n    t -= 1", "def solve():\n    (n, m, q) = [int(x) for x in input().split()]\n    busCount = 0\n    dicti = {}\n    ls = []\n    for i in range(q):\n        temp = [x for x in input().split()]\n        ls.append(temp)\n    for temp in ls:\n        ch = temp[0]\n        i = int(temp[1])\n        if ch == '+':\n            if i in dicti:\n                print('Inconsistent')\n                return\n            elif busCount < m:\n                dicti[i] = 1\n                busCount += 1\n            else:\n                print('Inconsistent')\n                return\n        if ch == '-':\n            if i in dicti:\n                del dicti[i]\n                busCount -= 1\n            else:\n                print('Inconsistent')\n                return\n    print('Consistent')\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    p = []\n    count = True\n    for _ in range(q):\n        chi = input().split()\n        ch = str(chi[0])\n        i = int(chi[1])\n        if ch == '+':\n            p.append(i)\n            if len(p) > m:\n                count = False\n        elif ch == '-' and i not in p:\n            count = False\n        elif ch == '-' and i in p:\n            p.remove(i)\n    if count:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for i in range(int(input())):\n    (n, m, q) = [int(x) for x in input().split()]\n    cnt = 0\n    ans = 'Consistent'\n    entered = []\n    for j in range(q):\n        query = input()\n        if query[0] == '+':\n            cnt += 1\n            entered.append(query[2])\n        else:\n            if query[2] not in entered:\n                ans = 'Inconsistent'\n            else:\n                entered.remove(query[2])\n            cnt -= 1\n        if cnt > m:\n            ans = 'Inconsistent'\n    print(ans)", "def solve(n, m, events):\n    state = {}\n    count = 0\n    for e in events:\n        (type, number) = (e[0], int(e[1:].strip()))\n        if type == '+':\n            count += 1\n            if count > m:\n                print('Inconsistent')\n                return\n            state[number] = 1\n        elif type == '-':\n            if number not in state:\n                print('Inconsistent')\n                return\n            del state[number]\n            count -= 1\n        else:\n            print('Inconsistent')\n            return\n    print('Consistent')\nt = int(input())\nfor i in range(t):\n    (n, m, q) = map(int, input().split())\n    events = []\n    for _ in range(q):\n        events.append(input())\n    solve(n, m, events)", "a = int(input())\nfor i in range(a):\n    (n, m, q) = map(int, input().split())\n    l = []\n    flag = 1\n    for i in range(q):\n        (c, nu) = input().split(' ')\n        nu = int(nu)\n        if c == '-' and nu not in l:\n            flag = 0\n        if c == '+' and len(l) >= m:\n            flag = 0\n            continue\n        if c == '+' and nu not in l and (len(l) < m):\n            l.append(nu)\n        if c == '-' and nu in l:\n            l.remove(nu)\n    if flag == 1:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "a = int(input())\nfor i in range(a):\n    (n, m, q) = map(int, input().split())\n    l = []\n    flag = 1\n    for i in range(q):\n        (c, nu) = input().split(' ')\n        nu = int(nu)\n        if c == '-' and nu not in l:\n            flag = 0\n            continue\n        if c == '+' and len(l) >= m:\n            flag = 0\n            continue\n        if c == '+' and nu not in l and (len(l) < m):\n            l.append(nu)\n        if c == '-' and nu in l:\n            l.remove(nu)\n    if flag == 1:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "def eval(n, m, q):\n    change = []\n    st1 = ''\n    sum = 0\n    for j in range(q):\n        change.append(input())\n    for w in change:\n        st1 = st1 + w\n        if w[0] == '-':\n            if '+ ' + w[2:] not in st1:\n                return -1\n            sum = sum - 1\n        elif w[0] == '+':\n            sum = sum + 1\n        if sum > m:\n            return -1\n    print('Consistent')\n    return 1\nfor _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    if eval(n, m, q) == -1:\n        print('Inconsistent')", "for t in range(int(input())):\n    l = list(map(int, input().split()))\n    (n, m, q) = (l[0], l[1], l[2])\n    (entered, c, flag) = (set(), 0, 0)\n    for i in range(q):\n        (a, b) = map(str, input().split())\n        if flag == 0:\n            if a == '+':\n                c += 1\n                entered.add(b)\n                if c > m:\n                    flag = 1\n            else:\n                c -= 1\n                if b not in entered:\n                    flag = 1\n    if flag == 0:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for tc in range(int(input())):\n    ls = list(map(int, input().split()))\n    mem = [0] * (ls[0] + 1)\n    flag = 1\n    req = ls[1]\n    for x in range(ls[2]):\n        s = input()\n        sign = s[0]\n        me = int(s[2:])\n        if sign == '+':\n            if req > 0:\n                req -= 1\n                mem[me] = 1\n            else:\n                flag = 0\n        elif mem[me] == 1:\n            mem[me] = 0\n            req += 1\n        else:\n            flag = 0\n    if flag:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "t = int(input())\nfor i in range(t):\n    (n, m, q) = map(int, input().split())\n    arr = [False] * (n + 1)\n    count = 0\n    ans = 'Consistent'\n    for j in range(q):\n        (a, b) = input().split()\n        if a == '-':\n            if not arr[int(b)]:\n                ans = 'Inconsistent'\n            else:\n                arr[int(b)] = False\n                count -= 1\n        else:\n            arr[int(b)] = True\n            count += 1\n        if 0 <= count <= m:\n            continue\n        else:\n            ans = 'Inconsistent'\n    print(ans)", "T = int(input())\nfor t in range(T):\n    (n, m, q) = [int(i) for i in input().split()]\n    ans = True\n    tot = 0\n    present = dict()\n    for i in range(q):\n        (a, b) = input().split()\n        if a == '+':\n            tot += 1\n            present[b] = 1\n            if tot > m:\n                ans = False\n        elif b not in present:\n            ans = False\n        else:\n            present[b] = 0\n            tot -= 1\n    if ans:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    arr = [0] * (n + 1)\n    f = 1\n    s = 0\n    for i in range(q):\n        l = input().split()\n        if l[0] == '+':\n            if arr[int(l[-1])] == 0:\n                s += 1\n                arr[int(l[-1])] = 1\n            else:\n                f = 0\n        elif arr[int(l[-1])] == 1:\n            arr[int(l[-1])] = 0\n            s -= 1\n        else:\n            f = 0\n        if s > m:\n            f = 0\n    if f:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "def checkEvent(m, temp, cur):\n    if temp[0] == '-':\n        if passanger[int(temp[1]) - 1] == 0:\n            return (False, cur)\n    else:\n        passanger[int(temp[1]) - 1] += 1\n    cur += 1 if temp[0] == '+' else -1\n    if cur > m:\n        return (False, cur)\n    return (True, cur)\nt = int(input())\nfor _ in range(t):\n    (n, m, q) = map(int, input().split())\n    passanger = [0] * n\n    cur = 0\n    ans = True\n    for _ in range(q):\n        temp = list(input().split())\n        tempAns = checkEvent(m, temp, cur)\n        if tempAns[0]:\n            cur = tempAns[1]\n        else:\n            ans = False\n    if ans:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "t = int(input())\nfor _ in range(t):\n    (n, m, q) = map(int, input().split())\n    flag = 'Consistent'\n    currCount = 0\n    arr = [0] * n\n    for i in range(q):\n        (ch, val) = input().split()\n        val = int(val) - 1\n        if ch == '+':\n            arr[val] += 1\n            currCount += 1\n            if currCount > m:\n                flag = 'Inconsistent'\n        else:\n            arr[val] -= 1\n            currCount -= 1\n            if arr[val] < 0 or currCount < 0:\n                flag = 'Inconsistent'\n    print(flag)", "def solveC():\n    bus = set()\n    for a in A:\n        if a[0] == '+':\n            if len(bus) >= M:\n                return 'Inconsistent'\n            else:\n                bus.add(a[1])\n        elif a[1] not in bus:\n            return 'Inconsistent'\n        else:\n            bus.remove(a[1])\n    return 'Consistent'\nfor _ in range(int(input())):\n    (N, M, Q) = [int(x) for x in input().split()]\n    A = [[x if x in ['+', '-'] else int(x) for x in input().split()] for q in range(Q)]\n    print(solveC())", "t = int(input())\nfor tc in range(t):\n    (n, m, q) = map(int, input().split())\n    d = {}\n    cur = 0\n    res = 1\n    for k in range(q):\n        (ch, i) = map(str, input().split())\n        i = int(i)\n        if ch == '+' and res != -1:\n            cur += 1\n            d[i] = 1\n            if cur > m:\n                res = -1\n        elif ch == '-' and res != -1:\n            cur -= 1\n            if cur < 0:\n                res = -1\n            try:\n                d.pop(i)\n            except:\n                res = -1\n    if res == 1:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "t = int(input())\nfor i in range(t):\n    (n, m, q) = map(str, input().split())\n    n = int(n)\n    m = int(m)\n    q = int(q)\n    a = [0] * n\n    count = 0\n    ans = 'Consistent'\n    for j in range(q):\n        (x, y) = map(str, input().split())\n        if x == '+':\n            a[int(y) - 1] += 1\n            count += 1\n            if count > m:\n                ans = 'Inconsistent'\n        else:\n            a[int(y) - 1] -= 1\n            count -= 1\n            if a[int(y) - 1] == -1:\n                ans = 'Inconsistent'\n    print(ans)", "for i in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    c = 0\n    flag = 0\n    l = []\n    for i in range(q):\n        (a, b) = map(str, input().split())\n        if a == '+':\n            c += 1\n            r = int(b)\n            if i == 0:\n                l.append(r)\n            elif r in l:\n                flag = 1\n            elif r not in l:\n                l.append(r)\n            if c > m:\n                flag = 1\n        elif a == '-':\n            c = c - 1\n            r = int(b)\n            if c < 0 or r not in l:\n                flag = 1\n            if r in l:\n                l.remove(r)\n    if flag == 1:\n        print('Inconsistent')\n    else:\n        print('Consistent')", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    l = []\n    flag = 0\n    a = []\n    for i in range(q):\n        s1 = list(input().split())\n        a.append(s1)\n    for s in a:\n        if s[0] == '-':\n            if s[1] in l:\n                l.remove(s[1])\n            else:\n                flag = 1\n                break\n        else:\n            l.append(s[1])\n        if len(l) > m:\n            flag = 1\n            break\n    if flag == 0:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "test_cases = int(input())\nfor i in range(test_cases):\n    (n, c, t) = map(int, input().split())\n    a = [0] * (n + 1)\n    val = 0\n    flag = 0\n    for j in range(t):\n        p = input()\n        x = int(p[2:])\n        if p[0] == '+':\n            a[x] += 1\n            val += 1\n        elif a[x] <= 0:\n            flag = 1\n        else:\n            a[x] -= 1\n            val -= 1\n        if val > c:\n            flag = 1\n    if flag:\n        print('Inconsistent')\n    else:\n        print('Consistent')", "cs = int(input())\nwhile cs:\n    cs -= 1\n    (one, two, three) = map(int, input().split())\n    (cx, sq, sq1, val) = (0, [], [], 0)\n    while three:\n        three -= 1\n        sq.append(input())\n    for iv in sq:\n        if '+' in iv:\n            sq1.append(int(iv[-1]))\n            if len(sq1) > two:\n                val = -1\n                break\n        elif int(iv[-1]) not in sq1:\n            val = -1\n            break\n        else:\n            sq1.remove(int(iv[-1]))\n    print('Inconsistent') if len(sq1) > two or val == -1 else print('Consistent')", "t = int(input())\nfor w in range(t):\n    (n, m, q) = map(int, input().split())\n    l = list()\n    flag = 0\n    for i in range(q):\n        (s, p) = input().split()\n        p = int(p)\n        if s == '+':\n            if len(l) < m:\n                l.append(p)\n            else:\n                flag = 1\n        if s == '-':\n            if p in l:\n                l.remove(p)\n            else:\n                flag = 1\n    if flag == 1:\n        print('Inconsistent')\n    else:\n        print('Consistent')", "for _ in range(int(input())):\n    (N, M, Q) = map(int, input().split())\n    bus = {}\n    flag = True\n    while Q:\n        Q -= 1\n        (symbol, number) = input().split()\n        number = int(number)\n        if symbol == '+':\n            if number in bus:\n                flag = False\n            else:\n                bus[number] = 1\n        else:\n            try:\n                del bus[number]\n            except:\n                flag = False\n        if len(bus) > M:\n            flag = False\n    if flag:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for _ in range(int(input())):\n    (N, M, Q) = map(int, input().split())\n    result = True\n    noOfPassenger = 0\n    p = [0 for i in range(N)]\n    for __ in range(Q):\n        (signa, num) = input().split()\n        num = int(num)\n        if signa == '-':\n            if p[num - 1] == 1:\n                noOfPassenger -= 1\n                p[num - 1] = 0\n            else:\n                result = False\n        else:\n            p[num - 1] = 1\n            noOfPassenger += 1\n            if noOfPassenger > M:\n                result = False\n    if result:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    (enter, exit, elim) = (dict(), dict(), dict())\n    flag = True\n    count = 0\n    for i in range(q):\n        (sign, passenger) = map(str, input().split())\n        passenger = int(passenger)\n        if sign == '+':\n            count += 1\n            if count > m:\n                flag = False\n            try:\n                if not exit[passenger] and (not elim[passenger]):\n                    enter[passenger] = 1\n                else:\n                    flag = False\n            except:\n                enter[passenger] = 1\n        elif sign == '-':\n            count -= 1\n            try:\n                if enter[passenger]:\n                    exit[passenger] = 1\n                    elim[passenger] = 1\n                else:\n                    flag = False\n            except:\n                flag = False\n    if flag:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "d = {}\nt = int(input())\nfor i in range(t):\n    [n, m, q] = [int(k) for k in input().split()]\n    for j in range(n):\n        d[j + 1] = -1\n    so = 0\n    c = 1\n    for j in range(q):\n        [e_l, p] = [str(k) for k in input().split()]\n        if e_l == '+' and so == m:\n            c = 0\n        elif e_l == '+':\n            d[int(p)] = 0\n            so += 1\n        elif e_l == '-' and d[int(p)] == -1:\n            c = 0\n        else:\n            d[int(p)] = 0\n            so -= 1\n    if c == 1:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    ls = []\n    flag = 1\n    for _ in range(q):\n        (ch, i) = input().split()\n        if ch == '+':\n            ls.append(i)\n        elif i in ls:\n            ls.remove(i)\n        else:\n            flag = 0\n        if len(ls) > m:\n            flag = 0\n    print('Consistent' if flag else 'Inconsistent')", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    p = []\n    flag = True\n    for _ in range(q):\n        chi = input().split()\n        ch = str(chi[0])\n        i = int(chi[1])\n        if ch == '+':\n            p.append(i)\n            if len(p) > m:\n                flag = False\n        elif ch == '-' and i in p:\n            p.remove(i)\n        else:\n            flag = False\n    if flag:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "t = int(input())\n\ndef main(N, M, Q, op):\n    bus = 0\n    d = {}\n    for (i, j) in op:\n        if i == '+':\n            bus += 1\n            d[j] = True\n        elif i == '-':\n            bus = bus - 1\n            if d.get(j, None) == None:\n                return 'Inconsistent'\n        if bus > M:\n            return 'Inconsistent'\n    return 'Consistent'\nfor k in range(t):\n    (N, M, Q) = map(int, input().split(' '))\n    op = []\n    if N != '+' or N != '-':\n        for i in range(Q):\n            tem = input().split(' ')\n            tem[-1] = int(tem[-1])\n            op.append(tem)\n    print(main(N, M, Q, op))", "from sys import stdin, stdout\nfor _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    p = 0\n    l = []\n    flag = True\n    for _ in range(q):\n        (ch, t) = input().split()\n        if flag:\n            if ch == '+':\n                l.append(t)\n                p += 1\n                if p > m:\n                    flag = False\n            if ch == '-':\n                p -= 1\n                if t in l:\n                    l.remove(t)\n                else:\n                    flag = False\n    print('Consistent' if flag else 'Inconsistent')", "for u in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    c = 0\n    f = 0\n    d = [0 for i in range(n)]\n    for i in range(q):\n        (s, x) = input().split()\n        x = int(x) - 1\n        if s == '+':\n            d[x] += 1\n            c += 1\n            if c > m:\n                f = 1\n        elif d[x] == 1:\n            d[x] -= 1\n            c -= 1\n        else:\n            f = 1\n    if f == 0:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "t = int(input())\nfor i in range(0, t):\n    (a, b, c) = [int(x) for x in input().split()]\n    value = True\n    list = []\n    for i in range(0, c):\n        (d, e) = input().split()\n        if d == '+':\n            list.append(e)\n            if len(list) > b:\n                value = False\n        elif e not in list:\n            value = False\n        else:\n            list.remove(e)\n    if value == True:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "t = int(input())\nfor i in range(0, t):\n    (a, b, c) = [int(x) for x in input().split()]\n    value = True\n    list = []\n    for i in range(0, c):\n        (d, e) = input().split()\n        if d == '+':\n            list.append(e)\n            if len(list) > b:\n                value = False\n        elif e not in list:\n            value = False\n        else:\n            list.remove(e)\n    if value == True:\n        print('Consistent')\n    else:\n        print('Inconsistent')", "def func(q, m):\n    a = []\n    for i in range(q):\n        (s, n) = input().split()\n        if s == '+':\n            a.append(n)\n        elif s == '-':\n            if n in a:\n                a.remove(n)\n            else:\n                return ('Inconsistent', q - i)\n        if len(a) > m:\n            return ('Inconsistent', q - i)\n    return ('Consistent', q - i)\nt = int(input())\nfor _ in range(t):\n    (n, m, q) = map(int, input().split())\n    (out, i) = func(q, m)\n    for _ in range(i - 1):\n        x = input()\n    print(out)", "for i in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    c = 0\n    flag = 0\n    l = []\n    for i in range(q):\n        (a, b) = map(str, input().split())\n        if a == '+':\n            c += 1\n            r = int(b)\n            if r in l:\n                flag = 1\n            if r not in l:\n                l.append(r)\n            if c > m:\n                flag = 1\n        if a == '-':\n            c = c - 1\n            r = int(b)\n            if r not in l:\n                flag = 1\n            if r in l:\n                l.remove(r)\n    if flag == 1:\n        print('Inconsistent')\n    else:\n        print('Consistent')", "for i in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    c = 0\n    flag = 0\n    l = []\n    for i in range(q):\n        (a, b) = map(str, input().split())\n        if a == '+':\n            c += 1\n            r = int(b)\n            if r in l:\n                flag = 1\n            if r not in l:\n                l.append(r)\n            if c > m:\n                flag = 1\n        if a == '-':\n            c = c - 1\n            r = int(b)\n            if r not in l:\n                flag = 1\n            if r in l:\n                l.remove(r)\n    if flag == 1:\n        print('Inconsistent')\n    else:\n        print('Consistent')"]