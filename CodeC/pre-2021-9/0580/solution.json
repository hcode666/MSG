["MOD = 10 ** 9 + 7\n\ndef count_palindrome(s):\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if s[j - 1:i] == s[j - 1:i][::-1]:\n                dp[i] += dp[j - 1]\n                dp[i] %= MOD\n    return dp[n]\ns = input().strip()\nprint(count_palindrome(s))", "MOD = 10 ** 9 + 7\n\ndef count_palindrome(s):\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if s[j - 1:i] == s[j - 1:i][::-1]:\n                dp[i] += dp[j - 1]\n                dp[i] %= MOD\n    return dp[n]\ns = input().strip()\nprint(count_palindrome(s))", "MOD = 10 ** 9 + 7\n\ndef count_palindrome(s):\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if s[j - 1:i] == s[j - 1:i][::-1]:\n                dp[i] += dp[j - 1]\n                dp[i] %= MOD\n    return dp[n]\ns = input().strip()\nprint(count_palindrome(s))", "MOD = 10 ** 9 + 7\n\ndef count_palindrome(s):\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if s[j - 1:i] == s[j - 1:i][::-1]:\n                dp[i] += dp[j - 1]\n                dp[i] %= MOD\n    return dp[n]\ns = input().strip()\nprint(count_palindrome(s))", "def soln(s):\n    n = len(s)\n    dp = [1]\n    for i in range(1, n):\n        cur = 0\n        for j in range(i + 1):\n            ss = s[j:i + 1]\n            if ss == ss[::-1]:\n                cur += dp[j - 1] if j > 0 else 1\n        dp.append(cur)\n    return dp[-1] % (10 ** 9 + 7)\nprint(soln(input()))", "def soln(s):\n    n = len(s)\n    dp = [1]\n    for i in range(1, n):\n        cur = 0\n        for j in range(i + 1):\n            ss = s[j:i + 1]\n            if ss == ss[::-1]:\n                cur += dp[j - 1] if j > 0 else 1\n        dp.append(cur)\n    return dp[-1] % (10 ** 9 + 7)\nprint(soln(input()))", "def soln(s):\n    n = len(s)\n    dp = [1]\n    for i in range(1, n):\n        cur = 0\n        for j in range(i + 1):\n            ss = s[j:i + 1]\n            if ss == ss[::-1]:\n                cur += dp[j - 1] if j > 0 else 1\n        dp.append(cur)\n    return dp[-1] % (10 ** 9 + 7)\nprint(soln(input()))", "def soln(s):\n    n = len(s)\n    dp = [1]\n    for i in range(1, n):\n        cur = 0\n        for j in range(i + 1):\n            ss = s[j:i + 1]\n            if ss == ss[::-1]:\n                cur += dp[j - 1] if j > 0 else 1\n        dp.append(cur)\n    return dp[-1] % (10 ** 9 + 7)\nprint(soln(input()))", "def soln(s):\n    n = len(s)\n    dp = [1]\n    for i in range(1, n):\n        cur = 0\n        for j in range(i + 1):\n            ss = s[j:i + 1]\n            if ss == ss[::-1]:\n                cur += dp[j - 1] if j > 0 else 1\n        dp.append(cur)\n    return dp[-1] % (10 ** 9 + 7)\nprint(soln(input()))", "s = input()\nl = len(s)\nd = [1]\nans = 0\nfor i in range(1, l):\n    ans = 0\n    for j in range(i + 1):\n        m = s[j:i + 1]\n        if m[::-1] == m:\n            x = d[j - 1]\n            if j - 1 < 0:\n                x = 1\n            ans += x\n    d.append(ans)\nprint(d[-1] % (10 ** 9 + 7))", "from sys import *\n\ndef solve():\n    s = stdin.readline().rstrip()\n    n = len(s)\n    modulo = 1000000000 + 7\n    count = [1] * (n + 1)\n    is_palindrome = [[True] * n for _ in range(n)]\n    for i in range(n - 1):\n        count[i + 2] = count[i + 1]\n        for j in range(i + 1):\n            if s[j] != s[i + 1] or not is_palindrome[j + 1][i]:\n                is_palindrome[j][i + 1] = False\n            else:\n                count[i + 2] = (count[i + 2] + count[j]) % modulo\n    print(count[-1])\nsolve()", "from sys import *\n\ndef solve():\n    s = stdin.readline().rstrip()\n    n = len(s)\n    modulo = 1000000000 + 7\n    count = [1] * (n + 1)\n    is_palindrome = [[True] * n for _ in range(n)]\n    for i in range(n - 1):\n        count[i + 2] = count[i + 1]\n        for j in range(i + 1):\n            if s[j] != s[i + 1] or not is_palindrome[j + 1][i]:\n                is_palindrome[j][i + 1] = False\n            else:\n                count[i + 2] = (count[i + 2] + count[j]) % modulo\n    print(count[-1])\nsolve()", "from sys import *\ns = stdin.readline().rstrip()\nn = len(s)\nmodulo = 1000000000 + 7\ncount = [1] * (n + 1)\nis_palindrome = [[True] * n for _ in range(n)]\nfor i in range(n - 1):\n    count[i + 2] = count[i + 1]\n    for j in range(i + 1):\n        if s[j] != s[i + 1] or not is_palindrome[j + 1][i]:\n            is_palindrome[j][i + 1] = False\n        else:\n            count[i + 2] = (count[i + 2] + count[j]) % modulo\nprint(count[-1])", "from sys import stdin\ns = stdin.readline().rstrip()\nn = len(s)\nmodulo = 1000000000 + 7\ncount = [1] * (n + 1)\nis_palindrome = [[True] * n for _ in range(n)]\nfor i in range(n - 1):\n    count[i + 2] = count[i + 1]\n    for j in range(i + 1):\n        if s[j] != s[i + 1] or not is_palindrome[j + 1][i]:\n            is_palindrome[j][i + 1] = False\n        else:\n            count[i + 2] = (count[i + 2] + count[j]) % modulo\nprint(count[-1])", "from sys import stdin, stdout\n\ndef solve():\n    s = stdin.readline().rstrip()\n    n = len(s)\n    modulo = 1000000000 + 7\n    count = [1] * (n + 1)\n    is_palindrome = [[True] * n for _ in range(n)]\n    for i in range(n - 1):\n        count[i + 2] = count[i + 1]\n        for j in range(i + 1):\n            if s[j] != s[i + 1] or not is_palindrome[j + 1][i]:\n                is_palindrome[j][i + 1] = False\n            else:\n                count[i + 2] = (count[i + 2] + count[j]) % modulo\n    print(count[-1])\nsolve()", "s = input()\nl = len(s)\nd = [1]\nans = 0\nfor i in range(1, l):\n    ans = 0\n    for j in range(i + 1):\n        m = s[j:i + 1]\n        if m[::-1] == m:\n            x = d[j - 1]\n            if j - 1 < 0:\n                x = 1\n            ans += x\n    d.append(ans)\nprint(d[-1] % (10 ** 9 + 7))", "s = input()\nl = len(s)\nd = [1]\nans = 0\nfor i in range(1, l):\n    ans = 0\n    for j in range(i + 1):\n        m = s[j:i + 1]\n        if m[::-1] == m:\n            x = d[j - 1]\n            if j - 1 < 0:\n                x = 1\n            ans += x\n    d.append(ans)\nprint(d[-1] % (10 ** 9 + 7))", "s = input()\nl = len(s)\nd = [1]\nans = 0\nfor i in range(1, l):\n    ans = 0\n    for j in range(i + 1):\n        m = s[j:i + 1]\n        if m[::-1] == m:\n            x = d[j - 1]\n            if j - 1 < 0:\n                x = 1\n            ans += x\n    d.append(ans)\nprint(d[-1] % (10 ** 9 + 7))", "s = input()\nl = len(s)\nd = [1]\nans = 0\nfor i in range(1, l):\n    ans = 0\n    for j in range(i + 1):\n        m = s[j:i + 1]\n        if m[::-1] == m:\n            x = d[j - 1]\n            if j - 1 < 0:\n                x = 1\n            ans += x\n    d.append(ans)\nprint(d[-1] % (10 ** 9 + 7))", "for _ in range(1):\n    s = input()\n    n = len(s)\n    MOD = 10 ** 9 + 7\n    dp = [1]\n    ans = 0\n    for i in range(1, n):\n        ans = 0\n        for j in range(0, i + 1):\n            temp1 = s[j:i + 1]\n            if temp1[::-1] == temp1:\n                x = dp[j - 1]\n                if j - 1 < 0:\n                    x = 1\n                ans += x\n        dp.append(ans)\n    print(dp[-1] % MOD)", "T = input()\na = len(T)\nb = [1]\nfor i in range(1, a):\n    sum = 0\n    for j in range(i + 1):\n        M = T[j:i + 1]\n        if M[::-1] == M:\n            x = b[j - 1]\n            if j - 1 < 0:\n                x = 1\n            sum += x\n    b.append(sum)\nprint(b[-1] % (10 ** 9 + 7))", "s = input()\nl = len(s)\nd = [1]\nans = 0\nfor i in range(1, l):\n    ans = 0\n    for j in range(i + 1):\n        m = s[j:i + 1]\n        if m[::-1] == m:\n            x = d[j - 1]\n            if j - 1 < 0:\n                x = 1\n            ans += x\n    d.append(ans)\nprint(d[-1] % (10 ** 9 + 7))", "s = input()\nl = len(s)\nd = [1]\nans = 0\nfor i in range(1, l):\n    ans = 0\n    for j in range(i + 1):\n        m = s[j:i + 1]\n        if m[::-1] == m:\n            x = d[j - 1]\n            if j - 1 < 0:\n                x = 1\n            ans += x\n    d.append(ans)\nprint(d[-1] % (10 ** 9 + 7))", "s = input()\nl = len(s)\nd = [1]\nans = 0\nfor i in range(1, l):\n    ans = 0\n    for j in range(i + 1):\n        m = s[j:i + 1]\n        if m[::-1] == m:\n            x = d[j - 1]\n            if j - 1 < 0:\n                x = 1\n            ans += x\n    d.append(ans)\nprint(d[-1] % (10 ** 9 + 7))", "s = input()\nl = len(s)\nd = [1]\nans = 0\nfor i in range(1, l):\n    ans = 0\n    for j in range(i + 1):\n        m = s[j:i + 1]\n        if m[::-1] == m:\n            x = d[j - 1]\n            if j - 1 < 0:\n                x = 1\n            ans += x\n    d.append(ans)\nprint(d[-1] % (10 ** 9 + 7))", "s = input()\nl = len(s)\nd = [1]\nans = 0\nfor i in range(1, l):\n    ans = 0\n    for j in range(i + 1):\n        m = s[j:i + 1]\n        if m[::-1] == m:\n            x = d[j - 1]\n            if j - 1 < 0:\n                x = 1\n            ans += x\n    d.append(ans)\nprint(d[-1] % (10 ** 9 + 7))", "s = input()\nl = len(s)\nd = [1]\nans = 0\nfor i in range(1, l):\n    ans = 0\n    for j in range(i + 1):\n        m = s[j:i + 1]\n        if m[::-1] == m:\n            x = d[j - 1]\n            if j - 1 < 0:\n                x = 1\n            ans += x\n    d.append(ans)\nprint(d[-1] % (10 ** 9 + 7))", "s = input()\nl = len(s)\nd = [1]\nans = 0\nfor i in range(1, l):\n    ans = 0\n    for j in range(i + 1):\n        m = s[j:i + 1]\n        if m[::-1] == m:\n            x = d[j - 1]\n            if j - 1 < 0:\n                x = 1\n            ans += x\n    d.append(ans)\nprint(d[-1] % (10 ** 9 + 7))", "s = input()\nl = len(s)\nd = [1]\nans = 0\nfor i in range(1, l):\n    ans = 0\n    for j in range(i + 1):\n        m = s[j:i + 1]\n        if m[::-1] == m:\n            x = d[j - 1]\n            if j - 1 < 0:\n                x = 1\n            ans += x\n    d.append(ans)\nprint(d[-1] % (10 ** 9 + 7))", "s = input()\nl = len(s)\nd = [1]\nans = 0\nfor i in range(1, l):\n    ans = 0\n    for j in range(i + 1):\n        m = s[j:i + 1]\n        if m[::-1] == m:\n            x = d[j - 1]\n            if j - 1 < 0:\n                x = 1\n            ans += x\n    d.append(ans)\nprint(d[-1] % (10 ** 9 + 7))", "s = input()\nl = len(s)\nd = [1]\nans = 0\nfor i in range(1, l):\n    ans = 0\n    for j in range(i + 1):\n        m = s[j:i + 1]\n        if m[::-1] == m:\n            x = d[j - 1]\n            if j - 1 < 0:\n                x = 1\n            ans += x\n    d.append(ans)\nprint(d[-1] % (10 ** 9 + 7))", "s = input()\nl = len(s)\nd = [1]\nans = 0\nfor i in range(1, l):\n    ans = 0\n    for j in range(i + 1):\n        m = s[j:i + 1]\n        if m[::-1] == m:\n            x = d[j - 1]\n            if j - 1 < 0:\n                x = 1\n            ans += x\n    d.append(ans)\nprint(d[-1] % (10 ** 9 + 7))", "s = input()\nn = len(s)\ndp = [1]\nans = 0\nfor i in range(1, len(s)):\n    ans = 0\n    for j in range(i + 1):\n        tem = s[j:i + 1]\n        if tem[::-1] == tem:\n            x = dp[j - 1]\n            if j - 1 < 0:\n                x = 1\n            ans += x\n    dp.append(ans)\nprint(dp[-1] % (10 ** 9 + 7))", "def solve(s):\n    dp = [1]\n    ans = 0\n    for i in range(1, n):\n        ans = 0\n        for j in range(0, i + 1):\n            temp1 = s[j:i + 1]\n            if temp1[::-1] == temp1:\n                x = dp[j - 1]\n                if j - 1 < 0:\n                    x = 1\n                ans += x\n        dp.append(ans)\n    print(dp[-1] % MOD)\nfor _ in range(1):\n    s = input()\n    n = len(s)\n    MOD = 10 ** 9 + 7\n    solve(s)", "def solve(s):\n    dp = [1]\n    ans = 0\n    for i in range(1, n):\n        ans = 0\n        for j in range(0, i + 1):\n            temp1 = s[j:i + 1]\n            if temp1[::-1] == temp1:\n                x = dp[j - 1]\n                if j - 1 < 0:\n                    x = 1\n                ans += x\n        dp.append(ans)\n    print(dp[-1] % MOD)\nfor _ in range(1):\n    ans = 0\n    s = input()\n    n = len(s)\n    MOD = 10 ** 9 + 7\n    solve(s)", "MD = 1000000007\nst = input().strip()\ns = chr(7) + st + chr(8)\nsz = len(s)\nA = [[] for x in range(sz)]\nfor p in range(1, sz - 1):\n    k = 1\n    while s[p - k] == s[p + k]:\n        A[p - k].append(2 * k + 1)\n        k += 1\nfor p in range(2, sz - 1):\n    k = 1\n    while s[p - k] == s[p + k - 1]:\n        A[p - k].append(2 * k)\n        k += 1\nZ = [0 for x in range(sz)]\nZ[1] = 1\nfor p in range(1, sz - 1):\n    n = Z[p] % MD\n    Z[p + 1] += n\n    for k in A[p]:\n        Z[p + k] += n\n    p += 1\nr = Z[-1] % MD\nprint(r)", "MD = 1000000007\nst = input().strip()\ns = chr(7) + st + chr(8)\nsz = len(s)\nA = [[] for x in range(sz)]\nfor p in range(1, sz - 1):\n    k = 1\n    while s[p - k] == s[p + k]:\n        A[p - k].append(2 * k + 1)\n        k += 1\nfor p in range(2, sz - 1):\n    k = 1\n    while s[p - k] == s[p + k - 1]:\n        A[p - k].append(2 * k)\n        k += 1\nZ = [0 for x in range(sz)]\nZ[1] = 1\nfor p in range(1, sz - 1):\n    n = Z[p] % MD\n    Z[p + 1] += n\n    for k in A[p]:\n        Z[p + k] += n\n    p += 1\nr = Z[-1] % MD\nprint(r)", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nfrom functools import reduce\nimport time\nimport bisect\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef main():\n    s = line()\n    n = len(s)\n    modulo = 1000000007\n    count = [1 for i in range(n + 1)]\n    is_palindrome = [[True for _ in range(n)] for _ in range(n)]\n    for i in range(n - 1):\n        count[i + 2] = count[i + 1]\n        for j in range(i + 1):\n            if s[j] != s[i + 1] or not is_palindrome[j + 1][i]:\n                is_palindrome[j][i + 1] = False\n            else:\n                count[i + 2] = (count[i + 2] + count[j]) % modulo\n    print(count[-1])\nmain()", "s = input()\nimport sys\nsys.setrecursionlimit(10 ** 7)\nfrom functools import lru_cache\nn = len(s)\n\n@lru_cache(None)\ndef is_pal(l, r):\n    if l >= r:\n        return True\n    return s[l] == s[r] and is_pal(l + 1, r - 1)\nmod = 10 ** 9 + 7\ndp = [1] + [0] * n\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1):\n        if is_pal(j, i - 1):\n            dp[i] += dp[j]\n            dp[i] %= mod\nprint(dp[-1])", "s = input()\nimport sys\nsys.setrecursionlimit(10 ** 7)\nfrom functools import lru_cache\nn = len(s)\n\n@lru_cache(None)\ndef is_pal(l, r):\n    if l >= r:\n        return True\n    return s[l] == s[r] and is_pal(l + 1, r - 1)\nmod = 10 ** 9 + 7\ndp = [1] + [0] * n\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1):\n        if is_pal(j, i - 1):\n            dp[i] += dp[j]\n            dp[i] %= mod\nprint(dp[-1])", "s = input()\nimport sys\nsys.setrecursionlimit(10 ** 7)\nfrom functools import lru_cache\nn = len(s)\n\n@lru_cache(None)\ndef is_pal(l, r):\n    if l >= r:\n        return True\n    return s[l] == s[r] and is_pal(l + 1, r - 1)\nmod = 10 ** 9 + 7\ndp = [1] + [0] * n\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1):\n        if is_pal(j, i - 1):\n            dp[i] += dp[j]\n            dp[i] %= mod\nprint(dp[-1])", "s = input()\nimport sys\nsys.setrecursionlimit(10 ** 7)\nfrom functools import lru_cache\nn = len(s)\n\n@lru_cache(None)\ndef is_pal(l, r):\n    if l >= r:\n        return True\n    return s[l] == s[r] and is_pal(l + 1, r - 1)\nmod = 10 ** 9 + 7\ndp = [1] + [0] * n\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1):\n        if is_pal(j, i - 1):\n            dp[i] += dp[j]\n            dp[i] %= mod\nprint(dp[-1])", "s = input()\nimport sys\nsys.setrecursionlimit(10 ** 7)\nfrom functools import lru_cache\nn = len(s)\n\n@lru_cache(None)\ndef is_pal(l, r):\n    if l >= r:\n        return True\n    return s[l] == s[r] and is_pal(l + 1, r - 1)\nmod = 10 ** 9 + 7\ndp = [1] + [0] * n\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1):\n        if is_pal(j, i - 1):\n            dp[i] += dp[j]\n            dp[i] %= mod\nprint(dp[-1])", "s = input()\nimport sys\nsys.setrecursionlimit(10 ** 7)\nfrom functools import lru_cache\nn = len(s)\n\n@lru_cache(None)\ndef is_pal(l, r):\n    if l >= r:\n        return True\n    return s[l] == s[r] and is_pal(l + 1, r - 1)\nmod = 10 ** 9 + 7\ndp = [1] + [0] * n\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1):\n        if is_pal(j, i - 1):\n            dp[i] += dp[j]\n            dp[i] %= mod\nprint(dp[-1])", "s = input()\nimport sys\nsys.setrecursionlimit(10 ** 7)\nfrom functools import lru_cache\nn = len(s)\n\n@lru_cache(None)\ndef is_pal(l, r):\n    if l >= r:\n        return True\n    return s[l] == s[r] and is_pal(l + 1, r - 1)\nmod = 10 ** 9 + 7\ndp = [1] + [0] * n\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1):\n        if is_pal(j, i - 1):\n            dp[i] += dp[j]\n            dp[i] %= mod\nprint(dp[-1])", "s = input()\nimport sys\nsys.setrecursionlimit(10 ** 7)\nfrom functools import lru_cache\nn = len(s)\n\n@lru_cache(None)\ndef is_pal(l, r):\n    if l >= r:\n        return True\n    return s[l] == s[r] and is_pal(l + 1, r - 1)\nmod = 10 ** 9 + 7\ndp = [1] + [0] * n\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1):\n        if is_pal(j, i - 1):\n            dp[i] += dp[j]\n            dp[i] %= mod\nprint(dp[-1])", "s = input()\nn = len(s)\nis_p = [[1 for i in range(n)] for i in range(n)]\nfor d in range(n - 1, -1, -1):\n    for i in range(d):\n        j = i + n - d\n        is_p[i][j] = 0\n        if s[i] == s[j] and is_p[i + 1][j - 1]:\n            is_p[i][j] = 1\ndp = [1] + [0] * n\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1]\n    for j in range(i - 1):\n        if is_p[j][i - 1]:\n            dp[i] += dp[j]\nprint(dp[-1] % 1000000007)", "l = list(input())\nn = len(l)\nispal = [[1 for i in range(n)] for j in range(n)]\ncnt = [1] * (n + 1)\nMOD = 10 ** 9 + 7\nfor i in range(n - 1):\n    cnt[i + 2] = cnt[i + 1]\n    for j in range(0, i + 1):\n        (a, b) = (j, i + 1)\n        if l[a] != l[b] or not ispal[a + 1][b - 1]:\n            ispal[a][b] = 0\n        else:\n            cnt[i + 2] = (cnt[i + 2] + cnt[a]) % MOD\nprint(cnt[n] % MOD)", "text = input()\nn = len(text)\narr = [[1 for _ in range(n)] for _ in range(n)]\ncount = [1] + [1] * n\nmod = 1000000007\nfor i in range(n - 1):\n    count[i + 2] = count[i + 1]\n    for j in range(0, i + 1):\n        (a, b) = (j, i + 1)\n        if text[a] != text[b] or not arr[a + 1][b - 1]:\n            arr[a][b] = 0\n        else:\n            count[i + 2] = (count[i + 2] + count[a]) % mod\nprint(count[-1])"]