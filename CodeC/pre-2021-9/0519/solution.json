["t = int(input())\nfor fh in range(t):\n    n = int(input())\n    arr = [list(map(int, input().split())) for ifir in range(n)]\n    c = [0] * n\n    m = 0\n    for i in range(n):\n        s = arr[i][0]\n        arr[i].remove(s)\n        uni = len(set(arr[i]))\n        unis = set(arr[i])\n        while uni > 3:\n            if uni == 4:\n                s += 1\n            if uni == 5:\n                s += 2\n            if uni == 6:\n                s += 4\n            for jj in unis:\n                arr[i].remove(jj)\n            uni = len(set(arr[i]))\n            unis = set(arr[i])\n        c[i] = s\n        if s > m:\n            m = s\n            indx = i\n    if c.count(m) > 1:\n        print('tie')\n    elif indx == 0:\n        print('chef')\n    else:\n        print(indx + 1)", "def ser(l):\n    s = [l.count(1), l.count(2), l.count(3), l.count(4), l.count(5), l.count(6)]\n    s.sort()\n    if len(s) == 6:\n        return len(l) + 4 * s[0] + 2 * (s[1] - s[0]) + (s[2] - s[1])\n    elif len(s) == 5:\n        return len(l) + 2 * s[0] + (s[1] - s[0])\n    elif len(s) == 4:\n        return len(l) + s[0]\n    else:\n        return len(l)\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    c = []\n    for i in range(n):\n        d = list(map(int, input().split()))\n        l.append(d[1:])\n    for i in range(n):\n        c.append(ser(l[i]))\n    if c.count(max(c)) > 1:\n        print('tie')\n    elif c[0] == max(c):\n        print('chef')\n    else:\n        print(c.index(max(c)) + 1)", "def cal(l, arr):\n    s = l\n    st = len(set(arr))\n    ast = set(arr)\n    while st > 3:\n        if st == 4:\n            s += 1\n        elif st == 5:\n            s += 2\n        elif st == 6:\n            s += 4\n        for i in ast:\n            arr.remove(i)\n        ast = set(arr)\n        st = len(ast)\n    return s\nfor _ in range(int(input())):\n    n = int(input())\n    ans = []\n    for i in range(n):\n        arr = list(map(int, input().split()))\n        x = arr[0]\n        y = arr[1:]\n        d = cal(x, y)\n        ans.append(d)\n    mx = max(ans)\n    if ans.count(mx) > 1:\n        print('tie')\n    elif ans.index(mx) == 0:\n        print('chef')\n    else:\n        print(ans.index(mx) + 1)", "t = int(input())\n\ndef calc(l, arr):\n    s = l\n    st = len(set(arr))\n    ast = set(arr)\n    while st > 3:\n        if st == 4:\n            s += 1\n        elif st == 5:\n            s += 2\n        elif st == 6:\n            s += 4\n        for i in ast:\n            arr.remove(i)\n        ast = set(arr)\n        st = len(ast)\n    return s\nfor _ in range(t):\n    n = int(input())\n    ar = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        x = a[0]\n        y = a[1:]\n        d = calc(x, y)\n        ar.append(d)\n    mx = max(ar)\n    if ar.count(mx) > 1:\n        print('tie')\n    elif ar[0] == mx:\n        print('chef')\n    else:\n        print(ar.index(mx) + 1)", "t = int(input())\n\ndef calc(l, arr):\n    s = l\n    st = len(set(arr))\n    ast = set(arr)\n    while st > 3:\n        if st == 4:\n            s += 1\n        elif st == 5:\n            s += 2\n        elif st == 6:\n            s += 4\n        for i in ast:\n            arr.remove(i)\n        ast = set(arr)\n        st = len(ast)\n    return s\nfor _ in range(t):\n    n = int(input())\n    ar = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        x = a[0]\n        y = a[1:]\n        d = calc(x, y)\n        ar.append(d)\n    mx = max(ar)\n    if ar.count(mx) > 1:\n        print('tie')\n    elif ar[0] == mx:\n        print('chef')\n    else:\n        print(ar.index(mx) + 1)", "for __ in range(int(input())):\n    n = int(input())\n    p = []\n    score = []\n    for i in range(n):\n        p = [int(i) for i in input().split()]\n        score_p = p[0]\n        p = p[1:]\n        while len(set(p)) > 3:\n            cookie = set(p)\n            if len(cookie) == 4:\n                score_p += 1\n            elif len(cookie) == 5:\n                score_p += 2\n            elif len(cookie) == 6:\n                score_p += 4\n            for x in cookie:\n                p.remove(x)\n        score.append(score_p)\n    maxscore = max(score)\n    if score.count(maxscore) > 1:\n        print('tie')\n    elif score.index(maxscore) == 0:\n        print('chef')\n    else:\n        print(score.index(maxscore) + 1)", "for __ in range(int(input())):\n    n = int(input())\n    p = []\n    score = []\n    for i in range(n):\n        p = [int(i) for i in input().split()]\n        score_p = p[0]\n        p = p[1:]\n        while len(set(p)) > 3:\n            cookie = set(p)\n            if len(cookie) == 4:\n                score_p += 1\n            elif len(cookie) == 5:\n                score_p += 2\n            elif len(cookie) == 6:\n                score_p += 4\n            for x in cookie:\n                p.remove(x)\n        score.append(score_p)\n    maxscore = max(score)\n    if score.count(maxscore) > 1:\n        print('tie')\n    elif score.index(maxscore) == 0:\n        print('chef')\n    else:\n        print(score.index(maxscore) + 1)", "for __ in range(int(input())):\n    n = int(input())\n    p = []\n    score = []\n    for i in range(n):\n        p = [int(i) for i in input().split()]\n        score_p = p[0]\n        p = p[1:]\n        while len(set(p)) > 3:\n            cookie = set(p)\n            if len(cookie) == 4:\n                score_p += 1\n            elif len(cookie) == 5:\n                score_p += 2\n            elif len(cookie) == 6:\n                score_p += 4\n            for x in cookie:\n                p.remove(x)\n        score.append(score_p)\n    maxscore = max(score)\n    if score.count(maxscore) > 1:\n        print('tie')\n    elif score.index(maxscore) == 0:\n        print('chef')\n    else:\n        print(score.index(maxscore) + 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    plyr = []\n    for _ in range(n):\n        k = list(map(int, input().split(' ')))\n        val = len(k[1:])\n        p = {}\n        for i in k[1:]:\n            p.setdefault(i, 0)\n            x = p[i]\n            p[i] = x + 1\n        h = set(p.keys())\n        while len(h) > 3:\n            if len(h) == 4:\n                val += 1\n            elif len(h) == 5:\n                val += 2\n            elif len(h) == 6:\n                val += 4\n            p = {k1: v1 - 1 for (k1, v1) in p.items() if v1 - 1 > 0}\n            h = set(p.keys())\n        plyr.append(val)\n    a = max(plyr)\n    if plyr.count(a) > 1:\n        print('tie')\n    elif plyr.index(a) == 0:\n        print('chef')\n    else:\n        print(plyr.index(a) + 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    plyr = []\n    for _ in range(n):\n        k = list(map(int, input().split(' ')))\n        val = len(k[1:])\n        p = {}\n        for i in k[1:]:\n            p.setdefault(i, 0)\n            x = p[i]\n            p[i] = x + 1\n        h = set(p.keys())\n        while len(h) > 3:\n            if len(h) == 4:\n                val += 1\n            elif len(h) == 5:\n                val += 2\n            elif len(h) == 6:\n                val += 4\n            p = {k1: v1 - 1 for (k1, v1) in p.items() if v1 - 1 > 0}\n            h = set(p.keys())\n        plyr.append(val)\n    a = max(plyr)\n    if plyr.count(a) > 1:\n        print('tie')\n    elif plyr.index(a) == 0:\n        print('chef')\n    else:\n        print(plyr.index(a) + 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    plyr = []\n    for _ in range(n):\n        k = list(map(int, input().split(' ')))\n        val = len(k[1:])\n        p = {}\n        for i in k[1:]:\n            p.setdefault(i, 0)\n            x = p[i]\n            p[i] = x + 1\n        h = set(p.keys())\n        while len(h) > 3:\n            if len(h) == 4:\n                val += 1\n            elif len(h) == 5:\n                val += 2\n            elif len(h) == 6:\n                val += 4\n            p = {k1: v1 - 1 for (k1, v1) in p.items() if v1 - 1 > 0}\n            h = set(p.keys())\n        plyr.append(val)\n    a = max(plyr)\n    if plyr.count(a) > 1:\n        print('tie')\n    elif plyr.index(a) == 0:\n        print('chef')\n    else:\n        print(plyr.index(a) + 1)", "from collections import Counter\n\ndef give_point(a):\n    nn = len(set(a))\n    cur = len(a)\n    dic = Counter(a)\n    while True:\n        val = []\n        for i in dic:\n            if dic[i] != 0:\n                val.append(i)\n        if len(val) < 4:\n            break\n        elif len(val) == 4:\n            cur += 1\n        elif len(val) == 5:\n            cur += 2\n        elif len(val) == 6:\n            cur += 4\n        for i in val:\n            dic[i] -= 1\n    return cur\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    chef = list(map(int, input().split()))\n    chef.pop(0)\n    val = [0] * n\n    val[0] = give_point(chef)\n    for i in range(1, n):\n        a = list(map(int, input().split()))\n        a.pop(0)\n        val[i] = give_point(a)\n    ele = max(val)\n    if val.count(ele) > 1:\n        ans = 'tie'\n    else:\n        pos = val.index(ele)\n        if pos == 0:\n            ans = 'chef'\n        else:\n            ans = pos + 1\n    print(ans)", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log2, ceil\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom bisect import insort\nfrom collections import Counter\nfrom collections import deque\nfrom heapq import heappush, heappop, heapify\nfrom itertools import permutations, combinations\nfrom itertools import accumulate as ac\nfrom random import randint as ri, shuffle\nmod = 998244353\nip = lambda : int(stdin.readline())\ninp = lambda : map(int, stdin.readline().split())\nips = lambda : stdin.readline().rstrip()\nout = lambda x: stdout.write(str(x) + '\\n')\n\ndef give_point(a):\n    nn = len(set(a))\n    cur = len(a)\n    dic = Counter(a)\n    while True:\n        val = []\n        for i in dic:\n            if dic[i] != 0:\n                val.append(i)\n        if len(val) < 4:\n            break\n        elif len(val) == 4:\n            cur += 1\n        elif len(val) == 5:\n            cur += 2\n        elif len(val) == 6:\n            cur += 4\n        for i in val:\n            dic[i] -= 1\n    return cur\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    chef = list(map(int, input().split()))\n    chef.pop(0)\n    val = [0] * n\n    val[0] = give_point(chef)\n    for i in range(1, n):\n        a = list(map(int, input().split()))\n        a.pop(0)\n        val[i] = give_point(a)\n    ele = max(val)\n    if val.count(ele) > 1:\n        ans = 'tie'\n    else:\n        pos = val.index(ele)\n        if pos == 0:\n            ans = 'chef'\n        else:\n            ans = pos + 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    plyr = []\n    for _ in range(n):\n        k = list(map(int, input().split(' ')))\n        val = len(k[1:])\n        p = {}\n        for i in k[1:]:\n            p.setdefault(i, 0)\n            x = p[i]\n            p[i] = x + 1\n        h = set(p.keys())\n        while len(h) > 3:\n            if len(h) == 4:\n                val += 1\n            elif len(h) == 5:\n                val += 2\n            elif len(h) == 6:\n                val += 4\n            p = {k1: v1 - 1 for (k1, v1) in p.items() if v1 - 1 > 0}\n            h = set(p.keys())\n        plyr.append(val)\n    a = max(plyr)\n    if plyr.count(a) > 1:\n        print('tie')\n    elif plyr.index(a) == 0:\n        print('chef')\n    else:\n        print(plyr.index(a) + 1)", "def get_score(arr):\n    arr.sort()\n    return 3 * arr[0] + 2 * arr[1] + 2 * arr[2] + arr[3] + arr[4] + arr[5]\n\ndef count_types(arr):\n    out = {x: 0 for x in range(1, 7)}\n    for i in range(len(arr)):\n        if i and arr[i] in out:\n            out[arr[i]] += 1\n    return [out[x] for x in range(1, 7)]\n\ndef solve(data):\n    scores = {}\n    for i in range(len(data)):\n        if not i:\n            chef_score = get_score(count_types(data[i]))\n        else:\n            score = get_score(count_types(data[i]))\n            scores.setdefault(score, []).append(i + 1)\n    if scores:\n        highest_non_chef = max(scores.keys())\n    else:\n        highest_non_chef = 0\n    if chef_score > highest_non_chef:\n        return 'chef'\n    scores.setdefault(chef_score, []).append(1)\n    if len(scores[highest_non_chef]) > 1:\n        return 'tie'\n    return str(scores[highest_non_chef][0])\nT = int(input().strip())\nfor tc in range(T):\n    N = int(input().strip())\n    data = []\n    for n in range(N):\n        data.append([int(x) for x in input().strip().split(' ')])\n    print(solve(data))", "for __ in range(int(input())):\n    n = int(input())\n    p = []\n    score = []\n    for i in range(n):\n        p = [int(i) for i in input().split()]\n        score_p = p[0]\n        p = p[1:]\n        while len(set(p)) > 3:\n            cookie = set(p)\n            if len(cookie) == 4:\n                score_p += 1\n            elif len(cookie) == 5:\n                score_p += 2\n            elif len(cookie) == 6:\n                score_p += 4\n            for x in cookie:\n                p.remove(x)\n        score.append(score_p)\n    maxscore = max(score)\n    if score.count(maxscore) > 1:\n        print('tie')\n    elif score.index(maxscore) == 0:\n        print('chef')\n    else:\n        print(score.index(maxscore) + 1)", "from collections import defaultdict\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    points = [0] * n\n    for j in range(n):\n        arr = list(map(int, input().split()))\n        points[j] += arr[0]\n        box = defaultdict(lambda : 0)\n        for p in range(arr[0]):\n            box[arr[p + 1]] += 1\n        while True:\n            b_type = 0\n            for (k, v) in box.items():\n                if v > 0:\n                    b_type += 1\n                    box[k] -= 1\n            if b_type <= 3:\n                break\n            else:\n                points[j] += 2 ** (b_type - 4)\n    c_max = 0\n    idx = 0\n    for j in range(n):\n        if points[j] > c_max:\n            c_max = points[j]\n            idx = j\n    if points.count(c_max) > 1:\n        print('tie')\n    elif idx == 0:\n        print('chef')\n    else:\n        print(idx + 1)", "T = int(input())\nfor _ in range(T):\n    P = []\n    N = int(input())\n    Score = [0] * N\n    for i in range(N):\n        a = [int(s) for s in input().split()]\n        P.append(a)\n    cook = [0] * 6\n    for i in range(len(P)):\n        for j in range(0, 6):\n            cook[j] = P[i][1:].count(j + 1)\n        cook.sort()\n        Score[i] = P[i][0] + (4 * cook[0] + 2 * (cook[1] - cook[0]) + (cook[2] - cook[1]))\n    Win = max(Score)\n    if Score.count(Win) > 1:\n        print('tie')\n    elif Win == Score[0]:\n        print('chef')\n    else:\n        print(Score.index(Win) + 1)", "t = int(input())\nwhile t:\n    score = []\n    n = int(input())\n    for i in range(n):\n        arr = list(map(int, input().split()))\n        s = arr[0]\n        type = arr[1:]\n        count = s\n        types = set(type)\n        rest = len(type)\n        while len(types) > 3:\n            if len(types) == 4 and rest >= 4:\n                count += 1\n                rest -= 4\n            elif len(types) == 5 and rest >= 5:\n                count += 2\n                rest -= 5\n            elif len(types) == 6 and rest >= 6:\n                count += 4\n                rest -= 6\n            for i in types:\n                type.remove(i)\n            types = set(type)\n        score.append(count)\n    max = 0\n    idx = 0\n    flag = 0\n    for i in range(len(score)):\n        if score[i] > max:\n            max = score[i]\n            idx = i + 1\n    for i in range(len(score)):\n        if i != idx - 1:\n            if max == score[i]:\n                flag = 1\n                print('tie')\n                break\n    if idx == 1 and flag == 0:\n        print('chef')\n    if idx != 1 and flag == 0:\n        print(idx)\n    t -= 1", "for t in range(int(input())):\n    n = int(input())\n    scoremax = -1\n    scores = []\n    pos = -1\n    for i in range(n):\n        l = list(map(int, input().split()))\n        score = l[0]\n        l = l[1:]\n        while len(set(l)) > 3:\n            listset = set(l)\n            extra = len(listset)\n            if extra == 6:\n                score += 4\n            elif extra == 5:\n                score += 2\n            elif extra == 4:\n                score += 1\n            for val in listset:\n                l.remove(val)\n        scores.append(score)\n    maxscore = max(scores)\n    if scores.count(maxscore) > 1:\n        print('tie')\n    elif scores.index(maxscore) == 0:\n        print('chef')\n    else:\n        print(scores.index(maxscore) + 1)", "from collections import Counter\nfor t in range(int(input())):\n    n = int(input())\n    c = []\n    ct = []\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        c.append(temp[0])\n        inp = temp[1:temp[0] + 1]\n        ct.append(inp)\n    scores = []\n    for i in range(n):\n        score = c[i]\n        length = len(Counter(ct[i]).keys())\n        if length == 4:\n            score += 1\n        elif length == 5:\n            score += 2\n        elif length == 6:\n            score += 4\n        ct1 = list(Counter(ct[i]).keys())\n        for z in ct1:\n            ct[i].remove(z)\n        while ct[i] != []:\n            length = len(Counter(ct[i]).keys())\n            if length == 4:\n                score += 1\n            elif length == 5:\n                score += 2\n            elif length == 6:\n                score += 4\n            ct1 = list(Counter(ct[i]).keys())\n            for z in ct1:\n                ct[i].remove(z)\n        scores.append(score)\n    top = max(scores)\n    count = 0\n    for i in range(n):\n        if scores[i] == top:\n            ind = i\n            count += 1\n    if count > 1:\n        print('tie')\n    elif ind == 0:\n        print('chef')\n    else:\n        print(ind + 1)", "for z in range(int(input())):\n    players = int(input())\n    scores = [0] * players\n    for i in range(players):\n        cookie = list(map(int, input().split()))\n        cookie.pop(0)\n        scores[i] = len(cookie)\n        num_cook = [0] * 6\n        for j in range(0, 6):\n            num_cook[j] = cookie.count(j + 1)\n        num_cook.sort()\n        scores[i] += 4 * num_cook[0] + 2 * (num_cook[1] - num_cook[0]) + (num_cook[2] - num_cook[1])\n    maxScore = max(scores)\n    if scores.count(maxScore) > 1:\n        print('tie')\n    elif maxScore == scores[0]:\n        print('chef')\n    else:\n        print(scores.index(maxScore) + 1)", "for z in range(int(input())):\n    players = int(input())\n    scores = [0] * players\n    for i in range(players):\n        cookie = list(map(int, input().split()))\n        num_cook = [0] * 6\n        for j in range(0, 6):\n            num_cook[j] = cookie[1:].count(j + 1)\n        num_cook.sort()\n        scores[i] = cookie[0] + (4 * num_cook[0] + 2 * (num_cook[1] - num_cook[0]) + (num_cook[2] - num_cook[1]))\n    maxScore = max(scores)\n    if scores.count(maxScore) > 1:\n        print('tie')\n    elif maxScore == scores[0]:\n        print('chef')\n    else:\n        print(scores.index(maxScore) + 1)", "for z in range(int(input())):\n    players = int(input())\n    Score = [0] * players\n    for i in range(players):\n        a = list(map(int, input().split()))\n        cook = [0] * 6\n        for j in range(0, 6):\n            cook[j] = a[1:].count(j + 1)\n        cook.sort()\n        Score[i] = a[0] + (4 * cook[0] + 2 * (cook[1] - cook[0]) + (cook[2] - cook[1]))\n    Win = max(Score)\n    if Score.count(Win) > 1:\n        print('tie')\n    elif Win == Score[0]:\n        print('chef')\n    else:\n        print(Score.index(Win) + 1)", "T = int(input())\nfor _ in range(T):\n    P = []\n    N = int(input())\n    Score = [0] * N\n    for i in range(N):\n        a = [int(s) for s in input().split()]\n        P.append(a)\n    cook = [0] * 6\n    for i in range(len(P)):\n        for j in range(0, 6):\n            cook[j] = P[i][1:].count(j + 1)\n        cook.sort()\n        Score[i] = P[i][0] + (4 * cook[0] + 2 * (cook[1] - cook[0]) + (cook[2] - cook[1]))\n    Win = max(Score)\n    if Score.count(Win) > 1:\n        print('tie')\n    elif Win == Score[0]:\n        print('chef')\n    else:\n        print(Score.index(Win) + 1)", "T = int(input())\nfor _ in range(T):\n    P = []\n    N = int(input())\n    Score = [0] * N\n    for i in range(N):\n        a = [int(s) for s in input().split()]\n        P.append(a)\n    for i in range(len(P)):\n        cook = [0] * 6\n        for j in range(0, 6):\n            cook[j] = P[i][1:].count(j + 1)\n        cook.sort(reverse=True)\n        Score[i] = P[i][0] + (4 * cook[5] + 2 * (cook[4] - cook[5]) + (cook[3] - cook[4]))\n    Win = max(Score)\n    if Score.count(Win) > 1:\n        print('tie')\n    elif Win == Score[0]:\n        print('chef')\n    else:\n        print(Score.index(Win) + 1)", "for k in range(int(input())):\n    c = []\n    for i in range(int(input())):\n        c.append(list(map(int, input().split())))\n    m = []\n\n    def newset(c):\n        for i in set(c[1:]):\n            c.remove(i)\n        return c\n\n    def check(c):\n        s = len(set(c[1:]))\n        if s < len(c[1:]):\n            check(newset(c))\n        if s == 4:\n            c[0] += 1\n        elif s == 5:\n            c[0] += 2\n        elif s == 6:\n            c[0] += 4\n        return c[0]\n    for i in c:\n        m.append(check(i))\n    if m.count(max(m)) > 1:\n        print('tie')\n    elif max(m) == m[0]:\n        print('chef')\n    else:\n        print(m.index(max(m)) + 1)", "T = int(input())\nfor _ in range(T):\n    P = []\n    N = int(input())\n    Score = [0] * N\n    for i in range(N):\n        a = [int(s) for s in input().split()]\n        P.append(a)\n    cook = [0] * 6\n    for i in range(len(P)):\n        for j in range(0, 6):\n            cook[j] = P[i][1:].count(j + 1)\n        cook.sort()\n        Score[i] = P[i][0] + (4 * cook[0] + 2 * (cook[1] - cook[0]) + (cook[2] - cook[1]))\n    Win = max(Score)\n    if Score.count(Win) > 1:\n        print('tie')\n    elif Win == Score[0]:\n        print('chef')\n    else:\n        print(Score.index(Win) + 1)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    scores = []\n    for i in range(n):\n        types = list(map(int, input().split()))\n        c = types[0]\n        types = types[1:]\n        bags = []\n        for x in types:\n            new_bag = True\n            for bag in bags:\n                if x not in bag:\n                    new_bag = False\n                    pot_bag = bag\n                    break\n            if new_bag:\n                bags.append({x})\n            else:\n                pot_bag.add(x)\n        score = 0\n        for bag in bags:\n            if len(bag) == 4:\n                score += 1\n            if len(bag) == 5:\n                score += 2\n            if len(bag) == 6:\n                score += 4\n        scores.append(c + score)\n    max_score = max(scores)\n    if scores.count(max_score) > 1:\n        print('tie')\n    else:\n        index = scores.index(max_score)\n        if index == 0:\n            print('chef')\n        else:\n            print(index + 1)", "import array\nimport heapq\nfor i in range(int(input())):\n    num_max = list()\n    n = int(input())\n    for j in range(n):\n        num_array = [int(x) for x in input().split()]\n        if n == 1:\n            print('chef')\n            break\n        c = len(num_array) - 1\n        num_freq = list()\n        for l in range(6):\n            num_freq.append(num_array[1:].count(l + 1))\n        num_freq.sort(reverse=True)\n        for m in range(int(3)):\n            if num_freq[-m - 1] > 0:\n                if 6 - m == 6:\n                    c += 4 * num_freq[5]\n                    y = 0\n                    y = num_freq[5]\n                    num_freq[:] = [x - y for x in num_freq]\n                elif 6 - m == 5:\n                    c += 2 * num_freq[4]\n                    y = 0\n                    y = num_freq[4]\n                    num_freq[:] = [x - y for x in num_freq]\n                elif 6 - m == 4:\n                    c += 1 * num_freq[3]\n                    y = 0\n                    y = num_freq[3]\n                    num_freq[:] = [x - y for x in num_freq]\n        num_max.append(c)\n    sor = sorted(num_max)\n    if n > 1:\n        second_largest = sor[-2]\n        first_largest = sor[-1]\n        if first_largest == second_largest:\n            print('tie')\n        elif first_largest > second_largest:\n            indx = num_max.index(first_largest)\n            if indx == 0:\n                print('chef')\n            else:\n                print(indx + 1)", "t = input()\nfor i in range(int(t)):\n    n = input()\n    winner = list()\n    for j in range(int(n)):\n        li = [int(x) for x in input().split()]\n        score = 0\n        ty = [0] * 7\n        for k in li[1:]:\n            ty[k] += 1\n        score = len(li) - 1\n        c = ty.count(0)\n        while c < 4:\n            score += 7 - c - 3\n            if c == 1:\n                score += 1\n            for l in range(len(ty)):\n                if ty[l] != 0:\n                    ty[l] -= 1\n            c = ty.count(0)\n        winner.append(score)\n    m = max(winner)\n    if winner.count(m) > 1:\n        print('tie')\n    elif winner.index(m) == 0:\n        print('chef')\n    else:\n        print(winner.index(m) + 1)", "n = int(input())\nwhile n:\n    result = []\n    x = int(input())\n    list1 = [[] for i in range(x)]\n    k = 0\n    w = 0\n    for i in range(x):\n        list2 = input()\n        list2 = list(map(int, list2.split(' ')))\n        list1[i].extend(list2)\n    for i in range(len(list1)):\n        del list1[i][0]\n    for i in range(x):\n        y = len(list1[i])\n        while list1[i]:\n            z = set(list1[i])\n            if len(z) == 6:\n                y = y + 4\n            if len(z) == 5:\n                y = y + 2\n            if len(z) == 4:\n                y = y + 1\n            if len(z) > 3:\n                for j in z:\n                    list1[i].remove(j)\n            else:\n                break\n        result.append(y)\n        rep = result\n    max_value = max(result)\n    max_index = result.index(max_value)\n    ww = max(rep)\n    rep.remove(ww)\n    if rep:\n        kk = max(rep)\n        if ww == kk:\n            print('tie')\n            w = 1\n    if w == 0:\n        if max_index == 0:\n            print('chef')\n        else:\n            print(max_index + 1)\n    n = n - 1", "n = int(input())\nwhile n:\n    result = []\n    x = int(input())\n    list1 = [[] for i in range(x)]\n    k = 0\n    w = 0\n    for i in range(x):\n        list2 = input()\n        list2 = list(map(int, list2.split(' ')))\n        list1[i].extend(list2)\n    for i in range(len(list1)):\n        del list1[i][0]\n    for i in range(x):\n        y = len(list1[i])\n        while list1[i]:\n            z = set(list1[i])\n            if len(z) == 6:\n                y = y + 4\n            if len(z) == 5:\n                y = y + 2\n            if len(z) == 4:\n                y = y + 1\n            if len(z) > 3:\n                for j in z:\n                    list1[i].remove(j)\n            else:\n                break\n        result.append(y)\n        rep = result\n    max_value = max(result)\n    max_index = result.index(max_value)\n    ww = max(rep)\n    rep.remove(ww)\n    if rep:\n        kk = max(rep)\n        if ww == kk:\n            print('tie')\n            w = 1\n    if w == 0:\n        if max_index == 0:\n            print('chef')\n        else:\n            print(max_index + 1)\n    n = n - 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    score = []\n    for i in range(n):\n        s = input()\n        a = [int(x) for x in s.split()]\n        b = [0 for i in range(6)]\n        for i in range(1, len(a)):\n            b[a[i] - 1] = b[a[i] - 1] + 1\n        b.sort()\n        score.append(a[0] + b[0] * 4 + (b[1] - b[0]) * 2 + (b[2] - b[1]) * 1)\n    m = max(score)\n    if score.count(m) > 1:\n        print('tie')\n    elif score.index(m) == 0:\n        print('chef')\n    else:\n        print(score.index(m) + 1)", "t = int(input())\nfor zxc in range(t):\n    noP = int(input())\n    soP = list()\n    for qwe in range(noP):\n        inp = str(input())\n        inp = inp.split()\n        noC = int(inp[0])\n        playerScore = noC\n        array = [0 for i in range(6 + 1)]\n        i = 1\n        while i < len(inp):\n            type = int(inp[i])\n            array[type] += 1\n            i += 1\n        distinct = 0\n        for type in range(6 + 1):\n            if array[type] > 0:\n                distinct += 1\n        array = sorted(array)\n        if distinct >= 4:\n            i = 0\n            type = 1\n            flag = False\n            while i <= distinct - 4:\n                if array[type] > 0 or flag:\n                    flag = True\n                    i += 1\n                    j = type\n                    min = array[type]\n                    while j <= 6:\n                        array[j] -= min\n                        j += 1\n                    playerScore += pow(2, 3 - type) * min\n                type += 1\n        soP.append(playerScore)\n    s = ''\n    max = 0\n    i = 0\n    index = -1\n    while i < len(soP):\n        if soP[i] > max:\n            max = soP[i]\n            index = i\n        i += 1\n    cnt = 0\n    for i in soP:\n        if i == max:\n            cnt += 1\n    if cnt > 1:\n        print('tie')\n    elif index == 0:\n        print('chef')\n    else:\n        print(str(index + 1))", "t = int(input())\nfor t0 in range(t):\n    n = int(input())\n    mx = 0\n    flg = 0\n    for n0 in range(n):\n        ctr = [0 for i in range(6)]\n        s = [int(i) for i in input().strip().split()]\n        m = s[0]\n        sc = m\n        del s[0]\n        for j in range(6):\n            ctr[j] = s.count(j + 1)\n        while True:\n            mn = m\n            tmp = 0\n            for j in range(6):\n                if ctr[j] == 0:\n                    continue\n                else:\n                    mn = min(mn, ctr[j])\n            for j in range(6):\n                if ctr[j] == 0:\n                    continue\n                else:\n                    ctr[j] -= mn\n                    tmp += 1\n            tmp -= 4\n            if tmp < 0:\n                break\n            sc += 2 ** tmp * mn\n        if sc > mx:\n            flg = 0\n            mx = sc\n            pos = n0\n        elif sc == mx:\n            flg = 1\n    if flg == 0:\n        if pos == 0:\n            print('chef')\n        else:\n            print(pos + 1)\n    else:\n        print('tie')", "t = int(input())\nfor t0 in range(t):\n    n = int(input())\n    mx = 0\n    flg = 0\n    for n0 in range(n):\n        ctr = [0 for i in range(6)]\n        s = [int(i) for i in input().strip().split()]\n        m = s[0]\n        sc = m\n        del s[0]\n        for j in range(6):\n            ctr[j] = s.count(j + 1)\n        while True:\n            mn = m\n            tmp = 0\n            for j in range(6):\n                if ctr[j] == 0:\n                    continue\n                else:\n                    mn = min(mn, ctr[j])\n            for j in range(6):\n                if ctr[j] == 0:\n                    continue\n                else:\n                    ctr[j] -= mn\n                    tmp += 1\n            tmp -= 4\n            if tmp < 0:\n                break\n            sc += 2 ** tmp * mn\n        if sc > mx:\n            flg = 0\n            mx = sc\n            pos = n0\n        elif sc == mx:\n            flg = 1\n    if flg == 0:\n        if pos == 0:\n            print('chef')\n        else:\n            print(pos + 1)\n    else:\n        print('tie')", "import sys\nT = int(input().strip())\nfor tt in range(0, T):\n    N = int(input().strip())\n    maxs = -1\n    maxi = -1\n    for p in range(1, N + 1):\n        cook = [0, 0, 0, 0, 0, 0]\n        arr = [int(i) for i in input().split()]\n        score = arr[0]\n        for c in arr[1:]:\n            cook[c - 1] += 1\n        while True:\n            count = 0\n            for ci in range(0, len(cook)):\n                if cook[ci] != 0:\n                    count += 1\n                    cook[ci] -= 1\n            if count < 4:\n                if score > maxs:\n                    maxs = score\n                    maxi = p\n                elif score == maxs:\n                    maxs = score\n                    maxi = 1001\n                break\n            elif count == 4:\n                score += 1\n            elif count == 5:\n                score += 2\n            elif count == 6:\n                score += 4\n    if maxi == 1:\n        print('chef')\n    elif maxi == 1001:\n        print('tie')\n    elif maxs == 0:\n        print('chef')\n    else:\n        print(maxi)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    output = []\n    for j in range(n):\n        c = list(map(int, input().split()))\n        total = c[0]\n        counter = []\n        for p in range(1, 7):\n            counter.append(c[1:].count(p))\n        while True:\n            nonzeros = len(counter) - counter.count(0)\n            if nonzeros < 4:\n                break\n            elif nonzeros == 4:\n                total += 1\n            elif nonzeros == 5:\n                total += 2\n            else:\n                total += 4\n            while 0 in counter:\n                counter.remove(0)\n            counter = [x - 1 for x in counter]\n        output.append(total)\n    if output.count(max(output)) != 1:\n        print('tie')\n    else:\n        index = output.index(max(output))\n        if index == 0:\n            print('chef')\n        else:\n            print(index + 1)", "import heapq\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    score = []\n    for _ in range(n):\n        dist_type = []\n        l = input()\n        l = list(map(int, l.split()))\n        f = l.pop(0)\n        c1 = l.count(1)\n        dist_type.append(c1)\n        c2 = l.count(2)\n        dist_type.append(c2)\n        c3 = l.count(3)\n        dist_type.append(c3)\n        c4 = l.count(4)\n        dist_type.append(c4)\n        c5 = l.count(5)\n        dist_type.append(c5)\n        c6 = l.count(6)\n        dist_type.append(c6)\n        max_types = len([x for x in dist_type if x > 0])\n        while max_types > 3:\n            zero_count = dist_type.count(0)\n            if zero_count == 0:\n                min_bags_having_all_type = min(dist_type)\n                f += min_bags_having_all_type * 4\n                dist_type = [x - min_bags_having_all_type for x in dist_type]\n                max_types = len([x for x in dist_type if x > 0])\n                continue\n            elif zero_count == 1:\n                min_bags_having_all_type = heapq.nsmallest(2, dist_type)[-1]\n                f += min_bags_having_all_type * 2\n            elif zero_count == 2:\n                min_bags_having_all_type = heapq.nsmallest(3, dist_type)[-1]\n                f += min_bags_having_all_type * 1\n            for j in range(len(dist_type)):\n                if dist_type[j] > 0:\n                    dist_type[j] = dist_type[j] - min_bags_having_all_type\n            max_types = len([x for x in dist_type if x > 0])\n        score.append(f)\n    m = max(score)\n    c = score.count(m)\n    if c >= 2:\n        print('tie')\n    else:\n        pos = score.index(m)\n        if pos == 0:\n            print('chef')\n        else:\n            print(pos + 1)", "T = int(input())\nwhile T > 0:\n    N = int(input())\n    points = []\n    while N > 0:\n        temp = input()\n        p1 = temp.split()\n        x = int(p1[0])\n        p1.remove(p1[0])\n        c1 = [p1.count('1'), p1.count('2'), p1.count('3'), p1.count('4'), p1.count('5'), p1.count('6')]\n        c2 = [x for x in c1 if x > 0]\n        l = len(c2)\n        while l > 3:\n            m = min(c2)\n            if l == 6:\n                x += m * 4\n            elif l == 5:\n                x += m * 2\n            elif l == 4:\n                x += m\n            c2 = [x - m for x in c2 if x - m > 0]\n            l = len(c2)\n        points.append(x)\n        N -= 1\n    win_points = max(points)\n    if points.count(win_points) > 1:\n        print('tie')\n    elif points[0] == win_points:\n        print('chef')\n    else:\n        print(points.index(win_points) + 1)\n    T -= 1", "def method():\n    t = int(input())\n    k = 0\n    while k < t:\n        p = int(input())\n        li = []\n        n_l = []\n        l = 0\n        pnt = []\n        while l < p:\n            li1 = [int(x) for x in input().strip().split(' ')]\n            n_l.append(li1[0])\n            li1.remove(li1[0])\n            li.append(li1)\n            li2 = []\n            li2 = list(set(li1))\n            max_count = 0\n            for i in range(len(li2)):\n                cnt = li1.count(li2[i])\n                if cnt > max_count:\n                    max_count = cnt\n            li3 = []\n            for i in range(max_count):\n                li3.append([])\n            for i in range(len(li2)):\n                cnt = li1.count(li2[i])\n                for j in range(cnt):\n                    li3[j].append(li2[i])\n            pt = len(li1)\n            for i in range(len(li3)):\n                if len(li3[i]) == 4:\n                    pt += 1\n                elif len(li3[i]) == 5:\n                    pt += 2\n                elif len(li3[i]) == 6:\n                    pt += 4\n            pnt.append(pt)\n            l += 1\n        Max = max(pnt)\n        if pnt.count(Max) == 1:\n            index = pnt.index(Max)\n            if index == 0:\n                print('chef')\n            else:\n                print(str(index + 1))\n        else:\n            print('tie')\n        k += 1\nmethod()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    score = []\n    for j in range(n):\n        li = [int(x) for x in input().strip().split(' ')]\n        st = li[1:len(li)]\n        coc = []\n        temp = li[0]\n        coc.append(st.count(1))\n        coc.append(st.count(2))\n        coc.append(st.count(3))\n        coc.append(st.count(4))\n        coc.append(st.count(5))\n        coc.append(st.count(6))\n        maxcount = max(coc)\n        bag = [0] * maxcount\n        for k in range(6):\n            for m in range(coc[k]):\n                bag[m] += 1\n        for k in range(maxcount):\n            if bag[k] == 4:\n                temp += 1\n            if bag[k] == 5:\n                temp += 2\n            if bag[k] == 6:\n                temp += 4\n        score.append(temp)\n    m = max(score)\n    if score.count(m) == 1:\n        if m == score[0]:\n            print('chef')\n        else:\n            print(score.index(m) + 1)\n    else:\n        print('tie')", "import collections\nfrom collections import Counter\nk = int(input())\nfor i in range(k):\n    n = int(input())\n    q = []\n    for j in range(n):\n        count1 = 0\n        l = []\n        l1 = []\n        nums = input().split()\n        for w in nums:\n            l.append(int(w))\n        n1 = l[0]\n        l = sorted(l[1:])\n        c = Counter(l)\n        od = collections.OrderedDict(sorted(c.items()))\n        l1 = c.values()\n        l1 = list(l1)\n        x = 1\n        while x:\n            r = 0\n            count = 0\n            i1 = 0\n            j1 = 0\n            for i1 in range(len(l1)):\n                if l1[i1] is not 0:\n                    l1[i1] = l1[i1] - 1\n                    count = count + 1\n            if count is 4:\n                count1 = count1 + 1\n                count = 0\n            elif count is 5:\n                count1 = count1 + 2\n                count = 0\n            elif count is 6:\n                count1 = count1 + 4\n                count = 0\n            for j1 in range(len(l1)):\n                if l1[j1] > 0:\n                    r = r + 1\n            if r < 4:\n                x = 0\n        count1 = count1 + n1\n        q.append(count1)\n    count3 = 0\n    m = max(q)\n    for i in range(len(q)):\n        if q[i] is m:\n            count3 = count3 + 1\n            x = i\n    if count3 > 1:\n        print('tie')\n    elif q[0] is m:\n        print('chef')\n    else:\n        print(x + 1)", "t = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    max = -1\n    winner_index = 0\n    tie_flag = 0\n    for j in range(n):\n        ip = list(map(int, input().split(' ')))\n        no_of_cookies = ip[0]\n        cookie_type = ip[1:]\n        points = no_of_cookies\n        hit = [0 for k in range(6)]\n        for x in cookie_type:\n            hit[x - 1] += 1\n        flag = 0\n        while True:\n            zero_flag = 0\n            count = 0\n            for k in range(6):\n                if hit[k] > 0:\n                    hit[k] -= 1\n                    count += 1\n                else:\n                    zero_flag += 1\n            if zero_flag == 6:\n                break\n            if count == 4:\n                points += 1\n            elif count == 5:\n                points += 2\n            elif count == 6:\n                points += 4\n        if points == max:\n            tie_flag = 1\n        elif points > max:\n            max = points\n            tie_flag = 0\n            winner_index = j + 1\n    if tie_flag == 1:\n        ans.append('tie')\n    elif winner_index == 1:\n        ans.append('chef')\n    else:\n        ans.append(winner_index)\nfor x in ans:\n    print(x)", "__author__ = 'Nikhil Erkimutt'\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    max_score = 0\n    winner = ''\n    for i in range(n):\n        l = list(map(int, input().split()))\n        score = l[0]\n        l = l[1:]\n        s = len(set(l))\n        cc = [0, 0, 0, 0, 0, 0]\n        for j in l:\n            cc[j - 1] += 1\n        while s > 3:\n            m = min((x for x in cc if x != 0))\n            if s == 6:\n                score += m * 4\n            elif s == 5:\n                score += m * 2\n            else:\n                score += m\n            for j in range(6):\n                if cc[j] != 0:\n                    cc[j] -= m\n                    if cc[j] == 0:\n                        s -= 1\n        if score == max_score:\n            winner = 'tie'\n        elif score > max_score:\n            winner = i + 1\n            max_score = score\n    if winner == 1:\n        print('chef')\n    else:\n        print(winner)", "t = int(input().strip())\nfor z in range(0, t):\n    N = int(input().strip())\n    gc = 0\n    tc = 0\n    ca = []\n    for xy in range(0, N):\n        c = [int(i) for i in input().strip().split(' ')]\n        n = c[0]\n        del c[0]\n        freq = [0] * 7\n        for i in c:\n            freq[i] += 1\n        freq = [i for i in freq if i > 0]\n        x = len(freq)\n        count = n\n        while x > 3:\n            if x == 4:\n                count += min(freq)\n                mini = min(freq)\n                for i in range(0, len(freq)):\n                    freq[i] -= mini\n                freq = [i for i in freq if i > 0]\n                x = len(freq)\n            if x == 5:\n                count += min(freq) * 2\n                mini = min(freq)\n                for i in range(0, len(freq)):\n                    freq[i] -= mini\n                freq = [i for i in freq if i > 0]\n                x = len(freq)\n            if x == 6:\n                count += min(freq) * 4\n                mini = min(freq)\n                for i in range(0, len(freq)):\n                    freq[i] -= mini\n                freq = [i for i in freq if i > 0]\n                x = len(freq)\n        ca.append(count)\n        if gc < count:\n            gc = count\n            ind = xy + 1\n    v = [i for i in ca if i == gc]\n    if len(v) > 1:\n        print('tie')\n    elif ind == 1:\n        print('chef')\n    else:\n        print(ind)", "t = input()\nt = int(t)\nans = []\nfor i in range(0, t):\n    n = input()\n    n = int(n)\n    comp = []\n    cal = []\n    for k in range(0, 6):\n        cal.append(0)\n    for j in range(0, n):\n        c = input()\n        c = c.split(' ')\n        for k in range(0, 6):\n            cal[k] = 0\n        for k in range(0, int(c[0])):\n            g = int(c[k + 1])\n            cal[g - 1] = cal[g - 1] + 1\n        cal.sort()\n        r = int(c[0]) + cal[0] * 4 + (cal[1] - cal[0]) * 2 + (cal[2] - cal[1])\n        comp.append(r)\n    m = max(comp)\n    count = 0\n    for j in range(0, n):\n        if m == comp[j]:\n            count = count + 1\n            an = j\n        if count == 2:\n            an = -1\n            break\n    ans.append(an)\nfor i in range(0, t):\n    if ans[i] == -1:\n        print('tie')\n    elif ans[i] == 0:\n        print('chef')\n    else:\n        print(ans[i] + 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    point = []\n    (tie, maximum, winner) = (1, 0, 0)\n    if n == 1:\n        y = input()\n        tie = 0\n    else:\n        for j in range(n):\n            y = input()\n            y = y.split(' ')\n            point.append(int(y[0]))\n            z = 6 * [0]\n            count = 0\n            for k in range(1, len(y)):\n                z[int(y[k]) - 1] += 1\n            for l in range(6):\n                if z[l] > 0:\n                    count += 1\n            while count > 3:\n                if count == 6:\n                    point[j] += 4\n                    for m in range(len(z)):\n                        z[m] -= 1\n                    count = 0\n                    for l in range(6):\n                        if z[l] > 0:\n                            count += 1\n                elif count == 5:\n                    point[j] += 2\n                    for m in range(len(z)):\n                        z[m] -= 1\n                    count = 0\n                    for l in range(6):\n                        if z[l] > 0:\n                            count += 1\n                elif count == 4:\n                    point[j] += 1\n                    for m in range(len(z)):\n                        z[m] -= 1\n                    count = 0\n                    for l in range(6):\n                        if z[l] > 0:\n                            count += 1\n                else:\n                    point[j] += 0\n            if point[j] != maximum:\n                if point[j] > maximum:\n                    tie = 0\n                    maximum = point[j]\n                    winner = j\n            else:\n                tie = 1\n    if tie:\n        print('tie')\n    elif winner == 0:\n        print('chef')\n    else:\n        print(str(winner + 1))", "import sys\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    (total, c, comb) = ([], [], [])\n    for i in range(n):\n        inp = input().split()\n        c.append(int(inp[0]))\n        comb.append({})\n        for j in range(1, c[i] + 1):\n            comb[i][int(inp[j])] = comb[i].get(int(inp[j]), 0) + 1\n    total = c[:]\n    for i in range(n):\n        while len(comb[i]) > 3:\n            minimum = min(comb[i].values())\n            if len(comb[i]) == 6:\n                total[i] += minimum * 4\n            elif len(comb[i]) == 5:\n                total[i] += minimum * 2\n            elif len(comb[i]) == 4:\n                total[i] += minimum\n            keys = list(comb[i].keys())\n            for key in keys:\n                if comb[i][key] == minimum:\n                    del comb[i][key]\n                else:\n                    comb[i][key] -= minimum\n    m = max(total)\n    if total.count(m) > 1:\n        print('tie')\n    elif total.index(m) == 0:\n        print('chef')\n    else:\n        print(total.index(m) + 1)", "import collections\nt = int(input())\ns = []\ncook = [1, 3]\ncount = 0\ns1 = []\n\ndef remove_min(l, m):\n    for j in range(0, len(l)):\n        l[j] = l[j] - m\n    for i in l:\n        if i == 0:\n            l.remove(0)\nfor i in range(t):\n    n = int(input())\n    del cook[:]\n    cook = []\n    for j in range(0, n):\n        s = list(map(int, input().strip().split()))\n        freq = collections.Counter(s[1:])\n        for value in freq.values():\n            s1.append(value)\n        while len(s1) >= 4:\n            mi = min(s1)\n            if len(s1) == 4:\n                s[0] = s[0] + mi * 1\n                remove_min(s1, mi)\n            elif len(s1) == 5:\n                s[0] = s[0] + mi * 2\n                remove_min(s1, mi)\n            else:\n                s[0] = s[0] + mi * 4\n                remove_min(s1, mi)\n        cook.append(s[0])\n        del s1[:]\n    m = max(cook)\n    index = cook.index(max(cook))\n    count = cook.count(m)\n    if index == 0 and count == 1:\n        print('chef')\n    elif count == 1:\n        print(index + 1)\n    else:\n        print('tie')", "def func(hash):\n    if not isinstance(hash, dict):\n        return 0\n    else:\n        tmp = list(hash.keys())\n        for i in tmp:\n            if hash[i] < 1:\n                del hash[i]\n        return len(hash)\nt = int(input())\nwhile t:\n    n = int(input())\n    friends = []\n    score = []\n    for _ in range(n):\n        (c, *b) = map(int, input().split())\n        friends.append([b, {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}, c])\n        score.append(c)\n    for i in range(n):\n        d = friends[i][1]\n        for j in friends[i][0]:\n            d[j] += 1\n        le = func(d)\n        while le > 3:\n            m = min(d.values())\n            if le == 6:\n                score[i] += m * 4\n            elif le == 5:\n                score[i] += m * 2\n            else:\n                score[i] += m\n            for k in d.keys():\n                d[k] -= m\n            le = func(d)\n    tmp = max(score)\n    if score.count(tmp) > 1:\n        print('tie')\n    elif score.index(tmp) == 0:\n        print('chef')\n    else:\n        print(score.index(tmp) + 1)\n    t -= 1", "import sys\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    max = 0\n    for j in range(n):\n        a = [int(l) for l in input().split(' ')]\n        num = a[0]\n        a.remove(a[0])\n        temp = 0\n        b = [0, 0, 0, 0, 0, 0]\n        for k in range(len(b)):\n            b[k] = a.count(k + 1)\n        while b != [0, 0, 0, 0, 0, 0]:\n            inx = 0\n            for k in range(len(b)):\n                if b[k] > 0:\n                    inx += 1\n                    b[k] -= 1\n            if inx >= 6:\n                temp += 4\n            elif inx >= 5:\n                temp += 2\n            elif inx >= 4:\n                temp += 1\n        num = len(a) + temp\n        if max < num:\n            max = num\n            if j == 0:\n                ans = 'chef'\n            else:\n                ans = j + 1\n        elif max == num:\n            ans = 'tie'\n    print(ans)", "def mapping(a):\n    if a < 4:\n        return 0\n    if a == 4:\n        return 1\n    if a == 5:\n        return 2\n    if a == 6:\n        return 4\n\ndef get_score(a):\n    from collections import defaultdict\n    score = int(a[0])\n    b = [int(i) for i in a[1:]]\n    count = [0] * 6\n    for each in b:\n        count[each - 1] += 1\n    while len(count) > 3:\n        if min(count) == 0:\n            count.remove(0)\n        else:\n            score += min(count) * mapping(len(count))\n            minn = min(count)\n            for i in range(len(count)):\n                count[i] -= minn\n    return score\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    count = []\n    for i in range(n):\n        a = input().split()\n        count.append(get_score(a))\n    indices = [i for (i, x) in enumerate(count) if x == max(count)]\n    if len(indices) > 1:\n        print('tie')\n    elif len(indices) == 1:\n        if indices[0] == 0:\n            print('chef')\n        else:\n            print(indices[0] + 1)\n    t -= 1", "t = int(input())\nwhile t:\n    s = []\n    t -= 1\n    n = int(input())\n    for i in range(n):\n        x = list(map(int, input().split()))\n        x.pop(0)\n        f = [0] * 6\n        for j in range(len(x)):\n            f[x[j] - 1] += 1\n        temp = []\n        p = sum(f)\n        for j in range(6):\n            if f[j] != 0:\n                temp.append(f[j])\n        if len(temp) == 6:\n            temp = sorted(temp)\n            b = temp[0]\n            for j in range(6):\n                temp[j] -= b\n            p += 4 * b\n        temp2 = []\n        for j in range(len(temp)):\n            if temp[j] != 0:\n                temp2.append(temp[j])\n        if len(temp2) == 5:\n            temp2 = sorted(temp2)\n            b = temp2[0]\n            for j in range(5):\n                temp2[j] -= b\n            p += 2 * b\n        temp = []\n        for j in range(len(temp2)):\n            if temp2[j] != 0:\n                temp.append(temp2[j])\n        if len(temp) == 4:\n            temp = sorted(temp)\n            b = temp[0]\n            for j in range(4):\n                temp[j] -= b\n            p += b\n        s.append(p)\n    mx = max(s)\n    count = 0\n    for i in range(len(s)):\n        if s[i] == mx:\n            count += 1\n    if count > 1:\n        print('tie')\n    elif mx == s[0]:\n        print('chef')\n    else:\n        for i in range(1, len(s)):\n            if mx == s[i]:\n                print(i + 1)\n                break", "import operator\n\ndef find(a):\n    f = [0] * 6\n    ans = 0\n    for i in a:\n        f[i - 1] += 1\n    while True:\n        cnt = 0\n        for j in range(0, len(f)):\n            if f[j] > 0:\n                cnt += 1\n                f[j] -= 1\n        if cnt == 4:\n            ans += 1\n        elif cnt == 5:\n            ans += 2\n        elif cnt == 6:\n            ans += 4\n        else:\n            break\n    return ans\nt = int(input())\nfor i in range(t):\n    player = int(input())\n    d = [0] * player\n    for j in range(0, player):\n        cookie = list(map(int, input().split()))\n        total = cookie[0]\n        cookie.remove(cookie[0])\n        point = total\n        d[j] = point + find(cookie)\n    sec = -1\n    cur = -1\n    index = 0\n    for k in range(0, player):\n        if d[k] > cur:\n            cur = d[k]\n            index = k\n        elif d[k] == cur:\n            sec = d[k]\n    if sec == cur:\n        print('tie')\n    elif index == 0:\n        print('chef')\n    else:\n        print(str(index + 1))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    flag = 0\n    for j in range(n):\n        temp = [0, 0, 0, 0, 0, 0]\n        ls = list(map(int, input().split()))\n        s = ls[0]\n        for k in range(1, ls[0] + 1):\n            y = ls[k]\n            temp[y - 1] = temp[y - 1] + 1\n        temp.sort()\n        s = s + 2 * temp[0] + temp[1] + temp[2]\n        if flag == 0:\n            max = s\n            index = j\n            tie = -1\n            flag = 1\n        if s == max:\n            tie = tie + 1\n        elif s > max:\n            max = s\n            index = j\n            tie = 0\n    if tie > 0:\n        print('tie')\n    elif index == 0:\n        print('chef')\n    else:\n        print(index + 1)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    m = []\n    while n > 0:\n        sum = 0\n        q = []\n        l = [int(x) for x in input().split()]\n        sum = l[0]\n        p = []\n        s = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}\n        for i in range(1, len(l)):\n            s[l[i]] += 1\n        for i in s:\n            p.append(s[i])\n        p.sort()\n        sum = sum + p[0] * 4 + (p[1] - p[0]) * 2 + (p[2] - p[0] - (p[1] - p[0])) * 1\n        m.append(sum)\n        n -= 1\n    d = m.index(max(m))\n    c = 0\n    k = max(m)\n    for i in range(len(m)):\n        if m[i] == k:\n            c += 1\n    if c >= 2:\n        print('tie')\n    elif d == 0 or len(m) == 1:\n        print('chef')\n    else:\n        print(d + 1)\n    t -= 1", "from collections import OrderedDict\nfrom operator import itemgetter\nfor _ in range(int(input())):\n    n = int(input())\n    res = {}\n    for i in range(n):\n        l = [int(a) for a in input().split()]\n        temp = l[0]\n        t = []\n        for j in range(6):\n            c = l.count(j + 1)\n            if j + 1 == temp:\n                c -= 1\n            t.append(c)\n        t.sort()\n        temp = temp + 4 * t[0] + 2 * (t[1] - t[0]) + t[2] - t[0] - (t[1] - t[0])\n        res[i] = temp\n    res = OrderedDict(sorted(res.items(), key=itemgetter(1)))\n    val_l = list(res.values())\n    key_l = list(res.keys())\n    if len(val_l) == 1:\n        print('chef')\n    elif val_l[n - 1] == val_l[n - 2]:\n        print('tie')\n    elif key_l[n - 1] == 0:\n        print('chef')\n    else:\n        print(key_l[n - 1] + 1)", "def getMin(a, n):\n    if len(a) < n:\n        return 0\n    ans = a[0]\n    for i in range(n):\n        ans = min(ans, a[i])\n    return ans\n\ndef calc(a):\n    ans = 0\n    while getMin(a, 6) > 0:\n        ans += 10\n        for i in range(6):\n            a[i] -= 1\n    a.sort(reverse=True)\n    while getMin(a, 5) > 0:\n        ans += 7\n        for i in range(5):\n            a[i] -= 1\n    a.sort(reverse=True)\n    while getMin(a, 4) > 0:\n        ans += 5\n        for i in range(4):\n            a[i] -= 1\n    ans += sum(a)\n    return ans\nT = int(input())\nwhile T > 0:\n    T -= 1\n    n = int(input())\n    bestScore = 0\n    bestCount = 0\n    answer = 0\n    for i in range(n):\n        a = list(map(int, input().split()))\n        c = []\n        for j in range(1, len(a)):\n            while len(c) < a[j]:\n                c.append(0)\n            c[a[j] - 1] += 1\n        cur = calc(c)\n        if bestScore < cur:\n            bestScore = cur\n            bestCount = 1\n            answer = i + 1\n        elif bestScore == cur:\n            bestCount += 1\n    if bestCount > 1:\n        print('tie')\n    elif answer == 1:\n        print('chef')\n    else:\n        print(answer)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    score = []\n    for i in range(n):\n        t = list(map(int, input().split()))\n        c = t.pop(0)\n        num = [0] * 6\n        for v in t:\n            num[v - 1] += 1\n        num.sort()\n        score.append((num[0] * 4 + (num[1] - num[0]) * 2 + (num[2] - num[1]) + c, i))\n    score.append((-1, -1))\n    score.sort()\n    score.reverse()\n    if score[0][0] == score[1][0]:\n        print('tie')\n    elif score[0][1] == 0:\n        print('chef')\n    else:\n        print(score[0][1] + 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    point = []\n    (tie, maximum, winner) = (1, 0, 0)\n    if n == 1:\n        y = input()\n        tie = 0\n    else:\n        for j in range(n):\n            y = input()\n            y = y.split(' ')\n            point.append(int(y[0]))\n            z = 6 * [0]\n            count = 0\n            for k in range(1, len(y)):\n                z[int(y[k]) - 1] += 1\n            for l in range(6):\n                if z[l] > 0:\n                    count += 1\n            while count > 3:\n                if count == 6:\n                    point[j] += 4\n                    for m in range(len(z)):\n                        z[m] -= 1\n                    count = 0\n                    for l in range(6):\n                        if z[l] > 0:\n                            count += 1\n                elif count == 5:\n                    point[j] += 2\n                    for m in range(len(z)):\n                        z[m] -= 1\n                    count = 0\n                    for l in range(6):\n                        if z[l] > 0:\n                            count += 1\n                elif count == 4:\n                    point[j] += 1\n                    for m in range(len(z)):\n                        z[m] -= 1\n                    count = 0\n                    for l in range(6):\n                        if z[l] > 0:\n                            count += 1\n                else:\n                    point[j] += 0\n            if point[j] != maximum:\n                if point[j] > maximum:\n                    tie = 0\n                    maximum = point[j]\n                    winner = j\n            else:\n                tie = 1\n    if tie:\n        print('tie')\n    elif winner == 0:\n        print('chef')\n    else:\n        print(str(winner + 1))", "lookupformultilier = [0, 0, 0, 0, 1, 2, 4]\n\ndef calc_score(s):\n    a = list(map(int, s.split()))\n    (n, cookietypes) = (a[0], a[1:])\n    score = n\n    cookiehash = [0, 0, 0, 0, 0, 0, 0]\n    for i in cookietypes:\n        cookiehash[i] += 1\n    l = len([i for i in cookiehash if i > 0])\n    mintype = min([i for i in cookiehash if i > 0])\n    while l > 0:\n        mintype = min([i for i in cookiehash if i > 0])\n        noofcookies = len([i for i in cookiehash if i > 0])\n        multiplier = lookupformultilier[noofcookies]\n        score += mintype * multiplier\n        for i in range(7):\n            if cookiehash[i] is not 0:\n                cookiehash[i] -= mintype\n        l = len([i for i in cookiehash if i > 0])\n    return score\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    scores = [0]\n    for j in range(n):\n        scores.append(calc_score(input()))\n    max1 = max(scores)\n    index = scores.index(max1)\n    scores.remove(max1)\n    max2 = max(scores)\n    if max1 == max2:\n        print('tie')\n    elif index is 1:\n        print('chef')\n    else:\n        print(index)", "t = int(input())\nb = '123456'\nwhile t > 0:\n    n = int(input())\n    flag = 0\n    count1 = 0\n    index = 1\n    sum = 0\n    for i in range(1, n + 1):\n        a = []\n        a = input().split()\n        c = []\n        for k in b:\n            count = 0\n            for j in a[1:]:\n                if k == j:\n                    count += 1\n            if count > 0:\n                c.append(count)\n        if len(c) < 4:\n            sum = int(a[0])\n        else:\n            bonus = 0\n            c = sorted(c)\n            d = len(c)\n            if d == 4:\n                bonus += c[0]\n            elif d == 5:\n                bonus += 2 * c[0]\n                c[1] = c[1] - c[0]\n                if c[1] > 0:\n                    bonus += c[1]\n            else:\n                bonus += 4 * c[0]\n                c[1] = c[1] - c[0]\n                c[2] = c[2] - c[0]\n                if c[1] > 0:\n                    bonus += 2 * c[1]\n                    c[2] = c[2] - c[1]\n                if c[2] > 0:\n                    bonus += c[2]\n            sum = int(a[0]) + bonus\n        if sum > count1:\n            index = i\n            count1 = sum\n            flag = 0\n        elif sum == count1:\n            index = i\n            flag = 1\n    if index == 1 and flag != 1:\n        print('chef')\n    elif flag == 1:\n        print('tie')\n    else:\n        print(index)\n    t -= 1", "from collections import Counter\nbonus = {6: 4, 5: 2, 4: 1, 3: 0, 2: 0, 1: 0}\n\ndef reduceDict(dictionary):\n    totalBonus = 0\n    if bool(dictionary):\n        minimum = min(dictionary.values())\n        if minimum != 0:\n            for i in dictionary.keys():\n                dictionary[i] = dictionary[i] - minimum\n            totalBonus = totalBonus + bonus[len(dictionary)] * minimum\n            for i in list(dictionary):\n                if dictionary[i] == 0:\n                    dictionary.pop(i, 0)\n            if bool(dictionary):\n                totalBonus = totalBonus + reduceDict(dictionary)\n                return totalBonus\n            else:\n                return totalBonus\n    else:\n        return totalBonus\nt = int(input())\nwhile t:\n    players = int(input())\n    player = []\n    for i in range(0, players):\n        cookies = list(map(int, input().split(' ')))\n        player.append(0)\n        player[i] = player[i] + cookies.pop(0)\n        initial = player[i]\n        cookies = Counter(cookies)\n        bonusPoints = reduceDict(cookies)\n        player[i] = player[i] + bonusPoints\n        playerNo = player.index(max(player))\n        rankClash = player.count(max(player))\n    if playerNo == 0 and rankClash == 1:\n        print('chef')\n    elif playerNo != 0 and rankClash == 1:\n        print(playerNo + 1)\n    elif rankClash > 1:\n        print('tie')\n    t = t - 1", "t = int(input())\nj = 1\nwhile j <= t:\n    maxx = 0\n    n = int(input())\n    ans = [0] * n\n    for i in range(0, n):\n        c = [int(z) for z in input().split()]\n        arr = [0] * 6\n        count = 0\n        for m in range(1, len(c)):\n            r = c[m] - 1\n            if arr[r] == 0:\n                count += 1\n            arr[r] += 1\n        arr.sort()\n        if count == 4:\n            ans[i] = c[0] + arr[2]\n        elif count == 5:\n            ans[i] = c[0] + arr[1] + arr[2]\n        elif count == 6:\n            ans[i] = c[0] + 2 * arr[0] + arr[1] + arr[2]\n        else:\n            ans[i] = c[0]\n        if ans[i] > maxx:\n            maxx = ans[i]\n    count = 0\n    for i in range(0, n):\n        if ans[i] == maxx:\n            count += 1\n            k = i\n    if count > 1:\n        print('tie')\n    elif k == 0:\n        print('chef')\n    else:\n        print(k + 1)\n    j += 1", "a = int(input())\nfor b in range(0, a):\n    c = int(input())\n    lis = []\n    points = 0\n    for d in range(0, c):\n        e = input().split()\n        no = int(e[0])\n        e = e[1:]\n        points = points + no\n        while len(set(e)) >= 4:\n            if len(set(e)) == 4:\n                points = points + 1\n            elif len(set(e)) == 5:\n                points = points + 2\n            elif len(set(e)) == 6:\n                points = points + 4\n            for i in set(e):\n                e.remove(i)\n        lis.append(points)\n        points = 0\n    maxval = max(lis)\n    winner = lis.index(max(lis)) + 1\n    if maxval not in lis[winner:]:\n        if winner == 1:\n            print('chef')\n        else:\n            print(winner)\n    elif maxval in lis[winner:]:\n        print('tie')", "result = []\nfor test_cases in range(int(input())):\n    win = []\n    counter = 0\n    for player in range(int(input())):\n        Sum = 0\n        cookies = input()\n        cookies = cookies.split()\n        no_of_cookies = int(cookies[0])\n        cookies = cookies[1:]\n        count_of_cookies = [cookies.count('1'), cookies.count('2'), cookies.count('3'), cookies.count('4'), cookies.count('5'), cookies.count('6')]\n        for i in count_of_cookies:\n            List = []\n            for j in count_of_cookies:\n                if j > 0:\n                    List.append(j)\n            x = len(List)\n            if x < 4:\n                break\n            minimum = min(List)\n            Sum += minimum * (4 * int(x / 6) + 2 * int(x % 6 / 5) + int(x % 6 % 5 / 4))\n            for z in range(len(count_of_cookies)):\n                count_of_cookies[z] = count_of_cookies[z] - minimum\n        total_points = no_of_cookies + Sum\n        win.append(total_points)\n    max_value = max(win)\n    for item in win:\n        if max_value == item:\n            counter += 1\n            index = win.index(item)\n    if counter > 1:\n        print('tie')\n    elif index == 0:\n        print('chef')\n    else:\n        print(index + 1)", "t = int(input())\nwhile t:\n    n = int(input())\n    r = []\n    s = []\n    while n:\n        a = list(map(int, input().split()))\n        k = a[0]\n        a = a[1:]\n        z = len(a)\n        l = [[] for i in range(z)]\n        p = []\n        m = []\n        for i in range(k):\n            for j in range(z):\n                if a[i] not in l[j]:\n                    l[j].append(a[i])\n                    break\n        for i in range(len(l)):\n            if len(l[i]) < 4:\n                m.append(len(l[i]))\n            elif len(l[i]) == 4:\n                m.append(5)\n            elif len(l[i]) == 5:\n                m.append(7)\n            elif len(l[i]) == 6:\n                m.append(10)\n        s.append(sum(m))\n        n -= 1\n    if s.count(max(s)) > 1:\n        print('tie')\n    else:\n        d = s.index(max(s))\n        if d == 0:\n            print('chef')\n        else:\n            print(d + 1)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    c = 0\n    points = [0] * 10000\n    for j in range(n):\n        inp = list(map(int, input().split()))\n        c = inp[0]\n        val = inp[1:]\n        fre = [0] * 10000\n        points[j] = 0\n        counter = 0\n        for k in range(c):\n            fre[val[k] - 1] = fre[val[k] - 1] + 1\n        mf = 0\n        for kk in range(c):\n            if fre[kk] > mf:\n                mf = fre[kk]\n        for pp in range(mf):\n            ponter = 0\n            for mm in range(6):\n                fre[mm] = fre[mm] - 1\n                if fre[mm] >= 0:\n                    ponter = ponter + 1\n            if ponter == 4:\n                points[j] = points[j] + 1\n            elif ponter == 5:\n                points[j] = points[j] + 2\n            elif ponter == 6:\n                points[j] = points[j] + 4\n            else:\n                points[j] = points[j]\n        points[j] = points[j] + c\n    max = 0\n    index = 0\n    for ii in range(n):\n        if points[ii] >= max:\n            max = points[ii]\n            index = ii\n    count = 0\n    for jj in range(n):\n        if points[jj] == max:\n            count = count + 1\n    if count == 1:\n        if index == 0:\n            print('chef')\n        else:\n            print(index + 1)\n    else:\n        print('tie')", "import sys\nimport collections\nt = int(sys.stdin.readline())\n\ndef takeAwayCookies(storage):\n    cookiesNotTaken = {1, 2, 3, 4, 5, 6}\n    for (id, type) in enumerate(storage.most_common(6)):\n        storage[type[0]] -= 1\n        cookiesNotTaken.remove(type[0])\n        storage += collections.Counter()\n    if len(cookiesNotTaken) == 0:\n        return 4\n    elif len(cookiesNotTaken) == 1:\n        return 2\n    elif len(cookiesNotTaken) == 2:\n        return 1\nfor c in range(t):\n    numPlayers = int(sys.stdin.readline())\n    cookies = [[] for i in range(numPlayers)]\n    scores = [-1000 for i in range(numPlayers)]\n    for i in range(numPlayers):\n        cookies[i] = list(map(int, sys.stdin.readline().split()))\n        scores[i] = cookies[i].pop(0)\n        cookies[i] = collections.Counter(cookies[i])\n        numTypes = len(set(cookies[i]))\n        while numTypes > 3:\n            scores[i] = scores[i] + takeAwayCookies(cookies[i])\n            numTypes = len(set(cookies[i]))\n    maxScore = -1\n    maxPlayer = -1\n    tied = False\n    for (id, number) in enumerate(scores):\n        if number > maxScore:\n            maxScore = number\n            maxPlayer = id + 1\n            tied = False\n        elif number == maxScore:\n            tied = True\n    if tied:\n        print('tie')\n    elif maxPlayer == 1:\n        print('chef')\n    else:\n        print(maxPlayer)", "for _ in range(int(input())):\n    players = int(input())\n    scores = []\n    for p in range(players):\n        score = list(map(int, input().split()))\n        scores.append(score[0])\n        del score[0]\n        types = [None] * 6\n        for i in range(6):\n            types[i] = score.count(i + 1)\n        types.sort()\n        types[2] -= types[1]\n        types[1] -= types[0]\n        scores[p] += types[0] * 4 + types[1] * 2 + types[2] * 1\n    highest = max(scores)\n    if scores.count(highest) > 1:\n        print('tie')\n    else:\n        pos = scores.index(highest)\n        if pos == 0:\n            print('chef')\n        else:\n            print(pos + 1)", "test = int(input())\nwhile test > 0:\n    test = test - 1\n    z = {}\n    n = int(input())\n    c = 0\n    currSum = 0\n    maxSum = 0\n    hash1 = {}\n    maxIndex = 0\n    flag = 0\n    for i in range(0, n):\n        currSum = 0\n        hash1.clear()\n        z.clear()\n        s = input()\n        mynums = [int(zz) for zz in s.split()]\n        c = int(mynums[0])\n        count = 0\n        for j in range(1, 7):\n            hash1[j] = 0\n        for j in range(0, c):\n            z[j] = int(mynums[j + 1])\n            if hash1[z[j]] == 0:\n                count = count + 1\n            hash1[z[j]] = hash1[z[j]] + 1\n        currSum = c\n        while count > 3:\n            if count == 4:\n                currSum = currSum + 1\n            if count == 5:\n                currSum = currSum + 2\n            if count == 6:\n                currSum = currSum + 4\n            count = 0\n            for j in range(1, 7):\n                if hash1[j] > 0:\n                    hash1[j] = hash1[j] - 1\n                    if hash1[j] > 0:\n                        count = count + 1\n        if currSum == maxSum:\n            flag = 1\n        if maxSum < currSum:\n            maxSum = currSum\n            maxIndex = i\n            flag = 0\n    if maxIndex == 0 and flag == 0:\n        print('chef')\n    elif flag == 1:\n        print('tie')\n    else:\n        print(maxIndex + 1)", "for i in range(int(input())):\n    n = int(input())\n    a = 'chef'\n    b = 0\n    c = 0\n    for i in range(0, n):\n        b = 0\n        l = list(map(int, input().split()))\n        b = b + l[0]\n        v = set(l[1:])\n        d = len(v)\n        while d > 3:\n            h = []\n            if d >= 6:\n                b = b + 4\n                for k in range(1, len(l)):\n                    if l[k] not in h:\n                        h.append(l[k])\n                    if len(h) == 6:\n                        break\n                for j in h:\n                    l.remove(j)\n                v = set(l[1:])\n                d = len(v)\n            elif d >= 5:\n                b = b + 2\n                for k in range(1, len(l)):\n                    if l[k] not in h:\n                        h.append(l[k])\n                    if len(h) == 5:\n                        break\n                for j in h:\n                    l.remove(j)\n                v = set(l[1:])\n                d = len(v)\n            elif d >= 4:\n                b = b + 1\n                for k in range(1, len(l)):\n                    if l[k] not in h:\n                        h.append(l[k])\n                    if len(h) == 4:\n                        break\n                for j in h:\n                    l.remove(j)\n                v = set(l[1:])\n                d = len(v)\n        if b > c and c == 0 and (a != 'tie'):\n            c = b\n        elif b > c and c == 0:\n            c = b\n            a = str(i + 1)\n        elif b > c and c != 0:\n            c = b\n            a = str(i + 1)\n        elif b == c:\n            c = b\n            a = 'tie'\n    print(a)", "for i in range(int(input())):\n    n = int(input())\n    a = 'chef'\n    b = 0\n    c = 0\n    for i in range(0, n):\n        b = 0\n        l = list(map(int, input().split()))\n        b = b + l[0]\n        v = set(l[1:])\n        d = len(v)\n        while d > 3:\n            h = []\n            if d >= 6:\n                b = b + 4\n                for k in range(1, len(l)):\n                    if l[k] not in h:\n                        h.append(l[k])\n                    if len(h) == 6:\n                        break\n                for j in h:\n                    l.remove(j)\n                v = set(l[1:])\n                d = len(v)\n            elif d >= 5:\n                b = b + 2\n                for k in range(1, len(l)):\n                    if l[k] not in h:\n                        h.append(l[k])\n                    if len(h) == 5:\n                        break\n                for j in h:\n                    l.remove(j)\n                v = set(l[1:])\n                d = len(v)\n            elif d >= 4:\n                b = b + 1\n                for k in range(1, len(l)):\n                    if l[k] not in h:\n                        h.append(l[k])\n                    if len(h) == 4:\n                        break\n                for j in h:\n                    l.remove(j)\n                v = set(l[1:])\n                d = len(v)\n        if b > c and c == 0 and (a != 'tie'):\n            c = b\n        elif b > c and c == 0:\n            c = b\n            a = str(i + 1)\n        elif b > c and c != 0:\n            c = b\n            a = str(i + 1)\n        elif b == c:\n            c = b\n            a = 'tie'\n    print(a)", "for i in range(int(input())):\n    n = int(input())\n    a = 'chef'\n    b = 0\n    c = 0\n    for i in range(0, n):\n        b = 0\n        l = list(map(int, input().split()))\n        b = b + l[0]\n        v = set(l[1:])\n        d = len(v)\n        while d > 3:\n            h = []\n            if d >= 6:\n                b = b + 4\n                for k in range(1, len(l)):\n                    if l[k] not in h:\n                        h.append(l[k])\n                    if len(h) == 6:\n                        break\n                for j in h:\n                    l.remove(j)\n                v = set(l[1:])\n                d = len(v)\n            elif d >= 5:\n                b = b + 2\n                for k in range(1, len(l)):\n                    if l[k] not in h:\n                        h.append(l[k])\n                    if len(h) == 5:\n                        break\n                for j in h:\n                    l.remove(j)\n                v = set(l[1:])\n                d = len(v)\n            elif d >= 4:\n                b = b + 1\n                for k in range(1, len(l)):\n                    if l[k] not in h:\n                        h.append(l[k])\n                    if len(h) == 4:\n                        break\n                for j in h:\n                    l.remove(j)\n                v = set(l[1:])\n                d = len(v)\n        if b > c and c == 0 and (a != 'tie'):\n            c = b\n        elif b > c and c == 0:\n            c = b\n            a = str(i + 1)\n        elif b > c and c != 0:\n            c = b\n            a = str(i + 1)\n        elif b == c:\n            c = b\n            a = 'tie'\n    print(a)", "t = int(input())\nli = []\npi = []\nfor i in range(0, t):\n    p = int(input())\n    pi = []\n    ki = []\n    hi = []\n    for j in range(0, p):\n        coun = 0\n        li = []\n        ji = []\n        li = [int(x) for x in input().split()]\n        s = li[0]\n        ji = []\n        coun = s\n        li = li[1:]\n        ji.append(li.count(1))\n        ji.append(li.count(2))\n        ji.append(li.count(3))\n        ji.append(li.count(4))\n        ji.append(li.count(5))\n        ji.append(li.count(6))\n        ji.sort()\n        for h in range(1, 105):\n            r = [x for x in ji if x >= h]\n            co = len(r)\n            if co == 4:\n                coun = coun + 1\n            elif co == 5:\n                coun = coun + 2\n            elif co >= 6:\n                coun = coun + 4\n            else:\n                coun = coun\n        ki.append(coun)\n    hi = sorted(ki, reverse=True)\n    hi.append(0)\n    if hi[0] == hi[1]:\n        print('tie')\n    elif ki.index(max(ki)) == 0:\n        print('chef')\n    else:\n        print(ki.index(max(ki)) + 1)", "t = int(input())\nli = []\npi = []\nfor i in range(0, t):\n    p = int(input())\n    pi = []\n    ki = []\n    hi = []\n    for j in range(0, p):\n        coun = 0\n        li = []\n        ji = []\n        li = [int(x) for x in input().split()]\n        s = li[0]\n        ji = []\n        coun = s\n        li = li[1:]\n        ji.append(li.count(1))\n        ji.append(li.count(2))\n        ji.append(li.count(3))\n        ji.append(li.count(4))\n        ji.append(li.count(5))\n        ji.append(li.count(6))\n        ji.sort()\n        for h in range(1, 105):\n            r = [x for x in ji if x >= h]\n            co = len(r)\n            if co == 4:\n                coun = coun + 1\n            elif co == 5:\n                coun = coun + 2\n            elif co >= 6:\n                coun = coun + 4\n            else:\n                coun = coun\n        ki.append(coun)\n    hi = sorted(ki, reverse=True)\n    hi.append(0)\n    if hi[0] == hi[1]:\n        print('tie')\n    elif ki.index(max(ki)) == 0:\n        print('chef')\n    else:\n        print(ki.index(max(ki)) + 1)", "from collections import Counter\nt = int(input())\nfor k in range(t):\n    n = int(input())\n    s = []\n    score = []\n    for j in range(n):\n        s.append(input().strip().split(' '))\n        sl = s[j][1:]\n        d = [0] * 7\n        for k in range(len(sl)):\n            d[int(sl[k])] += 1\n        d.sort()\n        score.append(int(s[j][0]))\n        freq = 0\n        for k in range(1, 7):\n            if d[k] != 0:\n                freq += 1\n        if freq == 4:\n            score[j] += d[3]\n        if freq == 5:\n            score[j] += d[2] + d[3]\n        if freq == 6:\n            score[j] += 2 * d[1] + d[2] + d[3]\n    maximum = max(score)\n    count = 0\n    for tt in range(n):\n        if score[tt] == maximum:\n            count += 1\n    if count > 1:\n        print('tie')\n    else:\n        ind = score.index(maximum)\n        if ind == 0:\n            print('chef')\n        else:\n            print(ind + 1)", "t = int(input())\ndict = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}\nfor k in range(0, t):\n    n = int(input())\n    pts = 0\n    maxpt = 0\n    tie = False\n    for i in range(0, n):\n        diff = 0\n        typ = input().split(' ', 1)\n        typ = typ[1].split(' ')\n        for ii in range(1, 7):\n            dict[ii] = 0\n        for ii in typ:\n            dict[int(ii)] += 1\n        ii = 0\n        typ = list(dict.values())\n        typ.sort()\n        while typ[ii] == 0:\n            ii += 1\n        if ii == 0:\n            pts = 4 * typ[0] + 2 * (typ[1] - typ[0])\n            if typ[2] - (typ[1] - typ[0]) - typ[0] > 0:\n                pts += typ[2] - typ[1]\n            pts += typ[0] + typ[1] + typ[2] + typ[3] + typ[4] + typ[5]\n        elif ii == 1:\n            pts = 2 * typ[1] + typ[2] - typ[1]\n            pts += typ[1] + typ[2] + typ[3] + typ[4] + typ[5]\n        elif ii == 2:\n            pts = typ[2]\n            pts += typ[2] + typ[3] + typ[4] + typ[5]\n        else:\n            pts = typ[3] + typ[4] + typ[5]\n        if pts > maxpt:\n            winr = i + 1\n            maxpt = pts\n            tie = False\n        elif pts == maxpt:\n            tie = True\n    if tie:\n        print('tie')\n    elif winr == 1:\n        print('chef')\n    else:\n        print(winr)", "def calculate(cookies):\n    score = len(cookies)\n    freqs = {}\n    for cookie in cookies:\n        if cookie in freqs:\n            freqs[cookie] += 1\n        else:\n            freqs[cookie] = 1\n    while True:\n        for i in ['1', '2', '3', '4', '5', '6']:\n            try:\n                if freqs[i] == 0:\n                    del freqs[i]\n            except KeyError:\n                continue\n        if len(freqs) == 6:\n            score += 4\n            freqs.update(((x, y - 1) for (x, y) in freqs.items()))\n        elif len(freqs) == 5:\n            score += 2\n            freqs.update(((x, y - 1) for (x, y) in freqs.items()))\n        elif len(freqs) == 4:\n            score += 1\n            freqs.update(((x, y - 1) for (x, y) in freqs.items()))\n        else:\n            break\n    return score\n\ndef maxScore(scores):\n    hScore = max(scores)\n    count = scores.count(hScore)\n    if count == 1:\n        winner = scores.index(hScore) + 1\n        if winner == 1:\n            return 'chef'\n        else:\n            return winner\n    else:\n        return 'tie'\n\ndef main():\n    t = int(input())\n    games = []\n    for i in range(t):\n        players = []\n        numPlayers = int(input())\n        for i in range(numPlayers):\n            player = []\n            line = input()\n            values = line.split()\n            player.append(values.pop(0))\n            player.append(values)\n            players.append(player)\n        games.append(players)\n    for players in games:\n        scores = []\n        for player in players:\n            scores.append(calculate(player[1]))\n        print(maxScore(scores))\nmain()", "def calc_score(d, i):\n    score = i\n    values = list(d.values())\n    values.sort()\n    score += values[0] * 4 + (values[1] - values[0]) * 2 + (values[2] - values[1])\n    return score\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    scores = {}\n    for j in range(1, N + 1):\n        cookies = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}\n        x = list(map(int, input().split(' ')))\n        for k in x[1:]:\n            cookies[k] += 1\n        scores[j] = calc_score(cookies, x[0])\n    winner = max(scores, key=scores.get)\n    s = sorted(list(scores.values()), reverse=True)\n    if N > 1 and s[0] == s[1]:\n        print('tie')\n    elif winner == 1:\n        print('chef')\n    else:\n        print(winner)", "T = int(input())\nfor x in range(T):\n    a = [-1]\n    n = int(input())\n    for j in range(1, n + 1):\n        c = list(map(int, input().split()))\n        a.append(c[0])\n        zero = 0\n        typ = [0 for x in range(7)]\n        for k in range(1, c[0] + 1):\n            typ[c[k]] += 1\n        for k in range(1, 7):\n            if typ[k] == 0:\n                zero += 1\n        if zero > 2:\n            continue\n        while zero >= 0 and zero <= 2:\n            if zero == 0:\n                a[j] += 4\n            elif zero == 1:\n                a[j] += 2\n            elif zero == 2:\n                a[j] += 1\n            zero = 0\n            for k in range(1, 7):\n                if typ[k] > 0:\n                    typ[k] -= 1\n                if typ[k] == 0:\n                    zero += 1\n    max_1 = a[1]\n    pos = 1\n    p = 2\n    while p <= n:\n        if a[p] > max_1:\n            max_1 = a[p]\n            pos = p\n        p += 1\n    f = 0\n    for k in range(1, n + 1):\n        if k == pos:\n            continue\n        elif a[k] == max_1:\n            f = 1\n    if f:\n        print('tie')\n    elif pos > 1:\n        print(pos)\n    elif pos == 1:\n        print('chef')", "def countBoxes(cookies):\n    bonus = 0\n    m = min(cookies)\n    r = cookies.index(m)\n    if m != 0:\n        bonus += 4 * m\n    for i in range(len(cookies)):\n        cookies[i] -= m\n    cookies = cookies[:r] + cookies[r + 1:]\n    m = min(cookies)\n    r = cookies.index(m)\n    if m != 0:\n        bonus += 2 * m\n    for i in range(len(cookies)):\n        cookies[i] -= m\n    cookies = cookies[:r] + cookies[r + 1:]\n    m = min(cookies)\n    r = cookies.index(m)\n    if m != 0:\n        bonus += 1 * m\n    return bonus\ncases = int(input())\nfor case in range(cases):\n    ps = int(input())\n    scores = []\n    tie = False\n    for p in range(ps):\n        play = input().split()\n        types = [0 for _ in range(6)]\n        for t in range(1, len(play)):\n            types[int(play[t]) - 1] += 1\n        score = int(play[0]) + countBoxes(types)\n        scores.append(score)\n    sort = sorted(scores, reverse=True)\n    if len(sort) == 1:\n        print('chef')\n    elif sort[0] == sort[1]:\n        print('tie')\n    elif sort[0] == scores[0]:\n        print('chef')\n    else:\n        print(scores.index(sort[0], 1) + 1)", "def countBoxes(cookies):\n    bonus = 0\n    m = min(cookies)\n    r = cookies.index(m)\n    if m != 0:\n        bonus += 4 * m\n    for i in range(len(cookies)):\n        cookies[i] -= m\n    cookies = cookies[:r] + cookies[r + 1:]\n    m = min(cookies)\n    r = cookies.index(m)\n    if m != 0:\n        bonus += 2 * m\n    for i in range(len(cookies)):\n        cookies[i] -= m\n    cookies = cookies[:r] + cookies[r + 1:]\n    m = min(cookies)\n    r = cookies.index(m)\n    if m != 0:\n        bonus += 1 * m\n    return bonus\ncases = int(input())\nfor case in range(cases):\n    ps = int(input())\n    scores = []\n    tie = False\n    for p in range(ps):\n        play = input().split()\n        types = [0 for _ in range(6)]\n        for t in range(1, len(play)):\n            types[int(play[t]) - 1] += 1\n        score = int(play[0]) + countBoxes(types)\n        scores.append(score)\n    sort = sorted(scores, reverse=True)\n    if len(sort) == 1:\n        print('chef')\n    elif sort[0] == sort[1]:\n        print('tie')\n    elif sort[0] == scores[0]:\n        print('chef')\n    else:\n        print(scores.index(sort[0], 1) + 1)", "def score(ar):\n    a = []\n    for i in range(6):\n        a.append(0)\n    for i in ar[1:]:\n        a[i - 1] += 1\n    a.sort()\n    return ar[0] + a[0] * 4 + (a[1] - a[0]) * 2 + (a[2] - a[1])\n\ndef winner(player):\n    win = player.index(max(player))\n    player.sort()\n    if len(player) == 1:\n        return 'chef'\n    if player[-1] == player[-2]:\n        return 'tie'\n    if win == 0:\n        return 'chef'\n    return win + 1\nT = int(input())\nfor i in range(T):\n    players = int(input())\n    player = []\n    for j in range(players):\n        ar = [int(i) for i in input().split()]\n        player.append(score(ar))\n    print(winner(player))", "def score(ar):\n    a = []\n    for i in range(6):\n        a.append(0)\n    for i in ar[1:]:\n        a[i - 1] += 1\n    a.sort()\n    return ar[0] + a[0] * 4 + (a[1] - a[0]) * 2 + (a[2] - a[1])\n\ndef winner(player):\n    win = player.index(max(player))\n    player.sort()\n    if len(player) == 1:\n        return 'chef'\n    if player[-1] == player[-2]:\n        return 'tie'\n    if win == 0:\n        return 'chef'\n    return win + 1\nT = int(input())\nfor i in range(T):\n    players = int(input())\n    player = []\n    for j in range(players):\n        ar = [int(i) for i in input().split()]\n        player.append(score(ar))\n    print(winner(player))", "def main():\n    from sys import stdin, stdout\n\n    def getscore(dic):\n        score = 0\n        while True:\n            l = []\n            ncount = 0\n            minim = 110\n            for key in dic:\n                if dic[key]:\n                    ncount += 1\n                    minim = min(minim, dic[key])\n                    l.append(key)\n            if ncount < 4:\n                break\n            elif ncount == 4:\n                score += minim * 1\n                for i in l:\n                    dic[i] -= minim\n            elif ncount == 5:\n                score += minim * 2\n                for i in l:\n                    dic[i] -= minim\n            elif ncount == 6:\n                score += minim * 4\n                for i in l:\n                    dic[i] -= minim\n        return score\n    for _ in range(int(stdin.readline())):\n        n = int(stdin.readline())\n        scores = []\n        for i in range(n):\n            t = tuple(map(int, stdin.readline().split()))\n            scores.append(t[0])\n            t = t[1:]\n            s = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}\n            for k in t:\n                s[k] += 1\n            scores[i] += getscore(s)\n        maxim = max(scores)\n        index = scores.index(maxim)\n        if scores.count(maxim) > 1:\n            stdout.write('tie\\n')\n        elif index == 0:\n            stdout.write('chef\\n')\n        else:\n            stdout.write(str(index + 1) + '\\n')\nmain()", "import sys\ncases = int(input())\nwhile cases > 0:\n    tie = False\n    maxpts = 0\n    maxguy = -1\n    cases -= 1\n    N = int(input())\n    for i in range(N):\n        temp = list(map(int, input().split()))\n        typelist = [0, 0, 0, 0, 0, 0]\n        pts = temp[0]\n        for j in range(temp[0]):\n            typelist[temp[j + 1] - 1] += 1\n        typelist.sort()\n        pts += typelist[0] * 4\n        typelist = [x - typelist[0] for x in typelist]\n        pts += typelist[1] * 2\n        typelist = [x - typelist[1] for x in typelist]\n        pts += typelist[2] * 1\n        typelist = [x - typelist[2] for x in typelist]\n        if maxpts < pts:\n            maxpts = pts\n            maxguy = i\n            tie = False\n        elif maxpts == pts:\n            tie = True\n    if tie:\n        print('tie')\n    elif maxguy == 0:\n        print('chef')\n    else:\n        print(maxguy + 1)", "for t in range(int(input())):\n    n = int(input())\n    ans = 0\n    ind = 0\n    l = []\n    for i in range(1, n + 1):\n        pl = [int(j) for j in input().split()]\n        sum = pl[0]\n        arr = [0, 0, 0, 0, 0, 0, 0]\n        for j in range(1, pl[0] + 1):\n            arr[pl[j]] += 1\n        no0 = 0\n        f = 0\n        for j in arr[1:]:\n            if j == 0:\n                f = 1\n                break\n        if f == 0:\n            m = min(arr[1:])\n            for j in range(1, 7):\n                arr[j] -= m\n            sum += 4 * m\n        f = 0\n        for j in arr[1:]:\n            if j == 0:\n                no0 += 1\n            if no0 > 1:\n                f = 1\n                break\n        if f == 0:\n            for j in arr[1:]:\n                if j != 0:\n                    m = j\n                    break\n            for j in arr[1:]:\n                if j < m and j != 0:\n                    m = j\n            for j in range(1, 7):\n                if arr[j] != 0:\n                    arr[j] -= m\n            sum += 2 * m\n        f = 0\n        no0 = 0\n        for j in arr[1:]:\n            if j == 0:\n                no0 += 1\n            if no0 > 2:\n                f = 1\n                break\n        if f == 0:\n            for j in arr[1:]:\n                if j != 0:\n                    m = j\n                    break\n            for j in arr[1:]:\n                if j < m and j != 0:\n                    m = j\n            for j in range(1, 7):\n                if arr[j] != 0:\n                    arr[j] -= m\n            sum += 1 * m\n        l.append(sum)\n        if sum > ans:\n            ans = sum\n            ind = i\n    c = 0\n    for j in range(n):\n        if l[j] == ans:\n            c += 1\n        if c == 2:\n            print('tie')\n            break\n    if c < 2:\n        print('chef' if ind == 1 else ind)", "for t in range(int(input())):\n    n = int(input())\n    ans = 0\n    ind = 0\n    l = []\n    for i in range(1, n + 1):\n        pl = [int(j) for j in input().split()]\n        sum = pl[0]\n        arr = [0, 0, 0, 0, 0, 0, 0]\n        for j in range(1, pl[0] + 1):\n            arr[pl[j]] += 1\n        no0 = 0\n        f = 0\n        for j in arr[1:]:\n            if j == 0:\n                f = 1\n                break\n        if f == 0:\n            m = min(arr[1:])\n            for j in range(1, 7):\n                arr[j] -= m\n            sum += 4 * m\n        f = 0\n        for j in arr[1:]:\n            if j == 0:\n                no0 += 1\n            if no0 > 1:\n                f = 1\n                break\n        if f == 0:\n            for j in arr[1:]:\n                if j != 0:\n                    m = j\n                    break\n            for j in arr[1:]:\n                if j < m and j != 0:\n                    m = j\n            for j in range(1, 7):\n                if arr[j] != 0:\n                    arr[j] -= m\n            sum += 2 * m\n        f = 0\n        no0 = 0\n        for j in arr[1:]:\n            if j == 0:\n                no0 += 1\n            if no0 > 2:\n                f = 1\n                break\n        if f == 0:\n            for j in arr[1:]:\n                if j != 0:\n                    m = j\n                    break\n            for j in arr[1:]:\n                if j < m and j != 0:\n                    m = j\n            for j in range(1, 7):\n                if arr[j] != 0:\n                    arr[j] -= m\n            sum += 1 * m\n        l.append(sum)\n        if sum > ans:\n            ans = sum\n            ind = i\n    c = 0\n    for j in range(n):\n        if l[j] == ans:\n            c += 1\n        if c == 2:\n            print('tie')\n            break\n    if c < 2:\n        print('chef' if ind == 1 else ind)", "TC = int(input())\nfor t in range(0, TC):\n    N = int(input())\n    max_score = -1\n    tie = False\n    win = 0\n    for n in range(0, N):\n        T = [0] * 6\n        C = list(map(int, input().split()))\n        for c in range(1, len(C)):\n            T[C[c] - 1] += 1\n        T.sort()\n        score = C[0]\n        score += T[0] * 4\n        T[1] -= T[0]\n        T[2] -= T[0]\n        score += T[1] * 2\n        T[2] -= T[1]\n        score += T[2]\n        if score > max_score:\n            tie = False\n            max_score = score\n            win = n\n        elif score == max_score:\n            tie = True\n            max_score = score\n            win = n\n    if tie:\n        print('tie')\n    elif win == 0:\n        print('chef')\n    else:\n        print(win + 1)", "import collections\n\ndef solve(cookies):\n    rv = len(cookies)\n    counter = collections.Counter(cookies)\n    cookies.sort(key=lambda x: (counter[x], x))\n    last_cookie = cookies.pop()\n    packages = [[last_cookie]]\n    current = 0\n    while cookies:\n        cookie = cookies.pop()\n        if cookie == last_cookie:\n            current += 1\n            try:\n                packages[current].append(cookie)\n            except IndexError:\n                packages.append([cookie])\n        else:\n            current = 0\n            while True:\n                if len(packages[current]) < 6:\n                    packages[current].append(cookie)\n                    break\n                else:\n                    current += 1\n        last_cookie = cookie\n    for package in packages:\n        if len(package) == 6:\n            rv += 4\n        elif len(package) == 5:\n            rv += 2\n        elif len(package) == 4:\n            rv += 1\n    return rv\nt = int(input())\nfor _ in range(0, t):\n    nplayers = int(input())\n    best = 0\n    winner = -1\n    tie = False\n    for player in range(1, nplayers + 1):\n        l = [int(x) for x in input().split(' ')]\n        ncookies = l[0]\n        cookies = l[1:]\n        score = solve(cookies)\n        if score == best:\n            tie = True\n            best = score\n            winner = player\n        elif score > best:\n            tie = False\n            best = score\n            winner = player\n    if tie:\n        print('tie')\n    else:\n        print('chef' if winner == 1 else winner)", "t = int(input())\ncookies_types_count = 6\nweight = [4, 2, 1, 0, 0, 0]\nfor id in range(t):\n    n = int(input())\n    winner_score = 0\n    winners = []\n    for p in range(1, n + 1):\n        [m, *c_list] = [int(c) for c in input().split(' ')]\n        cnt = [0 for i in range(cookies_types_count)]\n        for c in c_list:\n            c = c - 1\n            cnt[c] = cnt[c] + 1\n        cnt.sort()\n        score = m\n        used = 0\n        for i in range(cookies_types_count):\n            remaining = cnt[i] - used\n            score = score + weight[i] * remaining\n            used = cnt[i]\n        if score > winner_score:\n            winner_score = score\n            winners = [p]\n        elif score == winner_score:\n            winners.append(p)\n    if len(winners) > 1:\n        print('tie')\n    elif winners[0] == 1:\n        print('chef')\n    else:\n        print(winners[0])", "no_of_tests = int(input())\ntest_case = 0\nwhile test_case < no_of_tests:\n    no_of_players = int(input())\n    score = [0] * no_of_players\n    player_no = 0\n    while player_no < no_of_players:\n        cookie_type_count = [0] * 6\n        cookies = input()\n        count = 0\n        for cookie in cookies.split():\n            if count == 0:\n                score[player_no] += int(cookie)\n            else:\n                cookie_type_count[int(cookie) - 1] += 1\n            count += 1\n        cookie_type_count.sort(reverse=True)\n        first_minima = cookie_type_count.pop()\n        score[player_no] += first_minima * 4\n        second_minima = cookie_type_count.pop() - first_minima\n        score[player_no] += second_minima * 2\n        thrid_minima = cookie_type_count.pop() - second_minima - first_minima\n        score[player_no] += thrid_minima * 1\n        player_no += 1\n    max_score = -1\n    max_index = -1\n    is_tie = 0\n    index = 0\n    for s in score:\n        if s > max_score:\n            max_score = s\n            max_index = index\n            is_tie = 0\n        elif s == max_score:\n            is_tie = 1\n        index += 1\n    if is_tie:\n        print('tie')\n    elif max_index == 0:\n        print('chef')\n    else:\n        print(max_index + 1)\n    test_case += 1", "def getScore(types):\n    bags = [0] * 6\n    for i in types:\n        bags[i - 1] += 1\n    score = sum(bags)\n    for i in range(3):\n        extraScore = 0\n        if len(bags) == 6:\n            extraScore = 4\n        elif len(bags) == 5:\n            extraScore = 2\n        elif len(bags) == 4:\n            extraScore = 1\n        else:\n            break\n        minNum = min(bags)\n        score += minNum * extraScore\n        bags = [i - minNum for i in bags if i - minNum > 0]\n    return score\ntestCase = int(input())\nwhile testCase != 0:\n    testCase -= 1\n    playerCount = int(input())\n    scoreArray = []\n    while playerCount != 0:\n        playerCount -= 1\n        data = [int(i) for i in input().strip().split(' ')]\n        types = data[1:]\n        scoreArray.append(getScore(types))\n    maxScore = max(scoreArray)\n    if len([1 for i in scoreArray if i == maxScore]) > 1:\n        print('tie')\n    elif scoreArray[0] == maxScore:\n        print('chef')\n    else:\n        print([i for i in range(len(scoreArray)) if scoreArray[i] == maxScore][0] + 1)"]