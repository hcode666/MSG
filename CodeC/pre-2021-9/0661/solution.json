["import math\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = a[0]\n    for i in range(n):\n        g = math.gcd(g, a[i])\n        if g == 1:\n            print(-1)\n            break\n    else:\n        for i in range(2, int(math.sqrt(g) + 1)):\n            if g % i == 0:\n                print(i)\n                break\n        else:\n            print(g)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = a[0]\n    for i in range(n):\n        g = math.gcd(g, a[i])\n        if g == 1:\n            print(-1)\n            break\n    else:\n        for i in range(2, int(math.sqrt(g) + 1)):\n            if g % i == 0:\n                print(i)\n                break\n        else:\n            print(g)", "from math import gcd\nfrom math import sqrt\nfrom functools import reduce\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = reduce(gcd, a)\n    if l > 1:\n        mind = l\n        for i in range(2, int(sqrt(l)) + 1):\n            if l % i == 0:\n                mind = i\n                break\n        print(mind)\n    else:\n        print(-1)", "from math import gcd\nfrom math import sqrt\nfrom functools import reduce\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = reduce(gcd, a)\n    if l > 1:\n        mind = l\n        for i in range(2, int(sqrt(l)) + 1):\n            if l % i == 0:\n                mind = i\n                break\n        print(mind)\n    else:\n        print(-1)", "def g(a, b):\n    if a == 0:\n        return b\n    return g(b % a, a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    gcd = l[0]\n    for i in l:\n        gcd = g(gcd, i)\n    if gcd == 1:\n        print(-1)\n    else:\n        i = 2\n        ans = -1\n        while i * i <= gcd:\n            if gcd % i == 0:\n                ans = i\n                break\n            i += 1\n        if ans == -1:\n            print(gcd)\n        else:\n            print(ans)", "def g(a, b):\n    if a == 0:\n        return b\n    return g(b % a, a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    gcd = l[0]\n    for i in l:\n        gcd = g(gcd, i)\n    if gcd == 1:\n        print(-1)\n    else:\n        i = 2\n        ans = -1\n        while i * i <= gcd:\n            if gcd % i == 0:\n                ans = i\n                break\n            i += 1\n        if ans == -1:\n            print(gcd)\n        else:\n            print(ans)", "def g(a, b):\n    if a == 0:\n        return b\n    return g(b % a, a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    gcd = l[0]\n    for i in l:\n        gcd = g(gcd, i)\n    if gcd == 1:\n        print(-1)\n    else:\n        i = 2\n        ans = -1\n        while i * i <= gcd:\n            if gcd % i == 0:\n                ans = i\n                break\n            i += 1\n        if ans == -1:\n            print(gcd)\n        else:\n            print(ans)", "def g(a, b):\n    if a == 0:\n        return b\n    return g(b % a, a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    gcd = l[0]\n    for i in l:\n        gcd = g(gcd, i)\n    if gcd == 1:\n        print(-1)\n    else:\n        i = 2\n        ans = -1\n        while i * i <= gcd:\n            if gcd % i == 0:\n                ans = i\n                break\n            i += 1\n        if ans == -1:\n            print(gcd)\n        else:\n            print(min(gcd, ans))", "def g(a, b):\n    if a == 0:\n        return b\n    return g(b % a, a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    gcd = l[0]\n    for i in l:\n        gcd = g(gcd, i)\n    if gcd == 1:\n        print(-1)\n    else:\n        i = 2\n        ans = -1\n        while i * i <= gcd:\n            if gcd % i == 0:\n                ans = i\n                break\n            i += 1\n        if gcd == 1:\n            print(ans)\n        elif ans == -1:\n            print(gcd)\n        else:\n            print(min(gcd, ans))", "def g(a, b):\n    if a == 0:\n        return b\n    return g(b % a, a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    gcd = l[0]\n    for i in l:\n        gcd = g(gcd, i)\n    if gcd == 1:\n        print(-1)\n    else:\n        i = 2\n        ans = -1\n        while i * i <= gcd:\n            if gcd % i == 0:\n                ans = i\n                break\n            i += 1\n        if gcd == 1:\n            print(ans)\n        elif ans == -1:\n            print(gcd)\n        else:\n            print(min(gcd, ans))", "def g(a, b):\n    if a == 0:\n        return b\n    return g(b % a, a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    gcd = l[0]\n    for i in l:\n        gcd = g(gcd, i)\n    if gcd == 1:\n        print(-1)\n    else:\n        i = 2\n        ans = -1\n        while i * i <= gcd:\n            if gcd % i == 0:\n                ans = i\n                break\n            i += 1\n        if gcd == 1:\n            print(ans)\n        elif ans == -1:\n            print(gcd)\n        else:\n            print(min(gcd, ans))", "def g(a, b):\n    if a == 0:\n        return b\n    return g(b % a, a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    gcd = l[0]\n    for i in l:\n        gcd = g(gcd, i)\n    if gcd == 1:\n        print(-1)\n    else:\n        i = 2\n        ans = -1\n        while i * i <= gcd:\n            if gcd % i == 0:\n                ans = i\n                break\n            i += 1\n        if gcd == 1:\n            print(ans)\n        elif ans == -1:\n            print(gcd)\n        else:\n            print(min(gcd, ans))", "def g(a, b):\n    if a == 0:\n        return b\n    return g(b % a, a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    gcd = l[0]\n    for i in l:\n        gcd = g(gcd, i)\n    if gcd == 1:\n        print(-1)\n    else:\n        i = 2\n        ans = -1\n        while i * i <= gcd:\n            if gcd % i == 0:\n                ans = i\n                break\n            i += 1\n        if gcd == 1:\n            print(ans)\n        elif ans == -1:\n            print(gcd)\n        else:\n            print(min(gcd, ans))", "def g(a, b):\n    if a == 0:\n        return b\n    return g(b % a, a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    gcd = l[0]\n    for i in l:\n        gcd = g(gcd, i)\n    if gcd == 1:\n        print(-1)\n    else:\n        i = 2\n        ans = -1\n        while i * i <= gcd:\n            if gcd % i == 0:\n                ans = i\n                break\n            i += 1\n        if gcd == 1:\n            print(ans)\n        elif ans == -1:\n            print(gcd)\n        else:\n            print(min(gcd, ans))", "def g(a, b):\n    if a == 0:\n        return b\n    return g(b % a, a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    gcd = l[0]\n    for i in l:\n        gcd = g(gcd, i)\n    if gcd == 1:\n        print(-1)\n    else:\n        i = 2\n        ans = -1\n        while i * i <= gcd:\n            if gcd % i == 0:\n                ans = i\n                break\n            i += 1\n        if gcd == 1:\n            print(ans)\n        elif ans == -1:\n            print(gcd)\n        else:\n            print(min(gcd, ans))", "def g(a, b):\n    if a == 0:\n        return b\n    return g(b % a, a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    gcd = l[0]\n    for i in l:\n        gcd = g(gcd, i)\n    if gcd == 1:\n        print(-1)\n    else:\n        i = 2\n        ans = -1\n        while i * i <= gcd:\n            if gcd % i == 0:\n                ans = i\n                break\n            i += 1\n        if gcd == 1:\n            print(ans)\n        elif ans == -1:\n            print(gcd)\n        else:\n            print(min(gcd, ans))", "def g(a, b):\n    if a == 0:\n        return b\n    return g(b % a, a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    gcd = l[0]\n    for i in l:\n        gcd = g(gcd, i)\n    if gcd == 1:\n        print(-1)\n    else:\n        i = 2\n        ans = -1\n        while i * i <= gcd:\n            if gcd % i == 0:\n                ans = i\n                break\n            i += 1\n        if gcd == 1:\n            print(ans)\n        elif ans == -1:\n            print(gcd)\n        else:\n            print(min(gcd, ans))", "def g(a, b):\n    if a == 0:\n        return b\n    return g(b % a, a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    gcd = l[0]\n    for i in l:\n        gcd = g(gcd, i)\n    if gcd == 1:\n        print(-1)\n    else:\n        i = 2\n        ans = -1\n        while i * i <= gcd:\n            if gcd % i == 0:\n                ans = i\n                break\n            i += 1\n        if gcd == 1:\n            print(ans)\n        elif ans == -1:\n            print(gcd)\n        else:\n            print(min(gcd, ans))", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nfrom functools import reduce\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)) + '\\n')\n\ndef smallest_prime_factor(max_n):\n    primes = [False, True] * (max_n // 2 + 1)\n    primes[2] = True\n    smallest = [i for i in range(max_n)]\n    for i in range(2, max_n, 2):\n        smallest[i] = 2\n    p = 3\n    while p * p < max_n:\n        if primes[p]:\n            for i in range(p, max_n, p):\n                primes[i] = False\n                smallest[i] = min(smallest[i], p)\n        p += 2\n    return smallest\n\ndef main():\n    smallest = smallest_prime_factor(100000 + 1)\n    for _ in tr():\n        n = nl()\n        a = ln()\n        common = reduce(math.gcd, a)\n        if common == 1:\n            print(-1)\n        else:\n            print(smallest[common])\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nfrom functools import reduce\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)) + '\\n')\n\ndef smallest_prime_factor(max_n):\n    primes = [False, True] * (max_n // 2 + 1)\n    primes[2] = True\n    smallest = [i for i in range(max_n)]\n    for i in range(2, max_n, 2):\n        smallest[i] = 2\n    p = 3\n    while p * p < max_n:\n        if primes[p]:\n            for i in range(p, max_n, p):\n                primes[i] = False\n                smallest[i] = min(smallest[i], p)\n        p += 2\n    return smallest\n\ndef main():\n    smallest = smallest_prime_factor(100000 + 1)\n    for _ in tr():\n        n = nl()\n        a = ln()\n        common = reduce(math.gcd, a)\n        if common == 1:\n            print(-1)\n        else:\n            print(smallest[common])\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nfrom functools import reduce\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)) + '\\n')\n\ndef smallest_prime_factor(max_n):\n    primes = [False, True] * (max_n // 2 + 1)\n    primes[2] = True\n    smallest = [i for i in range(max_n)]\n    for i in range(2, max_n, 2):\n        smallest[i] = 2\n    p = 3\n    while p * p < max_n:\n        if primes[p]:\n            for i in range(p, max_n, p):\n                primes[i] = False\n                smallest[i] = min(smallest[i], p)\n        p += 2\n    return smallest\n\ndef main():\n    smallest = smallest_prime_factor(100000 + 1)\n    for _ in tr():\n        n = nl()\n        a = ln()\n        common = reduce(math.gcd, a)\n        if common == 1:\n            print(-1)\n        else:\n            print(smallest[common])\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nfrom functools import reduce\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)) + '\\n')\n\ndef smallest_prime_factor(max_n):\n    primes = [False, True] * (max_n // 2 + 1)\n    primes[2] = True\n    smallest = [i for i in range(max_n)]\n    for i in range(2, max_n, 2):\n        smallest[i] = 2\n    p = 3\n    while p * p < max_n:\n        if primes[p]:\n            for i in range(p, max_n, p):\n                primes[i] = False\n                smallest[i] = min(smallest[i], p)\n        p += 2\n    return smallest\n\ndef main():\n    smallest = smallest_prime_factor(100000 + 1)\n    for _ in tr():\n        n = nl()\n        a = ln()\n        common = reduce(math.gcd, a)\n        if common == 1:\n            print(-1)\n        else:\n            print(smallest[common])\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nfrom functools import reduce\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)) + '\\n')\n\ndef smallest_prime_factor(max_n):\n    primes = [False, True] * (max_n // 2 + 1)\n    primes[2] = True\n    smallest = [i for i in range(max_n)]\n    p = 2\n    while p * p <= max_n:\n        if primes[p]:\n            for i in range(p, max_n, p):\n                primes[i] = False\n                smallest[i] = min(smallest[i], p)\n        p += 1\n    return smallest\n\ndef main():\n    smallest = smallest_prime_factor(100000 + 1)\n    for _ in tr():\n        n = nl()\n        a = ln()\n        common = reduce(math.gcd, a)\n        if common == 1:\n            print(-1)\n        else:\n            print(smallest[common])\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nfrom functools import reduce\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)) + '\\n')\n\ndef smallest_prime_factor(max):\n    sieve = [i for i in range(max)]\n    for i in range(2, max):\n        if sieve[i] == i:\n            j = 2\n            while j * i < max:\n                sieve[i * j] = min(sieve[i * j], i)\n                j += 1\n    return sieve\n\ndef main():\n    smallest = smallest_prime_factor(100000 + 1)\n    for _ in tr():\n        n = nl()\n        a = ln()\n        common = reduce(math.gcd, a)\n        if common == 1:\n            print(-1)\n        else:\n            print(smallest[common])\nmain()", "from math import gcd, sqrt\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for j in l:\n        g = gcd(j, g)\n    if g == 1:\n        ans = -1\n    else:\n        ans = g\n        for k in range(2, int(sqrt(g)) + 1):\n            if g % k == 0:\n                ans = k\n                break\n    print(ans)", "from math import gcd, sqrt\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    g = arr[0]\n    for i in arr:\n        g = gcd(i, g)\n    if g == 1:\n        ans = -1\n    else:\n        ans = g\n        for i in range(2, int(sqrt(g)) + 1):\n            if g % i == 0:\n                ans = i\n                break\n    print(ans)", "def gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nfor ii in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    g = arr[0]\n    for i in range(1, n):\n        g = gcd(g, arr[i])\n        if g == 1:\n            break\n    ans = g\n    if g == 1:\n        ans = -1\n    elif ans % 2 == 0:\n        ans = 2\n    else:\n        for i in range(3, int(g ** 0.5) + 1, 2):\n            if g % i == 0:\n                ans = i\n                break\n    print(ans)", "def gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nfor ii in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    g = arr[0]\n    for i in range(1, n):\n        g = gcd(g, arr[i])\n        if g == 1:\n            break\n    ans = g\n    if g == 1:\n        ans = -1\n    elif ans % 2 == 0:\n        ans = 2\n    else:\n        for i in range(3, int(g ** 0.5) + 1, 2):\n            if g % i == 0:\n                ans = i\n                break\n    print(ans)", "def gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nfor ii in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    g = arr[0]\n    for i in range(1, n):\n        g = gcd(g, arr[i])\n        if g == 1:\n            break\n    ans = g\n    if g == 1:\n        ans = -1\n    else:\n        for i in range(2, int(g ** 0.5) + 1):\n            if g % i == 0:\n                ans = i\n                break\n    print(ans)", "from sys import stdin, stdout\nimport math as m\ninput = stdin.readline\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    gcd = arr[0]\n    for num in arr:\n        gcd = m.gcd(gcd, num)\n    if gcd == 1:\n        print(-1)\n        continue\n    ans = gcd\n    for i in range(2, m.ceil(m.sqrt(gcd)) + 1):\n        if gcd % i == 0:\n            ans = i\n            break\n    print(ans)", "from sys import stdin, stdout\nimport math as m\ninput = stdin.readline\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    gcd = arr[0]\n    for num in arr:\n        gcd = m.gcd(gcd, num)\n    if gcd == 1:\n        print(-1)\n        continue\n    ans = gcd\n    for i in range(2, m.ceil(m.sqrt(gcd)) + 1):\n        if gcd % i == 0:\n            ans = min(ans, i)\n    print(ans)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(lambda x: int(x), str(input()).split(' ')))\n    A.sort()\n    dictone = {}\n    for j in range(N):\n        k = 2\n        while k * k <= A[j]:\n            if A[j] % k == 0:\n                dictone[k] = dictone.get(k, 0) + 1\n                while A[j] % k == 0:\n                    A[j] = A[j] // k\n            k = k + 1\n        if A[j] != 1:\n            dictone[A[j]] = dictone.get(A[j], 0) + 1\n    aa = list(dictone.items())\n    if len(aa):\n        aa.sort(key=lambda x: x[0])\n        aa.sort(key=lambda x: x[1], reverse=True)\n        if aa[0][1] == N:\n            print(aa[0][0])\n        else:\n            print(-1)\n    else:\n        print(-1)", "from math import gcd, sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    div = arr[0]\n    for i in range(n):\n        div = gcd(arr[i], div)\n    if div == 1:\n        print(-1)\n    else:\n        for i in range(2, int(sqrt(div)) + 1):\n            if div % i == 0:\n                print(i)\n                break\n        else:\n            print(div)", "from math import gcd, sqrt\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    g = arr[0]\n    for i in arr:\n        g = gcd(i, g)\n    if g == 1:\n        ans = -1\n    else:\n        ans = g\n        for i in range(2, int(sqrt(g)) + 1):\n            if g % i == 0:\n                ans = i\n                break\n    print(ans)", "import math\nlim = 100001\nsmallest_factor = [i for i in range(lim)]\nsmallest_factor[0] = 0\nfor i in range(2, int(math.sqrt(lim)) + 1):\n    if smallest_factor[i] == i:\n        for j in range(i * i, lim, i):\n            if smallest_factor[j] == j:\n                smallest_factor[j] = i\n\ndef gcd(a, b):\n    if a % b == 0:\n        return b\n    return gcd(b, a % b)\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    res = None\n    if n == 1:\n        res = smallest_factor[a[0]]\n    else:\n        hcf = gcd(a[0], a[1])\n        for i in range(2, n):\n            hcf = gcd(hcf, a[i])\n        res = smallest_factor[hcf]\n    if res == 1:\n        print(-1)\n    else:\n        print(res)", "def hcf(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nis_prime = [True] * (100000 + 2)\nprimes = []\nis_prime[0] = False\nis_prime[1] = False\nfor i in range(2, 100000 + 2):\n    if is_prime[i]:\n        primes.append(i)\n        for j in range(i * i, 100000 + 2, i):\n            is_prime[j] = False\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    factor = l[0]\n    for i in l:\n        factor = hcf(factor, i)\n    if factor == 1:\n        print(-1)\n    elif is_prime[factor]:\n        print(factor)\n    else:\n        for i in primes:\n            if factor % i == 0:\n                print(i)\n                break", "from math import gcd\nfrom functools import reduce\nmax = 10 ** 5 + 1\nsieve = [i for i in range(max)]\nfor i in range(2, max):\n    if sieve[i] == i:\n        j = 2\n        while j * i < max:\n            sieve[i * j] = min(sieve[i * j], i)\n            j += 1\nt = int(input())\nl = []\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = reduce(gcd, a)\n    if g == 1:\n        l.append(-1)\n    else:\n        l.append(sieve[g])\nfor _ in l:\n    print(_)", "from math import gcd, sqrt\nfrom functools import reduce\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = reduce(gcd, a)\n    if x == 1:\n        print(-1)\n    else:\n        for i in range(2, int(sqrt(x)) + 1):\n            if x % i == 0:\n                print(i)\n                break\n        else:\n            print(x)", "from functools import reduce\nfrom math import gcd, sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    gcd_ = reduce(gcd, l)\n    if gcd_ == 1:\n        print(-1)\n    else:\n        for i in range(2, int(sqrt(gcd_)) + 1):\n            if gcd_ % i == 0:\n                print(i)\n                break\n        else:\n            print(gcd_)", "from functools import reduce\nfrom math import gcd, sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    gcd_ = reduce(gcd, l)\n    if gcd_ == 1:\n        print(-1)\n    else:\n        for i in range(2, int(sqrt(gcd_)) + 1):\n            if gcd_ % i == 0:\n                print(i)\n                break\n        else:\n            print(gcd_)", "from math import gcd, sqrt\nfrom functools import reduce\nfor _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    a = reduce(gcd, l1)\n    if a == 1:\n        print(-1)\n    else:\n        for i in range(2, int(sqrt(a)) + 1):\n            if a % i == 0:\n                print(i)\n                break\n        else:\n            print(a)", "from math import gcd, sqrt\nT = int(input())\nfor i in range(T):\n    s = 0\n    f = 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(len(a)):\n        s = gcd(s, a[i])\n    if s == 1:\n        print(-1)\n    else:\n        for i in range(2, int(sqrt(s)) + 1):\n            if s % i == 0:\n                print(i)\n                f = 0\n                break\n        if f == 1:\n            print(s)", "from math import gcd, sqrt\nfor _ in range(int(input())):\n    s = 0\n    f = 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(len(a)):\n        s = gcd(s, a[i])\n    if s == 1:\n        print(-1)\n    else:\n        for i in range(2, int(sqrt(s)) + 1):\n            if s % i == 0:\n                print(i)\n                f = 0\n                break\n        if f == 1:\n            print(s)", "from math import gcd\nfrom functools import reduce\nMAX = 10 ** 5 + 1\nsieve = [i for i in range(MAX)]\nfor i in range(2, MAX):\n    if sieve[i] == i:\n        j = 2\n        while i * j < MAX:\n            sieve[i * j] = min(sieve[i * j], i)\n            j += 1\nfor __ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = reduce(gcd, a)\n    if g == 1:\n        print(-1)\n    else:\n        print(sieve[g])", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    res = l[0]\n    for j in range(1, n):\n        res = math.gcd(res, l[j])\n    if res == 1:\n        print(-1)\n    else:\n        flag = 0\n        x = 0\n        for j in range(2, int(math.sqrt(res)) + 1):\n            if res % j == 0:\n                x = j\n                flag = 1\n                break\n        if flag == 1:\n            print(x)\n        else:\n            print(res)", "from math import sqrt, gcd\nfor _ in range(int(input())):\n    n = int(input())\n    ar = [int(x) for x in input().split()]\n    g = ar[0]\n    for i in range(1, n):\n        g = gcd(g, ar[i])\n    f = g\n    for i in range(2, int(sqrt(g)) + 1):\n        if g % i == 0:\n            f = i\n            break\n    if g != 1:\n        print(f)\n    else:\n        print(-1)", "from math import gcd, sqrt\nT = int(input())\nans = []\nfor _ in range(T):\n    N = int(input())\n    A = [int(i) for i in input().split()]\n    g = A[0]\n    for i in range(1, N):\n        g = gcd(g, A[i])\n    f = g\n    for i in range(2, int(sqrt(g)) + 1):\n        if g % i == 0:\n            f = i\n            break\n    if g != 1:\n        ans.append(f)\n    else:\n        ans.append(-1)\nfor i in ans:\n    print(i)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if l[0] == 1:\n        print(-1)\n    else:\n        l1 = [l[0]]\n        flag = 0\n        for i in range(1, n):\n            p = math.gcd(l1[-1], l[i])\n            if p == 1:\n                print(-1)\n                flag = 1\n                break\n            else:\n                l1.append(p)\n        if flag == 0:\n            p = l1[-1]\n            for i in range(2, int(p ** 0.5) + 1):\n                if p % i == 0:\n                    print(i)\n                    flag = 1\n                    break\n        if flag == 0:\n            print(p)", "from functools import reduce\nfrom math import gcd\n\ndef sieve(n):\n    start = int(n ** 0.5) + 2\n    arr = [True] * (n + 1)\n    primes = []\n    for i in range(2, start):\n        if arr[i] == True:\n            primes.append(i)\n        for j in range(i * 2, n + 1, i):\n            arr[j] = False\n    for i in range(start, n + 1):\n        if arr[i] == True:\n            primes.append(i)\n    return primes\n\ndef divs(n, primes):\n    sq = n ** 0.5\n    fac = []\n    for i in primes:\n        if i > sq:\n            break\n        if n % i == 0:\n            fac.append(i)\n    if len(fac) == 0:\n        fac = [n]\n    return fac\nprimes = sieve(int((10 ** 5) ** 0.5 + 1))\nfor _ in range(int(input())):\n    n = int(input())\n    ls = [int(X) for X in input().split()]\n    gc = reduce(gcd, ls)\n    x = divs(gc, primes)\n    if x[0] != 1:\n        print(x[0])\n    elif x[0] == 1 and len(x) > 1:\n        print(x[1])\n    else:\n        print(-1)", "from functools import reduce\nfrom math import gcd\n\ndef sieve(n):\n    start = int(n ** 0.5) + 2\n    arr = [True] * (n + 1)\n    primes = []\n    for i in range(2, start):\n        if arr[i] == True:\n            primes.append(i)\n        for j in range(i * 2, n + 1, i):\n            arr[j] = False\n    for i in range(start, n + 1):\n        if arr[i] == True:\n            primes.append(i)\n    return primes\n\ndef divs(n, primes):\n    sq = n ** 0.5\n    fac = []\n    for i in primes:\n        if i > sq:\n            break\n        if n % i == 0:\n            fac.append(i)\n    if len(fac) == 0:\n        fac = [n]\n    return fac\nprimes = sieve(int((10 ** 5) ** 0.5 + 1))\nfor _ in range(int(input())):\n    n = int(input())\n    ls = [int(X) for X in input().split()]\n    gc = reduce(gcd, ls)\n    x = divs(gc, primes)\n    if x[0] != 1:\n        print(x[0])\n    elif x[0] == 1 and len(x) > 1:\n        print(x[1])\n    else:\n        print(-1)", "from functools import reduce\nfrom math import gcd\n\ndef divisor(n):\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\nfor _ in range(int(input())):\n    n = int(input())\n    ls = [int(X) for X in input().split()]\n    gc = reduce(gcd, ls)\n    if gc == 1:\n        print(-1)\n    elif gc % 2 == 0:\n        print(2)\n    else:\n        print(divisor(gc))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = l[0]\n    for i in range(1, n):\n        s = math.gcd(s, l[i])\n    if s == 1:\n        print(-1)\n    elif s % 2 == 0:\n        print(2)\n    else:\n        ans = 0\n        for i in range(3, int(s ** 0.5) + 1):\n            if s % i == 0:\n                ans = i\n                break\n        if ans == 0:\n            print(s)\n        else:\n            print(ans)", "from math import *\nfor u in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for i in range(1, n):\n        g = gcd(g, l[i])\n    if g == 1:\n        print(-1)\n    else:\n        x = g\n        for i in range(2, int(sqrt(g)) + 1):\n            if g % i == 0:\n                x = i\n                break\n        print(x)", "import math\nT = int(input())\nwhile T:\n    N = int(input())\n    A = list(map(int, input().split()))\n    hcf = A[0]\n    n = len(A)\n    for i in range(1, len(A)):\n        hcf = math.gcd(hcf, A[i])\n    if hcf == 1:\n        print(-1)\n    elif hcf % 2 == 0:\n        print(2)\n    else:\n        answer = 0\n        for j in range(3, int(hcf ** 0.5) + 1):\n            if hcf % j == 0:\n                answer = j\n                break\n        if answer == 0:\n            print(hcf)\n        else:\n            print(answer)\n    T -= 1", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for x in l:\n        g = gcd(x, g)\n    if g == 1:\n        print(-1)\n    elif g % 2 == 0:\n        print(2)\n    else:\n        for i in range(3, int(g ** 0.5) + 1):\n            if g % i == 0:\n                print(i)\n                break\n        else:\n            print(g)", "import math\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    array = list(map(int, input().split()))\n    hcf = array[0]\n    for i in range(1, n):\n        hcf = math.gcd(hcf, array[i])\n    if hcf == 1:\n        print(-1)\n    elif hcf % 2 == 0:\n        print(2)\n    else:\n        answer = 0\n        for i in range(3, int(hcf ** 0.5) + 1):\n            if hcf % i == 0:\n                answer = i\n                break\n        if answer == 0:\n            print(hcf)\n        else:\n            print(answer)", "import math\n\ndef hcf(a, b):\n    if a == 0:\n        return 1\n    if a % b == 0:\n        return b\n    return hcf(b, a % b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    list1 = list(map(int, input().strip().split()))\n    curr = list1[0]\n    for i in range(1, n):\n        curr = hcf(curr, list1[i])\n        if curr == 1:\n            break\n    if curr == 1:\n        print(-1)\n    else:\n        ans = -1\n        for i in range(2, math.floor(math.sqrt(curr)) + 1):\n            if curr % i == 0:\n                ans = i\n                break\n        if ans == -1:\n            print(curr)\n        else:\n            print(i)", "import math\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = a[0]\n    for i in a:\n        x = math.gcd(i, x)\n    if x == 1:\n        k = -1\n    else:\n        k = x\n        x1 = x ** 0.5\n        t = int(x1)\n        for i in range(2, t + 1):\n            if x % i == 0:\n                k = i\n                break\n    print(k)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "import functools\nimport math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    g_1 = functools.reduce(math.gcd, l)\n    if g_1 == 1:\n        print(-1)\n        continue\n    t_1 = int(math.sqrt(g_1))\n    c = 0\n    for i in range(2, t_1 + 2):\n        if g_1 % i == 0:\n            c = i\n            break\n    if c == 0:\n        print(g_1)\n    else:\n        print(c)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = map(int, input().split())\n    a = list(a)\n    x = a[0]\n    for i in a:\n        x = math.gcd(i, x)\n    if x == 1:\n        k = -1\n    else:\n        k = x\n        x1 = x ** 0.5\n        t = int(x1)\n        for i in range(2, t + 1):\n            if x % i == 0:\n                k = i\n                break\n    print(k)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = a[0]\n    for i in a:\n        g = math.gcd(g, i)\n    if g == 1:\n        print(-1)\n    else:\n        for i in range(2, int(math.sqrt(g)) + 1):\n            if g % i == 0:\n                print(i)\n                break\n        else:\n            print(g)", "from functools import reduce\nfrom math import sqrt\nfrom math import gcd\nfor i in range(int(input())):\n    n = int(input())\n    li = list((int(i) for i in input().split()))\n    a = reduce(lambda a, b: gcd(a, b), li)\n    if a == 1:\n        print(-1)\n    else:\n        for i in range(2, int(sqrt(a)) + 1):\n            if a % i == 0:\n                print(i)\n                break\n        else:\n            print(a)", "from math import *\nfor j in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    a = x[0]\n    am = 0\n    for i in range(1, n):\n        a = gcd(a, x[i])\n    if a == 1:\n        print(-1)\n    else:\n        for i in range(2, int(sqrt(a)) + 1):\n            if a % i == 0:\n                print(i)\n                am = 1\n                break\n        if am == 0:\n            print(a)", "from math import *\nfor j in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    a = x[0]\n    am = 0\n    for i in range(1, n):\n        a = gcd(a, x[i])\n    if a == 1:\n        print(-1)\n    else:\n        for i in range(2, int(sqrt(a)) + 1):\n            if a % i == 0:\n                print(i)\n                am = 1\n                break\n        if am == 0:\n            print(a)", "from math import *\nfor j in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    a = x[0]\n    am = 0\n    for i in range(1, n):\n        a = gcd(a, x[i])\n    if a == 1:\n        print(-1)\n    else:\n        for i in range(2, int(sqrt(a)) + 1):\n            if a % i == 0:\n                print(i)\n                am = 1\n                break\n        if am == 0:\n            print(a)", "import math\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(1, n):\n        l[i] = math.gcd(l[i], l[i - 1])\n    a = l[-1]\n    if a == 1:\n        print(-1)\n    else:\n        f = 0\n        p = int(math.sqrt(l[-1]))\n        i = 2\n        while i <= p:\n            if a % i == 0:\n                print(i)\n                f = 1\n                break\n            i += 1\n        if f == 0:\n            print(a)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(1, n):\n        l[i] = math.gcd(l[i], l[i - 1])\n    a = l[-1]\n    if a == 1:\n        print(-1)\n    else:\n        f = 0\n        p = int(math.sqrt(l[-1]))\n        i = 2\n        while i <= p:\n            if a % i == 0:\n                print(i)\n                f = 1\n                break\n            i += 1\n        if f == 0:\n            print(a)", "from math import gcd, sqrt\nfor _ in range(int(input())):\n    s = 0\n    f = 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(len(a)):\n        s = gcd(s, a[i])\n    if s == 1:\n        print(-1)\n    else:\n        for i in range(2, int(sqrt(s)) + 1):\n            if s % i == 0:\n                print(i)\n                f = 0\n                break\n        if f == 1:\n            print(s)", "from math import gcd, sqrt\nfor _ in range(int(input())):\n    s = 0\n    f = 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(len(a)):\n        s = gcd(s, a[i])\n    if s == 1:\n        print(-1)\n    else:\n        for i in range(2, int(sqrt(s)) + 1):\n            if s % i == 0:\n                print(i)\n                f = 0\n                break\n        if f == 1:\n            print(s)", "from math import gcd, sqrt\nfor _ in range(int(input())):\n    s = 0\n    f = 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(len(a)):\n        s = gcd(s, a[i])\n    if s == 1:\n        print(-1)\n    else:\n        for i in range(2, int(sqrt(s)) + 1):\n            if s % i == 0:\n                print(i)\n                f = 0\n                break\n        if f == 1:\n            print(s)", "from math import sqrt\n\ndef gcdd(x, y):\n    if y == 0:\n        return x\n    return gcdd(y, x % y)\n\ndef main(a):\n    one = a[0]\n    gcd = a[0]\n    for i in range(1, len(a)):\n        gcd = gcdd(gcd, a[i])\n        if gcd == 1:\n            return 1\n    return gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    t = main(a)\n    if t == 1:\n        print(-1)\n    else:\n        for i in range(2, int(sqrt(t)) + 2):\n            if t % i == 0:\n                t = i\n                break\n        print(t)", "from math import sqrt\n\ndef gcdd(x, y):\n    if y == 0:\n        return x\n    return gcdd(y, x % y)\n\ndef main(a):\n    one = a[0]\n    gcd = a[0]\n    for i in range(1, len(a)):\n        gcd = gcdd(gcd, a[i])\n        if gcd == 1:\n            return 1\n    return gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    t = main(a)\n    if t == 1:\n        print(-1)\n    else:\n        for i in range(2, int(sqrt(t)) + 2):\n            if t % i == 0:\n                t = i\n                break\n        print(t)", "from math import sqrt\n\ndef gcdd(x, y):\n    if y == 0:\n        return x\n    return gcdd(y, x % y)\n\ndef main(a):\n    one = a[0]\n    gcd = a[0]\n    for i in range(1, len(a)):\n        gcd = gcdd(gcd, a[i])\n        if gcd == 1:\n            return 1\n    return gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    t = main(a)\n    if t == 1:\n        print(-1)\n    else:\n        for i in range(2, int(sqrt(t)) + 2):\n            if t % i == 0:\n                t = i\n                break\n        print(t)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(a) for a in input().split()]\n    if n == 1:\n        g = arr[0]\n    else:\n        g = math.gcd(arr[0], arr[1])\n        for i in range(2, n):\n            g = math.gcd(g, arr[i])\n    if g == 1:\n        print(-1)\n    else:\n        final = 0\n        for i in range(2, int(math.sqrt(g)) + 2):\n            if g % i == 0:\n                final = i\n                break\n        if final == 0:\n            print(g)\n        else:\n            print(final)", "from math import gcd, sqrt\nfor _ in range(int(input())):\n    N = int(input())\n    array = list(map(int, input().split()))\n    if N == 1:\n        g = array[0]\n    else:\n        g = gcd(array[0], array[1])\n        for i in range(2, N):\n            g = gcd(g, array[i])\n    if g == 1:\n        print(-1)\n    else:\n        ans = 0\n        for i in range(2, int(sqrt(g)) + 2):\n            if g % i == 0:\n                ans = i\n                break\n        if ans == 0:\n            print(g)\n        else:\n            print(ans)", "import math\n\ndef divisors(n):\n    if n == 1:\n        return []\n    l = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            l.append(i)\n            l.append(n // i)\n    l.append(n)\n    l = sorted(l)\n    return l\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    raj = set(divisors(arr[0]))\n    for i in range(1, n):\n        temp = set()\n        for j in raj:\n            if arr[i] % j == 0:\n                temp.add(j)\n        raj = raj.intersection(temp)\n    if len(raj) != 0:\n        raj = sorted(list(raj))\n        for i in raj:\n            print(i)\n            break\n    else:\n        print(-1)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    p = dict()\n    uni = []\n    for i in range(0, len(arr)):\n        nn = arr[i]\n        if nn % 2 == 0:\n            if p.get(2) == None:\n                p[2] = 1\n                uni.append(2)\n            else:\n                p[2] += 1\n            while nn % 2 == 0:\n                nn = nn // 2\n        for j in range(3, int(math.sqrt(nn)) + 1, 2):\n            if nn % j == 0:\n                if p.get(j) == None:\n                    p[j] = 1\n                    uni.append(j)\n                else:\n                    p[j] += 1\n                while nn % j == 0:\n                    nn //= j\n        if nn > 2:\n            if p.get(nn) == None:\n                p[nn] = 1\n                uni.append(nn)\n            else:\n                p[nn] += 1\n    ans = -1\n    for i in range(0, len(uni)):\n        if p[uni[i]] == n:\n            ans = uni[i]\n            break\n    print(ans)", "import math\nfor _ in range(int(input())):\n    a = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    z = int(math.sqrt(l[0]))\n    l1 = []\n    for i in range(1, z + 1):\n        if l[0] % i == 0:\n            l1.append(i)\n            l1.append(l[0] // i)\n    l1.sort()\n    (f, o) = (0, 0)\n    for i in range(len(l1)):\n        k = 0\n        for j in range(len(l)):\n            if l1[i] != 1:\n                if l[j] % l1[i] == 0:\n                    k += 1\n                else:\n                    break\n        if k == len(l):\n            f += 1\n            o = l1[i]\n            break\n    if f == 0:\n        print(-1)\n    else:\n        print(o)", "import math\nfor _ in range(int(input())):\n    a = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    z = int(math.sqrt(l[0]))\n    l1 = []\n    for i in range(1, z + 1):\n        if l[0] % i == 0:\n            l1.append(i)\n            l1.append(l[0] // i)\n    l1.sort()\n    (f, o) = (0, 0)\n    for i in range(len(l1)):\n        k = 0\n        for j in range(len(l)):\n            if l1[i] != 1:\n                if l[j] % l1[i] == 0:\n                    k += 1\n                else:\n                    break\n        if k == len(l):\n            f += 1\n            o = l1[i]\n            break\n    if f == 0:\n        print(-1)\n    else:\n        print(o)", "def gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef mina(x):\n    for j in range(2, int(x ** 0.5) + 1):\n        if x % j == 0:\n            return j\n    return x\nfor i in range(int(input())):\n    x = int(input())\n    a = list(map(int, input().strip().split()))\n    s = a[0]\n    if x == 1:\n        s = mina(a[0])\n    else:\n        for j in a[1:]:\n            s = gcd(s, j)\n            if s == 1:\n                break\n    if s == 1:\n        print(-1)\n    else:\n        print(mina(s))", "def gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef getMinFactor(n):\n    L = int(n ** 0.5) + 1\n    for i in range(2, L):\n        if n % i == 0:\n            return i\n    return n\n\ndef answer(n):\n    print(n if n > 1 else -1)\nTC = int(input())\nfor _ in range(TC):\n    N = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    if N == 1:\n        answer(getMinFactor(arr[0]))\n        continue\n    g = gcd(arr[0], arr[1])\n    for i in range(2, N):\n        g = gcd(g, arr[i])\n        if g == 1:\n            break\n    answer(getMinFactor(g))", "def compute_gcd(a, b):\n    if not b:\n        return a\n    elif not a:\n        return b\n    return compute_gcd(b, a % b)\n\ndef compute_min_divisor(sequence):\n    seq_gcd = 0\n    for value in sequence:\n        seq_gcd = compute_gcd(seq_gcd, value)\n    if seq_gcd == 1:\n        return -1\n    min_divisor = seq_gcd\n    i = 2\n    while i * i <= seq_gcd:\n        if not seq_gcd % i:\n            min_divisor = i\n            break\n        i += 1\n    return min_divisor\n\ndef main():\n    for test in range(int(input().rstrip())):\n        n = int(input().rstrip())\n        print('{}'.format(compute_min_divisor(list(map(int, input().rstrip().split())))))\nmain()", "import math\n\ndef minFactor(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    num = a[0]\n    for i in range(1, n):\n        num = math.gcd(num, a[i])\n        if num == 1:\n            print('-1')\n            break\n    else:\n        if num == 1:\n            print('-1')\n        else:\n            print(minFactor(num))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    g = 0\n    flag = 0\n    for i in list1:\n        g = math.gcd(g, i)\n    if g == 1:\n        print('-1')\n    else:\n        for i in range(2, int(g ** (1 / 2)) + 1):\n            if g % i == 0:\n                flag = 1\n                print(i)\n                break\n        if flag == 0:\n            print(g)", "import math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    s = list(map(int, input().split()))\n    gcd = 0\n    for j in s:\n        gcd = math.gcd(gcd, j)\n    if gcd == 1:\n        print(-1)\n    else:\n        for p in range(2, math.floor(math.sqrt(gcd)) + 1):\n            if gcd % p == 0:\n                print(p)\n                break\n        else:\n            print(gcd)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    gcd = 0\n    for i in arr:\n        gcd = math.gcd(gcd, i)\n    if gcd == 1:\n        print(-1)\n    else:\n        r = int(math.sqrt(gcd)) + 1\n        for j in range(2, r):\n            if gcd % j == 0:\n                gcd = j\n                break\n        print(gcd)", "t = int(input())\nimport math\nwhile t > 0:\n    n = int(input())\n    l = list(map(int, input().split()))\n    gcd = 0\n    for i in l:\n        gcd = math.gcd(gcd, i)\n    if gcd == 1:\n        print(-1)\n    else:\n        for j in range(2, math.floor(math.sqrt(gcd)) + 1):\n            if gcd % j == 0:\n                print(j)\n                break\n        else:\n            print(gcd)\n    t = t - 1", "t = int(input())\nimport math\nwhile t > 0:\n    n = int(input())\n    l = list(map(int, input().split()))\n    gcd = 0\n    for i in l:\n        gcd = math.gcd(gcd, i)\n    if gcd == 1:\n        print(-1)\n    else:\n        for j in range(2, math.floor(math.sqrt(gcd)) + 1):\n            if gcd % j == 0:\n                print(j)\n                break\n        else:\n            print(gcd)\n    t = t - 1", "from math import gcd\nMAX = 100001\nsp = [0] * MAX\n\ndef sieve():\n    sp[0] = 1\n    sp[1] = -1\n    i = 2\n    while i * i < MAX:\n        if sp[i] == 0:\n            for j in range(2 * i, MAX, i):\n                if sp[j] == 0:\n                    sp[j] = i\n        i += 1\n    for i in range(2, MAX):\n        if sp[i] == 0:\n            sp[i] = i\n\ndef calgcd(L):\n    res = 0\n    for i in L:\n        res = gcd(res, i)\n    return sp[res]\nsieve()\nT = int(input())\nwhile T > 0:\n    N = int(input())\n    L = list(map(int, input().split()))\n    print(calgcd(L))\n    T -= 1", "from math import gcd\nMAX = 100001\nsp = [0] * MAX\n\ndef sieve():\n    sp[0] = 1\n    sp[1] = -1\n    i = 2\n    while i * i < MAX:\n        if sp[i] == 0:\n            for j in range(2 * i, MAX, i):\n                if sp[j] == 0:\n                    sp[j] = i\n        i += 1\n    for i in range(2, MAX):\n        if sp[i] == 0:\n            sp[i] = i\n\ndef calgcd(L):\n    res = 0\n    for i in L:\n        res = gcd(res, i)\n    return sp[res]\nsieve()\nT = int(input())\nwhile T > 0:\n    N = int(input())\n    L = list(map(int, input().split()))\n    print(calgcd(L))\n    T -= 1", "import math\n\ndef get_gcd(a, b):\n    if b == 0:\n        return a\n    return get_gcd(b, a % b)\nT = int(input())\nfor t in range(T):\n    (n, gcd) = (int(input()), 0)\n    arr = list(map(int, input().split()))\n    for e in arr:\n        gcd = get_gcd(gcd, e)\n    ans = gcd\n    for i in range(2, math.floor(math.sqrt(gcd)) + 1):\n        if gcd % i == 0:\n            ans = i\n            break\n    print(-1 if ans == 1 else ans)", "from math import gcd\nMAX = 100001\nsp = [0] * MAX\n\ndef sieve():\n    sp[0] = 1\n    sp[1] = -1\n    i = 2\n    while i * i < MAX:\n        if sp[i] == 0:\n            for j in range(2 * i, MAX, i):\n                if sp[j] == 0:\n                    sp[j] = i\n        i += 1\n    for i in range(2, MAX):\n        if sp[i] == 0:\n            sp[i] = i\n\ndef calgcd(L):\n    res = 0\n    for i in L:\n        res = gcd(res, i)\n    return sp[res]\nsieve()\nT = int(input())\nwhile T > 0:\n    N = int(input())\n    L = list(map(int, input().split()))\n    print(calgcd(L))\n    T -= 1", "from math import gcd\nMAX = 100001\nsp = [0] * MAX\n\ndef sieve():\n    sp[0] = 1\n    sp[1] = -1\n    i = 2\n    while i * i < MAX:\n        if sp[i] == 0:\n            for j in range(2 * i, MAX, i):\n                if sp[j] == 0:\n                    sp[j] = i\n        i += 1\n    for i in range(2, MAX):\n        if sp[i] == 0:\n            sp[i] = i\n\ndef calgcd(L):\n    res = 0\n    for i in L:\n        res = gcd(res, i)\n    return sp[res]\nsieve()\nT = int(input())\nwhile T > 0:\n    N = int(input())\n    L = list(map(int, input().split()))\n    print(calgcd(L))\n    T -= 1", "import math\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef primeNO(n):\n    a = math.floor(math.sqrt(n))\n    for i in range(2, math.floor(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = l[0]\n    count = 0\n    for j in range(1, n):\n        x = gcd(x, l[j])\n    count = primeNO(x)\n    if count == 1:\n        print(-1)\n    else:\n        print(count)", "import math\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef primeNO(n):\n    a = math.floor(math.sqrt(n))\n    for i in range(2, math.floor(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = l[0]\n    count = 0\n    for j in range(1, n):\n        x = gcd(x, l[j])\n    count = primeNO(x)\n    if count == 1:\n        print(-1)\n    else:\n        print(count)", "from math import gcd, sqrt\nLIMIT = 100001\nlowest_prime = [i for i in range(LIMIT)]\nfor i in range(2, LIMIT):\n    if lowest_prime[i] == i:\n        for j in range(2 * i, LIMIT, i):\n            lowest_prime[j] = min(lowest_prime[j], i)\nfor _ in range(int(input())):\n    curr = int(input())\n    arrs = [int(x) for x in input().split()]\n    gc_d = 0\n    for i in arrs:\n        gc_d = gcd(gc_d, i)\n    print(-1 if gc_d == 1 else lowest_prime[gc_d])", "import math\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef primeNO(n):\n    a = math.floor(math.sqrt(n))\n    for i in range(2, math.floor(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = l[0]\n    count = 0\n    for j in range(1, n):\n        x = gcd(x, l[j])\n    count = primeNO(x)\n    if count == 1:\n        print(-1)\n    else:\n        print(count)"]