["for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    s1 = s[::-1]\n    if s == s1:\n        print('YES')\n    else:\n        for i in range(n // 2):\n            if s[i] != s[n - i - 1]:\n                break\n        flag = 1\n        for x in [i, n - i - 1]:\n            s1 = s[:x]\n            s2 = s[x + 1:]\n            if s1 + s2 == (s1 + s2)[::-1]:\n                print('YES')\n                flag = 0\n                break\n        if flag:\n            print('NO')", "def P(s, n):\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            return False\n    return True\n\ndef isP(s, n):\n    (i, j) = (0, n - 1)\n    while i < j:\n        if s[i] == s[j]:\n            i += 1\n            j -= 1\n        else:\n            if P(s[i:j], j - i) or P(s[i + 1:j + 1], j - i):\n                return True\n            return False\n    return True\nfor _ in range(int(input())):\n    s = list(input().strip())\n    if isP(s, len(s)):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    if s == s[::-1]:\n        print('YES')\n    else:\n        for i in range(n // 2):\n            if s[i] != s[n - i - 1]:\n                break\n        for x in [i, n - i - 1]:\n            s1 = s[:x]\n            s2 = s[x + 1:]\n            if s1 + s2 == (s1 + s2)[::-1]:\n                print('YES')\n                break\n        else:\n            print('NO')", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    s1 = s[::-1]\n    if s == s1:\n        print('YES')\n    else:\n        for i in range(n // 2):\n            if s[i] != s[n - i - 1]:\n                break\n        flag = 1\n        for x in [i, n - i - 1]:\n            s1 = s[:x]\n            s2 = s[x + 1:]\n            if s1 + s2 == (s1 + s2)[::-1]:\n                print('YES')\n                flag = 0\n                break\n        if flag:\n            print('NO')", "for _ in range(int(input())):\n    s = input()\n    count = 0\n    c = ''\n    if s == s[::-1]:\n        print('YES')\n    else:\n        k = len(s)\n        (i, j) = (0, k - 1)\n        while i < j:\n            if s[i] == s[j]:\n                i += 1\n                j -= 1\n            else:\n                x1 = s[:i] + s[i + 1:]\n                x2 = s[:j] + s[j + 1:]\n                if x1 == x1[::-1] or x2 == x2[::-1]:\n                    print('YES')\n                    break\n                else:\n                    print('NO')\n                    break", "for _ in range(int(input())):\n    s = input()\n    count = 0\n    c = ''\n    if s == s[::-1]:\n        print('YES')\n    else:\n        k = len(s)\n        (i, j) = (0, k - 1)\n        while i < j:\n            if s[i] == s[j]:\n                i += 1\n                j -= 1\n            else:\n                x1 = s[:i] + s[i + 1:]\n                x2 = s[:j] + s[j + 1:]\n                if x1 == x1[::-1] or x2 == x2[::-1]:\n                    print('YES')\n                    break\n                else:\n                    print('NO')\n                    break", "def fun(s, skip):\n    i = 0\n    j = len(s) - 1\n    while i <= j:\n        if s[i] != s[j]:\n            if skip:\n                return fun(s[i + 1:j + 1], 0) or fun(s[i:j], 0)\n            else:\n                return False\n        i += 1\n        j -= 1\n    return True\nfor _ in range(int(input())):\n    if fun(input(), 1):\n        print('YES')\n    else:\n        print('NO')", "def is_pal(s):\n    i = 0\n    j = len(s) - 1\n    while i <= j:\n        if s[i] != s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef fun(s):\n    i = 0\n    j = len(s) - 1\n    while i <= j:\n        if s[i] != s[j]:\n            return is_pal(s[i + 1:j + 1]) or is_pal(s[i:j])\n        i += 1\n        j -= 1\n    return True\nfor _ in range(int(input())):\n    s = input()\n    pos = fun(s)\n    if pos:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    if s == s[::-1]:\n        print('YES')\n        continue\n    l = 0\n    r = len(s) - 1\n    while s[l] == s[r]:\n        l += 1\n        r -= 1\n    temp = s[l:r]\n    temp1 = s[l + 1:r + 1]\n    if temp == temp[::-1] or temp1 == temp1[::-1]:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = input()\n    if s == s[::-1]:\n        print('YES')\n        continue\n    l = 0\n    r = len(s) - 1\n    while s[l] == s[r]:\n        l += 1\n        r -= 1\n    temp = s[l:r]\n    temp1 = s[l + 1:r + 1]\n    if temp == temp[::-1] or temp1 == temp1[::-1]:\n        print('YES')\n    else:\n        print('NO')", "def ispalendrome(n):\n    for i in range(len(n) // 2):\n        if n[i] != n[-i - 1]:\n            return False\n    return True\nfor _ in range(int(input())):\n    S = input()\n    i = 0\n    j = len(S) - 1\n    nf = 0\n    fail = []\n    while i < j:\n        if S[i] != S[j]:\n            fail = [i, j]\n            break\n        i += 1\n        j -= 1\n    if fail != []:\n        if ispalendrome(S[:fail[1]] + S[fail[1] + 1:]) or ispalendrome(S[:fail[0]] + S[fail[0] + 1:]):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('YES')", "def soln1(s):\n    n = len(s)\n    if n <= 2:\n        return 'YES'\n    i = 0\n    j = n - 1\n    flag = True\n    while i <= j:\n        if s[i] == s[j]:\n            i += 1\n            j -= 1\n        elif flag:\n            flag = False\n            if s[i + 1] == s[j]:\n                i += 1\n            elif s[i] == s[j - 1]:\n                j -= 1\n            else:\n                return 'NO'\n        else:\n            return 'NO'\n    return 'YES'\n\ndef check(arr):\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            return False\n    return True\n\ndef soln(s):\n    s = list(s)\n    if check(s):\n        return 'YES'\n    n = len(s)\n    i = 0\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            if check(s[:i] + s[i + 1:]):\n                return 'YES'\n            elif check(s[:n - i - 1] + s[n - i:]):\n                return 'YES'\n            else:\n                return 'NO'\n    return 'NO'\nfor _ in range(int(input())):\n    s = input().strip()\n    print(soln(s))", "from sys import setrecursionlimit\nsetrecursionlimit(10 ** 8)\n\ndef ans(s, start, end, num):\n    if num > 1:\n        return False\n    elif start > end:\n        return True\n    elif s[start] == s[end]:\n        return ans(s, start + 1, end - 1, num)\n    else:\n        return ans(s, start + 1, end, num + 1) or ans(s, start, end - 1, num + 1)\ntest_cases = int(input())\nwhile test_cases != 0:\n    d = input()\n    ver = ans(d, 0, len(d) - 1, 0)\n    if ver is True:\n        print('YES')\n    else:\n        print('NO')\n    test_cases -= 1", "for t in range(int(input())):\n    s = input()\n    if s == s[::-1]:\n        print('YES')\n    else:\n        l = 0\n        r = len(s) - 1\n        while s[l] == s[r]:\n            l += 1\n            r -= 1\n        s1 = s[l:r]\n        s2 = s[l + 1:r + 1]\n        if s1 == s1[::-1] or s2 == s2[::-1]:\n            print('YES')\n        else:\n            print('NO')", "for i in range(int(input())):\n    s = input()\n    if s == s[::-1]:\n        print('YES')\n    else:\n        l = 0\n        r = len(s) - 1\n        flag = True\n        while s[l] == s[r]:\n            l += 1\n            r -= 1\n        temp = s[l:r]\n        temp1 = s[l + 1:r + 1]\n        if temp == temp[::-1] or temp1 == temp1[::-1]:\n            print('YES')\n        else:\n            print('NO')", "for i in range(int(input())):\n    s = input()\n    if s == s[::-1]:\n        print('YES')\n    else:\n        l = 0\n        r = len(s) - 1\n        flag = True\n        while s[l] == s[r]:\n            l += 1\n            r -= 1\n        temp = s[l:r]\n        temp1 = s[l + 1:r + 1]\n        if temp == temp[::-1] or temp1 == temp1[::-1]:\n            print('YES')\n        else:\n            print('NO')", "for i in range(int(input())):\n    s = input()\n    if s == s[::-1]:\n        print('YES')\n    else:\n        l = 0\n        r = len(s) - 1\n        flag = True\n        while s[l] == s[r]:\n            l += 1\n            r -= 1\n        temp = s[l:r]\n        temp1 = s[l + 1:r + 1]\n        if temp == temp[::-1] or temp1 == temp1[::-1]:\n            print('YES')\n        else:\n            print('NO')", "for i in range(int(input())):\n    s = input()\n    if s == s[::-1]:\n        print('YES')\n    else:\n        l = 0\n        r = len(s) - 1\n        flag = True\n        while s[l] == s[r]:\n            l += 1\n            r -= 1\n        temp = s[l:r]\n        temp1 = s[l + 1:r + 1]\n        if temp == temp[::-1] or temp1 == temp1[::-1]:\n            print('YES')\n        else:\n            print('NO')", "for i in range(int(input())):\n    s = input()\n    if s == s[::-1]:\n        print('YES')\n    else:\n        left = 0\n        right = len(s) - 1\n        flag = True\n        while s[left] == s[right]:\n            left += 1\n            right -= 1\n            if left >= right:\n                print('YES')\n                flag = False\n                break\n        if flag:\n            temp = s[left:right]\n            temp1 = s[left + 1:right + 1]\n            if temp == temp[::-1] or temp1 == temp1[::-1]:\n                print('YES')\n            else:\n                print('NO')", "for i in range(int(input())):\n    s = input()\n    if s == s[::-1]:\n        print('YES')\n    else:\n        left = 0\n        right = len(s) - 1\n        flag = True\n        while s[left] == s[right]:\n            left += 1\n            right -= 1\n            if left >= right:\n                print('YES')\n                flag = False\n                break\n        if flag:\n            temp = s[left:right]\n            temp1 = s[left + 1:right + 1]\n            if temp == temp[::-1] or temp1 == temp1[::-1]:\n                print('YES')\n            else:\n                print('NO')", "for _ in range(int(input())):\n    s = input()\n    for i in range(len(s) // 2):\n        if s[i] != s[len(s) - i - 1]:\n            ss = s[:i] + s[i + 1:]\n            sss = s[:len(s) - 1 - i] + s[len(s) - i:]\n            if ss == ss[::-1] or sss == sss[::-1]:\n                print('YES')\n                break\n            else:\n                print('NO')\n                break\n    else:\n        print('YES')", "for _ in range(int(input())):\n    s = input()\n    for i in range(len(s) // 2):\n        if s[i] != s[len(s) - i - 1]:\n            ss = s[:i] + s[i + 1:]\n            sss = s[:len(s) - 1 - i] + s[len(s) - i:]\n            if ss == ss[::-1] or sss == sss[::-1]:\n                print('YES')\n                break\n            else:\n                print('NO')\n                break\n    else:\n        print('YES')", "for _ in range(int(input())):\n    s = input()\n    for i in range(len(s) // 2):\n        if s[i] != s[len(s) - i - 1]:\n            ss = s[:i] + s[i + 1:]\n            sss = s[:len(s) - 1 - i] + s[len(s) - i:]\n            if ss == ss[::-1] or sss == sss[::-1]:\n                print('YES')\n                break\n            else:\n                print('NO')\n                break\n    else:\n        print('YES')", "for z in range(int(input())):\n    s = input()\n    n = len(s)\n\n    def isp(i, j):\n        while i < j:\n            if s[i] != s[j]:\n                return False\n            i += 1\n            j -= 1\n        return True\n    if isp(0, n - 1):\n        print('YES')\n        continue\n    i = 0\n    j = n - 1\n    while i < j:\n        if s[i] != s[j]:\n            if isp(i + 1, j) or isp(i, j - 1):\n                print('YES')\n                break\n            print('NO')\n            break\n        i += 1\n        j -= 1", "for _ in range(int(input())):\n    s = input()\n    for i in range(len(s) // 2):\n        if s[i] != s[len(s) - i - 1]:\n            ss = s[:i] + s[i + 1:]\n            sss = s[:len(s) - 1 - i] + s[len(s) - i:]\n            if ss == ss[::-1] or sss == sss[::-1]:\n                print('YES')\n                break\n            else:\n                print('NO')\n                break\n    else:\n        print('YES')", "t = int(input())\nfor i in range(t):\n    s = input()\n    k = 0\n    j = len(s) - 1\n    (a, b) = ('', '')\n    while k <= j:\n        if s[k] != s[j]:\n            a = s[:k] + s[k + 1:]\n            b = s[:j] + s[j + 1:]\n            break\n        k = k + 1\n        j = j - 1\n    if a == a[::-1] or b == b[::-1]:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    s = input().strip()\n    i = 0\n    j = len(s) - 1\n    a = ''\n    b = ''\n    while i <= j:\n        if s[i] != s[j]:\n            a = s[:i] + s[i + 1:]\n            b = s[:j] + s[j + 1:]\n            break\n        i += 1\n        j -= 1\n    if a == a[::-1] or b == b[::-1]:\n        print('YES')\n    else:\n        print('NO')\ntest = int(input())\nfor _ in range(test):\n    solve()", "import sys\n\ndef chk(s, i, j):\n    while i < j:\n        if s[i] != s[j]:\n            return 0\n        i += 1\n        j -= 1\n    return 1\n\ndef _input():\n    return sys.stdin.readline().strip()\n\ndef main():\n    for _ in range(int(_input())):\n        s = str(_input())\n        i = 0\n        j = len(s) - 1\n        temp = 0\n        while i < j:\n            if s[i] == s[j]:\n                i += 1\n                j -= 1\n            else:\n                x = chk(s, i + 1, j) or chk(s, i, j - 1)\n                temp = 1\n                break\n        if temp == 0:\n            print('YES')\n        elif x == True:\n            print('YES')\n        else:\n            print('NO')\nmain()", "import sys\n\ndef chk(s, i, j):\n    while i < j:\n        if s[i] != s[j]:\n            return 0\n        i += 1\n        j -= 1\n    return 1\n\ndef _input():\n    return sys.stdin.readline().strip()\n\ndef main():\n    for _ in range(int(_input())):\n        s = str(_input())\n        i = 0\n        j = len(s) - 1\n        temp = 0\n        while i < j:\n            if s[i] == s[j]:\n                i += 1\n                j -= 1\n            else:\n                x = chk(s, i + 1, j) or chk(s, i, j - 1)\n                temp = 1\n                break\n        if temp == 0:\n            print('YES')\n        elif x == True:\n            print('YES')\n        else:\n            print('NO')\nmain()", "import sys\n\ndef chk(s, i, j):\n    while i < j:\n        if s[i] != s[j]:\n            return 0\n        i += 1\n        j -= 1\n    return 1\n\ndef _input():\n    return sys.stdin.readline().strip()\n\ndef main():\n    for _ in range(int(_input())):\n        s = str(_input())\n        i = 0\n        j = len(s) - 1\n        temp = 0\n        while i < j:\n            if s[i] == s[j]:\n                i += 1\n                j -= 1\n            else:\n                x = chk(s, i + 1, j) or chk(s, i, j - 1)\n                temp = 1\n                break\n        if temp == 0:\n            print('YES')\n        elif x == True:\n            print('YES')\n        else:\n            print('NO')\nmain()", "def check(s, i, j):\n    while i < j:\n        if s[i] != s[j]:\n            return 0\n        i += 1\n        j -= 1\n    return 1\nfor _ in range(int(input())):\n    s = input().strip()\n    i = 0\n    j = len(s) - 1\n    f = 0\n    temp = True\n    while i < j:\n        if s[i] == s[j]:\n            i += 1\n            j -= 1\n        else:\n            temp = check(s, i + 1, j) or check(s, i, j - 1)\n            f = 1\n            break\n    if f == 0:\n        print('YES')\n    elif temp == True:\n        print('YES')\n    else:\n        print('NO')", "def check(s, i, j):\n    while i < j:\n        if s[i] != s[j]:\n            return 0\n        i += 1\n        j -= 1\n    return 1\nfor _ in range(int(input())):\n    s = input().strip()\n    i = 0\n    j = len(s) - 1\n    f = 0\n    temp = True\n    while i < j:\n        if s[i] == s[j]:\n            i += 1\n            j -= 1\n        else:\n            temp = check(s, i + 1, j) or check(s, i, j - 1)\n            f = 1\n            break\n    if f == 0:\n        print('YES')\n    elif temp == True:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = [str(i) for i in input()]\n    n = len(s)\n    l = s[:]\n    for i in range(-(-len(s) // 2)):\n        if s[i] != s[n - i - 1]:\n            s.pop(i)\n            l.pop(n - i - 1)\n            break\n    if s == s[::-1] or l == l[::-1]:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    s = input()\n    a = 0\n    b = len(s) - 1\n    f = True\n    while a <= b:\n        if s[a] == s[b]:\n            a += 1\n            b -= 1\n        else:\n            c1 = s[a:b]\n            c2 = s[a + 1:b + 1]\n            if c1 == c1[::-1] or c2 == c2[::-1]:\n                break\n            else:\n                f = False\n                break\n    print('YES' if f else 'NO')", "for _ in range(int(input())):\n    s = list(input().strip())\n    ans = len(s)\n    s2 = s[:]\n    for i in range(-(-ans // 2)):\n        if s[i] != s[ans - i - 1]:\n            s.pop(i)\n            s2.pop(ans - i - 1)\n            break\n    if s == s[::-1] or s2 == s2[::-1]:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    i = 0\n    j = len(s) - 1\n    flag = True\n    while i <= j:\n        if s[i] == s[j]:\n            i += 1\n            j -= 1\n        else:\n            temp1 = s[i:j]\n            temp2 = s[i + 1:j + 1]\n            if temp1 == temp1[::-1] or temp2 == temp2[::-1]:\n                break\n            else:\n                flag = False\n                break\n    if flag:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nfor _ in range(t):\n    s = input()\n    solve()", "def solve():\n    i = 0\n    j = len(s) - 1\n    flag = True\n    while i <= j:\n        if s[i] == s[j]:\n            i += 1\n            j -= 1\n        else:\n            temp1 = s[i:j]\n            temp2 = s[i + 1:j + 1]\n            if temp1 == temp1[::-1] or temp2 == temp2[::-1]:\n                break\n            else:\n                flag = False\n                break\n    if flag:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nfor _ in range(t):\n    s = input()\n    solve()", "def solve():\n    i = 0\n    j = len(s) - 1\n    flag = True\n    while i <= j:\n        if s[i] == s[j]:\n            i += 1\n            j -= 1\n        else:\n            temp1 = s[i:j]\n            temp2 = s[i + 1:j + 1]\n            if temp1 == temp1[::-1] or temp2 == temp2[::-1]:\n                break\n            else:\n                flag = False\n                break\n    if flag:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nfor _ in range(t):\n    s = input()\n    solve()", "import sys\ninput = sys.stdin.readline\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p):\n    if type(in_p) == list:\n        print(*in_p)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p)\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nfor _ in range(ii()):\n    s = ip()\n    i = 0\n    j = len(s) - 1\n    while i <= j:\n        if s[i] == s[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            break\n    l1 = ispal(i + 1, j, s)\n    l2 = ispal(i, j - 1, s)\n    if l2 or l1:\n        ot('YES')\n    else:\n        ot('NO')", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef check_palindrome(s, flag=0):\n    left = 0\n    right = len(s) - 1\n    while s[left] == s[right]:\n        left += 1\n        right -= 1\n        if left >= right:\n            return True\n    if flag == 1 and (check_palindrome(s[left:right]) or check_palindrome(s[left + 1:right + 1])):\n        return True\n    else:\n        return False\n\ndef main():\n    for _ in tr():\n        s = line()\n        if check_palindrome(s, 1):\n            print('YES')\n        else:\n            print('NO')\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef checkPalindrome(s):\n    return s == s[::-1]\n\ndef main():\n    for _ in tr():\n        s = line()\n        if checkPalindrome(s):\n            print('YES')\n            continue\n        possible = False\n        n = len(s)\n        for i in range(n // 2):\n            if s[i] != s[n - i - 1]:\n                if checkPalindrome(s[:i] + s[i + 1:]):\n                    possible = True\n                elif checkPalindrome(s[:n - i - 1] + s[n - i:]):\n                    possible = True\n                else:\n                    break\n        print('YES' if possible else 'NO')\nmain()", "for _ in range(int(input())):\n    s = list(input())\n    c = 0\n    val = ''\n    if s == s[::-1]:\n        print('YES')\n        continue\n    for i in range(len(s)):\n        if s[i] != s[len(s) - i - 1]:\n            ind = i\n            val = s[:ind] + s[ind + 1:]\n            if val == val[::-1]:\n                c = 1\n            ind = len(s) - i - 1\n            val = s[:ind] + s[ind + 1:]\n            if val == val[::-1]:\n                c = 1\n            break\n    if c == 0:\n        print('NO')\n    else:\n        print('YES')", "try:\n    from debug import debug, timer\nexcept ImportError:\n    pass\nfrom sys import stdin\ninput = stdin.readline\n\ndef rii():\n    return range(int(input().strip()))\n\ndef ii():\n    return int(input().strip())\n\ndef mii():\n    return map(int, input().strip().split(' '))\n\ndef lmii():\n    return list(map(int, input().strip().split(' ')))\n\ndef si():\n    return str(input().strip())\n\ndef getvals():\n    while True:\n        yield from input().split()\n\ndef tri(n):\n    return n * (n + 1) // 2\n\ndef smallest_first(m, n):\n    return (min(m, n), max(m, n))\n\ndef check_palindrome(s, lives=0):\n    (left, right) = (0, len(s) - 1)\n    while s[left] == s[right]:\n        left += 1\n        right -= 1\n        if left >= right:\n            return True\n    if lives == 1 and (check_palindrome(s[left:right]) or check_palindrome(s[left + 1:right + 1])):\n        return True\n    else:\n        return False\n\ndef solve(s):\n    return 'YES' if check_palindrome(s, 1) else 'NO'\n\ndef do_codechef():\n    for t in rii():\n        print(solve(si()))\ndo_codechef()\nexit()", "def solve():\n    s = input().strip()\n    i = 0\n    j = len(s) - 1\n    a = ''\n    b = ''\n    while i <= j:\n        if s[i] != s[j]:\n            a = s[:i] + s[i + 1:]\n            b = s[:j] + s[j + 1:]\n            break\n        i += 1\n        j -= 1\n    if a == a[::-1] or b == b[::-1]:\n        print('YES')\n    else:\n        print('NO')\ntest = int(input())\nfor _ in range(test):\n    solve()", "def solve():\n    s = input().strip()\n    i = 0\n    j = len(s) - 1\n    a = ''\n    b = ''\n    while i <= j:\n        if s[i] != s[j]:\n            a = s[:i] + s[i + 1:]\n            b = s[:j] + s[j + 1:]\n            break\n        i += 1\n        j -= 1\n    if a == a[::-1] or b == b[::-1]:\n        print('YES')\n    else:\n        print('NO')\ntest = int(input())\nfor _ in range(test):\n    solve()", "def solve():\n    s = input().strip()\n    i = 0\n    j = len(s) - 1\n    a = ''\n    b = ''\n    while i <= j:\n        if s[i] != s[j]:\n            a = s[:i] + s[i + 1:]\n            b = s[:j] + s[j + 1:]\n            break\n        i += 1\n        j -= 1\n    if a == a[::-1] or b == b[::-1]:\n        print('YES')\n    else:\n        print('NO')\ntest = int(input())\nfor _ in range(test):\n    solve()", "def solve():\n    s = input().strip()\n    i = 0\n    j = len(s) - 1\n    a = ''\n    b = ''\n    while i <= j:\n        if s[i] != s[j]:\n            a = s[:i] + s[i + 1:]\n            b = s[:j] + s[j + 1:]\n            break\n        i += 1\n        j -= 1\n    if a == a[::-1] or b == b[::-1]:\n        print('YES')\n    else:\n        print('NO')\ntest = int(input())\nfor _ in range(test):\n    solve()", "def solve():\n    s = input().strip()\n    i = 0\n    j = len(s) - 1\n    a = ''\n    b = ''\n    while i <= j:\n        if s[i] != s[j]:\n            a = s[:i] + s[i + 1:]\n            b = s[:j] + s[j + 1:]\n            break\n        i += 1\n        j -= 1\n    if a == a[::-1] or b == b[::-1]:\n        print('YES')\n    else:\n        print('NO')\ntest = int(input())\nfor _ in range(test):\n    solve()", "for _ in range(int(input())):\n    s = str(input())\n    n = len(s)\n    k = s[::-1]\n    (a, b) = ('', '')\n    for i in range(n):\n        if s[i] != k[i]:\n            a += s[i + 1:]\n            b += k[i + 1:]\n            break\n        else:\n            a += s[i]\n            b += k[i]\n    if a == a[::-1] or b == b[::-1]:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    s = str(input())\n    n = len(s)\n    k = s[::-1]\n    (a, b) = ('', '')\n    for i in range(n):\n        if s[i] != k[i]:\n            a += s[i + 1:]\n            b += k[i + 1:]\n            break\n        else:\n            a += s[i]\n            b += k[i]\n    if a == a[::-1] or b == b[::-1]:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    s = input().strip()\n    i = 0\n    j = len(s) - 1\n    a = ''\n    b = ''\n    while i <= j:\n        if s[i] != s[j]:\n            a = s[:i] + s[i + 1:]\n            b = s[:j] + s[j + 1:]\n            break\n        i += 1\n        j -= 1\n    if a == a[::-1] or b == b[::-1]:\n        print('YES')\n    else:\n        print('NO')\ntest = int(input())\nfor _ in range(test):\n    solve()", "def solve():\n    s = input().strip()\n    i = 0\n    j = len(s) - 1\n    a = ''\n    b = ''\n    while i <= j:\n        if s[i] != s[j]:\n            a = s[:i] + s[i + 1:]\n            b = s[:j] + s[j + 1:]\n            break\n        i += 1\n        j -= 1\n    if a == a[::-1] or b == b[::-1]:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nfor _1 in range(t):\n    solve()", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    flag1 = 1\n    flag2 = 1\n    s = input()\n    i = 0\n    j = len(s) - 1\n    while i <= j:\n        if s[i] != s[j]:\n            break\n        i = i + 1\n        j = j - 1\n    if i > j:\n        print('YES')\n        continue\n    k = i\n    m = j\n    i = i + 1\n    while i <= j:\n        if s[i] != s[j]:\n            flag1 = 0\n            break\n        i += 1\n        j -= 1\n    i = k\n    j = m - 1\n    while i <= j:\n        if s[i] != s[j]:\n            flag2 = 0\n            break\n        i += 1\n        j -= 1\n    if flag1 or flag2:\n        print('YES')\n    else:\n        print('NO')", "def isp(s):\n    return s == s[::-1]\nfor _ in range(int(input())):\n    s = input()\n    s = list(s)\n    if s == s[::-1]:\n        print('YES')\n        continue\n    f = 0\n    n = len(s)\n    for i in range(n):\n        if s[i] != s[n - i - 1]:\n            ind = i\n            if isp(s[:ind] + s[ind + 1:]):\n                f = 1\n            ind = n - i - 1\n            if isp(s[:ind] + s[ind + 1:]):\n                f = 1\n            break\n    print('YES' if f else 'NO')", "def isp(s):\n    return s == s[::-1]\nfor _ in range(int(input())):\n    s = input()\n    s = list(s)\n    if s == s[::-1]:\n        print('YES')\n        continue\n    f = 0\n    n = len(s)\n    for i in range(n):\n        if s[i] != s[n - i - 1]:\n            ind = i\n            if isp(s[:ind] + s[ind + 1:]):\n                f = 1\n            ind = n - i - 1\n            if isp(s[:ind] + s[ind + 1:]):\n                f = 1\n            break\n    print('YES' if f else 'NO')", "def isp(s):\n    return s == s[::-1]\nfor _ in range(int(input())):\n    s = input()\n    s = list(s)\n    if s == s[::-1]:\n        print('YES')\n        continue\n    f = 0\n    n = len(s)\n    for i in range(n):\n        if s[i] != s[n - i - 1]:\n            ind = i\n            if isp(s[:ind] + s[ind + 1:]):\n                f = 1\n            ind = n - i - 1\n            if isp(s[:ind] + s[ind + 1:]):\n                f = 1\n            break\n    print('YES' if f else 'NO')", "for i in range(int(input())):\n    s = input()\n    pos = -1\n    if s == s[::-1]:\n        print('YES')\n    else:\n        for i in range(len(s) // 2):\n            if s[i] != s[len(s) - i - 1]:\n                pos = i\n                break\n        s1 = s[:pos] + s[pos + 1:]\n        s2 = s[:len(s) - pos - 1] + s[len(s) - pos:]\n        if s1 == s1[::-1] or s2 == s2[::-1]:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    s = list(input().strip())\n    ns = len(s)\n    new_s = s[:]\n    for i in range(-(-ns // 2)):\n        if s[i] != s[ns - i - 1]:\n            s.pop(i)\n            new_s.pop(ns - i - 1)\n            break\n    if s == s[::-1] or new_s == new_s[::-1]:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\nfor _ in range(int(input())):\n    l = input()\n    val = 0\n    length = len(l) // 2\n    i = 0\n    j = len(l) - 1\n    flag = False\n    count = 0\n    count1 = 0\n    if l == l[::-1]:\n        print('YES')\n        continue\n    while i < length:\n        if l[i] != l[j]:\n            count = i\n            count1 = j\n            break\n        i += 1\n        j -= 1\n    string = l[:count] + l[count + 1:]\n    string2 = l[:count1] + l[count1 + 1:]\n    if string == string[::-1] or string2 == string2[::-1]:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    s = input()\n    pos = -1\n    if s == s[::-1]:\n        print('YES')\n    else:\n        for i in range(len(s) // 2):\n            if s[i] != s[len(s) - i - 1]:\n                pos = i\n                break\n        s1 = s[:pos] + s[pos + 1:]\n        s2 = s[:len(s) - pos - 1] + s[len(s) - pos:]\n        if s1 == s1[::-1] or s2 == s2[::-1]:\n            print('YES')\n        else:\n            print('NO')", "for i in range(int(input())):\n    s = input()\n    rev = s[::-1]\n    (l, l_rev) = ('', '')\n    (pos, pos_rev) = (0, 0)\n    if s == s[::-1]:\n        print('YES')\n        continue\n    for i in range(len(s)):\n        if s[i] != rev[i]:\n            pos = i\n            break\n    pos_rev = len(s) - pos - 1\n    for i in range(len(s)):\n        if i == pos:\n            l_rev += s[i]\n        elif i == pos_rev:\n            l += s[i]\n        else:\n            l += s[i]\n            l_rev += s[i]\n    if l == l[::-1] or l_rev == l_rev[::-1]:\n        print('YES')\n    else:\n        print('NO')", "def palin(s):\n    flag = 0\n    pos = 0\n    for i in range(len(s) // 2):\n        if s[i] != s[-1 - i]:\n            flag = 1\n            pos = i\n            break\n    if flag == 1:\n        return pos\n    else:\n        return -1\nt = int(input())\nfor i in range(t):\n    ns = ''\n    s = input()\n    ok = palin(s)\n    if ok == -1:\n        print('YES')\n    else:\n        for j in range(len(s)):\n            if j != ok:\n                ns += s[j]\n        ok1 = palin(ns)\n        if ok1 == -1:\n            print('YES')\n        else:\n            new = ''\n            oppo = len(s) - ok - 1\n            for j in range(len(s)):\n                if j != oppo:\n                    new += s[j]\n            if palin(new) == -1:\n                print('YES')\n            else:\n                print('NO')", "def isPalin(s):\n    return s == s[::-1]\nfor _ in range(int(input())):\n    s = input()\n    (i, j) = (0, len(s) - 1)\n    ans = 'NO'\n    while i < j:\n        if s[i] == s[j]:\n            i += 1\n            j -= 1\n        else:\n            if isPalin(s[i + 1:j + 1]):\n                ans = 'YES'\n            elif isPalin(s[i:j]):\n                ans = 'YES'\n            break\n    if i >= j:\n        ans = 'YES'\n    print(ans)", "for t in range(int(input())):\n    s = input()\n    ans = 0\n    l = len(s)\n    i = 0\n    j = l - 1\n    flag = 0\n    while i < j:\n        if s[i] != s[j]:\n            flag = 1\n            break\n        i += 1\n        j -= 1\n    if flag == 0:\n        print('YES')\n    else:\n        flag = 0\n        a = i\n        b = j - 1\n        while a < b:\n            if s[a] != s[b]:\n                flag = 1\n                break\n            a += 1\n            b -= 1\n        if flag == 0:\n            print('YES')\n        else:\n            flag = 0\n            a = i + 1\n            b = j\n            while a < b:\n                if s[a] != s[b]:\n                    flag = 1\n                    break\n                a += 1\n                b -= 1\n            if flag == 0:\n                print('YES')\n            else:\n                print('NO')", "t = int(input())\nfor z in range(t):\n    s = list(input())\n    if len(s) > 10000:\n        i = 0\n        j = len(s) - 1\n        count = 0\n        while i <= j:\n            if s[i] != s[j]:\n                if s[i] != s[j - 1]:\n                    j += 1\n                    count += 1\n                elif s[j] != s[i + 1]:\n                    i -= 1\n                    count += 1\n            i += 1\n            j -= 1\n        if s == s[::-1]:\n            print('YES')\n        elif count == 0 and len(s) == 3:\n            print('YES')\n        elif count == 1 and len(s) != 3:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        l = 1\n        for i in range(len(s)):\n            a = s[:i] + s[i + 1:]\n            if a == a[::-1]:\n                print('YES')\n                l = 0\n                break\n        if l:\n            print('NO')", "t = int(input())\nfor i in range(t):\n    s = list(input())\n    if len(s) > 1000:\n        k = 0\n        x = s[::-1]\n        for k in range(len(s) // 2):\n            if s[k] == s[len(s) - k - 1]:\n                continue\n            else:\n                break\n        t = s[:k] + s[k + 1:len(s)]\n        x = t[::-1]\n        e = s[:len(s) - k - 1] + s[len(s) - k - 1 + 1:len(s)]\n        r = e[::-1]\n        if t == x or e == r:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        for k in range(len(s)):\n            t = s[:k] + s[k + 1:len(s)]\n            if t == t[::-1]:\n                print('YES')\n                break\n        else:\n            print('NO')", "def is_subsequence(s1, s2):\n    i = j = 0\n    l = len(s2)\n    for j in range(l):\n        if i == l - 1:\n            break\n        if s2[j] == s1[i]:\n            i += 1\n    return i == l - 1\nfor _ in range(int(input())):\n    s1 = input()\n    s2 = s1[::-1]\n    if s1 == s2:\n        print('YES')\n        continue\n    l = len(s1)\n    if is_subsequence(s1[0:l // 2], s2[0:l // 2 + 1]) or is_subsequence(s2[0:l // 2], s1[0:l // 2 + 1]):\n        print('YES')\n    else:\n        print('NO')", "def ifpalindrome(x):\n    if x == x[::-1]:\n        return 'yes'\nn = int(input())\nres = []\nfor y in range(n):\n    ip = input()\n    if ifpalindrome(ip) == 'yes':\n        res.append('YES')\n    else:\n        a = 0\n        b = len(ip) - 1\n        while ip[a] == ip[b]:\n            a += 1\n            b -= 1\n        temp = ip[0:a] + ip[a + 1:len(ip) + 1]\n        temp2 = ip[0:b] + ip[b + 1:len(ip) + 1]\n        if ifpalindrome(temp) == 'yes' or ifpalindrome(temp2) == 'yes':\n            res.append('YES')\n        else:\n            res.append('NO')\nfor x in range(len(res)):\n    print(res[x])", "def ifpalindrome(x):\n    if x == x[::-1]:\n        return 'yes'\nn = int(input())\nres = []\nfor y in range(n):\n    ip = input()\n    if ifpalindrome(ip) == 'yes':\n        res.append('YES')\n    else:\n        a = 0\n        b = len(ip) - 1\n        while ip[a] == ip[b]:\n            a += 1\n            b -= 1\n        temp = ip[0:a] + ip[a + 1:len(ip) + 1]\n        temp2 = ip[0:b] + ip[b + 1:len(ip) + 1]\n        if ifpalindrome(temp) == 'yes' or ifpalindrome(temp2) == 'yes':\n            res.append('YES')\n        else:\n            res.append('NO')\nfor x in range(len(res)):\n    print(res[x])", "from sys import setrecursionlimit\nsetrecursionlimit(10 ** 9)\ns = None\n\ndef check(i, j, cost):\n    if i >= j:\n        return cost\n    if cost > 1:\n        return float('inf')\n    elif s[i] == s[j]:\n        return check(i + 1, j - 1, cost)\n    else:\n        return min(check(i + 1, j, cost + 1), check(i, j - 1, cost + 1))\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    if check(0, n - 1, 0) <= 1:\n        print('YES')\n    else:\n        print('NO')", "def is_palindrome(s):\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] != s[j]:\n            return False\n        i = i + 1\n        j = j - 1\n    return True\nT = int(input())\nfor t in range(T):\n    s = input()\n    i = 0\n    j = len(s) - 1\n    res = None\n    while i < j and res is None:\n        if s[i] != s[j]:\n            if not is_palindrome(s[i:j]) and (not is_palindrome(s[i + 1:j + 1])):\n                res = False\n            else:\n                res = True\n        i = i + 1\n        j = j - 1\n    if res is None:\n        res = True\n    if res:\n        print('YES')\n    else:\n        print('NO')", "def check(s, i, j):\n    while i < j:\n        if s[i] != s[j]:\n            return 0\n        i += 1\n        j -= 1\n    return 1\nflag = int(0)\nt = int(input())\nwhile t:\n    flag = 0\n    s = str(input())\n    l = len(s)\n    if l == 2:\n        print('YES')\n    elif l == 3:\n        if s[0] == s[1] or s[1] == s[2] or s[2] == s[0]:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        i = 0\n        j = l - 1\n        while i < j:\n            if s[i] == s[j]:\n                i += 1\n                j -= 1\n            else:\n                flag = 1\n                if check(s, i, j - 1) == 1 or check(s, i + 1, j) == 1:\n                    print('YES')\n                    break\n                else:\n                    print('NO')\n                    break\n        if flag == 0:\n            print('YES')\n    t -= 1", "def ispalin(str1):\n    return str1 == str1[::-1]\nt = int(input())\nfor i in range(t):\n    exp = input()\n    l = len(exp)\n    if ispalin(exp):\n        print('YES')\n    else:\n        for j in range(l // 2):\n            if exp[j] == exp[-j - 1]:\n                continue\n            elif ispalin(exp[j:l - j - 1]) or ispalin(exp[j + 1:l - j]):\n                print('YES')\n                break\n            else:\n                print('NO')\n                break\n            print('YES')", "import sys\nimport math\nfrom time import time\nfrom itertools import permutations, combinations\nimport collections\nimport functools\nfrom fractions import gcd, Fraction\nimport string\nimport operator\nimport bisect\n\nclass timed(object):\n\n    def __init__(self, func):\n        self.func = func\n\n    def __call__(self, *args):\n        t1 = time()\n        ret = self.func(*args)\n        dif_time = time() - t1\n        print('%s: returned %s in %f seconds' % (self.func.__name__, ret, dif_time))\n        return ret\n\ndef comp(f1, f2, *args):\n    t1 = time()\n    r1 = f1(*args) if f1 is not None else None\n    t2 = time()\n    r2 = f2(*args) if f2 is not None else None\n    t3 = time()\n    res = '%5s: %s in %f\\n%5s: %s in %f' % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)\n    if r1 != r2:\n        dr = '!! DIFFERENT RESULTS !!'\n        res = dr + '\\n' + res + '\\n' + dr\n    print(res)\n    return r1 if r1 == r2 else None\n\ndef alg(s):\n\n    def is_palin(t):\n        length = len(t)\n        hl = length // 2\n        for i in range(hl):\n            if t[i] != t[length - i - 1]:\n                return False\n        return True\n    length = len(s)\n    hl = length // 2\n    for i in range(hl):\n        l = s[i]\n        r = s[length - 1 - i]\n        if l != r:\n            if is_palin(s[i:length - 1 - i]) or is_palin(s[i + 1:length - 1 - i + 1]):\n                return 'YES'\n            else:\n                return 'NO'\n    return 'YES'\n\ndef main():\n    data = sys.stdin\n    nb = int(data.readline())\n    for icase in range(nb):\n        s = data.readline().strip()\n        res = alg(s)\n        print(res)\nmain()", "T = int(input())\n\ndef p(s):\n    return s == s[::-1]\nfor t in range(T):\n    s = input()\n    n = len(s)\n    for i in range(n):\n        if s[i] != s[n - 1 - i]:\n            if p(s[:i] + s[i + 1:]) or p(s[:n - 1 - i] + s[n - i:]):\n                print('YES')\n            else:\n                print('NO')\n            break\n    else:\n        print('YES')", "def checkPali(s):\n    (left, right) = (0, len(s) - 1)\n    while left < right and s[left] == s[right]:\n        (left, right) = (left + 1, right - 1)\n    return (left, right)\n\ndef isPali(x):\n    [left, right] = x\n    return left >= right\n\ndef solve():\n    s = input()\n    (left, right) = checkPali(s)\n    if left >= right or isPali(checkPali(s[left + 1:right + 1])) or isPali(checkPali(s[left:right])):\n        print('YES')\n    else:\n        print('NO')\nT = int(input())\nfor t in range(0, T):\n    solve()", "def palin(x):\n    l = len(x)\n    w = int(l / 2)\n    for i in range(0, w):\n        if x[i] != x[l - i - 1]:\n            return 0\n        elif i == w - 1:\n            return 1\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    x = input()\n    temp = list(x)\n    l = len(x)\n    w = int(l / 2)\n    if l == 2:\n        print('YES')\n    else:\n        i = 0\n        while temp[i] == temp[l - 1 - i] and i < w:\n            i = i + 1\n        if palin(x[0:i] + x[i + 1:l]) == 1:\n            print('YES')\n        elif palin(x[0:l - i - 1] + x[l - (i + 1) + 1:l]) == 1:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor j in range(t):\n    s = input()\n    i = 0\n    while i < len(s) // 2 and s[i] == s[-(1 + i)]:\n        i += 1\n    if i == len(s) // 2:\n        print('YES')\n    else:\n        temp1 = s[:i] + s[i + 1:]\n        temp2 = s[:-(1 + i)] + s[len(s) - i:]\n        if temp1 == temp1[::-1] or temp2 == temp2[::-1]:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nwhile t:\n    t = t - 1\n    str = input()\n    j = 0\n    k = len(str) - 1\n    (flag1, flag2) = (False, False)\n    while j < k:\n        if str[j] == str[k]:\n            j = j + 1\n            k = k - 1\n        else:\n            J = j\n            K = k - 1\n            while J < K:\n                if str[J] != str[K]:\n                    flag1 = True\n                    J = K\n                else:\n                    J = J + 1\n                    K = K - 1\n            J = j + 1\n            K = k\n            while J < K:\n                if str[J] != str[K]:\n                    flag2 = True\n                    J = k\n                else:\n                    J = J + 1\n                    K = K - 1\n            j = k\n    if flag1 and flag2:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nwhile t:\n    t = t - 1\n    str = input()\n    j = 0\n    k = len(str) - 1\n    (flag1, flag2) = (False, False)\n    while j < k:\n        if str[j] == str[k]:\n            j = j + 1\n            k = k - 1\n        else:\n            J = j\n            K = k - 1\n            while J < K:\n                if str[J] != str[K]:\n                    flag1 = True\n                    break\n                else:\n                    J = J + 1\n                    K = K - 1\n            J = j + 1\n            K = k\n            while J < K:\n                if str[J] != str[K]:\n                    flag2 = True\n                    break\n                else:\n                    J = J + 1\n                    K = K - 1\n            break\n    if flag1 and flag2:\n        print('NO')\n    else:\n        print('YES')", "def palindrome(s):\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            return False\n    return True\n\ndef solve(s):\n    ind = -9999999\n    for i in range(len(s) // 2):\n        if s[i] != s[-i - 1]:\n            ind = i\n            break\n    return ind == -9999999 or palindrome(s[ind + 1:len(s) - ind]) or palindrome(s[ind:len(s) - ind - 1])\nT = int(input())\nfor tc in range(T):\n    s = input()\n    if solve(s):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t:\n    t = t - 1\n    str = input()\n    j = 0\n    k = len(str) - 1\n    (flag1, flag2) = (False, False)\n    while j < k:\n        if str[j] == str[k]:\n            (j, k) = (j + 1, k - 1)\n            continue\n        else:\n            (J, K) = (j, k - 1)\n            while J < K:\n                if str[J] != str[K]:\n                    flag1 = True\n                    break\n                else:\n                    (J, K) = (J + 1, K - 1)\n            (J, K) = (j + 1, k)\n            while J < K:\n                if str[J] != str[K]:\n                    flag2 = True\n                    break\n                else:\n                    (J, K) = (J + 1, K - 1)\n            break\n    if flag1 and flag2:\n        print('NO')\n    else:\n        print('YES')", "import sys\n\ndef WordIsPalindrome(theWord):\n    return theWord == ''.join(reversed(theWord))\ntestCase = int(sys.stdin.readline())\nwhile testCase > 0:\n    testCase -= 1\n    enteredString = sys.stdin.readline().rstrip('\\n')\n    flagOfWhetherPossible = 0\n    while flagOfWhetherPossible == 0 and len(enteredString) != 0:\n        if enteredString[0] == enteredString[len(enteredString) - 1]:\n            enteredString = enteredString[1:-1]\n        elif WordIsPalindrome(enteredString[:-1]) == True or WordIsPalindrome(enteredString[1:]) == True:\n            flagOfWhetherPossible = 1\n            break\n        else:\n            flagOfWhetherPossible = 2\n            break\n    if flagOfWhetherPossible == 2:\n        print('NO')\n    else:\n        print('YES')", "def ispal(s):\n    return s == s[::-1]\n\ndef main():\n    T = eval(input())\n    for t in range(T):\n        s = input()\n        left_ptr = 0\n        right_ptr = len(s) - 1\n        found_different = False\n        final_spot = False\n        while True:\n            if s[left_ptr] != s[right_ptr]:\n                found_different = True\n                break\n            if left_ptr == right_ptr:\n                final_spot = True\n                break\n            if left_ptr + 1 == right_ptr:\n                final_spot = True\n                break\n            left_ptr += 1\n            right_ptr -= 1\n        good = False\n        if found_different:\n            remove_left = s[:left_ptr] + s[left_ptr + 1:]\n            remove_right = s[:right_ptr] + s[right_ptr + 1:]\n            if ispal(remove_left) or ispal(remove_right):\n                good = True\n        elif final_spot:\n            remove_left = s[:left_ptr] + s[left_ptr + 1:]\n            remove_right = s[:right_ptr] + s[right_ptr + 1:]\n            if ispal(remove_left) or ispal(remove_right):\n                good = True\n        if good:\n            print('YES')\n        else:\n            print('NO')\nmain()"]