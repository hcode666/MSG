["from math import gcd, sqrt\n\ndef li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\nfor tastcas in range(int(input())):\n    n = ii()\n    tot = n * n\n    m = 1 + int(sqrt(n))\n    s = 0\n    for d in range(1, m):\n        s += n // d\n    s += s\n    s -= (m - 1) * (m - 1)\n    g = gcd(s, tot)\n    print(str(s // g) + '/' + str(tot // g))", "from math import gcd, sqrt\n\ndef li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\nfor tastcas in range(int(input())):\n    n = ii()\n    tot = n * n\n    m = 1 + int(sqrt(n))\n    s = 0\n    for d in range(1, m):\n        s += n // d\n    s += s\n    s -= (m - 1) * (m - 1)\n    g = gcd(s, tot)\n    print(str(s // g) + '/' + str(tot // g))", "from math import gcd, sqrt\n\ndef li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\nfor tastcas in range(int(input())):\n    n = ii()\n    tot = n * n\n    m = 1 + int(sqrt(n))\n    s = 0\n    for d in range(1, m):\n        s += n // d\n    s += s\n    s -= (m - 1) * (m - 1)\n    g = gcd(s, tot)\n    print(str(s // g) + '/' + str(tot // g))", "from math import gcd, sqrt\n\ndef li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\nfor tastcas in range(int(input())):\n    n = ii()\n    tot = n * n\n    m = 1 + int(sqrt(n))\n    s = 0\n    for d in range(1, m):\n        s += n // d\n    s += s\n    s -= (m - 1) * (m - 1)\n    g = gcd(s, tot)\n    print(str(s // g) + '/' + str(tot // g))", "from math import gcd, sqrt\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    c = n * n\n    l = int(sqrt(n))\n    s = 2 * sum((n // d for d in range(1, l + 1)))\n    s -= l * l\n    g = gcd(s, c)\n    print(f'{s // g}/{c // g}')", "from math import gcd, sqrt\n\ndef showABprob(num):\n    trial = num * num\n    lim = int(sqrt(num))\n    succ = 2 * sum((num // div for div in range(1, lim + 1)))\n    succ -= lim * lim\n    g = gcd(succ, trial)\n    print(f'{succ // g}/{trial // g}')\nT = int(input())\nfor ti in range(T):\n    showABprob(int(input()))", "from math import gcd, sqrt\n\ndef showABprob(num):\n    trial = num * num\n    lim = int(sqrt(num))\n    succ = 2 * sum((num // div for div in range(1, lim + 1)))\n    succ -= lim * lim\n    g = gcd(succ, trial)\n    print(f'{succ // g}/{trial // g}')\nT = int(input())\nfor ti in range(T):\n    showABprob(int(input()))", "def gcd(a, b):\n    if a * b == 0:\n        return 0\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef isqrt(num):\n    bits = (num.bit_length() - 1) // 2\n    lo = int(2 ** bits)\n    hi = 2 ** (bits + 1)\n    while hi - lo > 1:\n        md = (hi + lo) // 2\n        if md * md > num:\n            hi = md\n        else:\n            lo = md\n    return lo\n\ndef showABprob(num):\n    trial = num * num\n    lim = isqrt(num)\n    succ = sum((num // div for div in range(1, lim + 1)))\n    succ = 2 * succ - lim * lim\n    g = gcd(succ, trial)\n    print(f'{succ // g}/{trial // g}')\nT = int(input())\nfor ti in range(T):\n    showABprob(int(input()))", "def gcd(a, b):\n    if a * b == 0:\n        return 0\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef isqrt(num):\n    bits = (num.bit_length() - 1) // 2\n    lo = int(2 ** bits)\n    hi = 2 ** (bits + 1)\n    while hi - lo > 1:\n        md = (hi + lo) // 2\n        if md * md > num:\n            hi = md\n        else:\n            lo = md\n    return lo\n\ndef ABprob(num):\n    trial = num * num\n    lim = isqrt(num)\n    succ = 0\n    div = 1\n    while div <= lim:\n        succ += num // div\n        div += 1\n    div -= 1\n    succ = 2 * succ - div * div\n    g = gcd(succ, trial)\n    return (succ // g, trial // g)\nT = int(input())\nfor ti in range(T):\n    print('{}/{}'.format(*ABprob(int(input()))))", "from math import gcd\nT = int(input())\nfor ti in range(T):\n    N = int(input())\n    trial = N * N\n    succ = 0\n    div = 1\n    while N >= div * div:\n        succ += (N // div - div) * 2 + 1\n        div += 1\n    g = gcd(succ, trial)\n    print(f'{succ // g}/{trial // g}')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    s = int(math.sqrt(n))\n    ans = 0\n    for i in range(1, s + 1):\n        ans += n // i\n    ans = ans * 2 - s * s\n    g = math.gcd(n * n, ans)\n    print(str(ans // g) + '/' + str(n * n // g))", "from collections import defaultdict\nimport sys\nimport math as m\nimport random as rd\nimport bisect as b\nimport time\nsys.setrecursionlimit(1000000)\n\ndef uno():\n    return int(sys.stdin.readline().strip())\n\ndef dos():\n    return sys.stdin.readline().strip()\n\ndef tres():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef cuatro():\n    return sys.stdin.readline().strip().split()\nfor _ in range(uno()):\n    n = uno()\n    (ans, root) = (0, m.floor(m.sqrt(n)))\n    for i in range(1, root + 1):\n        ans += n // i\n    ans = ans + ans - root * root\n    (a, b) = (ans // m.gcd(ans, n * n), n * n // m.gcd(ans, n * n))\n    print(str(a) + '/' + str(b))", "from collections import defaultdict\nimport sys\nimport math as m\nimport random as rd\nimport bisect as b\nimport time\nsys.setrecursionlimit(1000000)\n\ndef uno():\n    return int(sys.stdin.readline().strip())\n\ndef dos():\n    return sys.stdin.readline().strip()\n\ndef tres():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef cuatro():\n    return sys.stdin.readline().strip().split()\nfor _ in range(uno()):\n    n = uno()\n    (ans, root) = (0, m.floor(m.sqrt(n)))\n    for i in range(1, root + 1):\n        ans += n // i\n    ans = ans + ans - root * root\n    (a, b) = (ans // m.gcd(ans, n * n), n * n // m.gcd(ans, n * n))\n    print(str(a) + '/' + str(b))", "import math\n\ndef solve():\n    n = int(input())\n    num = 0\n    denom = n * n\n    s = int(math.sqrt(n))\n    for i in range(1, s + 1):\n        num += n // i\n    num = 2 * num - s * s\n    k = math.gcd(num, denom)\n    print(str(num // k) + '/' + str(denom // k))\nt = int(input())\nfor tt in range(0, t):\n    solve()", "import math\n\ndef solve():\n    n = int(input())\n    num = 0\n    denom = n * n\n    s = int(math.sqrt(n))\n    for i in range(1, s + 1):\n        num += n // i\n    num = 2 * num - s * s\n    k = math.gcd(num, denom)\n    print(str(num // k) + '/' + str(denom // k))\nt = int(input())\nfor tt in range(0, t):\n    solve()", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfrom math import sqrt as S\nfor _ in range(int(input())):\n    n = int(input())\n    tot = n * n\n    s = 0\n    beta = int(S(n))\n    for i in range(1, int(S(n)) + 1):\n        s += n // i\n    s = 2 * s - beta * beta\n    g = gcd(s, tot)\n    s = s // g\n    tot = tot // g\n    print(s, end='')\n    print('/', end='')\n    print(tot)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    ans = 0\n    x = math.floor(math.sqrt(n))\n    i = 1\n    while i <= x:\n        ans += n // i\n        i += 1\n    ans *= 2\n    ans -= x ** 2\n    num = int(ans)\n    den = n * n\n    g = math.gcd(num, den)\n    print('%d/%d' % (num // g, den // g))", "import math\nfor t in range(int(input())):\n    n = int(input())\n    ans = 0\n    x = math.floor(math.sqrt(n))\n    i = 1\n    while i <= x:\n        ans += n // i\n        i += 1\n    ans *= 2\n    ans -= x ** 2\n    num = int(ans)\n    den = n * n\n    g = math.gcd(num, den)\n    print('%d/%d' % (num // g, den // g))", "import math\nimport sys\nfrom fractions import Fraction\n\ndef next_int():\n    return int(input())\n\ndef one_test(n):\n    root = math.floor(math.sqrt(n))\n    ans = 2 * sum((n // k for k in range(1, root + 1))) - root * root\n    return Fraction(ans, n * n)\n\ndef proper_fraction(f):\n    ret = str(f)\n    if f.denominator == 1:\n        ret += '/1'\n    return ret\nt = next_int()\nfor i in range(t):\n    res = one_test(next_int())\n    print(proper_fraction(res))"]