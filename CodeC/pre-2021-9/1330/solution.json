["from collections import deque\n\ndef solve(l1, h, max1):\n    q1 = deque(sorted(l1, reverse=True))\n    q2 = deque()\n    direction = 0\n    for i in range(1, max1 + 1):\n        if not q2 or q1[0] > q2[0]:\n            ele = q1.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        else:\n            ele = q2.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(n, m) = list(map(int, input().split()))\nl1 = list(map(int, input().split()))\nh = set([])\nmax1 = 0\nfor i in range(m):\n    h_idx = int(input())\n    h.add(h_idx)\n    max1 = max(max1, h_idx)\nsolve(l1, h, max1)", "from collections import deque\n\ndef solve(l1, h, max1):\n    q1 = deque(sorted(l1, reverse=True))\n    q2 = deque()\n    direction = 0\n    for i in range(1, max1 + 1):\n        if not q2 or q1[0] > q2[0]:\n            ele = q1.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        else:\n            ele = q2.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(n, m) = list(map(int, input().split()))\nl1 = list(map(int, input().split()))\nh = set([])\nmax1 = 0\nfor i in range(m):\n    h_idx = int(input())\n    h.add(h_idx)\n    max1 = max(max1, h_idx)\nsolve(l1, h, max1)", "from collections import deque\n\ndef solve(l1, h, max1):\n    q1 = deque(sorted(l1, reverse=True))\n    q2 = deque()\n    direction = 0\n    for i in range(1, max1 + 1):\n        if not q2 or q1[0] > q2[0]:\n            ele = q1.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        else:\n            ele = q2.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(n, m) = list(map(int, input().split()))\nl1 = list(map(int, input().split()))\nh = set([])\nmax1 = 0\nfor i in range(m):\n    h_idx = int(input())\n    h.add(h_idx)\n    max1 = max(max1, h_idx)\nsolve(l1, h, max1)", "from collections import deque\n\ndef divans(l, q, maxi):\n    q1 = deque(l)\n    q2 = deque()\n    for i in range(1, maxi + 1):\n        if not q2 or q1[0] > q2[0]:\n            k = q1.popleft()\n            if i in q:\n                print(k)\n            k //= 2\n            if k >= 1:\n                q2.append(k)\n        else:\n            k = q2.popleft()\n            if i in q:\n                print(k)\n            k //= 2\n            if k >= 1:\n                q2.append(k)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(a, b) = list(map(int, input().split()))\nl = list(map(int, input().split()))\nl.sort(reverse=True)\nmaxi = 0\nq = set()\nfor i in range(b):\n    t = int(input())\n    q.add(t)\n    maxi = max(maxi, t)\ndivans(l, q, maxi)", "from collections import deque\n\ndef calculate(arr, sets, max_):\n    arr = deque(arr)\n    queue = deque()\n    for i in range(1, max_ + 1):\n        if arr and (not queue or arr[-1] > queue[-1]):\n            cur = arr.pop()\n        else:\n            cur = queue.pop()\n        if i in sets:\n            print(cur)\n        cur //= 2\n        if cur > 0:\n            queue.appendleft(cur)\n(n, m) = [int(i) for i in input().split()]\narr = [int(i) for i in input().split()]\narr.sort()\nsets = set()\nmax_ = 0\nfor i in range(m):\n    cur = int(input())\n    sets.add(cur)\n    max_ = max(max_, cur)\ncalculate(arr, sets, max_)", "from collections import deque\n\ndef calculate(arr, sets, max_):\n    arr = deque(arr)\n    queue = deque()\n    for i in range(1, max_ + 1):\n        if arr and (not queue or arr[-1] > queue[-1]):\n            cur = arr.pop()\n            if i in sets:\n                print(cur)\n            cur //= 2\n            if cur > 0:\n                queue.appendleft(cur)\n        else:\n            cur = queue.pop()\n            if i in sets:\n                print(cur)\n            cur //= 2\n            if cur > 0:\n                queue.appendleft(cur)\n(n, m) = [int(i) for i in input().split()]\narr = [int(i) for i in input().split()]\narr.sort()\nsets = set()\nmax_ = 0\nfor i in range(m):\n    cur = int(input())\n    sets.add(cur)\n    max_ = max(max_, cur)\ncalculate(arr, sets, max_)", "from collections import deque\n\ndef calculate(arr, sets, max_):\n    arr = deque(arr)\n    queue = deque()\n    for i in range(1, max_ + 1):\n        if not queue or arr[-1] > queue[-1]:\n            cur = arr.pop()\n            if i in sets:\n                print(cur)\n            cur //= 2\n            if cur > 0:\n                queue.appendleft(cur)\n        else:\n            cur = queue.pop()\n            if i in sets:\n                print(cur)\n            cur //= 2\n            if cur > 0:\n                queue.appendleft(cur)\n        if not arr:\n            (arr, queue) = (queue, arr)\n(n, m) = [int(i) for i in input().split()]\narr = [int(i) for i in input().split()]\narr.sort()\nsets = set()\nmax_ = 0\nfor i in range(m):\n    cur = int(input())\n    sets.add(cur)\n    max_ = max(max_, cur)\ncalculate(arr, sets, max_)", "from collections import deque\n\ndef calculate(arr, sets, max_):\n    arr = deque(arr)\n    queue = deque()\n    for i in range(1, max_ + 1):\n        if not queue or arr[0] > queue[0]:\n            cur = arr.popleft()\n            if i in sets:\n                print(cur)\n            cur //= 2\n            if cur > 0:\n                queue.append(cur)\n        else:\n            cur = queue.popleft()\n            if i in sets:\n                print(cur)\n            cur //= 2\n            if cur > 0:\n                queue.append(cur)\n        if not arr:\n            (arr, queue) = (queue, arr)\n(n, m) = [int(i) for i in input().split()]\narr = [int(i) for i in input().split()]\narr.sort(reverse=True)\nsets = set()\nmax_ = 0\nfor i in range(m):\n    cur = int(input())\n    sets.add(cur)\n    max_ = max(max_, cur)\ncalculate(arr, sets, max_)", "from collections import deque\n\ndef divans(l, q, maxi):\n    q1 = deque(l)\n    q2 = deque()\n    for i in range(1, maxi + 1):\n        if not q2 or q1[0] > q2[0]:\n            k = q1.popleft()\n            if i in q:\n                print(k)\n            k //= 2\n            if k >= 1:\n                q2.append(k)\n        else:\n            k = q2.popleft()\n            if i in q:\n                print(k)\n            k //= 2\n            if k >= 1:\n                q2.append(k)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(n, m) = [int(i) for i in input().split()]\narr = [int(i) for i in input().split()]\narr.sort(reverse=True)\nsets = set()\nmax_ = 0\nfor i in range(m):\n    cur = int(input())\n    sets.add(cur)\n    max_ = max(max_, cur)\ndivans(arr, sets, max_)", "from collections import deque\n\ndef divans(l, q, maxi):\n    q1 = deque(l)\n    q2 = deque()\n    for i in range(1, maxi + 1):\n        if not q2 or q1[0] > q2[0]:\n            k = q1.popleft()\n            if i in q:\n                print(k)\n            k //= 2\n            if k >= 1:\n                q2.append(k)\n        else:\n            k = q2.popleft()\n            if i in q:\n                print(k)\n            k //= 2\n            if k >= 1:\n                q2.append(k)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(a, b) = list(map(int, input().split()))\nl = list(map(int, input().split()))\nl.sort(reverse=True)\nmaxi = 0\nq = set()\nfor i in range(b):\n    t = int(input())\n    q.add(t)\n    maxi = max(maxi, t)\ndivans(l, q, maxi)", "from collections import deque\n\ndef divans(l, q, maxi):\n    q1 = deque(l)\n    q2 = deque()\n    for i in range(1, maxi + 1):\n        if not q2 or q1[0] > q2[0]:\n            k = q1.popleft()\n            if i in q:\n                print(k)\n            k //= 2\n            if k >= 1:\n                q2.append(k)\n        else:\n            k = q2.popleft()\n            if i in q:\n                print(k)\n            k //= 2\n            if k >= 1:\n                q2.append(k)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(a, b) = list(map(int, input().split()))\nl = list(map(int, input().split()))\nl.sort(reverse=True)\nmaxi = 0\nq = set()\nfor i in range(b):\n    t = int(input())\n    q.add(t)\n    maxi = max(maxi, t)\ndivans(l, q, maxi)", "from collections import deque\n\ndef solveQ(arr, queries, maxT):\n    q1 = deque(sorted(arr, reverse=True))\n    q2 = deque()\n    for i in range(1, maxT + 1):\n        if not q2 or q1[0] > q2[0]:\n            e = q1.popleft()\n        else:\n            e = q2.popleft()\n        if i in queries:\n            print(e)\n        e //= 2\n        if e > 0:\n            q2.append(e)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(n, m) = map(int, input().split())\nmulti = [int(x) for x in input().split()]\nqueries = [int(input()) for _ in range(m)]\nmaxQ = max(queries)\nsolveQ(multi, set(queries), maxQ)", "from collections import deque\n\ndef solution(multiset, questions, maxq):\n    to_print = []\n    q1 = deque(sorted(multiset, reverse=True))\n    q2 = deque()\n    for i in range(1, maxq + 1):\n        if not q2 or q1[0] > q2[0]:\n            element = q1.popleft()\n        else:\n            element = q2.popleft()\n        if i in questions:\n            to_print.append(element)\n        element = element >> 1\n        if element > 0:\n            q2.append(element)\n        if not q1:\n            (q1, q2) = (q2, q1)\n    print('\\n'.join(map(str, to_print)))\n\ndef main():\n    (n, m) = map(int, input().split())\n    multiset = list(map(int, input().split()))\n    questions = [int(input()) for _ in range(m)]\n    maxq = questions[-1]\n    solution(multiset, set(questions), maxq)\nmain()", "from collections import deque\n\ndef solution(multiset, questions, maxq):\n    to_print = []\n    q1 = deque(sorted(multiset, reverse=True))\n    q2 = deque()\n    for i in range(1, maxq + 1):\n        if not q2 or q1[0] > q2[0]:\n            element = q1.popleft()\n        else:\n            element = q2.popleft()\n        if i in questions:\n            to_print.append(element)\n        element = element >> 1\n        if element > 0:\n            q2.append(element)\n        if not q1:\n            (q1, q2) = (q2, q1)\n    print('\\n'.join(map(str, to_print)))\n\ndef main():\n    (n, m) = map(int, input().split())\n    multiset = list(map(int, input().split()))\n    questions = [int(input()) for _ in range(m)]\n    maxq = questions[-1]\n    solution(multiset, set(questions), maxq)\nmain()", "from collections import deque\n\ndef solution(multiset, questions, maxq):\n    to_print = []\n    q1 = deque(sorted(multiset, reverse=True))\n    q2 = deque()\n    for i in range(1, maxq + 1):\n        if not q2 or q1[0] > q2[0]:\n            element = q1.popleft()\n        else:\n            element = q2.popleft()\n        if i in questions:\n            to_print.append(element)\n        element = element >> 1\n        if element > 0:\n            q2.append(element)\n        if not q1:\n            (q1, q2) = (q2, q1)\n    print('\\n'.join(map(str, to_print)))\n\ndef main():\n    (n, m) = map(int, input().split())\n    multiset = list(map(int, input().split()))\n    questions = [int(input()) for _ in range(m)]\n    maxq = questions[-1]\n    solution(multiset, set(questions), maxq)\nmain()", "from collections import deque\n\ndef solveQueue(arr, queries, maxTurn):\n    flag = False\n    for j in range(1, maxTurn + 1):\n        if not q1:\n            front2 = q2[0]\n            if j in queries:\n                print(front2)\n            q2.popleft()\n            front2 //= 2\n            if front2 > 0:\n                q2.append(front2)\n        elif not q2 or q1[0] > q2[0]:\n            front1 = q1[0]\n            if j in queries:\n                print(front1)\n            q1.popleft()\n            front1 //= 2\n            if front1 > 0:\n                q2.append(front1)\n        else:\n            front2 = q2[0]\n            if j in queries:\n                print(front2)\n            q2.popleft()\n            front2 //= 2\n            if front2 > 0:\n                q2.append(front2)\n(n, m) = map(int, input().split())\narr = list(map(int, input().split()))\nq1 = deque(sorted(arr, reverse=True))\nq2 = deque()\nqueries = set()\nmaxTurn = 0\nfor _ in range(m):\n    query = int(input())\n    queries.add(query)\n    maxTurn = max(maxTurn, query)\nsolveQueue(arr, queries, maxTurn)", "from collections import deque\n\ndef solve(l, h, max1):\n    q1 = deque(l)\n    q2 = deque()\n    for i in range(1, max1 + 1):\n        if not q2 or q1[0] > q2[0]:\n            temp = q1.popleft()\n            if i in h:\n                print(temp)\n            temp = temp // 2\n            if temp > 0:\n                q2.append(temp)\n        else:\n            temp = q2.popleft()\n            if i in h:\n                print(temp)\n            temp = temp // 2\n            if temp > 0:\n                q2.append(temp)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\nl.sort(reverse=True)\nh = set()\nmax1 = 0\nfor i in range(m):\n    q = int(input())\n    h.add(q)\n    max1 = max(max1, q)\nsolve(l, h, max1)", "from collections import deque\n\ndef solve(l1, h, max1):\n    q1 = deque(sorted(l1, reverse=True))\n    q2 = deque()\n    direction = 0\n    for i in range(1, max1 + 1):\n        if not q2 or q1[0] > q2[0]:\n            ele = q1.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        else:\n            ele = q2.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(n, m) = map(int, input().split())\nl1 = list(map(int, input().split()))\nh = set([])\nmax1 = 0\nfor i in range(m):\n    h_idx = int(input())\n    h.add(h_idx)\n    max1 = max(max1, h_idx)\nsolve(l1, h, max1)", "from collections import deque\n\ndef solve(l1, h, max1):\n    q1 = deque(sorted(l1, reverse=True))\n    q2 = deque()\n    direction = 0\n    for i in range(1, max1 + 1):\n        if not q2 or q1[0] > q2[0]:\n            ele = q1.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        else:\n            ele = q2.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(n, m) = list(map(int, input().split()))\nl1 = list(map(int, input().split()))\nh = set([])\nmax1 = 0\nfor i in range(m):\n    h_idx = int(input())\n    h.add(h_idx)\n    max1 = max(max1, h_idx)\nsolve(l1, h, max1)", "from collections import deque\n\ndef divans(l, q, maxi):\n    q1 = deque(l)\n    q2 = deque()\n    for i in range(1, maxi + 1):\n        if not q2 or q1[0] > q2[0]:\n            k = q1.popleft()\n            if i in q:\n                print(k)\n            k //= 2\n            if k >= 1:\n                q2.append(k)\n        else:\n            k = q2.popleft()\n            if i in q:\n                print(k)\n            k //= 2\n            if k >= 1:\n                q2.append(k)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(a, b) = list(map(int, input().split()))\nl = list(map(int, input().split()))\nl.sort(reverse=True)\nmaxi = 0\nq = set()\nfor i in range(b):\n    t = int(input())\n    q.add(t)\n    maxi = max(maxi, t)\ndivans(l, q, maxi)", "from collections import deque\n\ndef solve(l1, h, max1):\n    q1 = deque(sorted(l1, reverse=True))\n    q2 = deque()\n    direction = 0\n    for i in range(1, max1 + 1):\n        if not q2 or q1[0] > q2[0]:\n            ele = q1.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        else:\n            ele = q2.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(n, m) = list(map(int, input().split()))\nl1 = list(map(int, input().split()))\nh = set([])\nmax1 = 0\nfor i in range(m):\n    h_idx = int(input())\n    h.add(h_idx)\n    max1 = max(max1, h_idx)\nsolve(l1, h, max1)", "from collections import deque\n\ndef solve(l1, h, max1):\n    q1 = deque(sorted(l1, reverse=True))\n    q2 = deque()\n    direction = 0\n    for i in range(1, max1 + 1):\n        if not q2 or q1[0] > q2[0]:\n            ele = q1.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        else:\n            ele = q2.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(n, m) = list(map(int, input().split()))\nl1 = list(map(int, input().split()))\nh = set([])\nmax1 = 0\nfor i in range(m):\n    h_idx = int(input())\n    h.add(h_idx)\n    max1 = max(max1, h_idx)\nsolve(l1, h, max1)", "from collections import deque\n\ndef use_q(l, q, mx):\n    l_1 = deque(sorted(l, reverse=True))\n    l_2 = deque()\n    for i in range(1, mx + 1):\n        if not l_2 or l_1[0] > l_2[0]:\n            t_2 = l_1.popleft()\n            if i in q:\n                print(t_2)\n            t_2 = t_2 // 2\n            if t_2 > 0:\n                l_2.append(t_2)\n        else:\n            t_3 = l_2.popleft()\n            if i in q:\n                print(t_3)\n            t_3 = t_3 // 2\n            if t_3 > 0:\n                l_2.append(t_3)\n        if not l_1:\n            (l_1, l_2) = (l_2, l_1)\n(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\nq = set([])\nm_1 = -1\nfor i in range(m):\n    t_4 = int(input())\n    q.add(t_4)\n    m_1 = max(m_1, t_4)\nuse_q(l, q, m_1)", "from collections import deque\n\ndef solve(l1, h, max1):\n    q1 = deque(sorted(l1, reverse=True))\n    q2 = deque()\n    direction = 0\n    for i in range(1, max1 + 1):\n        if not q2 or q1[0] > q2[0]:\n            ele = q1.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        else:\n            ele = q2.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(n, m) = list(map(int, input().split()))\nl1 = list(map(int, input().split()))\nh = set([])\nmax1 = 0\nfor i in range(m):\n    h_idx = int(input())\n    h.add(h_idx)\n    max1 = max(max1, h_idx)\nsolve(l1, h, max1)", "from collections import deque\n\ndef solve(l1, h, max1):\n    q1 = deque(sorted(l1, reverse=True))\n    q2 = deque()\n    direction = 0\n    for i in range(1, max1 + 1):\n        if not q2 or q1[0] > q2[0]:\n            ele = q1.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        else:\n            ele = q2.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(n, m) = list(map(int, input().split()))\nl1 = list(map(int, input().split()))\nh = set([])\nmax1 = 0\nfor i in range(m):\n    h_idx = int(input())\n    h.add(h_idx)\n    max1 = max(max1, h_idx)\nsolve(l1, h, max1)", "from collections import deque\n\ndef solve(l1, h, max1):\n    q1 = deque(sorted(l1, reverse=True))\n    q2 = deque()\n    direction = 0\n    for i in range(1, max1 + 1):\n        if not q2 or q1[0] > q2[0]:\n            ele = q1.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        else:\n            ele = q2.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(n, m) = list(map(int, input().split()))\nl1 = list(map(int, input().split()))\nh = set([])\nmax1 = 0\nfor i in range(m):\n    h_idx = int(input())\n    h.add(h_idx)\n    max1 = max(max1, h_idx)\nsolve(l1, h, max1)", "from collections import deque\n\ndef use_q(l, q, mx):\n    l1 = deque(sorted(l, reverse=True))\n    l2 = deque()\n    for i in range(1, mx + 1):\n        if not l2 or l1[0] > l2[0]:\n            t = l1.popleft()\n            if i in q:\n                print(t)\n            t //= 2\n            if t > 0:\n                l2.append(t)\n        else:\n            t = l2.popleft()\n            if i in q:\n                print(t)\n            t //= 2\n            if t > 0:\n                l2.append(t)\n        if not l1:\n            (l1, l2) = (l2, l1)\n(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\nq = set([])\nm_1 = -1\nfor i in range(m):\n    t_4 = int(input())\n    q.add(t_4)\n    m_1 = max(m_1, t_4)\nuse_q(l, q, m_1)", "from collections import deque\n\ndef use_q(l, q, mx):\n    l_1 = deque(sorted(l, reverse=True))\n    l_2 = deque()\n    for i in range(1, mx + 1):\n        if not l_2 or l_1[0] > l_2[0]:\n            t_2 = l_1.popleft()\n            if i in q:\n                print(t_2)\n            t_2 = t_2 // 2\n            if t_2 > 0:\n                l_2.append(t_2)\n        else:\n            t_3 = l_2.popleft()\n            if i in q:\n                print(t_3)\n            t_3 = t_3 // 2\n            if t_3 > 0:\n                l_2.append(t_3)\n        if not l_1:\n            (l_1, l_2) = (l_2, l_1)\n(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\nq = set([])\nm_1 = -1\nfor i in range(m):\n    t_4 = int(input())\n    q.add(t_4)\n    m_1 = max(m_1, t_4)\nuse_q(l, q, m_1)", "from collections import deque\n\ndef use_q(l, q, mx):\n    l_1 = deque(sorted(l, reverse=True))\n    l_2 = deque()\n    for i in range(1, mx + 1):\n        if not l_2 or l_1[0] > l_2[0]:\n            t_2 = l_1.popleft()\n            if i in q:\n                print(t_2)\n            t_2 = t_2 // 2\n            if t_2 > 0:\n                l_2.append(t_2)\n        else:\n            t_3 = l_2.popleft()\n            if i in q:\n                print(t_3)\n            t_3 = t_3 // 2\n            if t_3 > 0:\n                l_2.append(t_3)\n        if not l_1:\n            (l_1, l_2) = (l_2, l_1)\n(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\nq = set([])\nm_1 = -1\nfor i in range(m):\n    t_4 = int(input())\n    q.add(t_4)\n    m_1 = max(m_1, t_4)\nuse_q(l, q, m_1)", "from time import time\nfrom bisect import insort\nfrom collections import deque\n\ndef main2():\n    (n, m) = map(int, input().strip().split())\n    arr1 = list(map(int, input().strip().split()))\n    quest = [int(input().strip()) for x in range(m)]\n    ans = [0] * 63000005\n    arr2 = deque()\n    arr1.sort(reverse=True)\n    arr1 = deque(arr1)\n    i = -1\n    while True:\n        if not arr1:\n            if not arr2:\n                break\n            ele = arr2.popleft()\n        elif not arr2:\n            ele = arr1.popleft()\n        elif arr1[0] >= arr2[0]:\n            ele = arr1.popleft()\n        else:\n            ele = arr2.popleft()\n        i += 1\n        ans[i] = ele\n        ele //= 2\n        if ele > 0:\n            arr2.append(ele)\n    for q in quest:\n        print(ans[q - 1])\n\ndef main():\n    (n, m) = map(int, input().strip().split())\n    arr = list(map(int, input().strip().split()))\n    quest = [int(input().strip()) for x in range(m)]\n    ans = list()\n    arr.sort()\n    while arr:\n        ele = arr[-1]\n        ans.append(ele)\n        ele //= 2\n        arr.pop(-1)\n        if ele > 0:\n            insort(arr, ele)\n    for q in quest:\n        print(ans[q - 1])\nmain2()", "from collections import deque\n\ndef divans(l, q, maxi):\n    q1 = deque(l)\n    q2 = deque()\n    for i in range(1, maxi + 1):\n        if not q1:\n            k = q2.popleft()\n            if i in q:\n                print(k)\n            k //= 2\n            if k >= 1:\n                q2.append(k)\n            continue\n        if not q2 or q1[0] > q2[0]:\n            k = q1.popleft()\n            if i in q:\n                print(k)\n            k //= 2\n            if k >= 1:\n                q2.append(k)\n        else:\n            k = q2.popleft()\n            if i in q:\n                print(k)\n            k //= 2\n            if k >= 1:\n                q2.append(k)\n(a, b) = list(map(int, input().split()))\nl = list(map(int, input().split()))\nl.sort(reverse=True)\nmaxi = 0\nq = set()\nfor i in range(b):\n    t = int(input())\n    q.add(t)\n    maxi = max(maxi, t)\ndivans(l, q, maxi)", "from collections import deque\n\ndef divans(l, q, maxi):\n    q1 = deque(l)\n    q2 = deque()\n    for i in range(1, maxi + 1):\n        if not q2 or q1[0] > q2[0]:\n            k = q1.popleft()\n            if i in q:\n                print(k)\n            k //= 2\n            if k >= 1:\n                q2.append(k)\n        else:\n            k = q2.popleft()\n            if i in q:\n                print(k)\n            k //= 2\n            if k >= 1:\n                q2.append(k)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(a, b) = list(map(int, input().split()))\nl = list(map(int, input().split()))\nl.sort(reverse=True)\nmaxi = 0\nq = set()\nfor i in range(b):\n    t = int(input())\n    q.add(t)\n    maxi = max(maxi, t)\ndivans(l, q, maxi)", "from bisect import insort\nfrom collections import deque\n\ndef main():\n    (n, m) = map(int, input().split())\n    a1 = list(map(int, input().split()))\n    q = [int(input()) for x in range(m)]\n    ans = [0] * 63000005\n    a2 = deque()\n    a1.sort(reverse=True)\n    a1 = deque(a1)\n    i = -1\n    while True:\n        if not a1:\n            if not a2:\n                break\n            x = a2.popleft()\n        elif not a2:\n            x = a1.popleft()\n        elif a1[0] >= a2[0]:\n            x = a1.popleft()\n        else:\n            x = a2.popleft()\n        i += 1\n        ans[i] = x\n        x //= 2\n        if x > 0:\n            a2.append(x)\n    for i in q:\n        print(ans[i - 1])\nmain()", "from bisect import insort\nfrom collections import deque\n\ndef main():\n    (n, m) = map(int, input().split())\n    a1 = list(map(int, input().split()))\n    q = [int(input()) for x in range(m)]\n    ans = [0] * 63000005\n    a2 = deque()\n    a1.sort(reverse=True)\n    a1 = deque(a1)\n    i = -1\n    while True:\n        if not a1:\n            if not a2:\n                break\n            x = a2.popleft()\n        elif not a2:\n            x = a1.popleft()\n        elif a1[0] >= a2[0]:\n            x = a1.popleft()\n        else:\n            x = a2.popleft()\n        i += 1\n        ans[i] = x\n        x //= 2\n        if x > 0:\n            a2.append(x)\n    for i in q:\n        print(ans[i - 1])\nmain()", "from bisect import insort\nfrom collections import deque\n\ndef main():\n    (n, m) = map(int, input().split())\n    a1 = list(map(int, input().split()))\n    q = [int(input()) for x in range(m)]\n    ans = [0] * 63000005\n    a2 = deque()\n    a1.sort(reverse=True)\n    a1 = deque(a1)\n    i = -1\n    while True:\n        if not a1:\n            if not a2:\n                break\n            x = a2.popleft()\n        elif not a2:\n            x = a1.popleft()\n        elif a1[0] >= a2[0]:\n            x = a1.popleft()\n        else:\n            x = a2.popleft()\n        i += 1\n        ans[i] = x\n        x //= 2\n        if x > 0:\n            a2.append(x)\n    for i in q:\n        print(ans[i - 1])\nmain()", "from collections import deque as dq\n\ndef que(s, c, t):\n    a = dq(sorted(s, reverse=True))\n    b = dq()\n    for i in range(1, c + 1):\n        if not b or a[0] > b[0]:\n            f = a.popleft()\n            if i in t:\n                print(f)\n            f = f // 2\n            if f >= 1:\n                b.append(f)\n        else:\n            f = b.popleft()\n            if i in t:\n                print(f)\n            f = f // 2\n            if f >= 1:\n                b.append(f)\n        if not a:\n            (a, b) = (b, a)\n(N, M) = map(int, input().split())\ns = list(map(int, input().split()))\nt = set([])\nc = 0\nfor i in range(M):\n    r = int(input())\n    if r > c:\n        c = r\n    t.add(r)\nque(s, c, t)", "from collections import deque\n\ndef que(arr, max, queries):\n    q1 = deque(sorted(arr, reverse=True))\n    q2 = deque()\n    for i in range(1, max + 1):\n        if not q2 or q1[0] > q2[0]:\n            ele = q1.popleft()\n            if i in queries:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        else:\n            ele = q2.popleft()\n            if i in queries:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(n, m) = map(int, input().split())\narr = list(map(int, input().split()))\nqueries = set([])\nmax = 0\nfor i in range(m):\n    query = int(input())\n    if query > max:\n        max = query\n    queries.add(query)\nque(arr, max, queries)", "from collections import deque\n\ndef solve(l1, h, max1):\n    q1 = deque(sorted(l1, reverse=True))\n    q2 = deque()\n    direction = 0\n    for i in range(1, max1 + 1):\n        if not q2 or q1[0] > q2[0]:\n            ele = q1.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        else:\n            ele = q2.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(n, m) = list(map(int, input().split()))\nl1 = list(map(int, input().split()))\nh = set([])\nmax1 = 0\nfor i in range(m):\n    h_idx = int(input())\n    h.add(h_idx)\n    max1 = max(max1, h_idx)\nsolve(l1, h, max1)", "from collections import deque\n\ndef solution(multiset, questions, maxq):\n    to_print = []\n    q1 = deque(sorted(multiset, reverse=True))\n    q2 = deque()\n    for i in range(1, maxq + 1):\n        if not q2 or q1[0] > q2[0]:\n            element = q1.popleft()\n        else:\n            element = q2.popleft()\n        if i in questions:\n            to_print.append(element)\n        element = element >> 1\n        if element > 0:\n            q2.append(element)\n        if not q1:\n            (q1, q2) = (q2, q1)\n    print('\\n'.join(map(str, to_print)))\n\ndef main():\n    (n, m) = map(int, input().split())\n    multiset = list(map(int, input().split()))\n    questions = [int(input()) for _ in range(m)]\n    maxq = questions[-1]\n    solution(multiset, set(questions), maxq)\nmain()", "from time import time\nfrom bisect import insort\nfrom collections import deque\n\ndef main2():\n    (n, m) = map(int, input().strip().split())\n    arr1 = list(map(int, input().strip().split()))\n    quest = [int(input().strip()) for x in range(m)]\n    ans = [0] * 63000005\n    arr2 = deque()\n    arr1.sort(reverse=True)\n    arr1 = deque(arr1)\n    i = -1\n    while True:\n        if not arr1:\n            if not arr2:\n                break\n            ele = arr2.popleft()\n        elif not arr2:\n            ele = arr1.popleft()\n        elif arr1[0] >= arr2[0]:\n            ele = arr1.popleft()\n        else:\n            ele = arr2.popleft()\n        i += 1\n        ans[i] = ele\n        ele //= 2\n        if ele > 0:\n            arr2.append(ele)\n    for q in quest:\n        print(ans[q - 1])\n\ndef main():\n    (n, m) = map(int, input().strip().split())\n    arr = list(map(int, input().strip().split()))\n    quest = [int(input().strip()) for x in range(m)]\n    ans = list()\n    arr.sort()\n    while arr:\n        ele = arr[-1]\n        ans.append(ele)\n        ele //= 2\n        arr.pop(-1)\n        if ele > 0:\n            insort(arr, ele)\n    for q in quest:\n        print(ans[q - 1])\nmain2()", "from collections import deque\n\ndef solve(l1, h, max1):\n    q1 = deque(sorted(l1, reverse=True))\n    q2 = deque()\n    direction = 0\n    for i in range(1, max1 + 1):\n        if not q2 or q1[0] > q2[0]:\n            ele = q1.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        else:\n            ele = q2.popleft()\n            if i in h:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(n, m) = list(map(int, input().split()))\nl1 = list(map(int, input().split()))\nh = set([])\nmax1 = 0\nfor i in range(m):\n    h_idx = int(input())\n    h.add(h_idx)\n    max1 = max(max1, h_idx)\nsolve(l1, h, max1)", "from collections import deque\n\ndef solve(nums, queries, maxi):\n    q1 = deque(sorted(nums, reverse=True))\n    q2 = deque()\n    direction = 0\n    for i in range(1, maxi + 1):\n        if not q2 or q1[0] > q2[0]:\n            ele = q1.popleft()\n            if i in queries:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        else:\n            ele = q2.popleft()\n            if i in queries:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(n, m) = list(map(int, input().split()))\nnums = list(map(int, input().split()))\nqueries = set([])\nmaxi = 0\nfor i in range(m):\n    query_idx = int(input())\n    queries.add(query_idx)\n    maxi = max(maxi, query_idx)\nsolve(nums, queries, maxi)", "from collections import deque\n\ndef solve(nums, queries, maxi):\n    q1 = deque(sorted(nums, reverse=True))\n    q2 = deque()\n    direction = 0\n    for i in range(1, maxi + 1):\n        if not q2 or q1[0] > q2[0]:\n            ele = q1.popleft()\n            if i in queries:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        else:\n            ele = q2.popleft()\n            if i in queries:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(n, m) = list(map(int, input().split()))\nnums = list(map(int, input().split()))\nqueries = set([])\nmaxi = 0\nfor i in range(m):\n    query_idx = int(input())\n    queries.add(query_idx)\n    maxi = max(maxi, query_idx)\nsolve(nums, queries, maxi)", "from collections import deque\n\ndef solve(nums, queries, maxi):\n    q1 = deque(sorted(nums, reverse=True))\n    q2 = deque()\n    direction = 0\n    for i in range(1, maxi + 1):\n        if not q2 or q1[0] > q2[0]:\n            ele = q1.popleft()\n            if i in queries:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        else:\n            ele = q2.popleft()\n            if i in queries:\n                print(ele)\n            ele = ele // 2\n            if ele >= 1:\n                q2.append(ele)\n        if not q1:\n            (q1, q2) = (q2, q1)\n(n, m) = list(map(int, input().split()))\nnums = list(map(int, input().split()))\nqueries = set([])\nmaxi = 0\nfor i in range(m):\n    query_idx = int(input())\n    queries.add(query_idx)\n    maxi = max(maxi, query_idx)\nsolve(nums, queries, maxi)"]