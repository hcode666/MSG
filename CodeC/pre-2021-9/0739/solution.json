["def solve():\n    n = int(input())\n    A = [bin(int(i))[2:] for i in input().split()]\n    res = 0\n    for j in range(-1, -31, -1):\n        count = 0\n        for bit in A:\n            try:\n                if bit[j] == '1':\n                    count += 1\n            except:\n                pass\n        res += min(count, n - count) * 2 ** (j * -1 - 1)\n    print(res)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    n = int(input())\n    A = [bin(int(i))[2:] for i in input().split()]\n    res = 0\n    for j in range(-1, -31, -1):\n        count = 0\n        for bit in A:\n            try:\n                if bit[j] == '1':\n                    count += 1\n            except:\n                pass\n        res += min(count, n - count) * 2 ** (j * -1 - 1)\n    print(res)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    n = int(input())\n    A = [bin(int(i))[2:] for i in input().split()]\n    res = 0\n    for j in range(-1, -31, -1):\n        count = 0\n        for bit in A:\n            try:\n                if bit[j] == '1':\n                    count += 1\n            except:\n                pass\n        res += min(count, n - count) * 2 ** (j * -1 - 1)\n    print(res)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    n = int(input())\n    A = [bin(int(i))[2:] for i in input().split()]\n    res = 0\n    for j in range(-1, -31, -1):\n        count = 0\n        for bit in A:\n            try:\n                if bit[j] == '1':\n                    count += 1\n            except:\n                pass\n        res += min(count, n - count) * 2 ** (j * -1 - 1)\n    print(res)\nfor t in range(int(input())):\n    solve()", "import sys\nfrom collections import Counter, defaultdict, deque\nfrom math import gcd, sqrt, ceil\n\ndef li():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef si():\n    return sys.stdin.readline().split()\n\ndef ii():\n    return int(sys.stdin.readline())\n\ndef ip():\n    return input()\nfor tastcas in range(int(input())):\n    n = ii()\n    a = li()\n    bits = [0] * 30\n    s = 0\n    k = 1\n    for i in range(n):\n        b = bin(a[i])[2:]\n        a[i] = '0' * (30 - len(b)) + b\n        for j in range(30):\n            if a[i][j] == '1':\n                bits[j] += 1\n    for i in range(30):\n        bits[i] = min(bits[i], n - bits[i])\n    for i in range(30):\n        s += bits[29 - i] * k\n        k *= 2\n    print(s)", "import sys\nfrom collections import Counter, defaultdict, deque\nfrom math import gcd, sqrt, ceil\n\ndef li():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef si():\n    return sys.stdin.readline().split()\n\ndef ii():\n    return int(sys.stdin.readline())\n\ndef ip():\n    return input()\nfor tastcas in range(int(input())):\n    n = ii()\n    a = li()\n    bits = [0] * 30\n    s = 0\n    k = 1\n    for i in range(n):\n        b = bin(a[i])[2:]\n        a[i] = '0' * (30 - len(b)) + b\n        for j in range(30):\n            if a[i][j] == '1':\n                bits[j] += 1\n    for i in range(30):\n        bits[i] = min(bits[i], n - bits[i])\n    for i in range(30):\n        s += bits[29 - i] * k\n        k *= 2\n    print(s)", "import sys\nfrom collections import Counter, defaultdict, deque\nfrom math import gcd, sqrt, ceil\n\ndef li():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef si():\n    return sys.stdin.readline().split()\n\ndef ii():\n    return int(sys.stdin.readline())\n\ndef ip():\n    return input()\nfor tastcas in range(int(input())):\n    n = ii()\n    a = li()\n    bits = [0] * 30\n    s = 0\n    k = 1\n    for i in range(n):\n        b = bin(a[i])[2:]\n        a[i] = '0' * (30 - len(b)) + b\n        for j in range(30):\n            if a[i][j] == '1':\n                bits[j] += 1\n    for i in range(30):\n        bits[i] = min(bits[i], n - bits[i])\n    for i in range(30):\n        s += bits[29 - i] * k\n        k *= 2\n    print(s)", "from math import ceil\n\ndef check(el, ans, k):\n    while el != 0:\n        if el & 1:\n            ans[k] += 1\n        el = el >> 1\n        k -= 1\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = []\n    ans_l = len(bin(max(l))) - 2\n    for j in range(ans_l):\n        ans.append(0)\n    k = ans_l - 1\n    for i in l:\n        check(i, ans, k)\n    s = ''\n    for i in range(ans_l):\n        if ans[i] >= ceil(n / 2):\n            s += '1'\n        else:\n            s += '0'\n    s = int(s, 2)\n    sum_ = 0\n    for i in range(n):\n        sum_ += l[i] ^ s\n    print(sum_)", "from math import ceil\n\ndef check(el, ans, k):\n    while el != 0:\n        if el & 1:\n            ans[k] += 1\n        el = el >> 1\n        k -= 1\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = []\n    ans_l = len(bin(max(l))) - 2\n    for j in range(ans_l):\n        ans.append(0)\n    k = ans_l - 1\n    for i in l:\n        check(i, ans, k)\n    s = ''\n    for i in range(ans_l):\n        if ans[i] >= ceil(n / 2):\n            s += '1'\n        else:\n            s += '0'\n    s = int(s, 2)\n    sum_ = 0\n    for i in range(n):\n        sum_ += l[i] ^ s\n    print(sum_)", "from math import ceil\n\ndef check(el, ans, k):\n    while el != 0:\n        if el & 1:\n            ans[k] += 1\n        el = el >> 1\n        k -= 1\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = []\n    ans_l = 0\n    for i in l:\n        ans_l = max(ans_l, len(bin(i)) - 2)\n    for j in range(ans_l):\n        ans.append(0)\n    k = ans_l - 1\n    for i in l:\n        check(i, ans, k)\n    s = ''\n    for i in range(ans_l):\n        if ans[i] >= ceil(n / 2):\n            s += '1'\n        else:\n            s += '0'\n    s = int(s, 2)\n    sum_ = 0\n    for i in range(n):\n        l[i] ^= s\n        sum_ += l[i]\n    print(sum_)", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    a = [bin(int(x))[2:][::-1] + '0' * 32 for x in input().split()]\n    res = ''\n    mysum = 0\n    for i in range(32):\n        mycount = 0\n        for j in range(n):\n            if a[j][i] == '0':\n                mycount += 1\n        if mycount == n:\n            break\n        if mycount > n // 2:\n            res += '0'\n            mysum += (n - mycount) * int(pow(2, i))\n        else:\n            res += '1'\n            mysum += mycount * int(pow(2, i))\n    print(mysum)", "def answer():\n    x = 0\n    for bit in range(30):\n        count = 0\n        for i in range(n):\n            if a[i] >> bit & 1:\n                count += 1\n        if count > n // 2:\n            x |= 1 << bit\n    ans = 0\n    for v in a:\n        ans += v ^ x\n    return ans\nfor T in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(answer())", "test = int(input())\nfor _ in range(test):\n    n = int(input())\n    a = [bin(int(x))[2:][::-1] + '0' * 32 for x in input().split()]\n    res = ''\n    mysum = 0\n    for i in range(32):\n        mycount = 0\n        for j in range(n):\n            if a[j][i] == '0':\n                mycount += 1\n        if mycount == n:\n            break\n        if mycount > n // 2:\n            res += '0'\n            mysum += (n - mycount) * int(pow(2, i))\n        else:\n            res += '1'\n            mysum += mycount * int(pow(2, i))\n    print(mysum)", "from math import log2\n\ndef findX(n, arr):\n    X = sum([1 << i for i in range(int(log2(max(arr))) + 1) if len([j for j in range(n) if arr[j] & 1 << i]) > int(n / 2)])\n    print(sum([X ^ arr[i] for i in range(n)]))\nfor _ in range(int(input())):\n    findX(int(input()), list(map(int, input().split())))", "from math import log2\n\ndef findX(n, arr):\n    itr = max(arr)\n    p = int(log2(itr)) + 1\n    X = 0\n    for i in range(p):\n        if len([j for j in range(n) if arr[j] & 1 << i]) > int(n / 2):\n            X += 1 << i\n    print(sum([X ^ arr[i] for i in range(n)]))\nfor _ in range(int(input())):\n    findX(int(input()), list(map(int, input().split())))", "from math import log2\n\ndef findX(n, arr):\n    itr = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > itr:\n            itr = arr[i]\n    p = int(log2(itr)) + 1\n    X = 0\n    for i in range(p):\n        count = 0\n        for j in range(n):\n            if arr[j] & 1 << i:\n                count += 1\n        if count > int(n / 2):\n            X += 1 << i\n    sum = 0\n    for i in range(n):\n        sum += X ^ arr[i]\n    print(sum)\nfor _ in range(int(input())):\n    findX(int(input()), list(map(int, input().split())))", "from math import log2\n\ndef findX(arr, n):\n    itr = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > itr:\n            itr = arr[i]\n    p = int(log2(itr)) + 1\n    X = 0\n    for i in range(p):\n        count = 0\n        for j in range(n):\n            if arr[j] & 1 << i:\n                count += 1\n        if count > int(n / 2):\n            X += 1 << i\n    sum = 0\n    for i in range(n):\n        sum += X ^ arr[i]\n    print(sum)\nt = int(input())\nfor _ in range(t):\n    ss = int(input())\n    arr = list(map(int, input().split()))\n    n = len(arr)\n    findX(arr, n)", "test = int(input())\nfor _ in range(test):\n    n = int(input())\n    a = [bin(int(x))[2:][::-1] + '0' * 32 for x in input().split()]\n    res = ''\n    mysum = 0\n    for i in range(32):\n        mycount = 0\n        for j in range(n):\n            if a[j][i] == '0':\n                mycount += 1\n        if mycount == n:\n            break\n        if mycount > n // 2:\n            res += '0'\n            mysum += (n - mycount) * int(pow(2, i))\n        else:\n            res += '1'\n            mysum += mycount * int(pow(2, i))\n    print(mysum)", "test = int(input())\nfor _ in range(test):\n    n = int(input())\n    a = [bin(int(x))[2:][::-1] + '0' * 32 for x in input().split()]\n    res = ''\n    mysum = 0\n    for i in range(32):\n        mycount = 0\n        for j in range(n):\n            if a[j][i] == '0':\n                mycount += 1\n        if mycount == n:\n            break\n        if mycount > n // 2:\n            res += '0'\n            mysum += (n - mycount) * int(pow(2, i))\n        else:\n            res += '1'\n            mysum += mycount * int(pow(2, i))\n    print(mysum)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [bin(int(x))[2:][::-1] + '0' * 32 for x in input().split()]\n    res = ''\n    mysum = 0\n    for i in range(32):\n        mycount = 0\n        for j in range(n):\n            if a[j][i] == '0':\n                mycount += 1\n        if mycount == n:\n            break\n        if mycount > n // 2:\n            res += '0'\n            mysum += (n - mycount) * int(pow(2, i))\n        else:\n            res += '1'\n            mysum += mycount * int(pow(2, i))\n    print(mysum)", "from math import log2\nt = int(input())\n\ndef odd(a, n):\n    count = 0\n    for i in range(n):\n        count += a[i] % 2\n    if count >= n / 2:\n        return 1\n    return 0\n\ndef divide(a):\n    for i in range(len(a)):\n        a[i] = a[i] >> 1\n    return a\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = a[:]\n    time = int(log2(max(a)) + 1)\n    i = 0\n    answer = 0\n    while i < time:\n        answer += odd(a, n) * (1 << i)\n        a = divide(a)\n        i += 1\n    x = answer\n    for i in range(n):\n        m[i] = m[i] ^ x\n    print(sum(m))", "from math import log2\n\ndef findX(arr, n):\n    itr = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > itr:\n            itr = arr[i]\n    p = int(log2(itr)) + 1\n    X = 0\n    for i in range(p):\n        count = 0\n        for j in range(n):\n            if arr[j] & 1 << i:\n                count += 1\n        if count > int(n / 2):\n            X += 1 << i\n    sum = 0\n    for i in range(n):\n        sum += X ^ arr[i]\n    print(sum)\ntry:\n    t = int(input())\n    for _ in range(t):\n        ss = int(input())\n        arr = list(map(int, input().split()))\n        n = len(arr)\n        findX(arr, n)\nexcept:\n    pass", "from math import log2\n\ndef findX(arr, n):\n    itr = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > itr:\n            itr = arr[i]\n    p = int(log2(itr)) + 1\n    X = 0\n    for i in range(p):\n        count = 0\n        for j in range(n):\n            if arr[j] & 1 << i:\n                count += 1\n        if count > int(n / 2):\n            X += 1 << i\n    sum = 0\n    for i in range(n):\n        sum += X ^ arr[i]\n    print(sum)\nt = int(input())\nfor _ in range(t):\n    ss = int(input())\n    arr = list(map(int, input().split()))\n    n = len(arr)\n    findX(arr, n)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(32):\n        c = 0\n        for x in l:\n            if x & 1 << i:\n                c += 1\n        if c > n // 2:\n            ans |= 1 << i\n    x = 0\n    for i in l:\n        x += i ^ ans\n    print(x)", "twopow = {}\nfor i in range(31):\n    twopow[i] = 2 ** i\nfor _ in range(int(input())):\n    (n, a, b, original_tot, change) = (int(input()), list(map(int, input().split())), dict(), 0, 0)\n    for i in range(31):\n        b[i] = 0\n    for i in range(n):\n        s = bin(a[i])[2:][::-1]\n        original_tot += a[i]\n        for i in range(len(s)):\n            if s[i] == '1':\n                b[i] += 1\n    for x in b:\n        p = b[x]\n        if p > 0:\n            if p > n - p:\n                change += (p - (n - p)) * twopow[x]\n    print(original_tot - change)", "twopow = {}\nfor i in range(31):\n    twopow[i] = 2 ** i\nfor _ in range(int(input())):\n    (n, a, b, original_tot) = (int(input()), list(map(int, input().split())), dict(), 0)\n    for i in range(31):\n        b[i] = 0\n    for i in range(n):\n        s = bin(a[i])[2:][::-1]\n        original_tot += a[i]\n        for i in range(len(s)):\n            if s[i] == '1':\n                b[i] += 1\n    change = 0\n    for x in b:\n        p = b[x]\n        if p > 0:\n            if p > n - p:\n                change += (p - (n - p)) * twopow[x]\n    original_tot -= change\n    print(original_tot)", "twopow = {}\nfor i in range(31):\n    twopow[i] = 2 ** i\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = dict()\n    for i in range(31):\n        b[i] = 0\n    original_tot = 0\n    for i in range(n):\n        s = bin(a[i])[2:]\n        s = s[::-1]\n        original_tot += a[i]\n        for i in range(len(s)):\n            if s[i] == '1':\n                b[i] += 1\n    change = 0\n    for x in b:\n        p = b[x]\n        if p > 0:\n            if p > n - p:\n                change += (p - (n - p)) * twopow[x]\n    original_tot -= change\n    print(original_tot)", "def solve():\n    twopow = {}\n    for i in range(31):\n        twopow[i] = 2 ** i\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = dict()\n        for i in range(31):\n            b[i] = 0\n        original_tot = 0\n        for i in range(n):\n            s = bin(a[i])[2:]\n            s = s[::-1]\n            original_tot += a[i]\n            for i in range(len(s)):\n                if s[i] == '1':\n                    b[i] += 1\n        change = 0\n        for x in b:\n            p = b[x]\n            if p > 0:\n                if p > n - p:\n                    change += (p - (n - p)) * twopow[x]\n        original_tot -= change\n        print(original_tot)\nsolve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = [0 for i in range(32)]\n    for i in range(n):\n        c = bin(a[i])[2:]\n        c = c[::-1]\n        for i in range(len(c) - 1, -1, -1):\n            if c[i] == '1':\n                k[i] += 1\n    ans = ''\n    for i in range(32):\n        if k[i] > n / 2:\n            ans += '1'\n        else:\n            ans += '0'\n    ans = ans[::-1]\n    ans = int(ans, 2)\n    su = 0\n    for i in range(n):\n        su += a[i] ^ ans\n    print(su)", "t = int(input())\n\ndef fun(n, a):\n    x = 0\n    for i in range(32):\n        one = 0\n        zero = 0\n        for j in a:\n            if j >> i & 1:\n                one += 1\n            else:\n                zero += 1\n        ma = 0\n        if one > zero:\n            ma = 1\n        x += 2 ** i * ma\n    s = 0\n    for i in a:\n        s += i ^ x\n    print(s)\nwhile t:\n    t -= 1\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    fun(n, a)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    arr = sorted(arr, reverse=True)\n    maxm = len(bin(arr[0])[2:])\n    grid = [''] * n\n    for (index, i) in enumerate(arr):\n        b = list(bin(i)[2:])\n        ans = ['0'] * (maxm - len(b)) + b\n        grid[index] = ans\n    grid = list(map(list, zip(*grid)))\n    ans = 0\n    for (index, i) in enumerate(grid):\n        p = i.count('1')\n        ans = ans + min(p, n - p) * 2 ** (maxm - 1 - index)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    arr = sorted(arr, reverse=True)\n    maxm = len(bin(arr[0])[2:])\n    grid = [''] * n\n    for (index, i) in enumerate(arr):\n        b = list(bin(i)[2:])\n        ans = ['0'] * (maxm - len(b)) + b\n        grid[index] = ans\n    grid = list(map(list, zip(*grid)))\n    ans = 0\n    for (index, i) in enumerate(grid):\n        p = i.count('1')\n        ans = ans + min(p, n - p) * 2 ** (maxm - 1 - index)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    array = [bin(int(x))[2:][::-1] + '0' * 32 for x in input().split()]\n    ans = 0\n    for i in range(32):\n        count = 0\n        for j in range(n):\n            if array[j][i] == '1':\n                count += 1\n        if count > n // 2:\n            ans += (n - count) * 2 ** i\n        else:\n            ans += count * 2 ** i\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [bin(int(x))[2:][::-1] + '0' * 32 for x in input().split()]\n    res = ''\n    mysum = 0\n    for i in range(32):\n        mycount = 0\n        for j in range(n):\n            if a[j][i] == '0':\n                mycount += 1\n        if mycount == n:\n            break\n        if mycount > n // 2:\n            res += '0'\n            mysum += (n - mycount) * int(pow(2, i))\n        else:\n            res += '1'\n            mysum += mycount * int(pow(2, i))\n    print(mysum)", "for t in range(int(input())):\n    B = []\n    n = int(input())\n    l = [int(j) for j in input().split()]\n    for i in range(n):\n        b = bin(l[i])[2:]\n        for j in range(30 - len(b)):\n            b = '0' + b\n        B.append(b)\n    sum_ = sum(l)\n    for b in range(30):\n        ct = 0\n        for i in range(n):\n            if B[i][b] == '1':\n                ct += 1\n        if min(ct, n - ct) == n - ct:\n            sum_ -= 2 ** (30 - b - 1) * (2 * ct - n)\n    print(sum_)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    m = max(a)\n    lgt = len(bin(m)[2:])\n    b = []\n    for j in range(n):\n        val = bin(a[j])[2:]\n        val = '0' * (lgt - len(val)) + val\n        b.append(val)\n    x = ''\n    for j in range(lgt):\n        (one, zero) = (0, 0)\n        for k in range(n):\n            if b[k][j] == '1':\n                one += 1\n            else:\n                zero += 1\n        if one > zero:\n            x = x + '1'\n        else:\n            x = x + '0'\n    x = int(x, 2)\n    for j in range(n):\n        a[j] = a[j] ^ x\n    print(sum(a))", "def find(A):\n    M = max(A)\n    M = len(bin(M)[2:])\n    strings = []\n    for i in range(len(A)):\n        temp = bin(A[i])[2:]\n        strings += ['0' * (M - len(temp)) + temp]\n    bits = [0] * M\n    for i in range(M):\n        count = 0\n        for j in range(len(strings)):\n            if strings[j][i] == '1':\n                count += 1\n        if 2 * count >= len(A):\n            bits[i] = 1\n        else:\n            bits[i] = 0\n    s = ''\n    for x in bits:\n        s += str(x)\n    X = int(s, 2)\n    return sum([A[i] ^ X for i in range(len(A))])\nfor _ in range(int(input())):\n    input()\n    A = list(map(int, input().strip().split(' ')))\n    print(find(A))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = ['{0:b}'.format(x).zfill(32)[::-1] for x in l]\n    ans = ''\n    for i in range(32):\n        zcount = 0\n        for j in range(n):\n            if a[j][i] == '0':\n                zcount += 1\n        if zcount == n:\n            break\n        if zcount > n // 2:\n            ans += '0'\n        else:\n            ans += '1'\n    ans = int(ans[::-1], 2)\n    aans = 0\n    for i in range(n):\n        aans += l[i] ^ ans\n    print(aans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    arr = sorted(arr, reverse=True)\n    maxm = len(bin(arr[0])[2:])\n    grid = [''] * n\n    for (index, i) in enumerate(arr):\n        b = list(bin(i)[2:])\n        ans = ['0'] * (maxm - len(b)) + b\n        grid[index] = ans\n    grid = list(map(list, zip(*grid)))\n    ans = 0\n    for (index, i) in enumerate(grid):\n        p = i.count('1')\n        ans = ans + min(p, n - p) * 2 ** (maxm - 1 - index)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    it = list(map(int, input().split()))\n    a = len(bin(max(it))) - 2\n    s = [0 for i in range(a)]\n    bit = [bin(i)[2:][-1::-1] for i in it]\n    for i in range(a):\n        x = 0\n        for jj in bit:\n            try:\n                if jj[i] == '1':\n                    x += 1\n            except:\n                pass\n        s[i] = x\n    re = 0\n    for (j, i) in enumerate(s):\n        if i > n / 2:\n            re += 2 ** j\n    o = [i ^ re for i in it]\n    print(sum(o))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * 30\n    for i in a:\n        for (j, val) in enumerate(bin(i)[2:][::-1]):\n            if val == '1':\n                b[j] += 1\n    ans = 0\n    for i in range(30):\n        ans += min(b[i], n - b[i]) * 2 ** i\n    print(ans)", "import math\nfrom sys import stdin, stdout\n\ndef pnt(x):\n    stdout.write(str(x) + '\\n')\n\ndef pnt(x, end=' '):\n    stdout.write(str(x) + end)\ninp = lambda : int(stdin.readline())\nsip = lambda : input()\nmulip = lambda : map(int, input().split())\nlst = lambda : list(map(int, stdin.readline().split()))\nsarr = lambda : list(map(str, stdin.readline().split()))\nslst = lambda : list(sip())\narr2d = lambda N: [[int(x) for x in input().split()] for i in range(N)]\nfor _ in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    B = []\n    m = max(A)\n    max_bin = format(m, 'b')\n    for i in A:\n        B.append(bin(i)[2:].zfill(30))\n    C = ['0'] * 30\n    for j in range(30):\n        cnt = 0\n        for i in range(N):\n            if B[i][j] == '1':\n                cnt += 1\n        if cnt / N * 100 >= 50:\n            C[j] = '1'\n    S = ''.join(C)\n    num = int(S, 2)\n    ss = 0\n    for i in A:\n        ss += i ^ num\n    print(ss)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    f = 2147483648\n    fr = [0] * 32\n    for i in range(32):\n        for j in a:\n            if f & j > 0:\n                fr[i] += 1\n        f = f >> 1\n    nm = ''\n    for i in fr:\n        if i <= n // 2:\n            nm += '0'\n        else:\n            nm += '1'\n    nm = int(nm, 2)\n    print(sum([x ^ nm for x in a]))", "for T in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    L = len(bin(max(A)))\n    ones = [0] * L\n    for Ai in A:\n        b = bin(Ai)\n        b = (L - len(b)) * '0' + b\n        for bit in enumerate(b):\n            if bit[1] == '1':\n                ones[bit[0]] += 1\n    b = '0b'\n    for Ai in ones:\n        if Ai > N // 2:\n            b += '1'\n        else:\n            b += '0'\n    b = int(b, 2)\n    S = 0\n    for Ai in A:\n        S += b ^ Ai\n    print(S)", "for _ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    binary = []\n    for i in ar:\n        binary.append(bin(i)[2:].zfill(30))\n    ans = ''\n    for i in range(30):\n        (one, zero) = (0, 0)\n        for cur in binary:\n            if cur[i] == '1':\n                one += 1\n            else:\n                zero += 1\n        ans += '1' if one > zero else '0'\n    now = int(ans, 2)\n    ans = 0\n    for i in ar:\n        ans += i ^ now\n    print(ans)", "import math\nt = int(input())\nwhile t != 0:\n    N = int(input())\n    A = [f'{int(x):032b}' for x in input().split()]\n    min_sum = 0\n    for i in range(32):\n        count = len(list(filter(lambda x: x[i] == '1', A)))\n        min_sum = min_sum + min(count, N - count) * math.pow(2, 31 - i)\n    t -= 1\n    print(int(min_sum))", "def main():\n    for t in range(int(input())):\n        n = int(input())\n        array = [bin(int(i))[2:] for i in input().split()]\n        final_sum = 0\n        for j in range(-1, -31, -1):\n            count = 0\n            for bit in array:\n                try:\n                    if bit[j] == '1':\n                        count += 1\n                except:\n                    continue\n            final_sum += min(count, n - count) * 2 ** (j * -1 - 1)\n        print(final_sum)\nmain()", "def main():\n    for t in range(int(input())):\n        n = int(input())\n        array = [bin(int(i))[2:] for i in input().split()]\n        final_sum = 0\n        for j in range(-1, -31, -1):\n            count = 0\n            for bit in array:\n                try:\n                    if bit[j] == '1':\n                        count += 1\n                except:\n                    pass\n            final_sum += min(count, n - count) * 2 ** (j * -1 - 1)\n        print(final_sum)\nmain()", "from collections import defaultdict\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    nums_bin = []\n    bin_count = defaultdict(int)\n    total = 0\n    max_length = 0\n    for i in range(n):\n        bin_value = '{0:0b}'.format(arr[i])\n        temp = len(bin_value) - 1\n        if max_length < len(bin_value):\n            max_length = len(bin_value)\n        for b in bin_value:\n            if b == '1':\n                bin_count[temp] += 1\n            temp -= 1\n    for i in range(max_length):\n        total += pow(2, i) * min(bin_count[i], n - bin_count[i])\n    print(total)\n    t -= 1", "for i in range(int(input())):\n    N = int(input())\n    array = list(map(int, input().split()))\n    array = list(map(lambda x: bin(x)[2:], array))\n    finalSum = 0\n    for j in range(-1, -31, -1):\n        count = 0\n        for bit in array:\n            try:\n                if bit[j] == '1':\n                    count += 1\n            except:\n                pass\n        finalSum += min(count * 2 ** (j * -1 - 1), (N - count) * 2 ** (j * -1 - 1))\n    print(finalSum)", "for i in range(int(input())):\n    N = input()\n    A = list(map(int, input().split()))\n    binary_A = []\n    max_len = 0\n    for num in A:\n        bin_num = bin(num)[2:]\n        if len(bin_num) > max_len:\n            max_len = len(bin_num)\n        binary_A.append(bin_num)\n    for j in range(len(binary_A)):\n        if len(binary_A[j]) < max_len:\n            x = max_len - len(binary_A[j])\n            for i in range(x):\n                binary_A[j] = '0' + binary_A[j]\n    X = ''\n    for i in range(max_len):\n        count0 = count1 = 0\n        for num in binary_A:\n            if num[i] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n        if count0 > count1:\n            X = X + '0'\n        else:\n            X = X + '1'\n    X = int(X, 2)\n    min_sum = 0\n    for num in A:\n        min_sum += num ^ X\n    print(min_sum)", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    sum = 0\n    ele = 0\n    num_bits = int(log2(max(l)) + 1)\n    for i in range(num_bits):\n        count = 0\n        e = 1 << i\n        for j in range(n):\n            if e & l[j]:\n                count += 1\n        if count < n - count:\n            continue\n        ele += e\n    for i in range(n):\n        sum += l[i] ^ ele\n    print(sum)", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    sum = 0\n    ele = 0\n    num_bits = int(log2(max(l)) + 1)\n    for i in range(num_bits):\n        count = 0\n        e = 1 << i\n        for j in range(n):\n            if e & l[j]:\n                count += 1\n        if count < n - count:\n            continue\n        ele += e\n    for i in range(n):\n        sum += l[i] ^ ele\n    print(sum)", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    num_bits = int(log2(max(l)) + 1)\n    (ans, X) = (0, 0)\n    for i in range(num_bits):\n        (oc, zc, ele) = (0, 0, 1 << num_bits - i - 1)\n        for j in range(n):\n            if l[j] & ele:\n                oc += 1\n            else:\n                zc += 1\n        if oc > zc:\n            X += ele\n    for i in range(n):\n        ans += l[i] ^ X\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    lis2 = [0] * 32\n    for i in range(n):\n        a = bin(lis[i])[2:]\n        for j in range(len(a)):\n            if a[j] == '1':\n                lis2[len(a) - j - 1] += 1\n    lis2.reverse()\n    s = ''\n    for i in lis2:\n        if i > n - i:\n            s += '1'\n        else:\n            s += '0'\n    num = int(s, 2)\n    cnt = 0\n    for i in lis:\n        cnt += i ^ num\n    print(cnt)", "for _ in range(int(input())):\n    x = int(input())\n    l = list(map(int, input().split()))\n    p = []\n    for i in l:\n        y = bin(i)[2:]\n        y = '0' * (32 - len(y)) + y\n        p.append(y)\n    arr = [0 for i in range(32)]\n    for k in p:\n        for i in range(32):\n            if k[i] == '1':\n                arr[i] += 1\n    ans = ''\n    for i in arr:\n        if i > x // 2:\n            ans += '1'\n        else:\n            ans += '0'\n    s = 0\n    g = int(ans, 2)\n    for i in l:\n        s += g ^ i\n    print(s)", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    a = list(map(int, input().rstrip().split()))\n    s = []\n    for i in a:\n        y = bin(i)[2:]\n        y = '0' * (32 - len(y)) + y\n        s.append(y)\n    arr = [0] * 32\n    for j in s:\n        for i in range(32):\n            if j[i] == '1':\n                arr[i] += 1\n    ans = ''\n    for i in arr:\n        if i > n // 2:\n            ans += '1'\n        else:\n            ans += '0'\n    sum1 = 0\n    g = int(ans, 2)\n    for i in a:\n        sum1 += g ^ i\n    print(sum1)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    binary = []\n    max_bits = len(bin(max(arr))[2:])\n    for i in arr:\n        num = bin(i)[2:]\n        num = '0' * (max_bits - len(num)) + num\n        binary.append(num)\n    ans = 0\n    for i in range(-1, -(max_bits + 1), -1):\n        count1 = 0\n        count0 = 0\n        for j in binary:\n            if j[i] == '1':\n                count1 += 1\n            else:\n                count0 += 1\n        if count1 > count0:\n            ans += count0 * 2 ** (abs(i) - 1)\n        else:\n            ans += count1 * 2 ** (abs(i) - 1)\n    print(ans)", "lo = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648]\nfrom collections import defaultdict as dd\nt = int(input())\nwhile t:\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = list(l)\n    le = -1\n    for i in range(n):\n        l[i] = bin(l[i])[2:]\n        if len(l[i]) > le:\n            le = len(l[i])\n    for i in range(n):\n        l[i] = '0' * (le - len(l[i])) + l[i]\n    s = 0\n    cou = len(l[0]) - 1\n    res = 0\n    for i in range(len(l[0])):\n        cou1 = 0\n        cou0 = 0\n        for j in range(n):\n            if l[j][i] == '1':\n                cou1 += 1\n            else:\n                cou0 += 1\n        if cou1 >= cou0:\n            s += cou0 * lo[cou]\n            cou -= 1\n        else:\n            s += cou1 * lo[cou]\n            cou -= 1\n    print(s)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    m = max(l)\n    ans = 0\n    for i in range(30):\n        c = 0\n        for j in range(n):\n            if l[j] & 1 << i:\n                c += 1\n        ones = c\n        zeroes = n - c\n        if zeroes > ones:\n            pass\n        else:\n            ans += 1 << i\n    print(sum((ans ^ i for i in l)))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    ll = [0] * 32\n    for i in l:\n        for j in range(32):\n            if 1 << j & i > 0:\n                ll[j] += 1\n    if n % 2 != 0:\n        x = n // 2 + 1\n    else:\n        x = n // 2\n    s = ''\n    for i in range(31, -1, -1):\n        if ll[i] >= x:\n            s += str('1')\n        else:\n            s += str('0')\n    ss = int(s, 2)\n    ans = 0\n    for i in l:\n        ans += i ^ ss\n    print(ans)", "from math import log2\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    m1 = max(A)\n    size = int(log2(m1)) + 1\n    x = 0\n    ans = 0\n    for i in range(size):\n        (set_bit, mask) = (0, 1 << i)\n        for j in A:\n            if j & mask:\n                set_bit += 1\n        ans += min(set_bit, N - set_bit) * mask\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    for i in a:\n        b += [bin(i)[2:]]\n    maxx = bin(max(a))\n    maxx = len(maxx) - 2\n    count = [0] * maxx\n    for i in b:\n        l = len(i)\n        for j in range(l):\n            if i[j] == '1':\n                count[l - j - 1] += 1\n    bstr = ''\n    for i in count:\n        if i > n / 2:\n            bstr += '1'\n        else:\n            bstr += '0'\n    bstr_r = bstr[::-1]\n    num = int(bstr_r, 2)\n    summ = 0\n    for i in a:\n        summ += i ^ num\n    print(summ)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    sums = 0\n    for i in range(30):\n        one = 0\n        zeros = 0\n        for j in l:\n            if j & 1 << i:\n                zeros += 1\n            else:\n                one += 1\n        if one > zeros:\n            sums += pow(2, i) * zeros\n        else:\n            sums += pow(2, i) * one\n    print(sums)", "import operator\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    lis2 = [0] * 32\n    for i in range(n):\n        a = bin(lis[i])[2:]\n        for i in range(len(a)):\n            if a[i] == '1':\n                lis2[len(a) - i - 1] += 1\n    ss = ''\n    lis2.reverse()\n    for i in lis2:\n        if i > n // 2:\n            ss += '1'\n        else:\n            ss += '0'\n    aa = int(ss, 2)\n    s = 0\n    for i in lis:\n        s += i ^ aa\n    print(s)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n < 3:\n        print(min(a))\n        continue\n    num_bits = len(bin(max(a))[2:])\n    bins = []\n    for i in a:\n        j = bin(i)[2:]\n        j = '0' * (num_bits - len(j)) + j\n        bins.append(j)\n    b = []\n    threshold = n // 2\n    for i in range(num_bits):\n        loc_set = 0\n        for j in range(n):\n            if bins[j][i] == '1':\n                loc_set += 1\n        if loc_set > threshold:\n            b.append('1')\n        else:\n            b.append('0')\n    b = ''.join(b)\n    xor = int(b, 2)\n    c = 0\n    for i in a:\n        c += i ^ xor\n    print(c)", "for z in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    bin_ar = []\n    dict_count = {i: 0 for i in range(31)}\n    for k in ar:\n        bin_ar.append((31 - len(bin(k)[2:])) * '0' + bin(k)[2:])\n    for num in bin_ar:\n        for i in range(31):\n            if num[i] == '0':\n                dict_count[i] += 1\n    x = ['0' for i in range(31)]\n    for key in dict_count:\n        if dict_count[key] < n / 2:\n            x[key] = '1'\n    x_int = int(''.join(x), 2)\n    new_ar = [k ^ x_int for k in ar]\n    print(sum(new_ar))", "import sys\nfrom sys import setrecursionlimit\nfrom bisect import bisect_left, bisect_right, insort\nfrom collections import deque, Counter\nfrom math import gcd, sqrt, factorial, ceil, log10, log2\nfrom itertools import permutations\nfrom heapq import heappush, heappop, heapify\ninf = float('inf')\nmod = 1000000007\nmini = 1000000007\n\ndef ncr(n, r):\n    d = 10 ** 9 + 7\n    num = fact(n)\n    den = fact(r) * fact(n - r) % d\n    den = pow(den, d - 2, d)\n    return num * den % d\n\ndef sieve(n):\n    prime = [True for i in range(n + 1)]\n    lst = []\n    p = 2\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p = p + 1\n    for i in range(2, n + 1):\n        if prime[i]:\n            lst.append(i)\n    return lst\n\ndef binary(number):\n    result = 0\n    while number:\n        result = result + 1\n        number = number & number - 1\n    return result\n\ndef calculate_factors(n):\n    hh = [1] * (n + 1)\n    p = 2\n    while p * p < n:\n        if hh[p] == 1:\n            for i in range(p * 2, n, p):\n                hh[i] = 0\n        p += 1\n    total = 1\n    for p in range(2, n + 1):\n        if hh[p] == 1:\n            count = 0\n            if n % p == 0:\n                while n % p == 0:\n                    n = int(n / p)\n                    count += 1\n                total *= count + 1\n    return total\n\ndef prime_factors(n):\n    i = 2\n    factors = set()\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            factors.add(n // i)\n            n = n // i\n            factors.add(i)\n    if n > 1:\n        factors.add(n)\n    return factors\n\ndef isPrime(n):\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n < 2:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef input():\n    return sys.stdin.readline().strip()\nT = int(input())\nwhile T > 0:\n    n = int(input())\n    Arr = get_array()\n    maxi = max(Arr)\n    nobits = len(bin(maxi)[2:])\n    lst = []\n    half = n // 2\n    for i in Arr:\n        x = bin(i)[2:]\n        if len(x) < nobits:\n            x = '0' * (nobits - len(x)) + x\n        lst.append(x)\n    result = []\n    for i in range(nobits):\n        total = 0\n        for j in range(n):\n            if lst[j][i] == '1':\n                total += 1\n        if total > half:\n            result.append('1')\n        else:\n            result.append('0')\n    x_factor = int(''.join(result), 2)\n    ans = 0\n    for i in Arr:\n        ans += x_factor ^ i\n    print(ans)\n    T -= 1", "def power():\n    global t\n    t = [1]\n    for i in range(1, 31):\n        t.append(t[-1] * 2)\npower()\ntt = int(input())\nimport collections\nfor ii in range(tt):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ma = max(a)\n    d = {}\n    b = bin(ma)[2:]\n    l = len(b)\n    s = ''\n    for i in range(l):\n        d[i] = 0\n    for i in a:\n        for j in range(l):\n            if i & t[j]:\n                d[j] += 1\n    ans = sum(a)\n    for i in d:\n        if d[i] > n - d[i]:\n            ans -= (2 * d[i] - n) * t[i]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input().strip().split(' ')))\n    st = {}\n    bina = []\n    male = 0\n    for i in s:\n        te = '{0:b}'.format(i)\n        bina.append(te[::-1])\n        male = max(male, len(te))\n    sta = list('0' * male)\n    for i in range(n):\n        temp = bina[i] + '0' * (male - len(bina[i]))\n        bina[i] = list(temp[::-1])\n    pla = list(zip(*bina))\n    psta = sta\n    for i in range(male):\n        cal = pla[i].count('1')\n        if cal > n // 2:\n            psta[i] = '1'\n    num = int(''.join(psta), 2)\n    suma = 0\n    for i in s:\n        suma += i ^ num\n    print(suma)", "import operator\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    lis2 = [0] * 32\n    for i in range(n):\n        a = bin(lis[i])[2:]\n        for i in range(len(a)):\n            if a[i] == '1':\n                lis2[len(a) - i - 1] += 1\n    ss = ''\n    lis2.reverse()\n    for i in lis2:\n        if i > n // 2:\n            ss += '1'\n        else:\n            ss += '0'\n    aa = int(ss, 2)\n    s = 0\n    for i in lis:\n        s += i ^ aa\n    print(s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [bin(int(x))[2:][::-1] + '0' * 32 for x in input().split()]\n    res = ''\n    mysum = 0\n    for i in range(32):\n        mycount = 0\n        for j in range(n):\n            if a[j][i] == '0':\n                mycount += 1\n        if mycount == n:\n            break\n        if mycount > n // 2:\n            res += '0'\n            mysum += (n - mycount) * int(pow(2, i))\n        else:\n            res += '1'\n            mysum += mycount * int(pow(2, i))\n    print(mysum)", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    num_bits = int(log2(max(l))) + 1\n    (ans, X) = (0, 0)\n    for i in range(num_bits):\n        (oc, zc, ele) = (0, 0, 1 << num_bits - i - 1)\n        for j in range(n):\n            if l[j] & ele:\n                oc += 1\n            else:\n                zc += 1\n        if oc > zc:\n            X += ele\n    for i in range(n):\n        ans += l[i] ^ X\n    print(ans)", "for T in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    L = len(bin(max(A)))\n    ones = [0] * L\n    for Ai in A:\n        b = bin(Ai)\n        b = (L - len(b)) * '0' + b\n        for bit in enumerate(b):\n            if bit[1] == '1':\n                ones[bit[0]] += 1\n    b = '0b'\n    for Ai in ones:\n        if Ai > N // 2:\n            b += '1'\n        else:\n            b += '0'\n    b = int(b, 2)\n    S = 0\n    for Ai in A:\n        S += b ^ Ai\n    print(S)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    lsit = [x for x in ls]\n    gain = 0\n    for bs in range(33):\n        cnt1s = 0\n        cnt1s = sum((1 for x in lsit if x & 1))\n        lsit = list(map(lambda x: x >> 1, lsit))\n        if not cnt1s:\n            break\n        if cnt1s > n // 2:\n            gain += cnt1s * 2 - n << bs\n    print(sum(ls) - gain)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dict1 = {}\n    for i in range(31, -1, -1):\n        flag = 1 << i\n        count = 0\n        for i in range(n):\n            if flag & arr[i] != 0:\n                count += 1\n        if count != 0:\n            dict1[flag] = count\n    xor = 0\n    for mask in dict1:\n        if dict1[mask] >= n // 2 + 1:\n            xor |= mask\n    total = 0\n    for i in range(n):\n        total += arr[i] ^ xor\n    print(total)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    f = 2147483648\n    fr = [0] * 32\n    for i in range(32):\n        for j in a:\n            if f & j > 0:\n                fr[i] += 1\n        f = f >> 1\n    nm = ''\n    for i in fr:\n        if i <= n // 2:\n            nm += '0'\n        else:\n            nm += '1'\n    nm = int(nm, 2)\n    print(sum([x ^ nm for x in a]))", "pow2 = [1] * 30\nfor i in range(29):\n    pow2[i + 1] = pow2[i] * 2\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = sum(arr)\n    v = [0] * 30\n    limit = n // 2\n    for i in range(n):\n        v1 = bin(arr[i])\n        lv = len(v1)\n        for j in range(lv - 1, 1, -1):\n            if v1[j] == '1':\n                v[lv - 1 - j] += 1\n    for j in range(30):\n        if v[j] > limit:\n            ans += (n - v[j] - v[j]) * pow2[j]\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    b = [bin(int(x))[2:] for x in input().split()]\n    s = [0] * 31\n    for j in range(n):\n        l = len(b[j])\n        for k in range(l):\n            if b[j][k] == '1':\n                s[l - k - 1] += 1\n    k = 30\n    while s[k] == 0:\n        k -= 1\n    m = 1\n    res = 0\n    for sk in range(k + 1):\n        if s[sk] > n / 2:\n            s[sk] = n - s[sk]\n        res += m * s[sk]\n        m = m * 2\n    print(res)", "def main():\n    tc = int(input())\n    for _ in range(tc):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a1 = [a[i] for i in range(n)]\n        st = set()\n        x = ''\n        while len(st) != n:\n            c = 0\n            for i in range(n):\n                c += a[i] % 2\n                a[i] = a[i] // 2\n                if a[i] == 0:\n                    st.add(i)\n            c0 = n - c\n            if c0 >= c:\n                x = '0' + x\n            else:\n                x = '1' + x\n        x = int(x, 2)\n        sm = 0\n        for i in a1:\n            sm += i ^ x\n        print(sm)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = len(bin(max(a))) - 2\n    b = []\n    for i in a:\n        r = bin(i)[2:]\n        b.append('0' * (m - len(r)) + r)\n    c = [0] * m\n    for i in range(m):\n        c[i] = sum((b[j][i] == '1' for j in range(n)))\n    x = ''\n    for i in c:\n        if n - i > i:\n            x += '0'\n        else:\n            x += '1'\n    x = int(x, 2)\n    print(sum((i ^ x for i in a)))", "import numpy as np\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    S = sum(a)\n    A = [[x] for x in a]\n    bits = np.unpackbits(np.array(A, dtype='>i8').view(np.uint8), axis=1).astype(int)\n    counts = np.flip(bits.sum(axis=0), axis=0)\n    diffs = 2 * counts - n\n    for i in range(len(diffs)):\n        if diffs[i] > 0:\n            S -= 2 ** i * diffs[i]\n    print(S)", "for I in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    rn = 0\n    for i in range(32):\n        d[i] = 0\n    for i in range(n):\n        s = str(bin(l[i]))[2:]\n        s = '0' * (32 - len(s)) + s\n        for i in range(32):\n            if s[i] == '1':\n                d[i] += 1\n    for i in range(32):\n        if d[i] >= n / 2:\n            rn += 2 ** (31 - i)\n    s = 0\n    for i in range(n):\n        s += l[i] ^ rn\n    print(s)", "for _ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    binary = []\n    for i in ar:\n        binary.append(bin(i)[2:].zfill(30))\n    ans = ''\n    for i in range(30):\n        (one, zero) = (0, 0)\n        for cur in binary:\n            if cur[i] == '1':\n                one += 1\n            else:\n                zero += 1\n        ans += '1' if one > zero else '0'\n    now = int(ans, 2)\n    ans = 0\n    for i in ar:\n        ans += i ^ now\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    L = [format(int(i), '030b') for i in input().split()]\n    X = ['0' for i in range(30)]\n    for i in range(30):\n        c = 0\n        for j in range(n):\n            if L[j][i] == '1':\n                c += 1\n        if c > n - c:\n            X[i] = '1'\n    x = int(''.join(X), 2)\n    s = 0\n    for a in L:\n        s += int(a, 2) ^ x\n    print(s)", "t = int(input())\nwhile t:\n    t = t - 1\n    n = int(input())\n    x = list(map(int, input().split()))\n    l = [0 for _ in range(30)]\n    for i in x:\n        m = str(bin(i))[2:]\n        for p in range(1, len(m) + 1):\n            if m[-p] == '1':\n                l[p - 1] = l[p - 1] + 1\n    s = 0\n    for i in range(len(l)):\n        if l[i] > n / 2:\n            s = s + 2 ** i\n    su = 0\n    for a in x:\n        su = su + (a ^ s)\n    print(su)", "t = int(input())\nimport collections\nfor ii in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ma = max(a)\n    d = {}\n    b = bin(ma)[2:]\n    l = len(b)\n    s = ''\n    for i in range(l):\n        d[i] = 0\n    for i in a:\n        for j in range(l):\n            if i & 1 << j:\n                d[j] += 1\n    for i in d:\n        if d[i] > n - d[i]:\n            s += '1'\n        else:\n            s += '0'\n    s = s[::-1]\n    s = int(s, 2)\n    ans = 0\n    for i in a:\n        ans += s ^ i\n    print(ans)", "import sys\nfrom sys import setrecursionlimit\nfrom bisect import bisect_left, bisect_right, insort\nfrom collections import deque, Counter\nfrom math import gcd, sqrt, factorial, ceil, log10, log2\nfrom itertools import permutations\nfrom heapq import heappush, heappop, heapify\ninf = float('inf')\nmod = 1000000007\nmini = 1000000007\n\ndef ncr(n, r):\n    d = 10 ** 9 + 7\n    num = fact(n)\n    den = fact(r) * fact(n - r) % d\n    den = pow(den, d - 2, d)\n    return num * den % d\n\ndef sieve(n):\n    prime = [True for i in range(n + 1)]\n    lst = []\n    p = 2\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p = p + 1\n    for i in range(2, n + 1):\n        if prime[i]:\n            lst.append(i)\n    return lst\n\ndef binary(number):\n    result = 0\n    while number:\n        result = result + 1\n        number = number & number - 1\n    return result\n\ndef calculate_factors(n):\n    hh = [1] * (n + 1)\n    p = 2\n    while p * p < n:\n        if hh[p] == 1:\n            for i in range(p * 2, n, p):\n                hh[i] = 0\n        p += 1\n    total = 1\n    for p in range(2, n + 1):\n        if hh[p] == 1:\n            count = 0\n            if n % p == 0:\n                while n % p == 0:\n                    n = int(n / p)\n                    count += 1\n                total *= count + 1\n    return total\n\ndef prime_factors(n):\n    i = 2\n    factors = set()\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            factors.add(n // i)\n            n = n // i\n            factors.add(i)\n    if n > 1:\n        factors.add(n)\n    return factors\n\ndef isPrime(n):\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n < 2:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef input():\n    return sys.stdin.readline().strip()\nT = int(input())\nwhile T > 0:\n    n = int(input())\n    Arr = get_array()\n    maxi = max(Arr)\n    nobits = len(bin(maxi)[2:])\n    lst = []\n    half = n // 2\n    for i in Arr:\n        x = bin(i)[2:]\n        if len(x) < nobits:\n            x = '0' * (nobits - len(x)) + x\n        lst.append(x)\n    result = []\n    for i in range(nobits):\n        total = 0\n        for j in range(n):\n            if lst[j][i] == '1':\n                total += 1\n        if total > half:\n            result.append('1')\n        else:\n            result.append('0')\n    x_factor = int(''.join(result), 2)\n    ans = 0\n    for i in Arr:\n        ans += x_factor ^ i\n    print(ans)\n    T -= 1", "from collections import defaultdict\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * 32\n    for i in a:\n        t = bin(i)[2:]\n        t = t[::-1]\n        for i in range(len(t)):\n            if t[i] == '1':\n                b[i] += 1\n    for i in range(32):\n        if b[i] > n // 2:\n            b[i] = 1\n        else:\n            b[i] = 0\n    b = b[::-1]\n    b = ''.join((str(x) for x in b))\n    t = int(b, 2)\n    ans = 0\n    for i in a:\n        ans += i ^ t\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    a_ = list(map(int, input().split()))\n    a = list(map(bin, a_))\n    for i in range(n):\n        a[i] = '0' * (33 - len(a[i])) + a[i][2:]\n    count = [0] * 31\n    for j in range(31):\n        for i in range(n):\n            if a[i][j] == '1':\n                count[30 - j] += 1\n    x = 0\n    half = n // 2\n    totSum = 0\n    for i in range(31):\n        totSum += min(n - count[i], count[i]) * 2 ** i\n    print(totSum)", "from collections import defaultdict\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * 32\n    for i in a:\n        t = bin(i)[2:]\n        t = t[::-1]\n        for i in range(len(t)):\n            if t[i] == '1':\n                b[i] += 1\n    for i in range(32):\n        if b[i] > n // 2:\n            b[i] = 1\n        else:\n            b[i] = 0\n    b = b[::-1]\n    b = ''.join((str(x) for x in b))\n    t = int(b, 2)\n    ans = 0\n    for i in a:\n        ans += i ^ t\n    print(ans)", "ll = lambda : list(map(int, input().split()))\nfor _ in range(int(input())):\n    n = int(input())\n    l = ll()\n    bits = []\n    summ = 0\n    for bit in range(30):\n        (c1, c2) = (0, 0)\n        for i in l:\n            if 1 << bit & i:\n                c1 += 1\n            else:\n                c2 += 1\n        summ += (1 << bit) * min(c1, c2)\n    print(summ)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    it = list(map(int, input().split()))\n    a = len(bin(max(it))) - 2\n    s = [0 for i in range(a)]\n    bit = [bin(i)[2:][-1::-1] for i in it]\n    for i in range(a):\n        x = 0\n        for jj in bit:\n            try:\n                if jj[i] == '1':\n                    x += 1\n            except:\n                pass\n        s[i] = x\n    re = 0\n    for (j, i) in enumerate(s):\n        if i > n / 2:\n            re += 2 ** j\n    o = [i ^ re for i in it]\n    print(sum(o))", "from functools import reduce\nfrom operator import or_\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = ((sum((c >> i & 1 for c in a)) > n // 2) << i for i in range(30))\n    x = reduce(or_, s)\n    print(sum((c ^ x for c in a)))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = len(bin(max(a))) - 2\n    b = [0] * k\n    for i in a:\n        p = bin(i)[2:]\n        p = '0' * (k - len(p)) + p\n        for i in range(len(p)):\n            if p[i] == '1':\n                b[i] += 1\n    s = ''\n    for i in b:\n        if i > n // 2:\n            s += '1'\n        else:\n            s += '0'\n    s = int(s, 2)\n    p = 0\n    for i in a:\n        p += i ^ s\n    print(p)", "from functools import reduce\nfrom operator import or_\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = reduce(or_, ((sum((c >> i & 1 for c in a)) > n // 2) << i for i in range(30)))\n    print(sum((c ^ x for c in a)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ls = list(map(lambda x: bin(int(x))[2:], input().split()))\n    cnt = max([len(i) for i in ls])\n    ls = ['0' * (cnt - len(i)) + i for i in ls]\n    X = ''\n    for i in range(cnt):\n        cnt0 = cnt1 = 0\n        for j in ls:\n            if j[i] == '1':\n                cnt1 += 1\n            else:\n                cnt0 += 1\n        if cnt0 > cnt1:\n            X += '0'\n        else:\n            X += '1'\n    X = int(X, 2)\n    print(sum([int(i, 2) ^ X for i in ls]))"]