["from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = arr[0]\n    for i in range(1, n):\n        ans = gcd(ans, arr[i])\n    print(ans * n)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = arr[0]\n    for i in range(1, n):\n        ans = gcd(ans, arr[i])\n    print(ans * n)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = arr[0]\n    for i in range(1, n):\n        ans = gcd(ans, arr[i])\n    print(ans * n)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = arr[0]\n    for i in range(1, n):\n        ans = gcd(ans, arr[i])\n    print(ans * n)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = arr[0]\n    for i in range(1, n):\n        ans = gcd(ans, arr[i])\n    print(ans * n)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = arr[0]\n    for i in range(1, n):\n        ans = gcd(ans, arr[i])\n    print(ans * n)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = arr[0]\n    for i in range(1, n):\n        k = arr[i] % ans\n        if k != 0 and k < ans:\n            ans = k\n    print(n * ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = arr[0]\n    for i in range(1, n):\n        k = arr[i] % ans\n        if k != 0 and k < ans:\n            ans = k\n    print(n * ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = a[0]\n    for i in range(1, n):\n        g = gcd(g, a[i])\n    print(g * n)", "from math import gcd\n\ndef snek(k, n):\n    ans = k[0]\n    for i in k:\n        ans = gcd(i, ans)\n    ans = ans * n\n    print(ans)\nfor i in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    snek(k, n)", "from math import gcd\n\ndef snek(k, n):\n    ans = k[0]\n    for i in k:\n        ans = gcd(i, ans)\n    ans = ans * n\n    print(ans)\nfor i in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    snek(k, n)", "from math import gcd\n\ndef snek(k, n):\n    ans = k[0]\n    for i in k:\n        ans = gcd(i, ans)\n    ans = ans * n\n    print(ans)\nfor i in range(int(input())):\n    n = int(input())\n    k = list(map(int, input().split()))\n    snek(k, n)", "from math import *\nfrom functools import *\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = reduce(gcd, l)\n    print(x * n)", "import sys\nimport math\nimport collections\ninput = sys.stdin.readline\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nfor _ in range(ii()):\n    n = ii()\n    arr = il()\n    ans = [arr[0]]\n    for l in rg(1, len(arr)):\n        ans[0] = math.gcd(ans[0], arr[l])\n    ot(n * ans[0])", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    nli = list(map(int, input().split()))\n    nli.sort()\n    a = nli[0]\n    for i in range(1, n):\n        a = gcd(a, nli[i])\n    print(a * n)", "from math import gcd\n\ndef snek(a, n):\n    ans = a[0]\n    for i in a:\n        ans = gcd(i, ans)\n    ans = ans * n\n    print(ans)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    snek(a, n)", "from math import gcd\n\ndef snek(a, n):\n    ans = a[0]\n    for i in a:\n        ans = gcd(i, ans)\n    ans = ans * n\n    print(ans)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    snek(a, n)", "from math import gcd\n\ndef solve(A, N):\n    ans = A[0]\n    for i in A:\n        ans = gcd(i, ans)\n    ans = ans * N\n    print(ans)\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    solve(A, N)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor i in range(int(input())):\n    n = int(input())\n    a = [int(j) for j in input().split()]\n    if len(a) == 1:\n        print(a[0])\n        continue\n    ans = gcd(a[0], a[1])\n    for j in range(2, len(a)):\n        ans = gcd(ans, a[j])\n    print(ans * len(a))", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor i in range(int(input())):\n    n = int(input())\n    a = [int(j) for j in input().split()]\n    if len(a) == 1:\n        print(a[0])\n        continue\n    ans = gcd(a[0], a[1])\n    for j in range(2, len(a)):\n        ans = gcd(ans, a[j])\n    print(ans * len(a))", "def gcd(x, y):\n    if y == 0:\n        return x\n    return gcd(y, x % y)\n\ndef func(x):\n    ans = x[0]\n    for i in range(1, n):\n        ans = gcd(ans, x[i])\n    return ans\nfor u in range(int(input())):\n    n = int(input())\n    x = [int(w) for w in input().split()]\n    print(n * func(x))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    res = 0\n    for i in arr:\n        res = math.gcd(i, res)\n    print(res * n)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = 0\n    for i in range(n):\n        g = math.gcd(a[i], g)\n    print(g * n)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = 0\n    for i in range(n):\n        g = math.gcd(a[i], g)\n    print(g * n)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nt = int(input())\nfor I in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n == 1:\n        print(l[0])\n    else:\n        g = l[0]\n        for I in range(1, n):\n            if g > l[I]:\n                g = gcd(l[I], g)\n            else:\n                g = gcd(g, l[I])\n        print(n * g)", "import math\nfor _ in range(int(input())):\n    num = int(input())\n    arr = [int(s) for s in input().split()]\n    check = []\n    for i in range(len(arr)):\n        check.append(math.gcd(arr[i], arr[i - 1]))\n    print(min(check) * num)", "import math\ntestcase = int(input())\nfor _ in range(testcase):\n    num = int(input())\n    arr = [int(s) for s in input().split()]\n    check = []\n    for i in range(len(arr)):\n        check.append(math.gcd(arr[i], arr[i - 1]))\n    print(min(check) * num)", "def gcd(a, b):\n    if a == b:\n        return b\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(a) > 1:\n        d = gcd(a[0], a[1])\n        for i in range(2, n):\n            d = gcd(d, a[i])\n            if d == 1:\n                break\n        print(d * n)\n    else:\n        print(a[0])", "from math import gcd\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    z = 0\n    for i in range(n):\n        z = gcd(z, l[i])\n    print(z * n)", "def main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        arr = input()\n        x = list(map(int, arr.split(' ')))\n        result = x[0]\n        for y in x:\n            result = gcd(y, result)\n        print(result * n)\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nmain()", "from math import *\nfor u in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = l[0]\n    for i in range(1, n):\n        x = gcd(x, l[i])\n    print(x * n)", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = l[0]\n    for i in range(1, n):\n        x = gcd(x, l[i])\n    print(x * n)", "from math import *\nfrom functools import *\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = reduce(gcd, l)\n    print(x * n)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    z = 0\n    for i in range(n):\n        z = gcd(z, l[i])\n    print(z * n)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    val = arr[0]\n    for i in arr:\n        val = gcd(val, i)\n    print(val * n)", "from math import gcd\n\ndef main():\n    t = int(input())\n    for z in range(t):\n        n = int(input())\n        li = [int(x) for x in input().split()]\n        gd = 0\n        for x in li:\n            gd = gcd(gd, x)\n        ans = n * gd\n        print(ans)\nmain()", "def GCD(a, b):\n    if a > b:\n        (a, b) = (b, a)\n    if a == 0:\n        return b\n    else:\n        return GCD(b % a, a)\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    HCF = A[0]\n    for i in range(1, N):\n        HCF = GCD(A[i], HCF)\n    print(HCF * len(A))", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    g = 0\n    for i in l:\n        g = gcd(g, i)\n    print(g * n)", "def gcd(a, b):\n    if a % b == 0:\n        return b\n    else:\n        return gcd(b, a % b)\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().strip().split(' ')))\n    hcf = l[0]\n    for i in range(1, n):\n        hcf = gcd(l[i], hcf)\n    print(hcf * n)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    if n == 1:\n        print(s[0])\n    else:\n        k = math.gcd(s[0], s[1])\n        i = 2\n        while i < n:\n            k = math.gcd(k, s[i])\n            i += 1\n        print(k * n)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nwhile t:\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    res = l[0]\n    for i in range(1, n):\n        res = gcd(res, l[i])\n    print(n * res)\n    t = t - 1", "from functools import reduce\nfrom math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    print(n * reduce(gcd, l))", "import math\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(a[0])\n    else:\n        ans = math.gcd(a[0], a[1])\n        i = 2\n        while i < n:\n            ans = math.gcd(ans, a[i])\n            i += 1\n        print(ans * n)", "def gcd(l):\n    result = l[0]\n    for c in l[1:]:\n        result = hcf(result, c)\n    return result\n\ndef hcf(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(gcd(l) * n)", "t = int(input())\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\nfor I in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    if n == 1:\n        print(a[0])\n    else:\n        counter = a[0]\n        for g in range(1, len(a)):\n            counter = gcd(a[g], counter)\n        print(counter * n)", "from fractions import gcd\nfrom functools import *\n\ndef GCD(A):\n    return reduce(gcd, A)\nfor tests in range(int(input())):\n    n = int(input())\n    B = [int(i) for i in input().split()]\n    g = GCD(B)\n    print(g * n)", "from fractions import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = -1\n    if n > 1:\n        g = gcd(a[0], a[1])\n        for i in range(2, n):\n            g = gcd(g, a[i])\n            if g == 1:\n                ans = n\n                break\n        if ans != -1:\n            print(ans)\n        else:\n            print(g * n)\n    else:\n        print(a[0])", "from fractions import gcd\nfrom functools import reduce\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = reduce(gcd, a)\n    print(g * n)", "from fractions import gcd\n\ndef solve(arr, n):\n    if n == 1:\n        return arr[0]\n    g = gcd(arr[0], arr[1])\n    for i in range(2, n):\n        g = gcd(g, arr[i])\n    return n * g\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(solve(arr, n))"]