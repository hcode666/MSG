["def pow_mod(base, exp, N):\n    result = 1\n    while exp > 0:\n        if exp % 2 == 1:\n            result = result * base % N\n        exp = exp >> 1\n        base = base * base % N\n    return result\nN = 1000000007\nt = int(input())\nfor i in range(t):\n    [n, m, d, k] = input().split(' ')\n    n = int(n)\n    m = int(m)\n    d = int(d)\n    k = int(k)\n    if m > d:\n        t1 = m - d\n        t2 = pow_mod(d + 1, n, N)\n        t3 = pow_mod(d, n, N)\n        t4 = pow_mod(d - 1, n, N)\n        ans = (t2 - 2 * t3 + t4) * t1 % N\n        print(ans)\n    else:\n        print('0')", "def pow_mod(base, exp, N):\n    result = 1\n    while exp > 0:\n        if exp % 2 == 1:\n            result = result * base % N\n        exp = exp >> 1\n        base = base * base % N\n    return result\nN = 1000000007\nt = int(input())\nfor i in range(t):\n    [n, m, d, k] = input().split(' ')\n    n = int(n)\n    m = int(m)\n    d = int(d)\n    k = int(k)\n    if m > d:\n        t1 = m - d\n        t2 = pow_mod(d + 1, n, N)\n        t3 = pow_mod(d, n, N)\n        t4 = pow_mod(d - 1, n, N)\n        ans = (t2 - 2 * t3 + t4) * t1 % N\n        print(ans)\n    else:\n        print('0')", "def pow_mod(base, exp, N):\n    result = 1\n    while exp > 0:\n        if exp % 2 == 1:\n            result = result * base % N\n        exp = exp >> 1\n        base = base * base % N\n    return result\nN = 1000000007\nt = int(input())\nfor i in range(t):\n    [n, m, d, k] = input().split(' ')\n    n = int(n)\n    m = int(m)\n    d = int(d)\n    k = int(k)\n    if m > d:\n        t1 = m - d\n        t2 = pow_mod(d + 1, n, N)\n        t3 = pow_mod(d, n, N)\n        t4 = pow_mod(d - 1, n, N)\n        ans = (t2 - 2 * t3 + t4) * t1 % N\n        print(ans)\n    else:\n        print('0')", "import sys\ninp = sys.stdin\nM = int(1000000007)\n\ndef expopowM(x, n):\n    result = 1\n    a = x % M\n    b = n\n    while b != 0:\n        if b % 2 == 1:\n            result = int(result * a) % M\n        b = int(b / 2)\n        a = a * a % M\n    return result\nt = int(input())\nwhile t > 0:\n    (n, m, q, k) = map(int, inp.readline().split())\n    if n == 1:\n        print(0)\n    else:\n        if m - q <= 0:\n            z = 0\n        else:\n            x = expopowM(q, n)\n            z = expopowM(q + 1, n)\n            y = expopowM(q - 1, n)\n            z = (z - x - (x - y)) % M\n            if z < 0:\n                z = z + M\n            z = z * (m - q) % M\n        print(z)\n    t -= 1", "import sys\ninp = sys.stdin\nM = int(1000000007)\n\ndef expopowM(x, n):\n    result = int(1)\n    a = int(x) % M\n    b = int(n)\n    while b != 0:\n        if b % 2 == 1:\n            result = int(result * a) % M\n        b = int(b / 2)\n        a = int(a * a) % M\n    return result\nt = int(input())\nwhile t > 0:\n    (n, m, q, k) = map(int, inp.readline().split())\n    if n == 1:\n        print(0)\n    else:\n        if m - q <= 0:\n            z = 0\n        else:\n            x = expopowM(q, n)\n            z = expopowM(q + 1, n)\n            y = expopowM(q - 1, n)\n            z = (z - x - (x - y)) % M\n            if z < 0:\n                z = z + M\n            z = z * (m - q) % M\n        print(z)\n    t -= 1", "T = int(input())\nwhile T > 0:\n    T -= 1\n    (n, m, q, k) = map(int, input().split())\n    if n == 1 or q > m:\n        print(0)\n        continue\n    mod = 10 ** 9 + 7\n    ans = (m - q) % mod\n    ans = ans * (pow(q + 1, n, mod) + pow(q - 1, n, mod) - 2 * pow(q, n, mod)) % mod\n    print(ans % mod)", "MODULO = 10 ** 9 + 7\n\ndef powfast(X, Y):\n    if Y == 0:\n        return 1\n    if Y % 2:\n        return powfast(X, Y - 1) * X % MODULO\n    V = powfast(X, Y // 2)\n    return V * V % MODULO\nT = int(input())\nfor _ in range(T):\n    (N, M, K, _) = [int(x) for x in input().split()]\n    if N == 1:\n        print(0)\n        continue\n    if M <= K:\n        print(0)\n        continue\n    answer = powfast(K + 1, N) - 2 * powfast(K, N) + powfast(K - 1, N)\n    while answer < 0:\n        answer += MODULO\n    answer = answer * (M - K) % MODULO\n    print(answer)", "mod = 10 ** 9 + 7\n\ndef f(n, m, d):\n    if n == 1 or m <= d:\n        return 0\n    r = (pow(d + 1, n, mod) - pow(d, n, mod) * 2 + pow(d - 1, n, mod)) % mod\n    r = r * (m - d) % mod\n    return r\nR = lambda : map(int, input().split())\nT = int(input())\nwhile T > 0:\n    T -= 1\n    (n, m, d, k) = R()\n    print(f(n, m, d))", "class Main:\n\n    def __init__(self):\n        iterable = self.__standard()\n        self.__solution(iterable)\n\n    def __solution(self, iterable):\n        prime = 10 ** 9 + 7\n        (cases,) = map(int, next(iterable).split())\n        for _test in range(cases):\n            (size, limit, delta, _count) = map(int, next(iterable).split())\n            slots = limit - delta\n            if slots < 1:\n                print(0)\n                continue\n            result = pow(delta + 1, size, prime) - 2 * pow(delta, size, prime) + pow(delta - 1, size, prime)\n            result *= slots\n            print(result % prime)\n\n    def __test(self):\n        yield '3'\n        yield '1 1 1 1'\n        yield '2 2 1 1'\n        yield '2 3 1 1'\n\n    def __standard(self):\n        try:\n            while True:\n                yield input()\n        except EOFError:\n            pass\nMain()", "T = int(input())\nAns = ''\nfor t in range(T):\n    (n, m, Qr, k) = map(int, input().split())\n    if Qr + 1 > m:\n        Ans += '0\\n'\n        continue\n    f = m - Qr\n    x = pow(Qr + 1, n, 10 ** 9 + 7)\n    x -= 2 * pow(Qr, n, 10 ** 9 + 7)\n    x += pow(Qr - 1, n, 10 ** 9 + 7)\n    x *= f\n    x %= 10 ** 9 + 7\n    Ans += str(x) + '\\n'\nprint(Ans, end='')", "MOD = 1000000007\n\ndef one_test(n, m, q, k):\n    if q >= m:\n        return 0\n    if q == 0:\n        return m\n    return (m - q) * (pow(q + 1, n, MOD) - 2 * pow(q, n, MOD) + pow(q - 1, n, MOD)) % MOD\nt = int(input())\nfor i in range(t):\n    (n, m, q, k) = map(int, input().split())\n    print(one_test(n, m, q, k))"]