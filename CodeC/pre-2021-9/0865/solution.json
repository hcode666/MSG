["(n, m) = list(map(int, input().split()))\n_offers = [list(map(int, input().split()))[1:] for i in range(m)]\noffers = [0 for i in range(m)]\nfor (i, each) in enumerate(_offers):\n    for ea in each:\n        offers[i] |= 1 << ea\n\ndef re_curse(off, current, merges):\n    if len(off) == 0 or current == (1 << m + 1) - 2:\n        return merges\n    a = re_curse(off[1:], current, merges)\n    if off[0] & current == 0:\n        return max(a, re_curse(off[1:], current | off[0], merges + 1))\n    return a\nprint(re_curse(offers, 0, 0))", "(n, m) = list(map(int, input().split()))\n_offers = [list(map(int, input().split()))[1:] for i in range(m)]\noffers = [0 for i in range(m)]\nfor (i, each) in enumerate(_offers):\n    for ea in each:\n        offers[i] |= 1 << ea\n\ndef re_curse(off, current, merges):\n    if len(off) == 0 or current == (1 << m + 1) - 2:\n        return merges\n    a = re_curse(off[1:], current, merges)\n    if off[0] & current == 0:\n        return max(a, re_curse(off[1:], current | off[0], merges + 1))\n    return a\nprint(re_curse(offers, 0, 0))", "(n, m) = list(map(int, input().split()))\n_offers = [list(map(int, input().split()))[1:] for i in range(m)]\noffers = [0 for i in range(m)]\nfor (i, each) in enumerate(_offers):\n    for ea in each:\n        offers[i] |= 1 << ea\n\ndef re_curse(off, current, merges):\n    if len(off) == 0 or current == (1 << m + 1) - 2:\n        return merges\n    a = re_curse(off[1:], current, merges)\n    if off[0] & current == 0:\n        return max(a, re_curse(off[1:], current | off[0], merges + 1))\n    return a\nprint(re_curse(offers, 0, 0))"]