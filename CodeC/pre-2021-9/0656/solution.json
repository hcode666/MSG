["from collections import defaultdict\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    occurances = defaultdict(lambda : 0)\n    no = 0\n    ne = 0\n    ans = 0\n    for i in range(N):\n        if A[i] % 2 == 0:\n            X = 2 ^ A[i]\n            cne = ne - occurances[X] - occurances[A[i]]\n            ans += cne\n            ne += 1\n        else:\n            X = 2 ^ A[i]\n            cno = no - occurances[X] - occurances[A[i]]\n            ans += cno\n            no += 1\n        occurances[A[i]] += 1\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = defaultdict(lambda : 0)\n    even = odd = 0\n    count = 0\n    for i in l:\n        d[i] += 1\n        if i & 1:\n            odd += 1\n        else:\n            even += 1\n    for i in l:\n        if i % 2 == 0:\n            count = count + even\n        else:\n            count = count + odd\n        if i ^ 2 in d:\n            count = count - d[i ^ 2]\n        count = count - d[i]\n    print(int(count / 2))", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lst_dct = {}\n    lst_even = [0] * n\n    lst_odd = [0] * n\n    var_even = 0\n    var_odd = 0\n    for i in range(n - 1, -1, -1):\n        if lst[i] % 2 == 0:\n            var_even += 1\n        else:\n            var_odd += 1\n        lst_even[i] = var_even\n        lst_odd[i] = var_odd\n    lst_even.append(0)\n    lst_odd.append(0)\n    for i in range(n):\n        if lst[i] % 4 == 0:\n            if lst[i] in lst_dct:\n                lst_dct[lst[i]].append(i)\n            elif lst[i] + 2 in lst_dct:\n                lst_dct[lst[i] + 2].append(i)\n            else:\n                lst_dct[lst[i]] = [i]\n        elif (lst[i] + 2) % 4 == 0:\n            if lst[i] in lst_dct:\n                lst_dct[lst[i]].append(i)\n            elif lst[i] - 2 in lst_dct:\n                lst_dct[lst[i] - 2].append(i)\n            else:\n                lst_dct[lst[i]] = [i]\n        elif (lst[i] + 1) % 4 == 0:\n            if lst[i] in lst_dct:\n                lst_dct[lst[i]].append(i)\n            elif lst[i] - 2 in lst_dct:\n                lst_dct[lst[i] - 2].append(i)\n            else:\n                lst_dct[lst[i]] = [i]\n        elif lst[i] in lst_dct:\n            lst_dct[lst[i]].append(i)\n        elif lst[i] + 2 in lst_dct:\n            lst_dct[lst[i] + 2].append(i)\n        else:\n            lst_dct[lst[i]] = [i]\n    total = 0\n    for i in lst_dct:\n        if i % 2 == 0:\n            length = len(lst_dct[i])\n            for j in range(length):\n                total += lst_even[lst_dct[i][j] + 1] - (length - j - 1)\n        else:\n            length = len(lst_dct[i])\n            for j in range(length):\n                total += lst_odd[lst_dct[i][j] + 1] - (length - j - 1)\n    print(total)\n    t -= 1", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    n = int(input())\n    a = lisin()\n    freq = [0] * 2000000\n    odds = evens = ans = 0\n    for i in range(n):\n        freq[a[i]] += 1\n        if a[i] % 2 == 1:\n            odds += 1\n        else:\n            evens += 1\n    for i in range(n):\n        if a[i] % 2 == 1:\n            ans += odds\n        else:\n            ans += evens\n        ans -= freq[a[i]] + freq[a[i] ^ 2]\n    print(ans // 2)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    n = int(input())\n    a = lisin()\n    freq = [0] * 2000000\n    odds = evens = ans = 0\n    for i in range(n):\n        freq[a[i]] += 1\n        if a[i] % 2 == 1:\n            odds += 1\n        else:\n            evens += 1\n    for i in range(n):\n        if a[i] % 2 == 1:\n            ans += odds\n        else:\n            ans += evens\n        ans -= freq[a[i]] + freq[a[i] ^ 2]\n    print(ans // 2)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    n = int(input())\n    a = lisin()\n    freq = [0] * 2000000\n    odds = evens = ans = 0\n    for i in range(n):\n        freq[a[i]] += 1\n        if a[i] % 2 == 1:\n            odds += 1\n        else:\n            evens += 1\n    for i in range(n):\n        if a[i] % 2 == 1:\n            ans += odds\n        else:\n            ans += evens\n        ans -= freq[a[i]] + freq[a[i] ^ 2]\n    print(ans // 2)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    n = int(input())\n    a = lisin()\n    freq = [0] * 2000000\n    odds = evens = ans = 0\n    for i in range(n):\n        freq[a[i]] += 1\n        if a[i] % 2 == 1:\n            odds += 1\n        else:\n            evens += 1\n    for i in range(n):\n        if a[i] % 2 == 1:\n            ans += odds\n        else:\n            ans += evens\n        ans -= freq[a[i]] + freq[a[i] ^ 2]\n    print(ans // 2)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    n = int(input())\n    a = lisin()\n    freq = [0] * 2000000\n    odds = evens = ans = 0\n    for i in range(n):\n        freq[a[i]] += 1\n        if a[i] % 2 == 1:\n            odds += 1\n        else:\n            evens += 1\n    for i in range(n):\n        if a[i] % 2 == 1:\n            ans += odds\n        else:\n            ans += evens\n        ans -= freq[a[i]] + freq[a[i] ^ 2]\n    print(ans // 2)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    n = int(input())\n    a = lisin()\n    freq = [0] * 2000000\n    odds = evens = ans = 0\n    for i in range(n):\n        freq[a[i]] += 1\n        if a[i] % 2 == 1:\n            odds += 1\n        else:\n            evens += 1\n    for i in range(n):\n        if a[i] % 2 == 1:\n            ans += odds\n        else:\n            ans += evens\n        ans -= freq[a[i]] + freq[a[i] ^ 2]\n    print(ans // 2)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    n = int(input())\n    a = lisin()\n    freq = [0] * 2000000\n    odds = evens = ans = 0\n    for i in range(n):\n        freq[a[i]] += 1\n        if a[i] % 2 == 1:\n            odds += 1\n        else:\n            evens += 1\n    for i in range(n):\n        if a[i] % 2 == 1:\n            ans += odds\n        else:\n            ans += evens\n        ans -= freq[a[i]] + freq[a[i] ^ 2]\n    print(ans // 2)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    n = int(input())\n    a = lisin()\n    freq = [0] * 2000000\n    odds = evens = ans = 0\n    for i in range(n):\n        freq[a[i]] += 1\n        if a[i] % 2 == 1:\n            odds += 1\n        else:\n            evens += 1\n    for i in range(n):\n        if a[i] % 2 == 1:\n            ans += odds\n        else:\n            ans += evens\n        ans -= freq[a[i]] + freq[a[i] ^ 2]\n    print(ans // 2)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    n = int(input())\n    a = lisin()\n    freq = [0] * 2000000\n    odds = evens = ans = 0\n    for i in range(n):\n        freq[a[i]] += 1\n        if a[i] % 2 == 1:\n            odds += 1\n        else:\n            evens += 1\n    for i in range(n):\n        if a[i] % 2 == 1:\n            ans += odds\n        else:\n            ans += evens\n        ans -= freq[a[i]] + freq[a[i] ^ 2]\n    print(ans // 2)", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    (ans, odd, even) = (0, 0, 0)\n    (f1, f2) = ({}, {})\n    for i in range(n):\n        x1 = f1.get(l[i], 0) + 1\n        f1[l[i] ^ 0] = x1\n        x2 = f2.get(l[i], 0) + 1\n        f2[l[i]] = x2\n        if l[i] % 2:\n            odd += 1\n        else:\n            even += 1\n    ans = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    for i in f1.values():\n        ans -= i * (i - 1) // 2\n    exclude = 0\n    for i in f2:\n        exclude += f2[i] * f2.get(i ^ 2, 0)\n    print(ans - exclude // 2)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    n = int(input())\n    a = lisin()\n    freq = [0] * 2000000\n    odds = evens = ans = 0\n    for i in range(n):\n        freq[a[i]] += 1\n        if a[i] % 2 == 1:\n            odds += 1\n        else:\n            evens += 1\n    for i in range(n):\n        if a[i] % 2 == 1:\n            ans += odds\n        else:\n            ans += evens\n        ans -= freq[a[i]] + freq[a[i] ^ 2]\n    print(ans // 2)", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nimport bisect\nfrom collections import defaultdict\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef xor_even_pairs_without_zero_two(a):\n    n = len(a)\n    freq_arr = Counter(a)\n    return n * (n - 1) // 2 - sum((i * (i - 1) // 2 for i in freq_arr.values()))\n\ndef main():\n    for _ in tr():\n        n = nl()\n        a = ln()\n        t = ([], [])\n        for i in a:\n            t[i & 1].append(i >> 2)\n        print(sum(map(xor_even_pairs_without_zero_two, t)))\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nimport bisect\nfrom collections import defaultdict\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef xor_even_pairs_without_zero_two(a):\n    n = len(a)\n    freq_arr = Counter(a)\n    return n * (n - 1) // 2 - sum((i * (i - 1) // 2 for i in freq_arr.values()))\n\ndef main():\n    for _ in tr():\n        n = nl()\n        a = ln()\n        t = ([], [])\n        for i in a:\n            t[i & 1].append(i >> 2)\n        print(sum(map(xor_even_pairs_without_zero_two, t)))\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nimport bisect\nfrom collections import defaultdict\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef xor_even_pairs_without_zero_two(a):\n    n = len(a)\n    freq_arr = Counter(a)\n    return n * (n - 1) // 2 - sum((i * (i - 1) // 2 for i in freq_arr.values()))\n\ndef main():\n    for _ in tr():\n        n = nl()\n        a = ln()\n        t = ([], [])\n        for i in a:\n            t[i & 1].append(i >> 2)\n        print(sum(map(xor_even_pairs_without_zero_two, t)))\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nimport bisect\nfrom collections import defaultdict\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef xor_even_pairs_without_zero_two(a):\n    n = len(a)\n    freq_arr = Counter(a)\n    return n * (n - 1) // 2 - sum((i * (i - 1) // 2 for i in freq_arr.values()))\n\ndef main():\n    for _ in tr():\n        n = nl()\n        a = ln()\n        t = ([], [])\n        for i in a:\n            t[i & 1].append(i >> 2)\n        print(sum(map(xor_even_pairs_without_zero_two, t)))\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nimport bisect\nfrom collections import defaultdict\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef main():\n    for _ in tr():\n        n = nl()\n        a = ln()\n        odd_count = 0\n        even_count = 0\n        freq_arr = defaultdict(int)\n        for i in a:\n            if i & 1:\n                odd_count += 1\n            else:\n                even_count += 1\n            freq_arr[i] += 1\n        count = 0\n        for i in range(n):\n            if a[i] & 1:\n                count += odd_count\n            else:\n                count += even_count\n            count -= freq_arr[a[i] ^ 2]\n            count -= freq_arr[a[i]]\n        print(count >> 1)\nmain()", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    A = list(map(int, input().split(' ')))\n    odd = []\n    even = []\n    for item in A:\n        if item % 2 == 1:\n            odd.append(item)\n        else:\n            even.append(item)\n    odd.sort()\n    even.sort()\n    counter = 0\n    i = 0\n    while i < len(odd):\n        j = 0\n        q = 0\n        while i < len(odd) - 1 and odd[i] == odd[i + 1]:\n            i = i + 1\n            q = q + 1\n        while i + j + 1 < len(odd) and odd[i] ^ odd[i + j + 1] == 2:\n            j = j + 1\n        counter = counter + (q + 1) * (len(odd) - (i + j + 1))\n        i = i + 1\n    i = 0\n    while i < len(even):\n        j = 0\n        q = 0\n        while i < len(even) - 1 and even[i] == even[i + 1]:\n            i = i + 1\n            q = q + 1\n        while i + j + 1 < len(even) and even[i] ^ even[i + j + 1] == 2:\n            j = j + 1\n        counter = counter + (q + 1) * (len(even) - (i + j + 1))\n        i = i + 1\n    print(counter)", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    A = list(map(int, input().split(' ')))\n    odd = []\n    even = []\n    for item in A:\n        if item % 2 == 1:\n            odd.append(item)\n        else:\n            even.append(item)\n    odd.sort()\n    even.sort()\n    counter = 0\n    i = 0\n    while i < len(odd):\n        j = 0\n        q = 0\n        while i < len(odd) - 1 and odd[i] == odd[i + 1]:\n            i = i + 1\n            q = q + 1\n        while i + j + 1 < len(odd) and odd[i] ^ odd[i + j + 1] == 2:\n            j = j + 1\n        counter = counter + (q + 1) * (len(odd) - (i + j + 1))\n        i = i + 1\n    i = 0\n    while i < len(even):\n        j = 0\n        q = 0\n        while i < len(even) - 1 and even[i] == even[i + 1]:\n            i = i + 1\n            q = q + 1\n        while i + j + 1 < len(even) and even[i] ^ even[i + j + 1] == 2:\n            j = j + 1\n        counter = counter + (q + 1) * (len(even) - (i + j + 1))\n        i = i + 1\n    print(counter)", "import sys, math\nfrom collections import Counter\nsys.setrecursionlimit(10 ** 5)\n\ndef pro(arr):\n    n = len(arr)\n    e = []\n    o = []\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            e.append(arr[i])\n        else:\n            o.append(arr[i])\n    print(helper(e) + helper(o))\n\ndef helper(e):\n    c = len(e)\n    ans = c * (c - 1) // 2\n    x = 0\n    for i in range(c):\n        e[i] = e[i] >> 2\n    dic = Counter(e)\n    for (i, j) in dic.items():\n        x += j * (j - 1) // 2\n    return ans - x\n\ndef check(arr):\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            x = arr[i] ^ arr[j]\n            if i != j and x != 2 and (x % 2 == 0):\n                ans += 1\n    print(ans)\nn = int(input())\nfor i in range(n):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pro(arr)", "import sys, math\nfrom collections import Counter\nsys.setrecursionlimit(10 ** 5)\n\ndef pro(arr):\n    n = len(arr)\n    e = []\n    o = []\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            e.append(arr[i])\n        else:\n            o.append(arr[i])\n    print(helper(e) + helper(o))\n\ndef helper(e):\n    c = len(e)\n    ans = c * (c - 1) // 2\n    x = 0\n    for i in range(c):\n        e[i] = e[i] // 4\n    dic = Counter(e)\n    for (i, j) in dic.items():\n        x += j * (j - 1) // 2\n    return ans - x\n\ndef check(arr):\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            x = arr[i] ^ arr[j]\n            if i != j and x != 2 and (x % 2 == 0):\n                ans += 1\n    print(ans)\nn = int(input())\nfor i in range(n):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pro(arr)", "from sys import stdin, stdout\nfrom collections import Counter\ninput = stdin.readline\nt = int(input().strip())\n\ndef func(arr, arr_dict):\n    ded = 0\n    n = len(arr)\n    for key in arr_dict:\n        value = arr_dict[key]\n        if value >= 2:\n            ded += (value - 1) * value // 2\n    for i in range(n - 1):\n        num1 = arr[i]\n        num2 = arr[i + 1]\n        if num1 ^ num2 == 2:\n            ded += arr_dict[num1] * arr_dict[num2]\n    return ded\nfor _ in range(t):\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    arr.sort()\n    odd = [arr[i] for i in range(n) if arr[i] % 2 != 0]\n    even = [arr[i] for i in range(n) if arr[i] % 2 == 0]\n    n1 = len(odd)\n    n2 = len(even)\n    odd_dict = Counter(odd)\n    even_dict = Counter(even)\n    odd = sorted(set(odd))\n    even = sorted(set(even))\n    total = (n1 - 1) * n1 // 2 + (n2 - 1) * n2 // 2\n    ded = func(odd, odd_dict) + func(even, even_dict)\n    ans = total - ded\n    print(ans)", "from sys import stdin, stdout\nfrom collections import Counter\ninput = stdin.readline\nt = int(input().strip())\n\ndef func(arr, arr_dict):\n    ded = 0\n    n = len(arr)\n    for key in arr_dict:\n        value = arr_dict[key]\n        if value >= 2:\n            ded += (value - 1) * value // 2\n    for i in range(n - 1):\n        num1 = arr[i]\n        num2 = arr[i + 1]\n        if num1 ^ num2 == 2:\n            ded += arr_dict[num1] * arr_dict[num2]\n    return ded\nfor _ in range(t):\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    arr.sort()\n    odd = [arr[i] for i in range(n) if arr[i] % 2 != 0]\n    even = [arr[i] for i in range(n) if arr[i] % 2 == 0]\n    n1 = len(odd)\n    n2 = len(even)\n    odd_dict = Counter(odd)\n    even_dict = Counter(even)\n    odd = sorted(set(odd))\n    even = sorted(set(even))\n    total = (n1 - 1) * n1 // 2 + (n2 - 1) * n2 // 2\n    ded = func(odd, odd_dict) + func(even, even_dict)\n    ans = total - ded\n    print(ans)", "def findNum(l):\n    e = {}\n    even = 0\n    odd = 0\n    for i in l:\n        if i not in e:\n            e[i] = 1\n        else:\n            e[i] = e[i] + 1\n        if i % 2 == 0:\n            even = even + 1\n        else:\n            odd = odd + 1\n    count = 0\n    for i in l:\n        if i % 2 == 0:\n            count = count + even\n        else:\n            count = count + odd\n        if i ^ 2 in e:\n            count = count - e[i ^ 2]\n        count = count - e[i]\n    print(int(count / 2))\nu = int(input())\nl = []\nwhile u > 0:\n    n = int(input())\n    l.append(list(map(int, input().split())))\n    u = u - 1\nfor i in l:\n    findNum(i)", "def findNum(l):\n    e = {}\n    even = 0\n    odd = 0\n    for i in l:\n        if i not in e:\n            e[i] = 1\n        else:\n            e[i] = e[i] + 1\n        if i % 2 == 0:\n            even = even + 1\n        else:\n            odd = odd + 1\n    count = 0\n    for i in l:\n        if i % 2 == 0:\n            count = count + even\n        else:\n            count = count + odd\n        if i ^ 2 in e:\n            count = count - e[i ^ 2]\n        count = count - e[i]\n    print(int(count / 2))\nu = int(input())\nl = []\nwhile u > 0:\n    n = int(input())\n    l.append(list(map(int, input().split())))\n    u = u - 1\nfor i in l:\n    findNum(i)", "def find(li):\n    d = {}\n    even = 0\n    odd = 0\n    for i in li:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] = d[i] + 1\n        if i % 2 == 0:\n            even = even + 1\n        else:\n            odd = odd + 1\n    count = 0\n    for i in li:\n        if i % 2 == 0:\n            count = count + even\n        else:\n            count = count + odd\n        if i ^ 2 in d:\n            count = count - d[i ^ 2]\n        count = count - d[i]\n    print(int(count / 2))\nt = int(input())\nli = []\nwhile t > 0:\n    n = int(input())\n    li.append(list(map(int, input().split())))\n    t = t - 1\nfor i in li:\n    find(i)", "def find(li):\n    d = {}\n    even = 0\n    odd = 0\n    for i in li:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] = d[i] + 1\n        if i % 2 == 0:\n            even = even + 1\n        else:\n            odd = odd + 1\n    count = 0\n    for i in li:\n        if i % 2 == 0:\n            count = count + even\n        else:\n            count = count + odd\n        if i ^ 2 in d:\n            count = count - d[i ^ 2]\n        count = count - d[i]\n    print(int(count / 2))\nt = int(input())\nli = []\nwhile t > 0:\n    n = int(input())\n    li.append(list(map(int, input().split())))\n    t = t - 1\nfor i in li:\n    find(i)", "def findNumber(li):\n    d = {}\n    even = 0\n    odd = 0\n    for i in li:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] = d[i] + 1\n        if i % 2 == 0:\n            even = even + 1\n        else:\n            odd = odd + 1\n    count = 0\n    for i in li:\n        if i % 2 == 0:\n            count = count + even\n        else:\n            count = count + odd\n        if i ^ 2 in d:\n            count = count - d[i ^ 2]\n        count = count - d[i]\n    print(int(count / 2))\nt = int(input())\nli = []\nwhile t > 0:\n    n = int(input())\n    li.append(list(map(int, input().split())))\n    t = t - 1\nfor i in li:\n    findNumber(i)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split(' ')))\n    (k, l) = ({}, {})\n    (u, v, c) = (0, 0, 0)\n    for i in A:\n        j = i >> 2\n        if i % 2:\n            c += 1\n            t = k.get(j, 0)\n            u += t\n            k[j] = t + 1\n        else:\n            t = l.get(j, 0)\n            v += t\n            l[j] = t + 1\n    print(c * (c - 1) // 2 + (n - c) * (n - c - 1) // 2 - u - v)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split(' ')))\n    (k, l) = ({}, {})\n    (u, v) = (0, 0)\n    (x, y) = (0, 0)\n    for i in A:\n        j = i >> 2\n        if i % 2:\n            t = k.get(j, 0)\n            u += t\n            x += 1 if t else 0\n            k[j] = t + 1\n        else:\n            t = l.get(j, 0)\n            v += t\n            y += 1 if t else 0\n            l[j] = t + 1\n    (a, b) = (len(k), len(l))\n    print((a + x) * (a + x - 1) // 2 + (b + y) * (b + y - 1) // 2 - u - v)", "def count_pairs(lst):\n    d = create_count_map(lst)\n    ans = 0\n    for i in d:\n        ans += d[i] * (d[i] - 1) // 2\n    return ans\n\ndef create_count_map(lst):\n    result = {}\n    for item in lst:\n        if item in result:\n            result[item] += 1\n        else:\n            result[item] = 1\n    return result\n\ndef get_count(lst, x):\n    count_map = create_count_map(lst)\n    total_pairs = 0\n    for item in count_map:\n        xor_res = item ^ x\n        if xor_res in count_map:\n            total_pairs += count_map[xor_res] * count_map[item]\n    return total_pairs // 2\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    count = 0\n    ar = [i for i in a if i % 2 == 0]\n    br = [i for i in a if i % 2 != 0]\n    a = len(ar)\n    b = len(br)\n    c1 = get_count(ar[:], 2)\n    c2 = get_count(br[:], 2)\n    c3 = count_pairs(ar[:])\n    c4 = count_pairs(br[:])\n    count = a * (a - 1) // 2 + b * (b - 1) // 2 - c1 - c2 - c3 - c4\n    print(count)", "from collections import *\nimport sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    f = Counter(a)\n    r = 0\n    e = 0\n    for i in a:\n        if i % 2:\n            e += 1\n    r += e * (e - 1) // 2\n    e = n - e\n    r += e * (e - 1) // 2\n    for i in f.keys():\n        q = i // 2\n        re = f[i] * (f[i] - 1)\n        re = re // 2\n        r -= re\n        if q % 2 == 1:\n            continue\n        if i + 2 in f:\n            re = f[i] * f[i + 2]\n            r -= re\n    print(r)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * 10000002\n    (tnoo, tnoe, noo, noe) = (0, 0, 0, 0)\n    b[a[0]] += 1\n    for i in range(1, n):\n        b[a[i]] += 1\n        d = a[i] ^ a[i - 1]\n        if d % 2 == 0:\n            noe += 1\n            noo = noo\n        else:\n            c = noo\n            noo = noe + 1\n            noe = c\n        tnoo = tnoo + noo\n        tnoe = tnoe + noe\n        if b[a[i]] > 1:\n            tnoe = tnoe - (b[a[i]] - 1)\n        br = a[i] - 2\n        fr = a[i] + 2\n        if b[fr] > 0 and fr ^ a[i] == 2:\n            tnoe = tnoe - b[fr]\n        if b[br] > 0 and br ^ a[i] == 2:\n            tnoe = tnoe - b[br]\n    print(tnoe)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * 10000002\n    (tnoo, tnoe, noo, noe) = (0, 0, 0, 0)\n    b[a[0]] += 1\n    for i in range(1, n):\n        b[a[i]] += 1\n        d = a[i] ^ a[i - 1]\n        if d % 2 == 0:\n            noe += 1\n            noo = noo\n        else:\n            c = noo\n            noo = noe + 1\n            noe = c\n        tnoo = tnoo + noo\n        tnoe = tnoe + noe\n        if b[a[i]] > 1:\n            tnoe = tnoe - (b[a[i]] - 1)\n        br = a[i] - 2\n        fr = a[i] + 2\n        if b[fr] > 0 and fr ^ a[i] == 2:\n            tnoe = tnoe - b[fr]\n        if b[br] > 0 and br ^ a[i] == 2:\n            tnoe = tnoe - b[br]\n    print(tnoe)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    k = []\n    for i in l:\n        if not i % 2:\n            k.append(i)\n    d = {}\n    for i in k:\n        try:\n            d[i] += 1\n        except:\n            d[i] = 1\n    m = len(k)\n    ans = 0\n    x = list(d.keys())\n    x.sort()\n    for i in x:\n        m -= d[i]\n        k = m\n        try:\n            x = d[i + 2]\n            if i + 2 ^ i == 2:\n                k -= x\n        except:\n            pass\n        ans += d[i] * k\n    k = []\n    for i in l:\n        if i % 2:\n            k.append(i)\n    d = {}\n    for i in k:\n        try:\n            d[i] += 1\n        except:\n            d[i] = 1\n    m = len(k)\n    x = list(d.keys())\n    x.sort()\n    for i in x:\n        m -= d[i]\n        k = m\n        try:\n            x = d[i + 2]\n            if i + 2 ^ i == 2:\n                k -= x\n        except:\n            pass\n        ans += d[i] * k\n    print(ans)", "from collections import Counter\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    (odds, evens) = (0, 0)\n    a = [int(i) for i in input().split()]\n    for i in range(n):\n        if a[i] & 1 == 0:\n            evens += 1\n        else:\n            odds += 1\n    count = 0\n    c = Counter(a)\n    for i in range(n - 1):\n        if a[i] & 1 == 1:\n            odds -= 1\n        else:\n            evens -= 1\n        c[a[i]] -= 1\n        if a[i] & 1:\n            count += odds - c[a[i]]\n        else:\n            count += evens - c[a[i]]\n        if a[i] & 2 == 2:\n            count -= c[a[i] - 2]\n        else:\n            count -= c[a[i] + 2]\n    print(count)\n    t -= 1", "for _ in range(int(input())):\n    x = int(input())\n    l = list(map(int, input().split()))\n    o = []\n    e = []\n    os = set()\n    es = set()\n    docc = {}\n    dtwo = {}\n    i = 0\n    while i < len(l):\n        if l[i] in docc:\n            y = docc[l[i]]\n            docc[l[i]] = y + 1\n        else:\n            docc[l[i]] = 1\n        if l[i] % 2 == 0:\n            es.add(l[i])\n            e.append(l[i])\n        else:\n            os.add(l[i])\n            o.append(l[i])\n        i = i + 1\n    os = list(os)\n    es = list(es)\n    topair = len(o) ** 2 - len(o)\n    tepair = len(e) ** 2 - len(e)\n    i = 0\n    while i < len(os):\n        two = os[i] ^ 2\n        dtwo[os[i]] = two\n        i = i + 1\n    i = 0\n    while i < len(es):\n        two = es[i] ^ 2\n        dtwo[es[i]] = two\n        i = i + 1\n    remove = 0\n    i = 0\n    while i < len(os):\n        fz = docc[os[i]]\n        mktwo = dtwo[os[i]]\n        zero = fz * (fz - 1)\n        if mktwo in docc:\n            valmk = docc[mktwo]\n        else:\n            valmk = 0\n        retwo = valmk * fz\n        remove = remove + zero + retwo\n        i = i + 1\n    i = 0\n    while i < len(es):\n        fz = docc[es[i]]\n        mktwo = dtwo[es[i]]\n        zero = fz * (fz - 1)\n        if mktwo in docc:\n            valmk = docc[mktwo]\n        else:\n            valmk = 0\n        retwo = valmk * fz\n        remove = remove + zero + retwo\n        i = i + 1\n    result = topair + tepair - remove\n    print(result // 2)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    even = []\n    odd = []\n    d = {}\n    rpt = {}\n    for x in a:\n        if x % 2 == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n        if x in rpt:\n            rpt[x] += 1\n        else:\n            rpt[x] = 1\n    for x in even:\n        temp = x ^ 2\n        d[temp] = 0\n    for x in odd:\n        temp = x ^ 2\n        d[temp] = 0\n    for x in even:\n        if x in d:\n            d[x] += 1\n    for x in odd:\n        if x in d:\n            d[x] += 1\n    ett = len(even) * (len(even) - 1) // 2\n    ott = len(odd) * (len(odd) - 1) // 2\n    tt = ott + ett\n    temp = 0\n    for x in rpt.values():\n        temp += x * (x - 1) // 2\n    temp1 = 0\n    for x in d.keys():\n        if d[x] != 0:\n            temp1 += d[x] * d[x ^ 2]\n    tt = tt - temp\n    tt -= temp1 // 2\n    print(tt)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    even = []\n    odd = []\n    d = {}\n    rpt = {}\n    for x in a:\n        if x % 2 == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n        if x in rpt:\n            rpt[x] += 1\n        else:\n            rpt[x] = 1\n    for x in even:\n        temp = x ^ 2\n        d[temp] = 0\n    for x in odd:\n        temp = x ^ 2\n        d[temp] = 0\n    for x in even:\n        if x in d:\n            d[x] += 1\n    for x in odd:\n        if x in d:\n            d[x] += 1\n    ett = len(even) * (len(even) - 1) // 2\n    ott = len(odd) * (len(odd) - 1) // 2\n    tt = ott + ett\n    temp = 0\n    for x in rpt.values():\n        temp += x * (x - 1) // 2\n    temp1 = 0\n    for x in d.keys():\n        if d[x] != 0:\n            temp1 += d[x] * d[x ^ 2]\n    tt = tt - temp\n    tt -= temp1 // 2\n    print(tt)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = [0] * int(1000000.0 + 10)\n    even = 0\n    odd = 0\n    for i in range(n):\n        if l[i] % 2 != 0:\n            odd += 1\n        else:\n            even += 1\n        d[l[i]] += 1\n    ans = 0\n    for i in range(n):\n        if l[i] % 2 != 0:\n            ans += odd\n        else:\n            ans += even\n        ans -= d[l[i]]\n        ans -= d[2 ^ l[i]]\n    print(ans // 2)", "def res():\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        noe = 0\n        nod = n\n        x = {}\n        y = {}\n        for i in range(250001):\n            x[i] = 0\n            y[i] = 0\n        ans = 0\n        for i in range(n):\n            m = a[i] // 4\n            if a[i] % 2 == 0:\n                noe = noe + 1\n                x[m] = x[m] + 1\n            else:\n                y[m] = y[m] + 1\n        nod = nod - noe\n        ans = noe * (noe - 1) // 2 + nod * (nod - 1) // 2\n        for i in x:\n            ans = ans - (x[i] * (x[i] - 1) // 2 + y[i] * (y[i] - 1) // 2)\n        print(ans)\nres()", "from collections import Counter\nt = int(input())\nfor o in range(t):\n    n = int(input())\n    final = 0\n    lst = list(map(int, input().split()))\n    frequent = dict(Counter(lst))\n    (ev, oddnumber) = (0, 0)\n    k = 0\n    for i in lst:\n        if i % 2 == 0:\n            ev += 1\n        else:\n            oddnumber += 1\n        if i ^ 2 in frequent.keys():\n            k = k + frequent[i ^ 2] + frequent[i]\n        else:\n            k = k + frequent[i]\n    final = oddnumber * oddnumber + ev * ev - k\n    print(final >> 1)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 0\n    l = list(map(int, input().split()))\n    fr = dict(Counter(l))\n    (even, odd) = (0, 0)\n    k = 0\n    for i in l:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        if i ^ 2 in fr.keys():\n            k = k + fr[i ^ 2] + fr[i]\n        else:\n            k = k + fr[i]\n    ans = odd * odd + even * even - k\n    print(ans >> 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 0\n    l = list(map(int, input().split()))\n    fr = [0] * 1100001\n    for i in range(len(l)):\n        fr[l[i]] += 1\n    (even, odd) = (0, 0)\n    k = 0\n    for i in l:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        k = k + fr[i ^ 2] + fr[i]\n    ans = odd * odd + even * even - k\n    print(ans >> 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 0\n    l = list(map(int, input().split()))\n    fr = [0] * 1100001\n    for i in range(len(l)):\n        fr[l[i]] += 1\n    (even, odd) = (0, 0)\n    for i in l:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    ans = odd * odd + even * even\n    for i in range(len(l)):\n        ans = ans - fr[l[i] ^ 2] - fr[l[i]]\n    print(ans >> 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 0\n    l = list(map(int, input().split()))\n    fr = [0] * 1100001\n    for i in range(len(l)):\n        fr[l[i]] += 1\n    (even, odd) = (0, 0)\n    for i in l:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    for i in range(len(l)):\n        if l[i] & 1:\n            ans += odd\n        else:\n            ans += even\n        ans = ans - fr[l[i] ^ 2] - fr[l[i]]\n    print(ans >> 1)", "def findNumber(li):\n    d = {}\n    even = 0\n    odd = 0\n    for i in li:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] = d[i] + 1\n        if i % 2 == 0:\n            even = even + 1\n        else:\n            odd = odd + 1\n    count = 0\n    for i in li:\n        if i % 2 == 0:\n            count = count + even\n        else:\n            count = count + odd\n        if i ^ 2 in d:\n            count = count - d[i ^ 2]\n        count = count - d[i]\n    print(int(count / 2))\nt = int(input())\nli = []\nwhile t > 0:\n    n = int(input())\n    li.append(list(map(int, input().split())))\n    t = t - 1\nfor i in li:\n    findNumber(i)", "def findNumber(li):\n    d = {}\n    even = 0\n    odd = 0\n    for i in li:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] = d[i] + 1\n        if i % 2 == 0:\n            even = even + 1\n        else:\n            odd = odd + 1\n    count = 0\n    for i in li:\n        if i % 2 == 0:\n            count = count + even\n        else:\n            count = count + odd\n        if i ^ 2 in d:\n            count = count - d[i ^ 2]\n        count = count - d[i]\n    print(int(count / 2))\nt = int(input())\nli = []\nwhile t > 0:\n    n = int(input())\n    li.append(list(map(int, input().split())))\n    t = t - 1\nfor i in li:\n    findNumber(i)", "def calc_num_of_pairs_in_even_list(even_nums_list):\n    count_of_pairs = 0\n    even_nums_list.sort()\n    even_nums_freq_list = []\n    i = 0\n    j = 0\n    while i < len(even_nums_list):\n        even_nums_freq_list.append([even_nums_list[i], 1])\n        i += 1\n        while i < len(even_nums_list) and even_nums_list[i] == even_nums_freq_list[j][0]:\n            even_nums_freq_list[j][1] += 1\n            i += 1\n        j += 1\n    length = len(even_nums_freq_list)\n    suffix_freq_sum = [None for _ in range(length)]\n    suffix_freq_sum[length - 1] = even_nums_freq_list[length - 1][1]\n    for i in reversed(range(length - 1)):\n        suffix_freq_sum[i] = even_nums_freq_list[i][1] + suffix_freq_sum[i + 1]\n    j = 0\n    while j < length - 1:\n        num = even_nums_freq_list[j][0]\n        freq = even_nums_freq_list[j][1]\n        if num % 4 == 2:\n            count_of_pairs += freq * suffix_freq_sum[j + 1]\n        elif even_nums_freq_list[j + 1][0] == num + 2:\n            if j + 2 < length:\n                count_of_pairs += freq * suffix_freq_sum[j + 2]\n        else:\n            count_of_pairs += freq * suffix_freq_sum[j + 1]\n        j += 1\n    return count_of_pairs\n\ndef calc_num_of_pairs_in_odd_list(odd_nums_list):\n    count_of_pairs = 0\n    odd_nums_list.sort()\n    odd_nums_freq_list = []\n    i = 0\n    j = 0\n    while i < len(odd_nums_list):\n        odd_nums_freq_list.append([odd_nums_list[i], 1])\n        i += 1\n        while i < len(odd_nums_list) and odd_nums_list[i] == odd_nums_freq_list[j][0]:\n            odd_nums_freq_list[j][1] += 1\n            i += 1\n        j += 1\n    length = len(odd_nums_freq_list)\n    suffix_freq_sum = [None for _ in range(length)]\n    suffix_freq_sum[length - 1] = odd_nums_freq_list[length - 1][1]\n    for i in reversed(range(length - 1)):\n        suffix_freq_sum[i] = odd_nums_freq_list[i][1] + suffix_freq_sum[i + 1]\n    j = 0\n    while j < length - 1:\n        num = odd_nums_freq_list[j][0]\n        freq = odd_nums_freq_list[j][1]\n        if num % 4 == 3:\n            count_of_pairs += freq * suffix_freq_sum[j + 1]\n        elif odd_nums_freq_list[j + 1][0] == num + 2:\n            if j + 2 < length:\n                count_of_pairs += freq * suffix_freq_sum[j + 2]\n        else:\n            count_of_pairs += freq * suffix_freq_sum[j + 1]\n        j += 1\n    return count_of_pairs\nT = int(input())\nwhile T:\n    N = int(input())\n    A = list(map(int, input().split()))\n    even_nums_list = [val for val in A if val % 2 == 0]\n    odd_nums_list = [val for val in A if val % 2 == 1]\n    count_of_pairs = 0\n    if len(even_nums_list) >= 2:\n        count_of_pairs += calc_num_of_pairs_in_even_list(even_nums_list)\n    if len(odd_nums_list) >= 2:\n        count_of_pairs += calc_num_of_pairs_in_odd_list(odd_nums_list)\n    print(count_of_pairs)\n    T -= 1", "T = int(input())\nfor loop in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    cnt = [0] * (10 ** 6 + 1)\n    for a in A:\n        cnt[a] += 1\n    odd = sum((a % 2 == 1 for a in A))\n    even = sum((a % 2 == 0 for a in A))\n    ans = odd * (odd - 1) // 2 + even * (even - 1) // 2\n    for i in range(1, 10 ** 6 + 1):\n        ans -= cnt[i] * (cnt[i] - 1) // 2\n        j = i ^ 2\n        if i < j and j <= 10 ** 6:\n            ans -= cnt[i] * cnt[j]\n    print(ans)", "import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time, copy, functools\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20\neps = 1.0 / 10 ** 10\nmod = 10 ** 9 + 7\ndd = [(-1, 0), (0, 1), (1, 0), (0, -1)]\nddn = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]\n\ndef LI():\n    return [int(x) for x in sys.stdin.readline().split()]\n\ndef LI_():\n    return [int(x) - 1 for x in sys.stdin.readline().split()]\n\ndef LF():\n    return [float(x) for x in sys.stdin.readline().split()]\n\ndef LS():\n    return sys.stdin.readline().split()\n\ndef I():\n    return int(sys.stdin.readline())\n\ndef F():\n    return float(sys.stdin.readline())\n\ndef S():\n    return input()\n\ndef pf(s):\n    return print(s, flush=True)\n\ndef main():\n    rr = []\n    t = I()\n\n    def f(d):\n        r = 0\n        c = sum(d.values())\n        for (k, v) in d.items():\n            cc = c - v\n            cc -= d[k ^ 2]\n            r += v * cc\n        return r // 2\n    for _ in range(t):\n        n = I()\n        a = LI()\n        b = [c for c in a if c % 2 == 0]\n        d = [c for c in a if c % 2 == 1]\n        bc = collections.Counter(b)\n        dc = collections.Counter(d)\n        r = f(bc)\n        r += f(dc)\n        rr.append(r)\n    return '\\n'.join(map(str, rr))\nprint(main())", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    oc = sum((i % 2 for i in l))\n    ec = sum((i % 2 == 0 for i in l))\n    cnt = 0\n    from collections import Counter\n    c = Counter(l)\n    for i in range(n):\n        if l[i] % 2 == 0:\n            cnt += ec - c[l[i]] - c[l[i] ^ 2]\n        else:\n            cnt += oc - c[l[i]] - c[l[i] ^ 2]\n    print(cnt // 2)", "import collections\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = collections.Counter(a)\n    (o, e, res) = (0, 0, 0)\n    for i in range(n):\n        if a[i] & 1:\n            o += 1\n        else:\n            e += 1\n    for i in range(n):\n        if a[i] & 1:\n            res += o\n        else:\n            res += e\n        res -= cnt[a[i] ^ 2]\n        res -= cnt[a[i]]\n    print(res // 2)", "from sys import stdin\nfrom collections import Counter\n\nclass pair(object):\n\n    def __init__(self, one=None, two=None):\n        self.one = one\n        self.two = two\nfor _ in range(int(stdin.readline())):\n    eventotal = 0\n    eve = 0\n    oddtotal = 0\n    od = 0\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a = dict(Counter(a))\n    a = dict([(key, value) for (key, value) in sorted(a.items())])\n    even = []\n    odd = []\n    for (k, v) in a.items():\n        if k % 2 == 0:\n            even.append(pair(k, v))\n        else:\n            odd.append(pair(k, v))\n    for i in range(even.__len__()):\n        if i < even.__len__() - 1:\n            if even[i].one ^ even[i + 1].one == 2:\n                eve += even[i].two * even[i + 1].two\n        eventotal += even[i].two\n        eve += even[i].two * (even[i].two - 1) / 2\n    for i in range(odd.__len__()):\n        if i < odd.__len__() - 1:\n            if odd[i].one ^ odd[i + 1].one == 2:\n                od += odd[i].two * odd[i + 1].two\n        oddtotal += odd[i].two\n        od += odd[i].two * (odd[i].two - 1) / 2\n    eveans = eventotal * (eventotal - 1) / 2\n    eveans -= eve\n    oddans = oddtotal * (oddtotal - 1) / 2\n    oddans -= od\n    print(int(eveans + oddans))", "import collections\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = collections.Counter(a)\n    (odd, even, ans) = (0, 0, 0)\n    for i in range(n):\n        if a[i] & 1:\n            odd += 1\n        else:\n            even += 1\n    for i in range(n):\n        if a[i] & 1:\n            ans += odd\n        else:\n            ans += even\n        ans -= cnt[a[i] ^ 2]\n        ans -= cnt[a[i]]\n    print(int(ans / 2))", "import collections\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = collections.Counter(a)\n    odd = 0\n    even = 0\n    ans = 0\n    for i in range(n):\n        if a[i] & 1:\n            odd += 1\n        else:\n            even += 1\n    for i in range(n):\n        if a[i] & 1:\n            ans += odd\n        else:\n            ans += even\n        ans -= c[a[i] ^ 2]\n        ans -= c[a[i]]\n    ans = int(ans / 2)\n    print(ans)", "import collections\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = collections.Counter(a)\n    odd = 0\n    even = 0\n    ans = 0\n    for i in range(n):\n        if a[i] & 1:\n            odd += 1\n        else:\n            even += 1\n    for i in range(n):\n        if a[i] & 1:\n            ans += odd\n        else:\n            ans += even\n        ans -= c[a[i] ^ 2]\n        ans -= c[a[i]]\n    ans = int(ans / 2)\n    print(ans)", "t = int(input())\nfor xx in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (even, odd, pair) = (0, 0, 0)\n    a = [0 for i in range(10000001)]\n    for i in arr:\n        a[i] += 1\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    pair = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    for i in arr:\n        if a[i] == 0:\n            pass\n        pair -= a[i] * (a[i] - 1) // 2\n        b = i ^ 2\n        pair -= a[i] * a[b]\n        a[i] = 0\n    print(pair)", "for __ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    Af = dict()\n    o = 0\n    e = 0\n    for a in A:\n        if a % 2 == 0:\n            e += 1\n        else:\n            o += 1\n        if a in Af.keys():\n            Af[a] += 1\n        else:\n            Af[a] = 1\n    t = 0\n    r = 0\n    for u in Af.keys():\n        if Af[u] > 1:\n            t += Af[u] * (Af[u] - 1) // 2\n        if u + 2 in Af.keys() and u ^ u + 2 == 2:\n            t += Af[u] * Af[u + 2]\n    r = (e * (e - 1) + o * (o - 1)) // 2\n    r = r - t\n    print(r)", "def nc2(n):\n    return n * (n - 1) // 2\nt = int(input())\nfor case in range(0, t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        if a[0] > 2 and a[0] % 2 == 0:\n            print(1)\n        else:\n            print(0)\n        continue\n    c = [0] * 1000001\n    (e, o, m, j) = [0, 0, 0, 0]\n    for i in a:\n        c[i] += 1\n    for i in range(0, 1000001):\n        if c[i] > 0:\n            if i % 2 == 0:\n                e += c[i]\n            else:\n                o += c[i]\n        if c[i] > 1:\n            m += nc2(c[i])\n        if i ^ 2 < 1000001 and i ^ 2 >= i:\n            j = j + c[i] * c[i ^ 2]\n    res = nc2(e) + nc2(o) - m - j\n    print(res)", "import collections\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = collections.Counter(a)\n    odd = 0\n    even = 0\n    ans = 0\n    for i in range(n):\n        if a[i] & 1:\n            odd += 1\n        else:\n            even += 1\n    for i in range(n):\n        if a[i] & 1:\n            ans += odd\n        else:\n            ans += even\n        ans -= c[a[i] ^ 2]\n        ans -= c[a[i]]\n    ans = int(ans / 2)\n    print(ans)", "def ip():\n    return int(input())\n\ndef ipp():\n    return map(int, input().split())\n\ndef sar():\n    return list(ipp())\n\ndef pars(a):\n    print(' '.join(list(map(str, a))))\n    print('\\r')\n\ndef parl(a):\n    print('\\r'.join(list(map(str, a))))\n    print('\\r')\nT = 1\nT = int(input().strip())\nfor _ in range(T):\n    n = ip()\n    a = sar()\n    odd = 0\n    even = 0\n    mp = {}\n    for i in a:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        if i in mp:\n            mp[i] += 1\n        else:\n            mp[i] = 1\n    ans = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    ex = 0\n    for i in mp:\n        ex += mp[i] * (mp[i] - 1) // 2\n    for i in range(1, 1000001):\n        if i ^ i + 2 == 2:\n            if i in mp and i + 2 in mp:\n                ex += mp[i] * mp[i + 2]\n    print(ans - ex)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    (a, b) = ([], [])\n    for i in range(1000005):\n        b.append(0)\n    a = [int(i) for i in input().split()]\n    (odd, even, diff) = (0, 0, 0)\n    for j in range(n):\n        b[a[j]] += 1\n        if a[j] % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    ans = (odd * odd + even * even - (odd + even)) // 2\n    for k in range(n):\n        xor = a[k] ^ 2\n        diff = diff + b[xor] + b[a[k]] - 1\n    print(ans - diff // 2)\n    t -= 1", "from collections import Counter\n\ndef f(a):\n    n = len(a)\n    d = Counter(a)\n    c = lambda x: x * (x - 1) // 2\n    return c(n) - sum(map(c, d.values()))\nt = int(input())\nfor _ in range(t):\n    input()\n    a = map(int, input().split())\n    l = ([], [])\n    for x in a:\n        l[x & 1].append(x >> 2)\n    print(sum(map(f, l)))", "t = int(input())\nfor i in range(t):\n    k = int(input())\n    l = list(map(int, input().split()))\n    even = {}\n    odd = {}\n    (n, m) = (0, 0)\n    for e in l:\n        if e % 2 == 0:\n            n += 1\n            even[e] = even.get(e, 0) + 1\n        else:\n            m += 1\n            odd[e] = odd.get(e, 0) + 1\n    total1 = n * (n - 1) // 2\n    for key in sorted(even.keys()):\n        a = key + 2\n        count = 0\n        if a ^ key < 4 and a in even.keys():\n            count = even[key] * even[a]\n        count += even[key] * (even[key] - 1) // 2\n        total1 = total1 - count\n    total2 = m * (m - 1) // 2\n    for key in sorted(odd.keys()):\n        a = key + 2\n        count = 0\n        if a ^ key < 4 and a in odd.keys():\n            count = odd[key] * odd[a]\n        count += odd[key] * (odd[key] - 1) // 2\n        total1 = total1 - count\n    print(total1 + total2)", "t = int(input())\nfor i in range(t):\n    k = int(input())\n    l = list(map(int, input().split()))\n    even = {}\n    odd = {}\n    (n, m) = (0, 0)\n    for e in l:\n        if e % 2 == 0:\n            n += 1\n            even[e] = even.get(e, 0) + 1\n        else:\n            m += 1\n            odd[e] = odd.get(e, 0) + 1\n    total1 = n * (n - 1) // 2\n    for key in sorted(even.keys()):\n        a = key + 2\n        count = 0\n        if a ^ key < 4 and a in even.keys():\n            count = even[key] * even[a]\n        count += even[key] * (even[key] - 1) // 2\n        total1 = total1 - count\n    total2 = m * (m - 1) // 2\n    for key in sorted(odd.keys()):\n        a = key + 2\n        count = 0\n        if a ^ key < 4 and a in odd.keys():\n            count = odd[key] * odd[a]\n        count += odd[key] * (odd[key] - 1) // 2\n        total1 = total1 - count\n    print(total1 + total2)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    e = []\n    ec = 0\n    oc = 0\n    o = []\n    de = defaultdict(int)\n    doo = defaultdict(int)\n    for i in range(n):\n        if l[i] % 2 == 0:\n            e.append(l[i])\n            ec += 1\n            de[l[i]] += 1\n        else:\n            o.append(l[i])\n            oc += 1\n            doo[l[i]] += 1\n    c = ec * (ec - 1) / 2 + oc * (oc - 1) / 2\n    t = 0\n    for i in range(n):\n        if l[i] % 2 == 0:\n            if l[i] ^ 2 in de:\n                t += de[l[i] ^ 2]\n            if l[i] ^ 0 in de:\n                t += de[l[i] ^ 0] - 1\n        else:\n            if l[i] ^ 2 in doo:\n                t += doo[l[i] ^ 2]\n            if l[i] ^ 0 in doo:\n                t += doo[l[i] ^ 0] - 1\n    print(int(c - t // 2))", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    lst = list(map(int, input().split()))\n    lsto = []\n    lste = []\n    dicto = dict()\n    dicte = dict()\n    o = 0\n    e = 0\n    for i in lst:\n        if i % 2 == 0:\n            if i in dicte:\n                dicte[i] += 1\n            else:\n                lste.append(i)\n                dicte[i] = 1\n            e += 1\n        else:\n            if i in dicto:\n                dicto[i] += 1\n            else:\n                lsto.append(i)\n                dicto[i] = 1\n            o += 1\n    lsto.sort()\n    lste.sort()\n    c = 0\n    for i in lste:\n        if i % 4 == 0 and i + 2 in dicte:\n            c += (e - dicte[i] - dicte[i + 2]) * dicte[i]\n        else:\n            c += (e - dicte[i]) * dicte[i]\n        e -= dicte[i]\n    for i in lsto:\n        if (i - 1) % 4 == 0 and i + 2 in dicto:\n            c += (o - dicto[i] - dicto[i + 2]) * dicto[i]\n        else:\n            c += (o - dicto[i]) * dicto[i]\n        o -= dicto[i]\n    print(c)", "def check(s):\n    if s == 4:\n        return 1\n    if s < 5:\n        return 0\n    if s % 6 == 0 or s % 6 == 2 or s % 6 == 4:\n        return 1\n    return 0\nt = input()\nt = int(t)\nfor _ in range(t):\n    temp = input()\n    temp = int(temp)\n    lst = [int(i) for i in input().split()]\n    ev = []\n    odd = []\n    dict_ev = {}\n    dict_odd = {}\n    for i in lst:\n        if i % 2 == 0:\n            if i not in dict_ev:\n                dict_ev[i] = 0\n                ev.append(i)\n            dict_ev[i] += 1\n        else:\n            if i not in dict_odd:\n                dict_odd[i] = 0\n                odd.append(i)\n            dict_odd[i] += 1\n    ct = 0\n    ev.sort()\n    odd.sort()\n    n1 = len(ev)\n    n2 = len(odd)\n    t1 = [dict_ev[ev[n1 - 1]] for i in range(n1)]\n    t2 = [dict_odd[odd[n2 - 1]] for i in range(n2)]\n    for i in range(n1 - 2, -1, -1):\n        t1[i] = dict_ev[ev[i]] + t1[i + 1]\n    for i in range(n2 - 2, -1, -1):\n        t2[i] = dict_odd[odd[i]] + t2[i + 1]\n    for i in range(n1 - 1):\n        if check(ev[i] ^ ev[i + 1]) == 1:\n            ct += dict_ev[ev[i]] * t1[i + 1]\n        elif i + 2 < n1:\n            ct += dict_ev[ev[i]] * t1[i + 2]\n    for i in range(n2 - 1):\n        if check(odd[i] ^ odd[i + 1]) == 1:\n            ct += dict_odd[odd[i]] * t2[i + 1]\n        elif i + 2 < n2:\n            ct += dict_odd[odd[i]] * t2[i + 2]\n    print('{}\\n'.format(ct))", "for x in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    o = 0\n    e = 0\n    A = {}\n    for val in a:\n        if val % 2 == 0:\n            e += 1\n        else:\n            o += 1\n        if val in A.keys():\n            A[val] += 1\n        else:\n            A[val] = 1\n    RES = 0\n    Temp = 0\n    for val in A.keys():\n        Temp += int(A[val] * (A[val] - 1) / 2)\n        if val + 2 in A.keys() and val ^ val + 2 == 2:\n            Temp += A[val] * A[val + 2]\n    Res = int((e * (e - 1) + o * (o - 1)) / 2)\n    Res -= Temp\n    print(Res)", "from collections import Counter\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    (odds, evens) = (0, 0)\n    a = [int(i) for i in input().split()]\n    for i in range(n):\n        if a[i] & 1 == 0:\n            evens += 1\n        else:\n            odds += 1\n    count = 0\n    c = Counter(a)\n    for i in range(n - 1):\n        if a[i] & 1 == 1:\n            odds -= 1\n        else:\n            evens -= 1\n        c[a[i]] -= 1\n        if a[i] & 1:\n            count += odds - c[a[i]]\n        else:\n            count += evens - c[a[i]]\n        if a[i] & 2 == 2:\n            count -= c[a[i] - 2]\n        else:\n            count -= c[a[i] + 2]\n    print(count)\n    t -= 1", "t = int(input())\nfor a in range(t):\n    n = int(input())\n    f = list(map(int, input().split()))\n    (even, odd, leneven, lenodd) = ([], [], 0, 0)\n    for y in f:\n        if y % 2 == 0:\n            even.append(y)\n        else:\n            odd.append(y)\n    even.sort()\n    odd.sort()\n    ans = 0\n    lenodd = len(odd)\n    leneven = len(even)\n    if leneven > 1:\n        (feven, evenc, evenr, var) = ([even[0]], [leneven], [1], 1)\n        for i in range(1, leneven):\n            if even[i] != even[i - 1]:\n                feven.append(even[i])\n                evenc.append(leneven - i)\n                evenr.append(1)\n                var += 1\n            else:\n                evenr[-1] += 1\n        for i in range(var - 1):\n            if feven[i] ^ feven[i + 1] > 2:\n                ans += evenc[i + 1] * evenr[i]\n            elif i + 2 < var:\n                ans += evenc[i + 2] * evenr[i]\n    if lenodd > 1:\n        (fodd, oddc, oddr, var) = ([odd[0]], [lenodd], [1], 1)\n        for i in range(1, lenodd):\n            if odd[i] != odd[i - 1]:\n                fodd.append(odd[i])\n                oddc.append(lenodd - i)\n                oddr.append(1)\n                var += 1\n            else:\n                oddr[-1] += 1\n        for i in range(var - 1):\n            if fodd[i] ^ fodd[i + 1] > 2:\n                ans += oddc[i + 1] * oddr[i]\n            elif i + 2 < var:\n                ans += oddc[i + 2] * oddr[i]\n    print(ans)", "import itertools\nfrom collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(temp) for temp in input().strip().split()]\n    eve = []\n    odd = []\n    for temp in a:\n        eve.append(temp) if temp % 2 == 0 else odd.append(temp)\n    (el, ol) = (len(eve), len(odd))\n    (ecount, ocount) = (Counter(eve), Counter(odd))\n    count = el * (el - 1) // 2 + ol * (ol - 1) // 2\n    (eve, odd) = (list(set(eve)), list(set(odd)))\n    eve.sort()\n    odd.sort()\n    (el, ol) = (len(eve), len(odd))\n    for i in range(el):\n        count = count - ecount[eve[i]] * (ecount[eve[i]] - 1) // 2\n        if i < el - 1:\n            xor = eve[i] ^ eve[i + 1]\n            if xor == 2:\n                count = count - ecount[eve[i]] * ecount[eve[i + 1]]\n    for i in range(ol):\n        count = count - ocount[odd[i]] * (ocount[odd[i]] - 1) // 2\n        if i < ol - 1:\n            xor = odd[i] ^ odd[i + 1]\n            if xor == 2:\n                count = count - ocount[odd[i]] * ocount[odd[i + 1]]\n    print(count)", "cases = int(input())\nwhile cases > 0:\n    n = int(input())\n    (a, b) = ([], [])\n    for i in range(1000005):\n        b.append(0)\n    a = [int(i) for i in input().split()]\n    (o, e) = (0, 0)\n    for j in range(n):\n        b[a[j]] += 1\n        if a[j] % 2 == 1:\n            o += 1\n        else:\n            e += 1\n    count = o * o + e * e - (o + e)\n    for x in range(n):\n        key = 2 ^ a[x]\n        diff = b[a[x]] + b[key] - 1\n        count = count - diff\n    print(count // 2)\n    cases -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = [int(i) for i in input().split()]\n    d = {}\n    (e, o) = (0, 0)\n    for i in x:\n        if d.get(i):\n            d[i] += 1\n        else:\n            d[i] = 1\n        if i % 2 == 0:\n            e += 1\n        else:\n            o += 1\n    tp = e * (e - 1) // 2 + o * (o - 1) // 2\n    ip = 0\n    for i in d:\n        if d[i] > 1:\n            ip += d[i] * (d[i] - 1) // 2\n    for i in d:\n        t = i ^ 2\n        if d.get(t) and d[t] > 0:\n            ip += d[t] * d[i]\n            (d[t], d[i]) = (0, 0)\n    print(tp - ip)", "def perm(n):\n    return n * (n - 1) // 2\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()[:n]))\n    even = []\n    odd = []\n    for i in a:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    even.sort()\n    odd.sort()\n    coun = 0\n    res = 0\n    le = len(even)\n    lo = len(odd)\n    hal = 1\n    peh = 1\n    flag = False\n    for i in range(le - 1):\n        if even[i] == even[i + 1]:\n            hal += 1\n        elif even[i] ^ even[i + 1] < 4:\n            coun += perm(hal)\n            if flag:\n                coun += peh * hal\n            else:\n                flag = True\n            peh = hal\n            hal = 1\n        elif even[i] ^ even[i + 1] >= 4:\n            coun += perm(hal)\n            if flag:\n                coun += peh * hal\n                flag = 0\n            peh = hal\n            hal = 1\n    if flag:\n        coun += perm(hal)\n        coun += peh * hal\n        flag = False\n    else:\n        coun += perm(hal)\n    peh = 1\n    hal = 1\n    flag = False\n    for i in range(lo - 1):\n        if odd[i] == odd[i + 1]:\n            hal += 1\n        elif odd[i] ^ odd[i + 1] < 4:\n            coun += perm(hal)\n            if flag:\n                coun += peh * hal\n            else:\n                flag = True\n            peh = hal\n            hal = 1\n        elif odd[i] ^ odd[i + 1] >= 4:\n            coun += perm(hal)\n            if flag:\n                coun += peh * hal\n                flag = False\n            peh = hal\n            hal = 1\n    if flag:\n        coun += perm(hal)\n        coun += peh * hal\n        flag = False\n    else:\n        coun += perm(hal)\n    res += perm(le)\n    res += perm(lo)\n    res -= coun\n    print(res)", "def perm(n):\n    return n * (n - 1) // 2\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()[:n]))\n    even = []\n    odd = []\n    for i in a:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    even.sort()\n    odd.sort()\n    coun = 0\n    res = 0\n    le = len(even)\n    lo = len(odd)\n    hal = 1\n    peh = 1\n    flag = False\n    for i in range(le - 1):\n        if even[i] == even[i + 1]:\n            hal += 1\n        elif even[i] ^ even[i + 1] < 4:\n            coun += perm(hal)\n            if flag:\n                coun += peh * hal\n            else:\n                flag = True\n            peh = hal\n            hal = 1\n        elif even[i] ^ even[i + 1] >= 4:\n            coun += perm(hal)\n            if flag:\n                coun += peh * hal\n                flag = 0\n            peh = hal\n            hal = 1\n    if flag:\n        coun += perm(hal)\n        coun += peh * hal\n        flag = False\n    else:\n        coun += perm(hal)\n    peh = 1\n    hal = 1\n    flag = False\n    for i in range(lo - 1):\n        if odd[i] == odd[i + 1]:\n            hal += 1\n        elif odd[i] ^ odd[i + 1] < 4:\n            coun += perm(hal)\n            if flag:\n                coun += peh * hal\n            else:\n                flag = True\n            peh = hal\n            hal = 1\n        elif odd[i] ^ odd[i + 1] >= 4:\n            coun += perm(hal)\n            if flag:\n                coun += peh * hal\n                flag = False\n            peh = hal\n            hal = 1\n    if flag:\n        coun += perm(hal)\n        coun += peh * hal\n        flag = False\n    else:\n        coun += perm(hal)\n    res += perm(le)\n    res += perm(lo)\n    res -= coun\n    print(res)", "from random import randint\n\ndef calculate(h):\n    if h == 1 or h == 0:\n        return 0\n    if h == 2:\n        return 1\n    return h - 1 + calculate(h - 1)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    list1 = list(map(int, input().strip().split(' ')))\n    list2 = []\n    list3 = []\n    for j in list1:\n        if j % 2 == 0:\n            list2.append(j)\n        else:\n            list3.append(j)\n    result = (len(list2) - 1) * len(list2) // 2 + (len(list3) - 1) * len(list3) // 2\n    list2.sort()\n    list3.sort()\n    dict1 = {}\n    dict2 = {}\n    for j in list2:\n        if j in dict1:\n            dict1[j] = dict1[j] + 1\n        else:\n            dict1[j] = 1\n    for j in list3:\n        if j in dict2:\n            dict2[j] = dict2[j] + 1\n        else:\n            dict2[j] = 1\n    list2 = list(set(list2))\n    list2.sort()\n    for j in range(len(list2)):\n        result = result - (dict1[list2[j]] - 1) * dict1[list2[j]] // 2\n        if j <= len(list2) - 2:\n            x = list2[j] ^ list2[j + 1]\n            if x == 2:\n                result = result - dict1[list2[j]] * dict1[list2[j + 1]]\n    list3 = list(set(list3))\n    list3.sort()\n    for j in range(len(list3)):\n        result = result - (dict2[list3[j]] - 1) * dict2[list3[j]] // 2\n        if j <= len(list3) - 2:\n            x = list3[j] ^ list3[j + 1]\n            if x == 2:\n                result = result - dict2[list3[j]] * dict2[list3[j + 1]]\n    print(result)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    A = [int(j) for j in input().split()]\n    a = 0\n    b = 0\n    B = []\n    C = []\n    for j in range(n):\n        if A[j] % 2 == 0:\n            a += 1\n            B.append(A[j])\n        else:\n            b += 1\n            C.append(A[j])\n    B.sort()\n    C.sort()\n    p = 0\n    k = 0\n    while k < a - 1:\n        pk = B[k] ^ B[k + 1]\n        if pk == 2 or pk == 0:\n            p += 1\n            j = k + 2\n            bk = 0\n            while j < a and B[j] - B[k] <= 2:\n                pk = B[k] ^ B[j]\n                if pk == 0 or pk == 2:\n                    p += 1\n                    bk += 1\n                else:\n                    break\n                j += 1\n            pk = B[k] ^ B[k + 1]\n            while pk == 0 and k < a - 2:\n                k += 1\n                p += bk\n                bk -= 1\n                pk = B[k] ^ B[k + 1]\n        k += 1\n    k = 0\n    while k < b - 1:\n        pk = C[k] ^ C[k + 1]\n        if pk == 2 or pk == 0:\n            p += 1\n            j = k + 2\n            bk = 0\n            while j < b and C[j] - C[k] <= 2:\n                pk = C[k] ^ C[j]\n                if pk == 0 or pk == 2:\n                    p += 1\n                    bk += 1\n                else:\n                    break\n                j += 1\n        pk = C[k] ^ C[k + 1]\n        while pk == 0 and k < b - 2:\n            k += 1\n            p += bk\n            bk -= 1\n            pk = C[k] ^ C[k + 1]\n        k += 1\n    c = (a * (a - 1) + b * (b - 1)) // 2 - p\n    print(c)", "from collections import Counter\n\ndef f(a):\n    c = lambda x: x * (x - 1) // 2\n    return c(len(a)) - sum(map(c, Counter(a).values()))\nt = int(input())\nfor _ in range(t):\n    input()\n    l = ([], [])\n    for x in map(int, input().split()):\n        l[x & 1].append(x >> 2)\n    print(sum(map(f, l)))", "from collections import Counter\n\ndef f(a):\n    c = lambda x: x * (x - 1) // 2\n    return c(len(a)) - sum(map(c, Counter(a).values()))\nt = int(input())\nfor _ in range(t):\n    input()\n    a = map(int, input().split())\n    l = ([], [])\n    for x in a:\n        l[x & 1].append(x >> 2)\n    print(sum(map(f, l)))", "from collections import Counter\n\ndef f(a):\n    n = len(a)\n    d = Counter(a)\n    c = lambda x: x * (x - 1) // 2\n    return c(n) - sum(map(c, d.values()))\nt = int(input())\nfor _ in range(t):\n    input()\n    a = map(int, input().split())\n    l = ([], [])\n    for x in a:\n        l[x & 1].append(x >> 2)\n    print(sum(map(f, l)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    even = {}\n    odd = {}\n    even_count = 0\n    odd_count = 0\n    for elem in l:\n        if elem % 2 == 0:\n            even_count += 1\n            even[elem] = even.get(elem, 0) + 1\n        else:\n            odd_count += 1\n            odd[elem] = odd.get(elem, 0) + 1\n    even_total = even_count * (even_count - 1) // 2\n    for key in sorted(even.keys()):\n        x = key + 2\n        count = 0\n        if x ^ key < 4 and x in even.keys():\n            count = even[x] * even[key]\n        count += even[key] * (even[key] - 1) // 2\n        even_total = even_total - count\n    odd_total = odd_count * (odd_count - 1) // 2\n    for key in sorted(odd.keys()):\n        x = key + 2\n        count = 0\n        if x ^ key < 4 and x in odd.keys():\n            count = odd[x] * odd[key]\n        count += odd[key] * (odd[key] - 1) // 2\n        odd_total = odd_total - count\n    print(odd_total + even_total)", "import math\nfrom collections import *\n\ndef getoddeven(arr):\n    O = []\n    E = []\n    for v in arr:\n        if v & 1:\n            O.append(v)\n        else:\n            E.append(v)\n    return (O, E)\n\ndef getoddoth(arr):\n    pairs = 0\n    m = 0\n    h = defaultdict(int)\n    for v in arr:\n        h[v] += 1\n    for (v, no) in list(h.items()):\n        m += (no * no - no) // 2\n        if v // 2 % 2 == 0 and h[v + 2]:\n            pairs += h[v] * h[v + 2]\n    return pairs + m\n\ndef getevenoth(arr):\n    pairs = 0\n    m = 0\n    h = defaultdict(int)\n    for v in arr:\n        h[v] += 1\n    for (v, no) in list(h.items()):\n        m += (no * no - no) // 2\n        if v // 2 % 2 == 0 and h[v + 2]:\n            pairs += h[v] * h[v + 2]\n    return pairs + m\n\ndef isxor2(a, b):\n    if a // 2 % 2 == 0 and b == a + 2:\n        return True\n    if b // 2 % 2 == 0 and a == b + 2:\n        return True\n    return False\nt = int(input())\nfor _ in range(t):\n    input()\n    arr = [int(i) for i in input().split()]\n    (O, E) = getoddeven(arr)\n    p1 = getoddoth(O)\n    p2 = getevenoth(E)\n    o = len(O)\n    e = len(E)\n    ans = (o * o - o) // 2 + (e * e - e) // 2 - (p1 + p2)\n    print(ans)", "from collections import Counter\n\ndef f(a):\n    n = len(a)\n    d = Counter(a)\n    return n * (n - 1) // 2 - sum((x * (x - 1) // 2 for x in d.values() if x > 1))\nt = int(input())\nfor _ in range(t):\n    input()\n    a = map(int, input().split())\n    l = ([], [])\n    for x in a:\n        l[x & 1].append(x >> 2)\n    print(sum(map(f, l)))", "from collections import Counter\n\ndef f(a):\n    n = len(a)\n    d = Counter(a)\n    return n * (n - 1) // 2 - sum((x * (x - 1) // 2 for x in d.values()))\nt = int(input())\nfor _ in range(t):\n    input()\n    a = map(int, input().split())\n    l = ([], [])\n    for x in a:\n        l[x & 1].append(x >> 2)\n    print(sum(map(f, l)))", "from functools import reduce\nfrom math import *\nimport operator as op\nfrom collections import defaultdict\nfq = defaultdict(int)\n\ndef ncr(n, r):\n    if n < r:\n        return 0\n    r = min(r, n - r)\n    numer = reduce(op.mul, range(n, n - r, -1), 1)\n    denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    x = [int(x) for x in input().split()]\n    even = 0\n    odd = 0\n    special1 = 1.5\n    special2 = 1.5\n    count = 0\n    x.sort()\n    l = 1\n    curr = x[0]\n    cp = 0\n    for j in range(len(x)):\n        i = x[j]\n        if curr == i and j != 0:\n            l = l + 1\n        if curr != i or j == n - 1:\n            cp = cp - l * (l - 1) // 2\n            fq[curr] = l\n            if j == n - 1 and curr != i:\n                fq[i] = 1\n            curr = i\n            l = 1\n    for j in range(len(x)):\n        i = x[j]\n        if i % 2 == 0:\n            even = even + 1\n        else:\n            odd = odd + 1\n        if i % 4 == 1:\n            special1 = i\n        elif i == special1 + 2:\n            special1 = 0.5\n            count = count - fq[i] * fq[i - 2]\n        if i % 4 == 0:\n            special2 = i\n        elif i == special2 + 2:\n            special2 = 0.5\n            count = count - fq[i] * fq[i - 2]\n    print(ncr(even, 2) + ncr(odd, 2) + count + cp)", "t = int(input())\nfor case in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    (even, odd) = ([0] * 250001, [0] * 250001)\n    (n1, n2) = (0, 0)\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            n1 += 1\n            x = arr[i] // 4\n            even[x] += 1\n        else:\n            n2 += 1\n            y = arr[i] // 4\n            odd[y] += 1\n    count = n1 * (n1 - 1) // 2 + n2 * (n2 - 1) // 2\n    c = 0\n    for i in range(250001):\n        c += even[i] * (even[i] - 1) // 2 + odd[i] * (odd[i] - 1) // 2\n    print(count - c)", "from collections import defaultdict\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    even = 0\n    odd = 0\n    for i in a:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    d = defaultdict(int)\n    for i in a:\n        d[i] += 1\n    x = 0\n    y = 0\n    for i in a:\n        x += d[i ^ 2]\n    for i in a:\n        y += d[i ^ 0]\n    print(int(even * (even - 1) / 2 + odd * (odd - 1) / 2 - x / 2 - (y - n) / 2))", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    D = {}\n    (l1, l2) = (0, 0)\n    for i in range(len(A)):\n        if A[i] in D:\n            D[A[i]] += 1\n        else:\n            D[A[i]] = 1\n    sum_c = 0\n    L = list(D.keys())\n    for i in range(len(L)):\n        res = L[i] ^ 2\n        try:\n            sum_c = sum_c + D.get(L[i]) * D.get(res)\n        except:\n            pass\n        sum_c = sum_c + D.get(L[i]) * (D.get(L[i]) - 1) // 2\n        if L[i] % 2 == 0:\n            l1 = l1 + D.get(L[i])\n        else:\n            l2 = l2 + D.get(L[i])\n        del D[L[i]]\n    e = l1 * (l1 - 1) // 2\n    o = l2 * (l2 - 1) // 2\n    print(e + o - sum_c)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    D = {}\n    (l1, l2) = (0, 0)\n    for i in range(len(A)):\n        if A[i] in D:\n            D[A[i]] += 1\n        else:\n            D[A[i]] = 1\n    sum_c = 0\n    L = list(D.keys())\n    for i in range(len(L)):\n        res = L[i] ^ 2\n        try:\n            sum_c = sum_c + D.get(L[i]) * D.get(res)\n        except:\n            pass\n        sum_c = sum_c + D.get(L[i]) * (D.get(L[i]) - 1) // 2\n        if L[i] % 2 == 0:\n            l1 = l1 + D.get(L[i])\n        else:\n            l2 = l2 + D.get(L[i])\n        del D[L[i]]\n    e = l1 * (l1 - 1) // 2\n    o = l2 * (l2 - 1) // 2\n    print(e + o - sum_c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [0] * 1000001\n    for j in a:\n        b[j] += 1\n    even = []\n    odd = []\n    count = 0\n    c = 0\n    r = 0\n    x = 0\n    d = 0\n    e = 0\n    for j in range(1000001):\n        if b[j] > 0:\n            if j % 2 == 0:\n                even.append(j)\n                count += 1\n            else:\n                odd.append(j)\n                c += 1\n    if count > 0:\n        for j in range(1, count):\n            if even[j] ^ even[j - 1] == 2:\n                x += b[even[j]] * b[even[j - 1]]\n            p = b[even[j]]\n            d = d + p\n            r += int(p * (p - 1) / 2)\n        d += b[even[0]]\n        r += int(b[even[0]] * (b[even[0]] - 1) / 2)\n    if c > 0:\n        for j in range(1, c):\n            if odd[j] ^ odd[j - 1] == 2:\n                x += b[odd[j]] * b[odd[j - 1]]\n            q = b[odd[j]]\n            e = e + q\n            r += int(q * (q - 1) / 2)\n        e += b[odd[0]]\n        r += int(b[odd[0]] * (b[odd[0]] - 1) / 2)\n    print(int(d * (d - 1) / 2 + e * (e - 1) / 2 - r - x))", "def perm(n):\n    return n * (n - 1) // 2\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()[:n]))\n    even = []\n    odd = []\n    for i in a:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    even.sort()\n    odd.sort()\n    coun = 0\n    res = 0\n    le = len(even)\n    lo = len(odd)\n    hal = 1\n    peh = 1\n    flag = False\n    for i in range(le - 1):\n        if even[i] == even[i + 1]:\n            hal += 1\n        elif even[i] ^ even[i + 1] < 4:\n            coun += perm(hal)\n            if flag:\n                coun += peh * hal\n            else:\n                flag = True\n            peh = hal\n            hal = 1\n        elif even[i] ^ even[i + 1] >= 4:\n            coun += perm(hal)\n            if flag:\n                coun += peh * hal\n                flag = 0\n            peh = hal\n            hal = 1\n    if flag:\n        coun += perm(hal)\n        coun += peh * hal\n        flag = False\n    else:\n        coun += perm(hal)\n    peh = 1\n    hal = 1\n    flag = False\n    for i in range(lo - 1):\n        if odd[i] == odd[i + 1]:\n            hal += 1\n        elif odd[i] ^ odd[i + 1] < 4:\n            coun += perm(hal)\n            if flag:\n                coun += peh * hal\n            else:\n                flag = True\n            peh = hal\n            hal = 1\n        elif odd[i] ^ odd[i + 1] >= 4:\n            coun += perm(hal)\n            if flag:\n                coun += peh * hal\n                flag = False\n            peh = hal\n            hal = 1\n    if flag:\n        coun += perm(hal)\n        coun += peh * hal\n        flag = False\n    else:\n        coun += perm(hal)\n    res += perm(le)\n    res += perm(lo)\n    res -= coun\n    print(res)", "def perm(n):\n    return n * (n - 1) // 2\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()[:n]))\n    even = []\n    odd = []\n    for i in a:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    even.sort()\n    odd.sort()\n    coun = 0\n    res = 0\n    le = len(even)\n    lo = len(odd)\n    hal = 1\n    peh = 1\n    flag = False\n    for i in range(le - 1):\n        if even[i] == even[i + 1]:\n            hal += 1\n        elif even[i] ^ even[i + 1] < 4:\n            coun += perm(hal)\n            if flag:\n                coun += peh * hal\n            else:\n                flag = True\n            peh = hal\n            hal = 1\n        elif even[i] ^ even[i + 1] >= 4:\n            coun += perm(hal)\n            if flag:\n                coun += peh * hal\n                flag = 0\n            peh = hal\n            hal = 1\n    if flag:\n        coun += perm(hal)\n        coun += peh * hal\n        flag = False\n    else:\n        coun += perm(hal)\n    peh = 1\n    hal = 1\n    flag = False\n    for i in range(lo - 1):\n        if odd[i] == odd[i + 1]:\n            hal += 1\n        elif odd[i] ^ odd[i + 1] < 4:\n            coun += perm(hal)\n            if flag:\n                coun += peh * hal\n            else:\n                flag = True\n            peh = hal\n            hal = 1\n        elif odd[i] ^ odd[i + 1] >= 4:\n            coun += perm(hal)\n            if flag:\n                coun += peh * hal\n                flag = False\n            peh = hal\n            hal = 1\n    if flag:\n        coun += perm(hal)\n        coun += peh * hal\n        flag = False\n    else:\n        coun += perm(hal)\n    res += perm(le)\n    res += perm(lo)\n    res -= coun\n    print(res)", "def pcount(l, x):\n    r = 0\n    d = {}\n    for i in l:\n        c = x ^ i\n        if c in d:\n            r += d[c]\n        if i not in d:\n            d[i] = 0\n        d[i] += 1\n    return r\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    y = 0\n    (e, o) = (0, 0)\n    x = pcount(l, 0)\n    z = pcount(l, 2)\n    for i in l:\n        if i % 2 == 0:\n            e += 1\n        else:\n            o += 1\n    e = e * (e - 1) // 2\n    o = o * (o - 1) // 2\n    ans = e + o - x - z\n    print(ans)"]