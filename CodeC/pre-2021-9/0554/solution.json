["import heapq\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nfrenq = []\nnonfrenq = []\nfor _ in range(m):\n    cn = input().split()\n    (f, p, s) = (int(cn[0]), int(cn[1]), cn[2])\n    if f in a:\n        heapq.heappush(frenq, (-p, s))\n    else:\n        heapq.heappush(nonfrenq, (-p, s))\nwhile frenq:\n    (v, cont) = heapq.heappop(frenq)\n    print(cont)\nwhile nonfrenq:\n    (v, cont) = heapq.heappop(nonfrenq)\n    print(cont)", "import heapq\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nfrenq = []\nnonfrenq = []\nfor _ in range(m):\n    cn = input().split()\n    (f, p, s) = (int(cn[0]), int(cn[1]), cn[2])\n    if f in a:\n        heapq.heappush(frenq, (-p, s))\n    else:\n        heapq.heappush(nonfrenq, (-p, s))\nwhile frenq:\n    (v, cont) = heapq.heappop(frenq)\n    print(cont)\nwhile nonfrenq:\n    (v, cont) = heapq.heappop(nonfrenq)\n    print(cont)", "import sys\nimport copy\nimport math\nimport heapq\nimport bisect\nimport statistics\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom heapq import heapify, heappush, heappop\nfrom itertools import permutations, combinations\nfrom collections import Counter, OrderedDict, deque\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom functools import lru_cache, reduce\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrr = lambda : input().strip()\njl = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmuli = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nmod = 1000000007\n(n, m) = map(int, input().split())\na = list(map(str, input().split()))\nfposts = []\nnposts = []\nfor _ in range(m):\n    (f, p, s) = map(str, input().split())\n    if f in a:\n        fposts.append([int(p), s])\n    else:\n        nposts.append([int(p), s])\nfposts.sort(reverse=True)\nnposts.sort(reverse=True)\nfor line in fposts + nposts:\n    print(line[1])", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nl1 = []\nl2 = []\nfor i in range(m):\n    (f, p, s) = map(str, input().split())\n    if int(f) in a:\n        l1.append((int(p), s))\n    else:\n        l2.append((int(p), s))\nl1.sort()\nl1.reverse()\nl2.sort()\nl2.reverse()\nans = l1 + l2\nfor i in range(m):\n    print(ans[i][1])", "(n, tc) = map(int, input().split())\na = list(map(int, input().split()))\nspecial = []\nnon_ = []\nfor _ in range(tc):\n    (f, p, s) = map(str, input().split())\n    f = int(f)\n    p = int(p)\n    if f in a:\n        special.append((f, p, s))\n    else:\n        non_.append((f, p, s))\n\ndef po(i):\n    return i[1]\nspecial.sort(reverse=True, key=po)\nnon_.sort(reverse=True, key=po)\nfor i in special:\n    print(i[2])\nfor i in non_:\n    print(i[2])", "(n, tc) = map(int, input().split())\na = list(map(int, input().split()))\nspecial = []\nnon_ = []\nfor _ in range(tc):\n    (f, p, s) = map(str, input().split())\n    f = int(f)\n    p = int(p)\n    if f in a:\n        special.append((f, p, s))\n    else:\n        non_.append((f, p, s))\n\ndef po(i):\n    return i[1]\nspecial.sort(reverse=True, key=po)\nnon_.sort(reverse=True, key=po)\nfor i in special:\n    print(i[2])\nfor i in non_:\n    print(i[2])", "(N, M) = map(int, input().split())\nS = set(map(int, input().split()))\nSL = []\nNL = []\nfor m in range(M):\n    parts = input().split()\n    f = int(parts[0])\n    pop = int(parts[1])\n    pos = parts[2]\n    if f in S:\n        SL.append((pop, f, pos))\n    else:\n        NL.append((pop, f, pos))\nSL.sort(reverse=True)\nNL.sort(reverse=True)\nSO = [pos for (pop, f, pos) in SL]\nNO = [pos for (pop, f, pos) in NL]\nprint('\\n'.join(SO))\nprint('\\n'.join(NO))", "(N, M) = map(int, input().split())\nS = set(map(int, input().split()))\nSL = []\nNL = []\nfor m in range(M):\n    parts = input().split()\n    f = int(parts[0])\n    pop = int(parts[1])\n    pos = parts[2]\n    if f in S:\n        SL.append((pop, f, pos))\n    else:\n        NL.append((pop, f, pos))\nSL.sort(reverse=True)\nNL.sort(reverse=True)\nSO = [pos for (pop, f, pos) in SL]\nNO = [pos for (pop, f, pos) in NL]\nprint('\\n'.join(SO))\nprint('\\n'.join(NO))", "(n, m) = list(map(int, input().split()))\nspecial = set(list(map(int, input().split())))\n(sp_list, rem, ans) = ([], [], [])\nfor _ in range(m):\n    (f, p, s) = input().split()\n    (f, p) = (int(f), int(p))\n    if f in special:\n        sp_list.append([p, s])\n    else:\n        rem.append([p, s])\nsp_list.sort(reverse=True)\nrem.sort(reverse=True)\nans = sp_list + rem\nfor i in ans:\n    print(i[1])", "(n, m) = list(map(int, input().split()))\nsp_friends = list(map(int, input().split()))\nsp_friends_posts = []\nother_posts = []\nfor _ in range(m):\n    inp = input().split()\n    f = int(inp[0])\n    p = int(inp[1])\n    s = inp[2]\n    if f in sp_friends:\n        sp_friends_posts.append((p, s))\n    else:\n        other_posts.append((p, s))\npopularity = lambda x: x[0]\nsp_friends_posts.sort(key=popularity, reverse=True)\nother_posts.sort(key=popularity, reverse=True)\nfor (p, s) in sp_friends_posts + other_posts:\n    print(s)", "class NewsFeed:\n\n    def __init__(self, id, popularity, post):\n        self.id = id\n        self.popularity = popularity\n        self.post = post\n\n    def getPost(self):\n        return self.post\n\n    def getPopularity(self):\n        return self.popularity\n(N, M) = map(int, input().strip().split())\nspecialFriends = input().split()\nspecialPosts = []\notherPosts = []\nfor i in range(M):\n    (id, popularity, post) = input().strip().split()\n    if id in specialFriends:\n        specialPosts.append(NewsFeed(id, popularity, post))\n    else:\n        otherPosts.append(NewsFeed(id, popularity, post))\nfor result in sorted(specialPosts, key=lambda x: int(x.getPopularity()), reverse=True):\n    print(result.post)\nfor result in sorted(otherPosts, key=lambda x: int(x.getPopularity()), reverse=True):\n    print(result.post)", "(n, m) = map(int, input().split())\nf = list(map(int, input().split()))\nm_ele = []\nf_ele = []\nfor i in range(m):\n    (a, b, c) = input().split()\n    a = int(a)\n    b = int(b)\n    if a in f:\n        f_ele.append([b, c])\n    else:\n        m_ele.append([b, c])\nf_ele.sort(reverse=True)\nm_ele.sort(reverse=True)\nfor i in f_ele:\n    print(i[1])\nfor i in m_ele:\n    print(i[1])", "(n, m) = map(int, input().split())\nspl = list(map(int, input().split()))\nl = []\nspll = []\nfor i in range(m):\n    (a, b, c) = map(str, input().split())\n    a = int(a)\n    b = int(b)\n    if a in spl:\n        spll.append([b, c])\n    else:\n        l.append([b, c])\nspll = sorted(spll, reverse=True)\nl = sorted(l, reverse=True)\nfor i in spll:\n    print(i[1])\nfor i in l:\n    print(i[1])", "(n, m) = map(int, input().split())\na = set(input().split())\nfriends = []\nothers = []\nfor i in range(m):\n    (f, p, s) = list(input().split())\n    p = int(p)\n    if f in a:\n        friends.append([p, s])\n    else:\n        others.append([p, s])\nfriends.sort(reverse=True)\nothers.sort(reverse=True)\nfor i in friends + others:\n    print(i[1])", "def criteria(l):\n    return -int(l[1])\n(n, m) = map(int, input().split(' '))\nsf = list(input().split(' '))\nsfl = list()\nnl = list()\nfor i in range(m):\n    temp = list(input().split(' '))\n    if temp[0] in sf:\n        sfl.append(temp)\n    else:\n        nl.append(temp)\nsfl.sort(key=criteria)\nnl.sort(key=criteria)\nfor i in sfl:\n    print(i[-1])\nfor i in nl:\n    print(i[-1])", "(n, m) = map(int, input().split())\na = list(map(str, input().split()))\nfposts = []\nnposts = []\nfor _ in range(m):\n    (f, p, s) = map(str, input().split())\n    if f in a:\n        fposts.append([int(p), s])\n    else:\n        nposts.append([int(p), s])\nfposts.sort(reverse=True)\nnposts.sort(reverse=True)\nfor line in fposts + nposts:\n    print(line[1])", "(n, t) = map(int, input().split())\nl = list(map(int, input().strip().split()))[:n]\nsp = []\nnm = []\nwhile t != 0:\n    (f, p, s) = input().split()\n    f = int(f)\n    p = int(p)\n    if f in l:\n        sp.append((p, f, s))\n    else:\n        nm.append((p, f, s))\n    t -= 1\nsp.sort(reverse=True)\nnm.sort(reverse=True)\nfor i in sp:\n    print(i[2])\nfor i in nm:\n    print(i[2])", "(n, m) = list(map(int, input().split()))\na = list(map(int, input().split()))\nsfl = []\nnfl = []\nfor i in range(m):\n    (k, l, s) = input().split()\n    f = int(k)\n    p = int(l)\n    if f in a:\n        sfl.append((f, p, s))\n    else:\n        nfl.append((f, p, s))\nsfl.sort(key=lambda x: x[1], reverse=True)\nnfl.sort(key=lambda x: x[1], reverse=True)\nfor i in sfl:\n    print(i[2])\nfor i in nfl:\n    print(i[2])", "(n, m) = list(map(int, input().split()))\na = list(map(int, input().split()))\nsfl = []\nnfl = []\nfor i in range(m):\n    (k, l, s) = input().split()\n    f = int(k)\n    p = int(l)\n    if f in a:\n        sfl.append((f, p, s))\n    else:\n        nfl.append((f, p, s))\nsfl.sort(key=lambda x: x[1], reverse=True)\nnfl.sort(key=lambda x: x[1], reverse=True)\nfor i in sfl:\n    print(i[2])\nfor i in nfl:\n    print(i[2])", "(n, m) = map(int, input().split())\nspecial = list(map(int, input().split()))\nlst = [input().split() for _ in range(m)]\nfor i in lst:\n    (i[0], i[1]) = (int(i[0]), int(i[1]))\nlst.sort(key=lambda x: x[1], reverse=True)\na1 = []\na2 = []\nfor i in lst:\n    if i[0] in special:\n        a1.append(i[2])\n    else:\n        a2.append(i[2])\nfor i in a1 + a2:\n    print(i)", "(n, m) = [int(i) for i in input().split()]\nsp = [int(i) for i in input().split()]\nx = []\ny = []\nfor i in range(m):\n    (f, p, s) = [int(i) if i.isdigit() else i for i in input().split()]\n    if f in sp:\n        x.append((f, p, s))\n    else:\n        y.append((f, p, s))\nx = sorted(x, key=lambda z: z[1], reverse=True)\ny = sorted(y, key=lambda z: z[1], reverse=True)\nans = x + y\nfor i in ans:\n    print(i[2])", "import sys\n(N, M) = map(int, input().split())\nF = [int(f) for f in input().strip().split(' ')]\n(spf, ot) = ([], [])\nfor m in range(M):\n    P = [m for m in input().strip().split(' ')]\n    if int(P[0]) in F:\n        spf.append([P[1], P[2]])\n    else:\n        ot.append([P[1], P[2]])\nfor i in range(len(spf) - 1):\n    for j in range(i + 1, len(spf)):\n        if int(spf[i][0]) < int(spf[j][0]):\n            t = spf[i][0]\n            T = spf[i][1]\n            spf[i][0] = spf[j][0]\n            spf[i][1] = spf[j][1]\n            spf[j][0] = t\n            spf[j][1] = T\nfor i in range(len(ot) - 1):\n    for j in range(i + 1, len(ot)):\n        if int(ot[i][0]) < int(ot[j][0]):\n            t = ot[i][0]\n            T = ot[i][1]\n            ot[i][0] = ot[j][0]\n            ot[i][1] = ot[j][1]\n            ot[j][0] = t\n            ot[j][1] = T\nfor s in spf:\n    print(s[1])\nfor o in ot:\n    print(o[1])", "(m, n) = map(int, input().split())\nl = list(map(int, input().split()))\n(d1, d2, d3) = ({}, {}, {})\n(l2, l3) = ([], [])\nfor i in l:\n    d1[i] = True\nfor __ in range(n):\n    (a1, a2, a3) = map(str, input().split())\n    (a1, a2) = (int(a1), int(a2))\n    if a1 in d1:\n        if a2 in d2:\n            d2[a2].append(a3)\n        else:\n            d2[a2] = [a3]\n        l2.append(a2)\n    else:\n        if a2 in d3:\n            d3[a2].append(a3)\n        else:\n            d3[a2] = [a3]\n        l3.append(a2)\nl2.sort(reverse=True)\nl3.sort(reverse=True)\nfor i in l2:\n    for j in d2[i]:\n        print(j)\nfor i in l3:\n    for j in d3[i]:\n        print(j)", "(n, m) = map(int, input().split())\nspf = list(input().split())\npost = []\nans1 = []\nans2 = []\nfor _ in range(m):\n    (x, y, z) = input().split()\n    x = int(x)\n    y = int(y)\n    post.append((x, y, z))\npost.sort(key=lambda x: x[1], reverse=True)\nfor f in post:\n    if str(list(f)[0]) in spf:\n        ans1.append(f[2])\n    else:\n        ans2.append(f[2])\nfor a in ans1:\n    print(a)\nfor a in ans2:\n    print(a)", "(n, m) = map(int, input().split())\nspf = list(input().split())\npost = []\nans1 = []\nans2 = []\nfor _ in range(m):\n    (x, y, z) = input().split()\n    x = int(x)\n    y = int(y)\n    post.append((x, y, z))\npost.sort(key=lambda x: x[1], reverse=True)\nfor f in post:\n    if str(list(f)[0]) in spf:\n        ans1.append(f[2])\n    else:\n        ans2.append(f[2])\nfor a in ans1:\n    print(a)\nfor a in ans2:\n    print(a)", "(a, n) = map(int, input().split())\ns1 = list(map(int, input().split()))\narr = []\nfor i in range(n):\n    (e, f, g) = list(input().split())\n    b = [int(e), int(f), g]\n    if b[0] in s1:\n        b[1] += 100000\n    arr.append(b)\narr.sort(key=lambda x: x[1], reverse=True)\nfor el in arr:\n    print(el[2])", "(n, m) = map(int, input().split())\nspl = list(map(int, input().split()))\nl = []\nspll = []\nfor i in range(m):\n    (a, b, c) = map(str, input().split())\n    a = int(a)\n    b = int(b)\n    if a in spl:\n        spll.append([b, c])\n    else:\n        l.append([b, c])\nspll = sorted(spll, reverse=True)\nl = sorted(l, reverse=True)\nfor i in spll:\n    print(i[1])\nfor i in l:\n    print(i[1])", "def solver(normal_post_list, special_post_list):\n    special_post_list.sort(key=lambda x: int(x[1]), reverse=True)\n    normal_post_list.sort(key=lambda x: int(x[1]), reverse=True)\n    for element in special_post_list:\n        print(element[2])\n    for element in normal_post_list:\n        print(element[2])\n(n, m) = map(int, input().split())\nspecial_friends = list(map(int, input().split()))\nnormal_post_list = []\nspecial_post_list = []\nfor i in range(m):\n    post_info = input().split()\n    if int(post_info[0]) in special_friends:\n        special_post_list.append(post_info)\n    else:\n        normal_post_list.append(post_info)\nsolver(normal_post_list, special_post_list)", "from collections import OrderedDict\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\ns = []\nfor i in range(m):\n    s.append(input())\nspecialDict = dict()\nnonSpecialDict = dict()\nfor item in s:\n    x = item.split()\n    if int(x[0]) in a:\n        specialDict[int(x[1])] = x[2]\n    else:\n        nonSpecialDict[int(x[1])] = x[2]\nsort_data_special = sorted(specialDict.items(), reverse=True)\nsort_data_nonspecial = sorted(nonSpecialDict.items(), reverse=True)\nfor i in sort_data_special:\n    print(i[1])\nfor i in sort_data_nonspecial:\n    print(i[1])", "from functools import cmp_to_key\n(n, m) = [int(x) for x in input().split()]\na = set([int(x) for x in input().split()])\nb = []\nfor i in range(m):\n    b.append([x for x in input().split()])\n    b[i][0] = int(b[i][0])\n    b[i][1] = int(b[i][1])\n\ndef comp(x, y):\n    if x[0] in a:\n        if y[0] in a:\n            return y[1] - x[1]\n        return -1\n    elif y[0] in a:\n        return 1\n    return y[1] - x[1]\nb.sort(key=cmp_to_key(comp))\nfor x in b:\n    print(x[2])", "from functools import cmp_to_key\n(n, m) = [int(x) for x in input().split()]\na = set([int(x) for x in input().split()])\nb = []\nfor i in range(m):\n    b.append([x for x in input().split()])\n    b[i][0] = int(b[i][0])\n    b[i][1] = int(b[i][1])\n\ndef comp(x, y):\n    if x[0] in a:\n        if y[0] in a:\n            return y[1] - x[1]\n        return -1\n    elif y[0] in a:\n        return 1\n    return y[1] - x[1]\nb.sort(key=cmp_to_key(comp))\nfor x in b:\n    print(x[2])", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nspecial = []\nnonSpecial = []\nfor i in range(m):\n    (iid, pop, post) = map(str, input().split())\n    iid = int(iid)\n    pop = int(pop)\n    if iid in a:\n        special.append([pop, post])\n    else:\n        nonSpecial.append([pop, post])\nspecial.sort(reverse=True)\nnonSpecial.sort(reverse=True)\nfor i in special:\n    print(i[1])\nfor i in nonSpecial:\n    print(i[1])", "(n, m) = map(int, input().split())\nsf = list(map(int, input().split()))\ndic = []\nfor i in range(m):\n    sl = input().split()\n    dic.append((int(sl[0]), int(sl[1]), sl[2]))\ndic.sort(key=lambda x: x[1], reverse=True)\nfor i in dic:\n    if i[0] in sf:\n        print(i[2])\nfor i in dic:\n    if i[0] not in sf:\n        print(i[2])", "import heapq\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\na = {e: True for e in a}\nspecial = []\nother = []\nfor i in range(m):\n    (f, p, s) = input().split()\n    if int(f) in a:\n        heapq.heappush(special, (-int(p), s))\n    else:\n        heapq.heappush(other, (-int(p), s))\nfor i in range(m):\n    if len(special) > 0:\n        (p, s) = heapq.heappop(special)\n    else:\n        (p, s) = heapq.heappop(other)\n    print(s)", "(n, m) = map(int, input().split())\nsf = list(map(int, input().split()))\ndic = []\nfor i in range(m):\n    sl = input().split()\n    dic.append((int(sl[0]), int(sl[1]), sl[2]))\ndic.sort(key=lambda x: x[1], reverse=True)\nfor i in dic:\n    if i[0] in sf:\n        print(i[2])\nfor i in dic:\n    if i[0] not in sf:\n        print(i[2])", "(n, m) = map(int, input().split())\nspl = list(map(int, input().split()))\nd = {k: True for k in spl}\nds = {}\ndn = {}\nfor _ in range(m):\n    l = input().split()\n    if int(l[0]) in d:\n        ds[int(l[1])] = l[2]\n    else:\n        dn[int(l[1])] = l[2]\nks = list(ds.keys())\nkn = list(dn.keys())\nks.sort()\nkn.sort()\nks.reverse()\nkn.reverse()\nfor k in ks:\n    print(ds[k])\nfor k in kn:\n    print(dn[k])", "(n, m) = [int(i) for i in input().split()]\narr = [int(i) for i in input().split()]\narr1 = []\narr2 = []\nfor i in range(m):\n    (f, p, s) = input().split()\n    f = int(f)\n    p = int(p)\n    if f in arr:\n        arr1.append((p, f, s))\n    else:\n        arr2.append((p, f, s))\narr1.sort(reverse=True)\narr2.sort(reverse=True)\nfor item in arr1:\n    print(item[2])\nfor item in arr2:\n    print(item[2])", "(n, m) = list(map(int, input().split()))\na = list(input().split())\nfriend_posts = []\nother_posts = []\nfor _ in range(m):\n    (f, p, s) = list(input().split())\n    if f in a:\n        friend_posts.append([p, s])\n    else:\n        other_posts.append([p, s])\nres = sorted(friend_posts, key=lambda x: int(x[0]), reverse=True) + sorted(other_posts, key=lambda y: int(y[0]), reverse=True)\nfor ele in res:\n    print(ele[1])", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nd1 = {}\nd2 = {}\nfor i in range(m):\n    (f, p, s) = input().split()\n    (f, p) = (int(f), int(p))\n    if f in a:\n        d1[p] = s\n    else:\n        d2[p] = s\nd1 = sorted(d1.items(), key=lambda kv: (kv[0], kv[1]), reverse=True)\nd2 = sorted(d2.items(), key=lambda kv: (kv[0], kv[1]), reverse=True)\nfor v in d1:\n    print(v[1])\nfor v in d2:\n    print(v[1])", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\ngg = {}\nfor i in a:\n    gg[i] = 0\nall = []\nfor i in range(m):\n    (f, p, s) = input().split()\n    f = int(f)\n    p = int(p)\n    all.append([f, p, s])\npopular = []\nother = []\nfor people in all:\n    if people[0] in gg:\n        popular.append(people)\n    else:\n        other.append(people)\npopular.sort(key=lambda x: x[1])\nother.sort(key=lambda x: x[1])\npopular = popular[::-1]\nother = other[::-1]\nfor i in popular:\n    print(i[2])\nfor i in other:\n    print(i[2])", "def takeSec(elem):\n    return int(elem[1])\n(n, m) = map(int, input().split())\na = input().split()\nap = []\nan = []\nfor _ in range(m):\n    x = input().split()\n    if x[0] in a:\n        ap.append(x)\n    else:\n        an.append(x)\nap.sort(key=takeSec, reverse=True)\nan.sort(key=takeSec, reverse=True)\nfor i in ap:\n    print(i[2])\nfor j in an:\n    print(j[2])", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\ngg = {}\nfor i in a:\n    gg[i] = 0\nall = []\nfor i in range(m):\n    (f, p, s) = input().split()\n    f = int(f)\n    p = int(p)\n    all.append([f, p, s])\npopular = []\nother = []\nfor people in all:\n    if people[0] in gg:\n        popular.append(people)\n    else:\n        other.append(people)\npopular.sort(key=lambda x: x[1])\nother.sort(key=lambda x: x[1])\npopular = popular[::-1]\nother = other[::-1]\nfor i in popular:\n    print(i[2])\nfor i in other:\n    print(i[2])", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nd1 = {}\nd2 = {}\nfor i in range(m):\n    (f, p, s) = input().split()\n    (f, p) = (int(f), int(p))\n    if f in a:\n        d1[p] = s\n    else:\n        d2[p] = s\nd1 = sorted(d1.items(), key=lambda kv: (kv[0], kv[1]), reverse=True)\nd2 = sorted(d2.items(), key=lambda kv: (kv[0], kv[1]), reverse=True)\nfor v in d1:\n    print(v[1])\nfor v in d2:\n    print(v[1])", "(n, m) = map(int, input().split())\nfriend = list(map(int, input().split()))\nd1 = {}\nd2 = {}\nfor i in range(m):\n    (f, p, s) = map(str, input().split())\n    if int(f) in friend:\n        d1[int(p)] = s\n    else:\n        d2[int(p)] = s\nd1 = sorted(d1.items(), key=lambda kv: (kv[0], kv[1]), reverse=True)\nd2 = sorted(d2.items(), key=lambda kv: (kv[0], kv[1]), reverse=True)\nfor v in d1:\n    print(v[1])\nfor v in d2:\n    print(v[1])", "from audioop import reverse\nimport sys\nimport collections\n(n, m) = map(int, input().split(' '))\nspecial_friend = set(map(int, input().split(' ')))\n(special_dict, common_dict) = ({}, {})\nfor i in range(m):\n    (f, p, s) = input().split(' ')\n    (f, p) = (int(f), int(p))\n    if f in special_friend:\n        special_dict[p] = s\n    else:\n        common_dict[p] = s\nspecial_dict = collections.OrderedDict(sorted(special_dict.items(), reverse=True))\ncommon_dict = collections.OrderedDict(sorted(common_dict.items(), reverse=True))\nfor message in special_dict.values():\n    print(message)\nfor message in common_dict.values():\n    print(message)", "(n, m) = list(map(int, input().split()))\nfr = input().split()\ndict1 = dict()\ndict2 = dict()\nfor _ in range(m):\n    (f, p, s) = input().split()\n    if f in fr:\n        dict1[int(p)] = s\n    else:\n        dict2[int(p)] = s\ndict1 = dict(sorted(dict1.items(), key=lambda x: x[0]))\ndict2 = dict(sorted(dict2.items(), key=lambda x: x[0]))\nprint(*list(dict1.values())[::-1], sep='\\n')\nprint(*list(dict2.values())[::-1], sep='\\n')", "(n, m) = list(map(int, input().split()))\nfr = input().split()\ndict1 = dict()\ndict2 = dict()\nfor _ in range(m):\n    (f, p, s) = input().split()\n    if f in fr:\n        dict1[int(p)] = s\n    else:\n        dict2[int(p)] = s\ndict1 = dict(sorted(dict1.items(), key=lambda x: x[0]))\ndict2 = dict(sorted(dict2.items(), key=lambda x: x[0]))\nprint(*list(dict1.values())[::-1], sep='\\n')\nprint(*list(dict2.values())[::-1], sep='\\n')", "import heapq\n(n, m) = list(map(int, input().split()))\nspecials = set(map(int, input().split()))\n(specPosts, normPosts) = ([], [])\nfor i in range(m):\n    (f, p, s) = input().split()\n    if int(f) in specials:\n        heapq.heappush(specPosts, (-int(p), s))\n    else:\n        heapq.heappush(normPosts, (-int(p), s))\nwhile len(specPosts) != 0:\n    (k, content) = heapq.heappop(specPosts)\n    print(content)\nwhile len(normPosts) != 0:\n    (k, content) = heapq.heappop(normPosts)\n    print(content)", "(n, m) = map(int, input().split())\nan = [int(item) for item in input().split()]\npost = [[item for item in input().split()] for j in range(m)]\npost.sort(key=lambda x: int(x[1]))\nfeed = []\nfor i in range(m - 1, -1, -1):\n    for j in range(n):\n        if str(an[j]) == post[i][0]:\n            post[i][1] = -1\n            feed.append(post[i][2])\nfor i in range(m - 1, -1, -1):\n    if post[i][1] != -1:\n        feed.append(post[i][2])\nfor i in range(m):\n    print(feed.pop(0))", "(n, m) = map(int, input().split())\na = set(list(map(int, input().split())))\narr = []\nfor i in range(m):\n    z = list(input().split())\n    f = int(z[0])\n    p = int(z[1])\n    s = z[2]\n    arr.append([f, p, s])\narr = sorted(arr, key=lambda x: x[1], reverse=True)\nfor (f, p, s) in arr:\n    if f in a:\n        print(s)\nfor (f, p, s) in arr:\n    if f not in a:\n        print(s)", "(n, m) = map(int, input().split())\na = set(list(map(int, input().split())))\narr = []\nfor i in range(m):\n    z = list(input().split())\n    f = int(z[0])\n    p = int(z[1])\n    s = z[2]\n    arr.append([f, p, s])\narr = sorted(arr, key=lambda x: x[1], reverse=True)\nfor (f, p, s) in arr:\n    if f in a:\n        print(s)\nfor (f, p, s) in arr:\n    if f not in a:\n        print(s)", "def func(x):\n    return x[1]\n(n, m) = map(int, input().split())\nsfrnd = list(map(int, input().split()))\n(sfrnd_post, frnd_post) = ([], [])\nfor i in range(m):\n    pst = list(input().split())\n    (pst[0], pst[1]) = (int(pst[0]), int(pst[1]))\n    if pst[0] in sfrnd:\n        sfrnd_post.append(pst)\n    else:\n        frnd_post.append(pst)\nsfrnd_post = sorted(sfrnd_post, key=func, reverse=True)\nfrnd_post = sorted(frnd_post, key=func, reverse=True)\nfor x in sfrnd_post:\n    print(x[2])\nfor x in frnd_post:\n    print(x[2])", "def func(x):\n    return x[1]\n(n, m) = map(int, input().split())\nsfrnd = list(map(int, input().split()))\n(sfrnd_post, frnd_post) = ([], [])\nfor i in range(m):\n    pst = list(input().split())\n    (pst[0], pst[1]) = (int(pst[0]), int(pst[1]))\n    if pst[0] in sfrnd:\n        sfrnd_post.append(pst)\n    else:\n        frnd_post.append(pst)\nsfrnd_post = sorted(sfrnd_post, key=func, reverse=True)\nfrnd_post = sorted(frnd_post, key=func, reverse=True)\nfor x in sfrnd_post:\n    print(x[2])\nfor x in frnd_post:\n    print(x[2])", "(n, m) = map(int, input().split())\nspf = list(map(int, input().split(' ')))\ndict = {}\nfor i in range(m):\n    (f, p, s) = input().split(' ')\n    dict[int(f), int(p)] = s\nli = []\nli2 = []\nfor i in spf:\n    for j in dict:\n        if j[0] == i:\n            li2.append((j[1], j[0]))\nli2.sort(reverse=True)\nfor k in li2:\n    print(dict[k[1], k[0]])\n    dict.pop((k[1], k[0]))\nfor j in dict:\n    if dict[j] == None:\n        continue\n    else:\n        li.append((j[1], j[0]))\nli.sort(reverse=True)\nfor k in li:\n    print(dict[k[1], k[0]])", "(n, m) = map(int, input().split())\nspf = list(map(int, input().split(' ')))\ndict = {}\nfor i in range(m):\n    (f, p, s) = input().split(' ')\n    dict[int(f), int(p)] = s\nli = []\nli2 = []\nfor i in spf:\n    for j in dict:\n        if j[0] == i:\n            li2.append((j[1], j[0]))\nli2.sort(reverse=True)\nfor k in li2:\n    print(dict[k[1], k[0]])\n    dict.pop((k[1], k[0]))\nfor j in dict:\n    if dict[j] == None:\n        continue\n    else:\n        li.append((j[1], j[0]))\nli.sort(reverse=True)\nfor k in li:\n    print(dict[k[1], k[0]])", "(n, m) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nspecial = []\nother = []\nfor i in range(m):\n    (f, p, s) = [x for x in input().split()]\n    if int(f) in a:\n        special.append([int(p), s])\n    else:\n        other.append([int(p), s])\nspecial.sort()\nother.sort()\nfor i in range(len(special)):\n    print(special[len(special) - 1 - i][1])\nfor i in range(len(other)):\n    print(other[len(other) - 1 - i][1])", "(n, m) = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\nspecial = {}\nsparr = []\nother = {}\notarr = []\nfor i in range(m):\n    (f, p, s) = input().split()\n    f = int(f)\n    p = int(p)\n    if f in arr:\n        special[p] = s\n        sparr.append(p)\n    else:\n        other[p] = s\n        otarr.append(p)\notarr.sort(reverse=True)\nsparr.sort(reverse=True)\nfor i in sparr:\n    print(special[i])\nfor i in otarr:\n    print(other[i])", "(n, m) = map(int, input().split())\nN = list(map(int, input().split()))\nfriend = []\npopularity = []\nwhile m > 0:\n    l1 = input().split()\n    f = int(l1[0])\n    p = int(l1[1])\n    msg = l1[2]\n    if f in N:\n        friend.append([p, msg])\n    else:\n        popularity.append([p, msg])\n    m -= 1\nfriend.sort(reverse=True)\npopularity.sort(reverse=True)\nfor i in friend:\n    print(i[1])\nfor i in popularity:\n    print(i[1])", "(n, m) = map(int, input().split())\narr_n = list(map(int, input().split()))\nlst_popu = []\nlst_non_popu = []\ndct = {}\ndct_non = {}\nwhile m > 0:\n    lst = input().split()\n    iden = int(lst[0])\n    popu = int(lst[1])\n    string = lst[2]\n    if iden in arr_n:\n        dct[popu] = string\n        lst_popu.append(popu)\n    else:\n        dct_non[popu] = string\n        lst_non_popu.append(popu)\n    m -= 1\nlst_popu.sort(reverse=True)\nlst_non_popu.sort(reverse=True)\nfor i in range(len(lst_popu)):\n    print(dct[lst_popu[i]])\nfor i in range(len(lst_non_popu)):\n    print(dct_non[lst_non_popu[i]])", "(n, m) = map(int, input().split())\nnli = list(map(int, input().split()))\nfdict = dict()\nodict = dict()\nfor _ in range(m):\n    (f, p, s) = map(str, input().split())\n    if int(f) in nli:\n        fdict[int(p)] = s\n    else:\n        odict[int(p)] = s\nresf = {val[0]: val[1] for val in sorted(fdict.items(), key=lambda x: (-x[0], x[1]))}\nreso = {val[0]: val[1] for val in sorted(odict.items(), key=lambda x: (-x[0], x[1]))}\nfor key in resf.values():\n    print(key)\nfor key in reso.values():\n    print(key)", "(n, m) = map(int, input().split())\nnli = list(map(int, input().split()))\nfdict = dict()\nodict = dict()\nfor _ in range(m):\n    (f, p, s) = map(str, input().split())\n    if int(f) in nli:\n        fdict[int(p)] = s\n    else:\n        odict[int(p)] = s\nresf = {val[0]: val[1] for val in sorted(fdict.items(), key=lambda x: (-x[0], x[1]))}\nreso = {val[0]: val[1] for val in sorted(odict.items(), key=lambda x: (-x[0], x[1]))}\nfor key in resf.values():\n    print(key)\nfor key in reso.values():\n    print(key)", "(N, M) = map(int, input().split())\narr = list(map(int, input().split()))\narr.sort(reverse=True)\nnew = []\nfor i in range(M):\n    (f, p, s) = map(str, input().split())\n    new.append([int(p), int(f), s])\nk = sorted(new, reverse=True)\nnewest = []\nfor (p, f, s) in k:\n    if f in arr:\n        print(s)\nfor (p, f, s) in k:\n    if f not in arr:\n        print(s)", "for _ in range(1):\n    (N, M) = list(map(int, input().split()))\n    s_friends = set(map(str, input().split()))\n    s_post = []\n    n_post = []\n    for i in range(M):\n        (f, p, s) = list(map(str, input().split()))\n        if f in s_friends:\n            s_post.append([int(p), s])\n        else:\n            n_post.append([int(p), s])\n    s_post.sort(reverse=True)\n    n_post.sort(reverse=True)\n    for ele in s_post:\n        print(ele[1])\n    for ele in n_post:\n        print(ele[1])", "from collections import defaultdict\n(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\ndic = defaultdict(list)\nfor _ in range(m):\n    (f, p, t) = map(str, input().split())\n    dic[int(f)].append((int(p), t))\npriority = []\nfor x in l:\n    priority += dic[x]\n    del dic[x]\npriority.sort(reverse=True)\nrest = []\nfor x in dic:\n    rest += dic[x]\nrest.sort(reverse=True)\nans = []\nfor (x, y) in priority:\n    ans.append(y)\nfor (x, y) in rest:\n    ans.append(y)\nfor x in ans:\n    print(x)", "try:\n    (n, m) = map(int, input().split())\n    id = list(map(int, input().split()))\n    a = []\n    res = []\n    temp = []\n    for _ in range(m):\n        (s, p, f) = input().split()\n        a.append([int(p), int(s), f])\n    a.sort(reverse=True)\n    for i in range(m):\n        if a[i][1] in id:\n            res.append(a[i][2])\n        else:\n            temp.append(a[i])\n    for val in temp:\n        res.append(val[2])\n    for v in res:\n        print(v)\nexcept:\n    pass", "def sk(pst):\n    return pst[1]\n(n, m) = map(int, input().split())\nsf = list(map(int, input().split()))\npsl = []\nspsl = []\nfor i in range(m):\n    (f, p, s) = map(str, input().split())\n    (f, p) = (int(f), int(p))\n    l = [f, p, s]\n    if sf.count(f):\n        spsl.append(l)\n    else:\n        psl.append(l)\nspsl.sort(reverse=True, key=sk)\npsl.sort(reverse=True, key=sk)\nfor i in range(len(spsl)):\n    print(spsl[i][2])\nfor i in range(len(psl)):\n    print(psl[i][2])", "(n, m) = map(int, input().split())\nsf = list(map(int, input().split()))\n(F, P, S) = ([], [], [])\n(SF, SP, SS) = ([], [], [])\nfor i in range(m):\n    (f, p, s) = map(str, input().split())\n    if int(f) in sf:\n        SF.append(f)\n        SP.append(int(p))\n        SS.append(s)\n    else:\n        F.append(f)\n        P.append(int(p))\n        S.append(s)\nSP_sorted = sorted(SP, reverse=True)\nspecial_list = []\nfor i in range(len(SP)):\n    ind = SP.index(SP_sorted[i])\n    special_list.append(SS[ind])\nnormal_list = []\nP_sorted = sorted(P, reverse=True)\nfor i in range(len(P)):\n    ind = P.index(P_sorted[i])\n    normal_list.append(S[ind])\nans = special_list + normal_list\nfor i in ans:\n    print(i)", "(n, m) = map(int, input().split())\nsf = list(map(int, input().split()))\n(F, P, S) = ([], [], [])\n(SF, SP, SS) = ([], [], [])\nfor i in range(m):\n    (f, p, s) = map(str, input().split())\n    if int(f) in sf:\n        SF.append(f)\n        SP.append(int(p))\n        SS.append(s)\n    else:\n        F.append(f)\n        P.append(int(p))\n        S.append(s)\nSP_sorted = sorted(SP, reverse=True)\nspecial_list = []\nfor i in range(len(SP)):\n    ind = SP.index(SP_sorted[i])\n    special_list.append(SS[ind])\nnormal_list = []\nP_sorted = sorted(P, reverse=True)\nfor i in range(len(P)):\n    ind = P.index(P_sorted[i])\n    normal_list.append(S[ind])\nans = special_list + normal_list\nfor i in ans:\n    print(i)", "(n_fav, n_post) = input().split(' ')\nn_fav = int(n_fav)\nn_post = int(n_post)\nfav_posts = []\nposts = []\nfav_friends = input().split(' ')\nfor i in range(n_post):\n    c = input()\n    (f, p, s) = c.split(' ')\n    f = int(f)\n    p = int(p)\n    if str(f) in fav_friends:\n        fav_posts.append({'friend': f, 'popularity': p, 'content': s})\n    else:\n        posts.append({'friend': f, 'popularity': p, 'content': s})\nfor i in sorted(fav_posts, key=lambda x: x['popularity'], reverse=True):\n    print(i['content'])\nfor i in sorted(posts, key=lambda x: x['popularity'], reverse=True):\n    print(i['content'])", "(n, m) = map(int, input().split())\nsp = set(input().split())\nposts = []\nfor x in range(m):\n    posts.append(input().split())\nposts.sort(key=lambda x: int(x[1]), reverse=True)\nfor p in posts:\n    if p[0] in sp:\n        print(p[2])\nfor p in posts:\n    if p[0] not in sp:\n        print(p[2])", "(n, m) = map(int, input().split())\nc = set(list(map(int, input().split())))\nl = []\nfor _ in range(m):\n    (f, p, t) = input().split()\n    l.append([int(f), int(p), t])\nl = sorted(l, key=lambda x: x[1], reverse=True)\nfor x in l:\n    if x[0] in c:\n        print(x[2])\nfor x in l:\n    if x[0] not in c:\n        print(x[2])", "(n, m) = list(map(int, input().split()))\nsFId = list(map(int, input().split()))\nspecialPosts = []\nnormalPosts = []\ni = 0\nwhile i < m:\n    tempPost = list(input().split())\n    tempPost[0] = int(tempPost[0])\n    tempPost[1] = int(tempPost[1])\n    if tempPost[0] in sFId:\n        specialPosts.append(tempPost)\n    else:\n        normalPosts.append(tempPost)\n    i += 1\nspecialPosts.sort(reverse=True, key=lambda item: item[1])\nnormalPosts.sort(reverse=True, key=lambda item: item[1])\nfor post in specialPosts:\n    print(post[2])\nfor post in normalPosts:\n    print(post[2])", "l = []\nl1 = []\nl2 = []\n(n, m) = input().split(' ')\nn = int(n)\nm = int(m)\nl = list(map(int, input().split(' ')))\ncount = 0\ncount1 = 0\nfor i in range(m):\n    (f, p, s) = input().split(' ')\n    f = int(f)\n    p = int(p)\n    if f in l:\n        l1.append([p, s])\n    else:\n        l2.append([p, s])\n\ndef keys(it):\n    return it[0]\nl1.sort(key=keys, reverse=True)\nl2.sort(key=keys, reverse=True)\nfor i in l1:\n    print(i[1])\nfor i in l2:\n    print(i[1])", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef main():\n    (n, m) = sm()\n    friends = ln()\n    posts = []\n    friends_post = []\n    for i in range(m):\n        (f, p, c) = ssm()\n        f = int(f)\n        p = int(p)\n        if f in friends:\n            friends_post.append([f, p, c])\n        else:\n            posts.append([f, p, c])\n    friends_post.sort(key=lambda x: x[1], reverse=True)\n    posts.sort(key=lambda x: x[1], reverse=True)\n    for c in friends_post:\n        print(c[-1])\n    for c in posts:\n        print(c[-1])\nmain()", "l = []\nl1 = []\nl2 = []\n(n, m) = input().split(' ')\nn = int(n)\nm = int(m)\nl = list(map(int, input().split(' ')))\ncount = 0\ncount1 = 0\nfor i in range(m):\n    (f, p, s) = input().split(' ')\n    f = int(f)\n    p = int(p)\n    if f in l:\n        l1.append([p, s])\n    else:\n        l2.append([p, s])\n\ndef keys(it):\n    return it[0]\nl1.sort(key=keys, reverse=True)\nl2.sort(key=keys, reverse=True)\nfor i in l1:\n    print(i[1])\nfor i in l2:\n    print(i[1])", "l = []\nl1 = []\nl2 = []\n(n, m) = input().split(' ')\nn = int(n)\nm = int(m)\nl = list(map(int, input().split(' ')))\ncount = 0\ncount1 = 0\nfor i in range(m):\n    (f, p, s) = input().split(' ')\n    f = int(f)\n    p = int(p)\n    if f in l:\n        l1.append([p, s])\n    else:\n        l2.append([p, s])\n\ndef keys(it):\n    return it[0]\nl1.sort(key=keys, reverse=True)\nl2.sort(key=keys, reverse=True)\nfor i in l1:\n    print(i[1])\nfor i in l2:\n    print(i[1])", "l = []\nl1 = []\nl2 = []\n(n, m) = input().split(' ')\nn = int(n)\nm = int(m)\nl = list(map(int, input().split(' ')))\ncount = 0\ncount1 = 0\nfor i in range(m):\n    (f, p, s) = input().split(' ')\n    f = int(f)\n    p = int(p)\n    if f in l:\n        l1.append([p, s])\n    else:\n        l2.append([p, s])\n\ndef keys(it):\n    return it[0]\nl1.sort(key=keys, reverse=True)\nl2.sort(key=keys, reverse=True)\nfor i in l1:\n    print(i[1])\nfor i in l2:\n    print(i[1])", "l = []\nl1 = []\nl2 = []\n(n, m) = input().split(' ')\nn = int(n)\nm = int(m)\nl = list(map(int, input().split(' ')))\ncount = 0\ncount1 = 0\nfor i in range(m):\n    (f, p, s) = input().split(' ')\n    f = int(f)\n    p = int(p)\n    if f in l:\n        l1.append([p, s])\n    else:\n        l2.append([p, s])\n\ndef keys(it):\n    return it[0]\nl1.sort(key=keys, reverse=True)\nl2.sort(key=keys, reverse=True)\nfor i in l1:\n    print(i[1])\nfor i in l2:\n    print(i[1])", "l = []\nl1 = []\nl2 = []\n(n, m) = input().split(' ')\nn = int(n)\nm = int(m)\nl = list(map(int, input().split(' ')))\ncount = 0\ncount1 = 0\nfor i in range(m):\n    (f, p, s) = input().split(' ')\n    f = int(f)\n    p = int(p)\n    if f in l:\n        l1.append([p, s])\n    else:\n        l2.append([p, s])\n\ndef keys(it):\n    return it[0]\nl1.sort(key=keys, reverse=True)\nl2.sort(key=keys, reverse=True)\nfor i in l1:\n    print(i[1])\nfor i in l2:\n    print(i[1])", "l = []\nl1 = []\nl2 = []\n(n, m) = input().split(' ')\nn = int(n)\nm = int(m)\nl = list(map(int, input().split(' ')))\ncount = 0\ncount1 = 0\nfor i in range(m):\n    (f, p, s) = input().split(' ')\n    f = int(f)\n    p = int(p)\n    if f in l:\n        l1.append([p, s])\n    else:\n        l2.append([p, s])\n\ndef keys(it):\n    return it[0]\nl1.sort(key=keys, reverse=True)\nl2.sort(key=keys, reverse=True)\nfor i in l1:\n    print(i[1])\nfor i in l2:\n    print(i[1])", "l = []\nl1 = []\nl2 = []\n(n, m) = input().split(' ')\nn = int(n)\nm = int(m)\nl = list(map(int, input().split(' ')))\ncount = 0\ncount1 = 0\nfor i in range(m):\n    (f, p, s) = input().split(' ')\n    f = int(f)\n    p = int(p)\n    if f in l:\n        l1.append([p, s])\n    else:\n        l2.append([p, s])\n\ndef keys(it):\n    return it[0]\nl1.sort(key=keys, reverse=True)\nl2.sort(key=keys, reverse=True)\nfor i in l1:\n    print(i[1])\nfor i in l2:\n    print(i[1])", "(n, m) = list(map(int, input().split()))\nl = list(map(int, input().split()))\nlist1 = []\n\ndef sorting(a):\n    return a[1]\nfor i in range(m):\n    (f, p, s) = list(map(str, input().split()))\n    list1.append([int(f), int(p), s])\nlist1.sort(reverse=True, key=sorting)\nspecial = []\nfor i in list1:\n    if i[0] in l:\n        print(i[2])\n    else:\n        special.append(i[2])\nfor i in special:\n    print(i)", "(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\nt = []\nfor _ in range(m):\n    (f, p, s) = map(str, input().split())\n    t.append([int(f), int(p), s])\nt.sort(reverse=True, key=lambda x: x[1])\nspecial = []\nfor i in t:\n    if i[0] in l:\n        print(i[2])\n    else:\n        special.append(i)\nfor i in special:\n    print(i[2])", "l = []\nl1 = []\nl2 = []\n(n, m) = input().split(' ')\nn = int(n)\nm = int(m)\nl = list(map(int, input().split(' ')))\ncount = 0\ncount1 = 0\nfor i in range(m):\n    (f, p, s) = input().split(' ')\n    f = int(f)\n    p = int(p)\n    if f in l:\n        l1.append([p, s])\n    else:\n        l2.append([p, s])\n\ndef keys(it):\n    return it[0]\nl1.sort(key=keys, reverse=True)\nl2.sort(key=keys, reverse=True)\nfor i in l1:\n    print(i[1])\nfor i in l2:\n    print(i[1])", "l = []\nl1 = []\nl2 = []\n(n, m) = input().split(' ')\nn = int(n)\nm = int(m)\nl = list(map(int, input().split(' ')))\ncount = 0\ncount1 = 0\nfor i in range(m):\n    (f, p, s) = input().split(' ')\n    f = int(f)\n    p = int(p)\n    if f in l:\n        l1.append([p, s])\n    else:\n        l2.append([p, s])\n\ndef keys(it):\n    return it[0]\nl1.sort(key=keys, reverse=True)\nl2.sort(key=keys, reverse=True)\nfor i in l1:\n    print(i[1])\nfor i in l2:\n    print(i[1])", "l = []\nl1 = []\nl2 = []\n(n, m) = input().split(' ')\nn = int(n)\nm = int(m)\nl = list(map(int, input().split(' ')))\ncount = 0\ncount1 = 0\nfor i in range(m):\n    (f, p, s) = input().split(' ')\n    f = int(f)\n    p = int(p)\n    if f in l:\n        l1.append([p, s])\n    else:\n        l2.append([p, s])\n\ndef keys(it):\n    return it[0]\nl1.sort(key=keys, reverse=True)\nl2.sort(key=keys, reverse=True)\nfor i in l1:\n    print(i[1])\nfor i in l2:\n    print(i[1])", "l = []\nl1 = []\nl2 = []\n(n, m) = input().split(' ')\nn = int(n)\nm = int(m)\nl = list(map(int, input().split(' ')))\ncount = 0\ncount1 = 0\nfor i in range(m):\n    (f, p, s) = input().split(' ')\n    f = int(f)\n    p = int(p)\n    if f in l:\n        l1.append([p, s])\n    else:\n        l2.append([p, s])\n\ndef keys(it):\n    return it[0]\nl1.sort(key=keys, reverse=True)\nl2.sort(key=keys, reverse=True)\nfor i in l1:\n    print(i[1])\nfor i in l2:\n    print(i[1])", "(N, M) = map(int, input().split())\nspecial_friend = list(map(int, input().strip().split()))[:N]\nL = []\nfor i in range(M):\n    (f, p, s) = map(str, input().split())\n    f = int(f)\n    p = int(p)\n    L.append([f, p, s])\nL.sort(key=lambda x: x[1], reverse=True)\nfor (f, p, s) in L:\n    if f in special_friend:\n        print(s)\nfor (f, p, s) in L:\n    if f not in special_friend:\n        print(s)", "(N, M) = map(int, input().split())\nspecial_friend = list(map(int, input().strip().split()))[:N]\nL = []\nfor i in range(M):\n    (f, p, s) = map(str, input().split())\n    f = int(f)\n    p = int(p)\n    L.append([f, p, s])\nL.sort(key=lambda x: x[1], reverse=True)\nfor (f, p, s) in L:\n    if f in special_friend:\n        print(s)\nfor (f, p, s) in L:\n    if f not in special_friend:\n        print(s)", "(N, M) = map(int, input().split())\nspecial_friend = list(map(int, input().strip().split()))[:N]\nL = []\nfor i in range(M):\n    (f, p, s) = map(str, input().split())\n    f = int(f)\n    p = int(p)\n    L.append([f, p, s])\nL.sort(key=lambda x: x[1], reverse=True)\nfor (f, p, s) in L:\n    if f in special_friend:\n        print(s)\nfor (f, p, s) in L:\n    if f not in special_friend:\n        print(s)", "(n, m) = map(int, input().split())\nspl = list(map(int, input().split()))\npopa = []\nfor _ in range(m):\n    (f, p, s) = map(str, input().split())\n    f = int(f)\n    p = int(p)\n    popa.append([f, p, s])\npopa = sorted(popa, key=lambda x: x[1], reverse=True)\nfor (f, p, s) in popa:\n    if f in spl:\n        print(s)\nfor (f, p, s) in popa:\n    if f not in spl:\n        print(s)", "(n, m) = map(int, input().split())\nspl = list(map(int, input().split()))\npopa = []\nfor _ in range(m):\n    (f, p, s) = map(str, input().split())\n    f = int(f)\n    p = int(p)\n    popa.append([f, p, s])\npopa = sorted(popa, key=lambda x: x[1], reverse=True)\nfor (f, p, s) in popa:\n    if f in spl:\n        print(s)\nfor (f, p, s) in popa:\n    if f not in spl:\n        print(s)", "(sf, posts) = input().split()\nsf = int(sf)\nposts = int(posts)\nsf_identifiers = list(map(int, input().split()))\nspecial_posts = {}\nnormal_posts = {}\nfor i in range(posts):\n    (f, p, s) = input().split()\n    if int(f) in sf_identifiers:\n        special_posts[int(p)] = s\n    else:\n        normal_posts[int(p)] = s\nfor values in sorted(special_posts.keys())[::-1]:\n    print(special_posts[values])\nfor vals in sorted(normal_posts.keys())[::-1]:\n    print(normal_posts[vals])", "(n, m) = map(int, input().split())\nsparr = set(list(map(int, input().split())))\nparr = []\nfor _ in range(m):\n    (f, p, s) = map(str, input().split())\n    f = int(f)\n    p = int(p)\n    parr.append([f, p, s])\nparr = sorted(parr, key=lambda x: x[1], reverse=True)\nfor (f, p, s) in parr:\n    if f in sparr:\n        print(s)\nfor (f, p, s) in parr:\n    if f not in sparr:\n        print(s)", "(nf, np) = map(int, input().split())\nf_list = set(list(map(int, input().split())))\nd_list = []\nfor i in range(np):\n    (f, p, s) = map(str, input().split())\n    f = int(f)\n    p = int(p)\n    d_list.append([f, p, s])\nd_list = sorted(d_list, key=lambda x: x[1], reverse=True)\nfor (f, p, s) in d_list:\n    if f in f_list:\n        print(s)\nfor (f, p, s) in d_list:\n    if f not in f_list:\n        print(s)", "try:\n    (n, m) = map(int, input().split())\n    id = list(map(int, input().split()))\n    a = []\n    res = []\n    temp = []\n    for _ in range(m):\n        (s, p, f) = input().split()\n        a.append([int(p), int(s), f])\n    a.sort(reverse=True)\n    for i in range(m):\n        if a[i][1] in id:\n            res.append(a[i][2])\n        else:\n            temp.append(a[i])\n    for val in temp:\n        res.append(val[2])\n    for v in res:\n        print(v)\nexcept:\n    pass", "(n, m) = [int(i) for i in input().split()]\nc = [int(i) for i in input().split()]\na = []\nfor i in range(m):\n    (f, p, s) = input().split()\n    f = int(f)\n    p = int(p)\n    a.append([f, p, s])\na = sorted(a, key=lambda x: x[1], reverse=True)\nfor (f, p, s) in a:\n    if f in c:\n        print(s)\nfor (f, p, s) in a:\n    if f not in c:\n        print(s)"]