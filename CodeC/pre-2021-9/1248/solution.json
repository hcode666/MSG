["mod = 1000000007\n\ndef minv(a):\n    return pow(a, mod - 2, mod)\n\ndef ans(n, k):\n    if k == 1:\n        return 0\n    m = (6 * n - 3) * k * k * k\n    m += (6 * n - 12) * k * k\n    m += (-6 * n - 15) * k\n    m += -6 * n - 6\n    m = m * pow(k, 2 * n + 2, mod)\n    s = pow(k, 4) * (4 - 3 * n * n)\n    s += k * k * k * (12 + 6 * n)\n    s += k * k * (6 * n * n + 6 * n + 10)\n    s += k * (-6 * n)\n    s += -3 * n * n - 6 * n - 2\n    s = s * pow(k, n + 1, mod)\n    p = -1 * pow(k, 5) + 5 * pow(k, 3) + 6 * pow(k, 2) + 2 * k\n    l = (m + s + p) % mod\n    r = minv((k - 1) * (k - 1) * (k - 1) * (k + 1) * (k + 1))\n    l = l * r % mod\n    totr = (pow(k, n + 1, mod) - k) * minv(k - 1) % mod\n    tot = pow(totr, 3, mod)\n    return (tot - l) % mod\nt = eval(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    print(ans(n, k))\n    t -= 1", "mod = 1000000007\n\ndef minv(a):\n    return pow(a, mod - 2, mod)\n\ndef ans(n, k):\n    if k == 1:\n        return 0\n    m = (6 * n - 3) * k * k * k\n    m += (6 * n - 12) * k * k\n    m += (-6 * n - 15) * k\n    m += -6 * n - 6\n    m = m * pow(k, 2 * n + 2, mod)\n    s = pow(k, 4) * (4 - 3 * n * n)\n    s += k * k * k * (12 + 6 * n)\n    s += k * k * (6 * n * n + 6 * n + 10)\n    s += k * (-6 * n)\n    s += -3 * n * n - 6 * n - 2\n    s = s * pow(k, n + 1, mod)\n    p = -1 * pow(k, 5) + 5 * pow(k, 3) + 6 * pow(k, 2) + 2 * k\n    l = (m + s + p) % mod\n    r = minv((k - 1) * (k - 1) * (k - 1) * (k + 1) * (k + 1))\n    l = l * r % mod\n    totr = (pow(k, n + 1, mod) - k) * minv(k - 1) % mod\n    tot = pow(totr, 3, mod)\n    return (tot - l) % mod\nt = eval(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    print(ans(n, k))\n    t -= 1", "from itertools import *\nMOD = 10 ** 9 + 7\n\ndef isPrefix(a, b):\n    if len(a) > len(b):\n        return False\n    if a == b[:len(a)]:\n        return True\n    return False\n\ndef bruteforce(N, K):\n    S = []\n    for i in range(1, N + 1):\n        for p in product(range(K), repeat=i):\n            s = ''.join((chr(j + ord('a')) for j in p))\n            S.append(s)\n    ans = 0\n    for a in S:\n        for b in S:\n            if isPrefix(a, b) or isPrefix(b, a):\n                continue\n            for c in S:\n                if isPrefix(a, c) or isPrefix(c, a):\n                    continue\n                if isPrefix(b, c) or isPrefix(c, b):\n                    continue\n                print(a, b, c)\n                ans += 1\n    print(ans)\n    return ans\n\ndef countPrefixesFor2(n, k):\n    modinv = pow(k - 1, MOD - 2, MOD)\n    tmp1 = modinv * k * (pow(k, n, MOD) + MOD - 1)\n    tmp2 = modinv * n * (pow(k, n + 1, MOD) + MOD - 1)\n    tmp3 = (modinv * (pow(k, n + 2, MOD) + MOD - 1) + MOD - (n + 1 + k) % MOD) * modinv\n    tmp2 = tmp2 + MOD - tmp3\n    return (tmp1 + 2 * tmp2) % MOD\n\ndef countPrefixesFor3(n, k):\n    modinv = pow(k - 1, MOD - 2, MOD)\n    ans = k * (pow(k, n, MOD) + MOD - 1) * modinv\n    tmp01 = n * (pow(k, n + 1, MOD) + MOD - 1) * modinv\n    tmp02 = modinv * ((pow(k, n + 2, MOD) + MOD - 1) * modinv + (2 * MOD - n - 1 - k))\n    tmp02 %= MOD\n    tmp0 = tmp01 + (MOD - tmp02)\n    ans = (ans + 3 * tmp0) % MOD\n    tmp1 = modinv * (pow(k, 2 * n, MOD) + MOD - pow(k, n + 1, MOD))\n    tmp2 = MOD - 2 * (n - 1) * pow(k, n, MOD) % MOD\n    tmp3 = k * (pow(k, n - 1, MOD) + MOD - 1) * modinv\n    tmp4 = (tmp1 + tmp2 + tmp3) * k * k * modinv * modinv\n    ans += 3 * tmp4\n    ans %= MOD\n    return ans\n\ndef bruteforce2(N, K):\n    S = []\n    for i in range(1, N + 1):\n        for p in product(range(K), repeat=i):\n            s = ''.join((chr(j + ord('a')) for j in p))\n            S.append(s)\n    ans = 0\n    for a in S:\n        for b in S:\n            if isPrefix(a, b) or isPrefix(b, a):\n                ans += 1\n    print(ans, countPrefixesFor2(N, K))\n\ndef computeAns2(n, k):\n    ans2 = 0\n    for i in range(3, n + 1):\n        tmp = (i - 2) * (i - 1) // 2 * k ** i\n        ans2 += tmp\n    return 6 * ans2\ndp_fastAns2 = [[]]\n\ndef computeFastAns2():\n    for k in range(1, 26 + 1):\n        row = [0, 0, 0]\n        tmp = k ** 2\n        for n in range(3, 10 ** 5 + 1):\n            tmp = tmp * k % MOD\n            tmp2 = (n - 2) * (n - 1) // 2\n            row.append((row[-1] + tmp * tmp2) % MOD)\n        dp_fastAns2.append(row)\n\ndef computeAns2Fastest(n, k):\n    modinv = pow(2, MOD - 2, MOD)\n    tmp0 = modinv * zz(n, k)\n    tmp1 = MOD - 3 * modinv * y(n, k) % MOD\n    inv2 = pow(k - 1, MOD - 2, MOD)\n    tmp3 = k * inv2 * (pow(k, n, MOD) + MOD - 1)\n    return (tmp0 + tmp1 + tmp3) % MOD\n\ndef y(n, k):\n    modinv = pow(k - 1, MOD - 2, MOD)\n    ans = modinv ** 2 * k\n    tmp = ((k - 1) * n + MOD - 1) * pow(k, n, MOD) + 1\n    ans = ans * tmp % MOD\n    return ans\n    ans = 0\n    for i in range(1, n + 1):\n        ans += i * k ** i\n    return ans\n\ndef z(n, k):\n    ans = 0\n    for i in range(1, n + 1):\n        ans += i ** 2 * k ** i\n    return ans / k\n\ndef zz(n, k):\n    modinv = pow(k - 1, MOD - 2, MOD)\n    ans = k * pow(modinv, 3, MOD)\n    tmp1 = n ** 2 * pow(k, n + 2, MOD)\n    tmp2 = MOD - (2 * n * (n + 1) - 1) * pow(k, n + 1, MOD) % MOD\n    tmp3 = (n + 1) ** 2 * pow(k, n, MOD) + (MOD - k - 1)\n    ans *= (tmp1 + tmp2 + tmp3) % MOD\n    ans %= MOD\n    return ans\n    tmp = k * (n ** 2 * k ** (n + 2) - (2 * n * (n + 1) - 1) * k ** (n + 1) + (n + 1) ** 2 * k ** n - k - 1) // (k - 1) ** 3\n    return tmp % MOD\n\ndef bruteforce3(n, k):\n    S = []\n    for i in range(1, n + 1):\n        for p in product(range(k), repeat=i):\n            s = ''.join((chr(j + ord('a')) for j in p))\n            S.append(s)\n    ans = 0\n    ans2 = 0\n    ans3 = 0\n    for a in S:\n        for b in S:\n            for c in S:\n                tmp = 0\n                if isPrefix(a, b) or isPrefix(b, a):\n                    tmp += 1\n                if isPrefix(a, c) or isPrefix(c, a):\n                    tmp += 1\n                if isPrefix(b, c) or isPrefix(c, b):\n                    tmp += 1\n                if tmp == 3:\n                    if a == b and a == c and (b == c):\n                        ans3 += 1\n                    elif a == b and a != c or (a == c and a != b) or (b == c and b != a):\n                        ans3 += 1\n                    else:\n                        print(a, b, c)\n                        ans2 += 1\n                if not (isPrefix(a, b) or isPrefix(b, a) or isPrefix(a, c) or isPrefix(c, a) or isPrefix(b, c) or isPrefix(c, b)):\n                    ans += 1\n    print(ans, f(n, k) + ans2)\n    print('ans2:', ans2, ans2 / 6)\n    print('cans2:', computeAns2(n, k))\n\ndef f(n, k):\n    modinv = pow(k - 1, MOD - 2, MOD)\n    tmp = k * (pow(k, n, MOD) + MOD - 1) * modinv\n    ans = pow(tmp, 3, MOD)\n    COUNT2 = countPrefixesFor2(n, k)\n    tmp0 = 3 * COUNT2 * tmp % MOD\n    ans = ans + MOD - tmp0\n    ans += countPrefixesFor3(n, k)\n    ans += 3 * COUNT2\n    ans = ans + MOD - 2 * tmp % MOD\n    ans += 6 * computeAns2Fastest(n, k)\n    ans %= MOD\n    return ans\n\ndef main():\n    T = int(input())\n    for t in range(T):\n        (n, k) = [int(x) for x in input().split()]\n        if k == 1:\n            print(0)\n        else:\n            print(f(n, k))\nmain()", "def powm(x, y):\n    if y == 1:\n        return x\n    elif y == 0:\n        return 1\n    elif y % 2 == 0:\n        ans = powm(x, y // 2)\n        ans *= ans\n        ans %= 1000000007\n        return ans\n    else:\n        return powm(x, y - 1) * x % 1000000007\n\ndef findMulInv(n):\n    nowCheck = 1000000007 + 1\n    while nowCheck % n != 0:\n        nowCheck += 1000000007\n    return nowCheck // n\n\ndef solve():\n    str = input().split()\n    n = int(str[0])\n    k = int(str[1])\n    ans = 0\n    if k != 1:\n        muli = findMulInv(k - 1)\n        ans += k * (-2 * (2 * n * n + 2 * n + 1) * powm(k, n + 1) + n * (2 * n + 1) * powm(k, n + 2) + (4 * n + 3) * powm(k, 2 * n + 1) - (4 * n + 1) * powm(k, 2 * n + 2) + powm(k, 3 * n + 2) + (2 * n * n + 3 * n + 1) * powm(k, n) - k - 1)\n        ans -= powm(k, n + 1) * (-2 * n * powm(k, n + 1) - powm(k, n + 1) + 2 * n * powm(k, n + 2) - powm(k, n + 2) - k * k * n * n + k * k + 2 * k * n * n + k - n * n)\n        ans -= k * ((2 * n + 1) * powm(k, n + 1) + n * powm(k, n + 2) - 2 * powm(k, 2 * n + 1) - (3 * n + 1) * powm(k, n) + k + 1)\n        ans %= 1000000007\n        ans *= muli ** 3\n    ans %= 1000000007\n    print(int(ans))\nfor tc in range(int(input())):\n    solve()"]