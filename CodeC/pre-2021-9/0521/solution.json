["test = int(input())\nfor z in range(test):\n    (H, S) = map(int, input().split())\n    d = H ** 4 - 4 * (2 * S) ** 2\n    if d < 0:\n        print(-1)\n    else:\n        P = ((H ** 2 + d ** 0.5) / 2) ** 0.5\n        B = 2 * S / P\n        a = [H * 1.0, P, B]\n        a.sort()\n        print(*a)", "import math\nfor _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    if s > h ** 2 / 4:\n        print(-1)\n    else:\n        a = math.sqrt(h ** 2 + 4 * s)\n        b = math.sqrt(h ** 2 - 4 * s)\n        l = [0, 0, 0]\n        l[1] = (a + b) / 2\n        l[0] = (a - b) / 2\n        l[2] = h\n        print(*l)", "import math as m\nt = int(input())\nfor i in range(t):\n    f = []\n    (H, S) = input().split()\n    H = int(H)\n    S = int(S)\n    if H * H - 4 * S < 0:\n        print(-1)\n    else:\n        k = []\n        l = m.sqrt(H ** 4 - 16 * S * S)\n        a = m.sqrt((H ** 2 - l) / 2)\n        b = m.sqrt((H ** 2 + l) / 2)\n        f.append(float(H))\n        f.append(a)\n        f.append(b)\n        k = sorted(f)\n        for i in k:\n            print(i, end=' ')\n        print()", "import math as m\nt = int(input())\nfor i in range(t):\n    f = []\n    (H, S) = input().split()\n    H = int(H)\n    S = int(S)\n    if H * H - 4 * S < 0:\n        print(-1)\n    else:\n        k = []\n        l = m.sqrt(H ** 4 - 16 * S * S)\n        a = m.sqrt((H ** 2 - l) / 2)\n        b = m.sqrt((H ** 2 + l) / 2)\n        f.append(float(H))\n        f.append(a)\n        f.append(b)\n        k = sorted(f)\n        for i in k:\n            print(i, end=' ')\n        print()", "import math as m\nt = int(input())\nfor i in range(t):\n    f = []\n    (H, S) = input().split()\n    H = int(H)\n    S = int(S)\n    if H * H - 4 * S < 0:\n        print(-1)\n    else:\n        k = []\n        l = m.sqrt(H ** 4 - 16 * S * S)\n        a = m.sqrt((H ** 2 - l) / 2)\n        b = m.sqrt((H ** 2 + l) / 2)\n        f.append(float(H))\n        f.append(a)\n        f.append(b)\n        k = sorted(f)\n        for i in k:\n            print(i, end=' ')\n        print()", "import math as m\nt = int(input())\nfor i in range(t):\n    f = []\n    (H, S) = input().split()\n    H = int(H)\n    S = int(S)\n    if H * H - 4 * S < 0:\n        print(-1)\n    else:\n        k = []\n        l = m.sqrt(H ** 4 - 16 * S * S)\n        a = m.sqrt((H ** 2 - l) / 2)\n        b = m.sqrt((H ** 2 + l) / 2)\n        f.append(float(H))\n        f.append(a)\n        f.append(b)\n        k = sorted(f)\n        for i in k:\n            print(i, end=' ')\n        print()", "T = int(input())\nfor _ in range(T):\n    (D, S) = (int(_) for _ in input().split())\n    max_b = (D ** 2 / 2) ** 0.5\n    S *= 2\n    if D ** 2 < 2 * S:\n        print(-1)\n    else:\n        left = 0\n        right = max_b\n        (a, b) = (0, 0)\n        while right - left > 10 ** (-9):\n            a = (left + right) / 2\n            b = (D ** 2 - a ** 2) ** 0.5\n            if a * b >= S:\n                right = a\n            else:\n                left = a\n        print(a, b, D)", "T = int(input())\nfor _ in range(T):\n    (D, S) = (int(_) for _ in input().split())\n    max_b = (D ** 2 / 2) ** 0.5\n    S *= 2\n    if D ** 2 < 2 * S:\n        print(-1)\n    else:\n        left = 0\n        right = max_b\n        (a, b) = (0, 0)\n        while right - left > 10 ** (-9):\n            a = (left + right) / 2\n            b = (D ** 2 - a ** 2) ** 0.5\n            if a * b >= S:\n                right = a\n            else:\n                left = a\n        print(a, b, D)", "out = []\nfor _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    s *= 2\n    ans = []\n    (be, en) = (0, (pow(h, 2) / 2) ** 0.5)\n    while en - be > 10 ** (-9):\n        md = (be + en) / 2\n        md2 = (h ** 2 - md ** 2) ** 0.5\n        if md * md2 <= s:\n            be = md\n        else:\n            en = md\n    (md, md2) = (be, (h ** 2 - be ** 2) ** 0.5)\n    if 2 * s - h * h > 0.01:\n        out.append('-1')\n    else:\n        ans.append(md)\n        ans.append(md2)\n        ans.append(h)\n        out.append(f'{ans[0]} {ans[1]} {ans[2]}')\nprint('\\n'.join(out))", "out = []\nfor _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    ans = []\n    (be, en) = (0, (pow(h, 2) / 2) ** 0.5)\n    while en - be > 10 ** (-9):\n        md = (be + en) / 2\n        md2 = (h ** 2 - md ** 2) ** 0.5\n        if md * md2 <= 2 * s:\n            be = md\n        else:\n            en = md\n    (md, md2) = (be, (h ** 2 - be ** 2) ** 0.5)\n    if 4 * s - h * h > 0.01:\n        out.append('-1')\n    else:\n        ans.append(md)\n        ans.append(md2)\n        ans.append(h)\n        out.append(f'{ans[0]} {ans[1]} {ans[2]}')\nprint('\\n'.join(out))", "out = []\nfor _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    ans = [h]\n    (be, en) = (0, (pow(h, 2) / 2) ** 0.5)\n    while en - be > 10 ** (-9):\n        md = (be + en) / 2\n        md2 = (h ** 2 - md ** 2) ** 0.5\n        if md * md2 <= 2 * s:\n            be = md\n        else:\n            en = md\n    (md, md2) = (be, (h ** 2 - be ** 2) ** 0.5)\n    if 4 * s - h * h > 0.01:\n        out.append('-1')\n    else:\n        ans.append(md)\n        ans.append(md2)\n        ans.sort()\n        out.append(f'{ans[0]} {ans[1]} {ans[2]}')\nprint('\\n'.join(out))", "out = []\nfor _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    ans = [h]\n    (be, en) = (0, (pow(h, 2) / 2) ** 0.5)\n    while en - be > 10 ** (-9):\n        md = (be + en) / 2\n        md2 = (h ** 2 - md ** 2) ** 0.5\n        if md * md2 <= 2 * s:\n            be = md\n        else:\n            en = md\n    (md, md2) = (be, (h ** 2 - be ** 2) ** 0.5)\n    if abs(2 * s - md * md2) > 0.01:\n        out.append('-1')\n    else:\n        ans.append(md)\n        ans.append(md2)\n        ans.sort()\n        out.append(f'{ans[0]} {ans[1]} {ans[2]}')\nprint('\\n'.join(out))", "out = []\nfor _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    ans = [h]\n    (be, en) = (0, (pow(h, 2) / 2) ** 0.5)\n    while en - be > 10 ** (-9):\n        md = (be + en) / 2\n        md2 = (h ** 2 - md ** 2) ** 0.5\n        if md * md2 <= 2 * s:\n            be = md\n        else:\n            en = md\n    (md, md2) = (be, (h ** 2 - be ** 2) ** 0.5)\n    if abs(2 * s - md * md2) > 0.01:\n        out.append('-1')\n    else:\n        ans.append(md)\n        ans.append(md2)\n        ans.sort()\n        out.append(f'{ans[0]:.6f} {ans[1]:.6f} {ans[2]:.6f}')\nprint('\\n'.join(out))", "from collections import *\nimport math\nfor test in range(int(input())):\n    (h, s) = map(float, input().split(' '))\n    d = h ** 4 - 16 * s ** 2\n    if h * h < 4 * s or h == 0:\n        print(-1)\n        continue\n    else:\n        x = ((h * h + (h * h * h * h - 16 * s * s) ** 0.5) / 2.0) ** 0.5\n        y = 2.0 * s / x\n        if y > x:\n            print('%.6f %.6f %.6f' % (x, y, h))\n        else:\n            print('%.6f %.6f %.6f' % (y, x, h))", "Q = int(input())\nwhile Q > 0:\n    Q -= 1\n    (h, s) = [int(x) for x in input().split()]\n    d = h ** 4 - 16 * s * s\n    if d < 0:\n        print(-1)\n    else:\n        d = d ** 0.5\n        b = (h * h + d) / 2\n        b = b ** 0.5\n        if b == 0:\n            print(-1)\n            continue\n        a = 2 * s / b\n        if a > b:\n            (a, b) = (b, a)\n        print('%.6f %.6f %.6f' % (a, b, h))", "from decimal import *\nfrom math import *\nfrom tokenize import Double\nfor _ in range(int(input())):\n    (h, s) = map(float, input().split())\n    if h * h - 4 * s < 0:\n        print(-1)\n        continue\n    a = (sqrt(h * h + 4 * s) + sqrt(h * h - 4 * s)) / 2\n    b = (sqrt(h * h + 4 * s) - sqrt(h * h - 4 * s)) / 2\n    l = [0.0] * 3\n    l[0] = a\n    l[1] = b\n    l[2] = h\n    l.sort()\n    if l[0] == 0 or l[1] == 0 or l[2] == 0:\n        print(-1)\n        continue\n    if l[2] >= l[0] + l[1]:\n        print(-1)\n        continue\n    print(*l)", "for _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    t = h ** 4 - 16 * s ** 2\n    if t < 0:\n        print(-1)\n    else:\n        b = ((h ** 2 + t ** 0.5) / 2) ** 0.5\n        p = (h ** 2 - b ** 2) ** 0.5\n        l = max(b, p)\n        l1 = min(b, p)\n        print(l1, l, h)", "import math\nt = int(input())\nfor tc in range(t):\n    (h, s) = map(int, input().split())\n    a1 = h ** 2 + 4 * s\n    a2 = h ** 2 - 4 * s\n    if a2 < 0:\n        print(-1)\n        continue\n    s1 = math.sqrt(h ** 2 + 4 * s)\n    s2 = math.sqrt(h ** 2 - 4 * s)\n    a = (s1 + s2) / 2\n    b = (s1 - s2) / 2\n    print(*sorted((a, b, h)))", "for _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    t = h ** 4 - 16 * s ** 2\n    if t < 0:\n        print(-1)\n    else:\n        b = ((h ** 2 + t ** 0.5) / 2) ** 0.5\n        p = (h ** 2 - b ** 2) ** 0.5\n        l = max(b, p)\n        l1 = min(b, p)\n        print(l1, l, h)", "for _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    t = h ** 4 - 16 * s ** 2\n    if t < 0:\n        print(-1)\n    else:\n        b = ((h ** 2 + t ** 0.5) / 2) ** 0.5\n        p = (h ** 2 - b ** 2) ** 0.5\n        l = max(b, p)\n        l1 = min(b, p)\n        print(l1, l, h)", "import math\nfor i in range(int(input())):\n    l = list(map(int, input().split()))\n    h = l[0]\n    s = l[1]\n    r = h ** 4 - 16 * (s * s)\n    u = []\n    if r < 0:\n        print(-1)\n    else:\n        q = math.sqrt((h ** 2 + math.sqrt(r)) / 2)\n        y = math.sqrt(h ** 2 - q ** 2)\n        u.append(float(q))\n        u.append(float(y))\n        u.append(float(h))\n    u = sorted(u)\n    print(*u)", "for _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    t = h ** 4 - 16 * s ** 2\n    if t < 0:\n        print(-1)\n    else:\n        b = ((h ** 2 + t ** 0.5) / 2) ** 0.5\n        p = (h ** 2 - b ** 2) ** 0.5\n        l = max(b, p)\n        l1 = min(b, p)\n        print(l1, l, h)", "import math\nfor i in range(int(input())):\n    l = list(map(int, input().split()))\n    h = l[0]\n    s = l[1]\n    r = h ** 4 - 16 * (s * s)\n    u = []\n    if r < 0:\n        print(-1)\n    else:\n        q = math.sqrt((h ** 2 + math.sqrt(r)) / 2)\n        y = math.sqrt(h ** 2 - q ** 2)\n        u.append(float(q))\n        u.append(float(y))\n        u.append(float(h))\n    u = sorted(u)\n    print(*u)", "for _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    t = h ** 4 - 16 * s ** 2\n    if t < 0:\n        print(-1)\n    else:\n        b = ((h ** 2 + t ** 0.5) / 2) ** 0.5\n        p = (h ** 2 - b ** 2) ** 0.5\n        l = max(b, p)\n        l1 = min(b, p)\n        print(l1, l, h)", "import math\nfor i in range(int(input())):\n    l = list(map(int, input().split()))\n    h = l[0]\n    s = l[1]\n    r = h ** 4 - 16 * (s * s)\n    u = []\n    if r < 0:\n        print(-1)\n    else:\n        q = math.sqrt((h ** 2 + math.sqrt(r)) / 2)\n        y = math.sqrt(h ** 2 - q ** 2)\n        u.append(float(q))\n        u.append(float(y))\n        u.append(float(h))\n    u = sorted(u)\n    print(*u)", "import math\nfor i in range(int(input())):\n    l = list(map(int, input().split()))\n    h = l[0]\n    s = l[1]\n    r = h ** 4 - 16 * (s * s)\n    u = []\n    if r < 0:\n        print(-1)\n    else:\n        q = math.sqrt((h ** 2 + math.sqrt(r)) / 2)\n        y = math.sqrt(h ** 2 - q ** 2)\n        u.append(float(q))\n        u.append(float(y))\n        u.append(float(h))\n    u = sorted(u)\n    print(*u)", "import math\nfor i in range(int(input())):\n    l = list(map(int, input().split()))\n    h = l[0]\n    s = l[1]\n    r = h ** 4 - 16 * (s * s)\n    u = []\n    if r < 0:\n        print(-1)\n    else:\n        q = math.sqrt((h ** 2 + math.sqrt(r)) / 2)\n        y = math.sqrt(h ** 2 - q ** 2)\n        u.append(float(q))\n        u.append(float(y))\n        u.append(float(h))\n    u = sorted(u)\n    print(*u)", "import math\nfor i in range(int(input())):\n    l = list(map(int, input().split()))\n    h = l[0]\n    s = l[1]\n    r = h ** 4 - 16 * (s * s)\n    u = []\n    if r < 0:\n        print(-1)\n    else:\n        q = math.sqrt((h ** 2 + math.sqrt(r)) / 2)\n        y = math.sqrt(h ** 2 - q ** 2)\n        u.append(float(q))\n        u.append(float(y))\n        u.append(float(h))\n    u = sorted(u)\n    print(*u)", "import math\nfor i in range(int(input())):\n    l = list(map(int, input().split()))\n    h = l[0]\n    s = l[1]\n    r = h ** 4 - 16 * (s * s)\n    u = []\n    if r < 0:\n        print(-1)\n    else:\n        q = math.sqrt((h ** 2 + math.sqrt(r)) / 2)\n        y = math.sqrt(h ** 2 - q ** 2)\n        u.append(float(q))\n        u.append(float(y))\n        u.append(float(h))\n    u = sorted(u)\n    print(*u)", "import sys\ninput = sys.stdin.readline\n\ndef rii():\n    return range(int(input().strip()))\n\ndef ii():\n    return int(input().strip())\n\ndef mii():\n    return map(int, input().strip().split(' '))\n\ndef lmii():\n    return list(map(int, input().strip().split(' ')))\n\ndef si():\n    return str(input().strip())\nfrom math import sqrt\ndecimal_places = 6\nfailure = '-1'\n\ndef fn(h, s):\n    return pow(h, 4) - 16 * pow(s, 2)\n\ndef get_ab(h, s):\n    b2 = (h ** 2 + sqrt(fn(h, s))) / 2\n    a2 = h ** 2 - b2\n    if a2 > b2:\n        (a2, b2) = (b2, a2)\n    return ' '.join([*map(lambda x: f'{x:.{decimal_places}f}', (sqrt(a2), sqrt(b2), h))])\n\ndef solve(*args):\n    (h, s) = args\n    if fn(h, s) >= 0:\n        return get_ab(h, s)\n    else:\n        return failure\n\ndef do_codechef():\n    for t in rii():\n        (h, s) = mii()\n        print(solve(h, s))\ndo_codechef()\nexit()", "for _ in range(int(input())):\n    (h, s) = input().split()\n    h = float(h)\n    s = float(s)\n    if h * h - 4 * s < 0:\n        print(-1)\n        continue\n    apb = (h * h + 4 * s) ** 0.5\n    amb = (h * h - 4 * s) ** 0.5\n    a = (apb + amb) / 2\n    b = (apb - amb) / 2\n    print(min(a, b), max(a, b), h)", "t = int(input())\nimport math\nfor _ in range(t):\n    (h, s) = map(float, input().split())\n    a1 = h ** 2 + 4 * s\n    a2 = h ** 2 - 4 * s\n    if a2 < 0:\n        print(-1)\n        continue\n    s1 = math.sqrt(h ** 2 + 4 * s)\n    s2 = math.sqrt(h ** 2 - 4 * s)\n    a = (s1 + s2) / 2\n    b = (s1 - s2) / 2\n    print(*sorted((a, b, h)))", "for i in range(int(input())):\n    (h, s) = list(map(int, input().split()))\n    if h ** 4 - 16 * s * s < 0:\n        print(-1)\n        continue\n    l = [((h * h - (h ** 4 - 16 * s * s) ** (1 / 2)) / 2) ** (1 / 2), ((h * h + (h ** 4 - 16 * s * s) ** (1 / 2)) / 2) ** (1 / 2), h]\n    l = sorted(l)\n    print(l[0], l[1], l[2])", "t = int(input())\nimport math\nfor _ in range(t):\n    (h, s) = map(float, input().split())\n    k1 = h ** 2 + 4 * s\n    k2 = h ** 2 - 4 * s\n    if k2 < 0:\n        print(-1)\n        continue\n    s1 = math.sqrt(h ** 2 + 4 * s)\n    s2 = math.sqrt(h ** 2 - 4 * s)\n    b = (s1 + s2) / 2\n    p = (s1 - s2) / 2\n    print(*sorted((p, b, h)))", "t = int(input())\nimport math\nfor _ in range(t):\n    (h, s) = map(float, input().split())\n    a1 = h ** 2 + 4 * s\n    a2 = h ** 2 - 4 * s\n    if a2 < 0:\n        print(-1)\n        continue\n    s1 = math.sqrt(h ** 2 + 4 * s)\n    s2 = math.sqrt(h ** 2 - 4 * s)\n    a = (s1 + s2) / 2\n    b = (s1 - s2) / 2\n    print(*sorted((a, b, h)))", "from math import *\n\ndef test(h, a):\n    if h * h >= 4 * a:\n        x = (h * h + 4 * a) ** (1 / 2)\n        y = (h * h - 4 * a) ** (1 / 2)\n        l = (x - y) / 2\n        b = (x + y) / 2\n        if float(trunc(x)) == x:\n            print('{0:.5f}'.format(l), '{0:.5f}'.format(b), '{0:.5f}'.format(h))\n        elif type(x) == float:\n            print('{0:.6f}'.format(l), '{0:.6f}'.format(b), '{0:.6f}'.format(h))\n    else:\n        print('-1')\nt = int(input())\nwhile t > 0:\n    (h, a) = map(int, input().split(' '))\n    test(h, a)\n    t -= 1", "from math import *\n\ndef test(h, a):\n    if h * h >= 4 * a:\n        x = (h * h + 4 * a) ** (1 / 2)\n        y = (h * h - 4 * a) ** (1 / 2)\n        l = (x - y) / 2\n        b = (x + y) / 2\n        if float(trunc(x)) == x:\n            print('{0:.5f}'.format(l), '{0:.5f}'.format(b), '{0:.5f}'.format(h))\n        elif type(x) == float:\n            print('{0:.6f}'.format(l), '{0:.6f}'.format(b), '{0:.6f}'.format(h))\n    else:\n        print('-1')\nt = int(input())\nwhile t > 0:\n    (h, a) = map(int, input().split(' '))\n    test(h, a)\n    t -= 1", "t = int(input())\nimport math\nfor _ in range(t):\n    (h, s) = map(float, input().split())\n    a1 = h ** 2 + 4 * s\n    a2 = h ** 2 - 4 * s\n    if a2 < 0:\n        print(-1)\n        continue\n    s1 = math.sqrt(h ** 2 + 4 * s)\n    s2 = math.sqrt(h ** 2 - 4 * s)\n    a = (s1 + s2) / 2\n    b = (s1 - s2) / 2\n    print(*sorted((a, b, h)))", "from math import sqrt\nT = int(input())\nfor t in range(T):\n    (H, S) = map(int, input().split())\n    p1 = H ** 2\n    p2 = 4 * S\n    try:\n        F1 = sqrt(p1 + p2)\n        F2 = sqrt(p1 - p2)\n        a = (F1 + F2) / 2\n        b = (F1 - F2) / 2\n        print(b, a, H)\n    except:\n        print(-1)", "from math import sqrt\nT = int(input())\nfor t in range(T):\n    (H, S) = map(int, input().split())\n    p1 = H ** 2\n    p2 = 4 * S\n    try:\n        F1 = sqrt(p1 + p2)\n        F2 = sqrt(p1 - p2)\n        a = (F1 + F2) / 2\n        b = (F1 - F2) / 2\n        print(b, a, H)\n    except:\n        print(-1)", "for _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    a = h ** 4 - 16 * s ** 2\n    if a < 0:\n        print(-1)\n    else:\n        print(((h ** 2 - a ** 0.5) / 2) ** 0.5, ((h ** 2 + a ** 0.5) / 2) ** 0.5, h)", "for _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    a = h ** 4 - 16 * s ** 2\n    if a < 0:\n        print(-1)\n    else:\n        print(((h ** 2 - a ** 0.5) / 2) ** 0.5, ((h ** 2 + a ** 0.5) / 2) ** 0.5, h)", "for _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    a = h ** 4 - 16 * s ** 2\n    if a < 0:\n        print(-1)\n    else:\n        print(((h ** 2 - a ** 0.5) / 2) ** 0.5, ((h ** 2 + a ** 0.5) / 2) ** 0.5, h)", "import math\nfor _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    s1 = math.sqrt(h * h + 4 * s)\n    try:\n        s2 = math.sqrt(h * h - 4 * s)\n        l = [round((s1 + s2) / 2, 6), round((s1 - s2) / 2, 6), float(h)]\n        print(*sorted(l))\n    except:\n        print(-1)", "import math\n\ndef find(h, s):\n    p = float(math.sqrt(h * h * h * h - 16 * (s * s)))\n    l = float(math.sqrt((h * h - p) / 2))\n    b = float(math.sqrt((h * h + p) / 2))\n    print('{0} {1} {2}'.format(l, b, h))\nt = int(input())\nwhile t:\n    (h, s) = [float(x) for x in input().split()]\n    if h * h < 4 * s:\n        print(-1)\n    else:\n        find(h, s)\n    t = t - 1", "import math\nt = int(input())\nwhile t > 0:\n    (h, s) = map(int, input().split())\n    ans = []\n    ans.append(float(h))\n    temp = h ** 4 - 16 * s ** 2\n    if temp >= 0:\n        ans.append(math.sqrt((h ** 2 + math.sqrt(temp)) / 2))\n        ans.append(math.sqrt((h ** 2 - math.sqrt(temp)) / 2))\n        ans.sort()\n        for i in range(3):\n            print(ans[i], end=' ')\n        print()\n    else:\n        print(-1)\n    t -= 1", "from math import sqrt\nfor _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    d = h ** 4 - 16 * s ** 2\n    if d < 0:\n        print(-1)\n    else:\n        (a, b) = (sqrt((h ** 2 + sqrt(d)) / 2), sqrt((h ** 2 - sqrt(d)) / 2))\n        print(min(a, b), max(a, b), float(h))", "from math import sqrt\nfor _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    d = h ** 4 - 16 * s ** 2\n    if d < 0:\n        print(-1)\n    else:\n        (a, b) = (sqrt((h ** 2 + sqrt(d)) / 2), sqrt((h ** 2 - sqrt(d)) / 2))\n        print(min(a, b), max(a, b), float(h))", "import math as m\nfor i in range(int(input())):\n    (h, s) = map(int, input().split())\n    h2 = h ** 2\n    s = s * 4\n    if h2 - s < 0:\n        print(-1)\n        continue\n    summ = m.sqrt(h2 + s)\n    diff = m.sqrt(h2 - s)\n    x = (summ + diff) / 2\n    y = summ - x\n    print(min(x, y), max(x, y), float(h))", "for _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    a = h ** 4 - 16 * s ** 2\n    if a < 0:\n        print(-1)\n    else:\n        print(((h ** 2 - a ** 0.5) / 2) ** 0.5, ((h ** 2 + a ** 0.5) / 2) ** 0.5, h)", "import math\nt = int(input())\nfor i in range(t):\n    (h, s) = map(int, input().split())\n    s2 = 4 * s\n    h2 = h ** 2\n    c = h2 - s2\n    if c < 0:\n        print('-1')\n        continue\n    c2 = math.sqrt(h2 + s2)\n    c = math.sqrt(c)\n    x = (c2 + c) / 2\n    y = c2 - x\n    print(min(x, y), max(x, y), float(h))", "import sys\nsys.setrecursionlimit(1000000)\nt = int(input())\ntest_cases = [tuple(map(int, input().split())) for _ in range(t)]\nfor test_case in test_cases:\n    (h, s) = test_case\n    if 16 * s ** 2 > h ** 4:\n        print(-1)\n        continue\n    b = ((h ** 2 + (h ** 4 - 16 * s ** 2) ** (1 / 2)) / 2) ** (1 / 2)\n    p = (h ** 2 - b ** 2) ** (1 / 2)\n    print(min(b, p), max(b, p), h)", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    ip = input().split()\n    (h, s) = [int(i) for i in ip]\n    s4 = 4 * s\n    h2 = h ** 2\n    amb = h2 - s4\n    if amb < 0:\n        print('-1')\n        continue\n    apb = math.sqrt(h2 + s4)\n    amb = math.sqrt(amb)\n    x = (apb + amb) / 2\n    y = apb - x\n    print(min(x, y), max(x, y), float(h))", "import sys\nsys.setrecursionlimit(1000000)\nt = int(input())\ntest_cases = [tuple(map(int, input().split())) for _ in range(t)]\nfor test_case in test_cases:\n    (h, s) = test_case\n    if 16 * s ** 2 > h ** 4:\n        print(-1)\n        continue\n    b = ((h ** 2 + (h ** 4 - 16 * s ** 2) ** (1 / 2)) / 2) ** (1 / 2)\n    p = (h ** 2 - b ** 2) ** (1 / 2)\n    print(min(b, p), max(b, p), h)", "import math\nT = int(input())\nfor i in range(T):\n    (h, s) = map(int, input().split())\n    flag = 1\n    l = 0\n    b = 0\n    if h * h - 4 * s < 0:\n        print('-1')\n    else:\n        x = math.sqrt(h * h + 4 * s)\n        y = math.sqrt(h * h - 4 * s)\n        l = (x + y) / 2\n        b = (x - y) / 2\n        temp = [l, b, h]\n        temp.sort()\n        ans = ''\n        for i in temp:\n            ans += str(i) + ' '\n        ans = ans.strip()\n        print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    (h, s) = map(int, input().split())\n    flag = 1\n    l = 0\n    b = 0\n    if h * h - 4 * s < 0:\n        print('-1')\n    else:\n        x = math.sqrt(h * h + 4 * s)\n        y = math.sqrt(h * h - 4 * s)\n        l = (x + y) / 2\n        b = (x - y) / 2\n        temp = [l, b, h]\n        temp.sort()\n        ans = ''\n        for i in temp:\n            ans += str(i) + ' '\n        ans = ans.strip()\n        print(ans)", "import math\nfor i in range(int(input())):\n    (h, s) = map(int, input().split())\n    delta = math.pow(h, 4) - 16 * math.pow(s, 2)\n    if delta < 0:\n        print(-1)\n    elif delta == 0:\n        ans = h / math.sqrt(2)\n        print(ans, ans, h)\n    else:\n        ans = math.sqrt(delta)\n        k = math.pow(h, 2)\n        ans_1 = round(math.sqrt((k + ans) / 2), 6)\n        ans_2 = round(math.sqrt((k - ans) / 2), 6)\n        print(ans_2, ans_1, h)", "import math\nfor i in range(int(input())):\n    (h, s) = map(int, input().split())\n    delta = math.pow(h, 4) - 16 * math.pow(s, 2)\n    if delta < 0:\n        print(-1)\n    elif delta == 0:\n        ans = h / math.sqrt(2)\n        print(ans, ans, h)\n    else:\n        ans = math.sqrt(delta)\n        k = math.pow(h, 2)\n        ans_1 = round(math.sqrt((k + ans) / 2), 6)\n        ans_2 = round(math.sqrt((k - ans) / 2), 6)\n        print(ans_2, ans_1, h)", "T = int(input())\nwhile T:\n    (H, A) = map(int, input().rstrip().rsplit())\n    if H ** 2 - 4 * A < 0:\n        print(-1)\n    else:\n        (a, b, c) = (1, (H ** 2 - 4 * A) ** 0.5, -2 * A)\n        P = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n        B = P + b\n        print(str(P) + ' ' + str(B) + ' ' + str(H))\n    T -= 1", "a = int(input())\nfor i in range(a):\n    b = list(map(int, str(input()).split(' ')))\n    li = []\n    if b[0] ** 2 < 4 * b[1]:\n        print(-1)\n    else:\n        li.append((b[0] ** 2 + 4 * b[1]) ** 0.5)\n        li.append((b[0] ** 2 - 4 * b[1]) ** 0.5)\n        li.append((li[0] + li[1]) / 2)\n        li.append((li[0] - li[1]) / 2)\n        print(min(li[2], li[3]), max(li[2], li[3]), b[0])", "for _ in range(int(input())):\n    (h, area) = map(int, input().split())\n    k = (h ** 2 + 4 * area) ** 0.5\n    l = (h ** 2 - 4 * area) ** 0.5\n    if h ** 2 - 4 * area < 0:\n        print(-1)\n    else:\n        a = (k - l) / 2\n        b = (k + l) / 2\n        h = (a ** 2 + b ** 2) ** 0.5\n        print(round(a, 6), round(b, 6), round(h, 6))", "import math\n\ndef solve():\n    (h, s) = map(int, input().split())\n    if h ** 2 < 4 * s:\n        return None\n    d = math.sqrt(h ** 4 - 16 * s ** 2)\n    return [math.sqrt((h ** 2 - d) / 2), math.sqrt((h ** 2 + d) / 2), h]\nt = int(input())\nfor _ in range(t):\n    ans = solve()\n    if ans == None:\n        print(-1)\n    else:\n        print(*ans)", "import sys\nimport math\n\ndef main(h, s):\n    check = h ** 4 - 16 * s ** 2\n    ans = [None, None, h]\n    if check >= 0:\n        temp = (h ** 2 + math.sqrt(check)) / 2\n        if temp > 0:\n            a = math.sqrt(temp)\n            b = math.sqrt(h ** 2 - a ** 2)\n            ans[0] = a\n            ans[1] = b\n            ans.sort()\n            print(*ans)\n            return\n    print(-1)\n    return\nt = int(input())\nfor i in range(t):\n    (h, s) = list(map(int, input().split()))\n    main(h, s)", "import math\nfor oo in range(int(input())):\n    (h, s) = map(int, input().split())\n    b = h * h * h * h - 16 * s * s\n    if b < 0:\n        print(-1)\n    else:\n        x = (h * h - math.sqrt(b)) / 2\n        c = math.sqrt(x)\n        d = math.sqrt(h * h - x)\n        if c < d:\n            print('%.6f' % c, '%.6f' % d, '%.6f' % h)\n        else:\n            print('%.6f' % d, '%.6f' % c, '%.6f' % h)", "for oo in range(int(input())):\n    (h, s) = map(int, input().split())\n    b = h * h * h * h - 16 * s * s\n    if b < 0:\n        print(-1)\n    else:\n        x = (h * h - b ** 0.5) / 2\n        c = x ** 0.5\n        d = (h * h - x) ** 0.5\n        if c < d:\n            print('%.6f' % c, '%.6f' % d, '%.6f' % h)\n        else:\n            print('%.6f' % d, '%.6f' % c, '%.6f' % h)", "a = int(input())\nfor i in range(a):\n    b = list(map(int, str(input()).split(' ')))\n    li = []\n    if b[0] ** 2 < 4 * b[1]:\n        print(-1)\n    else:\n        li.append((b[0] ** 2 + 4 * b[1]) ** 0.5)\n        li.append((b[0] ** 2 - 4 * b[1]) ** 0.5)\n        li.append((li[0] + li[1]) / 2)\n        li.append((li[0] - li[1]) / 2)\n        print(min(li[2], li[3]), max(li[2], li[3]), b[0])", "a = int(input())\nfor i in range(a):\n    b = list(map(int, str(input()).split(' ')))\n    li = []\n    if b[0] ** 2 < 4 * b[1]:\n        print(-1)\n    else:\n        li.append((b[0] ** 2 + 4 * b[1]) ** 0.5)\n        li.append((b[0] ** 2 - 4 * b[1]) ** 0.5)\n        li.append((li[0] + li[1]) / 2)\n        li.append((li[0] - li[1]) / 2)\n        print(min(li[2], li[3]), max(li[2], li[3]), b[0])", "T = int(input())\n\ndef RightTriangle(H, S):\n    if H ** 2 - 4 * S < 0:\n        return -1\n    a = (H ** 2 + 4 * S) ** 0.5\n    b = (H ** 2 - 4 * S) ** 0.5\n    c = (a + b) / 2\n    d = (a - b) / 2\n    if c <= 0 and d <= 0:\n        return -1\n    else:\n        e = str(d) + ' ' + str(c) + ' ' + str(H)\n        return e\nfor i in range(T):\n    (H, S) = map(int, input().split())\n    print(RightTriangle(H, S))", "T = int(input())\n\ndef RightTriangle(H, S):\n    if H ** 2 - 4 * S < 0:\n        return -1\n    a = (H ** 2 + 4 * S) ** 0.5\n    b = (H ** 2 - 4 * S) ** 0.5\n    c = (a + b) / 2\n    d = (a - b) / 2\n    if c <= 0 and d <= 0:\n        return -1\n    else:\n        e = str(d) + ' ' + str(c) + ' ' + str(H)\n        return e\nfor i in range(T):\n    (H, S) = map(int, input().split())\n    print(RightTriangle(H, S))", "t = int(input())\nimport math\nwhile t > 0:\n    (h, s) = map(int, input().split())\n    q = 4 * s\n    if h ** 2 - q >= 0:\n        a = math.sqrt(h ** 2 + q)\n        b = math.sqrt(h ** 2 - q)\n        x = (a + b) / 2\n        y = (a - b) / 2\n        if x > y:\n            print(y, x, h)\n        else:\n            print(x, y, h)\n    else:\n        print(-1)\n    t -= 1", "t = int(input())\nimport math\nwhile t > 0:\n    (h, s) = map(int, input().split())\n    q = 4 * s\n    if h ** 2 - q >= 0:\n        a = math.sqrt(h ** 2 + q)\n        b = math.sqrt(h ** 2 - q)\n        x = (a + b) / 2\n        y = (a - b) / 2\n        if x > y:\n            print(y, x, h)\n        else:\n            print(x, y, h)\n    else:\n        print(-1)\n    t -= 1", "t = int(input())\nimport math\nwhile t > 0:\n    (h, s) = map(int, input().split())\n    q = 4 * s\n    if h ** 2 - q >= 0:\n        a = math.sqrt(h ** 2 + q)\n        b = math.sqrt(h ** 2 - q)\n        x = (a + b) / 2\n        y = (a - b) / 2\n        if x > y:\n            print(y, x, h)\n        else:\n            print(x, y, h)\n    else:\n        print(-1)\n    t -= 1", "import math\nfor i in range(int(input())):\n    (h, s) = map(int, input().split())\n    p = s * 2\n    if h ** 2 - 2 * p < 0:\n        print(-1)\n        continue\n    B = ((h ** 2 + 2 * p) ** 0.5 + (h ** 2 - 2 * p) ** 0.5) / 2\n    H = p / B\n    print('%.6f %.6f %.6f' % (min(B, H), max(B, H), h))", "import math\nfor i in range(int(input())):\n    (h, s) = map(int, input().split())\n    p = s * 2\n    if h ** 2 - 2 * p < 0:\n        print(-1)\n        continue\n    B = ((h ** 2 + 2 * p) ** 0.5 + (h ** 2 - 2 * p) ** 0.5) / 2\n    H = p / B\n    print('%.6f %.6f %.6f' % (min(B, H), max(B, H), h))", "test = int(input())\nfor _ in range(test):\n    (h, s) = map(float, input().split())\n    if h ** 4 < 16 * s ** 2:\n        print('-1')\n    else:\n        a = round(((h ** 2 + (h ** 4 - 16 * s * s) ** 0.5) / 2) ** 0.5, 6)\n        b = round(((h ** 2 - (h ** 4 - 16 * s * s) ** 0.5) / 2) ** 0.5, 6)\n        print(b, a, h)", "for _ in range(int(input())):\n    (H, S) = map(float, input().split())\n    if H ** 4 < 16 * S ** 2:\n        print('-1')\n    else:\n        a = round(((H ** 2 + (H ** 4 - 16 * S * S) ** 0.5) / 2) ** 0.5, 6)\n        b = round(((H ** 2 - (H ** 4 - 16 * S * S) ** 0.5) / 2) ** 0.5, 6)\n        print(b, a, H)", "import sys\nimport math\nimport bisect\n\ndef solve(h, s):\n    a2_b2 = h ** 2\n    ab = 2 * s\n    if a2_b2 + 2 * ab < 0 or a2_b2 - 2 * ab < 0:\n        return None\n    x = math.sqrt(a2_b2 + 2 * ab)\n    y = math.sqrt(a2_b2 - 2 * ab)\n    a = (x + y) / 2\n    b = (x - y) / 2\n    c = math.sqrt(a ** 2 + b ** 2)\n    return sorted([a, b, c])\n\ndef main():\n    for _ in range(int(input())):\n        (h, s) = map(int, input().split())\n        ans = solve(h, s)\n        if ans:\n            print('%.10f %.10f %.10f' % (ans[0], ans[1], ans[2]))\n        else:\n            print(-1)\nmain()", "from math import *\nfor j in range(int(input())):\n    (h, s) = map(int, input().split())\n    d = h ** 4 - 16 * s * s\n    if d >= 0:\n        a = sqrt((h * h + sqrt(d)) / 2)\n        b = sqrt((h * h - sqrt(d)) / 2)\n        if a > b:\n            (a, b) = (b, a)\n        print(a, b, h)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (H, S) = map(float, input().split())\n    if H ** 4 < 16 * S ** 2:\n        print('-1')\n    else:\n        a = round(((H ** 2 + (H ** 4 - 16 * S * S) ** 0.5) / 2) ** 0.5, 6)\n        b = round(((H ** 2 - (H ** 4 - 16 * S * S) ** 0.5) / 2) ** 0.5, 6)\n        print(b, a, H)", "import math\nT = int(input())\nfor i in range(T):\n    (h, S) = map(float, input().split())\n    c1 = float(S * 2 / h)\n    a = 1\n    b = -1 * (h * h)\n    c = S * 2 * (S * 2)\n    d = b * b - 4 * a * c\n    if d < 0:\n        print(-1)\n    else:\n        d = math.sqrt(d)\n        sol1 = (-b + d) / (2 * a)\n        sol2 = (-b - d) / (2 * a)\n        print('%.6f' % math.sqrt(sol2), '%.6f' % math.sqrt(sol1), '%.6f' % h)", "import math\nt = int(input())\nwhile t:\n    c = []\n    a = input()\n    a = [int(i) for i in a.split()]\n    d = a[0] * a[0] - 4 * a[1]\n    e = a[0] * a[0] + 4 * a[1]\n    if d >= 0:\n        p = (math.sqrt(e) + math.sqrt(d)) / 2\n        b = (math.sqrt(e) - math.sqrt(d)) / 2\n        c.append(p)\n        c.append(b)\n        c.append(float(a[0]))\n        c.sort()\n        for i in range(len(c)):\n            print(c[i], end=' ')\n        print()\n    else:\n        print('-1')\n    t = t - 1", "import sys\nimport math\nimport heapq\nimport bisect\nimport string\nimport functools\nimport itertools\nimport collections\nt = int(sys.stdin.readline().strip(' ').strip('\\n'))\nfor _ in range(t):\n    (h, s) = list(map(int, sys.stdin.readline().strip(' ').strip('\\n').split()))\n    try:\n        temp = math.sqrt(pow(h, 4) - 4 * 4 * pow(s, 2))\n        a = math.sqrt((pow(h, 2) + temp) / 2.0)\n        b = 2 * s / a\n        l = [a, b, float(h)]\n        l.sort()\n        sys.stdout.write(str(l[0]) + ' ' + str(l[1]) + ' ' + str(l[2]) + '\\n')\n    except:\n        sys.stdout.write('-1\\n')", "import math\nt = int(input())\nfor i in range(t):\n    (h, s) = input().split()\n    h = float(h)\n    s = float(s)\n    a = 1\n    b = -1 * (h * h)\n    c = s * 2 * (s * 2)\n    d = b * b - 4 * a * c\n    if d < 0:\n        print(-1)\n    else:\n        d = math.sqrt(d)\n        sol1 = (-b + d) / (2 * a)\n        sol2 = (-b - d) / (2 * a)\n        print('%.6f' % math.sqrt(sol2), '%.6f' % math.sqrt(sol1), '%.6f' % h)", "import math\n\ndef rightT(h, s):\n    if h * h - 4 * s < 0:\n        print('-1')\n        return\n    t = math.sqrt(h * h + 4 * s)\n    k = math.sqrt(h * h - 4 * s)\n    print((t - k) / 2, end=' ')\n    print((t + k) / 2, end=' ')\n    print(h)\n    return\nt = int(input())\nfor i in range(t):\n    (h, s) = map(int, input().split())\n    rightT(h, s)", "from math import *\nt = int(input())\nfor i in range(0, t):\n    (h, s) = map(int, input().split())\n    d = pow(h, 4) - 16 * pow(s, 2)\n    if d < 0:\n        print('-1')\n    elif d >= 0:\n        a = (pow(h, 2) + sqrt(d)) / 2\n        a = sqrt(a)\n        b = 2 * s / a\n        lst = [a, b, h]\n        lst.sort()\n        print(*lst)", "import math\n\ndef rightT(h, s):\n    if h * h - 4 * s < 0:\n        print('-1')\n        return\n    t = math.sqrt(h * h + 4 * s)\n    k = math.sqrt(h * h - 4 * s)\n    print((t - k) / 2, end=' ')\n    print((t + k) / 2, end=' ')\n    print(h)\n    return\nfor _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    rightT(h, s)", "t = int(input())\nfor i in range(t):\n    (H, S) = map(float, input().split())\n    ans = pow(H, 4) - 16 * pow(S, 2)\n    if ans < 0:\n        print(-1)\n    else:\n        h = pow((H * H + pow(ans, 0.5)) / 2, 0.5)\n        b = 2 * S / h\n        if b > h:\n            print(h, b, H)\n        else:\n            print(b, h, H)", "from math import sqrt\nfor _ in range(int(input())):\n    (H, S) = map(int, input().split())\n    if H * H - 4 * S < 0:\n        print(-1)\n    else:\n        sum = sqrt(H * H + 4 * S)\n        diff = sqrt(H * H - 4 * S)\n        print((sum - diff) / 2, (sum + diff) / 2, H)", "import math\nfor i in range(int(input())):\n    (h, s) = map(int, input().split())\n    D = h ** 4 - 16 * s ** 2\n    if D >= 0:\n        a = math.sqrt((h ** 2 + math.sqrt(D)) / 2)\n        b = math.sqrt((h ** 2 - math.sqrt(D)) / 2)\n        if a > b:\n            (a, b) = (b, a)\n        print(a, b, h)\n    else:\n        print(-1)", "import math\nfor i in range(int(input())):\n    (h, s) = map(int, input().split())\n    D = h ** 4 - 16 * s ** 2\n    if D >= 0:\n        a = math.sqrt((h ** 2 + math.sqrt(D)) / 2)\n        b = math.sqrt((h ** 2 - math.sqrt(D)) / 2)\n        if a > b:\n            (a, b) = (b, a)\n        print(a, b, h)\n    else:\n        print(-1)", "import math\nfor i in range(int(input())):\n    (h, s) = map(int, input().split())\n    D = h ** 4 - 16 * s ** 2\n    if D >= 0:\n        a = math.sqrt((h ** 2 + math.sqrt(D)) / 2)\n        b = math.sqrt((h ** 2 - math.sqrt(D)) / 2)\n        if a > b:\n            (a, b) = (b, a)\n        print(a, b, h)\n    else:\n        print(-1)", "from collections import defaultdict as dd\nfrom collections import Counter as ccd\nfrom itertools import permutations as pp\nfrom itertools import combinations as cc\nfrom random import randint as rd\nfrom bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nimport heapq as hq\nimport math\nmod = pow(10, 9) + 7\n\ndef inp(flag=0):\n    if flag == 0:\n        return list(map(int, input().strip().split(' ')))\n    else:\n        return int(input())\nt = inp(1)\nwhile t:\n    t -= 1\n    (h, s) = inp()\n    if h ** 2 < 4 * s:\n        print(-1)\n    else:\n        n1 = math.sqrt(h ** 2 + 4 * s)\n        n2 = math.sqrt(h ** 2 - 4 * s)\n        b = 0.5 * (n1 + n2)\n        a = n1 - b\n        print(*sorted([a, b, h]))", "import math\nfor _ in range(int(input())):\n    (h, s) = map(int, input().split())\n    if h ** 2 - 4 * s >= 0:\n        x = math.sqrt(h ** 2 + 4 * s)\n        y = math.sqrt(h ** 2 - 4 * s)\n        a = (x + y) / 2\n        b = (x - y) / 2\n        print(b, a, h)\n    else:\n        print(-1)", "def power(x, y):\n    res = 1\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x\n        y = y >> 1\n        x = x * x\n    return res\nimport math\nt = int(input())\nfor i in range(t):\n    c = []\n    (h, s) = map(int, input().split())\n    x = power(h, 4) - 16 * power(s, 2)\n    if x < 0:\n        print(-1)\n    else:\n        b = math.sqrt((power(h, 2) - math.sqrt(x)) / 2)\n        a = math.sqrt((power(h, 2) + math.sqrt(x)) / 2)\n        c.append(h)\n        c.append(a)\n        c.append(b)\n        c.sort()\n        for j in c:\n            print('%.6f' % j, end=' ')\n        print('')", "import math\n__ = int(input())\nfor ___ in range(0, __):\n    (h, s) = map(int, input().split())\n    t = h ** 4 - 16 * s * s\n    if t < 0:\n        print(-1)\n    else:\n        t_sq = t ** 0.5\n        a1 = ((h * h + t_sq) / 2) ** 0.5\n        b1 = 2 * s / a1\n        print(*sorted([a1, b1, h]))", "t = int(input())\nfor _ in range(t):\n    s = input().split(' ')\n    (h, s) = (int(s[0]), int(s[1]))\n    if h ** 4 < 16 * s * s:\n        print(-1)\n    else:\n        d = (h ** 4 - 16 * s * s) ** 0.5\n        m = h * h + d\n        m = m / 2\n        a = m ** 0.5\n        b = 2 * s / a\n        print(*sorted([a, b, h]))", "import math\nfor __ in range(int(input())):\n    (H, S) = map(int, input().split())\n    D = H ** 4 - 16 * S ** 2\n    if D >= 0:\n        a = math.sqrt((H ** 2 + math.sqrt(D)) / 2)\n        b = math.sqrt((H ** 2 - math.sqrt(D)) / 2)\n        if a > b:\n            (a, b) = (b, a)\n        print(a, b, H)\n    else:\n        print(-1)", "import math\nfor i in range(int(input())):\n    (h, s) = map(int, input().split())\n    q = []\n    if h ** 2 < 4 * s:\n        print(-1)\n    else:\n        p = ((h ** 2 + (h ** 4 - 16 * s ** 2) ** (1 / 2)) / 2) ** (1 / 2)\n        b = 2 * s / p\n        qw = [p, b, h]\n        qw.sort()\n        print(*qw)", "t = int(input())\nfor _ in range(t):\n    (d, m) = map(int, input().split())\n    m *= 2\n    if 2 * m > d * d:\n        print(-1)\n    else:\n        a = pow(d * d + 2 * m, 0.5)\n        b = pow(d * d - 2 * m, 0.5)\n        x = (a + b) / 2\n        y = (a - b) / 2\n        l = [x, y, d]\n        l.sort()\n        print(*l)"]