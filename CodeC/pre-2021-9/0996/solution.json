["t = int(input())\nfor i in range(0, t):\n    s = input()\n    l = len(s)\n    next0 = [-1 for x in range(0, l)]\n    next1 = [-1 for x in range(0, l)]\n    lens = [0 for x in range(0, l)]\n    j = l - 1\n    z = o = 0\n    c = 1\n    n0 = -1\n    n1 = -1\n    while j >= 0:\n        lens[j] = c\n        next0[j] = n0\n        next1[j] = n1\n        if s[j] == '0':\n            z = 1\n            n0 = j\n        else:\n            o = 1\n            n1 = j\n        if z == 1 & o == 1:\n            c = c + 1\n            z = o = 0\n        j = j - 1\n    if n0 == -1:\n        print('0')\n        continue\n    if n1 == -1:\n        print('1')\n        continue\n    str = ''\n    j = n1\n    while True:\n        str = str + s[j]\n        if next0[j] == -1:\n            str = str + '0'\n            break\n        elif next1[j] == -1:\n            str = str + '1'\n            break\n        elif lens[next0[j]] <= lens[next1[j]]:\n            j = next0[j]\n        else:\n            j = next1[j]\n    print(str)", "t = int(input())\nfor i in range(0, t):\n    s = input()\n    l = len(s)\n    next0 = [-1 for x in range(0, l)]\n    next1 = [-1 for x in range(0, l)]\n    lens = [0 for x in range(0, l)]\n    j = l - 1\n    z = o = 0\n    c = 1\n    n0 = -1\n    n1 = -1\n    while j >= 0:\n        lens[j] = c\n        next0[j] = n0\n        next1[j] = n1\n        if s[j] == '0':\n            z = 1\n            n0 = j\n        else:\n            o = 1\n            n1 = j\n        if z == 1 & o == 1:\n            c = c + 1\n            z = o = 0\n        j = j - 1\n    if n0 == -1:\n        print('0')\n        continue\n    if n1 == -1:\n        print('1')\n        continue\n    str = ''\n    j = n1\n    while True:\n        str = str + s[j]\n        if next0[j] == -1:\n            str = str + '0'\n            break\n        elif next1[j] == -1:\n            str = str + '1'\n            break\n        elif lens[next0[j]] <= lens[next1[j]]:\n            j = next0[j]\n        else:\n            j = next1[j]\n    print(str)", "t = int(input())\nfor i in range(0, t):\n    s = input()\n    l = len(s)\n    next0 = [-1 for x in range(0, l)]\n    next1 = [-1 for x in range(0, l)]\n    lens = [0 for x in range(0, l)]\n    j = l - 1\n    z = o = 0\n    c = 1\n    n0 = -1\n    n1 = -1\n    while j >= 0:\n        lens[j] = c\n        next0[j] = n0\n        next1[j] = n1\n        if s[j] == '0':\n            z = 1\n            n0 = j\n        else:\n            o = 1\n            n1 = j\n        if z == 1 & o == 1:\n            c = c + 1\n            z = o = 0\n        j = j - 1\n    if n0 == -1:\n        print('0')\n        continue\n    if n1 == -1:\n        print('1')\n        continue\n    str = ''\n    j = n1\n    while True:\n        str = str + s[j]\n        if next0[j] == -1:\n            str = str + '0'\n            break\n        elif next1[j] == -1:\n            str = str + '1'\n            break\n        elif lens[next0[j]] <= lens[next1[j]]:\n            j = next0[j]\n        else:\n            j = next1[j]\n    print(str)", "t = int(input())\nfor i in range(0, t):\n    s = input()\n    l = len(s)\n    next0 = [-1 for x in range(0, l)]\n    next1 = [-1 for x in range(0, l)]\n    lens = [0 for x in range(0, l)]\n    j = l - 1\n    z = o = 0\n    c = 1\n    n0 = -1\n    n1 = -1\n    while j >= 0:\n        lens[j] = c\n        next0[j] = n0\n        next1[j] = n1\n        if s[j] == '0':\n            z = 1\n            n0 = j\n        else:\n            o = 1\n            n1 = j\n        if z == 1 & o == 1:\n            c = c + 1\n            z = o = 0\n        j = j - 1\n    if n0 == -1:\n        print('0')\n        continue\n    if n1 == -1:\n        print('1')\n        continue\n    str = ''\n    j = n1\n    while True:\n        str = str + s[j]\n        if next0[j] == -1:\n            str = str + '0'\n            break\n        elif next1[j] == -1:\n            str = str + '1'\n            break\n        elif lens[next0[j]] <= lens[next1[j]]:\n            j = next0[j]\n        else:\n            j = next1[j]\n    print(str)", "t = int(input())\nfor i in range(0, t):\n    s = input()\n    l = len(s)\n    next0 = [-1 for x in range(0, l)]\n    next1 = [-1 for x in range(0, l)]\n    lens = [0 for x in range(0, l)]\n    j = l - 1\n    z = o = 0\n    c = 1\n    n0 = -1\n    n1 = -1\n    while j >= 0:\n        lens[j] = c\n        next0[j] = n0\n        next1[j] = n1\n        if s[j] == '0':\n            z = 1\n            n0 = j\n        else:\n            o = 1\n            n1 = j\n        if z == 1 & o == 1:\n            c = c + 1\n            z = o = 0\n        j = j - 1\n    if n0 == -1:\n        print('0')\n        continue\n    if n1 == -1:\n        print('1')\n        continue\n    str = ''\n    j = n1\n    while True:\n        str = str + s[j]\n        if next0[j] == -1:\n            str = str + '0'\n            break\n        elif next1[j] == -1:\n            str = str + '1'\n            break\n        elif lens[next0[j]] <= lens[next1[j]]:\n            j = next0[j]\n        else:\n            j = next1[j]\n    print(str)", "t = int(input())\nfor i in range(0, t):\n    s = input()\n    l = len(s)\n    next0 = [-1 for x in range(0, l)]\n    next1 = [-1 for x in range(0, l)]\n    lens = [0 for x in range(0, l)]\n    j = l - 1\n    z = o = 0\n    c = 1\n    n0 = -1\n    n1 = -1\n    while j >= 0:\n        lens[j] = c\n        next0[j] = n0\n        next1[j] = n1\n        if s[j] == '0':\n            z = 1\n            n0 = j\n        else:\n            o = 1\n            n1 = j\n        if z == 1 & o == 1:\n            c = c + 1\n            z = o = 0\n        j = j - 1\n    if n0 == -1:\n        print('0')\n        continue\n    if n1 == -1:\n        print('1')\n        continue\n    str = ''\n    j = n1\n    while True:\n        str = str + s[j]\n        if next0[j] == -1:\n            str = str + '0'\n            break\n        elif next1[j] == -1:\n            str = str + '1'\n            break\n        elif lens[next0[j]] <= lens[next1[j]]:\n            j = next0[j]\n        else:\n            j = next1[j]\n    print(str)", "t = int(input())\nfor i in range(0, t):\n    s = input()\n    l = len(s)\n    next0 = [-1 for x in range(0, l)]\n    next1 = [-1 for x in range(0, l)]\n    lens = [0 for x in range(0, l)]\n    j = l - 1\n    z = o = 0\n    c = 1\n    n0 = -1\n    n1 = -1\n    while j >= 0:\n        lens[j] = c\n        next0[j] = n0\n        next1[j] = n1\n        if s[j] == '0':\n            z = 1\n            n0 = j\n        else:\n            o = 1\n            n1 = j\n        if z == 1 & o == 1:\n            c = c + 1\n            z = o = 0\n        j = j - 1\n    if n0 == -1:\n        print('0')\n        continue\n    if n1 == -1:\n        print('1')\n        continue\n    str = ''\n    j = n1\n    while True:\n        str = str + s[j]\n        if next0[j] == -1:\n            str = str + '0'\n            break\n        elif next1[j] == -1:\n            str = str + '1'\n            break\n        elif lens[next0[j]] <= lens[next1[j]]:\n            j = next0[j]\n        else:\n            j = next1[j]\n    print(str)", "t = int(input())\nfor i in range(0, t):\n    s = input()\n    l = len(s)\n    next0 = [-1 for x in range(0, l)]\n    next1 = [-1 for x in range(0, l)]\n    lens = [0 for x in range(0, l)]\n    j = l - 1\n    z = o = 0\n    c = 1\n    n0 = -1\n    n1 = -1\n    while j >= 0:\n        lens[j] = c\n        next0[j] = n0\n        next1[j] = n1\n        if s[j] == '0':\n            z = 1\n            n0 = j\n        else:\n            o = 1\n            n1 = j\n        if z == 1 & o == 1:\n            c = c + 1\n            z = o = 0\n        j = j - 1\n    if n0 == -1:\n        print('0')\n        continue\n    if n1 == -1:\n        print('1')\n        continue\n    str = ''\n    j = n1\n    while True:\n        str = str + s[j]\n        if next0[j] == -1:\n            str = str + '0'\n            break\n        elif next1[j] == -1:\n            str = str + '1'\n            break\n        elif lens[next0[j]] <= lens[next1[j]]:\n            j = next0[j]\n        else:\n            j = next1[j]\n    print(str)", "t = int(input())\nfor i in range(0, t):\n    s = input()\n    l = len(s)\n    next0 = [-1 for x in range(0, l)]\n    next1 = [-1 for x in range(0, l)]\n    lens = [0 for x in range(0, l)]\n    j = l - 1\n    z = o = 0\n    c = 1\n    n0 = -1\n    n1 = -1\n    while j >= 0:\n        lens[j] = c\n        next0[j] = n0\n        next1[j] = n1\n        if s[j] == '0':\n            z = 1\n            n0 = j\n        else:\n            o = 1\n            n1 = j\n        if z == 1 & o == 1:\n            c = c + 1\n            z = o = 0\n        j = j - 1\n    if n0 == -1:\n        print('0')\n        continue\n    if n1 == -1:\n        print('1')\n        continue\n    str = ''\n    j = n1\n    while True:\n        str = str + s[j]\n        if next0[j] == -1:\n            str = str + '0'\n            break\n        elif next1[j] == -1:\n            str = str + '1'\n            break\n        elif lens[next0[j]] <= lens[next1[j]]:\n            j = next0[j]\n        else:\n            j = next1[j]\n    print(str)", "t = int(input())\nfor i in range(0, t):\n    s = input()\n    l = len(s)\n    next0 = [-1 for x in range(0, l)]\n    next1 = [-1 for x in range(0, l)]\n    lens = [0 for x in range(0, l)]\n    j = l - 1\n    z = o = 0\n    c = 1\n    n0 = -1\n    n1 = -1\n    while j >= 0:\n        lens[j] = c\n        next0[j] = n0\n        next1[j] = n1\n        if s[j] == '0':\n            z = 1\n            n0 = j\n        else:\n            o = 1\n            n1 = j\n        if z == 1 & o == 1:\n            c = c + 1\n            z = o = 0\n        j = j - 1\n    if n0 == -1:\n        print('0')\n        continue\n    if n1 == -1:\n        print('1')\n        continue\n    str = ''\n    j = n1\n    while True:\n        str = str + s[j]\n        if next0[j] == -1:\n            str = str + '0'\n            break\n        elif next1[j] == -1:\n            str = str + '1'\n            break\n        elif lens[next0[j]] <= lens[next1[j]]:\n            j = next0[j]\n        else:\n            j = next1[j]\n    print(str)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    s_len = len(s)\n    next0 = [-1] * s_len\n    lastpos = -1\n    for i in range(s_len):\n        if s[i] == '0':\n            for j in range(lastpos + 1, i + 1):\n                next0[j] = i\n            lastpos = i\n    for i in range(lastpos + 1, s_len):\n        next0[i] = s_len\n    if next0[0] == s_len:\n        print('0')\n        continue\n    next1 = [-1] * s_len\n    lastpos = -1\n    for i in range(s_len):\n        if s[i] == '1':\n            for j in range(lastpos + 1, i + 1):\n                next1[j] = i\n            lastpos = i\n    for i in range(lastpos + 1, s_len):\n        next1[i] = s_len\n    dp = [-1] * (s_len + 2)\n    dp1 = [-1] * (s_len + 2)\n    dp[s_len] = dp[s_len + 1] = 0\n    dp1[s_len] = dp1[s_len + 1] = 0\n    for i in range(s_len - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and next1[i] < s_len:\n            dp[i] = max(dp[i], dp[next1[i] + 1] + 1)\n        if s[i] == '1' and next0[i] < s_len:\n            dp[i] = max(dp[i], dp[next0[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if next1[i] < s_len:\n            dp1[i] = max(dp1[i], dp[next1[i] + 1] + 1)\n    a_len = dp1[0] + 1\n    curr_id = next1[0] + 1\n    ans = '1'\n    for i in range(1, a_len):\n        if curr_id >= s_len:\n            ans += '0'\n            continue\n        if next0[curr_id] >= s_len:\n            ans += '0'\n            curr_id = next0[curr_id] + 1\n            continue\n        if dp[next0[curr_id] + 1] < a_len - i - 1:\n            ans += '0'\n            curr_id = next0[curr_id] + 1\n        else:\n            ans += '1'\n            curr_id = next1[curr_id] + 1\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    S = input()\n    n = len(S)\n    lenA = [0 for _ in range(n)]\n    count = 0\n    one = zero = False\n    for i in range(n - 1, -1, -1):\n        lenA[i] = count\n        if S[i] == '0':\n            zero = True\n        else:\n            one = True\n        if one and zero:\n            count += 1\n            one = zero = False\n    next1 = [None] * n\n    next0 = [None] * n\n    one = zero = None\n    for i in range(n - 1, -1, -1):\n        next1[i] = one\n        next0[i] = zero\n        if S[i] == '0':\n            zero = i\n        else:\n            one = i\n    if one == None:\n        print(1)\n    elif zero == None:\n        print(0)\n    else:\n        result = ['1']\n        i = one\n        while True:\n            if next0[i] == None:\n                result.append('0')\n                break\n            elif next1[i] == None:\n                result.append('1')\n                break\n            if lenA[next1[i]] >= lenA[next0[i]]:\n                i = next0[i]\n                result.append('0')\n            else:\n                i = next1[i]\n                result.append('1')\n        print(''.join(result))", "for _ in range(int(input())):\n    s = input()\n    inf = 10 ** 6\n    n = len(s)\n    next0 = [inf] * n\n    next1 = [inf] * n\n    n0 = inf\n    n1 = inf\n    for i in range(n - 1, -1, -1):\n        next0[i] = n0\n        next1[i] = n1\n        if s[i] == '1':\n            n1 = i\n        else:\n            n0 = i\n    if n1 == inf:\n        print('1')\n        continue\n    if n0 == inf:\n        print('0')\n        continue\n    len1 = [0] * n\n    one = False\n    zero = False\n    cnt = 0\n    for i in range(n - 1, -1, -1):\n        len1[i] = cnt\n        if s[i] == '1':\n            one = True\n        if s[i] == '0':\n            zero = True\n        if one and zero:\n            cnt += 1\n            one = False\n            zero = False\n    ans = []\n    curr = n1\n    while True:\n        ans.append(str(s[curr]))\n        p0 = next0[curr]\n        p1 = next1[curr]\n        if p0 == inf:\n            ans.append('0')\n            break\n        elif p1 == inf:\n            ans.append('1')\n            break\n        elif len1[p0] <= len1[p1]:\n            curr = p0\n        else:\n            curr = p1\n    print(''.join(ans))", "def q1():\n    s = list(map(int, input().split()))\n    s1 = list(map(int, input().split()))\n    l = [0, 0]\n    for i in range(3):\n        if s[i] > s1[i]:\n            l[0] += 1\n        elif s[i] < s1[i]:\n            l[1] += 1\n    print(*l, sep=' ')\n\ndef q3():\n\n    def add1(x, y):\n        if -1 < x < 6 and -1 < y < 6 and ((x, y) not in his) and (not l[x][y]):\n            his.add((x, y))\n            todo.append([x, y])\n    l = [list(map(int, input().split())) for _ in range(6)]\n    todo = [[0, 0]]\n    his = set()\n    while todo:\n        (x, y) = todo.pop()\n        if x == 5 and y == 5:\n            return 'Yes'\n        add1(x + 1, y)\n        add1(x - 1, y)\n        add1(x, y + 1)\n        add1(x, y - 1)\n    return 'No'\n\ndef zeros():\n    for _ in range(int(input())):\n        c = 0\n        num = 5\n        inp = int(input())\n        r = inp // num\n        while r:\n            c += r\n            num *= 5\n            r = inp // num\n        print(c)\n\ndef gennum(k, num1, num2):\n    s = num1 + num2\n    ans = str(num1) + str(num2)\n    tocheck = '8624'\n    for i in range(k - 2):\n        a = str(s)[-1]\n        s += int(a)\n        ans += a\n        if ans[-4:] == tocheck:\n            left = k - i - 3\n            r = left % 4\n            s += 20 * (left // 4)\n            if r >= 1:\n                s += 8\n            if r >= 2:\n                s += 6\n            if r == 3:\n                s += 2\n            break\n    return s\n\ndef divby3():\n    for _ in range(int(input())):\n        (k, n, n1) = map(int, input().split())\n        if not (n + n1) % 10:\n            print('NO')\n        elif not (n + n1) % 5:\n            print('NO' if (n + n1 + 5) % 3 else 'YES')\n        else:\n            print('NO' if gennum(k, n, n1) % 3 else 'YES')\n\ndef coinflip():\n\n    def c(coin, cs):\n        if cs == 1:\n            if coin % 2:\n                return coin // 2 + 1\n        return coin // 2\n    for _ in range(int(input())):\n        for _ in range(int(input())):\n            (state, coins, q) = map(int, input().split())\n            if state == 1:\n                print(c(coins, 2) if q == 1 else c(coins, 1))\n            else:\n                print(c(coins, 2) if q == 2 else c(coins, 1))\n\ndef q2():\n    for _ in range(int(input())):\n        s = int(input())\n        ma = 0\n        sum1 = 0\n        for i in input().split():\n            sum1 += int(i)\n            ma = max(ma, int(i))\n        print('Yes' if sum1 - ma * 2 > 0 else 'No')\n\ndef q4():\n\n    def rc(s, s1):\n        c = 0\n        if len(s1) != mnum:\n            return False\n        while c < mnum + 1 and s != s1:\n            s1 = s1[-1] + s1[:-1]\n            c += 1\n        if c >= mnum + 1:\n            return False\n        return c\n    num = int(input())\n    s = input().rstrip()\n    mal = 0\n    mnum = len(s)\n    minc = 0\n    maxc = 0\n    for _ in range(num - 1):\n        res = rc(s, input().rstrip())\n        if res is False:\n            return -1\n        if res:\n            minc += mnum - res\n            maxc -= res\n            mal = max(res, mal)\n    return min(maxc + mal * num, minc)\n\ndef q1cook():\n    for _ in range(int(input())):\n        (w1, w2, xl, xm, m) = map(int, input().split())\n        if xl * m <= w2 - w1 <= xm * m:\n            print(1)\n        else:\n            print(0)\n\ndef q2cook():\n    for _ in range(int(input())):\n        print(input().replace('party', 'pawri'))\n\ndef q3cook():\n    for _ in range(int(input())):\n        l = []\n        for i in range(1, 9999):\n            if i * i <= 10 ** 6:\n                l.append(i * i)\n            else:\n                break\n        print(l)\n        for i in l:\n            print(i)\n            s = input()\n            if s == '1':\n                break\nimport sys\ninput = sys.stdin.readline\n\ndef xor():\n\n    def findxor(n):\n        r = n % 4\n        if not r:\n            return n\n        if r == 1:\n            return 1\n        if r == 2:\n            return n + 1\n        return 0\n\n    def s(a, b):\n        return findxor(a - 1) ^ findxor(b)\n    for _ in range(int(input())):\n        (r, c, num) = map(int, input().split())\n        ans = 0\n        for i in range(1, c + 1):\n            n = num + i\n            ans = ans ^ s(n + 1, n + r)\n        print(ans)\n\ndef deletions():\n\n    def m(i):\n        nonlocal t\n        a = int(i)\n        if a:\n            t += 1\n        return a\n    for _ in range(int(input())):\n        (n, seg) = map(int, input().split())\n        t = 0\n        l = list(map(m, input().split()))\n        c = 0\n        nowsum = sum(l[:seg])\n        min1 = float('inf')\n        if nowsum:\n            min1 = nowsum\n        for i in range(1, n - seg + 1):\n            if l[i - 1]:\n                nowsum -= 1\n            if l[i + seg - 1]:\n                nowsum += 1\n            if nowsum:\n                if nowsum < min1:\n                    min1 = nowsum\n        if min1 == float('inf'):\n            print(0)\n            continue\n        if min1 % 2:\n            c += (min1 + 1) * (min1 // 2) + min1 // 2 + 1\n        else:\n            c += (min1 + 1) * (min1 // 2)\n        print(c + t - min1)\n\ndef xor2():\n    for _ in range(int(input())):\n        ans = 0\n        (n, m, k) = map(int, input().split())\n        for i in range(2, n + m + 1):\n            r = i - 1\n            if n < r:\n                if min(n, m - (r - n + 1) + 1) % 2:\n                    ans ^= i + k\n            elif min(r, m) % 2:\n                ans ^= i + k\n        print(ans)\n\ndef maxearn():\n    for _ in range(int(input())):\n        res = 0\n        for _ in range(int(input())):\n            (store, people, p) = map(int, input().split())\n            pr = people // (store + 1) * p\n            if res < pr:\n                res = pr\n        print(res)\n\ndef movies():\n    for _ in range(int(input())):\n        (n, x) = map(int, input().split())\n        ans = 0\n        for _ in range(n):\n            (space, rate) = input().split()\n            if int(space) <= x:\n                if ans < int(rate):\n                    ans = int(rate)\n        print(ans)\nimport math\n\ndef turnit():\n    for _ in range(int(input())):\n        (velo, maxv, maxdecre, daway) = map(int, input().split())\n        if velo <= maxv:\n            print('yes')\n            continue\n        if velo > maxdecre:\n            v = velo * velo - 2 * (velo - maxdecre) * daway\n            while v < 0:\n                v += 2 * daway\n            v = math.sqrt(v)\n        else:\n            v = velo * velo - 2 * daway\n            if v < 0:\n                v = velo\n            else:\n                v = math.sqrt(v)\n        if v < maxv:\n            print('yes')\n        else:\n            print('no')\n\ndef racing():\n    for _ in range(int(input())):\n        (sec, dt, mt) = input().split()\n        dt = int(dt) * 60\n        m = min(dt, int(sec))\n        res = m\n        dt -= m\n        res += dt * 2\n        print('YES' if res <= int(mt) * 60 else 'NO')\n\ndef light():\n    for _ in range(int(input())):\n        (arrivetime, timemax, ability) = map(int, input().split())\n        candlesall = arrivetime * ability + 1\n        if arrivetime >= timemax:\n            candlesdead = (arrivetime - timemax) * ability + 1\n            print(candlesall - candlesdead)\n        else:\n            print(candlesall)\n\ndef lunchtime():\n    for _ in range(int(input())):\n        num = int(input())\n        l = input().split()\n        ans = []\n        for i in range(num):\n            nowv = int(l[i])\n            c = 0\n            for left in range(i - 1, -1, -1):\n                v = int(l[left])\n                if v == nowv:\n                    c += 1\n                elif v > nowv:\n                    break\n            for right in range(i + 1, num):\n                v = int(l[right])\n                if v == nowv:\n                    c += 1\n                elif v > nowv:\n                    break\n            ans.append(c)\n        print(*ans, sep=' ')\n\ndef turncor():\n    for _ in range(int(input())):\n        (u, v, a, s) = map(int, input().split())\n        if v * v >= u * u - 2 * a * s:\n            print('yes')\n        else:\n            print('no')\n\ndef makeeven():\n    for _ in range(int(input())):\n        num = int(input())\n        s = 0\n        t = False\n        for i in input().split():\n            v = int(i)\n            s += v\n            if v == 2:\n                t = True\n        if s % 2:\n            print(1 if t else -1)\n        else:\n            print(0)\nimport collections\n\ndef lunchtimecor():\n    for _ in range(int(input())):\n        l = collections.deque()\n        num = int(input())\n        ans = [0] * num\n        c = 0\n        counter = collections.defaultdict(int)\n        for i in input().split():\n            nv = int(i)\n            if l:\n                dv = 0\n                while l and l[-1][0] < nv:\n                    t = l.pop()\n                    if not dv:\n                        dv = t[0]\n                    elif dv != t[0]:\n                        counter[dv] = 0\n                        dv = t[0]\n                    ans[t[1]] = counter[t[0]] - 1\n                if dv:\n                    counter[dv] = 0\n            counter[nv] += 1\n            l.append([nv, c])\n            c += 1\n        for i in l:\n            ans[i[1]] = counter[i[0]] - 1\n        print(*ans, sep=' ')\nimport collections\n\ndef pair():\n    if max(list(collections.Counter(map(int, input().split())).values())) > 1:\n        print('yes')\n    else:\n        print('no')\n\ndef worldrec():\n    for _ in range(int(input())):\n        (k1, k2, k3, v) = map(float, input().split())\n        num = round(100 / (k1 * k2 * k3 * v), 2)\n        print('yes' if num < 9.58 else 'no')\n\ndef strlan():\n    for _ in range(int(input())):\n        (l, plan) = map(int, input().split())\n        c = 0\n        for i in input():\n            if i == '*':\n                c += 1\n            else:\n                c = 0\n            if c == plan:\n                print('yes')\n                break\n        else:\n            print('no')\n\ndef maxpip():\n    for _ in range(int(input())):\n        dies = int(input())\n        if dies <= 4:\n            print(dies * 20)\n        if dies <= 12:\n            avg = dies // 4\n            leftover = dies % 4\n            s = 4 - leftover\n            if not avg:\n                print(leftover * 20)\n            elif avg == 1:\n                print(leftover * 36 + s * 20)\n            elif avg == 2:\n                print(leftover * 51 + s * 36)\n            else:\n                print(s * 51)\n        else:\n            ans = 51 * 3\n            dies -= 9\n            layers = dies // 4\n            left = dies % 4\n            ans += layers * 44\n            if not left:\n                print(ans + 4 * 3)\n            elif left == 1:\n                print(ans + 20 + 3 * 3)\n            elif left == 2:\n                print(ans + 36 + 2 * 3)\n            else:\n                print(ans + 51 + 1 * 3)\n\ndef dies():\n\n    def c(num):\n        if not num:\n            return 0\n        if num == 1:\n            return 20\n        return 51 if num == 3 else 36\n    for i in range(int(input())):\n        dice = int(input())\n        layers = dice // 4\n        left = dice % 4\n        calc = (4 - left) * 4\n        if layers:\n            addon = 0\n        else:\n            addon = -calc\n        print(layers * 44 + c(left) + addon + calc)\n\ndef binarystr():\n    for _ in range(int(input())):\n        s = input()\n        lens = len(s)\n        num = 0\n        while True:\n            s1 = bin(num)[2:]\n            lens1 = len(s1)\n            pos = 0\n            pos1 = 0\n            while pos < lens and pos1 < lens1:\n                if s1[pos1] == s[pos]:\n                    pos1 += 1\n                pos += 1\n            if pos1 != lens1:\n                break\n            num += 1\n        print(s1, num)\nfrom itertools import repeat\n\ndef worthymatix():\n    for _ in range(int(input())):\n        (rows, cols, avgnum) = map(int, input().split())\n        l = [[int(i) - avgnum for i in input().split()] for _ in repeat(None, rows)]\n        ans = 0\n        for i in range(rows):\n            for i1 in range(cols):\n                if l[i][i1] >= 0:\n                    s = 0\n                    c = 0\n                    limit = min(i, i1)\n                    while c <= limit:\n                        start = i1 - c\n                        for up in range(i, i - c - 1, -1):\n                            s += l[up][start]\n                        s += sum(l[i - c][i1 - c + 1:i1 + 1])\n                        if s < 0:\n                            break\n                        c += 1\n                        ans += 1\n        print(ans)\n\ndef worthymatrix():\n\n    def decide(x, y, l):\n        now = prefix[x + l - 1][y + l - 1]\n        if x:\n            now -= prefix[x - 1][y + l - 1]\n        if y:\n            now -= prefix[x + l - 1][y - 1]\n        if x and y:\n            now += prefix[x - 1][y - 1]\n        return now / (l * l) >= avgnum\n    for _ in range(int(input())):\n        (rows, cols, avgnum) = map(int, input().split())\n        prefix = [[0] * cols for _ in range(rows)]\n        for i in range(rows):\n            s = input().split()\n            for i1 in range(cols):\n                now = 0\n                if i1:\n                    now += prefix[i][i1 - 1]\n                if i:\n                    now += prefix[i - 1][i1]\n                now += int(s[i1])\n                if i and i1:\n                    now -= prefix[i - 1][i1 - 1]\n                prefix[i][i1] = now\n        ans = 0\n        for i in range(rows):\n            for i1 in range(cols):\n                mar = min(rows - i, cols - i1)\n                (l, r) = (0, mar + 1)\n                while l < r - 1:\n                    m = (l + r) // 2\n                    if decide(i, i1, m):\n                        r = m\n                    else:\n                        l = m\n                ans += mar - r + 1\n        print(ans)\n\ndef binarystrmex():\n    for _ in range(int(input())):\n        s = input().rstrip()\n        lens = len(s)\n        next0 = [0] * lens\n        next1 = next0[:]\n        n0 = float('inf')\n        n1 = n0\n        one = False\n        zero = False\n        c = 0\n        countl = next1[:]\n        for i in range(lens - 1, -1, -1):\n            next0[i] = n0\n            next1[i] = n1\n            countl[i] = c\n            if s[i] == '1':\n                n1 = i\n                one = True\n            else:\n                n0 = i\n                zero = True\n            if one and zero:\n                zero = one = False\n                c += 1\n        inf = float('inf')\n        if n0 == inf:\n            print('0')\n            continue\n        if n1 == inf:\n            print('1')\n            continue\n        curr = n1\n        ans = ['1']\n        while True:\n            (pos0, pos1) = (next0[curr], next1[curr])\n            if pos0 == inf:\n                ans.append('0')\n                break\n            if pos1 == inf:\n                ans.append('1')\n                break\n            if countl[pos0] <= countl[pos1]:\n                ans.append('0')\n                curr = pos0\n            else:\n                ans.append('1')\n                curr = pos1\n        print(''.join(ans))\nbinarystrmex()", "T = int(input())\nfor _ in range(T):\n    S = input()\n    n = len(S)\n    lenA = [0 for _ in range(n)]\n    count = 0\n    one = zero = False\n    for i in range(n - 1, -1, -1):\n        lenA[i] = count\n        if S[i] == '0':\n            zero = True\n        else:\n            one = True\n        if one and zero:\n            count += 1\n            one = zero = False\n    next1A = [None] * n\n    next0A = [None] * n\n    one = zero = None\n    for i in range(n - 1, -1, -1):\n        next1A[i] = one\n        next0A[i] = zero\n        if S[i] == '0':\n            zero = i\n        else:\n            one = i\n    if one == None:\n        print(1)\n    elif zero == None:\n        print(0)\n    else:\n        ans = ['1']\n        i = one\n        while True:\n            if next0A[i] == None:\n                ans.append('0')\n                break\n            elif next1A[i] == None:\n                ans.append('1')\n                break\n            if lenA[next1A[i]] >= lenA[next0A[i]]:\n                i = next0A[i]\n                ans.append('0')\n            else:\n                i = next1A[i]\n                ans.append('1')\n        print(''.join(ans))", "import math\ntry:\n    t = int(input())\n    while t:\n        t -= 1\n        s = input()\n        n = len(s)\n        l = [0] * n\n        c = 0\n        next0 = [0] * n\n        next1 = [0] * n\n        (n0, n1) = (n, n)\n        for i in range(n - 1, -1, -1):\n            next0[i] = n0\n            next1[i] = n1\n            if s[i] == '1':\n                n1 = i\n            else:\n                n0 = i\n        if n0 == n:\n            print(0)\n            continue\n        elif n1 == n:\n            print(1)\n            continue\n        z = False\n        o = False\n        i = n - 1\n        while i > 0:\n            if s[i] == s[i - 1]:\n                l[i - 1] = c\n            else:\n                l[i - 1] = c\n                i -= 1\n                c += 1\n                if i - 1 >= 0:\n                    l[i - 1] = c\n            i -= 1\n        curr = n1\n        ans = ''\n        one = 0\n        zero = 0\n        while 1:\n            ans += s[curr]\n            (one, zero) = (next1[curr], next0[curr])\n            if zero == n:\n                ans += '0'\n                break\n            if one == n:\n                ans += '1'\n                break\n            if l[one] >= l[zero]:\n                curr = zero\n            else:\n                curr = one\n        print(ans)\nexcept:\n    pass", "import math\ntry:\n    t = int(input())\n    while t:\n        t -= 1\n        s = input()\n        n = len(s)\n        l = [0] * n\n        c = 0\n        next0 = [0] * n\n        next1 = [0] * n\n        (n0, n1) = (n, n)\n        for i in range(n - 1, -1, -1):\n            next0[i] = n0\n            next1[i] = n1\n            if s[i] == '1':\n                n1 = i\n            else:\n                n0 = i\n        if n0 == n:\n            print(0)\n            continue\n        elif n1 == n:\n            print(1)\n            continue\n        z = False\n        o = False\n        i = n - 1\n        while i > -1:\n            l[i] = c\n            if s[i] == '1':\n                o = True\n            if s[i] == '0':\n                z = True\n            if o and z:\n                c += 1\n                (o, z) = (False, False)\n            i -= 1\n        curr = n1\n        ans = ''\n        one = 0\n        zero = 0\n        while 1:\n            ans += s[curr]\n            (one, zero) = (next1[curr], next0[curr])\n            if zero == n:\n                ans += '0'\n                break\n            if one == n:\n                ans += '1'\n                break\n            if l[one] >= l[zero]:\n                curr = zero\n            else:\n                curr = one\n        print(ans)\nexcept:\n    pass", "def get_indices(l, i):\n    n = len(l)\n    (x, y) = (-1, -1)\n    while i < n:\n        if l[i] == '0' and x == -1:\n            x = i\n        if l[i] == '1' and y == -1:\n            y = i\n        if x != -1 and y != -1:\n            return (x, y)\n        i += 1\n    if x == -1:\n        return (i, y)\n    if y == -1:\n        return (x, i)\n\ndef solve2():\n    s = input()\n    n = len(s)\n    cnt = list()\n    one = zero = False\n    ans = 0\n    (ones, zeros) = (0, 0)\n    for i in range(n - 1, -1, -1):\n        if one and zero:\n            ans += 1\n            cnt.append(ans)\n            one = zero = False\n        else:\n            cnt.append(ans)\n        if s[i] == '1':\n            one = True\n            ones += 1\n        else:\n            zero = True\n            zeros += 1\n    if cnt[0] == 0:\n        if zeros == 0:\n            return zeros\n        if ones == 0:\n            return 1\n    cnt.reverse()\n    ret = '1'\n    i = 0\n    while i < n and s[i] != '1':\n        i += 1\n    while i < n:\n        (a, b) = get_indices(s, i + 1)\n        if a == n:\n            ret += '0'\n            break\n        if b == n:\n            ret += '1'\n            break\n        if cnt[a] <= cnt[b]:\n            ret += '0'\n            i = a\n        else:\n            ret += '1'\n            i = b\n    return ret\nfor i in range(int(input())):\n    print(solve2())", "n1 = int(input())\nfor i in range(n1):\n    s = input()\n    if '0' not in s:\n        print(0)\n    elif '1' not in s:\n        print(1)\n    else:\n        n = len(s)\n        l = [0] * n\n        cnt = 0\n        one = False\n        zero = False\n        for j in range(n - 1, -1, -1):\n            l[j] = cnt\n            if s[j] == '1':\n                one = True\n            if s[j] == '0':\n                zero = True\n            if one and zero:\n                cnt += 1\n                zero = False\n                one = False\n        p = s.find('1')\n        f = ''\n        while True:\n            f += s[p]\n            p0 = s.find('0', p + 1)\n            p1 = s.find('1', p + 1)\n            if p0 == -1:\n                f += '0'\n                break\n            if p1 == -1:\n                f += '1'\n                break\n            if l[p0] <= l[p1]:\n                p = p0\n            else:\n                p = p1\n        print(f)", "n1 = int(input())\nfor i in range(n1):\n    s = input()\n    if '0' not in s:\n        print(0)\n    elif '1' not in s:\n        print(1)\n    else:\n        n = len(s)\n        l = [0] * n\n        cnt = 0\n        one = False\n        zero = False\n        for j in range(n - 1, -1, -1):\n            l[j] = cnt\n            if s[j] == '1':\n                one = True\n            if s[j] == '0':\n                zero = True\n            if one and zero:\n                cnt += 1\n                zero = False\n                one = False\n        p = s.find('1')\n        f = ''\n        while True:\n            f += s[p]\n            p0 = s.find('0', p + 1)\n            p1 = s.find('1', p + 1)\n            if p0 == -1:\n                f += '0'\n                break\n            if p1 == -1:\n                f += '1'\n                break\n            if l[p0] <= l[p1]:\n                p = p0\n            else:\n                p = p1\n        print(f)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    if s.count('0') == 0:\n        print(0)\n    elif s.count('1') == 0:\n        print(1)\n    else:\n        n = len(s)\n        l = [0] * n\n        cnt = 0\n        one = 0\n        zero = 0\n        for i in range(n - 1, -1, -1):\n            l[i] = cnt\n            if s[i] == '1':\n                one = 1\n            if s[i] == '0':\n                zero = 1\n            if zero and one:\n                cnt += 1\n                one = 0\n                zero = 0\n        s1 = ''\n        ind = 0\n        for i in range(n):\n            if s[i] == '1':\n                s1 += '1'\n                ind = i\n                break\n        zero = 0\n        one = 0\n        a1 = b1 = 0\n        a2 = b2 = 0\n        i = ind + 1\n        while i < n:\n            if zero == 0 and s[i] == '0':\n                zero = 1\n                a1 = i\n                b1 = l[i]\n            if one == 0 and s[i] == '1':\n                one = 1\n                a2 = i\n                b2 = l[i]\n            if one and zero:\n                if b1 < b2:\n                    s1 += '0'\n                    i = a1 + 1\n                elif b1 > b2:\n                    s1 += '1'\n                    i = a2 + 1\n                else:\n                    s1 += '0'\n                    i += 1\n                one = 0\n                zero = 0\n            else:\n                i += 1\n        if one == 0 and zero == 1:\n            s1 += '1'\n        elif zero == 0 and one == 1:\n            s1 += '0'\n        else:\n            s1 += '0'\n        print(s1)", "T = int(input())\nmaxn = 10 ** 6 + 2\nfor _ in range(T):\n    S = input()\n    N = len(S)\n    next0 = [N for i in range(N)]\n    next1 = [N for i in range(N)]\n    n0 = maxn\n    n1 = maxn\n    for i in range(N - 1, -1, -1):\n        next0[i] = n0\n        next1[i] = n1\n        if S[i] == '1':\n            n1 = i\n        else:\n            n0 = i\n    if n0 == maxn:\n        print(0)\n        continue\n    if n1 == maxn:\n        print(1)\n        continue\n    (zero, one) = (False, False)\n    count = 0\n    length = [''] * N\n    for i in range(N - 1, -1, -1):\n        length[i] = count\n        if S[i] == '0':\n            zero = True\n        if S[i] == '1':\n            one = True\n        if one and zero:\n            count += 1\n            (zero, one) = (False, False)\n    ans = ''\n    curr = n1\n    while 1:\n        ans += S[curr]\n        (p1, p0) = (next1[curr], next0[curr])\n        if p0 == maxn:\n            ans += '0'\n            break\n        if p1 == maxn:\n            ans += '1'\n            break\n        if length[p0] <= length[p1]:\n            curr = p0\n        else:\n            curr = p1\n    print(ans)", "import sys\ninf = float('inf')\n\ndef solve(s):\n    n = len(s)\n    next1 = [inf] * n\n    next0 = [inf] * n\n    n0 = inf\n    n1 = inf\n    for i in range(n - 1, -1, -1):\n        next1[i] = n1\n        next0[i] = n0\n        if s[i] == '1':\n            n1 = i\n        else:\n            n0 = i\n    if n0 == inf:\n        return '0'\n    if n1 == inf:\n        return '1'\n    one = zero = False\n    dp = [0] * n\n    count = 0\n    for i in range(n - 1, -1, -1):\n        dp[i] = count\n        if s[i] == '1':\n            one = True\n        if s[i] == '0':\n            zero = True\n        if one and zero:\n            count += 1\n            one = zero = False\n    res = ''\n    curr = n1\n    while True:\n        res += s[curr]\n        p0 = next0[curr]\n        p1 = next1[curr]\n        if p0 == inf:\n            res += '0'\n            break\n        if p1 == inf:\n            res += '1'\n            break\n        if dp[p0] <= dp[p1]:\n            curr = p0\n        else:\n            curr = p1\n    return res\nT = int(input())\nfor _ in range(T):\n    s = input()\n    print(solve(s))", "import sys\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    next0 = [n] * n\n    next1 = [n] * n\n    (n0, n1) = (n, n)\n    for i in range(n - 1, -1, -1):\n        next0[i] = n0\n        next1[i] = n1\n        if s[i] == '1':\n            n1 = i\n        else:\n            n0 = i\n    length = [0] * n\n    (zero, one) = (False, False)\n    cnt = 0\n    if n0 == n:\n        print('0')\n        continue\n    if n1 == n:\n        print('1')\n        continue\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            zero = True\n        if s[i] == '1':\n            one = True\n        length[i] = cnt\n        if one and zero:\n            cnt += 1\n            (zero, one) = (False, False)\n    ans = ''\n    curr = n1\n    while True:\n        ans += s[curr]\n        (p0, p1) = (next0[curr], next1[curr])\n        if p0 == n:\n            ans += '0'\n            break\n        if p1 == n:\n            ans += '1'\n            break\n        if length[p0] <= length[p1]:\n            curr = p0\n        else:\n            curr = p1\n    print(ans)", "import sys\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\nt = int(input_())\nfor _ in range(t):\n    s = input_()\n    n = len(s)\n    inf = n\n    n0 = inf\n    n1 = inf\n    next0 = [0] * n\n    next1 = [0] * n\n    for i in range(n - 1, -1, -1):\n        next0[i] = n0\n        next1[i] = n1\n        if s[i] == '1':\n            n1 = i\n        else:\n            n0 = i\n    if n1 == inf:\n        print('1')\n        continue\n    if n0 == inf:\n        print('0')\n        continue\n    length = [0] * n\n    one = False\n    two = False\n    cnt = 0\n    for i in range(n - 1, -1, -1):\n        length[i] = cnt\n        if s[i] == '1':\n            one = True\n        else:\n            two = True\n        if one and two:\n            cnt += 1\n            (one, two) = (False, False)\n    ans = ''\n    cur = n1\n    while True:\n        ans += s[cur]\n        (p0, p1) = (next0[cur], next1[cur])\n        if p0 == n:\n            ans += '0'\n            break\n        if p1 == n:\n            ans += '1'\n            break\n        if length[p0] <= length[p1]:\n            cur = p0\n        else:\n            cur = p1\n    print(ans)", "import sys\ninf = sys.maxsize\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    next0 = [inf] * n\n    next1 = [inf] * n\n    (n0, n1) = (inf, inf)\n    for i in range(n - 1, -1, -1):\n        next0[i] = n0\n        next1[i] = n1\n        if s[i] == '0':\n            n0 = i\n        else:\n            n1 = i\n    if n0 == inf:\n        print('0')\n        continue\n    if n1 == inf:\n        print('1')\n        continue\n    ln = [0] * n\n    one = zero = False\n    count = 0\n    for i in range(n - 1, -1, -1):\n        ln[i] = count\n        if s[i] == '0':\n            zero = True\n        if s[i] == '1':\n            one = True\n        if zero and one:\n            count += 1\n            zero = one = False\n    ans = ''\n    curr = n1\n    while True:\n        ans += s[curr]\n        p0 = next0[curr]\n        p1 = next1[curr]\n        if p0 == inf:\n            ans += '0'\n            break\n        if p1 == inf:\n            ans += '1'\n            break\n        if ln[p0] <= ln[p1]:\n            curr = p0\n        else:\n            curr = p1\n    print(ans)", "def solve(s):\n    n = len(s)\n    next0 = [mx] * n\n    next1 = [mx] * n\n    (n0, n1) = (mx, mx)\n    for i in range(n - 1, -1, -1):\n        next0[i] = n0\n        next1[i] = n1\n        if s[i] == '1':\n            n1 = i\n        else:\n            n0 = i\n    if n0 == mx:\n        return 0\n    if n1 == mx:\n        return 1\n    dplen = [0] * n\n    (one, zero) = (False, False)\n    count = 0\n    for i in range(n - 1, -1, -1):\n        dplen[i] = count\n        if s[i] == '0':\n            zero = True\n        if s[i] == '1':\n            one = True\n        if one and zero:\n            count += 1\n            (one, zero) = (False, False)\n    ans = ''\n    curr = n1\n    while True:\n        ans += s[curr]\n        p0 = next0[curr]\n        p1 = next1[curr]\n        if p0 == mx:\n            ans += '0'\n            break\n        if p1 == mx:\n            ans += '1'\n            break\n        if dplen[p0] <= dplen[p1]:\n            curr = p0\n        else:\n            curr = p1\n    return ans\nmx = 1000005\nfor t in range(int(input())):\n    s = input()\n    print(solve(s))", "from collections import Counter\nfor _ in range(int(input())):\n    s = list(input())\n    c = Counter(s)\n    if c['0'] == 0:\n        print(0)\n        continue\n    n = len(s)\n    num0 = [0] * n\n    num1 = [0] * n\n    last_pos = n\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            last_pos = i\n        num0[i] = last_pos\n    last_pos = n\n    for i in range(n - 1, -1, -1):\n        if s[i] == '1':\n            last_pos = i\n        num1[i] = last_pos\n    dp = [0] * (n + 2)\n    dp1 = [0] * (n + 2)\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and num1[i] < n:\n            dp[i] = max(dp[i], dp[num1[i] + 1] + 1)\n        if s[i] == '1' and num0[i] < n:\n            dp[i] = max(dp[i], dp[num0[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if num1[i] < n:\n            dp1[i] = max(dp1[i], dp[num1[i] + 1] + 1)\n    l = dp1[0] + 1\n    x = num1[0] + 1\n    ans = ['1']\n    for i in range(1, l):\n        if x >= n:\n            ans.append('0')\n            continue\n        if num0[x] >= n:\n            ans.append('0')\n            x = num0[x] + 1\n            continue\n        if dp[num0[x] + 1] < l - i - 1:\n            ans.append('0')\n            x = num0[x] + 1\n        else:\n            ans.append('1')\n            x = num1[x] + 1\n    print(''.join(ans))", "t = int(input())\nfor _ in range(t):\n    s = input()\n    dp = [0] * len(s)\n    zero = one = False\n    flag = 0\n    for i in range(len(s) - 1, -1, -1):\n        if zero and one:\n            zero = one = False\n            dp[i] = dp[i + 1] + 1\n            flag = 1\n        elif flag == 1:\n            dp[i] = dp[i + 1]\n        if s[i] == '0':\n            zero = True\n        if s[i] == '1':\n            one = True\n    next0 = [0] * len(s)\n    next1 = [0] * len(s)\n    n0 = n1 = float('inf')\n    for i in range(len(s) - 1, -1, -1):\n        next0[i] = n0\n        next1[i] = n1\n        if s[i] == '0':\n            n0 = i\n        if s[i] == '1':\n            n1 = i\n    if n1 == float('inf'):\n        print('1')\n        continue\n    if n0 == float('inf'):\n        print('0')\n        continue\n    result = '1'\n    i = n1\n    while True:\n        n0 = next0[i]\n        n1 = next1[i]\n        if n0 == float('inf'):\n            result += '0'\n            break\n        elif n1 == float('inf'):\n            result += '1'\n            break\n        elif dp[n0] <= dp[n1]:\n            result += '0'\n            i = n0\n        else:\n            result += '1'\n            i = n1\n    print(result)", "for t in range(int(input())):\n    a = input()\n    if '0' not in a:\n        print(0)\n        continue\n    if '1' not in a:\n        print(1)\n        continue\n    n = len(a)\n    for i in range(n):\n        if a[i] == '1':\n            a = a[i + 1:]\n            break\n    if a == '':\n        print(10)\n        continue\n    n = len(a)\n    next0 = [-1 for i in range(n)]\n    next1 = [-1 for i in range(n)]\n    b = [0 for i in range(n)]\n    p0 = -1\n    p1 = -1\n    s = set()\n    c = 0\n    for i in range(n - 1, -1, -1):\n        b[i] = c\n        next0[i] = p0\n        next1[i] = p1\n        if a[i] == '1':\n            p1 = i\n        else:\n            p0 = i\n        s.add(a[i])\n        if '0' in s and '1' in s:\n            c += 1\n            s = set()\n    ans = '1'\n    while 1:\n        if p0 == -1:\n            ans += '0'\n            break\n        elif p1 == -1:\n            ans += '1'\n            break\n        if b[p0] <= b[p1]:\n            ans += '0'\n            p1 = next1[p0]\n            p0 = next0[p0]\n        else:\n            ans += '1'\n            p0 = next0[p1]\n            p1 = next1[p1]\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    s = list(input())\n    c = Counter(s)\n    if c['0'] == 0:\n        print(0)\n        continue\n    n = len(s)\n    num0 = [0] * n\n    num1 = [0] * n\n    last_pos = n\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            last_pos = i\n        num0[i] = last_pos\n    last_pos = n\n    for i in range(n - 1, -1, -1):\n        if s[i] == '1':\n            last_pos = i\n        num1[i] = last_pos\n    dp = [0] * (n + 2)\n    dp1 = [0] * (n + 2)\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and num1[i] < n:\n            dp[i] = max(dp[i], dp[num1[i] + 1] + 1)\n        if s[i] == '1' and num0[i] < n:\n            dp[i] = max(dp[i], dp[num0[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if num1[i] < n:\n            dp1[i] = max(dp1[i], dp[num1[i] + 1] + 1)\n    l = dp1[0] + 1\n    x = num1[0] + 1\n    ans = ['1']\n    for i in range(1, l):\n        if x >= n:\n            ans.append('0')\n        elif num0[x] >= n:\n            ans.append('0')\n            x = num0[x] + 1\n        elif dp[num0[x] + 1] < l - i - 1:\n            ans.append('0')\n            x = num0[x] + 1\n        else:\n            ans.append('1')\n            x = num1[x] + 1\n    print(''.join(ans))", "from collections import Counter\nfor _ in range(int(input())):\n    s = list(input())\n    c = Counter(s)\n    if c['0'] == 0:\n        print(0)\n        continue\n    n = len(s)\n    num0 = [0] * n\n    num1 = [0] * n\n    last_pos = n\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            last_pos = i\n        num0[i] = last_pos\n    last_pos = n\n    for i in range(n - 1, -1, -1):\n        if s[i] == '1':\n            last_pos = i\n        num1[i] = last_pos\n    dp = [0] * (n + 2)\n    dp1 = [0] * (n + 2)\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and num1[i] < n:\n            dp[i] = max(dp[i], dp[num1[i] + 1] + 1)\n        if s[i] == '1' and num0[i] < n:\n            dp[i] = max(dp[i], dp[num0[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if num1[i] < n:\n            dp1[i] = max(dp1[i], dp[num1[i] + 1] + 1)\n    l = dp1[0] + 1\n    x = num1[0] + 1\n    ans = ['1']\n    for i in range(1, l):\n        if x >= n:\n            ans.append('0')\n            continue\n        if num0[x] >= n:\n            ans.append('0')\n            x = num0[x] + 1\n            continue\n        if dp[num0[x] + 1] < l - i - 1:\n            ans.append('0')\n            x = num0[x] + 1\n        else:\n            ans.append('1')\n            x = num1[x] + 1\n    print(''.join(ans))", "from collections import Counter\nfor _ in range(int(input())):\n    s = list(input())\n    c = Counter(s)\n    if c['0'] == 0:\n        print(0)\n        continue\n    n = len(s)\n    num0 = [0] * n\n    num1 = [0] * n\n    last_pos = n\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            last_pos = i\n        num0[i] = last_pos\n    last_pos = n\n    for i in range(n - 1, -1, -1):\n        if s[i] == '1':\n            last_pos = i\n        num1[i] = last_pos\n    dp = [0] * (n + 2)\n    dp1 = [0] * (n + 2)\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and num1[i] < n:\n            dp[i] = max(dp[i], dp[num1[i] + 1] + 1)\n        if s[i] == '1' and num0[i] < n:\n            dp[i] = max(dp[i], dp[num0[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if num1[i] < n:\n            dp1[i] = max(dp1[i], dp[num1[i] + 1] + 1)\n    l = dp1[0] + 1\n    x = num1[0] + 1\n    ans = ['1']\n    for i in range(1, l):\n        if x >= n:\n            ans.append('0')\n            continue\n        if num0[x] >= n:\n            ans.append('0')\n            x = num0[x] + 1\n            continue\n        if dp[num0[x] + 1] < l - i - 1:\n            ans.append('0')\n            x = num0[x] + 1\n        else:\n            ans.append('1')\n            x = num1[x] + 1\n    print(''.join(ans))", "import io, os\n\ndef get_result_bound_length(main_string):\n    current_pattern = main_string[-1:]\n    pattern_list = []\n    pattern_count = 0\n    for i in range(len(main_string) - 1, -1, -1):\n        pattern_list.append(pattern_count)\n        if main_string[i] != current_pattern:\n            pattern_count += 1\n            if i > 0:\n                current_pattern = main_string[i - 1]\n    pattern_list.append(pattern_count)\n    pattern_list.reverse()\n    return pattern_list\n\ndef is_subsequence(main_string, test_string):\n    i = 0\n    for j in range(len(main_string)):\n        if test_string[i] == main_string[j]:\n            i += 1\n        if i == len(test_string):\n            return True\n    if i == len(test_string):\n        return True\n    else:\n        return False\nrearBit0 = [0 for _ in range(pow(10, 6) + 10)]\nrearBit1 = [0 for _ in range(pow(10, 6) + 10)]\nfor _ in range(int(input())):\n    superArray = []\n    mex = ''\n    lastIdx = -1\n    binaryString = input()\n    stringLen = len(binaryString)\n    for i in range(stringLen):\n        if binaryString[i] == '0':\n            for j in range(lastIdx + 1, i + 1):\n                rearBit0[j] = i\n            lastIdx = i\n    for i in range(lastIdx + 1, stringLen + 3):\n        rearBit0[i] = stringLen\n    if rearBit0[0] == stringLen:\n        print(0)\n        continue\n    lastIdx = -1\n    for i in range(stringLen):\n        if binaryString[i] == '1':\n            for j in range(lastIdx + 1, i + 1):\n                rearBit1[j] = i\n            lastIdx = i\n    for i in range(lastIdx + 1, stringLen + 3):\n        rearBit1[i] = stringLen\n    superArray = get_result_bound_length(binaryString)\n    n = len(superArray)\n    for i in range(n, n + 4):\n        superArray.append(0)\n    length = superArray[0] + 1\n    currIdx = rearBit1[0] + 1\n    mex += '1'\n    for i in range(1, length):\n        if currIdx >= stringLen:\n            mex += '0'\n            continue\n        if rearBit0[currIdx] >= stringLen:\n            mex += '0'\n            currIdx = rearBit0[currIdx] + 1\n            continue\n        if superArray[rearBit0[currIdx] + 1] < length - i - 1:\n            mex += '0'\n            currIdx = rearBit0[currIdx] + 1\n        else:\n            mex += '1'\n            currIdx = rearBit1[currIdx] + 1\n    if not is_subsequence(binaryString, mex):\n        print(mex)\n        continue\n    else:\n        mex = ''\n        length = superArray[0] + 2\n        currIdx = rearBit1[0] + 1\n        mex += '1'\n        for i in range(1, length):\n            if rearBit0[currIdx] >= stringLen:\n                mex += '0'\n                currIdx = rearBit0[currIdx] + 1\n                continue\n            if currIdx >= stringLen:\n                mex += '0'\n                continue\n            if superArray[rearBit0[currIdx] + 1] < length - i - 1:\n                mex += '0'\n                currIdx = rearBit0[currIdx] + 1\n            else:\n                mex += '1'\n                currIdx = rearBit1[currIdx] + 1\n        if not is_subsequence(binaryString, mex):\n            print(mex)\n            continue\n        else:\n            mex = ''\n            length = superArray[0] + 3\n            currIdx = rearBit1[0] + 1\n            mex += '1'\n            for i in range(1, length):\n                if rearBit0[currIdx] >= stringLen:\n                    mex += '0'\n                    currIdx = rearBit0[currIdx] + 1\n                    continue\n                if currIdx >= stringLen:\n                    mex += '0'\n                    continue\n                if superArray[rearBit0[currIdx] + 1] < length - i - 1:\n                    mex += '0'\n                    currIdx = rearBit0[currIdx] + 1\n                else:\n                    mex += '1'\n                    currIdx = rearBit1[currIdx] + 1\n            if not is_subsequence(binaryString, mex):\n                print(mex)\n                continue", "(list1, list2, list3, list4) = ([''] * (10 ** 6 + 2), [''] * (10 ** 6 + 2), [''] * 10 ** 6, [''] * 10 ** 6)\n\ndef abc(n, x):\n    l = -1\n    for i in range(x):\n        if n[i] == '0':\n            for j in range(l + 1, i + 1):\n                list3[j] = i\n            l = i\n    for i in range(l + 1, x):\n        list3[i] = x\n    if list3[0] == x:\n        return 0\n    l = -1\n    for i in range(x):\n        if n[i] == '1':\n            for j in range(l + 1, i + 1):\n                list4[j] = i\n            l = i\n    for i in range(l + 1, x):\n        list4[i] = x\n    list1[x] = 0\n    list1[x + 1] = 0\n    list2[x] = 0\n    list2[x + 1] = 0\n    for i in range(x - 1, -1, -1):\n        list1[i] = list1[i + 1]\n        if n[i] == '0' and list4[i] < x:\n            list1[i] = max(list1[i], list1[list4[i] + 1] + 1)\n        if n[i] == '1' and list3[i] < x:\n            list1[i] = max(list1[i], list1[list3[i] + 1] + 1)\n        list2[i] = list1[i + 1]\n        if list4[i] < x:\n            list2[i] = max(list2[i], list1[list4[i] + 1] + 1)\n    var2 = list2[0] + 1\n    var3 = list4[0] + 1\n    sol = '1'\n    for i in range(1, var2):\n        if var3 >= x:\n            sol += '0'\n            continue\n        if list3[var3] >= x:\n            sol += '0'\n            var3 = list3[var3] + 1\n            continue\n        if list1[list3[var3] + 1] < var2 - i - 1:\n            sol += '0'\n            var3 = list3[var3] + 1\n        else:\n            sol += '1'\n            var3 = list4[var3] + 1\n    return sol\nfor _ in range(int(input())):\n    n = input()\n    x = len(n)\n    if x <= 10:\n        i = 0\n        while i < 1000000:\n            x = bin(i).replace('0b', '')\n            (j, k) = (0, 0)\n            c = 0\n            while j < len(n) and k < len(x):\n                if n[j] == x[k]:\n                    j += 1\n                    k += 1\n                    c += 1\n                else:\n                    j += 1\n            i += 1\n            if c != len(x):\n                print(x)\n                break\n    else:\n        print(abc(n, x))", "MAX = 10 ** 6\nzero = [0] * MAX\nones = [0] * MAX\nchange = [0] * (MAX + 2)\ngroup = [0] * (MAX + 2)\n\ndef solve():\n    s = input()\n    l = len(s)\n    (i0, i1, j) = (0, 0, 0)\n    for bit in s:\n        if int(bit):\n            for k in range(i1, j + 1):\n                ones[k] = j\n            i1 = j + 1\n        else:\n            for k in range(i0, j + 1):\n                zero[k] = j\n            i0 = j + 1\n        j += 1\n    for k in range(i0, l):\n        zero[k] = l\n    if zero[0] == l:\n        print(0)\n        return\n    for k in range(i1, l):\n        ones[k] = l\n    (change[l], change[l + 1], group[l], group[l + 1]) = (0, 0, 0, 0)\n    for k in range(l - 1, -1, -1):\n        change[k] = change[k + 1]\n        if int(s[k]) and zero[k] < l:\n            change[k] = max(change[k], change[zero[k] + 1] + 1)\n        elif not int(s[k]) and ones[k] < l:\n            change[k] = max(change[k], change[ones[k] + 1] + 1)\n        group[k] = group[k + 1]\n        if ones[k] < l:\n            group[k] = max(group[k], change[ones[k] + 1] + 1)\n    l2 = group[0] + 1\n    curr = ones[0] + 1\n    mex = '1'\n    for k in range(1, l2):\n        if curr >= l:\n            mex += '0'\n        elif change[zero[curr] + 1] < l2 - k - 1 or zero[curr] >= l:\n            mex += '0'\n            curr = zero[curr] + 1\n        else:\n            mex += '1'\n            curr = ones[curr] + 1\n    print(mex)\nfor _ in range(int(input())):\n    solve()", "(list1, list2, list3, list4) = ([''] * (10 ** 6 + 2), [''] * (10 ** 6 + 2), [''] * 10 ** 6, [''] * 10 ** 6)\n\ndef abc(n, x):\n    l = -1\n    for i in range(x):\n        if n[i] == '0':\n            for j in range(l + 1, i + 1):\n                list3[j] = i\n            l = i\n    for i in range(l + 1, x):\n        list3[i] = x\n    if list3[0] == x:\n        return 0\n    l = -1\n    for i in range(x):\n        if n[i] == '1':\n            for j in range(l + 1, i + 1):\n                list4[j] = i\n            l = i\n    for i in range(l + 1, x):\n        list4[i] = x\n    list1[x] = 0\n    list1[x + 1] = 0\n    list2[x] = 0\n    list2[x + 1] = 0\n    for i in range(x - 1, -1, -1):\n        list1[i] = list1[i + 1]\n        if n[i] == '0' and list4[i] < x:\n            list1[i] = max(list1[i], list1[list4[i] + 1] + 1)\n        if n[i] == '1' and list3[i] < x:\n            list1[i] = max(list1[i], list1[list3[i] + 1] + 1)\n        list2[i] = list1[i + 1]\n        if list4[i] < x:\n            list2[i] = max(list2[i], list1[list4[i] + 1] + 1)\n    var2 = list2[0] + 1\n    var3 = list4[0] + 1\n    sol = '1'\n    for i in range(1, var2):\n        if var3 >= x:\n            sol += '0'\n            continue\n        if list3[var3] >= x:\n            sol += '0'\n            var3 = list3[var3] + 1\n            continue\n        if list1[list3[var3] + 1] < var2 - i - 1:\n            sol += '0'\n            var3 = list3[var3] + 1\n        else:\n            sol += '1'\n            var3 = list4[var3] + 1\n    return sol\nfor _ in range(int(input())):\n    n = input()\n    x = len(n)\n    print(abc(n, x))", "t = int(input())\nfor _ in range(t):\n    s = input()\n    first1 = s.find('1')\n    first0 = s.find('0')\n    n = len(s)\n    if first1 == -1:\n        print('1')\n        continue\n    if first0 == -1:\n        print('0')\n        continue\n    zeros = [0] * n\n    ones = [0] * n\n    ind0 = n\n    ind1 = n\n    for i in range(n - 1, first1 - 1, -1):\n        zeros[i] = ind0\n        ones[i] = ind1\n        if s[i] == '0':\n            ind0 = i\n        else:\n            ind1 = i\n    s += '0'\n    s = list(s)\n    dplen = [1111111] * (n + 1)\n    dpind = [0] * (n + 1)\n    dplen[first1] = 1\n    dpind[first1] = -1\n    for i in range(first1, n):\n        next0 = zeros[i]\n        next1 = ones[i]\n        if dplen[next0] > dplen[i] + 1:\n            dplen[next0] = dplen[i] + 1\n            dpind[next0] = i\n            if next0 == n:\n                s[n] = '0'\n        elif dplen[next0] == dplen[i] + 1:\n            if s[i] == '0' and s[dpind[next0]] == '1':\n                dpind[next0] = i\n            if next0 == n:\n                s[n] = '0'\n        if dplen[next1] > dplen[i] + 1:\n            dplen[next1] = dplen[i] + 1\n            dpind[next1] = i\n            if next1 == n:\n                s[n] = '1'\n        elif dplen[next1] == dplen[i] + 1:\n            if s[i] == '0' and s[dpind[next1]] == '1':\n                dpind[next1] = i\n    ans = ''\n    ans += s[n]\n    index = dpind[n]\n    while index != -1:\n        ans = s[index] + ans\n        index = dpind[index]\n    print(ans)", "test = int(input())\nwhile test:\n    s = input()\n    length = len(s)\n    next0 = [0] * length\n    next1 = [0] * length\n    last_pos = -1\n    for i in range(length):\n        if s[i] == '0':\n            for j in range(last_pos + 1, i + 1):\n                next0[j] = i\n                last_pos = i\n    for i in range(last_pos + 1, length):\n        next0[i] = length\n    if next0[0] == length:\n        print(0)\n    else:\n        last_pos = -1\n        for i in range(length):\n            if s[i] == '1':\n                for j in range(last_pos + 1, i + 1):\n                    next1[j] = i\n                    last_pos = i\n        for i in range(last_pos + 1, length):\n            next1[i] = length\n        dp = [0] * (length + 1)\n        dp1 = [0] * (length + 1)\n        for i in range(length - 1, -1, -1):\n            dp[i] = dp[i + 1]\n            if s[i] == '0' and next1[i] < length:\n                dp[i] = max(dp[i], dp[next1[i] + 1] + 1)\n            if s[i] == '1' and next0[i] < length:\n                dp[i] = max(dp[i], dp[next0[i] + 1] + 1)\n            dp1[i] = dp[i + 1]\n            if next1[i] < length:\n                dp1[i] = max(dp1[i], dp[next1[i] + 1] + 1)\n        length1 = dp1[0] + 1\n        curind = next1[0] + 1\n        ans = '1'\n        for i in range(1, length1):\n            if curind >= length:\n                ans += '0'\n                continue\n            if next0[curind] >= length:\n                ans += '0'\n                curind = next0[curind] + 1\n                continue\n            if dp[next0[curind] + 1] < length1 - i - 1:\n                ans += '0'\n                curind = next0[curind] + 1\n            else:\n                ans += '1'\n                curind = next1[curind] + 1\n        print(ans)\n    test -= 1", "test = int(input())\nwhile test:\n    s = input()\n    length = len(s)\n    next0 = [0] * length\n    next1 = [0] * length\n    last_pos = -1\n    for i in range(length):\n        if s[i] == '0':\n            for j in range(last_pos + 1, i + 1):\n                next0[j] = i\n                last_pos = i\n    for i in range(last_pos + 1, length):\n        next0[i] = length\n    if next0[0] == length:\n        print(0)\n    else:\n        last_pos = -1\n        for i in range(length):\n            if s[i] == '1':\n                for j in range(last_pos + 1, i + 1):\n                    next1[j] = i\n                    last_pos = i\n        for i in range(last_pos + 1, length):\n            next1[i] = length\n        dp = [0] * (length + 1)\n        dp1 = [0] * (length + 1)\n        for i in range(length - 1, -1, -1):\n            dp[i] = dp[i + 1]\n            if s[i] == '0' and next1[i] < length:\n                dp[i] = max(dp[i], dp[next1[i] + 1] + 1)\n            if s[i] == '1' and next0[i] < length:\n                dp[i] = max(dp[i], dp[next0[i] + 1] + 1)\n            dp1[i] = dp[i + 1]\n            if next1[i] < length:\n                dp1[i] = max(dp1[i], dp[next1[i] + 1] + 1)\n        length1 = dp1[0] + 1\n        curind = next1[0] + 1\n        ans = '1'\n        for i in range(1, length1):\n            if curind >= length:\n                ans += '0'\n                continue\n            if next0[curind] >= length:\n                ans += '0'\n                curind = next0[curind] + 1\n                continue\n            if dp[next0[curind] + 1] < length1 - i - 1:\n                ans += '0'\n                curind = next0[curind] + 1\n            else:\n                ans += '1'\n                curind = next1[curind] + 1\n        print(ans)\n    test -= 1", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    (c0, c1) = ([n] * n, [n] * n)\n    (dp0, dp1) = ([0] * (n + 2), [0] * (n + 2))\n    pos0 = -1\n    pos1 = -1\n    for i in range(n):\n        if s[i] == '0':\n            for j in range(pos0 + 1, i + 1):\n                c0[j] = i\n            pos0 = i\n        else:\n            for j in range(pos1 + 1, i + 1):\n                c1[j] = i\n            pos1 = i\n    if c0[0] == n:\n        print('0')\n    else:\n        for i in range(n - 1, -1, -1):\n            dp0[i] = dp0[i + 1]\n            if s[i] == '0' and c1[i] < n:\n                dp0[i] = max(dp0[i], dp0[c1[i] + 1] + 1)\n            if s[i] == '1' and c0[i] < n:\n                dp0[i] = max(dp0[i], dp0[c0[i] + 1] + 1)\n            dp1[i] = dp1[i + 1]\n            if c1[i] < n:\n                dp1[i] = max(dp1[i], dp0[c1[i] + 1] + 1)\n        res = '1'\n        bits = dp1[0] + 1\n        c = c1[0] + 1\n        for i in range(1, bits):\n            if c >= n:\n                res += '0'\n            elif c0[c] >= n:\n                res += '0'\n                c = c0[c] + 1\n            elif dp0[c0[c] + 1] < bits - i - 1:\n                res += '0'\n                c = c0[c] + 1\n            else:\n                res += '1'\n                c = c1[c] + 1\n        print(res)", "for t in range(int(input())):\n    s = input()\n    if '0' not in s:\n        print('0')\n        continue\n    n = len(s)\n    (a, b) = ([0] * n, [0] * n)\n    (c0, c1) = (n, n)\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            c0 = i\n        else:\n            c1 = i\n        a[i] = c0\n        b[i] = c1\n    (dp0, dp1) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(n - 1, -1, -1):\n        dp0[i] = dp0[i + 1]\n        if s[i] == '0' and b[i] < n:\n            dp0[i] = max(dp0[i], dp0[b[i] + 1] + 1)\n        if s[i] == '1' and a[i] < n:\n            dp0[i] = max(dp0[i], dp0[a[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if b[i] < n:\n            dp1[i] = max(dp1[i], dp0[b[i] + 1] + 1)\n    (l, x) = (dp1[0] + 1, b[0] + 1)\n    res = '1'\n    for i in range(1, l):\n        if x >= n:\n            res += '0'\n        elif a[x] >= n:\n            res += '0'\n            x = a[x] + 1\n        elif dp0[a[x] + 1] < l - i - 1:\n            res += '0'\n            x = a[x] + 1\n        else:\n            res += '1'\n            x = b[x] + 1\n    print(res)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    s_len = len(s)\n    next0 = [-1] * s_len\n    lastpos = -1\n    for i in range(s_len):\n        if s[i] == '0':\n            for j in range(lastpos + 1, i + 1):\n                next0[j] = i\n            lastpos = i\n    for i in range(lastpos + 1, s_len):\n        next0[i] = s_len\n    if next0[0] == s_len:\n        print('0')\n        continue\n    next1 = [-1] * s_len\n    lastpos = -1\n    for i in range(s_len):\n        if s[i] == '1':\n            for j in range(lastpos + 1, i + 1):\n                next1[j] = i\n            lastpos = i\n    for i in range(lastpos + 1, s_len):\n        next1[i] = s_len\n    dp = [-1] * (s_len + 2)\n    dp1 = [-1] * (s_len + 2)\n    dp[s_len] = dp[s_len + 1] = 0\n    dp1[s_len] = dp1[s_len + 1] = 0\n    for i in range(s_len - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and next1[i] < s_len:\n            dp[i] = max(dp[i], dp[next1[i] + 1] + 1)\n        if s[i] == '1' and next0[i] < s_len:\n            dp[i] = max(dp[i], dp[next0[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if next1[i] < s_len:\n            dp1[i] = max(dp1[i], dp[next1[i] + 1] + 1)\n    a_len = dp1[0] + 1\n    curr_id = next1[0] + 1\n    ans = '1'\n    for i in range(1, a_len):\n        if curr_id >= s_len:\n            ans += '0'\n            continue\n        if next0[curr_id] >= s_len:\n            ans += '0'\n            curr_id = next0[curr_id] + 1\n            continue\n        if dp[next0[curr_id] + 1] < a_len - i - 1:\n            ans += '0'\n            curr_id = next0[curr_id] + 1\n        else:\n            ans += '1'\n            curr_id = next1[curr_id] + 1\n    print(ans)", "import math\n\ndef solve():\n    s = input()\n    n = len(s)\n    mx = n + 2\n    arr0 = [0 for i in range(mx)]\n    arr1 = [0 for i in range(mx)]\n    result0 = [0 for i in range(mx + 2)]\n    result1 = [0 for i in range(mx + 2)]\n    ind = -1\n    for i in range(n):\n        if s[i] == '0':\n            for j in range(ind + 1, i + 1):\n                arr0[j] = i\n            ind = i\n    for i in range(ind + 1, n):\n        arr0[i] = n\n    if arr0[0] == n:\n        print(0)\n        return\n    ind = -1\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(ind + 1, i + 1):\n                arr1[j] = i\n            ind = i\n    for i in range(ind + 1, n):\n        arr1[i] = n\n    for i in range(n - 1, -1, -1):\n        result0[i] = result0[i + 1]\n        if s[i] == '0' and arr1[i] < n:\n            result0[i] = max(result0[i], result0[arr1[i] + 1] + 1)\n        if s[i] == '1' and arr0[i] < n:\n            result0[i] = max(result0[i], result0[arr0[i] + 1] + 1)\n        result1[i] = result1[i + 1]\n        if arr1[i] < n:\n            result1[i] = max(result1[i], result0[arr1[i] + 1] + 1)\n    x = result1[0] + 1\n    count = arr1[0] + 1\n    ans = '1'\n    for i in range(1, x):\n        if count >= n:\n            ans += '0'\n            continue\n        if arr0[count] >= n:\n            ans += '0'\n            count = arr0[count] + 1\n            continue\n        if result0[arr0[count] + 1] < x - i - 1:\n            ans += '0'\n            count = arr0[count] + 1\n        else:\n            ans += '1'\n            count = arr1[count] + 1\n    print(ans)\n\ndef inp():\n    return int(input())\n\ndef inl():\n    return [int(i) for i in input().split()]\nt = 1\nt = inp()\nwhile t:\n    solve()\n    t -= 1", "n0 = [-1] * 10000000\nn1 = [-1] * 10000000\narr = [-1] * 10000000\narr1 = [-1] * 10000000\nfor _ in range(int(input())):\n    s = input()\n    l = len(s)\n    lp = -1\n    for i in range(0, l):\n        if s[i] == '0':\n            for j in range(lp + 1, i + 1):\n                n0[j] = i\n            lp = i\n    for i in range(lp + 1, l):\n        n0[i] = l\n    if n0[0] == l:\n        print(0)\n        continue\n    lp = -1\n    for i in range(0, l):\n        if s[i] == '1':\n            for j in range(lp + 1, i + 1):\n                n1[j] = i\n            lp = i\n    for i in range(lp + 1, l):\n        n1[i] = l\n    arr[l + 1] = 0\n    arr[l] = 0\n    arr1[l + 1] = 0\n    arr1[l] = 0\n    i = l - 1\n    while i >= 0:\n        arr[i] = arr[i + 1]\n        if s[i] == '0' and n1[i] < l:\n            arr[i] = max(arr[i], arr[n1[i] + 1] + 1)\n        if s[i] == '1' and n0[i] < l:\n            arr[i] = max(arr[i], arr[n0[i] + 1] + 1)\n        arr1[i] = arr1[i + 1]\n        if n1[i] < l:\n            arr1[i] = max(arr1[i], arr[n1[i] + 1] + 1)\n        i -= 1\n    ans = '1'\n    curr = n1[0] + 1\n    le = arr1[0] + 1\n    for i in range(1, le):\n        if curr >= l:\n            ans += '0'\n            continue\n        if n0[curr] >= l:\n            ans += '0'\n            curr = n0[curr] + 1\n            continue\n        if arr[n0[curr] + 1] < le - i - 1:\n            ans += '0'\n            curr = n0[curr] + 1\n        else:\n            ans += '1'\n            curr = n1[curr] + 1\n    print(ans)", "import math\nfrom collections import Counter, defaultdict\nreadInt = lambda : int(input().strip())\nreadfloat = lambda : float(input().strip())\nintList = lambda : list(map(int, input().strip().split()))\nintMap = lambda : map(int, input().strip().split())\nfloatList = lambda : list(map(float, input().strip().split()))\nfloatMap = lambda : map(float, input().strip().split())\n\ndef solve(string):\n    n = len(string)\n    zeroes = [0 for i in range(n)]\n    ones = [0 for i in range(n)]\n    pos = n\n    for i in range(n - 1, -1, -1):\n        if string[i] == '0':\n            pos = i\n        zeroes[i] = pos\n    pos = n\n    for i in range(n - 1, -1, -1):\n        if string[i] == '1':\n            pos = i\n        ones[i] = pos\n    zero_len = [0 for i in range(n + 1)]\n    one_len = [0 for i in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        zero_len[i] = zero_len[i + 1]\n        if string[i] == '0' and ones[i] < n:\n            zero_len[i] = max(zero_len[i], zero_len[ones[i] + 1] + 1)\n        if string[i] == '1' and zeroes[i] < n:\n            zero_len[i] = max(zero_len[i], zero_len[zeroes[i] + 1] + 1)\n        one_len[i] = one_len[i + 1]\n        if ones[i] < n:\n            one_len[i] = max(one_len[i], zero_len[ones[i] + 1] + 1)\n    length = one_len[0] + 1\n    x = ones[0] + 1\n    res = ['1']\n    for i in range(1, length):\n        if x >= n:\n            res.append('0')\n            continue\n        if zeroes[x] >= n:\n            res.append('0')\n            x = zeroes[x] + 1\n            continue\n        if zero_len[zeroes[x] + 1] < length - i - 1:\n            res.append('0')\n            x = zeroes[x] + 1\n        else:\n            res.append('1')\n            x = ones[x] + 1\n    return ''.join(res)\nfor _ in range(readInt()):\n    string = list(input())\n    c = Counter(string)\n    if c['0'] == 0:\n        print(0)\n        continue\n    print(solve(string))", "from collections import Counter\nfor _ in range(int(input())):\n    s = list(input())\n    c = Counter(s)\n    if c['0'] == 0:\n        print(0)\n        continue\n    n = len(s)\n    num0 = [0] * n\n    num1 = [0] * n\n    last_pos = n\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            last_pos = i\n        num0[i] = last_pos\n    last_pos = n\n    for i in range(n - 1, -1, -1):\n        if s[i] == '1':\n            last_pos = i\n        num1[i] = last_pos\n    dp = [0] * (n + 2)\n    dp1 = [0] * (n + 2)\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and num1[i] < n:\n            dp[i] = max(dp[i], dp[num1[i] + 1] + 1)\n        if s[i] == '1' and num0[i] < n:\n            dp[i] = max(dp[i], dp[num0[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if num1[i] < n:\n            dp1[i] = max(dp1[i], dp[num1[i] + 1] + 1)\n    l = dp1[0] + 1\n    x = num1[0] + 1\n    ans = ['1']\n    for i in range(1, l):\n        if x >= n:\n            ans.append('0')\n            continue\n        if num0[x] >= n:\n            ans.append('0')\n            x = num0[x] + 1\n            continue\n        if dp[num0[x] + 1] < l - i - 1:\n            ans.append('0')\n            x = num0[x] + 1\n        else:\n            ans.append('1')\n            x = num1[x] + 1\n    print(''.join(ans))", "import math\nfrom collections import Counter, defaultdict\nreadInt = lambda : int(input().strip())\nreadfloat = lambda : float(input().strip())\nintList = lambda : list(map(int, input().strip().split()))\nintMap = lambda : map(int, input().strip().split())\nfloatList = lambda : list(map(float, input().strip().split()))\nfloatMap = lambda : map(float, input().strip().split())\n\ndef solve(string):\n    n = len(string)\n    zeroes = [0 for i in range(n)]\n    ones = [0 for i in range(n)]\n    pos = n\n    for i in range(n - 1, -1, -1):\n        if string[i] == '0':\n            pos = i\n        zeroes[i] = pos\n    pos = n\n    for i in range(n - 1, -1, -1):\n        if string[i] == '1':\n            pos = i\n        ones[i] = pos\n    zero_len = [0 for i in range(n + 2)]\n    one_len = [0 for i in range(n + 2)]\n    for i in range(n - 1, -1, -1):\n        zero_len[i] = zero_len[i + 1]\n        if string[i] == '0' and ones[i] < n:\n            zero_len[i] = max(zero_len[i], zero_len[ones[i] + 1] + 1)\n        if string[i] == '1' and zeroes[i] < n:\n            zero_len[i] = max(zero_len[i], zero_len[zeroes[i] + 1] + 1)\n        one_len[i] = one_len[i + 1]\n        if ones[i] < n:\n            one_len[i] = max(one_len[i], zero_len[ones[i] + 1] + 1)\n    length = one_len[0] + 1\n    x = ones[0] + 1\n    res = ['1']\n    for i in range(1, length):\n        if x >= n:\n            res.append('0')\n            continue\n        if zeroes[x] >= n:\n            res.append('0')\n            x = zeroes[x] + 1\n            continue\n        if zero_len[zeroes[x] + 1] < length - i - 1:\n            res.append('0')\n            x = zeroes[x] + 1\n        else:\n            res.append('1')\n            x = ones[x] + 1\n    return ''.join(res)\nfor _ in range(readInt()):\n    string = list(input())\n    c = Counter(string)\n    if c['0'] == 0:\n        print(0)\n        continue\n    print(solve(string))", "def cal(l):\n    n = len(l)\n    pos = -1\n    for i in range(n):\n        if l[i] == '0':\n            for j in range(pos + 1, i + 1):\n                arr1[j] = i\n            pos = i\n    for i in range(pos + 1, n):\n        arr1[i] = n\n    if arr1[0] == n:\n        return 0\n    pos = -1\n    for i in range(n):\n        if l[i] == '1':\n            for j in range(pos + 1, i + 1):\n                arr2[j] = i\n            pos = i\n    for i in range(pos + 1, n):\n        arr2[i] = n\n    temp1[n] = 0\n    temp1[n + 1] = 0\n    temp2[n] = 0\n    temp2[n + 1] = 0\n    for i in range(n - 1, -1, -1):\n        temp1[i] = temp1[i + 1]\n        if l[i] == '0' and arr2[i] < n:\n            temp1[i] = max(temp1[i], temp1[arr2[i] + 1] + 1)\n        if l[i] == '1' and arr1[i] < n:\n            temp1[i] = max(temp1[i], temp1[arr1[i] + 1] + 1)\n        temp2[i] = temp2[i + 1]\n        if arr2[i] < n:\n            temp2[i] = max(temp2[i], temp1[arr2[i] + 1] + 1)\n    x = temp2[0] + 1\n    coun = arr2[0] + 1\n    ans = '1'\n    for i in range(1, x):\n        if coun >= n:\n            ans += '0'\n            continue\n        if arr1[coun] >= n:\n            ans += '0'\n            coun = arr1[coun] + 1\n            continue\n        if temp1[arr1[coun] + 1] < x - i - 1:\n            ans += '0'\n            coun = arr1[coun] + 1\n        else:\n            ans += '1'\n            coun = arr2[coun] + 1\n    return ans\nfor _ in range(int(input())):\n    t = input()\n    maxy = len(t) + 10\n    arr1 = [0 for i in range(maxy)]\n    arr2 = [0 for i in range(maxy)]\n    temp1 = [0 for i in range(maxy + 2)]\n    temp2 = [0 for i in range(maxy + 2)]\n    print(cal(t))", "import itertools\ntest = int(input())\n\nclass dparr:\n\n    def dparrcalc(s, li1, li2, strl):\n        mem1 = [0] * (strl + 1)\n        mem2 = [0] * (strl + 1)\n        for i in range(strl - 1, -1, -1):\n            mem1[i] = mem1[i + 1]\n            if s[i] == '0' and li2[i] < strl:\n                mem1[i] = max(mem1[i], mem1[li2[i] + 1] + 1)\n            elif s[i] == '1' and li1[i] < strl:\n                mem1[i] = max(mem1[i], mem1[li1[i] + 1] + 1)\n            mem2[i] = mem2[i + 1]\n            if li2[i] < strl:\n                mem2[i] = max(mem2[i], mem1[li2[i] + 1] + 1)\n        return (mem1, mem2)\n\ndef solve(s):\n    arr = '1'\n    if '0' not in s:\n        print(0)\n    else:\n        strl = len(s)\n        li1 = [0] * strl\n        li2 = [0] * strl\n        mem1 = [0] * (strl + 1)\n        mem2 = [0] * (strl + 1)\n        zero = -1\n        for i in range(0, strl):\n            if s[i] == '0':\n                for j in range(zero + 1, i + 1):\n                    li1[j] = i\n                zero = i\n        one = -1\n        for i in range(0, strl):\n            if s[i] == '1':\n                for j in range(one + 1, i + 1):\n                    li2[j] = i\n                one = i\n        for i in range(zero + 1, strl):\n            li1[i] = strl\n        for i in range(one + 1, strl):\n            li2[i] = strl\n        x = dparr\n        (mem1, mem2) = x.dparrcalc(s, li1, li2, strl)\n        iter = li2[0]\n        iter += 1\n        for i in range(1, 1 + mem2[0]):\n            y = 1 + mem2[0] - i - 1\n            if iter >= strl:\n                arr += '0'\n            elif li1[iter] >= strl:\n                arr += '0'\n                iter = li1[iter] + 1\n            elif mem1[li1[iter] + 1] < y:\n                arr += '0'\n                iter = li1[iter] + 1\n            else:\n                arr += '1'\n                iter = li2[iter] + 1\n        print(arr)\nfor i in range(0, test):\n    s = input()\n    solve(s)", "test = int(input())\n\ndef solve(s):\n    arr = '1'\n    if '0' not in s:\n        print(0)\n    else:\n        strl = len(s)\n        li1 = [0] * strl\n        li2 = [0] * strl\n        mem1 = [0] * (strl + 1)\n        mem2 = [0] * (strl + 1)\n        zero = -1\n        for i in range(0, strl):\n            if s[i] == '0':\n                for j in range(zero + 1, i + 1):\n                    li1[j] = i\n                zero = i\n        one = -1\n        for i in range(0, strl):\n            if s[i] == '1':\n                for j in range(one + 1, i + 1):\n                    li2[j] = i\n                one = i\n        for i in range(zero + 1, strl):\n            li1[i] = strl\n        for i in range(one + 1, strl):\n            li2[i] = strl\n        for i in range(strl - 1, -1, -1):\n            mem1[i] = mem1[i + 1]\n            if s[i] == '0' and li2[i] < strl:\n                mem1[i] = max(mem1[i], mem1[li2[i] + 1] + 1)\n            elif s[i] == '1' and li1[i] < strl:\n                mem1[i] = max(mem1[i], mem1[li1[i] + 1] + 1)\n            mem2[i] = mem2[i + 1]\n            if li2[i] < strl:\n                mem2[i] = max(mem2[i], mem1[li2[i] + 1] + 1)\n        iter = li2[0]\n        iter += 1\n        z = 1 + mem2[0]\n        for i in range(1, z):\n            y = 1 + mem2[0] - i - 1\n            if iter >= strl:\n                arr += '0'\n            elif li1[iter] >= strl:\n                arr += '0'\n                iter = li1[iter] + 1\n            elif mem1[li1[iter] + 1] < y:\n                arr += '0'\n                iter = li1[iter] + 1\n            else:\n                arr += '1'\n                iter = li2[iter] + 1\n        print(arr)\nfor i in range(0, test):\n    s = input()\n    solve(s)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    nx0 = [None] * n\n    nx1 = [None] * n\n    ps1 = -1\n    ps0 = -1\n    for i in range(n):\n        if s[i] == '0':\n            for j in range(ps0 + 1, i + 1):\n                nx0[j] = i\n            ps0 = i\n        else:\n            for j in range(ps1 + 1, i + 1):\n                nx1[j] = i\n            ps1 = i\n    for i in range(ps0 + 1, n):\n        nx0[i] = n\n    for i in range(ps1 + 1, n):\n        nx1[i] = n\n    if nx0[0] == n:\n        print(0)\n        continue\n    st0 = [None] * (n + 2)\n    st1 = [None] * (n + 2)\n    st0[n] = 0\n    st0[n + 1] = 0\n    st1[n] = 0\n    st1[n + 1] = 0\n    for i in range(n - 1, -1, -1):\n        st0[i] = st0[i + 1]\n        if s[i] == '0':\n            if nx1[i] < n:\n                st0[i] = max(st0[i], st0[nx1[i] + 1] + 1)\n        elif nx0[i] < n:\n            st0[i] = max(st0[i], st0[nx0[i] + 1] + 1)\n    for i in range(n - 1, -1, -1):\n        st1[i] = st1[i + 1]\n        if nx1[i] < n:\n            st1[i] = max(st1[i], st0[nx1[i] + 1] + 1)\n    mx = st1[0] + 1\n    cur = nx1[0] + 1\n    mis = '1'\n    for i in range(1, mx):\n        if cur >= n:\n            mis += '0'\n        elif nx0[cur] >= n:\n            mis += '0'\n            cur = nx0[cur] + 1\n        elif st0[nx0[cur] + 1] < mx - i - 1:\n            mis += '0'\n            cur = nx0[cur] + 1\n        else:\n            mis += '1'\n            cur = nx1[cur] + 1\n    print(mis)", "maxn = 10 ** 6\ndp = [0] * (maxn + 2)\ndp1 = [0] * (maxn + 2)\nnext0 = [0] * maxn\nnext1 = [0] * maxn\n\ndef spar():\n    s = input()\n    n = len(s)\n    last_pos = -1\n    for i in range(0, n):\n        if s[i] == '0':\n            for j in range(last_pos + 1, i + 1):\n                next0[j] = i\n            last_pos = i\n    for i in range(last_pos + 1, n):\n        next0[i] = n\n    if next0[0] == n:\n        print('0')\n        return\n    last_pos = -1\n    for i in range(0, n):\n        if s[i] == '1':\n            for j in range(last_pos + 1, i + 1):\n                next1[j] = i\n            last_pos = i\n    for i in range(last_pos + 1, n):\n        next1[i] = n\n    dp[n] = dp[i + 1] = 0\n    dp1[n] = dp1[n + 1] = 0\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and next1[i] < n:\n            dp[i] = max(dp[i], dp[next1[i] + 1] + 1)\n        if s[i] == '1' and next0[i] < n:\n            dp[i] = max(dp[i], dp[next0[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if next1[i] < n:\n            dp1[i] = max(dp1[i], dp[next1[i] + 1] + 1)\n    le = dp1[0] + 1\n    curind = next1[0] + 1\n    ans = '1'\n    for i in range(1, le):\n        if curind >= n:\n            ans += '0'\n            continue\n        if next0[curind] >= n:\n            ans += '0'\n            curind = next0[curind] + 1\n            continue\n        if dp[next0[curind] + 1] < le - i - 1:\n            ans += '0'\n            curind = next0[curind] + 1\n        else:\n            ans += '1'\n            curind = next1[curind] + 1\n    print(ans)\nfor i in range(int(input())):\n    spar()", "ma = 10 ** 6\n(lst1, lst, l1, l2) = ([''] * (ma + 2), [''] * (ma + 2), [''] * ma, [''] * ma)\n\ndef ff():\n    for i in range(7):\n        hh = 999\nff()\n\ndef solve():\n    s = input()\n    n = len(s)\n    last = -1\n    for i in range(n):\n        if s[i] == '0':\n            for j in range(last + 1, i + 1):\n                l1[j] = i\n            last = i\n    for i in range(last + 1, n):\n        l1[i] = n\n    if l1[0] == n:\n        print(0)\n        return\n    last = -1\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(last + 1, i + 1):\n                l2[j] = i\n            last = i\n    for i in range(last + 1, n):\n        l2[i] = n\n    (lst1[n], lst1[n + 1], lst[n], lst[n + 1]) = (0, 0, 0, 0)\n    for i in range(n - 1, -1, -1):\n        lst1[i] = lst1[i + 1]\n        if s[i] == '0' and l2[i] < n:\n            lst1[i] = max(lst1[i], lst1[l2[i] + 1] + 1)\n        if s[i] == '1' and l1[i] < n:\n            lst1[i] = max(lst1[i], lst1[l1[i] + 1] + 1)\n        lst[i] = lst1[i + 1]\n        if l2[i] < n:\n            lst[i] = max(lst[i], lst1[l2[i] + 1] + 1)\n    l = lst[0] + 1\n    ind = l2[0] + 1\n    ans = '1'\n    for i in range(1, l):\n        if ind >= n:\n            ans += '0'\n            continue\n        if l1[ind] >= n:\n            ans += '0'\n            ind = l1[ind] + 1\n            continue\n        if lst1[l1[ind] + 1] < l - i - 1:\n            ans += '0'\n            ind = l1[ind] + 1\n        else:\n            ans += '1'\n            ind = l2[ind] + 1\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "testcase = int(input())\nfor _ in range(testcase):\n    input_string = input()\n    length_of_s = len(input_string)\n    n1 = []\n    n2 = []\n    DP1 = [0, 0]\n    DP2 = [0, 0]\n    previous_1 = 0\n    previous_2 = 0\n    for i in range(length_of_s):\n        if input_string[i] == '0':\n            for j in range(previous_1, i + 1):\n                n1.append(i)\n                DP1.append(0)\n                previous_1 = i + 1\n        elif input_string[i] == '1':\n            for k in range(previous_2, i + 1):\n                n2.append(i)\n                DP2.append(0)\n                previous_2 = i + 1\n    if len(n1) == 0:\n        print(0)\n        continue\n    if len(n2) == 0:\n        print(1)\n        continue\n    if len(n1) > len(n2):\n        for i in range(len(n2), len(n1)):\n            n2.append(length_of_s)\n            DP2.append(0)\n    elif len(n1) < len(n2):\n        for i in range(len(n1), len(n2)):\n            n1.append(length_of_s)\n            DP1.append(0)\n    for i in reversed(range(length_of_s)):\n        DP1[i] = DP1[i + 1]\n        if input_string[i] == '0' and n2[i] < length_of_s:\n            DP1[i] = max(DP1[i], DP1[n2[i] + 1] + 1)\n        if input_string[i] == '1' and n1[i] < length_of_s:\n            DP1[i] = max(DP1[i], DP1[n1[i] + 1] + 1)\n        DP2[i] = DP2[i + 1]\n        if n2[i] < length_of_s:\n            DP2[i] = max(DP2[i], DP1[n2[i] + 1] + 1)\n    L = DP2[0] + 1\n    X = n2[0] + 1\n    answer = '1'\n    for i in range(1, L):\n        if X >= length_of_s:\n            answer += '0'\n            continue\n        if n1[X] >= length_of_s:\n            answer += '0'\n            X = n1[X] + 1\n            continue\n        if DP1[n1[X] + 1] < L - i - 1:\n            answer += '0'\n            X = n1[X] + 1\n        else:\n            answer += '1'\n            X = n2[X] + 1\n    print(answer)", "maxn = 10 ** 6\ndp = [0] * (maxn + 2)\ndp1 = [0] * (maxn + 2)\nnext0 = [0] * maxn\nnext1 = [0] * maxn\n\ndef spar():\n    s = input()\n    n = len(s)\n    last_pos = -1\n    for i in range(0, n):\n        if s[i] == '0':\n            for j in range(last_pos + 1, i + 1):\n                next0[j] = i\n            last_pos = i\n    for i in range(last_pos + 1, n):\n        next0[i] = n\n    if next0[0] == n:\n        print('0')\n        return\n    last_pos = -1\n    for i in range(0, n):\n        if s[i] == '1':\n            for j in range(last_pos + 1, i + 1):\n                next1[j] = i\n            last_pos = i\n    for i in range(last_pos + 1, n):\n        next1[i] = n\n    dp[n] = dp[i + 1] = 0\n    dp1[n] = dp1[n + 1] = 0\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and next1[i] < n:\n            dp[i] = max(dp[i], dp[next1[i] + 1] + 1)\n        if s[i] == '1' and next0[i] < n:\n            dp[i] = max(dp[i], dp[next0[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if next1[i] < n:\n            dp1[i] = max(dp1[i], dp[next1[i] + 1] + 1)\n    le = dp1[0] + 1\n    curind = next1[0] + 1\n    ans = '1'\n    for i in range(1, le):\n        if curind >= n:\n            ans += '0'\n            continue\n        if next0[curind] >= n:\n            ans += '0'\n            curind = next0[curind] + 1\n            continue\n        if dp[next0[curind] + 1] < le - i - 1:\n            ans += '0'\n            curind = next0[curind] + 1\n        else:\n            ans += '1'\n            curind = next1[curind] + 1\n    print(ans)\nfor i in range(int(input())):\n    spar()", "test = int(input())\nwhile test:\n    s = input()\n    length = len(s)\n    next0 = [0] * length\n    next1 = [0] * length\n    last_pos = -1\n    for i in range(length):\n        if s[i] == '0':\n            for j in range(last_pos + 1, i + 1):\n                next0[j] = i\n                last_pos = i\n    for i in range(last_pos + 1, length):\n        next0[i] = length\n    if next0[0] == length:\n        print(0)\n    else:\n        last_pos = -1\n        for i in range(length):\n            if s[i] == '1':\n                for j in range(last_pos + 1, i + 1):\n                    next1[j] = i\n                    last_pos = i\n        for i in range(last_pos + 1, length):\n            next1[i] = length\n        dp = [0] * (length + 1)\n        dp1 = [0] * (length + 1)\n        for i in range(length - 1, -1, -1):\n            dp[i] = dp[i + 1]\n            if s[i] == '0' and next1[i] < length:\n                dp[i] = max(dp[i], dp[next1[i] + 1] + 1)\n            if s[i] == '1' and next0[i] < length:\n                dp[i] = max(dp[i], dp[next0[i] + 1] + 1)\n            dp1[i] = dp[i + 1]\n            if next1[i] < length:\n                dp1[i] = max(dp1[i], dp[next1[i] + 1] + 1)\n        length1 = dp1[0] + 1\n        curind = next1[0] + 1\n        ans = '1'\n        for i in range(1, length1):\n            if curind >= length:\n                ans += '0'\n                continue\n            if next0[curind] >= length:\n                ans += '0'\n                curind = next0[curind] + 1\n                continue\n            if dp[next0[curind] + 1] < length1 - i - 1:\n                ans += '0'\n                curind = next0[curind] + 1\n            else:\n                ans += '1'\n                curind = next1[curind] + 1\n        print(ans)\n    test -= 1", "MAXN = 1000000\ndp = [0] * (MAXN + 2)\ndp1 = [0] * (MAXN + 2)\nnext0 = [0] * MAXN\nnext1 = [0] * MAXN\n\ndef solve():\n    s = input()\n    n = len(s)\n    last_pos = -1\n    for i in range(n):\n        if s[i] == '0':\n            for j in range(last_pos + 1, i + 1):\n                next0[j] = i\n                last_pos = i\n    for i in range(last_pos + 1, n):\n        next0[i] = n\n    if next0[0] == n:\n        print('0')\n        return\n    last_pos = -1\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(last_pos + 1, i + 1):\n                next1[j] = i\n                last_pos = i\n    for i in range(last_pos + 1, n):\n        next1[i] = n\n    dp[n] = dp[n + 1] = 0\n    dp1[n] = dp[n + 1] = 0\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and next1[i] < n:\n            dp[i] = max(dp[i], dp[next1[i] + 1] + 1)\n        if s[i] == '1' and next0[i] < n:\n            dp[i] = max(dp[i], dp[next0[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if next1[i] < n:\n            dp1[i] = max(dp1[i], dp[next1[i] + 1] + 1)\n    len1 = dp1[0] + 1\n    curind = next1[0] + 1\n    ans = '1'\n    for i in range(1, len1):\n        if curind >= n:\n            ans = ans + '0'\n            continue\n        if next0[curind] >= n:\n            ans = ans + '0'\n            curind = next0[curind] + 1\n            continue\n        if dp[next0[curind] + 1] < len1 - i - 1:\n            ans = ans + '0'\n            curind = next0[curind] + 1\n        else:\n            ans = ans + '1'\n            curind = next1[curind] + 1\n    print(ans)\n    return\nt = int(input())\nfor i in range(t):\n    solve()", "from collections import defaultdict\n\ndef check(sub, oristr):\n    m = len(sub)\n    n = len(oristr)\n    (i, j) = (0, 0)\n    while j < m and i < n:\n        if sub[j] == oristr[i]:\n            j = j + 1\n        i = i + 1\n    return j == m\n\ndef method1(s):\n    n = len(s)\n    next0 = [0] * len(s)\n    next1 = [0] * len(s)\n    next0[n - 1] = n - 1 if s[n - 1] == '0' else n\n    next1[n - 1] = n - 1 if s[n - 1] == '1' else n\n    for i in range(len(s) - 2, -1, -1):\n        next1[i] = i if s[i] == '1' else next1[i + 1]\n        next0[i] = i if s[i] == '0' else next0[i + 1]\n    s = s[::-1]\n    dp = [0] * (n + 1)\n    mxsize = 0\n    cache = defaultdict(lambda : 0)\n    group = 0\n    flag = 0\n    for (idx, i) in enumerate(s):\n        cache[i] += 1\n        if len(cache.keys()) == 2:\n            mxsize += 1\n            group += 1\n            dp[idx] = group\n            flag = 1\n            cache = defaultdict(lambda : 0)\n        dp[idx] = group\n    dp = dp[::-1]\n    dp = dp[1:]\n    dp.extend([0])\n    if flag:\n        for i in '10':\n            if i not in cache:\n                mxsize += 2 if i == '0' else 1\n                break\n        curr = next1[0] + 1\n        sortest = '1'\n        for i in range(1, mxsize):\n            if curr >= n:\n                sortest += '0'\n                continue\n            if next0[curr] >= n:\n                sortest += '0'\n                curr = next0[curr] + 1\n                continue\n            if dp[next0[curr] + 1] < mxsize - i - 1:\n                sortest += '0'\n                curr = next0[curr] + 1\n            else:\n                sortest += '1'\n                curr = next1[curr] + 1\n        return sortest\n    else:\n        return '0' if s[-1] == '1' else '1'\n\ndef method2(s):\n    i = 0\n    flag = True\n    while True:\n        b = bin(i)[2:]\n        i += 1\n        if not check(b, s):\n            return b\nt = int(input())\nfor m in range(t):\n    s = input()\n    m1 = method1(s)\n    print(m1)", "import sys\nt = int(input())\nwhile t > 0:\n    str = input()\n    n = len(str)\n    lp = -1\n    n0 = [-1 for i in range(len(str))]\n    n1 = [-1 for i in range(len(str))]\n    dp1 = [-1 for i in range(len(str) + 2)]\n    dp2 = [-1 for i in range(len(str) + 2)]\n    for i in range(n):\n        if str[i] == '0':\n            for j in range(lp + 1, i + 1):\n                n0[j] = i\n            lp = i\n    for i in range(lp + 1, n):\n        n0[i] = n\n    if n0[0] == n:\n        print(0)\n    else:\n        lp = -1\n        for i in range(n):\n            if str[i] == '1':\n                for j in range(lp + 1, i + 1):\n                    n1[j] = i\n                lp = i\n        for i in range(lp + 1, n):\n            n1[i] = n\n        dp1[n] = dp1[n + 1] = 0\n        dp2[n] = dp2[n + 1] = 0\n        for i in range(n - 1, -1, -1):\n            dp1[i] = dp1[i + 1]\n            if str[i] == '0' and n1[i] < n:\n                dp1[i] = max(dp1[i], dp1[n1[i] + 1] + 1)\n            if str[i] == '1' and n0[i] < n:\n                dp1[i] = max(dp1[i], dp1[n0[i] + 1] + 1)\n            dp2[i] = dp2[i + 1]\n            if n1[i] < n:\n                dp2[i] = max(dp2[i], dp1[n1[i] + 1] + 1)\n        l = dp2[0] + 1\n        index = n1[0] + 1\n        result = '1'\n        for i in range(1, l):\n            if index >= n:\n                result = result + '0'\n                continue\n            if n0[index] >= n:\n                result = result + '0'\n                index = n0[index] + 1\n                continue\n            if dp1[n0[index] + 1] < l - i - 1:\n                result = result + '0'\n                index = n0[index] + 1\n            else:\n                result = result + '1'\n                index = n1[index] + 1\n        print(result)\n    t -= 1", "q = int(input())\nfor i in range(q):\n    w = list(map(str, input()))\n    num0 = []\n    num1 = []\n    k = 0\n    count = 0\n    l = 0\n    for j in range(len(w)):\n        if w[j] == '0':\n            num0.append(j)\n            count = count + 1\n            for m in range(k):\n                num0.append(j)\n            k = 0\n        else:\n            k = k + 1\n    for m in range(k):\n        num0.append(len(w))\n    for j in range(len(w)):\n        if w[j] == '1':\n            num1.append(j)\n            for m in range(l):\n                num1.append(j)\n            l = 0\n        else:\n            l = l + 1\n    for m in range(l):\n        num1.append(len(w))\n    dp = [None] * (len(w) + 2)\n    dp1 = [None] * (len(w) + 2)\n    dp[len(w)] = dp1[len(w)] = dp[len(w) + 1] = dp1[len(w) + 1] = 0\n    for j in range(len(w) - 1, -1, -1):\n        dp[j] = dp[j + 1]\n        if w[j] == '0' and num1[j] < len(w):\n            dp[j] = max(dp[j], dp[num1[j] + 1] + 1)\n        if w[j] == '1' and num0[j] < len(w):\n            dp[j] = max(dp[j], dp[num0[j] + 1] + 1)\n        dp1[j] = dp1[j + 1]\n        if num1[j] < len(w):\n            dp1[j] = max(dp1[j], dp[num1[j] + 1] + 1)\n    lo = dp1[0] + 1\n    x = num1[0] + 1\n    ans = '1'\n    for j in range(1, lo):\n        if x >= len(w):\n            ans = ans + '0'\n            continue\n        if num0[x] >= len(w):\n            ans = ans + '0'\n            continue\n        if dp[num0[x] + 1] < lo - j - 1:\n            ans = ans + '0'\n            x = num0[x] + 1\n        else:\n            ans = ans + '1'\n            x = num1[x] + 1\n    if count == 0:\n        print('0')\n    else:\n        print(ans)", "def spar(s, n):\n    if '0' not in s:\n        print('0')\n        return\n    last_pos = -1\n    (dp, dp1) = ([0] * (n + 2), [0] * (n + 2))\n    (next0, next1) = ([0] * (n + 2), [0] * (n + 2))\n    for i in range(n):\n        if s[i] == '0':\n            for j in range(last_pos + 1, i + 1):\n                next0[j] = i\n            last_pos = i\n    for i in range(last_pos + 1, n):\n        next0[i] = n\n    last_pos = -1\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(last_pos + 1, i + 1):\n                next1[j] = i\n            last_pos = i\n    for i in range(last_pos + 1, n):\n        next1[i] = n\n    dp[n] = dp[n + 1] = 0\n    dp1[n] = dp1[n + 1] = 0\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and next1[i] < n:\n            dp[i] = max(dp[i], dp[next1[i] + 1] + 1)\n        if s[i] == '1' and next0[i] < n:\n            dp[i] = max(dp[i], dp[next0[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if next1[i] < n:\n            dp1[i] = max(dp1[i], dp[next1[i] + 1] + 1)\n    length = dp1[0] + 1\n    curind = next1[0] + 1\n    ans = ['1']\n    for i in range(1, length):\n        if curind >= n:\n            ans.append('0')\n            continue\n        if next0[curind] >= n:\n            ans.append('0')\n            curind = next0[curind] + 1\n            continue\n        if dp[next0[curind] + 1] < length - i - 1:\n            ans.append('0')\n            curind = next0[curind] + 1\n        else:\n            ans.append('1')\n            curind = next1[curind] + 1\n    print(''.join(map(str, ans)))\ntry:\n    for _ in range(int(input())):\n        s = input()\n        n = len(s)\n        spar(s, n)\nexcept:\n    pass", "for _ in range(int(input())):\n    s = input()\n    if '0' not in s:\n        print(0)\n        continue\n    if '1' not in s:\n        print(1)\n        continue\n    start = s.index('1')\n    s = s[start:]\n    if '0' not in s:\n        print(10)\n        continue\n    n = len(s)\n    num0 = [n] * n\n    num1 = [n] * n\n    dp = [0] * (n + 5)\n    dp1 = [0] * (n + 5)\n    for i in range(n):\n        if s[i] == '0':\n            num0[i] = i\n            k = i - 1\n            while k >= 0 and num0[k] > i:\n                num0[k] = i\n                k -= 1\n        if s[i] == '1':\n            num1[i] = i\n            k = i - 1\n            while k >= 0 and num1[k] > i:\n                num1[k] = i\n                k -= 1\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and num1[i] < n:\n            dp[i] = max(dp[i], dp[num1[i] + 1] + 1)\n        if s[i] == '1' and num0[i] < n:\n            dp[i] = max(dp[i], dp[num0[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if num1[i] < n:\n            dp1[i] = max(dp1[i], dp[num1[i] + 1] + 1)\n    ans = '1'\n    l = dp1[0] + 1\n    x = num1[0] + 1\n    for i in range(1, l):\n        if x >= n:\n            ans += '0'\n            continue\n        if num0[x] >= n:\n            ans += '0'\n            x = num0[x] + 1\n            continue\n        if dp[num0[x] + 1] < l - i - 1:\n            ans += '0'\n            x = num0[x] + 1\n            continue\n        ans += '1'\n        x = num1[x] + 1\n    print(ans)", "for t in range(int(input())):\n    inputString = input()\n    if inputString == '0' * len(inputString):\n        print('1')\n    else:\n        some = 0\n        while inputString[some] == '0':\n            some += 1\n        s = inputString[some:]\n        n = len(s)\n        next01 = [[-1, -1] for i in range(n)]\n        queueForZero = []\n        queueForOne = []\n        for i in range(n):\n            if s[i] == '0':\n                for j in range(len(queueForZero)):\n                    next01[queueForZero[j]][0] = i\n                queueForZero.clear()\n            elif s[i] == '1':\n                for j in range(len(queueForOne)):\n                    next01[queueForOne[j]][1] = i\n                queueForOne.clear()\n            queueForOne.append(i)\n            queueForZero.append(i)\n        if inputString == '1' * n:\n            print('0')\n        else:\n            ans = '1'\n            i = 0\n            if next01[i][0] == -1:\n                print('10')\n            elif next01[i][1] == -1:\n                print('11')\n            else:\n                x0 = next01[i][0]\n                x1 = next01[i][1]\n                while True:\n                    x0 = next01[i][0]\n                    x1 = next01[i][1]\n                    if x0 == -1:\n                        ans += '0'\n                        break\n                    if x1 == -1:\n                        ans += '1'\n                        break\n                    if x0 < x1:\n                        if next01[x0][0] == -1:\n                            ans += '00'\n                            break\n                        if next01[x1][0] == -1:\n                            ans += '10'\n                            break\n                        if next01[x1][1] == -1:\n                            ans += '11'\n                            break\n                    else:\n                        if next01[x0][0] == -1:\n                            ans += '00'\n                            break\n                        if next01[x0][1] == -1:\n                            ans += '01'\n                            break\n                        if next01[x1][1] == -1:\n                            ans += '11'\n                            break\n                    if x0 > 0 and x1 > 0 and (next01[x0][0] > 0) and (next01[x0][1] > 0) and (next01[x1][0] > 0) and (next01[1][1] > 0):\n                        if x0 > x1:\n                            ans += '0'\n                            i = x0\n                        elif x1 - x0 > 1:\n                            ans += '1'\n                            i = x1\n                        else:\n                            j = i + 1\n                            while j + 1 < n and s[j] == '0' and (s[j + 1] == '1'):\n                                j += 2\n                            if j == n:\n                                rem = (n - (i + 1)) // 2\n                                ans += '0' * rem\n                                ans += '0'\n                                break\n                            if s[j] == '1':\n                                rem = 1 + (j - (i + 1)) // 2\n                                ans += '0' * rem\n                                i = next01[j][0]\n                                if i == -1:\n                                    break\n                            else:\n                                rem = (j - (i + 1)) // 2\n                                ans += '1' * rem\n                                i = j - 1\n                        continue\n                print(ans)", "def solve(s):\n    if '0' not in s:\n        return '0'\n    if '1' not in s:\n        return '1'\n    n = len(s)\n    nx0 = [n for i in range(n + 1)]\n    nx1 = [n for i in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            nx0[i] = i\n        else:\n            nx0[i] = nx0[i + 1]\n        if s[i] == '1':\n            nx1[i] = i\n        else:\n            nx1[i] = nx1[i + 1]\n    dp0 = [0 for i in range(n + 2)]\n    dp1 = [0 for i in range(n + 2)]\n    dp0[-1] = 0\n    dp0[-2] = 0\n    dp1[-1] = 0\n    dp1[-2] = 0\n    for i in range(n - 1, -1, -1):\n        dp0[i] = dp0[i + 1]\n        dp1[i] = dp1[i + 1]\n        if s[i] == '0' and nx1[i] < n:\n            dp0[i] = max(dp0[i], dp0[nx1[i] + 1] + 1)\n        if s[i] == '1' and nx0[i] < n:\n            dp0[i] = max(dp0[i], dp0[nx0[i] + 1] + 1)\n        if nx1[i] < n:\n            dp1[i] = max(dp1[i], dp0[nx1[i] + 1] + 1)\n    ans_len = dp1[0] + 1\n    ans = '1'\n    pos = nx1[0] + 1\n    for i in range(1, ans_len):\n        if pos >= n:\n            ans += '0'\n            continue\n        if nx0[pos] >= n:\n            ans += '0'\n            pos = nx0[pos] + 1\n            continue\n        if dp0[nx0[pos] + 1] < ans_len - i - 1:\n            ans += '0'\n            pos = nx0[pos] + 1\n        else:\n            ans += '1'\n            pos = nx1[pos] + 1\n    return ans\n\ndef gen():\n    t = int(input())\n    for _ in range(t):\n        s = input()\n        print(solve(s))\ngen()", "size = 10 ** 6\npos0 = [0] * size\npos1 = [0] * size\nary1 = [0] * (size + 2)\nary2 = [0] * (size + 2)\nfor _ in range(int(input())):\n    s = str(input())\n    s_len = len(s)\n    last_pos_0 = -1\n    last_pos_1 = -1\n    for i in range(s_len):\n        if s[i] == '0':\n            for j in range(last_pos_0 + 1, i + 1):\n                pos0[j] = i\n            last_pos_0 = i\n        else:\n            for k in range(last_pos_1 + 1, i + 1):\n                pos1[k] = i\n            last_pos_1 = i\n    for i in range(last_pos_0 + 1, s_len):\n        pos0[i] = s_len\n    if pos0[0] == s_len:\n        print('0')\n        continue\n    for i in range(last_pos_1 + 1, s_len):\n        pos1[i] = s_len\n    ary1[s_len] = 0\n    ary1[s_len + 1] = 0\n    ary2[s_len] = 0\n    ary2[s_len + 1] = 0\n    for i in range(s_len - 1, -1, -1):\n        ary1[i] = ary1[i + 1]\n        ary2[i] = ary2[i + 1]\n        if s[i] == '0' and pos1[i] < s_len:\n            ary1[i] = max(ary1[i], ary1[pos1[i] + 1] + 1)\n        if s[i] == '1' and pos0[i] < s_len:\n            ary1[i] = max(ary1[i], ary1[pos0[i] + 1] + 1)\n        if pos1[i] < s_len:\n            ary2[i] = max(ary2[i], ary1[pos1[i] + 1] + 1)\n    lenght = ary2[0] + 1\n    index = pos1[0] + 1\n    ans = '1'\n    for i in range(1, lenght):\n        if index >= s_len:\n            ans += '0'\n        elif pos0[index] >= s_len or ary1[pos0[index] + 1] < lenght - i - 1:\n            ans += '0'\n            index = pos0[index] + 1\n        else:\n            ans += '1'\n            index = pos1[index] + 1\n    print(ans)", "nextzero = [0] * 1000000\nnextone = [0] * 1000000\ndp = [0] * 1000005\ndp1 = [0] * 1000005\n\ndef solve():\n    s = input()\n    n = len(s)\n    last = -1\n    for i in range(n):\n        if s[i] == '0':\n            for j in range(last + 1, i + 1):\n                nextzero[j] = i\n                last = i\n    for i in range(last + 1, n):\n        nextzero[i] = n\n    if nextzero[0] == n:\n        return '0'\n    last = -1\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(last + 1, i + 1):\n                nextone[j] = i\n                last = i\n    for i in range(last + 1, n):\n        nextone[i] = n\n    dp[n] = 0\n    dp[n + 1] = 0\n    dp1[n] = 0\n    dp1[n + 1] = 0\n    for i in reversed(range(0, n)):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and nextone[i] < n:\n            dp[i] = max(dp[i], dp[nextone[i] + 1] + 1)\n        if s[i] == '1' and nextzero[i] < n:\n            dp[i] = max(dp[i], dp[nextzero[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if nextone[i] < n:\n            dp1[i] = max(dp1[i], dp[nextone[i] + 1] + 1)\n    l = dp1[0] + 1\n    cur = nextone[0] + 1\n    ans = '1'\n    for i in range(1, l):\n        if cur >= n:\n            ans += '0'\n            continue\n        if nextzero[cur] >= n:\n            ans += '0'\n            cur = nextzero[cur] + 1\n            continue\n        if dp[nextzero[cur] + 1] < l - i - 1:\n            ans += '0'\n            cur = nextzero[cur] + 1\n        else:\n            ans += '1'\n            cur = nextone[cur] + 1\n    return ans\nt = int(input())\nfor z in range(t):\n    ans = solve()\n    print(ans)", "from sys import stdin, stdout\n(readline, writeline) = (stdin.readline, stdout.write)\nmx = 10 ** 6\ndp0 = [0 for i in range(mx + 2)]\ndp1 = [0 for i in range(mx + 2)]\nnext0 = [0 for i in range(mx)]\nnext1 = [0 for i in range(mx)]\n\ndef solve(s):\n    last_pos = -1\n    l = len(s)\n    for i in range(l):\n        if s[i] == '0':\n            for j in range(last_pos + 1, i + 1):\n                next0[j] = i\n            last_pos = i\n    for i in range(last_pos + 1, l):\n        next0[i] = l\n    if next0[0] == l:\n        print('0')\n        return\n    last_pos = -1\n    for i in range(l):\n        if s[i] == '1':\n            for j in range(last_pos + 1, i + 1):\n                next1[j] = i\n            last_pos = i\n    for i in range(last_pos + 1, l):\n        next1[i] = l\n    dp0[l] = dp0[l + 1] = 0\n    dp1[l] = dp1[l + 1] = 0\n    for i in range(l - 1, -1, -1):\n        dp0[i] = dp0[i + 1]\n        if s[i] == '0' and next1[i] < l:\n            dp0[i] = max(dp0[i], dp0[next1[i] + 1] + 1)\n        if s[i] == '1' and next0[i] < l:\n            dp0[i] = max(dp0[i], dp0[next0[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if next1[i] < l:\n            dp1[i] = max(dp1[i], dp0[next1[i] + 1] + 1)\n    length = dp1[0] + 1\n    curind = next1[0] + 1\n    ans = '1'\n    for i in range(1, length):\n        if curind >= l:\n            ans += '0'\n            continue\n        if next0[curind] >= l:\n            ans += '0'\n            curind = next0[curind] + 1\n            continue\n        if dp0[next0[curind] + 1] < length - i - 1:\n            ans += '0'\n            curind = next0[curind] + 1\n        else:\n            ans += '1'\n            curind = next1[curind] + 1\n    print(ans)\nfor _ in range(int(readline())):\n    s = input()\n    solve(s)", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    m = n\n    z_pos = n\n    o_pos = n\n    i = n - 1\n    z = [0] * n\n    o = [0] * n\n    while i >= 0:\n        if s[i] == '1':\n            o_pos = i\n        else:\n            z_pos = i\n        z[i] = z_pos\n        o[i] = o_pos\n        i = i - 1\n    if z[0] == n:\n        print('0')\n        continue\n    if o[0] == n:\n        print('1')\n        continue\n    res = '1'\n    dp = [0] * (n + 2)\n    k = [0] * (n + 2)\n    i = n - 1\n    while i >= 0:\n        dp[i] = dp[i + 1]\n        k[i] = k[i + 1]\n        if s[i] == '0':\n            if o[i] < n:\n                dp[i] = max(dp[i], dp[o[i] + 1] + 1)\n        elif z[i] < n:\n            dp[i] = max(dp[i], dp[z[i] + 1] + 1)\n        if o[i] < n:\n            k[i] = max(k[i], dp[o[i] + 1] + 1)\n        if i == 0:\n            m = k[i] + 1\n            pos = o[i] + 1\n        i = i - 1\n    for i in range(1, m):\n        if pos >= n:\n            res = res + '0'\n            continue\n        if z[pos] >= n:\n            pos = z[pos] + 1\n            res = res + '0'\n            continue\n        if dp[z[pos] + 1] >= m - i - 1:\n            pos = o[pos] + 1\n            res = res + '1'\n        else:\n            pos = z[pos] + 1\n            res = res + '0'\n    print(res)", "inf = 10 ** 6\na1 = [0] * inf\na2 = [0] * inf\na3 = [0] * (inf + 2)\na4 = [0] * (inf + 2)\nt = int(input())\nfor i in range(t):\n    s = input()\n    l = len(s)\n    q = -1\n    for w in range(0, l):\n        if s[w] == '0':\n            for k in range(q + 1, w + 1):\n                a1[k] = w\n                q = w\n    for y in range(q + 1, l):\n        a1[y] = l\n    if a1[0] == l:\n        print(0)\n        continue\n    q = -1\n    for w in range(0, l):\n        if s[w] == '1':\n            for k in range(q + 1, w + 1):\n                a2[k] = w\n                q = w\n    for r in range(q + 1, l):\n        a2[r] = l\n    a3[l] = a3[l + 1] = 0\n    a4[l] = a4[l + 1] = 0\n    for e in range(l - 1, -1, -1):\n        a3[e] = a3[e + 1]\n        if s[e] == '0' and a2[e] < l:\n            a3[e] = max(a3[e], a3[a2[e] + 1] + 1)\n        if s[e] == '1' and a1[e] < l:\n            a3[e] = max(a3[e], a3[a1[e] + 1] + 1)\n        a4[e] = a4[e + 1]\n        if a2[e] < l:\n            a4[e] = max(a4[e], a3[a2[e] + 1] + 1)\n    x = a4[0] + 1\n    c = a2[0] + 1\n    a = '1'\n    for g in range(1, x):\n        if c >= l:\n            a += '0'\n            continue\n        if a1[c] >= l:\n            a += '0'\n            c = a1[c] + 1\n            continue\n        if a3[a1[c] + 1] < x - g - 1:\n            a += '0'\n            c = a1[c] + 1\n        else:\n            a += '1'\n            c = a2[c] + 1\n    print(a)", "maxn = 10 ** 6\n(dp, dp1, next0, next1) = ([''] * (maxn + 2), [''] * (maxn + 2), [''] * maxn, [''] * maxn)\n\ndef solve():\n    s = input()\n    n = len(s)\n    last = -1\n    for i in range(n):\n        if s[i] == '0':\n            for j in range(last + 1, i + 1):\n                next0[j] = i\n            last = i\n    for i in range(last + 1, n):\n        next0[i] = n\n    if next0[0] == n:\n        print(0)\n        return\n    last = -1\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(last + 1, i + 1):\n                next1[j] = i\n            last = i\n    for i in range(last + 1, n):\n        next1[i] = n\n    (dp[n], dp[n + 1], dp1[n], dp1[n + 1]) = (0, 0, 0, 0)\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and next1[i] < n:\n            dp[i] = max(dp[i], dp[next1[i] + 1] + 1)\n        if s[i] == '1' and next0[i] < n:\n            dp[i] = max(dp[i], dp[next0[i] + 1] + 1)\n        dp1[i] = dp[i + 1]\n        if next1[i] < n:\n            dp1[i] = max(dp1[i], dp[next1[i] + 1] + 1)\n    l = dp1[0] + 1\n    ind = next1[0] + 1\n    ans = '1'\n    for i in range(1, l):\n        if ind >= n:\n            ans += '0'\n            continue\n        if next0[ind] >= n:\n            ans += '0'\n            ind = next0[ind] + 1\n            continue\n        if dp[next0[ind] + 1] < l - i - 1:\n            ans += '0'\n            ind = next0[ind] + 1\n        else:\n            ans += '1'\n            ind = next1[ind] + 1\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "maxn = 10 ** 6\n(dp, dp1, next0, next1) = ([''] * (maxn + 2), [''] * (maxn + 2), [''] * maxn, [''] * maxn)\n\ndef solve():\n    s = input()\n    n = len(s)\n    last = -1\n    for i in range(n):\n        if s[i] == '0':\n            for j in range(last + 1, i + 1):\n                next0[j] = i\n            last = i\n    for i in range(last + 1, n):\n        next0[i] = n\n    if next0[0] == n:\n        print(0)\n        return\n    last = -1\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(last + 1, i + 1):\n                next1[j] = i\n            last = i\n    for i in range(last + 1, n):\n        next1[i] = n\n    (dp[n], dp[n + 1], dp1[n], dp1[n + 1]) = (0, 0, 0, 0)\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and next1[i] < n:\n            dp[i] = max(dp[i], dp[next1[i] + 1] + 1)\n        if s[i] == '1' and next0[i] < n:\n            dp[i] = max(dp[i], dp[next0[i] + 1] + 1)\n        dp1[i] = dp[i + 1]\n        if next1[i] < n:\n            dp1[i] = max(dp1[i], dp[next1[i] + 1] + 1)\n    l = dp1[0] + 1\n    ind = next1[0] + 1\n    ans = '1'\n    for i in range(1, l):\n        if ind >= n:\n            ans += '0'\n            continue\n        if next0[ind] >= n:\n            ans += '0'\n            ind = next0[ind] + 1\n            continue\n        if dp[next0[ind] + 1] < l - i - 1:\n            ans += '0'\n            ind = next0[ind] + 1\n        else:\n            ans += '1'\n            ind = next1[ind] + 1\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "maxn = 10 ** 6\nnext0 = [0] * maxn\nnext1 = [0] * maxn\ndp = [0] * (maxn + 2)\ndp1 = [0] * (maxn + 2)\n\ndef fun():\n    s = input()\n    n = len(s)\n    last_pos = -1\n    for i in range(n):\n        if s[i] == '0':\n            for j in range(last_pos + 1, i + 1):\n                next0[j] = i\n            last_pos = i\n    for i in range(last_pos + 1, n):\n        next0[i] = n\n    if next0[0] == n:\n        print(0)\n        return\n    last_pos = -1\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(last_pos + 1, i + 1):\n                next1[j] = i\n            last_pos = i\n    for i in range(last_pos + 1, n):\n        next1[i] = n\n    dp[n] = dp[n + 1] = 0\n    dp1[n] = dp1[n + 1] = 0\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and next1[i] < n:\n            dp[i] = max(dp[i], dp[next1[i] + 1] + 1)\n        if s[i] == '1' and next0[i] < n:\n            dp[i] = max(dp[i], dp[next0[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if next1[i] < n:\n            dp1[i] = max(dp1[i], dp[next1[i] + 1] + 1)\n    le = dp1[0] + 1\n    curind = next1[0] + 1\n    ans = '1'\n    for i in range(1, le):\n        if curind >= n:\n            ans += '0'\n            continue\n        if next0[curind] >= n:\n            ans += '0'\n            curind = next0[curind] + 1\n            continue\n        if dp[next0[curind] + 1] < le - i - 1:\n            ans += '0'\n            curind = next0[curind] + 1\n        else:\n            ans += '1'\n            curind = next1[curind] + 1\n    print(ans)\nfor _ in range(int(input())):\n    fun()", "maxn = 10 ** 6\n(dp, dp1, next0, next1) = ([''] * (maxn + 2), [''] * (maxn + 2), [''] * maxn, [''] * maxn)\n\ndef solve():\n    s = input()\n    n = len(s)\n    last = -1\n    for i in range(n):\n        if s[i] == '0':\n            for j in range(last + 1, i + 1):\n                next0[j] = i\n            last = i\n    for i in range(last + 1, n):\n        next0[i] = n\n    if next0[0] == n:\n        print(0)\n        return\n    last = -1\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(last + 1, i + 1):\n                next1[j] = i\n            last = i\n    for i in range(last + 1, n):\n        next1[i] = n\n    (dp[n], dp[n + 1], dp1[n], dp1[n + 1]) = (0, 0, 0, 0)\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and next1[i] < n:\n            dp[i] = max(dp[i], dp[next1[i] + 1] + 1)\n        if s[i] == '1' and next0[i] < n:\n            dp[i] = max(dp[i], dp[next0[i] + 1] + 1)\n        dp1[i] = dp[i + 1]\n        if next1[i] < n:\n            dp1[i] = max(dp1[i], dp[next1[i] + 1] + 1)\n    l = dp1[0] + 1\n    ind = next1[0] + 1\n    ans = '1'\n    for i in range(1, l):\n        if ind >= n:\n            ans += '0'\n            continue\n        if next0[ind] >= n:\n            ans += '0'\n            ind = next0[ind] + 1\n            continue\n        if dp[next0[ind] + 1] < l - i - 1:\n            ans += '0'\n            ind = next0[ind] + 1\n        else:\n            ans += '1'\n            ind = next1[ind] + 1\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "maxn = 10 ** 6\n(dp, dp1, next0, next1) = ([''] * (maxn + 2), [''] * (maxn + 2), [''] * maxn, [''] * maxn)\n\ndef solve():\n    s = input()\n    n = len(s)\n    last = -1\n    for i in range(n):\n        if s[i] == '0':\n            for j in range(last + 1, i + 1):\n                next0[j] = i\n            last = i\n    for i in range(last + 1, n):\n        next0[i] = n\n    if next0[0] == n:\n        print(0)\n        return\n    last = -1\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(last + 1, i + 1):\n                next1[j] = i\n            last = i\n    for i in range(last + 1, n):\n        next1[i] = n\n    (dp[n], dp[n + 1], dp1[n], dp1[n + 1]) = (0, 0, 0, 0)\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and next1[i] < n:\n            dp[i] = max(dp[i], dp[next1[i] + 1] + 1)\n        if s[i] == '1' and next0[i] < n:\n            dp[i] = max(dp[i], dp[next0[i] + 1] + 1)\n        dp1[i] = dp[i + 1]\n        if next1[i] < n:\n            dp1[i] = max(dp1[i], dp[next1[i] + 1] + 1)\n    l = dp1[0] + 1\n    ind = next1[0] + 1\n    ans = '1'\n    for i in range(1, l):\n        if ind >= n:\n            ans += '0'\n            continue\n        if next0[ind] >= n:\n            ans += '0'\n            ind = next0[ind] + 1\n            continue\n        if dp[next0[ind] + 1] < l - i - 1:\n            ans += '0'\n            ind = next0[ind] + 1\n        else:\n            ans += '1'\n            ind = next1[ind] + 1\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "import collections\nimport sys\nsys.setrecursionlimit(10 ** 6)\n\ndef makegroups(st):\n    pr = -1\n    count = 0\n    N = 0\n    res = []\n    for ch in st:\n        im = 1 if ch == '1' else 0\n        if im == pr:\n            count += 1\n        else:\n            if count != 0:\n                count = min(count, 3)\n                N += count\n                res.append(count)\n            pr = im\n            count = 1\n    if count != 0:\n        count = min(count, 3)\n        N += count\n        res.append(count)\n    return (N, res)\n\ndef dfs(el):\n    distance = [-1] * (len(el) >> 1)\n    distance[0] = 0\n    fifo = collections.deque([(0, 1, 1, 1)])\n    while fifo:\n        (parent, child, bit, dist) = fifo.popleft()\n        if distance[child] == -1:\n            distance[child] = dist\n            el[(parent << 1) + bit] = child\n            for b2 in range(2):\n                c2 = el[(child << 1) + b2]\n                if c2 != -1:\n                    fifo.append((child, c2, b2, dist + 1))\n            el[child << 1] = -1\n            el[(child << 1) + 1] = -1\n        elif distance[child] == dist:\n            el[(parent << 1) + bit] = child\n\ndef isOnPath(vertex, result, known, el):\n    if known[vertex]:\n        return result[vertex]\n    vi0 = vertex << 1\n    vi1 = vi0 + 1\n    if el[vi0] == -1 and el[vi1] == -1:\n        result[vertex] = False\n    elif el[vi0] == -1:\n        result[vertex] = isOnPath(el[vi1], result, known, el)\n    elif el[vi1] == -1:\n        result[vertex] = isOnPath(el[vi0], result, known, el)\n    else:\n        result[vertex] = isOnPath(el[vi0], result, known, el) or isOnPath(el[vi1], result, known, el)\n    known[vertex] = True\n    return result[vertex]\n\ndef printPath(endv, vonpath, el):\n    vertex = 0\n    result = []\n    while vertex != endv:\n        vi0 = vertex << 1\n        vi1 = vi0 + 1\n        if el[vi0] != -1 and el[vi1] != -1:\n            if vonpath[el[vi0]]:\n                result.append(0)\n                vertex = el[vi0]\n            else:\n                result.append(1)\n                vertex = el[vi1]\n        elif el[vi0] == -1:\n            result.append(1)\n            vertex = el[vi1]\n        else:\n            result.append(0)\n            vertex = el[vi0]\n    print(*result, sep='')\n\ndef solve(st):\n    (N, groups) = makegroups(st)\n    firstone = st[0] == '1'\n    if len(groups) == 1:\n        if firstone:\n            print(0)\n            return\n        else:\n            print(1)\n            return\n    if not firstone:\n        N -= groups[0]\n    el = [-1] * (2 * (N + 2))\n    vertex = 1\n    bit = 1\n    for index in range(0 if firstone else 1, len(groups)):\n        count = groups[index]\n        jump = vertex + count + (0 if index == len(groups) - 1 else groups[index + 1])\n        for v in range(vertex, vertex + count - 1):\n            el[(v << 1) + bit] = v + 1\n            el[(v << 1) + (1 - bit)] = vertex + count\n        v = vertex + count - 1\n        el[(v << 1) + bit] = jump\n        el[(v << 1) + (1 - bit)] = vertex + count\n        vertex += count\n        bit = 1 - bit\n    dfs(el)\n    vonpath = [False] * (N + 1) + [True]\n    isOnPath(0, vonpath, vonpath[:], el)\n    printPath(N + 1, vonpath, el)\nfor _ in range(int(input())):\n    solve(input())", "maxn = 10 ** 6\n(dp, dp1, next0, next1) = ([''] * (maxn + 2), [''] * (maxn + 2), [''] * maxn, [''] * maxn)\n\ndef solve():\n    s = input()\n    n = len(s)\n    last = -1\n    for i in range(n):\n        if s[i] == '0':\n            for j in range(last + 1, i + 1):\n                next0[j] = i\n            last = i\n    for i in range(last + 1, n):\n        next0[i] = n\n    if next0[0] == n:\n        print(0)\n        return\n    last = -1\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(last + 1, i + 1):\n                next1[j] = i\n            last = i\n    for i in range(last + 1, n):\n        next1[i] = n\n    (dp[n], dp[n + 1], dp1[n], dp1[n + 1]) = (0, 0, 0, 0)\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and next1[i] < n:\n            dp[i] = max(dp[i], dp[next1[i] + 1] + 1)\n        if s[i] == '1' and next0[i] < n:\n            dp[i] = max(dp[i], dp[next0[i] + 1] + 1)\n        dp1[i] = dp[i + 1]\n        if next1[i] < n:\n            dp1[i] = max(dp1[i], dp[next1[i] + 1] + 1)\n    l = dp1[0] + 1\n    ind = next1[0] + 1\n    ans = '1'\n    for i in range(1, l):\n        if ind >= n:\n            ans += '0'\n            continue\n        if next0[ind] >= n:\n            ans += '0'\n            ind = next0[ind] + 1\n            continue\n        if dp[next0[ind] + 1] < l - i - 1:\n            ans += '0'\n            ind = next0[ind] + 1\n        else:\n            ans += '1'\n            ind = next1[ind] + 1\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "n0 = [-1] * 10000000\nn1 = [-1] * 10000000\ndp = [-1] * 10000000\ndp1 = [-1] * 10000000\nfor _ in range(int(input())):\n    s = input()\n    l = len(s)\n    lp = -1\n    for i in range(0, l):\n        if s[i] == '0':\n            for j in range(lp + 1, i + 1):\n                n0[j] = i\n            lp = i\n    for i in range(lp + 1, l):\n        n0[i] = l\n    if n0[0] == l:\n        print(0)\n        continue\n    lp = -1\n    for i in range(0, l):\n        if s[i] == '1':\n            for j in range(lp + 1, i + 1):\n                n1[j] = i\n            lp = i\n    for i in range(lp + 1, l):\n        n1[i] = l\n    dp[l + 1] = 0\n    dp[l] = 0\n    dp1[l + 1] = 0\n    dp1[l] = 0\n    i = l - 1\n    while i >= 0:\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and n1[i] < l:\n            dp[i] = max(dp[i], dp[n1[i] + 1] + 1)\n        if s[i] == '1' and n0[i] < l:\n            dp[i] = max(dp[i], dp[n0[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if n1[i] < l:\n            dp1[i] = max(dp1[i], dp[n1[i] + 1] + 1)\n        i -= 1\n    ans = '1'\n    curr = n1[0] + 1\n    le = dp1[0] + 1\n    for i in range(1, le):\n        if curr >= l:\n            ans += '0'\n            continue\n        if n0[curr] >= l:\n            ans += '0'\n            curr = n0[curr] + 1\n            continue\n        if dp[n0[curr] + 1] < le - i - 1:\n            ans += '0'\n            curr = n0[curr] + 1\n        else:\n            ans += '1'\n            curr = n1[curr] + 1\n    print(ans)", "maxn = 10 ** 6\n(dp, dp1, next0, next1) = ([''] * (maxn + 2), [''] * (maxn + 2), [''] * maxn, [''] * maxn)\n\ndef solve():\n    s = input()\n    n = len(s)\n    last = -1\n    for i in range(n):\n        if s[i] == '0':\n            for j in range(last + 1, i + 1):\n                next0[j] = i\n            last = i\n    for i in range(last + 1, n):\n        next0[i] = n\n    if next0[0] == n:\n        print(0)\n        return\n    last = -1\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(last + 1, i + 1):\n                next1[j] = i\n            last = i\n    for i in range(last + 1, n):\n        next1[i] = n\n    (dp[n], dp[n + 1], dp1[n], dp1[n + 1]) = (0, 0, 0, 0)\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and next1[i] < n:\n            dp[i] = max(dp[i], dp[next1[i] + 1] + 1)\n        if s[i] == '1' and next0[i] < n:\n            dp[i] = max(dp[i], dp[next0[i] + 1] + 1)\n        dp1[i] = dp[i + 1]\n        if next1[i] < n:\n            dp1[i] = max(dp1[i], dp[next1[i] + 1] + 1)\n    l = dp1[0] + 1\n    ind = next1[0] + 1\n    ans = '1'\n    for i in range(1, l):\n        if ind >= n:\n            ans += '0'\n            continue\n        if next0[ind] >= n:\n            ans += '0'\n            ind = next0[ind] + 1\n            continue\n        if dp[next0[ind] + 1] < l - i - 1:\n            ans += '0'\n            ind = next0[ind] + 1\n        else:\n            ans += '1'\n            ind = next1[ind] + 1\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    string = input()\n    le = len(string)\n    first_list = []\n    second_list = []\n    dp0 = [0, 0]\n    dp1 = [0, 0]\n    prev0 = 0\n    prev1 = 0\n    for i in range(le):\n        if string[i] == '0':\n            for j in range(prev0, i + 1):\n                first_list.append(i)\n                dp0.append(0)\n                prev0 = i + 1\n        elif string[i] == '1':\n            for k in range(prev1, i + 1):\n                second_list.append(i)\n                dp1.append(0)\n                prev1 = i + 1\n    if len(first_list) == 0:\n        print(0)\n        return\n    if len(second_list) == 0:\n        print(1)\n        return\n    if len(first_list) > len(second_list):\n        for i in range(len(second_list), len(first_list)):\n            second_list.append(le)\n            dp1.append(0)\n    elif len(first_list) < len(second_list):\n        for i in range(len(first_list), len(second_list)):\n            first_list.append(le)\n            dp0.append(0)\n    for i in reversed(range(le)):\n        dp0[i] = dp0[i + 1]\n        if string[i] == '0' and second_list[i] < le:\n            dp0[i] = max(dp0[i], dp0[second_list[i] + 1] + 1)\n        if string[i] == '1' and first_list[i] < le:\n            dp0[i] = max(dp0[i], dp0[first_list[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if second_list[i] < le:\n            dp1[i] = max(dp1[i], dp0[second_list[i] + 1] + 1)\n    l = dp1[0] + 1\n    x = second_list[0] + 1\n    final_ans = '1'\n    for i in range(1, l):\n        if x >= le:\n            final_ans += '0'\n            continue\n        if first_list[x] >= le:\n            final_ans += '0'\n            x = first_list[x] + 1\n            continue\n        if dp0[first_list[x] + 1] < l - i - 1:\n            final_ans += '0'\n            x = first_list[x] + 1\n        else:\n            final_ans += '1'\n            x = second_list[x] + 1\n    print(final_ans)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    string = input()\n    le = len(string)\n    first_list = []\n    second_list = []\n    dp0 = [0, 0]\n    dp1 = [0, 0]\n    prev0 = 0\n    prev1 = 0\n    for i in range(le):\n        if string[i] == '0':\n            for j in range(prev0, i + 1):\n                first_list.append(i)\n                dp0.append(0)\n                prev0 = i + 1\n        elif string[i] == '1':\n            for k in range(prev1, i + 1):\n                second_list.append(i)\n                dp1.append(0)\n                prev1 = i + 1\n    if len(first_list) == 0:\n        print(0)\n        return\n    if len(second_list) == 0:\n        print(1)\n        return\n    if len(first_list) > len(second_list):\n        for i in range(len(second_list), len(first_list)):\n            second_list.append(le)\n            dp1.append(0)\n    elif len(first_list) < len(second_list):\n        for i in range(len(first_list), len(second_list)):\n            first_list.append(le)\n            dp0.append(0)\n    for i in reversed(range(le)):\n        dp0[i] = dp0[i + 1]\n        if string[i] == '0' and second_list[i] < le:\n            dp0[i] = max(dp0[i], dp0[second_list[i] + 1] + 1)\n        if string[i] == '1' and first_list[i] < le:\n            dp0[i] = max(dp0[i], dp0[first_list[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if second_list[i] < le:\n            dp1[i] = max(dp1[i], dp0[second_list[i] + 1] + 1)\n    l = dp1[0] + 1\n    x = second_list[0] + 1\n    final_ans = '1'\n    for i in range(1, l):\n        if x >= le:\n            final_ans += '0'\n            continue\n        if first_list[x] >= le:\n            final_ans += '0'\n            x = first_list[x] + 1\n            continue\n        if dp0[first_list[x] + 1] < l - i - 1:\n            final_ans += '0'\n            x = first_list[x] + 1\n        else:\n            final_ans += '1'\n            x = second_list[x] + 1\n    print(final_ans)\nfor _ in range(int(input())):\n    solve()", "T = int(input())\nfor _ in range(T):\n    S = input()\n    L = len(S)\n    N0 = []\n    N1 = []\n    dp0 = [0, 0]\n    dp1 = [0, 0]\n    prev0 = 0\n    prev1 = 0\n    for i in range(L):\n        if S[i] == '0':\n            for j in range(prev0, i + 1):\n                N0.append(i)\n                dp0.append(0)\n                prev0 = i + 1\n        elif S[i] == '1':\n            for k in range(prev1, i + 1):\n                N1.append(i)\n                dp1.append(0)\n                prev1 = i + 1\n    if len(N0) == 0:\n        print(0)\n        continue\n    if len(N1) == 0:\n        print(1)\n        continue\n    if len(N0) > len(N1):\n        for i in range(len(N1), len(N0)):\n            N1.append(L)\n            dp1.append(0)\n    elif len(N0) < len(N1):\n        for i in range(len(N0), len(N1)):\n            N0.append(L)\n            dp0.append(0)\n    for i in reversed(range(L)):\n        dp0[i] = dp0[i + 1]\n        if S[i] == '0' and N1[i] < L:\n            dp0[i] = max(dp0[i], dp0[N1[i] + 1] + 1)\n        if S[i] == '1' and N0[i] < L:\n            dp0[i] = max(dp0[i], dp0[N0[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if N1[i] < L:\n            dp1[i] = max(dp1[i], dp0[N1[i] + 1] + 1)\n    l = dp1[0] + 1\n    x = N1[0] + 1\n    Ans = '1'\n    for i in range(1, l):\n        if x >= L:\n            Ans += '0'\n            continue\n        if N0[x] >= L:\n            Ans += '0'\n            x = N0[x] + 1\n            continue\n        if dp0[N0[x] + 1] < l - i - 1:\n            Ans += '0'\n            x = N0[x] + 1\n        else:\n            Ans += '1'\n            x = N1[x] + 1\n    print(Ans)", "size = 1000000\narr1 = [None] * (size + 2)\narr2 = [None] * (size + 2)\nmat1 = [None] * size\nmat2 = [None] * size\n\ndef binarystring(string):\n    n = len(string)\n    pos = -1\n    for i in range(n):\n        if string[i] == '0':\n            for j in range(pos + 1, i + 1):\n                mat1[j] = i\n                pos = i\n    for i in range(pos + 1, n):\n        mat1[i] = n\n    if mat1[0] == n:\n        print('0\\n')\n        return\n    pos = -1\n    for i in range(n):\n        if string[i] == '1':\n            for j in range(pos + 1, i + 1):\n                mat2[j] = i\n                pos = i\n    for i in range(pos + 1, n):\n        mat2[i] = n\n    arr1[n] = arr1[n + 1] = 0\n    arr2[n] = arr2[n + 1] = 0\n    i = n - 1\n    while i >= 0:\n        arr1[i] = arr1[i + 1]\n        if string[i] == '0' and mat2[i] < n:\n            arr1[i] = max(arr1[i], arr1[mat2[i] + 1] + 1)\n        if string[i] == '1' and mat1[i] < n:\n            arr1[i] = max(arr1[i], arr1[mat1[i] + 1] + 1)\n        arr2[i] = arr2[i + 1]\n        if mat2[i] < n:\n            arr2[i] = max(arr2[i], arr1[mat2[i] + 1] + 1)\n        i -= 1\n    len_ = arr2[0] + 1\n    currentind = mat2[0] + 1\n    ans = '1'\n    for i in range(1, len_):\n        if currentind >= n:\n            ans += '0'\n            continue\n        if mat1[currentind] >= n:\n            ans += '0'\n            currentind = mat1[currentind] + 1\n            continue\n        if arr1[mat1[currentind] + 1] < len_ - i - 1:\n            ans += '0'\n            currentind = mat1[currentind] + 1\n        else:\n            ans += '1'\n            currentind = mat2[currentind] + 1\n    print(ans)\nt = int(input())\nwhile t > 0:\n    string = input()\n    binarystring(string)\n    t -= 1", "from sys import stdin, stdout, setrecursionlimit\nfrom math import ceil\nt = int(stdin.readline())\nfor _ in range(t):\n    a = input()\n    N = len(a)\n    n0 = [N] * N\n    n1 = [N] * N\n    t0 = [0] * (N + 2)\n    t1 = [0] * (N + 2)\n    lp = -1\n    for i in range(N):\n        if a[i] == '0':\n            for j in range(lp + 1, i + 1):\n                n0[j] = i\n                lp = i\n    for i in range(lp + 1, N):\n        n0[i] = N\n    if n0[0] == N:\n        print(0)\n        continue\n    lp = -1\n    for i in range(N):\n        if a[i] == '1':\n            for j in range(lp + 1, i + 1):\n                n1[j] = i\n                lp = i\n    for i in range(lp + 1, N):\n        n1[i] = N\n    for i in range(N - 1, -1, -1):\n        t0[i] = t0[i + 1]\n        if a[i] == '0' and n1[i] < N:\n            t0[i] = max(t0[i], t0[n1[i] + 1] + 1)\n        if a[i] == '1' and n0[i] < N:\n            t0[i] = max(t0[i], t0[n0[i] + 1] + 1)\n        t1[i] = t1[i + 1]\n        if n1[i] < N:\n            t1[i] = max(t1[i], t0[n1[i] + 1] + 1)\n    l = t1[0] + 1\n    x = n1[0] + 1\n    ans = '1'\n    for i in range(1, l):\n        if x >= N:\n            ans += '0'\n            continue\n        if n0[x] >= N:\n            ans += '0'\n            x = n0[x] + 1\n            continue\n        if t0[n0[x] + 1] < l - i - 1:\n            ans += '0'\n            x = n0[x] + 1\n        else:\n            ans += '1'\n            x = n1[x] + 1\n    print(ans)", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    zeros = [n] * n\n    ones = [n] * n\n    DPini = [None] * n + [0, 0]\n    DPfin = [None] * n + [0, 0]\n    prev = -1\n    for x in range(len(s)):\n        if s[x] == '0':\n            for y in range(prev + 1, x + 1):\n                zeros[y] = x\n            prev = x\n    prev = -1\n    for x in range(len(s)):\n        if s[x] == '1':\n            for y in range(prev + 1, x + 1):\n                ones[y] = x\n            prev = x\n    if zeros[0] == n:\n        print('0')\n        continue\n    if ones[0] == n:\n        print('1')\n        continue\n    for x in range(n - 1, -1, -1):\n        DPini[x] = DPini[x + 1]\n        if s[x] == '0' and ones[x] < n:\n            DPini[x] = max(DPini[x], DPini[ones[x] + 1] + 1)\n        if s[x] == '1' and zeros[x] < n:\n            DPini[x] = max(DPini[x], DPini[zeros[x] + 1] + 1)\n        DPfin[x] = DPfin[x + 1]\n        if ones[x] < n:\n            DPfin[x] = max(DPfin[x], DPini[ones[x] + 1] + 1)\n    l = DPfin[0] + 1\n    a = ones[0] + 1\n    sol = '1'\n    for x in range(1, l):\n        if a >= n:\n            sol += '0'\n        elif zeros[a] >= n:\n            sol += '0'\n            a = zeros[a] + 1\n        elif DPini[zeros[a] + 1] < l - x - 1:\n            sol += '0'\n            a = zeros[a] + 1\n        else:\n            sol += '1'\n            a = ones[a] + 1\n    print(sol)", "m = 1000000\n(a, b) = ([0] * m, [0] * m)\n(d0, d1) = ([0] * (m + 2), [0] * (m + 2))\n\ndef mac():\n    s = input()\n    n = len(s)\n    pos = -1\n    for i in range(n):\n        if s[i] == '0':\n            for j in range(pos + 1, i + 1):\n                a[j] = i\n            pos = i\n    for i in range(pos + 1, n):\n        a[i] = n\n    if a[0] == n:\n        return '0'\n    pos = -1\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(pos + 1, i + 1):\n                b[j] = i\n            pos = i\n        if s[i] == '1' and a[i] < n:\n            d0[i] = max(d0[i], d0[a[i] + 1] + 1)\n        d1[i] = d1[i + 1]\n        if b[i] < n:\n            d1[i] = max(d1[i], d0[b[i] + 1] + 1)\n    for i in range(pos + 1, n):\n        b[i] = n\n    d0[n + 1] = d0[n] = 0\n    d1[n + 1] = d1[n] = 0\n    for i in range(n - 1, -1, -1):\n        d0[i] = d0[i + 1]\n        if s[i] == '0' and b[i] < n:\n            d0[i] = max(d0[i], d0[b[i] + 1] + 1)\n        if s[i] == '1' and a[i] < n:\n            d0[i] = max(d0[i], d0[a[i] + 1] + 1)\n        d1[i] = d1[i + 1]\n        if b[i] < n:\n            d1[i] = max(d1[i], d0[b[i] + 1] + 1)\n    x = d1[0] + 1\n    count = b[0] + 1\n    ans = '1'\n    for i in range(1, x):\n        if count >= n:\n            ans += '0'\n            continue\n        if a[count] >= n:\n            ans += '0'\n            count = a[count] + 1\n            continue\n        if d0[a[count] + 1] < x - i - 1:\n            ans += '0'\n            count = a[count] + 1\n        else:\n            ans += '1'\n            count = b[count] + 1\n    return ans\nfor _ in range(int(input())):\n    print(mac())", "INT_MAX = int(1000000.0)\n(next0, next1) = ([-1] * INT_MAX, [-1] * INT_MAX)\n(dp, dp1) = ([-1] * (INT_MAX + 2), [-1] * (INT_MAX + 2))\n\ndef stringMex(s):\n    n = len(s)\n    pos = -1\n    for i in range(n):\n        if s[i] == '0':\n            for j in range(pos + 1, i + 1):\n                next0[j] = i\n            pos = i\n    for i in range(pos + 1, n):\n        next0[i] = n\n    if next0[0] == n:\n        print('0')\n        return\n    pos = -1\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(pos + 1, i + 1):\n                next1[j] = i\n            pos = i\n    for i in range(pos + 1, n):\n        next1[i] = n\n    (dp[n], dp[n + 1]) = (0, 0)\n    (dp1[n], dp1[n + 1]) = (0, 0)\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and next1[i] < n:\n            dp[i] = max(dp[i], dp[next1[i] + 1] + 1)\n        if s[i] == '1' and next0[i] < n:\n            dp[i] = max(dp[i], dp[next0[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if next1[i] < n:\n            dp1[i] = max(dp1[i], dp[next1[i] + 1] + 1)\n    x = dp1[0] + 1\n    count = next1[0] + 1\n    ans = '1'\n    for i in range(1, x):\n        if count >= n:\n            ans += '0'\n            continue\n        if next0[count] >= n:\n            ans += '0'\n            count = next0[count] + 1\n            continue\n        if dp[next0[count] + 1] < x - i - 1:\n            ans += '0'\n            count = next0[count] + 1\n        else:\n            ans += '1'\n            count = next1[count] + 1\n    print(ans)\n    return\nfor _ in range(int(input())):\n    stringMex(input())", "T = int(input())\nfor t in range(T):\n    binary_string = str(input())\n    n = len(binary_string)\n    num_zero = [-1] * n\n    num_one = [-1] * n\n    last_zero = n\n    last_one = n\n    for i in range(n - 1, -1, -1):\n        if binary_string[i] == '1':\n            last_one = i\n        else:\n            last_zero = i\n        num_zero[i] = last_zero\n        num_one[i] = last_one\n    dp = [-1] * (n + 2)\n    dp_1 = [-1] * (n + 2)\n    dp[n] = 0\n    dp[n + 1] = 0\n    dp_1[n] = 0\n    dp_1[n + 1] = 0\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if binary_string[i] == '0' and num_one[i] < n:\n            dp[i] = max(dp[i], dp[num_one[i] + 1] + 1)\n        if binary_string[i] == '1' and num_zero[i] < n:\n            dp[i] = max(dp[i], dp[num_zero[i] + 1] + 1)\n        dp_1[i] = dp_1[i + 1]\n        if num_one[i] < n:\n            dp_1[i] = max(dp_1[i], dp[num_one[i] + 1] + 1)\n    ans_size = dp_1[0] + 1\n    x = num_one[0] + 1\n    if '0' in binary_string:\n        ans = '1'\n        for i in range(1, ans_size):\n            if x >= n:\n                ans += '0'\n            elif num_zero[x] >= n:\n                x = num_zero[x] + 1\n                ans += '0'\n            elif dp[num_zero[x] + 1] < ans_size - i - 1:\n                x = num_zero[x] + 1\n                ans += '0'\n            else:\n                x = num_one[x] + 1\n                ans += '1'\n    else:\n        ans = '0'\n    print(ans)", "for i in range(int(input())):\n    s = input()\n    n = len(s)\n    i = 0\n    zero = [0] * n\n    one = [0] * n\n    dp0 = [0] * (n + 2)\n    dp1 = [0] * (n + 2)\n    pos = -1\n    for i in range(n):\n        if s[i] == '0':\n            for j in range(pos + 1, i + 1):\n                zero[j] = i\n            pos = i\n    for i in range(pos + 1, n):\n        zero[i] = n\n    if zero[0] == n:\n        print(0)\n    else:\n        pos = -1\n        for i in range(n):\n            if s[i] == '1':\n                for j in range(pos + 1, i + 1):\n                    one[j] = i\n                pos = i\n        for i in range(pos + 1, n):\n            one[i] = n\n        for i in range(n - 1, -1, -1):\n            dp0[i] = dp0[i + 1]\n            if s[i] == '0' and one[i] < n:\n                dp0[i] = max(dp0[i], dp0[one[i] + 1] + 1)\n            if s[i] == '1' and zero[i] < n:\n                dp0[i] = max(dp0[i], dp0[zero[i] + 1] + 1)\n            dp1[i] = dp1[i + 1]\n            if one[i] < n:\n                dp1[i] = max(dp1[i], dp0[one[i] + 1] + 1)\n        x = dp1[0] + 1\n        ans = '1'\n        count = one[0] + 1\n        for i in range(1, x):\n            if count >= n:\n                ans += '0'\n                continue\n            if zero[count] >= n:\n                ans += '0'\n                count = zero[count] + 1\n                continue\n            if dp0[zero[count] + 1] < x - i - 1:\n                ans += '0'\n                count = zero[count] + 1\n            else:\n                ans += '1'\n                count = one[count] + 1\n        print(ans)", "t = int(input())\nwhile t > 0:\n    s = input()\n    t -= 1\n    n = len(s)\n    if s.count('1') == n:\n        print(0)\n    elif s.count('0') == n:\n        print(1)\n    else:\n        ind = 0\n        while s[ind] == '0':\n            ind += 1\n        if s[-1] == '0':\n            dp = [0] * (n + 1)\n            zero = [0] * (n + 1)\n            for i in range(n - 1, -1, -1):\n                if s[i] == '0':\n                    zero[i] = zero[i + 1] + 1\n                else:\n                    zero[i] = zero[i + 1]\n            n0_m1 = 2\n            ind_m1 = n\n            n0_m2 = 2\n            ind_m2 = n - 1\n            n1 = 1\n            ind_n1 = -1\n            dp[n - 1] = -1\n            for i in range(n - 2, -1, -1):\n                if s[i] == '0':\n                    dp[i] = ind_n1\n                    if n1 < n0_m2:\n                        if n1 < n0_m1:\n                            n0_m2 = n0_m1 + 1\n                            ind_m2 = ind_m1\n                            n0_m1 = n1 + 1\n                            ind_m1 = i\n                        else:\n                            n0_m1 = n0_m1 + 1\n                            n0_m2 = n1 + 1\n                            ind_m2 = i\n                    else:\n                        n0_m1 += 1\n                        n0_m2 += 1\n                else:\n                    if n1 < n0_m1:\n                        dp[i] = ind_n1\n                        n1 = n1 + 1\n                    else:\n                        dp[i] = ind_m1\n                        n1 = 1 + n0_m1\n                    ind_n1 = i\n        else:\n            dp = [0] * (n + 1)\n            zero = [0] * (n + 1)\n            for i in range(n - 1, -1, -1):\n                if s[i] == '0':\n                    zero[i] = zero[i + 1] + 1\n                else:\n                    zero[i] = zero[i + 1]\n            n0_m1 = 1\n            ind_m1 = n\n            n0_m2 = 999999999\n            ind_m2 = -1\n            n1 = 2\n            ind_n1 = n - 1\n            dp[n - 1] = n\n            for i in range(n - 2, -1, -1):\n                if s[i] == '0':\n                    dp[i] = ind_n1\n                    if n1 < n0_m2:\n                        if n1 < n0_m1:\n                            n0_m2 = n0_m1 + 1\n                            ind_m2 = ind_m1\n                            n0_m1 = n1 + 1\n                            ind_m1 = i\n                        else:\n                            n0_m1 = n0_m1 + 1\n                            n0_m2 = n1 + 1\n                            ind_m2 = i\n                    else:\n                        n0_m1 += 1\n                        n0_m2 += 1\n                else:\n                    if n1 < n0_m1:\n                        dp[i] = ind_n1\n                        n1 = n1 + 1\n                    else:\n                        dp[i] = ind_m1\n                        n1 = 1 + n0_m1\n                    ind_n1 = i\n        prev = 0\n        i = ind\n        while i <= n:\n            if i == -1:\n                print('1', end='')\n                break\n            elif i == n:\n                count_0 = zero[prev]\n                for j in range(count_0):\n                    print('0', end='')\n                print('0', end='')\n                break\n            elif s[i] == '0':\n                count_0 = zero[prev] - zero[i]\n                for j in range(count_0):\n                    print('0', end='')\n                print('0', end='')\n                prev = i\n                i = dp[prev]\n            else:\n                print('1', end='')\n                prev = i\n                i = dp[prev]\n        print()", "from sys import *\nfrom itertools import *\nfrom math import *\nfrom sys import *\nfrom numpy import *\nfrom sys import stdin, stdout\nint_arr = lambda : list(map(int, stdin.readline().strip().split()))\nstr_arr = lambda : list(map(str, stdin.readline().split()))\nget_str = lambda : map(str, stdin.readline().strip().split())\nget_int = lambda : map(int, stdin.readline().strip().split())\nget_float = lambda : map(float, stdin.readline().strip().split())\nmod = 1000000007\n\ndef ans(s):\n    (next0, next1) = ([0] * len(s), [0] * len(s))\n    (dp, dp1) = ([0] * (len(s) + 1), [0] * (len(s) + 1))\n    n = len(s)\n    l_pos = -1\n    for i in range(0, n):\n        if s[i] == '0':\n            for j in range(l_pos + 1, i + 1):\n                next0[j] = i\n                l_pos = i\n    for i in range(l_pos + 1, n):\n        next0[i] = n\n    if next0[0] == n:\n        print('0')\n        return\n    l_pos = -1\n    for i in range(0, n):\n        if s[i] == '1':\n            for j in range(l_pos + 1, i + 1):\n                next1[j] = i\n                l_pos = i\n    for i in range(l_pos + 1, n):\n        next1[i] = n\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and next1[i] < n:\n            dp[i] = max(dp[i], dp[next1[i] + 1] + 1)\n        if s[i] == '1' and next0[i] < n:\n            dp[i] = max(dp[i], dp[next0[i] + 1] + 1)\n            dp1[i] = dp1[i + 1]\n        if next1[i] < n:\n            dp1[i] = max(dp1[i], dp[next1[i] + 1] + 1)\n    l = dp1[0] + 1\n    curind = next1[0] + 1\n    ans = '1'\n    for i in range(1, l):\n        if curind >= n:\n            ans += '0'\n            continue\n        if next0[curind] >= n:\n            ans += '0'\n            curind = next0[curind] + 1\n            continue\n        if dp[next0[curind] + 1] < l - i - 1:\n            ans += '0'\n            curind = next0[curind] + 1\n        else:\n            ans += '1'\n            curind = next1[curind] + 1\n    print(ans)\n    return\nfor _ in range(int(stdin.readline())):\n    s = str(input())\n    ans(s)", "t = int(input())\n\ndef logic():\n    s = input()\n    n = len(s)\n    MAXN = n\n    dp = [0] * (MAXN + 2)\n    dp1 = [0] * (MAXN + 2)\n    next0 = [0] * MAXN\n    next1 = [0] * MAXN\n    last_pos = -1\n    for i in range(n):\n        if s[i] == '0':\n            for j in range(last_pos + 1, i + 1):\n                next0[j] = i\n                last_pos = i\n    for i in range(last_pos + 1, n):\n        next0[i] = n\n    if next0[0] == n:\n        print('0')\n        return\n    last_pos = -1\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(last_pos + 1, i + 1):\n                next1[j] = i\n                last_pos = i\n    for i in range(last_pos + 1, n):\n        next1[i] = n\n    dp[n] = dp[n + 1] = 0\n    dp1[n] = dp1[n + 1] = 0\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1]\n        if s[i] == '0' and next1[i] < n:\n            dp[i] = max(dp[i], dp[next1[i] + 1] + 1)\n        if s[i] == '1' and next0[i] < n:\n            dp[i] = max(dp[i], dp[next0[i] + 1] + 1)\n        dp1[i] = dp1[i + 1]\n        if next1[i] < n:\n            dp1[i] = max(dp1[i], dp[next1[i] + 1] + 1)\n    ln = dp1[0] + 1\n    curind = next1[0] + 1\n    ans = '1'\n    for i in range(1, ln):\n        if curind >= n:\n            ans += '0'\n            continue\n        if next0[curind] >= n:\n            ans += '0'\n            curind = next0[curind] + 1\n            continue\n        if dp[next0[curind] + 1] < ln - i - 1:\n            ans += '0'\n            curind = next0[curind] + 1\n        else:\n            ans += '1'\n            curind = next1[curind] + 1\n    print(ans)\nfor _ in range(t):\n    logic()", "import sys\nimport math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nimport bisect as bs\nsetrecursionlimit(2 ** 20)\nM = 10 ** 9 + 7\nT = int(stdin.readline())\n\ndef checkSub(s, t):\n    S = len(s)\n    T = len(t)\n    i = 0\n    j = 0\n    while i < S and j < T:\n        if s[i] == t[j]:\n            j += 1\n            i += 1\n        else:\n            i += 1\n        if j == T:\n            return True\n    return False\nfor _ in range(T):\n    s = stdin.readline().strip('\\n')\n    z = s.count('0')\n    o = len(s) - z\n    if o == 0:\n        print(1)\n        continue\n    if z == 0:\n        print(0)\n        continue\n    n = len(s)\n    ix = s.find('1')\n    loc = {}\n    loc['1'] = n\n    loc['0'] = n\n    dp = [0] * (n + 2)\n    dp[n] = 1\n    no = [0] * n\n    nz = [0] * n\n    for i in range(n - 1, -1, -1):\n        loc[s[i]] = i\n        dp[i] = min(1 + dp[loc['1'] + 1], 1 + dp[loc['0'] + 1])\n        no[i] = loc['1']\n        nz[i] = loc['0']\n    i = ix + 1\n    ans = '1'\n    while i < n:\n        if dp[no[i] + 1] < dp[nz[i] + 1]:\n            ans += '1'\n            i = no[i] + 1\n        else:\n            ans += '0'\n            i = nz[i] + 1\n    if i == n:\n        ans += '0'\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    s = [int(d) for d in list(input())[:-1]]\n    n = len(s)\n    yyy = [-1] * (n + 2)\n    xxx = [-1] * (n + 2)\n    nanimono = -1\n    for i in range(n):\n        if not s[i]:\n            for j in range(nanimono + 1, i + 1):\n                yyy[j] = i\n                nanimono = i\n    for i in range(nanimono + 1, n):\n        yyy[i] = n\n    if yyy[0] == n:\n        print(0)\n        continue\n    nanimono = -1\n    for i in range(n):\n        if s[i]:\n            for j in range(nanimono + 1, i + 1):\n                xxx[j] = i\n            nanimono = i\n    xyy = [-1] * (n + 2)\n    xyx = [-1] * (n + 2)\n    xyx[n] = xyx[n + 1] = 0\n    xyy[n] = xyy[n + 1] = 0\n    for i in range(nanimono + 1, n):\n        xxx[i] = n\n    for i in range(n - 1, -1, -1):\n        xyy[i] = xyy[i + 1]\n        if not s[i] and xxx[i] < n:\n            xyy[i] = max(xyy[i], xyy[xxx[i] + 1] + 1)\n        if s[i] and yyy[i] < n:\n            xyy[i] = max(xyy[i], xyy[yyy[i] + 1] + 1)\n        xyx[i] = xyx[i + 1]\n        if xxx[i] < n:\n            xyx[i] = max(xyx[i], xyy[xxx[i] + 1] + 1)\n    ind = xxx[0] + 1\n    ans = '1'\n    warida = xyx[0] + 1\n    for i in range(1, warida):\n        if ind >= n:\n            ans += '0'\n            continue\n        elif yyy[ind] >= n:\n            ans += '0'\n            ind = yyy[ind] + 1\n            continue\n        if xyy[yyy[ind] + 1] < warida - i - 1:\n            ans += '0'\n            ind = yyy[ind] + 1\n        else:\n            ans += '1'\n            ind = xxx[ind] + 1\n    print(ans)", "for _ in range(int(input())):\n    s = input()\n    ccc0 = 0\n    ccc1 = 0\n    c = []\n    g = -1\n    for zz in range(len(s) - 2, -1, -1):\n        if s[zz] == '1':\n            ccc1 += 1\n            if s[zz + 1] == '1':\n                g = '0'\n                c.append([g, ccc1 + 1, ccc0])\n            else:\n                c.append([g, ccc1, ccc0 + 1])\n        else:\n            ccc0 += 1\n            if s[zz + 1] == '0':\n                g = '1'\n                c.append([g, ccc1, ccc0 + 1])\n            else:\n                c.append([g, ccc1 + 1, ccc0])\n    if s[-1] == '0':\n        ccc0 += 1\n    else:\n        ccc1 += 1\n    if ccc0 == 0:\n        print(0)\n    elif ccc1 == 0:\n        print(1)\n    else:\n        while True:\n            if s[0] == '0':\n                s = s[:0] + s[1:]\n            else:\n                break\n        b = '1'\n        pos0 = -1\n        pos1 = -1\n        i = 1\n        j = 1\n        start = 1\n        while i < len(s) and j < len(s):\n            while i < len(s):\n                flag = 0\n                if s[i] == '0':\n                    flag = 1\n                    pos0 = i\n                    break\n                i += 1\n            while j < len(s):\n                ff = 0\n                if s[j] == '1':\n                    ff = 1\n                    pos1 = j\n                    break\n                j += 1\n            if flag == 0:\n                b += '0'\n                break\n            elif ff == 0:\n                b += '1'\n                break\n            elif abs(pos1 - pos0) == 1:\n                if pos0 > pos1:\n                    b += '0'\n                    i = pos0 + 1\n                    j = pos0 + 1\n                elif pos1 == len(s) - 1:\n                    b += '0'\n                    i = pos0 + 1\n                    j = pos0 + 1\n                else:\n                    qq0 = 0\n                    qq1 = 0\n                    if c[len(s) - 2 - pos0][0] == '1':\n                        b += '1'\n                        i = pos1 + 1\n                        j = pos1 + 1\n                    elif c[len(s) - pos0 - 2][0] == '0':\n                        b += '0'\n                        i = pos0 + 1\n                        j = pos0 + 1\n                    elif c[len(s) - pos0 - 2][0] == -1:\n                        if c[len(s) - pos0 - 2][1] <= c[len(s) - pos0 - 2][2]:\n                            b += '0'\n                            i = pos0 + 1\n                            j = pos0 + 1\n                        else:\n                            b += '1'\n                            i = pos1 + 1\n                            j = pos1 + 1\n            elif pos0 > pos1:\n                b += '0'\n                i = pos0 + 1\n                j = pos0 + 1\n            else:\n                b += '1'\n                i = pos1 + 1\n                j = pos1 + 1\n        if i == len(s) and j == len(s):\n            b += '0'\n        print(b)"]