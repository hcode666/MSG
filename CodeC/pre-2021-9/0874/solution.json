["maxim = 0\nn = int(input())\nl = []\nmaxim = 0\nfor i in range(n):\n    l.append(int(input()))\nl.sort()\nfor i in range(n - 1):\n    maxim = max(maxim, l[i] & l[i + 1])\nprint(maxim)", "maxim = 0\nn = int(input())\nl = []\nmaxim = 0\nfor i in range(n):\n    l.append(int(input()))\nl.sort()\nfor i in range(n - 1):\n    maxim = max(maxim, l[i] & l[i + 1])\nprint(maxim)", "n = int(input())\nL = []\nfor i in range(n):\n    a = int(input())\n    L.append(a)\ni = 35\nL.sort()\nwhile i >= 0 and len(L) > 2:\n    M = []\n    for j in range(len(L)):\n        if L[j] & 1 << i:\n            M.append(L[j])\n    if len(M) >= 2:\n        L = M\n    i -= 1\nprint(L[0] & L[1])", "n = int(input())\nL = []\nfor i in range(n):\n    a = int(input())\n    L.append(a)\ni = 35\nL.sort()\nwhile i >= 0 and len(L) > 2:\n    M = []\n    for j in range(len(L)):\n        if L[j] & 1 << i:\n            M.append(L[j])\n    if len(M) >= 2:\n        L = M\n    i -= 1\nprint(L[0] & L[1])", "l = [int(input()) for i in range(int(input()))]\nm = 0\nl = sorted(l)\nfor i in range(len(l) - 1):\n    m = max(m, l[i] & l[i + 1])\nprint(m)", "l = sorted(list((int(input()) for x in range(int(input())))))\nm = 0\nfor i in range(len(l) - 1):\n    m = max(m, l[i] & l[i + 1])\nprint(m)", "l = sorted(list((int(input()) for x in range(int(input())))))\nm = 0\nfor i in range(len(l) - 1):\n    m = max(m, l[i] & l[i + 1])\nprint(m)", "l = sorted(list((int(input()) for x in range(int(input())))))\nm = 0\nfor i in range(len(l) - 1):\n    m = max(m, l[i] & l[i + 1])\nprint(m)", "l = sorted(list((int(input()) for x in range(int(input())))))\nm = 0\nfor i in range(len(l) - 1):\n    m = max(m, l[i] & l[i + 1])\nprint(m)", "l = sorted(list((int(input()) for x in range(int(input())))))\nm = 0\nfor i in range(len(l) - 1):\n    m = max(m, l[i] & l[i + 1])\nprint(m)", "listx = sorted(list((int(input()) for x in range(int(input())))))\nmaxx = 0\nfor i in range(len(listx) - 1):\n    maxx = max(maxx, listx[i] & listx[i + 1])\nprint(maxx)", "from math import log\n\ndef count_same_log_res(l, log_res):\n    count = 0\n    for x in l:\n        if x == 0:\n            continue\n        if int(log(x, 2)) == log_res:\n            count += 1\n    return count\nN = int(input(''))\nl = []\nfor i in range(N):\n    l.append(int(input('')))\nand_res = 0\nwhile len(l) > 0:\n    max_int = max(l)\n    max_log_res = int(log(max_int, 2))\n    if count_same_log_res(l, max_log_res) > 1:\n        and_res += 2 ** max_log_res\n        l = [x - 2 ** max_log_res for x in l if x > 2 ** max_log_res]\n    else:\n        for i in range(len(l)):\n            if l[i] == max_int:\n                l[i] -= 2 ** max_log_res\n    l = [x for x in l if x > 0]\nprint(and_res)", "l = [int(input()) for i in range(int(input()))]\nm = 0\nl = sorted(l)\nfor i in range(len(l) - 1):\n    m = max(m, l[i] & l[i + 1])\nprint(m)", "l = [int(input()) for i in range(int(input()))]\nm = 0\nl = sorted(l)\nfor i in range(len(l) - 1):\n    m = max(m, l[i] & l[i + 1])\nprint(m)", "l = [int(input()) for i in range(int(input()))]\nm = 0\nl = sorted(l)\nfor i in range(len(l) - 1):\n    m = max(m, l[i] & l[i + 1])\nprint(m)", "lst = []\nans = 0\nfor _ in range(int(input())):\n    lst.append(int(input()))\nlst.sort(reverse=True)\nfor i in range(min(len(lst), 5)):\n    for j in range(len(lst)):\n        if i == j:\n            continue\n        ans = max(lst[i] & lst[j], ans)\nprint(ans)", "lst = []\nans = 0\nfor _ in range(int(input())):\n    lst.append(int(input()))\nlst.sort(reverse=True)\nfor i in range(min(len(lst), 5)):\n    for j in range(i + 1, len(lst)):\n        if i == j:\n            continue\n        ans = max(lst[i] & lst[j], ans)\nprint(ans)", "N = int(input())\nl = []\nfor i in range(N):\n    l.append(int(input()))\nl.sort(reverse=True)\nans = 0\nfor i in range(min(len(l), 5)):\n    for j in range(len(l)):\n        if i == j:\n            continue\n        ans = max(l[i] & l[j], ans)\nprint(ans)", "num = []\nfor _ in range(int(input())):\n    num.append(int(input()))\nnum.sort(reverse=True)\nans = 0\nfor i in range(min(len(num), 5)):\n    for j in range(len(num)):\n        if i == j:\n            continue\n        ans = max(num[i] & num[j], ans)\nprint(ans)", "N = int(input())\nnums = []\nfor n in range(N):\n    nums.append(int(input()))\navailID = [n for n in range(N)]\nmask = 1 << 30\nmaxAnd = 0\nfor bit in range(30, -1, -1):\n    onesID = []\n    for i in availID:\n        if nums[i] & mask != 0:\n            onesID.append(i)\n    if len(onesID) >= 2:\n        maxAnd += mask\n        availID = onesID[:]\n    mask >>= 1\nprint(maxAnd)", "from math import *\nfrom collections import *\nfrom functools import *\n\ndef rvi():\n    return [*map(int, input().split())]\n(n,) = rvi()\nt = []\nfor _ in range(n):\n    (x,) = rvi()\n    t += [x]\nt.sort(reverse=1)\nprint(max((a & b for (a, b) in zip(t, t[1:]))))", "for W in range(1):\n    N = int(input())\n    L = []\n    for x in range(N):\n        tmp = int(input())\n        L.append(tmp)\n    for p in range(35, -1, -1):\n        val = 2 ** p\n        newL = []\n        c = 0\n        for x in range(len(L)):\n            if L[x] & val:\n                newL.append(L[x])\n                c += 1\n        if c > 1:\n            L = newL\n    print(L[0] & L[1])", "num = []\nfor _ in range(int(input())):\n    num.append(int(input()))\nnum.sort(reverse=True)\nans = 0\nfor i in range(min(len(num), 5)):\n    for j in range(len(num)):\n        if i == j:\n            continue\n        ans = max(num[i] & num[j], ans)\nprint(ans)", "for W in range(1):\n    N = int(input())\n    L = []\n    for x in range(N):\n        tmp = int(input())\n        L.append(tmp)\n    for p in range(35, -1, -1):\n        val = 2 ** p\n        newL = []\n        c = 0\n        for x in range(len(L)):\n            if L[x] & val:\n                newL.append(L[x])\n                c += 1\n        if c > 1:\n            L = newL\n    print(L[0] & L[1])", "for W in range(1):\n    N = int(input())\n    L = []\n    for x in range(N):\n        tmp = int(input())\n        L.append(tmp)\n    for p in range(35, -1, -1):\n        val = 2 ** p\n        newL = []\n        c = 0\n        for x in range(len(L)):\n            if L[x] & val:\n                newL.append(L[x])\n                c += 1\n        if c > 1:\n            L = newL\n    print(L[0] & L[1])", "N = int(input())\nA = []\nmaxx = 0\nfor i in range(N):\n    A.append(int(input()))\nA.sort(reverse=True)\nfor i in range(len(A)):\n    if maxx > A[i]:\n        break\n    for j in range(len(A)):\n        if j > i:\n            if A[i] & A[j] > maxx:\n                maxx = A[i] & A[j]\n            if maxx > A[j]:\n                continue\nprint(maxx)", "t = int(input())\nl = []\nfor i in range(t):\n    n = int(input())\n    l.append(n)\nm = 0\nl.sort()\nfor i in range(len(l) - 1):\n    m = max(m, l[i] & l[i + 1])\nprint(m)", "import sys, math\nn = int(input())\narr = []\nfor _ in range(n):\n    i = int(input())\n    arr.append(i)\nispresent = [True for i in range(n)]\nans = 0\nfor j in range(32, -1, -1):\n    count = 0\n    for i in range(len(arr)):\n        if ispresent[i] and arr[i] & 1 << j:\n            count += 1\n    if count >= 2:\n        ans = ans | 1 << j\n        for i in range(len(arr)):\n            if ispresent[i]:\n                ispresent[i] = arr[i] & 1 << j > 0\nprint(ans)", "t = eval(input())\nlst = []\nfor i in range(t):\n    n = eval(input())\n    lst.append(n)\nlst.sort()\nm = 0\nfor i in range(len(lst) - 1):\n    m = max(m, lst[i] & lst[i + 1])\nprint(m)", "A = []\nn = int(input())\nfor _ in range(n):\n    A.append(int(input()))\ns = -1\nA.sort()\nfor i in range(len(A) - 1, -1, -1):\n    if A[i] & A[i - 1] > s:\n        s = A[i] & A[i - 1]\nprint(s)", "A = []\nn = int(input())\nfor _ in range(n):\n    A.append(int(input()))\ns = -1\nA.sort()\nfor i in range(len(A) - 1, -1, -1):\n    if A[i] & A[i - 1] > s:\n        s = A[i] & A[i - 1]\nprint(s)", "from sys import stdin, stdout\ninput = stdin.readline\nn = int(input().strip())\narr = [int(input().strip()) for _ in range(n)]\nbinary = [bin(num).split('b')[1].rjust(30, '0') for num in arr]\nans = [0 for _ in range(30)]\nindex = list(range(n))\nfor j in range(30):\n    count = 0\n    temp = []\n    for i in index:\n        bit = binary[i][j]\n        if bit == '1':\n            temp.append(i)\n            count += 1\n    if count > 1:\n        ans[j] = 1\n        index = temp\nans = ans[::-1]\nres = 0\nmul = 1\nfor i in range(30):\n    res += mul * ans[i]\n    mul *= 2\nprint(res)", "num = []\nfor _ in range(int(input())):\n    num.append(int(input()))\nnum.sort(reverse=True)\nans = 0\nfor i in range(min(len(num), 5)):\n    for j in range(len(num)):\n        if i == j:\n            continue\n        ans = max(num[i] & num[j], ans)\nprint(ans)", "n = int(input())\narr = []\nfor i in range(0, n):\n    arr.append(int(input()))\ns = 0\narr.sort(reverse=True)\nfor i in range(0, n - 1):\n    s = max(s, arr[i] & arr[i + 1])\nprint(s)", "A = []\nn = int(input())\nfor _ in range(n):\n    A.append(int(input()))\ns = -1\nA.sort()\nfor i in range(len(A) - 1, -1, -1):\n    if A[i] & A[i - 1] > s:\n        s = A[i] & A[i - 1]\nprint(s)", "A = []\nfor _ in range(int(input())):\n    A.append(int(input()))\ns = -1\nA.sort()\nfor i in range(len(A) - 1, -1, -1):\n    if A[i] & A[i - 1] > s:\n        s = A[i] & A[i - 1]\nprint(s)", "def andope(n, m):\n    for i in range(len(n) - 1):\n        m = max(m, n[i] & n[i + 1])\n    print(m)\nn = [int(input()) for i in range(int(input()))]\nm = 0\nn = sorted(n)\nandope(n, m)", "l = [int(input()) for i in range(int(input()))]\nm = 0\nl = sorted(l)\nfor i in range(len(l) - 1):\n    m = max(m, l[i] & l[i + 1])\nprint(m)", "n = int(input())\nl = [0] * n\nfor _ in range(n):\n    l[_] = int(input())\nx = 0\np = []\nfor i in range(30):\n    for z in l:\n        if z & 2 ** (29 - i):\n            p.append(z)\n    if len(p) > 1:\n        l = p\n        x += 2 ** (29 - i)\n    p = []\nprint(x)", "a = []\nfor i in range(int(input())):\n    n = int(input())\n    a.append(n)\n\ndef fn(a):\n    bit = len(bin(max(a))) - 1\n    ans = 0\n    for i in range(bit, -1, -1):\n        s1 = []\n        s2 = []\n        if len(a) == 2:\n            return a[0] & a[1]\n        for j in a:\n            if j & 1 << i:\n                s1.append(j)\n            else:\n                s2.append(j)\n        if len(s1) >= 2:\n            a = s1\n            ans += 1 << i\n    return ans\nprint(fn(a))", "def pairAndSum(arr, n):\n    ans = []\n    for i in range(1, n):\n        ans.append(arr[i - 1] & arr[i])\n    return ans\nn = int(input())\narr = []\nfor i in range(n):\n    arr.append(int(input()))\narr.sort()\nprint(max(pairAndSum(arr, n)))", "num = []\nfor _ in range(int(input())):\n    num.append(int(input()))\nnum.sort(reverse=True)\nans = 0\nfor i in range(min(len(num), 5)):\n    for j in range(len(num)):\n        if i == j:\n            continue\n        ans = max(num[i] & num[j], ans)\nprint(ans)", "num = []\nfor _ in range(int(input())):\n    num.append(int(input()))\nnum.sort(reverse=True)\nans = 0\nfor i in range(len(num) - 1):\n    ans = max(num[i] & num[i + 1], ans)\nprint(ans)", "import heapq\n\ndef andOperation():\n    n = int(input())\n    h = []\n    for i in range(n):\n        heapq.heappush(h, int(input()))\n    curr = heapq.heappop(h)\n    ans = 0\n    while h:\n        t2 = heapq.heappop(h)\n        ans = max(ans, t2 & curr)\n        curr = t2\n    print(ans)\nandOperation()", "try:\n    N = int(input())\n    a = []\n    for T in range(N):\n        x = int(input())\n        a.append(x)\n    C = 0\n    for i in range(31, -1, -1):\n        temp = []\n        for j in range(len(a)):\n            if a[j] & 1 << i:\n                temp.append(a[j])\n        if len(temp) >= 2:\n            C += 1 << i\n            a = temp\n    print(C)\nexcept:\n    pass", "N = int(input())\na = []\nfor T in range(N):\n    x = int(input())\n    a.append(x)\nC = 0\nfor i in range(31, -1, -1):\n    temp = []\n    for j in range(len(a)):\n        if a[j] & 1 << i:\n            temp.append(a[j])\n    if len(temp) >= 2:\n        C += 1 << i\n        a = temp\nprint(C)", "n = int(input())\na = []\nfor i in range(n):\n    x = int(input())\n    a.append(x)\nc = 0\nfor i in range(31, -1, -1):\n    temp = []\n    for j in range(len(a)):\n        if a[j] & 1 << i:\n            temp.append(a[j])\n    if len(temp) >= 2:\n        c += 1 << i\n        a = temp\nprint(c)", "n = int(input())\na = []\nfor i in range(n):\n    x = int(input())\n    a.append(x)\nc = 0\nfor i in range(31, -1, -1):\n    temp = []\n    for j in range(len(a)):\n        if a[j] & 1 << i:\n            temp.append(a[j])\n    if len(temp) >= 2:\n        c += 1 << i\n        a = temp\nprint(c)", "l = []\nfor _ in range(int(input())):\n    l.append(int(input()))\nl.sort()\nm = 0\nfor i in range(len(l) - 1):\n    m = max(m, l[i] & l[i + 1])\nprint(m)", "l = []\nfor _ in range(int(input())):\n    l.append(int(input()))\nl.sort()\nm = 0\nfor i in range(len(l) - 1):\n    m = max(m, l[i] & l[i + 1])\nprint(m)", "n = int(input())\nlst = []\nfor i in range(n):\n    lst.append(int(input()))\nlst.sort()\nm = 0\nfor i in range(len(lst) - 1):\n    m = max(m, lst[i] & lst[i + 1])\nprint(m)", "ans = 0\na = []\nn = int(input())\nfor _ in range(n):\n    a.append(int(input()))\na.sort()\nfor i in range(n - 1, 1, -1):\n    ans = max(ans, a[i] & a[i - 1])\nprint(ans)", "n = int(input())\ndp = []\nwhile n > 0:\n    dp.append(int(input()))\n    n -= 1\nmask = 1 << 30\nmaxx = 0\nfor bitt in range(30, -1, -1):\n    dpp = []\n    for i in dp:\n        if i & mask != 0:\n            dpp.append(i)\n    if len(dpp) >= 2:\n        dp = dpp[:]\n        maxx += mask\n    mask >>= 1\nprint(maxx)", "n = int(input())\nl = [int(input()) for i in range(n)]\nl.sort()\nmaxx = -1\nfor i in range(n - 1, 1, -1):\n    tmpp = l[i] & l[i - 1]\n    if tmpp > maxx:\n        maxx = tmpp\nprint(maxx)", "N = int(input())\nnums = []\nfor n in range(N):\n    nums.append(int(input()))\navailID = [n for n in range(N)]\nmask = 1 << 30\nmaxAnd = 0\nfor bit in range(30, -1, -1):\n    onesID = []\n    for i in availID:\n        if nums[i] & mask != 0:\n            onesID.append(i)\n    if len(onesID) >= 2:\n        maxAnd += mask\n        availID = onesID[:]\n    mask >>= 1\nprint(maxAnd)", "n = int(input())\na = []\nfor _ in range(n):\n    a.append(int(input()))\nans = 0\na.sort()\nfor i in range(len(a) - 1):\n    ans = max(ans, a[i] & a[i + 1])\nprint(ans)", "try:\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(int(input()))\n    maxx = 0\n    arr.sort()\n    for i in range(len(arr) - 1):\n        maxx = max(maxx, arr[i] & arr[i + 1])\n    print(maxx)\nexcept:\n    pass", "try:\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(int(input()))\n    maxx = 0\n    arr.sort()\n    for i in range(len(arr) - 1):\n        maxx = max(maxx, arr[i] & arr[i + 1])\n    print(maxx)\nexcept:\n    pass", "N = int(input())\nl = []\nfor _ in range(N):\n    l.append(int(input()))\nl.sort()\na = 0\nfor i in range(N - 1):\n    b = l[i] & l[i + 1]\n    if b > a:\n        a = b\nprint(a)", "N = int(input())\nnums = []\nfor n in range(N):\n    nums.append(int(input()))\navailID = [n for n in range(N)]\nmask = 1 << 30\nmaxAnd = 0\nfor bit in range(30, -1, -1):\n    onesID = []\n    for i in availID:\n        if nums[i] & mask != 0:\n            onesID.append(i)\n    if len(onesID) >= 2:\n        maxAnd += mask\n        availID = onesID[:]\n    mask >>= 1\nprint(maxAnd)", "import math\n\ndef returnmbset(arr, val):\n    count = 0\n    for i in arr:\n        if val & i == val:\n            count += 1\n    return count\n\ndef find_maxand(arr):\n    ans = 0\n    for i in range(31, -1, -1):\n        if returnmbset(arr, ans | 1 << i) >= 2:\n            ans |= 1 << i\n    return ans\nn = int(input())\narr = list()\nwhile n:\n    arr.append(int(input()))\n    n -= 1\nprint(find_maxand(arr))", "def checkBit(pattern, arr, n):\n    count = 0\n    for i in range(0, n):\n        if pattern & arr[i] == pattern:\n            count += 1\n    return count\n\ndef maxAND(arr, n):\n    res = 0\n    for bit in range(31, -1, -1):\n        count = checkBit(res | 1 << bit, arr, n)\n        if count >= 2:\n            res |= 1 << bit\n    return res\narr = []\nn = int(input())\nfor i in range(n):\n    kk = int(input())\n    arr.append(kk)\nprint(maxAND(arr, n))", "l = []\nfor _ in range(int(input())):\n    l.append(int(input()))\nl = sorted(l, reverse=True)\nm = 0\nfor i in range(len(l) - 1, 0, -1):\n    m = max(m, l[i] & l[i - 1])\nprint(m)", "li = []\nfor _ in range(int(input())):\n    li.append(int(input()))\nli.sort()\nm = -1\nfor i in range(len(li) - 1, 1, -1):\n    if li[i] & li[i - 1] > m:\n        m = li[i] & li[i - 1]\nprint(m)", "def find_msb(n):\n    pos = 0\n    while n != 1:\n        n = n // 2\n        pos += 1\n    return pos\n\ndef main():\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(int(input()))\n    pos = find_msb(max(a))\n    current_val = 0\n    for i in range(pos, -1, -1):\n        count = 0\n        temp = current_val + 2 ** i\n        for j in a:\n            if temp & j == temp:\n                count += 1\n        if count >= 2:\n            current_val = temp\n    print(current_val)\nmain()", "arr = []\nfor _ in range(int(input())):\n    arr.append(int(input()))\narr.sort()\nMax = -1\nfor i in range(len(arr) - 1):\n    if arr[i] & arr[i + 1] > Max:\n        Max = arr[i] & arr[i + 1]\nprint(Max)", "li = []\nfor _ in range(int(input())):\n    li.append(int(input()))\nli.sort()\nm = -1\nfor i in range(len(li) - 1, 1, -1):\n    if li[i] & li[i - 1] > m:\n        m = li[i] & li[i - 1]\nprint(m)", "li = []\nfor _ in range(int(input())):\n    li.append(int(input()))\nli.sort()\nm = -1\nfor i in range(len(li) - 1, 1, -1):\n    if li[i] & li[i - 1] > m:\n        m = li[i] & li[i - 1]\nprint(m)", "def solve():\n    arr = []\n    n = int(input())\n    for _ in range(n):\n        arr.append(int(input()))\n    ans = 0\n    for j in range(31, -1, -1):\n        temp = []\n        for ele in arr:\n            if ele & 1 << j:\n                temp.append(ele)\n        if len(temp) >= 2:\n            ans += 1 << j\n            arr = temp\n    print(ans)\nsolve()", "from math import ceil, sqrt, log, gcd\nfrom collections import deque, defaultdict as dd\nfrom os import path\nimport sys\nt = int(input())\na = []\nnew = []\nv = 0\nfor f in range(t):\n    a.append(int(input()))\nfor i in a:\n    if i > v:\n        for j in new:\n            if i & j > v:\n                v = i & j\n        new.append(i)\nprint(v)", "from math import ceil, sqrt, log, gcd\nfrom collections import deque, defaultdict as dd\nfrom os import path\nimport sys\nt = int(input())\na = []\nnew = []\nv = 0\nfor f in range(t):\n    a.append(int(input()))\nfor i in a:\n    if i > v:\n        for j in new:\n            if i & j > v:\n                v = i & j\n        new.append(i)\nprint(v)", "import math as m\nn = int(input())\na = []\nfor i in range(n):\n    a.append(int(input()))\nv = max(a)\nl = int(m.log(v, 2))\na.sort(reverse=True)\ncurr = a\nflag = False\nfor i in range(l, -1, -1):\n    new = []\n    temp = []\n    for j in range(len(curr)):\n        t = curr[j] // 2 ** i\n        if t == 1:\n            new.append(a[j])\n            temp.append(curr[j] % 2 ** i)\n    if len(new) < 2:\n        curr = [x % 2 ** i for x in curr]\n        continue\n    elif len(new) == 2:\n        print(new[0] & new[1])\n        flag = True\n        break\n    else:\n        a = new\n        curr = temp\nif not flag:\n    v = a[0] & a[1]\n    for i in range(2, len(a)):\n        v &= a[i]\n    print(v)", "import math as m\nn = int(input())\na = []\nfor i in range(n):\n    a.append(int(input()))\nv = max(a)\nl = int(m.log(v, 2))\na.sort(reverse=True)\ncurr = a\nflag = False\nfor i in range(l, -1, -1):\n    new = []\n    temp = []\n    for j in range(len(curr)):\n        t = curr[j] // 2 ** i\n        if t == 1:\n            new.append(a[j])\n            temp.append(curr[j] % 2 ** i)\n    if len(new) < 2:\n        curr = [x % 2 ** i for x in curr]\n        continue\n    elif len(new) == 2:\n        print(new[0] & new[1])\n        flag = True\n        break\n    else:\n        a = new\n        curr = temp\nif not flag:\n    v = a[0] & a[1]\n    for i in range(2, len(a)):\n        v &= a[i]\n    print(v)", "n = int(input())\na = []\nv = 0\nnew = []\nwhile n:\n    a.append(int(input()))\n    n -= 1\nfor i in a:\n    if i > v:\n        for j in new:\n            if i & j > v:\n                v = i & j\n        new.append(i)\nprint(v)", "from math import ceil, sqrt, log, gcd\nfrom collections import deque, defaultdict as dd\nfrom os import path\nimport sys\nt = int(input())\na = []\nnew = []\nv = 0\nfor f in range(t):\n    a.append(int(input()))\nfor i in a:\n    if i > v:\n        for j in new:\n            if i & j > v:\n                v = i & j\n        new.append(i)\nprint(v)", "from math import ceil, sqrt, log, gcd\nfrom collections import deque, defaultdict as dd\nfrom os import path\nimport sys\nt = int(input())\na = []\nnew = []\nv = 0\nfor f in range(t):\n    a.append(int(input()))\nfor i in a:\n    if i > v:\n        for j in new:\n            if i & j > v:\n                v = i & j\n        new.append(i)\nprint(v)", "from math import ceil, sqrt, log, gcd\nfrom collections import deque, defaultdict as dd\nfrom os import path\nimport sys\nt = int(input())\na = []\nnew = []\nv = 0\nfor f in range(t):\n    a.append(int(input()))\nfor i in a:\n    if i > v:\n        for j in new:\n            if i & j > v:\n                v = i & j\n        new.append(i)\nprint(v)", "s = []\nl = []\nfor i in range(int(input())):\n    l.append(int(input()))\nv = 0\nfor i in l:\n    if i > v:\n        for j in s:\n            if i & j > v:\n                v = i & j\n        s.append(i)\nprint(v)", "s = []\nl = []\nfor _ in range(int(input())):\n    l.append(int(input()))\nv = 0\nfor i in l:\n    if i > v:\n        for j in s:\n            if i & j > v:\n                v = i & j\n        s.append(i)\nprint(v)", "import math\nn = int(input())\nl = []\nz = []\nfor i in range(n):\n    l.append(int(input()))\nl.sort(reverse=True)\nans_2 = 0\nans_1 = 0\nfor i in range(0, n):\n    if l[i] == 0:\n        z.append(0)\n    else:\n        z.append(math.floor(math.log2(l[i])))\nfor i in range(1, n):\n    if z[i - 1] == z[i]:\n        ans_1 = max(ans_1, l[i - 1] & l[i])\n    else:\n        ans_2 = max(ans_2, l[i - 1] & l[i])\nprint(max(ans_2, ans_1))", "import math\nn = int(input())\nl = []\nz = []\nfor i in range(n):\n    l.append(int(input()))\nl.sort(reverse=True)\nans_2 = 0\nans_1 = 0\nfor i in range(n):\n    if l[i] == 0:\n        z.append(0)\n    else:\n        z.append(math.floor(math.log2(l[i])))\nfor i in range(1, n):\n    if z[i - 1] == z[i]:\n        ans_1 = max(ans_1, l[i - 1] & l[i])\n    else:\n        ans_2 = max(ans_2, l[i - 1] & l[i])\nprint(max(ans_2, ans_1))", "import sys\nn = int(input())\ns = []\nfor i in range(n):\n    s.append(int(input()))\nlarge_values = []\nvalue = 0\nfor num in s:\n    if num > value:\n        for m in large_values:\n            if m & num > value:\n                value = m & num\n        large_values.append(num)\nprint(value)", "import sys\nn = int(input())\ns = [int(j) for j in sys.stdin.read().split()]\nlarge_values = []\nvalue = 0\nfor num in s:\n    if num > value:\n        for m in large_values:\n            if m & num > value:\n                value = m & num\n        large_values.append(num)\nprint(value)", "n = int(input())\narr = []\nm = -1\nfor i in range(n):\n    arr.append(int(input()))\narr.sort(reverse=True)\nfor i in range(n - 1):\n    if m > arr[i]:\n        break\n    temp = arr[i] & arr[i + 1]\n    if temp > m:\n        m = temp\nprint(m)", "n = int(input())\nl = []\nfor _ in range(n):\n    l.append(int(input()))\nl.sort(reverse=True)\nans = 0\nfor i in range(n - 1):\n    if ans > l[i]:\n        break\n    m = l[i] & l[i + 1]\n    if m > ans:\n        ans = m\nprint(ans)", "a = int(input())\nk = []\nfor i in range(a):\n    k.append(int(input()))\nk.sort(reverse=True)\nn = 0\nfor h in range(1, a):\n    n = max(k[h] & k[h - 1], n)\nprint(n)", "def check(p, a, n):\n    c = 0\n    for i in range(n):\n        if p & a[i] == p:\n            c += 1\n    return c\n\ndef AND(a, n):\n    r = 0\n    for i in range(31, -1, -1):\n        count = check(r | 1 << i, a, n)\n        if count >= 2:\n            r = r | 1 << i\n    return r\nn = int(input())\na = []\nfor i in range(n):\n    a.append(int(input()))\nprint(AND(a, n))", "n = int(input())\nl = []\nfor i in range(n):\n    l.append(int(input()))\nl.sort()\nx = 0\nfor i in range(1, n):\n    x = max(l[i] & l[i - 1], x)\nprint(x)", "n = int(input())\nl = []\nfor i in range(n):\n    l.append(int(input()))\nl.sort(reverse=True)\nx = 0\nfor i in range(1, n):\n    x = max(l[i] & l[i - 1], x)\nprint(x)", "import sys\nfrom collections import Counter\nimport numpy as np\nimport math\ntest = False\n\ndef next_level(B, digit):\n    C = []\n    for num in B:\n        if num[digit] == '1':\n            C.append(num)\n    if len(C) >= 2:\n        return C\n    else:\n        return B\nN = int(input().strip())\nA = []\nfor i in range(N):\n    temp = int(input().strip())\n    temp = '{0:b}'.format(temp)\n    temp = '0' * (30 - len(temp)) + temp\n    if test:\n        print(temp)\n    A.append(temp)\nanswer = 0\nB = A.copy()\nfor digit in range(30):\n    B = next_level(B, digit)\n    if len(B) == 2:\n        answer = int('0b' + B[0], 2) & int('0b' + B[1], 2)\nif answer == 0:\n    answer = int('0b' + B[0], 2) & int('0b' + B[1], 2)\nprint(answer)\nif test:\n    print(' ')", "n = int(input())\nl = []\nfor i in range(n):\n    l.append(int(input()))\nl.sort(reverse=True)\nx = 0\nfor i in range(1, n):\n    x = max(l[i] & l[i - 1], x)\nprint(x)", "n = int(input())\nl = []\nfor i in range(n):\n    l.append(int(input()))\nl.sort(reverse=True)\nx = 0\nfor i in range(1, n):\n    x = max(l[i] & l[i - 1], x)\nprint(x)", "n = int(input())\nl = []\nfor i in range(n):\n    l.append(int(input()))\nl.sort(reverse=True)\nx = 0\nfor i in range(1, n):\n    x = max(l[i] & l[i - 1], x)\nprint(x)", "n = int(input())\nl = []\nfor i in range(n):\n    l.append(int(input()))\nl.sort(reverse=True)\nx = 0\nfor i in range(1, n):\n    x = max(l[i] & l[i - 1], x)\nprint(x)", "n = int(input())\nl = []\nfor i in range(n):\n    l.append(int(input()))\nl.sort(reverse=True)\nx = 0\nfor i in range(1, n):\n    x = max(l[i] & l[i - 1], x)\nprint(x)", "n = int(input())\nl = []\nfor i in range(n):\n    l.append(int(input()))\nl.sort(reverse=True)\nx = 0\nfor i in range(1, n):\n    x = max(l[i] & l[i - 1], x)\nprint(x)", "n = int(input())\nl = []\nfor i in range(n):\n    l.append(int(input()))\nl.sort(reverse=True)\nx = 0\nfor i in range(1, n):\n    x = max(l[i] & l[i - 1], x)\nprint(x)"]