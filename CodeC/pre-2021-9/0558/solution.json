["def FW():\n    for k in range(49):\n        for i in range(49):\n            for j in range(49):\n                if i <= k and k <= j:\n                    dist[i][j] = max(dist[i][k] + dist[k][j], dist[i][j])\nT = int(input())\nfor _ in range(T):\n    dist = [[0] * 49 for i in range(49)]\n    n = int(input())\n    for i in range(n):\n        (u, v, w) = map(int, input().split())\n        dist[u][v] = max(dist[u][v], w)\n    FW()\n    print(dist[0][48])", "a = int(input())\nfor i in range(a):\n    b = []\n    d = [0] * 50\n    a1 = int(input())\n    for j in range(a1):\n        c = [int(x) for x in input().split()]\n        b.append(c)\n    b.sort()\n    for i in range(len(b)):\n        (x, y, k) = b[i]\n        m = d[x] + k\n        for j in range(y, len(d)):\n            d[j] = max(d[j], m)\n    print(d[-1])", "a = int(input())\nfor i in range(a):\n    b = []\n    d = [0] * 50\n    a1 = int(input())\n    for j in range(a1):\n        c = [int(x) for x in input().split()]\n        b.append(c)\n    b.sort()\n    for i in range(len(b)):\n        (x, y, k) = b[i]\n        m = d[x] + k\n        for j in range(y, len(d)):\n            d[j] = max(d[j], m)\n    print(d[-1])", "a = int(input())\nfor i in range(a):\n    b = []\n    d = [0] * 50\n    a1 = int(input())\n    for j in range(a1):\n        c = [int(x) for x in input().split()]\n        b.append(c)\n    b.sort()\n    for i in range(len(b)):\n        (x, y, k) = b[i]\n        m = d[x] + k\n        for j in range(y, len(d)):\n            d[j] = max(d[j], m)\n    print(d[-1])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    eventos = []\n    for i in range(n):\n        (s, e, c) = map(int, input().split())\n        eventos.append((s, e, c))\n    eventos.sort(key=lambda x: x[1])\n    max_compesacion = [0] * 48\n    for evento in eventos:\n        (tiempo_inicio, tiempo_final, compensacion) = evento\n        max_compesacion_tiempoinicial = 0\n        for i in range(tiempo_inicio):\n            max_compesacion_tiempoinicial = max(max_compesacion[:tiempo_inicio])\n        max_compesacion[tiempo_final - 1] = max(max_compesacion[tiempo_final - 1], max_compesacion_tiempoinicial + compensacion)\n    print(max(max_compesacion))", "for _ in range(int(input())):\n    N = int(input())\n    dp = [0] * 50\n    entries = []\n    for i in range(N):\n        (S, E, C) = list(map(int, input().split()))\n        entries.append((S, E, C))\n    entries.sort()\n    for i in range(len(entries)):\n        (S, E, C) = entries[i]\n        m = dp[S] + C\n        for j in range(E, len(dp)):\n            dp[j] = max(dp[j], m)\n    print(dp[-1])", "for _ in range(int(input())):\n    n1 = int(input())\n    a = [[0 for i in range(49)] for j in range(49)]\n    maxi = [0] * 49\n    for l in range(1, n1 + 1):\n        (s, e, m) = map(int, input().split())\n        a[s][e] = max(a[s][e], m)\n    for end in range(49):\n        for start in range(end):\n            maxi[end] = max(maxi[end], a[start][end] + maxi[start])\n    print(maxi[48])", "for _ in range(int(input())):\n    n1 = int(input())\n    a = [[0 for i in range(49)] for j in range(49)]\n    maxi = [0] * 49\n    for l in range(1, n1 + 1):\n        (s, e, m) = map(int, input().split())\n        a[s][e] = max(a[s][e], m)\n    for end in range(49):\n        for start in range(end):\n            maxi[end] = max(maxi[end], a[start][end] + maxi[start])\n    print(maxi[48])", "for _ in range(int(input())):\n    N = int(input())\n    V = [[0 for i in range(49)] for j in range(49)]\n    max_list = [0] * 49\n    for k in range(1, N + 1):\n        (s, e, c) = map(int, input().split())\n        V[s][e] = max(V[s][e], c)\n    for end in range(49):\n        for start in range(end):\n            max_list[end] = max(max_list[end], V[start][end] + max_list[start])\n    print(max_list[48])", "for _ in range(int(input())):\n    N = int(input())\n    V = [[0 for i in range(49)] for j in range(49)]\n    max_list = [0] * 49\n    for k in range(1, N + 1):\n        (s, e, c) = map(int, input().split())\n        V[s][e] = max(V[s][e], c)\n    for end in range(49):\n        for start in range(end):\n            max_list[end] = max(max_list[end], V[start][end] + max_list[start])\n    print(max_list[48])", "def soln(n, arr):\n    dp = [[0] * 49 for _ in range(49)]\n    for (beg, end, pay) in arr:\n        dp[beg][end] = max(dp[beg][end], pay)\n    res = [0] * 49\n    for end in range(49):\n        for beg in range(end):\n            res[end] = max(res[end], res[beg] + dp[beg][end])\n    return res[-1]\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [list(map(int, input().split())) for i in range(n)]\n    print(soln(n, arr))", "def f(x):\n    return x[1]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [0] * 50\n    p = []\n    for q in range(n):\n        (a, b, c) = map(int, input().split(' '))\n        p.append([a, b, c])\n    p.sort(key=lambda x: x[1])\n    for i in range(n):\n        (a, b, c) = (p[i][0], p[i][1], p[i][2])\n        if l[a] + c > l[b]:\n            temp = l[b]\n            l[b] = l[a] + c\n            for k in range(b + 1, 49):\n                l[k] = l[k] + l[b] - temp\n    print(l[48])", "def f(x):\n    return x[1]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [0] * 50\n    p = []\n    for q in range(n):\n        (a, b, c) = map(int, input().split(' '))\n        p.append([a, b, c])\n    p.sort(key=lambda x: x[1])\n    for i in range(n):\n        (a, b, c) = (p[i][0], p[i][1], p[i][2])\n        if l[a] + c > l[b]:\n            temp = l[b]\n            l[b] = l[a] + c\n            for k in range(b + 1, 49):\n                l[k] = l[k] + l[b] - temp\n    print(l[48])", "def f(x):\n    return x[1]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [0] * 50\n    p = []\n    for q in range(n):\n        (a, b, c) = map(int, input().split(' '))\n        p.append([a, b, c])\n    p.sort(key=f)\n    for i in range(n):\n        (a, b, c) = (p[i][0], p[i][1], p[i][2])\n        if l[a] + c > l[b]:\n            temp = l[b]\n            l[b] = l[a] + c\n            for k in range(b + 1, 49):\n                l[k] = l[k] + l[b] - temp\n    print(l[48])", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    events = []\n    for y in range(n):\n        l = [int(a) for a in input().split()]\n        events.append(l)\n    events.sort()\n    h = [[0 for i in range(49)] for j in range(n)]\n    for i in range(n):\n        for j in range(49):\n            if i == 0:\n                if events[i][1] <= j:\n                    h[i][j] = events[i][2]\n            elif events[i][1] <= j:\n                h[i][j] = max(events[i][2] + h[i - 1][events[i][0]], h[i - 1][j])\n            else:\n                h[i][j] = h[i - 1][j]\n    print(h[n - 1][48])", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    events = []\n    for y in range(n):\n        l = [int(a) for a in input().split()]\n        events.append(l)\n    events.sort()\n    h = [[0 for i in range(49)] for j in range(n)]\n    for i in range(n):\n        for j in range(49):\n            if i == 0:\n                if events[i][1] <= j:\n                    h[i][j] = events[i][2]\n            elif events[i][1] <= j:\n                h[i][j] = max(events[i][2] + h[i - 1][events[i][0]], h[i - 1][j])\n            else:\n                h[i][j] = h[i - 1][j]\n    print(h[n - 1][48])", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    events = []\n    for y in range(n):\n        l = [int(a) for a in input().split()]\n        events.append(l)\n    events.sort()\n    h = [[0 for i in range(49)] for j in range(n)]\n    for i in range(n):\n        for j in range(49):\n            if i == 0:\n                if events[i][1] <= j:\n                    h[i][j] = events[i][2]\n            elif events[i][1] <= j:\n                h[i][j] = max(events[i][2] + h[i - 1][events[i][0]], h[i - 1][j])\n            else:\n                h[i][j] = h[i - 1][j]\n    print(h[n - 1][48])", "T = int(input())\nfor T in range(T):\n    n = int(input())\n    G = [[] for i in range(50)]\n    f = [0] * 50\n    for i in range(n):\n        (L, R, w) = map(int, input().split(' '))\n        G[R] += [[L, w]]\n    for i in range(49):\n        f[i] = max([f[j] + w for (j, w) in G[i]] + [0])\n        if i:\n            f[i] = max(f[i], f[i - 1])\n    print(f[48])", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    events = []\n    for y in range(n):\n        l = [int(a) for a in input().split()]\n        events.append(l)\n    events.sort()\n    h = [[0 for i in range(49)] for j in range(n)]\n    for i in range(n):\n        for j in range(49):\n            if i == 0:\n                if events[i][1] <= j:\n                    h[i][j] = events[i][2]\n            elif events[i][1] <= j:\n                h[i][j] = max(events[i][2] + h[i - 1][events[i][0]], h[i - 1][j])\n            else:\n                h[i][j] = h[i - 1][j]\n    print(h[n - 1][48])", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    C = [[0 for _ in range(49)] for _ in range(49)]\n    for i in range(N):\n        (s, e, c) = map(int, input().split())\n        C[s][e] = max(C[s][e], c)\n    maxC = [0 for _ in range(49)]\n    for E in range(49):\n        for S in range(E):\n            maxC[E] = max(maxC[E], maxC[S] + C[S][E])\n    print(maxC[48])", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    C = [[0 for _ in range(49)] for _ in range(49)]\n    for i in range(N):\n        (s, e, c) = map(int, input().split())\n        C[s][e] = max(C[s][e], c)\n    maxC = [0 for _ in range(49)]\n    for E in range(49):\n        for S in range(E):\n            maxC[E] = max(maxC[E], maxC[S] + C[S][E])\n    print(maxC[48])", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    C = [[0 for _ in range(49)] for _ in range(49)]\n    for i in range(N):\n        (s, e, c) = map(int, input().split())\n        C[s][e] = max(C[s][e], c)\n    maxC = [0 for _ in range(49)]\n    for E in range(49):\n        for S in range(E):\n            maxC[E] = max(maxC[E], maxC[S] + C[S][E])\n    print(maxC[48])", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    C = [[0 for _ in range(49)] for _ in range(49)]\n    for i in range(N):\n        (s, e, c) = map(int, input().split())\n        C[s][e] = max(C[s][e], c)\n    maxC = [0 for _ in range(49)]\n    for E in range(49):\n        for S in range(E):\n            maxC[E] = max(maxC[E], maxC[S] + C[S][E])\n    print(maxC[48])", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    C = [[0 for _ in range(49)] for _ in range(49)]\n    for i in range(N):\n        (s, e, c) = map(int, input().split())\n        C[s][e] = max(C[s][e], c)\n    maxC = [0 for _ in range(49)]\n    for E in range(49):\n        for S in range(E):\n            maxC[E] = max(maxC[E], maxC[S] + C[S][E])\n    print(maxC[48])", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    C = [[0 for _ in range(49)] for _ in range(49)]\n    for i in range(N):\n        (s, e, c) = map(int, input().split())\n        C[s][e] = max(C[s][e], c)\n    maxC = [0 for _ in range(49)]\n    for E in range(49):\n        for S in range(E):\n            maxC[E] = max(maxC[E], maxC[S] + C[S][E])\n    print(maxC[48])", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    C = [[0 for _ in range(49)] for _ in range(49)]\n    for i in range(N):\n        (s, e, c) = map(int, input().split())\n        C[s][e] = max(C[s][e], c)\n    maxC = [0 for _ in range(49)]\n    for E in range(49):\n        for S in range(E):\n            maxC[E] = max(maxC[E], maxC[S] + C[S][E])\n    print(maxC[48])", "import numpy as np\nTH = 49\n\ndef get_best(comp_array):\n    best_comp_till_i = np.zeros(TH)\n    for fh in range(TH):\n        comp_end_fh = comp_array[fh]\n        max_comp = max(comp_end_fh + best_comp_till_i)\n        best_comp_till_i[fh] = max_comp\n    return int(best_comp_till_i[-1])\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    comp_array = np.zeros((TH, TH))\n    for _ in range(n):\n        (sh, fh, comp) = map(int, input().split())\n        comp_array[fh, sh] = max(comp_array[fh, sh], comp)\n    print(get_best(comp_array))", "import numpy as np\nTH = 49\n\ndef get_best(comp_array):\n    best_comp_till_i = np.zeros(TH)\n    for fh in range(TH):\n        comp_end_fh = comp_array[fh]\n        max_comp = max(comp_end_fh + best_comp_till_i)\n        best_comp_till_i[fh] = max_comp\n    return int(best_comp_till_i[-1])\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    comp_array = np.zeros((TH, TH))\n    for _ in range(n):\n        (sh, fh, comp) = map(int, input().split())\n        comp_array[fh, sh] = max(comp_array[fh, sh], comp)\n    print(get_best(comp_array))", "import numpy as np\nTH = 49\n\ndef get_best(comp_array):\n    best_comp_till_i = np.zeros(TH)\n    for fh in range(TH):\n        comp_end_fh = comp_array[fh]\n        max_comp = max(comp_end_fh + best_comp_till_i)\n        best_comp_till_i[fh] = max_comp\n    return int(best_comp_till_i[-1])\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    comp_array = np.zeros((TH, TH))\n    for _ in range(n):\n        (sh, fh, comp) = map(int, input().split())\n        comp_array[fh, sh] = max(comp_array[fh, sh], comp)\n    print(get_best(comp_array))", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    C = [[0 for _ in range(49)] for _ in range(49)]\n    for i in range(N):\n        (s, e, c) = map(int, input().split())\n        C[s][e] = max(C[s][e], c)\n    maxC = [0 for _ in range(49)]\n    for E in range(49):\n        for S in range(E):\n            maxC[E] = max(maxC[E], maxC[S] + C[S][E])\n    print(maxC[48])", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    C = [[0 for _ in range(49)] for _ in range(49)]\n    for i in range(N):\n        (s, e, c) = map(int, input().split())\n        C[s][e] = max(C[s][e], c)\n    maxC = [0 for _ in range(49)]\n    for E in range(49):\n        for S in range(E):\n            maxC[E] = max(maxC[E], maxC[S] + C[S][E])\n    print(maxC[48])", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    C = [[0 for _ in range(49)] for _ in range(49)]\n    for i in range(N):\n        (s, e, c) = map(int, input().split())\n        C[s][e] = max(C[s][e], c)\n    maxC = [0 for _ in range(49)]\n    for E in range(49):\n        for S in range(E):\n            maxC[E] = max(maxC[E], maxC[S] + C[S][E])\n    print(maxC[48])", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    C = [[0 for _ in range(49)] for _ in range(49)]\n    for i in range(N):\n        (s, e, c) = map(int, input().split())\n        C[s][e] = max(C[s][e], c)\n    maxC = [0 for _ in range(49)]\n    for E in range(49):\n        for S in range(E):\n            maxC[E] = max(maxC[E], maxC[S] + C[S][E])\n    print(maxC[48])", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    C = [[0 for _ in range(49)] for _ in range(49)]\n    for i in range(N):\n        (s, e, c) = map(int, input().split())\n        C[s][e] = max(C[s][e], c)\n    maxC = [0 for _ in range(49)]\n    for E in range(49):\n        for S in range(E):\n            maxC[E] = max(maxC[E], maxC[S] + C[S][E])\n    print(maxC[48])", "for _ in range(int(input())):\n    N = int(input())\n    V = [[0 for i in range(49)] for j in range(49)]\n    max_list = [0] * 49\n    for k in range(1, N + 1):\n        (s, e, c) = map(int, input().split())\n        V[s][e] = max(V[s][e], c)\n    for end in range(49):\n        for start in range(end):\n            max_list[end] = max(max_list[end], V[start][end] + max_list[start])\n    print(max_list[48])", "def solve():\n    max_lst = [0] * 49\n    for e in range(49):\n        for s in range(e):\n            max_lst[e] = max(max_lst[e], lst[s][e] + max_lst[s])\n    print(max_lst[48])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = [[0 for j in range(49)] for i in range(49)]\n    for i in range(n):\n        (s, e, c) = list(map(int, input().split()))\n        lst[s][e] = max(lst[s][e], c)\n    solve()", "def solve():\n    max_lst = [0] * 49\n    for e in range(49):\n        for s in range(e):\n            max_lst[e] = max(max_lst[e], lst[s][e] + max_lst[s])\n    print(max_lst[48])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = [[0 for j in range(49)] for i in range(49)]\n    for i in range(n):\n        (s, e, c) = list(map(int, input().split()))\n        lst[s][e] = max(lst[s][e], c)\n    solve()", "def solve():\n    max_lst = [0] * 49\n    for e in range(49):\n        for s in range(e):\n            max_lst[e] = max(max_lst[e], lst[s][e] + max_lst[s])\n    print(max_lst[48])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = [[0 for j in range(49)] for i in range(49)]\n    for i in range(n):\n        (s, e, c) = list(map(int, input().split()))\n        lst[s][e] = max(lst[s][e], c)\n    solve()", "def solve():\n    max_lst = [0] * 49\n    for e in range(49):\n        for s in range(e):\n            max_lst[e] = max(max_lst[e], lst[s][e] + max_lst[s])\n    print(max_lst[48])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = [[0 for j in range(49)] for i in range(49)]\n    for i in range(n):\n        (s, e, c) = list(map(int, input().split()))\n        lst[s][e] = max(lst[s][e], c)\n    solve()", "def solve():\n    max_lst = [0] * 49\n    for e in range(49):\n        for s in range(e):\n            max_lst[e] = max(max_lst[e], lst[s][e] + max_lst[s])\n    print(max_lst[48])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = [[0 for j in range(49)] for i in range(49)]\n    for i in range(n):\n        (s, e, c) = list(map(int, input().split()))\n        lst[s][e] = max(lst[s][e], c)\n    solve()", "def solve():\n    max_lst = [0] * 49\n    for e in range(49):\n        for s in range(e):\n            max_lst[e] = max(max_lst[e], lst[s][e] + max_lst[s])\n    print(max_lst[48])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = [[0 for j in range(49)] for i in range(49)]\n    for i in range(n):\n        (s, e, c) = list(map(int, input().split()))\n        lst[s][e] = max(lst[s][e], c)\n    solve()", "def solve():\n    max_lst = [0] * 49\n    for e in range(49):\n        for s in range(e):\n            max_lst[e] = max(max_lst[e], lst[s][e] + max_lst[s])\n    print(max_lst[48])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = [[0 for j in range(49)] for i in range(49)]\n    for i in range(n):\n        (s, e, c) = list(map(int, input().split()))\n        lst[s][e] = max(lst[s][e], c)\n    solve()", "def solve():\n    max_lst = [0] * 49\n    for e in range(49):\n        for s in range(e):\n            max_lst[e] = max(max_lst[e], lst[s][e] + max_lst[s])\n    print(max_lst[48])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = [[0 for j in range(49)] for i in range(49)]\n    for i in range(n):\n        (s, e, c) = list(map(int, input().split()))\n        lst[s][e] = max(lst[s][e], c)\n    solve()", "def solve():\n    max_lst = [0] * 49\n    for e in range(49):\n        for s in range(e):\n            max_lst[e] = max(max_lst[e], lst[s][e] + max_lst[s])\n    print(max_lst[48])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = [[0 for j in range(49)] for i in range(49)]\n    for i in range(n):\n        (s, e, c) = list(map(int, input().split()))\n        lst[s][e] = max(lst[s][e], c)\n    solve()", "def solve():\n    max_lst = [0] * 49\n    for e in range(49):\n        for s in range(e):\n            max_lst[e] = max(max_lst[e], lst[s][e] + max_lst[s])\n    print(max_lst[48])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = [[0 for j in range(49)] for i in range(49)]\n    for i in range(n):\n        (s, e, c) = list(map(int, input().split()))\n        lst[s][e] = max(lst[s][e], c)\n    solve()", "def solve():\n    max_lst = [0] * 49\n    for e in range(49):\n        for s in range(e):\n            max_lst[e] = max(max_lst[e], lst[s][e] + max_lst[s])\n    print(max_lst[48])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = [[0 for j in range(49)] for i in range(49)]\n    for i in range(n):\n        (s, e, c) = list(map(int, input().split()))\n        lst[s][e] = max(lst[s][e], c)\n    solve()", "def solve():\n    max_lst = [0] * 49\n    for e in range(49):\n        for s in range(e):\n            max_lst[e] = max(max_lst[e], lst[s][e] + max_lst[s])\n    print(max_lst[48])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = [[0 for j in range(49)] for i in range(49)]\n    for i in range(n):\n        (s, e, c) = list(map(int, input().split()))\n        lst[s][e] = max(lst[s][e], c)\n    solve()", "def solve():\n    max_lst = [0] * 49\n    for e in range(49):\n        for s in range(e):\n            max_lst[e] = max(max_lst[e], lst[s][e] + max_lst[s])\n    print(max_lst[48])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = [[0 for j in range(49)] for i in range(49)]\n    for i in range(n):\n        (s, e, c) = list(map(int, input().split()))\n        lst[s][e] = max(lst[s][e], c)\n    solve()", "def solve():\n    max_lst = [0] * 49\n    for e in range(49):\n        for s in range(e):\n            max_lst[e] = max(max_lst[e], lst[s][e] + max_lst[s])\n    print(max_lst[48])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = [[0 for j in range(49)] for i in range(49)]\n    for i in range(n):\n        (s, e, c) = list(map(int, input().split()))\n        lst[s][e] = max(lst[s][e], c)\n    solve()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nimport numpy as np\nimport bisect\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef main():\n    for _ in tr():\n        n = nl()\n        max_list = [0 for _ in range(49)]\n        a = [[0 for _ in range(49)] for _ in range(48)]\n        for i in range(n):\n            (s, e, w) = sm()\n            if w > a[s][e]:\n                a[s][e] = w\n        for end in range(1, 49):\n            for start in range(end):\n                if max_list[start] + a[start][end] > max_list[end]:\n                    max_list[end] = max_list[start] + a[start][end]\n        print(max(max_list))\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nimport numpy as np\nimport bisect\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef main():\n    for _ in tr():\n        n = nl()\n        max_list = [0 for _ in range(49)]\n        a = [[0 for _ in range(49)] for _ in range(48)]\n        for i in range(n):\n            (s, e, w) = sm()\n            if w > a[s][e]:\n                a[s][e] = w\n        for end in range(49):\n            for start in range(end):\n                if max_list[start] + a[start][end] > max_list[end]:\n                    max_list[end] = max_list[start] + a[start][end]\n        print(max(max_list))\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nimport numpy as np\nimport bisect\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef main():\n    for _ in tr():\n        n = nl()\n        max_list = [0 for _ in range(49)]\n        a = [[0 for _ in range(49)] for _ in range(48)]\n        for i in range(n):\n            (s, e, w) = sm()\n            a[s][e] = max(a[s][e], w)\n        for end in range(1, 49):\n            for start in range(end):\n                max_list[end] = max(max_list[start] + a[start][end], max_list[end])\n        print(max(max_list))\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nimport numpy as np\nimport bisect\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef largest_overlapping_indexes(intervals, n):\n    p = []\n    start_times = [intervals[i][0][0] for i in range(n)]\n    finish_times = [intervals[i][0][1] for i in range(n)]\n    for i in start_times:\n        index = bisect.bisect(finish_times, i)\n        p.append(index - 1)\n    return p\n\ndef compute_opt(index, p, OPT, intervals):\n    if index == -1:\n        return 0\n    elif 0 <= index < len(OPT):\n        return OPT[index]\n    else:\n        return max(intervals[index][1] + compute_opt(p[index], p, OPT, intervals), compute_opt(index - 1, p, OPT, intervals))\n\ndef main():\n    for _ in tr():\n        n = nl()\n        intervals = []\n        OPT = []\n        p = []\n        for i in range(n):\n            (s, e, w) = sm()\n            intervals.append([(s, e), w])\n        intervals.sort(key=lambda x: x[0][1])\n        p = largest_overlapping_indexes(intervals, n)\n        max_weight = 0\n        for i in range(n):\n            max_weight = compute_opt(i, p, OPT, intervals)\n            OPT.append(max_weight)\n        print(max(OPT))\nmain()", "MAX = 48\n\ndef FloydWarshall():\n    for k in range(MAX + 1):\n        for i in range(MAX + 1):\n            for j in range(MAX + 1):\n                if i <= k <= j:\n                    dist[i][j] = max(dist[i][j], dist[i][k] + dist[k][j])\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    dist = [[0] * (MAX + 1) for i in range(MAX + 1)]\n    for i in range(N):\n        (S, E, C) = map(int, input().split())\n        if C > dist[S][E]:\n            dist[S][E] = C\n    FloydWarshall()\n    print(dist[0][MAX])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    r = [0] * 49\n    l = []\n    for j in range(n):\n        (s1, s2, s3) = map(int, input().split())\n        l.append([s1, s2, s3])\n    l.sort()\n    for k in l:\n        sa = k[0]\n        sb = k[1]\n        sc = k[2]\n        a = r[sa] + sc\n        if a > r[sb]:\n            for x in range(sb, 49):\n                if a > r[x]:\n                    r[x] = a\n    print(r[48])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    r = [0] * 49\n    l = []\n    for j in range(n):\n        (s1, s2, s3) = map(int, input().split())\n        l.append([s1, s2, s3])\n    l.sort()\n    for k in l:\n        sa = k[0]\n        sb = k[1]\n        sc = k[2]\n        a = r[sa] + sc\n        if a > r[sb]:\n            for x in range(sb, 49):\n                if a > r[x]:\n                    r[x] = a\n    print(r[48])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    r = [0] * 49\n    l = []\n    for j in range(n):\n        (s1, s2, s3) = map(int, input().split())\n        l.append([s1, s2, s3])\n    l.sort()\n    for k in l:\n        sa = k[0]\n        sb = k[1]\n        sc = k[2]\n        a = r[sa] + sc\n        if a > r[sb]:\n            for x in range(sb, 49):\n                if a > r[x]:\n                    r[x] = a\n    print(r[48])", "for j in range(int(input())):\n    (l, out) = ([], 0)\n    for i in range(int(input())):\n        (s, e, cost) = map(int, input().split())\n        out = max(out, e)\n        l.append([s, e, cost])\n    l.sort()\n    p = [0] * (out + 1)\n    for i in range(len(l)):\n        cost = p[l[i][0]] + l[i][2]\n        if cost > p[l[i][1]]:\n            for i in range(l[i][1], len(p)):\n                if p[i] < cost:\n                    p[i] = cost\n    print(p[len(p) - 1])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    r = [0] * 49\n    l = []\n    for j in range(n):\n        (s1, s2, s3) = map(int, input().split())\n        l.append([s1, s2, s3])\n    l.sort()\n    for k in l:\n        sa = k[0]\n        sb = k[1]\n        sc = k[2]\n        a = r[sa] + sc\n        if a > r[sb]:\n            for x in range(sb, 49):\n                if a > r[x]:\n                    r[x] = a\n    print(r[48])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    r = [0] * 49\n    l = []\n    for j in range(n):\n        (s1, s2, s3) = map(int, input().split())\n        l.append([s1, s2, s3])\n    l.sort()\n    for k in l:\n        sa = k[0]\n        sb = k[1]\n        sc = k[2]\n        a = r[sa] + sc\n        if a > r[sb]:\n            for x in range(sb, 49):\n                if a > r[x]:\n                    r[x] = a\n    print(r[48])", "MAX = 49\nINF = int(2 ** 64)\n\ndef solver():\n    T = int(input())\n    for _ in range(T):\n        solve_one()\n\ndef solve_one():\n    m = int(input())\n    dist = [[0 for i in range(MAX)] for j in range(MAX)]\n    for i in range(m):\n        (start, end, pay) = map(int, input().split())\n        dist[start][end] = max(pay, dist[start][end])\n    for k in range(MAX):\n        for i in range(MAX):\n            for j in range(MAX):\n                if i <= k <= j:\n                    dist[i][j] = max(dist[i][j], dist[i][k] + dist[k][j])\n    ans = 0\n    for i in range(len(dist)):\n        arr = dist[i]\n        for e in arr:\n            ans = max(ans, e)\n    print(ans)\nsolver()", "for _ in range(int(input())):\n    N = int(input())\n    R = [0 for x in range(49)]\n    A = []\n    for k in range(N):\n        st = input().split()\n        S = int(st[0])\n        E = int(st[1])\n        C = int(st[2])\n        A.append([S, E, C])\n    A.sort()\n    for x in A:\n        S = x[0]\n        E = x[1]\n        C = x[2]\n        nc = R[S] + C\n        if nc > R[E]:\n            for k in range(E, 49):\n                if nc > R[k]:\n                    R[k] = nc\n    print(R[48])", "INF = float('inf')\n\ndef FloydWarshall(graph, M):\n    dist = [[0] * M for _ in range(M)]\n    for i in range(M):\n        for j in range(M):\n            dist[i][j] = graph[i][j]\n    for _ in range(5):\n        for k in range(M):\n            for i in range(M):\n                for j in range(M):\n                    if i <= k <= j and dist[i][j] < dist[i][k] + dist[k][j]:\n                        dist[i][j] = dist[i][k] + dist[k][j]\n    max_compensation = 0\n    for i in range(M):\n        for j in range(M):\n            if max_compensation < dist[i][j]:\n                max_compensation = dist[i][j]\n    return max_compensation\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    max_M = 49\n    graph = [[0] * max_M for _ in range(max_M)]\n    for _ in range(N):\n        (S, E, C) = map(int, input().split())\n        if C > graph[S][E]:\n            graph[S][E] = C\n    result = FloydWarshall(graph, max_M)\n    print(result)", "for _ in range(int(input())):\n    n = int(input())\n    a = [[0 for i in range(49)] for j in range(48)]\n    max_list = [0 for i in range(49)]\n    for i in range(n):\n        (s, e, c) = map(int, input().split())\n        a[s][e] = max(c, a[s][e])\n    for end in range(1, 49):\n        for start in range(end):\n            max_list[end] = max(max_list[end], max_list[start] + a[start][end])\n    print(max(max_list))", "for _ in range(int(input())):\n    N = int(input())\n    events = []\n    for i in range(N):\n        (s, e, c) = map(int, input().split())\n        events.append([s, e, c])\n    events.sort()\n    plan = [0] * 49\n    for i in events:\n        check_before = i[0]\n        for j in range(check_before, -1, -1):\n            plan[i[1]] = max(plan[i[1]], plan[j] + i[2])\n    print(max(plan))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = [0] * 49\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    l.sort()\n    for i in l:\n        c = i[0]\n        for j in range(c, -1, -1):\n            x[i[1]] = max(x[i[1]], x[j] + i[2])\n    print(max(x))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    dp = [[0 for i in range(49)] for j in range(49)]\n    for i in range(n):\n        (s, e, c) = map(int, input().split())\n        dp[s][e] = max(dp[s][e], c)\n    c = [0] * 49\n    for i in range(49):\n        c[i] = 0\n        for j in range(i):\n            c[i] = max(c[i], c[j] + dp[j][i])\n    c.sort()\n    print(c[-1])", "import sys\n\ndef FILE_IO():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef floyWarshall():\n    for k in range(50):\n        for i in range(50):\n            for j in range(50):\n                if i <= k <= j and dist[i][j] < dist[i][k] + dist[k][j]:\n                    dist[i][j] = dist[i][k] + dist[k][j]\nn = 0\ndist = []\ntc = int(input())\nwhile tc > 0:\n    tc -= 1\n    n = int(input())\n    dist = [[0 for j in range(50)] for i in range(50)]\n    for i in range(n):\n        (s, e, c) = map(int, input().split())\n        if c > dist[s][e]:\n            dist[s][e] = c\n    floyWarshall()\n    print(dist[0][48])", "INF = 1000000000.0\n\ndef FloydWarshall(graph):\n    for k in range(49):\n        for i in range(49):\n            for j in range(49):\n                if i <= k <= j and graph[i][j] < graph[i][k] + graph[k][j]:\n                    graph[i][j] = graph[i][k] + graph[k][j]\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    graph = [[0 for i in range(49)] for j in range(49)]\n    for i in range(n):\n        (s, e, c) = map(int, input().split())\n        if c > graph[s][e]:\n            graph[s][e] = c\n    FloydWarshall(graph)\n    print(graph[0][48])", "import math\n\ndef floyd_marshall(graph, dist, n):\n    for i in range(n):\n        for j in range(n):\n            if i <= j:\n                dist[i][j] = graph[i][j]\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if i <= k <= j:\n                    dist[i][j] = max(dist[i][j], dist[i][k] + dist[k][j])\n    return (graph, dist)\n\ndef maxcomp(graph, dist, n):\n    (graph, dist) = floyd_marshall(graph, dist, n)\n    print(dist[0][48])\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    graph = [[0 for _ in range(49)] for _ in range(49)]\n    dist = [[0 for _ in range(49)] for _ in range(49)]\n    for _ in range(n):\n        (s, e, c) = list(map(int, input().strip().split(' ')))\n        if c > graph[s][e]:\n            graph[s][e] = c\n    maxcomp(graph, dist, 49)", "def FloydWarshall(distance):\n    for k in range(49):\n        for i in range(49):\n            for j in range(49):\n                if i <= k and k <= j and (distance[i][j] < distance[i][k] + distance[k][j]):\n                    distance[i][j] = distance[i][k] + distance[k][j]\nnumber_of_test_cases = int(input())\nfor i in range(number_of_test_cases):\n    number_of_orders = int(input())\n    distance = [[0] * 49 for _ in range(49)]\n    for j in range(number_of_orders):\n        (start, end, cost) = map(int, input().strip().split(' '))\n        distance[start][end] = max(distance[start][end], cost)\n    FloydWarshall(distance)\n    print(distance[0][48])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    dp = []\n    for i in range(49):\n        dp.append([])\n        for j in range(49):\n            dp[i].append(0)\n    for i in range(n):\n        (a, b, c) = map(int, input().split())\n        dp[a][b] = max(dp[a][b], c)\n    c = [0] * 49\n    for i in range(49):\n        c[i] = 0\n        for j in range(i):\n            c[i] = max(c[i], c[j] + dp[j][i])\n    c.sort()\n    print(c[-1])", "import sys\nINF = int(1000000000.0)\n\ndef floyd_warshall(M, graph):\n    dist = [[0] * M for i in range(M)]\n    for i in range(M):\n        for j in range(M):\n            dist[i][j] = graph[i][j]\n    for x in range(5):\n        for k in range(M):\n            for i in range(M):\n                for j in range(M):\n                    if i <= k <= j and dist[i][j] < dist[i][k] + dist[k][j]:\n                        dist[i][j] = dist[i][k] + dist[k][j]\n    max_comp = 0\n    for i in range(M):\n        for j in range(M):\n            if max_comp < dist[i][j]:\n                max_comp = dist[i][j]\n    return max_comp\n\ndef solution():\n    T = int(input().strip())\n    M = 49\n    for i in range(T):\n        graph = [[0] * M for x in range(M)]\n        N = int(input().strip())\n        e_max = 0\n        for j in range(N):\n            (si, ei, ci) = map(int, input().strip().split())\n            if ei > e_max:\n                e_max = ei\n            if ci > graph[si][ei]:\n                graph[si][ei] = ci\n        mmax = [0 for x in range(M)]\n        for x in range(1, e_max + 1):\n            m = 0\n            for xx in range(x):\n                if m < graph[xx][x] + mmax[xx]:\n                    m = graph[xx][x] + mmax[xx]\n                mmax[x] = m\n        print(mmax[e_max])\nsolution()", "import queue\nMAX = 49\nINF = int(1000000000.0)\n\ndef FloydWarshall(graph, dist):\n    for i in range(MAX):\n        for j in range(MAX):\n            dist[i][j] = graph[i][j]\n    for k in range(MAX):\n        for i in range(MAX):\n            for j in range(MAX):\n                if i <= k and k <= j and (dist[i][j] < dist[i][k] + dist[k][j]):\n                    dist[i][j] = dist[i][k] + dist[k][j]\ntest = int(input())\nwhile test > 0:\n    test -= 1\n    m = int(input())\n    graph = [[0 for i in range(MAX)] for j in range(MAX)]\n    dist = [[None for i in range(MAX)] for j in range(MAX)]\n    for i in range(m):\n        (u, v, w) = map(int, input().split())\n        graph[u][v] = max(w, graph[u][v])\n    FloydWarshall(graph, dist)\n    print(dist[0][48])", "import queue\nMAX = 49\nINF = int(1000000000.0)\n\ndef FloydWarshall(graph, dist):\n    for i in range(MAX):\n        for j in range(MAX):\n            dist[i][j] = graph[i][j]\n    for k in range(MAX):\n        for i in range(MAX):\n            for j in range(MAX):\n                if i <= k and k <= j and (dist[i][j] < dist[i][k] + dist[k][j]):\n                    dist[i][j] = dist[i][k] + dist[k][j]\ntest = int(input())\nwhile test > 0:\n    test -= 1\n    m = int(input())\n    graph = [[0 for i in range(MAX)] for j in range(MAX)]\n    dist = [[None for i in range(MAX)] for j in range(MAX)]\n    for i in range(m):\n        (u, v, w) = map(int, input().split())\n        graph[u][v] = max(w, graph[u][v])\n    FloydWarshall(graph, dist)\n    print(dist[0][48])", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    c = [[0 for _ in range(49)] for _ in range(49)]\n    for i in range(N):\n        (u, v, w) = map(int, input().split())\n        c[u][v] = max(c[u][v], w)\n    dp = [0 for _ in range(49)]\n    for i in range(49):\n        for j in range(i):\n            dp[i] = max(dp[i], dp[j] + c[j][i])\n    print(dp[48])", "INF = 10 ** 9\nn = 49\n\ndef floyd():\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if i <= k <= j:\n                    dist[i][j] = max(dist[i][j], dist[i][k] + dist[k][j])\nT = int(input())\nfor _ in range(T):\n    dist = [[0] * n for _ in range(n)]\n    m = int(input())\n    for _ in range(m):\n        (u, v, w) = map(int, input().split())\n        if dist[u][v] < w:\n            dist[u][v] = w\n    floyd()\n    print(dist[0][48])", "INF = 10 ** 9\n\ndef floydWarshall(graph):\n    n = len(graph)\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if graph[i][k] + graph[k][j] > graph[i][j]:\n                    graph[i][j] = graph[i][k] + graph[k][j]\n\ndef solve():\n    m = int(input())\n    n = 49\n    graph = [[0] * n for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i > j:\n                graph[i][j] = -INF\n    for i in range(m):\n        (u, v, w) = map(int, input().split())\n        if graph[u][v] < w:\n            graph[u][v] = w\n    floydWarshall(graph)\n    maxCompensation = 0\n    for i in range(n):\n        for j in range(n):\n            maxCompensation = max(maxCompensation, graph[i][j])\n    print(maxCompensation)\nt = int(input())\nfor _ in range(t):\n    solve()", "MAX = 48\n\ndef FloydWarshall():\n    for k in range(MAX + 1):\n        for i in range(MAX + 1):\n            for j in range(MAX + 1):\n                if i <= k <= j:\n                    dist[i][j] = max(dist[i][j], dist[i][k] + dist[k][j])\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    dist = [[0] * (MAX + 1) for i in range(MAX + 1)]\n    for i in range(N):\n        (S, E, C) = map(int, input().split())\n        if C > dist[S][E]:\n            dist[S][E] = C\n    FloydWarshall()\n    print(dist[0][MAX])", "INF = 10 ** 9\nMAX = 49\n\ndef FloydWarshall(dist):\n    n = len(dist)\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if i <= k <= j and dist[i][j] < dist[i][k] + dist[k][j]:\n                    dist[i][j] = dist[i][k] + dist[k][j]\nCase = int(input())\nfor Case in range(1, Case + 1):\n    dist = [[0] * MAX for i in range(MAX)]\n    n = int(input())\n    for i in range(n):\n        (s, e, c) = map(int, input().split())\n        if c > dist[s][e]:\n            dist[s][e] = c\n    FloydWarshall(dist)\n    print(dist[0][48])", "def main():\n    test_case = int(input())\n    for t in range(test_case):\n        n = int(input())\n        d = [[] for i in range(49)]\n        for i in range(49):\n            for j in range(49):\n                d[i].append(0 if i <= j else -10 ** 9)\n        for i in range(n):\n            (s, e, c) = map(int, input().split())\n            d[s][e] = max(d[s][e], c)\n        for k in range(49):\n            for i in range(49):\n                for j in range(i, 49):\n                    d[i][j] = max(d[i][j], d[i][k] + d[k][j])\n        print(d[0][48])\nmain()", "INF = float('inf')\n\ndef floyd_warshall():\n    for k in range(49):\n        for i in range(49):\n            for j in range(49):\n                if dist[i][k] + dist[k][j] > dist[i][j]:\n                    dist[i][j] = dist[i][k] + dist[k][j]\nnum_tests = int(input())\nfor t in range(num_tests):\n    num_orders = int(input())\n    dist = [[0 if i <= j else -INF for j in range(49)] for i in range(49)]\n    last_time = 0\n    for o in range(num_orders):\n        (s, e, c) = map(int, input().split())\n        dist[s][e] = max(c, dist[s][e])\n    floyd_warshall()\n    print(dist[0][48])", "INF = float('inf')\n\ndef floyd_warshall():\n    best_comp_so_far = [0] * (last_time + 1)\n    for j in range(1, last_time + 1):\n        for i in range(j):\n            temp_comp = best_comp_so_far[i] + dist[i][j]\n            if temp_comp > best_comp_so_far[j]:\n                best_comp_so_far[j] = temp_comp\n    return best_comp_so_far[last_time]\nnum_tests = int(input())\nfor t in range(num_tests):\n    num_orders = int(input())\n    dist = [[0 for i in range(49)] for j in range(49)]\n    last_time = 0\n    for o in range(num_orders):\n        (s, e, c) = map(int, input().split())\n        dist[s][e] = max(dist[s][e], c)\n        if e > last_time:\n            last_time = e\n    result = floyd_warshall()\n    print(result)", "INF = float('inf')\n\ndef floyd_warshall():\n    best_comp_so_far = [0] * (last_time + 1)\n    for j in range(1, last_time + 1):\n        for i in range(j):\n            temp_comp = best_comp_so_far[i] + dist[i][j]\n            if temp_comp > best_comp_so_far[j]:\n                best_comp_so_far[j] = temp_comp\n    return best_comp_so_far[last_time]\nnum_tests = int(input())\nfor t in range(num_tests):\n    num_orders = int(input())\n    dist = [[0 for i in range(49)] for j in range(49)]\n    last_time = 0\n    for o in range(num_orders):\n        (s, e, c) = map(int, input().split())\n        dist[s][e] = max(dist[s][e], c)\n        if e > last_time:\n            last_time = e\n    result = floyd_warshall()\n    print(result)", "INF = int(1000000000.0)\nMAX = 50\n\ndef FloydWarshall(dist):\n    for k in range(MAX):\n        for i in range(MAX):\n            for j in range(MAX):\n                if i <= k <= j:\n                    if dist[i][j] < dist[i][k] + dist[k][j]:\n                        dist[i][j] = dist[i][k] + dist[k][j]\nT = int(input())\nfor t in range(T):\n    dist = [[0 for i in range(MAX)] for j in range(MAX)]\n    n = int(input())\n    for i in range(n):\n        (s, e, c) = map(int, input().split())\n        if c > dist[s][e]:\n            dist[s][e] = c\n    FloydWarshall(dist)\n    max = -1\n    for i in range(MAX):\n        for j in range(MAX):\n            if dist[i][j] > max:\n                max = dist[i][j]\n    print(max)", "INF = 10 ** 9\nMAX = 49\n\ndef FloydWarshall(dist):\n    n = len(dist)\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if i <= k <= j and dist[i][j] < dist[i][k] + dist[k][j]:\n                    dist[i][j] = dist[i][k] + dist[k][j]\ntc = int(input())\nfor tc in range(1, tc + 1):\n    dist = [[0] * MAX for i in range(MAX)]\n    n = int(input())\n    for i in range(n):\n        (s, e, c) = map(int, input().split())\n        if c > dist[s][e]:\n            dist[s][e] = c\n    FloydWarshall(dist)\n    print(dist[0][48])", "INF = 10 ** 9\nMAX = 49\n\ndef FloydWarshall(dist):\n    n = len(dist)\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if i <= k <= j and dist[i][j] < dist[i][k] + dist[k][j]:\n                    dist[i][j] = dist[i][k] + dist[k][j]\ntc = int(input())\nfor tc in range(1, tc + 1):\n    dist = [[0] * MAX for i in range(MAX)]\n    n = int(input())\n    for i in range(n):\n        (s, e, c) = map(int, input().split())\n        if c > dist[s][e]:\n            dist[s][e] = c\n    FloydWarshall(dist)\n    print(dist[0][48])", "def compare(x):\n    return x[1]\nfor _ in range(int(input())):\n    n = int(input())\n    inf = list()\n    [inf.append(list(map(int, input().split(' ')))) for i in range(n)]\n    inf.sort(key=compare)\n    d = [0] * 50\n    for (source, dest, cost) in inf:\n        d[dest] = max(max(d[:source + 1]) + cost, d[dest])\n    print(max(d))", "H = 49\nt = int(input())\nfor _ in range(t):\n    dp = [[0 for _ in range(H)] for _ in range(H)]\n    n = int(input())\n    for _ in range(n):\n        (s, e, c) = (int(x) for x in input().split())\n        dp[s][e] = max(dp[s][e], c)\n    max_c = [0 for _ in range(H)]\n    for e in range(H):\n        for s in range(H - 1):\n            max_c[e] = max(max_c[e], max_c[s] + dp[s][e])\n    print(max_c[48])", "import sys\nimport math\nfrom time import time\nfrom itertools import permutations, combinations\nimport collections\nimport functools\nfrom fractions import gcd, Fraction\nimport string\nimport operator\nimport bisect\n\nclass timed(object):\n\n    def __init__(self, func):\n        self.func = func\n\n    def __call__(self, *args):\n        t1 = time()\n        ret = self.func(*args)\n        dif_time = time() - t1\n        print('%s: returned %s in %f seconds' % (self.func.__name__, ret, dif_time))\n        return ret\n\ndef comp(f1, f2, *args):\n    t1 = time()\n    r1 = f1(*args) if f1 is not None else None\n    t2 = time()\n    r2 = f2(*args) if f2 is not None else None\n    t3 = time()\n    res = '%5s: %s in %f\\n%5s: %s in %f' % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)\n    if r1 != r2:\n        dr = '!! DIFFERENT RESULTS !!'\n        res = dr + '\\n' + res + '\\n' + dr\n    print(res)\n\ndef bellman_ford(start, end, nb_nodes, get_neighbors, max_path_nodes=None):\n    MAX_INT = 9999999\n    if max_path_nodes is None:\n        max_path_nodes = nb_nodes - 1\n    weights = [MAX_INT] * nb_nodes\n    weights[start] = 0\n    nb = [(u, v, w) for u in range(nb_nodes) for (v, w) in get_neighbors(u)]\n    for i in range(max_path_nodes):\n        changes = False\n        for (u, v, w) in nb:\n            if weights[u] + w < weights[v]:\n                changes = True\n                weights[v] = weights[u] + w\n        if not changes:\n            break\n    return weights\n\ndef alg(events):\n    events = sorted(((s, e, -c) for (s, e, c) in events))\n    length = len(events)\n    nb_nodes = length + 2\n\n    def get_neighbors(i):\n        if i == 0:\n            for (ievent, event) in enumerate(events):\n                yield (ievent + 1, event[2])\n        elif i == length + 1:\n            pass\n        else:\n            prev_event_end = events[i - 1][1]\n            for (inbevent, event) in enumerate(events):\n                if event[0] >= prev_event_end:\n                    yield (inbevent + 1, event[2])\n            yield (length + 1, 0)\n    return -min(bellman_ford(0, nb_nodes - 1, nb_nodes, get_neighbors))\n\nclass memoized(object):\n\n    def __init__(self, func):\n        self.func = func\n        self.cache = {}\n\n    def __call__(self, *args):\n        if not isinstance(args, collections.Hashable):\n            return self.func(*args)\n        if args in self.cache:\n            return self.cache[args]\n        else:\n            value = self.func(*args)\n            self.cache[args] = value\n            return value\n\n    def __repr__(self):\n        return self.func.__doc__\n\n    def __get__(self, obj, objtype):\n        return functools.partial(self.__call__, obj)\n\ndef alg2(events):\n    C = [list([0] * 49) for _ in range(49)]\n    for (s, e, p) in events:\n        C[s][e] = max(C[s][e], p)\n\n    @memoized\n    def maxC(e_):\n        if e_ == 0:\n            return 0\n        res = 0\n        for start in range(0, e_):\n            v = maxC(start) + C[start][e_]\n            res = max(res, v)\n        return res\n    return maxC(48)\n\ndef main():\n    data = sys.stdin\n    nb = int(data.readline())\n    for icase in range(nb):\n        nb_events = int(data.readline().strip())\n        events = []\n        for e in range(nb_events):\n            events.append(list(map(int, data.readline().split())))\n        res = alg2(events)\n        print(res)\nmain()", "import sys\nfor z in range(int(sys.stdin.readline())):\n    arr = []\n    another = [[] for m in range(49)]\n    for f in range(int(sys.stdin.readline())):\n        temp = list(map(int, sys.stdin.readline().split()))\n        another[temp[1]].append(temp)\n        arr.append(temp)\n    best = [0 for m in range(49)]\n    arr.sort()\n    for i in range(1, 49):\n        temp = another[i]\n        if temp == []:\n            best[i] = best[i - 1]\n        else:\n            maxi = best[i - 1]\n            for j in range(len(temp)):\n                maxi = max(maxi, best[temp[j][0]] + temp[j][2])\n            best[i] = maxi\n    print(best[-1])", "T = int(input())\nfor T in range(T):\n    n = int(input())\n    G = [[] for i in range(50)]\n    f = [0] * 50\n    for i in range(n):\n        (L, R, w) = map(int, input().split(' '))\n        G[R] += [[L, w]]\n    for i in range(49):\n        f[i] = max([f[j] + w for (j, w) in G[i]] + [0])\n        if i:\n            f[i] = max(f[i], f[i - 1])\n    print(f[48])"]