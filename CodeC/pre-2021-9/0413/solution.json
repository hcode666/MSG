["def dist(x1, x2, y1, y2):\n    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    return d\n\ndef main():\n    si = int(input())\n    t = int(input())\n    for z in range(t):\n        (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n        d1 = dist(x1, x2, y1, y2)\n        d2 = dist(x1, x3, y1, y3)\n        d3 = dist(x3, x2, y3, y2)\n        if d1 == d2 or d2 == d3 or d1 == d3:\n            side = 'Isosceles'\n        else:\n            side = 'Scalene'\n        l = [d1, d2, d3]\n        l.sort()\n        l1 = (x2 - x1, y2 - y1, x3 - x1, y3 - y1, x3 - x2, y3 - y2)\n        if l1[2] * l1[0] + l1[3] * l1[1] == 0 or l1[4] * l1[0] + l1[5] * l1[1] == 0 or l1[4] * l1[2] + l1[5] * l1[3] == 0:\n            angle = 'right'\n        elif l[0] ** 2 + l[1] ** 2 - l[2] ** 2 > 0.0:\n            angle = 'acute'\n        else:\n            angle = 'obtuse'\n        if si == 1:\n            print(side + ' triangle')\n        if si == 2:\n            print(side + ' ' + angle + ' triangle')\nmain()", "def sub1():\n    for i in range(int(input())):\n        (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n        l1 = (x2 - x1) ** 2 + (y2 - y1) ** 2\n        l2 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n        l3 = (x3 - x1) ** 2 + (y3 - y1) ** 2\n        if l1 == l2 or l2 == l3 or l3 == l1:\n            print('Isosceles triangle')\n            continue\n        print('Scalene triangle')\n\ndef sub2():\n    for i in range(int(input())):\n        (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n        sides_comp = 'Scalene'\n        angle_comp = 'obtuse'\n        l1 = (x2 - x1) ** 2 + (y2 - y1) ** 2\n        l2 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n        l3 = (x3 - x1) ** 2 + (y3 - y1) ** 2\n        if l1 == l2 or l2 == l3 or l3 == l1:\n            sides_comp = 'Isosceles'\n        if l3 == l1 + l2 or l1 == l2 + l3 or l2 == l1 + l3:\n            angle_comp = 'right'\n        if l1 < l2 + l3 and l2 < l3 + l1 and (l3 < l2 + l1):\n            angle_comp = 'acute'\n        print(f'{sides_comp} {angle_comp} triangle')\nif input() == '2':\n    sub2()\nelse:\n    sub1()", "import math\n\ndef dis(x1, y1, x2, y2):\n    d = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    return d\nsid = int(input())\nT = int(input())\nfor tc in range(T):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split(' '))\n    d1 = dis(x1, y1, x2, y2)\n    d2 = dis(x1, y1, x3, y3)\n    d3 = dis(x2, y2, x3, y3)\n    t = ''\n    a = ''\n    M = max(d1, d2, d3)\n    sumd = d1 + d2 + d3\n    if d1 != d2 and d2 != d3 and (d1 != d3):\n        t = 'Scalene'\n    else:\n        t = 'Isosceles'\n    if sid == 1:\n        print(t, 'triangle')\n    elif sid == 2:\n        if M == sumd - M:\n            a = 'right'\n        elif M > sumd - M:\n            a = 'obtuse'\n        else:\n            a = 'acute'\n        print(t, a, 'triangle')", "import math\n\ndef dis(x1, y1, x2, y2):\n    d = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    return d\nsid = int(input())\nT = int(input())\nfor tc in range(T):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split(' '))\n    d1 = dis(x1, y1, x2, y2)\n    d2 = dis(x1, y1, x3, y3)\n    d3 = dis(x2, y2, x3, y3)\n    t = ''\n    a = ''\n    M = max(d1, d2, d3)\n    sumd = d1 + d2 + d3\n    if d1 != d2 and d2 != d3 and (d1 != d3):\n        t = 'Scalene'\n    else:\n        t = 'Isosceles'\n    if sid == 1:\n        print(t, 'triangle')\n    elif sid == 2:\n        if M == sumd - M:\n            a = 'right'\n        elif M > sumd - M:\n            a = 'obtuse'\n        else:\n            a = 'acute'\n        print(t, a, 'triangle')", "import math\n\ndef dis(x1, y1, x2, y2):\n    d = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    return d\nsid = int(input())\nt = input()\nfor c in range(0, int(t)):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split(' '))\n    d1 = dis(x1, y1, x2, y2)\n    d2 = dis(x1, y1, x3, y3)\n    d3 = dis(x2, y2, x3, y3)\n    t = ''\n    a = ''\n    M = max(d1, d2, d3)\n    sumd = d1 + d2 + d3\n    if d1 != d2 and d2 != d3 and (d1 != d3):\n        t = 'Scalene'\n    else:\n        t = 'Isosceles'\n    if sid == 1:\n        print(t, 'triangle')\n    elif sid == 2:\n        if M == sumd - M:\n            a = 'right'\n        elif M > sumd - M:\n            a = 'obtuse'\n        else:\n            a = 'acute'\n        print(t, a, 'triangle')", "import math\n\ndef dis(x1, y1, x2, y2):\n    d = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    return d\nsid = int(input())\nT = int(input())\nfor tc in range(T):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split(' '))\n    d1 = dis(x1, y1, x2, y2)\n    d2 = dis(x1, y1, x3, y3)\n    d3 = dis(x2, y2, x3, y3)\n    t = ''\n    a = ''\n    M = max(d1, d2, d3)\n    sumd = d1 + d2 + d3\n    if d1 != d2 and d2 != d3 and (d1 != d3):\n        t = 'Scalene'\n    else:\n        t = 'Isosceles'\n    if sid == 1:\n        print(t, 'triangle')\n    elif sid == 2:\n        if M == sumd - M:\n            a = 'right'\n        elif M > sumd - M:\n            a = 'obtuse'\n        else:\n            a = 'acute'\n        print(t, a, 'triangle')", "import math\n\ndef dis(x1, y1, x2, y2):\n    d = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    return d\nsid = int(input())\nT = int(input())\nfor tc in range(T):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split(' '))\n    d1 = dis(x1, y1, x2, y2)\n    d2 = dis(x1, y1, x3, y3)\n    d3 = dis(x2, y2, x3, y3)\n    t = ''\n    a = ''\n    M = max(d1, d2, d3)\n    sumd = d1 + d2 + d3\n    if d1 != d2 and d2 != d3 and (d1 != d3):\n        t = 'Scalene'\n    else:\n        t = 'Isosceles'\n    if sid == 1:\n        print(t, 'triangle')\n    elif sid == 2:\n        if M == sumd - M:\n            a = 'right'\n        elif M > sumd - M:\n            a = 'obtuse'\n        else:\n            a = 'acute'\n        print(t, a, 'triangle')", "def dist(x, y, a, b):\n    return (x - a) ** 2 + (y - b) ** 2\nsubtask_id = int(input())\ns = 'triangle'\nif subtask_id == 1:\n    for _ in range(int(input())):\n        (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n        a1 = dist(x1, y1, x2, y2)\n        a2 = dist(x1, y1, x3, y3)\n        a3 = dist(x2, y2, x3, y3)\n        if a1 != a2 and a2 != a3 and (a3 != a1):\n            s1 = 'Scalene'\n        else:\n            s1 = 'Isosceles'\n        print(s1, s)\nelse:\n    for _ in range(int(input())):\n        (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n        a1 = dist(x1, y1, x2, y2)\n        a2 = dist(x1, y1, x3, y3)\n        a3 = dist(x2, y2, x3, y3)\n        peri = a1 + a2 + a3\n        mxm = max(a1, a2, a3)\n        if a1 != a2 and a2 != a3 and (a3 != a1):\n            s1 = 'Scalene'\n        else:\n            s1 = 'Isosceles'\n        if 2 * mxm == peri:\n            s3 = 'right'\n        elif 2 * mxm > peri:\n            s3 = 'obtuse'\n        else:\n            s3 = 'acute'\n        print(s1, s3, s)", "d = int(input())\nfor nuni in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    a2 = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    a3 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    mx = max(a1, a2, a3)\n    sm = a1 + a2 + a3\n    s3 = 'triangle'\n    if d == 1:\n        if a1 == a2 or a2 == a3 or a3 == a1:\n            print('Isosceles triangle')\n        else:\n            print('Scalene triangle')\n    else:\n        if a1 == a2 or a2 == a3 or a3 == a1:\n            s1 = 'Isosceles'\n        else:\n            s1 = 'Scalene'\n        if mx == sm - mx:\n            s2 = 'right'\n        elif mx > sm - mx:\n            s2 = 'obtuse'\n        else:\n            s2 = 'acute'\n        print(s1, s2, s3)", "d = int(input())\nfor nuni in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    a1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    a2 = (x3 - x2) ** 2 + (y3 - y2) ** 2\n    a3 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    mx = max(a1, a2, a3)\n    sm = a1 + a2 + a3\n    s3 = 'triangle'\n    if d == 1:\n        if a1 == a2 or a2 == a3 or a3 == a1:\n            print('Isosceles triangle')\n        else:\n            print('Scalene triangle')\n    else:\n        if a1 == a2 or a2 == a3 or a3 == a1:\n            s1 = 'Isosceles'\n        else:\n            s1 = 'Scalene'\n        if mx == sm - mx:\n            s2 = 'right'\n        elif mx > sm - mx:\n            s2 = 'obtuse'\n        else:\n            s2 = 'acute'\n        print(s1, s2, s3)", "subtask_id = int(input())\nt = int(input())\nfor i in range(t):\n    a = list(map(int, input().split()))\n    distance_list = [0, 0, 0]\n    distance_list[0] = pow(a[0] - a[2], 2) + pow(a[1] - a[3], 2)\n    distance_list[1] = pow(a[2] - a[4], 2) + pow(a[3] - a[5], 2)\n    distance_list[2] = pow(a[4] - a[0], 2) + pow(a[5] - a[1], 2)\n    triangle_side_type = ''\n    triangle_angle_type = ''\n    if distance_list[0] == distance_list[1] or distance_list[1] == distance_list[2] or distance_list[2] == distance_list[0]:\n        triangle_side_type = 'Isosceles'\n    else:\n        triangle_side_type = 'Scalene'\n    if subtask_id is 1:\n        print(f'{triangle_side_type} triangle')\n    elif subtask_id is 2:\n        cosine_angles_list = [0.0, 0.0, 0.0]\n        cosine_angles_list[0] = (distance_list[0] + distance_list[1] - distance_list[2]) / (2 * pow(distance_list[0], 0.5) * pow(distance_list[1], 0.5))\n        cosine_angles_list[1] = (distance_list[1] + distance_list[2] - distance_list[0]) / (2 * pow(distance_list[1], 0.5) * pow(distance_list[2], 0.5))\n        cosine_angles_list[2] = (distance_list[2] + distance_list[0] - distance_list[1]) / (2 * pow(distance_list[2], 0.5) * pow(distance_list[0], 0.5))\n        for k in range(3):\n            if cosine_angles_list[k] < -1 * pow(10, -6):\n                triangle_angle_type = 'obtuse'\n                break\n            elif pow(10, -6) > cosine_angles_list[k] > -1 * pow(10, -6):\n                triangle_angle_type = 'right'\n                break\n            else:\n                triangle_angle_type = 'acute'\n        print(f'{triangle_side_type} {triangle_angle_type} triangle')", "listInput = lambda : list(map(int, input().split(' ')))\nmapInput = lambda : map(int, input().split(' '))\nimport math\nsub_id = int(input())\nfor _ in range(int(input())):\n    res = 'Scalene'\n    s = []\n    (x1, y1, x2, y2, x3, y3) = mapInput()\n    s.append((x2 - x1) ** 2 + (y2 - y1) ** 2)\n    s.append((x3 - x1) ** 2 + (y3 - y1) ** 2)\n    s.append((x2 - x3) ** 2 + (y2 - y3) ** 2)\n    s.sort()\n    if s[0] == s[1] or s[1] == s[2]:\n        res = 'Isosceles'\n    if sub_id > 1:\n        if s[0] + s[1] == s[2]:\n            res = res + ' right'\n        elif s[0] + s[1] < s[2]:\n            res = res + ' obtuse'\n        else:\n            res = res + ' acute'\n    print(res, 'triangle')", "listInput = lambda : list(map(int, input().split(' ')))\nmapInput = lambda : map(int, input().split(' '))\nimport math\nsub_id = int(input())\nfor _ in range(int(input())):\n    res = 'Scalene'\n    s = []\n    (x1, y1, x2, y2, x3, y3) = mapInput()\n    s.append((x2 - x1) ** 2 + (y2 - y1) ** 2)\n    s.append((x3 - x1) ** 2 + (y3 - y1) ** 2)\n    s.append((x2 - x3) ** 2 + (y2 - y3) ** 2)\n    s.sort()\n    if s[0] == s[1] or s[1] == s[2]:\n        res = 'Isosceles'\n    if sub_id > 1:\n        if s[0] + s[1] == s[2]:\n            res = res + ' right'\n        elif s[0] + s[1] < s[2]:\n            res = res + ' obtuse'\n        else:\n            res = res + ' acute'\n    print(res, 'triangle')", "import math\nsubtask_id = int(input())\nt = int(input())\nfor tc in range(t):\n    coord = list(map(int, input().split(' ')))\n    a = math.sqrt((coord[2] - coord[0]) ** 2 + (coord[3] - coord[1]) ** 2)\n    b = math.sqrt((coord[4] - coord[2]) ** 2 + (coord[5] - coord[3]) ** 2)\n    c = math.sqrt((coord[4] - coord[0]) ** 2 + (coord[5] - coord[1]) ** 2)\n    triangle = 'Scalene '\n    if abs(a - b) < 1e-06 or abs(a - c) < 1e-06 or abs(b - c) < 1e-06:\n        triangle = 'Isosceles '\n    if subtask_id == 2:\n        teta_1 = math.acos((a ** 2 + b ** 2 - c ** 2) / (2 * a * b)) * 57.2958\n        teta_2 = math.acos((a ** 2 + c ** 2 - b ** 2) / (2 * a * c)) * 57.2958\n        teta_3 = math.acos((b ** 2 + c ** 2 - a ** 2) / (2 * c * b)) * 57.2958\n        if teta_1 - 90.0 < 0.0 and teta_2 - 90.0 < 0.0 and (teta_3 - 90.0 < 0.0):\n            triangle = triangle + 'acute '\n        elif abs(teta_1 - 90.0) < 0.001 or abs(teta_2 - 90.0) < 0.001 or abs(teta_3 - 90.0) < 0.001:\n            triangle = triangle + 'right '\n        else:\n            triangle = triangle + 'obtuse '\n    print(triangle + 'triangle')", "import math\nsubtask_id = int(input())\nt = int(input())\nfor tc in range(t):\n    coord = list(map(int, input().split(' ')))\n    a = math.sqrt((coord[2] - coord[0]) ** 2 + (coord[3] - coord[1]) ** 2)\n    b = math.sqrt((coord[4] - coord[2]) ** 2 + (coord[5] - coord[3]) ** 2)\n    c = math.sqrt((coord[4] - coord[0]) ** 2 + (coord[5] - coord[1]) ** 2)\n    triangle = 'Scalene '\n    if abs(a - b) < 1e-06 or abs(a - c) < 1e-06 or abs(b - c) < 1e-06:\n        triangle = 'Isosceles '\n    if subtask_id == 2:\n        teta_1 = math.acos((a ** 2 + b ** 2 - c ** 2) / (2 * a * b)) * 57.2958\n        teta_2 = math.acos((a ** 2 + c ** 2 - b ** 2) / (2 * a * c)) * 57.2958\n        teta_3 = math.acos((b ** 2 + c ** 2 - a ** 2) / (2 * c * b)) * 57.2958\n        if teta_1 - 90.0 < 0.0 and teta_2 - 90.0 < 0.0 and (teta_3 - 90.0 < 0.0):\n            triangle = triangle + 'acute '\n        elif abs(teta_1 - 90.0) < 0.001 or abs(teta_2 - 90.0) < 0.001 or abs(teta_3 - 90.0) < 0.001:\n            triangle = triangle + 'right '\n        else:\n            triangle = triangle + 'obtuse '\n    print(triangle + 'triangle')", "ST_id = int(input())\nfor _ in range(int(input())):\n    side_d = []\n    A = list(map(int, input().split()))\n    A.append(A[0])\n    A.append(A[1])\n    for i in range(0, 6, 2):\n        side_d.append((A[i] - A[i + 2]) * (A[i] - A[i + 2]) + (A[i + 1] - A[i + 3]) * (A[i + 1] - A[i + 3]))\n    side_d.sort()\n    if side_d[0] == side_d[1] or side_d[1] == side_d[2]:\n        ans = 'Isosceles'\n    else:\n        ans = 'Scalene'\n    if ST_id > 1:\n        if side_d[0] + side_d[1] == side_d[2]:\n            angle = 'right'\n        elif side_d[0] + side_d[1] < side_d[2]:\n            angle = 'obtuse'\n        else:\n            angle = 'acute'\n        ans = ans + ' ' + angle\n    print(ans, 'triangle')", "ST_id = int(input())\nfor _ in range(int(input())):\n    side_d = []\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    side_d.append((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2))\n    side_d.append((x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2))\n    side_d.append((x3 - x1) * (x3 - x1) + (y3 - y1) * (y3 - y1))\n    side_d.sort()\n    if side_d[0] == side_d[1] or side_d[1] == side_d[2]:\n        ans = 'Isosceles'\n    else:\n        ans = 'Scalene'\n    if ST_id > 1:\n        if side_d[0] + side_d[1] == side_d[2]:\n            angle = 'right'\n        elif side_d[0] + side_d[1] < side_d[2]:\n            angle = 'obtuse'\n        else:\n            angle = 'acute'\n        ans = ans + ' ' + angle\n    print(ans, 'triangle')", "id_ = int(input())\ntests = int(input())\nfor i in range(tests):\n    arr = list(map(int, input().split()))\n    (a, b, c) = (0, 0, 0)\n    a = abs(arr[1] - arr[3]) ** 2 + abs(arr[0] - arr[2]) ** 2\n    b = abs(arr[2] - arr[4]) ** 2 + abs(arr[3] - arr[5]) ** 2\n    c = abs(arr[1] - arr[5]) ** 2 + abs(arr[0] - arr[4]) ** 2\n    ans = ''\n    if a == b or b == c or c == a:\n        ans += 'Isosceles '\n    else:\n        ans += 'Scalene '\n    if id_ == 2:\n        if a + b == c or b + c == a or c + a == b:\n            ans += 'right '\n        elif a + b < c or b + c < a or c + a < b:\n            ans += 'obtuse '\n        else:\n            ans += 'acute '\n    ans += 'triangle'\n    print(ans)", "id = int(input())\nn = int(input())\nfor i in range(n):\n    d = []\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d.append((x1 - x2) ** 2 + (y1 - y2) ** 2)\n    d.append((x3 - x2) ** 2 + (y3 - y2) ** 2)\n    d.append((x3 - x1) ** 2 + (y3 - y1) ** 2)\n    d.sort()\n    if d[0] == d[1] or d[1] == d[2]:\n        side = 'Isosceles'\n    else:\n        side = 'Scalene'\n    if d[0] + d[1] < d[2]:\n        angle = 'obtuse'\n    elif d[0] + d[1] == d[2]:\n        angle = 'right'\n    elif d[0] + d[1] > d[2]:\n        angle = 'acute'\n    else:\n        angle = ''\n    if id == 1:\n        print(side, 'triangle')\n    else:\n        print(side, angle, 'triangle')", "s = int(input())\nt = int(input())\nfor i in range(t):\n    n = [int(x) for x in input().split()]\n    a = ((n[0] - n[2]) ** 2 + (n[1] - n[3]) ** 2) ** 0.5\n    b = ((n[0] - n[4]) ** 2 + (n[1] - n[5]) ** 2) ** 0.5\n    c = ((n[4] - n[2]) ** 2 + (n[5] - n[3]) ** 2) ** 0.5\n    side = [a, b, c]\n    ma = max(side)\n    side.remove(ma)\n    if s == 1:\n        ans1 = ''\n        if a == b or b == c or a == c:\n            ans1 = 'Isosceles triangle'\n        else:\n            ans1 = 'Scalene triangle'\n        print(ans1)\n    if s == 2:\n        ans2 = ''\n        x = side[0]\n        y = side[1]\n        e = x ** 2 + y ** 2\n        ans1 = ''\n        if a == b or b == c or a == c:\n            ans1 = 'Isosceles'\n        else:\n            ans1 = 'Scalene'\n        if abs(ma ** 2 - e) < 10 ** (-6):\n            ans2 = 'right triangle'\n        elif side[0] ** 2 + side[1] ** 2 < ma ** 2:\n            ans2 = 'obtuse triangle'\n        elif side[0] ** 2 + side[1] ** 2 > ma ** 2:\n            ans2 = 'acute triangle'\n        print(ans1, ans2)", "SUBTASK_ID = int(input())\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = [int(s) for s in input().split()]\n    (\u0394x1, \u0394y1, \u0394x2, \u0394y2, \u0394x3, \u0394y3) = (x2 - x1, y2 - y1, x3 - x2, y3 - y2, x1 - x3, y1 - y3)\n    (\u03941, \u03942, \u03943) = (\u0394x1 * \u0394x1 + \u0394y1 * \u0394y1, \u0394x2 * \u0394x2 + \u0394y2 * \u0394y2, \u0394x3 * \u0394x3 + \u0394y3 * \u0394y3)\n    if SUBTASK_ID == 1:\n        if \u03941 == \u03942 or \u03942 == \u03943 or \u03943 == \u03941:\n            print('Isosceles triangle')\n        else:\n            print('Scalene triangle')\n    else:\n        if \u03941 == \u03942 or \u03942 == \u03943 or \u03943 == \u03941:\n            T = 'Isosceles'\n        else:\n            T = 'Scalene'\n        if \u03941 + \u03942 < \u03943 or \u03942 + \u03943 < \u03941 or \u03943 + \u03941 < \u03942:\n            print(T, 'obtuse triangle')\n        elif \u03941 + \u03942 == \u03943 or \u03942 + \u03943 == \u03941 or \u03943 + \u03941 == \u03942:\n            print(T, 'right triangle')\n        else:\n            print(T, 'acute triangle')", "id = int(input())\nt = int(input())\nfor i in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    d3 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    angle = ''\n    length = ''\n    arr = [d1, d2, d3]\n    arr.sort()\n    if arr[2] > arr[0] + arr[1]:\n        angle = 'obtuse'\n    elif arr[2] < arr[0] + arr[1]:\n        angle = 'acute'\n    else:\n        angle = 'right'\n    if d1 != d2 and d2 != d3 and (d3 != d1):\n        length = 'Scalene'\n    else:\n        length = 'Isosceles'\n    if id == 1:\n        print(length + ' triangle')\n    else:\n        print(length + ' ' + angle + ' triangle')", "def angle_check(AB, AC, BC):\n    li = [AB, AC, BC]\n    li.sort()\n    if li[2] == li[0] + li[1]:\n        return 'right'\n    elif li[2] < li[0] + li[1]:\n        return 'acute'\n    elif li[2] > li[0] + li[1]:\n        return 'obtuse'\n\ndef side(AB, AC, BC):\n    if AB != AC and AB != BC and (AC != BC):\n        return 'Scalene'\n    elif AB == AC or AB == BC or AC == BC:\n        return 'Isosceles'\n\ndef side_check(x1, y1, x2, y2, x3, y3, condition):\n    AB = abs(x2 - x1) ** 2 + abs(y2 - y1) ** 2\n    AC = abs(x3 - x1) ** 2 + abs(y3 - y1) ** 2\n    BC = abs(x3 - x2) ** 2 + abs(y3 - y2) ** 2\n    if condition == 1:\n        print(side(AB, AC, BC), ' triangle')\n    else:\n        print(side(AB, AC, BC), angle_check(AB, AC, BC), ' triangle')\ncondition = int(input())\nfor _ in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    side_check(x1, y1, x2, y2, x3, y3, condition)", "id = int(input())\nt = int(input())\nfor i in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    d3 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    angle = ''\n    length = ''\n    arr = [d1, d2, d3]\n    arr.sort()\n    if arr[2] > arr[0] + arr[1]:\n        angle = 'obtuse'\n    elif arr[2] < arr[0] + arr[1]:\n        angle = 'acute'\n    else:\n        angle = 'right'\n    if d1 != d2 and d2 != d3 and (d3 != d1):\n        length = 'Scalene'\n    else:\n        length = 'Isosceles'\n    if id == 1:\n        print(length + ' triangle')\n    else:\n        print(length + ' ' + angle + ' triangle')", "id = int(input())\nt = int(input())\nfor i in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    d3 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    angle = ''\n    length = ''\n    arr = [d1, d2, d3]\n    arr.sort()\n    if arr[2] > arr[0] + arr[1]:\n        angle = 'obtuse'\n    elif arr[2] < arr[0] + arr[1]:\n        angle = 'acute'\n    else:\n        angle = 'right'\n    if d1 != d2 and d2 != d3 and (d3 != d1):\n        length = 'Scalene'\n    else:\n        length = 'Isosceles'\n    if id == 1:\n        print(length + ' triangle')\n    else:\n        print(length + ' ' + angle + ' triangle')", "id = int(input())\nt = int(input())\nfor i in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    d3 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    angle = ''\n    length = ''\n    arr = [d1, d2, d3]\n    arr.sort()\n    if arr[2] > arr[0] + arr[1]:\n        angle = 'obtuse'\n    elif arr[2] < arr[0] + arr[1]:\n        angle = 'acute'\n    else:\n        angle = 'right'\n    if d1 != d2 and d2 != d3 and (d3 != d1):\n        length = 'Scalene'\n    else:\n        length = 'Isosceles'\n    if id == 1:\n        print(length + ' triangle')\n    else:\n        print(length + ' ' + angle + ' triangle')", "id = int(input())\nt = int(input())\nfor i in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    d3 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    angle = ''\n    length = ''\n    arr = [d1, d2, d3]\n    arr.sort()\n    if arr[2] > arr[0] + arr[1]:\n        angle = 'obtuse'\n    elif arr[2] < arr[0] + arr[1]:\n        angle = 'acute'\n    else:\n        angle = 'right'\n    if d1 != d2 and d2 != d3 and (d3 != d1):\n        length = 'Scalene'\n    else:\n        length = 'Isosceles'\n    if id == 1:\n        print(length + ' triangle')\n    else:\n        print(length + ' ' + angle + ' triangle')", "id = int(input())\nt = int(input())\nfor i in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    d3 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    angle = ''\n    length = ''\n    arr = [d1, d2, d3]\n    arr.sort()\n    if arr[2] > arr[0] + arr[1]:\n        angle = 'obtuse'\n    elif arr[2] < arr[0] + arr[1]:\n        angle = 'acute'\n    else:\n        angle = 'right'\n    if d1 != d2 and d2 != d3 and (d3 != d1):\n        length = 'Scalene'\n    else:\n        length = 'Isosceles'\n    if id == 1:\n        print(length + ' triangle')\n    else:\n        print(length + ' ' + angle + ' triangle')", "id = int(input())\nt = int(input())\nfor i in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    d3 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    angle = ''\n    length = ''\n    arr = [d1, d2, d3]\n    arr.sort()\n    if arr[2] > arr[0] + arr[1]:\n        angle = 'obtuse'\n    elif arr[2] < arr[0] + arr[1]:\n        angle = 'acute'\n    else:\n        angle = 'right'\n    if d1 != d2 and d2 != d3 and (d3 != d1):\n        length = 'Scalene'\n    else:\n        length = 'Isosceles'\n    if id == 1:\n        print(length + ' triangle')\n    else:\n        print(length + ' ' + angle + ' triangle')", "def length(x1, y1, x2, y2):\n    temp1 = (x1 - x2) ** 2\n    temp2 = (y1 - y2) ** 2\n    return temp1 + temp2\n\ndef classify_angle(sides):\n    longest = max(sides)\n    sides.remove(longest)\n    temp1 = longest\n    temp2 = sides[0] + sides[1]\n    if temp1 > temp2:\n        print('obtuse', end=' ')\n    elif temp1 == temp2:\n        print('right', end=' ')\n    else:\n        print('acute', end=' ')\n\ndef classify_size(sides):\n    unique = set(sides)\n    if len(unique) == 3:\n        print('Scalene', end=' ')\n    else:\n        print('Isosceles', end=' ')\nsubtask = int(input())\nfor i in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split(' '))\n    sides = [0, 0, 0]\n    sides[0] = length(x1, y1, x2, y2)\n    sides[1] = length(x2, y2, x3, y3)\n    sides[2] = length(x1, y1, x3, y3)\n    classify_size(sides)\n    if subtask == 2:\n        classify_angle(sides)\n    print('triangle')", "id = int(input())\nt = int(input())\nfor i in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    d3 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    angle = ''\n    length = ''\n    arr = [d1, d2, d3]\n    arr.sort()\n    if arr[2] > arr[0] + arr[1]:\n        angle = 'obtuse'\n    elif arr[2] < arr[0] + arr[1]:\n        angle = 'acute'\n    else:\n        angle = 'right'\n    if d1 != d2 and d2 != d3 and (d3 != d1):\n        length = 'Scalene'\n    else:\n        length = 'Isosceles'\n    if id == 1:\n        print(length + ' triangle')\n    else:\n        print(length + ' ' + angle + ' triangle')", "def angle(d1, d2, d3):\n    arr = [d1, d2, d3]\n    arr.sort()\n    if arr[2] > arr[0] + arr[1]:\n        return 'obtuse'\n    elif arr[2] < arr[0] + arr[1]:\n        return 'acute'\n    else:\n        return 'right'\n\ndef side(d1, d2, d3):\n    arr = [d1, d2, d3]\n    arr.sort()\n    if d1 != d2 and d2 != d3 and (d3 != d1):\n        return 'Scalene'\n    else:\n        return 'Isosceles'\nsd = int(input())\nt = int(input())\nfor _ in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    d3 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    if sd == 1:\n        ans = side(d1, d2, d3) + ' triangle'\n    else:\n        ans = side(d1, d2, d3) + ' ' + angle(d1, d2, d3) + ' triangle'\n    print(ans)", "def angle(d1, d2, d3):\n    arr = [d1, d2, d3]\n    arr.sort()\n    if arr[2] > arr[0] + arr[1]:\n        return 'obtuse'\n    elif arr[2] < arr[0] + arr[1]:\n        return 'acute'\n    else:\n        return 'right'\n\ndef side(d1, d2, d3):\n    arr = [d1, d2, d3]\n    arr.sort()\n    if d1 != d2 and d2 != d3 and (d3 != d1):\n        return 'Scalene'\n    else:\n        return 'Isosceles'\nsd = int(input())\nt = int(input())\nfor _ in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    d3 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    if sd == 1:\n        ans = side(d1, d2, d3) + ' triangle'\n    else:\n        ans = side(d1, d2, d3) + ' ' + angle(d1, d2, d3) + ' triangle'\n    print(ans)", "def angle(d1, d2, d3):\n    arr = [d1, d2, d3]\n    arr.sort()\n    if arr[2] > arr[0] + arr[1]:\n        return 'obtuse'\n    elif arr[2] < arr[0] + arr[1]:\n        return 'acute'\n    else:\n        return 'right'\n\ndef side(d1, d2, d3):\n    arr = [d1, d2, d3]\n    arr.sort()\n    if d1 != d2 and d2 != d3 and (d3 != d1):\n        return 'Scalene'\n    else:\n        return 'Isosceles'\nsd = int(input())\nt = int(input())\nfor _ in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    d3 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    if sd == 1:\n        ans = side(d1, d2, d3) + ' triangle'\n    else:\n        ans = side(d1, d2, d3) + ' ' + angle(d1, d2, d3) + ' triangle'\n    print(ans)", "def angle(d1, d2, d3):\n    arr = [d1, d2, d3]\n    arr.sort()\n    if arr[2] > arr[0] + arr[1]:\n        return 'obtuse'\n    elif arr[2] < arr[0] + arr[1]:\n        return 'acute'\n    else:\n        return 'right'\n\ndef side(d1, d2, d3):\n    arr = [d1, d2, d3]\n    arr.sort()\n    if d1 != d2 and d2 != d3 and (d3 != d1):\n        return 'Scalene'\n    else:\n        return 'Isosceles'\nsd = int(input())\nt = int(input())\nfor _ in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    d3 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    if sd == 1:\n        ans = side(d1, d2, d3) + ' triangle'\n    else:\n        ans = side(d1, d2, d3) + ' ' + angle(d1, d2, d3) + ' triangle'\n    print(ans)", "def angle(d1, d2, d3):\n    arr = [d1, d2, d3]\n    arr.sort()\n    if arr[2] > arr[0] + arr[1]:\n        return 'obtuse'\n    elif arr[2] < arr[0] + arr[1]:\n        return 'acute'\n    else:\n        return 'right'\n\ndef side(d1, d2, d3):\n    arr = [d1, d2, d3]\n    arr.sort()\n    if d1 != d2 and d2 != d3 and (d3 != d1):\n        return 'Scalene'\n    else:\n        return 'Isosceles'\nsd = int(input())\nt = int(input())\nfor _ in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    d3 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    if sd == 1:\n        ans = side(d1, d2, d3) + ' triangle'\n    else:\n        ans = side(d1, d2, d3) + ' ' + angle(d1, d2, d3) + ' triangle'\n    print(ans)", "def angle(d1, d2, d3):\n    arr = [d1, d2, d3]\n    arr.sort()\n    if arr[2] > arr[0] + arr[1]:\n        return 'obtuse'\n    elif arr[2] < arr[0] + arr[1]:\n        return 'acute'\n    else:\n        return 'right'\n\ndef side(d1, d2, d3):\n    arr = [d1, d2, d3]\n    arr.sort()\n    if d1 != d2 and d2 != d3 and (d3 != d1):\n        return 'Scalene'\n    else:\n        return 'Isosceles'\nsd = int(input())\nt = int(input())\nfor _ in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    d3 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    if sd == 1:\n        ans = side(d1, d2, d3) + ' triangle'\n    else:\n        ans = side(d1, d2, d3) + ' ' + angle(d1, d2, d3) + ' triangle'\n    print(ans)", "def angle(d1, d2, d3):\n    arr = [d1, d2, d3]\n    arr.sort()\n    if arr[2] > arr[0] + arr[1]:\n        return 'obtuse'\n    elif arr[2] < arr[0] + arr[1]:\n        return 'acute'\n    else:\n        return 'right'\n\ndef side(d1, d2, d3):\n    arr = [d1, d2, d3]\n    arr.sort()\n    if d1 != d2 and d2 != d3 and (d3 != d1):\n        return 'Scalene'\n    else:\n        return 'Isosceles'\nsd = int(input())\nt = int(input())\nfor _ in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    d3 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    if sd == 1:\n        ans = side(d1, d2, d3) + ' triangle'\n    else:\n        ans = side(d1, d2, d3) + ' ' + angle(d1, d2, d3) + ' triangle'\n    print(ans)", "def angle(d1, d2, d3):\n    arr = [d1, d2, d3]\n    arr.sort()\n    if arr[2] > arr[0] + arr[1]:\n        return 'obtuse'\n    elif arr[2] < arr[0] + arr[1]:\n        return 'acute'\n    else:\n        return 'right'\n\ndef side(d1, d2, d3):\n    arr = [d1, d2, d3]\n    arr.sort()\n    if d1 != d2 and d2 != d3 and (d3 != d1):\n        return 'Scalene'\n    else:\n        return 'Isosceles'\nsd = int(input())\nt = int(input())\nfor _ in range(t):\n    (x1, y1, x2, y2, x3, y3) = map(int, input().split())\n    d1 = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    d2 = (x1 - x3) ** 2 + (y1 - y3) ** 2\n    d3 = (x2 - x3) ** 2 + (y2 - y3) ** 2\n    if sd == 1:\n        ans = side(d1, d2, d3) + ' triangle'\n    else:\n        ans = side(d1, d2, d3) + ' ' + angle(d1, d2, d3) + ' triangle'\n    print(ans)", "import math\nSUBTASK_ID = int(input())\nI = int(input())\n\nclass operations:\n\n    def __init__(self, list):\n        self.seg1 = ((list[0] - list[2]) ** 2 + (list[1] - list[3]) ** 2) ** 0.5\n        self.seg2 = ((list[2] - list[4]) ** 2 + (list[3] - list[5]) ** 2) ** 0.5\n        self.seg3 = ((list[0] - list[4]) ** 2 + (list[1] - list[5]) ** 2) ** 0.5\n\n    def segments(self):\n        if self.seg1 == self.seg2 or self.seg2 == self.seg3 or self.seg1 == self.seg3:\n            rst = 'Isosceles'\n        else:\n            rst = 'Scalene'\n        return rst\n\n    def angles(self):\n        angels3 = int(math.acos((self.seg1 ** 2 + self.seg2 ** 2 - self.seg3 ** 2) / (2 * self.seg1 * self.seg2)) * 57.2958)\n        angels2 = int(math.acos((self.seg1 ** 2 + self.seg3 ** 2 - self.seg2 ** 2) / (2 * self.seg1 * self.seg3)) * 57.2958)\n        angels1 = int(math.acos((self.seg2 ** 2 + self.seg3 ** 2 - self.seg1 ** 2) / (2 * self.seg2 * self.seg3)) * 57.2958)\n        return (angels1, angels2, angels3)\nfor _ in range(I):\n    Points = list(map(int, input().split()))\n    op = operations(Points)\n    if SUBTASK_ID == 1:\n        print(str(op.segments()) + ' triangle')\n    elif SUBTASK_ID == 2:\n        (a1, a2, a3) = op.angles()\n        if abs(a1) < 90 and abs(a2) < 90 and (abs(a3) < 90):\n            print(str(op.segments()) + ' acute ' + 'triangle')\n        elif abs(a1) == 90 or abs(a2) == 90 or abs(a3) == 90:\n            print(str(op.segments()) + ' right ' + 'triangle')\n        elif abs(a1) > 90 or abs(a2) > 90 or abs(a3) > 90:\n            print(str(op.segments()) + ' obtuse ' + 'triangle')", "import math\nSUBTASK_ID = int(input())\nI = int(input())\n\nclass operations:\n\n    def __init__(self, list):\n        self.seg1 = ((list[0] - list[2]) ** 2 + (list[1] - list[3]) ** 2) ** 0.5\n        self.seg2 = ((list[2] - list[4]) ** 2 + (list[3] - list[5]) ** 2) ** 0.5\n        self.seg3 = ((list[0] - list[4]) ** 2 + (list[1] - list[5]) ** 2) ** 0.5\n\n    def segments(self):\n        if self.seg1 == self.seg2 or self.seg2 == self.seg3 or self.seg1 == self.seg3:\n            rst = 'Isosceles'\n        else:\n            rst = 'Scalene'\n        return rst\n\n    def angles(self):\n        angels3 = int(math.acos((self.seg1 ** 2 + self.seg2 ** 2 - self.seg3 ** 2) / (2 * self.seg1 * self.seg2)) * 57.2958)\n        angels2 = int(math.acos((self.seg1 ** 2 + self.seg3 ** 2 - self.seg2 ** 2) / (2 * self.seg1 * self.seg3)) * 57.2958)\n        angels1 = int(math.acos((self.seg2 ** 2 + self.seg3 ** 2 - self.seg1 ** 2) / (2 * self.seg2 * self.seg3)) * 57.2958)\n        return (angels1, angels2, angels3)\nfor _ in range(I):\n    Points = list(map(int, input().split()))\n    op = operations(Points)\n    if SUBTASK_ID == 1:\n        print(str(op.segments()) + ' triangle')\n    elif SUBTASK_ID == 2:\n        (a1, a2, a3) = op.angles()\n        if abs(a1) < 90 and abs(a2) < 90 and (abs(a3) < 90):\n            print(str(op.segments()) + ' acute ' + 'triangle')\n        elif abs(a1) == 90 or abs(a2) == 90 or abs(a3) == 90:\n            print(str(op.segments()) + ' right ' + 'triangle')\n        elif abs(a1) > 90 or abs(a2) > 90 or abs(a3) > 90:\n            print(str(op.segments()) + ' obtuse ' + 'triangle')", "idsub = int(input())\nimport math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\ndef side(x1, y1, x2, y2, x3, y3):\n    a = dist(x1, y1, x2, y2)\n    b = dist(x2, y2, x3, y3)\n    c = dist(x1, y1, x3, y3)\n    if a == b or b == c or c == a:\n        return 'Isosceles'\n    else:\n        return 'Scalene'\n\ndef vectorize(x1, y1, x2, y2):\n    return [x2 - x1, y2 - y1]\n\ndef angle(x1, y1, x2, y2, x3, y3):\n    a = vectorize(x2, y2, x1, y1)\n    b = vectorize(x2, y2, x3, y3)\n    return a[0] * b[0] + a[1] * b[1]\n\ndef angclass(x1, y1, x2, y2, x3, y3):\n    if angle(x1, y1, x2, y2, x3, y3) == 0 or angle(x2, y2, x3, y3, x1, y1) == 0 or angle(x3, y3, x1, y1, x2, y2) == 0:\n        return 'right'\n    elif angle(x1, y1, x2, y2, x3, y3) < 0 or angle(x2, y2, x3, y3, x1, y1) < 0 or angle(x3, y3, x1, y1, x2, y2) < 0:\n        return 'obtuse'\n    else:\n        return 'acute'\nfor i in range(int(input())):\n    (x1, y1, x2, y2, x3, y3) = [int(i) for i in input().split()]\n    if idsub == 1:\n        s = side(x1, y1, x2, y2, x3, y3)\n        print(s, 'triangle')\n    else:\n        print(side(x1, y1, x2, y2, x3, y3), angclass(x1, y1, x2, y2, x3, y3), 'triangle')", "import math\n\ndef subtask1(inputs):\n    ans = []\n    for i in range(inputs):\n        coordinates = input()\n        coordinates = coordinates.split(' ')\n        A = (int(coordinates[0]), int(coordinates[1]))\n        B = (int(coordinates[2]), int(coordinates[3]))\n        C = (int(coordinates[4]), int(coordinates[5]))\n        AB = math.sqrt((B[0] - A[0]) ** 2 + (B[1] - A[1]) ** 2)\n        BC = math.sqrt((B[0] - C[0]) ** 2 + (B[1] - C[1]) ** 2)\n        AC = math.sqrt((C[0] - A[0]) ** 2 + (C[1] - A[1]) ** 2)\n        if AB == BC or BC == AC or AC == AB:\n            ans.append('Isosceles triangle')\n        else:\n            ans.append('Scalene triangle')\n    for triangle in ans:\n        print(triangle)\n\ndef subtask2(inputs):\n    ans = []\n    for i in range(inputs):\n        coordinates = input()\n        coordinates = coordinates.split(' ')\n        A = (int(coordinates[0]), int(coordinates[1]))\n        B = (int(coordinates[2]), int(coordinates[3]))\n        C = (int(coordinates[4]), int(coordinates[5]))\n        AB = math.sqrt((B[0] - A[0]) ** 2 + (B[1] - A[1]) ** 2)\n        BC = math.sqrt((B[0] - C[0]) ** 2 + (B[1] - C[1]) ** 2)\n        AC = math.sqrt((C[0] - A[0]) ** 2 + (C[1] - A[1]) ** 2)\n        str = ''\n        if AB == BC or BC == AC or AC == AB:\n            str += 'Isosceles '\n        else:\n            str += 'Scalene '\n        str += pythagoras(AB, BC, AC)\n        str += ' triangle'\n        ans.append(str)\n    for triangle in ans:\n        print(triangle)\n\ndef pythagoras(a, b, c):\n    A = a ** 2\n    B = b ** 2\n    C = c ** 2\n    if equality(A, B + C) or equality(B, A + C) or equality(C, A + B):\n        return 'right'\n    elif A > B + C or B > A + C or C > B + A:\n        return 'obtuse'\n    return 'acute'\n\ndef equality(a, b):\n    if math.fabs(a - b) < 10 ** (-6):\n        return True\n    return False\nsubtask_id = int(input())\nif subtask_id == 1:\n    subtask1(int(input()))\nelse:\n    subtask2(int(input()))"]