["from fractions import Fraction\n\ndef gd(a, b):\n    if b == 0:\n        return a\n    return gd(b, a % b)\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    dn = n * m\n    nn = dn // 2\n    g = gd(dn, nn)\n    dn = dn // g\n    nn = nn // g\n    if nn == 0:\n        print('0' + '/' + str(dn))\n    else:\n        print(Fraction(nn, dn))\n    t -= 1", "from fractions import Fraction\n\ndef gd(a, b):\n    if b == 0:\n        return a\n    return gd(b, a % b)\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    dn = n * m\n    nn = dn // 2\n    g = gd(dn, nn)\n    dn = dn // g\n    nn = nn // g\n    if nn == 0:\n        print('0' + '/' + str(dn))\n    else:\n        print(Fraction(nn, dn))\n    t -= 1", "from fractions import Fraction\n\ndef gd(a, b):\n    if b == 0:\n        return a\n    return gd(b, a % b)\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    dn = n * m\n    nn = dn // 2\n    g = gd(dn, nn)\n    dn = dn // g\n    nn = nn // g\n    if nn == 0:\n        print('0' + '/' + str(dn))\n    else:\n        print(Fraction(nn, dn))\n    t -= 1", "t = int(input())\nfor i in range(t):\n    (n, m) = list(map(int, input().split()))\n    c = n * m\n    if c % 2 == 0:\n        print('1/2')\n    else:\n        print(str(c // 2) + '/' + str(c))", "import math\ncases = int(input())\nfor i in range(cases):\n    (m, n) = [int(x) for x in input().split()]\n    a = (m + 1) // 2\n    b = (n + 1) // 2\n    odd = a * (n - b) + (m - a) * b\n    gcdiv = math.gcd(m * n, odd)\n    print(f'{odd // gcdiv}/{m * n // gcdiv}')", "t = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    if n == 1 and m == 1:\n        print('{}/{}'.format(0, 1))\n        t = t - 1\n        continue\n    if n % 2 == 0 or m % 2 == 0:\n        print('{}/{}'.format(1, 2))\n    else:\n        print('{}/{}'.format(n * m // 2, n * m))\n    t = t - 1", "t = int(input())\nfor i in range(t):\n    (x, y) = map(int, input().split())\n    p = x * y\n    if p % 2 == 0:\n        print('1/2')\n    else:\n        print(str(p // 2) + '/' + str(p))", "from fractions import Fraction\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    ev1 = a // 2\n    odd1 = a - ev1\n    ev2 = b // 2\n    odd2 = b - ev2\n    res = odd1 * ev2 + ev1 * odd2\n    if res != 0:\n        print(Fraction(res, a * b))\n    else:\n        print('0/{}'.format(a * b))", "n = int(input())\nfor _ in range(n):\n    (alice, bob) = list(map(int, input().split()))\n    total_ways = alice * bob\n    if total_ways % 2 == 0:\n        print('1/2')\n    else:\n        print(str(total_ways // 2) + '/' + str(total_ways))", "for i in range(int(input())):\n    (alice, bob) = map(int, input().split())\n    if alice * bob % 2 == 0:\n        print('1/2')\n    else:\n        print(str(alice * bob // 2) + '/' + str(alice * bob))", "from fractions import Fraction\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    den = n * m\n    num = den // 2\n    g = gcd(den, num)\n    den = den // g\n    num = num // g\n    if num == 0:\n        print('0' + '/' + str(den))\n    else:\n        print(Fraction(num, den))\n    t -= 1", "t = int(input())\nimport math\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    (even1, even2) = (n // 2, m // 2)\n    (odd1, odd2) = (n - even1, m - even2)\n    p = (even1 * odd2 + odd1 * even2) // math.gcd(even1 * odd2 + odd1 * even2, m * n)\n    print(f'{p}/{m * n // math.gcd(even1 * odd2 + odd1 * even2, m * n)}')", "times = int(input())\nfor _ in range(times):\n    (alice, bob) = list(map(int, input().split()))\n    total_ways = alice * bob\n    if total_ways % 2 == 0:\n        print('1/2')\n    else:\n        print(str(total_ways // 2) + '/' + str(total_ways))", "from math import gcd\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    (ea, eb) = (a // 2, b // 2)\n    (oa, ob) = (a - ea, b - eb)\n    g = ea * ob + oa * eb\n    t = a * b\n    if g:\n        d = gcd(g, t)\n        print(f'{g // d}/{t // d}')\n    else:\n        print('0/1')", "from fractions import Fraction\n\ndef gd(a, b):\n    if b == 0:\n        return a\n    return gd(b, a % b)\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    dn = n * m\n    nn = dn // 2\n    g = gd(dn, nn)\n    dn = dn // g\n    nn = nn // g\n    if nn == 0:\n        print('0' + '/' + str(dn))\n    else:\n        print(Fraction(nn, dn))\n    t -= 1", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    if a * b % 2 != 0:\n        print(f'{a * b // 2}/{a * b}')\n    else:\n        print('1/2')", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    if a * b % 2 != 0:\n        print(f'{a * b // 2}/{a * b}')\n    else:\n        print('1/2')", "for _ in range(int(input())):\n    (a, b) = [int(x) for x in input().split()]\n    total = a * b\n    if total % 2 == 0:\n        print('1/2')\n    else:\n        print(str(total // 2) + '/' + str(total))", "from fractions import Fraction\nfor i in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    if n % 2 == 0 and m % 2 == 0:\n        print('1/2')\n    elif n == 1 and m == 1:\n        print('0/1')\n    elif n % 2 != 0 and m % 2 != 0:\n        if n > m:\n            maxi = n\n            mini = m\n        else:\n            maxi = m\n            mini = n\n        k = maxi // 2\n        l = mini // 2\n        s = (k + 1) * l + k * (mini - l)\n        print(f'{s}/{n * m}')\n    else:\n        if n > m:\n            maxi = n\n            mini = m\n        else:\n            maxi = m\n            mini = n\n        if mini % 2 != 0 and maxi % 2 == 0:\n            s = mini * (maxi // 2) / (n * m)\n            print(Fraction(s))\n        else:\n            k = maxi // 2\n            l = mini // 2\n            s = ((k + 1) * l + k * (mini - l)) / (n * m)\n            print(Fraction(s))", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = n * m\n    if s % 2 == 0:\n        print('1/2')\n    else:\n        print(str(s // 2) + '/' + str(m * n))", "for tc in range(int(input())):\n    (a, b) = map(int, input().split())\n    if a % 2 == 1 and b % 2 == 1:\n        (am, an) = (a // 2 + 1, a // 2)\n        (bm, bn) = (b // 2 + 1, b // 2)\n        num = am * bn + bm * an\n        den = a * b\n        print(str(num) + '/' + str(den))\n    else:\n        print('1/2')", "from fractions import Fraction\n\ndef quantity(num):\n    if num % 2 == 1:\n        countodd = (num + 1) // 2\n        counteve = (num - 1) // 2\n    elif num % 2 == 0:\n        countodd = num // 2\n        counteve = num // 2\n    return (counteve, countodd)\n\ndef gcd1(m, n):\n    if m < n:\n        (m, n) = (n, m)\n    if m % n == 0:\n        return n\n    else:\n        return gcd1(n, m % n)\nfor t in range(int(input())):\n    (N, M) = map(int, input().split())\n    (oddN, evenN) = quantity(N)\n    (oddM, evenM) = quantity(M)\n    total_sample = (oddN + evenN) * (oddM + evenM)\n    alice = oddN * evenM + oddM * evenN\n    if alice == 0:\n        print('0/' + str(total_sample))\n    else:\n        print(Fraction(alice, total_sample))", "T = int(input())\nfor i in range(0, T):\n    (N, M) = map(int, input().split())\n    total = N * M\n    if total % 2 == 0:\n        print('1/2')\n    else:\n        print(str(total // 2) + '/' + str(total))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = n * m\n    print('1/2' if p % 2 == 0 else str(p // 2) + '/' + str(p))", "from fractions import Fraction\n\ndef f(a, b):\n    if b == 0:\n        return a\n    return f(b, a % b)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = n * m\n    t = f(p, p // 2)\n    print('0/' + str(p // t) if p // (2 * t) == 0 else Fraction(p // (2 * t), p // t))", "import math\nfrom fractions import Fraction\nt = int(input())\nwhile t:\n    (n, m) = map(int, input().split(' '))\n    if n == 1 and m == 1:\n        print('0/1')\n    else:\n        p = math.ceil(n / 2)\n        q = math.ceil(m / 2)\n        r = math.floor(n / 2)\n        s = math.floor(m / 2)\n        print(Fraction(p * s + q * r, n * m))\n    t = t - 1", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    total = n * m\n    if total % 2 == 0:\n        print('1/2')\n    else:\n        print(str(total // 2) + '/' + str(total))", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    d = a * b\n    if d % 2 == 0:\n        print('1/2')\n    else:\n        print(f'{d // 2}/{d}')", "import math\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    if a % 2 == 0:\n        ae = ao = a // 2\n    else:\n        ae = ao = a // 2\n        ao += 1\n    if b % 2 == 0:\n        be = bo = b // 2\n    else:\n        be = bo = b // 2\n        bo += 1\n    pr = a * b\n    pl = bo * ae + be * ao\n    t = math.gcd(pl, pr)\n    print(f'{pl // t}/{pr // t}')", "from math import gcd\n\ndef solve():\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        parity_odd = n // 2 * ((m + 1) // 2) + (n + 1) // 2 * (m // 2)\n        simplifier = gcd(parity_odd, n * m)\n        (numerator, denominator) = (parity_odd // simplifier, n * m // simplifier)\n        print('{}/{}'.format(numerator, denominator))\nsolve()", "from fractions import Fraction\n\ndef gd(a, b):\n    if b == 0:\n        return a\n    return gd(b, a % b)\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    dn = n * m\n    nn = dn // 2\n    g = gd(dn, nn)\n    dn = dn // g\n    nn = nn // g\n    if nn == 0:\n        print('0' + '/' + str(dn))\n    else:\n        print(Fraction(nn, dn))\n    t -= 1", "for _ in range(int(input())):\n    from math import gcd\n    (n, m) = map(int, input().split())\n    e1 = n // 2\n    o1 = n - e1\n    e2 = m // 2\n    o2 = m - e2\n    total = n * m\n    pos_cases = e1 * o2 + o1 * e2\n    g = gcd(pos_cases, total)\n    if g == 1:\n        print(f'{pos_cases}/{total}')\n    else:\n        print(f'{pos_cases // g}/{total // g}')", "for _ in range(int(input())):\n    from math import gcd\n    (n, m) = map(int, input().split())\n    e1 = n // 2\n    o1 = n - e1\n    e2 = m // 2\n    o2 = m - e2\n    total = n * m\n    pos_cases = e1 * o2 + o1 * e2\n    g = gcd(pos_cases, total)\n    if g == 1:\n        print(f'{pos_cases}/{total}')\n    else:\n        print(f'{pos_cases // g}/{total // g}')", "import math\nt = int(input())\nfor t in range(t):\n    (n, m) = [int(i) for i in input().split()]\n    if n % 2 == 0:\n        n_even = n // 2\n        n_odd = n // 2\n    else:\n        n_even = n // 2\n        n_odd = n_even + 1\n    if m % 2 == 0:\n        m_even = m // 2\n        m_odd = m // 2\n    else:\n        m_even = m // 2\n        m_odd = m_even + 1\n    sum_odd = n_even * m_odd + n_odd * m_even\n    dn = n * m\n    j = math.gcd(dn, sum_odd)\n    print(f'{sum_odd // j}/{dn // j}')", "from fractions import Fraction\n\ndef gd(a, b):\n    if b == 0:\n        return a\n    return gd(b, a % b)\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    dn = n * m\n    nn = dn // 2\n    g = gd(dn, nn)\n    dn = dn // g\n    nn = nn // g\n    if nn == 0:\n        print('0' + '/' + str(dn))\n    else:\n        print(Fraction(nn, dn))", "from fractions import Fraction\n\ndef gd(a, b):\n    if b == 0:\n        return a\n    return gd(b, a % b)\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    dn = n * m\n    nn = dn // 2\n    g = gd(dn, nn)\n    dn = dn // g\n    nn = nn // g\n    if nn == 0:\n        print('0' + '/' + str(dn))\n    else:\n        print(Fraction(nn, dn))\n    t -= 1", "from math import gcd\n\ndef evenodds(n):\n    if n % 2 == 0:\n        return [n // 2, n // 2]\n    else:\n        return [n // 2, n // 2 + 1]\n\ndef reduceFraction(x, y):\n    d = gcd(x, y)\n    x = x // d\n    y = y // d\n    return [x, y]\nt = int(input())\nfor _ in range(t):\n    (m, n) = tuple(map(int, input().split()))\n    l1 = evenodds(m)\n    l2 = evenodds(n)\n    nume = l1[0] * l2[1] + l1[1] * l2[0]\n    deno = m * n\n    ans = reduceFraction(nume, deno)\n    print(str(ans[0]) + '/' + str(ans[1]))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    y = n * m\n    if n % 2 == 0 and m % 2 == 0:\n        x = 1\n        y = 2\n    elif n % 2 and m % 2 == 0:\n        x = (n // 2 + 1) * (m // 2) + n // 2 * (m // 2)\n    elif n % 2 == 0 and m % 2:\n        x = n // 2 * (m // 2 + 1) + n // 2 * (m // 2)\n    else:\n        x = (n // 2 + 1) * (m // 2) + n // 2 * (m // 2 + 1)\n    g = gcd(x, y)\n    x //= g\n    y //= g\n    print(x, y, sep='/')", "import math\nfor _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    em = math.ceil(m // 2)\n    om = m - em\n    en = math.ceil(n // 2)\n    on = n - en\n    total = m * n\n    req = om * en + em * on\n    g = math.gcd(total, req)\n    print(str(req // g) + '/' + str(total // g))", "import math\nfor _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    em = math.ceil(m // 2)\n    om = m - em\n    en = math.ceil(n // 2)\n    on = n - en\n    total = m * n\n    req = om * en + em * on\n    g = math.gcd(total, req)\n    print(str(req // g) + '/' + str(total // g))", "from math import gcd\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    odds_1 = n // 2 + n % 2\n    evens_1 = n // 2\n    odds_2 = m // 2 + m % 2\n    evens_2 = m // 2\n    s = odds_1 * evens_2 + odds_2 * evens_1\n    p = n * m\n    g = gcd(s, p)\n    print(f'{s // g}/{n * m // g}')", "def gcd(x, y):\n    if y == 0:\n        return x\n    return gcd(y, x % y)\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().strip().split())\n    x = n * m\n    y = n * m // 2\n    z = gcd(x, y)\n    print('{}/{}'.format(y // z, x // z))\n    t -= 1", "from fractions import Fraction\n\ndef gd(a, b):\n    if b == 0:\n        return a\n    return gd(b, a % b)\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    dn = n * m\n    nn = dn // 2\n    g = gd(dn, nn)\n    dn = dn // g\n    nn = nn // g\n    if nn == 0:\n        print('0' + '/' + str(dn))\n    else:\n        print(Fraction(nn, dn))\n    t -= 1", "from math import sqrt, ceil, floor, gcd, log2\nimport sys\nfrom sys import stdin, stdout\nfrom collections import Counter, defaultdict, OrderedDict, deque\nfrom itertools import combinations, groupby\nfrom time import time\nfrom heapq import heappop, heappush, heapify\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    if n % 2 and m % 2:\n        ans = (n * m - 1) // 2\n        ans = str(ans)\n        print(ans + '/' + str(n * m))\n    else:\n        print(str('1') + '/' + str('2'))", "t = int(input())\nfor i in range(t):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    e1 = n // 2\n    o1 = e1 + n % 2\n    e2 = m // 2\n    o2 = e2 + m % 2\n    nu = e1 * o2 + e2 * o1\n    de = n * m\n    if n % 2 == 0 or m % 2 == 0:\n        nu = 1\n        de = 2\n    s = ''\n    s += str(nu) + '/' + str(de)\n    print(s)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = n * m\n    if p % 2 == 0:\n        print('1/2')\n    else:\n        print(f'{p // 2}/{p}')", "from math import gcd\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    (even_n, odd_n) = (n // 2, n - n // 2)\n    (even_m, odd_m) = (m // 2, m - m // 2)\n    num = even_m * odd_n + even_n * odd_m\n    den = n * m\n    g = gcd(num, den)\n    print(num // g, '/', den // g, sep='')", "def hcfnaive(a, b):\n    if b == 0:\n        return abs(a)\n    else:\n        return hcfnaive(b, a % b)\nt = int(input())\nfor i in range(t):\n    l = list(map(int, input().split()))\n    (k1, k2) = (0, 0)\n    if l[0] % 2 == 1:\n        k1 = 1\n    if l[1] % 2 == 1:\n        k2 = 1\n    c = l[0] // 2 * (l[1] // 2 + k2) + (l[0] // 2 + k1) * (l[1] // 2)\n    if l[0] == 1 and l[1] == 1:\n        c = 0\n    k = l[0] * l[1]\n    if c != 0:\n        p = hcfnaive(k, c)\n        k = k // p\n        c = c // p\n    s = str(c) + '/' + str(k)\n    print(s)", "from fractions import Fraction\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    (x1, y1, x2, y2) = (0, 0, 0, 0)\n    if n % 2 == 0:\n        x1 = n // 2\n        y1 = n // 2\n    else:\n        x1 = (n - 1) // 2\n        y1 = (n - 1) // 2 + 1\n    if m % 2 == 0:\n        x2 = m // 2\n        y2 = m // 2\n    else:\n        x2 = (m - 1) // 2\n        y2 = (m - 1) // 2 + 1\n    odd = 0\n    even = 0\n    even = x2 * x1 + y1 * y2\n    odd = x2 * y1 + y2 * x1\n    frac = Fraction(odd, odd + even)\n    print('{0}/{1}'.format(frac.numerator, frac.denominator))", "from fractions import Fraction\n\ndef gd(a, b):\n    if b == 0:\n        return a\n    return gd(b, a % b)\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    dn = n * m\n    nn = dn // 2\n    g = gd(dn, nn)\n    dn = dn // g\n    nn = nn // g\n    if nn == 0:\n        print('0' + '/' + str(dn))\n    else:\n        print(Fraction(nn, dn))\n    t -= 1", "for _ in range(int(input())):\n    (a, b) = list(map(int, input().split()))\n    t = a * b\n    if t % 2 == 0:\n        print('1/2')\n    else:\n        print(str(t // 2) + '/' + str(t))", "from fractions import Fraction\n\ndef gd(a, b):\n    if b == 0:\n        return a\n    return gd(b, a % b)\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    dn = n * m\n    nn = dn // 2\n    g = gd(dn, nn)\n    dn = dn // g\n    nn = nn // g\n    if nn == 0:\n        print('0' + '/' + str(dn))\n    else:\n        print(Fraction(nn, dn))\n    t -= 1", "import math\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    ao = 0\n    ae = 0\n    if a % 2 == 0:\n        ae = ao = a // 2\n    else:\n        ae = ao = a // 2\n        ao += 1\n    if b % 2 == 0:\n        be = bo = b // 2\n    else:\n        be = bo = b // 2\n        bo += 1\n    pr = a * b\n    pl = bo * ae\n    pl += be * ao\n    t = math.gcd(pl, pr)\n    print(f'{pl // t}/{pr // t}')", "def cmmdc(a, b):\n    if a == 0 or b == 0:\n        return 1\n    while a != 0:\n        r = b % a\n        b = a\n        a = r\n    return b\nT = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    even = n // 2 * (m // 2) + (n - n // 2) * (m - m // 2)\n    odd = n * m - even\n    total = n * m\n    r = cmmdc(total, odd)\n    total //= r\n    odd //= r\n    print(str(odd) + '/' + str(total))", "from fractions import Fraction\n\ndef hcf(x, y):\n    a = min(x, y)\n    hcf = 0\n    for i in range(1, a + 1):\n        if x % i == 0 and y % i == 0:\n            hcf = i\n            return hcf\nT = int(input())\nfor i in range(T):\n    (N, M) = map(int, input().split())\n    if N == 1 and M == 1:\n        print('0/1')\n    else:\n        Total = N * M\n        Odd = Total // 2\n        fac = hcf(Total, Odd)\n        Total = Total // fac\n        Odd = Odd // fac\n        print(Fraction(Odd, Total))", "from fractions import Fraction\n\ndef hcf(x, y):\n    a = min(x, y)\n    hcf = 0\n    for i in range(1, a + 1):\n        if x % i == 0 and y % i == 0:\n            hcf = i\n            return hcf\n    return x\nT = int(input())\nfor i in range(T):\n    (N, M) = map(int, input().split())\n    if N == 1 and M == 1:\n        print('0/1')\n    else:\n        Total = N * M\n        Odd = Total // 2\n        fac = hcf(Total, Odd)\n        Total = Total // fac\n        Odd = Odd // fac\n        print(Fraction(Odd, Total))", "T = int(input())\nfor I in range(T):\n    x = 1\n    y = 1\n    (n, m) = map(int, input().split())\n    if n == 1 and m == 1:\n        x = 0\n        y = 1\n    elif n % 2 == 0 or m % 2 == 0:\n        x = 1\n        y = 2\n    else:\n        x = int(n * m // 2)\n        y = int(n * m)\n    print(f'{x}/{y}')", "times = int(input())\nfor _ in range(times):\n    (alice, bob) = list(map(int, input().split()))\n    total_ways = alice * bob\n    if total_ways % 2 == 0:\n        print('1/2')\n    else:\n        print(str(total_ways // 2) + '/' + str(total_ways))", "times = int(input())\nfor _ in range(times):\n    (alice, bob) = list(map(int, input().split()))\n    total_ways = alice * bob\n    if total_ways % 2 == 0:\n        print('1/2')\n    else:\n        print(str(total_ways // 2) + '/' + str(total_ways))", "from math import gcd\nfor _ in range(int(input())):\n    NM = input().split()\n    N = int(NM[0])\n    M = int(NM[1])\n    a = int((N + 1) // 2 * (M // 2))\n    a += int((M + 1) // 2 * (N // 2))\n    b = N * M\n    if a != 0:\n        c = gcd(a, b)\n        a = a // c\n        b = b // c\n    print(a, '/', b, sep='')", "import math\n\ndef getodd(n):\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return (n + 1) // 2\n\ndef getgcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nT = int(input())\nfor i in range(T):\n    inp = [int(i) for i in input().split(' ')]\n    xodd = getodd(inp[0])\n    yodd = getodd(inp[1])\n    if inp[0] == inp[1] and (inp[1] == 1 or inp[1] == 0):\n        print('0/1')\n    else:\n        topval = xodd * (inp[1] - yodd) + (inp[0] - xodd) * yodd\n        botom = inp[0] * inp[1]\n        gcd = math.gcd(topval, botom)\n        topval = topval // gcd\n        botom = botom // gcd\n        print(topval, '/', botom, sep='')", "t = int(input())\nfor x in range(t):\n    a = [int(c) for c in input().split()]\n    total_ways = a[0] * a[1]\n    if total_ways % 2 == 0:\n        print('1/2')\n    else:\n        print(f'{total_ways // 2}/{total_ways}')", "for I in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = n * m\n    if a == '1':\n        print('0/1')\n    elif a % 2 == 0:\n        print('1/2')\n    else:\n        print('{}/{}'.format(a // 2, a))", "t = int(input())\nwhile t:\n    t -= 1\n    (a, b) = map(int, input().split())\n    k = a * b\n    if k == 1:\n        print('0/1')\n    elif k % 2 == 0:\n        print('1/2')\n    else:\n        print('{}/{}'.format(k // 2, k))", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    k = n * m\n    if k == 1:\n        print('0/1')\n    elif k % 2 == 0:\n        print('1/2')\n    else:\n        print('{}/{}'.format(k // 2, k))", "from fractions import Fraction\nimport math\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    tnpoc = n * m\n    poc = tnpoc // 2\n    gcd = math.gcd(tnpoc, poc)\n    tnpoc //= gcd\n    poc //= gcd\n    if poc == 0:\n        print('0' + '/' + str(tnpoc))\n    else:\n        print(Fraction(poc, tnpoc))", "import math\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    ao = 0\n    ae = 0\n    if a % 2 == 0:\n        ae = ao = a // 2\n    else:\n        ae = ao = a // 2\n        ao += 1\n    if b % 2 == 0:\n        be = bo = b // 2\n    else:\n        be = bo = b // 2\n        bo += 1\n    pr = a * b\n    pl = bo * ae\n    pl += be * ao\n    t = math.gcd(pl, pr)\n    print(f'{pl // t}/{pr // t}')", "from fractions import Fraction\nimport math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    den = n * m\n    num = den // 2\n    gcd = math.gcd(den, num)\n    den = den // gcd\n    num = num // gcd\n    if num == 0:\n        print('0/' + str(den))\n    else:\n        print(Fraction(num, den))", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    even1 = n // 2\n    if n == 0:\n        even1 = 1\n    even2 = m // 2\n    if m == 0:\n        even2 = 1\n    odd1 = (n + 1) // 2\n    odd2 = (m + 1) // 2\n    a1 = odd1 * even2 + even1 * odd2\n    a2 = n * m\n    gcde = math.gcd(a1, a2)\n    print(a1 // gcde, '/', n * m // gcde, sep='')", "import math\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    ao = 0\n    ae = 0\n    ae = a // 2\n    ao = a - ae\n    be = b // 2\n    bo = b - be\n    pr = a * b\n    pl = bo * ae\n    pl += be * ao\n    t = math.gcd(pl, pr)\n    print(f'{pl // t}/{pr // t}')", "import math\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    ao = 0\n    ae = 0\n    if a % 2 == 0:\n        ae = ao = a // 2\n    else:\n        ae = ao = a // 2\n        ao += 1\n    if b % 2 == 0:\n        be = bo = b // 2\n    else:\n        be = bo = b // 2\n        bo += 1\n    pr = a * b\n    pl = bo * ae\n    pl += be * ao\n    t = math.gcd(pl, pr)\n    print(f'{pl // t}/{pr // t}')", "import math\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    ao = 0\n    ae = 0\n    if a % 2 == 0:\n        ae = ao = a // 2\n    else:\n        ae = ao = a // 2\n        ao += 1\n    if b % 2 == 0:\n        be = bo = b // 2\n    else:\n        be = bo = b // 2\n        bo += 1\n    pr = a * b\n    pl = bo * ae\n    pl += be * ao\n    t = math.gcd(pl, pr)\n    print(f'{pl // t}/{pr // t}')", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = a * b\n    if c % 2 == 0:\n        print('1/2')\n    else:\n        e = c // 2\n        print(f'{e}/{c}')", "import math\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    ao = 0\n    ae = 0\n    if a % 2 == 0:\n        ae = ao = a // 2\n    else:\n        ae = ao = a // 2\n        ao += 1\n    if b % 2 == 0:\n        be = bo = b // 2\n    else:\n        be = bo = b // 2\n        bo += 1\n    pr = a * b\n    pl = bo * ae\n    pl += be * ao\n    t = math.gcd(pl, pr)\n    print(f'{pl // t}/{pr // t}')", "from fractions import Fraction\n\ndef gd(a, b):\n    if b == 0:\n        return a\n    return gd(b, a % b)\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    dn = n * m\n    nn = dn // 2\n    g = gd(dn, nn)\n    dn = dn // g\n    nn = nn // g\n    if nn == 0:\n        print('0' + '/' + str(dn))\n    else:\n        print(Fraction(nn, dn))\n    t -= 1", "from fractions import Fraction\nimport math\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    even1 = 0\n    even2 = 0\n    odd1 = 0\n    odd2 = 0\n    count = 0\n    total = a * b\n    if a % 2 == 0:\n        even1 = odd1 = a // 2\n    elif a % 2 == 1:\n        even1 = a // 2\n        odd1 = even1 + 1\n    if b % 2 == 0:\n        even2 = b // 2\n        odd2 = b - even2\n    elif b % 2 == 1:\n        even2 = b // 2\n        odd2 = 1 + even2\n    count = even1 * odd2 + even2 * odd1\n    x = math.gcd(count, total)\n    print(f'{count // x}/{total // x}')", "import math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    nOdd = math.ceil(n / 2)\n    mOdd = math.ceil(m / 2)\n    nEven = n - nOdd\n    mEven = m - mOdd\n    nm = nOdd * mEven + nEven * mOdd\n    dm = n * m\n    k = gcd(nm, dm)\n    nm = nm // k\n    dm = dm // k\n    print(f'{nm}/{dm}')", "from fractions import Fraction\n\ndef no_odd_even(n):\n    odd = n // 2 + n % 2\n    return (odd, n - odd)\nt = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    (o1, e1) = no_odd_even(n)\n    (o2, e2) = no_odd_even(m)\n    f = Fraction(o1 * e2 + o2 * e1, n * m)\n    print(f if f else '0/1')", "from fractions import Fraction\n\ndef no_odd_even(n):\n    odd = n // 2 + n % 2\n    return (odd, n - odd)\nt = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    (o1, e1) = no_odd_even(n)\n    (o2, e2) = no_odd_even(m)\n    f = Fraction(o1 * e2 + o2 * e1, n * m)\n    print('0/1' if f == 0 else f)", "def gcd(a, b):\n    if a % b == 0:\n        return b\n    return gcd(b, a % b)\nfor i in range(int(input())):\n    (N, M) = map(int, input().split())\n    denominator = N * M\n    if N == 1 and M == 1:\n        print('0/1')\n    else:\n        numerator = denominator // 2\n        hcf = gcd(numerator, denominator)\n        numerator //= hcf\n        denominator //= hcf\n        a = str(numerator)\n        b = str(denominator)\n        print(a + '/' + b)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    k = n * m\n    if k % 2 == 0:\n        print('1/2')\n    else:\n        print('{}/{}'.format(k // 2, k))", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    k = n * m\n    if k == 1:\n        print('0/1')\n    elif k % 2 == 0:\n        print('1/2')\n    else:\n        print('{}/{}'.format(k // 2, k))", "from fractions import Fraction\n\ndef lcm(i, j):\n    if i > j:\n        greater = i\n    else:\n        greater = j\n    while True:\n        if greater % i == 0 and greater % j == 0:\n            lcm = greater\n            break\n        greater += 1\n    return lcm\nvojj = int(input())\nfor vishnesh in range(vojj):\n    (n, m) = map(int, input().split())\n    s = 0\n    p = 0\n    if n % 2:\n        a = n // 2 + 1\n        b = n\n    else:\n        a = n // 2\n        b = n\n    c = m // 2\n    d = m\n    pu1 = a * c\n    pd1 = b * d\n    a = n // 2\n    b = n\n    if m % 2:\n        c = m // 2 + 1\n        d = m\n    else:\n        c = m // 2\n        d = m\n    pu2 = a * c\n    pd2 = b * d\n    dwn = lcm(pd1, pd2)\n    q = pu1 * (dwn // pd1)\n    r = pu2 * (dwn // pd2)\n    m = q + r\n    if m == 0:\n        print('0/1')\n    else:\n        print(Fraction(m, dwn))", "def gcd(a, b):\n    if a % b == 0:\n        return b\n    return gcd(b, a % b)\nfor i in range(int(input())):\n    (N, M) = map(int, input().split())\n    denominator = N * M\n    if N == 1 and M == 1:\n        print('0/1')\n    else:\n        numerator = denominator // 2\n        hcf = gcd(numerator, denominator)\n        numerator //= hcf\n        denominator //= hcf\n        a = str(numerator)\n        b = str(denominator)\n        print(a + '/' + b)", "import math as m\nimport fractions as f\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    ao = m.ceil(a / 2)\n    bo = m.ceil(b / 2)\n    ae = a - ao\n    be = b - bo\n    if ao * be + bo * ae == 0:\n        print(str(ao * be + bo * ae) + '/' + str(a * b))\n    else:\n        print(f.Fraction(ao * be + bo * ae, a * b))", "T = int(input())\nfor i in range(0, T):\n    temp = input().split()\n    N = int(temp[0])\n    M = int(temp[1])\n    Aeven = 0\n    Aodd = 0\n    Beven = 0\n    Bodd = 0\n    var = 0\n    var2 = 0\n    var3 = 0\n    var4 = 0\n    if N % 2 == 0:\n        Aodd = N // 2\n        Aeven = N // 2\n    else:\n        Aodd = (N - 1) // 2 + 1\n        Aeven = (N - 1) // 2\n    if M % 2 == 0:\n        Bodd = M // 2\n        Beven = M // 2\n    else:\n        Bodd = (M - 1) // 2 + 1\n        Beven = (M - 1) // 2\n    var = Aeven * Bodd\n    var2 = Beven * Aodd\n    var3 = N * M\n    var4 = int(var2 + var)\n    if var4 == 0:\n        print('{}/{}'.format(0, 1))\n        continue\n    x = var3\n    y = var4\n    r = x % y\n    while r != 0:\n        x = y\n        y = r\n        r = x % y\n    var3 = var3 // y\n    var4 = var4 // y\n    print('{}/{}'.format(var4, var3))", "def gd(n1, n2):\n    if n2 != 0:\n        return gd(n2, n1 % n2)\n    else:\n        return n1\nfor _ in range(int(input())):\n    c = list(map(int, input().split()))\n    n_even = []\n    n_odd = []\n    for i in range(2):\n        n_even.append(c[i] // 2)\n        if c[i] % 2:\n            n_odd.append((c[i] + 1) // 2)\n        else:\n            n_odd.append(c[i] // 2)\n    num = n_even[0] * n_odd[1] + n_even[1] * n_odd[0]\n    den = c[0] * c[1]\n    d = gd(num, den)\n    print(num // d, '/', den // d, sep='')", "def gcd(n1, n2):\n    if n2 != 0:\n        return gcd(n2, n1 % n2)\n    else:\n        return n1\nfor _ in range(int(input())):\n    c = list(map(int, input().split()))\n    n_even = []\n    n_odd = []\n    for i in range(2):\n        n_even.append(c[i] // 2)\n        if c[i] % 2:\n            n_odd.append((c[i] + 1) // 2)\n        else:\n            n_odd.append(c[i] // 2)\n    num = n_even[0] * n_odd[1] + n_even[1] * n_odd[0]\n    den = c[0] * c[1]\n    d = gcd(num, den)\n    print(num // d, '/', den // d, sep='')", "from fractions import Fraction\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    dn = n * m\n    nn = dn // 2\n    g = gcd(dn, nn)\n    dn = dn // g\n    nn = nn // g\n    if nn == 0:\n        print('0' + '/' + str(dn))\n    else:\n        print(Fraction(nn, dn))\n    t -= 1", "T = int(input())\nfor i in range(0, T):\n    temp = input().split()\n    N = int(temp[0])\n    M = int(temp[1])\n    Aeven = 0\n    Aodd = 0\n    Beven = 0\n    Bodd = 0\n    var = 0\n    var2 = 0\n    var3 = 0\n    var4 = 0\n    if N % 2 == 0:\n        Aodd = N // 2\n        Aeven = N // 2\n    else:\n        Aodd = (N - 1) // 2 + 1\n        Aeven = (N - 1) // 2\n    if M % 2 == 0:\n        Bodd = M // 2\n        Beven = M // 2\n    else:\n        Bodd = (M - 1) // 2 + 1\n        Beven = (M - 1) // 2\n    var = Aeven * Bodd\n    var2 = Beven * Aodd\n    var3 = N * M\n    var4 = int(var2 + var)\n    if var4 == 0:\n        print('{}/{}'.format(0, 1))\n        continue\n    x = var3\n    y = var4\n    r = x % y\n    while r != 0:\n        x = y\n        y = r\n        r = x % y\n    var3 = var3 // y\n    var4 = var4 // y\n    print('{}/{}'.format(var4, var3))", "T = int(input())\nfor i in range(0, T):\n    temp = input().split()\n    N = int(temp[0])\n    M = int(temp[1])\n    Aeven = 0\n    Aodd = 0\n    Beven = 0\n    Bodd = 0\n    var = 0\n    var2 = 0\n    var3 = 0\n    var4 = 0\n    if N % 2 == 0:\n        Aodd = N // 2\n        Aeven = N // 2\n    else:\n        Aodd = (N - 1) // 2 + 1\n        Aeven = (N - 1) // 2\n    if M % 2 == 0:\n        Bodd = M // 2\n        Beven = M // 2\n    else:\n        Bodd = (M - 1) // 2 + 1\n        Beven = (M - 1) // 2\n    var = Aeven * Bodd\n    var2 = Beven * Aodd\n    var3 = N * M\n    var4 = int(var2 + var)\n    if var4 == 0:\n        print('{}/{}'.format(0, 1))\n        continue\n    x = var3\n    y = var4\n    r = x % y\n    while r != 0:\n        x = y\n        y = r\n        r = x % y\n    var3 = var3 // y\n    var4 = var4 // y\n    print('{}/{}'.format(var4, var3))", "num = int(input())\nwhile num:\n    o = input().partition(' ')\n    m = int(o[0])\n    n = int(o[2])\n    if m % 2 and n % 2:\n        print(str((m * n - 1) // 2) + '/' + str(m * n))\n    else:\n        print('1/2')\n    num -= 1", "v = int(input())\nfor c in range(v):\n    (k, m) = map(int, input().split(' '))\n    print('1/2' if k * m % 2 == 0 else str(k * m // 2) + '/' + str(k * m))", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    if n % 2 == 0:\n        oddn = n // 2\n        evenn = n - oddn\n    else:\n        oddn = n // 2 + 1\n        evenn = n - oddn\n    if m % 2 == 0:\n        oddm = m // 2\n        evenm = m - oddm\n    else:\n        oddm = m // 2 + 1\n        evenm = m - oddm\n    gcd = math.gcd(oddn * evenm + evenn * oddm, n * m)\n    numerator = (oddn * evenm + evenn * oddm) // gcd\n    denomenator = n * m // gcd\n    s = ''\n    s += str(numerator)\n    s += '/'\n    s += str(denomenator)\n    print(s)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split(' '))\n    print('1/2' if n * m % 2 == 0 else str(n * m // 2) + '/' + str(n * m))", "def GCD(a, b):\n    if b == 0:\n        return a\n    else:\n        return GCD(b, a % b)\nT = int(input())\nfor i in range(T):\n    (N, M) = map(int, input().split())\n    AO = N // 2 + N % 2\n    AE = N // 2\n    BO = M // 2 + M % 2\n    BE = M // 2\n    PNUM = AO * BE + AE * BO\n    PDEN = M * N\n    if M % 2 == 0 or N % 2 == 0:\n        print('1/2')\n    else:\n        gcd = GCD(PNUM, PDEN)\n        PNUM = PNUM // gcd\n        PDEN = PDEN // gcd\n        print(str(PNUM) + '/' + str(PDEN))", "def GCD(a, b):\n    if b == 0:\n        return a\n    else:\n        return GCD(b, a % b)\nT = int(input())\nfor i in range(T):\n    (N, M) = map(int, input().split())\n    AO = N // 2 + N % 2\n    AE = N // 2\n    BO = M // 2 + M % 2\n    BE = M // 2\n    PNUM = AO * BE + AE * BO\n    PDEN = M * N\n    if M % 2 == 0 or N % 2 == 0:\n        print('1/2')\n    else:\n        j = 2\n        gcd = GCD(PNUM, PDEN)\n        PNUM = PNUM // gcd\n        PDEN = PDEN // gcd\n        print(str(PNUM) + '/' + str(PDEN))", "import math\ntc = int(input())\nfor _ in range(tc):\n    (n, m) = [int(x) for x in input().split(' ')]\n    n_even = n // 2\n    n_odd = n - n_even\n    m_even = m // 2\n    m_odd = m - m_even\n    numerator = n_odd * m_even + n_even * m_odd\n    denominator = m * n\n    gcd = math.gcd(numerator, denominator)\n    numerator = numerator // gcd\n    denominator = denominator // gcd\n    print(f'{numerator}/{denominator}')"]