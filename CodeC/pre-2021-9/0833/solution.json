["(n, k) = list(map(int, input().split()))\nbk = [0] * n\nsm = [0] * n\nfor i in range(0, n):\n    bk[i] = list(map(int, input().split(' ')))\n    sm[i] = sum(bk[i])\ndp = [[0] * n for i in range(0, k)]\nfor i in range(0, k):\n    dp[i][0] = bk[0][i] / sm[0]\nfor i in range(0, k):\n    for e in range(1, n):\n        dp[i][e] = (bk[e][i] + dp[i][e - 1]) / (sm[e] + 1)\nfor i in range(0, k):\n    print(dp[i][n - 1], end=' ')", "(n, k) = list(map(int, input().split()))\nbk = [0] * n\nsm = [0] * n\nfor i in range(0, n):\n    bk[i] = list(map(int, input().split(' ')))\n    sm[i] = sum(bk[i])\ndp = [[0] * n for i in range(0, k)]\nfor i in range(0, k):\n    dp[i][0] = bk[0][i] / sm[0]\nfor i in range(0, k):\n    for e in range(1, n):\n        dp[i][e] = (bk[e][i] + dp[i][e - 1]) / (sm[e] + 1)\nfor i in range(0, k):\n    print(dp[i][n - 1], end=' ')", "(n, k) = list(map(int, input().split()))\nbk = [0] * n\nsm = [0] * n\nfor i in range(0, n):\n    bk[i] = list(map(int, input().split(' ')))\n    sm[i] = sum(bk[i])\ndp = [[0] * n for i in range(0, k)]\nfor i in range(0, k):\n    dp[i][0] = bk[0][i] / sm[0]\nfor i in range(0, k):\n    for e in range(1, n):\n        dp[i][e] = (bk[e][i] + dp[i][e - 1]) / (sm[e] + 1)\nfor i in range(0, k):\n    print(dp[i][n - 1], end=' ')", "(n, k) = list(map(int, input().split()))\nbk = [0] * n\nsm = [0] * n\nfor i in range(0, n):\n    bk[i] = list(map(int, input().split(' ')))\n    sm[i] = sum(bk[i])\ndp = [[0] * n for i in range(0, k)]\nfor i in range(0, k):\n    dp[i][0] = bk[0][i] / sm[0]\nfor i in range(0, k):\n    for e in range(1, n):\n        dp[i][e] = (bk[e][i] + dp[i][e - 1]) / (sm[e] + 1)\nfor i in range(0, k):\n    print(dp[i][n - 1], end=' ')", "(n, k) = list(map(int, input().split()))\nbk = [0] * n\nsm = [0] * n\nfor i in range(0, n):\n    bk[i] = list(map(int, input().split(' ')))\n    sm[i] = sum(bk[i])\ndp = [[0] * n for i in range(0, k)]\nfor i in range(0, k):\n    dp[i][0] = bk[0][i] / sm[0]\nfor i in range(0, k):\n    for e in range(1, n):\n        dp[i][e] = (bk[e][i] + dp[i][e - 1]) / (sm[e] + 1)\nfor i in range(0, k):\n    print(dp[i][n - 1], end=' ')", "(n, k) = list(map(int, input().split()))\nbk = [0] * n\nsm = [0] * n\nfor i in range(0, n):\n    bk[i] = list(map(int, input().split(' ')))\n    sm[i] = sum(bk[i])\ndp = [[0] * n for i in range(0, k)]\nfor i in range(0, k):\n    dp[i][0] = bk[0][i] / sm[0]\nfor i in range(0, k):\n    for e in range(1, n):\n        dp[i][e] = (bk[e][i] + dp[i][e - 1]) / (sm[e] + 1)\nfor i in range(0, k):\n    print(dp[i][n - 1], end=' ')", "(n, k) = list(map(int, input().split()))\nbk = [0] * n\nsm = [0] * n\nfor i in range(0, n):\n    bk[i] = list(map(int, input().split(' ')))\n    sm[i] = sum(bk[i])\ndp = [[0] * n for i in range(0, k)]\nfor i in range(0, k):\n    dp[i][0] = bk[0][i] / sm[0]\nfor i in range(0, k):\n    for e in range(1, n):\n        dp[i][e] = (bk[e][i] + dp[i][e - 1]) / (sm[e] + 1)\nfor i in range(0, k):\n    print(dp[i][n - 1], end=' ')", "(n, k) = list(map(int, input().split()))\nbk = [0] * n\nsm = [0] * n\nfor i in range(0, n):\n    bk[i] = list(map(int, input().split(' ')))\n    sm[i] = sum(bk[i])\ndp = [[0] * n for i in range(0, k)]\nfor i in range(0, k):\n    dp[i][0] = bk[0][i] / sm[0]\nfor i in range(0, k):\n    for e in range(1, n):\n        dp[i][e] = (bk[e][i] + dp[i][e - 1]) / (sm[e] + 1)\nfor i in range(0, k):\n    print(dp[i][n - 1], end=' ')", "(n, k) = list(map(int, input().split()))\nbk = [0] * n\nsm = [0] * n\nfor i in range(0, n):\n    bk[i] = list(map(int, input().split(' ')))\n    sm[i] = sum(bk[i])\ndp = [[0] * n for i in range(0, k)]\nfor i in range(0, k):\n    dp[i][0] = bk[0][i] / sm[0]\nfor i in range(0, k):\n    for e in range(1, n):\n        dp[i][e] = (bk[e][i] + dp[i][e - 1]) / (sm[e] + 1)\nfor i in range(0, k):\n    print(dp[i][n - 1], end=' ')", "import sys\nsys.setrecursionlimit(10 ** 6)\n\ndef p(K, N, A, total, dp):\n    if N == 0:\n        return A[N][K] / total[N]\n    elif (K, N) in dp:\n        return dp[K, N]\n    else:\n        x = p(K, N - 1, A, total, dp)\n        dp[K, N] = (A[N][K] + x) / (total[N] + 1)\n        return dp[K, N]\n(N, K) = [int(i) for i in input().split()]\nA = []\ntotal = []\nfor i in range(N):\n    x = [int(i) for i in input().split()]\n    total.append(sum(x))\n    A.append(x)\ns = ''\ndp = {}\nfor i in range(K):\n    s += str(p(i, N - 1, A, total, dp)) + ' '\nprint(s.strip())", "(n, k) = map(int, input().split())\na = []\nfor _ in range(n):\n    a.append(list(map(int, input().split())))\nfor i in range(1, n):\n    for j in range(k):\n        a[i][j] = a[i][j] + a[i - 1][j] / sum(a[i - 1])\nfor x in range(k):\n    print(a[n - 1][x] / sum(a[n - 1]), end=' ')", "def main():\n    (n, k) = tuple(map(int, input().split()))\n    a = [list(map(int, input().split())) for _ in range(n)]\n    p = [a[0][i] / sum(a[0]) for i in range(k)]\n    for i in range(1, n):\n        s = sum(a[i]) + 1\n        p = [(p[j] * (a[i][j] + 1) + (1 - p[j]) * a[i][j]) / s for j in range(k)]\n    for i in range(k):\n        print(round(p[i], 6), end=' ')\nmain()", "(n, k) = list(map(int, input().strip().split()))\na = []\nfor i in range(n):\n    b = list(map(int, input().strip().split()))\n    a.append(b)\nprob = [a[0][x] / sum(a[0]) for x in range(k)]\nfor i in range(n - 1):\n    sums = sum(a[i + 1]) + 1\n    prob = [(prob[x] * (a[i + 1][x] + 1) + (1 - prob[x]) * a[i + 1][x]) / sums for x in range(k)]\nfor i in range(k):\n    print(prob[i], end=' ')", "import sys\nimport math\n\ndef main(arr):\n    k = len(arr[0])\n    n = len(arr)\n    dp = [[0] * k for i in range(n + 1)]\n    summation_arr = []\n    for i in range(len(arr)):\n        a = 1 if i != 0 else 0\n        summation_arr.append(sum(arr[i]) + a)\n    for i in range(1, len(dp)):\n        for j in range(len(dp[0])):\n            dp[i][j] = (dp[i - 1][j] + arr[i - 1][j]) / summation_arr[i - 1]\n    ans = []\n    for i in range(k):\n        ans.append(dp[-1][i])\n    print(*ans)\n(n, k) = input().split()\nn = int(n)\narr = []\nfor i in range(n):\n    arr.append(list(map(int, input().split())))\nmain(arr)", "(n, k) = map(int, input().split())\ndp = [[0] * k for i in range(n)]\nsumr = [0] * n\nfor i in range(n):\n    dp[i] = [int(x) for x in input().split()]\nfor i in range(n):\n    sumr[i] = sum(dp[i])\nfor i in range(k):\n    for j in range(n):\n        if j == 0:\n            prev = dp[0][i] / sumr[0]\n        else:\n            curr = prev * (dp[j][i] + 1) / (sumr[j] + 1) + (1 - prev) * dp[j][i] / (sumr[j] + 1)\n            prev = curr\n    print(prev, end=' ')", "def modifyarr(n, k, l, sumi):\n    dp = [[0 for i in range(k)] for i in range(n)]\n    for j in range(k):\n        dp[0][j] = l[0][j] / sumi[0]\n    for i in range(1, n):\n        for j in range(k):\n            dp[i][j] = dp[i - 1][j] * (l[i][j] + 1) / (sumi[i] + 1) + (1 - dp[i - 1][j]) * (l[i][j] / (sumi[i] + 1))\n    for i in range(k):\n        print(dp[n - 1][i], end=' ')\n    print()\nl = input().split()\nn = int(l[0])\nk = int(l[1])\nl = []\nsumi = [0 for i in range(n)]\nfor i in range(n):\n    lo = input().split()\n    li = [int(i) for i in lo]\n    l.append(li)\n    sumi[i] = sum(li)\nmodifyarr(n, k, l, sumi)", "(n, k) = map(int, input().split())\ndp = [[0] * k for i in range(n)]\nfor i in range(n):\n    dp[i] = [int(x) for x in input().split()]\nsumr = [0] * n\nfor i in range(n):\n    sumr[i] = sum(dp[i])\nfor i in range(k):\n    for j in range(n):\n        if j == 0:\n            prev = dp[0][i] / sumr[0]\n        else:\n            curr = prev * (dp[j][i] + 1) / (sumr[j] + 1) + (1 - prev) * dp[j][i] / (sumr[j] + 1)\n            prev = curr\n    print(prev, end=' ')", "__author__ = 'Ronald Kaiser'\n__email__ = 'raios dot catodicos at gmail dot com'\n(N, K) = map(int, input().split())\na = list(map(int, input().split()))\ns = sum(a)\np = list(map(lambda v: v / s, a))\nfor _ in range(N - 1):\n    a = list(map(int, input().split()))\n    sa = sum(a) + 1\n    p = [(p[i] + a[i]) / sa for i in range(K)]\nprint(*p)", "__author__ = 'Ronald Kaiser'\n__email__ = 'raios dot catodicos at gmail dot com'\n(N, K) = map(int, input().split())\na = list(map(int, input().split()))\ns = sum(a)\np = list(map(lambda v: v / s, a))\nfor _ in range(N - 1):\n    a = list(map(int, input().split()))\n    sa = sum(a) + 1\n    p = [p[i] * (a[i] + 1) / sa + (1 - p[i]) * (a[i] / sa) for i in range(K)]\nprint(*p)", "__author__ = 'Ronald Kaiser'\n__email__ = 'raios dot catodicos at gmail dot com'\n(N, K) = map(int, input().split())\na = list(map(int, input().split()))\ns = sum(a)\np = list(map(lambda v: v / s, a))\nfor _ in range(N - 1):\n    a = list(map(int, input().split()))\n    s = []\n    sa = sum(a) + 1\n    for i in range(K):\n        s.append(p[i] * ((a[i] + 1) / sa) + (1 - p[i]) * (a[i] / sa))\n    p = s\nprint(*p)", "__author__ = 'Ronald Kaiser'\n__email__ = 'raios dot catodicos at gmail dot com'\n\ndef solve(px, y, K):\n    s = []\n    sy = sum(y)\n    for i in range(K):\n        s.append(px[i] * ((y[i] + 1) / (sy + 1)) + (1 - px[i]) * (y[i] / (sy + 1)))\n    return s\n(N, K) = map(int, input().split())\na = list(map(int, input().split()))\ns = sum(a)\np = list(map(lambda v: v / s, a))\nfor _ in range(N - 1):\n    a = list(map(int, input().split()))\n    p = solve(p, a, K)\nprint(*p)", "(n, k) = map(int, input().split())\na = [[] for i in range(n)]\nfor i in range(n):\n    a[i] = list(map(int, input().split()))\nf = []\np = []\nfor i in range(n):\n    s1 = 0\n    for j in range(k):\n        s1 += a[i][j]\n    f.append(s1)\nfor i in range(k):\n    s = []\n    l = a[0][i] / f[0]\n    s.append(l)\n    for j in range(1, n):\n        s.append((l + a[j][i]) / (f[j] + 1))\n        l = s[j]\n    p.append(s[n - 1])\nr = str(p[0]) + ' '\nfor i in range(1, k):\n    r += str(p[i]) + ' '\nprint(r)", "(n, k) = map(int, input().split())\na = [[] for i in range(n)]\nfor i in range(n):\n    a[i] = list(map(int, input().split()))\nf = []\np = []\nfor i in range(n):\n    s1 = 0\n    for j in range(k):\n        s1 += a[i][j]\n    f.append(s1)\nfor i in range(k):\n    s = []\n    l = a[0][i] / f[0]\n    s.append(l)\n    for j in range(1, n):\n        s.append((l + a[j][i]) / (f[j] + 1))\n        l = s[j]\n    p.append(s[n - 1])\nr = str(p[0]) + ' '\nfor i in range(1, k):\n    r += str(p[i]) + ' '\nprint(r)", "(n, k) = map(int, input().split())\na = [[] for i in range(n)]\nfor i in range(n):\n    a[i] = list(map(int, input().split()))\nans = [[0 for i in range(k)] for j in range(n)]\nsumi = []\nfor i in range(n):\n    p = 0\n    for j in range(k):\n        p += a[i][j]\n    sumi.append(p)\nfor j in range(k):\n    for i in range(n):\n        if i == 0:\n            ans[i][j] = a[i][j] / sumi[0]\n        else:\n            ans[i][j] = ans[i - 1][j] * (a[i][j] + 1) / (sumi[i] + 1) + (1 - ans[i - 1][j]) * a[i][j] / (sumi[i] + 1)\n    x = ans[n - 1][j] * pow(10, 6)\n    if x % 10 >= 5:\n        x = int(x)\n        x += 1\n    else:\n        x = int(x)\n    print(x / 1000000, end=' ')", "(N, K) = map(int, input().split(' '))\nball = []\nfor i in range(N):\n    ball.append(list(map(int, input().split(' '))))\nprob = [[0 for i in range(K)] for j in range(N)]\nfor i in range(N):\n    temp = 0\n    for j in range(K):\n        temp += ball[i][j]\n    ball[i].append(temp)\nfor i in range(K):\n    prob[0][i] = ball[0][i] / ball[0][K]\nfor i in range(1, N):\n    c = ball[i][K]\n    for j in range(0, K):\n        b = ball[i][j]\n        prob[i][j] = (b + prob[i - 1][j]) / (c + 1)\nfor i in range(K):\n    print('%.6f' % prob[N - 1][i], end=' ')", "(n, k) = list(map(int, input().split()))\nps = []\nip = []\nfor i in range(n):\n    t = list(map(int, input().split()))\n    ip.append(t)\nfor i in range(n):\n    l = []\n    for j in range(k):\n        l.append(0)\n    ps.append(l)\nfor i in range(n):\n    sum1 = sum(ip[i])\n    for j in range(k):\n        if i == 0:\n            ps[i][j] = ip[i][j] / sum1\n        else:\n            ps[i][j] = ps[i - 1][j] * (ip[i][j] + 1) / (sum1 + 1) + (1 - ps[i - 1][j]) * ip[i][j] / (sum1 + 1)\nfor t in range(k):\n    print(ps[n - 1][t], end=' ')", "from decimal import Decimal\n(n, k) = map(int, input().split())\nmat = []\nans = [0] * k\nfor i in range(n):\n    row = list(map(int, input().split()))\n    mat.append(row)\ndp = [[0] * n for _ in range(k)]\nsums = [0] * n\nfor i in range(n):\n    sums[i] = sum(mat[i])\nfor col in range(n):\n    dp[0][col] = mat[0][col] / sums[0]\nfor row in range(1, n):\n    for col in range(k):\n        a = dp[row - 1][col] * (mat[row][col] + 1) / (sums[row] + 1)\n        b = (1 - dp[row - 1][col]) * mat[row][col] / (sums[row] + 1)\n        dp[row][col] = dp[row - 1][col] * (mat[row][col] + 1) / (sums[row] + 1) + (1 - dp[row - 1][col]) * mat[row][col] / (sums[row] + 1)\n        dp[row][col] = round(dp[row][col], 6)\nprint(' '.join(map(str, dp[n - 1])))", "from decimal import Decimal\n(n, k) = map(int, input().split())\nmat = []\nans = [0] * k\nfor i in range(n):\n    row = list(map(int, input().split()))\n    mat.append(row)\ndp = [[0] * n for _ in range(k)]\nsums = [0] * n\nfor i in range(n):\n    sums[i] = sum(mat[i])\nfor col in range(n):\n    dp[0][col] = mat[0][col] / sums[0]\nfor row in range(1, n):\n    for col in range(k):\n        a = dp[row - 1][col] * (mat[row][col] + 1) / (sums[row] + 1)\n        b = (1 - dp[row - 1][col]) * mat[row][col] / (sums[row] + 1)\n        dp[row][col] = dp[row - 1][col] * (mat[row][col] + 1) / (sums[row] + 1) + (1 - dp[row - 1][col]) * mat[row][col] / (sums[row] + 1)\n        dp[row][col] = round(dp[row][col], 6)\nprint(' '.join(map(str, dp[n - 1])))", "(n, k) = input().split()\n(n, k) = (int(n), int(k))\ntest = n\nslist = []\nsumlist = []\nwhile test:\n    test -= 1\n    sum = 0\n    x = [float(a) for a in input().strip().split(' ')]\n    slist.append(x)\n    for a in x:\n        sum += a\n    sumlist.append(sum)\nfor c in range(0, k):\n    prob = 0\n    base = 1\n    for i in range(0, n):\n        if i == n - 1:\n            base *= sumlist[n - i - 1]\n        else:\n            base *= sumlist[n - i - 1] + 1\n        prob += slist[n - i - 1][c] / base\n    print(prob, end=' ')", "def calcProb(color, n, a, sums):\n    prob = a[0][color] / sums[0]\n    for i in range(n - 1):\n        prob = (a[i + 1][color] + 1) / (sums[i + 1] + 1) * prob + a[i + 1][color] / (sums[i + 1] + 1) * (1 - prob)\n    return prob\n(n, k) = map(int, input().split())\na = []\nsums = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n    sums.append(sum(a[i]))\nfor i in range(k):\n    print(calcProb(i, n, a, sums), end=' ')", "def calcProb(color, n, a, s):\n    prob = a[0][color] / s[0]\n    for i in range(n - 1):\n        prob = a[i + 1][color] / (s[i + 1] + 1) * (1 - prob) + (a[i + 1][color] + 1) / (s[i + 1] + 1) * prob\n    return prob\n(n, k) = list(map(int, input().split()))\na = []\ns = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n    s.append(sum(a[i]))\nfor i in range(k):\n    print(calcProb(i, n, a, s), end=' ')", "import sys\n\ndef main():\n    (n, k) = [int(item) for item in input().split()]\n    a = [[0] * k for i in range(n)]\n    for i in range(n):\n        a[i] = [int(item) for item in input().split()]\n    t = [sum(a[i]) for i in range(n)]\n    p = [[0] * k for i in range(n)]\n    for j in range(k):\n        p[0][j] = a[0][j] / t[0]\n    for i in range(1, n):\n        for j in range(k):\n            p1 = p[i - 1][j] * ((a[i][j] + 1) / (t[i] + 1))\n            p2 = (1 - p[i - 1][j]) * (a[i][j] / (t[i] + 1))\n            p[i][j] = p1 + p2\n    print(*p[n - 1])\n    return 0\nmain()", "(n, k) = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nb = []\ns = sum(a[0])\nfor i in range(k):\n    b.append(a[0][i] / s)\np = []\nfor i in range(1, n):\n    s = sum(a[i])\n    for j in range(k):\n        p.append(b[j] * (1 + a[i][j]) / (s + 1) + (1 - b[j]) * a[i][j] / (s + 1))\n    b = p[:]\n    p = []\nprint(*b)", "(n, k) = [int(i) for i in input().split()]\n(A, sum) = ([], [])\nfor i in range(n):\n    A.append(list(map(int, input().split())))\nfor i in range(n):\n    sum.append(0)\n    for j in range(k):\n        sum[i] += A[i][j]\nfor j in range(k):\n    p1 = A[0][j] / sum[0]\n    for i in range(1, n):\n        p1 = (A[i][j] + 1) * p1 / (sum[i] + 1) + A[i][j] * (1 - p1) / (sum[i] + 1)\n    print(p1, end=' ')", "(n, k) = map(int, input().split())\nballs = []\nbuck_sum = []\nfor i in range(n):\n    balls.append(list(map(int, input().split())))\n    buck_sum.append(sum(balls[-1]))\np = []\nfor i in range(k):\n    p.append(balls[0][i] / buck_sum[0])\nfor i in range(1, n):\n    for j in range(k):\n        p[j] = p[j] * (balls[i][j] + 1) / (buck_sum[i] + 1) + (1 - p[j]) * balls[i][j] / (buck_sum[i] + 1)\nprint(*p)", "import numpy as np\n(n, k) = map(int, input().split())\nmatrix = []\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\nbucket = np.zeros([k], dtype=float)\ndeno = sum(matrix[0])\nfor j in range(k):\n    bucket[j] += matrix[0][j] / deno\nfor i in range(1, n):\n    deno = sum(matrix[i]) + 1\n    for j in range(k):\n        bucket[j] = (bucket[j] * (matrix[i][j] + 1) + (1 - bucket[j]) * matrix[i][j]) / deno\nprint(' '.join((str(round(x, 6)) for x in bucket)))", "l = []\np = []\n(n, k) = [int(x) for x in input().split()]\nfor i in range(n):\n    kk = list(map(int, input().split()))\n    l.append(kk)\n    p.append([0 for _ in kk])\nfor i in range(n - 1):\n    for j in range(k):\n        temp = l[i][j] / sum(l[i])\n        p[i][j] = temp\n        l[i + 1][j] += p[i][j]\ntemp = sum(l[n - 1])\nfor i in range(k):\n    print(l[n - 1][i] / temp, end=' ')", "(n, k) = [int(i) for i in input().split()]\na = [[int(i) for i in input().split()] for _ in range(n)]\ntotal = [sum(e) for e in a]\nfor i in range(k):\n    p = a[0][i] / total[0]\n    for j in range(1, n):\n        p = (a[j][i] + p) / (total[j] + 1)\n    print(p, end=' ')", "import sys\nline = input().split()\nn = int(line[0])\nk = int(line[1])\na = [[int(x) for x in input().split()] for y in range(n)]\np = [[0 for x in range(k)] for y in range(n)]\ns = [sum(x) for x in a]\npSum = 0\nfor j in range(k):\n    p[0][j] = float(a[0][j] / s[0])\n    pSum += p[0][j]\nfor i in range(1, n):\n    for j in range(k):\n        p[i][j] = (pSum - p[i - 1][j]) * (a[i][j] / (s[i] + 1)) + p[i - 1][j] * (a[i][j] + 1) / (s[i] + 1)\nfor x in p[n - 1]:\n    sys.stdout.write(str(x) + ' ')\nsys.stdout.write('\\n')", "(n, k) = map(int, input().split())\narr = []\nfor i in range(n):\n    kl = list(map(int, input().split()))\n    arr.append(kl)\npre = []\nfor i in range(1005):\n    pre.append([])\nfor i in range(1005):\n    for j in range(1005):\n        pre[i].append(0)\ns = [0] * 1005\nfor i in range(0, k):\n    pre[0][i] = arr[0][i]\n    s[0] += pre[0][i]\nfor i in range(1, n):\n    for j in range(k):\n        pre[i][j] = arr[i][j] + pre[i - 1][j] / s[i - 1]\n        s[i] += pre[i][j]\nfor i in range(k):\n    print('%0.6f' % (pre[n - 1][i] / s[n - 1]), end=' ')\nprint()", "(n, k) = map(int, input().split())\nprob = [0 for i in range(k)]\nfor i in range(n):\n    vals = list(map(int, input().split()))\n    s = sum(vals)\n    if i == 0:\n        for j in range(k):\n            prob[j] = vals[j] / s\n    else:\n        for j in range(k):\n            prob[j] = (vals[j] + prob[j]) / (s + 1)\nprob = [round(prob[i], 6) for i in range(k)]\nprint(*prob)", "l = []\nprob = []\n(n, k) = map(int, input().split(' '))\nfor i in range(n):\n    lt = list(map(int, input().split(' ')))\n    l.append(lt)\n    prob.append([0 for _ in lt])\nfor i in range(n - 1):\n    for j in range(k):\n        prob[i][j] = l[i][j] / sum(l[i])\n        l[i + 1][j] += prob[i][j]\nres = []\nfor j in range(k):\n    prob[n - 1][j] = l[n - 1][j] / sum(l[n - 1])\n    res.append(prob[n - 1][j])\nfor j in range(k):\n    print('{}'.format(res[j]), end=' ')\nprint('\\t')", "R = lambda : map(int, input().split())\n(n, k) = R()\na = [list(R()) for _ in range(n)]\ns = sum(a[0])\np = [x / s for x in a[0]]\nfor r in a[1:]:\n    s = sum(r) + 1\n    p = [(x + y) / s for (x, y) in zip(r, p)]\nprint(*p)", "R = lambda : map(int, input().split())\n(n, k) = R()\na = [list(R()) for _ in range(n)]\ns = sum(a[0])\np = [x / s for x in a[0]]\nfor r in a[1:]:\n    s = sum(r) + 1\n    for i in range(k):\n        p[i] = (r[i] + p[i]) / s\nprint(*p)", "R = lambda : map(int, input().split())\n(n, k) = R()\na = [list(R()) for _ in range(n)]\np = [0.0] * k\nd = 0\nfor r in a:\n    s = sum(r) + d\n    d = 1\n    p = [(x + y) / s for (x, y) in zip(r, p)]\nprint(*p)", "R = lambda : map(int, input().split())\n(n, k) = R()\na = [list(R()) for _ in range(n)]\ns = sum(a[0])\np = [x / s for x in a[0]]\nfor r in a[1:]:\n    s = sum(r) + 1\n    p = [(x + y) / s for (x, y) in zip(r, p)]\nprint(*p)", "(n, k) = map(int, input().split())\nbucket = list(map(int, input().split()))\npb = sum(bucket)\nprop = [i / pb if pb > 0 else 0 for i in bucket]\nfor i in range(1, n):\n    bucket = list(map(int, input().split()))\n    nb = sum(bucket) + 1\n    current = [0 for _ in range(k)]\n    for j in range(k):\n        current[j] = (bucket[j] + 1) / nb * prop[j] + bucket[j] / nb * (1 - prop[j])\n    prop = current[:]\nprint(('{:.6f} ' * n).format(*prop))", "R = lambda : map(int, input().split())\n(n, k) = R()\nL = []\nfor i in range(n):\n    L.append(list(R()))\nP = [0] * k\nS = []\nfor i in range(n):\n    S.append(sum(L[i]))\nfor i in range(n):\n    for j in range(k):\n        if i == 0:\n            if L[i][j] != 0:\n                P[j] = L[i][j] / S[i]\n        elif P[j] == 0:\n            if L[i][j] != 0:\n                P[j] = L[i][j] / (S[i] + 1)\n        else:\n            P[j] = P[j] * ((L[i][j] + 1) / (S[i] + 1)) + (1 - P[j]) * (L[i][j] / (S[i] + 1))\nprint(*P)", "a = input()\n(n, k) = a.split()\nn = int(n)\nk = int(k)\nA = []\nsum = []\nfor i in range(n):\n    A.append(list(map(int, input().split())))\nfor i in range(n):\n    sum.append(0)\n    for j in range(k):\n        sum[i] = sum[i] + A[i][j]\nfor j in range(k):\n    p1 = A[0][j] / sum[0]\n    for i in range(1, n):\n        p1 = (A[i][j] + 1) * p1 / (sum[i] + 1) + A[i][j] * (1 - p1) / (sum[i] + 1)\n    print('%.6f' % p1, end=' ')", "s = list(map(int, input().split()))\n(n, k) = (s[0], s[1])\nl = []\nfor i in range(0, n):\n    s = list(map(int, input().split()))\n    l.append(s)\np = []\ntotal = sum(l[0])\nfor i in range(k):\n    p.append(l[0][i] / total)\nfor i in range(1, n):\n    total = sum(l[i])\n    for j in range(0, k):\n        x = p[j] * (l[i][j] + 1) / (total + 1)\n        y = (1 - p[j]) * l[i][j] / (total + 1)\n        p[j] = x + y\nfor i in range(k):\n    print(p[i], end=' ')", "l = []\nprob = []\n(n, k) = [int(x) for x in input().split()]\nfor i in range(n):\n    kk = list(map(int, input().split()))\n    l.append(kk)\n    prob.append([0 for _ in kk])\nfor i in range(n - 1):\n    for j in range(k):\n        temp = l[i][j] / sum(l[i])\n        prob[i][j] = temp\n        l[i + 1][j] += prob[i][j]\ntemp = sum(l[n - 1])\nfor i in range(k):\n    print(l[n - 1][i] / temp, end=' ')", "l = []\nprob = []\n(n, k) = [int(x) for x in input().split()]\nfor i in range(n):\n    kk = list(map(int, input().split()))\n    l.append(kk)\n    prob.append([0 for _ in kk])\nfor i in range(n - 1):\n    for j in range(k):\n        temp = l[i][j] / sum(l[i])\n        prob[i][j] = temp\n        l[i + 1][j] += prob[i][j]\ntemp = sum(l[n - 1])\nfor i in range(k):\n    print(l[n - 1][i] / temp, end=' ')", "def pblt(i, buck, arrnt):\n    buc = buck[0]\n    p = buc[i] / arrnt[0]\n    for j in range(1, len(buck)):\n        buc = buck[j]\n        nt = arrnt[j]\n        nf = buc[i]\n        p = p * ((nf + 1) / (nt + 1)) + (1 - p) * (nf / (nt + 1))\n    return p\n(n, k) = map(int, input().split())\nbuck = []\narrnt = []\nfor i in range(n):\n    l = list(map(int, input().split()))\n    buck.append(l)\nfor i in buck:\n    arrnt.append(sum(i))\nfor i in range(k):\n    print(pblt(i, buck, arrnt), end=' ')", "def pblt(i, buck, arrnt):\n    buc = buck[0]\n    p = buc[i] / arrnt[0]\n    for j in range(1, len(buck)):\n        buc = buck[j]\n        nt = arrnt[j]\n        nf = buc[i]\n        p = p * ((nf + 1) / (nt + 1)) + (1 - p) * (nf / (nt + 1))\n    return p\n(n, k) = map(int, input().split())\nbuck = []\narrnt = []\nfor i in range(n):\n    l = list(map(int, input().split()))\n    buck.append(l)\nfor i in buck:\n    arrnt.append(sum(i))\nfor i in range(k):\n    print(pblt(i, buck, arrnt), end=' ')", "(n, k) = map(int, input().split())\nli = list()\nnn = n\nfor i in range(n):\n    li.append([])\n    li[i] = input().split()\n    for j in range(k):\n        li[i][j] = int(li[i][j])\nsum1 = sum(li[0])\nli2 = list()\nli3 = list()\nli4 = list()\nfor i in li:\n    li4.append(sum(i))\nfor i in range(k):\n    li2.append(li[0][i] / sum1)\nfor c in range(k):\n    j = li2[c]\n    for i in range(1, n):\n        sum2 = li4[i]\n        col = li[i][c]\n        p1 = col / (sum2 + 1) * (1 - j)\n        p2 = (col + 1) / (sum2 + 1) * j\n        pt = p1 + p2\n        j = pt\n    li3.append(j)\nfor i in li3:\n    print(i, end=' ')", "(n, k) = map(int, input().split())\narr = [0 for j in range(n)]\narrsum = []\nfor i in range(n):\n    m = [int(j) for j in input().split()]\n    arrsum = arrsum + [sum(m)]\n    arr[i] = m\n    prev = 1\nfor i in range(k):\n    for j in range(n):\n        if j == 0:\n            pickb = arr[j][i] / arrsum[0]\n            prev = pickb\n        else:\n            pickb = (arr[j][i] + 1) / (arrsum[j] + 1) * prev + (1 - prev) * arr[j][i] / (arrsum[j] + 1)\n            prev = pickb\n    print(pickb, end=' ')", "(n, k) = map(int, input().split())\nli = list()\nnn = n\nfor i in range(n):\n    li.append([])\n    li[i] = input().split()\n    for j in range(k):\n        li[i][j] = int(li[i][j])\nsum1 = sum(li[0])\nli2 = list()\nli3 = list()\nli4 = list()\nfor i in li:\n    li4.append(sum(i))\nfor i in range(k):\n    li2.append(li[0][i] / sum1)\nfor c in range(k):\n    j = li2[c]\n    for i in range(1, n):\n        sum2 = li4[i]\n        col = li[i][c]\n        p1 = col / (sum2 + 1) * (1 - j)\n        p2 = (col + 1) / (sum2 + 1) * j\n        pt = p1 + p2\n        j = pt\n    li3.append(j)\nfor i in li3:\n    print(i, end=' ')", "from collections import defaultdict\n(n, k) = map(int, input().split())\nrecord = {}\nrecord = defaultdict(lambda : 1, record)\nfor i in range(n):\n    inlist = list(map(int, input().split()))\n    total = sum(inlist)\n    for j in range(k):\n        if i != 0:\n            record[str(j)] = record[str(j)] * (inlist[j] + 1) / (total + 1) + (1 - record[str(j)]) * inlist[j] / (total + 1)\n        elif i == 0:\n            record[str(j)] *= inlist[j] / total\nfor i in range(k):\n    print(round(record[str(i)], 6), end=' ')", "(n, k) = map(int, input().split())\ngame = []\nfor i in range(n):\n    game.append(list(map(int, input().split())))\nsumm = 0\nfor i in range(n - 1):\n    for j in range(k):\n        summ += game[i][j]\n    for j in range(k):\n        game[i + 1][j] += game[i][j] / summ\n    summ = 0\ndeno = sum(game[i + 1])\nfor i in game[i + 1]:\n    print(str.format('{0:.6f}', i / deno), end=' ')", "import numpy as np\n(n, k) = [int(s) for s in input().split()]\narr = np.zeros((n, k), dtype=int)\nfor i in range(n):\n    arr[i, :] = np.array(list(map(int, input().split())))\nfinalProb = arr[0, :] / np.sum(arr[0, :])\nfor i in range(1, n):\n    finalProb = (finalProb + arr[i, :]) / (np.sum(arr[i, :]) + 1)\nprint(' '.join(map(str, list(finalProb))))", "(N, K) = map(int, input().split())\nA = [[0 for j in range(K)] for i in range(N)]\nfor i in range(N):\n    A[i] = list(map(int, input().split()))\nB = []\nP = []\nfor i in range(N):\n    B.append(sum(A[i]))\nfor j in range(K):\n    p = float(0)\n    for i in range(N):\n        if i != 0:\n            p = p * ((A[i][j] + 1) / (B[i] + 1)) + (1 - p) * (A[i][j] / (B[i] + 1))\n        else:\n            p = A[i][j] / B[i]\n    P.append(p)\nfor i in P:\n    print(i, end=' ')", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\ns = sum(a)\nb = [0.0 for i in range(n)]\nfor j in range(n):\n    b[j] = a[j] / s\nfor i in range(1, n):\n    a = list(map(int, input().split()))\n    s = sum(a)\n    for j in range(n):\n        b[j] = (1.0 - b[j]) * a[j] / (s + 1) + b[j] * (a[j] + 1) / (s + 1)\nfor i in range(n):\n    print(b[i], end=' ')", "(n, k) = map(int, input().split())\nar = []\ntotal = [0] * n\nfor i in range(n):\n    ar.append(list(map(int, input().split())))\n    total[i] = sum(ar[-1])\nfor i in range(k):\n    ans = 0\n    for j in range(n):\n        if j == 0:\n            ans = ar[j][i] / total[j]\n        else:\n            ans = ans * (1 / (total[j] + 1)) + ar[j][i] / (total[j] + 1)\n    print(ans, end=' ')", "(n, k) = map(int, input().split())\nprob = [0 for i in range(k)]\nfor i in range(n):\n    vals = list(map(int, input().split()))\n    sumval = sum(vals)\n    if i == 0:\n        for j in range(k):\n            prob[j] = vals[j] / sumval\n    else:\n        for j in range(k):\n            prob[j] = (vals[j] + prob[j]) / (sumval + 1)\nfor i in range(0, len(prob) - 1):\n    print(round(prob[i], 6), end=' ')\nprint(round(prob[-1], 6), end='')", "(n, k) = map(int, input().strip().split())\na = []\nc = []\nfor i in range(0, n):\n    b = list(map(int, input().strip().split()))\n    a.append(b)\n    c.append(sum(b))\np = []\ninit = []\nfor i in range(0, k):\n    val = a[0][i] / c[0]\n    init.append(val)\np.append(init)\nfor i in range(1, n):\n    init = []\n    for j in range(0, k):\n        val = p[i - 1][j] * ((a[i][j] + 1) / (c[i] + 1)) + (1 - p[i - 1][j]) * (a[i][j] / (c[i] + 1))\n        init.append(val)\n    p.append(init)\nfor i in range(0, k):\n    print(p[n - 1][i], end=' ')", "nk = list(map(int, input().split()))\nn = nk[0]\nk = nk[1]\nl = []\nsum = []\nfor i in range(n):\n    l.append(list(map(int, input().split(' '))))\n    sum.append(0)\n    for j in range(k):\n        sum[i] = sum[i] + l[i][j]\nfor i in range(k):\n    p1 = l[0][i] / sum[0]\n    for j in range(n - 1):\n        p1 = p1 * ((l[j + 1][i] + 1) / (sum[j + 1] + 1)) + (1 - p1) * (l[j + 1][i] / (sum[j + 1] + 1))\n    print(p1, end='')\n    print(' ', end=' ')", "(n, k) = list(map(int, input().split()))\nprob_if_adding = [0 for _ in range(k)]\nfor i in range(n):\n    bucket = list(map(int, input().split()))\n    s = sum(bucket)\n    if i == 0:\n        for j in range(k):\n            prob_if_adding[j] = bucket[j] / s\n    else:\n        for j in range(k):\n            prob_if_adding[j] = prob_if_adding[j] * ((bucket[j] + 1) / (s + 1)) + (1 - prob_if_adding[j]) * (bucket[j] / (s + 1))\nfor j in range(k):\n    print(round(prob_if_adding[j], 6), end=' ')", "(n, k) = map(int, input().split())\npro = [0] * k\nno_k = [0] * k\nno_of_balls = 0\nfor i in range(n):\n    arr = [int(x) for x in input().split()]\n    no_of_balls += sum(arr)\n    for j in range(k):\n        pro[j] = (pro[j] + arr[j]) / no_of_balls\n    no_of_balls = 1\nprint(*pro, sep=' ')", "import math\nimport bisect\nimport itertools\nimport sys\nI = lambda : sys.stdin.readline()\nmod = 10 ** 9 + 7\n\ndef mindiff(a):\n    b = a[:]\n    b.sort()\n    m = 10000000000\n    for i in range(len(b) - 1):\n        if b[i + 1] - b[i] < m:\n            m = b[i + 1] - b[i]\n    return m\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef merge(a, b):\n    i = 0\n    j = 0\n    c = 0\n    ans = []\n    while i < len(a) and j < len(b):\n        if a[i] < b[j]:\n            ans.append(a[i])\n            i += 1\n        else:\n            ans.append(b[j])\n            c += len(a) - i\n            j += 1\n    ans += a[i:]\n    ans += b[j:]\n    return (ans, c)\n\ndef mergesort(a):\n    if len(a) == 1:\n        return (a, 0)\n    mid = len(a) // 2\n    (left, left_inversion) = mergesort(a[:mid])\n    (right, right_inversion) = mergesort(a[mid:])\n    (m, c) = merge(left, right)\n    c += left_inversion + right_inversion\n    return (m, c)\n\ndef is_prime(num):\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num == 3:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 3 == 0:\n        return False\n    t = 5\n    a = 2\n    while t <= int(math.sqrt(num)):\n        if num % t == 0:\n            return False\n        t += a\n        a = 6 - a\n    return True\n\ndef ceil(a, b):\n    if a % b == 0:\n        return a // b\n    else:\n        return a // b + 1\n\ndef binsearch(arr, b, low, high):\n    if low == high:\n        return low\n    if arr[math.ceil((low + high) / 2)] < b:\n        return binsearch(arr, b, low, math.ceil((low + high) / 2) - 1)\n    else:\n        return binsearch(arr, b, math.ceil((low + high) / 2), high)\n\ndef ncr1(n, r):\n    s = 1\n    for i in range(min(n - r, r)):\n        s *= n - i\n        s %= mod\n        s *= pow(i + 1, mod - 2, mod)\n        s %= mod\n    return s\n\ndef calc(n, m, r):\n    s = 0\n    for i in range(0, r + 1, 2):\n        s += ncr1(n, i) * ncr1(m, i)\n        s %= mod\n    return s\nfor _ in range(1):\n    (n, k) = map(int, input().split())\n    ans = [0] * (k + 1)\n    a = list(map(int, input().split()))\n    r = sum(a)\n    for i in range(1, k + 1):\n        ans[i] = a[i - 1] / r\n    for i in range(n - 1):\n        a = list(map(int, input().split()))\n        r = sum(a) + 1\n        for j in range(1, k + 1):\n            ans[j] = (a[j - 1] + 1) / r * ans[j] + a[j - 1] / r * (1 - ans[j])\n    print(*ans[1:])", "(n, k) = map(int, input().split())\nans = [0] * k\na = list(map(int, input().split()))\nr = sum(a)\nfor i in range(k):\n    ans[i] = a[i] / r\nfor i in range(n - 1):\n    a = list(map(int, input().split()))\n    r = sum(a) + 1\n    for j in range(k):\n        ans[j] = (a[j] + 1) / r * ans[j] + a[j] / r * (1 - ans[j])\nprint(*ans)", "(n, k) = map(int, input().split())\nsum = [0] * n\nl = [[0 for i in range(k)] for j in range(n)]\nfor i in range(n):\n    l[i] = list(map(int, input().split()))\nfor i in range(n):\n    for j in range(k):\n        sum[i] += l[i][j]\nfor i in range(k):\n    x = l[0][i]\n    carry = x / sum[0]\n    for j in range(1, n):\n        y = l[j][i]\n        z = sum[j]\n        carry = carry * ((y + 1) / (z + 1)) + (1 - carry) * (y / (z + 1))\n    print(round(carry, 6), end=' ')", "(n, k) = input().split()\n(n, k) = (int(n), int(k))\nprob = [0] * k\nfor i in range(n):\n    ls = [int(x) for x in input().split(' ')]\n    prob = [ls[i] + prob[i] for i in range(k)]\n    s = sum(prob)\n    prob = [i / s for i in prob]\nfor i in prob:\n    print(i, end=' ')\nprint('')", "(n, k) = map(int, input().split())\na = []\nfor _ in range(n):\n    a.append(list(map(int, input().split())))\nans = a[n - 1]\nb = [sum(a[i]) for i in range(n)]\nsuf = []\ncur = 1\nfor i in range(n - 2, -1, -1):\n    if i != 0:\n        cur *= b[i] + 1\n    else:\n        cur *= b[i]\n    suf.append(cur)\nsuf = suf[::-1]\nfor i in range(n - 1):\n    for j in range(k):\n        ans[j] += a[i][j] / suf[i]\nfor i in range(n):\n    print(ans[i] / sum(ans), end=' ')", "(n, k) = map(int, input().split())\nl = []\nfor i in range(n):\n    l.append(list(map(int, input().split())))\nx = []\ns = sum(l[0])\nfor i in l[0]:\n    x.append(i / s)\ns = []\nfor i in l:\n    s.append(sum(i))\nfor i in range(1, n):\n    y = []\n    for j in range(k):\n        a = 0\n        a = l[i][j] / (s[i] + 1) * (sum(x) - x[j])\n        a += x[j] * ((l[i][j] + 1) / (s[i] + 1))\n        y.append(a)\n    x = y[:]\nfor i in x:\n    print(round(i, 6), end=' ')", "(n, k) = tuple(map(int, input().split()))\n(lines, balls) = ([], [])\nfor i in range(n):\n    lines.append(list(map(int, input().split())))\n    balls.append(sum(lines[i]))\nprobability = [[0 for i in range(k)] for j in range(n)]\nfor i in range(k):\n    probability[0][i] = lines[0][i] / balls[0]\nfor i in range(1, n):\n    for j in range(k):\n        probability[i][j] = probability[i - 1][j] * ((lines[i][j] + 1) / (balls[i] + 1))\n        probability[i][j] += (1 - probability[i - 1][j]) * (lines[i][j] / (balls[i] + 1))\nfor i in range(k):\n    print(probability[n - 1][i], end=' ')", "def propability(arr):\n    new_arr = []\n    sum_arr = sum(arr)\n    for i in arr:\n        new_arr.append(i / sum_arr)\n    return new_arr\n\ndef pro_arr(arr, n, k):\n    for i in range(n - 1):\n        temp_arr = propability(arr[i])\n        for j in range(k):\n            arr[i + 1][j] += temp_arr[j]\n    print(*propability(arr[-1]))\n(n, k) = [int(i) for i in input().split()]\narr = [[int(i) for i in input().split()] for i in range(n)]\npro_arr(arr, n, k)", "t = 1\nfor test in range(t):\n    (n, k) = map(int, input().split())\n    D = {}\n    S = {}\n    for i in range(1, n + 1):\n        D[i] = list(map(int, input().split()))\n        S[i] = sum(D[i])\n    dp = [[0 for i in range(k)] for j in range(n + 1)]\n    for j in range(k):\n        dp[1][j] = D[1][j] / S[1]\n    for i in range(2, n + 1):\n        for j in range(k):\n            dp[i][j] = dp[i - 1][j] * (D[i][j] + 1) / (S[i] + 1) + (1 - dp[i - 1][j]) * D[i][j] / (S[i] + 1)\n    print(*dp[n])", "(n, k) = list(map(int, input().strip().split()))\na = []\nfor i in range(n):\n    al = list(map(int, input().strip().split()))\n    a.append(al)\nop = []\ns = []\nfor j in range(n):\n    s.append(sum(a[j]))\nfor i in range(k):\n    x = a[0][i] / sum(a[0])\n    for j in range(n):\n        x = (x + a[j][i]) / (1 + s[j])\n    op.append(x)\nprint(' '.join(list(map(str, op))))", "(n, k) = map(int, input().split())\nans = [x[:] for x in [[0] * k] * n]\nrow = list(map(int, input().split()))\ns = sum(row)\nfor i in range(k):\n    ans[0][i] = row[i] / s\nfor i in range(1, n):\n    inp = list(map(int, input().split()))\n    s = sum(inp) + 1\n    for j in range(k):\n        tmp1 = (inp[j] + 1) / s\n        tmp2 = inp[j] / s\n        ans[i][j] = tmp1 * ans[i - 1][j] + (1 - ans[i - 1][j]) * tmp2\nprint(' '.join([str(i) for i in ans[n - 1]]))", "(n, k) = map(int, input().split())\na = [[*map(int, input().split())] for _ in range(n)]\nps = [sum(ai) for ai in a]\nres = [0] * k\npps_ = 0\nfor i in range(n):\n    ps_ = ps[i]\n    if pps_ > 0:\n        ps_ += 1\n    for j in range(k):\n        try:\n            res[j] = (res[j] + a[i][j]) / ps_\n        except:\n            res[j] = 0\n    pps_ = ps_\nprint(' '.join(map(lambda x: str(round(x, 10)), res)))", "(N, K) = map(int, input().split())\nbuckets = []\nfor i in range(N):\n    buckets.append(list(map(int, input().split())))\nfor b in range(len(buckets) - 1):\n    s = sum(buckets[b])\n    for i in range(K):\n        buckets[b + 1][i] += buckets[b][i] / s\ns = sum(buckets[-1])\nfor i in range(K):\n    print(buckets[-1][i] / s, end=' ')\nprint()", "(N, K) = map(int, input().split())\na = [list(map(int, input().split())) for i in range(N)]\nsizes = [sum(bucket) for bucket in a]\nres = []\nfor j in range(K):\n    p = a[0][j]\n    for i in range(1, N):\n        p = (a[i][j] + p) / (sizes[i] + 1)\n    res.append(p)\nprint(' '.join((str(x) for x in res)))", "import sys\nimport math\nfileoperation = 0\nif fileoperation:\n    orig_stdout = sys.stdout\n    orig_stdin = sys.stdin\n    inputfile = open('W:/Competitive Programming/input.txt', 'r')\n    outputfile = open('W:/Competitive Programming/output.txt', 'w')\n    sys.stdin = inputfile\n    sys.stdout = outputfile\nmod = 1000000007\n\ndef nospace(l):\n    ans = ''.join((str(i) for i in l))\n    return ans\nt = 1\nfor tt in range(t):\n    (n, k) = map(int, sys.stdin.readline().split(' '))\n    a = []\n    for i in range(n):\n        p = list(map(int, sys.stdin.readline().split(' ')))\n        a.append(p)\n    for i in range(1, n):\n        tot = sum(a[i - 1])\n        for j in range(k):\n            a[i][j] += a[i - 1][j] / tot\n    tot = sum(a[n - 1])\n    ans = []\n    for j in range(k):\n        ans.append(a[n - 1][j] / tot)\n    print(*ans)\nif fileoperation:\n    sys.stdout = orig_stdout\n    sys.stdin = orig_stdin\n    inputfile.close()\n    outputfile.close()", "(n, k) = map(int, input().split())\ndp = [[0] * k for x in range(n)]\nct = [0] * n\nfor i in range(n):\n    dp[i] = list(map(int, input().split()))\n    ct[i] = sum(dp[i])\nfor i in range(k):\n    pb = 0.0\n    for j in range(n):\n        if j == 0:\n            pv = dp[0][i] / ct[0]\n        else:\n            tmp = pv * (dp[j][i] + 1) / (ct[j] + 1) + (1 - pv) * dp[j][i] / (ct[j] + 1)\n            pv = tmp\n    print(pv, end=' ')"]