["for t in range(int(input())):\n    n = int(input())\n    c = [0] * 3\n    while n != 0:\n        c[n % 3] += 1\n        n //= 3\n    print(int(2 ** (c[1] - 1) * (3 ** (c[2] + 1) - 1)) % (10 ** 9 + 7))", "for t in range(int(input())):\n    n = int(input())\n    c = [0] * 3\n    while n != 0:\n        c[n % 3] += 1\n        n //= 3\n    print(int(2 ** (c[1] - 1) * (3 ** (c[2] + 1) - 1)) % (10 ** 9 + 7))", "for t in range(int(input())):\n    n = int(input())\n    c = [0] * 3\n    while n != 0:\n        c[n % 3] += 1\n        n //= 3\n    print(int(2 ** (c[1] - 1) * (3 ** (c[2] + 1) - 1)) % (10 ** 9 + 7))", "for _ in range(int(input())):\n    n = int(input())\n    cnt = [0 for i in range(3)]\n    while n != 0:\n        res = n % 3\n        n //= 3\n        cnt[res] += 1\n    print(int(2 ** (cnt[1] - 1) * (3 ** (cnt[2] + 1) - 1)) % (10 ** 9 + 7))", "def baseN(num, b, numerals='0123456789abcdefghijklmnopqrstuvwxyz'):\n    return num == 0 and numerals[0] or baseN(num // b, b, numerals).lstrip(numerals[0]) + numerals[num % b]\nMOD = 10 ** 9 + 7\n\ndef solve(n):\n    (x, r, s) = (baseN(n, 3), 0, 0)\n    for i in range(len(x)):\n        if x[i] == '1':\n            r += 1\n        if x[i] == '2':\n            s += 1\n    if r >= 1:\n        v1 = pow(2, r - 1, MOD)\n    else:\n        v1 = pow(2, r - 1)\n    print(int((v1 * (pow(3, s + 1, MOD) - 1) + MOD) % MOD))\nfor i in range(int(input())):\n    solve(int(input()))", "def baseN(num, b, numerals='0123456789abcdefghijklmnopqrstuvwxyz'):\n    return num == 0 and numerals[0] or baseN(num // b, b, numerals).lstrip(numerals[0]) + numerals[num % b]\nMOD = 10 ** 9 + 7\n\ndef solve(n):\n    (x, r, s) = (baseN(n, 3), 0, 0)\n    for i in range(len(x)):\n        if x[i] == '1':\n            r += 1\n        if x[i] == '2':\n            s += 1\n    if r >= 1:\n        v1 = pow(2, r - 1, MOD)\n    else:\n        v1 = pow(2, r - 1)\n    print(int((v1 * (pow(3, s + 1, MOD) - 1) + MOD) % MOD))\nfor i in range(int(input())):\n    solve(int(input()))", "def baseN(num, b, numerals='0123456789abcdefghijklmnopqrstuvwxyz'):\n    return num == 0 and numerals[0] or baseN(num // b, b, numerals).lstrip(numerals[0]) + numerals[num % b]\nMOD = 10 ** 9 + 7\n\ndef solve(n):\n    x = baseN(n, 3)\n    r = 0\n    s = 0\n    for i in range(len(x)):\n        if x[i] == '1':\n            r += 1\n        if x[i] == '2':\n            s += 1\n    if r >= 1:\n        v1 = pow(2, r - 1, MOD)\n    else:\n        v1 = pow(2, r - 1)\n    ans = (v1 * (pow(3, s + 1, MOD) - 1) + MOD) % MOD\n    print(int(ans))\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    solve(n)", "cnt = [0 for i in range(0, 3)]\n\ndef convert(n):\n    while n:\n        cnt[n % 3] = cnt[n % 3] + 1\n        n = n // 3\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    cnt[0] = 0\n    cnt[1] = 0\n    cnt[2] = 0\n    convert(n)\n    print(int(2 ** (cnt[1] - 1) * (3 ** (cnt[2] + 1) - 1)) % (10 ** 9 + 7))"]