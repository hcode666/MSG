["n = int(input())\nrecipes = {}\nfor i in range(n):\n    (recipe, priority) = input().split()\n    priority = int(priority)\n    recipes[recipe] = priority\nq = int(input())\nfor i in range(q):\n    query = input().strip()\n    max_priority = -10 ** 9 - 1\n    max_recipe = 'NO'\n    for recipe in recipes:\n        if recipe.startswith(query) and recipes[recipe] > max_priority:\n            max_priority = recipes[recipe]\n            max_recipe = recipe\n    print(max_recipe)", "n = int(input())\nrecipes = {}\nfor i in range(n):\n    (recipe, priority) = input().split()\n    priority = int(priority)\n    recipes[recipe] = priority\nq = int(input())\nfor i in range(q):\n    query = input().strip()\n    max_priority = -10 ** 9 - 1\n    max_recipe = 'NO'\n    for recipe in recipes:\n        if recipe.startswith(query) and recipes[recipe] > max_priority:\n            max_priority = recipes[recipe]\n            max_recipe = recipe\n    print(max_recipe)", "n = int(input())\nrecipes = {}\nfor i in range(n):\n    (recipe, priority) = input().split()\n    priority = int(priority)\n    recipes[recipe] = priority\nq = int(input())\nfor i in range(q):\n    query = input().strip()\n    max_priority = -10 ** 9 - 1\n    max_recipe = 'NO'\n    for recipe in recipes:\n        if recipe.startswith(query) and recipes[recipe] > max_priority:\n            max_priority = recipes[recipe]\n            max_recipe = recipe\n    print(max_recipe)", "S = []\nfor _ in range(int(input())):\n    (s, v) = input().split()\n    v = int(v)\n    S.append([v, s])\nS.sort(reverse=True)\nfor _ in range(int(input())):\n    s = input()\n    found = False\n    for i in range(len(S)):\n        if S[i][1].find(s) == 0:\n            print(S[i][1])\n            found = True\n            break\n    if not found:\n        print('NO')", "S = []\nfor _ in range(int(input())):\n    (s, v) = input().split()\n    v = int(v)\n    S.append([v, s])\nS.sort(reverse=True)\nfor _ in range(int(input())):\n    s = input()\n    found = False\n    for i in range(len(S)):\n        if S[i][1].find(s) == 0:\n            print(S[i][1])\n            found = True\n            break\n    if not found:\n        print('NO')", "S = []\nfor _ in range(int(input())):\n    (s, v) = input().split()\n    v = int(v)\n    S.append([v, s])\nS.sort(reverse=True)\nfor _ in range(int(input())):\n    s = input()\n    found = False\n    for i in range(len(S)):\n        if S[i][1].find(s) == 0:\n            print(S[i][1])\n            found = True\n            break\n    if not found:\n        print('NO')", "S = []\nfor _ in range(int(input())):\n    (s, v) = input().split()\n    v = int(v)\n    S.append([v, s])\nS.sort(reverse=True)\nfor _ in range(int(input())):\n    s = input()\n    found = False\n    for i in range(len(S)):\n        if S[i][1].find(s) == 0:\n            print(S[i][1])\n            found = True\n            break\n    if not found:\n        print('NO')", "S = []\nfor _ in range(int(input())):\n    (s, v) = input().split()\n    v = int(v)\n    S.append([v, s])\nS.sort(reverse=True)\nfor _ in range(int(input())):\n    s = input()\n    found = False\n    for i in range(len(S)):\n        if S[i][1].find(s) == 0:\n            print(S[i][1])\n            found = True\n            break\n    if not found:\n        print('NO')", "import sys\nt = int(input())\nlist1 = []\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    num = ''\n    for i in range(len(s)):\n        if s[n - i - 1] == ' ':\n            list1.append([s[0:n - i - 1], int(num)])\n            break\n        else:\n            num = s[n - i - 1] + num\nn = int(input())\nfor _ in range(n):\n    s = input()\n    x = len(s)\n    temp = 0\n    s_final = ''\n    j = 0\n    min_num = -1 * sys.maxsize\n    for j in range(t):\n        y = list1[j][0]\n        for i in range(x):\n            if s[i] == y[i]:\n                temp = temp + 1\n            else:\n                break\n        if temp == x and min_num < list1[j][1]:\n            min_num = list1[j][1]\n            s_final = y\n        temp = 0\n    if min_num == -1 * sys.maxsize:\n        print('NO')\n    else:\n        print(s_final)", "r = []\nfor _ in range(int(input())):\n    (s, i) = input().split()\n    r.append((s, int(i)))\nr = sorted(r, key=lambda x: x[1], reverse=True)\nfor _ in range(int(input())):\n    inp = input()\n    done = 0\n    for (s, i) in r:\n        if s[:len(inp)] == inp:\n            print(s)\n            done = 1\n            break\n    if not done:\n        print('NO')", "recipes = int(input())\nrecipes_dict = {}\nfor i in range(recipes):\n    (recipe, priority) = input().split()\n    recipes_dict[recipe] = int(priority)\nqueries = int(input())\nfor i in range(queries):\n    query = input()\n    ans = 'NO'\n    priority = -10 ** 9 - 1\n    for j in recipes_dict:\n        if j.startswith(query) and recipes_dict[j] > priority:\n            ans = j\n            priority = recipes_dict[j]\n    print(ans)", "recipes = int(input())\nrecipes_dict = {}\nfor i in range(recipes):\n    (recipe, priority) = input().split()\n    recipes_dict[recipe] = int(priority)\nqueries = int(input())\nfor i in range(queries):\n    query = input()\n    ans = 'NO'\n    priority = -10 ** 9 - 1\n    for j in recipes_dict:\n        if j.startswith(query) and recipes_dict[j] > priority:\n            ans = j\n            priority = recipes_dict[j]\n    print(ans)", "recipes = int(input())\nrecipes_dict = {}\nfor i in range(recipes):\n    (recipe, priority) = input().split()\n    recipes_dict[recipe] = int(priority)\nqueries = int(input())\nfor i in range(queries):\n    query = input()\n    ans = 'NO'\n    priority = -10 ** 9 - 1\n    for j in recipes_dict:\n        if j.startswith(query) and recipes_dict[j] > priority:\n            ans = j\n            priority = recipes_dict[j]\n    print(ans)", "recipes = int(input())\nrecipes_dict = {}\nfor i in range(recipes):\n    (recipe, priority) = input().split()\n    recipes_dict[recipe] = int(priority)\nqueries = int(input())\nfor i in range(queries):\n    query = input()\n    ans = 'NO'\n    priority = -10 ** 9 - 1\n    for j in recipes_dict:\n        if j.startswith(query) and recipes_dict[j] > priority:\n            ans = j\n            priority = recipes_dict[j]\n    print(ans)", "n = int(input())\na = []\nb = []\nfor z in range(n):\n    s = input().split()\n    a.append(s[0])\n    b.append(int(s[1]))\nq = int(input())\nfor i in range(q):\n    x = input()\n    m = -10 ** 10\n    for k in range(n):\n        y = a[k]\n        if x in y and x == y[0:len(x)]:\n            m = max(m, b[k])\n    if m == -10 ** 10:\n        print('NO')\n    else:\n        j = b.index(m)\n        print(a[j])", "n = int(input())\na = []\nb = []\nfor z in range(n):\n    s = input().split()\n    a.append(s[0])\n    b.append(int(s[1]))\nq = int(input())\nfor i in range(q):\n    x = input()\n    m = -10 ** 10\n    for k in range(n):\n        y = a[k]\n        if x in y and x == y[0:len(x)]:\n            m = max(m, b[k])\n    if m == -10 ** 10:\n        print('NO')\n    else:\n        j = b.index(m)\n        print(a[j])", "n = int(input())\nrecipe = []\nfor _ in range(n):\n    (si, vi) = map(str, input().split())\n    recipe.append([si, int(vi)])\nrecipe.sort(key=lambda x: x[1], reverse=True)\nfor i in range(int(input())):\n    q = input()\n    for j in range(len(recipe)):\n        if q == recipe[j][0][:len(q)]:\n            print(recipe[j][0])\n            break\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\n\ndef rii():\n    return range(int(input().strip()))\n\ndef ii():\n    return int(input().strip())\n\ndef mii():\n    return map(int, input().strip().split(' '))\n\ndef lmii():\n    return list(map(int, input().strip().split(' ')))\n\ndef si():\n    return str(input().strip())\nfrom operator import itemgetter\nfailure = 'NO'\n\nclass Recipe(dict):\n\n    def starts_with(self, start_of_key):\n        return sorted([(key, self[key]) for key in self if key.startswith(start_of_key)], reverse=True, key=itemgetter(1))\n\ndef solve(*args):\n    (r, starts) = args\n    for s in starts:\n        ss = r.starts_with(s)\n        if len(ss) > 0:\n            print(ss[0][0])\n        else:\n            print(failure)\n\ndef do_codechef():\n    n = ii()\n    r = Recipe()\n    for _ in range(n):\n        (x, y) = input().split(' ')\n        r[x] = int(y.strip())\n    q = ii()\n    starts = [input().strip() for x in range(q)]\n    solve(r, starts)\ndo_codechef()\nexit()", "di = {}\nli = []\nlis = []\nfor i in range(int(input())):\n    (s, n) = map(str, input().split())\n    di[n] = s\n    li.append(int(n))\nli.sort(reverse=True)\nfor i in li:\n    lis.append(di[str(i)])\nfor i in range(int(input())):\n    q = input()\n    for j in range(len(lis)):\n        if q in lis[j] and q == lis[j][0:len(q)]:\n            print(lis[j])\n            break\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\n\ndef rii():\n    return range(int(input().strip()))\n\ndef ii():\n    return int(input().strip())\n\ndef mii():\n    return map(int, input().strip().split(' '))\n\ndef lmii():\n    return list(map(int, input().strip().split(' ')))\n\ndef si():\n    return str(input().strip())\nfrom operator import itemgetter\nfailure = 'NO'\n\nclass Recipe(dict):\n\n    def starts_with(self, start_of_key):\n        return sorted([(key, self[key]) for key in self if key.startswith(start_of_key)], reverse=True, key=itemgetter(1))\n\ndef solve(*args):\n    (r, starts) = args\n    for s in starts:\n        ss = r.starts_with(s)\n        if len(ss) > 0:\n            print(ss[0][0])\n        else:\n            print(failure)\n\ndef do_codechef():\n    n = ii()\n    r = Recipe()\n    for _ in range(n):\n        (x, y) = input().split(' ')\n        r[x] = int(y.strip())\n    q = ii()\n    starts = [input().strip() for x in range(q)]\n    solve(r, starts)\ndo_codechef()\nexit()", "import sys\ninput = sys.stdin.readline\n\ndef rii():\n    return range(int(input().strip()))\n\ndef ii():\n    return int(input().strip())\n\ndef mii():\n    return map(int, input().strip().split(' '))\n\ndef lmii():\n    return list(map(int, input().strip().split(' ')))\n\ndef si():\n    return str(input().strip())\nfrom operator import itemgetter\nfailure = 'NO'\n\nclass Recipe(dict):\n\n    def starts_with(self, start_of_key):\n        return sorted([(key, self[key]) for key in self if key.startswith(start_of_key)], reverse=True, key=itemgetter(1))\n\ndef solve(*args):\n    (r, starts) = args\n    for s in starts:\n        ss = r.starts_with(s)\n        if len(ss) > 0:\n            print(ss[0][0])\n        else:\n            print(failure)\n\ndef do_codechef():\n    n = ii()\n    r = Recipe()\n    for _ in range(n):\n        (x, y) = input().split(' ')\n        r[x] = int(y.strip())\n    q = ii()\n    starts = [input().strip() for x in range(q)]\n    solve(r, starts)\ndo_codechef()\nexit()", "import sys\ninput = sys.stdin.readline\n\ndef rii():\n    return range(int(input().strip()))\n\ndef ii():\n    return int(input().strip())\n\ndef mii():\n    return map(int, input().strip().split(' '))\n\ndef lmii():\n    return list(map(int, input().strip().split(' ')))\n\ndef si():\n    return str(input().strip())\nfrom operator import itemgetter\nfailure = 'NO'\n\nclass Recipe(dict):\n\n    def starts_with(self, start_of_key):\n        return sorted([(key, self[key]) for key in self if key.startswith(start_of_key)], reverse=True, key=itemgetter(1))\n\ndef solve(*args):\n    (r, starts) = args\n    for s in starts:\n        ss = r.starts_with(s)\n        if len(ss) > 0:\n            print(ss[0][0])\n        else:\n            print(failure)\n\ndef do_codechef():\n    n = ii()\n    r = Recipe()\n    for _ in range(n):\n        (x, y) = input().split(' ')\n        r[x] = int(y.strip())\n    q = ii()\n    starts = [input().strip() for x in range(q)]\n    solve(r, starts)\ndo_codechef()\nexit()", "di = {}\nli = []\nlis = []\nfor i in range(int(input())):\n    (s, n) = map(str, input().split())\n    di[n] = s\n    li.append(int(n))\nli.sort(reverse=True)\nfor i in li:\n    lis.append(di[str(i)])\nfor i in range(int(input())):\n    q = input()\n    for j in range(len(lis)):\n        if q in lis[j] and q == lis[j][0:len(q)]:\n            print(lis[j])\n            break\n    else:\n        print('NO')", "di = {}\nli = []\nlis = []\nfor i in range(int(input())):\n    (s, n) = map(str, input().split())\n    di[n] = s\n    li.append(int(n))\nli.sort(reverse=True)\nfor i in li:\n    lis.append(di[str(i)])\nfor i in range(int(input())):\n    q = input()\n    for j in range(len(lis)):\n        if q in lis[j] and q == lis[j][0:len(q)]:\n            print(lis[j])\n            break\n    else:\n        print('NO')", "di = {}\nli = []\nlis = []\nfor i in range(int(input())):\n    (s, n) = map(str, input().split())\n    di[n] = s\n    li.append(int(n))\nli.sort(reverse=True)\nfor i in li:\n    lis.append(di[str(i)])\nfor i in range(int(input())):\n    q = input()\n    for j in range(len(lis)):\n        if q in lis[j] and q == lis[j][0:len(q)]:\n            print(lis[j])\n            break\n    else:\n        print('NO')", "n = int(input())\na = []\nb = []\nfor z in range(n):\n    s = input().split()\n    a.append(s[0])\n    b.append(int(s[1]))\nq = int(input())\nfor i in range(q):\n    x = input()\n    m = -10 ** 10\n    for k in range(n):\n        y = a[k]\n        if x in y and x == y[0:len(x)]:\n            m = max(m, b[k])\n    if m == -10 ** 10:\n        print('NO')\n    else:\n        j = b.index(m)\n        print(a[j])", "n = int(input())\na = []\nb = []\nfor _ in range(n):\n    s = input().split()\n    a.append(s[0])\n    b.append(int(s[1]))\nq = int(input())\nfor i in range(q):\n    x = input()\n    m = -10 ** 10\n    for k in range(n):\n        y = a[k]\n        if x in y and x == y[0:len(x)]:\n            m = max(m, b[k])\n    if m == -10 ** 10:\n        print('NO')\n    else:\n        j = b.index(m)\n        print(a[j])", "n = int(input())\na = []\nb = []\nfor i in range(n):\n    s = input().split()\n    a.append(s[0])\n    b.append(int(s[1]))\nq = int(input())\nfor i in range(q):\n    x = input()\n    m = -10 ** 10\n    for k in range(n):\n        y = a[k]\n        if x in y and x == y[0:len(x)]:\n            m = max(m, b[k])\n    if m == -10 ** 10:\n        print('NO')\n    else:\n        j = b.index(m)\n        print(a[j])", "n = int(input())\na = []\nb = []\nfor i in range(n):\n    s = input().split()\n    a.append(s[0])\n    b.append(int(s[1]))\nq = int(input())\nfor i in range(q):\n    x = input()\n    m = -10 ** 10\n    for k in range(n):\n        y = a[k]\n        if x in y and x == y[0:len(x)]:\n            m = max(m, b[k])\n    if m == -10 ** 10:\n        print('NO')\n    else:\n        j = b.index(m)\n        print(a[j])", "nr = int(input())\nd = {}\nfor r in range(nr):\n    (s, v) = map(str, input().split())\n    d[int(v)] = s\nq = int(input())\nlis = []\nfor i in range(q):\n    lis.append(input())\nl = list(d.keys())\nl.sort(reverse=True)\nans = 'NO'\nfor j in lis:\n    ans = 'NO'\n    for k in l:\n        if len(j) <= len(d[k]):\n            a = d[k]\n            if j == a[0:len(j)]:\n                ans = a\n                break\n    print(ans)", "n = int(input())\nd = dict()\nfor _ in range(n):\n    aa = input().split()\n    s = aa[0]\n    v = int(aa[1])\n    d[s] = v\nq = int(input())\nfor _ in range(q):\n    qi = input()\n    value = None\n    recep = None\n    for i in d:\n        if i.startswith(qi):\n            if value is None or value < d[i]:\n                value = d[i]\n                recep = i\n    if recep == None:\n        print('NO')\n    else:\n        print(recep)", "n = int(input())\nd = dict()\nfor _ in range(n):\n    aa = input().split()\n    s = aa[0]\n    v = int(aa[1])\n    d[s] = v\nq = int(input())\nfor _ in range(q):\n    qi = input()\n    value = None\n    recep = None\n    for i in d:\n        if i.startswith(qi):\n            if value is None or value < d[i]:\n                value = d[i]\n                recep = i\n    if recep == None:\n        print('NO')\n    else:\n        print(recep)", "import re\nn = int(input())\nl = []\nfor _ in range(n):\n    l.append(input().split())\n    l[-1][1] = int(l[-1][1])\nl.sort(key=lambda x: x[1], reverse=True)\nq = int(input())\nfor _ in range(q):\n    s = '^' + input()\n    for k in l:\n        if re.findall(s, k[0]):\n            print(k[0])\n            break\n    else:\n        print('NO')", "import re\nn = int(input())\nl = []\nfor _ in range(n):\n    l.append(input().split())\n    l[-1][1] = int(l[-1][1])\nl.sort(key=lambda x: x[1], reverse=True)\nq = int(input())\nfor _ in range(q):\n    s = '^' + input()\n    for k in l:\n        if re.findall(s, k[0]):\n            print(k[0])\n            break\n    else:\n        print('NO')", "N = int(input())\ndic = {}\nfor i in range(N):\n    (s, v) = input().split()\n    v = int(v)\n    dic[s] = v\nfor i in range(int(input())):\n    S = input()\n    m = -20000000009\n    q = ''\n    for (i, j) in dic.items():\n        if i[:len(S)] == S:\n            if j > m:\n                q = i\n                m = j\n    if len(q) == 0:\n        print('NO')\n    else:\n        print(q)", "n = int(input())\ns = []\na = []\nfor i in range(n):\n    (si, vi) = input().split()\n    vi = int(vi)\n    a.append(vi)\n    s.append(si)\nq = int(input())\nfor j in range(0, q):\n    qi = input()\n    ma = -20000000009\n    pos = -1\n    for k in range(0, n):\n        if s[k].startswith(qi):\n            if a[k] > ma:\n                pos = k\n                ma = a[k]\n    if pos == -1:\n        print('NO')\n    else:\n        print(s[pos])", "n = int(input())\ns = []\na = []\nfor i in range(n):\n    (si, vi) = input().split()\n    vi = int(vi)\n    a.append(vi)\n    s.append(si)\nq = int(input())\nfor j in range(0, q):\n    qi = input()\n    ma = -20000000009\n    pos = -1\n    for k in range(0, n):\n        if s[k].startswith(qi):\n            if a[k] > ma:\n                pos = k\n                ma = a[k]\n    if pos == -1:\n        print('NO')\n    else:\n        print(s[pos])", "res = []\nfor _ in range(int(input())):\n    (a, b) = map(str, input().split())\n    res.append([a, int(b)])\nres.sort(key=lambda x: x[-1])\nfor _ in range(int(input())):\n    check = input().strip()\n    f = 1\n    for i in range(len(res) - 1, -1, -1):\n        if res[i][0][:len(check)] == check:\n            f = 0\n            ans = res[i][0]\n            break\n    if f == 1:\n        print('NO')\n    elif f == 0:\n        print(ans)", "class TrieNode:\n\n    def __init__(self):\n        self.children = [None] * 27\n        self.ispresent = 0\n        self.priority = 'aa'\n        self.index = -1\n\nclass Trie:\n\n    def __init__(self):\n        self.root = self.getnode()\n\n    def getnode(self):\n        return TrieNode()\n\n    def getind(self, ch):\n        if ch == '-':\n            return 26\n        return ord(ch) - 97\n\n    def insert(self, key, pos, pri):\n        curr = self.root\n        l = len(key)\n        for i in range(l):\n            place = self.getind(key[i])\n            if curr.children[place] == None:\n                curr.children[place] = self.getnode()\n                curr = curr.children[place]\n                curr.index = pos\n                curr.priority = pri\n            else:\n                curr = curr.children[place]\n                if pri > curr.priority:\n                    curr.priority = pri\n                    curr.index = pos\n        curr.ispresent = 1\n\n    def search(self, key):\n        curr = self.root\n        l = len(key)\n        for i in range(l):\n            place = self.getind(key[i])\n            if curr.children[place] == None:\n                return -1\n            curr = curr.children[place]\n        return curr.index\ndata = Trie()\nn = int(input())\nstrings = []\nfor i in range(n):\n    (string, pri) = input().split()\n    pri = int(pri)\n    data.insert(string, i, pri)\n    strings.append(string)\nq = int(input())\nfor i in range(q):\n    start = input()\n    ans = data.search(start)\n    if ans == -1:\n        print('NO')\n    else:\n        print(strings[ans])", "n = int(input())\nli = []\nfor i in range(n):\n    (string, pri) = input().split()\n    pri = int(pri)\n    li.append([string, pri])\nli.sort(key=lambda x: x[1], reverse=True)\nq = int(input())\nfor i in range(q):\n    start = input()\n    f = 0\n    for i in range(n):\n        if li[i][0].startswith(start):\n            f = 1\n            print(li[i][0])\n            break\n    if not f:\n        print('NO')", "a = int(input())\nb = []\nfor _ in range(a):\n    aa = input().split()\n    b.append((aa[0], int(aa[1])))\nb = sorted(b, key=lambda x: x[1], reverse=True)\nab = int(input())\nfor i in range(ab):\n    cc = input()\n    for i in b:\n        if len(cc) <= len(i[0]) and i[0][:len(cc)] == cc:\n            print(i[0])\n            break\n    else:\n        print('NO')", "class trienode:\n\n    def __init__(self):\n        self.children = [None] * 27\n        self.ispresent = 0\n        self.priority = 'aa'\n        self.index = -1\n\nclass trie:\n\n    def __init__(self):\n        self.root = self.getnode()\n\n    def getnode(self):\n        return trienode()\n\n    def getindex(self, ch):\n        if ch != '-':\n            return ord(ch) - ord('a')\n        else:\n            return 26\n\n    def insert(self, key, pos, pri):\n        current = self.root\n        l = len(key)\n        for i in range(l):\n            place = self.getindex(key[i])\n            if current.children[place] == None:\n                current.children[place] = self.getnode()\n                current = current.children[place]\n                current.index = pos\n                current.priority = pri\n            else:\n                current = current.children[place]\n                if current.priority < pri:\n                    current.priority = pri\n                    current.index = pos\n        current.ispresent = 1\n\n    def search(self, key):\n        current = self.root\n        l = len(key)\n        for i in range(l):\n            place = self.getindex(key[i])\n            if current.children[place] == None:\n                return -1\n            current = current.children[place]\n        return current.index\ndata = trie()\nn = int(input())\nstrs = []\nfor i in range(n):\n    temp = list(input().split())\n    s = temp[0].strip()\n    val = int(temp[1])\n    data.insert(s, i, val)\n    strs.append(s)\nq = int(input())\nfor i in range(q):\n    s = input()\n    ans = data.search(s)\n    if ans == -1:\n        print('NO')\n    else:\n        print(strs[ans])", "def twstr():\n    recipes = dict()\n    for n in range(int(input())):\n        (recipe, priority) = input().strip().split()\n        priority = int(priority)\n        recipes[priority] = recipe\n    for q in range(int(input())):\n        start = input().strip()\n        recipe = 'NO'\n        for prio in sorted(recipes.keys(), reverse=True):\n            if recipes[prio].startswith(start):\n                recipe = recipes[prio]\n                break\n        print(recipe)\ntwstr()", "n = int(input())\nl = []\nwhile n > 0:\n    n -= 1\n    (k, v) = input().split(' ')\n    v = int(v)\n    l.append([k, v])\nq = int(input())\nwhile q > 0:\n    q -= 1\n    s = input()\n    max = -1000000001\n    ans = ''\n    for (k, v) in l:\n        if k.startswith(s) and v > max:\n            max = v\n            ans = k\n    if ans == '':\n        print('NO')\n    else:\n        print(ans)", "numrec = int(input())\nreclst = {}\nrecval = []\nfor i in range(numrec):\n    (p, s) = input().split(' ')\n    reclst.update({s: p})\nquerynum = int(input())\nfor j in range(querynum):\n    query = input()\n    recval = [int(key) for (key, value) in reclst.items() if value.startswith(query)]\n    recval.sort(reverse=True)\n    try:\n        value1 = recval[0]\n        print(reclst.get(str(value1)))\n        recval.clear()\n    except:\n        print('NO')", "class Recipe:\n\n    def __init__(self, text, priority):\n        self.text = text\n        self.priority = priority\nN = int(input())\nrecipes = []\nfor n in range(N):\n    line = input().split()\n    recipes.append(Recipe(line[0], int(line[1])))\nrecipes.sort(key=lambda a: a.priority, reverse=True)\nQ = int(input())\noutput = []\nfor q in range(Q):\n    recipe_text = input()\n    recipe_index = -1\n    for r in range(len(recipes)):\n        if recipes[r].text.startswith(recipe_text):\n            recipe_index = r\n            break\n    if recipe_index == -1:\n        output.append('NO')\n    else:\n        output.append(recipes[recipe_index].text)\nprint('\\n'.join(output))", "class Recipe:\n\n    def __init__(self, text, priority):\n        self.text = text\n        self.priority = priority\nN = int(input())\nrecipes = []\nfor n in range(N):\n    line = input().split()\n    recipes.append(Recipe(line[0], int(line[1])))\nrecipes.sort(key=lambda a: a.priority, reverse=True)\nQ = int(input())\noutput = []\nfor q in range(Q):\n    recipe_text = input()\n    recipe_index = -1\n    for r in range(len(recipes)):\n        if len(recipe_text) <= len(recipes[r].text):\n            num_same = 0\n            for j in range(len(recipe_text)):\n                if recipe_text[j] == recipes[r].text[j]:\n                    num_same += 1\n                else:\n                    break\n            if num_same == len(recipe_text):\n                recipe_index = r\n                break\n    if recipe_index == -1:\n        output.append('NO')\n    else:\n        output.append(recipes[recipe_index].text)\nprint('\\n'.join(output))", "n = int(input())\nslist = []\nplist = []\nwhile n > 0:\n    n = n - 1\n    (s, p) = input().split()\n    slist.append(s)\n    plist.append(p)\nr = int(input())\nwhile r > 0:\n    r = r - 1\n    c = -10000000000\n    flag = 0\n    s1 = input()\n    for i in range(len(slist)):\n        dummy = slist[i]\n        v = dummy.find(s1)\n        if v == 0:\n            if int(c) < int(plist[i]):\n                dummy1 = dummy\n                c = plist[i]\n                flag = 1\n    if flag == 1:\n        print(dummy1)\n    else:\n        print('NO')", "import sys\nimport math\nfrom time import time\nfrom itertools import permutations, combinations\nimport collections\nimport functools\nfrom fractions import gcd, Fraction\nimport string\nimport operator\nimport bisect\n\nclass timed(object):\n\n    def __init__(self, func):\n        self.func = func\n\n    def __call__(self, *args):\n        t1 = time()\n        ret = self.func(*args)\n        dif_time = time() - t1\n        print('%s: returned %s in %f seconds' % (self.func.__name__, ret, dif_time))\n        return ret\n\ndef comp(f1, f2, *args):\n    t1 = time()\n    r1 = f1(*args) if f1 is not None else None\n    t2 = time()\n    r2 = f2(*args) if f2 is not None else None\n    t3 = time()\n    res = '%5s: %s in %f\\n%5s: %s in %f' % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)\n    if r1 != r2:\n        dr = '!! DIFFERENT RESULTS !!'\n        res = dr + '\\n' + res + '\\n' + dr\n    print(res)\n\ndef alg():\n    return 0\n\ndef main():\n    data = sys.stdin\n    nb = int(data.readline())\n    recipes = []\n    for i in range(nb):\n        (name, prio) = data.readline().split()\n        recipes.append((name, int(prio)))\n    recipes = [r for (r, p) in sorted(recipes, key=operator.itemgetter(1), reverse=True)]\n    nb = int(data.readline())\n    for icase in range(nb):\n        q = data.readline().strip()\n        found = False\n        for r in recipes:\n            if r.startswith(q):\n                print(r)\n                found = True\n                break\n        if not found:\n            print('NO')\nmain()", "def keyFn(tp):\n    return tp[1]\nn = int(input())\nrecipes = []\ni = 0\nwhile i < n:\n    line = input().split()\n    recipes.append((line[0], int(line[1])))\n    i += 1\nq = int(input())\ni = 0\nsrec = sorted(recipes, key=keyFn, reverse=True)\nwhile i < q:\n    name = input()\n    ans = 'NO'\n    for items in srec:\n        if items[0].startswith(name):\n            ans = items[0]\n            break\n    print(ans)\n    i += 1", "N = int(input())\ntemp_list = []\nfor i in range(N):\n    (r, p) = input().split()\n    temp_list.append((r, int(p)))\nrec_list = sorted(temp_list, key=lambda lis: lis[1], reverse=True)\nQ = int(input())\nfor i in range(Q):\n    current_rec = 'NO'\n    current_rec_pri = -10 ** 9\n    sfc = input()\n    sfc_len = len(sfc)\n    for j in range(N):\n        rec = rec_list[j][0]\n        rec_pri = rec_list[j][1]\n        if sfc == rec[:sfc_len] and rec_pri >= current_rec_pri:\n            current_rec = rec\n            current_rec_pri = rec_pri\n            break\n    print(current_rec)", "cookbook = dict()\nfor i in range(int(input())):\n    foo = input().split()\n    priority = int(foo[1])\n    cookbook[priority] = foo[0]\nit = [cookbook[i] for i in sorted(cookbook, reverse=True)]\nfor i in range(int(input())):\n    prefix = input().rstrip()\n    for j in it:\n        if j.startswith(prefix):\n            print(j)\n            break\n    else:\n        print('NO')"]