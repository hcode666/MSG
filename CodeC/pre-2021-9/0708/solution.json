["for z in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    if n == 1 or n == 2:\n        print(n)\n        continue\n\n    def gcd(x, y):\n        while y:\n            (x, y) = (y, x % y)\n        return x\n    g = a[0]\n    p = [0] * n\n    s = [0] * n\n    s[n - 1] = 1\n    p[0] = 1\n    for i in range(1, n):\n        p[i] = g\n        g = gcd(g, a[i])\n    g = a[n - 1]\n    for i in range(n - 2, -1, -1):\n        s[i] = g\n        g = gcd(g, a[i])\n    b = [0] * n\n    b[0] = s[0]\n    b[n - 1] = p[n - 1]\n    for i in range(1, n - 1):\n        b[i] = gcd(p[i], s[i])\n    s = sum(a)\n    m = (s - a[0] + b[0]) // b[0]\n    for i in range(1, n):\n        m = min(m, (s - a[i] + b[i]) // b[i])\n    print(m)", "for z in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    if n == 1 or n == 2:\n        print(n)\n        continue\n\n    def gcd(x, y):\n        while y:\n            (x, y) = (y, x % y)\n        return x\n    g = a[0]\n    p = [0] * n\n    s = [0] * n\n    s[n - 1] = 1\n    p[0] = 1\n    for i in range(1, n):\n        p[i] = g\n        g = gcd(g, a[i])\n    g = a[n - 1]\n    for i in range(n - 2, -1, -1):\n        s[i] = g\n        g = gcd(g, a[i])\n    b = [0] * n\n    b[0] = s[0]\n    b[n - 1] = p[n - 1]\n    for i in range(1, n - 1):\n        b[i] = gcd(p[i], s[i])\n    s = sum(a)\n    m = (s - a[0] + b[0]) // b[0]\n    for i in range(1, n):\n        m = min(m, (s - a[i] + b[i]) // b[i])\n    print(m)", "for z in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    if n == 1 or n == 2:\n        print(n)\n        continue\n\n    def gcd(x, y):\n        while y:\n            (x, y) = (y, x % y)\n        return x\n    g = a[0]\n    p = [0] * n\n    s = [0] * n\n    s[n - 1] = 1\n    p[0] = 1\n    for i in range(1, n):\n        p[i] = g\n        g = gcd(g, a[i])\n    g = a[n - 1]\n    for i in range(n - 2, -1, -1):\n        s[i] = g\n        g = gcd(g, a[i])\n    b = [0] * n\n    b[0] = s[0]\n    b[n - 1] = p[n - 1]\n    for i in range(1, n - 1):\n        b[i] = gcd(p[i], s[i])\n    s = sum(a)\n    m = (s - a[0] + b[0]) // b[0]\n    for i in range(1, n):\n        m = min(m, (s - a[i] + b[i]) // b[i])\n    print(m)", "def li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\nfrom math import gcd\nfor tastcas in range(int(input())):\n    n = ii()\n    a = li()\n    m = s = sum(a)\n    g = 0\n    b = [0] * (n + 1)\n    b[n - 1] = a[-1]\n    if n < 3:\n        print(n)\n        continue\n    for i in range(n - 2, -1, -1):\n        b[i] = gcd(a[i], b[i + 1])\n    for i in range(n):\n        y = gcd(g, b[i + 1])\n        y = (s - a[i] + y) // y\n        g = gcd(g, a[i])\n        if m > y:\n            m = y\n    print(m)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nT = int(input())\nfor test in range(T):\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    if n == 1:\n        print(1)\n        continue\n    s = 0\n    G = []\n    for i in range(n + 1):\n        if i < n:\n            s += A[i]\n        G.append(0)\n    G[n - 1] = A[-1]\n    for i in range(n - 2, -1, -1):\n        G[i] = gcd(A[i], G[i + 1])\n    m = s\n    g = 0\n    for i in range(n):\n        y = gcd(g, G[i + 1])\n        y = (s - A[i] + y) // y\n        g = gcd(g, A[i])\n        if y < m:\n            m = y\n    print(m)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nT = int(input())\nfor test in range(T):\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    if n == 1:\n        print(1)\n        continue\n    s = 0\n    G = []\n    for i in range(n + 1):\n        if i < n:\n            s += A[i]\n        G.append(0)\n    G[n - 1] = A[-1]\n    for i in range(n - 2, -1, -1):\n        G[i] = gcd(A[i], G[i + 1])\n    m = s\n    g = 0\n    for i in range(n):\n        y = gcd(g, G[i + 1])\n        y = (s - A[i] + y) // y\n        g = gcd(g, A[i])\n        if y < m:\n            m = y\n    print(m)", "from sys import stdin, stdout\nfrom heapq import heapify, heappush, heappop\nimport sys\nfrom collections import Counter\nfrom copy import deepcopy\nimport math\nsys.setrecursionlimit(10 ** 5)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    ans = []\n    for p in range(n + 1):\n        if prime[p]:\n            ans.append(p)\n    return ans\na = [0] * 1000000\nf = [0] * 1000000\nb = [0] * 1000000\n\ndef mapinput():\n    return map(int, stdin.readline().split())\n\ndef strinput():\n    return stdin.readline().strip()\n\ndef listinput():\n    return list(map(int, stdin.readline().split()))\n\ndef intinput():\n    return int(stdin.readline().strip())\nfor test in range(intinput()):\n\n    def solve():\n        n = intinput()\n        arr = listinput()\n        s = o = 0\n        arr.sort()\n        for i in range(n):\n            a[i + 1] = arr[i]\n        f[1] = a[1]\n        b[n] = a[n]\n        i = n - 1\n        while i > 0:\n            b[i] = gcd(b[i + 1], a[i])\n            i -= 1\n        i = 2\n        while i <= n:\n            f[i] = gcd(f[i - 1], a[i])\n            i += 1\n        for i in range(1, n + 1):\n            s += a[i]\n        m = 99999999999999999999999\n        i = 1\n        while i <= n:\n            o = (s - a[i] + gcd(f[i - 1], b[i + 1])) // gcd(f[i - 1], b[i + 1])\n            m = min(o, m)\n            i += 1\n        return int(m)\n    print(solve())", "import math\n\ndef hcf(a, b):\n    if a > b:\n        (a, b) = (b, a)\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print('1')\n        continue\n    fwd = [1] * n\n    bwd = [1] * n\n    fwd[0] = a[0]\n    bwd[-1] = a[-1]\n    gcd = [0] * n\n    for i in range(1, n):\n        fwd[i] = hcf(fwd[i - 1], a[i])\n    for i in range(n - 2, -1, -1):\n        bwd[i] = hcf(bwd[i + 1], a[i])\n    gcd[0] = bwd[1]\n    gcd[n - 1] = fwd[n - 2]\n    for i in range(1, n - 1):\n        gcd[i] = hcf(fwd[i - 1], bwd[i + 1])\n    total = sum(a)\n    ans = math.inf\n    for i in range(n):\n        x = (total - a[i]) // gcd[i] + 1\n        ans = min(x, ans)\n    print(ans)", "def gcd(a, b):\n    if a > b:\n        (a, b) = (b, a)\n    elif a == b:\n        return a\n    while a > 0:\n        (a, b) = (b % a, a)\n    return b\nfor _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    if n == 1:\n        ans = 1\n    elif n == 2:\n        ans = 2\n    else:\n        total = sum(x)\n        pref = [0] * n\n        suf = [0] * n\n        for i in range(1, n):\n            pref[i] = gcd(pref[i - 1], x[i - 1])\n            suf[n - i - 1] = gcd(suf[n - i], x[n - i])\n        ans = (total - x[0]) // gcd(pref[0], suf[0])\n        for i in range(1, n):\n            temp = (total - x[i]) // gcd(pref[i], suf[i])\n            if temp < ans:\n                ans = temp\n        ans += 1\n    print(ans)", "from sys import stdin, stdout\nfrom heapq import heapify, heappush, heappop\nimport sys\nfrom collections import Counter\nfrom copy import deepcopy\nimport math\nsys.setrecursionlimit(10 ** 5)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    ans = []\n    for p in range(n + 1):\n        if prime[p]:\n            ans.append(p)\n    return ans\na = [0] * 1000000\nf = [0] * 1000000\nb = [0] * 1000000\n\ndef mapinput():\n    return map(int, stdin.readline().split())\n\ndef strinput():\n    return stdin.readline().strip()\n\ndef listinput():\n    return list(map(int, stdin.readline().split()))\n\ndef intinput():\n    return int(stdin.readline().strip())\nfor test in range(intinput()):\n\n    def solve():\n        n = intinput()\n        arr = listinput()\n        s = o = 0\n        arr.sort()\n        for i in range(n):\n            a[i + 1] = arr[i]\n        f[1] = a[1]\n        b[n] = a[n]\n        i = n - 1\n        while i > 0:\n            b[i] = gcd(b[i + 1], a[i])\n            i -= 1\n        i = 2\n        while i <= n:\n            f[i] = gcd(f[i - 1], a[i])\n            i += 1\n        for i in range(1, n + 1):\n            s += a[i]\n        m = 99999999999999999999999\n        i = 1\n        while i <= n:\n            o = (s - a[i] + gcd(f[i - 1], b[i + 1])) // gcd(f[i - 1], b[i + 1])\n            m = min(o, m)\n            i += 1\n        return int(m)\n    print(solve())", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    if n == 1:\n        print(1)\n        continue\n    elif n == 2:\n        print(2)\n        continue\n    prefix = [arr[0]]\n    for i in range(1, n):\n        prefix.append(gcd(arr[i], prefix[i - 1]))\n    suffix = [0] * n\n    suffix[-2] = arr[-1]\n    i = n - 1\n    s = sum(arr)\n    ans = int(s / prefix[n - 1])\n    while i >= 0:\n        if i == n - 1:\n            x = int((s - arr[i]) / prefix[i - 1]) + 1\n        else:\n            suffix[i] = gcd(arr[i + 1], suffix[i + 1])\n        if i == 0:\n            x = int((s - arr[i]) / suffix[i]) + 1\n        else:\n            k = gcd(prefix[i - 1], suffix[i])\n            x = int((s - arr[i]) / k) + 1\n        ans = min(ans, x)\n        i -= 1\n    print(ans)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    if n == 1:\n        print(1)\n        continue\n    elif n == 2:\n        print(2)\n        continue\n    prefix = [arr[0]]\n    for i in range(1, n):\n        prefix.append(gcd(arr[i], prefix[i - 1]))\n    suffix = [0] * n\n    suffix[-2] = arr[-1]\n    i = n - 1\n    s = sum(arr)\n    ans = int(s / prefix[n - 1])\n    while i >= 0:\n        if i == n - 1:\n            x = int((s - arr[i]) / prefix[i - 1]) + 1\n        else:\n            suffix[i] = gcd(arr[i + 1], suffix[i + 1])\n        if i == 0:\n            x = int((s - arr[i]) / suffix[i]) + 1\n        else:\n            k = gcd(prefix[i - 1], suffix[i])\n            x = int((s - arr[i]) / k) + 1\n        ans = min(ans, x)\n        i -= 1\n    print(ans)", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    ans = float('inf')\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n        continue\n    sumo = 0\n    for i in l:\n        sumo += i\n    bwd = [l[-1]]\n    fwd = [l[0]]\n    for i in range(n - 2, -1, -1):\n        bwd.append(gcd(bwd[-1], l[i]))\n    bwd = bwd[::-1]\n    for i in range(1, n):\n        fwd.append(gcd(fwd[i - 1], l[i]))\n    main_arr = [1] * n\n    main_arr[0] = bwd[1]\n    main_arr[n - 1] = fwd[-2]\n    for i in range(1, n - 1):\n        main_arr[i] = gcd(bwd[i + 1], fwd[i - 1])\n    for i in range(n):\n        tmp = (sumo - l[i] + main_arr[i]) // main_arr[i]\n        ans = min(ans, tmp)\n    print(ans)", "from math import gcd\nfrom functools import reduce\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if len(a) == 1:\n        print(1)\n        continue\n    left = [0] * n\n    right = [0] * n\n    left[0] = 0\n    left[1] = a[0]\n    right[n - 1] = 0\n    right[n - 2] = a[n - 1]\n    for i in range(2, n):\n        left[i] = gcd(left[i - 1], a[i - 1])\n    for i in range(n - 3, -1, -1):\n        right[i] = gcd(right[i + 1], a[i + 1])\n    mid = [0] * n\n    mid[0] = right[0]\n    mid[n - 1] = left[n - 1]\n    for i in range(1, n - 1):\n        mid[i] = gcd(left[i], right[i])\n    sum1 = sum(a)\n    minvalue = 10 ** 16 + 7\n    for i in range(n):\n        value = (sum1 - a[i] + mid[i]) // mid[i]\n        if value < minvalue:\n            minvalue = value\n    print(minvalue)", "from sys import stdin\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nt = int(stdin.readline())\nwhile t:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    if n == 1:\n        print(1)\n    else:\n        sum_arr = sum(arr)\n        (leftGCD, rightGCD) = ([arr[0]], [arr[n - 1]])\n        for i in range(1, n):\n            leftGCD.append(find_gcd(leftGCD[i - 1], arr[i]))\n        for i in range(n - 2, -1, -1):\n            rightGCD.append(find_gcd(arr[i], rightGCD[n - i - 2]))\n        rightGCD.reverse()\n        final_ans = float('inf')\n        for i in range(0, n):\n            rem_gcd = -1\n            if i == 0:\n                rem_gcd = rightGCD[i + 1]\n            elif i == n - 1:\n                rem_gcd = leftGCD[i - 1]\n            else:\n                rem_gcd = find_gcd(rightGCD[i + 1], leftGCD[i - 1])\n            tmp = (sum_arr - arr[i]) // rem_gcd + 1\n            if final_ans > tmp:\n                final_ans = tmp\n        print(final_ans)\n    t -= 1", "try:\n    import math\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        A = list(map(int, input().split()))\n        A.sort()\n        f = []\n        f.append(A[0])\n        for i in range(1, n):\n            f.append(math.gcd(f[i - 1], A[i]))\n        b = []\n        b.append(A[n - 1])\n        for i in range(1, n):\n            b.append(math.gcd(b[i - 1], A[n - 1 - i]))\n        if n == 1 or n == 2:\n            print(n)\n        else:\n            ans = float('inf')\n            summ = sum(A)\n            for i in range(n):\n                if i == 0:\n                    x = b[n - 2]\n                elif i == n - 1:\n                    x = f[n - 2]\n                else:\n                    x = math.gcd(f[i - 1], b[n - 2 - i])\n                ans = int(min(ans, (summ - A[i] + x) / x))\n            print(ans)\nexcept Exception:\n    pass", "def gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n    else:\n        total = l[0]\n        prefix_gcd = [l[0]]\n        suffix_gcd = [l[-1]]\n        for i in range(1, n):\n            prefix_gcd.append(gcd(min(l[i], prefix_gcd[-1]), max(l[i], prefix_gcd[-1])))\n            total += l[i]\n        for i in range(n - 2, -1, -1):\n            suffix_gcd.append(gcd(min(l[i], suffix_gcd[-1]), max(l[i], suffix_gcd[-1])))\n        suffix_gcd = suffix_gcd[::-1]\n        best = min((total - l[0]) // suffix_gcd[1] + 1, (total - l[-1]) // prefix_gcd[-2] + 1)\n        for i in range(1, n - 1):\n            div = gcd(min(prefix_gcd[i - 1], suffix_gcd[i + 1]), max(prefix_gcd[i - 1], suffix_gcd[i + 1]))\n            check = (total - l[i]) // div + 1\n            best = min(best, check)\n        print(best)", "t = int(input())\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nwhile t:\n    n = int(input())\n    nums = list(map(int, input().split()))\n    if len(nums) <= 1:\n        print(1)\n    else:\n        left = [nums[0]]\n        for i in range(1, len(nums)):\n            left.append(find_gcd(left[i - 1], nums[i]))\n        right = [0] * n\n        right[n - 1] = nums[n - 1]\n        for i in range(n - 2, -1, -1):\n            right[i] = find_gcd(right[i + 1], nums[i])\n        total = sum(nums)\n        denomination = float('inf')\n        for i in range(n):\n            if i == 0:\n                no_of_notes = (total - nums[i] + right[i + 1]) // right[i + 1]\n                denomination = min(denomination, no_of_notes)\n            elif i == n - 1:\n                no_of_notes = (total - nums[i] + left[i - 1]) // left[n - 2]\n                denomination = min(denomination, no_of_notes)\n            else:\n                no_of_notes = (total - nums[i] + find_gcd(left[i - 1], right[i + 1])) // find_gcd(left[i - 1], right[i + 1])\n                denomination = min(denomination, no_of_notes)\n        print(denomination)\n    t -= 1", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n        continue\n    arr = [0] * (n + 1)\n    for i in range(n):\n        arr[i + 1] = l[i]\n    arr = sorted(arr)\n    pre = [0] * (n + 1)\n    suff = [0] * (n + 2)\n    pre[1] = arr[1]\n    suff[n] = arr[n]\n    i = n - 1\n    while i > 0:\n        suff[i] = math.gcd(suff[i + 1], arr[i])\n        i = i - 1\n    i = 2\n    while i <= n:\n        pre[i] = math.gcd(pre[i - 1], arr[i])\n        i = i + 1\n    sumi = sum(arr)\n    i = 1\n    mini = math.inf\n    while i <= n:\n        new = (sumi - arr[i] + math.gcd(pre[i - 1], suff[i + 1])) // math.gcd(pre[i - 1], suff[i + 1])\n        mini = min(new, mini)\n        i = i + 1\n    print(mini)", "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif b > a:\n        return gcd(b, a)\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(arr) == 1:\n        print(1)\n    else:\n        leftgcd = [0] * n\n        rightgcd = [0] * n\n        midgcd = [0] * n\n        temp = 0\n        for (key, val) in enumerate(arr):\n            leftgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        temp = 0\n        for i in range(n - 1, -1, -1):\n            key = i\n            val = arr[key]\n            rightgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        for i in range(n):\n            if leftgcd[i] == 0:\n                midgcd[i] = rightgcd[i]\n            elif rightgcd[i] == 0:\n                midgcd[i] = leftgcd[i]\n            else:\n                midgcd[i] = gcd(leftgcd[i], rightgcd[i])\n        mx = [0, 0]\n        for (key, val) in enumerate(midgcd):\n            mx = max(mx, [val, arr[key]])\n        for (key, val) in enumerate(midgcd):\n            if val == mx[0] and arr[key] == mx[1]:\n                temp = key\n                tempval = val\n        arr[temp] = tempval\n        sm = 0\n        for item in arr:\n            sm += item // tempval\n        print(sm)", "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif b > a:\n        return gcd(b, a)\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(arr) == 1:\n        print(1)\n    else:\n        leftgcd = [0] * n\n        rightgcd = [0] * n\n        midgcd = [0] * n\n        temp = 0\n        for (key, val) in enumerate(arr):\n            leftgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        temp = 0\n        for i in range(n - 1, -1, -1):\n            key = i\n            val = arr[key]\n            rightgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        for i in range(n):\n            if leftgcd[i] == 0:\n                midgcd[i] = rightgcd[i]\n            elif rightgcd[i] == 0:\n                midgcd[i] = leftgcd[i]\n            else:\n                midgcd[i] = gcd(leftgcd[i], rightgcd[i])\n        mx = [0, 0]\n        for (key, val) in enumerate(midgcd):\n            mx = max(mx, [val, arr[key]])\n        for (key, val) in enumerate(midgcd):\n            if val == mx[0] and arr[key] == mx[1]:\n                temp = key\n                tempval = val\n        arr[temp] = tempval\n        sm = 0\n        for item in arr:\n            sm += item // tempval\n        print(sm)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if len(a) == 1:\n        print(1)\n        continue\n    prefix = [0 for i in range(n + 2)]\n    suffix = [0 for i in range(n + 2)]\n    prefix[1] = a[0]\n    for i in range(2, n + 1):\n        prefix[i] = math.gcd(prefix[i - 1], a[i - 1])\n    suffix[n] = a[n - 1]\n    for i in range(n - 1, 0, -1):\n        suffix[i] = math.gcd(suffix[i + 1], a[i - 1])\n    p = []\n    ans = 0\n    if prefix[n - 1] >= suffix[2]:\n        p.append((sum(a[:n - 1]) + prefix[n - 1]) // prefix[n - 1])\n        ans = prefix[n - 1]\n    else:\n        p.append((sum(a[1:]) + suffix[2]) // suffix[2])\n        ans = suffix[2]\n    for i in range(2, n):\n        if math.gcd(prefix[i - 1], suffix[i + 1]) > ans:\n            r = math.gcd(prefix[i - 1], suffix[i + 1])\n            p.append((sum(a) - a[i - 1] + r) // r)\n            ans = r\n    print(p[-1])", "import collections\nfrom collections import defaultdict\nimport math\nfrom math import gcd\nfrom collections import Counter\nfor t in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    if n == 1:\n        print(1)\n        continue\n    left = [0] * n\n    right = [0] * n\n    (left[0], right[-1]) = (a[0], a[-1])\n    for i in range(1, n):\n        left[i] = gcd(a[i], left[i - 1])\n    for i in range(n - 2, -1, -1):\n        right[i] = gcd(a[i], right[i + 1])\n    s = sum(a)\n    ans = s // left[-1]\n    ans = min(ans, (s - a[0] + right[1]) // right[1])\n    ans = min(ans, (s - a[-1] + left[-2]) // left[-2])\n    for i in range(1, n - 1):\n        temp = gcd(left[i - 1], right[i + 1])\n        newsum = s - a[i] + temp\n        ans = min(ans, newsum // temp)\n    print(ans)", "def gcd(n, m):\n    if n == 0:\n        return m\n    else:\n        return gcd(m % n, n)\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n    else:\n        sum1 = sum(l)\n        pre = [0] * n\n        pre[0] = l[0]\n        suf = [0] * n\n        suf[-1] = l[-1]\n        for i in range(1, n):\n            pre[i] = gcd(pre[i - 1], l[i])\n        for i in range(n - 2, -1, -1):\n            suf[i] = gcd(suf[i + 1], l[i])\n        ans = sum1 // pre[-1]\n        for i in range(n):\n            if i == 0:\n                gcd1 = gcd(0, suf[i + 1])\n            elif i == n - 1:\n                gcd1 = gcd(pre[i - 1], 0)\n            else:\n                gcd1 = gcd(pre[i - 1], suf[i + 1])\n            sum2 = sum1 - l[i]\n            ans = min(ans, sum2 // gcd1 + 1)\n        print(ans)", "import math\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n    else:\n        sm = 0\n        for i in arr:\n            sm += i\n        h = [0] * n\n        f = [0] * n\n        b = [0] * n\n        f[0] = arr[0]\n        for i in range(1, n):\n            f[i] = math.gcd(f[i - 1], arr[i])\n        b[n - 1] = arr[n - 1]\n        for i in range(n - 2, -1, -1):\n            b[i] = math.gcd(b[i + 1], arr[i])\n        h[0] = b[1]\n        h[n - 1] = f[n - 2]\n        for i in range(1, n - 1):\n            h[i] = math.gcd(f[i - 1], b[i + 1])\n        mini = (sm - arr[0]) // h[0] + 1\n        for i in range(1, n):\n            curr = (sm - arr[i]) // h[i] + 1\n            if curr < mini:\n                mini = curr\n        print(mini)", "import math, sys\nfor _ in range(int(input())):\n    N = int(input())\n    arr = list(map(int, sys.stdin.readline().split()))\n    prefix = [0] * N\n    suffix = [0] * N\n    prefix[0] = arr[0]\n    suffix[N - 1] = arr[N - 1]\n    total = sum(arr)\n    notes = sys.maxsize\n    for i in range(1, N - 1):\n        prefix[i] = math.gcd(arr[i], prefix[i - 1])\n        suffix[N - 1 - i] = math.gcd(arr[N - i - 1], suffix[N - i])\n    if N > 1:\n        prefix[N - 1] = math.gcd(prefix[N - 2], arr[N - 1])\n        suffix[0] = math.gcd(suffix[1], arr[0])\n        for i in range(N):\n            if i == 0:\n                x = suffix[i + 1]\n                rq = 1 + (total - arr[i]) / x\n            elif i == N - 1:\n                x = prefix[N - 2]\n                rq = 1 + (total - arr[i]) / x\n            else:\n                x = math.gcd(prefix[i - 1], suffix[i + 1])\n                rq = 1 + (total - arr[i]) / x\n            if rq < notes:\n                notes = rq\n    else:\n        notes = 1\n    print(int(notes))", "from math import ceil, gcd\ninp = lambda x: map(int, x.split())\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(inp(input()))\n    gcd_p = [[0, 0]]\n    g = a[0]\n    for i in range(n - 1):\n        g = gcd(a[i], g)\n        gcd_p.append([g, i + 1])\n    g = a[n - 1]\n    for i in range(n - 1, 0, -1):\n        g = gcd(a[i], g)\n        if gcd_p[i - 1][0] == 0:\n            gcd_p[i - 1][0] = g\n        else:\n            gcd_p[i - 1][0] = gcd(gcd_p[i - 1][0], g)\n    (m1, i1, n1) = (0, 0, 0)\n    for i in range(n):\n        if m1 == 0 or gcd_p[i][0] > m1 or (gcd_p[i][0] == m1 and a[gcd_p[i][1]] > n1):\n            (m1, i1) = gcd_p[i]\n            n1 = a[i1]\n    cnt = 0\n    for i in range(n):\n        if i != i1:\n            cnt += a[i] // m1\n        else:\n            cnt += 1\n    print(cnt)", "import math, sys\nfor _ in range(int(input())):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    prefix = [0] * N\n    suffix = [0] * N\n    prefix[0] = arr[0]\n    suffix[N - 1] = arr[N - 1]\n    total = sum(arr)\n    notes = sys.maxsize\n    for i in range(1, N - 1):\n        prefix[i] = math.gcd(arr[i], prefix[i - 1])\n        suffix[N - 1 - i] = math.gcd(arr[N - i - 1], suffix[N - i])\n    if N > 1:\n        prefix[N - 1] = math.gcd(prefix[N - 2], arr[N - 1])\n        suffix[0] = math.gcd(suffix[1], arr[0])\n        for i in range(N):\n            if i == 0:\n                x = suffix[i + 1]\n                rq = 1 + (total - arr[i]) / x\n            elif i == N - 1:\n                x = prefix[N - 2]\n                rq = 1 + (total - arr[i]) / x\n            else:\n                x = math.gcd(prefix[i - 1], suffix[i + 1])\n                rq = 1 + (total - arr[i]) / x\n            if rq < notes:\n                notes = rq\n    else:\n        notes = 1\n    print(int(notes))", "from collections import defaultdict\nimport sys, io, os\nINP = sys.stdin.readline\ninp = lambda : [*map(int, INP().encode().split())]\nsinp = lambda : [*map(str, INP().split())]\nout = sys.stdout.write\n\ndef GCD(a, b):\n    if b == 0:\n        return a\n    else:\n        return GCD(b, a % b)\nfor _ in range(inp()[0]):\n    n = inp()[0]\n    d = defaultdict(int)\n    l = inp()\n    gcdpre = [l[0]]\n    gcdsf = [l[-1]]\n    total = l[0]\n    for i in range(1, n):\n        gcdpre.append(GCD(gcdpre[i - 1], l[i]))\n        gcdsf.append(GCD(gcdsf[i - 1], l[n - 1 - i]))\n        total += l[i]\n    ans = total // gcdpre[-1]\n    for i in range(n):\n        t = 0\n        if i != 0:\n            t = gcdpre[i - 1]\n        r = 0\n        if i != n - 1:\n            r = gcdsf[n - i - 2]\n        x = GCD(t, r)\n        if x != 0:\n            ans = min(ans, (total - l[i]) // x + 1)\n    print(ans)", "import math\nimport itertools\nfrom sys import stdin\nfrom functools import reduce\nfrom collections import deque\nfrom sys import setrecursionlimit\nfrom collections import defaultdict\ninput = stdin.readline\n\ndef I():\n    return int(input())\n\ndef IN():\n    return map(int, input().split())\n\ndef LI():\n    return list(map(int, input().split()))\n\ndef LIN(N):\n    return [list(map(int, input().split())) for _ in range(N)]\ngcd = math.gcd\nInf = float('Inf')\n\ndef solve():\n    n = I()\n    a = LI()\n    total = sum(a)\n    sum_ = [total - a[i] for i in range(n)]\n    if n == 1:\n        print(1)\n    else:\n        forward_gcd = [a[0]]\n        for i in range(1, n):\n            forward_gcd.append(gcd(forward_gcd[i - 1], a[i]))\n        backward_gcd = [1 for i in range(n)]\n        backward_gcd[n - 1] = a[n - 1]\n        for i in range(n - 2, -1, -1):\n            backward_gcd[i] = gcd(backward_gcd[i + 1], a[i])\n        gcd_ = [1 for i in range(n)]\n        gcd_[0] = backward_gcd[1]\n        gcd_[n - 1] = forward_gcd[n - 2]\n        for i in range(1, n - 1):\n            gcd_[i] = gcd(forward_gcd[i - 1], backward_gcd[i + 1])\n        ans = Inf\n        for i in range(n):\n            ans = min(ans, sum_[i] // gcd_[i] + 1)\n        print(ans)\n\ndef main():\n    t = 1\n    t = I()\n    for i in range(1, t + 1):\n        solve()\nmain()", "import math\nimport itertools\nfrom sys import stdin\nfrom functools import reduce\nfrom collections import deque\nfrom sys import setrecursionlimit\nfrom collections import defaultdict\nimport heapq\ninput = stdin.readline\n\ndef I():\n    return int(input())\n\ndef IN():\n    return map(int, input().split())\n\ndef LI():\n    return list(map(int, input().split()))\n\ndef LIN(N):\n    return [list(map(int, input().split())) for _ in range(N)]\ngcd = math.gcd\nInf = float('Inf')\n\ndef solve():\n    n = I()\n    a = LI()\n    total = sum(a)\n    sum_ = [total - a[i] for i in range(n)]\n    if n == 1:\n        print(1)\n    else:\n        forward_gcd = [a[0]]\n        for i in range(1, n):\n            forward_gcd.append(gcd(forward_gcd[i - 1], a[i]))\n        backward_gcd = [1 for i in range(n)]\n        backward_gcd[n - 1] = a[n - 1]\n        for i in range(n - 2, -1, -1):\n            backward_gcd[i] = gcd(backward_gcd[i + 1], a[i])\n        gcd_ = [1 for i in range(n)]\n        gcd_[0] = backward_gcd[1]\n        gcd_[n - 1] = forward_gcd[n - 2]\n        for i in range(1, n - 1):\n            gcd_[i] = gcd(forward_gcd[i - 1], backward_gcd[i + 1])\n        ans = Inf\n        for i in range(n):\n            ans = min(ans, sum_[i] // gcd_[i] + 1)\n        print(ans)\n\ndef main():\n    t = 1\n    t = I()\n    for i in range(1, t + 1):\n        solve()\nmain()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(arr) == 1:\n        print(1)\n        continue\n    pre = [arr[0]]\n    for i in range(1, n):\n        pre.append(math.gcd(pre[i - 1], arr[i]))\n    suf = [arr[-1]]\n    for i in range(n - 2, -1, -1):\n        suf.append(math.gcd(suf[-1], arr[i]))\n    suf.reverse()\n    total = sum(arr)\n    ans = total // pre[-1]\n    for i in range(n):\n        ans = min(ans, (total - arr[i]) // math.gcd(0 if i - 1 < 0 else pre[i - 1], 0 if i + 1 >= n else suf[i + 1]) + 1)\n    print(ans)", "import math\n\ndef findgcd(l1, n):\n    result = 0\n    for i in range(n):\n        result = math.gcd(l1[i], result)\n        if result == 1:\n            return 1\n    return result\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lst1 = []\n    lst = sorted(lst)\n    if n == 1:\n        print(1)\n    else:\n        for k in range(n):\n            lst1.append(0)\n            m = lst[k]\n            lst[k] = 0\n            lst1[k] = findgcd(lst, n)\n            lst[k] = m\n        max1 = lst1[0]\n        for j in range(n):\n            if lst1[j] >= max1:\n                max1 = lst1[j]\n                m = j\n        lst[m] = lst1[m]\n        count = 0\n        for j in range(n):\n            count += lst[j] // max1\n        print(count)", "import random\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n    else:\n        total = sum(l)\n        pr = []\n        pr.append(l[0])\n        for i in range(1, n):\n            gcd = find_gcd(pr[i - 1], l[i])\n            pr.append(gcd)\n        ans = total // gcd\n        pst = [0] * n\n        pst[n - 1] = l[n - 1]\n        for i in range(n - 2, -1, -1):\n            gcd = find_gcd(pst[i + 1], l[i])\n            pst[i] = gcd\n        for i in range(n):\n            if i - 1 < 0:\n                k1 = 0\n            else:\n                k1 = pr[i - 1]\n            if i + 1 > n - 1:\n                k2 = 0\n            else:\n                k2 = pst[i + 1]\n            k = find_gcd(k1, k2)\n            ans = min(ans, (total - l[i]) // k + 1)\n        print(ans)\n    t -= 1", "from collections import deque\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    no_change_gcd = 1\n    if n == 1:\n        print(1)\n        continue\n    pref_arr = deque()\n    suff_arr = deque()\n    pref_arr.append(arr[0])\n    suff_arr.appendleft(arr[-1])\n    for i in range(1, n):\n        pref_arr.append(gcd(arr[i], pref_arr[-1]))\n    for i in range(n - 2, -1, -1):\n        suff_arr.appendleft(gcd(arr[i], suff_arr[0]))\n    s = sum(arr)\n    res = s // pref_arr[n - 1]\n    for i in range(n):\n        if i == 0:\n            val = (s - arr[i]) // suff_arr[i + 1]\n        elif i == n - 1:\n            val = (s - arr[i]) // pref_arr[n - 2]\n        else:\n            val = (s - arr[i]) // gcd(pref_arr[i - 1], suff_arr[i + 1])\n        res = min(res, val + 1)\n    print(res)", "from collections import deque\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    no_change_gcd = 1\n    if n == 1:\n        print(1)\n        continue\n    pref_arr = deque()\n    suff_arr = deque()\n    pref_arr.append(arr[0])\n    suff_arr.appendleft(arr[-1])\n    for i in range(1, n):\n        pref_arr.append(gcd(arr[i], pref_arr[-1]))\n    for i in range(n - 2, -1, -1):\n        suff_arr.appendleft(gcd(arr[i], suff_arr[0]))\n    s = sum(arr)\n    res = s // pref_arr[n - 1]\n    for i in range(n):\n        if i == 0:\n            val = (s - arr[i]) // suff_arr[i + 1]\n        elif i == n - 1:\n            val = (s - arr[i]) // pref_arr[i - 1]\n        else:\n            val = (s - arr[i]) // gcd(pref_arr[i - 1], suff_arr[i + 1])\n        res = min(res, val + 1)\n    print(res)", "import math\ntest = int(input())\nfor t in range(test):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n        continue\n    pre = [0, arr[0]]\n    suff = [0] * (n + 1)\n    total = arr[0]\n    for i in range(1, n):\n        total += arr[i]\n        pre.append(math.gcd(pre[-1], arr[i]))\n    for j in range(n - 1, -1, -1):\n        suff[j] = math.gcd(suff[j + 1], arr[j])\n    ans = float('inf')\n    for i in range(n):\n        x = math.gcd(pre[i], suff[i + 1])\n        ans = min(ans, 1 + (total - arr[i]) // x)\n    print(ans)", "from math import gcd\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    lst = list(map(int, input().strip().split()))\n    if n == 1:\n        print(1)\n        t -= 1\n        continue\n    prefix = [0] * n\n    suffix = [0] * n\n    prefix[0] = lst[0]\n    suffix[n - 1] = lst[n - 1]\n    for i in range(1, n):\n        prefix[i] = gcd(prefix[i - 1], lst[i])\n    for i in range(n - 2, -1, -1):\n        suffix[i] = gcd(suffix[i + 1], lst[i])\n    total = sum(lst)\n    ans = total // prefix[n - 1]\n    for i in range(n):\n        a = lst[i]\n        if i == 0:\n            x = (total - a) // suffix[i + 1] + 1\n        elif i == n - 1:\n            x = (total - a) // prefix[i - 1] + 1\n        else:\n            x = (total - a) // gcd(prefix[i - 1], suffix[i + 1]) + 1\n        ans = min(ans, x)\n    print(ans)\n    t -= 1", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    a_sum = sum(lst)\n    sum_ = [a_sum - lst[i] for i in range(n)]\n    if n <= 2:\n        print(n)\n    else:\n        (pref_lst, suf_lst, gcd_) = ([0] * n, [0] * n, [0] * n)\n        (pref_lst[0], suf_lst[-1]) = (lst[0], lst[-1])\n        for i in range(1, n):\n            (pref_lst[i], suf_lst[-i - 1]) = (gcd(pref_lst[i - 1], lst[i]), gcd(suf_lst[-i], lst[-i - 1]))\n        for i in range(n):\n            (left_gcd, right_gcd) = (pref_lst[i - 1] if i > 0 else 0, suf_lst[i + 1] if i < n - 1 else 0)\n            gcd_[i] = gcd(left_gcd, right_gcd)\n        print(min([sum_[i] // gcd_[i] + 1 for i in range(n)]))", "import math\nimport itertools\nfrom sys import stdin\nfrom functools import reduce\nfrom collections import deque\nfrom sys import setrecursionlimit\nfrom collections import defaultdict\nimport heapq\ninput = stdin.readline\n\ndef I():\n    return int(input())\n\ndef IN():\n    return map(int, input().split())\n\ndef LI():\n    return list(map(int, input().split()))\n\ndef LIN(N):\n    return [list(map(int, input().split())) for _ in range(N)]\ngcd = math.gcd\nInf = float('Inf')\n\ndef solve():\n    n = I()\n    a = LI()\n    total = sum(a)\n    sum_ = [total - a[i] for i in range(n)]\n    if n == 1:\n        print(1)\n    else:\n        forward_gcd = [a[0]]\n        for i in range(1, n):\n            forward_gcd.append(gcd(forward_gcd[i - 1], a[i]))\n        backward_gcd = [1 for i in range(n)]\n        backward_gcd[n - 1] = a[n - 1]\n        for i in range(n - 2, -1, -1):\n            backward_gcd[i] = gcd(backward_gcd[i + 1], a[i])\n        gcd_ = [1 for i in range(n)]\n        gcd_[0] = backward_gcd[1]\n        gcd_[n - 1] = forward_gcd[n - 2]\n        for i in range(1, n - 1):\n            gcd_[i] = gcd(forward_gcd[i - 1], backward_gcd[i + 1])\n        ans = Inf\n        for i in range(n):\n            ans = min(ans, sum_[i] // gcd_[i] + 1)\n        print(ans)\n\ndef main():\n    t = 1\n    t = I()\n    for i in range(1, t + 1):\n        solve()\nmain()", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n        continue\n    forward = [arr[0]]\n    summe = arr[0]\n    for i in range(1, n):\n        val = gcd(arr[i], forward[i - 1])\n        forward.append(val)\n        summe += arr[i]\n    backward = [1 for i in range(n)]\n    backward[-1] = arr[-1]\n    for i in range(n - 2, -1, -1):\n        backward[i] = gcd(backward[i + 1], arr[i])\n    gcd_all = [1 for _ in range(n)]\n    gcd_all[0] = backward[1]\n    gcd_all[-1] = forward[-2]\n    for i in range(1, n - 1):\n        gcd_all[i] = gcd(forward[i - 1], backward[i + 1])\n    ans = float('inf')\n    for i in range(n):\n        val = (summe - arr[i]) // gcd_all[i] + 1\n        ans = min(ans, val)\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    total = sum(a)\n    sum_ = [total - a[i] for i in range(n)]\n    if n == 1:\n        print(1)\n    else:\n        forward_gcd = [a[0]]\n        for i in range(1, n):\n            forward_gcd.append(gcd(forward_gcd[i - 1], a[i]))\n        backward_gcd = [1 for i in range(n)]\n        backward_gcd[n - 1] = a[n - 1]\n        for i in range(n - 2, -1, -1):\n            backward_gcd[i] = gcd(backward_gcd[i + 1], a[i])\n        gcd_ = [1 for i in range(n)]\n        gcd_[0] = backward_gcd[1]\n        gcd_[n - 1] = forward_gcd[n - 2]\n        for i in range(1, n - 1):\n            gcd_[i] = gcd(forward_gcd[i - 1], backward_gcd[i + 1])\n        print(min([sum_[i] // gcd_[i] + 1 for i in range(n)]))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()][:n]\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(2)\n    else:\n        a.sort()\n        (pre, suf, whole) = ([0] * n, [0] * n, [0] * n)\n        (gcd_pre, gcd_suf) = (0, 0)\n        (maxi, maxi_i) = (0, 0)\n        for i in range(1, n - 1):\n            gcd_pre = math.gcd(gcd_pre, a[i - 1])\n            gcd_suf = math.gcd(gcd_suf, a[n - i])\n            pre[i] = gcd_pre\n            suf[n - 1 - i] = gcd_suf\n        pre[n - 1] = math.gcd(a[n - 2], pre[n - 2])\n        suf[0] = math.gcd(a[1], suf[1])\n        for i in range(n):\n            whole[i] = math.gcd(pre[i], suf[i])\n            if whole[i] >= maxi:\n                maxi = whole[i]\n                maxi_i = i\n        a[maxi_i] = maxi\n        print(sum(a) // maxi)", "def gcd(b, a):\n    if b == 0:\n        return a\n    return gcd(a % b, b)\n\ndef fGcd(arr):\n    fHcf = []\n    hcf = 0\n    for i in arr:\n        hcf = gcd(i, hcf)\n        fHcf.append(hcf)\n    return fHcf\n\ndef bGcd(arr):\n    bHcf = []\n    hcf = 0\n    for i in range(len(arr) - 1, -1, -1):\n        hcf = gcd(arr[i], hcf)\n        bHcf.append(hcf)\n    return bHcf[::-1]\n\ndef getHcf(fhcf, bhcf):\n    hcf = []\n    for i in range(len(fhcf)):\n        if i == 0:\n            hcf.append(bhcf[1])\n        elif i == len(fhcf) - 1:\n            hcf.append(fhcf[len(fhcf) - 2])\n        else:\n            hcf.append(gcd(fhcf[i - 1], bhcf[i + 1]))\n    return hcf\nfor _ in range(int(input())):\n    N = int(input())\n    arr = [int(x) for x in input().split()]\n    if N == 1:\n        print(1)\n    else:\n        f = fGcd(arr)\n        b = bGcd(arr)\n        hcf = getHcf(f, b)\n        s = sum(arr)\n        ans = float('inf')\n        for i in range(N):\n            ans = min(ans, (s - arr[i]) // hcf[i] + 1)\n        print(ans)", "from math import gcd\nfrom random import randint as rint\nfrom sys import maxsize as mint\ntn = int(input())\nfor _ in range(tn):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n <= 2:\n        print(n)\n        continue\n    arr.sort()\n    sval = sum(arr)\n    (fli, bli) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(n):\n        fli[i + 1] = gcd(fli[i], arr[i])\n        bli[n - i - 1] = gcd(bli[n - i], arr[n - i - 1])\n    tval = mint\n    for i in range(n):\n        gd = gcd(fli[i], bli[i + 1])\n        if (sval - arr[i]) % gd == 0:\n            tval = min(tval, (sval - arr[i]) // gd + 1)\n    print(tval)", "from math import gcd\nfrom random import randint as rint\nfrom sys import maxsize as mint\ntn = int(input())\nfor _ in range(tn):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n <= 2:\n        print(n)\n        continue\n    arr.sort()\n    sval = sum(arr)\n    (fli, bli) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(n):\n        fli[i + 1] = gcd(fli[i], arr[i])\n        bli[n - i - 1] = gcd(bli[n - i], arr[n - i - 1])\n    tval = mint\n    for i in range(n):\n        gd = gcd(fli[i], bli[i + 1])\n        if (sval - arr[i]) % gd == 0:\n            tval = min(tval, (sval - arr[i]) // gd + 1)\n    print(tval)", "from math import gcd as g\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    a = list(map(int, input().split()))[:n]\n    if n == 1:\n        print(1)\n        t -= 1\n        continue\n    suffix = [0] * n\n    prefix = [0] * n\n    suffix[n - 1] = a[n - 1]\n    prefix[0] = a[0]\n    for i in range(1, n):\n        prefix[i] = g(prefix[i - 1], a[i])\n    for i in range(n - 2, -1, -1):\n        suffix[i] = g(suffix[i + 1], a[i])\n    ans = []\n    net = sum(a)\n    for i in range(n):\n        if i - 1 < 0:\n            x = g(0, suffix[i + 1])\n        elif i + 1 >= n:\n            x = g(prefix[i - 1], 0)\n        else:\n            x = g(prefix[i - 1], suffix[i + 1])\n        notes = (net - a[i]) // x + 1\n        ans.append(notes)\n    print(min(ans))\n    t -= 1", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n    else:\n        prefix = [0] * n\n        suffix = [0] * n\n        (prefix[0], suffix[-1]) = (arr[0], arr[-1])\n        for i in range(1, n):\n            prefix[i] = gcd(arr[i], prefix[i - 1])\n        for i in range(n - 2, -1, -1):\n            suffix[i] = gcd(arr[i], suffix[i + 1])\n        total = sum(arr)\n        ans = total // prefix[-1]\n        for i in range(n):\n            s = total - arr[i]\n            (a, b) = (0, 0)\n            if i > 0:\n                a = prefix[i - 1]\n            if i < n - 1:\n                b = suffix[i + 1]\n            ans = min(ans, s // gcd(a, b) + 1)\n        print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n    else:\n        prefix = [0] * n\n        suffix = [0] * n\n        (prefix[0], suffix[-1]) = (arr[0], arr[-1])\n        for i in range(1, n):\n            prefix[i] = gcd(arr[i], prefix[i - 1])\n        for i in range(n - 2, -1, -1):\n            suffix[i] = gcd(arr[i], suffix[i + 1])\n        total = sum(arr)\n        ans = total // prefix[-1]\n        for i in range(n):\n            s = total - arr[i]\n            (a, b) = (0, 0)\n            if i > 0:\n                a = prefix[i - 1]\n            if i < n - 1:\n                b = suffix[i + 1]\n            ans = min(ans, s // gcd(a, b) + 1)\n        print(ans)", "def simple_gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return simple_gcd(b, a % b)\nT = int(input())\nwhile T:\n    N = int(input())\n    A = list(map(int, input().split()))\n    if N <= 2:\n        print(N)\n    else:\n        P = [0 for x in range(N + 1)]\n        S = [0 for x in range(N + 1)]\n        for i in range(N):\n            P[i + 1] = simple_gcd(P[i], A[i])\n        for i in reversed(range(N)):\n            S[i] = simple_gcd(S[i + 1], A[i])\n        sum1 = sum(A)\n        temp = float('inf')\n        for i in range(N):\n            gcd = simple_gcd(P[i], S[i + 1])\n            temp = min(1 + (sum1 - A[i]) // gcd, temp)\n        print(temp)\n    T -= 1", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    if n < 3:\n        print(n)\n    else:\n        left = [a[0]]\n        for i in range(1, n):\n            temp = math.gcd(left[i - 1], a[i])\n            left.append(temp)\n        right = [0] * n\n        right[n - 1] = a[n - 1]\n        for i in range(n - 2, -1, -1):\n            temp = math.gcd(right[i + 1], a[i])\n            right[i] = temp\n        summ = sum(a)\n        s = 1 + min(int((summ - a[0]) / right[1]), int((summ - a[n - 1]) / left[n - 2]))\n        for i in range(1, n - 1):\n            s = min(s, 1 + int((summ - a[i]) / math.gcd(right[i + 1], left[i - 1])))\n        print(s)", "def gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n    else:\n        total = l[0]\n        prefix_gcd = [l[0]]\n        suffix_gcd = [l[-1]]\n        for i in range(1, n):\n            prefix_gcd.append(gcd(min(l[i], prefix_gcd[-1]), max(l[i], prefix_gcd[-1])))\n            total += l[i]\n        for i in range(n - 2, -1, -1):\n            suffix_gcd.append(gcd(min(l[i], suffix_gcd[-1]), max(l[i], suffix_gcd[-1])))\n        suffix_gcd = suffix_gcd[::-1]\n        best = min((total - l[0]) // suffix_gcd[1] + 1, (total - l[-1]) // prefix_gcd[-2] + 1)\n        for i in range(1, n - 1):\n            div = gcd(min(prefix_gcd[i - 1], suffix_gcd[i + 1]), max(prefix_gcd[i - 1], suffix_gcd[i + 1]))\n            check = (total - l[i]) // div + 1\n            best = min(best, check)\n        print(best)", "import sys\nimport math\nt = int(input())\n\ndef countAll(l, d):\n    maxCoins = 0\n    total = 0\n    for i in l:\n        coins = i // d\n        if coins > maxCoins:\n            maxCoins = coins\n        total += coins\n    total -= maxCoins\n    total += 1\n    return total\nfor _ in range(0, t):\n    n = int(input())\n    A = list(map(int, input().strip().split(' ')))\n    if n == 1:\n        print(1)\n        continue\n    l1 = []\n    l2 = []\n    s = 0\n    g = A[0]\n    g2 = A[-1]\n    to = len(A)\n    for i in range(0, to):\n        g = math.gcd(g, A[i])\n        g2 = math.gcd(g2, A[to - i - 1])\n        l1.append(g)\n        l2.append(g2)\n        s += A[i]\n    least = countAll(A, l1[-1])\n    t_gcd = None\n    for i in range(0, to):\n        if i == 0:\n            t_gcd = l2[to - 1 - 1]\n        elif i == to - 1:\n            t_gcd = l1[to - 1 - 1]\n        else:\n            t_gcd = math.gcd(l1[i - 1], l2[to - i - 2])\n        t = (s - A[i]) // t_gcd + 1\n        if t < least:\n            least = t\n    print(least)", "import sys\nimport math\nt = int(input())\n\ndef countAll(l, d):\n    maxCoins = 0\n    total = 0\n    for i in l:\n        coins = i // d\n        if coins > maxCoins:\n            maxCoins = coins\n        total += coins\n    total -= maxCoins\n    total += 1\n    return total\nfor _ in range(0, t):\n    n = int(input())\n    A = list(map(int, input().strip().split(' ')))\n    if n == 1:\n        print(1)\n        continue\n    l1 = []\n    l2 = []\n    s = 0\n    g = A[0]\n    g2 = A[-1]\n    to = len(A)\n    for i in range(0, to):\n        g = math.gcd(g, A[i])\n        g2 = math.gcd(g2, A[to - i - 1])\n        l1.append(g)\n        l2.append(g2)\n        s += A[i]\n    least = countAll(A, l1[-1])\n    t_gcd = None\n    for i in range(0, to):\n        if i == 0:\n            t_gcd = l2[to - 1 - 1]\n        elif i == to - 1:\n            t_gcd = l1[to - 1 - 1]\n        else:\n            t_gcd = math.gcd(l1[i - 1], l2[to - i - 2])\n        t = (s - A[i]) // t_gcd + 1\n        if t < least:\n            least = t\n    print(least)", "import sys\nimport math\nt = int(input())\n\ndef countAll(l, d):\n    maxCoins = 0\n    total = 0\n    for i in l:\n        coins = i // d\n        if coins > maxCoins:\n            maxCoins = coins\n        total += coins\n    total -= maxCoins\n    total += 1\n    return total\nfor _ in range(0, t):\n    n = int(input())\n    A = list(map(int, input().strip().split(' ')))\n    if n == 1:\n        print(1)\n        continue\n    l1 = []\n    l2 = []\n    s = 0\n    g = A[0]\n    g2 = A[-1]\n    to = len(A)\n    for i in range(0, to):\n        g = math.gcd(g, A[i])\n        g2 = math.gcd(g2, A[to - i - 1])\n        l1.append(g)\n        l2.append(g2)\n        s += A[i]\n    least = sys.maxsize\n    t_gcd = None\n    for i in range(0, to):\n        if i == 0:\n            t_gcd = l2[to - 1 - 1]\n        elif i == to - 1:\n            t_gcd = l1[to - 1 - 1]\n        else:\n            t_gcd = math.gcd(l1[i - 1], l2[to - i - 2])\n        t = (s - A[i]) // t_gcd + 1\n        if t < least:\n            least = t\n    print(least)", "import math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    salary = [int(s) for s in input().split()]\n    if N == 1:\n        print(1)\n    elif N == 2:\n        print(2)\n    else:\n        salary.sort()\n        gcd_left = [0] * N\n        gcd_right = [0] * N\n        gcd_l = 0\n        gcd_r = 0\n        for j in range(1, N - 1):\n            gcd_l = math.gcd(gcd_l, salary[j - 1])\n            gcd_r = math.gcd(gcd_r, salary[N - j])\n            gcd_left[j] = gcd_l\n            gcd_right[N - j - 1] = gcd_r\n        gcd_left[N - 1] = math.gcd(salary[N - 2], gcd_left[N - 2])\n        gcd_right[0] = math.gcd(salary[1], gcd_right[1])\n        gcd_whole = [0] * N\n        maxi = 0\n        maxi_index = 0\n        for j in range(N):\n            gcd_whole[j] = math.gcd(gcd_left[j], gcd_right[j])\n            if gcd_whole[j] >= maxi:\n                maxi = gcd_whole[j]\n                maxi_index = j\n        salary[maxi_index] = maxi\n        print(sum(salary) // maxi)", "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif b > a:\n        return gcd(b, a)\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(arr) == 1:\n        print(1)\n    else:\n        leftgcd = [0] * n\n        rightgcd = [0] * n\n        midgcd = [0] * n\n        temp = 0\n        for (key, val) in enumerate(arr):\n            leftgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        temp = 0\n        for i in range(n - 1, -1, -1):\n            key = i\n            val = arr[key]\n            rightgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        for i in range(n):\n            if leftgcd[i] == 0:\n                midgcd[i] = rightgcd[i]\n            elif rightgcd[i] == 0:\n                midgcd[i] = leftgcd[i]\n            else:\n                midgcd[i] = gcd(leftgcd[i], rightgcd[i])\n        mx = [0, 0]\n        for (key, val) in enumerate(midgcd):\n            mx = max(mx, [val, arr[key]])\n        for (key, val) in enumerate(midgcd):\n            if val == mx[0] and arr[key] == mx[1]:\n                temp = key\n                tempval = val\n        arr[temp] = tempval\n        sm = 0\n        for item in arr:\n            sm += item // tempval\n        print(sm)", "from math import gcd\nj = []\nj = [0] * 100\nj.pop()\nj.pop()\nj.append(99)\nj.pop()\nj.sort()\nj.append(1000)\nj.sort()\nfor _ in range(int(input())):\n    ans = float('inf')\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n        continue\n    sumo = 0\n    for i in l:\n        sumo += i\n    bwd = [l[-1]]\n    fwd = [l[0]]\n    for i in range(n - 2, -1, -1):\n        bwd.append(gcd(bwd[-1], l[i]))\n    bwd = bwd[::-1]\n    for i in range(1, n):\n        fwd.append(gcd(fwd[i - 1], l[i]))\n    main_arr = [1] * n\n    main_arr[0] = bwd[1]\n    main_arr[n - 1] = fwd[-2]\n    for i in range(1, n - 1):\n        main_arr[i] = gcd(bwd[i + 1], fwd[i - 1])\n    for i in range(n):\n        tmp = (sumo - l[i] + main_arr[i]) // main_arr[i]\n        ans = min(ans, tmp)\n    print(ans)", "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif b > a:\n        return gcd(b, a)\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(arr) == 1:\n        print(1)\n    else:\n        leftgcd = [0] * n\n        rightgcd = [0] * n\n        midgcd = [0] * n\n        temp = 0\n        for (key, val) in enumerate(arr):\n            leftgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        temp = 0\n        for i in range(n - 1, -1, -1):\n            key = i\n            val = arr[key]\n            rightgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        for i in range(n):\n            if leftgcd[i] == 0:\n                midgcd[i] = rightgcd[i]\n            elif rightgcd[i] == 0:\n                midgcd[i] = leftgcd[i]\n            else:\n                midgcd[i] = gcd(leftgcd[i], rightgcd[i])\n        mx = [0, 0]\n        for (key, val) in enumerate(midgcd):\n            mx = max(mx, [val, arr[key]])\n        for (key, val) in enumerate(midgcd):\n            if val == mx[0] and arr[key] == mx[1]:\n                temp = key\n                tempval = val\n        arr[temp] = tempval\n        sm = 0\n        for item in arr:\n            sm += item // tempval\n        print(sm)", "t = int(input())\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor test in range(0, t):\n    n = int(input())\n    a = input().split()\n    a = list(map(int, a))\n    gs = [0] * n\n    gp = [0] * n\n    g_exclude = [0] * n\n    s = [0] * n\n    ans = 0\n    totsum = 0\n    if n == 1:\n        print(1)\n        continue\n    for i in a:\n        totsum = totsum + i\n    gp[0] = a[0]\n    gs[n - 1] = a[n - 1]\n    for i in range(1, n):\n        gp[i] = gcd(gp[i - 1], a[i])\n    for i in range(n - 2, -1, -1):\n        gs[i] = gcd(gs[i + 1], a[i])\n    g_exclude[0] = gs[1]\n    g_exclude[n - 1] = gp[n - 2]\n    for i in range(1, n - 1):\n        g_exclude[i] = gcd(gp[i - 1], gs[i + 1])\n    for i in range(0, n):\n        s[i] = int((totsum - a[i] + g_exclude[i]) / g_exclude[i])\n    ans = s[0]\n    for i in s:\n        if i < ans:\n            ans = i\n    print(ans)", "def gcd(num1, num2):\n    if num2 == 0:\n        return num1\n    else:\n        return gcd(num2, num1 % num2)\n\ndef MINNOTES():\n    itrs = int(input())\n    for itr in range(itrs):\n        len_array = int(input())\n        array = [int(i) for i in input().split()]\n        if len_array == 1:\n            print(1)\n            continue\n        gs = [0] * len_array\n        gp = [0] * len_array\n        g_exclude = [0] * len_array\n        s = [0] * len_array\n        total_sum = ans = 0\n        for i in array:\n            total_sum += i\n        gp[0] = array[0]\n        gs[len_array - 1] = array[len_array - 1]\n        for i in range(1, len_array):\n            gp[i] = gcd(gp[i - 1], array[i])\n        for i in range(len_array - 2, -1, -1):\n            gs[i] = gcd(gs[i + 1], array[i])\n        g_exclude[0] = gs[1]\n        g_exclude[len_array - 1] = gp[len_array - 2]\n        for i in range(1, len_array - 1):\n            g_exclude[i] = gcd(gp[i - 1], gs[i + 1])\n        for i in range(0, len_array):\n            s[i] = int((total_sum - array[i] + g_exclude[i]) // g_exclude[i])\n        ans = s[0]\n        for i in s:\n            if i < ans:\n                ans = i\n        print(ans)\nMINNOTES()", "T = int(input())\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor j in range(T):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    if n == 1:\n        print(1)\n        continue\n    li1 = [0] * n\n    li2 = [0] * n\n    ghost = [0] * n\n    s = [0] * n\n    ans = 0\n    totsum = 0\n    for i in arr:\n        totsum += i\n    li2[0] = arr[0]\n    li1[n - 1] = arr[n - 1]\n    for i in range(1, n):\n        li2[i] = gcd(li2[i - 1], arr[i])\n    for i in range(n - 2, -1, -1):\n        li1[i] = gcd(li1[i + 1], arr[i])\n    ghost[0] = li1[1]\n    ghost[n - 1] = li2[n - 2]\n    for i in range(1, n - 1):\n        ghost[i] = gcd(li2[i - 1], li1[i + 1])\n    for i in range(0, n):\n        s[i] = int((totsum - arr[i] + ghost[i]) / ghost[i])\n    ans = s[0]\n    for i in s:\n        if i < ans:\n            ans = i\n    print(ans)", "def gcd(num1, num2):\n    if num2 == 0:\n        return num1\n    else:\n        return gcd(num2, num1 % num2)\n\ndef MINNOTES():\n    itrs = int(input())\n    for itr in range(itrs):\n        len_array = int(input())\n        array = [int(i) for i in input().split()]\n        if len_array == 1:\n            print(1)\n            continue\n        gs = [0] * len_array\n        gp = [0] * len_array\n        g_exclude = [0] * len_array\n        s = [0] * len_array\n        total_sum = ans = 0\n        for i in array:\n            total_sum += i\n        gp[0] = array[0]\n        gs[len_array - 1] = array[len_array - 1]\n        for i in range(1, len_array):\n            gp[i] = gcd(gp[i - 1], array[i])\n        for i in range(len_array - 2, -1, -1):\n            gs[i] = gcd(gs[i + 1], array[i])\n        g_exclude[0] = gs[1]\n        g_exclude[len_array - 1] = gp[len_array - 2]\n        for i in range(1, len_array - 1):\n            g_exclude[i] = gcd(gp[i - 1], gs[i + 1])\n        for i in range(0, len_array):\n            s[i] = int((total_sum - array[i] + g_exclude[i]) // g_exclude[i])\n        ans = s[0]\n        for i in s:\n            if i < ans:\n                ans = i\n        print(ans)\nMINNOTES()", "def gcd(c, d):\n    if c == 0:\n        return d\n    elif d == 0:\n        return c\n    elif d > c:\n        return gcd(d, c)\n    else:\n        return gcd(d, c % d)\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if len(l) == 1:\n        print(1)\n    else:\n        lgcd = [0] * n\n        rgcd = [0] * n\n        mgcd = [0] * n\n        tp = 0\n        for (key, val) in enumerate(l):\n            lgcd[key] = tp\n            if tp == 0:\n                tp = val\n            else:\n                tp = gcd(tp, val)\n        tp = 0\n        for i in range(n - 1, -1, -1):\n            key = i\n            val = l[key]\n            rgcd[key] = tp\n            if tp == 0:\n                tp = val\n            else:\n                tp = gcd(tp, val)\n        for i in range(n):\n            if lgcd[i] == 0:\n                mgcd[i] = rgcd[i]\n            elif rgcd[i] == 0:\n                mgcd[i] = lgcd[i]\n            else:\n                mgcd[i] = gcd(lgcd[i], rgcd[i])\n        mx = [0, 0]\n        for (key, val) in enumerate(mgcd):\n            mx = max(mx, [val, l[key]])\n        for (key, val) in enumerate(mgcd):\n            if val == mx[0] and l[key] == mx[1]:\n                tp = key\n                tpvl = val\n        l[tp] = tpvl\n        s = 0\n        for it in l:\n            s += it // tpvl\n        print(s)", "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif b > a:\n        return gcd(b, a)\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(arr) == 1:\n        print(1)\n    else:\n        leftgcd = [0] * n\n        rightgcd = [0] * n\n        midgcd = [0] * n\n        temp = 0\n        for (key, val) in enumerate(arr):\n            leftgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        temp = 0\n        for i in range(n - 1, -1, -1):\n            key = i\n            val = arr[key]\n            rightgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        for i in range(n):\n            if leftgcd[i] == 0:\n                midgcd[i] = rightgcd[i]\n            elif rightgcd[i] == 0:\n                midgcd[i] = leftgcd[i]\n            else:\n                midgcd[i] = gcd(leftgcd[i], rightgcd[i])\n        mx = [0, 0]\n        for (key, val) in enumerate(midgcd):\n            mx = max(mx, [val, arr[key]])\n        for (key, val) in enumerate(midgcd):\n            if val == mx[0] and arr[key] == mx[1]:\n                temp = key\n                tempval = val\n        arr[temp] = tempval\n        sm = 0\n        for item in arr:\n            sm += item // tempval\n        print(sm)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(arr) == 1:\n        print(1)\n    else:\n        beforea = [0] * n\n        aftera = [0] * n\n        excepta = [0] * n\n        temp = 0\n        for i in range(len(arr)):\n            beforea[i] = temp\n            if temp == 0:\n                temp = arr[i]\n            else:\n                temp = math.gcd(temp, arr[i])\n        temp = 0\n        for i in range(n - 1, -1, -1):\n            key = i\n            val = arr[key]\n            aftera[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = math.gcd(temp, val)\n        for i in range(n):\n            if beforea[i] == 0:\n                excepta[i] = aftera[i]\n            elif aftera[i] == 0:\n                excepta[i] = beforea[i]\n            else:\n                excepta[i] = math.gcd(beforea[i], aftera[i])\n        mx = [0, 0]\n        for (key, val) in enumerate(excepta):\n            mx = max(mx, [val, arr[key]])\n        for (key, val) in enumerate(excepta):\n            if val == mx[0] and arr[key] == mx[1]:\n                temp = key\n                tempval = val\n        arr[temp] = tempval\n        ans = 0\n        for item in arr:\n            ans += item // tempval\n        print(ans)", "def gcd(num1, num2):\n    if num2 == 0:\n        return num1\n    else:\n        return gcd(num2, num1 % num2)\n\ndef MINNOTES():\n    itrs = int(input())\n    for itr in range(itrs):\n        len_array = int(input())\n        array = [int(i) for i in input().split()]\n        if len_array == 1:\n            print(1)\n            continue\n        gs = [0] * len_array\n        gp = [0] * len_array\n        g_exclude = [0] * len_array\n        s = [0] * len_array\n        total_sum = ans = 0\n        for i in array:\n            total_sum += i\n        gp[0] = array[0]\n        gs[len_array - 1] = array[len_array - 1]\n        for i in range(1, len_array):\n            gp[i] = gcd(gp[i - 1], array[i])\n        for i in range(len_array - 2, -1, -1):\n            gs[i] = gcd(gs[i + 1], array[i])\n        g_exclude[0] = gs[1]\n        g_exclude[len_array - 1] = gp[len_array - 2]\n        for i in range(1, len_array - 1):\n            g_exclude[i] = gcd(gp[i - 1], gs[i + 1])\n        for i in range(0, len_array):\n            s[i] = int((total_sum - array[i] + g_exclude[i]) // g_exclude[i])\n        ans = s[0]\n        for i in s:\n            if i < ans:\n                ans = i\n        print(ans)\nMINNOTES()", "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif b > a:\n        return gcd(b, a)\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(arr) == 1:\n        print(1)\n    else:\n        leftgcd = [0] * n\n        rightgcd = [0] * n\n        midgcd = [0] * n\n        temp = 0\n        for (key, val) in enumerate(arr):\n            leftgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        temp = 0\n        for i in range(n - 1, -1, -1):\n            key = i\n            val = arr[key]\n            rightgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        for i in range(n):\n            if leftgcd[i] == 0:\n                midgcd[i] = rightgcd[i]\n            elif rightgcd[i] == 0:\n                midgcd[i] = leftgcd[i]\n            else:\n                midgcd[i] = gcd(leftgcd[i], rightgcd[i])\n        mx = [0, 0]\n        for (key, val) in enumerate(midgcd):\n            mx = max(mx, [val, arr[key]])\n        for (key, val) in enumerate(midgcd):\n            if val == mx[0] and arr[key] == mx[1]:\n                temp = key\n                tempval = val\n        arr[temp] = tempval\n        sm = 0\n        for item in arr:\n            sm += item // tempval\n        print(sm)", "T = int(input())\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor j in range(T):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    if n == 1:\n        print(1)\n        continue\n    gs = [0] * n\n    gp = [0] * n\n    g_exclude = [0] * n\n    s = [0] * n\n    ans = 0\n    totsum = 0\n    for i in arr:\n        totsum += i\n    gp[0] = arr[0]\n    gs[n - 1] = arr[n - 1]\n    for i in range(1, n):\n        gp[i] = gcd(gp[i - 1], arr[i])\n    for i in range(n - 2, -1, -1):\n        gs[i] = gcd(gs[i + 1], arr[i])\n    g_exclude[0] = gs[1]\n    g_exclude[n - 1] = gp[n - 2]\n    for i in range(1, n - 1):\n        g_exclude[i] = gcd(gp[i - 1], gs[i + 1])\n    for i in range(0, n):\n        s[i] = int((totsum - arr[i] + g_exclude[i]) / g_exclude[i])\n    ans = s[0]\n    for i in s:\n        if i < ans:\n            ans = i\n    print(ans)", "from math import gcd\nll = int(input())\n\ndef make_back_forward(arr):\n    forward = [0] * len(arr)\n    back = [0] * len(arr)\n    forward[0] = arr[0]\n    back[-1] = arr[-1]\n    for i in range(1, len(arr)):\n        forward[i] = gcd(forward[i - 1], arr[i])\n    for i in range(len(arr) - 2, -1, -1):\n        back[i] = gcd(back[i + 1], arr[i])\n    return (forward, back)\nfor ppp in range(ll):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (forward, back) = make_back_forward(arr)\n    summ = sum(arr)\n    ans = float('inf')\n    if n == 1:\n        print(1)\n        continue\n    for i in range(1, len(arr) - 1):\n        tmp = (summ - arr[i] + gcd(forward[i - 1], back[i + 1])) // gcd(forward[i - 1], back[i + 1])\n        ans = min(ans, tmp)\n    tmp = (summ - arr[0] + gcd(back[1], back[1])) // gcd(back[1], back[1])\n    ans = min(ans, tmp)\n    tmp = (summ - arr[n - 1] + gcd(forward[n - 2], forward[n - 2])) // gcd(forward[n - 2], forward[n - 2])\n    ans = min(ans, tmp)\n    print(ans)", "from sys import stdin, stdout\nfrom heapq import heapify, heappush, heappop\nimport sys\nfrom collections import Counter\nfrom copy import deepcopy\nimport math\nsys.setrecursionlimit(10 ** 5)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    ans = []\n    for p in range(n + 1):\n        if prime[p]:\n            ans.append(p)\n    return ans\na = [0] * 100003\nf = [0] * 100003\nb = [0] * 100003\n\ndef mapinput():\n    return map(int, stdin.readline().split())\n\ndef strinput():\n    return stdin.readline().strip()\n\ndef listinput():\n    return list(map(int, stdin.readline().split()))\n\ndef intinput():\n    return int(stdin.readline().strip())\nfor test in range(intinput()):\n\n    def solve():\n        n = intinput()\n        arr = listinput()\n        s = o = 0\n        arr.sort()\n        for i in range(n):\n            a[i + 1] = arr[i]\n        f[1] = a[1]\n        b[n] = a[n]\n        i = n - 1\n        while i > 0:\n            b[i] = gcd(b[i + 1], a[i])\n            i -= 1\n        i = 2\n        while i <= n:\n            f[i] = gcd(f[i - 1], a[i])\n            i += 1\n        for i in range(1, n + 1):\n            s += a[i]\n        m = 99999999999999999999999\n        i = 1\n        while i <= n:\n            o = (s - a[i] + gcd(f[i - 1], b[i + 1])) // gcd(f[i - 1], b[i + 1])\n            m = min(o, m)\n            i += 1\n        return int(m)\n    print(solve())", "import math\nimport itertools\nfrom sys import stdin\nfrom functools import reduce\nfrom collections import deque\nfrom sys import setrecursionlimit\nfrom collections import defaultdict\nimport heapq\ninput = stdin.readline\n\ndef I():\n    return int(input())\n\ndef IN():\n    return map(int, input().split())\n\ndef LI():\n    return list(map(int, input().split()))\n\ndef LIN(N):\n    return [list(map(int, input().split())) for _ in range(N)]\ngcd = math.gcd\nInf = float('Inf')\n\ndef solve():\n    n = I()\n    a = LI()\n    total = sum(a)\n    sum_ = [total - a[i] for i in range(n)]\n    if n == 1:\n        print(1)\n    else:\n        forward_gcd = [a[0]]\n        for i in range(1, n):\n            forward_gcd.append(gcd(forward_gcd[i - 1], a[i]))\n        backward_gcd = [1 for i in range(n)]\n        backward_gcd[n - 1] = a[n - 1]\n        for i in range(n - 2, -1, -1):\n            backward_gcd[i] = gcd(backward_gcd[i + 1], a[i])\n        gcd_ = [1 for i in range(n)]\n        gcd_[0] = backward_gcd[1]\n        gcd_[n - 1] = forward_gcd[n - 2]\n        for i in range(1, n - 1):\n            gcd_[i] = gcd(forward_gcd[i - 1], backward_gcd[i + 1])\n        ans = Inf\n        for i in range(n):\n            ans = min(ans, sum_[i] // gcd_[i] + 1)\n        print(ans)\n\ndef main():\n    t = 1\n    t = I()\n    for i in range(1, t + 1):\n        solve()\nmain()", "from sys import stdin, stdout\nfrom heapq import heapify, heappush, heappop\nimport sys\nfrom collections import Counter\nfrom copy import deepcopy\nimport math\nsys.setrecursionlimit(10 ** 5)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    ans = []\n    for p in range(n + 1):\n        if prime[p]:\n            ans.append(p)\n    return ans\na = [0] * 1000000\nf = [0] * 1000000\nb = [0] * 1000000\n\ndef mapinput():\n    return map(int, stdin.readline().split())\n\ndef strinput():\n    return stdin.readline().strip()\n\ndef listinput():\n    return list(map(int, stdin.readline().split()))\n\ndef intinput():\n    return int(stdin.readline().strip())\nfor test in range(intinput()):\n\n    def solve():\n        n = intinput()\n        arr = listinput()\n        s = o = 0\n        arr.sort()\n        for i in range(n):\n            a[i + 1] = arr[i]\n        f[1] = a[1]\n        b[n] = a[n]\n        i = n - 1\n        while i > 0:\n            b[i] = gcd(b[i + 1], a[i])\n            i -= 1\n        i = 2\n        while i <= n:\n            f[i] = gcd(f[i - 1], a[i])\n            i += 1\n        for i in range(1, n + 1):\n            s += a[i]\n        m = 99999999999999999999999\n        i = 1\n        while i <= n:\n            o = (s - a[i] + gcd(f[i - 1], b[i + 1])) // gcd(f[i - 1], b[i + 1])\n            m = min(o, m)\n            i += 1\n        return int(m)\n    print(solve())", "t = int(input())\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef gcd_missing(a):\n    n = len(a)\n    fgcd = [a[0]]\n    rgcd = [a[n - 1]]\n    gcd1 = a[0]\n    gcd2 = a[n - 1]\n    for i in range(1, n):\n        gcd1 = gcd(gcd1, a[i])\n        fgcd.append(gcd1)\n    for j in range(n - 2, -1, -1):\n        gcd2 = gcd(gcd2, a[j])\n        rgcd.append(gcd2)\n    gcd_m = []\n    for k in range(n):\n        if k == 0:\n            gcd_m.append(rgcd[n - 2])\n        elif k == n - 1:\n            gcd_m.append(fgcd[n - 2])\n        else:\n            gcd_m.append(gcd(fgcd[k - 1], rgcd[n - k - 2]))\n    return gcd_m\nfor _ in range(t):\n    min_notes = []\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n    else:\n        gcd_m = gcd_missing(a)\n        sa = sum(a)\n        for i in range(n):\n            min_notes.append((sa - a[i]) // gcd_m[i] + 1)\n        print(min(min_notes))", "import math\ntry:\n\n    def solution(arr, n):\n        if n == 1:\n            return 1\n        left = [0] * n\n        right = [0] * n\n        left[0] = 0\n        left[1] = arr[0]\n        right[n - 1] = 0\n        right[n - 2] = arr[n - 1]\n        for i in range(2, n):\n            left[i] = math.gcd(left[i - 1], arr[i - 1])\n        for i in range(n - 3, -1, -1):\n            right[i] = math.gcd(right[i + 1], arr[i + 1])\n        mid = [0] * n\n        mid[0] = right[0]\n        mid[n - 1] = left[n - 1]\n        for i in range(1, n - 1):\n            mid[i] = math.gcd(left[i], right[i])\n        sm = sum(arr)\n        value = 0\n        minvalue = 10 ** 16 + 7\n        for i in range(n):\n            value = (sm - arr[i] + mid[i]) // mid[i]\n            if value < minvalue:\n                minvalue = value\n        return minvalue\n    for _ in range(int(input().strip())):\n        n = int(input().strip())\n        arr = list(map(int, input().strip().split()))\n        print(solution(arr, n))\nexcept:\n    pass", "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif b > a:\n        return gcd(b, a)\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(arr) == 1:\n        print(1)\n    else:\n        leftgcd = [0] * n\n        rightgcd = [0] * n\n        midgcd = [0] * n\n        temp = 0\n        for (key, val) in enumerate(arr):\n            leftgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        temp = 0\n        for i in range(n - 1, -1, -1):\n            key = i\n            val = arr[key]\n            rightgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        for i in range(n):\n            if leftgcd[i] == 0:\n                midgcd[i] = rightgcd[i]\n            elif rightgcd[i] == 0:\n                midgcd[i] = leftgcd[i]\n            else:\n                midgcd[i] = gcd(leftgcd[i], rightgcd[i])\n        mx = [0, 0]\n        for (key, val) in enumerate(midgcd):\n            mx = max(mx, [val, arr[key]])\n        for (key, val) in enumerate(midgcd):\n            if val == mx[0] and arr[key] == mx[1]:\n                temp = key\n                tempval = val\n        arr[temp] = tempval\n        sm = 0\n        for item in arr:\n            sm += item // tempval\n        print(sm)", "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif b > a:\n        return gcd(b, a)\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(arr) == 1:\n        print(1)\n    else:\n        leftgcd = [0] * n\n        rightgcd = [0] * n\n        midgcd = [0] * n\n        temp = 0\n        for (key, val) in enumerate(arr):\n            leftgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        temp = 0\n        for i in range(n - 1, -1, -1):\n            key = i\n            val = arr[key]\n            rightgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        for i in range(n):\n            if leftgcd[i] == 0:\n                midgcd[i] = rightgcd[i]\n            elif rightgcd[i] == 0:\n                midgcd[i] = leftgcd[i]\n            else:\n                midgcd[i] = gcd(leftgcd[i], rightgcd[i])\n        mx = [0, 0]\n        for (key, val) in enumerate(midgcd):\n            mx = max(mx, [val, arr[key]])\n        for (key, val) in enumerate(midgcd):\n            if val == mx[0] and arr[key] == mx[1]:\n                temp = key\n                tempval = val\n        arr[temp] = tempval\n        sm = 0\n        for item in arr:\n            sm += item // tempval\n        print(sm)", "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif b > a:\n        return gcd(b, a)\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(arr) == 1:\n        print(1)\n    else:\n        leftgcd = [0] * n\n        rightgcd = [0] * n\n        midgcd = [0] * n\n        temp = 0\n        for (key, val) in enumerate(arr):\n            leftgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        temp = 0\n        for i in range(n - 1, -1, -1):\n            key = i\n            val = arr[key]\n            rightgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        for i in range(n):\n            if leftgcd[i] == 0:\n                midgcd[i] = rightgcd[i]\n            elif rightgcd[i] == 0:\n                midgcd[i] = leftgcd[i]\n            else:\n                midgcd[i] = gcd(leftgcd[i], rightgcd[i])\n        mx = [0, 0]\n        for (key, val) in enumerate(midgcd):\n            mx = max(mx, [val, arr[key]])\n        for (key, val) in enumerate(midgcd):\n            if val == mx[0] and arr[key] == mx[1]:\n                temp = key\n                tempval = val\n        arr[temp] = tempval\n        sm = 0\n        for item in arr:\n            sm += item // tempval\n        print(sm)", "import math\ntry:\n\n    def solution(arr, n):\n        if n == 1:\n            return 1\n        left = [0] * n\n        right = [0] * n\n        left[0] = 0\n        left[1] = arr[0]\n        right[n - 1] = 0\n        right[n - 2] = arr[n - 1]\n        for i in range(2, n):\n            left[i] = math.gcd(left[i - 1], arr[i - 1])\n        for i in range(n - 3, -1, -1):\n            right[i] = math.gcd(right[i + 1], arr[i + 1])\n        mid = [0] * n\n        mid[0] = right[0]\n        mid[n - 1] = left[n - 1]\n        for i in range(1, n - 1):\n            mid[i] = math.gcd(left[i], right[i])\n        sm = sum(arr)\n        value = 0\n        minvalue = 10 ** 16 + 7\n        for i in range(n):\n            value = (sm - arr[i] + mid[i]) // mid[i]\n            if value < minvalue:\n                minvalue = value\n        return minvalue\n    for _ in range(int(input().strip())):\n        n = int(input().strip())\n        arr = list(map(int, input().strip().split()))\n        print(solution(arr, n))\nexcept:\n    pass", "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif b > a:\n        return gcd(b, a)\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(arr) == 1:\n        print(1)\n    else:\n        leftgcd = [0] * n\n        rightgcd = [0] * n\n        midgcd = [0] * n\n        temp = 0\n        for (key, val) in enumerate(arr):\n            leftgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        temp = 0\n        for i in range(n - 1, -1, -1):\n            key = i\n            val = arr[key]\n            rightgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        for i in range(n):\n            if leftgcd[i] == 0:\n                midgcd[i] = rightgcd[i]\n            elif rightgcd[i] == 0:\n                midgcd[i] = leftgcd[i]\n            else:\n                midgcd[i] = gcd(leftgcd[i], rightgcd[i])\n        mx = [0, 0]\n        for (key, val) in enumerate(midgcd):\n            mx = max(mx, [val, arr[key]])\n        for (key, val) in enumerate(midgcd):\n            if val == mx[0] and arr[key] == mx[1]:\n                temp = key\n                tempval = val\n        arr[temp] = tempval\n        sm = 0\n        for item in arr:\n            sm += item // tempval\n        print(sm)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef optimal_denomination1(arr):\n    total = sum(arr)\n    if len(arr) == 1:\n        return 1\n    f = [0 for _ in range(len(arr))]\n    f[0] = arr[0]\n    for i in range(1, len(arr)):\n        f[i] = gcd(f[i - 1], arr[i])\n    b = [0 for _ in range(len(arr))]\n    b[-1] = arr[-1]\n    for i in range(len(arr) - 2, -1, -1):\n        b[i] = gcd(b[i + 1], arr[i])\n    h = [0 for _ in range(0, len(arr))]\n    h[0] = b[1]\n    h[-1] = f[-2]\n    for i in range(1, len(arr) - 1):\n        h[i] = gcd(f[i - 1], b[i + 1])\n    ans = float('inf')\n    for i in range(0, len(arr)):\n        s = (total - arr[i]) // h[i] + 1\n        ans = min(ans, s)\n    return ans\nT = int(input())\nwhile T:\n    N = int(input())\n    arr = list(map(int, input().split()))\n    print(optimal_denomination1(arr))\n    T -= 1", "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif b > a:\n        return gcd(b, a)\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(arr) == 1:\n        print(1)\n    else:\n        leftgcd = [0] * n\n        rightgcd = [0] * n\n        midgcd = [0] * n\n        temp = 0\n        for (key, val) in enumerate(arr):\n            leftgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        temp = 0\n        for i in range(n - 1, -1, -1):\n            key = i\n            val = arr[key]\n            rightgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        for i in range(n):\n            if leftgcd[i] == 0:\n                midgcd[i] = rightgcd[i]\n            elif rightgcd[i] == 0:\n                midgcd[i] = leftgcd[i]\n            else:\n                midgcd[i] = gcd(leftgcd[i], rightgcd[i])\n        mx = [0, 0]\n        for (key, val) in enumerate(midgcd):\n            mx = max(mx, [val, arr[key]])\n        for (key, val) in enumerate(midgcd):\n            if val == mx[0] and arr[key] == mx[1]:\n                temp = key\n                tempval = val\n        arr[temp] = tempval\n        sm = 0\n        for item in arr:\n            sm += item // tempval\n        print(sm)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n        continue\n    su = sum(ar)\n    f = [0] * n\n    b = [0] * n\n    h = [0] * n\n    f[0] = ar[0]\n    b[-1] = ar[-1]\n    for i in range(1, n):\n        f[i] = math.gcd(f[i - 1], ar[i])\n    for i in range(n - 2, -1, -1):\n        b[i] = math.gcd(b[i + 1], ar[i])\n    (h[0], h[-1]) = (b[1], f[-2])\n    for i in range(1, n - 1):\n        h[i] = math.gcd(f[i - 1], b[i + 1])\n    out = math.inf\n    for i in range(n):\n        s = (su - ar[i] + h[i]) // h[i]\n        out = min(out, s)\n    print(out)", "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif b > a:\n        return gcd(b, a)\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(arr) == 1:\n        print(1)\n    else:\n        leftgcd = [0] * n\n        rightgcd = [0] * n\n        midgcd = [0] * n\n        temp = 0\n        for (key, val) in enumerate(arr):\n            leftgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        temp = 0\n        for i in range(n - 1, -1, -1):\n            key = i\n            val = arr[key]\n            rightgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        for i in range(n):\n            if leftgcd[i] == 0:\n                midgcd[i] = rightgcd[i]\n            elif rightgcd[i] == 0:\n                midgcd[i] = leftgcd[i]\n            else:\n                midgcd[i] = gcd(leftgcd[i], rightgcd[i])\n        mx = [0, 0]\n        for (key, val) in enumerate(midgcd):\n            mx = max(mx, [val, arr[key]])\n        for (key, val) in enumerate(midgcd):\n            if val == mx[0] and arr[key] == mx[1]:\n                temp = key\n                tempval = val\n        arr[temp] = tempval\n        sm = 0\n        for item in arr:\n            sm += item // tempval\n        print(sm)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor d in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n        continue\n    gs = [0] * n\n    gp = [0] * n\n    g_exclude = [0] * n\n    s = [0] * n\n    ans = 0\n    totsum = 0\n    for i in a:\n        totsum += i\n    gp[0] = a[0]\n    gs[n - 1] = a[n - 1]\n    for i in range(1, n):\n        gp[i] = gcd(gp[i - 1], a[i])\n    for i in range(n - 2, -1, -1):\n        gs[i] = gcd(gs[i + 1], a[i])\n    g_exclude[0] = gs[1]\n    g_exclude[n - 1] = gp[n - 2]\n    for i in range(1, n - 1):\n        g_exclude[i] = gcd(gp[i - 1], gs[i + 1])\n    for i in range(0, n):\n        s[i] = int((totsum - a[i] + g_exclude[i]) / g_exclude[i])\n    ans = s[0]\n    for i in s:\n        if i < ans:\n            ans = i\n    print(ans)", "t = int(input())\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor i in range(0, t):\n    n = int(input())\n    a = list(map(int, input('').strip().split()))[:n]\n    if n == 1:\n        print(1)\n        continue\n    g1 = [0] * n\n    g2 = [0] * n\n    ge = [0] * n\n    g = [0] * n\n    s = [0] * n\n    ans = 0\n    ts = 0\n    for i in a:\n        ts += i\n    g2[0] = a[0]\n    g1[n - 1] = a[n - 1]\n    for i in range(1, n):\n        g2[i] = gcd(g2[i - 1], a[i])\n    for i in range(n - 2, -1, -1):\n        g1[i] = gcd(g1[i + 1], a[i])\n    ge[0] = g1[1]\n    ge[n - 1] = g2[n - 2]\n    for i in range(1, n - 1):\n        ge[i] = gcd(g2[i - 1], g1[i + 1])\n    for i in range(0, n):\n        s[i] = int((ts - a[i] + ge[i]) / ge[i])\n    ans = s[0]\n    for i in s:\n        if i < ans:\n            ans = i\n    print(ans)", "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif b > a:\n        return gcd(b, a)\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(arr) == 1:\n        print(1)\n    else:\n        leftgcd = [0] * n\n        rightgcd = [0] * n\n        midgcd = [0] * n\n        temp = 0\n        for (key, val) in enumerate(arr):\n            leftgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        temp = 0\n        for i in range(n - 1, -1, -1):\n            key = i\n            val = arr[key]\n            rightgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        for i in range(n):\n            if leftgcd[i] == 0:\n                midgcd[i] = rightgcd[i]\n            elif rightgcd[i] == 0:\n                midgcd[i] = leftgcd[i]\n            else:\n                midgcd[i] = gcd(leftgcd[i], rightgcd[i])\n        mx = [0, 0]\n        for (key, val) in enumerate(midgcd):\n            mx = max(mx, [val, arr[key]])\n        for (key, val) in enumerate(midgcd):\n            if val == mx[0] and arr[key] == mx[1]:\n                temp = key\n                tempval = val\n        arr[temp] = tempval\n        sm = 0\n        for item in arr:\n            sm += item // tempval\n        print(sm)", "def hcfs(xray, yray):\n    while yray:\n        madebyritik = 1\n        (xray, yray) = (yray, xray % yray)\n    return xray\nt = int(input())\nwhile t:\n    madebyritik = 1\n    n = int(input())\n    arr = sorted(list(map(int, input().split())))\n    (fi, bi, ri) = ([None] * n, [None] * n, [None] * n)\n    madebyritik = 1\n    reso = 0\n    if len(arr) == 1:\n        print(1)\n    else:\n        for y in range(n):\n            madebyritik = 1\n            fi[y] = hcfs(reso, arr[y])\n            reso = fi[y]\n        reso = 0\n        for y in range(n - 1, -1, -1):\n            madebyritik = 1\n            bi[y] = hcfs(reso, arr[y])\n            reso = bi[y]\n        ri[0] = bi[1]\n        ri[n - 1] = fi[n - 2]\n        for y in range(1, n - 1):\n            madebyritik = 1\n            ri[y] = hcfs(bi[y + 1], fi[y - 1])\n        if len(set(ri)) == 1:\n            madebyritik = 1\n            arr[-1] = ri[-1]\n            reso = 0\n            for value in arr:\n                reso += value // arr[-1]\n        else:\n            madebyritik = 1\n            maximum_hcf = arr[ri.index(max(ri))] = max(ri)\n            reso = 0\n            for value in arr:\n                reso += value // maximum_hcf\n        print(reso)\n        madebyritik = 1\n    t = t - 1", "import math\nt = int(input())\nfor test in range(0, t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n        continue\n    GS = [0] * n\n    GP = [0] * n\n    G_EXCLUDE = [0] * n\n    s = [0] * n\n    ans = 0\n    SUM = 0\n    for i in a:\n        SUM += i\n    GP[0] = a[0]\n    GS[n - 1] = a[n - 1]\n    for i in range(1, n):\n        GP[i] = math.gcd(GP[i - 1], a[i])\n    for i in range(n - 2, -1, -1):\n        GS[i] = math.gcd(GS[i + 1], a[i])\n    G_EXCLUDE[0] = GS[1]\n    G_EXCLUDE[n - 1] = GP[n - 2]\n    for i in range(1, n - 1):\n        G_EXCLUDE[i] = math.gcd(GP[i - 1], GS[i + 1])\n    for i in range(0, n):\n        s[i] = int((SUM - a[i] + G_EXCLUDE[i]) / G_EXCLUDE[i])\n    ans = s[0]\n    for i in s:\n        if i < ans:\n            ans = i\n    print(ans)", "def hcfs(xray, yray):\n    while yray:\n        madebyritik = 1\n        (xray, yray) = (yray, xray % yray)\n    return xray\nt = int(input())\nwhile t:\n    madebyritik = 1\n    n = int(input())\n    arr = sorted(list(map(int, input().split())))\n    (fi, bi, ri) = ([None] * n, [None] * n, [None] * n)\n    madebyritik = 1\n    reso = 0\n    if len(arr) == 1:\n        print(1)\n    else:\n        for y in range(n):\n            madebyritik = 1\n            fi[y] = hcfs(reso, arr[y])\n            reso = fi[y]\n        reso = 0\n        for y in range(n - 1, -1, -1):\n            madebyritik = 1\n            bi[y] = hcfs(reso, arr[y])\n            reso = bi[y]\n        ri[0] = bi[1]\n        ri[n - 1] = fi[n - 2]\n        for y in range(1, n - 1):\n            madebyritik = 1\n            ri[y] = hcfs(bi[y + 1], fi[y - 1])\n        if len(set(ri)) == 1:\n            madebyritik = 1\n            arr[-1] = ri[-1]\n            reso = 0\n            for value in arr:\n                reso += value // arr[-1]\n        else:\n            madebyritik = 1\n            maximum_hcf = arr[ri.index(max(ri))] = max(ri)\n            reso = 0\n            for value in arr:\n                reso += value // maximum_hcf\n        print(reso)\n        madebyritik = 1\n    t = t - 1", "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif b > a:\n        return gcd(b, a)\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(arr) == 1:\n        print(1)\n    else:\n        leftgcd = [0] * n\n        rightgcd = [0] * n\n        midgcd = [0] * n\n        temp = 0\n        for (key, val) in enumerate(arr):\n            leftgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        temp = 0\n        for i in range(n - 1, -1, -1):\n            key = i\n            val = arr[key]\n            rightgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        for i in range(n):\n            if leftgcd[i] == 0:\n                midgcd[i] = rightgcd[i]\n            elif rightgcd[i] == 0:\n                midgcd[i] = leftgcd[i]\n            else:\n                midgcd[i] = gcd(leftgcd[i], rightgcd[i])\n        mx = [0, 0]\n        for (key, val) in enumerate(midgcd):\n            mx = max(mx, [val, arr[key]])\n        for (key, val) in enumerate(midgcd):\n            if val == mx[0] and arr[key] == mx[1]:\n                temp = key\n                tempval = val\n        arr[temp] = tempval\n        sm = 0\n        for item in arr:\n            sm += item // tempval\n        print(sm)", "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif b > a:\n        return gcd(b, a)\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(arr) == 1:\n        print(1)\n    else:\n        leftgcd = [0] * n\n        rightgcd = [0] * n\n        midgcd = [0] * n\n        temp = 0\n        for (key, val) in enumerate(arr):\n            leftgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        temp = 0\n        for i in range(n - 1, -1, -1):\n            key = i\n            val = arr[key]\n            rightgcd[key] = temp\n            if temp == 0:\n                temp = val\n            else:\n                temp = gcd(temp, val)\n        for i in range(n):\n            if leftgcd[i] == 0:\n                midgcd[i] = rightgcd[i]\n            elif rightgcd[i] == 0:\n                midgcd[i] = leftgcd[i]\n            else:\n                midgcd[i] = gcd(leftgcd[i], rightgcd[i])\n        mx = [0, 0]\n        for (key, val) in enumerate(midgcd):\n            mx = max(mx, [val, arr[key]])\n        for (key, val) in enumerate(midgcd):\n            if val == mx[0] and arr[key] == mx[1]:\n                temp = key\n                tempval = val\n        arr[temp] = tempval\n        sm = 0\n        for item in arr:\n            sm += item // tempval\n        print(sm)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n == 1:\n        print('1')\n        continue\n    gcdf = [1] * n\n    gcdb = [1] * n\n    h = [0] * n\n    gcdf[0] = l[0]\n    gcdb[n - 1] = l[n - 1]\n    for i in range(1, n):\n        gcdf[i] = math.gcd(gcdf[i - 1], l[i])\n    for i in range(n - 2, -1, -1):\n        gcdb[i] = math.gcd(gcdb[i + 1], l[i])\n    h[0] = gcdb[1]\n    h[n - 1] = gcdf[n - 2]\n    for i in range(1, n - 1):\n        h[i] = math.gcd(gcdf[i - 1], gcdb[i + 1])\n    sum = 0\n    for i in range(n):\n        sum += l[i]\n    ans = math.inf\n    for i in range(n):\n        s = (sum - l[i]) // h[i] + 1\n        ans = min(s, ans)\n    print(ans)", "t = int(input())\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor i in range(0, t):\n    n = int(input())\n    a = list(map(int, input('').strip().split()))[:n]\n    if n == 1:\n        print(1)\n        continue\n    g1 = [0] * n\n    g2 = [0] * n\n    ge = [0] * n\n    g = [0] * n\n    s = [0] * n\n    ans = 0\n    ts = 0\n    for i in a:\n        ts += i\n    g2[0] = a[0]\n    g1[n - 1] = a[n - 1]\n    for i in range(1, n):\n        g2[i] = gcd(g2[i - 1], a[i])\n    for i in range(n - 2, -1, -1):\n        g1[i] = gcd(g1[i + 1], a[i])\n    ge[0] = g1[1]\n    ge[n - 1] = g2[n - 2]\n    for i in range(1, n - 1):\n        ge[i] = gcd(g2[i - 1], g1[i + 1])\n    for i in range(0, n):\n        s[i] = int((ts - a[i] + ge[i]) / ge[i])\n    ans = s[0]\n    for i in s:\n        if i < ans:\n            ans = i\n    print(ans)"]