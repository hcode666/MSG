["T = input()\nT = int(T)\n\ndef compute_ugliness(i, j, n1, n2):\n    (L1, L2, L3, L4) = (i, n1 - i - 1, j, n2 - j - 1)\n    return abs(L1 - L3) + abs(L1 - L4) + abs(L2 - L3) + abs(L2 - L4)\n\ndef optimal_sol(S1, S2):\n    (mid2, min_ugliness) = (len(S2) // 2, 1000000.0)\n    char_to_ids = {}\n    for (j, char) in enumerate(s2):\n        if char in char_to_ids and abs(mid2 - j) > abs(mid2 - char_to_ids[char]):\n            continue\n        char_to_ids[char] = j\n    for (i, char) in enumerate(s1):\n        if char in char_to_ids:\n            j = char_to_ids[char]\n            min_ugliness = min(min_ugliness, compute_ugliness(i, j, len(S1), len(S2)))\n    return min_ugliness if min_ugliness < 1000000.0 else -1\nresult = []\nfor i in range(T):\n    s1 = input()\n    s2 = input()\n    result.append(optimal_sol(s1, s2))\nfor i in result:\n    print(i)", "T = input()\nT = int(T)\n\ndef compute_ugliness(i, j, n1, n2):\n    (L1, L2, L3, L4) = (i, n1 - i - 1, j, n2 - j - 1)\n    return abs(L1 - L3) + abs(L1 - L4) + abs(L2 - L3) + abs(L2 - L4)\n\ndef optimal_sol(S1, S2):\n    (mid2, min_ugliness) = (len(S2) // 2, 1000000.0)\n    char_to_ids = {}\n    for (j, char) in enumerate(s2):\n        if char in char_to_ids and abs(mid2 - j) > abs(mid2 - char_to_ids[char]):\n            continue\n        char_to_ids[char] = j\n    for (i, char) in enumerate(s1):\n        if char in char_to_ids:\n            j = char_to_ids[char]\n            min_ugliness = min(min_ugliness, compute_ugliness(i, j, len(S1), len(S2)))\n    return min_ugliness if min_ugliness < 1000000.0 else -1\nresult = []\nfor i in range(T):\n    s1 = input()\n    s2 = input()\n    result.append(optimal_sol(s1, s2))\nfor i in result:\n    print(i)", "T = input()\nT = int(T)\n\ndef compute_ugliness(i, j, n1, n2):\n    (L1, L2, L3, L4) = (i, n1 - i - 1, j, n2 - j - 1)\n    return abs(L1 - L3) + abs(L1 - L4) + abs(L2 - L3) + abs(L2 - L4)\n\ndef optimal_sol(S1, S2):\n    (n1, n2, min_ugliness) = (len(S1), len(S2), 1000000.0)\n    (mid1, mid2) = (n1 // 2, n2 // 2)\n    char_to_ids = {}\n    for (j, char) in enumerate(s2):\n        if char in char_to_ids:\n            if abs(mid2 - j) < abs(mid2 - char_to_ids[char]):\n                char_to_ids[char] = j\n        else:\n            char_to_ids[char] = j\n    for (i, char) in enumerate(s1):\n        if char in char_to_ids:\n            j = char_to_ids[char]\n            min_ugliness = min(min_ugliness, compute_ugliness(i, j, n1, n2))\n    return min_ugliness if min_ugliness < 1000000.0 else -1\nresult = []\nfor i in range(T):\n    s1 = input()\n    s2 = input()\n    result.append(optimal_sol(s1, s2))\nfor i in result:\n    print(i)", "T = input()\nT = int(T)\n\ndef find_index(a, mid):\n    (l, r) = (0, len(a) - 1)\n    cur_min = 99999\n    rs = -1\n    while l <= r:\n        cur_mid = int((l + r) / 2)\n        if abs(a[cur_mid] - mid) < cur_min:\n            cur_min = abs(a[cur_mid] - mid)\n            rs = cur_mid\n        if a[cur_mid] > mid:\n            r = cur_mid - 1\n        else:\n            l = cur_mid + 1\n    return a[rs]\n\ndef sol(s1, s2):\n    n1 = len(s1)\n    n2 = len(s2)\n    mid1 = int(n1 / 2)\n    mid2 = int(n2 / 2)\n    char_to_ids = {}\n    for (idx, char) in enumerate(s2):\n        if char in char_to_ids:\n            if abs(mid2 - idx) < abs(mid2 - char_to_ids[char]):\n                char_to_ids[char] = idx\n        else:\n            char_to_ids[char] = idx\n    m = 9999999\n    for (idx, char) in enumerate(s1):\n        L1 = idx\n        L2 = n1 - idx - 1\n        if char in char_to_ids:\n            j = char_to_ids[char]\n            L3 = j\n            L4 = n2 - j - 1\n            m = min(m, abs(L1 - L3) + abs(L1 - L4) + abs(L2 - L3) + abs(L2 - L4))\n    return m\nresult = []\nfor i in range(T):\n    s1 = input()\n    s2 = input()\n    result.append(sol(s1, s2))\nfor i in result:\n    print(i)", "T = input()\nT = int(T)\n\ndef find_index(a, mid):\n    (l, r) = (0, len(a) - 1)\n    cur_min = 99999\n    rs = -1\n    while l <= r:\n        cur_mid = int((l + r) / 2)\n        if abs(a[cur_mid] - mid) < cur_min:\n            cur_min = abs(a[cur_mid] - mid)\n            rs = cur_mid\n        if a[cur_mid] > mid:\n            r = cur_mid - 1\n        else:\n            l = cur_mid + 1\n    return a[rs]\n\ndef sol(s1, s2):\n    n1 = len(s1)\n    n2 = len(s2)\n    char_to_ids = {}\n    for (idx, char) in enumerate(s2):\n        if char in char_to_ids:\n            char_to_ids[char].append(idx)\n        else:\n            char_to_ids[char] = [idx]\n    for char in char_to_ids:\n        char_to_ids[char] = find_index(char_to_ids[char], int(n2 / 2))\n    m = 9999999\n    for (idx, char) in enumerate(s1):\n        L1 = idx\n        L2 = n1 - idx - 1\n        if char in char_to_ids:\n            j = char_to_ids[char]\n            L3 = j\n            L4 = n2 - j - 1\n            m = min(m, abs(L1 - L3) + abs(L1 - L4) + abs(L2 - L3) + abs(L2 - L4))\n    return m\nresult = []\nfor i in range(T):\n    s1 = input()\n    s2 = input()\n    result.append(sol(s1, s2))\nfor i in result:\n    print(i)", "from collections import defaultdict\nfor _ in range(int(input())):\n    s1 = input()\n    s2 = input()\n    ms = defaultdict(list)\n    (l, r) = (0, len(s1) - 1)\n    while l <= r:\n        if s1[l] == s1[r]:\n            ms[s1[l]] = [l, r]\n        else:\n            ms[s1[l]] = [l, r]\n            ms[s1[r]] = [r, l]\n        l += 1\n        r -= 1\n    ugly = 10000000000.0\n    n = len(s2) - 1\n    for i in range(n + 1):\n        if s2[i] in ms:\n            u = abs(ms[s2[i]][0] - i) + abs(ms[s2[i]][1] - i) + abs(ms[s2[i]][0] - (n - i)) + abs(ms[s2[i]][1] - (n - i))\n            ugly = min(ugly, u)\n    print(ugly)", "from collections import defaultdict\nfor _ in range(int(input())):\n    s1 = input()\n    s2 = input()\n    ms = defaultdict(list)\n    (l, r) = (0, len(s1) - 1)\n    while l <= r:\n        if s1[l] == s1[r]:\n            ms[s1[l]] = [l, r]\n        else:\n            ms[s1[l]] = [l, r]\n            ms[s1[r]] = [r, l]\n        l += 1\n        r -= 1\n    ugly = 10000000000.0\n    n = len(s2) - 1\n    for i in range(n + 1):\n        if s2[i] in ms:\n            u = abs(ms[s2[i]][0] - i) + abs(ms[s2[i]][1] - i) + abs(ms[s2[i]][0] - (n - i)) + abs(ms[s2[i]][1] - (n - i))\n            ugly = min(ugly, u)\n    print(ugly)", "from sys import stdin\nimport math\nstrA = [-1 for i in range(27)]\nstrB = [-1 for i in range(27)]\n\ndef clear():\n    for i in range(27):\n        strA[i] = strB[i] = -1\n\ndef check(Ln_Lm):\n    if Ln_Lm < 0:\n        return -1 * Ln_Lm\n    return Ln_Lm\n\ndef calcUgly(L1, L2, L3, L4):\n    L1_L2 = L1 - L2\n    L2_L3 = L2 - L3\n    L3_L4 = L3 - L4\n    L4_L1 = L4 - L1\n    ugliness = math.fabs(L1_L2) + math.fabs(L2_L3) + math.fabs(L3_L4) + math.fabs(L4_L1)\n    return int(ugliness)\n\ndef parseString(str, arr, length):\n    ind1 = ind2 = length // 2\n    while ind1 >= 0 and ind2 < length:\n        if arr[ord(str[ind1]) - ord('A')] == -1:\n            arr[ord(str[ind1]) - ord('A')] = ind1\n        if arr[ord(str[ind2]) - ord('A')] == -1:\n            arr[ord(str[ind2]) - ord('A')] = ind2\n        ind1 -= 1\n        ind2 += 1\n    while ind1 >= 0:\n        if arr[ord(str[ind1]) - ord('A')] == -1:\n            arr[ord(str[ind1]) - ord('A')] = ind1\n        ind1 -= 1\n    while ind2 < length:\n        if arr[ord(str[ind2]) - ord('A')] == -1:\n            arr[ord(str[ind2]) - ord('A')] = ind2\n        ind2 += 1\n\ndef solve():\n    T = int(stdin.readline().strip())\n    for t in range(T):\n        S1 = stdin.readline().strip()\n        S2 = stdin.readline().strip()\n        len1 = len(S1)\n        len2 = len(S2)\n        parseString(S1, strA, len1)\n        parseString(S2, strB, len2)\n        minUgly = len1 + len2\n        for i in range(26):\n            if strA[i] != -1 and strB[i] != -1:\n                currUgly = calcUgly(strA[i], len2 - strB[i] - 1, len1 - strA[i] - 1, strB[i])\n                if currUgly < minUgly:\n                    minUgly = currUgly\n        print(minUgly)\n        clear()\nsolve()", "from sys import stdin\nimport math\nstrA = [-1 for i in range(27)]\nstrB = [-1 for i in range(27)]\n\ndef clear():\n    for i in range(27):\n        strA[i] = strB[i] = -1\n\ndef check(Ln_Lm):\n    if Ln_Lm < 0:\n        return -1 * Ln_Lm\n    return Ln_Lm\n\ndef calcUgly(L1, L2, L3, L4):\n    L1_L2 = L1 - L2\n    L2_L3 = L2 - L3\n    L3_L4 = L3 - L4\n    L4_L1 = L4 - L1\n    ugliness = math.fabs(L1_L2) + math.fabs(L2_L3) + math.fabs(L3_L4) + math.fabs(L4_L1)\n    return int(ugliness)\n\ndef parseString(str, arr, length):\n    ind1 = ind2 = length // 2\n    while ind1 >= 0 and ind2 < length:\n        if arr[ord(str[ind1]) - ord('A')] == -1:\n            arr[ord(str[ind1]) - ord('A')] = ind1\n        if arr[ord(str[ind2]) - ord('A')] == -1:\n            arr[ord(str[ind2]) - ord('A')] = ind2\n        ind1 -= 1\n        ind2 += 1\n    while ind1 >= 0:\n        if arr[ord(str[ind1]) - ord('A')] == -1:\n            arr[ord(str[ind1]) - ord('A')] = ind1\n        ind1 -= 1\n    while ind2 < length:\n        if arr[ord(str[ind2]) - ord('A')] == -1:\n            arr[ord(str[ind2]) - ord('A')] = ind2\n        ind2 += 1\n\ndef solve():\n    T = int(input())\n    for t in range(T):\n        S1 = input()\n        S2 = input()\n        len1 = len(S1)\n        len2 = len(S2)\n        parseString(S1, strA, len1)\n        parseString(S2, strB, len2)\n        minUgly = len1 + len2\n        for i in range(26):\n            if strA[i] != -1 and strB[i] != -1:\n                currUgly = calcUgly(strA[i], len2 - strB[i] - 1, len1 - strA[i] - 1, strB[i])\n                if currUgly < minUgly:\n                    minUgly = currUgly\n        print(minUgly)\n        clear()\nsolve()", "from sys import stdin\nstrA = [-1 for i in range(27)]\nstrB = [-1 for i in range(27)]\n\ndef clear():\n    for i in range(27):\n        strA[i] = strB[i] = -1\n\ndef check(Ln_Lm):\n    if Ln_Lm < 0:\n        return -1 * Ln_Lm\n    return Ln_Lm\n\ndef calcUgly(L1, L2, L3, L4):\n    L1_L2 = L1 - L2\n    L2_L3 = L2 - L3\n    L3_L4 = L3 - L4\n    L4_L1 = L4 - L1\n    ugliness = abs(L1_L2) + abs(L2_L3) + abs(L3_L4) + abs(L4_L1)\n    return ugliness\n\ndef parseString(str, arr, length):\n    ind1 = ind2 = length // 2\n    while ind1 >= 0 and ind2 < length:\n        if arr[ord(str[ind1]) - ord('A')] == -1:\n            arr[ord(str[ind1]) - ord('A')] = ind1\n        if arr[ord(str[ind2]) - ord('A')] == -1:\n            arr[ord(str[ind2]) - ord('A')] = ind2\n        ind1 -= 1\n        ind2 += 1\n    while ind1 >= 0:\n        if arr[ord(str[ind1]) - ord('A')] == -1:\n            arr[ord(str[ind1]) - ord('A')] = ind1\n        ind1 -= 1\n    while ind2 < length:\n        if arr[ord(str[ind2]) - ord('A')] == -1:\n            arr[ord(str[ind2]) - ord('A')] = ind2\n        ind2 += 1\n\ndef solve():\n    T = int(input())\n    for t in range(T):\n        S1 = input()\n        S2 = input()\n        len1 = len(S1)\n        len2 = len(S2)\n        parseString(S1, strA, len1)\n        parseString(S2, strB, len2)\n        minUgly = len1 + len2\n        for i in range(26):\n            if strA[i] != -1 and strB[i] != -1:\n                currUgly = calcUgly(strA[i], len2 - strB[i] - 1, len1 - strA[i] - 1, strB[i])\n                if currUgly < minUgly:\n                    minUgly = currUgly\n        print(minUgly)\n        clear()\nsolve()", "from sys import stdin\nstrA = [-1 for i in range(27)]\nstrB = [-1 for i in range(27)]\n\ndef clear():\n    for i in range(27):\n        strA[i] = strB[i] = -1\n\ndef check(Ln_Lm):\n    if Ln_Lm < 0:\n        return -1 * Ln_Lm\n    return Ln_Lm\n\ndef calcUgly(L1, L2, L3, L4):\n    L1_L2 = L1 - L2\n    L2_L3 = L2 - L3\n    L3_L4 = L3 - L4\n    L4_L1 = L4 - L1\n    ugliness = check(L1_L2) + check(L2_L3) + check(L3_L4) + check(L4_L1)\n    return ugliness\n\ndef parseString(str, arr, length):\n    ind1 = ind2 = length // 2\n    while ind1 >= 0 and ind2 < length:\n        if arr[ord(str[ind1]) - ord('A')] == -1:\n            arr[ord(str[ind1]) - ord('A')] = ind1\n        if arr[ord(str[ind2]) - ord('A')] == -1:\n            arr[ord(str[ind2]) - ord('A')] = ind2\n        ind1 -= 1\n        ind2 += 1\n    while ind1 >= 0:\n        if arr[ord(str[ind1]) - ord('A')] == -1:\n            arr[ord(str[ind1]) - ord('A')] = ind1\n        ind1 -= 1\n    while ind2 < length:\n        if arr[ord(str[ind2]) - ord('A')] == -1:\n            arr[ord(str[ind2]) - ord('A')] = ind2\n        ind2 += 1\n\ndef solve():\n    T = int(input())\n    for t in range(T):\n        S1 = input()\n        S2 = input()\n        len1 = len(S1)\n        len2 = len(S2)\n        parseString(S1, strA, len1)\n        parseString(S2, strB, len2)\n        minUgly = len1 + len2\n        for i in range(26):\n            if strA[i] != -1 and strB[i] != -1:\n                currUgly = calcUgly(strA[i], len2 - strB[i] - 1, len1 - strA[i] - 1, strB[i])\n                if currUgly < minUgly:\n                    minUgly = currUgly\n        print(minUgly)\n        clear()\nsolve()", "from sys import stdin\nstrA = [-1 for i in range(27)]\nstrB = [-1 for i in range(27)]\n\ndef clear():\n    for i in range(27):\n        strA[i] = strB[i] = -1\n\ndef check(Ln_Lm):\n    if Ln_Lm < 0:\n        return -1 * Ln_Lm\n    return Ln_Lm\n\ndef calcUgly(L1, L2, L3, L4):\n    L1_L2 = L1 - L2\n    L2_L3 = L2 - L3\n    L3_L4 = L3 - L4\n    L4_L1 = L4 - L1\n    ugliness = check(L1_L2) + check(L2_L3) + check(L3_L4) + check(L4_L1)\n    return ugliness\n\ndef parseString(str, arr):\n    length = len(str)\n    ind1 = ind2 = length // 2\n    while ind1 >= 0 and ind2 < length:\n        if arr[ord(str[ind1]) - ord('A')] == -1:\n            arr[ord(str[ind1]) - ord('A')] = ind1\n        if arr[ord(str[ind2]) - ord('A')] == -1:\n            arr[ord(str[ind2]) - ord('A')] = ind2\n        ind1 -= 1\n        ind2 += 1\n    while ind1 >= 0:\n        if arr[ord(str[ind1]) - ord('A')] == -1:\n            arr[ord(str[ind1]) - ord('A')] = ind1\n        ind1 -= 1\n    while ind2 < length:\n        if arr[ord(str[ind2]) - ord('A')] == -1:\n            arr[ord(str[ind2]) - ord('A')] = ind2\n        ind2 += 1\n\ndef solve():\n    T = int(input())\n    for t in range(T):\n        S1 = input()\n        S2 = input()\n        len1 = len(S1)\n        len2 = len(S2)\n        parseString(S1, strA)\n        parseString(S2, strB)\n        minUgly = len(S1) + len(S2)\n        for i in range(26):\n            if strA[i] != -1 and strB[i] != -1:\n                currUgly = calcUgly(strA[i], len2 - strB[i] - 1, len1 - strA[i] - 1, strB[i])\n                if currUgly < minUgly:\n                    minUgly = currUgly\n        print(minUgly)\n        clear()\nsolve()", "import math\n\ndef midpoint(a):\n    if a % 2 == 0:\n        return a // 2 - 1\n    else:\n        return (a + 1) // 2 - 1\n\ndef count_petal(a, a_mid, b, b_mid):\n    l1 = a_mid - 1\n    l3 = len(a) - a_mid\n    l4 = b_mid - 1\n    l2 = len(b) - b_mid\n    return abs(l1 - l2) + abs(l2 - l3) + abs(l3 - l4) + abs(l4 - l1)\nt = int(input())\nwhile t:\n    a = input()\n    b = input()\n    best = []\n    a_mid = midpoint(len(a))\n    b_mid = midpoint(len(b))\n    if a[a_mid] == b[b_mid]:\n        print(count_petal(a, a_mid + 1, b, b_mid + 1))\n    else:\n        a_set = set(a)\n        b_set = set(b)\n        a_dict = dict()\n        b_dict = dict()\n        inset = a_set & b_set\n        for i in inset:\n            a_dict[i] = (1000000, 1000000)\n            b_dict[i] = (1000000, 1000000)\n        for (i, j) in enumerate(a):\n            if j in inset:\n                if abs(i - a_mid) <= a_dict[j][0]:\n                    a_dict[j] = (abs(i - a_mid), i)\n        for (i, j) in enumerate(b):\n            if j in inset:\n                if abs(i - b_mid) <= b_dict[j][0]:\n                    b_dict[j] = (abs(i - b_mid), i)\n        minimum = 1000000\n        for i in inset:\n            minimum = min(minimum, count_petal(a, a_dict[i][1] + 1, b, b_dict[i][1] + 1))\n        print(minimum)\n    t -= 1", "import sys\n\ndef dis(n, i):\n    if n % 2 == 0:\n        r1 = abs(i - n // 2)\n        r2 = abs(i - n // 2 + 1)\n        return min(r1, r2)\n    else:\n        return abs(i - n // 2)\nfor cases in range(int(input())):\n    s1 = input()\n    s2 = input()\n    d1 = dict()\n    d2 = dict()\n    (n1, n2) = (len(s1), len(s2))\n    for i in range(n1):\n        ind = ord(s1[i]) - 65\n        if ind in d1:\n            d1[ind] = min(dis(n1, i), d1[ind])\n        else:\n            d1[ind] = dis(n1, i)\n    for i in range(n2):\n        ind = ord(s2[i]) - 65\n        if ind in d2:\n            d2[ind] = min(dis(n2, i), d2[ind])\n        else:\n            d2[ind] = dis(n2, i)\n    min1 = sys.maxsize\n    for i in range(26):\n        if i in d1 and i in d2:\n            c1 = n1 // 2 + d1[i]\n            c2 = n2 // 2 + d2[i]\n            l1 = c1\n            l3 = n1 - 1 - c1\n            l2 = c2\n            l4 = n2 - 1 - c2\n            val = abs(l1 - l2) + abs(l2 - l3) + abs(l3 - l4) + abs(l4 - l1)\n            if val < min1:\n                min1 = val\n    print(min1)", "T = int(input())\nfor t in range(T):\n    S1 = list(input().strip())\n    S2 = list(input().strip())\n    n1 = len(S1)\n    n2 = len(S2)\n    c1 = [-1] * 26\n    i = 0\n    while i < (n1 + 1) // 2:\n        c1[ord(S1[i]) - 65] = i\n        c1[ord(S1[n1 - i - 1]) - 65] = i\n        i += 1\n    c2 = [-1] * 26\n    i = 0\n    while i < (n2 + 1) // 2:\n        c2[ord(S2[i]) - 65] = i\n        c2[ord(S2[n2 - i - 1]) - 65] = i\n        i += 1\n    close = 1000000000.0\n    for i in range(26):\n        L1 = c1[i]\n        L2 = c2[i]\n        if L1 == -1 or L2 == -1:\n            continue\n        L3 = n1 - c1[i] - 1\n        L4 = n2 - c2[i] - 1\n        close = min(abs(L1 - L2) + abs(L2 - L3) + abs(L3 - L4) + abs(L4 - L1), close)\n    print(close)", "t = int(input())\nfor i in range(t):\n    s = input()\n    r = input()\n    tab1 = {}\n    tab2 = {}\n    for j in range(26):\n        tab1[j] = -1\n        tab2[j] = -1\n    l1 = len(s)\n    l2 = len(r)\n    for j in range(l1):\n        u = tab1[ord(s[j]) - ord('A')]\n        if abs(j - l1 / 2) < abs(u - l1 / 2):\n            tab1[ord(s[j]) - ord('A')] = j\n    for j in range(l2):\n        u = tab2[ord(r[j]) - ord('A')]\n        if abs(j - l2 / 2) < abs(u - l2 / 2):\n            tab2[ord(r[j]) - ord('A')] = j\n    m = 500000\n    for j in range(26):\n        d = tab1[j]\n        d1 = tab2[j]\n        if d + 1 == 0 or d1 + 1 == 0:\n            continue\n        q1 = d\n        q2 = d1\n        q3 = l1 - 1 - d\n        q4 = l2 - 1 - d1\n        z = abs(q1 - q2) + abs(q2 - q3) + abs(q3 - q4) + abs(q4 - q1)\n        m = min(z, m)\n    print(m)"]