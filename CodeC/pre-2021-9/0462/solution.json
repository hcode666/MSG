["t = int(input())\nfor i in range(t):\n    (cans, minutes, outsidet, le, ri) = map(int, input().split())\n    ans = -1\n    for i in range(cans):\n        (x, y) = map(int, input().split())\n        for i in range(minutes):\n            if x > outsidet + 1:\n                x = x - 1\n            elif x < outsidet - 1:\n                x = x + 1\n            else:\n                x = outsidet\n        if x >= le and x <= ri:\n            if ans == -1:\n                ans = y\n            elif ans > y:\n                ans = y\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (cans, minutes, outsidet, le, ri) = map(int, input().split())\n    ans = -1\n    for i in range(cans):\n        (x, y) = map(int, input().split())\n        for i in range(minutes):\n            if x > outsidet + 1:\n                x = x - 1\n            elif x < outsidet - 1:\n                x = x + 1\n            else:\n                x = outsidet\n        if x >= le and x <= ri:\n            if ans == -1:\n                ans = y\n            elif ans > y:\n                ans = y\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, m, k, l, r) = list(map(int, input().split()))\n    cheapest = -1\n    for j in range(n):\n        (c, p) = list(map(int, input().split()))\n        for q in range(m):\n            if c > k + 1:\n                c = c - 1\n            elif c < k - 1:\n                c = c + 1\n            elif k - 1 <= c <= k + 1:\n                c = k\n        if l <= c <= r:\n            if cheapest == -1:\n                cheapest = p\n            elif cheapest > p:\n                cheapest = p\n    print(cheapest)", "t = int(input())\nwhile t > 0:\n    (n, m, k, l, r) = map(int, input().split())\n    s = []\n    for i in range(0, n):\n        (c, p) = map(int, input().split())\n        if abs(k - c) <= m:\n            temp = k\n        elif c < k - 1:\n            temp = c + m\n        else:\n            temp = c - m\n        if l <= temp and temp <= r:\n            s.append(p)\n    if len(s) == 0:\n        print('-1')\n    else:\n        print(min(s))\n    t = t - 1", "t = int(input())\nwhile t > 0:\n    (n, m, k, l, r) = map(int, input().split())\n    s = []\n    co = 0\n    for i in range(0, n):\n        (c, p) = map(int, input().split())\n        if c > k:\n            temp = c - m\n            if temp < k:\n                temp = k\n        else:\n            temp = c + m\n            if temp > k:\n                temp = k\n        if l <= temp and temp <= r:\n            s.append(p)\n    if len(s) == 0:\n        print('-1')\n    else:\n        print(min(s))\n    t = t - 1", "t = int(input())\nfor x in range(t):\n    (n, m, k, l, r) = [int(i) for i in input().split()]\n    min = 10000000\n    for i in range(n):\n        (c, p) = [int(a) for a in input().split()]\n        for j in range(m):\n            if c > k + 1:\n                c = c - 1\n            elif c < k - 1:\n                c = c + 1\n            elif c >= k - 1 and c <= k + 1:\n                c = k\n        if l <= c and c <= r:\n            if min > p:\n                min = p\n    if min == 10000000:\n        print(-1)\n    else:\n        print(min)", "t = int(input())\nfor x in range(t):\n    (n, m, k, l, r) = [int(i) for i in input().split()]\n    min = 10000000\n    for i in range(n):\n        (c, p) = [int(a) for a in input().split()]\n        for j in range(m):\n            if c > k + 1:\n                c = c - 1\n            elif c < k - 1:\n                c = c + 1\n            elif c >= k - 1 and c <= k + 1:\n                c = k\n        if l <= c and c <= r:\n            if min > p:\n                min = p\n    if min == 10000000:\n        print(-1)\n    else:\n        print(min)", "from math import sqrt, ceil, floor, gcd, log2\nimport sys\nfrom sys import stdin, stdout\nfrom collections import Counter, defaultdict, OrderedDict, deque\nfrom itertools import combinations, groupby\nfrom time import time\nfrom heapq import heappop, heappush, heapify\nt = int(input())\nfor _ in range(t):\n    (n, m, k, l, r) = map(int, input().split())\n    (c, p) = ([], [])\n    for i in range(n):\n        (ci, pi) = map(int, input().split())\n        c.append(ci)\n        p.append(pi)\n    while m:\n        for i in range(len(c)):\n            if c[i] > k + 1:\n                c[i] = c[i] - 1\n            elif c[i] < k - 1:\n                c[i] = c[i] + 1\n            elif k - 1 <= c[i] <= k + 1:\n                c[i] = k\n        m -= 1\n    ans = []\n    for i in range(len(c)):\n        if l <= c[i] <= r:\n            ans.append(p[i])\n    if ans:\n        print(min(ans))\n    else:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    (n, m, k, l, r) = [int(x) for x in input().split()]\n    x = []\n    y = []\n    for i in range(n):\n        (c, p) = [int(x) for x in input().split()]\n        x.append(c)\n        y.append(p)\n    while m:\n        for i in range(len(x)):\n            if x[i] > k + 1:\n                x[i] = x[i] - 1\n            elif x[i] < k - 1:\n                x[i] = x[i] + 1\n            elif k - 1 <= x[i] <= k + 1:\n                x[i] = k\n        m -= 1\n    k = []\n    for i in range(len(x)):\n        if l <= x[i] <= r:\n            k.append(y[i])\n    if k:\n        print(min(k))\n    else:\n        print(-1)", "t = int(input())\nfor x in range(t):\n    (n, m, k, l, r) = [int(i) for i in input().split()]\n    min = 10000000\n    for i in range(n):\n        (c, p) = [int(a) for a in input().split()]\n        for j in range(m):\n            if c > k + 1:\n                c = c - 1\n            elif c < k - 1:\n                c = c + 1\n            elif c >= k - 1 and c <= k + 1:\n                c = k\n        if l <= c and c <= r:\n            if min > p:\n                min = p\n    if min == 10000000:\n        print(-1)\n    else:\n        print(min)", "t = int(input())\nfor _ in range(t):\n    (n, m, k, l, r) = map(int, input().split())\n    s = []\n    for i in range(n):\n        s.append(list(map(int, input().split())))\n    ans = 10000000000\n    for i in range(n):\n        c = s[i][0]\n        if abs(c - k) > m:\n            if c < k:\n                c += m\n            else:\n                c -= m\n        else:\n            c = k\n        if c >= l and c <= r:\n            ans = min(s[i][1], ans)\n    if ans == 10000000000:\n        ans = -1\n    print(ans)", "for _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    s = []\n    for i in range(n):\n        s.append(list(map(int, input().split())))\n    ans = 10000000000\n    for i in range(n):\n        c = s[i][0]\n        if abs(c - k) > m:\n            if c < k:\n                c += m\n            else:\n                c -= m\n        else:\n            c = k\n        if c >= l and c <= r:\n            ans = min(s[i][1], ans)\n    if ans == 10000000000:\n        ans = -1\n    print(ans)", "for j in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    s = []\n    for i in range(n):\n        s.append(list(map(int, input().split())))\n    ans = 10000000000\n    for i in range(n):\n        c = s[i][0]\n        if abs(c - k) > m:\n            if c < k:\n                c += m\n            else:\n                c -= m\n        else:\n            c = k\n        if c >= l and c <= r:\n            ans = min(s[i][1], ans)\n    if ans == 10000000000:\n        ans = -1\n    print(ans)", "for j in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    s = []\n    for i in range(n):\n        s.append(list(map(int, input().split())))\n    ans = 10000000000\n    for i in range(n):\n        c = s[i][0]\n        if abs(c - k) > m:\n            if c < k:\n                c += m\n            else:\n                c -= m\n        else:\n            c = k\n        if c >= l and c <= r:\n            ans = min(s[i][1], ans)\n    if ans == 10000000000:\n        ans = -1\n    print(ans)", "import math\ncase = int(input())\nfor _ in range(case):\n    (n, m, k, l, r) = map(int, input().split(' '))\n    res = math.inf\n    for i in range(n):\n        (temp, price) = map(int, input().split(' '))\n        nt = temp\n        if temp > k:\n            nt = temp - m\n            if nt <= k:\n                nt = k\n        if temp < k:\n            nt = temp + m\n            if nt >= k:\n                nt = k\n        if nt >= l and nt <= r:\n            res = min(res, price)\n    if res == math.inf:\n        print(-1)\n    else:\n        print(res)", "t = int(input())\nfor x in range(t):\n    (n, m, k, l, r) = [int(i) for i in input().split()]\n    maxi = 10000000\n    for i in range(n):\n        (c, p) = [int(a) for a in input().split()]\n        for j in range(m):\n            if c > k + 1:\n                c = c - 1\n            elif c < k - 1:\n                c = c + 1\n            elif c >= k - 1 and c <= k + 1:\n                c = k\n        if l <= c and c <= r:\n            if maxi > p:\n                maxi = p\n    if maxi == 10000000:\n        print(-1)\n    else:\n        print(maxi)", "T = int(input())\nwhile T != 0:\n    flag = 0\n    min = 10 ** 9\n    (n, m, k, l, r) = tuple(map(int, input().split()))\n    for i in range(n):\n        (t, p) = tuple(map(int, input().split()))\n        temp = m\n        while temp != 0:\n            if t > k + 1:\n                t -= 1\n            elif t < k - 1:\n                t += 1\n            else:\n                t = k\n            temp -= 1\n        if l <= t <= r and min > p:\n            flag = 1\n            min = p\n    if flag == 0:\n        print(-1)\n    else:\n        print(min)\n    T -= 1", "for _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    L = []\n    for i in range(n):\n        (c, p) = map(int, input().split())\n        if c < k:\n            c = min(c + m, k)\n        else:\n            c = max(c - m, k)\n        if c in range(l, r + 1):\n            L.append(p)\n    if L == []:\n        print(-1)\n    else:\n        print(min(L))", "for i in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    mp = 10000009\n    for i in range(n):\n        (c, p) = map(int, input().split())\n        if c > k:\n            t = max(c - m, k)\n        else:\n            t = min(c + m, k)\n        if l <= t <= r:\n            mp = min(mp, p)\n    if mp == 10000009:\n        print(-1)\n    else:\n        print(mp)", "T = int(input())\nfor x in range(T):\n    (n, m, k, l, r) = map(int, input().split())\n    mp = 100000000000000000000000000000000000\n    for i in range(n):\n        (c, p) = map(int, input().split())\n        if c > k:\n            t = max(c - m, k)\n        else:\n            t = min(c + m, k)\n        if l <= t <= r:\n            mp = min(mp, p)\n    if mp == 100000000000000000000000000000000000:\n        print(-1)\n    else:\n        print(mp)", "import sys\nt = int(input())\nfor _ in range(t):\n    list1 = list(map(int, input().split()))\n    list2 = []\n    temp = -1\n    p = sys.maxsize\n    for i in range(list1[0]):\n        list3 = list(map(int, input().split()))\n        list2.append(list3)\n        if list2[i][0] > list1[2]:\n            if list2[i][0] - list1[1] > list1[2]:\n                if list1[3] <= list2[i][0] - list1[1] <= list1[4]:\n                    if list2[i][1] < p:\n                        p = list2[i][1]\n            elif list1[3] <= list1[2] <= list1[4]:\n                if list2[i][1] < p:\n                    p = list2[i][1]\n        elif list2[i][0] < list1[2]:\n            if list2[i][0] + list1[1] < list1[2]:\n                if list1[3] <= list2[i][0] + list1[1] <= list1[4]:\n                    if list2[i][1] < p:\n                        p = list2[i][1]\n            elif list1[3] <= list1[2] <= list1[4]:\n                if list2[i][1] < p:\n                    p = list2[i][1]\n        elif list1[3] <= list1[2] <= list1[4]:\n            if list2[i][1] < p:\n                p = list2[i][1]\n    if p == sys.maxsize:\n        p = -1\n    print(p)", "import sys\nfrom sys import stdin\nstdint = lambda : int(stdin.readline())\nmul = lambda : map(int, stdin.readline().strip().split())\nfor _ in range(stdint()):\n    (n, m, k, l, r) = mul()\n    minPrice = sys.maxsize\n    for i in range(n):\n        (c, p) = mul()\n        if c > k:\n            t = max(c - m, k)\n        else:\n            t = min(c + m, k)\n        if l <= t <= r:\n            minPrice = min(minPrice, p)\n    if minPrice == sys.maxsize:\n        print(-1)\n    else:\n        print(minPrice)", "for _ in range(int(input())):\n    (N, M, K, L, R) = map(int, input().split())\n    chosen = -1\n    for i in range(N):\n        (c, p) = map(int, input().split())\n        if c < K and c + M < K:\n            t = c + M\n        elif c > K and c - M > K:\n            t = c - M\n        else:\n            t = K\n        if L <= t <= R and (p < chosen or chosen == -1):\n            chosen = p\n    print(chosen)", "for _ in range(int(input())):\n    final = []\n    (n, m, k, l, r) = map(int, input().split())\n    for i in range(n):\n        (c, p) = map(int, input().split())\n        for j in range(m):\n            if c > k + 1:\n                c -= 1\n            elif c < k - 1:\n                c += 1\n            elif c >= k - 1 and c <= k + 1:\n                c = k\n        if c >= l and c <= r:\n            final.append(p)\n    if final == []:\n        print(-1)\n    else:\n        print(min(final))", "for _ in range(int(input())):\n    final = []\n    (n, m, k, l, r) = map(int, input().split())\n    for i in range(n):\n        (c, p) = map(int, input().split())\n        for j in range(m):\n            if c > k + 1:\n                c -= 1\n            elif c < k - 1:\n                c += 1\n            elif c >= k - 1 and c <= k + 1:\n                c = k\n        if c >= l and c <= r:\n            final.append(p)\n    if final == []:\n        print(-1)\n    else:\n        print(min(final))", "for _ in range(int(input())):\n    (N, M, K, L, R) = map(int, input().split())\n    l = []\n    for i in range(N):\n        l.append(list(map(int, input().split())))\n    tlist = []\n    for i in range(N):\n        if K >= l[i][0]:\n            if K <= l[i][0] + M:\n                l[i][0] = K\n            else:\n                l[i][0] = l[i][0] + M\n            if L <= l[i][0] <= R:\n                tlist.append([i + 1, l[i][1]])\n        elif K < l[i][0]:\n            if K >= l[i][0] - M:\n                l[i][0] = K\n            else:\n                l[i][0] = l[i][0] - M\n            if L <= l[i][0] <= R:\n                tlist.append([i + 1, l[i][1]])\n    if len(tlist) == 0:\n        print(-1)\n    else:\n        min = tlist[0][1]\n        for i in range(len(tlist)):\n            if tlist[i][1] < min:\n                min = tlist[i][1]\n        print(min)", "for _ in range(int(input())):\n    final = []\n    (n, m, k, l, r) = map(int, input().split())\n    for i in range(n):\n        (c, p) = map(int, input().split())\n        for j in range(m):\n            if c > k + 1:\n                c -= 1\n            elif c < k - 1:\n                c += 1\n            elif c >= k - 1 and c <= k + 1:\n                c = k\n        if c >= l and c <= r:\n            final.append(p)\n    if final == []:\n        print(-1)\n    else:\n        print(min(final))", "for _ in range(int(input())):\n    (N, M, K, L, R) = map(int, input().split())\n    chosen = -1\n    for i in range(N):\n        (c, p) = map(int, input().split())\n        if c < K and c + M < K:\n            t = c + M\n        elif c > K and c - M > K:\n            t = c - M\n        else:\n            t = K\n        if L <= t <= R and (p < chosen or chosen == -1):\n            chosen = p\n    print(chosen)", "for _ in range(int(input())):\n    (N, M, K, L, R) = map(int, input().split())\n    chosen = -1\n    for i in range(N):\n        (c, p) = map(int, input().split())\n        if c < K and c + M < K:\n            t = c + M\n        elif c > K and c - M > K:\n            t = c - M\n        else:\n            t = K\n        if L <= t <= R and (p < chosen or chosen == -1):\n            chosen = p\n    print(chosen)", "satya = int(input())\nfor ti in range(satya):\n    (sai, md, kd, ld, rd) = map(int, input().split(' '))\n    prd = -1\n    for i in range(sai):\n        (cd, pd) = map(int, input().split(' '))\n        if cd < kd:\n            final_temp = min(cd + md, kd)\n        else:\n            final_temp = max(cd - md, kd)\n        if ld <= final_temp and final_temp <= rd:\n            if prd != -1:\n                prd = min(pd, prd)\n            else:\n                prd = pd\n    print(prd)", "satya = int(input())\nfor ti in range(satya):\n    (sai, md, kd, ld, rd) = map(int, input().split(' '))\n    prd = -1\n    for i in range(sai):\n        (cd, pd) = map(int, input().split(' '))\n        if cd < kd:\n            final_temp = min(cd + md, kd)\n        else:\n            final_temp = max(cd - md, kd)\n        if ld <= final_temp and final_temp <= rd:\n            if prd != -1:\n                prd = min(pd, prd)\n            else:\n                prd = pd\n    print(prd)", "t = int(input())\nfor ti in range(t):\n    (n, m, k, l, r) = map(int, input().split(' '))\n    price = -1\n    for i in range(n):\n        (c, p) = map(int, input().split(' '))\n        if c < k:\n            final_temp = min(c + m, k)\n        else:\n            final_temp = max(c - m, k)\n        if l <= final_temp and final_temp <= r:\n            if price != -1:\n                price = min(p, price)\n            else:\n                price = p\n    print(price)", "t = int(input())\nfor ti in range(t):\n    (n, m, k, l, r) = map(int, input().split(' '))\n    price = -1\n    for i in range(n):\n        (c, p) = map(int, input().split(' '))\n        if c < k:\n            final_temp = min(c + m, k)\n        else:\n            final_temp = max(c - m, k)\n        if l <= final_temp and final_temp <= r:\n            if price != -1:\n                price = min(p, price)\n            else:\n                price = p\n    print(price)", "t = int(input())\nfor ti in range(t):\n    (n, m, k, l, r) = map(int, input().split(' '))\n    price = -1\n    for i in range(n):\n        (c, p) = map(int, input().split(' '))\n        if c < k:\n            final_temp = min(c + m, k)\n        else:\n            final_temp = max(c - m, k)\n        if l <= final_temp and final_temp <= r:\n            if price != -1:\n                price = min(p, price)\n            else:\n                price = p\n    print(price)", "for _ in range(int(input())):\n    (N, M, K, L, R) = map(int, input().split())\n    list_cans = []\n    for can in range(N):\n        (temp, price) = map(int, input().split())\n        ans = -1\n        for minute in range(M):\n            if temp > K:\n                temp -= 1\n            elif temp < K:\n                temp += 1\n            else:\n                temp = K\n        if L <= temp <= R:\n            ans = price\n        list_cans.append(ans)\n    if list_cans.count(-1) == len(list_cans):\n        print(-1)\n    else:\n        for can in range(list_cans.count(-1)):\n            list_cans.remove(-1)\n        print(min(list_cans))", "T = int(input())\nfor _ in range(T):\n    (N, M, K, L, R) = map(int, input().split(' '))\n    price = []\n    for _ in range(N):\n        (C, P) = map(int, input().split())\n        temp = C\n        for i in range(M):\n            if temp > K + 1:\n                temp = temp - 1\n            elif temp < K - 1:\n                temp = temp + 1\n            elif temp >= K - 1 and temp <= K + 1:\n                temp = K\n        if temp >= L and temp <= R:\n            price.append(P)\n    if len(price) == 0:\n        print(-1)\n    else:\n        print(min(price))", "t = int(input())\nfor _ in range(t):\n    (n, m, k, l, r) = map(int, input().split())\n    price = []\n    for _ in range(n):\n        (c, p) = map(int, input().split())\n        temp = c\n        for i in range(m):\n            if temp > k + 1:\n                temp = temp - 1\n            elif temp < k - 1:\n                temp = temp + 1\n            elif temp >= k - 1 and temp <= k + 1:\n                temp = k\n        if temp >= l and temp <= r:\n            price.append(p)\n    if len(price) == 0:\n        print(-1)\n    else:\n        print(min(price))", "t = int(input())\nfor _ in range(t):\n    (n, m, k, l, r) = map(int, input().split())\n    price = []\n    for _ in range(n):\n        (c, p) = map(int, input().split())\n        temp = c\n        for i in range(m):\n            if temp > k + 1:\n                temp = temp - 1\n            elif temp < k - 1:\n                temp = temp + 1\n            elif temp >= k - 1 and temp <= k + 1:\n                temp = k\n        if temp >= l and temp <= r:\n            price.append(p)\n    if len(price) == 0:\n        print(-1)\n    else:\n        print(min(price))", "t = int(input())\nfor _ in range(t):\n    (n, m, k, l, r) = map(int, input().split())\n    price = []\n    for _ in range(n):\n        (c, p) = map(int, input().split())\n        temp = c\n        for i in range(m):\n            if temp > k + 1:\n                temp = temp - 1\n            elif temp < k - 1:\n                temp = temp + 1\n            elif temp >= k - 1 and temp <= k + 1:\n                temp = k\n        if temp >= l and temp <= r:\n            price.append(p)\n    if len(price) == 0:\n        print(-1)\n    else:\n        print(min(price))", "for _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    valid = []\n    for i in range(n):\n        (c, p) = map(int, input().split())\n        if c < k:\n            c += min(k - c, m)\n        elif c > k:\n            c -= min(c - k, m)\n        if l <= c <= r:\n            valid.append(p)\n    if len(valid) == 0:\n        print(-1)\n    else:\n        print(min(valid))", "T = int(input())\nfor _ in range(T):\n    (N, M, K, L, R) = map(int, input().split())\n    (max_P, result) = (1000000, -1)\n    for _ in range(N):\n        (C, P) = map(int, input().split())\n        for _ in range(M):\n            if C < K - 1:\n                C += 1\n            elif C > K + 1:\n                C -= 1\n            elif K - 1 <= C and C <= K + 1:\n                C = K\n        if L <= C and C <= R:\n            if P <= max_P:\n                (max_P, result) = (P, P)\n    print(result)", "for _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    valid = []\n    for i in range(n):\n        (c, p) = map(int, input().split())\n        if c < k:\n            c += min(k - c, m)\n        elif c > k:\n            c -= min(c - k, m)\n        if l <= c <= r:\n            valid.append(p)\n    if len(valid) == 0:\n        print(-1)\n    else:\n        print(min(valid))", "def helper_function(ambient_temp, coke_temp, minutes, range_low, range_high):\n    if coke_temp >= ambient_temp:\n        final_temp = max(coke_temp - minutes, ambient_temp)\n    else:\n        final_temp = min(coke_temp + minutes, ambient_temp)\n    return final_temp >= range_low and final_temp <= range_high\n\ndef solver(m, k, l, r, list_of_temperatures_and_prices):\n    list_of_temperatures_and_prices.sort(key=lambda x: x[1])\n    for sub_list in list_of_temperatures_and_prices:\n        if helper_function(k, sub_list[0], m, l, r):\n            return sub_list[1]\n    return -1\nt = int(input())\nfor i in range(t):\n    (n, m, k, l, r) = map(int, input().split())\n    list_of_temperatures_and_prices = []\n    for j in range(n):\n        (c, p) = map(int, input().split())\n        list_of_temperatures_and_prices.append([c, p])\n    print(solver(m, k, l, r, list_of_temperatures_and_prices))", "def reach_ambient(c):\n    for _ in range(m):\n        if c > k:\n            c -= 1\n        elif c < k:\n            c += 1\n        elif c == k:\n            break\n    return c\nfor _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    prices = []\n    for _ in range(n):\n        (c, p) = map(int, input().split())\n        ft = reach_ambient(c)\n        if ft >= l and ft <= r:\n            prices.append(p)\n    if len(prices) == 0:\n        print(-1)\n    else:\n        print(min(prices))", "for i in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    price = []\n    for i in range(n):\n        (c, p) = map(int, input().split())\n        if c <= k:\n            if c + m <= k:\n                if l <= c + m <= r:\n                    price.append(p)\n            elif l <= k <= r:\n                price.append(p)\n        elif c - m >= k:\n            if l <= c - m <= r:\n                price.append(p)\n        elif l <= k <= r:\n            price.append(p)\n    if len(price) == 0:\n        print('-1')\n    else:\n        print(min(price))", "def chefDrinksCoke():\n    for i in range(int(input())):\n        tstInput = [int(x) for x in input().split()]\n        n = tstInput[0]\n        m = tstInput[1]\n        k = tstInput[2]\n        l = tstInput[3]\n        r = tstInput[4]\n        minCost = -1\n        for j in range(n):\n            canInfo = [int(x) for x in input().split()]\n            temp = canInfo[0]\n            cost = canInfo[1]\n            tempDif = temp - k\n            if m >= abs(tempDif):\n                temp = k\n            elif tempDif < 0:\n                temp += m\n            elif tempDif > 0:\n                temp -= m\n            if temp <= r and temp >= l:\n                if minCost > 0 and cost < minCost:\n                    minCost = cost\n                elif minCost < 0 and cost > 0:\n                    minCost = cost\n        print(minCost)\nchefDrinksCoke()", "tests = int(input())\nfor i in range(tests):\n    (n, m, k, l, r) = map(int, input().split())\n    ans_price = 10 ** 6 + 1\n    for _ in range(n):\n        (c, p) = map(int, input().split())\n        if c < k:\n            last_temp = min(k, c + m)\n            if l <= last_temp <= r and p < ans_price:\n                ans_price = p\n        else:\n            last_temp = max(k, c - m)\n            if l <= last_temp <= r and p < ans_price:\n                ans_price = p\n    if ans_price == 10 ** 6 + 1:\n        ans_price = -1\n    print(ans_price)", "tests = int(input())\nfor i in range(tests):\n    (n, m, k, l, r) = map(int, input().split())\n    ans_price = 10 ** 6 + 1\n    for _ in range(n):\n        (c, p) = map(int, input().split())\n        if c < k:\n            last_temp = min(k, c + m)\n            if l <= last_temp <= r and p < ans_price:\n                ans_price = p\n        else:\n            last_temp = max(k, c - m)\n            if l <= last_temp <= r and p < ans_price:\n                ans_price = p\n    if ans_price == 10 ** 6 + 1:\n        ans_price = -1\n    print(ans_price)", "for _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    X = []\n    for tc in range(n):\n        (c, p) = map(int, input().split())\n        t = m\n        while t > 0:\n            if c < k - 1:\n                c += 1\n            elif c > k + 1:\n                c -= 1\n            else:\n                c = k\n            t -= 1\n        if c >= l and c <= r:\n            X.append(p)\n    if len(X) > 0:\n        print(min(X))\n    else:\n        print(-1)", "for _ in range(int(input())):\n    arr = []\n    res = []\n    (n, m, k, l, r) = map(int, input().split())\n    for _ in range(n):\n        arr.append(list(map(int, input().split())))\n    for i in arr:\n        for j in range(m):\n            if i[0] < k - 1:\n                i[0] += 1\n            elif i[0] > k + 1:\n                i[0] -= 1\n            elif i[0] <= k + 1 and i[0] >= k - 1:\n                i[0] = k\n        if i[0] >= l and i[0] <= r:\n            res.append(i[1])\n    if res:\n        print(min(res))\n    else:\n        print(-1)", "for _ in range(int(input())):\n    arr = []\n    res = []\n    (n, m, k, l, r) = map(int, input().split())\n    for _ in range(n):\n        arr.append(list(map(int, input().split())))\n    for i in arr:\n        for j in range(m):\n            if i[0] < k - 1:\n                i[0] += 1\n            elif i[0] > k + 1:\n                i[0] -= 1\n            elif i[0] <= k + 1 and i[0] >= k - 1:\n                i[0] = k\n        if i[0] >= l and i[0] <= r:\n            res.append(i[1])\n    if res:\n        print(min(res))\n    else:\n        print(-1)", "for _ in range(int(input())):\n    arr = []\n    res = []\n    (n, m, k, l, r) = map(int, input().split())\n    for _ in range(n):\n        arr.append(list(map(int, input().split())))\n    for i in arr:\n        for j in range(m):\n            if i[0] < k - 1:\n                i[0] += 1\n            elif i[0] > k + 1:\n                i[0] -= 1\n            elif i[0] <= k + 1 and i[0] >= k - 1:\n                i[0] = k\n        if i[0] >= l and i[0] <= r:\n            res.append(i[1])\n    if res:\n        print(min(res))\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    ans = []\n    for i in range(n):\n        (c, p) = map(int, input().split())\n        t = m\n        while t > 0:\n            if c > k + 1:\n                c -= 1\n            elif c < k - 1:\n                c += 1\n            elif c >= k - 1 and c <= k + 1:\n                c = k\n            t -= 1\n        if c >= l and c <= r:\n            ans.append(p)\n    if len(ans) != 0:\n        print(min(ans))\n    else:\n        print('-1')", "q = int(input())\nfor lo in range(q):\n    (n, m, k, l, r) = map(int, input().split())\n    c = []\n    p = []\n    t1 = 0\n    for g in range(n):\n        (x, y) = map(int, input().split())\n        c.append(x)\n        p.append(y)\n    len_p = len(p)\n    flag = 0\n    ans = []\n    for i in range(len_p):\n        t = 0\n        t1 = c[i]\n        t2 = p[i]\n        t = t1\n        for j in range(1, m + 1):\n            if t < k - 1:\n                t += 1\n            elif t < k + 1:\n                t = k\n            else:\n                t -= 1\n        if l <= t <= r:\n            ans.append(t2)\n    r1 = len(ans)\n    if r1 == 0:\n        print(-1)\n    else:\n        print(min(ans))", "t = int(input())\nfor index in range(t):\n    data = list(map(int, input().split()))\n    n = data[0]\n    m = data[1]\n    k = data[2]\n    l = data[3]\n    r = data[4]\n    c = []\n    p = []\n    for i in range(n):\n        data2 = list(map(int, input().split()))\n        c.append(data2[0])\n        p.append(data2[1])\n    ls_fine = []\n    for i in range(n):\n        t = c[i]\n        m = data[1]\n        while m > 0:\n            if t < k - 1:\n                t += 1\n            elif t < k + 1:\n                t = k\n            else:\n                t -= 1\n            m -= 1\n        if l <= t and t <= r:\n            ls_fine.append(p[i])\n    if len(ls_fine) == 0:\n        print(-1)\n    else:\n        print(min(ls_fine))", "import math\nfor _ in range(int(input())):\n    n = list(map(int, input().strip().split()))\n    ans = []\n    for i in range(n[0]):\n        a = list(map(int, input().strip().split()))\n        if a[0] > n[2]:\n            if a[0] - n[1] <= n[2]:\n                a[0] = n[2]\n            else:\n                a[0] -= n[1]\n        elif a[0] < n[2]:\n            if a[0] + n[1] >= n[2]:\n                a[0] = n[2]\n            else:\n                a[0] += n[1]\n        if a[0] >= n[3] and a[0] <= n[4]:\n            ans.append(a[1])\n    ans.sort()\n    if len(ans) == 0:\n        print(-1)\n    else:\n        print(ans[0])", "from bisect import bisect_left\nfrom code import interact\nfrom heapq import heapify, heappush, heappop\nfrom collections import deque\nfrom pydoc import plain\nfrom re import X\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\ninput = sys.stdin.readline\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\ndx = [-1, -2, 1, 2, 2, -2, -1, 1]\ndy = [2, 1, 2, 1, -1, -1, -2, -2]\nfor _ in range(ii()):\n    (n, m, k, l, r) = il()\n    c = []\n    p = []\n    minp = 1000001\n    for _ in range(n):\n        ip = il()\n        c.append(ip[0])\n        p.append(ip[1])\n    for i in range(n):\n        t = c[i]\n        for j in range(m):\n            if t > k + 1:\n                t -= 1\n            elif t < k - 1:\n                t += 1\n            elif t >= k - 1 and t <= k + 1:\n                t = k\n        if t >= l and t <= r:\n            if p[i] < minp:\n                minp = p[i]\n    if minp == 1000001:\n        print('-1')\n    else:\n        print(minp)", "def reach_ambient(c):\n    if c > k:\n        return max(k, c - m)\n    else:\n        return min(k, c + m)\ntestCases = int(input())\nfor testCase in range(testCases):\n    (n, m, k, l, r) = map(int, input().split())\n    prices = []\n    for _ in range(n):\n        (c, p) = map(int, input().split())\n        ft = reach_ambient(c)\n        if ft >= l and ft <= r:\n            prices.append(p)\n    if len(prices) == 0:\n        print(-1)\n    else:\n        print(min(prices))", "def reach_ambient(c):\n    for _ in range(m):\n        if c > k:\n            c -= 1\n        elif c < k:\n            c += 1\n        elif c == k:\n            break\n    return c\ntestCases = int(input())\nfor testCase in range(testCases):\n    (n, m, k, l, r) = map(int, input().split())\n    prices = []\n    for _ in range(n):\n        (c, p) = map(int, input().split())\n        ft = reach_ambient(c)\n        if ft >= l and ft <= r:\n            prices.append(p)\n    if len(prices) == 0:\n        print(-1)\n    else:\n        print(min(prices))", "for _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    cokes = []\n    for i in range(n):\n        (ci, pi) = map(int, input().split())\n        cokes.append([ci, pi])\n    cokes.sort(key=lambda x: x[1])\n    for i in range(n):\n        if cokes[i][0] <= k:\n            ans = min(cokes[i][0] + m, k)\n            if l <= ans <= r:\n                print(cokes[i][1])\n                break\n        else:\n            ans = max(cokes[i][0] - m, k)\n            if l <= ans <= r:\n                print(cokes[i][1])\n                break\n    else:\n        print(-1)", "from math import gcd, sqrt, ceil, floor, log10, log2\nfrom heapq import heapify, heappop, heappush, nsmallest, nlargest\nfrom collections import Counter, deque, OrderedDict, defaultdict\nfrom itertools import combinations, permutations, zip_longest\nfrom bisect import bisect_left, bisect_right\nfrom functools import lru_cache, reduce\nimport sys\nimport time\nimport string\nimport operator\nRECURSION_LIMIT = int(10000000.0)\nINT_MAX = float('inf')\nINT_MIN = float('-inf')\nMOD = int(10000000.0) + 9\nNEWLINE = '\\n'\nSPACE = ' '\nsys.setrecursionlimit(RECURSION_LIMIT)\ninp = lambda fn: fn(input())\ninp_vars = lambda fn, delim, convert_to=list: convert_to(map(fn, input().split(delim)))\nenum = lambda itr: enumerate(itr)\n\ndef toposort(graph, n):\n    degree = [0] * n\n    for node in graph:\n        for adj in graph[node]:\n            degree[adj] += 1\n    bfs_queue = [node for node in range(n) if not degree[node]]\n    for node in bfs_queue:\n        for adj in graph[node]:\n            degree[adj] -= 1\n            if not degree[adj]:\n                bfs_queue.append(adj)\n    return (bfs_queue, degree)\n\ndef dfs(graph, node, visited):\n    visited.add(node)\n    for adj in graph[node]:\n        if adj in visited:\n            continue\n        dfs(graph, adj, visited)\n\ndef seive(n):\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n + 1, i):\n                is_prime[j] = False\n    return is_prime[n]\n\ndef solve(*args, **kwargs):\n    (n, m, k, l, r, arr) = args\n    res = INT_MAX\n    for (temp, price) in arr:\n        if temp < k - 1:\n            temp = min(temp + m, k)\n        elif temp > k + 1:\n            temp = max(temp - m, k)\n        else:\n            temp = k\n        if l <= temp <= r and res > price:\n            res = price\n    return res if res != INT_MAX else -1\n\ndef main(*args, **kwargs):\n    for _ in range(int(input())):\n        arg1 = inp_vars(int, SPACE)\n        arg3 = [inp_vars(int, SPACE) for _ in range(arg1[0])]\n        res = solve(*(*arg1, arg3))\n        if type(res) in {list, tuple, set}:\n            print(*res, sep='\\n')\n        else:\n            print(res)\nmain()", "for _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    cokes = []\n    for i in range(n):\n        (ci, pi) = map(int, input().split())\n        cokes.append([ci, pi])\n    cokes.sort(key=lambda x: x[1])\n    for i in range(n):\n        if cokes[i][0] <= k:\n            ans = min(cokes[i][0] + m, k)\n            if l <= ans <= r:\n                print(cokes[i][1])\n                break\n        else:\n            ans = max(cokes[i][0] - m, k)\n            if l <= ans <= r:\n                print(cokes[i][1])\n                break\n    else:\n        print(-1)", "for _ in range(int(input())):\n    arr = []\n    res = []\n    (n, m, k, l, r) = map(int, input().split())\n    for _ in range(n):\n        arr.append(list(map(int, input().split())))\n    for i in arr:\n        for j in range(m):\n            if i[0] < k - 1:\n                i[0] += 1\n            elif i[0] > k + 1:\n                i[0] -= 1\n            elif i[0] <= k + 1 and i[0] >= k - 1:\n                i[0] = k\n        if i[0] >= l and i[0] <= r:\n            res.append(i[1])\n    if res:\n        print(min(res))\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    cokes = []\n    for i in range(n):\n        (ci, pi) = map(int, input().split())\n        cokes.append([ci, pi])\n    cokes.sort(key=lambda x: x[1])\n    for i in range(n):\n        if cokes[i][0] <= k:\n            ans = min(cokes[i][0] + m, k)\n            if l <= ans <= r:\n                print(cokes[i][1])\n                break\n        else:\n            ans = max(cokes[i][0] - m, k)\n            if l <= ans <= r:\n                print(cokes[i][1])\n                break\n    else:\n        print(-1)", "def fn(l):\n    return l[1]\nfor _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    lst = []\n    for i in range(n):\n        lst.append(list(map(int, input().split())))\n    for i in range(m):\n        for j in lst:\n            if j[0] < k:\n                j[0] += 1\n            if j[0] > k:\n                j[0] -= 1\n    ans = []\n    for i in lst:\n        if r >= i[0] >= l:\n            ans.append(i)\n    if not ans:\n        print(-1)\n    else:\n        print(min(ans, key=fn)[1])", "def fn(l):\n    return l[1]\nfor _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    lst = []\n    for i in range(n):\n        lst.append(list(map(int, input().split())))\n    for i in range(m):\n        for j in lst:\n            if j[0] < k:\n                j[0] += 1\n            if j[0] > k:\n                j[0] -= 1\n    ans = []\n    for i in lst:\n        if r >= i[0] >= l:\n            ans.append(i)\n    if not ans:\n        print(-1)\n    else:\n        print(min(ans, key=fn)[1])", "def fn(l):\n    return l[1]\nfor _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    lst = []\n    for i in range(n):\n        lst.append(list(map(int, input().split())))\n    for i in range(m):\n        for j in lst:\n            if j[0] < k:\n                j[0] += 1\n            if j[0] > k:\n                j[0] -= 1\n    ans = []\n    for i in lst:\n        if r >= i[0] >= l:\n            ans.append(i)\n    if not ans:\n        print(-1)\n    else:\n        print(min(ans, key=fn)[1])", "T = int(input())\nfor i in range(0, T):\n    a = input().split()\n    for j in range(0, 5):\n        a[j] = int(a[j])\n    tem = []\n    pric = []\n    for j in range(0, a[0]):\n        (aa, b) = input().split()\n        tem.append(int(aa))\n        pric.append(int(b))\n    for j in range(0, a[0]):\n        count = 0\n        c = tem[j]\n        while count < a[1] and c < a[2]:\n            c += 1\n            count += 1\n        while count < a[1] and c > a[2]:\n            c -= 1\n            count += 1\n        tem[j] = c\n    c = []\n    for j in range(0, a[0]):\n        if tem[j] <= a[4] and tem[j] >= a[3]:\n            c.append(pric[j])\n    a = len(c)\n    if a == 0:\n        print(-1)\n    else:\n        pric = c[0]\n        for j in c:\n            pric = min(pric, j)\n        print(pric)", "from math import inf\n\ndef solve():\n    (n, m, k, l, r) = map(int, input().split())\n    ans = inf\n    for i in range(n):\n        (c, p) = map(int, input().split())\n        if k - 1 <= c <= k + 1:\n            if l <= k <= r:\n                ans = min(ans, p)\n        elif c < k - 1:\n            extra = k - 1 - c\n            if m > extra:\n                if l <= k <= r:\n                    ans = min(ans, p)\n            else:\n                c = c + m\n                if l <= c <= r:\n                    ans = min(ans, p)\n        else:\n            extra = c - k - 1\n            if m > extra:\n                if l <= k <= r:\n                    ans = min(ans, p)\n            else:\n                c = c - m\n                if l <= c <= r:\n                    ans = min(ans, p)\n    print(ans if ans != inf else -1)\nfor _ in range(int(input())):\n    solve()", "from math import inf\n\ndef solve():\n    (n, m, k, l, r) = map(int, input().split())\n    ans = inf\n    for i in range(n):\n        (c, p) = map(int, input().split())\n        if k - 1 <= c <= k + 1:\n            if l <= k <= r:\n                ans = min(ans, p)\n        elif c < k - 1:\n            extra = k - 1 - c\n            if m > extra:\n                if l <= k <= r:\n                    ans = min(ans, p)\n            else:\n                c = c + m\n                if l <= c <= r:\n                    ans = min(ans, p)\n        else:\n            extra = c - k - 1\n            if m > extra:\n                if l <= k <= r:\n                    ans = min(ans, p)\n            else:\n                c = c - m\n                if l <= c <= r:\n                    ans = min(ans, p)\n    print(ans if ans != inf else -1)\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m, k, l, r) = map(int, input().split())\n    c = [0] * n\n    p = [0] * n\n    x = []\n    for i in range(n):\n        (c[i], p[i]) = map(int, input().split())\n        for j in range(m):\n            if c[i] > k + 1:\n                c[i] -= 1\n            elif c[i] < k - 1:\n                c[i] += 1\n            elif c[i] <= k + 1 and c[i] >= k - 1:\n                c[i] = k\n        if c[i] >= l and c[i] <= r:\n            x.append(p[i])\n    if x == []:\n        print(-1)\n    else:\n        print(min(x))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m, k, l, r) = map(int, input().split())\n    c = [0] * n\n    p = [0] * n\n    x = []\n    for i in range(n):\n        (c[i], p[i]) = map(int, input().split())\n        for j in range(m):\n            if c[i] > k + 1:\n                c[i] -= 1\n            elif c[i] < k - 1:\n                c[i] += 1\n            elif c[i] <= k + 1 and c[i] >= k - 1:\n                c[i] = k\n        if c[i] >= l and c[i] <= r:\n            x.append(p[i])\n    if x == []:\n        print(-1)\n    else:\n        print(min(x))", "for _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    answer = -1\n    for _ in range(n):\n        (c, p) = map(int, input().split())\n        final_temp = min(k, c + m)\n        if c > k:\n            final_temp = max(k, c - m)\n        req_temp = range(l, r + 1)\n        if final_temp in req_temp and (p < answer or answer == -1):\n            answer = p\n    print(answer)", "for _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    answer = -1\n    for _ in range(n):\n        temp_m = m\n        (c, p) = map(int, input().split())\n        while temp_m != 0:\n            if c > k + 1:\n                c -= 1\n            elif c < k - 1:\n                c += 1\n            else:\n                c = k\n                break\n            temp_m -= 1\n        req_temp = range(l, r + 1)\n        if c in req_temp and (p < answer or answer == -1):\n            answer = p\n    print(answer)", "for _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    answer = -1\n    for _ in range(n):\n        temp_m = m\n        (c, p) = map(int, input().split())\n        while temp_m != 0:\n            if c > k + 1:\n                c -= 1\n            elif c < k - 1:\n                c += 1\n            else:\n                c = k\n                break\n            temp_m -= 1\n        req_temp = range(l, r + 1)\n        if c in req_temp and (p < answer or answer == -1):\n            answer = p\n    print(answer)", "def temp(t, K, M):\n    for i in range(M):\n        if t > K + 1:\n            t = t - 1\n        elif t < K - 1:\n            t = t + 1\n        else:\n            t = K\n    return t\nT = int(input())\nfor i in range(T):\n    (N, M, K, L, R) = map(int, input().split())\n    lst = []\n    for j in range(N):\n        (C, P) = map(int, input().split())\n        if temp(C, K, M) >= L and temp(C, K, M) <= R:\n            lst.append(P)\n    if lst == []:\n        print(-1)\n    else:\n        print(min(lst))", "tc = int(input())\nwhile tc > 0:\n    ntc_p = input()\n    listt = list(map(int, ntc_p.split()))\n    (n, m, k, l, r) = (listt[0], listt[1], listt[2], listt[3], listt[4])\n    (c, p, q) = ([], [], [])\n    while n > 0:\n        ntc_v = input()\n        listt_v = list(map(int, ntc_v.split()))\n        c.append(listt_v[0])\n        p.append(listt_v[1])\n        n -= 1\n    (i, e, n) = (0, 0, listt[0])\n    while i < n:\n        if c[i] > k + 1:\n            c[i] -= 1\n        elif c[i] < k - 1:\n            c[i] += 1\n        else:\n            c[i] = k\n        i += 1\n        if e < m - 1:\n            e += 1\n            i -= 1\n        else:\n            if c[i - 1] >= l and c[i - 1] <= r:\n                q.append(p[i - 1])\n            e = 0\n    if q == []:\n        print('-1')\n    else:\n        print(min(q))\n    tc -= 1", "def solve():\n    (n, m, k, l, r) = list(map(int, input().split()))\n    ans = float('inf')\n    for i in range(n):\n        (c, p) = list(map(int, input().split()))\n        if c < k:\n            c += m\n            if c > k:\n                c = k\n        elif c > k:\n            c -= m\n            if c < k:\n                c = k\n        if l <= c and c <= r:\n            ans = min(ans, p)\n    if ans == float('inf'):\n        return -1\n    return ans\ntc = int(input())\nfor t in range(tc):\n    print(solve())", "def solve():\n    (n, m, k, l, r) = list(map(int, input().split()))\n    ans = float('inf')\n    for i in range(n):\n        (c, p) = list(map(int, input().split()))\n        if c < k:\n            c += m\n            if c > k:\n                c = k\n        elif c > k:\n            c -= m\n            if c < k:\n                c = k\n        if l <= c and c <= r:\n            ans = min(ans, p)\n    if ans == float('inf'):\n        return -1\n    return ans\ntc = int(input())\nfor t in range(tc):\n    print(solve())", "t = int(input())\nfor j in range(t):\n    (n, m, k, l, r) = map(int, input().split())\n    d = []\n    for i in range(n):\n        (c, p) = map(int, input().split())\n        if c >= k:\n            c -= m\n            if c < k:\n                c = k\n        else:\n            c += m\n            if c > k:\n                c = k\n        if c in range(l, r + 1):\n            d.append(p)\n    if len(d) == 0:\n        print(-1)\n    else:\n        print(min(d))", "for _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    q = []\n    for i in range(n):\n        (c, p) = map(int, input().split())\n        for j in range(m):\n            if c < k - 1:\n                c += 1\n            elif c > k + 1:\n                c -= 1\n            elif c <= k + 1 and c >= k - 1:\n                c = k\n                break\n        if c >= l and c <= r:\n            q.append(p)\n    if len(q) == 0:\n        print(-1)\n    else:\n        print(min(q))", "for _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    q = []\n    for i in range(n):\n        (c, p) = map(int, input().split())\n        for j in range(m):\n            if c < k - 1:\n                c += 1\n            elif c > k + 1:\n                c -= 1\n            elif c <= k + 1 and c >= k - 1:\n                c = k\n                break\n        if c >= l and c <= r:\n            q.append(p)\n    if len(q) == 0:\n        print(-1)\n    else:\n        print(min(q))", "for _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    q = []\n    for i in range(n):\n        (c, p) = map(int, input().split())\n        for j in range(m):\n            if c < k - 1:\n                c += 1\n            elif c > k + 1:\n                c -= 1\n            elif c <= k + 1 and c >= k - 1:\n                c = k\n                break\n        if c >= l and c <= r:\n            q.append(p)\n    if len(q) == 0:\n        print(-1)\n    else:\n        print(min(q))", "for _ in range(int(input())):\n    (n, m, k, l, r) = [int(x) for x in input().strip().split()]\n    ratures = []\n    prices = []\n    for _ in range(n):\n        (c, p) = [int(x) for x in input().strip().split()]\n        ratures.append(c)\n        prices.append(p)\n    res = []\n    for i in range(len(ratures)):\n        check = ratures[i]\n        for j in range(m, 0, -1):\n            if check > k + 1:\n                check -= 1\n            elif check < k - 1:\n                check += 1\n            elif check >= k - 1 and check <= k + 1:\n                check = k\n            else:\n                continue\n        if check >= l and check <= r:\n            res.append(prices[i])\n    if len(res) == 0:\n        print(-1, end='\\n')\n    else:\n        ans = min(res)\n        print(ans, end='\\n')", "t = int(input())\nfor _ in range(t):\n    (n, m, k, l, r) = [int(x) for x in input().split()]\n    prices = []\n    for i in range(n):\n        (t, cost) = [int(p) for p in input().split()]\n        for j in range(m, 0, -1):\n            if t > k + 1:\n                t -= 1\n            elif t < k - 1:\n                t += 1\n            elif t >= k - 1 and t <= k + 1:\n                t = k\n            else:\n                continue\n        if l <= t and t <= r:\n            prices.append(cost)\n    if prices:\n        print(min(prices))\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    (n, m, k, l, r) = [int(x) for x in input().split()]\n    prices = []\n    for i in range(n):\n        (t, cost) = [int(p) for p in input().split()]\n        for j in range(m, 0, -1):\n            if t > k + 1:\n                t -= 1\n            elif t < k - 1:\n                t += 1\n            elif t >= k - 1 and t <= k + 1:\n                t = k\n            else:\n                continue\n        if l <= t and t <= r:\n            prices.append(cost)\n    if prices:\n        print(min(prices))\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, m, k, l, r) = [int(x) for x in input().strip().split()]\n    ratures = []\n    prices = []\n    for _ in range(n):\n        (c, p) = [int(x) for x in input().strip().split()]\n        ratures.append(c)\n        prices.append(p)\n    res = []\n    for i in range(len(ratures)):\n        check = ratures[i]\n        for j in range(m, 0, -1):\n            if check > k + 1:\n                check -= 1\n            elif check < k - 1:\n                check += 1\n            elif check >= k - 1 and check <= k + 1:\n                check = k\n            else:\n                continue\n        if check >= l and check <= r:\n            res.append(prices[i])\n    if len(res) == 0:\n        print(-1, end='\\n')\n    else:\n        ans = min(res)\n        print(ans, end='\\n')", "for _ in range(int(input())):\n    (n, m, k, l, r) = [int(x) for x in input().strip().split()]\n    ratures = []\n    prices = []\n    for _ in range(n):\n        (c, p) = [int(x) for x in input().strip().split()]\n        ratures.append(c)\n        prices.append(p)\n    res = []\n    for i in range(len(ratures)):\n        check = ratures[i]\n        for j in range(m, 0, -1):\n            if check > k + 1:\n                check -= 1\n            elif check < k - 1:\n                check += 1\n            elif check >= k - 1 and check <= k + 1:\n                check = k\n            else:\n                continue\n        if check >= l and check <= r:\n            res.append(prices[i])\n    if len(res) == 0:\n        print(-1, end='\\n')\n    else:\n        ans = min(res)\n        print(ans, end='\\n')", "for i in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    cost = None\n    for j in range(n):\n        (c, p) = map(int, input().split())\n        if cost is None or p < cost:\n            if c < k:\n                x = k - c\n                if m >= x:\n                    temp = k\n                else:\n                    temp = c + m\n            elif c == k:\n                temp = k\n            else:\n                x = c - k\n                if m >= x:\n                    temp = k\n                else:\n                    temp = c - m\n            if temp >= l and temp <= r:\n                cost = p\n    if cost is None:\n        print(-1)\n    else:\n        print(cost)", "for _ in range(int(input())):\n    (n, m, k, l, r) = [int(x) for x in input().strip().split()]\n    ratures = []\n    prices = []\n    for _ in range(n):\n        (c, p) = [int(x) for x in input().strip().split()]\n        ratures.append(c)\n        prices.append(p)\n    res = []\n    for i in range(len(ratures)):\n        check = ratures[i]\n        for j in range(m, 0, -1):\n            if check > k + 1:\n                check -= 1\n            elif check < k - 1:\n                check += 1\n            elif check >= k - 1 and check <= k + 1:\n                check = k\n            else:\n                continue\n        if check >= l and check <= r:\n            res.append(prices[i])\n    if len(res) == 0:\n        print(-1, end='\\n')\n    else:\n        ans = min(res)\n        print(ans, end='\\n')", "for _ in range(int(input())):\n    (n, m, k, l, r) = [int(x) for x in input().strip().split()]\n    ratures = []\n    prices = []\n    for _ in range(n):\n        (c, p) = [int(x) for x in input().strip().split()]\n        ratures.append(c)\n        prices.append(p)\n    res = []\n    for i in range(len(ratures)):\n        for j in range(m, 0, -1):\n            if ratures[i] > k + 1:\n                ratures[i] -= 1\n            elif ratures[i] < k - 1:\n                ratures[i] += 1\n            elif ratures[i] >= k - 1 and ratures[i] <= k + 1:\n                ratures[i] = k\n            else:\n                continue\n        if ratures[i] >= l and ratures[i] <= r:\n            res.append(prices[i])\n    if len(res) == 0:\n        print(-1, end='\\n')\n    else:\n        ans = min(res)\n        print(ans, end='\\n')", "for _ in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    z = []\n    for j in range(n):\n        (x, y) = map(int, input().split())\n        for j in range(m):\n            if x > k + 1:\n                x -= 1\n            elif x < k - 1:\n                x += 1\n            else:\n                x = k\n        if l <= x <= r:\n            z.append(y)\n    if len(z) == 0:\n        print(-1)\n    else:\n        print(min(z))", "for i in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    l1 = []\n    for i in range(n):\n        (p, q) = map(int, input().split())\n        temp = p\n        for i in range(m):\n            if temp > k + 1:\n                temp = temp - 1\n            elif temp < k - 1:\n                temp = temp + 1\n            elif temp >= k - 1 and temp <= k + 1:\n                temp = k\n        if temp >= l and temp <= r:\n            l1.append(q)\n    if len(l1) == 0:\n        print(-1)\n    else:\n        print(min(l1))", "for i in range(int(input())):\n    (n, m, k, l, r) = map(int, input().split())\n    l1 = []\n    for i in range(n):\n        (p, q) = map(int, input().split())\n        temp = p\n        for i in range(m):\n            if temp > k + 1:\n                temp = temp - 1\n            elif temp < k - 1:\n                temp = temp + 1\n            elif temp >= k - 1 and temp <= k + 1:\n                temp = k\n        if temp >= l and temp <= r:\n            l1.append(q)\n    if len(l1) == 0:\n        print(-1)\n    else:\n        print(min(l1))", "for i in range(int(input())):\n    costs = []\n    (n, m, k, l, r) = map(int, input().split())\n    j = 0\n    while j < n:\n        (c, p) = map(int, input().split())\n        mi = 0\n        while mi < m:\n            if c < k - 1:\n                c += 1\n            elif c > k + 1:\n                c -= 1\n            else:\n                c = k\n            mi += 1\n        if l <= c <= r:\n            costs.append(p)\n        j += 1\n    if len(costs) != 0:\n        print(min(costs))\n    else:\n        print(-1)", "for i in range(int(input())):\n    costs = []\n    (n, m, k, l, r) = map(int, input().split())\n    j = 0\n    while j < n:\n        (c, p) = map(int, input().split())\n        mi = 0\n        while mi < m:\n            if c < k - 1:\n                c += 1\n            elif c > k + 1:\n                c -= 1\n            else:\n                c = k\n            mi += 1\n        if l <= c <= r:\n            costs.append(p)\n        j += 1\n    if len(costs) != 0:\n        print(min(costs))\n    else:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    (n, m, k, l, r) = map(int, input().split())\n    p1 = []\n    for i in range(n):\n        (c, p) = map(int, input().split())\n        for i in range(m):\n            if c > k + 1:\n                c -= 1\n            elif c < k - 1:\n                c += 1\n            else:\n                c = k\n        if c in range(l, r + 1):\n            p1.append(p)\n    if len(p1) == 0:\n        print(-1)\n    else:\n        print(min(p1))", "t1 = int(input())\nfor _ in range(t1):\n    (n, m, k, l, r) = map(int, input().split())\n    lci = []\n    lpi = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        lci.append(x)\n        lpi.append(y)\n    l_result = []\n    for i in range(len(lci)):\n        m1 = m\n        t = lci[i]\n        if t < k - 1:\n            while t != k - 1 and m1 > 0:\n                t = t + 1\n                m1 = m1 - 1\n        if t > k + 1:\n            while t != k + 1 and m1 > 0:\n                t = t - 1\n                m1 = m1 - 1\n        if t >= k - 1 and t <= k + 1:\n            while m1 > 0:\n                t = k\n                m1 = m1 - 1\n        if m1 == 0 and t >= l and (t <= r):\n            l_result.append(lpi[i])\n    l_result.sort()\n    if len(l_result) == 0:\n        print(-1)\n    else:\n        print(l_result[0])", "t1 = int(input())\nfor _ in range(t1):\n    (n, m, k, l, r) = map(int, input().split())\n    lci = []\n    lpi = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        lci.append(x)\n        lpi.append(y)\n    l_result = []\n    for i in range(len(lci)):\n        m1 = m\n        t = lci[i]\n        if t < k - 1:\n            while t != k - 1 and m1 > 0:\n                t = t + 1\n                m1 = m1 - 1\n        if t > k + 1:\n            while t != k + 1 and m1 > 0:\n                t = t - 1\n                m1 = m1 - 1\n        if t >= k - 1 and t <= k + 1:\n            while m1 > 0:\n                t = k\n                m1 = m1 - 1\n        if m1 == 0 and t >= l and (t <= r):\n            l_result.append(lpi[i])\n    l_result.sort()\n    if len(l_result) == 0:\n        print(-1)\n    else:\n        print(l_result[0])"]