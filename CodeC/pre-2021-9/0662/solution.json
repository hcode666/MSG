["import string\nfrom functools import lru_cache\nimport atexit, io\nimport sys\nfrom math import log2\nimport math\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_left, bisect_right, insort\nfrom math import gcd\nfrom math import sqrt\nfrom collections import Counter, defaultdict\nfrom heapq import heappush, heappop, heapify\nimport heapq\n\nclass FenwickTree:\n\n    def __init__(self, n):\n        self.farr = [0] * (n + 1)\n\n    def prefixSum(self, idx):\n        s = 0\n        while idx > 0:\n            s += self.farr[idx]\n            idx -= idx & -idx\n        return s\n\n    def update(self, idx, val):\n        while idx < len(self.farr):\n            self.farr[idx] += val\n            idx += idx & -idx\n\n    def find(self, k):\n        curr = 0\n        ans = 0\n        prevSum = 0\n        for i in range(log2(n), -1, -1):\n            if self.farr[curr + (i << i)] + prevSum < k:\n                curr += 1 << i\n                prevSum += self.farr[curr]\n        return curr + 1\n\nclass Trie(object):\n\n    def __init__(self):\n        self.trie = {}\n\n    def insert(self, word):\n        t = self.trie\n        for c in word:\n            if c not in t:\n                t[c] = {}\n            t = t[c]\n        t['-'] = True\n\n    def search(self, word):\n        t = self.trie\n        for c in word:\n            if c not in t:\n                return False\n            t = t[c]\n        return '-' in t\n\n    def startsWith(self, prefix):\n        t = self.trie\n        for c in prefix:\n            if c not in t:\n                return False\n            t = t[c]\n        return True\n\n    def query(self, word):\n        ans = 0\n        t = self.trie\n        for i in word:\n            if i not in t:\n                break\n            ans += 1\n            t = t[i]\n        return ans\n\nclass FenvTree:\n\n    def __init__(self, arr):\n        arr.insert(0, 0)\n        self.farr = [0]\n        prefix = [0]\n        for i in arr[1:]:\n            prefix.append(prefix[-1] + i)\n        for i in range(1, len(arr)):\n            idash = i - (i & -i)\n            self.farr.append(prefix[i] - prefix[idash])\n\n    def query(self, l, r):\n        return self.prefixSum(r) - self.prefixSum(l - 1)\n\n    def prefixSum(self, idx):\n        s = 0\n        while idx > 0:\n            s += self.farr[idx]\n            idx -= idx & -idx\n        return s\n\n    def update(self, idx, val):\n        while idx < len(self.farr):\n            self.farr[idx] += val\n            idx += idx & -idx\n\nclass DSU:\n\n    def __init__(self, n):\n        self.parent = []\n        self.size = []\n        for i in range(n + 1):\n            self.parent.append(i)\n            self.size.append(1)\n\n    def union(self, u, v):\n        pu = self.findPar(u)\n        pv = self.findPar(v)\n        if pu == pv:\n            return\n        if self.size[pu] < self.size[pv]:\n            self.parent[pu] = pv\n            self.size[pv] += self.size[pu]\n        else:\n            self.parent[pv] = pu\n            self.size[pu] += self.size[pv]\n\n    def unionByRank(self, u, v):\n        pu = self.findPar(u)\n        pv = self.findPar(v)\n        if pu == pv:\n            return\n        if self.rank[pu] < self.rank[pv]:\n            self.parent[pu] = pv\n        elif self.rank[pv] < self.rank[pu]:\n            self.parent[pv] = pu\n        else:\n            self.parent[pu] = pv\n            self.rank[pv] += 1\n\n    def findPar(self, node):\n        if self.parent[node] == node:\n            return node\n        self.parent[node] = self.findPar(self.parent[node])\n        return self.parent[node]\n\nclass info:\n\n    def __init__(self, _open=0, _close=0, _full=0):\n        self.open = _open\n        self.close = _close\n        self.full = _full\n\nclass SGTree:\n\n    def __init__(self, n):\n        self.seg = [0 for _ in range(4 * n)]\n\n    def build(self, ind, low, high, arr):\n        if low == high:\n            self.seg[ind] = arr[low]\n            return\n        mid = (low + high) // 2\n        self.build(2 * ind + 1, low, mid, arr)\n        self.build(2 * ind + 2, mid + 1, high, arr)\n        self.seg[ind] = min(self.seg[2 * ind + 1], self.seg[2 * ind + 2])\n\n    def query(self, ind, low, high, l, r):\n        if r < low or l > high:\n            return sys.maxsize\n        if low <= l and r >= high:\n            return self.seg[ind]\n        mid = low + high >> 1\n        left = self.query(2 * ind + 1, 0, mid, l, r)\n        right = self.query(2 * ind + 2, mid + 1, high, l, r)\n        return min(left, right)\n\n    def update(self, ind, low, high, i, val):\n        if low == high:\n            self.seg = val\n            return\n        mid = low + high >> 1\n        if i <= mid:\n            self.update(2 * ind + 1, low, mid, i, val)\n        else:\n            self.update(2 * ind + 1, mid + 1, high, i, val)\n        self.seg[ind] = min(self.seg[2 * ind + 1], self.seg[2 * ind + 2])\n\ndef isPalindrome(s):\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] != s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef IntList():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef getInts():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef getStrs():\n    return sys.stdin.readline().strip()\n\ndef StrList():\n    list(sys.stdin.readline().strip())\n\ndef FloatList():\n    lis = input().split()\n    lis = list(map(float, lis))\n    return lis\n\ndef SieveOfEratosthenes(n, isPrime):\n    isPrime[0] = isPrime[1] = False\n    for i in range(2, n + 1):\n        isPrime[i] = True\n    p = 2\n    while p * p <= n:\n        if isPrime[p]:\n            i = p * p\n            while i <= n:\n                isPrime[i] = False\n                i += p\n        p += 1\n\ndef findPrimePair(n):\n    isPrime = [0] * (n + 1)\n    SieveOfEratosthenes(n, isPrime)\n    for i in range(0, n):\n        if isPrime[i] and isPrime[n - i]:\n            print(i, n - i)\n            return\n\ndef query(ind, low, high, l, r, seg):\n    if r < low or l > high:\n        return info()\n    if low <= l and r >= high:\n        return self.seg[ind]\n    mid = low + high >> 1\n    left = self.query(2 * ind + 1, 0, mid, l, r, seg)\n    right = self.query(2 * ind + 2, mid + 1, high, l, r, seg)\n    return merge(left, right)\n\ndef merge(left, right):\n    ans = info()\n    ans.full = left.full + right.full + min(left.open, right.close)\n    ans.open = left.open + right.open + min(left.open, right.close)\n    ans.close = left.close + right.close + min(left.open, right.close)\n    return ans\n\ndef build(ind, low, high, s, seg):\n    if low == high:\n        seg[ind] = info(s[low] == '(', s[low] == ')', 0)\n        return\n    mid = (low + high) // 2\n    build(2 * ind + 1, low, mid, s, seg)\n    build(2 * ind + 2, mid + 1, high, s, seg)\n    seg[ind] = merge(seg[2 * ind + 1], seg[2 * ind + 2])\n\ndef countN(lis):\n    ans = 0\n    cnt = 0\n    for i in range(len(lis) - 1, -1, -1):\n        if lis[i] == 0:\n            cnt += 1\n        else:\n            ans += cnt\n    return ans\n\nclass Pair:\n\n    def __init__(self, x, y, gcd):\n        self.x = x\n        self.y = y\n        self.gcd = gcd\n\ndef Euclidean(a, b):\n    if b == 0:\n        return Pair(1, 0, a)\n    dash = Euclidean(b, a % b)\n    return Pair(dash.y, dash.x - a // b * dash.y, dash.gcd)\n\ndef chineseRemainder(a1, n1, a2, n2):\n    p = Euclidean(n1, n2)\n    x = p.x\n    gcd = p.gcd\n    if (a1 - a2) % gcd:\n        return -1\n    k = (a1 - a2) // gcd\n    a = a1 - n1 * (k * x % n2 // gcd)\n    lcm = n1 * n2 // gcd\n    if a < 0:\n        a += lcm\n    return a\n\ndef ncr(n, k, md):\n    mod = 998244353\n    tab = [[0 for _ in range(k + 1)] for i in range(n + 1)]\n    for i in range(1, len(tab)):\n        tab[i][0] = 1\n    for i in range(1, len(tab)):\n        for j in range(1, min(i + 1, len(tab[0]))):\n            if i == 1 and j == 1:\n                tab[i][j] = 1\n            else:\n                tab[i][j] = (tab[i - 1][j] + tab[i - 1][j - 1]) % mod\n    return tab\n\ndef repeat(i, j, arr):\n    if i > j:\n        return\n    cnt1 = i\n    cnt2 = j\n    while cnt1 < cnt2:\n        (arr[cnt1], arr[cnt2]) = (arr[cnt2], arr[cnt1])\n        cnt1 += 1\n        cnt2 -= 1\n    if i - 1 >= 0:\n        ele = arr[i - 1]\n        if ele > 0:\n            s = int(sqrt(ele - 1)) + 1\n            first = s * s - ele\n            repeat(first, i - 1, arr)\n    return\nspf = []\n\ndef makeSeive(n):\n    for i in range(n + 1):\n        spf.append(i)\n\ndef seive(n):\n    s = int(sqrt(n + 1))\n    for i in range(2, s + 1):\n        if spf[i] == i:\n            for j in range(i * i, n + 1, i):\n                if spf[j] == j:\n                    spf[j] = i\n\ndef getFactorization(x):\n    ret = set()\n    while x != 1:\n        ret.add(spf[x])\n        x = x // spf[x]\n    return ret\n\ndef getLPS(s):\n    st = '@#' + '#'.join(s) + '#&'\n    c = 0\n    r = 0\n    lps = [0] * len(st)\n    for i in range(1, len(st) - 1):\n        mirror = c - (i - c)\n        if i < r and mirror >= 0:\n            lps[i] = min(lps[mirror], r - i)\n        while st[i + lps[i] + 1] == st[i - lps[i] - 1]:\n            lps[i] += 1\n        if i + lps[i] > r:\n            r = i + lps[i]\n            c = i\n    return max(lps)\nfact = [1 for _ in range(100002)]\nmod = 10 ** 9 + 7\n\ndef getFact(n):\n    for i in range(1, n + 1):\n        fact[i] = fact[i - 1] * i % mod\n\ndef getInv(word):\n    num = math.factorial(len(word))\n    for v in Counter(word).values():\n        num = num * pow(math.factorial(v), mod - 2, mod) % mod\n    return int(num) % (10 ** 9 + 7)\n\ndef subarrayXor(arr, n, m):\n    HashTable = defaultdict(bool)\n    HashTable[0] = 1\n    count = 0\n    curSum = 0\n    for i in arr:\n        curSum ^= i\n        if HashTable[curSum ^ m]:\n            count += HashTable[curSum ^ m]\n        HashTable[curSum] += 1\n    return count\n\ndef get2dPrefixSum(matrix, mid=0):\n    n = len(matrix)\n    m = len(matrix[0])\n    prefix = [[0 for _ in range(m + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            prefix[i][j] = prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] + matrix[i - 1][j - 1]\n    return prefix\n\ndef get2dPrefixSumCnt(matrix, mid=0):\n    n = len(matrix)\n    m = len(matrix[0])\n    prefix = [[0 for _ in range(m + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            prefix[i][j] = prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] + matrix[i - 1][j - 1]\n    return prefix\n\ndef getSumRange(r1, c1, r2, c2, prefix):\n    cnt = prefix[r2][c2] - prefix[r2][c1 - 1] - prefix[r1 - 1][c2] + prefix[r1 - 1][c1 - 1]\n    return cnt\n\ndef getPrefix(arr):\n    prefix = [0]\n    for i in arr:\n        prefix.append(prefix[-1] + i)\n    return prefix\n\ndef getInv(arr):\n    cnt = 0\n    ans = []\n    for i in arr:\n        ind = bisect_right(ans, i)\n        cnt += len(ans) - ind\n        insort(ans, i)\n    return cnt\nM = 10 ** 5\n\ndef getFactors(x):\n    temp = []\n    k = 1\n    while k * k <= x:\n        if x % k == 0:\n            temp.append(k)\n            if k * k != x:\n                temp.append(x // k)\n        k += 1\n    return temp\n\ndef grayCode(n):\n    if not n:\n        return [0]\n    res = [0, 1]\n    for i in range(2, n + 1):\n        for j in range(len(res) - 1, -1, -1):\n            res.append(res[j] | 1 << i - 1)\n    return res\n\ndef threeSum(nums, target):\n    ans = -1\n    d = dict()\n    for (i, j) in enumerate(nums):\n        d[j] = i + 1\n    nums.sort()\n    for i in range(len(nums) - 2):\n        low = i + 1\n        high = len(nums) - 1\n        while low < high:\n            s = nums[i] + nums[low] + nums[high]\n            if s == target:\n                print(d[nums[low]], d[nums[high]], d[nums[i]])\n                return\n                low += 1\n                high -= 1\n            elif s < 0:\n                low = low + 1\n            else:\n                high -= 1\n    print('IMPOSSIBLE')\n    return\n\ndef FUCKCF():\n    (n, k, m) = getInts()\n    a = IntList()\n    b = IntList()\n    c = IntList()\n    c.extend(IntList())\n    c.sort(reverse=1)\n    diff = [i - j for (i, j) in list(zip(a, b))]\n    diff.sort(reverse=1)\n    s = sum(diff)\n    i = 0\n    j = 0\n    while i < n and j < k + m:\n        if diff[i] >= c[j]:\n            i += 1\n            j += 1\n            s -= c[j - 1]\n        else:\n            j += 1\n    print(s)\nt = 1\nt = int(input())\nfor i in range(t):\n    FUCKCF()", "import string\nfrom functools import lru_cache\nimport atexit, io\nimport sys\nfrom math import log2\nimport math\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_left, bisect_right, insort\nfrom math import gcd\nfrom math import sqrt\nfrom collections import Counter, defaultdict\nfrom heapq import heappush, heappop, heapify\nimport heapq\n\nclass FenwickTree:\n\n    def __init__(self, n):\n        self.farr = [0] * (n + 1)\n\n    def prefixSum(self, idx):\n        s = 0\n        while idx > 0:\n            s += self.farr[idx]\n            idx -= idx & -idx\n        return s\n\n    def update(self, idx, val):\n        while idx < len(self.farr):\n            self.farr[idx] += val\n            idx += idx & -idx\n\n    def find(self, k):\n        curr = 0\n        ans = 0\n        prevSum = 0\n        for i in range(log2(n), -1, -1):\n            if self.farr[curr + (i << i)] + prevSum < k:\n                curr += 1 << i\n                prevSum += self.farr[curr]\n        return curr + 1\n\nclass Trie(object):\n\n    def __init__(self):\n        self.trie = {}\n\n    def insert(self, word):\n        t = self.trie\n        for c in word:\n            if c not in t:\n                t[c] = {}\n            t = t[c]\n        t['-'] = True\n\n    def search(self, word):\n        t = self.trie\n        for c in word:\n            if c not in t:\n                return False\n            t = t[c]\n        return '-' in t\n\n    def startsWith(self, prefix):\n        t = self.trie\n        for c in prefix:\n            if c not in t:\n                return False\n            t = t[c]\n        return True\n\n    def query(self, word):\n        ans = 0\n        t = self.trie\n        for i in word:\n            if i not in t:\n                break\n            ans += 1\n            t = t[i]\n        return ans\n\nclass FenvTree:\n\n    def __init__(self, arr):\n        arr.insert(0, 0)\n        self.farr = [0]\n        prefix = [0]\n        for i in arr[1:]:\n            prefix.append(prefix[-1] + i)\n        for i in range(1, len(arr)):\n            idash = i - (i & -i)\n            self.farr.append(prefix[i] - prefix[idash])\n\n    def query(self, l, r):\n        return self.prefixSum(r) - self.prefixSum(l - 1)\n\n    def prefixSum(self, idx):\n        s = 0\n        while idx > 0:\n            s += self.farr[idx]\n            idx -= idx & -idx\n        return s\n\n    def update(self, idx, val):\n        while idx < len(self.farr):\n            self.farr[idx] += val\n            idx += idx & -idx\n\nclass DSU:\n\n    def __init__(self, n):\n        self.parent = []\n        self.size = []\n        for i in range(n + 1):\n            self.parent.append(i)\n            self.size.append(1)\n\n    def union(self, u, v):\n        pu = self.findPar(u)\n        pv = self.findPar(v)\n        if pu == pv:\n            return\n        if self.size[pu] < self.size[pv]:\n            self.parent[pu] = pv\n            self.size[pv] += self.size[pu]\n        else:\n            self.parent[pv] = pu\n            self.size[pu] += self.size[pv]\n\n    def unionByRank(self, u, v):\n        pu = self.findPar(u)\n        pv = self.findPar(v)\n        if pu == pv:\n            return\n        if self.rank[pu] < self.rank[pv]:\n            self.parent[pu] = pv\n        elif self.rank[pv] < self.rank[pu]:\n            self.parent[pv] = pu\n        else:\n            self.parent[pu] = pv\n            self.rank[pv] += 1\n\n    def findPar(self, node):\n        if self.parent[node] == node:\n            return node\n        self.parent[node] = self.findPar(self.parent[node])\n        return self.parent[node]\n\nclass info:\n\n    def __init__(self, _open=0, _close=0, _full=0):\n        self.open = _open\n        self.close = _close\n        self.full = _full\n\nclass SGTree:\n\n    def __init__(self, n):\n        self.seg = [0 for _ in range(4 * n)]\n\n    def build(self, ind, low, high, arr):\n        if low == high:\n            self.seg[ind] = arr[low]\n            return\n        mid = (low + high) // 2\n        self.build(2 * ind + 1, low, mid, arr)\n        self.build(2 * ind + 2, mid + 1, high, arr)\n        self.seg[ind] = min(self.seg[2 * ind + 1], self.seg[2 * ind + 2])\n\n    def query(self, ind, low, high, l, r):\n        if r < low or l > high:\n            return sys.maxsize\n        if low <= l and r >= high:\n            return self.seg[ind]\n        mid = low + high >> 1\n        left = self.query(2 * ind + 1, 0, mid, l, r)\n        right = self.query(2 * ind + 2, mid + 1, high, l, r)\n        return min(left, right)\n\n    def update(self, ind, low, high, i, val):\n        if low == high:\n            self.seg = val\n            return\n        mid = low + high >> 1\n        if i <= mid:\n            self.update(2 * ind + 1, low, mid, i, val)\n        else:\n            self.update(2 * ind + 1, mid + 1, high, i, val)\n        self.seg[ind] = min(self.seg[2 * ind + 1], self.seg[2 * ind + 2])\n\ndef isPalindrome(s):\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] != s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef IntList():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef getInts():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef getStrs():\n    return sys.stdin.readline().strip()\n\ndef StrList():\n    list(sys.stdin.readline().strip())\n\ndef FloatList():\n    lis = input().split()\n    lis = list(map(float, lis))\n    return lis\n\ndef SieveOfEratosthenes(n, isPrime):\n    isPrime[0] = isPrime[1] = False\n    for i in range(2, n + 1):\n        isPrime[i] = True\n    p = 2\n    while p * p <= n:\n        if isPrime[p]:\n            i = p * p\n            while i <= n:\n                isPrime[i] = False\n                i += p\n        p += 1\n\ndef findPrimePair(n):\n    isPrime = [0] * (n + 1)\n    SieveOfEratosthenes(n, isPrime)\n    for i in range(0, n):\n        if isPrime[i] and isPrime[n - i]:\n            print(i, n - i)\n            return\n\ndef query(ind, low, high, l, r, seg):\n    if r < low or l > high:\n        return info()\n    if low <= l and r >= high:\n        return self.seg[ind]\n    mid = low + high >> 1\n    left = self.query(2 * ind + 1, 0, mid, l, r, seg)\n    right = self.query(2 * ind + 2, mid + 1, high, l, r, seg)\n    return merge(left, right)\n\ndef merge(left, right):\n    ans = info()\n    ans.full = left.full + right.full + min(left.open, right.close)\n    ans.open = left.open + right.open + min(left.open, right.close)\n    ans.close = left.close + right.close + min(left.open, right.close)\n    return ans\n\ndef build(ind, low, high, s, seg):\n    if low == high:\n        seg[ind] = info(s[low] == '(', s[low] == ')', 0)\n        return\n    mid = (low + high) // 2\n    build(2 * ind + 1, low, mid, s, seg)\n    build(2 * ind + 2, mid + 1, high, s, seg)\n    seg[ind] = merge(seg[2 * ind + 1], seg[2 * ind + 2])\n\ndef countN(lis):\n    ans = 0\n    cnt = 0\n    for i in range(len(lis) - 1, -1, -1):\n        if lis[i] == 0:\n            cnt += 1\n        else:\n            ans += cnt\n    return ans\n\nclass Pair:\n\n    def __init__(self, x, y, gcd):\n        self.x = x\n        self.y = y\n        self.gcd = gcd\n\ndef Euclidean(a, b):\n    if b == 0:\n        return Pair(1, 0, a)\n    dash = Euclidean(b, a % b)\n    return Pair(dash.y, dash.x - a // b * dash.y, dash.gcd)\n\ndef chineseRemainder(a1, n1, a2, n2):\n    p = Euclidean(n1, n2)\n    x = p.x\n    gcd = p.gcd\n    if (a1 - a2) % gcd:\n        return -1\n    k = (a1 - a2) // gcd\n    a = a1 - n1 * (k * x % n2 // gcd)\n    lcm = n1 * n2 // gcd\n    if a < 0:\n        a += lcm\n    return a\n\ndef ncr(n, k, md):\n    mod = 998244353\n    tab = [[0 for _ in range(k + 1)] for i in range(n + 1)]\n    for i in range(1, len(tab)):\n        tab[i][0] = 1\n    for i in range(1, len(tab)):\n        for j in range(1, min(i + 1, len(tab[0]))):\n            if i == 1 and j == 1:\n                tab[i][j] = 1\n            else:\n                tab[i][j] = (tab[i - 1][j] + tab[i - 1][j - 1]) % mod\n    return tab\n\ndef repeat(i, j, arr):\n    if i > j:\n        return\n    cnt1 = i\n    cnt2 = j\n    while cnt1 < cnt2:\n        (arr[cnt1], arr[cnt2]) = (arr[cnt2], arr[cnt1])\n        cnt1 += 1\n        cnt2 -= 1\n    if i - 1 >= 0:\n        ele = arr[i - 1]\n        if ele > 0:\n            s = int(sqrt(ele - 1)) + 1\n            first = s * s - ele\n            repeat(first, i - 1, arr)\n    return\nspf = []\n\ndef makeSeive(n):\n    for i in range(n + 1):\n        spf.append(i)\n\ndef seive(n):\n    s = int(sqrt(n + 1))\n    for i in range(2, s + 1):\n        if spf[i] == i:\n            for j in range(i * i, n + 1, i):\n                if spf[j] == j:\n                    spf[j] = i\n\ndef getFactorization(x):\n    ret = set()\n    while x != 1:\n        ret.add(spf[x])\n        x = x // spf[x]\n    return ret\n\ndef getLPS(s):\n    st = '@#' + '#'.join(s) + '#&'\n    c = 0\n    r = 0\n    lps = [0] * len(st)\n    for i in range(1, len(st) - 1):\n        mirror = c - (i - c)\n        if i < r and mirror >= 0:\n            lps[i] = min(lps[mirror], r - i)\n        while st[i + lps[i] + 1] == st[i - lps[i] - 1]:\n            lps[i] += 1\n        if i + lps[i] > r:\n            r = i + lps[i]\n            c = i\n    return max(lps)\nfact = [1 for _ in range(100002)]\nmod = 10 ** 9 + 7\n\ndef getFact(n):\n    for i in range(1, n + 1):\n        fact[i] = fact[i - 1] * i % mod\n\ndef getInv(word):\n    num = math.factorial(len(word))\n    for v in Counter(word).values():\n        num = num * pow(math.factorial(v), mod - 2, mod) % mod\n    return int(num) % (10 ** 9 + 7)\n\ndef subarrayXor(arr, n, m):\n    HashTable = defaultdict(bool)\n    HashTable[0] = 1\n    count = 0\n    curSum = 0\n    for i in arr:\n        curSum ^= i\n        if HashTable[curSum ^ m]:\n            count += HashTable[curSum ^ m]\n        HashTable[curSum] += 1\n    return count\n\ndef get2dPrefixSum(matrix, mid=0):\n    n = len(matrix)\n    m = len(matrix[0])\n    prefix = [[0 for _ in range(m + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            prefix[i][j] = prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] + matrix[i - 1][j - 1]\n    return prefix\n\ndef get2dPrefixSumCnt(matrix, mid=0):\n    n = len(matrix)\n    m = len(matrix[0])\n    prefix = [[0 for _ in range(m + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            prefix[i][j] = prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] + matrix[i - 1][j - 1]\n    return prefix\n\ndef getSumRange(r1, c1, r2, c2, prefix):\n    cnt = prefix[r2][c2] - prefix[r2][c1 - 1] - prefix[r1 - 1][c2] + prefix[r1 - 1][c1 - 1]\n    return cnt\n\ndef getPrefix(arr):\n    prefix = [0]\n    for i in arr:\n        prefix.append(prefix[-1] + i)\n    return prefix\n\ndef getInv(arr):\n    cnt = 0\n    ans = []\n    for i in arr:\n        ind = bisect_right(ans, i)\n        cnt += len(ans) - ind\n        insort(ans, i)\n    return cnt\nM = 10 ** 5\n\ndef getFactors(x):\n    temp = []\n    k = 1\n    while k * k <= x:\n        if x % k == 0:\n            temp.append(k)\n            if k * k != x:\n                temp.append(x // k)\n        k += 1\n    return temp\n\ndef grayCode(n):\n    if not n:\n        return [0]\n    res = [0, 1]\n    for i in range(2, n + 1):\n        for j in range(len(res) - 1, -1, -1):\n            res.append(res[j] | 1 << i - 1)\n    return res\n\ndef threeSum(nums, target):\n    ans = -1\n    d = dict()\n    for (i, j) in enumerate(nums):\n        d[j] = i + 1\n    nums.sort()\n    for i in range(len(nums) - 2):\n        low = i + 1\n        high = len(nums) - 1\n        while low < high:\n            s = nums[i] + nums[low] + nums[high]\n            if s == target:\n                print(d[nums[low]], d[nums[high]], d[nums[i]])\n                return\n                low += 1\n                high -= 1\n            elif s < 0:\n                low = low + 1\n            else:\n                high -= 1\n    print('IMPOSSIBLE')\n    return\n\ndef FUCKCF():\n    (n, k, m) = getInts()\n    a = IntList()\n    b = IntList()\n    c = IntList()\n    c.extend(IntList())\n    c.sort(reverse=1)\n    diff = [i - j for (i, j) in list(zip(a, b))]\n    diff.sort(reverse=1)\n    s = sum(diff)\n    i = 0\n    j = 0\n    while i < n and j < k + m:\n        if diff[i] >= c[j]:\n            i += 1\n            j += 1\n            s -= c[j - 1]\n        else:\n            j += 1\n    print(s)\nt = 1\nt = int(input())\nfor i in range(t):\n    FUCKCF()", "t = int(input())\nfor _ in range(t):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    c.extend(d)\n    diff = [0 for i in range(n)]\n    for i in range(n):\n        diff[i] = a[i] - b[i]\n    diff.sort(reverse=True)\n    c.sort(reverse=True)\n    bid = 0\n    for j in range(n):\n        while c[bid] > diff[j]:\n            bid += 1\n            if bid >= k + m:\n                break\n        if bid >= k + m:\n            break\n        else:\n            diff[j] -= c[bid]\n            bid += 1\n            if bid >= k + m:\n                break\n    print(sum(diff))", "import heapq\nfor _ in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    tasks = list(map(int, input().split()))\n    completed = list(map(int, input().split()))\n    white = list(map(int, input().split()))\n    black = list(map(int, input().split()))\n    diff = sorted([tasks[i] - completed[i] for i in range(n)], reverse=True)\n    new = white + black\n    maxH = [-new[i] for i in range(len(new))]\n    heapq.heapify(maxH)\n    for (i, d) in enumerate(diff):\n        while maxH:\n            button = -heapq.heappop(maxH)\n            if d >= button:\n                diff[i] -= button\n                break\n    print(sum(diff))", "t = int(input())\nfor _ in range(t):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    c.extend(d)\n    diff = [0 for i in range(n)]\n    for i in range(n):\n        diff[i] = a[i] - b[i]\n    diff.sort(reverse=True)\n    c.sort(reverse=True)\n    bid = 0\n    for j in range(n):\n        while c[bid] > diff[j]:\n            bid += 1\n            if bid >= k + m:\n                break\n        if bid >= k + m:\n            break\n        else:\n            diff[j] -= c[bid]\n            bid += 1\n            if bid >= k + m:\n                break\n    print(sum(diff))", "for _ in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    arr1 = list(map(int, input().split()))\n    arr2 = list(map(int, input().split()))\n    for i in range(n):\n        arr1[i] = arr1[i] - arr2[i]\n    arr2 = list(map(int, (input() + ' ' + input()).split()))\n    arr1.sort()\n    arr2.sort()\n    i = n - 1\n    inc = 0\n    for j in range(k + m - 1, -1, -1):\n        if arr1[i] >= arr2[j]:\n            inc += arr1[i] - arr2[j]\n            i -= 1\n    while i >= 0:\n        inc += arr1[i]\n        i -= 1\n    print(inc)", "from bisect import *\nfor _ in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = [i - j for (i, j) in zip(a, b)]\n    v = list(map(int, input().split()))\n    for i in map(int, input().split()):\n        v.append(i)\n    v.sort(reverse=True)\n    l.sort(reverse=True)\n    ans = 0\n    pos = 0\n    for i in v:\n        if i <= l[pos]:\n            ans += i\n            pos += 1\n    print(sum(l) - ans)", "for _ in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a = [a[i] - b[i] for i in range(n)]\n    w = list(map(int, input().split()))\n    bl = list(map(int, input().split()))\n    c = w + bl\n    u = 0\n    c.sort(reverse=True)\n    a.sort(reverse=True)\n    i = 0\n    for j in c:\n        if j <= a[i]:\n            u += j\n            i += 1\n    print(sum(a) - u)", "for _ in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a = [a[i] - b[i] for i in range(n)]\n    w = list(map(int, input().split()))\n    bl = list(map(int, input().split()))\n    c = w + bl\n    u = 0\n    c.sort(reverse=True)\n    a.sort(reverse=True)\n    i = 0\n    for j in c:\n        if j <= a[i]:\n            u += j\n            i += 1\n    print(sum(a) - u)", "for _ in range(int(input())):\n    (n, w, b) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    for i in range(n):\n        a[i] = a[i] - c[i]\n    c = list(map(int, (input() + ' ' + input()).split()))\n    a.sort()\n    c.sort(reverse=True)\n    i = n - 1\n    incomplete = 0\n    for j in range(w + b):\n        if a[i] >= c[j]:\n            incomplete += a[i] - c[j]\n            i -= 1\n    while i >= 0:\n        incomplete += a[i]\n        i -= 1\n    print(incomplete)", "for _ in range(int(input())):\n    (n, w, b) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    for i in range(n):\n        a[i] = a[i] - c[i]\n    c = list(map(int, (input() + ' ' + input()).split()))\n    a.sort()\n    c.sort()\n    i = n - 1\n    incomplete = 0\n    for j in range(w + b - 1, -1, -1):\n        if a[i] >= c[j]:\n            incomplete += a[i] - c[j]\n            i -= 1\n    while i >= 0:\n        incomplete += a[i]\n        i -= 1\n    print(incomplete)", "for _ in range(int(input())):\n    (n, w, b) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    for i in range(n):\n        a[i] = a[i] - c[i]\n    c = list(map(int, (input() + ' ' + input()).split()))\n    a.sort()\n    c.sort()\n    i = n - 1\n    incomplete = 0\n    for j in range(w + b - 1, -1, -1):\n        if a[i] >= c[j]:\n            incomplete += a[i] - c[j]\n            i -= 1\n    while i >= 0:\n        incomplete += a[i]\n        i -= 1\n    print(incomplete)", "for _ in range(int(input())):\n    (n, w, b) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    for i in range(n):\n        a[i] = a[i] - c[i]\n    c = list(map(int, (input() + ' ' + input()).split()))\n    a.sort()\n    c.sort()\n    i = n - 1\n    incomplete = 0\n    for j in range(w + b - 1, -1, -1):\n        if a[i] >= c[j]:\n            incomplete += a[i] - c[j]\n            i -= 1\n    while i >= 0:\n        incomplete += a[i]\n        i -= 1\n    print(incomplete)", "for _ in range(int(input())):\n    (n, w, b) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    for i in range(n):\n        a[i] = a[i] - c[i]\n    c = list(map(int, (input() + ' ' + input()).split()))\n    a.sort()\n    c.sort()\n    i = n - 1\n    incomplete = 0\n    for j in range(w + b - 1, -1, -1):\n        if a[i] >= c[j]:\n            incomplete += a[i] - c[j]\n            i -= 1\n    while i >= 0:\n        incomplete += a[i]\n        i -= 1\n    print(incomplete)", "t = int(input())\nfor i in range(t):\n    (n, k, m) = list(map(int, input().split()))\n    task_count = list(map(int, input().split()))\n    completed_task_count = list(map(int, input().split()))\n    white_values = list(map(int, input().split()))\n    black_values = list(map(int, input().split()))\n    diff_task = [a_i - b_i for (a_i, b_i) in zip(task_count, completed_task_count)]\n    diff_task = sorted(diff_task, reverse=True)\n    buttons = sorted(white_values + black_values, reverse=True)\n    x = 0\n    for (idx, element) in enumerate(diff_task):\n        if element == 0:\n            continue\n        else:\n            while buttons[x] > element:\n                x += 1\n            diff_task[idx] -= buttons[x]\n            x += 1\n            if x >= len(buttons):\n                break\n    print(sum(diff_task))", "t = int(input())\nwhile t:\n    (N, K, M) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    d = []\n    for i in range(N):\n        d.append(A[i] - B[i])\n    d.sort(reverse=True)\n    k.extend(m)\n    k.sort(reverse=True)\n    j = 0\n    sum = 0\n    for i in range(len(k)):\n        if j < len(d):\n            if k[i] <= d[j]:\n                sum += d[j] - k[i]\n                i += 1\n                j += 1\n            else:\n                i += 1\n        else:\n            break\n    while j < len(d):\n        sum += d[j]\n        j += 1\n    print(sum)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    (n, k, m) = list(map(int, input().split()))\n    task_count = list(map(int, input().split()))\n    completed_task_count = list(map(int, input().split()))\n    white_values = list(map(int, input().split()))\n    black_values = list(map(int, input().split()))\n    diff_task = [a_i - b_i for (a_i, b_i) in zip(task_count, completed_task_count)]\n    diff_task = sorted(diff_task, reverse=True)\n    buttons = sorted(white_values + black_values, reverse=True)\n    x = 0\n    for (idx, element) in enumerate(diff_task):\n        if element == 0:\n            continue\n        else:\n            while buttons[x] > element:\n                x += 1\n            diff_task[idx] -= buttons[x]\n            x += 1\n            if x >= len(buttons):\n                break\n    print(sum(diff_task))", "t = int(input())\nfor i in range(t):\n    (n, k, m) = list(map(int, input().split()))\n    task_count = list(map(int, input().split()))\n    completed_task_count = list(map(int, input().split()))\n    white_values = list(map(int, input().split()))\n    black_values = list(map(int, input().split()))\n    diff_task = [a_i - b_i for (a_i, b_i) in zip(task_count, completed_task_count)]\n    diff_task = sorted(diff_task, reverse=True)\n    buttons = sorted(white_values + black_values, reverse=True)\n    x = 0\n    for (idx, element) in enumerate(diff_task):\n        if element == 0:\n            continue\n        else:\n            while buttons[x] > element:\n                x += 1\n            diff_task[idx] -= buttons[x]\n            x += 1\n            if x >= len(buttons):\n                break\n    print(sum(diff_task))", "t = int(input())\nfor i in range(t):\n    (n, k, m) = list(map(int, input().split()))\n    task_count = list(map(int, input().split()))\n    completed_task_count = list(map(int, input().split()))\n    white_values = list(map(int, input().split()))\n    black_values = list(map(int, input().split()))\n    diff_task = [a_i - b_i for (a_i, b_i) in zip(task_count, completed_task_count)]\n    diff_task = sorted(diff_task, reverse=True)\n    buttons = sorted(white_values + black_values, reverse=True)\n    x = 0\n    for (idx, element) in enumerate(diff_task):\n        if element == 0:\n            continue\n        else:\n            while buttons[x] > element:\n                x += 1\n            diff_task[idx] -= buttons[x]\n            x += 1\n            if x >= len(buttons):\n                break\n    print(sum(diff_task))", "t = int(input())\nfor i in range(t):\n    (n, k, m) = list(map(int, input().split()))\n    task_count = list(map(int, input().split()))\n    completed_task_count = list(map(int, input().split()))\n    white_values = list(map(int, input().split()))\n    black_values = list(map(int, input().split()))\n    diff_task = [a_i - b_i for (a_i, b_i) in zip(task_count, completed_task_count)]\n    diff_task = sorted(diff_task, reverse=True)\n    buttons = sorted(white_values + black_values, reverse=True)\n    x = 0\n    for (idx, element) in enumerate(diff_task):\n        if element == 0:\n            continue\n        else:\n            while buttons[x] > element:\n                x += 1\n            diff_task[idx] -= buttons[x]\n            x += 1\n            if x >= len(buttons):\n                break\n    print(sum(diff_task))", "t = int(input())\nfor i in range(t):\n    (n, k, m) = list(map(int, input().split()))\n    task_count = list(map(int, input().split()))\n    completed_task_count = list(map(int, input().split()))\n    white_values = list(map(int, input().split()))\n    black_values = list(map(int, input().split()))\n    diff_task = [a_i - b_i for (a_i, b_i) in zip(task_count, completed_task_count)]\n    diff_task = sorted(diff_task, reverse=True)\n    buttons = sorted(white_values + black_values, reverse=True)\n    x = 0\n    for (idx, element) in enumerate(diff_task):\n        if element == 0:\n            continue\n        else:\n            while buttons[x] > element:\n                x += 1\n            diff_task[idx] -= buttons[x]\n            x += 1\n            if x >= len(buttons):\n                break\n    print(sum(diff_task))", "t = int(input())\nfor i in range(t):\n    (n, k, m) = list(map(int, input().split()))\n    task_count = list(map(int, input().split()))\n    completed_task_count = list(map(int, input().split()))\n    white_values = list(map(int, input().split()))\n    black_values = list(map(int, input().split()))\n    diff_task = [a_i - b_i for (a_i, b_i) in zip(task_count, completed_task_count)]\n    diff_task = sorted(diff_task, reverse=True)\n    buttons = sorted(white_values + black_values, reverse=True)\n    x = 0\n    for (idx, element) in enumerate(diff_task):\n        if element == 0:\n            continue\n        else:\n            while buttons[x] > element:\n                x += 1\n            diff_task[idx] -= buttons[x]\n            x += 1\n            if x >= len(buttons):\n                break\n    print(sum(diff_task))", "t = int(input())\nfor i in range(t):\n    (n, k, m) = list(map(int, input().split()))\n    task_count = list(map(int, input().split()))\n    completed_task_count = list(map(int, input().split()))\n    white_values = list(map(int, input().split()))\n    black_values = list(map(int, input().split()))\n    diff_task = [a_i - b_i for (a_i, b_i) in zip(task_count, completed_task_count)]\n    diff_task = sorted(diff_task, reverse=True)\n    buttons = sorted(white_values + black_values, reverse=True)\n    x = 0\n    for (idx, element) in enumerate(diff_task):\n        if element == 0:\n            continue\n        else:\n            while buttons[x] > element:\n                x += 1\n            diff_task[idx] -= buttons[x]\n            x += 1\n            if x >= len(buttons):\n                break\n    print(sum(diff_task))", "t = int(input())\nfor i in range(t):\n    (n, k, m) = list(map(int, input().split()))\n    task_count = list(map(int, input().split()))\n    completed_task_count = list(map(int, input().split()))\n    white_values = list(map(int, input().split()))\n    black_values = list(map(int, input().split()))\n    diff_task = [a_i - b_i for (a_i, b_i) in zip(task_count, completed_task_count)]\n    diff_task = sorted(diff_task, reverse=True)\n    buttons = sorted(white_values + black_values, reverse=True)\n    x = 0\n    for (idx, element) in enumerate(diff_task):\n        if element == 0:\n            continue\n        else:\n            while buttons[x] > element:\n                x += 1\n            diff_task[idx] -= buttons[x]\n            x += 1\n            if x >= len(buttons):\n                break\n    print(sum(diff_task))", "t = int(input())\nfor i in range(t):\n    (n, k, m) = list(map(int, input().split()))\n    task_count = list(map(int, input().split()))\n    completed_task_count = list(map(int, input().split()))\n    white_values = list(map(int, input().split()))\n    black_values = list(map(int, input().split()))\n    diff_task = [a_i - b_i for (a_i, b_i) in zip(task_count, completed_task_count)]\n    diff_task = sorted(diff_task, reverse=True)\n    buttons = sorted(white_values + black_values, reverse=True)\n    x = 0\n    for (idx, element) in enumerate(diff_task):\n        if element == 0:\n            continue\n        else:\n            while buttons[x] > element:\n                x += 1\n            diff_task[idx] -= buttons[x]\n            x += 1\n            if x >= len(buttons):\n                break\n    print(sum(diff_task))", "t = int(input())\nfor i in range(t):\n    (n, k, m) = list(map(int, input().split()))\n    task_count = list(map(int, input().split()))\n    completed_task_count = list(map(int, input().split()))\n    white_values = list(map(int, input().split()))\n    black_values = list(map(int, input().split()))\n    diff_task = [a_i - b_i for (a_i, b_i) in zip(task_count, completed_task_count)]\n    diff_task = sorted(diff_task, reverse=True)\n    buttons = sorted(white_values + black_values, reverse=True)\n    x = 0\n    for (idx, element) in enumerate(diff_task):\n        if element == 0:\n            continue\n        else:\n            while buttons[x] > element:\n                x += 1\n            diff_task[idx] -= buttons[x]\n            x += 1\n            if x >= len(buttons):\n                break\n    print(sum(diff_task))", "def ti():\n    return tuple(map(int, input().split()))\n\ndef li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\nfor tastcas in range(int(input())):\n    (n, k, m) = li()\n    r = k + m\n    a = li()\n    d = li()\n    w = li()\n    w += li()\n    for i in range(n):\n        a[i] -= d[i]\n    a.sort()\n    w.sort()\n    i = n - 1\n    j = r - 1\n    while i >= 0 and j >= 0:\n        while j >= 0 and w[j] > a[i]:\n            j -= 1\n        if i >= 0:\n            a[i] -= w[j]\n            i -= 1\n            j -= 1\n    print(sum(a))", "test_cases = int(input())\nfor _ in range(test_cases):\n    (numdays, white_buttons, black_buttons) = map(int, input().split())\n    A = [int(x) for x in input().split()]\n    B = [int(x) for x in input().split()]\n    K = [int(x) for x in input().split()]\n    M = [int(x) for x in input().split()]\n    C = [A[i] - B[i] for i in range(numdays)]\n    C.sort(reverse=True)\n    buttons = sorted(K + M, reverse=True)\n    i = 0\n    j = 0\n    while i < len(C) and j < len(buttons):\n        if buttons[j] <= C[i]:\n            C[i] -= buttons[j]\n            j += 1\n            i += 1\n        else:\n            j += 1\n    print(sum(C))", "t = int(input())\nfor i in range(t):\n    (n, k, m) = list(map(int, input().split()))\n    task_count = list(map(int, input().split()))\n    completed_task_count = list(map(int, input().split()))\n    white_values = list(map(int, input().split()))\n    black_values = list(map(int, input().split()))\n    diff_task = [a_i - b_i for (a_i, b_i) in zip(task_count, completed_task_count)]\n    diff_task = sorted(diff_task, reverse=True)\n    buttons = sorted(white_values + black_values, reverse=True)\n    x = 0\n    for (idx, element) in enumerate(diff_task):\n        if element == 0:\n            continue\n        else:\n            while buttons[x] > element:\n                x += 1\n            diff_task[idx] -= buttons[x]\n            x += 1\n            if x >= len(buttons):\n                break\n    print(sum(diff_task))", "for _ in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    tmp = sorted(c + d)\n    res = []\n    s = 0\n    for i in range(n):\n        res.append(a[i] - b[i])\n    res.sort()\n    (ib, il) = (len(tmp) - 1, len(res) - 1)\n    while il >= 0 and ib >= 0:\n        while ib >= 0 and tmp[ib] > res[il]:\n            ib -= 1\n        res[il] -= tmp[ib]\n        s += res[il]\n        il -= 1\n        ib -= 1\n    while il >= 0:\n        s += res[il]\n        il -= 1\n    print(s)", "t = int(input())\nfor i in range(t):\n    (n, k, m) = list(map(int, input().split()))\n    task_count = list(map(int, input().split()))\n    completed_task_count = list(map(int, input().split()))\n    white_values = list(map(int, input().split()))\n    black_values = list(map(int, input().split()))\n    diff_task = [a_i - b_i for (a_i, b_i) in zip(task_count, completed_task_count)]\n    diff_task = sorted(diff_task, reverse=True)\n    buttons = sorted(white_values + black_values, reverse=True)\n    x = 0\n    for (idx, element) in enumerate(diff_task):\n        if element == 0:\n            continue\n        else:\n            while buttons[x] > element:\n                x += 1\n            diff_task[idx] -= buttons[x]\n            x += 1\n            if x >= len(buttons):\n                break\n    print(sum(diff_task))", "t = int(input())\nfor i in range(t):\n    (n, k, m) = list(map(int, input().split()))\n    task_count = list(map(int, input().split()))\n    completed_task_count = list(map(int, input().split()))\n    white_values = list(map(int, input().split()))\n    black_values = list(map(int, input().split()))\n    diff_task = [a_i - b_i for (a_i, b_i) in zip(task_count, completed_task_count)]\n    diff_task = sorted(diff_task, reverse=True)\n    buttons = sorted(white_values + black_values, reverse=True)\n    x = 0\n    for (idx, element) in enumerate(diff_task):\n        if element == 0:\n            continue\n        else:\n            while buttons[x] > element:\n                x += 1\n            diff_task[idx] -= buttons[x]\n            x += 1\n            if x >= len(buttons):\n                break\n    print(sum(diff_task))", "T = int(input())\nfor i in range(T):\n    NKM = str(input()).split(' ')\n    N = int(NKM[0])\n    K = int(NKM[1])\n    M = int(NKM[2])\n    A = str(input()).split(' ')\n    B = str(input()).split(' ')\n    C = str(input()).split(' ')\n    D = str(input()).split(' ')\n    mix = []\n    for j in range(N):\n        mix.append((int(A[j]), int(B[j])))\n    for j in range(K):\n        C[j] = int(C[j])\n    for j in range(M):\n        D[j] = int(D[j])\n    mix.sort(key=lambda x: x[0] - x[1], reverse=True)\n    C.sort(reverse=True)\n    D.sort(reverse=True)\n    left = 0\n    ccur = 0\n    dcur = 0\n    for j in range(N):\n        if mix[j][0] - mix[j][1]:\n            flag = 1\n            while flag and (ccur < K or dcur < M):\n                if ccur < K:\n                    if dcur < M:\n                        if C[ccur] > D[dcur]:\n                            if C[ccur] <= mix[j][0] - mix[j][1]:\n                                left = left + (mix[j][0] - mix[j][1]) - C[ccur]\n                                ccur = ccur + 1\n                                flag = 0\n                            else:\n                                ccur = ccur + 1\n                        elif D[dcur] <= mix[j][0] - mix[j][1]:\n                            left = left + (mix[j][0] - mix[j][1]) - D[dcur]\n                            dcur = dcur + 1\n                            flag = 0\n                        else:\n                            dcur = dcur + 1\n                    elif C[ccur] <= mix[j][0] - mix[j][1]:\n                        left = left + (mix[j][0] - mix[j][1]) - C[ccur]\n                        ccur = ccur + 1\n                        flag = 0\n                    else:\n                        ccur = ccur + 1\n                elif dcur < M:\n                    if D[dcur] <= mix[j][0] - mix[j][1]:\n                        left = left + (mix[j][0] - mix[j][1]) - D[dcur]\n                        dcur = dcur + 1\n                        flag = 0\n                    else:\n                        dcur = dcur + 1\n            if flag:\n                left = left + (mix[j][0] - mix[j][1])\n    print(left)", "t = int(input())\nfor i in range(t):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    z = sorted(c + d, reverse=True)\n    s = [0] * n\n    for j in range(n):\n        s[j] = a[j] - b[j]\n    x = 0\n    w = len(z)\n    s = sorted(s, reverse=True)\n    for (j, v) in enumerate(s):\n        if v == 0:\n            continue\n        else:\n            while z[x] > v:\n                x += 1\n            s[j] -= z[x]\n            x += 1\n            if x >= w:\n                break\n    print(sum(s))", "t = int(input())\nfor i in range(t):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    z = sorted(c + d, reverse=True)\n    s = [0] * n\n    for j in range(n):\n        s[j] = a[j] - b[j]\n    x = 0\n    w = len(z)\n    s = sorted(s, reverse=True)\n    for (j, v) in enumerate(s):\n        if v == 0:\n            continue\n        else:\n            while z[x] > v:\n                x += 1\n            s[j] -= z[x]\n            x += 1\n            if x >= w:\n                break\n    print(sum(s))", "t = int(input())\nfor i in range(t):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    z = sorted(c + d, reverse=True)\n    s = [0] * n\n    for j in range(n):\n        s[j] = a[j] - b[j]\n    x = 0\n    w = len(z)\n    s = sorted(s, reverse=True)\n    for (j, v) in enumerate(s):\n        if v == 0:\n            continue\n        else:\n            while z[x] > v:\n                x += 1\n            s[j] -= z[x]\n            x += 1\n            if x >= w:\n                break\n    print(sum(s))", "t = int(input())\nfor i in range(t):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    z = sorted(c + d, reverse=True)\n    s = [0] * n\n    for j in range(n):\n        s[j] = a[j] - b[j]\n    x = 0\n    w = len(z)\n    s = sorted(s, reverse=True)\n    for (j, v) in enumerate(s):\n        if v == 0:\n            continue\n        else:\n            while z[x] > v:\n                x += 1\n            s[j] -= z[x]\n            x += 1\n            if x >= w:\n                break\n    print(sum(s))", "t = int(input())\nfor i in range(t):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    z = sorted(c + d, reverse=True)\n    s = [0] * n\n    for j in range(n):\n        s[j] = a[j] - b[j]\n    x = 0\n    w = len(z)\n    s = sorted(s, reverse=True)\n    for (j, v) in enumerate(s):\n        if v == 0:\n            continue\n        else:\n            while z[x] > v:\n                x += 1\n            s[j] -= z[x]\n            x += 1\n            if x >= w:\n                break\n    print(sum(s))", "t = int(input())\nfor i in range(t):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    z = sorted(c + d, reverse=True)\n    s = [0] * n\n    for j in range(n):\n        s[j] = a[j] - b[j]\n    x = 0\n    w = len(z)\n    s = sorted(s, reverse=True)\n    for (j, v) in enumerate(s):\n        if v == 0:\n            continue\n        else:\n            while z[x] > v:\n                x += 1\n            s[j] -= z[x]\n            x += 1\n            if x >= w:\n                break\n    print(sum(s))", "def call(A, B, buy, n):\n    diff = []\n    for i in range(n):\n        diff.append(A[i] - B[i])\n    diff.sort(reverse=True)\n    buy.sort(reverse=True)\n    (i, j) = (0, 0)\n    while i < n and j < len(buy):\n        if diff[i] >= buy[j]:\n            diff[i] -= buy[j]\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return sum(diff)\nt = int(input())\nwhile t > 0:\n    (n, m, k) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    D = list(map(int, input().split()))\n    print(call(A, B, C + D, n))\n    t -= 1", "t = int(input())\nfor i in range(t):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    z = sorted(c + d, reverse=True)\n    s = [0] * n\n    for j in range(n):\n        s[j] = a[j] - b[j]\n    x = 0\n    w = len(z)\n    s = sorted(s, reverse=True)\n    for (j, v) in enumerate(s):\n        if v == 0:\n            continue\n        else:\n            while z[x] > v:\n                x += 1\n            s[j] -= z[x]\n            x += 1\n            if x >= w:\n                break\n    print(sum(s))", "for _ in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    (i, j) = (0, 0)\n    new = sorted(c + d, reverse=True)\n    adb = [0] * n\n    for i in range(n):\n        adb[i] = a[i] - b[i]\n    j = 0\n    minn = 1000000000\n    ind = 0\n    new_l = len(new)\n    adb = sorted(adb, reverse=True)\n    for (i, v) in enumerate(adb):\n        if v == 0:\n            continue\n        else:\n            while new[j] > v:\n                j += 1\n            adb[i] -= new[j]\n            j += 1\n            if j >= new_l:\n                break\n    print(sum(adb))", "for w in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    K = list(map(int, input().split()))\n    M = list(map(int, input().split()))\n    K += M\n    K.sort(reverse=True)\n    C = [a - b for (a, b) in zip(A, B)]\n    C.sort(reverse=True)\n    inc = sum(C)\n    j = 0\n    for i in C:\n        if i == 0:\n            continue\n        else:\n            while K[j] > i:\n                j += 1\n            inc -= K[j]\n            j += 1\n            if j > k + m - 1:\n                break\n    print(inc)", "for w in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    K = list(map(int, input().split()))\n    M = list(map(int, input().split()))\n    K += M\n    K.sort(reverse=True)\n    C = [a - b for (a, b) in zip(A, B)]\n    C.sort(reverse=True)\n    inc = sum(C)\n    j = 0\n    for i in C:\n        if i == 0:\n            continue\n        else:\n            while K[j] > i:\n                j += 1\n            inc -= K[j]\n            j += 1\n            if j > k + m - 1:\n                break\n    print(inc)", "for w in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    K = list(map(int, input().split()))\n    M = list(map(int, input().split()))\n    K += M\n    K.sort(reverse=True)\n    C = [a - b for (a, b) in zip(A, B)]\n    C.sort(reverse=True)\n    inc = sum(C)\n    j = 0\n    for i in C:\n        if i == 0:\n            continue\n        else:\n            while K[j] > i:\n                j += 1\n            inc -= K[j]\n            j += 1\n            if j > k + m - 1:\n                break\n    print(inc)", "for _ in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    B = list(map(int, input().split()))\n    D = list(map(int, input().split()))\n    L = list(map(int, input().split()))\n    N = list(map(int, input().split()))\n    L += N\n    L.sort(reverse=True)\n    D = [a - b for (a, b) in zip(B, D)]\n    D.sort(reverse=True)\n    incr = sum(D)\n    j = 0\n    for i in D:\n        if i == 0:\n            continue\n        else:\n            while L[j] > i:\n                j += 1\n            incr -= L[j]\n            j += 1\n            if j > k + m - 1:\n                break\n    print(incr)", "for _ in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    K = list(map(int, input().split()))\n    M = list(map(int, input().split()))\n    K += M\n    K.sort(reverse=True)\n    C = [a - b for (a, b) in zip(A, B)]\n    C.sort(reverse=True)\n    inc = sum(C)\n    j = 0\n    for i in C:\n        if i == 0:\n            continue\n        else:\n            while K[j] > i:\n                j += 1\n            inc -= K[j]\n            j += 1\n            if j > k + m - 1:\n                break\n    print(inc)", "for _ in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    K = list(map(int, input().split()))\n    M = list(map(int, input().split()))\n    K += M\n    K.sort(reverse=True)\n    C = [a - b for (a, b) in zip(A, B)]\n    C.sort(reverse=True)\n    inc = sum(C)\n    j = 0\n    for i in C:\n        if i == 0:\n            continue\n        else:\n            while K[j] > i:\n                j += 1\n            inc -= K[j]\n            j += 1\n            if j > k + m - 1:\n                break\n    print(inc)", "for w in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    K = list(map(int, input().split()))\n    M = list(map(int, input().split()))\n    K += M\n    K.sort(reverse=True)\n    C = [a - b for (a, b) in zip(A, B)]\n    C.sort(reverse=True)\n    inc = sum(C)\n    j = 0\n    for i in C:\n        if i == 0:\n            continue\n        else:\n            while K[j] > i:\n                j += 1\n            inc -= K[j]\n            j += 1\n            if j > k + m - 1:\n                break\n    print(inc)", "for _ in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    K = list(map(int, input().split()))\n    M = list(map(int, input().split()))\n    K += M\n    K.sort(reverse=True)\n    C = [a - b for (a, b) in zip(A, B)]\n    C.sort(reverse=True)\n    inc = sum(C)\n    j = 0\n    for i in C:\n        if i == 0:\n            continue\n        else:\n            while K[j] > i:\n                j += 1\n            inc -= K[j]\n            j += 1\n            if j > k + m - 1:\n                break\n    print(inc)", "T = int(input())\nwhile T > 0:\n    (N, K, M) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    D = list(map(int, input().split()))\n    C += D\n    C.sort(reverse=True)\n    Z = [a - b for (a, b) in zip(A, B)]\n    Z.sort(reverse=True)\n    totalRemaining = sum(Z)\n    j = 0\n    for i in Z:\n        if i == 0:\n            continue\n        else:\n            while C[j] > i:\n                j += 1\n            totalRemaining -= C[j]\n            j += 1\n            if j > K + M - 1:\n                break\n    print(totalRemaining)\n    T -= 1", "T = int(input())\nwhile T > 0:\n    (N, K, M) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    D = list(map(int, input().split()))\n    C += D\n    C.sort(reverse=True)\n    Z = [a - b for (a, b) in zip(A, B)]\n    Z.sort(reverse=True)\n    totalRemaining = sum(Z)\n    j = 0\n    for i in Z:\n        if i == 0:\n            continue\n        else:\n            while C[j] > i:\n                j += 1\n            totalRemaining -= C[j]\n            j += 1\n            if j > K + M - 1:\n                break\n    print(totalRemaining)\n    T -= 1", "T = int(input())\nwhile T > 0:\n    (N, K, M) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    D = list(map(int, input().split()))\n    C += D\n    C.sort(reverse=True)\n    Z = [a - b for (a, b) in zip(A, B)]\n    Z.sort(reverse=True)\n    totalRemaining = sum(Z)\n    j = 0\n    for i in Z:\n        if i == 0:\n            continue\n        else:\n            while C[j] > i:\n                j += 1\n            totalRemaining -= C[j]\n            j += 1\n            if j > K + M - 1:\n                break\n    print(totalRemaining)\n    T -= 1", "for _ in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    K = list(map(int, input().split()))\n    M = list(map(int, input().split()))\n    K += M\n    K.sort(reverse=True)\n    C = [a - b for (a, b) in zip(A, B)]\n    C.sort(reverse=True)\n    inc = sum(C)\n    j = 0\n    for i in C:\n        if i == 0:\n            continue\n        else:\n            while K[j] > i:\n                j += 1\n            inc -= K[j]\n            j += 1\n            if j > k + m - 1:\n                break\n    print(inc)", "T = int(input())\nfor i in range(T):\n    (n, k, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    K = list(map(int, input().split()))\n    M = list(map(int, input().split()))\n    K += M\n    K.sort(reverse=True)\n    C = [a - b for (a, b) in zip(A, B)]\n    C.sort(reverse=True)\n    inc = sum(C)\n    j = 0\n    for i in C:\n        if i == 0:\n            continue\n        else:\n            while K[j] > i:\n                j += 1\n            inc -= K[j]\n            j += 1\n            if j > k + m - 1:\n                break\n    print(inc)", "T = int(input())\noutput = []\nfor _ in range(T):\n    (N, K, M) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = [(x, 'white') for x in list(map(int, input().split()))]\n    D = [(x, 'black') for x in list(map(int, input().split()))]\n    buttons = C + D\n    buttons.sort(key=lambda x: x[0])\n    diffs = [a - b for (a, b) in zip(A, B)]\n    diffs.sort()\n    uncompleted = 0\n    while len(diffs) > 0:\n        d = diffs.pop()\n        while len(buttons) > 0 and d < buttons[-1][0]:\n            buttons.pop()\n        if len(buttons) > 0:\n            b = buttons.pop()\n            d -= b[0]\n        uncompleted += d\n    output.append(uncompleted)\nfor o in output:\n    print(o)", "for _ in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    K = list(map(int, input().split()))\n    M = list(map(int, input().split()))\n    K += M\n    K.sort(reverse=True)\n    C = [a - b for (a, b) in zip(A, B)]\n    C.sort(reverse=True)\n    inc = sum(C)\n    j = 0\n    for i in C:\n        if i == 0:\n            continue\n        else:\n            while K[j] > i:\n                j += 1\n            inc -= K[j]\n            j += 1\n            if j > k + m - 1:\n                break\n    print(inc)", "for i in range(int(input())):\n    (n, w, b) = map(int, input().split())\n    uct = list(map(int, input().split()))\n    ct = list(map(int, input().split()))\n    wb = list(map(int, input().split()))\n    bb = list(map(int, input().split()))\n    diff = list()\n    for i in range(n):\n        diff.append(abs(uct[i] - ct[i]))\n    b = wb + bb\n    diff.sort(reverse=True)\n    b.sort(reverse=True)\n    (x, y) = (0, 0)\n    while y < len(b):\n        if b[y] <= diff[x]:\n            diff[x] -= b[y]\n            x += 1\n            b.pop(y)\n        else:\n            y += 1\n    print(sum(diff))", "for _ in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    a = [a[i] - b[i] for i in range(n)]\n    e = c + d\n    e.sort(reverse=True)\n    a.sort(reverse=True)\n    (x, y) = (0, 0)\n    while y < len(e):\n        if e[y] <= a[x]:\n            a[x] -= e[y]\n            x += 1\n            e.pop(y)\n        else:\n            y += 1\n    print(sum(a))", "test = int(input())\nfor _ in range(test):\n    (n, k, m) = map(int, input().split())\n    task_arr = [int(i) for i in input().split()]\n    done_arr = [int(i) for i in input().split()]\n    w_arr = [int(i) for i in input().split()]\n    b_arr = [int(i) for i in input().split()]\n    diff_arr = [task_arr[i] - done_arr[i] for i in range(n)]\n    diff_arr = sorted(diff_arr, reverse=True)\n    w_arr = sorted(w_arr, reverse=True)\n    b_arr = sorted(b_arr, reverse=True)\n    (w, b) = (0, 0)\n    for i in range(n):\n        while w < k and w_arr[w] > diff_arr[i]:\n            w += 1\n        while b < m and b_arr[b] > diff_arr[i]:\n            b += 1\n        if w == k and b == m:\n            break\n        if w == k:\n            diff_arr[i] -= b_arr[b]\n            b += 1\n        elif b == m:\n            diff_arr[i] -= w_arr[w]\n            w += 1\n        elif w_arr[w] > b_arr[b]:\n            diff_arr[i] -= w_arr[w]\n            w += 1\n        else:\n            diff_arr[i] -= b_arr[b]\n            b += 1\n    minsum = 0\n    for i in range(n):\n        minsum += diff_arr[i]\n    print(minsum)", "t = int(input())\nfor _ in range(t):\n    (n, k, m) = map(int, input().split())\n    task_arr = [int(i) for i in input().split()]\n    done_arr = [int(i) for i in input().split()]\n    w_arr = [int(i) for i in input().split()]\n    b_arr = [int(i) for i in input().split()]\n    diff_arr = [task_arr[i] - done_arr[i] for i in range(n)]\n    diff_arr = sorted(diff_arr, reverse=True)\n    w_arr = sorted(w_arr, reverse=True)\n    b_arr = sorted(b_arr, reverse=True)\n    (w, b) = (0, 0)\n    for i in range(n):\n        while w < k and w_arr[w] > diff_arr[i]:\n            w += 1\n        while b < m and b_arr[b] > diff_arr[i]:\n            b += 1\n        if w == k and b == m:\n            break\n        if w == k:\n            diff_arr[i] -= b_arr[b]\n            b += 1\n        elif b == m:\n            diff_arr[i] -= w_arr[w]\n            w += 1\n        elif w_arr[w] > b_arr[b]:\n            diff_arr[i] -= w_arr[w]\n            w += 1\n        else:\n            diff_arr[i] -= b_arr[b]\n            b += 1\n    minsum = 0\n    for i in range(n):\n        minsum += diff_arr[i]\n    print(minsum)", "for z in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    pt = list(map(int, input().split()))\n    ct = list(map(int, input().split()))\n    wb = list(map(int, input().split()))\n    bb = list(map(int, input().split()))\n    wb.extend(bb)\n    c = 0\n    wb.sort(reverse=True)\n    a = []\n    for i in range(n):\n        a.append(pt[i] - ct[i])\n    a.sort(reverse=True)\n    x = 0\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        else:\n            for j in range(x, len(wb)):\n                if wb[j] <= a[i]:\n                    a[i] = a[i] - wb[j]\n                    wb[j] = 0\n                    x = j + 1\n                    break\n    print(sum(a))", "t = int(input())\nfor i in range(t):\n    (n, k, m) = list(map(int, input().split()))\n    plan = list(map(int, input().split()))\n    comp = list(map(int, input().split()))\n    white = list(map(int, input().split()))\n    black = list(map(int, input().split()))\n    rem = []\n    p = 0\n    machine = []\n    count_rem = 0\n    count_machine = 0\n    for j in range(n):\n        rem.append(plan[j] - comp[j])\n    count_rem += sum(rem)\n    rem.sort(reverse=True)\n    machine.extend(white)\n    machine.extend(black)\n    machine.sort(reverse=True)\n    count_machine += sum(machine)\n    if machine[0] <= rem[-1]:\n        count_rem -= count_machine\n    elif machine[-1] > rem[0]:\n        pass\n    else:\n        for (j, val) in enumerate(machine):\n            while rem != []:\n                if val <= rem[p]:\n                    count_rem -= val\n                    rem.pop(p)\n                    break\n                else:\n                    break\n    print(count_rem)", "tc = int(input())\nfor i in range(tc):\n    (n, k, m) = list(map(int, input().split()))\n    pt = list(map(int, input().split()))\n    ct = list(map(int, input().split()))\n    wb = list(map(int, input().split()))\n    bb = list(map(int, input().split()))\n    rm = [x1 - x2 for (x1, x2) in zip(pt, ct)]\n    rm.sort(reverse=True)\n    full_list = wb[:]\n    full_list.extend(bb)\n    full_list.sort(reverse=True)\n    k1 = 0\n    rem = 0\n    ind_done = []\n    while k1 < len(rm):\n        if len(ind_done) == 0:\n            j = 0\n        else:\n            j = ind_done[-1]\n        while j < len(full_list) and full_list[j] > rm[k1]:\n            j += 1\n        if j == len(full_list):\n            rem += rm[k1]\n            rm.pop(k1)\n        else:\n            rem += rm[k1] - full_list[j]\n            rm.pop(k1)\n            full_list.pop(j)\n            ind_done.append(j)\n    print(rem)", "t = int(input())\nwhile t:\n    n_k_m = [int(i) for i in input().split()]\n    n = n_k_m[0]\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    k = [int(i) for i in input().split()]\n    m = [int(i) for i in input().split()]\n    inactive_dict = {}\n    res = 0\n    diff = [abs(a[i] - b[i]) for i in range(n)]\n    rev_diff = sorted(diff, reverse=True)\n    rev = sorted(k + m, reverse=True)\n    aa = sum(diff)\n    i = 0\n    j = 0\n    while i < len(rev) and j < len(rev_diff):\n        if rev[i] <= rev_diff[j]:\n            res += rev[i]\n            i += 1\n            j += 1\n        else:\n            i += 1\n    print(aa - res)\n    t -= 1", "for _ in range(int(input())):\n    (N, K, M) = map(int, input().split())\n    (A, B, C, D) = (list(map(int, input().split())), list(map(int, input().split())), list(map(int, input().split())), list(map(int, input().split())))\n    (it, W, S, cnt) = (0, sorted([x - y for (x, y) in zip(A, B)], reverse=True), sorted(C + D, reverse=True), 0)\n    for (j, i) in enumerate(W):\n        while it < len(S) and S[it] > i:\n            it += 1\n        if it >= len(S):\n            break\n        cnt += i - S[it]\n        it += 1\n    print(cnt + sum(W[j:]))", "for _ in range(int(input())):\n    (n, k, m) = list(map(int, input().split()))\n    planned = list(map(int, input().split()))\n    completed = list(map(int, input().split()))\n    white = list(map(int, input().split()))\n    black = list(map(int, input().split()))\n    remaining = [planned[i] - completed[i] for i in range(n)]\n    rem = sorted(remaining, reverse=True)\n    sub = sorted(white + black, reverse=True)\n    t = k + m\n    j = 0\n    for i in range(n):\n        while j < t:\n            if sub[j] <= rem[i]:\n                rem[i] = rem[i] - sub[j]\n                j += 1\n                break\n            j += 1\n        if j == t:\n            break\n    print(sum(rem))", "t = int(input())\nwhile t:\n    (n, k, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    brr = list(map(int, input().split()))\n    diff = []\n    for (a, b) in zip(arr, brr):\n        diff.append(abs(a - b))\n    wbrr = list(map(int, input().split()))\n    bbrr = list(map(int, input().split()))\n    btn = wbrr + bbrr\n    btn.sort(reverse=True)\n    diff.sort(reverse=True)\n    i = 0\n    top = 0\n    while top < k + m and i < n:\n        if btn[top] <= diff[i]:\n            diff[i] -= btn[top]\n            i += 1\n        top += 1\n    print(sum(diff))\n    t -= 1", "for _ in range(int(input())):\n    (N, K, M) = map(int, input().split())\n    A = [int(x) for x in input().split()]\n    B = [int(x) for x in input().split()]\n    buttons = [int(x) for x in input().split()]\n    buttons += [int(x) for x in input().split()]\n    diff = [A[i] - B[i] for i in range(N)]\n    diff.sort(reverse=True)\n    buttons.sort(reverse=True)\n    accumulated = sum(diff)\n    i = 0\n    for ele in diff:\n        while i < K + M:\n            if ele >= buttons[i]:\n                accumulated -= buttons[i]\n                i += 1\n                break\n            else:\n                i += 1\n    print(accumulated)", "T = int(input())\nfor z in range(T):\n    (N, K, M) = map(int, input().split())\n    lst1 = list(map(int, input().split()))\n    lst2 = list(map(int, input().split()))\n    lst = [lst1[i] - lst2[i] for i in range(N) if lst1[i] - lst2[i] > 0]\n    lst.sort(reverse=True)\n    button = list(map(int, input().split()))\n    button += list(map(int, input().split()))\n    button.sort(reverse=True)\n    res = sum(lst)\n    i = 0\n    for elem in lst:\n        while i < K + M:\n            if elem >= button[i]:\n                res -= button[i]\n                i += 1\n                break\n            else:\n                i += 1\n    print(res)", "for _ in range(int(input())):\n    (days, white, black) = map(int, input().split())\n    planned = list(map(int, input().split()))\n    completed = list(map(int, input().split()))\n    whiteblack = list(map(int, input().split())) + list(map(int, input().split()))\n    diff = [planned[i] - completed[i] for i in range(days) if planned[i] - completed[i] > 0]\n    diff.sort(reverse=True)\n    t = 0\n    ans = sum(diff)\n    whiteblack.sort(reverse=True)\n    for i in diff:\n        for j in range(t, white + black):\n            if whiteblack[j] <= i:\n                ans -= whiteblack[j]\n                t = j + 1\n                break\n    print(ans)", "for _ in range(int(input())):\n    (days, white, black) = map(int, input().split())\n    planned = list(map(int, input().split()))\n    completed = list(map(int, input().split()))\n    whiteblack = list(map(int, input().split())) + list(map(int, input().split()))\n    whiteblack.sort(reverse=True)\n    diff = [planned[i] - completed[i] for i in range(days) if planned[i] - completed[i] > 0]\n    diff.sort(reverse=True)\n    t = 0\n    ans = sum(diff)\n    for i in diff:\n        for j in range(t, white + black):\n            if whiteblack[j] <= i:\n                ans -= whiteblack[j]\n                t = j + 1\n                break\n    print(ans)", "for _ in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split())) + list(map(int, input().split()))\n    c.sort(reverse=True)\n    diff = [a[i] - b[i] for i in range(n) if a[i] - b[i] > 0]\n    diff.sort(reverse=True)\n    t = 0\n    l = len(c)\n    ans = sum(diff)\n    for i in diff:\n        for j in range(t, l):\n            if c[j] <= i:\n                ans -= c[j]\n                t = j + 1\n                break\n    print(ans)", "for _ in range(int(input())):\n    (num_days, num_white_buttons, num_black_buttons) = map(int, input().split())\n    planned_tasks = list(map(int, input().split()))\n    completed_tasks = list(map(int, input().split()))\n    white_buttons = list(map(int, input().split()))\n    black_buttons = list(map(int, input().split()))\n    remaining_tasks = [i_planned_tasks - i_completed_tasks for (i_planned_tasks, i_completed_tasks) in zip(planned_tasks, completed_tasks)]\n    button_powers = white_buttons + black_buttons\n    remaining_tasks.sort(reverse=True)\n    button_powers.sort(reverse=True)\n    remaining_tasks_index = 0\n    button_powers_index = 0\n    while remaining_tasks_index < len(remaining_tasks) and button_powers_index < len(button_powers):\n        if remaining_tasks[remaining_tasks_index] >= button_powers[button_powers_index]:\n            remaining_tasks[remaining_tasks_index] -= button_powers[button_powers_index]\n            remaining_tasks_index += 1\n        button_powers_index += 1\n    print(sum(remaining_tasks))", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    (n, w, b) = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    for i in range(n):\n        a[i] = a[i] - c[i]\n    c = list(map(int, (stdin.readline() + ' ' + stdin.readline()).split()))\n    a.sort()\n    c.sort()\n    i = n - 1\n    incomplete = 0\n    for j in range(w + b - 1, -1, -1):\n        if a[i] >= c[j]:\n            incomplete += a[i] - c[j]\n            i -= 1\n    while i >= 0:\n        incomplete += a[i]\n        i -= 1\n    print(incomplete)", "for _ in range(int(input())):\n    (n, w, b) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    for i in range(n):\n        a[i] = a[i] - c[i]\n    c = list(map(int, (input() + ' ' + input()).split()))\n    a.sort()\n    c.sort()\n    i = n - 1\n    incomplete = 0\n    for j in range(w + b - 1, -1, -1):\n        if a[i] >= c[j]:\n            incomplete += a[i] - c[j]\n            i -= 1\n    while i >= 0:\n        incomplete += a[i]\n        i -= 1\n    print(incomplete)", "for _ in range(int(input())):\n    (n, w, b) = map(int, input().strip().split())\n    A = list(map(int, input().strip().split()))\n    B = [x - y for (x, y) in zip(A, list(map(int, input().strip().split())))]\n    C = list(map(int, input().strip().split()))\n    C.extend(list(map(int, input().strip().split())))\n    B.sort(reverse=True)\n    C.sort(reverse=True)\n    cnt = 0\n    ans = 0\n    total = len(C)\n    for day in B:\n        while cnt < total and C[cnt] > day:\n            cnt += 1\n        if cnt < total:\n            ans += day - C[cnt]\n            cnt += 1\n        else:\n            ans += day\n    print(ans)", "t = int(input())\nwhile t > 0:\n    (n, k, m) = map(int, input().split())\n    planned = list(map(int, input().split()))\n    complete = list(map(int, input().split()))\n    white = list(map(int, input().split()))\n    black = list(map(int, input().split()))\n    l = []\n    for i in range(0, len(planned)):\n        l.append(planned[i] - complete[i])\n    lis = []\n    lis = white + black\n    lis.sort(reverse=True)\n    l.sort(reverse=True)\n    n1 = 0\n    mk1 = 0\n    while n1 <= len(l) and mk1 < len(lis):\n        if l[n1] < lis[mk1]:\n            mk1 += 1\n        else:\n            l[n1] -= lis[mk1]\n            mk1 += 1\n            n1 += 1\n    left = 0\n    for i in range(0, len(l)):\n        left += l[i]\n    print(left)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    (n, k, m) = map(int, input().split())\n    planned = list(map(int, input().split()))\n    complete = list(map(int, input().split()))\n    white = list(map(int, input().split()))\n    black = list(map(int, input().split()))\n    l = []\n    for i in range(0, len(planned)):\n        l.append(planned[i] - complete[i])\n    lis = []\n    lis = white + black\n    lis.sort(reverse=True)\n    l.sort(reverse=True)\n    n1 = 0\n    mk1 = 0\n    while n1 <= len(l) and mk1 < len(lis):\n        if l[n1] < lis[mk1]:\n            mk1 += 1\n        else:\n            l[n1] -= lis[mk1]\n            mk1 += 1\n            n1 += 1\n    left = 0\n    for i in range(0, len(l)):\n        left += l[i]\n    print(left)\n    t -= 1", "import heapq\nfor i in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    D = list(map(int, input().split()))\n    L = [0] * n\n    for i in range(n):\n        L[i] = B[i] - A[i]\n    heapq.heapify(L)\n    C = C + D\n    C.sort()\n    ele = abs(heapq.heappop(L))\n    sum1 = 0\n    for j in range(len(C) - 1, -1, -1):\n        if ele == 0:\n            break\n        elif ele >= C[j]:\n            sum1 += ele - C[j]\n            ele = abs(heapq.heappop(L))\n    print(sum1 + abs(sum(L)) + ele)", "from bisect import bisect_left\nt = int(input())\nfor _ in range(t):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    temp = sorted(c + d)\n    e = []\n    for i in range(n):\n        e.append(abs(a[i] - b[i]))\n    e.sort(reverse=True)\n    ans = 0\n    for i in e:\n        if i == 0:\n            continue\n        j = bisect_left(temp, i + 1)\n        if j - 1 >= 0 and j - 1 < len(temp):\n            ans += i - temp[j - 1]\n            temp.pop(j - 1)\n        else:\n            ans += i\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    temp = sorted(c + d, reverse=True)\n    e = []\n    for i in range(n):\n        e.append(a[i] - b[i])\n    e.sort(reverse=True)\n    ans = 0\n    j = 0\n    for i in e:\n        flag = False\n        while j < len(temp):\n            if temp[j] <= i:\n                ans += i - temp[j]\n                j += 1\n                flag = True\n                break\n            j += 1\n        if not flag:\n            ans += i\n    print(ans)", "for _ in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    c = c + list(map(int, input().split()))\n    diff = []\n    for i in range(n):\n        diff.append(a[i] - b[i])\n    diff.sort(reverse=True)\n    c.sort(reverse=True)\n    ans = 0\n    j = 0\n    for i in range(n):\n        broken = False\n        while j < len(c):\n            if c[j] <= diff[i]:\n                ans += diff[i] - c[j]\n                j += 1\n                broken = True\n                break\n            j += 1\n        if not broken:\n            ans += diff[i]\n    print(ans)", "def minTasks(diff, buttons):\n    (i, j) = (0, 0)\n    incompleteTasks = 0\n    while i < len(diff) and j < len(buttons):\n        if diff[i] >= buttons[j]:\n            incompleteTasks += diff[i] - buttons[j]\n            i += 1\n            j += 1\n        else:\n            j += 1\n    while i < len(diff):\n        incompleteTasks += diff[i]\n        i += 1\n    return incompleteTasks\nt = int(input())\nwhile t > 0:\n    (n, k, m) = map(int, input().strip().split())\n    planned = list(map(int, input().strip().split()))\n    completed = list(map(int, input().strip().split()))\n    white = list(map(int, input().strip().split()))\n    black = list(map(int, input().strip().split()))\n    buttons = white + black\n    buttons.sort(reverse=True)\n    diff = []\n    for i in range(n):\n        diff.append(planned[i] - completed[i])\n    diff.sort(reverse=True)\n    print(minTasks(diff, buttons))\n    t -= 1", "t = int(input())\nfor x in range(0, t):\n    (n, k, m) = map(int, input().split())\n    a = [int(j) for j in input().split()]\n    b = [int(w) for w in input().split()]\n    c = [int(e) for e in input().split()]\n    d = [int(r) for r in input().split()]\n    lis = c + d\n    li = []\n    for i in range(0, n):\n        li.append(a[i] - b[i])\n    li.sort(reverse=True)\n    lis.sort(reverse=True)\n    q = 0\n    sum1 = 0\n    y = 0\n    for y in range(0, n):\n        if q < k + m:\n            for z in range(q, k + m):\n                if li[y] >= lis[z]:\n                    li[y] = li[y] - lis[z]\n                    q = z + 1\n                    break\n    print(sum(li))", "t = int(input())\nfor x in range(0, t):\n    (n, k, m) = map(int, input().split())\n    a = [int(j) for j in input().split()]\n    b = [int(w) for w in input().split()]\n    c = [int(e) for e in input().split()]\n    d = [int(r) for r in input().split()]\n    lis = c + d\n    li = []\n    for i in range(0, n):\n        li.append(a[i] - b[i])\n    li.sort(reverse=True)\n    lis.sort(reverse=True)\n    q = 0\n    sum1 = 0\n    y = 0\n    for y in range(0, n):\n        if q < k + m:\n            for z in range(q, k + m):\n                if li[y] >= lis[z]:\n                    li[y] = li[y] - lis[z]\n                    q = z + 1\n                    break\n    print(sum(li))", "t = int(input())\nfor x in range(0, t):\n    (n, k, m) = map(int, input().split())\n    a = [int(j) for j in input().split()]\n    b = [int(w) for w in input().split()]\n    c = [int(e) for e in input().split()]\n    d = [int(r) for r in input().split()]\n    lis = c + d\n    li = []\n    for i in range(0, n):\n        li.append(a[i] - b[i])\n    li.sort(reverse=True)\n    lis.sort(reverse=True)\n    q = 0\n    sum = 0\n    z = 0\n    y = 0\n    un = 0\n    while z < m + k and y < n:\n        if li[y] >= lis[z]:\n            li[y] -= lis[z]\n            y += 1\n            z += 1\n        else:\n            z += 1\n    r = 0\n    while r < n:\n        un += li[r]\n        r += 1\n    print(un)", "t = int(input())\n\ndef get_params(inp):\n    inp = inp.split()\n    inp = [int(i) for i in inp]\n    return inp\nfor k in range(t):\n    params = str(input())\n    (n, k, m) = get_params(params)\n    planned = str(input())\n    planned = get_params(planned)\n    done = str(input())\n    done = get_params(done)\n    white = get_params(str(input()))\n    black = get_params(str(input()))\n    total = white + black\n    total = sorted(total)[::-1]\n    remain = [planned[i] - done[i] for i in range(len(planned))]\n    remain = sorted(remain)[::-1]\n    (p1, p2) = (0, 0)\n    ans = sum(remain)\n    while True:\n        r = remain[p1]\n        s = total[p2]\n        if s > r:\n            p2 = p2 + 1\n        else:\n            ans = ans - s\n            p1 = p1 + 1\n            p2 = p2 + 1\n        if p2 == len(total) or p1 == len(remain):\n            break\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    for i in range(len(a)):\n        a[i] = abs(a[i] - b[i])\n    c = c + d\n    a.sort()\n    c.sort()\n    a = a[::-1]\n    c = c[::-1]\n    p1 = 0\n    p2 = 0\n    counter = 0\n    for i in range(n[1] + n[2]):\n        if p1 < n[0]:\n            if a[p1] >= c[p2]:\n                counter += a[p1] - c[p2]\n                p1 += 1\n                p2 += 1\n            else:\n                p2 += 1\n    if p1 < n[0]:\n        for j in range(p1, n[0]):\n            counter += a[j]\n    print(counter)", "for cases in range(int(input())):\n    (num_days, num_white, num_black) = map(int, input().split())\n    num_comp = list(map(int, input().split()))\n    num_incomp = list(map(int, input().split()))\n    white = list(map(int, input().split()))\n    black = list(map(int, input().split()))\n    incomp = []\n    for index in range(num_days):\n        incomp.append(num_comp[index] - num_incomp[index])\n    incomp.sort(reverse=True)\n    buttons = white + black\n    buttons.sort(reverse=True)\n    index2 = 0\n    index3 = 0\n    while index2 < num_days and index3 < len(buttons):\n        if incomp[index2] < buttons[index3]:\n            index3 += 1\n        else:\n            incomp[index2] -= buttons[index3]\n            index3 += 1\n            index2 += 1\n    print(sum(incomp))", "for x in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    wt = list(map(int, input().split()))\n    bk = list(map(int, input().split()))\n    c = [a[i] - b[i] for i in range(n)]\n    c.sort()\n    wt.sort()\n    bk.sort()\n    ans = 0\n    while c:\n        top = c[-1]\n        c.pop()\n        while wt:\n            if wt and wt[-1] > top:\n                wt.pop()\n            else:\n                break\n        while bk:\n            if bk and bk[-1] > top:\n                bk.pop()\n            else:\n                break\n        if not wt and (not bk):\n            ans += top\n        elif not wt:\n            ans += top - bk[-1]\n            bk.pop()\n        elif not bk:\n            ans += top - wt[-1]\n            wt.pop()\n        elif wt[-1] > bk[-1]:\n            ans += top - wt[-1]\n            wt.pop()\n        else:\n            ans += top - bk[-1]\n            bk.pop()\n    print(ans)", "for _ in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    ls = list(map(int, input().split()))\n    temp = list(map(int, input().split()))\n    ls = [ls[i] - temp[i] for i in range(n)]\n    b = list(map(int, input().split()))\n    b1 = list(map(int, input().split()))\n    b = b + b1\n    ls.sort(reverse=True)\n    b.sort(reverse=True)\n    j = 0\n    for i in range(n):\n        if j < k + m:\n            while True:\n                if ls[i] >= b[j]:\n                    ls[i] -= b[j]\n                    j += 1\n                    break\n                j += 1\n    print(sum(ls))", "for q in range(int(input())):\n    (n, wn, bn) = [int(e) for e in input().split()]\n    a1 = [int(e) for e in input().split()]\n    a2 = [int(e) for e in input().split()]\n    a = []\n    for i in range(n):\n        a.append(abs(a1[i] - a2[i]))\n    a.sort(reverse=True)\n    w = [int(e) for e in input().split()]\n    b = [int(e) for e in input().split()]\n    w.extend(b)\n    w.sort(reverse=True)\n    j = 0\n    i = 0\n    l = len(w)\n    while i < n:\n        if j >= l:\n            break\n        elif a[i] >= w[j]:\n            a[i] -= w[j]\n            i += 1\n        j += 1\n    print(sum(a))", "for _ in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    lc = list(map(int, input().split()))\n    cu = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(n):\n        lc[i] -= cu[i]\n    buttons = w + b\n    lc.sort()\n    buttons.sort()\n    j = len(buttons) - 1\n    for i in range(n - 1, -1, -1):\n        if j >= 0 and i >= 0:\n            while buttons[j] > lc[i]:\n                j -= 1\n                if j < 0:\n                    break\n            if buttons[j] <= lc[i]:\n                lc[i] -= buttons[j]\n                j -= 1\n    total = 0\n    for i in range(n):\n        total += lc[i]\n    print(total)", "for _ in range(int(input())):\n    (n, k, m) = map(int, input().split())\n    arr1 = list(map(int, input().split()))\n    arr2 = list(map(int, input().split()))\n    val = sorted([arr1[i] - arr2[i] for i in range(n)])[::-1]\n    w = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    f = sorted(w + b)[::-1]\n    i = j = 0\n    while j < k + m and i < n:\n        if val[i] >= f[j]:\n            val[i] -= f[j]\n            j += 1\n            i += 1\n        else:\n            j += 1\n    print(sum(val))", "for _ in range(int(input())):\n    (n, w, b) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr1 = list(map(int, input().split()))\n    new = []\n    for i in range(len(arr)):\n        new.append(abs(arr[i] - arr1[i]))\n    res = []\n    white = list(map(int, input().split()))\n    black = list(map(int, input().split()))\n    new.sort(reverse=True)\n    for i in white:\n        res.append(i)\n    for i in black:\n        res.append(i)\n    res.sort(reverse=True)\n    i = 0\n    j = 0\n    un = 0\n    while j < w + b and i < n:\n        if new[i] >= res[j]:\n            new[i] -= res[j]\n            i += 1\n            j += 1\n        else:\n            j += 1\n    i = 0\n    while i < n:\n        un += new[i]\n        i += 1\n    print(un)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, w, b) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr1 = list(map(int, input().split()))\n    new = []\n    for i in range(len(arr)):\n        new.append(abs(arr[i] - arr1[i]))\n    white = []\n    black = []\n    res = []\n    white = list(map(int, input().split()))\n    black = list(map(int, input().split()))\n    new.sort(reverse=True)\n    for i in white:\n        res.append(i)\n    for i in black:\n        res.append(i)\n    res.sort(reverse=True)\n    i = 0\n    j = 0\n    un = 0\n    while j < w + b and i < n:\n        if new[i] >= res[j]:\n            new[i] -= res[j]\n            i += 1\n            j += 1\n        else:\n            j += 1\n    i = 0\n    while i < n:\n        un += new[i]\n        i += 1\n    print(un)"]