["import bisect, sys\nMAX = 1000000\n(N, K) = list(map(int, sys.stdin.readline().split()))\nT = list(map(int, sys.stdin.readline().split()))\n(L, R) = ({}, {})\nfor (i, x) in enumerate(T):\n    if x not in L:\n        L[x] = i\n    R[x] = i\nT = frozenset(T)\nmin_idx = N\nfor x in sorted(T):\n    if 2 * x >= K:\n        break\n    elif K - x in T:\n        min_idx = min(min_idx, max(L[x] + 1, L[K - x] + 1))\n        min_idx = min(min_idx, max(L[x] + 1, N - R[K - x]))\n        min_idx = min(min_idx, max(N - R[x], N - R[K - x]))\n        min_idx = min(min_idx, max(N - R[x], L[K - x] + 1))\nprint(min_idx if min_idx < N else -1)", "(n, k) = map(int, input().split())\nA = map(int, input().split())\n(D, dist) = ({}, {})\nfor (i, a) in enumerate(A):\n    D[a] = 0\n    dist[a] = min(dist.get(a, float('inf')), i, n - i - 1)\nhk = k / 2\nc = float('inf')\nfor a in D:\n    if a < hk:\n        b = k - a\n        if b in D:\n            c = min(c, max(dist[a], dist[b]))\nprint(-1 if c == float('inf') else c + 1)", "(n, k) = map(int, input().split())\nA = map(int, input().split())\n(D, dist) = ({}, {})\nfor (i, a) in enumerate(A):\n    D[a] = 0\n    dist[a] = min(dist.get(a, float('inf')), i, n - i - 1)\nhk = k / 2\nc = float('inf')\nfor a in D:\n    if a < hk:\n        b = k - a\n        if b in D:\n            c = min(c, max(dist[a], dist[b]))\nprint(-1 if c == float('inf') else c + 1)", "(n, k) = map(int, input().split())\nA = map(int, input().split())\n(D, dist) = ({}, {})\nfor (i, a) in enumerate(A):\n    D[a] = 0\n    dist[a] = min(dist.get(a, float('inf')), i, n - i - 1)\nhk = k / 2\nc = float('inf')\nfor a in D:\n    if a < hk:\n        b = k - a\n        if b in D:\n            c = min(c, max(dist[a], dist[b]))\nprint(-1 if c == float('inf') else c + 1)", "(n, k) = map(int, input().split())\nA = map(int, input().split())\n(D, dist) = ({}, {})\nfor (i, a) in enumerate(A):\n    D[a] = 0\n    dist[a] = min(dist.get(a, float('inf')), i, n - i - 1)\nhk = k / 2\nc = float('inf')\nfor a in D:\n    if a < hk:\n        b = k - a\n        if b in D:\n            c = min(c, max(dist[a], dist[b]))\nprint(-1 if c == float('inf') else c + 1)", "(n, k) = map(int, input().split())\nA = map(int, input().split())\n(D, dist) = ({}, {})\nfor (i, a) in enumerate(A):\n    D[a] = 0\n    dist[a] = min(dist.get(a, float('inf')), i, n - i - 1)\nhk = k / 2\nc = float('inf')\nfor a in D:\n    if a < hk:\n        b = k - a\n        if b in D:\n            c = min(c, max(dist[a], dist[b]))\nprint(-1 if c == float('inf') else c + 1)", "(n, k) = map(int, input().split())\nA = map(int, input().split())\n(D, dist) = ({}, {})\nfor (i, a) in enumerate(A):\n    D[a] = 0\n    dist[a] = min(dist.get(a, float('inf')), i, n - i - 1)\nhk = k / 2\nc = float('inf')\nfor a in D:\n    if a < hk:\n        b = k - a\n        if b in D:\n            c = min(c, max(dist[a], dist[b]))\nprint(-1 if c == float('inf') else c + 1)", "(n, k) = map(int, input().split())\nA = map(int, input().split())\n(D, dist) = ({}, {})\nfor (i, a) in enumerate(A):\n    D[a] = 0\n    dist[a] = min(dist.get(a, float('inf')), i, n - i - 1)\nhk = k / 2\nc = float('inf')\nfor a in D:\n    if a < hk:\n        b = k - a\n        if b in D:\n            c = min(c, max(dist[a], dist[b]))\nprint(-1 if c == float('inf') else c + 1)", "(n, k) = map(int, input().split())\nA = map(int, input().split())\n(D, dist) = ({}, {})\nfor (i, a) in enumerate(A):\n    D[a] = 0\n    dist[a] = min(dist.get(a, float('inf')), i, n - i - 1)\nhk = k / 2\nc = float('inf')\nfor a in D:\n    if a < hk:\n        b = k - a\n        if b in D:\n            c = min(c, max(dist[a], dist[b]))\nprint(-1 if c == float('inf') else c + 1)", "import sys\ninput = sys.stdin.readline\nMax = 10 ** 6 + 7\n(n, k) = map(int, input().split())\nl1 = list(map(int, input().split()))\nl = [Max for i in range(Max)]\nfor i in range(n):\n    l[l1[i]] = min(l[l1[i]], min(i + 1, n - i))\nif k % 2 == 0:\n    l[k // 2] = Max\nans = Max\nfor i in range(k + 1):\n    if l[i] != Max and l[k - i] != Max:\n        ans = min(ans, max(l[i], l[k - i]))\nif ans != Max:\n    print(ans)\nelse:\n    print(-1)", "(n, k) = map(int, input().split())\nA = map(int, input().split())\n(D, dist) = ({}, {})\nfor (i, a) in enumerate(A):\n    D[a] = 0\n    dist[a] = min(dist.get(a, float('inf')), i, n - i - 1)\nhk = k / 2\nc = float('inf')\nfor a in D:\n    if a < hk:\n        b = k - a\n        if b in D:\n            c = min(c, max(dist[a], dist[b]))\nprint(-1 if c == float('inf') else c + 1)", "(n, k) = map(int, input().split())\nA = map(int, input().split())\n(D, dist) = ({}, {})\nfor (i, a) in enumerate(A):\n    D[a] = 0\n    dist[a] = min(dist.get(a, float('inf')), i, n - i - 1)\nhk = k / 2\nc = float('inf')\nfor a in D:\n    if a < hk:\n        b = k - a\n        if b in D:\n            c = min(c, max(dist[a], dist[b]))\nprint(-1 if c == float('inf') else c + 1)", "(n, k) = map(int, input().split())\nA = map(int, input().split())\n(D, dist) = ({}, {})\nfor (i, a) in enumerate(A):\n    D[a] = 0\n    dist[a] = min(dist.get(a, float('inf')), i, n - i - 1)\nhk = k / 2\nc = float('inf')\nfor a in D:\n    if a < hk:\n        b = k - a\n        if b in D:\n            c = min(c, max(dist[a], dist[b]))\nprint(-1 if c == float('inf') else c + 1)", "(n, k) = map(int, input().split())\nA = map(int, input().split())\n(D, dist) = ({}, {})\nfor (i, a) in enumerate(A):\n    D[a] = 0\n    dist[a] = min(dist.get(a, float('inf')), i, n - i - 1)\nhk = k / 2\nc = float('inf')\nfor a in D:\n    if a < hk:\n        b = k - a\n        if b in D:\n            c = min(c, max(dist[a], dist[b]))\nprint(-1 if c == float('inf') else c + 1)", "def main():\n    (N, K) = map(int, input().split())\n    Apples = [int(x) for x in input().split()]\n    time = 0\n    distinct_apples_condition = None if K & 1 else K >> 1\n    already_found = [False] * K\n    for i in range((N >> 1) + 1):\n        time += 1\n        for k in (Apples[i], Apples[N - i - 1]):\n            if k < K and k != distinct_apples_condition:\n                if already_found[K - k - 1]:\n                    return time\n                already_found[k - 1] = True\n    return -1\nprint(main())", "def main():\n    (N, K) = map(int, input().split())\n    Apples = [int(x) for x in input().split()]\n    time = 0\n    distinct_apples_condition = None if K & 1 else K >> 1\n    already_found = [False] * K\n    for i in range((N >> 1) + 1):\n        time += 1\n        for k in (Apples[i], Apples[N - i - 1]):\n            if k < K and k != distinct_apples_condition:\n                if already_found[K - k - 1]:\n                    return time\n                already_found[k - 1] = True\n    return -1\nprint(main())", "(n, k) = map(int, input().split())\nla = list(map(int, input().split()))\nmini = 10 ** 18\nfrom collections import defaultdict\nhash = defaultdict(int)\nfor i in range(len(la)):\n    z1 = i + 1\n    z2 = n - i\n    z = min(z1, z2)\n    if la[i] in hash:\n        hash[la[i]] = min(z, hash[la[i]])\n    else:\n        hash[la[i]] = z\nfor i in range(len(la)):\n    z = k - la[i]\n    if z in hash and z != la[i]:\n        ans = max(hash[z], hash[la[i]])\n        mini = min(mini, ans)\nif mini == 10 ** 18:\n    print(-1)\nelse:\n    print(mini)", "(n, k) = map(int, input().split())\nz = input().split()\nt = list(map(int, z[:n]))\ns = [(t[e], min(e + 1, n - e)) for e in range(n)]\ns.sort()\nmind = n\nlo = 0\nhi = n - 1\nwhile hi > lo:\n    tot = s[hi][0] + s[lo][0]\n    if tot == k:\n        if s[hi][0] == s[lo][0]:\n            break\n        while s[hi - 1][0] == s[hi][0]:\n            hi -= 1\n        dist = max(s[hi][1], s[lo][1])\n        if mind > dist:\n            mind = dist\n    if tot >= k:\n        hi -= 1\n    else:\n        lo += 1\nprint(mind if mind < n else -1)", "temp = list(map(int, input().split()))\nn = temp[0]\nk = temp[1]\na = list(map(int, input().split()))\nminn = 10 ** 8\nmaxx = -1\nfor i in range(n):\n    if a[i] > maxx:\n        maxx = a[i]\n    if a[i] < minn:\n        minn = a[i]\nhash = []\nl = 0\npos = []\ni = minn\nwhile i <= maxx:\n    hash.append(0)\n    l += 1\n    pos.append(-5)\n    i += 1\nfor i in range(n):\n    x = a[i] - minn\n    hash[x] += 1\n    if pos[x] == -5:\n        pos[x] = min(i, n - 1 - i)\n    else:\n        pos[x] = min(pos[x], i, n - 1 - i)\nans = ''\nfor i in range(l):\n    if hash[i] == 0:\n        continue\n    else:\n        val1 = i + minn\n        if val1 >= k:\n            continue\n        else:\n            val2 = k - val1\n            index2 = val2 - minn\n            if val1 == val2 or index2 < 0 or index2 >= l or (hash[index2] == 0):\n                continue\n            elif ans == '':\n                ans = max(pos[i], pos[index2])\n            elif ans > max(pos[i], pos[index2]):\n                ans = max(pos[i], pos[index2])\nif ans == '':\n    print(-1)\nelse:\n    print(ans + 1)", "(n, k) = [int(word) for word in input().split()]\nt = [int(word) for word in input().split()]\ninfty = 1000000000\nmindist = [infty] * 1000001\nfor i in range(n):\n    mindist[t[i]] = min(mindist[t[i]], i + 1, n - i)\nmintime = infty\nfor i in range(1, (k + 1) // 2):\n    time = max(mindist[i], mindist[k - i])\n    if time < mintime:\n        mintime = time\nif mintime == infty:\n    print('-1')\nelse:\n    print(mintime)", "import bisect, sys\nMAX = 1000000\n(N, K) = list(map(int, sys.stdin.readline().split()))\nT = {}\nfor (i, x) in enumerate(map(int, sys.stdin.readline().split())):\n    steps = min(i + 1, N - i)\n    if x in T:\n        T[x] = min(T[x], steps)\n    else:\n        T[x] = steps\nmin_steps = N\nfor x in sorted(T):\n    if 2 * x >= K:\n        break\n    elif K - x in T:\n        min_steps = min(min_steps, max(T[x], T[K - x]))\nprint(min_steps if min_steps < N else -1)", "import bisect, sys\nMAX = 1000000\n(N, K) = list(map(int, sys.stdin.readline().split()))\nT = list(map(int, sys.stdin.readline().split()))\n(L, R) = ({}, {})\nfor (i, x) in enumerate(T):\n    if x not in L:\n        L[x] = i\n    R[x] = i\nT = frozenset(T)\nmin_idx = N\nfor x in sorted(T):\n    if 2 * x >= K:\n        break\n    elif K - x in T:\n        min_idx = min(min_idx, max(L[x] + 1, L[K - x] + 1))\n        min_idx = min(min_idx, max(L[x] + 1, N - R[K - x]))\n        min_idx = min(min_idx, max(N - R[x], N - R[K - x]))\n        min_idx = min(min_idx, max(N - R[x], L[K - x] + 1))\nprint(min_idx if min_idx < N else -1)", "import math\n(trees, sum) = map(int, input().split(' '))\nforest = tuple(map(int, input().split(' ')))\nmiddle = math.floor(trees / 2)\nhalfsum = sum / 2\nvisited = set()\nprinted = False\nfor i in range(middle):\n    j = -1 - i\n    if forest[i] in visited or forest[j] in visited or (forest[i] != forest[j] and forest[i] + forest[j] == sum):\n        print(i + 1)\n        printed = True\n        break\n    else:\n        if forest[i] != halfsum and forest[i] < sum:\n            visited.add(sum - forest[i])\n        if forest[j] != halfsum and forest[j] < sum:\n            visited.add(sum - forest[j])\n        continue\nif not printed:\n    if middle * 2 < trees and forest[middle] in visited:\n        print(middle + 1)\n    else:\n        print(-1)", "import sys\n(n, k) = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\nR = {}\nL = {}\nfor i in range(n):\n    if A[i] not in L:\n        L[A[i]] = i\nfor i in range(n - 1, -1, -1):\n    if A[i] not in R:\n        R[A[i]] = n - 1 - i\nbest = 10 ** 10\nfor i in range(n):\n    x = k - A[i]\n    if x <= 0 or x == A[i] or x not in L:\n        continue\n    m = min(L[x], R[x])\n    h = min(i + 1, n - i)\n    best = min(best, max(h, m + 1))\nif best != 10 ** 10:\n    print(best)\nelse:\n    print(-1)"]