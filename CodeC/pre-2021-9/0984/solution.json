["import math\n\ndef main():\n    IN = '11 6 5'\n    z = IN.split()\n    z = input().split()\n    i = int(z[0])\n    k = int(z[1])\n    s = int(z[2])\n    IN = '4 5'\n    z = IN.split()\n    z = input().split()\n    a_i = int(z[0])\n    b_i = int(z[1])\n    x = math.sqrt(2)\n    y = math.sqrt(3)\n    if i <= k:\n        diff = k - i\n        if (k - i) % 2 == 0:\n            ans = (a_i + b_i) * math.pow(2, 2 * (k - i) - s)\n        else:\n            ans = (2 * x * a_i + 2 * x * y * b_i) * math.pow(2, 2 * (k - (i + 1)) - s)\n            diff = int(diff / 2)\n            ans = (2 * x * a_i + 2 * x * y * b_i) * math.pow(2, 4 * diff - s)\n    else:\n        diff = i - k\n        if (i - k) % 2 == 0:\n            ans = (a_i + b_i) / math.pow(2, 2 * (i - k) + s)\n        else:\n            ans = (2 * x * a_i + 2 * x * y * b_i) / math.pow(2, 2 * (i + 1 - k) + s)\n            diff = int(diff / 2)\n            ans = (2 * x * a_i + 2 * x * y * b_i) / math.pow(2, 4 * diff + 4 + s)\n    print(ans)\nmain()", "import math\n\ndef main():\n    IN = '11 6 5'\n    z = IN.split()\n    z = input().split()\n    i = int(z[0])\n    k = int(z[1])\n    s = int(z[2])\n    IN = '4 5'\n    z = IN.split()\n    z = input().split()\n    a_i = int(z[0])\n    b_i = int(z[1])\n    x = math.sqrt(2)\n    y = math.sqrt(3)\n    if i <= k:\n        diff = k - i\n        if (k - i) % 2 == 0:\n            ans = (a_i + b_i) * math.pow(2, 2 * (k - i) - s)\n        else:\n            ans = (2 * x * a_i + 2 * x * y * b_i) * math.pow(2, 2 * (k - (i + 1)) - s)\n            diff = int(diff / 2)\n            ans = (2 * x * a_i + 2 * x * y * b_i) * math.pow(2, 4 * diff - s)\n    else:\n        diff = i - k\n        if (i - k) % 2 == 0:\n            ans = (a_i + b_i) / math.pow(2, 2 * (i - k) + s)\n        else:\n            ans = (2 * x * a_i + 2 * x * y * b_i) / math.pow(2, 2 * (i + 1 - k) + s)\n            diff = int(diff / 2)\n            ans = (2 * x * a_i + 2 * x * y * b_i) / math.pow(2, 4 * diff + 4 + s)\n    print(ans)\nmain()", "from math import atan\nfrom math import pi\nfrom math import cos\nfrom math import sin\n\ndef findAngle(x, y):\n    if x > 0 and y == 0:\n        return 0\n    if x < 0 and y == 0:\n        return pi\n    if x == 0 and y > 0:\n        return pi / 2\n    if x == 0 and y < 0:\n        return 3 * pi / 2\n    if x > 0 and y > 0:\n        return atan(y / (x + 0.0))\n    if x < 0 and y > 0:\n        return pi + atan(y / (x + 0.0))\n    if x < 0 and y < 0:\n        return pi + atan(y / (x + 0.0))\n    if x > 0 and y < 0:\n        return 2 * pi + atan(y / (x + 0.0))\n\ndef findArg(x, y, m, n):\n    angle = findAngle(x, y)\n    if m % 2 == n % 2:\n        return angle\n    else:\n        return (7 / 12.0 * pi - angle) % (2 * pi)\n(i, k, q) = map(int, input().split(' '))\n(a_i, b_i) = map(float, input().split(' '))\nlength = (a_i ** 2 + b_i ** 2) ** 0.5\nangle = findArg(a_i, b_i, i, k)\nak = cos(angle) * length\nbk = sin(angle) * length\nprint(2 ** (2 * (k - i) - q) * (ak + bk))", "X = pow(2, 0.5)\nY = pow(3, 0.5)\n\ndef calculateCode(i, ai, bi, k, s):\n    if (k - i) % 2 != 0:\n        (ai, bi) = (X * (ai + bi) - X * Y * (ai - bi), X * (ai - bi) + X * Y * (ai + bi))\n        i += 1\n    return (ai + bi) * pow(2, 2 * (k - i) - s)\n(i, k, s) = [int(x) for x in input().split()]\n(ai, bi) = [int(x) for x in input().split()]\nprint(calculateCode(i, ai, bi, k, s))", "X = pow(2, 0.5)\nY = pow(3, 0.5)\n\ndef calculateCode(i, ai, bi, k, s):\n    if (k - i) % 2 != 0:\n        (ai, bi) = (X * (ai + bi) - X * Y * (ai - bi), X * (ai - bi) + X * Y * (ai + bi))\n        i += 1\n    return (ai + bi) * pow(2, 2 * (k - i) - s)\n(i, k, s) = [int(x) for x in input().split()]\n(ai, bi) = [int(x) for x in input().split()]\nresult = calculateCode(i, ai, bi, k, s)\nprint(result)", "X = pow(2, 0.5)\nY = pow(3, 0.5)\n\ndef calculateCode(i, ai, bi, k, s):\n    c = 0\n    (aii, bii) = (ai, bi)\n    if (k - i) % 2 != 0:\n        (ai, bi) = (X * (ai + bi) - X * Y * (ai - bi), X * (ai - bi) + X * Y * (ai + bi))\n        i += 1\n    return (ai + bi) * pow(2, 2 * (k - i) - s)\n(i, k, s) = [int(x) for x in input().split()]\n(ai, bi) = [int(x) for x in input().split()]\nresult = calculateCode(i, ai, bi, k, s)\nprint(result)", "X = pow(2, 0.5)\nY = pow(3, 0.5)\nmaxI = pow(10, 10)\nmaxK = pow(10, 10)\nmaxS = pow(10, 10)\n\ndef calculateCode(i, ai, bi, k, s):\n    c = 0\n    (aii, bii) = (ai, bi)\n    if (k - i) % 2 != 0:\n        (aii, bii) = (X * (ai + bi) - X * Y * (ai - bi), X * (ai - bi) + X * Y * (ai + bi))\n        i += 1\n    exp = 2 * (k - i) - s\n    return (aii + bii) * pow(2, exp)\n(i, k, s) = [int(x) for x in input().split()]\n(ai, bi) = [int(x) for x in input().split()]\nresult = calculateCode(i, ai, bi, k, s)\nprint(result)", "def recrel(k, i, ai, bi, s):\n    n = k - i\n    if n == 0:\n        return (ai + bi) / 2 ** s\n    elif n % 2 == 0:\n        return 2 ** (2 * n - s) * (ai + bi)\n    else:\n        return 2 ** (2 * n - (1 + s)) * (2 ** 0.5 * ai + 6 ** 0.5 * bi)\n\ndef recrel1(k, i, ai, bi, s):\n    n = i - k\n    if n == 0:\n        return ai + bi\n    elif n % 2 == 0:\n        return (ai + bi) / 2 ** (2 * n + s)\n    else:\n        return (2 ** 0.5 * ai + 6 ** 0.5 * bi) / 2 ** (2 * n + 1 + s)\n(i, k, s) = input().split(' ')\ni = int(i)\nk = int(k)\ns = float(s)\n(ai, bi) = input().split(' ')\nai = int(ai)\nbi = int(bi)\nif k >= i:\n    q = recrel(k, i, ai, bi, s)\n    print(round(q, 5))\nelif k < i:\n    q = recrel1(k, i, ai, bi, s)\n    print(round(q, 5))", "from math import *\n\ndef main():\n    inp = list(map(int, input().split()))\n    i = inp[0]\n    k = inp[1]\n    s = inp[2]\n    inp = list(map(int, input().split()))\n    ai = inp[0]\n    bi = inp[1]\n    x = 2.0 ** 0.5\n    y = 3.0 ** 0.5\n    h = k - i\n    ak = 0\n    bk = 0\n    if abs(h) % 2 == 1:\n        ak = float(2 ** (floor(h / 2) + float(h) / 2.0 + 2 * floor(h / 2) - s) * (float(ai + bi) - y * float(ai - bi)))\n        bk = float(2 ** (floor(h / 2) + float(h) / 2.0 + 2 * floor(h / 2) - s) * (float(ai - bi) + y * float(ai + bi)))\n    else:\n        ak = float(2 ** (floor(h / 2) + float(h) / 2.0 + 2 * floor(h / 2) - s) * float(ai))\n        bk = float(2 ** (floor(h / 2) + float(h) / 2.0 + 2 * floor(h / 2) - s) * float(bi))\n    Q = ak + bk\n    print(Q)\nmain()", "from math import *\n(i, k, s) = (float(x) for x in input().split(' '))\n(ai, bi) = (float(x) for x in input().split(' '))\nx = sqrt(2)\ny = sqrt(3)\nif i == k:\n    print((ai + bi) / pow(2, s))\nelif k > i:\n    if (k - i) % 2 == 0:\n        print((ai + bi) * pow(2, (k - i) * 2 - s))\n    else:\n        print(pow(2, 2 * k - 1 - 2 * i - s) * (ai + bi * y) * x)\nelif (i - k) % 2 == 0:\n    print((ai + bi) * pow(2, 2 * (k - i) - s))\nelse:\n    print(pow(2, 2 * k - 1 - 2 * i - s) * (ai + bi * y) * x)", "import math\n(i, k, s) = input().split()\ni = int(i)\nk = int(k)\ns = int(s)\n(a_i, b_i) = input().split()\na_i = float(a_i)\nb_i = float(b_i)\nplus = math.sqrt(2) + math.sqrt(6)\nminus = math.sqrt(6) - math.sqrt(2)\nif i % 2 == 0:\n    s1 = 2 * (i - 2)\n    b1 = (plus * a_i + minus * b_i) / 16\n    a1 = (plus * b1 - a_i) / minus\nelse:\n    s1 = 2 * (i - 1)\n    b1 = b_i\n    a1 = a_i\nif k % 2 == 0:\n    s2 = 2 * (k - 2)\n    ak = plus * b1 - minus * a1\n    bk = plus * a1 + minus * b1\nelse:\n    s2 = 2 * (k - 1)\n    ak = a1\n    bk = b1\nQ = pow(2, s2 - s1 - s) * (ak + bk)\nprint(Q)", "from math import *\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\np = (a[1] - a[0]) % 2\nq = a[1] - a[0] >> 1\nq = p + (q << 2) - a[2]\nans = pow(2, q) * pow(sqrt(2), p) * (b[0] + b[1] * pow(sqrt(3), p))\nprint('%.10f' % ans)", "from math import floor\n(i, k, s) = [int(i) for i in input().split()]\n(ai, bi) = [int(i) for i in input().split()]\nd = k - i\ntwos = 4 * floor(d / 2) - s\nq = 2 ** twos * (ai + bi)\nif d % 2 == 1:\n    aj = 2 ** 0.5 * (ai + bi) - 6 ** 0.5 * (ai - bi)\n    bj = 2 ** 0.5 * (ai - bi) + 6 ** 0.5 * (ai + bi)\n    r = (aj + bj) / (ai + bi)\n    q *= r\nprint(q)", "import math\n\ndef func(n, ai, bi, s):\n    if n % 2 == 0:\n        if 2 * n - s >= 0:\n            o = 1 << 2 * n - s\n        else:\n            o = pow(2, 2 * n - s)\n        return o * ai + o * bi\n    else:\n        if 2 * (n - 1) - s >= 0:\n            o = 1 << 2 * (n - 1) - s\n        else:\n            o = pow(2, 2 * (n - 1) - s)\n        return o * ai * 2 * math.sqrt(2) + o * bi * 2 * math.sqrt(6)\n\ndef func2(n, ai, bi, s):\n    if n % 2 == 0:\n        o = pow(2, 2 * n - s)\n        return o * ai + o * bi\n    else:\n        if 2 * (n - 1) - s >= 0:\n            o = 1 << 2 * (n - 1) - s\n        else:\n            o = pow(2, 2 * (n - 1) - s)\n        return o * ai * 2 * math.sqrt(2) + o * bi * 2 * math.sqrt(6)\n(i, k, s) = list(map(int, input().split()))\n(ai, bi) = list(map(int, input().split()))\nif i == k:\n    print((ai + bi) / pow(2, s))\nelif i < k:\n    print(func(k - i, ai, bi, s))\nelse:\n    print(func2(k - i, ai, bi, s))", "zz = input()\n(i, k, s) = [int(x) for x in zz.split()]\nzz = input()\n(ai, bi) = [int(x) for x in zz.split()]\nimport math\nx = math.sqrt(2)\ny = math.sqrt(3)\nif i > k:\n    if (i - k) % 2 == 0:\n        s = s + 2 * (i - k)\n        q = (ai + bi) / 2 ** s\n    else:\n        k_new = k - 1\n        a = x * (ai + bi) - x * y * (ai - bi)\n        b = x * (ai - bi) + x * y * (ai + bi)\n        s = s + 2 * (i - k_new)\n        q = (a + b) / 2 ** s\nelif i == k:\n    q = (ai + bi) / 2 ** s\nelif (k - i) % 2 == 0:\n    s = s - 2 * (k - i)\n    q = (ai + bi) / 2 ** s\nelse:\n    k_new = k - 1\n    a = x * (ai + bi) - x * y * (ai - bi)\n    b = x * (ai - bi) + x * y * (ai + bi)\n    s = s - 2 * (k_new - i)\n    q = (a + b) / 2 ** s\nprint(q)", "x = 2 ** 0.5\ny = 3 ** 0.5\n\ndef crack(i, k, s, a_i, b_i):\n    p = x * (1 - y)\n    q = x * (1 + y)\n    sq = p * p + q * q\n    d = k - i\n    if d % 2 != 0:\n        i = i + 1\n        a_i_1 = a_i\n        b_i_1 = b_i\n        a_i = p * a_i_1 + q * b_i_1\n        b_i = q * a_i_1 - p * b_i_1\n        d = k - i\n    multiplier = 2 ** (d / 2 * 4 - s)\n    a_k = a_i * multiplier\n    b_k = b_i * multiplier\n    return (a_k, b_k)\n[i, k, s] = map(int, input().split())\n[a_i, b_i] = map(int, input().split())\n(a_k, b_k) = crack(i, k, s, a_i, b_i)\nQ = a_k + b_k\nprint('%f' % Q)", "import math\ny = 3 ** 0.5\n(i, k, s) = map(int, input().split())\n(a_i, b_i) = map(int, input().split())\nif k > i:\n    c = k - i\n    exp = c // 2\n    if c % 2 == 0:\n        e = 2 * c - s\n        q = 2 ** e * (a_i + b_i)\n    else:\n        e = 3 * exp + c / 2 - s\n        q = 2 ** e * (a_i + b_i - y * (a_i - b_i) + (a_i - b_i + y * (a_i + b_i)))\nelif k < i:\n    c = i - k\n    exp = c // 2\n    if c % 2 == 0:\n        e = -(2 * c) - s\n        q = (a_i + b_i) * 2 ** e\n    else:\n        e = 3 * exp - c / 2 - 3 * c - s\n        q = ((1 - y) * a_i + (1 + y) * b_i + ((1 + y) * a_i + (y - 1) * b_i)) * 2 ** e\nelse:\n    q = 2 ** (math.log2(a_i + b_i) - s)\nprint(q)", "import math\nans = [[0 for x in range(2)] for x in range(2)]\ninp = list(map(int, input().split()))\ni = inp[0]\nk = inp[1]\ns = inp[2]\npower = i + k - 2\ninp = list(map(int, input().split()))\nai = inp[0]\nbi = inp[1]\nif power % 2 == 0:\n    ans[0][0] = pow(2, 2 * power - s - 4 * (i - 1))\n    ans[0][1] = 0\n    ans[1][0] = 0\n    ans[1][1] = pow(2, 2 * power - s - 4 * (i - 1))\nelse:\n    ans[0][0] = pow(2, (power - 1) * 2 - s - 4 * (i - 1)) * (math.sqrt(2) - math.sqrt(6))\n    ans[0][1] = pow(2, (power - 1) * 2 - s - 4 * (i - 1)) * (math.sqrt(2) + math.sqrt(6))\n    ans[1][0] = pow(2, (power - 1) * 2 - s - 4 * (i - 1)) * (math.sqrt(2) + math.sqrt(6))\n    ans[1][1] = pow(2, (power - 1) * 2 - s - 4 * (i - 1)) * (math.sqrt(6) - math.sqrt(2))\nak = ans[0][0] * ai + ans[0][1] * bi\nbk = ans[1][0] * ai + ans[1][1] * bi\ncalc = ak + bk\nprint(calc)", "def multiply22(x, y):\n    return [[x[0][0] * y[0][0] + x[0][1] * y[1][0], x[0][0] * y[0][1] + x[0][1] * y[1][1]], [x[1][0] * y[0][0] + x[1][1] * y[1][0], x[1][0] * y[0][1] + x[1][1] * y[1][1]]]\n\ndef multiply21(x, y):\n    return [[x[0][0] * y[0][0] + x[0][1] * y[1][0]], [x[1][0] * y[0][0] + x[1][1] * y[1][0]]]\n\ndef wpower(value, power):\n    if power & 1 == 0:\n        return ([[1, 0], [0, 1]], 2 * power)\n    return (value, 2 * (power - 1))\nfw = [[-1.0352761804100832, 3.8637033051562737], [3.8637033051562737, 1.0352761804100832]]\nbw = [[-0.06470476127563018, 0.24148145657226705], [0.24148145657226705, 0.06470476127563018]]\n(i, k, s) = map(int, input().split())\n(ai, bi) = map(int, input().split())\nif i == k:\n    print((ai + bi) / 2 ** s)\nelse:\n    mat = wpower(fw, k - i)\n    ans = multiply21(mat[0], [[ai], [bi]])\n    s -= mat[1]\n    print((ans[0][0] + ans[1][0]) / 2 ** s)", "def main():\n    line = list(map(int, input().split()))\n    i = line[0]\n    k = line[1]\n    s = line[2]\n    line = list(map(int, input().split()))\n    aI = line[0]\n    bI = line[1]\n    root2 = 2 ** 0.5\n    root3 = 3 ** 0.5\n    root6 = float(root2) * float(root3)\n    if i % 2 == 0:\n        powerOf2 = 2 * i\n        if k % 2 == 0:\n            powerOf2InQ = s - 2 * k + powerOf2\n            print('%.4f' % (float(aI + bI) / float(2 ** powerOf2InQ)))\n        else:\n            powerOf2InQ = s - 2 * (k - 1) + powerOf2\n            aPlusB = aI + bI\n            aMinusB = aI - bI\n            a1 = root2 * aPlusB - root6 * aMinusB\n            b1 = root2 * aMinusB + root6 * aPlusB\n            print('%.4f' % (float(a1 + b1) / float(2 ** powerOf2InQ)))\n    else:\n        powerOf2 = 2 * (i - 1)\n        if k % 2 == 1:\n            powerOf2InQ = s - 2 * (k - 1) + powerOf2\n            print('%.4f' % (float(aI + bI) / float(2 ** powerOf2InQ)))\n        else:\n            powerOf2InQ = s - 2 * k + powerOf2\n            a0 = ((2 + root3) * bI - aI) / (4 * root2 * (1 + root3))\n            b0 = (aI * (1 + root3) - bI * (1 - root3)) / (8 * root2)\n            print('%.4f' % (float(a0 + b0) / float(2 ** powerOf2InQ)))\n    return 0\nmain()", "def main():\n    h = list(map(int, input().split()))\n    i = h[0]\n    k = h[1]\n    s = h[2]\n    h = list(map(int, input().split()))\n    a = h[0]\n    b = h[1]\n    if k >= i:\n        x = k - i\n        if x % 2 == 0:\n            ans = float(a + b) / float(2 ** (s - 2 * x))\n            print(ans)\n        else:\n            ans = float(2 ** 0.5 * (3 ** 0.5 - 1) * ((2 + 3 ** 0.5) * (a + b) + (b - a))) / float(2 ** (s - 2 * x + 2))\n            print(ans)\n    else:\n        x = i - k\n        if x % 2 == 0:\n            ans = float(a + b) / float(2 ** (s + 2 * x))\n            print(ans)\n        else:\n            ans = float(2 ** 0.5 * (3 ** 0.5 - 1) * ((2 + 3 ** 0.5) * (a + b) + (b - a))) / float(2 ** (s + 2 * x + 2))\n            print(ans)\n    return 0\nmain()", "import math\nx = math.sqrt(2)\ny = math.sqrt(3)\ninp = input().strip()\ninl = inp.split(' ')\ni = int(inl[0])\nk = int(inl[1])\ns = int(inl[2])\ninp = input().strip()\ninl = inp.split(' ')\nai = int(inl[0])\nbi = int(inl[1])\nak = 0\nbk = 0\nif (i - k) % 2 == 1:\n    ai2 = x * (ai + bi) - x * y * (ai - bi)\n    bi2 = x * (ai - bi) + x * y * (ai + bi)\n    ai = ai2\n    bi = bi2\n    i = i + 1\nep = 4\nans = ai + bi\nep = ep * int((k - i) / 2)\npw = ep - s\nans = ans * 2 ** pw\nprint(ans)", "import math\n(i, k, s) = map(int, input().split())\n(a, b) = map(int, input().split())\nnext1 = (math.sqrt(2) + math.sqrt(6)) * (a + b) + (math.sqrt(2) - math.sqrt(6)) * (a - b)\nif k == i:\n    print((a + b) * pow(0.5, s))\nelif k > i:\n    temp = k - i\n    if temp % 2 == 0:\n        power = temp / 2\n        print(pow(2, power * 4 - s) * (b + a))\n    elif temp % 2 != 0:\n        power = (temp - 1) / 2\n        print(pow(2, power * 4 - s) * next1)\nelif k < i:\n    temp = i + 1 - k\n    if temp % 2 == 0:\n        power = temp / 2\n        print(pow(1 / 2, power * 4 + s) * next1)\n    elif temp % 2 != 0:\n        power = (temp - 1) / 2\n        print(pow(1 / 2, power * 4 + s) * (a + b))", "i_k_s = input().split()\ni = int(i_k_s[0])\nk = int(i_k_s[1])\ns = int(i_k_s[2])\na_b = input().split()\na = int(a_b[0])\nb = int(a_b[1])\nif (k - i) % 2 == 0:\n    x = 2 ** (2 * (k - i) - s) * (a + b)\nelse:\n    a1 = 2 ** (1 / 2.0) * (a + b) - 6 ** (1 / 2.0) * (a - b)\n    b1 = 2 ** (1 / 2.0) * (a - b) + 6 ** (1 / 2.0) * (a + b)\n    x = 2 ** (2 * (k - i - 1) - s) * (a1 + b1)\nprint(x)", "import math\n(i, k, s) = map(int, input().split())\n(ai, bi) = map(float, input().split())\nans = 1.0\nif k >= i:\n    if (k - i) % 2 == 0:\n        power = 2 * (k - i) - s\n        if power >= 0:\n            ans = ai + bi\n            ans *= pow(2, power)\n        else:\n            power = abs(power)\n            ans = ai + bi\n            while power > 0:\n                ans /= 2\n                power -= 1\n    else:\n        power = (k - i) // 2\n        power = 4 * power - s\n        if power >= 0:\n            while power > 0:\n                ai *= 2\n                bi *= 2\n                power -= 1\n        else:\n            power = abs(power)\n            while power > 0:\n                ai /= 2\n                bi /= 2\n                power -= 1\n        ai *= 2 * math.sqrt(2)\n        bi *= 2 * math.sqrt(6)\n        ans = ai + bi\nelif (i - k) % 2 == 0:\n    power = 2 * (i - k) + s\n    ans = ai + bi\n    if power < 0:\n        power = abs(power)\n        ans *= pow(2, power)\n    else:\n        while power > 0:\n            ans /= 2\n            power -= 1\nelse:\n    power = (i - k) // 2\n    power = 4 * power + s\n    if power < 0:\n        power = abs(power)\n        while power > 0:\n            ai *= 2\n            bi *= 2\n            power -= 1\n    else:\n        while power > 0:\n            ai /= 2\n            bi /= 2\n            power -= 1\n    ai *= math.sqrt(2) / 8.0\n    bi *= math.sqrt(6) / 8.0\n    ans = ai + bi\nprint('{:.8f}'.format(ans))", "from math import *\nfrom decimal import *\ngetcontext().prec = 200\nargs1 = input().split(' ')\nargs2 = input().split(' ')\nI = int(args1[0])\nK = int(args1[1])\nS = Decimal(args1[2])\nA = Decimal(args2[0])\nB = Decimal(args2[1])\ns2 = Decimal(2.0) ** Decimal(0.5)\ns6 = Decimal(6.0) ** Decimal(0.5)\na1 = s2 * (A + B) - s6 * (A - B)\naf1 = a1 / A\nb1 = s2 * (A - B) + s6 * (A + B)\nbf1 = b1 / B\na2 = s2 * (a1 + b1) - s6 * (a1 - b1)\naf2 = a2 / a1\nb2 = s2 * (a1 - b1) + s6 * (a1 + b1)\nbf2 = b2 / b1\nd2 = Decimal(2.0)\nak = A\nbk = B\nif K >= I:\n    p = Decimal((K - I) // 2)\n    s = S\n    c = 0\n    while fabs(p) > 1.0 or fabs(s) > 1.0:\n        p /= d2\n        s /= d2\n        c += 1\n    c2 = Decimal(2 ** c)\n    ak *= ((af1 * af2) ** p / d2 ** s) ** c2\n    bk *= ((bf1 * bf2) ** p / d2 ** s) ** c2\n    if (K - I) % 2 == 1:\n        ak *= af1\n        bk *= bf1\nelse:\n    p = Decimal((I - K) // 2)\n    s = S\n    c = 0\n    while fabs(p) > 1.0 or fabs(s) > 1.0:\n        p /= d2\n        s /= d2\n        c += 1\n    c2 = Decimal(2 ** c)\n    ak /= ((af1 * af2) ** p * d2 ** s) ** c2\n    bk /= ((bf1 * bf2) ** p * d2 ** s) ** c2\n    if (I - K) % 2 == 1:\n        ak /= af2\n        bk /= bf2\ngetcontext().prec = 16\nif fabs(ak + bk) < 0.001:\n    print(0)\nelse:\n    print(ak + bk)", "import math\na = [int(x) for x in input().split()]\ni = a[0]\nk = a[1]\ns = a[2]\nb = [float(x) for x in input().split()]\nx = math.sqrt(2)\ny = math.sqrt(3)\nsum = 0\ndiff = 0\nif k >= i:\n    p16 = int((k - i) / 2)\n    if s >= 0:\n        ps = int(s / 4)\n        s %= 4\n        p = p16 - ps\n        if p >= 0:\n            b[0] *= math.pow(16, p)\n            b[1] *= math.pow(16, p)\n            if (k - i) % 2 != 0:\n                sum = b[0] + b[1]\n                diff = b[1] - b[0]\n                b[0] = x * sum + x * y * diff\n                b[1] = x * y * sum - x * diff\n            sum = b[0] + b[1]\n            for j in range(s):\n                sum /= 2\n        else:\n            p = -p\n            b[0] /= math.pow(16, p)\n            b[1] /= math.pow(16, p)\n            if (k - i) % 2 != 0:\n                sum = b[0] + b[1]\n                diff = b[1] - b[0]\n                b[0] = x * sum + x * y * diff\n                b[1] = x * y * sum - x * diff\n            sum = b[0] + b[1]\n            for j in range(s):\n                sum /= 2\n    else:\n        ps = int(s / 4)\n        s %= 4\n        s = (4 - s) % 4\n        p = p16 + ps\n        if p >= 0:\n            b[0] *= math.pow(16, p)\n            b[1] *= math.pow(16, p)\n            if (k - i) % 2 != 0:\n                sum = b[0] + b[1]\n                diff = b[1] - b[0]\n                b[0] = x * sum + x * y * diff\n                b[1] = x * y * sum - x * diff\n            sum = b[0] + b[1]\n            for j in range(s):\n                sum *= 2\n        else:\n            p = -p\n            b[0] /= math.pow(16, p)\n            b[1] /= math.pow(16, p)\n            if (k - i) % 2 != 0:\n                sum = b[0] + b[1]\n                diff = b[1] - b[0]\n                b[0] = x * sum + x * y * diff\n                b[1] = x * y * sum - x * diff\n            sum = b[0] + b[1]\n            for j in range(s):\n                sum *= 2\nelse:\n    den = 8 * x\n    p16 = int((i - k) / 2)\n    if s >= 0:\n        ps = int(s / 4)\n        s %= 4\n        p = p16 - ps\n        if p >= 0:\n            b[0] /= math.pow(16, p)\n            b[1] /= math.pow(16, p)\n            if (i - k) % 2 != 0:\n                sum = b[0] + b[1]\n                diff = b[1] - b[0]\n                b[1] = (y * sum - diff) / den\n                b[0] = (sum + y * diff) / den\n            sum = b[0] + b[1]\n            for j in range(s):\n                sum /= 2\n        else:\n            p = -p\n            b[0] *= math.pow(16, p)\n            b[1] *= math.pow(16, p)\n            if (i - k) % 2 != 0:\n                sum = b[0] + b[1]\n                diff = b[1] - b[0]\n                b[1] = (y * sum - diff) / den\n                b[0] = (sum + y * diff) / den\n            sum = b[0] + b[1]\n            for j in range(s):\n                sum /= 2\n    else:\n        ps = int(s / 4)\n        s %= 4\n        s = (4 - s) % 4\n        p = p16 + ps\n        if p >= 0:\n            b[0] /= math.pow(16, p)\n            b[1] /= math.pow(16, p)\n            if (i - k) % 2 != 0:\n                sum = b[0] + b[1]\n                diff = b[1] - b[0]\n                b[1] = (y * sum - diff) / den\n                b[0] = (sum + y * diff) / den\n            sum = b[0] + b[1]\n            for j in range(s):\n                sum *= 2\n        else:\n            p = -p\n            b[0] *= math.pow(16, p)\n            b[1] *= math.pow(16, p)\n            if (i - k) % 2 != 0:\n                sum = b[0] + b[1]\n                diff = b[1] - b[0]\n                b[1] = (y * sum - diff) / den\n                b[0] = (sum + y * diff) / den\n            sum = b[0] + b[1]\n            for j in range(s):\n                sum *= 2\nprint(sum)", "import math\n(i, k, s) = map(int, input().split())\n(ai, bi) = map(int, input().split())\nd = abs(k - i)\nif k > i:\n    if d % 2 == 0:\n        t = 2 ** (2 * d - s)\n        sk = (ai + bi) * t\n    else:\n        t = 2 ** (4 * (d // 2) - s)\n        ani = math.sqrt(2) * (ai + bi) - math.sqrt(6) * (ai - bi)\n        bni = math.sqrt(2) * (ai - bi) + math.sqrt(6) * (ai + bi)\n        sk = (ani + bni) * t\nelif k < i:\n    if d % 2 == 0:\n        t = 2 ** (2 * d + s)\n        sk = (ai + bi) / t\n    else:\n        t = 2 ** (4 * ((d + 1) // 2) + s)\n        ani = math.sqrt(2) * (ai + bi) - math.sqrt(6) * (ai - bi)\n        bni = math.sqrt(2) * (ai - bi) + math.sqrt(6) * (ai + bi)\n        sk = (ani + bni) / t\nelse:\n    sk = (ai + bi) / 2 ** s\nprint('%.3f' % sk)", "x = pow(2, 0.5)\ny = pow(3, 0.5)\n(i, k, s) = [int(h) for h in input().split()]\n(a, b) = [int(h) for h in input().split()]\na = a\nb = b\nif i == k:\n    c = (a + b) / pow(2, s)\nelif i < k:\n    a1 = x * (a + b) - x * y * (a - b)\n    b1 = x * (a - b) + x * y * (a + b)\n    if (k - i) % 2 == 1:\n        l = 2 * (k - i - 1) - s\n        c = (a1 + b1) * pow(2, l)\n    else:\n        l = 2 * (k - i) - s\n        c = (a + b) * pow(2, l)\nelse:\n    d = 2 * x * (1 + y * y)\n    a1 = (a * (1 - y) + b * (1 + y)) / d\n    b1 = (a * (1 + y) + b * (y - 1)) / d\n    if (i - k) % 2 == 1:\n        l = 2 * (k - i + 1) - s\n        c = (a1 + b1) * pow(2, l)\n    else:\n        l = 2 * (k - i) - s\n        c = (a + b) * pow(2, l)\nprint(c * 1.0)", "from math import *\n(i, k, s) = list(map(int, input().split(' ')))\n(a, b) = list(map(float, input().split(' ')))\nSi = a + b\nif i % 2 != k % 2:\n    Si = 2 * sqrt(2) * a + 2 * sqrt(6) * b\n    i += 1\nprint(pow(2, 2 * (k - i) - s) * Si)", "from math import sqrt\ns1 = input()\nl1 = s1.split()\n(i, k, s) = (int(l1[0]), int(l1[1]), int(l1[2]))\nl2 = input().split()\n(ai, bi) = (int(l2[0]), int(l2[1]))\nif k == i:\n    print((ai + bi) / 2 ** s)\nelif (k - i) % 2 == 0:\n    print(2 ** (2 * (k - i) - s) * (ai + bi))\nelse:\n    print(2 ** (2 * (k - i - 1) - s) * (ai * (sqrt(2) * 2) + bi * 2 * sqrt(6)))", "from decimal import *\ngetcontext().prec = 150\n\nclass Num:\n    val = Decimal('0')\n    power = 0\n    eps = Decimal(10 ** (-15))\n    base = 1000\n    low = Decimal(1)\n    high = Decimal(2 ** 40)\n    two = Decimal(2)\n\n    def __init__(self):\n        self.val = Decimal('0')\n        self.power = 0\n\n    def __init__(self, val, power):\n        self.val = val\n        self.power = power\n        self.sift()\n\n    def sift(self):\n        if abs(self.val) == 0:\n            self.val = Decimal('0')\n            self.power = 0\n            return\n        negativeFlag = False\n        if self.val < 0:\n            negativeFlag = True\n        self.val = abs(self.val)\n        if self.val < self.low:\n            start = -1\n            end = self.base + 10\n            while end - start > 1:\n                mid = (end + start) // 2\n                if self.val * pow(self.two, mid) < self.low:\n                    start = mid\n                else:\n                    end = mid\n            self.val *= pow(self.two, end)\n            self.power -= end\n        elif self.val > self.high:\n            start = -1\n            end = self.base + 10\n            while end - start > 1:\n                mid = (end + start) // 2\n                if self.val / pow(self.two, mid) <= self.high:\n                    end = mid\n                else:\n                    start = mid\n            self.val /= pow(self.two, end)\n            self.power += end\n        if negativeFlag:\n            self.val = -self.val\n\n    def add(self, X):\n        ret = Num(Decimal(0), 0)\n        if X.val == 0:\n            ret.val = self.val\n            ret.power = self.power\n            return ret\n        if self.val == 0:\n            ret.val = X.val\n            ret.power = X.power\n            return ret\n        power1 = self.power - min(self.power, X.power)\n        power2 = X.power - min(self.power, X.power)\n        if power1 >= self.base:\n            ret.val = self.val\n            ret.power = self.power\n            return ret\n        if power2 >= self.base:\n            ret.val = X.val\n            ret.power = X.power\n            return ret\n        ret.val = self.val * pow(self.two, power1) + X.val * pow(self.two, power2)\n        ret.power = min(self.power, X.power)\n        ret.sift()\n        return ret\n\n    def mul(self, X):\n        ret = Num(Decimal(0), 0)\n        ret.val = self.val * X.val\n        ret.power = self.power + X.power\n        ret.sift()\n        return ret\nC = [[0, 0], [0, 0]]\nA = [[0, 0], [0, 0]]\nB = [[0, 0], [0, 0]]\nX = [[0, 0], [0, 0]]\n\ndef mul():\n    for i in range(2):\n        for j in range(2):\n            C[i][j] = 'a'\n    for i in range(2):\n        for j in range(2):\n            for k in range(2):\n                if C[i][j] == 'a':\n                    C[i][j] = A[i][k].mul(B[k][j])\n                else:\n                    C[i][j] = C[i][j].add(A[i][k].mul(B[k][j]))\n\ndef getPow(x, y):\n    if y == 0:\n        return 1\n    ans = getPow(x, y // 2)\n    ans = ans * ans\n    if y % 2 == 1:\n        ans = ans * x\n    return ans\n\ndef power(index):\n    if index == 0:\n        for i in range(2):\n            for j in range(2):\n                C[i][j] = Num(Decimal(0), 0)\n            C[i][i] = Num(Decimal(1), 0)\n        return\n    power(index // 2)\n    for i in range(2):\n        for j in range(2):\n            A[i][j] = C[i][j]\n            B[i][j] = C[i][j]\n    mul()\n    if index % 2 == 1:\n        for i in range(2):\n            for j in range(2):\n                A[i][j] = C[i][j]\n                B[i][j] = X[i][j]\n        mul()\nsqrtTwo = Decimal(2).sqrt()\nsqrtSix = Decimal(6).sqrt()\nX = sqrtTwo - sqrtSix\nY = sqrtTwo + sqrtSix\n(a, d) = (sqrtTwo + sqrtSix, -sqrtTwo - sqrtSix)\n(b, c) = (sqrtTwo - sqrtSix, sqrtTwo - sqrtSix)\ndet = a * d - b * c\nM = [[Num(a, 0), Num(b, 0)], [Num(c, 0), Num(d, 0)]]\nMi = [[Num(d / det, 0), Num(-b / det, 0)], [Num(-c / det, 0), Num(a / det, 0)]]\n(ind1, ind2, s) = map(int, input().split())\n(x, y) = map(int, input().split())\n(x, y) = (Num(Decimal(x + y), -s), Num(Decimal(x - y), -s))\nif ind1 <= ind2:\n    X = M\nelse:\n    X = Mi\npower(abs(ind1 - ind2))\nans = x.mul(C[0][0])\nans = ans.add(y.mul(C[0][1]))\nq = ans.val * pow(Decimal(2), ans.power)\ns = str('%.19f' % q)\nZ = '-0123456789.'\nvalid = False\nfor item in s:\n    if item not in Z:\n        while True:\n            continue\n    if item != '0' and item != '.':\n        valid = True\nif not valid:\n    while True:\n        continue\nprint(s)", "import math\nfrom decimal import Decimal\nimport sys\nx = math.sqrt(6) - math.sqrt(2)\ny = math.sqrt(6) + math.sqrt(2)\n\ndef work(i, k, a, b, s):\n    d = k - i\n    n2 = int(d / 2) * 4\n    if d < 0:\n        n2 = int((d - 1) / 2) * 4\n    n2 -= s\n    s2 = 1\n    for i in range(0, abs(n2)):\n        s2 *= 2\n    if n2 < 0:\n        s2 = Decimal(1.0 / float(s2))\n    s2 = Decimal(s2)\n    if d % 2 == 1:\n        a2 = Decimal(float(b) * y - float(a) * x)\n        b2 = Decimal(float(a) * y + float(b) * x)\n    else:\n        a2 = Decimal(float(a))\n        b2 = Decimal(float(b))\n    ans = Decimal((a2 + b2) * s2)\n    return ans\ninp = input().split()\ni = int(inp[0])\nk = int(inp[1])\ns = int(inp[2])\ninp = input().split()\na = int(inp[0])\nb = int(inp[1])\nprint(work(i, k, a, b, s))", "from math import sqrt\n(i, k, s) = input().split()\n(i, k, s) = (int(i), int(k), int(s))\n(x, y) = (sqrt(2), sqrt(3))\n(a, b) = input().split()\n(a, b) = (float(a), float(b))\nif (k - i) % 2 == 0:\n    print(2 ** (2 * k - 2 * i - s) * (a + b))\nelse:\n    (a, b) = (x * (a + b) - x * y * (a - b), x * (a - b) + x * y * (a + b))\n    i = i + 1\n    print(2 ** (2 * k - 2 * i - s) * (a + b))", "(k, i, s) = map(int, input().split())\n(ai, bi) = map(int, input().split())\nif i == k:\n    print((ai + bi) / pow(2, s))\nelse:\n    if (i - k) % 2 == 1:\n        si = (ai + 1.7320508075688772 * bi) / (4 * 1.4142135623730951)\n        i = int((i - k + 1) / 2)\n    else:\n        si = ai + bi\n        i = int((i - k) / 2)\n    print(si * pow(2, 4 * i - s))", "from decimal import *\n(i, k, s) = (1, 1, 5)\n(ai, bi) = (4, 5)\n(i, k, s) = map(int, input().split())\n(ai, bi) = map(int, input().split())\nBIG = 1000000000000000000000000000000000000000000\nif (k - i) % 2 == 1:\n    i += 1\n    oai = ai\n    obi = bi\n    x = Decimal('1.4142135623730950488016887242096980785696718753769480731766797379907324784621070') * BIG\n    y = Decimal('2.4494897427831780981972840747058913919659474806566701284326925672509603774573150') * BIG\n    ai = int(x * (oai + obi) - y * (oai - obi))\n    bi = int(x * (oai - obi) + y * (oai + obi))\nelse:\n    ai = int(ai * BIG)\n    bi = int(bi * BIG)\ne = (k - i) * 2 - s\ns = ai + bi\nif e > 0:\n    s <<= e\nelse:\n    s >>= -e\nprint(s / BIG)"]