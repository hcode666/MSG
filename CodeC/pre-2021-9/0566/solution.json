["for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(len(l) - 1, 0, -1):\n        if l[i] % 2 == 0:\n            l[i - 1] += l[i] // 2\n        else:\n            print('No')\n            break\n    else:\n        if l[0] == 1:\n            print('Yes')\n        else:\n            print('No')", "def branch_check(n, arr):\n    cur_branches = 0.5\n    for i in range(n):\n        cur_branches = 2 * cur_branches\n        if arr[i] > cur_branches:\n            return 'No'\n        cur_branches -= arr[i]\n    return 'Yes' if cur_branches == 0 else 'No'\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(branch_check(n, arr))", "def branch_check(n, arr):\n    cur_branches = 0.5\n    for i in range(n):\n        cur_branches = 2 * cur_branches\n        if arr[i] > cur_branches:\n            return 'No'\n        cur_branches -= arr[i]\n    return 'Yes' if cur_branches == 0 else 'No'\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(branch_check(n, arr))", "def branch_check(n, arr):\n    cur_branches = 0.5\n    for i in range(n):\n        cur_branches = 2 * cur_branches\n        if arr[i] > cur_branches:\n            return 'No'\n        cur_branches -= arr[i]\n    return 'Yes' if cur_branches == 0 else 'No'\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(branch_check(n, arr))", "def branch_check(n, arr):\n    cur_branches = 0.5\n    for i in range(n):\n        cur_branches = 2 * cur_branches\n        if arr[i] > cur_branches:\n            return 'No'\n        cur_branches -= arr[i]\n    return 'Yes' if cur_branches == 0 else 'No'\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(branch_check(n, arr))", "def branch_check(n, arr):\n    cur_branches = 0.5\n    for i in range(n):\n        cur_branches = 2 * cur_branches\n        if arr[i] > cur_branches:\n            return 'No'\n        cur_branches -= arr[i]\n    return 'Yes' if cur_branches == 0 else 'No'\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(branch_check(n, arr))", "def branch_check(n, arr):\n    cur_branches = 0.5\n    for i in range(n):\n        cur_branches = 2 * cur_branches\n        if arr[i] > cur_branches:\n            return 'No'\n        cur_branches -= arr[i]\n    return 'Yes' if cur_branches == 0 else 'No'\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(branch_check(n, arr))", "def branch_check(n, arr):\n    cur_branches = 0.5\n    for i in range(n):\n        cur_branches = 2 * cur_branches\n        if arr[i] > cur_branches:\n            return 'No'\n        cur_branches -= arr[i]\n    return 'Yes' if cur_branches == 0 else 'No'\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(branch_check(n, arr))", "def branch_check(n, arr):\n    cur_branches = 0.5\n    for i in range(n):\n        cur_branches = 2 * cur_branches\n        if arr[i] > cur_branches:\n            return 'No'\n        cur_branches -= arr[i]\n    return 'Yes' if cur_branches == 0 else 'No'\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(branch_check(n, arr))", "def branch_check(n, arr):\n    cur_branches = 0.5\n    for i in range(n):\n        cur_branches = 2 * cur_branches\n        cur_branches -= arr[i]\n    return 'Yes' if cur_branches == 0 else 'No'\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(branch_check(n, arr))", "def beanstalk(n, s):\n    stem = 0.5\n    for val in s:\n        stem = 2 * stem - val\n    if stem == 0:\n        print('Yes')\n    else:\n        print('No')\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    beanstalk(n, s)", "def branching(N, A):\n    stem = 0.5\n    for a in A:\n        stem = 2 * stem - a\n        if stem < 0:\n            break\n    if stem == 0:\n        return 'Yes'\n    return 'No'\n\ndef solve():\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    if N == 1:\n        if A[0] == 1:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print(branching(N, A))\nfor _ in range(int(input())):\n    solve()", "def branching(N, A):\n    stem = 0.5\n    for a in A:\n        stem = 2 * stem - a\n        if stem < 0:\n            break\n    if stem == 0:\n        return 'Yes'\n    return 'No'\n\ndef solve():\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    if N == 1:\n        if A[0] == 1:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print(branching(N, A))\nfor _ in range(int(input())):\n    solve()", "def branching(N, A):\n    stem = 0.5\n    for a in A:\n        stem = 2 * stem - a\n        if stem < 0:\n            break\n    if stem == 0:\n        return 'Yes'\n    return 'No'\n\ndef solve():\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    if N == 1:\n        if A[0] == 1:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print(branching(N, A))\nfor _ in range(int(input())):\n    solve()", "def branching(N, A):\n    stem = 0.5\n    for a in A:\n        stem = 2 * stem - a\n        if stem < 0:\n            break\n    if stem == 0:\n        return 'Yes'\n    return 'No'\n\ndef solve():\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    if N == 1:\n        if A[0] == 1:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print(branching(N, A))\nfor _ in range(int(input())):\n    solve()", "def branching(N, A):\n    stem = 0.5\n    for a in A:\n        stem = 2 * stem - a\n        if stem < 0:\n            break\n    if stem == 0:\n        return 'Yes'\n    return 'No'\n\ndef solve():\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    if N == 1:\n        if A[0] == 1:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print(branching(N, A))\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = 1\n    for i in range(n):\n        if k < 0 or k > 10 ** 6 * (n - i):\n            break\n        k -= arr[i]\n        k *= 2\n    if k:\n        print('No')\n    else:\n        print('Yes')\n    t -= 1", "t = int(input())\nfor i in range(t):\n    k = int(input())\n    leaf = map(int, input().split())\n    stem = 0.5\n    for l in leaf:\n        stem = stem * 2 - l\n    if stem == 0:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = 1\n    for i in range(n):\n        if k < 0 or k > 10 ** 6 * (n - i):\n            break\n        k -= arr[i]\n        k *= 2\n    if k:\n        print('No')\n    else:\n        print('Yes')\n    t -= 1", "t = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = 1\n    for i in range(n):\n        if k < 0 or k > 10 ** 6 * (n - i):\n            break\n        k -= arr[i]\n        k *= 2\n    if k:\n        print('No')\n    else:\n        print('Yes')\n    t -= 1", "t = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = 1\n    for i in range(n):\n        if k < 0 or k > 10 ** 6 * (n - i):\n            break\n        k -= arr[i]\n        k *= 2\n    if k:\n        print('No')\n    else:\n        print('Yes')\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(len(l) - 1, 0, -1):\n        if l[i] % 2 == 0:\n            l[i - 1] += l[i] // 2\n        else:\n            print('No')\n            break\n    else:\n        if l[0] == 1:\n            print('Yes')\n        else:\n            print('No')", "for _ in range(int(input())):\n    input()\n    levels = map(int, input().split())\n    stem = 0.5\n    for (i, val) in enumerate(levels):\n        stem = 2 * stem - val\n    if stem == 0:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    n = int(input())\n    arr = map(int, input().split())\n    prev = 0.5\n    for i in arr:\n        prev = 2 * prev - i\n    print(('No', 'Yes')[prev == 0])", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(len(l) - 1, 0, -1):\n        if l[i] % 2 == 0:\n            l[i - 1] += l[i] // 2\n        else:\n            print('No')\n            break\n    else:\n        if l[0] == 1:\n            print('Yes')\n        else:\n            print('No')", "tn = int(input())\nfor _ in range(tn):\n    k = int(input())\n    arr = list(map(int, input().split()))\n    if k == 1:\n        if arr[0] == 1:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        sli = arr[-1] // 2\n        for i in range(k - 2, 0, -1):\n            sli = (sli + arr[i]) // 2\n        if sli == 1:\n            print('Yes')\n        else:\n            print('No')", "tn = int(input())\nfor _ in range(tn):\n    k = int(input())\n    arr = list(map(int, input().split()))\n    if k == 1:\n        if arr[0] == 1:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        sli = arr[-1] // 2\n        for i in range(k - 2, 0, -1):\n            sli = (sli + arr[i]) // 2\n        if sli == 1:\n            print('Yes')\n        else:\n            print('No')", "def function(N, A):\n    stem = 0.5\n    for a in A:\n        stem = 2 * stem - a\n        if stem < 0:\n            break\n    if stem == 0:\n        return 'Yes'\n    return 'No'\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        A = list(map(int, input().split(' ')))\n        if N == 1:\n            if A[0] == 1:\n                print('Yes')\n            else:\n                print('No')\n        else:\n            val = function(N, A)\n            print(val)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    s = 0\n    c = 1\n    for e in lis:\n        s += e * c\n        c = c / 2\n    if s == 1:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    n = int(input())\n    nli = list(map(int, input().split()))\n    stm = 0.5\n    for a in nli:\n        stm = stm * 2 - a\n        if stm < 0:\n            break\n    if stm == 0:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    n = int(input())\n    v = map(int, input().split())\n    end = 0.5\n    for i in v:\n        end = end * 2 - i\n    if end == 0:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    input()\n    arr = map(int, input().split())\n    leaf = 0.5\n    for val in arr:\n        leaf = 2 * leaf - val\n    if leaf == 0:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor i in range(t):\n    k = int(input())\n    arr = list(map(int, input().split()))\n    flag = True\n    if k == 1 and arr[0] == 1:\n        print('Yes')\n        continue\n    stem = 0\n    if arr[k - 1] % 2 == 0:\n        stem = arr[k - 1] // 2\n    else:\n        print('No')\n        continue\n    for i in range(k - 2, 0, -1):\n        if (stem + arr[i]) % 2 == 0:\n            stem = (stem + arr[i]) // 2\n        else:\n            flag = False\n            break\n    if stem == 1 and flag and (arr[0] == 0):\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    input()\n    levels = map(int, input().split())\n    stem = 0.5\n    for (i, val) in enumerate(levels):\n        stem = 2 * stem - val\n    if stem == 0:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor tc in range(t):\n    ignore = input()\n    levels = map(int, input().split())\n    stem = 0.5\n    for (i, val) in enumerate(levels):\n        stem = 2 * stem - val\n    if stem == 0:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    input()\n    levels = map(int, input().split())\n    stem = 0.5\n    for (i, val) in enumerate(levels):\n        stem = 2 * stem - val\n    if stem == 0:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    input()\n    levels = map(int, input().split())\n    stem = 0.5\n    for (i, val) in enumerate(levels):\n        stem = 2 * stem - val\n    if stem == 0:\n        print('Yes')\n    else:\n        print('No')", "import sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil\nfrom collections import deque, defaultdict\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\n\ndef bs(narr, arr, i, j, l):\n    if i == j:\n        narr[l] = arr[i]\n        return arr[i]\n    mid = (i + j) // 2\n    lt = bs(narr, arr, i, mid, 2 * l)\n    ri = bs(narr, arr, mid + 1, j, 2 * l + 1)\n    narr[l] = lt + ri\n    return lt + ri\narr = []\nnarr = [-1]\nfor l in rg(1, 2 * len(arr) + 1 + 1):\n    narr.append(-1)\n\ndef pup(narr, i, j, p, val, l):\n    narr[l] += val\n    if i == j:\n        return\n    mid = (i + j) // 2\n    if i <= p and p <= mid:\n        lt = pup(narr, i, mid, p, val, 2 * l)\n    else:\n        ri = pup(narr, mid + 1, j, p, val, 2 * l + 1)\n\ndef rq(narr, i, j, L, R, l):\n    print(i, j)\n    if L <= i and j <= R:\n        return narr[l]\n    mid = (i + j) // 2\n    ans = 0\n    if L <= mid:\n        ans += rq(narr, i, mid, L, R, 2 * l)\n    if mid + 1 <= R:\n        ans += rq(narr, mid + 1, j, L, R, 2 * l + 1)\n    return ans\n\ndef istree(n, arr):\n    next = 0.5\n    for l in rg(n):\n        next = 2 * next - arr[l]\n    return next\nfor _ in rg(ii()):\n    n = ii()\n    arr = il()\n    if istree(n, arr) == 0:\n        ot('Yes')\n    else:\n        ot('No')", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nimport bisect\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef main():\n    for _ in tr():\n        n = nl()\n        nodes = ln()\n        leafs = 0.5\n        for i in nodes:\n            leafs = leafs * 2 - i\n        if not leafs:\n            print('Yes')\n        else:\n            print('No')\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 1 / 2\n    for i in l:\n        c = 2 * c - i\n    print('No') if c else print('Yes')", "for i in range(int(input())):\n    levels = int(input())\n    leaves_by_levels = list(map(int, input().split()))\n    stem_node = 0.5\n    for _ in leaves_by_levels:\n        stem_node = 2 * stem_node - _\n    if stem_node == 0:\n        print('Yes')\n    else:\n        print('No')", "for i in range(int(input())):\n    levels = int(input())\n    leaves_by_levels = list(map(int, input().split()))\n    stem_node = 0.5\n    for _ in leaves_by_levels:\n        stem_node = 2 * stem_node - _\n    if stem_node == 0:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    leaves = list(map(int, input().split()))\n    if n == 1 and leaves[0] == 1:\n        print('Yes')\n        continue\n    noOfLeaves = leaves[n - 1]\n    stems = 0\n    if noOfLeaves % 2 == 0:\n        stems = noOfLeaves // 2\n    else:\n        print('No')\n        continue\n    found = True\n    for index in range(n - 2, 0, -1):\n        if (stems + leaves[index]) % 2 == 0:\n            stems = (stems + leaves[index]) // 2\n        else:\n            found = False\n            break\n    if stems == 1 and found and (leaves[0] == 0):\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    leaves = list(map(int, input().split()))\n    if n == 1 and leaves[0] == 1:\n        print('Yes')\n        continue\n    noOfLeaves = leaves[n - 1]\n    stems = 0\n    if noOfLeaves % 2 == 0:\n        stems = noOfLeaves // 2\n    else:\n        print('No')\n        continue\n    found = True\n    for index in range(n - 2, 0, -1):\n        if (stems + leaves[index]) % 2 == 0:\n            stems = (stems + leaves[index]) // 2\n        else:\n            found = False\n            break\n    if stems == 1 and found and (leaves[0] == 0):\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    leaves = list(map(int, input().split()))\n    if n == 1 and leaves[0] == 1:\n        print('Yes')\n        continue\n    noOfLeaves = leaves[n - 1]\n    stems = 0\n    if noOfLeaves % 2 == 0:\n        stems = noOfLeaves // 2\n    else:\n        print('No')\n        continue\n    found = True\n    for index in range(n - 2, 0, -1):\n        if (stems + leaves[index]) % 2 == 0:\n            stems = (stems + leaves[index]) // 2\n        else:\n            found = False\n            break\n    if stems == 1 and found and (leaves[0] == 0):\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    leaves = list(map(int, input().split()))\n    if n == 1 and leaves[0] == 1:\n        print('Yes')\n        continue\n    noOfLeaves = leaves[n - 1]\n    stems = 0\n    if noOfLeaves % 2 == 0:\n        stems = noOfLeaves // 2\n    else:\n        print('No')\n        continue\n    found = True\n    for index in range(n - 2, 0, -1):\n        if (stems + leaves[index]) % 2 == 0:\n            stems = (stems + leaves[index]) // 2\n        else:\n            found = False\n            break\n    if stems == 1 and found and (leaves[0] == 0):\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor i in range(t):\n    k = int(input())\n    l = list(map(int, input().split()))\n    s = 0.5\n    for j in l:\n        s = 2 * s - j\n    print('Yes' if s == 0 else 'No')", "for i in range(int(input())):\n    levels = int(input())\n    leaves_by_levels = list(map(int, input().split()))\n    stem_node = 0.5\n    for _ in leaves_by_levels:\n        stem_node = 2 * stem_node - _\n    if stem_node == 0:\n        print('Yes')\n    else:\n        print('No')", "for i in range(int(input())):\n    levels = int(input())\n    leaves_by_levels = list(map(int, input().split()))\n    stem_node = 0.5\n    for _ in leaves_by_levels:\n        stem_node = 2 * stem_node - _\n    if stem_node == 0:\n        print('Yes')\n    else:\n        print('No')", "for i in range(int(input())):\n    n = int(input())\n    leaf = list(map(int, input().split()))\n    f = 0\n    stem = 0.5\n    for _ in leaf:\n        stem = 2 * stem - _\n    if stem == 0:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    k = int(input())\n    arr = list(map(int, input().split()))\n    d = 0.5\n    for i in arr:\n        d = d * 2 - i\n    print('Yes') if d == 0 else print('No')", "for _ in range(int(input())):\n    k = int(input())\n    arr = list(map(int, input().split()))\n    d = 0.5\n    for i in arr:\n        d = d * 2 - i\n    print('Yes') if d == 0 else print('No')", "for j in range(int(input())):\n    k = int(input())\n    x = list(map(int, input().split()))\n    d = 0.5\n    for i in x:\n        d = d * 2 - i\n    if d == 0:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nlevel = []\nx = [[] for i in range(t)]\nfor i in range(t):\n    l = int(input())\n    level.append(l)\n    x[i] = list(map(int, input().split()))\nfor i in range(t):\n    leaf = x[i]\n    leaf.reverse()\n    for (idx, j) in enumerate(leaf):\n        if idx == level[i] - 1:\n            if j == 1:\n                print('Yes')\n                break\n            else:\n                print('No')\n        elif j % 2 == 0:\n            leaf[idx + 1] += j / 2\n        else:\n            print('No')\n            break", "T = int(input())\nfor i in range(T):\n    k = int(input())\n    N = input().split(' ')\n    x = 1 / 2\n    for j in range(k):\n        x = x * 2 - int(N[j])\n    if x == 0:\n        print('Yes')\n    else:\n        print('No')", "T = int(input())\nfor t in range(T):\n    K = int(input())\n    N = input().split(' ')\n    l = 1 / 2\n    for i in range(K):\n        l = l * 2 - int(N[i])\n    if l == 0:\n        print('Yes')\n    else:\n        print('No')", "for xx in range(int(input())):\n    n = int(input())\n    arr = map(int, input().split())\n    l = 0.5\n    for i in arr:\n        l = l * 2 - i\n    if l == 0:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    n = int(input())\n    a = map(int, input().split())\n    l = 0.5\n    for i in a:\n        l = l * 2 - i\n    if l == 0:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    n = int(input())\n    a = map(int, input().split())\n    leaf = 0.5\n    for i in a:\n        leaf = leaf * 2 - i\n    if leaf == 0:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    n = int(input())\n    a = map(int, input().split())\n    leaf = 0.5\n    for i in a:\n        leaf = leaf * 2 - i\n    if leaf == 0:\n        print('Yes')\n    else:\n        print('No')", "T = int(input())\nfor t in range(T):\n    K = int(input())\n    level = [int(x) for x in input().split()]\n    stem = 0.5\n    for x in level:\n        stem = stem * 2 - x\n    if stem == 0:\n        print('Yes')\n    else:\n        print('No')"]