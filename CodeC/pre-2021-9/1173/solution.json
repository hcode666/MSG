["from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().rstrip().split())\n    mat = []\n    for i in range(n):\n        a = list(map(int, input().rstrip().split()))\n        if not i & 1:\n            mat.append(a)\n        else:\n            mat.append(a)\n    d = defaultdict(lambda : 0)\n    for i in mat:\n        for j in i:\n            d[j] += 1\n    mm = [[0] * m for i in range(n)]\n    flag = 0\n    for i in range(n):\n        for j in range(0, m // 2):\n            f = 0\n            for k in d:\n                if d[k] >= 2:\n                    cur = k\n                    d[k] -= 2\n                    f = 1\n                    break\n            if f == 0 and flag != 1:\n                print(-1)\n                flag = 1\n                break\n            mm[i][j] = cur\n            mm[i][-1 - j] = cur\n    if flag != 1:\n        if m % 2 == 1:\n            for i in range(n):\n                for j in d:\n                    if d[j] >= 1:\n                        cur = j\n                        d[j] -= 1\n                        break\n                mm[i][m // 2] = cur\n        for i in mm:\n            for j in i:\n                print(j, end=' ')\n            print()", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().rstrip().split())\n    mat = []\n    for i in range(n):\n        a = list(map(int, input().rstrip().split()))\n        if not i & 1:\n            mat.append(a)\n        else:\n            mat.append(a)\n    d = defaultdict(lambda : 0)\n    for i in mat:\n        for j in i:\n            d[j] += 1\n    mm = [[0] * m for i in range(n)]\n    flag = 0\n    for i in range(n):\n        for j in range(0, m // 2):\n            f = 0\n            for k in d:\n                if d[k] >= 2:\n                    cur = k\n                    d[k] -= 2\n                    f = 1\n                    break\n            if f == 0 and flag != 1:\n                print(-1)\n                flag = 1\n                break\n            mm[i][j] = cur\n            mm[i][-1 - j] = cur\n    if flag != 1:\n        if m % 2 == 1:\n            for i in range(n):\n                for j in d:\n                    if d[j] >= 1:\n                        cur = j\n                        d[j] -= 1\n                        break\n                mm[i][m // 2] = cur\n        for i in mm:\n            for j in i:\n                print(j, end=' ')\n            print()", "from sys import stdin\ninput = stdin.readline\n\ndef answer():\n    d = dict()\n    for i in range(n):\n        for j in range(m):\n            d[a[i][j]] = d.get(a[i][j], 0) + 1\n    ans = [[0 for i in range(m)] for j in range(n)]\n    odds = []\n    (i, j) = (0, 0)\n    for x in d.keys():\n        if m & 1 == 0 and d[x] & 1:\n            print(-1)\n            return\n        count = d[x]\n        while count > 1:\n            if m & 1 and j == m // 2:\n                break\n            ans[i][j] = ans[i][m - j - 1] = x\n            i += 1\n            if i == n:\n                j += 1\n                i = 0\n            count -= 2\n        odds += [x for i in range(count)]\n    if len(odds) > n:\n        print(-1)\n        return\n    if m & 1:\n        for i in range(n):\n            ans[i][m // 2] = odds[i]\n    for x in ans:\n        print(*x)\nfor T in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    answer()", "def answer():\n    d = dict()\n    for i in range(n):\n        for j in range(m):\n            d[a[i][j]] = d.get(a[i][j], 0) + 1\n    ans = [[0 for i in range(m)] for j in range(n)]\n    odds = []\n    (i, j) = (0, 0)\n    for x in d.keys():\n        if m & 1 == 0 and d[x] & 1:\n            print(-1)\n            return\n        count = d[x]\n        while count > 1:\n            if m & 1 and j == m // 2:\n                break\n            ans[i][j] = ans[i][m - j - 1] = x\n            i += 1\n            if i == n:\n                j += 1\n                i = 0\n            count -= 2\n        odds += [x for i in range(count)]\n    if len(odds) > n:\n        print(-1)\n        return\n    if m & 1:\n        for i in range(n):\n            ans[i][m // 2] = odds[i]\n    for x in ans:\n        print(*x)\nfor T in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    answer()", "def answer():\n    d = dict()\n    for i in range(n):\n        for j in range(m):\n            d[a[i][j]] = d.get(a[i][j], 0) + 1\n    ans = [[0 for i in range(m)] for j in range(n)]\n    odds = []\n    (i, j) = (0, 0)\n    for x in d.keys():\n        if m & 1 == 0 and d[x] & 1:\n            print(-1)\n            return\n        count = d[x]\n        while count > 1:\n            if m & 1 and j == m // 2:\n                break\n            ans[i][j] = ans[i][m - j - 1] = x\n            i += 1\n            if i == n:\n                j += 1\n                i = 0\n            count -= 2\n        odds += [x for i in range(count)]\n    if len(odds) > n:\n        print(-1)\n        return\n    if m & 1:\n        for i in range(n):\n            ans[i][m // 2] = odds[i]\n    for x in ans:\n        print(*x)\nfor T in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    answer()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        li = list(map(int, input().split()))\n        matrix.append(li)\n    d = {}\n    l = []\n    for i in range(n):\n        for j in range(m):\n            if d.get(matrix[i][j]) == None:\n                d[matrix[i][j]] = 1\n                l.append(matrix[i][j])\n            else:\n                d[matrix[i][j]] += 1\n    (odd, even) = (0, 0)\n    for (x, y) in d.items():\n        if y % 2:\n            odd += 1\n        else:\n            even += 1\n    if m % 2 == 0:\n        if odd > 0:\n            print(-1)\n        else:\n            index = 0\n            for i in range(n):\n                for j in range(m // 2):\n                    if d[l[index]] == 0:\n                        index += 1\n                    (matrix[i][j], matrix[i][m - j - 1]) = (l[index], l[index])\n                    d[l[index]] -= 2\n            for i in range(n):\n                for j in range(m):\n                    print(matrix[i][j], end=' ')\n                print()\n    elif odd > n:\n        print(-1)\n    else:\n        mid = m // 2\n        li = []\n        index = 0\n        for i in range(n):\n            for j in range(m // 2):\n                if d[l[index]] == 0:\n                    index += 1\n                while d[l[index]] == 1:\n                    li.append(l[index])\n                    index += 1\n                (matrix[i][j], matrix[i][m - j - 1]) = (l[index], l[index])\n                d[l[index]] -= 2\n        for i in range(n):\n            if index < len(l) and d[l[index]] == 0:\n                index += 1\n            if index < len(l):\n                matrix[i][mid] = l[index]\n                d[l[index]] -= 1\n            else:\n                matrix[i][mid] = li.pop()\n        for i in range(n):\n            for j in range(m):\n                print(matrix[i][j], end=' ')\n            print()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        li = list(map(int, input().split()))\n        matrix.append(li)\n    d = {}\n    l = []\n    for i in range(n):\n        for j in range(m):\n            if d.get(matrix[i][j]) == None:\n                d[matrix[i][j]] = 1\n                l.append(matrix[i][j])\n            else:\n                d[matrix[i][j]] += 1\n    (odd, even) = (0, 0)\n    for (x, y) in d.items():\n        if y % 2:\n            odd += 1\n        else:\n            even += 1\n    if m % 2 == 0:\n        if odd > 0:\n            print(-1)\n        else:\n            index = 0\n            for i in range(n):\n                for j in range(m // 2):\n                    if d[l[index]] == 0:\n                        index += 1\n                    (matrix[i][j], matrix[i][m - j - 1]) = (l[index], l[index])\n                    d[l[index]] -= 2\n            for i in range(n):\n                for j in range(m):\n                    print(matrix[i][j], end=' ')\n                print()\n    elif odd > n:\n        print(-1)\n    else:\n        mid = m // 2\n        li = []\n        index = 0\n        for i in range(n):\n            for j in range(m // 2):\n                if d[l[index]] == 0:\n                    index += 1\n                while d[l[index]] == 1:\n                    li.append(l[index])\n                    index += 1\n                (matrix[i][j], matrix[i][m - j - 1]) = (l[index], l[index])\n                d[l[index]] -= 2\n        for i in range(n):\n            if index < len(l):\n                if d[l[index]] == 0:\n                    index += 1\n                if index < len(l):\n                    matrix[i][mid] = l[index]\n                    d[l[index]] -= 1\n                else:\n                    matrix[i][mid] = li.pop()\n            else:\n                matrix[i][mid] = li.pop()\n        for i in range(n):\n            for j in range(m):\n                print(matrix[i][j], end=' ')\n            print()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        li = list(map(int, input().split()))\n        matrix.append(li)\n    d = {}\n    l = []\n    for i in range(n):\n        for j in range(m):\n            if d.get(matrix[i][j]) == None:\n                d[matrix[i][j]] = 1\n                l.append(matrix[i][j])\n            else:\n                d[matrix[i][j]] += 1\n    (odd, even) = (0, 0)\n    for (x, y) in d.items():\n        if y % 2:\n            odd += 1\n        else:\n            even += 1\n    if m % 2 == 0:\n        if odd > 0:\n            print(-1)\n        else:\n            index = 0\n            for i in range(n):\n                for j in range(m // 2):\n                    if d[l[index]] == 0:\n                        index += 1\n                    (matrix[i][j], matrix[i][m - j - 1]) = (l[index], l[index])\n                    d[l[index]] -= 2\n            for i in range(n):\n                for j in range(m):\n                    print(matrix[i][j], end=' ')\n                print()\n    elif odd > n:\n        print(-1)\n    else:\n        mid = m // 2\n        li = []\n        index = 0\n        for i in range(n):\n            for j in range(m // 2):\n                if index < len(l) and d[l[index]] == 0:\n                    index += 1\n                while d[l[index]] == 1:\n                    li.append(l[index])\n                    index += 1\n                (matrix[i][j], matrix[i][m - j - 1]) = (l[index], l[index])\n                d[l[index]] -= 2\n        for i in range(n):\n            if index < len(l) and d[l[index]] == 0:\n                index += 1\n            if index < len(l):\n                matrix[i][mid] = l[index]\n                d[l[index]] -= 1\n            else:\n                matrix[i][mid] = li.pop()\n        for i in range(n):\n            for j in range(m):\n                print(matrix[i][j], end=' ')\n            print()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        li = list(map(int, input().split()))\n        matrix.append(li)\n    d = {}\n    l = []\n    for i in range(n):\n        for j in range(m):\n            if d.get(matrix[i][j]) == None:\n                d[matrix[i][j]] = 1\n                l.append(matrix[i][j])\n            else:\n                d[matrix[i][j]] += 1\n    (odd, even) = (0, 0)\n    for (x, y) in d.items():\n        if y % 2:\n            odd += 1\n        else:\n            even += 1\n    if m % 2 == 0:\n        if odd > 0:\n            print(-1)\n        else:\n            index = 0\n            for i in range(n):\n                for j in range(m // 2):\n                    if d[l[index]] == 0:\n                        index += 1\n                    (matrix[i][j], matrix[i][m - j - 1]) = (l[index], l[index])\n                    d[l[index]] -= 2\n            for i in range(n):\n                for j in range(m):\n                    print(matrix[i][j], end=' ')\n                print()\n    elif odd > n:\n        print(-1)\n    else:\n        mid = m // 2\n        li = []\n        index = 0\n        for i in range(n):\n            for j in range(m // 2):\n                if index < len(l) and d[l[index]] == 0:\n                    index += 1\n                while index < len(l) and d[l[index]] == 1:\n                    li.append(l[index])\n                    index += 1\n                (matrix[i][j], matrix[i][m - j - 1]) = (l[index], l[index])\n                d[l[index]] -= 2\n        for i in range(n):\n            if index < len(l):\n                if d[l[index]] == 0:\n                    index += 1\n                if index < len(l):\n                    matrix[i][mid] = l[index]\n                    d[l[index]] -= 1\n                else:\n                    matrix[i][mid] = li.pop()\n            else:\n                matrix[i][mid] = li.pop()\n        for i in range(n):\n            for j in range(m):\n                print(matrix[i][j], end=' ')\n            print()", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    arr = []\n    for i in range(r):\n        arr.append(list(map(int, input().split())))\n    h = {}\n    for i in range(r):\n        for j in range(c):\n            if h.get(arr[i][j]) != None:\n                h[arr[i][j]] += 1\n            else:\n                h[arr[i][j]] = 1\n    temp = True\n    if c % 2 == 0:\n        k = []\n        for i in h.keys():\n            k.append(i)\n            if h[i] % 2 != 0:\n                temp = False\n                break\n        if temp == False:\n            print(-1)\n        else:\n            q = 0\n            for i in range(r):\n                for j in range(c // 2):\n                    if h[k[q]] == 0:\n                        q += 1\n                    arr[i][j] = k[q]\n                    arr[i][c - j - 1] = k[q]\n                    h[k[q]] -= 2\n            for i in range(r):\n                for j in range(c):\n                    print(arr[i][j], end=' ')\n                print()\n    else:\n        odd = 0\n        k = []\n        for i in h.keys():\n            k.append(i)\n            if h[i] % 2:\n                odd += 1\n        if odd > r:\n            print(-1)\n        else:\n            q = 0\n            v = []\n            for i in range(r):\n                for j in range(c // 2):\n                    if h[k[q]] == 0:\n                        q += 1\n                    while h[k[q]] == 1:\n                        v.append(k[q])\n                        q += 1\n                    arr[i][j] = k[q]\n                    arr[i][c - j - 1] = k[q]\n                    h[k[q]] -= 2\n            for i in range(r):\n                if q < len(k) and h[k[q]] == 0:\n                    q += 1\n                if q < len(k):\n                    arr[i][c // 2] = k[q]\n                    h[k[q]] -= 1\n                else:\n                    arr[i][c // 2] = v[-1]\n                    v.pop()\n            for i in range(r):\n                for j in range(c):\n                    print(arr[i][j], end=' ')\n                print()", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    arr = []\n    for i in range(r):\n        arr.append(list(map(int, input().split())))\n    h = {}\n    for i in range(r):\n        for j in range(c):\n            if h.get(arr[i][j]) != None:\n                h[arr[i][j]] += 1\n            else:\n                h[arr[i][j]] = 1\n    temp = True\n    if c % 2 == 0:\n        k = []\n        for i in h.keys():\n            k.append(i)\n            if h[i] % 2 != 0:\n                temp = False\n                break\n        if temp == False:\n            print(-1)\n        else:\n            q = 0\n            for i in range(r):\n                for j in range(c // 2):\n                    if h[k[q]] == 0:\n                        q += 1\n                    arr[i][j] = k[q]\n                    arr[i][c - j - 1] = k[q]\n                    h[k[q]] -= 2\n            for i in range(r):\n                for j in range(c):\n                    print(arr[i][j], end=' ')\n                print()\n    else:\n        odd = 0\n        k = []\n        for i in h.keys():\n            k.append(i)\n            if h[i] % 2:\n                odd += 1\n        if odd > r:\n            print(-1)\n        else:\n            q = 0\n            v = []\n            for i in range(r):\n                for j in range(c // 2):\n                    if h[k[q]] == 0:\n                        q += 1\n                    while h[k[q]] == 1:\n                        v.append(k[q])\n                        q += 1\n                    arr[i][j] = k[q]\n                    arr[i][c - j - 1] = k[q]\n                    h[k[q]] -= 2\n            for i in range(r):\n                if q < len(k) and h[k[q]] == 0:\n                    q += 1\n                if q < len(k):\n                    arr[i][c // 2] = k[q]\n                    h[k[q]] -= 1\n                else:\n                    arr[i][c // 2] = v[-1]\n                    v.pop()\n            for i in range(r):\n                for j in range(c):\n                    print(arr[i][j], end=' ')\n                print()", "t = int(input())\nfor _ in range(t):\n    (r, c) = map(int, input().split())\n    arr = []\n    for i in range(r):\n        arr.append(list(map(int, input().split())))\n    h = {}\n    for i in range(r):\n        for j in range(c):\n            if h.get(arr[i][j]) != None:\n                h[arr[i][j]] += 1\n            else:\n                h[arr[i][j]] = 1\n    temp = True\n    if c % 2 == 0:\n        k = []\n        for i in h.keys():\n            k.append(i)\n            if h[i] % 2 != 0:\n                temp = False\n                break\n        if temp == False:\n            print(-1)\n        else:\n            q = 0\n            for i in range(r):\n                for j in range(c // 2):\n                    if q < len(k) and h[k[q]] == 0:\n                        q += 1\n                    arr[i][j] = k[q]\n                    arr[i][c - j - 1] = k[q]\n                    h[k[q]] -= 2\n            for i in range(r):\n                for j in range(c):\n                    print(arr[i][j], end=' ')\n                print()\n    else:\n        odd = 0\n        k = []\n        for i in h.keys():\n            k.append(i)\n            if h[i] % 2:\n                odd += 1\n        if odd > r:\n            print(-1)\n        else:\n            q = 0\n            v = []\n            for i in range(r):\n                for j in range(c // 2):\n                    if h[k[q]] == 0:\n                        q += 1\n                    while h[k[q]] == 1:\n                        v.append(k[q])\n                        q += 1\n                    arr[i][j] = k[q]\n                    arr[i][c - j - 1] = k[q]\n                    h[k[q]] -= 2\n            for i in range(r):\n                if q < len(k) and h[k[q]] == 0:\n                    q += 1\n                if q < len(k):\n                    arr[i][c // 2] = k[q]\n                    h[k[q]] -= 1\n                else:\n                    arr[i][c // 2] = v[-1]\n                    v.pop()\n            for i in range(r):\n                for j in range(c):\n                    print(arr[i][j], end=' ')\n                print()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    h = {}\n    for i in range(n):\n        for i in map(int, input().split()):\n            h[i] = h.get(i, 0) + 1\n    if m % 2 == 0:\n        ok = True\n        for i in h:\n            if h[i] % 2:\n                ok = False\n                print(-1)\n                break\n        if ok:\n            rows = 0\n            while rows != n:\n                cnt = 0\n                r = []\n                for i in h:\n                    while h[i] != 0 and cnt != m:\n                        r.append(i)\n                        h[i] -= 2\n                        cnt += 2\n                rv = r[::-1]\n                row = r + rv\n                rows += 1\n                print(*row)\n    else:\n        ok = True\n        c = 0\n        for i in h:\n            if h[i] % 2:\n                c += 1\n            if c > n:\n                ok = False\n                print(-1)\n                break\n        if ok:\n            rows = 0\n            while rows != n:\n                cnt = 0\n                r = []\n                mid = []\n                for i in h:\n                    while cnt != m // 2 and h[i] != 0 and (h[i] != 1):\n                        r.append(i)\n                        h[i] -= 2\n                        cnt += 1\n                k = True\n                for i in h:\n                    if h[i] % 2:\n                        mid.append(i)\n                        k = False\n                        h[i] -= 1\n                        break\n                if k:\n                    for i in h:\n                        if h[i] != 0:\n                            mid.append(i)\n                            h[i] -= 1\n                            break\n                rows += 1\n                rv = r[::-1]\n                row = r + mid + rv\n                print(*row)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    l = []\n    s = set()\n    len_s = 0\n    len_l = 0\n    for i in range(n):\n        d = list(map(int, input().split()))\n        for j in range(m):\n            if d[j] not in s:\n                s.add(d[j])\n                len_s += 1\n            else:\n                s.remove(d[j])\n                l.append(d[j])\n                len_s -= 1\n                len_l += 1\n    n1 = (n - len_s) % 2\n    if m % 2 == 0 and len_s != 0 or len_s > n or (len_s != 0 and n1 == 1):\n        print(-1)\n    else:\n        s = list(s)\n        if len_s != 0 or m % 2 == 1:\n            n1 = (n - len_s) // 2\n            l1 = l[:n1]\n            l = l[n1:]\n            s = s + l1 * 2\n        a = 0\n        b = 0\n        if m % 2 == 0:\n            for i in range(n):\n                rs = str(l[a]) + ' ' + str(l[a])\n                a += 1\n                for j in range(1, m // 2):\n                    rs = str(l[a]) + ' ' + rs + ' ' + str(l[a])\n                    a += 1\n                print(rs)\n        else:\n            for i in range(n):\n                rs = str(s[b])\n                b += 1\n                for j in range(m // 2):\n                    rs = str(l[a]) + ' ' + rs + ' ' + str(l[a])\n                    a += 1\n                print(rs)", "from collections import defaultdict\n\ndef fn(m):\n    d = defaultdict(lambda : 0)\n    for i in m:\n        for j in i:\n            d[j] += 1\n    fm = []\n    mm = [[0] * len(m[0]) for i in range(len(m))]\n    for i in range(len(m)):\n        for j in range(0, len(m[0]) // 2):\n            f = 0\n            for k in d:\n                if d[k] >= 2:\n                    cur = k\n                    d[k] -= 2\n                    f = 1\n                    break\n            if f == 0:\n                print(-1)\n                return\n            mm[i][j] = cur\n            mm[i][-1 - j] = cur\n    if len(m[0]) % 2 == 1:\n        for i in range(len(m)):\n            for j in d:\n                if d[j] >= 1:\n                    cur = j\n                    d[j] -= 1\n                    break\n            mm[i][len(m[0]) // 2] = cur\n    for i in mm:\n        for j in i:\n            print(j, end=' ')\n        print()\nt = int(input())\nfor x in range(t):\n    (n, m) = map(int, input().rstrip().split())\n    cm = []\n    for i in range(n):\n        a = list(map(int, input().rstrip().split()))\n        if i % 2 == 0:\n            cm.append(a)\n        else:\n            cm.append(a)\n    fn(cm)", "from collections import defaultdict\n\ndef fn(m):\n    d = defaultdict(lambda : 0)\n    for i in m:\n        for j in i:\n            d[j] += 1\n    fm = []\n    mm = [[0] * len(m[0]) for i in range(len(m))]\n    for i in range(len(m)):\n        for j in range(0, len(m[0]) // 2):\n            f = 0\n            for k in d:\n                if d[k] >= 2:\n                    cur = k\n                    d[k] -= 2\n                    f = 1\n                    break\n            if f == 0:\n                print(-1)\n                return\n            mm[i][j] = cur\n            mm[i][-1 - j] = cur\n    if len(m[0]) % 2 == 1:\n        for i in range(len(m)):\n            for j in d:\n                if d[j] >= 1:\n                    cur = j\n                    d[j] -= 1\n                    break\n            mm[i][len(m[0]) // 2] = cur\n    for i in mm:\n        for j in i:\n            print(j, end=' ')\n        print()\nt = int(input())\nfor x in range(t):\n    (n, m) = map(int, input().rstrip().split())\n    cm = []\n    for i in range(n):\n        a = list(map(int, input().rstrip().split()))\n        if i % 2 == 0:\n            cm.append(a)\n        else:\n            cm.append(a)\n    fn(cm)", "from collections import Counter, deque\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix += map(int, input().split())\n    occurrences = Counter(matrix)\n    odd = []\n    even = []\n    row = deque()\n    for (num, occ) in occurrences.items():\n        if occ % 2:\n            odd.append(num)\n        else:\n            even.append(num)\n    if m % 2 and len(odd) > n or (not m % 2 and len(odd)):\n        print(-1)\n    else:\n        for _ in range(n):\n            if m % 2:\n                if odd:\n                    i = odd[0]\n                    odd.remove(i)\n                    if occurrences[i] == 1:\n                        del occurrences[i]\n                    else:\n                        occurrences[i] -= 1\n                        even.append(i)\n                else:\n                    i = even[0]\n                    odd.append(i)\n                    even.remove(i)\n                    occurrences[i] -= 1\n                row.append(i)\n            for _ in range(m // 2):\n                if even:\n                    i = even[0]\n                    if occurrences[i] == 2:\n                        even.remove(i)\n                        del occurrences[i]\n                    else:\n                        occurrences[i] -= 2\n                else:\n                    j = 0\n                    while occurrences[odd[j]] < 2:\n                        j += 1\n                    i = odd[j]\n                    occurrences[i] -= 2\n                row.append(i)\n                row.appendleft(i)\n            print(*row)\n            row.clear()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    dic = {}\n    for i in range(n):\n        t = list(map(int, input().split()))\n        for j in t:\n            if j in dic:\n                dic[j] += 1\n            else:\n                dic[j] = 1\n    odd_cnt = {}\n    key = list(dic.keys())\n    for i in key:\n        if dic[i] % 2 == 1:\n            odd_cnt[i] = dic[i]\n            t = dic.pop(i)\n    if m % 2 == 0 and odd_cnt:\n        print(-1)\n        continue\n    elif len(odd_cnt) > n:\n        print(-1)\n        continue\n    mat = []\n    k = 0\n    num = list(dic.keys())\n    mat = [[-1 for i in range(m)] for j in range(n)]\n    if m % 2 == 1:\n        for i in range(n):\n            t = mat[i]\n            if not odd_cnt:\n                t[m // 2] = num[k]\n                odd_cnt[num[k]] = dic[num[k]] - 1\n                temp = dic.pop(num[k])\n                k += 1\n            else:\n                temp = list(odd_cnt.keys())[0]\n                t[m // 2] = temp\n                odd_cnt[temp] -= 1\n                if odd_cnt[temp] != 0:\n                    dic[temp] = odd_cnt[temp]\n                    num.append(temp)\n                temp = odd_cnt.pop(temp)\n    k = 0\n    num = list(dic.keys())\n    for i in range(n):\n        t = mat[i]\n        for j in range(m // 2):\n            dic[num[k]] -= 2\n            (t[j], t[m - j - 1]) = (num[k], num[k])\n            if dic[num[k]] == 0:\n                temp = dic.pop(num[k])\n                k += 1\n    for i in range(n):\n        for j in range(m):\n            print(mat[i][j], end=' ')\n        print('')", "from collections import deque\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    (arr, data, ctr) = (list(), dict(), 0)\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n        for j in range(m):\n            if arr[i][j] in data:\n                data[arr[i][j]] += 1\n            else:\n                data[arr[i][j]] = 1\n    for ele in data:\n        if data[ele] % 2 != 0:\n            ctr += 1\n    if m % 2 == 0:\n        if ctr:\n            print(-1)\n            continue\n    elif ctr > n:\n        print(-1)\n        continue\n    (odd, even) = (deque([]), deque([]))\n    for ele in data:\n        if data[ele] % 2 == 0:\n            even.append(ele)\n        else:\n            odd.append(ele)\n    for i in range(n):\n        ans = deque([])\n        if m % 2 != 0:\n            if odd:\n                ans.append(odd[0])\n                data[odd[0]] -= 1\n                pop = odd.popleft()\n                if data[pop] > 0:\n                    even.append(pop)\n            else:\n                ans.append(even[0])\n                data[even[0]] -= 1\n                pop = even.popleft()\n                if data[pop] > 0:\n                    odd.append(pop)\n        for j in range(m // 2):\n            if even:\n                pop = even[0]\n                ans.appendleft(pop)\n                ans.append(pop)\n                data[pop] -= 2\n                if data[pop] == 0:\n                    even.popleft()\n            else:\n                pop = odd[0]\n                ans.appendleft(pop)\n                ans.append(pop)\n                data[pop] -= 2\n        for i in ans:\n            print(i, end=' ')\n        print()", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    l = []\n    n = []\n    for j in range(a):\n        o = list(map(int, input().split()))\n        l.append(o)\n    f = {}\n    for j in range(a):\n        for k in range(b):\n            if l[j][k] in f:\n                f[l[j][k]] += 1\n            else:\n                f[l[j][k]] = 1\n                n.append(l[j][k])\n    if b % 2 == 0:\n        p = 0\n        for e in f:\n            if f[e] % 2 == 1:\n                p = 1\n                break\n        if p == 1:\n            print(-1)\n        else:\n            s = 0\n            for j in range(a):\n                for k in range(b // 2):\n                    if f[n[s]] == 0:\n                        s += 1\n                    (l[j][k], l[j][b - k - 1]) = (n[s], n[s])\n                    f[n[s]] -= 2\n            for j in l:\n                for k in j:\n                    print(k, end=' ')\n                print('')\n    else:\n        c = 0\n        for v in f:\n            c += f[v] // 2 * 2\n        if c < a * b - a:\n            print(-1)\n        else:\n            s = 0\n            for j in range(a):\n                for k in range(b // 2):\n                    while f[n[s]] <= 1:\n                        s += 1\n                    (l[j][k], l[j][b - k - 1]) = (n[s], n[s])\n                    f[n[s]] -= 2\n            (j, k) = (0, b // 2)\n            for s in f:\n                while f[s] > 0:\n                    l[j][k] = s\n                    j += 1\n                    f[s] -= 1\n            for j in l:\n                for k in j:\n                    print(k, end=' ')\n                print('')", "from collections import defaultdict\nt = int(input())\nfor test in range(t):\n    (m, n) = map(int, input().split())\n    a = []\n    for j in range(m):\n        a.append(list(map(int, input().split())))\n    count = defaultdict(int)\n    for i in range(m):\n        for j in range(n):\n            count[a[i][j]] += 1\n    (A, B) = ([], [])\n    (P, Q) = ([], [])\n    for k in count.keys():\n        if count[k] % 2 == 0:\n            A.append(k)\n        else:\n            B.append(k)\n    odd = len(B)\n    if n % 2 == 0 and odd != 0 or (n % 2 == 1 and (m < odd or (m - odd) % 2 == 1)):\n        print(-1)\n    else:\n        ans = []\n        for j in A:\n            P += [j] * count[j]\n        for j in B:\n            Q.append(j)\n            P += [j] * (count[j] - 1)\n        if n % 2 == 1:\n            while len(Q) != m:\n                Q += P[:2]\n                P = P[2:]\n        if n % 2 == 0:\n            for i in range(m):\n                X = []\n                for j in range(n // 2):\n                    X.append(P[0])\n                    P = P[2:]\n                X += X[::-1]\n                x = ' '.join(map(str, X))\n                ans += [x]\n        else:\n            for i in range(m):\n                X = []\n                for j in range(n // 2):\n                    X.append(P[0])\n                    P = P[2:]\n                X += [Q[i]] + X[::-1]\n                x = ' '.join(map(str, X))\n                ans += [x]\n        for i in ans:\n            print(i)", "from collections import deque\n\ndef buildMatrix(matrix, R, C, unique: list, double: deque):\n    for i in range(R):\n        n_row = []\n        for _ in range(C // 2):\n            p = len(n_row) // 2\n            n_row[p:p] = [double.popleft()] * 2\n        if C % 2 == 1:\n            if not unique:\n                unique.extend([double.pop()] * 2)\n            p = len(n_row) // 2\n            n_row[p:p] = [unique.pop(0)]\n        matrix[i] = n_row\n    return matrix\n\ndef solve(matrix: list) -> list:\n    R = len(matrix)\n    C = len(matrix[0])\n    unique = set()\n    double = deque()\n    for r in range(R):\n        for c in range(C):\n            if matrix[r][c] in unique:\n                unique.remove(matrix[r][c])\n                double.append(matrix[r][c])\n            else:\n                unique.add(matrix[r][c])\n    if C % 2 == 0:\n        if unique:\n            raise Exception()\n    return buildMatrix(matrix, R, C, list(unique), double)\nans = []\nfor _ in range(int(input())):\n    try:\n        (N, M) = map(int, input().split())\n        matrix = []\n        needProcessing = False\n        for _ in range(N):\n            Ms = list(map(int, input().split()))\n            matrix.append(Ms)\n            if not needProcessing and Ms != reversed(Ms):\n                needProcessing = True\n        if needProcessing:\n            matrix = solve(matrix)\n        for r in matrix:\n            ans.append(' '.join(map(str, r)))\n    except:\n        ans.append('-1')\nprint(*ans, sep='\\n')", "T = int(input())\nfor _ in range(T):\n    (n, m) = list(map(int, input().split()))\n    A = []\n    hashmap = {}\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        A.append(temp)\n        for j in temp:\n            if j in hashmap:\n                hashmap[j] += 1\n            else:\n                hashmap[j] = 1\n    uniq = 0\n    u = []\n    for i in hashmap:\n        if hashmap[i] % 2 != 0:\n            uniq += 1\n            u.append(i)\n            hashmap[i] -= 1\n    k = m % 2\n    no_of_uni = k * n\n    if no_of_uni < uniq or abs(no_of_uni - uniq) % 2 != 0:\n        print(-1)\n        continue\n    mid = m // 2\n    val = m // 2\n    if m % 2 == 0:\n        mid = -1\n        val = m // 2 + 1\n    t = 0\n    for key in hashmap:\n        while hashmap[key]:\n            if len(u) == no_of_uni:\n                break\n            u.append(key)\n            hashmap[key] -= 1\n        if len(u) == no_of_uni:\n            break\n    (i, j) = (0, 0)\n    for key in hashmap:\n        while hashmap[key]:\n            A[i][j] = key\n            A[i][m - j - 1] = key\n            j += 1\n            if j == m // 2:\n                j = 0\n                i += 1\n            hashmap[key] -= 2\n    if mid != -1:\n        for i in range(n):\n            A[i][mid] = u[t]\n            t += 1\n    for i in A:\n        for j in range(m):\n            if j == m - 1:\n                print(i[j])\n            else:\n                print(i[j], end=' ')", "for T in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    arr = []\n    flag = False\n    for i in range(n):\n        lis = input()\n        if lis != lis[::-1]:\n            flag = True\n        arr.append(list(lis.split()))\n    if flag == False:\n        for i in range(n):\n            print(' '.join(arr[i]))\n        continue\n    d = []\n    s = set()\n    count1 = 0\n    count2 = 0\n    for i in range(n):\n        for j in range(m):\n            if not arr[i][j] in s:\n                s.add(arr[i][j])\n            else:\n                d.append(arr[i][j])\n                s.remove(arr[i][j])\n                count2 += 2\n    s = list(s)\n    count1 = len(s)\n    if m % 2 == 0 and count1 > 0 or (m % 2 == 1 and n - count1 < 0):\n        print(-1)\n    elif m % 2 == 0:\n        k = 0\n        for i in range(n):\n            ans = ''\n            for j in range(m // 2):\n                if ans == '':\n                    ans = d[k] + ' ' + d[k]\n                else:\n                    ans = d[k] + ' ' + ans + ' ' + d[k]\n                k += 1\n            print(ans)\n    else:\n        k = 0\n        if n - count1 > 0:\n            diff = (n - count1) // 2\n            k += diff\n            s.extend(d[:k] + d[:k])\n        for i in range(n):\n            p = s.pop()\n            for j in range(m // 2):\n                p = d[k] + ' ' + p + ' ' + d[k]\n                k += 1\n            print(p)", "for T in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    arr = []\n    flag = False\n    for i in range(n):\n        lis = input()\n        if lis != lis[::-1]:\n            flag = True\n        arr.append(list(lis.split()))\n    if flag == False:\n        for i in range(n):\n            print(' '.join(arr[i]))\n        continue\n    d = []\n    s = set()\n    count1 = 0\n    count2 = 0\n    for i in range(n):\n        for j in range(m):\n            if not arr[i][j] in s:\n                s.add(arr[i][j])\n            else:\n                d.append(arr[i][j])\n                s.remove(arr[i][j])\n                count2 += 2\n    s = list(s)\n    count1 = len(s)\n    if m % 2 == 0 and count1 > 0 or (m % 2 == 1 and (n - count1 < 0 or (n - count1) % 2 != 0)):\n        print(-1)\n    elif m % 2 == 0:\n        k = 0\n        for i in range(n):\n            ans = ''\n            for j in range(m // 2):\n                if ans == '':\n                    ans = d[k] + ' ' + d[k]\n                else:\n                    ans = d[k] + ' ' + ans + ' ' + d[k]\n                k += 1\n            print(ans)\n    else:\n        k = 0\n        if n - count1 > 0:\n            diff = (n - count1) // 2\n            k += diff\n            s.extend(d[:k] + d[:k])\n        for i in range(n):\n            p = s.pop()\n            for j in range(m // 2):\n                p = d[k] + ' ' + p + ' ' + d[k]\n                k += 1\n            print(p)", "for T in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    arr = []\n    flag = False\n    for i in range(n):\n        lis = input()\n        if lis != lis[::-1]:\n            flag = True\n        arr.append(list(lis.split()))\n    if flag == False:\n        for i in range(n):\n            print(' '.join(arr[i]))\n        continue\n    d = []\n    s = set()\n    count1 = 0\n    count2 = 0\n    for i in range(n):\n        for j in range(m):\n            if not arr[i][j] in s:\n                s.add(arr[i][j])\n            else:\n                d.append(arr[i][j])\n                s.remove(arr[i][j])\n                count2 += 2\n    s = list(s)\n    count1 = len(s)\n    if m % 2 == 0 and count1 > 0 or (m % 2 == 1 and (n - count1 < 0 or (n - count1) % 2 != 0)):\n        print(-1)\n    elif m % 2 == 0:\n        k = 0\n        for i in range(n):\n            ans = ''\n            for j in range(m // 2):\n                if ans == '':\n                    ans = d[k] + ' ' + d[k]\n                else:\n                    ans = d[k] + ' ' + ans + ' ' + d[k]\n                k += 1\n            print(ans)\n    else:\n        k = 0\n        if n - count1 > 0:\n            diff = (n - count1) // 2\n            k += diff\n            s.extend(d[:k] + d[:k])\n        if n != len(s):\n            print(-1)\n            continue\n        for i in range(n):\n            p = s.pop()\n            for j in range(m // 2):\n                p = d[k] + ' ' + p + ' ' + d[k]\n                k += 1\n            print(p)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split(' '))\n    a = []\n    for i in range(n):\n        ai = [int(z) for z in input().split()]\n        a.extend(ai)\n    b = Counter(a)\n    (m_even, impossible, odds) = (False, False, 0)\n    evenvalues = []\n    if m % 2 == 0:\n        m_even = True\n    else:\n        oddvalues = []\n    for k in b:\n        if b[k] % 2 == 1:\n            if m_even:\n                impossible = True\n                break\n            else:\n                odds += 1\n                if odds > n:\n                    impossible = True\n                    break\n                oddvalues.append(k)\n        x = b[k] // 2\n        la = [k] * x\n        evenvalues.extend(la)\n    if impossible:\n        print('-1')\n    elif m_even:\n        x = m // 2\n        for i in range(n):\n            sp = i * x\n            ep = (i + 1) * x\n            lf = evenvalues[sp:ep]\n            lr = lf[::-1]\n            lf.extend(lr)\n            print(*lf)\n    else:\n        x = m // 2\n        y = n * x\n        middles = evenvalues[y:]\n        oddvalues.extend(middles)\n        oddvalues.extend(middles)\n        for i in range(n):\n            sp = i * x\n            ep = (i + 1) * x\n            lf = evenvalues[sp:ep]\n            lr = lf[::-1]\n            lf.append(oddvalues[i])\n            lf.extend(lr)\n            print(*lf)", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    l = []\n    n = []\n    for j in range(a):\n        o = list(map(int, input().split()))\n        l.append(o)\n    d = {}\n    for j in range(a):\n        for k in range(b):\n            if l[j][k] in d:\n                d[l[j][k]] += 1\n            else:\n                d[l[j][k]] = 1\n                n.append(l[j][k])\n    if b % 2 == 0:\n        p = 0\n        for _ in d:\n            if d[_] % 2 == 1:\n                p = 1\n                break\n        if p == 1:\n            print(-1)\n        else:\n            s = 0\n            for j in range(a):\n                for k in range(b // 2):\n                    if d[n[s]] == 0:\n                        s += 1\n                    (l[j][k], l[j][b - k - 1]) = (n[s], n[s])\n                    d[n[s]] -= 2\n            for j in l:\n                for k in j:\n                    print(k, end=' ')\n                print('')\n    else:\n        c = 0\n        for f in d:\n            c += d[f] // 2 * 2\n        if c < a * b - a:\n            print(-1)\n        else:\n            s = 0\n            for j in range(a):\n                for k in range(b // 2):\n                    while d[n[s]] <= 1:\n                        s += 1\n                    (l[j][k], l[j][b - k - 1]) = (n[s], n[s])\n                    d[n[s]] -= 2\n            (j, k) = (0, b // 2)\n            for s in d:\n                while d[s] > 0:\n                    l[j][k] = s\n                    j += 1\n                    d[s] -= 1\n            for j in l:\n                for k in j:\n                    print(k, end=' ')\n                print('')", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [0] * n\n    for i in range(n):\n        l[i] = list(map(int, input().split()))\n    d = {}\n    ele = []\n    for i in range(n):\n        for j in range(m):\n            if l[i][j] not in d:\n                d[l[i][j]] = 1\n                ele.append(l[i][j])\n            else:\n                d[l[i][j]] += 1\n    if m % 2 == 0:\n        temp = 0\n        for e in d:\n            if d[e] % 2 != 0:\n                temp = 1\n                break\n        if temp == 1:\n            print(-1)\n            continue\n        k = 0\n        for i in range(n):\n            for j in range(m // 2):\n                if d[ele[k]] == 0:\n                    k += 1\n                d[ele[k]] -= 2\n                (l[i][j], l[i][m - 1 - j]) = (ele[k], ele[k])\n    else:\n        c = 0\n        for e in d:\n            c += d[e] // 2 * 2\n        if c < n * m - n:\n            print(-1)\n            continue\n        k = 0\n        for i in range(n):\n            for j in range(m // 2):\n                while d[ele[k]] <= 1:\n                    k += 1\n                d[ele[k]] -= 2\n                (l[i][j], l[i][m - 1 - j]) = (ele[k], ele[k])\n        i = 0\n        j = m // 2\n        for e in d:\n            while d[e] > 0:\n                l[i][j] = e\n                i += 1\n                d[e] -= 1\n    for e in l:\n        print(*e)", "def isvalid(freq):\n    for i in freq:\n        if freq[i] % 2:\n            return 0\n    return 1\n\ndef isvalid1(freq):\n    count = 0\n    for i in freq:\n        if freq[i] % 2:\n            count += 1\n        if count > n:\n            return 0\n    return 1\nt = int(input())\nfor you in range(t):\n    freq = dict()\n    l = input().split()\n    n = int(l[0])\n    m = int(l[1])\n    lfi = []\n    for i in range(n):\n        s = input().split()\n        lfi.append(s)\n    for i in range(n):\n        for j in range(m):\n            if int(lfi[i][j]) in freq:\n                freq[int(lfi[i][j])] += 1\n                continue\n            freq[int(lfi[i][j])] = 1\n    mat = [[0 for i in range(m)] for j in range(n)]\n    if m % 2 == 0:\n        if isvalid(freq) == 0:\n            print(-1)\n            continue\n        lfi = []\n        for i in freq:\n            if freq[i] != 0:\n                lfi.append([i, freq[i]])\n        for j in range(m):\n            for i in range(n):\n                if lfi == []:\n                    break\n                mat[i][j] = lfi[0][0]\n                mat[i][m - 1 - j] = lfi[0][0]\n                lfi[0][1] -= 2\n                if lfi[0][1] == 0:\n                    lfi.pop(0)\n            if lfi == []:\n                break\n        for i in range(n):\n            for j in range(m):\n                print(mat[i][j], end=' ')\n            print()\n    else:\n        if isvalid1(freq) == 0:\n            print(-1)\n            continue\n        lfodd = []\n        lfeven = []\n        for i in freq:\n            if freq[i] != 0:\n                if freq[i] % 2:\n                    lfodd.append(i)\n                    if freq[i] > 1:\n                        lfeven.append([i, freq[i] - 1])\n                else:\n                    lfeven.append([i, freq[i]])\n        for i in range(n - 1, -1, -1):\n            if lfodd == []:\n                break\n            mat[i][(m - 1) // 2] = lfodd[0]\n            lfodd.pop(0)\n        for j in range(m):\n            for i in range(n):\n                if lfeven == []:\n                    break\n                mat[i][j] = lfeven[0][0]\n                mat[i][m - 1 - j] = lfeven[0][0]\n                if j == m - 1 - j:\n                    lfeven[0][1] -= 1\n                else:\n                    lfeven[0][1] -= 2\n                if lfeven[0][1] == 0:\n                    lfeven.pop(0)\n            if lfeven == []:\n                break\n        for i in range(n):\n            for j in range(m):\n                print(mat[i][j], end=' ')\n            print()", "from itertools import *\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l += [int(i) for i in input().split()]\n    l.sort()\n    v = [(int(i), len(list(j))) for (i, j) in groupby(l)]\n    en = []\n    on = []\n    for (i, j) in v:\n        if j % 2 != 0:\n            en += [i] * ((j - 1) // 2)\n            on += [i]\n        else:\n            en += [i] * (j // 2)\n    if m % 2 == 0 and len(on) != 0 or (m % 2 == 1 and len(on) > n):\n        print(-1)\n    elif m % 2 == 0:\n        for i in range(n):\n            g = en[i * (m // 2):(i + 1) * (m // 2)]\n            g = g + g[-1::-1]\n            print(' '.join((str(i) for i in g)))\n    else:\n        if len(on) < n:\n            z = n - len(on)\n            on += en[:z // 2] * 2\n            en = en[z // 2:]\n        for i in range(n):\n            g = en[i * (m // 2):(i + 1) * (m // 2)]\n            g = g + [on[i]] + g[-1::-1]\n            print(' '.join((str(i) for i in g)))", "from collections import Counter\nfor test_case in range(int(input())):\n    (N, M) = map(int, input().split())\n    matrix = []\n    for i in range(N):\n        matrix += list(map(int, input().split()))\n    fre = Counter(matrix)\n    even = {}\n    odd = {}\n    for x in fre:\n        if fre[x] % 2 == 0:\n            even[x] = fre[x]\n        else:\n            odd[x] = fre[x]\n    len_odd = len(odd)\n    if M % 2 == 0:\n        if len_odd != 0:\n            print(-1)\n            continue\n    elif len_odd > N:\n        print(-1)\n        continue\n    matrix = []\n    for j in range(N):\n        matrix.append([-1] * M)\n    ind = 0\n    for item in odd:\n        matrix[ind][M // 2] = item\n        ind += 1\n        value = odd[item] - 1\n        if value > 0:\n            even[item] = value\n    high = M // 2\n    i = j = 0\n    for item in even:\n        for c in range(even[item] // 2):\n            if i == N or M == 1:\n                matrix[ind][M // 2] = matrix[ind + 1][M // 2] = item\n                ind += 2\n                continue\n            matrix[i][j] = matrix[i][M - 1 - j] = item\n            j = j + 1\n            if j == high:\n                j = 0\n                i += 1\n    for item in matrix:\n        print(*item)", "from collections import Counter\nfor test_case in range(int(input())):\n    (N, M) = map(int, input().split())\n    matrix = []\n    for i in range(N):\n        matrix += list(map(int, input().split()))\n    fre = Counter(matrix)\n    even = {x: fre[x] for x in fre if fre[x] % 2 == 0}\n    odd = {x: fre[x] for x in fre if fre[x] % 2 != 0}\n    len_odd = len(odd)\n    if M % 2 == 0:\n        if len_odd != 0:\n            print(-1)\n            continue\n    elif len_odd > N:\n        print(-1)\n        continue\n    matrix = []\n    for j in range(N):\n        matrix.append([-1] * M)\n    ind = 0\n    for item in odd:\n        matrix[ind][M // 2] = item\n        ind += 1\n        value = odd[item] - 1\n        if value > 0:\n            even[item] = value\n    high = M // 2\n    i = j = 0\n    for item in even:\n        for c in range(even[item] // 2):\n            if i == N or M == 1:\n                matrix[ind][M // 2] = matrix[ind + 1][M // 2] = item\n                ind += 2\n                continue\n            matrix[i][j] = matrix[i][M - 1 - j] = item\n            j = j + 1\n            if j == high:\n                j = 0\n                i += 1\n    for item in matrix:\n        print(*item)", "from collections import Counter\nfor test_case in range(int(input())):\n    (N, M) = map(int, input().split())\n    matrix = []\n    for i in range(N):\n        matrix += list(map(int, input().split()))\n    fre = Counter(matrix)\n    even = {}\n    odd = {}\n    for x in fre:\n        if fre[x] % 2 == 0:\n            even[x] = fre[x]\n        else:\n            odd[x] = fre[x]\n    len_odd = len(odd)\n    if M % 2 == 0:\n        if len_odd != 0:\n            print(-1)\n            continue\n    elif len_odd > N:\n        print(-1)\n        continue\n    matrix = []\n    for j in range(N):\n        matrix.append([-1] * M)\n    ind = 0\n    for item in odd:\n        matrix[ind][M // 2] = item\n        ind += 1\n        value = odd[item] - 1\n        if value > 0:\n            even[item] = value\n    high = M // 2\n    i = j = 0\n    for item in even:\n        for c in range(even[item] // 2):\n            if i == N or M == 1:\n                matrix[ind][M // 2] = matrix[ind + 1][M // 2] = item\n                ind += 2\n                continue\n            matrix[i][j] = matrix[i][M - 1 - j] = item\n            j = j + 1\n            if j == high:\n                j = 0\n                i += 1\n    for item in matrix:\n        print(*item)", "from collections import Counter\nfor test_case in range(int(input())):\n    (N, M) = map(int, input().split())\n    matrix = []\n    for i in range(N):\n        matrix += list(map(int, input().split()))\n    fre = Counter(matrix)\n    even = {}\n    odd = {}\n    for x in fre:\n        if fre[x] % 2 == 0:\n            even[x] = fre[x]\n        else:\n            odd[x] = fre[x]\n    len_odd = len(odd)\n    if M % 2 == 0:\n        if len_odd != 0:\n            print(-1)\n            continue\n    elif len_odd > N:\n        print(-1)\n        continue\n    matrix = []\n    for j in range(N):\n        matrix.append([-1] * M)\n    ind = 0\n    for item in odd:\n        matrix[ind][M // 2] = item\n        ind += 1\n        value = odd[item] - 1\n        if value > 0:\n            even[item] = value\n    high = M // 2\n    i = j = 0\n    for item in even:\n        for c in range(even[item] // 2):\n            if i == N or M == 1:\n                matrix[ind][M // 2] = matrix[ind + 1][M // 2] = item\n                ind += 2\n                continue\n            matrix[i][j] = matrix[i][M - 1 - j] = item\n            j = j + 1\n            if j == high:\n                j = 0\n                i += 1\n    for item in matrix:\n        print(*item)", "from collections import Counter\nfor test_case in range(int(input())):\n    (N, M) = map(int, input().split())\n    matrix = []\n    for i in range(N):\n        matrix += list(map(int, input().split()))\n    fre = Counter(matrix)\n    even = {}\n    odd = {}\n    for x in fre:\n        if fre[x] % 2 == 0:\n            even[x] = fre[x]\n        else:\n            odd[x] = fre[x]\n    len_odd = len(odd)\n    if M % 2 == 0:\n        if len_odd != 0:\n            print(-1)\n            continue\n    elif len_odd > N:\n        print(-1)\n        continue\n    matrix = []\n    for j in range(N):\n        matrix.append([-1] * M)\n    ind = 0\n    for item in odd:\n        matrix[ind][M // 2] = item\n        ind += 1\n        value = odd[item] - 1\n        if value > 0:\n            even[item] = value\n    high = M // 2\n    i = j = 0\n    for item in even:\n        for c in range(even[item] // 2):\n            if i == N or M == 1:\n                matrix[ind][M // 2] = matrix[ind + 1][M // 2] = item\n                ind += 2\n                continue\n            matrix[i][j] = matrix[i][M - 1 - j] = item\n            j = j + 1\n            if j == high:\n                j = 0\n                i += 1\n    for item in matrix:\n        print(*item)", "def cal():\n    matrix = [[-1 for _ in range(c)] for _ in range(r)]\n    if c % 2 == 0:\n        for j in m:\n            if m[j] % 2 != 0:\n                return -1\n        (row, col) = (0, 0)\n        for key in m:\n            while m[key] > 0:\n                matrix[row][col] = key\n                matrix[row][c - col - 1] = key\n                m[key] -= 2\n                col += 1\n                if col == c // 2:\n                    row += 1\n                    col = 0\n    else:\n        odd = {}\n        even = {}\n        for i in m:\n            if m[i] % 2 == 0:\n                even[i] = m[i]\n            else:\n                odd[i] = m[i]\n        if len(odd) > r:\n            return -1\n        (row, col) = (0, 0)\n        f = 0\n        for i in odd:\n            matrix[row][c // 2] = i\n            odd[i] -= 1\n            even[i] = odd[i]\n            row += 1\n            if row == r:\n                f = 1\n                break\n        if f == 0:\n            row = len(odd)\n            for key in even:\n                while even[key] > 0 and row < r:\n                    matrix[row][c // 2] = key\n                    even[key] -= 1\n                    row += 1\n                    if row == r:\n                        break\n        (row, col) = (0, 0)\n        for key in even:\n            while even[key] > 0 and row < r:\n                matrix[row][col] = key\n                matrix[row][c - col - 1] = key\n                even[key] -= 2\n                col += 1\n                if col == c // 2:\n                    row += 1\n                    col = 0\n    return matrix\nfor _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    l = []\n    for i in range(r):\n        l.append(list(map(int, input().split())))\n    m = {}\n    for temp in l:\n        for j in temp:\n            if j in m:\n                m[j] += 1\n            else:\n                m[j] = 1\n    t = cal()\n    if t == -1:\n        print(-1)\n    else:\n        for k in t:\n            for h in k:\n                print(h, end=' ')\n        print()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        k = list(map(int, input().split()))\n        a += k\n    freq = {}\n    for i in a:\n        if i not in freq.keys():\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    even_frq = []\n    odd_frq = []\n    for (key, value) in zip(freq.keys(), freq.values()):\n        if value % 2 == 0:\n            even_frq.append(key)\n        else:\n            odd_frq.append(key)\n            if value > 1:\n                even_frq.append(key)\n    not_poss = False\n    ans = [[0 for i in range(m)] for i in range(n)]\n    if len(odd_frq) != 0 and m % 2 == 0:\n        not_poss = True\n    if m % 2 == 1:\n        if len(odd_frq) > n:\n            not_poss = True\n        elif n % 2 != len(odd_frq) % 2:\n            not_poss = True\n    if not not_poss:\n        for k in range(n):\n            j = m - 1\n            i = 0\n            while i < j:\n                value = even_frq.pop()\n                ans[k][i] = value\n                ans[k][j] = value\n                freq[value] -= 2\n                if freq[value] > 1:\n                    even_frq.append(value)\n                j -= 1\n                i += 1\n        if m % 2 == 1:\n            even_frq += odd_frq\n            for i in range(n):\n                value = even_frq.pop()\n                freq[value] -= 1\n                if freq[value] != 0:\n                    even_frq.append(value)\n                ans[i][m // 2] = value\n    if not_poss:\n        print(-1)\n    else:\n        for i in range(n):\n            for j in range(m):\n                print(ans[i][j], end=' ')\n            print()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        k = list(map(int, input().split()))\n        a += k\n    freq = {}\n    for i in a:\n        if i not in freq.keys():\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    even_frq = []\n    odd_frq = []\n    for (key, value) in zip(freq.keys(), freq.values()):\n        if value % 2 == 0:\n            even_frq.append(key)\n        else:\n            odd_frq.append(key)\n            if value > 1:\n                even_frq.append(key)\n    not_poss = False\n    ans = [[0 for i in range(m)] for i in range(n)]\n    if len(odd_frq) != 0 and m % 2 == 0:\n        not_poss = True\n    if m % 2 == 1:\n        if len(odd_frq) > n:\n            not_poss = True\n        elif n % 2 != len(odd_frq) % 2:\n            not_poss = True\n    if not not_poss:\n        for k in range(n):\n            j = m - 1\n            i = 0\n            while i < j:\n                value = even_frq.pop()\n                ans[k][i] = value\n                ans[k][j] = value\n                freq[value] -= 2\n                if freq[value] > 1:\n                    even_frq.append(value)\n                j -= 1\n                i += 1\n        if m % 2 == 1:\n            for i in range(n):\n                if len(even_frq) != 0:\n                    value = even_frq.pop()\n                    freq[value] -= 1\n                    if freq[value] != 0:\n                        even_frq.append(value)\n                elif len(odd_frq) != 0:\n                    value = odd_frq.pop()\n                    freq[value] -= 1\n                    if freq[value] != 0:\n                        odd_frq.append(value)\n                ans[i][m // 2] = value\n    if not_poss:\n        print(-1)\n    else:\n        for i in range(n):\n            for j in range(m):\n                print(ans[i][j], end=' ')\n            print()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        k = list(map(int, input().split()))\n        a += k\n    freq = {}\n    for i in a:\n        if i not in freq.keys():\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    even_frq = []\n    odd_frq = []\n    for (key, value) in zip(freq.keys(), freq.values()):\n        if value % 2 == 0:\n            even_frq.append(key)\n        else:\n            odd_frq.append(key)\n            if value > 1:\n                even_frq.append(key)\n    not_poss = False\n    ans = [[0 for i in range(m)] for i in range(n)]\n    if len(odd_frq) != 0 and m % 2 == 0:\n        not_poss = True\n    if m % 2 == 1:\n        if len(odd_frq) > n:\n            not_poss = True\n        elif n % 2 != len(odd_frq) % 2:\n            not_poss = True\n    if not not_poss:\n        for k in range(n):\n            j = m - 1\n            i = 0\n            while i < j:\n                value = even_frq.pop()\n                ans[k][i] = value\n                ans[k][j] = value\n                freq[value] -= 2\n                if freq[value] > 1:\n                    even_frq.append(value)\n                elif freq[value] == 0 and value in odd_frq:\n                    odd_frq.remove(value)\n                j -= 1\n                i += 1\n        if m % 2 == 1:\n            for i in range(n):\n                if len(even_frq) != 0:\n                    value = even_frq.pop()\n                    freq[value] -= 1\n                    if freq[value] != 0:\n                        even_frq.append(value)\n                elif len(odd_frq) != 0:\n                    value = odd_frq.pop()\n                    freq[value] -= 1\n                    if freq[value] != 0:\n                        odd_frq.append(value)\n                ans[i][m // 2] = value\n    if not_poss:\n        print(-1)\n    else:\n        for i in range(n):\n            for j in range(m):\n                print(ans[i][j], end=' ')\n            print()", "def main():\n    T = int(input())\n    for _ in range(T):\n        (N, M) = map(int, input().split())\n        A = []\n        for _ in range(N):\n            A.append(list(map(int, input().split())))\n        masterMap = {}\n        (evenMap, oddMap) = ({}, {})\n        for i in range(N):\n            for j in range(M):\n                if A[i][j] in masterMap:\n                    masterMap[A[i][j]] += 1\n                else:\n                    masterMap[A[i][j]] = 1\n        for key in masterMap:\n            if masterMap[key] % 2 != 0:\n                oddMap[key] = masterMap[key]\n            else:\n                evenMap[key] = masterMap[key]\n        ansMatrix = [[0 for i in range(M)] for j in range(N)]\n        flag = True\n        cols = M // 2 + (M % 2 != 0)\n        for i in range(N):\n            for j in range(cols):\n                if j != M - j - 1:\n                    if evenMap == {}:\n                        for key in oddMap:\n                            if oddMap[key] > 1:\n                                ansMatrix[i][j] = key\n                                ansMatrix[i][M - j - 1] = key\n                                oddMap[key] -= 2\n                                break\n                    else:\n                        for key in evenMap:\n                            ansMatrix[i][j] = key\n                            ansMatrix[i][M - j - 1] = key\n                            evenMap[key] -= 2\n                            if evenMap[key] == 0:\n                                del evenMap[key]\n                            break\n                elif oddMap == {}:\n                    for key in evenMap:\n                        ansMatrix[i][j] = key\n                        evenMap[key] -= 1\n                        oddMap[key] = evenMap[key]\n                        del evenMap[key]\n                        break\n                else:\n                    for key in oddMap:\n                        ansMatrix[i][j] = key\n                        oddMap[key] -= 1\n                        if oddMap[key] == 0:\n                            del oddMap[key]\n                        elif oddMap[key] % 2 == 0:\n                            evenMap[key] = oddMap[key]\n                            del oddMap[key]\n                        break\n        if oddMap == {} and evenMap == {}:\n            for i in range(N):\n                for j in range(M):\n                    print(ansMatrix[i][j], end=' ')\n                print()\n        else:\n            print(-1)\nmain()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        k = list(map(int, input().split()))\n        a += k\n    freq = {}\n    for i in a:\n        if i not in freq.keys():\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    even_frq = []\n    odd_frq = []\n    for (key, value) in zip(freq.keys(), freq.values()):\n        if value % 2 == 0:\n            even_frq.append(key)\n        else:\n            odd_frq.append(key)\n            if value > 1:\n                even_frq.append(key)\n    not_poss = False\n    ans = [[0 for i in range(m)] for i in range(n)]\n    if len(odd_frq) != 0 and m % 2 == 0:\n        not_poss = True\n    if m % 2 == 1 and len(odd_frq) > n:\n        not_poss = True\n    if not not_poss:\n        for k in range(n):\n            j = m - 1\n            i = 0\n            while i < j:\n                value = even_frq.pop()\n                ans[k][i] = value\n                ans[k][j] = value\n                freq[value] -= 2\n                if freq[value] > 1:\n                    even_frq.append(value)\n                elif freq[value] == 0 and value in odd_frq:\n                    odd_frq.remove(value)\n                j -= 1\n                i += 1\n        if m % 2 == 1:\n            for i in range(n):\n                if len(even_frq) != 0:\n                    value = even_frq.pop()\n                    freq[value] -= 1\n                    if freq[value] != 0:\n                        even_frq.append(value)\n                elif len(odd_frq) != 0:\n                    value = odd_frq.pop()\n                    freq[value] -= 1\n                    if freq[value] != 0:\n                        odd_frq.append(value)\n                ans[i][m // 2] = value\n    if not_poss:\n        print(-1)\n    else:\n        for i in range(n):\n            for j in range(m):\n                print(ans[i][j], end=' ')\n            print()", "t = int(input())\nfor _ in range(t):\n    (row, col) = map(int, input().split())\n    dp = dict()\n    matrix = [[0] * col for _ in range(row)]\n    for i in range(row):\n        temp = list(map(int, input().split()))\n        for j in range(col):\n            dp[temp[j]] = dp.get(temp[j], 0) + 1\n    ones = []\n    pairs = []\n    for (key, val) in dp.items():\n        left = val - val % 2\n        if val % 2:\n            ones.append(key)\n        pairs.extend([key] * left)\n    reqdLen = 2 * (col // 2) * row\n    while len(pairs) > reqdLen:\n        ones.append(pairs.pop())\n    if len(ones) == row * (col % 2):\n        for curRow in range(row):\n            (l, r) = (0, col - 1)\n            onePos = 0\n            while l < r:\n                matrix[curRow][l] = pairs.pop()\n                matrix[curRow][r] = pairs.pop()\n                l += 1\n                r -= 1\n            if l == r:\n                matrix[curRow][l] = ones.pop()\n        for r in range(row):\n            for c in range(col):\n                print(matrix[r][c], end=' ')\n            print()\n    else:\n        print(-1)", "def solve():\n    (n, m) = [eval(x) for x in input().split()]\n    matrix = []\n    series = []\n    for i in range(n):\n        a = [eval(x) for x in input().split()]\n        matrix.append(a)\n        series = series + a\n    even = []\n    odd = []\n    setSeries = set(series)\n    for i in setSeries:\n        if series.count(i) % 2 == 0:\n            even.append(i)\n        elif series.count(i) > 2 and series.count(i) % 2 != 0:\n            odd.append(i)\n            even.append(i)\n        else:\n            odd.append(i)\n    if m % 2 != 0:\n        if len(odd) > n:\n            return [[-1]]\n    elif len(odd) != 0:\n        return [[-1]]\n    if m % 2 == 0:\n        p = 0\n        for i in range(n):\n            for j in range(m // 2):\n                matrix[i][j] = series[p]\n                matrix[i][m - j - 1] = series[p]\n                k = series[p]\n                del series[p]\n                del series[series.index(k)]\n    else:\n        p = 0\n        for i in range(n):\n            for j in range(m // 2):\n                while series[p] not in even or series.count(series[p]) < 2:\n                    p = p + 1\n                matrix[i][j] = series[p]\n                matrix[i][m - j - 1] = series[p]\n                k = series[p]\n                del series[p]\n                del series[series.index(k)]\n        j = 0\n        for i in series:\n            matrix[j][m // 2] = i\n            j = j + 1\n    return matrix\nfor z in range(int(input())):\n    a = solve()\n    n = len(a)\n    m = len(a[0])\n    for i in range(n):\n        print(*a[i])", "def solve():\n    (n, m) = [eval(x) for x in input().split()]\n    matrix = []\n    series = []\n    for i in range(n):\n        a = [eval(x) for x in input().split()]\n        matrix.append(a)\n        series = series + a\n    even = []\n    odd = []\n    setSeries = set(series)\n    for i in setSeries:\n        if series.count(i) % 2 == 0:\n            even.append(i)\n        elif series.count(i) > 2 and series.count(i) % 2 != 0:\n            odd.append(i)\n            even.append(i)\n        else:\n            odd.append(i)\n    if m % 2 != 0:\n        if len(odd) > n:\n            return [[-1]]\n    elif len(odd) != 0:\n        return [[-1]]\n    if m % 2 == 0:\n        p = 0\n        for i in range(n):\n            for j in range(m // 2):\n                matrix[i][j] = series[p]\n                matrix[i][m - j - 1] = series[p]\n                k = series[p]\n                del series[p]\n                del series[series.index(k)]\n    else:\n        p = 0\n        for i in range(n):\n            for j in range(m // 2):\n                while series[p] not in even or series.count(series[p]) < 2:\n                    p = p + 1\n                matrix[i][j] = series[p]\n                matrix[i][m - j - 1] = series[p]\n                k = series[p]\n                del series[p]\n                del series[series.index(k)]\n        j = 0\n        for i in series:\n            matrix[j][m // 2] = i\n            j = j + 1\n    return matrix\nfor z in range(int(input())):\n    a = solve()\n    n = len(a)\n    m = len(a[0])\n    for i in range(n):\n        print(*a[i])", "import collections\nt = int(input())\nfor _ in range(t):\n    (row, col) = map(int, input().rstrip().split())\n    arr = []\n    hashMap = collections.defaultdict(int)\n    for _ in range(row):\n        a = input().rstrip().split()\n        for num in a:\n            hashMap[num] += 1\n        arr.append(a)\n    cntOfOdd = 0\n    arrOfOdds = []\n    for num in hashMap:\n        if hashMap[num] % 2 != 0:\n            cntOfOdd += 1\n            arrOfOdds.append(num)\n            hashMap[num] -= 1\n    if cntOfOdd > 0 and col % 2 == 0 or (col % 2 != 0 and cntOfOdd > row):\n        print('-1')\n    else:\n        for rowPos in range(row):\n            for colPos in range(col // 2):\n                if colPos != col - colPos - 1:\n                    temp = ''\n                    for num in hashMap:\n                        if hashMap[num] != 0:\n                            temp = num\n                            break\n                    num = temp\n                    arr[rowPos][colPos] = num\n                    arr[rowPos][col - colPos - 1] = num\n                    hashMap[num] -= 2\n        for num in hashMap:\n            if hashMap[num] != 0:\n                for i in range(hashMap[num]):\n                    arrOfOdds.append(num)\n        if col % 2 != 0:\n            for rowPos in range(0, row):\n                arr[rowPos][col // 2] = arrOfOdds[rowPos]\n        for posRow in range(row):\n            print(' '.join(arr[posRow]))", "from sys import stdin\n\ndef input():\n    return stdin.readline()\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        arr = list(map(int, input().split()))\n        for j in arr:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n    od = 0\n    odarr = []\n    ele = []\n    for i in d:\n        if d[i] % 2 != 0:\n            od += 1\n            odarr.append(i)\n        ele.append(i)\n    if m % 2 == 0 and od != 0 or (m % 2 == 1 and od > n):\n        print(-1)\n        continue\n    arr = [[0] * m for i in range(n)]\n    f = 0\n    for i in range(n):\n        for j in range(m // 2):\n            c = ele[f]\n            while d[c] <= 1:\n                f = f + 1\n                c = ele[f]\n            arr[i][j] = c\n            arr[i][m - j - 1] = c\n            d[c] -= 2\n            if d[c] <= 1:\n                f = f + 1\n    if m % 2 == 1:\n        for i in range(n):\n            for j in d:\n                if d[j] > 0:\n                    arr[i][m // 2] = j\n                    d[j] -= 1\n                    break\n    for i in range(n):\n        for j in range(m):\n            print(arr[i][j], end=' ')\n        print()", "try:\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        l = []\n        for __ in range(n):\n            row = list(map(int, input().split()))\n            l.append(row)\n        if n == 1 and m == 1:\n            print(*row)\n            continue\n        listy = [i for j in l for i in j]\n        length = len(listy)\n        listy.sort()\n        first = listy[0]\n        dic = {}\n        for i in range(1, length):\n            if i == 1:\n                dic[first] = 1\n            if first == listy[i]:\n                dic[first] += 1\n            else:\n                dic[listy[i]] = 1\n            first = listy[i]\n        flag = 0\n        justy = [v for (k, v) in dic.items() if v % 2]\n        if m % 2:\n            if len(justy) <= n:\n                flag = 1\n        elif len(justy) == 0:\n            flag = 1\n        if flag:\n            if m % 2:\n                just_one = {k: 1 for (k, v) in dic.items() if v % 2}\n                dic = {k: v - 1 if v % 2 else v for (k, v) in dic.items()}\n                for j in range(n):\n                    new_list = []\n                    for z in range(m // 2):\n                        for (k, v) in dic.items():\n                            if v >= 2:\n                                new_list.append(k)\n                                dic[k] -= 2\n                                break\n                    new_list.extend(new_list[::-1])\n                    dic = {k: v for (k, v) in dic.items() if v != 0}\n                    if just_one:\n                        k = just_one.popitem()\n                        new_list.insert(m // 2, k[0])\n                    else:\n                        for (k, v) in dic.items():\n                            if v >= 2:\n                                new_list.insert(m // 2, k)\n                                just_one[k] = 1\n                                dic[k] -= 2\n                                break\n                    print(*new_list)\n            else:\n                for yo in range(n):\n                    new_list = []\n                    for z in range(m // 2):\n                        for (k, v) in dic.items():\n                            if v >= 2:\n                                new_list.append(k)\n                                dic[k] -= 2\n                                break\n                    new_list.extend(new_list[::-1])\n                    print(*new_list)\n        else:\n            print(-1)\nexcept:\n    pass", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        arr = list(map(int, input().split()))\n        for j in arr:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n    od = 0\n    odarr = []\n    ele = []\n    for i in d:\n        if d[i] % 2 != 0:\n            od += 1\n            odarr.append(i)\n        ele.append(i)\n    if m % 2 == 0 and od != 0 or (m % 2 == 1 and od > n):\n        print(-1)\n        continue\n    arr = [[0] * m for i in range(n)]\n    f = 0\n    for i in range(n):\n        for j in range(m // 2):\n            c = ele[f]\n            while d[c] <= 1:\n                f = f + 1\n                c = ele[f]\n            arr[i][j] = c\n            arr[i][m - j - 1] = c\n            d[c] -= 2\n            if d[c] <= 1:\n                f = f + 1\n    if m % 2 == 1:\n        for i in range(n):\n            for j in d:\n                if d[j] > 0:\n                    arr[i][m // 2] = j\n                    d[j] -= 1\n                    break\n    for i in range(n):\n        for j in range(m):\n            print(arr[i][j], end=' ')\n        print()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [[]] * n\n    d = dict()\n    for i in range(n):\n        a[i] = list(map(int, input().split()))\n    for i in range(n):\n        for j in range(m):\n            d[a[i][j]] = 0\n    for i in range(n):\n        for j in range(m):\n            d[a[i][j]] += 1\n    if m % 2 == 0:\n        x = 0\n    else:\n        x = n\n    count = 0\n    l = []\n    q = []\n    for i in d:\n        if d[i] % 2 == 1:\n            count += 1\n            l.extend([i for j in range(d[i])])\n            y = l.pop()\n            q.append(y)\n        else:\n            l.extend([i for j in range(d[i])])\n    if count > x:\n        print('-1')\n    else:\n        if m % 2 == 0:\n            k = 0\n            for i in range(n):\n                for j in range(m // 2):\n                    a[i][j] = l[k]\n                    a[i][m - j - 1] = l[k + 1]\n                    k += 2\n        else:\n            k = 0\n            h = 0\n            for i in range(n):\n                for j in range(m // 2):\n                    a[i][j] = l[k]\n                    a[i][m - j - 1] = l[k + 1]\n                    k += 2\n                if h == len(q):\n                    a[i][m // 2] = l[-1]\n                    l.pop()\n                else:\n                    a[i][m // 2] = q[h]\n                    h += 1\n        for i in range(n):\n            for j in range(m):\n                print(a[i][j], end=' ')\n            print()", "try:\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        l = []\n        for __ in range(n):\n            row = list(map(int, input().split()))\n            l.append(row)\n        if n == 1 and m == 1:\n            print(l[0][0])\n            continue\n        listy = [i for j in l for i in j]\n        length = len(listy)\n        listy.sort()\n        first = listy[0]\n        dic = {}\n        for i in range(1, length):\n            if i == 1:\n                dic[first] = 1\n            if first == listy[i]:\n                dic[first] += 1\n            else:\n                dic[listy[i]] = 1\n            first = listy[i]\n        flag = 0\n        justy = [v for (k, v) in dic.items() if v % 2]\n        if m % 2:\n            if len(justy) <= n:\n                flag = 1\n        elif len(justy) == 0:\n            flag = 1\n        if flag:\n            if m % 2:\n                just_one = {k: 1 for (k, v) in dic.items() if v % 2}\n                dic = {k: v - 1 if v % 2 else v for (k, v) in dic.items()}\n                for j in range(n):\n                    new_list = []\n                    for z in range(m // 2):\n                        for (k, v) in dic.items():\n                            if v >= 2:\n                                new_list.append(k)\n                                dic[k] -= 2\n                                break\n                    new_list.extend(new_list[::-1])\n                    dic = {k: v for (k, v) in dic.items() if v != 0}\n                    if just_one:\n                        k = just_one.popitem()\n                        new_list.insert(m // 2, k[0])\n                    else:\n                        for (k, v) in dic.items():\n                            if v >= 2:\n                                new_list.insert(m // 2, k)\n                                just_one[k] = 1\n                            if dic[k] - 2 == 0:\n                                dic.pop(k)\n                                break\n                            else:\n                                dic[k] -= 2\n                                break\n                    print(*new_list)\n            else:\n                for yo in range(n):\n                    new_list = []\n                    for z in range(m // 2):\n                        for (k, v) in dic.items():\n                            if v >= 2:\n                                new_list.append(k)\n                                dic[k] -= 2\n                                break\n                    new_list.extend(new_list[::-1])\n                    print(*new_list)\n        else:\n            print(-1)\nexcept:\n    pass", "def CountFrequency(my_list):\n    freq = {}\n    for items in my_list:\n        freq[items] = my_list.count(items)\n    return freq\nt = int(input())\nfor _ in range(t):\n    nm = [int(x) for x in input().split()]\n    n = nm[0]\n    m = nm[1]\n    el = []\n    for r in range(n):\n        row = [int(y) for y in input().split()]\n        for c in range(m):\n            el.append(row[c])\n    freq = CountFrequency(el)\n    flag = 0\n    if m % 2 == 0:\n        for f in freq.values():\n            if f % 2 != 0:\n                flag = 1\n                print('-1')\n                break\n    else:\n        odd = 0\n        for f in freq.values():\n            if f % 2 != 0:\n                odd = odd + 1\n        if odd > n:\n            flag = 1\n            print('-1')\n    if flag == 0:\n        even = []\n        odd = []\n        for (key, value) in freq.items():\n            if value % 2 == 0:\n                for e in range(value):\n                    even.append(key)\n            else:\n                for e in range(value - 1):\n                    even.append(key)\n                odd.append(key)\n        pointe = 0\n        pointo = 0\n        final_matrix = [[0 for i in range(m)] for j in range(n)]\n        for i in range(n):\n            for j in range(m // 2):\n                final_matrix[i][j] = even[pointe]\n                final_matrix[i][m - j - 1] = even[pointe]\n                pointe = pointe + 2\n        for i in range(n):\n            if final_matrix[i][m // 2] == 0:\n                if pointe < len(even):\n                    final_matrix[i][m // 2] = even[pointe]\n                    pointe = pointe + 1\n                elif pointo < len(odd):\n                    final_matrix[i][m // 2] = odd[pointo]\n                    pointo = pointo + 1\n        for i in range(n):\n            print(*final_matrix[i])", "from collections import Counter\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = []\n    l = []\n    for i in range(n):\n        x = list(map(int, input().split()))\n        arr.append(x)\n        l.extend(x)\n    c = Counter(l)\n    countodd = 0\n    for i in c.values():\n        if i % 2 == 1:\n            countodd += 1\n    if m % 2 == 0 and countodd != 0 or (m % 2 != 0 and countodd > n):\n        print(-1)\n        continue\n    d = {}\n    d = c\n    odds = []\n    for (i, j) in zip(d.keys(), d.values()):\n        if j % 2 == 1:\n            d[i] -= 1\n            odds.append(i)\n    dkey = []\n    dval = []\n    for i in d.items():\n        dkey.append(i[0])\n        dval.append(i[1])\n    x = 0\n    for i in range(n):\n        for j in range(m // 2):\n            if j != m - j - 1:\n                while dval[x] == 0:\n                    x += 1\n                arr[i][j] = dkey[x]\n                arr[i][m - j - 1] = dkey[x]\n                dval[x] -= 2\n    for i in range(len(dval)):\n        if dval[i] != 0:\n            for j in range(dval[i]):\n                odds.append(dkey[i])\n    if m % 2 == 1:\n        for i in range(len(odds)):\n            arr[i][m // 2] = odds[i]\n    for i in range(n):\n        for j in range(m):\n            print(arr[i][j], end=' ')\n        print()", "def solve(grid):\n    (nr, nc) = (len(grid), len(grid[0]))\n    counts = {}\n    for row in grid:\n        for v in row:\n            if v not in counts:\n                counts[v] = 0\n            counts[v] += 1\n    (odd, even) = ([], [])\n    for (k, v) in counts.items():\n        if v & 1:\n            odd.append(k)\n        else:\n            even.append(k)\n    if len(odd) > nr:\n        return [[-1]]\n    if nc % 2 == 0 and odd:\n        return [[-1]]\n    if nc % 2 == 1 and (nr - len(odd)) % 2 == 1:\n        return [[-1]]\n    if nc % 2 == 1:\n        r = 0\n        while r < nr:\n            if odd:\n                v = odd.pop()\n                grid[r][nc // 2] = v\n                counts[v] -= 1\n                if counts[v]:\n                    even.append(v)\n                r += 1\n            else:\n                v = even[-1]\n                grid[r][nc // 2] = grid[r + 1][nc // 2] = v\n                counts[v] -= 2\n                if not counts[v]:\n                    even.pop()\n                r += 2\n    for r in range(nr):\n        for c in range(nc // 2):\n            v = even[-1]\n            grid[r][c] = grid[r][-1 - c] = v\n            counts[v] -= 2\n            if not counts[v]:\n                even.pop()\n    return grid\n\ndef main():\n    from sys import stdin\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        (N, M) = list(map(int, stdin.readline().strip().split()))\n        grid = [list(map(int, stdin.readline().strip().split())) for _ in range(N)]\n        rgrid = solve(grid)\n        for row in rgrid:\n            print(' '.join(map(str, row)))\nmain()", "def solve(grid):\n    (nr, nc) = (len(grid), len(grid[0]))\n    counts = {}\n    for row in grid:\n        for v in row:\n            if v not in counts:\n                counts[v] = 0\n            counts[v] += 1\n    (odd, even) = ([], [])\n    for (k, v) in counts.items():\n        if v & 1:\n            odd.append(k)\n        else:\n            even.append(k)\n    if len(odd) > nr:\n        return [[-1]]\n    if not nc & 1 and odd:\n        return [[-1]]\n    if nc & 1 and nr - len(odd) & 1:\n        return [[-1]]\n    if nc & 1:\n        r = 0\n        while r < nr:\n            if odd:\n                v = odd.pop()\n                grid[r][nc // 2] = v\n                counts[v] -= 1\n                if counts[v]:\n                    even.append(v)\n                r += 1\n            else:\n                v = even[-1]\n                grid[r][nc // 2] = grid[r + 1][nc // 2] = v\n                counts[v] -= 2\n                if not counts[v]:\n                    even.pop()\n                r += 2\n    for r in range(nr):\n        for c in range(nc // 2):\n            v = even[-1]\n            grid[r][c] = grid[r][-1 - c] = v\n            counts[v] -= 2\n            if not counts[v]:\n                even.pop()\n    return grid\n\ndef mine():\n    from random import randint\n\n    def check(rgrid):\n        return all((row == row[::-1] for row in rgrid))\n    for _ in range(10):\n        N = randint(1, 5)\n        M = randint(1, 5)\n        grid = [[randint(1, 5) for c in range(M)] for r in range(N)]\n        print('\\n*** check grid=', grid)\n        rgrid = solve(grid)\n        if rgrid[0][0] != -1 and (not check(rgrid)):\n            print('FAILED')\n            return\n    print('passed')\n\ndef main():\n    from sys import stdin\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        (N, M) = list(map(int, stdin.readline().strip().split()))\n        grid = [list(map(int, stdin.readline().strip().split())) for _ in range(N)]\n        rgrid = solve(grid)\n        for row in rgrid:\n            print(' '.join(map(str, row)))\nmain()", "try:\n    for _ in range(int(input())):\n        (r, c) = map(int, input().split())\n        list1 = []\n        for i in range(r):\n            l = list(map(int, input().split()))\n            list1.append(l)\n        dict1 = {}\n        for i in range(r):\n            for j in range(c):\n                if list1[i][j] in dict1:\n                    dict1[list1[i][j]] += 1\n                else:\n                    dict1[list1[i][j]] = 1\n        sodd = 0\n        seven = 0\n        dict2 = {}\n        dict3 = {}\n        for i in dict1:\n            x = dict1[i]\n            if x % 2 == 0:\n                seven += x\n                dict2[i] = x\n            else:\n                sodd += 1\n                dict3[i] = 1\n                if i not in dict2:\n                    dict2[i] = x - 1\n                else:\n                    dict2[i] += x - 1\n        list11 = []\n        list22 = []\n        for x in dict2:\n            while dict2[x]:\n                list11.append(x)\n                dict2[x] -= 1\n        for y in dict3:\n            while dict3[y]:\n                list22.append(y)\n                dict3[y] -= 1\n        if c % 2 == 0 and sodd != 0:\n            print(-1)\n        elif c % 2 != 0 and sodd > r:\n            print(-1)\n        else:\n            k = 0\n            lll = []\n            for i in range(r):\n                lr = [0] * c\n                i1 = 0\n                i2 = c - 1\n                while i1 <= i2:\n                    if i1 != i2:\n                        x1 = list11.pop()\n                        x2 = list11.pop()\n                        lr[i1] = x1\n                        lr[i2] = x2\n                        i1 += 1\n                        i2 -= 1\n                    else:\n                        if list22:\n                            lr[i1] = list22.pop()\n                        else:\n                            lr[i1] = list11[0 + k]\n                            k += 1\n                        i1 += 1\n                        i2 -= 1\n                lll.append(lr)\n            for i in range(r):\n                for j in range(c):\n                    print(lll[i][j], end=' ')\n                print()\nexcept:\n    pass", "for _ in range(int(input())):\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    d = {}\n    for i in range(n):\n        a = list(map(int, input().split()))\n        for j in a:\n            try:\n                d[j] += 1\n            except:\n                d[j] = 1\n    a = [[0 for x in range(m)] for y in range(n)]\n    a1 = []\n    a2 = []\n    b1 = []\n    b2 = []\n    for (key, value) in d.items():\n        if value % 2 == 0:\n            a1.append(key)\n            b1.append(value)\n        else:\n            a2.append(key)\n            b2.append(value)\n    for i in range(len(a2)):\n        if b2[i] > 1:\n            a1.append(a2[i])\n            b1.append(b2[i] - 1)\n        b2[i] = 1\n    if m % 2 == 0:\n        if len(a2) > 0:\n            print('-1')\n        else:\n            l = 0\n            for i in range(n):\n                x = 0\n                y = m - 1\n                while x < y:\n                    a[i][x] = a1[l]\n                    a[i][y] = a1[l]\n                    b1[l] -= 2\n                    x += 1\n                    y -= 1\n                    if b1[l] == 0:\n                        l += 1\n            for i in range(n):\n                for j in range(m):\n                    print(a[i][j], end=' ')\n                print('')\n    elif len(a2) > n:\n        print('-1')\n    else:\n        z1 = len(a1)\n        z2 = len(a2)\n        l1 = 0\n        l2 = 0\n        for i in range(n):\n            x = 0\n            y = m - 1\n            while x < y:\n                a[i][x] = a1[l1]\n                a[i][y] = a1[l1]\n                x += 1\n                y -= 1\n                b1[l1] -= 2\n                if b1[l1] == 0:\n                    l1 += 1\n        ind = n\n        for i in range(n):\n            if l2 == z2:\n                ind = i\n                break\n            x = m // 2\n            a[i][x] = a2[l2]\n            l2 += 1\n        for i in range(ind, n):\n            x = m // 2\n            a[i][x] = a1[l1]\n            b1[l1] -= 1\n            if b1[l1] == 0:\n                l1 += 1\n        for i in range(n):\n            for j in range(m):\n                print(a[i][j], end=' ')\n            print('')", "for _ in range(int(input())):\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    d = {}\n    a3 = []\n    b3 = []\n    k = 0\n    for i in range(n):\n        a = list(map(int, input().split()))\n        for j in a:\n            try:\n                l = d[j]\n                b3[l] += 1\n            except:\n                a3.append(j)\n                b3.append(1)\n                d[j] = k\n                k += 1\n    a = [[0 for x in range(m)] for y in range(n)]\n    a1 = []\n    a2 = []\n    b1 = []\n    b2 = []\n    l = len(a3)\n    for i in range(l):\n        if b3[i] % 2 == 0:\n            a1.append(a3[i])\n            b1.append(b3[i])\n        else:\n            a2.append(a3[i])\n            b2.append(b3[i])\n    for i in range(len(a2)):\n        if b2[i] > 1:\n            a1.append(a2[i])\n            b1.append(b2[i] - 1)\n        b2[i] = 1\n    if m % 2 == 0:\n        if len(a2) > 0:\n            print('-1')\n        else:\n            l = 0\n            for i in range(n):\n                x = 0\n                y = m - 1\n                while x < y:\n                    a[i][x] = a1[l]\n                    a[i][y] = a1[l]\n                    b1[l] -= 2\n                    x += 1\n                    y -= 1\n                    if b1[l] == 0:\n                        l += 1\n            for i in range(n):\n                for j in range(m):\n                    print(a[i][j], end=' ')\n                print('')\n    elif len(a2) > n:\n        print('-1')\n    else:\n        z1 = len(a1)\n        z2 = len(a2)\n        l1 = 0\n        l2 = 0\n        for i in range(n):\n            x = 0\n            y = m - 1\n            while x < y:\n                a[i][x] = a1[l1]\n                a[i][y] = a1[l1]\n                x += 1\n                y -= 1\n                b1[l1] -= 2\n                if b1[l1] == 0:\n                    l1 += 1\n        ind = n\n        for i in range(n):\n            if l2 == z2:\n                ind = i\n                break\n            x = m // 2\n            a[i][x] = a2[l2]\n            l2 += 1\n        for i in range(ind, n):\n            x = m // 2\n            a[i][x] = a1[l1]\n            b1[l1] -= 1\n            if b1[l1] == 0:\n                l1 += 1\n        for i in range(n):\n            for j in range(m):\n                print(a[i][j], end=' ')\n            print('')", "ans = []\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    l = []\n    pair = []\n    single = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        for j in range(m):\n            if l[j] in d:\n                if d[l[j]] == 1:\n                    pair.append(l[j])\n                    single.remove(l[j])\n                    d[l[j]] = 0\n                else:\n                    d[l[j]] += 1\n                    single.append(l[j])\n            else:\n                d[l[j]] = 1\n                single.append(l[j])\n    flag = 0\n    evuse = []\n    if m % 2 == 0 and len(single) > 0:\n        flag = 1\n    if m % 2 == 1 and n % 2 == 1 and (len(single) < 1):\n        flag = 1\n    if len(single) > n:\n        flag = 1\n    if flag == 1:\n        ans.append([-1])\n    else:\n        for i in range(n):\n            s = [0] * m\n            for i in range(m // 2):\n                cha = pair.pop()\n                s[i] = cha\n                s[m - i - 1] = cha\n            if m % 2 == 1:\n                if len(single) > 0:\n                    s[m // 2] = single.pop()\n                elif len(evuse) > 0:\n                    s[m // 2] = evuse.pop()\n                else:\n                    cha = pair.pop()\n                    s[m // 2] = cha\n                    evuse.append(cha)\n            ans.append(s)\nfor i in range(len(ans)):\n    for j in range(len(ans[i])):\n        print(ans[i][j], end=' ')\n    print()", "def print_matrix(mat):\n    for row in mat:\n        print(' '.join((str(x) for x in row)))\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    all_elems = []\n    final_mat = []\n    for k in range(n):\n        row = list(map(int, input().split()))\n        all_elems.extend(row)\n    counts_dict = {}\n    odd_list = []\n    cont_boo = True\n    for item in set(all_elems):\n        cnt = all_elems.count(item)\n        if m % 2 == 0:\n            if cnt % 2 != 0:\n                cont_boo = False\n                break\n        elif cnt % 2 != 0:\n            odd_list.append(item)\n        counts_dict[item] = cnt\n    if m % 2 == 0 and cont_boo:\n        for x in range(n):\n            this_row = []\n            for y in range(int(m / 2)):\n                for (key, value) in counts_dict.items():\n                    if value > 0:\n                        this_row.append(key)\n                        counts_dict[key] -= 2\n                        break\n            this_row.extend(this_row[::-1])\n            final_mat.append(this_row)\n        print_matrix(final_mat)\n    elif len(odd_list) <= n and cont_boo and ((n - len(odd_list)) % 2 == 0):\n        for x in range(n):\n            this_row = []\n            for y in range(int(m / 2)):\n                for (key, value) in counts_dict.items():\n                    if value > 1:\n                        this_row.append(key)\n                        counts_dict[key] -= 2\n                        break\n            this_row.extend(this_row[::-1])\n            halfway = int((m - 1) / 2)\n            if len(odd_list) > 0:\n                this_row.insert(halfway, odd_list[0])\n                counts_dict[odd_list[0]] -= 1\n                odd_list.pop(0)\n            else:\n                for (key, value) in counts_dict.items():\n                    if value > 0 and value % 2 == 0:\n                        this_row.insert(halfway, key)\n                        counts_dict[key] -= 1\n                        odd_list.append(key)\n                        break\n            final_mat.append(this_row)\n        print_matrix(final_mat)\n    else:\n        print(-1)", "def print_matrix(mat):\n    for row in mat:\n        print(' '.join((str(x) for x in row)))\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    all_elems = []\n    final_mat = []\n    for k in range(n):\n        row = list(map(int, input().split()))\n        all_elems.extend(row)\n    counts_dict = {}\n    odd_list = []\n    cont_boo = True\n    for item in set(all_elems):\n        cnt = all_elems.count(item)\n        if m % 2 == 0:\n            if cnt % 2 != 0:\n                cont_boo = False\n                break\n        elif cnt % 2 != 0:\n            odd_list.append(item)\n        counts_dict[item] = cnt\n    if m % 2 == 0 and cont_boo:\n        for x in range(n):\n            this_row = []\n            for y in range(int(m / 2)):\n                for (key, value) in counts_dict.items():\n                    if value > 0:\n                        this_row.append(key)\n                        counts_dict[key] -= 2\n                        break\n            this_row.extend(this_row[::-1])\n            final_mat.append(this_row)\n        print_matrix(final_mat)\n    elif len(odd_list) <= n and cont_boo and ((n - len(odd_list)) % 2 == 0):\n        for x in range(n):\n            this_row = []\n            for y in range(int(m / 2)):\n                for (key, value) in counts_dict.items():\n                    if value > 1:\n                        this_row.append(key)\n                        counts_dict[key] -= 2\n                        break\n            this_row.extend(this_row[::-1])\n            halfway = int((m - 1) / 2)\n            if len(odd_list) > 0:\n                this_row.insert(halfway, odd_list[0])\n                counts_dict[odd_list[0]] -= 1\n                odd_list.pop(0)\n            else:\n                for (key, value) in counts_dict.items():\n                    if value > 0 and value % 2 == 0:\n                        this_row.insert(halfway, key)\n                        counts_dict[key] -= 1\n                        odd_list.append(key)\n                        break\n            final_mat.append(this_row)\n        print_matrix(final_mat)\n    else:\n        print(-1)", "try:\n    t = int(input())\n    while t >= 0:\n        t = t - 1\n        rc = list(map(int, input().split()))\n        n = int(rc[0])\n        m = int(rc[1])\n        l = []\n        unique_list = []\n        for i in range(n):\n            r = list(map(int, input().split()))\n            for x in r:\n                if x not in unique_list:\n                    unique_list.append(x)\n                else:\n                    unique_list.remove(x)\n                    l.append(x)\n                    l.append(x)\n        if m % 2 == 0 and len(unique_list) != 0 or (m % 2 != 0 and len(unique_list) > n):\n            print('-1')\n            continue\n        l.sort()\n        if m % 2 == 0:\n            res = []\n            for i in range(n):\n                row = []\n                k = 0\n                for j in range(0, m, 2):\n                    x = l.pop()\n                    x = l.pop()\n                    row.insert(k, x)\n                    row.insert(k, x)\n                    k = k + 1\n                res.append(row)\n        else:\n            while len(unique_list) < n:\n                unique_list.append(l.pop())\n            res = []\n            for i in range(n):\n                row = []\n                k = 0\n                while k <= m / 2:\n                    if k < int(m / 2):\n                        x = l.pop()\n                        x = l.pop()\n                        row.insert(k, x)\n                        row.insert(k, x)\n                        k = k + 1\n                    else:\n                        x = unique_list.pop()\n                        row.insert(k, x)\n                        break\n                res.append(row)\n        for row in res:\n            for x in row:\n                print(x, end=' ')\n            print('')\nexcept:\n    pass", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    l = [[int(x) for x in input().split()] for y in range(n)]\n    d = {}\n    for i in l:\n        for j in i:\n            try:\n                d[j] += 1\n            except:\n                d[j] = 1\n    singles = []\n    temp = d.copy()\n    for i in temp:\n        if temp[i] & 1:\n            singles.append(i)\n            if temp[i] == 1:\n                del d[i]\n            else:\n                d[i] -= 1\n    doubles = list(d.keys())\n    if singles and (not m & 1):\n        print(-1)\n    elif len(singles) > n:\n        print(-1)\n    else:\n        ans = []\n        for i in range(n):\n            row = []\n            for j in range(m // 2):\n                if d[doubles[0]] > 1:\n                    row.append(doubles[0])\n                    if d[doubles[0]] == 2:\n                        del d[doubles[0]]\n                        del doubles[0]\n                    else:\n                        d[doubles[0]] -= 2\n                else:\n                    row.append(doubles[1])\n                    if d[doubles[1]] == 2:\n                        del d[doubles[1]]\n                        del doubles[1]\n                    else:\n                        d[doubles[1]] -= 2\n            if m & 1:\n                try:\n                    row.append(singles[0])\n                    del singles[0]\n                except:\n                    row.append(doubles[0])\n                    if d[doubles[0]] == 1:\n                        del d[doubles[0]]\n                        del doubles[0]\n                    else:\n                        d[doubles[0]] -= 1\n            if m > 1:\n                row += row[m // 2 - 1::-1]\n            ans.append(row)\n        for i in ans:\n            for j in i[:-1]:\n                print(j, end=' ')\n            print(i[-1])", "from fractions import Fraction\nimport bisect\nimport os\nfrom collections import Counter\nimport bisect\nfrom collections import defaultdict\nimport math\nimport random\nimport heapq as hq\nfrom math import sqrt\nimport sys\nfrom functools import reduce, cmp_to_key\nfrom collections import deque\nimport threading\nfrom itertools import combinations\nfrom io import BytesIO, IOBase\nfrom itertools import accumulate\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef iinput():\n    return int(input())\n\ndef tinput():\n    return input().split()\n\ndef rinput():\n    return map(int, tinput())\n\ndef rlinput():\n    return list(rinput())\nmod = int(1000000000.0) + 7\n\ndef factors(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\nfor _ in range(iinput()):\n    (n, m) = rinput()\n    mat = []\n    for i in range(n):\n        mat.append(rlinput())\n    d = defaultdict(int)\n    pairs = []\n    for i in range(n):\n        for j in range(m):\n            d[mat[i][j]] += 1\n    need = n * (m // 2)\n    for i in d:\n        need -= d[i] // 2\n    if need > 0:\n        print(-1)\n        continue\n    newmat = []\n    dq = deque()\n    extra = []\n    for i in d:\n        for j in range(d[i] // 2):\n            dq.append(i)\n            dq.appendleft(i)\n        if d[i] % 2:\n            extra.append(i)\n    for i in range(n):\n        ans = deque()\n        for j in range(m // 2):\n            ans.append(dq.pop())\n            ans.appendleft(dq.popleft())\n        ans = list(ans)\n        newmat.append(ans)\n    if m % 2:\n        extra += list(dq)\n        remove = -1\n        for i in range(n):\n            newmat[i].insert(m // 2, extra[remove])\n            remove -= 1\n    for i in newmat:\n        print(*i)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    m = []\n    a = []\n    d = {}\n    for i in range(n):\n        a = input().split()\n        m.append(a)\n        a = []\n    for i in range(n):\n        for j in range(k):\n            if int(m[i][j]) in d:\n                d[int(m[i][j])] += 1\n            else:\n                d[int(m[i][j])] = 1\n    noofpairs = 0\n    pairlist = []\n    unique = []\n    for i in d:\n        if d[i] == 1:\n            unique.append(i)\n        else:\n            noofpairs += d[i] // 2\n            for c in range(d[i] // 2):\n                pairlist.append(i)\n    pairsreq = k // 2 * n\n    if noofpairs < pairsreq:\n        print(-1)\n    else:\n        b = 0\n        nwmat = []\n        newlist = []\n        for i in range(n):\n            newlist = []\n            for j in range(k // 2):\n                newlist.insert(0, pairlist[b])\n                newlist.append(pairlist[b])\n                d[pairlist[b]] -= 2\n                b += 1\n            nwmat.append(newlist)\n        if k % 2 == 1:\n            u = []\n            for i in d:\n                for j in range(d[i]):\n                    u.append(i)\n            for i in range(n):\n                nwmat[i].insert(k // 2, u[i])\n        for i in range(n):\n            print(*nwmat[i])", "t = int(input())\nfor i in range(t):\n    (n, m) = list(map(int, input().rstrip().split()))\n    nums = {}\n    for _ in range(n):\n        s = list(map(int, input().rstrip().split()))\n        for i in s:\n            if nums.get(i) is None:\n                nums[i] = 1\n            else:\n                nums[i] += 1\n    odd = 0\n    for i in nums:\n        if nums[i] % 2 != 0:\n            odd += 1\n    if m % 2 == 0:\n        if odd > 0:\n            print(-1)\n            continue\n    elif odd > n:\n        print(-1)\n        continue\n    for i in range(n):\n        temp = [0 for _ in range(m)]\n        if m % 2 == 0:\n            mid = m // 2\n        else:\n            mid = m // 2 + 1\n            for i in nums:\n                if nums[i] % 2 != 0:\n                    temp[m // 2] = str(i)\n                    nums[i] -= 1\n                    break\n            if temp[m // 2] == 0:\n                for i in nums:\n                    if nums[i] > 0:\n                        temp[m // 2] = str(i)\n                        nums[i] -= 1\n                        break\n        index = 0\n        while mid < m:\n            for i in nums:\n                if nums[i] >= 2 and nums[i] > 0:\n                    temp[index] = temp[m - 1 - index] = str(i)\n                    nums[i] -= 2\n                    break\n            mid += 1\n            index += 1\n        print(' '.join(map(str, temp)))", "for t in range(int(input())):\n    (N, M) = map(int, input().split())\n    A = []\n    flag = False\n    for i in range(N):\n        z = input()\n        if z != z[::-1]:\n            flag = True\n        A.append(z.split())\n    if flag == False:\n        for i in A:\n            print(' '.join(i))\n        continue\n    d = []\n    single = set()\n    count1 = 0\n    count2 = 0\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] not in single:\n                single.add(A[i][j])\n            else:\n                single.remove(A[i][j])\n                d.append(A[i][j])\n                count2 += 2\n    count1 = len(single)\n    single = list(single)\n    if M % 2 == 0 and count1 > 0 or (M % 2 != 0 and (N - count1 < 0 or (N - count1) % 2 != 0)):\n        print(-1)\n    elif M % 2 == 0:\n        i = 0\n        for k in range(N):\n            s = ''\n            for j in range(M // 2):\n                if s == '':\n                    s = d[i] + ' ' + d[i]\n                else:\n                    s = d[i] + ' ' + s + ' ' + d[i]\n                i += 1\n            print(s)\n    else:\n        i = 0\n        if N - count1 > 0:\n            i += (N - count1) // 2\n            single.extend(d[0:i] + d[0:i])\n        if len(single) != N:\n            print(-1)\n            continue\n        for k in range(N):\n            s = single.pop()\n            for j in range(M // 2):\n                s = d[i] + ' ' + s + ' ' + d[i]\n                i += 1\n            print(s)", "from collections import Counter\nfrom itertools import chain\n\ndef rearrange(N, M, A):\n    C = Counter()\n    list(map(C.update, A))\n    even = set((k for (k, v) in C.items() if v % 2 == 0))\n    odd = set((k for (k, v) in C.items() if v % 2 == 1))\n    C.subtract(odd)\n    avail = C.elements()\n    B = []\n    try:\n        for _ in range(N):\n            row = [0] * M\n            for k in range(M // 2):\n                e1 = next(avail)\n                e2 = next(avail)\n                (row[k], row[M - k - 1]) = (e1, e2)\n            B.append(row)\n        rest = list(chain(avail, odd))\n        if M % 2 != 0 and len(rest) != N:\n            return None\n        for (k, v) in enumerate(rest):\n            B[k][M // 2] = v\n    except StopIteration:\n        return None\n    return B\nT = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(N)]\n    B = rearrange(N, M, A)\n    if not B:\n        print(-1)\n    else:\n        for a in B:\n            print(' '.join(map(str, a)))", "T = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    quantity = []\n    elements = []\n    a = []\n    for _ in range(n):\n        line = list(map(int, input().split()))\n        a.append(line)\n        for e in line:\n            if e in elements:\n                quantity[elements.index(e)] += 1\n            else:\n                elements.append(e)\n                quantity.append(1)\n    odd = 0\n    odds = []\n    for i in range(len(quantity)):\n        if quantity[i] % 2 != 0:\n            odd += 1\n            odds.append(i)\n    if m == 1 or (m % 2 == 0 and odd == 0) or (m % 2 != 0 and odd <= n and ((n - odd) % 2 == 0)):\n        k = 0\n        if m % 2 != 0 and m != 1:\n            p = int(m / 2)\n            i = 0\n            for eOdd in odds:\n                a[i][p] = elements[eOdd]\n                quantity[eOdd] -= 1\n                i += 1\n            while i < n:\n                while k < len(elements) and quantity[k] == 0:\n                    k += 1\n                if k < len(elements) and quantity[k] > 0:\n                    a[i][p] = elements[k]\n                    quantity[k] -= 1\n                    i += 1\n        for i in range(n):\n            for j in range(int(m / 2)):\n                while k < len(elements) and quantity[k] < 2:\n                    k += 1\n                if k < len(elements) and quantity[k] >= 2:\n                    a[i][j] = elements[k]\n                    a[i][m - j - 1] = elements[k]\n                    quantity[k] -= 2\n        for i in range(n):\n            for j in range(m - 1):\n                print(a[i][j], end=' ')\n            print(a[i][m - 1])\n    else:\n        print(-1)", "T = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    quantity = []\n    elements = []\n    a = []\n    for _ in range(n):\n        line = list(map(int, input().split()))\n        a.append(line)\n        for e in line:\n            if e in elements:\n                quantity[elements.index(e)] += 1\n            else:\n                elements.append(e)\n                quantity.append(1)\n    odd = 0\n    for q in quantity:\n        if q % 2 != 0:\n            odd += 1\n    if m == 1 or (m % 2 == 0 and odd == 0) or (m % 2 != 0 and odd <= n and ((n - odd) % 2 == 0)):\n        for i in range(n):\n            for j in range(m - 1):\n                print(a[i][j], end=' ')\n            print(a[i][m - 1])\n    else:\n        print(-1)", "T = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    quantity = []\n    elements = []\n    a = []\n    for _ in range(n):\n        line = list(map(int, input().split()))\n        a.append(line)\n        for e in line:\n            if e in elements:\n                quantity[elements.index(e)] += 1\n            else:\n                elements.append(e)\n                quantity.append(1)\n    odd = 0\n    for i in range(len(quantity)):\n        if quantity[i] % 2 != 0:\n            odd += 1\n    if m == 1 or (m % 2 == 0 and odd == 0) or (m % 2 != 0 and odd <= n and ((n - odd) % 2 == 0)):\n        for i in range(n):\n            for j in range(m - 1):\n                print(a[i][j], end=' ')\n            print(a[i][m - 1])\n    else:\n        print(-1)", "T = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    quantity = []\n    elements = []\n    a = []\n    for _ in range(n):\n        line = list(map(int, input().split()))\n        a.append(line)\n        for e in line:\n            if e in elements:\n                quantity[elements.index(e)] += 1\n            else:\n                elements.append(e)\n                quantity.append(1)\n    odd = 0\n    for i in range(len(quantity)):\n        if quantity[i] % 2 != 0:\n            odd += 1\n    possible = False\n    if m % 2 == 0 and odd == 0:\n        possible = True\n    elif m == 1:\n        possible = True\n    elif m % 2 != 0 and odd <= n and ((n - odd) % 2 == 0):\n        possible = True\n    if possible == False:\n        print(-1)\n    else:\n        for i in range(n):\n            for j in range(m - 1):\n                print(a[i][j], end=' ')\n            print(a[i][m - 1])", "T = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    quantity = []\n    elements = []\n    a = []\n    for _ in range(n):\n        line = list(map(int, input().split()))\n        a.append(line)\n        for e in line:\n            if e in elements:\n                quantity[elements.index(e)] += 1\n            else:\n                elements.append(e)\n                quantity.append(1)\n    odd = 0\n    odds = []\n    for i in range(len(quantity)):\n        if quantity[i] % 2 != 0:\n            odd += 1\n            odds.append(i)\n    possible = False\n    if m % 2 == 0 and odd == 0:\n        possible = True\n    elif m == 1:\n        possible = True\n    elif m % 2 != 0 and odd <= n and ((n - odd) % 2 == 0):\n        possible = True\n    if possible == False:\n        print(-1)\n    else:\n        k = 0\n        for i in range(n):\n            for j in range(m - 1):\n                print(a[i][j], end=' ')\n            print(a[i][m - 1])", "T = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    quantity = []\n    elements = []\n    a = []\n    for _ in range(n):\n        line = list(map(int, input().split()))\n        a.append(line)\n        for e in line:\n            if e in elements:\n                quantity[elements.index(e)] += 1\n            else:\n                elements.append(e)\n                quantity.append(1)\n    odd = 0\n    odds = []\n    for q in quantity:\n        if q % 2 != 0:\n            odd += 1\n            odds.append(e)\n    possible = False\n    if m % 2 == 0 and odd == 0:\n        possible = True\n    elif m == 1:\n        possible = True\n    elif m % 2 != 0 and odd <= n and ((n - odd) % 2 == 0):\n        possible = True\n    if possible == False:\n        print(-1)\n    else:\n        for i in range(n):\n            for j in range(m - 1):\n                print(a[i][j], end=' ')\n            print(a[i][m - 1])", "t = int(input())\n\ndef putelement(b, row, col, num, n, m):\n    b[row][col] = num\n    b[row][m - col - 1] = num\n    col += 1\n    if not col < m // 2:\n        row += 1\n        col = 0\n    return [row, col]\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    odd = []\n    ans = 0\n    b = []\n    row = 0\n    col = 0\n    for i in range(n):\n        b.append([0] * m)\n    for i in range(n):\n        for j in range(m):\n            if l[i][j] not in odd:\n                odd.append(l[i][j])\n            elif row < n and col < m // 2:\n                odd.remove(l[i][j])\n                v = putelement(b, row, col, l[i][j], n, m)\n                row = v[0]\n                col = v[1]\n            else:\n                odd.append(l[i][j])\n    if m % 2 == 0:\n        if len(odd) > 0:\n            print(-1)\n            ans = 1\n    elif len(odd) > n:\n        print(-1)\n        ans = 1\n    if ans == 0:\n        if m % 2 != 0:\n            for i in range(n):\n                b[i][m // 2] = odd.pop(-1)\n        for i in b:\n            print(*i)", "from collections import Counter\nT = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    ls = []\n    c = Counter()\n    for i in range(N):\n        k = list(map(int, input().strip().split()))\n        ls.append(k)\n        c.update(k)\n    e = 0\n    odd = []\n    for i in c.keys():\n        e += c[i] // 2\n    x = M // 2 * N\n    if e < x:\n        print(-1)\n    else:\n        for i in range(N):\n            s = [0] * M\n            l = 0\n            flag = 0\n            for i in c.keys():\n                while c[i] > 1:\n                    if l == M // 2:\n                        flag = 1\n                        break\n                    c[i] -= 2\n                    s[l] = i\n                    s[M - l - 1] = i\n                    l += 1\n                if flag == 1:\n                    break\n            if M % 2 == 1:\n                j = 0\n                for i in c.keys():\n                    if c[i] % 2 == 1:\n                        j = 1\n                        s[M // 2] = i\n                        c[i] -= 1\n                        break\n                if j == 0:\n                    for i in c.keys():\n                        if c[i] >= 1:\n                            s[M // 2] = i\n                            c[i] -= 1\n                            break\n            print(' '.join(map(str, s)))", "T = int(input())\nfor t in range(T):\n    (N, M) = map(int, input().split())\n    A = []\n    flag = False\n    for i in range(N):\n        z = input()\n        if z != z[::-1]:\n            flag = True\n        A.append(z.split())\n    if flag == False:\n        for i in A:\n            print(' '.join(i))\n        continue\n    d = []\n    single = set()\n    count1 = 0\n    count2 = 0\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] not in single:\n                single.add(A[i][j])\n            else:\n                single.remove(A[i][j])\n                d.append(A[i][j])\n                count2 += 2\n    count1 = len(single)\n    single = list(single)\n    if M % 2 == 0 and count1 > 0 or (M % 2 != 0 and (N - count1 < 0 or (N - count1) % 2 != 0)):\n        print(-1)\n    elif M % 2 == 0:\n        i = 0\n        for k in range(N):\n            s = ''\n            for j in range(M // 2):\n                if s == '':\n                    s = d[i] + ' ' + d[i]\n                else:\n                    s = d[i] + ' ' + s + ' ' + d[i]\n                i += 1\n            print(s)\n    else:\n        i = 0\n        if N - count1 > 0:\n            i += (N - count1) // 2\n            single.extend(d[0:i] + d[0:i])\n        if len(single) != N:\n            print(-1)\n            continue\n        for k in range(N):\n            s = single.pop()\n            for j in range(M // 2):\n                s = d[i] + ' ' + s + ' ' + d[i]\n                i += 1\n            print(s)", "T = int(input())\nfor t in range(T):\n    (N, M) = map(int, input().split())\n    A = []\n    flag = False\n    for i in range(N):\n        z = input()\n        if z != z[::-1]:\n            flag = True\n        A.append(z.split())\n    if flag == False:\n        for i in A:\n            print(' '.join(i))\n        continue\n    d = []\n    single = set()\n    count1 = 0\n    count2 = 0\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] not in single:\n                single.add(A[i][j])\n            else:\n                single.remove(A[i][j])\n                d.append(A[i][j])\n                count2 += 2\n    count1 = len(single)\n    single = list(single)\n    if M % 2 == 0 and count1 > 0 or (M % 2 != 0 and (N - count1 < 0 or (N - count1) % 2 != 0)):\n        print(-1)\n    elif M % 2 == 0:\n        i = 0\n        for k in range(N):\n            s = ''\n            for j in range(M // 2):\n                if s == '':\n                    s = d[i] + ' ' + d[i]\n                else:\n                    s = d[i] + ' ' + s + ' ' + d[i]\n                i += 1\n            print(s)\n    else:\n        i = 0\n        if N - count1 > 0:\n            i += (N - count1) // 2\n            single.extend(d[0:i] + d[0:i])\n        if len(single) != N:\n            print(-1)\n            continue\n        for k in range(N):\n            s = single.pop()\n            for j in range(M // 2):\n                s = d[i] + ' ' + s + ' ' + d[i]\n                i += 1\n            print(s)", "T = int(input())\nF = []\nfor i in range(T):\n    a = input()\n    L = []\n    (N, M) = tuple(map(int, a.split()))\n    for j in range(N):\n        b = input()\n        L += list(map(int, b.split()))\n    L.sort()\n    S = set(L)\n    D = {}\n    (A, B) = ([], [])\n    (P, Q) = ([], [])\n    for j in S:\n        D[j] = L.count(j)\n        if D[j] % 2 == 0:\n            A += [j]\n        else:\n            B += [j]\n    if M % 2 == 0 and len(B) != 0 or (M % 2 == 1 and (N < len(B) or (N - len(B)) % 2 == 1)):\n        F += [-1]\n        continue\n    for j in A:\n        P += [j] * D[j]\n    for j in B:\n        Q += [j]\n        P += [j] * (D[j] - 1)\n    if M % 2 == 1:\n        while len(Q) != N:\n            Q += P[:2]\n            P = P[2:]\n    if M % 2 == 0:\n        for j in range(N):\n            X = []\n            x = ''\n            for k in range(M // 2):\n                X += [P[0]]\n                P = P[2:]\n            X += X[::-1]\n            for t in X:\n                x += str(t) + ' '\n            F += [x[:-1]]\n    else:\n        for j in range(N):\n            X = []\n            x = ''\n            for k in range(M // 2):\n                X += [P[0]]\n                P = P[2:]\n            X += [Q[j]] + X[::-1]\n            for t in X:\n                x += str(t) + ' '\n            F += [x[:-1]]\nfor i in F:\n    print(i)", "t = int(input())\nwhile t != 0:\n    t -= 1\n    (n, m) = map(int, input().split(' '))\n    a = []\n    for i in range(n):\n        x = list(map(int, input().split(' ')))\n        a.append(x)\n    dp = {}\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] in dp:\n                dp[a[i][j]] += 1\n            else:\n                dp[a[i][j]] = 1\n    if m % 2 == 0:\n        p = 0\n        for i in dp.values():\n            if i % 2 == 1:\n                p = 1\n                break\n        if p == 1:\n            print('-1')\n        else:\n            x = []\n            b = [0] * m\n            (s, e) = (0, m - 1)\n            for (k, v) in dp.items():\n                j = 0\n                while j != v:\n                    if j % 2 == 0:\n                        b[s] = k\n                        s += 1\n                    else:\n                        b[e] = k\n                        e -= 1\n                    j += 1\n                    if s > e:\n                        x.append(b)\n                        b = [0] * m\n                        s = 0\n                        e = m - 1\n            for i in range(n):\n                for j in range(m):\n                    print(x[i][j], end=' ')\n                print()\n    else:\n        p = 0\n        c = 0\n        for i in dp.values():\n            if i % 2 == 1:\n                c += 1\n        if c > n:\n            print('-1')\n        elif m == 1:\n            for i in range(n):\n                for j in range(m):\n                    print(a[i][j], end=' ')\n                print()\n        else:\n            x = []\n            b = [0] * m\n            (s, e) = (0, m - 1)\n            o = []\n            u = 0\n            for (k, v) in dp.items():\n                j = 0\n                r = v\n                if u == 1:\n                    while j != v:\n                        o.append(k)\n                        j += 1\n                if v % 2 == 1 and u == 0:\n                    r = v - 1\n                    o.append(k)\n                while j != r and len(x) < n and (u == 0):\n                    if j % 2 == 0:\n                        b[s] = k\n                        s += 1\n                    else:\n                        b[e] = k\n                        e -= 1\n                    j += 1\n                    if s >= e:\n                        x.append(b)\n                        b = [0] * m\n                        s = 0\n                        e = m - 1\n                        if len(x) == n:\n                            u = 1\n                            while j != r:\n                                o.append(k)\n                                j += 1\n            z = m // 2\n            for i in range(n):\n                x[i][z] = o[i]\n            h = 0\n            for i in range(n):\n                for j in range(m // 2):\n                    if x[i][j] != x[i][m - 1 - j]:\n                        h = 1\n                        break\n            if h == 0:\n                for i in range(n):\n                    for j in range(m):\n                        print(x[i][j], end=' ')\n                    print()\n            else:\n                print('-1')", "t = int(input())\nfor _ in range(t):\n    dp = {}\n    (row, col) = (int(var) for var in input().split(' '))\n    for _ in range(row):\n        for element in [int(var) for var in input().split(' ')]:\n            dp[element] = dp.get(element, 0) + 1\n    ones = []\n    pairs = []\n    finalAns = [[None for _ in range(col)] for _ in range(row)]\n    for (element, values) in dp.items():\n        left = values - values % 2\n        if values % 2 != 0:\n            ones.append(element)\n        if left != 0:\n            for _ in range(left):\n                pairs.append(element)\n    reqdLen = 2 * (col // 2) * row\n    while len(pairs) > reqdLen:\n        ones.append(pairs.pop())\n    if len(ones) == row * (col % 2):\n        pos = 0\n        onePos = 0\n        for currRow in range(row):\n            (l, r) = (0, col - 1)\n            while l < r:\n                (finalAns[currRow][l], finalAns[currRow][r]) = (pairs[pos], pairs[pos + 1])\n                pos += 2\n                l += 1\n                r -= 1\n            if l == r:\n                finalAns[currRow][l] = ones[onePos]\n                onePos += 1\n        for tempRow in finalAns:\n            for val in tempRow:\n                print(val, end=' ')\n            print()\n    else:\n        print(-1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mat = []\n    d = {}\n    count = 0\n    for i in range(n):\n        arr = list(map(int, input().split()))\n        for j in arr:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n            if d[j] % 2 == 0:\n                count -= 1\n            else:\n                count += 1\n    new_mat = [[0] * m for i in range(n)]\n    k = list(d.keys())\n    if m % 2 == 0:\n        if count == 0:\n            for i in range(n):\n                for j in range(m // 2):\n                    v = k[0]\n                    new_mat[i][j] = v\n                    new_mat[i][-j - 1] = v\n                    d[v] -= 2\n                    if d[v] == 0:\n                        k.pop(0)\n            for i in new_mat:\n                print(*i)\n        else:\n            print(-1)\n    elif count <= n:\n        x = 0\n        for i in range(n):\n            for j in range(m // 2):\n                v = k[x]\n                while d[v] == 1:\n                    x += 1\n                    v = k[x]\n                new_mat[i][j] = v\n                new_mat[i][-j - 1] = v\n                d[v] -= 2\n                if d[v] == 0:\n                    k.pop(x)\n        new_k = list(d.keys())\n        for i in range(n):\n            v = new_k[0]\n            while d[v] == 0:\n                new_k.pop(0)\n                v = new_k[0]\n            if d[v] > 0:\n                new_mat[i][m // 2] = v\n                d[v] -= 1\n            if d[v] == 0:\n                new_k.pop(0)\n        for i in new_mat:\n            print(*i)\n    else:\n        print(-1)", "from sys import stdin\n\ndef check_condition(matrix, n, m):\n    chef = []\n    chefina = []\n    for j in range(n):\n        if j % 2 == 0:\n            chef.append(matrix[j])\n            chefina.append(matrix[j][::-1])\n        else:\n            chef.append(matrix[j][::-1])\n            chefina.append(matrix[j])\n    if chef == chefina:\n        return 1\n    else:\n        return 0\ntc = int(stdin.readline())\nfor i in range(tc):\n    (n, m) = map(int, stdin.readline().split())\n    matrix = []\n    for j in range(n):\n        matrix.append(list(map(int, stdin.readline().split())))\n    num_required = n * (m // 2)\n    if num_required == 0:\n        for each1 in matrix:\n            for each in each1:\n                print(each, end=' ')\n            print()\n    else:\n        flag = check_condition(matrix, n, m)\n        if flag == 1:\n            for each1 in matrix:\n                for each in each1:\n                    print(each, end=' ')\n                print()\n        else:\n            dict1 = {}\n            list1 = []\n            list2 = []\n            for each1 in matrix:\n                for each in each1:\n                    if each in dict1.keys():\n                        dict1[each] += 1\n                    else:\n                        dict1[each] = 1\n            for (key, value) in dict1.items():\n                list1.extend([key] * (value // 2))\n                if value % 2 == 1:\n                    list2.append(key)\n            if len(list1) < num_required:\n                print(-1)\n            else:\n                list1.sort()\n                list2.extend(list1[num_required:] * 2)\n                list2.sort()\n                list1 = list1[:num_required]\n                answer = []\n                y = m // 2\n                for x in range(n):\n                    temp = []\n                    temp.extend(list1[:y])\n                    if m % 2 == 1:\n                        temp.append(list2.pop(0))\n                    temp.extend(list1[:y][::-1])\n                    answer.append(temp)\n                    list1 = list1[y:]\n                for each in answer:\n                    for each1 in each:\n                        print(each1, end=' ')\n                    print()", "for _ in range(int(input())):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    arr = []\n    flag = 0\n    for i in range(n):\n        a = list(map(int, input().split()))\n        arr.extend(a)\n    freq = {}\n    for items in arr:\n        freq[items] = arr.count(items)\n    if m % 2 == 0:\n        for (key, value) in freq.items():\n            if value % 2 != 0:\n                print(-1)\n                flag = 1\n                break\n        if flag == 0:\n            for i in range(n):\n                a = [0] * m\n                for i in range(m // 2):\n                    x = arr[0]\n                    a[i] = x\n                    a[-i - 1] = x\n                    arr.remove(x)\n                    arr.remove(x)\n                print(*a)\n    else:\n        count = 0\n        arr_odd = []\n        for (key, value) in freq.items():\n            if value % 2 != 0:\n                arr_odd.append(key)\n                arr.remove(key)\n                count += 1\n        if count > n:\n            print(-1)\n        else:\n            while count < n:\n                y = arr[0]\n                arr_odd.append(y)\n                arr_odd.append(y)\n                arr.remove(y)\n                arr.remove(y)\n                count += 2\n            for i in range(n):\n                a = [0] * m\n                a[(m - 1) // 2] = arr_odd[0]\n                arr_odd.remove(arr_odd[0])\n                for i in range(m // 2):\n                    x = arr[0]\n                    a[i] = x\n                    a[-i - 1] = x\n                    arr.remove(x)\n                    arr.remove(x)\n                print(*a)", "ans = []\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    l = []\n    pair = []\n    single = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        for j in range(m):\n            if l[j] in d:\n                if d[l[j]] == 1:\n                    pair.append(l[j])\n                    single.remove(l[j])\n                    d[l[j]] = 0\n                else:\n                    d[l[j]] += 1\n                    single.append(l[j])\n            else:\n                d[l[j]] = 1\n                single.append(l[j])\n    flag = 0\n    evuse = []\n    if m % 2 == 0 and len(single) > 0:\n        flag = 1\n    if m % 2 == 1 and n % 2 == 1 and (len(single) < 1):\n        flag = 1\n    if len(single) > n:\n        flag = 1\n    if flag == 1:\n        ans.append([-1])\n    else:\n        for i in range(n):\n            s = [0] * m\n            for i in range(m // 2):\n                cha = pair.pop()\n                s[i] = cha\n                s[m - i - 1] = cha\n            if m % 2 == 1:\n                if len(single) > 0:\n                    s[m // 2] = single.pop()\n                elif len(evuse) > 0:\n                    s[m // 2] = evuse.pop()\n                else:\n                    cha = pair.pop()\n                    s[m // 2] = cha\n                    evuse.append(cha)\n            ans.append(s)\nfor i in range(len(ans)):\n    for j in range(len(ans[i])):\n        print(ans[i][j], end=' ')\n    print()", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = map(int, input().split())\n    fre = {}\n    l = []\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        l.append(temp)\n    for i in range(n):\n        for j in range(m):\n            if l[i][j] in fre:\n                fre[l[i][j]] += 1\n            else:\n                fre[l[i][j]] = 1\n    odd = 0\n    even = 0\n    oddelement = {}\n    evenelement = {}\n    evenlist = []\n    oddlist = []\n    for p in fre:\n        if fre[p] % 2 == 0:\n            even += 1\n            evenelement[p] = fre[p]\n            for i in range(fre[p] // 2):\n                evenlist.append(p)\n        else:\n            odd += 1\n            oddelement[p] = 1\n            oddlist.append(p)\n            if fre[p] > 1:\n                evenelement[p] = fre[p] - 1\n                for i in range((fre[p] - 1) // 2):\n                    evenlist.append(p)\n    oddindex = 0\n    evenindex = 0\n    if len(oddlist) > n:\n        print('-1')\n        continue\n    if m % 2 == 0 and odd != 0 or (m % 2 == 1 and (n % 2 == 0 and odd % 2 != 0 or (n % 2 == 1 and odd % 2 != 1))):\n        print('-1')\n        continue\n    elif m % 2 == 0:\n        for _ in range(n):\n            temp = []\n            for i in range(m // 2):\n                print(evenlist[evenindex], end=' ')\n                temp.append(evenlist[evenindex])\n                evenindex += 1\n            for q in range(m // 2 - 1, -1, -1):\n                print(temp[q], end=' ')\n            print('')\n    else:\n        if len(oddlist) < n:\n            popo = n - len(oddlist)\n            for i in range(popo // 2):\n                oddlist.append(evenlist[i])\n                oddlist.append(evenlist[i])\n            evenlist = evenlist[popo // 2:]\n        for _ in range(n):\n            temp = []\n            for i in range(m // 2):\n                print(evenlist[evenindex], end=' ')\n                temp.append(evenlist[evenindex])\n                evenindex += 1\n            print(oddlist[oddindex], end=' ')\n            oddindex += 1\n            for q in range(m // 2 - 1, -1, -1):\n                print(temp[q], end=' ')\n            print('')", "def display(arr):\n    for i in arr:\n        final = ''\n        for j in i:\n            final += str(j) + ' '\n        print(final)\n\ndef solve():\n    (n, m) = map(int, input().split())\n    d = {}\n    x = []\n    y = []\n    for i in range(0, n):\n        k = list(map(int, input().split()))\n        x.append(k)\n        y.append([0] * m)\n        for i in k:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n    i1 = 0\n    j1 = 0\n    f = 0\n    num_odd = 0\n    for i in d:\n        if d[i] % 2 == 1:\n            num_odd += 1\n    if m % 2 == 0:\n        if num_odd > 0:\n            print(-1)\n            return\n        else:\n            for i in d:\n                for j in range(0, int(d[i] / 2)):\n                    y[i1][j1] = i\n                    y[i1][m - j1 - 1] = i\n                    if j1 == int(m / 2) - 1:\n                        j1 = 0\n                        i1 += 1\n                    else:\n                        j1 += 1\n    else:\n        if num_odd > n:\n            print(-1)\n            return\n        for i in d:\n            if d[i] % 2 == 0:\n                for j in range(0, int(d[i] / 2)):\n                    if i1 < n and j1 < int(m / 2):\n                        y[i1][j1] = i\n                        y[i1][m - j1 - 1] = i\n                        if j1 == int(m / 2) - 1:\n                            j1 = 0\n                            i1 += 1\n                        else:\n                            j1 += 1\n                    else:\n                        y[f][int(m / 2)] = i\n                        y[f + 1][int(m / 2)] = i\n                        f += 2\n        for i in d:\n            if d[i] % 2 == 1:\n                y[f][int(m / 2)] = i\n                f += 1\n                d[i] -= 1\n                for j in range(0, int(d[i] / 2)):\n                    if i1 < n and j1 < int(m / 2):\n                        y[i1][j1] = i\n                        y[i1][m - j1 - 1] = i\n                        if j1 == int(m / 2) - 1:\n                            j1 = 0\n                            i1 += 1\n                        else:\n                            j1 += 1\n                    else:\n                        y[f][int(m / 2)] = i\n                        y[f + 1][int(m / 2)] = i\n                        f += 2\n    display(y)\nt = int(input())\nfor tt in range(0, t):\n    solve()", "import math\n\ndef reshape(the_list, r, c):\n    if r * c != len(the_list):\n        raise ValueError('Invalid new shape')\n    return [the_list[tr * c:(tr + 1) * c] for tr in range(0, r)]\nt = int(input())\nfor test_case in range(0, t):\n    (r, c) = [int(x) for x in input().split(' ')]\n    mat = []\n    mat_map = {}\n    possible = True\n    for i in range(0, r):\n        row = [int(x) for x in input().split(' ')]\n        mat.append(row)\n        for val in row:\n            if val in mat_map:\n                mat_map[val] += 1\n            else:\n                mat_map[val] = 1\n    evens = 0\n    odds = 0\n    for value in mat_map.values():\n        if value % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    if c % 2 == 0:\n        if odds > 0:\n            possible = False\n    elif odds > r:\n        possible = False\n    elif odds < r:\n        if (r - odds) % 2 != 0:\n            possible = False\n    if possible:\n        r_max = r\n        c_max = math.floor(c / 2)\n        full = False\n        max_count = r_max * c_max\n        singles = []\n        new_arr = []\n        for (key, value) in mat_map.items():\n            remaining = max_count - len(new_arr)\n            if value % 2 != 0:\n                singles.append(key)\n                value -= 1\n            if remaining == 0:\n                singles += [key] * value\n            elif int(value / 2) <= remaining:\n                new_arr += [key] * int(value / 2)\n            else:\n                new_arr += [key] * remaining\n                singles += [key] * (value - 2 * remaining)\n        new_arr_2 = reshape(new_arr, r_max, c_max)\n        if len(singles) == 0:\n            for row_pos in range(0, r_max):\n                temp_arr = new_arr_2[row_pos] + new_arr_2[row_pos][::-1]\n                print(' '.join([str(x) for x in temp_arr]))\n        else:\n            for row_pos in range(0, r_max):\n                temp_arr = new_arr_2[row_pos] + [singles[row_pos]] + new_arr_2[row_pos][::-1]\n                print(' '.join([str(x) for x in temp_arr]))\n    else:\n        print('-1')", "from collections import Counter\n\ndef genPal(d, s):\n    a = [None] * s\n    i = 0\n    m = s // 2\n    while i < m:\n        for (x, y) in d.items():\n            if y >= 2:\n                (a[i], a[-i - 1]) = (x, x)\n                d[x] -= 2\n                break\n        else:\n            return (d, [-10000000.0])\n        i += 1\n    if s % 2 == 1:\n        for (x, y) in d.items():\n            if y == 1:\n                a[m] = x\n                d[x] -= 1\n                return (d, a)\n        for (x, y) in d.items():\n            if y % 2 == 1:\n                a[m] = x\n                d[x] -= 1\n                return (d, a)\n        for (x, y) in d.items():\n            if y > 1:\n                a[m] = x\n                d[x] -= 1\n                return (d, a)\n        return (d, [-10000000.0])\n    else:\n        return (d, a)\nfor _t in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    mat = []\n    for i in range(n):\n        mat.extend(list(map(int, input().split())))\n    d = Counter(mat)\n    ans = []\n    for i in range(n):\n        (d, v) = genPal(d, m)\n        if -10000000.0 in v:\n            print(-1)\n            break\n        else:\n            ans.append(v)\n    else:\n        for i in ans:\n            print(*i)", "from collections import deque\nT = int(input())\nfor t in range(T):\n    (n, m) = map(int, input().split())\n    D = dict()\n    A = []\n    for i in range(n):\n        A.append(list(map(int, input().split())))\n        for j in range(m):\n            if A[i][j] in D:\n                D[A[i][j]] += 1\n            else:\n                D[A[i][j]] = 1\n    noo = 0\n    for x in D:\n        if D[x] % 2 != 0:\n            noo += 1\n    if m % 2 == 0:\n        if noo:\n            print(-1)\n            continue\n    elif noo > n:\n        print(-1)\n        continue\n    odds = deque([])\n    evens = deque([])\n    for x in D:\n        if D[x] % 2 == 0:\n            evens.append(x)\n        else:\n            odds.append(x)\n    answer = []\n    for i in range(n):\n        s = deque([])\n        if m % 2 == 1:\n            if odds:\n                s.append(odds[0])\n                D[odds[0]] -= 1\n                el = odds.popleft()\n                if D[el] > 0:\n                    evens.append(el)\n            else:\n                s.append(evens[0])\n                D[evens[0]] -= 1\n                el = evens.popleft()\n                odds.append(el)\n        for j in range(m // 2):\n            if evens:\n                el = evens[0]\n                s.appendleft(el)\n                s.append(el)\n                D[el] -= 2\n                if D[el] == 0:\n                    evens.popleft()\n            else:\n                el = odds[0]\n                s.appendleft(el)\n                s.append(el)\n                D[el] -= 2\n        for x in s:\n            print(x, end=' ')\n        print()", "from collections import Counter\n\ndef print_row(row, mid=None):\n    left = [e for (i, e) in enumerate(row) if i % 2 == 0]\n    right = [e for (i, e) in enumerate(row) if i % 2 == 1]\n    if mid:\n        final_row = left + [mid] + right\n    else:\n        final_row = left + right\n    print(' '.join(map(str, final_row)))\nT = int(input())\nNOT_POSSIBLE = -1\nfor test_case in range(1, T + 1):\n    (N, M) = map(int, input().split())\n    all_elements = []\n    for row in range(N):\n        all_elements.extend(list(map(int, input().split())))\n    all_counts = dict(Counter(all_elements).most_common())\n    odd_count_elements = []\n    for (elem, count) in all_counts.items():\n        if count % 2 == 1:\n            odd_count_elements.append(elem)\n            all_counts[elem] -= 1\n    if M % 2 == 0:\n        if odd_count_elements:\n            print(NOT_POSSIBLE)\n        else:\n            all_elements.sort()\n            for row in range(N):\n                print_row(all_elements[row * M:(row + 1) * M])\n    else:\n        ocel = len(odd_count_elements)\n        if ocel > N or (N - ocel) % 2 != 0:\n            print(NOT_POSSIBLE)\n        else:\n            all_elements.sort()\n            for oce in odd_count_elements:\n                all_elements.remove(oce)\n            if ocel < N:\n                for i in range(N - ocel):\n                    odd_count_elements.append(all_elements.pop())\n            for row in range(N):\n                print_row(all_elements[row * (M - 1):(row + 1) * (M - 1)], mid=odd_count_elements.pop())", "from collections import Counter\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input().split())))\n    count = Counter()\n    for i in range(n):\n        for j in range(m):\n            count[matrix[i][j]] += 1\n    odd_possible = 0\n    if m % 2 == 1:\n        odd_possible = n\n    freq = list(count.values())\n    odd_values = 0\n    for i in freq:\n        if i % 2 == 1:\n            odd_values += 1\n    if odd_values > odd_possible:\n        print(-1)\n    else:\n        odd_list = []\n        even_list = []\n        for i in count:\n            if count[i] % 2 == 1:\n                odd_list.append(i)\n                even_list += [i] * ((count[i] - 1) // 2)\n            else:\n                even_list += [i] * (count[i] // 2)\n        answer = []\n        if odd_possible == 0:\n            i = 0\n            step = m // 2\n            for j in range(n):\n                half = even_list[i:i + step]\n                o_half = half[::-1]\n                answer.append(half + o_half)\n                i += step\n        else:\n            i = 0\n            step = m // 2\n            for j in range(n):\n                half = even_list[i:i + step]\n                o_half = half[::-1]\n                if odd_list == []:\n                    odd_list += [even_list[i + step]] * 2\n                    i += 1\n                middle = odd_list.pop()\n                answer.append(half + [middle] + o_half)\n                i += step\n        for i in answer:\n            print(*i)"]