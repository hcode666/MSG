["(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nfor i in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nfor i in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nfor i in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nfor i in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "def f(r, i, j, v):\n    r[i][j] = min(r[i][j], v) if j in r[i] else v\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    ma = 1 << a[z]\n    if ln == 0:\n        r[0][0] = 0\n        r[1][ma] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            f(r, 1, ma | m, l[0][m] + 1)\n        for m in l[1]:\n            f(r, 1, ma | m, l[1][m] + 1)\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        f(r, 1, ma | m0 | m1, l0[i0][m0] + l1[i1][m1] + 1)\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                f(r, 0, m0 | m1, l0[1][m0] + l1[1][m1])\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)", "(dt, a) = (None, None)\n\ndef dfs(z):\n    r = [{}, {}]\n    ln = len(dt[z])\n    if ln == 0:\n        r[0][0] = 0\n        r[1][1 << a[z]] = 1\n    elif ln == 1:\n        l = dfs(dt[z][0])\n        r[0] = l[1]\n        for m in l[0]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[0][m] + 1) if 1 << a[z] | m in r[1] else l[0][m] + 1\n        for m in l[1]:\n            r[1][1 << a[z] | m] = min(r[1][1 << a[z] | m], l[1][m] + 1) if 1 << a[z] | m in r[1] else l[1][m] + 1\n    elif ln == 2:\n        l0 = dfs(dt[z][0])\n        l1 = dfs(dt[z][1])\n        for i0 in range(2):\n            for i1 in range(2):\n                for m0 in l0[i0]:\n                    for m1 in l1[i1]:\n                        r[1][1 << a[z] | m0 | m1] = min(r[1][1 << a[z] | m0 | m1], l0[i0][m0] + l1[i1][m1] + 1) if 1 << a[z] | m0 | m1 in r[1] else l0[i0][m0] + l1[i1][m1] + 1\n        for m0 in l0[1]:\n            for m1 in l1[1]:\n                r[0][m0 | m1] = min(r[0][m0 | m1], l0[1][m0] + l1[1][m1]) if m0 | m1 in r[0] else l0[1][m0] + l1[1][m1]\n    return r\nt = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split())\n    a = [0] + [int(x) - 1 for x in input().split()]\n    dt = [[] for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        dt[u].append(v)\n    r = dfs(1)\n    k = (1 << k) - 1\n    if k in r[0]:\n        v = min(r[0][k], r[1][k])\n    elif k in r[1]:\n        v = r[1][k]\n    else:\n        v = -1\n    print(v)"]