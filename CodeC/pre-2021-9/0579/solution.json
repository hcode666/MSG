["from math import gcd\nfor _ in range(int(input())):\n    N = int(input())\n    L = list(map(int, input().split()))\n    g = gcd(L[0], L[1])\n    for i in range(2, N):\n        if g == 1:\n            break\n        g = gcd(g, L[i])\n    print(N if g == 1 else -1)", "def gcd(a, k):\n    while a:\n        k %= a\n        (k, a) = (a, k)\n    return k\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a[0] < a[1]:\n        k = a[0]\n    else:\n        k = a[1]\n    for l in a:\n        k = gcd(k, l)\n    if k == 1:\n        print(n)\n    else:\n        print(-1)", "def gcd(a, k):\n    while a:\n        k %= a\n        (k, a) = (a, k)\n    return k\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a[0] < a[1]:\n        k = a[0]\n    else:\n        k = a[1]\n    for l in a:\n        k = gcd(k, l)\n    if k == 1:\n        print(n)\n    else:\n        print(-1)", "def gcd(a, k):\n    while a:\n        k %= a\n        (k, a) = (a, k)\n    return k\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a[0] < a[1]:\n        k = a[0]\n    else:\n        k = a[1]\n    for l in a:\n        k = gcd(k, l)\n    if k == 1:\n        print(n)\n    else:\n        print(-1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    m = min(l)\n    f = 0\n    for j in range(2, m + 1):\n        c = 0\n        for k in l:\n            if k % j == 0:\n                c = c + 1\n            else:\n                break\n        if c == len(l):\n            f = 1\n            break\n    if f:\n        print(-1)\n    else:\n        print(n)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    m = min(l)\n    f = 0\n    for j in range(2, m + 1):\n        c = 0\n        for k in l:\n            if k % j == 0:\n                c = c + 1\n            else:\n                break\n        if c == len(l):\n            f = 1\n            break\n    if f:\n        print(-1)\n    else:\n        print(n)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef arr_gcd(arr):\n    res = arr[0]\n    for i in range(1, len(arr)):\n        res = gcd(res, arr[i])\n    return res\n\ndef soln(n, arr):\n    if arr_gcd(arr) != 1:\n        return -1\n    return n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(soln(n, arr))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = l[0]\n    for j in range(1, n):\n        a = math.gcd(l[j], a)\n    if a == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = l[0]\n    for j in range(1, n):\n        a = math.gcd(l[j], a)\n    if a == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = l[0]\n    for j in range(1, n):\n        a = math.gcd(l[j], a)\n    if a == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = l[0]\n    for j in range(1, n):\n        a = math.gcd(l[j], a)\n    if a == 1:\n        print(n)\n    else:\n        print(-1)", "import sys\nfrom os import path\nif path.exists('Input.txt'):\n    sys.stdin = open('Input.txt', 'r')\n    sys.stdout = open('Output.txt', 'w')\nfrom math import gcd, floor, sqrt, log, ceil\nimport math\nfrom collections import deque\nread = lambda : int(input())\nli = lambda : list(map(int, input().split()))\nread2 = lambda : map(int, input().split())\nM = 1000000007\n(yes, no) = ('YES', 'NO')\n\ndef fact(n):\n    return math.factorial(n)\n\ndef isPrime(n):\n    if n % 2 == 0 and n != 2 or n < 2:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef solve():\n    n = read()\n    a = li()\n    ans = a[0]\n    for i in range(1, n):\n        ans = gcd(ans, a[i])\n    if ans == 1:\n        print(n)\n    else:\n        print(-1)\nfor _ in range(int(input())):\n    solve()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = a[0]\n    for i in range(1, n):\n        l = math.gcd(a[i], l)\n    if l == 1:\n        print(n)\n    else:\n        print('-1')", "read_int = lambda : int(input().strip())\nread_str = lambda : input().strip()\nread_str_arr = lambda : input().strip().split()\nread_int_arr = lambda : [int(x) for x in input().strip().split()]\nfrom math import gcd\n\ndef solve():\n    n = read_int()\n    a = read_int_arr()\n    g = a[0]\n    for i in a:\n        g = gcd(g, i)\n        if g == 1:\n            break\n    if g == 1:\n        print(n)\n    else:\n        print(-1)\nfor _ in range(int(input())):\n    solve()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = l[0]\n    for i in range(1, n):\n        a = math.gcd(l[i], a)\n    if a == 1:\n        print(n)\n    else:\n        print('-1')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = l[0]\n    for i in range(1, n):\n        a = math.gcd(l[i], a)\n    if a == 1:\n        print(n)\n    else:\n        print('-1')", "from functools import reduce\nimport math\n\ndef solve():\n    ans = -1\n    gcd = reduce(lambda x, y: math.gcd(x, y), lst)\n    if gcd == 1:\n        ans = n\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    solve()", "from functools import reduce\nimport math\n\ndef solve():\n    ans = -1\n    gcd = reduce(lambda x, y: math.gcd(x, y), lst)\n    if gcd == 1:\n        ans = n\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    solve()", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = l[0]\n    for j in range(1, n):\n        a = math.gcd(l[j], a)\n    if a == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = l[0]\n    for j in range(1, n):\n        a = math.gcd(l[j], a)\n    if a == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    L = list(map(int, input().split()))\n    ans = L[0]\n    for i in range(1, n):\n        ans = math.gcd(ans, L[i])\n    if ans == 1:\n        print(n)\n    else:\n        print(-1)", "from cmath import pi\nfrom distutils import extension\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil\nfrom collections import deque, defaultdict\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\nfor _ in range(ii()):\n    n = ii()\n    arr = il()\n    res = arr[0]\n    for l in range(1, n):\n        res = gcd(res, arr[l])\n        if res == 1:\n            ot(n)\n            break\n    if res != 1:\n        ot(-1)", "from sys import stdin, stdout\nfrom math import gcd\nfrom collections import Counter\nfrom functools import reduce\nimport time\nimport bisect\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef gcd_of_list(arr):\n    gcd = arr[0]\n    for i in arr:\n        gcd = math.gcd(gcd, i)\n    return gcd\n\ndef main():\n    for _ in tr():\n        n = nl()\n        a = ln()\n        if reduce(gcd, a) == 1:\n            print(n)\n        else:\n            print(-1)\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nfrom functools import reduce\nimport time\nimport bisect\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef gcd_of_list(arr):\n    gcd = arr[0]\n    for i in arr:\n        gcd = math.gcd(gcd, i)\n    return gcd\n\ndef main():\n    for _ in tr():\n        n = nl()\n        a = ln()\n        if reduce(math.gcd, a) == 1:\n            print(n)\n        else:\n            print(-1)\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nimport bisect\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef gcd_of_list(arr):\n    gcd = arr[0]\n    for i in arr:\n        gcd = math.gcd(gcd, i)\n    return gcd\n\ndef main():\n    for _ in tr():\n        n = nl()\n        a = ln()\n        if gcd_of_list(a) == 1:\n            print(n)\n        else:\n            print(-1)\nmain()", "from math import gcd\nfrom functools import reduce\n\ndef find_gcd(list):\n    x = reduce(gcd, list)\n    return x\nfor _ in range(int(input())):\n    (n, l) = (int(input()), list(map(int, input().split())))\n    if find_gcd(l) != 1:\n        print(-1)\n    else:\n        print(n)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    H = l[0]\n    for i in range(1, n):\n        H = math.gcd(H, l[i])\n    if H == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    H = l[0]\n    for i in range(1, n):\n        H = math.gcd(H, l[i])\n    if H == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    H = l[0]\n    for i in range(1, n):\n        H = math.gcd(H, l[i])\n    if H == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    H = l[0]\n    for i in range(1, n):\n        H = math.gcd(H, l[i])\n    if H == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    H = l[0]\n    for i in range(1, n):\n        H = math.gcd(H, l[i])\n    if H == 1:\n        print(n)\n    else:\n        print(-1)", "def gcd(a, b):\n    if b > a:\n        return gcd(b, a)\n    elif b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    val = arr[0]\n    for i in range(1, n):\n        val = gcd(arr[i], val)\n        if val == 1:\n            break\n    if val == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    H = l[0]\n    for i in range(1, n):\n        H = math.gcd(H, l[i])\n    if H == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nt = int(input())\nfor z in range(t):\n    flag = 0\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = a[0]\n    for i in range(1, n):\n        result = math.gcd(result, a[i])\n    if result == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = l[0]\n    for i in range(1, n):\n        s = math.gcd(s, l[i])\n    if s == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    N = int(input())\n    listx = list(map(int, input().split()))\n    gcd = listx[0]\n    for i in listx:\n        gcd = math.gcd(gcd, i)\n        if gcd == 1:\n            break\n    if gcd == 1:\n        print(N)\n    else:\n        print(-1)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for i in range(n):\n        g = math.gcd(g, l[i])\n        if g == 1:\n            break\n    if g == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for i in range(n):\n        g = math.gcd(g, l[i])\n        if g == 1:\n            break\n    if g == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for i in range(n):\n        g = math.gcd(g, l[i])\n        if g == 1:\n            break\n    if g == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = a[0]\n    for j in range(n):\n        s = math.gcd(s, a[j])\n        if s == 1:\n            break\n    print(n if s == 1 else -1)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for i in range(n):\n        g = math.gcd(g, l[i])\n        if g == 1:\n            break\n    if g == 1:\n        print(n)\n    else:\n        print(-1)", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\nfor _ in range(int(input())):\n    n = int(input())\n    li = [int(x) for x in input().strip().split()]\n    gc = li[0]\n    for i in range(n):\n        gc = gcd(gc, li[i])\n        if gc == 1:\n            break\n    if gc == 1:\n        print(n)\n    else:\n        print(-1)", "def compute_hcf(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    gcd = a[0]\n    for i in range(len(a)):\n        gcd = compute_hcf(gcd, a[i])\n        if gcd == 1:\n            break\n    if gcd == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = a[0]\n    for j in range(n):\n        s = math.gcd(s, a[j])\n        if s == 1:\n            break\n    print(n if s == 1 else -1)", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    array = list(map(int, input().split()))\n    gcd = array[0]\n    for i in range(n):\n        gcd = math.gcd(gcd, array[i])\n        if gcd == 1:\n            break\n    if gcd == 1:\n        print(n)\n    else:\n        print(-1)\n    t -= 1", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a[0]\n    for i in range(1, n):\n        b = gcd(b, a[i])\n        if b == 1:\n            print(n)\n            break\n    else:\n        print(-1)", "from math import *\nimport sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for i in range(1, n):\n        g = gcd(g, l[i])\n    if g == 1:\n        print(n)\n    else:\n        print(-1)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = a[0]\n    for i in range(1, n):\n        s = gcd(s, a[i])\n    if s == 1:\n        print(n)\n    else:\n        print(-1)", "def gcd(a, b):\n    if b > a:\n        return gcd(b, a)\n    elif b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    val = arr[0]\n    for i in range(1, n):\n        val = gcd(arr[i], val)\n        if val == 1:\n            break\n    if val == 1:\n        print(n)\n    else:\n        print(-1)", "def gcd(a, b):\n    if b > a:\n        return gcd(b, a)\n    elif b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    val = arr[0]\n    for i in range(1, n):\n        val = gcd(val, arr[i])\n    if val == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    x = math.gcd(arr[0], arr[1])\n    for element in arr[2:]:\n        x = math.gcd(x, element)\n    if x == 1:\n        print(N)\n    else:\n        print(-1)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    g = gcd(arr[1], arr[0])\n    for i in range(1, n):\n        g = gcd(arr[i], g)\n    if g == 1:\n        print(n)\n    else:\n        print(-1)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    gcdd = arr[0]\n    for i in arr:\n        gcdd = gcd(gcdd, i)\n    print(len(arr)) if gcdd == 1 else print(-1)", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    num1 = l[0]\n    num2 = l[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    if gcd == 1:\n        print(len(l))\n    else:\n        print(-1)", "import math\nfor t in range(0, int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    a = 0\n    res = [0] * n\n    res[0] = arr[0]\n    for i in range(1, len(arr)):\n        res[i] = math.gcd(arr[i], res[i - 1])\n        if res[i] == 1:\n            print(n)\n            a = 1\n            break\n    if a != 1:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    li1 = list(map(int, input().split()))\n    g1 = math.gcd(li1[0], li1[1])\n    for i in range(2, n):\n        g1 = math.gcd(g1, li1[i])\n    if g1 == 1:\n        print(n)\n    else:\n        print('-1')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(1, n):\n        a = l[0]\n        b = l[i]\n        while b > 0:\n            (a, b) = (b, a % b)\n        if a == 1:\n            break\n    if a == 1:\n        print(n)\n    else:\n        print(-1)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    t = [0] * n\n    t[0] = l[0]\n    for i in range(1, n):\n        t[i] = gcd(l[i], t[i - 1])\n    found = False\n    for i in t:\n        if i == 1:\n            found = True\n            print(n)\n            break\n    if not found:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(1, n):\n        a = l[0]\n        b = l[i]\n        while b > 0:\n            (a, b) = (b, a % b)\n        if a == 1:\n            break\n    if a == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nT = int(input())\nfor p in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = math.gcd(a[0], a[1])\n    for i in range(2, n):\n        g = math.gcd(g, a[i])\n    if g == 1:\n        print(n)\n    else:\n        print('-1')", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = math.gcd(a[0], a[1])\n    for i in range(2, len(a)):\n        g = math.gcd(g, a[i])\n    if g == 1:\n        print(n)\n    else:\n        print(-1)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    g = arr[0]\n    for i in arr:\n        g = gcd(g, i)\n    if g == 1:\n        print(n)\n    else:\n        print(-1)\n    t -= 1", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    c = 0\n    l = list(map(int, input().split()))\n    p = len(l)\n    m = l[0]\n    for j in range(1, p):\n        if gcd(l[j], m) == 1:\n            c += 1\n    if c >= 1:\n        print(n)\n    else:\n        print(-1)", "import math as b\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    c = 0\n    l = list(map(int, input().split()))\n    p = len(l)\n    m = l[0]\n    for j in range(1, p):\n        m = b.gcd(l[j], m)\n    if m == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    lst = list(map(int, input().split()))\n    mem = lst[0]\n    for i in range(1, len(lst)):\n        mem = math.gcd(lst[i], mem)\n    if mem == 1:\n        print(n)\n    else:\n        print('-1')\n    t -= 1", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    gcd = [l[0]]\n    for i in range(1, len(l)):\n        p = math.gcd(gcd[i - 1], l[i])\n        gcd.append(p)\n    ans = -1\n    for j in range(len(gcd)):\n        if gcd[j] == 1:\n            ans = j + 1\n    print(ans)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if 1 in arr:\n        print(n)\n    else:\n        res = arr[0]\n        for i in range(1, len(arr)):\n            res = gcd(res, arr[i])\n        print(n) if res == 1 else print(-1)", "def GCD(a, b):\n    if b == 0:\n        return a\n    else:\n        return GCD(b, a % b)\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    li = [int(x) for x in input().split()]\n    if 1 in li:\n        print(n)\n    else:\n        res = li[0]\n        for i in range(1, n):\n            res = GCD(res, li[i])\n        if res == 1:\n            print(n)\n        else:\n            print('-1')", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = math.gcd(l[0], l[1])\n    for i in l[2:]:\n        x = math.gcd(x, i)\n    print(n if x == 1 else -1)", "from math import gcd\nfrom functools import reduce\nfor _ in range(int(input())):\n    (n, a) = (int(input()), list(map(int, input().split())))\n    print(n if reduce(gcd, a) == 1 else -1)", "gcd = lambda a, b: a if b == 0 else gcd(b, a % b)\nfor _ in range(int(input())):\n    (_, a) = (input(), list(map(int, input().split())))\n    (g, m) = (0, -1)\n    for (i, x) in enumerate(a):\n        g = gcd(g, x)\n        if g == 1 and i + 1 > m and (i != 0):\n            m = i + 1\n    print(m)", "from math import gcd\nfor _ in range(int(input())):\n    N = int(input())\n    lst = list(map(int, input().split()))\n    ans = lst[0]\n    for i in range(1, N):\n        ans = gcd(ans, lst[i])\n    if ans == 1:\n        print(N)\n    else:\n        print(-1)", "import math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    x = math.gcd(arr[0], arr[1])\n    for element in arr[2:]:\n        x = math.gcd(x, element)\n    if x == 1:\n        print(N)\n    else:\n        print(-1)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for i in range(1, n):\n        g = math.gcd(g, l[i])\n    if g == 1:\n        print(n)\n    else:\n        print(-1)", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    flag = False\n    gcd = arr[0]\n    for i in range(1, len(arr)):\n        gcd = find_gcd(gcd, arr[i])\n        if gcd == 1:\n            flag = True\n            break\n    if flag:\n        print(len(arr))\n    else:\n        print('-1')", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = a[0]\n    for i in range(1, n):\n        g = gcd(g, a[i])\n    if g == 1:\n        print(n)\n    else:\n        print(-1)", "t = int(input())\n\ndef GCD(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    gcd = l[0]\n    for i in l:\n        gcd = GCD(gcd, i)\n    if gcd == 1:\n        print(n)\n    else:\n        print(-1)", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\ntry:\n    for _ in range(int(input())):\n        n = int(input())\n        l = list(map(int, input().split()))\n        r = l[0]\n        for i in l[1:]:\n            r = gcd(r, i)\n        if r == 1:\n            print(n)\n        else:\n            print(-1)\nexcept:\n    pass", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = l[0]\n    for i in range(1, n):\n        a = gcd(l[i], a)\n    if a == 1:\n        print(n)\n    else:\n        print(-1)", "t = int(input())\nl = []\nfrom math import gcd\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    hcf = a[0]\n    for j in range(1, n):\n        hcf = gcd(hcf, a[j])\n    if hcf == 1:\n        l.append(n)\n    else:\n        l.append(-1)\nfor i in l:\n    print(i)", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    flag = False\n    gcd = arr[0]\n    for i in range(1, len(arr)):\n        gcd = find_gcd(gcd, arr[i])\n        if gcd == 1:\n            flag = True\n            break\n    if flag:\n        print(len(arr))\n    else:\n        print('-1')", "def gcd(m, n):\n    if n == 0:\n        return m\n    else:\n        return gcd(n, m % n)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    g = 0\n    l = list(map(int, input().split()))\n    g = l[0]\n    for j in range(1, n):\n        g = gcd(g, l[j])\n    if g == 1:\n        print(n)\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    x = math.gcd(arr[0], arr[1])\n    for element in arr[2:]:\n        x = math.gcd(x, element)\n    if x == 1:\n        print(N)\n    else:\n        print(-1)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    g = math.gcd(a[0], a[1])\n    for i in a[2:]:\n        g = math.gcd(g, i)\n    if g == 1:\n        print(n)\n    else:\n        print(-1)", "try:\n\n    def is_valid(x, y, d):\n        q = str(x) + ',' + str(y)\n        if q in d:\n            return d[q]\n        if y == 0:\n            d[q] = x\n            return x\n        else:\n            d[q] = is_valid(y, x % y, d)\n            return d[q]\n    T = int(input())\n    for ijkl in range(0, T):\n        n = int(input())\n        a = list(map(int, input().split()))\n        d = {}\n        gcd = is_valid(a[0], a[1], d)\n        for i in a[2:]:\n            gcd = is_valid(gcd, i, d)\n        if gcd == 1:\n            print(n)\n        else:\n            print(-1)\nexcept:\n    pass", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    g = math.gcd(a[0], a[1])\n    for i in a[2:]:\n        g = math.gcd(g, i)\n    if g == 1:\n        print(n)\n    else:\n        print(-1)"]