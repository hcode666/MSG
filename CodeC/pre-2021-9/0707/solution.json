["for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    max = 2 ** n - 1\n    if k >= 2 ** (n - 1):\n        k = 2 ** (n - 1)\n    else:\n        k = k\n    any = 0 ^ max\n    ans = any * (2 * k)\n    print(ans)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    max = 2 ** n - 1\n    if k >= 2 ** (n - 1):\n        k = 2 ** (n - 1)\n    else:\n        k = k\n    any = 0 ^ max\n    ans = any * (2 * k)\n    print(ans)", "t = int(input())\nfor i in range(1, t + 1):\n    (N, k) = map(int, input().strip().split())\n    max = 2 ** N - 1\n    if k >= 2 ** (N - 1):\n        k = 2 ** (N - 1)\n    else:\n        k = k\n    any = 0 ^ max\n    ans = any * (2 * k)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    if k == 0:\n        print(0)\n    else:\n        x = 2 ** n\n        if k > x // 2:\n            k = x // 2\n        ans = k * (x - 1)\n        print(ans * 2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    if k == 0:\n        print(0)\n    else:\n        x = 2 ** n\n        if k > x // 2:\n            k = x // 2\n        ans = k * (x - 1)\n        print(ans * 2)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k == 0:\n        print(0)\n    else:\n        x = 2 ** n\n        if k > x // 2:\n            k = x // 2\n        ans = k * (x - 1)\n        print(ans * 2)", "for k in range(int(input())):\n    (a, b) = map(int, input().split())\n    print((2 ** a - 1) * min(2 ** a, 2 * b))", "t = int(input())\nwhile t != 0:\n    (n, k) = map(int, input().split())\n    s = 2 ** n - 1\n    print(min(2 * k, 2 ** n) * s)\n    t = t - 1", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    j = min(2 * k, 2 ** n) * (2 ** n - 1)\n    print(j)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = 2 ** n - 1\n    if k > 2 ** (n - 1):\n        print(2 ** (n - 1) * a * 2)\n    else:\n        print(2 * k * a)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(min(2 * k, pow(2, n)) * (pow(2, n) - 1))", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = pow(2, n)\n    m = min(p, 2 * k) * (p - 1)\n    print(m)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    xyz = '1' * n\n    x = int(xyz, 2)\n    if k > 2 ** n // 2:\n        k = 2 ** n // 2\n    print(k * x * 2)", "t = int(input())\nfor i in range(1, t + 1):\n    (N, k) = map(int, input().strip().split())\n    max = 2 ** N - 1\n    if k >= 2 ** (N - 1):\n        k = 2 ** (N - 1)\n    else:\n        k = k\n    any = 0 ^ max\n    ans = any * (2 * k)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    maxi = int(2 ** n / 2)\n    oneSwap = int((2 ** n - 1) * 2)\n    ans = oneSwap * k\n    if k > maxi:\n        ans = oneSwap * maxi\n    print(int(ans))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    maxi = int(2 ** n / 2)\n    oneSwap = int((2 ** n - 1) * 2)\n    ans = oneSwap * k\n    if k > maxi:\n        ans = oneSwap * maxi\n    print(int(ans))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    maxi = int(2 ** n / 2)\n    oneSwap = int((2 ** n - 1) * 2)\n    ans = oneSwap * k\n    if k > maxi:\n        ans = oneSwap * maxi\n    print(int(ans))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(min(2 * k, 2 ** n) * (2 ** n - 1))", "import math\n\ndef maxArrXor(n, k):\n    return min(2 * k, pow(2, n)) * (pow(2, n) - 1)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().strip().split(' '))\n    print(maxArrXor(n, k))", "T = int(input())\nfor _ in range(T):\n    (n, k) = list(map(int, input().split()))\n    L = pow(2, n)\n    tot = 0\n    if L // 2 <= k:\n        tot = L // 2 * (L - 1) * 2\n    else:\n        tot = k * (L - 1) * 2\n    print(tot)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = min(2 * k, 2 ** n) * (2 ** n - 1)\n    print(x)", "def gg():\n    gh = 6 ^ 7\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ar_size = 2 ** n\n    for ii in range(2):\n        dd = 8 << 5\n        fg = gg()\n    print(min(k, ar_size // 2) * 2 * (ar_size - 1))", "t = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    max_ele = 2 ** n - 1\n    if k > 2 ** (n - 1):\n        print(max_ele * 2 ** (n - 1) * 2)\n    else:\n        print(max_ele * k * 2)\n    t -= 1", "t = int(input())\nfor z in range(t):\n    (n, k) = map(int, input().split())\n    print(min(2 * k, 2 ** n) * (2 ** n - 1))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = min(2 * k, 2 ** n) * (2 ** n - 1)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    m = 2 ** n - 1\n    print(min(2 * k, m + 1) * m)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    m = min(2 * k, 2 ** n) * (2 ** n - 1)\n    print(m)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    m = min(2 * k, 2 ** n) * (2 ** n - 1)\n    print(m)", "try:\n    for i in range(int(input())):\n        (n, s) = map(int, input().split())\n        x = 2 ** n - 1\n        val = min(s * 2, 2 ** n) * x\n        print(val)\nexcept:\n    pass", "import math\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(min(2 * b, 2 ** a) * (2 ** a - 1))", "import math\ntry:\n    t = int(input())\nexcept EOFError:\n    pass\nfor i in range(t):\n    count = 0\n    ls = list(input().split())\n    n = int(ls[0])\n    k = int(ls[1])\n    alen = 2 ** n\n    swaps = min(int(alen / 2), k)\n    maxsum = (alen - 1) * 2 * swaps\n    print(maxsum)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(2 * min(k, 1 << n - 1) * ((1 << n) - 1))", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    L = int(math.pow(2, n))\n    res = min(2 * k, L) * (L - 1)\n    print(res)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    L = int(math.pow(2, n))\n    res = min(2 * k, L) * (L - 1)\n    print(res)", "import io, os, sys, math\nfrom io import BytesIO, IOBase\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    word = '1' * n\n    x = int(word, 2)\n    if k > 2 ** n // 2:\n        k = 2 ** n // 2\n    print(k * x * 2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    val = 2 ** n\n    if k <= val // 2:\n        print(2 * k * (val - 1))\n    else:\n        print(val * (val - 1))", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    k = min(2 * k, 2 ** n)\n    print(k * (2 ** n - 1))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    if k >= 2 ** (n - 1):\n        print(2 ** n * (2 ** n - 1))\n    else:\n        print(2 * k * (2 ** n - 1))", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    x = 2 ** N - 1\n    print(min(2 * K, 2 ** N) * x)", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    n = 2 ** a - 1\n    m = 2 ** (a - 1)\n    if b > m:\n        print(n * m * 2)\n    else:\n        print(n * b * 2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    (s, d) = (2 ** (n - 1), (2 ** n - 1) * 2)\n    if k > s:\n        print(s * d)\n    else:\n        print(k * d)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    ans = 0\n    if k > 2 ** (n - 1):\n        k = 2 ** (n - 1)\n    val = 2 ** n - 1\n    ans = val * k\n    print(2 * ans)", "from io import BytesIO, IOBase\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    temp = pow(2, n)\n    print(2 * (temp - 1) * min(k, temp // 2))", "def maxarxor():\n    for _ in range(int(input())):\n        (N, K) = [int(x) for x in input().split()]\n        if K > 2 ** N // 2:\n            K = 2 ** N // 2\n        print((2 ** N - 1) * K * 2)\nmaxarxor()", "import math\nT = int(input())\nfor i in range(T):\n    (n, k) = map(int, input().split())\n    l = 2 ** n\n    num = l - 1\n    k = min(k, l / 2)\n    print(int(num * 2 * k))", "import math\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = 2 ** n\n    num = l - 1\n    k = min(k, l / 2)\n    print(int(num * 2 * k))", "for _ in range(int(input()) if True else 1):\n    (n, k) = map(int, input().split())\n    k = min(k, 2 ** (n - 1))\n    print(2 * k * (2 ** n - 1))", "try:\n    T = int(input())\n    for i in range(T):\n        list1 = list(map(int, input().split()))\n        N = list1[0]\n        K = list1[1]\n        max = min(2 * K, 2 ** N) * (2 ** N - 1)\n        print(max)\nexcept EOFError as e:\n    print(e)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    if k > pow(2, n - 1):\n        print((pow(2, n) - 1) * pow(2, n - 1) * 2)\n    else:\n        print((pow(2, n) - 1) * k * 2)", "for i in range(int(input())):\n    (N, K) = map(int, input().split())\n    K = min(K, 2 ** (N - 1))\n    print(2 * K * (2 ** N - 1))", "for t in range(int(input())):\n    NK = list(map(int, input().split(' ')))\n    N = NK[0]\n    K = NK[1]\n    if K <= 2 ** (N - 1):\n        print((2 ** N - 1) * K * 2)\n    else:\n        print((2 ** N - 1) * 2 ** N)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    val = pow(2, n) - 1\n    k = min(2 * k, val + 1)\n    print(val * k)", "for i in range(int(input())):\n    (N, K) = map(int, input().split())\n    K = min(K, 2 ** (N - 1))\n    print(2 * K * (2 ** N - 1))", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    res = min(2 * k, 2 ** n)\n    print((2 ** n - 1) * res)", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = 2 ** a - 1\n    if c >= b * 2:\n        print(b * 2 * c)\n    else:\n        print(c * (c + 1))", "for i in range(int(input())):\n    (N, K) = map(int, input().split())\n    arl = 2 ** N\n    ans = min(2 * K, arl) * (2 ** N - 1)\n    print(ans)", "try:\n    Test = int(input())\n    for _ in range(Test):\n        (N, K) = input().split()\n        (N, K) = (int(N), int(K))\n        L = pow(2, N)\n        ANS = min(2 * K, L) * (L - 1)\n        print(ANS)\nexcept EOFError as e:\n    print(e)", "t = int(input())\nwhile t > 0:\n    (n, k) = list(map(int, input().split()))\n    result = (2 ** n - 1) * 2 * min(k, 2 ** (n - 1))\n    print(result)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    (n, k) = list(map(int, input().split()))\n    result = (2 ** n - 1) * 2 * min(k, 2 ** (n - 1))\n    print(result)\n    t -= 1", "from math import *\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    ma = 2 ** n - 1\n    maxi = min(2 ** n // 2, k)\n    print(ma * maxi * 2)", "t = int(input())\nfor j in range(t):\n    (n, k) = map(int, input().split(' '))\n    if k <= 2 ** (n - 1):\n        print((2 ** n - 1) * 2 * k)\n    else:\n        print((2 ** n - 1) * 2 * 2 ** (n - 1))", "import io, os, sys, math\nfrom io import BytesIO, IOBase\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    word = '1' * n\n    x = int(word, 2)\n    if k > 2 ** n // 2:\n        k = 2 ** n // 2\n    print(k * x * 2)", "t = int(input())\nfor _ in range(t):\n    (n, k) = tuple(map(int, input().split()))\n    ans = min(2 * k, 2 ** n) * (2 ** n - 1)\n    print(ans)", "for x in range(int(input())):\n    (n, a) = map(int, input().split())\n    if n == 0:\n        print(0)\n    else:\n        print(min(2 * a, 2 ** n) * (2 ** n - 1))", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    numbers = pow(2, n)\n    print(min(2 * k, numbers) * (numbers - 1))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr_len = 2 ** n\n    ans = min(2 * k, arr_len) * (arr_len - 1)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    p = min(2 * k, 2 ** n)\n    print(p * (2 ** n - 1))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k == 0:\n        print(0)\n    else:\n        temp = pow(2, n) - 1\n        maxi = (temp + 1) // 2\n        if k <= maxi:\n            print(2 * k * temp)\n        else:\n            print(2 * maxi * temp)", "cases = int(input())\nfor _ in range(cases):\n    (a, b) = map(int, input().split())\n    print(min(2 * b, 2 ** a) * (2 ** a - 1))", "t = int(input())\nwhile t:\n    x = 1\n    (n, k) = map(int, input().split())\n    for i in range(n - 1):\n        x *= 2\n    print(2 * min(x, k) * (x * 2 - 1))\n    t -= 1", "t = int(input())\nfor z in range(t):\n    (n, k) = map(int, input().split())\n    x = 2 ** n - 1\n    if k > 2 ** (n - 1):\n        print(x * 2 * 2 ** (n - 1))\n    else:\n        print(x * 2 * k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = min(2 * k, 2 ** n) * (2 ** n - 1)\n    print(ans)", "for t in range(int(input())):\n    inp = input().split()\n    n = int(inp[0])\n    k = int(inp[1])\n    k = min(k, 2 ** (n - 1))\n    val = 2 * k * (2 ** n - 1)\n    print(val)", "import sys\nT = int(sys.stdin.readline())\nfor i in range(T):\n    (N, K) = map(int, sys.stdin.readline().strip().split())\n    mx = min(2 * K, pow(2, N)) * (pow(2, N) - 1)\n    sys.stdout.write(str(mx) + '\\n')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    if k == 0:\n        print(0)\n    else:\n        print((pow(2, n + 1) - 2) * min(2 ** (n - 1), k))", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    if k == 0:\n        print(0)\n    else:\n        print((pow(2, n + 1) - 2) * min(2 ** (n - 1), k))", "t = int(input())\nwhile t:\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    Range = 2 ** n - 1\n    val = min(k * 2, Range + 1) * Range\n    print(val)\n    t -= 1", "import sys\nimport math\nimport heapq\nfrom collections import defaultdict as dd\nfrom collections import OrderedDict as od\nfrom collections import deque\nfrom itertools import permutations as pp\nfrom itertools import combinations as cc\nfrom sys import stdin\nfrom functools import cmp_to_key\nfrom functools import lru_cache\nfrom bisect import bisect_left as bs_l\nfrom bisect import bisect_right as bs_r\ninput = sys.stdin.readline\nmod = 10 ** 9 + 7\nsys.setrecursionlimit(10 ** 5)\n\ndef helper(s):\n    pass\nT = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    xx = pow(2, n)\n    if k >= xx // 2:\n        print(xx * (xx - 1))\n    else:\n        print(2 * k * (xx - 1))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    x = pow(2, n)\n    m = min(2 * k, x)\n    print((x - 1) * m)", "import math\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    ls = int(math.pow(2, n))\n    lf = ls\n    ls -= 1\n    ans = int(0)\n    m = int(lf / 2)\n    if k <= m:\n        ans = 2 * k * ls\n    elif k > m:\n        ans = 2 * m * ls\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = 2 ** n - 1\n    b = min(2 * k, 2 ** n)\n    ans = b * a\n    print(ans)", "T = int(input())\nfor i in range(T):\n    (N, K) = map(int, input().split())\n    a = pow(2, N - 1)\n    if K > a:\n        print((pow(2, N) - 1) * 2 * a)\n    else:\n        print((pow(2, N) - 1) * 2 * K)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    end = pow(2, n - 1)\n    if k > end:\n        print(2 * (pow(2, n) - 1) * end)\n    else:\n        print(2 * (pow(2, n) - 1) * k)", "try:\n    t = int(input())\n    out = [-1] * t\n    for i in range(t):\n        [n, k] = input().split(' ')\n        n = int(n)\n        k = int(k)\n        out[i] = min(2 * k, 2 ** n) * (2 ** n - 1)\n    for i in range(t):\n        print(out[i])\nexcept:\n    pass", "for _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    print(min(2 ** n, 2 * k) * (2 ** n - 1))", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = 2 ** n\n    ans = min(2 * k, l) * (l - 1)\n    print(ans)", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve():\n    pass\nfor _ in range(int(input())):\n    (a, b) = get_int()\n    totalshift = min(b, 2 ** a // 2)\n    print(2 * totalshift * (2 ** a - 1))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    x = (pow(2, n) - 1) * min(2 * k, pow(2, n))\n    print(x)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    x = int(math.pow(2, n) - 1)\n    y = x // 2 + 1\n    if k >= y:\n        k = y\n    print(x * (k * 2))", "for _ in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    x = 2 ** n - 1\n    y = x // 2 + 1\n    if k >= y:\n        k = y\n    print(x * (k * 2))", "for _ in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    x = 2 ** n - 1\n    if k >= x // 2 + 1:\n        print(x * ((x // 2 + 1) * 2))\n    else:\n        print(x * (k * 2))", "for t in range(int(input())):\n    (N, K) = map(int, input().split())\n    mxn = 2 ** N\n    print(min(K, mxn // 2) * (mxn - 1) * 2)", "for _ in range(int(input())):\n    (n, k) = [int(w) for w in input().split()]\n    w = 2 ** n\n    if k >= w // 2:\n        print((w - 1) * w)\n    else:\n        print((w - 1) * (2 * k))", "T = int(input())\noutputs = []\nfor i in range(T):\n    (N, K) = map(int, input().split())\n    if K > 2 ** (N - 1):\n        K = 2 ** (N - 1)\n    outputs.append(2 * K * (2 ** N - 1))\nfor i in range(T):\n    print(outputs[i])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(min(2 * m, 2 ** n) * (2 ** n - 1))", "import math\n\ndef func1(n, k):\n    z = pow(2, n)\n    if k <= 0:\n        return 0\n    k = min(2 * k, z)\n    maximum = k * (z - 1)\n    return maximum\nt = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    print(func1(n, k))\n    t -= 1"]