["for _ in range(int(input())):\n    n = int(input())\n    rads = list(map(int, input().split()))\n    health = list(map(int, input().split()))\n    mem = max(max(rads), n)\n    temp = [0 for i in range(n + 2)]\n    for i in range(1, n + 1):\n        ma = max(0, i - rads[i - 1])\n        mi = min(n + 1, i + rads[i - 1] + 1)\n        temp[ma] += 1\n        temp[mi] -= 1\n    cnt = 0\n    for i in range(len(temp)):\n        temp[i] += cnt\n        cnt = temp[i]\n    cuts = temp[1:n + 1]\n    cuts.sort()\n    health.sort()\n    if cuts == health:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    rads = list(map(int, input().split()))\n    health = list(map(int, input().split()))\n    mem = max(max(rads), n)\n    temp = [0 for i in range(n + 2)]\n    for i in range(1, n + 1):\n        ma = max(0, i - rads[i - 1])\n        mi = min(n + 1, i + rads[i - 1] + 1)\n        temp[ma] += 1\n        temp[mi] -= 1\n    cnt = 0\n    for i in range(len(temp)):\n        temp[i] += cnt\n        cnt = temp[i]\n    cuts = temp[1:n + 1]\n    cuts.sort()\n    health.sort()\n    if cuts == health:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    power = list(map(int, input().split()))\n    zombie = list(map(int, input().split()))\n    m = max(max(power), n)\n    temp = [0 for i in range(n + 2)]\n    for i in range(1, n + 1):\n        mi = max(0, i - power[i - 1])\n        ma = min(n + 1, i + power[i - 1] + 1)\n        temp[mi] += 1\n        temp[ma] -= 1\n    s = 0\n    for i in range(len(temp)):\n        temp[i] += s\n        s = temp[i]\n    cutout = temp[1:1 + n]\n    cutout.sort()\n    zombie.sort()\n    if cutout == zombie:\n        print('YES')\n    else:\n        print('NO')", "from bisect import bisect_left\nfrom heapq import heapify, heappush, heappop\nfrom collections import deque\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 6)\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\ndx = [-1, -2, 1, 2, 2, -2, -1, 1]\ndy = [2, 1, 2, 1, -1, -1, -2, -2]\nfor _ in range(ii()):\n    n = ii()\n    c = il()\n    zombie = il()\n    ans = []\n    for i in range(n + 1):\n        ans.append(0)\n    for k in range(n):\n        low = max(1, k + 1 - c[k])\n        hi = min(n, k + 1 + c[k])\n        ans[low - 1] -= 1\n        ans[hi] += 1\n    for l in range(n - 1, 0, -1):\n        ans[l] += ans[l + 1]\n    ans1 = sorted(ans[1:])\n    ans2 = sorted(zombie)\n    if ans1 == ans2:\n        print('YES')\n    else:\n        print('NO')", "from bisect import bisect_left\nfrom heapq import heapify, heappush, heappop\nfrom collections import deque\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 6)\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\ndx = [-1, -2, 1, 2, 2, -2, -1, 1]\ndy = [2, 1, 2, 1, -1, -1, -2, -2]\nfor _ in range(ii()):\n    n = ii()\n    c = il()\n    zombie = il()\n    ans = []\n    for i in range(n + 1):\n        ans.append(0)\n    for k in range(n):\n        low = max(1, k + 1 - c[k])\n        hi = min(n, k + 1 + c[k])\n        ans[low - 1] -= 1\n        ans[hi] += 1\n    for l in range(n - 1, 0, -1):\n        ans[l] += ans[l + 1]\n    ans1 = sorted(ans[1:])\n    ans2 = sorted(zombie)\n    if ans1 == ans2:\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    Diff = [0] * (n + 1)\n    A.insert(0, 0)\n    for i in range(1, n + 1):\n        if i - A[i] < 1:\n            Diff[1] += 1\n        else:\n            Diff[i - A[i]] += 1\n        if i + A[i] + 1 <= n:\n            Diff[i + A[i] + 1] -= 1\n    for i in range(2, n + 1):\n        Diff[i] += Diff[i - 1]\n    Diff.pop(0)\n    Diff.sort()\n    B.sort()\n    if Diff == B:\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    Diff = [0] * (n + 1)\n    A.insert(0, 0)\n    for i in range(1, n + 1):\n        if i - A[i] < 1:\n            Diff[1] += 1\n        else:\n            Diff[i - A[i]] += 1\n        if i + A[i] + 1 <= n:\n            Diff[i + A[i] + 1] -= 1\n    for i in range(2, n + 1):\n        Diff[i] += Diff[i - 1]\n    Diff.pop(0)\n    Diff.sort()\n    B.sort()\n    if Diff == B:\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    Diff = [0] * (n + 1)\n    A.insert(0, 0)\n    for i in range(1, n + 1):\n        if i - A[i] < 1:\n            Diff[1] += 1\n        else:\n            Diff[i - A[i]] += 1\n        if i + A[i] + 1 <= n:\n            Diff[i + A[i] + 1] -= 1\n    for i in range(2, n + 1):\n        Diff[i] += Diff[i - 1]\n    Diff.pop(0)\n    Diff.sort()\n    B.sort()\n    if Diff == B:\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    Diff = [0] * (n + 1)\n    A.insert(0, 0)\n    for i in range(1, n + 1):\n        if i - A[i] < 1:\n            Diff[1] += 1\n        else:\n            Diff[i - A[i]] += 1\n        if i + A[i] + 1 <= n:\n            Diff[i + A[i] + 1] -= 1\n    for i in range(2, n + 1):\n        Diff[i] += Diff[i - 1]\n    Diff.pop(0)\n    count = {}\n    for i in range(n):\n        if Diff[i] in count:\n            count[Diff[i]] += 1\n        else:\n            count[Diff[i]] = 1\n    flag = True\n    for i in range(n):\n        if B[i] not in count or count[B[i]] == 0:\n            flag = False\n            break\n        else:\n            count[B[i]] -= 1\n    if flag == True:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    a = [0] * n\n    for j in range(n):\n        l = max(0, j - l1[j])\n        r = j + l1[j] + 1\n        a[l] += 1\n        if r < n:\n            a[r] -= 1\n    for k in range(1, n):\n        a[k] += a[k - 1]\n    l2.sort()\n    a.sort()\n    print('YES' if a == l2 else 'NO')", "for cases in range(int(input())):\n    siz = int(input())\n    rp = list(map(int, input().split()))\n    hlth = list(map(int, input().split()))\n    res = [0] * siz\n    for i in range(siz):\n        left = max(0, i - rp[i])\n        right = i + 1 + rp[i]\n        res[left] += 1\n        if right < siz:\n            res[right] -= 1\n    for i in range(1, siz):\n        res[i] += res[i - 1]\n    res.sort()\n    hlth.sort()\n    if res == hlth:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    k = int(input())\n    rp = list(map(int, input().split()))\n    hp = list(map(int, input().split()))\n    radlev = [0] * k\n    j = 0\n    for i in range(k):\n        j = i - rp[i]\n        l = max(0, j)\n        r = i + 1 + rp[i]\n        radlev[l] += 1\n        if r < k:\n            radlev[r] -= 1\n    for i in range(1, k):\n        radlev[i] += radlev[i - 1]\n    radlev.sort()\n    hp.sort()\n    if radlev == hp:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t:\n    t -= 1\n    x = int(input())\n    pwr = list(map(int, input().split()))\n    hlth = list(map(int, input().split()))\n    hsum = sum(hlth)\n    nsum = 0\n    for i in range(x):\n        l = i - pwr[i]\n        if l <= 0:\n            l = 0\n        r = i + pwr[i]\n        if r >= x:\n            r = x - 1\n        nsum += r - l + 1\n    if nsum == hsum:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    caves = int(input())\n    r_power = list(map(int, input().split()))\n    health = list(map(int, input().split()))\n    health_sum = sum(health)\n    level_sum = 0\n    for i in range(caves):\n        left_level = i - r_power[i]\n        right_level = i + r_power[i]\n        if left_level <= 0:\n            left_level = 0\n        if right_level >= caves:\n            right_level = caves - 1\n        level_sum += right_level - left_level + 1\n    if health_sum == level_sum:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t:\n    t -= 1\n    x = int(input())\n    pwr = list(map(int, input().split()))\n    hlth = list(map(int, input().split()))\n    hsum = sum(hlth)\n    nsum = 0\n    for i in range(x):\n        l = i - pwr[i]\n        if l <= 0:\n            l = 0\n        r = i + pwr[i]\n        if r >= x:\n            r = x - 1\n        nsum += r - l + 1\n    if nsum == hsum:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = [0] * n\n    for j in range(n):\n        l = max(0, j - a[j])\n        r = j + a[j] + 1\n        ans[l] += 1\n        if r < n:\n            ans[r] -= 1\n    for k in range(1, n):\n        ans[k] += ans[k - 1]\n    b.sort()\n    ans.sort()\n    print('YES' if ans == b else 'NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    sumh = sum(h)\n    newsum = 0\n    for i in range(n):\n        l = i - c[i]\n        r = i + c[i]\n        if l <= 0:\n            l = 0\n        if r >= n:\n            r = n - 1\n        newsum += r - l + 1\n    if sumh == newsum:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    res = [0] * n\n    for i in range(n):\n        left = max(0, i - l1[i])\n        right = i + 1 + l1[i]\n        res[left] += 1\n        if right < n:\n            res[right] -= 1\n    for i in range(1, n):\n        res[i] += res[i - 1]\n    res.sort()\n    l2.sort()\n    if res == l2:\n        print('YES')\n    else:\n        print('NO')", "test = int(input())\nresults = []\nwhile test:\n    n = int(input())\n    ca = list(map(int, input().split()))\n    zh = list(map(int, input().split()))\n    d = [0] * n\n    ra = [0] * n\n    for i in range(n):\n        if i - ca[i] < 0:\n            d[0] += 1\n        else:\n            d[i - ca[i]] += 1\n        if i + ca[i] + 1 < n:\n            d[i + ca[i] + 1] -= 1\n    for i in range(1, n):\n        d[i] += d[i - 1]\n    d.sort()\n    zh.sort()\n    flag = True\n    for i in range(n):\n        if zh[i] != d[i]:\n            flag = False\n            break\n    if flag == False:\n        results.append('NO')\n    else:\n        results.append('YES')\n    test -= 1\nfor result in results:\n    print(result)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    a = [0] * n\n    for j in range(n):\n        l = max(0, j - l1[j])\n        r = j + l1[j] + 1\n        a[l] += 1\n        if r < n:\n            a[r] -= 1\n    for k in range(1, n):\n        a[k] += a[k - 1]\n    l2.sort()\n    a.sort()\n    print('YES' if a == l2 else 'NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    a = [0] * n\n    for j in range(n):\n        l = max(0, j - l1[j])\n        r = j + l1[j] + 1\n        a[l] += 1\n        if r < n:\n            a[r] -= 1\n    for k in range(1, n):\n        a[k] += a[k - 1]\n    l2.sort()\n    a.sort()\n    print('YES' if a == l2 else 'NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    a = [0] * n\n    for j in range(n):\n        l = max(0, j - l1[j])\n        r = j + l1[j] + 1\n        a[l] += 1\n        if r < n:\n            a[r] -= 1\n    for k in range(1, n):\n        a[k] += a[k - 1]\n    l2.sort()\n    a.sort()\n    print('YES' if a == l2 else 'NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    a = [0] * n\n    for j in range(n):\n        l = max(0, j - l1[j])\n        r = j + l1[j] + 1\n        a[l] += 1\n        if r < n:\n            a[r] -= 1\n    for k in range(1, n):\n        a[k] += a[k - 1]\n    l2.sort()\n    a.sort()\n    print('YES' if a == l2 else 'NO')", "def main():\n    tests = int(input())\n    for t in range(tests):\n        n = int(input())\n        C = list(map(int, input().split()))\n        H = list(map(int, input().split()))\n        x = [0] * n\n        for i in range(n):\n            l = max(0, i - C[i])\n            r = i + C[i] + 1\n            x[l] += 1\n            if r < n:\n                x[r] -= 1\n        for i in range(1, n):\n            x[i] += x[i - 1]\n        H.sort()\n        x.sort()\n        if x == H:\n            print('YES')\n        else:\n            print('NO')\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    l = [0] * (n + 1)\n    for i in range(1, n + 1):\n        (st, en) = (i - c[i - 1], i + c[i - 1])\n        if st <= 1:\n            l[1] += 1\n        else:\n            l[st] += 1\n        if en + 1 <= n:\n            l[en + 1] -= 1\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    l.pop(0)\n    l.sort()\n    h.sort()\n    print(['NO', 'YES'][l == h])", "for _ in range(int(input())):\n    n = int(input())\n    rp = [0] * (n + 1)\n    c = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    for i in range(n):\n        rp[0 if i - c[i] < 0 else i - c[i]] += 1\n        rp[n if i + c[i] >= n else i + c[i] + 1] -= 1\n    c[0] = rp[0]\n    for i in range(1, n):\n        c[i] = rp[i] + c[i - 1]\n    c.sort()\n    h.sort()\n    for i in range(n):\n        if c[i] != h[i]:\n            print('NO')\n            break\n    else:\n        print('YES')", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    c = [int(x) for x in input().split()]\n    h = [int(x) for x in input().split()]\n    d = [0] * (n + 1)\n    for i in range(n):\n        if i - c[i] < 0:\n            d[0] += 1\n        else:\n            d[i - c[i]] += 1\n        if i + c[i] >= n:\n            d[n] -= 1\n        else:\n            d[i + c[i] + 1] -= 1\n    c[0] = d[0]\n    for i in range(1, n):\n        c[i] = d[i] + c[i - 1]\n    c = sorted(c)\n    h = sorted(h)\n    if c == h:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    sum1 = 0\n    for i in range(n):\n        a = max(0, i - c[i])\n        b = min(n - 1, i + c[i])\n        sum1 = sum1 + b - a + 1\n    if sum1 == sum(h):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    sum1 = 0\n    for i in range(n):\n        a = max(0, i - c[i])\n        b = min(n - 1, i + c[i])\n        sum1 = sum1 + b - a + 1\n    if sum1 == sum(h):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    h = sorted(list(map(int, input().split())))\n    ranges = [0] * (n + 1)\n    for i in range(n):\n        ci = c[i]\n        if i - ci <= 0:\n            ranges[0] += 1\n        else:\n            ranges[i - ci] += 1\n        if i + ci >= n:\n            ranges[n] -= 1\n        else:\n            ranges[i + ci + 1] -= 1\n    c[0] = ranges[0]\n    for j in range(1, n):\n        c[j] = ranges[j] + c[j - 1]\n    c.sort()\n    if c == h:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    c = [int(x) for x in input().split()]\n    h = [int(x) for x in input().split()]\n    d = [0] * (n + 1)\n    for i in range(n):\n        if i - c[i] < 0:\n            d[0] += 1\n        else:\n            d[i - c[i]] += 1\n        if i + c[i] >= n:\n            d[n] -= 1\n        else:\n            d[i + c[i] + 1] -= 1\n    c[0] = d[0]\n    for i in range(1, n):\n        c[i] = d[i] + c[i - 1]\n    c = sorted(c)\n    h = sorted(h)\n    if c == h:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "T = int(input())\nans = []\nfor _ in range(T):\n    N = int(input())\n    C = [int(i) for i in input().split()]\n    H = [int(i) for i in input().split()]\n    F = [0 for i in range(N + 1)]\n    for i in range(N):\n        l = max(0, i - C[i])\n        r = min(N - 1, i + C[i]) + 1\n        F[l] += 1\n        F[r] -= 1\n    s = 0\n    D = {}\n    for i in range(N):\n        s += F[i]\n        D[s] = True\n    for i in range(N):\n        if H[i] not in D:\n            ans.append('NO')\n            break\n    else:\n        ans.append('YES')\nfor i in ans:\n    print(i)", "T = int(input())\nans = []\nfor _ in range(T):\n    N = int(input())\n    C = [int(i) for i in input().split()]\n    H = [int(i) for i in input().split()]\n    F = [0 for i in range(N + 1)]\n    for i in range(N):\n        l = max(0, i - C[i])\n        r = min(N - 1, i + C[i]) + 1\n        F[l] += 1\n        F[r] -= 1\n    s = 0\n    D = {}\n    for i in range(N):\n        s += F[i]\n        D[s] = True\n    for i in range(N):\n        if H[i] not in D:\n            ans.append('NO')\n            break\n    else:\n        ans.append('YES')\nfor i in ans:\n    print(i)", "t = int(input(''))\nfor _ in range(t):\n    n = int(input(''))\n    c = list(map(int, input('').strip().split()))[:n]\n    h = list(map(int, input('').strip().split()))[:n]\n    l = [0] * n\n    for i in range(n):\n        if i - c[i] >= 0:\n            l[i - c[i]] += 1\n        else:\n            l[0] += 1\n        if i + c[i] + 1 < n:\n            l[i + c[i] + 1] -= 1\n    for i in range(1, n):\n        l[i] += l[i - 1]\n    l.sort()\n    h.sort()\n    if l == h:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    count = [0 for i in range(n)]\n    for i in range(n):\n        le = max(i - a[i], 0)\n        ri = min(i + a[i], n - 1)\n        count[le] += 1\n        if ri + 1 < n:\n            count[ri + 1] -= 1\n    for i in range(1, n):\n        count[i] = count[i] + count[i - 1]\n    count.sort()\n    b.sort()\n    if count == b:\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    C = list(map(int, input().split()))\n    H = list(map(int, input().split()))\n    Ar = [0] * N\n    for i in range(N):\n        min = i - C[i]\n        if min < 0:\n            min = 0\n        Ar[min] += 1\n        max = i + C[i] + 1\n        if max <= N - 1:\n            Ar[max] -= 1\n    for i in range(1, N):\n        Ar[i] = Ar[i - 1] + Ar[i]\n    Ar.sort()\n    H.sort()\n    if Ar == H:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c1 = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    c2 = [0 for k in range(n)]\n    for i in range(n):\n        l = i - c1[i]\n        r = i + c1[i]\n        if l >= 0:\n            c2[l] = c2[l] + 1\n        if r + 1 < n:\n            c2[r + 1] = c2[r + 1] - 1\n        if l < 0:\n            c2[0] += 1\n    for x in range(1, n):\n        c2[x] += c2[x - 1]\n    c2.sort()\n    h.sort()\n    if c2 == h:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    l = [0] * n\n    for i in range(n):\n        a = i + 1 - c[i]\n        b = i + 1 + c[i]\n        if a < 1:\n            a = 1\n        elif a > n:\n            a = n\n        if b < 0:\n            b = 1\n        elif b >= n:\n            b = n\n        try:\n            l[a - 1] += 1\n            l[b] -= 1\n        except:\n            pass\n    for i in range(1, n):\n        l[i] = l[i] + l[i - 1]\n    l.sort()\n    h.sort()\n    if l[:] == h[:]:\n        print('YES')\n    else:\n        print('NO')", "def main():\n    n = int(input())\n    c = list(map(int, input().split()))\n    c = [0] + c\n    h = list(map(int, input().split()))\n    s = 0\n    for i in range(1, n + 1):\n        s = s + min(i + c[i] + 1, n + 1) - max(1, i - c[i])\n    if s == sum(h):\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    main()", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    a = [0] * n\n    ans = 'YES'\n    D = [0] * (n + 1)\n    for i in range(n):\n        l = i - c[i]\n        r = i + c[i]\n        if l >= 0:\n            D[l] += 1\n        else:\n            D[0] += 1\n        if r < n:\n            D[r + 1] -= 1\n        else:\n            D[n] -= 1\n    dict = {}\n    a[0] = D[0]\n    dict[a[0]] = 1\n    for i in range(1, n):\n        a[i] = a[i - 1] + D[i]\n        if a[i] in dict:\n            dict[a[i]] += 1\n        else:\n            dict[a[i]] = 1\n    for i in h:\n        if i in dict and dict[i] > 0:\n            dict[i] -= 1\n        else:\n            ans = 'NO'\n            break\n    print(ans)", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    a = [0] * n\n    ans = 'YES'\n    D = [0] * (n + 1)\n    for i in range(n):\n        l = i - c[i]\n        r = i + c[i]\n        if l >= 0:\n            D[l] += 1\n        else:\n            D[0] += 1\n        if r < n:\n            D[r + 1] -= 1\n        else:\n            D[n] -= 1\n    dict = {}\n    a[0] = D[0]\n    dict[a[0]] = 1\n    for i in range(1, n):\n        a[i] = a[i - 1] + D[i]\n        if a[i] in dict:\n            dict[a[i]] += 1\n        else:\n            dict[a[i]] = 1\n    for i in h:\n        if i in dict and dict[i] > 0:\n            dict[i] -= 1\n        else:\n            ans = 'NO'\n            break\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    power = list(map(int, input().split()))\n    zombie = sorted(list(map(int, input().split())))\n    active = [0] * (n + 1)\n    for i in range(n):\n        left = i - power[i]\n        right = i + power[i]\n        if left <= 0:\n            left = 0\n        if right >= n:\n            right = n - 1\n        active[left] = active[left] + 1\n        active[right + 1] = active[right + 1] - 1\n    for i in range(1, n):\n        active[i] = active[i] + active[i - 1]\n    active = active[:-1]\n    active.sort()\n    if active == zombie:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    power = list(map(int, input().split()))\n    zombie = sorted(list(map(int, input().split())))\n    active = [0] * (n + 1)\n    for i in range(n):\n        left = i - power[i]\n        right = i + power[i]\n        if left <= 0:\n            left = 0\n        if right >= n:\n            right = n - 1\n        active[left] = active[left] + 1\n        active[right + 1] = active[right + 1] - 1\n    for i in range(1, n):\n        active[i] = active[i] + active[i - 1]\n    active = active[:-1]\n    active.sort()\n    if active == zombie:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    sum1 = 0\n    for j in range(n):\n        a = max(0, j - l1[j])\n        b = min(n - 1, j + l1[j])\n        sum1 = sum1 + b - a + 1\n    if sum1 == sum(l2):\n        print('YES')\n    else:\n        print('NO')", "for j in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    s = 0\n    for i in range(n):\n        t1 = max(1, i + 1 - x[i])\n        t2 = min(n, i + 1 + x[i])\n        s += t2 - t1 + 1\n    if s == sum(y):\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    c = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    s = 0\n    for i in range(N):\n        t1 = max(1, i + 1 - c[i])\n        t2 = min(N, i + 1 + c[i])\n        s += t2 - t1 + 1\n    if s == sum(h):\n        print('YES')\n    else:\n        print('NO')", "import collections\n\ndef take_inputs():\n    num_caves = int(input())\n    C = list(map(int, input().split()))\n    H = list(map(int, input().split()))\n    if collections.Counter(H) == collections.Counter(compute_radiation_level(C, num_caves)):\n        print('YES')\n    else:\n        print('NO')\n\ndef compute_radiation_level(C, num_caves):\n    radiation_level = [0] * num_caves\n    for i in range(num_caves):\n        s = i + 1 - C[i]\n        s = check_boundary(s, num_caves)\n        e = i + 1 + C[i]\n        e = check_boundary(e, num_caves)\n        try:\n            radiation_level[s - 1] += 1\n            radiation_level[e] -= 1\n        except:\n            pass\n    for i in range(1, num_caves):\n        radiation_level[i] = radiation_level[i - 1] + radiation_level[i]\n    return radiation_level\n\ndef check_boundary(number, num_caves):\n    if number < 1:\n        return 1\n    elif number > num_caves:\n        return num_caves\n    else:\n        return number\nnum_cases = int(input())\nwhile num_cases != 0:\n    num_cases -= 1\n    take_inputs()", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    diff = 0\n    for i in range(n):\n        left = max(1, i + 1 - l[i])\n        right = min(n, i + 1 + l[i])\n        diff += right - left + 1\n    if diff == sum(a):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    diff = 0\n    for i in range(n):\n        left = max(1, i + 1 - l[i])\n        right = min(n, i + 1 + l[i])\n        diff += right - left + 1\n    if diff == sum(a):\n        print('YES')\n    else:\n        print('NO')", "def main():\n    n = int(input())\n    c = list(map(int, input().split()))\n    c = [0] + c\n    h = list(map(int, input().split()))\n    s = 0\n    for i in range(1, n + 1):\n        s = s + min(i + c[i] + 1, n + 1) - max(1, i - c[i])\n    if s == sum(h):\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    main()", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    z = list(map(int, input().split()))\n    s = 0\n    for i in range(1, n + 1):\n        tmp1 = i - a[i - 1]\n        if tmp1 <= 0:\n            tmp1 = 1\n        tmp2 = i + a[i - 1]\n        if tmp2 >= n:\n            tmp2 = n\n        s += tmp2 - tmp1 + 1\n    if s == sum(z):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    N = int(input())\n    array = list(map(int, input().split()))\n    zombies = list(map(int, input().split()))\n    final = [0] * N\n    for i in range(N):\n        mn = i - array[i]\n        mx = i + 1 + array[i]\n        final[max(mn, 0)] += 1\n        if mx <= N - 1:\n            final[mx] -= 1\n    sm = 0\n    pakkaFinal = []\n    for i in range(N):\n        sm += final[i]\n        pakkaFinal.append(sm)\n    pakkaFinal.sort()\n    zombies.sort()\n    if zombies == pakkaFinal:\n        print('YES')\n    else:\n        print('NO')", "def destroy_zombie(radiation, zombie_health):\n    for (x, y) in zip(radiation, zombie_health):\n        if x != y:\n            return False\n    return True\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    radiation_arr = list(map(int, input().strip().split()))\n    zombies = list(map(int, input().strip().split()))\n    cave_radiations = [0] * (len(radiation_arr) + 1)\n    for (index, radiation) in enumerate(radiation_arr):\n        caves = (max(0, index - radiation), min(index + radiation, len(radiation_arr) - 1))\n        cave_radiations[caves[0]] += 1\n        cave_radiations[caves[-1] + 1] -= 1\n    for (index, radiation) in enumerate(cave_radiations):\n        if index > 0:\n            cave_radiations[index] += cave_radiations[index - 1]\n    if destroy_zombie(sorted(cave_radiations[:len(zombies)]), sorted(zombies)):\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    diff = [0 for i in range(n)]\n    for i in range(0, n):\n        diff[max(0, i - a[i])] += 1\n        if i + a[i] + 1 < n:\n            diff[i + a[i] + 1] -= 1\n    for i in range(1, n):\n        diff[i] += diff[i - 1]\n    if sorted(diff) == sorted(b):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c1 = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    c2 = [0 for k in range(n)]\n    for i in range(n):\n        l = i - c1[i]\n        r = i + c1[i]\n        if l >= 0:\n            c2[l] = c2[l] + 1\n        if r + 1 < n:\n            c2[r + 1] = c2[r + 1] - 1\n        if l < 0:\n            c2[0] += 1\n    for x in range(1, n):\n        c2[x] += c2[x - 1]\n    c2.sort()\n    h.sort()\n    if c2 == h:\n        print('YES')\n    else:\n        print('NO')", "from sys import stdin, stdout\nimport math\nfrom itertools import permutations, combinations\nfrom collections import defaultdict\n\ndef L():\n    return list(map(int, stdin.readline().split()))\n\ndef Li():\n    return map(int, stdin.readline().split())\n\ndef I():\n    return int(stdin.readline())\nP = 1000000007\n\ndef main():\n    try:\n        for _ in range(I()):\n            n = I()\n            l1 = L()\n            l2 = sum(L())\n            t = 0\n            for i in range(len(l1)):\n                t1 = i + 1 - l1[i]\n                t2 = i + 1 + l1[i]\n                if t1 <= 0:\n                    t1 = 1\n                if t2 > len(l1):\n                    t2 = len(l1)\n                t += t2 - t1 + 1\n            if l2 != t:\n                print('NO')\n            else:\n                print('YES')\n    except:\n        pass\nmain()", "import numpy as np\nfrom collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    C = list(map(int, input().split()))\n    H = list(map(int, input().split()))\n    Hc = Counter(H)\n    suma = [0 for _ in range(n)]\n    fR = suma[:]\n    for i in range(n):\n        rl = C[i]\n        up = i + rl if i + rl <= n - 1 else n - 1\n        lo = i - rl if i - rl >= 0 else 0\n        suma[lo] += 1\n        if up + 1 < n:\n            suma[up + 1] -= 1\n    fR[0] += suma[0]\n    for i in range(1, n):\n        suma[i] += suma[i - 1]\n        fR[i] += suma[i]\n    ans = 'YES' if Counter(fR) == Hc else 'NO'\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    radiation = list(map(int, input().split()))\n    health = list(map(int, input().split()))\n    array = [0] * (n + 2)\n    for i in range(n):\n        if i + 1 - radiation[i] < 1:\n            array[1] += 1\n        else:\n            array[i + 1 - radiation[i]] += 1\n        if i + 1 + radiation[i] > n:\n            array[-1] -= 1\n        else:\n            array[i + 2 + radiation[i]] -= 1\n    this = []\n    for i in range(n):\n        this.append(array[i] + array[i + 1])\n        array[i + 1] += array[i]\n    if sorted(this) == sorted(health):\n        print('YES')\n    else:\n        print('NO')", "radiation = []\n\ndef rangeUpdate(i, Ci, lim):\n    (l, r) = (max(i - Ci, 0), min(lim, i + Ci))\n    radiation[l] += 1\n    if r < lim:\n        radiation[r + 1] += -1\nT = int(input().strip())\nfor _ in range(T):\n    N = int(input().strip())\n    C = [int(x) for x in input().strip().split(' ')]\n    H = [int(x) for x in input().strip().split(' ')]\n    radiation = [0] * N\n    [rangeUpdate(i, j, N - 1) for (i, j) in enumerate(C)]\n    (ans, rs) = (0, 0)\n    for (i, j) in zip(radiation, H):\n        rs += i\n        ans ^= rs ^ j\n    if ans == 0:\n        print('YES')\n    else:\n        print('NO')", "radiation = []\n\ndef rangeUpdate(i, Ci, lim):\n    (l, r) = (max(i - Ci, 0), min(lim, i + Ci))\n    radiation[l] += 1\n    if r < lim:\n        radiation[r + 1] += -1\nT = int(input().strip())\nfor _ in range(T):\n    N = int(input().strip())\n    C = [int(x) for x in input().strip().split(' ')]\n    H = [int(x) for x in input().strip().split(' ')]\n    radiation = [0] * N\n    [rangeUpdate(i, j, N - 1) for (i, j) in enumerate(C)]\n    ans = 0\n    for i in range(N):\n        ans += radiation[i]\n        radiation[i] = ans\n    ans = 0\n    for (i, j) in zip(radiation, H):\n        ans ^= i ^ j\n    if ans == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = [int(x) for x in input().split()]\n    h = [int(x) for x in input().split()]\n    rad = [0 for x in range(n)]\n    farr = [0 for x in range(n)]\n    farrsum = [0 for x in range(n)]\n    for i in range(n):\n        ci = c[i]\n        start = i - ci\n        end = i + ci\n        summ = 0\n        if start > 0 and end < n:\n            farr[end] += 1\n            farr[start - 1] -= 1\n        elif start <= 0 and end >= n:\n            farr[n - 1] += 1\n        elif start > 0 and end >= n:\n            farr[n - 1] += 1\n            farr[start - 1] -= 1\n        else:\n            farr[end] += 1\n    for k in reversed(range(n)):\n        summ += farr[k]\n        farrsum[k] = summ\n    farrsum = sorted(farrsum)\n    h = sorted(h)\n    flag = 0\n    for i in range(n):\n        if farrsum[i] != h[i]:\n            flag = 1\n            break\n    if flag == 0:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\n\ndef compare(s, t):\n    return Counter(s) == Counter(t)\nn = int(input())\nfor _ in range(n):\n    m = int(input())\n    input1 = list(map(int, input().split()))\n    input2 = list(map(int, input().split()))\n    sorted(input2, reverse=True)\n    l = []\n    for i in range(m):\n        l.append(0)\n    for i in range(m):\n        start = i - input1[i]\n        end = i + input1[i] + 1\n        if start < 0:\n            start = 0\n        if end > m:\n            end = m\n        l[start] = l[start] + 1\n        if end < m:\n            l[end] = l[end] - 1\n    for i in range(1, len(l)):\n        l[i] = l[i] + l[i - 1]\n    if compare(l, input2):\n        print('YES')\n    else:\n        print('NO')", "def solve(N, C, Z):\n    ar = [0 for _ in range(N)]\n    ar2 = ar.copy()\n    r = 0\n    for i in range(len(C)):\n        if i + C[i] + 1 < N:\n            ar[i + C[i] + 1] -= 1\n    for i in range(N):\n        ar[i] += r + 1\n        r = ar[i]\n    r = 0\n    for i in range(len(C)):\n        if i - C[i] - 1 >= 0:\n            ar2[i - C[i] - 1] -= 1\n    for i in range(N)[::-1]:\n        ar2[i] += r + 1\n        r = ar2[i]\n    for i in range(N):\n        ar[i] += ar2[i] - 1\n    ar.sort()\n    Z.sort()\n    return ar == Z\n\ndef main():\n    for _ in range(int(input())):\n        N = int(input())\n        C = list(map(int, input().split()))\n        Z = list(map(int, input().split()))\n        if solve(N, C, Z):\n            print('YES')\n        else:\n            print('NO')\nmain()", "test_inputs = int(input())\nfor test in range(test_inputs):\n    n = int(input())\n    radiation = list(map(int, input().split()))\n    health = list(map(int, input().split()))\n    cur_radiations = [0 for _ in range(n + 1)]\n    for i in range(n):\n        (l, r) = (max(0, i - radiation[i]), min(n - 1, i + radiation[i]))\n        cur_radiations[l] += 1\n        cur_radiations[r + 1] -= 1\n    for i in range(1, n):\n        cur_radiations[i] = cur_radiations[i - 1] + cur_radiations[i]\n    cur_radiations = cur_radiations[0:-1]\n    flag = 0\n    (count_health, count_radiation) = ({}, {})\n    for r in cur_radiations:\n        if r not in count_radiation:\n            count_radiation[r] = 1\n        else:\n            count_radiation[r] += 1\n    for h in health:\n        if h not in count_health:\n            count_health[h] = 1\n        else:\n            count_health[h] += 1\n    for key in count_health.keys():\n        if key not in count_radiation:\n            flag = 1\n            break\n        elif count_radiation[key] != count_health[key]:\n            flag = 1\n            break\n    if flag == 1:\n        print('NO')\n    else:\n        print('YES')", "def main():\n    n_tests = int(input())\n    for i in range(n_tests):\n        print(handle_test())\n\ndef handle_test():\n    input()\n    powers = list(map(int, input().split()))\n    p_diffs = difference_array(powers)\n    levels = sorted(diffs_to_levels(p_diffs))\n    healths = sorted(list(map(int, input().split())))\n    if levels == healths:\n        return 'YES'\n    return 'NO'\n\ndef difference_array(xs):\n    diffs = [0] * len(xs)\n    for (i, x) in enumerate(xs):\n        left = max(0, i - x)\n        right = i + x + 1\n        diffs[left] += 1\n        if right < len(xs):\n            diffs[right] -= 1\n    return diffs\n\ndef diffs_to_levels(xs):\n    level = 0\n    levels = []\n    for x in xs:\n        level += x\n        levels.append(level)\n    return levels\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    c = [int(x) for x in input().split()]\n    h = [int(x) for x in input().split()]\n    r = [0 for i in range(n)]\n    for i in range(n):\n        start = i - c[i]\n        end = i + c[i]\n        if start < 0:\n            start = 0\n        if end > n:\n            end = n - 1\n        r[start] += 1\n        if end < n - 1:\n            r[end + 1] -= 1\n    for i in range(1, n):\n        r[i] += r[i - 1]\n    r.sort()\n    h.sort()\n    if r == h:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    c = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    arr = [0 for i in range(n)]\n    for i in range(n):\n        x = i - c[i]\n        y = i + c[i]\n        if x >= 0:\n            arr[x] = arr[x] + 1\n        if y + 1 < n:\n            arr[y + 1] = arr[y + 1] - 1\n        if x < 0:\n            arr[0] += 1\n    for j in range(1, n):\n        arr[j] = arr[j] + arr[j - 1]\n    arr.sort()\n    h.sort()\n    if arr == h:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "def ZomRad(arr):\n    for i in range(1, len(arr)):\n        arr[i] = arr[i] + arr[i - 1]\n    arr.pop()\n    del arr[0]\n    return arr\nfor _t in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    rLevel = [0] * (n + 2)\n    lm = len(rLevel)\n    for i in range(0, n):\n        rLevel[max(1, i + 1 - c[i])] += 1\n        rLevel[min(i + 1 + c[i] + 1, n + 1)] -= 1\n    rLevel = ZomRad(rLevel)\n    if sorted(h) == sorted(rLevel):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    p = [0] * (n + 1)\n    for i in range(1, n + 1):\n        x = max(1, i - c[i - 1])\n        y = i + 1 + c[i - 1]\n        p[x] += 1\n        if y <= n:\n            p[y] -= 1\n    for i in range(1, n + 1):\n        p[i] += p[i - 1]\n    if sorted(p[1:n + 1]) == sorted(h):\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    C = list(map(int, input().split(' ')))\n    H = list(map(int, input().split(' ')))\n    A = [0] * N\n    for i in range(N):\n        l = i - C[i]\n        h = i + C[i]\n        if l < 0:\n            l = 0\n        A[l] += 1\n        if h < N - 1:\n            A[h + 1] -= 1\n    for i in range(1, N):\n        A[i] += A[i - 1]\n    if sorted(H) == sorted(A):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t:\n    t = t - 1\n    n = int(input())\n    c = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    rad = [0] * (n + 1)\n    for i in range(n):\n        l = i - c[i]\n        r = i + c[i]\n        if l <= 0:\n            l = 0\n        if r >= n:\n            r = n - 1\n        rad[l] = rad[l] + 1\n        rad[r + 1] = rad[r + 1] - 1\n    for i in range(n - 1):\n        rad[i + 1] = rad[i] + rad[i + 1]\n    rad.remove(rad[n])\n    rad.sort()\n    h.sort()\n    if rad == h:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t:\n    t = t - 1\n    n = int(input())\n    c = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    rad = [0] * (n + 1)\n    for i in range(n):\n        l = i - c[i]\n        r = i + c[i]\n        if l <= 0:\n            l = 0\n        if r >= n:\n            r = n - 1\n        rad[l] = rad[l] + 1\n        rad[r + 1] = rad[r + 1] - 1\n    for i in range(n - 1):\n        rad[i + 1] = rad[i] + rad[i + 1]\n    rad.remove(rad[n])\n    rad.sort()\n    h.sort()\n    if rad == h:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c1 = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    c2 = [0 for k in range(n)]\n    for i in range(n):\n        l = i - c1[i]\n        r = i + c1[i]\n        if l >= 0:\n            c2[l] = c2[l] + 1\n        if r + 1 < n:\n            c2[r + 1] = c2[r + 1] - 1\n        if l < 0:\n            c2[0] += 1\n    for x in range(1, n):\n        c2[x] += c2[x - 1]\n    c2.sort()\n    h.sort()\n    if c2 == h:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c1 = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    c2 = [0 for k in range(n)]\n    for i in range(n):\n        l = i - c1[i]\n        r = i + c1[i]\n        if l >= 0:\n            c2[l] = c2[l] + 1\n        if r + 1 < n:\n            c2[r + 1] = c2[r + 1] - 1\n        if l < 0:\n            c2[0] += 1\n    for x in range(1, n):\n        c2[x] += c2[x - 1]\n    c2.sort()\n    h.sort()\n    if c2 == h:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    radpow = list(map(int, input().split(' ')))\n    zombie = list(map(int, input().split(' ')))\n    temp = 0\n    for i in range(len(radpow)):\n        first = i + 1 - radpow[i]\n        last = i + 1 + radpow[i]\n        if first <= 0:\n            first = 1\n        if last > len(radpow):\n            last = len(radpow)\n        temp += last - first + 1\n    if sum(zombie) != temp:\n        print('NO')\n        continue\n    print('YES')", "t = int(input(''))\nC = []\nwhile t > 0:\n    n = int(input(''))\n    c_i = [int(i) for i in input('').split(' ')]\n    h_i = [int(i) for i in input('').split(' ')]\n    C = [0 for i in range(n)]\n    for i in range(n):\n        L = i - c_i[i]\n        R = i + c_i[i]\n        if L >= 0:\n            C[L] += 1\n        if L < 0:\n            C[0] += 1\n        if R < n - 1:\n            C[R + 1] -= 1\n    for i in range(1, n):\n        C[i] += C[i - 1]\n    h_i.sort(reverse=True)\n    C.sort(reverse=True)\n    if h_i == C:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "def f():\n    t = int(input())\n    while t > 0:\n        n = int(input())\n        rad = list(map(int, input().split()))\n        hel = list(map(int, input().split()))\n        l = []\n        val = 0\n        a = [0] * n\n        for i in range(n):\n            x = i - rad[i]\n            x1 = i + rad[i]\n            if x < 0:\n                x = 0\n            if x1 > n - 1:\n                x1 = n - 1\n            val += x1 - x + 1\n        sum1 = sum(hel)\n        if sum1 == val:\n            print('YES')\n        else:\n            print('NO')\n        t -= 1\nf()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = list(map(int, input().strip().split()))\n    h = list(map(int, input().strip().split()))\n    diff = [0 for i in range(n + 1)]\n    power = [0 for i in range(n)]\n    for i in range(n):\n        diff[max(0, i - c[i])] += 1\n        diff[min(n, i + c[i] + 1)] -= 1\n    power[0] = diff[0]\n    for i in range(1, n):\n        power[i] = power[i - 1] + diff[i]\n    power.sort()\n    h.sort()\n    flag = True\n    for i in range(n):\n        if power[i] != h[i]:\n            flag = False\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "import collections\nT = int(input())\nfor _ in range(T):\n    flag = 0\n    N = int(input())\n    powers = {key: val for (key, val) in enumerate([int(x) for x in input().split()], 1)}\n    zoms = [int(x) for x in input().split()]\n    sum_ls = [0 for _ in range(N + 1)]\n    for cave in powers.keys():\n        if cave - powers[cave] <= 1:\n            lower = 1\n        else:\n            lower = cave - powers[cave]\n        if cave + powers[cave] >= N:\n            upper = N\n        else:\n            upper = cave + powers[cave]\n        sum_ls[lower - 1] += 1\n        sum_ls[upper] -= 1\n    for x in range(1, N + 1):\n        sum_ls[x] += sum_ls[x - 1]\n    reverse_levels = collections.Counter(sum_ls[0:N])\n    for health in zoms:\n        if reverse_levels.get(health, 0) <= 0:\n            flag = 1\n            break\n        else:\n            reverse_levels[health] -= 1\n    print('NO' if flag == 1 else 'YES')", "for _ in range(int(input())):\n    n = int(input())\n    C = [int(i) for i in input().split(' ')]\n    H = [int(i) for i in input().split(' ')]\n    ans = [0] * (n + 2)\n    for i in range(1, n + 1):\n        lb = max(1, i - C[i - 1])\n        ub = min(n, i + C[i - 1])\n        ans[lb] += 1\n        ans[ub + 1] -= 1\n    for i in range(1, n + 1):\n        ans[i] += ans[i - 1]\n    ans = ans[1:-1]\n    print('YES') if sorted(H) == sorted(ans) else print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c1 = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    c2 = [0 for k in range(n)]\n    for i in range(n):\n        l = i - c1[i]\n        r = i + c1[i]\n        if l >= 0:\n            c2[l] = c2[l] + 1\n        if r + 1 < n:\n            c2[r + 1] = c2[r + 1] - 1\n        if l < 0:\n            c2[0] += 1\n    for x in range(1, n):\n        c2[x] += c2[x - 1]\n    c2.sort()\n    h.sort()\n    if c2 == h:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c1 = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    c2 = [0 for k in range(n)]\n    for i in range(n):\n        l = i - c1[i]\n        r = i + c1[i]\n        if l >= 0:\n            c2[l] = c2[l] + 1\n        if r + 1 < n:\n            c2[r + 1] = c2[r + 1] - 1\n        if l < 0:\n            c2[0] += 1\n    for x in range(1, n):\n        c2[x] += c2[x - 1]\n    c2.sort()\n    h.sort()\n    if c2 == h:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t:\n    n = int(input())\n    c = [int(i) for i in input().split()]\n    h = [int(i) for i in input().split()]\n    k = [0] * n\n    for i in range(1, n + 1):\n        l = i - c[i - 1]\n        r = i + c[i - 1]\n        if l <= 1:\n            l = 1\n        k[l - 1] = k[l - 1] + 1\n        if r <= n - 1:\n            k[r] = k[r] - 1\n    for i in range(1, n):\n        k[i] = k[i - 1] + k[i]\n    if sorted(h) == sorted(k):\n        print('YES')\n    else:\n        print('NO')\n    t = t - 1", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    N = int(stdin.readline())\n    C = list(map(int, stdin.readline().rstrip().split()))\n    H = list(map(int, stdin.readline().rstrip().split()))\n    da = [0] * (N + 1)\n    for i in range(N):\n        da[i - C[i] if i - C[i] >= 0 else 0] += 1\n        da[i + C[i] + 1 if i + C[i] + 1 <= N else N] -= 1\n    A = [0] * N\n    A[0] = da[0]\n    for i in range(1, N):\n        A[i] = da[i] + A[i - 1]\n    if sorted(A) == sorted(H):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t:\n    if t == 0:\n        break\n    x = int(input())\n    radiation_power = [int(i) for i in input().split()]\n    zombie_health = [int(i) for i in input().split()]\n    n = len(radiation_power)\n    diff_array = [0] * (n + 1)\n    radiation_level = [0] * n\n    diff_array[0] = radiation_level[0]\n    diff_array[n] = 0\n    left_index = 0\n    right_index = 0\n    for i in range(1, len(radiation_power)):\n        diff_array[i] = radiation_level[i] - radiation_level[i - 1]\n    for i in range(len(radiation_power)):\n        left_index = max(0, i - radiation_power[i])\n        right_index = min(n - 1, i + radiation_power[i])\n        diff_array[left_index] += 1\n        diff_array[right_index + 1] -= 1\n    for i in range(len(radiation_power)):\n        if i == 0:\n            radiation_level[i] = diff_array[i]\n        else:\n            radiation_level[i] = radiation_level[i - 1] + diff_array[i]\n    if sorted(zombie_health) == sorted(radiation_level):\n        print('YES')\n    else:\n        print('NO')\n    t = t - 1", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    l1 = list(map(int, input().split(' ')))\n    l2 = list(map(int, input().split(' ')))\n    sum0 = sum(l2)\n    sum1 = 0\n    for i in range(n):\n        p = i - l1[i]\n        k = i + l1[i]\n        if p <= 0:\n            p = 0\n        if k >= n:\n            k = n - 1\n        sum1 += k - p + 1\n    if sum0 == sum1:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "t = int(input())\nwhile t:\n    if t == 0:\n        break\n    x = int(input())\n    radiation_power = [int(i) for i in input().split()]\n    zombie_health = [int(i) for i in input().split()]\n    n = len(radiation_power)\n    diff_array = [0] * (n + 1)\n    radiation_level = [0] * n\n    diff_array[0] = radiation_level[0]\n    diff_array[n] = 0\n    left_index = 0\n    right_index = 0\n    for i in range(1, len(radiation_power)):\n        diff_array[i] = radiation_level[i] - radiation_level[i - 1]\n    for i in range(len(radiation_power)):\n        left_index = max(0, i - radiation_power[i])\n        right_index = min(n - 1, i + radiation_power[i])\n        diff_array[left_index] += 1\n        diff_array[right_index + 1] -= 1\n    for i in range(len(radiation_power)):\n        if i == 0:\n            radiation_level[i] = diff_array[i]\n        else:\n            radiation_level[i] = radiation_level[i - 1] + diff_array[i]\n    if sorted(zombie_health) == sorted(radiation_level):\n        print('YES')\n    else:\n        print('NO')\n    t = t - 1", "for _ in range(int(input())):\n    (n, x) = (int(input()), 0)\n    caves = list(map(int, input().split()))\n    zombies = list(map(int, input().split()))\n    rad = [0 for i in range(n + 2)]\n    caves.insert(0, 0)\n    result = []\n    for i in range(1, n + 1):\n        x = i - caves[i] if i - caves[i] >= 1 else 1\n        y = i + caves[i] if i + caves[i] <= n else n\n        rad[x] += 1\n        rad[y + 1] -= 1\n    x = 0\n    for i in rad:\n        x += i\n        result.append(x)\n    del result[0]\n    del result[-1]\n    print('YES' if sorted(zombies) == sorted(result) else 'NO')", "d = int(input())\nwhile d > 0:\n    d -= 1\n    n = int(input())\n    c = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    f = 0\n    for i in range(1, n + 1):\n        a = i - c[i - 1]\n        b = i + c[i - 1]\n        if a <= 0:\n            a = 1\n        if b > n:\n            b = n\n        f = f + (b - a) + 1\n    p = sum(h)\n    if f != p:\n        print('NO')\n    else:\n        print('YES')", "def calculate_ranges(powers, no_of_caves):\n    counter = 0\n    levels = [0 for i in range(no_of_caves + 1)]\n    for pow_i in range(1, no_of_caves + 1):\n        max_range = no_of_caves if pow_i + powers[pow_i - 1] > no_of_caves else powers[pow_i - 1] + pow_i\n        min_range = 1 if pow_i - powers[pow_i - 1] < 1 else pow_i - powers[pow_i - 1]\n        levels[min_range - 1] += 1\n        levels[max_range] -= 1\n    return levels\n\ndef main():\n    for _ in range(int(input())):\n        no_of_caves = int(input())\n        powers = list(map(int, input().split()))\n        zombies = list(map(int, input().split()))\n        levels = calculate_ranges(powers, no_of_caves)\n        for i in range(1, no_of_caves):\n            levels[i] += levels[i - 1]\n        if sorted(levels[:no_of_caves]) == sorted(zombies):\n            print('YES')\n            continue\n        print('NO')\nmain()"]