["t = int(input())\nfor i in range(t):\n    (n, hi) = map(int, input().split())\n    a = [0 for j in range(n + 1)]\n    for j in range(n):\n        (l, h) = map(int, input().split())\n        a[l] += 1\n        a[h + 1] -= 1\n    for j in range(1, n):\n        a[j] += a[j - 1]\n    for j in range(1, n):\n        a[j] += a[j - 1]\n    a = [0] + a\n    m = -1\n    for j in range(n - hi + 1):\n        m = max(m, a[j + hi] - a[j])\n    print(n * hi - m)", "t = int(input())\nfor i in range(t):\n    (n, hi) = map(int, input().split())\n    a = [0 for j in range(n + 1)]\n    for j in range(n):\n        (l, h) = map(int, input().split())\n        a[l] += 1\n        a[h + 1] -= 1\n    for j in range(1, n):\n        a[j] += a[j - 1]\n    for j in range(1, n):\n        a[j] += a[j - 1]\n    a = [0] + a\n    m = -1\n    for j in range(n - hi + 1):\n        m = max(m, a[j + hi] - a[j])\n    print(n * hi - m)", "t = int(input())\nfor i in range(t):\n    (n, hi) = map(int, input().split())\n    a = [0 for j in range(n + 1)]\n    for j in range(n):\n        (l, h) = map(int, input().split())\n        a[l] += 1\n        a[h + 1] -= 1\n    for j in range(1, n):\n        a[j] += a[j - 1]\n    for j in range(1, n):\n        a[j] += a[j - 1]\n    a = [0] + a\n    m = -1\n    for j in range(n - hi + 1):\n        m = max(m, a[j + hi] - a[j])\n    print(n * hi - m)", "t = int(input())\nfor _ in range(t):\n    (n, g) = map(int, input().split())\n    a = [0 for i in range(n + 1)]\n    for i in range(n):\n        (l, h) = map(int, input().split())\n        a[l] += 1\n        a[h + 1] -= 1\n    for i in range(1, n):\n        a[i] += a[i - 1]\n    for i in range(1, n):\n        a[i] += a[i - 1]\n    a = [0] + a\n    m = -1\n    for i in range(n - g + 1):\n        m = max(m, a[i + g] - a[i])\n    print(n * g - m)", "t = int(input())\nfor i in range(t):\n    (n, hi) = map(int, input().split())\n    a = [0 for j in range(n + 1)]\n    for j in range(n):\n        (l, h) = map(int, input().split())\n        a[l] += 1\n        a[h + 1] -= 1\n    for j in range(1, n):\n        a[j] += a[j - 1]\n    for j in range(1, n):\n        a[j] += a[j - 1]\n    a = [0] + a\n    m = -1\n    for j in range(n - hi + 1):\n        m = max(m, a[j + hi] - a[j])\n    print(n * hi - m)", "t = int(input())\nfor i in range(t):\n    (n, hi) = map(int, input().split())\n    a = [0 for j in range(n + 1)]\n    for j in range(n):\n        (l, h) = map(int, input().split())\n        a[l] += 1\n        a[h + 1] -= 1\n    for j in range(1, n):\n        a[j] += a[j - 1]\n    for j in range(1, n):\n        a[j] += a[j - 1]\n    a = [0] + a\n    m = -1\n    for j in range(n - hi + 1):\n        m = max(m, a[j + hi] - a[j])\n    print(n * hi - m)", "t = int(input())\nfor i in range(t):\n    (n, hi) = map(int, input().split())\n    a = [0 for j in range(n + 1)]\n    for j in range(n):\n        (l, h) = map(int, input().split())\n        a[l] += 1\n        a[h + 1] -= 1\n    for j in range(1, n):\n        a[j] += a[j - 1]\n    for j in range(1, n):\n        a[j] += a[j - 1]\n    a = [0] + a\n    m = -1\n    for j in range(n - hi + 1):\n        m = max(m, a[j + hi] - a[j])\n    print(n * hi - m)", "t = int(input())\nfor _ in range(t):\n    (n, h) = map(int, input().split())\n    L = [0] * (n + 2)\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        L[a + 1] -= 1\n        L[b + 2] += 1\n    L[0] = n\n    for i in range(n):\n        L[i + 1] += L[i]\n    ans = s = sum(L[1:h + 1])\n    for i in range(h + 1, n + 1):\n        s += L[i] - L[i - h]\n        ans = min(ans, s)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, h) = map(int, input().split())\n    L = [0] * (n + 2)\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        L[a + 1] -= 1\n        L[b + 2] += 1\n    L[0] = n\n    for i in range(n):\n        L[i + 1] += L[i]\n    ans = s = sum(L[1:h + 1])\n    for i in range(h + 1, n + 1):\n        s += L[i] - L[i - h]\n        ans = min(ans, s)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, h) = map(int, input().split())\n    L = [0] * (n + 2)\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        L[a + 1] -= 1\n        L[b + 2] += 1\n    L[0] = n\n    for i in range(n):\n        L[i + 1] += L[i]\n    ans = s = sum(L[1:h + 1])\n    for i in range(h + 1, n + 1):\n        s += L[i] - L[i - h]\n        ans = min(ans, s)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, h) = map(int, input().split())\n    L = [0] * (n + 2)\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        L[a + 1] -= 1\n        L[b + 2] += 1\n    L[0] = n\n    for i in range(n):\n        L[i + 1] += L[i]\n    ans = s = sum(L[1:h + 1])\n    for i in range(h + 1, n + 1):\n        s += L[i] - L[i - h]\n        ans = min(ans, s)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, h) = map(int, input().split())\n    L = [0] * (n + 2)\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        L[a + 1] -= 1\n        L[b + 2] += 1\n    L[0] = n\n    for i in range(n):\n        L[i + 1] += L[i]\n    ans = s = sum(L[1:h + 1])\n    for i in range(h + 1, n + 1):\n        s += L[i] - L[i - h]\n        ans = min(ans, s)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    d = [0] * (n + 2)\n    for j in range(n):\n        (a, b) = map(int, input().split())\n        d[a + 1] -= 1\n        d[b + 2] += 1\n    for x in range(1, n + 1):\n        d[x] += d[x - 1]\n    m = n * k\n    y = n * k\n    s = sum(d[1:1 + k])\n    y = min(s + m, y)\n    for z in range(2, n - k + 2):\n        s = s - d[z - 1] + d[z + k - 1]\n        y = min(s + m, y)\n    print(y)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    dp = []\n    dp = [0] * (n + 2)\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        dp[a + 1] -= 1\n        dp[b + 2] += 1\n    for i in range(1, n + 1):\n        dp[i] += dp[i - 1]\n    m = n * k\n    mi = n * k\n    s = sum(dp[1:1 + k])\n    mi = min(s + m, mi)\n    for i in range(2, n - k + 2):\n        s = s - dp[i - 1] + dp[i + k - 1]\n        mi = min(s + m, mi)\n    print(mi)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    dp = []\n    dp = [0] * (n + 2)\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        dp[a + 1] -= 1\n        dp[b + 2] += 1\n    for i in range(1, n + 1):\n        dp[i] += dp[i - 1]\n    m = n * k\n    mi = n * k\n    s = sum(dp[1:1 + k])\n    mi = min(s + m, mi)\n    for i in range(2, n - k + 2):\n        s = s - dp[i - 1] + dp[i + k - 1]\n        mi = min(s + m, mi)\n    print(mi)", "def solve(size, tractor, columns):\n    starts = {ix: 0 for ix in range(size)}\n    stops = {ix: 0 for ix in range(size)}\n    for (start, stop) in columns:\n        starts[start] += 1\n        stops[stop] += 1\n    holes = []\n    open_columns = 0\n    for ix in range(size):\n        open_columns += starts[ix]\n        holes.append(open_columns)\n        open_columns -= stops[ix]\n    first_option = sum(holes[:tractor])\n    options = [first_option]\n    previous_option = first_option\n    for ix in range(size - tractor):\n        new_option = previous_option - holes[ix] + holes[ix + tractor]\n        options.append(new_option)\n        previous_option = new_option\n    return size * tractor - max(options)\nfor _ in range(int(input())):\n    (size, tractor) = [int(x) for x in input().strip().split()]\n    sequence = []\n    for _ in range(size):\n        (start, stop) = [int(x) for x in input().strip().split()]\n        sequence.append((start, stop))\n    print(solve(size, tractor, sequence))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    dp = []\n    dp = [0] * (n + 2)\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        dp[a + 1] -= 1\n        dp[b + 2] += 1\n    for i in range(1, n + 1):\n        dp[i] += dp[i - 1]\n    m = n * k\n    mi = n * k\n    s = sum(dp[1:1 + k])\n    mi = min(s + m, mi)\n    for i in range(2, n - k + 2):\n        s = s - dp[i - 1] + dp[i + k - 1]\n        mi = min(s + m, mi)\n    print(mi)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    dp = []\n    dp = [0] * (n + 2)\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        dp[a + 1] -= 1\n        dp[b + 2] += 1\n    for i in range(1, n + 1):\n        dp[i] += dp[i - 1]\n    m = n * k\n    mi = n * k\n    s = sum(dp[1:1 + k])\n    mi = min(s + m, mi)\n    for i in range(2, n - k + 2):\n        s = s - dp[i - 1] + dp[i + k - 1]\n        mi = min(s + m, mi)\n    print(mi)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    dp = []\n    dp = [0] * (n + 2)\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        dp[a + 1] -= 1\n        dp[b + 2] += 1\n    for i in range(1, n + 1):\n        dp[i] += dp[i - 1]\n    m = n * k\n    mi = n * k\n    s = sum(dp[1:1 + k])\n    mi = min(s + m, mi)\n    for i in range(2, n - k + 2):\n        s = s - dp[i - 1] + dp[i + k - 1]\n        mi = min(s + m, mi)\n    print(mi)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    dp = []\n    dp = [0] * (n + 2)\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        dp[a + 1] -= 1\n        dp[b + 2] += 1\n    for i in range(1, n + 1):\n        dp[i] += dp[i - 1]\n    m = n * k\n    mi = n * k\n    s = sum(dp[1:1 + k])\n    mi = min(s + m, mi)\n    for i in range(2, n - k + 2):\n        s = s - dp[i - 1] + dp[i + k - 1]\n        mi = min(s + m, mi)\n    print(mi)", "test = int(input())\nfor _ in range(test):\n    (n, h) = map(int, input().split())\n    l = [0] * n\n    s = 0\n    ans = 0\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l[a] -= 1\n        if b != n - 1:\n            l[b + 1] += 1\n    l[0] += n\n    for i in range(1, n):\n        l[i] += l[i - 1]\n    for i in range(1, n):\n        l[i] += l[i - 1]\n    minx = l[h - 1]\n    for i in range(h, n):\n        minx = min(minx, l[i] - l[i - h])\n    print(minx)", "test = int(input())\nfor _ in range(test):\n    (n, h) = map(int, input().split())\n    l = [0] * n\n    s = 0\n    ans = 0\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l[a] -= 1\n        if b != n - 1:\n            l[b + 1] += 1\n    l[0] += n\n    for i in range(1, n):\n        l[i] += l[i - 1]\n    for i in range(1, n):\n        l[i] += l[i - 1]\n    minx = l[h - 1]\n    for i in range(h, n):\n        minx = min(minx, l[i] - l[i - h])\n    print(minx)", "for t in range(int(input())):\n    (n, h) = map(int, input().split())\n    l = [0] * n\n    s = 0\n    ans = 0\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l[a] -= 1\n        if b != n - 1:\n            l[b + 1] += 1\n    l[0] += n\n    for i in range(1, n):\n        l[i] += l[i - 1]\n    for i in range(1, n):\n        l[i] += l[i - 1]\n    minx = l[h - 1]\n    for i in range(h, n):\n        minx = min(minx, l[i] - l[i - h])\n    print(minx)", "for t in range(int(input())):\n    (n, h) = map(int, input().split())\n    l = [0] * n\n    s = 0\n    ans = 0\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l[a] -= 1\n        if b != n - 1:\n            l[b + 1] += 1\n    l[0] += n\n    for i in range(1, n):\n        l[i] += l[i - 1]\n    for i in range(1, n):\n        l[i] += l[i - 1]\n    minx = l[h - 1]\n    for i in range(h, n):\n        minx = min(minx, l[i] - l[i - h])\n    print(minx)", "for t in range(int(input())):\n    (n, h) = map(int, input().split())\n    l = [0] * (n + 2)\n    s = 0\n    ans = 0\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l[a + 1] -= 1\n        l[b + 2] += 1\n    l[0] = n\n    for i in range(n):\n        l[i + 1] += l[i]\n    for i in range(n):\n        l[i + 1] += l[i]\n    print(min((l[i] - l[i - h] for i in range(h, n + 1))))", "import math\nimport bisect\n\ndef inn():\n    return int(input())\n\ndef inl():\n    return list(map(int, input().split()))\nMOD = 10 ** 9 + 7\nINF = inf = 10 ** 18 + 5\nfor t in range(int(input())):\n    (n, h) = inl()\n    gap = []\n    for i in range(n):\n        gap.append(inl())\n    start = [0] * n\n    end = [0] * n\n    row = [0] * n\n    for i in range(n):\n        start[gap[i][0]] += 1\n        end[gap[i][1]] += 1\n    row[0] = start[0]\n    for i in range(1, n):\n        row[i] = row[i - 1] + start[i] - end[i - 1]\n    presum = [0] * n\n    presum[0] = row[0]\n    for i in range(1, n):\n        presum[i] = presum[i - 1] + row[i]\n    ans = presum[h - 1]\n    for i in range(h, n):\n        ans = max(ans, presum[i] - presum[i - h])\n    print(n * h - ans)", "import sys\nt = int(sys.stdin.readline())\nans = [0] * t\nfor x in range(t):\n    (n, m) = map(int, sys.stdin.readline().split())\n    blanks = [0] * n\n    num_starts = [0] * n\n    num_ends = [0] * n\n    for i in range(n):\n        (s, e) = map(int, sys.stdin.readline().split())\n        num_starts[s] += 1\n        num_ends[e] += 1\n    blanks[0] = num_starts[0]\n    for i in range(1, n):\n        blanks[i] = blanks[i - 1] + num_starts[i] - num_ends[i - 1]\n    max_blanks = sum(blanks[:m])\n    current_blanks = max_blanks\n    for i in range(m, n, 1):\n        current_blanks += blanks[i] - blanks[i - m]\n        if current_blanks > max_blanks:\n            max_blanks = current_blanks\n    ans[x] = n * m - max_blanks\nfor _t in range(t):\n    print(ans[_t])", "for h in range(int(input())):\n    (n, height) = map(int, input().strip().split())\n    end = [0 for i in range(n)]\n    start = [0 for i in range(n)]\n    row = [0 for i in range(n)]\n    for i in range(n):\n        (L, H) = map(int, input().strip().split())\n        start[L] += 1\n        end[H] += 1\n    row[0] = start[0]\n    for i in range(1, n):\n        row[i] = row[i - 1] + start[i] - end[i - 1]\n    maxi = sum(row[:height])\n    sumi = maxi\n    for i in range(height - 1, n - 1):\n        sumi = sumi + row[i + 1] - row[i - height + 1]\n        if sumi > maxi:\n            maxi = sumi\n    print(n * height - maxi)", "t = int(input())\nfor i in range(t):\n    (n, hi) = map(int, input().split())\n    a = [0 for j in range(n + 1)]\n    for j in range(n):\n        (l, h) = map(int, input().split())\n        a[l] += 1\n        a[h + 1] -= 1\n    for j in range(1, n):\n        a[j] += a[j - 1]\n    for j in range(1, n):\n        a[j] += a[j - 1]\n    a = [0] + a\n    m = -1\n    for j in range(n - hi + 1):\n        m = max(m, a[j + hi] - a[j])\n    print(n * hi - m)", "for t in range(int(input())):\n    temp = list(map(int, input().split()))\n    n = temp[0]\n    h = temp[1]\n    energy = []\n    energy.append(n)\n    for i in range(n):\n        energy.append(0)\n    for q in range(n):\n        temp = list(map(int, input().split()))\n        lb = temp[0]\n        ub = temp[1]\n        energy[lb] -= 1\n        if ub + 1 < n:\n            energy[ub + 1] += 1\n    dp = []\n    s = energy[0]\n    dp.append(s)\n    for i in range(1, n):\n        s += energy[i]\n        dp.append(s)\n    i = 0\n    s = 0\n    while i < n and i < h:\n        s += dp[i]\n        i += 1\n    ans = s\n    while i < n:\n        s -= dp[i - h]\n        s += dp[i]\n        if s < ans:\n            ans = s\n        i += 1\n    print(ans)", "t = int(input())\nwhile t > 0:\n    (n, h) = [int(i) for i in input().split()]\n    dp = [0] * (n + 2)\n    for i in range(n):\n        (x, y) = [int(i) + 1 for i in input().split()]\n        dp[0] += 1\n        dp[x] -= 1\n        dp[y + 1] += 1\n    for i in range(1, n + 1):\n        dp[i] += dp[i - 1]\n    dp[0] = 0\n    for i in range(2, n + 1):\n        dp[i] += dp[i - 1]\n    Min = 10000000000000\n    for i in range(h, n + 1):\n        Min = min(Min, dp[i] - dp[i - h])\n    print(Min)\n    t -= 1", "for _ in range(int(input().strip())):\n    (n, h) = map(int, input().strip().split())\n    row = [0] * (n + 2)\n    for i in range(n):\n        (a, b) = map(int, input().strip().split())\n        row[a + 1] -= 1\n        row[b + 2] += 1\n    row[0] = n\n    for i in range(n):\n        row[i + 1] += row[i]\n    for i in range(n):\n        row[i + 1] += row[i]\n    print(min((row[i] - row[i - h] for i in range(h, n + 1))))", "for cas in range(int(input())):\n    (n, h) = map(int, input().strip().split())\n    row = [0] * (n + 2)\n    for i in range(n):\n        (a, b) = map(int, input().strip().split())\n        row[a + 1] -= 1\n        row[b + 2] += 1\n    row[0] = n\n    for i in range(n):\n        row[i + 1] += row[i]\n    for i in range(n):\n        row[i + 1] += row[i]\n    print(min((row[i] - row[i - h] for i in range(h, n + 1))))", "def read_line_as_integer_tuple():\n    return tuple(map(int, input().split()))\nt = int(input())\nfor i in range(t):\n    (n, h) = read_line_as_integer_tuple()\n    gaps = [0] * (n + 1)\n    for j in range(n):\n        (a, b) = read_line_as_integer_tuple()\n        gaps[a] += 1\n        gaps[b + 1] -= 1\n    s = gaps[0]\n    for j in range(1, h):\n        gaps[j] += gaps[j - 1]\n        s += gaps[j]\n    m = s\n    for j in range(h, n + 1):\n        gaps[j] += gaps[j - 1]\n        s = s - gaps[j - h] + gaps[j]\n        m = max(m, s)\n    print(n * h - m)", "__author__ = 'Om Kumar Sahoo'\ncases = int(input())\nfor i in range(cases):\n    (n, h) = [int(x) for x in input().split()]\n    current = [0] * (n + 1)\n    for j in range(n):\n        (a, b) = [int(x) for x in input().split()]\n        current[a] += 1\n        current[b + 1] -= 1\n    for j in range(1, n + 1):\n        current[j] += current[j - 1]\n    temp = 0\n    for k in range(0, h):\n        temp = temp + current[k]\n    max = temp\n    for j in range(1, n - h + 1):\n        temp = temp - current[j - 1] + current[j - 1 + h]\n        if temp > max:\n            max = temp\n    print(n * h - max)", "import sys\n\ndef solve(gaps, N, H):\n    ant = 0\n    for i in range(N):\n        gaps[i] = ant + gaps[i]\n        ant = gaps[i]\n    minimo = 0\n    for i in range(H):\n        minimo += N - gaps[i]\n    suma = minimo\n    for i in range(H, N):\n        suma = suma - (N - gaps[i - H]) + (N - gaps[i])\n        minimo = min(minimo, suma)\n    return minimo\nT = int(input())\nfor i in range(T):\n    line = input()\n    lista = [int(x) for x in line.split()]\n    N = lista[0]\n    H = lista[1]\n    gaps = [0] * (N + 1)\n    for i in range(N):\n        line = input()\n        lista = [int(x) for x in line.split()]\n        gaps[lista[0]] += 1\n        gaps[lista[1] + 1] -= 1\n    print(solve(gaps, N, H))", "from collections import deque\n\nclass WayOut(object):\n\n    def __init__(self, N, H):\n        self._N = N\n        self._H = H\n        self._cells = [0] * N\n        self._intervals = []\n\n    def _AddCell(self, i, start, end):\n        self._intervals.append((start, 'start', i))\n        self._intervals.append((end + 1, 'end', i))\n\n    def _GetHorizontalSum(self, w):\n        return self._N - self._cells[w]\n\n    def _Process(self):\n        intervals_deque = deque(sorted(self._intervals))\n        intervals_dict = {}\n        for n in range(self._N):\n            while intervals_deque:\n                interval = intervals_deque.popleft()\n                if interval[0] == n and interval[1] == 'end':\n                    del intervals_dict[interval[2]]\n                    continue\n                else:\n                    intervals_deque.appendleft(interval)\n                    break\n            while intervals_deque:\n                interval = intervals_deque.popleft()\n                if interval[0] == n and interval[1] == 'start':\n                    intervals_dict[interval[2]] = True\n                else:\n                    intervals_deque.appendleft(interval)\n                    break\n            self._cells[n] = len(intervals_dict)\n\n    def GetMinSum(self):\n        self._Process()\n        w_end = self._H - 1\n        min_sum = self._N * self._N\n        w_sum = min_sum\n        while w_end < self._N:\n            w_start = w_end - self._H + 1\n            if w_start == 0:\n                w_sum = 0\n                while w_start <= w_end:\n                    w_sum += self._GetHorizontalSum(w_start)\n                    w_start += 1\n            else:\n                w_sum += self._GetHorizontalSum(w_end) - self._GetHorizontalSum(w_start - 1)\n            min_sum = min(w_sum, min_sum)\n            w_end += 1\n        return min_sum\n\ndef main():\n    T = int(input())\n    results = []\n    for t in range(T):\n        N_H = input().split()\n        N = int(N_H[0])\n        H = int(N_H[1])\n        way_out = WayOut(N, H)\n        for i in range(N):\n            cells = input().split()\n            cell_start = int(cells[0])\n            cell_end = int(cells[1])\n            way_out._AddCell(i, cell_start, cell_end)\n        results.append(way_out.GetMinSum())\n    for t in range(T):\n        print(results[t])\nmain()", "from collections import deque\n\nclass WayOut(object):\n\n    def __init__(self, N, H):\n        self._N = N\n        self._H = H\n        self._cells = [0] * N\n        self._intervals = []\n\n    def _AddCell(self, i, start, end):\n        self._intervals.append((start, 'start', i))\n        self._intervals.append((end + 1, 'end', i))\n\n    def _AddCell2(self, i, start, end):\n        for j in range(start, end + 1):\n            self._cells[j] += 1\n\n    def _GetHorizontalSum(self, w):\n        return self._N - self._cells[w]\n\n    def _Process(self):\n        intervals_deque = deque(sorted(self._intervals))\n        intervals_dict = {}\n        for n in range(self._N):\n            while intervals_deque:\n                interval = intervals_deque.popleft()\n                if interval[0] == n and interval[1] == 'end':\n                    del intervals_dict[interval[2]]\n                    continue\n                else:\n                    intervals_deque.appendleft(interval)\n                    break\n            while intervals_deque:\n                interval = intervals_deque.popleft()\n                if interval[0] == n and interval[1] == 'start':\n                    intervals_dict[interval[2]] = True\n                else:\n                    intervals_deque.appendleft(interval)\n                    break\n            self._cells[n] = len(intervals_dict)\n\n    def GetMinSum(self):\n        self._Process()\n        w_end = self._H - 1\n        min_sum = self._N * self._N\n        w_sum = min_sum\n        while w_end < self._N:\n            w_start = w_end - self._H + 1\n            if w_start == 0:\n                w_sum = 0\n                while w_start <= w_end:\n                    w_sum += self._GetHorizontalSum(w_start)\n                    w_start += 1\n            else:\n                w_sum += self._GetHorizontalSum(w_end) - self._GetHorizontalSum(w_start - 1)\n            min_sum = min(w_sum, min_sum)\n            w_end += 1\n        return min_sum\n\n    def GetMinSum2(self):\n        w_end = self._H - 1\n        min_sum = self._N * self._N\n        w_sum = min_sum\n        while w_end < self._N:\n            w_start = w_end - self._H + 1\n            if w_start == 0:\n                w_sum = 0\n                while w_start <= w_end:\n                    w_sum += self._GetHorizontalSum(w_start)\n                    w_start += 1\n            else:\n                w_sum += self._GetHorizontalSum(w_end) - self._GetHorizontalSum(w_start - 1)\n            min_sum = min(w_sum, min_sum)\n            w_end += 1\n        return min_sum\n\ndef main():\n    T = int(input())\n    results = []\n    for t in range(T):\n        N_H = input().split()\n        N = int(N_H[0])\n        H = int(N_H[1])\n        way_out = WayOut(N, H)\n        for i in range(N):\n            cells = input().split()\n            cell_start = int(cells[0])\n            cell_end = int(cells[1])\n            way_out._AddCell(i, cell_start, cell_end)\n        results.append(way_out.GetMinSum())\n    for t in range(T):\n        print(results[t])\nmain()", "for T in range(int(input())):\n    (N, H) = [int(s) for s in input().strip().split(' ')]\n    a = [0 for i in range(N + 1)]\n    for i in range(N):\n        (x, y) = [int(s) for s in input().strip().split(' ')]\n        a[x] += 1\n        a[y + 1] -= 1\n    for i in range(1, N + 1):\n        a[i] += a[i - 1]\n    total = 0\n    for i in range(H):\n        total += a[i]\n    mx = total\n    for i in range(H, N):\n        total += a[i] - a[i - H]\n        if total > mx:\n            mx = total\n    print(N * H - mx)", "import sys\ninput = sys.stdin.readline\ntests = int(input())\nfor t in range(tests):\n    (n, h) = [int(i) for i in input().split()]\n    starts = []\n    ends = []\n    for i in range(n):\n        l = [int(j) for j in input().split()]\n        starts.append(l[0])\n        ends.append(l[1])\n    starts.sort()\n    ends.sort()\n    blocks = n\n    a = []\n    startpos = 0\n    endpos = 0\n    for i in range(n):\n        while startpos < n and starts[startpos] == i:\n            blocks -= 1\n            startpos += 1\n        while endpos < n and ends[endpos] == i - 1:\n            blocks += 1\n            endpos += 1\n        a.append(blocks)\n    toclear = sum(a[0:h])\n    best = toclear\n    for i in range(h, n):\n        toclear += a[i]\n        toclear -= a[i - h]\n        best = min(toclear, best)\n    print(best)", "from itertools import accumulate\nl = int(input())\nfor i in range(l):\n    (n, h) = input().split()\n    n = int(n)\n    h = int(h)\n    sum_list = [n] * n\n    range_list = [0] * n\n    for j in range(n):\n        (h1, h2) = input().split()\n        h1 = int(h1)\n        h2 = int(h2)\n        range_list[h1] -= 1\n        if h2 + 1 < n:\n            range_list[h2 + 1] += 1\n    sum_range = list(accumulate(range_list))\n    sum_list = [x + y for (x, y) in zip(sum_list, sum_range)]\n    sum_final = [sum(sum_list[0:h])]\n    for j in range(h, n):\n        sum_final.append(sum_final[-1] + sum_list[j] - sum_list[j - h])\n    print(min(sum_final))", "t = int(input())\nwhile t > 0:\n    (n, h) = [int(x) for x in input().split()]\n    h3 = n * h\n    r = [0] * 1000002\n    for i in range(n):\n        (a, b) = [int(x) for x in input().split()]\n        r[a] = r[a] + 1\n        r[b + 1] = r[b + 1] - 1\n    max = r[0]\n    for i in range(1, n):\n        r[i] = r[i - 1] + r[i]\n        if i < h:\n            max = max + r[i]\n    h1 = max\n    for i in range(1, n - h + 1):\n        h1 = h1 - r[i - 1] + r[i + h - 1]\n        if h1 == h3:\n            max = h1\n            break\n        if h1 > max:\n            max = h1\n    print(h3 - max)\n    t = t - 1", "for tests in range(int(input())):\n    [N, H] = [int(i) for i in input().split()]\n    count = [0 for i in range(1 + N)]\n    for i in range(N):\n        [li, hi] = [int(i) for i in input().split()]\n        count[li] += 1\n        count[hi + 1] -= 1\n    s = 0\n    for i in range(N):\n        s += count[i]\n        count[i] = s\n    current = sum(count[:H])\n    maxi = current\n    for i in range(0, N - H):\n        current += count[i + H] - count[i]\n        maxi = max(maxi, current)\n    print(N * H - maxi)", "a = int(input())\nwhile a > 0:\n    a -= 1\n    b = input()\n    (n, h) = [int(n) for n in b.split()]\n    A = [0] * (n + 2)\n    B = [0] * (n + 2)\n    for i in range(n):\n        b = input()\n        (q1, q2) = [int(n) for n in b.split()]\n        A[q1] += -1\n        A[q2 + 1] += 1\n    t = 0\n    for i in range(n):\n        t += A[i]\n        B[i] = t + n\n    l = 0\n    for i in range(h):\n        l += B[i]\n    l1 = 0\n    l1 = l\n    for i in range(1, n - h + 1):\n        l1 = l1 - B[i - 1] + B[i + h - 1]\n        l = min(l1, l)\n    print(l)", "for t in range(int(input())):\n    (n, h) = map(int, input().split())\n    arr = []\n    (start, end) = ([0] * n, [0] * n)\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        start[x] += 1\n        end[y] += 1\n    sand = [0] * n\n    sand[0] = n - start[0]\n    for i in range(1, n):\n        sand[i] = sand[i - 1] - start[i] + end[i - 1]\n    _min = 0\n    for i in range(0, h):\n        _min += sand[i]\n    newSum = _min\n    for i in range(h, n):\n        newSum = newSum + sand[i] - sand[i - h]\n        if newSum < _min:\n            _min = newSum\n    print(_min)", "t = int(input())\nfor _ in range(t):\n    (n, h) = list(map(int, input().split()))\n    wall = [n for i in range(n)]\n    ops = [0 for i in range(n)]\n    cls = [0 for i in range(n)]\n    for i in range(n):\n        (li, hi) = list(map(int, input().split()))\n        ops[li] += 1\n        cls[hi] += 1\n    smash = 0\n    for i in range(n):\n        smash += ops[i]\n        wall[i] -= smash\n        smash -= cls[i]\n    energy = 0\n    for i in range(h):\n        energy += wall[i]\n    minenergy = energy\n    for i in range(h, n):\n        energy += wall[i]\n        energy -= wall[i - h]\n        minenergy = min(energy, minenergy)\n    print(minenergy)", "t = int(input())\nfor i in range(t):\n    (n, h) = map(int, input().strip().split())\n    a = [0] * (n + 1)\n    for j in range(n):\n        (start, end) = map(int, input().strip().split())\n        a[start + 1] += 1\n        if end + 1 != n:\n            a[end + 2] -= 1\n    dummy = 0\n    for j in range(1, n + 1):\n        dummy += a[j]\n        a[j] = n - dummy\n    mini = n * h\n    for j in range(1, n - h + 2):\n        if j == 1:\n            sumi = sum(a[j:j + h])\n        else:\n            sumi += a[j + h - 1] - a[j - 1]\n        if mini > sumi:\n            mini = sumi\n    print(mini)", "t = int(input())\nfor i in range(t):\n    (n, h) = map(int, input().strip().split())\n    a = [0] * (n + 1)\n    for j in range(n):\n        (start, end) = map(int, input().strip().split())\n        a[start + 1] += 1\n        if end + 1 != n:\n            a[end + 2] -= 1\n    dummy = 0\n    for j in range(1, n + 1):\n        dummy += a[j]\n        a[j] = n - dummy\n    mini = n * h\n    for j in range(1, n - h + 2):\n        if j == 1:\n            sumi = sum(a[j:j + h])\n        else:\n            sumi += a[j + h - 1] - a[j - 1]\n        if mini > sumi:\n            mini = sumi\n    print(mini)"]