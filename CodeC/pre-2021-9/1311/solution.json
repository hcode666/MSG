["def convertToParitys(s):\n    keys = '?abcdefghijklmnopqrstuvwxyz'\n    paritys = {c: 0 for c in keys}\n    for c in s:\n        paritys[c] += 1\n    for (c, v) in paritys.items():\n        paritys[c] = v % 2\n    out = 0\n    bitValue = 1\n    for c in keys:\n        if paritys[c]:\n            out += bitValue\n        bitValue *= 2\n    return out\n\ndef getSolutionBitMaps(s):\n    out = []\n    sP = convertToParitys(s)\n    if sP % 2:\n        sP -= 1\n    out.append(sP)\n    for n in range(1, 27):\n        out.append(sP ^ 1 + 2 ** n)\n    return out\n\ndef getLeadingSubStringBitMapCounts(s):\n    out = {}\n    bM = 0\n    keys = '?abcdefghijklmnopqrstuvwxyz'\n    paritys = {c: 0 for c in keys}\n    values = {c: 2 ** i for (i, c) in enumerate(keys)}\n    out[bM] = out.setdefault(bM, 0) + 1\n    bMis = []\n    i = 0\n    bMis = [0]\n    for c in s:\n        i += 1\n        if paritys[c]:\n            paritys[c] = 0\n            bM -= values[c]\n        else:\n            paritys[c] = 1\n            bM += values[c]\n        out[bM] = out.setdefault(bM, 0) + 1\n        bMis.append(bM)\n    return (out, bMis)\n\ndef solve(s):\n    out = 0\n    (bMjCounts, bMis) = getLeadingSubStringBitMapCounts(s)\n    solutions = getSolutionBitMaps(s)\n    for bMi in bMis:\n        for bMs in solutions:\n            if bMs ^ bMi in bMjCounts:\n                out += bMjCounts[bMs ^ bMi]\n    if 0 in solutions:\n        out -= len(s)\n    out //= 2\n    return out\nT = int(input())\nfor tc in range(T):\n    s = input()\n    print(solve(s))", "import sys\n\ndef solve(S):\n    N = len(S)\n    parity_S = 0\n    qs_add = 1 << 26\n    ord_a = ord('a')\n    for (i, c) in enumerate(S):\n        if c != '?':\n            parity_S ^= 1 << ord(c) - ord_a\n    good_Rs = [parity_S]\n    for c in range(26):\n        good_Rs.append(parity_S ^ 1 << c | qs_add)\n    prefix_parities = dict()\n    prefix_parities[0] = 1\n    parity_R = 0\n    soln = 0\n    for (j, c) in enumerate(S):\n        if c == '?':\n            parity_R ^= qs_add\n        else:\n            parity_R ^= 1 << ord(c) - ord_a\n        for good_R in good_Rs:\n            soln += prefix_parities.get(good_R ^ parity_R, 0)\n        if parity_R in prefix_parities:\n            prefix_parities[parity_R] += 1\n        else:\n            prefix_parities[parity_R] = 1\n    return soln\n\ndef main():\n    test_cases = int(sys.stdin.readline())\n    for _ in range(test_cases):\n        S = sys.stdin.readline().strip()\n        print(solve(S))\nmain()", "def letterNo(c):\n    if i == '?':\n        return 26\n    return ord(c) - 97\nfor _ in range(int(input())):\n    s = input().strip()\n    mask = 0\n    for i in s:\n        if i != '?':\n            mask ^= 1 << letterNo(i)\n    d = {}\n    x = 0\n    d[0] = 1\n    ans = 0\n    for i in s:\n        x ^= 1 << letterNo(i)\n        ans += d.get(x ^ mask, 0)\n        for j in range(26):\n            ans += d.get(x ^ 1 << 26 ^ 1 << j ^ mask, 0)\n        d[x] = d.get(x, 0) + 1\n    print(ans)", "def to_bit(c):\n    if c == '?':\n        bit = 26\n    else:\n        bit = ord(c) - ord('a')\n    return bit\nT = int(input())\nfor _ in range(T):\n    s = input()\n    mask = 0\n    for c in s:\n        if c != '?':\n            mask ^= 1 << to_bit(c)\n    good_prefixes = []\n    good_prefixes.append(mask & (1 << to_bit('?')) - 1)\n    for i in range(26):\n        good_prefixes.append(mask ^ 1 << i | 1 << to_bit('?'))\n    prefixes = {0: 1}\n    res = 0\n    current = 0\n    for c in s:\n        current ^= 1 << to_bit(c)\n        for prefix in good_prefixes:\n            res += prefixes.get(prefix ^ current, 0)\n        prefixes[current] = prefixes.get(current, 0) + 1\n    print(res)"]