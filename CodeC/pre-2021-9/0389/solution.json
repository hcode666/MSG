["def solve():\n    for _ in range(int(input())):\n        n = int(input())\n        mat = [list(map(int, input().split())) for _ in range(n)]\n        ans = 0\n        for i in range(n - 1, 0, -1):\n            if mat[i][i - 1] + 1 != mat[i][i]:\n                ans += 1\n                for j in range(i + 1):\n                    for k in range(j, i + 1):\n                        (mat[j][k], mat[k][j]) = (mat[k][j], mat[j][k])\n        print(ans)\nsolve()", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        s = list(map(int, input().split()))\n        l.append(s)\n    a = l[0]\n    a.append(n + 1)\n    c = 0\n    for i in range(1, n):\n        if a[i] == i + 1 and a[i + 1] == i + 2 or (a[i] == i * n + 1 and a[i + 1] == (i + 1) * n + 1):\n            continue\n        else:\n            c += 1\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        matrix.append([int(x) for x in input().split()])\n    cur = 0\n    a = []\n    for i in range(n):\n        if matrix[i][0] == n * i + 1:\n            a.append(0)\n        else:\n            a.append(1)\n    a = a[::-1]\n    s = 0\n    cur = 0\n    for i in range(len(a) - 1):\n        if a[i] != cur:\n            cur = a[i]\n            s += 1\n    print(s)", "t = int(input())\n\ndef fun(ar):\n    far = 0\n    xv = 1\n    for i in range(len(ar) - 1):\n        if ar[i] == xv:\n            continue\n        else:\n            xv = ar[i]\n            far += 1\n    return far\nfor _ in range(t):\n    n = int(input())\n    val = [*range(1, n * n + 1, n)]\n    ar = []\n    far = []\n    for i in range(n):\n        xa = list(map(int, input().split()))\n        ar.append(xa)\n        if xa[0] == val[i]:\n            far.append(1)\n        else:\n            far.append(0)\n    far = far[::-1]\n    v = fun(far)\n    print(v)", "t = int(input())\n\ndef fun(ar):\n    far = 0\n    xv = 1\n    if ar[0] == 0:\n        far += 1\n        xv = 0\n    for i in range(1, len(ar) - 1):\n        if ar[i] == xv:\n            continue\n        else:\n            xv = ar[i]\n            far += 1\n    return far\nfor _ in range(t):\n    n = int(input())\n    val = [*range(1, n * n + 1, n)]\n    ar = []\n    far = []\n    for i in range(n):\n        xa = list(map(int, input().split()))\n        ar.append(xa)\n        if xa[0] == val[i]:\n            far.append(1)\n        else:\n            far.append(0)\n    far = far[::-1]\n    v = fun(far)\n    print(v)", "t = int(input())\n\ndef fun(ar):\n    far = 0\n    xv = 1\n    if ar[0] == 0:\n        far += 1\n        xv = 0\n    for i in range(1, len(ar) - 1):\n        if ar[i] == xv:\n            continue\n        else:\n            xv = ar[i]\n            far += 1\n    return far\nfor _ in range(t):\n    n = int(input())\n    val = [*range(1, n * n + 1, n)]\n    ar = []\n    far = []\n    for i in range(n):\n        xa = list(map(int, input().split()))\n        ar.append(xa)\n        if xa[0] == val[i]:\n            far.append(1)\n        else:\n            far.append(0)\n    far = far[::-1]\n    v = fun(far)\n    print(v)", "for _ in range(int(input())):\n    N = int(input())\n    L = []\n    for n in range(N):\n        l = list(map(int, input().split()))\n        L.append(l)\n    c = 0\n    i = 0\n    direct = 0 if L[0][1] == 2 else 1\n    while i < N - 1:\n        i += 1\n        if direct == 0 and L[0][i] == i + 1 or (direct == 1 and L[i][0] == i + 1):\n            continue\n        direct = 0 if direct else 1\n        c += 1\n    if direct:\n        c += 1\n    print(c)", "for _ in range(int(input())):\n    N = int(input())\n    L = []\n    for n in range(N):\n        l = list(map(int, input().split()))\n        L.append(l)\n    c = 0\n    i = 0\n    direct = 0 if L[0][1] == 2 else 1\n    while i < N - 1:\n        i += 1\n        if direct == 0 and L[0][i] == i + 1 or (direct == 1 and L[i][0] == i + 1):\n            continue\n        direct = 0 if direct else 1\n        c += 1\n    if direct:\n        c += 1\n    print(c)", "for i in range(int(input())):\n    n = int(input())\n    list2 = []\n    list_v = []\n    list_h = []\n    for i in range(n):\n        list1 = list(map(int, input().split()))\n        list2.append(list1)\n    list_h = list2[0]\n    for z in list2:\n        list_v.append(z[0])\n    j = 0\n    serial = 1\n    count = 0\n    switch = 'h'\n    while j < n:\n        if switch == 'h':\n            if list_h[j] != serial:\n                switch = 'v'\n                count += 1\n        elif list_v[j] != serial:\n            switch = 'h'\n            count += 1\n        serial += 1\n        j += 1\n    if list_h[n - 1] != n:\n        count += 1\n    if list_h[1] == 2:\n        print(count)\n    else:\n        print(count - 1)", "for _ in range(int(input())):\n    N = int(input())\n    arr = [None] * N\n    arr[0] = 0\n    for i in range(N):\n        x = list(map(int, input().split()))\n        if i == 0:\n            continue\n        if x[i] - x[i - 1] == 1:\n            arr[i] = 0\n        else:\n            arr[i] = 1\n    ans = 0\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i + 1]:\n            ans += 1\n    if arr[-1] == 1:\n        ans += 1\n    print(ans)", "t = input()\nfor c in range(0, int(t)):\n    N = int(input())\n    arr = [None] * N\n    arr[0] = 0\n    for i in range(N):\n        x = list(map(int, input().split()))\n        if i == 0:\n            continue\n        if x[i] - x[i - 1] == 1:\n            arr[i] = 0\n        else:\n            arr[i] = 1\n    ans = 0\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i + 1]:\n            ans += 1\n    if arr[-1] == 1:\n        ans += 1\n    print(ans)", "t = input()\nfor c in range(0, int(t)):\n    N = int(input())\n    arr = [None] * N\n    arr[0] = 0\n    for i in range(N):\n        x = list(map(int, input().split()))\n        if i == 0:\n            continue\n        if x[i] - x[i - 1] == 1:\n            arr[i] = 0\n        else:\n            arr[i] = 1\n    ans = 0\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i + 1]:\n            ans += 1\n    if arr[-1] == 1:\n        ans += 1\n    print(ans)", "for _ in range(int(input())):\n    N = int(input())\n    arr = [None] * N\n    arr[0] = 0\n    for i in range(N):\n        x = list(map(int, input().split()))\n        if i == 0:\n            continue\n        if x[i] - x[i - 1] == 1:\n            arr[i] = 0\n        else:\n            arr[i] = 1\n    ans = 0\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i + 1]:\n            ans += 1\n    if arr[-1] == 1:\n        ans += 1\n    print(ans)", "for _ in range(int(input())):\n    N = int(input())\n    arr = [None] * N\n    arr[0] = 0\n    for i in range(N):\n        x = list(map(int, input().split()))\n        if i == 0:\n            continue\n        if x[i] - x[i - 1] == 1:\n            arr[i] = 0\n        else:\n            arr[i] = 1\n    ans = 0\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i + 1]:\n            ans += 1\n    if arr[-1] == 1:\n        ans += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    for i in range(n):\n        if not i:\n            acc = list(map(int, input().split()))\n            bel = [acc[0]]\n        else:\n            bel.append(list(map(int, input().split()))[0])\n    cnt = 0\n    for i in range(n - 1, -1, -1):\n        if acc[i] > bel[i]:\n            (acc[:i + 1], bel[:i + 1]) = (bel[:i + 1], acc[:i + 1])\n            cnt += 1\n    print(cnt)", "for i in range(int(input())):\n    n = int(input())\n    a = []\n    c = 0\n    for j in range(n):\n        a.append(list(map(int, input().split())))\n    while n > 1:\n        if a[0][n - 1] != n:\n            c += 1\n            for j in range(1, n):\n                (a[0][j], a[j][0]) = (a[j][0], a[0][j])\n        n -= 1\n    print(c)", "for i in range(int(input())):\n    n = int(input())\n    a = []\n    c = 0\n    for j in range(n):\n        a.append(list(map(int, input().split())))\n    while n > 1:\n        if a[0][n - 1] != n:\n            c += 1\n            for j in range(1, n):\n                (a[0][j], a[j][0]) = (a[j][0], a[0][j])\n        n -= 1\n    print(c)", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    x = []\n    y = 0\n    for i in range(n):\n        x.append(list(map(int, input().split())))\n    while n > 1:\n        if x[0][n - 1] != n:\n            y += 1\n            for i in range(1, n):\n                (x[0][i], x[i][0]) = (x[i][0], x[0][i])\n        n -= 1\n    print(y)", "T = int(input())\nfor x in range(T):\n    n = int(input())\n    a = []\n    c = 0\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    while n > 1:\n        if a[0][n - 1] != n:\n            c += 1\n            for i in range(1, n):\n                (a[0][i], a[i][0]) = (a[i][0], a[0][i])\n        n -= 1\n    print(c)", "T = int(input())\nfor x in range(T):\n    n = int(input())\n    a = []\n    c = 0\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    while n > 1:\n        if a[0][n - 1] != n:\n            c += 1\n            for i in range(1, n):\n                (a[0][i], a[i][0]) = (a[i][0], a[0][i])\n        n -= 1\n    print(c)", "for m in range(int(input())):\n    p = int(input())\n    a = []\n    c = 0\n    for i in range(p):\n        a.append(list(map(int, input().split())))\n    while p > 1:\n        if a[0][p - 1] != p:\n            c += 1\n            for i in range(1, p):\n                (a[0][i], a[i][0]) = (a[i][0], a[0][i])\n        p -= 1\n    print(c)", "for m in range(int(input())):\n    p = int(input())\n    a = []\n    c = 0\n    for i in range(p):\n        a.append(list(map(int, input().split())))\n    while p > 1:\n        if a[0][p - 1] != p:\n            c += 1\n            for i in range(1, p):\n                (a[0][i], a[i][0]) = (a[i][0], a[0][i])\n        p -= 1\n    print(c)", "def main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        matrix = []\n        for i in range(N):\n            matrix.append(list(map(int, input().split())))\n        print(solve(matrix))\n\ndef solve(matrix):\n    N = len(matrix)\n    count = 0\n    for i in range(N - 1, 0, -1):\n        if matrix[i][i] != matrix[i][i - 1] + 1:\n            count += 1\n            for j in range(i + 1):\n                for k in range(j, i + 1):\n                    (matrix[j][k], matrix[k][j]) = (matrix[k][j], matrix[j][k])\n    return count\nmain()", "from collections import Counter, UserString\nmod = lambda n: n % (10 ** 9 + 7)\nfc_ = [1]\nfor i in range(1, 1000001):\n    fc_.append(i * fc_[i - 1])\n    fc_[i] = mod(fc_[i])\n\ndef fact(n):\n    return fc_[n]\n\ndef printm(n):\n    print(mod(n))\n\ndef yn(b, caps=False):\n    if b:\n        returning = 'Yes'\n    else:\n        returning = 'No'\n    if caps:\n        return returning.upper()\n    return returning\n\ndef isPrime(n):\n    if n > 1:\n        for i in range(2, int(n ** 0.5) + 1):\n            if not n % i:\n                return False\n        else:\n            return True\n    return True\n\ndef decimal(n):\n    return int(ans) + int(int(ans) != ans)\n\nclass mutableStr(UserString):\n\n    def ins(self, n, s):\n        if n < 0:\n            self.data = self.data = ''.join(list(self.data)[:n + 1]) + s + ''.join(list(self.data)[n + 1:])\n        else:\n            self.data = ''.join(list(self.data)[:n]) + s + ''.join(list(self.data)[n:])\n\n    def rem(self, s):\n        self.data = self.data.replace(s, '')\nalphabetOrd = [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]\nalphabet = list('abcdefghijklmnopqrstuvwxyz')\nr2 = lambda n: range(1, n + 1)\nalph = lambda s: s.isalpha()\nsl = lambda l: list(set(l))\ninf = float('inf')\nsoi = lambda : sorted(input())\nii = lambda : int(input())\nli = lambda : list(map(int, input().split()))\nsi = lambda : mutableStr(input())\nlsi = lambda : list(input())\nsepi = lambda : map(int, input().split())\nseti = lambda : set(map(int, input().split()))\nfor t in range(int(input())):\n    n = ii()\n    l = []\n    for i in r2(n):\n        l.append(li())\n    c = 0\n    p = n\n    for i in range(n - 1, 0, -1):\n        if l[0][i] != i + 1:\n            c += 1\n            for j in r2(i):\n                (l[0][j], l[j][0]) = (l[j][0], l[0][j])\n    print(c)", "from collections import Counter, UserString\nmod = lambda n: n % (10 ** 9 + 7)\nfc_ = [1]\nfor i in range(1, 1000001):\n    fc_.append(i * fc_[i - 1])\n    fc_[i] = mod(fc_[i])\n\ndef fact(n):\n    return fc_[n]\n\ndef printm(n):\n    print(mod(n))\n\ndef yn(b, caps=False):\n    if b:\n        returning = 'Yes'\n    else:\n        returning = 'No'\n    if caps:\n        return returning.upper()\n    return returning\n\ndef isPrime(n):\n    if n > 1:\n        for i in range(2, int(n ** 0.5) + 1):\n            if not n % i:\n                return False\n        else:\n            return True\n    return True\n\ndef decimal(n):\n    return int(ans) + int(int(ans) != ans)\n\nclass mutableStr(UserString):\n\n    def ins(self, n, s):\n        if n < 0:\n            self.data = self.data = ''.join(list(self.data)[:n + 1]) + s + ''.join(list(self.data)[n + 1:])\n        else:\n            self.data = ''.join(list(self.data)[:n]) + s + ''.join(list(self.data)[n:])\n\n    def rem(self, s):\n        self.data = self.data.replace(s, '')\nalphabetOrd = [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]\nalphabet = list('abcdefghijklmnopqrstuvwxyz')\nr2 = lambda n: range(1, n + 1)\nalph = lambda s: s.isalpha()\nsl = lambda l: list(set(l))\ninf = float('inf')\nsoi = lambda : sorted(input())\nii = lambda : int(input())\nli = lambda : list(map(int, input().split()))\nsi = lambda : mutableStr(input())\nlsi = lambda : list(input())\nsepi = lambda : map(int, input().split())\nseti = lambda : set(map(int, input().split()))\nfor t in range(int(input())):\n    n = ii()\n    l = []\n    for i in r2(n):\n        l.append(li())\n    c = 0\n    p = n\n    while p > 1:\n        if l[0][p - 1] != p:\n            c += 1\n            for i in range(1, p):\n                (l[0][i], l[i][0]) = (l[i][0], l[0][i])\n        p -= 1\n    print(c)", "for m in range(int(input())):\n    p = int(input())\n    a = []\n    c = 0\n    for i in range(p):\n        a.append(list(map(int, input().split())))\n    while p > 1:\n        if a[0][p - 1] != p:\n            c += 1\n            for i in range(1, p):\n                (a[0][i], a[i][0]) = (a[i][0], a[0][i])\n        p -= 1\n    print(c)", "for _ in range(int(input())):\n    N = int(input())\n    L = []\n    for n in range(N):\n        l = list(map(int, input().split()))\n        L.append(l)\n    c = 0\n    i = 0\n    direct = 0 if L[0][1] == 2 else 1\n    while i < N - 1:\n        i += 1\n        if direct == 0 and L[0][i] == i + 1 or (direct == 1 and L[i][0] == i + 1):\n            continue\n        direct = 0 if direct else 1\n        c += 1\n    if direct:\n        c += 1\n    print(c)", "for _ in range(int(input())):\n    N = int(input())\n    L = []\n    for n in range(N):\n        l = list(map(int, input().split()))\n        L.append(l)\n    c = 0\n    i = 0\n    direct = 0 if L[0][1] == 2 else 1\n    while i < N - 1:\n        i += 1\n        if direct == 0 and L[0][i] == i + 1 or (direct == 1 and L[i][0] == i + 1):\n            continue\n        direct = 0 if direct else 1\n        c += 1\n    if direct:\n        c += 1\n    print(c)", "for t in range(int(input())):\n    n = int(input())\n    a = []\n    c = 0\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    while n > 1:\n        if a[0][n - 1] != n:\n            c += 1\n            for i in range(1, n):\n                (a[0][i], a[i][0]) = (a[i][0], a[0][i])\n        n -= 1\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    ans = 0\n    while n > 1:\n        if l[0][n - 1] != n:\n            ans += 1\n            for i in range(1, n):\n                (l[0][i], l[i][0]) = (l[i][0], l[0][i])\n        n -= 1\n    print(ans)", "for _ in range(int(input())):\n    x = int(input())\n    y = []\n    for n in range(x):\n        l = list(map(int, input().split()))\n        y.append(l)\n    c = 0\n    i = 0\n    direct = 0 if y[0][1] == 2 else 1\n    while i < x - 1:\n        i += 1\n        if direct == 0 and y[0][i] == i + 1 or (direct == 1 and y[i][0] == i + 1):\n            continue\n        direct = 0 if direct else 1\n        c += 1\n    if direct:\n        c += 1\n    print(c)", "for _ in range(int(input())):\n    N = int(input())\n    L = []\n    for n in range(N):\n        l = list(map(int, input().split()))\n        L.append(l)\n    c = 0\n    i = 0\n    direct = 0 if L[0][1] == 2 else 1\n    while i < N - 1:\n        i += 1\n        if direct == 0 and L[0][i] == i + 1 or (direct == 1 and L[i][0] == i + 1):\n            continue\n        direct = 0 if direct else 1\n        c += 1\n    if direct:\n        c += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list((int(ele) for ele in input().strip().split()))[:n])\n    p = 0\n    for i in range(n - 1, 0, -1):\n        if l[0][i] != i + 1 and p % 2 == 0:\n            p += 1\n        if l[0][i] == i + 1 and p & 1:\n            p += 1\n    print(p)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list((int(ele) for ele in input().strip().split()))[:n])\n    p = 0\n    for i in range(n - 1, 0, -1):\n        if l[0][i] != i + 1 and p % 2 == 0:\n            p += 1\n        if l[0][i] == i + 1 and p & 1:\n            p += 1\n    print(p)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = []\n    for j in range(n):\n        r = list(map(int, input().split()))\n        l.append(r)\n    ans = 0\n    for k in range(n - 1, 0, -1):\n        if l[0][k] != k + 1 and ans % 2 == 0:\n            ans += 1\n        if l[0][k] == k + 1 and ans & 1:\n            ans += 1\n    print(ans)", "tests = int(input())\nfor i in range(tests):\n    n = int(input())\n    mat = []\n    for j in range(n):\n        row = list(map(int, input().split()))\n        mat.append(row)\n    ans = 0\n    for j in range(n - 1, 0, -1):\n        if mat[0][j] != j + 1 and ans % 2 == 0:\n            ans += 1\n        if mat[0][j] == j + 1 and ans & 1:\n            ans += 1\n    print(ans)", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        matrix = []\n        for i in range(n):\n            li = list(map(int, input().split()))\n            matrix.append(li)\n        li = matrix[0]\n        boolean = ['True'] * n\n        count = 0\n        for j in range(n):\n            if li[j] != j + 1:\n                boolean[j] = 'False'\n        for k in range(n - 1, 0, -1):\n            if boolean[k] == 'True':\n                continue\n            for i in range(k, 0, -1):\n                if boolean[i] == 'True':\n                    boolean[i] = 'False'\n                else:\n                    boolean[i] = 'True'\n            count += 1\n        print(count)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    q = []\n    for i in range(n):\n        q.append(list(map(int, input().split())))\n    r = 0\n    while n > 1:\n        if q[0][n - 1] != n:\n            r += 1\n            for i in range(n):\n                (q[0][i], q[i][0]) = (q[i][0], q[0][i])\n        n -= 1\n    print(r)", "import sys\nimport math\nimport bisect\nimport numpy as np\nfrom sys import stdin, stdout\nfrom itertools import accumulate, chain, combinations, groupby, permutations, product\nfrom collections import deque, Counter\nfrom bisect import bisect_left, bisect_right\nfrom math import gcd, sqrt, sin, cos, tan, degrees, radians\nfrom fractions import Fraction\nfrom decimal import Decimal\nimport sys\nMOD = 10 ** 9 + 7\nINF = 10 ** 20\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\n\ndef solve():\n    n = int(input())\n    q = []\n    for i in range(n):\n        q.append(list(map(int, input().split())))\n    r = 0\n    while n > 1:\n        if q[0][n - 1] != n:\n            r += 1\n            for i in range(n):\n                (q[0][i], q[i][0]) = (q[i][0], q[0][i])\n        n -= 1\n    print(r)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    N = int(input())\n    req = 0\n    prev = True\n    for (i, s) in enumerate(input().split()[1:] + [str(N + 1)], 2):\n        if i == 2:\n            prev = int(s) == i\n        else:\n            input()\n            if (int(s) == i) != prev:\n                prev = not prev\n                req += 1\n    print(req)", "for _ in range(int(input())):\n    N = int(input())\n    req = 0\n    prev = True\n    for (i, s) in enumerate(input().split()[1:] + [str(N + 1)], 2):\n        if i == 2:\n            prev = int(s) == i\n        elif (int(s) == i) != prev:\n            prev = not prev\n            req += 1\n    for _ in range(N - 1):\n        input()\n    print(req)", "for _ in range(int(input())):\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        li = list(map(int, input().split()))\n        matrix.append(li)\n    li = matrix[0]\n    boolean = ['True'] * n\n    count = 0\n    for j in range(n):\n        if li[j] != j + 1:\n            boolean[j] = 'False'\n    for k in range(n - 1, 0, -1):\n        if boolean[k] == 'True':\n            continue\n        for i in range(k, 0, -1):\n            if boolean[i] == 'True':\n                boolean[i] = 'False'\n            else:\n                boolean[i] = 'True'\n        count += 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    ans = 0\n    while n > 1:\n        if l[0][n - 1] != n:\n            ans += 1\n            for i in range(1, n):\n                (l[0][i], l[i][0]) = (l[i][0], l[0][i])\n        n -= 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    temp = []\n    for i in range(n):\n        temp1 = [int(x) for x in input().split()]\n        temp.append(temp1)\n    count = 0\n    while n > 1:\n        if temp[0][n - 1] != n:\n            count += 1\n            for i in range(1, n):\n                (temp[0][i], temp[i][0]) = (temp[i][0], temp[0][i])\n        n = n - 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    ans = 0\n    while n > 1:\n        if l[0][n - 1] != n:\n            ans += 1\n            for i in range(1, n):\n                (l[0][i], l[i][0]) = (l[i][0], l[0][i])\n        n -= 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    ans = 0\n    while n > 1:\n        if l[0][n - 1] != n:\n            ans += 1\n            for i in range(1, n):\n                (l[0][i], l[i][0]) = (l[i][0], l[0][i])\n        n -= 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    ans = 0\n    while n > 1:\n        if l[0][n - 1] != n:\n            ans += 1\n            for i in range(1, n):\n                (l[0][i], l[i][0]) = (l[i][0], l[0][i])\n        n -= 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    emp = []\n    count = 0\n    for i in range(n):\n        emp.append(list(map(int, input().split())))\n    while n > 1:\n        if emp[0][n - 1] != n:\n            count += 1\n            for i in range(n):\n                for k in range(i + 1, n):\n                    (emp[i][k], emp[k][i]) = (emp[k][i], emp[i][k])\n        n -= 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    emp = []\n    count = 0\n    for i in range(n):\n        emp.append(list(map(int, input().split())))\n    while n > 1:\n        if emp[0][n - 1] != n:\n            count += 1\n            for i in range(n):\n                for k in range(i + 1, n):\n                    (emp[i][k], emp[k][i]) = (emp[k][i], emp[i][k])\n        n -= 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    emp = []\n    count = 0\n    for i in range(n):\n        emp.append(list(map(int, input().split())))\n    while n > 1:\n        if emp[0][n - 1] != n:\n            count += 1\n            for i in range(n):\n                for k in range(i + 1, n):\n                    (emp[i][k], emp[k][i]) = (emp[k][i], emp[i][k])\n        n -= 1\n    print(count)", "def rightmostF(row):\n    for i in range(len(row) - 1, -1, -1):\n        if row[i] is False:\n            return i\n    return -1\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    mat = []\n    rowBool = []\n    count = 0\n    for i in range(N):\n        row = list(map(int, input().split()))\n        mat.append(row)\n    for i in range(N):\n        rowBool.append(mat[0][i] == i + 1)\n    while True:\n        rightmostFalse = rightmostF(rowBool)\n        if rightmostFalse == -1:\n            break\n        count = count + 1\n        for i in range(1, rightmostFalse + 1):\n            rowBool[i] = not rowBool[i]\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    emp = []\n    count = 0\n    for i in range(n):\n        emp.append(list(map(int, input().split())))\n    while n > 1:\n        if emp[0][n - 1] != n:\n            count += 1\n            for i in range(n):\n                for k in range(i + 1, n):\n                    (emp[i][k], emp[k][i]) = (emp[k][i], emp[i][k])\n        n -= 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    emp = []\n    count = 0\n    for i in range(n):\n        emp.append(list(map(int, input().split())))\n    while n > 1:\n        if emp[0][n - 1] != n:\n            count += 1\n            for i in range(n):\n                for k in range(i + 1, n):\n                    (emp[i][k], emp[k][i]) = (emp[k][i], emp[i][k])\n        n -= 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    emp = []\n    count = 0\n    for i in range(n):\n        emp.append(list(map(int, input().split())))\n    while n > 1:\n        if emp[0][n - 1] != n:\n            count += 1\n            for i in range(n):\n                for k in range(i + 1, n):\n                    (emp[i][k], emp[k][i]) = (emp[k][i], emp[i][k])\n        n -= 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    emp = []\n    count = 0\n    for i in range(n):\n        emp.append(list(map(int, input().split())))\n    while n > 1:\n        if emp[0][n - 1] != n:\n            count += 1\n            for i in range(n):\n                for k in range(i + 1, n):\n                    (emp[i][k], emp[k][i]) = (emp[k][i], emp[i][k])\n        n -= 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    emp = []\n    count = 0\n    for i in range(n):\n        emp.append(list(map(int, input().split())))\n    while n > 1:\n        if emp[0][n - 1] != n:\n            count += 1\n            for i in range(n):\n                for k in range(i + 1, n):\n                    (emp[i][k], emp[k][i]) = (emp[k][i], emp[i][k])\n        n -= 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    emp = []\n    count = 0\n    for i in range(n):\n        emp.append(list(map(int, input().split())))\n    while n > 1:\n        if emp[0][n - 1] != n:\n            count += 1\n            for i in range(n):\n                for k in range(i + 1, n):\n                    (emp[i][k], emp[k][i]) = (emp[k][i], emp[i][k])\n        n -= 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input().split())))\n    tranposeCount = 0\n    for i in range(n - 1, -1, -1):\n        if matrix[0][i] != i + 1:\n            tranposeCount += 1\n            for j in range(n):\n                (matrix[0][j], matrix[j][0]) = (matrix[j][0], matrix[0][j])\n    print(tranposeCount)", "for _ in range(int(input())):\n    n = int(input())\n    emp = []\n    count = 0\n    for i in range(n):\n        emp.append(list(map(int, input().split())))\n    while n > 1:\n        if emp[0][n - 1] != n:\n            count += 1\n            for i in range(n):\n                for k in range(i + 1, n):\n                    (emp[i][k], emp[k][i]) = (emp[k][i], emp[i][k])\n        n -= 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    emp = []\n    count = 0\n    for i in range(n):\n        emp.append(list(map(int, input().split())))\n    while n > 1:\n        if emp[0][n - 1] != n:\n            count += 1\n            for i in range(n):\n                for k in range(1, n):\n                    (emp[i][k], emp[k][i]) = (emp[k][i], emp[i][k])\n        n -= 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    ans = 0\n    while n > 1:\n        if l[0][n - 1] != n:\n            ans += 1\n            for i in range(1, n):\n                (l[0][i], l[i][0]) = (l[i][0], l[0][i])\n        n -= 1\n    print(ans)", "t = int(input())\nwhile t > 0:\n    m = []\n    ms = int(input())\n    for i in range(ms):\n        mrow = list(map(int, input().split()))\n        m.append(mrow)\n    step = 0\n    for i in range(ms - 1, 0, -1):\n        current = m[i][i - 1] + 1\n        if current == m[i][i]:\n            continue\n        else:\n            step += 1\n            for j in range(i + 1):\n                for k in range(j, i + 1):\n                    temp = m[j][k]\n                    m[j][k] = m[k][j]\n                    m[k][j] = temp\n    t -= 1\n    print(step)", "t = int(input())\nwhile t > 0:\n    m = []\n    ms = int(input())\n    for i in range(ms):\n        mrow = list(map(int, input().split()))\n        m.append(mrow)\n    step = 0\n    for i in range(ms - 1, 0, -1):\n        current = m[i][i - 1] + 1\n        if current == m[i][i]:\n            continue\n        else:\n            step += 1\n            for j in range(i + 1):\n                for k in range(j, i + 1):\n                    temp = m[j][k]\n                    m[j][k] = m[k][j]\n                    m[k][j] = temp\n    t -= 1\n    print(step)", "t = int(input())\nwhile t > 0:\n    m = []\n    ms = int(input())\n    for i in range(ms):\n        mrow = list(map(int, input().split()))\n        m.append(mrow)\n    step = 0\n    for i in range(ms - 1, 0, -1):\n        current = m[i][i - 1] + 1\n        if current == m[i][i]:\n            continue\n        else:\n            step += 1\n            for j in range(i + 1):\n                for k in range(j, i + 1):\n                    temp = m[j][k]\n                    m[j][k] = m[k][j]\n                    m[k][j] = temp\n    t -= 1\n    print(step)", "t = int(input())\nwhile t > 0:\n    m = []\n    ms = int(input())\n    for i in range(ms):\n        mrow = list(map(int, input().split()))\n        m.append(mrow)\n    step = 0\n    for i in range(ms - 1, 0, -1):\n        current = m[i][i - 1] + 1\n        if current == m[i][i]:\n            continue\n        else:\n            step += 1\n            for j in range(i + 1):\n                for k in range(j, i + 1):\n                    temp = m[j][k]\n                    m[j][k] = m[k][j]\n                    m[k][j] = temp\n    t -= 1\n    print(step)", "t = int(input())\nwhile t > 0:\n    m = []\n    ms = int(input())\n    for i in range(ms):\n        mrow = list(map(int, input().split()))\n        m.append(mrow)\n    step = 0\n    for i in range(ms - 1, 0, -1):\n        current = m[i][i - 1] + 1\n        if current == m[i][i]:\n            continue\n        else:\n            step += 1\n            for j in range(i + 1):\n                for k in range(j, i + 1):\n                    temp = m[j][k]\n                    m[j][k] = m[k][j]\n                    m[k][j] = temp\n    t -= 1\n    print(step)", "t = int(input())\nwhile t > 0:\n    m = []\n    ms = int(input())\n    for i in range(ms):\n        mrow = list(map(int, input().split()))\n        m.append(mrow)\n    step = 0\n    for i in range(ms - 1, 0, -1):\n        current = m[i][i - 1] + 1\n        if current == m[i][i]:\n            continue\n        else:\n            step += 1\n            for j in range(i + 1):\n                for k in range(j, i + 1):\n                    temp = m[j][k]\n                    m[j][k] = m[k][j]\n                    m[k][j] = temp\n    t -= 1\n    print(step)", "t = int(input())\nwhile t > 0:\n    m = []\n    ms = int(input())\n    for i in range(ms):\n        mrow = list(map(int, input().split()))\n        m.append(mrow)\n    step = 0\n    for i in range(ms - 1, 0, -1):\n        current = m[i][i - 1] + 1\n        if current == m[i][i]:\n            continue\n        else:\n            step += 1\n            for j in range(i + 1):\n                for k in range(j, i + 1):\n                    temp = m[j][k]\n                    m[j][k] = m[k][j]\n                    m[k][j] = temp\n    t -= 1\n    print(step)", "t = int(input())\nwhile t > 0:\n    m = []\n    ms = int(input())\n    for i in range(ms):\n        mrow = list(map(int, input().split()))\n        m.append(mrow)\n    step = 0\n    for i in range(ms - 1, 0, -1):\n        current = m[i][i - 1] + 1\n        if current == m[i][i]:\n            continue\n        else:\n            step += 1\n            for j in range(i + 1):\n                for k in range(j, i + 1):\n                    temp = m[j][k]\n                    m[j][k] = m[k][j]\n                    m[k][j] = temp\n    t -= 1\n    print(step)", "t = int(input())\nwhile t > 0:\n    m = []\n    ms = int(input())\n    for i in range(ms):\n        mrow = list(map(int, input().split()))\n        m.append(mrow)\n    step = 0\n    for i in range(ms - 1, 0, -1):\n        current = m[i][i - 1] + 1\n        if current == m[i][i]:\n            continue\n        else:\n            step += 1\n            for j in range(i + 1):\n                for k in range(j, i + 1):\n                    temp = m[j][k]\n                    m[j][k] = m[k][j]\n                    m[k][j] = temp\n    t -= 1\n    print(step)", "t = int(input())\nwhile t > 0:\n    m = []\n    ms = int(input())\n    for i in range(ms):\n        mrow = list(map(int, input().split()))\n        m.append(mrow)\n    step = 0\n    for i in range(ms - 1, 0, -1):\n        current = m[i][i - 1] + 1\n        if current == m[i][i]:\n            continue\n        else:\n            step += 1\n            for j in range(i + 1):\n                for k in range(j, i + 1):\n                    temp = m[j][k]\n                    m[j][k] = m[k][j]\n                    m[k][j] = temp\n    t -= 1\n    print(step)", "t = int(input())\nwhile t > 0:\n    m = []\n    ms = int(input())\n    for i in range(ms):\n        mrow = list(map(int, input().split()))\n        m.append(mrow)\n    step = 0\n    for i in range(ms - 1, 0, -1):\n        current = m[i][i - 1] + 1\n        if current == m[i][i]:\n            continue\n        else:\n            step += 1\n            for j in range(i + 1):\n                for k in range(j, i + 1):\n                    temp = m[j][k]\n                    m[j][k] = m[k][j]\n                    m[k][j] = temp\n    t -= 1\n    print(step)", "t = int(input())\nwhile t > 0:\n    m = []\n    ms = int(input())\n    for i in range(ms):\n        mrow = list(map(int, input().split()))\n        m.append(mrow)\n    step = 0\n    for i in range(ms - 1, 0, -1):\n        current = m[i][i - 1] + 1\n        if current == m[i][i]:\n            continue\n        else:\n            step += 1\n            for j in range(i + 1):\n                for k in range(j, i + 1):\n                    temp = m[j][k]\n                    m[j][k] = m[k][j]\n                    m[k][j] = temp\n    t -= 1\n    print(step)", "t = int(input())\nwhile t > 0:\n    m = []\n    ms = int(input())\n    for i in range(ms):\n        mrow = list(map(int, input().split()))\n        m.append(mrow)\n    step = 0\n    for i in range(ms - 1, 0, -1):\n        current = m[i][i - 1] + 1\n        if current == m[i][i]:\n            continue\n        else:\n            step += 1\n            for j in range(i + 1):\n                for k in range(j, i + 1):\n                    temp = m[j][k]\n                    m[j][k] = m[k][j]\n                    m[k][j] = temp\n    t -= 1\n    print(step)", "t = int(input())\nwhile t > 0:\n    m = []\n    ms = int(input())\n    for i in range(ms):\n        mrow = list(map(int, input().split()))\n        m.append(mrow)\n    step = 0\n    for i in range(ms - 1, 0, -1):\n        current = m[i][i - 1] + 1\n        if current == m[i][i]:\n            continue\n        else:\n            step += 1\n            for j in range(i + 1):\n                for k in range(j, i + 1):\n                    temp = m[j][k]\n                    m[j][k] = m[k][j]\n                    m[k][j] = temp\n    t -= 1\n    print(step)", "def boolArr(arr, n):\n    barr = [True if arr[0][i] == i + 1 else False for i in range(n)]\n    return barr\n\ndef transpose(arr, n):\n    for i in range(n):\n        for j in range(n):\n            if j > i:\n                (arr[i][j], arr[j][i]) = (arr[j][i], arr[i][j])\n    return arr\nfor _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, input().split())))\n    barr = boolArr(arr, n)\n    count = 0\n    for i in range(n - 1, -1, -1):\n        if not barr[i]:\n            arr = transpose(arr, i + 1)\n            barr = boolArr(arr, n)\n            count += 1\n    print(count)", "def transpose(arr, n):\n    for i in range(n):\n        for j in range(n):\n            if j > i:\n                (arr[i][j], arr[j][i]) = (arr[j][i], arr[i][j])\n    return arr\n\ndef update(arr, n):\n    row = [True if arr[0][i] == i + 1 else False for i in range(n)]\n    return row\nfor _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, input().split())))\n    row = update(arr, n)\n    moves = 0\n    for i in range(n - 1, -1, -1):\n        if not row[i]:\n            arr = transpose(arr, i + 1)\n            row = update(arr, n)\n            moves += 1\n    print(moves)", "def transpose(arr, n):\n    for i in range(n):\n        for j in range(n):\n            if j > i:\n                (arr[i][j], arr[j][i]) = (arr[j][i], arr[i][j])\n    return arr\n\ndef update(arr, n):\n    row = [True if arr[0][i] == i + 1 else False for i in range(n)]\n    return row\nfor _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, input().split())))\n    row = update(arr, n)\n    moves = 0\n    for i in range(n - 1, -1, -1):\n        if not row[i]:\n            arr = transpose(arr, i + 1)\n            row = update(arr, n)\n            moves += 1\n    print(moves)", "for _ in range(int(input())):\n    n = int(input())\n    m = []\n    for i in range(n):\n        j = [int(j) for j in input().split()]\n        m.append(j)\n    bool1 = []\n    o = 1\n    for k in m[0]:\n        if k == o:\n            bool1.append(True)\n        else:\n            bool1.append(False)\n        o += 1\n    count = 0\n    for k in range(-1, -(len(bool1) + 1), -1):\n        if bool1[k] == False:\n            for l in range(k, -len(bool1), -1):\n                if bool1[l] == False:\n                    bool1[l] = True\n                else:\n                    bool1[l] = False\n            count += 1\n        else:\n            pass\n    print(count)", "t = int(input())\nwhile t > 0:\n    m = []\n    ms = int(input())\n    for i in range(ms):\n        mrow = list(map(int, input().split()))\n        m.append(mrow)\n    step = 0\n    for i in range(ms - 1, 0, -1):\n        current = m[i][i - 1] + 1\n        if current == m[i][i]:\n            continue\n        else:\n            step += 1\n            for j in range(i + 1):\n                for k in range(j, i + 1):\n                    temp = m[j][k]\n                    m[j][k] = m[k][j]\n                    m[k][j] = temp\n    t -= 1\n    print(step)", "t = int(input())\nwhile t > 0:\n    m = []\n    ms = int(input())\n    for i in range(ms):\n        mrow = list(map(int, input().split()))\n        m.append(mrow)\n    step = 0\n    for i in range(ms - 1, 0, -1):\n        current = m[i][i - 1] + 1\n        if current == m[i][i]:\n            continue\n        else:\n            step += 1\n            for j in range(i + 1):\n                for k in range(j, i + 1):\n                    temp = m[j][k]\n                    m[j][k] = m[k][j]\n                    m[k][j] = temp\n    t -= 1\n    print(step)", "try:\n    t = int(input())\n    while t > 0:\n        m = []\n        ms = int(input())\n        for i in range(ms):\n            mrow = list(map(int, input().split()))\n            m.append(mrow)\n        step = 0\n        for i in range(ms - 1, 0, -1):\n            current = m[i][i - 1] + 1\n            if current == m[i][i]:\n                continue\n            else:\n                step = step + 1\n                for j in range(i + 1):\n                    for k in range(j, i + 1):\n                        temp = m[j][k]\n                        m[j][k] = m[k][j]\n                        m[k][j] = temp\n        t = t - 1\n        print(step)\nexcept EOFError as e:\n    print(e)", "t = int(input())\nwhile t > 0:\n    mm = []\n    mms = int(input())\n    for i in range(mms):\n        mrow = list(map(int, input().split()))\n        mm.append(mrow)\n    c = 0\n    for i in range(mms - 1, 0, -1):\n        current = mm[i][i - 1] + 1\n        if current == mm[i][i]:\n            continue\n        else:\n            c = c + 1\n            for j in range(i + 1):\n                for k in range(j, i + 1):\n                    my_temp = mm[j][k]\n                    mm[j][k] = mm[k][j]\n                    mm[k][j] = my_temp\n    t = t - 1\n    print(c)", "t = int(input())\nfor ii in range(t):\n    n = int(input())\n    L = []\n    for x in range(n):\n        l = list(map(int, input().split()))\n        L.append(l)\n    c = 0\n    i = 0\n    direct = 0 if L[0][1] == 2 else 1\n    while i < n - 1:\n        i += 1\n        if direct == 0 and L[0][i] == i + 1 or (direct == 1 and L[i][0] == i + 1):\n            continue\n        direct = 0 if direct else 1\n        c += 1\n    if direct:\n        c += 1\n    print(c)", "try:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        grid = []\n        for _ in range(n):\n            grid.append(list(map(int, input().split())))\n        ans = 0\n        for i in range(n - 1, -1, -1):\n            if grid[0][i] != i + 1:\n                for j in range(0, i):\n                    (grid[j][0], grid[0][j]) = (grid[0][j], grid[j][0])\n                ans += 1\n        print(ans)\nexcept:\n    pass", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split()))) if i == 0 else input()\n    ans = 0\n    flag = 0\n    for i in range(n - 1, 0, -1):\n        if flag == 0 and a[0][i] != i + 1:\n            ans += 1\n            flag = 1\n        elif flag == 1 and a[0][i] == i + 1:\n            ans += 1\n            flag = 0\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    ans = 0\n    flag = 0\n    for i in range(n - 1, 0, -1):\n        if flag == 0 and a[0][i] != i + 1:\n            ans += 1\n            flag = 1\n        elif flag == 1 and a[0][i] == i + 1:\n            ans += 1\n            flag = 0\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = [list(map(int, input().split())) for _ in range(n)]\n    b = [False] * n\n    for i in range(n):\n        if l[0][i] == i + 1:\n            b[i] = True\n    count = 0\n    for i in range(n - 1, 0, -1):\n        if b[i] == True:\n            continue\n        else:\n            count += 1\n            for j in range(i, 0, -1):\n                b[j] = False if b[j] else True\n    print(count)", "def transpose(arr, n):\n    for i in range(n):\n        for j in range(n):\n            if j > i:\n                (arr[i][j], arr[j][i]) = (arr[j][i], arr[i][j])\n    return arr\n\ndef update(arr, n):\n    row = [True if arr[0][i] == i + 1 else False for i in range(n)]\n    return row\nfor _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, input().split())))\n    row = update(arr, n)\n    moves = 0\n    for i in range(n - 1, -1, -1):\n        if not row[i]:\n            arr = transpose(arr, i + 1)\n            row = update(arr, n)\n            moves += 1\n    print(moves)", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    l = 0\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    for i in range(n - 1, 0, -1):\n        r = a[i][i - 1] + 1\n        if a[i][i] != r:\n            l += 1\n            n = i + 1\n            for j in range(n):\n                for k in range(j, n):\n                    (a[j][k], a[k][j]) = (a[k][j], a[j][k])\n    print(l)", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    l = 0\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    for i in range(n - 1, 0, -1):\n        r = a[i][i - 1] + 1\n        if a[i][i] != r:\n            l += 1\n            n = i + 1\n            for j in range(n):\n                for k in range(j, n):\n                    (a[j][k], a[k][j]) = (a[k][j], a[j][k])\n    print(l)", "for i in range(int(input())):\n    n = int(input())\n    mat = []\n    for i in range(n):\n        mat.append([int(j) for j in input().split()])\n    ans = 0\n    t = True\n    for i in range(n - 1, 0, -1):\n        if t:\n            if mat[0][i] != i + 1:\n                t = False\n                ans += 1\n        elif mat[0][i] == i + 1:\n            t = True\n            ans += 1\n    print(ans)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    aa = int(input())\n    count = 0\n    blist = []\n    for i in range(aa):\n        blist.append([int(x) for x in input().split()])\n    for d in range(aa - 1, 0, -1):\n        result = blist[d][d - 1] + 1\n        if result != blist[d][d]:\n            count += 1\n            next = d + 1\n            for i in range(next):\n                for j in range(i, next):\n                    temp = blist[i][j]\n                    blist[i][j] = blist[j][i]\n                    blist[j][i] = temp\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    mat = [list(map(int, input().strip().split())) for i in range(n)]\n    ans = 0\n    equal = True\n    for i in range(n - 1, 0, -1):\n        if equal and mat[0][i] != i + 1:\n            ans += 1\n            equal = False\n        elif not equal and mat[0][i] == i + 1:\n            ans += 1\n            equal = True\n    print(ans)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    pp = int(input())\n    count = 0\n    blist = []\n    for i in range(pp):\n        blist.append([int(x) for x in input().split()])\n    for d in range(pp - 1, 0, -1):\n        done = blist[d][d - 1] + 1\n        if done != blist[d][d]:\n            count += 1\n            don = d + 1\n            for i in range(don):\n                for j in range(i, don):\n                    trav = blist[i][j]\n                    blist[i][j] = blist[j][i]\n                    blist[j][i] = trav\n    print(count)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    mat = []\n    for i in range(n):\n        l = [int(x) for x in input().split()]\n        mat.append(l)\n    c = 0\n    for i in range(n - 1, -1, -1):\n        if mat[0][i] != i + 1:\n            c += 1\n            for j in range(i + 1):\n                (mat[0][j], mat[j][0]) = (mat[j][0], mat[0][j])\n    print(c)\n    t -= 1"]