["from itertools import repeat\n\ndef f(x):\n    osum = 0\n    esum = 0\n    while x > 0:\n        d = x % 10\n        if d % 2 == 0:\n            esum += d\n        else:\n            osum += d\n        x = x // 10\n    return abs(osum - esum)\ndiamonds = list(repeat(0, 1000001))\nprefix = list(repeat(0, 2000001))\nfor i in range(1, len(prefix)):\n    prefix[i] = prefix[i - 1] + f(i)\nfor i in range(1, len(diamonds)):\n    diamonds[i] = diamonds[i - 1] + 2 * (prefix[2 * i - 1] - prefix[i]) + f(2 * i)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(diamonds[n])", "def check(n):\n    sum1 = 0\n    sum2 = 0\n    while n > 0:\n        a = n % 10\n        if a % 2 == 0 or a == 0:\n            sum1 += a\n        else:\n            sum2 += a\n        n = n // 10\n    return abs(sum1 - sum2)\ndp = [0] * 1000001\nsummation = [0] * 2000002\nfor i in range(1, 2000002):\n    summation[i] = summation[i - 1] + check(i)\nfor i in range(1, 1000001):\n    dp[i] = dp[i - 1] + 2 * (summation[2 * i - 1] - summation[i]) + check(2 * i)\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    print(dp[n])\n    t = t - 1", "def check(n):\n    sum1 = 0\n    sum2 = 0\n    while n > 0:\n        a = n % 10\n        if a % 2 == 0 or a == 0:\n            sum1 += a\n        else:\n            sum2 += a\n        n = n // 10\n    return abs(sum1 - sum2)\ndp = [0] * 1000001\nsummation = [0] * 2000002\nfor i in range(1, 2000002):\n    summation[i] = summation[i - 1] + check(i)\nfor i in range(1, 1000001):\n    dp[i] = dp[i - 1] + 2 * (summation[2 * i - 1] - summation[i]) + check(2 * i)\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    print(dp[n])\n    t = t - 1", "N = 10 ** 6 + 5\ndp = [0] * N\n\ndef getValue(K):\n    (even, odd) = (0, 0)\n    while K > 0:\n        d = K % 10\n        if d & 1 == 1:\n            odd += d\n        else:\n            even += d\n        K = K // 10\n    return abs(even - odd)\n\ndef solve():\n    value = [0] * (2 * N)\n    for i in range(0, 2 * N):\n        value[i] = getValue(i)\n    prefix = value[:]\n    for i in range(1, 2 * N):\n        prefix[i] += prefix[i - 1]\n    for i in range(0, N - 1):\n        dp[i] = dp[i - 1] + 2 * (prefix[2 * i] - prefix[i]) - value[2 * i]\nsolve()\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(dp[n])", "N = 10 ** 6 + 5\ndp = [0] * N\n\ndef getValue(K):\n    (even, odd) = (0, 0)\n    while K > 0:\n        d = K % 10\n        if d & 1 == 1:\n            odd += d\n        else:\n            even += d\n        K = K // 10\n    return abs(even - odd)\n\ndef solve():\n    value = [0] * (2 * N)\n    for i in range(0, 2 * N):\n        value[i] = getValue(i)\n    prefix = value[:]\n    for i in range(1, 2 * N):\n        prefix[i] += prefix[i - 1]\n    for i in range(0, N - 1):\n        dp[i] = dp[i - 1] + 2 * (prefix[2 * i] - prefix[i]) - value[2 * i]\nsolve()\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(dp[n])", "N = 10 ** 6 + 5\ndp = [0] * N\n\ndef getValue(K):\n    (even, odd) = (0, 0)\n    while K > 0:\n        d = K % 10\n        if d & 1 == 1:\n            odd += d\n        else:\n            even += d\n        K = K // 10\n    return abs(even - odd)\n\ndef solve():\n    value = [0] * (2 * N)\n    for i in range(0, 2 * N):\n        value[i] = getValue(i)\n    prefix = value[:]\n    for i in range(1, 2 * N):\n        prefix[i] += prefix[i - 1]\n    for i in range(0, N - 1):\n        dp[i] = dp[i - 1] + 2 * (prefix[2 * i] - prefix[i]) - value[2 * i]\nsolve()\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(dp[n])", "def ret_res(ele):\n    tot = 0\n    while ele > 0:\n        if ele & 1 == 1:\n            tot -= ele % 10\n        else:\n            tot += ele % 10\n        ele = ele // 10\n    return abs(tot)\nfun = [0 for _ in range(2 * 10 ** 6 + 1)]\nfor i in range(2, 2 * 10 ** 6 + 1):\n    fun[i] = ret_res(i) + fun[i - 1]\ndp = [0 for _ in range(10 ** 6 + 1)]\ndp[1] = 2\nfor i in range(2, 10 ** 6 + 1):\n    dp[i] = fun[2 * i] - 2 * fun[i] + fun[2 * i - 1] + dp[i - 1]\nfor i in range(int(input())):\n    n = int(input())\n    print(dp[n])", "N = 10 ** 6 + 5\ndp = [0] * N\n\ndef getValue(K):\n    (even, odd) = (0, 0)\n    while K > 0:\n        d = K % 10\n        if d & 1 == 1:\n            odd += d\n        else:\n            even += d\n        K = K // 10\n    return abs(even - odd)\n\ndef solve():\n    value = [0] * (2 * N)\n    for i in range(0, 2 * N):\n        value[i] = getValue(i)\n    prefix = value[:]\n    for i in range(1, 2 * N):\n        prefix[i] += prefix[i - 1]\n    for i in range(0, N - 1):\n        dp[i] = dp[i - 1] + 2 * (prefix[2 * i] - prefix[i]) - value[2 * i]\nsolve()\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(dp[n])", "def zero(a, odd=0, even=0):\n    while a:\n        ans = a % 10\n        if ans % 2 == 0:\n            even += ans\n        else:\n            odd += ans\n        a //= 10\n    return abs(odd - even)\nlength = [0, 2]\nfor y in range(2, 2000001):\n    length.append(length[y - 1] + zero(y + 1))\nfinal = [0, 2]\nfor y in range(2, 1000001):\n    final.append(final[y - 1] + 2 * length[2 * y - 2] - 2 * length[y - 1] + zero(2 * y))\nfor _ in range(int(input())):\n    n = int(input())\n    print(final[n])", "def zero(a, odd=0, even=0):\n    while a:\n        ans = a % 10\n        if ans % 2 == 0:\n            even += ans\n        else:\n            odd += ans\n        a //= 10\n    return abs(odd - even)\nlength = [0, 2]\nfor y in range(2, 2000001):\n    length.append(length[y - 1] + zero(y + 1))\nfinal = [0, 2]\nfor y in range(2, 1000001):\n    final.append(final[y - 1] + 2 * length[2 * y - 2] - 2 * length[y - 1] + zero(2 * y))\nfor _ in range(int(input())):\n    n = int(input())\n    print(final[n])", "def zero(a, odd=0, even=0):\n    while a:\n        ans = a % 10\n        if ans % 2 == 0:\n            even += ans\n        else:\n            odd += ans\n        a //= 10\n    return abs(odd - even)\nlength = [0, 2]\nfor y in range(2, 2000001):\n    length.append(length[y - 1] + zero(y + 1))\nfinal = [0, 2]\nfor y in range(2, 1000001):\n    final.append(final[y - 1] + 2 * length[2 * y - 2] - 2 * length[y - 1] + zero(2 * y))\nfor _ in range(int(input())):\n    n = int(input())\n    print(final[n])", "N = 10 ** 6 + 5\ndp = [0] * N\n\ndef getValue(K):\n    (even, odd) = (0, 0)\n    while K > 0:\n        d = K % 10\n        if d & 1 == 1:\n            odd += d\n        else:\n            even += d\n        K = K // 10\n    return abs(even - odd)\n\ndef solve():\n    value = [0] * (2 * N)\n    for i in range(0, 2 * N):\n        value[i] = getValue(i)\n    prefix = value[:]\n    for i in range(1, 2 * N):\n        prefix[i] += prefix[i - 1]\n    for i in range(0, N - 1):\n        dp[i] = dp[i - 1] + 2 * (prefix[2 * i] - prefix[i]) - value[2 * i]\nsolve()\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(dp[n])", "def digits(t):\n    odd = 0\n    even = 0\n    while t:\n        ans = t % 10\n        if ans % 2 == 0:\n            even += ans\n        else:\n            odd += ans\n        t //= 10\n    return abs(even - odd)\nmaxi = 1000000\nnumbers = [0 for _ in range(maxi * 2 + 1)]\nnumbers[1] = 2\nfor i in range(2, 2 * maxi + 1):\n    numbers[i] = numbers[i - 1] + digits(i + 1)\narea = [0 for _ in range(maxi + 1)]\narea[1] = 2\nfor i in range(2, maxi + 1):\n    area[i] = area[i - 1] + 2 * numbers[2 * i - 2] - 2 * numbers[i - 1] + digits(2 * i)\nfor _ in range(int(input())):\n    n = int(input())\n    print(area[n])", "def zero(a, odd=0, even=0):\n    while a:\n        ans = a % 10\n        if ans % 2 == 0:\n            even += ans\n        else:\n            odd += ans\n        a //= 10\n    return abs(odd - even)\nlength = [0, 2]\nfor y in range(2, 2000001):\n    length.append(length[y - 1] + zero(y + 1))\nfinal = [0, 2]\nfor y in range(2, 1000001):\n    final.append(final[y - 1] + 2 * length[2 * y - 2] - 2 * length[y - 1] + zero(2 * y))\nfor _ in range(int(input())):\n    n = int(input())\n    print(final[n])", "def zero(a, odd=0, even=0):\n    while a:\n        ans = a % 10\n        if ans % 2 == 0:\n            even += ans\n        else:\n            odd += ans\n        a //= 10\n    return abs(odd - even)\nlength = [0, 2]\nfor y in range(2, 2000001):\n    length.append(length[y - 1] + zero(y + 1))\nfinal = [0, 2]\nfor y in range(2, 1000001):\n    final.append(final[y - 1] + 2 * length[2 * y - 2] - 2 * length[y - 1] + zero(2 * y))\nfor _ in range(int(input())):\n    n = int(input())\n    print(final[n])", "def digits(t):\n    odd = 0\n    even = 0\n    while t:\n        ans = t % 10\n        if ans % 2 == 0:\n            even += ans\n        else:\n            odd += ans\n        t //= 10\n    return abs(even - odd)\nmaxi = 1000000\nnumbers = [0 for _ in range(maxi * 2 + 1)]\nnumbers[1] = 2\nfor i in range(2, 2 * maxi + 1):\n    numbers[i] = numbers[i - 1] + digits(i + 1)\narea = [0 for _ in range(maxi + 1)]\narea[1] = 2\nfor i in range(2, maxi + 1):\n    area[i] = area[i - 1] + 2 * numbers[2 * i - 2] - 2 * numbers[i - 1] + digits(2 * i)\nfor _ in range(int(input())):\n    n = int(input())\n    print(area[n])", "def fun(n):\n    s1 = 0\n    s2 = 0\n    while n > 0:\n        if n % 2 == 0:\n            s1 += n % 10\n        else:\n            s2 += n % 10\n        n = n // 10\n    return abs(s1 - s2)\ndp = [0]\nk = 1000000\nx = [0]\ndp1 = [0]\nfor i in range(2, k * 2 + 1):\n    dp.append(fun(i))\n    dp1.append(dp1[len(dp1) - 1] + dp[len(dp) - 1])\nan = [0, 2, 12]\nfor i in range(3, k + 1):\n    an.append(an[len(an) - 1] + (dp1[(i - 1) * 2 - 1] - dp1[i - 1]) * 2 + dp[i * 2 - 1] + dp[i * 2 - 2] * 2)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    print(an[n])", "def f(n):\n    even = odd = 0\n    while n > 0:\n        d = n % 10\n        n = n // 10\n        if d % 2 == 0:\n            even += d\n        else:\n            odd += d\n    return abs(even - odd)\nn = 1000000\ndp = [0] * (n + 1)\nrooms = [0] * (2 * n + 1)\nfor i in range(1, len(rooms)):\n    rooms[i] = rooms[i - 1] + f(i)\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1] + (rooms[2 * i - 1] - rooms[i]) * 2 + f(2 * i)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(dp[n])", "def f(n):\n    even = odd = 0\n    while n > 0:\n        d = n % 10\n        n = n // 10\n        if d % 2 == 0:\n            even += d\n        else:\n            odd += d\n    return abs(even - odd)\nn = 1000000\ndp = [0] * (n + 1)\nrooms = [0] * (2 * n + 1)\nfor i in range(1, len(rooms)):\n    rooms[i] = rooms[i - 1] + f(i)\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1] + (rooms[2 * i - 1] - rooms[i]) * 2 + f(2 * i)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(dp[n])", "def check(n):\n    sum1 = 0\n    sum2 = 0\n    while n > 0:\n        a = n % 10\n        if a % 2 == 0 or a == 0:\n            sum1 += a\n        else:\n            sum2 += a\n        n = n // 10\n    return abs(sum1 - sum2)\ndp = [0] * 1000001\nsummation = [0] * 2000002\nfor i in range(1, 2000002):\n    summation[i] = summation[i - 1] + check(i)\nfor i in range(1, 1000001):\n    dp[i] = dp[i - 1] + 2 * (summation[2 * i - 1] - summation[i]) + check(2 * i)\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    print(dp[n])\n    t = t - 1", "def check(n):\n    sum1 = 0\n    sum2 = 0\n    while n > 0:\n        a = n % 10\n        if a % 2 == 0 or a == 0:\n            sum1 += a\n        else:\n            sum2 += a\n        n = n // 10\n    return abs(sum1 - sum2)\ndp = [0] * 1000001\nsummation = [0] * 2000002\nfor i in range(1, 2000002):\n    summation[i] = summation[i - 1] + check(i)\nfor i in range(1, 1000001):\n    dp[i] = dp[i - 1] + 2 * (summation[2 * i - 1] - summation[i]) + check(2 * i)\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    print(dp[n])\n    t = t - 1", "def check(n):\n    sum1 = 0\n    sum2 = 0\n    while n > 0:\n        a = n % 10\n        if a % 2 == 0 or a == 0:\n            sum1 += a\n        else:\n            sum2 += a\n        n = n // 10\n    return abs(sum1 - sum2)\ndp = [0] * 1000001\nsummation = [0] * 2000002\nfor i in range(1, 2000002):\n    summation[i] = summation[i - 1] + check(i)\nfor i in range(1, 1000001):\n    dp[i] = dp[i - 1] + 2 * (summation[2 * i - 1] - summation[i]) + check(2 * i)\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    print(dp[n])\n    t = t - 1", "(prefix, diamonds) = ([0 for _ in range(2000002)], [0 for _ in range(1000001)])\n\ndef fun(num):\n    (es, os) = (0, 0)\n    while num:\n        if not num % 10 % 2:\n            es += num % 10\n        else:\n            os += num % 10\n        num //= 10\n    return abs(es - os)\nfor i in range(1, 2000002):\n    prefix[i] = prefix[i - 1] + fun(i)\nfor i in range(1, 1000001):\n    diamonds[i] = diamonds[i - 1] + 2 * (prefix[2 * i] - prefix[i]) - fun(2 * i)\nn = int(input())\nfor _ in range(n):\n    t = int(input())\n    print(diamonds[t])", "(prefix, diamonds) = ([0 for _ in range(2000002)], [0 for _ in range(1000001)])\n\ndef fun(num):\n    (es, os) = (0, 0)\n    while num:\n        if not num % 10 % 2:\n            es += num % 10\n        else:\n            os += num % 10\n        num //= 10\n    return abs(es - os)\nfor i in range(1, 2000002):\n    prefix[i] = prefix[i - 1] + fun(i)\nfor i in range(1, 1000001):\n    diamonds[i] = diamonds[i - 1] + 2 * (prefix[2 * i] - prefix[i]) - fun(2 * i)\nfor _ in range(int(input())):\n    print(diamonds[int(input())])", "def f(number):\n    odd_sum = 0\n    even_sum = 0\n    while number > 0:\n        digit = number % 10\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n        number = number // 10\n    return abs(even_sum - odd_sum)\nrow = [1]\nfor i in range(2, 2000001):\n    row.append(row[-1] + f(i))\ndiamonds = [2]\nfor i in range(1, 1000000):\n    diamonds.append(diamonds[i - 1] + 2 * (row[2 * i] - row[i]) + f(2 * i + 2))\nfor i in range(int(input())):\n    print(diamonds[int(input()) - 1])", "def cal(n1):\n    o = e = 0\n    while n1 > 0:\n        k = n1 % 10\n        n1 //= 10\n        if k % 2 == 0:\n            e += k\n        else:\n            o += k\n    return abs(o - e)\nlast = [0 for _ in range(2000002)]\ndiamonds = [0 for _ in range(1000001)]\nfor i in range(1, 2000002):\n    last[i] = last[i - 1] + cal(i)\nfor i in range(1, 1000001):\n    diamonds[i] = diamonds[i - 1] + 2 * (last[2 * i] - last[i]) - cal(2 * i)\nfor t in range(int(input())):\n    n = int(input())\n    print(diamonds[n])", "prefix = [0 for _ in range(2000002)]\ndiamonds = [0 for _ in range(1000001)]\n\ndef fun(num):\n    (es, os) = (0, 0)\n    while num:\n        if not num % 10 % 2:\n            es += num % 10\n        else:\n            os += num % 10\n        num //= 10\n    return abs(es - os)\nfor i in range(1, 2000002):\n    prefix[i] = prefix[i - 1] + fun(i)\nfor i in range(1, 1000001):\n    diamonds[i] = diamonds[i - 1] + 2 * (prefix[2 * i] - prefix[i]) - fun(2 * i)\nfor _ in range(int(input())):\n    n = int(input())\n    print(diamonds[n])", "def digits(t):\n    odd = 0\n    even = 0\n    while t:\n        ans = t % 10\n        if ans % 2 == 0:\n            even += ans\n        else:\n            odd += ans\n        t //= 10\n    return abs(even - odd)\nmaxi = 1000000\nnumbers = [0 for _ in range(maxi * 2 + 1)]\nnumbers[1] = 2\nfor i in range(2, 2 * maxi + 1):\n    numbers[i] = numbers[i - 1] + digits(i + 1)\narea = [0 for _ in range(maxi + 1)]\narea[1] = 2\nfor i in range(2, maxi + 1):\n    area[i] = area[i - 1] + 2 * numbers[2 * i - 2] - 2 * numbers[i - 1] + digits(2 * i)\nfor _ in range(int(input())):\n    n = int(input())\n    print(area[n])", "import math\n\ndef f(n):\n    oddsum = evensum = 0\n    while n > 0:\n        k = n % 10\n        n //= 10\n        if k % 2 == 0:\n            evensum += k\n        else:\n            oddsum += k\n    return abs(oddsum - evensum)\nn = 1000000\nl = [0] * (n + 1)\nprefix = [0] * (2 * n + 1)\nfor i in range(1, len(prefix)):\n    prefix[i] = prefix[i - 1] + f(i)\nfor i in range(1, n + 1):\n    l[i] = l[i - 1] + (prefix[2 * i - 1] - prefix[i]) * 2 + f(2 * i)\nt = int(input())\nwhile t:\n    t -= 1\n    k = int(input())\n    print(l[k])", "N = 1000003\ng = [0, 1]\nfor i in range(2, 2 * N + 10):\n    s = 0\n    while i > 0:\n        r = i % 10\n        if r % 2 == 0:\n            s += r\n        else:\n            s -= r\n        i = i // 10\n    s = abs(s)\n    g.append(s)\nS = [4, 14]\nfor i in range(1, N):\n    s_i = S[i] - 2 * g[i + 2] + 2 * g[2 * i + 3] + 2 * g[2 * i + 4]\n    S.append(s_i)\nf = [0, 2]\nfor i in range(1, N):\n    f_n = f[i] + S[i] - g[2 * i + 2]\n    f.append(f_n)\nfor _ in range(int(input())):\n    print(f[int(input())])", "def fn(n):\n    o = e = 0\n    while n:\n        if n % 10 % 2 == 0:\n            e += n % 10\n        else:\n            o += n % 10\n        n //= 10\n    return abs(o - e)\nd = [0]\nfor i in range(1, 2000002):\n    d.append(fn(i))\npref = [0]\nfor i in range(1, 2000002):\n    pref.append(pref[-1] + d[i])\nans = [2]\nfor i in range(2, 1000001):\n    ans.append(ans[-1] + 2 * (pref[2 * i - 1] - pref[i]) + d[2 * i])\nfor t in range(int(input())):\n    print(ans[int(input()) - 1])", "from itertools import repeat\n\ndef f(x):\n    osum = 0\n    esum = 0\n    while x > 0:\n        d = x % 10\n        if d % 2 == 0:\n            esum += d\n        else:\n            osum += d\n        x = x // 10\n    return abs(osum - esum)\ndiamonds = list(repeat(0, 1000001))\nprefix = list(repeat(0, 2000001))\nfor i in range(1, len(prefix)):\n    prefix[i] = prefix[i - 1] + f(i)\nfor i in range(1, len(diamonds)):\n    diamonds[i] = diamonds[i - 1] + 2 * (prefix[2 * i - 1] - prefix[i]) + f(2 * i)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(diamonds[n])", "M = 2000001\nN = 1000001\ndiamonds = [0] * N\na = [0] * M\nb = [0] * M\nfor i in range(M):\n    (o, e) = (0, 0)\n    x = i\n    while x:\n        z = x % 10\n        if not z % 2:\n            e += z\n        else:\n            o += z\n        x //= 10\n    a[i] = abs(o - e)\nfor i in range(2, M):\n    b[i] = b[i - 1] + a[i]\ndiamonds[1] = 2\nfor i in range(2, N):\n    diamonds[i] = diamonds[i - 1] + (b[i * 2] * 2 - b[i] * 2 - a[i * 2])\nfor i in range(int(input())):\n    m = int(input())\n    print(diamonds[m])", "mat = [0] * 1000001\npre = [0] * 2000001\n\ndef f(x):\n    oddsum = 0\n    evensum = 0\n    while x:\n        digit = x % 10\n        if digit % 2 == 0:\n            evensum += digit\n        else:\n            oddsum += digit\n        x = x // 10\n    return abs(oddsum - evensum)\nfor i in range(1, len(pre)):\n    pre[i] = pre[i - 1] + f(i)\nfor i in range(1, len(mat)):\n    mat[i] = mat[i - 1] + (pre[2 * i - 1] - pre[i]) * 2 + f(2 * i)\nfor _ in range(int(input())):\n    n = int(input())\n    print(mat[n])", "even = [0] * 2000009\nodd = [0] * 2000009\nAr = [0] * 2000009\nfor i in range(1, 10):\n    if i % 2 == 0:\n        even[i] = i\n    else:\n        odd[i] = i\n    Ar[i] = Ar[i - 1] + abs(even[i] - odd[i])\nfor i in range(10, 2000009):\n    even[i] = even[i % 10] + even[i // 10]\n    odd[i] = odd[i % 10] + odd[i // 10]\n    Ar[i] = Ar[i - 1] + abs(even[i] - odd[i])\nA = [0] * 1000003\nfor i in range(1, 1000003):\n    A[i] = A[i - 1] + Ar[i * 2] + Ar[2 * i - 1] - 2 * Ar[i]\nfor _ in range(int(input())):\n    print(A[int(input())])", "def fun(x):\n    esum = 0\n    osum = 0\n    while x != 0:\n        if x % 2 == 0:\n            esum += x % 10\n        else:\n            osum += x % 10\n        x = x // 10\n    return abs(osum - esum)\nAr = [0] * 2000009\nfor i in range(1, 2000009):\n    Ar[i] = Ar[i - 1] + fun(i)\nA = [0] * 1000003\nfor i in range(1, 1000003):\n    A[i] = A[i - 1] + Ar[i * 2] + Ar[2 * i - 1] - 2 * Ar[i]\nfor _ in range(int(input())):\n    print(A[int(input())])", "def num(n):\n    c1 = 0\n    c2 = 0\n    while n:\n        d = n % 10\n        if d % 2 == 0:\n            c1 += d\n        else:\n            c2 += d\n        n = n // 10\n    return abs(c1 - c2)\nl1 = [num(i) for i in range(2 * 10 ** 6 + 2)]\nsumarr = [0]\nfor i in range(1, 2 * 10 ** 6 + 1):\n    sumarr.append(sumarr[-1] + l1[i + 1])\nans = [0]\nfor i in range(1, 10 ** 6 + 1):\n    ans.append(ans[-1] + l1[2 * i] + 2 * (sumarr[2 * i - 2] - sumarr[i - 1]))\nfor i in range(int(input())):\n    n = int(input())\n    print(ans[n])", "import gc\ngc.disable()\n\ndef main():\n    from sys import stdin, stdout\n    import atexit, io, sys\n    buffer = io.StringIO()\n    sys.stdout = buffer\n\n    @atexit.register\n    def write():\n        sys.__stdout__.write(buffer.getvalue())\n    ans = [0] * 1000001\n    ans[1] = 2\n    llSum = 2\n    ress = [0] * 2 * 1000001\n    for y in range(10):\n        ress[y] = y if y % 2 else -y\n    for y in range(10, 2 * 1000001):\n        ress[y] = ress[y % 10] + ress[y // 10]\n    for x in range(2, 1000001):\n        llSum = llSum - abs(ress[x]) + abs(ress[x * 2 - 1]) + abs(ress[x * 2])\n        ans[x] = ans[x - 1] + llSum * 2 - abs(ress[x * 2])\n    t = int(stdin.readline())\n    stdout.write('\\n'.join((str(ans[int(n)]) for n in stdin.readlines())))\nmain()", "def diamonds(cell):\n    d = 0\n    while cell != 0:\n        if cell % 2 == 0:\n            d += cell % 10\n        else:\n            d -= cell % 10\n        cell = int(cell / 10)\n    if d < 0:\n        return -d\n    return d\nls = [0] * 2000010\nfor i in range(1, len(ls)):\n    ls[i] = ls[i - 1] + diamonds(i)\nd = [0] * (int(len(ls) / 2) - 2)\nfor i in range(1, len(d)):\n    d[i] = d[i - 1] + ls[i + i] + ls[i + i - 1] - 2 * ls[i]\nt = int(input())\nwhile t != 0:\n    t -= 1\n    n = int(input())\n    print(d[n])", "N = 1000000\n\ndef diam(i):\n    res = 0\n    x = i\n    while True:\n        y = x % 10\n        if y % 2 == 0:\n            res += y\n        else:\n            res -= y\n        x //= 10\n        if x == 0:\n            break\n    return abs(res)\ndia = list(map(diam, range(2 * N + 1)))\ndiamond = list(range(N + 1))\ndiamond[1] = (2, 0)\ndiamond[2] = (12, 10)\nfor i in range(3, N + 1):\n    x = diamond[i - 1][1] - 2 * dia[i] + dia[2 * i - 2] + 2 * dia[2 * i - 1] + dia[2 * i]\n    diamond[i] = (diamond[i - 1][0] + x, x)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(diamond[n][0])", "oddarr = [0] * 2000219\nevenarr = [0] * 2000219\ndiff = [0] * 2000219\nsudiff = [0] * 2000219\noddarr[0] = 0\nevenarr[0] = 1\nfor i in range(1, 10, 1):\n    oddnow = 0\n    evennow = 0\n    if i % 2 == 0:\n        evennow = i\n    else:\n        oddnow = i\n    oddarr[i] = oddnow\n    evenarr[i] = evennow\n    diff[i] = abs(oddarr[i] - evenarr[i])\nfor i in range(10, 2000219):\n    ele = i % 10\n    oddnow = oddarr[i // 10]\n    evennow = evenarr[i // 10]\n    if ele % 2 == 0:\n        evennow += ele\n    else:\n        oddnow += ele\n    oddarr[i] = oddnow\n    evenarr[i] = evennow\n    diff[i] = abs(oddarr[i] - evenarr[i])\nsudiff[0] = 0\nsudiff[1] = 2\nfor i in range(2, 2000219):\n    sudiff[i] = sudiff[i - 1] + diff[i]\nansarr = [0] * 2000219\nansarr[0] = 0\nansarr[1] = 2\nfor i in range(2, 1000109):\n    ansarr[i] = ansarr[i - 1] + 2 * (sudiff[2 * i] - sudiff[i]) - diff[2 * i]\nfor _ in range(int(input())):\n    n = int(input())\n    print(ansarr[n])", "oddarr = [0] * 2000219\nevenarr = [0] * 2000219\ndiff = [0] * 2000219\nsudiff = [0] * 2000219\noddarr[0] = 0\nevenarr[0] = 1\nfor i in range(1, 10, 1):\n    oddnow = 0\n    evennow = 0\n    if i % 2 == 0:\n        evennow = i\n    else:\n        oddnow = i\n    oddarr[i] = oddnow\n    evenarr[i] = evennow\n    diff[i] = abs(oddarr[i] - evenarr[i])\nfor i in range(10, 2000219):\n    ele = i % 10\n    oddnow = oddarr[i // 10]\n    evennow = evenarr[i // 10]\n    if ele % 2 == 0:\n        evennow += ele\n    else:\n        oddnow += ele\n    oddarr[i] = oddnow\n    evenarr[i] = evennow\n    diff[i] = abs(oddarr[i] - evenarr[i])\nsudiff[0] = 0\nsudiff[1] = 2\nfor i in range(2, 2000219):\n    sudiff[i] = sudiff[i - 1] + diff[i]\nansarr = [0] * 2000219\nansarr[0] = 0\nansarr[1] = 2\nfor i in range(2, 1000109):\n    ansarr[i] = ansarr[i - 1] + 2 * (sudiff[2 * i] - sudiff[i]) - diff[2 * i]\nfor _ in range(int(input())):\n    n = int(input())\n    print(ansarr[n])", "list1 = []\nfor _ in range(int(input())):\n    M = int(input())\n    list1.append(M)\nmentos = max(list1)\narray = [0, 0]\narray1 = [0, 0]\nfor i in range(2, 2 * mentos + 1):\n    answer = i\n    array4 = 0\n    array5 = 0\n    while answer:\n        values = answer % 10\n        answer = answer // 10\n        if values % 2 == 0:\n            array4 += values\n        else:\n            array5 += values\n    addition = int(abs(array4 - array5))\n    array.append(addition)\n    array1.append(array1[-1] + addition)\narray2 = [0, 2]\nfor i in range(2, mentos + 1):\n    array2.append((array1[2 * i - 1] - array1[i]) * 2 + array[2 * i] + array2[-1])\nfor M in list1:\n    print(array2[M])", "arr = []\nfor _ in range(int(input())):\n    N = int(input())\n    arr.append(N)\nmint = max(arr)\nhello = [0, 0]\nhello1 = [0, 0]\nfor i in range(2, 2 * mint + 1):\n    number = i\n    hello4 = 0\n    hello5 = 0\n    while number:\n        digit = number % 10\n        number = number // 10\n        if digit % 2 == 0:\n            hello4 += digit\n        else:\n            hello5 += digit\n    differ = int(abs(hello4 - hello5))\n    hello.append(differ)\n    hello1.append(hello1[-1] + differ)\nhello2 = [0, 2]\nfor i in range(2, mint + 1):\n    hello2.append((hello1[2 * i - 1] - hello1[i]) * 2 + hello[2 * i] + hello2[-1])\nfor N in arr:\n    print(hello2[N])", "M = 2000001\nN = 1000000\nd = [0] * M\na = [0] * M\nb = [0] * N\nfor i in range(1, M):\n    (n, e, o) = (i, 0, 0)\n    while n > 0:\n        m = n % 10\n        if m % 2:\n            o += m\n        else:\n            e += m\n        n //= 10\n    d[i] = abs(e - o)\nfor i in range(2, M):\n    a[i] = a[i - 1] + d[i]\nb[1] = 2\nfor i in range(2, N):\n    b[i] = b[i - 1] + a[i * 2] * 2 - a[i] * 2 - d[i * 2]\nt = int(input())\nfor i in range(t):\n    z = int(input())\n    print(b[z])", "import sys\nsys.setrecursionlimit = 2000001\n\ndef number_of_diamonds(room_number):\n    (even_sum, odd_sum) = (0, 0)\n    while room_number:\n        digit = room_number % 10\n        if digit % 2:\n            even_sum += digit\n        else:\n            odd_sum += digit\n        room_number //= 10\n    return abs(even_sum - odd_sum)\nassert number_of_diamonds(room_number=3316) == 1\nassert number_of_diamonds(room_number=0) == 0\nassert number_of_diamonds(room_number=10) == 1\nDIAMONDS = [number_of_diamonds(room_number=room_number) for room_number in range(2000001)]\nprefixSum = [0] * 2000001\nfor i in range(1, 2000001):\n    prefixSum[i] = prefixSum[i - 1] + DIAMONDS[i]\nassert prefixSum[4] == 10\ncache = {}\ncache[1] = 2\ncache[2] = 12\n\ndef total_diamonds(num):\n    if num in cache:\n        return cache[num]\n    else:\n        cache[num] = 2 * (prefixSum[2 * num - 1] - prefixSum[num]) + DIAMONDS[2 * num] + total_diamonds(num=num - 1)\n    return cache[num]\nfor i in range(1, 1000001):\n    total_diamonds(num=i)\nT = int(input().strip())\nfor _ in range(T):\n    N = int(input().strip())\n    print(total_diamonds(num=N))", "arr = []\narr.append(0)\nfor i in range(1, 2000001):\n    even = 0\n    odd = 0\n    j = i\n    while j > 0:\n        if j % 10 % 2 == 0:\n            even += j % 10\n        else:\n            odd += j % 10\n        j = j // 10\n    arr.append(abs(even - odd))\ndmd = []\ndmd.append(0)\ndmd.append(2)\ndmd.append(12)\ndmd.append(36)\nfor i in range(4, 1000001):\n    dmd.append(arr[2 * i] + 2 * arr[2 * i - 1] - dmd[i - 2] - 2 * arr[i] + 2 * dmd[i - 1] + arr[2 * (i - 1)])\nt = int(input())\nfor i in range(t):\n    print(dmd[int(input())])", "arr = []\nfor _ in range(int(input())):\n    N = int(input())\n    arr.append(N)\nmint = max(arr)\nhello = [0, 0]\nhello1 = [0, 0]\nfor i in range(2, 2 * mint + 1):\n    number = i\n    hello4 = 0\n    hello5 = 0\n    while number:\n        digit = number % 10\n        number = number // 10\n        if digit % 2 == 0:\n            hello4 += digit\n        else:\n            hello5 += digit\n    differ = int(abs(hello4 - hello5))\n    hello.append(differ)\n    hello1.append(hello1[-1] + differ)\nhello2 = [0, 2]\nfor i in range(2, mint + 1):\n    hello2.append((hello1[2 * i - 1] - hello1[i]) * 2 + hello[2 * i] + hello2[-1])\nfor N in arr:\n    print(hello2[N])", "from itertools import *\ndiamonds = [abs(sum((d if d % 2 == 0 else -d for d in map(int, str(n))))) for n in range(2 * 10 ** 6 + 1)]\ncumonds = list(accumulate(diamonds))\nsolve = [0, 2] + [0] * (2 * 10 ** 6)\nfor i in range(2, 10 ** 6 + 1):\n    solve[i] = solve[i - 1] + (cumonds[i * 2] - cumonds[i]) * 2 - diamonds[i * 2]\nfor _ in range(int(input())):\n    x = int(input())\n    print(solve[x])", "MAX_VAL = 10 ** 6 * 2 + 1\nD = [0] * MAX_VAL\nE = [0] * MAX_VAL\nfor i in range(1, MAX_VAL):\n    xx = 1 + i\n    t = [0, 0]\n    while xx != 0:\n        xxx = xx % 10\n        xx //= 10\n        t[xxx % 2] += xxx\n    D[i] = D[i - 1] + abs(t[0] - t[1])\nN = 10\nfor i in range(1, 10 ** 6 + 1):\n    E[i] = E[i - 1] + D[2 * i - 1] + D[2 * i - 2] - 2 * D[i - 1]\nT = int(input())\nfor t in range(T):\n    print(E[int(input())])", "ans = [0] * 2000005\nanr = [0] * 2000005\nA = [0] * 1000005\nfor i in range(10):\n    if i % 2 == 0:\n        ans[i] = ans[i] + i\n    else:\n        ans[i] = ans[i] - i\nanr[0] = 0\nfor i in range(10, 2000005):\n    n = i\n    d = n % 10\n    f = n // 10\n    if d % 2 == 0:\n        ans[n] = ans[f] + d\n    else:\n        ans[n] = ans[f] - d\nfor i in range(0, 2000005):\n    if ans[i] < 0:\n        ans[i] = ans[i] * -1\nfor i in range(1, 2000005):\n    anr[i] = anr[i - 1] + ans[i]\nA[0] = 0\nA[1] = ans[2]\nfor i in range(2, 1000002):\n    A[i] = A[i - 1]\n    A[i] = A[i] + 2 * (anr[2 * i - 1] - anr[i])\n    A[i] = A[i] + ans[2 * i]\nfor _ in range(int(input())):\n    n = int(input())\n    print(A[n])", "b = []\nfor i in range(0, 2 * 10 ** 6 + 1):\n    temp = i\n    ec = oc = 0\n    while temp != 0:\n        digit = temp % 10\n        if digit % 2:\n            oc += digit\n        else:\n            ec += digit\n        temp = temp // 10\n    b.append(abs(ec - oc))\ndiamonds = [0, 2]\ntemp = 0\nfor i in range(2, 10 ** 6 + 1):\n    temp += b[2 * i - 1] + b[2 * i - 2] - b[i]\n    diamonds.append(diamonds[i - 1] + 2 * temp + b[2 * i])\nfor z in range(int(input())):\n    n = int(input())\n    print(diamonds[n])", "t = int(input().strip())\n\ndef findDiamonds(num):\n    even = 0\n    odd = 0\n    while num > 0:\n        rem = num % 10\n        if rem % 2 == 0:\n            even += rem\n        else:\n            odd += rem\n        num //= 10\n    return abs(even - odd)\nprecomputed = [0 for i in range(10 ** 6 + 20)]\nprev_row = [0 for i in range(2 * 10 ** 6 + 20)]\nprev_row[0] = 2\nprev_row_count = 2\nfirst = 0\nlast = 0\nprecomputed[1] = 2\nfor i in range(2, 1000001):\n    prev_row_count -= prev_row[first]\n    first += 1\n    last += 1\n    prev_row[last] = findDiamonds(2 * i - 1)\n    last += 1\n    prev_row[last] = findDiamonds(2 * i)\n    prev_row_count += prev_row[last] + prev_row[last - 1]\n    precomputed[i] = precomputed[i - 1] + 2 * prev_row_count - prev_row[last]\nfor i in range(t):\n    n = int(input().strip())\n    print(precomputed[n])", "t = int(input().strip())\n\ndef findDiamonds(num):\n    even = 0\n    odd = 0\n    while num > 0:\n        rem = num % 10\n        if rem % 2 == 0:\n            even += rem\n        else:\n            odd += rem\n        num //= 10\n    return abs(even - odd)\nprecomputed = [0 for i in range(10 ** 6 + 20)]\nprev_row = [None] * (2 * 10 ** 6 + 20)\nprev_row[0] = 2\nprev_row_count = 2\nfirst = 0\nlast = 0\nprecomputed[1] = 2\nfor i in range(2, 1000001):\n    prev_row_count -= prev_row[first]\n    first += 1\n    last += 1\n    prev_row[last] = findDiamonds(2 * i - 1)\n    last += 1\n    prev_row[last] = findDiamonds(2 * i)\n    prev_row_count += prev_row[last] + prev_row[last - 1]\n    precomputed[i] = precomputed[i - 1] + 2 * prev_row_count - prev_row[last]\nfor i in range(t):\n    n = int(input().strip())\n    print(precomputed[n])", "t = int(input().strip())\n\ndef findDiamonds(num):\n    even = 0\n    odd = 0\n    while num > 0:\n        rem = num % 10\n        if rem % 2 == 0:\n            even += rem\n        else:\n            odd += rem\n        num //= 10\n    return abs(even - odd)\nprecomputed = [None] * (10 ** 6 + 20)\nprev_row = [None] * (2 * 10 ** 6 + 20)\nprev_row[0] = 2\nprev_row_count = 2\nfirst = 0\nlast = 0\nprecomputed[1] = 2\nfor i in range(2, 1000001):\n    prev_row_count -= prev_row[first]\n    first += 1\n    last += 1\n    prev_row[last] = findDiamonds(2 * i - 1)\n    last += 1\n    prev_row[last] = findDiamonds(2 * i)\n    prev_row_count += prev_row[last] + prev_row[last - 1]\n    precomputed[i] = precomputed[i - 1] + 2 * prev_row_count - prev_row[last]\nfor i in range(t):\n    n = int(input().strip())\n    print(precomputed[n])", "t = int(input().strip())\n\ndef findDiamonds(num):\n    even = 0\n    odd = 0\n    while num > 0:\n        rem = num % 10\n        if rem % 2 == 0:\n            even += rem\n        else:\n            odd += rem\n        num //= 10\n    return abs(even - odd)\nprecomputed = [None] * (10 ** 6 + 20)\nprev_row = [None] * (2 * 10 ** 6 + 20)\nprev_row[0] = 2\nprev_row_count = 2\nfirst = 0\nlast = 0\nprecomputed[1] = 2\nfor i in range(2, 1000001):\n    prev_row_count -= prev_row[first]\n    first += 1\n    last += 1\n    prev_row[last] = findDiamonds(2 * i - 1)\n    last += 1\n    prev_row[last] = findDiamonds(2 * i)\n    prev_row_count += prev_row[last] + prev_row[last - 1]\n    precomputed[i] = precomputed[i - 1] + 2 * prev_row_count - prev_row[last]\nfor i in range(t):\n    n = int(input().strip())\n    print(precomputed[n])", "def digDiff(n):\n    odd = 0\n    even = 0\n    while n > 0:\n        dig = n % 10\n        if dig & 1 == 0:\n            even += dig\n        else:\n            odd += dig\n        n = n // 10\n    return abs(even - odd)\ndia = [digDiff(i) for i in range(2 * 10 ** 6 + 1)]\ndp = [0] * (10 ** 6 + 1)\ndp[1] = 2\nres = dp[1]\nfor i in range(2, len(dp)):\n    res = res - dia[i] + dia[2 * i - 1] + dia[2 * i]\n    dp[i] = dp[i - 1] + 2 * res - dia[2 * i]\nfor _ in range(int(input())):\n    print(dp[int(input())])", "def s(k):\n    even = 0\n    odd = 0\n    if k == 0:\n        return 0\n    while k != 0:\n        if k % 10 % 2 == 0:\n            even = even + k % 10\n        elif k % 10 % 2 == 1:\n            odd = odd + k % 10\n        k = k // 10\n    return abs(odd - even)\na = [0] * (2 * 10 ** 6 + 1)\nfor i in range(2, 2 * 10 ** 6 + 1):\n    if i <= 9:\n        a[i] = i\n    else:\n        a[i] = s(i)\nb = [0] * (10 ** 6 + 1)\nfor j in range(1, 10 ** 6 + 1):\n    if i <= 4:\n        b[i] = i * i * (i + 1)\n    else:\n        b[j] = b[j - 1] + b[j - 1] - b[j - 2] - 2 * a[j] + a[2 * j - 2] + 2 * a[2 * j - 1] + a[2 * j]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(b[n])", "def s(k):\n    even = 0\n    odd = 0\n    if k == 0:\n        return 0\n    while k != 0:\n        if k % 10 % 2 == 0:\n            even = even + k % 10\n        elif k % 10 % 2 == 1:\n            odd = odd + k % 10\n        k = k // 10\n    return abs(odd - even)\na = [0] * (2 * 10 ** 6 + 1)\nfor i in range(2, 2 * 10 ** 6 + 1):\n    if i <= 9:\n        a[i] = i\n    else:\n        a[i] = s(i)\nb = [0] * (10 ** 6 + 1)\nb[0] = 0\nb[1] = 2\nx = 2\nfor j in range(2, 10 ** 6 + 1):\n    b[j] = b[j - 1] + a[2 * j - 2] + 2 * a[2 * j - 1] + a[2 * j] + x - 2 * a[j]\n    x = b[j] - b[j - 1]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(b[n])", "import math\nt = int(input().strip())\nk = 10 ** 6 + 1\nf = [0] * 2 * k\nfor i in range(10):\n    f[i] = i if i % 2 else -i\nfor i in range(10, 2 * k):\n    f[i] = f[i // 10] + f[i % 10]\nm = [0] * k\nm[1] = 2\nm[2] = 12\nd = [0] * k\nd[2] = 3\nfor i in range(3, k):\n    i2 = i * 2\n    d[i] = d[i - 1] - abs(f[i]) + abs(f[i2 - 1]) + abs(f[i2 - 2])\n    m[i] = m[i - 1] + 2 * d[i] + abs(f[i2])\nfor i in range(t):\n    n = int(input().strip())\n    print(m[n])", "from datetime import datetime\nx1 = []\nx1.append(0)\nx3 = []\nx3.append(0)\nx4 = []\nx2 = []\nm = 0\nsum1 = 0\nsum2 = 0\nsum4 = 0\nfor i in range(1, 2000001):\n    x = 1 + i\n    y = 1000000 + i\n    if x % 10 == 0:\n        while x % 10 == 0:\n            sum1 -= 9\n            x = x // 10\n        x = x % 10\n        sum1 += -(-1) ** (x - 1) * -(x - 1) + (-1) ** x * -x\n        m = 0\n    else:\n        x = x % 10\n        sum1 += -m + (-1) ** x * -x\n        m = (-1) ** x * -x\n    sum2 += abs(sum1)\n    x1.append(abs(sum1))\n    x3.append(sum2)\nx1[-1] = 2\nx5 = []\nx5.append(0)\nz = 0\nfor i in range(0, 1000000):\n    a = (x3[2 * i + 1] - x3[i]) * 2 - x1[2 * i + 1]\n    x5.append(a + z)\n    z += a\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(x5[n])", "t = int(input())\nc = []\nr = t\nwhile r > 0:\n    n = int(input())\n    c.append(n)\n    r = r - 1\nsume = 0\nsumo = 0\nsumf = 0\np = 0\nb = []\nb.append(0)\nb.append(2)\nd = []\nd.append(0)\nd.append(0)\nfor i in range(2, 2 * (10 ** 6 + 1) + 1):\n    y = i\n    while y > 0:\n        r = y % 10\n        if r % 2 == 0:\n            sume = sume + r\n        else:\n            sumo = sumo + r\n        y = y // 10\n    d.append(abs(sume - sumo))\n    sume = 0\n    sumo = 0\nx = d[3]\nr = 0\nfor i in range(2, 10 ** 6 + 1):\n    r = b[i - 1] + 2 * x + d[2 * i]\n    b.append(r)\n    x = x + d[2 * i] + d[2 * i + 1] - d[i + 1]\nfor j in range(t):\n    print(b[c[j]])", "a = [0] * 1000001\nb = [0] * 2000000\nc = [0] * 2000000\nfor i in range(9, 2 * 1000000):\n    ev = 0\n    od = 0\n    su = 0\n    qr = i + 1\n    while qr >= 10:\n        x = qr % 10\n        if x % 2 == 0:\n            ev = ev + x\n        else:\n            od = od + x\n        qr = qr // 10\n    if qr % 2 == 0:\n        ev = ev + qr\n    else:\n        od = od + qr\n    su = abs(ev - od)\n    b[i] = su\nc[9] = b[9]\nfor i in range(10, 2 * 1000000):\n    c[i] = c[i - 1] + b[i]\na[1] = 2\na[2] = 12\na[3] = 36\na[4] = 80\na[5] = 141\na[6] = 196\na[7] = 249\na[8] = 306\na[9] = 373\nfor i in range(10, 1000000):\n    a[i] = a[i - 1] + 2 * (c[2 * i - 2] - c[i - 1]) + b[2 * i - 1]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(a[n])", "mx = 10 ** 6\nb = [None, None]\nfor n in range(2, mx * 2 + 1):\n    a = [0, 0]\n    while n > 0:\n        d = n % 10\n        a[d % 2] += d\n        n = n // 10\n    b.append(abs(a[0] - a[1]))\nr = [None, 2, 12]\naddend = 10\nfor n in range(3, mx + 1):\n    addend -= 2 * b[n]\n    addend += b[2 * n] + 2 * b[2 * n - 1] + b[2 * n - 2]\n    r.append(r[-1] + addend)\nfor t in range(int(input())):\n    print(r[int(input())])", "l = [0]\nfor i in range(1, 2000001):\n    if i < 10:\n        if i % 2 == 0:\n            l.append(i)\n        else:\n            l.append(-i)\n    elif int(str(i)[0]) % 2 == 0:\n        l.append(int(str(i)[0]) + l[int(str(i)[1:])])\n    else:\n        l.append(l[int(str(i)[1:])] - int(str(i)[0]))\nfor i in range(1, 2000001):\n    l[i] = abs(l[i])\nansl = [0, 2, 12]\nx = 10\nfor n in range(3, 1000001):\n    x = x - 2 * l[n] + l[2 * n - 2] + 2 * l[2 * n - 1] + l[2 * n]\n    ansl.append(ansl[n - 1] + x)\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    print(ansl[n])", "l = []\nc = []\nl.append(0)\nl.append(-1)\nk = 4\npu = 0\ns = 0\nc.append(0)\nc.append(2)\nc.append(12)\nc.append(36)\nfor i in range(2, 2 * 1000000 + 1):\n    f = 0\n    if i < 10:\n        if i % 2 == 0:\n            l.append(i)\n        else:\n            l.append(-i)\n    else:\n        pi = i // 10\n        if i % 2 == 0:\n            ele = l[pi] + i % 10\n        else:\n            ele = l[pi] - i % 10\n        l.append(ele)\n    if i % 2 == 0 and i >= 8:\n        c.append(c[i // 2 - 1] + 2 * s + abs(l[i]))\n        f = 1\n        if i == 8:\n            pu = 5\n    if i > 4:\n        s += abs(l[i])\n        if f == 1:\n            s = s - abs(l[pu])\n            pu = pu + 1\n            f = 0\nfor i in range(int(input())):\n    p = int(input())\n    print(c[p])", "dic = {'0': 0, '1': 1, '2': -2, '3': 3, '4': -4, '5': 5, '6': -6, '7': 7, '8': -8, '9': 9}\nresult = {1: 2, 2: 10}\n\ndef compute(string):\n    count = 0\n    for x in string:\n        count += dic[x]\n    return abs(count)\nfor i in range(3, 10 ** 6 + 1):\n    beta = 2 * i - 2\n    gama = 2 * i - 1\n    delta = 2 * i\n    alpha = i\n    beta = compute(str(beta))\n    alpha = 2 * compute(str(alpha))\n    gama = 2 * compute(str(gama))\n    delta = compute(str(delta))\n    result[i] = result[i - 1] + beta + gama + delta - alpha\nfor i in result:\n    if i - 1 in result:\n        result[i] = result[i] + result[i - 1]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(result[n])", "def reduce(n):\n    even = 0\n    odd = 0\n    while n > 0:\n        r = n % 10\n        if r % 2 == 0:\n            even += r\n        else:\n            odd += r\n        n = int(n / 10)\n    return abs(even - odd)\nm = 10 ** 6\nact = [0]\nsum_act = [0]\nfor i in range(1, 2 * m + 1):\n    act.append(reduce(i))\n    sum_act.append(act[-1] + sum_act[-1])\nmem = [0]\nfor i in range(m):\n    mem.append(mem[-1] + 2 * (sum_act[2 * i + 1] - sum_act[i + 1]) + act[2 * i + 2])\nfor t in range(int(input())):\n    n = int(input())\n    ans = mem[n]\n    print(ans)", "ans = [0] * 2000002\nans[0] = 0\nfor i in range(1, 2000002):\n    x = i\n    ec = 0\n    oc = 0\n    while x > 0:\n        j = x % 10\n        if j % 2 == 0:\n            ec = ec + j\n        else:\n            oc = oc + j\n        x = x // 10\n    ans[i] = ans[i - 1] + abs(ec - oc)\nreal = [0] * 1000002\nreal[0] = 0\nreal[1] = 2\nfor i in range(2, 1000001):\n    x = ans[2 * i - 1] - ans[i]\n    real[i] = real[i - 1] + 2 * x + ans[2 * i] - ans[2 * i - 1]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(real[n])", "t = int(input())\nroom_list = []\ninp = []\nfor i in range(t):\n    n = int(input())\n    inp.append(n)\nmax_inp = max(inp) + 1\nmax_rno = 2 * max_inp + 1\nfor room_no in range(max_rno):\n    even = 0\n    odd = 0\n    while room_no > 0:\n        l = room_no % 10\n        if l % 2 == 0:\n            even += l\n        else:\n            odd += l\n        room_no //= 10\n    diamond_count = abs(odd - even)\n    room_list.append(diamond_count)\ndim_list = [0, 2, 12]\na = 3\nfor dim in range(3, max_inp):\n    stop = dim * 2\n    a -= room_list[dim]\n    a += room_list[2 * (dim - 1)]\n    a += room_list[2 * dim - 1]\n    b = a * 2\n    b += room_list[stop]\n    b += dim_list[-1]\n    dim_list.append(b)\nfor i in range(t):\n    print(dim_list[inp[i]])", "def dig_diff(n):\n    s1 = 0\n    s2 = 0\n    while n > 0:\n        if n % 10 % 2 == 0:\n            s1 += n % 10\n        else:\n            s2 += n % 10\n        n //= 10\n    return abs(s1 - s2)\nlis_dice = [0]\nfor i in range(1, 2000001):\n    lis_dice.append(dig_diff(i) + lis_dice[i - 1])\nvals = [0]\nfor i in range(1, 1000001):\n    temp = vals[i - 1]\n    temp += lis_dice[i + i] + lis_dice[i + i - 1] - 2 * lis_dice[i]\n    vals.append(temp)\nn = int(input())\nfor i in range(n):\n    inp = int(input())\n    print(vals[inp])", "def eval(n):\n    ret = 0\n    while n:\n        no = n % 10\n        ret = ret - no if no % 2 else ret + no\n        n //= 10\n    return abs(ret)\nprsum = [0, 0]\nfor no in range(2, 2000001):\n    prsum.append(prsum[-1] + eval(no))\nans = [0, 2]\nfor no in range(2, 1000001):\n    ans.append(ans[-1] + 2 * (prsum[2 * no] - prsum[no]) - eval(2 * no))\nfor _ in range(int(input().strip())):\n    N = int(input().strip())\n    print(ans[N])", "t = int(input())\nc = [-1, -1, 2]\nfor p in range(3, 2000001):\n    c1 = 0\n    c2 = 0\n    y = p\n    while y != 0:\n        r = y % 10\n        y = y // 10\n        if r % 2 == 0:\n            c1 = c1 + r\n        else:\n            c2 = c2 + r\n    x = abs(c1 - c2)\n    c.append(c[p - 1] + x)\na = [0, 2]\nfor p in range(2, 1000001):\n    x = a[p - 1] + c[2 * p - 1] - 2 * c[p] + c[2 * p]\n    a.append(x)\nfor k in range(t):\n    n = int(input())\n    print(a[n])", "def diamond(k):\n    even = odd = 0\n    while k > 0:\n        x = k % 10\n        k //= 10\n        if x % 2 == 0:\n            even += x\n        else:\n            odd += x\n    return abs(even - odd)\nl = [0, 0]\nfor j in range(2, 2000001):\n    l.append(diamond(j))\nt = [0, 2, 12]\nsum1 = l[3]\nfor j in range(3, 1000001):\n    sum2 = t[j - 1]\n    p = 2 * j\n    sum1 += l[p - 1] + l[p - 2] - l[j]\n    sum2 += 2 * sum1\n    sum2 += l[2 * j]\n    t.append(sum2)\nx = int(input())\nfor k in range(x):\n    n = int(input())\n    print(t[n])", "T = int(input().strip())\n(ans, TD) = ([(0, 0, 0, 0)], [0, 2])\nfor i in range(1, 10):\n    even = 0 if i & 1 else i\n    odd = 0 if even else i\n    ans.append((even, odd, i, i + ans[i - 1][3]))\nfor i in range(10, 2 * 1000000 + 2):\n    (j, k) = divmod(i, 10)\n    even = ans[j][0] + ans[k][0]\n    odd = ans[j][1] + ans[k][1]\n    diff = abs(even - odd)\n    ans.append((even, odd, diff, diff + ans[i - 1][3]))\nfor i in range(2, 1000001):\n    TD.append(TD[i - 1] + ans[2 * i][2] + 2 * (ans[2 * i - 1][3] - ans[i][3]))\nfor _ in range(T):\n    print(TD[int(input().strip())])", "from math import *\n\ndef calc(n):\n    (tmp, i, p) = (n, 0, 0)\n    while tmp > 0:\n        C = tmp % 10\n        tmp //= 10\n        if C % 2 == 0:\n            p += C\n        else:\n            i += C\n    return int(fabs(i - p))\nf = [0, 1]\npref_sum = [0, 1]\ndimond = [0, 2]\nfor i in range(2, 2000003):\n    f.append(calc(i))\n    pref_sum.append(pref_sum[i - 1] + f[i])\nfor i in range(2, 1000002):\n    dimond.append(dimond[i - 1] + 2 * (pref_sum[2 * i] - pref_sum[i]) - f[2 * i])\nT = int(input())\nfor _ in range(T):\n    print(dimond[int(input())])", "L = []\nfor _ in range(int(input())):\n    N = int(input())\n    L.append(N)\nMAX_N = max(L)\nTable = [0, 0]\nCumTable = [0, 0]\nfor i in range(2, 2 * MAX_N + 1):\n    num = i\n    even_sum = 0\n    odd_sum = 0\n    while num:\n        digit = num % 10\n        num = num // 10\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n    diff = int(abs(even_sum - odd_sum))\n    Table.append(diff)\n    CumTable.append(CumTable[-1] + diff)\nAnsTable = [0, 2]\nfor i in range(2, MAX_N + 1):\n    AnsTable.append((CumTable[2 * i - 1] - CumTable[i]) * 2 + Table[2 * i] + AnsTable[-1])\nfor N in L:\n    print(AnsTable[N])", "def foo(n):\n    (e, o) = (0, 0)\n    while n > 0:\n        r = n % 10\n        n = n // 10\n        if r & 1:\n            o += r\n        else:\n            e += r\n    return abs(e - o)\nN = 2000010\nn = 1000002\nA = [foo(i) for i in range(N)]\nS = [0] * N\nfor i in range(1, N):\n    S[i] = S[i - 1] + A[i]\nans = [0] * n\nans[0] = 2\nfor i in range(1, n):\n    ans[i] = ans[i - 1] + 2 * (S[2 + i + i - 1] - S[2 + i - 1]) + S[2 * (i + 1)] - S[2 * (i + 1) - 1]\nT = int(input().strip())\nfor _ in range(T):\n    n = int(input().strip())\n    print(ans[n - 1])", "from itertools import accumulate\nN = 2000001\n\ndef f(n):\n    ans = 0\n    while n:\n        r = n % 10\n        if r & 1:\n            ans += r\n        else:\n            ans -= r\n        n //= 10\n    return abs(ans)\ng = ((x, i * x) for (i, x) in enumerate(map(f, range(1, N))))\nl = list(accumulate(g, lambda x, y: (x[0] + y[0], x[1] + y[1])))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    (l1, l2) = (l[n], l[2 * n - 1])\n    print(2 * (l1[1] + n * (l2[0] - l1[0])) - l2[1])", "from math import *\n\ndef calc(n):\n    (tmp, i, p) = (n, 0, 0)\n    while tmp > 0:\n        C = tmp % 10\n        tmp //= 10\n        if C % 2 == 0:\n            p += C\n        else:\n            i += C\n    return int(fabs(i - p))\nf = [0, 1]\npref_sum = [0, 1]\ndimond = [0, 2]\nfor i in range(2, 2000003):\n    f.append(calc(i))\n    pref_sum.append(pref_sum[i - 1] + f[i])\nfor i in range(2, 1000002):\n    dimond.append(dimond[i - 1] + 2 * (pref_sum[2 * i] - pref_sum[i]) - f[2 * i])\nT = int(input())\nfor _ in range(T):\n    print(dimond[int(input())])", "def op(x):\n    o = 0\n    e = 0\n    while x > 0:\n        if x % 2:\n            o += x % 10\n        else:\n            e += x % 10\n        x //= 10\n    return abs(o - e)\nN = 1000000\nd = [0] * (2 * N + 1)\nfor i in range(1, 2 * N + 1):\n    d[i] = op(i) + d[i - 1]\na = [0] * (N + 1)\na[1] = 2\nfor i in range(2, N + 1):\n    a[i] += a[i - 1] + d[2 * i - 1] + d[2 * i] - 2 * d[i]\nt = int(input())\nfor k in range(t):\n    print(a[int(input())])", "def diamondsInRoom(n):\n    (totalOdds, totalEvens) = (0, 0)\n    while n != 0:\n        if n % 2 == 0:\n            totalEvens += n % 10\n        else:\n            totalOdds += n % 10\n        n //= 10\n    return abs(totalOdds - totalEvens)\nanswers = ['*']\nroomNumberValues = [diamondsInRoom(n) for n in range(0, 2 * 10 ** 6 + 1)]\ntotalDiamonds = 0\ndiamondsThisEdge_last = 0\nfor N in range(1, 10 ** 6):\n    diamondsThisEdge = diamondsThisEdge_last\n    diamondsThisEdge -= roomNumberValues[N]\n    diamondsThisEdge += roomNumberValues[2 * N - 1]\n    diamondsThisEdge += roomNumberValues[2 * N]\n    totalDiamonds += 2 * diamondsThisEdge - roomNumberValues[2 * N]\n    answers.append(totalDiamonds)\n    diamondsThisEdge_last = diamondsThisEdge\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    print(answers[N])", "def diamonds(n):\n    odd = even = 0\n    while n > 0:\n        if n % 2 == 0:\n            even += n % 10\n        else:\n            odd += n % 10\n        n //= 10\n    return abs(odd - even)\nN = 1000000\nt = int(input())\nrooms = [0 for i in range(2 * N + 1)]\ndp = [0 for i in range(N + 1)]\nfor i in range(1, 2 * N + 1):\n    rooms[i] = rooms[i - 1] + diamonds(i)\nfor i in range(1, N + 1):\n    dp[i] = dp[i - 1] + 2 * (rooms[2 * i] - rooms[i]) - (rooms[2 * i] - rooms[2 * i - 1])\nfor caseNr in range(t):\n    n = int(input())\n    print(dp[n])", "T = int(input())\nd = [-1] * (2 * 10 ** 6 + 1)\nD = [-1] * (2 * 10 ** 6 + 1)\n_N = [-1] * (10 ** 6 + 1)\n_N[1] = 2\n_N[2] = 12\nd[0] = 0\nd[1] = -1\nd[2] = 2\nd[3] = -3\nd[4] = 4\nd[5] = -5\nd[6] = 6\nd[7] = -7\nd[8] = 8\nd[9] = -9\nD[1] = 0\nD[2] = 2\nD[3] = 5\nD[4] = 9\nD[5] = 14\nD[6] = 20\nD[7] = 27\nD[8] = 35\nD[9] = 44\n\ndef diamond(n):\n    lastdigit = n % 10\n    if lastdigit % 2 == 0:\n        d[n] = d[n // 10] + lastdigit\n    else:\n        d[n] = d[n // 10] - lastdigit\n    D[n] = D[n - 1] + abs(d[n])\nfor k in range(10, 2 * 10 ** 6):\n    diamond(k)\nfor k in range(3, 10 ** 6 + 1):\n    _N[k] = _N[k - 1] + 2 * (D[2 * k] - D[k]) - abs(d[2 * k])\nfor t in range(0, T):\n    N = int(input())\n    print(_N[N])", "NMAX = 10 ** 6\n\ndef val(n):\n    S = [0, 0]\n    while n:\n        d = n % 10\n        S[d % 2] += d\n        n //= 10\n    return abs(S[0] - S[1])\n\ndef main():\n    R = [0]\n    P = [0]\n    S = [0]\n    for i in range(1, NMAX + 1):\n        R.append(val(2 * i - 1))\n        P.append(P[-1] + R[-1])\n        R.append(val(2 * i))\n        P.append(P[-1] + R[-1])\n        S.append(S[-1] + R[-1] + 2 * (P[-2] - P[-1 - i]))\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        print(S[N])\nmain()", "import sys\ne = [0 if i % 2 else i for i in range(10)]\no = [i if i % 2 else 0 for i in range(10)]\nd = [abs(e[i] - o[i]) for i in range(10)]\nex = [0, 2, 10]\nans = [0, 2, 12]\n\ndef prec():\n    for i in range(10, 2000001):\n        e.append(e[int(i / 10)] + e[i % 10])\n        o.append(o[int(i / 10)] + o[i % 10])\n        d.append(abs(e[i] - o[i]))\n    for n in range(3, 1000001):\n        ext = ex[n - 1] - 2 * d[n] + d[2 * (n - 1)] + 2 * d[2 * n - 1] + d[2 * n]\n        ex.append(ext)\n        ans.append(ans[n - 1] + ext)\nprec()\n\ndef calc(n):\n    ans = 0\n    for i in range(2, 2 * n + 1):\n        if i > n + 1:\n            m = 2 * n - i + 1\n        else:\n            m = i - 1\n        ans += m * d[i]\n    return ans\nt = int(input().strip())\nfor i in range(t):\n    n = int(input().strip())\n    print(ans[n])", "import numpy as np\n\ndef diamonds(k):\n    ret = np.zeros(k, dtype=np.int64)\n    idx = np.arange(k, dtype=np.int64)\n    vals = np.array([j if j & 1 else -j for j in range(10)])\n    t = 1\n    while t < k:\n        i0 = idx // t % 10\n        ret += vals[i0]\n        t *= 10\n    return np.abs(ret)\nDD = diamonds(10 ** 6 * 2 + 100)[2:]\nD0 = np.cumsum(DD)\nD1 = np.cumsum(D0)\n\ndef solve(n):\n    if n == 1:\n        return 2\n    n -= 1\n    ret = D1[2 * n] - 2 * D1[n - 1]\n    return ret\nimport sys\nf = sys.stdin\nt = int(f.readline())\nfor i in range(t):\n    n = int(f.readline())\n    print(solve(n))", "def count(n):\n    (c0, c1) = (0, 0)\n    while n > 0:\n        if n % 2 == 0:\n            c0 += n % 10\n        else:\n            c1 += n % 10\n        n //= 10\n    return abs(c0 - c1)\nN = 1000000\ncc = [count(n) for n in range(N + N + 1)]\nss = [0 for n in range(N + N + 1)]\nfor n in range(1, N + N + 1):\n    ss[n] = ss[n - 1] + cc[n]\ndd = [0 for n in range(N + 1)]\nfor n in range(1, N + 1):\n    dd[n] = dd[n - 1] + (ss[n + n] - ss[n]) * 2 - cc[n + n]\nprint(*(dd[int(input())] for _ in range(int(input()))), sep='\\n')", "from sys import stdin\nfrom bisect import bisect_left, bisect_right\ninput = stdin.readline\nMAX = int(1000000.0) + 1\nval = [0] * (MAX << 1)\nans = [0] * MAX\n\ndef digit_sum(num):\n    (e, o) = (0, 0)\n    while num:\n        (d, num) = (num % 10, num // 10)\n        (e, o) = (e, o + d) if d % 2 else (e + d, o)\n    return abs(e - o)\nfor i in range(1, MAX << 1):\n    val[i] = val[i - 1] + digit_sum(i)\nfor i in range(1, MAX):\n    ans[i] = ans[i - 1] + val[i << 1] + val[i - 1 << 1 | 1] - (val[i] << 1)\nt = int(input().strip())\nwhile t:\n    n = int(input().strip())\n    print(ans[n])\n    t -= 1"]