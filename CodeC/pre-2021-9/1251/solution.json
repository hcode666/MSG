["m = int(1000000000.0 + 7)\nfor t in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    dp1 = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n):\n        if i >= 3 and ar[i - 2] == 2 and (ar[i - 3] == 2):\n            dp[i] = ((dp[i - 1] + dp[i - 2]) % m + dp[i - 3]) % m\n        elif ar[i - 2] == 2:\n            dp[i] = (dp[i - 1] + dp[i - 2]) % m\n        else:\n            dp[i] = dp[i - 1]\n    p1 = 2\n    p2 = 1\n    ans = dp[0]\n    if n > 1:\n        ans = (ans + dp[n - 1]) % m\n    for i in range(1, n - 1):\n        if i % 2 == 0:\n            if ar[i - 1] == 2:\n                if i >= p1:\n                    p1 = i + 1\n                    while p1 + 2 < n and ar[p1] == 2 and (ar[p1 + 1] == 2):\n                        p1 += 2\n                if p1 + 1 < n and ar[p1 + 1] == 2:\n                    dp1[i] = (p1 - i + 1) * dp[i - 1] % m\n                else:\n                    dp1[i] = (p1 - i) * dp[i - 1] % m\n        if i % 2 != 0:\n            if ar[i - 1] == 2:\n                if i >= p2:\n                    p2 = i + 1\n                    while p2 + 2 < n and ar[p2] == 2 and (ar[p2 + 1] == 2):\n                        p2 += 2\n                if p2 + 1 < n and ar[p2 + 1] == 2:\n                    dp1[i] = (p2 - i + 1) * dp[i - 1] % m\n                else:\n                    dp1[i] = (p2 - i) * dp[i - 1] % m\n        ans = (ans + (dp[i] + dp1[i]) % m) % m\n    print(ans)", "m = int(1000000000.0 + 7)\nfor t in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    dp1 = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n):\n        if i >= 3 and ar[i - 2] == 2 and (ar[i - 3] == 2):\n            dp[i] = ((dp[i - 1] + dp[i - 2]) % m + dp[i - 3]) % m\n        elif ar[i - 2] == 2:\n            dp[i] = (dp[i - 1] + dp[i - 2]) % m\n        else:\n            dp[i] = dp[i - 1]\n    p1 = 2\n    p2 = 1\n    ans = dp[0]\n    if n > 1:\n        ans = (ans + dp[n - 1]) % m\n    for i in range(1, n - 1):\n        if i % 2 == 0:\n            if ar[i - 1] == 2:\n                if i >= p1:\n                    p1 = i + 1\n                    while p1 + 2 < n and ar[p1] == 2 and (ar[p1 + 1] == 2):\n                        p1 += 2\n                if p1 + 1 < n and ar[p1 + 1] == 2:\n                    dp1[i] = (p1 - i + 1) * dp[i - 1] % m\n                else:\n                    dp1[i] = (p1 - i) * dp[i - 1] % m\n        if i % 2 != 0:\n            if ar[i - 1] == 2:\n                if i >= p2:\n                    p2 = i + 1\n                    while p2 + 2 < n and ar[p2] == 2 and (ar[p2 + 1] == 2):\n                        p2 += 2\n                if p2 + 1 < n and ar[p2 + 1] == 2:\n                    dp1[i] = (p2 - i + 1) * dp[i - 1] % m\n                else:\n                    dp1[i] = (p2 - i) * dp[i - 1] % m\n        ans = (ans + (dp[i] + dp1[i]) % m) % m\n    print(ans)", "for _ in range(int(input())):\n    m = 1000000007\n    n = int(input())\n    ar = list(map(int, input().split()))\n    dp1 = [0] * n\n    dp2 = [0] * n\n    if n == 1:\n        print(1)\n    else:\n        dp1[0] = dp1[1] = 1\n        for i in range(2, n):\n            dp1[i] += dp1[i - 1]\n            if ar[i - 2] == 2:\n                dp1[i] = (dp1[i] + dp1[i - 2]) % m\n            if ar[i - 2] == 2 and i - 3 >= 0 and (ar[i - 3] == 2):\n                dp1[i] = (dp1[i] + dp1[i - 3]) % m\n        p1 = 0\n        p2 = 0\n        for i in range(1, n - 1):\n            if ar[i - 1] == 2:\n                if i % 2 == 0:\n                    if p1 <= i:\n                        p1 = i + 1\n                        while p1 < n - 2 and ar[p1] == 2 and (ar[p1 + 1] == 2):\n                            p1 = p1 + 2\n                    dp2[i] = dp1[i - 1] * (p1 - i) % m\n                    if p1 < n - 1 and ar[p1 + 1] == 2:\n                        dp2[i] = (dp2[i] + dp1[i - 1]) % m\n                else:\n                    if p2 <= i:\n                        p2 = i + 1\n                        while p2 < n - 2 and ar[p2] == 2 and (ar[p2 + 1] == 2):\n                            p2 = p2 + 2\n                    dp2[i] = dp1[i - 1] * (p2 - i) % m\n                    if p2 < n - 1 and ar[p2 + 1] == 2:\n                        dp2[i] = (dp2[i] + dp1[i - 1]) % m\n        ans = 0\n        for i in dp1:\n            ans = (ans + i) % m\n        for i in dp2:\n            ans = (ans + i) % m\n        print(ans)", "for _ in range(int(input())):\n    m = 1000000007\n    n = int(input())\n    ar = list(map(int, input().split()))\n    dp1 = [0] * n\n    dp2 = [0] * n\n    dp1[0] = 1\n    if n > 1:\n        dp1[1] = 1\n    for i in range(2, n):\n        dp1[i] += dp1[i - 1]\n        if ar[i - 2] == 2:\n            dp1[i] = (dp1[i] + dp1[i - 2]) % m\n        if ar[i - 2] == 2 and i - 3 >= 0 and (ar[i - 3] == 2):\n            dp1[i] = (dp1[i] + dp1[i - 3]) % m\n    p1 = 0\n    p2 = 0\n    for i in range(1, n - 1):\n        if ar[i - 1] == 2:\n            if i % 2 == 0:\n                if p1 <= i:\n                    p1 = i + 1\n                    while p1 < n - 2 and ar[p1] == 2 and (ar[p1 + 1] == 2):\n                        p1 = p1 + 2\n                dp2[i] = dp1[i - 1] * (p1 - i) % m\n                if p1 < n - 1 and ar[p1 + 1] == 2:\n                    dp2[i] = (dp2[i] + dp1[i - 1]) % m\n            else:\n                if p2 <= i:\n                    p2 = i + 1\n                    while p2 < n - 2 and ar[p2] == 2 and (ar[p2 + 1] == 2):\n                        p2 = p2 + 2\n                dp2[i] = dp1[i - 1] * (p2 - i) % m\n                if p2 < n - 1 and ar[p2 + 1] == 2:\n                    dp2[i] = (dp2[i] + dp1[i - 1]) % m\n    ans = 0\n    for i in dp1:\n        ans = (ans + i) % m\n    for i in dp2:\n        ans = (ans + i) % m\n    print(ans)", "def solve(ar, n):\n    if n == 1:\n        return 1\n    dp1 = [0] * n\n    dp2 = [0] * n\n    dp1[0] = dp1[1] = 1\n    for i in range(2, n):\n        dp1[i] += dp1[i - 1]\n        if ar[i - 2] == 2:\n            dp1[i] = (dp1[i] + dp1[i - 2]) % m\n        if ar[i - 2] == 2 and i - 3 >= 0 and (ar[i - 3] == 2):\n            dp1[i] = (dp1[i] + dp1[i - 3]) % m\n    p1 = 0\n    p2 = 0\n    for i in range(1, n - 1):\n        if ar[i - 1] == 2:\n            if i % 2 == 0:\n                if p1 <= i:\n                    p1 = i + 1\n                    while p1 < n - 2 and ar[p1] == 2 and (ar[p1 + 1] == 2):\n                        p1 = p1 + 2\n                dp2[i] = dp1[i - 1] * (p1 - i) % m\n                if p1 < n - 1 and ar[p1 + 1] == 2:\n                    dp2[i] = (dp2[i] + dp1[i - 1]) % m\n            else:\n                if p2 <= i:\n                    p2 = i + 1\n                    while p2 < n - 2 and ar[p2] == 2 and (ar[p2 + 1] == 2):\n                        p2 = p2 + 2\n                dp2[i] = dp1[i - 1] * (p2 - i) % m\n                if p2 < n - 1 and ar[p2 + 1] == 2:\n                    dp2[i] = (dp2[i] + dp1[i - 1]) % m\n    ans = 0\n    for i in dp1:\n        ans = (ans + i) % m\n    for i in dp2:\n        ans = (ans + i) % m\n    return ans\nfor _ in range(int(input())):\n    m = 1000000007\n    n = int(input())\n    ar = list(map(int, input().split()))\n    print(solve(ar, n))", "for _ in range(int(input())):\n    n = int(input())\n    p = [int(o) for o in input().split()]\n    s = [0] * n\n    pr = [0] * n\n    s[n - 1] = 1\n    pr[n - 1] = 0\n    if n - 2 >= 0:\n        s[n - 2] = 2\n        pr[n - 2] = 1\n    if n - 3 >= 0:\n        s[n - 3] = 3\n        pr[n - 3] = 1\n        if p[n - 3] == 2:\n            s[n - 3] += 2\n            pr[n - 3] += 1\n    i = n - 4\n    while i >= 0:\n        s[i] = 1\n        s[i] += s[i + 1]\n        pr[i] = 1\n        if p[i] == 2:\n            s[i] += s[i + 2]\n            s[i] += 1\n            pr[i] += 1\n            if p[i + 3] == 2:\n                s[i] += pr[i + 2]\n                pr[i] += pr[i + 2]\n            if p[i + 1] == 2:\n                s[i] += s[i + 3]\n        s[i] = s[i] % 1000000007\n        pr[i] = pr[i] % 1000000007\n        i -= 1\n    print(s[0])", "for _ in range(int(input())):\n    num = int(input())\n    arr = list(map(int, input().split()))\n    dp = [0] * num\n    dpr = [0] * num\n    dpt = [0] * num\n    dp[0] = 1\n    dpr[0] = 0\n    ans = 1\n    j = 0\n    for i in range(1, num):\n        dp[i] = dp[i - 1] % 1000000007\n        if i - 2 >= 0 and arr[i - 2] == 2:\n            dp[i] += dp[i - 2] % 1000000007\n            if i - 3 >= 0 and arr[i - 3] == 2:\n                dp[i] += dp[i - 3] % 1000000007\n        if arr[i - 1] == 2 and i < num - 1:\n            if i >= j or j == 0:\n                j = i + 1\n                while j < num and arr[j] == 2:\n                    j += 1\n            count = j - i\n            if j == num:\n                dpr[i] = dp[i - 1] * (count - 1) % 1000000007\n            elif count % 2 != 0:\n                if j < num - 1 and arr[j + 1] == 2:\n                    dpr[i] = dp[i - 1] * (count + 1) % 1000000007\n                else:\n                    dpr[i] = dp[i - 1] * count % 1000000007\n            elif count % 2 == 0:\n                dpr[i] = dp[i - 1] * (count - 1) % 1000000007\n        ans += (dpr[i] + dp[i]) % 1000000007\n    print(ans % 1000000007)", "for _ in range(int(input())):\n    num = int(input())\n    arr = list(map(int, input().split()))\n    dp = [0] * num\n    dpr = [0] * num\n    dpt = [0] * num\n    dp[0] = 1\n    dpr[0] = 0\n    ans = 1\n    j = 0\n    for i in range(1, num):\n        dp[i] = dp[i - 1] % 1000000007\n        if i - 2 >= 0 and arr[i - 2] == 2:\n            dp[i] += dp[i - 2] % 1000000007\n            if i - 3 >= 0 and arr[i - 3] == 2:\n                dp[i] += dp[i - 3] % 1000000007\n        if arr[i - 1] == 2 and i < num - 1:\n            if i >= j or j == 0:\n                j = i + 1\n                while j < num and arr[j] == 2:\n                    j += 1\n            count = j - i\n            if j == num:\n                dpr[i] = dp[i - 1] * (count - 1) % 1000000007\n            elif count % 2 != 0:\n                if j < num - 1 and arr[j + 1] == 2:\n                    dpr[i] = dp[i - 1] * (count + 1) % 1000000007\n                else:\n                    dpr[i] = dp[i - 1] * count % 1000000007\n            elif count % 2 == 0:\n                dpr[i] = dp[i - 1] * (count - 1) % 1000000007\n        ans += (dpr[i] + dp[i]) % 1000000007\n    print(ans % 1000000007)", "for _ in range(int(input())):\n    n = int(input())\n    p = [int(o) for o in input().split()]\n    s = [0] * n\n    pr = [0] * n\n    s[n - 1] = 1\n    pr[n - 1] = 0\n    if n - 2 >= 0:\n        s[n - 2] = 2\n        pr[n - 2] = 1\n    if n - 3 >= 0:\n        s[n - 3] = 3\n        pr[n - 3] = 1\n        if p[n - 3] == 2:\n            s[n - 3] += 2\n            pr[n - 3] += 1\n    i = n - 4\n    while i >= 0:\n        s[i] = 1\n        s[i] += s[i + 1]\n        pr[i] = 1\n        if p[i] == 2:\n            s[i] += s[i + 2]\n            s[i] += 1\n            pr[i] += 1\n            if p[i + 3] == 2:\n                s[i] += pr[i + 2]\n                pr[i] += pr[i + 2]\n            if p[i + 1] == 2:\n                s[i] += s[i + 3]\n        s[i] = s[i] % 1000000007\n        pr[i] = pr[i] % 1000000007\n        i -= 1\n    print(s[0])", "def array1(size):\n    return [0 for _ in range(size)]\n\ndef array2(rows, cols):\n    return [[0 for _ in range(cols)] for _ in range(rows)]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    no_of_twos = array1(n + 1)\n    for i in range(n - 1, -1, -1):\n        if a[i] == 1:\n            no_of_twos[i] = 0\n        else:\n            no_of_twos[i] += 1\n            no_of_twos[i] += no_of_twos[i + 1]\n    dp = array1(n + 1)\n    dp[0] = 1\n    ans = 1\n    for i in range(1, n):\n        if i - 1 >= 0:\n            dp[i] += dp[i - 1]\n        if i - 2 >= 0 and a[i - 2] == 2:\n            dp[i] += dp[i - 2]\n        if i - 3 >= 0 and a[i - 3] == 2 and (a[i - 2] == 2):\n            dp[i] += dp[i - 3]\n        dp[i] = dp[i] % 1000000007\n        ans += dp[i]\n        x = no_of_twos[i + 1]\n        if i + 1 < n and a[i - 1] == 2:\n            ans += x * dp[i - 1]\n            if x % 2 == 0:\n                if i + x + 1 < n:\n                    ans += dp[i - 1]\n                if i + x + 2 < n and a[i + x + 2] == 2:\n                    ans += dp[i - 1]\n        ans = ans % 1000000007\n    print(ans % 1000000007)", "def array1(size):\n    return [0 for _ in range(size)]\n\ndef array2(rows, cols):\n    return [[0 for _ in range(cols)] for _ in range(rows)]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    no_of_twos = array1(n + 1)\n    for i in range(n - 1, -1, -1):\n        if a[i] == 1:\n            no_of_twos[i] = 0\n        else:\n            no_of_twos[i] += 1\n            no_of_twos[i] += no_of_twos[i + 1]\n    dp = array1(n + 1)\n    dp[0] = 1\n    ans = 1\n    for i in range(1, n):\n        if i - 1 >= 0:\n            dp[i] += dp[i - 1]\n        if i - 2 >= 0 and a[i - 2] == 2:\n            dp[i] += dp[i - 2]\n        if i - 3 >= 0 and a[i - 3] == 2 and (a[i - 2] == 2):\n            dp[i] += dp[i - 3]\n        dp[i] = dp[i] % 1000000007\n        ans += dp[i]\n        x = no_of_twos[i + 1]\n        if i + 1 < n and a[i - 1] == 2:\n            ans += x * dp[i - 1]\n            if x % 2 == 0:\n                if i + x + 1 < n:\n                    ans += dp[i - 1]\n                if i + x + 2 < n and a[i + x + 2] == 2:\n                    ans += dp[i - 1]\n        ans = ans % 1000000007\n    print(ans % 1000000007)", "def array1(size):\n    return [0 for _ in range(size)]\n\ndef array2(rows, cols):\n    return [[0 for _ in range(cols)] for _ in range(rows)]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    no_of_twos = array1(n + 1)\n    for i in range(n - 1, -1, -1):\n        if a[i] == 1:\n            no_of_twos[i] = 0\n        else:\n            no_of_twos[i] += 1\n            no_of_twos[i] += no_of_twos[i + 1]\n    dp = array1(n + 1)\n    dp[0] = 1\n    ans = 1\n    for i in range(1, n):\n        if i - 1 >= 0:\n            dp[i] += dp[i - 1]\n        if i - 2 >= 0 and a[i - 2] == 2:\n            dp[i] += dp[i - 2]\n        if i - 3 >= 0 and a[i - 3] == 2 and (a[i - 2] == 2):\n            dp[i] += dp[i - 3]\n        dp[i] = dp[i] % 1000000007\n        ans += dp[i]\n        x = no_of_twos[i + 1]\n        if i + 1 < n and a[i - 1] == 2:\n            ans += x * dp[i - 1]\n            if x % 2 == 0:\n                if i + x + 1 < n:\n                    ans += dp[i - 1]\n                if i + x + 2 < n and a[i + x + 2] == 2:\n                    ans += dp[i - 1]\n        ans = ans % 1000000007\n    print(ans % 1000000007)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * (n + 3)\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = dp[i - 1]\n        if i - 2 >= 0 and a[i - 2] == 2:\n            dp[i] += dp[i - 2]\n        if i - 3 >= 0 and a[i - 3] == 2 and (a[i - 2] == 2):\n            dp[i] += dp[i - 3]\n    dpr = [0] * (n + 3)\n    i1 = [0] * n\n    i2 = -1\n    for i in range(n - 1, -1, -1):\n        i1[i] = i2\n        if a[i] == 1:\n            i2 = i\n    for i in range(1, n - 1):\n        if a[i - 1] == 1:\n            continue\n        if i1[i] == -1:\n            i2 = n - i - 1\n            if i2 % 2:\n                z = 2 * (i2 // 2) + 1\n            else:\n                z = i2\n        else:\n            i2 = i1[i] - i - 1\n            if not i2 % 2:\n                z = i2 + 1\n                if i1[i] + 1 < n and a[i1[i] + 1] == 2:\n                    z += 1\n            else:\n                z = 2 * (i2 // 2) + 1\n        dpr[i] = z * dp[i - 1]\n    c = 0\n    for i in range(n):\n        c += dp[i] + dpr[i]\n    x = 7 + pow(10, 9)\n    print(c % x)", "for _ in range(int(input())):\n    n = int(input())\n    p = [int(o) for o in input().split()]\n    s = [0] * n\n    pr = [0] * n\n    s[n - 1] = 1\n    pr[n - 1] = 0\n    if n - 2 >= 0:\n        s[n - 2] = 2\n        pr[n - 2] = 1\n    if n - 3 >= 0:\n        s[n - 3] = 3\n        pr[n - 3] = 1\n        if p[n - 3] == 2:\n            s[n - 3] += 2\n            pr[n - 3] += 1\n    i = n - 4\n    while i >= 0:\n        s[i] = 1\n        s[i] += s[i + 1]\n        pr[i] = 1\n        if p[i] == 2:\n            s[i] += s[i + 2]\n            s[i] += 1\n            pr[i] += 1\n            if p[i + 3] == 2:\n                s[i] += pr[i + 2]\n                pr[i] += pr[i + 2]\n            if p[i + 1] == 2:\n                s[i] += s[i + 3]\n        s[i] = s[i] % 1000000007\n        pr[i] = pr[i] % 1000000007\n        i -= 1\n    print(s[0])", "for _ in range(int(input())):\n    n = int(input())\n    p = [int(o) for o in input().split()]\n    s = [0] * n\n    pr = [0] * n\n    s[n - 1] = 1\n    pr[n - 1] = 0\n    if n - 2 >= 0:\n        s[n - 2] = 2\n        pr[n - 2] = 1\n    if n - 3 >= 0:\n        s[n - 3] = 3\n        pr[n - 3] = 1\n        if p[n - 3] == 2:\n            s[n - 3] += 2\n            pr[n - 3] += 1\n    i = n - 4\n    while i >= 0:\n        s[i] = 1\n        s[i] += s[i + 1]\n        pr[i] = 1\n        if p[i] == 2:\n            s[i] += s[i + 2]\n            s[i] += 1\n            pr[i] += 1\n            if p[i + 3] == 2:\n                s[i] += pr[i + 2]\n                pr[i] += pr[i + 2]\n            if p[i + 1] == 2:\n                s[i] += s[i + 3]\n        s[i] = s[i] % 1000000007\n        pr[i] = pr[i] % 1000000007\n        i -= 1\n    print(s[0])", "for _ in range(int(input())):\n    n = int(input())\n    p = [int(o) for o in input().split()]\n    s = [0] * n\n    pr = [0] * n\n    s[n - 1] = 1\n    pr[n - 1] = 0\n    if n - 2 >= 0:\n        s[n - 2] = 2\n        pr[n - 2] = 1\n    if n - 3 >= 0:\n        s[n - 3] = 3\n        pr[n - 3] = 1\n        if p[n - 3] == 2:\n            s[n - 3] += 2\n            pr[n - 3] += 1\n    i = n - 4\n    while i >= 0:\n        s[i] = 1\n        s[i] += s[i + 1]\n        pr[i] = 1\n        if p[i] == 2:\n            s[i] += s[i + 2]\n            s[i] += 1\n            pr[i] += 1\n            if p[i + 3] == 2:\n                s[i] += pr[i + 2]\n                pr[i] += pr[i + 2]\n            if p[i + 1] == 2:\n                s[i] += s[i + 3]\n        s[i] = s[i] % 1000000007\n        pr[i] = pr[i] % 1000000007\n        i -= 1\n    print(s[0])", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [[0] * 4 for _ in range(n)]\n    dp[0][0] = 1\n    count = [0] * n\n    c = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            c += 1\n        else:\n            c = 0\n        count[i] = c\n    for i in range(1, n):\n        c = 0\n        dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) % mod\n        if i > 1 and a[i - 2] == 2:\n            dp[i][1] = (dp[i - 2][0] + dp[i - 2][1] + dp[i - 2][2]) % mod\n        if i < n - 1 and a[i - 1] == 2:\n            dp[i][2] = (dp[i - 1][0] + dp[i - 1][1]) % mod\n        if i < n - 2 and a[i - 1] == 2 and (a[i + 2] == 2):\n            t = (dp[i - 1][0] + dp[i - 1][1]) % mod\n            dp[i][3] = t\n            if a[i + 1] == 2:\n                c = 0\n                j = i + 3\n                if j < n:\n                    c = count[j]\n                    j += c\n                if j < n and c % 2 == 0:\n                    c += 1\n                    if j < n - 1 and a[j + 1] == 2:\n                        c += 1\n                dp[i][3] = (dp[i][3] + (dp[i - 1][0] + dp[i - 1][1]) * c) % mod\n    s = 0\n    for i in range(n):\n        s = (s + dp[i][0] + dp[i][1] + dp[i][2] + dp[i][3]) % mod\n    print(s)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    dp = [0] * n\n    a = list(map(int, input().split()))\n    dp = [[0] * 4 for _ in range(n)]\n    dp[0][0] = 1\n    count = [0] * n\n    c = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            c += 1\n        else:\n            c = 0\n        count[i] = c\n    for i in range(1, n):\n        c = 0\n        dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) % mod\n        if i > 1 and a[i - 2] == 2:\n            dp[i][1] = (dp[i - 2][0] + dp[i - 2][1] + dp[i - 2][2]) % mod\n        if i < n - 1 and a[i - 1] == 2:\n            dp[i][2] = (dp[i - 1][0] + dp[i - 1][1]) % mod\n        if i < n - 2 and a[i - 1] == 2 and (a[i + 2] == 2):\n            t = (dp[i - 1][0] + dp[i - 1][1]) % mod\n            dp[i][3] = t\n            if a[i + 1] == 2:\n                c = 0\n                j = i + 3\n                if j < n:\n                    c = count[j]\n                    j += c\n                if j < n and c % 2 == 0:\n                    c += 1\n                    if j < n - 1 and a[j + 1] == 2:\n                        c += 1\n                dp[i][3] = (dp[i][3] + (dp[i - 1][0] + dp[i - 1][1]) * c) % mod\n    s = 0\n    for i in range(n):\n        s = (s + dp[i][0] + dp[i][1] + dp[i][2] + dp[i][3]) % mod\n    print(s)", "test = int(input())\nfor _ in range(test):\n    num = int(input())\n    a = [int(i) for i in input().split()]\n    if num < 3:\n        print(num)\n    else:\n        b = 2\n        c = 1\n        d = 0\n        e = a[-1] - 1\n        f = a[-1] * (a[-2] - 1)\n        ans = 0\n        q = 0\n        for i in range(3, num + 1):\n            if a[-i] == 1:\n                ans = b + 1\n                q = 0\n            else:\n                if a[1 - i] == 1:\n                    ans = 1 + b + c\n                else:\n                    ans = 1 + b + c + d\n                ans += e\n                if e % 2 == 0:\n                    if e < i - 2:\n                        ans += 1\n                    if e < i - 3 and a[e - i + 3] == 2:\n                        ans += 1\n                q = f + 1\n            e = f\n            f = q\n            d = c\n            c = b\n            b = ans % (10 ** 9 + 7)\n        print(b % (10 ** 9 + 7))", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    skill = list(map(int, input().split()))\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(2)\n    else:\n        pair = {n - 3: skill[n - 3], n - 2: 1, n - 1: 0}\n        for i in range(n - 4, -1, -1):\n            pair[i] = 1\n            if skill[i] == 2:\n                pair[i] += 1\n            if skill[i] == 2 and skill[i + 3] == 2:\n                pair[i] += pair[i + 2]\n        arr1 = {n - 2: 2, n - 1: 1}\n        arr2 = {n - 2: 3, n - 1: 2}\n        if skill[-1] == 2:\n            arr2[n - 2] += 1\n        if skill[-3] == 2:\n            arr2[n - 2] += 1\n        for i in range(n - 3, -1, -1):\n            arr1[i] = 1 + arr1[i + 1] % M\n            if skill[i] == 2:\n                arr1[i] += arr2[i + 2] % M\n            arr2[i] = 2 + arr1[i + 1] % M\n            if skill[i] == 2:\n                arr2[i] += arr2[i + 2] % M\n            if skill[i - 1] == 2:\n                arr2[i] += arr1[i + 1] % M\n            if skill[i + 1] == 2:\n                arr2[i] += pair[i] % M\n        print(arr1[0] % M)", "MOD = 10 ** 9 + 7\n\ndef get_input_line():\n    return input()\n\ndef is_valid(dog, dogs):\n    return 0 <= dog < len(dogs)\n\ndef clone(my_list):\n    return [_ for _ in my_list]\n\ndef solve_1(dogs, visited, current_dog, path, paths):\n    if not is_valid(current_dog, dogs) or visited[current_dog]:\n        return 0\n    visited[current_dog] = 1\n    path += str(current_dog + 1)\n    paths_count = 1\n    paths.append(path)\n    paths_count += solve_1(dogs, clone(visited), current_dog - 1, path, paths) % MOD\n    paths_count += solve_1(dogs, clone(visited), current_dog + 1, path, paths) % MOD\n    if dogs[current_dog] == 2:\n        paths_count += solve_1(dogs, clone(visited), current_dog - 2, path, paths) % MOD\n        paths_count += solve_1(dogs, clone(visited), current_dog + 2, path, paths) % MOD\n    return paths_count % MOD\n\ndef solve_2(numbers):\n    if len(numbers) == 1:\n        return 1\n    paths = 2\n    (a, b, c, d, e, f, g) = (1, 1, 0, 1, 0, 1, 1)\n    (new_a, new_b, new_c, new_d, new_e, new_f, new_g) = (0, 0, 0, 0, 0, 0, 0)\n    prev2 = numbers[0]\n    prev1 = numbers[1]\n    for number in numbers[2:]:\n        if prev2 == prev1 == number == 2:\n            paths += 2 * a + 2 * b - 2 * c - d + e + f - g\n            paths = paths % MOD\n            new_a = (b + a - c) % MOD\n            new_b = (a + b) % MOD\n            new_c = (a - c) % MOD\n            new_d = b % MOD\n            new_e = (a - c + f - d) % MOD\n            new_f = (2 * b + e - c - g) % MOD\n            new_g = (b + c) % MOD\n        if prev2 == prev1 == 2 and number == 1:\n            paths += 2 * a + b - c - d + f\n            paths = paths % MOD\n            new_a = (b + a - c) % MOD\n            new_b = (a + b) % MOD\n            new_c = (a - c) % MOD\n            new_d = b % MOD\n            new_e = (a - c + f - d) % MOD\n            new_f = b % MOD\n            new_g = (b + c) % MOD\n        if prev2 == prev1 == 1 and number == 1:\n            paths += b\n            paths = paths % MOD\n            new_a = b % MOD\n            new_b = b % MOD\n            new_c = 0\n            new_d = b % MOD\n            new_e = 0\n            new_f = b % MOD\n            new_g = b % MOD\n        if prev2 == prev1 == 1 and number == 2:\n            paths += 2 * b - g\n            paths = paths % MOD\n            new_a = b % MOD\n            new_b = b % MOD\n            new_c = 0\n            new_d = b % MOD\n            new_e = 0\n            new_f = (2 * b - g) % MOD\n            new_g = b % MOD\n        if prev2 == 2 and prev1 == 1 and (number == 1):\n            paths += 2 * a + b - c\n            paths = paths % MOD\n            new_a = (b + a - c) % MOD\n            new_b = (a + b) % MOD\n            new_c = (a - c) % MOD\n            new_d = b % MOD\n            new_e = (a - c) % MOD\n            new_f = b % MOD\n            new_g = (b + c) % MOD\n        if prev2 == 2 and prev1 == 1 and (number == 2):\n            paths += 2 * a + 2 * b - 2 * c + e - g\n            paths = paths % MOD\n            new_a = (b + a - c) % MOD\n            new_b = (a + b) % MOD\n            new_c = (a - c) % MOD\n            new_d = b % MOD\n            new_e = (a - c) % MOD\n            new_f = (2 * b + e - c - g) % MOD\n            new_g = (b + c) % MOD\n        if prev2 == 1 and prev1 == 2 and (number == 1):\n            paths += b\n            paths = paths % MOD\n            new_a = b % MOD\n            new_b = b % MOD\n            new_c = 0\n            new_d = b % MOD\n            new_e = 0 % MOD\n            new_f = b % MOD\n            new_g = b % MOD\n        if prev2 == 1 and prev1 == 2 and (number == 2):\n            paths += 2 * b - g\n            paths = paths % MOD\n            new_a = b % MOD\n            new_b = b % MOD\n            new_c = 0\n            new_d = b % MOD\n            new_e = 0\n            new_f = (2 * b - g) % MOD\n            new_g = b % MOD\n        (a, b, c, d, e, f, g) = (new_a, new_b, new_c, new_d, new_e, new_f, new_g)\n        prev2 = prev1\n        prev1 = number\n    return paths\n\ndef main():\n    test_count = int(get_input_line())\n    for i in range(test_count):\n        _ = int(get_input_line())\n        dogs = list(map(int, get_input_line().split()))\n        print(solve_2(dogs))\nmain()", "LIMIT = 10 ** 9 + 7\n\ndef paths(dogs, used, cur):\n    if cur in used or cur < 0 or cur >= len(dogs):\n        return 0\n    dog = dogs[cur]\n    if dog == 1:\n        l = paths(dogs, used | {cur}, cur + 1)\n        r = paths(dogs, used | {cur}, cur - 1)\n        return l + r + 1\n    else:\n        ll = paths(dogs, used | {cur}, cur + 2)\n        rr = paths(dogs, used | {cur}, cur - 2)\n        l = paths(dogs, used | {cur}, cur + 1)\n        r = paths(dogs, used | {cur}, cur - 1)\n        return ll + rr + l + r + 1\n\ndef get_multis(dogs):\n    multis = [0] * len(dogs)\n    cur = 1\n    ahead = 0\n    while cur < len(dogs):\n        score = 0\n        if multis[cur] == 0 and dogs[cur - 1] == 2:\n            ahead = 1\n            twos = 0\n            while cur + ahead < len(dogs):\n                if dogs[cur + ahead] == 1:\n                    break\n                else:\n                    twos += 1\n                ahead += 1\n            if cur + ahead + 1 >= len(dogs):\n                if cur + ahead >= len(dogs):\n                    score = twos\n                else:\n                    score = twos + (twos + 1) % 2\n            elif dogs[cur + ahead + 1] == 1:\n                score = twos + (twos + 1) % 2\n            else:\n                score = twos + (twos + 1) % 2 * 2\n            update = cur\n            while score > 0:\n                multis[update] = score\n                update += 2\n                score -= 2\n        cur += 1\n    return multis\n\ndef paths_dp(dogs):\n    multis = get_multis(dogs)\n    twoS = dogs[0] == 2\n    twoR = 1 if twoS else 0\n    ret = 1\n    oneS = dogs[1] == 2\n    oneL = 1\n    oneR = 0\n    if oneS:\n        oneR = 1\n        if twoS:\n            oneR = 2\n    ret += 1 + multis[1]\n    for (index, dog) in zip(range(2, len(dogs)), dogs[2:]):\n        curS = dog == 2\n        curL = (oneL + twoR) % LIMIT\n        curR = 0\n        if curS:\n            curR += curL\n            if oneS:\n                curR += oneL\n        val = (curL + multis[index] * oneL) % LIMIT\n        ret = ret + val\n        twoR = oneR\n        oneR = curR\n        oneL = curL\n        oneS = curS\n    return ret % LIMIT\nfor _ in range(int(input())):\n    input()\n    dogs = list(map(int, input().split()))\n    if len(dogs) < 2:\n        ret = len(dogs)\n    else:\n        ret = paths_dp(dogs)\n    print(ret)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    arr = [int(y) for y in input().split()]\n    if n == 1:\n        print(1)\n        continue\n    x = 1\n    x_prev = 0\n    paths = 2\n    ex = 1\n    ex_prev = 1\n    ex_prev2 = 0\n    sprev_2 = 2\n    ptx_xprev = 0\n    ptxprev_x = 1\n    for i in range(2, n):\n        if arr[x_prev] == 1:\n            if arr[i] == 1:\n                ptx_xnext = ex\n                ptxnext_x = 0\n                ex_next = ex\n                paths = (paths + ptx_xnext) % 1000000007\n            else:\n                ptx_xnext = (ex + ptx_xprev) % 1000000007\n                ptxnext_x = 0\n                ex_next = ex\n                paths = (paths + ptx_xnext) % 1000000007\n        elif arr[i] == 1:\n            ptxnext_x = ptxprev_x\n            ptx_xnext = ex\n            ex_next = (ex + ex_prev) % 1000000007\n            if sprev_2 == 2:\n                ex_next = (ex_next + ex_prev2) % 1000000007\n            paths = (paths + ptx_xnext + ptxnext_x + ex_next - ex) % 1000000007\n        else:\n            ptxnext_x = ptxprev_x\n            ptx_xnext = (ex + ptx_xprev) % 1000000007\n            ex_next = (ex + ex_prev) % 1000000007\n            if sprev_2 == 2:\n                ex_next = (ex_next + ex_prev2) % 1000000007\n            paths = (paths + ptx_xnext + ptxnext_x + ex_next - ex) % 1000000007\n        ex_prev2 = ex_prev\n        ex_prev = ex\n        ex = ex_next\n        ptx_xprev = ptxnext_x\n        ptxprev_x = ptx_xnext\n        sprev_2 = arr[x_prev]\n        x_prev = x\n        x = i\n    print(paths)", "MOD = 10 ** 9 + 7\nimport random\nfor t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 2:\n        print(2)\n        continue\n    if n == 1:\n        print(1)\n        continue\n    first = [1, 1, 1]\n    second = [1, 1, 1]\n    if arr[-3] == 2:\n        first[1] = 2\n        first[2] = 2\n    if arr[-1] == 2:\n        second[0] = 2\n    if arr[-3] == 2:\n        second[2] = 2\n    onlyfrom2 = 1\n    s = (n - 3) % 2\n    temp1 = [1, 0, 0]\n    temp2 = [0, 1, 0]\n    i = n - 4\n    while i > 0:\n        j = i - 1\n        temp1[1] += 1\n        temp1[2] += sum(first) + sum(second) * (arr[i] - 1)\n        temp1[2] += sum(first) * (arr[j] - 1)\n        temp1[1] += (first[0] + first[1] * (arr[i + 2] - 1)) * (arr[j] - 1)\n        temp1[2] += (1 + onlyfrom2) * (arr[j] - 1) * (arr[i] - 1)\n        onlyfrom2 = sum(first) + sum(second) * (arr[i] - 1)\n        temp2[0] += 1\n        temp2[2] += sum(first) + sum(second) * (arr[i] - 1)\n        temp2[2] += sum(first) * (arr[j] - 1)\n        temp2[0] += (first[0] + second[0] * (arr[i] - 1)) * (arr[i + 1] - 1)\n        first = [i % MOD for i in temp1]\n        second = [i % MOD for i in temp2]\n        temp1 = [1, 0, 0]\n        temp2 = [0, 1, 0]\n        i -= 2\n    if s == 1:\n        ans = 1 + sum(first) + sum(second) * (arr[0] - 1)\n    else:\n        ans = sum(first)\n    print(ans % MOD)", "import math\nimport os\nimport random\nimport re\nimport sys\nMOD = 10 ** 9 + 7\n\ndef check(i, a, used, counts, solution, solutions):\n    used[i] = True\n    counts[i] += 1\n    solution = solution + [i + 1]\n    solutions.append(solution)\n    dirs = [-1, 1]\n    if a[i] > 1:\n        dirs.extend([-2, 2])\n    for d in dirs:\n        j = i + d\n        if 0 <= j < len(a) and (not used[j]):\n            check(j, a, used, counts, solution, solutions)\n    used[i] = False\n    solution = solution[:-1]\n\ndef solve(a):\n    n = len(a)\n    l = [[0, 0] for _ in range(n)]\n    l[0][0] = 1\n    for i in range(1, n):\n        l[i][0] = (l[i - 1][0] + ((l[i - 2][0] + l[i - 2][1]) % MOD if i - 2 >= 0 and a[i - 2] > 1 else 0)) % MOD\n        l[i][1] = l[i - 1][0] if i + 1 < n and a[i - 1] > 1 else 0\n    r = [[0, 0] for _ in range(n)]\n    for i in range(n - 2, -1, -1):\n        r[i][0] = 1 if a[i + 1] > 1 else 0\n        r[i][1] = r[i + 2][0] + r[i + 2][1] + 1 if i + 2 < n and a[i] > 1 and (a[i + 1] > 1) else 0\n    res = 0\n    d = [0] * n\n    d[0] = 1\n    for i in range(1, n):\n        left = l[i][0]\n        left = (l[i][0] + l[i][1]) % MOD\n        right = (r[i + 1][0] + r[i + 1][1]) % MOD if a[i - 1] > 1 and i + 1 < n else 0\n        d[i] = (left + l[i - 1][0] * right % MOD) % MOD\n    res = 0\n    for i in range(n):\n        res = (res + d[i]) % MOD\n    return res\ntry:\n    t = int(input())\nexcept:\n    pass\nelse:\n    for _ in range(t):\n        solutions = []\n        n = int(input())\n        a = list(map(int, input().split()))\n        print(solve(a))", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    dp = [0] * n\n    a = list(map(int, input().split()))\n    dp = [[0] * 4 for _ in range(n)]\n    dp[0][0] = 1\n    count = [0] * n\n    c = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            c += 1\n        else:\n            c = 0\n        count[i] = c\n    for i in range(1, n):\n        c = 0\n        dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) % mod\n        if i > 1 and a[i - 2] == 2:\n            dp[i][1] = (dp[i - 2][0] + dp[i - 2][1] + dp[i - 2][2]) % mod\n        if i < n - 1 and a[i - 1] == 2:\n            dp[i][2] = (dp[i - 1][0] + dp[i - 1][1]) % mod\n        if i < n - 2 and a[i - 1] == 2 and (a[i + 2] == 2):\n            t = (dp[i - 1][0] + dp[i - 1][1]) % mod\n            dp[i][3] = t\n            if a[i + 1] == 2:\n                c = 0\n                j = i + 3\n                if j < n:\n                    c = count[j]\n                    j += c\n                if j < n and c % 2 == 0:\n                    c += 1\n                    if j < n - 1 and a[j + 1] == 2:\n                        c += 1\n                dp[i][3] = (dp[i][3] + (dp[i - 1][0] + dp[i - 1][1]) * c) % mod\n    s = 0\n    for i in range(n):\n        s = (s + dp[i][0] + dp[i][1] + dp[i][2] + dp[i][3]) % mod\n    print(s)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    dp = [0] * n\n    a = list(map(int, input().split()))\n    dp = [[0] * 4 for _ in range(n)]\n    dp[0][0] = 1\n    count = [0] * n\n    c = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            c += 1\n        else:\n            c = 0\n        count[i] = c\n    for i in range(1, n):\n        c = 0\n        dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) % mod\n        if i > 1 and a[i - 2] == 2:\n            dp[i][1] = (dp[i - 2][0] + dp[i - 2][1] + dp[i - 2][2]) % mod\n        if i < n - 1 and a[i - 1] == 2:\n            dp[i][2] = (dp[i - 1][0] + dp[i - 1][1]) % mod\n        if i < n - 2 and a[i - 1] == 2 and (a[i + 2] == 2):\n            t = (dp[i - 1][0] + dp[i - 1][1]) % mod\n            dp[i][3] = t\n            if a[i + 1] == 2:\n                c = 0\n                j = i + 3\n                if j < n:\n                    c = count[j]\n                    j += c\n                if j < n and c % 2 == 0:\n                    c += 1\n                    if j < n - 1 and a[j + 1] == 2:\n                        c += 1\n                dp[i][3] = (dp[i][3] + (dp[i - 1][0] + dp[i - 1][1]) * c) % mod\n    s = 0\n    for i in range(n):\n        s = (s + dp[i][0] + dp[i][1] + dp[i][2] + dp[i][3]) % mod\n    print(s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    if n < 3:\n        print(n)\n    else:\n        a1 = 2\n        a2 = 1\n        a3 = 0\n        c2 = a[-1] - 1\n        c1 = a[-1] * (a[-2] - 1)\n        tem = 0\n        te = 0\n        for i in range(3, n + 1):\n            if a[-i] == 1:\n                tem = a1 + 1\n                te = 0\n            else:\n                if a[1 - i] == 1:\n                    tem = 1 + a1 + a2\n                else:\n                    tem = 1 + a1 + a2 + a3\n                tem += c2\n                if c2 % 2 == 0:\n                    if c2 < i - 2:\n                        tem += 1\n                    if c2 < i - 3 and a[c2 - i + 3] == 2:\n                        tem += 1\n                te = c1 + 1\n            c2 = c1\n            c1 = te\n            a3 = a2\n            a2 = a1\n            a1 = tem % (10 ** 9 + 7)\n        print(a1 % (10 ** 9 + 7))", "M = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    gwalani = [[0 for _ in range(n + 1)] for __ in range(4)]\n    even = 0\n    ans = 0\n    odd = 0\n    eveOne = 0\n    oddOne = 0\n    if n == 1:\n        print(1)\n        continue\n    gwalani[0][2] = gwalani[0][1] = 1\n    for i in range(3, n + 1):\n        gwalani[0][i] = (gwalani[0][i - 1] + gwalani[1][i - 1]) % M\n        if a[i - 3] > 1:\n            gwalani[1][i] = (gwalani[0][i - 2] + gwalani[1][i - 2] + gwalani[2][i - 2]) % M\n        if a[i - 3] > 1:\n            gwalani[2][i - 1] += (gwalani[0][i - 2] + gwalani[1][i - 2]) % M\n            gwalani[2][i - 1] %= M\n        if a[i - 3] > 1 and i > 4 and (a[i - 2] > 1) and (a[i - 5] > 1):\n            if i % 2 == 1:\n                even = (even + gwalani[0][i - 4] + gwalani[1][i - 4]) % M\n                ans += even\n            else:\n                odd = (odd + gwalani[0][i - 4] + gwalani[1][i - 4]) % M\n                ans += odd\n        elif i % 2 == 1:\n            even = 0\n        else:\n            odd = 0\n        if i > 3 and a[i - 1] > 1 and (a[i - 4] > 1):\n            if i % 2 == 0:\n                eveOne += gwalani[0][i - 3] + gwalani[1][i - 3]\n                eveOne %= M\n                ans += eveOne\n                ans %= M\n            else:\n                oddOne += gwalani[0][i - 3] + gwalani[1][i - 3]\n                oddOne %= M\n                ans += oddOne\n                ans %= M\n        elif i % 2 == 0:\n            eveOne = 0\n        else:\n            oddOne = 0\n    for i in range(4):\n        for j in range(1, n + 1):\n            ans = (ans + gwalani[i][j]) % M\n    print(ans)", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        dogs = list(map(int, input().split()))\n        print(solve(dogs, n))\n\ndef compute_muls(dogs, n):\n    muls = [0 for _ in range(n)]\n    muls[n - 2] = 1 if dogs[n - 3] == 2 else 0\n    curr_streak = 0\n    if dogs[n - 2] == 2:\n        curr_streak += 1\n        if dogs[n - 1] == 2:\n            curr_streak += 1\n    for i in range(n - 3, 0, -1):\n        if dogs[i - 1] == 1:\n            if dogs[i] == 2:\n                curr_streak += 1\n            else:\n                curr_streak = 0\n            continue\n        if curr_streak % 2 == 0:\n            muls[i] = curr_streak + (1 if i + curr_streak < n - 1 else 0)\n            if i + curr_streak < n - 2 and dogs[i + curr_streak + 2] == 2:\n                muls[i] += 1\n        else:\n            muls[i] = curr_streak\n        if dogs[i] == 2:\n            curr_streak += 1\n        else:\n            curr_streak = 0\n    return muls\n\ndef solve(dogs, n):\n    if n == 1 or n == 2:\n        return n\n    if n == 3:\n        if dogs[0] == 1:\n            return 3\n        return 5\n    forward_ways = [0 for _ in range(n)]\n    forward_ways[0] = 1\n    forward_ways[1] = 1\n    forward_ways[2] = 2 if dogs[0] == 2 else 1\n    for i in range(3, n):\n        forward_ways[i] = forward_ways[i - 1]\n        if dogs[i - 2] == 2:\n            forward_ways[i] += forward_ways[i - 2]\n            if dogs[i - 3] == 2:\n                forward_ways[i] += forward_ways[i - 3]\n        forward_ways[i] %= 1000000007\n    total_ways = forward_ways[:]\n    muls = compute_muls(dogs, n)\n    for i in range(1, n - 1):\n        total_ways[i] += forward_ways[i - 1] * muls[i]\n    return sum(total_ways) % 1000000007\nmain()"]