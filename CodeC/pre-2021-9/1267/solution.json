["from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    total = sum(a)\n    prefix = 0\n    d = Counter()\n    for i in range(n):\n        remains = total - a[i]\n        if not remains % 2:\n            ans += d[remains // 2]\n        prefix += a[i]\n        d[prefix] += 1\n    d.clear()\n    suffix = 0\n    for i in range(n - 1, -1, -1):\n        remains = total - a[i]\n        if not remains % 2:\n            ans += d[remains // 2]\n        suffix += a[i]\n        d[suffix] += 1\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    total = sum(a)\n    prefix = 0\n    d = Counter()\n    for i in range(n):\n        remains = total - a[i]\n        if not remains % 2:\n            ans += d[remains // 2]\n        prefix += a[i]\n        d[prefix] += 1\n    d.clear()\n    suffix = 0\n    for i in range(n - 1, -1, -1):\n        remains = total - a[i]\n        if not remains % 2:\n            ans += d[remains // 2]\n        suffix += a[i]\n        d[suffix] += 1\n    print(ans)", "from sys import stdin\n\ndef gt(num):\n    if num:\n        return num\n    return 0\nfor __ in range(int(stdin.readline().split()[0])):\n    n = int(stdin.readline().split()[0])\n    a = list(map(int, stdin.readline().split()))\n    cnta = dict()\n    cnta.setdefault(0)\n    cntb = dict()\n    cntb.setdefault(0)\n    for i in a:\n        cnta[i] = gt(cnta.get(i)) + 1\n    asum = 0\n    bsum = sum(a)\n    ans = 0\n    for i in range(n - 1):\n        asum += a[i]\n        bsum -= a[i]\n        cnta[a[i]] = gt(cnta.get(a[i])) - 1\n        cntb[a[i]] = gt(cntb.get(a[i])) + 1\n        ans += gt(cnta.get(bsum - asum))\n        ans += gt(cntb.get(asum - bsum))\n    print(ans)", "from collections import Counter\n\ndef result(a, n):\n    ans = 0\n    total = sum(a)\n    prefix = 0\n    d = Counter()\n    for i in range(n):\n        remains = total - a[i]\n        if not remains % 2:\n            ans += d[remains // 2]\n        prefix += a[i]\n        d[prefix] += 1\n    d.clear()\n    suffix = 0\n    for i in range(n - 1, -1, -1):\n        remains = total - a[i]\n        if not remains % 2:\n            ans += d[remains // 2]\n        suffix += a[i]\n        d[suffix] += 1\n    return ans\nqueries = []\nfor _ in range(int(input())):\n    n = input()\n    queries.append(list(map(int, input().split())))\nfor q in queries:\n    print(result(q, len(q)))", "def abc(l, val):\n    i = 0\n    j = len(l) - 1\n    s = -1\n    while i <= j:\n        mid = i + (j - i) // 2\n        if l[mid] < val:\n            s = mid\n            i = mid + 1\n        else:\n            j = mid - 1\n    return s + 1\n\ndef bca(l, val):\n    i = 0\n    j = len(l) - 1\n    s = len(l)\n    while i <= j:\n        mid = i + (j - i) // 2\n        if l[mid] >= val:\n            s = mid\n            j = mid - 1\n        else:\n            i = mid + 1\n    m = 0\n    return len(l) - s\nimport random\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = sum(l)\n    ans = 0\n    k = [l[0]]\n    for i in range(1, n):\n        k.append(k[-1] + l[i])\n    d = {}\n    for i in range(n):\n        try:\n            d[k[i]] += [i]\n        except:\n            d[k[i]] = [i]\n    for i in range(n):\n        s = x - l[i]\n        if not s % 2:\n            try:\n                c = d[s // 2]\n                ans += abc(c, i)\n            except:\n                pass\n            try:\n                c = d[s // 2 + l[i]]\n                ans += bca(c, i)\n                if k[-1] == s // 2 + l[i]:\n                    ans -= 1\n            except:\n                pass\n    print(ans)", "from collections import defaultdict\nt = int(input())\nqueries = []\nwhile t:\n    t -= 1\n    n = int(input())\n    queries.append(list(map(int, input().split())))\n\ndef solve(a, n):\n    su = sum(a)\n    mp = defaultdict(int)\n    s = 0\n    ans = 0\n    for i in range(n):\n        if (su - a[i]) % 2 == 0:\n            ans += mp[(su - a[i]) // 2]\n        s += a[i]\n        mp[s] += 1\n    mp.clear()\n    s = 0\n    for i in range(n - 1, -1, -1):\n        if (su - a[i]) % 2 == 0:\n            ans += mp[(su - a[i]) // 2]\n        s += a[i]\n        mp[s] += 1\n    return ans\nfor i in queries:\n    print(solve(i, len(i)))", "import bisect\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    total = sum(a)\n    diff = {}\n    inter_sum = 0\n    for i in range(n - 1):\n        if a[i] == 0:\n            continue\n        inter_sum += a[i]\n        c = inter_sum - (total - inter_sum)\n        if c in diff.keys():\n            diff[c].append(i)\n        else:\n            diff[c] = [i]\n    count = 0\n    for i in range(n):\n        if -a[i] in diff.keys():\n            ans = bisect.bisect_left(diff[-a[i]], i)\n            count += ans\n        if a[i] in diff.keys():\n            ans = bisect.bisect_left(diff[a[i]], i)\n            count += len(diff[a[i]]) - ans\n    print(count)", "from sys import stdin\n\ndef gt(num):\n    if num:\n        return num\n    return 0\nfor __ in range(int(stdin.readline().split()[0])):\n    n = int(stdin.readline().split()[0])\n    a = list(map(int, stdin.readline().split()))\n    cnta = dict()\n    cnta.setdefault(0)\n    cntb = dict()\n    cntb.setdefault(0)\n    for i in a:\n        cnta[i] = gt(cnta.get(i)) + 1\n    asum = 0\n    bsum = sum(a)\n    ans = 0\n    for i in range(n - 1):\n        asum += a[i]\n        bsum -= a[i]\n        cnta[a[i]] = gt(cnta.get(a[i])) - 1\n        cntb[a[i]] = gt(cntb.get(a[i])) + 1\n        ans += gt(cnta.get(bsum - asum))\n        ans += gt(cntb.get(asum - bsum))\n    print(ans)"]