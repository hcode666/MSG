["for _ in range(int(input())):\n    n = int(input())\n    d = list(map(int, input().split()))\n    tot = ans = 0\n    for i in range(0, n - 1):\n        tot += d[i]\n        ans += abs(tot)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    d = list(map(int, input().split()))\n    tot = ans = 0\n    for i in range(0, n - 1):\n        tot += d[i]\n        ans += abs(tot)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    d = list(map(int, input().split()))\n    tot = ans = 0\n    for i in range(0, n - 1):\n        tot += d[i]\n        ans += abs(tot)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    d = list(map(int, input().split()))\n    tot = ans = 0\n    for i in range(0, n - 1):\n        tot += d[i]\n        ans += abs(tot)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    d = list(map(int, input().split()))\n    tot = ans = 0\n    for i in range(0, n - 1):\n        tot += d[i]\n        ans += abs(tot)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    d = list(map(int, input().split()))\n    tot = ans = 0\n    for i in range(0, n - 1):\n        tot += d[i]\n        ans += abs(tot)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    d = list(map(int, input().split()))\n    ans = 0\n    c = 0\n    for j in d:\n        ans += abs(c)\n        c += j\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    d = list(map(int, input().split()))\n    ans = 0\n    c = 0\n    for j in d:\n        ans += abs(c)\n        c += j\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    d = list(map(int, input().split()))\n    ans = 0\n    c = 0\n    for j in d:\n        ans += abs(c)\n        c += j\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    d = list(map(int, input().split()))\n    ans = 0\n    c = 0\n    for j in d:\n        ans += abs(c)\n        c += j\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    ans = 0\n    xd = 0\n    for p in x:\n        ans += abs(xd)\n        xd += p\n    print(ans)", "for _ in range(int(input())):\n    N = int(input())\n    st = input().split()\n    r = 0\n    d = 0\n    for x in st:\n        r += abs(d)\n        d += int(x)\n    print(r)", "for _ in range(int(input())):\n    N = int(input())\n    st = input().split()\n    r = 0\n    d = 0\n    for x in st:\n        r += abs(d)\n        d += int(x)\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    curr = 0\n    ans = 0\n    for x in a:\n        curr += x\n        ans += abs(curr)\n    print(ans)", "for t in range(int(input())):\n    nn = int(input())\n    a = list(map(int, input().split()))\n    p = []\n    lp = 0\n    n = []\n    ln = 0\n    for i in range(nn):\n        if a[i] < 0:\n            n.append([i, -a[i]])\n            ln += 1\n        elif a[i] > 0:\n            p.append([i, a[i]])\n            lp += 1\n    ans = 0\n    p1 = 0\n    p2 = 0\n    while p1 < lp and p2 < ln:\n        if p[p1][1] < n[p2][1]:\n            ans += abs(p[p1][0] - n[p2][0]) * p[p1][1]\n            n[p2][1] -= p[p1][1]\n            p1 += 1\n            continue\n        elif p[p1][1] > n[p2][1]:\n            ans += abs(p[p1][0] - n[p2][0]) * n[p2][1]\n            p[p1][1] -= n[p2][1]\n            p2 += 1\n        elif p[p1][1] == n[p2][1]:\n            ans += abs(p[p1][0] - n[p2][0]) * p[p1][1]\n            p1 += 1\n            p2 += 1\n    print(ans)", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    total = 0\n    answer = 0\n    for i in range(n):\n        total += numbers[i]\n        answer += abs(total)\n    print(answer)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    hu = 0\n    di = 0\n    tot = 0\n    while hu < n and di < n:\n        while arr[hu] <= 0:\n            hu += 1\n            if hu >= n:\n                break\n        while arr[di] >= 0:\n            di += 1\n            if di >= n:\n                break\n        if hu >= n or di >= n:\n            break\n        if arr[hu] <= abs(arr[di]):\n            tot += arr[hu] * abs(hu - di)\n            arr[di] += arr[hu]\n            arr[hu] = 0\n        else:\n            tot += abs(arr[di]) * abs(hu - di)\n            arr[hu] += arr[di]\n            arr[di] = 0\n    print(tot)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    grass = 0\n    for i in range(n):\n        if arr[i] != 0:\n            grass += abs(arr[i])\n            arr[i + 1] += arr[i]\n            arr[i] = 0\n    print(grass)", "import sys\nt = int(sys.stdin.readline())\nfor i in range(0, t):\n    n = int(sys.stdin.readline())\n    D = sys.stdin.readline().split()\n    c = 0\n    k = 0\n    for i in range(0, n):\n        c += int(D[i])\n        k += abs(c)\n    print(k)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    d = list(map(int, input().split()))\n    l1 = []\n    l2 = []\n    for j in range(n):\n        l = []\n        l.append(d[j])\n        l.append(j)\n        if d[j] >= 0:\n            l1.append(l)\n        else:\n            l2.append(l)\n    n1 = len(l1)\n    n2 = len(l2)\n    a = 0\n    b = 0\n    ans = 0\n    while a < n1 and b < n2:\n        if -l2[b][0] > l1[a][0]:\n            l2[b][0] = l2[b][0] + l1[a][0]\n            ans = ans + l1[a][0] * abs(l2[b][1] - l1[a][1])\n            a = a + 1\n        elif -l2[b][0] == l1[a][0]:\n            ans = ans + l1[a][0] * abs(l2[b][1] - l1[a][1])\n            b = b + 1\n            a = a + 1\n        elif -l2[b][0] < l1[a][0]:\n            l1[a][0] = l1[a][0] + l2[b][0]\n            ans = ans + -l2[b][0] * abs(l2[b][1] - l1[a][1])\n            b = b + 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    d = list(map(int, input().split()))\n    l1 = []\n    l2 = []\n    for j in range(n):\n        l = []\n        l.append(d[j])\n        l.append(j)\n        if d[j] >= 0:\n            l1.append(l)\n        else:\n            l2.append(l)\n    n1 = len(l1)\n    n2 = len(l2)\n    a = 0\n    b = 0\n    ans = 0\n    while a < n1 and b < n2:\n        if -l2[b][0] > l1[a][0]:\n            l2[b][0] = l2[b][0] + l1[a][0]\n            ans = ans + l1[a][0] * abs(l2[b][1] - l1[a][1])\n            a = a + 1\n        elif -l2[b][0] == l1[a][0]:\n            ans = ans + l1[a][0] * abs(l2[b][1] - l1[a][1])\n            b = b + 1\n            a = a + 1\n        elif -l2[b][0] < l1[a][0]:\n            l1[a][0] = l1[a][0] + l2[b][0]\n            ans = ans + -l2[b][0] * abs(l2[b][1] - l1[a][1])\n            b = b + 1\n    print(ans)", "cases = int(input())\nfor i in range(cases):\n    vilnos = int(input())\n    vills = [int(j) for j in input().split(' ')]\n    grass = abs(vills[0])\n    for j in range(1, vilnos):\n        vills[j] += vills[j - 1]\n        grass += abs(vills[j])\n    print(grass)", "import sys\nimport math\nfrom time import time\nfrom itertools import permutations, combinations\nimport collections\nimport functools\nfrom fractions import gcd, Fraction\nimport string\nimport operator\nimport bisect\n\nclass timed(object):\n\n    def __init__(self, func):\n        self.func = func\n\n    def __call__(self, *args):\n        t1 = time()\n        ret = self.func(*args)\n        dif_time = time() - t1\n        print('%s: returned %s in %f seconds' % (self.func.__name__, ret, dif_time))\n        return ret\n\ndef comp(f1, f2, *args):\n    t1 = time()\n    r1 = f1(*args) if f1 is not None else None\n    t2 = time()\n    r2 = f2(*args) if f2 is not None else None\n    t3 = time()\n    res = '%5s: %s in %f\\n%5s: %s in %f' % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)\n    if r1 != r2:\n        dr = '!! DIFFERENT RESULTS !!'\n        res = dr + '\\n' + res + '\\n' + dr\n    print(res)\n\ndef alg2(vill):\n    length = len(vill)\n    moves = 0\n    cur = 0\n    for i in range(length):\n        cur += vill[i]\n        moves += abs(cur)\n    return moves\n\ndef alg(vill):\n    length = len(vill)\n    moves = 0\n    for i in range(length):\n        while vill[i] != 0:\n            for j in range(i + 1, length):\n                dist = j - i\n                if vill[i] < 0 and vill[j] > 0:\n                    if -vill[i] <= vill[j]:\n                        vill[j] += vill[i]\n                        moves -= vill[i] * dist\n                        vill[i] = 0\n                    else:\n                        vill[i] += vill[j]\n                        moves += vill[j] * dist\n                        vill[j] = 0\n                if vill[i] > 0 and vill[j] < 0:\n                    if -vill[j] <= vill[i]:\n                        vill[i] += vill[j]\n                        moves -= vill[j] * dist\n                        vill[j] = 0\n                    else:\n                        vill[j] += vill[i]\n                        moves += vill[i] * dist\n                        vill[i] = 0\n    return moves\n\ndef main():\n    data = sys.stdin\n    nb = int(data.readline())\n    for icase in range(nb):\n        nb_villages = int(data.readline().strip())\n        vill = list(map(int, data.readline().split()))\n        res = alg2(vill)\n        print(res)\nmain()", "import sys\n__author__ = 'zumzoom'\nt = int(sys.stdin.readline().split()[0])\nfor _ in range(t):\n    n = int(sys.stdin.readline().split()[0])\n    A = [int(i) for i in sys.stdin.readline().split()]\n    cur_dino = -1\n    cur_vill = -1\n    for i in range(n):\n        if A[i] > 0:\n            cur_vill = i\n            break\n    for i in range(n):\n        if A[i] < 0:\n            cur_dino = i\n            break\n    ans = 0\n    while cur_vill < n and cur_dino < n:\n        while A[cur_vill] > 0 > A[cur_dino]:\n            cur_min = min(A[cur_vill], -A[cur_dino])\n            A[cur_vill] -= cur_min\n            A[cur_dino] += cur_min\n            ans += cur_min * abs(cur_vill - cur_dino)\n        while cur_vill < n and A[cur_vill] <= 0:\n            cur_vill += 1\n        while cur_dino < n and A[cur_dino] >= 0:\n            cur_dino += 1\n    print(ans)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    (ans, tmp) = (0, 0)\n    for i in range(n - 1):\n        tmp += l[i]\n        ans += abs(tmp)\n    print(ans)", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    D = list(map(int, input().split()))\n    (v, d) = (0, 0)\n    while v < N and D[v] <= 0:\n        v += 1\n    while d < N and D[d] >= 0:\n        d += 1\n    ans = 0\n    while v < N:\n        assert d < N\n        if D[v] + D[d] > 0:\n            D[v] += D[d]\n            ans += abs((v - d) * D[d])\n            D[d] = 0\n            d += 1\n        elif D[v] + D[d] < 0:\n            D[d] += D[v]\n            ans += abs(v - d) * D[v]\n            D[v] = 0\n            v += 1\n        else:\n            ans += D[v] * abs(v - d)\n            (D[v], D[d]) = (0, 0)\n            v += 1\n            d += 1\n        while v < N and D[v] <= 0:\n            v += 1\n        while d < N and D[d] >= 0:\n            d += 1\n    print(ans)", "from _collections import deque\n\ndef solve(A):\n    lP = deque([i for i in range(len(A)) if A[i] > 0])\n    lN = deque([i for i in range(len(A)) if A[i] < 0])\n    s = 0\n    for iN in lN:\n        while A[iN] < 0:\n            iP = lP[0]\n            v = A[iP]\n            if v >= abs(A[iN]):\n                s += abs(iN - iP) * abs(A[iN])\n                A[iP] -= abs(A[iN])\n                A[iN] = 0\n            else:\n                s += abs(iN - iP) * abs(A[iP])\n                A[iN] += A[iP]\n                lP.popleft()\n    return s\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    A = list(map(int, input().split()))\n    print(solve(A))", "def read_inps():\n    n = int(input())\n    arr = input().split(' ')\n    arr = [int(i) for i in arr]\n    return (n, arr)\n\ndef solve_for(n, arr):\n    grass = 0\n    lad = 0\n    j = 1\n    lad = arr[0]\n    while j < n:\n        grass = grass + abs(lad)\n        lad = lad + arr[j]\n        j += 1\n    grass = grass + abs(lad)\n    return grass\nT = int(input())\nfor i in range(T):\n    ins = read_inps()\n    print(solve_for(ins[0], ins[1]))"]