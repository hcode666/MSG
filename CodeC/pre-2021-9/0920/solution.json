["from collections import *\n\ndef fact(n):\n    if n == 0:\n        return 1\n    return n * fact(n - 1)\nfor _ in range(int(input())):\n    s = list(map(int, list(input())))\n    (p, C, ans, d) = (s.copy(), Counter(s), 1, 1)\n    p.sort()\n    for v in C.values():\n        d *= fact(v)\n    for c in s:\n        i = p.index(c)\n        ans += i * fact(len(p) - 1) // d\n        d //= C[c]\n        C[c] -= 1\n        p.pop(i)\n    print(ans)", "from collections import *\n\ndef fact(n):\n    if n == 0:\n        return 1\n    return n * fact(n - 1)\nfor _ in range(int(input())):\n    s = list(map(int, list(input())))\n    (p, C, ans, d) = (s.copy(), Counter(s), 1, 1)\n    p.sort()\n    for v in C.values():\n        d *= fact(v)\n    for c in s:\n        i = p.index(c)\n        ans += i * fact(len(p) - 1) // d\n        d //= C[c]\n        C[c] -= 1\n        p.pop(i)\n    print(ans)", "from collections import *\n\ndef fact(n):\n    if n == 0:\n        return 1\n    return n * fact(n - 1)\nfor _ in range(int(input())):\n    s = list(map(int, list(input())))\n    (p, C, ans, d) = (s.copy(), Counter(s), 1, 1)\n    p.sort()\n    for v in C.values():\n        d *= fact(v)\n    for c in s:\n        i = p.index(c)\n        ans += i * fact(len(p) - 1) // d\n        d //= C[c]\n        C[c] -= 1\n        p.pop(i)\n    print(ans)", "from collections import *\n\ndef fact(n):\n    if n == 0:\n        return 1\n    return n * fact(n - 1)\nfor _ in range(int(input())):\n    s = list(map(int, list(input())))\n    (p, C, ans, d) = (s.copy(), Counter(s), 1, 1)\n    p.sort()\n    for v in C.values():\n        d *= fact(v)\n    for c in s:\n        i = p.index(c)\n        ans += i * fact(len(p) - 1) // d\n        d //= C[c]\n        C[c] -= 1\n        p.pop(i)\n    print(ans)", "from math import *\nfrom collections import *\nf = [factorial(i) for i in range(19)]\nfor _ in range(int(input())):\n    s = list(str(int(input())))\n    (C, d, ans, m, n) = (Counter(s), 1, 1, ord(min(s)), len(s))\n    for v in C.values():\n        d *= f[v]\n    for c in s:\n        i = sum((C[chr(k)] for k in range(m, ord(c))))\n        ans += i * f[n - 1] // d\n        d //= C[c]\n        C[c] -= 1\n        n -= 1\n    print(ans)", "from collections import *\nf = [1]\nfor i in range(1, 19):\n    f += [i * f[-1]]\nfor _ in range(int(input())):\n    s = list(str(int(input())))\n    (p, C, ans, d) = (sorted(s), Counter(s), 1, 1)\n    for v in C.values():\n        d *= f[v]\n    for c in s:\n        i = p.index(c)\n        ans += i * f[len(p) - 1] // d\n        d //= C[c]\n        C[c] -= 1\n        p.pop(i)\n    print(ans)", "from math import *\nfrom collections import *\nf = [factorial(i) for i in range(0, 19)]\nfor _ in range(int(input())):\n    s = list(str(int(input())))\n    (p, C, ans, d) = (sorted(s), Counter(s), 1, 1)\n    for v in C.values():\n        d *= f[v]\n    for c in s:\n        i = p.index(c)\n        ans += i * f[len(p) - 1] // d\n        d //= C[c]\n        C[c] -= 1\n        p.pop(i)\n    print(ans)", "from collections import *\nfact = lambda n: 1 if n == 0 else n * fact(n - 1)\nfor _ in range(int(input())):\n    s = list(str(int(input())))\n    (p, C, ans, d) = (sorted(s), Counter(s), 1, 1)\n    for v in C.values():\n        d *= fact(v)\n    for c in s:\n        i = p.index(c)\n        ans += i * fact(len(p) - 1) // d\n        d //= C[c]\n        C[c] -= 1\n        p.pop(i)\n    print(ans)", "from collections import *\nfact = lambda n: 1 if n == 0 else n * fact(n - 1)\nfor _ in range(int(input())):\n    s = list(map(int, str(int(input()))))\n    (p, C, ans, d) = (sorted(s), Counter(s), 1, 1)\n    for v in C.values():\n        d *= fact(v)\n    for c in s:\n        i = p.index(c)\n        ans += i * fact(len(p) - 1) // d\n        d //= C[c]\n        C[c] -= 1\n        p.pop(i)\n    print(ans)", "from collections import *\nfact = lambda n: 1 if n == 0 else n * fact(n - 1)\nfor _ in range(int(input())):\n    s = list(map(int, list(filter(str.isdigit, input()))))\n    (p, C, ans, d) = (sorted(s), Counter(s), 1, 1)\n    for v in C.values():\n        d *= fact(v)\n    for c in s:\n        i = p.index(c)\n        ans += i * fact(len(p) - 1) // d\n        d //= C[c]\n        C[c] -= 1\n        p.pop(i)\n    print(ans)", "from collections import *\nfact = lambda n: 1 if n == 0 else n * fact(n - 1)\nfor _ in range(int(input())):\n    s = list(map(int, list(filter(str.isdigit, input()))))\n    (p, C, ans, d) = (s.copy(), Counter(s), 1, 1)\n    p.sort()\n    for v in C.values():\n        d *= fact(v)\n    for c in s:\n        i = p.index(c)\n        ans += i * fact(len(p) - 1) // d\n        d //= C[c]\n        C[c] -= 1\n        p.pop(i)\n    print(ans)", "def fact(x):\n    if x == 0 or x == 1:\n        return 1\n    p = 1\n    for i in range(1, x + 1):\n        p *= i\n    return p\n\ndef cal(n, d, rank, total, prod):\n    while True:\n        if total == 1:\n            rank[0] += 1\n            break\n        key = n // 10 ** (total - 1)\n        fval = fact(total - 1)\n        for i in d:\n            if i < key:\n                temp = prod\n                temp = temp / fact(d[i]) * fact(d[i] - 1)\n                rank[0] += fval / temp\n        prod = prod / fact(d[key]) * fact(d[key] - 1)\n        d[key] -= 1\n        if d[key] == 0:\n            d.pop(key)\n        n = n % 10 ** (total - 1)\n        total -= 1\nfor _ in range(int(input())):\n    n = int(input())\n    num = n\n    d = {}\n    total = 0\n    if n == 0:\n        print(1)\n        continue\n    while n > 0:\n        if n % 10 not in d:\n            d[n % 10] = 1\n        else:\n            d[n % 10] += 1\n        n = n // 10\n        total += 1\n    prod = 1\n    for i in d:\n        prod *= fact(d[i])\n    rank = [0]\n    cal(num, d, rank, total, prod)\n    print(int(rank[0]))", "fact = [1]\nfor i in range(1, 30):\n    fact.append(fact[i - 1] * i)\n\ndef calc_count(counts):\n    total = 0\n    mexrec = 1\n    for v in counts.values():\n        total += v\n        mexrec *= fact[v]\n    return fact[total] / mexrec\nt = int(input())\nfor ts in range(t):\n    num = int(input())\n    ncount = {}\n    snum = str(num)\n    lnum = len(snum)\n    for i in range(lnum):\n        ncount[int(snum[i])] = ncount.get(int(snum[i]), 0) + 1\n    ans = 0\n    tcount = ncount\n    for i in range(lnum):\n        dig = int(snum[i])\n        for k in ncount.keys():\n            if k < dig:\n                tcount[k] -= 1\n                ans += calc_count(tcount)\n                tcount[k] += 1\n        tcount[dig] -= 1\n        if tcount[dig] == 0:\n            del tcount[dig]\n    print(int(ans + 1))"]