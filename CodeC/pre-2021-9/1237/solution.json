["def equi(i, y, l):\n    c = 0\n    if i == 0:\n        return c\n    for x in range(1, i + 1):\n        if y != l[i - x]:\n            break\n        c = c + 1\n    return c\n\ndef palindrome(s):\n    n = len(s)\n    for i in range(int(n / 2)):\n        if s[i] != s[n - 1 - i]:\n            return (False, i)\n    return (True,)\n\ndef positions(s):\n    n = len(s)\n    if n % 2 != 0:\n        m = int((n - 1) / 2)\n        t = palindrome(s)\n        if t[0]:\n            r = equi(m, s[m], s) + 1\n            return (r, r)\n        else:\n            l = 0\n            r = 0\n            if s[m - 1] == s[m]:\n                if palindrome(s[t[1]:n - 1 - t[1]])[0]:\n                    l = equi(t[1], s[n - 1 - t[1]], s) + 1\n            if s[m] == s[m + 1]:\n                s2 = s[n - 1::-1]\n                t1 = palindrome(s2)[1]\n                if palindrome(s2[t1:n - t1 - 1])[0]:\n                    r = equi(t1, s2[n - 1 - t1], s2) + 1\n        return (l, r)\n    else:\n        m = int(n / 2)\n        if palindrome(s)[0]:\n            r = equi(m, s[m], s)\n            return (r, r + 1)\n        if s[m - 1] == s[m]:\n            s1 = s[:m] + s[m + 1:]\n            return positions(s1)\n        else:\n            s2 = s[:m - 1] + s[m:]\n            s3 = s[:m] + s[m + 1:]\n            return (positions(s2)[0], positions(s3)[1])\nt = int(input())\nr = []\nfor i in range(t):\n    s = input()\n    q = positions(s)\n    r = r + [q[0] + q[1]]\nfor i in range(t):\n    print(r[i])", "def equi(i, y, l):\n    c = 0\n    if i == 0:\n        return c\n    for x in range(1, i + 1):\n        if y != l[i - x]:\n            break\n        c = c + 1\n    return c\n\ndef palindrome(s):\n    n = len(s)\n    for i in range(int(n / 2)):\n        if s[i] != s[n - 1 - i]:\n            return (False, i)\n    return (True,)\n\ndef positions(s):\n    n = len(s)\n    if n % 2 != 0:\n        m = int((n - 1) / 2)\n        t = palindrome(s)\n        if t[0]:\n            r = equi(m, s[m], s) + 1\n            return (r, r)\n        else:\n            l = 0\n            r = 0\n            if s[m - 1] == s[m]:\n                if palindrome(s[t[1]:n - 1 - t[1]])[0]:\n                    l = equi(t[1], s[n - 1 - t[1]], s) + 1\n            if s[m] == s[m + 1]:\n                s2 = s[n - 1::-1]\n                t1 = palindrome(s2)[1]\n                if palindrome(s2[t1:n - t1 - 1])[0]:\n                    r = equi(t1, s2[n - 1 - t1], s2) + 1\n        return (l, r)\n    else:\n        m = int(n / 2)\n        if palindrome(s)[0]:\n            r = equi(m, s[m], s)\n            return (r, r + 1)\n        if s[m - 1] == s[m]:\n            s1 = s[:m] + s[m + 1:]\n            return positions(s1)\n        else:\n            s2 = s[:m - 1] + s[m:]\n            s3 = s[:m] + s[m + 1:]\n            return (positions(s2)[0], positions(s3)[1])\nt = int(input())\nr = []\nfor i in range(t):\n    s = input()\n    q = positions(s)\n    r = r + [q[0] + q[1]]\nfor i in range(t):\n    print(r[i])", "def equi(i, y, l):\n    c = 0\n    if i == 0:\n        return c\n    for x in range(1, i + 1):\n        if y != l[i - x]:\n            break\n        c = c + 1\n    return c\n\ndef palindrome(s):\n    n = len(s)\n    for i in range(int(n / 2)):\n        if s[i] != s[n - 1 - i]:\n            return (False, i)\n    return (True,)\n\ndef positions(s):\n    n = len(s)\n    if n % 2 != 0:\n        m = int((n - 1) / 2)\n        t = palindrome(s)\n        if t[0]:\n            r = equi(m, s[m], s) + 1\n            return (r, r)\n        else:\n            l = 0\n            r = 0\n            if s[m - 1] == s[m]:\n                if palindrome(s[t[1]:n - 1 - t[1]])[0]:\n                    l = equi(t[1], s[n - 1 - t[1]], s) + 1\n            if s[m] == s[m + 1]:\n                s2 = s[n - 1::-1]\n                t1 = palindrome(s2)[1]\n                if palindrome(s2[t1:n - t1 - 1])[0]:\n                    r = equi(t1, s2[n - 1 - t1], s2) + 1\n        return (l, r)\n    else:\n        m = int(n / 2)\n        if palindrome(s)[0]:\n            r = equi(m, s[m], s)\n            return (r, r + 1)\n        if s[m - 1] == s[m]:\n            s1 = s[:m] + s[m + 1:]\n            return positions(s1)\n        else:\n            s2 = s[:m - 1] + s[m:]\n            s3 = s[:m] + s[m + 1:]\n            return (positions(s2)[0], positions(s3)[1])\nt = int(input())\nr = []\nfor i in range(t):\n    s = input()\n    q = positions(s)\n    r = r + [q[0] + q[1]]\nfor i in range(t):\n    print(r[i])", "def equi(i, y, l):\n    c = 0\n    if i == 0:\n        return c\n    for x in range(1, i + 1):\n        if y != l[i - x]:\n            break\n        c = c + 1\n    return c\n\ndef palindrome(s):\n    n = len(s)\n    for i in range(int(n / 2)):\n        if s[i] != s[n - 1 - i]:\n            return (False, i)\n    return (True,)\n\ndef positions(s):\n    n = len(s)\n    if n % 2 != 0:\n        m = int((n - 1) / 2)\n        t = palindrome(s)\n        if t[0]:\n            r = equi(m, s[m], s) + 1\n            return (r, r)\n        else:\n            l = 0\n            r = 0\n            if s[m - 1] == s[m]:\n                if palindrome(s[t[1]:n - 1 - t[1]])[0]:\n                    l = equi(t[1], s[n - 1 - t[1]], s) + 1\n            if s[m] == s[m + 1]:\n                s2 = s[n - 1::-1]\n                t1 = palindrome(s2)[1]\n                if palindrome(s2[t1:n - t1 - 1])[0]:\n                    r = equi(t1, s2[n - 1 - t1], s2) + 1\n        return (l, r)\n    else:\n        m = int(n / 2)\n        if palindrome(s)[0]:\n            r = equi(m, s[m], s)\n            return (r, r + 1)\n        if s[m - 1] == s[m]:\n            s1 = s[:m] + s[m + 1:]\n            return positions(s1)\n        else:\n            s2 = s[:m - 1] + s[m:]\n            s3 = s[:m] + s[m + 1:]\n            return (positions(s2)[0], positions(s3)[1])\nt = int(input())\nr = []\nfor i in range(t):\n    s = input()\n    q = positions(s)\n    r = r + [q[0] + q[1]]\nfor i in range(t):\n    print(r[i])", "def equi(i, y, l):\n    c = 0\n    if i == 0:\n        return c\n    for x in range(1, i + 1):\n        if y != l[i - x]:\n            break\n        c = c + 1\n    return c\n\ndef palindrome(s):\n    n = len(s)\n    for i in range(int(n / 2)):\n        if s[i] != s[n - 1 - i]:\n            return (False, i)\n    return (True,)\n\ndef positions(s):\n    n = len(s)\n    if n % 2 != 0:\n        m = int((n - 1) / 2)\n        t = palindrome(s)\n        if t[0]:\n            r = equi(m, s[m], s) + 1\n            return (r, r)\n        else:\n            l = 0\n            r = 0\n            if s[m - 1] == s[m]:\n                if palindrome(s[t[1]:n - 1 - t[1]])[0]:\n                    l = equi(t[1], s[n - 1 - t[1]], s) + 1\n            if s[m] == s[m + 1]:\n                s2 = s[n - 1::-1]\n                t1 = palindrome(s2)[1]\n                if palindrome(s2[t1:n - t1 - 1])[0]:\n                    r = equi(t1, s2[n - 1 - t1], s2) + 1\n        return (l, r)\n    else:\n        m = int(n / 2)\n        if palindrome(s)[0]:\n            r = equi(m, s[m], s)\n            return (r, r + 1)\n        if s[m - 1] == s[m]:\n            s1 = s[:m] + s[m + 1:]\n            return positions(s1)\n        else:\n            s2 = s[:m - 1] + s[m:]\n            s3 = s[:m] + s[m + 1:]\n            return (positions(s2)[0], positions(s3)[1])\nt = int(input())\nr = []\nfor i in range(t):\n    s = input()\n    q = positions(s)\n    r = r + [q[0] + q[1]]\nfor i in range(t):\n    print(r[i])", "def equi(i, y, l):\n    c = 0\n    if i == 0:\n        return c\n    for x in range(1, i + 1):\n        if y != l[i - x]:\n            break\n        c = c + 1\n    return c\n\ndef palindrome(s):\n    n = len(s)\n    for i in range(int(n / 2)):\n        if s[i] != s[n - 1 - i]:\n            return (False, i)\n    return (True,)\n\ndef positions(s):\n    n = len(s)\n    if n % 2 != 0:\n        m = int((n - 1) / 2)\n        t = palindrome(s)\n        if t[0]:\n            r = equi(m, s[m], s) + 1\n            return (r, r)\n        else:\n            l = 0\n            r = 0\n            if s[m - 1] == s[m]:\n                if palindrome(s[t[1]:n - 1 - t[1]])[0]:\n                    l = equi(t[1], s[n - 1 - t[1]], s) + 1\n            if s[m] == s[m + 1]:\n                s2 = s[n - 1::-1]\n                t1 = palindrome(s2)[1]\n                if palindrome(s2[t1:n - t1 - 1])[0]:\n                    r = equi(t1, s2[n - 1 - t1], s2) + 1\n        return (l, r)\n    else:\n        m = int(n / 2)\n        if palindrome(s)[0]:\n            r = equi(m, s[m], s)\n            return (r, r + 1)\n        if s[m - 1] == s[m]:\n            s1 = s[:m] + s[m + 1:]\n            return positions(s1)\n        else:\n            s2 = s[:m - 1] + s[m:]\n            s3 = s[:m] + s[m + 1:]\n            return (positions(s2)[0], positions(s3)[1])\nt = int(input())\nr = []\nfor i in range(t):\n    s = input()\n    q = positions(s)\n    r = r + [q[0] + q[1]]\nfor i in range(t):\n    print(r[i])", "def equi(i, y, l):\n    c = 0\n    if i == 0:\n        return c\n    for x in range(1, i + 1):\n        if y != l[i - x]:\n            break\n        c = c + 1\n    return c\n\ndef palindrome(s):\n    n = len(s)\n    for i in range(int(n / 2)):\n        if s[i] != s[n - 1 - i]:\n            return (False, i)\n    return (True,)\n\ndef positions(s):\n    n = len(s)\n    if n % 2 != 0:\n        m = int((n - 1) / 2)\n        t = palindrome(s)\n        if t[0]:\n            r = equi(m, s[m], s) + 1\n            return (r, r)\n        else:\n            l = 0\n            r = 0\n            if s[m - 1] == s[m]:\n                if palindrome(s[t[1]:n - 1 - t[1]])[0]:\n                    l = equi(t[1], s[n - 1 - t[1]], s) + 1\n            if s[m] == s[m + 1]:\n                s2 = s[n - 1::-1]\n                t1 = palindrome(s2)[1]\n                if palindrome(s2[t1:n - t1 - 1])[0]:\n                    r = equi(t1, s2[n - 1 - t1], s2) + 1\n        return (l, r)\n    else:\n        m = int(n / 2)\n        if palindrome(s)[0]:\n            r = equi(m, s[m], s)\n            return (r, r + 1)\n        if s[m - 1] == s[m]:\n            s1 = s[:m] + s[m + 1:]\n            return positions(s1)\n        else:\n            s2 = s[:m - 1] + s[m:]\n            s3 = s[:m] + s[m + 1:]\n            return (positions(s2)[0], positions(s3)[1])\nt = int(input())\nr = []\nfor i in range(t):\n    s = input()\n    q = positions(s)\n    r = r + [q[0] + q[1]]\nfor i in range(t):\n    print(r[i])", "def equi(i, y, l):\n    c = 0\n    if i == 0:\n        return c\n    for x in range(1, i + 1):\n        if y != l[i - x]:\n            break\n        c = c + 1\n    return c\n\ndef palindrome(s):\n    n = len(s)\n    for i in range(int(n / 2)):\n        if s[i] != s[n - 1 - i]:\n            return (False, i)\n    return (True,)\n\ndef positions(s):\n    n = len(s)\n    if n % 2 != 0:\n        m = int((n - 1) / 2)\n        t = palindrome(s)\n        if t[0]:\n            r = equi(m, s[m], s) + 1\n            return (r, r)\n        else:\n            l = 0\n            r = 0\n            if s[m - 1] == s[m]:\n                if palindrome(s[t[1]:n - 1 - t[1]])[0]:\n                    l = equi(t[1], s[n - 1 - t[1]], s) + 1\n            if s[m] == s[m + 1]:\n                s2 = s[n - 1::-1]\n                t1 = palindrome(s2)[1]\n                if palindrome(s2[t1:n - t1 - 1])[0]:\n                    r = equi(t1, s2[n - 1 - t1], s2) + 1\n        return (l, r)\n    else:\n        m = int(n / 2)\n        if palindrome(s)[0]:\n            r = equi(m, s[m], s)\n            return (r, r + 1)\n        if s[m - 1] == s[m]:\n            s1 = s[:m] + s[m + 1:]\n            return positions(s1)\n        else:\n            s2 = s[:m - 1] + s[m:]\n            s3 = s[:m] + s[m + 1:]\n            return (positions(s2)[0], positions(s3)[1])\nt = int(input())\nr = []\nfor i in range(t):\n    s = input()\n    q = positions(s)\n    r = r + [q[0] + q[1]]\nfor i in range(t):\n    print(r[i])"]