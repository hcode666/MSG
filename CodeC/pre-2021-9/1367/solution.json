["try:\n\n    def ctlt(arr, val):\n        if arr[0] >= val:\n            return 0\n        lo = 0\n        hi = len(arr)\n        while hi - lo > 1:\n            md = (hi + lo) // 2\n            if arr[md] < val:\n                lo = md\n            else:\n                hi = md\n        return hi\n    for _ in range(int(input())):\n        (n, k, x, d) = map(int, input().split())\n        z = input().strip().split()\n        if k > 0:\n            ps = list(map(int, z[:k]))\n        else:\n            ps = [x]\n        ps.sort()\n        if x < n or x < ps[-1] or n < k:\n            print(-1)\n            continue\n        valchecked = 0\n        fillval = 0\n        valsdone = False\n        isolbelow = True\n        lastp = ps[0]\n        while not valsdone and n >= k:\n            if n == k:\n                lo = x + d + 1\n            else:\n                lo = 1\n                hi = x + 1\n                while hi - lo > 1:\n                    md = (hi + lo) // 2\n                    v = x - md + 1 + ctlt(ps, md)\n                    if v < n:\n                        hi = md\n                    else:\n                        lo = md\n            valsdone = True\n            checkto = ctlt(ps, lo) - 1\n            if checkto >= valchecked:\n                for p in ps[valchecked + 1:checkto + 1]:\n                    if lastp + d >= p:\n                        isolbelow = False\n                    elif isolbelow:\n                        valsdone = False\n                        fillval += lastp + d\n                        n -= 1\n                        isolbelow = p > lastp + 2 * d\n                    else:\n                        isolbelow = True\n                    lastp = p\n                valchecked = checkto\n                if valsdone and isolbelow:\n                    if lastp + d >= lo:\n                        isolbelow = False\n                    else:\n                        valsdone = False\n                        fillval += lastp\n                        ps[checkto] += d\n                        lastp += d\n                        isolbelow = False\n                        n -= 1\n        if k > n:\n            print(-1)\n        elif k == n:\n            print(sum(ps) + fillval)\n        elif k == n - 1 and lo > ps[-1]:\n            print(sum(ps) + fillval + min(x, ps[-1] + d))\n        else:\n            tot = (x + lo) * (x - lo + 1) // 2 + sum(ps[:ctlt(ps, lo)])\n            print(tot + fillval)\nexcept:\n    pass", "try:\n\n    def ctlt(arr, val):\n        if arr[0] >= val:\n            return 0\n        lo = 0\n        hi = len(arr)\n        while hi - lo > 1:\n            md = (hi + lo) // 2\n            if arr[md] < val:\n                lo = md\n            else:\n                hi = md\n        return hi\n    for _ in range(int(input())):\n        (n, k, x, d) = map(int, input().split())\n        z = input().strip().split()\n        if k > 0:\n            ps = list(map(int, z[:k]))\n        else:\n            ps = [x]\n        ps.sort()\n        if x < n or x < ps[-1] or n < k:\n            print(-1)\n            continue\n        valchecked = 0\n        fillval = 0\n        valsdone = False\n        isolbelow = True\n        lastp = ps[0]\n        while not valsdone and n >= k:\n            if n == k:\n                lo = x + d + 1\n            else:\n                lo = 1\n                hi = x + 1\n                while hi - lo > 1:\n                    md = (hi + lo) // 2\n                    v = x - md + 1 + ctlt(ps, md)\n                    if v < n:\n                        hi = md\n                    else:\n                        lo = md\n            valsdone = True\n            checkto = ctlt(ps, lo) - 1\n            if checkto >= valchecked:\n                for p in ps[valchecked + 1:checkto + 1]:\n                    if lastp + d >= p:\n                        isolbelow = False\n                    elif isolbelow:\n                        valsdone = False\n                        fillval += lastp + d\n                        n -= 1\n                        isolbelow = p > lastp + 2 * d\n                    else:\n                        isolbelow = True\n                    lastp = p\n                valchecked = checkto\n                if valsdone and isolbelow:\n                    if lastp + d >= lo:\n                        isolbelow = False\n                    else:\n                        valsdone = False\n                        fillval += lastp\n                        ps[checkto] += d\n                        lastp += d\n                        isolbelow = False\n                        n -= 1\n        if k > n:\n            print(-1)\n        elif k == n:\n            print(sum(ps) + fillval)\n        elif k == n - 1 and lo > ps[-1]:\n            print(sum(ps) + fillval + min(x, ps[-1] + d))\n        else:\n            tot = (x + lo) * (x - lo + 1) // 2 + sum(ps[:ctlt(ps, lo)])\n            print(tot + fillval)\nexcept:\n    pass", "try:\n\n    def ctlt(arr, val):\n        if arr[0] >= val:\n            return 0\n        lo = 0\n        hi = len(arr)\n        while hi - lo > 1:\n            md = (hi + lo) // 2\n            if arr[md] < val:\n                lo = md\n            else:\n                hi = md\n        return hi\n    for _ in range(int(input())):\n        (n, k, x, d) = map(int, input().split())\n        z = input().strip().split()\n        if k > 0:\n            ps = list(map(int, z[:k]))\n        else:\n            ps = [x]\n        ps.sort()\n        if x < n or x < ps[-1] or n < k:\n            print(-1)\n            continue\n        valchecked = 0\n        fillval = 0\n        valsdone = False\n        isolbelow = True\n        lastp = ps[0]\n        while not valsdone and n >= k:\n            if n == k:\n                lo = x + d + 1\n            else:\n                lo = 1\n                hi = x + 1\n                while hi - lo > 1:\n                    md = (hi + lo) // 2\n                    v = x - md + 1 + ctlt(ps, md)\n                    if v < n:\n                        hi = md\n                    else:\n                        lo = md\n            valsdone = True\n            checkto = ctlt(ps, lo) - 1\n            if checkto >= valchecked:\n                for p in ps[valchecked + 1:checkto + 1]:\n                    if lastp + d >= p:\n                        isolbelow = False\n                    elif isolbelow:\n                        valsdone = False\n                        fillval += lastp + d\n                        n -= 1\n                        isolbelow = p > lastp + 2 * d\n                    else:\n                        isolbelow = True\n                    lastp = p\n                valchecked = checkto\n                if valsdone and isolbelow:\n                    if lastp + d >= lo:\n                        isolbelow = False\n                    else:\n                        valsdone = False\n                        fillval += lastp\n                        ps[checkto] += d\n                        lastp += d\n                        isolbelow = False\n                        n -= 1\n        if k > n:\n            print(-1)\n        elif k == n:\n            print(sum(ps) + fillval)\n        elif k == n - 1 and lo > ps[-1]:\n            print(sum(ps) + fillval + min(x, ps[-1] + d))\n        else:\n            tot = (x + lo) * (x - lo + 1) // 2 + sum(ps[:ctlt(ps, lo)])\n            print(tot + fillval)\nexcept:\n    pass", "def ctlt(arr, val):\n    if arr[0] >= val:\n        return 0\n    lo = 0\n    hi = len(arr)\n    while hi - lo > 1:\n        md = (hi + lo) // 2\n        if arr[md] < val:\n            lo = md\n        else:\n            hi = md\n    return hi\nfor _ in range(int(input())):\n    (n, k, x, d) = map(int, input().split())\n    z = input().strip().split()\n    if k > 0:\n        ps = list(map(int, z[:k]))\n    else:\n        ps = [x]\n    ps.sort()\n    if x < n or x < ps[-1] or n < k:\n        print(-1)\n        continue\n    valchecked = 0\n    fillval = 0\n    valsdone = False\n    isolbelow = True\n    lastp = ps[0]\n    while not valsdone and n >= k:\n        if n == k:\n            lo = x + d + 1\n        else:\n            lo = 1\n            hi = x + 1\n            while hi - lo > 1:\n                md = (hi + lo) // 2\n                v = x - md + 1 + ctlt(ps, md)\n                if v < n:\n                    hi = md\n                else:\n                    lo = md\n        valsdone = True\n        checkto = ctlt(ps, lo) - 1\n        if checkto >= valchecked:\n            for p in ps[valchecked + 1:checkto + 1]:\n                if lastp + d >= p:\n                    isolbelow = False\n                elif isolbelow:\n                    valsdone = False\n                    fillval += lastp + d\n                    n -= 1\n                    isolbelow = p > lastp + 2 * d\n                else:\n                    isolbelow = True\n                lastp = p\n            valchecked = checkto\n            if valsdone and isolbelow:\n                if lastp + d >= lo:\n                    isolbelow = False\n                else:\n                    valsdone = False\n                    fillval += lastp\n                    ps[checkto] += d\n                    lastp += d\n                    isolbelow = False\n                    n -= 1\n    if k > n:\n        print(-1)\n    elif k == n:\n        print(sum(ps) + fillval)\n    elif k == n - 1 and lo > ps[-1]:\n        print(sum(ps) + fillval + min(x, ps[-1] + d))\n    else:\n        tot = (x + lo) * (x - lo + 1) // 2 + sum(ps[:ctlt(ps, lo)])\n        print(tot + fillval)", "def ctlt(arr, val):\n    if arr[0] >= val:\n        return 0\n    lo = 0\n    hi = len(arr)\n    while hi - lo > 1:\n        md = (hi + lo) // 2\n        if arr[md] < val:\n            lo = md\n        else:\n            hi = md\n    return hi\nfor _ in range(int(input())):\n    (n, k, x, d) = map(int, input().split())\n    z = input().strip().split()\n    if k > 0:\n        ps = list(map(int, z[:k]))\n    else:\n        ps = [x]\n    ps.sort()\n    if x < n or x < ps[-1] or n < k:\n        print(-1)\n        continue\n    valchecked = 0\n    fillval = 0\n    valsdone = False\n    isolbelow = True\n    lastp = ps[0]\n    while not valsdone and n >= k:\n        if n == k:\n            lo = x + d + 1\n        else:\n            lo = 1\n            hi = x + 1\n            while hi - lo > 1:\n                md = (hi + lo) // 2\n                v = x - md + 1 + ctlt(ps, md)\n                if v < n:\n                    hi = md\n                else:\n                    lo = md\n        valsdone = True\n        checkto = ctlt(ps, lo) - 1\n        if checkto >= valchecked:\n            for p in ps[valchecked + 1:checkto + 1]:\n                if lastp + d >= p:\n                    isolbelow = False\n                elif isolbelow:\n                    valsdone = False\n                    fillval += lastp + d\n                    n -= 1\n                    isolbelow = p > lastp + 2 * d\n                else:\n                    isolbelow = True\n                lastp = p\n            valchecked = checkto\n            if valsdone and isolbelow:\n                if lastp + d >= lo:\n                    isolbelow = False\n                else:\n                    valsdone = False\n                    fillval += lastp\n                    ps[checkto] += d\n                    lastp += d\n                    isolbelow = False\n                    n -= 1\n    if k > n:\n        print(-1)\n    elif k == n:\n        print(sum(ps) + fillval)\n    elif k == n - 1 and lo > ps[-1]:\n        print(sum(ps) + fillval + min(x, ps[-1] + d))\n    else:\n        tot = (x + lo) * (x - lo + 1) // 2 + sum(ps[:ctlt(ps, lo)])\n        print(tot + fillval)", "def solve(p, n, x, d):\n    if x < n:\n        return -1\n    k = len(p)\n    n -= k\n    ret = sum(p)\n    p = sorted(p)\n    cur = 0\n    sss = set()\n    sss.update(p)\n    while cur < k:\n        if cur < k - 1 and p[cur + 1] - p[cur] <= d:\n            cur += 1\n            continue\n        if cur > 0 and p[cur] - p[cur - 1] <= d:\n            cur += 1\n            continue\n        val = min(p[cur] + d, x)\n        while val in sss:\n            val -= 1\n        sss.add(val)\n        while cur < k and p[cur] <= val + d:\n            cur += 1\n        n -= 1\n        ret += val\n    if n < 0:\n        return -1\n    if n == 0:\n        return ret\n    if n == 1:\n        v = max(sss)\n        z = min(v + d, x)\n        while z in sss:\n            z -= 1\n        return ret + z\n    q = sorted(sss)[::-1]\n    for z in q:\n        if x - z >= n:\n            w = x * (x + 1) // 2 - (x - n) * (x - n + 1) // 2\n            return ret + w\n        ret -= z\n        n += 1\n    w = x * (x + 1) // 2 - (x - n) * (x - n + 1) // 2\n    return ret + w\nimport sys\nf = sys.stdin\nt = int(f.readline())\nfor i in range(t):\n    (n, k, x, d) = map(int, f.readline().split())\n    p = list(map(int, f.readline().split()))\n    q = solve(p, n, x, d)\n    print(q)"]