["n = int(input())\nedges = []\nfor i in range(n - 1):\n    (a, b, c) = map(int, input().strip().split())\n    edges.append((c, a - 1, b - 1))\nedges.sort()\nparent = [-1] * n\n\ndef find(n):\n    if parent[n] < 0:\n        return n\n    else:\n        pt = find(parent[n])\n        parent[n] = pt\n        return pt\ntotal = 0\nnum = 0\nden = 0\nfor (c, a, b) in edges:\n    a = find(a)\n    b = find(b)\n    assert a != b\n    total += c\n    num += parent[a] * parent[b] * c\n    den += parent[a] * parent[b]\n    if parent[a] > parent[b]:\n        parent[b] += parent[a]\n        parent[a] = b\n    else:\n        parent[a] += parent[b]\n        parent[b] = a\nprint('%.11f' % (total - num / den))", "def find(n):\n    if parent[n] != n:\n        parent[n] = find(parent[n])\n    return parent[n]\n\ndef merge(a, b):\n    (a, b) = (find(a), find(b))\n    if rank[a] > rank[b]:\n        parent[b] = a\n        size[a] += size[b]\n    else:\n        parent[a] = b\n        size[b] += size[a]\n        if rank[a] == rank[b]:\n            rank[b] += 1\nn = int(input())\nsize = {}\nrank = {}\nparent = {}\nedges = []\nfor i in range(n):\n    size[i] = 1\n    parent[i] = i\n    rank[i] = 1\nfor i in range(n - 1):\n    (a, b, c) = map(int, input().split())\n    a -= 1\n    b -= 1\n    edges.append([c, a, b])\nedges.sort()\nS = T = C = 0\nfor (c, a, b) in edges:\n    a = find(a)\n    b = find(b)\n    S += size[a] * size[b] * c\n    T += size[a] * size[b]\n    C += c\n    merge(a, b)\nprint(C - S / T)", "n = int(input())\nsize = {}\nparent = {}\nfor i in range(1, n + 1):\n    size[i] = 1\n    parent[i] = i\n\ndef find(a):\n    if parent[a] == a:\n        return a\n    parent[a] = find(parent[a])\n    return parent[a]\nedges = []\nfor i in range(n - 1):\n    edges.append(list(map(int, input().split())))\nedges.sort(key=lambda x: x[2])\nc = 0\ns = 0\nt = 0\nfor i in range(n - 1):\n    a = find(edges[i][0])\n    b = find(edges[i][1])\n    c += edges[i][2]\n    s += size[a] * size[b] * edges[i][2]\n    t += size[a] * size[b]\n    if size[a] > size[b]:\n        size[a] += size[b]\n        parent[b] = a\n    else:\n        size[b] += size[a]\n        parent[a] = b\nprint('%.6f' % (c - float(s) / t))", "n = int(input())\nedge = []\nnum = den = sm = 0\nsize = [1] * (n + 1)\nparent = [i for i in range(n + 1)]\n\ndef find(x):\n    if parent[x] != x:\n        parent[x] = find(parent[x])\n    return parent[x]\nfor i in range(n - 1):\n    (u, v, c) = list(map(int, input().split()))\n    sm += c\n    edge.append((c, u, v))\nedge.sort()\nfor (c, u, v) in edge:\n    a = find(u)\n    b = find(v)\n    num += size[a] * size[b] * c\n    den += size[a] * size[b]\n    if size[a] > size[b]:\n        (a, b) = (b, a)\n    parent[a] = b\n    size[b] += size[a]\nprint(sm - num / den)", "n = int(input())\nedges = []\nfor i in range(n - 1):\n    (a, b, c) = map(int, input().strip().split())\n    edges.append((c, a - 1, b - 1))\nedges.sort()\nparent = [-1] * n\n\ndef find(n):\n    if parent[n] < 0:\n        return n\n    else:\n        pt = find(parent[n])\n        parent[n] = pt\n        return pt\ntotal = 0\nnum = 0\nden = 0\nfor (c, a, b) in edges:\n    a = find(a)\n    b = find(b)\n    assert a != b\n    total += c\n    num += parent[a] * parent[b] * c\n    den += parent[a] * parent[b]\n    if parent[a] > parent[b]:\n        parent[b] += parent[a]\n        parent[a] = b\n    else:\n        parent[a] += parent[b]\n        parent[b] = a\nprint('%.11f' % (total - num / den))"]