["(n, m) = [int(c) for c in input().split()]\nmatrix = []\nfor i in range(n):\n    arr = [int(c) for c in input()]\n    matrix.append(arr)\nc = [0 for i in range(m)]\nans = 0\nfor i in range(n - 1, -1, -1):\n    last = 0\n    for j in range(m):\n        c[j] = 0 if not matrix[i][j] else c[j] + 1\n    for j in range(m):\n        last = min(last + 1, c[j])\n        ans += last\nprint(ans)", "(n, m) = [int(c) for c in input().split()]\nmatrix = []\nfor i in range(n):\n    arr = [int(c) for c in input()]\n    matrix.append(arr)\nc = [0 for i in range(m)]\nans = 0\nfor i in range(n - 1, -1, -1):\n    last = 0\n    for j in range(m):\n        c[j] = 0 if not matrix[i][j] else c[j] + 1\n    for j in range(m):\n        last = min(last + 1, c[j])\n        ans += last\nprint(ans)", "(n, m) = [int(c) for c in input().split()]\nmatrix = []\nfor i in range(n):\n    arr = [int(c) for c in input()]\n    matrix.append(arr)\nc = [0 for i in range(m)]\nans = 0\nfor i in range(n - 1, -1, -1):\n    last = 0\n    for j in range(m):\n        c[j] = 0 if not matrix[i][j] else c[j] + 1\n    for j in range(m):\n        last = min(last + 1, c[j])\n        ans += last\nprint(ans)", "(N, M) = map(int, input().split())\nA = []\nfor _ in range(N):\n    A.append(input())\nreach = [[1 for _ in range(M)] for _ in range(N)]\nfor i in range(N):\n    for j in range(M - 1, -1, -1):\n        if A[i][j] == '0':\n            reach[i][j] = 0\n        elif j != M - 1:\n            reach[i][j] = 1 + reach[i][j + 1]\nij2h = [[0 for _ in range(M)] for _ in range(N)]\nfor i in range(N - 1, -1, -1):\n    for j in range(M - 1, -1, -1):\n        if i == N - 1 or j == M - 1:\n            ij2h[i][j] = 1 if A[i][j] == '1' else 0\n        else:\n            ij2h[i][j] = min(reach[i][j], ij2h[i + 1][j + 1] + 1)\nans = 0\nfor i in range(N):\n    ans += sum(ij2h[i])\nprint(ans)", "(n, m) = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, list(input()))))\n    for j in range(1, m):\n        if a[i][j] == 1:\n            a[i][j] += a[i][j - 1]\nans = 0\nfor j in range(m):\n    prev = min(a[n - 1][j], 1)\n    ans += prev\n    for i in range(n - 2, -1, -1):\n        temp = min(a[i][j], prev + 1)\n        prev = temp\n        ans += temp\nprint(ans)", "(n, m) = map(int, input().split())\nW = []\nfor _ in range(n):\n    W.append(input())\nM = [[0 for x in range(m)] for y in range(n)]\nfor (it, i) in enumerate(W):\n    t = 0\n    for (jt, j) in enumerate(i):\n        t = t + 1 if j == '1' else 0\n        M[it][jt] = t\nans = 0\nfor i in range(m - 1, -1, -1):\n    t = 0\n    for j in range(n - 1, -1, -1):\n        t = min(t + 1, M[j][i]) if W[j][i] == '1' else 0\n        ans += min(M[j][i], t)\nprint(ans)", "(n, m) = [int(i) for i in input().split()]\narr = []\nfor i in range(n):\n    arr.append([int(i) for i in input()])\ntemp = [[0 for i in range(m)] for i in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if i == 0 or j == 0:\n            temp[i][j] = arr[i][j]\n        elif arr[i][j] == 0:\n            temp[i][j] = 0\n        else:\n            temp[i][j] = 1 + min(temp[i - 1][j - 1], temp[i - 1][j])\nprint(sum([sum(temp[i]) for i in range(n)]))", "from sys import stdin\n(rows, columns) = map(int, stdin.readline().split())\nmatrix = []\nfor i in range(rows):\n    matrix.append(list(map(int, list(stdin.readline().strip()))))\nfor j in range(1, columns):\n    for i in range(rows - 2, -1, -1):\n        if matrix[i][j]:\n            matrix[i][j] = min(matrix[i + 1][j] + 1, matrix[i][j - 1] + 1)\npossible_sub_matrix = 0\nfor i in range(rows):\n    for j in range(columns):\n        if matrix[i][j] != 0:\n            possible_sub_matrix += matrix[i][j]\nprint(possible_sub_matrix)", "from sys import stdin\ninput = stdin.readline\n(rows, columns) = map(int, input().split())\nmatrix = []\nfor i in range(rows):\n    matrix.append(list(map(int, list(input().strip()))))\nfor j in range(columns):\n    one_count = 0\n    for i in range(rows - 1, -1, -1):\n        if matrix[i][j] != 0:\n            one_count += 1\n            matrix[i][j] = one_count\n        else:\n            one_count = 0\nfor i in range(rows):\n    matrix[i][0] = min(matrix[i][0], 1)\nfor i in range(rows):\n    for j in range(1, columns):\n        if matrix[i][j] != 0:\n            matrix[i][j] = min(matrix[i][j], matrix[i][j - 1] + 1)\npossible_sub_matrix = 0\nfor i in range(rows):\n    for j in range(columns):\n        if matrix[i][j] != 0:\n            possible_sub_matrix += matrix[i][j]\nprint(possible_sub_matrix)", "(rows, columns) = map(int, input().split())\nmatrix = []\nfor i in range(rows):\n    matrix.append(list(map(int, list(input().strip()))))\nfor j in range(columns):\n    one_count = 0\n    for i in range(rows - 1, -1, -1):\n        if matrix[i][j] != 0:\n            one_count += 1\n            matrix[i][j] = one_count\n        else:\n            one_count = 0\nfor i in range(rows):\n    matrix[i][0] = min(matrix[i][0], 1)\nfor i in range(rows):\n    for j in range(1, columns):\n        if matrix[i][j] != 0:\n            matrix[i][j] = min(matrix[i][j], matrix[i][j - 1] + 1)\npossible_sub_matrix = 0\nfor i in range(rows):\n    for j in range(columns):\n        if matrix[i][j] != 0:\n            possible_sub_matrix += matrix[i][j]\nprint(possible_sub_matrix)", "(n, m) = map(int, input().split())\nmat = []\n[mat.append(input()) for _ in range(n)]\nsMats = [0] * m\nans = 0\nfor i in range(n - 1, -1, -1):\n    tmp = 0\n    for j in range(m):\n        if mat[i][j] == '1':\n            sMats[j] += 1\n        else:\n            sMats[j] = 0\n        tmp = min(tmp + 1, sMats[j])\n        ans += tmp\nprint(ans)", "(n, m) = [int(i) for i in input().split()]\narr = []\nfor i in range(n):\n    arr.append([int(i) for i in input()])\ntemp = [[0 for i in range(m)] for i in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if i == 0 or j == 0:\n            temp[i][j] = arr[i][j]\n        elif arr[i][j] == 0:\n            temp[i][j] = 0\n        else:\n            temp[i][j] = 1 + min(temp[i - 1][j - 1], temp[i - 1][j])\nprint(sum([sum(temp[i]) for i in range(n)]))", "(N, M) = map(int, input().split())\narr = []\nfor i in range(1, N + 1):\n    arr.append(list(input()))\ncol = [0] * M\nans = 0\nfor i in range(N - 1, -1, -1):\n    prev = 0\n    for j in range(M):\n        if arr[i][j] == '1':\n            col[j] += 1\n        else:\n            col[j] = 0\n        prev = min(prev + 1, col[j])\n        ans += prev\nprint(ans)", "(n, m) = map(int, input().split())\ndp = [[0 for i in range(m + 1)] for j in range(n + 1)]\na = [None] * n\nfor i in range(n):\n    a[i] = input()\nvarts = [[0 for i in range(m + 1)] for j in range(n + 1)]\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == '1':\n            varts[i + 1][j + 1] = 1\n            varts[i + 1][j + 1] += varts[i][j + 1]\ns = 0\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == '1':\n            dp[i + 1][j + 1] = 1\n            dp[i + 1][j + 1] += min(dp[i][j], varts[i + 1][j + 1] - 1)\n            s += dp[i + 1][j + 1]\nprint(s)", "(n, m) = map(int, input().strip().split())\nmatrix = []\nf = []\nfor i in range(0, n):\n    a = list(input().strip())\n    matrix.append(list(map(int, a)))\n    x = [0] * m\n    f.append(x)\nfor i in range(0, n):\n    for j in range(0, m):\n        if i == 0 or j == 0:\n            f[i][j] = matrix[i][j]\n        elif matrix[i][j] == 1:\n            f[i][j] = min(f[i - 1][j], f[i - 1][j - 1]) + 1\nans = 0\nfor i in range(n):\n    ans += sum(f[i])\nprint(ans)", "(n, m) = map(int, input().strip().split())\nmatrix = []\nf = []\nfor i in range(0, n):\n    a = list(input().strip())\n    matrix.append(list(map(int, a)))\n    x = [0] * m\n    f.append(x)\nfor i in range(0, n):\n    for j in range(0, m):\n        if i == 0 or j == 0:\n            f[i][j] = matrix[i][j]\n        elif matrix[i][j] == 1:\n            f[i][j] = min(f[i - 1][j], f[i - 1][j - 1]) + 1\nans = 0\nfor i in range(n):\n    for j in range(m):\n        ans += f[i][j]\nprint(ans)", "def get_params(inp, split=True):\n    if split:\n        inp = inp.split()\n    inp = [int(i) for i in inp]\n    return inp\n(n, m) = get_params(str(input()))\narray = [get_params(str(input()), False) for i in range(n)]\ndp = [[0 for i in range(m)] for j in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if i == 0 or j == 0:\n            dp[i][j] = 1 if array[i][j] == 1 else 0\n            continue\n        if array[i][j] == 0:\n            continue\n        dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j]) + 1\nprint(sum([sum(i) for i in dp]))", "(n, m) = map(int, input().split())\nls = [input() for _ in range(n)]\nCount = [0] * m\nres = 0\nfor i in range(n - 1, -1, -1):\n    for j in range(m):\n        Count[j] = Count[j] + 1 if ls[i][j] == '1' else 0\n    last = 0\n    for j in range(m):\n        last = min(last + 1, Count[j])\n        res += last\nprint(res)", "import sys\nline = input().split()\nn = int(line[0])\nm = int(line[1])\na = [list() for i in range(n)]\nt = [[0 for j in range(m)] for i in range(n)]\nl = [[-1 for j in range(m)] for i in range(n)]\nfor i in range(n):\n    line = list(input())\n    a[i] = [int(x) for x in line]\nfor j in range(m):\n    for i in range(n):\n        if a[i][j] == 0:\n            l[i][j] = i\n        else:\n            l[i][j] = l[i - 1][j] if i > 0 else -1\nfor j in range(m):\n    t[0][j] = a[0][j]\nfor i in range(1, n):\n    t[i][0] = a[i][0]\nfor i in range(1, n):\n    for j in range(1, m):\n        if a[i][j] == 1:\n            t[i][j] = min(t[i - 1][j - 1] + 1, i - l[i][j])\n        else:\n            t[i][j] = 0\ns = 0\nfor x in t:\n    s += sum(x)\nsys.stdout.write(str(s) + '\\n')", "(n, m) = map(int, input().strip().split())\nmatrix = []\nfor i in range(n):\n    matrix.append(input().strip())\nref_matrix = [[0 for i in range(m)] for j in range(n)]\nfor i in range(m):\n    ref_matrix[-1][i] = int(matrix[-1][i])\nfor i in range(n - 2, -1, -1):\n    for j in range(m):\n        if matrix[i][j] == '1':\n            ref_matrix[i][j] = 1 + ref_matrix[i + 1][j]\n        else:\n            ref_matrix[i][j] = 0\nans_matrix = [[0 for i in range(m)] for j in range(n)]\nans = 0\nfor i in range(n):\n    ans_matrix[i][0] = int(matrix[i][0])\n    ans += ans_matrix[i][0]\nfor i in range(n):\n    for j in range(1, m):\n        ans_matrix[i][j] = min(ans_matrix[i][j - 1] + 1, ref_matrix[i][j])\n        ans += ans_matrix[i][j]\nprint(ans)", "(n, m) = map(int, input().strip().split())\nmatrix = [list(map(int, input().strip())) for i in range(n)]\ng = [[0 for j in range(m)] for i in range(n)]\nf = [[0 for j in range(m)] for i in range(n)]\ntotal = 0\nfor j in range(m):\n    ones = 0\n    for i in range(n - 1, -1, -1):\n        if matrix[i][j]:\n            ones += 1\n        else:\n            ones = 0\n        g[i][j] = ones\nfor i in range(n):\n    for j in range(m):\n        if j == 0:\n            if matrix[i][j]:\n                f[i][j] = 1\n        else:\n            f[i][j] = min(f[i][j - 1] + 1, g[i][j])\n        total += f[i][j]\nprint(total)"]