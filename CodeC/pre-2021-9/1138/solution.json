["import sys\nfrom math import *\nfrom bisect import *\nMAX = sys.maxsize\nMAXN = 10 ** 5 + 10\nlogT = [0] * MAXN\nfor i in range(2, MAXN):\n    logT[i] = logT[i // 2] + 1\n\ndef buildSparse(a):\n    n = len(a)\n    k = logT[n] + 1\n    st = [[-MAX for j in range(k)] for i in range(n)]\n    for i in range(n):\n        st[i][0] = a[i]\n    j = 1\n    while 1 << j <= n:\n        i = 0\n        while i + (1 << j) - 1 < n:\n            st[i][j] = max(st[i][j - 1], st[i + (1 << j - 1)][j - 1])\n            i += 1\n        j += 1\n    return st\n\ndef query(l, r, st, d):\n    if l > r:\n        return False\n    tot = r - l + 1\n    k = logT[tot]\n    return max(st[l][k], st[l + tot - (1 << k)][k]) <= d\nn = int(input())\na = [0] + list(map(int, sys.stdin.readline().strip().split()))\nm = int(input())\ndif = [0] * (n + 1)\nfor i in range(1, n):\n    dif[i] = a[i + 1] - a[i]\nst = buildSparse(dif)\nfor _ in range(m):\n    (t, d) = map(int, sys.stdin.readline().strip().split())\n    idx = bisect(a, t) - 1\n    lo = 1\n    hi = idx - 1\n    if idx == 1 or a[idx] - a[idx - 1] > d:\n        ans = idx\n    else:\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if query(mid, idx - 1, st, d):\n                hi = mid\n            else:\n                lo = mid + 1\n        ans = lo\n    print(ans)", "import sys\nfrom math import *\nfrom bisect import *\nMAX = sys.maxsize\nMAXN = 10 ** 5 + 10\nlogT = [0] * MAXN\nfor i in range(2, MAXN):\n    logT[i] = logT[i // 2] + 1\n\ndef buildSparse(a):\n    n = len(a)\n    k = logT[n] + 1\n    st = [[-MAX for j in range(k)] for i in range(n)]\n    for i in range(n):\n        st[i][0] = a[i]\n    j = 1\n    while 1 << j <= n:\n        i = 0\n        while i + (1 << j) - 1 < n:\n            st[i][j] = max(st[i][j - 1], st[i + (1 << j - 1)][j - 1])\n            i += 1\n        j += 1\n    return st\n\ndef query(l, r, st, d):\n    if l > r:\n        return False\n    tot = r - l + 1\n    k = logT[tot]\n    return max(st[l][k], st[l + tot - (1 << k)][k]) <= d\nn = int(input())\na = [0] + list(map(int, sys.stdin.readline().strip().split()))\nm = int(input())\ndif = [0] * (n + 1)\nfor i in range(1, n):\n    dif[i] = a[i + 1] - a[i]\nst = buildSparse(dif)\nfor _ in range(m):\n    (t, d) = map(int, sys.stdin.readline().strip().split())\n    idx = bisect(a, t) - 1\n    lo = 1\n    hi = idx - 1\n    if idx == 1 or a[idx] - a[idx - 1] > d:\n        ans = idx\n    else:\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if query(mid, idx - 1, st, d):\n                hi = mid\n            else:\n                lo = mid + 1\n        ans = lo\n    print(ans)", "import sys\nfrom math import *\nfrom bisect import *\nMAX = sys.maxsize\nMAXN = 10 ** 5 + 10\nlogT = [0] * MAXN\nfor i in range(2, MAXN):\n    logT[i] = logT[i // 2] + 1\n\ndef buildSparse(a):\n    n = len(a)\n    k = logT[n] + 1\n    st = [[-MAX for j in range(k)] for i in range(n)]\n    for i in range(n):\n        st[i][0] = a[i]\n    j = 1\n    while 1 << j <= n:\n        i = 0\n        while i + (1 << j) - 1 < n:\n            st[i][j] = max(st[i][j - 1], st[i + (1 << j - 1)][j - 1])\n            i += 1\n        j += 1\n    return st\n\ndef query(l, r, st, d):\n    if l > r:\n        return False\n    tot = r - l + 1\n    k = logT[tot]\n    return max(st[l][k], st[l + tot - (1 << k)][k]) <= d\nn = int(input())\na = [0] + list(map(int, sys.stdin.readline().strip().split()))\nm = int(input())\ndif = [0] * (n + 1)\nfor i in range(1, n):\n    dif[i] = a[i + 1] - a[i]\nst = buildSparse(dif)\nfor _ in range(m):\n    (t, d) = map(int, sys.stdin.readline().strip().split())\n    idx = bisect(a, t) - 1\n    lo = 1\n    hi = idx - 1\n    if idx == 1 or a[idx] - a[idx - 1] > d:\n        ans = idx\n    else:\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if query(mid, idx - 1, st, d):\n                hi = mid\n            else:\n                lo = mid + 1\n        ans = lo\n    print(ans)"]