["(n, m) = [int(i) for i in input().split()]\nd = {}\nfor i in range(n):\n    (idr, attr, val, priority) = [int(i) for i in input().split()]\n    if (idr, attr) not in d:\n        d[idr, attr] = [val, priority]\n    if d[idr, attr][1] <= priority:\n        d[idr, attr] = [val, priority]\nfor i in range(m):\n    (x, y) = [int(i) for i in input().split()]\n    print(d[x, y][0])", "(n, m) = [int(i) for i in input().split()]\nd = {}\nfor i in range(n):\n    (idr, attr, val, priority) = [int(i) for i in input().split()]\n    if (idr, attr) not in d:\n        d[idr, attr] = [val, priority]\n    if d[idr, attr][1] <= priority:\n        d[idr, attr] = [val, priority]\nfor i in range(m):\n    (x, y) = [int(i) for i in input().split()]\n    print(d[x, y][0])", "(n, m) = [int(i) for i in input().split()]\nd = {}\nfor i in range(n):\n    (idr, attr, val, priority) = [int(i) for i in input().split()]\n    if (idr, attr) not in d:\n        d[idr, attr] = [val, priority]\n    if d[idr, attr][1] <= priority:\n        d[idr, attr] = [val, priority]\nfor i in range(m):\n    (x, y) = [int(i) for i in input().split()]\n    print(d[x, y][0])", "(n, m) = [int(i) for i in input().split()]\ndictt = {}\nfor i in range(n):\n    (id, attr, val, priority) = [int(i) for i in input().split()]\n    if (id, attr) not in dictt:\n        dictt[id, attr] = [val, priority]\n    if dictt[id, attr][1] <= priority:\n        dictt[id, attr] = [val, priority]\nfor i in range(m):\n    (x, y) = [int(i) for i in input().split()]\n    print(dictt[x, y][0])", "(n, m) = [int(x) for x in input().split()]\ndict = {}\nfor i in range(n):\n    (id, attr, value, priority) = [int(x) for x in input().split()]\n    lst = [priority, value]\n    if id not in dict:\n        dict[id] = {attr: lst}\n    elif attr not in dict[id]:\n        dict[id][attr] = lst\n    elif priority >= dict[id][attr][0]:\n        dict[id][attr] = lst\nfor i in range(m):\n    (id, attr) = [int(x) for x in input().split()]\n    print(dict[id][attr][1])", "(n, m) = map(int, input().split())\ndic = {}\nfor i in range(n):\n    (nid, atr, val, pri) = map(int, input().split())\n    key = str(nid) + str(atr)\n    if key not in dic:\n        dic[key] = {}\n        dic[key][pri] = []\n        dic[key][pri].append(val)\n    elif pri in dic[key]:\n        dic[key][pri].append(val)\n    else:\n        dic[key][pri] = []\n        dic[key][pri].append(val)\nfor i in range(m):\n    (nid, atr) = map(int, input().split())\n    key = str(nid) + str(atr)\n    print(dic[key][max(dic[key])][-1])", "(n, m) = map(int, input().split())\ndic = {}\nfor i in range(n):\n    (nid, atr, val, pri) = map(int, input().split())\n    key = str(nid) + str(atr)\n    if key not in dic:\n        dic[key] = {}\n        dic[key][pri] = []\n        dic[key][pri].append(val)\n    elif pri in dic[key]:\n        dic[key][pri].append(val)\n    else:\n        dic[key][pri] = []\n        dic[key][pri].append(val)\nfor i in range(m):\n    (nid, atr) = map(int, input().split())\n    key = str(nid) + str(atr)\n    print(dic[key][max(dic[key])][-1])", "(n, m) = map(int, input().split(' '))\ndict1 = dict()\nfor i in range(n):\n    (id, attribute, value, priority) = map(int, input().split(' '))\n    if (id, attribute) not in dict1:\n        dict1[id, attribute] = (value, priority)\n    elif priority >= dict1[id, attribute][1]:\n        dict1[id, attribute] = (value, priority)\nfor i in range(m):\n    (id2, attribute2) = map(int, input().split(' '))\n    print(dict1[id2, attribute2][0])", "(n, m) = map(int, input().split(' '))\ndict1 = dict()\nfor i in range(n):\n    (id, attribute, value, priority) = map(int, input().split(' '))\n    if (id, attribute) not in dict1:\n        dict1[id, attribute] = (value, priority)\n    elif priority >= dict1[id, attribute][1]:\n        dict1[id, attribute] = (value, priority)\nfor i in range(m):\n    (id2, attribute2) = map(int, input().split(' '))\n    print(dict1[id2, attribute2][0])", "(n, m) = map(int, input().split(' '))\ndict1 = dict()\nfor i in range(n):\n    (id, attribute, value, priority) = map(int, input().split(' '))\n    if (id, attribute) not in dict1:\n        dict1[id, attribute] = (value, priority)\n    elif priority >= dict1[id, attribute][1]:\n        dict1[id, attribute] = (value, priority)\nfor i in range(m):\n    (id2, attribute2) = map(int, input().split(' '))\n    print(dict1[id2, attribute2][0])", "d = {}\n(N, M) = map(int, input().split())\nfor i in range(N):\n    (id_, attr, val, prio) = map(int, input().split())\n    (c_val, c_prio) = d.get((id_, attr), (0, 0))\n    if prio >= c_prio:\n        d[id_, attr] = (val, prio)\nfor j in range(M):\n    (id_, attr) = map(int, input().split())\n    (val, prio) = d.get((id_, attr))\n    print(val)", "(n, m) = map(int, input().split())\nd = {}\nfor i in range(n):\n    (id, at, val, pr) = map(int, input().split())\n    if id not in d:\n        d[id] = {}\n    if at not in d[id]:\n        d[id][at] = [val, pr]\n    elif d[id][at][1] <= pr:\n        d[id][at] = [val, pr]\nfor j in range(m):\n    (id, at) = map(int, input().split())\n    print(d[id][at][0])", "(n, m) = map(int, input().split())\ncss = dict()\nfor _ in range(n):\n    (id, attr, val, priority) = map(int, input().split())\n    key = (id, attr)\n    if key not in css.keys():\n        css[key] = [val, priority]\n    else:\n        x = css[key][1]\n        if priority >= x:\n            css[key] = [val, priority]\nfor _ in range(m):\n    (id, attr) = map(int, input().split())\n    key = (id, attr)\n    print(css[key][0])", "(N, Q) = map(int, input().split())\nD = dict()\nfor _ in range(N):\n    (idd, attr, val, prior) = map(int, input().split())\n    key = (idd, attr)\n    if key not in D.keys():\n        D[key] = [val, prior]\n    else:\n        p = D[key][1]\n        if prior >= p:\n            D[key] = [val, prior]\nfor _ in range(Q):\n    (idd, attr) = map(int, input().split())\n    key = (idd, attr)\n    print(D[key][0])", "(n, m) = [int(c) for c in input().split()]\nids = [{} for i in range(10 ** 6)]\nfor i in range(n):\n    (id, attr, val, pr) = [int(c) for c in input().split()]\n    dic = ids[id]\n    (cval, cpr) = dic.get(attr, (0, 0))\n    if pr >= cpr:\n        cval = val\n        cpr = pr\n    dic[attr] = (cval, cpr)\n    ids[id] = dic\nfor i in range(m):\n    (id, attr) = [int(c) for c in input().split()]\n    print(ids[id][attr][0])", "(n, m) = [int(c) for c in input().split()]\nids = [{} for i in range(10 ** 6)]\nfor i in range(n):\n    (id, attr, val, pr) = [int(c) for c in input().split()]\n    dic = ids[id]\n    (cval, cpr) = dic.get(attr, (0, 0))\n    if pr >= cpr:\n        cval = val\n        cpr = pr\n    dic[attr] = (cval, cpr)\n    ids[id] = dic\nfor i in range(m):\n    (id, attr) = [int(c) for c in input().split()]\n    print(ids[id][attr][0])", "(n, m) = [int(c) for c in input().split()]\nids = [{} for i in range(10 ** 6)]\nfor i in range(n):\n    (id, attr, val, pr) = [int(c) for c in input().split()]\n    dic = ids[id]\n    (cval, cpr) = dic.get(attr, (0, 0))\n    if pr >= cpr:\n        cval = val\n        cpr = pr\n    dic[attr] = (cval, cpr)\n    ids[id] = dic\nfor i in range(m):\n    (id, attr) = [int(c) for c in input().split()]\n    print(ids[id][attr][0])", "(n, m) = list(map(int, input().split()))\ndt = {}\nfor i in range(n):\n    (id, attr, val, prio) = list(map(int, input().split()))\n    if (id, attr) in dt.keys():\n        if dt[id, attr][1] <= prio:\n            dt[id, attr] = (val, prio)\n    else:\n        dt[id, attr] = (val, prio)\nfor i in range(m):\n    (id, attr) = list(map(int, input().split()))\n    print(dt[id, attr][0])", "(N, Q) = map(int, input().split())\nD = dict()\nfor _ in range(N):\n    (idd, attr, val, prior) = map(int, input().split())\n    key = (idd, attr)\n    if key not in D.keys():\n        D[key] = [val, prior]\n    else:\n        p = D[key][1]\n        if prior >= p:\n            D[key] = [val, prior]\nfor _ in range(Q):\n    (idd, attr) = map(int, input().split())\n    key = (idd, attr)\n    print(D[key][0])", "try:\n    (n, m) = map(int, input().split())\n    caid = dict()\n    for _ in range(n):\n        (ids, attr, val, pr) = map(int, input().split())\n        if ids not in caid:\n            caid[ids] = dict()\n        if attr not in caid[ids]:\n            caid[ids][attr] = [0, -1]\n        if pr >= caid[ids][attr][1]:\n            caid[ids][attr] = [val, pr]\n    for _ in range(m):\n        (ids, attr) = map(int, input().split())\n        print(caid[ids][attr][0])\nexcept:\n    pass", "(N, Q) = map(int, input().split())\nD = dict()\nfor _ in range(N):\n    (idd, attr, val, prior) = map(int, input().split())\n    key = (idd, attr)\n    if key not in D.keys():\n        D[key] = [val, prior]\n    else:\n        p = D[key][1]\n        if prior >= p:\n            D[key] = [val, prior]\nfor _ in range(Q):\n    (idd, attr) = map(int, input().split())\n    key = (idd, attr)\n    print(D[key][0])", "from collections import defaultdict\nmp_attr = defaultdict(int)\npriority_mp = defaultdict(int)\n(n, m) = map(int, input().split())\nfor _ in range(n):\n    (id, attr, val, priority) = map(int, input().split())\n    cur_priority = priority_mp[id, attr]\n    if priority >= cur_priority:\n        priority_mp[id, attr] = priority\n        mp_attr[id, attr] = val\nfor _ in range(m):\n    (id, attr) = map(int, input().split())\n    print(mp_attr[id, attr])", "(N, Q) = map(int, input().split())\nD = dict()\nfor _ in range(N):\n    (idd, attr, val, prior) = map(int, input().split())\n    key = (idd, attr)\n    if key not in D.keys():\n        D[key] = [val, prior]\n    else:\n        p = D[key][1]\n        if prior >= p:\n            D[key] = [val, prior]\nfor _ in range(Q):\n    (idd, attr) = map(int, input().split())\n    key = (idd, attr)\n    print(D[key][0])", "(N, M) = [int(i) for i in input().split(' ')]\nattributes = {}\nfor i in range(N):\n    (id, attr, val, priority) = [int(i) for i in input().split(' ')]\n    if (id, attr) not in attributes or priority >= attributes[id, attr][1]:\n        attributes[id, attr] = (val, priority)\nfor i in range(M):\n    (id, attr) = [int(i) for i in input().split(' ')]\n    print(attributes[id, attr][0])", "(n, m) = [int(i) for i in input().split(' ')]\nattributes = {}\nfor i in range(n):\n    (id, attr, val, priority) = [int(i) for i in input().split(' ')]\n    if (id, attr) not in attributes or priority >= attributes[id, attr][1]:\n        attributes[id, attr] = (val, priority)\nfor i in range(m):\n    (id, attr) = [int(i) for i in input().split(' ')]\n    print(attributes[id, attr][0])", "(n, m) = [int(i) for i in input().split(' ')]\nattributes = {}\nfor i in range(n):\n    (id, attr, val, priority) = [int(i) for i in input().split(' ')]\n    if (id, attr) not in attributes or priority >= attributes[id, attr][1]:\n        attributes[id, attr] = (val, priority)\nfor i in range(m):\n    (id, attr) = [int(i) for i in input().split(' ')]\n    print(attributes[id, attr][0])", "try:\n    (n, m) = map(int, input().split())\n    caid = dict()\n    for _ in range(n):\n        (ids, attr, val, prior) = map(int, input().split())\n        if ids not in caid:\n            caid[ids] = dict()\n        if attr not in caid[ids]:\n            caid[ids][attr] = [0, -1]\n        if prior >= caid[ids][attr][1]:\n            caid[ids][attr] = [val, prior]\n    for _ in range(m):\n        (ids, attr) = map(int, input().split())\n        print(caid[ids][attr][0])\nexcept:\n    pass", "try:\n    (n, m) = map(int, input().split())\n    caid = dict()\n    for _ in range(n):\n        (ids, attr, val, prior) = map(int, input().split())\n        if ids not in caid:\n            caid[ids] = dict()\n        if attr not in caid[ids]:\n            caid[ids][attr] = [0, -1]\n        if prior >= caid[ids][attr][1]:\n            caid[ids][attr] = [val, prior]\n    for _ in range(m):\n        (ids, attr) = map(int, input().split())\n        print(caid[ids][attr][0])\nexcept:\n    pass", "from collections import defaultdict\nvals = defaultdict(lambda : {})\n(n, m) = [int(x) for x in input().split()]\nfor i in range(n):\n    (uid, atr, val, timestamp) = [int(x) for x in input().split()]\n    if atr not in vals[uid]:\n        vals[uid][atr] = {}\n        vals[uid][atr]['val'] = val\n        vals[uid][atr]['timestamp'] = timestamp\n    elif vals[uid][atr]['timestamp'] <= timestamp:\n        vals[uid][atr]['val'] = val\n        vals[uid][atr]['timestamp'] = timestamp\nfor i in range(m):\n    (uid, attr) = [int(x) for x in input().split()]\n    print(vals[uid][attr]['val'])", "t = 1\nwhile t > 0:\n    t -= 1\n    (n, q) = map(int, input().split())\n    hmap = {}\n    while n > 0:\n        n -= 1\n        (id, atr, val, pri) = map(int, input().split())\n        if id in hmap:\n            if atr in hmap[id]:\n                if hmap[id][atr][1] <= pri:\n                    hmap[id][atr][0] = val\n                    hmap[id][atr][1] = pri\n            else:\n                hmap[id][atr] = [val, pri]\n        else:\n            hmap[id] = {}\n            hmap[id][atr] = [val, pri]\n    while q > 0:\n        q -= 1\n        (id, atr) = map(int, input().split())\n        print(hmap[id][atr][0])", "def get_ans(n, m, main_dic, q_arr):\n    for q in q_arr:\n        max_p = 0\n        tmp = []\n        for l in main_dic[q[0]][q[1]]:\n            if l[1] > max_p:\n                max_p = l[1]\n                tmp = [l[0]]\n            elif l[1] == max_p:\n                tmp.append(l[0])\n        print(tmp[-1])\n(n, m) = map(int, input().split())\nmain_dic = {}\nfor _ in range(n):\n    tmp = list(map(int, input().split()))\n    if tmp[0] not in main_dic:\n        main_dic[tmp[0]] = {}\n        main_dic[tmp[0]][tmp[1]] = []\n    elif tmp[1] not in main_dic[tmp[0]]:\n        main_dic[tmp[0]][tmp[1]] = []\n    main_dic[tmp[0]][tmp[1]].append([tmp[2], tmp[3]])\nq_arr = []\nfor _ in range(m):\n    q_arr.append(list(map(int, input().split())))\nget_ans(n, m, main_dic, q_arr)", "from collections import defaultdict\n\ndef resolve(config, queries):\n    cache = defaultdict(dict)\n    for e in config:\n        (c, a, v, p) = (e[0], e[1], e[2], e[3])\n        attr_cache = cache[c]\n        if a not in attr_cache or attr_cache[a][0] <= p:\n            attr_cache[a] = (p, v)\n    for q in queries:\n        print(cache[q[0]][q[1]][1])\n(n, m) = map(int, input().split())\nconfig = []\nfor _ in range(n):\n    config.append(list(map(int, input().split())))\nqueries = []\nfor _ in range(m):\n    queries.append(list(map(int, input().split())))\nresolve(config, queries)", "from collections import defaultdict\n\ndef resolve(config, queries):\n    cache = defaultdict(dict)\n    for e in config:\n        (c, a, v, p) = (e[0], e[1], e[2], e[3])\n        attr_cache = cache[c]\n        if a not in attr_cache or attr_cache[a][0] <= p:\n            attr_cache[a] = (p, v)\n    for q in queries:\n        print(cache[q[0]][q[1]][1])\n(n, m) = map(int, input().split())\nconfig = []\nfor _ in range(n):\n    config.append(list(map(int, input().split())))\nqueries = []\nfor _ in range(m):\n    queries.append(list(map(int, input().split())))\nresolve(config, queries)", "from collections import defaultdict\n\ndef solve(css_elements, queries):\n    css_elements.sort(key=lambda x: x[-1])\n    css_dict = defaultdict(lambda : defaultdict(int))\n    for css_element in css_elements:\n        css_dict[css_element[0]][css_element[1]] = css_element[2]\n    for query in queries:\n        print(css_dict[query[0]][query[1]])\n\ndef main():\n    (n, m) = map(int, input().split())\n    css_elements = []\n    queries = []\n    for i in range(n):\n        css_elements.append(list(map(int, input().split())))\n    for i in range(m):\n        queries.append(list(map(int, input().split())))\n    solve(css_elements, queries)\nmain()", "nm = input().split(' ')\n(n, m) = (int(nm[0]), int(nm[1]))\nids = {}\nfor i in range(n):\n    iavp = input().split(' ')\n    (cssid, a, v, p) = (int(iavp[0]), int(iavp[1]), int(iavp[2]), int(iavp[3]))\n    if ids.get(cssid) is None:\n        ids[cssid] = {}\n        ids[cssid][a] = (v, p)\n    else:\n        temp = ids[cssid]\n        if temp.get(a) is None:\n            temp[a] = (v, p)\n        elif p >= temp[a][1]:\n            temp[a] = (v, p)\nfor i in range(m):\n    ia = input().split(' ')\n    (cssid, a) = (int(ia[0]), int(ia[1]))\n    print(ids[cssid][a][0])", "(n, m) = map(int, input().split())\ndct = {}\nfor i in range(n):\n    (id, attr, val, p) = map(int, input().split())\n    (prev_p, prev_val) = dct.get((id, attr), [0, 0])\n    if p >= prev_p:\n        dct[id, attr] = [p, val]\nfor i in range(m):\n    (id, attr) = map(int, input().split())\n    print(dct[id, attr][1])", "from collections import defaultdict\n(n, m) = map(int, input().split())\ndic = defaultdict(dict)\nfor i in range(n):\n    (idd, attr, val, prio) = map(int, input().split())\n    if attr not in dic[idd]:\n        dic[idd][attr] = [val, prio]\n    elif prio >= dic[idd][attr][1]:\n        dic[idd][attr] = [val, prio]\nfor i in range(m):\n    (idd, attr) = map(int, input().split())\n    print(dic[idd][attr][0])", "data = {}\n(n, m) = map(int, input().split())\nfor i in range(n):\n    (id_, attr, val, priority) = map(int, input().split())\n    key = (id_, attr)\n    if key not in data.keys() or priority >= data[key][1]:\n        data[key] = (val, priority)\nfor i in range(m):\n    (id_, attr) = map(int, input().split())\n    key = (id_, attr)\n    print(data[key][0])", "(n, m) = map(int, input().split())\nd1 = {}\nfor i in range(n):\n    (a, b, c, d) = map(int, input().split())\n    if (a, b) not in d1:\n        d1[a, b] = [c, d]\n    elif d1[a, b][1] <= d:\n        d1[a, b] = [c, d]\nfor __ in range(m):\n    (x, y) = map(int, input().split())\n    print(d1[x, y][0])", "def main():\n    (nb_stmt, nb_queries) = [int(x) for x in input().split()]\n    attrmap = dict()\n    prioritymap = dict()\n    for i in range(nb_stmt):\n        line = input().split()\n        key = line[0] + '#' + line[1]\n        priority = int(line[3])\n        if key not in prioritymap or prioritymap[key] <= priority:\n            attrmap[key] = int(line[2])\n            prioritymap[key] = priority\n    for j in range(nb_queries):\n        line = input().split()\n        key = line[0] + '#' + line[1]\n        print(attrmap[key])\nmain()", "def io(func=str, n=1):\n\n    def nfp():\n        ff = str\n        try:\n            it = iter(func)\n\n            def nf(val):\n                nonlocal ff\n                ff = next(it, ff)\n                return ff(val)\n            return type(func)((nf(va) for va in input().split()))\n        except TypeError:\n            return func(input())\n    if type(n) is list:\n        return [_(func, x) for x in n]\n    else:\n        t = lambda : nfp()\n        if n == 1:\n            return t()\n        elif n == 0:\n            return [t() for i in range(int(input()))]\n        else:\n            return [t() for i in range(n)]\n\ndef main():\n    (N, M) = io((int, int))\n    css = {}\n    for i in range(N):\n        (id, attr, v1, p1) = io((int, int, int, int))\n        (v2, p2) = css.get((id, attr), (0, 0))\n        if p2 <= p1:\n            css[id, attr] = (v1, p1)\n    for i in range(M):\n        (id, attr) = io((int, int))\n        yield css[id, attr][0]\nprint('\\n'.join([str(res) for res in main()]))", "(n, m) = (int(x) for x in input().strip().split())\nentry = dict()\nfor i in range(n):\n    (_id, attr, val, pty) = (int(x) for x in input().strip().split())\n    temp = entry.get(tuple((_id, attr)), tuple())\n    if not temp:\n        entry[_id, attr] = (pty, val)\n    elif temp[0] <= pty:\n        entry[_id, attr] = (pty, val)\nfor i in range(m):\n    (_id, attr) = (int(x) for x in input().strip().split())\n    print(entry[_id, attr][1])", "(t, queries) = map(int, input().split())\ncss = dict()\nfor _ in range(t):\n    (id, attr, val, priority) = map(int, input().split())\n    if (id, attr) in css and priority >= css[id, attr][1]:\n        css[id, attr] = (val, priority)\n    elif not (id, attr) in css:\n        css[id, attr] = (val, priority)\nfor _ in range(queries):\n    (id, attr) = map(int, input().split())\n    print(css[id, attr][0])", "(n, m) = map(int, input().split())\nstmt = {}\nfor i in range(n):\n    (id, attr, val, priority) = map(int, input().split())\n    if (id, attr) in stmt:\n        if stmt[id, attr][1] <= priority:\n            stmt[id, attr] = [val, priority]\n    else:\n        stmt[id, attr] = [val, priority]\nfor i in range(m):\n    (id, attr) = map(int, input().split())\n    print(stmt[id, attr][0])", "(n, m) = [int(x) for x in input().split()]\nelems = {}\nfor i in range(0, n):\n    (id, attr, val, priority) = [int(x) for x in input().split()]\n    if id not in elems:\n        elems[id] = {}\n    element = elems[id]\n    if attr not in element or element[attr][1] <= priority:\n        element[attr] = [val, priority]\nfor i in range(0, m):\n    (id, attr) = [int(x) for x in input().split()]\n    print(str(elems[id][attr][0]))", "I = [int(x) for x in input().split()]\nn = I[0]\nm = I[1]\nCssObject = {}\nCssPri = {}\nwhile n > 0:\n    n -= 1\n    I2 = [int(x) for x in input().split()]\n    id = I2[0]\n    attr = I2[1]\n    val = I2[2]\n    pri = I2[3]\n    if id in CssObject.keys():\n        if attr in CssObject[id].keys():\n            if CssPri[id][attr] <= pri:\n                CssPri[id][attr] = pri\n                CssObject[id][attr] = val\n        else:\n            CssObject[id][attr] = val\n            CssPri[id][attr] = pri\n    else:\n        CssObject[id] = {}\n        CssPri[id] = {}\n        CssObject[id][attr] = val\n        CssPri[id][attr] = pri\nwhile m > 0:\n    m -= 1\n    I3 = [int(x) for x in input().split()]\n    print(CssObject[I3[0]][I3[1]])", "(N, M) = input().split(' ')\nN = int(N)\nM = int(M)\nhm = {}\nfor i in range(N):\n    st = input()\n    (id, att, v, pr) = st.split(' ')\n    if (id, att) in hm:\n        if int(hm[id, att][1]) <= int(pr):\n            hm[id, att] = (v, pr)\n    else:\n        hm[id, att] = (v, pr)\nfor i in range(M):\n    (id, att) = input().split(' ')\n    print(hm[id, att][0])", "(N, M) = input().split(' ')\nN = int(N)\nM = int(M)\nhm = {}\nfor i in range(N):\n    st = input()\n    (id, att, v, pr) = st.split(' ')\n    if (id, att) in hm:\n        if int(hm[id, att][1]) <= int(pr):\n            hm[id, att] = [v, pr]\n    else:\n        hm[id, att] = [v, pr]\nfor i in range(M):\n    (id, att) = input().split(' ')\n    print(hm[id, att][0])", "(N, M) = input().split(' ')\nN = int(N)\nM = int(M)\nhm = {}\nfor i in range(N):\n    st = input()\n    (id, att, v, pr) = st.split(' ')\n    if (id, att) in hm:\n        if int(hm[id, att][1]) <= int(pr):\n            hm[id, att] = (v, pr)\n    else:\n        hm[id, att] = (v, pr)\nfor i in range(M):\n    (id, att) = input().split(' ')\n    print(hm[id, att][0])"]