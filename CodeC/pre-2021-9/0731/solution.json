["def ti():\n    return tuple(map(int, input().split()))\n\ndef li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\nfor tastcas in range(int(input())):\n    n = ii()\n    a = li()\n    d = {}\n    ans = 0\n    for i in range(-1000, 1001):\n        d[i] = 0\n    for i in a:\n        d[i] += 1\n    for i in range(-1000, 1001):\n        for j in range(i, 1001, 2):\n            if i == j:\n                x = (i + j) / 2\n                if d[x]:\n                    ans += d[i] * (d[i] - 1) // 2\n            else:\n                x = (i + j) // 2\n                if d[x]:\n                    ans += d[i] * d[j]\n    print(ans)", "def ti():\n    return tuple(map(int, input().split()))\n\ndef li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\nfor tastcas in range(int(input())):\n    n = ii()\n    a = li()\n    d = {}\n    ans = 0\n    for i in range(-1000, 1001):\n        d[i] = 0\n    for i in a:\n        d[i] += 1\n    for i in range(-1000, 1001):\n        for j in range(i, 1001, 2):\n            if i == j:\n                x = (i + j) / 2\n                if d[x]:\n                    ans += d[i] * (d[i] - 1) // 2\n            else:\n                x = (i + j) // 2\n                if d[x]:\n                    ans += d[i] * d[j]\n    print(ans)", "def ti():\n    return tuple(map(int, input().split()))\n\ndef li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\nfor tastcas in range(int(input())):\n    n = ii()\n    a = li()\n    d = {}\n    ans = 0\n    for i in range(-1000, 1001):\n        d[i] = 0\n    for i in a:\n        d[i] += 1\n    for i in range(-1000, 1001):\n        for j in range(i, 1001, 2):\n            if i == j:\n                x = (i + j) / 2\n                if d[x]:\n                    ans += d[i] * (d[i] - 1) // 2\n            else:\n                x = (i + j) // 2\n                if d[x]:\n                    ans += d[i] * d[j]\n    print(ans)", "def ti():\n    return tuple(map(int, input().split()))\n\ndef li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\nfor tastcas in range(int(input())):\n    n = ii()\n    a = li()\n    d = {}\n    ans = 0\n    for i in range(-1000, 1001):\n        d[i] = 0\n    for i in a:\n        d[i] += 1\n    for i in range(-1000, 1001):\n        for j in range(i, 1001, 2):\n            if i == j:\n                x = (i + j) / 2\n                if d[x]:\n                    ans += d[i] * (d[i] - 1) // 2\n            else:\n                x = (i + j) // 2\n                if d[x]:\n                    ans += d[i] * d[j]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    f = [0] * 2001\n    for i in a:\n        f[i] += 1\n    (ans1, ans2) = (0, 0)\n    for i in range(-1000, 1001, 1):\n        if f[i] != 0:\n            for j in range(i, 1001, 2):\n                if f[j] != 0:\n                    if i == j:\n                        ans1 += f[i] * (f[i] - 1) // 2\n                    elif (i + j) % 2 == 0 and f[(i + j) // 2] != 0:\n                        ans2 += f[i] * f[j]\n    print(ans1 + ans2)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    f = {}\n    for i in range(-1000, 1001, 1):\n        f[i] = 0\n    for i in a:\n        f[i] += 1\n    (ans1, ans2) = (0, 0)\n    for i in range(-1000, 1001, 1):\n        if f[i] != 0:\n            for j in range(i, 1001, 2):\n                if f[j] != 0:\n                    if i == j:\n                        ans1 += f[i] * (f[i] - 1) // 2\n                    elif (i + j) % 2 == 0 and f[(i + j) // 2] != 0:\n                        ans2 += f[i] * f[j]\n    print(ans1 + ans2)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in range(-1000, 1001):\n        d[i] = 0\n    for i in l:\n        d[i] += 1\n    ans = 0\n    for i in range(-1000, 1001):\n        for j in range(i, 1001, 2):\n            if i == j:\n                x = (i + j) / 2\n                if d[x]:\n                    ans += d[i] * (d[i] - 1) // 2\n            else:\n                x = (i + j) // 2\n                if d[x]:\n                    ans += d[i] * d[j]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in range(-1000, 1001):\n        d[i] = 0\n    for i in l:\n        d[i] += 1\n    ans = 0\n    for i in range(-1000, 1001):\n        for j in range(i, 1001, 2):\n            if i == j:\n                x = (i + j) / 2\n                if d[x]:\n                    ans += d[i] * (d[i] - 1) // 2\n            else:\n                x = (i + j) // 2\n                if d[x]:\n                    ans += d[i] * d[j]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in range(-1000, 1001):\n        d[i] = 0\n    for i in l:\n        d[i] += 1\n    ans = 0\n    for i in range(-1000, 1001):\n        for j in range(i, 1001, 2):\n            if i == j:\n                x = (i + j) / 2\n                if d[x]:\n                    ans += d[i] * (d[i] - 1) // 2\n            else:\n                x = (i + j) // 2\n                if d[x]:\n                    ans += d[i] * d[j]\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    c = 0\n    x = max(l)\n    for j in range(-1000, 1001):\n        d[j] = 0\n    for j in l:\n        d[j] += 1\n    for j in range(-1000, 1001):\n        k = j\n        while k <= 1000:\n            if j == k:\n                z = (j + k) // 2\n                if d[z]:\n                    c += d[j] * (d[k] - 1) // 2\n            else:\n                z = (j + k) // 2\n                if d[z]:\n                    c += d[j] * d[k]\n            k += 2\n    print(c)", "from collections import Counter\nt = int(input())\nwhile t:\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    count = 0\n    x = max(l)\n    for i in range(-1000, 1001):\n        d[i] = 0\n    for i in l:\n        d[i] += 1\n    for i in range(-1000, 1001):\n        j = i\n        while j <= 1000:\n            if i == j:\n                k = (i + j) // 2\n                if d[k]:\n                    count += d[i] * (d[j] - 1) // 2\n            else:\n                k = (i + j) // 2\n                if d[k]:\n                    count += d[i] * d[j]\n            j += 2\n    print(count)\n    t -= 1", "from collections import Counter\nt = int(input())\nwhile t:\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    count = 0\n    x = max(l)\n    for i in range(-1000, 1001):\n        d[i] = 0\n    for i in l:\n        d[i] += 1\n    for i in range(-1000, 1001):\n        j = i\n        while j <= 1000:\n            if i == j:\n                k = (i + j) // 2\n                if d[k]:\n                    count += d[i] * (d[j] - 1) // 2\n            else:\n                k = (i + j) // 2\n                if d[k]:\n                    count += d[i] * d[j]\n            j += 2\n    print(count)\n    t -= 1", "from collections import Counter\nt = int(input())\nwhile t:\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    count = 0\n    x = max(l)\n    for i in range(-1000, 1001):\n        d[i] = 0\n    for i in l:\n        d[i] += 1\n    for i in range(-1000, 1001):\n        j = i\n        while j <= 1000:\n            if i == j:\n                k = (i + j) // 2\n                if d[k]:\n                    count += d[i] * (d[j] - 1) // 2\n            else:\n                k = (i + j) // 2\n                if d[k]:\n                    count += d[i] * d[j]\n            j += 2\n    print(count)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in range(-1000, 1001):\n        d[i] = 0\n    for i in l:\n        d[i] += 1\n    ans = 0\n    for i in range(-1000, 1001):\n        for j in range(i, 1001, 2):\n            if i == j:\n                x = (i + j) / 2\n                if d[x]:\n                    ans += d[i] * (d[i] - 1) // 2\n            else:\n                x = (i + j) // 2\n                if d[x]:\n                    ans += d[i] * d[j]\n    print(ans)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(int)\n    f = defaultdict(int)\n    for i in range(n):\n        d[2 * (a[i] + 1000)] = 1\n        f[a[i] + 1000] += 1\n    k = 0\n    ans = 0\n    keys = list(f.keys())\n    for i in keys:\n        ans += f[i] * (f[i] - 1) // 2\n        k += 1\n        for j in keys[k:]:\n            if d[i + j]:\n                ans += f[i] * f[j]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in range(-1000, 1001):\n        d[i] = 0\n    for i in l:\n        d[i] += 1\n    ans = 0\n    for i in range(-1000, 1001):\n        for j in range(i, 1001, 2):\n            if i == j:\n                x = (i + j) / 2\n                if d[x]:\n                    ans += d[i] * (d[i] - 1) // 2\n            else:\n                x = (i + j) // 2\n                if d[x]:\n                    ans += d[i] * d[j]\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0 for j in range(2001)]\n    zz = 0\n    for num in a:\n        b[num] += 1\n    for num in range(-1000, 1001):\n        if b[num] == 0:\n            continue\n        if b[num] > 1:\n            zz += b[num] * (b[num] - 1) / 2\n        high_num = num\n        low_num = num\n        while True:\n            high_num += 1\n            low_num -= 1\n            if high_num > 1000 or low_num < -1000:\n                break\n            zz += b[high_num] * b[low_num]\n    print(int(zz))", "def mi():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(mi())\n    ans = 0\n    v = list(set(a))\n    c = {i: 0 for i in range(-1000, 1001)}\n    for i in a:\n        c[i] += 1\n    for i in range(-1000, 1001):\n        if not c[i]:\n            continue\n        ans += c[i] * (c[i] - 1) // 2\n        x = 1\n        while i - x >= -1000 and i + x <= 1000:\n            ans += c[i - x] * c[i + x]\n            x += 1\n    print(ans)", "for i in range(int(input())):\n    d = {}\n    n = int(input())\n    for i in range(0, 2001):\n        d[i] = 0\n    l = list(map(int, input().split()))\n    for i in range(n):\n        l[i] = l[i] + 1000\n        d[l[i]] += 1\n    ans = 0\n    for mid in range(2001):\n        if d[mid] == 0:\n            continue\n        ans += d[mid] * (d[mid] - 1) // 2\n        x = 1\n        while mid - x >= 0 and mid + x <= 2000:\n            ans += d[mid - x] * d[mid + x]\n            x += 1\n    print(ans)", "from collections import defaultdict as dick\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (f_d, f) = (dick(int), dick(int))\n    for i in range(n):\n        f_d[2 * (a[i] + 1000)] = 1\n        f[a[i] + 1000] += 1\n    (k, ans) = (0, 0)\n    keys = list(f.keys())\n    for i in keys:\n        ans += f[i] * (f[i] - 1) // 2\n        k += 1\n        for j in keys[k:]:\n            if f_d[i + j] == 1:\n                ans += f[i] * f[j]\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    l = [0 for i in range(200011)]\n    A = list(map(int, input().split()))\n    for i in A:\n        l[1000 + i] += 1\n    s = 0\n    for i in range(2001):\n        for j in range(i, 2001, 2):\n            if l[(i + j) // 2] != 0:\n                if i == j:\n                    s += l[i] * (l[i] - 1) // 2\n                else:\n                    s += l[i] * l[j]\n    print(s)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(int)\n    f = defaultdict(int)\n    for i in range(n):\n        d[2 * (a[i] + 1000)] = 1\n        f[a[i] + 1000] += 1\n    k = 0\n    ans = 0\n    keys = list(f.keys())\n    for i in keys:\n        ans += f[i] * (f[i] - 1) // 2\n        k += 1\n        for j in keys[k:]:\n            if d[i + j]:\n                ans += f[i] * f[j]\n    print(ans)", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    i = 0\n    f = [0 for i in range(2 * 1000 + 2)]\n    A = list(map(int, input().split()))\n    for i in range(N):\n        f[A[i] + 1000] += 1\n    ct = 0\n    for i in range(2 * 1000 + 2):\n        for j in range(i + 1, 2 * 1000 + 2):\n            if f[(i + j) // 2] > 0 and (i + j) % 2 == 0:\n                ct += f[i] * f[j]\n        if f[i] > 1:\n            ct += (f[i] - 1) * f[i] // 2\n    print(ct)", "_ = int(input())\nfor __ in range(_):\n    N = int(input())\n    A = [int(x) + 1000 for x in input().split()]\n    f = [0] * 2001\n    ans = 0\n    for i in A:\n        f[i] += 1\n    for i in range(2001):\n        if f[i] != 0:\n            for j in range(i + 2, 2001, 2):\n                if f[j] != 0:\n                    if f[(i + j) // 2] != 0:\n                        ans += f[i] * f[j]\n            ans += (f[i] - 1) * f[i] // 2\n    print(ans)", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    l = []\n    no = input().split()\n    for i2 in no:\n        l.append(int(i2) + 1000)\n    c = [0 for val in range(0, 2001)]\n    for i2 in l:\n        c[i2] += 1\n    tc = 0\n    for j in range(0, 1999):\n        if c[j]:\n            if c[j] > 1:\n                tc += c[j] * (c[j] - 1) // 2\n            for j2 in range(j + 2, 2001, 2):\n                if c[(j + j2) // 2]:\n                    tc += c[j] * c[j2]\n    print(tc)", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    l = []\n    no = input().split()\n    for i2 in no:\n        l.append(int(i2) + 1000)\n    c = [0 for val in range(0, 2001)]\n    for i2 in l:\n        c[i2] += 1\n    tc = 0\n    for j in range(0, 2001):\n        if c[j]:\n            if c[j] > 1:\n                tc += c[j] * (c[j] - 1) // 2\n            for (j1, j2) in zip(range(j + 1, 2001), range(j - 1, 0, -1)):\n                if c[j1] > 0 and c[j2] > 0:\n                    tc += c[j1] * c[j2]\n    print(tc)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    freq = [0] * 2001\n    for i in range(n):\n        freq[l[i] + 1000] += 1\n    count = 0\n    for i in range(2001):\n        count += freq[i] * (freq[i] - 1) // 2\n        for j in range(i + 2, 2001, 2):\n            if freq[(i + j) // 2]:\n                count += freq[i] * freq[j]\n    print(count)", "q = int(input())\nfor i in range(q):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    c = [0] * 2001\n    for j in ls:\n        c[j + 1000] += 1\n    ans = 0\n    for j in range(2001):\n        ans += c[j] * (c[j] - 1) // 2\n        for k in range(j + 2, 2001, 2):\n            if c[(j + k) // 2]:\n                ans += c[j] * c[k]\n    print(ans)", "from collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    k = Counter(lis)\n    j = list(k.keys())\n    l = list(k.values())\n    count = 0\n    doub = set([x << 1 for x in j])\n    for x in range(len(j)):\n        count += l[x] * (l[x] - 1) >> 1\n        for q in range(x + 1, len(j)):\n            if j[x] + j[q] in doub:\n                count += l[x] * l[q]\n    print(count)", "from collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    k = Counter(lis)\n    j = list(k.keys())\n    l = list(k.values())\n    count = 0\n    doub = set([x << 1 for x in j])\n    for x in range(len(j)):\n        count += l[x] * (l[x] - 1) >> 1\n        for q in range(x + 1, len(j)):\n            if j[x] + j[q] in doub:\n                count += l[x] * l[q]\n    print(count)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = 0\n    d = [0] * 2100\n    for x in arr:\n        d[x + 1000] += 1\n    for i in range(1999):\n        if d[i] != 0:\n            for j in range(i + 2, 2004, 2):\n                if d[j] != 0:\n                    if d[(i + j) // 2] != 0:\n                        k += d[i] * d[j]\n            k += (d[i] - 1) * d[i] // 2\n    print(k)", "for i in range(int(input())):\n    n = int(input())\n    ev = []\n    od = []\n    c = 0\n    p = list(map(int, input().split()))\n    arr = [0] * 2005\n    for j in range(n):\n        arr[p[j] + 1000] += 1\n    for k in range(0, 1999):\n        if arr[k] != 0:\n            for p in range(k + 2, 2004, 2):\n                if arr[p] != 0:\n                    if arr[int((k + p) / 2)] != 0:\n                        c += arr[p] * arr[k]\n            c += (arr[k] - 1) * arr[k] / 2\n    print(int(c))", "def countpair(hasharr, ar):\n    count = 0\n    for i in range(len(ar) - 1):\n        a = ar[i]\n        if a < 0:\n            f = hasharr[1000 + abs(a)]\n        else:\n            f = hasharr[a]\n        for j in ar[i + 1:]:\n            b = j\n            num = (a + b) // 2\n            if num < 0:\n                num = 1000 + abs(num)\n            if b < 0:\n                g = hasharr[1000 + abs(b)]\n            else:\n                g = hasharr[b]\n            if hasharr[num] >= 1:\n                h = f * g\n                count += h\n    return count\n\ndef selfcount(hasharr, ar):\n    co = 0\n    for i in ar:\n        if i < 0:\n            i = 1000 + abs(i)\n        if hasharr[i] >= 2:\n            a = hasharr[i]\n            b = a * (a - 1) // 2\n            co += b\n    return co\nfor z in range(int(input())):\n    n = int(input())\n    ar = [int(x) for x in input().split()]\n    k = [0 for i in range(2001)]\n    even = []\n    odd = []\n    for i in ar:\n        if i < 0:\n            k[1000 + abs(i)] += 1\n        else:\n            k[i] += 1\n    for j in range(2001):\n        if k[j] != 0:\n            if j % 2 == 0:\n                if j < 1001:\n                    even.append(j)\n                else:\n                    even.append(1000 - j)\n            elif j < 1001:\n                odd.append(j)\n            else:\n                odd.append(1000 - j)\n    xx = countpair(k, even)\n    y = countpair(k, odd)\n    p = selfcount(k, odd)\n    q = selfcount(k, even)\n    print(xx + y + p + q)", "t = int(input().strip())\nfor i in range(t):\n    n = int(input().strip())\n    a = [int(x) for x in input().strip().split(' ')]\n    b = [0] * 1000001\n    m = 0\n    for i in range(n):\n        b[a[i]] += 1\n    c = []\n    d = []\n    p = 0\n    q = 0\n    s = 0\n    h = set(a)\n    h = list(h)\n    for i in range(len(h)):\n        if h[i] % 2:\n            c.append(h[i])\n            p += 1\n        else:\n            d.append(h[i])\n            q += 1\n    if c != []:\n        for i in range(p - 1):\n            for j in range(i + 1, p):\n                if b[int((c[i] + c[j]) / 2)]:\n                    s += b[c[i]] * b[c[j]]\n            s += int(b[c[i]] * (b[c[i]] - 1) / 2)\n        s += int(b[c[p - 1]] * (b[c[p - 1]] - 1) / 2)\n    if d != []:\n        for i in range(q - 1):\n            for j in range(i + 1, q):\n                if b[int((d[i] + d[j]) / 2)]:\n                    s += b[d[i]] * b[d[j]]\n            s += int(b[d[i]] * (b[d[i]] - 1) / 2)\n        s += int(b[d[q - 1]] * (b[d[q - 1]] - 1) / 2)\n    print(s)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    Ad = Counter(A)\n    B = list(Ad.keys())\n    BF = list(Ad.values())\n    BS = set([b << 1 for b in B])\n    (otpt, m) = (0, len(B))\n    for i in range(m):\n        (a0, a1f) = (B[i], BF[i])\n        otpt += a1f * (a1f - 1) >> 1\n        for j in range(i + 1, m):\n            a1 = a0 + B[j]\n            if a1 in BS:\n                otpt += a1f * BF[j]\n    print(otpt)", "for _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    oddS = set()\n    oddD = {}\n    evenS = set()\n    evenD = {}\n    for a in A:\n        if a % 2 == 0:\n            evenS.add(a)\n            if a in evenD:\n                evenD[a] += 1\n            else:\n                evenD[a] = 1\n        else:\n            oddS.add(a)\n            if a in oddD:\n                oddD[a] += 1\n            else:\n                oddD[a] = 1\n    evenS = list(evenS)\n    oddS = list(oddS)\n    double = set([2 * x for x in list(set(A))])\n    count = 0\n    for i in range(len(evenS) - 1):\n        for j in range(i + 1, len(evenS)):\n            if evenS[i] != evenS[j] and evenS[i] + evenS[j] in double:\n                count += evenD[evenS[i]] * evenD[evenS[j]]\n    for i in range(len(oddS) - 1):\n        for j in range(i + 1, len(oddS)):\n            if oddS[i] != oddS[j] and oddS[i] + oddS[j] in double:\n                count += oddD[oddS[i]] * oddD[oddS[j]]\n    for a in evenS:\n        if evenD[a] > 1 and 2 * a in double:\n            count += evenD[a] * (evenD[a] - 1) / 2\n    for a in oddS:\n        if oddD[a] > 1 and 2 * a in double:\n            count += oddD[a] * (oddD[a] - 1) / 2\n    print(int(count))", "import operator as op\nimport functools\n\ndef ncr(n, r):\n    r = min(r, n - r)\n    numer = functools.reduce(op.mul, range(n, n - r, -1), 1)\n    denom = functools.reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom\n\ndef findPairs(arr, n):\n    s = set()\n    d = {}\n    val = 0\n    for x in arr:\n        s.add(2 * x)\n    for x in arr:\n        if x not in d:\n            d[x] = 1\n        else:\n            d[x] += 1\n    set1 = set(arr)\n    arr1 = list(set1)\n    arr1.sort()\n    for i in range(len(arr1) - 1):\n        for j in range(i + 1, len(arr1)):\n            sum = arr1[i] + arr1[j]\n            if sum in s:\n                val += d[arr1[i]] * d[arr1[j]]\n    for x in arr1:\n        if d[x] > 1:\n            val += ncr(d[x], 2)\n    print(val)\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mi = min(l)\n    for x in l:\n        x -= mi\n    findPairs(l, n)", "test = int(input())\nfor i in range(0, test):\n    a = [0 for x in range(0, 2001)]\n    pair = 0\n    size = int(input())\n    arr = list(map(int, input().split(' ')))\n    for j in range(0, size):\n        a[arr[j] + 1000] = a[arr[j] + 1000] + 1\n    for j in range(0, 2001):\n        if a[j] != 0:\n            pair = pair + int(a[j] * (a[j] - 1) / 2)\n            if j < 1000:\n                begin = 0\n                end = 2 * j\n            else:\n                begin = 2 * j - 2000\n                end = 2000\n            while end != j and begin != j:\n                pair = pair + a[end] * a[begin]\n                end = end - 1\n                begin = begin + 1\n    print(int(pair))", "def dictionary():\n    dic = {}\n    for i in range(-1000, 1001):\n        dic[i] = 0\n    return dic\n\ndef oddcount(odd_count, odd_list, d):\n    c = 0\n    for i in range(0, odd_count):\n        num = d[odd_list[i]]\n        c += num * (num - 1) // 2\n        for j in range(i + 1, odd_count):\n            if d[(odd_list[i] + odd_list[j]) // 2] >= 1:\n                c += d[odd_list[i]] * d[odd_list[j]]\n    return c\n\ndef evencount(even_count, even_list, d):\n    c = 0\n    for i in range(0, even_count):\n        num = d[even_list[i]]\n        c += num * (num - 1) // 2\n        for j in range(i + 1, even_count):\n            if d[(even_list[i] + even_list[j]) // 2] >= 1:\n                c += d[even_list[i]] * d[even_list[j]]\n    return c\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dictionary()\n    odd_list = []\n    even_list = []\n    odd_count = 0\n    even_count = 0\n    count = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            if d[a[i]] == 0:\n                even_list += [a[i]]\n                even_count += 1\n        elif a[i] % 2 != 0:\n            if d[a[i]] == 0:\n                odd_list += [a[i]]\n                odd_count += 1\n        d[a[i]] += 1\n    count += oddcount(odd_count, odd_list, d) + evencount(even_count, even_list, d)\n    print(count)", "t = int(input())\nwhile t:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [0] * 2001\n    count = 0\n    for x in a:\n        b[x + 1000] += 1\n    for i in range(0, 2000):\n        if b[i] > 0:\n            for j in range(i + 2, 2000, 2):\n                if b[j] > 0:\n                    if b[int((i + j) / 2)] > 0:\n                        count += b[j] * b[i]\n        if b[i] > 1:\n            count += int(b[i] * (b[i] - 1) / 2)\n    print(count)\n    t -= 1", "import itertools, sys\nt = int(input().strip())\n\ndef pair(s, d):\n    c = 0\n    l = [thing for thing in itertools.combinations(d, 2)]\n    for pair in l:\n        i = pair[0]\n        j = pair[1]\n        if i + j in s:\n            c += d[i] * d[j]\n    for i in d:\n        val = d[i]\n        if val > 1:\n            c += val * (val - 1) // 2\n    return c\nfor case in range(t):\n    n = int(input().strip())\n    a = [int(i) for i in input().strip().split()]\n    sd = set()\n    do = {}\n    de = {}\n    for i in a:\n        if i % 2 == 0:\n            de[i] = de.get(i, 0) + 1\n        else:\n            do[i] = do.get(i, 0) + 1\n        sd.add(2 * i)\n    print(pair(sd, do) + pair(sd, de))", "import math\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    ls = list(map(int, input().split(' ')))\n    pro = [0] * 2001\n    for i in range(n):\n        pro[ls[i] + 1000] = pro[ls[i] + 1000] + 1\n    result = 0\n    for i in range(0, 2001, 1):\n        if pro[i] > 1:\n            result = result + int(pro[i] * (pro[i] - 1) / 2)\n    for i in range(0, 2001, 1):\n        for j in range(i + 2, 2001, 2):\n            if pro[i] > 0 and pro[j] > 0 and (pro[int((i + j) / 2)] > 0):\n                result = result + pro[i] * pro[j]\n    print(result)", "T = int(input())\nfor a0 in range(T):\n    n = int(input())\n    res = 0\n    arr = list(map(int, input().split()))\n    numbers = [0 for i in range(2001)]\n    for i in range(n):\n        numbers[arr[i] + 1000] += 1\n    for i in range(2001):\n        if numbers[i] == 0:\n            continue\n        res += numbers[i] * (numbers[i] - 1) // 2\n        for j in range(i):\n            if 2 * i - j > 2000:\n                continue\n            res += numbers[j] * numbers[2 * i - j]\n    print(res)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    count = []\n    ans = 0\n    for j in range(2001):\n        count.append(0)\n    for x in input().split():\n        y = int(x)\n        count[y + 1000] = count[y + 1000] + 1\n    for j in range(2001):\n        for k in range(j + 2, 2001, 2):\n            if count[j] > 0 and count[k] > 0 and (count[(j + k) // 2] > 0):\n                ans = ans + count[j] * count[k]\n    for j in range(2001):\n        ans = ans + count[j] * (count[j] - 1) // 2\n    print(ans, end='\\n')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = [0] * 2001\n    cnt = 0\n    for i in l:\n        a[i + 1000] += 1\n    for i in a:\n        if i > 1:\n            cnt += i * (i - 1) // 2\n    cb = 0\n    for i in range(2000):\n        if a[i] != 0:\n            x = i - 1000\n            j = i + 2\n            while j < 2001:\n                if a[j] != 0:\n                    y = j - 1000\n                    z = (x + y) // 2\n                    if a[z + 1000] != 0:\n                        cb += a[i] * a[j]\n                j += 2\n    print(cnt + cb)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    c = [0 for i in range(-1000, 1001)]\n    a = [int(x) for x in input().split()]\n    for i in a:\n        c[i + 1000] += 1\n    cnt = 0\n    for i in range(-1000, 1001):\n        if c[i + 1000] == 0:\n            continue\n        (x, y) = (i, i)\n        while x >= -1000 and y <= 1000:\n            if x == y:\n                cnt += int(c[x + 1000] * (c[x + 1000] - 1) / 2)\n            else:\n                cnt += c[x + 1000] * c[y + 1000]\n            (x, y) = (x - 1, y + 1)\n    print(cnt)\n    t -= 1", "from collections import Counter\nfrom itertools import combinations\nfor q in range(int(input())):\n    number = [{}, {}]\n    s = {}\n    ss = 0\n    n = input()\n    for i in map(int, input().split()):\n        t = i % 2\n        if i + i in s:\n            number[t][i] += 1\n        else:\n            number[t][i] = 1\n            s[i + i] = True\n    for A in number:\n        for x in combinations(A, 2):\n            if sum(x) in s:\n                ss += A[x[0]] * A[x[1]]\n        for i in A:\n            ss += A[i] * (A[i] - 1) // 2\n    print(ss)", "from itertools import combinations\nfor _ in range(int(input())):\n    number = [{}, {}]\n    loob = {}\n    mid = 0\n    n = input()\n    for x in map(int, input().split()):\n        t = x % 2\n        if x + x in loob:\n            number[t][x] += 1\n        else:\n            number[t][x] = 1\n            loob[x * 2] = True\n    for A in number:\n        for x in combinations(A, 2):\n            if sum(x) in loob:\n                mid += A[x[0]] * A[x[1]]\n        for d in A:\n            mid += A[d] * (A[d] - 1) // 2\n    print(mid)", "from itertools import combinations\nfor i in range(int(input())):\n    (N, A) = (int(input()), list(map(int, input().split())))\n    (too, d) = ({}, [{}, {}])\n    for i in A:\n        t = i % 2\n        if i in d[t]:\n            d[t][i] += 1\n        else:\n            too[2 * i] = 0\n            d[t][i] = 1\n    mid = 0\n    for even in d:\n        for i in even:\n            mid += (even[i] - 1) * even[i] // 2\n        for (x, y) in combinations(even.keys(), r=2):\n            if x + y in too:\n                mid += even[x] * even[y]\n    print(mid)", "test = int(input())\nwhile test > 0:\n    test -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = [0] * 2001\n    for x in l:\n        a[x + 1000] += 1\n    cou = 0\n    for i in range(2001):\n        if a[i] > 0:\n            j = i\n            while j <= 2000:\n                if a[j] >= 1:\n                    if i == j:\n                        cou += a[i] * (a[i] - 1) // 2\n                    elif a[(i + j) // 2] > 0:\n                        cou += a[i] * a[j]\n                j += 2\n    print(cou)", "from operator import mul\nfrom fractions import Fraction\nfrom functools import reduce\n\ndef nCk(n, k):\n    return int(n * (n - 1) // 2)\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    line = input().split()\n    elements = list(map(int, line))\n    d = {}\n    element_set = set(elements)\n    final_set = set()\n    for e in elements:\n        try:\n            d[e] += 1\n        except KeyError:\n            d[e] = 1\n    elements = list(element_set)\n    elements.sort()\n    (even, odd) = ([], [])\n    for x in elements:\n        if x % 2 == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n    count = 0\n    for i in range(len(even)):\n        for j in range(i + 1, len(even)):\n            temp = (even[i] + even[j]) / 2\n            if temp in element_set:\n                count += d[even[i]] * d[even[j]]\n        if d[even[i]] > 1:\n            count += nCk(d[even[i]], 2)\n    for i in range(len(odd)):\n        for j in range(i + 1, len(odd)):\n            temp = (odd[i] + odd[j]) / 2\n            if temp in element_set:\n                count += d[odd[i]] * d[odd[j]]\n        if d[odd[i]] > 1:\n            count += nCk(d[odd[i]], 2)\n    print(count)", "from operator import mul\nfrom fractions import Fraction\nfrom functools import reduce\n\ndef nCk(n, k):\n    return int(n * (n - 1) // 2)\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    line = input().split()\n    elements = list(map(int, line))\n    d = {}\n    element_set = set(elements)\n    final_set = set()\n    for e in elements:\n        try:\n            d[e] += 1\n        except KeyError:\n            d[e] = 1\n    elements = list(element_set)\n    elements.sort()\n    (even, odd) = ([], [])\n    for x in elements:\n        if x % 2 == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n    count = 0\n    for i in range(len(even)):\n        for j in range(i + 1, len(even)):\n            temp = (even[i] + even[j]) / 2\n            if temp in element_set:\n                count += d[even[i]] * d[even[j]]\n        if d[even[i]] > 1:\n            count += nCk(d[even[i]], 2)\n    for i in range(len(odd)):\n        for j in range(i + 1, len(odd)):\n            temp = (odd[i] + odd[j]) / 2\n            if temp in element_set:\n                count += d[odd[i]] * d[odd[j]]\n        if d[odd[i]] > 1:\n            count += nCk(d[odd[i]], 2)\n    print(count)", "import math\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    arr = list(map(int, input().split()))\n    l = 2001\n    n = l\n    freq = [0] * l\n    for i in range(len(arr)):\n        freq[1001 + arr[i] - 1] += 1\n    k = 0\n    mid = n // 2\n    count = 0\n    for i in range(n):\n        temp = 0\n        mul = k\n        if freq[i] > 0:\n            temp += freq[i] * (freq[i] - 1) // 2\n            while mul > 0:\n                temp += freq[i - mul] * freq[i + mul]\n                mul -= 1\n        count += temp\n        i += 1\n        if n % 2 == 0:\n            if i < mid:\n                k += 1\n            elif i > mid:\n                k -= 1\n        elif i <= mid:\n            k += 1\n        elif i >= mid:\n            k -= 1\n    print(count)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = input().split()\n    vals = [0] * 2001\n    for i in l:\n        vals[int(i) + 1000] += 1\n    total = 0\n    for i in range(2001):\n        for j in range(i, 2001, 2):\n            if i != j and vals[(i + j) // 2]:\n                total += vals[i] * vals[j]\n            elif i == j and vals[i] > 1:\n                total += vals[i] * (vals[i] - 1) // 2\n    print(total)", "def give_me_count2(d):\n    count = 0\n    for (key, val) in d.items():\n        count += val * (val - 1) // 2\n    return count\n\ndef give_me_count(_dict, d):\n    count = 0\n    L = list(_dict.keys())\n    for i in range(0, len(L) - 1):\n        for j in range(i + 1, len(L)):\n            if (L[i] + L[j]) // 2 in d:\n                count += d[L[i]] * d[L[j]]\n                pass\n            pass\n        pass\n    return count\n\ndef take_input():\n    N = int(input())\n    L = map(int, input().split())\n    d = {}\n    (_even, _odd) = ({}, {})\n    for i in L:\n        d[i] = d.setdefault(i, 0) + 1\n        if i % 2:\n            _odd[i] = 1\n        else:\n            _even[i] = 1\n    print(give_me_count2(d) + give_me_count(_even, d) + give_me_count(_odd, d))\nT = int(input())\nfor i in range(T):\n    take_input()", "import itertools\nimport sys\nimport io\n\ndef mbc(n):\n    return n + 1000\n\ndef mbdc(n):\n    return n - 1000\nfor tests in range(int(input())):\n    mb = [0] * 2000\n    mb2 = [0] * 2000\n    n = int(input())\n    A = [int(i) for i in input().split()]\n    for value in A:\n        mb[mbc(value)] += 1\n    for i in range(len(mb)):\n        mb2[i] += mb[i] * (mb[i] - 1) // 2\n        for j in range(i + 2, len(mb), 2):\n            mb2[(i + j) // 2] += mb[i] * mb[j]\n    print(sum([(i != 0) * j for (i, j) in zip(mb, mb2)]))", "for t in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    R = set(A)\n    (even, odd, pairs) = ([], [], 0)\n    Occ = {}\n    for x in A:\n        if x not in Occ:\n            Occ[x] = 1\n        else:\n            Occ[x] += 1\n    for x in R:\n        if x % 2 == 1:\n            odd.append(x)\n        else:\n            even.append(x)\n    for x in range(len(even)):\n        occ = Occ[even[x]]\n        if occ > 1:\n            pairs += (occ - 1) * occ // 2\n        if x == len(even) - 1:\n            break\n        for y in range(x + 1, len(even)):\n            if (even[x] + even[y]) // 2 in R:\n                pairs += occ * Occ[even[y]]\n    for x in range(len(odd)):\n        occ = Occ[odd[x]]\n        if occ > 1:\n            pairs += (occ - 1) * occ // 2\n        if x == len(odd) - 1:\n            break\n        for y in range(x + 1, len(odd)):\n            if (odd[x] + odd[y]) // 2 in R:\n                pairs += occ * Occ[odd[y]]\n    print(pairs)", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        count = 0\n        indexing = [0 for x in range(2001)]\n        array = [int(x) for x in input().split()]\n        for i in array:\n            indexing[i + 1000] += 1\n        for i in range(2000):\n            for j in range(i + 1, 2001):\n                if indexing[i] > 0 and indexing[j] > 0:\n                    if (i + j) % 2 == 0:\n                        if indexing[(i + j) // 2] != 0:\n                            count += indexing[i] * indexing[j]\n        for i in indexing:\n            if i > 1:\n                count += i * (i - 1) // 2\n        print(count)\nmain()", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    array = list(map(int, input().split()))\n    pairs = []\n    total = 0\n    for j in range(2001):\n        pairs.append(0)\n    for j in range(N):\n        pairs[array[j] + 1000] += 1\n    for j in range(-1000, 1001):\n        index = j + 1000\n        if pairs[index] == 0:\n            continue\n        else:\n            if pairs[index] > 1:\n                total += pairs[index] * (pairs[index] - 1) / 2\n            for g in range(j + 2, 1001, 2):\n                temp_index = g + 1000\n                if pairs[temp_index] == 0:\n                    continue\n                elif pairs[(j + g) // 2 + 1000] == 0:\n                    continue\n                else:\n                    total += pairs[temp_index] * pairs[index]\n    print(int(total))", "import operator as op\nfrom functools import reduce\n\ndef ncr(n, r):\n    r = min(r, n - r)\n    numer = reduce(op.mul, range(n, n - r, -1), 1)\n    denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A = [float(x) for x in input().split()]\n    mymap = [0] * 2002\n    maxv = 0\n    myset = set(A)\n    for x in A:\n        if x > maxv:\n            maxv = int(x)\n        mymap[int(x) + 1000] += 1\n    count = 0\n    for k in myset:\n        i = int(k) + 1000\n        if mymap[i] == 0:\n            continue\n        for j in range(i + 2, 2002, 2):\n            avg = (i + j) / 2\n            if mymap[j] == 0:\n                continue\n            elif mymap[int(avg)] > 0:\n                count += mymap[i] * mymap[j]\n        if mymap[i] > 1:\n            count += ncr(mymap[i], 2)\n    print(count)", "import operator as op\nfrom functools import reduce\n\ndef ncr(n, r):\n    r = min(r, n - r)\n    numer = reduce(op.mul, range(n, n - r, -1), 1)\n    denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A = [float(x) for x in input().split()]\n    mymap = [0] * 2002\n    maxv = 0\n    myset = set(A)\n    for x in A:\n        if x > maxv:\n            maxv = int(x)\n        mymap[int(x) + 1000] += 1\n    count = 0\n    for i in range(0, 2002):\n        if mymap[i] == 0:\n            continue\n        for j in range(i + 2, 2002, 2):\n            avg = (i + j) / 2\n            if mymap[j] == 0:\n                continue\n            elif mymap[int(avg)] > 0:\n                count += mymap[i] * mymap[j]\n        if mymap[i] > 1:\n            count += ncr(mymap[i], 2)\n    print(count)", "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        count = 0\n        indexing = [0 for x in range(2001)]\n        array = [int(x) for x in input().split()]\n        for i in array:\n            indexing[i + 1000] += 1\n        for i in range(2000):\n            for j in range(i + 1, 2001):\n                if indexing[i] > 0 and indexing[j] > 0:\n                    if (i + j) % 2 == 0:\n                        if indexing[(i + j) // 2] != 0:\n                            count += indexing[i] * indexing[j]\n        for i in indexing:\n            if i > 1:\n                count += i * (i - 1) // 2\n        print(count)\nmain()", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(set(a))\n    fa = [0] * 2001\n    ans = 0\n    for j in a:\n        fa[j + 1000] += 1\n    for j in range(2001):\n        for k in range(j + 2, 2001, 2):\n            if fa[k] != 0:\n                avg = (j + k) // 2\n                if fa[avg] != 0:\n                    ans += fa[j] * fa[k]\n        m = fa[j]\n        ans += m * (m - 1) // 2\n    print(ans)", "counts = {}\nsums = {}\nfor i in range(-2000, 2001):\n    sums[i] = 0\n    if i >= -1000 or i <= 1000:\n        counts[i] = 0\nt = int(input())\nfor y in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    counts = counts.fromkeys(counts, 0)\n    sums = sums.fromkeys(sums, 0)\n    odd = set()\n    eve = set()\n    eve_p = odd_p = 0\n    for i in l:\n        if counts[i]:\n            if i % 2 == 0:\n                eve.add(i)\n            else:\n                odd.add(i)\n        elif i % 2 == 0:\n            eve.add(i)\n            eve_p += 1\n        else:\n            odd.add(i)\n            odd_p += 1\n        counts[i] += 1\n        sums[2 * i] = 1\n    odd = list(odd)\n    eve = list(eve)\n    count = 0\n    if eve_p >= 2:\n        for i in range(eve_p):\n            count += counts[eve[i]] * (counts[eve[i]] - 1) // 2\n            for j in range(i + 1, eve_p):\n                if sums[eve[i] + eve[j]]:\n                    count += counts[eve[i]] * counts[eve[j]]\n    elif eve_p == 1:\n        count += counts[eve[0]] * (counts[eve[0]] - 1) // 2\n    if odd_p >= 2:\n        for i in range(odd_p):\n            count += counts[odd[i]] * (counts[odd[i]] - 1) // 2\n            for j in range(i + 1, odd_p):\n                if sums[odd[i] + odd[j]]:\n                    count += counts[odd[i]] * counts[odd[j]]\n    elif odd_p == 1:\n        count += counts[odd[0]] * (counts[odd[0]] - 1) // 2\n    print(count)", "def fun(n):\n    return n * (n - 1) // 2\nfor _ in range(int(input())):\n    dic = dict.fromkeys([i for i in range(1000, -1001, -1)], 0)\n    (odd, even, o, e) = ([], [], 0, 0)\n    count = 0\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in l:\n        if i % 2 == 0 and (not dic[i]):\n            even.append(i)\n            e += 1\n        elif not dic[i]:\n            odd.append(i)\n            o += 1\n        dic[i] += 1\n    for i in range(e):\n        count += fun(dic[even[i]])\n        for j in range(i + 1, e):\n            temp = (even[i] + even[j]) // 2\n            if dic[temp]:\n                count += dic[even[i]] * dic[even[j]]\n    for i in range(o):\n        count += fun(dic[odd[i]])\n        for j in range(i + 1, o):\n            temp = (odd[i] + odd[j]) // 2\n            if dic[temp]:\n                count += dic[odd[i]] * dic[odd[j]]\n    print(count)", "t = int(input())\nN = 2 * 10 ** 3 + 1\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [i + 10 ** 3 for i in a]\n    f = [0] * N\n    for i in a:\n        f[i] += 1\n    c = 0\n    for i in range(N):\n        if f[i] != 0:\n            for j in range(min(i, N - i - 1)):\n                c += f[i - j - 1] * f[i + j + 1]\n            c += f[i] * (f[i] - 1) // 2\n    print(c)\n    t -= 1", "import itertools\ntestc = int(input())\nfor i in range(testc):\n    even = []\n    odd = []\n    N = int(input())\n    inputseq = input().split(' ')\n    dict = {}\n    for t in inputseq:\n        t = int(t)\n        if t in dict:\n            dict[t] += 1\n        else:\n            dict[t] = 1\n            if t % 2 == 0:\n                even.append(t)\n            else:\n                odd.append(t)\n    count = 0\n    for pair in itertools.combinations(even, 2):\n        avg = (pair[0] + pair[1]) / 2\n        if avg in dict:\n            count += dict[pair[0]] * dict[pair[1]]\n    for pair in itertools.combinations(odd, 2):\n        avg = (pair[0] + pair[1]) / 2\n        if avg in dict:\n            count += dict[pair[0]] * dict[pair[1]]\n    for i in dict:\n        if dict[i] > 1:\n            count += dict[i] * (dict[i] - 1) // 2\n    print(count)", "test = int(input())\nfor i in range(test):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    s = set(arr)\n    arr.sort()\n    d = dict()\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    flag = 0\n    for i in d.keys():\n        if d[i] >= 2:\n            flag += d[i] * (d[i] - 1) // 2\n    even_arr = []\n    odd_arr = []\n    (n, m) = (0, 0)\n    for i in d.keys():\n        if i % 2 == 0:\n            even_arr.append(i)\n            n += 1\n        else:\n            odd_arr.append(i)\n            m += 1\n    count = 0\n    for i in range(n - 1):\n        for j in range(n - 1, i, -1):\n            avg = (even_arr[i] + even_arr[j]) // 2\n            if avg in s:\n                count += d[even_arr[i]] * d[even_arr[j]]\n    for i in range(m - 1):\n        for j in range(m - 1, i, -1):\n            avg = (odd_arr[i] + odd_arr[j]) // 2\n            if avg in s:\n                count += d[odd_arr[i]] * d[odd_arr[j]]\n    print(flag + count)", "for t in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    aset = set(a)\n    r = 0\n    d = dict()\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    while d:\n        (v1, n1) = d.popitem()\n        if n1 > 1:\n            r += n1 * (n1 - 1) // 2\n        for v2 in d:\n            if (v1 + v2) / 2 in aset:\n                n2 = d[v2]\n                r += n1 * n2\n    print(r)", "import itertools\ntest_cases = int(input())\nfor i in range(test_cases):\n    L_even = []\n    L_odd = []\n    N = int(input())\n    sequence = input().split(' ')\n    seq_dict = {}\n    for n in sequence:\n        n = int(n)\n        if n in seq_dict:\n            seq_dict[n] += 1\n        else:\n            seq_dict[n] = 1\n            if n % 2 == 0:\n                L_even.append(n)\n            else:\n                L_odd.append(n)\n    count = 0\n    for pair in itertools.combinations(L_even, 2):\n        temp = (pair[0] + pair[1]) / 2\n        if temp in seq_dict:\n            count += seq_dict[pair[0]] * seq_dict[pair[1]]\n    for pair in itertools.combinations(L_odd, 2):\n        temp = (pair[0] + pair[1]) / 2\n        if temp in seq_dict:\n            count += seq_dict[pair[0]] * seq_dict[pair[1]]\n    for n in seq_dict:\n        if seq_dict[n] > 1:\n            count += seq_dict[n] * (seq_dict[n] - 1) // 2\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    cts = [0] * 2001\n    for num in nums:\n        cts[num + 1000] += 1\n    ct = 0\n    for i in range(2001):\n        if cts[i] > 0:\n            ct += cts[i] * (cts[i] - 1) // 2\n            for j in range(i + 2, 2001, 2):\n                if cts[(i + j) // 2] > 0 and cts[j] > 0:\n                    ct += cts[i] * cts[j]\n    print(ct)", "t = input()\nfor i in range(int(t)):\n    s = 0\n    n = input()\n    n = int(n)\n    arr = list(map(int, input().split()))\n    e = []\n    o = []\n    a = {}\n    k = 0\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            e.append(arr[i])\n        else:\n            o.append(arr[i])\n    for i in arr:\n        try:\n            a[i] = a[i] + 1\n        except:\n            a[i] = 1\n    o = set(o)\n    e = set(e)\n    o = list(o)\n    e = list(e)\n    c = []\n    for i in range(len(o)):\n        try:\n            h = a[o[i]]\n            s = s + int(h * (h - 1) / 2)\n        except:\n            s += 0\n        for j in range(i + 1, len(o)):\n            avg = (o[i] + o[j]) / 2\n            try:\n                if a[avg]:\n                    k += a[o[i]] * a[o[j]]\n            except:\n                k += 0\n    for i in range(len(e)):\n        try:\n            h = a[e[i]]\n            s = s + h * (h - 1) / 2\n        except:\n            s += 0\n        for j in range(i + 1, len(e)):\n            avg = (e[i] + e[j]) / 2\n            try:\n                if a[avg]:\n                    k += a[e[i]] * a[e[j]]\n            except:\n                k += 0\n    x = s + k\n    x = int(x)\n    print(x)", "t = int(input())\nfor i in range(t):\n    c = 0\n    n = int(input())\n    a = []\n    a = [0 for x in range(2001)]\n    j = input().split(' ')\n    for x in j:\n        a[int(x) + 1000] += 1\n    for u in range(2001):\n        if a[u] == 0:\n            continue\n        for k in range((2000 - u) // 2 + 1):\n            if k == 0:\n                c += a[u] * (a[u] - 1) / 2\n            elif a[u + k]:\n                c += a[u] * a[u + 2 * k]\n    print(int(c))", "T = int(input())\nfor t in range(T):\n    count = 0\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    f = [0] * 2001\n    for i in range(N):\n        f[A[i] + 1000] += 1\n    for i in range(-1000, 999):\n        if f[i + 1000] == 0:\n            continue\n        for m in range(i + 1, 1000):\n            j = 2 * m - i\n            if j > 1000:\n                break\n            if f[m + 1000] > 0 and f[j + 1000] > 0:\n                count += f[j + 1000] * f[i + 1000]\n    for i in range(2001):\n        count += f[i] * (f[i] - 1) // 2\n    print(count)", "def AvgPairs(sequence):\n    Corr = [0 for i in range(2001)]\n    for i in sequence:\n        Corr[1000 + i] += 1\n    count = 0\n    for i in range(0, 2001):\n        if Corr[i] > 1:\n            count += Corr[i] * (Corr[i] - 1) // 2\n        if 0 < i < 2000 and Corr[i] > 0:\n            low = i - 1\n            high = i + 1\n            while low >= 0 and high <= 2000:\n                if Corr[low] > 0 and Corr[high] > 0:\n                    count += Corr[low] * Corr[high]\n                low -= 1\n                high += 1\n    print(count)\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    sequence = list(map(int, input().split()))\n    AvgPairs(sequence)", "t1 = int(input())\nfor x in range(t1):\n    check = [[False, 0] for x in range(2001)]\n    count = 0\n    n = int(input())\n    e = [int(y) for y in input().split()]\n    for y in e:\n        check[y][0] = True\n        check[y][1] += 1\n    for t in range(-999, 998, 2):\n        if not check[t][0]:\n            continue\n        f = check[t][1]\n        count += int(f * (f - 1) / 2)\n        for r in range(t + 2, 1000, 2):\n            if not check[r][0]:\n                continue\n            s = check[r][1]\n            d = t + r\n            d >>= 1\n            if check[d][0]:\n                count += s * f\n    for t in range(-1000, 999, 2):\n        if not check[t][0]:\n            continue\n        f = check[t][1]\n        count += int(f * (f - 1) / 2)\n        for r in range(t + 2, 1001, 2):\n            if not check[r][0]:\n                continue\n            s = check[r][1]\n            d = t + r\n            d >>= 1\n            if check[d][0]:\n                count += s * f\n    print(count)", "t = int(input())\nfor l in range(0, t, 1):\n    n = int(input())\n    h = []\n    for i in range(0, 2001):\n        h.append(0)\n    ans = 0\n    j = input().split(' ')\n    for i in j:\n        k = int(i)\n        k += 1000\n        h[k] += 1\n    for i in range(2001):\n        j = min(i, 2000 - i)\n        if h[i] > 0:\n            for k in range(1, j + 1):\n                ans += h[i - k] * h[i + k]\n        ans += h[i] * (h[i] - 1) // 2\n    print(ans)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    aa = []\n    for i in range(n):\n        aa.append(0)\n        aa[i] = a[i] * 2\n    aa = set(aa)\n    count = 0\n    odd = []\n    e = []\n    od = {}\n    oe = {}\n    ds = []\n    es = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            e.append(a[i])\n            if a[i] not in oe:\n                oe[a[i]] = 1\n            else:\n                oe[a[i]] = oe[a[i]] + 1\n        else:\n            odd.append(a[i])\n            if a[i] not in od:\n                od[a[i]] = 1\n            else:\n                od[a[i]] = od[a[i]] + 1\n    ds = set(odd)\n    es = set(e)\n    ds = list(ds)\n    es = list(es)\n    for i in range(len(ds)):\n        y = od[ds[i]]\n        if y > 1:\n            count += y * (y - 1) // 2\n    for i in range(len(ds) - 1):\n        for j in range(i + 1, len(ds)):\n            x = ds[i] + ds[j]\n            if x in aa:\n                count += od[ds[i]] * od[ds[j]]\n    for i in range(len(es)):\n        y = oe[es[i]]\n        if y > 1:\n            count += y * (y - 1) // 2\n    for i in range(len(es) - 1):\n        for j in range(i + 1, len(es)):\n            x = es[i] + es[j]\n            if x in aa:\n                count += oe[es[i]] * oe[es[j]]\n    print(count)\n    t -= 1", "t1 = int(input())\nfor x in range(t1):\n    check = [[False, 0] for x in range(2001)]\n    count = 0\n    n = int(input())\n    e = [int(y) for y in input().split()]\n    for y in e:\n        check[y][0] = True\n        check[y][1] += 1\n    for t in range(-999, 998, 2):\n        if not check[t][0]:\n            continue\n        f = check[t][1]\n        count += int(f * (f - 1) / 2)\n        for r in range(t + 2, 1000, 2):\n            if not check[r][0]:\n                continue\n            s = check[r][1]\n            d = t + r\n            d >>= 1\n            if check[d][0]:\n                count += s * f\n    for t in range(-1000, 999, 2):\n        if not check[t][0]:\n            continue\n        f = check[t][1]\n        count += int(f * (f - 1) / 2)\n        for r in range(t + 2, 1001, 2):\n            if not check[r][0]:\n                continue\n            s = check[r][1]\n            d = t + r\n            d >>= 1\n            if check[d][0]:\n                count += s * f\n    print(count)", "t = input()\nt = int(t)\nfor a0 in range(1, t + 1):\n    n = input()\n    n = int(n)\n    a = list(map(int, input().split()))\n    b = {}\n    even = []\n    odd = []\n    for i in range(-1001, 1002):\n        b[i] = 0\n    for i in a:\n        b[i] += 1\n    for i in set(a):\n        if i % 2 == 0:\n            even.append(i)\n        elif i % 2 != 0:\n            odd.append(i)\n    ct = 0\n    for i in range(-1001, 1002):\n        ct += b[i] * (b[i] - 1) // 2\n    for i in range(0, len(even) - 1):\n        for j in range(i + 1, len(even)):\n            if b[(even[i] + even[j]) // 2] > 0:\n                ct += 1 * b[even[i]] * b[even[j]]\n    for i in range(0, len(odd) - 1):\n        for j in range(i + 1, len(odd)):\n            if b[(odd[i] + odd[j]) // 2] > 0:\n                ct += 1 * b[odd[i]] * b[odd[j]]\n    print(ct)", "tc = int(input())\nfor tt in range(tc):\n    n = int(input())\n    a = [int(x) + 1005 for x in input().split()]\n    haso = [0 for i in range(2100)]\n    for x in a:\n        haso[x] += 1\n    count = 0\n    for i in range(1, 2100):\n        if haso[i] > 0:\n            count += haso[i] * (haso[i] - 1) // 2\n            for j in range(i + 2, 2100, 2):\n                if haso[j] > 0 and haso[(i + j) // 2] > 0:\n                    count += haso[i] * haso[j]\n    print(count)", "for t in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    cnt = [0 for _ in range(2001)]\n    for a in A:\n        cnt[1000 + a] += 1\n    ans = 0\n    for pos in range(2001):\n        if cnt[pos] > 0:\n            ans += cnt[pos] * (cnt[pos] - 1) // 2\n            for d in range(1, min(2000 - pos, pos) + 1):\n                ans += cnt[pos - d] * cnt[pos + d]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = list(set(a))\n    s.sort()\n    m = len(s)\n    l = [0] * m\n    l[0] = 1\n    j = 0\n    for i in range(1, n):\n        if a[i] == s[j]:\n            l[j] += 1\n        else:\n            j += 1\n            l[j] += 1\n    b = [0] * 100005\n    ans = 0\n    o = []\n    e = []\n    ol = []\n    el = []\n    for i in range(m):\n        b[s[i]] = 1\n        if s[i] % 2 == 0:\n            e.append(s[i])\n            el.append(l[i])\n        else:\n            o.append(s[i])\n            ol.append(l[i])\n    if len(e) != 0:\n        for i in range(len(e) - 1):\n            for j in range(i + 1, len(e)):\n                m = (e[i] + e[j]) // 2\n                if b[m] == 1:\n                    ans += el[i] * el[j]\n            if el[i] > 1:\n                p = el[i]\n                ans += p * (p - 1) // 2\n    if len(e) != 0:\n        if el[-1] > 1:\n            p = el[-1]\n            ans += p * (p - 1) // 2\n    if len(o) != 0:\n        for i in range(len(o) - 1):\n            for j in range(i + 1, len(o)):\n                m = (o[i] + o[j]) // 2\n                if b[m] == 1:\n                    ans += ol[i] * ol[j]\n            if ol[i] > 1:\n                p = ol[i]\n                ans += p * (p - 1) // 2\n    if len(o) != 0:\n        if ol[-1] > 1:\n            p = ol[-1]\n            ans += p * (p - 1) // 2\n    print(ans)", "for a in range(int(input())):\n    n = int(input())\n    c = 0\n    d = {}\n    l = [int(e) for e in input().split()]\n    o = []\n    e = []\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] > 1:\n            c += int((d[i] - 1) * d[i] / 2)\n        if i % 2 == 0:\n            e.append(i)\n        else:\n            o.append(i)\n    for i in range(len(e) - 1):\n        for j in range(i + 1, len(e)):\n            if (e[i] + e[j]) / 2 in d:\n                c += d[e[j]] * d[e[i]]\n    for i in range(len(o) - 1):\n        for j in range(i + 1, len(o)):\n            if (o[i] + o[j]) / 2 in d:\n                c += d[o[j]] * d[o[i]]\n    print(c)", "def nCr(n, r):\n    s = n * (n - 1)\n    s = int(s / 2)\n    return s\nt = int(input())\nfor iss in range(t):\n    c = 0\n    nn = int(input())\n    a = [int(x) for x in input().split()]\n    ma = max(a)\n    mi = min(a)\n    maa = max(abs(ma), abs(mi))\n    n = maa\n    d = {}\n    for i in range(-1 * n, n + 1):\n        d[i] = 0\n    for i in a:\n        d[i] += 1\n    for i in range(n, -1, -1):\n        pp = n - i\n        if d[i] > 0:\n            for j in range(pp + 1):\n                if j == 0:\n                    if d[i] > 1:\n                        c += int(nCr(d[i], 2))\n                elif d[i + j] > 0:\n                    if d[i - j] > 0:\n                        c += d[i + j] * d[i - j]\n    for i in range(-n, 0):\n        pp = abs(-n - i)\n        if d[i] > 0:\n            for j in range(pp + 1):\n                if j == 0:\n                    if d[i] > 1:\n                        c += int(nCr(d[i], 2))\n                elif d[i + j] > 0:\n                    if d[i - j] > 0:\n                        c += d[i - j] * d[i + j]\n    print(c)", "def Triangular(n):\n    return n * (n + 1) // 2\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    numberFrequencies = [0 for i in range(-1000, 1001)]\n    for a in A:\n        numberFrequencies[a + 1000] += 1\n    pairsFound = 0\n    for v in numberFrequencies:\n        if v >= 2:\n            pairsFound += Triangular(v - 1)\n    for i in range(-1000, 1000):\n        if numberFrequencies[i + 1000] == 0:\n            continue\n        for j in range(i + 2, 1000, 2):\n            if numberFrequencies[j + 1000] == 0:\n                continue\n            midpoint = (i + j) // 2\n            if numberFrequencies[midpoint + 1000] == 0:\n                continue\n            pairsFound += numberFrequencies[i + 1000] * numberFrequencies[j + 1000]\n    print(pairsFound)", "from collections import Counter\nfrom itertools import islice\nt = int(input())\nfor _ in range(t):\n    input()\n    a = Counter(map(int, input().split()))\n    v = ([], [])\n    for x in a.items():\n        v[x[0] & 1].append(x)\n    c = sum((x * (x - 1) // 2 + sum((x * y for (lj, y) in islice(l, i) if (li + lj) // 2 in a)) for l in v for (i, (li, x)) in enumerate(l)))\n    print(c)", "from collections import Counter\nfrom itertools import islice\nt = int(input())\nfor _ in range(t):\n    input()\n    a = Counter(map(int, input().split()))\n    v = ([], [])\n    for x in a.items():\n        v[x[0] & 1].append(x)\n    c = 0\n    for l in v:\n        for (i, (li, x)) in enumerate(l):\n            c += x * (x - 1) // 2\n            for (lj, y) in islice(l, i):\n                if (li + lj) // 2 in a:\n                    c += x * y\n    print(c)", "from collections import Counter\nfrom itertools import islice\nt = int(input())\nfor _ in range(t):\n    input()\n    a = Counter(map(int, input().split()))\n    v = ([], [])\n    for x in a.items():\n        v[x[0] & 1].append(x)\n    c = 0\n    for l in v:\n        for (i, (li, x)) in enumerate(l):\n            c += x * (x - 1) // 2\n            for (j, (lj, y)) in enumerate(islice(l, i)):\n                if (li + lj) // 2 in a:\n                    c += x * y\n    print(c)", "from collections import Counter\nfrom itertools import islice\nt = int(input())\nfor _ in range(t):\n    input()\n    a = Counter(map(int, input().split()))\n    v = [[x for x in a.items() if x[0] & 1 == b] for b in (0, 1)]\n    c = 0\n    for l in v:\n        for (i, (li, x)) in enumerate(l):\n            c += x * (x - 1) // 2\n            for (j, (lj, y)) in enumerate(islice(l, i)):\n                if (li + lj) // 2 in a:\n                    c += x * y\n    print(c)", "from collections import Counter\nfrom itertools import islice\nt = int(input())\nfor _ in range(t):\n    input()\n    a = Counter(map(int, input().split()))\n    v = ([], [])\n    for x in a.items():\n        v[x[0] & 1].append(x)\n    c = 0\n    for l in v:\n        for (i, (li, x)) in enumerate(l):\n            c += x * (x - 1) // 2\n            for (j, (lj, y)) in enumerate(islice(l, i)):\n                if (li + lj) // 2 in a:\n                    c += x * y\n    print(c)", "from collections import Counter\nfrom itertools import islice\nt = int(input())\nfor _ in range(t):\n    input()\n    a = Counter(map(int, input().split()))\n    v = ([], [])\n    for x in a:\n        v[x & 1].append(x)\n    c = 0\n    for l in v:\n        for (i, li) in enumerate(l):\n            x = a[li]\n            c += x * (x - 1) // 2\n            for (j, lj) in enumerate(islice(l, i)):\n                if (li + lj) // 2 in a:\n                    c += x * a[lj]\n    print(c)", "t = int(input())\nfor i in range(t):\n    count = 0\n    d = dict()\n    odd = list()\n    even = list()\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(n):\n        if 2 * l[i] in d:\n            d[2 * l[i]] += 1\n        else:\n            d[2 * l[i]] = 1\n    k = list(set(l))\n    for i in range(len(k)):\n        if k[i] % 2 == 0:\n            even.append(k[i])\n        else:\n            odd.append(k[i])\n        if d[2 * k[i]] >= 2:\n            count += d[2 * k[i]] * (d[2 * k[i]] - 1) // 2\n    for i in range(len(even)):\n        for j in range(i + 1, len(even)):\n            if even[i] + even[j] in d:\n                count += d[2 * even[i]] * d[2 * even[j]]\n    for i in range(len(odd)):\n        for j in range(i + 1, len(odd)):\n            if odd[i] + odd[j] in d:\n                count += d[2 * odd[i]] * d[2 * odd[j]]\n    print(count)", "from collections import Counter\nfrom itertools import islice\nt = int(input())\nfor _ in range(t):\n    input()\n    a = Counter(map(int, input().split()))\n    odd = [x for x in a if x & 1]\n    even = [x for x in a if not x & 1]\n    c = 0\n    for l in (odd, even):\n        for (i, li) in enumerate(l):\n            x = a[li]\n            c += x * (x - 1) // 2\n            for (j, lj) in enumerate(islice(l, i)):\n                if (li + lj) // 2 in a:\n                    c += x * a[lj]\n    print(c)"]