["import itertools\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = [i for i in range(1, n + 1)]\n    good = 0\n    for i in a:\n        if i != 0:\n            p.remove(i)\n    x = list(itertools.permutations(p))\n    for i in x:\n        j = 0\n        b = [l for l in a]\n        for z in range(n):\n            if b[z] == 0:\n                b[z] = i[j]\n                j += 1\n        loc_cnt = 0\n        for z in range(1, n):\n            if b[z] > b[z - 1]:\n                loc_cnt += 1\n        if loc_cnt == k:\n            good += 1\n    print(good)", "import itertools\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = [i for i in range(1, n + 1)]\n    good = 0\n    for i in a:\n        if i != 0:\n            p.remove(i)\n    x = list(itertools.permutations(p))\n    for i in x:\n        j = 0\n        b = [l for l in a]\n        for z in range(n):\n            if b[z] == 0:\n                b[z] = i[j]\n                j += 1\n        loc_cnt = 0\n        for z in range(1, n):\n            if b[z] > b[z - 1]:\n                loc_cnt += 1\n        if loc_cnt == k:\n            good += 1\n    print(good)", "import itertools\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = [i for i in range(1, n + 1)]\n    good = 0\n    for i in a:\n        if i != 0:\n            p.remove(i)\n    x = list(itertools.permutations(p))\n    for i in x:\n        j = 0\n        b = [l for l in a]\n        for z in range(n):\n            if b[z] == 0:\n                b[z] = i[j]\n                j += 1\n        loc_cnt = 0\n        for z in range(1, n):\n            if b[z] > b[z - 1]:\n                loc_cnt += 1\n        if loc_cnt == k:\n            good += 1\n    print(good)", "from itertools import permutations\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr1 = []\n    arr2 = []\n    for i in range(1, len(arr) + 1):\n        arr1.append(i)\n    indexzero = []\n    for i in range(0, len(arr)):\n        if arr[i] == 0:\n            indexzero.append(i)\n        else:\n            arr2.append(arr[i])\n    arr3 = list(set(arr1) - set(arr2))\n    result = permutations(arr3)\n    perm = []\n    for i in result:\n        perm.append(i)\n    step = 0\n    count = 0\n    for p in range(0, len(perm)):\n        temp = []\n        for q in range(0, len(arr)):\n            if arr[q] == 0:\n                temp.append(perm[p][step])\n                step += 1\n            else:\n                temp.append(arr[q])\n        k = 0\n        step = 0\n        for m in range(0, len(temp) - 1):\n            if temp[m] < temp[m + 1]:\n                k += 1\n        if k == K:\n            count += 1\n    print(count)", "from itertools import permutations\nk = []\nd = []\n\ndef abc(l):\n    ans = 0\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            ans += 1\n    return ans\nfor i in range(8):\n    k.append(i + 1)\n    x = list(permutations(k))\n    c = []\n    for j in range(8):\n        c.append([])\n    d.append(c)\n    for j in x:\n        d[i][abc(j)].append(j)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = 0\n    c = d[n - 1][k]\n    for i in c:\n        flag = 1\n        for j in range(n):\n            if l[j] != 0 and l[j] != i[j]:\n                flag = 0\n                break\n        if flag:\n            ans += 1\n    print(ans)", "from itertools import permutations\nk = []\nd = []\n\ndef abc(l):\n    ans = 0\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            ans += 1\n    return ans\nfor i in range(8):\n    k.append(i + 1)\n    x = list(permutations(k))\n    c = []\n    for j in range(8):\n        c.append([])\n    d.append(c)\n    for j in x:\n        d[i][abc(j)].append(j)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = 0\n    c = d[n - 1][k]\n    for i in c:\n        flag = 1\n        for j in range(n):\n            if l[j] != 0 and l[j] != i[j]:\n                flag = 0\n                break\n        if flag:\n            m = 0\n            for j in range(1, n):\n                if i[j] > i[j - 1]:\n                    m += 1\n            if m == k:\n                ans += 1\n    print(ans)", "from itertools import permutations\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [False] * (n + 1)\n    for i in a:\n        if i != 0:\n            b[i] = True\n    g = []\n    grd = 0\n    for i in range(1, n + 1):\n        if not b[i]:\n            g.append(i)\n    for i in permutations(g):\n        b = a[:]\n        f = 0\n        m = 0\n        ff = list(i[:])\n        for j in range(n):\n            if b[j] == 0:\n                b[j] = ff[-1]\n                ff.pop()\n        for j in range(1, n):\n            if b[j] > b[j - 1]:\n                f += 1\n            if f > k:\n                m = 1\n                break\n        if f == k and m == 0:\n            grd += 1\n    print(grd)", "from itertools import permutations\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [False] * (n + 1)\n    for i in a:\n        if i != 0:\n            b[i] = True\n    g = []\n    grd = 0\n    for i in range(1, n + 1):\n        if not b[i]:\n            g.append(i)\n    for i in permutations(g):\n        b = a[:]\n        f = 0\n        ff = list(i[:])\n        for j in range(n):\n            if b[j] == 0:\n                b[j] = ff[-1]\n                ff.pop()\n        for j in range(1, n):\n            if b[j] > b[j - 1]:\n                f += 1\n        if f == k:\n            grd += 1\n    print(grd)", "def cal(a, count, k, poss, ind):\n    temp = a.copy()\n    if len(poss) == 0:\n        for i in range(1, len(a)):\n            if temp[i] > temp[i - 1]:\n                k -= 1\n        if k == 0 and 0 not in temp:\n            count += 1\n        return count\n    if temp[ind] == 0:\n        for item in poss:\n            temp[ind] = item\n            count = cal(temp, count, k, poss - set([item]), ind + 1)\n    else:\n        count = cal(temp, count, k, poss, ind + 1)\n    return count\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    poss = set()\n    for i in range(1, len(a) + 1):\n        if i not in a:\n            poss.add(i)\n    count = cal(a, 0, k, poss, 0)\n    print(count)", "t = int(input())\nimport itertools\nfor _ in range(t):\n    (n, kkk) = map(int, input().split())\n    it = list(map(int, input().split()))\n    kk = set(list(range(1, n + 1)))\n    s = set([i for i in it if i != 0])\n    left = kk - s\n    mm = list(itertools.permutations(list(left)))\n    tot = 0\n    for perm in mm:\n        k = 0\n        mt = it[:]\n        ind = 0\n        for (j, i) in enumerate(it):\n            if i == 0:\n                mt[j] = perm[ind]\n                ind += 1\n            if j > 0:\n                if mt[j] > mt[j - 1]:\n                    k += 1\n        if kkk == k:\n            tot += 1\n    print(tot)", "import itertools\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = [i for i in range(1, n + 1)]\n    good = 0\n    for i in a:\n        if i != 0:\n            p.remove(i)\n    x = list(itertools.permutations(p))\n    for i in x:\n        j = 0\n        b = [l for l in a]\n        for z in range(n):\n            if b[z] == 0:\n                b[z] = i[j]\n                j += 1\n        loc_cnt = 0\n        for z in range(1, n):\n            if b[z] > b[z - 1]:\n                loc_cnt += 1\n        if loc_cnt == k:\n            good += 1\n    print(good)", "def isExactlyK(blanks, K):\n    inv = 0\n    for i in range(len(blanks) - 1):\n        pi_1 = blanks[i]\n        pi = blanks[i + 1]\n        if pi_1 < pi:\n            inv += 1\n        if inv > K:\n            return False\n    return inv == K\n\ndef isLessThanEqualToK(blanks, K):\n    inv = 0\n    for i in range(len(blanks) - 1):\n        pi_1 = blanks[i]\n        pi = blanks[i + 1]\n        if pi_1 == 0 or p_i == 0:\n            continue\n        if pi_1 < pi:\n            inv += 1\n        if inv > K:\n            return False\n    return inv <= K\n\ndef findp(blanks, letters, k):\n    if letters == [] and isExactlyK(blanks, k):\n        return 1\n    elif letters == []:\n        return 0\n    perms = 0\n    for i in range(len(letters)):\n        letter = letters[i]\n        letters = letters[:i] + letters[i + 1:]\n        index = blanks.index(0)\n        blanks[index] = letter\n        perms += findp(blanks, letters, k)\n        blanks[index] = 0\n        letters = letters[:i] + [letter] + letters[i:]\n    return perms\n\ndef Main():\n    t = int(input())\n    while t != 0:\n        t -= 1\n        (n, k) = [int(x) for x in input().split(' ')]\n        blanks = [int(x) for x in input(' ').split(' ')]\n        letters = [y for y in range(1, n + 1) if y not in blanks]\n        good_perms = findp(blanks, letters, k)\n        print(good_perms)\nMain()", "from itertools import permutations\n\ndef main():\n    T = int(input())\n\n    def helper(s, k):\n        ret = 0\n        ind = 1\n        l = len(s)\n        while l - ind and l - ind >= k - ret:\n            if s[ind - 1] < s[ind]:\n                ret += 1\n                if ret > k:\n                    return 0\n            ind += 1\n        if ret == k:\n            return 1\n        return 0\n\n    def test(n, k, s):\n        ret = 0\n        e = []\n        lst = [i + 1 for i in range(n)]\n        for i in range(n):\n            if s[i] == 0:\n                e.append(i)\n            else:\n                lst.remove(s[i])\n        lst = list(permutations(lst))\n        for i in range(len(lst)):\n            tem = lst[i]\n            temp = s + []\n            for j in range(len(e)):\n                temp[e[j]] = tem[j]\n            ret += helper(temp, k)\n        return ret\n    for i in range(T):\n        (N, K) = list(map(int, input().split()))\n        seq = list(map(int, input().split()))\n        print(test(N, K, seq))\nmain()", "from math import *\nfrom itertools import *\nt = int(input())\nwhile t:\n    r = 0\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    rem = set(range(1, n + 1)) - set(a)\n    totalperm = list(permutations(rem))\n    for item in totalperm:\n        i = 0\n        b = a[:]\n        z = 0\n        if 1:\n            for j in range(n):\n                if b[j] == 0:\n                    b[j] = item[i]\n                    i += 1\n            for j in range(n - 1):\n                if b[j + 1] > b[j]:\n                    z += 1\n            if z == k:\n                r += 1\n    print(r)\n    t = t - 1", "import sys\n\ndef next_permutation(L):\n    n = len(L)\n    if n == 0:\n        return False\n    i = n - 2\n    while i >= 0 and L[i] >= L[i + 1]:\n        i -= 1\n    if i == -1:\n        return False\n    j = i + 1\n    while j < n and L[j] > L[i]:\n        j += 1\n    j -= 1\n    (L[i], L[j]) = (L[j], L[i])\n    left = i + 1\n    right = n - 1\n    while left < right:\n        (L[left], L[right]) = (L[right], L[left])\n        left += 1\n        right -= 1\n    return True\n\ndef check(a, ind, L, K):\n    for (i, v) in zip(ind, L):\n        a[i] = v\n    count = 0\n    for i in range(len(a) - 1):\n        if a[i] < a[i + 1]:\n            count += 1\n    return count == K\nT = int(sys.stdin.readline().strip())\nfor _ in range(T):\n    (N, K) = sys.stdin.readline().split()\n    K = int(K)\n    N = int(N)\n    found = set()\n    ind = list()\n    L = list()\n    a = list()\n    for (i, e) in enumerate(sys.stdin.readline().split()):\n        e = int(e)\n        if e == 0:\n            ind.append(i)\n        a.append(e)\n        found.add(e)\n    for i in range(N):\n        if i + 1 in found:\n            continue\n        L.append(i + 1)\n    count = 0\n    while True:\n        if check(a, ind, L, K):\n            count += 1\n        if not next_permutation(L):\n            break\n    print(count)", "import itertools\n\ndef genperm(a, p, n):\n    ip = 0\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = p[ip]\n            ip += 1\n    return a\n\ndef cans(a, n):\n    c = 0\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            c += 1\n    return c\nfor _ in range(int(input())):\n    (N, K) = [int(j) for j in input().split()]\n    A = [int(j) for j in input().split()]\n    NZA = []\n    ck = 0\n    for nm in range(1, N + 1):\n        if nm not in A:\n            NZA.append(nm)\n    for perm in itertools.permutations(NZA):\n        BP = A[:]\n        if cans(genperm(BP, perm, N), N) == K:\n            ck += 1\n    print(ck)", "def func(arr):\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            count += 1\n    return count\nfrom itertools import permutations\nfor z in range(int(input())):\n    (n, k) = (int(s) for s in input().split())\n    l = [int(x) for x in input().split()]\n    miss = []\n    present = []\n    count = 0\n    for i in range(n):\n        if l[i] == 0:\n            miss.append(i)\n        else:\n            present.append(l[i])\n        if l[i] != 0 and l[i - 1] != 0:\n            if l[i] > l[i - 1]:\n                count += 1\n    if count > k:\n        print('0')\n    else:\n        ar = []\n        for v in range(1, n + 1):\n            if v not in present:\n                ar.append(v)\n        per = list(permutations(ar))\n        count = 0\n        for mm in range(len(per)):\n            pos = 0\n            for kk in miss:\n                l[kk] = per[mm][pos]\n                pos += 1\n            if func(l) == k:\n                count += 1\n        print(count)", "from itertools import permutations\nimport sys\n\ndef permute():\n    (n, k) = map(int, sys.stdin.readline().split())\n    v = []\n    a = list(map(int, sys.stdin.readline().split()))\n    for i in range(n):\n        if a[i] > 0:\n            v.append(i)\n    permu = list(permutations(range(1, n + 1)))\n    ans = 0\n    for p in permu:\n        i = list(p)\n        c = 0\n        flag = 0\n        for j in v:\n            if i[j] != a[j]:\n                flag = 1\n                break\n        if flag:\n            continue\n        for j in range(1, n):\n            if i[j] > i[j - 1]:\n                c += 1\n        if c == k:\n            ans += 1\n    print(ans)\nfor _ in range(int(input())):\n    permute()", "from itertools import permutations\nt = int(input())\nfor z in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    missing = []\n    for i in range(1, n + 1):\n        if i not in a:\n            missing.append(i)\n    if not missing:\n        cnt = 0\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                cnt += 1\n        if cnt == k:\n            print(1)\n        else:\n            print(0)\n        continue\n    alist = list(permutations(missing))\n    ans = 0\n    for filler in alist:\n        b = a[:]\n        idx = 0\n        for i in range(n):\n            if b[i] == 0:\n                b[i] = filler[idx]\n                idx += 1\n        cm = 0\n        for i in range(1, n):\n            if b[i] > b[i - 1]:\n                cm += 1\n        if cm == k:\n            ans += 1\n    print(ans)", "from itertools import permutations\n\ndef solve():\n    (n, k) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    index = []\n    for i in range(0, n):\n        if a[i] > 0:\n            index.append(i)\n    per = list(permutations(range(1, n + 1)))\n    ans = 0\n    for p in per:\n        f = False\n        l = list(p)\n        for i in index:\n            if l[i] != a[i]:\n                f = True\n                break\n        if f:\n            continue\n        c = 0\n        for i in range(1, n):\n            if l[i - 1] < l[i]:\n                c += 1\n        if c == k:\n            ans += 1\n    print(ans, end='\\n')\ntest = int(input())\nwhile test:\n    solve()\n    test = test - 1", "from itertools import *\nfor t in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    x = [int(i) for i in range(1, n + 1)]\n    missing = list(set(x) - set(a))\n    per = list(permutations(missing))\n    ans = 0\n    for i in per:\n        b = a[:]\n        c = 0\n        for j in range(n):\n            if a[j] == 0:\n                b[j] = i[c]\n                c += 1\n        d = 0\n        for j in range(1, n):\n            if b[j] > b[j - 1]:\n                d += 1\n        if d == k:\n            ans += 1\n    print(ans)", "def check(arr, k):\n    count1 = 0\n    for i in range(len(arr) - 1):\n        if arr[i + 1] > arr[i]:\n            count1 += 1\n    if count1 == k:\n        return True\n    else:\n        return False\nimport itertools\nfor i in range(int(input())):\n    count = 0\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = []\n    missin = []\n    for i in range(n):\n        b.append(i + 1)\n    for i in range(n):\n        if a[i] == 0:\n            missin.append(i)\n        elif a[i] in b:\n            b.remove(a[i])\n    per = list(itertools.permutations(b, len(b)))\n    e = []\n    copya = []\n    for i in per:\n        d = list(i)\n        copya = a[:]\n        index = 0\n        for j in missin:\n            copya[j] = d[index]\n            index += 1\n        if check(copya, k):\n            count += 1\n    print(count)", "from itertools import permutations\n\ndef okay_or_not(l, n):\n    ctr = 0\n    for x in range(0, len(l) - 1):\n        if l[x + 1] > l[x]:\n            ctr += 1\n    if ctr == n:\n        return True\n    else:\n        return False\ntc = int(input())\nwhile tc:\n    (n, k) = input().strip().split(' ')\n    (n, k) = [int(n), int(k)]\n    d = list(map(int, input().strip().split(' ')))\n    c = []\n    for x in range(1, n + 1):\n        c.append(x)\n    for x in d:\n        if x != 0:\n            c.remove(x)\n    ans = 0\n    t = list(permutations(c))\n    for x in t:\n        counter = 0\n        e = d[:]\n        for y in range(0, n):\n            if e[y] == 0:\n                e[y] = x[counter]\n                counter += 1\n        if okay_or_not(e, k):\n            ans += 1\n    print(ans)\n    tc -= 1", "from itertools import permutations\n\ndef checkpermu(po, k):\n    gt = len(po)\n    co = 0\n    for ju in range(gt - 1):\n        if po[ju + 1] > po[ju]:\n            co += 1\n    if co == k:\n        return True\n    else:\n        return False\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = [int(o) for o in input().split()]\n    num = []\n    for i in range(n):\n        num.append(i + 1)\n    for ki in l:\n        if ki != 0:\n            num.remove(ki)\n    t = list(permutations(num))\n    result = 0\n    for ji in t:\n        lo = 0\n        l1 = l[:]\n        for y in range(n):\n            if l1[y] == 0:\n                l1[y] = ji[lo]\n                lo += 1\n        if checkpermu(l1, k):\n            result += 1\n    print(result)", "from itertools import permutations\n\ndef checkpermu(po, k):\n    gt = len(po)\n    co = 0\n    for ju in range(gt - 1):\n        if po[ju + 1] > po[ju]:\n            co += 1\n    if co == k:\n        return True\n    else:\n        return False\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = [int(o) for o in input().split()]\n    num = []\n    for i in range(n):\n        num.append(i + 1)\n    for ki in l:\n        if ki != 0:\n            num.remove(ki)\n    t = list(permutations(num))\n    result = 0\n    for ji in t:\n        lo = 0\n        l1 = l[:]\n        for y in range(n):\n            if l1[y] == 0:\n                l1[y] = ji[lo]\n                lo += 1\n        if checkpermu(l1, k):\n            result += 1\n    print(result)", "import itertools\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, K) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    cc = []\n    global_count = 0\n    for i in range(n):\n        cc.append(i + 1)\n    for i in arr:\n        if i != 0:\n            cc.remove(i)\n    l = list(itertools.permutations(cc))\n    tt = list(arr)\n    for i in range(len(l)):\n        index = 0\n        local_count = 0\n        arr = list(tt)\n        for j in range(n):\n            if arr[j] == 0:\n                arr[j] = l[i][index]\n                index += 1\n        for j in range(1, n):\n            if arr[j] > arr[j - 1]:\n                local_count += 1\n        if local_count == K:\n            global_count += 1\n    print(global_count)", "import itertools as it\nimport collections\n\ndef construct(perm, a):\n    perm = collections.deque(perm)\n    ret = list(a)\n    for i in range(len(ret)):\n        if ret[i] == 0:\n            ret[i] = perm.popleft()\n    return ret\n\ndef inv(perm):\n    ret = 0\n    for i in range(1, len(perm)):\n        if perm[i] > perm[i - 1]:\n            ret += 1\n    return ret\nt = int(input())\nfor test in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for perm in it.permutations(set(range(1, n + 1)) - set(a)):\n        if inv(construct(perm, a)) == k:\n            ans += 1\n    print(ans)", "from itertools import permutations as perm\nt = int(input())\nfor i in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    global_count = 0\n    missing = []\n    for i in range(n):\n        missing.append(i + 1)\n    for i in a:\n        if i != 0:\n            missing.remove(i)\n    per = list(perm(missing))\n    t = list(a)\n    for i in range(len(per)):\n        index = 0\n        local_count = 0\n        a = list(t)\n        for j in range(n):\n            if a[j] == 0:\n                a[j] = per[i][index]\n                index += 1\n        for j in range(1, n):\n            if a[j] > a[j - 1]:\n                local_count += 1\n        if local_count == k:\n            global_count += 1\n    print(global_count)", "def permutation(lst):\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst]\n    l = []\n    for i in range(len(lst)):\n        m = lst[i]\n        remLst = lst[:i] + lst[i + 1:]\n        for p in permutation(remLst):\n            l.append([m] + p)\n    return l\nt = int(input())\nfor i in range(0, t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    zero = 0\n    zr = [-1] * n\n    num = [0] * (n + 1)\n    a = [int(j) for j in input().split()]\n    for j in range(n):\n        if a[j] == 0:\n            zero += 1\n            zr[zero - 1] = j\n        else:\n            num[a[j]] = 1\n    miss = [-1] * zero\n    tmp = 0\n    for j in range(1, n + 1):\n        if num[j] == 0:\n            miss[tmp] = j\n            tmp += 1\n    if zero == 0:\n        ctr = 0\n        for j in range(1, n):\n            if a[j] > a[j - 1]:\n                ctr += 1\n        if ctr == k:\n            gp = 1\n        else:\n            gp = 0\n    else:\n        l = permutation(miss)\n        gp = 0\n        for lst in l:\n            ctr = 0\n            x = 0\n            for m in lst:\n                a[zr[x]] = m\n                x += 1\n            for j in range(1, n):\n                if a[j] > a[j - 1]:\n                    ctr += 1\n            if ctr == k:\n                gp += 1\n    print(gp)", "import itertools\nt = int(input())\nfor test in range(t):\n    (n, f) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    if n != 1:\n        ind = [i for i in range(len(arr)) if arr[i] == 0]\n        z = [i for i in range(1, n + 1) if i not in arr]\n        z = list(itertools.permutations(z))\n        x = []\n        for i in z:\n            k = 0\n            for j in ind:\n                arr[j] = i[k]\n                k = k + 1\n            x.append(arr[:])\n        for i in x:\n            s = 0\n            for j in range(1, n):\n                if i[j] > i[j - 1]:\n                    s += 1\n            if s == f:\n                ans += 1\n        print(ans)\n    else:\n        print(1)", "from itertools import permutations\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    all_elements = [i + 1 for i in range(n)]\n    found_elements = []\n    missing_indices = []\n    missing_elements = []\n    for i in range(n):\n        elem = ar[i]\n        if elem > 0:\n            found_elements.append(elem)\n        else:\n            missing_indices.append(i)\n    missing_elements = list(set(all_elements) - set(found_elements))\n    perms = permutations(missing_elements)\n    all_perms = []\n    for perm in perms:\n        temp = list(ar)\n        perm = list(perm)\n        for i in range(len(missing_elements)):\n            temp[missing_indices[i]] = perm[i]\n        all_perms.append(temp)\n    good_perms = 0\n    for perm in all_perms:\n        count = 0\n        for i in range(n - 1):\n            if perm[i + 1] > perm[i]:\n                count += 1\n        if count == k:\n            good_perms += 1\n    print(good_perms)", "from itertools import permutations\nt = int(input())\nfor z in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    missing = []\n    for i in range(1, n + 1):\n        if i not in a:\n            missing.append(i)\n    if not missing:\n        cnt = 0\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                cnt += 1\n        if cnt == k:\n            print(1)\n        else:\n            print(0)\n        continue\n    alist = list(permutations(missing))\n    ans = 0\n    for filler in alist:\n        b = a[:]\n        idx = 0\n        for i in range(n):\n            if b[i] == 0:\n                b[i] = filler[idx]\n                idx += 1\n        cm = 0\n        for i in range(1, n):\n            if b[i] > b[i - 1]:\n                cm += 1\n        if cm == k:\n            ans += 1\n    print(ans)", "def permute(elements):\n    permutations = []\n    if len(elements) == 1:\n        return [elements]\n    for i in range(len(elements)):\n        m = elements[i]\n        rlist = elements[:i] + elements[i + 1:]\n        for p in permute(rlist):\n            permutations.append([m] + p)\n    return permutations\nt = int(input())\nfor _ in range(t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    arr = [int(x) for x in input().split()]\n    if n == 1 and k == 0:\n        print(1)\n        continue\n    elif n == 1 and k != 0:\n        print(0)\n        continue\n    noz = 0\n    ioz = [-1] * n\n    yarr = [0] * n\n    for x in range(n):\n        if arr[x] == 0:\n            ioz[noz] = x\n            noz += 1\n        else:\n            yarr[arr[x] - 1] = 1\n    missd = [i + 1 for i in range(n) if yarr[i] == 0]\n    gp = 0\n    if len(missd) == 0:\n        cnt = 0\n        for i in range(1, n):\n            if arr[i] > arr[i - 1]:\n                cnt += 1\n        if cnt == k:\n            gp += 1\n    else:\n        pns = permute(missd)\n        for p in pns:\n            x = 0\n            cnt = 0\n            if ioz[x] == 0:\n                arr[0] = p[x]\n                x += 1\n            for i in range(1, n):\n                if ioz[x] == i:\n                    arr[i] = p[x]\n                    x += 1\n                if arr[i] > arr[i - 1]:\n                    cnt += 1\n            if cnt == k:\n                gp += 1\n    print(gp)", "import itertools\nfor i in range(int(input())):\n    (n, f) = [int(i) for i in input().split()]\n    l = [int(i) for i in input().split()]\n    ans = 0\n    if n != 1:\n        ind = [i for i in range(len(l)) if l[i] == 0]\n        z = [i for i in range(1, n + 1) if i not in l]\n        z = list(itertools.permutations(z))\n        t = []\n        for i in z:\n            k = 0\n            for j in ind:\n                l[j] = i[k]\n                k = k + 1\n            t.append(l[:])\n        for i in t:\n            x = 0\n            for j in range(1, n):\n                if i[j] > i[j - 1]:\n                    x += 1\n            if x == f:\n                ans += 1\n        print(ans)\n    else:\n        print(1)", "from itertools import permutations\nt = int(input())\nwhile t:\n    t -= 1\n    (n, k) = [int(satish) for satish in input().split()]\n    given = [int(satish) for satish in input().split()]\n    arr = set()\n    for i in range(1, n + 1):\n        arr.add(i)\n    for i in given:\n        if i != 0:\n            arr.discard(i)\n    per = list(permutations(arr))\n    cnt = 0\n    for l in per:\n        temp = list()\n        (i, j, count) = (0, 0, 0)\n        while i < len(given):\n            if given[i] == 0:\n                temp.append(l[j])\n                j += 1\n            else:\n                temp.append(given[i])\n            i += 1\n        for i in range(1, len(temp)):\n            if temp[i] > temp[i - 1]:\n                count += 1\n        if count == k:\n            cnt += 1\n    print(cnt)", "import itertools\n\ndef isgood(a):\n    count = 0\n    for i in range(1, len(a)):\n        if a[i] > a[i - 1]:\n            count += 1\n    return count\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    z = a.count(0)\n    if z == 0:\n        count = isgood(a)\n        if count == k:\n            print(1)\n        else:\n            print(0)\n    else:\n        b = list(range(1, n + 1))\n        for l in a:\n            if l in b:\n                b.remove(l)\n        u = []\n        for i in range(len(a)):\n            if a[i] == 0:\n                u.append(i)\n        s = 0\n        for c in list(itertools.permutations(b)):\n            temp = list(a)\n            i = 0\n            for j in list(c):\n                if i < len(u):\n                    temp[u[i]] = j\n                    i += 1\n            count = isgood(temp)\n            if count == k:\n                s += 1\n        print(s)", "from itertools import permutations\nt = int(input())\nwhile t > 0:\n    (n, k) = input().split(' ')\n    n = int(n)\n    k = int(k)\n    res = []\n    good = int(0)\n    arr = [int(i) for i in input().split()]\n    check = [1, 2, 3, 4, 5, 6, 7, 8]\n    for num in check:\n        if num not in arr and (num >= 1 and num <= n):\n            res.append(num)\n    index = 0\n    missing_index = []\n    for num in arr:\n        if num == 0:\n            missing_index.append(index)\n        index = index + 1\n    for p in list(permutations(res)):\n        final = list(arr)\n        g = list(missing_index)\n        for num in p:\n            for ind in g:\n                final[ind] = num\n                g.remove(ind)\n                break\n        count = int(0)\n        for i in range(1, len(final)):\n            if final[i] > final[i - 1]:\n                count = count + 1\n            if count > k:\n                break\n        if count == k:\n            good = good + 1\n    print(good)\n    t = t - 1", "from itertools import permutations\nt = int(input())\nwhile t > 0:\n    (n, k) = input().split(' ')\n    n = int(n)\n    k = int(k)\n    res = []\n    good = int(0)\n    arr = [int(i) for i in input().split()]\n    check = [1, 2, 3, 4, 5, 6, 7, 8]\n    for num in check:\n        if num not in arr and (num >= 1 and num <= n):\n            res.append(num)\n    index = 0\n    missing_index = []\n    for num in arr:\n        if num == 0:\n            missing_index.append(index)\n        index = index + 1\n    for p in list(permutations(res)):\n        final = list(arr)\n        g = list(missing_index)\n        for num in p:\n            for ind in g:\n                final[ind] = num\n                g.remove(ind)\n                break\n        count = int(0)\n        for i in range(1, len(final)):\n            if final[i] > final[i - 1]:\n                count = count + 1\n            if count > k:\n                break\n        if count == k:\n            good = good + 1\n    print(good)\n    t = t - 1", "import itertools\nT = int(input())\nfor i in range(T):\n    (N, K) = map(int, input().split())\n    alist = list(map(int, input().split()))\n    num0 = alist.count(0)\n    missing = []\n    for j in range(1, N + 1):\n        if j not in alist:\n            missing.append(j)\n    perm = list(itertools.permutations(missing))\n    it = 1\n    for j in range(1, num0 + 1):\n        it *= j\n    ans = 0\n    for j in range(it):\n        x = 0\n        newa = list(alist)\n        for k in range(N):\n            if newa[k] == 0:\n                newa[k] = perm[j][x]\n                x += 1\n        count = 0\n        for k in range(N - 1):\n            if newa[k] < newa[k + 1]:\n                count += 1\n        if count == K:\n            ans += 1\n    print(ans)", "import itertools\nt = int(input())\nwhile t != 0:\n    t -= 1\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    numbers = []\n    for i in range(1, n + 1):\n        numbers.append(i)\n    missing_indices = []\n    index = 0\n    for ele in a:\n        if ele != 0:\n            numbers.remove(ele)\n        else:\n            missing_indices.append(index)\n        index += 1\n    r = len(numbers)\n    permu = list(itertools.permutations(numbers, r))\n    times = len(permu)\n    index = 0\n    goods = []\n    for i in range(times):\n        complete_permu = list(a)\n        p = permu[i]\n        inside_index = 0\n        for m in missing_indices:\n            complete_permu[m] = p[inside_index]\n            inside_index += 1\n        goods.append(complete_permu)\n    g = goods[0]\n    lg = len(g)\n    answer = 0\n    for g in goods:\n        good = 0\n        for i in range(lg - 1):\n            if g[i + 1] > g[i]:\n                good += 1\n        if good == k:\n            answer += 1\n    print(answer)", "import itertools\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = list(map(int, input().split()))\n    a = [int(i) for i in input().split()]\n    global_count = 0\n    missing = []\n    for i in range(0, n):\n        missing.append(i + 1)\n    for i in a:\n        if i != 0:\n            missing.remove(i)\n    permutation_list = list(itertools.permutations(missing))\n    temp_a = list(a)\n    for i in range(0, len(permutation_list)):\n        index = 0\n        local_count = 0\n        a = list(temp_a)\n        for j in range(0, n):\n            if a[j] == 0:\n                a[j] = permutation_list[i][index]\n                index += 1\n        for j in range(1, n):\n            if a[j] > a[j - 1]:\n                local_count += 1\n        if local_count == k:\n            global_count += 1\n    print(global_count)", "from itertools import permutations\nt = int(input())\nfor i in range(t):\n    ip = input().split()\n    n = int(ip[0])\n    k = int(ip[1])\n    arr = [0] * n\n    ip = input().split()\n    present = [False] * (n + 1)\n    for j in range(n):\n        arr[j] = int(ip[j])\n        present[arr[j]] = True\n    permute = []\n    for j in range(1, n + 1):\n        if not present[j]:\n            permute.append(j)\n    missingPermutations = list(permutations(permute))\n    count = 0\n    for permutation in missingPermutations:\n        temp = arr.copy()\n        ctr = 0\n        index = 0\n        for j in range(len(temp)):\n            if temp[j] == 0:\n                temp[j] = permutation[index]\n                index += 1\n        ctr = 0\n        for j in range(1, len(temp)):\n            if temp[j - 1] < temp[j]:\n                ctr += 1\n        if ctr == k:\n            count += 1\n    print(count)", "from itertools import permutations\nfor k in range(int(input())):\n    (n, k) = map(int, input().split())\n    u = 0\n    a = list(map(int, input().split()))\n    b = [i for i in range(1, n + 1)]\n    for i in a:\n        if i != 0:\n            b.remove(i)\n    d = list(permutations(b))\n    for j in d:\n        s = 0\n        t = []\n        for i in range(len(a)):\n            if a[i] == 0:\n                t.append(j[s])\n                s += 1\n            else:\n                t.append(a[i])\n        h = 0\n        for i in range(0, n - 1):\n            if t[i] < t[i + 1]:\n                h += 1\n        if h == k:\n            u += 1\n    print(u)", "t = int(input())\nperms = []\n\ndef toString(List):\n    return ''.join(List)\n\ndef permute(a, l, r):\n    if l == r:\n        perms.append(a[:])\n    else:\n        for i in range(l, r + 1):\n            (a[l], a[i]) = (a[i], a[l])\n            permute(a, l + 1, r)\n            (a[l], a[i]) = (a[i], a[l])\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    count_zero = 0\n    reqd = []\n    for i in range(1, n + 1):\n        if i in a:\n            pass\n        else:\n            count_zero += 1\n            reqd.append(i)\n    permute(reqd, 0, count_zero - 1)\n    if count_zero == 0:\n        cnt = 0\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                cnt += 1\n        if cnt == k:\n            print(1)\n        else:\n            print(0)\n    else:\n        for perm in perms:\n            count = 0\n            temp_a = [0] * n\n            z = 0\n            for i in range(n):\n                if a[i] == 0:\n                    temp_a[i] = perm[z]\n                    z += 1\n                else:\n                    temp_a[i] = a[i]\n            for i in range(1, n):\n                if temp_a[i] > temp_a[i - 1]:\n                    count += 1\n            if count == k:\n                ans += 1\n        print(ans)\n    perms = []\n    t -= 1", "from itertools import permutations\nitr = int(input())\nfor i in range(itr):\n    l = input().split()\n    (n, k) = map(int, l)\n    l = input().split()\n    fv = list(map(int, l))\n    a = set([j for j in range(1, n + 1)])\n    ctr = 0\n    m = list(permutations(list(a - set(fv))))\n    for j in m:\n        k_ctr = 0\n        j_ctr = 0\n        flag = True\n        l = fv[:]\n        for z in range(n):\n            if l[z] == 0:\n                l[z] = j[j_ctr]\n                j_ctr += 1\n            if z > 0:\n                if l[z] > l[z - 1]:\n                    k_ctr += 1\n            if k_ctr > k:\n                flag = False\n                break\n        if flag == True and k_ctr == k:\n            ctr += 1\n    print(ctr)", "import itertools as it\nimport collections\n\ndef construct(perm, a):\n    perm = collections.deque(perm)\n    ret = list(a)\n    for i in range(len(ret)):\n        if ret[i] == 0:\n            ret[i] = perm.popleft()\n    return ret\n\ndef inv(perm):\n    ret = 0\n    for i in range(1, len(perm)):\n        if perm[i] > perm[i - 1]:\n            ret += 1\n    return ret\nt = int(input())\nfor test in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    for perm in it.permutations(set(range(1, n + 1)) - set(a)):\n        if inv(construct(perm, a)) == k:\n            ans += 1\n    print(ans)", "def solve(l):\n    ans = 0\n    for i in range(1, n):\n        if l[i] > l[i - 1]:\n            ans += 1\n    return ans\nfrom itertools import permutations\nfor i in range(int(input())):\n    (n, k) = (int(s) for s in input().split())\n    l = [int(s) for s in input().split()]\n    l1 = []\n    l2 = []\n    count = 0\n    for j in range(n):\n        if l[j] != 0:\n            l1.append(l[j])\n        else:\n            l2.append(j)\n        if l[j] != 0 and l[j - 1] != 0:\n            if l[j] - l[j - 1] > 0:\n                count += 1\n    if count > k:\n        print(0)\n    else:\n        lw = []\n        for v1 in range(1, n + 1):\n            if v1 not in l1:\n                lw.append(v1)\n        x = list(permutations(lw))\n        ans = 0\n        for j in range(len(x)):\n            v1 = 0\n            for v in l2:\n                l[v] = x[j][v1]\n                v1 += 1\n            if solve(l) == k:\n                ans += 1\n        print(ans)", "def find_perm(s1, n1, k1, index, x1, prev):\n    perms = 0\n    if n1 == 1:\n        return 1\n    if k1 < 0:\n        return 0\n    if index == 0:\n        if s1[index] != 0:\n            perms += find_perm(s1, n1, k1, index + 1, x1, s1[index])\n        else:\n            for i in x1:\n                perms += find_perm(s1, n1, k1, index + 1, x1 - {i}, i)\n    elif index == n1 - 1:\n        if s[index] != 0:\n            if s[index] > prev:\n                k1 -= 1\n        else:\n            for i in x1:\n                if i > prev:\n                    k1 -= 1\n        if k1 == 0:\n            return 1\n        else:\n            return 0\n    elif s[index] != 0:\n        if s[index] > prev:\n            k1 -= 1\n        perms += find_perm(s1, n1, k1, index + 1, x1, s1[index])\n    else:\n        for i in x1:\n            if i > prev:\n                perms += find_perm(s1, n1, k1 - 1, index + 1, x1 - {i}, i)\n            else:\n                perms += find_perm(s1, n1, k1, index + 1, x1 - {i}, i)\n    return perms\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().strip().split())\n    s = list(map(int, input().strip().split()))\n    x = []\n    for i in range(n):\n        x.append(i + 1)\n    for i in s:\n        if i != 0:\n            x.remove(i)\n    ans = find_perm(s, n, k, 0, set(x), -1)\n    print(ans)", "import numpy as np\nimport itertools\nd = {i: 0 for i in range(8)}\n\ndef check(l):\n    ct = 0\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            ct += 1\n    d[ct] += 1\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    x = l.count(0)\n    ll = []\n    for i in range(1, n + 1):\n        if i not in l:\n            ll.append(i)\n    ll = list(itertools.permutations(ll))\n    for i in ll:\n        lx = np.array(l)\n        lx[lx == 0] = i\n        check(lx)\n    print(d[k])\n    for i in d:\n        d[i] = 0\n    t -= 1", "import itertools\nd = {}\nt = int(input())\nd[1] = [[1]]\nd[2] = [(1, 2), (2, 1)]\nd[3] = [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\nd[4] = [(1, 2, 3, 4), (1, 2, 4, 3), (1, 3, 2, 4), (1, 3, 4, 2), (1, 4, 2, 3), (1, 4, 3, 2), (2, 1, 3, 4), (2, 1, 4, 3), (2, 3, 1, 4), (2, 3, 4, 1), (2, 4, 1, 3), (2, 4, 3, 1), (3, 1, 2, 4), (3, 1, 4, 2), (3, 2, 1, 4), (3, 2, 4, 1), (3, 4, 1, 2), (3, 4, 2, 1), (4, 1, 2, 3), (4, 1, 3, 2), (4, 2, 1, 3), (4, 2, 3, 1), (4, 3, 1, 2), (4, 3, 2, 1)]\nd[5] = [(1, 2, 3, 4, 5), (1, 2, 3, 5, 4), (1, 2, 4, 3, 5), (1, 2, 4, 5, 3), (1, 2, 5, 3, 4), (1, 2, 5, 4, 3), (1, 3, 2, 4, 5), (1, 3, 2, 5, 4), (1, 3, 4, 2, 5), (1, 3, 4, 5, 2), (1, 3, 5, 2, 4), (1, 3, 5, 4, 2), (1, 4, 2, 3, 5), (1, 4, 2, 5, 3), (1, 4, 3, 2, 5), (1, 4, 3, 5, 2), (1, 4, 5, 2, 3), (1, 4, 5, 3, 2), (1, 5, 2, 3, 4), (1, 5, 2, 4, 3), (1, 5, 3, 2, 4), (1, 5, 3, 4, 2), (1, 5, 4, 2, 3), (1, 5, 4, 3, 2), (2, 1, 3, 4, 5), (2, 1, 3, 5, 4), (2, 1, 4, 3, 5), (2, 1, 4, 5, 3), (2, 1, 5, 3, 4), (2, 1, 5, 4, 3), (2, 3, 1, 4, 5), (2, 3, 1, 5, 4), (2, 3, 4, 1, 5), (2, 3, 4, 5, 1), (2, 3, 5, 1, 4), (2, 3, 5, 4, 1), (2, 4, 1, 3, 5), (2, 4, 1, 5, 3), (2, 4, 3, 1, 5), (2, 4, 3, 5, 1), (2, 4, 5, 1, 3), (2, 4, 5, 3, 1), (2, 5, 1, 3, 4), (2, 5, 1, 4, 3), (2, 5, 3, 1, 4), (2, 5, 3, 4, 1), (2, 5, 4, 1, 3), (2, 5, 4, 3, 1), (3, 1, 2, 4, 5), (3, 1, 2, 5, 4), (3, 1, 4, 2, 5), (3, 1, 4, 5, 2), (3, 1, 5, 2, 4), (3, 1, 5, 4, 2), (3, 2, 1, 4, 5), (3, 2, 1, 5, 4), (3, 2, 4, 1, 5), (3, 2, 4, 5, 1), (3, 2, 5, 1, 4), (3, 2, 5, 4, 1), (3, 4, 1, 2, 5), (3, 4, 1, 5, 2), (3, 4, 2, 1, 5), (3, 4, 2, 5, 1), (3, 4, 5, 1, 2), (3, 4, 5, 2, 1), (3, 5, 1, 2, 4), (3, 5, 1, 4, 2), (3, 5, 2, 1, 4), (3, 5, 2, 4, 1), (3, 5, 4, 1, 2), (3, 5, 4, 2, 1), (4, 1, 2, 3, 5), (4, 1, 2, 5, 3), (4, 1, 3, 2, 5), (4, 1, 3, 5, 2), (4, 1, 5, 2, 3), (4, 1, 5, 3, 2), (4, 2, 1, 3, 5), (4, 2, 1, 5, 3), (4, 2, 3, 1, 5), (4, 2, 3, 5, 1), (4, 2, 5, 1, 3), (4, 2, 5, 3, 1), (4, 3, 1, 2, 5), (4, 3, 1, 5, 2), (4, 3, 2, 1, 5), (4, 3, 2, 5, 1), (4, 3, 5, 1, 2), (4, 3, 5, 2, 1), (4, 5, 1, 2, 3), (4, 5, 1, 3, 2), (4, 5, 2, 1, 3), (4, 5, 2, 3, 1), (4, 5, 3, 1, 2), (4, 5, 3, 2, 1), (5, 1, 2, 3, 4), (5, 1, 2, 4, 3), (5, 1, 3, 2, 4), (5, 1, 3, 4, 2), (5, 1, 4, 2, 3), (5, 1, 4, 3, 2), (5, 2, 1, 3, 4), (5, 2, 1, 4, 3), (5, 2, 3, 1, 4), (5, 2, 3, 4, 1), (5, 2, 4, 1, 3), (5, 2, 4, 3, 1), (5, 3, 1, 2, 4), (5, 3, 1, 4, 2), (5, 3, 2, 1, 4), (5, 3, 2, 4, 1), (5, 3, 4, 1, 2), (5, 3, 4, 2, 1), (5, 4, 1, 2, 3), (5, 4, 1, 3, 2), (5, 4, 2, 1, 3), (5, 4, 2, 3, 1), (5, 4, 3, 1, 2), (5, 4, 3, 2, 1)]\na6 = []\na7 = []\na8 = []\nc6 = [1, 2, 3, 4, 5, 6]\nc7 = [1, 2, 3, 4, 5, 6, 7]\nc8 = [1, 2, 3, 4, 5, 6, 7, 8]\nd[7] = list(itertools.permutations(c7))\nd[8] = list(itertools.permutations(c8))\nd[6] = list(itertools.permutations(c6))\nch = {}\nfor i in range(9):\n    dd = {}\n    for j in range(i):\n        dd[j] = []\n    ch[i] = dd\nfor i in d:\n    kk = d[i]\n    for j in kk:\n        pp = j\n        ll = len(pp)\n        c = 0\n        for ji in range(ll - 1):\n            if pp[ji] < pp[ji + 1]:\n                c += 1\n        ch[i][c].append(j)\nfor edi in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    kk = d[n]\n    co = 0\n    pt = []\n    if n == 1 and k == 0:\n        print(1)\n        continue\n    for j in range(n):\n        if a[j] != 0:\n            pt.append(j)\n    kt = ch[n][k]\n    for i in kt:\n        kk = 1\n        for j in pt:\n            if i[j] != a[j]:\n                kk = 0\n                break\n        if kk == 1:\n            co += 1\n    print(co)", "from itertools import permutations\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = set()\n    ans = 0\n    for i in range(1, n + 1):\n        s.add(i)\n    l = s - set(a)\n    l = list(l)\n    l = list(permutations(l))\n    orig = []\n    for val in a:\n        orig.append(val)\n    for tup in l:\n        x = list(tup)\n        ind = 0\n        for i in range(n):\n            if a[i] == 0:\n                a[i] = x[ind]\n                ind += 1\n        cn = 0\n        for i in range(len(a) - 1):\n            if a[i + 1] - a[i] > 0:\n                cn += 1\n        if cn == k:\n            ans += 1\n        a = []\n        for p1 in orig:\n            a.append(p1)\n    print(ans)", "from itertools import permutations\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = 0\n    b = list(range(1, n + 1))\n    a = list(map(int, input().split()))\n    remain = list(set(b) - set(a))\n    for perm in permutations(remain):\n        temp = a[:]\n        p = 0\n        for i in range(n):\n            if temp[i] == 0:\n                temp[i] = perm[p]\n                p += 1\n        k_temp = sum([temp[i] > temp[i - 1] for i in range(1, n)])\n        ans += int(k_temp == k)\n    print(ans)", "from itertools import permutations\n\ndef isgood(a, k):\n    cn = 0\n    for i in range(len(a) - 1):\n        if a[i + 1] - a[i] > 0:\n            cn += 1\n    if cn == k:\n        return True\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = set()\n    ans = 0\n    for i in range(1, n + 1):\n        s.add(i)\n    l = list(s - set(a))\n    l = list(permutations(l))\n    temp = []\n    for val in a:\n        temp.append(val)\n    for tup in l:\n        x = list(tup)\n        ind = 0\n        for i in range(n):\n            if a[i] == 0:\n                a[i] = x[ind]\n                ind += 1\n        if isgood(a, k):\n            ans += 1\n        a = []\n        for p1 in temp:\n            a.append(p1)\n    print(ans)", "from itertools import permutations\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    br = []\n    cr = []\n    brc = []\n    for i in range(n):\n        cr.append(i + 1)\n        if ar[i] != 0:\n            br.append([ar[i], i])\n            brc.append(ar[i])\n    brc = set(brc)\n    cr = set(cr)\n    cr = list(cr - brc)\n    perm = permutations(cr)\n    pem = []\n    for p in perm:\n        temp = list(p)\n        for b in br:\n            temp = temp[:b[1]] + [b[0]] + temp[b[1]:]\n        pem.append(temp)\n    c = 0\n    for p in pem:\n        ck = 0\n        for i in range(1, n):\n            if p[i - 1] < p[i]:\n                ck += 1\n        if ck == k:\n            c += 1\n    print(c)", "import itertools\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(range(1, n + 1))\n    c = list(itertools.permutations(b, n))\n    d = []\n    e = []\n    for j in range(n):\n        if a[j] != 0:\n            d.append([j, a[j]])\n    m = len(d)\n    for j in c:\n        r = 0\n        for s in d:\n            if j[s[0]] == s[1]:\n                r += 1\n            else:\n                break\n        if r == m:\n            e.append(j)\n    ans = 0\n    for j in e:\n        m = 0\n        for s in range(len(j) - 1):\n            if j[s] < j[s + 1]:\n                m += 1\n        if m == k:\n            ans += 1\n    print(ans)", "from itertools import permutations\nR = lambda : map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, k) = R()\n    a = list(R())\n    l = [i for (i, x) in enumerate(a) if not x]\n    s = 0\n    for c in permutations(set(range(1, n + 1)) - set(a)):\n        for (i, x) in zip(l, c):\n            a[i] = x\n        s += sum((a[i] > a[i - 1] for i in range(1, n))) == k\n    print(s)", "from itertools import permutations\nR = lambda : map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    (n, k) = R()\n    a = list(R())\n    l = [i for (i, x) in enumerate(a) if not x]\n    s = 0\n    for c in permutations(set(set(range(1, n + 1)) - set(a))):\n        for (i, x) in zip(l, c):\n            a[i] = x\n        s += sum((a[i] > a[i - 1] for i in range(1, n))) == k\n    print(s)", "import itertools\nfor _ in range(int(input())):\n    (a, b) = [int(j) for j in input().split()]\n    l = [int(j) for j in input().split()]\n    l1 = [int(j) for j in range(1, a + 1)]\n    for i in l:\n        if i != 0:\n            l1.remove(i)\n    l2 = list(itertools.permutations(l1, len(l1)))\n    p = 0\n    for i in l2:\n        c = 0\n        p1 = []\n        for j in range(a):\n            if l[j] == 0:\n                p1.append(i[c])\n                c += 1\n            else:\n                p1.append(l[j])\n        u = 0\n        for j in range(1, a):\n            if p1[j] > p1[j - 1]:\n                u += 1\n        if u == b:\n            p += 1\n    print(p)", "def goDownTheRabbitHole(A, indexToFill, numbersLeftToUse, k):\n    if indexToFill == N:\n        if k == K:\n            return 1\n        else:\n            return 0\n    else:\n        goodWaysFound = 0\n        if A[indexToFill] != 0:\n            if indexToFill > 0 and A[indexToFill] > A[indexToFill - 1]:\n                goodWaysFound += goDownTheRabbitHole(A[:], indexToFill + 1, numbersLeftToUse, k + 1)\n            else:\n                goodWaysFound += goDownTheRabbitHole(A[:], indexToFill + 1, numbersLeftToUse, k)\n        elif A[indexToFill] == 0:\n            for numberLeftToUse in numbersLeftToUse:\n                A[indexToFill] = numberLeftToUse\n                if indexToFill > 0 and A[indexToFill] > A[indexToFill - 1]:\n                    goodWaysFound += goDownTheRabbitHole(A[:], indexToFill + 1, numbersLeftToUse - {numberLeftToUse}, k + 1)\n                else:\n                    goodWaysFound += goDownTheRabbitHole(A[:], indexToFill + 1, numbersLeftToUse - {numberLeftToUse}, k)\n        return goodWaysFound\nT = int(input())\nfor _ in range(T):\n    (N, K) = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n    numbersLeftToUse = set(range(1, N + 1)) - set(A)\n    goodWaysFound = goDownTheRabbitHole(A, 0, numbersLeftToUse, 0)\n    print(goodWaysFound)", "from itertools import permutations\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    b = []\n    for i in range(n + 1):\n        b.append(0)\n    for i in range(n):\n        if a[i] != 0:\n            b[a[i]] = 1\n    fn = []\n    for i in range(1, n + 1):\n        if b[i] == 0:\n            fn.append(i)\n    ans = [0]\n    perm = permutations(fn)\n    for p in perm:\n        tmp = []\n        gand = 0\n        total = 0\n        for i in a:\n            if i == 0:\n                tmp.append(p[gand])\n                gand += 1\n            else:\n                tmp.append(i)\n        for i in range(1, n):\n            if tmp[i] > tmp[i - 1]:\n                total += 1\n        if total == k:\n            ans[0] += 1\n    print(ans[0])", "from itertools import permutations\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = set()\n    ans1 = set()\n    count2 = 0\n    for i in range(n):\n        ans.add(i + 1)\n        if l[i] != 0:\n            ans1.add(l[i])\n    ans -= ans1\n    need = list(permutations(list(ans)))\n    for i in range(len(need)):\n        cal = l[:]\n        w = 0\n        for j in range(len(cal)):\n            if cal[j] == 0:\n                cal[j] = need[i][w]\n                w += 1\n        count = 0\n        for q in range(1, n):\n            if cal[q] > cal[q - 1]:\n                count += 1\n        if count == k:\n            count2 += 1\n    print(count2)", "from itertools import permutations\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    s1 = set([i for i in range(1, n + 1)])\n    s = list(s1 - set(a))\n    m = len(s)\n    d = permutations(s, m)\n    ans = 0\n    for i in d:\n        e = list(i)\n        x = 0\n        y = 0\n        for j in range(1, n):\n            temp1 = a[j - 1]\n            temp2 = a[j]\n            if temp1 == 0:\n                temp1 = e[x]\n                x += 1\n            if temp2 == 0:\n                temp2 = e[x]\n            if temp2 > temp1:\n                y += 1\n        if y == k:\n            ans += 1\n    print(ans)", "from itertools import permutations\nt = int(input())\nfor _ in range(t):\n    ans = 0\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ninv = [i for i in range(1, n + 1) if i not in arr]\n    for i in permutations(ninv):\n        (narr, c) = ([], 0)\n        for j in range(0, n):\n            if arr[j] != 0:\n                narr += [arr[j]]\n            else:\n                narr += [i[c]]\n                c += 1\n        c = 0\n        for j in range(0, n - 1):\n            if narr[j] < narr[j + 1]:\n                c += 1\n        if k == c:\n            ans += 1\n    print(ans)", "from itertools import permutations\n\ndef count(nums, k):\n    res = 0\n    for p in permutations(range(1, len(nums) + 1)):\n        validPermutation = True\n        for (x, y) in zip(nums, p):\n            if x != 0 and x != y:\n                validPermutation = False\n                break\n        if validPermutation:\n            valid = 0\n            for (i, j) in enumerate(p):\n                if i == 0:\n                    continue\n                if p[i] > p[i - 1]:\n                    valid += 1\n            if valid == k:\n                res += 1\n    return res\nnTestcases = int(input())\nfor _ in range(nTestcases):\n    (n, k) = [int(i) for i in input().split()]\n    numbers = [int(i) for i in input().split()]\n    print(count(numbers, k))", "from itertools import permutations as p\n\ndef validate(array, k, n):\n    count = 0\n    for z in range(1, n):\n        if array[z] > array[z - 1]:\n            count += 1\n    if count == k:\n        return True\n    return False\nt = int(input())\nfor ij in range(0, t):\n    (n, k) = map(int, input().strip().split())\n    a = list(map(int, input().strip().split()))\n    count = 0\n    has = [0] * (n + 1)\n    ans = 0\n    ind = []\n    leng = 0\n    for i in range(0, n):\n        if a[i] == 0:\n            ind.append(i)\n            leng += 1\n        if has[a[i]] == 1 and a[i] != 0:\n            ans = -1\n        else:\n            has[a[i]] += 1\n    if ans == -1:\n        print(0)\n    else:\n        req = []\n        for j in range(1, n + 1):\n            if has[j] == 0:\n                req.append(j)\n        for f in p(req):\n            m = list(f)\n            e = list(a)\n            for d in range(0, leng):\n                e[ind[d]] = m[d]\n            if validate(e, k, n):\n                ans += 1\n        print(ans)", "from itertools import permutations\n\ndef check(x, n):\n    c = 0\n    for i in range(n - 1):\n        if x[i + 1] > x[i]:\n            c += 1\n    return c\nt = int(input())\nfor i in range(t):\n    x = input().split()\n    n = int(x[0])\n    k = int(x[1])\n    x = input().split()\n    count = 0\n    A = [j for j in range(1, n + 1)]\n    for j in range(n):\n        x[j] = int(x[j])\n        if x[j] != 0:\n            A.remove(x[j])\n    B = list(permutations(A))\n    for j in B:\n        a = 0\n        pk = []\n        for p in range(n):\n            if x[p] == 0:\n                pk.append(j[a])\n                a += 1\n            else:\n                pk.append(x[p])\n        if check(pk, n) == k:\n            count += 1\n    print(count)", "import itertools\n\ndef f(nums, k):\n    res = 0\n    allpermutations = itertools.permutations(range(1, len(nums) + 1))\n    for p in allpermutations:\n        flag = True\n        for (x, y) in zip(nums, p):\n            if x != 0 and x != y:\n                flag = False\n                break\n        if not flag:\n            continue\n        cnt = 0\n        for i in range(1, len(p)):\n            if p[i] > p[i - 1]:\n                cnt += 1\n        if cnt == k:\n            res += 1\n    return res\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        (n, k) = [int(i) for i in input().split()]\n        numbers = [int(i) for i in input().split()]\n        print(f(numbers, k))\nmain()", "import sys\nimport math\nimport itertools\nfileoperation = 0\nif fileoperation:\n    orig_stdout = sys.stdout\n    orig_stdin = sys.stdin\n    inputfile = open('W:/Competitive Programming/input.txt', 'r')\n    outputfile = open('W:/Competitive Programming/output.txt', 'w')\n    sys.stdin = inputfile\n    sys.stdout = outputfile\nmod = 1000000007\n\ndef nospace(l):\n    ans = ''.join((str(i) for i in l))\n    return ans\nt = int(input())\nfor tt in range(t):\n    (n, k) = map(int, sys.stdin.readline().split(' '))\n    a = list(map(int, sys.stdin.readline().split(' ')))\n    b = []\n    for i in range(1, n + 1):\n        if i not in a:\n            b.append(i)\n    l = list(itertools.permutations(b))\n    ans = 0\n    for i in range(len(l)):\n        m = l[i]\n        c = a[:]\n        kk = 0\n        for j in range(n):\n            if not a[j]:\n                c[j] = m[kk]\n                kk += 1\n        count = 0\n        for j in range(1, n):\n            if c[j] > c[j - 1]:\n                count += 1\n        if count == k:\n            ans += 1\n    print(ans)\nif fileoperation:\n    sys.stdout = orig_stdout\n    sys.stdin = orig_stdin\n    inputfile.close()\n    outputfile.close()", "from itertools import permutations\nt = int(input())\nfor z in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    missing = []\n    for i in range(1, n + 1):\n        if i not in a:\n            missing.append(i)\n    if not missing:\n        cnt = 0\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                cnt += 1\n        if cnt == k:\n            print(1)\n        else:\n            print(0)\n        continue\n    alist = list(permutations(missing))\n    ans = 0\n    for filler in alist:\n        b = a[:]\n        idx = 0\n        for i in range(n):\n            if b[i] == 0:\n                b[i] = filler[idx]\n                idx += 1\n        cm = 0\n        for i in range(1, n):\n            if b[i] > b[i - 1]:\n                cm += 1\n        if cm == k:\n            ans += 1\n    print(ans)", "import itertools\nT = int(input())\nfor i in range(T):\n    (N, K) = map(int, input().split())\n    alist = list(map(int, input().split()))\n    num0 = alist.count(0)\n    missing = []\n    for j in range(1, N + 1):\n        if j not in alist:\n            missing.append(j)\n    perm = list(itertools.permutations(missing))\n    it = 1\n    for j in range(1, num0 + 1):\n        it *= j\n    ans = 0\n    for j in range(it):\n        x = 0\n        newa = list(alist)\n        for k in range(N):\n            if newa[k] == 0:\n                newa[k] = perm[j][x]\n                x += 1\n        count = 0\n        for k in range(N - 1):\n            if newa[k] < newa[k + 1]:\n                count += 1\n        if count == K:\n            ans += 1\n    print(ans)", "import numpy as np\n\ndef allPerms(x):\n\n    def ap(x):\n        ret = []\n        if len(x) == 1:\n            return [[x[0]]]\n        for i in range(len(x)):\n            for a in ap(x[:i] + x[i + 1:]):\n                ret += [[x[i]] + a]\n        return ret\n    return np.array(ap(list(range(1, x + 1))), dtype=np.int64)\nAA = [[]]\nSS = [[]]\nfor i in range(1, 9):\n    AA += [allPerms(i)]\n    x = AA[-1]\n    y = np.sum(x[:, 1:] > x[:, :-1], 1)\n    SS += [y]\n\ndef solve(x, k):\n    x = np.array(x, dtype=np.int64)\n    w = np.where(x > 0)[0]\n    if len(w) == 0:\n        b = SS[len(x)]\n        return np.sum(b == k)\n    a = AA[len(x)]\n    w0 = np.where(np.sum(a[:, w] == x[np.newaxis, w], 1) == len(w))[0]\n    b = SS[len(x)]\n    return np.sum(b[w0] == k)\nn = int(input())\nfor i in range(n):\n    (x, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    print(solve(x, k))"]