["def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nf = [0 for i in range(1001)]\nfor i in range(1, 1001):\n    for j in range(1, i + 1):\n        if i % j == 0:\n            f[i] += 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = [[] for i in range(n)]\n    m = [[] for i in range(n)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                m[i - 1].append(0)\n            else:\n                m[i - 1].append(f[gcd(i, j)])\n        s[i - 1] = sorted(m[i - 1])\n    r = [[] for i in range(n)]\n    p = [[] for i in range(n)]\n    for i in range(0, n):\n        r[i] = list(map(int, input().split()))\n        p[i] = sorted(r[i])\n    ans = []\n    vis = [0 for i in range(n)]\n    for i in range(0, n):\n        for j in range(n):\n            if vis[j] == 0 and p[i] == s[j]:\n                c = 1\n                for k in range(i):\n                    if m[j][ans[k]] != r[i][k]:\n                        c = 0\n                        break\n                if c:\n                    ans.append(j)\n                    vis[j] = 1\n                    break\n    for i in ans:\n        print(i + 1)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nf = [0 for i in range(1001)]\nfor i in range(1, 1001):\n    for j in range(1, i + 1):\n        if i % j == 0:\n            f[i] += 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = [[] for i in range(n)]\n    m = [[] for i in range(n)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                m[i - 1].append(0)\n            else:\n                m[i - 1].append(f[gcd(i, j)])\n        s[i - 1] = sorted(m[i - 1])\n    r = [[] for i in range(n)]\n    p = [[] for i in range(n)]\n    for i in range(0, n):\n        r[i] = list(map(int, input().split()))\n        p[i] = sorted(r[i])\n    ans = []\n    vis = [0 for i in range(n)]\n    for i in range(0, n):\n        for j in range(n):\n            if vis[j] == 0 and p[i] == s[j]:\n                c = 1\n                for k in range(i):\n                    if m[j][ans[k]] != r[i][k]:\n                        c = 0\n                        break\n                if c:\n                    ans.append(j)\n                    vis[j] = 1\n                    break\n    for i in ans:\n        print(i + 1)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nf = [0 for i in range(1001)]\nfor i in range(1, 1001):\n    for j in range(1, i + 1):\n        if i % j == 0:\n            f[i] += 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = [[] for i in range(n)]\n    m = [[] for i in range(n)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                m[i - 1].append(0)\n            else:\n                m[i - 1].append(f[gcd(i, j)])\n        s[i - 1] = sorted(m[i - 1])\n    r = [[] for i in range(n)]\n    p = [[] for i in range(n)]\n    for i in range(0, n):\n        r[i] = list(map(int, input().split()))\n        p[i] = sorted(r[i])\n    ans = []\n    vis = [0 for i in range(n)]\n    for i in range(0, n):\n        for j in range(n):\n            if vis[j] == 0 and p[i] == s[j]:\n                c = 1\n                for k in range(i):\n                    if m[j][ans[k]] != r[i][k]:\n                        c = 0\n                        break\n                if c:\n                    ans.append(j)\n                    vis[j] = 1\n                    break\n    for i in ans:\n        print(i + 1)", "import math\nfrom collections import Counter\nlist4 = []\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef countDivisors(e):\n    cnt = 0\n    for k in range(1, int(math.sqrt(e)) + 1):\n        if e % k == 0:\n            if e / k == k:\n                cnt = cnt + 1\n            else:\n                cnt = cnt + 2\n    return cnt\nfor i in range(1, 1001):\n    list3 = []\n    for j in range(1, 1001):\n        if i == j:\n            list3.append(0)\n        else:\n            e = gcd(i, j)\n            d = countDivisors(e)\n            list3.append(d)\n    list4.append(list3)\nfor _ in range(int(input())):\n    n = int(input())\n    (list1, list5, list6, list10, list12) = ([], [], [], [], [])\n    (list8, list9, list13, list7) = ([0] * n, [0] * n, [0] * n, [0] * n)\n    for i in range(n):\n        list2 = list(map(int, input().split()))\n        list1.append(list2)\n        d = Counter(list2)\n        list6.append(d)\n    for i in range(n):\n        e = Counter(list4[i][0:n])\n        list5.append(e)\n    for i in range(n):\n        list11 = []\n        if list9[i] != 1:\n            for j in range(n):\n                if list5[i] == list5[j] and i != j and (list9[j] != 1):\n                    list11.append(j + 1)\n                    list9[j] = 1\n            list11.append(i + 1)\n            list10.append(list11)\n    for i in range(len(list10)):\n        if len(list10[i]) == 1:\n            list13[list10[i][0] - 1] = 1\n    list21 = [0] * n\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if list6[i] == list5[j] and list13[j] == 1:\n                if list7[j] != 1:\n                    count += 1\n                    list7[i] = j + 1\n                    list21[j] = 1\n                    break\n            if list6[i] == list5[j]:\n                if j + 1 in list10[0]:\n                    if list7[j] != 1:\n                        count += 1\n                        list10[0].remove(j + 1)\n                        list7[i] = j + 1\n                        list21[j] = 1\n                        break\n    for i in range(n):\n        if list7[i] == 0:\n            for j in range(n):\n                c = 0\n                if list6[i] == list5[j]:\n                    if list21[j] == 0:\n                        if count > 0:\n                            for k in range(n):\n                                if list7[k] != 0:\n                                    f = gcd(list7[k], j + 1)\n                                    g = countDivisors(f)\n                                    if g != list1[k][i]:\n                                        c = 1\n                                        break\n                        if c == 0:\n                            list7[i] = j + 1\n                            count += 1\n                            list21[j] = 1\n                            break\n                        else:\n                            continue\n    for k in list7:\n        print(k)", "import math\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprohibitedprimes = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [7], [], [], [], [], [], [10], [], [], [], [12], [], [13], [], [], [], [], [], [], [], [11], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [16], [], [], [], [], [], [18], [], [], [], [], [], [], [], [], [21], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [19], [19], [19], [], [], [20], [20], [20], [20], [], [], [], [], [], [], [22], [22], [], [], [], [23], [23], [], [], [23], [], [], [], [], [], [25], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [30], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [37, 27], [27], [27], [27], [27], [27], [27], [], [], [28], [28], [28], [28], [28], [], [40, 29], [29], [29], [29], [29], [29], [30], [30], [30], [30], [30], [30], [30], [], [], [], [31], [], [], [], [44, 32], [32], [32], [32], [32], [32], [32], [33], [33], [33], [33], [33], [33], [33], [34], [34], [34], [34], [], [], [], [35], [35], [35], [35], [35], [35], [35], [], [36], [36], [], [], [], [], [37], [37], [37], [37], [37], [], [], [38], [38], [38], [38], [38], [38], [], [39], [39], [], [], [], [], [], [40], [40], [40], [40], [40], [40], [40], [41], [41], [], [], [], [], [], [42], [42], [42], [], [], [], [], [43], [43], [43], [43], [43], [], [], [], [], [], [], [], [], [], [45], [45], [45], [45], [], [], [], [46], [], [], [], [], [], [], [47], [], [], [], [], [], [], [48], [48], [48], [48], [], [], [48], [], [], [], [], [], [], [], [50], [50], [], [], [], [], [], [], [], [], [], [], [], [51], [], [], [], [], [], [], [], [53], [53], [53], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [41], [41], [41], [41], [41], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [43], [43], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [45], [45], [45], [45], [45], [45], [45], [45], [45], [45], [45], [], [], [], [], [46], [46], [46], [46], [46], [46], [46], [], [], [], [], [], [47], [47], [47], [47], [47], [47], [48], [48], [48], [48], [48], [48], [48], [48], [48], [48], [48], [], [], [], [], [], [49], [49], [49], [49], [49], [49], [50], [50], [50], [50], [50], [50], [50], [50], [50], [50], [50], [51], [51], [51], [51], [51], [51], [51], [51], [51], [51], [51], [], [], [], [], [], [], [52], [52], [], [], [], [53], [53], [53], [53], [53], [53], [53], [53], [53], [53], [53], [], [54], [54], [54], [54], [54], [54], [54], [54], [54], [54], [], [], [], [], [55], [55], [55], [], [], [], [], [56], [56], [56], [56], [56], [56], [56], [56], [56], [56], [56], [], [], [57], [57], [57], [57], [57], [57], [57], [57], [57], [58], [58], [58], [58], [58], [58], [58], [58], [], [], [], [59], [59], [59], [59], [59], [59], [59], [59], [59], [59], [59], [], [], [], [60], [60], [60], [60], [51], [51], [51], [51], [61, 51], [61, 51], [61, 51], [61, 51], [61, 51], [61], [61], [61], [61], [], [], [62], [62], [62], [62], [62], [62], [62], [62], [62], [62], [62], [], [], [], [63, 53], [53], [53], [53], [53], [53], [], [], [64], [64], [64], [64], [64], [64], [64], [64], [64], [64, 54], [64, 54], [65, 55], [65, 55], [65, 55], [65, 55], [65, 55], [65, 55], [65, 55], [65], [65], [65], [55], [66, 55], [66, 55], [66, 56], [66, 56], [66, 56], [56], [56], [56], [56], [56], [56], [67, 56], [67, 56], [67, 56], [67, 56], [67], [67], [67], [67], [67], [67], [67], [68], [68], [68], [68], [68], [68], [58], [58], [58], [58], [58], [69, 58], [69, 58], [69, 58], [69, 58], [69, 58], [69, 58], [58], [58], [59], [59], [59], [70, 59], [70, 59], [70, 59], [70, 59], [70, 59], [70, 59], [70, 59], [70], [70], [70, 59], [70], [], [71], [60], [60], [60], [60], [60], [60], [60], [60], [60], [72, 60], [72, 61], [72, 61], [72, 61], [72, 61], [72, 61], [72], [], [], [], [], [73], [73], [73, 61], [73, 62], [73, 62], [73, 62], [73, 62], [73, 62], [73, 62], [62], [62], [74, 62], [74, 62], [74, 62], [74, 62], [74, 62], [], [], [], [], [], [], [75], [75], [75], [75, 63], [75, 63], [75, 63], [75, 63], [75, 64], [64], [64], [64], [76], [76], [76], [76], [76], [76, 64], [76, 64], [76, 64], [76, 64], [65], [65], [77, 65], [77, 65], [77, 65], [77, 65], [77, 65], [77, 65], [77, 65], [65], [65], [65], [65], [78], [78], [78], [78], [78], [78], [78], [78], [78], [], [78], [79], [79, 66], [79, 67], [79, 67], [79, 67], [79, 67], [79, 67], [79, 67], [79, 67], [79, 67], [79, 67], [80, 67], [80, 67], [80, 67], [80, 67], [80, 68], [80, 68], [80, 68], [80, 68], [80], [80], [80], [81], [81], [81], [81], [81], [81], [81], [81], [81, 69], [81, 69], [81, 69], [82, 69], [82, 69], [82, 69], [82, 69], [82, 69], [82, 69], [82, 69], [82, 69], [82, 70], [82, 70], [82], [83], [83], [83], [83], [83], [70], [70], [70], [70], [70], [83, 71], [84, 71], [84], [84], [84], [71], [71], [71], [71], [71], [71], [71], [85, 71], [], [], [85], [85], [85], [85], [85], [85, 72], [85, 72], [85, 72], [86, 72], [86, 72], [86, 72], [86, 73], [86], [86], [86], [86], [86, 73], [86, 73], [86, 73], [87, 73], [87, 73], [87, 73], [87, 73], [87, 73], [87], [87], [87], [87], [87, 74], [87, 74], [88, 74], [88, 74], [88, 74], [88, 74], [88, 74], [88, 74], [88, 74], [88], [88], [88], [88], [89], [89], [89], [89], [89], [89], [89], [75], [75], [89], [89, 76], [76], [76], [76], [76], [76], [76], [76], [76], [76], [76], [76]]\nsolutionofprimes = [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {7: [3, 5]}, {}, {}, {}, {}, {}, {10: [3, 5]}, {}, {}, {}, {12: [3, 5]}, {}, {13: [3, 5]}, {}, {}, {}, {}, {}, {}, {}, {11: [5, 7]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {16: [5, 7]}, {}, {}, {}, {}, {}, {18: [5, 7]}, {}, {}, {}, {}, {}, {}, {}, {}, {21: [5, 7]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {19: [7, 13]}, {19: [7, 13]}, {19: [7, 13]}, {}, {}, {20: [7, 13]}, {20: [7, 13]}, {20: [7, 13]}, {20: [7, 13]}, {}, {}, {}, {}, {}, {}, {22: [7, 13]}, {22: [7, 13]}, {}, {}, {}, {23: [7, 13]}, {23: [7, 13]}, {}, {}, {23: [7, 17]}, {}, {}, {}, {}, {}, {25: [7, 13]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {30: [7, 17]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {37: [7, 17], 27: [11, 17]}, {27: [11, 17]}, {27: [11, 17]}, {27: [11, 17]}, {27: [11, 17]}, {27: [11, 17]}, {27: [11, 17]}, {}, {}, {28: [11, 17]}, {28: [11, 17]}, {28: [11, 17]}, {28: [11, 17]}, {28: [11, 17]}, {}, {40: [7, 17], 29: [11, 17]}, {29: [11, 17]}, {29: [11, 17]}, {29: [11, 17]}, {29: [11, 17]}, {29: [11, 19]}, {30: [11, 17]}, {30: [11, 17]}, {30: [11, 17]}, {30: [11, 17]}, {30: [11, 17]}, {30: [11, 17]}, {30: [11, 17]}, {}, {}, {}, {31: [11, 17]}, {}, {}, {}, {44: [7, 17], 32: [11, 17]}, {32: [11, 17]}, {32: [11, 17]}, {32: [11, 17]}, {32: [11, 17]}, {32: [11, 17]}, {32: [11, 17]}, {33: [11, 17]}, {33: [11, 17]}, {33: [11, 17]}, {33: [11, 17]}, {33: [11, 17]}, {33: [11, 17]}, {33: [11, 17]}, {34: [11, 17]}, {34: [11, 17]}, {34: [11, 17]}, {34: [11, 17]}, {}, {}, {}, {35: [11, 17]}, {35: [11, 17]}, {35: [11, 17]}, {35: [11, 17]}, {35: [11, 17]}, {35: [11, 17]}, {35: [11, 17]}, {}, {36: [11, 17]}, {36: [11, 17]}, {}, {}, {}, {}, {37: [11, 17]}, {37: [11, 17]}, {37: [11, 17]}, {37: [11, 17]}, {37: [11, 17]}, {}, {}, {38: [11, 17]}, {38: [11, 17]}, {38: [11, 17]}, {38: [11, 17]}, {38: [11, 17]}, {38: [11, 17]}, {}, {39: [11, 17]}, {39: [11, 17]}, {}, {}, {}, {}, {}, {40: [11, 17]}, {40: [11, 17]}, {40: [11, 17]}, {40: [11, 17]}, {40: [11, 17]}, {40: [11, 17]}, {40: [11, 19]}, {41: [11, 17]}, {41: [11, 17]}, {}, {}, {}, {}, {}, {42: [11, 17]}, {42: [11, 17]}, {42: [11, 17]}, {}, {}, {}, {}, {43: [11, 17]}, {43: [11, 17]}, {43: [11, 17]}, {43: [11, 17]}, {43: [11, 17]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {45: [11, 17]}, {45: [11, 17]}, {45: [11, 17]}, {45: [11, 17]}, {}, {}, {}, {46: [11, 17]}, {}, {}, {}, {}, {}, {}, {47: [11, 17]}, {}, {}, {}, {}, {}, {}, {48: [11, 17]}, {48: [11, 17]}, {48: [11, 17]}, {48: [11, 17]}, {}, {}, {48: [11, 19]}, {}, {}, {}, {}, {}, {}, {}, {50: [11, 17]}, {50: [11, 17]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {51: [11, 19]}, {}, {}, {}, {}, {}, {}, {}, {53: [11, 17]}, {53: [11, 17]}, {53: [11, 17]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {41: [19, 23]}, {41: [19, 23]}, {41: [19, 23]}, {41: [19, 23]}, {41: [19, 23]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {43: [19, 23]}, {43: [19, 23]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {45: [17, 29]}, {45: [17, 29]}, {45: [17, 29]}, {45: [17, 29]}, {45: [17, 29]}, {45: [17, 29]}, {45: [17, 29]}, {45: [17, 29]}, {45: [17, 29]}, {45: [17, 29]}, {45: [17, 29]}, {}, {}, {}, {}, {46: [17, 29]}, {46: [17, 29]}, {46: [17, 29]}, {46: [17, 29]}, {46: [17, 29]}, {46: [17, 29]}, {46: [17, 29]}, {}, {}, {}, {}, {}, {47: [17, 29]}, {47: [17, 29]}, {47: [17, 29]}, {47: [17, 29]}, {47: [17, 29]}, {47: [17, 31]}, {48: [17, 29, 19, 23]}, {48: [17, 29]}, {48: [17, 29]}, {48: [17, 29]}, {48: [17, 29]}, {48: [17, 29]}, {48: [17, 29]}, {48: [17, 29]}, {48: [17, 29]}, {48: [17, 29]}, {48: [17, 29]}, {}, {}, {}, {}, {}, {49: [17, 29]}, {49: [17, 29]}, {49: [17, 29]}, {49: [17, 29]}, {49: [17, 29]}, {49: [17, 29]}, {50: [19, 23]}, {50: [17, 29]}, {50: [17, 29]}, {50: [17, 29]}, {50: [17, 29]}, {50: [17, 29]}, {50: [17, 29]}, {50: [17, 29]}, {50: [17, 29]}, {50: [17, 29]}, {50: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {}, {}, {}, {}, {}, {}, {52: [17, 29]}, {52: [17, 29]}, {}, {}, {}, {53: [17, 29]}, {53: [17, 29]}, {53: [17, 29]}, {53: [17, 29]}, {53: [17, 29]}, {53: [17, 29]}, {53: [17, 29]}, {53: [17, 29]}, {53: [17, 29]}, {53: [17, 29]}, {53: [17, 29]}, {}, {54: [17, 29]}, {54: [17, 29]}, {54: [17, 29]}, {54: [17, 29]}, {54: [17, 29]}, {54: [17, 29]}, {54: [17, 29]}, {54: [17, 29]}, {54: [17, 29]}, {54: [17, 29]}, {}, {}, {}, {}, {55: [17, 29]}, {55: [17, 29]}, {55: [17, 29]}, {}, {}, {}, {}, {56: [17, 29]}, {56: [17, 29]}, {56: [17, 29]}, {56: [17, 29]}, {56: [17, 29]}, {56: [17, 29]}, {56: [17, 29]}, {56: [17, 29]}, {56: [17, 29]}, {56: [17, 29]}, {56: [17, 29]}, {}, {}, {57: [17, 29]}, {57: [17, 29]}, {57: [17, 29]}, {57: [17, 29]}, {57: [17, 29]}, {57: [17, 29]}, {57: [17, 29]}, {57: [17, 29]}, {57: [17, 29]}, {58: [17, 29]}, {58: [17, 29]}, {58: [17, 29]}, {58: [17, 29]}, {58: [17, 29]}, {58: [17, 29]}, {58: [17, 29]}, {58: [17, 29]}, {}, {}, {}, {59: [17, 29]}, {59: [17, 29]}, {59: [17, 29]}, {59: [17, 29]}, {59: [17, 29]}, {59: [17, 29]}, {59: [17, 29]}, {59: [17, 29]}, {59: [17, 29]}, {59: [17, 29]}, {59: [17, 29]}, {}, {}, {}, {60: [17, 29]}, {60: [17, 29]}, {60: [17, 29]}, {60: [17, 29]}, {51: [23, 29]}, {51: [23, 29]}, {51: [23, 29]}, {51: [23, 29]}, {61: [17, 29], 51: [23, 29]}, {61: [17, 29], 51: [23, 29]}, {61: [17, 29], 51: [23, 29]}, {61: [17, 29], 51: [23, 29]}, {61: [17, 29], 51: [23, 29]}, {61: [17, 29]}, {61: [17, 29]}, {61: [17, 29]}, {61: [17, 29]}, {}, {}, {62: [17, 29]}, {62: [17, 29]}, {62: [17, 29]}, {62: [17, 29]}, {62: [17, 29]}, {62: [17, 29]}, {62: [17, 29]}, {62: [17, 29]}, {62: [17, 29]}, {62: [17, 29]}, {62: [17, 29]}, {}, {}, {}, {63: [17, 29], 53: [23, 29]}, {53: [23, 29]}, {53: [23, 29]}, {53: [23, 29]}, {53: [23, 29]}, {53: [23, 29]}, {}, {}, {64: [17, 29]}, {64: [17, 29]}, {64: [17, 29]}, {64: [17, 29]}, {64: [17, 29]}, {64: [17, 29]}, {64: [17, 29]}, {64: [17, 29]}, {64: [17, 29]}, {64: [17, 29], 54: [23, 29]}, {64: [17, 31], 54: [23, 29]}, {65: [17, 29], 55: [19, 37]}, {65: [17, 29], 55: [19, 37]}, {65: [17, 29], 55: [19, 37]}, {65: [17, 29], 55: [19, 37]}, {65: [17, 29], 55: [19, 37]}, {65: [17, 29], 55: [19, 37]}, {65: [17, 29], 55: [19, 37]}, {65: [17, 29]}, {65: [17, 29]}, {65: [17, 29]}, {55: [23, 29]}, {66: [17, 29], 55: [23, 29]}, {66: [17, 29], 55: [23, 29]}, {66: [17, 29], 56: [19, 37]}, {66: [17, 29], 56: [19, 37]}, {66: [17, 29], 56: [19, 37]}, {56: [19, 37]}, {56: [19, 37]}, {56: [19, 37]}, {56: [19, 37]}, {56: [19, 37]}, {56: [19, 37, 23, 29]}, {67: [17, 29], 56: [19, 37, 23, 29]}, {67: [17, 29], 56: [19, 37, 23, 29]}, {67: [17, 29], 56: [19, 37, 23, 29]}, {67: [17, 29], 56: [23, 29]}, {67: [17, 29]}, {67: [17, 29]}, {67: [17, 29]}, {67: [17, 29]}, {67: [17, 29]}, {67: [17, 29]}, {67: [17, 29]}, {68: [17, 29]}, {68: [17, 29]}, {68: [17, 29]}, {68: [17, 29]}, {68: [17, 29]}, {68: [17, 29]}, {58: [19, 37]}, {58: [19, 37]}, {58: [19, 37]}, {58: [19, 37]}, {58: [19, 37]}, {69: [17, 29], 58: [19, 37, 23, 29]}, {69: [17, 29], 58: [23, 29]}, {69: [17, 29], 58: [23, 29]}, {69: [17, 29], 58: [23, 29]}, {69: [17, 29], 58: [23, 29]}, {69: [17, 29], 58: [23, 29]}, {58: [23, 29]}, {58: [23, 29]}, {59: [19, 37]}, {59: [19, 37]}, {59: [19, 37]}, {70: [17, 29], 59: [19, 37]}, {70: [17, 29], 59: [19, 37]}, {70: [17, 29], 59: [19, 37]}, {70: [17, 29], 59: [19, 37]}, {70: [17, 29], 59: [19, 37]}, {70: [17, 29], 59: [19, 37]}, {70: [17, 29], 59: [19, 37]}, {70: [17, 29]}, {70: [17, 29]}, {70: [17, 29], 59: [19, 41]}, {70: [17, 29]}, {}, {71: [17, 29]}, {60: [23, 29]}, {60: [23, 29]}, {60: [23, 29]}, {60: [23, 29]}, {60: [23, 29]}, {60: [23, 29]}, {60: [23, 29]}, {60: [23, 29]}, {60: [23, 29]}, {72: [13, 59, 17, 29], 60: [23, 29]}, {72: [17, 29], 61: [19, 37]}, {72: [17, 29], 61: [19, 37]}, {72: [17, 29], 61: [19, 37]}, {72: [17, 29], 61: [19, 37]}, {72: [17, 29], 61: [19, 37]}, {72: [17, 29]}, {}, {}, {}, {}, {73: [13, 59, 61, 17, 29]}, {73: [13, 59, 61, 17, 29]}, {73: [13, 59, 61, 17, 29], 61: [23, 29]}, {73: [17, 29], 62: [19, 37]}, {73: [17, 29], 62: [19, 37]}, {73: [17, 29], 62: [19, 37]}, {73: [17, 29], 62: [19, 37]}, {73: [17, 29], 62: [19, 37]}, {73: [17, 29], 62: [19, 37]}, {62: [19, 37, 23, 29]}, {62: [19, 37, 23, 29]}, {74: [13, 59, 61, 17, 29], 62: [23, 29]}, {74: [13, 59, 61, 17, 29], 62: [23, 29]}, {74: [13, 59, 61], 62: [23, 29]}, {74: [13, 59, 61], 62: [23, 29]}, {74: [13, 59, 61], 62: [23, 29]}, {}, {}, {}, {}, {}, {}, {75: [13, 59, 61, 17, 29]}, {75: [13, 61, 17, 29]}, {75: [13, 61, 17, 29]}, {75: [13, 61, 17, 29], 63: [23, 29]}, {75: [13, 61, 17, 29], 63: [23, 29]}, {75: [13, 61, 17, 29], 63: [23, 29]}, {75: [13, 61, 17, 29], 63: [23, 29]}, {75: [17, 29], 64: [17, 47, 19, 37]}, {64: [19, 37]}, {64: [19, 37]}, {64: [19, 37]}, {76: [13, 61, 17, 29]}, {76: [13, 61, 17, 29]}, {76: [13, 61, 17, 29]}, {76: [13, 61, 17, 29]}, {76: [13, 61, 17, 29]}, {76: [13, 61], 64: [23, 29]}, {76: [13, 61], 64: [23, 29]}, {76: [13, 61], 64: [23, 29]}, {76: [13, 61], 64: [23, 29]}, {65: [17, 47, 19, 37]}, {65: [19, 37]}, {77: [13, 61, 17, 29], 65: [19, 37]}, {77: [13, 61, 17, 29], 65: [19, 37]}, {77: [13, 61, 17, 29], 65: [19, 37]}, {77: [13, 61], 65: [19, 37]}, {77: [13, 61], 65: [23, 29]}, {77: [13, 61], 65: [23, 29]}, {77: [13, 61], 65: [23, 29]}, {65: [23, 29]}, {65: [23, 29]}, {65: [23, 29]}, {65: [23, 29]}, {78: [17, 29]}, {78: [17, 29]}, {78: [17, 29]}, {78: [17, 29]}, {78: [17, 29]}, {78: [17, 29]}, {78: [17, 29]}, {78: [17, 29]}, {78: [17, 29]}, {}, {78: [17, 31]}, {79: [13, 59, 61, 17, 29]}, {79: [13, 59, 61], 66: [23, 29]}, {79: [13, 67], 67: [19, 37]}, {79: [13, 67], 67: [19, 37]}, {79: [13, 67], 67: [19, 37]}, {79: [13, 67], 67: [23, 29]}, {79: [13, 67], 67: [23, 29]}, {79: [13, 67], 67: [23, 29]}, {79: [13, 67], 67: [23, 29]}, {79: [13, 67], 67: [23, 29]}, {79: [13, 67], 67: [23, 29]}, {80: [13, 59, 61, 17, 29], 67: [23, 29]}, {80: [13, 59, 61, 17, 29], 67: [23, 29]}, {80: [13, 59, 61, 17, 29], 67: [23, 29]}, {80: [13, 59, 61, 17, 29], 67: [23, 29]}, {80: [13, 67], 68: [19, 37]}, {80: [13, 67], 68: [19, 37]}, {80: [13, 67], 68: [19, 37]}, {80: [13, 67], 68: [19, 37]}, {80: [13, 67]}, {80: [13, 67]}, {80: [13, 67]}, {81: [13, 61, 17, 29]}, {81: [13, 61, 17, 29]}, {81: [13, 61, 17, 29]}, {81: [13, 61, 17, 29]}, {81: [13, 61, 17, 29]}, {81: [13, 61, 17, 29]}, {81: [13, 67, 17, 29]}, {81: [13, 67, 17, 29]}, {81: [13, 67], 69: [23, 29]}, {81: [13, 67], 69: [23, 29]}, {81: [13, 67, 17, 31], 69: [17, 53, 23, 29]}, {82: [13, 61], 69: [17, 53, 23, 29]}, {82: [13, 61], 69: [17, 53, 23, 29]}, {82: [13, 61], 69: [17, 53, 23, 29]}, {82: [13, 61], 69: [17, 53, 23, 29]}, {82: [13, 61], 69: [17, 53, 23, 29]}, {82: [13, 61], 69: [17, 53, 23, 29]}, {82: [13, 61], 69: [17, 53, 23, 29]}, {82: [13, 61], 69: [17, 53, 23, 29]}, {82: [13, 67], 70: [19, 37]}, {82: [13, 67], 70: [19, 37]}, {82: [13, 67]}, {83: [13, 61, 17, 29]}, {83: [13, 61, 17, 29]}, {83: [17, 29]}, {83: [17, 29]}, {83: [17, 29]}, {70: [17, 53]}, {70: [17, 53]}, {70: [17, 53, 23, 29]}, {70: [17, 53, 23, 29]}, {70: [17, 53, 23, 29]}, {83: [13, 67, 71], 71: [19, 37]}, {84: [17, 29], 71: [19, 37]}, {84: [17, 29]}, {84: [17, 29]}, {84: [17, 29]}, {71: [23, 29]}, {71: [23, 29]}, {71: [23, 29]}, {71: [23, 29]}, {71: [23, 29]}, {71: [23, 29]}, {71: [23, 29]}, {85: [13, 59, 61], 71: [17, 53, 23, 29]}, {}, {}, {85: [13, 67]}, {85: [13, 67]}, {85: [13, 67]}, {85: [13, 67]}, {85: [13, 67]}, {85: [13, 67], 72: [23, 29]}, {85: [13, 67], 72: [23, 29]}, {85: [13, 67], 72: [23, 29]}, {86: [13, 61, 17, 29], 72: [23, 29]}, {86: [13, 61, 17, 29], 72: [23, 29]}, {86: [13, 61, 17, 29], 72: [23, 29]}, {86: [13, 67, 17, 29], 73: [19, 37]}, {86: [13, 67, 17, 29]}, {86: [13, 67, 17, 29]}, {86: [13, 67]}, {86: [13, 67]}, {86: [13, 67], 73: [17, 53]}, {86: [13, 67], 73: [17, 53]}, {86: [13, 67], 73: [17, 53]}, {87: [13, 61], 73: [17, 53, 23, 29]}, {87: [13, 61], 73: [17, 53, 23, 29]}, {87: [13, 61], 73: [17, 53, 23, 29]}, {87: [13, 61], 73: [17, 53, 23, 29]}, {87: [13, 61], 73: [17, 53, 23, 29]}, {87: [13, 67]}, {87: [13, 67]}, {87: [13, 67]}, {87: [13, 67]}, {87: [13, 67], 74: [23, 29]}, {87: [13, 67], 74: [23, 29]}, {88: [13, 61, 17, 29], 74: [23, 29]}, {88: [13, 61], 74: [17, 53, 23, 29]}, {88: [13, 61], 74: [17, 53, 23, 29]}, {88: [13, 61], 74: [17, 53, 23, 29]}, {88: [13, 61], 74: [17, 53, 23, 29]}, {88: [13, 61], 74: [17, 53, 23, 29]}, {88: [13, 61], 74: [17, 53, 23, 29]}, {88: [13, 67]}, {88: [13, 67]}, {88: [13, 67]}, {88: [13, 67]}, {89: [17, 29]}, {89: [17, 29]}, {89: [17, 29]}, {89: [17, 29]}, {89: [17, 29]}, {89: [17, 29]}, {89: [17, 29]}, {75: [17, 53, 23, 29]}, {75: [17, 53, 23, 29]}, {89: [13, 67]}, {89: [13, 67], 76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}]\ndicti = {}\n\ndef process1(n):\n    dicti[0] = [1]\n    for i in primes:\n        if i > n:\n            break\n        else:\n            key = int(n / i) - 1\n            if key in dicti.keys():\n                dicti[key].append(i)\n            else:\n                dicti[key] = [i]\n\ndef isProhibited(n, c):\n    if c + 1 in prohibitedprimes[n - 1]:\n        return True\n    return False\n\ndef isCorrect(n, i, j):\n    for itr in solutionofprimes[n - 1][i + 1]:\n        if arr[j][inversemarkings[itr]] != 1:\n            return False\n    return True\n\ndef isMaxPower(n, b, v):\n    if int(math.log(n, b)) == 1:\n        return False\n    elif v == int(math.log(n, b)) or v == int(math.log(n, b)) - 1:\n        return True\n    else:\n        return False\n\ndef findMaxPowers(n):\n    maxPowers = {}\n    for itr in primes:\n        if int(math.log(n, itr)) <= 1:\n            break\n        elif int(math.log(n, itr)) == 2:\n            maxPowers[itr] = [int(math.log(n, itr))]\n        else:\n            maxPowers[itr] = [int(math.log(n, itr)) - 1, int(math.log(n, itr))]\n    return maxPowers\n\ndef commonDivisors(a, b):\n    if a > b:\n        n = b\n    else:\n        n = a\n    count = 0\n    for d in range(1, n + 1):\n        if a % d == 0 and b % d == 0:\n            count += 1\n    return count\n\ndef makeGrid(n):\n    a = []\n    for i in range(n):\n        a.append([])\n        for j in range(n):\n            if i != j:\n                a[i].append(commonDivisors(i + 1, j + 1))\n            else:\n                a[i].append(0)\n    return a\n\ndef rotate(l, y=1):\n    if len(l) == 0:\n        return l\n    y = -y % len(l)\n    return l[y:] + l[:y]\nfor _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    markings = []\n    inversemarkings = {}\n    for i in range(n):\n        markings.append(-1)\n    data = []\n    for i in range(n):\n        data.append([])\n    for i in range(n):\n        data[i].append(max(arr[i]))\n    process1(n)\n    primeMarkings = []\n    prohibited = {}\n    for i in range(n):\n        if data[i][0] == 1:\n            markings[i] = dicti[0][len(dicti[0]) - 1]\n            inversemarkings[dicti[0][len(dicti[0]) - 1]] = i\n            del dicti[0][len(dicti[0]) - 1]\n        elif data[i][0] == 2:\n            c = arr[i].count(2)\n            if not isProhibited(n, c):\n                if c in dicti.keys():\n                    markings[i] = dicti[c][len(dicti[c]) - 1]\n                    inversemarkings[dicti[c][len(dicti[c]) - 1]] = i\n                    del dicti[c][len(dicti[c]) - 1]\n                    if dicti[c] == []:\n                        del dicti[c]\n            elif c in prohibited.keys():\n                prohibited[c].append(i)\n            else:\n                prohibited[c] = [i]\n    for i in prohibited.keys():\n        for j in prohibited[i]:\n            if isCorrect(n, i, j):\n                markings[j] = dicti[i][len(dicti[i]) - 1]\n                inversemarkings[dicti[i][len(dicti[i]) - 1]] = j\n    k = 0\n    for i in arr:\n        tk = []\n        for key in inversemarkings.keys():\n            if i[inversemarkings[key]] > 1:\n                tk.append(key)\n        data[k].append(tk)\n        k += 1\n    maxPowers = findMaxPowers(n)\n    k = 0\n    for itr in data:\n        if len(itr[1]) == 1:\n            v = itr[0] - 1\n            if isMaxPower(n, itr[1][0], v):\n                markings[k] = itr[1][0] ** maxPowers[itr[1][0]][0]\n                inversemarkings[itr[1][0] ** maxPowers[itr[1][0]][0]] = k\n                del maxPowers[itr[1][0]][0]\n            else:\n                markings[k] = itr[1][0] ** v\n                inversemarkings[itr[1][0] ** v] = k\n        k += 1\n    k = 0\n    for itr in data:\n        if len(itr[1]) >= 2:\n            number = 1\n            for tk in itr[1]:\n                p = 2\n                i = tk\n                if int(math.log(n, tk)) - 1 == 0:\n                    num = tk\n                else:\n                    num = tk ** int(math.log(n, tk))\n                while i <= tk ** int(math.log(n, tk)):\n                    if arr[k][inversemarkings[i]] == p:\n                        number *= tk\n                    else:\n                        break\n                    p += 1\n                    i *= tk\n            markings[k] = number\n            inversemarkings[number] = k\n        k += 1\n    if n == 1:\n        print(1)\n    else:\n        for i in markings:\n            print(i)", "import math\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nprohibitedprimes = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [7], [], [], [], [], [], [10], [], [], [], [12], [], [13], [], [], [], [], [], [], [], [11], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [16], [], [], [], [], [], [18], [], [], [], [], [], [], [], [], [21], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [19], [19], [19], [], [], [20], [20], [20], [20], [], [], [], [], [], [], [22], [22], [], [], [], [23], [23], [], [], [23], [], [], [], [], [], [25], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [30], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [37, 27], [27], [27], [27], [27], [27], [27], [], [], [28], [28], [28], [28], [28], [], [40, 29], [29], [29], [29], [29], [29], [30], [30], [30], [30], [30], [30], [30], [], [], [], [31], [], [], [], [44, 32], [32], [32], [32], [32], [32], [32], [33], [33], [33], [33], [33], [33], [33], [34], [34], [34], [34], [], [], [], [35], [35], [35], [35], [35], [35], [35], [], [36], [36], [], [], [], [], [37], [37], [37], [37], [37], [], [], [38], [38], [38], [38], [38], [38], [], [39], [39], [], [], [], [], [], [40], [40], [40], [40], [40], [40], [40], [41], [41], [], [], [], [], [], [42], [42], [42], [], [], [], [], [43], [43], [43], [43], [43], [], [], [], [], [], [], [], [], [], [45], [45], [45], [45], [], [], [], [46], [], [], [], [], [], [], [47], [], [], [], [], [], [], [48], [48], [48], [48], [], [], [48], [], [], [], [], [], [], [], [50], [50], [], [], [], [], [], [], [], [], [], [], [], [51], [], [], [], [], [], [], [], [53], [53], [53], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [41], [41], [41], [41], [41], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [43], [43], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [45], [45], [45], [45], [45], [45], [45], [45], [45], [45], [45], [], [], [], [], [46], [46], [46], [46], [46], [46], [46], [], [], [], [], [], [47], [47], [47], [47], [47], [47], [48], [48], [48], [48], [48], [48], [48], [48], [48], [48], [48], [], [], [], [], [], [49], [49], [49], [49], [49], [49], [50], [50], [50], [50], [50], [50], [50], [50], [50], [50], [50], [51], [51], [51], [51], [51], [51], [51], [51], [51], [51], [51], [], [], [], [], [], [], [52], [52], [], [], [], [53], [53], [53], [53], [53], [53], [53], [53], [53], [53], [53], [], [54], [54], [54], [54], [54], [54], [54], [54], [54], [54], [], [], [], [], [55], [55], [55], [], [], [], [], [56], [56], [56], [56], [56], [56], [56], [56], [56], [56], [56], [], [], [57], [57], [57], [57], [57], [57], [57], [57], [57], [58], [58], [58], [58], [58], [58], [58], [58], [], [], [], [59], [59], [59], [59], [59], [59], [59], [59], [59], [59], [59], [], [], [], [60], [60], [60], [60], [51], [51], [51], [51], [61, 51], [61, 51], [61, 51], [61, 51], [61, 51], [61], [61], [61], [61], [], [], [62], [62], [62], [62], [62], [62], [62], [62], [62], [62], [62], [], [], [], [63, 53], [53], [53], [53], [53], [53], [], [], [64], [64], [64], [64], [64], [64], [64], [64], [64], [64, 54], [64, 54], [65, 55], [65, 55], [65, 55], [65, 55], [65, 55], [65, 55], [65, 55], [65], [65], [65], [55], [66, 55], [66, 55], [66, 56], [66, 56], [66, 56], [56], [56], [56], [56], [56], [56], [67, 56], [67, 56], [67, 56], [67, 56], [67], [67], [67], [67], [67], [67], [67], [68], [68], [68], [68], [68], [68], [58], [58], [58], [58], [58], [69, 58], [69, 58], [69, 58], [69, 58], [69, 58], [69, 58], [58], [58], [59], [59], [59], [70, 59], [70, 59], [70, 59], [70, 59], [70, 59], [70, 59], [70, 59], [70], [70], [70, 59], [70], [], [71], [60], [60], [60], [60], [60], [60], [60], [60], [60], [72, 60], [72, 61], [72, 61], [72, 61], [72, 61], [72, 61], [72], [], [], [], [], [73], [73], [73, 61], [73, 62], [73, 62], [73, 62], [73, 62], [73, 62], [73, 62], [62], [62], [74, 62], [74, 62], [74, 62], [74, 62], [74, 62], [], [], [], [], [], [], [75], [75], [75], [75, 63], [75, 63], [75, 63], [75, 63], [75, 64], [64], [64], [64], [76], [76], [76], [76], [76], [76, 64], [76, 64], [76, 64], [76, 64], [65], [65], [77, 65], [77, 65], [77, 65], [77, 65], [77, 65], [77, 65], [77, 65], [65], [65], [65], [65], [78], [78], [78], [78], [78], [78], [78], [78], [78], [], [78], [79], [79, 66], [79, 67], [79, 67], [79, 67], [79, 67], [79, 67], [79, 67], [79, 67], [79, 67], [79, 67], [80, 67], [80, 67], [80, 67], [80, 67], [80, 68], [80, 68], [80, 68], [80, 68], [80], [80], [80], [81], [81], [81], [81], [81], [81], [81], [81], [81, 69], [81, 69], [81, 69], [82, 69], [82, 69], [82, 69], [82, 69], [82, 69], [82, 69], [82, 69], [82, 69], [82, 70], [82, 70], [82], [83], [83], [83], [83], [83], [70], [70], [70], [70], [70], [83, 71], [84, 71], [84], [84], [84], [71], [71], [71], [71], [71], [71], [71], [85, 71], [], [], [85], [85], [85], [85], [85], [85, 72], [85, 72], [85, 72], [86, 72], [86, 72], [86, 72], [86, 73], [86], [86], [86], [86], [86, 73], [86, 73], [86, 73], [87, 73], [87, 73], [87, 73], [87, 73], [87, 73], [87], [87], [87], [87], [87, 74], [87, 74], [88, 74], [88, 74], [88, 74], [88, 74], [88, 74], [88, 74], [88, 74], [88], [88], [88], [88], [89], [89], [89], [89], [89], [89], [89], [75], [75], [89], [89, 76], [76], [76], [76], [76], [76], [76], [76], [76], [76], [76], [76]]\nsolutionofprimes = [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {7: [3, 5]}, {}, {}, {}, {}, {}, {10: [3, 5]}, {}, {}, {}, {12: [3, 5]}, {}, {13: [3, 5]}, {}, {}, {}, {}, {}, {}, {}, {11: [5, 7]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {16: [5, 7]}, {}, {}, {}, {}, {}, {18: [5, 7]}, {}, {}, {}, {}, {}, {}, {}, {}, {21: [5, 7]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {19: [7, 13]}, {19: [7, 13]}, {19: [7, 13]}, {}, {}, {20: [7, 13]}, {20: [7, 13]}, {20: [7, 13]}, {20: [7, 13]}, {}, {}, {}, {}, {}, {}, {22: [7, 13]}, {22: [7, 13]}, {}, {}, {}, {23: [7, 13]}, {23: [7, 13]}, {}, {}, {23: [7, 17]}, {}, {}, {}, {}, {}, {25: [7, 13]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {30: [7, 17]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {37: [7, 17], 27: [11, 17]}, {27: [11, 17]}, {27: [11, 17]}, {27: [11, 17]}, {27: [11, 17]}, {27: [11, 17]}, {27: [11, 17]}, {}, {}, {28: [11, 17]}, {28: [11, 17]}, {28: [11, 17]}, {28: [11, 17]}, {28: [11, 17]}, {}, {40: [7, 17], 29: [11, 17]}, {29: [11, 17]}, {29: [11, 17]}, {29: [11, 17]}, {29: [11, 17]}, {29: [11, 19]}, {30: [11, 17]}, {30: [11, 17]}, {30: [11, 17]}, {30: [11, 17]}, {30: [11, 17]}, {30: [11, 17]}, {30: [11, 17]}, {}, {}, {}, {31: [11, 17]}, {}, {}, {}, {44: [7, 17], 32: [11, 17]}, {32: [11, 17]}, {32: [11, 17]}, {32: [11, 17]}, {32: [11, 17]}, {32: [11, 17]}, {32: [11, 17]}, {33: [11, 17]}, {33: [11, 17]}, {33: [11, 17]}, {33: [11, 17]}, {33: [11, 17]}, {33: [11, 17]}, {33: [11, 17]}, {34: [11, 17]}, {34: [11, 17]}, {34: [11, 17]}, {34: [11, 17]}, {}, {}, {}, {35: [11, 17]}, {35: [11, 17]}, {35: [11, 17]}, {35: [11, 17]}, {35: [11, 17]}, {35: [11, 17]}, {35: [11, 17]}, {}, {36: [11, 17]}, {36: [11, 17]}, {}, {}, {}, {}, {37: [11, 17]}, {37: [11, 17]}, {37: [11, 17]}, {37: [11, 17]}, {37: [11, 17]}, {}, {}, {38: [11, 17]}, {38: [11, 17]}, {38: [11, 17]}, {38: [11, 17]}, {38: [11, 17]}, {38: [11, 17]}, {}, {39: [11, 17]}, {39: [11, 17]}, {}, {}, {}, {}, {}, {40: [11, 17]}, {40: [11, 17]}, {40: [11, 17]}, {40: [11, 17]}, {40: [11, 17]}, {40: [11, 17]}, {40: [11, 19]}, {41: [11, 17]}, {41: [11, 17]}, {}, {}, {}, {}, {}, {42: [11, 17]}, {42: [11, 17]}, {42: [11, 17]}, {}, {}, {}, {}, {43: [11, 17]}, {43: [11, 17]}, {43: [11, 17]}, {43: [11, 17]}, {43: [11, 17]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {45: [11, 17]}, {45: [11, 17]}, {45: [11, 17]}, {45: [11, 17]}, {}, {}, {}, {46: [11, 17]}, {}, {}, {}, {}, {}, {}, {47: [11, 17]}, {}, {}, {}, {}, {}, {}, {48: [11, 17]}, {48: [11, 17]}, {48: [11, 17]}, {48: [11, 17]}, {}, {}, {48: [11, 19]}, {}, {}, {}, {}, {}, {}, {}, {50: [11, 17]}, {50: [11, 17]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {51: [11, 19]}, {}, {}, {}, {}, {}, {}, {}, {53: [11, 17]}, {53: [11, 17]}, {53: [11, 17]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {41: [19, 23]}, {41: [19, 23]}, {41: [19, 23]}, {41: [19, 23]}, {41: [19, 23]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {43: [19, 23]}, {43: [19, 23]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {45: [17, 29]}, {45: [17, 29]}, {45: [17, 29]}, {45: [17, 29]}, {45: [17, 29]}, {45: [17, 29]}, {45: [17, 29]}, {45: [17, 29]}, {45: [17, 29]}, {45: [17, 29]}, {45: [17, 29]}, {}, {}, {}, {}, {46: [17, 29]}, {46: [17, 29]}, {46: [17, 29]}, {46: [17, 29]}, {46: [17, 29]}, {46: [17, 29]}, {46: [17, 29]}, {}, {}, {}, {}, {}, {47: [17, 29]}, {47: [17, 29]}, {47: [17, 29]}, {47: [17, 29]}, {47: [17, 29]}, {47: [17, 31]}, {48: [17, 29, 19, 23]}, {48: [17, 29]}, {48: [17, 29]}, {48: [17, 29]}, {48: [17, 29]}, {48: [17, 29]}, {48: [17, 29]}, {48: [17, 29]}, {48: [17, 29]}, {48: [17, 29]}, {48: [17, 29]}, {}, {}, {}, {}, {}, {49: [17, 29]}, {49: [17, 29]}, {49: [17, 29]}, {49: [17, 29]}, {49: [17, 29]}, {49: [17, 29]}, {50: [19, 23]}, {50: [17, 29]}, {50: [17, 29]}, {50: [17, 29]}, {50: [17, 29]}, {50: [17, 29]}, {50: [17, 29]}, {50: [17, 29]}, {50: [17, 29]}, {50: [17, 29]}, {50: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {51: [17, 29]}, {}, {}, {}, {}, {}, {}, {52: [17, 29]}, {52: [17, 29]}, {}, {}, {}, {53: [17, 29]}, {53: [17, 29]}, {53: [17, 29]}, {53: [17, 29]}, {53: [17, 29]}, {53: [17, 29]}, {53: [17, 29]}, {53: [17, 29]}, {53: [17, 29]}, {53: [17, 29]}, {53: [17, 29]}, {}, {54: [17, 29]}, {54: [17, 29]}, {54: [17, 29]}, {54: [17, 29]}, {54: [17, 29]}, {54: [17, 29]}, {54: [17, 29]}, {54: [17, 29]}, {54: [17, 29]}, {54: [17, 29]}, {}, {}, {}, {}, {55: [17, 29]}, {55: [17, 29]}, {55: [17, 29]}, {}, {}, {}, {}, {56: [17, 29]}, {56: [17, 29]}, {56: [17, 29]}, {56: [17, 29]}, {56: [17, 29]}, {56: [17, 29]}, {56: [17, 29]}, {56: [17, 29]}, {56: [17, 29]}, {56: [17, 29]}, {56: [17, 29]}, {}, {}, {57: [17, 29]}, {57: [17, 29]}, {57: [17, 29]}, {57: [17, 29]}, {57: [17, 29]}, {57: [17, 29]}, {57: [17, 29]}, {57: [17, 29]}, {57: [17, 29]}, {58: [17, 29]}, {58: [17, 29]}, {58: [17, 29]}, {58: [17, 29]}, {58: [17, 29]}, {58: [17, 29]}, {58: [17, 29]}, {58: [17, 29]}, {}, {}, {}, {59: [17, 29]}, {59: [17, 29]}, {59: [17, 29]}, {59: [17, 29]}, {59: [17, 29]}, {59: [17, 29]}, {59: [17, 29]}, {59: [17, 29]}, {59: [17, 29]}, {59: [17, 29]}, {59: [17, 29]}, {}, {}, {}, {60: [17, 29]}, {60: [17, 29]}, {60: [17, 29]}, {60: [17, 29]}, {51: [23, 29]}, {51: [23, 29]}, {51: [23, 29]}, {51: [23, 29]}, {61: [17, 29], 51: [23, 29]}, {61: [17, 29], 51: [23, 29]}, {61: [17, 29], 51: [23, 29]}, {61: [17, 29], 51: [23, 29]}, {61: [17, 29], 51: [23, 29]}, {61: [17, 29]}, {61: [17, 29]}, {61: [17, 29]}, {61: [17, 29]}, {}, {}, {62: [17, 29]}, {62: [17, 29]}, {62: [17, 29]}, {62: [17, 29]}, {62: [17, 29]}, {62: [17, 29]}, {62: [17, 29]}, {62: [17, 29]}, {62: [17, 29]}, {62: [17, 29]}, {62: [17, 29]}, {}, {}, {}, {63: [17, 29], 53: [23, 29]}, {53: [23, 29]}, {53: [23, 29]}, {53: [23, 29]}, {53: [23, 29]}, {53: [23, 29]}, {}, {}, {64: [17, 29]}, {64: [17, 29]}, {64: [17, 29]}, {64: [17, 29]}, {64: [17, 29]}, {64: [17, 29]}, {64: [17, 29]}, {64: [17, 29]}, {64: [17, 29]}, {64: [17, 29], 54: [23, 29]}, {64: [17, 31], 54: [23, 29]}, {65: [17, 29], 55: [19, 37]}, {65: [17, 29], 55: [19, 37]}, {65: [17, 29], 55: [19, 37]}, {65: [17, 29], 55: [19, 37]}, {65: [17, 29], 55: [19, 37]}, {65: [17, 29], 55: [19, 37]}, {65: [17, 29], 55: [19, 37]}, {65: [17, 29]}, {65: [17, 29]}, {65: [17, 29]}, {55: [23, 29]}, {66: [17, 29], 55: [23, 29]}, {66: [17, 29], 55: [23, 29]}, {66: [17, 29], 56: [19, 37]}, {66: [17, 29], 56: [19, 37]}, {66: [17, 29], 56: [19, 37]}, {56: [19, 37]}, {56: [19, 37]}, {56: [19, 37]}, {56: [19, 37]}, {56: [19, 37]}, {56: [19, 37, 23, 29]}, {67: [17, 29], 56: [19, 37, 23, 29]}, {67: [17, 29], 56: [19, 37, 23, 29]}, {67: [17, 29], 56: [19, 37, 23, 29]}, {67: [17, 29], 56: [23, 29]}, {67: [17, 29]}, {67: [17, 29]}, {67: [17, 29]}, {67: [17, 29]}, {67: [17, 29]}, {67: [17, 29]}, {67: [17, 29]}, {68: [17, 29]}, {68: [17, 29]}, {68: [17, 29]}, {68: [17, 29]}, {68: [17, 29]}, {68: [17, 29]}, {58: [19, 37]}, {58: [19, 37]}, {58: [19, 37]}, {58: [19, 37]}, {58: [19, 37]}, {69: [17, 29], 58: [19, 37, 23, 29]}, {69: [17, 29], 58: [23, 29]}, {69: [17, 29], 58: [23, 29]}, {69: [17, 29], 58: [23, 29]}, {69: [17, 29], 58: [23, 29]}, {69: [17, 29], 58: [23, 29]}, {58: [23, 29]}, {58: [23, 29]}, {59: [19, 37]}, {59: [19, 37]}, {59: [19, 37]}, {70: [17, 29], 59: [19, 37]}, {70: [17, 29], 59: [19, 37]}, {70: [17, 29], 59: [19, 37]}, {70: [17, 29], 59: [19, 37]}, {70: [17, 29], 59: [19, 37]}, {70: [17, 29], 59: [19, 37]}, {70: [17, 29], 59: [19, 37]}, {70: [17, 29]}, {70: [17, 29]}, {70: [17, 29], 59: [19, 41]}, {70: [17, 29]}, {}, {71: [17, 29]}, {60: [23, 29]}, {60: [23, 29]}, {60: [23, 29]}, {60: [23, 29]}, {60: [23, 29]}, {60: [23, 29]}, {60: [23, 29]}, {60: [23, 29]}, {60: [23, 29]}, {72: [13, 59, 17, 29], 60: [23, 29]}, {72: [17, 29], 61: [19, 37]}, {72: [17, 29], 61: [19, 37]}, {72: [17, 29], 61: [19, 37]}, {72: [17, 29], 61: [19, 37]}, {72: [17, 29], 61: [19, 37]}, {72: [17, 29]}, {}, {}, {}, {}, {73: [13, 59, 61, 17, 29]}, {73: [13, 59, 61, 17, 29]}, {73: [13, 59, 61, 17, 29], 61: [23, 29]}, {73: [17, 29], 62: [19, 37]}, {73: [17, 29], 62: [19, 37]}, {73: [17, 29], 62: [19, 37]}, {73: [17, 29], 62: [19, 37]}, {73: [17, 29], 62: [19, 37]}, {73: [17, 29], 62: [19, 37]}, {62: [19, 37, 23, 29]}, {62: [19, 37, 23, 29]}, {74: [13, 59, 61, 17, 29], 62: [23, 29]}, {74: [13, 59, 61, 17, 29], 62: [23, 29]}, {74: [13, 59, 61], 62: [23, 29]}, {74: [13, 59, 61], 62: [23, 29]}, {74: [13, 59, 61], 62: [23, 29]}, {}, {}, {}, {}, {}, {}, {75: [13, 59, 61, 17, 29]}, {75: [13, 61, 17, 29]}, {75: [13, 61, 17, 29]}, {75: [13, 61, 17, 29], 63: [23, 29]}, {75: [13, 61, 17, 29], 63: [23, 29]}, {75: [13, 61, 17, 29], 63: [23, 29]}, {75: [13, 61, 17, 29], 63: [23, 29]}, {75: [17, 29], 64: [17, 47, 19, 37]}, {64: [19, 37]}, {64: [19, 37]}, {64: [19, 37]}, {76: [13, 61, 17, 29]}, {76: [13, 61, 17, 29]}, {76: [13, 61, 17, 29]}, {76: [13, 61, 17, 29]}, {76: [13, 61, 17, 29]}, {76: [13, 61], 64: [23, 29]}, {76: [13, 61], 64: [23, 29]}, {76: [13, 61], 64: [23, 29]}, {76: [13, 61], 64: [23, 29]}, {65: [17, 47, 19, 37]}, {65: [19, 37]}, {77: [13, 61, 17, 29], 65: [19, 37]}, {77: [13, 61, 17, 29], 65: [19, 37]}, {77: [13, 61, 17, 29], 65: [19, 37]}, {77: [13, 61], 65: [19, 37]}, {77: [13, 61], 65: [23, 29]}, {77: [13, 61], 65: [23, 29]}, {77: [13, 61], 65: [23, 29]}, {65: [23, 29]}, {65: [23, 29]}, {65: [23, 29]}, {65: [23, 29]}, {78: [17, 29]}, {78: [17, 29]}, {78: [17, 29]}, {78: [17, 29]}, {78: [17, 29]}, {78: [17, 29]}, {78: [17, 29]}, {78: [17, 29]}, {78: [17, 29]}, {}, {78: [17, 31]}, {79: [13, 59, 61, 17, 29]}, {79: [13, 59, 61], 66: [23, 29]}, {79: [13, 67], 67: [19, 37]}, {79: [13, 67], 67: [19, 37]}, {79: [13, 67], 67: [19, 37]}, {79: [13, 67], 67: [23, 29]}, {79: [13, 67], 67: [23, 29]}, {79: [13, 67], 67: [23, 29]}, {79: [13, 67], 67: [23, 29]}, {79: [13, 67], 67: [23, 29]}, {79: [13, 67], 67: [23, 29]}, {80: [13, 59, 61, 17, 29], 67: [23, 29]}, {80: [13, 59, 61, 17, 29], 67: [23, 29]}, {80: [13, 59, 61, 17, 29], 67: [23, 29]}, {80: [13, 59, 61, 17, 29], 67: [23, 29]}, {80: [13, 67], 68: [19, 37]}, {80: [13, 67], 68: [19, 37]}, {80: [13, 67], 68: [19, 37]}, {80: [13, 67], 68: [19, 37]}, {80: [13, 67]}, {80: [13, 67]}, {80: [13, 67]}, {81: [13, 61, 17, 29]}, {81: [13, 61, 17, 29]}, {81: [13, 61, 17, 29]}, {81: [13, 61, 17, 29]}, {81: [13, 61, 17, 29]}, {81: [13, 61, 17, 29]}, {81: [13, 67, 17, 29]}, {81: [13, 67, 17, 29]}, {81: [13, 67], 69: [23, 29]}, {81: [13, 67], 69: [23, 29]}, {81: [13, 67, 17, 31], 69: [17, 53, 23, 29]}, {82: [13, 61], 69: [17, 53, 23, 29]}, {82: [13, 61], 69: [17, 53, 23, 29]}, {82: [13, 61], 69: [17, 53, 23, 29]}, {82: [13, 61], 69: [17, 53, 23, 29]}, {82: [13, 61], 69: [17, 53, 23, 29]}, {82: [13, 61], 69: [17, 53, 23, 29]}, {82: [13, 61], 69: [17, 53, 23, 29]}, {82: [13, 61], 69: [17, 53, 23, 29]}, {82: [13, 67], 70: [19, 37]}, {82: [13, 67], 70: [19, 37]}, {82: [13, 67]}, {83: [13, 61, 17, 29]}, {83: [13, 61, 17, 29]}, {83: [17, 29]}, {83: [17, 29]}, {83: [17, 29]}, {70: [17, 53]}, {70: [17, 53]}, {70: [17, 53, 23, 29]}, {70: [17, 53, 23, 29]}, {70: [17, 53, 23, 29]}, {83: [13, 67, 71], 71: [19, 37]}, {84: [17, 29], 71: [19, 37]}, {84: [17, 29]}, {84: [17, 29]}, {84: [17, 29]}, {71: [23, 29]}, {71: [23, 29]}, {71: [23, 29]}, {71: [23, 29]}, {71: [23, 29]}, {71: [23, 29]}, {71: [23, 29]}, {85: [13, 59, 61], 71: [17, 53, 23, 29]}, {}, {}, {85: [13, 67]}, {85: [13, 67]}, {85: [13, 67]}, {85: [13, 67]}, {85: [13, 67]}, {85: [13, 67], 72: [23, 29]}, {85: [13, 67], 72: [23, 29]}, {85: [13, 67], 72: [23, 29]}, {86: [13, 61, 17, 29], 72: [23, 29]}, {86: [13, 61, 17, 29], 72: [23, 29]}, {86: [13, 61, 17, 29], 72: [23, 29]}, {86: [13, 67, 17, 29], 73: [19, 37]}, {86: [13, 67, 17, 29]}, {86: [13, 67, 17, 29]}, {86: [13, 67]}, {86: [13, 67]}, {86: [13, 67], 73: [17, 53]}, {86: [13, 67], 73: [17, 53]}, {86: [13, 67], 73: [17, 53]}, {87: [13, 61], 73: [17, 53, 23, 29]}, {87: [13, 61], 73: [17, 53, 23, 29]}, {87: [13, 61], 73: [17, 53, 23, 29]}, {87: [13, 61], 73: [17, 53, 23, 29]}, {87: [13, 61], 73: [17, 53, 23, 29]}, {87: [13, 67]}, {87: [13, 67]}, {87: [13, 67]}, {87: [13, 67]}, {87: [13, 67], 74: [23, 29]}, {87: [13, 67], 74: [23, 29]}, {88: [13, 61, 17, 29], 74: [23, 29]}, {88: [13, 61], 74: [17, 53, 23, 29]}, {88: [13, 61], 74: [17, 53, 23, 29]}, {88: [13, 61], 74: [17, 53, 23, 29]}, {88: [13, 61], 74: [17, 53, 23, 29]}, {88: [13, 61], 74: [17, 53, 23, 29]}, {88: [13, 61], 74: [17, 53, 23, 29]}, {88: [13, 67]}, {88: [13, 67]}, {88: [13, 67]}, {88: [13, 67]}, {89: [17, 29]}, {89: [17, 29]}, {89: [17, 29]}, {89: [17, 29]}, {89: [17, 29]}, {89: [17, 29]}, {89: [17, 29]}, {75: [17, 53, 23, 29]}, {75: [17, 53, 23, 29]}, {89: [13, 67]}, {89: [13, 67], 76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}, {76: [23, 29]}]\ndicti = {}\n\ndef process1(n):\n    dicti[0] = [1]\n    for i in primes:\n        if i > n:\n            break\n        else:\n            key = int(n / i) - 1\n            if key in dicti.keys():\n                dicti[key].append(i)\n            else:\n                dicti[key] = [i]\n\ndef isProhibited(n, c):\n    if c + 1 in prohibitedprimes[n - 1]:\n        return True\n    return False\n\ndef isCorrect(n, i, j):\n    for itr in solutionofprimes[n - 1][i + 1]:\n        if arr[j][inversemarkings[itr]] != 1:\n            return False\n    return True\n\ndef isMaxPower(n, b, v):\n    if int(math.log(n, b)) == 1:\n        return False\n    elif v == int(math.log(n, b)) or v == int(math.log(n, b)) - 1:\n        return True\n    else:\n        return False\n\ndef findMaxPowers(n):\n    maxPowers = {}\n    for itr in primes:\n        if int(math.log(n, itr)) <= 1:\n            break\n        elif int(math.log(n, itr)) == 2:\n            maxPowers[itr] = [int(math.log(n, itr))]\n        else:\n            maxPowers[itr] = [int(math.log(n, itr)) - 1, int(math.log(n, itr))]\n    return maxPowers\n\ndef commonDivisors(a, b):\n    if a > b:\n        n = b\n    else:\n        n = a\n    count = 0\n    for d in range(1, n + 1):\n        if a % d == 0 and b % d == 0:\n            count += 1\n    return count\n\ndef makeGrid(n):\n    a = []\n    for i in range(n):\n        a.append([])\n        for j in range(n):\n            if i != j:\n                a[i].append(commonDivisors(i + 1, j + 1))\n            else:\n                a[i].append(0)\n    return a\n\ndef rotate(l, y=1):\n    if len(l) == 0:\n        return l\n    y = -y % len(l)\n    return l[y:] + l[:y]\nfor _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    markings = []\n    inversemarkings = {}\n    for i in range(n):\n        markings.append(-1)\n    data = []\n    for i in range(n):\n        data.append([])\n    for i in range(n):\n        data[i].append(max(arr[i]))\n    process1(n)\n    primeMarkings = []\n    prohibited = {}\n    for i in range(n):\n        if data[i][0] == 1:\n            markings[i] = dicti[0][len(dicti[0]) - 1]\n            inversemarkings[dicti[0][len(dicti[0]) - 1]] = i\n            del dicti[0][len(dicti[0]) - 1]\n        elif data[i][0] == 2:\n            c = arr[i].count(2)\n            if not isProhibited(n, c):\n                if c in dicti.keys():\n                    markings[i] = dicti[c][len(dicti[c]) - 1]\n                    inversemarkings[dicti[c][len(dicti[c]) - 1]] = i\n                    del dicti[c][len(dicti[c]) - 1]\n                    if dicti[c] == []:\n                        del dicti[c]\n            elif c in prohibited.keys():\n                prohibited[c].append(i)\n            else:\n                prohibited[c] = [i]\n    for i in prohibited.keys():\n        for j in prohibited[i]:\n            if isCorrect(n, i, j):\n                markings[j] = dicti[i][len(dicti[i]) - 1]\n                inversemarkings[dicti[i][len(dicti[i]) - 1]] = j\n    k = 0\n    for i in arr:\n        tk = []\n        for key in inversemarkings.keys():\n            if i[inversemarkings[key]] > 1:\n                tk.append(key)\n        data[k].append(tk)\n        k += 1\n    maxPowers = findMaxPowers(n)\n    k = 0\n    for itr in data:\n        if len(itr[1]) == 1:\n            v = itr[0] - 1\n            if isMaxPower(n, itr[1][0], v):\n                markings[k] = itr[1][0] ** maxPowers[itr[1][0]][0]\n                inversemarkings[itr[1][0] ** maxPowers[itr[1][0]][0]] = k\n                del maxPowers[itr[1][0]][0]\n            else:\n                markings[k] = itr[1][0] ** v\n                inversemarkings[itr[1][0] ** v] = k\n        k += 1\n    k = 0\n    for itr in data:\n        if len(itr[1]) >= 2:\n            number = 1\n            for tk in itr[1]:\n                p = 2\n                i = tk\n                if int(math.log(n, tk)) - 1 == 0:\n                    num = tk\n                else:\n                    num = tk ** int(math.log(n, tk))\n                while i <= tk ** int(math.log(n, tk)):\n                    if arr[k][inversemarkings[i]] == p:\n                        number *= tk\n                    else:\n                        break\n                    p += 1\n                    i *= tk\n            markings[k] = number\n            inversemarkings[number] = k\n        k += 1\n    if n == 1:\n        print(1)\n    else:\n        for i in markings:\n            print(i)", "from math import sqrt\nfrom collections import defaultdict\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\n\ndef countDivisors(a, b):\n    G = gcd(a, b)\n    SQ = int(sqrt(G))\n    C = 0\n    for i in range(1, SQ + 1):\n        if G % i == 0:\n            if i * i == G:\n                C += 1\n            else:\n                C += 2\n    return C\nBigList = defaultdict(int)\nARR1 = [[0 for j in range(1001)] for i in range(1001)]\nctr = 0\nfor i in range(1, 1001):\n    for j in range(1, 1001):\n        if j == i:\n            ARR1[i][j] = 0\n        else:\n            ARR1[i][j] = countDivisors(i, j)\nfor _ in range(int(input())):\n    N = int(input())\n    L = [[] for x in range(N)]\n    for i in range(N):\n        L[i].extend(list(map(int, input().split())))\n    RefList = [[] for x in range(1000)]\n    countDivisors = [0 for x in range(50)]\n    for i in range(N):\n        for j in range(50):\n            countDivisors[j] = 0\n        for j in range(N):\n            countDivisors[ARR1[i + 1][j + 1]] += 1\n        S = ''\n        for j in range(1, 50):\n            if countDivisors[j] > 0:\n                S += str(j) + '=' + str(countDivisors[j]) + ' '\n        C = BigList[S]\n        if C == 0:\n            ctr += 1\n            BigList[S] = ctr\n            C = ctr\n        RefList[C].append(i + 1)\n    Found = []\n    for i in range(N):\n        for j in range(50):\n            countDivisors[j] = 0\n        for j in range(N):\n            countDivisors[L[i][j]] += 1\n        S = ''\n        for j in range(1, 50):\n            if countDivisors[j] > 0:\n                S += str(j) + '=' + str(countDivisors[j]) + ' '\n        C = BigList[S]\n        Flag = 1\n        for x in range(len(RefList[C])):\n            ele = RefList[C][x]\n            if ele == -1:\n                continue\n            for (pos, num) in Found:\n                if L[i][pos] != ARR1[num][ele]:\n                    Flag = 0\n                    break\n            if Flag == 1:\n                Found.append((i, ele))\n                RefList[C][x] = -1\n            else:\n                Flag = 1\n    Found.sort()\n    for (pos, num) in Found:\n        print(num)", "pmax = 1100\n\ndef factorization(n, ans):\n    if n == 1:\n        return ans\n    for p in primes:\n        if p > n:\n            break\n        if n % p == 0:\n            ans.append(p)\n            return factorization(n // p, ans)\n\ndef gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef n_div(n):\n    ans = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            ans += 1\n    return ans\nis_prime = [True] * pmax\nfor i in range(2, pmax):\n    if is_prime[i]:\n        for j in range(2, pmax // i + 1):\n            if i * j < pmax:\n                is_prime[i * j] = False\nprimes = []\nfor i in range(2, pmax):\n    if is_prime[i]:\n        primes.append(i)\nq = int(input())\nfor qq in range(q):\n    n = int(input())\n    dmax = 80\n    counts_old = []\n    a = [[0] * dmax]\n    for i in range(n):\n        tmp = [0] * dmax\n        a_tmp = [0]\n        a_tmp.extend([int(k) for k in input().split()])\n        for j in range(1, n + 1):\n            if a_tmp[j] != 0:\n                tmp[dmax - 1 - a_tmp[j]] += 1\n        counts_old.append((tmp, i + 1))\n        a.append(a_tmp)\n    if n == 1:\n        print(1)\n        continue\n    counts_old.sort()\n    counts_old.append(([0] * dmax, 0))\n    ndiv = [0]\n    for i in range(1, n + 1):\n        ndiv.append(n_div(i))\n    counts = []\n    for i in range(1, n + 1):\n        tmp = [0] * dmax\n        for j in range(1, n + 1):\n            if j != i:\n                tmp[dmax - ndiv[gcd(i, j)] - 1] += 1\n        counts.append((tmp, i))\n    counts.sort()\n    counts.append(([0] * dmax, 0))\n    assign = [-1] * (n + 1)\n    nodes = [-1] * (n + 1)\n    prime_labels = set()\n    batch_labels = {counts[0][1]}\n    batch = {counts_old[0][1]}\n    for i in range(n):\n        batch_labels.add(counts[i][1])\n        batch.add(counts_old[i][1])\n        if counts[i][0] != counts[i + 1][0]:\n            for label in batch_labels:\n                for row in batch:\n                    flag = True\n                    for p in factorization(label, []):\n                        if nodes[p] != -1 and a[row][nodes[p]] == 1:\n                            flag = False\n                            break\n                    for p in prime_labels.difference(factorization(label, [])):\n                        if a[row][nodes[p]] != 1:\n                            flag = False\n                            break\n                    if flag:\n                        assign[row] = label\n                        nodes[label] = row\n                        batch.remove(row)\n                        if is_prime[label]:\n                            prime_labels.add(label)\n                        break\n            batch_labels = {counts[i + 1][1]}\n            batch = {counts_old[i + 1][1]}\n    for i in range(1, n + 1):\n        print(assign[i])", "from math import floor\nfrom itertools import *\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef common(a, b):\n    n = gcd(a, b)\n    result = 0\n    if a == b:\n        return result\n    for i in range(1, floor(n ** 0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                result += 1\n            else:\n                result += 2\n    return result\narr = []\nval = 1000\nfor a in range(1, val + 1):\n    arr1 = []\n    for b in range(1, val + 1):\n        arr1.append(common(a, b))\n    arr.append(arr1)\nfor t in range(int(input())):\n    n = int(input())\n    matrix = []\n    (dic, arr1) = ([], [])\n    for i in range(n):\n        array = list(map(int, input().split()))\n        matrix.append(array)\n    for i in range(n):\n        arr2 = [0] * 25\n        for j in range(n):\n            arr2[arr[i][j]] += 1\n        arr3 = {}\n        for j in range(25):\n            if arr2[j]:\n                arr3.update({j: arr2[j]})\n        arr1.append(arr3)\n    label1 = [0] * n\n    for i in range(n):\n        if label1[i]:\n            continue\n        for j in range(i + 1, n):\n            flag = 1\n            if len(arr1[i]) != len(arr1[j]):\n                flag = 0\n                continue\n            for (x_values, y_values) in zip(arr1[i].items(), arr1[j].items()):\n                if x_values != y_values:\n                    flag = 0\n                    break\n            if flag:\n                label1[j] = 1\n                label1[i] = 1\n    for i in range(n):\n        arr2 = [0] * 25\n        for j in matrix[i]:\n            arr2[j] += 1\n        arr3 = {}\n        for j in range(25):\n            if arr2[j]:\n                arr3.update({j: arr2[j]})\n        dic.append(arr3)\n    label2 = [-1] * n\n    for i in range(n):\n        if label1[i] == 0 or len(arr1[i]) == 2:\n            for j in range(n):\n                flag = 1\n                if len(dic[j]) != len(arr1[i]) or label2[j] != -1:\n                    flag = 0\n                    continue\n                for (x_values, y_values) in zip(arr1[i].items(), dic[j].items()):\n                    if x_values != y_values:\n                        flag = 0\n                        break\n                if flag:\n                    label2[j] = i\n                    break\n    for i in range(n):\n        if label1[i] == 0 or len(arr1[i]) == 2:\n            continue\n        for j in range(n):\n            flag = 1\n            if len(dic[j]) != len(arr1[i]) or label2[j] != -1:\n                flag = 0\n                continue\n            for (x_values, y_values) in zip(arr1[i].items(), dic[j].items()):\n                if x_values != y_values:\n                    flag = 0\n                    break\n            if flag:\n                flag1 = 0\n                for k in range(n):\n                    if label2[k] != -1 and matrix[j][k] != arr[i][label2[k]]:\n                        flag1 = 1\n                if not flag1:\n                    label2[j] = i\n                    break\n    for i in range(n):\n        print(label2[i] + 1)", "import hashlib as hlib\nfrom random import shuffle\nfrom itertools import product\n\ndef gen_primes():\n    primes = []\n    num___is_prime = [True for i in range(1001)]\n    num___is_prime[0] = False\n    num___is_prime[1] = False\n    for num in range(1001):\n        if not num___is_prime[num]:\n            continue\n        primes.append(num)\n        for mult in range(num * 2, 1001, num):\n            num___is_prime[mult] = False\n    return primes\n\ndef gen_test_n(num1_num2__cd_nr, n):\n    r_sh = list(range(1, n + 1))\n    shuffle(r_sh)\n    ans = [['?' for j in range(n)] for i in range(n)]\n    for (i, j) in product(range(n), repeat=2):\n        ans[i][j] = num1_num2__cd_nr[r_sh[i]][r_sh[j]]\n    return ans\n\ndef iteration(num1_num2__cd_nr, node_idx___curr_idea, node_idx___neigh_cd_nrs):\n    nodes_nr = len(node_idx___curr_idea)\n    node_idx___id = [None for x in range(nodes_nr)]\n    num___id = [None for x in range(nodes_nr + 1)]\n    num___is_known = [False for i in range(nodes_nr + 1)]\n    for num in node_idx___curr_idea:\n        if num != '?':\n            num___is_known[num] = True\n    for num in range(1, nodes_nr + 1):\n        known_cds = []\n        unknown_cds = []\n        for (num2, cd_nr) in enumerate(num1_num2__cd_nr[num]):\n            if num2 > nodes_nr:\n                break\n            if num___is_known[num2]:\n                known_cds.append(cd_nr)\n            else:\n                unknown_cds.append(cd_nr)\n        hash1 = hash(tuple(known_cds))\n        hash2 = hash(tuple(sorted(unknown_cds[1:])))\n        num___id[num] = (hash1, hash2)\n    for node_idx in range(nodes_nr):\n        known_cds = []\n        unknown_cds = []\n        for (idx, cd_nr) in enumerate(node_idx___neigh_cd_nrs[node_idx]):\n            if node_idx___curr_idea[idx] == '?':\n                unknown_cds.append(cd_nr)\n            else:\n                known_cds.append((node_idx___curr_idea[idx], cd_nr))\n        known_cds = [x[1] for x in sorted(known_cds)]\n        hash1 = hash(tuple(known_cds))\n        hash2 = hash(tuple(sorted(unknown_cds)))\n        node_idx___id[node_idx] = (hash1, hash2)\n    id___primes = {}\n    for prime in gen_primes():\n        if prime * prime <= nodes_nr or 2 * prime > nodes_nr:\n            continue\n        if prime in node_idx___curr_idea:\n            continue\n        curr_id = num___id[prime]\n        if curr_id not in id___primes:\n            id___primes[curr_id] = []\n        id___primes[curr_id].append(prime)\n    for id1 in id___primes:\n        curr_left = len(id___primes[id1])\n        for node_idx in range(nodes_nr):\n            if node_idx___id[node_idx] == id1:\n                curr_left -= 1\n                node_idx___curr_idea[node_idx] = id___primes[id1][curr_left]\n            if curr_left == 0:\n                break\n    curr_id___num = {}\n    for (num, id1) in enumerate(num___id):\n        if id1 not in curr_id___num:\n            curr_id___num[id1] = num\n        else:\n            curr_id___num[id1] = '?'\n    for (idx, id1) in enumerate(node_idx___id):\n        if node_idx___curr_idea[idx] != '?':\n            continue\n        node_idx___curr_idea[idx] = curr_id___num[id1]\n    return node_idx___curr_idea\n\ndef first_iteration(num1_num2__cd_nr, node_idx___curr_idea, node_idx___neigh_cd_nrs):\n    nodes_nr = len(node_idx___curr_idea)\n    node_idx___id = [None for x in range(nodes_nr)]\n    num___id = [None for x in range(nodes_nr + 1)]\n    num___is_known = [False for i in range(nodes_nr + 1)]\n    for num in node_idx___curr_idea:\n        if num != '?':\n            num___is_known[num] = True\n    for num in range(1, nodes_nr + 1):\n        known_cds = []\n        unknown_cds = []\n        for (num2, cd_nr) in enumerate(num1_num2__cd_nr[num]):\n            if num2 > nodes_nr:\n                break\n            if num___is_known[num2]:\n                known_cds.append(cd_nr)\n            else:\n                unknown_cds.append(cd_nr)\n        hash1 = hash(tuple(known_cds))\n        hash2 = hash(tuple(sorted(unknown_cds[1:])))\n        num___id[num] = (hash1, hash2)\n    for node_idx in range(nodes_nr):\n        known_cds = []\n        unknown_cds = []\n        for (idx, cd_nr) in enumerate(node_idx___neigh_cd_nrs[node_idx]):\n            if node_idx___curr_idea[idx] == '?':\n                unknown_cds.append(cd_nr)\n            else:\n                known_cds.append((node_idx___curr_idea[idx], cd_nr))\n        known_cds = [x[1] for x in sorted(known_cds)]\n        hash1 = hash(tuple(known_cds))\n        hash2 = hash(tuple(sorted(unknown_cds)))\n        node_idx___id[node_idx] = (hash1, hash2)\n    primes = gen_primes()\n    for prime in primes:\n        if prime * prime > nodes_nr:\n            break\n        x = prime\n        k = 1\n        while True:\n            if x * prime > nodes_nr:\n                break\n            x *= prime\n            k += 1\n        id1 = num___id[x]\n        id2 = num___id[x // prime]\n        if 2 * x <= nodes_nr:\n            continue\n        x //= prime\n        if id1 != id2:\n            raise Exception('Unbelivable! id1 != id2')\n            return\n        replaces_count = 0\n        for node_idx in range(nodes_nr):\n            if node_idx___id[node_idx] == id1:\n                node_idx___curr_idea[node_idx] = x\n                replaces_count += 1\n                x *= prime\n            if replaces_count > 1:\n                break\n    curr_id___num = {}\n    for (num, id1) in enumerate(num___id):\n        if id1 not in curr_id___num:\n            curr_id___num[id1] = num\n        else:\n            curr_id___num[id1] = '?'\n    for (idx, id1) in enumerate(node_idx___id):\n        if node_idx___curr_idea[idx] != '?':\n            continue\n        node_idx___curr_idea[idx] = curr_id___num[id1]\n    return node_idx___curr_idea\n\ndef fill_primes(node_idx___curr_idea, node_idx___neigh_cd_nrs):\n    n = len(node_idx___curr_idea)\n    primes = gen_primes()\n    curr_prime_idx = -1\n    for (idx, prime) in enumerate(primes):\n        if prime > n // 2:\n            curr_prime_idx = idx\n            break\n    one_flag = True\n    for node_idx in range(n):\n        cd_nrs = set(node_idx___neigh_cd_nrs[node_idx])\n        if len(cd_nrs) == 2:\n            if one_flag:\n                node_idx___curr_idea[node_idx] = 1\n                one_flag = False\n            else:\n                node_idx___curr_idea[node_idx] = primes[curr_prime_idx]\n                curr_prime_idx += 1\n\ndef solve(num1_num2__cd_nr):\n    nodes_nr = int(input())\n    node_idx___neigh_cd_nrs = [[] for x in range(nodes_nr)]\n    for node_idx in range(nodes_nr):\n        node_idx___neigh_cd_nrs[node_idx] = [int(x) for x in input().split()]\n    node_idx___curr_idea = ['?' for x in range(nodes_nr)]\n    fill_primes(node_idx___curr_idea, node_idx___neigh_cd_nrs)\n    first_iteration(num1_num2__cd_nr, node_idx___curr_idea, node_idx___neigh_cd_nrs)\n    for i in range(2):\n        iteration(num1_num2__cd_nr, node_idx___curr_idea, node_idx___neigh_cd_nrs)\n    print(*node_idx___curr_idea, sep='\\n')\nreqs_nr = 1\ncurr_size = 1001\nnum1_num2__cd_nr = [[0 for x in range(curr_size)] for x in range(curr_size)]\nfor cd in range(1, curr_size):\n    for num1 in range(cd, curr_size, cd):\n        for num2 in range(num1 + cd, curr_size, cd):\n            num1_num2__cd_nr[num1][num2] += 1\n            num1_num2__cd_nr[num2][num1] += 1\nreqs_nr = int(input())\nfor req in range(reqs_nr):\n    solve(num1_num2__cd_nr)"]