["from heapq import heappush, heappop\nadd = []\na = []\nb = []\nc = []\nd = []\ndela = {}\ndelb = {}\ndelc = {}\ndeld = {}\nanswer = 0\nfor q in range(int(input())):\n    inp = list(input().split())\n    if inp[0] == '+':\n        x = int(inp[1]) ^ answer\n        y = int(inp[2]) ^ answer\n        adda = -x - y\n        addb = x - y\n        addc = -x + y\n        addd = x + y\n        add.append([adda, addb, addc, addd])\n        heappush(a, -adda)\n        heappush(b, -addb)\n        heappush(c, -addc)\n        heappush(d, -addd)\n    elif inp[0] == '-':\n        n = int(inp[1]) ^ answer\n        deladd = add[n - 1]\n        dela[deladd[0]] = dela.get(deladd[0], 0) + 1\n        delb[deladd[1]] = delb.get(deladd[1], 0) + 1\n        delc[deladd[2]] = delc.get(deladd[2], 0) + 1\n        deld[deladd[3]] = deld.get(deladd[3], 0) + 1\n    else:\n        x = int(inp[1]) ^ answer\n        y = int(inp[2]) ^ answer\n        while dela.get(-a[0], 0):\n            dela[-a[0]] -= 1\n            heappop(a)\n        maxa = -a[0]\n        while delb.get(-b[0], 0):\n            delb[-b[0]] -= 1\n            heappop(b)\n        maxb = -b[0]\n        while delc.get(-c[0], 0):\n            delc[-c[0]] -= 1\n            heappop(c)\n        maxc = -c[0]\n        while deld.get(-d[0], 0):\n            deld[-d[0]] -= 1\n            heappop(d)\n        maxd = -d[0]\n        maxman = max(maxa + x + y, maxb + -x + y, maxc + x - y, maxd + -x - y)\n        answer = maxman\n        print(maxman)", "from heapq import heappush, heappop\nadd = []\na = []\nb = []\nc = []\nd = []\ndela = {}\ndelb = {}\ndelc = {}\ndeld = {}\nanswer = 0\nfor q in range(int(input())):\n    inp = list(input().split())\n    if inp[0] == '+':\n        x = int(inp[1]) ^ answer\n        y = int(inp[2]) ^ answer\n        adda = -x - y\n        addb = x - y\n        addc = -x + y\n        addd = x + y\n        add.append([adda, addb, addc, addd])\n        heappush(a, -adda)\n        heappush(b, -addb)\n        heappush(c, -addc)\n        heappush(d, -addd)\n    elif inp[0] == '-':\n        n = int(inp[1]) ^ answer\n        deladd = add[n - 1]\n        dela[deladd[0]] = dela.get(deladd[0], 0) + 1\n        delb[deladd[1]] = delb.get(deladd[1], 0) + 1\n        delc[deladd[2]] = delc.get(deladd[2], 0) + 1\n        deld[deladd[3]] = deld.get(deladd[3], 0) + 1\n    else:\n        x = int(inp[1]) ^ answer\n        y = int(inp[2]) ^ answer\n        while dela.get(-a[0], 0):\n            dela[-a[0]] -= 1\n            heappop(a)\n        maxa = -a[0]\n        while delb.get(-b[0], 0):\n            delb[-b[0]] -= 1\n            heappop(b)\n        maxb = -b[0]\n        while delc.get(-c[0], 0):\n            delc[-c[0]] -= 1\n            heappop(c)\n        maxc = -c[0]\n        while deld.get(-d[0], 0):\n            deld[-d[0]] -= 1\n            heappop(d)\n        maxd = -d[0]\n        maxman = max(maxa + x + y, maxb + -x + y, maxc + x - y, maxd + -x - y)\n        answer = maxman\n        print(maxman)", "from heapq import *\nanswer = 0\nbool_dict_present = dict()\nele_number = 1\n(h_1, h_2, h_3, h_4) = (list(), list(), list(), list())\nfor i in range(int(input().strip())):\n    inp = list(input().strip().split())\n    if inp[0] == '+':\n        (x, y) = map(int, inp[1:])\n        (x, y) = (x ^ answer, y ^ answer)\n        heappush(h_1, (x + y, ele_number))\n        heappush(h_2, (x - y, ele_number))\n        heappush(h_3, (-x + y, ele_number))\n        heappush(h_4, (-x - y, ele_number))\n        bool_dict_present[ele_number] = True\n        ele_number += 1\n    elif inp[0] == '?':\n        (x, y) = map(int, inp[1:])\n        (x, y) = (x ^ answer, y ^ answer)\n        while h_1 and (not bool_dict_present[h_1[0][1]]):\n            heappop(h_1)\n        while h_2 and (not bool_dict_present[h_2[0][1]]):\n            heappop(h_2)\n        while h_3 and (not bool_dict_present[h_3[0][1]]):\n            heappop(h_3)\n        while h_4 and (not bool_dict_present[h_4[0][1]]):\n            heappop(h_4)\n        answer = max(x + y - h_1[0][0], x - y - h_2[0][0], -x + y - h_3[0][0], -x - y - h_4[0][0])\n        print(answer)\n    else:\n        n = int(inp[1])\n        n = n ^ answer\n        bool_dict_present[n] = False", "import heapq\nfrom sys import stdin\npoints = {}\ncount = 1\nanswer = 0\n(h1, h2, h3, h4) = ([], [], [], [])\nfor _ in range(int(stdin.readline())):\n    query = [i for i in stdin.readline().split()]\n    if query[0] == '+':\n        (x, y) = (int(query[1]) ^ answer, int(query[2]) ^ answer)\n        heapq.heappush(h1, (x + y, count))\n        heapq.heappush(h2, (x - y, count))\n        heapq.heappush(h3, (y - x, count))\n        heapq.heappush(h4, (-x - y, count))\n        points[count] = True\n        count += 1\n    elif query[0] == '-':\n        n = int(query[1]) ^ answer\n        points[n] = False\n    else:\n        (x, y) = (int(query[1]) ^ answer, int(query[2]) ^ answer)\n        while h1 and (not points[h1[0][1]]):\n            heapq.heappop(h1)\n        while h2 and (not points[h2[0][1]]):\n            heapq.heappop(h2)\n        while h3 and (not points[h3[0][1]]):\n            heapq.heappop(h3)\n        while h4 and (not points[h4[0][1]]):\n            heapq.heappop(h4)\n        result = max(x + y - h1[0][0], x - y - h2[0][0], y - x - h3[0][0], -x - y - h4[0][0])\n        print(result)\n        answer = result", "import heapq as hq\nans = 0\ni = 1\nh1 = []\nh2 = []\nh3 = []\nh4 = []\nvalid = {}\nfor _ in range(int(input())):\n    ip = list(input().split())\n    if ip[0] == '+':\n        x = ans ^ int(ip[1])\n        y = ans ^ int(ip[2])\n        hq.heappush(h1, (x + y, i))\n        hq.heappush(h2, (x - y, i))\n        hq.heappush(h3, (-x + y, i))\n        hq.heappush(h4, (-x - y, i))\n        valid[i] = True\n        i += 1\n    elif ip[0] == '-':\n        n = ans ^ int(ip[1])\n        valid[n] = False\n    else:\n        x = ans ^ int(ip[1])\n        y = ans ^ int(ip[2])\n        while len(h1) > 0 and (not valid[h1[0][1]]):\n            hq.heappop(h1)\n        while len(h2) > 0 and (not valid[h2[0][1]]):\n            hq.heappop(h2)\n        while len(h3) > 0 and (not valid[h3[0][1]]):\n            hq.heappop(h3)\n        while len(h4) > 0 and (not valid[h4[0][1]]):\n            hq.heappop(h4)\n        ans = max(x + y - h1[0][0], x - y - h2[0][0], -x + y - h3[0][0], -x - y - h4[0][0])\n        print(ans)", "import heapq\nfrom sys import stdin\npoints = {}\ncount = 1\nanswer = 0\n(h1, h2, h3, h4) = ([], [], [], [])\nfor _ in range(int(stdin.readline())):\n    query = [i for i in stdin.readline().split()]\n    if query[0] == '+':\n        (x, y) = (int(query[1]) ^ answer, int(query[2]) ^ answer)\n        heapq.heappush(h1, (x + y, count))\n        heapq.heappush(h2, (x - y, count))\n        heapq.heappush(h3, (y - x, count))\n        heapq.heappush(h4, (-x - y, count))\n        points[count] = True\n        count += 1\n    elif query[0] == '-':\n        n = int(query[1]) ^ answer\n        points[n] = False\n    else:\n        (x, y) = (int(query[1]) ^ answer, int(query[2]) ^ answer)\n        while h1 and (not points[h1[0][1]]):\n            heapq.heappop(h1)\n        while h2 and (not points[h2[0][1]]):\n            heapq.heappop(h2)\n        while h3 and (not points[h3[0][1]]):\n            heapq.heappop(h3)\n        while h4 and (not points[h4[0][1]]):\n            heapq.heappop(h4)\n        result = max(x + y - h1[0][0], x - y - h2[0][0], y - x - h3[0][0], -x - y - h4[0][0])\n        print(result)\n        answer = result", "import heapq\nh1 = []\nh2 = []\nh3 = []\nh4 = []\nans = 0\nm = {}\ncnt = 1\nfor __ in range(int(input())):\n    q = list(input().split())\n    if q[0] == '+':\n        x = ans ^ int(q[1])\n        y = ans ^ int(q[2])\n        heapq.heappush(h1, (x + y, cnt))\n        heapq.heappush(h2, (x - y, cnt))\n        heapq.heappush(h3, (-x + y, cnt))\n        heapq.heappush(h4, (-x - y, cnt))\n        m[cnt] = True\n        cnt += 1\n    elif q[0] == '-':\n        n = ans ^ int(q[1])\n        m[n] = False\n    else:\n        a = ans ^ int(q[1])\n        b = ans ^ int(q[2])\n        while len(h1) > 0 and m[h1[0][1]] == False:\n            heapq.heappop(h1)\n        while len(h2) > 0 and m[h2[0][1]] == False:\n            heapq.heappop(h2)\n        while len(h3) > 0 and m[h3[0][1]] == False:\n            heapq.heappop(h3)\n        while len(h4) > 0 and m[h4[0][1]] == False:\n            heapq.heappop(h4)\n        ans = max(a + b - h1[0][0], a - b - h2[0][0], -a + b - h3[0][0], -a - b - h4[0][0])\n        print(ans)", "from heapq import *\nanswer = 0\nbool_dict_present = dict()\nele_number = 1\n(h_1, h_2, h_3, h_4) = (list(), list(), list(), list())\nfor i in range(int(input().strip())):\n    inp = list(input().strip().split())\n    if inp[0] == '+':\n        (x, y) = map(int, inp[1:])\n        (x, y) = (x ^ answer, y ^ answer)\n        heappush(h_1, (x + y, ele_number))\n        heappush(h_2, (x - y, ele_number))\n        heappush(h_3, (-x + y, ele_number))\n        heappush(h_4, (-x - y, ele_number))\n        bool_dict_present[ele_number] = True\n        ele_number += 1\n    elif inp[0] == '?':\n        (x, y) = map(int, inp[1:])\n        (x, y) = (x ^ answer, y ^ answer)\n        while h_1 and (not bool_dict_present[h_1[0][1]]):\n            heappop(h_1)\n        while h_2 and (not bool_dict_present[h_2[0][1]]):\n            heappop(h_2)\n        while h_3 and (not bool_dict_present[h_3[0][1]]):\n            heappop(h_3)\n        while h_4 and (not bool_dict_present[h_4[0][1]]):\n            heappop(h_4)\n        answer = max(x + y - h_1[0][0], x - y - h_2[0][0], -x + y - h_3[0][0], -x - y - h_4[0][0])\n        print(answer)\n    else:\n        n = int(inp[1])\n        n = n ^ answer\n        bool_dict_present[n] = False", "from heapq import *\nq = int(input())\n(h1, h2, h3, h4) = ([], [], [], [])\nif_present = {}\nans = 0\nt = 1\nwhile q > 0:\n    en = list(input().split())\n    if en[0] == '+':\n        (u, v) = map(int, en[1:])\n        u = u ^ ans\n        v = v ^ ans\n        heappush(h1, (u + v, t))\n        heappush(h2, (u - v, t))\n        heappush(h3, (-u + v, t))\n        heappush(h4, (-u - v, t))\n        if_present[t] = True\n        t += 1\n    elif en[0] == '?':\n        (u, v) = map(int, en[1:])\n        u = u ^ ans\n        v = v ^ ans\n        while h1 and (not if_present[h1[0][1]]):\n            heappop(h1)\n        while h2 and (not if_present[h2[0][1]]):\n            heappop(h2)\n        while h3 and (not if_present[h3[0][1]]):\n            heappop(h3)\n        while h4 and (not if_present[h4[0][1]]):\n            heappop(h4)\n        ans = max(u + v - h1[0][0], u - v - h2[0][0], -u + v - h3[0][0], -u - v - h4[0][0])\n        print(ans)\n    else:\n        u = int(en[1])\n        u = u ^ ans\n        if_present[u] = False\n    q -= 1", "from heapq import *\nres = 0\nmark = dict()\nbb = 1\n(pq1, pq2, pq3, pq4) = ([], [], [], [])\nfor i in range(int(input())):\n    arr = list(input().split())\n    if arr[0] == '+':\n        (x, y) = map(int, arr[1:])\n        (x, y) = (x ^ res, y ^ res)\n        heappush(pq1, (x + y, bb))\n        heappush(pq2, (x - y, bb))\n        heappush(pq3, (-x + y, bb))\n        heappush(pq4, (-x - y, bb))\n        mark[bb] = True\n        bb += 1\n    elif arr[0] == '?':\n        (x, y) = map(int, arr[1:])\n        (x, y) = (x ^ res, y ^ res)\n        while pq1 and (not mark[pq1[0][1]]):\n            heappop(pq1)\n        while pq2 and (not mark[pq2[0][1]]):\n            heappop(pq2)\n        while pq3 and (not mark[pq3[0][1]]):\n            heappop(pq3)\n        while pq4 and (not mark[pq4[0][1]]):\n            heappop(pq4)\n        res = max(x + y - pq1[0][0], x - y - pq2[0][0], -x + y - pq3[0][0], -x - y - pq4[0][0])\n        print(res)\n    else:\n        n = int(arr[1])\n        n = n ^ res\n        mark[n] = False", "from heapq import *\nanswer = 0\nbool_dict_present = dict()\nele_number = 1\n(h_1, h_2, h_3, h_4) = (list(), list(), list(), list())\nfor i in range(int(input().strip())):\n    inp = list(input().strip().split())\n    if inp[0] == '+':\n        (x, y) = map(int, inp[1:])\n        (x, y) = (x ^ answer, y ^ answer)\n        heappush(h_1, (x + y, ele_number))\n        heappush(h_2, (x - y, ele_number))\n        heappush(h_3, (-x + y, ele_number))\n        heappush(h_4, (-x - y, ele_number))\n        bool_dict_present[ele_number] = True\n        ele_number += 1\n    elif inp[0] == '?':\n        (x, y) = map(int, inp[1:])\n        (x, y) = (x ^ answer, y ^ answer)\n        while h_1 and (not bool_dict_present[h_1[0][1]]):\n            heappop(h_1)\n        while h_2 and (not bool_dict_present[h_2[0][1]]):\n            heappop(h_2)\n        while h_3 and (not bool_dict_present[h_3[0][1]]):\n            heappop(h_3)\n        while h_4 and (not bool_dict_present[h_4[0][1]]):\n            heappop(h_4)\n        answer = max(x + y - h_1[0][0], x - y - h_2[0][0], -x + y - h_3[0][0], -x - y - h_4[0][0])\n        print(answer)\n    else:\n        n = int(inp[1])\n        n = n ^ answer\n        bool_dict_present[n] = False", "from heapq import *\nn = ans = 0\n(h1, h2, h3, h4) = ([], [], [], [])\ndeleted = set()\nfor _ in range(int(input())):\n    query = input().split()\n    if query[0] == '+':\n        n += 1\n        (x, y) = (ans ^ int(query[1]), ans ^ int(query[2]))\n        heappush(h1, (-(x + y), n))\n        heappush(h2, (-(x - y), n))\n        heappush(h3, (-(-x + y), n))\n        heappush(h4, (-(-x - y), n))\n    elif query[0] == '-':\n        deleted.add(ans ^ int(query[1]))\n    else:\n        (x, y) = (ans ^ int(query[1]), ans ^ int(query[2]))\n        while h1[0][1] in deleted:\n            heappop(h1)\n        while h2[0][1] in deleted:\n            heappop(h2)\n        while h3[0][1] in deleted:\n            heappop(h3)\n        while h4[0][1] in deleted:\n            heappop(h4)\n        (f1, f2, f3, f4) = (x + y, x - y, -x + y, -x - y)\n        ans = max(-h1[0][0] - f1, -h2[0][0] - f2, -h3[0][0] - f3, -h4[0][0] - f4)\n        print(ans)"]