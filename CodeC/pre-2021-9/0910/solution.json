["for _ in range(int(input())):\n    (vertices, edges) = map(int, input().split())\n    (deg, ans) = ([0] * (vertices + 1), [1] * vertices)\n    for _ in range(edges):\n        (v1, v2) = map(int, input().split())\n        deg[v1] += 1\n        deg[v2] += 1\n    if edges % 2 == 0:\n        print(1, '\\n', *ans)\n    else:\n        flag = False\n        for i in range(1, vertices + 1):\n            if deg[i] % 2 != 0:\n                (ans[i - 1], flag) = (2, True)\n                break\n        if flag:\n            print(2, '\\n', *ans)\n        else:\n            (ans[v1 - 1], ans[v2 - 1]) = (2, 3)\n            print(3, '\\n', *ans)", "for _ in range(int(input())):\n    (vertices, edges) = map(int, input().split())\n    (deg, ans) = ([0] * (vertices + 1), [1] * vertices)\n    for _ in range(edges):\n        (v1, v2) = map(int, input().split())\n        deg[v1] += 1\n        deg[v2] += 1\n    if edges % 2 == 0:\n        print(1, '\\n', *ans)\n    else:\n        flag = False\n        for i in range(1, vertices + 1):\n            if deg[i] % 2 != 0:\n                (ans[i - 1], flag) = (2, True)\n                break\n        if flag:\n            print(2, '\\n', *ans)\n        else:\n            (ans[v1 - 1], ans[v2 - 1]) = (2, 3)\n            print(3, '\\n', *ans)", "for _ in range(int(input())):\n    (vertices, edges) = map(int, input().split())\n    (deg, ans) = ([0] * (vertices + 1), [1] * vertices)\n    for _ in range(edges):\n        (v1, v2) = map(int, input().split())\n        deg[v1] += 1\n        deg[v2] += 1\n    if edges % 2 == 0:\n        print(1, '\\n', *ans)\n    else:\n        flag = False\n        for i in range(1, vertices + 1):\n            if deg[i] % 2 != 0:\n                (ans[i - 1], flag) = (2, True)\n                break\n        if flag:\n            print(2, '\\n', *ans)\n        else:\n            (ans[v1 - 1], ans[v2 - 1]) = (2, 3)\n            print(3, '\\n', *ans)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [[]] * n\n    d = [0] * n\n    res = [1] * n\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        l[u - 1].append(v - 1)\n        l[v - 1].append(u - 1)\n        d[v - 1] += 1\n        d[u - 1] += 1\n    if m % 2 == 0:\n        print(1)\n        for i in range(n):\n            print(1, end=' ')\n        print()\n        continue\n    c = True\n    for i in range(n):\n        if d[i] % 2 == 1 and c:\n            res[i] = 2\n            c = False\n        if d[i] == 0:\n            res[i] = 2\n    if c:\n        print(3)\n        res[v - 1] = 2\n        res[u - 1] = 3\n    else:\n        print(2)\n    for i in res:\n        print(i, end=' ')\n    print()", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [[]] * n\n    d = [0] * n\n    res = [1] * n\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        l[u - 1].append(v - 1)\n        l[v - 1].append(u - 1)\n        d[v - 1] += 1\n        d[u - 1] += 1\n    if m % 2 == 0:\n        print(1)\n        for i in range(n):\n            print(1, end=' ')\n        print()\n        continue\n    c = True\n    for i in range(n):\n        if d[i] % 2 == 1 and c:\n            res[i] = 2\n            c = False\n        if d[i] == 0:\n            res[i] = 2\n    if c:\n        print(3)\n        res[v - 1] = 2\n        res[u - 1] = 3\n    else:\n        print(2)\n    for i in res:\n        print(i, end=' ')\n    print()", "def main():\n    T = int(input())\n    for counter in range(T):\n        (n, m) = map(int, input().split())\n        indeg = [0 for i in range(n)]\n        sum = 0\n        u = 0\n        v = 0\n        for i in range(m):\n            (u, v) = map(int, input().split())\n            indeg[u - 1] += 1\n            indeg[v - 1] += 1\n            sum += 1\n        cond = 0\n        rank = [2 for i in range(n)]\n        for i in range(n):\n            if indeg[i] % 2 != 0 and cond == 0:\n                index = i\n                rank[i] = 1\n                cond = 1\n            if indeg[i] == 0:\n                rank[i] = 1\n        if m % 2 == 0:\n            print('1')\n            for i in range(n):\n                print('1', end=' ')\n            print('')\n        elif cond == 0:\n            print('3')\n            rank[u - 1] = 3\n            rank[v - 1] = 1\n            for i in range(n):\n                print(rank[i], end=' ')\n            print('')\n        else:\n            print('2')\n            for i in range(n):\n                print(rank[i], end=' ')\n            print('')\nmain()", "def main():\n    T = int(input())\n    for counter in range(T):\n        (n, m) = map(int, input().split())\n        indeg = [0 for i in range(n)]\n        sum = 0\n        u = 0\n        v = 0\n        for i in range(m):\n            (u, v) = map(int, input().split())\n            indeg[u - 1] += 1\n            indeg[v - 1] += 1\n            sum += 1\n        cond = 0\n        rank = [2 for i in range(n)]\n        for i in range(n):\n            if indeg[i] % 2 != 0 and cond == 0:\n                index = i\n                rank[i] = 1\n                cond = 1\n            if indeg[i] == 0:\n                rank[i] = 1\n        if m % 2 == 0:\n            print('1')\n            for i in range(n):\n                print('1', end=' ')\n            print('')\n        elif cond == 0:\n            print('3')\n            rank[u - 1] = 3\n            rank[v - 1] = 1\n            for i in range(n):\n                print(rank[i], end=' ')\n            print('')\n        else:\n            print('2')\n            for i in range(n):\n                print(rank[i], end=' ')\n            print('')\nmain()", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\nfor _ in range(int(sys.stdin.readline())):\n    (N, M) = get_ints()\n    graph = [[] for i in range(N + 1)]\n    all_even = 0\n    for _ in range(M):\n        (u, v) = get_ints()\n        graph[u].append(v)\n        graph[v].append(u)\n        if len(graph[u]) % 2:\n            all_even = all_even + 1\n        else:\n            all_even = all_even - 1\n        if len(graph[v]) % 2:\n            all_even = all_even + 1\n        else:\n            all_even = all_even - 1\n    ans = ''\n    if M % 2:\n        if all_even == 0:\n            sys.stdout.write('3\\n')\n            flag = False\n            idx2 = -1\n            for i in range(1, N + 1):\n                if len(graph[i]) > 0 and (not flag):\n                    flag = True\n                    idx2 = graph[i][0]\n                    ans = ans + '1 '\n                elif i == idx2:\n                    ans = ans + '2 '\n                else:\n                    ans = ans + '3 '\n        else:\n            sys.stdout.write('2\\n')\n            flag = False\n            for i in range(1, N + 1):\n                if len(graph[i]) % 2 and (not flag):\n                    flag = True\n                    ans = ans + '2 '\n                else:\n                    ans = ans + '1 '\n    else:\n        sys.stdout.write('1\\n')\n        for i in range(1, N + 1):\n            ans = ans + '1 '\n    ans = ans + '\\n'\n    sys.stdout.write(ans)", "for _ in range(int(input())):\n    (vertices, edges) = map(int, input().split())\n    deg = [0] * (vertices + 1)\n    for _ in range(edges):\n        (v1, v2) = map(int, input().split())\n        deg[v1] += 1\n        deg[v2] += 1\n    if edges % 2 == 0:\n        print(1)\n        ans = [1] * vertices\n        print(*ans)\n    else:\n        oddv = 0\n        ans = [1] * vertices\n        for i in range(1, vertices + 1):\n            if deg[i] % 2 != 0:\n                oddv = i\n                break\n        if oddv > 0:\n            print(2)\n            ans[oddv - 1] = 2\n            print(*ans)\n        else:\n            print(3)\n            ans[v1 - 1] = 2\n            ans[v2 - 1] = 3\n            print(*ans)", "for _ in range(int(input())):\n    (vertices, edges) = map(int, input().split())\n    deg = [0] * (vertices + 1)\n    for _ in range(edges):\n        (v1, v2) = map(int, input().split())\n        deg[v1] += 1\n        deg[v2] += 1\n    if edges % 2 == 0:\n        print(1)\n        ans = [1] * vertices\n        print(*ans)\n    else:\n        oddv = 0\n        ans = [1] * vertices\n        for i in range(1, vertices + 1):\n            if deg[i] % 2 != 0:\n                oddv = i\n                break\n        if oddv > 0:\n            print(2)\n            ans[oddv - 1] = 2\n            print(*ans)\n        else:\n            print(3)\n            ans[v1 - 1] = 2\n            ans[v2 - 1] = 3\n            print(*ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    found = False\n    d = {}\n    for i in range(1, n + 1):\n        d[i] = []\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        d[x].append(y)\n        d[y].append(x)\n    if m % 2 == 0:\n        print(1)\n        print(*[1] * n)\n    else:\n        l = [1] * n\n        for i in d:\n            if len(d[i]) % 2 == 1:\n                l[i - 1] = 2\n                found = True\n                break\n        if found:\n            print(2)\n            print(*l)\n        else:\n            print(3)\n            for i in d:\n                if len(d[i]) >= 1:\n                    (l[i - 1], l[d[i][0] - 1]) = (2, 3)\n                    print(*l)\n                    break", "for _ in range(int(input())):\n    g = {}\n    (v, e) = map(int, input().split())\n    degree = [0 for i in range(v + 1)]\n    for i in range(e):\n        (v1, v2) = map(int, input().split())\n        degree[v1] += 1\n        degree[v2] += 1\n    if e % 2 == 0:\n        print(1)\n        for i in range(v):\n            print('1', end=' ')\n        print(' ')\n    else:\n        ov = 0\n        for i in range(1, v + 1):\n            if degree[i] % 2 != 0:\n                ov = i\n                break\n        if ov > 0:\n            print(2)\n            for i in range(1, v + 1):\n                if i == ov:\n                    print('2', end=' ')\n                else:\n                    print('1', end=' ')\n            print(' ')\n        else:\n            print(3)\n            for i in range(1, v + 1):\n                if i == v1:\n                    print('1', end=' ')\n                elif i == v2:\n                    print('2', end=' ')\n                else:\n                    print('3', end=' ')\n            print(' ')", "import math\nimport bisect\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as ddc\nfrom collections import Counter\nINF = 10 ** 20\nmod = 1000000007\n\ndef MOD(p, q=1, mod=1000000007):\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef process(Graph, N, M, v1, v2):\n    if not M % 2:\n        print(1)\n        for i in range(N):\n            print(1, end=' ')\n        print()\n    else:\n        odd = 0\n        for i in range(1, N + 1):\n            if Graph[i] & 1:\n                odd = i\n                break\n        if odd > 0:\n            print(2)\n            for i in range(1, N + 1):\n                print(2 if i == odd else 1, end=' ')\n            print()\n        else:\n            print(3)\n            for i in range(1, N + 1):\n                if i == v1:\n                    print(1, end=' ')\n                elif i == v2:\n                    print(2, end=' ')\n                else:\n                    print(3, end=' ')\n            print()\n\ndef main():\n    for _ in range(int(input())):\n        (N, M) = map(int, input().split())\n        Graph = ddc(int)\n        (v1, v2) = (0, 0)\n        for i in range(M):\n            (u, v) = map(int, input().split())\n            Graph[u] += 1\n            Graph[v] += 1\n            (v1, v2) = (u, v)\n        process(Graph, N, M, v1, v2)\nmain()", "for _ in range(int(input())):\n    graph = {}\n    (v, e) = map(int, input().split())\n    degree = [0] * (v + 1)\n    for __ in range(e):\n        (v1, v2) = map(int, input().split())\n        degree[v1] += 1\n        degree[v2] += 1\n    if e & 1 == 0:\n        print(1)\n        for i in range(v):\n            print('1', end=' ')\n        print(' ')\n    else:\n        oddvertex = 0\n        for i in range(1, v + 1):\n            if degree[i] & 1:\n                oddvertex = i\n                break\n        if oddvertex > 0:\n            print(2)\n            for i in range(1, v + 1):\n                if i == oddvertex:\n                    print('2', end=' ')\n                else:\n                    print('1', end=' ')\n            print(' ')\n        else:\n            print(3)\n            for i in range(1, v + 1):\n                if i == v1:\n                    print('1', end=' ')\n                elif i == v2:\n                    print('2', end=' ')\n                else:\n                    print('3', end=' ')\n            print(' ')", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().strip().split())\n    deg = [0] * n\n    for x in range(m):\n        (u, v) = map(int, input().strip().split())\n        deg[u - 1] += 1\n        deg[v - 1] += 1\n    if m % 2 == 0:\n        print(1)\n        ans = [1] * n\n        print(*ans)\n    else:\n        ans = [1] * n\n        odd = -1\n        for i in range(len(deg)):\n            if deg[i] % 2 != 0:\n                odd = i\n                break\n        if odd != -1:\n            print(2)\n            ans[odd] = 2\n            print(*ans)\n        else:\n            print(3)\n            ans[u - 1] = 2\n            ans[v - 1] = 3\n            print(*ans)", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nmod = 1000000007\nfor _ in range(inp()):\n    (n, m) = mul()\n    deg = [0] * n\n    for x in range(m):\n        (u, v) = mul()\n        deg[u - 1] += 1\n        deg[v - 1] += 1\n    if m % 2 == 0:\n        print(1)\n        ans = [1] * n\n        print(*ans)\n    else:\n        ans = [1] * n\n        odd = -1\n        for i in range(len(deg)):\n            if deg[i] % 2 != 0:\n                odd = i\n                break\n        if odd != -1:\n            print(2)\n            ans[odd] = 2\n            print(*ans)\n        else:\n            print(3)\n            ans[u - 1] = 2\n            ans[v - 1] = 3\n            print(*ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    g = {i + 1: [] for i in range(n)}\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        g[u].append(v)\n        g[v].append(u)\n    k = 1\n    K = [1 for i in range(n)]\n    if m % 2 == 0:\n        print(k)\n        print(*K)\n        continue\n    deg = [0] * n\n    for i in range(n):\n        deg[i] = len(g[i + 1])\n    for i in range(n):\n        if deg[i] % 2:\n            K[i] = 2\n            break\n    else:\n        K[u - 1] = 3\n        K[v - 1] = 2\n        print(k + 2)\n        print(*K)\n        continue\n    print(k + 1)\n    print(*K)", "nums = int(input())\nfor q in range(nums):\n    (n, m) = map(int, input().split())\n    graph = [0 for i in range(n + 1)]\n    ans = [1] * (n + 1)\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        graph[a] += 1\n        graph[b] += 1\n        x = a\n        y = b\n    if m % 2 == 0:\n        print(1)\n        print(*[1 for i in range(n)])\n    else:\n        for (i, val) in enumerate(graph[1:]):\n            if val % 2 == 1:\n                ans[i + 1] = 2\n                print(2)\n                print(*ans[1:])\n                break\n        else:\n            ans[x] = 2\n            ans[y] = 3\n            print(3)\n            print(*ans[1:])", "for _ in range(int(input())):\n    (v, e) = map(int, input().split())\n    g = [0] * (v + 1)\n    ans = [1] * (v + 1)\n    for i in range(e):\n        (a, b) = map(int, input().split())\n        g[a] += 1\n        g[b] += 1\n        x = a\n        y = b\n    if not e & 1:\n        print(1)\n        print(*ans[1:])\n        continue\n    for (v, i) in enumerate(g[1:]):\n        if i & 1:\n            ans[v + 1] = 2\n            print(2)\n            print(*ans[1:])\n            break\n    else:\n        ans[x] = 2\n        ans[y] = 3\n        print(3)\n        print(*ans[1:])", "tc = int(input())\nfor i in range(tc):\n    (n, m) = map(int, input().split())\n    deg = [0 for x in range(n + 1)]\n    for j in range(m):\n        (u, v) = map(int, input().split())\n        deg[u] += 1\n        deg[v] += 1\n    if m % 2 == 0:\n        print(1)\n        arr = [1 for j in range(n)]\n        print(*arr)\n        continue\n    else:\n        degEven = True\n        for j in range(n + 1):\n            if deg[j] % 2 != 0:\n                degEven = False\n                other = j\n                break\n        if degEven:\n            print(3)\n            arr = [1 for j in range(n)]\n            arr[u - 1] = 2\n            arr[v - 1] = 3\n            print(*arr)\n        else:\n            print(2)\n            arr = [1 for j in range(n)]\n            arr[other - 1] = 2\n            print(*arr)", "tc = int(input())\nfor i in range(tc):\n    (n, m) = map(int, input().split())\n    deg = [0 for x in range(n + 1)]\n    for j in range(m):\n        (u, v) = map(int, input().split())\n        deg[u] += 1\n        deg[v] += 1\n    if m % 2 == 0:\n        print(1)\n        arr = [1 for j in range(n)]\n        print(*arr)\n        continue\n    else:\n        degEven = True\n        for j in range(n + 1):\n            if deg[j] % 2 != 0:\n                degEven = False\n                other = j\n                break\n        if degEven:\n            print(3)\n            arr = [1 for j in range(n)]\n            arr[u - 1] = 2\n            arr[v - 1] = 3\n            print(*arr)\n        else:\n            print(2)\n            arr = [1 for j in range(n)]\n            arr[other - 1] = 2\n            print(*arr)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    sol = [0] * n\n    for i in range(m):\n        (u, v) = list(map(int, input().split()))\n        sol[u - 1] += 1\n        sol[v - 1] += 1\n    if m % 2 == 0:\n        print(1)\n        ans = [1] * n\n        print(*ans)\n    else:\n        ans = [1] * n\n        flag = -1\n        for i in range(len(sol)):\n            if sol[i] % 2 != 0:\n                flag = i\n                break\n        if flag != -1:\n            print(2)\n            ans[flag] = 2\n            print(*ans)\n        else:\n            print(3)\n            ans[u - 1] = 2\n            ans[v - 1] = 3\n            print(*ans)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    sol = [0] * n\n    for i in range(m):\n        (u, v) = list(map(int, input().split()))\n        sol[u - 1] += 1\n        sol[v - 1] += 1\n    if m % 2 == 0:\n        print(1)\n        ans = [1] * n\n        print(*ans)\n    else:\n        ans = [1] * n\n        flag = -1\n        for i in range(len(sol)):\n            if sol[i] % 2 != 0:\n                flag = i\n                break\n        if flag != -1:\n            print(2)\n            ans[flag] = 2\n            print(*ans)\n        else:\n            print(3)\n            ans[u - 1] = 2\n            ans[v - 1] = 3\n            print(*ans)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    sol = [0] * n\n    for i in range(m):\n        (u, v) = list(map(int, input().split()))\n        sol[u - 1] += 1\n        sol[v - 1] += 1\n    if m % 2 == 0:\n        print(1)\n        ans = [1] * n\n        print(*ans)\n    else:\n        ans = [1] * n\n        flag = -1\n        for i in range(len(sol)):\n            if sol[i] % 2 != 0:\n                flag = i\n                break\n        if flag != -1:\n            print(2)\n            ans[flag] = 2\n            print(*ans)\n        else:\n            print(3)\n            ans[u - 1] = 2\n            ans[v - 1] = 3\n            print(*ans)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    deg = [0] * n\n    for i in range(m):\n        (u, v) = list(map(int, input().split()))\n        deg[u - 1] += 1\n        deg[v - 1] += 1\n    if m % 2 == 0:\n        print(1)\n        ans = [1] * n\n        print(*ans)\n    else:\n        ans = [1] * n\n        flag = -1\n        for i in range(len(deg)):\n            if deg[i] % 2 != 0:\n                flag = i\n                break\n        if flag != -1:\n            print(2)\n            ans[flag] = 2\n            print(*ans)\n        else:\n            print(3)\n            ans[u - 1] = 2\n            ans[v - 1] = 3\n            print(*ans)", "T = int(input())\nans = []\nfor _ in range(T):\n    (N, M) = [int(i) for i in input().split()]\n    D = [0 for i in range(N)]\n    edges = []\n    for i in range(M):\n        (u, v) = [int(i) for i in input().split()]\n        edges.append([u, v])\n        D[u - 1] += 1\n        D[v - 1] += 1\n    if M % 2 == 0:\n        K = 1\n        s = '1 ' * N\n        ans.append(K)\n        ans.append(s.strip())\n    else:\n        odd = -1\n        for i in range(N):\n            if D[i] % 2 != 0:\n                odd = i\n                break\n        if odd != -1:\n            K = 2\n            s = '1 ' * odd + '2 ' + '1 ' * (N - odd - 1)\n            ans.append(K)\n            ans.append(s.strip())\n        else:\n            K = 3\n            e = edges[0]\n            count = 2\n            s = ''\n            for i in range(N):\n                if i == e[0] - 1 or i == e[1] - 1:\n                    s += str(count) + ' '\n                    count += 1\n                else:\n                    s += '1 '\n            ans.append(K)\n            ans.append(s.strip())\nfor i in ans:\n    print(i)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    deg = [0] * n\n    for i in range(m):\n        (u, v) = list(map(int, input().split()))\n        deg[u - 1] += 1\n        deg[v - 1] += 1\n    if m % 2 == 0:\n        print(1)\n        ans = [1] * n\n        print(*ans)\n    else:\n        ans = [1] * n\n        flag = -1\n        for i in range(len(deg)):\n            if deg[i] % 2 != 0:\n                flag = i\n                break\n        if flag != -1:\n            print(2)\n            ans[flag] = 2\n            print(*ans)\n        else:\n            print(3)\n            ans[u - 1] = 2\n            ans[v - 1] = 3\n            print(*ans)", "from collections import defaultdict\n\ndef solve(G, Num_Ver, Num_Edge):\n    G1 = G\n    ans = [1] * Num_Ver\n    if Num_Edge % 2 == 0:\n        return (1, ans)\n    for i in range(N):\n        if len(G[i]) % 2:\n            ans[i] = 2\n            return (2, ans)\n    for i in range(N):\n        if len(G[i]) != 0:\n            ans[i] = 2\n            ans[G1[i][0]] = 3\n            return (3, ans)\nfor _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    deg = [[] for _ in range(N)]\n    for _ in range(M):\n        (u, v) = map(int, input().split())\n        deg[u - 1].append(v - 1)\n        deg[v - 1].append(u - 1)\n    ans1 = solve(deg, N, M)\n    print(ans1[0])\n    print(*ans1[1])", "from collections import defaultdict\n\ndef solve(G, Num_Ver, Num_Edge):\n    G1 = G\n    ans = [1] * Num_Ver\n    if Num_Edge % 2 == 0:\n        return (1, ans)\n    for i in range(N):\n        if len(G[i]) % 2:\n            ans[i] = 2\n            return (2, ans)\n    for i in range(N):\n        if len(G[i]) != 0:\n            ans[i] = 2\n            ans[G1[i].pop()] = 3\n            return (3, ans)\nfor _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    deg = [[] for _ in range(N)]\n    for _ in range(M):\n        (u, v) = map(int, input().split())\n        deg[u - 1].append(v - 1)\n        deg[v - 1].append(u - 1)\n    ans1 = solve(deg, N, M)\n    print(ans1[0])\n    print(*ans1[1])", "from collections import defaultdict\n\ndef solve(G, Num_Ver, Num_Edge):\n    G1 = G\n    ans = [1] * Num_Ver\n    if Num_Edge % 2 == 0:\n        return (1, ans)\n    for vert in G:\n        if len(G[vert]) % 2:\n            ans[vert] = 2\n            return (2, ans)\n    for i in G:\n        if len(G[i]) != 0:\n            ans[i] = 2\n            ans[G1[i].pop()] = 3\n            return (3, ans)\nfor _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    deg = defaultdict(set)\n    for _ in range(M):\n        (u, v) = map(int, input().split())\n        deg[u - 1].add(v - 1)\n        deg[v - 1].add(u - 1)\n    ans1 = solve(deg, N, M)\n    print(ans1[0])\n    print(*ans1[1])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    deg = [0] * n\n    for _ in range(m):\n        (x, y) = map(int, input().split())\n        deg[x - 1] += 1\n        deg[y - 1] += 1\n    if m % 2 == 0:\n        print(1)\n        ans = [1] * n\n        print(*ans)\n    else:\n        ans = [1] * n\n        flag = -1\n        for i in range(len(deg)):\n            if deg[i] % 2 != 0:\n                flag = i\n                break\n        if flag != -1:\n            ans[flag] = 2\n            print(2)\n            print(*ans)\n        else:\n            print(3)\n            ans[x - 1] = 2\n            ans[y - 1] = 3\n            print(*ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    (d, x, y, k, ans) = ({i: [] for i in range(1, n + 1)}, -1, -1, 1, [1 for i in range(n + 1)])\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        d[x].append(y)\n        d[y].append(x)\n    if m % 2 == 1:\n        (k, isOdd) = (2, False)\n        for i in range(1, n + 1):\n            if len(d[i]) % 2 == 1:\n                (ans[i], isOdd) = (2, True)\n                break\n        if not isOdd:\n            (ans[x], ans[y], k) = (2, 3, 3)\n    print(k)\n    print(*ans[1:])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {i: [] for i in range(1, n + 1)}\n    (x, y) = (-1, -1)\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        d[x].append(y)\n        d[y].append(x)\n    k = 1\n    ans = [1 for i in range(n + 1)]\n    if m % 2 == 1:\n        k = 2\n        isOdd = False\n        for i in range(1, n + 1):\n            if len(d[i]) % 2 == 1:\n                ans[i] = 2\n                isOdd = True\n                break\n        if not isOdd:\n            (ans[x], ans[y], k) = (2, 3, 3)\n    print(k)\n    print(*ans[1:])", "import math\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    graph = []\n    for i in range(n):\n        graph.append([])\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        x -= 1\n        y -= 1\n        graph[x].append(y)\n        graph[y].append(x)\n    if m % 2 == 0:\n        print(1)\n        s = ''\n        for i in range(1, n + 1):\n            s += str(1) + ' '\n        print(s)\n    else:\n        c = 0\n        s = ''\n        for i in range(n):\n            if len(graph[i]) % 2 == 1:\n                c = 1\n                index = i\n        if c:\n            print(2)\n            for i in range(n):\n                if i == index:\n                    s += str(2) + ' '\n                else:\n                    s += str(1) + ' '\n            print(s)\n        else:\n            d = 0\n            print(3)\n            for i in range(n):\n                if d == 0:\n                    if len(graph[i]) > 0:\n                        s += str(2) + ' '\n                        soap = graph[i][0]\n                        d = 1\n                    else:\n                        s += str(1) + ' '\n                elif i == soap:\n                    s += str(3) + ' '\n                else:\n                    s += str(1) + ' '\n            print(s)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    deg = [int(0)] * (n + 1)\n    for k in range(m):\n        (u, v) = list(map(int, input().split()))\n        deg[u] = 1 - deg[u]\n        deg[v] = 1 - deg[v]\n    if m % 2 == 0:\n        print('1')\n        for j in range(n):\n            print('1', end=' ')\n        print()\n    elif max(deg) == 1:\n        print('2')\n        i = 1\n        while i <= n:\n            if deg[i] == 1:\n                j = 1\n                while j <= n:\n                    if j != i:\n                        print('1', end=' ')\n                    else:\n                        print('2', end=' ')\n                    j += 1\n                print()\n                break\n            i += 1\n    else:\n        print('3')\n        i = 1\n        while i <= n:\n            if i == u:\n                print('1', end=' ')\n            elif i == v:\n                print('2', end=' ')\n            else:\n                print('3', end=' ')\n            i += 1\n        print()", "from collections import defaultdict as dic\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = 0\n    b = 0\n    dick = dic(int)\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        dick[a] += 1\n        dick[b] += 1\n    if m % 2 == 0:\n        print(1)\n        for i in range(1, n + 1):\n            print(1, end=' ')\n    else:\n        even = True\n        ans = 0\n        for i in dick:\n            if dick[i] % 2 == 1:\n                even = False\n                ans = i\n        if not even:\n            print(2)\n            for i in range(1, n + 1):\n                if i != ans:\n                    print(1, end=' ')\n                else:\n                    print(2, end=' ')\n        else:\n            print(3)\n            for i in range(1, n + 1):\n                if i != a and i != b:\n                    print(1, end=' ')\n                elif i == a:\n                    print(2, end=' ')\n                else:\n                    print(3, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    g = [[] for __ in range(n)]\n    l = [0] * n\n    r = [1] * n\n    for __ in range(m):\n        (u, v) = map(int, input().split())\n        u -= 1\n        v -= 1\n        g[u].append(v)\n        g[v].append(u)\n        l[u] += 1\n        l[v] += 1\n    d = 1\n    if not m % 2:\n        print(1)\n        print(*r)\n    else:\n        for i in range(n):\n            if l[i] % 2 and l[i] != 0:\n                d = 2\n                r[i] = 2\n                break\n        else:\n            for i in range(n):\n                if l[i]:\n                    d = 3\n                    r[i] = 2\n                    r[g[i][0]] = 3\n                    break\n        print(d)\n        print(*r)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    deg = [0] * n\n    for i in range(m):\n        (u, v) = list(map(int, input().split()))\n        deg[u - 1] += 1\n        deg[v - 1] += 1\n    if m % 2 == 0:\n        print(1)\n        ans = [1] * n\n        print(*ans)\n    else:\n        ans = [1] * n\n        flag = -1\n        for i in range(len(deg)):\n            if deg[i] % 2 != 0:\n                flag = i\n                break\n        if flag != -1:\n            print(2)\n            ans[flag] = 2\n            print(*ans)\n        else:\n            print(3)\n            ans[u - 1] = 2\n            ans[v - 1] = 3\n            print(*ans)", "t = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split(' '))\n    f = 0\n    l = [0] * n\n    res = [1] * n\n    for i in range(m):\n        (u, v) = map(int, input().split(' '))\n        l[u - 1] = l[u - 1] + 1\n        l[v - 1] = l[v - 1] + 1\n    if m % 2 == 0:\n        print(1)\n    else:\n        for i in range(n):\n            if l[i] % 2 == 1:\n                res[i] = 2\n                f = 1\n                print(2)\n                break\n        if f == 0:\n            res[u - 1] = 2\n            res[v - 1] = 3\n            print(3)\n    for i in res:\n        print(i, end=' ')\n    print()\n    t = t - 1", "import sys\nsys.setrecursionlimit(100000)\nvisited = []\n\ndef number_of_components(adj, x):\n    visited[x] = 1\n    edge = len(adj[x])\n    for i in adj[x]:\n        if visited[i] == 0:\n            edge += number_of_components(adj, i)\n    return edge\nt = int(input())\nwhile t > 0:\n    data = []\n    (n, m) = map(int, input().split())\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        data.append(x)\n        data.append(y)\n    adj = [[] for k in range(n)]\n    degree = [0] * n\n    visited = [0] * n\n    mark = []\n    flag = 0\n    if m % 2 == 0:\n        mark = [1] * n\n        print('1')\n        for k in mark:\n            print(k, end=' ')\n    else:\n        for i in range(0, len(data) - 1, 2):\n            adj[data[i] - 1].append(data[i + 1] - 1)\n            adj[data[i + 1] - 1].append(data[i] - 1)\n            degree[data[i] - 1] += 1\n            degree[data[i + 1] - 1] += 1\n        for i in range(n):\n            if degree[i] % 2 != 0:\n                odd = i\n                flag = 1\n                break\n        mark = [1] * n\n        if flag == 1:\n            mark[odd] = 2\n            print('2')\n            for j in mark:\n                print(j, end=' ')\n        else:\n            for i in range(n):\n                if visited[i] == 0:\n                    deg = number_of_components(adj, i)\n                    ed = deg // 2\n                    if ed % 2 != 0:\n                        mark[i] = 2\n                        nex = adj[i][0]\n                        mark[nex] = 3\n                        break\n            print('3')\n            for j in mark:\n                print(j, end=' ')\n        print()\n    t -= 1", "import sys\nT = int(sys.stdin.readline())\nfor _ in range(T):\n    (N, M) = list(map(int, sys.stdin.readline().split()))\n    G = {}\n    deg = [0] * (N + 1)\n    for i in range(1, N + 1):\n        G[i] = []\n    for _ in range(M):\n        (u, v) = list(map(int, sys.stdin.readline().split()))\n        deg[u] += 1\n        deg[v] += 1\n        G[u].append(v)\n        G[v].append(u)\n    if M % 2 == 0:\n        print(1)\n        for i in range(1, N + 1):\n            print(1, end=' ')\n    else:\n        x = -1\n        for i in range(1, N + 1):\n            if deg[i] % 2 != 0:\n                x = i\n                break\n        if x != -1:\n            print(2)\n            for i in range(1, N + 1):\n                if i != x:\n                    print(1, end=' ')\n                else:\n                    print(2, end=' ')\n        else:\n            print(3)\n            x = -1\n            for i in range(1, N + 1):\n                if deg[i] >= 2:\n                    x = i\n                    break\n            y = G[x][0]\n            for i in range(1, N + 1):\n                if i == x:\n                    print(2, end=' ')\n                elif i == y:\n                    print(3, end=' ')\n                else:\n                    print(1, end=' ')\n    print()", "import bisect\nfrom collections import defaultdict\ntest = int(input())\n\nclass Graph:\n\n    def __init__(self, v):\n        self.v = v\n        self.graph = defaultdict(list)\n        self.d = {}\n\n    def addedge(self, u, v):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        if u in self.d:\n            self.d[u] += 1\n        else:\n            self.d[u] = 1\n        if v in self.d:\n            self.d[v] += 1\n        else:\n            self.d[v] = 1\n\n    def removeedge(self, x):\n        a = self.graph[x]\n        del self.graph[x]\n        for i in range(len(a)):\n            self.d[a[i]] -= 1\nwhile test > 0:\n    test -= 1\n    (n, m) = map(int, input().split())\n    g = Graph(n)\n    result = [1 for i in range(n + 1)]\n    flag = 0\n    m1 = m\n    max1 = 0\n    while m > 0:\n        m -= 1\n        (u, v) = map(int, input().split())\n        g.addedge(u, v)\n    if m1 % 2 == 0:\n        flag = 1\n        max1 = 1\n    else:\n        for i in g.d:\n            if g.d[i] % 2 != 0:\n                flag = 1\n                result[i] = 2\n                break\n        for i in range(1, n + 1):\n            if i not in g.d:\n                result[i] = 2\n        max1 = 2\n    if flag == 0:\n        a = 0\n        fl1 = 0\n        for i in g.d:\n            g.removeedge(i)\n            a = i\n            break\n        for i in g.d:\n            if g.d[i] % 2 != 0 and result[i] == 1:\n                fl1 = 1\n                result[i] = 2\n                break\n        if fl1 == 1:\n            max1 = 3\n            result[a] = 3\n        else:\n            max1 = 2\n            result[a] = 2\n    print(max1)\n    for i in range(1, len(result)):\n        print(result[i], end=' ')\n    print()", "import bisect\nfrom collections import defaultdict\ntest = int(input())\n\nclass Graph:\n\n    def __init__(self, v):\n        self.v = v\n        self.graph = defaultdict(list)\n        self.d = {}\n\n    def addedge(self, u, v):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        if u in self.d:\n            self.d[u] += 1\n        else:\n            self.d[u] = 1\n        if v in self.d:\n            self.d[v] += 1\n        else:\n            self.d[v] = 1\n\n    def removeedge(self, x):\n        a = self.graph[x]\n        del self.graph[x]\n        for i in range(len(a)):\n            self.d[a[i]] -= 1\nwhile test > 0:\n    test -= 1\n    (n, m) = map(int, input().split())\n    g = Graph(n)\n    result = [1 for i in range(n + 1)]\n    flag = 0\n    m1 = m\n    max1 = 0\n    while m > 0:\n        m -= 1\n        (u, v) = map(int, input().split())\n        g.addedge(u, v)\n    if m1 % 2 == 0:\n        flag = 1\n        max1 = 1\n    else:\n        for i in g.d:\n            if g.d[i] % 2 != 0:\n                flag = 1\n                result[i] = 2\n                break\n        for i in range(1, n + 1):\n            if i not in g.d:\n                result[i] = 2\n        max1 = 2\n    if flag == 0:\n        a = 0\n        fl1 = 0\n        for i in g.d:\n            g.removeedge(i)\n            a = i\n            break\n        for i in g.d:\n            if g.d[i] % 2 != 0 and result[i] == 1:\n                fl1 = 1\n                result[i] = 2\n                break\n        if fl1 == 1:\n            max1 = 3\n            result[a] = 3\n        else:\n            max1 = 2\n            result[a] = 2\n    print(max1)\n    for i in range(1, len(result)):\n        print(result[i], end=' ')\n    print()", "import bisect\nfrom collections import defaultdict\ntest = int(input())\n\nclass Graph:\n\n    def __init__(self, v):\n        self.v = v\n        self.graph = defaultdict(list)\n        self.d = {}\n\n    def addedge(self, u, v):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n        if u in self.d:\n            self.d[u] += 1\n        else:\n            self.d[u] = 1\n        if v in self.d:\n            self.d[v] += 1\n        else:\n            self.d[v] = 1\n\n    def removeedge(self, x):\n        a = self.graph[x]\n        del self.graph[x]\n        for i in range(len(a)):\n            self.d[a[i]] -= 1\nwhile test > 0:\n    test -= 1\n    (n, m) = map(int, input().split())\n    g = Graph(n)\n    result = [1 for i in range(n + 1)]\n    flag = 0\n    m1 = m\n    max1 = 0\n    while m > 0:\n        m -= 1\n        (u, v) = map(int, input().split())\n        g.addedge(u, v)\n    if m1 % 2 == 0:\n        flag = 1\n        max1 = 1\n    else:\n        for i in g.d:\n            if g.d[i] % 2 != 0:\n                flag = 1\n                result[i] = 2\n                break\n        for i in range(1, n + 1):\n            if i not in g.d:\n                result[i] = 2\n        max1 = 2\n    if flag == 0:\n        a = 0\n        fl1 = 0\n        for i in g.d:\n            g.removeedge(i)\n            a = i\n            break\n        for i in g.d:\n            if g.d[i] % 2 != 0 and result[i] == 1:\n                fl1 = 1\n                result[i] = 2\n                break\n        if fl1 == 1:\n            max1 = 3\n            result[a] = 3\n        else:\n            max1 = 2\n            result[a] = 2\n    print(max1)\n    for i in range(1, len(result)):\n        print(result[i], end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    d = [0] * (n + 1)\n    for _ in range(m):\n        (u, v) = list(map(int, input().split()))\n        d[u] += 1\n        d[v] += 1\n    u_ = u\n    v_ = v\n    if m % 2 == 0:\n        print('1')\n        print(' '.join(['1'] * n))\n        continue\n    for u in range(1, n + 1):\n        if d[u] % 2 == 1:\n            print('2')\n            ans = ['1'] * (u - 1) + ['2'] + ['1'] * (n - u)\n            print(' '.join(ans))\n            break\n    else:\n        print('3')\n        ans = ['3' if i == u_ else '2' if i == v_ else '1' for i in range(1, n + 1)]\n        print(' '.join(ans))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ds = {}\n    for _ in range(m):\n        (u, v) = map(int, input().split())\n        e = (u, v)\n        ds[u] = ds.get(u, 0) + 1\n        ds[v] = ds.get(v, 0) + 1\n    if m % 2 == 0:\n        print(1)\n        print(' '.join(['1'] * n))\n    else:\n        v = next((v for v in ds if ds[v] % 2 == 1), None)\n        if v:\n            print(2)\n            t = {v: '2'}\n            print(' '.join([t.get(i, '1') for i in range(1, n + 1)]))\n        else:\n            print(3)\n            t = {e[0]: '2', e[1]: '3'}\n            print(' '.join([t.get(i, '1') for i in range(1, n + 1)]))", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        try:\n            d[u].append(v)\n        except:\n            d[u] = [v]\n        try:\n            d[v].append(u)\n        except:\n            d[v] = [u]\n    l = [1] * n\n    if m % 2 == 0:\n        print(1)\n        print(*l)\n    else:\n        f = True\n        for (i, j) in d.items():\n            if len(j) % 2 != 0:\n                l[i - 1] = 2\n                f = False\n                break\n        if f == False:\n            print(2)\n            print(*l)\n        else:\n            c = 1\n            for (i, j) in d.items():\n                if c == 3:\n                    break\n                elif len(j) % 2 == 0:\n                    l[i - 1] += c\n                    c += 1\n            print(3)\n            print(*l)", "for _ in range(int(input())):\n    (ver, edge) = map(int, input().split())\n    degree = {}\n    for i in range(edge):\n        (v1, v2) = map(int, input().split())\n        if v1 not in degree.keys():\n            degree[v1] = [v2]\n        else:\n            degree[v1].append(v2)\n        if v2 not in degree.keys():\n            degree[v2] = [v1]\n        else:\n            degree[v2].append(v1)\n    ans = [1] * ver\n    if edge % 2 == 0:\n        print(1)\n        print(*ans)\n    else:\n        even = True\n        for (key, values) in degree.items():\n            if len(values) % 2 != 0:\n                ans[key - 1] += 1\n                even = False\n                break\n        if even == False:\n            print(2)\n            print(*ans)\n        else:\n            k = 1\n            for (key, values) in degree.items():\n                if len(values) % 2 == 0:\n                    ans[key - 1] += k\n                    k += 1\n                if k == 3:\n                    break\n            print(3)\n            print(*ans)", "from sys import stdin\nfrom collections import defaultdict\nt = int(stdin.readline())\nwhile t:\n    (n, m) = [int(x) for x in stdin.readline().split()]\n    vertices_deg = defaultdict(int)\n    (adj_1, adj_2) = (0, 0)\n    for i in range(m):\n        (u, v) = [int(x) for x in stdin.readline().split()]\n        vertices_deg[u] += 1\n        vertices_deg[v] += 1\n        (adj_1, adj_2) = (u, v)\n    if m % 2 == 0:\n        print(1)\n        for i in range(n):\n            print(1, end=' ')\n    else:\n        temp = 0\n        flag = 0\n        for i in range(1, n + 1):\n            if vertices_deg[i] % 2 != 0:\n                temp = i\n                flag = 1\n                break\n        if flag == 1:\n            print(2)\n            for i in range(1, n + 1):\n                if i == temp:\n                    print(2, end=' ')\n                else:\n                    print(1, end=' ')\n        else:\n            print(3)\n            for i in range(1, n + 1):\n                if i == adj_1:\n                    print(3, end=' ')\n                elif i == adj_2:\n                    print(2, end=' ')\n                else:\n                    print(1, end=' ')\n    t -= 1", "for case in range(int(input())):\n    (vertices, edges) = [int(x) for x in input().split()]\n    dependecies = {}\n    edges_dict = {}\n    new_vertices = ['1'] * vertices\n    for i in range(vertices):\n        dependecies[i] = 0\n        edges_dict[i] = []\n    for edge in range(edges):\n        (u, v) = [int(x) - 1 for x in input().split()]\n        dependecies[u] += 1\n        dependecies[v] += 1\n        edges_dict[u].append(v)\n        edges_dict[v].append(u)\n    if edges % 2 == 0:\n        print(1)\n        print('1 ' * vertices)\n        continue\n    else:\n        odd_dependency_vertex = -1\n        for vertex in dependecies.keys():\n            if dependecies[vertex] % 2 != 0:\n                odd_dependency_vertex = vertex\n                break\n        if odd_dependency_vertex != -1:\n            new_vertices[odd_dependency_vertex] = '2'\n            print(2)\n            print(' '.join(new_vertices))\n        else:\n            first = -1\n            for i in range(vertices):\n                if dependecies[i] == 0:\n                    pass\n                elif first == -1:\n                    first = i\n                    break\n            second = edges_dict[first][0]\n            print(3)\n            new_vertices[first] = '2'\n            new_vertices[second] = '3'\n            print(' '.join(new_vertices))", "for case in range(int(input())):\n    (vertices, edges) = [int(x) for x in input().split()]\n    dependecies = {}\n    edges_dict = {}\n    new_vertices = ['1'] * vertices\n    for i in range(vertices):\n        dependecies[i] = 0\n        edges_dict[i] = []\n    for edge in range(edges):\n        (u, v) = [int(x) - 1 for x in input().split()]\n        dependecies[u] += 1\n        dependecies[v] += 1\n        edges_dict[u].append(v)\n        edges_dict[v].append(u)\n    if edges % 2 == 0:\n        print(1)\n        print('1 ' * vertices)\n        continue\n    else:\n        odd_dependency_vertex = -1\n        for vertex in dependecies.keys():\n            if dependecies[vertex] % 2 != 0:\n                odd_dependency_vertex = vertex\n                break\n        if odd_dependency_vertex != -1:\n            new_vertices[odd_dependency_vertex] = '2'\n            print(2)\n            print(' '.join(new_vertices))\n        else:\n            first = -1\n            for i in range(vertices):\n                if dependecies[i] == 0:\n                    pass\n                elif first == -1:\n                    first = i\n                    break\n            second = edges_dict[first][0]\n            print(3)\n            new_vertices[first] = '2'\n            new_vertices[second] = '3'\n            print(' '.join(new_vertices))", "test = int(input())\nfor testcase in range(test):\n    a = {}\n    c = {}\n    (n, m) = input().split(' ')\n    n = int(n)\n    m = int(m)\n    for i in range(m):\n        (x, y) = input().split(' ')\n        x = int(x)\n        y = int(y)\n        if x in a:\n            a[x].append(y)\n        else:\n            a[x] = [y]\n        if y in a:\n            a[y].append(x)\n        else:\n            a[y] = [x]\n    for i in range(1, n + 1):\n        c[i] = 0\n    if m % 2 == 0:\n        print(1)\n        for i in range(n):\n            print(1, end=' ')\n    else:\n        even_check = mark = odd_check = zero_check = 0\n        for i in a:\n            c[i] = len(a[i])\n            if c[i] % 2 == 0 and c[i] != 0:\n                even_check += 1\n            elif c[i] == 0:\n                zero_check += 1\n            else:\n                odd_check += 1\n            mark += 1\n        if even_check + zero_check == mark:\n            print(3)\n            temp1 = n + 1\n            for i in c:\n                if c[i] != 0:\n                    temp1 = i\n            if temp1 != n + 1:\n                temp2 = a[temp1][0]\n                for i in range(1, n + 1):\n                    if i == temp1:\n                        print(2, end=' ')\n                    elif i == temp2:\n                        print(3, end=' ')\n                    else:\n                        print(1, end=' ')\n        else:\n            temp = n\n            for i in c:\n                if c[i] % 2 != 0:\n                    if c[i] < temp:\n                        temp = i\n            if odd_check == 2:\n                if zero_check == mark - 2:\n                    print(2)\n                    for i in range(1, n + 1):\n                        if i != temp:\n                            print(1, end=' ')\n                        else:\n                            print(2, end=' ')\n                else:\n                    print(2)\n                    for i in range(1, n + 1):\n                        if i != temp:\n                            print(1, end=' ')\n                        else:\n                            print(2, end=' ')\n            else:\n                print(2)\n                for i in range(1, n + 1):\n                    if i != temp:\n                        print(1, end=' ')\n                    else:\n                        print(2, end=' ')", "__author__ = 'Ronald Kaiser'\n__email__ = 'raios dot catodicos at gmail dot com'\nfor _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    E = [set() for _ in range(N)]\n    D = [0 for _ in range(N)]\n    A = 0\n    for _ in range(M):\n        (u, v) = map(int, input().split())\n        E[u - 1].add(v - 1)\n        E[v - 1].add(u - 1)\n    odd_edge = []\n    for i in range(N):\n        D[i] = len(E[i])\n        A += D[i]\n        if D[i] & 1:\n            odd_edge.append(i)\n    if not A // 2 & 1:\n        print(1)\n        print(*[1 for _ in range(N)])\n        continue\n    P = []\n    if len(odd_edge):\n        P.append({odd_edge[0]: 1})\n        P2 = {}\n        for i in range(N):\n            if i != odd_edge[0]:\n                P2[i] = 2\n        P.append(P2)\n    else:\n        v = None\n        for i in range(N):\n            if len(E[i]) > 0:\n                (x, y) = (i, E[i].pop())\n                P.append({x: 1})\n                P.append({y: 2})\n                break\n        P3 = {}\n        for i in range(N):\n            if i != x and i != y:\n                P3[i] = 3\n        P.append(P3)\n    print(len(P))\n    for i in range(N):\n        for (p, j) in enumerate(P):\n            if i in j:\n                print(p + 1, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    degree = [0] * n\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        degree[u - 1] += 1\n        degree[v - 1] += 1\n    ans = 0\n    if m % 2 == 0:\n        ans = 1\n    else:\n        flag = 0\n        for i in range(n):\n            if degree[i] % 2 != 0:\n                flag = 1\n                temp = i\n                break\n        if flag == 1:\n            ans = 2\n        else:\n            ans = 3\n    if ans == 1:\n        print(1)\n        print('1 ' * n)\n    elif ans == 2:\n        print(2)\n        for i in range(n):\n            if i == temp:\n                print('2', end=' ')\n            else:\n                print('1', end=' ')\n        print()\n    else:\n        print(3)\n        for i in range(n):\n            if i == u - 1:\n                print(2, end=' ')\n            elif i == v - 1:\n                print(3, end=' ')\n            else:\n                print(1, end=' ')\n        print()", "t = int(input())\nfor i in range(t):\n    for j11 in range(500):\n        pass\n    (n, m) = map(int, input().split())\n    a = [0 for i in range(n)]\n    dic = {}\n    count = 0\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        a[x - 1] += 1\n        a[y - 1] += 1\n        if x - 1 in dic:\n            dic[x - 1].append(y - 1)\n        else:\n            dic[x - 1] = [y - 1]\n            count += 1\n        if y - 1 in dic:\n            dic[y - 1].append(x - 1)\n        else:\n            dic[y - 1] = [x - 1]\n            count += 1\n    for i in range(n):\n        if i in dic:\n            pass\n        else:\n            dic[i] = []\n    if m % 2 == 0:\n        print('1')\n        b = [1 for i in range(n)]\n        print(*b)\n    else:\n        b = []\n        k = 2\n        flag = 0\n        for i in a:\n            if i % 2 != 0 and flag == 0:\n                b.append(k)\n                flag = 1\n            else:\n                b.append(1)\n        if flag == 0:\n            for i in range(n):\n                if len(dic[i]) % 2 == 0 and len(dic[i]) > 1:\n                    b[i] = k\n                    k += 1\n                    break\n            b[dic[i][0]] = k\n        print(k)\n        print(*b)", "t = int(input())\nfor q in range(t):\n    (n, m) = map(int, input().split())\n    l = [0] * n\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        l[x - 1] += 1\n        l[y - 1] += 1\n    ans = [1] * n\n    if m & 1 == 1:\n        f = 0\n        for i in range(n):\n            if l[i] & 1 == 1:\n                ans[i] = 2\n                f = 1\n                break\n        if f == 1:\n            print(2)\n        else:\n            print(3)\n            ans[x - 1] = 2\n            ans[y - 1] = 3\n    else:\n        print(1)\n    print(*ans)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    deg = [int(0)] * (n + 1)\n    for k in range(m):\n        (u, v) = list(map(int, input().split()))\n        deg[u] = 1 - deg[u]\n        deg[v] = 1 - deg[v]\n    if m % 2 == 0:\n        print('1')\n        for j in range(n):\n            print('1', end=' ')\n        print()\n    elif max(deg) == 1:\n        print('2')\n        i = 1\n        while i <= n:\n            if deg[i] == 1:\n                j = 1\n                while j <= n:\n                    if j != i:\n                        print('1', end=' ')\n                    else:\n                        print('2', end=' ')\n                    j += 1\n                print()\n                break\n            i += 1\n    else:\n        print('3')\n        i = 1\n        while i <= n:\n            if i == u:\n                print('1', end=' ')\n            elif i == v:\n                print('2', end=' ')\n            else:\n                print('3', end=' ')\n            i += 1\n        print()", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, m) = [int(a) for a in input().split()]\n    graph = defaultdict(list)\n    new_graph = [1] * n\n    for i in range(m):\n        (u, v) = [int(a) for a in input().split()]\n        graph[u].append(v)\n        graph[v].append(u)\n    if m % 2 == 0:\n        print(1)\n        print(*new_graph)\n    else:\n        for i in graph:\n            if len(graph[i]) % 2 != 0:\n                new_graph[i - 1] += 1\n                print(2)\n                print(*new_graph)\n                break\n        else:\n            cnt = 1\n            for i in graph:\n                if len(graph[i]) % 2 == 0:\n                    new_graph[i - 1] += cnt\n                    cnt += 1\n                if cnt == 3:\n                    break\n            print(3)\n            print(*new_graph)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    ed = [0] * (n + 1)\n    sol = ['1'] * n\n    edge = []\n    tot = 0\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        edge.append((x, y))\n        ed[x] += 1\n        ed[y] += 1\n        tot += 1\n    if tot % 2 == 0:\n        print(1)\n        res = ' '.join(sol)\n        print(res)\n    else:\n        for i in range(1, n + 1):\n            if ed[i] % 2 != 0:\n                sol[i - 1] = '2'\n                break\n        else:\n            temp1 = edge.pop()\n            sol[temp1[0] - 1] = '2'\n            sol[temp1[1] - 1] = '3'\n            print(3)\n            res = ' '.join(sol)\n            print(res)\n            continue\n        print(2)\n        res = ' '.join(sol)\n        print(res)", "for step in range(int(input())):\n    (n, m) = map(int, input().split())\n    A = [0] * (n + 1)\n    for i in range(m - 1):\n        (u, v) = map(int, input().split())\n        A[u] += 1\n        A[v] += 1\n    (u, v) = map(int, input().split())\n    A[u] += 1\n    A[v] += 1\n    if m % 2 == 0:\n        print(1)\n        Ans = ''\n        for i in range(1, len(A)):\n            Ans += '1 '\n        print(Ans)\n    if m % 2 != 0:\n        flag = 0\n        for i in range(len(A)):\n            if A[i] % 2 != 0:\n                flag = 1\n                j = i\n                break\n        if flag == 1:\n            print(2)\n            Ans = ''\n            for i in range(1, len(A)):\n                if i == j:\n                    Ans += '2 '\n                else:\n                    Ans += '1 '\n            print(Ans)\n        if flag == 0:\n            print(3)\n            Ans = ''\n            for i in range(1, len(A)):\n                if i == u:\n                    Ans += '2 '\n                elif i == v:\n                    Ans += '3 '\n                else:\n                    Ans += '1 '\n            print(Ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    degree = [[] for i in range(n + 1)]\n    res = [1 for i in range(n + 1)]\n    for __ in range(m):\n        (u, v) = map(int, input().split())\n        degree[u].append(v)\n        degree[v].append(u)\n    if m % 2 != 0:\n        oddNode = -1\n        for i in range(1, n + 1):\n            if len(degree[i]) % 2 != 0:\n                print(2)\n                oddNode = i\n                res[i] = 2\n                break\n        if oddNode == -1:\n            print(3)\n            for i in range(1, n + 1):\n                if len(degree[i]) > 0:\n                    res[i] = 2\n                    res[degree[i][0]] = 3\n                    break\n    else:\n        print(1)\n    for i in range(1, n + 1):\n        print(res[i], end=' ')\n    print()", "for T in range(int(input())):\n    (vert, edges) = map(int, input().split())\n    degrees = {}\n    for i in range(edges):\n        (v1, v2) = map(int, input().split())\n        if v1 in degrees.keys():\n            degrees[v1].append(v2)\n        else:\n            degrees[v1] = [v2]\n        if v2 in degrees.keys():\n            degrees[v2].append(v1)\n        else:\n            degrees[v2] = [v1]\n    subGraphs = [1] * vert\n    if edges % 2 == 0:\n        print(1)\n        print(*subGraphs)\n    else:\n        even = True\n        for (key, values) in degrees.items():\n            if len(values) % 2 != 0:\n                subGraphs[key - 1] += 1\n                even = False\n                break\n        if even == False:\n            print(2)\n            print(*subGraphs)\n        else:\n            cnt = 1\n            for (key, values) in degrees.items():\n                if len(values) % 2 == 0:\n                    subGraphs[key - 1] += cnt\n                    cnt += 1\n                if cnt == 3:\n                    break\n            print(3)\n            print(*subGraphs)", "rr = lambda : input().strip()\nrri = lambda : int(rr())\nrrm = lambda : [int(x) for x in rr().split()]\n\ndef sol(n, m):\n    graph = dict()\n    for i in range(m):\n        (x, y) = rrm()\n        if x in graph:\n            graph[x].append(y)\n        else:\n            graph[x] = [y]\n        if y in graph:\n            graph[y].append(x)\n        else:\n            graph[y] = [x]\n    if m % 2 == 0:\n        print(1)\n        res = ''\n        for i in range(n):\n            res += '1 '\n        print(res[:-1])\n    else:\n        ev = True\n        for e in graph:\n            if len(graph[e]) % 2 != 0:\n                x = e\n                ev = False\n                break\n        if ev:\n            keys = list(graph.keys())\n            x = keys[0]\n            y = graph[x][0]\n            print(3)\n            res = ''\n            for i in range(1, n + 1):\n                if i == x:\n                    res += '2 '\n                elif i == y:\n                    res += '3 '\n                else:\n                    res += '1 '\n            print(res[:-1])\n        else:\n            print(2)\n            res = ''\n            for i in range(1, n + 1):\n                if i == x:\n                    res += '2 '\n                else:\n                    res += '1 '\n            print(res[:-1])\nT = rri()\nfor _ in range(T):\n    (n, m) = rrm()\n    ans = sol(n, m)", "rr = lambda : input().strip()\nrri = lambda : int(rr())\nrrm = lambda : [int(x) for x in rr().split()]\n\ndef sol(n, m):\n    graph = dict()\n    for i in range(m):\n        (x, y) = rrm()\n        if x in graph:\n            graph[x].append(y)\n        else:\n            graph[x] = [y]\n        if y in graph:\n            graph[y].append(x)\n        else:\n            graph[y] = [x]\n    if m % 2 == 0:\n        print(1)\n        res = [1] * n\n        print(*res)\n    else:\n        ev = True\n        for e in graph:\n            if len(graph[e]) % 2 != 0:\n                x = e\n                ev = False\n                break\n        if ev:\n            keys = list(graph.keys())\n            x = keys[0]\n            y = graph[x][0]\n            print(3)\n            res = [1] * n\n            res[x - 1] = 2\n            res[y - 1] = 3\n            print(*res)\n        else:\n            print(2)\n            res = [1] * n\n            res[x - 1] = 2\n            print(*res)\nT = rri()\nfor _ in range(T):\n    (n, m) = rrm()\n    ans = sol(n, m)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [0] * n\n    connect = []\n    arr1 = []\n    z = -1\n    for i in range(m):\n        (aa, bb) = map(int, input().split())\n        arr[aa - 1] += 1\n        arr[bb - 1] += 1\n        x = aa - 1\n        y = bb - 1\n    if m % 2 == 0:\n        print(1)\n        print(*[1] * n)\n    else:\n        for i in arr:\n            if i % 2 != 0:\n                z = arr.index(i)\n                break\n        if z != -1:\n            print(2)\n            for i in range(n):\n                arr1.append(1)\n            arr1[z] = 2\n            print(*arr1)\n        else:\n            print(3)\n            res = [3] * n\n            res[x] = 1\n            res[y] = 2\n            print(*res)", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(i) for i in input().split()]\n    indeg = [0 for i in range(n)]\n    for i in range(m):\n        (u, v) = [int(i) for i in input().split()]\n        indeg[u - 1] += 1\n        indeg[v - 1] += 1\n    if m % 2 == 0:\n        print(1)\n        out = '1'\n        for i in range(n - 1):\n            out = out + ' 1'\n        print(out)\n    else:\n        loop = 1\n        for i in range(n):\n            if indeg[i] % 2 == 1:\n                loop = 0\n                break\n        if loop == 0:\n            print(2)\n            for i in range(n):\n                if indeg[i] % 2 == 1:\n                    sec = i\n                    break\n            if sec == 0:\n                out = '2'\n                for i in range(n - 1):\n                    out = out + ' 1'\n                print(out)\n            else:\n                out = '1'\n                for i in range(1, sec):\n                    out = out + ' 1'\n                out = out + ' 2'\n                for i in range(sec + 1, n):\n                    out = out + ' 1'\n                print(out)\n        else:\n            print(3)\n            printtt = [1 for i in range(n)]\n            printtt[u - 1] = 2\n            printtt[v - 1] = 3\n            out = str(printtt[0])\n            for i in range(1, n):\n                out = out + ' ' + str(printtt[i])\n            print(out)", "for T in range(int(input())):\n    (vert, edges) = map(int, input().split())\n    degrees = {}\n    for i in range(edges):\n        (v1, v2) = map(int, input().split())\n        if v1 in degrees.keys():\n            degrees[v1].append(v2)\n        else:\n            degrees[v1] = [v2]\n        if v2 in degrees.keys():\n            degrees[v2].append(v1)\n        else:\n            degrees[v2] = [v1]\n    subGraphs = [1] * vert\n    if edges % 2 == 0:\n        print(1)\n        print(*subGraphs)\n    else:\n        even = True\n        for (key, values) in degrees.items():\n            if len(values) % 2 != 0:\n                subGraphs[key - 1] += 1\n                even = False\n                break\n        if even == False:\n            print(2)\n            print(*subGraphs)\n        else:\n            cnt = 1\n            for (key, values) in degrees.items():\n                if len(values) % 2 == 0:\n                    subGraphs[key - 1] += cnt\n                    cnt += 1\n                if cnt == 3:\n                    break\n            print(3)\n            print(*subGraphs)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = {}\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        if u in arr.keys():\n            arr[u].append(v)\n        else:\n            arr[u] = [v]\n        if v in arr.keys():\n            arr[v].append(u)\n        else:\n            arr[v] = [u]\n    ans = [1] * n\n    if m % 2 == 0:\n        print(1)\n        print(*ans)\n    else:\n        f = True\n        for (key, values) in arr.items():\n            if len(values) % 2 != 0:\n                ans[key - 1] += 1\n                f = False\n                break\n        if f == False:\n            print(2)\n            print(*ans)\n        else:\n            count = 1\n            for (key, values) in arr.items():\n                if count == 3:\n                    break\n                if len(values) % 2 == 0:\n                    ans[key - 1] += count\n                    count += 1\n            print(3)\n            print(*ans)", "test = int(input())\nfor i in range(test):\n    (num1, num2) = map(int, input().split())\n    arr = [0] * num1\n    connect = []\n    arr1 = []\n    z = -1\n    for i in range(num2):\n        (q, r) = map(int, input().split())\n        arr[q - 1] += 1\n        arr[r - 1] += 1\n        x = q - 1\n        y = r - 1\n    if num2 % 2 == 0:\n        print(1)\n        print(*[1] * num1)\n    else:\n        for i in arr:\n            if i % 2 != 0:\n                z = arr.index(i)\n                break\n        if z != -1:\n            print(2)\n            for i in range(num1):\n                arr1.append(1)\n            arr1[z] = 2\n            print(*arr1)\n        else:\n            print(3)\n            res = [3] * num1\n            res[x] = 1\n            res[y] = 2\n            print(*res)", "Total_number_of_testcases = input()\nTotal_number_of_testcases = int(Total_number_of_testcases)\nfor a_testcase in range(Total_number_of_testcases):\n    specified_input = input().split()\n    track_of_edges = {}\n    for items in specified_input:\n        specified_input_1 = int(specified_input[0])\n        specified_input_2 = int(specified_input[1])\n    for specifier in range(specified_input_2):\n        specified_input = input().split()\n        for items in specified_input:\n            specified_input_3 = int(specified_input[0])\n            specified_input_4 = int(specified_input[1])\n        if track_of_edges.get(specified_input_3) != None:\n            track_of_edges[specified_input_3][0] += 1\n            track_of_edges[specified_input_3].append(specified_input_4)\n        elif track_of_edges.get(specified_input_3) == None:\n            track_of_edges[specified_input_3] = [1, specified_input_4]\n        else:\n            pass\n        if track_of_edges.get(specified_input_4) == None:\n            track_of_edges[specified_input_4] = [1, specified_input_3]\n        elif track_of_edges.get(specified_input_4) != None:\n            track_of_edges[specified_input_4][0] += 1\n            track_of_edges[specified_input_4].append(specified_input_3)\n        else:\n            pass\n    intermediate = True\n    for index_element in track_of_edges.keys():\n        if track_of_edges[index_element][0] % 2 == 1:\n            intermediate = False\n        else:\n            pass\n    if specified_input_2 % 2 == 1:\n        if intermediate == True:\n            print(3)\n            tracker_element = 1\n            while track_of_edges.get(tracker_element) == None:\n                print(1, end=' ')\n                tracker_element += 1\n            specified_input_2 -= track_of_edges[tracker_element][0]\n            for check_element in range(1, len(track_of_edges[tracker_element])):\n                track_of_edges[track_of_edges[tracker_element][check_element]][0] -= 1\n            print(1, end=' ')\n            tracker_element = tracker_element + 1\n            track_element = True\n            for element_in_tracker in range(tracker_element, specified_input_1 + 1):\n                if track_of_edges.get(element_in_tracker) == None:\n                    print(1, end=' ')\n                elif (specified_input_2 - track_of_edges[element_in_tracker][0]) % 2 == 0:\n                    if track_element:\n                        print(2, end=' ')\n                        track_element = False\n                    else:\n                        print(3, end=' ')\n                else:\n                    print(3, end=' ')\n        else:\n            print(2)\n            track_element_1 = True\n            for element_in_specified in range(1, specified_input_1 + 1):\n                if track_of_edges.get(element_in_specified) == None:\n                    print(2, end=' ')\n                elif track_of_edges[element_in_specified][0] % 2 == 0:\n                    print(1, end=' ')\n                elif track_element_1:\n                    print(2, end=' ')\n                    track_element_1 = False\n                else:\n                    print(1, end=' ')\n    else:\n        print(1)\n        for iterator in range(1, specified_input_1 + 1):\n            print(1, end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().strip().split())\n    l = [[0] for j in range(n + 1)]\n    for j in range(m):\n        a = list(map(int, input().strip().split()))\n        l[a[0]].append(a[1])\n        l[a[1]].append(a[0])\n    if m % 2 == 0:\n        ans = [1 for k in range(n)]\n        print(1)\n        print(*ans)\n    else:\n        p = 0\n        for k in range(1, n + 1):\n            if (len(l[k]) - 1) % 2 != 0:\n                p = k\n                break\n        if p > 0:\n            print(2)\n            hh = []\n            for qw in range(1, n + 1):\n                if qw == p:\n                    hh.append(2)\n                else:\n                    hh.append(1)\n            print(*hh)\n        else:\n            q = 0\n            print(3)\n            for qa in range(1, n + 1):\n                if len(l[qa]) >= 2:\n                    p = qa\n                    q = l[qa][1]\n                    break\n            hh1 = []\n            for po in range(1, n + 1):\n                if po == p:\n                    hh1.append(2)\n                elif po == q:\n                    hh1.append(3)\n                else:\n                    hh1.append(1)\n            print(*hh1)", "T = int(input())\nwhile T:\n    T -= 1\n    u = 0\n    v = 0\n    (n, m) = [int(i) for i in input().split()]\n    a = [0] * (n + 1)\n    for i in range(m):\n        (u, v) = [int(i) for i in input().split()]\n        a[u] += 1\n        a[v] += 1\n    if m & 1:\n        b = 0\n        val = -1\n        for i in range(n):\n            if a[i + 1] & 1:\n                b = 1\n                val = i\n                break\n        if b:\n            print(2)\n            for i in range(n):\n                if i == val:\n                    print(2, end=' ')\n                else:\n                    print(1, end=' ')\n            print()\n        else:\n            print(3)\n            for i in range(n):\n                if i == u - 1:\n                    print(2, end=' ')\n                elif i == v - 1:\n                    print(3, end=' ')\n                else:\n                    print(1, end=' ')\n            print()\n    else:\n        print(1)\n        for i in range(n):\n            print(1, end=' ')\n        print()", "try:\n    t = int(input())\n    for _ in range(t):\n        (N, M) = map(int, input().split())\n        m = 1\n        A = []\n        B = []\n        for i in range(0, N + 1):\n            A.append(0)\n            B.append(1)\n        (u, v) = map(int, input().split())\n        X = u\n        Y = v\n        A[u] += 1\n        A[v] += 1\n        for i in range(2, M + 1):\n            (u, v) = map(int, input().split())\n            A[u] += 1\n            A[v] += 1\n        if M % 2 != 0:\n            f = 0\n            g = 0\n            for i in range(1, N + 1):\n                if A[i] != 0:\n                    if A[i] % 2 != 0:\n                        f += 1\n                        g = i\n                        break\n            if f > 0:\n                B[g] = 2\n                m = 2\n            else:\n                B[X] = 2\n                B[Y] = 3\n                m = 3\n        print(m)\n        for i in range(1, N + 1):\n            print(B[i], end=' ')\nexcept:\n    pass", "t = int(input())\nfor o in range(t):\n    (nodes, edges) = list(map(int, input().split()))\n    degree = [0] * (nodes + 1)\n    graph = {}\n    for i in range(1, nodes + 1):\n        graph[i] = []\n    edgs = 0\n    temp1 = -1\n    temp2 = -1\n    for i in range(edges):\n        (x, y) = list(map(int, input().split()))\n        if y in graph[x]:\n            continue\n        edgs = edgs + 1\n        temp1 = x\n        temp2 = y\n        degree[x] = degree[x] + 1\n        degree[y] = degree[y] + 1\n        graph[x].append(y)\n        graph[y].append(x)\n    if edgs % 2 == 0:\n        print(1)\n        print(*[1] * nodes)\n        continue\n    even = 0\n    odd = 0\n    oddarr = []\n    evenarr = []\n    ans = [1] * (nodes + 1)\n    for i in range(1, nodes + 1):\n        if degree[i] == 0:\n            continue\n        if degree[i] % 2 == 0:\n            even = even + 1\n            evenarr.append(i)\n        else:\n            odd = odd + 1\n            oddarr.append(i)\n    if odd == 0:\n        print(3)\n        ans[temp1] = 2\n        ans[temp2] = 3\n    else:\n        print(2)\n        ans[oddarr[0]] = 2\n    print(*ans[1:])", "import itertools as itt\nfrom sys import stdin, stdout\nfrom functools import reduce\nfrom collections import Counter as co\nMOD = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    arr = [0] * N\n    ex = 0\n    ey = 0\n    for i in range(M):\n        (x, y) = map(int, input().split())\n        arr[x - 1] += 1\n        arr[y - 1] += 1\n        ex = x - 1\n        ey = y - 1\n    if M % 2 == 0:\n        print('1')\n        for i in range(N):\n            print('1 ', end='')\n        print()\n    else:\n        flag = -1\n        for i in range(N):\n            if arr[i] % 2 != 0:\n                flag = i\n                break\n        if flag != -1:\n            print('2')\n            for i in range(N):\n                if i == flag:\n                    print('2 ', end='')\n                else:\n                    print('1 ', end='')\n            print()\n        else:\n            print('3')\n            for i in range(N):\n                if i == ex:\n                    print('2 ', end='')\n                elif i == ey:\n                    print('3 ', end='')\n                else:\n                    print('1 ', end='')\n            print()", "from collections import defaultdict\n\ndef solve(G, Num_Ver, Num_Edge):\n    G1 = G\n    ans = [1] * Num_Ver\n    if Num_Edge % 2 == 0:\n        return (1, ans)\n    for vert in G:\n        if len(G[vert]) % 2:\n            ans[vert] = 2\n            return (2, ans)\n    for i in G:\n        if len(G[i]) != 0:\n            ans[i] = 2\n            ans[G1[i].pop()] = 3\n            return (3, ans)\nfor _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    deg = defaultdict(set)\n    for _ in range(M):\n        (u, v) = map(int, input().split())\n        deg[u - 1].add(v - 1)\n        deg[v - 1].add(u - 1)\n    ans1 = solve(deg, N, M)\n    print(ans1[0])\n    print(*ans1[1])", "for k in range(int(input())):\n    (n, M) = map(int, input().split())\n    arr = [0] * n\n    arr1 = []\n    z = -1111\n    for i in range(M):\n        (U, V) = map(int, input().split())\n        y = V - 1\n        x = U - 1\n        arr[V - 1] += 1\n        arr[U - 1] += 1\n    if M % 2 == 0:\n        print(1)\n        print(*[1] * n)\n    else:\n        for i in arr:\n            if i % 2 != 0:\n                z = arr.index(i)\n                break\n        if z != -1111:\n            print(2)\n            for i in range(n):\n                arr1.append(1)\n            arr1[z] = 2\n            print(*arr1)\n        else:\n            print(3)\n            result = [3] * n\n            result[x] = 1\n            result[y] = 2\n            print(*result)", "import itertools as itt\nfrom sys import stdin, stdout\nfrom functools import reduce\nfrom collections import Counter as co\nMOD = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    arr = [0] * N\n    ex = 0\n    ey = 0\n    for i in range(M):\n        (x, y) = map(int, input().split())\n        arr[x - 1] += 1\n        arr[y - 1] += 1\n        ex = x - 1\n        ey = y - 1\n    if M % 2 == 0:\n        print('1')\n        for i in range(N):\n            print('1 ', end='')\n        print()\n    else:\n        flag = -1\n        for i in range(N):\n            if arr[i] % 2 != 0:\n                flag = i\n                break\n        if flag != -1:\n            print('2')\n            for i in range(N):\n                if i == flag:\n                    print('2 ', end='')\n                else:\n                    print('1 ', end='')\n            print()\n        else:\n            print('3')\n            for i in range(N):\n                if i == ex:\n                    print('2 ', end='')\n                elif i == ey:\n                    print('3 ', end='')\n                else:\n                    print('1 ', end='')\n            print()", "t = int(input())\nfor u in range(t):\n    (n, m) = map(int, input().split())\n    a = [0 for i in range(n)]\n    dic = {}\n    count = 0\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        a[x - 1] += 1\n        a[y - 1] += 1\n        if x - 1 in dic:\n            dic[x - 1].append(y - 1)\n        else:\n            dic[x - 1] = [y - 1]\n            count += 1\n        if y - 1 in dic:\n            dic[y - 1].append(x - 1)\n        else:\n            dic[y - 1] = [x - 1]\n            count += 1\n    for i in range(n):\n        if i in dic:\n            pass\n        else:\n            dic[i] = []\n    if m % 2 == 0:\n        print('1')\n        b = [1 for i in range(n)]\n        print(*b)\n    else:\n        b = []\n        k = 2\n        flag = 0\n        for i in a:\n            if i % 2 != 0 and flag == 0:\n                b.append(k)\n                flag = 1\n            else:\n                b.append(1)\n        if flag == 0:\n            for i in range(n):\n                if len(dic[i]) % 2 == 0 and len(dic[i]) > 1:\n                    b[i] = k\n                    k += 1\n                    break\n            b[dic[i][0]] = k\n        print(k)\n        print(*b)", "t = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    rl = []\n    cl = []\n    rl1 = []\n    cl1 = []\n    hl = [0] * n\n    for i in range(0, m):\n        (x, y) = map(int, input().split())\n        hl[x - 1] = hl[x - 1] + 1\n        hl[y - 1] = hl[y - 1] + 1\n        hh1 = x\n        hh2 = y\n    if m % 2 == 0:\n        print('1')\n        for i in range(0, n):\n            print('1 ', end='')\n        print()\n    else:\n        for nn in hl:\n            if nn % 2 == 0:\n                flag = 3\n            else:\n                flag = 2\n                break\n        if flag == 2:\n            print('2')\n            oddflag = 0\n            for jj in hl:\n                if jj % 2 != 0 and oddflag == 0:\n                    print('2 ', end='')\n                    oddflag = 1\n                elif jj == 0:\n                    print('2 ', end='')\n                else:\n                    print('1 ', end='')\n            print()\n        else:\n            print('3')\n            for jj in range(0, n):\n                if jj + 1 == hh1:\n                    print('2 ', end='')\n                elif jj + 1 == hh2:\n                    print('3 ', end='')\n                else:\n                    print('1 ', end='')\n            print()\n    t = t - 1", "t = int(input())\nwhile t > 0:\n    (n, m) = [int(x) for x in input().split()]\n    li = [[] for i in range(n + 1)]\n    for i in range(0, m):\n        (k, l) = [int(x) for x in input().split()]\n        li[k].append(l)\n        li[l].append(k)\n    if m % 2 == 0:\n        print(1)\n        for i in range(1, n + 1):\n            print(1, end=' ')\n    else:\n        mini1 = 1000000000000\n        mini2 = 1000000000000\n        k1 = 0\n        k2 = 0\n        for i in range(1, n + 1):\n            if len(li[i]) % 2 != 0 and len(li[i]) < mini1:\n                k1 = i\n                mini1 = len(li[i])\n            elif len(li[i]) % 2 == 0 and len(li[i]) < mini2 and (len(li[i]) > 0):\n                k2 = i\n                mini2 = len(li[i])\n        if mini1 != 1000000000000:\n            print(2)\n            for i in range(1, n + 1):\n                if i == k1:\n                    print(1, end=' ')\n                else:\n                    print(2, end=' ')\n        else:\n            print(3)\n            for i in range(1, n + 1):\n                if i == k2:\n                    print(2, end=' ')\n                elif i == li[k2][0]:\n                    print(1, end=' ')\n                else:\n                    print(3, end=' ')\n    t = t - 1", "t = int(input())\nfor _ in range(t):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    sol = [1] * n\n    if m % 2 == 0:\n        for _ in range(m):\n            (u, v) = input().split()\n        print(1)\n        print(*sol)\n    else:\n        graph = dict()\n        edges = set()\n        for _ in range(m):\n            (u, v) = input().split()\n            u = int(u)\n            v = int(v)\n            if u in edges:\n                edges.remove(u)\n            else:\n                edges.add(u)\n            if v in edges:\n                edges.remove(v)\n            else:\n                edges.add(v)\n            if u in graph:\n                graph[u].add(v)\n            else:\n                graph[u] = set([v])\n            if v in graph:\n                graph[v].add(u)\n            else:\n                graph[v] = set([u])\n        if len(edges) != 0:\n            print(2)\n            sol[edges.pop() - 1] = 2\n            print(*sol)\n        else:\n            all_keys = list(graph.keys())\n            k1 = all_keys[0]\n            sol[k1 - 1] = 3\n            k2 = list(graph[k1])\n            sol[k2[0] - 1] = 2\n            print(3)\n            print(*sol)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        U = u\n        V = v\n        arr.append(u)\n        arr.append(v)\n    di = {}\n    for i in range(len(arr)):\n        if arr[i] in di.keys():\n            di[arr[i]] = di[arr[i]] + 1\n        else:\n            di[arr[i]] = 1\n    if m % 2 == 0:\n        print(1)\n        for i in range(1, n + 1):\n            print(1, end=' ')\n        print('')\n    else:\n        count = count2 = cof2 = 0\n        for item in di.items():\n            if item[1] % 2 == 0:\n                count = count + 1\n            count2 = count2 + 1\n            if item[1] == 2:\n                cof2 = cof2 + 1\n        if cof2 == count2:\n            print(3)\n            for i in range(1, n + 1):\n                if i == U:\n                    print(1, end=' ')\n                elif i == V:\n                    print(2, end=' ')\n                else:\n                    print(3, end=' ')\n            print('')\n        elif count == count2:\n            print(3)\n            for item in di.items():\n                if item[1] % 2 == 0:\n                    ans1 = item[0]\n                    ans2 = item[1]\n                    break\n            for i in range(1, n + 1):\n                if i == U:\n                    print(1, end=' ')\n                elif i == V:\n                    print(2, end=' ')\n                else:\n                    print(3, end=' ')\n            print('')\n        else:\n            print(2)\n            for item in di.items():\n                if item[1] % 2 == 1:\n                    ans = item[0]\n                    break\n            for i in range(1, n + 1):\n                if i == ans:\n                    print(1, end=' ')\n                else:\n                    print(2, end=' ')\n            print('')", "test_cases = int(input())\nfor given_testcases in range(test_cases):\n    adj_list = {}\n    (number_of_vertices, number_of_edges) = input().split()\n    number_of_vertices = int(number_of_vertices)\n    number_of_edges = int(number_of_edges)\n    for given_edges in range(number_of_edges):\n        (left_node, right_node) = input().split()\n        left_node = int(left_node)\n        right_node = int(right_node)\n        if adj_list.get(left_node) != None:\n            adj_list[left_node][0] = adj_list[left_node][0] + 1\n            adj_list[left_node].append(right_node)\n        else:\n            adj_list[left_node] = [1, right_node]\n        if adj_list.get(right_node) != None:\n            adj_list[right_node][0] = adj_list[right_node][0] + 1\n            adj_list[right_node].append(left_node)\n        else:\n            adj_list[right_node] = [1, left_node]\n    check_child = False\n    for iterating_over_keys in adj_list.keys():\n        if adj_list[iterating_over_keys][0] % 2 != 1:\n            pass\n        else:\n            check_child = True\n    if number_of_edges % 2 == 1:\n        if check_child == False:\n            print(3)\n            current_node_position = 1\n            while adj_list.get(current_node_position) == None:\n                print(1, end=' ')\n                current_node_position += 1\n            number_of_edges = number_of_edges - adj_list[current_node_position][0]\n            pass_first_iteration = True\n            for item in adj_list[current_node_position]:\n                if pass_first_iteration == True:\n                    pass_first_iteration = False\n                    continue\n                adj_list[item][0] -= 1\n            print(1, end=' ')\n            current_node_position += 1\n            check_node = False\n            for value in range(current_node_position, number_of_vertices + 1):\n                if adj_list.get(value) == None:\n                    print(1, end=' ')\n                elif (number_of_edges - adj_list[value][0]) % 2 == 0:\n                    if check_node == False:\n                        print(2, end=' ')\n                        check_node = True\n                    else:\n                        print(3, end=' ')\n                else:\n                    print(3, end=' ')\n        else:\n            print(2)\n            to_check_the_first_odd_degree_node = True\n            for iterations in range(1, number_of_vertices + 1):\n                if adj_list.get(iterations) == None:\n                    print(2, end=' ')\n                elif adj_list[iterations][0] % 2 == 0:\n                    print(1, end=' ')\n                elif to_check_the_first_odd_degree_node == False:\n                    print(1, end=' ')\n                else:\n                    print(2, end=' ')\n                    to_check_the_first_odd_degree_node = False\n    else:\n        print(1)\n        for printing_iterations in range(1, number_of_vertices + 1):\n            print(1, end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    li = []\n    c = [0] * n\n    tem = -1\n    final = [1] * n\n    for j in range(m):\n        a = input().split()\n        li.append([int(a[0]), int(a[1])])\n        c[int(a[0]) - 1] += 1\n        c[int(a[1]) - 1] += 1\n    if m % 2 == 0:\n        print(1)\n        print(' '.join((str(j) for j in final)))\n        continue\n    for j in range(n):\n        if c[j] % 2 != 0:\n            tem = j\n            break\n    if tem == -1:\n        final[li[0][0] - 1] = 2\n        final[li[0][1] - 1] = 3\n    else:\n        final[tem] = 2\n    print(max(final))\n    print(' '.join((str(j) for j in final)))", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    array = [0] * n\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        (a, b) = list(map(int, input().split()))\n        array[a - 1] += 1\n        array[b - 1] += 1\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    flag = True\n    for i in array:\n        if i % 2 != 0:\n            flag = False\n            break\n    if m % 2 == 0:\n        print(1)\n        print(' '.join(['1' for _ in range(n)]))\n    elif flag == True:\n        this = ['1' for _ in range(n)]\n        for j in range(len(array)):\n            if len(graph[j]) > 0:\n                this[j] = '2'\n                this[graph[j][0]] = '3'\n                break\n        print(3)\n        print(' '.join(this))\n    else:\n        if array[0] % 2 != 0:\n            this = ['2' for _ in range(n)]\n            this[0] = '1'\n        else:\n            this = ['1' for _ in range(n)]\n            for i in range(n):\n                if array[i] % 2 != 0:\n                    this[i] = '2'\n                    break\n        print(2)\n        print(' '.join(this))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    gph = [[] for i in range(n + 1)]\n    cnt = [0 for i in range(n + 1)]\n    for __ in range(m):\n        (a, b) = map(int, input().split(' '))\n        gph[a].append(b)\n        gph[b].append(a)\n        cnt[a] += 1\n        cnt[b] += 1\n    if m % 2 == 0:\n        print(1)\n        ans = [1 for i in range(n)]\n        print(*ans)\n        continue\n    odd = False\n    odi = -1\n    for (i, c) in enumerate(cnt):\n        if c % 2 == 1:\n            odd = True\n            odi = i\n    if odd:\n        print(2)\n        for i in range(1, n + 1):\n            if i == odi:\n                print(2, end=' ')\n            else:\n                print(1, end=' ')\n    else:\n        print(3)\n        for (i, g) in enumerate(gph):\n            if len(g) > 0:\n                a = i\n                b = g[0]\n                break\n        for i in range(1, n + 1):\n            if i == a:\n                print(3, end=' ')\n            elif i == b:\n                print(2, end=' ')\n            else:\n                print(1, end=' ')\n    print()", "for T in range(int(input())):\n    (vertices, edges) = map(int, input().split())\n    d = {}\n    for i in range(edges):\n        (node, neighbor) = map(int, input().split())\n        if node in d.keys():\n            d[node].append(neighbor)\n        else:\n            d[node] = [neighbor]\n        if neighbor in d.keys():\n            d[neighbor].append(node)\n        else:\n            d[neighbor] = [node]\n    ans = [1] * vertices\n    if edges % 2 == 0:\n        print(1)\n        print(*ans)\n    else:\n        flag = True\n        for (key, values) in d.items():\n            if len(values) % 2 != 0:\n                ans[key - 1] += 1\n                flag = False\n                break\n        if flag == False:\n            print(2)\n            print(*ans)\n        else:\n            count = 1\n            for (key, values) in d.items():\n                if count == 3:\n                    break\n                if len(values) % 2 == 0:\n                    ans[key - 1] += count\n                    count += 1\n            print(3)\n            print(*ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    u = []\n    v = []\n    freq = [0] * n\n    for i in range(m):\n        (x, y) = map(int, input().split())\n        u.append(x)\n        v.append(y)\n        freq[x - 1] += 1\n        freq[y - 1] += 1\n    flag = 0\n    ans = [1] * n\n    for i in range(len(freq)):\n        if freq[i] % 2 == 1:\n            temp = i\n            flag = 1\n            break\n    if m % 2 == 0:\n        print(1)\n        print(' '.join(list(map(str, ans))))\n    elif flag == 0:\n        ans[u[0] - 1] = 2\n        ans[v[0] - 1] = 3\n        print(3)\n        print(' '.join(list(map(str, ans))))\n    else:\n        ans[i] = 2\n        print(2)\n        print(' '.join(list(map(str, ans))))", "for T in range(int(input())):\n    (vertices, edges) = map(int, input().split())\n    d = {}\n    for i in range(edges):\n        (node, neighbor) = map(int, input().split())\n        if node in d.keys():\n            d[node].append(neighbor)\n        else:\n            d[node] = [neighbor]\n        if neighbor in d.keys():\n            d[neighbor].append(node)\n        else:\n            d[neighbor] = [node]\n    ans = [1] * vertices\n    if edges % 2 == 0:\n        print(1)\n        print(*ans)\n    else:\n        flag = True\n        for (key, values) in d.items():\n            if len(values) % 2 != 0:\n                ans[key - 1] += 1\n                flag = False\n                break\n        if flag == False:\n            print(2)\n            print(*ans)\n        else:\n            count = 1\n            for (key, values) in d.items():\n                if count == 3:\n                    break\n                if len(values) % 2 == 0:\n                    ans[key - 1] += count\n                    count += 1\n            print(3)\n            print(*ans)", "t = int(input())\nfor i in range(t):\n    d = []\n    l = []\n    (n, m) = map(int, input().split())\n    for j in range(m):\n        (x, y) = map(int, input().split())\n        l.append(x)\n        l.append(y)\n    for j in range(n):\n        d.append(0)\n    for j in range(len(l)):\n        d[l[j] - 1] = d[l[j] - 1] + 1\n    for j in range(len(d)):\n        d[j] = d[j] % 2\n    countz = d.count(0)\n    if m % 2 == 0:\n        print(1)\n        for j in range(n):\n            print(1, end=' ')\n        print()\n    elif countz == len(d):\n        print(3)\n        for j in range(n):\n            if j == x - 1:\n                print(2, end=' ')\n            elif j == y - 1:\n                print(3, end=' ')\n            else:\n                print(1, end=' ')\n        print()\n    else:\n        print(2)\n        for j in range(len(d)):\n            if d[j] == 1:\n                pos = j\n                break\n        for j in range(n):\n            if j == pos:\n                print(2, end=' ')\n            else:\n                print(1, end=' ')\n        print()", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = map(int, input().split())\n    res = [1 for x in range(n + 1)]\n    k = 1\n    d = {}\n    a = [0 for x in range(n + 1)]\n    for i in range(1, n + 1):\n        d[i] = []\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        d[u].append(v)\n        a[u] += 1\n        d[v].append(u)\n        a[v] += 1\n    if m & 1:\n        k2 = 2\n        while k2 <= n:\n            f = 0\n            for i in range(1, n + 1):\n                if a[i] & 1:\n                    res[i] = k2\n                    f = 1\n                    break\n            if f:\n                break\n            min_i = n\n            min_j = 0\n            for i in range(1, n + 1):\n                if a[i] and a[i] < min_i:\n                    min_i = a[i]\n                    min_j = i\n            for j in d[min_j]:\n                d[j].remove(min_j)\n                a[j] -= 1\n            d[min_j] = []\n            a[min_j] = 0\n            res[min_j] = k2\n            k2 += 1\n        k = k2\n    print(k)\n    for i in range(1, n + 1):\n        print(res[i], end=' ')", "import sys\nif 'PyPy' in sys.version:\n    from _continuation import continulet\nelse:\n    import threading\n\ndef dfs(node, vis, deg, grp, oddnode):\n    if vis[node]:\n        return\n    vis[node] = True\n    if deg[node] % 2 == 1:\n        oddnode.append(node)\n    for everyVertex in grp[node]:\n        if not vis[everyVertex]:\n            dfs(everyVertex, vis, deg, grp, oddnode)\n\ndef main():\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split(' '))\n        grp = []\n        for i in range(n + 1):\n            li = []\n            grp.append(li)\n        (arr, s, deg, vis, oddnode) = ([1] * (n + 1), [1], [0] * (n + 1), [False] * (n + 1), [])\n        for i in range(m):\n            (p, q) = map(int, input().split(' '))\n            grp[p].append(q)\n            grp[q].append(p)\n            deg[p] += 1\n            deg[q] += 1\n        for i in range(1, n + 1):\n            if not vis[i]:\n                dfs(i, vis, deg, grp, oddnode)\n        totalEdgeCount = sum(deg) // 2\n        if totalEdgeCount % 2 == 1:\n            if oddnode:\n                s.append(2)\n                arr[oddnode[0]] = 2\n            else:\n                s.append(2)\n                s.append(3)\n                for i in range(1, n + 1):\n                    if len(grp[i]):\n                        arr[i] = 2\n                        arr[grp[i][0]] = 3\n                        break\n        print(len(s))\n        print(*arr[1:])\nif 'PyPy' in sys.version:\n\n    def bootstrap(cont):\n        (call, arg) = cont.switch()\n        while True:\n            (call, arg) = cont.switch(to=continulet(lambda _, f, args: f(*args), call, arg))\n    cont = continulet(bootstrap)\n    cont.switch()\n    main()\nelse:\n    sys.setrecursionlimit(1 << 30)\n    threading.stack_size(1 << 27)\n    main_thread = threading.Thread(target=main)\n    main_thread.start()\n    main_thread.join()", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    V = [[] for j in range(n + 1)]\n    arr = []\n    ans2 = [0 for j in range(n + 1)]\n    ans = [1 for j in range(n + 1)]\n    for j in range(m):\n        (a, b) = map(int, input().split())\n        l = [a, b]\n        V[a].append(b)\n        arr.append(a)\n        arr.append(b)\n        ans2[a] += 1\n        ans2[b] += 1\n    flag = 0\n    if m % 2 == 0:\n        print('1')\n        for j in range(n):\n            print('1', end=' ')\n    elif m % 2 == 1:\n        for j in range(1, n + 1):\n            if ans2[j] % 2 != 0:\n                ans[j] = 2\n                flag = 1\n                break\n        if flag == 1:\n            print('2')\n            for j in range(1, n + 1):\n                print(ans[j], end=' ')\n        else:\n            for j in range(1, n + 1):\n                if len(V[j]) != 0:\n                    ans[j] = 2\n                    ans[V[j][0]] = 3\n                    break\n            print('3')\n            for j in range(1, n + 1):\n                print(ans[j], end=' ')", "t = int(input())\nfor j in range(t):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    li1 = []\n    temp = 0\n    if m % 2 == 0:\n        st = ''\n        for u in range(m):\n            (x, y) = input().split()\n        for o in range(n):\n            st = st + '1 '\n        print('1')\n        print(st)\n    else:\n        st = ''\n        li2 = [0] * n\n        for p in range(m):\n            (x, y) = input().split()\n            x = int(x)\n            y = int(y)\n            li2[x - 1] = li2[x - 1] + 1\n            li2[y - 1] = li2[y - 1] + 1\n            li1.append([x, y])\n        fl = 0\n        for k in range(n):\n            if li2[k] % 2 == 1 and fl == 0:\n                st = st + '1 '\n                fl = 1\n            else:\n                st = st + '2 '\n        if fl == 1:\n            print('2')\n            print(st)\n        else:\n            li_final = [0] * n\n            for i in range(n):\n                if li2[i] == 0:\n                    li_final[i] = 1\n                else:\n                    li_final[i] = 3\n            li_final[li1[0][1] - 1] = 2\n            li_final[li1[0][0] - 1] = 1\n            s = ''\n            for i in range(n):\n                s = s + str(li_final[i]) + ' '\n            print('3')\n            print(s)", "try:\n    t = int(input())\n    for i in range(t):\n        (n, m) = map(int, input().split())\n        l = [0] * n\n        for j in range(m):\n            (o, p) = map(int, input().split())\n            l[o - 1] = l[o - 1] + 1\n            l[p - 1] = l[p - 1] + 1\n        if m % 2 == 0:\n            print(1)\n            print('1 ' * n)\n        else:\n            flag = 0\n            jj = 0\n            for j in range(n):\n                if l[j] % 2 != 0:\n                    flag = 1\n                    jj = j + 1\n                    break\n            if flag == 0:\n                print(3)\n                for j in range(n):\n                    if j == o - 1:\n                        l[j] = 2\n                    elif j == p - 1:\n                        l[j] = 3\n                    else:\n                        l[j] = 1\n                print(' '.join(map(str, l)))\n            else:\n                b = []\n                print(2)\n                b = [1] * (jj - 1) + [2] + [1] * (n - jj)\n                print(' '.join(map(str, b)))\nexcept:\n    pass", "t = int(input())\nwhile t != 0:\n    x = input()\n    l = list(map(int, x.split(' ')))\n    n = l[0]\n    e = l[1]\n    li = [0] * n\n    flag = 0\n    brek = 0\n    for i in range(0, e):\n        k = list(map(int, input().split(' ')))\n        v1 = k[0] - 1\n        v2 = k[1] - 1\n        li[v1] += 1\n        li[v2] += 1\n    if e % 2 == 0:\n        print('1')\n        print('1 ' * n)\n    else:\n        for i in range(0, n):\n            if li[i] % 2 != 0:\n                print('2')\n                print('1 ' * i, end='')\n                brek = i\n                print('2', end=' ')\n                print('1 ' * (n - i - 1), end=' ')\n                flag = 0\n                break\n            else:\n                flag = 1\n        if flag == 1:\n            print('3')\n            for i in range(0, n):\n                if i == v1:\n                    print('2', end=' ')\n                elif i == v2:\n                    print('3', end=' ')\n                else:\n                    print('1', end=' ')\n    t = t - 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    f = {}\n    temp = []\n    s = set()\n    for i in range(1, n + 1):\n        f[i] = 0\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        temp = [a, b]\n        f[a] += 1\n        f[b] += 1\n    if m % 2 == 0:\n        print(1)\n        print(*[1 for i in range(n)])\n    else:\n        flag = 0\n        cur = 0\n        for i in f:\n            if f[i] % 2:\n                flag = 1\n                cur = i\n                break\n        if flag:\n            print(2)\n            for i in range(1, n + 1):\n                if i == cur:\n                    print(2, end=' ')\n                else:\n                    print(1, end=' ')\n        else:\n            print(3)\n            for i in range(1, n + 1):\n                if i == temp[0]:\n                    print(2, end=' ')\n                elif i == temp[1]:\n                    print(3, end=' ')\n                else:\n                    print(1, end=' ')\n        print()", "from collections import defaultdict\nt = int(input())\nwhile t != 0:\n    t = t - 1\n    h = 0\n    (n, m) = list(map(int, input().split()))\n    d1 = defaultdict(lambda : h)\n    q = list()\n    c = -1\n    f1 = 0\n    p = list()\n    z = list()\n    for o in range(0, m):\n        (a1, b1) = list(map(int, input().split()))\n        p.append([a1, b1])\n        d1[a1] = d1[a1] + 1\n        d1[b1] = d1[b1] + 1\n    if m % 2 == 0:\n        f1 = 1\n        q = [1] * n\n        print(1)\n        for i in q:\n            print(i, end=' ')\n        continue\n    else:\n        for i in range(1, n + 1):\n            if d1[i] % 2 == 1:\n                c = i\n                break\n        if c != -1:\n            f1 = 1\n            z = [1] * n\n            z[c - 1] = 2\n            print(2)\n            for i in z:\n                print(i, end=' ')\n        if f1 == 0:\n            for i in range(1, n + 1):\n                if d1[i] % 2 == 0 and d1[i] > 0:\n                    c1 = i\n                    for (t1, y1) in p:\n                        if t1 == c1:\n                            c2 = y1\n                            break\n                        if y1 == c1:\n                            c2 = t1\n                            break\n                    break\n            z = [1] * n\n            z[c1 - 1] = 2\n            z[c2 - 1] = 3\n            print(3)\n            for i in z:\n                print(i, end=' ')"]