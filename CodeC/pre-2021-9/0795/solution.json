["def min_length(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + min_length((k - 1) // 2) + min_length(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    if m < min_length(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "lmn = [2, 5, 8, 12, 16, 20, 24, 29, 34, 39, 44, 49, 54, 59, 64, 70, 76, 82, 88, 94, 100, 106, 112, 118, 124, 130, 136, 142, 148, 154, 160, 167, 174, 181, 188, 195, 202, 209, 216, 223]\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    mx = (n + 1) * (n + 2) // 2 - 1\n    mn = lmn[n - 1]\n    if m > mx:\n        print(m - mx)\n    elif m < mn:\n        print(-1)\n    else:\n        print(0)", "def mini_len(l):\n    if l == 0:\n        return 0\n    if l == 1:\n        return 2\n    else:\n        return l + 1 + mini_len((l - 1) // 2) + mini_len(l - 1 - (l - 1) // 2)\n\ndef maxi_len(l):\n    return l * (l + 3) // 2\nT = int(input())\nfor i in range(T):\n    (n, m) = map(int, input().split())\n    if m < mini_len(n):\n        print(-1)\n    elif m > maxi_len(n):\n        print(m - maxi_len(n))\n    else:\n        print(0)", "def mini_len(l):\n    if l == 0:\n        return 0\n    if l == 1:\n        return 2\n    else:\n        return l + 1 + mini_len((l - 1) // 2) + mini_len(l - 1 - (l - 1) // 2)\n\ndef maxi_len(l):\n    return l * (l + 3) // 2\nT = int(input())\nfor i in range(T):\n    (n, m) = map(int, input().split())\n    if m < mini_len(n):\n        print(-1)\n    elif m > maxi_len(n):\n        print(m - maxi_len(n))\n    else:\n        print(0)", "def min_length(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + min_length((k - 1) // 2) + min_length(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    if m < min_length(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def min_length(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + min_length((k - 1) // 2) + min_length(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    if m < min_length(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def min_length(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + min_length((k - 1) // 2) + min_length(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    if m < min_length(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def snek(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + snek((k - 1) // 2) + snek(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    if m < snek(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def snek(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + snek((k - 1) // 2) + snek(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    if m < snek(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def snek(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + snek((k - 1) // 2) + snek(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    if m < snek(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def snek(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + snek((k - 1) // 2) + snek(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    if m < snek(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def snek(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + snek((k - 1) // 2) + snek(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    if m < snek(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def snek(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + snek((k - 1) // 2) + snek(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    if m < snek(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def snek(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + snek((k - 1) // 2) + snek(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    if m < snek(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def snek(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + snek((k - 1) // 2) + snek(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    if m < snek(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def min_length(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + min_length((k - 1) // 2) + min_length(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    if m < min_length(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def min_length(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + min_length((k - 1) // 2) + min_length(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    if m < min_length(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def min_length(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + min_length((k - 1) // 2) + min_length(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    if m < min_length(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def min_length(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + min_length((k - 1) // 2) + min_length(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    if m < min_length(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def min_length(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + min_length((k - 1) // 2) + min_length(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    if m < min_length(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def min_length(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + min_length((k - 1) // 2) + min_length(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    if m < min_length(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def min_length(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + min_length((k - 1) // 2) + min_length(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    if m < min_length(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def min_length(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + min_length((k - 1) // 2) + min_length(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    if m < min_length(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def min_s(x):\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 2\n    elif x % 2 == 0:\n        return x + 1 + min_s(x // 2 - 1) + min_s(x // 2)\n    else:\n        return x + 1 + 2 * min_s(x // 2)\n\ndef max_s(y):\n    return y * (y + 3) // 2\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    j = int(m - min_s(n))\n    k = int(m - max_s(n))\n    if j < 0:\n        print(-1)\n    elif k > 0:\n        print(k)\n    else:\n        print(0)", "T = input()\nT = int(T)\n\ndef recur(N):\n    N = int(N)\n    if N == 3:\n        return 8\n    if N == 2:\n        return 5\n    if N == 1:\n        return 2\n    elif N != 1:\n        p = N // 2\n        if N % 2 == 0:\n            return recur(N // 2) + recur(N // 2 - 1) + N + 1\n        elif N % 2 == 1:\n            return 2 * recur(N // 2) + N + 1\n\ndef permut(N):\n    N = int(N)\n    return (N + 2) * (N + 1) / 2 - 1\nfor i in range(0, T):\n    (s, l) = list(map(int, input().split()))\n    j = int(l - recur(s))\n    minim = int(l - permut(s))\n    if j < 0:\n        print(-1)\n    if j == 0:\n        print(j)\n    if j > 0:\n        if minim < 0:\n            print(0)\n        else:\n            print(minim)", "def min_length(x):\n    if x == 0:\n        return 0\n    if x == 1:\n        return 2\n    else:\n        return x + 1 + min_length((x - 1) // 2) + min_length(x - 1 - (x - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    if m < min_length(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def mini_len(l):\n    if l == 0:\n        return 0\n    if l == 1:\n        return 2\n    else:\n        return l + 1 + mini_len((l - 1) // 2) + mini_len(l - 1 - (l - 1) // 2)\n\ndef maxi_len(l):\n    return l * (l + 3) // 2\nT = int(input())\nfor i in range(T):\n    (n, m) = map(int, input().split())\n    if m < mini_len(n):\n        print(-1)\n    elif m > maxi_len(n):\n        print(m - maxi_len(n))\n    else:\n        print(0)", "import math\nT = int(input())\nfor tc in range(T):\n    (N, M) = map(int, input().split())\n    A = int(math.log(N, 2))\n    SI = 0\n    for i in range(A + 1):\n        if i < A:\n            SI = SI + (i + 2) * (2 ** (i + 1) - 2 ** i)\n        else:\n            SI = SI + (i + 2) * (N - 2 ** i + 1)\n    if M >= (N + 3) * N / 2:\n        D = M - (N + 3) * N / 2\n    elif M >= SI:\n        D = 0\n    else:\n        D = -1\n    print(int(D))", "def get_min_length(f, p, l):\n    if f == l - 1:\n        return 0\n    return get_min_length(f, (f + p) // 2, p) + (l - f) + get_min_length(p, (p + l) // 2, l)\n\ndef get_max_length(f, p, l):\n    if f == l - 1:\n        return 0\n    return l - f + get_max_length(p, p + 1, l)\n\ndef func():\n    (n, m) = map(int, input().split(' '))\n    maxm = get_max_length(0, 1, n + 1)\n    minm = get_min_length(0, (n + 1) // 2, n + 1)\n    if minm <= m <= maxm:\n        ans = 0\n    elif m > maxm:\n        ans = m - maxm\n    else:\n        ans = -1\n    print(ans)\nt = int(input())\nwhile t:\n    func()\n    t -= 1", "def min_length(x):\n    if x == 0:\n        return 0\n    if x == 1:\n        return 2\n    else:\n        return x + 1 + min_length((x - 1) // 2) + min_length(x - 1 - (x - 1) // 2)\n\ndef slove():\n    (n, m) = map(int, input().split())\n    if m < min_length(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)\nt = int(input())\nfor _ in range(t):\n    slove()", "def min_length(x):\n    if x == 0:\n        return 0\n    if x == 1:\n        return 2\n    else:\n        return x + 1 + min_length((x - 1) // 2) + min_length(x - 1 - (x - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    if m < min_length(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def min_length(x):\n    if x == 0:\n        return 0\n    if x == 1:\n        return 2\n    else:\n        return x + 1 + min_length((x - 1) // 2) + min_length(x - 1 - (x - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    if m < min_length(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def min_length(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + min_length((k - 1) // 2) + min_length(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    if m < min_length(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "a = []\nfor i in range(1001):\n    a.append(0)\nans = []\nans.append([0])\nans.append([2])\nfor i in range(2, 31):\n    for j in range(1001):\n        a[j] = 0\n    for j in range(i):\n        for i0 in range(len(ans[j])):\n            for i1 in range(len(ans[i - j - 1])):\n                a[ans[j][i0] + ans[i - j - 1][i1] + i + 1] = 1\n    ans.append([])\n    for j in range(1001):\n        if a[j] > 0:\n            ans[i].append(j)\nT = int(input())\nfor tc in range(T):\n    (N, M) = map(int, input().split())\n    x = -1\n    for i in range(len(ans[N])):\n        if ans[N][i] <= M:\n            x = M - ans[N][i]\n    print(x)", "def minLength(l, r):\n    m = int(l + (r - l) / 2)\n    if m <= 0 or r - l == 1:\n        return 0\n    return r - l + minLength(l, m) + minLength(m, r)\n\ndef nokia(n, m):\n    max_len = (3 * n + n * n) / 2\n    min_len = minLength(0, n + 1)\n    if m < min_len:\n        return -1\n    if m >= max_len:\n        return m - max_len\n    if m < max_len and m >= min_len:\n        return 0\nt = int(input())\nfor i in range(t):\n    line = input()\n    (n, m) = line.split(' ')\n    n = int(n)\n    m = int(m)\n    print(int(nokia(n, m)))", "def minLength(l, r):\n    m = int(l + (r - l) / 2)\n    if m <= 0 or r - l == 1:\n        return 0\n    return r - l + minLength(l, m) + minLength(m, r)\n\ndef nokia(n, m):\n    max_len = (3 * n + n * n) / 2\n    min_len = minLength(0, n + 1)\n    if m < min_len:\n        return -1\n    if m >= max_len:\n        return m - max_len\n    if m < max_len and m >= min_len:\n        return 0\nt = int(input())\nfor i in range(t):\n    line = input()\n    (n, m) = line.split(' ')\n    n = int(n)\n    m = int(m)\n    print(int(nokia(n, m)))", "def minLength(l, r):\n    m = int(l + (r - l) / 2)\n    if m <= 0 or r - l == 1:\n        return 0\n    return r - l + minLength(l, m) + minLength(m, r)\n\ndef nokia(n, m):\n    max_len = (3 * n + n * n) / 2\n    min_len = minLength(0, n + 1)\n    if m < min_len:\n        return -1\n    if m >= max_len:\n        return m - max_len\n    if m < max_len and m >= min_len:\n        return 0\nt = int(input())\nfor i in range(t):\n    line = input()\n    (n, m) = line.split(' ')\n    n = int(n)\n    m = int(m)\n    print(int(nokia(n, m)))", "from math import *\nfrom collections import *\nfrom functools import *\n\ndef rvi():\n    return [*map(int, input().split())]\n\ndef maxL(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return 2 * maxL(n // 2) + n if n % 2 == 0 else n + maxL(n // 2) + maxL(n // 2 + 1)\nfor _ in range(int(input())):\n    (n, m) = rvi()\n    max_l = ((n + 1) * (n + 1) + n + 1) // 2 - 1\n    min_l = maxL(n + 1)\n    if m < min_l:\n        print(-1)\n    else:\n        print(max(0, m - max_l))", "from math import *\nfrom collections import *\nfrom functools import *\n\ndef rvi():\n    return [*map(int, input().split())]\n\ndef maxL(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return 2 * maxL(n // 2) + n if n % 2 == 0 else n + maxL(n // 2) + maxL(n // 2 + 1)\nfor _ in range(int(input())):\n    (n, m) = rvi()\n    max_l = ((n + 1) * (n + 1) + n + 1) // 2 - 1\n    min_l = maxL(n + 1)\n    if m < min_l:\n        print(-1)\n    else:\n        print(max(0, m - max_l))", "import math\n\ndef recur(a):\n    mid = int(math.ceil(len(a) / 2))\n    if len(a) == 1:\n        return 2\n    if len(a) == 0:\n        return 0\n    return len(a) + 1 + recur(a[:mid - 1]) + recur(a[mid:])\nt = int(input())\nl = 0\nwhile l < t:\n    (n, m) = map(int, input().split(' '))\n    max = int((n + 2) * (n + 1) / 2) - 1\n    a1 = m - max\n    if a1 >= 0:\n        print(a1)\n    else:\n        arr = [int(i) for i in range(n)]\n        min = recur(arr)\n        a2 = m - min\n        if a2 < 0:\n            print(-1)\n        else:\n            print(0)\n    l += 1", "def min_length(k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 2\n    else:\n        return k + 1 + min_length((k - 1) // 2) + min_length(k - 1 - (k - 1) // 2)\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    if m < min_length(n):\n        print(-1)\n    elif m > n * (n + 3) / 2:\n        print(m - n * (n + 3) // 2)\n    else:\n        print(0)", "def minLength(l, r):\n    m = int(l + (r - l) / 2)\n    if m <= 0 or r - l == 1:\n        return 0\n    return r - l + minLength(l, m) + minLength(m, r)\n\ndef nokia(n, m):\n    max_len = (3 * n + n * n) / 2\n    min_len = minLength(0, n + 1)\n    if m < min_len:\n        return -1\n    if m >= max_len:\n        return m - max_len\n    if m < max_len and m >= min_len:\n        return 0\nt = int(input())\nfor i in range(t):\n    line = input()\n    (n, m) = line.split(' ')\n    n = int(n)\n    m = int(m)\n    print(int(nokia(n, m)))", "def minLength(l, r):\n    m = int(l + (r - l) / 2)\n    if m <= 0 or r - l == 1:\n        return 0\n    return r - l + minLength(l, m) + minLength(m, r)\n\ndef nokia(n, m):\n    max_len = (3 * n + n * n) / 2\n    min_len = minLength(0, n + 1)\n    if m < min_len:\n        return -1\n    if m >= max_len:\n        return m - max_len\n    if m < max_len and m >= min_len:\n        return 0\nt = int(input())\nfor i in range(t):\n    line = input()\n    (n, m) = line.split(' ')\n    n = int(n)\n    m = int(m)\n    print(int(nokia(n, m)))", "def minLength(l, r):\n    m = int(l + (r - l) / 2)\n    if m <= 0 or r - l == 1:\n        return 0\n    return r - l + minLength(l, m) + minLength(m, r)\n\ndef nokia(n, m):\n    max_len = (3 * n + n * n) / 2\n    min_len = minLength(0, n + 1)\n    if m < min_len:\n        return -1\n    if m >= max_len:\n        return m - max_len\n    if m < max_len and m >= min_len:\n        return 0\nt = int(input())\nfor i in range(t):\n    line = input()\n    (n, m) = line.split(' ')\n    n = int(n)\n    m = int(m)\n    print(int(nokia(n, m)))", "min = [0 for i in range(32)]\nmax = [0 for i in range(32)]\nfor i in range(1, 32):\n    if i % 2 == 0:\n        min[i] = i + 1 + min[i // 2 - 1] + min[i // 2]\n    else:\n        min[i] = i + 1 + 2 * min[(i - 1) // 2]\n    max[i] = i * (i + 3) // 2\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    if m < min[n]:\n        print(-1)\n    elif m <= max[n]:\n        print(0)\n    else:\n        print(m - max[n])", "min = [0 for i in range(32)]\nmax = [0 for i in range(32)]\nfor i in range(1, 32):\n    if i % 2 == 0:\n        min[i] = i + 1 + min[i // 2 - 1] + min[i // 2]\n    else:\n        min[i] = i + 1 + 2 * min[(i - 1) // 2]\n    max[i] = i + 1 + max[i - 1]\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    if m < min[n]:\n        print(-1)\n    elif m <= n * (n + 3) // 2:\n        print(0)\n    else:\n        print(m - n * (n + 3) // 2)", "min = [0 for i in range(32)]\nmax = [0 for i in range(32)]\nfor i in range(1, 32):\n    min[i] = i + 1 + min[(i - 1) // 2] + min[i - (i - 1) // 2 - 1]\n    max[i] = i + 1 + max[i - 1]\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    if m < min[n]:\n        print(-1)\n    elif m <= max[n]:\n        print(0)\n    else:\n        print(m - max[n])", "mem = {0: 0, 1: 2}\n\ndef get_min_req_len(n):\n    if n in mem:\n        return mem[n]\n    ans = n + 1\n    if n % 2:\n        ans += 2 * get_min_req_len(n // 2)\n    else:\n        ans += get_min_req_len(n // 2) + get_min_req_len(n // 2 - 1)\n    mem[n] = ans\n    return ans\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    max_ans = (n + 1) * (n + 2) // 2 - 1\n    min_ans = get_min_req_len(n)\n    if min_ans <= m <= max_ans:\n        print(0)\n    elif m < min_ans:\n        print(-1)\n    else:\n        print(m - max_ans)", "min = [0 for i in range(32)]\nmax = [0 for i in range(32)]\nfor i in range(1, 32):\n    min[i] = i + 1 + min[(i - 1) // 2] + min[i - (i - 1) // 2 - 1]\n    max[i] = i + 1 + max[i - 1]\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    if m < min[n]:\n        print(-1)\n    elif m <= max[n]:\n        print(0)\n    else:\n        print(m - max[n])", "import sys, math\nmn = [0 for i in range(50 + 1)]\nmx = [0 for i in range(50 + 1)]\nfor i in range(1, 51):\n    k = i // 2\n    mn[i] = mn[k] + mn[i - k - 1] + i + 1\n    mx[i] = mx[i - 1] + i + 1\nfor _ in range(int(input())):\n    (n, m) = [int(c) for c in input().split()]\n    if m < mn[n]:\n        print(-1)\n    elif m <= mx[n]:\n        print(0)\n    else:\n        print(m - mx[n])", "k = int(input())\nminimum = [0, 0, 2, 5]\nmaximum = [0, 0, 2, 5]\nn = 4\nwhile n < 40:\n    min_values = []\n    max_values = []\n    for i in range(1, n // 2 + 1):\n        min_values.append(minimum[i] + minimum[n - i])\n        max_values.append(maximum[i] + maximum[n - i])\n    minimum.append(n + min(min_values))\n    maximum.append(n + max(max_values))\n    n += 1\nfor i in range(k):\n    (a, b) = map(int, input().split())\n    if b < minimum[a + 1]:\n        print(-1)\n    elif b < maximum[a + 1]:\n        print(0)\n    else:\n        print(b - maximum[a + 1])", "k = int(input())\nminimum = [0, 0, 2, 5]\nmaximum = [0, 0, 2, 5]\nn = 4\nwhile n < 40:\n    min_values = []\n    max_values = []\n    for i in range(1, n // 2 + 1):\n        min_values.append(minimum[i] + minimum[n - i])\n        max_values.append(maximum[i] + maximum[n - i])\n    minimum.append(n + min(min_values))\n    maximum.append(n + max(max_values))\n    n += 1\nfor i in range(k):\n    (a, b) = map(int, input().split())\n    if b < minimum[a + 1]:\n        print(-1)\n    elif b < maximum[a + 1]:\n        print(0)\n    else:\n        print(b - maximum[a + 1])", "import math\n\ndef recur(a):\n    mid = int(math.ceil(len(a) / 2))\n    if len(a) == 1:\n        return 2\n    if len(a) == 0:\n        return 0\n    return len(a) + 1 + recur(a[:mid - 1]) + recur(a[mid:])\nt = int(input())\nl = 0\nwhile l < t:\n    (n, m) = map(int, input().split(' '))\n    max = int((n + 2) * (n + 1) / 2) - 1\n    a1 = m - max\n    if a1 >= 0:\n        print(a1)\n    else:\n        arr = [int(i) for i in range(n)]\n        min = recur(arr)\n        a2 = m - min\n        if a2 < 0:\n            print(-1)\n        else:\n            print(0)\n    l += 1", "min = {1: 2, 2: 5}\nfor i in range(3, 32):\n    x1 = (i - 1) // 2\n    x2 = x1 + (i - 1) % 2\n    min[i] = i + 1 + min[x1] + min[x2]\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    y = (n + 1) * (n + 2) // 2 - 1\n    if m < min[n]:\n        print('-1')\n    elif m > y:\n        print(m - y)\n    else:\n        print('0')", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    sMax = (n + 1) * (n + 2) // 2 - 1\n    sMin = math.ceil((n + 1) * math.log(n + 1, 2))\n    if m > sMax:\n        print(m - sMax)\n    elif m < sMin:\n        print(-1)\n    else:\n        print(0)", "try:\n\n    def helperConnecting(l, r):\n        if r - l <= 1:\n            return 0\n        mid = (l + r) // 2\n        return r - l + helperConnecting(l, mid) + helperConnecting(mid, r)\n    T = int(input())\n    while T > 0:\n        T -= 1\n        (N, M) = [int(x) for x in input().split(' ')]\n        max1 = int(N * (N + 3) / 2)\n        min1 = helperConnecting(0, N + 1)\n        if M > max1:\n            print(M - max1)\n        elif M >= min1:\n            print(0)\n        else:\n            print(-1)\nexcept:\n    pass", "import sys\nsys.setrecursionlimit(10 ** 7)\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_list_strings():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef findLeast(N, store):\n    if N in store:\n        return store[N]\n    if N == 1:\n        return 2\n    if N == 2:\n        return 5\n    mid = (N + 1) // 2\n    ans = N + 1\n    ans += findLeast(mid - 1, store) + findLeast(N - mid, store)\n    store[N] = ans\n    return ans\n\ndef solve(N, M):\n    up = (N + 1) * (N + 2) // 2\n    up -= 1\n    if M >= up:\n        ans = M - up\n        sys.stdout.write(str(ans) + '\\n')\n        return\n    low = findLeast(N, {})\n    if M < low:\n        sys.stdout.write(str(-1) + '\\n')\n        return\n    sys.stdout.write(str(0) + '\\n')\n    return\nT = get_int()\nwhile T:\n    (N, M) = get_ints()\n    solve(N, M)\n    T -= 1", "try:\n\n    def helperConnecting(l, r):\n        if r - l <= 1:\n            return 0\n        mid = (l + r) // 2\n        return r - l + helperConnecting(l, mid) + helperConnecting(mid, r)\n    T = int(input())\n    while T > 0:\n        T -= 1\n        (N, M) = [int(x) for x in input().split(' ')]\n        max1 = int(N * (N + 3) / 2)\n        min1 = helperConnecting(0, N + 1)\n        if M > max1:\n            print(M - max1)\n        elif M >= min1:\n            print(0)\n        else:\n            print(-1)\nexcept:\n    pass", "def minRange(l, r):\n    if r - l <= 1:\n        return 0\n    mid = (l + r) // 2\n    return r - l + minRange(l, mid) + minRange(mid, r)\n\ndef soldiers():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = map(int, input().split())\n        max1 = n * (n + 3) // 2\n        min1 = minRange(0, n + 1)\n        if m > max1:\n            print(m - max1)\n            continue\n        elif m < min1:\n            print(-1)\n        else:\n            print(0)\nsoldiers()", "def helperConnecting(l, r):\n    if r - l <= 1:\n        return 0\n    mid = (l + r) // 2\n    return r - l + helperConnecting(l, mid) + helperConnecting(mid, r)\nT = int(input())\nwhile T > 0:\n    T -= 1\n    (N, M) = [int(x) for x in input().split(' ')]\n    max1 = int(N * (N + 3) / 2)\n    min1 = helperConnecting(0, N + 1)\n    if M > max1:\n        print(M - max1)\n    elif M >= min1:\n        print(0)\n    else:\n        print(-1)", "def helperConnecting(l, r):\n    if r - l <= 1:\n        return 0\n    mid = (l + r) // 2\n    return r - l + helperConnecting(l, mid) + helperConnecting(mid, r)\nT = int(input())\nwhile T > 0:\n    T -= 1\n    (N, M) = [int(x) for x in input().split(' ')]\n    max1 = int(N * (N + 3) / 2)\n    min1 = helperConnecting(0, N + 1)\n    if M > max1:\n        print(M - max1)\n    elif M >= min1:\n        print(0)\n    else:\n        print(-1)", "import sys\nimport time\ninput_lines = [line.strip() for line in sys.stdin.readlines() if line.strip()]\nT = int(input_lines[0])\n\ndef problem(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        length = n + 1\n        length += problem(int(n / 2))\n        length += problem(n - int(n / 2) - 1)\n        return length\nt = 0\nwhile t < T:\n    (N, M) = [int(x) for x in input_lines[t + 1].split()]\n    max_length = int(N * (N + 3) / 2)\n    min_length = problem(N)\n    if M > max_length:\n        print(M - max_length)\n    elif M >= min_length:\n        print(0)\n    else:\n        print(-1)\n    t += 1", "def minRange(l, r):\n    if r - l <= 1:\n        return 0\n    mid = (l + r) // 2\n    return r - l + minRange(l, mid) + minRange(mid, r)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    max1 = n * (n + 3) // 2\n    min1 = minRange(0, n + 1)\n    if m > max1:\n        print(m - max1)\n        continue\n    elif m < min1:\n        print(-1)\n    else:\n        print(0)", "def minRange(l, r):\n    if r - l <= 1:\n        return 0\n    mid = (l + r) // 2\n    return r - l + minRange(l, mid) + minRange(mid, r)\n\ndef soldiers():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = map(int, input().split())\n        max1 = n * (n + 3) // 2\n        min1 = minRange(0, n + 1)\n        if m > max1:\n            print(m - max1)\n            continue\n        elif m < min1:\n            print(-1)\n        else:\n            print(0)\nsoldiers()", "import math\n\ndef find_minimum_length_required(left, right):\n    if right - left <= 1:\n        return 0\n    else:\n        mid = math.ceil(left + (right - left) / 2)\n        return right - left + find_minimum_length_required(left, mid) + find_minimum_length_required(mid, right)\n\ndef find_maximum_length_required(left, right):\n    if right == left:\n        return 0\n    else:\n        return right - left + 1 + find_maximum_length_required(left + 1, right)\ntestcases = int(input())\nfor i in range(testcases):\n    (n, m) = map(int, input().split())\n    minimum_length_required = find_minimum_length_required(0, n + 1)\n    maximum_length_required = find_maximum_length_required(0, n)\n    if m < minimum_length_required:\n        print(-1)\n    elif minimum_length_required <= m <= maximum_length_required:\n        print(0)\n    else:\n        print(m - maximum_length_required)", "t = int(input())\nmindp = [i + 2 for i in range(30)]\nmaxdp = [i + 2 for i in range(30)]\nmaxdp[0] = 2\nfor j in range(1, 30):\n    maxdp[j] = maxdp[j - 1] + maxdp[j]\nmindp[0] = 2\nmindp[1] = 5\nfor k in range(2, 30):\n    p = (k + 1) // 2\n    if k % 2 != 0:\n        ans = mindp[p - 1] + mindp[k - p - 1]\n    else:\n        ans = 2 * mindp[p - 1]\n    mindp[k] = mindp[k] + ans\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    if mindp[n - 1] > m:\n        print(-1)\n    elif maxdp[n - 1] > m:\n        print(0)\n    else:\n        print(m - maxdp[n - 1])", "t = int(input())\nfor k in range(t):\n    (n, m) = map(int, input().split())\n    dpM = [[0 for i in range(n + 2)] for j in range(n + 2)]\n    dpm = [[10 ** 9 for i in range(n + 2)] for j in range(n + 2)]\n    for kro in range(1, n + 2):\n        for one in range(0, n + 2 - kro):\n            if kro == 1:\n                dpM[one][one + 1] = 0\n                dpm[one][one + 1] = 0\n            else:\n                for k in range(one + 1, one + kro):\n                    dpM[one][one + kro] = max(dpM[one][one + kro], kro + dpM[one][k] + dpM[k][one + kro])\n                    dpm[one][one + kro] = min(dpm[one][one + kro], kro + dpm[one][k] + dpm[k][one + kro])\n    if dpM[0][n + 1] <= m:\n        print(m - dpM[0][n + 1])\n    elif dpm[0][n + 1] <= m:\n        print(0)\n    else:\n        print(-1)", "t = int(input())\nfor k in range(t):\n    (n, m) = map(int, input().split())\n    dpM = [[0 for i in range(n + 2)] for j in range(n + 2)]\n    dpm = [[10 ** 9 for i in range(n + 2)] for j in range(n + 2)]\n    for kro in range(1, n + 2):\n        for one in range(0, n + 2 - kro):\n            if kro == 1:\n                dpM[one][one + 1] = 0\n                dpm[one][one + 1] = 0\n            else:\n                for k in range(one + 1, one + kro):\n                    dpM[one][one + kro] = max(dpM[one][one + kro], kro + dpM[one][k] + dpM[k][one + kro])\n                    dpm[one][one + kro] = min(dpm[one][one + kro], kro + dpm[one][k] + dpm[k][one + kro])\n    if dpM[0][n + 1] <= m:\n        print(m - dpM[0][n + 1])\n    elif dpm[0][n + 1] <= m:\n        print(0)\n    else:\n        print(-1)", "def minLength(l, r):\n    m = int(l + (r - l) / 2)\n    if m <= 0 or r - l == 1:\n        return 0\n    return r - l + minLength(l, m) + minLength(m, r)\n\ndef nokia(n, m):\n    max_len = (3 * n + n * n) / 2\n    min_len = minLength(0, n + 1)\n    if m < min_len:\n        return -1\n    if m >= max_len:\n        return m - max_len\n    if m < max_len and m >= min_len:\n        return 0\nt = int(input())\nfor i in range(t):\n    line = input()\n    (n, m) = line.split(' ')\n    n = int(n)\n    m = int(m)\n    print(int(nokia(n, m)))", "import math\n\ndef recur(a):\n    mid = int(math.ceil(len(a) / 2))\n    if len(a) == 1:\n        return 2\n    if len(a) == 0:\n        return 0\n    return len(a) + 1 + recur(a[:mid - 1]) + recur(a[mid:])\nt = int(input())\nl = 0\nwhile l < t:\n    (n, m) = map(int, input().split(' '))\n    max = int((n + 2) * (n + 1) / 2) - 1\n    a1 = m - max\n    if a1 >= 0:\n        print(a1)\n    else:\n        arr = [int(i) for i in range(n)]\n        min = recur(arr)\n        a2 = m - min\n        if a2 < 0:\n            print(-1)\n        else:\n            print(0)\n    l += 1", "def minLength(l, r):\n    m = int(l + (r - l) / 2)\n    if m <= 0 or r - l == 1:\n        return 0\n    return r - l + minLength(l, m) + minLength(m, r)\n\ndef nokia(n, m):\n    max_len = (3 * n + n * n) / 2\n    min_len = minLength(0, n + 1)\n    if m < min_len:\n        return -1\n    if m >= max_len:\n        return m - max_len\n    if m < max_len and m >= min_len:\n        return 0\nt = int(input())\nfor i in range(t):\n    line = input()\n    (n, m) = line.split(' ')\n    n = int(n)\n    m = int(m)\n    print(int(nokia(n, m)))", "def minLength(l, r):\n    m = int(l + (r - l) / 2)\n    if m <= 0 or r - l == 1:\n        return 0\n    return r - l + minLength(l, m) + minLength(m, r)\n\ndef nokia(n, m):\n    max_len = (3 * n + n * n) / 2\n    min_len = minLength(0, n + 1)\n    if m < min_len:\n        return -1\n    if m >= max_len:\n        return m - max_len\n    if m < max_len and m >= min_len:\n        return 0\nt = int(input())\nfor i in range(t):\n    line = input()\n    (n, m) = line.split(' ')\n    n = int(n)\n    m = int(m)\n    print(int(nokia(n, m)))", "import math\n\ndef recur(a):\n    mid = int(math.ceil(len(a) / 2))\n    if len(a) == 1:\n        return 2\n    if len(a) == 0:\n        return 0\n    return len(a) + 1 + recur(a[:mid - 1]) + recur(a[mid:])\nt = int(input())\nl = 0\nwhile l < t:\n    (n, m) = map(int, input().split(' '))\n    max = int((n + 2) * (n + 1) / 2) - 1\n    a1 = m - max\n    if a1 >= 0:\n        print(a1)\n    else:\n        arr = [int(i) for i in range(n)]\n        min = recur(arr)\n        a2 = m - min\n        if a2 < 0:\n            print(-1)\n        else:\n            print(0)\n    l += 1", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    spMax = (n + 1) * (n + 2) // 2 - 1\n    spMin = math.ceil((n + 1) * math.log(n + 1, 2))\n    if m > spMax:\n        print(m - spMax)\n    elif m < spMin:\n        print(-1)\n    else:\n        print(0)"]