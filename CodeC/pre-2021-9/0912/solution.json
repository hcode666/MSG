["t = int(input())\nfor i in range(t):\n    (m, n) = map(int, input().split())\n    (b1, b2) = (bin(m)[2:], bin(n)[2:])\n    if len(b1) != len(b2):\n        m = max(len(b1), len(b2))\n        print(int('1' * m, 2))\n    else:\n        c = 0\n        while c < len(b1) and b1[c] == b2[c]:\n            c += 1\n        ans = b1[:c] + '1' * (len(b1) - c)\n        print(int(ans, 2))", "t = int(input())\nfor i in range(t):\n    (m, n) = map(int, input().split())\n    (b1, b2) = (bin(m)[2:], bin(n)[2:])\n    if len(b1) != len(b2):\n        m = max(len(b1), len(b2))\n        print(int('1' * m, 2))\n    else:\n        c = 0\n        while c < len(b1) and b1[c] == b2[c]:\n            c += 1\n        ans = b1[:c] + '1' * (len(b1) - c)\n        print(int(ans, 2))", "t = int(input())\nfor i in range(t):\n    (m, n) = map(int, input().split())\n    (b1, b2) = (bin(m)[2:], bin(n)[2:])\n    if len(b1) != len(b2):\n        m = max(len(b1), len(b2))\n        print(int('1' * m, 2))\n    else:\n        c = 0\n        while c < len(b1) and b1[c] == b2[c]:\n            c += 1\n        ans = b1[:c] + '1' * (len(b1) - c)\n        print(int(ans, 2))", "for _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    (bm, bn) = (bin(m)[2:], bin(n)[2:])\n    if len(bm) != len(bn):\n        m = max(len(bm), len(bn))\n        print(int('1' * m, 2))\n    else:\n        i = 0\n        while i < len(bm) and bm[i] == bn[i]:\n            i += 1\n        ans = bm[:i] + '1' * (len(bm) - i)\n        print(int(ans, 2))", "T = int(input())\nfor i in range(T):\n    (n, m) = map(int, input().split())\n    (r, s) = (bin(n), bin(m))\n    if len(r) != len(s):\n        k = max(len(r), len(s)) - 2\n        h = '1' * k\n        print(int(h, 2))\n    else:\n        i = 0\n        while i < len(r) and r[i] == s[i]:\n            i += 1\n        ans = r[:i] + '1' * (len(r) - i)\n        print(int(ans[2:], 2))", "try:\n    t = int(input())\n    for i in range(t):\n        (n, m) = map(int, input().split())\n        (r, s) = (bin(n), bin(m))\n        if len(r) != len(s):\n            k = max(len(r), len(s)) - 2\n            h = '1' * k\n            print(int(h, 2))\n        else:\n            i = 0\n            while i < len(r) and r[i] == s[i]:\n                i += 1\n            ans = r[:i] + '1' * (len(r) - i)\n            print(int(ans[2:], 2))\nexcept:\n    pass", "for _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    mi = str(bin(x)[2:])\n    ma = str(bin(y)[2:])\n    mi = '0' * (len(ma) - len(mi)) + mi\n    for i in range(len(ma)):\n        if mi[i] != ma[i]:\n            break\n    print(eval('0b' + ma[:i + 1] + '1' * (len(ma) - (i + 1))))", "try:\n    t = int(input())\n    for i in range(t):\n        (n, m) = map(int, input().split())\n        (r, s) = (bin(n), bin(m))\n        if len(r) != len(s):\n            k = max(len(r), len(s)) - 2\n            h = '1' * k\n            print(int(h, 2))\n        else:\n            i = 0\n            while i < len(r) and r[i] == s[i]:\n                i += 1\n            ans = r[:i] + '1' * (len(r) - i)\n            print(int(ans[2:], 2))\nexcept:\n    pass", "T = int(input())\nans = []\nfor _ in range(T):\n    (L, R) = [int(i) for i in input().split()]\n    l = bin(L)[2:]\n    r = bin(R)[2:]\n    if len(l) != len(r):\n        ans.append(int(max(len(l), len(r)) * '1', 2))\n    else:\n        i = 0\n        while i < len(r) and l[i] == r[i]:\n            i += 1\n        s = l[:i] + '1' * (len(l) - i)\n        ans.append(int(s, 2))\nfor i in ans:\n    print(i)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    (r, s) = (bin(n), bin(m))\n    if len(r) != len(s):\n        k = max(len(r), len(s)) - 2\n        h = '1' * k\n        print(int(h, 2))\n    else:\n        i = 0\n        while i < len(r) and r[i] == s[i]:\n            i += 1\n        ans = r[:i] + '1' * (len(r) - i)\n        print(int(ans[2:], 2))", "from math import log2\nfor T in range(int(input())):\n    (l, r) = map(int, input().split())\n    if r == 0:\n        print(0)\n        continue\n    lbit_pos = []\n    rbit_pos = []\n    for i in range(int(log2(r)), -1, -1):\n        if l >> i & 1:\n            lbit_pos.append(i)\n        if r >> i & 1:\n            rbit_pos.append(i)\n    index = min(len(lbit_pos), len(rbit_pos))\n    flag = True\n    value = 0\n    for i in range(index):\n        if lbit_pos[i] != rbit_pos[i]:\n            value += (1 << rbit_pos[i] + 1) - 1\n            flag = False\n            break\n        else:\n            value += 1 << rbit_pos[i]\n    if flag == True:\n        if index != len(rbit_pos):\n            value += (1 << rbit_pos[i + 1] + 1) - 1\n    print(value)", "from math import log2\nfor T in range(int(input())):\n    (l, r) = map(int, input().split())\n    if r == 0:\n        print(0)\n        continue\n    lbit_pos = []\n    rbit_pos = []\n    for i in range(int(log2(r)), -1, -1):\n        if l >> i & 1:\n            lbit_pos.append(i)\n        if r >> i & 1:\n            rbit_pos.append(i)\n    index = min(len(lbit_pos), len(rbit_pos))\n    flag = True\n    value = 0\n    for i in range(index):\n        if lbit_pos[i] != rbit_pos[i]:\n            value += (1 << rbit_pos[i] + 1) - 1\n            flag = False\n            break\n        else:\n            value += 1 << rbit_pos[i]\n    if flag == True:\n        if index != len(rbit_pos):\n            value += (1 << rbit_pos[i + 1] + 1) - 1\n    print(value)", "from math import log2\nfor T in range(int(input())):\n    (l, r) = map(int, input().split())\n    if r == 0:\n        print(0)\n        continue\n    lbit_pos = []\n    rbit_pos = []\n    for i in range(int(log2(r)), -1, -1):\n        if l >> i & 1:\n            lbit_pos.append(i)\n        if r >> i & 1:\n            rbit_pos.append(i)\n    index = min(len(lbit_pos), len(rbit_pos))\n    flag = True\n    value = 0\n    for i in range(index):\n        if lbit_pos[i] != rbit_pos[i]:\n            value += (1 << rbit_pos[i] + 1) - 1\n            flag = False\n            break\n        else:\n            value += 1 << rbit_pos[i]\n    if flag == True:\n        if index != len(rbit_pos):\n            value += (1 << rbit_pos[i + 1] + 1) - 1\n    print(value)", "for T in range(int(input())):\n    (l, r) = map(int, input().split())\n    lbit_pos = []\n    rbit_pos = []\n    for i in range(100, -1, -1):\n        if l >> i & 1:\n            lbit_pos.append(i)\n        if r >> i & 1:\n            rbit_pos.append(i)\n    index = min(len(lbit_pos), len(rbit_pos))\n    flag = True\n    value = 0\n    for i in range(index):\n        if lbit_pos[i] != rbit_pos[i]:\n            value += (1 << rbit_pos[i] + 1) - 1\n            flag = False\n            break\n        else:\n            value += 1 << rbit_pos[i]\n    if flag == True:\n        if index != len(rbit_pos):\n            value += (1 << rbit_pos[i + 1] + 1) - 1\n    print(value)", "test = int(input())\nfor _ in range(test):\n    (l, r) = map(int, input().split())\n    xor1 = l ^ r\n    max1 = 0\n    while xor1:\n        max1 = max1 << 1\n        max1 = max1 | 1\n        xor1 = xor1 >> 1\n    max1 = r | max1\n    print(max(max1, r))", "def max_bitwise_or(L, R):\n    v1 = []\n    v2 = []\n    v3 = []\n    z = 0\n    i = 0\n    ans = 0\n    cnt = 1\n    while L > 0:\n        v1.append(L % 2)\n        L = L // 2\n    while R > 0:\n        v2.append(R % 2)\n        R = R // 2\n    while len(v1) != len(v2):\n        v1.append(0)\n    for i in range(len(v2) - 1, -1, -1):\n        if v2[i] == 1 and v1[i] == 0 and (z == 0):\n            z = 1\n            continue\n        if z == 1:\n            v1[i] = 1\n    for i in range(len(v2)):\n        v3.append(v2[i] | v1[i])\n    for i in range(len(v2)):\n        if v3[i] == 1:\n            ans += cnt\n        cnt *= 2\n    return ans\ntry:\n    t = int(input())\n    for _ in range(t):\n        (L, R) = map(int, input().rstrip().split())\n        print(max_bitwise_or(L, R))\nexcept:\n    pass", "for _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    xor1 = l ^ r\n    max1 = 0\n    while xor1:\n        max1 = max1 << 1\n        max1 = max1 | 1\n        xor1 = xor1 >> 1\n    max1 = r | max1\n    print(max(max1, r))", "t = int(input())\nfor you in range(t):\n    l = input().split()\n    L = int(l[0])\n    R = int(l[1])\n    if L == R:\n        print(L)\n    else:\n        num = 0\n        for i in range(63, -1, -1):\n            if L & 1 << i == 0 and R & 1 << i > 0:\n                num = num + (2 * (1 << i) - 1)\n                break\n            else:\n                num = num + (L & 1 << i)\n        print(num)", "import math\nt = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    x = int(math.log(r, 2))\n    count = 0\n    while x >= 0:\n        k = 2 ** x\n        if l < k:\n            print(count + 2 * k - 1)\n            break\n        else:\n            l -= k\n            r -= k\n            count += k\n            if r == 0:\n                print(count)\n                break\n            else:\n                x = int(math.log(r, 2))", "t = int(input())\nfor you in range(t):\n    l = input().split()\n    L = int(l[0])\n    R = int(l[1])\n    if L == R:\n        print(L)\n    else:\n        num = 0\n        for i in range(63, -1, -1):\n            if L & 1 << i == 0 and R & 1 << i > 0:\n                num = num + (2 * (1 << i) - 1)\n                break\n            else:\n                num = num + (L & 1 << i)\n        print(num)", "MAX = 64\n\ndef maxOR(L, R):\n    if L == R:\n        return L\n    ans = 0\n    for i in range(MAX - 1, -1, -1):\n        p = 1 << i\n        lbit = L >> i & 1\n        rbit = R >> i & 1\n        if rbit == 1 and lbit == 0:\n            ans += (p << 1) - 1\n            break\n        if rbit == 1:\n            ans += p\n    return ans\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    print(maxOR(l, r))", "t = int(input())\nwhile t:\n    t -= 1\n    (l, r) = [int(i) for i in input().split()]\n    bl = bin(l)[2:]\n    br = bin(r)[2:]\n    ans = ''\n    if l == r:\n        print(r)\n    elif len(bl) < len(br):\n        for i in range(len(br)):\n            ans += '1'\n        print(int('0b' + ans, 2))\n    else:\n        for i in range(len(br)):\n            if br[i] == '1' and bl[i] == '0':\n                temp = i\n                break\n        for i in range(temp):\n            ans += br[i]\n        for i in range(temp, len(br)):\n            ans += '1'\n        print(int('0b' + ans, 2))", "import math as mt\n\ndef check(l, r, power):\n    bal = 0\n    for i in range(power, -1, -1):\n        new_l = l >> i\n        new_r = r >> i\n        bitOfL = new_l & 1\n        bitOfR = new_r & 1\n        if bitOfL & bitOfR:\n            if r - (1 << i) >= l:\n                r = r ^ 1 << i\n                bal += int(pow(2, i))\n    m = [bal, r]\n    return m\n\ndef maximise(l, r, bal, power, mask):\n    for i in range(power, -1, -1):\n        new_l = l >> i\n        new_r = r >> i\n        bitOfL = new_l & 1\n        bitOfR = new_r & 1\n        if bitOfL | bitOfR:\n            mask = mask | 1 << i\n        elif 1 << i <= bal:\n            bal = bal - (1 << i)\n            mask = mask | 1 << i\n        elif l + (1 << i) <= r:\n            l += 1 << i\n            mask = mask | 1 << i\n        else:\n            continue\n    return mask\nt = int(input())\nwhile t:\n    (l, r) = map(int, input().split())\n    power = mt.floor(mt.log(r) / mt.log(2))\n    checker = check(l, r, power)\n    r = checker[1]\n    bal = checker[0]\n    print(maximise(l, r, bal, power, 0))\n    t -= 1", "import math as mt\n\ndef check(l, r, power):\n    bal = 0\n    for i in range(power, -1, -1):\n        new_l = l >> i\n        new_r = r >> i\n        bitOfL = new_l & 1\n        bitOfR = new_r & 1\n        if bitOfL & bitOfR:\n            if r - (1 << i) >= l:\n                r = r ^ 1 << i\n                bal += int(pow(2, i))\n    m = [bal, r]\n    return m\n\ndef maximise(l, r, bal, power, mask):\n    for i in range(power, -1, -1):\n        new_l = l >> i\n        new_r = r >> i\n        bitOfL = new_l & 1\n        bitOfR = new_r & 1\n        if bitOfL | bitOfR:\n            mask = mask | 1 << i\n        elif 1 << i <= bal:\n            bal = bal - (1 << i)\n            mask = mask | 1 << i\n        elif l + (1 << i) <= r:\n            l += 1 << i\n            mask = mask | 1 << i\n        else:\n            continue\n    return mask\nt = int(input())\nwhile t:\n    (l, r) = map(int, input().split())\n    power = mt.floor(mt.log(r) / mt.log(2))\n    checker = check(l, r, power)\n    r = checker[1]\n    bal = checker[0]\n    print(maximise(l, r, bal, power, 0))\n    t -= 1", "t = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    a = bin(n)\n    a = a[2:]\n    c = bin(m)\n    c = c[2:]\n    minlen = min(len(a), len(c))\n    if len(a) > len(c):\n        maxdiff = len(a) - minlen\n        c = '0' * maxdiff + c\n    else:\n        maxdiff = len(c) - minlen\n        a = '0' * maxdiff + a\n    res = ''\n    for i in range(len(a)):\n        if a[i] == '0' and c[i] == '1':\n            res = res + (len(a) - i) * '1'\n            break\n        else:\n            res = res + a[i]\n    p = int(res, 2)\n    print(p)\n    t -= 1", "def max_bitwise_or(L, R):\n    v1 = []\n    v2 = []\n    v3 = []\n    z = 0\n    i = 0\n    ans = 0\n    cnt = 1\n    while L > 0:\n        v1.append(L % 2)\n        L = L // 2\n    while R > 0:\n        v2.append(R % 2)\n        R = R // 2\n    while len(v1) != len(v2):\n        v1.append(0)\n    for i in range(len(v2) - 1, -1, -1):\n        if v2[i] == 1 and v1[i] == 0 and (z == 0):\n            z = 1\n            continue\n        if z == 1:\n            v1[i] = 1\n    for i in range(len(v2)):\n        v3.append(v2[i] | v1[i])\n    for i in range(len(v2)):\n        if v3[i] == 1:\n            ans += cnt\n        cnt *= 2\n    return ans\nfor _ in range(int(input())):\n    a = list(map(int, input().split()))\n    print(max_bitwise_or(a[0], a[1]))", "def bi(X, l):\n    return (l - len(bin(X)[2:])) * '0' + bin(X)[2:]\nfor _ in range(int(input())):\n    (L, R) = list(map(int, input().split()))\n    q = bin(R)[2:]\n    length = len(q)\n    p = bi(L, length)\n    changed = False\n    ans = ''\n    for i in range(length):\n        if p[i] != q[i]:\n            ans += (length - i) * '1'\n            break\n        else:\n            ans += p[i]\n    print(int(ans, 2))", "def ans(a, b):\n    if a == b:\n        return a | b\n    a1 = str(bin(a)[2:])\n    b1 = str(bin(b)[2:])\n    if len(a1) > len(b1):\n        b1 = '0' * (len(a1) - len(b1)) + b1\n    elif len(b1) > len(a1):\n        a1 = '0' * (len(b1) - len(a1)) + a1\n    i = 0\n    s = 0\n    while a1[i] == b1[i]:\n        s += int(a1[i]) * 2 ** (len(a1) - i - 1)\n        i += 1\n    for j in range(i, len(a1)):\n        if a1[j] == '0' and b1[j] == '0':\n            if a + 2 ** (len(a1) - j - 1) <= b:\n                s = s + 2 ** (len(a1) - j - 1)\n                a = a + 2 ** (len(a1) - j - 1)\n        else:\n            s = s + 2 ** (len(a1) - j - 1)\n    return s\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(ans(a, b))", "import sys\nfrom math import ceil, floor, tan\nimport bisect\nRI = lambda : [int(x) for x in sys.stdin.readline().split()]\nrw = lambda : sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    (l, r) = RI()\n    ans = 0\n    flag = False\n    for i in range(60, -1, -1):\n        if l >> i & 1 != r >> i & 1:\n            flag = True\n        if flag:\n            ans = ans | 1 << i\n        elif l >> i & 1 == 1:\n            ans = ans | 1 << i\n    print(ans)", "def ans(a, b):\n    if a == b:\n        return a | b\n    a1 = str(bin(a)[2:])\n    b1 = str(bin(b)[2:])\n    if len(a1) > len(b1):\n        b1 = '0' * (len(a1) - len(b1)) + b1\n    elif len(b1) > len(a1):\n        a1 = '0' * (len(b1) - len(a1)) + a1\n    i = 0\n    s = 0\n    while a1[i] == b1[i]:\n        s += int(a1[i]) * 2 ** (len(a1) - i - 1)\n        i += 1\n    for j in range(i, len(a1)):\n        if a1[j] == '0' and b1[j] == '0':\n            if a + 2 ** (len(a1) - j - 1) <= b:\n                s = s + 2 ** (len(a1) - j - 1)\n                a = a + 2 ** (len(a1) - j - 1)\n        else:\n            s = s + 2 ** (len(a1) - j - 1)\n    return s\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(ans(a, b))", "for _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    x = l ^ r\n    m = 1\n    while x:\n        x >>= 1\n        m <<= 1\n    print(r | m - 1)", "tests = int(input())\nwhile tests:\n    tests -= 1\n    (l, r) = map(int, input().split())\n    (l, r) = (bin(l)[2:], bin(r)[2:])\n    m = max(len(l), len(r))\n    l = l.zfill(m)\n    ans = ''\n    for (i, j) in zip(l, r):\n        if i == j:\n            ans += i\n        else:\n            ans += '1'\n            break\n    for i in range(m - len(ans)):\n        ans += '1'\n    print(int(ans, 2))", "tests = int(input())\nwhile tests:\n    tests -= 1\n    (l, r) = map(lambda x: x[2:], map(bin, map(int, input().split())))\n    m = max(len(l), len(r))\n    l = l.zfill(m)\n    ans = ''\n    for (i, j) in zip(l, r):\n        if i == j:\n            ans += i\n        else:\n            ans += '1'\n            break\n    for i in range(m - len(ans)):\n        ans += '1'\n    print(int(ans, 2))", "try:\n    num = int(input())\n    while num > 0:\n        (l, r) = map(int, input().split())\n        r = bin(r)\n        l = bin(l)\n        size = len(r)\n        count = 0\n        i = 2\n        if len(r) != len(l):\n            r = list(r)\n            while i < size:\n                r[i] = '1'\n                i += 1\n            r = ''.join(r)\n        else:\n            while i < size:\n                if r[i] == l[i]:\n                    count += 1\n                else:\n                    break\n                i += 1\n            index = 2 + count\n            r = list(r)\n            while index < size:\n                r[index] = '1'\n                index += 1\n            r = ''.join(r)\n        print(int(r, 2))\n        num -= 1\nexcept:\n    pass", "import math\n\ndef fun(l, r):\n    (bitl, bitr) = (1, 1)\n    if (l == 0 or l == 1) and (r == 0 or r == 1):\n        return l | r\n    if l == r:\n        return l\n    if l != 0:\n        bitl = int(math.log2(l)) + 1\n    if r != 0:\n        bitr = int(math.log2(r)) + 1\n    ans = 0\n    if bitl != bitr:\n        ans = 2 ** bitr - 1\n    else:\n        v = 2 ** (bitr - 1)\n        ans = 2 ** (bitr - 1) + fun(l % v, r % v)\n    return ans\nfor _ in range(int(input())):\n    (l, r) = list(map(int, input().split()))\n    print(fun(l, r))", "import math\nfor _ in range(int(input())):\n    (l, r) = list(map(int, input().split()))\n    bitl = int(math.log2(l)) + 1\n    bitr = int(math.log2(r)) + 1\n    if bitr != bitl:\n        ans = 2 ** bitr - 1\n        print(ans)\n    else:\n        ans = 0\n        flag = False\n        tmp = 2 ** (bitr - 1)\n        for i in range(bitr - 1, -1, -1):\n            if l & tmp != r & tmp or flag:\n                ans += tmp\n                flag = True\n            elif l & tmp:\n                ans += tmp\n            tmp //= 2\n        print(ans)", "import math\nfor _ in range(int(input())):\n    (l, r) = list(map(int, input().split()))\n    bitl = int(math.log2(l)) + 1\n    bitr = int(math.log2(r)) + 1\n    if bitr != bitl:\n        ans = 2 ** bitr - 1\n        print(ans)\n    else:\n        ans = 0\n        flag = False\n        tmp = 2 ** (bitr - 1)\n        for i in range(bitr - 1, -1, -1):\n            if l & tmp != r & tmp or flag:\n                ans += pow(2, i)\n                flag = True\n            elif l & tmp:\n                ans += tmp\n            tmp //= 2\n        print(ans)", "for _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    (first, second) = (bin(l)[2:], bin(r)[2:])\n    if len(first) == len(second):\n        cur = len(first)\n        for i in range(len(first)):\n            if first[i] == second[i]:\n                cur -= 1\n            else:\n                break\n        print(r | (1 << cur) - 1)\n    else:\n        print((1 << len(second)) - 1)", "t = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    ans = ''\n    x = f'{l:64b}'\n    y = f'{r:64b}'\n    pos = 64\n    for i in range(64):\n        if x[i] != y[i]:\n            pos = i\n            break\n        else:\n            ans += x[i]\n    for j in range(pos, 64):\n        ans += '1'\n    print(int(ans, 2))", "t = int(input())\nfor _ in range(t):\n    (a, b) = input().split()\n    a = int(a)\n    b = int(b)\n    p = bin(a).replace('0b', '')\n    q = bin(b).replace('0b', '')\n    if len(p) < len(q):\n        q = q.replace('0', '1')\n        print(int(q, 2))\n    else:\n        temp = 0\n        for i in range(1, len(q) + 1):\n            if q[0:i] != p[0:i]:\n                temp = i - 1\n                break\n        if temp != 0:\n            q = q[0:temp] + q[temp:].replace('0', '1')\n        print(int(q, 2))", "from numpy import binary_repr\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    l_bin = binary_repr(l, 64)\n    r_bin = binary_repr(r, 64)\n    i = -1\n    if l == r:\n        print(l)\n    else:\n        while True:\n            i += 1\n            if l_bin[i] == r_bin[i]:\n                continue\n            else:\n                break\n        print(int(r_bin[0:i] + '1' * (64 - i), 2))", "t = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    a = str(bin(l).replace('0b', ''))\n    b = str(bin(r).replace('0b', ''))\n    k = ''\n    q = 0\n    if len(a) == len(b):\n        for i in range(len(a)):\n            if a[i] == '1' and b[i] == '1':\n                k += '1'\n            elif a[i] == '0' and b[i] == '1':\n                k += '1'\n                q = 1\n            elif a[i] == '1' and b[i] == '0':\n                k += '1'\n            elif a[i] == '0' and b[i] == '0':\n                if q == 1:\n                    k += '1'\n                else:\n                    k += '0'\n    else:\n        k = '1' * len(b)\n    print(int(k, 2))", "from sys import stdin\nt = int(stdin.readline())\nwhile t:\n    (l, r) = map(int, stdin.readline().split())\n    (bl, br) = (str(bin(l))[2:], str(bin(r))[2:])\n    if len(bl) == len(br):\n        res = ['1'] * len(br)\n        for i in range(len(br)):\n            if br[i] == bl[i]:\n                res[i] = br[i]\n            else:\n                break\n        res = ''.join(res)\n    else:\n        res = '1' * len(br)\n    print(int(res, 2))\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    L = str(bin(l))[2:]\n    R = str(bin(r))[2:]\n    if len(L) == len(R):\n        res = ['1'] * len(R)\n        for i in range(len(R)):\n            if R[i] == L[i]:\n                res[i] = R[i]\n            else:\n                break\n        res = ''.join(res)\n    else:\n        res = '1' * len(R)\n    num = int(res, 2)\n    print(num)", "t = int(input())\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    (a, b) = (bin(l), bin(r))\n    (a, b) = (a[2:], b[2:])\n    if len(b) > len(a):\n        x = len(b) - len(a)\n        a = '0' * x + a\n    ans = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            ans += a[i]\n        elif a[i] == '0' and b[i] == '1':\n            ans += '1'\n            break\n    y = len(ans)\n    if y < len(b):\n        z = len(a) - y\n        ans += '1' * z\n    print(int(ans, 2))", "for _ in range(int(input())):\n    (l, r) = [int(x) for x in input().split()]\n    c = 1\n    while l != r:\n        l = l >> 1\n        r = r >> 1\n        c = c << 1\n    l = l * c\n    c = c - 1\n    l = l | c\n    print(l)", "import math\nt = int(input())\nwhile t > 0:\n    (l, r) = input().split()\n    l = int(l)\n    r = int(r)\n    if l == r:\n        print(l)\n    else:\n        a = 0\n        b = 0\n        length = int(math.log(r, 2)) + 1\n        for i in range(length - 1, -1, -1):\n            n = 1 << i\n            if l & n != 0 and r & n != 0:\n                a = a | n\n                b = b | n\n            elif l & n == 0 and r & n == 0:\n                continue\n            else:\n                break\n        if i >= 0:\n            b = b | n\n            i -= 1\n        while i >= 0:\n            n = 1 << i\n            a = a | n\n            i -= 1\n        print(a | b)\n    t -= 1", "import math\nt = int(input())\nwhile t > 0:\n    (l, r) = input().split()\n    l = int(l)\n    r = int(r)\n    if l == r:\n        print(l)\n    else:\n        a = 0\n        b = 0\n        length = int(math.log(r, 2)) + 1\n        for i in range(length - 1, -1, -1):\n            n = 1 << i\n            if l & n != 0 and r & n != 0:\n                a = a | n\n                b = b | n\n            elif l & n == 0 and r & n == 0:\n                continue\n            else:\n                break\n        if i >= 0:\n            b = b | n\n            i -= 1\n        while i >= 0:\n            n = 1 << i\n            a = a | n\n            i -= 1\n        print(a | b)\n    t -= 1", "for _ in range(int(input())):\n    (L, R) = map(int, input().split())\n    maxl = 1\n    while maxl << 1 <= R:\n        maxl = maxl << 1\n    if maxl - 1 >= L:\n        print(maxl - 1 | R)\n    else:\n        while L | L + 1 <= R:\n            L |= L + 1\n        print(L | R)", "def countTotalBits(num):\n    binary = bin(num)[2:]\n    return (len(binary), str(binary))\n\ndef comparision(string_l, string_r):\n    l = len(string_l)\n    c = 0\n    for k in range(l):\n        if string_l[k] == string_r[k]:\n            c += 1\n        else:\n            break\n    return c\nnumber_of_test_cases = int(input())\nfor t in range(number_of_test_cases):\n    (l, r) = input().split()\n    (l, r) = [int(l), int(r)]\n    (min_length, string_l) = countTotalBits(l)\n    (max_length, string_r) = countTotalBits(r)\n    if max_length - min_length > 0:\n        temp = int('1' * (max_length - 1), 2)\n        print(temp | r)\n    else:\n        temp = comparision(string_l, string_r)\n        answer = string_l[:temp] + '1' * (max_length - temp)\n        print(int(answer, 2))", "t = int(input())\nfor _ in range(t):\n    (L, R) = map(int, input().split())\n    bl = bin(L)[2:]\n    br = bin(R)[2:]\n    if len(bl) < len(br):\n        nl = '1' * len(br)\n        print(int(nl, 2))\n    else:\n        com_end = 0\n        while com_end < len(bl):\n            if bl[com_end] != br[com_end]:\n                break\n            com_end = com_end + 1\n        t = '1' * (len(bl) - com_end)\n        ans = br[:com_end] + t\n        print(int(ans, 2))", "t = int(input())\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    binary = bin(r)\n    binary = binary[2:]\n    binary = list(binary)\n    ans = r\n    for i in range(len(binary)):\n        if binary[i] == '0':\n            num = ['1'] * (len(binary) - i)\n            num = int(''.join(num), 2)\n            if num < r and num >= l:\n                ans = r | num\n                break\n            else:\n                alter = bin(l)\n                alter = alter[2:]\n                alter = list(alter)\n                for j in range(len(alter) - 1, -1, -1):\n                    if alter[j] == '0':\n                        x = alter[:]\n                        x[j] == '1'\n                        x = int(''.join(x), 2)\n                        if x >= r:\n                            break\n                        else:\n                            alter[j] = '1'\n                alter = ''.join(alter)\n                alter = int(alter, 2)\n                ans = r | alter\n                break\n    print(ans)", "for p in range(int(input())):\n    (l, r) = map(int, input().split())\n    bl = bin(l)[2:]\n    br = bin(r)[2:]\n    br = str(br)\n    bl = str(bl)\n    bl = '0' * (len(br) - len(bl)) + str(bl)\n    a = ''\n    b = ''\n    for i in range(len(bl)):\n        if bl[i] == '0' and br[i] == '1' and (i < len(bl) - 1):\n            a += '01'\n            b += '10'\n            break\n        else:\n            a += bl[i]\n            b += br[i]\n    a += '1' * (len(br) - len(a))\n    b += '1' * (len(br) - len(b))\n    print(int(a, 2) | int(b, 2))", "t = int(input())\nfor _ in range(t):\n    (L, R) = map(int, input().split())\n    first = '{0:b}'.format(R)\n    second = '{0:b}'.format(L)\n    first = '0' * (64 - len(first)) + first\n    second = '0' * (64 - len(second)) + second\n    i = 0\n    while i < 64:\n        if first[i] == '1' and second[i] == '0':\n            break\n        i += 1\n    ans = 0\n    for j in range(i):\n        if first[j] == '1':\n            ans += 2 ** (63 - j)\n    for k in range(i, 64):\n        ans += 2 ** (63 - k)\n    print(ans)", "try:\n    for _ in range(int(input())):\n        (l, r) = [int(a) for a in input().split()]\n        lb = bin(l)[2:]\n        rb = bin(r)[2:]\n        n = len(lb)\n        m = len(rb)\n        x = ['0'] * (m - n) + list(lb)\n        y = list(rb)\n        i = 0\n        while i < m:\n            if x[i] != y[i]:\n                break\n            i += 1\n        x = x[:i] + ['1'] * (m - i)\n        x = ''.join(x)\n        print(int(x, 2) | r)\nexcept:\n    pass", "for _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    (lb, rb) = (bin(l)[2:], bin(r)[2:])\n    (ll, rl) = (len(lb), len(rb))\n    if l == 0 and r == 0:\n        print(0)\n        continue\n    if l == r:\n        print(l)\n        continue\n    ans = ''\n    if ll == rl:\n        i = 0\n        for i in range(ll):\n            if lb[i] != rb[i]:\n                break\n            else:\n                ans += lb[i]\n        ans += '1' * (ll - i)\n    else:\n        ans += '1' * rl\n    print(int(ans, 2))", "for ii in range(int(input())):\n    (l, r) = map(int, input().split())\n    lb = bin(l)[2:]\n    rb = bin(r)[2:]\n    lb = '0' * (len(rb) - len(lb)) + lb\n    s = ''\n    flag = 0\n    for i in range(len(rb)):\n        if flag or lb[i] != rb[i]:\n            flag = 1\n            s += '1'\n        else:\n            s += rb[i]\n    x = 0\n    ss = s[::-1]\n    p = 1\n    for i in ss:\n        x += int(i) * p\n        p = p * 2\n    print(x)", "for _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    x = l ^ r\n    m = 1\n    while x:\n        x >>= 1\n        m <<= 1\n    print(r | m - 1)", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (a, b) = map(int, input().split())\n    c = bin(a)\n    d = bin(b)\n    if len(c) != len(d):\n        for i in range(0, len(d) - len(c)):\n            c = c[0:2] + '0' + c[2:]\n    i = 0\n    while i < len(d) and c[i] == d[i]:\n        i += 1\n    c = c[0:i]\n    for j in range(i, len(d)):\n        c += '1'\n    print(int(c, 2))", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (a, b) = map(int, input().split())\n    c = bin(a)\n    d = bin(b)\n    if len(c) != len(d):\n        for i in range(0, len(d) - len(c)):\n            c = c[0:2] + '0' + c[2:]\n    i = 0\n    while i < len(d) and c[i] == d[i]:\n        i += 1\n    c = c[0:i]\n    for j in range(i, len(d)):\n        c += '1'\n    print(int(c, 2))", "from sys import stdin\nt = int(stdin.readline())\nwhile t:\n    (l, r) = [int(x) for x in stdin.readline().split()]\n    if l == r:\n        print(r)\n    else:\n        bin_l = f'{l:064b}'\n        bin_r = f'{r:064b}'\n        i = 0\n        max_val = ''\n        while bin_l[i] == bin_r[i]:\n            max_val += bin_l[i]\n            i += 1\n        temp = 64 - i\n        for i in range(temp):\n            max_val += '1'\n        print(int(max_val, 2))\n    t -= 1", "def till_what_length(str1, str2):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            break\n        count += 1\n    return count\n\ndef get_bin(x, l):\n    return format(x, 'b').zfill(l)\ntest = int(input())\nfor _ in range(test):\n    (l, r) = input().split()\n    l = int(l)\n    r = int(r)\n    n = len(bin(r)[2:])\n    l1 = get_bin(l, n)\n    r1 = get_bin(r, n)\n    counter = till_what_length(l1, r1)\n    final_bin = l1[0:counter] + '1' * (n - counter)\n    print(int(final_bin, 2))", "a = int(input())\nfor i in range(a):\n    (t, r) = map(int, input().split())\n    s1 = bin(t)\n    k1 = s1[2:]\n    s2 = bin(r)\n    k2 = s2[2:]\n    final = ''\n    fin = ''\n    if len(k1) != len(k2):\n        print(2 ** len(k2) - 1)\n    else:\n        for i in range(len(k1)):\n            if k1[i] != k2[i]:\n                for j in range(i + 1, len(k1)):\n                    final = final + '1'\n                break\n        fin = k1[0:i + 1] + final\n        print(r | int(fin, 2))", "def binaryToDecimal(n):\n    return int(n, 2)\n\ndef decimalToBinary(n):\n    return bin(n).replace('0b', '')\nt = int(input())\nfor i in range(t):\n    (l, r) = input().split()\n    l = int(l)\n    r = int(r)\n    str1 = decimalToBinary(l)\n    str2 = decimalToBinary(r)\n    lendiff = len(str2) - len(str1)\n    temp = '0' * lendiff\n    newstr = temp + str1[:]\n    cnt = 0\n    for j in range(len(str2)):\n        if str2[j] == newstr[j]:\n            cnt += 1\n        else:\n            break\n    ans = str2[:cnt] + '1' * (len(str2) - cnt)\n    print(binaryToDecimal(ans))", "import math\n\ndef invert_bits(num):\n    x = math.floor(math.log(num, 2) + 1)\n    for i in range(0, x):\n        num = num ^ 1 << i\n    return num\n\ndef turn_on(l, r):\n    bit_l = list(bin(l)[2:])\n    bit_r = list(bin(r)[2:])\n    bit_l = ['0'] * (len(bit_r) - len(bit_l)) + bit_l\n    for i in range(len(bit_l)):\n        if bit_r[i] == '0':\n            bit = False\n            if bit_l[i] == '0':\n                bit = True\n            bit_l[i] = '1'\n            ans = int(''.join(bit_l), 2)\n            if ans >= l and ans <= r:\n                continue\n            if bit:\n                bit_l[i] = '0'\n    return int(''.join(bit_r), 2) | int(''.join(bit_l), 2)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (l, r) = map(int, input().split())\n    print(turn_on(l, r))", "def IntegerCreator(x2, start, end):\n    for i in range(start, end):\n        if x2[i] == '0':\n            x2[i] = '1'\n    return x2\n\ndef preComputation():\n    arr = [1]\n    for i in range(1, 64):\n        arr.append(arr[-1] * 2)\n    return arr\nt = int(input())\narr = preComputation()\nwhile t:\n    t -= 1\n    (l, r) = map(int, input().split())\n    x1 = bin(l)[2:]\n    x2 = bin(r)[2:]\n    l1 = len(x1)\n    l2 = len(x2)\n    for i in range(l2 - l1):\n        x1 = '0' + x1\n    x1 = list(x1)\n    x2 = list(x2)\n    for i in range(l2):\n        if x2[i] == '1':\n            if x1[i] == '1':\n                pass\n            else:\n                x2 = IntegerCreator(x2, i, l2)\n                break\n    x2 = ''.join(x2)\n    ans = 0\n    for i in range(l2):\n        if x2[l2 - i - 1] == '1':\n            ans += arr[i]\n    print(ans)", "def IntegerCreator(x2, start, end):\n    for i in range(start, end):\n        if x2[i] == '0':\n            x2[i] = '1'\n    return x2\nt = int(input())\nwhile t:\n    t -= 1\n    (l, r) = map(int, input().split())\n    x1 = bin(l)[2:]\n    x2 = bin(r)[2:]\n    l1 = len(x1)\n    l2 = len(x2)\n    for i in range(l2 - l1):\n        x1 = '0' + x1\n    x1 = list(x1)\n    x2 = list(x2)\n    for i in range(l2):\n        if x2[i] == '1':\n            if x1[i] == '1':\n                pass\n            else:\n                x2 = IntegerCreator(x2, i, l2)\n                break\n    x2 = ''.join(x2)\n    ans = 0\n    for i in range(l2):\n        if x2[l2 - i - 1] == '1':\n            ans += 1 << i\n    print(ans)", "for _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    sl = bin(l)[2:]\n    sr = bin(r)[2:]\n    (nl, nr) = (len(sl), len(sr))\n    sl = '0' * (nr - nl) + sl\n    idx = 0\n    for i in range(nr):\n        if sl[i] != sr[i]:\n            break\n    idx = i + 1\n    sl = sl[:idx] + '1' * (nr - idx)\n    print(int(sl, 2) | r)", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    x = bin(a)[2:]\n    y = bin(b)[2:]\n    n = len(x)\n    m = len(y)\n    x = ['0'] * (m - n) + list(x)\n    y = list(y)\n    i = 0\n    while i < m:\n        if x[i] != y[i]:\n            break\n        i += 1\n    x = x[:i] + ['1'] * (m - i)\n    x = ''.join(x)\n    print(int(x, 2) | b)", "import math\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    lol = int(math.log(r, 2))\n    z = pow(2, lol) - 1\n    if pow(2, lol) - 1 >= l:\n        print(z | z + 1)\n    else:\n        lol = bin(l)[2:]\n        i = -1\n        while int(lol, base=2) < r:\n            lol = list(lol)\n            lol[i] = '1'\n            lol = ''.join(lol)\n            i -= 1\n        print(int(int(lol, base=2)) | r)", "t = int(input())\nfor f in range(t):\n    (L, R) = map(int, input().split())\n    ls = bin(L)\n    rs = bin(R)\n    l = ls[2:]\n    r = rs[2:]\n    for i in range(len(rs) - len(ls)):\n        l = '0' + l\n    s = len(r)\n    for i in range(s):\n        if l[i] != r[i]:\n            r = r[:i + 1]\n            for j in range(i + 1, s):\n                r += '1'\n            break\n    r = '0b' + r\n    print(int(r, 2))", "t = int(input())\nfor f in range(t):\n    (L, R) = map(int, input().split())\n    ls = bin(L)\n    rs = bin(R)\n    l = ls[2:]\n    r = rs[2:]\n    for i in range(len(rs) - len(ls)):\n        l = '0' + l\n    for i in range(len(r)):\n        if l[i] != r[i]:\n            r = r[:i + 1]\n            for j in range(i + 1, len(l)):\n                r += '1'\n            break\n    r = '0b' + r\n    print(int(r, 2))", "t = int(input())\nfor f in range(t):\n    (L, R) = map(int, input().split())\n    ls = bin(L)\n    rs = bin(R)\n    l = ls[2:]\n    r = rs[2:]\n    for i in range(len(rs) - len(ls)):\n        l = '0' + l\n    for i in range(len(r)):\n        if l[i] != r[i]:\n            l = l[:i + 1]\n            for j in range(i + 1, len(r)):\n                l += '1'\n            break\n    print(int('0b' + l, 2) | int('0b' + r, 2))", "t = int(input())\nfor f in range(t):\n    (L, R) = map(int, input().split())\n    ls = bin(L)\n    rs = bin(R)\n    l = ls[2:]\n    r = rs[2:]\n    for i in range(len(rs) - len(ls)):\n        l = '0' + l\n    for i in range(len(r)):\n        if l[i] != r[i]:\n            l = l[:i + 1]\n            for j in range(i + 1, len(r)):\n                l += '1'\n            break\n    l = '0b' + l\n    r = '0b' + r\n    print(int(l, 2) | int(r, 2))", "t = int(input())\nfor f in range(t):\n    (L, R) = map(int, input().split())\n    ls = bin(L)\n    rs = bin(R)\n    l = ls[2:]\n    r = rs[2:]\n    for i in range(len(rs) - len(ls)):\n        l = '0' + l\n    for i in range(len(r)):\n        if l[i] != r[i]:\n            l = l[:i + 1]\n            for j in range(i + 1, len(r)):\n                l += '1'\n            break\n    l = '0b' + l\n    r = '0b' + r\n    L = int(l, 2)\n    R = int(r, 2)\n    print(L | R)", "for _ in range(int(input())):\n    (L, R) = map(int, input().split())\n    R1 = R\n    (L, R) = (bin(L)[2:], bin(R)[2:])\n    (x, y) = (len(L), len(R))\n    L = ['0'] * (y - x) + list(L)\n    R = list(R)\n    i = 0\n    while i < y:\n        if L[i] != R[i]:\n            break\n        i += 1\n    L = L[:i] + ['1'] * (y - i)\n    L = ''.join(L)\n    print(int(L, 2) | R1)", "t = int(input())\nfor x0 in range(t):\n    (l, r) = input().split()\n    l = int(l)\n    r = int(r)\n    strs1 = '{0:b}'.format(max(l, r))\n    strs2 = '{0:b}'.format(min(l, r))\n    if len(strs1) != len(strs2):\n        ans = 2 ** max(len(strs1), len(strs2)) - 1\n    else:\n        i = 0\n        fin = ''\n        while i < len(strs1):\n            if strs1[i] == strs2[i]:\n                fin += strs1[i]\n            else:\n                while i < len(strs1):\n                    fin += '1'\n                    i += 1\n            i += 1\n        ans = int(fin, 2)\n    print(ans)", "for _ in range(int(input())):\n    (a, b) = [int(j) for j in input().split()]\n    (s1, s2) = (bin(a)[2:], bin(b)[2:])\n    l1 = s1\n    l2 = s2\n    if len(l1) != len(l2):\n        ans = '1' * len(l2)\n    else:\n        ans = ''\n        for i in range(len(l1)):\n            if l1[i] == l2[i]:\n                ans = ans + l1[i]\n            else:\n                break\n        ans = ans + (len(l1) - len(ans)) * '1'\n    print(int(ans, 2))", "import math\n\ndef invert_bits(num):\n    x = math.floor(math.log(num, 2) + 1)\n    for i in range(0, x):\n        num = num ^ 1 << i\n    return num\n\ndef turn_on(l, r):\n    bit_l = list(bin(l)[2:])\n    bit_r = list(bin(r)[2:])\n    bit_l = ['0'] * (len(bit_r) - len(bit_l)) + bit_l\n    for i in range(len(bit_l)):\n        if bit_r[i] == '0':\n            bit = False\n            if bit_l[i] == '0':\n                bit = True\n            bit_l[i] = '1'\n            ans = int(''.join(bit_l), 2)\n            if ans >= l and ans <= r:\n                continue\n            if bit:\n                bit_l[i] = '0'\n    return int(''.join(bit_r), 2) | int(''.join(bit_l), 2)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (l, r) = map(int, input().split())\n    print(turn_on(l, r))", "for _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    x = list(bin(x)[2:])\n    y = list(bin(y)[2:])\n    x = list('0' * (len(y) - len(x))) + x\n    for i in range(len(y)):\n        if y[i] == '1' and x[i] == '0':\n            for j in range(i + 1, len(y)):\n                y[j] = '1'\n            break\n    y = int(''.join(y), 2)\n    print(y)", "def solve(l, r):\n    r = bin(r)[2:]\n    l = bin(l)[2:]\n    l = '0' * (len(r) - len(l)) + l\n    (res, beg) = ('', True)\n    for (u, d) in zip(r, l):\n        if u == d and beg:\n            res += u\n        elif beg:\n            beg = False\n            res += u\n        else:\n            res += '1'\n    return int(res, 2)\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    print(solve(l, r))", "for _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    xr = l ^ r\n    msb = 1\n    while xr:\n        xr = xr >> 1\n        msb = msb << 1\n    print(r | msb - 1)", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    if N == M:\n        print(N)\n        continue\n    a = 0\n    b = 0\n    x = N\n    y = M\n    s = 0\n    t = 0\n    while N > 0:\n        a = a * 10 + N % 2\n        N = N // 2\n        s += 1\n    while M > 0:\n        b = b * 10 + M % 2\n        M = M // 2\n        t += 1\n    N = x\n    M = y\n    if s == t:\n        p = s\n        p = 2 ** (p - 1)\n        v = 0\n        while b > 0:\n            if a % 10 != b % 10:\n                break\n            v += p * (b % 10)\n            a = a // 10\n            b = b // 10\n            p = p // 2\n        v += p + p - 1\n        print(v)\n    else:\n        p = t\n        p = 2 ** (p - 1)\n        v = p + p - 1\n        print(v)", "def convert(n, arr):\n    for i in range(60):\n        arr[-(i + 1)] = n % 2\n        n = n // 2\nt = int(input())\nfor i in range(t):\n    (l, r) = [int(i) for i in input().split()]\n    l_bit = [0 for i in range(60)]\n    r_bit = [0 for i in range(60)]\n    convert(l, l_bit)\n    convert(r, r_bit)\n    ans = 0\n    for i in range(60):\n        if l_bit[i] == 1 and r_bit[i] == 1:\n            ans += 2 ** (59 - i)\n        elif l_bit[i] == 0 and r_bit[i] == 1:\n            ans += 2 ** (60 - i) - 1\n            break\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    d = l ^ r\n    m = 1\n    while d:\n        d >>= 1\n        m <<= 1\n    print(r | m - 1)", "for w in range(int(input())):\n    (l, r) = [int(n) for n in input().split()]\n    l = str(bin(l))\n    r = str(bin(r))\n    while len(l) != len(r):\n        l = l[0:2] + '0' + l[2:]\n    index = 0\n    if l != r:\n        while l[index] == r[index]:\n            index += 1\n        l = l[:index + 1] + ''.join(['1' * (len(l) - index - 1)])\n        r = r[:index + 1] + ''.join(['0' * (len(r) - index - 1)])\n    print(int(l, 2) | int(r, 2))", "from math import log\nfor _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    val = log(M, 2)\n    if N == M:\n        print(N)\n    elif val == int(val):\n        print(M | M - 1)\n    elif len(bin(N)) != len(bin(M)):\n        print(M | 2 ** int(val) - 1)\n    else:\n        p = bin(M)[2:]\n        q = bin(N)[2:]\n        for i in range(len(p)):\n            if p[i] != q[i]:\n                w = i\n                break\n        plo = ''\n        for i in range(len(q)):\n            if i > w:\n                plo += '1'\n            else:\n                plo += q[i]\n        new = int(plo, 2)\n        print(M | new)", "def decimalToBinary(n):\n    return bin(n).replace('0b', '')\n\ndef binaryToDecimal(n):\n    return int(n, 2)\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    if a == 0 and b == 0:\n        print(0)\n    elif a == b:\n        print(a)\n    else:\n        a_bin = decimalToBinary(a)\n        b_bin = decimalToBinary(b)\n        if len(a_bin) == len(b_bin):\n            for i in range(len(a_bin)):\n                if a_bin[i] == b_bin[i]:\n                    continue\n                else:\n                    ind = i\n                    break\n            ans_st = ''\n            for i in range(len(a_bin)):\n                if i < ind:\n                    ans_st += a_bin[i]\n                else:\n                    ans_st += '1'\n            ans = binaryToDecimal(ans_st)\n            print(ans)\n        elif len(a_bin) < len(b_bin):\n            ans_st = ''\n            for i in range(len(b_bin)):\n                ans_st += '1'\n            ans = binaryToDecimal(ans_st)\n            print(ans)", "def decimalToBinary(n):\n    return bin(n).replace('0b', '')\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    (a, b) = (decimalToBinary(l), decimalToBinary(r))\n    if len(a) != len(b):\n        print(pow(2, max(len(a), len(b))) - 1)\n    else:\n        ans = ''\n        index = 0\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                ans += a[i]\n                continue\n            index = i\n            break\n        if index != 0:\n            for i in range(index, len(a)):\n                ans += '1'\n        print(int(ans, 2))", "def decimalToBinary(n):\n    return bin(n).replace('0b', '')\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    (a, b) = (decimalToBinary(l), decimalToBinary(r))\n    if len(a) != len(b):\n        print(pow(2, max(len(a), len(b))) - 1)\n    elif l == r:\n        print(l)\n    else:\n        ans = ''\n        index = 0\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                ans += a[i]\n                continue\n            index = i\n            break\n        for i in range(index, len(a)):\n            ans += '1'\n        print(int(ans, 2))", "def decimalToBinary(n):\n    return bin(n).replace('0b', '')\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    (a, b) = (decimalToBinary(l), decimalToBinary(r))\n    if len(a) > len(b):\n        print(pow(2, len(a)) - 1)\n    elif len(a) < len(b):\n        print(pow(2, len(b)) - 1)\n    elif l == r:\n        print(l)\n    else:\n        ans = ''\n        index = 0\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                ans += a[i]\n                continue\n            index = i\n            break\n        for i in range(index, len(a)):\n            ans += '1'\n        print(int(ans, 2))", "def decimalToBinary(n):\n    return bin(n).replace('0b', '')\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    (a, b) = (decimalToBinary(l), decimalToBinary(r))\n    if max(l, r) <= 100:\n        m = -1\n        for i in range(min(l, r), max(l, r) + 1):\n            for j in range(min(l, r), max(l, r) + 1):\n                if i | j > m:\n                    m = i | j\n        print(m)\n    elif len(a) > len(b):\n        print(pow(2, len(a)) - 1)\n    elif len(a) < len(b):\n        print(pow(2, len(b)) - 1)\n    elif l == r:\n        print(l)\n    else:\n        ans = ''\n        index = 0\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                ans += a[i]\n                continue\n            index = i\n            break\n        for i in range(index, len(a)):\n            ans += '1'\n        print(int(ans, 2))", "import sys\n\ndef different_bit_pos(x, y):\n    max_len = max(len(x), len(y))\n    if len(x) == max_len:\n        new_y = ''\n        for i in range(max_len - len(y)):\n            new_y += '0'\n        new_y += y\n        y = new_y\n    elif len(y) == max_len:\n        new_x = ''\n        for i in range(max_len - len(x)):\n            new_x += '0'\n        new_x += x\n        x = new_x\n    for i in range(max_len):\n        if x[i] != y[i]:\n            return (i, x, y)\n    return (-1, x, y)\nt = int(sys.stdin.readline())\nfor test_case in range(t):\n    (l, r) = map(int, sys.stdin.readline().split())\n    left_digit = bin(l)[2:]\n    right_digit = bin(r)[2:]\n    (pos, left_digit, right_digit) = different_bit_pos(left_digit, right_digit)\n    if pos != -1:\n        constructed_left = left_digit[:pos]\n        constructed_right = right_digit[:pos]\n        constructed_left += '0'\n        constructed_right += '1'\n        for i in range(len(left_digit) - pos - 1):\n            constructed_left += '1'\n            constructed_right += '0'\n        l = int(constructed_left, 2)\n        r = int(constructed_right, 2)\n        print(l | r)\n    else:\n        print(l)", "for i in range(int(input())):\n    (l, r) = map(int, input().split())\n    sr = bin(r).replace('0b', '')\n    sl = bin(l).replace('0b', '')\n    ans = 0\n    if len(sr) > len(sl):\n        for i in range(len(sr)):\n            ans += 2 ** i\n        print(ans)\n    else:\n        k = r\n        t = l\n        for i in range(len(sr)):\n            if sr[i] == '0':\n                if sl[i] == '0':\n                    if t + 2 ** (len(sr) - 1 - i) <= r:\n                        k += 2 ** (len(sr) - 1 - i)\n                        t += 2 ** (len(sr) - 1 - i)\n                if sl[i] == '1':\n                    k += 2 ** (len(sr) - 1 - i)\n        print(k)", "while True:\n    try:\n        for _ in range(int(input())):\n            (l, r) = map(int, input().split())\n            (l, r) = (min(l, r), max(l, r))\n            binL = bin(l)[2:]\n            binR = bin(r)[2:]\n            llen = len(binL)\n            rlen = len(binR)\n            binL = '0' * (rlen - llen) + binL\n            llen = rlen\n            ans = []\n            ind = -1\n            i = 0\n            while i < rlen and binR[i] == binL[i]:\n                ans.append(binR[i])\n                ind = i\n                i += 1\n            ans += ['1'] * (rlen - 1 - ind)\n            print(int(''.join(ans), 2))\n    except (ValueError, EOFError) as e:\n        break", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (l, r) = list(map(int, input().split()))\n    l = bin(l).replace('0b', '')\n    r = bin(r).replace('0b', '')\n    if len(l) < len(r):\n        print(int('1' * len(r), 2))\n    elif len(l) == len(r):\n        for i in range(len(l)):\n            if r[i] == '1' and l[i] == '0':\n                r = r[:i] + '1' * (len(l) - i)\n                break\n        print(int(r, 2))", "for _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    i = 0\n    while l | 1 << i < r:\n        l = l | 1 << i\n        i += 1\n    print(l | r)", "import math\nfor _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    numberOfbitsofL = int(math.log2(l) + 1)\n    numberOfbitsofR = int(math.log2(r) + 1)\n    bil = bin(l).replace('0b', '')\n    bir = bin(r).replace('0b', '')\n    if numberOfbitsofL == numberOfbitsofR:\n        maxx = 0\n        s = ''\n        for i in range(numberOfbitsofR):\n            s += bir[i]\n            if bil[i] != bir[i]:\n                break\n        s += '1' * (numberOfbitsofR - i - 1)\n        print(int(s, 2))\n        continue\n    else:\n        print(int('1' * numberOfbitsofR, 2))\n        continue", "for _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    (bl, br) = (bin(l)[2:], bin(r)[2:])\n    (l1, l2) = (len(bl), len(br))\n    bl = '0' * (l2 - l1) + bl\n    for i in range(l2):\n        if bl[i] != br[i]:\n            break\n    bl = bl[:i + 1] + (l2 - (i + 1)) * '1'\n    print(int(bl, 2) | int(br, 2))", "for _ in range(int(input())):\n    (l, r) = map(int, input().split())\n    if l == r:\n        print(l)\n        continue\n    bin_l = bin(l)[2:]\n    bin_r = bin(r)[2:]\n    if len(bin_l) < len(bin_r):\n        bin_l = '0' * (len(bin_r) - len(bin_l)) + bin_l\n    i = 0\n    while bin_l[i] == bin_r[i]:\n        i += 1\n    ans = bin_r[:i] + '1' * (len(bin_r) - i)\n    print(int(ans, 2))"]