["for i in range(int(input())):\n    (n, c) = map(int, input().split())\n    pts = {}\n    moves = 0\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        if (y - x, x % c) in pts:\n            pts[y - x, x % c].append(x)\n        else:\n            pts[y - x, x % c] = [x]\n    for i in pts:\n        arc = sorted(pts[i])\n        for j in arc:\n            moves = moves + abs(j - arc[len(arc) // 2]) // c\n    print(len(pts), moves)", "for i in range(int(input())):\n    (n, c) = map(int, input().split())\n    pts = {}\n    moves = 0\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        if (y - x, x % c) in pts:\n            pts[y - x, x % c].append(x)\n        else:\n            pts[y - x, x % c] = [x]\n    for i in pts:\n        arc = sorted(pts[i])\n        for j in arc:\n            moves = moves + abs(j - arc[len(arc) // 2]) // c\n    print(len(pts), moves)", "import sys, math, itertools, random, bisect\nfrom collections import defaultdict\nINF = 10 ** 18\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, c) = get_ints()\n    store = defaultdict(list)\n    for i in range(n):\n        (x, y) = get_ints()\n        store[x - y, (x % c + c) % c].append([x, y])\n    ans = len(store)\n    moves = 0\n    for key in store:\n        b = store[key]\n        b.sort()\n        (x_, y_) = b[len(b) // 2]\n        for (x, y) in b:\n            moves += abs(x - x_) // c\n    print(ans, moves)", "import sys, math, itertools, random, bisect\nfrom collections import defaultdict\nINF = 10 ** 18\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, c) = get_ints()\n    a = []\n    for i in range(n):\n        a.append(get_array())\n    store = defaultdict(list)\n    for i in range(n):\n        (x, y) = a[i]\n        store[x - y, (x % c + c) % c].append([x, y])\n    ans = len(store)\n    moves = 0\n    for key in store:\n        b = store[key]\n        b.sort()\n        (x_, y_) = b[len(b) // 2]\n        for (x, y) in b:\n            moves += abs(x - x_) // c\n    print(ans, moves)", "t = int(input())\nfor i in range(t):\n    (n, c) = map(int, input().split())\n    pts = {}\n    moves = 0\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        if (y - x, x % c) in pts:\n            pts[y - x, x % c].append(x)\n        else:\n            pts[y - x, x % c] = [x]\n    for i in pts:\n        arc = sorted(pts[i])\n        for j in arc:\n            moves = moves + abs(j - arc[len(arc) // 2]) // c\n    print(len(pts), moves)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    (pts_line, summation) = ({}, 0)\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        if (y - x, x % c) in pts_line:\n            pts_line[y - x, x % c].append(x)\n        else:\n            pts_line[y - x, x % c] = [x]\n    for pt in pts_line:\n        arc = sorted(pts_line[pt])\n        for metre in arc:\n            summation += abs(metre - arc[len(arc) // 2]) // c\n    print(len(pts_line), summation)", "t = int(input())\nfor _ in range(t):\n    (n, c) = list(map(lambda x: int(x), input().split()))\n    hashmap = {}\n    for i in range(0, n):\n        (x, y) = list(map(lambda x: int(x), input().split()))\n        mod_x = x % c\n        mod_y = y % c\n        if (mod_x, mod_y, x - y) not in hashmap:\n            hashmap[mod_x, mod_y, x - y] = []\n        hashmap[mod_x, mod_y, x - y].append((x, y))\n    print(len(hashmap), end=' ')\n    total_operations = 0\n    for key in hashmap:\n        hashmap[key] = sorted(hashmap[key], key=lambda x: x[0])\n        initial = hashmap[key][len(hashmap[key]) // 2][0]\n        for (x, y) in hashmap[key]:\n            total_operations += abs((x - initial) // c)\n    print(total_operations)", "from collections import defaultdict\nfor x in range(int(input())):\n    (n, r) = list(map(int, input().split()))\n    d = defaultdict(list)\n    p = defaultdict(list)\n    for i in range(n):\n        (a, b) = list(map(int, input().split()))\n        if b - a < 0:\n            d[a - b].append(a)\n        else:\n            p[b - a].append(a)\n    if r > 0:\n        k = 0\n        s = 0\n        for e in d:\n            c = defaultdict(list)\n            for f in d[e]:\n                c[f % r].append(f)\n            for i in c:\n                L = c[i]\n                L.sort()\n                w = len(c[i])\n                h = w // 2\n                for t in range(w):\n                    s += abs(L[t] - L[h]) // r\n                k += 1\n        for e in p:\n            c = defaultdict(list)\n            for f in p[e]:\n                c[f % r].append(f)\n            for i in c:\n                L = c[i]\n                L.sort()\n                w = len(c[i])\n                h = w // 2\n                for t in range(w):\n                    s += abs(L[t] - L[h]) // r\n                k += 1\n        print(k, s)\n    else:\n        k = 0\n        s = 0\n        for e in d:\n            k += len(d[e])\n        for e in p:\n            k += len(p[e])\n        print(k, s)", "import collections\nt = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    hashmap = collections.defaultdict(list)\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        hashmap[x - y, x % c].append(x)\n    steps = 0\n    total = 0\n    for each in hashmap:\n        hashmap[each].sort()\n        med = hashmap[each][len(hashmap[each]) // 2]\n        for val in hashmap[each]:\n            total += abs(med - val)\n    print(len(hashmap), total // c)", "from collections import defaultdict\nR = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, c) = R()\n    d = defaultdict(list)\n    for _ in range(n):\n        (x, y) = R()\n        d[y - x, x % c].append(x)\n    for l in d.values():\n        l.sort()\n    r = sum((l[-i - 1] - l[i] for l in d.values() for i in range(len(l) // 2)))\n    print(len(d), r // c)", "for t in range(int(input())):\n    (n, c) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        t = x - y\n        if t not in d:\n            d[t] = [[x, y]]\n        else:\n            d[t].append([x, y])\n    checkpoints = 0\n    moves = 0\n    for i in d:\n        points = d[i]\n        mod = {}\n        for j in range(len(points)):\n            t = points[j][0] % c\n            if t not in mod:\n                mod[t] = [points[j]]\n            else:\n                mod[t].append(points[j])\n        for j in mod:\n            checkpoints += 1\n            check = mod[j]\n            check = sorted(check, key=lambda x: x[0])\n            mid = check[len(check) // 2][0]\n            for k in range(len(check)):\n                moves += abs(mid - check[k][0]) // c\n    print(checkpoints, moves)", "t = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, input().split())))\n    temp = {}\n    group = {}\n    for i in range(n):\n        if arr[i][0] - arr[i][1] not in temp:\n            temp[arr[i][0] - arr[i][1]] = [arr[i][0]]\n        else:\n            temp[arr[i][0] - arr[i][1]].append(arr[i][0])\n    noc = 0\n    nop = 0\n    for d in temp:\n        for x in temp[d]:\n            if x % c not in group:\n                group[x % c] = [x]\n            else:\n                group[x % c].append(x)\n        for e in group:\n            noc += 1\n            grp = sorted(group[e])\n            med = grp[int(len(grp) / 2)]\n            for i in range(len(grp)):\n                nop += abs(grp[i] - med) // c\n        group.clear()\n    print(noc, nop)", "t = int(input())\nwhile t:\n    (n, c) = map(int, input().split())\n    u = c\n    a = []\n    d = {}\n    for i in range(n):\n        (p, q) = map(int, input().split())\n        a += [[p, q]]\n        x = min(p, q)\n        d[p - q] = []\n    for i in range(n):\n        (y, z) = (a[i][0], a[i][1])\n        m = y - z\n        d[m].append(a[i][0])\n    e = []\n    for i in d.values():\n        e.append(i)\n    g = []\n    for k in e:\n        d = {}\n        for i in range(len(k)):\n            d[k[i] % c] = []\n        for i in range(len(k)):\n            d[k[i] % c].append(k[i])\n        for i in d.values():\n            g.append(i)\n    c = 0\n    print(len(g), end=' ')\n    for i in range(len(g)):\n        g[i].sort()\n        med = len(g[i]) // 2\n        for j in range(len(g[i])):\n            c += abs(g[i][j] - g[i][med]) // u\n    print(c)\n    t -= 1", "from collections import defaultdict as dd\nfor _ in range(int(input())):\n    cont = dd(list)\n    (n, c) = map(int, input().split())\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        cont[x - y, (x % c + c) % c].append((x, y))\n    checkpoints = len(cont)\n    moves = 0\n    for i in cont:\n        v = cont[i]\n        v.sort()\n        pivot = v[len(v) // 2]\n        for j in v:\n            moves += abs(pivot[0] - j[0]) // c\n    print(checkpoints, moves)", "T = int(input())\nfor i in range(T):\n    a = input().split()\n    N = int(a[0])\n    c = int(a[1])\n    D = {}\n    for j in range(N):\n        b = input().split()\n        x = int(b[0])\n        y = int(b[1])\n        t = (x - y, x % c)\n        try:\n            D[t] += [x // c]\n        except:\n            D[t] = [x // c]\n    q = len(D)\n    p = 0\n    for k in D.values():\n        L = k\n        L.sort()\n        w = len(L)\n        A = L[:w // 2]\n        B = L[(w + 1) // 2:]\n        p += sum(B) - sum(A)\n    print(q, p)", "T = int(input())\nfor i in range(T):\n    a = input().split()\n    N = int(a[0])\n    c = int(a[1])\n    D = {}\n    for j in range(N):\n        b = input().split()\n        x = int(b[0])\n        y = int(b[1])\n        t = (x - y, x % c)\n        try:\n            D[t] += [x // c]\n        except:\n            D[t] = [x // c]\n    q = len(D)\n    p = 0\n    for k in D.values():\n        L = k\n        L.sort()\n        w = len(L)\n        A = L[:w // 2]\n        B = L[(w + 1) // 2:]\n        p += sum(B) - sum(A)\n    print(q, p)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    numpoints = 0\n    moves = 0\n    d = dict()\n    for f in range(n):\n        (a, b) = map(int, input().split())\n        dif = a - b\n        mod = a % c\n        if dif not in d:\n            d[dif] = {}\n        if mod not in d[dif]:\n            d[dif][mod] = []\n        d[dif][mod].append(a)\n    for i in d:\n        for j in d[i]:\n            numpoints += 1\n            num = len(d[i][j])\n            d[i][j].sort()\n            mid = d[i][j][int(num / 2)]\n            for k in d[i][j]:\n                moves += abs(int((k - mid) / c))\n    print(numpoints, moves)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    numpoints = 0\n    moves = 0\n    d = dict()\n    for f in range(n):\n        (a, b) = map(int, input().split())\n        dif = a - b\n        mod = a % c\n        if dif not in d:\n            d[dif] = {}\n        if mod not in d[dif]:\n            d[dif][mod] = []\n        d[dif][mod].append(a)\n    for i in d:\n        for j in d[i]:\n            numpoints += 1\n            num = len(d[i][j])\n            d[i][j].sort()\n            if num % 2:\n                mid = d[i][j][int(num / 2)]\n                for k in d[i][j]:\n                    moves += abs(int((k - mid) / c))\n            else:\n                choice1 = 0\n                mid = d[i][j][int(num / 2)]\n                for k in d[i][j]:\n                    choice1 += abs(int((k - mid) / c))\n                moves += choice1\n    print(numpoints, moves)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    numpoints = 0\n    moves = 0\n    d = dict()\n    for f in range(n):\n        (a, b) = map(int, input().split())\n        dif = a - b\n        mod = a % c\n        if dif not in d:\n            d[dif] = {}\n        if mod not in d[dif]:\n            d[dif][mod] = []\n        d[dif][mod].append(a)\n    for i in d:\n        for j in d[i]:\n            numpoints += 1\n            num = len(d[i][j])\n            d[i][j].sort()\n            if num % 2:\n                mid = d[i][j][int(num / 2)]\n                for k in d[i][j]:\n                    moves += abs(int((k - mid) / c))\n            else:\n                choice1 = 0\n                mid = d[i][j][int(num / 2)]\n                for k in d[i][j]:\n                    choice1 += abs(int((k - mid) / c))\n                choice2 = 0\n                mid = d[i][j][int(num / 2) - 1]\n                for k in d[i][j]:\n                    choice2 += abs(int((k - mid) / c))\n                moves += choice1\n    print(numpoints, moves)", "for _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    numpoints = 0\n    moves = 0\n    d = dict()\n    for f in range(n):\n        (a, b) = map(int, input().split())\n        dif = a - b\n        mod = a % c\n        if dif not in d:\n            d[dif] = {}\n        if mod not in d[dif]:\n            d[dif][mod] = []\n        d[dif][mod].append(a)\n    for i in d:\n        for j in d[i]:\n            numpoints += 1\n            num = len(d[i][j])\n            d[i][j].sort()\n            if num % 2:\n                mid = d[i][j][int(num / 2)]\n                for k in d[i][j]:\n                    moves += abs(int((k - mid) / c))\n            else:\n                choice1 = 0\n                mid = d[i][j][int(num / 2)]\n                for k in d[i][j]:\n                    choice1 += abs(int((k - mid) / c))\n                choice2 = 0\n                mid = d[i][j][int(num / 2) - 1]\n                for k in d[i][j]:\n                    choice2 += abs(int((k - mid) / c))\n                moves += min(choice1, choice2)\n    print(numpoints, moves)", "for _ in range(int(input())):\n    d = dict()\n    (n, c) = list(map(int, input().split()))\n    numCheckPoints = 0\n    moves = 0\n    for _ in range(n):\n        (x, y) = list(map(int, input().split()))\n        dif = x - y\n        mod = x % c\n        if dif not in d:\n            d[dif] = {}\n        if mod not in d[dif]:\n            d[dif][mod] = []\n        d[dif][mod].append(x)\n    for i in d:\n        for j in d[i]:\n            numCheckPoints += 1\n            num = len(d[i][j])\n            d[i][j].sort()\n            if num % 2:\n                mid = d[i][j][int(num / 2)]\n                for k in d[i][j]:\n                    moves += abs(int((k - mid) / c))\n            else:\n                choice1 = 0\n                mid = d[i][j][int(num / 2)]\n                for k in d[i][j]:\n                    choice1 += abs(int((k - mid) / c))\n                choice2 = 0\n                mid = d[i][j][int(num / 2) - 1]\n                for k in d[i][j]:\n                    choice2 += abs(int((k - mid) / c))\n                moves += min(choice1, choice2)\n    print(numCheckPoints, moves)", "T = int(input())\nfor i in range(T):\n    a = input().split()\n    N = int(a[0])\n    c = int(a[1])\n    D = {}\n    for j in range(N):\n        b = input().split()\n        x = int(b[0])\n        y = int(b[1])\n        t = (x - y, x % c)\n        try:\n            D[t] += [x // c]\n        except:\n            D[t] = [x // c]\n    q = len(D)\n    p = 0\n    for k in D.values():\n        L = k\n        L.sort()\n        w = len(L)\n        A = L[:w // 2]\n        B = L[(w + 1) // 2:]\n        p += sum(B) - sum(A)\n    print(q, p)", "for t in range(int(input())):\n    (n, c) = map(int, input().split())\n    E = []\n    dic = {}\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        E.append([x, y])\n        dic[x - y] = []\n    for i in E:\n        dic[i[0] - i[1]].append([i[0], i[1]])\n    count = 0\n    moves = 0\n    for i in dic:\n        sub = {}\n        for j in dic[i]:\n            (x, y) = (j[0], j[1])\n            if sub.get(x % c, -1) == -1:\n                sub[x % c] = [[x, y]]\n            else:\n                sub[x % c].append([x, y])\n        count += len(sub)\n        for j in sub:\n            arr = sorted(sub[j])\n            m1 = arr[len(arr) // 2][0]\n            for k in arr:\n                moves += abs(k[0] - m1) // c\n    print(count, moves)", "from collections import defaultdict\nT = int(input().rstrip())\nfor tt in range(T):\n    (N, c) = list(map(int, input().rstrip().split(' ')))\n    hh = defaultdict(list)\n    for i in range(N):\n        (x, y) = list(map(int, input().rstrip().split(' ')))\n        hh[x - y, (x % c + c) % c].append(x)\n    opr = 0\n    for j in hh:\n        arr = hh[j]\n        arr.sort()\n        med = arr[len(arr) // 2]\n        tp = 0\n        for k in arr:\n            tp += abs(med - k) // c\n        opr += tp\n    print(len(hh), int(opr))", "def cnt(x):\n    return sum((x[-i - 1] - x[i] for i in range(len(x) // 2)))\nfor _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        k = (x - y, x % c)\n        if k in d:\n            d[k].append(x // c)\n        else:\n            d[k] = [x // c]\n    print(len(d), sum((cnt(sorted(v)) for v in d.values())))", "for _ in range(int(input())):\n    (N, c) = [int(i) for i in input().split()]\n    (coordinates, temp, checkpoints, operations) = ([], [], 0, 0)\n    for i in range(N):\n        (x, y) = [int(i) for i in input().split()]\n        temp.append(x)\n        temp.append(y)\n        coordinates.append(temp)\n        temp = []\n    dict1 = {}\n    for i in coordinates:\n        try:\n            dict1[i[0] - i[1]].append(i[0])\n        except:\n            dict1[i[0] - i[1]] = [i[0]]\n    for i in dict1:\n        list1 = dict1[i]\n        list1.sort()\n        dict2 = {}\n        for j in list1:\n            try:\n                dict2[j % c].append(j)\n            except:\n                dict2[j % c] = [j]\n        checkpoints += len(dict2)\n        for k in dict2:\n            list2 = dict2[k]\n            median = list2[(len(list2) - 1) // 2]\n            for ele in list2:\n                operations += int(abs(median - ele) // c)\n    print(checkpoints, operations)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, c) = [int(x) for x in input().strip().split()]\n    arr = defaultdict(list)\n    for i in range(n):\n        (x, y) = [int(z) for z in input().strip().split()]\n        arr[x - y].append([x, y])\n    cp = 0\n    m = 0\n    for i in arr:\n        if len(arr[i]) == 1:\n            cp += 1\n        else:\n            d = defaultdict(list)\n            temparr = sorted(arr[i])\n            d[0].append(temparr[0])\n            for j in range(1, len(temparr)):\n                d[(temparr[0][0] - temparr[j][0]) % c].append(temparr[j])\n            for j in d:\n                cp += 1\n                if len(d[j]) == 1:\n                    pass\n                else:\n                    temparr = d[j]\n                    p = 0\n                    q = len(temparr) - 1\n                    while p < q:\n                        m += abs((temparr[p][0] - temparr[q][0]) // c)\n                        p += 1\n                        q -= 1\n    print(cp, m)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, c) = [int(x) for x in input().split()]\n    d = {}\n    while n:\n        n -= 1\n        (x, y) = [int(x) for x in input().split()]\n        try:\n            d[x - y, x % c].append(y)\n        except:\n            d[x - y, x % c] = [y]\n    g = 0\n    o = 0\n    for i in d:\n        g += 1\n        l = d[i]\n        l.sort()\n        m = l[len(l) // 2]\n        for j in l:\n            o = o + abs(m - j) // c\n    print(str(g) + ' ' + str(o))", "import sys\ninput = sys.stdin.readline\n(inp, ip) = (lambda : int(input()), lambda : [int(w) for w in input().split()])\nfor _ in range(inp()):\n    (n, c) = ip()\n    d = {}\n    for i in range(n):\n        (a, b) = ip()\n        t = d.get(a - b, {})\n        tt = t.get((a % c, b % c), [])\n        tt.append([a, b])\n        t[a % c, b % c] = tt\n        d[a - b] = t\n    ans = 0\n    ct = 0\n    for i in d:\n        for j in d[i]:\n            ct += 1\n            t = sorted(d[i][j])\n            mid = t[len(t) // 2][0]\n            for (k, kk) in t:\n                ans += abs(k - mid) // c\n    print(ct, ans)", "T = int(input())\nfor lmlm in range(T):\n    (n, c) = map(int, input().split())\n    D = {}\n    for j in range(n):\n        b = input().split()\n        x = int(b[0])\n        y = int(b[1])\n        t = (x - y, x % c)\n        try:\n            D[t] += [x // c]\n        except:\n            D[t] = [x // c]\n    q = len(D)\n    p = 0\n    for k in D.values():\n        L = k\n        L.sort()\n        w = len(L)\n        a1 = L[:w // 2]\n        b1 = L[(w + 1) // 2:]\n        p += sum(b1) - sum(a1)\n    print(q, p)", "T = int(input())\nfor lmlm in range(T):\n    a = input().split()\n    n = int(a[0])\n    c = int(a[1])\n    D = {}\n    for j in range(n):\n        b = input().split()\n        x = int(b[0])\n        y = int(b[1])\n        t = (x - y, x % c)\n        try:\n            D[t] += [x // c]\n        except:\n            D[t] = [x // c]\n    q = len(D)\n    p = 0\n    for k in D.values():\n        L = k\n        L.sort()\n        w = len(L)\n        a1 = L[:w // 2]\n        b1 = L[(w + 1) // 2:]\n        p += sum(b1) - sum(a1)\n    print(q, p)", "T = int(input())\nfor i in range(T):\n    a = input().split()\n    N = int(a[0])\n    c = int(a[1])\n    D = {}\n    for j in range(N):\n        b = input().split()\n        x = int(b[0])\n        y = int(b[1])\n        t = (x - y, x % c)\n        try:\n            D[t] += [x // c]\n        except:\n            D[t] = [x // c]\n    q = len(D)\n    p = 0\n    for k in D.values():\n        L = k\n        L.sort()\n        w = len(L)\n        A = L[:w // 2]\n        B = L[(w + 1) // 2:]\n        p += sum(B) - sum(A)\n    print(q, p)", "for i in range(int(input())):\n    (n, c) = map(int, input().split())\n    d = {}\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        if x - y in d:\n            d[x - y].append(x)\n        else:\n            d[x - y] = []\n            d[x - y].append(x)\n    (a1, a2) = (0, 0)\n    for j in d:\n        (k, e, g) = (d[j], {}, [])\n        for i in k:\n            q = i % c\n            if q in e:\n                e[q].append(i)\n            else:\n                e[q] = [i]\n                a1 += 1\n                g.append(q)\n        for i in g:\n            k = e[i]\n            k = sorted(k)\n            q = len(k)\n            if q % 2 != 0:\n                z = k[q // 2]\n                for w in k:\n                    a2 += abs(w - z) // c\n            else:\n                z = k[q // 2]\n                y = k[q // 2 - 1]\n                (r1, r2) = (0, 0)\n                for w in k:\n                    r1 += abs(w - z) // c\n                    r2 += abs(w - y) // c\n                a2 += min(r1, r2)\n    print(a1, a2)", "import sys\nimport math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nimport bisect as bs\nsetrecursionlimit(2 ** 20)\nM = 10 ** 9 + 7\n\ndef solve():\n    (n, c) = list(map(int, stdin.readline().split()))\n    xc = [0] * n\n    yc = [0] * n\n    ans1 = 0\n    ans2 = 0\n    d = {}\n    for i in range(n):\n        (xc[i], yc[i]) = list(map(int, stdin.readline().split()))\n        if (xc[i] - yc[i], xc[i] % c) not in d:\n            d[xc[i] - yc[i], xc[i] % c] = []\n        d[xc[i] - yc[i], xc[i] % c].append(xc[i])\n    for i in d:\n        ans1 += 1\n        rem = i[1]\n        a = d[i][:]\n        a.sort()\n        s1 = len(d[i])\n        s2 = 0\n        if s1 % 2 == 1:\n            ind = a[s1 // 2]\n            for j in a:\n                s2 = s2 + abs((j - ind) // c)\n            ans2 += s2\n        else:\n            sum1 = a[s1 // 2] + a[s1 // 2 - 1]\n            ind1 = sum1 // 2\n            ind1 = ind1 - ind1 % c + rem\n            ind2 = ind1\n            s2 = 0\n            s3 = 0\n            for j in a:\n                s2 = s2 + abs((j - ind1) // c)\n            for j in a:\n                s3 = s3 + abs((j - ind2) // c)\n            ans2 = ans2 + min(s2, s3)\n    print(ans1, ans2)\nt = 1\nt = int(stdin.readline())\nfor _ in range(t):\n    solve()", "from collections import defaultdict\nR = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, c) = R()\n    d = defaultdict(list)\n    for _ in range(n):\n        (x, y) = R()\n        d[y - x, x % c].append(x)\n    for l in d.values():\n        l.sort()\n    r = sum((l[-i - 1] - l[i] for l in d.values() for i in range(len(l) // 2)))\n    print(len(d), r // c)", "from collections import defaultdict\nfrom itertools import count\nR = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, c) = R()\n    d = defaultdict(list)\n    for _ in range(n):\n        (x, y) = R()\n        d[y - x, x % c].append(x)\n    for l in d.values():\n        l.sort()\n    r = sum((x * ((i > len(l)) - (i < len(l))) for l in d.values() for (i, x) in zip(count(1, 2), l)))\n    print(len(d), r // c)", "t = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    points = []\n    dic = {}\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        points.append((a, b))\n    for i in range(n):\n        a = points[i]\n        if a[0] - a[1] in dic:\n            dic[a[0] - a[1]].append(points[i])\n        else:\n            dic[a[0] - a[1]] = [points[i]]\n    checkpoints = 0\n    operations = 0\n    for i in dic:\n        d = {}\n        for j in dic[i]:\n            if j[0] % c in d:\n                d[j[0] % c].append(j[0])\n            else:\n                d[j[0] % c] = [j[0]]\n        for j in d:\n            d[j].sort()\n            checkpoints += 1\n            m = len(d[j]) // 2\n            for k in d[j]:\n                operations += abs(d[j][m] - k) // c\n    print(checkpoints, operations)", "from collections import defaultdict\nR = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, c) = R()\n    d = defaultdict(list)\n    for _ in range(n):\n        (x, y) = R()\n        d[y - x, x % c].append(x)\n    for l in d.values():\n        l.sort()\n    r = sum((x * ((2 * i + 1 > len(l)) - (2 * i + 1 < len(l))) for l in d.values() for (i, x) in enumerate(l)))\n    print(len(d), r // c)", "def help():\n    (n, c) = map(int, input().split(' '))\n    pts = []\n    dicti = {}\n    for i in range(n):\n        (a, b) = map(int, input().split(' '))\n        if dicti.get(a - b, -1) == -1:\n            dicti[a - b] = [a]\n        else:\n            dicti[a - b].append(a)\n        pts.append((a, b))\n    check = 0\n    operation = 0\n    for line in dicti:\n        ss = dicti[line]\n        ll = len(dicti[line])\n        dicti1 = {}\n        for i in range(ll):\n            key = ss[i] % c\n            if dicti1.get(key, -1) == -1:\n                dicti1[key] = [ss[i]]\n            else:\n                dicti1[key].append(ss[i])\n        for seg in dicti1:\n            check += 1\n            ss2 = sorted(dicti1[seg])\n            ll2 = len(ss2)\n            mid = (ll2 - 1) // 2\n            for i in range(ll2):\n                operation += abs(ss2[i] - ss2[mid]) // c\n    print(check, operation)\nfor _ in range(int(input())):\n    help()", "from collections import defaultdict\nR = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, c) = R()\n    d = defaultdict(list)\n    for _ in range(n):\n        (x, y) = R()\n        d[y - x, x % c].append(x)\n    for l in d.values():\n        l.sort()\n    r = sum((sum(l[(len(l) + 1) // 2:]) - sum(l[:len(l) // 2]) for l in d.values()))\n    print(len(d), r // c)", "from collections import defaultdict\nR = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, c) = R()\n    d = defaultdict(list)\n    for _ in range(n):\n        (x, y) = R()\n        d[y - x, x % c].append(x)\n    for l in d.values():\n        l.sort()\n    r = sum((abs(x - l[len(l) // 2]) for l in d.values() for x in l))\n    print(len(d), r // c)", "from collections import defaultdict\nR = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, c) = R()\n    d = defaultdict(list)\n    for _ in range(n):\n        (x, y) = R()\n        d[y - x, x % c].append(x)\n    for l in d.values():\n        l.sort()\n    r = sum((l[-i - 1] - l[i] for l in d.values() for i in range(len(l) // 2)))\n    print(len(d), r // c)", "from collections import defaultdict\nR = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, c) = R()\n    d = defaultdict(list)\n    for _ in range(n):\n        (x, y) = R()\n        d[y - x, x % c].append(x)\n    d = d.values()\n    for l in d:\n        l.sort()\n    r = sum((l[-i - 1] - l[i] for l in d for i in range(len(l) // 2)))\n    print(len(d), r // c)", "from collections import defaultdict\nR = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, c) = R()\n    d = defaultdict(list)\n    for _ in range(n):\n        (x, y) = R()\n        d[y - x, x % c].append(x)\n    d = tuple(d.values())\n    for l in d:\n        l.sort()\n    r = sum((l[-i - 1] - l[i] for l in d for i in range(len(l) // 2)))\n    print(len(d), r // c)", "from collections import defaultdict\nR = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, c) = R()\n    d = defaultdict(list)\n    for _ in range(n):\n        (x, y) = R()\n        d[y - x, x % c].append(x)\n    for l in d.values():\n        l.sort()\n    r = sum((l[-i - 1] - l[i] for l in d.values() for i in range(len(l) // 2)))\n    print(len(d), r // c)", "def cnt(x):\n    return sum((x[-i - 1] - x[i] for i in range(len(x) // 2)))\nfor _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        k = (x - y, x % c)\n        if k in d:\n            d[k].append(x // c)\n        else:\n            d[k] = [x // c]\n    print(len(d), sum((cnt(sorted(v)) for v in d.values())))", "from collections import defaultdict\nR = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, c) = R()\n    c *= 2\n    d = defaultdict(list)\n    for _ in range(n):\n        (x, y) = R()\n        s = x + y\n        d[y - x, s % c].append(s)\n    for l in d.values():\n        l.sort()\n    r = sum((l[-i - 1] - l[i] for l in d.values() for i in range(len(l) // 2)))\n    print(len(d), r // c)", "from collections import defaultdict\nR = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, c) = R()\n    c *= 2\n    d = defaultdict(list)\n    for _ in range(n):\n        (x, y) = R()\n        s = x + y\n        d[y - x, s % c].append(s)\n    r = 0\n    for l in d.values():\n        l.sort()\n    r = sum((l[-i - 1] - l[i] for l in d.values() for i in range(len(l) // 2)))\n    print(len(d), r // c)", "import math\nimport sys\nsys.setrecursionlimit(10 ** 4)\n\ndef Divisors(n):\n    l = []\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                l.append(i)\n            else:\n                l.append(i)\n                l.append(n // i)\n        i = i + 1\n    return l\n\ndef SieveOfEratosthenes(n):\n    l = []\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    for p in range(2, n + 1):\n        if prime[p]:\n            l.append(p)\n    return l\n\ndef primeFactors(n):\n    l = []\n    while n % 2 == 0:\n        l.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            l.append(i)\n            n = n / i\n    if n > 2:\n        l.append(n)\n    return l\n\ndef Factors(n):\n    result = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i == n / i:\n                result.append(i)\n            else:\n                result.append(i)\n                result.append(n // i)\n    result.append(1)\n    result.append(n)\n    return result\n\ndef maxSubArraySum(a):\n    max_so_far = 0\n    max_ending_here = 0\n    size = len(a)\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n\ndef longestsubarray(arr, n, k):\n    current_count = 0\n    max_count = 0\n    for i in range(0, n, 1):\n        if arr[i] % k != 0:\n            current_count += 1\n        else:\n            current_count = 0\n        max_count = max(current_count, max_count)\n    return max_count\n\ndef main():\n    (n, c) = list(map(int, input().split()))\n    l = []\n    for j in range(0, n):\n        l1 = list(map(int, input().split()))\n        l.append(l1)\n    d = {}\n    for j in range(0, n):\n        l1 = []\n        l1.append(l[j][0] - l[j][1])\n        l1.append((l[j][0] % c + c) % c)\n        l1 = tuple(l1)\n        d[l1] = []\n    for j in range(0, n):\n        l1 = []\n        l1.append(l[j][0] - l[j][1])\n        l1.append((l[j][0] % c + c) % c)\n        l1 = tuple(l1)\n        d[l1].append(l[j][0])\n    c1 = len(d)\n    m1 = 0\n    for j in d:\n        l2 = d[j]\n        l2.sort()\n        for p in range(0, len(l2)):\n            m1 += abs(l2[p] - l2[len(l2) // 2]) // c\n    print(c1, m1)\nt = int(input())\nfor i in range(0, t):\n    main()", "t = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    dict = {}\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        diff = x - y\n        if diff in dict:\n            dict[diff].append(x)\n        else:\n            dict[diff] = [x]\n    a = 0\n    b = 0\n    for i in dict:\n        arr = dict[i]\n        xdict = {}\n        for j in arr:\n            x = j % c\n            if x in xdict:\n                xdict[x].append(j)\n            else:\n                xdict[x] = [j]\n        for j in xdict:\n            a += 1\n            final = sorted(xdict[j])\n            mid = final[len(final) // 2]\n            for k in final:\n                b += abs(k - mid) // c\n    print(a, b)", "from math import *\nfrom collections import *\nt = int(input())\nwhile t:\n    t -= 1\n    (n, c) = map(int, input().split())\n    de = {}\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        if (x - y, x % c, y % c) in de:\n            de[x - y, x % c, y % c].append(x // c)\n        else:\n            de[x - y, x % c, y % c] = [x // c]\n    tot = 0\n    for i in de:\n        x = de[i][:]\n        x.sort()\n        if len(x) > 1:\n            l = len(x)\n            tot += abs(sum(x[:l // 2]) - sum(x[(l + 1) // 2:]))\n    print(len(de), tot)", "t = int(input())\nfor _ in range(t):\n    (N, c) = map(int, input().split())\n    lines = {}\n    summa = 0\n    for _ in range(N):\n        (x, y) = map(int, input().split())\n        if (y - x, x % c) in lines:\n            lines[y - x, x % c].append(x)\n        else:\n            lines[y - x, x % c] = [x]\n    for b in lines:\n        line = sorted(lines[b])\n        m = len(line) // 2\n        for l in line:\n            summa += abs(l - line[m]) // c\n    print(len(lines), summa)", "import sys\nimport math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nimport bisect as bs\nsetrecursionlimit(2 ** 20)\nM = 10 ** 9 + 7\n\ndef solve():\n    (n, c) = list(map(int, stdin.readline().split()))\n    xc = [0] * n\n    yc = [0] * n\n    ans1 = 0\n    ans2 = 0\n    d = {}\n    for i in range(n):\n        (xc[i], yc[i]) = list(map(int, stdin.readline().split()))\n        if (xc[i] - yc[i], xc[i] % c) not in d:\n            d[xc[i] - yc[i], xc[i] % c] = []\n        d[xc[i] - yc[i], xc[i] % c].append(xc[i])\n    for i in d:\n        ans1 += 1\n        rem = i[1]\n        a = d[i][:]\n        a.sort()\n        s1 = len(d[i])\n        s2 = 0\n        if s1 % 2 == 1:\n            ind = a[s1 // 2]\n            for j in a:\n                s2 = s2 + abs((j - ind) // c)\n            ans2 += s2\n        else:\n            sum1 = a[s1 // 2] + a[s1 // 2 - 1]\n            ind1 = sum1 // 2\n            ind1 = ind1 - ind1 % c + rem\n            ind2 = ind1 + c\n            s2 = 0\n            s3 = 0\n            for j in a:\n                s2 = s2 + abs((j - ind1) // c)\n            for j in a:\n                s3 = s3 + abs((j - ind2) // c)\n            ans2 = ans2 + min(s2, s3)\n    print(ans1, ans2)\nt = 1\nt = int(stdin.readline())\nfor _ in range(t):\n    solve()", "import sys\nimport math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nimport bisect as bs\nsetrecursionlimit(2 ** 20)\nM = 10 ** 9 + 7\nT = int(stdin.readline())\nfor _ in range(T):\n    (n, C) = list(map(int, stdin.readline().split()))\n    x = []\n    y = []\n    for i in range(n):\n        (tmpx, tmpy) = list(map(int, stdin.readline().split()))\n        x.append(tmpx)\n        y.append(tmpy)\n    di = []\n    d = {}\n    m = {}\n    for i in range(n):\n        t = x[i] - y[i]\n        r = x[i] % C\n        if (t, r) not in d:\n            d[t, r] = []\n        d[t, r].append(x[i])\n    c = len(d)\n    ans = 0\n    cnt = 0\n    for k in d:\n        tmp = d[k].copy()\n        tmp.sort()\n        if len(d[k]) % 2 == 0:\n            (tmp1, tmp2) = (0, 0)\n            t1 = len(d[k]) // 2\n            t2 = len(d[k]) // 2 - 1\n            t3 = (tmp[t1] + tmp[t2]) // 2\n            p1 = t3 - t3 % C + k[1]\n            p2 = p1 + C\n            for j in d[k]:\n                tmp1 += abs(p1 - j) // C\n            for j in d[k]:\n                tmp2 += abs(p2 - j) // C\n            cnt += min(tmp1, tmp2)\n        if len(d[k]) % 2 == 1:\n            ln = len(tmp) // 2\n            for j in d[k]:\n                cnt += abs(j - tmp[ln]) // C\n    print(str(c) + ' ' + str(cnt))", "T = int(input())\nfor i in range(T):\n    a = input().split()\n    N = int(a[0])\n    c = int(a[1])\n    D = {}\n    for j in range(N):\n        b = input().split()\n        x = int(b[0])\n        y = int(b[1])\n        t = (x - y, x % c)\n        try:\n            D[t] += [x // c]\n        except:\n            D[t] = [x // c]\n    q = len(D)\n    p = 0\n    for k in D.values():\n        L = k\n        L.sort()\n        w = len(L)\n        A = L[:w // 2]\n        B = L[(w + 1) // 2:]\n        p += sum(B) - sum(A)\n    print(q, p)", "for _ in range(int(input())):\n    (n, c) = [int(i) for i in input().split()]\n    a = [[int(i) for i in input().split()] for j in range(n)]\n    dp = {}\n    for i in range(n):\n        val = a[i][0] - a[i][1]\n        dp[val] = []\n    for i in range(n):\n        val = a[i][0] - a[i][1]\n        dp[val].append(i)\n    o = []\n    for i in dp.keys():\n        o1 = []\n        for j in dp[i]:\n            o1.append(a[j][0])\n        o.append(o1)\n    ct = 0\n    c1 = 0\n    for i in o:\n        x = i\n        x.sort()\n        dp = {}\n        for j in range(len(x)):\n            dp[x[j] % c] = []\n        for j in range(len(x)):\n            dp[x[j] % c].append(x[j])\n        ct += len(dp)\n        for j in dp.values():\n            f = [0] * len(j)\n            b = [0] * len(j)\n            for k in range(1, len(j)):\n                f[k] = k * ((j[k] - j[k - 1]) // c) + f[k - 1]\n            for k in range(len(j) - 2, -1, -1):\n                b[k] = (len(j) - 1 - k) * ((j[k + 1] - j[k]) // c) + b[k + 1]\n            minn = 10 ** 18\n            for k in range(len(j)):\n                minn = min(minn, b[k] + f[k])\n            c1 += minn\n    print(ct, c1)", "import math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nfrom bisect import bisect_left as bsl\nfrom bisect import bisect_right as bsr\nimport heapq as hq\nsetrecursionlimit(2 ** 20)\nt = 1\nt = int(stdin.readline())\nfor _ in range(t):\n    (n, c) = list(map(int, stdin.readline().rstrip().split()))\n    (X, Y) = ([], [])\n    for i in range(n):\n        (t1, t2) = list(map(int, stdin.readline().rstrip().split()))\n        X.append(t1)\n        Y.append(t2)\n    d = {}\n    mi = {}\n    mx = {}\n    for i in range(n):\n        (x, y) = (X[i], Y[i])\n        if (x - y, x % c) not in d:\n            d[x - y, x % c] = []\n            mi[x - y, x % c] = 0\n        d[x - y, x % c].append((x, y))\n        mi[x - y, x % c] += x\n    noc = len(d)\n    cnt = 0\n    for i in d:\n        a = d[i][:]\n        a.sort()\n        if len(d[i]) % 2 == 0:\n            t = mi[i] // len(d[i])\n            (tmp1, tmp2) = (0, 0)\n            t1 = len(d[i]) // 2\n            t2 = len(d[i]) // 2 - 1\n            t3 = (a[t1][0] + a[t2][0]) // 2\n            p1 = t3 - t3 % c + i[1]\n            p2 = p1 + c\n            for j in d[i]:\n                tmp1 += abs(p1 - j[0]) // c\n            for j in d[i]:\n                tmp2 += abs(p2 - j[0]) // c\n            cnt += min(tmp1, tmp2)\n        if len(d[i]) % 2 == 1:\n            ln = len(a) // 2\n            for j in d[i]:\n                cnt += abs(j[0] - a[ln][0]) // c\n    print(str(noc) + ' ' + str(cnt))", "def solve():\n    d = dict()\n    (n, c) = list(map(int, input().split()))\n    numCheckPoints = 0\n    moves = 0\n    for _ in range(n):\n        (x, y) = list(map(int, input().split()))\n        dif = x - y\n        mod = x % c\n        if dif not in d:\n            d[dif] = {}\n        if mod not in d[dif]:\n            d[dif][mod] = []\n        d[dif][mod].append(x)\n    for i in d:\n        for j in d[i]:\n            numCheckPoints += 1\n            num = len(d[i][j])\n            d[i][j].sort()\n            if num % 2:\n                mid = d[i][j][int(num / 2)]\n                for k in d[i][j]:\n                    moves += abs(int((k - mid) / c))\n            else:\n                choice1 = 0\n                mid = d[i][j][int(num / 2)]\n                for k in d[i][j]:\n                    choice1 += abs(int((k - mid) / c))\n                choice2 = 0\n                mid = d[i][j][int(num / 2) - 1]\n                for k in d[i][j]:\n                    choice2 += abs(int((k - mid) / c))\n                moves += min(choice1, choice2)\n    print(numCheckPoints, moves)\nt = int(input())\nfor _ in range(t):\n    solve()", "from collections import defaultdict\n\ndef main():\n    for _ in range(int(input())):\n        (n, c) = map(int, input().split())\n        if c == 0:\n            c += 1\n        a = [list(map(int, input().split())) for i in range(n)]\n        (s, l, d, sd) = (set(), [], defaultdict(list), dict())\n        for i in a:\n            (x, y) = (i[0] - c * (i[0] // c), i[1] - c * (i[0] // c))\n            if x < 0:\n                (x, y) = (x + c, y + c)\n            d[x, y].append(i)\n        op = 0\n        for i in d:\n            d[i].sort()\n        for i in d:\n            if len(d[i]) % 2 == 1:\n                al = len(d[i]) // 2\n                for j in range(len(d[i])):\n                    op += abs((d[i][j][0] - d[i][al][0]) // c)\n            else:\n                (op1, op2) = (0, 0)\n                al = len(d[i]) // 2\n                for j in range(len(d[i])):\n                    op1 += abs((d[i][j][0] - d[i][al - 1][0]) // c)\n                for j in range(len(d[i])):\n                    op2 += abs((d[i][j][0] - d[i][al][0]) // c)\n                op += min(op1, op2)\n        print(len(d), op)\nmain()", "from collections import defaultdict as dd\nfrom collections import Counter as cc\nI = lambda : list(map(int, input().split()))\n(t,) = I()\nfor _ in range(t):\n    (n, c) = I()\n    d = dd(list)\n    for i in range(n):\n        (x, y) = I()\n        d[x - y].append(x)\n    (cp, p) = (len(d), 0)\n    for i in d.keys():\n        x = d[i]\n        l = dd(list)\n        for j in range(len(x)):\n            l[x[j] % c].append(x[j] // c)\n        for j in l.keys():\n            pp = sorted(l[j])\n            k = pp[len(pp) // 2]\n            for o in pp:\n                p += abs(k - o)\n        cp += len(l) - 1\n    print(cp, p)", "def find2(arr, c):\n    arr.sort()\n    if len(arr) == 1:\n        return 0\n    dpleft = [0]\n    for i in range(len(arr) - 1):\n        x1 = arr[i][0]\n        x2 = arr[i + 1][0]\n        k = (x2 - x1) // c\n        dpleft.append(dpleft[-1] + k * len(dpleft))\n    dpright = [0]\n    for i in range(len(arr) - 1, 0, -1):\n        x1 = arr[i][0]\n        x2 = arr[i - 1][0]\n        k = (x1 - x2) // c\n        dpright.append(dpright[-1] + k * len(dpright))\n    dpleft.pop(0)\n    dpright.pop(0)\n    dpright.reverse()\n    min_moves = min(dpright[0], dpleft[-1])\n    for i in range(1, len(arr) - 1):\n        left = dpleft[i - 1]\n        right = dpright[i]\n        min_moves = min(min_moves, left + right)\n    return min_moves\n\ndef find(arr, c):\n    mods = {}\n    for (x, y) in arr:\n        mod = (x % c, y % c)\n        if mod not in mods.keys():\n            mods[mod] = []\n        mods[mod].append((x, y))\n    points = len(mods)\n    moves = 0\n    for i in mods.keys():\n        moves += find2(mods[i], c)\n    return (points, moves)\n\ndef solve(diff, c, ans):\n    min_points = 0\n    min_moves = 0\n    for i in diff.keys():\n        (points, moves) = find(diff[i], c)\n        min_points += points\n        min_moves += moves\n    ans.append((min_points, min_moves))\n\ndef main():\n    t = int(input())\n    ans = []\n    for i in range(t):\n        (n, c) = map(int, input().split())\n        diff = {}\n        for j in range(n):\n            (x, y) = map(int, input().split())\n            if x - y not in diff.keys():\n                diff[x - y] = []\n            diff[x - y].append((x, y))\n        solve(diff, c, ans)\n    for i in ans:\n        print(i[0], i[1])\nmain()", "from collections import defaultdict\nR = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, c) = R()\n    c *= 2\n    d = defaultdict(list)\n    for _ in range(n):\n        (x, y) = R()\n        s = x + y\n        d[y - x, s % c].append(s)\n    r = 0\n    for l in d.values():\n        l.sort()\n        r += sum((l[-i - 1] - l[i] for i in range(len(l) // 2)))\n    print(len(d), r // c)", "from collections import defaultdict\nR = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, c) = R()\n    c *= 2\n    d = defaultdict(list)\n    for _ in range(n):\n        (x, y) = R()\n        s = x + y\n        d[y - x, s % c].append(s)\n    r = 0\n    for l in d.values():\n        l.sort()\n        r += sum((y - x for (x, y) in zip(l[:len(l) // 2], l[::-1])))\n    print(len(d), r // c)", "from collections import defaultdict\nR = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, c) = R()\n    c *= 2\n    d = defaultdict(list)\n    for _ in range(n):\n        (x, y) = R()\n        s = x + y\n        d[y - x, s % c].append(s)\n    r = 0\n    for (x, l) in d.items():\n        l.sort()\n        r += sum((y - x for (x, y) in zip(l[:len(l) // 2], l[::-1])))\n    print(len(d), r // c)", "def cnt(x):\n    return sum((x[-i - 1] - x[i] for i in range(len(x) // 2)))\nfor _ in range(int(input())):\n    (n, c) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        k = (x - y, x % c)\n        if k in d:\n            d[k].append(x // c)\n        else:\n            d[k] = [x // c]\n    print(len(d), sum((cnt(sorted(v)) for v in d.values())))", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    (N, c) = map(int, input().split())\n    A = []\n    B = {}\n    for i in range(N):\n        (x, y) = map(int, input().split())\n        A.append([x, y])\n        try:\n            B[x - y].append(x)\n        except:\n            B[x - y] = [x]\n    C = {}\n    tc = 0\n    to = 0\n    for val in B:\n        arr = B[val]\n        D = {}\n        arr.sort()\n        for i in arr:\n            try:\n                D[i % c].append(i)\n            except:\n                D[i % c] = [i]\n        tc = tc + len(D)\n        for val1 in D:\n            arr = D[val1]\n            my = arr[(len(arr) - 1) // 2]\n            for i in arr:\n                to = to + abs(my - i) // c\n    print(tc, to)"]