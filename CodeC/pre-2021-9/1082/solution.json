["import sys\nfrom collections import defaultdict, deque\nimport math\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ninp = lambda : list(map(int, sys.stdin.readline().rstrip('\\r\\n').split()))\nmod = 998244353\nfor _ in range(int(input())):\n    n = int(input())\n    a = inp()\n    freq = defaultdict(int)\n    for i in a:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    mul = 1\n    add = 0\n    res = 0\n    for i in range(1, n + 1):\n        mex = i * mul % mod\n        add = (add + freq[i]) % mod\n        mex = mex * pow(2, n - add, mod) % mod\n        res = (res + mex) % mod\n        mul = mul * (pow(2, freq[i], mod) - 1) % mod\n    print(res)", "import sys\nfrom collections import defaultdict, deque\nimport math\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ninp = lambda : list(map(int, sys.stdin.readline().rstrip('\\r\\n').split()))\nmod = 998244353\nfor _ in range(int(input())):\n    n = int(input())\n    a = inp()\n    freq = defaultdict(int)\n    for i in a:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    mul = 1\n    add = 0\n    res = 0\n    for i in range(1, n + 1):\n        mex = i * mul % mod\n        add = (add + freq[i]) % mod\n        mex = mex * pow(2, n - add, mod) % mod\n        res = (res + mex) % mod\n        mul = mul * (pow(2, freq[i], mod) - 1) % mod\n    print(res)", "import sys\nfrom collections import defaultdict, deque\nimport math\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ninp = lambda : list(map(int, sys.stdin.readline().rstrip('\\r\\n').split()))\nmod = 998244353\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    a = inp()\n    freq = defaultdict(int)\n    for i in a:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    mul = 1\n    add = 0\n    res = 0\n    for i in range(1, n + 1):\n        mex = i * mul % mod\n        add = (add + freq[i]) % mod\n        mex = mex * pow(2, n - add, mod) % mod\n        res = (res + mex) % mod\n        mul = mul * (pow(2, freq[i], mod) - 1) % mod\n    print(res)", "import sys\ninput = sys.stdin.readline\nM = 998244353\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().rstrip().split(' ')))\n    freq = [0 for __ in range(N + 1)]\n    left = [0 for __ in range(N + 1)]\n    right = [0 for __ in range(N + 1)]\n    s = 0\n    extra = 0\n    for a in A:\n        if a > N:\n            extra += 1\n        else:\n            freq[a] += 1\n    left[0] = 1\n    right[0] = (1 << extra) % M\n    right[N] = (1 << freq[N]) * right[0] % M\n    for i in range(1, N + 1):\n        left[i] = ((1 << freq[i]) - 1) * left[i - 1] % M\n    for i in range(N - 1, 0, -1):\n        right[i] = (1 << freq[i]) * right[i + 1] % M\n    for i in range(1, N):\n        s += i * (left[i - 1] * right[i + 1])\n        s %= M\n    s += N * (left[N - 1] * right[0])\n    s += (N + 1) * left[N]\n    print(s % M)", "import sys\nfrom collections import defaultdict, deque\nimport math\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ninp = lambda : list(map(int, sys.stdin.readline().rstrip('\\r\\n').split()))\nmod = 998244353\nfor _ in range(int(input())):\n    n = int(input())\n    a = inp()\n    freq = defaultdict(int)\n    for i in a:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    mul = 1\n    add = 0\n    res = 0\n    for i in range(1, n + 1):\n        mex = i * mul % mod\n        add = (add + freq[i]) % mod\n        mex = mex * pow(2, n - add, mod) % mod\n        res = (res + mex) % mod\n        mul = mul * (pow(2, freq[i], mod) - 1) % mod\n    print(res)", "import sys\nfrom collections import defaultdict, deque\nimport math\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ninp = lambda : list(map(int, sys.stdin.readline().rstrip('\\r\\n').split()))\nINF = float('inf')\nMOD = 998244353\nt = 1\nt = int(input())\nfor _ in range(t):\n    (n,) = inp()\n    a = inp()\n    freq = defaultdict(int)\n    for i in a:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    mul = 1\n    add = 0\n    res = 0\n    for i in range(1, n + 1):\n        mex = i * mul % MOD\n        add = (add + freq[i]) % MOD\n        mex = mex * pow(2, n - add, MOD) % MOD\n        res = (res + mex) % MOD\n        mul = mul * (pow(2, freq[i], MOD) - 1) % MOD\n    print(res)", "def power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nm = 998244353\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    list1 = list(map(int, input().strip().split()))\n    map1 = dict()\n    for val in list1:\n        if val in map1:\n            map1[val] += 1\n        else:\n            map1[val] = 1\n    list2 = sorted(map1)\n    mex = len(list2) + 1\n    for i in range(mex - 1):\n        if list2[i] != i + 1:\n            mex = i + 1\n            break\n    ans = 0\n    done = 0\n    mul = 1\n    sub = 0\n    for i in range(1, mex):\n        count = map1[list2[i - 1]]\n        done += count\n        rem = n - done\n        temp = power(2, rem, m) * mul\n        temp = temp % m\n        sub += temp\n        ans += temp * i\n        ans = ans % m\n        mul = mul * (power(2, count, m) - 1)\n        mul = mul % m\n    ans += (power(2, n, m) - sub) * mex\n    ans = ans % m\n    print(ans)", "import math, sys\nfrom collections import Counter as cc\nfrom collections import defaultdict as dd\nfrom math import factorial as fact\nsys.setrecursionlimit(10 ** 6)\nmod = 998244353\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] > n + 1:\n            a[i] = n + 1\n    c = dd(lambda : 0)\n    for i in a:\n        c[i] += 1\n    count = [0] * (n + 2)\n    for i in range(n, -1, -1):\n        count[i] = (count[i + 1] + c[i + 1]) % mod\n    d = [1] * (n + 10)\n    d[1] = 2 ** c[1] - 1\n    for i in range(2, n + 2):\n        d[i] = d[i - 1] * (pow(2, c[i]) - 1) % mod\n    ans = 0\n    for i in range(1, n + 2):\n        ans += i * pow(2, count[i], mod) * (d[i - 1] % mod) % mod\n    print(ans % mod)", "import sys\nfrom collections import Counter\n\ndef fin():\n    return sys.stdin.readline().strip()\n\ndef fout(s, sep='\\n'):\n    sys.stdout.write(str(s) + sep)\nMOD = 998244353\ntest = int(input())\nfor _ in range(test):\n    n = int(fin())\n    a = [int(x) for x in fin().split()]\n    count = Counter(a)\n    missing = None\n    for i in range(1, n + 2):\n        if i not in count:\n            missing = i\n            break\n    if 1 not in count:\n        ans = 2 ** n % MOD\n    else:\n        prev = count[1]\n        prev2 = pow(2, count[1], MOD) - 1\n        ans = pow(2, n - count[1], MOD)\n        for i in range(2, missing):\n            ans = (ans + i * prev2 * pow(2, n - count[i] - prev, MOD) % MOD) % MOD\n            prev += count[i]\n            prev2 = prev2 * (pow(2, count[i], MOD) - 1) % MOD\n        ans = (ans + prev2 * missing % MOD * pow(2, n - prev, MOD) % MOD) % MOD\n    print(ans)", "import sys\nfrom collections import Counter\n\ndef fin():\n    return sys.stdin.readline().strip()\n\ndef fout(s, sep='\\n'):\n    sys.stdout.write(str(s) + sep)\nMOD = 998244353\nt = int(input())\nfor _ in range(t):\n    n = int(fin())\n    a = [int(x) for x in fin().split()]\n    count = Counter(a)\n    missing = None\n    for i in range(1, n + 2):\n        if i not in count:\n            missing = i\n            break\n    if 1 not in count:\n        ans = 2 ** n % MOD\n    else:\n        prev = count[1]\n        prev2 = pow(2, count[1], MOD) - 1\n        ans = pow(2, n - count[1], MOD)\n        for i in range(2, missing):\n            ans = (ans + i * prev2 * pow(2, n - count[i] - prev, MOD) % MOD) % MOD\n            prev += count[i]\n            prev2 = prev2 * (pow(2, count[i], MOD) - 1) % MOD\n        ans = (ans + prev2 * missing % MOD * pow(2, n - prev, MOD) % MOD) % MOD\n    print(ans)", "from collections import Counter\nmod = 998244353\nfor _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    dct = Counter(ls)\n    if dct[1] == 0:\n        print(pow(2, n, mod))\n    else:\n        presm = [0 for i in range(n + 2)]\n        presm[0] = n\n        for i in range(1, n + 1):\n            presm[i] = presm[i - 1] - dct[i]\n        ans = pow(2, n - dct[1], mod)\n        pro = pow(2, dct[1], mod) - 1\n        for i in range(2, n + 2):\n            ans = (ans + pro * pow(2, presm[i], mod) * i % mod) % mod\n            pro = pro * (pow(2, dct[i], mod) - 1) % mod\n        print(ans)", "from collections import defaultdict\n\ndef zeroes():\n    return 0\nm = 998244353\nk = pow(10, 5) + 5\npowers = [1] * k\nd = defaultdict(zeroes)\nfor i in range(1, k):\n    powers[i] = 2 * powers[i - 1] % m\nT = int(input())\nwhile T > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        d[a[i]] += 1\n    sum = 0\n    prod = 1\n    ans = 0\n    mex = 0\n    for i in range(1, n + 2):\n        sum = (sum + d[i]) % m\n        mex = prod * i % m\n        mex = mex * powers[n - sum] % m\n        ans = (ans + mex) % m\n        prod = prod * (powers[d[i]] - 1) % m\n        d[i] = 0\n    print(ans)\n    T -= 1", "from collections import defaultdict\nmod = 998244353\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    f = defaultdict(int)\n    for j in lst:\n        f[j] += 1\n    ans = 0\n    _mul = 1\n    _sum = f[1]\n    for m in range(2, n + 2):\n        _mul = _mul * (pow(2, f[m - 1], mod) - 1) % mod\n        _sum = _sum + f[m]\n        gm = n - _sum\n        ans = ans + m * pow(2, gm, mod) * _mul % mod\n        ans = ans % mod\n    ans = ans + pow(2, n - f[1], mod)\n    ans = ans % mod\n    print(int(ans))", "from sys import stdin, stdout\npower = [1]\nmod = 998244353\nfor i in range(1, 100006):\n    power.append(2 * power[i - 1] % mod)\nfrom collections import Counter\nfor testcases in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    count = Counter(arr)\n    remaining = 0\n    res = 0\n    prev = 1\n    for mex in range(1, n + 2):\n        remaining += count[mex]\n        remaining %= mod\n        res += mex * prev * power[n - remaining]\n        res %= mod\n        prev *= power[count[mex]] - 1\n        prev %= mod\n    print(res)", "import numpy as np\nmod = 998244353\ntwo = [1]\nfor i in range(1, 10 ** 5 + 100):\n    two.append(2 * two[i - 1] % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    freq = [0] * (n + 5)\n    for x in a:\n        freq[min(x, n + 1)] += 1\n    sf = [0] * (n + 5)\n    for i in range(n + 3, -1, -1):\n        sf[i] = sf[i + 1] + freq[i]\n    ans = 0\n    pf = 1\n    for i in range(1, n + 1):\n        ans = (ans + i * (pf * two[sf[i + 1]] % mod)) % mod\n        pf = pf * (two[freq[i]] - 1) % mod\n    ans %= mod\n    print(ans)", "T = int(input())\nm = 998244353\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i1 in range(n):\n        if a[i1] not in d:\n            d[a[i1]] = 0\n        d[a[i1]] += 1\n    ans = 0\n    mul = 1\n    add = 0\n    for i2 in range(len(d) + 1):\n        if i2 < len(d):\n            if i2 + 1 not in d:\n                k = (i2 + 1) * mul * pow(2, n - add, m) % m\n                ans += k\n                break\n            else:\n                add += d[i2 + 1]\n                k = (i2 + 1) * mul * pow(2, n - add, m) % m\n                ans += k\n                mul *= (pow(2, d[i2 + 1], m) - 1) % m\n        else:\n            ans += mul * (i2 + 1) % m\n    print(ans % m)", "mod = 998244353\npow2 = [1]\nfor i in range(10 ** 5 + 5):\n    tmp = pow2[-1]\n    tmp *= 2\n    tmp %= mod\n    pow2.append(tmp)\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    l = {}\n    for i in A:\n        if i in l:\n            l[i] += 1\n        else:\n            l[i] = 1\n    minn = 1\n    ans = 0\n    a = 1\n    b = 0\n    A = sorted(list(set(A)))\n    for i in A:\n        tmp = a\n        b += l[i]\n        tmp *= pow2[n - b]\n        tmp *= minn\n        tmp %= mod\n        ans += tmp\n        if i == minn:\n            minn += 1\n        a *= pow2[l[i]] - 1\n        a %= mod\n    ans += a * minn % mod\n    ans %= mod\n    print(ans)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    values = list(map(int, input().split()))\n    occ = [0] * (n + 2)\n    for i in values:\n        if i <= n + 1:\n            occ[i] += 1\n    mod = 998244353\n    ans = 0\n    p1 = [0] * (n + 2)\n    for i in range(1, n + 2):\n        p1[i] = p1[i - 1] + occ[i]\n    power_p1 = [1] * (n + 2)\n    power_p2 = [1] * (n + 2)\n    for i in range(1, n + 2):\n        power_p1[i] = pow(2, n - p1[i], mod)\n    for i in range(2, n + 2):\n        power_p2[i] = power_p2[i - 1] * (pow(2, occ[i - 1], mod) - 1) % mod\n    ans = 0\n    for i in range(1, n + 2):\n        ans = (ans + power_p1[i] * power_p2[i] % mod * i % mod) % mod\n    print(ans)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    values = list(map(int, input().split()))\n    occ = [0] * (n + 2)\n    for i in values:\n        if i <= n + 1:\n            occ[i] += 1\n    mod = 998244353\n    ans = 0\n    p1 = [0] * (n + 2)\n    for i in range(1, n + 2):\n        p1[i] = p1[i - 1] + occ[i]\n    power_p1 = [1] * (n + 2)\n    power_p2 = [1] * (n + 2)\n    for i in range(1, n + 2):\n        power_p1[i] = pow(2, n - p1[i], mod)\n    for i in range(2, n + 2):\n        power_p2[i] = power_p2[i - 1] * (pow(2, occ[i - 1], mod) - 1) % mod\n    ans = 0\n    for i in range(1, n + 2):\n        ans = (ans + power_p1[i] * power_p2[i] % mod * i % mod) % mod\n    print(ans)\n    t -= 1", "pow_2 = [1]\nmod = 998244353\nfor i in range(1, 10 ** 5 + 1):\n    pow_2.append(pow_2[-1] * 2 % mod)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    fre = [0] * (10 ** 5 + 2)\n    for i in range(n):\n        if arr[i] > 10 ** 5:\n            fre[10 ** 5] += 1\n        else:\n            fre[arr[i]] += 1\n    com = [0]\n    for i in range(1, 10 ** 5 + 2):\n        com.append(com[-1] + fre[i])\n    temp = [1]\n    for i in range(1, 10 ** 5 + 1):\n        if fre[i] == 0:\n            break\n        else:\n            num = pow_2[fre[i]] - 1\n            if num < 0:\n                num += mod\n            num = num * temp[-1] % mod\n            temp.append(num)\n    ans = 0\n    for i in range(len(temp)):\n        ans = (ans + temp[i] * pow_2[com[-1] - com[i + 1]] % mod * (i + 1)) % mod\n    print(ans)", "t = int(input())\nMOD = 998244353\nfor tc in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    cnt = [0] * (n + 2)\n    for i in l:\n        if i <= n:\n            cnt[i] += 1\n    musthave = 1\n    already = 0\n    done = False\n    ans = 0\n    for i in range(1, n + 2):\n        ans += i * (pow(2, n - cnt[i] - already, MOD) * musthave)\n        ans %= MOD\n        musthave *= pow(2, cnt[i], MOD) - 1\n        musthave %= MOD\n        already += cnt[i]\n        if cnt[i] == 0:\n            break\n    print(ans)", "import sys\nimport bisect as b\ninput = sys.stdin.readline\nfrom collections import defaultdict as dd\nmod = 1000000007\nm = 998244353\n\ndef power(x, y):\n    res = 1\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x\n        y = y >> 1\n        x = x * x\n    return res\npo = [0] * 100001\npo[0] = 1\nfor i in range(1, 100001):\n    po[i] = po[i - 1] * 2 % m\nfor _ in range(int(input())):\n    n = int(input())\n    d = {}\n    l = list(map(int, input().split()))\n    l.sort()\n    for i in l:\n        d[i] = d.get(i, 0) + 1\n    key = list(d.keys())\n    miss = 0\n    for i in range(len(key)):\n        if key[i] != i + 1:\n            miss = i + 1\n            break\n    if miss == 0:\n        miss = key[-1] + 1\n    l = key\n    s = 0\n    x = 0\n    y = 1\n    for i in range(len(key)):\n        c = po[n - d[l[i]] - x] * y\n        y = y * (po[d[l[i]]] - 1)\n        x += d[l[i]]\n        if l[i] > miss:\n            s += c * miss % m\n        else:\n            s += c * l[i] % m\n    c = y * miss % m\n    print((s + c) % m)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {n + 1: 0}\n    for i in range(n):\n        if d.get(l[i]) == None:\n            d[l[i]] = 1\n        else:\n            d[l[i]] += 1\n    if d.get(1) == None:\n        print(pow(2, n, 998244353))\n    else:\n        rs = 0\n        less = 1\n        greater = 1\n        c = 0\n        for i in range(1, n + 2):\n            if d.get(i) == None:\n                d[i] = 0\n            x = n - c - d.get(i)\n            greater = pow(2, x, 998244353)\n            c = c + d.get(i)\n            ans = i * less * greater % 998244353\n            rs += ans\n            rs = rs % 998244353\n            less = less * (pow(2, d.get(i)) - 1) % 998244353\n        print(rs % 998244353)", "t = int(input())\nwhile t != 0:\n    t = t - 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = dict()\n    for i in l:\n        if d.get(i):\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    num = list()\n    for i in range(1, 100002):\n        if d.get(i):\n            num.append(i)\n        else:\n            num.append(i)\n            break\n    fact = 1\n    sum = 0\n    for i in range(len(num) - 1):\n        sum = int((sum + fact * num[i] % 998244353 * pow(2, n - d[num[i]], 998244353)) % 998244353)\n        temp = pow(2, d[num[i]], 998244353) - 1\n        if temp == -1:\n            temp = 998244352\n        fact = int(fact * temp % 998244353)\n        n = n - d[num[i]]\n    sum = int((sum + fact * num[len(num) - 1] % 998244353 * pow(2, n, 998244353)) % 998244353)\n    print(sum)", "MOD = 998244353\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    A = list(map(lambda x: int(x), input().split(' ')))\n    dict = {}\n    for a in A:\n        if a in dict:\n            dict[a] += 1\n        else:\n            dict[a] = 1\n    mex = 1\n    total = 0\n    tot_perms = 1\n    total_count = 0\n    for num in sorted(dict.keys()):\n        count = dict[num]\n        total_count += count\n        power = pow(2, n - total_count, MOD)\n        total += mex * power * tot_perms\n        tot_perms *= pow(2, count, MOD) - 1\n        if num == mex:\n            mex += 1\n    total += mex * tot_perms\n    print(total % MOD)", "MOD = 998244353\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    A = list(map(lambda x: int(x), input().split(' ')))\n    dict = {}\n    for a in A:\n        if a in dict:\n            dict[a] += 1\n        else:\n            dict[a] = 1\n    mex = 1\n    total = 0\n    tot_perms = 1\n    total_count = 0\n    for num in sorted(dict.keys()):\n        count = dict[num]\n        total_count += count\n        power = pow(2, n - total_count, MOD)\n        total = total + mex * power * tot_perms\n        tot_perms = tot_perms * (pow(2, count, MOD) - 1)\n        if num == mex:\n            mex += 1\n    total += mex * tot_perms\n    print(total % MOD)", "MOD = 998244353\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    A = list(map(lambda x: int(x), input().split(' ')))\n    dict = {}\n    for a in A:\n        if a in dict:\n            dict[a] += 1\n        else:\n            dict[a] = 1\n    mex = 1\n    total = 0\n    tot_perms = 1\n    total_count = 0\n    for num in sorted(dict.keys()):\n        count = dict[num]\n        total_count += count\n        power = pow(2, n - total_count, MOD)\n        total = (total + mex * power * tot_perms % MOD) % MOD\n        tot_perms = tot_perms * ((2 ** count - 1) % MOD) % MOD\n        if num == mex:\n            mex += 1\n    total += mex * tot_perms\n    print(total % MOD)", "from collections import defaultdict\nm = 998244353\nfor j in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    y = defaultdict(lambda : 0)\n    for i in range(n):\n        y[x[i]] += 1\n    (finalsum, add, mex, mul) = (0, 0, 0, 1)\n    for i in range(1, n + 1):\n        mex = i * mul % m\n        add = (add + y[i]) % m\n        mex = mex * pow(2, n - add, m) % m\n        finalsum = (finalsum + mex) % m\n        mul = mul * (pow(2, y[i], m) - 1) % m\n    print(finalsum)", "def getmexum(n, arr):\n    d = {}\n    for i in arr:\n        if i < n:\n            if i not in d:\n                d[i] = 0\n            d[i] += 1\n    mod = 998244353\n    ans = 0\n    pro = 1\n    s = 0\n    for i in range(10 ** 5 + 1):\n        if i + 1 not in d:\n            ans = (ans + (i + 1) * (pow(2, n - s, mod) * pro)) % mod\n            break\n        else:\n            s = s + d[i + 1]\n            ans = (ans + (i + 1) * pro * pow(2, n - s, mod)) % mod\n            pro = pro * (pow(2, d[i + 1], mod) - 1) % mod\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    out = getmexum(n, arr)\n    print(out)", "T = int(input())\n\ndef pow(x):\n    if x <= 0:\n        return 1\n    elif x == 1:\n        return 2\n    else:\n        y = pow(x // 2)\n        if x % 2 == 0:\n            return y * y % 998244353\n        else:\n            return 2 * y * y % 998244353\nfor _ in range(T):\n    N = int(input())\n    l = list(map(int, input().split()))\n    s = 1\n    l.sort()\n    f = [0]\n    c = [1]\n    t = 0\n    for i in range(N - 1):\n        if l[i] == l[i + 1]:\n            t += 1\n        else:\n            f.append(l[i])\n            c.append(t + 1)\n            t = 0\n    if len(f) == 0 or f[-1] != l[-1]:\n        f.append(l[-1])\n        c.append(t + 1)\n    k = 0\n    i = 1\n    t = 1\n    while i < len(f) and i == f[i]:\n        k += c[i]\n        s = (s + t * i * pow(N - k)) % 998244353\n        t = t * (pow(c[i]) - 1) % 998244353\n        i += 1\n    s = (s + t * i * pow(N - k)) % 998244353\n    print(s - 1)", "def power(x, n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return x\n    temp = power(x, n // 2)\n    res = temp % mod * (temp % mod) % mod\n    if n % 2 != 0:\n        res = res * x % mod\n    return res\nt = int(input())\nmod = 998244353\nwhile t > 0:\n    n = int(input())\n    nums = list(map(int, input().split()))\n    mex = n + 1\n    freq = [0 for _ in range(mex + 2)]\n    for i in range(n):\n        nums[i] = mex + 1 if nums[i] > mex else nums[i]\n        freq[nums[i]] += 1\n    prefix = [1]\n    for i in range(1, mex + 2):\n        cur = (power(2, freq[i]) - 1) % mod\n        res = cur * prefix[i - 1] % mod\n        prefix.append(res)\n    suffix = [0 for _ in range(mex + 2)]\n    suffix[mex + 1] = freq[mex + 1]\n    for i in range(mex, -1, -1):\n        suffix[i] = suffix[i + 1] + freq[i]\n    ans = 0\n    for i in range(1, mex + 1):\n        ex1 = prefix[i - 1]\n        ex2 = suffix[i + 1]\n        ex3 = power(2, ex2)\n        res = ex1 * ex3 % mod\n        cur_ans = res * i % mod\n        ans = (ans + cur_ans) % mod\n    print(ans)\n    t -= 1", "def binpow(a, b):\n    a %= mod\n    res = 1\n    while b > 0:\n        if b & 1:\n            res = res * a % mod\n        a = a * a % mod\n        b >>= 1\n    return res\nt = int(input())\nmod = 998244353\nwhile t > 0:\n    n = int(input())\n    nums = list(map(int, input().split()))\n    mex = n + 1\n    freq = [0 for _ in range(mex + 2)]\n    for i in range(n):\n        nums[i] = mex + 1 if nums[i] > mex else nums[i]\n        freq[nums[i]] += 1\n    prefix = [1]\n    for i in range(1, mex + 2):\n        cur = (binpow(2, freq[i]) - 1) % mod\n        res = cur * prefix[i - 1] % mod\n        prefix.append(res)\n    suffix = [0 for _ in range(mex + 2)]\n    suffix[mex + 1] = freq[mex + 1]\n    for i in range(mex, -1, -1):\n        suffix[i] = suffix[i + 1] + freq[i]\n    ans = 0\n    for i in range(1, mex + 1):\n        ex1 = prefix[i - 1]\n        ex2 = suffix[i + 1]\n        ex3 = binpow(2, ex2)\n        res = ex1 * ex3 % mod\n        cur_ans = res * i % mod\n        ans = (ans + cur_ans) % mod\n    print(ans)\n    t -= 1", "from collections import defaultdict\nMOD = 998244353\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    sequence = list(map(int, input().split()))\n    frequency = defaultdict(int)\n    for i in range(n):\n        frequency[min(sequence[i], n + 1)] += 1\n    sequence_length_covered = 0\n    sum_of_all_mex = 0\n    permutation_of_all_smaller_values = 1\n    for i in range(1, n + 2):\n        sequence_length_covered += frequency[i]\n        sum_of_all_mex += pow(2, n - sequence_length_covered, MOD) * i % MOD * permutation_of_all_smaller_values % MOD\n        if frequency[i] == 0:\n            break\n        else:\n            permutation_of_all_smaller_values *= (pow(2, frequency[i], MOD) - 1) % MOD\n    print(sum_of_all_mex % MOD)", "T = int(input())\nwhile T:\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    A.sort()\n    B = {}\n    for i in range(N):\n        if A[i] < N:\n            if A[i] not in B:\n                B[A[i]] = 0\n            B[A[i]] = B[A[i]] + 1\n    s = 0\n    p = 1\n    mod = 998244353\n    ans = 0\n    for i in range(10 ** 5 + 1):\n        if i + 1 not in B:\n            ans = (ans + (i + 1) * pow(2, N - s, mod) * p) % mod\n            break\n        else:\n            s = s + B[i + 1]\n            ans = (ans + (i + 1) * pow(2, N - s, mod) * p) % mod\n            p = p * (pow(2, B[i + 1], mod) - 1) % mod\n    print(ans)\n    T -= 1", "T = int(input())\nwhile T:\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    A.sort()\n    B = {}\n    for i in range(N):\n        if A[i] < N:\n            if A[i] not in B:\n                B[A[i]] = 0\n            B[A[i]] = B[A[i]] + 1\n    s = 0\n    p = 1\n    mod = 998244353\n    ans = 0\n    for i in range(10 ** 5 + 1):\n        if i + 1 not in B:\n            ans = (ans + (i + 1) * (pow(2, N - s, mod) * p)) % mod\n            break\n        else:\n            s = s + B[i + 1]\n            ans = (ans + (i + 1) * p * pow(2, N - s, mod)) % mod\n            p = p * (pow(2, B[i + 1], mod) - 1) % mod\n    print(ans)\n    T -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if l[i] < n:\n            if l[i] not in d:\n                d[l[i]] = 1\n            else:\n                d[l[i]] += 1\n    p = 1\n    ans = 0\n    MOD = 998244353\n    s = 0\n    for i in range(10 ** 5 + 1):\n        if i + 1 not in d:\n            ans = (ans + (i + 1) * (p * pow(2, n - s, MOD))) % MOD\n            break\n        else:\n            s = s + d[i + 1]\n            ans = (ans + (i + 1) * p * pow(2, n - s, MOD)) % MOD\n            p = p * (pow(2, d[i + 1], MOD) - 1) % MOD\n    print(ans)", "mod = 998244353\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    d = {}\n    for i in range(0, n + 2):\n        if i == 0:\n            d[i] = 1\n        else:\n            d[i] = 0\n    for i in range(0, n):\n        if a[i] > n:\n            a[i] = n + 1\n        d[a[i]] = d[a[i]] + 1\n    total = 0\n    val = 1\n    m = 0\n    for i in range(1, n + 2):\n        val = val * (pow(2, d[i - 1], mod) - 1)\n        m = m + d[i]\n        total = (total + i * pow(2, n - m, mod) * val) % mod\n    print(total % mod)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, ar) = (int(input()), list(map(int, input().split())))\n    dic = Counter(ar)\n    mod = 998244353\n    rem = n\n    left = 0\n    right = 0\n    mul = 1\n    for num in range(1, n + 2):\n        left = num * mul % mod\n        rem = rem - dic[num]\n        right = (right + left * pow(2, rem, mod)) % mod\n        mul = mul * (pow(2, dic[num], mod) - 1) % mod\n    print(right)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, ar) = (int(input()), list(map(int, input().split())))\n    dic = Counter(ar)\n    mod = 998244353\n    (add, mex, mul) = (0, 0, 1)\n    finalsum = 0\n    for num in range(1, n + 2):\n        mex = mul * num % mod\n        add = (add + dic[num]) % mod\n        mex = mex * pow(2, n - add, mod) % mod\n        finalsum = (finalsum + mex) % mod\n        mul = mul * (pow(2, dic[num], mod) - 1) % mod\n    print(finalsum)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, ar) = (int(input()), list(map(int, input().split())))\n    dic = Counter(ar)\n    mod = 998244353\n    (add, mex, mul) = (0, 0, 1)\n    finalsum = 0\n    for num in range(1, n + 2):\n        mex = num * mul % mod\n        add = (add + dic[num]) % mod\n        mex = mex * pow(2, n - add, mod) % mod\n        finalsum = (finalsum + mex) % mod\n        mul = mul * (pow(2, dic[num], mod) - 1) % mod\n    print(finalsum)", "from collections import deque, defaultdict, Counter\nfrom bisect import bisect_left, bisect\nimport math\nmod = 998244353\ntwo = [1]\nfor i in range(1, 123456):\n    two.append(two[-1] * 2)\n    two[i] %= mod\n\ndef test_case():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = {}\n    for i in range(n):\n        cnt[a[i]] = cnt.get(a[i], 0) + 1\n    j = 1\n    prev = 1\n    ans = 0\n    behind = 0\n    while j <= n + 1:\n        ans += j * prev * two[n - cnt.get(j, 0) - behind]\n        prev *= (two[cnt.get(j, 0)] - 1) % mod\n        behind += cnt.get(j, 0)\n        ans %= mod\n        if j not in cnt:\n            break\n        j += 1\n    return ans\nfor _ in range(int(input())):\n    ret = test_case()\n    if ret:\n        print(ret)", "from collections import defaultdict\nt = int(input())\nN = 10 ** 5\nm = 998244353\ntwo = [1 for i in range(N + 1)]\nfor i in range(1, N + 1):\n    two[i] = two[i - 1] * 2 % m\nfor _ in range(t):\n    n = int(input())\n    freq = defaultdict(lambda : 0)\n    a = list(map(int, input().split()))\n    if n == 1:\n        if a[0] == 1:\n            print(3)\n        else:\n            print(2)\n    else:\n        for i in range(n):\n            if a[i] > n:\n                a[i] = n\n            freq[a[i]] += 1\n        lans = 1\n        lesseritems = 0\n        total = 0\n        for mex in range(1, n + 1):\n            lans = lans % m * (two[freq[mex - 1]] - 1) % m % m if not mex == 1 else 1\n            lesseritems += freq[mex - 1]\n            greateritems = n - freq[mex] - lesseritems\n            if greateritems < 0:\n                break\n            total = (total + mex * (lans % m * two[greateritems] % m) % m % m) % m\n        print(total)", "mod = 998244353\nfrom collections import Counter\npowers = [1]\nfor i in range(10 ** 5):\n    powers.append(powers[-1] * 2 % mod)\nfor t in range(int(input())):\n    n = int(input())\n    a = map(int, input().split())\n    cnt = dict(Counter(a))\n    sum_k = 0\n    mult = 1\n    res = 0\n    for i in range(1, n + 2):\n        ki = cnt.get(i, 0)\n        sum_k += ki\n        res = (res % mod + i % mod * (mult % mod) * powers[n - sum_k] % mod % mod) % mod\n        mult = mult % mod * (powers[ki] - 1) % mod % mod\n    print(res)", "import math\nfrom sys import stdin, stdout\nfrom functools import lru_cache\nfrom collections import Counter\nT = int(stdin.readline())\nfor i in range(T):\n    N = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    res = [0]\n    dc = Counter(arr)\n    ans = 0\n    pr = 1\n    sm = 0\n    z = 0\n    for mex in range(1, N + 2):\n        c = dc.get(mex, 0)\n        z += c\n        sm = pow(2, N - z, 998244353)\n        sm = sm * pr * mex\n        pr = pr * (pow(2, c, 998244353) - 1) % 998244353\n        ans += sm\n        ans = ans % 998244353\n    print(ans)", "from sys import stdin, stdout\nfrom collections import Counter\nT = int(stdin.readline())\nfor i in range(T):\n    N = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    res = [0]\n    dc = Counter(arr)\n    ans = 0\n    pr = 1\n    sm = 0\n    z = 0\n    for mex in range(1, N + 2):\n        c = dc.get(mex, 0)\n        z += c\n        sm = pow(2, N - z, 998244353)\n        sm = sm * pr * mex\n        pr = pr * (pow(2, c, 998244353) - 1) % 998244353\n        ans += sm\n        ans = ans % 998244353\n    print(ans)", "from sys import stdin, stdout\nfrom collections import Counter\nT = int(stdin.readline())\nfor i in range(T):\n    N = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    res = [0]\n    dc = Counter(arr)\n    ans = 0\n    pr = 1\n    sm = 0\n    z = 0\n    for mex in range(1, N + 2):\n        c = dc[mex]\n        z += c\n        sm = pow(2, N - z, 998244353)\n        sm = sm * pr * mex\n        pr = pr * (pow(2, c, 998244353) - 1) % 998244353\n        ans += sm\n        ans = ans % 998244353\n    print(ans)", "from sys import stdin, stdout\nfrom collections import defaultdict\nT = int(stdin.readline())\nfor i in range(T):\n    N = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    res = [0]\n    dc = defaultdict(lambda : 0)\n    for nm in arr:\n        dc[nm] += 1\n    ans = 0\n    pr = 1\n    sm = 0\n    z = 0\n    for mex in range(1, N + 2):\n        c = dc[mex]\n        z += c\n        sm = pow(2, N - z, 998244353)\n        sm = sm * pr * mex\n        pr = pr * (pow(2, c, 998244353) - 1) % 998244353\n        ans += sm\n        ans = ans % 998244353\n    print(ans)", "from collections import defaultdict\nt = int(input())\nmod = 998244353\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = defaultdict(lambda : 0)\n    for i in range(n):\n        cnt[a[i]] += 1\n    su = 0\n    prd = 1\n    final_sum = 0\n    for i in range(1, n + 1):\n        su = (su + cnt[i]) % mod\n        res = i * prd % mod\n        res = res % mod * pow(2, n - su, mod) % mod\n        final_sum = (final_sum + res) % mod\n        prd = prd % mod * (pow(2, cnt[i], mod) - 1) % mod % mod\n    print(final_sum)", "from collections import defaultdict\nt = int(input())\nmod = 998244353\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = defaultdict(lambda : 0)\n    for i in range(n):\n        cnt[a[i]] += 1\n    su = 0\n    prd = 1\n    final_sum = 0\n    for i in range(1, n + 1):\n        su = (su + cnt[i]) % mod\n        res = i * prd % mod\n        res = res % mod * pow(2, n - su, mod) % mod\n        final_sum = (final_sum + res) % mod\n        prd = prd % mod * (pow(2, cnt[i], mod) - 1) % mod % mod\n    print(final_sum)", "from collections import Counter\nmod = 998244353\ntwo = [1]\nfor i in range(1, 100017):\n    two.append(two[len(two) - 1] * 2 % mod)\ntest = int(input())\nwhile test:\n    n = int(input())\n    v = list(map(int, input().split()))\n    sorted(v)\n    u = list(set(v))\n    sorted(u)\n    occurance = Counter(v)\n    diff = n + 1\n    for i in range(1, n + 1):\n        if occurance[i] == 0:\n            diff = i\n    sum = 0\n    product = 1\n    ans = 0\n    for i in range(1, diff + 1):\n        value = n - sum - occurance[i]\n        ans = (ans + i * product * two[value]) % mod\n        sum += occurance[i]\n        product *= two[occurance[i]] - 1\n    print(ans)\n    test -= 1", "from collections import Counter\nMAX = 1000001\nMOD = 998244353\npowers = [1]\nfor x in range(1, MAX):\n    powers.append(powers[-1] * 2 % MOD)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    cnt = dict(Counter(arr))\n    mx = 1\n    while mx in cnt:\n        mx += 1\n    if mx == 1:\n        print(powers[n] % MOD)\n        continue\n    cnt[mx] = 0\n    countTill = [0, cnt[1]]\n    product = [0, (powers[cnt[1]] - 1) % MOD]\n    for i in range(2, mx, 1):\n        countTill.append(countTill[-1] + cnt[i])\n        product.append(product[-1] * ((powers[cnt[i]] - 1) % MOD) % MOD)\n    ans = {}\n    ans[1] = powers[n - cnt[1]] % MOD\n    for i in range(2, mx + 1, 1):\n        ans[i] = product[i - 1] * powers[n - countTill[i - 1] - cnt[i]] % MOD\n    final = 0\n    for k in ans:\n        final = (final + k * ans[k] % MOD) % MOD\n    print(final)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    values = list(map(int, input().split()))\n    occ = [0] * (n + 2)\n    for i in values:\n        if i <= n + 1:\n            occ[i] += 1\n    mod = 998244353\n    ans = 0\n    p1 = [0] * (n + 2)\n    for i in range(1, n + 2):\n        p1[i] = p1[i - 1] + occ[i]\n    power_p1 = [1] * (n + 2)\n    power_p2 = [1] * (n + 2)\n    for i in range(1, n + 2):\n        power_p1[i] = pow(2, n - p1[i], mod)\n    for i in range(2, n + 2):\n        power_p2[i] = power_p2[i - 1] * (pow(2, occ[i - 1], mod) - 1) % mod\n    ans = 0\n    for i in range(1, n + 2):\n        ans = (ans + power_p1[i] * power_p2[i] % mod * i % mod) % mod\n    print(ans)", "from collections import Counter\nmod = 998244353\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    f = Counter(a)\n    b = set(f)\n    holes = {i for i in range(1, n + 2)}\n    holes = holes - b\n    hole = min(holes)\n    b = list(b)\n    b.sort()\n    sum = 0\n    pre = 1\n    es = n\n    tmp = 1\n    for i in b:\n        pre = pre * tmp % mod\n        mex = min(hole, i)\n        if mex >= mod:\n            mex -= mod\n        es -= f[i]\n        suf = pow(2, es, mod)\n        sum += mex * pre % mod * suf % mod\n        sum %= mod\n        tmp = (pow(2, f[i], mod) - 1) % mod\n    pre = pre * tmp % mod\n    sum += hole * pre % mod\n    sum %= mod\n    print(sum)", "mod = 998244353\n\ndef power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    cnt = [0 for i in range(n + 2)]\n    for i in a:\n        if i <= n + 1:\n            cnt[i] += 1\n    curr = 1\n    total = 0\n    ans = 0\n    for i in range(1, n + 2):\n        total += cnt[i]\n        ans = (ans + power(2, n - total, mod) * curr % mod * i % mod) % mod\n        curr = curr * (power(2, cnt[i], mod) - 1 + mod) % mod\n    print(ans)", "M = 998244353\npow2 = [1]\nfor i in range(10 ** 5 + 1):\n    pow2.append(pow2[i] * 2 % M)\nfor t in range(int(input().strip())):\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    d = dict()\n    freq = [0 for i in range(n + 5)]\n    for i in arr:\n        freq[min(i, n + 1)] += 1\n    ans = 0\n    prod = 1\n    sf = [0 for i in range(n + 5)]\n    for i in range(n + 3, -1, -1):\n        sf[i] = sf[i + 1] + freq[i]\n    for mex in range(1, n + 1):\n        ans = (ans + mex * prod * pow2[sf[mex + 1]]) % M\n        prod = prod * (pow2[freq[mex]] - 1) % M\n    print(ans)", "from collections import Counter\nI = input\nM = 998244353\nt = int(I())\nfor _ in range(t):\n    n = int(I())\n    c = Counter(map(int, I().split()))\n    p = c[0] = 1\n    i = r = 0\n    while c[i]:\n        i += 1\n        n -= c[i]\n        r = (r + i * p * pow(2, n, M)) % M\n        p = p * (pow(2, c[i], M) - 1) % M\n    print(r)", "from collections import Counter\nI = input\nM = 998244353\nt = int(I())\nfor _ in range(t):\n    n = int(I())\n    c = Counter(map(int, I().split()))\n    p = c[0] = 1\n    i = r = 0\n    while c[i]:\n        i += 1\n        n -= c[i]\n        r = (r + i * p * pow(2, n, M)) % M\n        p = p * (pow(2, c[i], M) - 1) % M\n    print(r)", "powerr = 998244353\nimport collections\nfrom collections import OrderedDict\n\ndef cf(arr):\n    return OrderedDict(collections.Counter(arr))\n\ndef mexum(s, n):\n    if s[n - 1] != 1:\n        return pow(2, n, powerr)\n    freq = cf(s)\n    curr = 1\n    contfreq = 0\n    next = 1\n    pres = 1\n    key = 1\n    totfreq = 0\n    for key in freq:\n        totfreq += freq[key]\n    while pres:\n        if key in freq:\n            contfreq += freq[key]\n            next = key + 1\n            key += 1\n        else:\n            pres = 0\n    rem = n - contfreq\n    curr = 1\n    done = 0\n    minus = 1\n    tot = 0\n    i = 1\n    pres = 1\n    f = 0\n    key = 1\n    while pres and f < n:\n        if key in freq:\n            nextval = key\n            done += freq[key]\n            tot += pow(2, totfreq - done, powerr) * nextval * minus\n            tot %= 998244353\n            nextval += 1\n            minus *= pow(2, freq[key], powerr) - 1\n            key += 1\n        else:\n            tot += pow(2, rem, powerr) * nextval * minus\n            tot %= 998244353\n            break\n        f += 1\n    return int(tot) % 998244353\nt = int(input())\nfor q in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = sorted(l)[::-1]\n    print(mexum(s, n))", "mod = 998244353\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(s) for s in input().split()]\n    x = list(set(a))\n    x.sort()\n    d = {}\n    z = 1\n    for i in range(len(x)):\n        if z == x[i]:\n            z += 1\n        else:\n            break\n    for i in range(n):\n        if a[i] not in d:\n            d[a[i]] = 1\n        else:\n            d[a[i]] += 1\n    j = 1\n    i = 0\n    r = 0\n    s = n - d[x[0]]\n    n1 = len(x)\n    while i < n1 and z > 1:\n        if x[i] != j:\n            r += pow(2, s, mod) * y * j\n            break\n        if i == 0:\n            r += pow(2, s, mod)\n            y = pow(2, d[1], mod) - 1\n            r %= mod\n            j += 1\n            i += 1\n        else:\n            s -= d[x[i]]\n            h = y * pow(2, s, mod)\n            h %= mod\n            r += h * j % mod\n            y *= pow(2, d[x[i]], mod) - 1\n            y %= mod\n            j += 1\n            i += 1\n    if i == n1:\n        r += pow(2, s, mod) * y * j\n    if z == 1:\n        r += pow(2, n, mod) % mod\n    print(r % mod)", "from collections import Counter\nmod = 998244353\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr = Counter(arr)\n    k = 1\n    ans = 0\n    pre = 1\n    pre_c = 0\n    while 1:\n        if arr[k] == 0:\n            ans += k * pre * pow(2, n - pre_c, mod)\n            ans %= mod\n            break\n        pre_c += arr[k]\n        ans += k * pre * pow(2, n - pre_c, mod)\n        ans %= mod\n        pre *= 2 ** arr[k] - 1\n        k += 1\n    print(ans)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    values = list(map(int, input().split()))\n    occ = [0] * (n + 2)\n    for i in values:\n        if i <= n + 1:\n            occ[i] += 1\n    mod = 998244353\n    ans = 0\n    p1 = [0] * (n + 2)\n    for i in range(1, n + 2):\n        p1[i] = p1[i - 1] + occ[i]\n    power_p1 = [1] * (n + 2)\n    power_p2 = [1] * (n + 2)\n    for i in range(1, n + 2):\n        power_p1[i] = pow(2, n - p1[i], mod)\n    for i in range(2, n + 2):\n        power_p2[i] = power_p2[i - 1] * (pow(2, occ[i - 1], mod) - 1) % mod\n    ans = 0\n    for i in range(1, n + 2):\n        ans = (ans + power_p1[i] * power_p2[i] % mod * i % mod) % mod\n    print(ans)", "mod = 998244353\nimport sys\nfrom collections import defaultdict as dc\ninput = sys.stdin.readline\n\ndef solve(n, l, d):\n    for i in range(n):\n        d[l[i]] += 1\n    for i in range(1, 10 ** 5 + 1):\n        if d[i] == 0:\n            res = i\n            break\n    (ans1, RESULT) = (1, 0)\n    ans2 = 0\n    for i in range(1, res + 1):\n        RESULT += d[i]\n        temp = pow(2, n - RESULT, mod)\n        ans2 += i * (ans1 * temp) % mod % mod\n        ans1 = ans1 * (pow(2, d[i], mod) - 1)\n    return ans2 % mod\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = dc(lambda : 0)\n    res = 0\n    print(solve(n, l, d))", "mod = 998244353\nimport sys\nfrom collections import defaultdict as dc\ninput = sys.stdin.readline\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = dc(lambda : 0)\n    res = 0\n    for i in range(n):\n        d[l[i]] += 1\n    for i in range(1, 10 ** 5 + 1):\n        if d[i] == 0:\n            res = i\n            break\n    (ans1, RESULT) = (1, 0)\n    ans2 = 0\n    for i in range(1, res + 1):\n        RESULT += d[i]\n        temp = pow(2, n - RESULT, mod)\n        ans2 += i * (ans1 * temp) % mod % mod\n        ans1 = ans1 * (pow(2, d[i], mod) - 1)\n    print(ans2 % mod)", "mod = 998244353\nimport sys\nfrom collections import defaultdict as dc\ninput = sys.stdin.readline\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = dc(lambda : 0)\n    res = 0\n    for i in range(n):\n        d[l[i]] += 1\n    for i in range(1, 10 ** 5 + 1):\n        if d[i] == 0:\n            res = i\n            break\n    (ans1, curr) = (1, 0)\n    ans2 = 0\n    for i in range(1, res + 1):\n        curr += d[i]\n        temp = pow(2, n - curr, mod)\n        ans2 += i * (ans1 * temp) % mod % mod\n        ans1 = ans1 * (pow(2, d[i], mod) - 1)\n    print(ans2 % mod)", "import collections\nimport sys\nt = int(input())\np = 998244353\nwhile t:\n    t -= 1\n    n = int(input())\n    twon = n\n    m = {}\n    a = [int(x) for x in input().split()]\n    for aa in a:\n        if aa not in m:\n            m[aa] = 0\n        m[aa] += 1\n    sum = 0\n    m = collections.OrderedDict(sorted(m.items()))\n    i = 1\n    for key in m:\n        if key != i:\n            break\n        else:\n            i += 1\n    prod = 1\n    for key in m:\n        if key > i:\n            break\n        twon -= m[key]\n        sum += key * pow(2, twon, p) * prod % p\n        prod = prod * (pow(2, m[key], p) - 1) % p\n    sum += i * prod * pow(2, twon, p)\n    print(sum % p // 1)", "import sys\nfrom functools import lru_cache, cmp_to_key\nfrom heapq import merge, heapify, heappop, heappush\nfrom math import ceil, floor, gcd, fabs, factorial, fmod, sqrt, inf\nfrom collections import defaultdict as dd, deque, Counter as c\nfrom itertools import combinations as comb, permutations as perm\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nmod = pow(10, 9) + 7\nmod2 = 998244353\n\ndef data():\n    return sys.stdin.readline().strip()\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef outln(var):\n    sys.stdout.write(str(var) + '\\n')\n\ndef l():\n    return list(sp())\n\ndef sl():\n    return list(ssp())\n\ndef sp():\n    return map(int, data().split())\n\ndef ssp():\n    return map(str, data().split())\n\ndef l1d(n, val=0):\n    return [val for i in range(n)]\n\ndef l2d(n, m, val=0):\n    return [l1d(n, val) for j in range(m)]\nfor _ in range(int(data())):\n    n = int(data())\n    arr = l()\n    arr.sort()\n    if arr[0] != 1:\n        outln(pow(2, n, mod2))\n        continue\n    (dp, new) = (c(arr), [])\n    new.append(arr[0])\n    for i in range(1, n):\n        if arr[i] != arr[i - 1]:\n            new.append(arr[i])\n    (s, p) = ([], [])\n    (add, mul) = (0, 1)\n    for i in range(len(new)):\n        mul = mul * (pow(2, dp[new[i]], mod2) - 1) % mod2\n        add = (add + dp[new[i]]) % mod2\n        s.append(add)\n        p.append(mul)\n    answer = pow(2, n - dp[arr[0]], mod2)\n    result = True\n    for i in range(1, len(new)):\n        if new[i] != i + 1:\n            answer = (answer + p[i - 1] * pow(2, n - s[i - 1], mod2) * (i + 1)) % mod2\n            result = False\n            break\n        else:\n            answer = (answer + p[i - 1] * pow(2, n - s[i], mod2) * new[i]) % mod2\n    if result:\n        answer = (answer + p[len(new) - 1] * (len(new) + 1)) % mod2\n    outln(answer)", "from bisect import bisect_left as bl, bisect_right as br\nfrom collections import defaultdict as dd\nmod = 998244353\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    l.sort()\n    d = dd(int)\n    for i in range(n):\n        d[l[i]] += 1\n    l1 = list(d.keys())\n    l1.sort()\n    k = 1\n    while True:\n        if d[k] == 0:\n            break\n        k += 1\n    sm = 0\n    l2 = [1]\n    for i in l1:\n        l2.append(l2[-1] * (pow(2, d[i], mod) - 1) % mod)\n    for i in range(1, k + 1):\n        ctd = bl(l, i)\n        ctu = n - br(l, i)\n        sm1 = l2[i - 1]\n        sm = (sm + i * pow(2, ctu, mod) * sm1) % mod\n    print(sm)", "mod = 998244353\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    dp = {}\n    for i in range(n):\n        if i == 0:\n            if a[0] == 1:\n                dp[1] = 1\n                dp[2] = 1\n                ans = 3\n            else:\n                dp[1] = 2\n                ans = 2\n        else:\n            if a[i] not in dp:\n                dp[a[i]] = 0\n            ans = ans * 2 % mod\n            ans = mod + ans - a[i] % mod * (dp[a[i]] % mod) % mod\n            ans = (ans + dp[a[i]] % mod * ((1 + a[i]) % mod) % mod) % mod\n            if a[i] + 1 not in dp:\n                dp[a[i] + 1] = 0\n            dp[a[i] + 1] *= 2\n            dp[a[i] + 1] %= mod\n            dp[a[i] + 1] = (dp[a[i] + 1] + dp[a[i]]) % mod\n    print(ans)", "mod = 998244353\n\ndef power(a, n, m):\n    res = 1\n    while n > 0:\n        if n % 2 == 1:\n            res = res * a % m\n        a = a * a % m\n        n //= 2\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    dp = [0 for i in range(n + 1)]\n    m = dict()\n    for i in arr:\n        if i in m:\n            m[i] += 1\n        else:\n            m[i] = 1\n    dp[0] = 1\n    for i in range(1, n + 1):\n        if i not in m:\n            break\n        else:\n            dp[i] = dp[i - 1] * (power(2, m[i], mod) - 1) % mod % mod\n    (k, cnt) = (1, 0)\n    res = 0\n    for i in range(1, n + 1):\n        if i not in m:\n            k = dp[i - 1] % mod\n            if n - cnt != 0:\n                k = k * power(2, n - cnt, mod) % mod\n            res = (res + i * k % mod) % mod\n            break\n        k = dp[i - 1] % mod\n        cnt += m[i]\n        if n - cnt != 0:\n            k = k * power(2, n - cnt, mod) % mod\n        res = (res + i * k % mod) % mod\n    print(res)", "mod = 998244353\n\ndef power(a, n, m):\n    res = 1\n    while n > 0:\n        if n % 2 == 1:\n            res = res * a % m\n        a = a * a % m\n        n //= 2\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    dp = [0 for i in range(n + 1)]\n    m = dict()\n    for i in arr:\n        if i in m:\n            m[i] += 1\n        else:\n            m[i] = 1\n    dp[0] = 1\n    for i in range(1, n + 1):\n        if i not in m:\n            break\n        else:\n            dp[i] = dp[i - 1] * (power(2, m[i], mod) - 1 + mod) % mod % mod\n    (k, cnt) = (1, 0)\n    res = 0\n    for i in range(1, n + 1):\n        if i not in m:\n            k = dp[i - 1] % mod\n            if n - cnt != 0:\n                k = k * power(2, n - cnt, mod) % mod\n            res = (res + i * k % mod) % mod\n            break\n        k = dp[i - 1] % mod\n        cnt += m[i]\n        if n - cnt != 0:\n            k = k * power(2, n - cnt, mod) % mod\n        res = (res + i * k % mod) % mod\n    print(res)", "import sys\nfrom functools import lru_cache, cmp_to_key\nfrom heapq import merge, heapify, heappop, heappush\nfrom math import ceil, floor, gcd, fabs, factorial, fmod, sqrt, inf\nfrom collections import defaultdict as dd, deque, Counter as c\nfrom itertools import combinations as comb, permutations as perm\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nmod = pow(10, 9) + 7\nmod2 = 998244353\n\ndef data():\n    return sys.stdin.readline().strip()\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef outln(var):\n    sys.stdout.write(str(var) + '\\n')\n\ndef l():\n    return list(sp())\n\ndef sl():\n    return list(ssp())\n\ndef sp():\n    return map(int, data().split())\n\ndef ssp():\n    return map(str, data().split())\n\ndef l1d(n, val=0):\n    return [val for i in range(n)]\n\ndef l2d(n, m, val=0):\n    return [l1d(n, val) for j in range(m)]\nfor _ in range(int(data())):\n    n = int(data())\n    arr = l()\n    arr.sort()\n    if arr[0] != 1:\n        outln(pow(2, n, mod2))\n        continue\n    (dp, new) = (c(arr), [])\n    new.append(arr[0])\n    for i in range(1, n):\n        if arr[i] != arr[i - 1]:\n            new.append(arr[i])\n    (s, p) = ([], [])\n    (add, mul) = (0, 1)\n    for i in range(len(new)):\n        mul = mul * (pow(2, dp[new[i]], mod2) - 1) % mod2\n        add = (add + dp[new[i]]) % mod2\n        s.append(add)\n        p.append(mul)\n    answer = pow(2, n - dp[arr[0]], mod2)\n    result = True\n    for i in range(1, len(new)):\n        if new[i] != i + 1:\n            answer = (answer + p[i - 1] * pow(2, n - s[i - 1], mod2) * (i + 1)) % mod2\n            result = False\n            break\n        else:\n            answer = (answer + p[i - 1] * pow(2, n - s[i], mod2) * new[i]) % mod2\n    if result:\n        answer = (answer + p[len(new) - 1] * (len(new) + 1)) % mod2\n    outln(answer)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    mod = 998244353\n    ans = 0\n    curr = 1\n    one = 0\n    freq = defaultdict(int)\n    for num in arr:\n        freq[num] += 1\n    mul = defaultdict(int)\n    mul[0] = 1\n    while curr in freq:\n        mul[curr] = mul[curr - 1] * (pow(2, freq[curr], mod) - 1)\n        mul[curr] %= mod\n        curr += 1\n    j = 0\n    for i in range(curr + 1):\n        while j < n and arr[j] <= i:\n            j += 1\n        right = n - j\n        temp = i * mul[i - 1] * pow(2, right, mod)\n        temp %= mod\n        ans += temp\n        ans %= mod\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    arr = [int(i) for i in input().split()]\n    elemCounts = {}\n    for num in arr:\n        if num in elemCounts:\n            elemCounts[num] += 1\n        else:\n            elemCounts[num] = 1\n    nums = sorted(elemCounts.keys())\n    currVal = 1\n    opVal = 1\n    if nums[0] != 1:\n        print(pow(2, N, 998244353))\n    else:\n        sum = 0\n        countTillHere = 0\n        mulTillHere = 1\n        brkDet = False\n        for i in range(len(nums)):\n            if nums[i] != opVal:\n                sum = (sum + opVal * pow(2, N - countTillHere, 998244353) * mulTillHere % 998244353) % 998244353\n                brkDet = True\n                break\n            else:\n                countTillHere += elemCounts[nums[i]]\n                sum = (sum + opVal * pow(2, N - countTillHere, 998244353) * mulTillHere % 998244353) % 998244353\n                mulTillHere = mulTillHere * (pow(2, elemCounts[nums[i]], 998244353) - 1) % 998244353\n                opVal = nums[i] + 1\n        if brkDet:\n            print(sum)\n        else:\n            sum = (sum + opVal * pow(2, N - countTillHere, 998244353) * mulTillHere % 998244353) % 998244353\n            print(sum)", "m = 998244353\np2 = [1]\np = 1\nfor i in range(10 ** 5 + 1):\n    p2.append(p % m * (2 % m) % m)\n    p *= 2\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = [0] * (n + 1)\n    for i in range(n):\n        if a[i] <= n:\n            cnt[a[i]] += 1\n    mark = 0\n    c = []\n    for i in range(1, n + 1):\n        if cnt[i] == 0:\n            mark = i\n            break\n        else:\n            c.append(cnt[i])\n    l = 0\n    ans = 0\n    t = 1\n    for i in range(len(c)):\n        l += c[i]\n        if i == 0:\n            ans += p2[n - l] % m\n            ans = ans % m\n            t = t % m * (p2[c[i]] - 1) % m % m\n            t = t % m\n        else:\n            ans += (i + 1) % m * t % m * p2[n - l] % m % m\n            ans = ans % m\n            t = t % m * (p2[c[i]] - 1) % m % m\n            t = t % m\n    ans += t % m * (p2[n - l] % m) * (len(c) + 1) % m % m\n    print(ans % m)", "m = 998244353\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    l = list(map(int, input().split()))\n    dic = dict()\n    for i in range(n):\n        if l[i] not in dic.keys():\n            dic[l[i]] = 1\n        else:\n            dic[l[i]] += 1\n    uni = list(dic.keys())\n    uni.sort()\n    missing = 1\n    for i in range(len(uni)):\n        if uni[i] != missing:\n            break\n        else:\n            missing += 1\n    xx = []\n    for num in uni:\n        xx.append(dic[num])\n    X = sum(xx[missing - 1:])\n    remain = pow(2, X, m)\n    xx = xx[0:missing - 1]\n    if len(xx):\n        simple = [1, 1]\n        simple1 = [1]\n        cnt = n\n        for i in range(len(xx) - 1, 0, -1):\n            simple.append(simple[-1] % m * (pow(2, xx[i]) % m) % m)\n        simple = simple[::-1]\n        for i in range(len(xx)):\n            simple1.append(simple1[-1] % m * ((pow(2, xx[i]) - 1) % m) % m)\n        ans = 0\n        for i in range(len(simple)):\n            ans = ((i + 1) % m * (simple[i] % m) * (simple1[i] % m) * (remain % m) % m + ans % m) % m\n        print(ans)\n    else:\n        print(remain)", "m = 998244353\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    count = [0 for _ in range(n + 2)]\n    for a_i in arr:\n        count[min(n + 1, a_i)] += 1\n    pow_array1 = [pow(2, n_i, m) for n_i in count]\n    pow_array2 = [(p_i - 1) % m for p_i in pow_array1]\n    l_product = [1 for _ in range(n + 2)]\n    for i in range(2, n + 2):\n        l_product[i] = l_product[i - 1] * pow_array2[i - 1] % m\n    r_product = [1 for _ in range(n + 2)]\n    for i in range(n, 0, -1):\n        r_product[i] = r_product[i + 1] * pow_array1[i + 1] % m\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += i * (l_product[i] * r_product[i]) % m % m\n        total_sum %= m\n    print(total_sum)\nt = int(input())\nfor _ in range(t):\n    main()", "from collections import Counter\nMAX = 1000001\nMOD = 998244353\npowers = [1]\nfor x in range(1, MAX):\n    powers.append(powers[-1] * 2 % MOD)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    cnt = dict(Counter(arr))\n    mx = 1\n    while mx in cnt:\n        mx += 1\n    if mx == 1:\n        print(powers[n] % MOD)\n        continue\n    cnt[mx] = 0\n    countTill = [0, cnt[1]]\n    product = [0, (powers[cnt[1]] - 1) % MOD]\n    for i in range(2, mx, 1):\n        countTill.append(countTill[-1] + cnt[i])\n        product.append(product[-1] * ((powers[cnt[i]] - 1) % MOD) % MOD)\n    ans = {}\n    ans[1] = powers[n - cnt[1]] % MOD\n    for i in range(2, mx + 1, 1):\n        ans[i] = product[i - 1] * powers[n - countTill[i - 1] - cnt[i]] % MOD\n    final = 0\n    for k in ans:\n        final = (final + k * ans[k] % MOD) % MOD\n    print(final)", "mod = 998244353\n\ndef pow(x, n):\n    if w[n] != 0:\n        return w[n]\n    else:\n        t = pow(x, n // 2)\n        if n % 2 == 0:\n            k = t * t % mod\n        else:\n            k = 2 * t * t % mod\n        w[n] = k\n        return k\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    w = [0 for i in range(n + 1)]\n    (w[0], w[1]) = (1, 2)\n    if l[0] > 1:\n        print(pow(2, n))\n    else:\n        k = [0]\n        i = 1\n        j = 0\n        while j < n:\n            count = 0\n            while l[j] == i:\n                count += 1\n                j += 1\n                if j == n:\n                    break\n            if count == 0:\n                break\n            else:\n                k.append(count)\n                i += 1\n        t = n - k[1]\n        count = pow(2, t)\n        rem = pow(2, n) - count\n        pro = pow(2, k[1]) - 1\n        for j in range(2, i):\n            t -= k[j]\n            r = pro * pow(2, t)\n            count += j * r % mod\n            rem -= r\n            pro *= pow(2, k[j]) - 1\n        count += i * rem % mod\n        print(count % mod)", "t = int(input().strip())\nm = 998244353\n\ndef fast_exp(n):\n    if n == 0:\n        return 1\n    ans = fast_exp(n // 2)\n    ans = ans * ans % m\n    if n % 2 == 1:\n        ans = 2 * ans % m\n    return ans\nfor _ in range(t):\n    n = int(input().strip())\n    counts = {}\n    a = [int(x) for x in input().strip().split()]\n    for el in a:\n        if el not in counts:\n            counts[el] = 1\n        else:\n            counts[el] += 1\n    p = 1\n    ans = 0\n    for x in range(1, 100001):\n        c = 0\n        if x in counts:\n            c = counts[x]\n        y = fast_exp(n - c) * p % m\n        ans = (ans + y * x % m) % m\n        p = p * (fast_exp(c) - 1) % m\n        n -= c\n        if x not in counts:\n            break\n    print(ans)", "import sys\nmod = 998244353\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    N = int(input())\n    L = list(map(int, input().split()))\n    Hash = defaultdict(lambda : 0)\n    for i in L:\n        Hash[i] += 1\n    maxans = 0\n    for i in range(1, 10 ** 5 + 1):\n        if Hash[i] == 0:\n            maxans = i\n            break\n    ektohlelo = 1\n    curr = 0\n    ans = 0\n    for i in range(1, maxans + 1):\n        curr += Hash[i]\n        lelo = pow(2, N - curr, mod)\n        ans += i * (ektohlelo * lelo) % mod % mod\n        ektohlelo = ektohlelo * (pow(2, Hash[i], mod) - 1)\n    print(ans % mod)", "def main():\n    p = 998244353\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a.sort()\n        l = [0] * (n + 1)\n        for i in a:\n            if i - 1 < n:\n                l[i - 1] += 1\n        s = 0\n        x = n\n        rem = 1\n        u = []\n        q = -1\n        for i in range(n):\n            if l[i] != 0:\n                x -= l[i]\n                s = (s + (i + 1) * (rem * pow(2, x, p) % p) % p) % p\n                u.append(l[i])\n                rem = rem * ((pow(2, l[i]) - 1) % p) % p\n            else:\n                q = i\n                break\n        if q != -1:\n            s = (s + rem * ((i + 1) * pow(2, x, p) % p) % p) % p\n        print(s)\nmain()", "mod = 998244353\npower = [1]\nfor i in range(1, 500001):\n    power.append(power[i - 1] * 2 % mod)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    ans = 0\n    s.sort()\n    dict = {}\n    pict = {}\n    for i in range(n):\n        if dict.get(s[i]) is None:\n            dict[s[i]] = 0\n        dict[s[i]] += 1\n        pict[s[i]] = i\n    index = 0\n    for i in range(len(s)):\n        if s[i] == 1:\n            index += 1\n        else:\n            break\n    ans += power[n - index] * 1\n    ans = ans % mod\n    p = 1\n    count = 0\n    while True:\n        if count >= 1:\n            if pict.get(count + 1) is None:\n                q = n - pict[count] - 1\n            else:\n                q = n - pict[count + 1] - 1\n            ans += p * power[q] * (count + 1)\n            ans = ans % mod\n        if dict.get(count + 1) is None:\n            break\n        count += 1\n        p = p * (power[dict[count]] - 1)\n    print(ans)", "import math\nimport sys\nfrom bisect import bisect_left, bisect_right\nfrom collections import Counter, defaultdict, deque\nfrom functools import cmp_to_key, lru_cache, reduce\nfrom heapq import heapify, heappop, heappush\nfrom itertools import chain, combinations, permutations, product\ninput = sys.stdin.readline\nwrite = sys.stdout.write\nMOD = 998244353\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    nums = [int(s) for s in input().split()]\n    if min(nums) != 1:\n        print(pow(2, n, MOD))\n        continue\n    cnt = Counter(nums)\n    limit = 1\n    remain = n\n    for num in sorted(cnt):\n        if num == limit:\n            remain -= cnt[num]\n            limit += 1\n        else:\n            break\n    prefix = [1]\n    for i in range(1, limit):\n        prefix.append(prefix[-1] * (pow(2, cnt[i], MOD) - 1) % MOD)\n    suffix = [1]\n    for i in range(1, limit)[::-1]:\n        suffix.append(suffix[-1] * pow(2, cnt[i], MOD) % MOD)\n    suffix = suffix[::-1] + [1]\n    ans = 0\n    for i in range(1, limit + 1):\n        ans += i * prefix[i - 1] * suffix[i]\n        ans %= MOD\n    print(ans * pow(2, remain, MOD) % MOD)", "import sys\nfrom collections import *\nfrom bisect import *\ninput = sys.stdin.readline\nt = int(input())\np = 998244353\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    f = Counter(a)\n    s = 0\n    x = len(f)\n    if 1 in f:\n        s += pow(2, n - f[1], p) - 1\n    else:\n        s += pow(2, n, p) - 1\n        print((s + 1) % p)\n        continue\n    c = 2\n    flag = 0\n    x = 1\n    fac = 0\n    while 1:\n        if c - 1 not in f:\n            break\n        x *= pow(2, f[c - 1], p) - 1\n        fac += f[c - 1]\n        if c in f:\n            z = f[c]\n        else:\n            z = 0\n        y = pow(2, n - fac - z, p)\n        s += x * c * y % p\n        c += 1\n    print((s + 1) % p)", "t = int(input())\nfor you in range(t):\n    n = int(input())\n    arr = [0 for i in range(n + 1)]\n    l = input().split()\n    li = [int(i) for i in l]\n    for i in li:\n        if i <= n:\n            arr[i - 1] += 1\n    sumi = 0\n    pro = 1\n    prefsum = 0\n    for i in range(n + 1):\n        if ():\n            break\n        else:\n            prefsum += arr[i]\n            sumi = sumi + (i + 1) * pow(2, n - prefsum, 998244353) * pro % 998244353\n            sumi = sumi % 998244353\n            if arr[i] == 0:\n                break\n            t = pow(2, arr[i], 998244353)\n            if t < 1:\n                t += 998244353\n            pro = pro * (t - 1) % 998244353\n    print(sumi)"]