["from itertools import accumulate\n\ndef prefixSum(seq):\n    return tuple(accumulate(seq))\nlookupDigit = {c: i for (i, c) in enumerate('chef')}\ndigits = tuple((lookupDigit[c] for c in input()))\nnDigitsUpTo = tuple((prefixSum((1 if d == digit else 0 for d in digits)) for digit in range(4)))\nnPairsEndingAt = tuple((tuple(([0] * len(digits) for b in range(4))) for a in range(4)))\nenumerateDigits = enumerate(digits)\nnext(enumerateDigits)\nfor (i, snd) in enumerateDigits:\n    for fst in (d for d in range(4) if d != snd):\n        nPairsEndingAt[fst][snd][i] = nDigitsUpTo[fst][i - 1]\nnPairsUpTo = tuple((tuple((prefixSum(nPairsEndingAt[fst][snd]) for snd in range(4))) for fst in range(4)))\nfor queryIdx in range(int(input())):\n    (fst, snd, begin, end) = input().split()\n    fst = lookupDigit[fst]\n    snd = lookupDigit[snd]\n    begin = int(begin) - 1\n    end = int(end) - 1\n    pairsUpTo = nPairsUpTo[fst][snd]\n    count = pairsUpTo[end] - pairsUpTo[begin]\n    if begin > 0:\n        count -= nDigitsUpTo[fst][begin - 1] * (nDigitsUpTo[snd][end] - nDigitsUpTo[snd][begin])\n    print(count)", "from itertools import accumulate\n\ndef prefixSum(seq):\n    return tuple(accumulate(seq))\nlookupDigit = {c: i for (i, c) in enumerate('chef')}\ndigits = tuple((lookupDigit[c] for c in input()))\nnDigitsUpTo = tuple((prefixSum((1 if d == digit else 0 for d in digits)) for digit in range(4)))\nnPairsEndingAt = tuple((tuple(([0] * len(digits) for b in range(4))) for a in range(4)))\nenumerateDigits = enumerate(digits)\nnext(enumerateDigits)\nfor (i, snd) in enumerateDigits:\n    for fst in (d for d in range(4) if d != snd):\n        nPairsEndingAt[fst][snd][i] = nDigitsUpTo[fst][i - 1]\nnPairsUpTo = tuple((tuple((prefixSum(nPairsEndingAt[fst][snd]) for snd in range(4))) for fst in range(4)))\nfor queryIdx in range(int(input())):\n    (fst, snd, begin, end) = input().split()\n    fst = lookupDigit[fst]\n    snd = lookupDigit[snd]\n    begin = int(begin) - 1\n    end = int(end) - 1\n    pairsUpTo = nPairsUpTo[fst][snd]\n    count = pairsUpTo[end] - pairsUpTo[begin]\n    if begin > 0:\n        count -= nDigitsUpTo[fst][begin - 1] * (nDigitsUpTo[snd][end] - nDigitsUpTo[snd][begin])\n    print(count)", "from itertools import accumulate\n\ndef prefixSum(seq):\n    return tuple(accumulate(seq))\nlookupDigit = {c: i for (i, c) in enumerate('chef')}\ndigits = tuple((lookupDigit[c] for c in input()))\nnDigitsUpTo = tuple((prefixSum((1 if d == digit else 0 for d in digits)) for digit in range(4)))\nnPairsEndingAt = tuple((tuple(([0] * len(digits) for b in range(4))) for a in range(4)))\nenumerateDigits = enumerate(digits)\nnext(enumerateDigits)\nfor (i, snd) in enumerateDigits:\n    for fst in (d for d in range(4) if d != snd):\n        nPairsEndingAt[fst][snd][i] = nDigitsUpTo[fst][i - 1]\nnPairsUpTo = tuple((tuple((prefixSum(nPairsEndingAt[fst][snd]) for snd in range(4))) for fst in range(4)))\nfor queryIdx in range(int(input())):\n    (fst, snd, begin, end) = input().split()\n    fst = lookupDigit[fst]\n    snd = lookupDigit[snd]\n    begin = int(begin) - 1\n    end = int(end) - 1\n    pairsUpTo = nPairsUpTo[fst][snd]\n    count = pairsUpTo[end] - pairsUpTo[begin]\n    if begin > 0:\n        count -= nDigitsUpTo[fst][begin - 1] * (nDigitsUpTo[snd][end] - nDigitsUpTo[snd][begin])\n    print(count)", "def main():\n    P = input()\n    Q = int(input())\n    LetterCount = {'c': 0, 'h': 0, 'e': 0, 'f': 0}\n    LetterCountList = {'c': list(), 'h': list(), 'e': list(), 'f': list()}\n    ways = {'ch': list(), 'ce': list(), 'cf': list(), 'hc': list(), 'he': list(), 'hf': list(), 'eh': list(), 'ec': list(), 'ef': list(), 'fe': list(), 'fc': list(), 'fh': list()}\n    for x in ways:\n        ways[x].append(0)\n    LetterCount[P[0]] = 1\n    LetterCountList['c'].append(LetterCount['c'])\n    LetterCountList['h'].append(LetterCount['h'])\n    LetterCountList['e'].append(LetterCount['e'])\n    LetterCountList['f'].append(LetterCount['f'])\n    for i in range(1, len(P)):\n        LetterCount[P[i]] = LetterCount[P[i]] + 1\n        LetterCountList['c'].append(LetterCount['c'])\n        LetterCountList['h'].append(LetterCount['h'])\n        LetterCountList['e'].append(LetterCount['e'])\n        LetterCountList['f'].append(LetterCount['f'])\n        if P[i] == 'f':\n            ways['cf'].append(ways['cf'][i - 1] + LetterCount['c'])\n            ways['hf'].append(ways['hf'][i - 1] + LetterCount['h'])\n            ways['ef'].append(ways['ef'][i - 1] + LetterCount['e'])\n            ways['ch'].append(ways['ch'][i - 1])\n            ways['fh'].append(ways['fh'][i - 1])\n            ways['eh'].append(ways['eh'][i - 1])\n            ways['ce'].append(ways['ce'][i - 1])\n            ways['he'].append(ways['he'][i - 1])\n            ways['fe'].append(ways['fe'][i - 1])\n            ways['fc'].append(ways['fc'][i - 1])\n            ways['hc'].append(ways['hc'][i - 1])\n            ways['ec'].append(ways['ec'][i - 1])\n        elif P[i] == 'h':\n            ways['ch'].append(ways['ch'][i - 1] + LetterCount['c'])\n            ways['fh'].append(ways['fh'][i - 1] + LetterCount['f'])\n            ways['eh'].append(ways['eh'][i - 1] + LetterCount['e'])\n            ways['cf'].append(ways['cf'][i - 1])\n            ways['hf'].append(ways['hf'][i - 1])\n            ways['ef'].append(ways['ef'][i - 1])\n            ways['ce'].append(ways['ce'][i - 1])\n            ways['he'].append(ways['he'][i - 1])\n            ways['fe'].append(ways['fe'][i - 1])\n            ways['fc'].append(ways['fc'][i - 1])\n            ways['hc'].append(ways['hc'][i - 1])\n            ways['ec'].append(ways['ec'][i - 1])\n        elif P[i] == 'e':\n            ways['ce'].append(ways['ce'][i - 1] + LetterCount['c'])\n            ways['he'].append(ways['he'][i - 1] + LetterCount['h'])\n            ways['fe'].append(ways['fe'][i - 1] + LetterCount['f'])\n            ways['cf'].append(ways['cf'][i - 1])\n            ways['hf'].append(ways['hf'][i - 1])\n            ways['ef'].append(ways['ef'][i - 1])\n            ways['ch'].append(ways['ch'][i - 1])\n            ways['fh'].append(ways['fh'][i - 1])\n            ways['eh'].append(ways['eh'][i - 1])\n            ways['fc'].append(ways['fc'][i - 1])\n            ways['hc'].append(ways['hc'][i - 1])\n            ways['ec'].append(ways['ec'][i - 1])\n        else:\n            ways['fc'].append(ways['fc'][i - 1] + LetterCount['f'])\n            ways['hc'].append(ways['hc'][i - 1] + LetterCount['h'])\n            ways['ec'].append(ways['ec'][i - 1] + LetterCount['e'])\n            ways['cf'].append(ways['cf'][i - 1])\n            ways['hf'].append(ways['hf'][i - 1])\n            ways['ef'].append(ways['ef'][i - 1])\n            ways['ch'].append(ways['ch'][i - 1])\n            ways['fh'].append(ways['fh'][i - 1])\n            ways['eh'].append(ways['eh'][i - 1])\n            ways['ce'].append(ways['ce'][i - 1])\n            ways['he'].append(ways['he'][i - 1])\n            ways['fe'].append(ways['fe'][i - 1])\n    output = list()\n    for x in range(0, Q):\n        query = input()\n        a = query.split()[0]\n        b = query.split()[1]\n        L = int(query.split()[2])\n        R = int(query.split()[3])\n        if L == R:\n            output.append(0)\n        else:\n            key = str(a + b)\n            if L != 1:\n                cnta = LetterCountList[a][L - 1 - 1]\n                cntb = LetterCountList[b][R - 1] - LetterCountList[b][L - 1]\n                output.append(ways[key][R - 1] - cnta * cntb - ways[key][L - 1])\n            else:\n                output.append(ways[key][R - 1])\n    for x in output:\n        print(x)\nmain()", "def main():\n    P = input()\n    Q = int(input())\n    LetterCount = {'c': 0, 'h': 0, 'e': 0, 'f': 0}\n    LetterCountList = {'c': list(), 'h': list(), 'e': list(), 'f': list()}\n    ways = {'ch': list(), 'ce': list(), 'cf': list(), 'hc': list(), 'he': list(), 'hf': list(), 'eh': list(), 'ec': list(), 'ef': list(), 'fe': list(), 'fc': list(), 'fh': list()}\n    for x in ways:\n        ways[x].append(0)\n    LetterCount[P[0]] = 1\n    LetterCountList['c'].append(LetterCount['c'])\n    LetterCountList['h'].append(LetterCount['h'])\n    LetterCountList['e'].append(LetterCount['e'])\n    LetterCountList['f'].append(LetterCount['f'])\n    for i in range(1, len(P)):\n        LetterCount[P[i]] = LetterCount[P[i]] + 1\n        LetterCountList['c'].append(LetterCount['c'])\n        LetterCountList['h'].append(LetterCount['h'])\n        LetterCountList['e'].append(LetterCount['e'])\n        LetterCountList['f'].append(LetterCount['f'])\n        if P[i] == 'f':\n            ways['cf'].append(ways['cf'][i - 1] + LetterCount['c'])\n            ways['hf'].append(ways['hf'][i - 1] + LetterCount['h'])\n            ways['ef'].append(ways['ef'][i - 1] + LetterCount['e'])\n            ways['ch'].append(ways['ch'][i - 1])\n            ways['fh'].append(ways['fh'][i - 1])\n            ways['eh'].append(ways['eh'][i - 1])\n            ways['ce'].append(ways['ce'][i - 1])\n            ways['he'].append(ways['he'][i - 1])\n            ways['fe'].append(ways['fe'][i - 1])\n            ways['fc'].append(ways['fc'][i - 1])\n            ways['hc'].append(ways['hc'][i - 1])\n            ways['ec'].append(ways['ec'][i - 1])\n        elif P[i] == 'h':\n            ways['ch'].append(ways['ch'][i - 1] + LetterCount['c'])\n            ways['fh'].append(ways['fh'][i - 1] + LetterCount['f'])\n            ways['eh'].append(ways['eh'][i - 1] + LetterCount['e'])\n            ways['cf'].append(ways['cf'][i - 1])\n            ways['hf'].append(ways['hf'][i - 1])\n            ways['ef'].append(ways['ef'][i - 1])\n            ways['ce'].append(ways['ce'][i - 1])\n            ways['he'].append(ways['he'][i - 1])\n            ways['fe'].append(ways['fe'][i - 1])\n            ways['fc'].append(ways['fc'][i - 1])\n            ways['hc'].append(ways['hc'][i - 1])\n            ways['ec'].append(ways['ec'][i - 1])\n        elif P[i] == 'e':\n            ways['ce'].append(ways['ce'][i - 1] + LetterCount['c'])\n            ways['he'].append(ways['he'][i - 1] + LetterCount['h'])\n            ways['fe'].append(ways['fe'][i - 1] + LetterCount['f'])\n            ways['cf'].append(ways['cf'][i - 1])\n            ways['hf'].append(ways['hf'][i - 1])\n            ways['ef'].append(ways['ef'][i - 1])\n            ways['ch'].append(ways['ch'][i - 1])\n            ways['fh'].append(ways['fh'][i - 1])\n            ways['eh'].append(ways['eh'][i - 1])\n            ways['fc'].append(ways['fc'][i - 1])\n            ways['hc'].append(ways['hc'][i - 1])\n            ways['ec'].append(ways['ec'][i - 1])\n        else:\n            ways['fc'].append(ways['fc'][i - 1] + LetterCount['f'])\n            ways['hc'].append(ways['hc'][i - 1] + LetterCount['h'])\n            ways['ec'].append(ways['ec'][i - 1] + LetterCount['e'])\n            ways['cf'].append(ways['cf'][i - 1])\n            ways['hf'].append(ways['hf'][i - 1])\n            ways['ef'].append(ways['ef'][i - 1])\n            ways['ch'].append(ways['ch'][i - 1])\n            ways['fh'].append(ways['fh'][i - 1])\n            ways['eh'].append(ways['eh'][i - 1])\n            ways['ce'].append(ways['ce'][i - 1])\n            ways['he'].append(ways['he'][i - 1])\n            ways['fe'].append(ways['fe'][i - 1])\n    output = list()\n    for x in range(0, Q):\n        query = input()\n        a = query.split()[0]\n        b = query.split()[1]\n        L = int(query.split()[2])\n        R = int(query.split()[3])\n        if L == R:\n            output.append(0)\n        elif a == b:\n            Counter = 0\n            count = 0\n            for ij in range(L - 1, R):\n                if P[ij] == a:\n                    Counter = Counter + 1\n                    break\n            for i in range(ij, R):\n                if P[i] == a:\n                    count = count + Counter\n                    Counter = Counter + 1\n            for i in range(R - 1, L - 2, -1):\n                if P[i] == a:\n                    count = count - Counter + 1\n                    break\n            output.append(count)\n        else:\n            key = str(a + b)\n            if L != 1:\n                cnta = LetterCountList[a][L - 1 - 1]\n                cntb = LetterCountList[b][R - 1] - LetterCountList[b][L - 1]\n                output.append(ways[key][R - 1] - cnta * cntb - ways[key][L - 1])\n            else:\n                output.append(ways[key][R - 1])\n    for x in output:\n        print(x)\nmain()", "import sys\n\ndef numGood(P, a, b):\n    count = 0\n    aCount = 0\n    for letter in P:\n        if letter == a:\n            aCount += 1\n            continue\n        if letter == b:\n            count += aCount\n    return count\n\ndef main():\n    args = []\n    for line in sys.stdin:\n        args.append(line)\n    P = args[0]\n    Q = args[1]\n    offset = 2\n    letters = ['c', 'h', 'e', 'f']\n    letterCount = {'c': [0], 'h': [0], 'e': [0], 'f': [0]}\n    pairCount = {'c': {'h': [0], 'e': [0], 'f': [0]}, 'h': {'c': [0], 'e': [0], 'f': [0]}, 'e': {'c': [0], 'h': [0], 'f': [0]}, 'f': {'c': [0], 'h': [0], 'e': [0]}}\n    for n in P[:-1]:\n        letterCount[n].append(letterCount[n][-1] + 1)\n        for letter in letters:\n            if letter != n:\n                letterCount[letter].append(letterCount[letter][-1])\n            for letter2 in letters:\n                if letter2 == n and letter != n:\n                    pairCount[letter][n].append(pairCount[letter][n][-1] + letterCount[letter][-1])\n                elif letter != letter2:\n                    pairCount[letter][letter2].append(pairCount[letter][letter2][-1])\n    for query in args[offset:]:\n        (a, b, L, R) = query.split()\n        L = int(L)\n        R = int(R)\n        cntA = letterCount[a][L - 1]\n        cntB = letterCount[b][R] - letterCount[b][L - 1]\n        print(pairCount[a][b][R] - pairCount[a][b][L - 1] - cntA * cntB)\nmain()", "def main():\n    import sys\n    S = input()\n    c = [1 if S[0] == 'c' else 0]\n    h = [1 if S[0] == 'h' else 0]\n    e = [1 if S[0] == 'e' else 0]\n    f = [1 if S[0] == 'f' else 0]\n    ch = [0]\n    ce = [0]\n    cf = [0]\n    hc = [0]\n    he = [0]\n    hf = [0]\n    ec = [0]\n    eh = [0]\n    ef = [0]\n    fc = [0]\n    fh = [0]\n    fe = [0]\n    for i in range(1, len(S)):\n        if S[i] == 'c':\n            c.append(c[i - 1] + 1)\n        else:\n            c.append(c[i - 1])\n        if S[i] == 'h':\n            h.append(h[i - 1] + 1)\n        else:\n            h.append(h[i - 1])\n        if S[i] == 'e':\n            e.append(e[i - 1] + 1)\n        else:\n            e.append(e[i - 1])\n        if S[i] == 'f':\n            f.append(f[i - 1] + 1)\n        else:\n            f.append(f[i - 1])\n    for i in range(1, len(S)):\n        if S[i] == 'c':\n            hc.append(hc[i - 1] + h[i - 1])\n            ec.append(ec[i - 1] + e[i - 1])\n            fc.append(fc[i - 1] + f[i - 1])\n        else:\n            hc.append(hc[i - 1])\n            ec.append(ec[i - 1])\n            fc.append(fc[i - 1])\n        if S[i] == 'h':\n            ch.append(ch[i - 1] + c[i - 1])\n            eh.append(eh[i - 1] + e[i - 1])\n            fh.append(fh[i - 1] + f[i - 1])\n        else:\n            ch.append(ch[i - 1])\n            eh.append(eh[i - 1])\n            fh.append(fh[i - 1])\n        if S[i] == 'e':\n            ce.append(ce[i - 1] + c[i - 1])\n            he.append(he[i - 1] + h[i - 1])\n            fe.append(fe[i - 1] + f[i - 1])\n        else:\n            ce.append(ce[i - 1])\n            he.append(he[i - 1])\n            fe.append(fe[i - 1])\n        if S[i] == 'f':\n            cf.append(cf[i - 1] + c[i - 1])\n            hf.append(hf[i - 1] + h[i - 1])\n            ef.append(ef[i - 1] + e[i - 1])\n        else:\n            cf.append(cf[i - 1])\n            hf.append(hf[i - 1])\n            ef.append(ef[i - 1])\n    input()\n    for x in sys.stdin:\n        (a, b, L, R) = x.split()\n        L = int(L) - 1\n        R = int(R) - 1\n        if a == 'c' and b == 'h':\n            ans = ch[R]\n            if L > 0:\n                ans -= ch[L - 1] + c[L - 1] * (h[R] - h[L - 1])\n        elif a == 'c' and b == 'e':\n            ans = ce[R]\n            if L > 0:\n                ans -= ce[L - 1] + c[L - 1] * (e[R] - e[L - 1])\n        elif a == 'c' and b == 'f':\n            ans = cf[R]\n            if L > 0:\n                ans -= cf[L - 1] + c[L - 1] * (f[R] - f[L - 1])\n        elif a == 'h' and b == 'c':\n            ans = hc[R]\n            if L > 0:\n                ans -= hc[L - 1] + h[L - 1] * (c[R] - c[L - 1])\n        elif a == 'h' and b == 'e':\n            ans = he[R]\n            if L > 0:\n                ans -= he[L - 1] + h[L - 1] * (e[R] - e[L - 1])\n        elif a == 'h' and b == 'f':\n            ans = hf[R]\n            if L > 0:\n                ans -= hf[L - 1] + h[L - 1] * (f[R] - f[L - 1])\n        elif a == 'e' and b == 'c':\n            ans = ec[R]\n            if L > 0:\n                ans -= ec[L - 1] + e[L - 1] * (c[R] - c[L - 1])\n        elif a == 'e' and b == 'h':\n            ans = eh[R]\n            if L > 0:\n                ans -= eh[L - 1] + e[L - 1] * (h[R] - h[L - 1])\n        elif a == 'e' and b == 'f':\n            ans = ef[R]\n            if L > 0:\n                ans -= ef[L - 1] + e[L - 1] * (f[R] - f[L - 1])\n        elif a == 'f' and b == 'c':\n            ans = fc[R]\n            if L > 0:\n                ans -= fc[L - 1] + f[L - 1] * (c[R] - c[L - 1])\n        elif a == 'f' and b == 'h':\n            ans = fh[R]\n            if L > 0:\n                ans -= fh[L - 1] + f[L - 1] * (h[R] - h[L - 1])\n        elif a == 'f' and b == 'e':\n            ans = fe[R]\n            if L > 0:\n                ans -= fe[L - 1] + f[L - 1] * (e[R] - e[L - 1])\n        print(ans)\nmain()"]