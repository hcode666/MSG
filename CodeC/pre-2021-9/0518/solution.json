["t = int(input())\nfor i in range(t):\n    a = input()\n    b = input()\n    c = 0\n    arr = [a, b]\n    z = 0\n    yon = True\n    for k in range(len(a)):\n        if arr[z][k] == '#':\n            c += 1\n            z = (z + 1) % 2\n            if arr[z][k] == '#':\n                yon = False\n                c = 2 * 10 ** 5\n                break\n    c2 = 0\n    z = 1\n    yon2 = True\n    for k in range(len(a)):\n        if arr[z][k] == '#':\n            c2 += 1\n            z = (z + 1) % 2\n            if arr[z][k] == '#':\n                yon2 = False\n                c2 = 2 * 10 ** 5\n                break\n    if yon or yon2:\n        print('Yes')\n        print(min(c, c2))\n    else:\n        print('No')", "import sys\nsys.setrecursionlimit(2000000)\n\ndef dp_jump(lane_num, ind, lane, cache, n):\n    if ind == n - 1 and lane[lane_num][ind] != '#':\n        cache[lane_num][ind] = 0\n        return cache[lane_num][ind]\n    elif ind >= n:\n        return float('inf')\n    elif cache[lane_num][ind] != None:\n        return cache[lane_num][ind]\n    else:\n        if lane[lane_num][ind] == '#':\n            cache[lane_num][ind] = float('inf')\n            return cache[lane_num][ind]\n        horz = dp_jump(lane_num, ind + 1, lane, cache, n)\n        vertforw = dp_jump(lane_num ^ 1, ind + 1, lane, cache, n) + 1\n        cache[lane_num][ind] = min(horz, vertforw)\n        return cache[lane_num][ind]\ntest = int(input())\nwhile test:\n    lane = []\n    lane.append(sys.stdin.readline().rstrip('\\n'))\n    lane.append(sys.stdin.readline().rstrip('\\n'))\n    n = len(lane[0])\n    cache = [[None for _ in range(n)] for __ in range(2)]\n    dp_jump(0, 0, lane, cache, n)\n    dp_jump(1, 0, lane, cache, n)\n    if cache[0][0] == float('inf') and cache[1][0] == float('inf'):\n        print('No')\n    else:\n        print('Yes')\n        print(min(cache[0][0], cache[1][0]))\n    test -= 1", "import sys\nsys.setrecursionlimit(2000000)\n\ndef dp_jump(lane_num, ind, lane, cache, n):\n    if ind == n - 1 and lane[lane_num][ind] != '#':\n        cache[lane_num][ind] = 0\n        return cache[lane_num][ind]\n    elif ind >= n:\n        return float('inf')\n    elif cache[lane_num][ind] != None:\n        return cache[lane_num][ind]\n    else:\n        if lane[lane_num][ind] == '#':\n            cache[lane_num][ind] = float('inf')\n            return cache[lane_num][ind]\n        horz = dp_jump(lane_num, ind + 1, lane, cache, n)\n        vertforw = dp_jump(lane_num ^ 1, ind + 1, lane, cache, n) + 1\n        cache[lane_num][ind] = min(horz, vertforw)\n        return cache[lane_num][ind]\ntest = int(input())\nwhile test:\n    lane = []\n    lane.append(sys.stdin.readline().rstrip('\\n'))\n    lane.append(sys.stdin.readline().rstrip('\\n'))\n    n = len(lane[0])\n    cache = [[None for _ in range(n)] for __ in range(2)]\n    dp_jump(0, 0, lane, cache, n)\n    dp_jump(1, 0, lane, cache, n)\n    if cache[0][0] == float('inf') and cache[1][0] == float('inf'):\n        print('No')\n    else:\n        print('Yes')\n        print(min(cache[0][0], cache[1][0]))\n    test -= 1", "import sys\nsys.setrecursionlimit(2000000)\n\ndef dp_jump(lane_num, ind, lane, cache, n):\n    if ind == n - 1 and lane[lane_num][ind] != '#':\n        cache[lane_num][ind] = 0\n        return cache[lane_num][ind]\n    elif ind >= n:\n        return float('inf')\n    elif cache[lane_num][ind] != None:\n        return cache[lane_num][ind]\n    else:\n        if lane[lane_num][ind] == '#':\n            cache[lane_num][ind] = float('inf')\n            return cache[lane_num][ind]\n        horz = dp_jump(lane_num, ind + 1, lane, cache, n)\n        vertforw = dp_jump(lane_num ^ 1, ind + 1, lane, cache, n) + 1\n        cache[lane_num][ind] = min(horz, vertforw)\n        return cache[lane_num][ind]\ntest = int(input())\nwhile test:\n    lane = []\n    lane.append(sys.stdin.readline().rstrip('\\n'))\n    lane.append(sys.stdin.readline().rstrip('\\n'))\n    n = len(lane[0])\n    cache = [[None for _ in range(n)] for __ in range(2)]\n    dp_jump(0, 0, lane, cache, n)\n    dp_jump(1, 0, lane, cache, n)\n    if cache[0][0] == float('inf') and cache[1][0] == float('inf'):\n        print('No')\n    else:\n        print('Yes')\n        print(min(cache[0][0], cache[1][0]))\n    test -= 1", "t = int(input())\nfor _ in range(t):\n    l1 = list(input())\n    l2 = list(input())\n    l = [l1, l2]\n    n = len(l1)\n    ans = [[10 ** 6] * n for i in range(2)]\n    if l1[0] == '.':\n        ans[0][0] = 0\n    if l2[0] == '.':\n        ans[1][0] = 0\n    if l1[0] == '#' and l2[0] == '#':\n        print('No')\n        continue\n    for i in range(1, n):\n        for j in range(2):\n            if l[j][i] == '.':\n                ans[j][i] = min(min(ans[j][i - 1], min(ans[(j + 1) % 2][i - 1], ans[(j + 1) % 2][i]) + 1), 10 ** 6)\n    ans = min(ans[0][-1], ans[1][-1])\n    if ans >= 10 ** 6:\n        print('No')\n    else:\n        print('Yes')\n        print(ans)", "In = 1 << 30\nfor i in range(int(input())):\n    L1 = input()\n    L2 = input()\n    Ans = 0\n    Curr = 0\n    for (l1, l2) in zip(L1, L2):\n        if l1 == l2 == '#':\n            Ans = In\n            break\n        if l1 == '#':\n            if Curr == 1:\n                Ans += 1\n            Curr = 2\n        if l2 == '#':\n            if Curr == 2:\n                Ans += 1\n            Curr = 1\n    if Ans >= In:\n        print('No')\n    else:\n        print('Yes')\n        print(Ans)", "t = int(input())\nwhile t:\n    l1 = input()\n    l2 = input()\n    n = len(l1)\n\n    def minGravity(s1, s2):\n        n = len(s1)\n        arr = [0] * 2\n        arr[0] = s1\n        arr[1] = s2\n        s1Dirty = n\n        s2Dirty = n\n        for i in range(n):\n            if s1[i] == '#':\n                s1Dirty = i\n                break\n        for i1 in range(n):\n            if s2[i1] == '#':\n                s2Dirty = i1\n                break\n        if s1Dirty == n or s2Dirty == n:\n            return 0\n        lane = 0\n        if s1Dirty > s2Dirty:\n            lane = 0\n            swiches = 0\n            for i in range(n):\n                if arr[lane][i] == '#':\n                    swiches += 1\n                    lane = lane ^ 1\n            return swiches\n        lane = 1\n        swiches = 0\n        for i in range(n):\n            if arr[lane][i] == '#':\n                swiches += 1\n                lane = lane ^ 1\n        return swiches\n\n    def possible(s1, s2):\n        for i in range(len(s1)):\n            if s1[i] == '#' and s1[i] == s2[i]:\n                return False\n        return True\n    if not possible(l1, l2):\n        print('No')\n    else:\n        print('Yes')\n        print(minGravity(l1, l2))\n    t -= 1", "Infinite = 1 << 30\nfor i in range(int(input())):\n    L1 = input()\n    L2 = input()\n    Ans = 0\n    Curr = 0\n    for (l1, l2) in zip(L1, L2):\n        if l1 == l2 == '#':\n            Ans = Infinite\n            break\n        if l1 == '#':\n            if Curr == 1:\n                Ans += 1\n            Curr = 2\n        if l2 == '#':\n            if Curr == 2:\n                Ans += 1\n            Curr = 1\n    if Ans >= Infinite:\n        print('No')\n    else:\n        print('Yes')\n        print(Ans)", "Infinite = 1 << 30\nfor i in range(int(input())):\n    L1 = input()\n    L2 = input()\n    Ans = 0\n    Curr = 0\n    for (l1, l2) in zip(L1, L2):\n        if l1 == l2 == '#':\n            Ans = Infinite\n            break\n        if l1 == '#':\n            if Curr == 1:\n                Ans += 1\n            Curr = 2\n        if l2 == '#':\n            if Curr == 2:\n                Ans += 1\n            Curr = 1\n    if Ans >= Infinite:\n        print('No')\n    else:\n        print('Yes')\n        print(Ans)", "def ret_val(s1, s2):\n    n = len(s1)\n    change = 0\n    lane = 0\n    if '#' not in s1:\n        return change\n    if '#' not in s2:\n        return change\n    x1 = s1.index('#')\n    x2 = s2.index('#')\n    if x1 > x2:\n        lane = 1\n    elif x1 < x2:\n        lane = 2\n    else:\n        return -1\n    for i in range(1, n):\n        if s1[i] == s2[i] and s1[i] == '#':\n            return -1\n        elif lane == 1 and s1[i] == '#':\n            lane = 2\n            change += 1\n        elif lane == 2 and s2[i] == '#':\n            lane = 1\n            change += 1\n    return change\nt = int(input())\nfor _ in range(t):\n    res = ret_val(input(), input())\n    if res == -1:\n        print('No')\n    else:\n        print('Yes')\n        print(res)", "INF = 1 << 30\nfor _ in range(int(input())):\n    l1 = input()\n    l2 = input()\n    d1 = d2 = 0\n    for (i, j) in zip(l1, l2):\n        (d1, d2) = (INF if i == '#' else min(d1, d2 + 1), INF if j == '#' else min(d2, d1 + 1))\n    ans = min(d1, d2)\n    if ans >= INF:\n        print('No')\n    else:\n        print('Yes')\n        print(ans)", "for _ in range(int(input())):\n    s = str(input())\n    p = str(input())\n    pos = ''\n    ans = 0\n    imp = 0\n    start = 0\n    for i in range(len(s)):\n        if start == 0:\n            if s[i] == '#' and p[i] != '#':\n                pos = 'p'\n                start = 1\n            elif p[i] == '#' and s[i] != '#':\n                pos = 's'\n                start = 1\n            elif s[i] == p[i] == '#':\n                imp = 1\n                break\n        elif pos == 's':\n            if s[i] == '#':\n                if p[i] != '#':\n                    pos = 'p'\n                    ans += 1\n                else:\n                    imp = 1\n                    break\n            else:\n                None\n        elif p[i] == '#':\n            if s[i] != '#':\n                pos = 's'\n                ans += 1\n            else:\n                imp = 1\n                break\n        else:\n            None\n    if imp == 1:\n        print('No')\n    else:\n        print('Yes')\n        print(ans)", "for _ in range(int(input())):\n    s = str(input())\n    p = str(input())\n    pos = ''\n    ans = 0\n    imp = 0\n    start = 0\n    for i in range(len(s)):\n        if start == 0:\n            if s[i] == '#' and p[i] != '#':\n                pos = 'p'\n                start = 1\n            elif p[i] == '#' and s[i] != '#':\n                pos = 's'\n                start = 1\n            elif s[i] == p[i] == '#':\n                imp = 1\n                break\n        elif pos == 's':\n            if s[i] == '#':\n                if p[i] != '#':\n                    pos = 'p'\n                    ans += 1\n                else:\n                    imp = 1\n                    break\n            else:\n                None\n        elif p[i] == '#':\n            if s[i] != '#':\n                pos = 's'\n                ans += 1\n            else:\n                imp = 1\n                break\n        else:\n            None\n    if imp == 1:\n        print('No')\n    else:\n        print('Yes')\n        print(ans)", "for _ in range(int(input())):\n    a = input()\n    b = input()\n    l = len(a)\n    x = a.find('#')\n    y = b.find('#')\n    if x == -1 or y == -1:\n        print('Yes')\n        print('0')\n        continue\n    if a[-1] == '#' and b[-1] == '#' or (a[0] == '#' and b[0] == '#'):\n        print('No')\n        continue\n    if x == y:\n        count1 = 0\n        current = 0\n        for i in range(l - 1):\n            if current:\n                if b[i + 1] == '#':\n                    if a[i + 1] == '.':\n                        current = 0\n                        count1 += 1\n                    elif a[i] == '.':\n                        current = 0\n                        count1 += 1\n                    else:\n                        count1 = float('inf')\n                        break\n            elif a[i + 1] == '#':\n                if b[i + 1] == '.':\n                    current = 1\n                    count1 += 1\n                elif b[i] == '.':\n                    current = 1\n                    count1 += 1\n                else:\n                    count1 = float('inf')\n                    break\n        count2 = 0\n        current = 1\n        for i in range(l - 1):\n            if current:\n                if b[i + 1] == '#':\n                    if a[i + 1] == '.':\n                        current = 0\n                        count2 += 1\n                    elif a[i] == '.':\n                        current = 0\n                        count2 += 1\n                    else:\n                        count2 = float('inf')\n                        break\n            elif a[i + 1] == '#':\n                if b[i + 1] == '.':\n                    current = 1\n                    count2 += 1\n                elif b[i] == '.':\n                    current = 1\n                    count2 += 1\n                else:\n                    count2 = float('inf')\n                    break\n        if count1 == count2 == float('inf'):\n            print('No')\n        else:\n            print('Yes')\n            print(min(count1, count2))\n        continue\n    if x < y:\n        current = 1\n    else:\n        current = 0\n    count = 0\n    for i in range(l - 1):\n        if current:\n            if b[i + 1] == '#':\n                if a[i + 1] == '.':\n                    current = 0\n                    count += 1\n                elif a[i] == '.':\n                    current = 0\n                    count += 1\n                else:\n                    print('No')\n                    break\n        elif a[i + 1] == '#':\n            if b[i + 1] == '.':\n                current = 1\n                count += 1\n            elif b[i] == '.':\n                current = 1\n                count += 1\n            else:\n                print('No')\n                break\n    else:\n        print('Yes')\n        print(count)", "T = int(input())\nfor z in range(T):\n    path1 = list(input())\n    path2 = list(input())\n    distances1 = [999999 for i in range(len(path1))]\n    distances2 = [999999 for i in range(len(path1))]\n    if path1[0] == '#' and path2[0] == '#':\n        print('No')\n        continue\n    if path1[0] == '.':\n        distances1[0] = 0\n    if path2[0] == '.':\n        distances2[0] = 0\n    impossible = False\n    for i in range(0, len(path1) - 1):\n        if path1[i + 1] == '#' and path2[i + 1] == '#':\n            impossible = True\n            break\n        if path1[i + 1] == '.':\n            distances1[i + 1] = min(distances1[i], distances2[i] + 1)\n        else:\n            distances1[i + 1] = 9999999\n        if path2[i + 1] == '.':\n            distances2[i + 1] = min(distances1[i] + 1, distances2[i])\n        else:\n            distances2[i + 1] = 9999999\n    if impossible:\n        print('No')\n    else:\n        print('Yes')\n        print(min(distances1[-1], distances2[-1]))", "T = int(input())\nfor i in range(T):\n    s = input()\n    s2 = input()\n    yo = True\n    for i in range(len(s)):\n        if s[i] == s2[i] == '#':\n            yo = False\n    if yo == False:\n        print('No')\n    else:\n        swaps = 0\n        first = -1\n        second = -1\n        for i in range(len(s)):\n            if s[i] == '#':\n                first = i\n                break\n        for i in range(len(s)):\n            if s2[i] == '#':\n                second = i\n                break\n        if '#' not in s or '#' not in s2:\n            swaps = 0\n        elif first > second:\n            curr_lane = 0\n            for i in range(len(s)):\n                if s[i] == '#' and curr_lane == 0:\n                    swaps += 1\n                    curr_lane = 1 - curr_lane\n                elif s2[i] == '#' and curr_lane == 1:\n                    swaps += 1\n                    curr_lane = 1 - curr_lane\n        else:\n            curr_lane = 1\n            for i in range(len(s)):\n                if s[i] == '#' and curr_lane == 0:\n                    swaps += 1\n                    curr_lane = 1 - curr_lane\n                elif s2[i] == '#' and curr_lane == 1:\n                    swaps += 1\n                    curr_lane = 1 - curr_lane\n        print('Yes')\n        print(swaps)", "ma = 10 ** 6\nfor _ in range(int(input())):\n    s1 = input()\n    s2 = input()\n    l1 = [ma for i in range(len(s1))]\n    l2 = [ma for i in range(len(s2))]\n    if s1[0] == '.':\n        l1[0] = 0\n    if s2[0] == '.':\n        l2[0] = 0\n    for i in range(len(s1)):\n        if l1[i] < ma and s1[i] == '.':\n            if s2[i] == '.':\n                l2[i] = min(l2[i], 1 + l1[i])\n            if i < len(s1) - 1:\n                if s1[i + 1] == '.':\n                    l1[i + 1] = min(l1[i + 1], l1[i])\n                if s2[i + 1] == '.':\n                    l2[i + 1] = min(l2[i + 1], l1[i] + 1)\n        if l2[i] < ma and s2[i] == '.':\n            if s1[i] == '.':\n                l1[i] = min(l1[i], 1 + l2[i])\n            if i < len(s2) - 1:\n                if s1[i + 1] == '.':\n                    l1[i + 1] = min(l1[i + 1], l2[i] + 1)\n                if s2[i + 1] == '.':\n                    l2[i + 1] = min(l2[i + 1], l2[i])\n    if l1[-1] >= ma and l2[-1] >= ma:\n        print('No')\n    else:\n        print('Yes')\n        print(min(l1[-1], l2[-1]))", "import sys\nINF = sys.maxsize\nfor cas in range(int(input())):\n    L1 = input()\n    L2 = input()\n    ans = 0\n    curr = 0\n    for (L1x, L2x) in zip(L1, L2):\n        if L1x == L2x == '#':\n            ans = INF\n            break\n        if L1x == '#':\n            if curr == 1:\n                ans += 1\n            curr = 2\n        if L2x == '#':\n            if curr == 2:\n                ans += 1\n            curr = 1\n    if ans >= INF:\n        print('No')\n    else:\n        print('Yes')\n        print(ans)", "for _ in range(int(input())):\n    s = input()\n    s2 = input()\n    yo = True\n    for i in range(len(s)):\n        if s[i] == s2[i] == '#':\n            yo = False\n    if yo == False:\n        print('No')\n    else:\n        swaps = 0\n        first = -1\n        second = -1\n        for i in range(len(s)):\n            if s[i] == '#':\n                first = i\n                break\n        for i in range(len(s)):\n            if s2[i] == '#':\n                second = i\n                break\n        if '#' not in s or '#' not in s2:\n            swaps = 0\n        elif first > second:\n            curr_lane = 0\n            for i in range(len(s)):\n                if s[i] == '#' and curr_lane == 0:\n                    swaps += 1\n                    curr_lane = 1 - curr_lane\n                elif s2[i] == '#' and curr_lane == 1:\n                    swaps += 1\n                    curr_lane = 1 - curr_lane\n        else:\n            curr_lane = 1\n            for i in range(len(s)):\n                if s[i] == '#' and curr_lane == 0:\n                    swaps += 1\n                    curr_lane = 1 - curr_lane\n                elif s2[i] == '#' and curr_lane == 1:\n                    swaps += 1\n                    curr_lane = 1 - curr_lane\n        print('Yes')\n        print(swaps)", "for _ in range(int(input())):\n    (l1, l2, simp) = (input(), input(), 0)\n    for i in range(len(l1)):\n        if l1[i] == '#' and l2[i] == '#':\n            print('No')\n            simp = 1\n            break\n    if simp == 0:\n        (cnt, cake) = (0, 0)\n        for i in range(len(l2)):\n            if cake == 0:\n                if l2[i] == '#':\n                    f = 1\n                    cake = 1\n                elif l1[i] == '#':\n                    f = 0\n                    cake = 1\n            elif f == 1:\n                if l1[i] != '.':\n                    cnt += 1\n                    f = 0\n                else:\n                    pass\n            elif l2[i] != '.':\n                cnt += 1\n                f = 1\n            else:\n                pass\n        print('Yes', cnt, sep='\\n')", "for _ in range(int(input())):\n    l1 = input()\n    l2 = input()\n    if l1[0] == '#':\n        if l2[0] == '#':\n            print('No')\n            continue\n        else:\n            start = 2\n    elif l2[0] == '#':\n        start = 1\n    else:\n        start = 0\n    switch = 0\n    i = f = 0\n    while i < len(l1):\n        (a, b) = (l1[i], l2[i])\n        if a == '#' and b == '#':\n            f = 1\n            break\n        elif start == 0 and (a == '#' or b == '#'):\n            if a == '#':\n                start = 2\n            else:\n                start = 1\n        elif start == 1 and a == '#':\n            start = 2\n            switch += 1\n        elif start == 2 and b == '#':\n            start = 1\n            switch += 1\n        i += 1\n    if f == 1:\n        print('No')\n    else:\n        print('Yes')\n        print(switch)", "for _ in range(int(input())):\n    l1 = input()\n    l2 = input()\n    curr = 0\n    numb = 1\n    n = len(l1)\n    u = False\n    if l1[0] == '.' and l2[0] == '#':\n        curr = 1\n    elif l2[0] == '.' and l1[0] == '#':\n        curr = 2\n    elif l1[0] == '.' and l2[0] == '.':\n        i = 0\n        while l1[i] == '.' and l2[i] == '.':\n            i += 1\n            if i == n:\n                print('Yes')\n                print(0)\n                u = True\n                break\n        numb = i\n        if not u:\n            if l1[i] == '.' and l2[i] == '#':\n                curr = 1\n            elif l2[i] == '.' and l1[i] == '#':\n                curr = 2\n            else:\n                print('No')\n                u = True\n    else:\n        print('No')\n        u = True\n    ans = 0\n    if not u:\n        for i in range(numb, n):\n            if l1[i] == '#' and l2[i] == '#':\n                print('No')\n                u = True\n                break\n            if curr == 1:\n                if l1[i] == '#':\n                    curr = 2\n                    ans += 1\n            elif l2[i] == '#':\n                curr = 1\n                ans += 1\n        if not u:\n            print('Yes')\n            print(ans)", "for _ in range(int(input())):\n    a = input()\n    b = input()\n    n = len(a)\n    i = -1\n    flag = True\n    currentlane = 0\n    jumps = 0\n    if '#' in a and '#' in b:\n        if a.index('#') > b.index('#'):\n            currentlane = 0\n        else:\n            currentlane = 1\n        while i < n - 1:\n            if a[i + 1] == '#' and b[i + 1] == '#':\n                flag = False\n                break\n            if currentlane == 0:\n                if a[i + 1] == '.':\n                    i += 1\n                elif b[i + 1] == '.':\n                    jumps += 1\n                    i += 1\n                    currentlane = 1\n            elif b[i + 1] == '.':\n                i += 1\n            elif a[i + 1] == '.':\n                jumps += 1\n                i += 1\n                currentlane = 0\n    if flag:\n        print('Yes')\n        print(jumps)\n    else:\n        print('No')", "n = int(input())\nfor _ in range(n):\n    a = list(input())\n    b = list(input())\n    flag = False\n    tr = 0\n    for (i, j) in zip(a, b):\n        if tr == 0:\n            if i == '#':\n                tr = 2\n            if j == '#':\n                tr = 1\n        if i == '#' and j == '#':\n            print('No')\n            flag = True\n            break\n    if flag:\n        flag = False\n        continue\n    count = 0\n    if tr == 2:\n        switch = False\n    else:\n        switch = True\n    for i in range(len(a)):\n        if switch:\n            if a[i] == '#':\n                count += 1\n                switch = False\n        elif b[i] == '#':\n            count += 1\n            switch = True\n    print('Yes')\n    print(count)", "for t in range(int(input())):\n    l1 = list(input().strip())\n    l2 = list(input().strip())\n    n = len(l1)\n    l = [[l1[i], l2[i]] for i in range(n)]\n    flag = True\n    if l1[0] == '#' and l2[0] == '#' or (l1[-1] == '#' and l2[-1] == '#'):\n        print('No')\n        continue\n    ptr = 1 if l[0][1] == '.' else 0\n    ctr = ctr1 = 0\n    if l[0][0] == l[0][1]:\n        ptr1 = 0\n        for i in range(n - 1):\n            if l[i + 1][ptr] == '#':\n                if l[i + 1][1 - ptr] == '#':\n                    flag = False\n                    break\n                else:\n                    ctr += 1\n                    ptr = 1 - ptr\n            if l[i + 1][ptr1] == '#':\n                if l[i + 1][1 - ptr1] == '#':\n                    flag = False\n                    break\n                else:\n                    ctr1 += 1\n                    ptr1 = 1 - ptr1\n        print('Yes\\n{}'.format(min(ctr, ctr1))) if flag else print('No')\n    else:\n        for i in range(n - 1):\n            if l[i + 1][ptr] == '#':\n                if l[i + 1][1 - ptr] == '#':\n                    flag = False\n                    break\n                else:\n                    ctr += 1\n                    ptr = 1 - ptr\n        print('Yes\\n{}'.format(ctr)) if flag else print('No')", "def solve(one, two):\n    dis = 0\n    switch = 0\n    on = one\n    notOn = two\n    possible = True\n    while dis <= N - 1 and possible:\n        if on[dis] == '.':\n            dis += 1\n        elif notOn[dis] == '.':\n            dis += 1\n            switch += 1\n            (on, notOn) = (notOn, on)\n        else:\n            possible = False\n    if possible == False:\n        return -1\n    else:\n        return switch\nfor _ in range(int(input())):\n    first = input()\n    second = input()\n    N = len(first)\n    if '#' not in first:\n        print('Yes')\n        print(0)\n    elif '#' not in second:\n        print('Yes')\n        print(0)\n    else:\n        p = solve(first, second)\n        q = solve(second, first)\n        if p + q == -2:\n            print('No')\n        else:\n            print('Yes')\n            if p < 0:\n                print(q)\n            elif q < 0:\n                print(p)\n            else:\n                print(min(p, q))", "n = int(input())\nfor _ in range(n):\n    a = list(input())\n    b = list(input())\n    flag = False\n    tr = 0\n    for (i, j) in zip(a, b):\n        if tr == 0:\n            if i == '#':\n                tr = 2\n            if j == '#':\n                tr = 1\n        if i == '#' and j == '#':\n            print('No')\n            flag = True\n            break\n    if flag:\n        flag = False\n        continue\n    count = 0\n    if tr == 2:\n        switch = False\n    else:\n        switch = True\n    for i in range(len(a)):\n        if switch:\n            if a[i] == '#':\n                count += 1\n                switch = False\n        elif b[i] == '#':\n            count += 1\n            switch = True\n    print('Yes')\n    print(count)", "from math import inf\nimport sys\nfor _ in range(int(input())):\n    l1 = input()\n    l2 = input()\n    cl1 = l1\n    cl2 = l2\n    s1 = s2 = 0\n    ol = lambda l, l1, l2: l1 if l == l2 else l2\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            print('No')\n            break\n        if cl1[i] == '#':\n            cl1 = ol(cl1, l1, l2)\n            s1 += 1\n        if cl2[i] == '#':\n            cl2 = ol(cl2, l1, l2)\n            s2 += 1\n    else:\n        print('Yes')\n        print(min(s1, s2))", "Infinite = 1 << 30\nfor i in range(int(input())):\n    L1 = input()\n    L2 = input()\n    Ans = 0\n    Curr = 0\n    for (l1, l2) in zip(L1, L2):\n        if l1 == l2 == '#':\n            Ans = Infinite\n            break\n        if l1 == '#':\n            if Curr == 1:\n                Ans += 1\n            Curr = 2\n        if l2 == '#':\n            if Curr == 2:\n                Ans += 1\n            Curr = 1\n    if Ans >= Infinite:\n        print('No')\n    else:\n        print('Yes')\n        print(Ans)", "INF = 1 << 30\nfor i in range(int(input())):\n    L1 = input()\n    L2 = input()\n    ans = 0\n    curr = 0\n    for (l1, l2) in zip(L1, L2):\n        if l1 == l2 == '#':\n            ans = INF\n            break\n        if l1 == '#':\n            if curr == 1:\n                ans += 1\n            curr = 2\n        if l2 == '#':\n            if curr == 2:\n                ans += 1\n            curr = 1\n    if ans >= INF:\n        print('No')\n    else:\n        print('Yes')\n        print(ans)", "def func(cur, other):\n    i = 0\n    cnt = 0\n    n = len(cur)\n    while i < n - 1:\n        if cur[i + 1] == '.':\n            i += 1\n        elif other[i + 1] == '#':\n            return 'No'\n            break\n        else:\n            i += 1\n            (cur, other) = (other, cur)\n            cnt += 1\n    return cnt\nt = int(input())\nfor _ in range(t):\n    l1 = input()\n    l2 = input()\n    n = len(l1)\n    if l1[0] == '.' and l2[0] == '#':\n        val = func(l1, l2)\n        if val != 'No':\n            print('Yes')\n        print(val)\n    elif l1[0] == '#' and l2[0] == '.':\n        val = func(l2, l1)\n        if val != 'No':\n            print('Yes')\n        print(val)\n    elif l1[0] == '#' and l2[0] == '#':\n        print('No')\n    else:\n        a = func(l1, l2)\n        b = func(l2, l1)\n        if a == 'No' and b == 'No':\n            print('No')\n        else:\n            print('Yes')\n            try:\n                print(min(a, b))\n            except:\n                if a == 'No':\n                    print(b)\n                else:\n                    print(a)", "t = int(input())\nfor _ in range(t):\n    st = [input(), input()]\n    n = len(st[0])\n    exec = True\n    for i in range(n):\n        if st[0][i] == st[1][i] == '#':\n            print('No')\n            exec = False\n            break\n    if exec:\n        print('Yes')\n        dp = [[0 for _ in range(n + 1)] for _ in range(2)]\n        for i in range(1, n + 1):\n            if st[0][i - 1] == '#':\n                dp[0][i] = 10 ** 18\n            else:\n                dp[0][i] = min(dp[0][i - 1], 1 + dp[1][i - 1])\n            if st[1][i - 1] == '#':\n                dp[1][i] = 10 ** 18\n            else:\n                dp[1][i] = min(1 + dp[0][i - 1], dp[1][i - 1])\n        print(min(dp[0][n], dp[1][n]))", "__author__ = 'Ronald Kaiser'\n__email__ = 'raios dot catodicos at gmail dot com'\nfrom math import inf\nimport sys\nfor _ in range(int(input())):\n    l1 = input()\n    l2 = input()\n    cl1 = l1\n    cl2 = l2\n    s1 = s2 = 0\n    ol = lambda l, l1, l2: l1 if l == l2 else l2\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            print('No')\n            break\n        if cl1[i] == '#':\n            cl1 = ol(cl1, l1, l2)\n            s1 += 1\n        if cl2[i] == '#':\n            cl2 = ol(cl2, l1, l2)\n            s2 += 1\n    else:\n        print('Yes')\n        print(min(s1, s2))", "UPPER = 0\nLOWER = 1\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        lanes = (input(), input())\n        upper_obstacle = lanes[UPPER].find('#')\n        if upper_obstacle == -1:\n            print('Yes')\n            print(0)\n            continue\n        lower_obstacle = lanes[LOWER].find('#')\n        if lower_obstacle == -1:\n            print('Yes')\n            print(0)\n            continue\n        if upper_obstacle < lower_obstacle:\n            current_lane = LOWER\n        else:\n            current_lane = UPPER\n        progress = 0\n        completion = len(lanes[UPPER]) - 1\n        switches_used = 0\n        if lanes[current_lane][progress] == '#':\n            print('No')\n            continue\n        while progress < completion:\n            if lanes[current_lane][progress + 1] == '.':\n                progress += 1\n                continue\n            elif lanes[(current_lane + 1) % 2][progress + 1] == '.':\n                progress += 1\n                current_lane = (current_lane + 1) % 2\n                switches_used += 1\n                continue\n            else:\n                break\n        else:\n            print('Yes')\n            print(switches_used)\n            continue\n        print('No')\nmain()", "T = int(input())\nfor _ in range(0, T):\n    L1 = input()\n    L2 = input()\n    temp = 0\n    for i in range(0, len(L1)):\n        if L1[i] == '#' and L2[i] == '#':\n            temp = 1\n            break\n    if temp != 0:\n        print('No')\n    else:\n        ans1 = 4 * len(L1) + 100\n        ans2 = 4 * len(L1) + 100\n        if L1[0] == '.':\n            c = 0\n            ans1 = 0\n            for i in range(1, len(L1)):\n                if c == 0:\n                    if L1[i] == '#':\n                        c = 1\n                        ans1 = ans1 + 1\n                elif L2[i] == '#':\n                    c = 0\n                    ans1 = ans1 + 1\n        if L2[0] == '.':\n            c = 0\n            ans2 = 0\n            for i in range(1, len(L2)):\n                if c == 0:\n                    if L2[i] == '#':\n                        c = 1\n                        ans2 = ans2 + 1\n                elif L1[i] == '#':\n                    c = 0\n                    ans2 = ans2 + 1\n        print('Yes')\n        print(min(ans1, ans2))", "for t in range(int(input())):\n    s1 = input()\n    s2 = input()\n    n = len(s1)\n    f = 0\n    for i in range(n):\n        if s1[i] == s2[i] == '#':\n            f = 1\n    if f == 1:\n        print('No')\n        continue\n    c = 0\n    flag = -1\n    for i in range(0, n):\n        if s1[i] == '#':\n            if flag == 0:\n                c += 1\n            flag = 1\n        if s2[i] == '#':\n            if flag == 1:\n                c += 1\n            flag = 0\n    print('Yes')\n    print(c)", "for _ in range(int(input())):\n    s1 = input()\n    s2 = input()\n    n = len(s1)\n    ls1 = [0] * n\n    ls2 = [0] * n\n    ls1[0] = 0 if s1[0] == '.' else int(10000000.0)\n    ls2[0] = 0 if s2[0] == '.' else int(10000000.0)\n    for i in range(1, n):\n        ls1[i] = min(ls1[i - 1], ls2[i - 1] + 1) if s1[i] == '.' else int(10000000.0)\n        ls2[i] = min(ls2[i - 1], ls1[i - 1] + 1) if s2[i] == '.' else int(10000000.0)\n    ans = min(ls1[n - 1], ls2[n - 1])\n    print('{}\\n{}'.format('Yes', ans)) if ans < int(10000000.0) else print('No')", "t = int(input())\nfor _ in range(t):\n    l1 = list(input())\n    l2 = list(input())\n    flag = 0\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            flag = 1\n            break\n    if flag == 1:\n        print('No')\n    else:\n        print('Yes')\n        dp1 = [0] * (len(l1) + 1)\n        dp1[0] = 0\n        dp2 = [0] * (len(l1) + 1)\n        dp2[0] = 0\n        for i in range(1, len(l1) + 1):\n            if l1[i - 1] == '#':\n                dp1[i] = 10 ** 18\n            else:\n                dp1[i] = min(dp1[i - 1], dp2[i - 1] + 1)\n            if l2[i - 1] == '#':\n                dp2[i] = 10 ** 18\n            else:\n                dp2[i] = min(dp2[i - 1], dp1[i - 1] + 1)\n        print(min(dp1[len(l1)], dp2[len(l1)]))", "for _ in range(int(input())):\n    s1 = input()\n    s2 = input()\n    f = 1\n    n = len(s1)\n    for i in range(n):\n        if s1[i] == s2[i] == '#':\n            f = 0\n    if f == 0:\n        print('No')\n        continue\n    cnt = 0\n    if s1[0] == '.':\n        mauka = 0\n    else:\n        mauka = 1\n    mauka = -1\n    for i in range(n):\n        if s1[i] == '#':\n            if mauka == 0:\n                cnt += 1\n            mauka = 1\n        if s2[i] == '#':\n            if mauka == 1:\n                cnt += 1\n            mauka = 0\n    print('Yes')\n    print(cnt)", "import sys\n\ndef perform():\n    lane_1 = list(input())\n    lane_2 = list(input())\n    lane_len = len(lane_1)\n    pos = False\n    min_switch = sys.maxsize\n    lanes = [lane_1, lane_2]\n    if lane_1[0] != '#':\n        t_pos = True\n        t_switch = 0\n        cur_lane = 0\n        for i in range(lane_len):\n            if lanes[cur_lane][i] == '#':\n                t = 0\n                if cur_lane == 0:\n                    t = 1\n                if lanes[t][i] == '.':\n                    t_switch += 1\n                    cur_lane = t\n                else:\n                    t_pos = False\n                    break\n        if t_pos:\n            pos = True\n            min_switch = min(min_switch, t_switch)\n    if lane_2[0] != '#':\n        t_pos = True\n        t_switch = 0\n        cur_lane = 1\n        for i in range(lane_len):\n            if lanes[cur_lane][i] == '#':\n                t = 0\n                if cur_lane == 0:\n                    t = 1\n                if lanes[t][i] == '.':\n                    t_switch += 1\n                    cur_lane = t\n                else:\n                    t_pos = False\n                    break\n        if t_pos:\n            pos = True\n            min_switch = min(min_switch, t_switch)\n    if pos:\n        print('Yes')\n        print(min_switch)\n    else:\n        print('No')\nfor _ in range(int(input())):\n    perform()", "for t in range(int(input())):\n    a = input()\n    b = input()\n    n = len(a)\n    if a[0] == '#' and b[0] == '#':\n        print('No')\n        continue\n    f1 = 1\n    c1 = 0\n    j = 1\n    if a[0] == '.':\n        for i in range(1, n):\n            if a[i] == '#' and b[i] == '#':\n                f1 = 0\n                break\n            if j == 1 and a[i] == '.':\n                continue\n            elif j == 2 and b[i] == '.':\n                continue\n            else:\n                if j == 1:\n                    j = 2\n                else:\n                    j = 1\n                c1 += 1\n    else:\n        f1 = 0\n    c2 = 0\n    j = 2\n    f2 = 1\n    if b[0] == '.':\n        for i in range(1, n):\n            if a[i] == '#' and b[i] == '#':\n                f2 = 0\n                break\n            if j == 1 and a[i] == '.':\n                continue\n            elif j == 2 and b[i] == '.':\n                continue\n            else:\n                if j == 1:\n                    j = 2\n                else:\n                    j = 1\n                c2 += 1\n    else:\n        f2 = 0\n    if f1 and f2:\n        print('Yes')\n        print(min(c1, c2))\n    elif f1 == 1:\n        print('Yes')\n        print(c1)\n    elif f2 == 1:\n        print('Yes')\n        print(c2)\n    else:\n        print('No')", "import sys\nfor _ in range(int(input())):\n    a1 = list(input())\n    a2 = list(input())\n    count = 0\n    DP1 = [0] * len(a1)\n    DP2 = [0] * len(a1)\n    n = len(a1)\n    for i in range(n):\n        if a1[i] == '#' and a2[i] == '#':\n            print('No')\n            count = 1\n            break\n    if count != 1:\n        if a1[0] == '#':\n            DP1[0] = sys.maxsize\n        if a2[0] == '#':\n            DP2[0] = sys.maxsize\n        for i in range(1, n):\n            if a1[i] != '#':\n                DP1[i] = min(DP1[i - 1], DP2[i - 1] + 1)\n            else:\n                DP1[i] = sys.maxsize\n            if a2[i] != '#':\n                DP2[i] = min(DP2[i - 1], DP1[i - 1] + 1)\n            else:\n                DP2[i] = sys.maxsize\n        print('Yes')\n        re = min(DP1[-1], DP2[-1])\n        print(re)", "for __ in range(int(input())):\n    a1 = input()\n    a2 = input()\n    dp1 = [0] * len(a1)\n    dp2 = [0] * len(a1)\n    count = 0\n    j = 0\n    while j < len(a1):\n        if a1[j] == '#' and a2[j] == '#':\n            count = 1\n            print('No')\n            break\n        j += 1\n    if count != 1:\n        if a1[0] == '#':\n            dp1[0] = 10 ** 10\n        if a2[0] == '#':\n            dp2[0] = 10 ** 10\n        for i in range(1, len(a1)):\n            if a1[i] != '#':\n                dp1[i] = min(dp1[i - 1], dp2[i - 1] + 1)\n            else:\n                dp1[i] = 10 ** 10\n            if a2[i] != '#':\n                dp2[i] = min(dp2[i - 1], dp1[i - 1] + 1)\n            else:\n                dp2[i] = 10 ** 10\n        print('Yes')\n        m = min(dp1[-1], dp2[-1])\n        print(m)", "t = int(input())\nfor i in range(t):\n    l1 = input()\n    l2 = input()\n    n = len(l1)\n    dp1 = []\n    dp2 = []\n    for y in range(n):\n        dp1.append(0)\n        dp2.append(0)\n    c = 0\n    for k in range(0, n):\n        if l1[k] == '#' and l2[k] == '#':\n            c = 1\n            break\n    if c == 0:\n        if l1[0] == '#':\n            dp1[0] = 10 ** 10\n        if l2[0] == '#':\n            dp2[0] = 10 ** 10\n        if l1[-1] == '#':\n            dp1[-1] = 10 ** 10\n        if l2[-1] == '#':\n            dp2[-1] = 10 ** 10\n        for j in range(1, n):\n            if l1[j] == '#':\n                dp1[j] = 10 ** 10\n            if l2[j] == '#':\n                dp2[j] = 10 ** 10\n            if l1[j] != '#':\n                dp1[j] = min(dp1[j - 1], dp2[j - 1] + 1)\n            if l2[j] != '#':\n                dp2[j] = min(dp2[j - 1], dp1[j - 1] + 1)\n        x = min(dp1[-1], dp2[-1])\n        print('Yes')\n        print(x)\n    elif c == 1:\n        print('No')", "for _ in range(int(input())):\n    l = input()\n    s = input()\n    flag = 'Yes'\n    bad = 10000000000\n    for i in range(len(l)):\n        if l[i] == '#' and s[i] == '#':\n            flag = 'No'\n            print('No')\n            break\n    if flag == 'Yes':\n        n = len(l)\n        dp1 = [0] * n\n        dp2 = [0] * n\n        if l[0] == '#':\n            dp1[0] = bad\n        if s[0] == '#':\n            dp2[0] = bad\n        for i in range(1, n):\n            if l[i] == '#':\n                dp1[i] = bad\n            else:\n                dp1[i] = min(dp1[i - 1], dp2[i - 1] + 1)\n            if s[i] == '#':\n                dp2[i] = bad\n            else:\n                dp2[i] = min(dp2[i - 1], dp1[i - 1] + 1)\n        if min(dp1[-1], dp2[-1]) < 10 ** 6:\n            print('Yes')\n            print(min(dp1[-1], dp2[-1]))\n        else:\n            print('No')", "for _ in range(int(input())):\n    l = input()\n    s = input()\n    flag = 'Yes'\n    bad = 10000000000\n    for i in range(len(l)):\n        if l[i] == '#' and s[i] == '#':\n            flag = 'No'\n            print('No')\n            break\n    if flag == 'Yes':\n        n = len(l)\n        dp1 = [0] * n\n        dp2 = [0] * n\n        if l[0] == '#':\n            dp1[0] = bad\n        if s[0] == '#':\n            dp2[0] = bad\n        for i in range(n):\n            if l[i] == '#':\n                dp1[i] = bad\n            else:\n                dp1[i] = min(dp1[i - 1], dp2[i - 1] + 1)\n            if s[i] == '#':\n                dp2[i] = bad\n            else:\n                dp2[i] = min(dp2[i - 1], dp1[i - 1] + 1)\n        if min(dp1[-1], dp2[-1]) < 10 ** 6:\n            print('Yes')\n            print(min(dp1[-1], dp2[-1]))\n        else:\n            print('No')", "t = int(input())\nfor m in range(t):\n    l1 = input()\n    l2 = input()\n    k = len(l1)\n    dp1 = [0] * k\n    dp2 = [0] * k\n    c = 0\n    for i in range(k):\n        if l1[i] == '#' and l2[i] == '#':\n            c = 1\n            print('No')\n            break\n    if c != 1:\n        if l1[0] == '#':\n            dp1[0] = 10 ** 9\n        if l2[0] == '#':\n            dp2[0] = 10 ** 9\n        for i in range(1, k):\n            if l1[i] != '#':\n                dp1[i] = min(dp1[i - 1], dp2[i - 1] + 1)\n            else:\n                dp1[i] = 10 ** 9\n            if l2[i] != '#':\n                dp2[i] = min(dp2[i - 1], dp1[i - 1] + 1)\n            else:\n                dp2[i] = 10 ** 9\n        print('Yes')\n        print(min(dp1[-1], dp2[-1]))", "import sys\nfor t in range(int(input())):\n    l1 = input()\n    l2 = input()\n    dp1 = []\n    dp2 = []\n    lengt = len(l1)\n    for i in range(lengt):\n        dp1.append(0)\n        dp2.append(0)\n    c = 0\n    for i in range(len(l1)):\n        if l1[i] == '#' and l2[i] == '#':\n            c = 1\n            print('No')\n            break\n    if c != 1:\n        if l1[0] == '#':\n            dp1[0] = sys.maxsize\n        if l2[0] == '#':\n            dp2[0] = sys.maxsize\n        for i in range(1, len(l1)):\n            if l1[i] != '#':\n                dp1[i] = min(dp1[i - 1], dp2[i - 1] + 1)\n            else:\n                dp1[i] = sys.maxsize\n            if l2[i] != '#':\n                dp2[i] = min(dp2[i - 1], dp1[i - 1] + 1)\n            else:\n                dp2[i] = sys.maxsize\n        print('Yes')\n        print(min(dp1[-1], dp2[-1]))", "def m(l1, l2):\n    l1 = [i for i in l1]\n    l2 = [i for i in l2]\n    dp1 = [0] * len(l1)\n    dp2 = [0] * len(l2)\n    for i in range(len(l1)):\n        if l1[i] == '#' and l2[i] == '#':\n            return ['No']\n    if l1[0] == '#':\n        dp1[0] = 10 ** 9\n    if l2[0] == '#':\n        dp2[0] = 10 ** 9\n    if l1[-1] == '#':\n        dp1[-1] = 10 ** 9\n    if l2[-1] == '#':\n        dp2[-1] = 10 ** 9\n    for i in range(1, len(l1)):\n        if l1[i] == '#':\n            dp1[i] = 10 ** 9\n        if l2[i] == '#':\n            dp2[i] = 10 ** 9\n        if l1[i] != '#':\n            dp1[i] = min(int(dp1[i - 1]), int(dp2[i - 1] + 1))\n        if l2[i] != '#':\n            dp2[i] = min(int(dp2[i - 1]), int(dp1[i - 1] + 1))\n    return ['Yes', min(dp1[-1], dp2[-1])]\nt = int(input())\nwhile t:\n    l1 = input()\n    l2 = input()\n    li = m(l1, l2)\n    if len(li) == 1:\n        print('No')\n    else:\n        print(li[0])\n        print(li[1])\n    t -= 1", "for _ in range(int(input())):\n    s1 = input()\n    s2 = input()\n    s1 = [i for i in s1]\n    s2 = [i for i in s2]\n    k = len(s1)\n    dp1 = [0] * k\n    dp2 = [0] * k\n    f = 0\n    for i in range(k):\n        if s1[i] == '#' and s2[i] == '#':\n            print('No')\n            f = 1\n            break\n    if f:\n        continue\n    if s1[0] == '#':\n        dp1[0] = 10 ** 9\n    if s2[0] == '#':\n        dp2[0] = 10 ** 9\n    if s2[-1] == '#':\n        dp2[-1] = 10 ** 9\n    if s1[-1] == '#':\n        dp1[-1] = 10 ** 9\n    for i in range(1, k):\n        if s1[i] == '#':\n            dp1[i] = 10 ** 9\n        if s2[i] == '#':\n            dp2[i] = 10 ** 9\n        if s2[i] != '#':\n            dp2[i] = min(int(dp1[i - 1] + 1), int(dp2[i - 1]))\n        if s1[i] != '#':\n            dp1[i] = min(int(dp2[i - 1] + 1), int(dp1[i - 1]))\n    print('Yes')\n    print(min(dp1[-1], dp2[-1]))", "import sys\nfor t in range(int(input())):\n    s1 = input()\n    s2 = input()\n    leng = len(s1)\n    f = 0\n    for i in range(leng):\n        if s1[i] == '#' and s2[i] == '#':\n            print('No')\n            f = 1\n            break\n    if f != 1:\n        l1 = []\n        l2 = []\n        for i in range(leng):\n            l1.append(0)\n            l2.append(0)\n        if s1[0] == '#':\n            l1[0] = sys.maxsize\n        if s2[0] == '#':\n            l2[0] = sys.maxsize\n        for i in range(1, leng):\n            if s1[i] == '#':\n                l1[i] = sys.maxsize\n            else:\n                l1[i] = min(l1[i - 1], l2[i - 1] + 1)\n            if s2[i] == '#':\n                l2[i] = sys.maxsize\n            else:\n                l2[i] = min(l2[i - 1], l1[i - 1] + 1)\n        print('Yes')\n        print(min(l1[-1], l2[-1]))", "T = int(input())\nfor _ in range(T):\n    l1 = list(input())\n    l2 = list(input())\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            print('No')\n            break\n    else:\n        print('Yes')\n    dp1 = [0] * len(l1)\n    dp2 = [0] * len(l1)\n    if l1[0] == '#':\n        dp1[0] = 1000000\n    else:\n        dp1[0] = 0\n    if l2[0] == '#':\n        dp2[0] = 1000000\n    else:\n        dp2[0] = 0\n    for i in range(1, len(l1)):\n        if l1[i] == '#':\n            dp1[i] = 1000000\n        else:\n            dp1[i] = min(dp1[i - 1], dp2[i - 1] + 1)\n        if l2[i] == '#':\n            dp2[i] = 1000000\n        else:\n            dp2[i] = min(dp2[i - 1], dp1[i - 1] + 1)\n    val = min(dp1[-1], dp2[-1])\n    if val < 1000000:\n        print(val)", "for h in range(int(input())):\n    L1 = input()\n    L2 = input()\n    L1obs = [0 for i in range(len(L1))]\n    L2obs = [0 for i in range(len(L2))]\n    L1counter = 0\n    L2counter = 0\n    valid = 1\n    for i in range(1, len(L1) + 1):\n        if L1[-i] == '.' and L2[-i] == '.':\n            L1counter += 1\n            L2counter += 1\n        elif L1[-i] == '#' and L2[-i] == '#':\n            valid = 0\n            break\n        elif L1[-i] == '.':\n            L1counter += 1\n            L2counter = 0\n        else:\n            L2counter += 1\n            L1counter = 0\n        L1obs[-i] = L1counter\n        L2obs[-i] = L2counter\n    if valid == 0:\n        print('No')\n        continue\n    currentIndex = 0\n    currentArray = 1\n    i = 0\n    jumpCount = 0\n    extra = 1\n    if L1obs[i] > L2obs[i]:\n        currentArray = 1\n    else:\n        currentArray = 2\n    while i <= len(L1) - 1:\n        if currentArray == 1:\n            i += L1obs[i] + 1\n            currentArray = 2\n        else:\n            i += L2obs[i] + 1\n            currentArray = 1\n        if i > len(L1):\n            break\n        jumpCount += 1\n    print('Yes')\n    print(jumpCount)", "def sfidx(ls, a):\n    try:\n        return ls.index('#')\n    except:\n        return len(ls)\nfor _ in range(int(input())):\n    L1 = list(input().strip())\n    L2 = list(input().strip())\n    cmp = [L1, L2]\n    lin = 0 if sfidx(L1, '#') > sfidx(L2, '#') else 1\n    sw = 0\n    block = False\n    for a in range(len(L1)):\n        if cmp[lin][a] == '#':\n            lin = 1 - lin\n            sw += 1\n            if cmp[lin][a] == '#':\n                block = True\n                break\n    if block:\n        print('No')\n    else:\n        print('Yes')\n        print(sw)", "t = int(input())\nfor i in range(t):\n    s1 = input()\n    s2 = input()\n    gr = 0\n    flag = 99999999999999999\n    cur = 0\n    for i in range(len(s1)):\n        if s1[i] == s2[i] == '#':\n            gr = flag\n            break\n        elif s1[i] == '#':\n            if cur == 1:\n                gr += 1\n            cur = 2\n        elif s2[i] == '#':\n            if cur == 2:\n                gr += 1\n            cur = 1\n    if gr == flag:\n        print('No')\n    else:\n        print('Yes')\n        print(gr)", "import math\nt = int(input())\nfor k in range(t):\n    s1 = input()\n    s2 = input()\n    flag = 0\n    n = len(s1)\n    dp1 = []\n    dp2 = []\n    for i in range(n):\n        if s1[i] == s2[i] == '#':\n            print('No')\n            break\n    else:\n        print('Yes')\n        if s1[0] == '#':\n            dp1.append(math.inf)\n        else:\n            dp1.append(0)\n        if s2[0] == '#':\n            dp2.append(math.inf)\n        else:\n            dp2.append(0)\n        for i in range(1, n):\n            if s1[i] == '#':\n                dp1.append(math.inf)\n            else:\n                dp1.append(min(dp1[i - 1], dp2[i - 1] + 1))\n            if s2[i] == '#':\n                dp2.append(math.inf)\n            else:\n                dp2.append(min(dp2[i - 1], dp1[i - 1] + 1))\n        res = min(dp1[n - 1], dp2[n - 1])\n        print(res)", "val = 10 ** 7\nt = int(input().strip())\nfor i in range(t):\n    str1 = input().strip()\n    str2 = input().strip()\n    n = len(str1)\n    dp = [[val for i in range(2)] for j in range(n)]\n    if str1[0] == '#' and str2[0] == '#':\n        print('No')\n    else:\n        if str1[0] == '.':\n            dp[0][0] = 0\n        if str2[0] == '.':\n            dp[0][1] = 0\n        for i in range(1, n):\n            if str1[i] == '.':\n                dp[i][0] = min(dp[i - 1][0], dp[i - 1][1] + 1)\n            else:\n                dp[i][0] = val\n            if str2[i] == '.':\n                dp[i][1] = min(dp[i - 1][0] + 1, dp[i - 1][1])\n        min1 = min(dp[n - 1][0], dp[n - 1][1])\n        if min1 < val:\n            print('Yes')\n            print(min1)\n        else:\n            print('No')", "t = int(input())\nwhile t:\n    t = t - 1\n    a = input()\n    b = input()\n    c = 0\n    f = 0\n    s = 0\n    for i in range(len(a)):\n        if a[i] == '#' and c != 'b':\n            if c == 0:\n                c = 'b'\n            elif b[i] == '#':\n                f = 1\n                break\n            else:\n                s = s + 1\n                c = 'b'\n        if b[i] == '#' and c != 'a':\n            if c == 0:\n                c = 'a'\n            elif a[i] == '#':\n                f = 1\n                break\n            else:\n                s = s + 1\n                c = 'a'\n    if f == 0:\n        print('Yes')\n        print(s)\n    else:\n        print('No')", "for t in range(int(input())):\n    s = []\n    s.append(input())\n    s.append(input())\n    n = len(s[0])\n    flag = [0, 0]\n    count = [0, 0]\n    lane = 0\n    i = 0\n    switch = 0\n    if s[0][0] == '#':\n        flag[0] = 1\n    else:\n        while i < n - 1:\n            x = (lane + 1) % 2\n            if s[lane][i + 1] == '.':\n                i += 1\n                switch = 0\n                continue\n            elif s[x][i] == '.':\n                lane = x\n                count[0] += 1\n                if switch == 0:\n                    switch = 1\n                else:\n                    flag[0] = 1\n                    break\n                continue\n            elif s[x][i + 1] == '.':\n                lane = x\n                count[0] += 1\n                i += 1\n                switch = 0\n                continue\n            else:\n                flag[0] = 1\n                break\n    lane = 1\n    i = 0\n    switch = 0\n    if s[1][0] == '#':\n        flag[1] = 1\n    else:\n        while i < n - 1:\n            x = (lane + 1) % 2\n            if s[lane][i + 1] == '.':\n                i += 1\n                switch = 0\n                continue\n            elif s[x][i] == '.':\n                lane = x\n                count[1] += 1\n                if switch == 0:\n                    switch += 1\n                else:\n                    flag[1] = 1\n                    break\n                continue\n            elif s[x][i + 1] == '.':\n                lane = x\n                count[1] += 1\n                i += 1\n                switch = 0\n                continue\n            else:\n                flag[1] = 1\n                break\n    if flag[0] == 1 and flag[1] == 1:\n        print('No')\n    elif flag[0] == 1 and flag[1] == 0:\n        print('Yes')\n        print(count[1])\n    elif flag[0] == 0 and flag[1] == 1:\n        print('Yes')\n        print(count[0])\n    else:\n        print('Yes')\n        print(min(count))", "cases = int(input())\nfor _ in range(cases):\n    top = '.' + input()\n    bottom = '.' + input()\n    array = [top, bottom]\n    tfind = top.find('#')\n    bfind = bottom.find('#')\n    if (tfind > bfind and bfind != -1) | (tfind == -1):\n        start = 0\n    else:\n        start = 1\n    count = 0\n    ok = True\n    for index in range(len(top) - 1):\n        if array[start][index + 1] == '.':\n            continue\n        start = (start + 1) % 2\n        count += 1\n        if array[start][index + 1] == '.':\n            continue\n        else:\n            ok = False\n            break\n    if ok:\n        print('Yes')\n        print(count)\n    else:\n        print('No')", "def solve(lanes):\n    lanelength = len(lanes[0])\n    dp = [[False] * lanelength, [False] * lanelength]\n    for pos in range(lanelength):\n        for lane in (0, 1):\n            if not pos:\n                dp[lane][pos] = lanes[lane][pos] == '.'\n                continue\n            else:\n                dp[lane][pos] = (lanes[lane][pos] == '.') & any([dp[0][pos - 1], dp[1][pos - 1]])\n        if lanes[0][pos] == lanes[1][pos] == '#':\n            break\n    if dp[0][-1] or dp[1][-1]:\n        print('Yes')\n    else:\n        print('No')\n        return\n    switches = [0, 0]\n    for start_lane in (0, 1):\n        current_lane = start_lane\n        for pos in range(lanelength):\n            if not dp[current_lane][pos]:\n                (current_lane, switches[start_lane]) = (1 - current_lane, switches[start_lane] + 1)\n    print(min(switches))\nnumber_test_cases = int(input())\nfor _ in range(number_test_cases):\n    lane1 = input()\n    lane2 = input()\n    solve([lane1, lane2])", "t = int(input())\nwhile t > 0:\n    a = input()\n    b = input()\n    l = len(a)\n    flag = 1\n    for i in range(l):\n        if a[i] == '#' and b[i] == '#':\n            flag = 0\n            break\n    if flag == 1:\n        if a[0] == '.':\n            count1 = 0\n            start = 'a'\n            i = 0\n            while i < l:\n                if start == 'a':\n                    while a[i] == '.':\n                        if i == l - 1:\n                            i = l\n                            break\n                        i = i + 1\n                    if i < l:\n                        start = 'b'\n                        count1 = count1 + 1\n                elif start == 'b':\n                    while b[i] == '.':\n                        if i == l - 1:\n                            i = l\n                            break\n                        i = i + 1\n                    if i < l:\n                        start = 'a'\n                        count1 = count1 + 1\n        else:\n            count1 = 9999999\n        if b[0] == '.':\n            count2 = 0\n            start = 'b'\n            i = 0\n            while i < l:\n                if start == 'a':\n                    while a[i] == '.':\n                        if i == l - 1:\n                            i = l\n                            break\n                        i = i + 1\n                    if i < l:\n                        start = 'b'\n                        count2 = count2 + 1\n                elif start == 'b':\n                    while b[i] == '.':\n                        if i == l - 1:\n                            i = l\n                            break\n                        i = i + 1\n                    if i < l:\n                        start = 'a'\n                        count2 = count2 + 1\n        else:\n            count2 = 9999999\n        print('Yes')\n        print(min(count1, count2))\n    if flag == 0:\n        print('No')\n    t = t - 1", "def solve():\n    num_test = int(input())\n    for i in range(num_test):\n        test_case()\n\ndef test_case():\n    lane1 = input()\n    lane2 = input()\n    destination = find_destination(lane1, lane2)\n    if len(destination) == 1:\n        print('No')\n    else:\n        print('Yes')\n        print(destination[1])\n\ndef find_destination(lane1, lane2):\n    jump = 0\n    dest_reached = 'Y'\n    current_lane = ''\n    other_lane = ''\n    currnet_pos = 0\n    first_dirty_lane1 = lane1.find('#')\n    first_dirty_lane2 = lane2.find('#')\n    if first_dirty_lane1 == -1 or first_dirty_lane2 == -1:\n        return ['Y', 0]\n    if first_dirty_lane1 >= first_dirty_lane2:\n        (current_lane, other_lane) = (lane1, lane2)\n        currnet_pos = first_dirty_lane1\n    else:\n        (current_lane, other_lane) = (lane2, lane1)\n        currnet_pos = first_dirty_lane2\n    for i in range(currnet_pos, len(lane1)):\n        if current_lane[i] == '#' and other_lane[i] == '#':\n            dest_reached = 'N'\n            break\n        if current_lane[i] == '#':\n            (current_lane, other_lane) = (other_lane, current_lane)\n            jump += 1\n    if dest_reached == 'N':\n        return ['N']\n    else:\n        return ['Y', jump]\nsolve()", "import sys\n\ndef calculate(m, x):\n    resp = 0\n    if m[x][0] == '#':\n        return len(m[x]) + 1\n    for i in range(0, len(m[0]) - 1):\n        if m[x][i + 1] == '#':\n            if m[(x + 1) % 2][i + 1] == '#':\n                return len(m[x]) + 1\n            else:\n                x = (x + 1) % 2\n                resp += 1\n    return resp\n\ndef solve(m):\n    resp = min(calculate(m, 0), calculate(m, 1))\n    return -1 if resp == len(m[0]) + 1 else resp\nT = int(input())\nm = ['', '']\nfor i in range(T):\n    m[0] = input()\n    m[1] = input()\n    resp = solve(m)\n    if resp == -1:\n        print('No')\n    else:\n        print('Yes\\n{0}'.format(resp))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef minop(l1, l2):\n    c = 0\n    if l2[0] == '.':\n        if l1[0] == '#':\n            (l1, l2) = (l2, l1)\n        elif farest(l2) > farest(l1):\n            (l1, l2) = (l2, l1)\n    for i in range(1, len(l1)):\n        if l1[i] == '#':\n            c += 1\n            (l1, l2) = (l2, l1)\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l.append([input(), input()])\nfor i in range(nb):\n    x = test(l[i][0], l[i][1])\n    print(x)\n    if x == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef minop(l1, l2):\n    c = 0\n    if l2[0] == '.':\n        if l1[0] == '#':\n            (l1, l2) = (l2, l1)\n        else:\n            i = 0\n            while i < len(l1) and l1[i] != '#' and (l2[i] != '#'):\n                i += 1\n            if i < len(l1) and l1[i] == '#':\n                (l1, l2) = (l2, l1)\n    for i in range(1, len(l1)):\n        if l1[i] == '#':\n            c += 1\n            (l1, l2) = (l2, l1)\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l.append([input(), input()])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "test = int(input())\nl1 = []\nl2 = []\nfor j in range(0, test):\n    l1 = input()\n    l2 = input()\n    x = 1\n    y = 0\n    c = 0\n    for i in range(0, len(l1)):\n        if l1[i] == '.' and l2[i] == '#':\n            if x == 2:\n                x = 1\n                y = y + 1\n        elif l2[i] == '.' and l1[i] == '#':\n            if x == 1:\n                x = 2\n                y = y + 1\n        elif l1[i] == '.' and l2[i] == '.':\n            continue\n        else:\n            print('No')\n            c = 1\n            break\n        i = i + 1\n    x = 2\n    z = 0\n    for i in range(0, len(l1)):\n        if l2[i] == '.' and l1[i] == '#':\n            if x == 1:\n                x = 2\n                z = z + 1\n        elif l1[i] == '.' and l2[i] == '#':\n            if x == 2:\n                x = 1\n                z = z + 1\n        else:\n            continue\n    if c != 1:\n        print('Yes')\n        if y > z:\n            print(z)\n        else:\n            print(y)", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef minop(l1, l2):\n    c = 0\n    if l2[0] == '.':\n        if l1[0] == '#':\n            (l1, l2) = (l2, l1)\n        elif farest(l2) > farest(l1):\n            (l1, l2) = (l2, l1)\n    for i in range(1, len(l1)):\n        if l1[i] == '#':\n            c += 1\n            (l1, l2) = (l2, l1)\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef minop(l1, l2):\n    c = 0\n    if l2[0] == '.':\n        if l1[0] == '#':\n            (l1, l2) = (l2, l1)\n        elif farest(l2) > farest(l1):\n            (l1, l2) = (l2, l1)\n    for i in range(1, len(l1)):\n        if l1[i] == '#':\n            c += 1\n            (l1, l2) = (l2, l1)\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l.append([input(), input()])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef minop(l1, l2):\n    c = 0\n    if l2[0] == '.':\n        if l1[0] == '#':\n            (l1, l2) = (l2, l1)\n        elif farest(l2) > farest(l1):\n            (l1, l2) = (l2, l1)\n    for i in range(1, len(l1)):\n        if l1[i] == '#':\n            c += 1\n            (l1, l2) = (l2, l1)\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef minop(l1, l2):\n    c = 0\n    if farest(l2) > farest(l1):\n        (l1, l2) = (l2, l1)\n    for i in range(1, len(l1)):\n        if l1[i] == '#':\n            c += 1\n            (l1, l2) = (l2, l1)\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l.append([input(), input()])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef minop(l1, l2):\n    c = 0\n    if l1[0] == '.' and l2[0] == '.' and (farest(l2) > farest(l1)):\n        (l1, l2) = (l2, l1)\n    elif l2[0] == '.' and l1[0] == '#':\n        (l1, l2) = (l2, l1)\n    for i in range(1, len(l1)):\n        if l1[i] == '#':\n            c += 1\n            (l1, l2) = (l2, l1)\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l.append([input(), input()])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef minop(l1, l2):\n    c = 0\n    if l1[0] == '.' and l2[0] == '.':\n        if farest(l2) > farest(l1):\n            (l1, l2) = (l2, l1)\n    elif l2[0] == '.':\n        (l1, l2) = (l2, l1)\n    for i in range(1, len(l1)):\n        if l1[i] == '#':\n            c += 1\n            (l1, l2) = (l2, l1)\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l.append([input(), input()])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef minop(l1, l2):\n    c = 0\n    if l1[0] == '.' and l2[0] == '.':\n        if farest(l2) > farest(l1):\n            (l1, l2) = (l2, l1)\n    elif l2[0] == '.':\n        (l1, l2) = (l2, l1)\n    for i in range(1, len(l1)):\n        if l1[i] == '#':\n            c += 1\n            (l1, l2) = (l2, l1)\n    return c\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    print(test(l1, l2))\n    if test(l1, l2) == 'Yes':\n        print(minop(l1, l2))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef minop(l1, l2):\n    c = 0\n    if l1[0] == '.' and l2[0] == '.':\n        if farest(l2) > farest(l1):\n            (l1, l2) = (l2, l1)\n    elif l2[0] == '.':\n        (l1, l2) = (l2, l1)\n    for i in range(1, len(l1)):\n        if l1[i] == '#':\n            c += 1\n            (l1, l2) = (l2, l1)\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef minop(l1, l2):\n    c = 0\n    x = 'l1'\n    if l1[0] == '.' and l2[0] == '.':\n        if farest(l2) > farest(l1):\n            (l1, l2) = (l2, l1)\n    elif l2[0] == '.':\n        (l1, l2) = (l2, l1)\n    for i in range(1, len(l1)):\n        if l1[i] == '#':\n            c += 1\n            (l1, l2) = (l2, l1)\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef minop(l1, l2):\n    c = 0\n    x = 'l1'\n    if farest(l2) > farest(l1):\n        x = 'l2'\n    l = l1 if x == 'l1' else l2\n    for i in range(1, len(l1)):\n        if l[i] == '#':\n            c += 1\n            x = 'l1' if x == 'l2' else 'l2'\n            l = l1 if x == 'l1' else l2\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef minop(l1, l2):\n    c = 0\n    x = 'l1'\n    if l1[0] == '.' and l2[0] == '.':\n        if farest(l2) > farest(l1):\n            x = 'l2'\n    elif l2[0] == '.':\n        x = 'l2'\n    l = l1 if x == 'l1' else l2\n    for i in range(1, len(l1)):\n        if l[i] == '#':\n            c += 1\n            x = 'l1' if x == 'l2' else 'l2'\n            l = l1 if x == 'l1' else l2\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef minop(l1, l2):\n    c = 0\n    x = 'l1'\n    if farest(l2) > farest(l1):\n        x = 'l2'\n    l = l1 if x == 'l1' else l2\n    for i in range(1, len(l1)):\n        if l[i] == '#':\n            c += 1\n            x = 'l1' if x == 'l2' else 'l2'\n            l = l1 if x == 'l1' else l2\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef minop(l1, l2):\n    c = 0\n    x = 'l1'\n    if farest(l2) > farest(l1):\n        x = 'l2'\n    l = l1 if x == 'l1' else l2\n    for i in range(1, len(l1)):\n        if l[i] == '#':\n            c += 1\n            x = 'l1' if x == 'l2' else 'l2'\n            l = l1 if x == 'l1' else l2\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef minop(l1, l2):\n    c = 0\n    x = 'l1'\n    if farest(l2) > farest(l1):\n        x = 'l2'\n    l = l1 if x == 'l1' else l2\n    for i in range(1, len(l1)):\n        if l[i] == '#':\n            c += 1\n            x = 'l1' if x == 'l2' else 'l2'\n            l = l1 if x == 'l1' else l2\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef minop(l1, l2):\n    c = 0\n    x = 'l1'\n    if farest(l2) > farest(l1):\n        x = 'l2'\n    l = l1 if x == 'l1' else l2\n    for i in range(1, len(l1)):\n        if l[i] == '#':\n            c += 1\n            x = 'l1' if x == 'l2' else 'l2'\n            l = l1 if x == 'l1' else l2\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef minop(l1, l2):\n    c = 0\n    x = 'l1'\n    if l1[0] == '.' and l2[0] == '.':\n        if farest(l2) > farest(l1):\n            x = 'l2'\n    elif l2[0] == '.':\n        x = 'l2'\n    l = l1 if x == 'l1' else l2\n    for i in range(1, len(l1)):\n        if l[i] == '#':\n            c += 1\n            x = 'l1' if x == 'l2' else 'l2'\n            l = l1 if x == 'l1' else l2\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef minop(l1, l2):\n    c = 0\n    x = 'l1'\n    if l1[0] == '.' and l2[0] == '.':\n        if farest(l2) > farest(l1):\n            x = 'l2'\n    elif l2[0] == '.':\n        x = 'l2'\n    l = l1 if x == 'l1' else l2\n    for i in range(1, len(l1)):\n        if l[i] == '#':\n            c += 1\n            x = 'l1' if x == 'l2' else 'l2'\n            l = l1 if x == 'l1' else l2\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef switch(x):\n    return 'l1' if x == 'l2' else 'l2'\n\ndef affect(x, l1, l2):\n    return l1 if x == 'l1' else l2\n\ndef minop(l1, l2):\n    c = 0\n    x = 'l1'\n    if l1[0] == '.' and l2[0] == '.':\n        if farest(l2) > farest(l1):\n            x = 'l2'\n    elif l2[0] == '.':\n        x = 'l2'\n    l = l1 if x == 'l1' else l2\n    for i in range(1, len(l1)):\n        if l[i] == '#':\n            c += 1\n            x = switch(x)\n            l = l1 if x == 'l1' else l2\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef switch(x):\n    return 'l1' if x == 'l2' else 'l2'\n\ndef affect(x, l1, l2):\n    return l1 if x == 'l1' else l2\n\ndef minop(l1, l2):\n    c = 0\n    x = 'l1'\n    if l1[0] == '.' and l2[0] == '.':\n        if farest(l2) > farest(l1):\n            x = 'l2'\n    elif l2[0] == '.':\n        x = 'l2'\n    l = l1 if x == 'l1' else l2\n    for i in range(1, len(l1)):\n        if l[i] == '#':\n            c += 1\n            x = switch(x)\n            l = affect(x, l1, l2)\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef switch(x):\n    return 'l1' if x == 'l2' else 'l2'\n\ndef affect(x, l1, l2):\n    return l1 if x == 'l1' else l2\n\ndef minop(l1, l2):\n    c = 0\n    x = 'l1'\n    if l1[0] == '.' and l2[0] == '.':\n        if farest(l2) > farest(l1):\n            x = 'l2'\n    elif l2[0] == '.':\n        x = 'l2'\n    l = affect(x, l1, l2)\n    for i in range(1, len(l1)):\n        if l[i] == '#':\n            c += 1\n            x = switch(x)\n            l = affect(x, l1, l2)\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef switch(x):\n    return 'l1' if x == 'l2' else 'l2'\n\ndef affect(x, l1, l2):\n    return l1 if x == 'l1' else l2\n\ndef minop(l1, l2):\n    c = 0\n    x = 'l1'\n    if l1[0] == '.' and l2[0] == '.':\n        if farest(l2) > farest(l1):\n            x = 'l2'\n    elif l2[0] == '.':\n        x = 'l2'\n    l = affect(x, l1, l2)\n    for i in range(1, len(l1)):\n        if l[i] == '#':\n            c += 1\n            x = switch(x)\n            l = affect(x, l1, l2)\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    x = 'Yes'\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            x = 'No'\n            break\n    return x\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef switch(x):\n    return 'l1' if x == 'l2' else 'l2'\n\ndef affect(x, l1, l2):\n    return l1 if x == 'l1' else l2\n\ndef minop(l1, l2):\n    c = 0\n    x = 'l1'\n    if l1[0] == '.' and l2[0] == '.':\n        x = 'l2' if farest(l2) > farest(l1) else 'l1'\n    elif l2[0] == '.':\n        x = 'l2'\n    l = affect(x, l1, l2)\n    for i in range(1, len(l1)):\n        if l[i] == '#':\n            c += 1\n            x = switch(x)\n            l = affect(x, l1, l2)\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef switch(x):\n    return 'l1' if x == 'l2' else 'l2'\n\ndef affect(x, l1, l2):\n    return l1 if x == 'l1' else l2\n\ndef minop(l1, l2):\n    c = 0\n    x = 'l1'\n    if l1[0] == '.' and l2[0] == '.':\n        x = 'l2' if farest(l2) > farest(l1) else 'l1'\n    elif l2[0] == '.':\n        x = 'l2'\n    l = affect(x, l1, l2)\n    for i in range(1, len(l1)):\n        if l[i] == '#':\n            c += 1\n            x = switch(x)\n            l = affect(x, l1, l2)\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef switch(x):\n    return 'l1' if x == 'l2' else 'l2'\n\ndef affect(x, l1, l2):\n    return l1 if x == 'l1' else l2\n\ndef minop(l1, l2):\n    c = 0\n    x = ['l1', 0]\n    if l1[0] == '.' and l2[0] == '.':\n        x[0] = 'l2' if farest(l2) > farest(l1) else 'l1'\n    elif l2[0] == '.':\n        x[0] = 'l2'\n    l = affect(x[0], l1, l2)\n    for i in range(1, len(l1)):\n        if l[i] == '#':\n            c += 1\n            x[0] = switch(x[0])\n            l = affect(x[0], l1, l2)\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef switch(x):\n    return 'l1' if x == 'l2' else 'l2'\n\ndef affect(x, l1, l2):\n    return l1 if x == 'l1' else l2\n\ndef minop(l1, l2):\n    c = 0\n    x = ['l1', 0]\n    if l1[0] == '.' and l2[0] == '.':\n        x[0] = 'l2' if farest(l2) > farest(l1) else 'l1'\n    elif l2[0] == '.':\n        x[0] = 'l2'\n    l = affect(x[0], l1, l2)\n    for i in range(1, len(l1)):\n        if l[i] == '.':\n            x[1] += 1\n        else:\n            c += 1\n            x[0] = switch(x[0])\n            l = affect(x[0], l1, l2)\n            x[1] += 1\n    return c\nl = []\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef switch(x):\n    return 'l1' if x == 'l2' else 'l2'\n\ndef affect(x, l1, l2):\n    return l1 if x == 'l1' else l2\n\ndef minop(l1, l2):\n    c = 0\n    x = ['l1', 0]\n    if l1[0] == '.' and l2[0] == '.':\n        x[0] = 'l2' if farest(l2) > farest(l1) else 'l1'\n    elif l2[0] == '.':\n        x[0] = 'l2'\n    l = affect(x[0], l1, l2)\n    for i in range(1, len(l1)):\n        if l[i] == '.':\n            x[1] += 1\n        else:\n            c += 1\n            x[0] = switch(x[0])\n            l = affect(x[0], l1, l2)\n            x[1] += 1\n    return c\nnb = int(input())\nl = []\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    if test(l[i][0], l[i][1]) == 'Yes':\n        print(minop(l[i][0], l[i][1]))", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef switch(x):\n    return 'l1' if x == 'l2' else 'l2'\n\ndef affect(x, l1, l2):\n    return l1 if x == 'l1' else l2\n\ndef minop(l1, l2):\n    c = 0\n    x = ['l1', 0]\n    if l1[0] == '.' and l2[0] == '.':\n        x[0] = 'l2' if farest(l2) > farest(l1) else 'l1'\n    elif l2[0] == '.':\n        x[0] = 'l2'\n    l = affect(x[0], l1, l2)\n    for i in range(1, len(l1)):\n        if l[i] == '.':\n            x[1] += 1\n        else:\n            c += 1\n            x[0] = switch(x[0])\n            l = affect(x[0], l1, l2)\n            x[1] += 1\n    return c\nnb = int(input())\nl = []\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    l.append([l1, l2])\nfor i in range(nb):\n    print(test(l[i][0], l[i][1]))\n    print(minop(l[i][0], l[i][1])) if test(l[i][0], l[i][1]) == 'Yes' else None", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef switch(x):\n    return 'l1' if x == 'l2' else 'l2'\n\ndef affect(x, l1, l2):\n    return l1 if x == 'l1' else l2\n\ndef minop(l1, l2):\n    c = 0\n    x = ['l1', 0]\n    if l1[0] == '.' and l2[0] == '.':\n        x[0] = 'l2' if farest(l2) > farest(l1) else 'l1'\n    elif l2[0] == '.':\n        x[0] = 'l2'\n    l = affect(x[0], l1, l2)\n    for i in range(1, len(l1)):\n        if l[i] == '.':\n            x[1] += 1\n        else:\n            c += 1\n            x[0] = switch(x[0])\n            l = affect(x[0], l1, l2)\n            x[1] += 1\n    return c\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    print(test(l1, l2))\n    print(minop(l1, l2)) if test(l1, l2) == 'Yes' else None", "def test(l1, l2):\n    i = 0\n    while i < len(l1) and (l1[i] == '.' or l2[i] == '.'):\n        i += 1\n    if i == len(l1):\n        return 'Yes'\n    return 'No'\n\ndef passe(l, i):\n    while i < len(l) and l[i] == '#':\n        i += 1\n    return i\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef switch(x):\n    return 'l1' if x == 'l2' else 'l2'\n\ndef affect(x, l1, l2):\n    return l1 if x == 'l1' else l2\n\ndef minop(l1, l2):\n    c = 0\n    x = ['l1', 0]\n    if l1[0] == '.' and l2[0] == '.':\n        x[0] = 'l2' if farest(l2) > farest(l1) else 'l1'\n    elif l2[0] == '.':\n        x[0] = 'l2'\n    l = affect(x[0], l1, l2)\n    for i in range(1, len(l1)):\n        if l[i] == '.':\n            x[1] += 1\n        else:\n            c += 1\n            x[0] = switch(x[0])\n            l = affect(x[0], l1, l2)\n            x[1] += 1\n    return c\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    print(test(l1, l2))\n    print(minop(l1, l2)) if test(l1, l2) == 'Yes' else None", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef passe(l, i):\n    while i < len(l) and l[i] == '#':\n        i += 1\n    return i\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef switch(x):\n    return 'l1' if x == 'l2' else 'l2'\n\ndef affect(x, l1, l2):\n    return l1 if x == 'l1' else l2\n\ndef minop(l1, l2):\n    c = 0\n    x = ['l1', 0]\n    if l1[0] == '.' and l2[0] == '.':\n        x[0] = 'l2' if farest(l2) > farest(l1) else 'l1'\n    elif l2[0] == '.':\n        x[0] = 'l2'\n    l = affect(x[0], l1, l2)\n    for i in range(1, len(l1)):\n        if l[i] == '.':\n            x[1] += 1\n        else:\n            c += 1\n            x[0] = switch(x[0])\n            l = affect(x[0], l1, l2)\n            x[1] += 1\n    return c\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    print(test(l1, l2))\n    print(minop(l1, l2)) if test(l1, l2) == 'Yes' else None", "def test(l1, l2):\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == '#':\n            return 'No'\n    return 'Yes'\n\ndef passe(l, i):\n    while i < len(l) and l[i] == '#':\n        i += 1\n    return i\n\ndef farest(l):\n    i = 0\n    while i < len(l) and l[i] == '.':\n        i += 1\n    return i - 1\n\ndef switch(x):\n    return 'l1' if x == 'l2' else 'l2'\n\ndef affect(x, l1, l2):\n    return l1 if x == 'l1' else l2\n\ndef minop(l1, l2):\n    c = 0\n    x = ['l1', 0]\n    if l1[0] == '.' and l2[0] == '.':\n        x[0] = 'l2' if farest(l2) > farest(l1) else 'l1'\n    elif l2[0] == '.':\n        x[0] = 'l2'\n    l = affect(x[0], l1, l2)\n    for i in range(1, len(l1)):\n        if l[i] == '.':\n            x[1] += 1\n        else:\n            c += 1\n            x[0] = switch(x[0])\n            l = affect(x[0], l1, l2)\n            x[1] += 1\n    return c\nnb = int(input())\nfor i in range(nb):\n    l1 = input()\n    l2 = input()\n    print(test(l1, l2))\n    print(minop(l1, l2)) if test(l1, l2) == 'Yes' else None"]