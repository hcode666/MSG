["from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    r = list(input())\n    r.sort()\n    d = Counter(s)\n    e = Counter(r)\n    m = 0\n    i = 0\n    for i in d.keys():\n        if d[i] > e[i]:\n            print('Impossible')\n            m = 1\n            break\n        else:\n            e[i] -= d[i]\n    if m:\n        continue\n    if s < s[0] * len(s):\n        check = 1\n    else:\n        check = 0\n    k = 1\n    for j in e.keys():\n        if check:\n            if j == s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n            for z in range(e[j]):\n                print(j, end='')\n        elif check == 0:\n            for z in range(e[j]):\n                print(j, end='')\n            if j >= s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n    print()", "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    r = list(input())\n    r.sort()\n    d = Counter(s)\n    e = Counter(r)\n    m = 0\n    i = 0\n    for i in d.keys():\n        if d[i] > e[i]:\n            print('Impossible')\n            m = 1\n            break\n        else:\n            e[i] -= d[i]\n    if m:\n        continue\n    if s < s[0] * len(s):\n        check = 1\n    else:\n        check = 0\n    k = 1\n    for j in e.keys():\n        if check:\n            if j == s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n            for z in range(e[j]):\n                print(j, end='')\n        elif check == 0:\n            for z in range(e[j]):\n                print(j, end='')\n            if j >= s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n    print()", "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    r = list(input())\n    r.sort()\n    d = Counter(s)\n    e = Counter(r)\n    m = 0\n    i = 0\n    for i in d.keys():\n        if d[i] > e[i]:\n            print('Impossible')\n            m = 1\n            break\n        else:\n            e[i] -= d[i]\n    if m:\n        continue\n    if s < s[0] * len(s):\n        check = 1\n    else:\n        check = 0\n    k = 1\n    for j in e.keys():\n        if check:\n            if j == s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n            for z in range(e[j]):\n                print(j, end='')\n        elif check == 0:\n            for z in range(e[j]):\n                print(j, end='')\n            if j >= s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n    print()", "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    r = list(input())\n    r.sort()\n    d = Counter(s)\n    e = Counter(r)\n    m = 0\n    i = 0\n    for i in d.keys():\n        if d[i] > e[i]:\n            print('Impossible')\n            m = 1\n            break\n        else:\n            e[i] -= d[i]\n    if m:\n        continue\n    if s < s[0] * len(s):\n        check = 1\n    else:\n        check = 0\n    k = 1\n    for j in e.keys():\n        if check:\n            if j == s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n            for z in range(e[j]):\n                print(j, end='')\n        elif check == 0:\n            for z in range(e[j]):\n                print(j, end='')\n            if j >= s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n    print()", "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    r = list(input())\n    r.sort()\n    d = Counter(s)\n    e = Counter(r)\n    m = 0\n    i = 0\n    for i in d.keys():\n        if d[i] > e[i]:\n            print('Impossible')\n            m = 1\n            break\n        else:\n            e[i] -= d[i]\n    if m:\n        continue\n    if s < s[0] * len(s):\n        check = 1\n    else:\n        check = 0\n    k = 1\n    for j in e.keys():\n        if check:\n            if j == s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n            for z in range(e[j]):\n                print(j, end='')\n        elif check == 0:\n            for z in range(e[j]):\n                print(j, end='')\n            if j >= s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n    print()", "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    r = list(input())\n    r.sort()\n    d = Counter(s)\n    e = Counter(r)\n    m = 0\n    i = 0\n    for i in d.keys():\n        if d[i] > e[i]:\n            print('Impossible')\n            m = 1\n            break\n        else:\n            e[i] -= d[i]\n    if m:\n        continue\n    if s < s[0] * len(s):\n        check = 1\n    else:\n        check = 0\n    k = 1\n    for j in e.keys():\n        if check:\n            if j == s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n            for z in range(e[j]):\n                print(j, end='')\n        elif check == 0:\n            for z in range(e[j]):\n                print(j, end='')\n            if j >= s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n    print()", "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    r = list(input())\n    r.sort()\n    d = Counter(s)\n    e = Counter(r)\n    m = 0\n    i = 0\n    for i in d.keys():\n        if d[i] > e[i]:\n            print('Impossible')\n            m = 1\n            break\n        else:\n            e[i] -= d[i]\n    if m:\n        continue\n    if s < s[0] * len(s):\n        check = 1\n    else:\n        check = 0\n    k = 1\n    for j in e.keys():\n        if check:\n            if j == s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n            for z in range(e[j]):\n                print(j, end='')\n        elif check == 0:\n            for z in range(e[j]):\n                print(j, end='')\n            if j >= s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n    print()", "def solve():\n    freq = [0] * 26\n    freqr = [0] * 26\n    for char in s:\n        freq[ord(char) - ord('a')] += 1\n    for char in r:\n        freqr[ord(char) - ord('a')] += 1\n    for i in range(26):\n        if freq[i] > freqr[i]:\n            print('Impossible')\n            return\n    ans = ''\n    i = 0\n    while chr(i + ord('a')) < s[0]:\n        ans = ans + chr(i + ord('a')) * (freqr[i] - freq[i])\n        i += 1\n    if s[0] * len(s) > s:\n        ans = ans + s\n    else:\n        ans = ans + chr(i + ord('a')) * (freqr[i] - freq[i])\n        i += 1\n        ans = ans + s\n    while i < 26:\n        ans = ans + chr(i + ord('a')) * (freqr[i] - freq[i])\n        i += 1\n    print(ans)\n    return\nt = int(input())\nwhile t > 0:\n    t -= 1\n    s = input()\n    r = input()\n    if len(r) < len(s):\n        print('Impossible')\n    else:\n        solve()", "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    r = list(input())\n    r.sort()\n    d = Counter(s)\n    e = Counter(r)\n    m = 0\n    i = 0\n    for i in d.keys():\n        if d[i] > e[i]:\n            print('Impossible')\n            m = 1\n            break\n        else:\n            e[i] -= d[i]\n    if m:\n        continue\n    if s < s[0] * len(s):\n        check = 1\n    else:\n        check = 0\n    k = 1\n    for j in e.keys():\n        if check:\n            if j == s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n            for z in range(e[j]):\n                print(j, end='')\n        elif check == 0:\n            for z in range(e[j]):\n                print(j, end='')\n            if j >= s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n    print()", "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    r = list(input())\n    r.sort()\n    d = Counter(s)\n    e = Counter(r)\n    m = 0\n    i = 0\n    for i in d.keys():\n        if d[i] > e[i]:\n            print('Impossible')\n            m = 1\n            break\n        else:\n            e[i] -= d[i]\n    if m:\n        continue\n    if s < s[0] * len(s):\n        check = 1\n    else:\n        check = 0\n    k = 1\n    for j in e.keys():\n        if check:\n            if j == s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n            for z in range(e[j]):\n                print(j, end='')\n        elif check == 0:\n            for z in range(e[j]):\n                print(j, end='')\n            if j >= s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n    print()", "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    r = list(input())\n    r.sort()\n    d = Counter(s)\n    e = Counter(r)\n    m = 0\n    i = 0\n    for i in d.keys():\n        if d[i] > e[i]:\n            print('Impossible')\n            m = 1\n            break\n        else:\n            e[i] -= d[i]\n    if m:\n        continue\n    if s < s[0] * len(s):\n        check = 1\n    else:\n        check = 0\n    k = 1\n    for j in e.keys():\n        if check:\n            if j == s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n            for z in range(e[j]):\n                print(j, end='')\n        elif check == 0:\n            for z in range(e[j]):\n                print(j, end='')\n            if j >= s[0] and k:\n                k = 0\n                for n in s:\n                    print(n, end='')\n    print()", "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    r = input()\n    d = Counter(s)\n    e = Counter(r)\n    m = 0\n    i = 0\n    for i in d.keys():\n        if d[i] > e[i]:\n            print('Impossible')\n            m = 1\n            break\n        else:\n            e[i] -= d[i]\n    if m:\n        continue\n    if s < s[0] * len(s):\n        check = 1\n    else:\n        check = 0\n    left = []\n    right = []\n    for j in e.keys():\n        if check:\n            if j < s[0]:\n                for z in range(e[j]):\n                    left.append(j)\n            else:\n                for z in range(e[j]):\n                    right.append(j)\n        elif j <= s[0]:\n            for z in range(e[j]):\n                left.append(j)\n        else:\n            for z in range(e[j]):\n                right.append(j)\n    left.sort()\n    right.sort()\n    print(''.join(left) + ''.join(s) + ''.join(right))", "from collections import Counter\n\ndef fun(x, y):\n    x_c = Counter(x)\n    y_c = Counter(y)\n    m = 1\n    for z in x_c.keys():\n        if x_c[z] > y_c[z]:\n            m = 0\n            break\n        else:\n            y_c[z] -= x_c[z]\n    if m:\n        left = []\n        right = []\n        if x < x[0] * len(x):\n            for (i, j) in y_c.items():\n                if i < x[0]:\n                    left.append(i * j)\n                else:\n                    right.append(i * j)\n        else:\n            for (i, j) in y_c.items():\n                if i <= x[0]:\n                    left.append(i * j)\n                else:\n                    right.append(i * j)\n        left.sort()\n        right.sort()\n        return ''.join(left) + x + ''.join(right)\n    else:\n        return 'Impossible'\nfor _ in range(int(input())):\n    a = input().strip()\n    b = input().strip()\n    print(fun(a, b))", "from collections import Counter\n\ndef fun(x, y):\n    x_c = Counter(x)\n    y_c = Counter(y)\n    flag = True\n    for (alp, cnt) in x_c.items():\n        cnt2 = y_c.get(alp)\n        if cnt2:\n            if cnt2 < cnt:\n                flag = False\n                break\n            else:\n                y_c[alp] -= x_c[alp]\n        else:\n            flag = False\n            break\n    if flag:\n        left = []\n        right = []\n        if x < x[0] * len(x):\n            for (i, j) in y_c.items():\n                if i < x[0]:\n                    left.append(i * j)\n                else:\n                    right.append(i * j)\n        else:\n            for (i, j) in y_c.items():\n                if i <= x[0]:\n                    left.append(i * j)\n                else:\n                    right.append(i * j)\n        left.sort()\n        right.sort()\n        return ''.join(left) + x + ''.join(right)\n    else:\n        return 'Impossible'\nfor _ in range(int(input())):\n    a = input()\n    b = input()\n    print(fun(a, b))", "from collections import Counter\n\ndef fun(x, y):\n    x_c = Counter(x)\n    y_c = Counter(y)\n    flag = True\n    for (alp, cnt) in x_c.items():\n        cnt2 = y_c.get(alp)\n        if cnt2:\n            if cnt2 < cnt:\n                flag = False\n                break\n            else:\n                y_c[alp] -= x_c[alp]\n        else:\n            flag = False\n            break\n    if flag:\n        left = []\n        right = []\n        if x < x[0] * len(x):\n            for (i, j) in y_c.items():\n                if i < x[0]:\n                    left.append(i * j)\n                else:\n                    right.append(i * j)\n        else:\n            for (i, j) in y_c.items():\n                if i <= x[0]:\n                    left.append(i * j)\n                else:\n                    right.append(i * j)\n        left.sort()\n        right.sort()\n        return ''.join(left) + x + ''.join(right)\n    else:\n        return 'Impossible'\nfor _ in range(int(input())):\n    a = input().strip()\n    b = input().strip()\n    print(fun(a, b))", "try:\n    for _ in range(int(input())):\n        s = input()\n        r = input()\n        ls = len(s)\n        lr = len(r)\n        list1 = [0] * 26\n        list2 = [0] * 26\n        for i in range(ls):\n            x = s[i]\n            list1[ord(x) - 97] += 1\n        for i in range(lr):\n            x = r[i]\n            list2[ord(x) - 97] += 1\n        f = 0\n        for i in range(26):\n            if list1[i] > list2[i]:\n                f = 1\n                break\n        if f == 1:\n            print('Impossible')\n        else:\n            for i in range(ls):\n                x = s[i]\n                list2[ord(x) - 97] -= 1\n            ele = s[0]\n            ele = ord(ele) - 97\n            for i in range(26):\n                if list2[i] > 0 and i < ele:\n                    ss = chr(i + 97) * list2[i]\n                    print(ss, end='')\n                    list2[i] = 0\n            if list2[ele] > 0:\n                ss = chr(ele + 97) * list2[ele]\n                if ls > 1:\n                    ff = 0\n                    for i in range(1, ls):\n                        if s[i] != s[0]:\n                            if s[i] < s[0]:\n                                ff = 1\n                            break\n                    if ff == 1:\n                        print(s, end='')\n                        print(ss, end='')\n                        list2[ele] = 0\n                    else:\n                        print(ss, end='')\n                        list2[ele] = 0\n                        print(s, end='')\n                else:\n                    print(ss, end='')\n                    list2[ele] = 0\n                    print(s, end='')\n            else:\n                print(s, end='')\n            for i in range(26):\n                if list2[i] > 0:\n                    ss = chr(i + 97) * list2[i]\n                    print(ss, end='')\n            print()\nexcept:\n    pass", "for _ in range(int(input())):\n    a = input().strip()\n    b = list(input().strip())\n    m = len(a)\n    from collections import Counter\n    n = len(b)\n    c1 = Counter(a)\n    f = 1\n    c2 = Counter(b)\n    for i in range(97, 123):\n        ch = chr(i)\n        if c2[ch] < c1[ch]:\n            f = 0\n    if f == 0:\n        print('Impossible')\n        continue\n    for i in range(97, 123):\n        ch = chr(i)\n        c2[ch] -= c1[ch]\n    rem = []\n    mini = 'z' * 10000000\n    for i in range(97, 123):\n        ch = chr(i)\n        rem += list(ch * c2[ch])\n    rem.sort()\n    less = [i for i in rem if i < a[0]]\n    more = [i for i in rem if i > a[0]]\n    eql = [i for i in rem if i == a[0]]\n    if len(a) == 1 or len(set(a)) == 1:\n        ans = less + eql + list(a) + more\n        print(''.join(ans))\n    else:\n        ch = a[0]\n        i = 1\n        while i < m and a[i] == ch:\n            i += 1\n        if a[i] > a[0]:\n            ans = less + eql + list(a) + more\n            print(''.join(ans))\n        else:\n            ans = less + list(a) + eql + more\n            print(''.join(ans))", "for _ in range(int(input())):\n    a = input().strip()\n    b = list(input().strip())\n    m = len(a)\n    from collections import Counter\n    n = len(b)\n    c1 = Counter(a)\n    f = 1\n    c2 = Counter(b)\n    for i in range(97, 123):\n        ch = chr(i)\n        if c2[ch] < c1[ch]:\n            f = 0\n    if f == 0:\n        print('Impossible')\n        continue\n    for i in range(97, 123):\n        ch = chr(i)\n        c2[ch] -= c1[ch]\n    rem = []\n    mini = 'z' * 10000000\n    for i in range(97, 123):\n        ch = chr(i)\n        rem += list(ch * c2[ch])\n    rem.sort()\n    prev = rem[:]\n    for i in range(len(rem)):\n        rem.insert(i, a)\n        if ''.join(rem) < mini:\n            mini = ''.join(rem)\n        rem = prev[:]\n    rem.append(a)\n    if ''.join(rem) < mini:\n        mini = ''.join(rem)\n    print(mini)", "t = int(input())\nfor _ in range(t):\n    z = ord('a')\n    s = input()\n    r = input()\n    first = ord(s[0]) - ord('a')\n    l = [0 for i in range(26)]\n    for i in range(len(r)):\n        x = ord(r[i]) - ord('a')\n        l[x] = l[x] + 1\n    for i in range(len(s)):\n        x = ord(s[i]) - ord('a')\n        l[x] = l[x] - 1\n    valid = True\n    for i in range(26):\n        valid = valid and l[i] >= 0\n    if not valid:\n        print('Impossible')\n        continue\n    ans = ''\n    one = 0\n    two = -1\n    for i in range(first):\n        for j in range(l[i]):\n            ans = ans + chr(z + i)\n    for i in range(0, len(s)):\n        if ord(s[i]) - ord('a') > first:\n            break\n        elif ord(s[i]) - ord('a') < first:\n            ans = ans + s\n            s = ''\n            break\n    while l[first]:\n        ans = ans + chr(z + first)\n        l[first] = l[first] - 1\n    ans = ans + s\n    for i in range(first + 1, 26):\n        for j in range(l[i]):\n            ans = ans + chr(z + i)\n    print(ans)", "t = int(input())\nfor i in range(0, t):\n    s = input()\n    r = input()\n    l1 = []\n    l2 = []\n    l3 = []\n    f = 0\n    for j in range(0, 26):\n        l1.append(0)\n        l2.append(0)\n        l3.append(0)\n    for j in s:\n        l1[ord(j) - 97] += 1\n    for j in r:\n        l2[ord(j) - 97] += 1\n    for j in range(0, 26):\n        l3[j] = l2[j] - l1[j]\n        if l3[j] < 0:\n            print('Impossible')\n            f = 1\n            break\n    if f == 0:\n        m = s\n        ft = ''\n        bc = ''\n        f1 = ''\n        b1 = ''\n        for j in range(0, 26):\n            for k in range(0, l3[j]):\n                m1 = f1 + chr(97 + j) + s + b1\n                m2 = f1 + s + b1 + chr(97 + j)\n                if m1 < m2:\n                    m = m1\n                    f1 += chr(97 + j)\n                else:\n                    m = m2\n                    b1 += chr(97 + j)\n        ans = f1 + s + b1\n        print(ans)", "t = int(input())\nfor i in range(t):\n    s = input()\n    r = input()\n    count_s = {}\n    count_r = {}\n    for c in s:\n        if c not in count_s:\n            count_s[c] = 1\n        else:\n            count_s[c] += 1\n    for c in r:\n        if c not in count_r:\n            count_r[c] = 1\n        else:\n            count_r[c] += 1\n    ok = True\n    for c in count_s:\n        if c not in count_r or count_s[c] > count_r[c]:\n            print('Impossible')\n            ok = False\n            break\n    if ok:\n        for c in count_r:\n            if c in count_s:\n                count_r[c] -= count_s[c]\n        key = [k for k in count_r.keys() if count_r[k] > 0]\n        key.sort()\n        first = s[0]\n        res = []\n        index = 0\n        while index < len(key) and key[index] < first:\n            res.append(key[index] * count_r[key[index]])\n            index += 1\n        if index < len(key) and key[index] == first:\n            s_index = 0\n            while s_index < len(s) and key[index] == s[s_index]:\n                s_index += 1\n            if s_index < len(s) and key[index] < s[s_index]:\n                res.append(key[index] * count_r[key[index]])\n                index += 1\n        res.append(s)\n        for j in range(index, len(key)):\n            res.append(key[j] * count_r[key[j]])\n        print(''.join(res))", "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    r = input()\n    sc = Counter(s)\n    rc = Counter(r)\n    flag = 0\n    for i in sc:\n        if sc[i] > rc[i]:\n            flag = 1\n            break\n    if flag == 1:\n        print('Impossible')\n        continue\n    for i in s:\n        rc[i] -= 1\n    t1 = []\n    t2 = []\n    t3 = ''\n    for i in rc:\n        if rc[i]:\n            if i > s[0]:\n                t1.append(i * rc[i])\n            elif i < s[0]:\n                t2.append(i * rc[i])\n            else:\n                t3 += i * rc[i]\n    print(min(''.join(sorted(t2) + [t3] + [s] + sorted(t1)), ''.join(sorted(t2) + [s] + [t3] + sorted(t1))))", "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    r = input()\n    sc = Counter(s)\n    rc = Counter(r)\n    flag = 0\n    for i in sc:\n        if sc[i] > rc[i]:\n            flag = 1\n            break\n    if flag == 1:\n        print('Impossible')\n        continue\n    for i in s:\n        rc[i] -= 1\n    t1 = []\n    t2 = []\n    t3 = ''\n    for i in rc:\n        if rc[i]:\n            if i > s[0]:\n                t1.append(i * rc[i])\n            elif i < s[0]:\n                t2.append(i * rc[i])\n            else:\n                t3 += i * rc[i]\n    print(min(''.join(sorted(t2) + [t3] + [s] + sorted(t1)), ''.join(sorted(t2) + [s] + [t3] + sorted(t1))))", "from collections import Counter\nt = int(input())\nfor _ in range(0, t):\n    s1 = input()\n    s2 = input()\n    c1 = Counter(s1)\n    c2 = Counter(s2)\n    f = 1\n    for i in s1:\n        c2[i] = c2[i] - 1\n        if c2[i] < 0:\n            f = 0\n            break\n    if f:\n        a = s1[0]\n        e = list(c2.elements())\n        e.sort()\n        m1 = ''\n        m2 = ''\n        m3 = ''\n        c = 0\n        for i in e:\n            if i < a:\n                m1 = m1 + i\n            elif i > a:\n                m2 = m2 + i\n            else:\n                m3 = m3 + i\n        a1 = m1 + m3 + s1 + m2\n        a2 = m1 + s1 + m3 + m2\n        if a1 < a2:\n            print(a1)\n        else:\n            print(a2)\n    else:\n        print('Impossible')", "from collections import Counter\nt = int(input())\nwhile t:\n    s = input()\n    r = input()\n    c1 = Counter(s)\n    c2 = Counter(r)\n    flag = True\n    for (key, val) in c1.items():\n        if c2[key] >= val:\n            c2[key] -= val\n        else:\n            flag = False\n            break\n    if flag:\n        ans = ''\n        for (key, val) in c2.items():\n            if val > 0:\n                ans = ans + key\n        temp = sorted(ans)\n        temp_len = len(temp)\n        ns = ''\n        i = 0\n        if temp != []:\n            while i < temp_len and s[0] > temp[i]:\n                ns = ns + temp[i] * c2[temp[i]]\n                c2[temp[i]] = 0\n                i += 1\n            if c2[s[0]] > 0:\n                if s <= s[0] * len(s):\n                    ns = ns + s\n                    ns = ns + c2[s[0]] * s[0]\n                    c2[s[0]] = 0\n                else:\n                    ns = ns + c2[s[0]] * s[0]\n                    ns = ns + s\n                    c2[s[0]] = 0\n                for j in range(i + 1, temp_len):\n                    ns = ns + temp[j] * c2[temp[j]]\n                    c2[temp[j]] = 0\n            else:\n                ns = ns + s\n                for j in range(i, temp_len):\n                    ns = ns + temp[j] * c2[temp[j]]\n                    c2[temp[j]] = 0\n            print(ns)\n        else:\n            print(s)\n    else:\n        print('Impossible')\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    s = input()\n    r = input()\n    cnt = [0 for i in range(300)]\n    for i in r:\n        cnt[ord(i)] += 1\n    imp = 0\n    for i in s:\n        cnt[ord(i)] -= 1\n        if cnt[ord(i)] < 0:\n            imp = 1\n            break\n    if imp == 1:\n        print('Impossible')\n        continue\n    ans = []\n    for j in range(ord('a'), ord(s[0])):\n        while cnt[j] > 0:\n            ans.append(chr(j))\n            cnt[j] -= 1\n    flet = ord(s[0])\n    for j in range(0, len(s)):\n        if s[j] > s[0]:\n            break\n        if s[j] < s[0]:\n            ans += list(s)\n            s = ''\n            break\n    while cnt[flet] > 0:\n        ans.append(chr(flet))\n        cnt[flet] -= 1\n    ans += list(s)\n    for j in range(ord('a'), ord('z') + 1):\n        while cnt[j] > 0:\n            ans.append(chr(j))\n            cnt[j] -= 1\n    print(*ans, sep='')", "alpha = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nfor _ in range(int(input())):\n    count = {}\n    for i in alpha:\n        count[i] = 0\n    pat = input()\n    patlist = list(pat)\n    search = list(input())\n    for i in search:\n        count[i] += 1\n    flag = True\n    for i in patlist:\n        count[i] -= 1\n    ans = []\n    small = True\n    for i in range(len(patlist) - 1):\n        if patlist[i] > patlist[i + 1]:\n            break\n        elif patlist[i] < patlist[i + 1]:\n            small = False\n            break\n    for i in alpha:\n        if i == patlist[0] and small:\n            ans.append(pat)\n        if count[i] < 0:\n            flag = False\n            break\n        ans.extend([i for z in range(count[i])])\n        if i == patlist[0] and small == False:\n            ans.append(pat)\n    if flag:\n        print(''.join(ans))\n    else:\n        print('Impossible')", "for _ in range(int(input())):\n    n = input()\n    m = list(input())\n    s = ''\n    t = 1\n    vi = n[0]\n    zq = 1\n    se = vi\n    d = {}\n    for i in m:\n        if i not in d:\n            d[i] = 0\n        d[i] += 1\n    for i in n:\n        if i in d and d[i] != 0:\n            s += i\n            d[i] -= 1\n        else:\n            print('Impossible')\n            t = 0\n            break\n        if zq and i != se:\n            zq = 0\n            se = i\n    if t:\n        f = ''\n        for i in range(26):\n            if chr(ord('a') + i) in d:\n                if ord('a') + i > ord(s[0]):\n                    s += chr(ord('a') + i) * d[chr(ord('a') + i)]\n                elif ord('a') + i == ord(s[0]):\n                    if chr(ord('a') + i) > se:\n                        s += chr(ord('a') + i) * d[chr(ord('a') + i)]\n                    else:\n                        f += chr(ord('a') + i) * d[chr(ord('a') + i)]\n                else:\n                    f += chr(ord('a') + i) * d[chr(ord('a') + i)]\n        print(f + s)", "for _ in range(int(input())):\n    s = input().strip()\n    r = input().strip()\n    possible = True\n    sdic = {chr(i): 0 for i in range(97, 123)}\n    rdic = {chr(i): 0 for i in range(97, 123)}\n    for i in s:\n        sdic[i] += 1\n    for i in r:\n        rdic[i] += 1\n    for key in s:\n        if sdic[key] > rdic[key]:\n            possible = False\n            break\n    if not possible:\n        print('Impossible')\n    else:\n        output = ''\n        output1 = ''\n        output2 = ''\n        for i in s:\n            rdic[i] -= 1\n        firstChar = s[0]\n        l = list(rdic.keys())\n        i = 97\n        while i < ord(firstChar):\n            output1 += rdic[chr(i)] * chr(i)\n            output2 += rdic[chr(i)] * chr(i)\n            rdic[chr(i)] = 0\n            i += 1\n        toFind = i\n        First = True\n        output1 += rdic[chr(i)] * chr(i)\n        output1 += s\n        output2 += s\n        output2 += rdic[chr(i)] * chr(i)\n        rdic[chr(i)] = 0\n        output = min(output1, output2)\n        for key in rdic:\n            tmp = rdic[key] * key\n            output += tmp\n        print(output)", "import collections\nt = int(input())\nfor _ in range(t):\n    s = input()\n    r = collections.Counter(input())\n    r.subtract(s)\n    if any((v < 0 for v in r.values())):\n        print('Impossible')\n    else:\n        r = [*r.elements(), s]\n        r.sort(key=lambda x: x[0] + (x.lstrip(x[0]) or x)[0])\n        print(''.join(r))", "import string\nimport collections\nt = int(input())\nfor _ in range(t):\n    s = input()\n    r = collections.Counter(input())\n    r.subtract(s)\n    if any((v < 0 for v in r.values())):\n        print('Impossible')\n    else:\n        c = chr(ord(s[0]) - ((s.lstrip(s[0]) or s)[0] < s[0]))\n        print(''.join((x * r[x] + s * (x == c) for x in string.ascii_lowercase)))", "import collections\nt = int(input())\nfor _ in range(t):\n    s = input()\n    r = collections.Counter(input())\n    r.subtract(s)\n    if any((v < 0 for v in r.values())):\n        print('Impossible')\n    else:\n        r = [*r.elements(), s]\n        r.sort(key=lambda x: x[0] + (x.lstrip(x[0]) or x)[0])\n        print(''.join(r))", "import collections\nimport itertools\nt = int(input())\nfor _ in range(t):\n    s = input()\n    r = collections.Counter(input())\n    r.subtract(s)\n    if any((v < 0 for v in r.values())):\n        print('Impossible')\n    else:\n        r = itertools.chain(r.elements(), [s])\n        r = sorted(r, key=lambda x: x[0] + (x.lstrip(x[0]) or x)[0])\n        print(''.join(r))", "import collections\nimport itertools\nt = int(input())\nfor _ in range(t):\n    s = input()\n    r = collections.Counter(input())\n    r.subtract(s)\n    if any((v < 0 for v in r.values())):\n        print('Impossible')\n    else:\n        r = itertools.chain(r.elements(), [s])\n        r = sorted(r, key=lambda x: x[0] + (x.lstrip(x[0]) or x)[0])\n        print(''.join(r))", "import collections\nt = int(input())\nfor _ in range(t):\n    s = input()\n    r = collections.Counter(input())\n    r.subtract(s)\n    if any((v < 0 for v in r.values())):\n        print('Impossible')\n    else:\n        r = [*r.elements(), s]\n        r.sort(key=lambda x: x[0] + (x.lstrip(x[0]) or x)[0])\n        print(''.join(r))", "from string import ascii_lowercase\n\ndef getSolo(s):\n    x = list(s)\n    new = []\n    for i in x:\n        if i in new:\n            pass\n        else:\n            new.append(i)\n    if len(new) == 1:\n        return False\n    else:\n        return new[1]\nfor _ in range(int(input())):\n    s = input()\n    r = input()\n    ans = ''\n    (fs, fr) = ({}, {})\n    for i in ascii_lowercase:\n        fs[i] = 0\n        fr[i] = 0\n    for i in s:\n        fs[i] += 1\n    for i in r:\n        fr[i] += 1\n    canbedone = True\n    for i in ascii_lowercase:\n        if fs[i] > fr[i]:\n            canbedone = False\n            break\n        else:\n            fr[i] -= fs[i]\n    if canbedone:\n        for i in ascii_lowercase:\n            if i == s[0]:\n                next = getSolo(s)\n                if next != False and next < s[0]:\n                    ans += s\n                    ans += str(i) * fr[i]\n                else:\n                    ans += str(i) * fr[i]\n                    ans += s\n            else:\n                ans += str(i) * fr[i]\n        print(ans)\n    else:\n        print('Impossible')", "d = {}\nt = int(input())\nfor i in range(t):\n    rec = 1\n    for x in range(ord('a'), ord('z') + 1):\n        d[chr(x)] = 0\n    s1 = input()\n    s2 = input()\n    for j in s2:\n        d[j] += 1\n    for j in s1:\n        if d[j] == 0:\n            rec = 0\n            break\n        else:\n            d[j] -= 1\n    if rec == 0:\n        print('Impossible')\n        continue\n    li = []\n    for m in d:\n        cnt = d[m]\n        for j in range(cnt):\n            li.append(m)\n    rec = 1\n    tv = 0\n    while tv < len(s1) - 1:\n        if ord(s1[tv]) < ord(s1[tv + 1]):\n            rec = 0\n            break\n        elif ord(s1[tv]) > ord(s1[tv + 1]):\n            break\n        tv += 1\n    li.sort()\n    if rec == 0:\n        li.append(s1)\n        li.sort()\n        s3 = ''\n        for x in li:\n            s3 += x\n        print(s3)\n    elif d[s1[0]] > 0:\n        for i in range(len(li)):\n            if li[i] == s1[0]:\n                li.insert(i, s1)\n                break\n        s3 = ''\n        for x in li:\n            s3 += x\n        print(s3)\n    else:\n        li.append(s1)\n        li.sort()\n        s3 = ''\n        for x in li:\n            s3 += x\n        print(s3)", "import sys\n\ndef get_answer(s, r):\n    first = ord(s[0])\n    for i in s:\n        if i in r:\n            r = r.replace(i, '', 1)\n        else:\n            return 'Impossible'\n    start = ''\n    end = ''\n    equal = ''\n    r = sorted(r)\n    for i in r:\n        if ord(i) < first:\n            start = start + i\n        elif ord(i) == first:\n            equal = equal + i\n        else:\n            end = end + i\n    return min(start + equal + s + end, start + s + equal + end)\ntestcase = int(sys.stdin.readline())\nwhile testcase > 0:\n    s = sys.stdin.readline().strip('\\n')\n    r = sys.stdin.readline().strip('\\n')\n    print(get_answer(s, r))\n    testcase = testcase - 1", "d = {}\nt = int(input())\nfor i in range(t):\n    rec = 1\n    for x in range(ord('a'), ord('z') + 1):\n        d[chr(x)] = 0\n    s1 = input()\n    s2 = input()\n    for j in s2:\n        d[j] += 1\n    for j in s1:\n        if d[j] == 0:\n            rec = 0\n            break\n        else:\n            d[j] -= 1\n    if rec == 0:\n        print('Impossible')\n        continue\n    li = []\n    for m in d:\n        cnt = d[m]\n        for j in range(cnt):\n            li.append(m)\n    rec = 1\n    tv = 0\n    while tv < len(s1) - 1:\n        if ord(s1[tv]) < ord(s1[tv + 1]):\n            rec = 0\n            break\n        elif ord(s1[tv]) > ord(s1[tv + 1]):\n            break\n        tv += 1\n    li.sort()\n    if rec == 0:\n        li.append(s1)\n        li.sort()\n        s3 = ''\n        for x in li:\n            s3 += x\n        print(s3)\n    elif d[s1[0]] > 0:\n        for i in range(len(li)):\n            if li[i] == s1[0]:\n                li.insert(i, s1)\n                break\n        s3 = ''\n        for x in li:\n            s3 += x\n        print(s3)\n    else:\n        li.append(s1)\n        li.sort()\n        s3 = ''\n        for x in li:\n            s3 += x\n        print(s3)", "for _ in range(int(input())):\n    s = input()\n    r = input()\n    smap = [0] * 26\n    rmap = [0] * 26\n    flag = -1\n    for i in range(len(s)):\n        smap[ord(s[i]) - 97] += 1\n    for i in range(len(r)):\n        rmap[ord(r[i]) - 97] += 1\n    for i in range(26):\n        if rmap[i] < smap[i]:\n            flag = 0\n            break\n    if flag == 0:\n        print('Impossible')\n    else:\n        rmapx = rmap[:]\n        string = ''\n        for i in range(len(s)):\n            string = string + s[i]\n            rmap[ord(s[i]) - 97] -= 1\n        ch = string[0]\n        ch = ord(ch) - 97\n        string2 = ''\n        for i in range(ch):\n            while rmap[i] != 0:\n                string2 = string2 + chr(i + 97)\n                rmap[i] -= 1\n        string = string2 + string\n        for i in range(ch, 26):\n            while rmap[i] != 0:\n                string = string + chr(i + 97)\n                rmap[i] -= 1\n        stringx = ''\n        for i in range(len(s)):\n            stringx = stringx + s[i]\n            rmapx[ord(s[i]) - 97] -= 1\n        ch = stringx[0]\n        ch = ord(ch) - 97\n        string2x = ''\n        for i in range(ch + 1):\n            while rmapx[i] != 0:\n                string2x = string2x + chr(i + 97)\n                rmapx[i] -= 1\n        stringx = string2x + stringx\n        for i in range(ch + 1, 26):\n            while rmapx[i] != 0:\n                stringx = stringx + chr(i + 97)\n                rmapx[i] -= 1\n        if stringx < string:\n            print(stringx)\n        else:\n            print(string)", "for _ in range(int(input())):\n    s = input()\n    r = input()\n    smap = [0] * 26\n    rmap = [0] * 26\n    flag = -1\n    for i in range(len(s)):\n        smap[ord(s[i]) - 97] += 1\n    for i in range(len(r)):\n        rmap[ord(r[i]) - 97] += 1\n    for i in range(26):\n        if rmap[i] < smap[i]:\n            flag = 0\n            break\n    if flag == 0:\n        print('Impossible')\n    else:\n        string = ''\n        for i in range(len(s)):\n            string = string + s[i]\n            rmap[ord(s[i]) - 97] -= 1\n        ch = string[0]\n        ch = ord(ch) - 97\n        plsql = []\n        string2 = ''\n        for i in range(26):\n            while rmap[i] != 0:\n                plsql.append(chr(i + 97))\n                rmap[i] -= 1\n        plsql.append(string)\n        comp = ''.join(plsql)\n        for i in range(len(plsql) - 1, -1, -1):\n            comp2 = ''.join(plsql)\n            if comp > comp2:\n                comp = comp2[:]\n            if i == 0:\n                break\n            temp = plsql[i]\n            plsql[i] = plsql[i - 1]\n            plsql[i - 1] = temp\n        print(comp)", "t = int(input())\nfor _ in range(t):\n    r = input()\n    s = input()\n    temp = list(set(s + r))\n    d = dict()\n    t = 0\n    for i in temp:\n        d[i] = s.count(i) - r.count(i)\n        if d[i] < 0:\n            print('Impossible')\n            t = 1\n            break\n    if t == 1:\n        continue\n    temp.sort()\n    res = ''\n    jam = 0\n    for i in temp:\n        if i >= r[0] and jam == 0:\n            if i * len(r) <= r:\n                res = res + i * d[i] + r\n                jam = 1\n            else:\n                res = res + r + i * d[i]\n                jam = 1\n        else:\n            res = res + i * d[i]\n    print(res)", "for _ in range(int(input())):\n    s = input()\n    r = input()\n    rp = r\n    flag = True\n    for i in range(len(s)):\n        if s[i] not in rp:\n            flag = False\n            print('Impossible')\n            break\n        else:\n            rp = rp.replace(s[i], '', 1)\n    if flag == True:\n        xy = []\n        for i in range(len(rp)):\n            xy.append(rp[i])\n        xy.sort()\n        rp = ''\n        for i in xy:\n            rp += i\n        bfore = ''\n        aftr = ''\n        same = ''\n        for i in rp:\n            if i < s[0]:\n                bfore += i\n            elif i > s[0]:\n                aftr += i\n            else:\n                same += i\n        alpha = bfore + same + s + aftr\n        beta = bfore + s + same + aftr\n        if alpha < beta:\n            print(alpha)\n        else:\n            print(beta)", "from collections import defaultdict\nt = int(input())\nfor i in range(t):\n    s = input()\n    r = input()\n    if len(s) > len(r):\n        print('Impossible')\n    else:\n        flag = 1\n        count_s = defaultdict(lambda : 0)\n        count_r = defaultdict(lambda : 0)\n        for i in s:\n            count_s[i] += 1\n        for i in r:\n            count_r[i] += 1\n        for i in count_s:\n            if count_r[i] >= count_s[i]:\n                count_r[i] = count_r[i] - count_s[i]\n            else:\n                flag = 0\n        rem_str = [i * count_r[i] for i in count_r]\n        rem_str = ''.join(rem_str)\n        rem_str = ''.join(sorted(rem_str))\n        if flag == 1:\n            left = ''\n            right = ''\n            eq = ''\n            for i in rem_str:\n                if i < s[0]:\n                    left += i\n                elif i > s[0]:\n                    right += i\n                else:\n                    eq += i\n            ans = min(left + eq + s + right, left + s + eq + right)\n            print(ans)\n        else:\n            print('Impossible')", "t = int(input())\nfor _ in range(t):\n    s = input()\n    r = input()\n    ds = {}\n    dr = {}\n    y = 0\n    for i in s:\n        if i not in ds.keys():\n            ds[i] = 1\n        else:\n            ds[i] += 1\n    for i in r:\n        if i not in dr.keys():\n            dr[i] = 1\n        else:\n            dr[i] += 1\n    for i in ds.keys():\n        if i not in dr.keys() or ds[i] > dr[i]:\n            y = 1\n            break\n        else:\n            dr[i] -= ds[i]\n    if y == 1:\n        print('Impossible')\n    else:\n        t = ''\n        l = ''\n        k = ''\n        d = ''\n        for i in sorted(dr.keys()):\n            if ord(i) <= ord(s[0]):\n                k += i * dr[i]\n            else:\n                d += i * dr[i]\n            if ord(i) < ord(s[0]):\n                l += i * dr[i]\n            else:\n                t += i * dr[i]\n        if l + s + t > k + s + d:\n            print(k + s + d)\n        else:\n            print(l + s + t)", "from collections import Counter\nimport itertools\n\ndef ans(s, r):\n    r = list(r)\n    ds = Counter(s)\n    dr = Counter(r)\n    dr.subtract(ds)\n    lst = list(dr.keys())\n    for v in lst:\n        if dr[v] < 0:\n            return 'Impossible'\n        elif dr[v] == 0:\n            del dr[v]\n    left = []\n    right = []\n    middle = []\n    for i in dr:\n        if i > s[0]:\n            right.append(i * dr[i])\n        elif i == s[0]:\n            middle.append(i * dr[i])\n        else:\n            left.append(i * dr[i])\n    left = ''.join(sorted(left))\n    right = ''.join(sorted(right))\n    middle = ''.join(middle)\n    return left + min(middle + s, s + middle) + right\nfor _ in range(int(input())):\n    s = input()\n    r = input()\n    print(ans(s, r))", "import collections\nt = int(input())\nfor _ in range(t):\n    s = input()\n    c = collections.Counter(input())\n    c.subtract(s)\n    if any((v < 0 for v in c.values())):\n        print('Impossible')\n    else:\n        r = [*c.elements(), s]\n        r.sort(key=lambda x: x[0] + (x.lstrip(x[0]) or x)[0])\n        print(''.join(r))", "from collections import Counter\nfrom itertools import chain, starmap\nfrom operator import mul\nt = int(input())\nfor _ in range(t):\n    s = input()\n    c = Counter(input())\n    c.subtract(s)\n    if any((v < 0 for v in c.values())):\n        print('Impossible')\n    else:\n        r = chain(filter(None, starmap(mul, c.items())), [s])\n        r = sorted(r, key=lambda x: x[0] + (x.lstrip(x[0]) or x)[0])\n        print(''.join(r))", "import collections\nimport itertools\nt = int(input())\nfor _ in range(t):\n    s = input()\n    c = collections.Counter(input())\n    c.subtract(s)\n    if any((v < 0 for v in c.values())):\n        print('Impossible')\n    else:\n        r = itertools.chain(c.elements(), [s])\n        r = sorted(r, key=lambda x: x[0] + (x.lstrip(x[0]) or x)[0])\n        print(''.join(r))", "from collections import Counter\nfrom itertools import chain\nt = int(input())\nfor _ in range(t):\n    s = input()\n    c = Counter(input())\n    c.subtract(s)\n    if any((v < 0 for v in c.values())):\n        print('Impossible')\n    else:\n        r = chain(c.elements(), [s])\n        r = sorted(r, key=lambda x: x[0] + (x.lstrip(x[0]) or x)[0])\n        print(''.join(r))", "import collections\nimport itertools\nt = int(input())\nfor _ in range(t):\n    s = input()\n    c = collections.Counter(input())\n    c.subtract(s)\n    if any((v < 0 for v in c.values())):\n        print('Impossible')\n    else:\n        r = itertools.chain(c.elements(), [s])\n        r = sorted(r, key=lambda x: x[0] + (x.lstrip(x[0]) or x)[0])\n        print(''.join(r))", "from collections import Counter\nfrom itertools import chain\nt = int(input())\nfor _ in range(t):\n    s = input()\n    c = Counter(input())\n    c.subtract(s)\n    if any((v < 0 for v in c.values())):\n        print('Impossible')\n    else:\n        r = chain(c.elements(), [s])\n        r = sorted(r, key=lambda x: x[0] + (x.lstrip(x[0]) or x)[0])\n        print(''.join(r))", "from collections import Counter\nfrom itertools import chain\nt = int(input())\nfor _ in range(t):\n    s = input()\n    c = Counter(input())\n    c.subtract(s)\n    if any((v < 0 for v in c.values())):\n        print('Impossible')\n    else:\n        r = chain(c.elements(), [s])\n        r = sorted(r, key=lambda x: x[0] + (x.lstrip(x[0]) + x[0])[0])\n        print(''.join(r))", "from collections import Counter\nfrom itertools import chain\nt = int(input())\nfor _ in range(t):\n    s = input()\n    c = Counter(input())\n    c.subtract(s)\n    if any((v < 0 for v in c.values())):\n        print('Impossible')\n    else:\n        r = sorted(chain(c.elements(), [s]), key=lambda x: x[0] + (x.lstrip(x[0]) + x[0])[0])\n        print(''.join(r))", "from collections import Counter\nfrom heapq import merge\nt = int(input())\nfor _ in range(t):\n    s = input()\n    c = Counter(input())\n    c.subtract(s)\n    if any((v < 0 for v in c.values())):\n        print('Impossible')\n    else:\n        r = merge(sorted(c.elements()), [s], key=lambda x: x[0] + (x.lstrip(x[0]) + x[0])[0])\n        print(''.join(r))", "t = int(input())\nfor _ in range(t):\n    x = [0] * 26\n    y = [0] * 26\n    s = input()\n    r = input()\n    if len(r) < len(s):\n        print('Impossible')\n    else:\n        i = set(s)\n        j = set(r)\n        for m in i:\n            x[ord(m) - 97] = s.count(m)\n        for m in j:\n            y[ord(m) - 97] = r.count(m)\n        for i in range(26):\n            if y[i] < x[i]:\n                print('Impossible')\n                break\n            else:\n                y[i] = y[i] - x[i]\n        else:\n            l = ''\n            r = ''\n            if s < s[0] * len(s):\n                i = ord(s[0]) - 97\n                for m in range(i):\n                    for j in range(y[m]):\n                        l += chr(m + 97)\n                for m in range(i, 26):\n                    for j in range(y[m]):\n                        r += chr(m + 97)\n            else:\n                i = ord(s[0]) - 97\n                for m in range(i + 1):\n                    for j in range(y[m]):\n                        l += chr(m + 97)\n                for m in range(i + 1, 26):\n                    for j in range(y[m]):\n                        r += chr(m + 97)\n            print(l + s + r)", "from collections import Counter\nfrom bisect import bisect_left\nt = int(input())\nfor _ in range(t):\n    s = input()\n    c = Counter(input())\n    c.subtract(s)\n    if any((v < 0 for v in c.values())):\n        print('Impossible')\n    else:\n        e = sorted(c.elements())\n        r = s[0]\n        if (s.lstrip(r) + r)[0] >= r:\n            r = chr(ord(r) + 1)\n        e.insert(bisect_left(e, r), s)\n        print(''.join(e))", "from collections import Counter\nfrom bisect import bisect_left\nt = int(input())\nfor _ in range(t):\n    s = input()\n    c = Counter(input())\n    c.subtract(s)\n    if any((v < 0 for v in c.values())):\n        print('Impossible')\n    else:\n        d = sorted(c.elements())\n        r = s[0]\n        t = s.lstrip(r) + r\n        if t[0] >= r:\n            r = chr(ord(r) + 1)\n        d.insert(bisect_left(d, r), s)\n        print(''.join(d))", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    s = input()\n    c = Counter(sorted(input()))\n    c.subtract(s)\n    if any((v < 0 for v in c.values())):\n        print('Impossible')\n    else:\n        r = s[0]\n        t = s.lstrip(r) + r\n        if t[0] >= r:\n            r = chr(ord(r) + 1)\n        a = ''.join((x for x in c.elements() if x < r))\n        b = ''.join((x for x in c.elements() if x >= r))\n        print(a + s + b)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    s = input()\n    c = Counter(input())\n    c.subtract(s)\n    if any((v < 0 for v in c.values())):\n        print('Impossible')\n    else:\n        r = s[0]\n        t = s.lstrip(r) + r\n        if t[0] >= r:\n            r = chr(ord(r) + 1)\n        a = ''.join(sorted((x for x in c.elements() if x < r)))\n        b = ''.join(sorted((x for x in c.elements() if x >= r)))\n        print(a + s + b)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    s = input()\n    c = Counter(input())\n    c.subtract(s)\n    if any((v < 0 for v in c.values())):\n        print('Impossible')\n    else:\n        r = s[0]\n        t = s.lstrip(r) + r\n        if t[0] < r:\n            r = chr(ord(r) - 1)\n        a = ''.join(sorted((x for x in c.elements() if x <= r)))\n        b = ''.join(sorted((x for x in c.elements() if x > r)))\n        print(a + s + b)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    s = input()\n    c = Counter(input())\n    c.subtract(s)\n    if any((v < 0 for v in c.values())):\n        print('Impossible')\n    else:\n        f = s[0]\n        t = s.lstrip(f) + f\n        r = f if t[0] < f else chr(ord(f) + 1)\n        a = ''.join(sorted((x for x in c.elements() if x < r)))\n        b = ''.join(sorted((x for x in c.elements() if x >= r)))\n        print(a + s + b)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    s = input()\n    c = Counter(input())\n    c.subtract(s)\n    if any((v < 0 for v in c.values())):\n        print('Impossible')\n    else:\n        t = s.lstrip(s[0]) + s[0]\n        r = s[0] if t[0] < s[0] else chr(ord(s[0]) + 1)\n        a = ''.join(sorted((x for x in c.elements() if x < r)))\n        b = ''.join(sorted((x for x in c.elements() if x >= r)))\n        print(a + s + b)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    s = input()\n    c = Counter(map(ord, input()))\n    c.subtract(map(ord, s))\n    if any((v < 0 for v in c.values())):\n        print('Impossible')\n    else:\n        t = s.lstrip(s[0])\n        r = ord(s[0]) + (not t or t[0] >= s[0])\n        a = ''.join((c[i] * chr(i) for i in range(ord('a'), r)))\n        b = ''.join((c[i] * chr(i) for i in range(r, ord('z') + 1)))\n        print(a + s + b)", "for i in range(int(input())):\n    S = input()\n    R = input()\n    l1 = [0] * 26\n    l2 = [0] * 26\n    T = ''\n    flag = True\n    for j in R:\n        l1[ord(j) - 97] += 1\n    for j in S:\n        l2[ord(j) - 97] += 1\n    for j in range(26):\n        if l1[j] >= l2[j]:\n            l1[j] = l1[j] - l2[j]\n        else:\n            flag = False\n            print('Impossible')\n            break\n    if flag == True:\n        k = 0\n        for j in range(26):\n            if j == ord(S[0]) - 97 and len(S) > 1 and (k == 0):\n                for l in S:\n                    if ord(l) - 97 < j:\n                        T += S + l1[j] * chr(j + 97)\n                        k = 1\n                        flag = False\n                        break\n                    elif ord(l) - 97 > j:\n                        T += l1[j] * chr(j + 97) + S\n                        flag = False\n                        k = 1\n                        break\n                if flag == True:\n                    T += S + l1[j] * chr(j + 97)\n                    k = 1\n            elif j > ord(S[0]) - 97 and k == 0:\n                T += S + l1[j] * chr(j + 97)\n                k = 1\n            else:\n                T += l1[j] * chr(j + 97)\n        if k == 0:\n            T += S\n        print(T)", "from collections import defaultdict as dc\nimport sys\nimport math\n\ndef inp():\n    p = sys.stdin.readline()\n    return p\nfor _ in range(int(inp())):\n    a = str(input())\n    b = str(input())\n    p = dc(int)\n    for i in range(len(a)):\n        p[a[i]] += 1\n    z = ''\n    for i in range(len(b)):\n        if p[b[i]] != 0:\n            p[b[i]] -= 1\n        else:\n            z = z + b[i]\n    l = list(set(p.values()))\n    if len(l) == 1 and l[0] == 0:\n        q = list(z)\n        q.sort()\n        h = ''.join(q)\n        best = a + h\n        for i in range(len(h) + 1):\n            c = h[:i] + a + h[i:]\n            if best > c:\n                best = c\n        print(best)\n    else:\n        print('Impossible')", "t = int(input())\nfor _ in range(t):\n    s = input()\n    r = input()\n    found = 0\n    brr = [0 for i in range(26)]\n    for letter in r:\n        brr[ord(letter) - ord('a')] += 1\n    for letter in s:\n        if brr[ord(letter) - ord('a')] == 0:\n            found = 1\n            break\n        brr[ord(letter) - ord('a')] -= 1\n    if found == 1:\n        print('Impossible')\n        continue\n    r = ''\n    for i in range(26):\n        if brr[i] > 0:\n            c = chr(i + ord('a'))\n            r = r + c * brr[i]\n    res = r + s\n    if s + r < res:\n        res = s + r\n    for i in range(0, len(r)):\n        if res > r[0:i] + s + r[i:]:\n            res = r[0:i] + s + r[i:]\n    print(res)", "t = int(input())\nfrom itertools import permutations\nfor _ in range(t):\n    s = input()\n    r = input()\n    d = {}\n    for i in r:\n        try:\n            d[i] += 1\n        except:\n            d[i] = 1\n    k = ''\n    flag = True\n    for i in s:\n        try:\n            if d[i] == 0:\n                flag = False\n                break\n            k += i\n            d[i] -= 1\n        except:\n            flag = False\n            break\n    if flag == False:\n        print('Impossible')\n        continue\n    a1 = ''\n    a2 = ''\n    for i in d.keys():\n        if i < k[0]:\n            a1 += i * d[i]\n            a2 += i * d[i]\n            d[i] = 0\n        elif i == k[0]:\n            a2 += i * d[i]\n    b1 = ''\n    b2 = ''\n    for i in d.keys():\n        if i == k[0]:\n            b1 += i * d[i]\n        else:\n            b1 += i * d[i]\n            b2 += i * d[i]\n    ans = ''.join(sorted(a1)) + k + ''.join(sorted(b1))\n    ans1 = ''.join(sorted(a2)) + k + ''.join(sorted(b2))\n    print(min(ans1, ans))", "from collections import Counter\n\ndef fun(x, y):\n    x_c = Counter(x)\n    y_c = Counter(y)\n    flag = True\n    for (alp, cnt) in x_c.items():\n        cnt2 = y_c.get(alp)\n        if cnt2:\n            if cnt2 < cnt:\n                flag = False\n                break\n            else:\n                y_c[alp] -= x_c[alp]\n        else:\n            flag = False\n            break\n    if flag:\n        left = []\n        right = []\n        if x < x[0] * len(x):\n            for (i, j) in y_c.items():\n                if i < x[0]:\n                    left.append(i * j)\n                else:\n                    right.append(i * j)\n        else:\n            for (i, j) in y_c.items():\n                if i <= x[0]:\n                    left.append(i * j)\n                else:\n                    right.append(i * j)\n        left.sort()\n        right.sort()\n        return ''.join(left) + x + ''.join(right)\n    else:\n        return 'Impossible'\nfor _ in range(int(input())):\n    a = input().strip()\n    b = input().strip()\n    print(fun(a, b))", "t = int(input())\nwhile t > 0:\n    s = input()\n    r = input()\n    li = ord(s[0]) - 97\n    cnt = [0 for i in range(27)]\n    ans = ''\n    for i in range(len(r)):\n        ind = ord(r[i]) - 97\n        cnt[ind] += 1\n    for i in range(len(s)):\n        ind = ord(s[i]) - 97\n        cnt[ind] -= 1\n        if cnt[ind] < 0:\n            ans = 'IMPOSSIBLE'\n    if ans == 'IMPOSSIBLE':\n        print('Impossible')\n    else:\n        for i in range(len(cnt)):\n            if i != li and cnt[i] > 0:\n                ans += chr(i + 97) * cnt[i]\n            if i == li:\n                nb = False\n                for j in range(1, len(s)):\n                    if s[0] > s[j]:\n                        nb = True\n                        break\n                    if s[0] < s[j]:\n                        break\n                if nb:\n                    ans += s\n                    ans += chr(i + 97) * cnt[i]\n                else:\n                    ans += chr(i + 97) * cnt[i]\n                    ans += s\n        print(ans)\n    t -= 1", "def ii():\n    return int(input())\n\ndef fi():\n    return float(input())\n\ndef si():\n    return input()\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\nimport math\nfrom collections import Counter\nt = ii()\nfor i in range(t):\n    x = si().rstrip()\n    y = si().rstrip()\n    d = {}\n    for i in y:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    a = 0\n    for i in x:\n        if i not in d or d[i] == 0:\n            print('Impossible')\n            a = 1\n            break\n        else:\n            d[i] -= 1\n    if a == 0:\n        s = ''\n        ans = 0\n        for i in sorted(d.keys()):\n            k = i * d[i]\n            if i >= x[0] and ans == 0:\n                s += min(x + k, k + x)\n                ans = 1\n            else:\n                s += k\n        if ans == 0:\n            s += x\n        print(s)", "from collections import Counter\n\ndef sol(a, b):\n    ad = dict(Counter(a))\n    bd = dict(Counter(b))\n    for i in ad:\n        if i in bd and bd[i] >= ad[i]:\n            bd[i] -= ad[i]\n            if bd[i] == 0:\n                del bd[i]\n        else:\n            return 'Impossible'\n    l = []\n    r = []\n    if a < a[0] * len(a):\n        for i in sorted(bd):\n            if i < a[0]:\n                l.append(i * bd[i])\n            else:\n                r.append(i * bd[i])\n    else:\n        for i in sorted(bd):\n            if i <= a[0]:\n                l.append(i * bd[i])\n            else:\n                r.append(i * bd[i])\n    return ''.join(l) + a + ''.join(r)\nfor _ in range(int(input())):\n    a = input()\n    b = input()\n    print(sol(a, b))", "from collections import Counter\n\ndef sol(a, b):\n    ad = dict(Counter(a))\n    bd = dict(Counter(b))\n    for i in ad:\n        if i in bd and bd[i] >= ad[i]:\n            bd[i] -= ad[i]\n            if bd[i] == 0:\n                del bd[i]\n        else:\n            return 'Impossible'\n    l = []\n    r = []\n    if a < a[0] * len(a):\n        for i in sorted(bd):\n            if i < a[0]:\n                l.append(i * bd[i])\n            else:\n                r.append(i * bd[i])\n    else:\n        for i in sorted(bd):\n            if i <= a[0]:\n                l.append(i * bd[i])\n            else:\n                r.append(i * bd[i])\n    res = l + list(a) + r\n    return ''.join(res)\nfor _ in range(int(input())):\n    a = input()\n    b = input()\n    print(sol(a, b))", "def sol(a, b):\n    ad = {}\n    bd = {}\n    for i in a:\n        if i in ad:\n            ad[i] += 1\n        else:\n            ad[i] = 1\n    for i in b:\n        if i in bd:\n            bd[i] += 1\n        else:\n            bd[i] = 1\n    for i in ad:\n        if i in bd and bd[i] >= ad[i]:\n            bd[i] -= ad[i]\n            if bd[i] == 0:\n                del bd[i]\n        else:\n            return 'Impossible'\n    l = []\n    r = []\n    if a < a[0] * len(a):\n        for i in sorted(bd):\n            if i < a[0]:\n                l.append(i * bd[i])\n            else:\n                r.append(i * bd[i])\n    else:\n        for i in sorted(bd):\n            if i <= a[0]:\n                l.append(i * bd[i])\n            else:\n                r.append(i * bd[i])\n    res = l + list(a) + r\n    return ''.join(res)\nfor _ in range(int(input())):\n    a = input()\n    b = input()\n    print(sol(a, b))", "t = int(input())\nfor _ in range(t):\n    s = input()\n    r = input()\n    d1 = {}\n    d2 = {}\n    for i in s:\n        try:\n            d1[i] += 1\n        except:\n            d1[i] = 1\n    for i in r:\n        try:\n            d2[i] += 1\n        except:\n            d2[i] = 1\n    f = True\n    g = True\n    j = True\n    l = 0\n    for i in list(d1.keys()):\n        if l > 0 and s[l] != s[l - 1] and g:\n            j = s[l] < s[l - 1]\n            g = False\n        l += 1\n        try:\n            if d1[i] > d2[i]:\n                f = False\n                print('Impossible')\n                break\n            else:\n                d2[i] -= d1[i]\n        except:\n            f = False\n            print('Impossible')\n            break\n    if f:\n        a = sorted(list(d2.keys()))\n        h = ''\n        for k in a:\n            for _ in range(d2[k]):\n                h += k\n        m = s + h\n        for i in range(1, len(h) + 1):\n            temp = h[:i] + s + h[i:]\n            if temp < m:\n                m = temp\n        print(m)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    r = input()\n    rtem = r\n    for i in s:\n        x = rtem.find(i)\n        if x == -1:\n            print('Impossible', end='')\n            break\n        rtem = rtem[:x] + rtem[x + 1:]\n    rtem = ''.join(sorted(rtem))\n    y = s[0]\n    se = s[0]\n    for i in range(len(s) - 1):\n        if s[i] != s[i + 1]:\n            se = s[i + 1]\n            break\n    if x != -1:\n        if se > y:\n            pr = False\n            for i in rtem:\n                if i <= y:\n                    print(i, end='')\n                else:\n                    if not pr:\n                        print(s, end='')\n                        pr = True\n                    print(i, end='')\n            if not pr:\n                print(s, end='')\n        else:\n            pr = False\n            for i in rtem:\n                if i < y:\n                    print(i, end='')\n                else:\n                    if not pr:\n                        print(s, end='')\n                        pr = True\n                    print(i, end='')\n            if not pr:\n                print(s, end='')\n    print()", "def sol(a, b):\n    ad = {}\n    bd = {}\n    for i in a:\n        if i in ad:\n            ad[i] += 1\n        else:\n            ad[i] = 1\n    for i in b:\n        if i in bd:\n            bd[i] += 1\n        else:\n            bd[i] = 1\n    for i in ad:\n        if i in bd and bd[i] >= ad[i]:\n            bd[i] -= ad[i]\n            if bd[i] == 0:\n                del bd[i]\n        else:\n            return 'Impossible'\n    l = []\n    r = []\n    if a < a[0] * len(a):\n        for i in bd:\n            if i < a[0]:\n                l.append(i * bd[i])\n            else:\n                r.append(i * bd[i])\n    else:\n        for i in bd:\n            if i <= a[0]:\n                l.append(i * bd[i])\n            else:\n                r.append(i * bd[i])\n    l.sort()\n    r.sort()\n    res = l + list(a) + r\n    return ''.join(res)\nfor _ in range(int(input())):\n    a = input()\n    b = input()\n    print(sol(a, b))", "for _ in range(int(input())):\n    s = input()\n    r = input()\n    temp = [0] * 26\n    flag = 1\n    for i in r:\n        temp[ord(i) - 97] += 1\n    for i in s:\n        if temp[ord(i) - 97] == 0:\n            flag = 0\n            break\n        temp[ord(i) - 97] -= 1\n    if flag:\n        s1 = ''\n        for i in range(26):\n            for j in range(temp[i]):\n                s1 += chr(i + 97)\n        l = len(s1)\n        if l == 0:\n            print(s)\n        for i in range(l):\n            if s[0] == s1[i] and s < s1[i] * len(s):\n                print(s1[:i] + s + s1[i:])\n                break\n            elif s[0] < s1[i]:\n                print(s1[:i] + s + s1[i:])\n                break\n            elif i == l - 1:\n                print(s1 + s)\n    else:\n        print('Impossible')", "for t in range(int(input())):\n    s = input().strip()\n    r = input().strip()\n    freq = [0 for i in range(26)]\n    for i in range(len(r)):\n        freq[ord(r[i]) - 97] += 1\n    for i in range(len(s)):\n        freq[ord(s[i]) - 97] -= 1\n    poss = True\n    for i in range(26):\n        if freq[i] < 0:\n            poss = False\n            break\n    if poss:\n        ans = ''\n        ind = ord(s[0]) - 97\n        for i in range(ind):\n            ans += chr(97 + i) * freq[i]\n        is_next_big = True\n        for i in range(1, len(s)):\n            if s[0] > s[i]:\n                is_next_big = False\n                break\n            elif s[0] < s[i]:\n                break\n        if is_next_big:\n            ans += chr(97 + ind) * freq[ind]\n            ans += s\n        else:\n            ans += s\n            ans += chr(97 + ind) * freq[ind]\n        for i in range(ind + 1, 26):\n            ans += chr(97 + i) * freq[i]\n        print(ans)\n    else:\n        print('Impossible')", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    S = input()\n    R = input()\n    S1 = dict(Counter(S))\n    R1 = dict(Counter(R))\n    check = 1\n    for (i, j) in S1.items():\n        if R1.get(i, 0) < j:\n            check = 0\n            break\n    if check:\n        Q = dict()\n        for (i, j) in R1.items():\n            if j - S1.get(i, 0) > 0:\n                Q[i] = j - S1.get(i, 0)\n        (left, right) = ([], [])\n        if S < S[0] * len(S):\n            for (i, j) in Q.items():\n                if i < S[0]:\n                    left.append(i * j)\n                else:\n                    right.append(i * j)\n        else:\n            for (i, j) in Q.items():\n                if i <= S[0]:\n                    left.append(i * j)\n                else:\n                    right.append(i * j)\n        left = sorted(left)\n        left = ''.join(left)\n        right = sorted(right)\n        right = ''.join(right)\n        final = left + S + right\n        print(final)\n    else:\n        print('Impossible')", "t = int(input())\nfor _ in range(t):\n    x = input().rstrip()\n    y = input().rstrip()\n    d = {}\n    for i in y:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    a = False\n    for i in x:\n        if i not in d or d[i] == 0:\n            print('Impossible')\n            a = True\n            break\n        else:\n            d[i] -= 1\n    if a == False:\n        s = ''\n        ans = False\n        for i in sorted(d.keys()):\n            k = i * d[i]\n            if i >= x[0] and ans == False:\n                s += min(x + k, k + x)\n                ans = True\n            else:\n                s += k\n        if ans == False:\n            s += x\n        print(s)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    S = input()\n    R = input()\n    S1 = dict(Counter(S))\n    R1 = dict(Counter(R))\n    check = 1\n    for (i, j) in S1.items():\n        if R1.get(i, 0) < j:\n            check = 0\n            break\n    if check:\n        Q = dict()\n        for (i, j) in R1.items():\n            if j - S1.get(i, 0) > 0:\n                Q[i] = j - S1.get(i, 0)\n        (left, right) = ([], [])\n        if S < S[0] * len(S):\n            for (i, j) in Q.items():\n                if i < S[0]:\n                    left.append(i * j)\n                else:\n                    right.append(i * j)\n        else:\n            for (i, j) in Q.items():\n                if i <= S[0]:\n                    left.append(i * j)\n                else:\n                    right.append(i * j)\n        left = ''.join(left)\n        left = sorted(left)\n        left = ''.join(left)\n        right = ''.join(right)\n        right = sorted(right)\n        right = ''.join(right)\n        final = left + S + right\n        print(final)\n    else:\n        print('Impossible')", "T = int(input())\nt = 0\nwhile t < T:\n    t += 1\n    S = input()\n    R = input()\n    dic = {}\n    for c in R:\n        if c not in list(dic.keys()):\n            dic[c] = 1\n        else:\n            dic[c] += 1\n    res = ''\n    f = 1\n    for c in S:\n        if c in list(dic.keys()) and dic[c] >= 1:\n            res += c\n            dic[c] -= 1\n        else:\n            f = 0\n            break\n    alp = 'abcdefghijklmnopqrstuvwxyz'\n    if f == 0:\n        print('Impossible')\n        continue\n    temp = res[0]\n    need = ''\n    for c in res:\n        if c != temp:\n            need = c\n            break\n    if need == '':\n        need = temp\n    temp = ord(temp)\n    res2 = ''\n    for c in alp:\n        if c in list(dic.keys()) and ord(c) < temp:\n            x = dic[c]\n            for i in range(x):\n                res2 = res2 + c\n        elif c in list(dic.keys()) and ord(c) == temp:\n            x = dic[c]\n            while ord(c) <= ord(need) and x > 0:\n                res2 += c\n                x -= 1\n            for i in range(x):\n                res = res + c\n        elif c in list(dic.keys()) and ord(c) >= temp:\n            x = dic[c]\n            for i in range(x):\n                res = res + c\n    res = res2 + res\n    print(res)", "T = int(input())\nt = 0\nwhile t < T:\n    t += 1\n    S = input()\n    R = input()\n    dic = {}\n    for c in R:\n        if c not in list(dic.keys()):\n            dic[c] = 1\n        else:\n            dic[c] += 1\n    res = ''\n    f = 1\n    for c in S:\n        if c in list(dic.keys()) and dic[c] >= 1:\n            res += c\n            dic[c] -= 1\n        else:\n            f = 0\n            break\n    alp = 'abcdefghijklmnopqrstuvwxyz'\n    if f == 0:\n        print('Impossible')\n        continue\n    temp = res[0]\n    need = ''\n    for c in res:\n        if c != temp:\n            need = c\n            break\n    if need == '':\n        need = temp\n    temp = ord(temp)\n    res2 = ''\n    for c in alp:\n        if c in list(dic.keys()) and ord(c) < temp:\n            x = dic[c]\n            for i in range(x):\n                res2 = res2 + c\n        elif c in list(dic.keys()) and ord(c) == temp:\n            x = dic[c]\n            while ord(c) <= ord(need) and x > 0:\n                res2 += c\n                x -= 1\n            for i in range(x):\n                res = res + c\n        elif c in list(dic.keys()) and ord(c) >= temp:\n            x = dic[c]\n            for i in range(x):\n                res = res + c\n    res = res2 + res\n    print(res)", "t = int(input())\nfor ankit in range(t):\n    a = input()\n    b = input()\n    p = [0] * 26\n    q = [0] * 26\n    f = 0\n    for i in a:\n        p[ord(i) - 97] += 1\n    for i in b:\n        q[ord(i) - 97] += 1\n    for i in range(26):\n        if p[i] > q[i]:\n            f = 1\n            break\n        q[i] -= p[i]\n    if f == 1:\n        print('Impossible')\n    else:\n        for i in range(ord(a[0]) - 97):\n            s = q[i]\n            while s > 0:\n                print(chr(i + 97), end='')\n                s -= 1\n        s = 0\n        oo = len(a)\n        r = 0\n        while s < oo - 1:\n            if a[s] != a[s + 1]:\n                if a[s] > a[s + 1]:\n                    r = 0\n                else:\n                    r = 1\n                break\n            s += 1\n        if r == 0:\n            print(a, end='')\n            for i in range(ord(a[0]) - 97, 26):\n                s = q[i]\n                while s > 0:\n                    print(chr(i + 97), end='')\n                    s -= 1\n        else:\n            s = q[ord(a[0]) - 97]\n            while s > 0:\n                print(a[0], end='')\n                s -= 1\n            print(a, end='')\n            for i in range(ord(a[0]) - 97 + 1, 26):\n                s = q[i]\n                while s > 0:\n                    print(chr(i + 97), end='')\n                    s -= 1\n        print()", "t = int(input())\nfor i in range(t):\n    s = input()\n    r = input()\n    flag = 0\n    sn = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    rn = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for j in range(len(s)):\n        sn[ord(s[j]) - 97] += 1\n    for j in range(len(r)):\n        rn[ord(r[j]) - 97] += 1\n    for j in range(26):\n        if rn[j] < sn[j]:\n            flag = 1\n            break\n    if flag == 1:\n        print('Impossible')\n    else:\n        left1 = ''\n        left2 = ''\n        ans = ''\n        for j in range(26):\n            rn[j] = rn[j] - sn[j]\n            if j < ord(s[0]) - 97:\n                left1 = left1 + rn[j] * chr(j + 97)\n            elif j > ord(s[0]) - 97:\n                left2 = left2 + rn[j] * chr(j + 97)\n        print(min(left1 + s + rn[ord(s[0]) - 97] * s[0] + left2, left1 + rn[ord(s[0]) - 97] * s[0] + s + left2))", "import io, sys, atexit, os\nimport math as ma\nfrom sys import exit\nfrom decimal import Decimal as dec\nfrom itertools import permutations\nfrom itertools import combinations\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef num():\n    return map(int, sys.stdin.readline().split())\n\ndef nu():\n    return int(input())\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef lcm(x, y):\n    gg = find_gcd(x, y)\n    return x * y // gg\nmm = 1000000007\n\ndef solve():\n    t = nu()\n    for tt in range(t):\n        s = input()\n        r = input()\n        ff = [0] * 26\n        gg = [0] * 26\n        for i in range(len(s)):\n            ff[ord(s[i]) - ord('a')] += 1\n        for i in range(len(r)):\n            gg[ord(r[i]) - ord('a')] += 1\n        fl = True\n        for i in range(26):\n            if ff[i] > gg[i]:\n                fl = False\n                break\n            gg[i] -= ff[i]\n        if fl == False:\n            print('Impossible')\n        elif len(s) == 1:\n            xp = s[0]\n            for i in range(ord(s[0]) - ord('a'), -1, -1):\n                if gg[i] == 0:\n                    continue\n                pq = chr(i + 97)\n                for j in range(gg[i]):\n                    xp = pq + xp\n            for i in range(ord(s[0]) - ord('a') + 1, 26):\n                if gg[i] == 0:\n                    continue\n                pq = chr(i + 97)\n                for j in range(gg[i]):\n                    xp = xp + pq\n            print(xp)\n        else:\n            ind = -1\n            lp = 1\n            for i in range(len(s) - 1):\n                if s[i] != s[i + 1]:\n                    ind = i\n                    break\n            if ind != -1:\n                if s[ind] < s[ind + 1]:\n                    lp = -1\n            if lp == 1:\n                xp = s\n                pq = chr(97 + ord(s[0]) - ord('a'))\n                for i in range(gg[ord(s[0]) - ord('a')]):\n                    xp = xp + pq\n                for i in range(ord(s[0]) - ord('a') - 1, -1, -1):\n                    if gg[i] == 0:\n                        continue\n                    pq = chr(i + 97)\n                    for j in range(gg[i]):\n                        xp = pq + xp\n                for i in range(ord(s[0]) - ord('a') + 1, 26):\n                    if gg[i] == 0:\n                        continue\n                    pq = chr(i + 97)\n                    for j in range(gg[i]):\n                        xp = xp + pq\n                print(xp)\n            else:\n                xp = ''\n                for i in range(ord(s[0]) - ord('a'), -1, -1):\n                    if gg[i] == 0:\n                        continue\n                    pq = chr(i + 97)\n                    for j in range(gg[i]):\n                        xp = pq + xp\n                xp = xp + s\n                for i in range(ord(s[0]) - ord('a') + 1, 26):\n                    if gg[i] == 0:\n                        continue\n                    pq = chr(i + 97)\n                    for j in range(gg[i]):\n                        xp = xp + pq\n                print(xp)\nsolve()", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    S = input()\n    R = input()\n    S1 = dict(Counter(S))\n    R1 = dict(Counter(R))\n    check = 1\n    for (i, j) in S1.items():\n        if R1.get(i, 0) < j:\n            check = 0\n            break\n    if check:\n        Q = dict()\n        for (i, j) in R1.items():\n            if j - S1.get(i, 0) > 0:\n                Q[i] = j - S1.get(i, 0)\n        (left, right) = ([], [])\n        if S < S[0] * len(S):\n            for (i, j) in Q.items():\n                if i < S[0]:\n                    left.append(i * j)\n                else:\n                    right.append(i * j)\n        else:\n            for (i, j) in Q.items():\n                if i <= S[0]:\n                    left.append(i * j)\n                else:\n                    right.append(i * j)\n        left = ''.join(left)\n        left = sorted(left)\n        left = ''.join(left)\n        right = ''.join(right)\n        right = sorted(right)\n        right = ''.join(right)\n        final = left + S + right\n        print(final)\n    else:\n        print('Impossible')", "def reo(s, r):\n    s1 = [0 for i in range(26)]\n    r1 = [0 for i in range(26)]\n    for i in s:\n        s1[ord(i) - 97] += 1\n    for i in r:\n        r1[ord(i) - 97] += 1\n    flag = 0\n    flag1 = 0\n    for i in range(len(s) - 1):\n        if s[i] > s[i + 1]:\n            flag1 = 1\n            break\n        if s[i] == s[i + 1]:\n            continue\n        break\n    for i in range(26):\n        if s1[i] > r1[i]:\n            flag = 1\n            print('Impossible')\n            break\n        r1[i] -= s1[i]\n    if flag != 1:\n        re = ord(s[0]) - 97\n        if flag1 == 1:\n            re -= 1\n        for i in range(re + 1):\n            print(chr(97 + i) * r1[i], end='')\n        print(s, end='')\n        for i in range(re + 1, 26):\n            print(chr(97 + i) * r1[i], end='')\n        print()\nt = int(input())\nwhile t:\n    t -= 1\n    s = input().rstrip()\n    r = input().rstrip()\n    reo(s, r)", "from collections import defaultdict\nfrom bisect import bisect_left, bisect_right\n\ndef bin_Search(arr, c):\n    s = 0\n    e = len(arr)\n    flag = 0\n    while s <= e:\n        mid = (s + e) // 2\n        if mid == len(arr):\n            break\n        if arr[mid] == c:\n            flag = 1\n            break\n        elif arr[mid] > c:\n            e = mid - 1\n        else:\n            s = mid + 1\n    if flag == 0:\n        return mid\n    else:\n        return -1\nt = int(input())\nfor i in range(t):\n    s = input()\n    r = input()\n    ds = defaultdict(int)\n    dr = defaultdict(int)\n    for x in s:\n        ds[x] += 1\n    for x in r:\n        dr[x] += 1\n    flag = 0\n    for x in ds:\n        if ds[x] > dr[x]:\n            flag = 1\n            break\n        else:\n            dr[x] -= ds[x]\n    if flag == 1:\n        print('Impossible')\n        continue\n    newr = []\n    for x in dr:\n        newr += [x] * dr[x]\n    newr.sort()\n    kek = ''\n    for x in newr:\n        kek += x\n    if s[0] not in newr:\n        lol = bisect_right(newr, s[0], 0, len(newr))\n        print(kek[:lol] + s + kek[lol:])\n    else:\n        right = bisect_right(newr, s[0], 0, len(newr))\n        left = bisect_left(newr, s[0], 0, len(newr))\n        leftans = kek[:left] + s + kek[left:]\n        rightans = kek[:right] + s + kek[right:]\n        print(min(leftans, rightans))", "import bisect\n\nclass Solution(object):\n\n    def __init__(self):\n        pass\n\n    def sol(self, S, R):\n        mp = {}\n        for ch in R:\n            if ch not in mp:\n                mp[ch] = 0\n            mp[ch] += 1\n        for ch in S:\n            if ch not in mp:\n                return (False, None)\n            if mp[ch] == 0:\n                return (False, None)\n            mp[ch] -= 1\n        _R = ''\n        keys = sorted(mp.keys())\n        for e in keys:\n            _R += e * mp[e]\n        best = S + _R\n        for i in range(1, len(_R) + 1):\n            c = _R[0:i] + S + _R[i:]\n            if best > c:\n                best = c\n        return (True, best)\n\ndef main():\n    T = int(input())\n    sol = Solution()\n    for i in range(0, T):\n        S = input()\n        R = input()\n        rs = sol.sol(S, R)\n        if not rs[0]:\n            print('Impossible')\n            continue\n        print(rs[1])\n    return 0\nmain()", "mod = 1000000007\nMOD = 998244353\nii = lambda : int(input())\nsi = lambda : input()\ndgl = lambda : list(map(int, input()))\nf = lambda : map(int, input().split())\nil = lambda : list(map(int, input().split()))\nit = lambda : tuple(map(int, input().split()))\nls = lambda : list(input())\nfor _ in range(ii()):\n    s = si()\n    r = si()\n    l = [0] * 26\n    for i in r:\n        l[ord(i) - ord('a')] += 1\n    fg = 1\n    for i in s:\n        if l[ord(i) - ord('a')] <= 0:\n            print('Impossible')\n            fg = 0\n            break\n        else:\n            l[ord(i) - ord('a')] -= 1\n    if fg:\n        ind = 0\n        for i in range(1, len(s)):\n            if s[i] != s[i - 1]:\n                ind = i\n                break\n        if s[0] > s[ind]:\n            x = ''\n            for i in range(26):\n                if chr(i + ord('a')) < s[0]:\n                    x += chr(i + ord('a')) * l[i]\n            x += s\n            for i in range(26):\n                if chr(i + ord('a')) >= s[0]:\n                    x += chr(i + ord('a')) * l[i]\n            print(x)\n        else:\n            x = ''\n            for i in range(26):\n                if chr(i + ord('a')) <= s[0]:\n                    x += chr(i + ord('a')) * l[i]\n            x += s\n            for i in range(26):\n                if chr(i + ord('a')) > s[0]:\n                    x += chr(i + ord('a')) * l[i]\n            print(x)", "import bisect\nt = int(input())\nso = 'abcdefghijklmnopqrstuvwxyz'\nsp = {}\nj = 0\nfor i in so:\n    sp[i] = j\n    j += 1\nfor _ in range(t):\n    aa = input()\n    bb = input()\n    a = []\n    for i in aa:\n        a.append(sp[i])\n    b = []\n    for i in bb:\n        b.append(sp[i])\n    if len(a) > len(b):\n        print('Impossible')\n        continue\n    ss = {}\n    j = 0\n    for i in b:\n        try:\n            ss[i][0].append(j)\n        except:\n            ss[i] = [[j], 0]\n        j += 1\n    vis = [0] * len(b)\n    st = False\n    for i in a:\n        try:\n            aa = ss[i]\n            if ss[i][1] == len(ss[i][0]):\n                st = True\n                break\n            ss[i][1] += 1\n            vis[ss[i][0][ss[i][1] - 1]] = 1\n        except:\n            st = True\n            break\n    if st:\n        print('Impossible')\n        continue\n    tot = a\n    tot2 = []\n    for i in range(len(b)):\n        if vis[i] == 0:\n            tot2.append(b[i])\n    tot2.sort()\n    ind = bisect.bisect_left(tot2, a[0])\n    try:\n        if tot2[ind] == a[0]:\n            st = False\n            for i in a[1:]:\n                if i < a[0]:\n                    st = True\n                    break\n                if i > a[0]:\n                    break\n            if st:\n                ans = tot2[:ind] + a + tot2[ind:]\n            else:\n                ind2 = bisect.bisect_right(tot2, a[0])\n                ans = tot2[:ind2] + a + tot2[ind2:]\n        else:\n            ans = tot2[:ind] + a + tot2[ind:]\n    except:\n        ans = tot2[:ind] + a + tot2[ind:]\n    print(''.join([so[i] for i in ans]))", "for _ in range(int(input())):\n    a = input()\n    b = input()\n    d1 = {}\n    d2 = {}\n    for j in range(97, 97 + 26):\n        d1[chr(j)] = 0\n        d2[chr(j)] = 0\n    for i in a:\n        d1[i] += 1\n    for i in b:\n        d2[i] += 1\n    z = 0\n    for i in range(97, 97 + 26):\n        i = chr(i)\n        if d2[i] < d1[i]:\n            z = 1\n            break\n    if z == 1:\n        print('Impossible')\n    else:\n        r = []\n        le = 0\n        for i in range(97, 97 + 26):\n            i = chr(i)\n            for j in range(d2[i] - d1[i]):\n                r.append(i)\n                le += 1\n        r.sort()\n        z = 0\n        for j in range(1, len(a)):\n            if a[0] < a[j]:\n                z = 0\n                break\n            elif a[0] > a[j]:\n                z = 1\n                break\n            if j == len(a) - 1:\n                z = 1\n        p22 = 0\n        for q in range(le):\n            i = r[q]\n            if i < a[0]:\n                print(i, end='')\n            elif i == a[0] and z == 0:\n                print(i, end='')\n            else:\n                p22 = 1\n                print(a, end='')\n                for j in range(q, le - 1):\n                    print(r[j], end='')\n                print(r[-1])\n                break\n        if p22 == 0:\n            print(a)", "from bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nimport math\nfrom decimal import *\nfrom copy import *\nfrom heapq import *\ngetcontext().prec = 30\nMAX = sys.maxsize\nMAXN = 4000010\nMOD = 10 ** 9 + 7\nspf = [i for i in range(MAXN)]\n\ndef sieve():\n    for i in range(2, MAXN, 2):\n        spf[i] = 2\n    for i in range(3, int(MAXN ** 0.5) + 1):\n        if spf[i] == i:\n            for j in range(i * i, MAXN, i):\n                if spf[j] == j:\n                    spf[j] = i\n\ndef mhd(a, b):\n    return abs(a[0] - b[0]) + abs(b[1] - a[1])\n\ndef charIN(x=' '):\n    return sys.stdin.readline().strip().split(x)\n\ndef arrIN(x=' '):\n    return list(map(int, sys.stdin.readline().strip().split(x)))\n\ndef eld(x, y):\n    a = y[0] - x[0]\n    b = x[1] - y[1]\n    return (a * a + b * b) ** 0.5\n\ndef lgcd(a):\n    g = a[0]\n    for i in range(1, len(a)):\n        g = math.gcd(g, a[i])\n    return g\n\ndef ms(a):\n    msf = -MAX\n    meh = 0\n    st = en = be = 0\n    for i in range(len(a)):\n        meh += a[i]\n        if msf < meh:\n            msf = meh\n            st = be\n            en = i\n        if meh < 0:\n            meh = 0\n            be = i + 1\n    return (msf, st, en)\n\ndef ncr(n, r):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % MOD\n        den = den * (i + 1) % MOD\n    return num * pow(den, MOD - 2, MOD) % MOD\n\ndef flush():\n    return sys.stdout.flush()\nfor _ in range(int(input())):\n    s = input().strip()\n    r = input().strip()\n    cs = Counter(s)\n    cr = Counter(r)\n    for i in cs.keys():\n        if cs[i] > cr[i]:\n            print('Impossible')\n            break\n    else:\n        ans = s\n        for i in s:\n            cr[i] -= 1\n        x = ''\n        for i in cr.keys():\n            x += i * cr[i]\n        x = ''.join(sorted(x))\n        mn = ans + x\n        for i in range(1, len(x) + 1):\n            mn = min(mn, x[:i] + ans + x[i:])\n        print(mn)", "from sys import stdin, stdout\nimport heapq\nimport cProfile, math\nfrom collections import Counter, defaultdict, deque\nfrom bisect import bisect_left, bisect, bisect_right\nimport itertools\nfrom copy import deepcopy\nfrom fractions import Fraction\nimport sys, threading\nimport operator as op\nfrom functools import reduce\nimport sys\nsys.setrecursionlimit(10 ** 6)\nthreading.stack_size(2 ** 27)\nfac_warm_up = False\nprintHeap = str()\nmemory_constrained = False\nP = 10 ** 9 + 7\n\nclass MergeFind:\n\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.num_sets = n\n        self.lista = [[_] for _ in range(n)]\n\n    def find(self, a):\n        to_update = []\n        while a != self.parent[a]:\n            to_update.append(a)\n            a = self.parent[a]\n        for b in to_update:\n            self.parent[b] = a\n        return self.parent[a]\n\n    def merge(self, a, b):\n        a = self.find(a)\n        b = self.find(b)\n        if a == b:\n            return\n        if self.size[a] < self.size[b]:\n            (a, b) = (b, a)\n        self.num_sets -= 1\n        self.parent[b] = a\n        self.size[a] += self.size[b]\n        self.lista[a] += self.lista[b]\n\n    def set_size(self, a):\n        return self.size[self.find(a)]\n\n    def __len__(self):\n        return self.num_sets\n\ndef display(string_to_print):\n    stdout.write(str(string_to_print) + '\\n')\n\ndef prime_factors(n):\n    factors = dict()\n    for i in range(2, math.ceil(math.sqrt(n)) + 1):\n        while n % i == 0:\n            if i in factors:\n                factors[i] += 1\n            else:\n                factors[i] = 1\n            n = n // i\n    if n > 2:\n        factors[n] = 1\n    return factors\n\ndef all_factors(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\n\ndef fibonacci_modP(n, MOD):\n    if n < 2:\n        return 1\n    return (cached_fn(fibonacci_modP, (n + 1) // 2, MOD) * cached_fn(fibonacci_modP, n // 2, MOD) + cached_fn(fibonacci_modP, (n - 1) // 2, MOD) * cached_fn(fibonacci_modP, (n - 2) // 2, MOD)) % MOD\n\ndef factorial_modP_Wilson(n, p):\n    if p <= n:\n        return 0\n    res = p - 1\n    for i in range(n + 1, p):\n        res = res * cached_fn(InverseEuler, i, p) % p\n    return res\n\ndef binary(n, digits=20):\n    b = bin(n)[2:]\n    b = '0' * (digits - len(b)) + b\n    return b\n\ndef is_prime(n):\n    if n < 4:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += w\n        w = 6 - w\n    return True\n\ndef generate_primes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    return prime\nfactorial_modP = []\n\ndef warm_up_fac(MOD):\n    global factorial_modP, fac_warm_up\n    if fac_warm_up:\n        return\n    factorial_modP = [1 for _ in range(fac_warm_up_size + 1)]\n    for i in range(2, fac_warm_up_size):\n        factorial_modP[i] = factorial_modP[i - 1] * i % MOD\n    fac_warm_up = True\n\ndef InverseEuler(n, MOD):\n    return pow(n, MOD - 2, MOD)\n\ndef nCr(n, r, MOD):\n    global fac_warm_up, factorial_modP\n    if not fac_warm_up:\n        warm_up_fac(MOD)\n        fac_warm_up = True\n    return factorial_modP[n] * (pow(factorial_modP[r], MOD - 2, MOD) * pow(factorial_modP[n - r], MOD - 2, MOD) % MOD) % MOD\n\ndef get_int():\n    return int(stdin.readline().strip())\n\ndef get_tuple():\n    return map(int, stdin.readline().split())\n\ndef get_list():\n    return list(map(int, stdin.readline().split()))\nmemory = dict()\n\ndef clear_cache():\n    global memory\n    memory = dict()\n\ndef cached_fn(fn, *args):\n    global memory\n    if args in memory:\n        return memory[args]\n    else:\n        result = fn(*args)\n        memory[args] = result\n        return result\n\ndef ncr(n, r):\n    return math.factorial(n) / (math.factorial(n - r) * math.factorial(r))\n\ndef binary_search(i, li):\n    fn = lambda x: li[x] - x // i\n    x = -1\n    b = len(li)\n    while b >= 1:\n        while b + x < len(li) and fn(b + x) > 0:\n            x += b\n        b = b // 2\n    return x\nTestCases = True\noptimise_for_recursion = True\n\ndef is_inc_st(st):\n    prev = st[0]\n    for i in st:\n        if i < prev:\n            return False\n        elif i > prev:\n            return True\n    return True\n\ndef main():\n    st = list(stdin.readline().strip())\n    rt = list(stdin.readline().strip())\n    cnt = Counter(rt)\n    for i in st:\n        if i in cnt and cnt[i] > 0:\n            cnt[i] -= 1\n        else:\n            print('Impossible')\n            return\n    res = []\n    for chr in sorted(cnt.keys()):\n        if chr == st[0]:\n            if is_inc_st(st):\n                res += [chr] * cnt[chr]\n                res += st\n            else:\n                res += st\n                res += [chr] * cnt[chr]\n        else:\n            res += [chr] * cnt[chr]\n    print(''.join(res))\nif TestCases:\n    for i in range(get_int()):\n        main()\nelse:\n    main() if not optimise_for_recursion else threading.Thread(target=main).start()", "T = int(input())\nwhile T:\n    S = input()\n    R = input()\n    flag = True\n    a = [0 for i in range(26)]\n    for i in range(26):\n        if S.count(chr(97 + i)) > R.count(chr(97 + i)):\n            flag = False\n        else:\n            a[i] = R.count(chr(97 + i)) - S.count(chr(97 + i))\n    if flag:\n        b = ord(S[0]) - 97\n        c = ''\n        f1 = True\n        for i in range(len(S)):\n            if S[i] > S[0]:\n                break\n            if S[i] < S[0]:\n                f1 = False\n                break\n        i = 0\n        if f1:\n            while i <= b:\n                c += chr(i + 97) * a[i]\n                i += 1\n            c += S\n            while i < 26:\n                c += chr(i + 97) * a[i]\n                i += 1\n        else:\n            while i < b:\n                c += chr(i + 97) * a[i]\n                i += 1\n            c += S\n            while i < 26:\n                c += chr(i + 97) * a[i]\n                i += 1\n        print(c)\n    else:\n        print('Impossible')\n    T -= 1", "from collections import Counter\n\ndef compareCounter(c1, c2):\n    for char in c1:\n        if char not in c2:\n            return False\n        elif c1[char] > c2[char]:\n            return False\n    return True\n\ndef getOrder(s):\n    i = 1\n    order = True\n    while i < len(s) and s[i] == s[i - 1]:\n        i += 1\n    if i >= len(s):\n        i -= 1\n    if s[i] > s[0]:\n        order = True\n    else:\n        order = False\n    return order\n\ndef reduceCounter(c1, c2, s):\n    order = getOrder(s)\n    d = dict()\n    for char in c1:\n        d[char] = c2[char] - c1[char]\n    for char in c2:\n        if char not in c1:\n            d[char] = c2[char]\n    first = s[0]\n    ret = ''\n    chars = sorted(list(d.keys()))\n    char_index = 0\n    len_char_index = len(chars)\n    if order:\n        while char_index < len_char_index and ord(chars[char_index]) <= ord(first):\n            ret += chars[char_index] * d[chars[char_index]]\n            char_index += 1\n        ret += ''.join(s)\n        while char_index < len_char_index:\n            ret += chars[char_index] * d[chars[char_index]]\n            char_index += 1\n        return ret\n    else:\n        while char_index < len_char_index and ord(chars[char_index]) < ord(first):\n            ret += chars[char_index] * d[chars[char_index]]\n            char_index += 1\n        ret += ''.join(s)\n        while char_index < len_char_index:\n            ret += chars[char_index] * d[chars[char_index]]\n            char_index += 1\n        return ret\nfor _ in range(int(input())):\n    s1 = list(input())\n    s2 = list(input())\n    c1 = Counter(s1)\n    c2 = Counter(s2)\n    if compareCounter(c1, c2):\n        print(reduceCounter(c1, c2, s1))\n    else:\n        print('Impossible')", "t = int(input(''))\nfor v in range(t):\n    s = input('')\n    r = input('')\n    if len(r) < len(s):\n        print('Impossible')\n        continue\n    ds = {}\n    dr = {}\n    ls = len(s)\n    lr = len(r)\n    for i in range(lr):\n        if i < ls:\n            if s[i] not in ds:\n                ds[s[i]] = 0\n            ds[s[i]] = ds[s[i]] + 1\n        if r[i] not in dr:\n            dr[r[i]] = 0\n        dr[r[i]] = dr[r[i]] + 1\n    res = True\n    for k in ds:\n        if k not in dr:\n            res = False\n            break\n        elif dr[k] < ds[k]:\n            res = False\n            break\n        else:\n            dr[k] = dr[k] - ds[k]\n    if not res:\n        print('Impossible')\n        continue\n    al = []\n    for i in range(97, 123, 1):\n        c = chr(i)\n        al.append(c)\n    fr = s[0]\n    ans = ''\n    for c in al:\n        if c in dr:\n            if c != s[0]:\n                ans = ans + c * dr[c]\n            else:\n                o1 = c * dr[c] + s\n                o2 = s + c * dr[c]\n                if o1 < o2:\n                    ans = ans + o1\n                else:\n                    ans = ans + o2\n    print(ans)"]