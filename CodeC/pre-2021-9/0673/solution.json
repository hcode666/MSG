["for test in range(int(input())):\n    (n, x) = map(int, input().split())\n    nlist = list(map(int, input().split()))\n    d = {}\n    ans1 = ans2 = 0\n    for i in nlist:\n        d[i] = d.get(i, 0) + 1\n        ans1 = max(ans1, d[i])\n    for i in d:\n        curr = i ^ x\n        if curr == i:\n            continue\n        if d.get(curr, 0) + d[i] > ans1:\n            ans1 = d.get(curr, 0) + d[i]\n            ans2 = d[i]\n        elif d.get(curr, 0) + d[i] == ans1:\n            ans2 = min(ans2, d[i])\n    print(ans1, ans2)", "for test in range(int(input())):\n    (n, x) = map(int, input().split())\n    nlist = list(map(int, input().split()))\n    d = {}\n    ans1 = ans2 = 0\n    for i in nlist:\n        d[i] = d.get(i, 0) + 1\n        ans1 = max(ans1, d[i])\n    for i in d:\n        curr = i ^ x\n        if curr == i:\n            continue\n        if d.get(curr, 0) + d[i] > ans1:\n            ans1 = d.get(curr, 0) + d[i]\n            ans2 = d[i]\n        elif d.get(curr, 0) + d[i] == ans1:\n            ans2 = min(ans2, d[i])\n    print(ans1, ans2)", "for test in range(int(input())):\n    (n, x) = map(int, input().split())\n    nlist = list(map(int, input().split()))\n    d = {}\n    ans1 = ans2 = 0\n    for i in nlist:\n        d[i] = d.get(i, 0) + 1\n        ans1 = max(ans1, d[i])\n    for i in d:\n        curr = i ^ x\n        if curr == i:\n            continue\n        if d.get(curr, 0) + d[i] > ans1:\n            ans1 = d.get(curr, 0) + d[i]\n            ans2 = d[i]\n        elif d.get(curr, 0) + d[i] == ans1:\n            ans2 = min(ans2, d[i])\n    print(ans1, ans2)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ac = Counter(a)\n    maxe = 1\n    mino = 0\n    for c in ac:\n        d = c ^ x\n        if d in ac and d != c:\n            mc = ac[c] + ac[d]\n            mo = min(ac[c], ac[d])\n        else:\n            mc = ac[c]\n            mo = 0\n        if mc > maxe or (mc == maxe and mo < mino):\n            maxe = mc\n            mino = mo\n    print('{} {}'.format(maxe, mino))", "for t in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = dict()\n    for i in a:\n        if i not in d:\n            d[i] = 0\n        d[i] += 1\n    e = dict()\n    for i in a:\n        if i ^ x not in e:\n            e[i ^ x] = 0\n        e[i ^ x] += 1\n    ans = [0, 1000000000]\n    if x == 0:\n        print(max(d.values()), 0)\n        continue\n    for i in d:\n        temp = [d.get(i, 0) + e.get(i, 0), e.get(i, 0)]\n        if ans[0] < temp[0]:\n            ans = temp\n        elif ans[0] == temp[0]:\n            ans = min(ans, temp)\n    print(*ans)", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    ctr = defaultdict(lambda : 0)\n    mp = defaultdict(lambda : 0)\n    (p, q) = (1, 0)\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for x in a:\n        ctr[x] += 1\n    for x in a:\n        if m != 0:\n            mp[x ^ m] += 1\n    for x in a:\n        if mp[x] + ctr[x] > p:\n            p = mp[x] + ctr[x]\n            q = mp[x]\n        if mp[x] + ctr[x] == p:\n            q = min(q, mp[x])\n    print(p, q)", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    ctr = defaultdict(lambda : 0)\n    mp = defaultdict(lambda : 0)\n    (p, q) = (1, 0)\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for x in a:\n        ctr[x] += 1\n    for x in a:\n        if m != 0:\n            mp[x ^ m] += 1\n    for x in a:\n        if mp[x] + ctr[x] > p:\n            p = mp[x] + ctr[x]\n            q = mp[x]\n        if mp[x] + ctr[x] == p:\n            q = min(q, mp[x])\n    print(p, q)", "King = int(input())\nfor i in range(King):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "King = int(input())\nfor i in range(King):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "import collections\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = dict(collections.Counter(l))\n    (m, opr) = (max(d.values()), 0)\n    if x != 0:\n        for i in l:\n            cnt = d[i] + d.get(i ^ x, 0)\n            if cnt > m:\n                m = cnt\n                opr = d[i]\n            elif cnt == m:\n                opr = min(opr, d[i])\n    print(m, opr)", "cases = int(input())\nfor i in range(cases):\n    (N, X) = map(int, input().split(' '))\n    li = list(map(int, input().split(' ')))\n    dic = {}\n    maxval = 0\n    for j in li:\n        if j not in dic:\n            dic[j] = 1\n        else:\n            dic[j] += 1\n        maxval = max(maxval, dic[j])\n    op = 0\n    for (key, val) in dic.items():\n        cnt = val\n        if key ^ X in dic:\n            if X != 0:\n                cnt += dic[key ^ X]\n            req = dic[key ^ X]\n        else:\n            req = 0\n        if cnt > maxval:\n            maxval = cnt\n            op = req\n        elif cnt == maxval:\n            op = min(op, req)\n    print(maxval, op)", "import numpy as np\nfrom collections import Counter\nfor _ in range(int(input())):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "Surya = int(input())\nfor i in range(Surya):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "Surya = int(input())\nfor i in range(Surya):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "from collections import defaultdict\nfor _ in range(int(input())):\n    ctr = defaultdict(lambda : 0)\n    mp = defaultdict(lambda : 0)\n    (p, q) = (1, 0)\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for x in a:\n        ctr[x] += 1\n    for x in a:\n        if m != 0:\n            mp[x ^ m] += 1\n    for x in a:\n        if mp[x] + ctr[x] > p:\n            p = mp[x] + ctr[x]\n            q = mp[x]\n        if mp[x] + ctr[x] == p:\n            q = min(q, mp[x])\n    print(p, q)", "t = int(input().strip())\nwhile t > 0:\n    t -= 1\n    (n, x) = map(int, input().strip().split())\n    arr = list(map(int, input().strip().split()))\n    d1 = {}\n    mx = 0\n    for i in arr:\n        d1.setdefault(i, 0)\n        d1[i] += 1\n        mx = max(mx, d1[i])\n    ops = 0\n    for i in arr:\n        xor = i ^ x\n        d1.setdefault(xor, 0)\n        f = d1[i]\n        if x != 0:\n            f += d1[xor]\n        if mx < f:\n            mx = f\n            ops = d1[xor]\n        elif mx == f:\n            ops = min(ops, d1[xor])\n    print(mx, ops)", "Surya = int(input())\nfor i in range(Surya):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "Surya = int(input())\nfor i in range(Surya):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    ctr = defaultdict(lambda : 0)\n    mp = defaultdict(lambda : 0)\n    (p, q) = (1, 0)\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for x in a:\n        ctr[x] += 1\n    for x in a:\n        if m != 0:\n            mp[x ^ m] += 1\n    for x in a:\n        if mp[x] + ctr[x] > p:\n            p = mp[x] + ctr[x]\n            q = mp[x]\n        if mp[x] + ctr[x] == p:\n            q = min(q, mp[x])\n    print(p, q)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {}\n    d2 = {}\n    c = []\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n        if i ^ x in d and x != 0:\n            c.append(i)\n            if i in d2:\n                d2[i] += 1\n            else:\n                d2[i] = 1\n    noc = -10000000000\n    yesc = -10000000000\n    count = 0\n    for i in c:\n        if yesc < d[i ^ x] + d[i]:\n            yesc = d[i ^ x] + d[i]\n            count = min(d[i ^ x], d[i])\n        elif yesc == d[i ^ x] + d[i]:\n            count = min(count, d[i ^ x], d[i])\n    for i in d:\n        noc = max(noc, d[i])\n    if yesc <= noc:\n        count = 0\n    ans = max(noc, yesc)\n    print(ans, count)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {}\n    d2 = {}\n    c = []\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n        if i ^ x in d and x != 0:\n            c.append(i)\n            if i in d2:\n                d2[i] += 1\n            else:\n                d2[i] = 1\n    noc = -10000000000\n    yesc = -10000000000\n    count = 0\n    for i in c:\n        if yesc < d[i ^ x] + d[i]:\n            yesc = d[i ^ x] + d[i]\n            count = min(d[i ^ x], d[i])\n        elif yesc == d[i ^ x] + d[i]:\n            count = min(count, d[i ^ x], d[i])\n    for i in d:\n        noc = max(noc, d[i])\n    if yesc <= noc:\n        count = 0\n    ans = max(noc, yesc)\n    print(ans, count)", "Surya = int(input())\nfor i in range(Surya):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "from collections import defaultdict\nimport os\nfor _ in range(int(input())):\n    (n, v) = list(map(int, input().split(' ')))\n    m = {}\n    m = defaultdict(lambda : 0, m)\n    is_present = {}\n    is_present = defaultdict(lambda : 0, is_present)\n    l = list(map(int, input().split(' ')))\n    result = 1\n    changes = 0\n    for q in l:\n        m[q] += 1\n    for q in l:\n        if v != 0:\n            is_present[q ^ v] += 1\n    for q in l:\n        if is_present[q] + m[q] > result:\n            result = m[q] + is_present[q]\n            changes = is_present[q]\n        if is_present[q] + m[q] == result:\n            changes = min(changes, is_present[q])\n    print(result, changes)", "from collections import defaultdict\n\ndef readInt():\n    return int(input())\n\ndef readInts():\n    return [int(x) for x in input().split()]\n\ndef readString():\n    return input().rstrip()\n\ndef readStrings():\n    return input().split()\n\ndef readCase():\n    (n, x) = readInts()\n    nums = readInts()\n    return (n, x, nums)\n\ndef solve(n, x, nums):\n    (results, results_ops) = (defaultdict(int), defaultdict(int))\n    best = 0\n    best_ops = 0\n    for m in nums:\n        results[m] += 1\n        if x != 0:\n            m2 = m ^ x\n            results[m2] += 1\n            results_ops[m2] += 1\n        else:\n            m2 = m\n        for y in (m, m2):\n            if results[y] > best:\n                best = results[y]\n                best_ops = results_ops[y]\n            elif results[y] == best:\n                best_ops = min(best_ops, results_ops[y])\n    return f'{best} {best_ops}'\ncases = readInt()\nfor case in range(cases):\n    print(solve(*readCase()))", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    dic = {}\n    for i in arr:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    a = max(list(dic.values()))\n    b = 0\n    if k != 0:\n        for i in list(dic.keys()):\n            if i ^ k in dic:\n                if dic[i] + dic[i ^ k] > a:\n                    a = dic[i] + dic[i ^ k]\n                    b = dic[i ^ k]\n                elif dic[i] + dic[i ^ k] == a and dic[i ^ k] < b:\n                    b = dic[i ^ k]\n    print(a, b)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    dic = {}\n    for i in arr:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    a = max(list(dic.values()))\n    b = 0\n    if k != 0:\n        for i in list(dic.keys()):\n            if i ^ k in dic:\n                if dic[i] + dic[i ^ k] > a:\n                    a = dic[i] + dic[i ^ k]\n                    b = dic[i ^ k]\n                elif dic[i] + dic[i ^ k] == a and dic[i ^ k] < b:\n                    b = dic[i ^ k]\n    print(a, b)", "T_T = int(input())\nfor i_i in range(T_T):\n    (n_n, x_x) = map(int, input().split())\n    d_d = {}\n    a_a = list(map(int, input().split()))\n    for i_i in a_a:\n        d_d[i_i] = d_d.get(i_i, 0) + 1\n    e_e = o_o = 0\n    for i_i in a_a:\n        nrml_nrml = d_d.get(i_i, 0)\n        xor_xor = d_d.get(i_i ^ x_x, 0)\n        ans_ans = nrml_nrml + xor_xor\n        if i_i != i_i ^ x_x:\n            if e_e < ans_ans:\n                e_e = ans_ans\n                o_o = xor_xor\n            elif e_e == ans_ans and o_o > xor_xor:\n                e_e = ans_ans\n                o_o = xor_xor\n        elif e_e < nrml_nrml:\n            e_e = nrml_nrml\n            o_o = 0\n    print(e_e, o_o)", "Surya = int(input())\nfor i in range(Surya):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "Surya = int(input())\nfor i in range(Surya):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "import math\nimport sys\n\ndef main():\n    t = int(input())\n    for z in range(t):\n        a_counter = {}\n        op_counter = {}\n        result = 1\n        data = input().split(' ')\n        n = int(data[0])\n        x = int(data[1])\n        data = input().split(' ')\n        a = [0] * n\n        op_cnt = n + 1\n        for i in range(n):\n            val = int(data[i])\n            a[i] = val\n            a_total_cnt = a_counter.get(a[i])\n            if a_total_cnt is None:\n                xor = a[i] ^ x\n                a_total_cnt = a_counter.get(xor)\n                if a_total_cnt is not None:\n                    a_total_cnt = a_total_cnt + 1\n                    a_counter[xor] = a_total_cnt\n                    if result <= a_total_cnt:\n                        result = a_total_cnt\n                    op_cnt = op_counter.get(xor)\n                    if op_cnt is None:\n                        op_cnt = 0\n                    op_cnt = op_cnt + 1\n                    op_counter[xor] = op_cnt\n                else:\n                    a_counter[a[i]] = 1\n            else:\n                a_total_cnt = a_total_cnt + 1\n                a_counter[a[i]] = a_total_cnt\n                if result < a_total_cnt:\n                    result = a_total_cnt\n        if len(op_counter) == 0:\n            print(result, 0)\n            continue\n        op_cnt = n + 1\n        for key in a_counter.keys():\n            if result == a_counter.get(key):\n                if op_counter.get(key) is not None:\n                    if op_counter.get(key) <= result - op_counter.get(key):\n                        if op_counter.get(key) < op_cnt:\n                            op_cnt = op_counter.get(key)\n                    elif result - op_counter.get(key) < op_cnt:\n                        op_cnt = result - op_counter.get(key)\n                else:\n                    op_cnt = 0\n                    break\n        print(result, op_cnt)\nmain()", "def main():\n    T = int(input())\n    a_cnt = dict()\n    op_cnt = dict()\n    while T > 0:\n        T -= 1\n        (N, X) = map(int, input().split())\n        a_cnt.clear()\n        op_cnt.clear()\n        result = 1\n        for a in map(int, input().split()):\n            if a in a_cnt:\n                a_cnt[a] += 1\n                if a_cnt[a] > result:\n                    result = a_cnt[a]\n            else:\n                xora = a ^ X\n                if xora not in a_cnt:\n                    a_cnt[a] = 1\n                else:\n                    a_cnt[xora] += 1\n                    if xora in op_cnt:\n                        op_cnt[xora] += 1\n                    else:\n                        op_cnt[xora] = 1\n                    if a_cnt[xora] > result:\n                        result = a_cnt[xora]\n        minop = N\n        for (val, cnt) in a_cnt.items():\n            if cnt == result:\n                if val not in op_cnt:\n                    minop = 0\n                    break\n                op = op_cnt[val]\n                if op > cnt - op:\n                    op = cnt - op\n                if op < minop:\n                    minop = op\n        print(f'{result} {minop}')\nmain()", "from sys import stdin\ninp = stdin.readline\nfrom collections import Counter\n\ndef main():\n    T = int(inp())\n    a_cnt = Counter()\n    op_cnt = Counter()\n    while T > 0:\n        T -= 1\n        (N, X) = map(int, inp().split())\n        a_cnt.clear()\n        op_cnt.clear()\n        result = 1\n        for a in map(int, inp().split()):\n            if a_cnt[a] > 0:\n                a_cnt[a] += 1\n                if a_cnt[a] > result:\n                    result = a_cnt[a]\n            else:\n                xora = a ^ X\n                if a_cnt[xora] == 0:\n                    a_cnt[a] = 1\n                else:\n                    a_cnt[xora] += 1\n                    op_cnt[xora] += 1\n                    if a_cnt[xora] > result:\n                        result = a_cnt[xora]\n        minop = N\n        for (val, cnt) in a_cnt.items():\n            if cnt == result:\n                op = op_cnt[val]\n                if op == 0:\n                    minop = 0\n                    break\n                if op > cnt - op:\n                    op = cnt - op\n                if op < minop:\n                    minop = op\n        print(f'{result} {minop}')\nmain()", "from sys import stdin\ninp = stdin.readline\nfrom collections import Counter\nfrom operator import itemgetter\nk1 = itemgetter(1)\n\ndef maxxor():\n    (N, X) = map(int, inp().split())\n    val_fq = Counter(map(int, inp().split()))\n    if X == 0:\n        (_, maxct) = val_fq.most_common(1)[0]\n        return f'{maxct} 0'\n    maxct = 0\n    minop = N\n    for (v, f) in sorted(val_fq.items(), key=k1, reverse=True):\n        xf = val_fq[v ^ X]\n        tot = f + xf\n        if tot > maxct:\n            maxct = tot\n            minop = xf\n        elif f * 2 <= maxct:\n            break\n    return f'{maxct} {minop}'\nT = int(inp())\nprint(*(maxxor() for tx in range(T)), sep='\\n')", "from collections import defaultdict\nfor _ in range(int(input())):\n    t = defaultdict(lambda : 0)\n    mp = defaultdict(lambda : 0)\n    (p, q) = (1, 0)\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for x in a:\n        t[x] += 1\n    for x in a:\n        if m != 0:\n            mp[x ^ m] += 1\n    for x in a:\n        if mp[x] + t[x] > p:\n            p = mp[x] + t[x]\n            q = mp[x]\n        if mp[x] + t[x] == p:\n            q = min(q, mp[x])\n    print(p, q)", "from collections import defaultdict\ntry:\n    t = int(input())\n    for _ in range(t):\n        (n, x) = map(int, input().split())\n        a = [int(x) for x in input().split()]\n        results = defaultdict(int)\n        actual = defaultdict(int)\n        for val in a:\n            results[val] += 1\n            actual[val] += 1\n            if val ^ x != val:\n                results[val ^ x] += 1\n        (count, operations) = (0, 0)\n        for (num, cnt) in results.items():\n            if cnt > count:\n                count = cnt\n                operations = cnt - actual[num]\n            elif cnt == count:\n                operations = min(operations, cnt - actual[num])\n        print(count, operations)\nexcept:\n    pass", "Surya = int(input())\nfor i in range(Surya):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "Surya = int(input())\nfor i in range(Surya):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = defaultdict(int)\n    if b == 0:\n        for i in l:\n            d[i] += 1\n        x = -1\n        for (i, j) in d.items():\n            x = max(x, j)\n        print(x, 0)\n    else:\n        for i in l:\n            d[i] += 1\n            d[i ^ b] += 1\n        x = -1\n        for (i, j) in d.items():\n            x = max(x, j)\n        l1 = []\n        for (i, j) in d.items():\n            if x == j:\n                l1.append(i)\n        y = 1000000000\n        for i in l1:\n            y = min(y, x - l.count(i))\n        print(x, y)", "def main():\n    for _ in range(int(input())):\n        (n, x) = map(int, input().split())\n        arr = list(map(int, input().split()))\n        (d1, d2) = ({}, {})\n        for i in arr:\n            d1[i] = d1.get(i, 0) + 1\n            d2[i] = 1\n        if n == 1:\n            print(1, 0)\n            continue\n        (ans, step) = (0, 0)\n        for i in d1:\n            if d1[i] == n:\n                ans = n\n                break\n            if d1[i] > ans:\n                ans = d1[i]\n        if x == 0:\n            print(ans, step)\n            continue\n        for i in d2:\n            t = i ^ x\n            if d2.get(t, 0) == 1:\n                if d1[i] + d1[t] > ans:\n                    ans = d1[t] + d1[i]\n                    step = min(d1[i], d1[t])\n                elif d1[i] + d1[t] == ans:\n                    step = min(step, d1[i], d1[t])\n        print(ans, step)\nmain()", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    mydict = {}\n    for i in lst:\n        if i in mydict:\n            mydict[i] += 1\n        else:\n            mydict[i] = 1\n    dict2 = {}\n    for j in lst:\n        xor = j ^ x\n        if xor in dict2:\n            dict2[xor] += 1\n        else:\n            dict2[xor] = 1\n    max_value = max(mydict.values())\n    oper = 0\n    if x != 0:\n        for a in dict2:\n            if a in mydict:\n                value = dict2[a] + mydict[a]\n                if value > max_value:\n                    oper = dict2[a]\n                    max_value = value\n                elif value == max_value:\n                    oper = min(oper, dict2[a])\n                else:\n                    pass\n    print(max_value, oper)", "def sol():\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    li = {}\n    ma = 1\n    i = a.pop(0)\n    mai = i\n    li[i] = [1, 1, 0]\n    for i in a:\n        h = i ^ x\n        if i in li:\n            li[i][0] += 1\n            li[i][1] += 1\n            if li[i][0] > ma:\n                ma = li[i][0]\n                mai = i\n            elif li[i][0] == ma and min(li[i][1], li[i][2]) < min(li[mai][1], li[mai][2]):\n                ma = li[i][0]\n                mai = i\n        elif h in li:\n            li[h][0] += 1\n            li[h][2] += 1\n            if li[h][0] > ma:\n                ma = li[h][0]\n                mai = h\n            elif li[h][0] == ma and min(li[h][1], li[h][2]) < min(li[mai][1], li[mai][2]):\n                ma = li[h][0]\n                mai = h\n        else:\n            li[i] = [1, 1, 0]\n    print(li[mai][0], min(li[mai][1], li[mai][2]))\nt = int(input())\nfor i in range(t):\n    sol()", "for i in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    (d1, d2, max, min) = (dict(), dict(), 0, 0)\n    for i in l:\n        if i in d1:\n            d1[i] += 1\n        else:\n            d1[i] = 1\n        d2[i] = 0\n    for i in l:\n        if i ^ x != i:\n            if i ^ x in d2:\n                d2[i ^ x] += 1\n            else:\n                d2[i ^ x] = 1\n            if i ^ x in d1:\n                d1[i ^ x] += 1\n            else:\n                d1[i ^ x] = 1\n    for i in l:\n        if d1[i] >= max:\n            if d1[i] == max and d2[i] > min:\n                continue\n            max = d1[i]\n            if i in d2:\n                min = d2[i]\n            else:\n                min = 0\n    print(max, min)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor you in range(t):\n    l = input().split()\n    n = int(l[0])\n    x = int(l[1])\n    l = input().split()\n    li = [int(i) for i in l]\n    hashi = dict()\n    cnt = dict()\n    for i in li:\n        if i not in hashi:\n            hashi[i] = 0\n        hashi[i] += 1\n        if i ^ x not in hashi:\n            hashi[i ^ x] = 0\n        if i ^ x not in cnt:\n            cnt[i ^ x] = 0\n        hashi[i ^ x] += 1\n        cnt[i ^ x] += 1\n    maxa = 0\n    req = 0\n    for i in hashi:\n        z = 0\n        if i in cnt:\n            z = cnt[i]\n        if hashi[i] > maxa:\n            maxa = hashi[i]\n            req = z\n        elif hashi[i] == maxa and z < req:\n            req = z\n    if x == 0:\n        print(maxa // 2, 0)\n    else:\n        print(maxa, req)", "from sys import stdin\ninp = stdin.readline\nfrom collections import Counter\n\ndef maxxor():\n    (N, X) = map(int, inp().split())\n    val_fq = Counter(map(int, inp().split()))\n    (_, maxct) = val_fq.most_common(1)[0]\n    minop = 0\n    if X > 0:\n        for (f, v) in sorted(((f, v) for (v, f) in val_fq.items() if f > maxct // 2), reverse=True):\n            xf = val_fq[v ^ X]\n            tot = f + xf\n            if tot > maxct:\n                maxct = tot\n                minop = xf\n            elif tot == maxct and xf < minop:\n                minop = xf\n            elif f * 2 <= maxct:\n                break\n    return f'{maxct} {minop}'\nT = int(inp())\nprint(*(maxxor() for tx in range(T)), sep='\\n')", "from sys import stdin\ninp = stdin.readline\nfrom collections import Counter\nfrom operator import itemgetter\nk1 = itemgetter(1)\n\ndef maxxor():\n    (N, X) = map(int, inp().split())\n    val_fq = Counter(map(int, inp().split()))\n    if X == 0:\n        (_, maxct) = val_fq.most_common(1)[0]\n        return f'{maxct} 0'\n    maxct = 0\n    minop = N\n    for (v, f) in sorted(val_fq.items(), key=k1, reverse=True):\n        xf = val_fq[v ^ X]\n        tot = f + xf\n        if tot > maxct:\n            maxct = tot\n            minop = xf\n        elif tot == maxct and xf < minop:\n            minop = xf\n        elif f * 2 <= maxct:\n            break\n    return f'{maxct} {minop}'\nT = int(inp())\nprint(*(maxxor() for tx in range(T)), sep='\\n')", "from sys import stdin\ninp = stdin.readline\nfrom collections import Counter\nfrom operator import itemgetter\nk1 = itemgetter(1)\n\ndef maxxor():\n    (N, X) = map(int, inp().split())\n    val_fq = Counter(map(int, inp().split()))\n    if X == 0:\n        (_, maxct) = val_fq.most_common(1)[0]\n        return f'{maxct} 0'\n    maxct = 0\n    minop = N\n    for (v, f) in sorted(val_fq.items(), key=k1, reverse=True):\n        xf = val_fq[v ^ X]\n        tot = f + xf\n        if tot > maxct:\n            maxct = tot\n            minop = xf\n        elif tot == maxct and xf < minop:\n            minop = xf\n        elif f * 2 < maxct:\n            break\n    return f'{maxct} {minop}'\nT = int(inp())\nprint(*(maxxor() for tx in range(T)), sep='\\n')", "from collections import *\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = [*map(int, input().split())]\n    dic = Counter(l)\n    ans = 0\n    for i in dic:\n        ans = max(ans, dic[i])\n    operations = 0\n    for i in dic:\n        if i ^ x != i and i ^ x in dic:\n            if ans <= dic[i] + dic[i ^ x]:\n                if ans == dic[i] + dic[i ^ x]:\n                    operations = min(operations, dic[i])\n                else:\n                    ans = dic[i] + dic[i ^ x]\n                    operations = dic[i]\n    print(ans, operations)", "from collections import *\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = [*map(int, input().split())]\n    dic = Counter(l)\n    ans = 0\n    for i in dic:\n        ans = max(ans, dic[i])\n    operations = 0\n    for i in dic:\n        if i ^ x != i and i ^ x in dic:\n            if ans <= dic[i] + dic[i ^ x]:\n                if ans == dic[i] + dic[i ^ x]:\n                    operations = min(operations, dic[i ^ x])\n                else:\n                    ans = dic[i] + dic[i ^ x]\n                    operations = dic[i ^ x]\n    print(ans, operations)", "from collections import defaultdict\nfor k in range(int(input())):\n    a = defaultdict(lambda : 0)\n    b = defaultdict(lambda : 0)\n    (c, c1) = (1, 0)\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().strip().split()))\n    for i in arr:\n        a[i] += 1\n    for i in arr:\n        if m != 0:\n            b[i ^ m] += 1\n    for i in arr:\n        if b[i] + a[i] > c:\n            c = b[i] + a[i]\n            c1 = b[i]\n        if b[i] + a[i] == c:\n            c1 = min(c1, b[i])\n    print(c, c1)", "T = int(input())\nfor _ in range(T):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    frequency = dict()\n    xor_frequency = dict()\n    counter = {}\n    operation = {}\n    for val in a:\n        counter[val] = counter[val] + 1 if counter.get(val) else 1\n        operation[val] = 0\n    for val in a:\n        if x != 0:\n            xor = val ^ x\n            counter[xor] = counter[xor] + 1 if counter.get(xor) else 1\n            operation[xor] = operation[xor] + 1 if operation.get(xor) else 1\n    max_val = 0\n    min_val = 1e+18\n    check = list()\n    for (key, val) in counter.items():\n        if val > max_val:\n            max_val = val\n            check = list()\n            check.append(key)\n        elif val == max_val:\n            check.append(key)\n    for item in check:\n        min_val = min(min_val, operation[item])\n    print('{} {}'.format(max_val, min_val))", "for i in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = {}\n    mx = 0\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    mx = max(d, key=lambda x: d[x])\n    opr = 0\n    val = d[mx]\n    d_key = d.keys()\n    if x == 0:\n        print(val, opr)\n        continue\n    for i in d_key:\n        v = i ^ x\n        if v in d_key:\n            t_mx = d[v] + d[i]\n            if t_mx > val:\n                val = t_mx\n                opr = d[v]\n            elif t_mx == val:\n                opr = min(opr, d[v])\n    print(val, opr)", "from collections import defaultdict\nfor j in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = defaultdict(lambda : None)\n    for i in range(n):\n        if d[l[i]] == None:\n            d[l[i]] = 0\n        d[l[i]] += 1\n    mx = max(d, key=lambda x: d[x])\n    mx_v = d[mx]\n    opr = 0\n    if x == 0:\n        print(mx_v, opr)\n        continue\n    for i in list(set(l)):\n        xr = i ^ x\n        cr = d[i]\n        if xr in d:\n            if mx_v < cr + d[xr]:\n                mx_v = cr + d[xr]\n                opr = d[xr]\n            elif mx_v == cr + d[xr]:\n                opr = min(opr, d[xr])\n    print(mx_v, opr)", "from collections import defaultdict\nt = int(input())\nfor z in range(t):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = defaultdict(lambda : None)\n    for i in range(n):\n        if d[a[i]] == None:\n            d[a[i]] = 0\n        d[a[i]] += 1\n    mx = max(d, key=lambda x: d[x])\n    val = d[mx]\n    step = 0\n    if x == 0:\n        print(val, step)\n        continue\n    for i in list(set(a)):\n        temp = i ^ x\n        curr = d[i]\n        if d[temp] != None:\n            if val < curr + d[temp]:\n                val = curr + d[temp]\n                step = d[temp]\n            elif val == curr + d[temp]:\n                step = min(step, d[temp])\n    print(val, step)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    max_count = 1\n    data = defaultdict(int)\n    for value in input().split():\n        data[int(value)] += 1\n        if data[int(value)] > max_count:\n            max_count = data[int(value)]\n    min_operation = 0\n    for (key, value) in data.items():\n        updated_value = value\n        if x != 0:\n            xor_key = key ^ x\n            if xor_key in data:\n                current_operation = data[xor_key]\n            else:\n                current_operation = 0\n            updated_value += current_operation\n        if updated_value > max_count:\n            max_count = updated_value\n            min_operation = current_operation\n        elif updated_value == max_count:\n            min_operation = min(min_operation, current_operation)\n    print(f'{max_count} {min_operation}')", "Shanmu = int(input())\nfor i in range(Shanmu):\n    (num, x_1) = map(int, input().split())\n    d_1 = {}\n    a_1 = list(map(int, input().split()))\n    for i in a_1:\n        d_1[i] = d_1.get(i, 0) + 1\n    e_1 = o = 0\n    for i_1 in a_1:\n        nrml_1 = d_1.get(i_1, 0)\n        xor_1 = d_1.get(i_1 ^ x_1, 0)\n        ans_1 = nrml_1 + xor_1\n        if i_1 != i_1 ^ x_1:\n            if e_1 < ans_1:\n                e_1 = ans_1\n                o_1 = xor_1\n            elif e_1 == ans_1 and o_1 > xor_1:\n                e_1 = ans_1\n                o_1 = xor_1\n        elif e_1 < nrml_1:\n            e_1 = nrml_1\n            o_1 = 0\n    print(e_1, o_1)", "John = int(input())\nfor i in range(John):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    rec = {}\n    xorDict = {}\n    for i in range(n):\n        if xorDict.get(arr[i] ^ x) != None:\n            xorDict[arr[i] ^ x] += 1\n        else:\n            xorDict[arr[i] ^ x] = 1\n        if rec.get(arr[i]) != None:\n            rec[arr[i]] += 1\n        else:\n            rec[arr[i]] = 1\n    mxEq = steps = 0\n    for key in rec:\n        if xorDict.get(key) != None:\n            if xorDict[key] + rec[key] > mxEq or (xorDict[key] + rec[key] == mxEq and steps > xorDict[key]):\n                mxEq = xorDict[key] + rec[key]\n                steps = xorDict[key]\n        if rec[key] >= mxEq:\n            mxEq = rec[key]\n            steps = 0\n    if not x:\n        mxEq = 0\n        for i in rec:\n            mxEq = max(mxEq, rec[i])\n        steps = 0\n    print(mxEq, steps)", "import sys\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    my_map = {}\n    ll = list(map(int, input().split()))\n    for tmp in ll:\n        my_map[tmp] = my_map.get(tmp, 0) + 1\n    e = o = 0\n    for i in ll:\n        nrml = my_map.get(i)\n        xorred = my_map.get(i ^ x, 0)\n        ans = nrml + xorred\n        if x != 0:\n            if e < ans:\n                e = ans\n                o = xorred\n            elif e == ans and o > xorred:\n                o = xorred\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "import sys\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    my_map = {}\n    ll = list(map(int, input().split()))\n    for tmp in ll:\n        my_map[tmp] = my_map.get(tmp, 0) + 1\n    e = o = 0\n    for i in ll:\n        nrml = my_map.get(i, 0)\n        xorred = my_map.get(i ^ x, 0)\n        ans = nrml + xorred\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xorred\n            elif e == ans and o > xorred:\n                o = xorred\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "import sys\nt = int(input())\nfor _ in range(t):\n    (n, xor) = map(int, input().split())\n    d = {}\n    l = [int(x) for x in input().split()]\n    for x in l:\n        if x in d:\n            d[x][0] += 1\n        else:\n            d[x] = [1, 0]\n        if xor != 0:\n            if x ^ xor in d:\n                d[x ^ xor][0] += 1\n                d[x ^ xor][1] += 1\n            else:\n                d[x ^ xor] = [1, 1]\n    (minOp, maxCount) = (sys.maxsize, -sys.maxsize)\n    for key in d:\n        if d[key][0] > maxCount:\n            maxCount = d[key][0]\n            minOp = d[key][1]\n        elif d[key][0] == maxCount:\n            minOp = min(minOp, d[key][1])\n    print(maxCount, minOp)", "Sindhu = int(input())\nfor i in range(Sindhu):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "for i in range(int(input())):\n    (n, x) = map(int, input().split())\n    d = {}\n    arr = [int(x) for x in input().split()]\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    a = b = 0\n    for i in arr:\n        ele = d.get(i, 0)\n        res = d.get(i ^ x, 0)\n        ans = ele + res\n        if i != i ^ x:\n            if a < ans:\n                a = ans\n                b = res\n            elif a == ans and b > res:\n                a = ans\n                b = res\n        elif a < ele:\n            a = ele\n            b = 0\n    print(a, b)", "for test in range(int(input())):\n    (N, X) = [int(i) for i in input().split()]\n    A = [int(i) for i in input().split()]\n    dic = dict()\n    for i in A:\n        if i in dic:\n            dic[i][0] += 1\n        else:\n            dic[i] = [1, 0]\n        res = i ^ X\n        if res == i:\n            continue\n        if res in dic:\n            dic[res][0] += 1\n            dic[res][1] += 1\n        else:\n            dic[res] = [1, 1]\n    count = 0\n    ops = 0\n    for i in dic:\n        if dic[i][0] > count:\n            count = dic[i][0]\n            ops = dic[i][1]\n        elif dic[i][0] == count:\n            if dic[i][1] < ops:\n                ops = dic[i][1]\n    print(count, ops)", "for test in range(int(input())):\n    (n, x) = [int(i) for i in input().split()]\n    A = [int(i) for i in input().split()]\n    dic = dict()\n    for i in A:\n        if i in dic:\n            dic[i][0] += 1\n        else:\n            dic[i] = [1, 0]\n        res = i ^ x\n        if res == i:\n            continue\n        if res in dic:\n            dic[res][0] += 1\n            dic[res][1] += 1\n        else:\n            dic[res] = [1, 1]\n    count = 0\n    ops = 0\n    for i in dic:\n        if dic[i][0] > count:\n            count = dic[i][0]\n            ops = dic[i][1]\n        elif dic[i][0] == count:\n            if dic[i][1] < ops:\n                ops = dic[i][1]\n    print(count, ops)", "for test in range(int(input())):\n    (N, X) = [int(i) for i in input().split()]\n    A = [int(i) for i in input().split()]\n    dic = dict()\n    for i in A:\n        if i in dic:\n            dic[i][0] += 1\n        else:\n            dic[i] = [1, 0]\n        res = i ^ X\n        if res == i:\n            continue\n        if res in dic:\n            dic[res][0] += 1\n            dic[res][1] += 1\n        else:\n            dic[res] = [1, 1]\n    count = 0\n    ops = 0\n    for i in dic:\n        if dic[i][0] > count:\n            count = dic[i][0]\n            ops = dic[i][1]\n        elif dic[i][0] == count:\n            if dic[i][1] < ops:\n                ops = dic[i][1]\n    print(count, ops)", "T_T = int(input())\nfor i_i in range(T_T):\n    (n_n, x_x) = map(int, input().split())\n    d_d = {}\n    a_a = list(map(int, input().split()))\n    for i_i in a_a:\n        d_d[i_i] = d_d.get(i_i, 0) + 1\n    e_e = o_o = 0\n    for i_i in a_a:\n        nrml_nrml = d_d.get(i_i, 0)\n        xor_xor = d_d.get(i_i ^ x_x, 0)\n        ans_ans = nrml_nrml + xor_xor\n        if i_i != i_i ^ x_x:\n            if e_e < ans_ans:\n                e_e = ans_ans\n                o_o = xor_xor\n            elif e_e == ans_ans and o_o > xor_xor:\n                e_e = ans_ans\n                o_o = xor_xor\n        elif e_e < nrml_nrml:\n            e_e = nrml_nrml\n            o_o = 0\n    print(e_e, o_o)", "Nandini = int(input())\nfor i in range(Nandini):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "t = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    freq = {}\n    for i in a:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    xor = {}\n    for i in freq:\n        num = i ^ x\n        if i in xor:\n            xor[i][0] += freq[i]\n        else:\n            xor[i] = [freq[i], 0]\n        if num != i:\n            if num in xor:\n                xor[num][0] += freq[i]\n                xor[num][1] += freq[i]\n            else:\n                xor[num] = [freq[i], freq[i]]\n    max_equal = 0\n    min_operations = n\n    for (_, i) in xor.items():\n        if i[0] > max_equal:\n            max_equal = i[0]\n            min_operations = i[1]\n        elif i[0] == max_equal:\n            min_operations = min(min_operations, i[1])\n    print(max_equal, min_operations)", "t = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    freq = {}\n    for i in a:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    xor = {}\n    for i in freq:\n        num = i ^ x\n        if i in xor:\n            xor[i][0] += freq[i]\n        else:\n            xor[i] = [freq[i], 0]\n        if num != i:\n            if num in xor:\n                xor[num][0] += freq[i]\n                xor[num][1] += freq[i]\n            else:\n                xor[num] = [freq[i], freq[i]]\n    max_equal = 0\n    min_operations = n\n    for (_, i) in xor.items():\n        if i[0] > max_equal:\n            max_equal = i[0]\n            min_operations = i[1]\n        elif i[0] == max_equal:\n            min_operations = min(min_operations, i[1])\n    print(max_equal, min_operations)", "t = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    freq = {}\n    for i in a:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    xor = {}\n    for i in freq:\n        num = i ^ x\n        if i in xor:\n            xor[i][0] += freq[i]\n        else:\n            xor[i] = [freq[i], 0]\n        if num != i:\n            if num in xor:\n                xor[num][0] += freq[i]\n                xor[num][1] += freq[i]\n            else:\n                xor[num] = [freq[i], freq[i]]\n    max_equal = 0\n    min_operations = n\n    for (_, i) in xor.items():\n        if i[0] > max_equal:\n            max_equal = i[0]\n            min_operations = i[1]\n        elif i[0] == max_equal:\n            min_operations = min(min_operations, i[1])\n    print(max_equal, min_operations)", "Nandini = int(input())\nfor i in range(Nandini):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "Surya = int(input())\nfor i in range(Surya):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "T_T = int(input())\nfor i_i in range(T_T):\n    (n_n, x_x) = map(int, input().split())\n    d_d = {}\n    a_a = list(map(int, input().split()))\n    for i_i in a_a:\n        d_d[i_i] = d_d.get(i_i, 0) + 1\n    e_e = o_o = 0\n    for i_i in a_a:\n        nrml_nrml = d_d.get(i_i, 0)\n        xor_xor = d_d.get(i_i ^ x_x, 0)\n        ans_ans = nrml_nrml + xor_xor\n        if i_i != i_i ^ x_x:\n            if e_e < ans_ans:\n                e_e = ans_ans\n                o_o = xor_xor\n            elif e_e == ans_ans and o_o > xor_xor:\n                e_e = ans_ans\n                o_o = xor_xor\n        elif e_e < nrml_nrml:\n            e_e = nrml_nrml\n            o_o = 0\n    print(e_e, o_o)", "from collections import defaultdict\nfor _ in range(int(input())):\n    ctr = defaultdict(lambda : 0)\n    mp = defaultdict(lambda : 0)\n    (p, q) = (1, 0)\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for x in a:\n        ctr[x] += 1\n    for x in a:\n        if m != 0:\n            mp[x ^ m] += 1\n    for x in a:\n        if mp[x] + ctr[x] > p:\n            p = mp[x] + ctr[x]\n            q = mp[x]\n        if mp[x] + ctr[x] == p:\n            q = min(q, mp[x])\n    print(p, q)", "from collections import defaultdict\nfor _ in range(int(input())):\n    a = defaultdict(lambda : 0)\n    b = defaultdict(lambda : 0)\n    (c, c1) = (1, 0)\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().strip().split()))\n    for i in arr:\n        a[i] += 1\n    for i in arr:\n        if m != 0:\n            b[i ^ m] += 1\n    for i in arr:\n        if b[i] + a[i] > c:\n            c = b[i] + a[i]\n            c1 = b[i]\n        if b[i] + a[i] == c:\n            c1 = min(c1, b[i])\n    print(c, c1)", "from collections import defaultdict\nfor _ in range(int(input())):\n    ctr = defaultdict(lambda : 0)\n    mp = defaultdict(lambda : 0)\n    (p, q) = (1, 0)\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    for x in a:\n        ctr[x] += 1\n    for x in a:\n        if m != 0:\n            mp[x ^ m] += 1\n    for x in a:\n        if mp[x] + ctr[x] > p:\n            p = mp[x] + ctr[x]\n            q = mp[x]\n        if mp[x] + ctr[x] == p:\n            q = min(q, mp[x])\n    print(p, q)", "b = int(input())\nfor i in range(b):\n    (nn, xx) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ xx, 0)\n        ans = nrml + xor\n        if i != i ^ xx:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "t = int(input())\nfor i in range(t):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "from collections import Counter\ntestcases = int(input())\nwhile testcases:\n    (N, X) = map(int, input().split())\n    A = [int(i) for i in input().split()]\n    occur = Counter(A)\n    (max_times_repeat, min_ops_req) = (occur.most_common(1)[0][1], 0)\n    if X == 0:\n        print(max_times_repeat, min_ops_req)\n        testcases -= 1\n        continue\n    xor_with_X = Counter()\n    for each in occur:\n        xor_with_X[each ^ X] = occur[each]\n    for key in occur:\n        if occur[key] + xor_with_X[key] > max_times_repeat:\n            max_times_repeat = occur[key] + xor_with_X[key]\n            min_ops_req = xor_with_X[key]\n        elif occur[key] + xor_with_X[key] == max_times_repeat:\n            min_ops_req = min(min_ops_req, xor_with_X[key])\n    print(max_times_repeat, min_ops_req)\n    testcases -= 1", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = defaultdict(lambda : 0)\n    x_d = defaultdict(lambda : 0)\n    (ans1, ans2) = (1, 0)\n    for item in a:\n        d[item] += 1\n    for i in a:\n        if x != 0:\n            x_d[i ^ x] += 1\n    for i in a:\n        if x_d[i] + d[i] > ans1:\n            ans1 = x_d[i] + d[i]\n            ans2 = x_d[i]\n        if x_d[i] + d[i] == ans1:\n            ans2 = min(ans2, x_d[i])\n    print(ans1, ans2)", "Surya = int(input())\nfor i in range(Surya):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "def main():\n    for _ in range(int(input())):\n        (n, x) = map(int, input().split())\n        arr = list(map(int, input().split()))\n        (d1, d2) = ({}, {})\n        for i in arr:\n            d1[i] = d1.get(i, 0) + 1\n            d2[i] = 1\n        if n == 1:\n            print(1, 0)\n            continue\n        (ans, step) = (0, 0)\n        for i in d1:\n            if d1[i] == n:\n                ans = n\n                break\n            if d1[i] > ans:\n                ans = d1[i]\n        if x == 0:\n            print(ans, step)\n            continue\n        for i in d2:\n            t = i ^ x\n            if d2.get(t, 0) == 1:\n                if d1[i] + d1[t] > ans:\n                    ans = d1[t] + d1[i]\n                    step = min(d1[i], d1[t])\n                elif d1[i] + d1[t] == ans:\n                    step = min(step, d1[i], d1[t])\n        print(ans, step)\nmain()", "Surya = int(input())\nfor i in range(Surya):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "from sys import stdin\ninp = stdin.readline\nfrom collections import Counter\n\ndef maxxor():\n    (N, X) = map(int, inp().split())\n    val_fq = Counter(map(int, inp().split()))\n    if X == 0:\n        (_, maxct) = val_fq.most_common(1)[0]\n        return f'{maxct} 0'\n    maxct = 0\n    minop = N\n    for (v, f) in val_fq.items():\n        xf = val_fq[v ^ X]\n        tot = f + xf\n        if tot > maxct:\n            maxct = tot\n            minop = xf\n        elif tot == maxct and xf < minop:\n            minop = xf\n    return f'{maxct} {minop}'\nT = int(inp())\nprint(*(maxxor() for tx in range(T)), sep='\\n')", "from collections import defaultdict\nfor _ in range(int(input())):\n    a = defaultdict(lambda : 0)\n    b = defaultdict(lambda : 0)\n    (x, y) = (1, 0)\n    (o, p) = map(int, input().split())\n    arr = list(map(int, input().strip().split()))\n    for i in arr:\n        a[i] += 1\n    for i in arr:\n        if p != 0:\n            b[i ^ p] += 1\n    for i in arr:\n        if b[i] + a[i] > x:\n            x = b[i] + a[i]\n            y = b[i]\n        if b[i] + a[i] == x:\n            y = min(y, b[i])\n    print(x, y)", "T = int(input())\nfor i in range(T):\n    d = dict()\n    l = list(map(int, input().split()))\n    x = l[1]\n    A = list(map(int, input().split()))\n    for j in range(len(A)):\n        if A[j] in d.keys():\n            d[A[j]] += 1\n        else:\n            d[A[j]] = 1\n    mx = 0\n    ops = 0\n    for j in d.keys():\n        if j ^ x in d.keys() and x != 0:\n            if d[j ^ x] + d[j] > mx:\n                mx = d[j ^ x] + d[j]\n                ops = d[j]\n            if d[j ^ x] + d[j] == mx:\n                ops = min(ops, d[j])\n        if d[j] >= mx:\n            mx = d[j]\n            ops = 0\n    print(mx, ops)", "tt = int(input())\nfor test in range(tt):\n    (n, x) = map(int, input().split())\n    aa = list(map(int, input().split()))\n    bb = {}\n    cc = {}\n    for i in range(n):\n        bb[aa[i]] = bb.get(aa[i], 0) + 1\n    if x != 0:\n        for j in range(n):\n            dd = aa[j] ^ x\n            cc[dd] = cc.get(dd, 0) + 1\n    maxMax = 0\n    op = n\n    for i in bb:\n        max = bb[i] + cc.get(i, 0)\n        if max >= maxMax:\n            if max == maxMax:\n                if cc.get(i, 0) < op:\n                    op = cc.get(i, 0)\n            else:\n                maxMax = max\n                op = cc.get(i, 0)\n    for i in cc:\n        if i in bb:\n            continue\n        max = cc[i]\n        if max >= maxMax:\n            if max == maxMax:\n                if cc.get(i, 0) < op:\n                    op = cc.get(i, 0)\n            else:\n                maxMax = max\n                op = cc.get(i, 0)\n    print(maxMax, op)", "for testcase in range(int(input())):\n    (N, X) = map(int, input().split())\n    values = list(map(int, input().split()))\n    maxOccurenceCounts = 0\n    valueCounts = {}\n    for value in values:\n        valueCounts[value] = valueCounts.get(value, 0) + 1\n        maxOccurenceCounts = max(maxOccurenceCounts, valueCounts[value])\n    if X == 0:\n        print(maxOccurenceCounts, 0)\n    else:\n        XORValueCounts = {}\n        minOperations = 0\n        for value in valueCounts:\n            XORValueCounts[value ^ X] = valueCounts[value]\n        for value in valueCounts:\n            if value in XORValueCounts:\n                if valueCounts[value] + XORValueCounts[value] > maxOccurenceCounts:\n                    maxOccurenceCounts = valueCounts[value] + XORValueCounts[value]\n                    minOperations = XORValueCounts[value]\n                elif valueCounts[value] + XORValueCounts[value] == maxOccurenceCounts:\n                    minOperations = min(XORValueCounts[value], minOperations)\n        print(maxOccurenceCounts, min(minOperations, N - minOperations))", "from sys import stdin\nfor testcase in range(int(stdin.readline())):\n    (N, X) = map(int, stdin.readline().split())\n    values = list(map(int, stdin.readline().split()))\n    maxOccurenceCounts = 0\n    valueCounts = {}\n    for value in values:\n        valueCounts[value] = valueCounts.get(value, 0) + 1\n        maxOccurenceCounts = max(maxOccurenceCounts, valueCounts[value])\n    if X == 0:\n        print(maxOccurenceCounts, 0)\n    else:\n        XORValueCounts = {}\n        for value in valueCounts:\n            XORValueCounts[value ^ X] = valueCounts[value]\n        minOperations = 0\n        for value in valueCounts:\n            if value in XORValueCounts:\n                if valueCounts[value] + XORValueCounts[value] > maxOccurenceCounts:\n                    maxOccurenceCounts = valueCounts[value] + XORValueCounts[value]\n                    minOperations = XORValueCounts[value]\n                elif valueCounts[value] + XORValueCounts[value] == maxOccurenceCounts:\n                    minOperations = min(XORValueCounts[value], minOperations)\n        print(maxOccurenceCounts, min(minOperations, N - minOperations))", "from collections import Counter\nfor _ in range(int(input())):\n    LIST = []\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = Counter(a)\n    operation = {}\n    for i in a:\n        operation[i] = 0\n    for i in a:\n        if i ^ x in c and i != i ^ x:\n            c[i ^ x] = c[i ^ x] + 1\n        elif i != i ^ x:\n            c[i ^ x] = 1\n        if i ^ x in operation and i != i ^ x:\n            operation[i ^ x] += 1\n        elif i != i ^ x:\n            operation[i ^ x] = 1\n    v = list(c.values())\n    k = list(c.keys())\n    value = max(v)\n    for (k1, v1) in c.items():\n        if v1 == value:\n            k2 = k1\n            LIST.append(k1)\n    small = operation[LIST[0]]\n    for k1 in LIST:\n        if operation[k1] < small:\n            small = operation[k1]\n    key = k[v.index(max(v))]\n    print(value, small)", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    ele = list(map(int, input().split()))\n    hm = dict()\n    for e in ele:\n        xo = e ^ x\n        if e in hm:\n            hm[e][0] += 1\n        else:\n            hm[e] = [1, 0]\n        if x != 0 and xo in hm:\n            hm[xo][0] += 1\n            hm[xo][1] += 1\n        elif x != 0:\n            hm[xo] = [1, 1]\n    it = [0, 0]\n    for e1 in hm:\n        if hm[e1][0] > it[0]:\n            it = [hm[e1][0], hm[e1][1]]\n        elif hm[e1][0] == it[0]:\n            it[1] = min(hm[e1][1], it[1])\n    print(it[0], it[1])", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    ele = list(map(int, input().split()))\n    hm = dict()\n    for e in ele:\n        xo = e ^ x\n        go = False\n        if e in hm:\n            hm[e][0] += 1\n            go = True\n        if x != 0 and xo in hm:\n            hm[xo][0] += 1\n            hm[xo][1] += 1\n            go = True\n        if go == False:\n            hm[e] = [1, 0]\n            if x != 0:\n                hm[xo] = [1, 1]\n    it = [0, 0]\n    for e1 in hm:\n        if hm[e1][0] > it[0]:\n            it = [hm[e1][0], hm[e1][1]]\n        elif hm[e1][0] == it[0]:\n            it[1] = min(hm[e1][1], it[1])\n    print(it[0], it[1])", "t = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    h1 = {}\n    h2 = {}\n    mf = -1\n    for i in a:\n        if i in h1:\n            h1[i] += 1\n        else:\n            h1[i] = 1\n        mf = max(h1[i], mf)\n    for i in a:\n        y = i ^ x\n        if y in h2:\n            h2[y] += 1\n        else:\n            h2[y] = 1\n    ans = -1\n    ans1 = -1\n    op = 10000000007\n    if x == 0:\n        print(mf, 0)\n    else:\n        for i in h1:\n            if i in h2:\n                if h1[i] + h2[i] > ans:\n                    ans = h1[i] + h2[i]\n                    op = h2[i]\n                elif h1[i] + h2[i] == ans and op > h2[i]:\n                    ans = h1[i] + h2[i]\n                    op = h2[i]\n            elif h1[i] > ans1:\n                ans1 = h1[i]\n        if ans > ans1:\n            print(ans, op)\n        else:\n            print(ans1, 0)", "T = int(input())\nfor i in range(T):\n    (N, X) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dic = {}\n    for j in range(N):\n        if a[j] in dic:\n            dic[a[j]] += 1\n        else:\n            dic[a[j]] = 1\n    dic1 = list(dic.keys())\n    maxi = 0\n    for j in range(len(dic1)):\n        if dic[dic1[j]] > maxi:\n            maxi = dic[dic1[j]]\n    ans1 = 0\n    ans2 = 1000000000\n    flag = 0\n    if X == 0:\n        print(maxi, 0)\n    else:\n        for j in range(len(dic1)):\n            val = dic1[j] ^ X\n            if val in dic.keys():\n                b = dic[val]\n                c = dic[dic1[j]] + b\n                if c > maxi:\n                    flag = 1\n                    if ans1 < c:\n                        ans1 = c\n        if flag == 0:\n            print(maxi, 0)\n        else:\n            ans2 = 1000000000\n            for j in range(len(dic1)):\n                val = dic1[j] ^ X\n                if val in dic.keys():\n                    b = dic[val]\n                    c = dic[dic1[j]] + b\n                    if c == ans1:\n                        d = min(dic[dic1[j]], b)\n                        if ans2 > d:\n                            ans2 = d\n            print(ans1, ans2)", "from collections import defaultdict\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, x) = map(int, input().split())\n        l1 = list(map(int, input().split()))\n        count_1_dir = defaultdict(lambda : 0)\n        count_2_dir = defaultdict(lambda : 0)\n        for i in l1:\n            if i not in count_1_dir:\n                count_1_dir[i] = 1\n            else:\n                count_1_dir[i] += 1\n        for i in l1:\n            if x != 0:\n                if i ^ x in count_2_dir:\n                    count_2_dir[i ^ x] += 1\n                else:\n                    count_2_dir[i ^ x] = 1\n        p = 0\n        q = 0\n        for i in l1:\n            if count_1_dir[i] + count_2_dir[i] > p:\n                p = count_1_dir[i] + count_2_dir[i]\n                q = count_2_dir[i]\n            elif count_1_dir[i] + count_2_dir[i] == p:\n                q = min(q, count_2_dir[i])\n        print(p, q)\nmain()", "from collections import *\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    (m, ans) = (1, 0)\n    d1 = defaultdict(lambda : 0)\n    d2 = defaultdict(lambda : 0)\n    for i in range(len(l)):\n        d1[l[i]] += 1\n        if d1[l[i]] > m:\n            m = d1[l[i]]\n    if x == 0:\n        print(m, x)\n        continue\n    for i in range(len(l)):\n        d2[l[i] ^ x] += 1\n    for i in range(len(l)):\n        if d1[l[i]] + d2[l[i]] > m:\n            m = d1[l[i]] + d2[l[i]]\n            ans = d2[l[i]]\n        if d1[l[i]] + d2[l[i]] == m:\n            ans = min(ans, d2[l[i]])\n    print(m, ans)", "T_T = int(input())\nfor i_i in range(T_T):\n    (n_n, x_x) = map(int, input().split())\n    d_d = {}\n    a_a = list(map(int, input().split()))\n    for i_i in a_a:\n        d_d[i_i] = d_d.get(i_i, 0) + 1\n    e_e = o_o = 0\n    for i_i in a_a:\n        nrml_nrml = d_d.get(i_i, 0)\n        xor_xor = d_d.get(i_i ^ x_x, 0)\n        ans_ans = nrml_nrml + xor_xor\n        if i_i != i_i ^ x_x:\n            if e_e < ans_ans:\n                e_e = ans_ans\n                o_o = xor_xor\n            elif e_e == ans_ans and o_o > xor_xor:\n                e_e = ans_ans\n                o_o = xor_xor\n        elif e_e < nrml_nrml:\n            e_e = nrml_nrml\n            o_o = 0\n    print(e_e, o_o)", "Sai = int(input())\nfor i in range(Sai):\n    (nn, x) = map(int, input().split())\n    d = {}\n    aa = list(map(int, input().split()))\n    for i in aa:\n        d[i] = d.get(i, 0) + 1\n    e = o = 0\n    for i in aa:\n        nrml = d.get(i, 0)\n        xor = d.get(i ^ x, 0)\n        ans = nrml + xor\n        if i != i ^ x:\n            if e < ans:\n                e = ans\n                o = xor\n            elif e == ans and o > xor:\n                e = ans\n                o = xor\n        elif e < nrml:\n            e = nrml\n            o = 0\n    print(e, o)", "import numpy as np\nfrom collections import Counter\nimport bisect\ntry:\n\n    class Solution:\n\n        def Final(self, N, X, arr):\n\n            def BST(ele, arr):\n                N = len(arr)\n                k = bisect.bisect_left(arr, ele)\n                if k != N and arr[k] == ele:\n                    return True\n                return False\n            count = Counter(arr)\n            unique = list(count.keys())\n            unique.sort()\n            temp = list(count.values())\n            temp.sort()\n            if X == 0:\n                print(temp[-1], 0)\n                return\n            ans = dict(count)\n            M = {i: 0 for i in unique}\n            status = {i: False for i in unique}\n            for (i, v) in enumerate(unique):\n                if status[v]:\n                    continue\n                B = v ^ X\n                if B != v and BST(B, unique):\n                    status[v] = True\n                    status[B] = True\n                    temp = count[B] + count[v]\n                    ans[v] += count[B]\n                    ans[B] += count[v]\n                    M[v] += count[B]\n                    M[B] += count[v]\n            V = list(ans.values())\n            V.sort()\n            MM = list(M.values())\n            Min = float('inf')\n            for i in unique:\n                if ans[i] == V[-1]:\n                    Min = min(Min, M[i])\n            print(V[-1], Min)\n    for t in range(int(input())):\n        (N, X) = map(int, input().split())\n        arr = list(map(int, input().split()))\n        ans = Solution()\n        ans.Final(N, X, arr)\nexcept EOFError as e:\n    print(e)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, x) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    nums = set()\n    curr_max = 0\n    freq = defaultdict(lambda : 0)\n    for i in arr:\n        freq[i] += 1\n        curr_max = max(curr_max, freq[i])\n        nums.add(i)\n    ops = 0\n    for i in nums:\n        sec_e = i ^ x\n        if x != 0 and sec_e in nums:\n            curr_f = freq[sec_e] + freq[i]\n            if curr_f > curr_max:\n                curr_max = curr_f\n                ops = freq[sec_e]\n            elif curr_f == curr_max:\n                ops = min(ops, freq[sec_e])\n    print(curr_max, ops)"]