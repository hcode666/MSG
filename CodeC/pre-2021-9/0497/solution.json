["import bisect\nfor i in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    for j in range(int(input())):\n        (x, y) = map(int, input().split())\n        z = x + y\n        nu = bisect.bisect(a, z)\n        if nu > 0:\n            if a[nu - 1] == z:\n                print(-1)\n            else:\n                print(nu)\n        else:\n            print(0)", "import bisect\nfor i in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    for j in range(int(input())):\n        (x, y) = map(int, input().split())\n        z = x + y\n        nu = bisect.bisect(a, z)\n        if nu > 0:\n            if a[nu - 1] == z:\n                print(-1)\n            else:\n                print(nu)\n        else:\n            print(0)", "import bisect\nfor i in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    for j in range(int(input())):\n        (x, y) = map(int, input().split())\n        z = x + y\n        nu = bisect.bisect(a, z)\n        if nu > 0:\n            if a[nu - 1] == z:\n                print(-1)\n            else:\n                print(nu)\n        else:\n            print(0)", "import bisect\nfor i in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    for j in range(int(input())):\n        (x, y) = map(int, input().split())\n        z = x + y\n        nu = bisect.bisect(a, z)\n        if nu > 0:\n            if a[nu - 1] == z:\n                print(-1)\n            else:\n                print(nu)\n        else:\n            print(0)", "import bisect\nfor i in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    for j in range(int(input())):\n        (x, y) = map(int, input().split())\n        z = x + y\n        nu = bisect.bisect(a, z)\n        if nu > 0:\n            if a[nu - 1] == z:\n                print(-1)\n            else:\n                print(nu)\n        else:\n            print(0)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        c = x + y\n        co = 0\n        z = 0\n        l = 0\n        r = n - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if arr[mid] < c:\n                l = mid + 1\n            elif arr[mid] > c:\n                r = mid - 1\n            else:\n                print(-1)\n                z = 1\n                break\n        if z == 0:\n            print(l)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        c = x + y\n        co = 0\n        z = 0\n        l = 0\n        r = n - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if arr[mid] < c:\n                l = mid + 1\n            elif arr[mid] > c:\n                r = mid - 1\n            else:\n                print(-1)\n                z = 1\n                break\n        if z == 0:\n            print(l)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        c = x + y\n        co = 0\n        z = 0\n        l = 0\n        r = n - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if arr[mid] < c:\n                l = mid + 1\n            elif arr[mid] > c:\n                r = mid - 1\n            else:\n                print(-1)\n                z = 1\n                break\n        if z == 0:\n            print(l)", "def binary_search(arr, num):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        middle = (start + end) // 2\n        if arr[middle] == num:\n            return -1\n        elif arr[middle] < num:\n            start = middle + 1\n        else:\n            end = middle - 1\n    return start\ntests = int(input())\nfor i in range(tests):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    unique_elements = set(arr)\n    q = int(input())\n    for j in range(q):\n        total = sum(map(int, input().split()))\n        if total < arr[0]:\n            number = 0\n        elif total > arr[-1]:\n            number = n\n        else:\n            number = binary_search(arr, total)\n        print(number)", "def binary_search(arr, num):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        middle = (start + end) // 2\n        if arr[middle] == num:\n            return -1\n        elif arr[middle] < num:\n            start = middle + 1\n        else:\n            end = middle - 1\n    return start\ntests = int(input())\nfor i in range(tests):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    unique_elements = set(arr)\n    q = int(input())\n    for j in range(q):\n        total = sum(map(int, input().split()))\n        if total < arr[0]:\n            number = 0\n        elif total > arr[-1]:\n            number = n\n        else:\n            number = binary_search(arr, total)\n        print(number)", "def binary_search(arr, num):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        middle = (start + end) // 2\n        if arr[middle] == num:\n            return -1\n        elif arr[middle] < num:\n            start = middle + 1\n        else:\n            end = middle - 1\n    return start\ntests = int(input())\nfor i in range(tests):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    unique_elements = set(arr)\n    q = int(input())\n    for j in range(q):\n        total = sum(map(int, input().split()))\n        if total < arr[0]:\n            number = 0\n        elif total > arr[-1]:\n            number = n\n        else:\n            number = binary_search(arr, total)\n        print(number)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    for _ in range(int(input())):\n        (x, y) = map(int, input().split())\n        dist = x + y\n        m = bisect.bisect(l, dist)\n        if m == 0:\n            print(0)\n        elif l[m - 1] == dist:\n            print(-1)\n        else:\n            print(m)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    nli = list(map(int, input().split()))\n    nli.sort()\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        sm = x + y\n        m = bisect.bisect(nli, sm)\n        if m > 0:\n            if nli[m - 1] == sm:\n                print(-1)\n            else:\n                print(m)\n        else:\n            print(0)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    nli = list(map(int, input().split()))\n    nli.sort()\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        sm = x + y\n        m = bisect.bisect(nli, sm)\n        if m > 0:\n            if nli[m - 1] == sm:\n                print(-1)\n            else:\n                print(m)\n        else:\n            print(0)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    nli = list(map(int, input().split()))\n    nli.sort()\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        sm = x + y\n        m = bisect.bisect(nli, sm)\n        if m > 0:\n            if nli[m - 1] == sm:\n                print(-1)\n            else:\n                print(m)\n        else:\n            print(0)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    nli = list(map(int, input().split()))\n    nli.sort()\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        sm = x + y\n        m = bisect.bisect(nli, sm)\n        if m > 0:\n            if nli[m - 1] == sm:\n                print(-1)\n            else:\n                print(m)\n        else:\n            print(0)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    nli = list(map(int, input().split()))\n    nli.sort()\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        sm = x + y\n        m = bisect.bisect(nli, sm)\n        if m > 0:\n            if nli[m - 1] == sm:\n                print(-1)\n            else:\n                print(m)\n        else:\n            print(0)", "n = 0\n\ndef binarys(key, lst):\n    low = 0\n    high = n - 1\n    ans = -2\n    while low <= high:\n        mid = low + (high - low) // 2\n        if lst[mid] == key:\n            return -1\n        elif lst[mid] < key:\n            ans = mid\n            low = mid + 1\n        else:\n            high = mid - 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    q = int(input())\n    points = []\n    for i in range(q):\n        (i, j) = map(int, input().split())\n        points += [(i, j)]\n    lst.sort()\n    for (i, j) in points:\n        ans = binarys(i + j, lst)\n        if ans != -1 and ans != -2:\n            print(ans + 1)\n        elif ans == -1:\n            print(ans)\n        else:\n            print(0)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    for j in range(int(input())):\n        (x, y) = map(int, input().split())\n        z = x + y\n        nu = bisect.bisect(a, z)\n        if nu > 0:\n            if a[nu - 1] == z:\n                print(-1)\n            else:\n                print(nu)\n        else:\n            print(0)", "import bisect\nfor i in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    for j in range(int(input())):\n        (x, y) = map(int, input().split())\n        z = x + y\n        nu = bisect.bisect(a, z)\n        if nu > 0:\n            if a[nu - 1] == z:\n                print(-1)\n            else:\n                print(nu)\n        else:\n            print(0)", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        c = x + y\n        co = 0\n        z = 0\n        l = 0\n        r = n - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if a[mid] < c:\n                l = mid + 1\n            elif a[mid] > c:\n                r = mid - 1\n            else:\n                print(-1)\n                z = 1\n                break\n        if z == 0:\n            print(l)", "def bsearch(x, y, a, n):\n    left = 0\n    right = n - 1\n    mid = 0\n    ans = 0\n    dir = None\n    while left <= right:\n        mid = left + (right - left) // 2\n        ans = mid\n        if x + y - a[mid] == 0:\n            break\n        elif x + y - a[mid] > 0:\n            left = mid + 1\n            dir = True\n        else:\n            right = mid - 1\n            dir = False\n    else:\n        if dir == True:\n            return ans + 1\n        else:\n            return ans\n    return -1\nfor i in range(int(input())):\n    n = int(input())\n    a = [int(j) for j in input().split()]\n    q = int(input())\n    for j in range(q):\n        (x, y) = map(int, input().split())\n        ans = bsearch(x, y, a, n)\n        print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        c = x + y\n        co = 0\n        z = 0\n        l = 0\n        r = n - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if a[mid] < c:\n                l = mid + 1\n            elif a[mid] > c:\n                r = mid - 1\n            else:\n                print(-1)\n                z = 1\n                break\n        if z == 0:\n            print(l)", "def posSearch(arr, num):\n    l = 0\n    r = len(arr)\n    if num < arr[l]:\n        return 0\n    elif num > arr[r - 1]:\n        return r\n    while l < r:\n        m = (l + r) // 2\n        if arr[m] == num:\n            return -1\n        if arr[m] < num < arr[m + 1]:\n            return m + 1\n        if arr[m] > num:\n            r = m\n        elif arr[m] < num:\n            l = m + 1\nfor _ in range(int(input())):\n    n = int(input())\n    narr = list(map(int, input().split()))\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        a = x + y\n        j = posSearch(narr, a)\n        print(j)", "def binary(arr, s):\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] <= s:\n            ans = mid\n            low = mid + 1\n        else:\n            high = mid - 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    q = int(input())\n    arr.sort()\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        s = x + y\n        if arr[0] > s:\n            print(0)\n            continue\n        if arr[0] == s:\n            print(-1)\n            continue\n        index = binary(arr, s)\n        if arr[index] == s:\n            print(-1)\n        else:\n            print(index + 1)", "import bisect\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    ls.sort()\n    q = int(input())\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        z = x + y\n        m = bisect.bisect(ls, z)\n        if m > 0:\n            if ls[m - 1] == z:\n                print(-1)\n            else:\n                print(m)\n        else:\n            print(0)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    q = int(input())\n    h = []\n    for i in range(q):\n        (x, y) = list(map(int, input().split()))\n        (f, c, g) = (x + y, 0, 0)\n        (b, m) = (0, n - 1)\n        while b <= m:\n            i = (b + m) // 2\n            if l[i] == f:\n                g = 1\n                break\n            elif l[i] > f:\n                m = i - 1\n            else:\n                b = i + 1\n        if g == 1:\n            print(-1)\n        elif l[i] > f:\n            print(i)\n        else:\n            print(i + 1)", "import sys\nfrom sys import stdin, stdout\nfrom bisect import bisect_right\nfrom os import path\n\ndef cinN():\n    return int(stdin.readline())\n\ndef cin():\n    return map(int, stdin.readline().split())\n\ndef find_le(a, x):\n    i = bisect_right(a, x)\n    if i:\n        return i - 1\n    return -1\n\ndef func():\n    n = cinN()\n    l = list(cin())\n    qn = cinN()\n    for _ in range(qn):\n        (x, y) = cin()\n        k = x + y\n        t = find_le(l, k)\n        if t == -1:\n            ans = 0\n        elif l[t] == k:\n            ans = -1\n        else:\n            ans = t + 1\n        print(ans)\ntest = cinN()\nfor _ in range(test):\n    func()", "import sys\nfrom sys import stdin, stdout\nfrom bisect import bisect_right\nfrom os import path\n\ndef cinN():\n    return int(stdin.readline())\n\ndef cin():\n    return map(int, stdin.readline().split())\n\ndef find_le(a, x):\n    i = bisect_right(a, x)\n    if i:\n        return i - 1\n    return -1\n\ndef func():\n    n = cinN()\n    l = list(cin())\n    qn = cinN()\n    for _ in range(qn):\n        (x, y) = cin()\n        k = x + y\n        t = find_le(l, k)\n        if t == -1:\n            ans = 0\n        elif l[t] == k:\n            ans = -1\n        else:\n            ans = t + 1\n        print(ans)\ntest = cinN()\nfor _ in range(test):\n    func()", "import sys\nfrom sys import stdin, stdout\nfrom bisect import bisect_right\nfrom os import path\n\ndef cinN():\n    return int(stdin.readline())\n\ndef cin():\n    return map(int, stdin.readline().split())\n\ndef find_le(a, x):\n    i = bisect_right(a, x)\n    if i:\n        return i - 1\n    return -1\n\ndef func():\n    n = cinN()\n    l = list(cin())\n    l.sort()\n    qn = cinN()\n    for _ in range(qn):\n        (x, y) = cin()\n        k = x + y\n        t = find_le(l, k)\n        if t == -1:\n            ans = 0\n        elif l[t] == k:\n            ans = -1\n        else:\n            ans = t + 1\n        print(ans)\ntest = cinN()\nfor _ in range(test):\n    func()", "import sys\nfrom sys import stdin, stdout\nfrom bisect import bisect_right\nfrom os import path\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\n    def cinN():\n        return int(input())\n\n    def cin():\n        return map(int, input().split())\nelse:\n\n    def cinN():\n        return int(stdin.readline())\n\n    def cin():\n        return map(int, stdin.readline().split())\n\ndef find_le(a, x):\n    i = bisect_right(a, x)\n    if i:\n        return i - 1\n    return -1\n\ndef func():\n    n = cinN()\n    l = list(cin())\n    l.sort()\n    qn = cinN()\n    for _ in range(qn):\n        (x, y) = cin()\n        k = x + y\n        t = find_le(l, k)\n        if t == -1:\n            ans = 0\n        elif l[t] == k:\n            ans = -1\n        else:\n            ans = t + 1\n        print(ans)\ntest = cinN()\nfor _ in range(test):\n    func()", "import sys\nfrom sys import stdin, stdout\nfrom bisect import bisect_right\nfrom os import path\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\n    def cinN():\n        return int(input())\n\n    def cin():\n        return map(int, input().split())\nelse:\n\n    def cinN():\n        return int(stdin.readline())\n\n    def cin():\n        return map(int, stdin.readline().split())\n\ndef find_le(a, x):\n    i = bisect_right(a, x)\n    if i:\n        return i - 1\n    return -1\n\ndef func():\n    n = cinN()\n    l = list(cin())\n    l.sort()\n    qn = cinN()\n    for _ in range(qn):\n        (x, y) = cin()\n        k = x + y\n        t = find_le(l, k)\n        if t == -1:\n            ans = 0\n        elif l[t] == k:\n            ans = -1\n        else:\n            ans = t + 1\n        print(ans)\ntest = cinN()\nfor _ in range(test):\n    func()", "import sys\nfrom sys import stdin, stdout\nfrom bisect import bisect_right\nfrom os import path\ncout = sys.stdout.write\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\n    def cinN():\n        return int(input())\n\n    def cin():\n        return map(int, input().split())\nelse:\n\n    def cinN():\n        return int(stdin.readline())\n\n    def cin():\n        return map(int, stdin.readline().split())\n\ndef find_le(a, x):\n    i = bisect_right(a, x)\n    if i:\n        return i - 1\n    return -1\n\ndef func():\n    st = ''\n    n = cinN()\n    l = list(cin())\n    l.sort()\n    qn = cinN()\n    for _ in range(qn):\n        (x, y) = cin()\n        k = x + y\n        t = find_le(l, k)\n        if t == -1:\n            ans = 0\n        elif l[t] == k:\n            ans = -1\n        else:\n            ans = t + 1\n        print(ans)\ntest = cinN()\nfor _ in range(test):\n    func()", "import sys\nfrom sys import stdin, stdout\nfrom bisect import bisect_right\nfrom os import path\ncout = sys.stdout.write\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\n    def cinN():\n        return int(input())\n\n    def cin():\n        return map(int, input().split())\nelse:\n\n    def cinN():\n        return int(stdin.readline())\n\n    def cin():\n        return map(int, stdin.readline().split())\n\ndef find_le(a, x):\n    i = bisect_right(a, x)\n    if i:\n        return i - 1\n    return -1\n\ndef func():\n    st = ''\n    n = cinN()\n    l = list(cin())\n    l.sort()\n    qn = cinN()\n    for _ in range(qn):\n        (x, y) = cin()\n        k = x + y\n        t = find_le(l, k)\n        if t == -1:\n            ans = 0\n        elif l[t] == k:\n            ans = -1\n        else:\n            ans = t + 1\n        print(ans)\ntest = cinN()\nfor _ in range(test):\n    func()", "import sys\nfrom sys import stdin, stdout\nfrom bisect import bisect_right\nfrom os import path\ncout = sys.stdout.write\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\n    def cinN():\n        return int(input())\n\n    def cin():\n        return map(int, input().split())\nelse:\n\n    def cinN():\n        return int(stdin.readline())\n\n    def cin():\n        return map(int, stdin.readline().split())\n\ndef find_le(a, x):\n    i = bisect_right(a, x)\n    if i:\n        return i - 1\n    return -1\n\ndef func():\n    st = ''\n    n = cinN()\n    l = list(cin())\n    l.sort()\n    qn = cinN()\n    for _ in range(qn):\n        (x, y) = cin()\n        k = x + y\n        t = find_le(l, k)\n        if t == -1:\n            ans = 0\n        elif l[t] == k:\n            ans = -1\n        else:\n            ans = t + 1\n        print(ans)\ntest = cinN()\nfor _ in range(test):\n    func()", "import sys\nfrom sys import stdin, stdout\nfrom bisect import bisect_right\nfrom os import path\ncout = sys.stdout.write\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\n    def cinN():\n        return int(input())\n\n    def cin():\n        return map(int, input().split())\nelse:\n\n    def cinN():\n        return int(stdin.readline())\n\n    def cin():\n        return map(int, stdin.readline().split())\n\ndef find_le(a, x):\n    i = bisect_right(a, x)\n    if i:\n        return i - 1\n    return -1\n\ndef func():\n    st = ''\n    n = cinN()\n    l = list(cin())\n    l.sort()\n    qn = cinN()\n    for _ in range(qn):\n        (x, y) = cin()\n        k = x + y\n        t = find_le(l, k)\n        if t == -1:\n            ans = 0\n        elif l[t] == k:\n            ans = -1\n        else:\n            ans = t + 1\n        print(ans)\ntest = cinN()\nfor _ in range(test):\n    func()", "import bisect\nfor i in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    for j in range(int(input())):\n        (x, y) = map(int, input().split())\n        z = x + y\n        nu = bisect.bisect(a, z)\n        if nu > 0:\n            if a[nu - 1] == z:\n                print(-1)\n            else:\n                print(nu)\n        else:\n            print(0)", "from bisect import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = []\n    for _ in range(int(input())):\n        (x, y) = map(int, input().split())\n        s = x + y\n        st = 0\n        end = n - 1\n        t = True\n        while st <= end:\n            half = (end + st) // 2\n            if l[half] == s:\n                t = False\n                break\n            elif l[half] > s:\n                end = half - 1\n            else:\n                st = half + 1\n        print(bisect(l, s) if t else -1)", "from bisect import bisect\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    l = list(map(int, input().split()))\n    q = int(input())\n    for j in range(q):\n        (a, b) = map(int, input().split())\n        s = a + b\n        st = 0\n        end = n - 1\n        t = 1\n        while st <= end:\n            half = (end + st) // 2\n            if l[half] == s:\n                t = 0\n                break\n            elif l[half] > s:\n                end = half - 1\n            else:\n                st = half + 1\n        if t == 0:\n            print('-1')\n        else:\n            z = a + b\n            print(bisect(l, z))", "import bisect\n\ndef BinarySearch(a, x):\n    i = bisect.bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    else:\n        return -1\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    a.sort()\n    for queries in range(int(input())):\n        xy = list(map(int, input().strip().split()))\n        (x, y) = (xy[0], xy[1])\n        if BinarySearch(a, x + y) == -1:\n            print(bisect.bisect(a, x + y))\n        else:\n            print(-1)", "def binarySearchCount(arr, n, key):\n    left = 0\n    right = n\n    mid = 0\n    while left < right:\n        mid = (right + left) // 2\n        if arr[mid] == key:\n            while mid + 1 < n and arr[mid + 1] == key:\n                mid += 1\n            break\n        elif arr[mid] > key:\n            right = mid\n        else:\n            left = mid + 1\n    while mid > -1 and arr[mid] > key:\n        mid -= 1\n    return mid + 1\n\ndef bs(arr, x, l, r):\n    if l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            return bs(arr, x, mid + 1, r)\n        else:\n            return bs(arr, x, l, mid - 1)\n    else:\n        return -1\n\ndef solve():\n    from sys import stdin, stdout\n    for _ in range(int(input())):\n        n = int(stdin.readline())\n        l = list(map(int, stdin.readline().strip().split()))\n        l.sort()\n        now = int(stdin.readline())\n        for i in range(now):\n            (x, y) = map(int, stdin.readline().strip().split())\n            t = x + y\n            j = bs(l, t, 0, n - 1)\n            if j == -1:\n                a = binarySearchCount(l, n, t)\n                print(a)\n            else:\n                print(-1)\nsolve()", "import bisect\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    q = int(input())\n    while q > 0:\n        q = q - 1\n        (x, y) = map(int, input().split())\n        c = 0\n        sum = x + y\n        d = bisect.bisect_right(a, sum)\n        if a[d - 1] == sum:\n            print('-1')\n        else:\n            print(d)", "def findCount(arr, n, key):\n    left = 0\n    right = n\n    mid = 0\n    while left < right:\n        mid = (right + left) // 2\n        if arr[mid] == key:\n            while mid + 1 < n and arr[mid + 1] == key:\n                mid += 1\n            break\n        elif arr[mid] > key:\n            right = mid\n        else:\n            left = mid + 1\n    while mid > -1 and arr[mid] > key:\n        mid -= 1\n    return mid + 1\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    q = int(input())\n    while q > 0:\n        q = q - 1\n        (x, y) = map(int, input().split())\n        c = 0\n        sum = x + y\n        d = findCount(a, n, sum)\n        if a[d - 1] == sum:\n            print('-1')\n        else:\n            print(d)", "def find_walls(a, n, x, y):\n    k = x + y\n    l = 0\n    r = n - 1\n    while l <= r:\n        mid = int(l + (r - l) / 2)\n        if a[mid] == k:\n            return -1\n        if a[mid] < k:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    a = list(map(int, input().split()))\n    tmp = sorted(a)\n    max_wall = tmp[-1]\n    Q = int(input())\n    for i in range(Q):\n        (x, y) = map(int, input().split())\n        if x == 0 and y == 0:\n            print(0)\n        elif x + y > max_wall:\n            print(N)\n        else:\n            res = find_walls(tmp, N, x, y)\n            print(res)", "from bisect import bisect_right\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    a.sort()\n    for _ in range(q):\n        p = sum(list(map(int, input().split())))\n        if p <= 0:\n            print('0')\n            continue\n        elif p > a[n - 1]:\n            print(len(a))\n            continue\n        else:\n            m = bisect_right(a, p)\n            if a[m - 1] == p:\n                print(-1)\n            else:\n                print(m)\n                continue", "import sys\ninput = sys.stdin.readline\n\ndef search(a, s):\n    start = 0\n    end = len(a) - 1\n    res = -1\n    while start <= end:\n        mid = (start + end) // 2\n        if a[mid] > s:\n            end = mid - 1\n        elif a[mid] < s:\n            res = mid\n            start = mid + 1\n        elif s - a[mid] == 0:\n            return -1\n        else:\n            pass\n    return res + 1\nfor m in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    h = int(input())\n    for i in range(h):\n        (x, y) = map(int, input().split())\n        s = x + y\n        if x == 0 and y == 0:\n            print(0)\n        else:\n            k = search(a, s)\n            print(k)", "def bs(arr, left, right, elem):\n    if left >= right:\n        return left\n    middle = (left + right) // 2\n    if elem > arr[middle]:\n        return bs(arr, middle + 1, right, elem)\n    if elem < arr[middle]:\n        return bs(arr, left, middle, elem)\n    return middle\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        r = bs(a, 0, n, x + y)\n        if r < n and x + y == a[r]:\n            print(-1)\n        else:\n            print(r)", "def findCount(arr, n, key):\n    left = 0\n    right = n\n    mid = 0\n    while left < right:\n        mid = (right + left) // 2\n        if arr[mid] == key:\n            while mid + 1 < n and arr[mid + 1] == key:\n                mid += 1\n            break\n        elif arr[mid] > key:\n            right = mid\n        else:\n            left = mid + 1\n    while mid > -1 and arr[mid] > key:\n        mid -= 1\n    return mid + 1\nfor _ in range(int(input())):\n    n = int(input())\n    walls = list(map(int, input().split()))\n    for i in range(int(input())):\n        (x, y) = map(int, input().split())\n        count = findCount(walls, len(walls), x + y)\n        if x + y == walls[count - 1]:\n            print(-1)\n            continue\n        print(count)", "from sys import stdin, stdout\nimport math\nfrom itertools import permutations, combinations\nfrom collections import defaultdict\nimport bisect\nmod = 1000000007\n\ndef L():\n    return list(map(int, stdin.readline().split()))\n\ndef In():\n    return map(int, stdin.readline().split())\n\ndef I():\n    return int(stdin.readline())\n\ndef printIn(ob):\n    return stdout.write(str(ob) + '\\n')\n\ndef powerLL(n, p):\n    result = 1\n    while p:\n        if p & 1:\n            result = result * n % mod\n        p = int(p / 2)\n        n = n * n % mod\n    return result\n\ndef checkPos(x, y, wall):\n    p = 0\n    breakWall = 0\n    for i in range(len(wall)):\n        p = x + y - wall[i]\n        if p == 0:\n            return -1\n        elif p > 0:\n            breakWall += 1\n    return breakWall\n\ndef myCode():\n    n = I()\n    wall = L()\n    wallSet = set(wall)\n    q = I()\n    for _ in range(q):\n        (x, y) = In()\n        if x + y in wallSet:\n            print('-1')\n        else:\n            print(bisect.bisect_right(wall, x + y))\n\ndef main():\n    for t in range(I()):\n        myCode()\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    q = int(input())\n    for f in range(q):\n        (x, y) = map(int, input().split())\n        if x == 0 and y == 0:\n            print(0)\n        else:\n            flag = 0\n            m = x + y\n            l = 0\n            r = n - 1\n            mid = 0\n            while l <= r:\n                mid = (l + r) // 2\n                if lis[mid] < m:\n                    l = mid + 1\n                elif lis[mid] > m:\n                    r = mid - 1\n                else:\n                    print(-1)\n                    flag = 1\n                    break\n            if flag == 0:\n                print(l)", "for _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    q = int(input())\n    for f in range(q):\n        (x, y) = map(int, input().split())\n        if x == 0 and y == 0:\n            print(0)\n        else:\n            flag = 0\n            m = x + y\n            l = 0\n            r = n - 1\n            mid = 0\n            while l <= r:\n                mid = (l + r) // 2\n                if lis[mid] < m:\n                    l = mid + 1\n                elif lis[mid] > m:\n                    r = mid - 1\n                else:\n                    print(-1)\n                    flag = 1\n                    break\n            if flag == 0:\n                print(l)", "def binarysearch(l, t):\n    i = 0\n    j = len(l) - 1\n    while i <= j:\n        mid = (i + j) // 2\n        if t - l[mid] < 0:\n            j = mid - 1\n        elif t - l[mid] > 0:\n            i = mid + 1\n        else:\n            return -1\n    return i\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    k = int(input())\n    for i in range(k):\n        (x, y) = map(int, input().split())\n        t = x + y\n        r = binarysearch(l, t)\n        if x == 0 and y == 0:\n            print(0)\n        else:\n            g = binarysearch(l, t)\n            print(g)", "import sys\ninput = sys.stdin.readline\n\ndef search(a, s):\n    start = 0\n    end = len(a) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if s - a[mid] < 0:\n            end = mid - 1\n        elif s - a[mid] > 0:\n            start = mid + 1\n        elif s - a[mid] == 0:\n            return -1\n    return start\nfor m in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    h = int(input())\n    for i in range(h):\n        (x, y) = map(int, input().split())\n        s = x + y\n        if x == 0 and y == 0:\n            print(0)\n        else:\n            k = search(a, s)\n            print(k)", "def search(a, s):\n    start = 0\n    end = len(a) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if s - a[mid] < 0:\n            end = mid - 1\n        elif s - a[mid] > 0:\n            start = mid + 1\n        elif s - a[mid] == 0:\n            return -1\n    return start\nfor m in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    h = int(input())\n    for i in range(h):\n        (x, y) = map(int, input().split())\n        s = x + y\n        if x == 0 and y == 0:\n            print(0)\n        else:\n            k = search(a, s)\n            print(k)", "def search(a, s):\n    start = 0\n    end = len(a) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if s - a[mid] < 0:\n            end = mid - 1\n        elif s - a[mid] > 0:\n            start = mid + 1\n        elif s - a[mid] == 0:\n            return -1\n    return start\nfor m in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    h = int(input())\n    for i in range(h):\n        (x, y) = map(int, input().split())\n        s = x + y\n        if x == 0 and y == 0:\n            print(0)\n        else:\n            k = search(a, s)\n            print(k)", "from bisect import bisect_right\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(int(input())):\n        (x, y) = map(int, input().split())\n        k = x + y\n        if k > a[n - 1]:\n            print(n)\n        elif k == a[n - 1]:\n            print(-1)\n        else:\n            r = bisect_right(a, k)\n            if k == a[r - 1]:\n                print(-1)\n            else:\n                print(r)", "try:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = input().split()\n        q = int(input())\n        for i in range(q):\n            b = input().split()\n\n            def binarySearch(a, l, r, x, count):\n                if r >= l:\n                    mid = l + (r - l) // 2\n                    if int(a[mid]) == x:\n                        print(-1)\n                    elif int(a[mid]) > x:\n                        return binarySearch(a, l, mid - 1, x, count)\n                    else:\n                        return binarySearch(a, mid + 1, r, x, count + mid + 1 - l)\n                else:\n                    print(count)\n            binarySearch(a, 0, len(a) - 1, int(b[0]) + int(b[1]), 0)\nexcept:\n    pass", "from bisect import bisect_left\n\ndef bs(a, x):\n    i = bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return -1\n    elif i:\n        return i\n    else:\n        return 0\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(int(input())):\n        (x, y) = map(int, input().split())\n        k = x + y\n        r = bs(a, k)\n        print(r)", "from sys import stdin, stdout\nimport math\nfrom itertools import permutations, combinations\nfrom collections import defaultdict\nimport bisect\nmod = 1000000007\n\ndef L():\n    return list(map(int, stdin.readline().split()))\n\ndef In():\n    return map(int, stdin.readline().split())\n\ndef I():\n    return int(stdin.readline())\n\ndef printIn(ob):\n    return stdout.write(str(ob) + '\\n')\n\ndef powerLL(n, p):\n    result = 1\n    while p:\n        if p & 1:\n            result = result * n % mod\n        p = int(p / 2)\n        n = n * n % mod\n    return result\n\ndef checkPos(x, y, wall):\n    p = 0\n    breakWall = 0\n    for i in range(len(wall)):\n        p = x + y - wall[i]\n        if p == 0:\n            return -1\n        elif p > 0:\n            breakWall += 1\n    return breakWall\n\ndef myCode():\n    n = I()\n    wall = L()\n    wallSet = set(wall)\n    q = I()\n    for _ in range(q):\n        (x, y) = In()\n        if x + y in wallSet:\n            print('-1')\n        else:\n            print(bisect.bisect_right(wall, x + y))\n\ndef main():\n    for t in range(I()):\n        myCode()\nmain()", "def binarysearch(a, s):\n    (l, r) = (0, len(a) - 1)\n    while 1:\n        mid = l + r >> 1\n        if l == mid:\n            if a[r] <= s:\n                return r\n            elif a[l] <= s:\n                return l\n            else:\n                return l - 1\n        if a[mid] <= s:\n            l = mid\n        else:\n            r = mid\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    h = int(input())\n    for i in range(h):\n        (x, y) = map(int, input().split())\n        s = x + y\n        index = binarysearch(a, s)\n        if index >= 0 and a[index] == s:\n            print('-1')\n        else:\n            print(index + 1)", "import bisect\nfrom collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    d = defaultdict(int)\n    for ele in arr:\n        d[ele] = 1\n    q = int(input())\n    for __ in range(q):\n        (x, y) = map(int, input().split())\n        if x + y in d:\n            print(-1)\n            continue\n        ind = bisect.bisect_right(arr, x + y)\n        if arr[ind - 1] == x + y:\n            print(-1)\n        else:\n            print(ind)", "import bisect\n\ndef bisect_fun(l, num):\n    index = bisect.bisect_right(l, num)\n    if l[index - 1] == num:\n        return -1\n    else:\n        return index\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        num = x + y\n        if num == 0:\n            print(0)\n        else:\n            print(bisect_fun(l, num))", "import bisect\n\ndef bisect_fun(l, num):\n    index = bisect.bisect_right(l, num)\n    if l[index - 1] == num:\n        return -1\n    else:\n        return index\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(int(input())):\n        (x, y) = map(int, input().split())\n        num = x + y\n        if num == 0:\n            print(0)\n        else:\n            print(bisect_fun(l, num))", "import bisect\n\ndef bisect_fun(l, num):\n    index = bisect.bisect(l, num)\n    if l[index - 1] == num:\n        return -1\n    else:\n        return index\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(int(input())):\n        (x, y) = map(int, input().split())\n        num = x + y\n        if num == 0:\n            print(0)\n        else:\n            print(bisect_fun(l, num))", "import bisect\n\ndef bisect_fun(l, num):\n    index = bisect.bisect_right(l, num)\n    if l[index - 1] == num:\n        return -1\n    else:\n        return index\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(int(input())):\n        (x, y) = map(int, input().split())\n        num = x + y\n        if num == 0:\n            print(0)\n        else:\n            print(bisect_fun(l, num))", "from bisect import bisect_right\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')[:n]))\n    a.sort()\n    q = int(input())\n    for _ in range(q):\n        c = sum(list(map(int, input().split())))\n        if c < a[0]:\n            print(0)\n            continue\n        elif c > a[n - 1]:\n            print(n)\n            continue\n        else:\n            m = bisect_right(a, c)\n            if a[m - 1] == c:\n                print(-1)\n            else:\n                print(m)", "try:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = input().split()\n        q = int(input())\n        for i in range(q):\n            b = input().split()\n\n            def binarySearch(a, l, r, x, count):\n                if r >= l:\n                    mid = l + (r - l) // 2\n                    if int(a[mid]) == x:\n                        print(-1)\n                    elif int(a[mid]) > x:\n                        return binarySearch(a, l, mid - 1, x, count)\n                    else:\n                        return binarySearch(a, mid + 1, r, x, count + mid + 1 - l)\n                else:\n                    print(count)\n            binarySearch(a, 0, len(a) - 1, int(b[0]) + int(b[1]), 0)\nexcept:\n    pass", "try:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = input().split()\n        q = int(input())\n        for i in range(q):\n            b = input().split()\n\n            def binarySearch(a, l, r, x, count):\n                if r >= l:\n                    mid = l + (r - l) // 2\n                    if int(a[mid]) == x:\n                        print(-1)\n                    elif int(a[mid]) > x:\n                        return binarySearch(a, l, mid - 1, x, count)\n                    else:\n                        return binarySearch(a, mid + 1, r, x, count + mid + 1 - l)\n                else:\n                    print(count)\n            binarySearch(a, 0, len(a) - 1, int(b[0]) + int(b[1]), 0)\nexcept:\n    pass", "ted = int(input())\nfor i in range(ted):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        line = x + y\n        if line > lis[n - 1]:\n            print(n)\n            continue\n        if line < lis[0]:\n            print(0)\n            continue\n        left = 0\n        right = n - 1\n        c = 0\n        while left <= right:\n            mid = (left + right) // 2\n            if lis[mid] == line:\n                c = -1\n                break\n            elif lis[mid] < line:\n                c = mid + 1\n                left = mid + 1\n            else:\n                right = mid - 1\n        print(c)", "ted = int(input())\nfor i in range(ted):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        line = x + y\n        if line > lis[n - 1]:\n            print(n)\n            continue\n        if line < lis[0]:\n            print(0)\n            continue\n        left = 0\n        right = n - 1\n        c = 0\n        while left <= right:\n            mid = (left + right) // 2\n            if lis[mid] == line:\n                c = -1\n                break\n            elif lis[mid] < line:\n                c = mid + 1\n                left = mid + 1\n            else:\n                right = mid - 1\n        print(c)", "import bisect\nted = int(input())\nfor i in range(ted):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        line = x + y\n        if line > lis[n - 1]:\n            print(n)\n            continue\n        if line < lis[0]:\n            print(0)\n            continue\n        ans = bisect.bisect_left(lis, line)\n        if len(lis) == ans:\n            print(ans)\n        elif lis[ans] == line:\n            print(-1)\n        else:\n            print(ans)", "import bisect\nted = int(input())\nfor i in range(ted):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        line = x + y\n        if line > lis[n - 1]:\n            print(n)\n            continue\n        if line < lis[0]:\n            print(0)\n            continue\n        ans = bisect.bisect_left(lis, line)\n        if len(lis) == ans:\n            print(ans)\n        elif lis[ans] == line:\n            print(-1)\n        else:\n            print(ans)", "import bisect\nted = int(input())\nfor i in range(ted):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        line = x + y\n        if line > lis[n - 1]:\n            print(n)\n            continue\n        if line < lis[0]:\n            print(0)\n            continue\n        ans = bisect.bisect_left(lis, line)\n        if len(lis) == ans:\n            print(ans)\n        elif lis[ans] == line:\n            print(-1)\n        else:\n            print(ans)", "import bisect\nted = int(input())\nfor i in range(ted):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        line = x + y\n        ans = bisect.bisect_left(lis, line)\n        if len(lis) == ans:\n            print(ans)\n        elif lis[ans] == line:\n            print(-1)\n        else:\n            print(ans)", "import bisect\nted = int(input())\nfor i in range(ted):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    q = int(input())\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        line = x + y\n        ans = bisect.bisect_left(lis, line)\n        if len(lis) == ans:\n            print(ans)\n        elif lis[ans] == line:\n            print(-1)\n        else:\n            print(ans)", "def fun(l1, l, r, x1):\n    mid = (l + r) // 2\n    if x1 == l1[mid]:\n        return -1\n    elif x1 > l1[mid] and x1 < l1[mid + 1]:\n        return mid\n    elif x1 > l1[mid]:\n        return fun(l1, mid + 1, r, x1)\n    else:\n        return fun(l1, l, mid - 1, x1)\nt = int(input())\nt1 = 0\nwhile t1 < t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    for i in range(0, q):\n        b = list(map(int, input().split()))\n        x = b[0] + b[1]\n        if x == 0:\n            print(0)\n        elif x < a[0]:\n            print(0)\n        elif x > a[n - 1]:\n            print(n)\n        else:\n            r1 = fun(a, 0, n - 1, x)\n            if r1 == -1:\n                print(-1)\n            else:\n                print(int(r1) + 1)\n    t1 += 1", "from bisect import bisect_right\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l1 = [int(i) for i in input().split()]\n    l1.sort()\n    q = int(input())\n    for i in range(q):\n        (a, b) = map(int, input().split())\n        if a == b == 0:\n            print(0)\n        else:\n            sum1 = a + b\n            z = bisect_right(l1, sum1)\n            if l1[z - 1] == sum1:\n                print(-1)\n            else:\n                print(z)", "from bisect import bisect_left\nfor _ in range(int(input())):\n    n = int(input())\n    walls = list(map(int, input().split()))\n    walls.sort()\n    for _ in range(int(input())):\n        (a, b) = map(int, input().split())\n        num = a + b\n        ans = bisect_left(walls, num)\n        if len(walls) == ans:\n            print(ans)\n        elif walls[ans] == num:\n            print(-1)\n        else:\n            print(ans)", "from bisect import bisect_left\nfor _ in range(int(input())):\n    n = int(input())\n    walls = list(map(int, input().split()))\n    walls.sort()\n    for _ in range(int(input())):\n        (a, b) = map(int, input().split())\n        num = a + b\n        ans = bisect_left(walls, num)\n        if len(walls) == ans:\n            print(ans)\n        elif walls[ans] == num:\n            print(-1)\n        else:\n            print(ans)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    for _ in range(int(input())):\n        s = sum([int(x) for x in input().split()])\n        idx = bisect.bisect(a, s)\n        if not idx:\n            print(0)\n        elif a[idx - 1] == s:\n            print(-1)\n        else:\n            print(idx)", "def search(arr, low, high, x):\n    mid = (high + low) // 2\n    if arr[mid] == x:\n        return -1\n    elif x > arr[mid] and x < arr[mid + 1]:\n        return mid\n    elif x > arr[mid]:\n        return search(arr, mid + 1, high, x)\n    else:\n        return search(arr, low, mid - 1, x)\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    for i in range(q):\n        wall = 0\n        t = 0\n        (x, y) = map(int, input().split())\n        t = x + y\n        if t == 0:\n            print('0')\n        elif t < a[0]:\n            print('0')\n        elif t > a[n - 1]:\n            print(n)\n        else:\n            wall = search(a, 0, n - 1, t)\n            if wall == -1:\n                print('-1')\n            else:\n                print(int(wall) + 1)"]