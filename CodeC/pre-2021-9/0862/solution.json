["(n, m, p) = map(int, input().split())\ns = [(n + 1, 0)]\nfor i in range(p):\n    z = input().split()\n    s.append((int(z[0]), int(z[1])))\ns.sort()\nx = 0\nfor j in range(1, n + 1):\n    f = False\n    t = 1\n    e = m\n    l = 0\n    c1 = 0\n    c2 = 0\n    while s[x][0] == j:\n        c3 = s[x][1]\n        if m > 1 and (not f):\n            if c3 > c2:\n                f = l > c1 + 1 or (c1 > 1 and c3 > c2 + 1)\n                c2 = c3\n                l = c1\n                c1 = 0\n            c1 += 1\n            if c2 == 1:\n                t += 1\n            elif c2 == m:\n                e += 1\n        x += 1\n    if l > c1 + 1 or (c1 > 1 and c2 < m):\n        f = True\n    print(-1 if f else e - t)", "(n, m, p) = map(int, input().split())\ns = [(n + 1, 0)]\nfor i in range(p):\n    z = input().split()\n    s.append((int(z[0]), int(z[1])))\ns.sort()\nx = 0\nfor j in range(1, n + 1):\n    f = False\n    t = 1\n    e = m\n    l = 0\n    c1 = 0\n    c2 = 0\n    while s[x][0] == j:\n        c3 = s[x][1]\n        if m > 1 and (not f):\n            if c3 > c2:\n                f = l > c1 + 1 or (c1 > 1 and c3 > c2 + 1)\n                c2 = c3\n                l = c1\n                c1 = 0\n            c1 += 1\n            if c2 == 1:\n                t += 1\n            elif c2 == m:\n                e += 1\n        x += 1\n    if l > c1 + 1 or (c1 > 1 and c2 < m):\n        f = True\n    print(-1 if f else e - t)", "(n, m, p) = map(int, input().split())\ns = [(n + 1, 0)]\nfor i in range(p):\n    z = input().split()\n    s.append((int(z[0]), int(z[1])))\ns.sort()\nx = 0\nfor j in range(1, n + 1):\n    f = False\n    t = 1\n    e = m\n    l = 0\n    c1 = 0\n    c2 = 0\n    while s[x][0] == j:\n        c3 = s[x][1]\n        if m > 1 and (not f):\n            if c3 > c2:\n                f = l > c1 + 1 or (c1 > 1 and c3 > c2 + 1)\n                c2 = c3\n                l = c1\n                c1 = 0\n            c1 += 1\n            if c2 == 1:\n                t += 1\n            elif c2 == m:\n                e += 1\n        x += 1\n    if l > c1 + 1 or (c1 > 1 and c2 < m):\n        f = True\n    print(-1 if f else e - t)", "(n, m, p) = map(int, input().split())\nincs = [(n + 1, 0)]\nfor _ in range(p):\n    z = input().split()\n    incs.append((int(z[0]), int(z[1])))\nincs.sort()\ninx = 0\nfor nx in range(1, n + 1):\n    fail = False\n    st = 1\n    en = m\n    last = 0\n    curr = 0\n    ccol = 0\n    while incs[inx][0] == nx:\n        ncol = incs[inx][1]\n        if m > 1 and (not fail):\n            if ncol > ccol:\n                fail = last > curr + 1 or (curr > 1 and ncol > ccol + 1)\n                ccol = ncol\n                last = curr\n                curr = 0\n            curr += 1\n            if ccol == 1:\n                st += 1\n            elif ccol == m:\n                en += 1\n        inx += 1\n    if last > curr + 1 or (curr > 1 and ccol < m):\n        fail = True\n    print(-1 if fail else en - st)", "import collections as c, sys\n(N, M, P) = list(map(int, sys.stdin.readline().split()))\nA = c.defaultdict(lambda : c.defaultdict(int))\nfor _ in range(P):\n    (i, j) = list(map(int, sys.stdin.readline().split()))\n    if j - 1 in A[i - 1]:\n        A[i - 1][j - 1] += 1\n    else:\n        A[i - 1][j - 1] = j\nfor i in range(N):\n    for (j, v) in A[i].items():\n        if j == M - 1:\n            continue\n        x = A[i][j + 1] if j + 1 in A[i] else j + 1\n        if A[i][j] > x:\n            print(-1)\n            break\n    else:\n        x = A[i][M - 1] if M - 1 in A[i] else M - 1\n        print(x - A[i][0])", "def solve():\n    (n, m, p) = (int(x) for x in input().split())\n    scores = [m - 1 for x in range(n)]\n    coord = dict()\n    if m == 1:\n        return scores\n    for __ in range(p):\n        (i, j) = (int(x) for x in input().split())\n        if j == m:\n            scores[i - 1] += 1\n        elif j == 1:\n            scores[i - 1] -= 1\n        pair = (i, j)\n        if pair not in coord:\n            coord[pair] = 1\n        else:\n            coord[pair] += 1\n    for (i, j) in coord:\n        if j != m:\n            condition = coord.get((i, j)) - coord.get((i, j + 1), 0) > 1\n            if condition:\n                scores[i - 1] = -1\n    return scores\nans = solve()\nprint(*ans, sep='\\n')", "line1 = input().split(' ')\nn = int(line1[0])\nm = int(line1[1])\np = int(line1[2])\nmat = {}\nwhile p > 0:\n    p -= 1\n    line1 = input().split(' ')\n    x = int(line1[0])\n    y = int(line1[1])\n    if x in mat:\n        if y in mat[x]:\n            mat[x][y] = mat[x][y] + 1\n        else:\n            mat[x][y] = 1\n    else:\n        mat[x] = {}\n        mat[x][y] = 1\nfor i in range(n):\n    x = i + 1\n    if x in mat:\n        tempAns = 0\n        lastItem = -1\n        lastI = m\n        if m not in mat[x]:\n            lastItem = m\n        for item in sorted(mat[x].keys(), reverse=True):\n            if lastItem != -1 and (lastItem < mat[x][item] + item or (lastI != item + 1 and mat[x][item] > 1)):\n                tempAns = -1\n                break\n            else:\n                if lastItem != -1:\n                    tempAns += lastItem - (mat[x][item] + item)\n                lastItem = mat[x][item] + item\n                lastI = item\n        if 1 not in mat[x] and tempAns != -1:\n            tempAns += lastItem - 1\n        print(tempAns)\n    else:\n        print(m - 1)"]