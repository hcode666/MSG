["mod = 10 ** 9 + 7\nfact = [0] * 5001\nifact = [0] * 5001\nfact[0] = 1\nifact[0] = 1\nfor i in range(1, 5000 + 1):\n    fact[i] = fact[i - 1] * i % mod\n    ifact[i] = ifact[i - 1] * pow(i, mod - 2, mod) % mod\n\ndef ncr(n, r, p):\n    ans = fact[n] * ifact[r] * ifact[n - r]\n    return ans % p\nfor _ in range(5000):\n    (n, k) = list(map(int, input().split()))\n    ans = 0\n    if n == 0 and k == 0:\n        break\n    (req_right, req_down) = (n - 1, n - 1)\n    if k % 2 == 1:\n        needed_right = (k - 1) // 2\n        ans = ncr(n - 2, needed_right, mod) * ncr(n - 2, needed_right, mod)\n        print(ans * 2 % mod)\n    else:\n        needed_right = k // 2\n        ans = ncr(n - 2, needed_right, mod) * ncr(n - 2, needed_right - 1, mod)\n        print(ans * 2 % mod)", "mod = 10 ** 9 + 7\nfact = [0] * 5001\nifact = [0] * 5001\nfact[0] = 1\nifact[0] = 1\nfor i in range(1, 5000 + 1):\n    fact[i] = fact[i - 1] * i % mod\n    ifact[i] = ifact[i - 1] * pow(i, mod - 2, mod) % mod\n\ndef ncr(n, r, p):\n    ans = fact[n] * ifact[r] * ifact[n - r]\n    return ans % p\nfor _ in range(5000):\n    (n, k) = list(map(int, input().split()))\n    ans = 0\n    if n == 0 and k == 0:\n        break\n    (req_right, req_down) = (n - 1, n - 1)\n    if k % 2 == 1:\n        needed_right = (k - 1) // 2\n        ans = ncr(n - 2, needed_right, mod) * ncr(n - 2, needed_right, mod)\n        print(ans * 2 % mod)\n    else:\n        needed_right = k // 2\n        ans = ncr(n - 2, needed_right, mod) * ncr(n - 2, needed_right - 1, mod)\n        print(ans * 2 % mod)", "mod = 10 ** 9 + 7\nfact = [0] * 5001\nifact = [0] * 5001\nfact[0] = 1\nifact[0] = 1\nfor i in range(1, 5000 + 1):\n    fact[i] = fact[i - 1] * i % mod\n    ifact[i] = ifact[i - 1] * pow(i, mod - 2, mod) % mod\n\ndef ncr(n, r, p):\n    ans = fact[n] * ifact[r] * ifact[n - r]\n    return ans % p\nfor _ in range(5000):\n    (n, k) = list(map(int, input().split()))\n    ans = 0\n    if n == 0 and k == 0:\n        break\n    (req_right, req_down) = (n - 1, n - 1)\n    if k % 2 == 1:\n        needed_right = (k - 1) // 2\n        ans = ncr(n - 2, needed_right, mod) * ncr(n - 2, needed_right, mod)\n        print(ans * 2 % mod)\n    else:\n        needed_right = k // 2\n        ans = ncr(n - 2, needed_right, mod) * ncr(n - 2, needed_right - 1, mod)\n        print(ans * 2 % mod)", "mod = 10 ** 9 + 7\nfact = [0] * 5001\nifact = [0] * 5001\nfact[0] = 1\nifact[0] = 1\nfor i in range(1, 5000 + 1):\n    fact[i] = fact[i - 1] * i % mod\n    ifact[i] = ifact[i - 1] * pow(i, mod - 2, mod) % mod\n\ndef ncr(n, r, p):\n    ans = fact[n] * ifact[r] * ifact[n - r]\n    return ans % p\nfor _ in range(5000):\n    (n, k) = list(map(int, input().split()))\n    ans = 0\n    if n == 0 and k == 0:\n        break\n    (req_right, req_down) = (n - 1, n - 1)\n    if k % 2 == 1:\n        needed_right = (k - 1) // 2\n        ans = ncr(n - 2, needed_right, mod) * ncr(n - 2, needed_right, mod)\n        print(ans * 2 % mod)\n    else:\n        needed_right = k // 2\n        ans = ncr(n - 2, needed_right, mod) * ncr(n - 2, needed_right - 1, mod)\n        print(ans * 2 % mod)", "mod = 10 ** 9 + 7\nfact = [0] * 5001\nifact = [0] * 5001\nfact[0] = 1\nifact[0] = 1\nfor i in range(1, 5000 + 1):\n    fact[i] = fact[i - 1] * i % mod\n    ifact[i] = ifact[i - 1] * pow(i, mod - 2, mod) % mod\n\ndef ncr(n, r, p):\n    ans = fact[n] * ifact[r] * ifact[n - r]\n    return ans % p\nfor _ in range(5000):\n    (n, k) = list(map(int, input().split()))\n    ans = 0\n    if n == 0 and k == 0:\n        break\n    (req_right, req_down) = (n - 1, n - 1)\n    if k % 2 == 1:\n        needed_right = (k - 1) // 2\n        total_places = n - 2\n        ans = ncr(total_places, needed_right, mod) * ncr(n - 2, needed_right, mod)\n        print(ans * 2 % mod)\n    else:\n        needed_right = k // 2\n        total_places = n - 2\n        ans = ncr(total_places, needed_right, mod) * ncr(n - 2, needed_right - 1, mod)\n        print(ans * 2 % mod)", "mod = 1000000007\nfact = [0] * 5001\nifact = [0] * 5001\nfact[0] = 1\nifact[0] = 1\nfor i in range(1, 5000 + 1):\n    fact[i] = fact[i - 1] * i % mod\n    ifact[i] = ifact[i - 1] * pow(i, mod - 2, mod) % mod\n\ndef ncr(n, r, p):\n    ans = fact[n] * ifact[r] * ifact[n - r]\n    return ans % p\nfor _ in range(5000):\n    (n, k) = list(map(int, input().split()))\n    ans = 0\n    if n == 0 and k == 0:\n        break\n    (req_right, req_down) = (n - 1, n - 1)\n    if k % 2 == 1:\n        needed_right = (k - 1) // 2\n        total_places = n - 2\n        ans = ncr(total_places, needed_right, mod) * ncr(n - 2, needed_right, mod)\n        print(ans * 2 % mod)\n    else:\n        needed_right = k // 2\n        total_places = n - 2\n        ans = ncr(total_places, needed_right, mod) * ncr(n - 2, needed_right - 1, mod)\n        print(ans * 2 % mod)", "mod = 1000000007\nfact = [0] * 5001\nifact = [0] * 5001\nfact[0] = 1\nifact[0] = 1\nfor i in range(1, 5000 + 1):\n    fact[i] = fact[i - 1] * i % mod\n    ifact[i] = ifact[i - 1] * pow(i, mod - 2, mod) % mod\n\ndef ncr(n, r, p):\n    ans = fact[n] * ifact[r] * ifact[n - r]\n    return ans % p\n\ndef solve():\n    (req_right, req_down) = (n - 1, n - 1)\n    if k % 2 == 1:\n        needed_right = (k - 1) // 2\n        total_places = n - 2\n        ans = ncr(total_places, needed_right, mod) * ncr(n - 2, needed_right, mod)\n        print(ans * 2 % mod)\n    else:\n        needed_right = k // 2\n        total_places = n - 2\n        ans = ncr(total_places, needed_right, mod) * ncr(n - 2, needed_right - 1, mod)\n        print(ans * 2 % mod)\nfor _ in range(5000):\n    (n, k) = list(map(int, input().split()))\n    ans = 0\n    if n == 0 and k == 0:\n        break\n    solve()", "mod = 1000000007\n\ndef integer_list():\n    return list(map(int, input().split()))\nfact = [0] * 5001\nifact = [0] * 5001\nfact[0] = 1\nifact[0] = 1\nfor i in range(1, 5000 + 1):\n    fact[i] = fact[i - 1] * i % mod\n    ifact[i] = ifact[i - 1] * pow(i, mod - 2, mod) % mod\n\ndef ncr(n, r, p):\n    ans = fact[n] * ifact[r] * ifact[n - r]\n    return ans % p\n\ndef main():\n    try:\n        (req_right, req_down) = (n - 1, n - 1)\n        if k % 2 == 1:\n            needed_right = (k - 1) // 2\n            total_places = n - 2\n            ans = ncr(total_places, needed_right, mod) * ncr(n - 2, needed_right, mod)\n            print(ans * 2 % mod)\n        else:\n            needed_right = k // 2\n            total_places = n - 2\n            ans = ncr(total_places, needed_right, mod) * ncr(n - 2, needed_right - 1, mod)\n            print(ans * 2 % mod)\n    except Exception as e:\n        print(e)\nfor _ in range(5000):\n    (n, k) = integer_list()\n    ans = 0\n    if n == 0 and k == 0:\n        break\n    main()"]