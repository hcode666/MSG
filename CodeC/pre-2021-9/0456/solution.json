["t = int(input())\nar = []\nfor _ in range(t):\n    n = int(input())\n    ar.append(n)\nmx = max(ar)\ndic = {1: 1}\nfor i in range(2, mx + 1):\n    vl = i\n    lst = dic[vl - 1]\n    nxt = lst + vl + lst * vl\n    dic[vl] = nxt % (10 ** 9 + 7)\nfor i in ar:\n    print(dic[i])", "a = list(range(1, 1000001))\nfor i in range(1, 1000000):\n    a[i] = (a[i] + a[i - 1] + a[i] * a[i - 1]) % 1000000007\nfor _ in range(int(input())):\n    print(a[int(input()) - 1])", "MOD = 10 ** 9 + 7\ndp = [0]\nfor i in range(1, 10 ** 6 + 1):\n    dp.append((dp[-1] * i + dp[-1] + i) % MOD)\nt = int(input())\nfor _ in range(t):\n    print(dp[int(input())])", "MOD = 10 ** 9 + 7\ndp = [0]\nfor i in range(1, 10 ** 6 + 1):\n    dp.append((dp[-1] * i + dp[-1] + i) % MOD)\nt = int(input())\nfor _ in range(t):\n    print(dp[int(input())])", "L = [0 for _ in range(0, 1000000)]\nL[0] = 1\nm = 1000000007\nfor i in range(1, 1000000):\n    L[i] = (L[i - 1] + i + 1 + (i + 1) * L[i - 1]) % m\nfor _ in range(int(input())):\n    N = int(input())\n    print(L[N - 1])", "l = [0] * 1000001\ns = 10 ** 9 + 7\nfor i in range(1, 10 ** 6 + 1):\n    l[i] = (i + l[i - 1] + i * l[i - 1]) % s\nfor _ in range(int(input())):\n    n = int(input())\n    print(l[n])", "s = 1000000007\nl = [0] * 10000001\nfor i in range(1, 10 ** 6 + 1):\n    l[i] = (l[i - 1] + i + i * l[i - 1]) % s\nfor _ in range(int(input())):\n    n = int(input())\n    print(l[n])", "s = 1000000007\nl = [0] * 10000001\nfor i in range(1, 10 ** 6 + 1):\n    l[i] = (l[i - 1] + i + i * l[i - 1]) % s\nfor _ in range(int(input())):\n    n = int(input())\n    print(l[n])", "s = 1000000007\nl = [0] * 10000001\nfor i in range(1, 10 ** 6 + 1):\n    l[i] = (l[i - 1] + i + i * l[i - 1]) % s\nfor _ in range(int(input())):\n    n = int(input())\n    print(l[n])", "s = 1000000007\nl = [0] * 10000001\nfor i in range(1, 10 ** 6 + 1):\n    l[i] = (l[i - 1] + i + i * l[i - 1]) % s\nfor _ in range(int(input())):\n    n = int(input())\n    print(l[n])", "factorial_array = []\nprime = 10 ** 9 + 7\ninitial = 1\nfor i in range(2, 1000003):\n    factorial_array.append(initial)\n    initial *= i\n    initial %= prime\nfor _ in range(int(input())):\n    n = int(input())\n    print((factorial_array[n] + prime - 1) % prime)", "l = [1] * 1000000\nk = len(l)\nfor i in range(1, k):\n    l[i] = (l[i - 1] + i + 1 + l[i - 1] * (i + 1)) % 1000000007\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(1)\n        continue\n    print(l[n - 1])", "l = [0, 1]\nx = 1\nfor y in range(2, 1000002):\n    k = (x + y + x * y) % 1000000007\n    l.append(k)\n    x = k\nfor _ in range(int(input())):\n    n = int(input())\n    print(l[n])", "l = [0, 1]\nx = 1\nfor y in range(2, 1000002):\n    k = (x + y + x * y) % 1000000007\n    l.append(k)\n    x = k\nfor _ in range(int(input())):\n    n = int(input())\n    print(l[n])", "l = [0, 1]\nans = 1\nmod = 10 ** 9 + 7\nfor i in range(2, 1000001):\n    ans = (ans + i + i * ans) % mod\n    l.append(ans)\nfor _ in range(int(input())):\n    n = int(input())\n    print(l[n])", "l = [0, 1]\nx = 1\nfor y in range(2, 1000002):\n    k = (x + y + x * y) % 1000000007\n    l.append(k)\n    x = k\nfor _ in range(int(input())):\n    n = int(input())\n    print(l[n])", "full = list(range(1, 1000002))\nc = 1000000007\nfor i in range(1, 1000001):\n    full[i] = (full[i - 1] + full[i] + full[i] * full[i - 1]) % c\nfor _ in range(int(input())):\n    n = int(input())\n    print(full[n - 1])", "mod = 1000000007\na = []\nfor i in range(1000001):\n    a.append(i + 1)\nfor i in range(1, 1000001):\n    a[i] = (a[i - 1] + a[i] + a[i - 1] * a[i]) % mod\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(a[n - 1])", "mod = 1000000007\na = []\nfor i in range(1000001):\n    a.append(i + 1)\nfor i in range(1, 1000001):\n    a[i] = (a[i - 1] + a[i] + a[i - 1] * a[i]) % mod\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(a[n - 1])", "t = int(input())\nl = [0] * 1000001\nl[0] = 1\nfor i in range(1, 1000001):\n    l[i] = l[i - 1] * (i + 1) % 1000000007\nfor i in range(t):\n    n = int(input())\n    print(l[n] - 1)", "res = [0, 1]\nX = 1\nfor Y in range(2, 1000001):\n    i = (X + Y + X * Y) % 1000000007\n    res.append(i)\n    X = i\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    print(res[N])", "mod = 10 ** 9 + 7\nans = [0, 1]\nfor i in range(2, 1000001):\n    ans.append((ans[-1] + i + ans[-1] * i) % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(ans[n])", "lst = [1]\nfor z in range(int(input())):\n    n = int(input())\n    mod = pow(10, 9) + 7\n    while len(lst) < n + 2:\n        lst.append(lst[-1] * len(lst) % mod)\n    print(lst[n + 1] - 1)", "T = int(input())\nl = [0] * 1000001\nl[0] = 1\nfor i in range(1, 1000001):\n    l[i] = l[i - 1] * (i + 1) % 1000000007\nfor x in range(T):\n    n = int(input())\n    print(l[n] - 1)", "t = int(input())\nl = [0] * 1000001\nl[0] = 1\nfor i in range(1, 1000001):\n    l[i] = l[i - 1] * (i + 1) % 1000000007\nfor i in range(t):\n    n = int(input())\n    print(l[n] - 1)", "t = int(input())\nl = [0] * 1000001\nl[0] = 1\nfor i in range(1, 1000001):\n    l[i] = l[i - 1] * (i + 1) % 1000000007\nfor i in range(t):\n    n = int(input())\n    print(l[n] - 1)", "t = int(input())\nl = [0] * 1000001\nl[0] = 1\nfor i in range(1, 1000001):\n    l[i] = l[i - 1] * (i + 1) % 1000000007\nfor i in range(t):\n    n = int(input())\n    print(l[n] - 1)", "from sys import stdin\nstdint = lambda : int(stdin.readline())\nmod = int(1000000000.0) + 7\nmaxRange = 1000001\ndp = [0] * maxRange\ndp[1] = 1\nfor i in range(2, maxRange):\n    dp[i] = (dp[i - 1] + i + dp[i - 1] * i) % mod\nfor _ in range(stdint()):\n    n = stdint()\n    print(dp[n])", "t = int(input())\ndp = [0] * 1000002\ndp[1] = 1\nfor i in range(2, 1000002):\n    dp[i] = dp[i - 1] * i % 1000000007\nwhile t > 0:\n    n = int(input())\n    print(dp[n + 1] - 1)\n    t -= 1", "a = list(range(1, 1000001))\nfor i in range(1, 1000000):\n    a[i] = (a[i] + a[i - 1] + a[i] * a[i - 1]) % 1000000007\nfor _ in range(int(input())):\n    print(a[int(input()) - 1])", "case = int(input())\nmod = 1000000007\nmaxval = 1000004\nprecomp = [1, 1]\nfor i in range(2, maxval):\n    precomp.append(precomp[-1] * i % mod % mod)\nfor i in range(case):\n    n = int(input())\n    print(precomp[n + 1] - 1)", "arr = [0] * 1000000\ns = 1\narr[0] = s\nfor i in range(2, 1000000 + 1):\n    s = (s + i + s * i) % 1000000007\n    arr[i - 1] = s\nfor _ in range(int(input())):\n    print(arr[int(input()) - 1])", "arr = [0] * 1000000\ns = 1\narr[0] = s\nfor i in range(2, 1000000 + 1):\n    s = (s + i + s * i) % 1000000007\n    arr[i - 1] = s\nfor _ in range(int(input())):\n    print(arr[int(input()) - 1])", "l = [1] * 1000005\nfor j in range(2, 1000001):\n    l[j] = (l[j - 1] + j + l[j - 1] * j) % 1000000007\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(l[n])", "l = [1] * 1000005\nfor j in range(2, 1000001):\n    l[j] = (l[j - 1] + j + l[j - 1] * j) % 1000000007\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(l[n])", "dp = [1 for i in range(1000002)]\nfor i in range(2, 1000002):\n    dp[i] = i * dp[i - 1] % 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    print((dp[n + 1] - 1) % 1000000007)", "MOD = 10 ** 9 + 7\nfactorial_list = [1 for _ in range(10 ** 6 + 2)]\nfor i in range(2, 10 ** 6 + 2):\n    factorial_list[i] = i * factorial_list[i - 1] % MOD\nfor _ in range(int(input())):\n    n = int(input())\n    print((factorial_list[n + 1] - 1) % MOD)", "modulo = 10 ** 9 + 7\nL = [0]\nfor i in range(1, 1000001):\n    L.append(i)\nfor i in range(2, 1000001):\n    L[i] = (L[i] + L[i - 1] + L[i] * L[i - 1]) % modulo\nfor _ in range(int(input())):\n    N = int(input())\n    print(L[N] % modulo)", "ans_array = [0] * (10 ** 6 + 1)\nnum = 1\nans = 0\nwhile num < 10 ** 6:\n    ans = num * ans + num + ans\n    ans %= 1000000007\n    ans_array[num] = ans\n    num += 1\ntests = int(input())\nfor i in range(tests):\n    num = int(input())\n    print(ans_array[num])", "(l, r) = ([], 1)\nMOD = 10 ** 9 + 7\nfor i in range(2, 1000001):\n    r = r * i % MOD\n    l.append(r - 1)\nfor _ in range(int(input())):\n    N = int(input())\n    print(l[N - 1])", "(l, r) = ([], 1)\nMOD = 10 ** 9 + 7\nfor i in range(2, 1000001):\n    r = r * i % MOD\n    l.append(r - 1)\nfor _ in range(int(input())):\n    N = int(input())\n    print(l[N - 1])", "a = []\nfor i in range(0, 10 ** 6 + 1):\n    a.append(i)\nfor i in range(2, 10 ** 6 + 1):\n    a[i] = (a[i] + a[i - 1] + a[i] * a[i - 1]) % 1000000007\nfor i in range(int(input())):\n    n = int(input())\n    print(a[n] % (10 ** 9 + 7))", "a = []\nfor i in range(0, 10 ** 6 + 1):\n    a.append(i)\nfor i in range(2, 10 ** 6 + 1):\n    a[i] = (a[i] + a[i - 1] + a[i] * a[i - 1]) % 1000000007\nfor i in range(int(input())):\n    n = int(input())\n    print(a[n] % (10 ** 9 + 7))", "a = []\nfor i in range(0, 10 ** 6 + 1):\n    a.append(i)\nfor i in range(2, 10 ** 6 + 1):\n    a[i] = (a[i] + a[i - 1] + a[i] * a[i - 1]) % 1000000007\nfor i in range(int(input())):\n    n = int(input())\n    print(a[n] % (10 ** 9 + 7))", "m = 1000000007\nl = [0] * 1000001\nfor i in range(10 ** 6 + 1):\n    l[i] = i\nfor i in range(2, 10 ** 6 + 1):\n    l[i] = (l[i] + l[i - 1] + l[i] * l[i - 1]) % m\nfor _ in range(int(input())):\n    n = int(input())\n    print(l[n] % m)", "m = 10 ** 9 + 7\nl = [1]\nfor i in range(2, 10 ** 6 + 2):\n    l.append(l[-1] % m * (i % m) % m)\nfor _ in range(int(input())):\n    n = int(input())\n    print((l[n] - 1) % m)", "m = 10 ** 9 + 7\na = [1]\nfor i in range(2, 10 ** 6 + 2):\n    a.append(a[-1] % m * (i % m) % m)\nfor j in range(int(input())):\n    n = int(input())\n    print((a[n] - 1) % m)", "l = []\ns = 1\nfor i in range(1, 1000002):\n    s = s * i % 1000000007\n    l.append((s - 1) % 1000000007)\nfor i in range(int(input())):\n    print(l[int(input())])", "l = []\ns = 1\nfor i in range(1, 1000002):\n    s = s * i % 1000000007\n    l.append((s - 1) % 1000000007)\nfor i in range(int(input())):\n    print(l[int(input())])", "m = 10 ** 9 + 7\na = [1]\nfor i in range(2, 10 ** 6 + 2):\n    a.append(a[-1] % m * (i % m) % m)\nfor j in range(int(input())):\n    n = int(input())\n    print((a[n] - 1) % m)", "mod = 10 ** 9 + 7\na = [1]\nfor i in range(2, 10 ** 6 + 2):\n    a.append(a[-1] % mod * (i % mod) % mod)\nfor testcases in range(int(input())):\n    n = int(input())\n    print((a[n] - 1) % mod)", "l = []\np = 1\nfor i in range(1, 1000002):\n    p = p * i % (10 ** 9 + 7)\n    l.append(p - 1)\nfor tc in range(int(input())):\n    print(l[int(input())])", "l = []\ns = 1\nfor i in range(1, 1000002):\n    s = s * i % 1000000007\n    l.append((s - 1) % 1000000007)\nfor i in range(int(input())):\n    print(l[int(input())])", "ans_array = [0] * (10 ** 6 + 1)\nnum = 1\nans = 0\nwhile num < 10 ** 6:\n    ans = num * ans + num + ans\n    ans %= 1000000007\n    ans_array[num] = ans\n    num += 1\ntests = int(input())\nfor i in range(tests):\n    num = int(input())\n    print(ans_array[num])", "a = 4\nb = 3\nc = 5\nl = [1, 5]\nfor i in range(2, 1000006):\n    c = (c * a + b) % 1000000007\n    l.append(c)\n    a += 1\n    b += 1\nt = int(input(''))\nfor i in range(t):\n    n = int(input(''))\n    print(l[n - 1])", "memo = {1: 1}\nfor _ in range(int(input())):\n    val = 1\n    n = int(input())\n    if n in memo:\n        print(memo[n])\n        continue\n    for i in range(2, n + 1):\n        val = (val + i + val * i) % (10 ** 9 + 7)\n        memo[i] = val\n    print(val)", "modulo = 10 ** 9 + 7\nL = [0] * 1000001\nfor i in range(1, 1000001):\n    L[i] = i\nfor i in range(2, 1000001):\n    L[i] = (L[i] + L[i - 1] + L[i] * L[i - 1]) % modulo\nfor _ in range(int(input())):\n    n = int(input())\n    print(L[n] % modulo)", "modulo = 10 ** 9 + 7\nL = [0] * 1000001\nfor i in range(1, 1000001):\n    L[i] = i\nfor i in range(2, 1000001):\n    L[i] = (L[i] + L[i - 1] + L[i] * L[i - 1]) % modulo\nfor _ in range(int(input())):\n    n = int(input())\n    print(L[n] % modulo)", "modulo = 10 ** 9 + 7\nL = [0] * 1000001\nfor i in range(1, 1000001):\n    L[i] = i\nfor i in range(2, 1000001):\n    L[i] = (L[i] + L[i - 1] + L[i] * L[i - 1]) % modulo\nfor _ in range(int(input())):\n    n = int(input())\n    print(L[n] % modulo)", "from bisect import bisect_left, bisect_right\nimport math\nfrom bisect import bisect_left\nfrom heapq import heapify, heappush, heappop\nfrom collections import deque\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\nfrom collections import deque, defaultdict\ninput = sys.stdin.readline\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\ndx = [-1, -2, 1, 2, 2, -2, -1, 1]\ndy = [2, 1, 2, 1, -1, -1, -2, -2]\na = [0, 1]\nfor i in range(2, 1000001):\n    x = a[i - 1]\n    y = i\n    s = (x % mod + y % mod + x % mod * (y % mod) % mod) % mod\n    a.append(s)\nfor _ in range(ii()):\n    print(a[ii()])", "m = 10 ** 9 + 7\na = [1]\nfor i in range(2, 10 ** 6 + 2):\n    a.append(a[-1] % m * (i % m) % m)\nfor _ in range(int(input())):\n    n = int(input())\n    print((a[n] - 1) % m)", "m = 10 ** 9 + 7\na = [1]\nfor i in range(2, 10 ** 6 + 2):\n    a.append(a[-1] % m * (i % m) % m)\nfor _ in range(int(input())):\n    n = int(input())\n    print((a[n] - 1) % m)", "n = 1000000\nm = 1000000007\narr = [0] * n\nfor i in range(n):\n    arr[i] = i + 1\nfor i in range(1, n):\n    arr[i] = (arr[i] % m + arr[i - 1] + arr[i] % m * arr[i - 1]) % m\nT = int(input())\nwhile T > 0:\n    n = int(input())\n    print(arr[n - 1])\n    T -= 1", "m = 1000000007\nn = 1000000\nT = int(input())\narray = [0] * n\nfor i in range(n):\n    array[i] = i\nfor i in range(1, n):\n    array[i] = (array[i] + array[i - 1] + array[i] * array[i - 1]) % m\nfor i in range(T):\n    n = int(input())\n    print(array[n] % m)", "s = 1\na = [1]\nm = 10 ** 9 + 7\nfor i in range(2, 10 ** 6 + 1):\n    s = (s + i + s * i) % m\n    a.append(s)\nfor _ in range(int(input())):\n    n = int(input())\n    print(a[n - 1])", "m = 10 ** 9 + 7\na = [1]\nfor i in range(2, 10 ** 6 + 2):\n    a.append(a[-1] % m * (i % m) % m)\nfor _ in range(int(input())):\n    n = int(input())\n    print((a[n] - 1) % m)", "m = 10 ** 9 + 7\na = [1]\nfor i in range(2, 10 ** 6 + 2):\n    a.append(a[-1] % m * (i % m) % m)\nfor _ in range(int(input())):\n    n = int(input())\n    print((a[n] - 1) % m)", "m = 10 ** 9 + 7\na = [1]\nfor i in range(2, 10 ** 6 + 2):\n    a.append(a[-1] % m * (i % m) % m)\nfor _ in range(int(input())):\n    n = int(input())\n    print((a[n] - 1) % m)", "from math import factorial\nmod = 1000000007\nMAXN = 1000002\nfac = [0] * MAXN\nfac[0] = 1\nfor i in range(1, MAXN):\n    fac[i] = fac[i - 1] * i % mod\nfor _ in range(int(input())):\n    n = int(input())\n    ans = (fac[n + 1] % mod - 1 % mod) % mod\n    print(ans % mod)", "m = 1000000007\nl = [0] * 1000001\nfor i in range(1000001):\n    l[i] = i\nfor i in range(2, 1000001):\n    l[i] = (l[i] + l[i - 1] + l[i] * l[i - 1]) % m\nfor i in range(int(input())):\n    n = int(input())\n    print(l[n] % m)", "m = 1000000007\nl = [0] * 1000001\nfor i in range(1000001):\n    l[i] = i\nfor i in range(2, 1000001):\n    l[i] = (l[i] + l[i - 1] + l[i] * l[i - 1]) % m\nfor i in range(int(input())):\n    n = int(input())\n    print(l[n] % m)", "t = int(input())\nprecompute = [0] * 1000002\nprecompute[1] = 1\nmod = 1000000000.0 + 7\nfor i in range(2, 1000002):\n    precompute[i] = precompute[i - 1] % mod * i % mod % mod\nfor _ in range(t):\n    n = int(input())\n    ans = (precompute[n + 1] - 1) % mod\n    print(int(ans))", "fact = [1] * (10 ** 6 + 2)\nmode = 10 ** 9 + 7\nfor i in range(1, 10 ** 6 + 2):\n    fact[i] = fact[i - 1] * i % mode\n\ndef solve():\n    n = int(input())\n    return (fact[n + 1] - 1) % mode\ntc = int(input())\nfor t in range(tc):\n    print(solve())", "from math import sqrt, ceil, floor, gcd, log2\nimport sys\nfrom sys import stdin, stdout\nfrom collections import Counter, defaultdict, OrderedDict, deque\nfrom itertools import combinations, groupby\nfrom time import time\nfrom heapq import heappop, heappush, heapify\nq = 1000002\nf = [1]\nmod = 1000000007\nfor i in range(1, q):\n    f.append(f[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(f[n + 1] - 1)", "q = 1000002\nf = [1]\nmod = 1000000007\nfor i in range(1, q):\n    f.append(f[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(f[n + 1] - 1)", "q = 1000002\nf = [1]\nmod = 1000000007\nfor i in range(1, q):\n    f.append(f[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(f[n + 1] - 1)", "M = 1000002\ndp = [1]\nmod = 1000000007\nfor i in range(1, M):\n    dp.append(dp[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(dp[n + 1] - 1)", "from sys import stdin\nm = 10 ** 9 + 7\na = [1]\nfor i in range(2, 1000005):\n    a.append(a[-1] * i % m)\nfor _ in range(int(stdin.readline())):\n    print(a[int(stdin.readline())] - 1)", "from sys import stdin\nm = 10 ** 9 + 7\na = [1]\nfor i in range(2, 1000005):\n    a.append(a[-1] * i % m)\nfor _ in range(int(stdin.readline())):\n    print(a[int(stdin.readline())] - 1)", "from sys import stdin\nm = 10 ** 9 + 7\na = [1]\nfor i in range(2, 1000005):\n    a.append(a[-1] * i % m)\nfor _ in range(int(stdin.readline())):\n    print(a[int(stdin.readline())] - 1)", "from sys import stdin\nm = 10 ** 9 + 7\na = [0] + [1]\nfor i in range(2, 1000005):\n    a.append((a[-1] + i + a[-1] * i) % m)\nfor _ in range(int(stdin.readline())):\n    print(a[int(stdin.readline())])", "import math\nMAX = 10 ** 6 + 7\nMOD = 10 ** 9 + 7\nf = [1]\nfor i in range(2, MAX):\n    f.append(f[-1] * i % MOD)\nfor _ in range(int(input())):\n    n = int(input())\n    print(f[n] - 1)", "M = 1000002\ndp = [1]\nmod = 1000000007\nfor i in range(1, M):\n    dp.append(dp[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(dp[n + 1] - 1)", "M = 1000002\ndp = [1]\nmod = 1000000007\nfor i in range(1, M):\n    dp.append(dp[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(dp[n + 1] - 1)", "M = 1000002\ndp = [1]\nmod = 1000000007\nfor i in range(1, M):\n    dp.append(dp[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(dp[n + 1] - 1)", "t = int(input())\nN = [0] * t\nfor i in range(t):\n    N[i] = int(input())\nn = max(N)\nr = [0] * n\nr[0] = 1\nval = 1\nfor i in range(2, n + 1):\n    val = (val + i + val * i) % (10 ** 9 + 7)\n    r[i - 1] = val\nfor i in range(t):\n    print(r[N[i] - 1] % (10 ** 9 + 7))", "M = 1000002\ndp = [1]\nmod = 1000000007\nfor i in range(1, M):\n    dp.append(dp[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(dp[n + 1] - 1)", "M = 1000002\ndp = [1]\nmod = 1000000007\nfor i in range(1, M):\n    dp.append(dp[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(dp[n + 1] - 1)", "M = 1000002\ndp = [1]\nmod = 1000000007\nfor i in range(1, M):\n    dp.append(dp[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(dp[n + 1] - 1)", "M = 1000002\ndp = [1]\nmod = 1000000007\nfor i in range(1, M):\n    dp.append(dp[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(dp[n + 1] - 1)", "M = 1000002\ndp = [1]\nmod = 1000000007\nfor i in range(1, M):\n    dp.append(dp[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(dp[n + 1] - 1)", "M = 1000002\ndp = [1]\nmod = 1000000007\nfor i in range(1, M):\n    dp.append(dp[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(dp[n + 1] - 1)", "M = 1000002\ndp = [1]\nmod = 1000000007\nfor i in range(1, M):\n    dp.append(dp[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(dp[n + 1] - 1)", "M = 1000002\ndp = [1]\nmod = 1000000007\nfor i in range(1, M):\n    dp.append(dp[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(dp[n + 1] - 1)", "M = 1000002\ndp = [1]\nmod = 1000000007\nfor i in range(1, M):\n    dp.append(dp[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(dp[n + 1] - 1)", "M = 1000002\ndp = [1]\nmod = 1000000007\nfor i in range(1, M):\n    dp.append(dp[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(dp[n + 1] - 1)", "M = 1000002\ndp = [1]\nmod = 1000000007\nfor i in range(1, M):\n    dp.append(dp[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(dp[n + 1] - 1)", "M = 1000002\ndp = [1]\nmod = 1000000007\nfor i in range(1, M):\n    dp.append(dp[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(dp[n + 1] - 1)", "M = 1000002\ndp = [1]\nmod = 1000000007\nfor i in range(1, M):\n    dp.append(dp[-1] * i % mod)\nfor _ in range(int(input())):\n    n = int(input())\n    print(dp[n + 1] - 1)"]