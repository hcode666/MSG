["def minBombs(kds):\n    bombs = 0\n    end = kds[0][1]\n    for kd in kds[1:]:\n        if kd[0] > end:\n            bombs += 1\n            end = kd[1]\n        else:\n            end = min(end, kd[1])\n    bombs += 1\n    return bombs\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    kds = []\n    for n in range(N):\n        (a, b) = map(int, input().split())\n        kds.append([a, b])\n    kds.sort(key=lambda kd: kd[0])\n    print(minBombs(kds))", "t = int(input())\nwhile t:\n    n = int(input())\n    kingdoms = []\n    for i in range(n):\n        kingdoms.append(list(map(int, input().split())))\n    kingdoms.sort(key=lambda x: x[1])\n    curr = 0\n    nex = 1\n    bombs = 0\n    while curr < n:\n        while kingdoms[nex][0] <= kingdoms[curr][1]:\n            nex += 1\n            if nex == n:\n                break\n        bombs += 1\n        if nex == n:\n            break\n        curr = nex\n        nex += 1\n        if nex == n:\n            bombs += 1\n            break\n    print(bombs)\n    t -= 1", "t = int(input())\nwhile t:\n    n = int(input())\n    kingdoms = []\n    for i in range(n):\n        kingdoms.append(list(map(int, input().split())))\n    kingdoms.sort(key=lambda x: x[1])\n    curr = 0\n    nex = 1\n    bombs = 0\n    while curr < n:\n        while kingdoms[nex][0] <= kingdoms[curr][1]:\n            nex += 1\n            if nex == n:\n                break\n        bombs += 1\n        if nex == n:\n            break\n        curr = nex\n        nex += 1\n        if nex == n:\n            bombs += 1\n            break\n    print(bombs)\n    t -= 1", "t = int(input())\nwhile t:\n    n = int(input())\n    kingdoms = []\n    for i in range(n):\n        kingdoms.append(list(map(int, input().split())))\n    kingdoms.sort(key=lambda x: x[1])\n    curr = 0\n    nex = 1\n    bombs = 0\n    while curr < n:\n        while kingdoms[nex][0] <= kingdoms[curr][1]:\n            nex += 1\n            if nex == n:\n                break\n        bombs += 1\n        if nex == n:\n            break\n        curr = nex\n        nex += 1\n        if nex == n:\n            bombs += 1\n            break\n    print(bombs)\n    t -= 1", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    array = []\n    for j in range(N):\n        l = input()\n        array.append([int(i) for i in l.split()])\n    array = sorted(array)\n    count = 1\n    point = array[0][1]\n    for j in range(1, N):\n        if array[j][0] <= point:\n            point = min(point, array[j][1])\n        else:\n            point = array[j][1]\n            count += 1\n    print(count)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    array = []\n    for j in range(N):\n        l = input()\n        array.append([int(i) for i in l.split()])\n    array = sorted(array)\n    count = 1\n    point = array[0][1]\n    for j in range(1, N):\n        if array[j][0] <= point:\n            point = min(point, array[j][1])\n        else:\n            point = array[j][1]\n            count += 1\n    print(count)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    array = []\n    for j in range(N):\n        l = input()\n        array.append([int(i) for i in l.split()])\n    array = sorted(array)\n    count = 1\n    point = array[0][1]\n    for j in range(1, N):\n        if array[j][0] <= point:\n            point = min(point, array[j][1])\n        else:\n            point = array[j][1]\n            count += 1\n    print(count)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    array = []\n    for j in range(N):\n        l = input()\n        array.append([int(i) for i in l.split()])\n    array = sorted(array)\n    count = 1\n    point = array[0][1]\n    for j in range(1, N):\n        if array[j][0] <= point:\n            point = min(point, array[j][1])\n        else:\n            point = array[j][1]\n            count += 1\n    print(count)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    array = []\n    for j in range(N):\n        l = input()\n        array.append([int(i) for i in l.split()])\n    array = sorted(array)\n    count = 1\n    point = array[0][1]\n    for j in range(1, N):\n        if array[j][0] <= point:\n            point = min(point, array[j][1])\n        else:\n            point = array[j][1]\n            count += 1\n    print(count)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    array = []\n    for j in range(N):\n        l = input()\n        array.append([int(i) for i in l.split()])\n    array = sorted(array)\n    count = 1\n    point = array[0][1]\n    for j in range(1, N):\n        if array[j][0] <= point:\n            point = min(point, array[j][1])\n        else:\n            point = array[j][1]\n            count += 1\n    print(count)", "for z in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    a.sort(key=lambda x: x[1])\n    x = 1\n    m = a[0][1]\n    for i in range(1, n):\n        if a[i][0] > m:\n            m = a[i][1]\n            x += 1\n    print(x)", "def ss(l):\n    n = len(l)\n    l = sorted(l, key=lambda x: x[1])\n    ans = 0\n    b = -float('inf')\n    for i in range(n):\n        (x, y) = l[i]\n        if x > b:\n            ans += 1\n            b = y\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    print(ss(l))", "import math\n\ndef solve():\n    n = int(input())\n    arr = list()\n    for _ in range(n):\n        (first, second) = input().split(' ')\n        arr.append([int(first), int(second)])\n    arr = sorted(arr, key=lambda x: x[1])\n    max_t = -math.inf\n    cnt = 0\n    for idx in range(n):\n        if arr[idx][0] > max_t:\n            max_t = arr[idx][1]\n            cnt += 1\n    print(cnt)\n\ndef main():\n    t = int(input())\n    while t:\n        solve()\n        t -= 1\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        (d, b) = map(int, input().split())\n        a.append([b, d])\n    a.sort()\n    c = 1\n    if n == 1:\n        print(1)\n    f = a[0][0]\n    for i in range(1, len(a)):\n        if f < a[i][1]:\n            c += 1\n            f = a[i][0]\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        (d, b) = map(int, input().split())\n        a.append([b, d])\n    a.sort()\n    c = 1\n    if n == 1:\n        print(1)\n    f = a[0][0]\n    for i in range(1, len(a)):\n        if f < a[i][1]:\n            c += 1\n            f = a[i][0]\n    print(c)", "def li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\nfor tastcas in range(int(input())):\n    n = ii()\n    k = n\n    a = []\n    bomb = 1\n    for i in range(n):\n        a.append(tuple(li()))\n    a.sort(key=lambda x: x[1])\n    fini = a[0][1]\n    for i in range(1, n):\n        if a[i][0] > fini:\n            bomb += 1\n            fini = a[i][1]\n    print(bomb)", "for _ in range(int(input())):\n    n = int(input())\n    vp = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        vp.append((a, b))\n    ans = 1\n    vp.sort(key=lambda x: x[1])\n    mx = vp[0][1]\n    for it in range(1, n):\n        if vp[it][0] > mx:\n            ans += 1\n            mx = vp[it][1]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    vp = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        vp.append((a, b))\n    ans = 1\n    vp.sort(key=lambda x: x[1])\n    mx = vp[0][1]\n    for it in range(1, n):\n        if vp[it][0] > mx:\n            ans += 1\n            mx = vp[it][1]\n    print(ans)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    dim = []\n    for nn in range(n):\n        (s, e) = map(int, input().split())\n        dim.append((e, s))\n    dim.sort()\n    ans = 1\n    (fi, se) = dim[0]\n    for (e, s) in dim:\n        if s <= fi:\n            ans = ans\n        else:\n            fi = e\n            ans = ans + 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    for j in range(n):\n        l = list(map(int, input().split()))\n        a.append(l)\n    a.sort()\n    b = 0\n    c = 0\n    while c < n:\n        b += 1\n        x = a[c][0]\n        y = a[c][1]\n        j = c + 1\n        while j < n:\n            if y >= a[j][0]:\n                x = a[j][0]\n                if a[j][1] < y:\n                    y = a[j][1]\n                j += 1\n            else:\n                break\n        c = j\n    print(b)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    a.sort()\n    count = 1\n    (f1, s1) = (a[0][0], a[0][1])\n    for i in range(len(a)):\n        if a[i][0] <= s1:\n            f1 = a[i][0]\n            s1 = min(s1, a[i][1])\n        else:\n            count += 1\n            f1 = a[i][0]\n            s1 = a[i][1]\n    print(count)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    a.sort()\n    count = 1\n    (f1, s1) = (a[0][0], a[0][1])\n    for i in range(len(a)):\n        if a[i][0] <= s1:\n            f1 = max(f1, a[i][0])\n            s1 = min(s1, a[i][1])\n        else:\n            count += 1\n            f1 = a[i][0]\n            s1 = a[i][1]\n    print(count)", "def main():\n    t = int(input())\n    while t:\n        t -= 1\n        n = int(input())\n        a = []\n        for i in range(n):\n            temp = list(map(int, input().split()))\n            a.append(temp)\n        a.sort()\n        bomb = 0\n        i = 0\n        while i < n:\n            bomb += 1\n            l_cur = a[i][0]\n            h_cur = a[i][1]\n            j = i + 1\n            while j < n:\n                if h_cur >= a[j][0]:\n                    l_cur = a[j][0]\n                    if a[j][1] < h_cur:\n                        h_cur = a[j][1]\n                    j += 1\n                else:\n                    break\n            i = j\n        print(bomb)\nmain()", "for _ in range(int(input())):\n    k = []\n    for i in range(int(input())):\n        k.append(list(map(int, input().split())))\n    k.sort(key=lambda x: x[0], reverse=True)\n    bomb = 1\n    min = k[0][0]\n    for j in range(1, len(k)):\n        if min > k[j][1]:\n            bomb += 1\n            min = k[j][0]\n    print(bomb)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l.append((a, b))\n    l.sort(key=lambda x: x[1])\n    max_l = l[0][1]\n    final_count = 1\n    for ind in range(1, n):\n        if l[ind][0] > max_l:\n            final_count += 1\n            max_l = l[ind][1]\n    print(final_count)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l.append((a, b))\n    l.sort(key=lambda x: x[1])\n    max_l = l[0][1]\n    final_count = 1\n    for ind in range(1, n):\n        if l[ind][0] > max_l:\n            final_count += 1\n            max_l = l[ind][1]\n    print(final_count)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l.append((a, b))\n    ans = 1\n    l.sort(key=lambda x: x[1])\n    last = l[0][1]\n    for p in range(1, n):\n        if l[p][0] > last:\n            ans += 1\n            last = l[p][1]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l.append((a, b))\n    ans = 1\n    l.sort(key=lambda x: x[1])\n    last = l[0][1]\n    for p in range(1, n):\n        if l[p][0] > last:\n            ans += 1\n            last = l[p][1]\n    print(ans)", "def minBombs(kds):\n    bombs = 0\n    end = kds[0][1]\n    for kd in kds[1:]:\n        if kd[0] > end:\n            bombs += 1\n            end = kd[1]\n        else:\n            end = min(end, kd[1])\n    bombs += 1\n    return bombs\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    kds = []\n    for n in range(N):\n        (a, b) = map(int, input().split())\n        kds.append([a, b])\n    kds.sort(key=lambda kd: kd[0])\n    print(minBombs(kds))", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l.append((a, b))\n    ans = 1\n    l.sort(key=lambda x: x[1])\n    last = l[0][1]\n    for p in range(1, n):\n        if l[p][0] > last:\n            ans += 1\n            last = l[p][1]\n    print(ans)", "def minBombs(kds):\n    bombs = 0\n    end = kds[0][1]\n    for kd in kds[1:]:\n        if kd[0] > end:\n            bombs += 1\n            end = kd[1]\n        else:\n            end = min(end, kd[1])\n    bombs += 1\n    return bombs\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    kds = []\n    for n in range(N):\n        (a, b) = map(int, input().split())\n        kds.append([a, b])\n    kds.sort(key=lambda kd: kd[0])\n    print(minBombs(kds))", "from math import *\nfrom collections import *\nfrom functools import *\n\ndef rvi():\n    return [*map(int, input().split())]\n\ndef ri():\n    return int(input())\nfor _ in range(ri()):\n    n = ri()\n    t = []\n    for i in range(n):\n        (a, b) = rvi()\n        t += [(a, 0, i), (b, 1, i)]\n    t.sort()\n    r = 0\n    i = 0\n    entered_and_alive = [False] * n\n    stack = []\n    while i < len(t):\n        (x, end, idx) = t[i]\n        if not end:\n            entered_and_alive[idx] = True\n            stack.append(idx)\n        elif entered_and_alive[idx]:\n            r += 1\n            for s in stack:\n                entered_and_alive[s] = False\n            stack = []\n        else:\n            pass\n        i += 1\n    print(r)", "from math import *\nfrom collections import *\nfrom functools import *\n\ndef rvi():\n    return [*map(int, input().split())]\n\ndef ri():\n    return int(input())\nfor _ in range(ri()):\n    n = ri()\n    t = []\n    for i in range(n):\n        (a, b) = rvi()\n        t += [(a, 0, i), (b, 1, i)]\n    t.sort()\n    r = 0\n    i = 0\n    entered_and_alive = [False] * n\n    stack = []\n    while i < len(t):\n        (x, end, idx) = t[i]\n        if not end:\n            entered_and_alive[idx] = True\n            stack.append(idx)\n        elif entered_and_alive[idx]:\n            r += 1\n            for s in stack:\n                entered_and_alive[s] = False\n            stack = []\n        else:\n            pass\n        i += 1\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l.append((a, b))\n    ans = 1\n    l.sort(key=lambda x: x[1])\n    last = l[0][1]\n    for p in range(1, n):\n        if l[p][0] > last:\n            ans += 1\n            last = l[p][1]\n    print(ans)", "for _ in range(int(input())):\n    k = []\n    for i in range(int(input())):\n        k.append(list(map(int, input().split())))\n    k.sort(key=lambda x: x[0], reverse=True)\n    bomb = 1\n    min = k[0][0]\n    for j in range(1, len(k)):\n        if min > k[j][1]:\n            bomb += 1\n            min = k[j][0]\n    print(bomb)", "for _ in range(int(input())):\n    k = []\n    for i in range(int(input())):\n        k.append(list(map(int, input().split())))\n    k.sort(key=lambda x: x[0], reverse=True)\n    bomb = 1\n    min = k[0][0]\n    for j in range(1, len(k)):\n        if min > k[j][1]:\n            bomb += 1\n            min = k[j][0]\n    print(bomb)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    k = []\n    for i in range(N):\n        k.append(list(map(int, input().split(' '))))\n    k.sort(key=lambda x: x[0], reverse=True)\n    bomb = 0\n    min = 0\n    for j in range(N):\n        if j == 0:\n            min = k[j][0]\n            bomb += 1\n        elif min > k[j][1]:\n            bomb += 1\n            min = k[j][0]\n    print(bomb)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l.append([a, b])\n    l.sort()\n    s = l[0][0]\n    e = l[0][1]\n    b = 0\n    for i in range(1, n):\n        if l[i][0] <= e:\n            s = l[i][0]\n            if l[i][1] <= e:\n                e = l[i][1]\n        else:\n            b += 1\n            s = l[i][0]\n            e = l[i][1]\n    print(b + 1)", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    kingdoms = [[int(x) for x in input().split()] for n in range(N)]\n    kingdoms.sort(key=lambda x: x[1])\n    ans = 0\n    newmax = -1\n    for i in range(len(kingdoms)):\n        if kingdoms[i][0] > newmax:\n            ans += 1\n            newmax = kingdoms[i][1]\n    print(ans)", "for _ in range(int(input())):\n    N = int(input())\n    cnt = 0\n    r = []\n    for i in range(N):\n        x = tuple(map(int, input().split()))\n        r.append(x)\n    r.sort(key=lambda x: x[1])\n    k = -1\n    for i in range(len(r)):\n        if r[i][0] > k:\n            cnt += 1\n            k = r[i][1]\n    print(cnt)", "for _ in range(int(input())):\n    N = int(input())\n    cnt = 0\n    r = []\n    for i in range(N):\n        x = tuple(map(int, input().split()))\n        r.append(x)\n    r.sort(key=lambda x: x[1])\n    k = -1\n    for i in range(len(r)):\n        if r[i][0] > k:\n            cnt += 1\n            k = r[i][1]\n    print(cnt)", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    a.sort()\n    bombs = 1\n    temp = None\n    for i in a:\n        if temp is None:\n            temp = i\n        elif i[0] > temp[1]:\n            bombs += 1\n            temp = i\n        elif i[1] < temp[1]:\n            temp = i\n        else:\n            temp = [i[0], temp[1]]\n    print(bombs)", "m = int(input())\nfor t in range(m):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    a.sort()\n    c = 0\n    temp = None\n    for i in a:\n        if temp is None:\n            temp = i\n        elif i[0] > temp[1]:\n            c += 1\n            temp = i\n        elif i[1] < temp[1]:\n            temp = i\n        else:\n            temp = [i[0], temp[1]]\n    print(c + 1)", "for t in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    a.sort()\n    c = 0\n    temp = None\n    for i in a:\n        if temp is None:\n            temp = i\n        elif i[0] > temp[1]:\n            c += 1\n            temp = i\n        elif i[1] < temp[1]:\n            temp = i\n        else:\n            temp = [i[0], temp[1]]\n    print(c + 1)", "import math\n\ndef calc(data):\n    data.sort(key=lambda x: x[1])\n    bomb_location = -1\n    bomb_count = 0\n    for (a, b) in data:\n        if a > bomb_location:\n            bomb_location = b\n            bomb_count += 1\n    return bomb_count\nfor _ in range(int(input())):\n    data = []\n    for _ in range(int(input())):\n        (a, b) = map(int, input().split())\n        data.append((a, b))\n    print(calc(data))", "import sys, math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        (a, b) = [int(c) for c in input().split()]\n        arr.append((a, b))\n    arr.sort(key=lambda x: x[1])\n    endpoint = -1\n    ans = 0\n    for (a, b) in arr:\n        if endpoint < a:\n            endpoint = b\n            ans += 1\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    a.sort()\n    c = 0\n    temp = None\n    for i in a:\n        if temp is None:\n            temp = i\n        elif i[0] > temp[1]:\n            c += 1\n            temp = i\n        elif i[1] < temp[1]:\n            temp = i\n        else:\n            temp = [i[0], temp[1]]\n    print(c + 1)", "for t in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    a.sort()\n    c = 0\n    temp = None\n    for i in a:\n        if temp is None:\n            temp = i\n        elif i[0] > temp[1]:\n            c += 1\n            temp = i\n        elif i[1] < temp[1]:\n            temp = i\n        else:\n            temp = [i[0], temp[1]]\n    print(c + 1)", "for t in range(0, int(input())):\n    n = int(input())\n    count = 0\n    arr = []\n    for i in range(0, n):\n        (a, b) = map(int, input().split())\n        arr.append([a, b])\n    arr.sort(key=lambda x: x[1])\n    k = -1\n    for i in range(0, n):\n        a = arr[i][0]\n        b = arr[i][1]\n        if a > k:\n            count += 1\n            k = b\n    print(count)", "for t in range(0, int(input())):\n    n = int(input())\n    count = 0\n    arr = []\n    for i in range(0, n):\n        (a, b) = map(int, input().split())\n        arr.append([a, b])\n    arr.sort(key=lambda x: x[1])\n    k = -1\n    for i in range(0, n):\n        a = arr[i][0]\n        b = arr[i][1]\n        if a > k:\n            count += 1\n            k = b\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l.append((a, b))\n    ans = 1\n    l.sort(key=lambda x: x[1])\n    last = l[0][1]\n    for p in range(1, n):\n        if l[p][0] > last:\n            ans += 1\n            last = l[p][1]\n    print(ans)", "def oneDimensionalKingdom(arr, n):\n    arr.sort(key=lambda x: x[1])\n    ans = 1\n    last = arr[0][1]\n    first = arr[0][0]\n    for i in range(1, n):\n        if arr[i][0] > last:\n            ans += 1\n            first = arr[i][0]\n            last = arr[i][1]\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, input().split())))\n    print(oneDimensionalKingdom(arr, n))", "def oneDimensionalKingdom(arr, n):\n    arr.sort(key=lambda x: x[1])\n    ans = 1\n    last = arr[0][1]\n    first = arr[0][0]\n    for i in range(1, n):\n        if arr[i][0] > last:\n            ans += 1\n            first = arr[i][0]\n            last = arr[i][1]\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, input().split())))\n    print(oneDimensionalKingdom(arr, n))", "def printMinBombs(intervals, n):\n    total = n\n    (ps, pe) = (-1, -1)\n    for interval in intervals:\n        if pe == -1:\n            (ps, pe) = interval\n        elif interval[0] <= pe:\n            total -= 1\n            if interval[1] <= pe:\n                pe = interval[1]\n        else:\n            (ps, pe) = interval\n    return total\nT = int(input())\nfor t in range(T):\n    intervals = []\n    n = int(input())\n    for i in range(n):\n        (st, en) = [int(j) for j in input().split()]\n        intervals.append([st, en])\n    intervals.sort()\n    print(printMinBombs(intervals, n))", "for _ in range(int(input())):\n    N = int(input())\n    a = []\n    for i in range(N):\n        a.append(list(map(int, input().split())))\n    a.sort(key=lambda x: x[1])\n    ans = 0\n    k = -1\n    for i in range(N):\n        l = a[i][0]\n        r = a[i][1]\n        if l > k:\n            ans += 1\n            k = r\n    print(ans)", "def main():\n    for _ in range(int(input())):\n        kingdoms = sorted([[int(a) for a in input().split(' ')] for _ in range(int(input()))])\n        i = kingdoms[0][0]\n        j = kingdoms[0][-1]\n        bombs = 1\n        for a in kingdoms[1:]:\n            if a[0] > j:\n                i = a[0]\n                j = a[1]\n                bombs += 1\n            else:\n                j = a[1] if a[1] < j else j\n        print(bombs)\nmain()", "for _ in range(int(input())):\n    arr = []\n    for _ in range(int(input())):\n        arr.append([int(i) for i in input().split()])\n    arr = sorted(arr)\n    first_val = arr[0][0]\n    last_val = arr[0][1]\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i][0] <= last_val:\n            if arr[i][1] < last_val:\n                last_val = arr[i][1]\n        else:\n            first_val = arr[i][0]\n            last_val = arr[i][1]\n            count += 1\n    print(count)", "for i in range(int(input())):\n    a = []\n    for j in range(int(input())):\n        a.append(input().split())\n        a[-1][0] = int(a[-1][0])\n        a[-1][1] = int(a[-1][1])\n    a.sort()\n    stack = []\n    numb = 1\n    queue = []\n    minv = a[0][1]\n    k = 0\n    for i in range(1, len(a)):\n        if a[i][0] > minv:\n            numb += 1\n            k = i\n            minv = a[i][1]\n            continue\n        if minv > a[i][1]:\n            minv = a[i][1]\n    print(numb)", "for _ in range(int(input())):\n    k = []\n    for _ in range(int(input())):\n        k.append([int(i) for i in input().split()])\n    k = sorted(k)\n    last_val = k[0][1]\n    count = 1\n    for i in range(1, len(k)):\n        if k[i][0] <= last_val:\n            if k[i][1] < last_val:\n                last_val = k[i][1]\n        else:\n            first_val = k[i][0]\n            last_val = k[i][1]\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    k = []\n    for _ in range(int(input())):\n        k.append([int(i) for i in input().split()])\n    k = sorted(k)\n    last_val = k[0][1]\n    count = 1\n    for i in range(1, len(k)):\n        if k[i][0] <= last_val:\n            if k[i][1] < last_val:\n                last_val = k[i][1]\n        else:\n            last_val = k[i][1]\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    k = []\n    for _ in range(int(input())):\n        k.append([int(i) for i in input().split()])\n    k = sorted(k)\n    first_val = k[0][0]\n    last_val = k[0][1]\n    count = 1\n    for i in range(1, len(k)):\n        if k[i][0] <= last_val:\n            if k[i][1] < last_val:\n                last_val = k[i][1]\n        else:\n            first_val = k[i][0]\n            last_val = k[i][1]\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    k = []\n    for _ in range(int(input())):\n        k.append([int(i) for i in input().split()])\n    k = sorted(k)\n    first_val = k[0][0]\n    last_val = k[0][1]\n    count = 1\n    for i in range(1, len(k)):\n        if k[i][0] <= last_val:\n            if k[i][1] < last_val:\n                last_val = k[i][1]\n        else:\n            first_val = k[i][0]\n            last_val = k[i][1]\n            count += 1\n    print(count)", "def min_bombs(interval):\n    interval = sorted(interval)\n    count = 0\n    last = None\n    for (start, end) in interval:\n        if last is None:\n            last = (start, end)\n        elif start > last[1]:\n            count += 1\n            last = (start, end)\n        elif end < last[1]:\n            last = (start, end)\n        else:\n            last = (start, last[1])\n    return count + 1\nTestCases = int(input())\nfor t in range(TestCases):\n    n = int(input())\n    interval = []\n    for i in range(n):\n        interval.append([int(x) for x in input().split()])\n    print(min_bombs(interval))", "def min_run(invs):\n    interval = sorted(invs)\n    counter = 1\n    last = None\n    for input_data_list in interval:\n        start = input_data_list[0]\n        end = input_data_list[1]\n        if last == None:\n            last = input_data_list\n        elif start > last[1]:\n            counter += 1\n            last = (start, end)\n        elif end < last[1]:\n            last = (start, end)\n        else:\n            last = (start, last[1])\n    return counter\ntestcases = int(input())\nfor i in range(testcases):\n    input_len = int(input())\n    intervals = []\n    for j in range(input_len):\n        intervals.append([int(x) for x in input().split()])\n    res = min_run(intervals)\n    print(res)", "def min_bombs(interval):\n    interval = sorted(interval)\n    count = 0\n    last = None\n    for (start, end) in interval:\n        if last is None:\n            last = (start, end)\n        elif start > last[1]:\n            count += 1\n            last = (start, end)\n        elif end < last[1]:\n            last = (start, end)\n        else:\n            last = (start, last[1])\n    return count + 1\nTestCases = int(input())\nfor t in range(TestCases):\n    n = int(input())\n    interval = []\n    for i in range(n):\n        interval.append([int(x) for x in input().split()])\n    print(min_bombs(interval))", "def min_bombs(interval):\n    interval = sorted(interval)\n    count = 0\n    last = None\n    for (start, end) in interval:\n        if last is None:\n            last = (start, end)\n        elif start > last[1]:\n            count += 1\n            last = (start, end)\n        elif end < last[1]:\n            last = (start, end)\n        else:\n            last = (start, last[1])\n    return count + 1\nTestCases = int(input())\nfor t in range(TestCases):\n    n = int(input())\n    interval = []\n    for i in range(n):\n        interval.append([int(x) for x in input().split()])\n    print(min_bombs(interval))", "def cnt_bomb(arr):\n    arr.sort()\n    cnt = 0\n    last = None\n    for (st, end) in arr:\n        if last is None:\n            last = (st, end)\n        elif st > last[1]:\n            cnt += 1\n            last = (st, end)\n        elif end < last[1]:\n            last = (st, end)\n        else:\n            last = (st, last[1])\n    return cnt + 1\nfor t in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    print(cnt_bomb(a))", "def cnt_bomb(arr):\n    arr.sort()\n    cnt = 0\n    last = None\n    for (st, end) in arr:\n        if last is None:\n            last = (st, end)\n        elif st > last[1]:\n            cnt += 1\n            last = (st, end)\n        elif end < last[1]:\n            last = (st, end)\n        else:\n            last = (st, last[1])\n    return cnt + 1\nfor t in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n    print(cnt_bomb(a))", "def cnt_bomb(interv):\n    interv = sorted(interv)\n    cnt = 0\n    last = None\n    for (st, end) in interv:\n        if last is None:\n            last = (st, end)\n        elif st > last[1]:\n            cnt += 1\n            last = (st, end)\n        elif end < last[1]:\n            last = (st, end)\n        else:\n            last = (st, last[1])\n    return cnt + 1\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    interv = []\n    for i in range(n):\n        interv.append([int(x) for x in input().split()])\n    print(cnt_bomb(interv))", "def cnt_bomb(interv):\n    interv = sorted(interv)\n    cnt = 0\n    last = None\n    for (st, end) in interv:\n        if last is None:\n            last = (st, end)\n        elif st > last[1]:\n            cnt += 1\n            last = (st, end)\n        elif end < last[1]:\n            last = (st, end)\n        else:\n            last = (st, last[1])\n    return cnt + 1\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    interv = []\n    for i in range(n):\n        interv.append([int(x) for x in input().split()])\n    print(cnt_bomb(interv))", "def cnt_bomb(interv):\n    interv = sorted(interv)\n    cnt = 0\n    last = None\n    for (st, end) in interv:\n        if last is None:\n            last = (st, end)\n        elif st > last[1]:\n            cnt += 1\n            last = (st, end)\n        elif end < last[1]:\n            last = (st, end)\n        else:\n            last = (st, last[1])\n    return cnt + 1\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    interv = []\n    for i in range(n):\n        interv.append([int(x) for x in input().split()])\n    print(cnt_bomb(interv))", "def solve(intervals):\n    intervals.sort(key=lambda x: x[1])\n    cnt = 0\n    stack = [intervals[0]]\n    for i in range(1, len(intervals)):\n        curr = intervals[i]\n        if stack and curr[0] <= stack[-1][-1]:\n            (ps, pe) = stack.pop()\n            stack.append([max(ps, curr[0]), min(pe, curr[-1])])\n        else:\n            stack.append(curr)\n    return len(stack)\nfor _ in range(int(input())):\n    n = int(input())\n    temp = []\n    while n:\n        temp.append(list(map(lambda x: int(x), input().split())))\n        n -= 1\n    print(solve(temp))", "def destryKingdoms():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        kingdoms = []\n        for i in range(n):\n            kingdoms.append(list(map(int, input().split())))\n        kingdoms.sort(key=lambda x: (x[0], x[1]))\n        r = kingdoms[0][1]\n        count = 0\n        for i in range(1, n):\n            if kingdoms[i][0] > r:\n                count += 1\n                r = kingdoms[i][1]\n            else:\n                r = min(kingdoms[i][1], r)\n        print(count + 1)\ndestryKingdoms()", "def minBombs(kds):\n    bombs = 1\n    end = kds[0][1]\n    for kd in kds[1:]:\n        if kd[0] > end:\n            bombs += 1\n            end = kd[1]\n        else:\n            end = min(end, kd[1])\n    return bombs\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    kds = []\n    for n in range(N):\n        (a, b) = map(int, input().split())\n        kds.append([a, b])\n    kds.sort(key=lambda kd: kd[0])\n    print(minBombs(kds))", "def minBombs(kds):\n    bombs = 0\n    end = kds[0][1]\n    for kd in kds[1:]:\n        if kd[0] > end:\n            bombs += 1\n            end = kd[1]\n        else:\n            end = min(end, kd[1])\n    bombs += 1\n    return bombs\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    kds = []\n    for n in range(N):\n        (a, b) = map(int, input().split())\n        kds.append([a, b])\n    kds.sort(key=lambda kd: kd[0])\n    print(minBombs(kds))", "try:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        dictk = [-1] * 2001\n        for o in range(n):\n            (a, b) = map(int, input().split())\n            dictk[b] = max(dictk[b], a)\n        maxk = -1\n        res = 0\n        for i in range(0, 2001):\n            if maxk < dictk[i]:\n                res += 1\n                maxk = i\n        print(res)\nexcept:\n    pass", "def minBombs(kds):\n    bombs = 0\n    end = kds[0][1]\n    for kd in kds[1:]:\n        if kd[0] > end:\n            bombs += 1\n            end = kd[1]\n        else:\n            end = min(end, kd[1])\n    bombs += 1\n    return bombs\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    kds = []\n    for n in range(N):\n        (a, b) = map(int, input().split())\n        kds.append([a, b])\n    kds.sort(key=lambda kd: kd[0])\n    print(minBombs(kds))", "def minBombs(kds):\n    bombs = 0\n    end = kds[0][1]\n    for kd in kds[1:]:\n        if kd[0] > end:\n            bombs += 1\n            end = kd[1]\n        else:\n            end = min(end, kd[1])\n    bombs += 1\n    return bombs\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    kds = []\n    for n in range(N):\n        (a, b) = map(int, input().split())\n        kds.append([a, b])\n    kds.sort(key=lambda kd: kd[0])\n    print(minBombs(kds))", "def minBombs(kds):\n    bombs = 0\n    end = kds[0][1]\n    for kd in kds[1:]:\n        if kd[0] > end:\n            bombs += 1\n            end = kd[1]\n        else:\n            end = min(end, kd[1])\n    bombs += 1\n    return bombs\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    kds = []\n    for n in range(N):\n        (a, b) = map(int, input().split())\n        kds.append([a, b])\n    kds.sort(key=lambda kd: kd[0])\n    print(minBombs(kds))", "T = int(input())\narr = [-1] * 2003\nfor i in range(T):\n    arr = [-1] * 2003\n    lst = 0\n    fst = 0\n    N = int(input())\n    for j in range(N):\n        (x, y) = map(int, input().split())\n        arr[y] = max(arr[y], x)\n        lst = max(lst, y)\n        fst = min(fst, y)\n    mx = -1\n    ans = 0\n    for i in range(fst, lst + 1):\n        if mx < arr[i]:\n            mx = i\n            ans += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    x = 0\n    y = 3000\n    z = 1\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    l.sort()\n    for i in l:\n        if i[0] > y:\n            z += 1\n            (x, y) = i\n        else:\n            x = i[0]\n            y = min(y, i[1])\n    print(z)", "for _ in range(int(input())):\n    x = 0\n    y = 3000\n    z = 1\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    l.sort()\n    for i in l:\n        if i[0] > y:\n            z += 1\n            (x, y) = i\n        else:\n            x = i[0]\n            y = min(y, i[1])\n    print(z)", "for _ in range(int(input())):\n    n = int(input())\n    res = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        res.append([a, b])\n    res = sorted(res, key=lambda x: x[1])\n    m = 10000000\n    cont = 1\n    for i in res:\n        if i[0] > m:\n            cont += 1\n            m = i[1]\n        else:\n            m = min(m, i[1])\n    print(cont)", "for _ in range(int(input())):\n    n = int(input())\n    res = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        res.append([a, b])\n    res = sorted(res, key=lambda x: x[1])\n    (p, q) = (0, 100000)\n    cont = 1\n    for i in res:\n        if i[0] > q:\n            cont += 1\n            (p, q) = i\n        else:\n            p = i[0]\n            q = min(q, i[1])\n    print(cont)", "for _ in range(int(input())):\n    (p, q, r) = (0, 20000, 1)\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    l.sort()\n    for i in l:\n        if i[0] > q:\n            r += 1\n            (p, q) = i\n        else:\n            p = i[0]\n            q = min(q, i[1])\n    print(r)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = []\n    for z in range(n):\n        (a, b) = map(int, input().split())\n        l.append([a, b])\n    l.sort(key=lambda x: x[1])\n    c = 1\n    first = l[0][1]\n    for i in range(1, len(l)):\n        if l[i][0] > first:\n            c += 1\n            first = l[i][1]\n    print(c)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = []\n    for z in range(n):\n        (a, b) = map(int, input().split())\n        l.append([a, b])\n    l.sort(key=lambda x: x[1])\n    c = 1\n    first = l[0][1]\n    for i in range(1, len(l)):\n        if l[i][0] > first:\n            c += 1\n            first = l[i][1]\n    print(c)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = []\n    for z in range(n):\n        (a, b) = map(int, input().split())\n        l.append([a, b])\n    l.sort(key=lambda x: x[1])\n    c = 1\n    first = l[0][1]\n    for i in range(1, len(l)):\n        if l[i][0] > first:\n            c += 1\n            first = l[i][1]\n    print(c)", "import math\nfrom math import log2, sqrt\nimport sys\nfrom sys import stdin, stdout\nimport os\nsys.setrecursionlimit(pow(10, 6))\nimport collections\nfrom collections import defaultdict\nfrom statistics import median\ninf = float('inf')\n\ndef present(x, y, lista):\n    return x <= lista[1] and y >= lista[0]\n\ndef get(x, y, lista):\n    left = max(x, lista[0])\n    right = min(y, lista[1])\n    return [left, right]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = [[] for i in range(n)]\n    for i in range(n):\n        l[i] = list(map(int, input().split()))\n    l.sort()\n    bombs = 1\n    x = l[0][0]\n    y = l[0][1]\n    for i in range(1, len(l)):\n        if present(x, y, l[i]):\n            (x, y) = get(x, y, l[i])\n        else:\n            bombs += 1\n            (x, y) = (l[i][0], l[i][1])\n    print(bombs)", "import math\nfrom math import log2, sqrt\nimport sys\nfrom sys import stdin, stdout\nimport os\nsys.setrecursionlimit(pow(10, 6))\nimport collections\nfrom collections import defaultdict\nfrom statistics import median\ninf = float('inf')\n\ndef present(x, y, lista):\n    return x <= lista[1] and y >= lista[0]\n\ndef get(x, y, lista):\n    left = max(x, lista[0])\n    right = min(y, lista[1])\n    return [left, right]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    l.sort()\n    bombs = 1\n    x = l[0][0]\n    y = l[0][1]\n    for i in range(1, len(l)):\n        if present(x, y, l[i]):\n            (x, y) = get(x, y, l[i])\n        else:\n            bombs += 1\n            (x, y) = (l[i][0], l[i][1])\n    print(bombs)", "import math\nfrom math import log2, sqrt\nimport sys\nfrom sys import stdin, stdout\nimport os\nsys.setrecursionlimit(pow(10, 6))\nimport collections\nfrom collections import defaultdict\nfrom statistics import median\ninf = float('inf')\n\ndef present(x, y, lista):\n    return x <= lista[1] and y >= lista[0]\n\ndef get(x, y, lista):\n    left = max(x, lista[0])\n    right = min(y, lista[1])\n    return [left, right]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = []\n    for i in range(n):\n        m = list(map(int, input().split()))\n        l.append(m)\n    l.sort()\n    bombs = 1\n    x = l[0][0]\n    y = l[0][1]\n    for i in range(len(l)):\n        if present(x, y, l[i]):\n            (x, y) = get(x, y, l[i])\n        else:\n            bombs += 1\n            (x, y) = (l[i][0], l[i][1])\n    print(bombs)", "from math import ceil, sqrt, log, gcd\nfrom collections import deque, defaultdict as dd\nfrom os import path\nimport sys\nt = int(input())\nfor f in range(t):\n    n = int(input())\n    a = []\n    x = 0\n    y = 10000000\n    count = 1\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    a.sort()\n    for i in range(n):\n        if a[i][0] > y:\n            count += 1\n            x = a[i][0]\n            y = a[i][1]\n        else:\n            x = a[i][0]\n            y = min(a[i][1], y)\n    print(count)", "t = int(input())\nfor f in range(t):\n    n = int(input())\n    a = []\n    x = 0\n    y = 10000000\n    count = 1\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    a.sort()\n    for k in a:\n        if k[0] > y:\n            count += 1\n            y = k[1]\n        else:\n            y = min(k[1], y)\n        x = k[0]\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    (a, r, c) = (0, 2000, 1)\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    l.sort()\n    for k in l:\n        if k[0] > r:\n            c += 1\n            (a, r) = k\n        else:\n            a = k[0]\n            r = min(r, k[1])\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    (a, r, c) = (0, 2000, 1)\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    l.sort()\n    for k in l:\n        if k[0] > r:\n            c += 1\n            (a, r) = k\n        else:\n            a = k[0]\n            r = min(r, k[1])\n    print(c)", "for t in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    a.sort()\n    m = 1\n    x = a[0][1]\n    for i in a[1:]:\n        s = i[0]\n        e = i[1]\n        if s > x:\n            m += 1\n            x = e\n        else:\n            x = min(x, e)\n    print(m)"]