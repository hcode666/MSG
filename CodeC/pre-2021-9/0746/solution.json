["import sys, math, heapq, bisect, random, itertools\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 5)\nints = lambda : list(map(int, input().split()))\np = 10 ** 9 + 7\ninf = 10 ** 20 + 7\nALPHA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nalpha = 'abcdefghijklmnopqrstuvwxyz'\nfor t in range(int(input())):\n    N = int(input())\n    n = N // 2\n    a = 26\n    r = 26\n    num = a * (pow(r, n, p) - 1)\n    den = pow(r - 1, p - 2, p)\n    ans = 2 * num * den % p\n    if N % 2:\n        ans = (ans + pow(26, n + 1, p)) % p\n    print(ans)", "import sys, math, heapq, bisect, random, itertools\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 5)\nints = lambda : list(map(int, input().split()))\np = 10 ** 9 + 7\ninf = 10 ** 20 + 7\nALPHA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nalpha = 'abcdefghijklmnopqrstuvwxyz'\nfor t in range(int(input())):\n    N = int(input())\n    n = N // 2\n    a = 26\n    r = 26\n    num = a * (pow(r, n, p) - 1)\n    den = pow(r - 1, p - 2, p)\n    ans = 2 * num * den % p\n    if N % 2:\n        ans = (ans + pow(26, n + 1, p)) % p\n    print(ans)", "inv = 280000002\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    if n % 2 == 0:\n        print(2 * ((pow(26, n // 2 + 1, mod) - 1) * inv - 1) % mod)\n    else:\n        print((2 * ((pow(26, n // 2 + 2, mod) - 1) * inv - 1) - pow(26, n // 2 + 1, mod)) % mod)\nfor i in range(int(input())):\n    solve()", "inv = 280000002\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    if n % 2 == 0:\n        n = n // 2 + 1\n        a = 2 * ((pow(26, n, mod) - 1) * inv - 1) % mod\n        print(a)\n    else:\n        n = n // 2 + 2\n        a = (2 * ((pow(26, n, mod) - 1) * inv - 1) - pow(26, n - 1, mod)) % mod\n        print(a)\nfor i in range(int(input())):\n    solve()", "inv = 280000002\nmod = 1000000007\nfor i in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        n = n // 2 + 1\n        a = 2 * ((pow(26, n, mod) - 1) * inv - 1) % mod\n        print(a)\n    else:\n        n = n // 2 + 2\n        a = (2 * ((pow(26, n, mod) - 1) * inv - 1) - pow(26, n - 1, mod)) % mod\n        print(a)", "inv = 280000002\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    if n % 2 == 0:\n        n = n // 2 + 1\n        a = 2 * ((pow(26, n, mod) - 1) * inv - 1) % mod\n        print(a)\n    else:\n        n = n // 2 + 2\n        a = (2 * ((pow(26, n, mod) - 1) * inv - 1) - pow(26, n - 1, mod)) % mod\n        print(a)\nfor i in range(int(input())):\n    solve()", "inv = 280000002\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    if n % 2 == 0:\n        n = n // 2 + 1\n        a = 2 * ((pow(26, n, mod) - 1) * inv - 1) % mod\n        return a\n    else:\n        n = n // 2 + 2\n        a = (2 * ((pow(26, n, mod) - 1) * inv - 1) - pow(26, n - 1, mod)) % mod\n        return a\nfor i in range(int(input())):\n    print(solve())", "MOD = 1000000007\n\ndef mult(A, B):\n    R = []\n    for i in range(len(A)):\n        row = []\n        for j in range(len(B[0])):\n            result = 0\n            for k in range(len(B)):\n                result += A[i][k] * B[k][j] % MOD\n                result %= MOD\n            row.append(result)\n        R.append(row)\n    return R\n\ndef power(A, p):\n    if p == 1:\n        return A\n    Anb2 = power(A, int(p / 2))\n    R = mult(Anb2, Anb2)\n    if p & 1:\n        return mult(R, A)\n    else:\n        return R\n\ndef powerNum(A, p):\n    if p == 1:\n        return A\n    Anb2 = powerNum(A, int(p / 2))\n    R = Anb2 * Anb2 % MOD\n    if p & 1:\n        return R * A % MOD\n    else:\n        return R\n\ndef powerSum(n, p):\n    A = [[n, 1], [0, 1]]\n    M0 = [[0], [n]]\n    Ap = power(A, p)\n    R = mult(Ap, M0)\n    return R[0][0]\n\ndef solution():\n    n = int(input())\n    if n == 1:\n        print(26)\n        return\n    sum = powerSum(26, int(n / 2)) * 2 % MOD\n    if n & 1:\n        sum += powerNum(26, int((n + 1) / 2))\n        sum %= MOD\n    print(sum)\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "MOD = 1000000007\n\ndef mult(A, B):\n    R = []\n    for i in range(len(A)):\n        row = []\n        for j in range(len(B[0])):\n            result = 0\n            for k in range(len(B)):\n                result += A[i][k] * B[k][j] % MOD\n                result %= MOD\n            row.append(result)\n        R.append(row)\n    return R\n\ndef power(A, p):\n    if p == 1:\n        return A\n    Anb2 = power(A, int(p / 2))\n    R = mult(Anb2, Anb2)\n    if p & 1:\n        return mult(R, A)\n    else:\n        return R\n\ndef powerNum(A, p):\n    if p == 1:\n        return A\n    Anb2 = powerNum(A, int(p / 2))\n    R = Anb2 * Anb2 % MOD\n    if p & 1:\n        return R * A % MOD\n    else:\n        return R\n\ndef powerSum(n, p):\n    A = [[n, 1], [0, 1]]\n    M0 = [[0], [n]]\n    Ap = power(A, p)\n    R = mult(Ap, M0)\n    return R[0][0]\n\ndef solution():\n    n = int(input())\n    if n == 1:\n        print(26)\n        return\n    sum = powerSum(26, int(n / 2)) * 2 % MOD\n    if n & 1:\n        sum += powerNum(26, int((n + 1) / 2))\n        sum %= MOD\n    print(sum)\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "MOD = 1000000007\n\ndef mult(A, B):\n    R = []\n    for i in range(len(A)):\n        row = []\n        for j in range(len(B[0])):\n            result = 0\n            for k in range(len(B)):\n                result += A[i][k] * B[k][j] % MOD\n                result %= MOD\n            row.append(result)\n        R.append(row)\n    return R\n\ndef power(A, p):\n    if p == 1:\n        return A\n    Anb2 = power(A, int(p / 2))\n    R = mult(Anb2, Anb2)\n    if p & 1:\n        return mult(R, A)\n    else:\n        return R\n\ndef powerNum(A, p):\n    if p == 1:\n        return A\n    Anb2 = powerNum(A, int(p / 2))\n    R = Anb2 * Anb2 % MOD\n    if p & 1:\n        return R * A % MOD\n    else:\n        return R\n\ndef powerSum(n, p):\n    A = [[n, 1], [0, 1]]\n    M0 = [[0], [n]]\n    Ap = power(A, p)\n    R = mult(Ap, M0)\n    return R[0][0]\n\ndef solution():\n    n = int(input())\n    if n == 1:\n        print(26)\n        return\n    sum = powerSum(26, int(n / 2)) * 2 % MOD\n    if n & 1:\n        sum += powerNum(26, int((n + 1) / 2))\n        sum %= MOD\n    print(sum)\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "MOD = 1000000007\n\ndef mult(A, B):\n    R = []\n    for i in range(len(A)):\n        row = []\n        for j in range(len(B[0])):\n            result = 0\n            for k in range(len(B)):\n                result += A[i][k] * B[k][j] % MOD\n                result %= MOD\n            row.append(result)\n        R.append(row)\n    return R\n\ndef power(A, p):\n    if p == 1:\n        return A\n    Anb2 = power(A, int(p / 2))\n    R = mult(Anb2, Anb2)\n    if p & 1:\n        return mult(R, A)\n    else:\n        return R\n\ndef powerNum(A, p):\n    if p == 1:\n        return A\n    Anb2 = powerNum(A, int(p / 2))\n    R = Anb2 * Anb2 % MOD\n    if p & 1:\n        return R * A % MOD\n    else:\n        return R\n\ndef powerSum(n, p):\n    A = [[n, 1], [0, 1]]\n    M0 = [[0], [n]]\n    Ap = power(A, p)\n    R = mult(Ap, M0)\n    return R[0][0]\n\ndef solution():\n    n = int(input())\n    if n == 1:\n        print(26)\n        return\n    sum = powerSum(26, int(n / 2)) * 2 % MOD\n    if n & 1:\n        sum += powerNum(26, int((n + 1) / 2))\n        sum %= MOD\n    print(sum)\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    solution()", "T = int(input())\ninv = 280000002\nmod = 1000000007\nfor i in range(T):\n    n = int(input())\n    if n % 2 == 0:\n        n = n // 2 + 1\n        a = 2 * ((pow(26, n, mod) - 1) * inv - 1) % mod\n        print(a)\n    else:\n        n = n // 2 + 2\n        a = 2 * ((pow(26, n, mod) - 1) * inv - 1) % mod\n        a = (a - pow(26, n - 1, mod)) % mod\n        print(a)", "T = int(input())\ninv = 280000002\nmod = 1000000007\nfor i in range(T):\n    n = int(input())\n    if n % 2 == 0:\n        n = n // 2 + 1\n        a = 2 * ((pow(26, n, mod) - 1) * inv - 1) % mod\n        print(a)\n    else:\n        n = n // 2 + 2\n        a = 2 * ((pow(26, n, mod) - 1) * inv - 1) % mod\n        a = (a - pow(26, n - 1, mod)) % mod\n        print(a)", "inv = 280000002\nmod = 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        n = n // 2 + 1\n        a = 2 * ((pow(26, n, mod) - 1) * inv - 1) % mod\n        print(a)\n    else:\n        n = n // 2 + 2\n        a = 2 * ((pow(26, n, mod) - 1) * inv - 1) % mod\n        a = (a - pow(26, n - 1, mod)) % mod\n        print(a)", "import sys\nimport math\nfrom queue import Queue\nimport heapq\n\ndef powermod(a, b, n):\n    if b == 0:\n        return 1 % n\n    if b == 1:\n        return a % n\n    r = powermod(a, b // 2, n)\n    r = r * r % n\n    if b & 1 == 1:\n        r = r * a % n\n    return r\n\ndef main(n):\n    exp = None\n    mult = 0\n    mod = 10 ** 9 + 7\n    if n & 1 == 1:\n        exp = (n - 1) // 2\n        s = powermod(26, (n + 1) // 2, mod)\n        mult = int(s)\n    else:\n        exp = n // 2\n    a = 52 * powermod(25, 1000000005, mod) % mod\n    b = (powermod(26, exp, mod) - 1) % mod\n    c = mult\n    return (a * b % mod + c % mod) % mod\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(main(n))", "import sys\nimport math\nfrom queue import Queue\nimport heapq\n\ndef powermod(a, b, n):\n    if b == 0:\n        return 1 % n\n    if b == 1:\n        return a % n\n    r = powermod(a, b // 2, n)\n    r = r * r % n\n    if b & 1 == 1:\n        r = r * a % n\n    return r\n\ndef main(n):\n    exp = None\n    mult = 0\n    mod = 10 ** 9 + 7\n    if n & 1 == 1:\n        exp = (n - 1) // 2\n        s = powermod(26, (n + 1) // 2, mod)\n        mult = int(s)\n    else:\n        exp = n // 2\n    a = 52 * powermod(25, 1000000005, mod) % mod\n    b = (powermod(26, exp, mod) - 1) % mod\n    c = mult\n    return (a * b % mod + c % mod) % mod\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(main(n))", "def get_power(a, N, m, D):\n    if N == 0:\n        return 1\n    elif N == 1:\n        return a\n    elif N in D:\n        return D[N]\n    else:\n        D[N] = get_power(a, N // 2, m, D) % m * (get_power(a, N - N // 2, m, D) % m) % m\n        return D[N]\nT = int(input())\nans = []\nm = 10 ** 9 + 7\nfor _ in range(T):\n    N = int(input())\n    if N % 2 == 0:\n        num = 52 % m * ((get_power(26, N // 2, m, {}) - 1) % m) % m\n        deno = get_power(25, m - 2, m, {})\n        t = num * deno % m\n    else:\n        N += 1\n        num = 52 % m * ((get_power(26, N // 2, m, {}) - 1) % m) % m\n        deno = get_power(25, m - 2, m, {})\n        t = (num * deno % m - get_power(26, N // 2, m, {})) % m\n    ans.append(t)\nfor i in ans:\n    print(i)", "def permutation(n, p):\n    r = 26\n    if n == 1:\n        return 26\n    elif n == 2:\n        return 52\n    elif n == 3:\n        return 728\n    elif n % 2 == 0:\n        return 2 * (bin_expo(r, n // 2 + 1, p) - r) * bin_expo(25, 1000000005, p) % p\n    else:\n        n = n + 1\n        return (2 * ((bin_expo(r, n // 2 + 1, p) - r) * bin_expo(r - 1, 1000000005, p)) - bin_expo(26, n // 2, p)) % p\n\ndef bin_expo(x, n, p):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return x % p\n    else:\n        temp = bin_expo(x, n // 2, p)\n        temp = temp * temp % p\n        if n % 2 == 0:\n            return temp\n        else:\n            return x % p * temp % p\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    p = 1000000007\n    print(int(permutation(n, p)))", "def permutation(n, p):\n    r = 26\n    if n == 1:\n        return 26\n    elif n == 2:\n        return 52\n    elif n == 3:\n        return 728\n    elif n % 2 == 0:\n        return 2 * (bin_expo(r, n // 2 + 1, p) - r) * bin_expo(25, 1000000005, p) % p\n    else:\n        n = n + 1\n        return (2 * ((bin_expo(r, n // 2 + 1, p) - r) * bin_expo(r - 1, 1000000005, p)) - bin_expo(26, n // 2, p)) % p\n\ndef bin_expo(x, n, p):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return x % p\n    else:\n        temp = bin_expo(x, n // 2, p)\n        temp = temp * temp % p\n        if n % 2 == 0:\n            return temp\n        else:\n            return x % p * temp % p\nfor _ in range(int(input())):\n    n = int(input())\n    p = 1000000007\n    print(int(permutation(n, p)))", "def permutation(n, p):\n    r = 26\n    if n == 1:\n        return 26\n    elif n == 2:\n        return 52\n    elif n == 3:\n        return 728\n    elif n % 2 == 0:\n        return 2 * (bin_expo(r, n // 2 + 1, p) - r) % p * bin_expo(25, 1000000005, p) % p % p % p\n    else:\n        n = n + 1\n        return (2 * ((bin_expo(r, n // 2 + 1, p) - r) % p * bin_expo(r - 1, 1000000005, p)) % p - bin_expo(26, n // 2, p) % p) % p\n\ndef bin_expo(x, n, p):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return x % p\n    else:\n        temp = bin_expo(x, n // 2, p)\n        temp = temp * temp % p\n        if n % 2 == 0:\n            return temp\n        else:\n            return x % p * temp % p\nfor _ in range(int(input())):\n    n = int(input())\n    p = 1000000007\n    print(int(permutation(n, p)))", "inv = 280000002\nmod = 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        n = n // 2 + 1\n        a = 2 * ((pow(26, n, mod) - 1) * inv - 1) % mod\n        print(a)\n    else:\n        n = n // 2 + 2\n        a = 2 * ((pow(26, n, mod) - 1) * inv - 1) % mod\n        a = (a - pow(26, n - 1, mod)) % mod\n        print(a)", "inverse = 280000002\nmod = 1000000007\nfor _ in range(int(input())):\n    N = int(input())\n    if N % 2 == 0:\n        N = N // 2 + 1\n        a = 2 * ((pow(26, N, mod) - 1) * inverse - 1) % mod\n        print(a)\n    else:\n        N = N // 2 + 2\n        a = 2 * ((pow(26, N, mod) - 1) * inverse - 1) % mod\n        a = (a - pow(26, N - 1, mod)) % mod\n        print(a)", "import math\n\ndef a(n):\n    x = math.ceil(n / 2)\n    e = 1000000007\n    c = pow(25, e - 2, e)\n    if n % 2 == 0:\n        a = (pow(26, x, e) - 1) % e\n        ans = 2 * a * 26 * c % e\n    elif x == 1:\n        ans = 26\n    else:\n        a = (pow(26, x - 1, e) - 1) % e\n        ans = 2 * a * 26 * c % e\n        ans = (ans + pow(26, x, e)) % e\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(a(n))", "import math\n\ndef abc(n):\n    x = math.ceil(n / 2)\n    e = 10 ** 9 + 7\n    c = pow(25, e - 2, e)\n    if n % 2 == 0:\n        a = (pow(26, x, e) - 1) % e\n        ans = 2 * a * 26 * c % e\n    elif x == 1:\n        ans = 26\n    else:\n        a = (pow(26, x - 1, e) - 1) % e\n        ans = 2 * a * 26 * c % e\n        ans = (ans + pow(26, x, e)) % e\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(abc(n))", "mod = 10 ** 9 + 7\n\ndef f(n):\n    k = n + 1 >> 1\n    ans = 26 * (pow(26, k, mod) - 1) * pow(25, mod - 2, mod) * 2\n    if n % 2:\n        ans -= pow(26, k, mod)\n    ans %= mod\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    print(f(n))", "from math import ceil\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    m = 10 ** 9 + 7\n    z = 26 * (pow(26, ceil(n / 2), m) % m - 1) * 280000002\n    if n % 2 == 0:\n        z *= 2\n    else:\n        c = n - 1\n        f = 26 * (pow(26, ceil(c / 2), m) % m - 1 % m) * 280000002\n        z += f\n    print(z % m)", "mod = 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(26)\n    elif n == 2:\n        print(52)\n    else:\n        k = -(-n // 2)\n        if n % 2 == 0:\n            ans = 26 * (1 + 26 * (pow(26, k - 1, mod) - 1) * pow(26 - 1, mod - 2, mod)) + 26 * (1 + 26 * (pow(26, k - 1, mod) - 1) * pow(26 - 1, mod - 2, mod))\n        else:\n            ans = 26 * (1 + 26 * (pow(26, k - 1, mod) - 1) * pow(26 - 1, mod - 2, mod)) + 26 * (1 + 26 * (pow(26, k - 2, mod) - 1) * pow(26 - 1, mod - 2, mod))\n        print(ans % mod)", "(mod, i) = (1000000007, 280000002)\nfor _ in range(int(input())):\n    n = int(input())\n    t = (2 * 26 * (pow(26, n // 2, mod) - 1) * i % mod + (n & 1) * pow(26, (n + 1) // 2, mod)) % mod\n    print(t)", "mod = 10 ** 9 + 7\ninv = pow(25, mod - 2, mod)\nfor i in range(int(input())):\n    N = int(input())\n    if N % 2 == 0:\n        r = 2 * 26 * (pow(26, N // 2, mod) - 1) % mod * inv % mod\n    else:\n        r = (27 * pow(26, N // 2 + 1, mod) - 52) % mod * inv % mod\n    print(r)", "mdl = 1000000007\ni25 = pow(25, mdl - 2, mdl)\nfor _ in range(int(input())):\n    n = int(input())\n    k = n // 2 + 1\n    ko = ke = pow(26, k, mdl) - 1\n    if 1 == n % 2:\n        ko = ((ko + 1) * 26 - 1) % mdl\n    tot = ((ko + ke) * i25 - 2) % mdl\n    if tot < 0:\n        tot += mdl\n    print(tot)", "def topowermod(v, e, m):\n    op = 1\n    v %= m\n    be = bin(e)\n    for c in be[2:]:\n        op = op * op % m\n        if '1' == c:\n            op = op * v % m\n    return op\n\ndef modinv(v, m):\n    v %= m\n    tb = [(m, 1, 0), (v, 0, 1)]\n    while tb[-1][0] > 0:\n        q = tb[-2][0] // tb[-1][0]\n        nr = list(tb[-2])\n        for e in range(3):\n            nr[e] -= q * tb[-1][e]\n        tb.append(tuple(nr))\n    if tb[-2][0] == 1:\n        a = tb[-2][2]\n        while a < 0:\n            a += m\n        return a % m\nmdl = 1000000007\ni25 = modinv(25, mdl)\nfor _ in range(int(input())):\n    n = int(input())\n    k = n // 2\n    ke = topowermod(26, k + 1, mdl)\n    ko = ke\n    if 1 == n % 2:\n        ko = 26 * ke % mdl\n    ans = ((ko - 1 + ke - 1) * i25 + mdl - 2) % mdl\n    print(ans)", "t = int(input())\nm = 7 + 10 ** 9\nden = pow(25, 1000000005, 1000000007)\nfor i in range(0, t):\n    n = int(input())\n    t = (n + 1) // 2\n    s = 52 * ((pow(26, t, 1000000007) - 1) % m) % m\n    s = s * den % m\n    if n % 2 == 0:\n        print(str(s))\n    else:\n        print(str((s - pow(26, t, 1000000007)) % 1000000007))", "import math\nm = 1000000007\nmm = 280000002\na = []\na.append(26)\nfor i in range(1, 35):\n    val = a[i - 1] * a[i - 1] % m\n    a.append(val)\n\ndef getbin(value):\n    s = []\n    for i in range(30):\n        s.append(str(value % 2))\n        value //= 2\n    s = s[::-1]\n    return ''.join(s)\n\ndef getval(index):\n    b = getbin(index)\n    s = 1\n    for i in range(30):\n        if b[29 - i] == '1':\n            s = s * a[i] % m\n    return s\nfor t in range(int(input())):\n    n = int(input())\n    x = math.ceil(n / 2)\n    if n % 2 == 0:\n        val = getval(x)\n        val -= 1\n        val *= 52\n        val *= mm\n        val = val % m\n        print(val)\n    else:\n        val = getval(x - 1)\n        val -= 1\n        val *= 52\n        val *= mm\n        val = val % m\n        val += getval(x)\n        val = val % m\n        print(val)", "M = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 52 * (pow(26, n // 2, M) - 1) * pow(25, M - 2, M)\n    if n % 2 == 1:\n        ans += pow(26, n // 2 + 1, M)\n    print(ans % M)", "M = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 52 * (pow(26, n // 2, M) - 1) * pow(25, M - 2, M)\n    if n % 2 == 1:\n        ans += pow(26, n // 2 + 1, M)\n    print(ans % M)", "def power(n):\n    if n == 0:\n        return 1\n    else:\n        tmp = power(n // 2) % 1000000007 % 1000000007\n        if n % 2 == 1:\n            return 26 * tmp * tmp % 1000000007\n        else:\n            return tmp * tmp % 1000000007\n\ndef powernext(n):\n    if n == 0:\n        return 1\n    else:\n        tmp = powernext(n // 2) % 1000000007 % 1000000007\n        if n % 2 == 1:\n            return 25 * tmp * tmp % 1000000007\n        else:\n            return tmp * tmp % 1000000007\na = powernext(1000000005) % 1000000007\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 1:\n        print((power(n // 2 + 1) + 52 * (power(n // 2) - 1) * a) % 1000000007)\n    else:\n        print(52 * (power(n // 2) - 1) * a % 1000000007)", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    if N % 2 == 0:\n        print(int(560000006 * (pow(26, N // 2, 1000000007) - 1)) % 1000000007)\n    else:\n        print((int(560000006 * (pow(26, N // 2, 1000000007) - 1)) + pow(26, N // 2 + 1, 1000000007)) % 1000000007)", "'__author__' == 'deepak Singh Mehta(learning to code)) '\nmod = 1000000007\n\ndef pow(n):\n    if n == 0:\n        return 1\n    if n % 2 == 1:\n        return 26 * pow(n - 1) % mod\n    tmp = pow(n // 2)\n    return tmp * tmp % mod\ntests = int(input())\nfor _ in range(tests):\n    n = int(input())\n    curr = 26 * (pow(n // 2) - 1)\n    while curr % 25 != 0:\n        curr += mod\n    curr //= 25\n    curr *= 2\n    if n % 2 == 1:\n        curr += pow(n // 2 + 1)\n    print(curr % mod)", "mbase = 10 ** 9 + 7\ninv_25 = 280000002\nt = int(input())\nfor it in range(t):\n    n = int(input())\n    m = n // 2\n    pow26mp1 = pow(26, m + 1, mbase)\n    res = 2 * (pow26mp1 - 26) * inv_25\n    if n % 2 == 1:\n        res += pow26mp1\n    res %= mbase\n    print(res)", "import sys\nm = 1000000007\nmi26 = pow(25, m - 2, m)\nsys.stdin.readline()\nfor line in sys.stdin.read().splitlines(0):\n    n = int(line)\n    ans = 1\n    if n & 1:\n        k = n // 2\n        ans = (2 * (26 * ((pow(26, k, m) - 1) % m) * mi26) % m % m + pow(26, (n + 1) // 2, m)) % m\n    else:\n        k = (n + 1) // 2\n        ans = 2 * (26 * ((pow(26, k, m) - 1) % m) * mi26) % m % m\n    print(ans)", "def main():\n    modulo = 1000000007\n    for T in range(int(input())):\n        N = int(input())\n        t = N // 2\n        ans = 560000006 * (pow(26, t, modulo) - 1) % modulo\n        if N % 2:\n            ans = (ans + pow(26, t + 1, modulo)) % modulo\n        print(ans)\nmain()", "import sys\nimport math\nfrom time import time\nfrom itertools import permutations, combinations\nimport collections\nimport functools\nfrom fractions import gcd, Fraction\nimport string\nimport operator\nimport bisect\n\nclass timed(object):\n\n    def __init__(self, func):\n        self.func = func\n\n    def __call__(self, *args):\n        t1 = time()\n        ret = self.func(*args)\n        dif_time = time() - t1\n        print('%s: returned %s in %f seconds' % (self.func.__name__, ret, dif_time))\n        return ret\n\ndef comp(f1, f2, *args):\n    t1 = time()\n    r1 = f1(*args) if f1 is not None else None\n    t2 = time()\n    r2 = f2(*args) if f2 is not None else None\n    t3 = time()\n    res = '%5s: %s in %f\\n%5s: %s in %f' % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)\n    if r1 != r2:\n        dr = '!! DIFFERENT RESULTS !!'\n        res = dr + '\\n' + res + '\\n' + dr\n    print(res)\n\ndef alg(i):\n    MODULO = 1000000007\n    res = 0\n    for n in range(1, i + 1):\n        K = (n + 1) // 2\n        res += pow(26, K, MODULO)\n        res %= MODULO\n    return res\n\ndef alg2(i):\n    MODULO = 1000000007\n    res = 0\n    pow_total = 1\n    for n in range(1, i + 1):\n        if n % 2 == 1:\n            pow_total *= 26\n            pow_total %= MODULO\n        res += pow_total\n        res %= MODULO\n    return res\nMODULO = 1000000007\n\ndef mat_mul(m1, m2):\n    x = len(m2[0])\n    y = len(m1)\n    result = [list([0] * x) for i in range(y)]\n    for i in range(len(m1)):\n        for j in range(len(m2[0])):\n            for k in range(len(m2)):\n                result[i][j] += m1[i][k] * m2[k][j]\n            result[i][j] %= MODULO\n    return result\n\ndef mat_exp(m, e):\n    assert e > 0\n    if e == 1:\n        return m\n    msq = mat_mul(m, m)\n    if e % 2 == 0:\n        return mat_exp(msq, e // 2)\n    else:\n        return mat_mul(m, mat_exp(msq, (e - 1) // 2))\n\ndef alg3(i):\n    res = 0\n    if i == 1:\n        return 26\n    matrix = [[26, 26], [0, 1]]\n    m = [[26], [1]]\n    if i % 2 == 0:\n        T = (i + 1) // 2\n    else:\n        T = i // 2\n    if T > 1:\n        m = mat_mul(mat_exp(matrix, T - 1), [[26], [1]])\n    if i % 2 == 1:\n        res = 2 * m[0][0] + pow(26, (i + 1) // 2, MODULO)\n    else:\n        res = 2 * m[0][0]\n    return res % MODULO\n\ndef main():\n    data = sys.stdin\n    nb = int(data.readline())\n    for icase in range(nb):\n        i = int(data.readline().strip())\n        res = alg3(i)\n        print(res)\nmain()", "def exp(a, n):\n    if n == 1:\n        return a\n    elif n % 2:\n        temp = exp(a, n // 2)\n        return temp % 1000000007 * temp % 1000000007 * a % 1000000007\n    else:\n        temp = exp(a, n // 2)\n        return temp % 1000000007 * temp % 1000000007 % 1000000007\n\ndef ans(n):\n    if n == 1:\n        return 26\n    elif n == 2:\n        return 52\n    if n % 2 == 0:\n        temp = exp(26, n / 2)\n        return (temp - 1) * 560000006 % 1000000007\n    else:\n        temp = exp(26, (n + 1) / 2)\n        return ((temp - 1) * 560000006 - temp) % 1000000007\nt = int(input())\nfor index in range(0, t):\n    n = int(input())\n    print(ans(n))", "MOD = 1000000007\n\ndef InverseEuler(t):\n    return pow(t, MOD - 2, MOD)\n\ndef aml(n):\n    p = n // 2\n    temp = 52 * (pow(26, p, MOD) + MOD - 1) * InverseEuler(25) % MOD\n    return temp\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    if n % 2 == 0:\n        print(aml(n))\n    else:\n        l = (n + 1) // 2\n        q = (pow(26, l, MOD) + aml(n)) % MOD\n        print(q)", "MOD = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    else:\n        temp = power(a, b // 2)\n        if b % 2 == 0:\n            return temp * temp % MOD\n        else:\n            return temp * temp * a % MOD\n\ndef InverseEuler(t):\n    return power(t, MOD - 2)\n\ndef aml(n):\n    p = n // 2\n    temp = 52 * (power(26, p) + MOD - 1) * InverseEuler(25) % MOD\n    return temp\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    if n % 2 == 0:\n        print(aml(n))\n    else:\n        l = (n + 1) // 2\n        q = (power(26, l) + aml(n)) % MOD\n        print(q)"]