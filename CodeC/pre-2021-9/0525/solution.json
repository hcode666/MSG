["import heapq\nn = int(input())\nyoung = []\nyoungrate = 0\nold = []\noldrate = 0\nage_to_rating = {}\nfor i in range(n):\n    (age, rating) = map(int, input().split())\n    age_to_rating[age] = rating\n    if len(young) == 0 or age < -young[0]:\n        heapq.heappush(young, -age)\n        youngrate += rating\n    else:\n        heapq.heappush(old, age)\n        oldrate += rating\n    if len(young) > len(old) + 1:\n        oldestyoung = -1 * heapq.heappop(young)\n        youngrate -= age_to_rating[oldestyoung]\n        heapq.heappush(old, oldestyoung)\n        oldrate += age_to_rating[oldestyoung]\n    elif len(old) > len(young):\n        youngestold = heapq.heappop(old)\n        oldrate -= age_to_rating[youngestold]\n        heapq.heappush(young, -youngestold)\n        youngrate += age_to_rating[youngestold]\n    print(abs(oldrate - youngrate))", "import heapq\nn = int(input())\nyoung = []\nyoungrate = 0\nold = []\noldrate = 0\nage_to_rating = {}\nfor i in range(n):\n    (age, rating) = map(int, input().split())\n    age_to_rating[age] = rating\n    if len(young) == 0 or age < -young[0]:\n        heapq.heappush(young, -age)\n        youngrate += rating\n    else:\n        heapq.heappush(old, age)\n        oldrate += rating\n    if len(young) > len(old) + 1:\n        oldestyoung = -1 * heapq.heappop(young)\n        youngrate -= age_to_rating[oldestyoung]\n        heapq.heappush(old, oldestyoung)\n        oldrate += age_to_rating[oldestyoung]\n    elif len(old) > len(young):\n        youngestold = heapq.heappop(old)\n        oldrate -= age_to_rating[youngestold]\n        heapq.heappush(young, -youngestold)\n        youngrate += age_to_rating[youngestold]\n    print(abs(oldrate - youngrate))", "from heapq import *\nn = int(input())\nyoung = []\nold = []\nc = 0\nd = {}\nfor i in range(1, n + 1):\n    (a, r) = map(int, input().split())\n    try:\n        d[a].append(r)\n    except:\n        d[a] = [r]\n    if i % 2 == 1:\n        if len(old) == 0 or a < old[0]:\n            heappush(young, -a)\n            c += r\n        else:\n            heappush(old, a)\n            x = heappop(old)\n            c += 2 * d[x][0]\n            c -= r\n            heappush(young, -x)\n    elif a >= -young[0]:\n        c -= r\n        heappush(old, a)\n    else:\n        x = -heappop(young)\n        heappush(young, -a)\n        c += r\n        c -= 2 * d[x][0]\n        heappush(old, x)\n    print(abs(c))", "from heapq import *\nn = int(input())\nyoung = []\nold = []\nc = 0\nd = {}\nfor i in range(1, n + 1):\n    (a, r) = map(int, input().split())\n    try:\n        d[a].append(r)\n    except:\n        d[a] = [r]\n    if i % 2 == 1:\n        if len(old) == 0 or a < old[0]:\n            heappush(young, -a)\n            c += r\n        else:\n            heappush(old, a)\n            x = heappop(old)\n            c += 2 * d[x][0]\n            c -= r\n            heappush(young, -x)\n    elif a >= -young[0]:\n        c -= r\n        heappush(old, a)\n    else:\n        x = -heappop(young)\n        heappush(young, -a)\n        c += r\n        c -= 2 * d[x][0]\n        heappush(old, x)\n    print(abs(c))", "import collections as clts\nimport math\nimport heapq\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\ndef lcm(x, y):\n    return int(x / gcd(x, y) * y)\n\ndef take_input(type='int'):\n    if type == 'int':\n        return int(input())\n    elif type == 'str':\n        return input()\n    elif type == 'list-int':\n        return list(map(int, input().split()))\n    elif type == 'list-float':\n        return list(map(float, input().split()))\n    else:\n        return None\nN = int(input())\nmaxYoung = math.ceil(N / 2)\nmaxOld = N - maxYoung\n(youngRat, oldRat) = (0, 0)\n(young, old) = ([], [])\nfor i in range(N):\n    (A, R) = take_input('list-int')\n    if i % 2 == 0:\n        if len(young) == 0:\n            heapq.heappush(young, (-A, R))\n            youngRat += R\n        elif A > -young[0][0] and A < old[0][0] or A < -young[0][0]:\n            heapq.heappush(young, (-A, R))\n            youngRat += R\n        elif A > old[0][0]:\n            (oldA, oldR) = heapq.heappop(old)\n            heapq.heappush(young, (-oldA, oldR))\n            heapq.heappush(old, (A, R))\n            oldRat += R - oldR\n            youngRat += oldR\n    elif len(old) == 0:\n        if A > -young[0][0]:\n            heapq.heappush(old, (A, R))\n            oldRat += R\n        elif A < -young[0][0]:\n            (youngA, youngR) = heapq.heappop(young)\n            heapq.heappush(young, (-A, R))\n            heapq.heappush(old, (-youngA, youngR))\n            oldRat += youngR\n            youngRat += R - youngR\n    elif A > old[0][0] or (A < old[0][0] and A > -young[0][0]):\n        heapq.heappush(old, (A, R))\n        oldRat += R\n    elif A < -young[0][0]:\n        (youngA, youngR) = heapq.heappop(young)\n        heapq.heappush(young, (-A, R))\n        heapq.heappush(old, (-youngA, youngR))\n        oldRat += youngR\n        youngRat += R - youngR\n    print(abs(youngRat - oldRat))", "from heapq import *\nn = int(input())\nyoung = []\nold = []\nc = 0\nd = {}\nfor i in range(1, n + 1):\n    (a, r) = map(int, input().split())\n    try:\n        d[a].append(r)\n    except:\n        d[a] = [r]\n    if i % 2 == 1:\n        if len(old) == 0 or a < old[0]:\n            heappush(young, -a)\n            c += r\n        else:\n            heappush(old, a)\n            x = heappop(old)\n            c += 2 * d[x][0]\n            c -= r\n            heappush(young, -x)\n    elif a >= -young[0]:\n        c -= r\n        heappush(old, a)\n    else:\n        x = -heappop(young)\n        heappush(young, -a)\n        c += r\n        c -= 2 * d[x][0]\n        heappush(old, x)\n    print(abs(c))", "import collections as clts\nimport math\nimport heapq\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\ndef lcm(x, y):\n    return int(x / gcd(x, y) * y)\n\ndef take_input(type='int'):\n    if type == 'int':\n        return int(input())\n    elif type == 'str':\n        return input()\n    elif type == 'list-int':\n        return list(map(int, input().split()))\n    elif type == 'list-float':\n        return list(map(float, input().split()))\n    else:\n        return None\nN = int(input())\nmaxYoung = math.ceil(N / 2)\nmaxOld = N - maxYoung\n(youngRat, oldRat) = (0, 0)\n(young, old) = ([], [])\nfor i in range(N):\n    (A, R) = take_input('list-int')\n    if i % 2 == 0:\n        if len(young) == 0:\n            heapq.heappush(young, (-A, R))\n            youngRat += R\n        elif A > -young[0][0] and A < old[0][0] or A < -young[0][0]:\n            heapq.heappush(young, (-A, R))\n            youngRat += R\n        elif A > old[0][0]:\n            (oldA, oldR) = heapq.heappop(old)\n            heapq.heappush(young, (-oldA, oldR))\n            heapq.heappush(old, (A, R))\n            oldRat += R - oldR\n            youngRat += oldR\n    elif len(old) == 0:\n        if A > -young[0][0]:\n            heapq.heappush(old, (A, R))\n            oldRat += R\n        elif A < -young[0][0]:\n            (youngA, youngR) = heapq.heappop(young)\n            heapq.heappush(young, (-A, R))\n            heapq.heappush(old, (-youngA, youngR))\n            oldRat += youngR\n            youngRat += R - youngR\n    elif A > old[0][0] or (A < old[0][0] and A > -young[0][0]):\n        heapq.heappush(old, (A, R))\n        oldRat += R\n    elif A < -young[0][0]:\n        (youngA, youngR) = heapq.heappop(young)\n        heapq.heappush(young, (-A, R))\n        heapq.heappush(old, (-youngA, youngR))\n        oldRat += youngR\n        youngRat += R - youngR\n    print(abs(youngRat - oldRat))", "from heapq import *\nn = int(input())\nyoung = []\nold = []\nc = 0\nd = {}\nfor i in range(1, n + 1):\n    (a, r) = map(int, input().split())\n    try:\n        d[a].append(r)\n    except:\n        d[a] = [r]\n    if i % 2 == 1:\n        if len(old) == 0 or a < old[0]:\n            heappush(young, -a)\n            c += r\n        else:\n            heappush(old, a)\n            x = heappop(old)\n            c += 2 * d[x][0]\n            c -= r\n            heappush(young, -x)\n    elif a >= -young[0]:\n        c -= r\n        heappush(old, a)\n    else:\n        x = -heappop(young)\n        heappush(young, -a)\n        c += r\n        c -= 2 * d[x][0]\n        heappush(old, x)\n    print(abs(c))", "import collections as clts\nimport math\nimport heapq\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\ndef lcm(x, y):\n    return int(x / gcd(x, y) * y)\n\ndef take_input(type='int'):\n    if type == 'int':\n        return int(input())\n    elif type == 'str':\n        return input()\n    elif type == 'list-int':\n        return list(map(int, input().split()))\n    elif type == 'list-float':\n        return list(map(float, input().split()))\n    else:\n        return None\nN = int(input())\nmaxYoung = math.ceil(N / 2)\nmaxOld = N - maxYoung\n(youngRat, oldRat) = (0, 0)\n(young, old) = ([], [])\nfor i in range(N):\n    (A, R) = take_input('list-int')\n    if i % 2 == 0:\n        if len(young) == 0:\n            heapq.heappush(young, (-A, R))\n            youngRat += R\n        elif A > -young[0][0] and A < old[0][0] or A < -young[0][0]:\n            heapq.heappush(young, (-A, R))\n            youngRat += R\n        elif A > old[0][0]:\n            (oldA, oldR) = heapq.heappop(old)\n            heapq.heappush(young, (-oldA, oldR))\n            heapq.heappush(old, (A, R))\n            oldRat += R - oldR\n            youngRat += oldR\n    elif len(old) == 0:\n        if A > -young[0][0]:\n            heapq.heappush(old, (A, R))\n            oldRat += R\n        elif A < -young[0][0]:\n            (youngA, youngR) = heapq.heappop(young)\n            heapq.heappush(young, (-A, R))\n            heapq.heappush(old, (-youngA, youngR))\n            oldRat += youngR\n            youngRat += R - youngR\n    elif A > old[0][0] or (A < old[0][0] and A > -young[0][0]):\n        heapq.heappush(old, (A, R))\n        oldRat += R\n    elif A < -young[0][0]:\n        (youngA, youngR) = heapq.heappop(young)\n        heapq.heappush(young, (-A, R))\n        heapq.heappush(old, (-youngA, youngR))\n        oldRat += youngR\n        youngRat += R - youngR\n    print(abs(youngRat - oldRat))", "import collections as clts\nimport math\nimport heapq\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\ndef lcm(x, y):\n    return int(x / gcd(x, y) * y)\n\ndef take_input(type='int'):\n    if type == 'int':\n        return int(input())\n    elif type == 'str':\n        return input()\n    elif type == 'list-int':\n        return list(map(int, input().split()))\n    elif type == 'list-float':\n        return list(map(float, input().split()))\n    else:\n        return None\nN = int(input())\nmaxYoung = math.ceil(N / 2)\nmaxOld = N - maxYoung\n(youngRat, oldRat) = (0, 0)\n(young, old) = ([], [])\nfor i in range(N):\n    (A, R) = take_input('list-int')\n    if i % 2 == 0:\n        if len(young) == 0:\n            heapq.heappush(young, (-A, R))\n            youngRat += R\n        elif A > -young[0][0] and A < old[0][0] or A < -young[0][0]:\n            heapq.heappush(young, (-A, R))\n            youngRat += R\n        elif A > old[0][0]:\n            (oldA, oldR) = heapq.heappop(old)\n            heapq.heappush(young, (-oldA, oldR))\n            heapq.heappush(old, (A, R))\n            oldRat += R - oldR\n            youngRat += oldR\n    elif len(old) == 0:\n        if A > -young[0][0]:\n            heapq.heappush(old, (A, R))\n            oldRat += R\n        elif A < -young[0][0]:\n            (youngA, youngR) = heapq.heappop(young)\n            heapq.heappush(young, (-A, R))\n            heapq.heappush(old, (-youngA, youngR))\n            oldRat += youngR\n            youngRat += R - youngR\n    elif A > old[0][0] or (A < old[0][0] and A > -young[0][0]):\n        heapq.heappush(old, (A, R))\n        oldRat += R\n    elif A < -young[0][0]:\n        (youngA, youngR) = heapq.heappop(young)\n        heapq.heappush(young, (-A, R))\n        heapq.heappush(old, (-youngA, youngR))\n        oldRat += youngR\n        youngRat += R - youngR\n    print(abs(youngRat - oldRat))", "import collections as clts\nimport math\nimport heapq\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\ndef lcm(x, y):\n    return int(x / gcd(x, y) * y)\n\ndef take_input(type='int'):\n    if type == 'int':\n        return int(input())\n    elif type == 'str':\n        return input()\n    elif type == 'list-int':\n        return list(map(int, input().split()))\n    elif type == 'list-float':\n        return list(map(float, input().split()))\n    else:\n        return None\nN = int(input())\nmaxYoung = math.ceil(N / 2)\nmaxOld = N - maxYoung\n(youngRat, oldRat) = (0, 0)\n(young, old) = ([], [])\nfor i in range(N):\n    (A, R) = take_input('list-int')\n    if i % 2 == 0:\n        if len(young) == 0:\n            heapq.heappush(young, (-A, R))\n            youngRat += R\n        elif A > -young[0][0] and A < old[0][0] or A < -young[0][0]:\n            heapq.heappush(young, (-A, R))\n            youngRat += R\n        elif A > old[0][0]:\n            (oldA, oldR) = heapq.heappop(old)\n            heapq.heappush(young, (-oldA, oldR))\n            heapq.heappush(old, (A, R))\n            oldRat += R - oldR\n            youngRat += oldR\n    elif len(old) == 0:\n        if A > -young[0][0]:\n            heapq.heappush(old, (A, R))\n            oldRat += R\n        elif A < -young[0][0]:\n            (youngA, youngR) = heapq.heappop(young)\n            heapq.heappush(young, (-A, R))\n            heapq.heappush(old, (-youngA, youngR))\n            oldRat += youngR\n            youngRat += R - youngR\n    elif A > old[0][0] or (A < old[0][0] and A > -young[0][0]):\n        heapq.heappush(old, (A, R))\n        oldRat += R\n    elif A < -young[0][0]:\n        (youngA, youngR) = heapq.heappop(young)\n        heapq.heappush(young, (-A, R))\n        heapq.heappush(old, (-youngA, youngR))\n        oldRat += youngR\n        youngRat += R - youngR\n    print(abs(youngRat - oldRat))", "import collections as clts\nimport math\nimport heapq\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\ndef lcm(x, y):\n    return int(x / gcd(x, y) * y)\n\ndef take_input(type='int'):\n    if type == 'int':\n        return int(input())\n    elif type == 'str':\n        return input()\n    elif type == 'list-int':\n        return list(map(int, input().split()))\n    elif type == 'list-float':\n        return list(map(float, input().split()))\n    else:\n        return None\nN = int(input())\nmaxYoung = math.ceil(N / 2)\nmaxOld = N - maxYoung\n(youngRat, oldRat) = (0, 0)\n(young, old) = ([], [])\nfor i in range(N):\n    (A, R) = take_input('list-int')\n    if i % 2 == 0:\n        if len(young) == 0:\n            heapq.heappush(young, (-A, R))\n            youngRat += R\n        elif A > -young[0][0] and A < old[0][0] or A < -young[0][0]:\n            heapq.heappush(young, (-A, R))\n            youngRat += R\n        elif A > old[0][0]:\n            (oldA, oldR) = heapq.heappop(old)\n            heapq.heappush(young, (-oldA, oldR))\n            heapq.heappush(old, (A, R))\n            oldRat += R - oldR\n            youngRat += oldR\n    elif len(old) == 0:\n        if A > -young[0][0]:\n            heapq.heappush(old, (A, R))\n            oldRat += R\n        elif A < -young[0][0]:\n            (youngA, youngR) = heapq.heappop(young)\n            heapq.heappush(young, (-A, R))\n            heapq.heappush(old, (-youngA, youngR))\n            oldRat += youngR\n            youngRat += R - youngR\n    elif A > old[0][0] or (A < old[0][0] and A > -young[0][0]):\n        heapq.heappush(old, (A, R))\n        oldRat += R\n    elif A < -young[0][0]:\n        (youngA, youngR) = heapq.heappop(young)\n        heapq.heappush(young, (-A, R))\n        heapq.heappush(old, (-youngA, youngR))\n        oldRat += youngR\n        youngRat += R - youngR\n    print(abs(youngRat - oldRat))", "from heapq import *\nn = int(input())\nyoung = []\nold = []\nc = 0\nd = {}\nfor i in range(1, n + 1):\n    (a, r) = map(int, input().split())\n    try:\n        d[a].append(r)\n    except:\n        d[a] = [r]\n    if i % 2 == 1:\n        if len(old) == 0 or a < old[0]:\n            heappush(young, -a)\n            c += r\n        else:\n            heappush(old, a)\n            x = heappop(old)\n            c += 2 * d[x][0]\n            c -= r\n            heappush(young, -x)\n    elif a >= -young[0]:\n        c -= r\n        heappush(old, a)\n    else:\n        x = -heappop(young)\n        heappush(young, -a)\n        c += r\n        c -= 2 * d[x][0]\n        heappush(old, x)\n    print(abs(c))", "from heapq import *\nn = int(input())\nyoung = []\nold = []\nc = 0\nd = {}\nfor i in range(1, n + 1):\n    (a, r) = map(int, input().split())\n    try:\n        d[a].append(r)\n    except:\n        d[a] = [r]\n    if i % 2 == 1:\n        if len(old) == 0 or a < old[0]:\n            heappush(young, -a)\n            c += r\n        else:\n            heappush(old, a)\n            x = heappop(old)\n            c += 2 * d[x][0]\n            c -= r\n            heappush(young, -x)\n    elif a >= -young[0]:\n        c -= r\n        heappush(old, a)\n    else:\n        x = -heappop(young)\n        heappush(young, -a)\n        c += r\n        c -= 2 * d[x][0]\n        heappush(old, x)\n    print(abs(c))", "from heapq import *\nn = int(input())\nyoung = []\nold = []\nc = 0\nd = {}\nfor i in range(1, n + 1):\n    (a, r) = map(int, input().split())\n    try:\n        d[a].append(r)\n    except:\n        d[a] = [r]\n    if i % 2 == 1:\n        if len(old) == 0 or a < old[0]:\n            heappush(young, -a)\n            c += r\n        else:\n            heappush(old, a)\n            x = heappop(old)\n            c += 2 * d[x][0]\n            c -= r\n            heappush(young, -x)\n    elif a >= -young[0]:\n        c -= r\n        heappush(old, a)\n    else:\n        x = -heappop(young)\n        heappush(young, -a)\n        c += r\n        c -= 2 * d[x][0]\n        heappush(old, x)\n    print(abs(c))", "from bisect import *\nfrom math import *\nchefList = list()\ndiff = 0\nfor _ in range(int(input())):\n    (age, value) = map(int, input().split(' '))\n    chef = (age, value)\n    index = bisect(chefList, chef)\n    chefList.insert(index, chef)\n    mid = ceil(len(chefList) / 2)\n    if index < mid:\n        diff -= value\n        if len(chefList) % 2 == 0:\n            diff += chefList[mid][1] * 2\n    else:\n        diff += value\n        if len(chefList) % 2 == 1:\n            diff -= chefList[mid - 1][1] * 2\n    print(abs(diff))", "from bisect import *\nfrom math import *\nchefList = list()\ndiff = 0\nfor _ in range(int(input())):\n    (age, value) = map(int, input().split(' '))\n    chef = (age, value)\n    index = bisect(chefList, chef)\n    chefList.insert(index, chef)\n    mid = ceil(len(chefList) / 2)\n    if index < mid:\n        diff -= value\n        if len(chefList) % 2 == 0:\n            diff += chefList[mid][1] * 2\n    else:\n        diff += value\n        if len(chefList) % 2 == 1:\n            diff -= chefList[mid - 1][1] * 2\n    print(abs(diff))", "from bisect import *\nfrom math import *\n\ndef main():\n    chefnb = int(input())\n    chefList = list()\n    diff = 0\n    for i in range(chefnb):\n        inp = input()\n        (age, val) = inp.split(' ')\n        chef = (int(age), int(val))\n        index = bisect(chefList, chef)\n        chefList.insert(index, chef)\n        mid = ceil(len(chefList) / 2.0)\n        if index < mid:\n            diff -= int(val)\n            if len(chefList) % 2 == 0:\n                diff += chefList[mid][1] * 2\n        else:\n            diff += int(val)\n            if len(chefList) % 2 == 1:\n                diff -= chefList[mid - 1][1] * 2\n        print(abs(diff))\nmain()", "from bisect import *\nfrom math import *\n\ndef main():\n    chefnb = int(input())\n    chefList = list()\n    diff = 0\n    for i in range(chefnb):\n        inp = input()\n        (age, val) = inp.split(' ')\n        chef = (int(age), int(val))\n        index = bisect(chefList, chef)\n        chefList.insert(index, chef)\n        mid = ceil(len(chefList) / 2.0)\n        if index < mid:\n            diff -= int(val)\n            if len(chefList) % 2 == 0:\n                diff += chefList[mid][1] * 2\n        else:\n            diff += int(val)\n            if len(chefList) % 2 == 1:\n                diff -= chefList[mid - 1][1] * 2\n        print(abs(diff))\nmain()", "from heapq import *\nyoung = []\nold = []\nheapify(young)\nheapify(old)\ny_rating = 0\no_rating = 0\nN = int(input())\nelement = tuple(map(int, input().split()))\nelement = (-element[0], element[1])\nheappush(young, element)\ny_rating += element[1]\nprint(y_rating)\nfor i in range(1, N):\n    element = tuple(map(int, input().split()))\n    if i % 2 == 1:\n        if element[0] < -young[0][0]:\n            element = (-element[0], element[1])\n            a = heappushpop(young, element)\n            y_rating = y_rating + element[1] - a[1]\n            o_rating += a[1]\n            a = (-a[0], a[1])\n            heappush(old, a)\n        else:\n            o_rating += element[1]\n            heappush(old, element)\n    elif element[0] < -young[0][0]:\n        y_rating += element[1]\n        element = (-element[0], element[1])\n        heappush(young, element)\n    else:\n        a = heappushpop(old, element)\n        o_rating = o_rating + element[1] - a[1]\n        y_rating = y_rating + a[1]\n        a = (-a[0], a[1])\n        heappush(young, a)\n    if y_rating > o_rating:\n        print(y_rating - o_rating)\n    else:\n        print(o_rating - y_rating)"]