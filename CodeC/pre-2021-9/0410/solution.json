["t = input()\nfor c in range(0, int(t)):\n    (a, b) = map(str, input().split())\n    a = int(a)\n    b = list(b)\n    r = 1 << a\n    c = [''] * r\n    for ii in range(r):\n        ss = int(str('{0:0' + str(a) + 'b}').format(ii), 2)\n        s = int(str('{0:0' + str(a) + 'b}').format(ii)[::-1], 2)\n        c[s] = b[ss]\n    print(str(''.join(c)))", "for i in range(int(input())):\n    (a, b) = map(str, input().split())\n    a = int(a)\n    b = list(b)\n    r = 1 << a\n    c = [''] * r\n    for ii in range(r):\n        ss = int(str('{0:0' + str(a) + 'b}').format(ii), 2)\n        s = int(str('{0:0' + str(a) + 'b}').format(ii)[::-1], 2)\n        c[s] = b[ss]\n    print(str(''.join(c)))", "for i in range(int(input())):\n    (a, b) = map(str, input().split())\n    a = int(a)\n    b = list(b)\n    r = 1 << a\n    c = [''] * r\n    for ii in range(r):\n        ss = int(str('{0:0' + str(a) + 'b}').format(ii), 2)\n        s = int(str('{0:0' + str(a) + 'b}').format(ii)[::-1], 2)\n        c[s] = b[ss]\n    print(str(''.join(c)))", "for i in range(int(input())):\n    (a, b) = map(str, input().split())\n    a = int(a)\n    b = list(b)\n    r = 1 << a\n    c = [''] * r\n    for ii in range(r):\n        ss = int(str('{0:0' + str(a) + 'b}').format(ii), 2)\n        s = int(str('{0:0' + str(a) + 'b}').format(ii)[::-1], 2)\n        c[s] = b[ss]\n    print(str(''.join(c)))", "for i in range(int(input())):\n    (a, b) = map(str, input().split())\n    a = int(a)\n    b = list(b)\n    r = 1 << a\n    c = [''] * r\n    for ii in range(r):\n        ss = int(str('{0:0' + str(a) + 'b}').format(ii), 2)\n        s = int(str('{0:0' + str(a) + 'b}').format(ii)[::-1], 2)\n        c[s] = b[ss]\n    print(str(''.join(c)))", "for i in range(int(input())):\n    (a, b) = map(str, input().split())\n    a = int(a)\n    b = list(b)\n    c = [''] * (1 << a)\n    for ii in range(1 << a):\n        ss = int(str('{0:0' + str(a) + 'b}').format(ii), 2)\n        s = int(str('{0:0' + str(a) + 'b}').format(ii)[::-1], 2)\n        c[s] = b[ss]\n    print(str(''.join(c)))", "for i in range(int(input())):\n    (a, b) = map(str, input().split())\n    a = int(a)\n    b = list(b)\n    c = [''] * 2 ** a\n    for ii in range(2 ** a):\n        ss = int(str('{0:0' + str(a) + 'b}').format(ii), 2)\n        s = int(str('{0:0' + str(a) + 'b}').format(ii)[::-1], 2)\n        c[s] = b[ss]\n    print(str(''.join(c)))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef outpltlt(lst):\n    sys.stdout.write('\\n'.join(map(str, (' '.join(map(str, a)) for a in lst))))\nans = []\nfor _ in range(inp()):\n    (k, s) = input().split()\n    code = [int(bin(x)[2:].rjust(int(k), '0')[::-1], base=2) for x in range(len(s))]\n    ans.append(''.join([s[code[x]] for x in range(len(s))]))\noutplt(ans)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef outpltlt(lst):\n    sys.stdout.write('\\n'.join(map(str, (' '.join(map(str, a)) for a in lst))))\nans = []\nfor _ in range(inp()):\n    (k, s) = input().split()\n    code = [int(bin(x)[2:].rjust(int(k), '0')[::-1], base=2) for x in range(len(s))]\n    ans.append(''.join([s[code[x]] for x in range(len(s))]))\noutplt(ans)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef outpltlt(lst):\n    sys.stdout.write('\\n'.join(map(str, (' '.join(map(str, a)) for a in lst))))\nans = []\nfor _ in range(inp()):\n    (k, s) = input().split()\n    (k, N) = (int(k), len(s))\n    code = [int(bin(x)[2:].rjust(k, '0')[::-1], base=2) for x in range(N)]\n    ans.append(''.join([s[code[x]] for x in range(N)]))\noutplt(ans)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef outpltlt(lst):\n    sys.stdout.write('\\n'.join(map(str, (' '.join(map(str, a)) for a in lst))))\nans = []\nfor _ in range(inp()):\n    (k, s) = input().split()\n    k = int(k)\n    N = 2 ** k\n    code = [int(bin(x)[2:].rjust(k, '0')[::-1], base=2) for x in range(N)]\n    an = [''] * N\n    for (i, a) in enumerate(s):\n        an[code[i]] = a\n    ans.append(''.join(an))\noutplt(ans)", "t = int(input())\nfor i in range(t):\n    (a, b) = input().split()\n    a = int(a)\n    s = [' ' for x in range(len(b))]\n    for j in range(len(b)):\n        c = str(bin(j))[2:]\n        c = '0' * (a - len(c)) + c\n        c = int(c[::-1], 2)\n        s[c] = b[j]\n    print(''.join(s))", "t = int(input())\nfor i in range(t):\n    (a, b) = input().split()\n    a = int(a)\n    s = [' ' for x in range(len(b))]\n    for j in range(len(b)):\n        c = str(bin(j))[2:]\n        c = '0' * (a - len(c)) + c\n        c = int(c[::-1], 2)\n        s[c] = b[j]\n    print(''.join(s))", "t = int(input())\nfor i in range(t):\n    (a, b) = input().split()\n    a = int(a)\n    s = [' ' for x in range(len(b))]\n    for j in range(len(b)):\n        c = str(bin(j))[2:]\n        c = '0' * (a - len(c)) + c\n        c = int(c[::-1], 2)\n        s[c] = b[j]\n    print(''.join(s))", "for _ in range(int(input())):\n    (a, b) = input().split()\n    a = int(a)\n    s = [' ' for i in range(len(b))]\n    for i in range(len(b)):\n        bin1 = str(bin(i))[2:]\n        bin1 = '0' * (a - len(bin1)) + bin1\n        bin1 = int(bin1[::-1], 2)\n        s[bin1] = b[i]\n    print(''.join(s))", "for _ in range(int(input())):\n    (a, b) = input().split()\n    a = int(a)\n    s = [' ' for i in range(len(b))]\n    for i in range(len(b)):\n        bin1 = str(bin(i))[2:]\n        bin1 = '0' * (a - len(bin1)) + bin1\n        bin1 = int(bin1[::-1], 2)\n        s[bin1] = b[i]\n    print(''.join(s))", "tests = int(input())\nfor i in range(tests):\n    (num, string) = input().split()\n    num = int(num)\n    arr = [0] * 2 ** num\n    arr[0] = string[0]\n    for j in range(2 ** num):\n        pos = j\n        ans = 0\n        count = 0\n        while j != 0:\n            if j & 1:\n                ans |= 1 << num - 1 - count\n            count += 1\n            j >>= 1\n        arr[ans] = string[pos]\n    print(''.join(arr))", "def reversebit(n, length):\n    a = []\n    for i in range(length):\n        a.append(n % 2)\n        n = n // 2\n    s = 0\n    for i in range(length):\n        s += a[i] * 2 ** (length - 1 - i)\n    return s\nfor _ in range(int(input())):\n    (n, s) = input().split()\n    n = int(n)\n    b = []\n    for i in range(2 ** n):\n        j = reversebit(i, n)\n        b.append(s[j])\n    print(''.join(b))", "def b(n, k):\n    s = ''\n    while n // 2 != 0:\n        s += str(n % 2)\n        n = n // 2\n    s += str(n)\n    if len(s) < k:\n        s = s + '0' * (k - len(s))\n    return s\nt = int(input())\nfor i in range(t):\n    (k, s) = map(str, input().split())\n    k = int(k)\n    y = 2 ** k\n    ans = ['0'] * y\n    for j in range(y):\n        x = int(b(j, k), 2)\n        ans[x] = s[j]\n    for j in ans:\n        print(j, end='')\n    print()", "def b(n, k):\n    s = ''\n    while n // 2 != 0:\n        s += str(n % 2)\n        n = n // 2\n    s += str(n)\n    if len(s) < k:\n        s = s + '0' * (k - len(s))\n    return s\nt = int(input())\nfor i in range(t):\n    (k, s) = map(str, input().split())\n    k = int(k)\n    y = 2 ** k\n    ans = ['0'] * y\n    for j in range(y):\n        x = int(b(j, k), 2)\n        ans[x] = s[j]\n    for j in ans:\n        print(j, end='')\n    print()", "def function(K, A):\n    arr = [0 for i in range(len(A))]\n    for i in range(len(A)):\n        data = A[i]\n        value = K\n        num = i\n        res = 0\n        while num:\n            res = res << 1\n            res += num & 1\n            num = num >> 1\n            value -= 1\n        if value > 0:\n            res = res << value\n        arr[res] = data\n    return ''.join(arr)\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        A = input().split(' ')\n        N = int(A[0])\n        S = A[1]\n        val = function(N, S)\n        print(val)\nmain()", "for i in range(int(input())):\n    (k, s) = map(str, input().split())\n    k = int(k)\n    a = ''\n    for i in range(2 ** k):\n        v = 0\n        x = k\n        while i > 0:\n            v = v + 2 ** (x - 1) * (i % 2)\n            i = i // 2\n            x = x - 1\n        a = a + s[int(v)]\n    print(a)", "for _ in range(int(input())):\n    lst = list(input().split())\n    (n, string) = (int(lst[0]), lst[1])\n    dictionary = dict()\n    for i in range(2 ** n):\n        temp = bin(i)[2:]\n        temp = '0' * (n - len(temp)) + temp\n        dictionary[temp] = string[i]\n    output = ''\n    for i in dictionary.keys():\n        rev = i[::-1]\n        output += dictionary[rev]\n    print(output)", "for _ in range(int(input())):\n    lst = list(input().split())\n    (n, string) = (int(lst[0]), lst[1])\n    dictionary = dict()\n    for i in range(2 ** n):\n        temp = bin(i)[2:]\n        temp = '0' * (n - len(temp)) + temp\n        dictionary[temp] = string[i]\n    output = ''\n    for i in dictionary.keys():\n        rev = i[::-1]\n        output += dictionary[rev]\n    print(output)", "n = int(input())\nwhile n > 0:\n    (a, b) = input().split()\n    a = int(a)\n    s = [' ' for i in range(len(b))]\n    for i in range(len(b)):\n        bin1 = str(bin(i))[2:]\n        bin1 = '0' * (a - len(bin1)) + bin1\n        bin1 = int(bin1[::-1], 2)\n        s[bin1] = b[i]\n    print(''.join(s))\n    n -= 1", "n = int(input())\nwhile n > 0:\n    (a, b) = input().split()\n    a = int(a)\n    s = [' ' for i in range(len(b))]\n    for i in range(len(b)):\n        bin1 = str(bin(i))[2:]\n        bin1 = '0' * (a - len(bin1)) + bin1\n        bin1 = int(bin1[::-1], 2)\n        s[bin1] = b[i]\n    print(''.join(s))\n    n -= 1", "import math\nfor _ in range(int(input())):\n    (k, s) = input().split()\n    n = 2 ** int(k)\n    a = []\n    r = []\n    for i in range(n):\n        b = str(bin(i).replace('0b', ''))\n        if len(b) == k:\n            a.append(b)\n        else:\n            for i in range(int(k) - len(b)):\n                b = '0' + b\n            a.append(b)\n    for i in a:\n        t = ''\n        for j in i:\n            t = j + t\n        r.append(t)\n    tp = ''\n    for i in r:\n        d = int(i, 2)\n        tp = tp + s[d]\n    print(tp)", "import math\nfor _ in range(int(input())):\n    (k, s) = input().split()\n    n = 2 ** int(k)\n    a = []\n    r = []\n    for i in range(n):\n        b = str(bin(i).replace('0b', ''))\n        if len(b) == k:\n            a.append(b)\n        else:\n            for i in range(int(k) - len(b)):\n                b = '0' + b\n            a.append(b)\n    for i in a:\n        t = ''\n        for j in i:\n            t = j + t\n        r.append(t)\n    tp = ''\n    for i in r:\n        d = int(i, 2)\n        tp = tp + s[d]\n    print(tp)", "import math\nfor _ in range(int(input())):\n    (k, s) = input().split()\n    n = 2 ** int(k)\n    a = []\n    r = []\n    for i in range(n):\n        b = str(bin(i).replace('0b', ''))\n        if len(b) == k:\n            a.append(b)\n        else:\n            for i in range(int(k) - len(b)):\n                b = '0' + b\n            a.append(b)\n    for i in a:\n        t = ''\n        for j in i:\n            t = j + t\n        r.append(t)\n    tp = ''\n    for i in r:\n        d = int(i, 2)\n        tp = tp + s[d]\n    print(tp)", "import math\nfor _ in range(int(input())):\n    (k, s) = input().split()\n    n = 2 ** int(k)\n    a = []\n    r = []\n    for i in range(n):\n        b = str(bin(i).replace('0b', ''))\n        if len(b) == k:\n            a.append(b)\n        else:\n            for i in range(int(k) - len(b)):\n                b = '0' + b\n            a.append(b)\n    for i in a:\n        t = ''\n        for j in i:\n            t = j + t\n        r.append(t)\n    tp = ''\n    for i in r:\n        d = int(i, 2)\n        tp = tp + s[d]\n    print(tp)", "import math\nfor _ in range(int(input())):\n    (k, s) = input().split()\n    n = 2 ** int(k)\n    a = []\n    r = []\n    for i in range(n):\n        b = str(bin(i).replace('0b', ''))\n        if len(b) == k:\n            a.append(b)\n        else:\n            for i in range(int(k) - len(b)):\n                b = '0' + b\n            a.append(b)\n    for i in a:\n        t = ''\n        for j in i:\n            t = j + t\n        r.append(t)\n    tp = ''\n    for i in r:\n        d = int(i, 2)\n        tp = tp + s[d]\n    print(tp)", "for i in range(int(input())):\n    (k, t) = input().strip().split()\n    k = int(k)\n    l = len(t)\n    a = [' ' for _ in range(l)]\n    for i in range(l):\n        s = str(bin(i))[2:]\n        s = '0' * (k - len(s)) + s\n        j = int(s[::-1], 2)\n        a[j] = t[i]\n    print(''.join(a))", "for i in range(int(input())):\n    (k, t) = input().strip().split()\n    k = int(k)\n    l = len(t)\n    a = [' ' for _ in range(l)]\n    for i in range(l):\n        s = str(bin(i))[2:]\n        s = '0' * (k - len(s)) + s\n        j = int(s[::-1], 2)\n        a[j] = t[i]\n    print(''.join(a))", "def transformIndex(k, index):\n    i = k\n    new_index = 0\n    while i > 0:\n        res = index % 2\n        index = index // 2\n        new_index = new_index << 1 | res\n        i -= 1\n    return new_index\n\ndef solution(k, message):\n    k = int(k)\n    ans = ''\n    for i in range(len(message)):\n        ans += message[transformIndex(k, i)]\n    return ans\nn = int(input())\ntests = []\nfor i in range(n):\n    tests.append(input().split(' '))\nfor test in tests:\n    print(solution(int(test[0]), test[1]))", "def transformIndex(k, index):\n    i = k\n    new_index = 0\n    while i > 0:\n        res = index % 2\n        index = index // 2\n        new_index = new_index << 1 | res\n        i -= 1\n    return new_index\n\ndef solution(k, message):\n    k = int(k)\n    ans = ''\n    for i in range(len(message)):\n        ans += message[transformIndex(k, i)]\n    return ans\nn = int(input())\ntests = []\nfor i in range(n):\n    tests.append(input().split(' '))\nfor test in tests:\n    print(solution(int(test[0]), test[1]))", "t = int(input())\nfor i in range(t):\n    inp = input()\n    arr = [int(i) if i.isdigit() else i for i in inp.split()]\n    li = [0] * 2 ** arr[0]\n    for (j, k) in enumerate(arr[1]):\n        ind = bin(j)[2:]\n        av = arr[0] - len(ind)\n        f = '0' * av + ind\n        mod_place = int(f[::-1], 2)\n        li[mod_place] = k\n    print(''.join(li))", "t = int(input())\nfor i in range(t):\n    inp = input()\n    arr = [int(i) if i.isdigit() else i for i in inp.split()]\n    li = [0] * 2 ** arr[0]\n    for (j, k) in enumerate(arr[1]):\n        ind = bin(j)[2:]\n        av = arr[0] - len(ind)\n        f = '0' * av + ind\n        mod_place = int(f[::-1], 2)\n        li[mod_place] = k\n    print(''.join(li))", "def decimal_to_binary(n):\n    if n == 0:\n        list1 = []\n        list1.append(0)\n        return list1\n    list1 = []\n    while n:\n        list1.append(n % 2)\n        n = n // 2\n    list1.reverse()\n    return list1\n\ndef binary_to_decimal(list1, k):\n    ans = 0\n    size = len(list1) - 1\n    for i in range(size, 0 - 1, -1):\n        if list1[i] == 1:\n            ans += 2 ** k\n        k -= 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    line1 = input()\n    (k, st) = list(line1.split())\n    k = int(k)\n    st = list(st)\n    track = set()\n    for i in range(2 ** k):\n        if i in track:\n            continue\n        rev_binary = decimal_to_binary(i)\n        i1 = binary_to_decimal(rev_binary, k - 1)\n        track.add(i1)\n        temp = st[i]\n        st[i] = st[i1]\n        st[i1] = temp\n    for value in st:\n        print(value, sep='', end='')\n    print()", "def decimal_to_binary(n):\n    if n == 0:\n        list1 = []\n        list1.append(0)\n        return list1\n    list1 = []\n    while n:\n        list1.append(n % 2)\n        n = n // 2\n    list1.reverse()\n    return list1\n\ndef binary_to_decimal(list1, k):\n    ans = 0\n    size = len(list1) - 1\n    for i in range(size, 0 - 1, -1):\n        if list1[i] == 1:\n            ans += 2 ** k\n        k -= 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    line1 = input()\n    (k, st) = list(line1.split())\n    k = int(k)\n    st = list(st)\n    track = set()\n    for i in range(2 ** k):\n        if i in track:\n            continue\n        rev_binary = decimal_to_binary(i)\n        i1 = binary_to_decimal(rev_binary, k - 1)\n        track.add(i1)\n        temp = st[i]\n        st[i] = st[i1]\n        st[i1] = temp\n    for value in st:\n        print(value, sep='', end='')\n    print()", "n = int(input())\nfor i in range(n):\n    st = input().split(' ')\n    k = int(st[0])\n    msg = list(st[1])\n    arr = [x for x in range(2 ** k)]\n    for i in range(len(msg)):\n        binNum = bin(i).replace('0b', '').zfill(k)\n        revbinIndex = int(binNum[::-1], 2)\n        arr[revbinIndex] = msg[i]\n    for i in arr:\n        print(i, end='')\n    print()", "T = int(input())\nfor i in range(T):\n    (K, text) = input().strip().split()\n    K = int(K)\n    L = len(text)\n    arr = [' ' for _ in range(L)]\n    for i in range(L):\n        binStr = str(bin(i))[2:]\n        binStr = '0' * (K - len(binStr)) + binStr\n        j = int(binStr[::-1], 2)\n        arr[j] = text[i]\n    print(''.join(arr))", "T = int(input())\nfor i in range(T):\n    (k, t) = input().strip().split()\n    k = int(k)\n    l = len(t)\n    a = [' ' for _ in range(l)]\n    for i in range(l):\n        s = str(bin(i))[2:]\n        s = '0' * (k - len(s)) + s\n        j = int(s[::-1], 2)\n        a[j] = t[i]\n    print(''.join(a))", "T = int(input())\nfor i in range(T):\n    (k, t) = input().strip().split()\n    k = int(k)\n    l = len(t)\n    a = [' ' for _ in range(l)]\n    for i in range(l):\n        s = str(bin(i))[2:]\n        s = '0' * (k - len(s)) + s\n        j = int(s[::-1], 2)\n        a[j] = t[i]\n    print(''.join(a))", "T = int(input())\nfor i in range(T):\n    (k, t) = input().strip().split()\n    k = int(k)\n    l = len(t)\n    a = [' ' for _ in range(l)]\n    for i in range(l):\n        s = str(bin(i))[2:]\n        s = '0' * (k - len(s)) + s\n        j = int(s[::-1], 2)\n        a[j] = t[i]\n    print(''.join(a))", "T = int(input())\nfor i in range(T):\n    (k, t) = input().strip().split()\n    k = int(k)\n    l = len(t)\n    a = [' ' for _ in range(l)]\n    for i in range(l):\n        s = str(bin(i))[2:]\n        s = '0' * (k - len(s)) + s\n        j = int(s[::-1], 2)\n        a[j] = t[i]\n    print(''.join(a))", "T = int(input())\nfor i in range(T):\n    (k, t) = input().strip().split()\n    k = int(k)\n    l = len(t)\n    a = [' ' for _ in range(l)]\n    for i in range(l):\n        s = str(bin(i))[2:]\n        s = '0' * (k - len(s)) + s\n        j = int(s[::-1], 2)\n        a[j] = t[i]\n    print(''.join(a))", "T = int(input())\nfor i in range(T):\n    (k, t) = input().strip().split()\n    k = int(k)\n    l = len(t)\n    a = [' ' for _ in range(l)]\n    for i in range(l):\n        s = str(bin(i))[2:]\n        s = '0' * (k - len(s)) + s\n        j = int(s[::-1], 2)\n        a[j] = t[i]\n    print(''.join(a))", "T = int(input())\nfor i in range(T):\n    (k, t) = input().strip().split()\n    k = int(k)\n    l = len(t)\n    a = [' ' for _ in range(l)]\n    for i in range(l):\n        s = str(bin(i))[2:]\n        s = '0' * (k - len(s)) + s\n        j = int(s[::-1], 2)\n        a[j] = t[i]\n    print(''.join(a))", "T = int(input())\nfor i in range(T):\n    (k, t) = input().strip().split()\n    k = int(k)\n    l = len(t)\n    a = [' ' for _ in range(l)]\n    for i in range(l):\n        s = str(bin(i))[2:]\n        s = '0' * (k - len(s)) + s\n        j = int(s[::-1], 2)\n        a[j] = t[i]\n    print(''.join(a))", "T = int(input())\nfor i in range(T):\n    (K, text) = input().strip().split()\n    K = int(K)\n    L = len(text)\n    arr = [' ' for _ in range(L)]\n    for i in range(L):\n        binStr = str(bin(i))[2:]\n        binStr = '0' * (K - len(binStr)) + binStr\n        j = int(binStr[::-1], 2)\n        arr[j] = text[i]\n    print(''.join(arr))", "T = int(input())\nfor i in range(T):\n    (K, text) = input().strip().split()\n    K = int(K)\n    L = len(text)\n    arr = [' ' for _ in range(L)]\n    for i in range(L):\n        binStr = str(bin(i))[2:]\n        binStr = '0' * (K - len(binStr)) + binStr\n        j = int(binStr[::-1], 2)\n        arr[j] = text[i]\n    print(''.join(arr))", "T = int(input())\nfor i in range(T):\n    (K, text) = input().strip().split()\n    K = int(K)\n    L = len(text)\n    arr = [' ' for _ in range(L)]\n    for i in range(L):\n        binStr = str(bin(i))[2:]\n        binStr = '0' * (K - len(binStr)) + binStr\n        j = int(binStr[::-1], 2)\n        arr[j] = text[i]\n    print(''.join(arr))", "TC = int(input())\nfor _ in range(TC):\n    (K, text) = input().strip().split()\n    K = int(K)\n    L = len(text)\n    arr = [' ' for _ in range(L)]\n    for i in range(L):\n        binStr = str(bin(i))[2:]\n        binStr = '0' * (K - len(binStr)) + binStr\n        j = int(binStr[::-1], 2)\n        arr[j] = text[i]\n    print(''.join(arr))", "def rev(i, val):\n    a = i\n    arr = []\n    while a > 0:\n        arr.append(a % 2)\n        a //= 2\n    while len(arr) < val:\n        arr.append(0)\n    change = 0\n    for i in range(val):\n        change += 2 ** (val - 1 - i) * arr[i]\n    return change\nt = int(input())\nfor _ in range(t):\n    (val, st) = input().split()\n    val = int(val)\n    check = {}\n    arr = ['-1' for i in range(2 ** val)]\n    for i in range(2 ** val):\n        check[i] = 0\n    for i in range(2 ** val):\n        b = rev(i, val)\n        if check[i] == 0 and check[b] == 0:\n            (check[i], check[b]) = (1, 1)\n            (arr[i], arr[b]) = (st[b], st[i])\n    res = ''\n    for ele in arr:\n        res += ele\n    print(res)", "for _ in range(int(input())):\n    array = list(input().split())\n    k = int(array[0])\n    length = 2 ** k\n    final = [0] * length\n    for i in range(length):\n        p = bin(i)[2:]\n        for TT in range(k - len(p)):\n            p = '0' + p\n        p = p[-1::-1]\n        final[int(p, 2)] = array[1][i]\n    print(''.join(final))", "for _ in range(int(input())):\n    array = list(input().split())\n    k = int(array[0])\n    length = 2 ** k\n    final = [0] * length\n    for i in range(length):\n        p = bin(i)[2:]\n        for TT in range(k - len(p)):\n            p = '0' + p\n        p = p[-1::-1]\n        final[int(p, 2)] = array[1][i]\n    print(''.join(final))", "for _ in range(int(input())):\n    array = list(input().split())\n    k = int(array[0])\n    length = 2 ** k\n    final = [0] * length\n    for i in range(length):\n        p = bin(i)[2:]\n        for TT in range(k - len(p)):\n            p = '0' + p\n        p = p[-1::-1]\n        final[int(p, 2)] = array[1][i]\n    print(''.join(final))", "def convert_to_num(l):\n    l = list(map(int, l))\n    k = len(l)\n    num = 0\n    i = 0\n    while i < k:\n        num += l[i] * 2 ** i\n        i += 1\n    return num\n\ndef to_binary(l, k):\n    t = list(l)\n    if len(t) == k:\n        return t\n    t_1 = k - len(t)\n    while t_1 > 0:\n        t.insert(0, '0')\n        t_1 -= 1\n    return t\nfor _ in range(int(input())):\n    (n, lis) = input().split()\n    n = int(n)\n    lis = list(lis)\n    conv = {}\n    for i in range(len(lis)):\n        t_1 = bin(i)[2:]\n        t_2 = convert_to_num(to_binary(t_1, n))\n        conv[i] = t_2\n    ans = ''\n    for i in conv:\n        ans += lis[conv[i]]\n    print(ans)", "t = int(input())\nwhile t:\n    (k, s) = map(str, input().split())\n    k = int(k)\n    for i in range(2 ** k):\n        j = bin(i)[2:]\n        r = '0' * (k - len(j)) + j\n        print(s[int(r[::-1], 2)], end='')\n    print('')\n    t -= 1", "for t in range(int(input())):\n    (n, s) = input().split()\n    k = int(n)\n    l = len(s)\n    a = [''] * l\n    for i in range(l):\n        bs = str(bin(i))[2:]\n        bs = '0' * (k - len(bs)) + bs\n        j = int(bs[::-1], 2)\n        a[j] = s[i]\n    print(''.join(a))", "from math import *\nform = lambda x: int(x) if x.isdigit() else x\n\ndef padBin(n, k):\n    b = bin(n)[2:]\n    return '0' * (ceil(len(b) / k) * k - len(b)) + b\n\ndef revBin(n, k):\n    return int(padBin(n, k)[::-1], 2)\ntest = int(input())\nfor _ in range(test):\n    (k, mes) = map(form, input().split())\n    scrambled = [''] * 2 ** k\n    for i in range(2 ** k):\n        scrambled[revBin(i, k)] = mes[i]\n    print(''.join(scrambled))", "from math import *\nform = lambda x: int(x) if x.isdigit() else x\n\ndef padBin(n, k):\n    b = bin(n)[2:]\n    return '0' * (ceil(len(b) / k) * k - len(b)) + b\n\ndef revBin(n, k):\n    return int(padBin(n, k)[::-1], 2)\nfor _ in range(int(input())):\n    (k, mes) = map(form, input().split())\n    scrambled = [''] * 2 ** k\n    for i in range(2 ** k):\n        scrambled[revBin(i, k)] = mes[i]\n    print(''.join(scrambled))", "allzero = '0000000000000000'\nfor _ in range(int(input())):\n    (k, s) = map(str, input().split())\n    k = int(k)\n    a = list(s)\n    b = ['a'] * pow(2, k)\n    for i in range(pow(2, k)):\n        t = bin(i)[2:].zfill(k)\n        rt = t[::-1]\n        b[int(rt, 2)] = a[i]\n    ans = ''.join((e for e in b))\n    print(ans)", "def decimal_to_binary(n):\n    if n == 0:\n        list1 = []\n        list1.append(0)\n        return list1\n    list1 = []\n    while n:\n        list1.append(n % 2)\n        n = n // 2\n    list1.reverse()\n    return list1\n\ndef binary_to_decimal(list1, k):\n    ans = 0\n    size = len(list1) - 1\n    for i in range(size, 0 - 1, -1):\n        if list1[i] == 1:\n            ans += 2 ** k\n        k -= 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    line1 = input()\n    (k, st) = list(line1.split())\n    k = int(k)\n    st = list(st)\n    track = set()\n    for i in range(2 ** k):\n        if i in track:\n            continue\n        rev_binary = decimal_to_binary(i)\n        i1 = binary_to_decimal(rev_binary, k - 1)\n        track.add(i1)\n        temp = st[i]\n        st[i] = st[i1]\n        st[i1] = temp\n    for value in st:\n        print(value, sep='', end='')\n    print()", "import math\n\ndef reverseBits(num, bitSize):\n    binary = bin(num)\n    reverse = binary[-1:1:-1]\n    reverse = reverse + (bitSize - len(reverse)) * '0'\n    return int(reverse, 2)\nt = int(input())\nfor x in range(t):\n    (n, st) = map(str, input().split())\n    k = int(n)\n    s = ''\n    p = math.pow(2, k)\n    for i in range(int(p)):\n        s += st[reverseBits(i, k)]\n    print(s)", "allzero = '0000000000000000'\nfor _ in range(int(input())):\n    (k, s) = map(str, input().split())\n    k = int(k)\n    a = list(s)\n    b = ['a'] * pow(2, k)\n    for i in range(pow(2, k)):\n        t = bin(i)[2:].zfill(k)\n        rt = t[::-1]\n        b[int(rt, 2)] = a[i]\n    ans = ''.join((e for e in b))\n    print(ans)", "def decimalToBinary(n, k):\n    b = bin(n).replace('0b', '')\n    if len(b) < k:\n        return (k - len(b)) * '0' + b\n    return b\n\ndef binaryToDecimal(n):\n    return int(n, 2)\nfor _ in range(int(input())):\n    l = []\n    (k, s) = input().split(' ')\n    k = int(k)\n    d = {}\n    final = ''\n    for num in range(0, 2 ** k):\n        l.append(decimalToBinary(num, k))\n    for i in range(len(l)):\n        ele = l[i]\n        l[i] = ele[::-1]\n    for i in range(len(s)):\n        d[binaryToDecimal(l[i])] = s[i]\n    for i in range(len(d)):\n        final += d[i]\n    print(final)", "T = int(input())\nfor i in range(T):\n    (N, S) = input().split()\n    t = list(S)\n    for i in range(len(S)):\n        c = bin(i)[2:]\n        c = int(('0' * (int(N) - len(c)) + c)[::-1], 2)\n        t[c] = S[i]\n    print(''.join(t))", "for t in range(int(input())):\n    (n, s) = input().split()\n    k = int(n)\n    l = len(s)\n    a = [''] * l\n    for i in range(l):\n        bs = str(bin(i))[2:]\n        bs = '0' * (k - len(bs)) + bs\n        j = int(bs[::-1], 2)\n        a[j] = s[i]\n    print(''.join(a))", "for _ in range(int(input())):\n    array = list(input().split())\n    k = int(array[0])\n    length = 2 ** k\n    final = [0] * length\n    for i in range(length):\n        p = bin(i)[2:]\n        for TT in range(k - len(p)):\n            p = '0' + p\n        p = p[-1::-1]\n        final[int(p, 2)] = array[1][i]\n    print(''.join(final))", "def arrange(k, s):\n    t = [char for char in s]\n\n    def reverse_bits(n, k):\n        r = 0\n        while n:\n            if n & 1:\n                r |= 1 << k - 1\n            n >>= 1\n            k -= 1\n        return r\n    for pos in range(1, 2 ** k - 1):\n        t[reverse_bits(pos, k)] = s[pos]\n    return ''.join(t)\nt = int(input())\nfor _ in range(t):\n    (k, s) = input().split()\n    k = int(k)\n    print(arrange(k, s))", "TC = int(input())\nfor _ in range(TC):\n    (K, text) = input().strip().split()\n    K = int(K)\n    L = len(text)\n    arr = [' ' for _ in range(L)]\n    for i in range(L):\n        binStr = str(bin(i))[2:]\n        binStr = '0' * (K - len(binStr)) + binStr\n        j = int(binStr[::-1], 2)\n        arr[j] = text[i]\n    print(''.join(arr))", "for i in range(int(input())):\n    (n, s) = input().split()\n    l = list(s)\n    for i in range(len(s)):\n        b = bin(i)[2:]\n        b = int(('0' * (int(n) - len(b)) + b)[::-1], 2)\n        l[b] = s[i]\n    print(''.join(l))", "for test_case in range(int(input())):\n    input1 = input().split(' ')\n    bits = input1[0]\n    string = input1[1]\n    new_str = []\n    for i in range(len(string)):\n        new_str.append('')\n    for i in range(len(string)):\n        og_letter = string[i]\n        bin_str = '{0:0' + bits + 'b}'\n        binary = bin_str.format(i)\n        bin_reverse = binary[::-1]\n        reverse = int(binary[::-1], 2)\n        new_str[reverse] = string[i]\n    print(''.join(new_str))", "import math\nT = int(input())\nfor test in range(T):\n    (k, str) = input().split()\n    k = int(k)\n    new = list(range(0, int(math.pow(2, k))))\n    for i in range(int(math.pow(2, k))):\n        new[int(bin(i)[2:].zfill(k)[::-1], 2)] = str[i]\n    print(''.join(new))", "for _ in range(int(input())):\n    (factor, msg) = input().split()\n    factor = int(factor)\n    lens = 2 ** factor\n    answ = [0] * lens\n    for i in range(lens):\n        answ[int(bin(i)[2:].zfill(factor)[::-1], 2)] = msg[i]\n    print(''.join(answ))", "t = int(input())\nfor i in range(t):\n    (n, s) = map(str, input().split())\n    n = int(n)\n    l = list(s)\n    for j in range(len(s)):\n        z = bin(j)[2:]\n        z = int(('0' * (n - len(z)) + z)[::-1], 2)\n        l[z] = s[j]\n    print(''.join(l))", "def rev(i, n):\n    binary = bin(i)\n    reverse = binary[-1:1:-1]\n    reverse = reverse + (n - len(reverse)) * '0'\n    return int(reverse, 2)\nt = int(input())\nwhile t:\n    (n, l) = input().split()\n    n = int(n)\n    list = [char for char in l]\n    for i in range(2 ** n):\n        j = rev(i, n)\n        if i > j:\n            (list[i], list[j]) = (list[j], list[i])\n    list = ''.join(list)\n    print(list)\n    t -= 1", "def convert(x, k):\n    binary = ''\n    while x != 0:\n        d = x % 2\n        binary += str(d)\n        x //= 2\n    while 1:\n        if len(binary) != k:\n            binary += '0'\n        else:\n            break\n    decimal = 0\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            decimal += 2 ** (k - i - 1)\n    return decimal\n\ndef fun(s):\n    s = s.split(' ')\n    k = int(s[0])\n    s = s[1]\n    ans = [''] * len(s)\n    for i in range(len(s)):\n        ans[i] = s[convert(i, k)]\n    x = ''\n    for i in ans:\n        x += i\n    return x\nt = int(input(''))\nfor xxx in range(t):\n    s = input('')\n    print(fun(s))", "for _ in range(int(input())):\n    (k, s) = input().split()\n    k = int(k)\n    n = 2 ** k\n    ans = [0] * n\n    for i in range(n):\n        ans[int(bin(i)[2:].zfill(k)[::-1], 2)] = s[i]\n    print(''.join(ans))", "a = int(input())\nfor i in range(a):\n    b = list(map(str, input().split()))\n    l = []\n    for j in range(len(b[1])):\n        c = bin(j)\n        c = '0' * (int(b[0]) - (len(c) - 2)) + c[2:]\n        l.append(c[::-1])\n    c = []\n    for j in range(len(l)):\n        c.append(b[1][int(l[j], 2)])\n    print(''.join(c))", "def calcindex(n, i):\n    sum = 0\n    count = 0\n    while i > 0:\n        if i % 2 == 1:\n            sum = sum + pow(2, n - count - 1)\n        i = i // 2\n        count += 1\n    return sum\n\ndef calc(n, s):\n    n = int(n)\n    marked = [False for i in range(2 ** n)]\n    s = list(s)\n    for i in range(2 ** n):\n        index = calcindex(n, i)\n        if not marked[i]:\n            (s[index], s[i]) = (s[i], s[index])\n            marked[i] = True\n            marked[index] = True\n    print(''.join(s))\nt = int(input())\nfor i in range(t):\n    (n, s) = list(input().split())\n    calc(n, s)", "def padded_bin(i, width):\n    s = bin(i)\n    return s[:2] + s[2:].zfill(width)\nt = int(input())\nwhile t:\n    (k, s) = map(str, input().split())\n    k = int(k)\n    l = list()\n    new = list()\n    length = len(s)\n    for i in s:\n        l.append(i)\n    for i in range(0, length):\n        j = padded_bin(i, k)\n        j = j[:1:-1]\n        n = int(j, 2)\n        new.append(l[n])\n    u = ''.join(new)\n    print(u)\n    t -= 1", "for t in range(int(input())):\n    (n, word) = input().split()\n    n = int(n)\n    length = 2 ** n\n    new_word = ''\n    for i in range(length):\n        binary = '{0:b}'.format(i, n)\n        if len(binary) < n:\n            binary = '0' * (n - len(binary)) + binary\n        pos = int(binary[::-1], 2)\n        new_word += word[pos]\n    print(new_word)", "for t in range(int(input())):\n    (k, text) = map(str, input().split())\n    k = int(k)\n    dic = {0: 0}\n    alp = ['.'] * 2 ** k\n    for i in range(1, 2 ** k):\n        if i not in dic:\n            ibin = list(bin(i))\n            ibin = ibin[2:]\n            if len(ibin) != k:\n                ibin = ['0'] * (k - len(ibin)) + ibin\n            ibin.reverse()\n            ibin = ['0b'] + ibin\n            ibin = int(''.join((xy for xy in ibin)), 2)\n            dic[i] = ibin\n            dic[ibin] = i\n    for x in range(2 ** k):\n        alp[dic[x]] = text[x]\n    print(''.join((xy for xy in alp)))", "for _ in range(int(input())):\n    (k, l) = map(str, input().split())\n    main = list(l)\n    nn = []\n    i = 0\n    while i < len(main):\n        f = list(str(bin(i)[2:].zfill(int(k))))\n        f.reverse()\n        h = ''.join(f)\n        p = int(h, 2)\n        nn.append(main[p])\n        i += 1\n    print(''.join(nn))", "for t in range(int(input())):\n    (k, msg) = input().strip().split()\n    k = int(k)\n    msg = list(msg)\n    new_msg = ['0'] * 2 ** k\n    for i in range(0, 2 ** k):\n        binary = bin(i)\n        rev = binary[-1:1:-1]\n        rev = rev + (k - len(rev)) * '0'\n        new_msg[int(rev, 2)] = msg[i]\n    print(''.join((str(i) for i in new_msg)))", "t = int(input())\nwhile t:\n    t -= 1\n    (n, a) = input().split()\n    n = int(n)\n    ans = ''\n    for i in range(2 ** n):\n        ans += a[int(bin(i)[2:].rjust(n, '0')[::-1], 2)]\n    print(ans)", "t = int(input())\nfor i in range(0, t):\n    (n, a) = input().strip().split()\n    n = int(n)\n    for j in range(0, 2 ** n):\n        c = bin(j)[2:]\n        c = '0' * (n - len(c)) + c\n        c = c[::-1]\n        print(a[int(c, 2)], end='')\n    print()", "def get_binary(num, bits):\n    ans = []\n    for i in range(bits):\n        ans.append('0')\n    i = bits - 1\n    while i >= 0:\n        ans[i] = str(num % 2)\n        num //= 2\n        i -= 1\n    return ''.join(ans)\nfor t in range(int(input())):\n    temp = list(input().split())\n    k = int(temp[0])\n    s = temp[1]\n    ans = []\n    for i in range(2 ** k):\n        ans.append('0')\n    for i in range(2 ** k):\n        bi = get_binary(i, k)\n        bi = bi[::-1]\n        x = eval('0b' + bi)\n        ans[x] = s[i]\n    print(''.join(ans))", "for tests in range(int(input())):\n    (K, old) = input().split()\n    new = [i for i in old]\n    K = int(K)\n    for letter in range(len(old)):\n        binary = bin(letter)[2:]\n        binary = '0' * (K - len(binary)) + binary\n        binary = ''.join(binary[::-1])\n        new[int(binary, 2)] = old[letter]\n    print(''.join(new))", "t = int(input())\n\ndef binStrToInt(binary_str):\n    length = len(binary_str)\n    num = 0\n    for i in range(length):\n        num = num + int(binary_str[i])\n        num = num * 2\n    return num // 2\nfor index in range(t):\n    inp = input().split()\n    k = int(inp[0])\n    word = inp[1]\n    formatStr = '{0:0' + str(k) + 'b}'\n    indices = [formatStr.format(x, 'b') for x in range(len(word))]\n    for i in range(len(indices)):\n        indices[i] = indices[i][::-1]\n    for i in range(len(indices)):\n        indices[i] = binStrToInt(indices[i])\n    for i in indices:\n        print(word[int(i)], end='')\n    print()", "from sys import stdin, stdout\n\ndef sin():\n    return stdin.readline().rstrip()\n\ndef listInput():\n    return list(map(int, sin().split()))\n\ndef printBS(li):\n    if not li:\n        return\n    for i in range(len(li) - 1):\n        stdout.write('%d ' % li[i])\n    stdout.write('%d\\n' % li[-1])\n\ndef rev(a, k):\n    b = 0\n    for _ in range(k):\n        b = 2 * b + a % 2\n        a = a // 2\n    return b\nt = int(sin())\nfor _ in range(t):\n    (n, s) = sin().split()\n    n = int(n)\n    r = 2 ** n\n    s1 = ['' for i in range(r)]\n    for i in range(r):\n        s1[rev(i, n)] = s[i]\n    print(''.join(s1))", "def masking(bits, n):\n    a = 1 << n - 1\n    ret = 0\n    mask = 1\n    i = 0\n    while i <= n - 1:\n        mask = 1 << i\n        a = 1 << n - i - 1\n        if bits & mask:\n            ret = ret | a\n        i += 1\n    return ret\nfor t in range(int(input())):\n    (n, var) = map(str, input().strip().split())\n    n = int(n)\n    var = list(var)\n    st = [0] * 2 ** n\n    for i in range(2 ** n):\n        c = masking(i, n)\n        if st[c] == 0:\n            st[c] = var[i]\n    print(''.join(st))", "t = int(input())\nfor _ in range(t):\n    (k, s) = input().rstrip().split()\n    k = int(k)\n    d = []\n    for (i, c) in enumerate(s):\n        b = bin(i)[2:].rjust(k, '0')[::-1]\n        d.append((int(b, base=2), c))\n    d = sorted(d)\n    print(''.join([c for (i, c) in d]))", "def binary(a, n):\n    ans = []\n    while a != 0:\n        ans.append(a & 1)\n        a >>= 1\n    temp = []\n    for x in range(n - len(ans)):\n        temp.append(0)\n    return int(''.join(map(str, ans + temp)), 2)\nfor w in range(int(input())):\n    line = input().split()\n    k = int(line[0])\n    line = line[1]\n    ans = ''\n    for x in range(len(line)):\n        ans += line[binary(x, k)]\n    print(ans)", "t = int(input())\nfor z in range(t):\n    dictionary = {}\n    (k, string) = map(str, input().split())\n    k = int(k)\n    for i in range(2 ** k):\n        dictionary[str(bin(i)[2:].zfill(k))] = string[i]\n    for i in range(2 ** k):\n        alpha = bin(i)[2:].zfill(k)\n        alpha = alpha[::-1]\n        print(dictionary[str(alpha)], end='')\n    print()"]