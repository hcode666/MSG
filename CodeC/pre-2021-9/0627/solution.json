["import string\nfrom functools import lru_cache\nimport atexit, io\nimport sys\nfrom math import log2\nimport math\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_left, bisect_right, insort\nfrom math import gcd\nfrom math import sqrt\nfrom collections import Counter, defaultdict\nfrom heapq import heappush, heappop, heapify\nimport heapq\n\nclass FenwickTree:\n\n    def __init__(self, n):\n        self.farr = [0] * (n + 1)\n\n    def prefixSum(self, idx):\n        s = 0\n        while idx > 0:\n            s += self.farr[idx]\n            idx -= idx & -idx\n        return s\n\n    def update(self, idx, val):\n        while idx < len(self.farr):\n            self.farr[idx] += val\n            idx += idx & -idx\n\n    def find(self, k):\n        curr = 0\n        ans = 0\n        prevSum = 0\n        for i in range(log2(n), -1, -1):\n            if self.farr[curr + (i << i)] + prevSum < k:\n                curr += 1 << i\n                prevSum += self.farr[curr]\n        return curr + 1\n\nclass Trie(object):\n\n    def __init__(self):\n        self.trie = {}\n\n    def insert(self, word):\n        t = self.trie\n        for c in word:\n            if c not in t:\n                t[c] = {}\n            t = t[c]\n        t['-'] = True\n\n    def search(self, word):\n        t = self.trie\n        for c in word:\n            if c not in t:\n                return False\n            t = t[c]\n        return '-' in t\n\n    def startsWith(self, prefix):\n        t = self.trie\n        for c in prefix:\n            if c not in t:\n                return False\n            t = t[c]\n        return True\n\n    def query(self, word):\n        ans = 0\n        t = self.trie\n        for i in word:\n            if i not in t:\n                break\n            ans += 1\n            t = t[i]\n        return ans\n\nclass FenvTree:\n\n    def __init__(self, arr):\n        arr.insert(0, 0)\n        self.farr = [0]\n        prefix = [0]\n        for i in arr[1:]:\n            prefix.append(prefix[-1] + i)\n        for i in range(1, len(arr)):\n            idash = i - (i & -i)\n            self.farr.append(prefix[i] - prefix[idash])\n\n    def query(self, l, r):\n        return self.prefixSum(r) - self.prefixSum(l - 1)\n\n    def prefixSum(self, idx):\n        s = 0\n        while idx > 0:\n            s += self.farr[idx]\n            idx -= idx & -idx\n        return s\n\n    def update(self, idx, val):\n        while idx < len(self.farr):\n            self.farr[idx] += val\n            idx += idx & -idx\n\nclass DSU:\n\n    def __init__(self, n):\n        self.parent = []\n        self.size = []\n        for i in range(n + 1):\n            self.parent.append(i)\n            self.size.append(1)\n\n    def union(self, u, v):\n        pu = self.findPar(u)\n        pv = self.findPar(v)\n        if pu == pv:\n            return\n        if self.size[pu] < self.size[pv]:\n            self.parent[pu] = pv\n            self.size[pv] += self.size[pu]\n        else:\n            self.parent[pv] = pu\n            self.size[pu] += self.size[pv]\n\n    def unionByRank(self, u, v):\n        pu = self.findPar(u)\n        pv = self.findPar(v)\n        if pu == pv:\n            return\n        if self.rank[pu] < self.rank[pv]:\n            self.parent[pu] = pv\n        elif self.rank[pv] < self.rank[pu]:\n            self.parent[pv] = pu\n        else:\n            self.parent[pu] = pv\n            self.rank[pv] += 1\n\n    def findPar(self, node):\n        if self.parent[node] == node:\n            return node\n        self.parent[node] = self.findPar(self.parent[node])\n        return self.parent[node]\n\nclass info:\n\n    def __init__(self, _open=0, _close=0, _full=0):\n        self.open = _open\n        self.close = _close\n        self.full = _full\n\nclass SGTree:\n\n    def __init__(self, n):\n        self.seg = [0 for _ in range(4 * n)]\n\n    def build(self, ind, low, high, arr):\n        if low == high:\n            self.seg[ind] = arr[low]\n            return\n        mid = (low + high) // 2\n        self.build(2 * ind + 1, low, mid, arr)\n        self.build(2 * ind + 2, mid + 1, high, arr)\n        self.seg[ind] = min(self.seg[2 * ind + 1], self.seg[2 * ind + 2])\n\n    def query(self, ind, low, high, l, r):\n        if r < low or l > high:\n            return sys.maxsize\n        if low <= l and r >= high:\n            return self.seg[ind]\n        mid = low + high >> 1\n        left = self.query(2 * ind + 1, 0, mid, l, r)\n        right = self.query(2 * ind + 2, mid + 1, high, l, r)\n        return min(left, right)\n\n    def update(self, ind, low, high, i, val):\n        if low == high:\n            self.seg = val\n            return\n        mid = low + high >> 1\n        if i <= mid:\n            self.update(2 * ind + 1, low, mid, i, val)\n        else:\n            self.update(2 * ind + 1, mid + 1, high, i, val)\n        self.seg[ind] = min(self.seg[2 * ind + 1], self.seg[2 * ind + 2])\n\ndef isPalindrome(s):\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] != s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef IntList():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef getInts():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef getStrs():\n    return sys.stdin.readline().strip()\n\ndef StrList():\n    list(sys.stdin.readline().strip())\n\ndef FloatList():\n    lis = input().split()\n    lis = list(map(float, lis))\n    return lis\n\ndef SieveOfEratosthenes(n, isPrime):\n    isPrime[0] = isPrime[1] = False\n    for i in range(2, n + 1):\n        isPrime[i] = True\n    p = 2\n    while p * p <= n:\n        if isPrime[p]:\n            i = p * p\n            while i <= n:\n                isPrime[i] = False\n                i += p\n        p += 1\n\ndef findPrimePair(n):\n    isPrime = [0] * (n + 1)\n    SieveOfEratosthenes(n, isPrime)\n    for i in range(0, n):\n        if isPrime[i] and isPrime[n - i]:\n            print(i, n - i)\n            return\n\ndef query(ind, low, high, l, r, seg):\n    if r < low or l > high:\n        return info()\n    if low <= l and r >= high:\n        return self.seg[ind]\n    mid = low + high >> 1\n    left = self.query(2 * ind + 1, 0, mid, l, r, seg)\n    right = self.query(2 * ind + 2, mid + 1, high, l, r, seg)\n    return merge(left, right)\n\ndef merge(left, right):\n    ans = info()\n    ans.full = left.full + right.full + min(left.open, right.close)\n    ans.open = left.open + right.open + min(left.open, right.close)\n    ans.close = left.close + right.close + min(left.open, right.close)\n    return ans\n\ndef build(ind, low, high, s, seg):\n    if low == high:\n        seg[ind] = info(s[low] == '(', s[low] == ')', 0)\n        return\n    mid = (low + high) // 2\n    build(2 * ind + 1, low, mid, s, seg)\n    build(2 * ind + 2, mid + 1, high, s, seg)\n    seg[ind] = merge(seg[2 * ind + 1], seg[2 * ind + 2])\n\ndef countN(lis):\n    ans = 0\n    cnt = 0\n    for i in range(len(lis) - 1, -1, -1):\n        if lis[i] == 0:\n            cnt += 1\n        else:\n            ans += cnt\n    return ans\n\nclass Pair:\n\n    def __init__(self, x, y, gcd):\n        self.x = x\n        self.y = y\n        self.gcd = gcd\n\ndef Euclidean(a, b):\n    if b == 0:\n        return Pair(1, 0, a)\n    dash = Euclidean(b, a % b)\n    return Pair(dash.y, dash.x - a // b * dash.y, dash.gcd)\n\ndef chineseRemainder(a1, n1, a2, n2):\n    p = Euclidean(n1, n2)\n    x = p.x\n    gcd = p.gcd\n    if (a1 - a2) % gcd:\n        return -1\n    k = (a1 - a2) // gcd\n    a = a1 - n1 * (k * x % n2 // gcd)\n    lcm = n1 * n2 // gcd\n    if a < 0:\n        a += lcm\n    return a\nmdd = 998244353\n\ndef ncr(n, k, md):\n    mod = 998244353\n    tab = [[0 for _ in range(k + 1)] for i in range(n + 1)]\n    for i in range(1, len(tab)):\n        tab[i][0] = 1\n    for i in range(1, len(tab)):\n        for j in range(1, min(i + 1, len(tab[0]))):\n            if i == 1 and j == 1:\n                tab[i][j] = 1\n            else:\n                tab[i][j] = (tab[i - 1][j] + tab[i - 1][j - 1]) % mod\n    return tab\n\ndef repeat(i, j, arr):\n    if i > j:\n        return\n    cnt1 = i\n    cnt2 = j\n    while cnt1 < cnt2:\n        (arr[cnt1], arr[cnt2]) = (arr[cnt2], arr[cnt1])\n        cnt1 += 1\n        cnt2 -= 1\n    if i - 1 >= 0:\n        ele = arr[i - 1]\n        if ele > 0:\n            s = int(sqrt(ele - 1)) + 1\n            first = s * s - ele\n            repeat(first, i - 1, arr)\n    return\nspf = []\n\ndef makeSeive(n):\n    for i in range(n + 1):\n        spf.append(i)\n\ndef seive(n):\n    s = int(sqrt(n + 1))\n    for i in range(2, s + 1):\n        if spf[i] == i:\n            for j in range(i * i, n + 1, i):\n                if spf[j] == j:\n                    spf[j] = i\n\ndef getFactorization(x):\n    ret = set()\n    while x != 1:\n        ret.add(spf[x])\n        x = x // spf[x]\n    return ret\n\ndef zFunc(patt, txt):\n    st = patt + '#' + txt\n    zArray = [0 for _ in range(len(st))]\n    l = 0\n    r = 0\n    for i in range(1, len(st)):\n        if r >= i:\n            zArray[i] = min(r - i + 1, zArray[i - l])\n        while i + zArray[i] < len(st) and st[zArray[i]] == st[zArray[i] + i]:\n            zArray[i] += 1\n        if zArray[i] + i - 1 > r:\n            l = i\n            r = i + zArray[i] - 1\n    return zArray.count(len(patt))\n\ndef kmp(txt, patt):\n    newString = patt + '#' + txt\n    freqCount = 0\n    freqArray = [0 for _ in range(len(newString))]\n    i = 1\n    length = 0\n    while i < len(newString):\n        if newString[i] == newString[length]:\n            length += 1\n            freqArray[i] = length\n            i += 1\n        elif length > 0:\n            length = freqArray[length - 1]\n        else:\n            freqArray[i] = 0\n            i += 1\n    for i in freqArray:\n        if i == len(patt):\n            freqCount += 1\n    return freqCount\n\ndef getLPS(s):\n    st = '@#' + '#'.join(s) + '#&'\n    c = 0\n    r = 0\n    lps = [0] * len(st)\n    for i in range(1, len(st) - 1):\n        mirror = c - (i - c)\n        if i < r and mirror >= 0:\n            lps[i] = min(lps[mirror], r - i)\n        while st[i + lps[i] + 1] == st[i - lps[i] - 1]:\n            lps[i] += 1\n        if i + lps[i] > r:\n            r = i + lps[i]\n            c = i\n    return max(lps)\nfact = [1 for _ in range(100002)]\nmod = 10 ** 9 + 7\n\ndef getFact(n):\n    for i in range(1, n + 1):\n        fact[i] = fact[i - 1] * i % mod\n\ndef getInv(word):\n    num = math.factorial(len(word))\n    for v in Counter(word).values():\n        num = num * pow(math.factorial(v), mod - 2, mod) % mod\n    return int(num) % (10 ** 9 + 7)\n\ndef subarrayXor(arr, n, m):\n    HashTable = defaultdict(bool)\n    HashTable[0] = 1\n    count = 0\n    curSum = 0\n    for i in arr:\n        curSum ^= i\n        if HashTable[curSum ^ m]:\n            count += HashTable[curSum ^ m]\n        HashTable[curSum] += 1\n    return count\n\ndef get2dPrefixSum(matrix, mid=0):\n    n = len(matrix)\n    m = len(matrix[0])\n    prefix = [[0 for _ in range(m + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            prefix[i][j] = prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] + matrix[i - 1][j - 1]\n    return prefix\n\ndef get2dPrefixSumCnt(matrix, mid=0):\n    n = len(matrix)\n    m = len(matrix[0])\n    prefix = [[0 for _ in range(m + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            prefix[i][j] = prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] + matrix[i - 1][j - 1]\n    return prefix\n\ndef getSumRange(r1, c1, r2, c2, prefix):\n    cnt = prefix[r2][c2] - prefix[r2][c1 - 1] - prefix[r1 - 1][c2] + prefix[r1 - 1][c1 - 1]\n    return cnt\n\ndef getPrefix(arr):\n    prefix = [0]\n    for i in arr:\n        prefix.append(prefix[-1] + i)\n    return prefix\n\ndef getInv(arr):\n    cnt = 0\n    ans = []\n    for i in arr:\n        ind = bisect_right(ans, i)\n        cnt += len(ans) - ind\n        insort(ans, i)\n    return cnt\nM = 10 ** 5\n\ndef getFactors(x):\n    temp = []\n    k = 1\n    while k * k <= x:\n        if x % k == 0:\n            temp.append(k)\n            if k * k != x:\n                temp.append(x // k)\n        k += 1\n    return temp\n\ndef grayCode(n):\n    if not n:\n        return [0]\n    res = [0, 1]\n    for i in range(2, n + 1):\n        for j in range(len(res) - 1, -1, -1):\n            res.append(res[j] | 1 << i - 1)\n    return res\n\ndef threeSum(nums, target):\n    ans = -1\n    d = dict()\n    for (i, j) in enumerate(nums):\n        d[j] = i + 1\n    nums.sort()\n    for i in range(len(nums) - 2):\n        low = i + 1\n        high = len(nums) - 1\n        while low < high:\n            s = nums[i] + nums[low] + nums[high]\n            if s == target:\n                print(d[nums[low]], d[nums[high]], d[nums[i]])\n                return\n                low += 1\n                high -= 1\n            elif s < 0:\n                low = low + 1\n            else:\n                high -= 1\n    print('IMPOSSIBLE')\n    return\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef FuckCF():\n    (n, m) = getInts()\n    lis = IntList()\n    prefix = [lis[0]]\n    for i in lis[1:]:\n        prefix.append(gcd(prefix[-1], i))\n    suffix = [lis[-1]]\n    for i in lis[::-1][1:]:\n        suffix.append(gcd(suffix[-1], i))\n    suffix = suffix[::-1]\n    for _ in range(m):\n        (l, r) = getInts()\n        l -= 1\n        if l == 0:\n            print(suffix[r])\n        elif r == n:\n            print(prefix[l - 1])\n        else:\n            print(gcd(prefix[l - 1], suffix[r]))\nt = 1\nt = int(input())\nfor i in range(t):\n    FuckCF()", "import sys\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    pre = [None] * n\n    pre[0] = a[0]\n    for i in range(1, n):\n        pre[i] = gcd(pre[i - 1], a[i])\n    suff = [None] * n\n    suff[n - 1] = a[-1]\n    for i in range(n - 2, -1, -1):\n        suff[i] = gcd(suff[i + 1], a[i])\n    for __ in range(q):\n        (l, r) = map(int, input().split())\n        (l, r) = (l - 1, r - 1)\n        a = pre[l - 1] if l >= 1 else 0\n        b = suff[r + 1] if r + 1 < n else 0\n        ans = gcd(a, b)\n        sys.stdout.write(str(ans) + '\\n')", "import sys\nimport math\nT = int(sys.stdin.readline().rstrip())\nfor t in range(T):\n    (N, Q) = list(map(int, sys.stdin.readline().rstrip().split()))\n    arr = list(map(int, sys.stdin.readline().rstrip().split()))\n    arr = [0] + arr\n    fpc = (len(arr) + 10) * [0]\n    bpc = (len(arr) + 10) * [0]\n    for i in range(1, len(arr)):\n        fpc[i] = math.gcd(fpc[i - 1], arr[i])\n    for i in range(N, 0, -1):\n        bpc[i] = math.gcd(bpc[i + 1], arr[i])\n    for q in range(Q):\n        (l, r) = list(map(int, sys.stdin.readline().rstrip().split()))\n        print(math.gcd(fpc[l - 1], bpc[r + 1]))", "from math import gcd\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    pre = [0]\n    suf = [0]\n    for i in range(n):\n        pre.append(gcd(pre[-1], a[i]))\n    for i in range(n - 1, -1, -1):\n        suf.append(gcd(suf[-1], a[i]))\n    suf.reverse()\n    for i in range(q):\n        (l, h) = map(int, input().split())\n        print(gcd(pre[l - 1], suf[h]))", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    li = list(map(int, input().split()))\n    pre = []\n    a = li[0]\n    pre.append(a)\n    for i in range(1, n):\n        b = li[i]\n        while b != 0:\n            (a, b) = (b, a % b)\n        pre.append(a)\n    a = li[-1]\n    suf = []\n    for i in range(n - 1, -1, -1):\n        b = li[i]\n        while b != 0:\n            (a, b) = (b, a % b)\n        suf.append(a)\n    suf.reverse()\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if l == 1:\n            print(suf[r])\n        elif r == n:\n            print(pre[l - 2])\n        else:\n            a = pre[l - 2]\n            b = suf[r]\n            while b != 0:\n                (a, b) = (b, a % b)\n            print(a)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    li = list(map(int, input().split()))\n    pre = []\n    a = li[0]\n    pre.append(a)\n    for i in range(1, n):\n        b = li[i]\n        while b != 0:\n            (a, b) = (b, a % b)\n        pre.append(a)\n    a = li[-1]\n    suf = []\n    for i in range(n - 1, -1, -1):\n        b = li[i]\n        while b != 0:\n            (a, b) = (b, a % b)\n        suf.append(a)\n    suf.reverse()\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if l == 1:\n            print(suf[r])\n        elif r == n:\n            print(pre[l - 2])\n        else:\n            a = pre[l - 2]\n            b = suf[r]\n            while b != 0:\n                (a, b) = (b, a % b)\n            print(a)", "def gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    queries = []\n    for k in range(q):\n        queries.append(list(map(int, input().split())))\n    prefix = [0] * len(a)\n    suffix = [0] * len(a)\n    prefix[0] = a[0]\n    for i in range(1, len(a)):\n        prefix[i] = gcd(prefix[i - 1], a[i])\n    suffix[len(a) - 1] = a[len(a) - 1]\n    for i in range(len(a) - 2, -1, -1):\n        suffix[i] = gcd(max(suffix[i + 1], a[i]), min(suffix[i + 1], a[i]))\n    for i in queries:\n        l = i[0] - 1\n        r = i[1] - 1\n        if l == 0:\n            ans = suffix[r + 1]\n        elif r == len(a) - 1:\n            ans = prefix[l - 1]\n        else:\n            ans = gcd(max(prefix[l - 1], suffix[r + 1]), min(prefix[l - 1], suffix[r + 1]))\n        print(ans)", "t = int(input(''))\nfor i in range(t):\n    out = []\n    (n, q) = map(int, input('').split())\n    pre = []\n    suf = []\n    x = list(map(int, input('').split()))\n    a = x[0]\n    pre.append(a)\n    for j in range(1, n):\n        b = x[j]\n        while b != 0:\n            (a, b) = (b, a % b)\n        pre.append(a)\n    a = x[-1]\n    suf.append(a)\n    for j in range(n - 1, -1, -1):\n        b = x[j]\n        while b != 0:\n            (a, b) = (b, a % b)\n        suf.append(a)\n    suf.reverse()\n    for j in range(q):\n        (l, r) = map(int, input('').split())\n        if l == 1:\n            out.append(suf[r])\n        elif r == n:\n            out.append(pre[l - 2])\n        else:\n            a = pre[l - 2]\n            b = suf[r]\n            if b == 0 or a == 0:\n                out.append(a + b)\n            else:\n                while b != 0:\n                    (a, b) = (b, a % b)\n                out.append(a)\n    for i in out:\n        print(i)", "import math\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr1 = list(map(int, input().split()))\n    pl = [0]\n    ps = [0]\n    for i in range(n):\n        pl.append(math.gcd(pl[-1], arr1[i]))\n        ps.append(math.gcd(ps[-1], arr1[n - i - 1]))\n    ps = ps[::-1]\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        print(math.gcd(pl[l - 1], ps[r]))", "t = int(input(''))\nfor i in range(t):\n    out = []\n    (n, q) = map(int, input('').split())\n    pre = []\n    suf = []\n    x = list(map(int, input('').split()))\n    a = x[0]\n    pre.append(a)\n    for j in range(1, n):\n        b = x[j]\n        while b != 0:\n            (a, b) = (b, a % b)\n        pre.append(a)\n    a = x[-1]\n    suf.append(a)\n    for j in range(n - 1, -1, -1):\n        b = x[j]\n        while b != 0:\n            (a, b) = (b, a % b)\n        suf.append(a)\n    suf.reverse()\n    for j in range(q):\n        (l, r) = map(int, input('').split())\n        if l == 1:\n            out.append(suf[r])\n        elif r == n:\n            out.append(pre[l - 2])\n        else:\n            a = pre[l - 2]\n            b = suf[r]\n            if b == 0 or a == 0:\n                out.append(a + b)\n            else:\n                while b != 0:\n                    (a, b) = (b, a % b)\n                out.append(a)\n    for i in out:\n        print(i)", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nt = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    prefix = [0] * n\n    prefix[0] = arr[0]\n    for i in range(1, n):\n        prefix[i] = gcd(prefix[i - 1], arr[i])\n    suffix = [0] * n\n    suffix[-1] = arr[-1]\n    for i in range(n - 2, -1, -1):\n        suffix[i] = gcd(suffix[i + 1], arr[i])\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        l = l - 1\n        r = r - 1\n        if l == 0:\n            ans = suffix[r + 1]\n        elif r == n - 1:\n            ans = prefix[l - 1]\n        else:\n            ans = gcd(prefix[l - 1], suffix[r + 1])\n        print(ans)", "def gcd(a, b):\n    if b == 0:\n        return abs(a)\n    return gcd(b, a % b)\nfor i in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    forward = [0] * (n + 5)\n    backward = [0] * (n + 5)\n    for x in range(1, n + 1):\n        forward[x] = gcd(forward[x - 1], a[x - 1])\n    for x in range(n, 1, -1):\n        backward[x] = gcd(backward[x + 1], a[x - 1])\n    while q:\n        (l, r) = map(int, input().split())\n        print(gcd(forward[l - 1], backward[r + 1]))\n        q -= 1", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    l = list(map(int, input().split()))\n    pl = [0]\n    ps = [0]\n    for i in range(n):\n        pl.append(gcd(pl[-1], l[i]))\n        ps.append(gcd(ps[-1], l[n - i - 1]))\n    ps = ps[::-1]\n    for i in range(q):\n        (a, b) = map(int, input().split())\n        print(gcd(pl[a - 1], ps[b]))", "def gcd(a, b):\n    if b == 0:\n        return abs(a)\n    return gcd(b, a % b)\nfor i in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    forward = [0] * (n + 5)\n    backward = [0] * (n + 5)\n    for x in range(1, n + 1):\n        forward[x] = gcd(forward[x - 1], a[x - 1])\n    for x in range(n, 1, -1):\n        backward[x] = gcd(backward[x + 1], a[x - 1])\n    while q:\n        (l, r) = map(int, input().split())\n        print(gcd(forward[l - 1], backward[r + 1]))\n        q -= 1", "def computeGCD(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return abs(x)\nfor _ in range(int(input())):\n    (array_size, queries) = map(int, input().split())\n    array = list((int(num) for num in input().strip().split()))[:array_size]\n    forward_gcd = [None] * (array_size + 10)\n    backward_gcd = [None] * (array_size + 10)\n    forward_gcd[0] = 0\n    backward_gcd[array_size] = 0\n    for i in range(array_size):\n        forward_gcd[i + 1] = computeGCD(forward_gcd[i], array[i])\n    for k in reversed(range(len(array))):\n        backward_gcd[k] = computeGCD(backward_gcd[k + 1], array[k])\n    while queries > 0:\n        (l, r) = map(int, input().split())\n        gcd = forward_gcd[l - 1]\n        gcd1 = backward_gcd[r]\n        print(computeGCD(gcd, gcd1))\n        queries -= 1", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    (l1, l2) = ([], [])\n    g = l[0]\n    for i in l:\n        g = math.gcd(i, g)\n        l1.append(g)\n    g = l[n - 1]\n    for i in l[::-1]:\n        g = math.gcd(i, g)\n        l2.append(g)\n    l2 = l2[::-1]\n    for i in range(m):\n        (c1, c2) = map(int, input().split())\n        if c1 - 2 >= 0 and c2 <= n - 1:\n            print(math.gcd(l1[c1 - 2], l2[c2]))\n        elif c1 - 2 >= 0:\n            print(l1[c1 - 2])\n        else:\n            print(l2[c2])", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    (l1, l2) = ([], [])\n    g = l[0]\n    for i in l:\n        g = math.gcd(i, g)\n        l1.append(g)\n    g = l[n - 1]\n    for i in l[::-1]:\n        g = math.gcd(i, g)\n        l2.append(g)\n    l2 = l2[::-1]\n    for i in range(m):\n        (c1, c2) = map(int, input().split())\n        if c1 - 2 >= 0 and c2 <= n - 1:\n            print(math.gcd(l1[c1 - 2], l2[c2]))\n        elif c1 - 2 >= 0:\n            print(l1[c1 - 2])\n        else:\n            print(l2[c2])", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    (l1, l2) = ([], [])\n    g = l[0]\n    for i in l:\n        g = math.gcd(i, g)\n        l1.append(g)\n    g = l[n - 1]\n    for i in l[::-1]:\n        g = math.gcd(i, g)\n        l2.append(g)\n    l2 = l2[::-1]\n    for i in range(m):\n        (c1, c2) = map(int, input().split())\n        if c1 - 2 >= 0 and c2 <= n - 1:\n            print(math.gcd(l1[c1 - 2], l2[c2]))\n        elif c1 - 2 >= 0:\n            print(l1[c1 - 2])\n        else:\n            print(l2[c2])", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor z in range(int(input())):\n    (n, q) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    p = [1] * n\n    g = a[0]\n    for i in range(1, n):\n        p[i] = g\n        g = gcd(g, a[i])\n    g = a[n - 1]\n    s = [1] * n\n    for i in range(n - 2, -1, -1):\n        s[i] = g\n        g = gcd(g, a[i])\n    for i in range(q):\n        (l, r) = [int(x) - 1 for x in input().split()]\n        if l == 0:\n            print(s[r])\n            continue\n        if r == n - 1:\n            print(p[l])\n            continue\n        print(gcd(p[l], s[r]))", "def gcd(a, b):\n    if a < b:\n        (a, b) = (b, a)\n    return a if b == 0 else gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (lg, rg) = ([0] * (n + 2), [0] * (n + 2))\n    lg[0] = 0\n    rg[-1] = 0\n    for i in range(1, n + 1):\n        lg[i] = gcd(a[i - 1], lg[i - 1])\n    for i in range(n, 0, -1):\n        rg[i] = gcd(a[i - 1], rg[i + 1])\n    for q1 in range(q):\n        (l, r) = map(int, input().split())\n        print(gcd(lg[l - 1], rg[r + 1]))", "ri = lambda : int(input())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nfrom collections import defaultdict\nimport sys\nsys.setrecursionlimit(100000)\n\ndef gcd(x, y):\n    while y > 0:\n        (x, y) = (y, x % y)\n    return x\nt = ri()\nfor test in range(t):\n    (n, q) = rl()\n    arr = rl()\n    prefix = [0] * (n + 2)\n    suffix = [0] * (n + 2)\n    for i in range(n):\n        prefix[i + 1] = gcd(prefix[i], arr[i])\n    for i in range(n, 0, -1):\n        suffix[i] = gcd(suffix[i + 1], arr[i - 1])\n    for i in range(q):\n        (l, r) = rl()\n        ans = gcd(prefix[l - 1], suffix[r + 1])\n        print(ans)", "ri = lambda : int(input())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nfrom collections import defaultdict\nimport sys\nsys.setrecursionlimit(100000)\n\ndef gcd(x, y):\n    while y > 0:\n        (x, y) = (y, x % y)\n    return x\nt = ri()\nfor test in range(t):\n    (n, q) = rl()\n    arr = rl()\n    prefix = [0] * (n + 2)\n    suffix = [0] * (n + 2)\n    for i in range(n):\n        prefix[i + 1] = gcd(prefix[i], arr[i])\n    for i in range(n, 0, -1):\n        suffix[i] = gcd(suffix[i + 1], arr[i - 1])\n    for i in range(q):\n        (l, r) = rl()\n        ans = gcd(prefix[l - 1], suffix[r + 1])\n        print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    gcd1 = [a[0]] * n\n    gcd2 = [a[-1]] * n\n    for j in range(1, n):\n        gcd1[j] = math.gcd(a[j], gcd1[j - 1])\n    for k in range(n - 2, -1, -1):\n        gcd2[k] = math.gcd(a[k], gcd2[k + 1])\n    for z in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        if l == 0:\n            print(gcd2[r + 1])\n        elif r == n - 1:\n            print(gcd1[l - 1])\n        else:\n            print(math.gcd(gcd1[l - 1], gcd2[r + 1]))", "import math\nt = int(input())\nfor _ in range(t):\n    (n, q) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    gcd_l = [arr[0]] * n\n    gcd_r = [arr[-1]] * n\n    for i in range(1, n):\n        gcd_l[i] = math.gcd(arr[i], gcd_l[i - 1])\n    for i in range(n - 2, -1, -1):\n        gcd_r[i] = math.gcd(arr[i], gcd_r[i + 1])\n    for i in range(q):\n        (l, r) = [int(x) for x in input().split()]\n        l -= 1\n        r -= 1\n        if l == 0:\n            print(gcd_r[r + 1])\n        elif r == n - 1:\n            print(gcd_l[l - 1])\n        else:\n            print(math.gcd(gcd_l[l - 1], gcd_r[r + 1]))", "import math\nimport sys\nfrom collections import Counter, defaultdict\nfrom bisect import bisect_left\nmod = 1000000007\n\ndef integer_list():\n    return list(map(int, input().split()))\n\ndef string_list():\n    return list(map(str, input().split()))\n\ndef hetro_list():\n    return list(input().split())\n\ndef main():\n    try:\n        l_to_r = [lst[0]]\n        r_to_l = [lst[-1]]\n        for i in range(1, n):\n            x = math.gcd(l_to_r[-1], lst[i])\n            l_to_r.append(x)\n        for i in range(n - 2, -1, -1):\n            x = math.gcd(r_to_l[-1], lst[i])\n            r_to_l.append(x)\n        r_to_l = [0] + r_to_l[::-1] + [0]\n        l_to_r = [0] + l_to_r + [0]\n        for pair in range(q):\n            (l, r) = integer_list()\n            ans = math.gcd(l_to_r[l - 1], r_to_l[r + 1])\n            print(ans)\n    except Exception as e:\n        print(e)\nt = int(input())\nfor _ in range(t):\n    (n, q) = integer_list()\n    lst = integer_list()\n    main()", "import math\nt = int(input())\nwhile t > 0:\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.insert(0, 0)\n    forward = [0] * (n + 1)\n    backward = [0] * (n + 2)\n    backward[n] = arr[n]\n    backward[n + 1] = 0\n    for i in range(1, n + 1):\n        forward[i] = math.gcd(forward[i - 1], arr[i])\n    for i in range(n - 1, 0, -1):\n        backward[i] = math.gcd(backward[i + 1], arr[i])\n    while q > 0:\n        (l, r) = map(int, input().split())\n        gc = math.gcd(forward[l - 1], backward[r + 1])\n        print(gc)\n        q -= 1\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    gcd_left = [0]\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    for i in range(len(arr)):\n        gcd_left.append(gcd(gcd_left[-1], arr[i]))\n    gcd_right = [0]\n    for i in range(-1, -len(arr) - 1, -1):\n        gcd_right.append(gcd(gcd_right[-1], arr[i]))\n    gcd_right = gcd_right[::-1]\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        print(gcd(gcd_left[l - 1], gcd_right[r]))", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    gcd_left = [0]\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    for i in range(len(arr)):\n        gcd_left.append(gcd(gcd_left[-1], arr[i]))\n    gcd_right = [0]\n    for i in range(-1, -len(arr) - 1, -1):\n        gcd_right.append(gcd(gcd_right[-1], arr[i]))\n    gcd_right = gcd_right[::-1]\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        print(gcd(gcd_left[l - 1], gcd_right[r]))", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    gcd_left = [0]\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    for i in range(len(arr)):\n        gcd_left.append(gcd(gcd_left[-1], arr[i]))\n    gcd_right = [0]\n    for i in range(-1, -len(arr) - 1, -1):\n        gcd_right.append(gcd(gcd_right[-1], arr[i]))\n    gcd_right = gcd_right[::-1]\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        print(gcd(gcd_left[l - 1], gcd_right[r]))", "import math\nn = int(input())\nfor i in range(n):\n    (n, q) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    gcd_left = [0]\n    for i in range(len(arr)):\n        gcd_left.append(math.gcd(gcd_left[-1], arr[i]))\n    gcd_right = [0]\n    for i in range(-1, -len(arr) - 1, -1):\n        gcd_right.append(math.gcd(gcd_right[-1], arr[i]))\n    gcd_right = gcd_right[::-1]\n    for i in range(q):\n        (left, right) = list(map(int, input().split()))\n        print(math.gcd(gcd_left[left - 1], gcd_right[right]))", "import math\nt = int(input())\nwhile t:\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    farr = [0]\n    barr = [0]\n    for i in range(n):\n        fgc = math.gcd(farr[-1], arr[i])\n        farr.append(fgc)\n        bgc = math.gcd(barr[-1], arr[-i - 1])\n        barr.append(bgc)\n    while q:\n        (l, r) = map(int, input().split())\n        x = math.gcd(farr[l - 1], barr[-1 - r])\n        print(x)\n        q -= 1\n    t -= 1", "from math import gcd\nt = int(input())\nwhile t:\n    (a, b) = list(map(int, input().split()))\n    arr = []\n    arr.append(0)\n    arr.extend(list(map(int, input().split())))\n    pregcd = [0] * (a + 2)\n    sufgcd = [0] * (a + 2)\n    pregcd[0] = 0\n    sufgcd[a] = 0\n    for i in range(1, a + 1):\n        pregcd[i] = gcd(pregcd[i - 1], arr[i])\n    for i in range(a, 0, -1):\n        sufgcd[i] = gcd(sufgcd[i + 1], arr[i])\n    while b > 0:\n        (l, r) = list(map(int, input().split()))\n        print(gcd(pregcd[l - 1], sufgcd[r + 1]))\n        b -= 1\n    t -= 1", "from sys import stdin\nfrom math import log, floor, ceil, gcd\nfrom collections import defaultdict as dd\ninput = stdin.readline\ninp = lambda : int(stdin.readline())\nrs = lambda : stdin.readline().strip()\n\ndef ra(typ):\n    return list(map(typ, stdin.readline().split()))\n\ndef rv(typ):\n    return map(typ, stdin.readline().split())\n\ndef main():\n    for _ in range(inp()):\n        (n, q) = rv(int)\n        a = ra(int)\n        p = [0 for _ in range(n)]\n        s = [0 for _ in range(n)]\n        pg = 0\n        sg = 0\n        for i in range(n):\n            pg = gcd(pg, a[i])\n            sg = gcd(sg, a[n - 1 - i])\n            p[i] = pg\n            s[n - 1 - i] = sg\n        for _ in range(q):\n            (l, r) = rv(int)\n            (l, r) = (l - 1, r - 1)\n            g1 = 0\n            if l != 0:\n                g1 = p[l - 1]\n            g2 = 0\n            if r < n - 1:\n                g2 = s[r + 1]\n            print(gcd(g1, g2))\nmain()", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    s = list(map(int, input().split()))\n    pre = [0 for i in range(n + 1)]\n    suf = [0 for i in range(n + 1)]\n    pre[0] = 0\n    suf[-1] = 0\n    for i in range(1, len(pre)):\n        pre[i] = gcd(pre[i - 1], s[i - 1])\n    for i in range(len(suf) - 2, -1, -1):\n        suf[i] = gcd(suf[i + 1], s[i])\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        print(gcd(pre[l - 1], suf[r]))", "n = int(input())\nfor i in range(n):\n\n    def recr(a, b):\n        if b == 0:\n            return a\n        return recr(b, a % b)\n    (a, length) = list(map(int, input().split()))\n    lis = list(map(int, input().split()))\n    prefix = [0 for i in range(len(lis))]\n    suffix = [0 for i in range(len(lis))]\n    for i in range(len(prefix)):\n        prefix[i] = recr(lis[i], prefix[i - 1])\n    suffix[-1] = lis[-1]\n    for i in range(len(lis) - 2, -1, -1):\n        suffix[i] = recr(lis[i], suffix[i + 1])\n    for i in range(length):\n        (start, end) = list(map(int, input().split()))\n        if start - 1 == 0:\n            print(suffix[end])\n        elif end == len(lis):\n            print(prefix[start - 2])\n        else:\n            print(recr(prefix[start - 2], suffix[end]))", "import math\nt = int(input())\nwhile t:\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    farr = [0]\n    barr = [0]\n    for i in range(n):\n        fgc = math.gcd(farr[-1], arr[i])\n        farr.append(fgc)\n        bgc = math.gcd(barr[-1], arr[-i - 1])\n        barr.append(bgc)\n    while q:\n        (l, r) = map(int, input().split())\n        x = math.gcd(farr[l - 1], barr[-1 - r])\n        print(x)\n        q -= 1\n    t -= 1", "import math\nt = int(input())\nwhile t:\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    farr = [0]\n    barr = [0]\n    for i in range(n):\n        fgc = math.gcd(farr[-1], arr[i])\n        farr.append(fgc)\n        bgc = math.gcd(barr[-1], arr[-i - 1])\n        barr.append(bgc)\n    while q:\n        (l, r) = map(int, input().split())\n        x = math.gcd(farr[l - 1], barr[-1 - r])\n        print(x)\n        q -= 1\n    t -= 1", "import math\nt = int(input())\nwhile t:\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    farr = [0]\n    barr = [0]\n    for i in range(n):\n        fgc = math.gcd(farr[-1], arr[i])\n        farr.append(fgc)\n        bgc = math.gcd(barr[-1], arr[-i - 1])\n        barr.append(bgc)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        x = math.gcd(farr[l - 1], barr[-1 - r])\n        print(x)\n    t -= 1", "from math import gcd\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    pre = [0] * (n + 1)\n    pre[0] = 0\n    for i in range(1, n + 1):\n        pre[i] = gcd(pre[i - 1], arr[i - 1])\n    suf = [0] * (n + 1)\n    suf[n] = 0\n    for i in range(n - 1, -1, -1):\n        suf[i] = gcd(suf[i + 1], arr[i])\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        print(gcd(pre[l - 1], suf[r]))", "def gcd(a, b):\n    if a == b:\n        return a\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef arrgcd(arr):\n    if len(arr) == 1:\n        return\n    for i in range(1, len(arr)):\n        arr[i] = gcd(arr[i], arr[i - 1])\ncase = int(input())\nfor r in range(case):\n    (n, q) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    rarr = list(reversed(arr))\n    arrgcd(arr)\n    arrgcd(rarr)\n    rarr.reverse()\n    for qq in range(q):\n        (l, r) = [int(x) for x in input().split()]\n        if l == 1:\n            print(rarr[r])\n            continue\n        if r == n:\n            print(arr[l - 2])\n            continue\n        print(gcd(arr[l - 2], rarr[r]))", "def gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\nT = int(input())\nfor i in range(T):\n    (n, q) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    pre = [0] * (n + 1)\n    suf = [0] * (n + 1)\n    for a in range(1, n + 1):\n        pre[a] = gcd(arr[a - 1], pre[a - 1])\n    for a in range(n - 1, -1, -1):\n        suf[a] = gcd(arr[a], suf[a + 1])\n    for z in range(q):\n        (l, r) = [int(x) for x in input().split()]\n        print(gcd(pre[l - 1], suf[r]))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    pre_gcd = [arr[0]]\n    post_gcd = [arr[-1]]\n    for i in range(1, n):\n        a = arr[i]\n        b = pre_gcd[i - 1]\n        pre_gcd.append(gcd(a, b))\n    for i in range(n - 2, -1, -1):\n        a = post_gcd[n - 2 - i]\n        b = arr[i]\n        post_gcd.append(gcd(a, b))\n    post_gcd.reverse()\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        g1 = 0\n        g2 = 0\n        if l != 0:\n            g1 = pre_gcd[l - 1]\n        if r != n - 1:\n            g2 = post_gcd[r + 1]\n        print(gcd(g1, g2))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    p = a[:]\n    s = a[:]\n    for i in range(1, n):\n        p[i] = gcd(p[i - 1], a[i])\n    for i in range(n - 2, -1, -1):\n        s[i] = gcd(s[i + 1], a[i])\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        g1 = 0\n        g2 = 0\n        if l != 0:\n            g1 = p[l - 1]\n        if r != n - 1:\n            g2 = s[r + 1]\n        print(gcd(g1, g2))", "def gcd_iterative(a, b):\n    while b != 0:\n        temp = a % b\n        a = b\n        b = temp\n    else:\n        return a\n\ndef precompute_gcd_first(new_list):\n    d = 0\n    temp = [0]\n    for (i, a) in enumerate(new_list):\n        d = gcd_iterative(a, d)\n        temp.append(d)\n    return temp\nfor _ in range(int(input())):\n    (N, Q) = list(map(int, input().split()))\n    array = list(map(int, input().split()))\n    gcd_list_first = precompute_gcd_first(array)\n    gcd_list_last = precompute_gcd_first(array[::-1])[::-1]\n    for q in range(Q):\n        (L, R) = list(map(int, input().split()))\n        print(gcd_iterative(gcd_list_first[L - 1], gcd_list_last[R]))", "def gcd_iterative(a, b):\n    while b != 0:\n        temp = a % b\n        a = b\n        b = temp\n    else:\n        return a\n\ndef precompute_gcd_first(new_list):\n    d = new_list[0]\n    temp = [d]\n    for (i, a) in enumerate(new_list[1:]):\n        d = gcd_iterative(a, d)\n        temp.append(d)\n    return temp\nfor _ in range(int(input())):\n    (N, Q) = list(map(int, input().split()))\n    array = list(map(int, input().split()))\n    gcd_list_first = precompute_gcd_first(array)\n    gcd_list_last = precompute_gcd_first(array[::-1])[::-1]\n    for q in range(Q):\n        (L, R) = list(map(int, input().split()))\n        if L - 2 < 0:\n            d1 = 0\n        else:\n            d1 = gcd_list_first[L - 2]\n        if R == len(gcd_list_first):\n            d2 = 0\n        else:\n            d2 = gcd_list_last[R]\n        print(gcd_iterative(d1, d2))", "from math import gcd\nt = int(input())\nwhile t:\n    (n, q) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    arr.insert(0, 0)\n    gcdForward = [0] * (n + 1)\n    gcdBackward = [0] * (n + 2)\n    for i in range(1, n + 1):\n        gcdForward[i] = gcd(gcdForward[i - 1], arr[i])\n    for i in range(n, 0, -1):\n        gcdBackward[i] = gcd(gcdBackward[i + 1], arr[i])\n    while q:\n        (l, r) = [int(i) for i in input().split()]\n        print(gcd(gcdForward[l - 1], gcdBackward[r + 1]))\n        q -= 1\n    t -= 1", "def findGCD(num1, num2):\n    snum = min(num1, num2)\n    lnum = max(num1, num2)\n    if snum == 0:\n        return lnum\n    while lnum % snum != 0:\n        temp = snum\n        snum = lnum % snum\n        lnum = temp\n    return snum\nt = int(input())\nwhile t:\n    (n, q) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    arr.insert(0, 0)\n    gcdForward = [0] * (n + 1)\n    gcdBackward = [0] * (n + 2)\n    for i in range(1, n + 1):\n        gcdForward[i] = findGCD(gcdForward[i - 1], arr[i])\n    for i in range(n, 0, -1):\n        gcdBackward[i] = findGCD(gcdBackward[i + 1], arr[i])\n    while q:\n        (l, r) = [int(i) for i in input().split()]\n        print(findGCD(gcdForward[l - 1], gcdBackward[r + 1]))\n        q -= 1\n    t -= 1", "pre = [0] * 100005\nsuf = [0] * 100005\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split(' '))\n    l = list(map(int, input().split(' ')))\n    a = [0]\n    a.extend(l)\n    pre[0] = suf[n + 1] = 0\n    for i in range(1, n + 1):\n        pre[i] = gcd(pre[i - 1], a[i])\n    for i in range(n, 0, -1):\n        suf[i] = gcd(suf[i + 1], a[i])\n    for i in range(q):\n        (l, r) = map(int, input().split(' '))\n        ans = gcd(pre[l - 1], suf[r + 1])\n        print(ans)", "import math\nfor t in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    x = [0] * (n + 1)\n    y = [0] * (n + 1)\n    b = a[0]\n    for i in range(1, n + 1):\n        b = math.gcd(b, a[i - 1])\n        x[i] = b\n    b = a[-1]\n    for i in range(n - 1, -1, -1):\n        b = math.gcd(b, a[i])\n        y[i] = b\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        print(math.gcd(x[l - 1], y[r]))", "import math\nfor t in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    x = [0] * (n + 1)\n    y = [0] * (n + 1)\n    b = a[0]\n    for i in range(1, n + 1):\n        b = math.gcd(b, a[i - 1])\n        x[i] = b\n    b = a[-1]\n    for i in range(n - 1, -1, -1):\n        b = math.gcd(b, a[i])\n        y[i] = b\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        print(math.gcd(x[l - 1], y[r]))", "def gcd(a, b):\n    if b == 0:\n        return a\n    elif a == 0:\n        return b\n    else:\n        if a < b:\n            (a, b) = (b, a)\n        if a % b == 0:\n            return b\n        while a % b != 0:\n            return gcd(b, a % b)\nx = int(input())\nfor i in range(x):\n    (n, q) = input().split()\n    m = input().split()\n    n = int(n)\n    lit = []\n    prf = [0] * (n + 1)\n    suff = [0] * (n + 2)\n    for k in m:\n        lit.append(int(k))\n    for p in range(1, n + 1):\n        prf[p] = gcd(prf[p - 1], lit[p - 1])\n    for u in range(n, 0, -1):\n        suff[u] = gcd(suff[u + 1], lit[u - 1])\n    for j in range(int(q)):\n        (l, r) = input().split()\n        l = int(l)\n        r = int(r)\n        print(gcd(suff[r + 1], prf[l - 1]))", "def gcd(m, n):\n    if m == 0:\n        return n\n    else:\n        return gcd(n % m, m)\nfor t in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = [0] + list(map(int, input().split()))\n    left = [0] * (n + 2)\n    right = [0] * (n + 2)\n    for i in range(1, n + 1):\n        left[i] = gcd(left[i - 1], arr[i])\n    for i in range(n, 0, -1):\n        right[i] = gcd(arr[i], right[i + 1])\n    for x in range(q):\n        (l, r) = map(int, input().split())\n        ans = gcd(left[l - 1], right[r + 1])\n        print(ans)", "def hcf(a, b):\n    if a == 0:\n        return b\n    else:\n        return hcf(b % a, a)\nfor t in range(int(input())):\n    (N, Q) = map(int, input().split())\n    arr = [0]\n    arr = arr + list(map(int, input().split()))\n    l = [0] * (N + 2)\n    r = [0] * (N + 2)\n    for i in range(1, N + 1):\n        l[i] = hcf(l[i - 1], arr[i])\n    for i in range(N, 0, -1):\n        r[i] = hcf(r[i + 1], arr[i])\n    for i in range(Q):\n        (left, right) = map(int, input().split())\n        print(hcf(l[left - 1], r[right + 1]))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = []\n    (l, r) = ([0] * (n + 2), [0] * (n + 2))\n    a.append(0)\n    a = a + list(map(int, input().split()))\n    for i in range(1, n + 1):\n        l[i] = gcd(l[i - 1], a[i])\n    for i in range(n, 0, -1):\n        r[i] = gcd(r[i + 1], a[i])\n    for i in range(q):\n        (l1, r1) = map(int, input().split())\n        print(gcd(l[l1 - 1], r[r1 + 1]))", "def gcd(a, b):\n    if b > a:\n        (a, b) = (b, a)\n    while b > 0:\n        (a, b) = (b, a % b)\n    return a\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    arr = [0] + [int(i) for i in input().split()]\n    pre = [0] * (n + 1)\n    suf = [0] * (n + 2)\n    for i in range(1, n + 1):\n        pre[i] = gcd(pre[i - 1], arr[i])\n    for i in range(n, 0, -1):\n        suf[i] = gcd(suf[i + 1], arr[i])\n    for o in range(q):\n        (l, r) = map(int, input().split())\n        print(gcd(pre[l - 1], suf[r + 1]))", "import math\nfor t in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = list()\n    arr = [0] + list(map(int, input().split()))\n    (pre, suf) = ([0] * (n + 1), [0] * (n + 2))\n    for i in range(1, n + 1):\n        pre[i] = math.gcd(pre[i - 1], arr[i])\n    for i in range(n, 0, -1):\n        suf[i] = math.gcd(suf[i + 1], arr[i])\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        print(math.gcd(pre[l - 1], suf[r + 1]))", "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif b > a:\n        return gcd(b, a)\n    else:\n        return gcd(b, a % b)\ntc = int(input())\nfor _ in range(tc):\n    (n, q) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    arr.insert(0, 0)\n    arr.append(0)\n    (prefix, sufix) = ([0] * (n + 1), [0] * (n + 2))\n    for i in range(1, n + 1):\n        ele = arr[i]\n        prefix[i] = gcd(prefix[i - 1], ele)\n    for i in range(n, 0, -1):\n        ele = arr[i]\n        sufix[i] = gcd(sufix[i + 1], ele)\n    for _ in range(q):\n        (l, r) = map(int, input().split(' '))\n        print(gcd(prefix[l - 1], sufix[r + 1]))", "def gcd(a, b):\n    while b > 0:\n        temp = b\n        b = a % b\n        a = temp\n    return a\nt = int(input())\nfor test in range(t):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    a1 = [arr[0]]\n    a2 = [arr[-1]]\n    for i in range(1, n):\n        num = a1[-1]\n        num2 = arr[i]\n        ans = gcd(num, num2)\n        a1.append(ans)\n    for j in range(1, n):\n        i = n - j - 1\n        num = a2[-1]\n        num2 = arr[i]\n        ans = gcd(num, num2)\n        a2.append(ans)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        l = l - 2\n        r = n - r - 1\n        ans1 = -1\n        ans2 = -1\n        if l == -1:\n            ans1 = 0\n        else:\n            ans1 = a1[l]\n        if r == -1:\n            ans2 = 0\n        else:\n            ans2 = a2[r]\n        print(gcd(ans1, ans2))", "from math import gcd\n\ndef solve():\n    (n, q) = map(int, input().split())\n    t = list(map(int, input().split()))\n    prefix = [0] * (n + 2)\n    suffix = [0] * (n + 2)\n    prefix[0] = 0\n    suffix[n + 1] = 0\n    for i in range(0, n):\n        prefix[i + 1] = gcd(t[i], prefix[i])\n    for i in range(n - 1, -1, -1):\n        suffix[i] = gcd(t[i], suffix[i + 1])\n    while q:\n        (l, r) = map(int, input().split())\n        print(gcd(prefix[l - 1], suffix[r]))\n        q -= 1\n\ndef main():\n    tc = int(input())\n    while tc:\n        solve()\n        tc -= 1\nmain()", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\nt = int(input())\nfor i in range(t):\n    (n, q) = tuple(map(int, input().split()))\n    a = list(map(int, input().split()))\n    pre = [0] * (n + 1)\n    pre[1] = a[0]\n    for j in range(2, n + 1):\n        pre[j] = gcd(a[j - 1], pre[j - 1])\n    suf = [0] * (n + 1)\n    suf[n - 1] = a[-1]\n    for j in range(n - 2, -1, -1):\n        suf[j] = gcd(a[j], suf[j + 1])\n    for _ in range(q):\n        (l, r) = tuple(map(int, input().split()))\n        print(gcd(pre[l - 1], suf[r]))", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    pre = [0] * n\n    suf = [0] * n\n    pre[0] = arr[0]\n    suf[-1] = arr[-1]\n    for i in range(1, n):\n        pre[i] = gcd(pre[i - 1], arr[i])\n        suf[n - 1 - i] = gcd(suf[n - i], arr[n - 1 - i])\n    for _ in range(q):\n        (u, v) = map(int, input().split())\n        if u - 2 >= 0 and v < n:\n            print(gcd(pre[u - 2], suf[v]))\n        elif u - 2 >= 0:\n            print(pre[u - 2])\n        else:\n            print(suf[v])", "import sys, io, os, math, time\nfrom math import ceil, log, gcd, inf, floor\n\ndef printlist(n):\n    sys.stdout.write(' '.join(map(str, n)) + '\\n')\nprintf = lambda n: sys.stdout.write(str(n) + '\\n')\n\ndef printns(n):\n    sys.stdout.write(str(n))\n\ndef intinp():\n    return int(sys.stdin.readline())\n\ndef strinp():\n    return sys.stdin.readline()\n\ndef arrinp():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef mulinp():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef main():\n    tc = intinp()\n    while tc:\n        (n, q) = mulinp()\n        a = arrinp()\n        forward = [0] * (n + 10)\n        backward = [0] * (n + 10)\n        for i in range(1, n + 1):\n            forward[i] = gcd(forward[i - 1], a[i - 1])\n        it = n\n        while it:\n            backward[it] = gcd(backward[it + 1], a[it - 1])\n            it -= 1\n        while q:\n            (l, r) = mulinp()\n            print(gcd(forward[l - 1], backward[r + 1]))\n            q -= 1\n        tc -= 1\nmain()", "import sys\nimport math\nfrom sys import stdin, stdout\n\ndef get_ints_in_variables():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_ints_in_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef calculatesuffixSuffix(arr, prefix, suffix):\n    prefix[1] = arr[0]\n    suffix[len(arr) - 1] = arr[-1]\n    j = len(arr) - 2\n    for i in range(2, len(arr)):\n        prefix[i] = gcd(prefix[i - 1], arr[i - 1])\n    while j >= 0:\n        suffix[j] = gcd(suffix[j + 1], arr[j])\n        j -= 1\n\ndef main():\n    for _ in range(int(input())):\n        (n, q) = get_ints_in_variables()\n        arr = get_ints_in_list()\n        prefix = [0 for _ in range(n)]\n        suffix = [0 for _ in range(n)]\n        calculatesuffixSuffix(arr, prefix, suffix)\n        for _ in range(q):\n            (l, r) = get_ints_in_variables()\n            if l == 1:\n                print(suffix[r])\n            elif r == len(arr):\n                print(prefix[l - 1])\n            else:\n                print(gcd(prefix[l - 1], suffix[r]))\nmain()", "import math\ntestcase = int(input())\nwhile testcase:\n    (n, queries) = map(int, input().split())\n    lists = list(map(int, input().split()))\n    forward = [0] * (n + 1)\n    backward = [0] * (n + 1)\n    for i in range(1, n + 1):\n        forward[i] = math.gcd(forward[i - 1], lists[i - 1])\n    for i in range(n - 1, -1, -1):\n        backward[i] = math.gcd(backward[i + 1], lists[i])\n    while queries:\n        (l, r) = map(int, input().split())\n        print(math.gcd(forward[l - 1], backward[r]))\n        queries -= 1\n    testcase -= 1", "import math\nt = int(input())\nfor tc in range(t):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    left = [0] * (n + 1)\n    right = [0] * (n + 1)\n    for i in range(1, n + 1):\n        left[i] = math.gcd(left[i - 1], a[i - 1])\n    for i in range(n - 1, -1, -1):\n        right[i] = math.gcd(right[i + 1], a[i])\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        print(math.gcd(left[l - 1], right[r]))", "def gcd(a, b):\n    while b != 0:\n        c = a\n        a = b\n        b = c % a\n    return a\nt = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    arr = [int(ele) for ele in input().split()]\n    pre = [0] * (n + 1)\n    suff = [0] * (n + 1)\n    pre[0] = 0\n    for i in range(1, n + 1):\n        pre[i] = gcd(pre[i - 1], arr[i - 1])\n    suff[-1] = 0\n    for i in range(n - 1, -1, -1):\n        suff[i] = gcd(suff[i + 1], arr[i])\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        print(gcd(pre[l - 1], suff[r]))", "import sys, math\nfrom collections import deque, defaultdict\nimport operator as op\nfrom functools import reduce\nfrom itertools import permutations\nI = sys.stdin.readline\n\ndef ii():\n    return int(I().strip())\n\ndef li():\n    return list(map(int, I().strip().split()))\n\ndef mi():\n    return map(int, I().strip().split())\n\ndef ncr(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef valid(row, col, rows, cols, rcross, lcross):\n    return rows[row] == 0 and cols[col] == 0 and (rcross[col + row] == 0) and (lcross[col - row] == 0)\n\ndef div(n):\n    tmp = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            cnt = 0\n            while n % i == 0:\n                n = n // i\n                cnt += 1\n            tmp.append((i, cnt))\n    if n > 1:\n        tmp.append((n, 1))\n    return tmp\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    elif n <= 2:\n        return True\n    else:\n        flag = True\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                flag = False\n                break\n        return flag\n\ndef s(b):\n    ans = []\n    while b > 0:\n        tmp = b % 10\n        ans.append(tmp)\n        b = b // 10\n    return ans\n\ndef main():\n    ans = ''\n    for _ in range(ii()):\n        (n, q) = mi()\n        a = li()\n        queries = []\n        for i in range(q):\n            (l, r) = mi()\n            queries.append((l, r))\n        prefix = [a[0]]\n        for i in range(1, n):\n            prefix.append(gcd(prefix[-1], a[i]))\n        suffix = [0] * n\n        suffix[n - 1] = a[n - 1]\n        for i in range(n - 2, -1, -1):\n            suffix[i] = gcd(suffix[i + 1], a[i])\n        for i in queries:\n            if i[0] == 1:\n                print(suffix[i[1]])\n            elif i[1] == n:\n                print(prefix[i[0] - 2])\n            else:\n                tm = gcd(prefix[i[0] - 2], suffix[i[1]])\n                print(tm)\nmain()", "pre = [0] * 100005\nsff = [0] * 100005\nt = int(input())\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nwhile t:\n    t -= 1\n    (n, q) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    pre[0] = sff[n + 1] = 0\n    for i in range(1, n + 1):\n        pre[i] = gcd(pre[i - 1], arr[i - 1])\n    for i in range(n, 0, -1):\n        sff[i] = gcd(sff[i + 1], arr[i - 1])\n    while q:\n        q -= 1\n        (l, r) = map(int, input().split(' '))\n        print(gcd(pre[l - 1], sff[r + 1]))", "pre = [0] * 100005\nsff = [0] * 100005\nt = int(input())\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor _ in range(t):\n    (n, q) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    pre[0] = sff[n + 1] = 0\n    for i in range(1, n + 1):\n        pre[i] = gcd(pre[i - 1], arr[i - 1])\n    sff.append(0)\n    for i in range(n, 0, -1):\n        sff[i] = gcd(sff[i + 1], arr[i - 1])\n    for i in range(q):\n        (l, r) = map(int, input().split(' '))\n        print(gcd(pre[l - 1], sff[r + 1]))", "from math import gcd\nfor _ in range(int(input())):\n    (n, m) = [int(i) for i in input().split()]\n    lst = [int(i) for i in input().split()]\n    lst1 = [0] * n\n    lst2 = [0] * n\n    for i in range(0, n):\n        if i == 0:\n            lst1[i] = lst[i]\n        else:\n            lst1[i] = gcd(lst1[i - 1], lst[i])\n    for i in range(n - 1, -1, -1):\n        if i == n - 1:\n            lst2[i] = lst[i]\n        else:\n            lst2[i] = gcd(lst2[i + 1], lst[i])\n    for __ in range(0, m):\n        (a, b) = [int(i) for i in input().split()]\n        a = a - 1\n        b = b - 1\n        if a > 0 and b + 1 < n:\n            print(gcd(lst1[a - 1], lst2[b + 1]))\n        elif b + 1 < n:\n            print(lst2[b + 1])\n        else:\n            print(lst1[a - 1])", "import math\nfrom sys import stdin, stdout\nfor _ in range(int(stdin.readline())):\n    (n, q) = map(int, stdin.readline().split())\n    l = list(map(int, stdin.readline().split()))\n    suff = [l[-1]]\n    pre = [l[0]]\n    for i in range(1, n):\n        pre.append(math.gcd(pre[-1], l[i]))\n    for i in range(n - 2, -1, -1):\n        suff.append(math.gcd(suff[-1], l[i]))\n    suff = suff[::-1]\n    pre = [0] + pre\n    suff = suff + [0]\n    for i in range(q):\n        (l, r) = map(int, stdin.readline().split())\n        print(math.gcd(pre[l - 1], suff[r]))", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, q) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    mem = []\n    mem.append(arr[0])\n    for i in range(1, len(arr)):\n        mem.append(math.gcd(mem[i - 1], arr[i]))\n    memsuff = []\n    memsuff.append(arr[len(arr) - 1])\n    for i in range(len(arr) - 2, -1, -1):\n        memsuff.append(math.gcd(memsuff[len(arr) - i - 2], arr[i]))\n    memsuff = memsuff[::-1]\n    while q > 0:\n        q -= 1\n        (l, r) = list(map(int, input().split()))\n        if l == 1:\n            print(memsuff[r])\n        elif r == n:\n            print(mem[l - 2])\n        else:\n            print(math.gcd(mem[l - 2], memsuff[r]))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor _ in range(int(input())):\n    (n, q) = map(int, input().strip().split())\n    arr = [int(i) for i in input().split()]\n    prefix_gcd = [0] * n\n    prefix_gcd[0] = arr[0]\n    for i in range(1, n):\n        prefix_gcd[i] = gcd(arr[i], prefix_gcd[i - 1])\n    suffix_gcd = [0] * n\n    suffix_gcd[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        suffix_gcd[i] = gcd(arr[i], suffix_gcd[i + 1])\n    for i in range(q):\n        (l, r) = map(int, input().strip().split())\n        (l, r) = (l - 1, r - 1)\n        left = prefix_gcd[l - 1] if l - 1 >= 0 else None\n        right = suffix_gcd[r + 1] if r + 1 < n else None\n        if left and right:\n            print(gcd(left, right))\n        elif left and (not right):\n            print(left)\n        else:\n            print(right)", "import sys\ninput = sys.stdin.readline\n\ndef gcd(x, y):\n    if x % y == 0:\n        return y\n    return gcd(y, x % y)\nt = int(input())\nfor you in range(t):\n    l = input().split()\n    n = int(l[0])\n    q = int(l[1])\n    l = input().split()\n    li = [int(i) for i in l]\n    pref = []\n    num = li[0]\n    for i in range(n):\n        num = gcd(num, li[i])\n        pref.append(num)\n    suff = []\n    num = li[-1]\n    for i in range(n - 1, -1, -1):\n        num = gcd(num, li[i])\n        suff.append(num)\n    suff.reverse()\n    for i in range(q):\n        l = input().split()\n        r = int(l[1])\n        l = int(l[0])\n        l -= 1\n        r -= 1\n        if l - 1 >= 0 and r + 1 < n:\n            g = pref[l - 1]\n            g = gcd(g, suff[r + 1])\n            print(g)\n        elif l == 0:\n            print(suff[r + 1])\n        else:\n            print(pref[l - 1])", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor t in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    l_gcd = [0] * (n + 1)\n    for i in range(1, n + 1):\n        l_gcd[i] = gcd(arr[i - 1], l_gcd[i - 1])\n    r_gcd = [0] * (n + 1)\n    for i in range(-2, -n - 2, -1):\n        r_gcd[i] = gcd(arr[i + 1], r_gcd[i + 1])\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        print(gcd(l_gcd[l - 1], r_gcd[r]))", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, q) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    mem = []\n    mem.append(arr[0])\n    for i in range(1, len(arr)):\n        mem.append(math.gcd(mem[i - 1], arr[i]))\n    memsuff = []\n    memsuff.append(arr[len(arr) - 1])\n    for i in range(len(arr) - 2, -1, -1):\n        memsuff.append(math.gcd(memsuff[len(arr) - i - 2], arr[i]))\n    memsuff = memsuff[::-1]\n    while q > 0:\n        q -= 1\n        (l, r) = list(map(int, input().split()))\n        if l == 1:\n            print(memsuff[r])\n        elif r == n:\n            print(mem[l - 2])\n        else:\n            print(math.gcd(mem[l - 2], memsuff[r]))", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, q) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    mem = []\n    mem.append(arr[0])\n    for i in range(1, len(arr)):\n        mem.append(math.gcd(mem[i - 1], arr[i]))\n    memsuff = []\n    memsuff.append(arr[len(arr) - 1])\n    for i in range(len(arr) - 2, -1, -1):\n        memsuff.append(math.gcd(memsuff[len(arr) - i - 2], arr[i]))\n    memsuff = memsuff[::-1]\n    while q > 0:\n        q -= 1\n        (l, r) = list(map(int, input().split()))\n        if l == 1:\n            print(memsuff[r])\n        elif r == n:\n            print(mem[l - 2])\n        else:\n            print(math.gcd(mem[l - 2], memsuff[r]))", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, q) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    mem = []\n    mem.append(arr[0])\n    for i in range(1, len(arr)):\n        mem.append(math.gcd(mem[i - 1], arr[i]))\n    memsuff = []\n    memsuff.append(arr[len(arr) - 1])\n    for i in range(len(arr) - 2, -1, -1):\n        memsuff.append(math.gcd(memsuff[len(arr) - i - 2], arr[i]))\n    memsuff = memsuff[::-1]\n    while q > 0:\n        q -= 1\n        (l, r) = list(map(int, input().split()))\n        if l == 1:\n            print(memsuff[r])\n        elif r == n:\n            print(mem[l - 2])\n        else:\n            print(math.gcd(mem[l - 2], memsuff[r]))", "from math import gcd\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = [0] + a\n    r = [0] * (n + 1)\n    s = [0] * (n + 2)\n    r[0] = a[0]\n    for i in range(1, n + 1):\n        r[i] = gcd(r[i - 1], a[i])\n    for i in range(n, 0, -1):\n        s[i] = gcd(s[i + 1], a[i])\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        print(gcd(r[x - 1], s[y + 1]))", "def gcd(x, y):\n    if y == 0:\n        return x\n    return gcd(y, x % y)\nmaxn = 100005\nt = int(input())\nwhile t:\n    (n, q) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    pre = [0] * (n + 1)\n    post = [0] * (n + 2)\n    for i in range(1, n + 1):\n        pre[i] = gcd(pre[i - 1], a[i - 1])\n    for j in range(n, 0, -1):\n        post[j] = gcd(post[j + 1], a[j - 1])\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        print(gcd(pre[x - 1], post[y + 1]))\n    t -= 1", "def gcd(x, y):\n    if y == 0:\n        return x\n    return gcd(y, x % y)\nt = int(input())\nwhile t:\n    (n, q) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    pre = [0] * (n + 1)\n    post = [0] * (n + 2)\n    for i in range(1, n + 1):\n        pre[i] = gcd(pre[i - 1], a[i - 1])\n    for j in range(n, 0, -1):\n        post[j] = gcd(post[j + 1], a[j - 1])\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        print(gcd(pre[x - 1], post[y + 1]))\n    t -= 1", "import math\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    pahleka = [0] * n\n    baadka = [0] * n\n    for i in range(1, n):\n        pahleka[i] = math.gcd(arr[i - 1], pahleka[i - 1])\n    for i in range(n - 2, -1, -1):\n        baadka[i] = math.gcd(arr[i + 1], baadka[i + 1])\n    for _ in range(q):\n        (L, R) = map(int, input().split())\n        print(math.gcd(pahleka[L - 1], baadka[R - 1]))", "import math\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    pahleka = [0] * n\n    baadka = [0] * n\n    for i in range(1, n):\n        pahleka[i] = math.gcd(arr[i - 1], pahleka[i - 1])\n    for i in range(n - 2, -1, -1):\n        baadka[i] = math.gcd(arr[i + 1], baadka[i + 1])\n    for _ in range(q):\n        (L, R) = map(int, input().split())\n        print(math.gcd(pahleka[L - 1], baadka[R - 1]))", "import math\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    pahleka = [0] * (n + 1)\n    baadka = [0] * (n + 1)\n    for i in range(1, n):\n        pahleka[i] = math.gcd(arr[i - 1], pahleka[i - 1])\n    for i in reversed(range(n - 1)):\n        baadka[i] = math.gcd(arr[i + 1], baadka[i + 1])\n    for _ in range(q):\n        (L, R) = map(int, input().split())\n        print(math.gcd(pahleka[L - 1], baadka[R - 1]))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor _ in range(int(input())):\n    (N, Q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    prefix = [0] * N\n    for i in range(1, N):\n        prefix[i] = gcd(prefix[i - 1], arr[i - 1])\n    suffix = [0] * N\n    for i in reversed(range(N - 1)):\n        suffix[i] = gcd(suffix[i + 1], arr[i + 1])\n    for _ in range(Q):\n        (L, R) = map(int, input().split())\n        print(gcd(prefix[L - 1], suffix[R - 1]))", "from sys import stdin, stdout\nimport bisect\nimport math\n\ndef st():\n    return list(stdin.readline().strip())\n\ndef inp():\n    return int(stdin.readline())\n\ndef li():\n    return list(map(int, stdin.readline().split()))\n\ndef mp():\n    return map(int, stdin.readline().split())\n\ndef pr(n):\n    stdout.write(str(n) + '\\n')\n\ndef soe(limit):\n    l = [1] * (limit + 1)\n    pp = [0] * (limit + 1)\n    prime = []\n    l[0] = 0\n    l[1] = 0\n    c = 0\n    for i in range(2, limit + 1):\n        if l[i]:\n            for j in range(i * i, limit + 1, i):\n                l[j] = 0\n    for i in range(2, limit + 1):\n        if l[i] == 1:\n            c += 1\n        if l[c] == 1:\n            pp[i] = 1\n    for i in range(1, limit + 1):\n        pp[i] += pp[i - 1]\n    return pp\n\ndef segsoe(low, high):\n    limit = int(high ** 0.5) + 1\n    prime = soe(limit)\n    n = high - low + 1\n    l = [0] * (n + 1)\n    for i in range(len(prime)):\n        lowlimit = low // prime[i] * prime[i]\n        if lowlimit < low:\n            lowlimit += prime[i]\n        if lowlimit == prime[i]:\n            lowlimit += prime[i]\n        for j in range(lowlimit, high + 1, prime[i]):\n            l[j - low] = 1\n    for i in range(low, high + 1):\n        if not l[i - low]:\n            if i != 1:\n                print(i)\n\ndef gcd(a, b):\n    while b:\n        a = a % b\n        (b, a) = (a, b)\n    return a\n\ndef power(a, n):\n    r = 1\n    while n:\n        if n & 1:\n            r = r * a\n        a *= a\n        n = n >> 1\n    return r\n\ndef solve():\n    (n, k) = mp()\n    l = li()\n    pre = [l[0]]\n    for i in range(1, n):\n        pre.append(gcd(pre[-1], l[i]))\n    suf = [l[-1]]\n    for i in range(n - 2, -1, -1):\n        suf.append(gcd(suf[-1], l[i]))\n    suf = suf[::-1]\n    pre = [0] + pre\n    suf = suf + [0]\n    for i in range(k):\n        (a, b) = mp()\n        print(gcd(pre[a - 1], suf[b]))\nfor _ in range(inp()):\n    solve()", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef cummulative_gcd(arr, n):\n    cummf.append(0)\n    for i in range(n):\n        cummf.append(gcd(arr[i], cummf[i]))\n    arr.reverse()\n    cummr.append(0)\n    for j in range(n):\n        cummr.append(gcd(arr[j], cummr[j]))\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    cummf = []\n    cummr = []\n    array = cummulative_gcd(a, n)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        res = gcd(cummf[l - 1], cummr[n - r])\n        print(res)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef cummulative_gcd(arr, n):\n    cummf.append(0)\n    for i in range(n):\n        cummf.append(gcd(arr[i], cummf[i]))\n    arr.reverse()\n    cummr.append(0)\n    for j in range(n):\n        cummr.append(gcd(arr[j], cummr[j]))\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    cummf = []\n    cummr = []\n    array = cummulative_gcd(a, n)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        res = gcd(cummf[l - 1], cummr[n - r])\n        print(res)", "import sys\nfrom math import gcd\nfor _ in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    leftArr = []\n    rghtArr = []\n    val = 0\n    for i in range(n):\n        val = gcd(val, a[i])\n        leftArr.append(val)\n    val = 0\n    for i in range(n - 1, -1, -1):\n        val = gcd(val, a[i])\n        rghtArr.append(val)\n    rghtArr.reverse()\n    while q > 0:\n        q -= 1\n        (l, r) = list(map(int, input().split()))\n        l -= 1\n        r -= 1\n        if l == 0:\n            ans_l = 0\n        else:\n            ans_l = leftArr[l - 1]\n        if r == n - 1:\n            ans_r = 0\n        else:\n            ans_r = rghtArr[r + 1]\n        print(gcd(ans_l, ans_r))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nfor case in range(t):\n    (n, q) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    pre = [0] * (n + 1)\n    suff = [0] * (n + 1)\n    for i in range(1, n + 1):\n        pre[i] = gcd(pre[i - 1], arr[i - 1])\n    for i in range(n, 0, -1):\n        suff[i - 1] = gcd(suff[i], arr[i - 1])\n    for i in range(q):\n        (l, r) = list(map(int, input().split()))\n        print(gcd(pre[l - 1], suff[r]))"]