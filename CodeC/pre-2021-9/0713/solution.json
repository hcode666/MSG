["t = int(input())\nfor a in range(t):\n    (n, m) = map(int, input().split())\n    l = [1] * (n + 1)\n    k = 0\n    for i in range(2, n + 1):\n        a = m % i\n        k += l[a]\n        for j in range(a, n, i):\n            l[j] += 1\n    print(k)", "t = int(input())\nfor a in range(t):\n    (n, m) = map(int, input().split())\n    l = [1] * (n + 1)\n    k = 0\n    for i in range(2, n + 1):\n        a = m % i\n        k += l[a]\n        for j in range(a, n, i):\n            l[j] += 1\n    print(k)", "t = int(input())\nfor a in range(t):\n    (n, m) = map(int, input().split())\n    l = [1] * (n + 1)\n    k = 0\n    for i in range(2, n + 1):\n        a = m % i\n        k += l[a]\n        for j in range(a, n, i):\n            l[j] += 1\n    print(k)", "t = int(input())\nfor a in range(t):\n    (n, m) = map(int, input().split())\n    l = [1] * (n + 1)\n    k = 0\n    for i in range(2, n + 1):\n        a = m % i\n        k += l[a]\n        for j in range(a, n, i):\n            l[j] += 1\n    print(k)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    l = [1] * (n + 1)\n    k = 0\n    for i in range(2, n + 1):\n        a = m % i\n        k += l[a]\n        for j in range(a, n, i):\n            l[j] += 1\n    print(k)", "t = int(input())\nfor a in range(t):\n    (n, m) = map(int, input().split())\n    l = [1] * (n + 1)\n    k = 0\n    for i in range(2, n + 1):\n        a = m % i\n        k += l[a]\n        for j in range(a, n, i):\n            l[j] += 1\n    print(k)", "t = int(input())\nfor a in range(t):\n    (n, m) = map(int, input().split())\n    l = [1] * (n + 1)\n    k = 0\n    for i in range(2, n + 1):\n        a = m % i\n        k += l[a]\n        for j in range(a, n, i):\n            l[j] += 1\n    print(k)", "def solve(n, m):\n    va = 0\n    arr = [1 for i in range(n + 1)]\n    for i in range(2, n + 1):\n        a = m % i\n        va += arr[a]\n        for j in range(a, n + 1, i):\n            arr[j] += 1\n    return va\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(solve(n, m))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    v = 0\n    l = [1 for x in range(n + 1)]\n    for j in range(2, n + 1):\n        a = m % j\n        v += l[a]\n        for k in range(a, n + 1, j):\n            l[k] += 1\n    print(v)", "def solve(n, m):\n    val = 0\n    arr = [1 for i in range(n + 1)]\n    for i in range(2, n + 1):\n        a = m % i\n        val += arr[a]\n        for j in range(a, n + 1, i):\n            arr[j] += 1\n    return val\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(solve(n, m))", "def solve(n, m):\n    val = 0\n    arr = [1 for i in range(n + 1)]\n    for i in range(2, n + 1):\n        a = m % i\n        val += arr[a]\n        for j in range(a, n + 1, i):\n            arr[j] += 1\n    return val\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(solve(n, m))", "def divisor(n):\n    ans = [[1] for i in range(n + 1)]\n    ans[0].pop()\n    for i in range(2, n + 1):\n        for j in range(i, n + 1, i):\n            ans[j].append(i)\n    return ans\n\ndef count(n, p, div):\n    if n >= len(div):\n        return 0\n    size = len(div[n])\n    (st, en) = (0, size - 1)\n    check = 0\n    while st <= en:\n        mid = (st + en) // 2\n        temp = div[n][mid]\n        if temp == p:\n            check = mid - 1\n            break\n        elif temp > p:\n            en = mid - 1\n        elif temp < p:\n            check = mid\n            st = mid + 1\n    return check\nt = int(input())\ndiv = divisor(6 * 10 ** 5)\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    ans = 0\n    for i in range(2, n + 1):\n        temp = m // i * i\n        if temp == 0:\n            ans += i - 1\n            continue\n        c = count(temp, i, div) + 1\n        ans += c\n    print(ans)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor j in range(T):\n    (N, M) = map(int, input().split())\n    result = 0\n    arr = [1] * (N + 1)\n    for i in range(2, N + 1):\n        x = M % i\n        result += arr[x]\n        for j in range(x, N + 1, i):\n            arr[j] += 1\n    print(result)", "T = int(input())\nfor j in range(T):\n    (N, M) = map(int, input().split())\n    result = 0\n    arr = [1] * (N + 1)\n    for i in range(2, N + 1):\n        x = M % i\n        result += arr[x]\n        for j in range(x, N + 1, i):\n            arr[j] += 1\n    print(result)", "T = int(input())\nfor j in range(T):\n    (N, M) = map(int, input().split())\n    result = 0\n    arr = [1] * (N + 1)\n    for i in range(2, N + 1):\n        x = M % i\n        result += arr[x]\n        for j in range(x, N + 1, i):\n            arr[j] += 1\n    print(result)", "T = int(input())\nfor j in range(T):\n    (N, M) = map(int, input().split())\n    result = 0\n    arr = [1 for i in range(N + 1)]\n    for i in range(2, N + 1):\n        x = M % i\n        result += arr[x]\n        for j in range(x, N + 1, i):\n            arr[j] += 1\n    print(result)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor j in range(T):\n    (N, M) = map(int, input().split())\n    result = 0\n    arr = [1 for i in range(N + 1)]\n    for i in range(2, N + 1):\n        x = M % i\n        result += arr[x]\n        for j in range(x, N + 1, i):\n            arr[j] += 1\n    print(result)", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor j in range(T):\n    (N, M) = map(int, input().split())\n    result = 0\n    arr = [1 for i in range(N + 1)]\n    for i in range(2, N + 1):\n        x = M % i\n        result += arr[x]\n        for j in range(x, N + 1, i):\n            arr[j] += 1\n    print(result)", "from bisect import bisect_left\nnum = 500005\nval = [[] for i in range(500005)]\n\ndef cal():\n    for i in range(1, num):\n        for j in range(i, num, i):\n            val[j].append(i)\ncal()\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    res = 0\n    for b in range(2, n + 1):\n        x = m - m % b\n        if x:\n            res += bisect_left(val[x], b)\n        else:\n            res += b - 1\n    print(res)", "def solve(n, m):\n    va = 0\n    arr = [1 for i in range(n + 1)]\n    for i in range(2, n + 1):\n        a = m % i\n        va += arr[a]\n        for j in range(a, n + 1, i):\n            arr[j] += 1\n    return va\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(solve(n, m))", "try:\n\n    def fun(n, m):\n        a = 0\n        L = [1 for i in range(n + 1)]\n        for i in range(2, n + 1):\n            x = m % i\n            a += L[x]\n            for j in range(x, n + 1, i):\n                L[j] += 1\n        return a\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        print(fun(n, m))\nexcept:\n    pass", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    c = 0\n    me = [1] * (n + 1)\n    for i in range(2, n + 1):\n        x = m % i\n        c = c + me[x]\n        for j in range(x, n + 1, i):\n            me[j] += 1\n    print(c)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    c = 0\n    me = [1] * (n + 1)\n    for i in range(2, n + 1):\n        x = m % i\n        c = c + me[x]\n        for j in range(x, n + 1, i):\n            me[j] += 1\n    print(c)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    me = [1 for _ in range(n + 1)]\n    counter = 0\n    for i in range(2, n + 1):\n        a = m % i\n        counter += me[a]\n        for j in range(a, n + 1, i):\n            me[j] += 1\n    print(counter)", "MAX_M = 5 * 10 ** 5\nfactors = [[] for i in range(MAX_M + 1)]\nfor i in range(1, MAX_M + 1):\n    for j in range(i, MAX_M + 1, i):\n        factors[j].append(i)\n\ndef lowerBound(b, T):\n    (left, right) = (0, len(factors[T]) - 1)\n    while left < right:\n        mid = (left + right) // 2\n        if factors[T][mid] >= b:\n            right = mid\n        else:\n            left = mid + 1\n    return left\nT = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    ans = 0\n    for b in range(1, N + 1):\n        x = M - M % b\n        k = lowerBound(b, x) if b <= x else b - 1\n        ans += k\n    print(ans)", "for _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    s = 0\n    ar = [1] * (N + 1)\n    for i in range(2, N + 1):\n        a = M % i\n        s += ar[a]\n        for j in range(a, N + 1, i):\n            ar[j] += 1\n    print(s)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [1] * (n + 1)\n    var = 0\n    for i in range(2, n + 1):\n        a = m % i\n        var += arr[a]\n        j = a\n        while j <= n:\n            arr[j] += 1\n            j += i\n    print(var)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [1] * (n + 1)\n    var = 0\n    for i in range(2, n + 1):\n        a = m % i\n        var += arr[a]\n        j = a\n        while j <= n:\n            arr[j] += 1\n            j += i\n    print(var)", "t = int(input())\nfor _ in range(t):\n    s = [int(x) for x in input().split()]\n    (n, m) = (s[0], s[1])\n    l = [1] * (n + 1)\n    ans = 0\n    for i in range(2, n + 1):\n        a = m % i\n        ans += l[a]\n        for j in range(a, n + 1, i):\n            l[j] += 1\n    print(ans)", "try:\n    t = int(input())\n    while t:\n        (n, m) = map(int, input().split())\n        l = [1] * (n + 1)\n        ans = 0\n        for i in range(2, n + 1):\n            a = m % i\n            ans += l[a]\n            for j in range(a, n + 1, i):\n                l[j] += 1\n        print(ans)\nexcept:\n    pass", "M = int(500000.0 + 5)\ndivisors = [[] for i in range(0, M + 1)]\n\ndef findDivisiors():\n    for i in range(1, M + 1):\n        for j in range(i, M + 1, i):\n            divisors[j].append(i)\n\ndef binarySearch(numbers, start, end, num):\n    if start <= end:\n        mid = (start + end) // 2\n        if numbers[mid] == num:\n            return mid\n        if num < numbers[mid]:\n            return binarySearch(numbers, start, mid - 1, num)\n        else:\n            return binarySearch(numbers, mid + 1, end, num)\n    return -1\nt = int(input())\nfindDivisiors()\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    count = 0\n    for b in range(2, n + 1):\n        x = m - m % b\n        if x > 0:\n            count += binarySearch(divisors[x], 0, len(divisors[x]) - 1, b)\n        else:\n            count += b - 1\n    print(count)", "test = int(input())\nmex = 500001\ndiv = [[] for _ in range(mex)]\nfor i in range(1, mex):\n    for j in range(i, mex, i):\n        div[j].append(i)\nfor i in range(test):\n    fans = 0\n    (n, m) = map(int, input().split())\n    mx = min(n, m)\n    for b in range(2, mx + 1):\n        amul = m - m % b\n        (s, e) = (0, len(div[amul]) - 1)\n        ans = -1\n        while s <= e:\n            md = (s + e) // 2\n            if div[amul][md] < b:\n                ans = md\n                s = md + 1\n            else:\n                e = md - 1\n        fans += ans + 1\n    for b in range(mx + 1, n + 1):\n        fans += b - 1\n    print(fans)", "from collections import defaultdict\ndivs = defaultdict(lambda : [])\nM = int(500000.0 + 5)\n\ndef pre():\n    for i in range(1, M + 1):\n        for j in range(i, M + 1, i):\n            divs[j].append(i)\n    return divs\n\ndef main():\n    pre()\n    for _ in range(int(input())):\n        (N, m) = [int(x) for x in input().split()]\n        count = 0\n        for b in range(2, N + 1):\n            x = m - m % b\n            if x != 0:\n                count += divs[x].index(b)\n            else:\n                count += b - 1\n        print(count)\nmain()", "def lower_bound(arr, val):\n    n = len(arr)\n    low = 0\n    high = n\n    while low < high:\n        mid = (high + low) // 2\n        if arr[mid] >= val:\n            high = mid\n        else:\n            low = mid + 1\n    if arr[low] < val:\n        low = low + 1\n    return low\nmaxm = int(500000.0 + 1)\ndiv = [[] for i in range(maxm)]\nfor i in range(1, maxm):\n    for j in range(i, maxm, i):\n        div[j].append(i)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = 0\n    for b in range(2, n + 1):\n        x = m - m % b\n        if x > 0:\n            ans += lower_bound(div[x], b)\n        else:\n            ans += b - 1\n    print(ans)", "def preCalcMod():\n    factors = []\n    M = 500000\n    factors.insert(0, [])\n    for i in range(1, M + 1):\n        j = i\n        while j <= M:\n            if i == 1:\n                factors.insert(j, [])\n            factors[j].append(i)\n            j += i\n    return factors\n\ndef modularEquation():\n    factors = preCalcMod()\n    T = int(input())\n    for i in range(0, T):\n        (N, M) = map(int, input().split())\n        count = 0\n        for b in range(2, min(N, M) + 1):\n            T = M - M % b\n            if T == 0:\n                break\n            for key in factors[T]:\n                if key < b:\n                    count += 1\n                else:\n                    break\n        if N > M:\n            a = M\n            lastTerm = N - 1\n            nBy2 = (N - M) / 2\n            sumIs = nBy2 * (a + lastTerm)\n            count += int(sumIs)\n        print(count)\nmodularEquation()", "import math\nfrom collections import Counter, defaultdict\nimport sys\ninput = sys.stdin.readline\nreadInt = lambda : int(input().strip())\nreadfloat = lambda : float(input().strip())\nreadStr = lambda : input().strip()\nintList = lambda : list(map(int, input().strip().split()))\nintMap = lambda : map(int, input().strip().split())\nfloatList = lambda : list(map(float, input().strip().split()))\nfloatMap = lambda : map(float, input().strip().split())\nstrList = lambda : list(input().strip().split())\n\ndef solve(n, m):\n    res = 0\n    if n > m:\n        tn = n - m\n        res += tn * (tn + 1) // 2\n    else:\n        tn = 0\n    res += (m - 1) * tn\n    p = min(n, m)\n    c = Counter()\n    res += p - 1\n    for a in range(2, p + 1):\n        mod = m % a\n        res += c[mod]\n        for b in range(mod, p + 1, a):\n            c[b] += 1\n    return res\nfor _ in range(readInt()):\n    (n, m) = intMap()\n    print(solve(n, m))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [1] * (n + 1)\n    count = 0\n    for i in range(2, n + 1):\n        a = m % i\n        count += l[a]\n        for j in range(a, n + 1, i):\n            l[j] += 1\n    print(count)", "def preCalcMod():\n    factors = []\n    M = 500000\n    factors.insert(0, [])\n    for i in range(1, M + 1):\n        j = i\n        while j <= M:\n            if i == 1:\n                factors.insert(j, [])\n            factors[j].append(i)\n            j += i\n    return factors\n\ndef modularEquation():\n    factors = preCalcMod()\n    T = int(input())\n    for i in range(0, T):\n        (N, M) = map(int, input().split())\n        count = 0\n        for b in range(2, min(N, M) + 1):\n            T = M - M % b\n            for key in factors[T]:\n                if key < b:\n                    count += 1\n                else:\n                    break\n        if N > M:\n            a = M\n            lastTerm = N - 1\n            nBy2 = (N - M) / 2\n            sumIs = nBy2 * (a + lastTerm)\n            count += int(sumIs)\n        print(count)\nmodularEquation()", "M = 500000.0 + 5\nfactor = {}\nfor i in range(1, int(M)):\n    for j in range(i, int(M), i):\n        factor.setdefault(j, []).append(i)\nt = int(input())\nfor _ in range(t):\n    (N, M) = map(int, input().split())\n    ans = 0\n    for i in range(2, N + 1):\n        X = M - M % i\n        if X != 0:\n            ans += factor[X].index(i)\n        else:\n            ans += i - 1\n    print(ans)", "from bisect import bisect_left\nM = 5 * 10 ** 5\n\ndef precompute_divisors(m):\n    arr = []\n    for i in range(m + 1):\n        arr.append([])\n    for i in range(1, m + 1):\n        for j in range(i, m + 1, i):\n            arr[j].append(i)\n    return arr\n\ndef solve_modular(n, m, arr):\n    result = 0\n    for b in range(n, 1, -1):\n        x = b * (m // b)\n        if x != 0:\n            result += bisect_left(arr[x], b)\n        else:\n            result += b - 1\n    return result\npre = precompute_divisors(M)\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = solve_modular(n, m, pre)\n    print(ans)", "for i in range(int(input())):\n    (N, M) = map(int, input().split())\n    count = 0\n    arr = [1 for i in range(N + 1)]\n    for a in range(2, N + 1):\n        count += arr[M % a]\n        for b in range(M % a, N + 1, a):\n            arr[b] += 1\n    print(count)", "lim = 5 * 10 ** 5 + 1\nfactors = [-1] * lim\nfor i in range(1, lim):\n    j = 1\n    while i * j < lim:\n        try:\n            factors[i * j].append(i)\n        except:\n            factors[i * j] = [i]\n        j += 1\nfrom bisect import bisect_left as lower_bound\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    count = 0\n    for b in range(2, n + 1):\n        x = m - m % b\n        a = factors[x]\n        if x <= 0:\n            count += b - 1\n        else:\n            count += lower_bound(a, b)\n    print(count)", "from bisect import bisect_left as lower_bound\nfactors = []\nm = 5 * 10 ** 5 + 1\n\ndef compute_factors(m):\n    for i in range(m):\n        factors.append([1])\n    for i in range(2, m):\n        for j in range(i, m, i):\n            factors[j].append(i)\nT = int(input())\ncompute_factors(m)\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    res = 0\n    for b in range(2, N + 1):\n        x = M - M % b\n        if x > 0:\n            res += lower_bound(factors[x], b)\n        else:\n            res += b - 1\n    print(res)", "from bisect import bisect_left as lower_bound\nfactors = []\nm = 5 * 10 ** 5 + 1\n\ndef compute_factors(m):\n    for i in range(m):\n        factors.append([])\n    for i in range(1, m):\n        for j in range(i, m, i):\n            factors[j].append(i)\nT = int(input())\ncompute_factors(m)\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    res = 0\n    for b in range(2, N + 1):\n        x = M - M % b\n        if x > 0:\n            res += lower_bound(factors[x], b)\n        else:\n            res += b - 1\n    print(res)", "mx = 500015\na = [list() for x in range(mx)]\n\ndef PreCompute():\n    for i in range(1, mx):\n        for j in range(i, mx, i):\n            a[j].append(i)\n\ndef Lower_bound(fr, value):\n    (l, r) = [0, len(a[fr]) - 1]\n    ans = 0\n    while l <= r:\n        mid = l + r >> 1\n        if a[fr][mid] < value:\n            ans = mid\n            l = mid + 1\n        else:\n            r = mid - 1\n    return ans + 1\nPreCompute()\nt = int(input())\nwhile t:\n    t -= 1\n    cnt = 0\n    (n, m) = [int(x) for x in input().split()]\n    for b in range(2, n + 1):\n        x = m - m % b\n        if x > 0:\n            cnt += Lower_bound(x, b)\n        else:\n            cnt += b - 1\n    print(cnt)", "def modEquation(n, m, fact):\n    ans = 0\n    for b in range(2, n + 1):\n        t = m - m % b\n        if b > m:\n            ans += b - 1\n        else:\n            f = fact[t]\n            st = 0\n            en = len(f) - 1\n            while st <= en:\n                mid = (st + en) // 2\n                if f[mid] < b:\n                    st = mid + 1\n                else:\n                    en = mid - 1\n            ans += st\n    return ans\n\ndef main():\n    fact_s = int(500000.0) + 1\n    fact = [[] * fact_s for i in range(fact_s)]\n    for i in range(1, fact_s):\n        for j in range(i, fact_s, i):\n            fact[j].append(i)\n    for i in range(int(input().strip())):\n        (n, m) = map(int, input().strip().split(' '))\n        print('{0}'.format(modEquation(n, m, fact)))\nmain()", "t = int(input())\nfor _ in range(t):\n    s = [int(x) for x in input().split()]\n    (n, m) = (s[0], s[1])\n    l = [1] * (n + 1)\n    ans = 0\n    for i in range(2, n + 1):\n        a = m % i\n        ans += l[a]\n        for j in range(a, n + 1, i):\n            l[j] += 1\n    print(ans)", "for _ in range(int(input())):\n    s = [int(x) for x in input().split()]\n    (n, m) = (s[0], s[1])\n    l = [1] * (n + 1)\n    ans = 0\n    for i in range(2, n + 1):\n        a = m % i\n        ans += l[a]\n        for j in range(a, n + 1, i):\n            l[j] += 1\n    print(ans)", "def solve(n, m):\n    v = 0\n    arr = [1 for i in range(n + 1)]\n    for i in range(2, n + 1):\n        a = m % i\n        v += arr[a]\n        for j in range(a, n + 1, i):\n            arr[j] += 1\n    return v\nt = int(input())\nwhile t != 0:\n    (n, m) = map(int, input().split())\n    print(solve(n, m))\n    t -= 1", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    count_by_mod = [1] * (N + 1)\n    res = 0\n    for b in range(2, N + 1):\n        mod_b = M % b\n        res += count_by_mod[mod_b]\n        for mod in range(mod_b, N + 1, b):\n            count_by_mod[mod] += 1\n    print(res)", "import bisect\nM = int(500000.0) + 5\ndividors = [[] for _ in range(M)]\nfor i in range(1, M):\n    for j in range(i, M, i):\n        dividors[j].append(i)\nT = int(input())\nfor t in range(T):\n    (n, m) = map(int, input().split())\n    ans = 0\n    if n > m:\n        ans += (m + n - 1) * (n - m) // 2\n    for b in range(1, min(n, m) + 1):\n        x = m - m % b\n        ans += bisect.bisect_left(dividors[x], b)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    s = [int(x) for x in input().split()]\n    (n, m) = (s[0], s[1])\n    l = [1] * (n + 1)\n    ans = 0\n    for i in range(2, n + 1):\n        a = m % i\n        ans += l[a]\n        for j in range(a, n + 1, i):\n            l[j] += 1\n    print(ans)", "t = int(input())\nfor test in range(t):\n    (n, m) = map(int, input().split())\n    c = 0\n    f = 0\n    if n > m:\n        x = n - m\n        c += x * m\n        c += x * (x - 1) // 2\n        n = m\n    c += n - 1\n    d = {}\n    for i in range(n, 1, -1):\n        x = m % i\n        f = max(f, x)\n        try:\n            d[x] += 1\n            c += d[x] - 1\n            p = 1\n            q = 0\n            z = 0\n            while z < f:\n                z = x + p * i\n                try:\n                    q += d[z]\n                    p += 1\n                except:\n                    p += 1\n            c += q\n        except:\n            d[x] = 1\n            p = 1\n            q = 0\n            z = 0\n            while z < f:\n                z = x + p * i\n                try:\n                    q += d[z]\n                    p += 1\n                except:\n                    p += 1\n            c += q\n    print(c)", "try:\n    import sys\n    from sys import stdin\n    for _ in range(int(input())):\n        (n, m) = map(int, sys.stdin.readline().split())\n        l = [1] * (n + 1)\n        count = 0\n        for i in range(2, n + 1):\n            y = m % i\n            count += l[y]\n            for j in range(y, n + 1, i):\n                l[j] += 1\n        print(count)\nexcept Exception:\n    pass", "for _ in range(int(input())):\n    s = [int(x) for x in input().split()]\n    (n, m) = (s[0], s[1])\n    l = [1] * (n + 1)\n    ans = 0\n    for i in range(2, n + 1):\n        a = m % i\n        ans += l[a]\n        for j in range(a, n + 1, i):\n            l[j] += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = [1] * (n + 1)\n    c = 0\n    for j in range(2, n + 1):\n        x = m % j\n        c += a[x]\n        for p in range(x, n + 1, j):\n            a[p] += 1\n    print(c)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    val = 0\n    ar = [1 for i in range(n + 1)]\n    for j in range(2, n + 1):\n        rem = m % j\n        val += ar[rem]\n        for k in range(rem, n + 1, j):\n            ar[k] += 1\n    print(val)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [1 for i in range(n + 1)]\n    c = 0\n    for i in range(2, n + 1):\n        b = m % i\n        c += a[b]\n        for j in range(b, n + 1, i):\n            a[j] += 1\n    print(c)", "try:\n\n    def solution(n, m):\n        va = 0\n        arr = [1 for i in range(n + 1)]\n        for i in range(2, n + 1):\n            a = m % i\n            va += arr[a]\n            for j in range(a, n + 1, i):\n                arr[j] += 1\n        return va\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        print(solution(n, m))\nexcept:\n    pass", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = list(map(int, input().split()))\n    count = 0\n    l = [1] * (n + 1)\n    for i in range(2, n + 1):\n        a = m % i\n        count += l[a]\n        for j in range(a, n + 1, i):\n            l[j] += 1\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = 0\n    l = [1] * (n + 1)\n    for i in range(2, n + 1):\n        a = m % i\n        ans += l[a]\n        for j in range(a, n + 1, i):\n            l[j] += 1\n    print(ans)", "t = int(input())\nfor radom in range(1, 2):\n    ran = 100\nfor _ in range(t):\n    s = [int(x) for x in input().split()]\n    (n, m) = (s[0], s[1])\n    for radom in range(1, 2):\n        ran = 100\n    l = [1] * (n + 1)\n    ans = 0\n    for radom in range(1, 2):\n        ran = 100\n    for i in range(2, n + 1):\n        a = m % i\n        for radom in range(1, 2):\n            ran = 100\n        ans += l[a]\n        for radom in range(1, 2):\n            ran = 100\n        for j in range(a, n + 1, i):\n            l[j] += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    s = [int(x) for x in input().split()]\n    (n, m) = (s[0], s[1])\n    l = [1] * (n + 1)\n    ans = 0\n    for i in range(2, n + 1):\n        a = m % i\n        ans += l[a]\n        for j in range(a, n + 1, i):\n            l[j] += 1\n    print(ans)", "t = int(input())\nwhile t > 0:\n    nm = list(map(int, input().strip().split()))\n    (n, m) = (nm[0], nm[1])\n    ans = 0\n    li = [1] * (n + 1)\n    for i in range(2, n + 1):\n        a = m % i\n        ans += li[a]\n        for j in range(a, n + 1, i):\n            li[j] += 1\n    print(ans)\n    t -= 1", "t = int(input())\nfor a in range(t):\n    (n, m) = map(int, input().split())\n    l = [1] * (n + 1)\n    k = 0\n    for i in range(2, n + 1):\n        a = m % i\n        k += l[a]\n        for j in range(a, n, i):\n            l[j] += 1\n    print(k)", "t = int(input())\nfor iii in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n + 1):\n        l.append(int(1))\n    ans = 0\n    for a in range(2, n + 1):\n        x = m % a\n        ans += l[x]\n        for b in range(x, n + 1, a):\n            l[b] += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    cop = 0\n    me = [1] * (n + 1)\n    for a in range(2, n + 1):\n        x = m % a\n        cop += me[x]\n        for b in range(x, n + 1, a):\n            me[b] += 1\n    print(cop)", "t = int(input())\nfor _ in range(t):\n    s = [int(x) for x in input().split()]\n    (n, m) = (s[0], s[1])\n    l = [1] * (n + 1)\n    b = 0\n    for i in range(2, n + 1):\n        a = m % i\n        b += l[a]\n        for j in range(a, n + 1, i):\n            l[j] += 1\n    print(b)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = 0\n    main = [1 for i in range(n + 1)]\n    for i in range(2, n + 1):\n        a = m % i\n        ans += main[a]\n        for j in range(a, n + 1, i):\n            main[j] += 1\n    print(ans)", "try:\n    t = int(input())\n    while t:\n        (n, m) = map(int, input().split())\n        res = 0\n        modArr = [1] * (n + 1)\n        for i in range(2, n + 1):\n            a = m % i\n            res += modArr[a]\n            for j in range(a, n + 1, i):\n                modArr[j] += 1\n        print(res)\n        t -= 1\nexcept:\n    pass", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    me = [1 for _ in range(n + 1)]\n    counter = 0\n    for i in range(2, n + 1):\n        a = m % i\n        counter += me[a]\n        for j in range(a, n + 1, i):\n            me[j] += 1\n    print(counter)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    me = [1 for _ in range(n + 1)]\n    counter = 0\n    for i in range(2, n + 1):\n        a = m % i\n        counter += me[a]\n        for j in range(a, n + 1, i):\n            me[j] += 1\n    print(counter)", "t = int(input())\nfor a in range(t):\n    (n, m) = map(int, input().split())\n    l = [1] * (n + 1)\n    k = 0\n    for i in range(2, n + 1):\n        a = m % i\n        k += l[a]\n        for j in range(a, n, i):\n            l[j] += 1\n    print(k)", "t = int(input())\nfor _ in range(t):\n    s = [int(x) for x in input().split()]\n    (n, m) = (s[0], s[1])\n    l = [1] * (n + 1)\n    ans = 0\n    for i in range(2, n + 1):\n        a = m % i\n        ans += l[a]\n        for j in range(a, n + 1, i):\n            l[j] += 1\n    print(ans)", "from functools import reduce\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        val = input().split()\n        N = int(val[0])\n        M = int(val[1])\n        total = 0\n        arr = [1] * (N + 1)\n        j = 2\n        while j <= N:\n            modVal = M % j\n            total = total + arr[modVal]\n            k = modVal\n            while k <= N:\n                arr[k] = arr[k] + 1\n                k = k + j\n            j = j + 1\n        print(total)\nmain()", "def solve():\n    t = int(input())\n    for i in range(t):\n        (N, M) = map(int, input().split())\n        a = [1] * (N + 1)\n        cnt = 0\n        for j in range(2, N + 1):\n            c = M % j\n            cnt += a[c]\n            for k in range(c, N + 1, j):\n                a[k] = a[k] + 1\n        print(cnt)\n\ndef main():\n    solve()\nmain()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [1] * (n + 1)\n    k = 0\n    for i in range(2, n + 1):\n        md = m % i\n        k += arr[md]\n        p = md\n        while p <= n:\n            arr[p] += 1\n            p += i\n    print(k)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    A = 0\n    l = [1] * (n + 1)\n    for i in range(2, n + 1):\n        a = m % i\n        A = A + l[a]\n        for j in range(a, n + 1, i):\n            l[j] = l[j] + 1\n    print(A)", "t = int(input())\nfor i in range(t):\n    arr = [int(x) for x in input().split()]\n    (n, m) = (arr[0], arr[1])\n    l = [1] * (n + 1)\n    an = 0\n    for io in range(2, n + 1):\n        a = m % io\n        an += l[a]\n        for j in range(a, n + 1, io):\n            l[j] += 1\n    print(an)", "t = int(input())\nfor e in range(t):\n    (n, m) = map(int, input().split())\n    l = [1] * (n + 1)\n    c = 0\n    for i in range(2, n + 1):\n        a = m % i\n        c += l[a]\n        for j in range(a, n + 1, i):\n            l[j] += 1\n    print(c)", "from sys import stdin\n\ndef fact(z, b):\n    c = 0\n    l = []\n    for i in range(1, int(z ** 0.5) + 1):\n        if z % i == 0:\n            if i != z // i:\n                l.append(i)\n                l.append(z // i)\n            else:\n                l.append(i)\n    for i in l:\n        if i < b:\n            c += 1\n    return c\nt = int(stdin.readline())\nfor e in range(t):\n    (n, m) = stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    co = 0\n    l = [1] * (n + 1)\n    for i in range(2, n + 1):\n        a = m % i\n        co += l[a]\n        for j in range(a, n + 1, i):\n            l[j] += 1\n    print(co)", "t = int(input())\nfor _ in range(t):\n    s = [int(x) for x in input().split()]\n    (n, m) = (s[0], s[1])\n    l = [1] * (n + 1)\n    ans = 0\n    for i in range(2, n + 1):\n        a = m % i\n        ans += l[a]\n        for j in range(a, n + 1, i):\n            l[j] += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    res = 0\n    arr = [1 for i in range(n + 1)]\n    for i in range(2, n + 1):\n        a = m % i\n        res += arr[a]\n        for j in range(a, n + 1, i):\n            arr[j] += 1\n    print(res)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = 0\n    l = [1] * (n + 1)\n    for a in range(2, n + 1):\n        x = m % a\n        c += l[x]\n        for b in range(x, n + 1, a):\n            l[b] += 1\n    print(c)", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    count = 0\n    mod = [1] * (n + 1)\n    for i in range(2, n + 1):\n        a = m % i\n        count += mod[a]\n        for j in range(a, n + 1, i):\n            mod[j] += 1\n    print(count)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = 0\n    arr = [1] * (n + 1)\n    for i in range(2, n + 1):\n        a = m % i\n        ans += arr[a]\n        for j in range(a, n + 1, i):\n            arr[j] += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (N, M) = [int(x) for x in input().split()]\n    result = 0\n    list_array = [1 for j in range(N + 1)]\n    for a in range(2, N + 1):\n        x = M % a\n        result += list_array[x]\n        for b in range(x, N + 1, a):\n            list_array[b] += 1\n    print(result)", "for i in range(int(input())):\n    x = [int(y) for y in input().split()]\n    (n, m) = (x[0], x[1])\n    l = [1] * (n + 1)\n    ans = 0\n    for i in range(2, n + 1):\n        a = m % i\n        ans += l[a]\n        for j in range(a, n + 1, i):\n            l[j] += 1\n    print(ans)"]