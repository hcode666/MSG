["from collections import deque\n(n, w) = map(int, input().split())\nl = list(map(int, input().split()))\n(d, e) = (deque(), deque())\nfor i in range(w):\n    while len(d) > 0 and d[-1] > l[i]:\n        d.pop()\n    while len(e) > 0 and e[-1] < l[i]:\n        e.pop()\n    d.append(l[i])\n    e.append(l[i])\nans = 0\nfor i in range(w, n):\n    if e[0] - d[0] + 1 == w:\n        ans += 1\n    curr = l[i - w]\n    if curr == d[0]:\n        d.popleft()\n    if curr == e[0]:\n        e.popleft()\n    while len(d) > 0 and d[-1] > l[i]:\n        d.pop()\n    while len(e) > 0 and e[-1] < l[i]:\n        e.pop()\n    d.append(l[i])\n    e.append(l[i])\nif e[0] - d[0] + 1 == w:\n    ans += 1\nprint(ans)", "from collections import deque\n(n, w) = map(int, input().split())\nl = list(map(int, input().split()))\n(d, e) = (deque(), deque())\nfor i in range(w):\n    while len(d) > 0 and d[-1] > l[i]:\n        d.pop()\n    while len(e) > 0 and e[-1] < l[i]:\n        e.pop()\n    d.append(l[i])\n    e.append(l[i])\nans = 0\nfor i in range(w, n):\n    if e[0] - d[0] + 1 == w:\n        ans += 1\n    curr = l[i - w]\n    if curr == d[0]:\n        d.popleft()\n    if curr == e[0]:\n        e.popleft()\n    while len(d) > 0 and d[-1] > l[i]:\n        d.pop()\n    while len(e) > 0 and e[-1] < l[i]:\n        e.pop()\n    d.append(l[i])\n    e.append(l[i])\nif e[0] - d[0] + 1 == w:\n    ans += 1\nprint(ans)", "from collections import deque\n(n, w) = map(int, input().split())\nl = list(map(int, input().split()))\n(d, e) = (deque(), deque())\nfor i in range(w):\n    while len(d) > 0 and d[-1] > l[i]:\n        d.pop()\n    while len(e) > 0 and e[-1] < l[i]:\n        e.pop()\n    d.append(l[i])\n    e.append(l[i])\nans = 0\nfor i in range(w, n):\n    if e[0] - d[0] + 1 == w:\n        ans += 1\n    curr = l[i - w]\n    if curr == d[0]:\n        d.popleft()\n    if curr == e[0]:\n        e.popleft()\n    while len(d) > 0 and d[-1] > l[i]:\n        d.pop()\n    while len(e) > 0 and e[-1] < l[i]:\n        e.pop()\n    d.append(l[i])\n    e.append(l[i])\nif e[0] - d[0] + 1 == w:\n    ans += 1\nprint(ans)", "from collections import deque\n(n, w) = map(int, input().split())\nl = list(map(int, input().split()))\n(d, e) = (deque(), deque())\nfor i in range(w):\n    while len(d) > 0 and d[-1] > l[i]:\n        d.pop()\n    while len(e) > 0 and e[-1] < l[i]:\n        e.pop()\n    d.append(l[i])\n    e.append(l[i])\nans = 0\nfor i in range(w, n):\n    if e[0] - d[0] + 1 == w:\n        ans += 1\n    curr = l[i - w]\n    if curr == d[0]:\n        d.popleft()\n    if curr == e[0]:\n        e.popleft()\n    while len(d) > 0 and d[-1] > l[i]:\n        d.pop()\n    while len(e) > 0 and e[-1] < l[i]:\n        e.pop()\n    d.append(l[i])\n    e.append(l[i])\nif e[0] - d[0] + 1 == w:\n    ans += 1\nprint(ans)", "(n, k) = map(int, input().split())\narr = [int(_) for _ in input().split()]\nans = 0\nif k == 1:\n    print(n)\nelse:\n    deq = [0 for _ in range(n)]\n    minarr = [0 for _ in range(n - k + 1)]\n    maxarr = [0 for _ in range(n - k + 1)]\n    q_st = q_size = 0\n    for i in range(n):\n        while q_size > 0 and deq[q_st + q_size - 1] > arr[i]:\n            q_size -= 1\n        deq[q_st + q_size] = arr[i]\n        q_size += 1\n        if i >= k and arr[i - k] == deq[q_st]:\n            q_st += 1\n            q_size -= 1\n        if i >= k - 1:\n            minarr[i - k + 1] = deq[q_st]\n    q_st = q_size = 0\n    for i in range(n):\n        while q_size > 0 and deq[q_st + q_size - 1] < arr[i]:\n            q_size -= 1\n        deq[q_st + q_size] = arr[i]\n        q_size += 1\n        if i >= k and arr[i - k] == deq[q_st]:\n            q_st += 1\n            q_size -= 1\n        if i >= k - 1:\n            maxarr[i - k + 1] = deq[q_st]\n    ans = 0\n    for i in range(n - k + 1):\n        if maxarr[i] - minarr[i] == k - 1:\n            ans += 1\n    print(ans)", "(n, w) = [int(x) for x in input().split()]\nnums = [int(x) for x in input().split()]\n(sm, sqrsm, ans) = (0, 0, 0)\nb = w * (w - 1) // 2\na = w * (w - 1) * (2 * w - 1) // 6\nfor i in range(w):\n    sm += nums[i]\n    sqrsm += nums[i] ** 2\nif (sm - b) % w == 0:\n    x = (sm - b) // w\n    if sqrsm == w * x * x + a + 2 * x * b:\n        ans += 1\nfor i in range(w, n):\n    sm += nums[i] - nums[i - w]\n    sqrsm += nums[i] ** 2 - nums[i - w] ** 2\n    if (sm - b) % w == 0:\n        x = (sm - b) // w\n        if sqrsm == w * x * x + a + 2 * x * b:\n            ans += 1\nprint(ans)"]