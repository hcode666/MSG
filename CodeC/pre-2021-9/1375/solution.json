["def kmp(s, t, lps):\n    n = len(s)\n    m = len(t)\n    count = [0 for x in range(n)]\n    i = 0\n    j = 0\n    while i < n:\n        count[i] = count[i - 1]\n        if t[j] == s[i]:\n            i += 1\n            j += 1\n        if j == m:\n            count[i - 1] += 1\n            j = lps[j - 1]\n        elif i < n and t[j] != s[i]:\n            if j != 0:\n                j = lps[j - 1]\n            else:\n                i += 1\n    return count\n\ndef lpsa(t, m):\n    l = 0\n    lps = [0 for i in range(m)]\n    i = 1\n    while i < m:\n        if t[i] == t[l]:\n            l += 1\n            lps[i] = l\n            i += 1\n        elif l != 0:\n            l = lps[l - 1]\n        else:\n            lps[i] = 0\n            i += 1\n    return lps\ns = input()\nt = input()\nn = len(s)\nm = len(t)\nlps = lpsa(t, m)\none = kmp(s, t, lps)[-1]\ncount = kmp(s + s, t, lps)\ntwo = count[-1]\nthree = two - 2 * one\nfor _ in range(int(input())):\n    q = int(input())\n    v = q // n\n    if v:\n        ans = v * one + (v - 1) * three\n        e = q % n\n        ans += count[n - 1 + e] - count[n - 1]\n    else:\n        e = q % n\n        ans = count[e - 1]\n    print(ans)", "def kmp(s, t, lps):\n    n = len(s)\n    m = len(t)\n    count = [0 for x in range(n)]\n    i = 0\n    j = 0\n    while i < n:\n        count[i] = count[i - 1]\n        if t[j] == s[i]:\n            i += 1\n            j += 1\n        if j == m:\n            count[i - 1] += 1\n            j = lps[j - 1]\n        elif i < n and t[j] != s[i]:\n            if j != 0:\n                j = lps[j - 1]\n            else:\n                i += 1\n    return count\n\ndef lpsa(t, m):\n    l = 0\n    lps = [0 for i in range(m)]\n    i = 1\n    while i < m:\n        if t[i] == t[l]:\n            l += 1\n            lps[i] = l\n            i += 1\n        elif l != 0:\n            l = lps[l - 1]\n        else:\n            lps[i] = 0\n            i += 1\n    return lps\ns = input()\nt = input()\nn = len(s)\nm = len(t)\nlps = lpsa(t, m)\none = kmp(s, t, lps)[-1]\ncount = kmp(s + s, t, lps)\ntwo = count[-1]\nthree = two - 2 * one\nfor _ in range(int(input())):\n    q = int(input())\n    v = q // n\n    if v:\n        ans = v * one + (v - 1) * three\n        e = q % n\n        ans += count[n - 1 + e] - count[n - 1]\n    else:\n        e = q % n\n        ans = count[e - 1]\n    print(ans)", "def search(arr, lenl, val):\n    s = 0\n    l = lenl - 1\n    total = 0\n    while s <= l:\n        m = int((s + l) / 2)\n        if arr[m] <= val:\n            total = m + 1\n            s = m + 1\n        else:\n            l = m - 1\n    return total\n\ndef kmpsearch(string, lps):\n    lis = []\n    lens = len(string)\n    lensh = lens // 2\n    l = 0\n    i = 0\n    while i < lens:\n        if string[i] == pat[l]:\n            l += 1\n            i += 1\n        elif l > 0:\n            l = lps[l - 1]\n        else:\n            i += 1\n        if l == lenp:\n            if i - l < lensh:\n                lis.append(i - l)\n            l = lps[l - 1]\n    return lis\n\ndef kmp(pat, lenp):\n    lps = [0] * lenp\n    l = 0\n    i = 1\n    while i < lenp:\n        if pat[i] == pat[l]:\n            l += 1\n            lps[i] = l\n            i += 1\n        elif l > 0:\n            l = lps[l - 1]\n        else:\n            lps[i] = 0\n            i += 1\n    return lps\nkeyword = input()\npat = input()\nq = int(input())\nlenk = len(keyword)\nlenp = len(pat)\nk = keyword * 2\nlis = kmpsearch(k, kmp(pat, lenp))\nlenl = len(lis)\nfor _ in range(q):\n    n = int(input())\n    count = 0\n    q = n // lenk\n    r = n % lenk\n    count += search(lis, lenl, r - lenp)\n    if q >= 1:\n        count += search(lis, lenl, lenk + r - lenp)\n    if q >= 2:\n        count += (q - 1) * lenl\n    print(count)", "def search(arr, lenl, val):\n    s = 0\n    l = lenl - 1\n    total = 0\n    while s <= l:\n        m = int((s + l) / 2)\n        if arr[m] <= val:\n            total = m + 1\n            s = m + 1\n        else:\n            l = m - 1\n    return total\n\ndef kmpsearch(string, lps):\n    lis = []\n    lens = len(string)\n    lensh = lens // 2\n    l = 0\n    i = 0\n    while i < lens:\n        if string[i] == pat[l]:\n            l += 1\n            i += 1\n        elif l > 0:\n            l = lps[l - 1]\n        else:\n            i += 1\n        if l == lenp:\n            if i - l < lensh:\n                lis.append(i - l)\n            l = lps[l - 1]\n    return lis\n\ndef kmp(pat, lenp):\n    lps = [0] * lenp\n    l = 0\n    i = 1\n    while i < lenp:\n        if pat[i] == pat[l]:\n            l += 1\n            lps[i] = l\n            i += 1\n        elif l > 0:\n            l = lps[l - 1]\n        else:\n            lps[i] = 0\n            i += 1\n    return lps\nkeyword = input()\npat = input()\nq = int(input())\nlenk = len(keyword)\nlenp = len(pat)\nk = keyword * 2\nlis = kmpsearch(k, kmp(pat, lenp))\nlenl = len(lis)\nfor _ in range(q):\n    n = int(input())\n    count = 0\n    q = n // lenk\n    r = n % lenk\n    count += search(lis, lenl, r - lenp)\n    if q >= 1:\n        count += search(lis, lenl, lenk + r - lenp)\n    if q >= 2:\n        count += (q - 1) * lenl\n    print(count)", "def search(arr, lenl, val):\n    s = 0\n    l = lenl - 1\n    total = 0\n    while s <= l:\n        m = int((s + l) / 2)\n        if arr[m] <= val:\n            total = m + 1\n            s = m + 1\n        else:\n            l = m - 1\n    return total\n\ndef kmpsearch(string, lps):\n    lis = []\n    lens = len(string)\n    lensh = lens // 2\n    l = 0\n    i = 0\n    while i < lens:\n        if string[i] == pat[l]:\n            l += 1\n            i += 1\n        elif l > 0:\n            l = lps[l - 1]\n        else:\n            i += 1\n        if l == lenp:\n            if i - l < lensh:\n                lis.append(i - l)\n            l = lps[l - 1]\n    return lis\n\ndef kmp(pat, lenp):\n    lps = [0] * lenp\n    l = 0\n    i = 1\n    while i < lenp:\n        if pat[i] == pat[l]:\n            l += 1\n            lps[i] = l\n            i += 1\n        elif l > 0:\n            l = lps[l - 1]\n        else:\n            lps[i] = 0\n            i += 1\n    return lps\nkeyword = input()\npat = input()\nq = int(input())\nlenk = len(keyword)\nlenp = len(pat)\nk = keyword * 2\nlis = kmpsearch(k, kmp(pat, lenp))\nlenl = len(lis)\nfor _ in range(q):\n    n = int(input())\n    count = 0\n    q = n // lenk\n    r = n % lenk\n    count += search(lis, lenl, r - lenp)\n    if q >= 1:\n        count += search(lis, lenl, lenk + r - lenp)\n    if q >= 2:\n        count += (q - 1) * lenl\n    print(count)", "def search(arr, lenl, val):\n    s = 0\n    l = lenl - 1\n    total = 0\n    while s <= l:\n        m = int((s + l) / 2)\n        if arr[m] <= val:\n            total = m + 1\n            s = m + 1\n        else:\n            l = m - 1\n    return total\n\ndef kmpsearch(string, lps):\n    lis = []\n    lens = len(string)\n    lensh = lens // 2\n    l = 0\n    i = 0\n    while i < lens:\n        if string[i] == pat[l]:\n            l += 1\n            i += 1\n        elif l > 0:\n            l = lps[l - 1]\n        else:\n            i += 1\n        if l == lenp:\n            if i - l < lensh:\n                lis.append(i - l)\n            l = lps[l - 1]\n    return lis\n\ndef kmp(pat, lenp):\n    lps = [0] * lenp\n    l = 0\n    i = 1\n    while i < lenp:\n        if pat[i] == pat[l]:\n            l += 1\n            lps[i] = l\n            i += 1\n        elif l > 0:\n            l = lps[l - 1]\n        else:\n            lps[i] = 0\n            i += 1\n    return lps\nkeyword = input()\npat = input()\nq = int(input())\nlenk = len(keyword)\nlenp = len(pat)\nk = keyword * 2\nlis = kmpsearch(k, kmp(pat, lenp))\nlenl = len(lis)\nfor _ in range(q):\n    n = int(input())\n    count = 0\n    q = n // lenk\n    r = n % lenk\n    count += search(lis, lenl, r - lenp)\n    if q >= 1:\n        count += search(lis, lenl, lenk + r - lenp)\n    if q >= 2:\n        count += (q - 1) * lenl\n    print(count)", "def search(arr, lenl, val):\n    s = 0\n    l = lenl - 1\n    total = 0\n    while s <= l:\n        m = int((s + l) / 2)\n        if arr[m] <= val:\n            total = m + 1\n            s = m + 1\n        else:\n            l = m - 1\n    return total\n\ndef kmpsearch(string, lps):\n    lis = []\n    lens = len(string)\n    lensh = lens // 2\n    l = 0\n    i = 0\n    while i < lens:\n        if string[i] == pat[l]:\n            l += 1\n            i += 1\n        elif l > 0:\n            l = lps[l - 1]\n        else:\n            i += 1\n        if l == lenp:\n            if i - l < lensh:\n                lis.append(i - l)\n            l = lps[l - 1]\n    return lis\n\ndef kmp(pat, lenp):\n    lps = [0] * lenp\n    l = 0\n    i = 1\n    while i < lenp:\n        if pat[i] == pat[l]:\n            l += 1\n            lps[i] = l\n            i += 1\n        elif l > 0:\n            l = lps[l - 1]\n        else:\n            lps[i] = 0\n            i += 1\n    return lps\nkeyword = input()\npat = input()\nq = int(input())\nlenk = len(keyword)\nlenp = len(pat)\nk = keyword * 2\nlis = kmpsearch(k, kmp(pat, lenp))\nlenl = len(lis)\nfor _ in range(q):\n    n = int(input())\n    count = 0\n    q = n // lenk\n    r = n % lenk\n    count += search(lis, lenl, r - lenp)\n    if q >= 1:\n        count += search(lis, lenl, lenk + r - lenp)\n    if q >= 2:\n        count += (q - 1) * lenl\n    print(count)", "def search(arr, lenl, val):\n    s = 0\n    l = lenl - 1\n    total = 0\n    while s <= l:\n        m = int((s + l) / 2)\n        if arr[m] <= val:\n            total = m + 1\n            s = m + 1\n        else:\n            l = m - 1\n    return total\n\ndef kmpsearch(string, lps):\n    lis = []\n    lens = len(string)\n    lensh = lens // 2\n    l = 0\n    i = 0\n    while i < lens:\n        if string[i] == pat[l]:\n            l += 1\n            i += 1\n        elif l > 0:\n            l = lps[l - 1]\n        else:\n            i += 1\n        if l == lenp:\n            if i - l < lensh:\n                lis.append(i - l)\n            l = lps[l - 1]\n    return lis\n\ndef kmp(pat, lenp):\n    lps = [0] * lenp\n    l = 0\n    i = 1\n    while i < lenp:\n        if pat[i] == pat[l]:\n            l += 1\n            lps[i] = l\n            i += 1\n        elif l > 0:\n            l = lps[l - 1]\n        else:\n            lps[i] = 0\n            i += 1\n    return lps\nkeyword = input()\npat = input()\nq = int(input())\nlenk = len(keyword)\nlenp = len(pat)\nk = keyword * 2\nlis = kmpsearch(k, kmp(pat, lenp))\nlenl = len(lis)\nfor _ in range(q):\n    n = int(input())\n    count = 0\n    q = n // lenk\n    r = n % lenk\n    count += search(lis, lenl, r - lenp)\n    if q >= 1:\n        count += search(lis, lenl, lenk + r - lenp)\n    if q >= 2:\n        count += (q - 1) * lenl\n    print(count)", "def kmp(s, t, lps):\n    n = len(s)\n    m = len(t)\n    count = [0 for x in range(n)]\n    i = 0\n    j = 0\n    while i < n:\n        count[i] = count[i - 1]\n        if t[j] == s[i]:\n            i += 1\n            j += 1\n        if j == m:\n            count[i - 1] += 1\n            j = lps[j - 1]\n        elif i < n and t[j] != s[i]:\n            if j != 0:\n                j = lps[j - 1]\n            else:\n                i += 1\n    return count\n\ndef lpsa(t, m):\n    l = 0\n    lps = [0 for i in range(m)]\n    i = 1\n    while i < m:\n        if t[i] == t[l]:\n            l += 1\n            lps[i] = l\n            i += 1\n        elif l != 0:\n            l = lps[l - 1]\n        else:\n            lps[i] = 0\n            i += 1\n    return lps\ns = input()\nt = input()\nn = len(s)\nm = len(t)\nlps = lpsa(t, m)\none = kmp(s, t, lps)[-1]\ncount = kmp(s + s, t, lps)\ntwo = count[-1]\nthree = two - 2 * one\nfor _ in range(int(input())):\n    q = int(input())\n    v = q // n\n    if v:\n        ans = v * one + (v - 1) * three\n        e = q % n\n        ans += count[n - 1 + e] - count[n - 1]\n    else:\n        e = q % n\n        ans = count[e - 1]\n    print(ans)", "def kmp(s, t, lps):\n    n = len(s)\n    m = len(t)\n    count = [0 for x in range(n)]\n    i = 0\n    j = 0\n    while i < n:\n        count[i] = count[i - 1]\n        if t[j] == s[i]:\n            i += 1\n            j += 1\n        if j == m:\n            count[i - 1] += 1\n            j = lps[j - 1]\n        elif i < n and t[j] != s[i]:\n            if j != 0:\n                j = lps[j - 1]\n            else:\n                i += 1\n    return count\n\ndef lpsa(t, m):\n    l = 0\n    lps = [0 for i in range(m)]\n    i = 1\n    while i < m:\n        if t[i] == t[l]:\n            l += 1\n            lps[i] = l\n            i += 1\n        elif l != 0:\n            l = lps[l - 1]\n        else:\n            lps[i] = 0\n            i += 1\n    return lps\ns = input()\nt = input()\nn = len(s)\nm = len(t)\nlps = lpsa(t, m)\none = kmp(s, t, lps)[-1]\ncount = kmp(s + s, t, lps)\ntwo = count[-1]\nthree = two - 2 * one\nfor _ in range(int(input())):\n    q = int(input())\n    v = q // n\n    if v:\n        ans = v * one + (v - 1) * three\n        e = q % n\n        ans += count[n - 1 + e] - count[n - 1]\n    else:\n        e = q % n\n        ans = count[e - 1]\n    print(ans)", "def kmp(s, t, lps):\n    n = len(s)\n    m = len(t)\n    count = [0 for x in range(n)]\n    i = 0\n    j = 0\n    while i < n:\n        count[i] = count[i - 1]\n        if t[j] == s[i]:\n            i += 1\n            j += 1\n        if j == m:\n            count[i - 1] += 1\n            j = lps[j - 1]\n        elif i < n and t[j] != s[i]:\n            if j != 0:\n                j = lps[j - 1]\n            else:\n                i += 1\n    return count\n\ndef lpsa(t, m):\n    l = 0\n    lps = [0 for i in range(m)]\n    i = 1\n    while i < m:\n        if t[i] == t[l]:\n            l += 1\n            lps[i] = l\n            i += 1\n        elif l != 0:\n            l = lps[l - 1]\n        else:\n            lps[i] = 0\n            i += 1\n    return lps\ns = input()\nt = input()\nn = len(s)\nm = len(t)\nlps = lpsa(t, m)\none = kmp(s, t, lps)[-1]\ncount = kmp(s + s, t, lps)\ntwo = count[-1]\nthree = two - 2 * one\nfor _ in range(int(input())):\n    q = int(input())\n    v = q // n\n    if v:\n        ans = v * one + (v - 1) * three\n        e = q % n\n        ans += count[n - 1 + e] - count[n - 1]\n    else:\n        e = q % n\n        ans = count[e - 1]\n    print(ans)"]