["def sieve_erasth(num):\n    primes = [True] * num\n    primes[0] = False\n    primes[1] = False\n    p = 2\n    while p * p <= num:\n        if primes[p] == True:\n            for i in range(p * p, num, p):\n                primes[i] = False\n        p += 1\n    return primes\nnum = 10 ** 6\nprimes = sieve_erasth(num)\n\ndef solve(n):\n    for a in range(100, 1, -1):\n        if primes[a] == False:\n            continue\n        for b in range(1000, 1, -1):\n            if primes[b] == False:\n                continue\n            c = n - (a ** 3 + b ** 2)\n            if c > 0 and primes[c]:\n                return [c, b, a]\n    return [0, 0, 0]\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(*solve(n))", "mod = 1000000007\nread_int = lambda : int(input().strip())\nread_str = lambda : input().strip()\nread_str_arr = lambda : input().strip().split()\nread_int_arr = lambda : [int(x) for x in input().strip().split()]\nisprime = [False] * 2 + [True] * (10 ** 6 - 2)\nfor i in range(2, len(isprime)):\n    if not isprime[i]:\n        continue\n    for j in range(i * i, len(isprime), i):\n        isprime[j] = False\nfrom math import floor, sqrt\n\ndef solve(n):\n    for p3 in range(floor((n - 6) ** (1 / 3)), 1, -1):\n        if not isprime[p3]:\n            continue\n        for p2 in range(floor(sqrt(n - p3 ** 3 - 2)), 1, -1):\n            if not isprime[p2]:\n                continue\n            if isprime[n - p3 ** 3 - p2 ** 2]:\n                print(n - p3 ** 3 - p2 ** 2, p2, p3)\n                return\n    print('0 0 0')\nwhile True:\n    n = read_int()\n    if n == 0:\n        break\n    solve(n)", "def sieve_erasth(num):\n    primes = [True] * num\n    primes[0] = False\n    primes[1] = False\n    p = 2\n    while p * p <= num:\n        if primes[p] == True:\n            for i in range(p * p, num, p):\n                primes[i] = False\n        p += 1\n    return primes\nnum = 10 ** 6\nprimes = sieve_erasth(num)\n\ndef solve(n):\n    for a in range(100, 1, -1):\n        if primes[a] == False:\n            continue\n        for b in range(1000, 1, -1):\n            if primes[b] == False:\n                continue\n            c = n - (a ** 3 + b ** 2)\n            if c > 0 and primes[c]:\n                return [c, b, a]\n    return [0, 0, 0]\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(*solve(n))", "ul = 10 ** 6\nprime = [1] * (ul + 1)\nprime[0] = 0\nprime[1] = 0\ni = 2\nwhile i * i <= ul:\n    if prime[i] == 1:\n        for j in range(i * i, ul + 1, i):\n            prime[j] = 0\n    i += 1\n\ndef solve(n):\n    for pc in range(100, 1, -1):\n        if prime[pc] == 0:\n            continue\n        for ps in range(1000, 1, -1):\n            if prime[ps] == 0:\n                continue\n            el = n - (ps ** 2 + pc ** 3)\n            if el > 0 and prime[el] == 1:\n                return [el, ps, pc]\n    return [0, 0, 0]\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    print(*solve(n))", "import bisect\nimport math\nn = 10 ** 6 + 1\nprime = [True for i in range(n)]\nprime[0] = prime[1] = False\np = 2\narr_square = []\nsquare = []\nsquareset = set()\narr_cube = []\nwhile p * p <= n:\n    if prime[p] == True:\n        for i in range(p * 2, n, p):\n            prime[i] = False\n    p += 1\nfor i in range(n):\n    if prime[i]:\n        arr_cube.append(pow(i, 3))\n        arr_square.append(pow(i, 2))\n        square.append(i)\n        squareset.add(i)\nwhile True:\n    x = int(input())\n    if x == 0:\n        break\n    else:\n        num = int(x ** (1 / 3))\n        cube_index = bisect.bisect_right(square, num)\n        num = int(x ** 0.5)\n        square_index = bisect.bisect_right(square, num)\n        fla = True\n        for i in range(cube_index, -1, -1):\n            for j in range(square_index, -1, -1):\n                if x - (arr_cube[i] + arr_square[j]) in squareset and x - (arr_cube[i] + arr_square[j]) + arr_cube[i] + arr_square[j] == x:\n                    print(x - (arr_square[j] + arr_cube[i]), square[j], square[i])\n                    fla = False\n                    break\n            if not fla:\n                break\n        if fla:\n            print(0, 0, 0)", "def main():\n    prime = [True for i in range(1000001)]\n    p = 2\n    prm = []\n    while p * p <= 1000001:\n        if prime[p] == True:\n            prm.append(p)\n            for i in range(p * 2, 10 ** 6 + 1, p):\n                prime[i] = False\n        p += 1\n    c = 1\n    pp = prm[::-1]\n    prime[0] = prime[1] = False\n    while c:\n        n = int(input())\n        if n == 0:\n            c = 0\n            continue\n        cbrt = int(n ** (1 / 3))\n        sqrt = int(n ** (1 / 2))\n        flag = 1\n        for i in pp:\n            if flag:\n                for j in pp:\n                    if i <= cbrt + 1 and j <= sqrt + 1 and (n - i ** 3 - j ** 2 > 0) and prime[n - i ** 3 - j ** 2]:\n                        print(n - i ** 3 - j ** 2, j, i)\n                        flag = 0\n                        break\n            else:\n                break\n        if flag:\n            print(0, 0, 0)\nmain()", "def main():\n    prime = [True for i in range(1000001)]\n    p = 2\n    prm = []\n    while p * p <= 1000001:\n        if prime[p] == True:\n            prm.append(p)\n            for i in range(p * 2, 10 ** 6 + 1, p):\n                prime[i] = False\n        p += 1\n    c = 1\n    pp = prm[::-1]\n    prime[0] = prime[1] = False\n    while c:\n        n = int(input())\n        if n == 0:\n            c = 0\n            continue\n        cbrt = int(n ** (1 / 3))\n        sqrt = int(n ** (1 / 2))\n        flag = 1\n        for i in pp:\n            if flag:\n                for j in pp:\n                    if i <= cbrt + 1 and j <= sqrt + 1 and (n - i ** 3 - j ** 2 > 0) and prime[n - i ** 3 - j ** 2]:\n                        print(n - i ** 3 - j ** 2, j, i)\n                        flag = 0\n                        break\n            else:\n                break\n        if flag:\n            print(0, 0, 0)\nmain()"]