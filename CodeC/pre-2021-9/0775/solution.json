["import math as mt\ntest_case = int(input())\nfor test in range(test_case):\n    n = int(input())\n    x = int(mt.sqrt(n))\n    remainder = n - x * x\n    x1 = x2 = d1 = 0\n    x1 += x\n    x1 += remainder // x\n    remainder = n % x\n    string = 'X' * x1 + 'D' * (x - remainder) + 'X' * (remainder > 0) + 'D' * remainder\n    print(string)", "import math as mt\ntest_case = int(input())\nfor test in range(test_case):\n    n = int(input())\n    x = int(mt.sqrt(n))\n    remainder = n - x * x\n    x1 = x2 = d1 = 0\n    x1 += x\n    x1 += remainder // x\n    remainder = n % x\n    string = 'X' * x1 + 'D' * (x - remainder) + 'X' * (remainder > 0) + 'D' * remainder\n    print(string)", "for _ in range(int(input())):\n    n = int(input())\n    print('X' * (int(n ** 0.5) + (n - int(n ** 0.5) * int(n ** 0.5)) // int(n ** 0.5)) + 'D' * (int(n ** 0.5) - n % int(n ** 0.5)) + 'X' * (n % int(n ** 0.5) > 0) + 'D' * (n % int(n ** 0.5)))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    x = int(math.sqrt(n))\n    print('X' * (x + (n - x * x) // x) + 'D' * (x - n % x) + 'X' * (n % x > 0) + 'D' * (n % x))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    x = int(math.sqrt(n))\n    remainder = n - x * x\n    x1 = x2 = d1 = 0\n    x1 += x\n    x1 += remainder // x\n    remainder = n % x\n    string = 'X' * x1 + 'D' * (x - remainder) + 'X' * (remainder > 0) + 'D' * remainder\n    print(string)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    r = int(n ** 0.5)\n    d = n - r * r\n    m = d % r\n    print('X' * m + 'D' * (m > 0) + 'X' * (r - m) + 'D' * (r + d // r))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    r = int(n ** 0.5)\n    d = n - r * r\n    m = d % r\n    print('X' * m + 'D' * (m > 0) + 'X' * (r - m) + 'D' * (r + d // r))", "from math import sqrt\n\ndef solve():\n    n = int(input())\n    k = int(sqrt(n))\n    y = n - k * k\n    z = y % k\n    if z > 0:\n        print('X' * z + 'D' + 'X' * (k - z) + 'D' * (k + y // k))\n    else:\n        print('X' * k + 'D' * (k + y // k))\nt = int(input())\nfor tt in range(0, t):\n    solve()", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    r = int(N ** 0.5)\n    d = N - r * r\n    m = d % r\n    print('X' * m + 'D' * (m > 0) + 'X' * (r - m) + 'D' * (r + d // r))", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    r = int(N ** 0.5)\n    d = N - r * r\n    print('X' * (d % r) + 'D' * (d % r > 0) + 'X' * (r - d % r) + 'D' * (r + d // r))", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    r = int(N ** 0.5)\n    d = N - r * r\n    if d == 0:\n        print('X' * r + 'D' * r)\n    else:\n        print('X' * (d % r) + 'D' * (d % r > 0) + 'X' * (r - d % r) + 'D' * (r + d // r))", "from math import sqrt as S\nfor _ in range(int(input())):\n    n = int(input())\n    a1 = int(S(n))\n    a2 = n // a1\n    rem = n - a1 * a2\n    ans = ['X'] * a1 + ['D'] * a2\n    if rem:\n        ans.insert(-rem, 'X')\n    print(*ans, sep='')", "from math import sqrt as S\nfor _ in range(int(input())):\n    n = int(input())\n    a1 = int(S(n))\n    a2 = n // a1\n    rem = n - a1 * a2\n    ans = ['X'] * a1 + ['D'] * a2\n    if rem:\n        ans.insert(-rem, 'X')\n    print(*ans, sep='')\n    maxi = 1\n    for i in range(2, int(S(n)) + 1):\n        if n % i == 0:\n            maxi = max(maxi, i)", "for _ in range(int(input())):\n    z = int(input())\n    sqr = int(z ** 0.5)\n    (a, c) = divmod(z, sqr)\n    print(['X' * a + (sqr - c) * 'D' + 'X' + c * 'D', 'X' * a + 'D' * sqr][c == 0])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    s = int(math.sqrt(n))\n    k = n // s\n    r = n % s\n    p = n // k\n    if r == 0:\n        print('X' * k + 'D' * p)\n    else:\n        print('X' * r + 'D' + 'X' * (k - r) + 'D' * p)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    s = int(math.sqrt(n))\n    k = n // s\n    r = n % s\n    p = n // k\n    if r == 0:\n        print('X' * k + 'D' * p)\n    else:\n        print('X' * r + 'D' + 'X' * (k - r) + 'D' * p)", "from math import sqrt\nt = int(input())\n\ndef insert_back(ans, index, str):\n    index = len(ans) - index\n    ans = ans[:index] + str + ans[index:]\n    return ans\nfor _ in range(t):\n    n = int(input())\n    sq = int(sqrt(n))\n    ans = sq * 'X' + sq * 'D'\n    rem = n - sq * sq\n    if rem is not 0:\n        if rem <= sq:\n            ans = insert_back(ans, rem, 'X')\n        else:\n            ans += 'D'\n            ans = insert_back(ans, rem - sq, 'X')\n    print(ans)", "t = int(input())\nfor si in range(t):\n    n = int(input())\n    u = int(n ** (1 / 2))\n    v = u + 1\n    if u * u == n:\n        print('X' * u + 'D' * u)\n    elif v * v == n:\n        print('X' * v + 'D' * v)\n    else:\n        k = v * v - u * u\n        k = k - 1\n        k = int(k / 2)\n        if n > u * u + k:\n            s1 = 'X' * k\n            s2 = 'D' * (v * v - n) + 'X'\n            s3 = (v - (v * v - n)) * 'D'\n            print(s1 + s2 + s3)\n        else:\n            s1 = (n - u * u) * 'X' + 'D'\n            s2 = 'X' * (u - (n - u * u))\n            s3 = 'D' * u\n            print(s1 + s2 + s3)", "t = int(input())\nfor si in range(t):\n    n = int(input())\n    u = int(n ** (1 / 2))\n    v = u + 1\n    if u * u == n:\n        print('X' * u + 'D' * u)\n    elif v * v == n:\n        print('X' * v + 'D' * v)\n    else:\n        k = v * v - u * u\n        k = k - 1\n        k = int(k / 2)\n        if n > u * u + k:\n            s1 = 'X' * k\n            s2 = 'D' * (v * v - n) + 'X'\n            s3 = (v - (v * v - n)) * 'D'\n            print(s1 + s2 + s3)\n        else:\n            s1 = (n - u * u) * 'X' + 'D'\n            s2 = 'X' * (u - (n - u * u))\n            s3 = 'D' * u\n            print(s1 + s2 + s3)", "for _ in range(int(input())):\n    z = int(input())\n    sqr = int(z ** 0.5)\n    (a, c) = divmod(z, sqr)\n    print(['X' * a + (sqr - c) * 'D' + 'X' + c * 'D', 'X' * a + 'D' * sqr][c == 0])", "def string(q):\n    abc = ''\n    ef = ''\n    for w in range(q):\n        abc = abc + 'X'\n        ef = ef + 'D'\n    return abc + ef\nt = int(input())\nfor q in range(t):\n    n = int(input())\n    l = int(n ** (1 / 2))\n    if l == n ** (1 / 2):\n        final = string(l)\n    elif n > l * l + l:\n        final = string(l + 1)\n        rem = n - l * l - l\n        i = len(final) - rem\n        final = final[1:i] + 'X' + final[i:]\n    else:\n        final = string(l)\n        rem = n - l * l\n        i = len(final) - rem\n        final = final[:i] + 'X' + final[i:]\n    print(final)", "import sys\nfrom math import *\nt = int(input())\nwhile t:\n    l = []\n    f = []\n    s = ''\n    n = int(input())\n    if sqrt(n) % 1.0 == 0:\n        y = sqrt(n)\n        for x in range(int(y)):\n            l.append('X')\n        for x in range(int(y)):\n            l.append('D')\n        s = ''.join(l)\n    else:\n        count = 0\n        for x in range(1, int(sqrt(n)) + 3):\n            if x ** 2 > n:\n                break\n        x = x - 1\n        b = x\n        while b * x < n:\n            b += 1\n        for i in range(int(b)):\n            l.append('X')\n        for i in range(x):\n            l.append('D')\n        f = l.index('D')\n        l.pop(f)\n        l.insert(f - (b * x - n), 'D')\n        s = ''.join(l)\n    sys.stdout.write(s + '\\n')\n    t -= 1", "from math import floor, ceil, sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    x = ceil(sqrt(n * 4))\n    x -= 1\n    z = floor(x ** 2 / 4)\n    ans = []\n    for i in range(x // 2):\n        ans.append('X')\n    for i in range(x - x // 2):\n        ans.append('D')\n    ans.insert(x - (n - z), 'X')\n    print(''.join(ans))", "tc = int(input())\nfor test in range(tc):\n    n = int(input())\n    ln = int(n ** 0.5)\n    string = ln * ['X'] + ln * ['D']\n    pr_ln = ln * ln\n    if n - ln * ln > ln:\n        string += ['D']\n        pr_ln += ln\n    if pr_ln != n:\n        string.insert(pr_ln - n, 'X')\n    print(''.join(string))", "for _ in range(int(input())):\n    n = int(input())\n    s = int(n ** 0.5)\n    x = s\n    if s * (s + 1) <= n:\n        d = s + 1\n    else:\n        d = s\n    sum1 = x * d\n    del x\n    while sum1 < n:\n        sum1 += d\n    if sum1 > n:\n        sum1 -= d\n    print('X' * (sum1 // d) + 'D' * (d - n + sum1), end='')\n    if n != sum1:\n        print('X' + 'D' * (n - sum1))\n    else:\n        print()", "import math\nt = int(input())\nfor _ in range(t):\n    a = int(input())\n    sq = math.ceil(math.sqrt(a))\n    sqv = sq ** 2\n    XS = ['X'] * sq\n    DS = ['D'] * sq\n    diff = sqv - a\n    quo = diff // sq\n    rem = diff % sq\n    XS = XS[quo + (rem > 0):]\n    if rem > 0:\n        DS.insert(rem, 'X')\n    print(''.join(XS + DS))", "import math\nt = int(input())\nfor tst in range(t):\n    num = int(input())\n    x = int(math.sqrt(num))\n    y = num // x\n    z = num % x\n    ans = ''\n    if z == 0:\n        for tst in range(x):\n            ans = ans + 'X'\n        for tst in range(y):\n            ans = ans + 'D'\n    else:\n        for tst in range(x):\n            ans = ans + 'X'\n        for tst in range(y):\n            ans = ans + 'D'\n        ans = ans[:-z] + 'X' + ans[-z:]\n    print(ans)", "for _ in range(int(input())):\n    number_of_laughts = int(input())\n    string = 'XD'\n    if number_of_laughts > 1:\n        Xcount = 0\n        c = 0\n        xs = 1\n        ds = 1\n        for i in range(number_of_laughts):\n            if i * i <= number_of_laughts:\n                c = i\n            else:\n                break\n        a = ''\n        b = ''\n        for _ in range(c):\n            a = a + 'X'\n            b = b + 'D'\n        Xcount = c\n        string = a + b\n        difference = number_of_laughts - c * c\n        if difference != 0:\n            while difference > 0:\n                if difference > c:\n                    string = string + 'D'\n                    difference -= c\n                elif difference <= Xcount:\n                    one = string[:difference]\n                    two = string[difference:]\n                    string = one + 'D' + two\n                    difference -= difference\n                else:\n                    one = string[:Xcount]\n                    two = string[Xcount:]\n                    string = one + 'D' + two\n                    difference -= X\n    print(string)", "t = int(input())\nwhile t != 0:\n    t = t - 1\n    x = int(input())\n    r = x ** 0.5\n    r = int(r)\n    n = x // r\n    b = x % r\n    if r < n:\n        (r, n) = (n, r)\n    st = 'X' * b + 'D' * bool(b) + 'X' * (r - b) + 'D' * n\n    print(st)", "from math import floor\nfrom math import sqrt\nt = int(input())\n\ndef nearest_sqrt(n):\n    return floor(sqrt(n)) ** 2\nwhile t > 0:\n    nu = int(input())\n    n = nearest_sqrt(nu)\n    x = int(sqrt(n))\n    d = x\n    st = ''\n    rem = abs(n - nu)\n    if d >= rem:\n        index = d - rem\n        if rem != 0:\n            d += 1\n        for i in range(x):\n            st += 'X'\n        for i in range(d):\n            if i == index and rem != 0:\n                st += 'X'\n            else:\n                st += 'D'\n    else:\n        idx = 0\n        while rem > 0 and (d + 1) * x <= nu:\n            d += 1\n            rem -= x\n        if rem != 0:\n            idx = d - rem\n            d += 1\n        for i in range(x):\n            st += 'X'\n        for j in range(d):\n            if j == idx and rem != 0:\n                st += 'X'\n            else:\n                st += 'D'\n    print(st)\n    t -= 1", "t = int(input())\nwhile t != 0:\n    t = t - 1\n    x = int(input())\n    r = x ** 0.5\n    r = int(r)\n    n = x // r\n    b = x % r\n    if r < n:\n        (r, n) = (n, r)\n    st = 'X' * b + 'D' * bool(b) + 'X' * (r - b) + 'D' * n\n    print(st)", "def sol():\n    n = int(input())\n    temp = int(pow(n, 0.5))\n    if pow(temp, 2) == n:\n        string = 'X' * temp + 'D' * temp\n        print(string.strip())\n        return\n    else:\n        string = list('X' * temp + 'D' * temp)\n        l = n - pow(temp, 2)\n        temp2 = temp\n        while l > temp2:\n            string.append('D')\n            temp2 += 1\n            l -= temp\n        string.insert(-l, 'X')\n        print(''.join(string))\nfor _ in range(int(input())):\n    sol()", "from math import sqrt\nfrom math import floor\nt = int(input())\n\ndef main():\n    n = int(input())\n    root = floor(sqrt(n))\n    sqr = root * root\n    if sqr == n:\n        print('X' * root + 'D' * root)\n        return\n    nxt_sqr = (root + 1) * (root + 1)\n    diff_bw_sqr = nxt_sqr - sqr\n    half_of_diff = diff_bw_sqr // 2\n    string = 'X' * root + 'D' * root\n    l_string = list(string)\n    diff = n - sqr\n    if diff < diff_bw_sqr // 2:\n        l_string.insert(-diff, 'X')\n    else:\n        l_string.insert(0, 'X')\n        l_string.insert(diff - half_of_diff, 'D')\n    if l_string[0] == 'D':\n        l_string = l_string[1:]\n    print(''.join(l_string))\nfor i in range(t):\n    main()", "t = int(input())\nfor j in range(t):\n    n = int(input())\n    last_d = int(n ** 0.5)\n    one_d = n % last_d\n    if one_d == 0:\n        print((last_d - one_d) * 'X' + n // last_d * 'D')\n    else:\n        print(one_d * 'X' + 'D' + (last_d - one_d) * 'X' + n // last_d * 'D')", "t = int(input())\nwhile t != 0:\n    t = t - 1\n    x = int(input())\n    r = x ** 0.5\n    r = int(r)\n    n = x // r\n    b = x % r\n    if r < n:\n        (r, n) = (n, r)\n    st = 'X' * b + 'D' * bool(b) + 'X' * (r - b) + 'D' * n\n    print(st)", "import math\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    k = int(math.sqrt(n))\n    a = 'X' * k + 'D' * k\n    g = n - k * k\n    y = len(a) - g\n    if g != 0 and k <= y:\n        a = a[:y] + 'X' + a[y:]\n    elif g != 0 and k > y:\n        a = a[:] + 'D'\n        x = k\n        d = k + 1\n        an = n - x * d\n        u = len(a) - an\n        a = a[:u] + 'X' + a[u:]\n    print(a)", "import math\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    x = math.ceil(n ** 0.5)\n    dif = x * x - n\n    if dif < x:\n        print('X' * (x - 1) + 'D' * dif + 'X' + 'D' * (x - dif))\n    else:\n        dif = dif - x\n        print('X' * (x - 1) + 'D' * dif + 'X' + 'D' * (x - dif - 1))", "from math import sqrt\na1 = int(input())\nfor i in range(a1):\n    ca = int(input())\n    cb = int(sqrt(ca))\n    k1 = ca // cb\n    k2 = ca % cb\n    if ca % cb == 0:\n        print('X' * k1 + 'D' * cb)\n    else:\n        print('X' * k1 + 'D' * (cb - k2) + 'X' + 'D' * k2)", "import math\nfor i in range(int(input())):\n    a = int(input())\n    b = int(math.sqrt(a))\n    if a % b != 0:\n        print('X' * (a // b) + 'D' * (b - a % b) + 'X' + 'D' * (a % b))\n    else:\n        print('X' * (a // b) + 'D' * b)", "x = int(input())\nfor i in range(x):\n    z = int(input())\n    f = int(z ** 0.5)\n    k = z // f\n    m = z % f\n    if m:\n        k = 'X' * f + 'D' * (k - m) + 'X' + 'D' * m\n    else:\n        k = 'X' * f + 'D' * k\n    print(k)", "def ii():\n    return int(input())\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\nfor _ in range(ii()):\n    n = ii()\n    b = int(n ** 0.5)\n    a = n // b\n    c = n - a * b\n    if c != 0:\n        A = 'X' * a + (b - c) * 'D' + 'X' + c * 'D'\n    else:\n        A = 'X' * a + 'D' * b\n    print(A)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    j = int(math.sqrt(n))\n    if j * j == n:\n        print('X' * j + 'D' * j)\n        continue\n    if n == 3:\n        print('XDXD')\n        continue\n    if n == 2:\n        print('XDD')\n        continue\n    if n == 1:\n        print('XD')\n        continue\n    if n - j * j <= j:\n        print('X' * (n - j * j) + 'D' + 'X' * (j - (n - j * j)) + 'D' * j)\n    else:\n        j += 1\n        print('X' * (j - (j * j - n)) + 'D' + 'X' * (j - (j - (j * j - n))) + 'D' * (j - 1))", "import math\nt = int(input())\nfor i in range(t):\n    a = []\n    n = int(input())\n    c = int(math.sqrt(n))\n    s = 'X' * c + 'D' * c\n    if n - c ** 2 == 0:\n        s = 'X' * c + 'D' * c\n    else:\n        z = c ** 2\n        diff = n - z\n        while diff >= c:\n            s = s + 'D'\n            diff -= c\n        if diff > 0:\n            s = s[:diff] + 'D' + s[diff:]\n    print(s)", "from sys import stdin\nfrom math import sqrt, floor\nfor _ in range(int(stdin.readline().strip())):\n    n = int(stdin.readline().strip())\n    sqroot = sqrt(n)\n    if sqroot % 1 > 0:\n        (l, u) = (floor(sqroot), round(sqroot))\n        diff = n - l * u\n        print('X' * diff + 'D' + 'X' * (l - diff) + 'D' * u)\n    else:\n        sqroot = int(sqroot)\n        print('X' * sqroot + 'D' * sqroot)", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    k = int(n ** 0.5)\n    Cx = k\n    Cd = k\n    if k * k < n:\n        if k * k + k < n:\n            Cd += 1\n        Cx += 1\n    mp = Cx * Cd\n    ansArr = ['X'] * Cx + ['D'] * Cd\n    if mp != n:\n        shif = (mp - n) // (Cd - 1)\n        ansArr[Cx - shif:Cx] = ['D'] * shif\n        ansArr[Cx + Cd - shif - 1:-1] = ['X'] * shif\n        shif = (mp - n) % (Cd - 1)\n        if shif:\n            idx = ansArr.index('D')\n            ansArr[idx - 1] = 'D'\n            ansArr[idx - 1 + shif] = 'X'\n    print(''.join(ansArr))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    p = n ** 0.5\n    r = ''\n    if p % 1 == 0:\n        r += 'X' * int(p)\n        r += 'D' * int(p)\n    else:\n        l = math.floor(p)\n        if n <= l ** 2 + l:\n            s = 2 * l + 1\n            r += 'X' * l\n            r += 'D' * (l ** 2 + l - n)\n            r += 'X'\n            r += 'D' * (n - l ** 2)\n        else:\n            r += 'X' * (l + 1)\n            r += 'D' * ((l + 1) ** 2 - n - 1)\n            r += 'X'\n            r += 'D' * (n - l ** 2 - l)\n    print(r)", "from math import *\nfor i in range(int(input())):\n    n = int(input())\n    k = int(sqrt(n))\n    k = max(k, n // k)\n    d = min(k, n // k)\n    l = []\n    for j in range(d):\n        l.append('X')\n    for j in range(k):\n        l.append('D')\n    p = n % k\n    if p != 0:\n        l.insert(-p, 'X')\n    print(''.join(l))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ns = int(n ** 0.5)\n    ns1 = n // ns\n    nl = n % ns1\n    for i in range(ns):\n        print('X', end='')\n    for i in range(ns1):\n        if i == ns1 - nl:\n            print('X', end='')\n        print('D', end='')\n    print('')", "import math\nt = int(input())\nfor test_case in range(t):\n    n = int(input())\n    square_root = int(math.sqrt(n))\n    if math.sqrt(n) == square_root:\n        print(square_root * 'X' + square_root * 'D')\n        continue\n    if n - square_root ** 2 <= square_root:\n        print(square_root * 'X' + (square_root - (n - square_root ** 2)) * 'D' + 'X' + (n - square_root ** 2) * 'D')\n        continue\n    D_count = square_root + 1\n    print(square_root * 'X' + (D_count - (n - square_root * D_count)) * 'D' + 'X' + (n - square_root * D_count) * 'D')", "from math import *\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    p = int(sqrt(n))\n    st = ''\n    z = n - p * p\n    st += p * 'X'\n    x = z // p\n    st += x * 'X'\n    x = z % p\n    st += (p - x) * 'D'\n    if x > 0:\n        st += 'X'\n    st += x * 'D'\n    print(st)", "from math import floor, sqrt\nfor t in range(int(input())):\n    n = int(input())\n    k = floor(sqrt(n))\n    ell = n - k ** 2\n    if ell == 2 * k:\n        print(k * 'X' + (k + 2) * 'D')\n    elif ell >= k:\n        r = ell - k\n        print(r * 'X' + ('D' if r > 0 else '') + (k - r) * 'X' + (k + 1) * 'D')\n    else:\n        print(ell * 'X' + ('D' if ell > 0 else '') + (k - ell) * 'X' + k * 'D')"]