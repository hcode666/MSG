["import sys\n\ndef update(bit, idx, val):\n    while idx < len(bit):\n        bit[idx] += val\n        idx += idx & -idx\n\ndef sumb(bit, idx):\n    ans = 0\n    while idx > 0:\n        ans += bit[idx]\n        idx -= idx & -idx\n    return ans\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef mi():\n    return int(input())\n\ndef MI():\n    return map(int, input().split())\n\ndef LMI():\n    return list(MI())\n(n, m) = MI()\ns = []\nprot = []\nprot1 = []\nquery = []\nfor _ in range(m):\n    a = input().split()\n    if a[0] == 'P':\n        (b, c) = (int(a[1]), int(a[2]))\n        s += [b, c]\n        prot.append([b, c])\n        prot1.append([b, c])\n        query.append([a[0], b, c])\n    elif a[0] == 'M':\n        (b, c) = (int(a[1]), int(a[2]))\n        [d, e] = prot1[b - 1]\n        s += [d + c, e + c]\n        prot1[b - 1] = [d + c, e + c]\n        query.append([a[0], b - 1, c])\n    else:\n        b = int(a[1])\n        s += [b]\n        query.append([a[0], b, 0])\ns.sort()\nd = {}\ncur = 1\nfor i in s:\n    if i not in d:\n        d[i] = cur\n        cur += 1\nbit = [0] * (cur + 10)\nfor (i, j, k) in query:\n    if i == 'P':\n        update(bit, d[j], 1)\n        update(bit, d[k] + 1, -1)\n    elif i == 'M':\n        [b, c] = prot[j]\n        update(bit, d[b], -1)\n        update(bit, d[c] + 1, 1)\n        update(bit, d[b + k], 1)\n        update(bit, d[c + k] + 1, -1)\n        prot[j] = [b + k, c + k]\n    else:\n        print(sumb(bit, d[j]))"]