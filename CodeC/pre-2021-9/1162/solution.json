["import sys, math, random, heapq\nfrom collections import deque\nfrom math import gcd\n\ndef bs(arr, le, ri):\n    l = 0\n    arr.sort()\n    r = len(arr) - 1\n    ans = 10000000\n    while l <= r:\n        m = (l + r) // 2\n        if arr[m] >= le and arr[m] <= ri:\n            ans = arr[m]\n            r = m - 1\n        elif arr[m] < le:\n            l = m + 1\n        else:\n            r = m - 1\n    return ans\nfor __ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    l = [[-1 for j in range(m)] for i in range(n)]\n    ans = [[0 for j in range(m)] for i in range(n)]\n    largest = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n * m):\n        (x, y) = map(int, input().split())\n        l[x - 1][y - 1] = (i % 2, i)\n    for i in range(n):\n        ans[i][0] = l[i][0][0]\n        for j in range(1, m):\n            ans[i][j] = l[i][j][0] + ans[i][j - 1]\n    for j in range(m):\n        for i in range(1, n):\n            ans[i][j] += ans[i - 1][j]\n    for i in range(n):\n        st = deque()\n        for j in range(k):\n            while len(st) > 0 and st[-1][0] < l[i][j][1]:\n                st.pop()\n            st.append((l[i][j][1], j))\n        largest[i][k - 1] = st[0][0]\n        for j in range(k, m):\n            if st[0][1] == j - k:\n                st.popleft()\n            while len(st) > 0 and st[-1][0] < l[i][j][1]:\n                st.pop()\n            st.append((l[i][j][1], j))\n            largest[i][j] = st[0][0]\n    for i in range(k - 1, m):\n        st = deque()\n        for j in range(k):\n            while len(st) > 0 and st[-1][0] < largest[j][i]:\n                st.pop()\n            st.append((largest[j][i], j))\n        largest[k - 1][i] = st[0][0]\n        for j in range(k, n):\n            if st[0][1] == j - k:\n                st.popleft()\n            while len(st) > 0 and st[-1][0] < largest[j][i]:\n                st.pop()\n            st.append((largest[j][i], j))\n            largest[j][i] = st[0][0]\n    alice = []\n    bob = []\n    for i in range(k - 1, n):\n        for j in range(k - 1, m):\n            x = ans[i][j]\n            if i - k >= 0:\n                x -= ans[i - k][j]\n            if j - k >= 0:\n                x -= ans[i][j - k]\n            if i - k >= 0 and j - k >= 0:\n                x += ans[i - k][j - k]\n            if x == 0:\n                alice.append(largest[i][j])\n            if x == k * k:\n                bob.append(largest[i][j])\n    if len(bob) == 0 and len(alice) == 0:\n        print('Draw')\n    elif len(bob) == 0:\n        print('Alice')\n    elif len(alice) == 0:\n        print('Bob')\n    else:\n        print('Bob') if min(alice) > min(bob) else print('Alice')", "import sys, math, random, heapq\nfrom collections import deque\nfrom math import gcd\n\ndef bs(arr, le, ri):\n    l = 0\n    arr.sort()\n    r = len(arr) - 1\n    ans = 10000000\n    while l <= r:\n        m = (l + r) // 2\n        if arr[m] >= le and arr[m] <= ri:\n            ans = arr[m]\n            r = m - 1\n        elif arr[m] < le:\n            l = m + 1\n        else:\n            r = m - 1\n    return ans\nfor __ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    l = [[-1 for j in range(m)] for i in range(n)]\n    ans = [[0 for j in range(m)] for i in range(n)]\n    largest = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n * m):\n        (x, y) = map(int, input().split())\n        l[x - 1][y - 1] = (i % 2, i)\n    for i in range(n):\n        ans[i][0] = l[i][0][0]\n        for j in range(1, m):\n            ans[i][j] = l[i][j][0] + ans[i][j - 1]\n    for j in range(m):\n        for i in range(1, n):\n            ans[i][j] += ans[i - 1][j]\n    for i in range(n):\n        st = deque()\n        for j in range(k):\n            while len(st) > 0 and st[-1][0] < l[i][j][1]:\n                st.pop()\n            st.append((l[i][j][1], j))\n        largest[i][k - 1] = st[0][0]\n        for j in range(k, m):\n            if st[0][1] == j - k:\n                st.popleft()\n            while len(st) > 0 and st[-1][0] < l[i][j][1]:\n                st.pop()\n            st.append((l[i][j][1], j))\n            largest[i][j] = st[0][0]\n    for i in range(k - 1, m):\n        st = deque()\n        for j in range(k):\n            while len(st) > 0 and st[-1][0] < largest[j][i]:\n                st.pop()\n            st.append((largest[j][i], j))\n        largest[k - 1][i] = st[0][0]\n        for j in range(k, n):\n            if st[0][1] == j - k:\n                st.popleft()\n            while len(st) > 0 and st[-1][0] < largest[j][i]:\n                st.pop()\n            st.append((largest[j][i], j))\n            largest[j][i] = st[0][0]\n    alice = []\n    bob = []\n    for i in range(k - 1, n):\n        for j in range(k - 1, m):\n            x = ans[i][j]\n            if i - k >= 0:\n                x -= ans[i - k][j]\n            if j - k >= 0:\n                x -= ans[i][j - k]\n            if i - k >= 0 and j - k >= 0:\n                x += ans[i - k][j - k]\n            if x == 0:\n                alice.append(largest[i][j])\n            if x == k * k:\n                bob.append(largest[i][j])\n    if len(bob) == 0 and len(alice) == 0:\n        print('Draw')\n    elif len(bob) == 0:\n        print('Alice')\n    elif len(alice) == 0:\n        print('Bob')\n    else:\n        print('Bob') if min(alice) > min(bob) else print('Alice')", "import sys\nimport math\nimport random\nimport heapq\nfrom collections import deque\nfrom math import gcd\ninput = sys.stdin.readline\n\ndef bs(arr, le, ri):\n    l = 0\n    arr.sort()\n    r = len(arr) - 1\n    ans = 10000000\n    while l <= r:\n        m = (l + r) // 2\n        if arr[m] >= le and arr[m] <= ri:\n            ans = arr[m]\n            r = m - 1\n        elif arr[m] < le:\n            l = m + 1\n        else:\n            r = m - 1\n    return ans\nfor __ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    l = [[-1 for j in range(m)] for i in range(n)]\n    ans = [[0 for j in range(m)] for i in range(n)]\n    largest = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n * m):\n        (x, y) = map(int, input().split())\n        l[x - 1][y - 1] = (i % 2, i)\n    for i in range(n):\n        ans[i][0] = l[i][0][0]\n        for j in range(1, m):\n            ans[i][j] = l[i][j][0] + ans[i][j - 1]\n    for j in range(m):\n        for i in range(1, n):\n            ans[i][j] += ans[i - 1][j]\n    for i in range(n):\n        st = deque()\n        for j in range(k):\n            while len(st) > 0 and st[-1][0] < l[i][j][1]:\n                st.pop()\n            st.append((l[i][j][1], j))\n        largest[i][k - 1] = st[0][0]\n        for j in range(k, m):\n            if st[0][1] == j - k:\n                st.popleft()\n            while len(st) > 0 and st[-1][0] < l[i][j][1]:\n                st.pop()\n            st.append((l[i][j][1], j))\n            largest[i][j] = st[0][0]\n    for i in range(k - 1, m):\n        st = deque()\n        for j in range(k):\n            while len(st) > 0 and st[-1][0] < largest[j][i]:\n                st.pop()\n            st.append((largest[j][i], j))\n        largest[k - 1][i] = st[0][0]\n        for j in range(k, n):\n            if st[0][1] == j - k:\n                st.popleft()\n            while len(st) > 0 and st[-1][0] < largest[j][i]:\n                st.pop()\n            st.append((largest[j][i], j))\n            largest[j][i] = st[0][0]\n    alice = []\n    bob = []\n    for i in range(k - 1, n):\n        for j in range(k - 1, m):\n            x = ans[i][j]\n            if i - k >= 0:\n                x -= ans[i - k][j]\n            if j - k >= 0:\n                x -= ans[i][j - k]\n            if i - k >= 0 and j - k >= 0:\n                x += ans[i - k][j - k]\n            if x == 0:\n                alice.append(largest[i][j])\n            if x == k * k:\n                bob.append(largest[i][j])\n    if len(bob) == 0 and len(alice) == 0:\n        print('Draw')\n    elif len(bob) == 0:\n        print('Alice')\n    elif len(alice) == 0:\n        print('Bob')\n    else:\n        print('Bob') if min(alice) > min(bob) else print('Alice')", "import sys\nimport math\nimport random\nimport heapq\nfrom collections import deque\nfrom math import gcd\ninput = sys.stdin.readline\n\ndef bs(arr, le, ri):\n    l = 0\n    arr.sort()\n    r = len(arr) - 1\n    ans = 10000000\n    while l <= r:\n        m = (l + r) // 2\n        if arr[m] >= le and arr[m] <= ri:\n            ans = arr[m]\n            r = m - 1\n        elif arr[m] < le:\n            l = m + 1\n        else:\n            r = m - 1\n    return ans\nfor __ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    l = [[-1 for j in range(m)] for i in range(n)]\n    ans = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n * m):\n        (x, y) = map(int, input().split())\n        l[x - 1][y - 1] = (i % 2, i)\n    for i in range(n):\n        ans[i][0] = l[i][0][0]\n        for j in range(1, m):\n            ans[i][j] = l[i][j][0] + ans[i][j - 1]\n    for j in range(m):\n        for i in range(1, n):\n            ans[i][j] = ans[i][j] + ans[i - 1][j]\n    largest = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        st = deque()\n        for j in range(k):\n            while len(st) > 0 and st[-1][0] < l[i][j][1]:\n                st.pop()\n            st.append((l[i][j][1], j))\n        largest[i][k - 1] = st[0][0]\n        for j in range(k, m):\n            if st[0][1] == j - k:\n                st.popleft()\n            while len(st) > 0 and st[-1][0] < l[i][j][1]:\n                st.pop()\n            st.append((l[i][j][1], j))\n            largest[i][j] = st[0][0]\n    for i in range(k - 1, m):\n        st = deque()\n        for j in range(k):\n            while len(st) > 0 and st[-1][0] < largest[j][i]:\n                st.pop()\n            st.append((largest[j][i], j))\n        largest[k - 1][i] = st[0][0]\n        for j in range(k, n):\n            if st[0][1] == j - k:\n                st.popleft()\n            while len(st) > 0 and st[-1][0] < largest[j][i]:\n                st.pop()\n            st.append((largest[j][i], j))\n            largest[j][i] = st[0][0]\n    alice = []\n    bob = []\n    for i in range(k - 1, n):\n        for j in range(k - 1, m):\n            x = ans[i][j]\n            if i - k >= 0:\n                x -= ans[i - k][j]\n            if j - k >= 0:\n                x -= ans[i][j - k]\n            if i - k >= 0 and j - k >= 0:\n                x += ans[i - k][j - k]\n            if x == 0:\n                alice.append(largest[i][j])\n            if x == k * k:\n                bob.append(largest[i][j])\n    if len(bob) == 0 and len(alice) == 0:\n        print('Draw')\n    elif len(bob) == 0:\n        print('Alice')\n    elif len(alice) == 0:\n        print('Bob')\n    else:\n        print('Bob') if min(alice) > min(bob) else print('Alice')", "import sys\nimport math\nimport random\nimport heapq\nfrom collections import deque\ninput = sys.stdin.readline\n\ndef pow(a, n, m):\n    if n == 0:\n        return 1\n    x = pow(a, n // 2, m)\n    if n % 2 == 0:\n        return x * x % m\n    else:\n        return x * x * a % m\n\ndef gcd(a, b):\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\n\ndef bs(arr, le, ri):\n    l = 0\n    arr.sort()\n    r = len(arr) - 1\n    ans = 10000000\n    while l <= r:\n        m = (l + r) // 2\n        if arr[m] >= le and arr[m] <= ri:\n            ans = arr[m]\n            r = m - 1\n        elif arr[m] < le:\n            l = m + 1\n        else:\n            r = m - 1\n    return ans\nfor __ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    l = [[-1 for j in range(m)] for i in range(n)]\n    for i in range(n * m):\n        (x, y) = map(int, input().split())\n        l[x - 1][y - 1] = (i % 2, i)\n    ans = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        ans[i][0] = l[i][0][0]\n        for j in range(1, m):\n            ans[i][j] = l[i][j][0] + ans[i][j - 1]\n    for j in range(m):\n        for i in range(1, n):\n            ans[i][j] = ans[i][j] + ans[i - 1][j]\n    largest = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        st = deque()\n        for j in range(k):\n            while len(st) > 0 and st[-1][0] < l[i][j][1]:\n                st.pop()\n            st.append((l[i][j][1], j))\n        largest[i][k - 1] = st[0][0]\n        for j in range(k, m):\n            if st[0][1] == j - k:\n                st.popleft()\n            while len(st) > 0 and st[-1][0] < l[i][j][1]:\n                st.pop()\n            st.append((l[i][j][1], j))\n            largest[i][j] = st[0][0]\n    for i in range(k - 1, m):\n        st = deque()\n        for j in range(k):\n            while len(st) > 0 and st[-1][0] < largest[j][i]:\n                st.pop()\n            st.append((largest[j][i], j))\n        largest[k - 1][i] = st[0][0]\n        for j in range(k, n):\n            if st[0][1] == j - k:\n                st.popleft()\n            while len(st) > 0 and st[-1][0] < largest[j][i]:\n                st.pop()\n            st.append((largest[j][i], j))\n            largest[j][i] = st[0][0]\n    alice = []\n    bob = []\n    for i in range(k - 1, n):\n        for j in range(k - 1, m):\n            x = ans[i][j]\n            if i - k >= 0:\n                x -= ans[i - k][j]\n            if j - k >= 0:\n                x -= ans[i][j - k]\n            if i - k >= 0 and j - k >= 0:\n                x += ans[i - k][j - k]\n            if x == 0:\n                alice.append(largest[i][j])\n            if x == k * k:\n                bob.append(largest[i][j])\n    if len(bob) == 0 and len(alice) == 0:\n        print('Draw')\n    elif len(bob) == 0:\n        print('Alice')\n    elif len(alice) == 0:\n        print('Bob')\n    elif min(alice) > min(bob):\n        print('Bob')\n    else:\n        print('Alice')", "import sys\nimport math\nimport random\nimport heapq\nfrom collections import deque\ninput = sys.stdin.readline\n\ndef pow(a, n, m):\n    if n == 0:\n        return 1\n    x = pow(a, n // 2, m)\n    if n % 2 == 0:\n        return x * x % m\n    else:\n        return x * x * a % m\n\ndef gcd(a, b):\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\n\ndef bs(arr, le, ri):\n    l = 0\n    arr.sort()\n    r = len(arr) - 1\n    ans = 10000000\n    while l <= r:\n        m = (l + r) // 2\n        if arr[m] >= le and arr[m] <= ri:\n            ans = arr[m]\n            r = m - 1\n        elif arr[m] < le:\n            l = m + 1\n        else:\n            r = m - 1\n    return ans\nt = int(input())\nwhile t > 0:\n    (n, m, k) = map(int, input().split())\n    l = [[-1 for j in range(m)] for i in range(n)]\n    for i in range(n * m):\n        (x, y) = map(int, input().split())\n        l[x - 1][y - 1] = (i % 2, i)\n    ans = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        ans[i][0] = l[i][0][0]\n        for j in range(1, m):\n            ans[i][j] = l[i][j][0] + ans[i][j - 1]\n    for j in range(m):\n        for i in range(1, n):\n            ans[i][j] = ans[i][j] + ans[i - 1][j]\n    largest = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        st = deque()\n        for j in range(k):\n            while len(st) > 0 and st[-1][0] < l[i][j][1]:\n                st.pop()\n            st.append((l[i][j][1], j))\n        largest[i][k - 1] = st[0][0]\n        for j in range(k, m):\n            if st[0][1] == j - k:\n                st.popleft()\n            while len(st) > 0 and st[-1][0] < l[i][j][1]:\n                st.pop()\n            st.append((l[i][j][1], j))\n            largest[i][j] = st[0][0]\n    for i in range(k - 1, m):\n        st = deque()\n        for j in range(k):\n            while len(st) > 0 and st[-1][0] < largest[j][i]:\n                st.pop()\n            st.append((largest[j][i], j))\n        largest[k - 1][i] = st[0][0]\n        for j in range(k, n):\n            if st[0][1] == j - k:\n                st.popleft()\n            while len(st) > 0 and st[-1][0] < largest[j][i]:\n                st.pop()\n            st.append((largest[j][i], j))\n            largest[j][i] = st[0][0]\n    alice = []\n    bob = []\n    for i in range(k - 1, n):\n        for j in range(k - 1, m):\n            x = ans[i][j]\n            if i - k >= 0:\n                x -= ans[i - k][j]\n            if j - k >= 0:\n                x -= ans[i][j - k]\n            if i - k >= 0 and j - k >= 0:\n                x += ans[i - k][j - k]\n            if x == 0:\n                alice.append(largest[i][j])\n            if x == k * k:\n                bob.append(largest[i][j])\n    if len(bob) == 0 and len(alice) == 0:\n        print('Draw')\n    elif len(bob) == 0:\n        print('Alice')\n    elif len(alice) == 0:\n        print('Bob')\n    elif min(alice) > min(bob):\n        print('Bob')\n    else:\n        print('Alice')\n    t -= 1"]