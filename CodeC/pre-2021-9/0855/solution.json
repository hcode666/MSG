["(m, c, k) = ([0] * (10 ** 5 + 1), [0] * 12000, 0)\n(m[1], c[0]) = (1, 1)\nfor i in range(2, 10 ** 5 + 1):\n    j = i\n    while j > 0:\n        d = j % 10\n        if d == 4:\n            k += 1\n        elif d == 7:\n            k -= 1\n        j //= 10\n    m[i] = m[i - 1] + c[k]\n    if k == 0:\n        m[i] += 1\n    c[k] += 1\nfor _ in range(int(input())):\n    print(m[int(input())])", "(m, c, k) = ([0] * (10 ** 5 + 1), [0] * 12000, 0)\n(m[1], c[0]) = (1, 1)\nfor i in range(2, 10 ** 5 + 1):\n    j = i\n    while j > 0:\n        d = j % 10\n        if d == 4:\n            k += 1\n        elif d == 7:\n            k -= 1\n        j //= 10\n    m[i] = m[i - 1] + c[k]\n    if k == 0:\n        m[i] += 1\n    c[k] += 1\nfor _ in range(int(input())):\n    print(m[int(input())])", "(m, c, k) = ([0] * (10 ** 5 + 1), [0] * 12000, 0)\n(m[1], c[0]) = (1, 1)\nfor i in range(2, 10 ** 5 + 1):\n    j = i\n    while j > 0:\n        d = j % 10\n        if d == 4:\n            k += 1\n        elif d == 7:\n            k -= 1\n        j //= 10\n    m[i] = m[i - 1] + c[k]\n    if k == 0:\n        m[i] += 1\n    c[k] += 1\nfor _ in range(int(input())):\n    print(m[int(input())])", "(m, c, k) = ([0] * (10 ** 5 + 1), [0] * 12000, 0)\n(m[1], c[0]) = (1, 1)\nfor i in range(2, 10 ** 5 + 1):\n    j = i\n    while j > 0:\n        d = j % 10\n        if d == 4:\n            k += 1\n        elif d == 7:\n            k -= 1\n        j //= 10\n    m[i] = m[i - 1] + c[k]\n    if k == 0:\n        m[i] += 1\n    c[k] += 1\nfor _ in range(int(input())):\n    print(m[int(input())])", "def precompute():\n    n = 100000\n    d = {0: 1}\n    s4 = [0]\n    s7 = [0]\n    for i in range(1, n + 1):\n        v = str(i)\n        s4.append(s4[-1] + v.count('4'))\n        s7.append(s7[-1] + v.count('7'))\n    s4_7 = [0]\n    for i in range(1, n + 1):\n        s4_7.append(s4[i] - s7[i])\n    ans = [0]\n    for i in range(1, n + 1):\n        v = s4_7[i]\n        if v in d:\n            ans.append(ans[-1] + d[v])\n            d[v] += 1\n        else:\n            ans.append(ans[-1])\n            d[v] = 1\n    return ans\nans = precompute()\nfor _ in range(int(input())):\n    print(ans[int(input())])", "(m, c, k) = ([0] * (10 ** 5 + 1), [0] * 12000, 0)\n(m[1], c[0]) = (1, 1)\nfor i in range(2, 10 ** 5 + 1):\n    j = i\n    while j > 0:\n        d = j % 10\n        if d == 4:\n            k += 1\n        elif d == 7:\n            k -= 1\n        j //= 10\n    m[i] = m[i - 1] + c[k]\n    if k == 0:\n        m[i] += 1\n    c[k] += 1\nfor _ in range(int(input())):\n    print(m[int(input())])", "m = [0] * (10 ** 5 + 1)\nc = [0] * 12000\nk = 0\nm[1] = 1\nc[0] = 1\nfor i in range(2, 10 ** 5 + 1):\n    j = i\n    while j > 0:\n        d = j % 10\n        if d == 4:\n            k += 1\n        elif d == 7:\n            k -= 1\n        j //= 10\n    m[i] = m[i - 1] + c[k]\n    if k == 0:\n        m[i] += 1\n    c[k] += 1\nfor _ in range(int(input())):\n    n = int(input())\n    print(m[n])", "from functools import lru_cache\n\n@lru_cache(None)\ndef dp(n, k):\n    if n < k:\n        return 0\n    if n == k:\n        return 1\n    base = 10 ** (len(str(n)) - 1)\n    upper = (k + 1) * base - 1\n    ans = n >= k * base and min(n - k * base + 1, base)\n    return ans + dp(base - 1, k) * (n // base) + dp(n % base, k)\ncnt = {0: 1}\nmemo = [0]\nfor i in range(1, 100001):\n    diff = dp(i, 4) - dp(i, 7)\n    memo.append(memo[-1] + cnt.get(diff, 0))\n    cnt[diff] = cnt.get(diff, 0) + 1\nfor i in range(int(input())):\n    print(memo[int(input())])"]