["t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    r = '0'\n    l = []\n    for j in range(n):\n        x = input()\n        for k in range(m):\n            if x[k] == '1':\n                r += str(k)\n        if r != '0':\n            l.append(int(r))\n        r = '0'\n    print('YES' if max(l) - min(l) == 0 else 'NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    trial = '0'\n    lst = []\n    for _ in range(n):\n        x = input()\n        for i in range(m):\n            if x[i] == '1':\n                trial += str(i)\n        if trial != '0':\n            lst.append(int(trial))\n        trial = '0'\n    if max(lst) - min(lst) == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        temp = str(input())\n        l.append(temp)\n    output = []\n    for i in range(n):\n        for j in range(m):\n            if '1' not in l[i]:\n                break\n            if l[i][j] == '1':\n                start = j\n                j = j + 1\n                count = 1\n                try:\n                    while l[i][j] == '1':\n                        count = count + 1\n                        j = j + 1\n                except IndexError:\n                    pass\n                output.append((start, count))\n                break\n    output = set(output)\n    if len(output) == 1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(input())\n    left = set()\n    right = set()\n    cols = []\n    for i in range(n):\n        ll = l[i].find('1')\n        rr = l[i].rfind('1')\n        if ll != -1:\n            left.add(ll)\n            right.add(rr)\n            cols.append(i)\n    if len(left) > 1 or len(right) > 1:\n        print('NO')\n    else:\n        m = list(left)[0]\n        M = list(right)[0]\n        cnt = 0\n        for i in range(cols[0], cols[-1] + 1):\n            cnt += l[i][m:M + 1].count('0')\n        if cnt == 0:\n            print('YES')\n        else:\n            print('NO')", "def rect(arr, n=0, m=0):\n    min_row = n\n    min_col = m\n    max_row = max_col = -1\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j]:\n                min_row = min(min_row, i)\n                min_col = min(min_col, j)\n                max_row = max(max_row, i)\n                max_col = max(max_col, j)\n    for i in range(min_row, max_row + 1):\n        for j in range(min_col, max_col + 1):\n            if not arr[i][j]:\n                return 'NO'\n    return 'YES'\nT = int(input())\nfor tc in range(T):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        row = [int(i) for i in input()]\n        l.append(row)\n    print(rect(l, n, m))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    mat = []\n    for i in range(n):\n        mat.append(input())\n    h = []\n    k = []\n    for i in range(n):\n        p = mat[i].find('1')\n        h.append(p)\n        y = mat[i].rfind('1')\n        k.append(y)\n    c = 0\n    x = abs(max(k) - max(h)) + 1\n    for i in range(len(h)):\n        if k[i] != -1 and h[i] != -1:\n            if x * '1' in mat[i]:\n                pass\n            else:\n                c = 1\n    for i in range(len(h)):\n        if h[i] == max(h) and k[i] == max(k):\n            pass\n        elif h[i] == -1 and k[i] == -1:\n            pass\n        else:\n            c = 1\n            break\n    if c == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    trial = '0'\n    lst = []\n    for _ in range(n):\n        x = input()\n        for i in range(m):\n            if x[i] == '1':\n                trial += str(i)\n        if trial != '0':\n            lst.append(int(trial))\n        trial = '0'\n    if max(lst) - min(lst) == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = tuple(map(int, input().split()))\n    value = 0\n    ans = 'YES'\n    for i in range(n):\n        x = int(input(), 2)\n        if x != 0:\n            if value != 0:\n                if x != value:\n                    ans = 'NO'\n            else:\n                value = x\n    print(ans)", "from collections import defaultdict\nt = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    l = []\n    d = defaultdict(list)\n    for i in range(n):\n        x = list(map(int, input()))\n        for j in range(m):\n            if x[j] == 1:\n                d[i].append(j)\n    l = list(d.keys())\n    k = l[0]\n    v = d[k]\n    flag = 1\n    for i in d.keys():\n        if d[i] != v or i != k:\n            flag = 0\n            break\n        k += 1\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "import re\nT = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    A = []\n    for i in range(N):\n        A.append(input())\n    A = set(A)\n    regex = re.compile('^0*$')\n    f = [i for i in A if not regex.match(i)]\n    if len(f) == 1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    mat = []\n    for _ in range(r):\n        mat.append(list(input()))\n    while True:\n        if all(list(map(lambda ele: ele == '0', mat[r - 1]))):\n            r -= 1\n        else:\n            break\n    (fi, fj, lj) = (-1, -1, -1)\n    fl = True\n    for i in range(r):\n        for j in range(c):\n            if i == fi and mat[i][j] == '1':\n                lj = j\n            if fi == -1 and mat[i][j] == '1':\n                (fi, fj) = (i, j)\n                lj = fj\n            elif j >= fj and j <= lj:\n                if mat[i][j] != '1':\n                    fl = False\n                    break\n            elif mat[i][j] == '1':\n                fl = False\n                break\n    print('YES' if fl else 'NO')", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ninp = lambda : list(map(int, sys.stdin.readline().rstrip('\\r\\n').split()))\nmod = 10 ** 9 + 7\nMod = 998244353\nINF = float('inf')\nfor _ in range(int(input())):\n    (n, m) = inp()\n    mat = []\n    for _i in range(n):\n        mat.append([int(s) for s in list(input())])\n    max_x = -1\n    min_x = n + 1\n    max_y = -1\n    min_y = m + 1\n    cnt1 = 0\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j] == 1:\n                max_x = max(max_x, i)\n                min_x = min(min_x, i)\n                max_y = max(max_y, j)\n                min_y = min(min_y, j)\n    cnt2 = 0\n    flag = True\n    for i in range(min_x, max_x + 1):\n        for j in range(min_y, max_y + 1):\n            if mat[i][j] == 1:\n                pass\n            else:\n                flag = False\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    flag = 0\n    arr = []\n    for i in range(n):\n        j = list(input())\n        arr.append(j)\n    m1 = m2 = 501\n    m3 = m4 = -1\n    ct = 0\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] == '1':\n                m1 = min(m1, i)\n                m2 = min(m2, j)\n                m3 = max(m3, i)\n                m4 = max(m4, j)\n                ct += 1\n    for i in range(m1, m3 + 1):\n        for j in range(m2, m4 + 1):\n            if arr[i][j] == '0':\n                flag = 1\n                break\n            else:\n                ct -= 1\n        if flag:\n            break\n    if flag or ct:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mat = []\n    for i in range(n):\n        temp = [int(x) for x in input()]\n        mat.append(temp)\n    col_min = m + 1\n    col_max = -1\n    row_min = n + 1\n    row_max = -1\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j] == 1:\n                row_min = min(row_min, i)\n                row_max = max(row_max, i)\n                col_min = min(col_min, j)\n                col_max = max(col_max, j)\n    flag = 0\n    for i in range(row_min, row_max + 1):\n        if flag == 1:\n            break\n        for j in range(col_min, col_max + 1):\n            if mat[i][j] == 0:\n                print('NO')\n                flag = 1\n                break\n    if flag == 0:\n        print('YES')", "def main():\n    import sys\n    input = sys.stdin.readline\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        l = []\n        for _ in range(n):\n            el = '0'\n            r = input()\n            for j in range(m):\n                if r[j] == '1':\n                    el += str(j + 1)\n            if el != '0':\n                l.append(int(el))\n        if max(l) == min(l):\n            print('YES')\n        else:\n            print('NO')\nmain()", "t = int(input())\nlst = []\ntrial = '0'\nfor i in range(t):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    for o in range(n):\n        grid_num = input()\n        for p in range(m):\n            if grid_num[p] == '1':\n                trial += str(p)\n        if trial != '0':\n            lst.append(int(trial))\n        trial = '0'\n    if max(lst) - min(lst) == 0:\n        print('YES')\n    else:\n        print('NO')\n    lst = []", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef solve():\n    (n, m) = mp()\n    x = [input() for i in range(n)]\n    l = [int(i) for i in x if int(i)]\n    pr('YES' if min(l) == max(l) else 'NO')\nfor _ in range(inp()):\n    solve()", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef solve():\n    (n, m) = mp()\n    l = [st() for i in range(n)]\n    (F, L) = (set(), set())\n    (start, end) = (-1, -1)\n    for i in range(n):\n        (first, last) = (-1, -1)\n        for j in range(m):\n            if l[i][j] == '1':\n                if first == -1:\n                    first = j\n                if start == -1:\n                    start = i\n                end = i\n                last = j\n        if first != -1:\n            F.add(first)\n            L.add(last)\n        if len(F) > 1 or len(L) > 1:\n            pr('NO')\n            return\n    (a, b) = (list(F)[0], list(L)[0])\n    for i in range(a, b + 1):\n        for j in range(start, end + 1):\n            if l[j][i] == '0':\n                pr('NO')\n                return\n    pr('YES')\nfor _ in range(inp()):\n    solve()", "t = int(input())\nfor case in range(t):\n    (n, m) = [int(i) for i in input().split()]\n    a = [[int(i) for i in input()] for j in range(n)]\n    x1 = n + 1\n    y1 = m + 1\n    x2 = y2 = -1\n    c = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                c += 1\n                if i <= x1 and j <= y1:\n                    x1 = i\n                    y1 = j\n                if i >= x2 and j >= y2:\n                    x2 = i\n                    y2 = j\n    if (x2 - x1 + 1) * (y2 - y1 + 1) == c:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t:\n    t -= 1\n    (N, M) = list(map(int, input().strip().split()))\n    ans = []\n    for row in range(N):\n        rec = '0'\n        grid = input().strip()\n        for idx in range(len(grid)):\n            if grid[idx] == '1':\n                rec += str(idx)\n        if rec != '0':\n            ans.append(int(rec))\n    if max(ans) - min(ans) == 0:\n        print('YES')\n    else:\n        print('NO')", "from math import *\nfrom statistics import mode\nfrom functools import reduce\nfrom sys import stdin\nimport heapq\nfrom collections import deque\n\ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n\ndef graph(vertex):\n    return [[] for i in range(vertex + 1)]\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef most_common(List):\n    return mode(List)\n\ndef factors(n):\n    return list(set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0))))\n\ndef prime_factors(n):\n    (i, factors) = (2, [])\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef prefixSum(arr):\n    for i in range(1, len(arr)):\n        arr[i] = arr[i] + arr[i - 1]\n    return arr\n\ndef kadane(a, size):\n    max_so_far = curr_max = a[0]\n    for i in range(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, ceil(sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\ndef isPowerOf2(x):\n    return x and (not x & x - 1)\n\ndef isPerfectSquare(n):\n    return pow(floor(sqrt(n)), 2) == n\n\ndef binarySearch(arr, l, r, x):\n    while l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\nfor t in range(int(input())):\n    (N, M) = map(int, input().split())\n    ast = None\n    ans = None\n    for i in range(N):\n        s = input()\n        if int(s):\n            if ast is None:\n                ast = s\n                ans = 'YES'\n            elif s != ast:\n                ans = 'NO'\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    list1 = []\n    for i in range(n):\n        a = int(input())\n        if a > 0:\n            list1.append(a)\n    if max(list1) - min(list1) == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    c = 0\n    for i in range(n):\n        a.append(input())\n    minn = m - 1\n    maxx = 0\n    for i in range(0, n):\n        for j in range(0, m):\n            if a[i][j] == '1':\n                c += 1\n                minn = min(j, minn)\n                maxx = max(maxx, j)\n    col = maxx - minn + 1\n    minn = n - 1\n    maxx = 0\n    for i in range(0, m):\n        for j in range(0, n):\n            if a[j][i] == '1':\n                minn = min(j, minn)\n                maxx = max(j, maxx)\n    row = maxx - minn + 1\n    if c == row * col:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(input())\n    minn = m - 1\n    maxx = 0\n    c = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '1':\n                c += 1\n                minn = min(minn, j)\n                maxx = max(maxx, j)\n    col = maxx - minn + 1\n    minn = n - 1\n    maxx = 0\n    for i in range(m):\n        for j in range(n):\n            if a[j][i] == '1':\n                minn = min(minn, j)\n                maxx = max(maxx, j)\n    row = maxx - minn + 1\n    if c == row * col:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nlst = []\ntrial = '0'\nfor i in range(t):\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    for o in range(n):\n        grid_num = input()\n        for p in range(m):\n            if grid_num[p] == '1':\n                trial += str(p)\n        if trial != '0':\n            lst.append(int(trial))\n        trial = '0'\n    if max(lst) - min(lst) == 0:\n        print('YES')\n    else:\n        print('NO')\n    lst = []", "try:\n    t = int(input())\n    lst = []\n    trial = '0'\n    for i in range(t):\n        (n, m) = input().split()\n        n = int(n)\n        m = int(m)\n        for o in range(n):\n            grid_num = input()\n            for p in range(m):\n                if grid_num[p] == '1':\n                    trial += str(p)\n            if trial != '0':\n                lst.append(int(trial))\n            trial = '0'\n        if max(lst) - min(lst) == 0:\n            print('YES')\n        else:\n            print('NO')\n        lst = []\nexcept:\n    pass", "from math import *\nfor u in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    f = 0\n    for i in range(n):\n        l.append(input())\n    (a, b, c, d) = (-inf, inf, -inf, inf)\n    for i in range(n):\n        for j in range(m):\n            if l[i][j] == '1':\n                b = min(b, i)\n                a = max(b, i)\n                d = min(d, j)\n                c = max(c, j)\n    for i in range(b, a + 1):\n        for j in range(d, c + 1):\n            if l[i][j] == '0':\n                f = 1\n                break\n    if f == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t:\n    t -= 1\n    (N, M) = list(map(int, input().strip().split()))\n    ans = []\n    for row in range(N):\n        rec = '0'\n        grid = input().strip()\n        for idx in range(len(grid)):\n            if grid[idx] == '1':\n                rec += str(idx)\n        if rec != '0':\n            ans.append(int(rec))\n    if max(ans) - min(ans) == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    a = []\n    cmn = m + 1\n    cmx = -1\n    rmn = n + 1\n    rmx = -1\n    for i in range(n):\n        a.append(input())\n        for j in range(m):\n            if a[i][j] == '1':\n                if cmn > j:\n                    cmn = j\n                if cmx < j:\n                    cmx = j\n                if rmn > i:\n                    rmn = i\n                if rmx < i:\n                    rmx = i\n    b = False\n    for i in range(rmn, rmx + 1):\n        for j in range(cmn, cmx + 1):\n            if a[i][j] != '1':\n                b = True\n                break\n        if b:\n            break\n    if b:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\ntest = '0'\nlst = []\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    for o in range(n):\n        line = input()\n        for p in range(m):\n            if line[p] == '1':\n                test += str(p)\n        if test != '0':\n            lst.append(int(test))\n        test = '0'\n    if max(lst) - min(lst) == 0:\n        print('YES')\n    else:\n        print('NO')\n    lst = []", "t = int(input())\no = []\nwhile t > 0:\n    (n, m) = input().split()\n    n = int(n)\n    n1 = n\n    m = int(m)\n    l = []\n    t += -1\n    while n > 0:\n        n += -1\n        s = input()\n        s = s[0:m]\n        l.append(s)\n    i = 0\n    q = True\n    j2 = m - 1\n    while i < n1 and q == True:\n        j = 0\n        while j < m and q:\n            if l[i][j] == '1':\n                q = False\n                j2 = j\n                break\n            else:\n                j += 1\n        if q:\n            i += 1\n        else:\n            break\n    p = True\n    a = n1 - 1\n    b1 = 0\n    while a >= 0 and p == True:\n        b = m - 1\n        while b >= 0:\n            if l[a][b] == '1':\n                b1 = b\n                p = False\n                break\n            else:\n                b += -1\n        if p:\n            a += -1\n        else:\n            break\n    p = 0\n    c = True\n    while p < n1 and c:\n        q = 0\n        while q < m and c:\n            if p < i:\n                if l[p][q] == '1':\n                    c = False\n                    break\n            elif i <= p <= a and (q < j2 or q > b1):\n                if l[p][q] == '1':\n                    c = False\n                    break\n            elif i <= p <= a and j2 <= q <= b1:\n                if l[p][q] == '0':\n                    c = False\n                    break\n            elif p > a:\n                if l[p][q] == '1':\n                    c = False\n                    break\n            q += 1\n        if c:\n            p += 1\n        else:\n            break\n    if c:\n        o.append('YES')\n    if not c:\n        o.append('NO')\nfor x in o:\n    print(x)", "try:\n    t = int(input())\n    lst = []\n    trial = '0'\n    for i in range(t):\n        (n, m) = input().split()\n        n = int(n)\n        m = int(m)\n        for o in range(n):\n            grid_num = input()\n            for p in range(m):\n                if grid_num[p] == '1':\n                    trial += str(p)\n            if trial != '0':\n                lst.append(int(trial))\n            trial = '0'\n        if max(lst) - min(lst) == 0:\n            print('YES')\n        else:\n            print('NO')\n        lst = []\nexcept:\n    pass", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    mat = []\n    ones = []\n    for i in range(n):\n        r = str(input())\n        mat.append(r)\n        if '1' in r:\n            ones.append(i)\n    no = False\n    for i in range(1, len(ones)):\n        if ones[i] - ones[i - 1] > 1:\n            no = True\n            break\n    if not no:\n        ones = {mat[i] for i in ones}\n        if len(ones) != 1:\n            no = True\n    if no:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor case in range(t):\n    (n, m) = [int(i) for i in input().split()]\n    a = [[int(i) for i in input()] for j in range(n)]\n    x1 = n + 1\n    y1 = m + 1\n    x2 = y2 = -1\n    c = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                c += 1\n                if i <= x1 and j <= y1:\n                    x1 = i\n                    y1 = j\n                if i >= x2 and j >= y2:\n                    x2 = i\n                    y2 = j\n    if (x2 - x1 + 1) * (y2 - y1 + 1) == c:\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a += [input()]\n    (u, d, l, r) = (-1, -1, -1, -1)\n    res = 'YES'\n    for i in range(n):\n        if '1' in a[i]:\n            d = i\n            if u == -1:\n                u = i\n    if u == -1:\n        print(res)\n    else:\n        for i in range(m):\n            if a[u][i] == '1':\n                if l == -1:\n                    l = i\n                r = i\n        s = '0' * l + '1' * (r - l + 1) + '0' * (m - r - 1)\n        for i in range(u, d + 1):\n            if a[i] != s:\n                res = 'NO'\n                break\n        print(res)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    (minx, miny, maxx, maxy) = (1000, 1000, -1000, -1000)\n    for i in range(n):\n        s = input()\n        a.append(s)\n        for j in range(m):\n            if s[j] == '1':\n                if j < minx:\n                    minx = j\n                if i < miny:\n                    miny = i\n                if j > maxx:\n                    maxx = j\n                if i > maxy:\n                    maxy = i\n    flag = True\n    for i in range(miny, maxy + 1):\n        for j in range(minx, maxx + 1):\n            if a[i][j] == '0':\n                flag = False\n                break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    (minx, miny, maxx, maxy) = (1000, 1000, -1000, -1000)\n    for i in range(n):\n        s = input()\n        a.append(s)\n        for j in range(m):\n            if s[j] == '1':\n                if j < minx:\n                    minx = j\n                if i < miny:\n                    miny = i\n                if j > maxx:\n                    maxx = j\n                if i > maxy:\n                    maxy = i\n    flag = True\n    for i in range(miny, maxy + 1):\n        for j in range(minx, maxx + 1):\n            if a[i][j] == '0':\n                flag = False\n                break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    a = [int(x) for x in input().split()]\n    n = a[0]\n    m = a[1]\n    mat = []\n    c = 0\n    minX = float('inf')\n    maxX = float('-inf')\n    minY = float('inf')\n    maxY = float('-inf')\n    for j in range(n):\n        mat.append(list(input()))\n    for j in range(n):\n        for k in range(m):\n            if mat[j][k] == '1':\n                c += 1\n                minX = min(minX, j)\n                maxX = max(maxX, j)\n                minY = min(minY, k)\n                maxY = max(maxY, k)\n    if c == (maxX - minX + 1) * (maxY - minY + 1):\n        print('YES')\n    else:\n        print('NO')", "def maxHist(row):\n    res = []\n    top = maxx = area = i = 0\n    while i < len(row):\n        if len(res) == 0 or row[res[-1]] <= row[i]:\n            res.append(i)\n            i += 1\n        else:\n            top = row[res.pop()]\n            area = top * i\n            if len(res):\n                area = top * (i - res[-1] - 1)\n            maxx = max(area, maxx)\n    while len(res):\n        top = row[res.pop()]\n        area = top * i\n        if len(res):\n            area = top * (i - res[-1] - 1)\n        maxx = max(area, maxx)\n    return maxx\n\ndef check(mat):\n    res = maxHist(mat[0])\n    for i in range(1, len(mat)):\n        for j in range(len(mat[i])):\n            if mat[i][j]:\n                mat[i][j] += mat[i - 1][j]\n        res = max(res, maxHist(mat[i]))\n    return res\nfor _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    mat = []\n    count1 = 0\n    for i in range(r):\n        a = []\n        for j in input():\n            if j == '1':\n                count1 += 1\n            a.append(int(j))\n        mat.append(a)\n    res = check(mat)\n    if res == count1:\n        print('YES')\n    else:\n        print('NO')", "n = 3\nm = 3\na = ['011', '011', '000']\nt = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    a = []\n    z = '0' * m\n    for i in range(n):\n        a.append(input())\n    st = False\n    ed = False\n    ans = 'YES'\n    for i in range(n):\n        r = a[i]\n        if ed and r != z:\n            ans = 'NO'\n            break\n        if st:\n            if r == z:\n                ed = True\n            if ed == False and r != pat:\n                ans = 'NO'\n                break\n        if st is False and r != z:\n            st = True\n            pat = r\n    if not st:\n        ans = 'NO'\n    print(ans)", "import re\nT = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    A = []\n    for i in range(N):\n        A.append(input())\n    s = max(A)\n    A = set(A)\n    regex = re.compile('^0*$')\n    f = [i for i in A if not regex.match(i)]\n    if len(f) == 1:\n        print('YES')\n    else:\n        print('NO')", "try:\n    t = int(input())\n    lst = []\n    trial = '0'\n    for i in range(t):\n        (n, m) = input().split()\n        n = int(n)\n        m = int(m)\n        for o in range(n):\n            grid_num = input()\n            for p in range(m):\n                if grid_num[p] == '1':\n                    trial += str(p)\n            if trial != '0':\n                lst.append(int(trial))\n            trial = '0'\n        if max(lst) - min(lst) == 0:\n            print('YES')\n        else:\n            print('NO')\n        lst = []\nexcept:\n    pass", "for z in range(int(input())):\n    (r, c) = map(int, input().split())\n    count = 0\n    f = 0\n    m = []\n    for i in range(r):\n        l = input().strip()\n        for j in range(c):\n            if l[j] == '1':\n                count += 1\n                if f == 0:\n                    (sr, sc) = (i, j)\n                    f += 1\n                else:\n                    (er, ec) = (i, j)\n        m.append(l)\n    if count == 1:\n        print('YES')\n    elif er < sr or ec < sc:\n        print('NO')\n    else:\n        f = 1\n        for i in range(r):\n            for j in range(c):\n                if i >= sr and i <= er and (j >= sc) and (j <= ec):\n                    if m[i][j] == '0':\n                        print('NO')\n                        f = 0\n                        break\n                elif m[i][j] == '1':\n                    f = 0\n                    print('NO')\n                    break\n            if f == 0:\n                break\n        else:\n            print('YES')", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    a = []\n    a1 = [0] * n\n    colMx = -1\n    colMn = n + 1\n    rowMn = m + 1\n    rowMx = -1\n    for i in range(n):\n        a.append(input())\n        for j in range(m):\n            if a[i][j] == '1':\n                if rowMx < j:\n                    rowMx = j\n                if rowMn > j:\n                    rowMn = j\n                if colMx < i:\n                    colMx = i\n                if colMn > i:\n                    colMn = i\n    flag = False\n    for i in range(colMn, colMx + 1):\n        for j in range(rowMn, rowMx + 1):\n            if a[i][j] != '1':\n                flag = True\n                break\n        if flag:\n            break\n    if flag:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor t in range(t):\n    (n, m) = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(input())\n    a = 0\n    b = 0\n    m1 = 0\n    m2 = 0\n    d = 0\n    for i in range(n):\n        if d == 0:\n            if m1 == 0:\n                for j in range(m):\n                    if matrix[i][j] == '1':\n                        m1 = 1\n                    if m2 == 0:\n                        if matrix[i][j] == '1':\n                            m2 = 1\n                            a = j\n                    elif m2 == 1:\n                        if matrix[i][j] == '0':\n                            b = j - 1\n                            m2 = 2\n                    elif matrix[i][j] == '1':\n                        d = 1\n                        m2 = 2\n                        break\n                if m1 == 1:\n                    if matrix[i][-1] == '1':\n                        b = m - 1\n            else:\n                m2 = 0\n                for j in range(m):\n                    if matrix[i][j] == '1':\n                        m2 = 1\n                if m2 == 1:\n                    for j in range(a):\n                        if matrix[i][j] == '1':\n                            d = 1\n                            break\n                    for j in range(a, b + 1):\n                        if matrix[i][j] == '0':\n                            d = 1\n                            break\n                    for j in range(b + 1, m):\n                        if matrix[i][j] == '1':\n                            d = 1\n                            break\n    if d == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mat = []\n    flag = True\n    for i in range(n):\n        mat.append(input())\n    for i in range(1, n):\n        for j in range(1, m):\n            if mat[i][j] == '1':\n                if mat[i - 1][j - 1] == '0' and (mat[i - 1][j] == '1' and mat[i][j - 1] == '1'):\n                    print('NO')\n                    flag = False\n                    break\n                if mat[i - 1][j - 1] == '1' and (mat[i - 1][j] == '0' or mat[i][j - 1] == '0'):\n                    print('NO')\n                    flag = False\n                    break\n            else:\n                if mat[i - 1][j - 1] == '0' and (mat[i - 1][j] == '1' and mat[i][j - 1] == '1'):\n                    print('NO')\n                    flag = False\n                    break\n                if mat[i - 1][j - 1] == '1' and (mat[i - 1][j] == '1' and mat[i][j - 1] == '1'):\n                    print('NO')\n                    flag = False\n                    break\n        if not flag:\n            break\n    if flag:\n        print('YES')", "t = int(input())\nfor i in range(0, t):\n    (n, m) = map(int, input().split())\n    (start, stop) = (0, 0)\n    c = 0\n    rowise = 0\n    condition = True\n    for j in range(0, n):\n        s = input()\n        if condition == True:\n            if '1' in s and rowise == 0:\n                rowise = 1\n                for k in range(0, m):\n                    if s[k] == '1' and c == 0:\n                        c = 1\n                        start = k\n                    elif s[k] == '0' and c == 1:\n                        c = 2\n                        stop = k - 1\n                    elif s[k] == '1' and c == 2:\n                        condition = False\n                        break\n                if stop == 0:\n                    stop = m - 1\n            elif '1' not in s and rowise == 1:\n                rowise = 2\n            elif '1' in s and rowise == 2:\n                condition = False\n                break\n            elif '1' in s and rowise == 1:\n                for k in range(0, m):\n                    if (k < start or k > stop) and s[k] != '0':\n                        condition = False\n                    elif (k >= start and k <= stop) and s[k] != '1':\n                        condition = False\n    if condition == True:\n        print('YES')\n    else:\n        print('NO')", "try:\n    t = int(input())\n    lst = []\n    trial = '0'\n    for i in range(t):\n        (n, m) = input().split()\n        n = int(n)\n        m = int(m)\n        for o in range(n):\n            grid_num = input()\n            for p in range(m):\n                if grid_num[p] == '1':\n                    trial += str(p)\n            if trial != '0':\n                lst.append(int(trial))\n            trial = '0'\n        if max(lst) - min(lst) == 0:\n            print('YES')\n        else:\n            print('NO')\n        lst = []\nexcept:\n    pass", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(input())\n    minn = m - 1\n    maxx = 0\n    c = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '1':\n                c += 1\n                minn = min(minn, j)\n                maxx = max(maxx, j)\n    col = maxx - minn + 1\n    minn = n - 1\n    maxx = 0\n    for i in range(m):\n        for j in range(n):\n            if a[j][i] == '1':\n                minn = min(minn, j)\n                maxx = max(maxx, j)\n    row = maxx - minn + 1\n    if c == row * col:\n        print('YES')\n    else:\n        print('NO')", "def ii():\n    return int(input().strip())\n\ndef si():\n    return input().strip()\n\ndef mi():\n    return map(int, input().strip().split())\n\ndef li():\n    return list(mi())\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n\ndef bo(i):\n    return ord(i) - ord('a')\nt = ii()\nfor _t in range(t):\n    (n, m) = li()\n    dx = dict()\n    dy = dict()\n    mat = list()\n    for i in range(n):\n        mat.append([int(x) for x in si()])\n    for i in range(n):\n        tmp = mat[i]\n        for j in range(m):\n            if tmp[j] == 1:\n                if i in dx:\n                    dx[i].append(j)\n                else:\n                    dx[i] = [j]\n                if j in dy:\n                    dy[j].append(i)\n                else:\n                    dy[j] = [i]\n    lt = 0\n    lb = 0\n    rt = 0\n    rb = 0\n    tl = 0\n    bl = 0\n    tr = 0\n    br = 0\n    for i in range(m):\n        if i in dy:\n            lt = (dy[i][0], i)\n            lb = (dy[i][-1], i)\n            break\n    for i in range(m - 1, -1, -1):\n        if i in dy:\n            rt = (dy[i][0], i)\n            rb = (dy[i][-1], i)\n            break\n    for i in range(n):\n        if i in dx:\n            tl = (i, dx[i][0])\n            tr = (i, dx[i][-1])\n            break\n    for i in range(n - 1, -1, -1):\n        if i in dx:\n            bl = (i, dx[i][0])\n            br = (i, dx[i][-1])\n            break\n    if (lt[0] == tl[0] and lt[1] == tl[1]) and (lb[0] == bl[0] and lb[1] == bl[1]) and (rt[0] == tr[0] and rt[1] == tr[1]) and (rb[0] == br[0] and rb[1] == br[1]):\n        ans = 1\n        for i in range(tl[0], lb[0] + 1):\n            for j in range(tl[1], tr[1] + 1):\n                if mat[i][j] == 0:\n                    ans = 0\n        if ans:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(input())\n    minn = m - 1\n    maxx = 0\n    c = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '1':\n                c += 1\n                minn = min(minn, j)\n                maxx = max(maxx, j)\n    col = maxx - minn + 1\n    minn = n - 1\n    maxx = 0\n    for i in range(m):\n        for j in range(n):\n            if a[j][i] == '1':\n                minn = min(minn, j)\n                maxx = max(maxx, j)\n    row = maxx - minn + 1\n    if c == row * col:\n        print('YES')\n    else:\n        print('NO')", "def rectangle(grid):\n    if not grid or not grid[0]:\n        return 'NO'\n    m = len(grid)\n    n = len(grid[0])\n    (ul, ur) = ((-1, -1), (-1, -1))\n    for i in range(m):\n        j = 0\n        while j < n:\n            if grid[i][j] == 1 and ul == (-1, -1):\n                ul = (i, j)\n                ll = (i, j)\n                while j < n and grid[i][j] == 1:\n                    ur = (i, j)\n                    lr = (i, j)\n                    j += 1\n            if j < n and grid[i][j] == 1 and (not ul[1] <= j <= ur[1]):\n                return 'NO'\n            if j < n and grid[i][j] == 1 and (j == ul[1]):\n                ll = (i, j)\n                while j < n and grid[i][j] == 1:\n                    j += 1\n                lr = (i, j - 1)\n                if ur[1] != lr[1]:\n                    return 'NO'\n            if j < n and grid[i][j] == 1 and (j < ul[1] or j > ur[1] or i < ul[0] or (i > ll[0])):\n                return 'NO'\n            j += 1\n    return 'YES'\nt = int(input())\nres = []\nwhile t:\n    (n, m) = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        row = [int(r) for r in input()]\n        grid.append(row)\n    t -= 1\n    res.append(rectangle(grid))\nfor r in res:\n    print(r)", "t = int(input())\nfor j in range(t):\n    (n, m) = map(int, input().split())\n    S = []\n    zeros = '0' * m\n    for k in range(n):\n        s = str(input())\n        S.append(s)\n    SS = list(set(S))\n    if len(SS) > 2:\n        print('NO')\n    elif len(SS) == 2:\n        if zeros not in S:\n            print('NO')\n        else:\n            SSS = SS.copy()\n            SSS.remove(zeros)\n            a = SSS[0]\n            indices = [i for (i, x) in enumerate(S) if x == a]\n            if max(indices) - min(indices) + 1 == len(indices):\n                print('YES')\n            else:\n                print('NO')\n    else:\n        a = SS[0]\n        if a == zeros:\n            print('NO')\n        else:\n            print('YES')", "import sys, collections, operator\nfrom functools import cmp_to_key\nfrom collections import OrderedDict\nfrom itertools import permutations\nfrom math import sqrt\n\ndef get_inp():\n    return sys.stdin.readline().strip()\n\ndef get_inps():\n    return sys.stdin.readline().strip().split()\n\ndef println(str):\n    return sys.stdout.write(str + '\\n')\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef power(a, b):\n    res = 1\n    while b > 0:\n        if b & 1 == 1:\n            res = res * a\n        b = b >> 1\n        a = a * a\n    return res\ntry:\n    t = int(get_inp())\n    while t > 0:\n        (n, m) = map(int, get_inps())\n        rec = [[i for i in get_inp()] for j in range(n)]\n        cones = 0\n        for i in range(n):\n            for j in range(m):\n                if rec[i][j] == '1':\n                    cones += 1\n        for i in range(n):\n            f = False\n            for j in range(m):\n                if rec[i][j] == '1':\n                    id1 = j\n                    id2 = 0\n                    idx = i\n                    temp = j\n                    while temp < m and rec[i][temp] == '1':\n                        temp += 1\n                    id2 = temp - 1\n                    f = True\n                    break\n            if f == True:\n                break\n        c = 0\n        for i in range(idx, n):\n            if rec[i][id1] == '0':\n                break\n            for j in range(id1, id2 + 1):\n                c += 1\n        if c == cones:\n            print('YES')\n        else:\n            print('NO')\n        t -= 1\nexcept Exception as e:\n    pass", "T = int(input())\n\nclass Solver:\n\n    def __init__(self):\n        for _ in range(T):\n            print(self.Solve())\n\n    def Solve(self):\n        (N, M) = map(int, input().split(' '))\n        g = []\n        for _ in range(N):\n            row = list(map(int, list(input())))\n            row = [0] + row + [0]\n            g += [row]\n        g = [[0 for _ in range(M + 2)]] + g + [[0 for _ in range(M + 2)]]\n        tl = br = None\n        cnt1 = 0\n        for r in range(1, N + 1):\n            for c in range(1, M + 1):\n                if g[r][c] == 1:\n                    cnt1 += 1\n                if tl is None:\n                    if g[r][c] == 1 and g[r - 1][c] == 0 and (g[r - 1][c - 1] == 0) and (g[r][c - 1] == 0):\n                        tl = (r, c)\n                if g[r][c] == 1 and g[r + 1][c] == 0 and (g[r + 1][c + 1] == 0) and (g[r][c + 1] == 0):\n                    br = (r, c)\n        (tlr, tlc) = tl\n        (brr, brc) = br\n        for r in range(tlr, brr + 1):\n            for c in range(tlc, brc + 1):\n                if g[r][c] == 0:\n                    return 'NO'\n        return 'YES' if (brr - tlr + 1) * (brc - tlc + 1) == cnt1 else 'NO'\n    pass\nSolver()", "t = int(input())\nfor t in range(t):\n    (p, q) = map(int, input().split())\n    x = y = q1 = q2 = 0\n    t1 = 0\n    for i in range(p):\n        s = input()\n        if t1 == 0:\n            if q1 == 0:\n                for j in range(q):\n                    if s[j] == '1':\n                        q1 = 1\n                    if q2 == 0:\n                        if s[j] == '1':\n                            q2 = 1\n                            x = j\n                    elif q2 == 1:\n                        if s[j] == '0':\n                            y = j - 1\n                            q2 = 2\n                    elif s[j] == '1':\n                        t1 = 1\n                        q2 = 2\n                        break\n                if q1 == 1:\n                    if s[-1] == '1':\n                        y = q - 1\n            else:\n                q2 = 0\n                for j in range(q):\n                    if s[j] == '1':\n                        q2 = 1\n                if q2 == 1:\n                    for j in range(x):\n                        if s[j] == '1':\n                            t1 = 1\n                            break\n                    for j in range(x, y + 1):\n                        if s[j] == '0':\n                            t1 = 1\n                            break\n                    for j in range(y + 1, q):\n                        if s[j] == '1':\n                            t1 = 1\n                            break\n    if t1 == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = tuple(map(int, input().strip().split()))\n    started = False\n    exit = False\n    fin = []\n    for i in range(0, n):\n        fin.append(input())\n    for i in range(0, n):\n        str_ = fin[i]\n        if str_ != '0' * m:\n            if started == False:\n                arr = str_.split('0')\n                remove = arr.count('')\n                if len(arr) - remove != 1:\n                    exit = True\n                    break\n                else:\n                    main_str = str_\n                    started = True\n            elif str_ != main_str:\n                exit = True\n                break\n    if exit == True:\n        print('NO')\n    else:\n        print('YES')", "def main():\n    for _ in range(int(input())):\n        print(find_ans())\n\ndef find_ans():\n    (ROWS, COLUMNS) = map(int, input().split())\n    grid = [input().strip() for i in range(ROWS)]\n    bottomright = None\n    topleft = None\n    for r in range(ROWS):\n        for c in range(COLUMNS):\n            if grid[r][c] == '1':\n                if topleft is None:\n                    topleft = (r, c)\n                bottomright = (r, c)\n    if topleft[1] > bottomright[1]:\n        return 'NO'\n    for r in range(ROWS):\n        for c in range(COLUMNS):\n            if topleft[0] <= r <= bottomright[0] and topleft[1] <= c <= bottomright[1]:\n                if grid[r][c] == '0':\n                    return 'NO'\n            elif grid[r][c] == '1':\n                return 'NO'\n    return 'YES'\nmain()", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    c = 0\n    a = []\n    for j in range(n):\n        ai = []\n        l1 = list(input())\n        if l1.count('1') > 0:\n            for k in range(len(l1)):\n                if l1[k] == '1':\n                    ai.append(k)\n            a.append(ai)\n    if a.count(a[0]) == len(a):\n        print('YES')\n    else:\n        print('NO')", "def bada_func(main):\n    leftflag = 0\n    rightflag = 0\n    flag = 0\n    for i in range(n):\n        for j in range(m):\n            if main[i][j] == '1' and leftflag == 0:\n                l = j\n                leftflag = 1\n            if main[i][j] == '0' and leftflag == 1 and (rightflag == 0):\n                r = j - 1\n                rightflag = 1\n                flag = 1\n            elif leftflag == 1 and rightflag == 0 and (j == m - 1):\n                r = j\n                rightflag = 1\n                flag = 1\n            if main[i][j] == '1' and flag == 1:\n                if l <= j <= r:\n                    pass\n                else:\n                    return 'NO'\n            elif main[i][j] == '0' and flag == 1 and (j == l):\n                flag = 2\n            elif main[i][j] == '0' and flag == 1:\n                if l <= j <= r:\n                    return 'NO'\n                else:\n                    pass\n            elif main[i][j] == '1' and flag == 2:\n                return 'NO'\n    if flag < 1:\n        return 'NO'\n    else:\n        return 'YES'\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    main = []\n    for i in range(n):\n        s = list(input())\n        main.append(s)\n    print(bada_func(main))", "class Rect:\n\n    def maxHist(self, row):\n        result = []\n        top_val = 0\n        max_area = 0\n        area = 0\n        i = 0\n        while i < len(row):\n            if len(result) == 0 or row[result[-1]] <= row[i]:\n                result.append(i)\n                i += 1\n            else:\n                top_val = row[result.pop()]\n                area = top_val * i\n                if len(result):\n                    area = top_val * (i - result[-1] - 1)\n                max_area = max(area, max_area)\n        while len(result):\n            top_val = row[result.pop()]\n            area = top_val * i\n            if len(result):\n                area = top_val * (i - result[-1] - 1)\n            max_area = max(area, max_area)\n        return max_area\n\n    def maxRect(self, A):\n        result = self.maxHist(A[0])\n        for i in range(1, len(A)):\n            for j in range(len(A[i])):\n                if A[i][j]:\n                    A[i][j] += A[i - 1][j]\n            result = max(result, self.maxHist(A[i]))\n        return result\n\ndef main():\n    t = int(input())\n    r = Rect()\n    while t > 0:\n        (ROW, COL) = map(int, input().split())\n        arr = []\n        ones_count = 0\n        for _ in range(ROW):\n            f = list(map(int, list(input())))\n            ones_count += sum(f)\n            arr.append(f)\n        res = r.maxRect(arr)\n        print('YES' if res == ones_count else 'NO')\n        t -= 1\nmain()", "n = int(input())\nfor _ in range(n):\n    flag = 0\n    h = 1\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    for q in range(n):\n        string = input()\n        if string.find('1') >= 0:\n            if flag == 0:\n                flag = 1\n                first = string\n                continue\n            if string != first:\n                print('NO')\n                for w in range(n - q - 1):\n                    input()\n                h = 0\n                break\n    if h == 1:\n        print('YES')", "def solver(n, m, grid):\n    (one, zero) = ('1', '0')\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == one:\n                col = j\n                while col < m and grid[i][col] == one:\n                    col += 1\n                row = i\n                while row < n and grid[row][j] == one:\n                    row += 1\n                for ix in range(i, n):\n                    for jx in range(m):\n                        if i <= ix < row and j <= jx < col:\n                            if grid[ix][jx] == zero:\n                                return 'NO'\n                        elif grid[ix][jx] == one:\n                            return 'NO'\n                return 'YES'\n    return 'YES'\ntry:\n    x = int(input())\n    for _ in range(x):\n        (n, m) = map(int, input().split())\n        grid = []\n        for i in range(n):\n            grid.append(input())\n        print(solver(n, m, grid))\nexcept:\n    pass", "try:\n    result = []\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        a = []\n        flag = 0\n        num = 0\n        res = 'NO'\n        for _ in range(n):\n            a.append(list(input().strip()))\n        for i in range(n):\n            for j in range(m):\n                if flag == 0 and a[i][j] == '1':\n                    start = [i, j]\n                    flag = 1\n                if a[i][j] == '1':\n                    num += 1\n                    end = [i, j]\n        for x in range(start[0], end[0] + 1):\n            for y in range(start[1], end[1] + 1):\n                if a[x][y] != '1':\n                    flag = 0\n                    break\n        if (end[0] - start[0] + 1) * (end[1] - start[1] + 1) == num:\n            res = 'YES'\n        if flag == 0:\n            res = 'NO'\n        result.append(res)\n    [print(a) for a in result]\nexcept:\n    pass", "def solve(n, m, A):\n    left = None\n    right = None\n    down = None\n    up = None\n    found = False\n    for row in range(m):\n        if found:\n            break\n        for col in range(n):\n            if A[col][row] == '1':\n                left = (col, row)\n                found = True\n                break\n    found = False\n    for row in range(m - 1, -1, -1):\n        if found:\n            break\n        for col in range(n):\n            if A[col][row] == '1':\n                right = (col, row)\n                found = True\n                break\n    found = False\n    for row in range(n):\n        if found:\n            break\n        for col in range(m):\n            if A[row][col] == '1':\n                up = (row, col)\n                found = True\n                break\n    found = False\n    for row in range(n - 1, -1, -1):\n        if found:\n            break\n        for col in range(m):\n            if A[row][col] == '1':\n                down = (row, col)\n                found = True\n                break\n    if right == None or left == None or up == None or (down == None):\n        return 'NO'\n    for row in range(up[0], down[0] + 1):\n        for col in range(left[1], right[1] + 1):\n            if A[row][col] == '0':\n                return 'NO'\n    return 'YES'\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    A = []\n    for _ in range(n):\n        s = input()\n        A.append(list(s))\n    print(solve(n, m, A))", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    mat = []\n    for i in range(n):\n        mat.append(input())\n    flag = True\n    (starting, ending) = (None, None)\n    for i in range(n):\n        temp_start = mat[i].find('1')\n        temp_last = mat[i].rfind('1')\n        if temp_start >= 0 and mat[i][temp_start:temp_last + 1].find('0') >= 0:\n            flag = False\n            break\n        elif temp_start >= 0 and starting == None and (ending == None):\n            starting = temp_start\n            ending = temp_last\n            ind = i\n        elif temp_start >= 0 and starting != None and (ending != None):\n            if temp_last == ending and temp_start == starting:\n                continue\n            else:\n                flag = False\n                break\n        if flag == False:\n            break\n    if flag and starting != None:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "def cal(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    for row in range(len(matrix)):\n        for col in range(len(matrix[0])):\n            if row - 1 > -1 and row + 1 < n:\n                if matrix[row - 1][col] == '1' and matrix[row + 1][col] == '1' and (matrix[row][col] == '0'):\n                    return 'NO'\n            if col - 1 > -1 and col + 1 < m:\n                if matrix[row][col - 1] == '1' and matrix[row][col + 1] == '1' and (matrix[row][col] == '0'):\n                    return 'NO'\n            if row - 1 > -1 and col - 1 > -1:\n                if matrix[row][col - 1] == '1' and matrix[row - 1][col] == '1' and (matrix[row][col] == '0'):\n                    return 'NO'\n            if row + 1 < n and col + 1 < m:\n                if matrix[row + 1][col] == '1' and matrix[row][col + 1] == '1' and (matrix[row][col] == '0'):\n                    return 'NO'\n            if row + 1 < n and col - 1 > -1:\n                if matrix[row + 1][col] == '1' and matrix[row][col - 1] == '1' and (matrix[row][col] == '0'):\n                    return 'NO'\n            if row - 1 > -1 and col + 1 < m:\n                if matrix[row - 1][col] == '1' and matrix[row][col + 1] == '1' and (matrix[row][col] == '0'):\n                    return 'NO'\n    return 'YES'\nt = int(input())\nans = []\nfor i in range(t):\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    mat = []\n    for i in range(n):\n        mat.append(list(input()))\n    ans.append(cal(mat))\nfor i in ans:\n    print(i)", "for _ in range(int(input())):\n    arr = []\n    (a, b) = list(map(int, input().split()))\n    for i in range(a):\n        brr = input()\n        arr.append(brr)\n    flag = 0\n    for i in range(a):\n        for j in range(b):\n            if arr[i][j] == '1':\n                fir = [i, j]\n                flag = 1\n                break\n        if flag:\n            break\n    flag = 0\n    for i in range(a - 1, -1, -1):\n        for j in range(b - 1, -1, -1):\n            if arr[i][j] == '1':\n                las = [i, j]\n                flag = 1\n                break\n        if flag:\n            break\n    flag = 0\n    for i in range(a):\n        for j in range(b):\n            if arr[i][j] == '1':\n                if i < fir[0] or i > las[0] or j < fir[1] or (j > las[1]):\n                    flag = 1\n                    break\n            elif arr[i][j] == '0':\n                if (i > fir[0] and i < las[0]) and (j > fir[1] and j < las[1]):\n                    flag = 1\n                    break\n        if flag:\n            break\n    if flag:\n        print('NO')\n        continue\n    print('YES')", "for test in range(int(input())):\n    (N, M) = map(int, input().split())\n    a = [input() for i in range(N)]\n    (ba, bb, ca, cb) = (float('inf'), float('-inf'), float('inf'), float('-inf'))\n    for i in range(N):\n        for j in range(M):\n            if a[i][j] == '1':\n                ba = min(ba, i)\n                bb = max(ba, i)\n                ca = min(ca, j)\n                cb = max(cb, j)\n    e = 0\n    for i in range(ba, bb + 1):\n        for j in range(ca, cb + 1):\n            if a[i][j] == '0':\n                e = 1\n                break\n    if e == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mat = []\n    for i in range(n):\n        mat.append(list(str(input())))\n\n    def solve():\n        x_min = m\n        x_max = -1\n        y_min = n\n        y_max = -1\n        for i in range(n):\n            for j in range(m):\n                if mat[i][j] == '1':\n                    if x_min > j:\n                        x_min = j\n                    if x_max < j:\n                        x_max = j\n                    if y_min > i:\n                        y_min = i\n                    if y_max < i:\n                        y_max = i\n        for i in range(y_min, y_max + 1):\n            for j in range(x_min, x_max + 1):\n                if mat[i][j] == '0':\n                    return 'NO'\n        return 'YES'\n    print(solve())", "import re\nfor _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    grid = []\n    for pp in range(N):\n        grid.append(list(map(int, list(input()))))\n    grid2 = []\n    for i in range(N):\n        if 1 in grid[i]:\n            grid2.append(grid[i])\n    temp = True\n    for item in zip(*grid2):\n        if item[0] == 0:\n            if sum(item) == 0:\n                continue\n            else:\n                print('NO')\n                temp = False\n                break\n        if item[0] == 1:\n            if sum(item) == len(item):\n                continue\n            else:\n                print('NO')\n                temp = False\n                break\n    if temp == True:\n        print('YES')", "try:\n    t = int(input())\n    for x in range(t):\n        nm = input().split()\n        n = int(nm[0])\n        m = int(nm[1])\n        arr = []\n        brr = []\n        count = 0\n        for i in range(n):\n            a = input()\n            crr = []\n            for j in range(m):\n                if a[j] == '1':\n                    arr.append([i, j])\n                    count += 1\n                crr.append(a[j])\n            brr.append(crr)\n        x = True\n        if count > 0:\n            for i in range(arr[0][0], arr[-1][0] + 1):\n                for j in range(arr[0][1], arr[-1][1] + 1):\n                    if brr[i][j] == '0':\n                        x = False\n                        break\n            pro = (arr[-1][0] + 1 - arr[0][0]) * (arr[-1][1] + 1 - arr[0][1])\n            if x == True and count == pro:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')\nexcept:\n    pass", "T = int(input())\nfor _ in range(T):\n    result = 'YES'\n    index = 0\n    (N, M) = list(map(int, input().split()))\n    case = []\n    index_mass = []\n    for i in range(N):\n        string = input()\n        string = [int(simb) for simb in string]\n        case.append(string)\n    for i in case:\n        flag = 0\n        j = 0\n        while j < len(i):\n            if i[j] == 1:\n                flag = 1\n                index_mass.append(j)\n            j += 1\n        if flag == 1:\n            index = case.index(i)\n            break\n    idx = 0\n    while idx < len(index_mass) - 1:\n        if index_mass[idx + 1] - index_mass[idx] != 1:\n            result = 'NO'\n        idx += 1\n    while index < len(case):\n        how = 0\n        for k in case[index]:\n            if k == 1 and (not case[index].index(k) in index_mass):\n                result = 'NO'\n            elif k == 1 and case[index].index(k) in index_mass:\n                how += 1\n        if how != len(index_mass) and 1 in case[index]:\n            result = 'NO'\n        index += 1\n    if index_mass:\n        print(result)\n    else:\n        print('NO')", "try:\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        mat = []\n        for _ in range(n):\n            mat.append(list(input()))\n        (lower_i, lower_j, upper_i, upper_j) = (n, m, -1, -1)\n        for i in range(n):\n            for j in range(m):\n                if mat[i][j] == '1':\n                    if i < lower_i:\n                        lower_i = i\n                    if j < lower_j:\n                        lower_j = j\n                    if upper_i < i:\n                        upper_i = i\n                    if upper_j < j:\n                        upper_j = j\n        for x in range(lower_i, upper_i + 1):\n            for y in range(lower_j, upper_j + 1):\n                if mat[x][y] == '0':\n                    print('NO')\n                    break\n            else:\n                continue\n            break\n        else:\n            print('YES')\nexcept EOFError:\n    pass", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    s = []\n    for j in range(n):\n        temp = input()\n        s.append(temp)\n    flag = 0\n    flag1 = 0\n    temp2 = '0' * m\n    for j in range(n):\n        if flag1 == 0:\n            if s[j] == temp2:\n                continue\n        if flag == 0:\n            if '1' in s[j] and flag1 == 0:\n                temp = s[j]\n                flag1 = 1\n            elif flag1 == 1:\n                if s[j] == temp:\n                    continue\n                elif s[j] == temp2:\n                    continue\n                else:\n                    print('NO')\n                    break\n    else:\n        print('YES')", "try:\n    t = int(input())\n    for x in range(t):\n        nm = input().split()\n        n = int(nm[0])\n        m = int(nm[1])\n        arr = []\n        brr = []\n        count = 0\n        for i in range(n):\n            a = input()\n            crr = []\n            for j in range(m):\n                if a[j] == '1':\n                    arr.append([i, j])\n                    count += 1\n                crr.append(a[j])\n            brr.append(crr)\n        x = True\n        if count > 0:\n            for i in range(arr[0][0], arr[-1][0] + 1):\n                for j in range(arr[0][1], arr[-1][1] + 1):\n                    if brr[i][j] == '0':\n                        x = False\n                        break\n            pro = (arr[-1][0] + 1 - arr[0][0]) * (arr[-1][1] + 1 - arr[0][1])\n            if x == True and count == pro:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')\nexcept:\n    pass", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    i = -1\n    j = -1\n    enter = False\n    exit = False\n    if '1' in s:\n        i = s.index('1')\n        j = n - s[::-1].index('1') - 1\n        enter = True\n    ss = s.strip('0')\n    flag = True\n    if '0' in ss:\n        flag = False\n    for kk in range(n - 1):\n        s = input()\n        if flag == True:\n            ii = -1\n            jj = -1\n            if '1' in s:\n                if enter == False:\n                    i = s.index('1')\n                    j = n - s[::-1].index('1') - 1\n                    enter = True\n                if exit == True:\n                    flag = False\n                    continue\n                ii = s.index('1')\n                jj = n - s[::-1].index('1') - 1\n                enter = True\n            elif enter == True:\n                exit = True\n            if exit == True:\n                continue\n            ss = s.strip('0')\n            if '0' in ss or ii != i or jj != j:\n                flag = False\n    if flag == False:\n        print('NO')\n    else:\n        print('YES')", "import re\n\ndef solve():\n    num = str(input()).split(' ')\n    n = int(num[0])\n    m = int(num[1])\n    s = []\n    for i in range(n):\n        s.append(str(input()))\n    rec = []\n    for i in s:\n        temp = ''\n        for j in range(len(i)):\n            if i[j] == '1':\n                temp += str(j)\n        if temp != '':\n            rec.append(temp)\n    a = rec[0]\n    flag = 1\n    for i in rec:\n        if a != i:\n            flag = 0\n    if flag:\n        print('YES')\n    else:\n        print('NO')\ntestCase = int(input())\nwhile testCase:\n    solve()\n    testCase -= 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(str, input().split())))\n    r = []\n    c = []\n    for j in range(m):\n        for i in range(n):\n            c.append(a[i][0][j])\n    for i in range(n):\n        for j in range(m):\n            r.append(a[i][0][j])\n    R = []\n    C = []\n    for i in range(0, n * m, m):\n        if '1' in r[i:m + i]:\n            R.append(1)\n        else:\n            R.append(-1)\n    for i in range(0, n * m, n):\n        if '1' in c[i:i + n]:\n            C.append(1)\n        else:\n            C.append(-1)\n    lc = 0\n    rc = 0\n    lr = 0\n    rr = 0\n    for i in range(len(C)):\n        if C[i] == 1:\n            lc = i\n            break\n    for i in range(len(C) - 1, -1, -1):\n        if C[i] == 1:\n            rc = i\n            break\n    for i in range(len(R)):\n        if R[i] == 1:\n            lr = i\n            break\n    for i in range(len(R) - 1, -1, -1):\n        if R[i] == 1:\n            rr = i\n            break\n    f = 1\n    for i in range(lr * m, (rr + 1) * m, m):\n        if '0' in r[i + lc:rc + i + 1]:\n            f = -1\n    if f == -1:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    l = []\n    f = 1\n    for j in range(m):\n        s = input()\n        if f == 1:\n            t = []\n            if len(l) == 0:\n                for i in range(n):\n                    if s[i] == '1':\n                        l.append(i)\n                for j in range(len(l) - 1):\n                    if l[j + 1] - l[j] != 1:\n                        f = 0\n                        break\n            else:\n                for i in range(n):\n                    if s[i] == '1':\n                        t.append(i)\n                if len(t) > 0:\n                    if t != l:\n                        f = 0\n    if f == 0:\n        print('NO')\n        continue\n    print('YES')", "test_case = int(input())\nwhile test_case:\n    (n, m) = map(int, input().split())\n    ones = []\n    not_possible = 0\n    (f2, f4) = (0, 0)\n    for i in range(n):\n        row = input()\n        indices = []\n        count = 0\n        (f1, f3) = (0, 0)\n        for j in range(m):\n            if row[j] == '1':\n                indices.append(j)\n                count += 1\n                if f1 == 0:\n                    f1 = 1\n                if f3 == 1 and f1 == 1:\n                    not_possible = 1\n            elif f1 == 1:\n                f3 = 1\n        if indices:\n            if f2 == 0:\n                f2 = 1\n            if f2 == 1 and f4 == 1:\n                not_possible = 1\n        elif f2 == 1:\n            f4 = 1\n        ones.append([i, count, indices])\n    if not_possible == 1:\n        print('NO')\n    else:\n        flag = 0\n        for i in range(n - 1):\n            if ones[i][2] and ones[i + 1][2]:\n                if ones[i][2] != ones[i + 1][2]:\n                    flag = 1\n                    break\n        if flag == 1:\n            print('NO')\n        else:\n            print('YES')\n    test_case -= 1", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ninp = lambda : list(map(int, sys.stdin.readline().rstrip('\\r\\n').split()))\nmod = 10 ** 9 + 7\nMod = 998244353\nINF = float('inf')\ntc = 1\n(tc,) = inp()\nfor _ in range(tc):\n    (n, m) = inp()\n    a = [[int(i) for i in input()] for j in range(n)]\n    vis = [[False for i in range(m)] for j in range(n)]\n    last = [-1] * m\n    f = False\n    final = True\n    ones = sum([i.count(1) for i in a])\n    start = -1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                if f == False:\n                    start = i\n                f = True\n                last[j] = i\n            elif f == True:\n                break\n        if f == True:\n            break\n    f = False\n    for i in range(m):\n        ind = last[i]\n        while ind < n:\n            if a[ind][i] == 1:\n                f = True\n                last[i] = ind\n            else:\n                break\n            ind += 1\n    if len(set(last)) > 2:\n        final = False\n    lol = list(sorted(set(last)))\n    ans = last.count(lol[-1]) * (lol[-1] - start + 1)\n    if ones != ans:\n        final = False\n    print('YES' if final else 'NO')"]